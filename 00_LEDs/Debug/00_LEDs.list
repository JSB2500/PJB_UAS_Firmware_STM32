
00_LEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a08  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08005c08  08005c08  00015c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  0800600c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000418  200001dc  080061e8  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  200005f4  080061e8  000205f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000190be  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000372f  00000000  00000000  000392c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000ec38  00000000  00000000  0003c9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000f00  00000000  00000000  0004b630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000014a0  00000000  00000000  0004c530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027775  00000000  00000000  0004d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001af65  00000000  00000000  00075145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f267e  00000000  00000000  000900aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00182728  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003d94  00000000  00000000  00182778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  0018650c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001865d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08005bf0 	.word	0x08005bf0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08005bf0 	.word	0x08005bf0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_InitTick+0x3c>)
{
 80005f8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_InitTick+0x40>)
 80005fc:	7818      	ldrb	r0, [r3, #0]
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f0 	udiv	r3, r3, r0
 8000606:	6810      	ldr	r0, [r2, #0]
 8000608:	fbb0 f0f3 	udiv	r0, r0, r3
 800060c:	f000 f898 	bl	8000740 <HAL_SYSTICK_Config>
 8000610:	4604      	mov	r4, r0
 8000612:	b958      	cbnz	r0, 800062c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000614:	2d0f      	cmp	r5, #15
 8000616:	d809      	bhi.n	800062c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	4602      	mov	r2, r0
 800061a:	4629      	mov	r1, r5
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f84e 	bl	80006c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HAL_InitTick+0x44>)
 8000626:	4620      	mov	r0, r4
 8000628:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800062c:	2001      	movs	r0, #1
 800062e:	e7fc      	b.n	800062a <HAL_InitTick+0x36>
 8000630:	20000000 	.word	0x20000000
 8000634:	20000008 	.word	0x20000008
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_Init>:
{
 800063c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f82c 	bl	800069c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ffd5 	bl	80005f4 <HAL_InitTick>
  HAL_MspInit();
 800064a:	f002 fcb5 	bl	8002fb8 <HAL_MspInit>
}
 800064e:	2000      	movs	r0, #0
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x10>)
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_IncTick+0x14>)
 8000658:	6811      	ldr	r1, [r2, #0]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	440b      	add	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200001f8 	.word	0x200001f8
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <HAL_GetTick+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	200001f8 	.word	0x200001f8

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff6 	bl	800066c <HAL_GetTick>
 8000680:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000684:	bf1e      	ittt	ne
 8000686:	4b04      	ldrne	r3, [pc, #16]	; (8000698 <HAL_Delay+0x20>)
 8000688:	781b      	ldrbne	r3, [r3, #0]
 800068a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	1b43      	subs	r3, r0, r5
 8000692:	42a3      	cmp	r3, r4
 8000694:	d3fa      	bcc.n	800068c <HAL_Delay+0x14>
  {
  }
}
 8000696:	bd38      	pop	{r3, r4, r5, pc}
 8000698:	20000000 	.word	0x20000000

0800069c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006aa:	0412      	lsls	r2, r2, #16
 80006ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	68dc      	ldr	r4, [r3, #12]
 80006c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ca:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	2d04      	cmp	r5, #4
 80006d2:	bf28      	it	cs
 80006d4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006dc:	bf8c      	ite	hi
 80006de:	3c03      	subhi	r4, #3
 80006e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80006e6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	fa01 f104 	lsl.w	r1, r1, r4
 80006f8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000700:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000702:	db06      	blt.n	8000712 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000708:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800070c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000710:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	f000 000f 	and.w	r0, r0, #15
 8000716:	4a02      	ldr	r2, [pc, #8]	; (8000720 <HAL_NVIC_SetPriority+0x60>)
 8000718:	5413      	strb	r3, [r2, r0]
 800071a:	e7f9      	b.n	8000710 <HAL_NVIC_SetPriority+0x50>
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	e000ed14 	.word	0xe000ed14

08000724 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000724:	2800      	cmp	r0, #0
 8000726:	db08      	blt.n	800073a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000728:	0942      	lsrs	r2, r0, #5
 800072a:	2301      	movs	r3, #1
 800072c:	f000 001f 	and.w	r0, r0, #31
 8000730:	fa03 f000 	lsl.w	r0, r3, r0
 8000734:	4b01      	ldr	r3, [pc, #4]	; (800073c <HAL_NVIC_EnableIRQ+0x18>)
 8000736:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	3801      	subs	r0, #1
 8000742:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000746:	d20b      	bcs.n	8000760 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <HAL_SYSTICK_Config+0x24>)
 800074e:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000752:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000758:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000760:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000768:	6803      	ldr	r3, [r0, #0]
{
 800076a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800076c:	2018      	movs	r0, #24
 800076e:	b2d9      	uxtb	r1, r3
 8000770:	3910      	subs	r1, #16
 8000772:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8000776:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000778:	4c05      	ldr	r4, [pc, #20]	; (8000790 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800077a:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800077c:	5c20      	ldrb	r0, [r4, r0]
 800077e:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000780:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8000784:	f020 0003 	bic.w	r0, r0, #3
 8000788:	bf88      	it	hi
 800078a:	3004      	addhi	r0, #4
 800078c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	08005c08 	.word	0x08005c08

08000794 <HAL_DMA_Init>:
{
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000798:	f7ff ff68 	bl	800066c <HAL_GetTick>
 800079c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800079e:	2c00      	cmp	r4, #0
 80007a0:	d073      	beq.n	800088a <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 80007a2:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80007a4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80007a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80007b0:	6813      	ldr	r3, [r2, #0]
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007b8:	6821      	ldr	r1, [r4, #0]
 80007ba:	680b      	ldr	r3, [r1, #0]
 80007bc:	07d8      	lsls	r0, r3, #31
 80007be:	d42f      	bmi.n	8000820 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80007c0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c2:	4d33      	ldr	r5, [pc, #204]	; (8000890 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007c4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	68e2      	ldr	r2, [r4, #12]
 80007d0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007d2:	6922      	ldr	r2, [r4, #16]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	6962      	ldr	r2, [r4, #20]
 80007d8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007da:	69e2      	ldr	r2, [r4, #28]
 80007dc:	4303      	orrs	r3, r0
 80007de:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007e0:	6a22      	ldr	r2, [r4, #32]
 80007e2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007e8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007ec:	bf02      	ittt	eq
 80007ee:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80007f2:	4335      	orreq	r5, r6
 80007f4:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007f6:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80007f8:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007fa:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007fc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000800:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000804:	d133      	bne.n	800086e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8000806:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000808:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800080a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800080c:	b37d      	cbz	r5, 800086e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800080e:	b990      	cbnz	r0, 8000836 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8000810:	2a01      	cmp	r2, #1
 8000812:	d021      	beq.n	8000858 <HAL_DMA_Init+0xc4>
 8000814:	f032 0202 	bics.w	r2, r2, #2
 8000818:	d129      	bne.n	800086e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800081a:	01ea      	lsls	r2, r5, #7
 800081c:	d527      	bpl.n	800086e <HAL_DMA_Init+0xda>
 800081e:	e01e      	b.n	800085e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000820:	f7ff ff24 	bl	800066c <HAL_GetTick>
 8000824:	1b40      	subs	r0, r0, r5
 8000826:	2805      	cmp	r0, #5
 8000828:	d9c6      	bls.n	80007b8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082a:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800082c:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000830:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000834:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000836:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800083a:	d114      	bne.n	8000866 <HAL_DMA_Init+0xd2>
    switch (tmp)
 800083c:	2a03      	cmp	r2, #3
 800083e:	d816      	bhi.n	800086e <HAL_DMA_Init+0xda>
 8000840:	a001      	add	r0, pc, #4	; (adr r0, 8000848 <HAL_DMA_Init+0xb4>)
 8000842:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000846:	bf00      	nop
 8000848:	0800085f 	.word	0x0800085f
 800084c:	0800081b 	.word	0x0800081b
 8000850:	0800085f 	.word	0x0800085f
 8000854:	08000859 	.word	0x08000859
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000858:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800085c:	d107      	bne.n	800086e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800085e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000860:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000862:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000864:	e7e4      	b.n	8000830 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8000866:	2a02      	cmp	r2, #2
 8000868:	d9f9      	bls.n	800085e <HAL_DMA_Init+0xca>
 800086a:	2a03      	cmp	r2, #3
 800086c:	d0d5      	beq.n	800081a <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800086e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000870:	4620      	mov	r0, r4
 8000872:	f7ff ff79 	bl	8000768 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000876:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000878:	233f      	movs	r3, #63	; 0x3f
 800087a:	4093      	lsls	r3, r2
 800087c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800087e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000880:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000882:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000884:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000888:	e7d4      	b.n	8000834 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800088a:	2001      	movs	r0, #1
 800088c:	e7d2      	b.n	8000834 <HAL_DMA_Init+0xa0>
 800088e:	bf00      	nop
 8000890:	e010803f 	.word	0xe010803f

08000894 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000894:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000898:	2b02      	cmp	r3, #2
 800089a:	d003      	beq.n	80008a4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80008a0:	2001      	movs	r0, #1
 80008a2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80008a4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80008a6:	2305      	movs	r3, #5
 80008a8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80008ac:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80008ae:	6813      	ldr	r3, [r2, #0]
 80008b0:	f023 0301 	bic.w	r3, r3, #1
 80008b4:	6013      	str	r3, [r2, #0]
}
 80008b6:	4770      	bx	lr

080008b8 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80008b8:	2300      	movs	r3, #0
{
 80008ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80008bc:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80008be:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80008c0:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_DMA_IRQHandler+0x178>)
{
 80008c2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008c4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80008c6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80008c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80008ca:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80008cc:	409a      	lsls	r2, r3
 80008ce:	4232      	tst	r2, r6
 80008d0:	d00c      	beq.n	80008ec <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80008d2:	6801      	ldr	r1, [r0, #0]
 80008d4:	6808      	ldr	r0, [r1, #0]
 80008d6:	0740      	lsls	r0, r0, #29
 80008d8:	d508      	bpl.n	80008ec <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80008da:	6808      	ldr	r0, [r1, #0]
 80008dc:	f020 0004 	bic.w	r0, r0, #4
 80008e0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80008e2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80008e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80008e6:	f042 0201 	orr.w	r2, r2, #1
 80008ea:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80008ec:	2201      	movs	r2, #1
 80008ee:	409a      	lsls	r2, r3
 80008f0:	4232      	tst	r2, r6
 80008f2:	d008      	beq.n	8000906 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80008f4:	6821      	ldr	r1, [r4, #0]
 80008f6:	6949      	ldr	r1, [r1, #20]
 80008f8:	0609      	lsls	r1, r1, #24
 80008fa:	d504      	bpl.n	8000906 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80008fc:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80008fe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000900:	f042 0202 	orr.w	r2, r2, #2
 8000904:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000906:	2204      	movs	r2, #4
 8000908:	409a      	lsls	r2, r3
 800090a:	4232      	tst	r2, r6
 800090c:	d008      	beq.n	8000920 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800090e:	6821      	ldr	r1, [r4, #0]
 8000910:	6809      	ldr	r1, [r1, #0]
 8000912:	0788      	lsls	r0, r1, #30
 8000914:	d504      	bpl.n	8000920 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000916:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000918:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800091a:	f042 0204 	orr.w	r2, r2, #4
 800091e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000920:	2210      	movs	r2, #16
 8000922:	409a      	lsls	r2, r3
 8000924:	4232      	tst	r2, r6
 8000926:	d010      	beq.n	800094a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	6819      	ldr	r1, [r3, #0]
 800092c:	0709      	lsls	r1, r1, #28
 800092e:	d50c      	bpl.n	800094a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000930:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	0350      	lsls	r0, r2, #13
 8000936:	d537      	bpl.n	80009a8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	0319      	lsls	r1, r3, #12
 800093c:	d401      	bmi.n	8000942 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800093e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000940:	e000      	b.n	8000944 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000942:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000944:	b10b      	cbz	r3, 800094a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000946:	4620      	mov	r0, r4
 8000948:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800094a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800094c:	2220      	movs	r2, #32
 800094e:	408a      	lsls	r2, r1
 8000950:	4232      	tst	r2, r6
 8000952:	d03a      	beq.n	80009ca <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000954:	6823      	ldr	r3, [r4, #0]
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	06c6      	lsls	r6, r0, #27
 800095a:	d536      	bpl.n	80009ca <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800095c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800095e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000962:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000964:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000966:	d127      	bne.n	80009b8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000968:	f022 0216 	bic.w	r2, r2, #22
 800096c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000974:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000976:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000978:	b90a      	cbnz	r2, 800097e <HAL_DMA_IRQHandler+0xc6>
 800097a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800097c:	b11a      	cbz	r2, 8000986 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	f022 0208 	bic.w	r2, r2, #8
 8000984:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000986:	233f      	movs	r3, #63	; 0x3f
 8000988:	408b      	lsls	r3, r1
 800098a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800098c:	2300      	movs	r3, #0
 800098e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000992:	2301      	movs	r3, #1
 8000994:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000998:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800099a:	2b00      	cmp	r3, #0
 800099c:	d045      	beq.n	8000a2a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800099e:	4620      	mov	r0, r4
}
 80009a0:	b003      	add	sp, #12
 80009a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80009a6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	05d2      	lsls	r2, r2, #23
 80009ac:	d4c7      	bmi.n	800093e <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	f022 0208 	bic.w	r2, r2, #8
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	e7c2      	b.n	800093e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009b8:	0350      	lsls	r0, r2, #13
 80009ba:	d527      	bpl.n	8000a0c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	0319      	lsls	r1, r3, #12
 80009c0:	d431      	bmi.n	8000a26 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80009c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80009c4:	b10b      	cbz	r3, 80009ca <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80009c6:	4620      	mov	r0, r4
 80009c8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80009ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009cc:	b36b      	cbz	r3, 8000a2a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80009ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009d0:	07da      	lsls	r2, r3, #31
 80009d2:	d519      	bpl.n	8000a08 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 80009d4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 80009d8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80009da:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80009de:	2305      	movs	r3, #5
 80009e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80009e4:	6813      	ldr	r3, [r2, #0]
 80009e6:	f023 0301 	bic.w	r3, r3, #1
 80009ea:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80009ec:	9b01      	ldr	r3, [sp, #4]
 80009ee:	3301      	adds	r3, #1
 80009f0:	42bb      	cmp	r3, r7
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	d802      	bhi.n	80009fc <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	07db      	lsls	r3, r3, #31
 80009fa:	d4f7      	bmi.n	80009ec <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 80009fc:	2300      	movs	r3, #0
 80009fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000a08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a0a:	e7c6      	b.n	800099a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a12:	d108      	bne.n	8000a26 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a14:	6819      	ldr	r1, [r3, #0]
 8000a16:	f021 0110 	bic.w	r1, r1, #16
 8000a1a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a1c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000a1e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000a26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a28:	e7cc      	b.n	80009c4 <HAL_DMA_IRQHandler+0x10c>
}
 8000a2a:	b003      	add	sp, #12
 8000a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a38:	2300      	movs	r3, #0
{
 8000a3a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000c10 <HAL_GPIO_Init+0x1dc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a40:	4a71      	ldr	r2, [pc, #452]	; (8000c08 <HAL_GPIO_Init+0x1d4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a42:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000c14 <HAL_GPIO_Init+0x1e0>
    ioposition = ((uint32_t)0x01) << position;
 8000a46:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a48:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000a4a:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a4c:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000a50:	ea37 0404 	bics.w	r4, r7, r4
 8000a54:	f040 80be 	bne.w	8000bd4 <HAL_GPIO_Init+0x1a0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a58:	684c      	ldr	r4, [r1, #4]
 8000a5a:	f024 0a10 	bic.w	sl, r4, #16
 8000a5e:	f1ba 0f02 	cmp.w	sl, #2
 8000a62:	d116      	bne.n	8000a92 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 8000a64:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a68:	f003 0b07 	and.w	fp, r3, #7
 8000a6c:	f04f 0c0f 	mov.w	ip, #15
 8000a70:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8000a74:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000a78:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a7c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a80:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a84:	690e      	ldr	r6, [r1, #16]
 8000a86:	fa06 f60b 	lsl.w	r6, r6, fp
 8000a8a:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000a8e:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8000a92:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000a96:	f04f 0c03 	mov.w	ip, #3
      temp = GPIOx->MODER;
 8000a9a:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a9e:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000aa2:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa6:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000aaa:	ea6f 060c 	mvn.w	r6, ip
 8000aae:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ab2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ab6:	9601      	str	r6, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ab8:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000abc:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000ac0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac4:	d815      	bhi.n	8000af2 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 8000ac6:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000aca:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ace:	68ce      	ldr	r6, [r1, #12]
 8000ad0:	fa06 fa0e 	lsl.w	sl, r6, lr
 8000ad4:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8000ad8:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000adc:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ae0:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ae4:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000ae8:	fa0c fc03 	lsl.w	ip, ip, r3
 8000aec:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8000af0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000af2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000af4:	9e01      	ldr	r6, [sp, #4]
 8000af6:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000af8:	688e      	ldr	r6, [r1, #8]
 8000afa:	fa06 f60e 	lsl.w	r6, r6, lr
 8000afe:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000b00:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b02:	00e6      	lsls	r6, r4, #3
 8000b04:	d566      	bpl.n	8000bd4 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000b0a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b0e:	f003 0c03 	and.w	ip, r3, #3
 8000b12:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b1a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b1e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000b26:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000b2a:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000b2e:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000b32:	9603      	str	r6, [sp, #12]
 8000b34:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b36:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8000b3a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b3e:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b42:	4e32      	ldr	r6, [pc, #200]	; (8000c0c <HAL_GPIO_Init+0x1d8>)
 8000b44:	42b0      	cmp	r0, r6
 8000b46:	d04c      	beq.n	8000be2 <HAL_GPIO_Init+0x1ae>
 8000b48:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b4c:	42b0      	cmp	r0, r6
 8000b4e:	d04a      	beq.n	8000be6 <HAL_GPIO_Init+0x1b2>
 8000b50:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b54:	42b0      	cmp	r0, r6
 8000b56:	d048      	beq.n	8000bea <HAL_GPIO_Init+0x1b6>
 8000b58:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b5c:	42b0      	cmp	r0, r6
 8000b5e:	d046      	beq.n	8000bee <HAL_GPIO_Init+0x1ba>
 8000b60:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b64:	42b0      	cmp	r0, r6
 8000b66:	d044      	beq.n	8000bf2 <HAL_GPIO_Init+0x1be>
 8000b68:	4548      	cmp	r0, r9
 8000b6a:	d044      	beq.n	8000bf6 <HAL_GPIO_Init+0x1c2>
 8000b6c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000b70:	42b0      	cmp	r0, r6
 8000b72:	d042      	beq.n	8000bfa <HAL_GPIO_Init+0x1c6>
 8000b74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b78:	42b0      	cmp	r0, r6
 8000b7a:	d040      	beq.n	8000bfe <HAL_GPIO_Init+0x1ca>
 8000b7c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b80:	42b0      	cmp	r0, r6
 8000b82:	d03e      	beq.n	8000c02 <HAL_GPIO_Init+0x1ce>
 8000b84:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b88:	42b0      	cmp	r0, r6
 8000b8a:	bf0c      	ite	eq
 8000b8c:	2609      	moveq	r6, #9
 8000b8e:	260a      	movne	r6, #10
 8000b90:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b94:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b98:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b9c:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b9e:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000ba2:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ba4:	bf0c      	ite	eq
 8000ba6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000ba8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000baa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000bae:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000bb0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bb2:	bf0c      	ite	eq
 8000bb4:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bb6:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bb8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000bbc:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000bbe:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bc0:	bf0c      	ite	eq
 8000bc2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bc4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000bc8:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000bca:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000bcc:	bf54      	ite	pl
 8000bce:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000bd0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000bd2:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	2b10      	cmp	r3, #16
 8000bd8:	f47f af35 	bne.w	8000a46 <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 8000bdc:	b005      	add	sp, #20
 8000bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000be2:	2600      	movs	r6, #0
 8000be4:	e7d4      	b.n	8000b90 <HAL_GPIO_Init+0x15c>
 8000be6:	2601      	movs	r6, #1
 8000be8:	e7d2      	b.n	8000b90 <HAL_GPIO_Init+0x15c>
 8000bea:	2602      	movs	r6, #2
 8000bec:	e7d0      	b.n	8000b90 <HAL_GPIO_Init+0x15c>
 8000bee:	2603      	movs	r6, #3
 8000bf0:	e7ce      	b.n	8000b90 <HAL_GPIO_Init+0x15c>
 8000bf2:	2604      	movs	r6, #4
 8000bf4:	e7cc      	b.n	8000b90 <HAL_GPIO_Init+0x15c>
 8000bf6:	2605      	movs	r6, #5
 8000bf8:	e7ca      	b.n	8000b90 <HAL_GPIO_Init+0x15c>
 8000bfa:	2606      	movs	r6, #6
 8000bfc:	e7c8      	b.n	8000b90 <HAL_GPIO_Init+0x15c>
 8000bfe:	2607      	movs	r6, #7
 8000c00:	e7c6      	b.n	8000b90 <HAL_GPIO_Init+0x15c>
 8000c02:	2608      	movs	r6, #8
 8000c04:	e7c4      	b.n	8000b90 <HAL_GPIO_Init+0x15c>
 8000c06:	bf00      	nop
 8000c08:	40013c00 	.word	0x40013c00
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40021400 	.word	0x40021400

08000c18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c18:	b10a      	cbz	r2, 8000c1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c1a:	6181      	str	r1, [r0, #24]
  }
}
 8000c1c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c1e:	0409      	lsls	r1, r1, #16
 8000c20:	e7fb      	b.n	8000c1a <HAL_GPIO_WritePin+0x2>

08000c22 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c22:	4770      	bx	lr

08000c24 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000c26:	6951      	ldr	r1, [r2, #20]
 8000c28:	4201      	tst	r1, r0
{
 8000c2a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c2c:	d002      	beq.n	8000c34 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c2e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c30:	f7ff fff7 	bl	8000c22 <HAL_GPIO_EXTI_Callback>
}
 8000c34:	bd08      	pop	{r3, pc}
 8000c36:	bf00      	nop
 8000c38:	40013c00 	.word	0x40013c00

08000c3c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000c3c:	6803      	ldr	r3, [r0, #0]
 8000c3e:	699a      	ldr	r2, [r3, #24]
 8000c40:	0791      	lsls	r1, r2, #30
 8000c42:	d501      	bpl.n	8000c48 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000c48:	699a      	ldr	r2, [r3, #24]
 8000c4a:	07d2      	lsls	r2, r2, #31
 8000c4c:	d403      	bmi.n	8000c56 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000c4e:	699a      	ldr	r2, [r3, #24]
 8000c50:	f042 0201 	orr.w	r2, r2, #1
 8000c54:	619a      	str	r2, [r3, #24]
  }
}
 8000c56:	4770      	bx	lr

08000c58 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000c58:	f011 0301 	ands.w	r3, r1, #1
 8000c5c:	d007      	beq.n	8000c6e <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000c5e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c62:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000c66:	2b28      	cmp	r3, #40	; 0x28
 8000c68:	bf0c      	ite	eq
 8000c6a:	2342      	moveq	r3, #66	; 0x42
 8000c6c:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000c6e:	078a      	lsls	r2, r1, #30
 8000c70:	d509      	bpl.n	8000c86 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000c72:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000c76:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000c7a:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000c7c:	bf0c      	ite	eq
 8000c7e:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000c82:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000c86:	074a      	lsls	r2, r1, #29
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000c88:	6801      	ldr	r1, [r0, #0]
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000c8a:	bf48      	it	mi
 8000c8c:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000c90:	680a      	ldr	r2, [r1, #0]
 8000c92:	ea22 0303 	bic.w	r3, r2, r3
 8000c96:	600b      	str	r3, [r1, #0]
}
 8000c98:	4770      	bx	lr

08000c9a <HAL_I2C_Init>:
{
 8000c9a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d04a      	beq.n	8000d38 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ca2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ca6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000caa:	b91b      	cbnz	r3, 8000cb4 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000cac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000cb0:	f001 fe6c 	bl	800298c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cb4:	2324      	movs	r3, #36	; 0x24
 8000cb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	f022 0201 	bic.w	r2, r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000cc4:	6862      	ldr	r2, [r4, #4]
 8000cc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cca:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cd2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cd4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cd8:	2901      	cmp	r1, #1
 8000cda:	d124      	bne.n	8000d26 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ce0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ce2:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ce4:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ce6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000cf8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	69a1      	ldr	r1, [r4, #24]
 8000d00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d04:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d06:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	f042 0201 	orr.w	r2, r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000d16:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d18:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d1e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d20:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8000d24:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d2a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d2c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d2e:	d1d8      	bne.n	8000ce2 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	e7d4      	b.n	8000ce2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000d38:	2001      	movs	r0, #1
 8000d3a:	e7f3      	b.n	8000d24 <HAL_I2C_Init+0x8a>

08000d3c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000d3c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8000d3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000d40:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000d42:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8000d44:	b103      	cbz	r3, 8000d48 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000d46:	4718      	bx	r3
}
 8000d48:	4770      	bx	lr

08000d4a <HAL_I2C_SlaveTxCpltCallback>:
 8000d4a:	4770      	bx	lr

08000d4c <HAL_I2C_SlaveRxCpltCallback>:
 8000d4c:	4770      	bx	lr

08000d4e <I2C_ITSlaveSeqCplt>:
{
 8000d4e:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d50:	2500      	movs	r5, #0
 8000d52:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000d56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d5a:	2b29      	cmp	r3, #41	; 0x29
 8000d5c:	d10c      	bne.n	8000d78 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000d5e:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000d60:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000d62:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000d66:	2321      	movs	r3, #33	; 0x21
 8000d68:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000d6a:	f7ff ff75 	bl	8000c58 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000d6e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000d72:	f7ff ffea 	bl	8000d4a <HAL_I2C_SlaveTxCpltCallback>
}
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000d78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8000d7e:	d1fa      	bne.n	8000d76 <I2C_ITSlaveSeqCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000d80:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000d82:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000d84:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000d88:	2322      	movs	r3, #34	; 0x22
 8000d8a:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000d8c:	f7ff ff64 	bl	8000c58 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000d90:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000d94:	f7ff ffda 	bl	8000d4c <HAL_I2C_SlaveRxCpltCallback>
}
 8000d98:	e7ed      	b.n	8000d76 <I2C_ITSlaveSeqCplt+0x28>

08000d9a <HAL_I2C_AddrCallback>:
}
 8000d9a:	4770      	bx	lr

08000d9c <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000d9c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000da0:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000da4:	2a28      	cmp	r2, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8000da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8000da8:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000daa:	d133      	bne.n	8000e14 <I2C_ITAddrCplt.constprop.0+0x78>
    transferdirection = I2C_GET_DIR(hi2c);
 8000dac:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dae:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000db0:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 8000db2:	f3c6 4600 	ubfx	r6, r6, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000db6:	2a02      	cmp	r2, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000db8:	6899      	ldr	r1, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000dba:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000dbe:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000dc0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dc4:	d11e      	bne.n	8000e04 <I2C_ITAddrCplt.constprop.0+0x68>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000dc6:	ea85 15d1 	eor.w	r5, r5, r1, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000dca:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000dce:	f015 0506 	ands.w	r5, r5, #6
 8000dd2:	d10e      	bne.n	8000df2 <I2C_ITAddrCplt.constprop.0+0x56>
        hi2c->AddrEventCount++;
 8000dd4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000dd6:	3101      	adds	r1, #1
 8000dd8:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8000dda:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000ddc:	2902      	cmp	r1, #2
 8000dde:	d107      	bne.n	8000df0 <I2C_ITAddrCplt.constprop.0+0x54>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000de0:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8000de2:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000de4:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8000de6:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000dea:	4631      	mov	r1, r6
 8000dec:	f7ff ffd5 	bl	8000d9a <HAL_I2C_AddrCallback>
}
 8000df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000df2:	2104      	movs	r1, #4
 8000df4:	f7ff ff30 	bl	8000c58 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8000df8:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000dfa:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8000dfe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000e02:	e7f2      	b.n	8000dea <I2C_ITAddrCplt.constprop.0+0x4e>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000e04:	2104      	movs	r1, #4
 8000e06:	f7ff ff27 	bl	8000c58 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8000e0a:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000e0c:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 8000e0e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000e12:	e7ea      	b.n	8000dea <I2C_ITAddrCplt.constprop.0+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000e14:	2208      	movs	r2, #8
 8000e16:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8000e1e:	e7e7      	b.n	8000df0 <I2C_ITAddrCplt.constprop.0+0x54>

08000e20 <HAL_I2C_ListenCpltCallback>:
 8000e20:	4770      	bx	lr
	...

08000e24 <I2C_ITListenCplt>:
{
 8000e24:	b508      	push	{r3, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <I2C_ITListenCplt+0x58>)
  hi2c->State = HAL_I2C_STATE_READY;
 8000e28:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e2a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8000e30:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8000e32:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e36:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8000e3a:	074b      	lsls	r3, r1, #29
 8000e3c:	d512      	bpl.n	8000e64 <I2C_ITListenCplt+0x40>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000e3e:	6803      	ldr	r3, [r0, #0]
 8000e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e42:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8000e46:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e48:	3301      	adds	r3, #1
 8000e4a:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8000e4c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000e4e:	b14b      	cbz	r3, 8000e64 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 8000e50:	3b01      	subs	r3, #1
 8000e52:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8000e54:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000e56:	3b01      	subs	r3, #1
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000e5c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000e64:	2107      	movs	r1, #7
 8000e66:	f7ff fef7 	bl	8000c58 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e6a:	6803      	ldr	r3, [r0, #0]
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8000e70:	2300      	movs	r3, #0
 8000e72:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8000e76:	f7ff ffd3 	bl	8000e20 <HAL_I2C_ListenCpltCallback>
}
 8000e7a:	bd08      	pop	{r3, pc}
 8000e7c:	ffff0000 	.word	0xffff0000

08000e80 <HAL_I2C_ErrorCallback>:
 8000e80:	4770      	bx	lr

08000e82 <HAL_I2C_AbortCpltCallback>:
 8000e82:	4770      	bx	lr

08000e84 <I2C_ITError>:
{
 8000e84:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000e86:	4a32      	ldr	r2, [pc, #200]	; (8000f50 <I2C_ITError+0xcc>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000e88:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8000e8a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000e8e:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000e90:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000e94:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000e96:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8000e98:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8000e9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000e9c:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8000e9e:	ea41 0102 	orr.w	r1, r1, r2
 8000ea2:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000ea4:	d821      	bhi.n	8000eea <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	f7ff fed6 	bl	8000c58 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000eac:	2328      	movs	r3, #40	; 0x28
 8000eae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8000eb2:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8000eb4:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8000eb6:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000ebc:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000ebe:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8000ec2:	d01f      	beq.n	8000f04 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000ec4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    if (hi2c->hdmatx != NULL)
 8000ec8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000eca:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d037      	beq.n	8000f40 <I2C_ITError+0xbc>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <I2C_ITError+0xd4>)
 8000ed2:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000eda:	f7ff fcdb 	bl	8000894 <HAL_DMA_Abort_IT>
 8000ede:	b378      	cbz	r0, 8000f40 <I2C_ITError+0xbc>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000ee0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000ee2:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8000ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000ee8:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000eea:	2107      	movs	r1, #7
 8000eec:	f7ff feb4 	bl	8000c58 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8000ef0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ef4:	2b60      	cmp	r3, #96	; 0x60
 8000ef6:	d002      	beq.n	8000efe <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 8000ef8:	2320      	movs	r3, #32
 8000efa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	6323      	str	r3, [r4, #48]	; 0x30
 8000f02:	e7d8      	b.n	8000eb6 <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8000f04:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8000f08:	d00e      	beq.n	8000f28 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000f0a:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8000f0c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000f0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f12:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8000f14:	b1a0      	cbz	r0, 8000f40 <I2C_ITError+0xbc>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <I2C_ITError+0xd4>)
 8000f18:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8000f1a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000f1e:	f7ff fcb9 	bl	8000894 <HAL_DMA_Abort_IT>
 8000f22:	b168      	cbz	r0, 8000f40 <I2C_ITError+0xbc>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000f24:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000f26:	e7dc      	b.n	8000ee2 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000f28:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000f2c:	2b60      	cmp	r3, #96	; 0x60
 8000f2e:	d108      	bne.n	8000f42 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8000f30:	2320      	movs	r3, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8000f32:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8000f34:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000f38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8000f3c:	f7ff ffa1 	bl	8000e82 <HAL_I2C_AbortCpltCallback>
}
 8000f40:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8000f42:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8000f44:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8000f48:	f7ff ff9a 	bl	8000e80 <HAL_I2C_ErrorCallback>
}
 8000f4c:	e7f8      	b.n	8000f40 <I2C_ITError+0xbc>
 8000f4e:	bf00      	nop
 8000f50:	ffff0000 	.word	0xffff0000
 8000f54:	08001055 	.word	0x08001055
 8000f58:	080011c9 	.word	0x080011c9

08000f5c <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8000f5c:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f5e:	2220      	movs	r2, #32
{
 8000f60:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8000f62:	681e      	ldr	r6, [r3, #0]
{
 8000f64:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f66:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000f68:	2107      	movs	r1, #7
 8000f6a:	f7ff fe75 	bl	8000c58 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000f6e:	6803      	ldr	r3, [r0, #0]
{
 8000f70:	4604      	mov	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f78:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000f80:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000f84:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000f88:	f022 0201 	bic.w	r2, r2, #1
 8000f8c:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8000f8e:	f7ff fe55 	bl	8000c3c <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8000f92:	0471      	lsls	r1, r6, #17
 8000f94:	d534      	bpl.n	8001000 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8000f96:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8000f98:	b11b      	cbz	r3, 8000fa2 <I2C_ITSlaveCplt+0x46>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8000fa2:	076b      	lsls	r3, r5, #29
 8000fa4:	d510      	bpl.n	8000fc8 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000fa6:	6823      	ldr	r3, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8000fa8:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8000fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8000fb8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000fba:	b12b      	cbz	r3, 8000fc8 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000fc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8000fc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b11b      	cbz	r3, 8000fd6 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000fce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000fde:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8000fe0:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000fe2:	b18e      	cbz	r6, 8001008 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8000fe4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ff4c 	bl	8000e84 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8000fec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000ff0:	2b28      	cmp	r3, #40	; 0x28
 8000ff2:	d11a      	bne.n	800102a <I2C_ITSlaveCplt+0xce>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	4620      	mov	r0, r4
}
 8000ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8000ffc:	f7ff bf12 	b.w	8000e24 <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001000:	0432      	lsls	r2, r6, #16
 8001002:	d5ce      	bpl.n	8000fa2 <I2C_ITSlaveCplt+0x46>
    if (hi2c->hdmarx != NULL)
 8001004:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001006:	e7c7      	b.n	8000f98 <I2C_ITSlaveCplt+0x3c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001008:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800100a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800100e:	d00d      	beq.n	800102c <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001010:	4620      	mov	r0, r4
 8001012:	f7ff fe9c 	bl	8000d4e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <I2C_ITSlaveCplt+0xf4>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8001018:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800101a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800101e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001020:	2320      	movs	r3, #32
 8001022:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 8001026:	f7ff fefb 	bl	8000e20 <HAL_I2C_ListenCpltCallback>
}
 800102a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800102c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001030:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8001032:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001036:	2b22      	cmp	r3, #34	; 0x22
 8001038:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 800103c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001040:	d102      	bne.n	8001048 <I2C_ITSlaveCplt+0xec>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001042:	f7ff fe83 	bl	8000d4c <HAL_I2C_SlaveRxCpltCallback>
 8001046:	e7f0      	b.n	800102a <I2C_ITSlaveCplt+0xce>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001048:	f7ff fe7f 	bl	8000d4a <HAL_I2C_SlaveTxCpltCallback>
}
 800104c:	e7ed      	b.n	800102a <I2C_ITSlaveCplt+0xce>
 800104e:	bf00      	nop
 8001050:	ffff0000 	.word	0xffff0000

08001054 <I2C_Slave_ISR_IT>:
{
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8001058:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
{
 800105c:	4604      	mov	r4, r0
 800105e:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8001060:	2a01      	cmp	r2, #1
  uint32_t tmpoptions = hi2c->XferOptions;
 8001062:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8001064:	d07e      	beq.n	8001164 <I2C_Slave_ISR_IT+0x110>
 8001066:	2201      	movs	r2, #1
 8001068:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800106c:	06ca      	lsls	r2, r1, #27
 800106e:	d538      	bpl.n	80010e2 <I2C_Slave_ISR_IT+0x8e>
 8001070:	06f2      	lsls	r2, r6, #27
 8001072:	d536      	bpl.n	80010e2 <I2C_Slave_ISR_IT+0x8e>
    if (hi2c->XferCount == 0U)
 8001074:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001076:	b292      	uxth	r2, r2
 8001078:	bb2a      	cbnz	r2, 80010c6 <I2C_Slave_ISR_IT+0x72>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800107a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800107e:	2a28      	cmp	r2, #40	; 0x28
 8001080:	d110      	bne.n	80010a4 <I2C_Slave_ISR_IT+0x50>
 8001082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001086:	d10d      	bne.n	80010a4 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001088:	f7ff fecc 	bl	8000e24 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800108c:	06aa      	lsls	r2, r5, #26
 800108e:	d505      	bpl.n	800109c <I2C_Slave_ISR_IT+0x48>
 8001090:	06b3      	lsls	r3, r6, #26
 8001092:	d503      	bpl.n	800109c <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001094:	4629      	mov	r1, r5
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff ff60 	bl	8000f5c <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 800109c:	2000      	movs	r0, #0
 800109e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80010a4:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010a8:	6822      	ldr	r2, [r4, #0]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80010aa:	2929      	cmp	r1, #41	; 0x29
 80010ac:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010b0:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80010b2:	d1eb      	bne.n	800108c <I2C_Slave_ISR_IT+0x38>
 80010b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80010b8:	d0e8      	beq.n	800108c <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff fdbe 	bl	8000c3c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 80010c0:	f7ff fe45 	bl	8000d4e <I2C_ITSlaveSeqCplt>
 80010c4:	e7e2      	b.n	800108c <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010c6:	6802      	ldr	r2, [r0, #0]
 80010c8:	2110      	movs	r1, #16
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80010ca:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010ce:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80010d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80010d2:	f042 0204 	orr.w	r2, r2, #4
 80010d6:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80010d8:	d1d8      	bne.n	800108c <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80010da:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80010dc:	f7ff fed2 	bl	8000e84 <I2C_ITError>
 80010e0:	e7d4      	b.n	800108c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80010e2:	076a      	lsls	r2, r5, #29
 80010e4:	d51d      	bpl.n	8001122 <I2C_Slave_ISR_IT+0xce>
 80010e6:	0770      	lsls	r0, r6, #29
 80010e8:	d51b      	bpl.n	8001122 <I2C_Slave_ISR_IT+0xce>
    if (hi2c->XferCount > 0U)
 80010ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80010ec:	b292      	uxth	r2, r2
 80010ee:	b17a      	cbz	r2, 8001110 <I2C_Slave_ISR_IT+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010f0:	6822      	ldr	r2, [r4, #0]
      tmpITFlags &= ~I2C_FLAG_RXNE;
 80010f2:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010f6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80010f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010fa:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 80010fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010fe:	3201      	adds	r2, #1
 8001100:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001102:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001104:	3a01      	subs	r2, #1
 8001106:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001108:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800110a:	3a01      	subs	r2, #1
 800110c:	b292      	uxth	r2, r2
 800110e:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001110:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001112:	b292      	uxth	r2, r2
 8001114:	2a00      	cmp	r2, #0
 8001116:	d1b9      	bne.n	800108c <I2C_Slave_ISR_IT+0x38>
 8001118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800111c:	d0b6      	beq.n	800108c <I2C_Slave_ISR_IT+0x38>
        I2C_ITSlaveSeqCplt(hi2c);
 800111e:	4620      	mov	r0, r4
 8001120:	e7ce      	b.n	80010c0 <I2C_Slave_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001122:	0729      	lsls	r1, r5, #28
 8001124:	d505      	bpl.n	8001132 <I2C_Slave_ISR_IT+0xde>
 8001126:	0732      	lsls	r2, r6, #28
 8001128:	d503      	bpl.n	8001132 <I2C_Slave_ISR_IT+0xde>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff fe36 	bl	8000d9c <I2C_ITAddrCplt.constprop.0>
 8001130:	e7ac      	b.n	800108c <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001132:	07a8      	lsls	r0, r5, #30
 8001134:	d5aa      	bpl.n	800108c <I2C_Slave_ISR_IT+0x38>
 8001136:	07b1      	lsls	r1, r6, #30
 8001138:	d5a8      	bpl.n	800108c <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 800113a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800113c:	b292      	uxth	r2, r2
 800113e:	b16a      	cbz	r2, 800115c <I2C_Slave_ISR_IT+0x108>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001142:	6822      	ldr	r2, [r4, #0]
 8001144:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001148:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800114a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800114c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800114e:	3b01      	subs	r3, #1
 8001150:	b29b      	uxth	r3, r3
 8001152:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001154:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001156:	3b01      	subs	r3, #1
 8001158:	8523      	strh	r3, [r4, #40]	; 0x28
 800115a:	e797      	b.n	800108c <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800115c:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8001160:	d194      	bne.n	800108c <I2C_Slave_ISR_IT+0x38>
 8001162:	e7dc      	b.n	800111e <I2C_Slave_ISR_IT+0xca>
  __HAL_LOCK(hi2c);
 8001164:	2002      	movs	r0, #2
 8001166:	e79c      	b.n	80010a2 <I2C_Slave_ISR_IT+0x4e>

08001168 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001168:	6803      	ldr	r3, [r0, #0]
 800116a:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800116c:	681a      	ldr	r2, [r3, #0]
{
 800116e:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001170:	05cc      	lsls	r4, r1, #23
 8001172:	d508      	bpl.n	8001186 <HAL_I2C_ER_IRQHandler+0x1e>
 8001174:	0614      	lsls	r4, r2, #24
 8001176:	d506      	bpl.n	8001186 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001178:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800117a:	f044 0401 	orr.w	r4, r4, #1
 800117e:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001180:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001184:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001186:	054c      	lsls	r4, r1, #21
 8001188:	d508      	bpl.n	800119c <HAL_I2C_ER_IRQHandler+0x34>
 800118a:	0614      	lsls	r4, r2, #24
 800118c:	d506      	bpl.n	800119c <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800118e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001190:	f044 0408 	orr.w	r4, r4, #8
 8001194:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001196:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800119a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800119c:	0589      	lsls	r1, r1, #22
 800119e:	d508      	bpl.n	80011b2 <HAL_I2C_ER_IRQHandler+0x4a>
 80011a0:	0612      	lsls	r2, r2, #24
 80011a2:	d506      	bpl.n	80011b2 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80011a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80011a6:	f042 0202 	orr.w	r2, r2, #2
 80011aa:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80011ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b0:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80011b2:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80011b4:	f011 0f0b 	tst.w	r1, #11
 80011b8:	d003      	beq.n	80011c2 <HAL_I2C_ER_IRQHandler+0x5a>
}
 80011ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 80011be:	f7ff be61 	b.w	8000e84 <I2C_ITError>
}
 80011c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80011c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80011ca:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 80011cc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80011ce:	2300      	movs	r3, #0
 80011d0:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80011d2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80011d4:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80011d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80011da:	2b60      	cmp	r3, #96	; 0x60
 80011dc:	d105      	bne.n	80011ea <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 80011de:	2320      	movs	r3, #32
 80011e0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80011e4:	f7ff fe4d 	bl	8000e82 <HAL_I2C_AbortCpltCallback>
}
 80011e8:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 80011ea:	f7ff fe49 	bl	8000e80 <HAL_I2C_ErrorCallback>
}
 80011ee:	e7fb      	b.n	80011e8 <I2C_DMAAbort+0x20>

080011f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011f0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80011f6:	2b20      	cmp	r3, #32
 80011f8:	b2dc      	uxtb	r4, r3
 80011fa:	d11d      	bne.n	8001238 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001200:	2b01      	cmp	r3, #1
 8001202:	d019      	beq.n	8001238 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001204:	2324      	movs	r3, #36	; 0x24
 8001206:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800120a:	6803      	ldr	r3, [r0, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800121a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4311      	orrs	r1, r2
 8001220:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f042 0201 	orr.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800122a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800122c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001230:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001234:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001236:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001238:	2002      	movs	r0, #2
 800123a:	e7fc      	b.n	8001236 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800123c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800123c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800123e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001242:	2b20      	cmp	r3, #32
 8001244:	b2dc      	uxtb	r4, r3
 8001246:	d11c      	bne.n	8001282 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001248:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800124c:	2b01      	cmp	r3, #1
 800124e:	d018      	beq.n	8001282 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001250:	2324      	movs	r3, #36	; 0x24
 8001252:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001256:	6803      	ldr	r3, [r0, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001260:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001262:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001266:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800126a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	f042 0201 	orr.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001274:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001276:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800127a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800127e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001280:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001282:	2002      	movs	r0, #2
 8001284:	e7fc      	b.n	8001280 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08001288 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800128a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800128e:	4c19      	ldr	r4, [pc, #100]	; (80012f4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a8:	f7ff f9e0 	bl	800066c <HAL_GetTick>
 80012ac:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012ae:	6863      	ldr	r3, [r4, #4]
 80012b0:	03da      	lsls	r2, r3, #15
 80012b2:	d50c      	bpl.n	80012ce <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012b4:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012b6:	4d0f      	ldr	r5, [pc, #60]	; (80012f4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80012be:	f7ff f9d5 	bl	800066c <HAL_GetTick>
 80012c2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012c4:	686b      	ldr	r3, [r5, #4]
 80012c6:	039b      	lsls	r3, r3, #14
 80012c8:	d50a      	bpl.n	80012e0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80012ca:	2000      	movs	r0, #0
 80012cc:	e006      	b.n	80012dc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012ce:	f7ff f9cd 	bl	800066c <HAL_GetTick>
 80012d2:	1b40      	subs	r0, r0, r5
 80012d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012d8:	d9e9      	bls.n	80012ae <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80012da:	2003      	movs	r0, #3
}
 80012dc:	b003      	add	sp, #12
 80012de:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012e0:	f7ff f9c4 	bl	800066c <HAL_GetTick>
 80012e4:	1b00      	subs	r0, r0, r4
 80012e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80012ea:	d9eb      	bls.n	80012c4 <HAL_PWREx_EnableOverDrive+0x3c>
 80012ec:	e7f5      	b.n	80012da <HAL_PWREx_EnableOverDrive+0x52>
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012fc:	4604      	mov	r4, r0
 80012fe:	b918      	cbnz	r0, 8001308 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001302:	b002      	add	sp, #8
 8001304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001308:	6803      	ldr	r3, [r0, #0]
 800130a:	07db      	lsls	r3, r3, #31
 800130c:	d410      	bmi.n	8001330 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	079f      	lsls	r7, r3, #30
 8001312:	d461      	bmi.n	80013d8 <HAL_RCC_OscConfig+0xe0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	0719      	lsls	r1, r3, #28
 8001318:	f100 80a8 	bmi.w	800146c <HAL_RCC_OscConfig+0x174>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	075a      	lsls	r2, r3, #29
 8001320:	f100 80c9 	bmi.w	80014b6 <HAL_RCC_OscConfig+0x1be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001324:	69a2      	ldr	r2, [r4, #24]
 8001326:	2a00      	cmp	r2, #0
 8001328:	f040 8132 	bne.w	8001590 <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 800132c:	2000      	movs	r0, #0
 800132e:	e7e8      	b.n	8001302 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001330:	4b95      	ldr	r3, [pc, #596]	; (8001588 <HAL_RCC_OscConfig+0x290>)
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	f002 020c 	and.w	r2, r2, #12
 8001338:	2a04      	cmp	r2, #4
 800133a:	d007      	beq.n	800134c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	f002 020c 	and.w	r2, r2, #12
 8001342:	2a08      	cmp	r2, #8
 8001344:	d10a      	bne.n	800135c <HAL_RCC_OscConfig+0x64>
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	0256      	lsls	r6, r2, #9
 800134a:	d507      	bpl.n	800135c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	4b8e      	ldr	r3, [pc, #568]	; (8001588 <HAL_RCC_OscConfig+0x290>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	039d      	lsls	r5, r3, #14
 8001352:	d5dc      	bpl.n	800130e <HAL_RCC_OscConfig+0x16>
 8001354:	6863      	ldr	r3, [r4, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1d9      	bne.n	800130e <HAL_RCC_OscConfig+0x16>
 800135a:	e7d1      	b.n	8001300 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135c:	6862      	ldr	r2, [r4, #4]
 800135e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001362:	d111      	bne.n	8001388 <HAL_RCC_OscConfig+0x90>
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800136a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800136c:	f7ff f97e 	bl	800066c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001370:	4e85      	ldr	r6, [pc, #532]	; (8001588 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8001372:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001374:	6833      	ldr	r3, [r6, #0]
 8001376:	0398      	lsls	r0, r3, #14
 8001378:	d4c9      	bmi.n	800130e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137a:	f7ff f977 	bl	800066c <HAL_GetTick>
 800137e:	1b40      	subs	r0, r0, r5
 8001380:	2864      	cmp	r0, #100	; 0x64
 8001382:	d9f7      	bls.n	8001374 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8001384:	2003      	movs	r0, #3
 8001386:	e7bc      	b.n	8001302 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001388:	4d7f      	ldr	r5, [pc, #508]	; (8001588 <HAL_RCC_OscConfig+0x290>)
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	b992      	cbnz	r2, 80013b4 <HAL_RCC_OscConfig+0xbc>
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	602b      	str	r3, [r5, #0]
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800139c:	f7ff f966 	bl	800066c <HAL_GetTick>
 80013a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	682b      	ldr	r3, [r5, #0]
 80013a4:	0399      	lsls	r1, r3, #14
 80013a6:	d5b2      	bpl.n	800130e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff f960 	bl	800066c <HAL_GetTick>
 80013ac:	1b80      	subs	r0, r0, r6
 80013ae:	2864      	cmp	r0, #100	; 0x64
 80013b0:	d9f7      	bls.n	80013a2 <HAL_RCC_OscConfig+0xaa>
 80013b2:	e7e7      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_OscConfig+0xd2>
 80013ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013be:	602b      	str	r3, [r5, #0]
 80013c0:	682b      	ldr	r3, [r5, #0]
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c6:	602b      	str	r3, [r5, #0]
 80013c8:	e7d0      	b.n	800136c <HAL_RCC_OscConfig+0x74>
 80013ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ce:	602b      	str	r3, [r5, #0]
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	e7f6      	b.n	80013c6 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d8:	4b6b      	ldr	r3, [pc, #428]	; (8001588 <HAL_RCC_OscConfig+0x290>)
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	f012 0f0c 	tst.w	r2, #12
 80013e0:	d007      	beq.n	80013f2 <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	f002 020c 	and.w	r2, r2, #12
 80013e8:	2a08      	cmp	r2, #8
 80013ea:	d112      	bne.n	8001412 <HAL_RCC_OscConfig+0x11a>
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	0252      	lsls	r2, r2, #9
 80013f0:	d40f      	bmi.n	8001412 <HAL_RCC_OscConfig+0x11a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4a65      	ldr	r2, [pc, #404]	; (8001588 <HAL_RCC_OscConfig+0x290>)
 80013f4:	6813      	ldr	r3, [r2, #0]
 80013f6:	079b      	lsls	r3, r3, #30
 80013f8:	d503      	bpl.n	8001402 <HAL_RCC_OscConfig+0x10a>
 80013fa:	68e3      	ldr	r3, [r4, #12]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	f47f af7f 	bne.w	8001300 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	6921      	ldr	r1, [r4, #16]
 8001406:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800140a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800140e:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001410:	e780      	b.n	8001314 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001412:	68e2      	ldr	r2, [r4, #12]
 8001414:	b1c2      	cbz	r2, 8001448 <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_HSI_ENABLE();
 8001416:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4d5b      	ldr	r5, [pc, #364]	; (8001588 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001420:	f7ff f924 	bl	800066c <HAL_GetTick>
 8001424:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001426:	682b      	ldr	r3, [r5, #0]
 8001428:	079f      	lsls	r7, r3, #30
 800142a:	d507      	bpl.n	800143c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	6922      	ldr	r2, [r4, #16]
 8001430:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001434:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001438:	602b      	str	r3, [r5, #0]
 800143a:	e76b      	b.n	8001314 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff f916 	bl	800066c <HAL_GetTick>
 8001440:	1b80      	subs	r0, r0, r6
 8001442:	2802      	cmp	r0, #2
 8001444:	d9ef      	bls.n	8001426 <HAL_RCC_OscConfig+0x12e>
 8001446:	e79d      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8001448:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	4e4f      	ldr	r6, [pc, #316]	; (8001588 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_DISABLE();
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001452:	f7ff f90b 	bl	800066c <HAL_GetTick>
 8001456:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001458:	6833      	ldr	r3, [r6, #0]
 800145a:	0798      	lsls	r0, r3, #30
 800145c:	f57f af5a 	bpl.w	8001314 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff f904 	bl	800066c <HAL_GetTick>
 8001464:	1b40      	subs	r0, r0, r5
 8001466:	2802      	cmp	r0, #2
 8001468:	d9f6      	bls.n	8001458 <HAL_RCC_OscConfig+0x160>
 800146a:	e78b      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146c:	6963      	ldr	r3, [r4, #20]
 800146e:	4d46      	ldr	r5, [pc, #280]	; (8001588 <HAL_RCC_OscConfig+0x290>)
 8001470:	b183      	cbz	r3, 8001494 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_LSI_ENABLE();
 8001472:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800147a:	f7ff f8f7 	bl	800066c <HAL_GetTick>
 800147e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001480:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001482:	079b      	lsls	r3, r3, #30
 8001484:	f53f af4a 	bmi.w	800131c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff f8f0 	bl	800066c <HAL_GetTick>
 800148c:	1b80      	subs	r0, r0, r6
 800148e:	2802      	cmp	r0, #2
 8001490:	d9f6      	bls.n	8001480 <HAL_RCC_OscConfig+0x188>
 8001492:	e777      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8001494:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800149c:	f7ff f8e6 	bl	800066c <HAL_GetTick>
 80014a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014a4:	079f      	lsls	r7, r3, #30
 80014a6:	f57f af39 	bpl.w	800131c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff f8df 	bl	800066c <HAL_GetTick>
 80014ae:	1b80      	subs	r0, r0, r6
 80014b0:	2802      	cmp	r0, #2
 80014b2:	d9f6      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1aa>
 80014b4:	e766      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <HAL_RCC_OscConfig+0x290>)
 80014b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ba:	00d0      	lsls	r0, r2, #3
 80014bc:	d427      	bmi.n	800150e <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80014c0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d2:	4d2e      	ldr	r5, [pc, #184]	; (800158c <HAL_RCC_OscConfig+0x294>)
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	05d9      	lsls	r1, r3, #23
 80014d8:	d51b      	bpl.n	8001512 <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014da:	68a3      	ldr	r3, [r4, #8]
 80014dc:	4d2a      	ldr	r5, [pc, #168]	; (8001588 <HAL_RCC_OscConfig+0x290>)
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d127      	bne.n	8001532 <HAL_RCC_OscConfig+0x23a>
 80014e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ea:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80014ee:	f7ff f8bd 	bl	800066c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f2:	4e25      	ldr	r6, [pc, #148]	; (8001588 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80014f4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80014f8:	079b      	lsls	r3, r3, #30
 80014fa:	d53f      	bpl.n	800157c <HAL_RCC_OscConfig+0x284>
    if(pwrclkchanged == SET)
 80014fc:	2f00      	cmp	r7, #0
 80014fe:	f43f af11 	beq.w	8001324 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001502:	4a21      	ldr	r2, [pc, #132]	; (8001588 <HAL_RCC_OscConfig+0x290>)
 8001504:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	e70a      	b.n	8001324 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800150e:	2700      	movs	r7, #0
 8001510:	e7df      	b.n	80014d2 <HAL_RCC_OscConfig+0x1da>
      PWR->CR1 |= PWR_CR1_DBP;
 8001512:	682b      	ldr	r3, [r5, #0]
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001518:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800151a:	f7ff f8a7 	bl	800066c <HAL_GetTick>
 800151e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	05da      	lsls	r2, r3, #23
 8001524:	d4d9      	bmi.n	80014da <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001526:	f7ff f8a1 	bl	800066c <HAL_GetTick>
 800152a:	1b80      	subs	r0, r0, r6
 800152c:	2864      	cmp	r0, #100	; 0x64
 800152e:	d9f7      	bls.n	8001520 <HAL_RCC_OscConfig+0x228>
 8001530:	e728      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001532:	b9ab      	cbnz	r3, 8001560 <HAL_RCC_OscConfig+0x268>
 8001534:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	672b      	str	r3, [r5, #112]	; 0x70
 8001540:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001542:	f023 0304 	bic.w	r3, r3, #4
 8001546:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001548:	f7ff f890 	bl	800066c <HAL_GetTick>
 800154c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001550:	0798      	lsls	r0, r3, #30
 8001552:	d5d3      	bpl.n	80014fc <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f7ff f88a 	bl	800066c <HAL_GetTick>
 8001558:	1b80      	subs	r0, r0, r6
 800155a:	4540      	cmp	r0, r8
 800155c:	d9f7      	bls.n	800154e <HAL_RCC_OscConfig+0x256>
 800155e:	e711      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001560:	2b05      	cmp	r3, #5
 8001562:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001564:	d103      	bne.n	800156e <HAL_RCC_OscConfig+0x276>
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	672b      	str	r3, [r5, #112]	; 0x70
 800156c:	e7b9      	b.n	80014e2 <HAL_RCC_OscConfig+0x1ea>
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	672b      	str	r3, [r5, #112]	; 0x70
 8001574:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001576:	f023 0304 	bic.w	r3, r3, #4
 800157a:	e7b5      	b.n	80014e8 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff f876 	bl	800066c <HAL_GetTick>
 8001580:	1b40      	subs	r0, r0, r5
 8001582:	4540      	cmp	r0, r8
 8001584:	d9b7      	bls.n	80014f6 <HAL_RCC_OscConfig+0x1fe>
 8001586:	e6fd      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
 8001588:	40023800 	.word	0x40023800
 800158c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001590:	4d24      	ldr	r5, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x32c>)
 8001592:	68ab      	ldr	r3, [r5, #8]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b08      	cmp	r3, #8
 800159a:	f43f aeb1 	beq.w	8001300 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800159e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80015a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a8:	d12f      	bne.n	800160a <HAL_RCC_OscConfig+0x312>
        tickstart = HAL_GetTick();
 80015aa:	f7ff f85f 	bl	800066c <HAL_GetTick>
 80015ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	0199      	lsls	r1, r3, #6
 80015b4:	d423      	bmi.n	80015fe <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015be:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80015c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80015c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80015ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015d0:	0852      	lsrs	r2, r2, #1
 80015d2:	3a01      	subs	r2, #1
 80015d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80015d8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80015da:	682b      	ldr	r3, [r5, #0]
 80015dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015e2:	f7ff f843 	bl	800066c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	4d0f      	ldr	r5, [pc, #60]	; (8001624 <HAL_RCC_OscConfig+0x32c>)
        tickstart = HAL_GetTick();
 80015e8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	019a      	lsls	r2, r3, #6
 80015ee:	f53f ae9d 	bmi.w	800132c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff f83b 	bl	800066c <HAL_GetTick>
 80015f6:	1b00      	subs	r0, r0, r4
 80015f8:	2802      	cmp	r0, #2
 80015fa:	d9f6      	bls.n	80015ea <HAL_RCC_OscConfig+0x2f2>
 80015fc:	e6c2      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff f835 	bl	800066c <HAL_GetTick>
 8001602:	1b80      	subs	r0, r0, r6
 8001604:	2802      	cmp	r0, #2
 8001606:	d9d3      	bls.n	80015b0 <HAL_RCC_OscConfig+0x2b8>
 8001608:	e6bc      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 800160a:	f7ff f82f 	bl	800066c <HAL_GetTick>
 800160e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	019b      	lsls	r3, r3, #6
 8001614:	f57f ae8a 	bpl.w	800132c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff f828 	bl	800066c <HAL_GetTick>
 800161c:	1b00      	subs	r0, r0, r4
 800161e:	2802      	cmp	r0, #2
 8001620:	d9f6      	bls.n	8001610 <HAL_RCC_OscConfig+0x318>
 8001622:	e6af      	b.n	8001384 <HAL_RCC_OscConfig+0x8c>
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001628:	4913      	ldr	r1, [pc, #76]	; (8001678 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800162a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800162c:	688b      	ldr	r3, [r1, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b04      	cmp	r3, #4
 8001634:	d01b      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0x46>
 8001636:	2b08      	cmp	r3, #8
 8001638:	d11b      	bne.n	8001672 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800163c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001640:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001644:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001648:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800164c:	bf1a      	itte	ne
 800164e:	480b      	ldrne	r0, [pc, #44]	; (800167c <HAL_RCC_GetSysClockFreq+0x54>)
 8001650:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001652:	480b      	ldreq	r0, [pc, #44]	; (8001680 <HAL_RCC_GetSysClockFreq+0x58>)
 8001654:	fba1 0100 	umull	r0, r1, r1, r0
 8001658:	f7fe fe4a 	bl	80002f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_RCC_GetSysClockFreq+0x50>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001664:	3301      	adds	r3, #1
 8001666:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001668:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800166c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <HAL_RCC_GetSysClockFreq+0x54>)
 8001670:	e7fc      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001674:	e7fa      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x44>
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	017d7840 	.word	0x017d7840
 8001680:	00f42400 	.word	0x00f42400

08001684 <HAL_RCC_ClockConfig>:
{
 8001684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001688:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800168a:	4604      	mov	r4, r0
 800168c:	b910      	cbnz	r0, 8001694 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800168e:	2001      	movs	r0, #1
}
 8001690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4a45      	ldr	r2, [pc, #276]	; (80017ac <HAL_RCC_ClockConfig+0x128>)
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	428b      	cmp	r3, r1
 800169e:	d327      	bcc.n	80016f0 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	6822      	ldr	r2, [r4, #0]
 80016a2:	0797      	lsls	r7, r2, #30
 80016a4:	d42f      	bmi.n	8001706 <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a6:	07d0      	lsls	r0, r2, #31
 80016a8:	d443      	bmi.n	8001732 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016aa:	4a40      	ldr	r2, [pc, #256]	; (80017ac <HAL_RCC_ClockConfig+0x128>)
 80016ac:	6813      	ldr	r3, [r2, #0]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	42ab      	cmp	r3, r5
 80016b4:	d866      	bhi.n	8001784 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	0751      	lsls	r1, r2, #29
 80016ba:	d46f      	bmi.n	800179c <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016bc:	0713      	lsls	r3, r2, #28
 80016be:	d507      	bpl.n	80016d0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c0:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 80016c2:	6921      	ldr	r1, [r4, #16]
 80016c4:	6893      	ldr	r3, [r2, #8]
 80016c6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80016ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016ce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d0:	f7ff ffaa 	bl	8001628 <HAL_RCC_GetSysClockFreq>
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 80016d6:	4a37      	ldr	r2, [pc, #220]	; (80017b4 <HAL_RCC_ClockConfig+0x130>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	40d8      	lsrs	r0, r3
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <HAL_RCC_ClockConfig+0x134>)
 80016e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7fe ff84 	bl	80005f4 <HAL_InitTick>
  return HAL_OK;
 80016ec:	2000      	movs	r0, #0
 80016ee:	e7cf      	b.n	8001690 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	f023 030f 	bic.w	r3, r3, #15
 80016f6:	430b      	orrs	r3, r1
 80016f8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	6813      	ldr	r3, [r2, #0]
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	428b      	cmp	r3, r1
 8001702:	d1c4      	bne.n	800168e <HAL_RCC_ClockConfig+0xa>
 8001704:	e7cc      	b.n	80016a0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001706:	f012 0f04 	tst.w	r2, #4
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 800170c:	d003      	beq.n	8001716 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800170e:	6899      	ldr	r1, [r3, #8]
 8001710:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8001714:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	0716      	lsls	r6, r2, #28
 8001718:	d503      	bpl.n	8001722 <HAL_RCC_ClockConfig+0x9e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8001720:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001722:	4923      	ldr	r1, [pc, #140]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 8001724:	68a0      	ldr	r0, [r4, #8]
 8001726:	688b      	ldr	r3, [r1, #8]
 8001728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800172c:	4303      	orrs	r3, r0
 800172e:	608b      	str	r3, [r1, #8]
 8001730:	e7b9      	b.n	80016a6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	6861      	ldr	r1, [r4, #4]
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 8001736:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001738:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173a:	d11b      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	d0a5      	beq.n	800168e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001748:	4f19      	ldr	r7, [pc, #100]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174a:	f022 0203 	bic.w	r2, r2, #3
 800174e:	430a      	orrs	r2, r1
 8001750:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001752:	f7fe ff8b 	bl	800066c <HAL_GetTick>
 8001756:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	6862      	ldr	r2, [r4, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001764:	d0a1      	beq.n	80016aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001766:	f7fe ff81 	bl	800066c <HAL_GetTick>
 800176a:	1b80      	subs	r0, r0, r6
 800176c:	4540      	cmp	r0, r8
 800176e:	d9f3      	bls.n	8001758 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001770:	2003      	movs	r0, #3
 8001772:	e78d      	b.n	8001690 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001774:	2902      	cmp	r1, #2
 8001776:	d102      	bne.n	800177e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001778:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800177c:	e7e0      	b.n	8001740 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	f012 0f02 	tst.w	r2, #2
 8001782:	e7dd      	b.n	8001740 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001784:	6813      	ldr	r3, [r2, #0]
 8001786:	f023 030f 	bic.w	r3, r3, #15
 800178a:	432b      	orrs	r3, r5
 800178c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	6813      	ldr	r3, [r2, #0]
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	42ab      	cmp	r3, r5
 8001796:	f47f af7a 	bne.w	800168e <HAL_RCC_ClockConfig+0xa>
 800179a:	e78c      	b.n	80016b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <HAL_RCC_ClockConfig+0x12c>)
 800179e:	68e0      	ldr	r0, [r4, #12]
 80017a0:	688b      	ldr	r3, [r1, #8]
 80017a2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017a6:	4303      	orrs	r3, r0
 80017a8:	608b      	str	r3, [r1, #8]
 80017aa:	e787      	b.n	80016bc <HAL_RCC_ClockConfig+0x38>
 80017ac:	40023c00 	.word	0x40023c00
 80017b0:	40023800 	.word	0x40023800
 80017b4:	08005c10 	.word	0x08005c10
 80017b8:	20000008 	.word	0x20000008

080017bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017bc:	6803      	ldr	r3, [r0, #0]
{
 80017be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017c2:	f013 0601 	ands.w	r6, r3, #1
{
 80017c6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017ca:	4ab3      	ldr	r2, [pc, #716]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80017cc:	6891      	ldr	r1, [r2, #8]
 80017ce:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80017d2:	6091      	str	r1, [r2, #8]
 80017d4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80017d6:	6891      	ldr	r1, [r2, #8]
 80017d8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80017da:	fab6 f686 	clz	r6, r6
 80017de:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017e0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80017e2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80017e6:	d012      	beq.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017e8:	49ab      	ldr	r1, [pc, #684]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80017ea:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80017ec:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80017f0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017f4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80017f8:	bf08      	it	eq
 80017fa:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017fc:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001800:	bf16      	itet	ne
 8001802:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001806:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001808:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800180a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800180e:	02df      	lsls	r7, r3, #11
 8001810:	d510      	bpl.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001812:	48a1      	ldr	r0, [pc, #644]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001814:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001816:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800181a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800181e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001822:	ea42 0201 	orr.w	r2, r2, r1
 8001826:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800182a:	f000 81a7 	beq.w	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800182e:	2900      	cmp	r1, #0
 8001830:	bf08      	it	eq
 8001832:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001834:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001838:	bf18      	it	ne
 800183a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800183c:	0698      	lsls	r0, r3, #26
 800183e:	d531      	bpl.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	4b95      	ldr	r3, [pc, #596]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001842:	4f96      	ldr	r7, [pc, #600]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001846:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800185e:	f7fe ff05 	bl	800066c <HAL_GetTick>
 8001862:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	05d9      	lsls	r1, r3, #23
 8001868:	f140 818a 	bpl.w	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800186c:	4f8a      	ldr	r7, [pc, #552]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800186e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001870:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001874:	f040 818f 	bne.w	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001878:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800187a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800187e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001882:	4a85      	ldr	r2, [pc, #532]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001884:	f040 81ad 	bne.w	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8001888:	6891      	ldr	r1, [r2, #8]
 800188a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800188e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001892:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001896:	4301      	orrs	r1, r0
 8001898:	6091      	str	r1, [r2, #8]
 800189a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80018a0:	430b      	orrs	r3, r1
 80018a2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	06df      	lsls	r7, r3, #27
 80018a8:	d50c      	bpl.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80018aa:	4a7b      	ldr	r2, [pc, #492]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80018ac:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80018b0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80018b4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80018b8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80018bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018be:	4301      	orrs	r1, r0
 80018c0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018c4:	0458      	lsls	r0, r3, #17
 80018c6:	d508      	bpl.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018c8:	4973      	ldr	r1, [pc, #460]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80018ca:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80018cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018d0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80018d4:	4302      	orrs	r2, r0
 80018d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80018da:	0419      	lsls	r1, r3, #16
 80018dc:	d508      	bpl.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80018de:	496e      	ldr	r1, [pc, #440]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80018e0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80018e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018e6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80018ea:	4302      	orrs	r2, r0
 80018ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018f0:	03da      	lsls	r2, r3, #15
 80018f2:	d508      	bpl.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018f4:	4968      	ldr	r1, [pc, #416]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80018f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80018f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018fc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001900:	4302      	orrs	r2, r0
 8001902:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001906:	039f      	lsls	r7, r3, #14
 8001908:	d508      	bpl.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800190a:	4963      	ldr	r1, [pc, #396]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800190c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800190e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001912:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001916:	4302      	orrs	r2, r0
 8001918:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800191c:	0658      	lsls	r0, r3, #25
 800191e:	d508      	bpl.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001920:	495d      	ldr	r1, [pc, #372]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001922:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001924:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001928:	f022 0203 	bic.w	r2, r2, #3
 800192c:	4302      	orrs	r2, r0
 800192e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001932:	0619      	lsls	r1, r3, #24
 8001934:	d508      	bpl.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001936:	4958      	ldr	r1, [pc, #352]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001938:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800193a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800193e:	f022 020c 	bic.w	r2, r2, #12
 8001942:	4302      	orrs	r2, r0
 8001944:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001948:	05da      	lsls	r2, r3, #23
 800194a:	d508      	bpl.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800194c:	4952      	ldr	r1, [pc, #328]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800194e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001950:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001954:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001958:	4302      	orrs	r2, r0
 800195a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800195e:	059f      	lsls	r7, r3, #22
 8001960:	d508      	bpl.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001962:	494d      	ldr	r1, [pc, #308]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001964:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001966:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800196a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800196e:	4302      	orrs	r2, r0
 8001970:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001974:	0558      	lsls	r0, r3, #21
 8001976:	d508      	bpl.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001978:	4947      	ldr	r1, [pc, #284]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800197a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800197c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001980:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001984:	4302      	orrs	r2, r0
 8001986:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800198a:	0519      	lsls	r1, r3, #20
 800198c:	d508      	bpl.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800198e:	4942      	ldr	r1, [pc, #264]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001992:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001996:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800199a:	4302      	orrs	r2, r0
 800199c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80019a0:	04da      	lsls	r2, r3, #19
 80019a2:	d508      	bpl.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80019a4:	493c      	ldr	r1, [pc, #240]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80019a6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80019a8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019ac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80019b0:	4302      	orrs	r2, r0
 80019b2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80019b6:	049f      	lsls	r7, r3, #18
 80019b8:	d508      	bpl.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80019ba:	4937      	ldr	r1, [pc, #220]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80019bc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80019be:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019c2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80019c6:	4302      	orrs	r2, r0
 80019c8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019cc:	0258      	lsls	r0, r3, #9
 80019ce:	d508      	bpl.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019d0:	4931      	ldr	r1, [pc, #196]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80019d2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80019d4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019d8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80019dc:	4302      	orrs	r2, r0
 80019de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80019e2:	0299      	lsls	r1, r3, #10
 80019e4:	d50c      	bpl.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80019e6:	482c      	ldr	r0, [pc, #176]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80019e8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80019ea:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80019ee:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80019f2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80019f6:	bf08      	it	eq
 80019f8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80019fa:	430a      	orrs	r2, r1
 80019fc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001a00:	f013 0f08 	tst.w	r3, #8
 8001a04:	bf18      	it	ne
 8001a06:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a08:	035a      	lsls	r2, r3, #13
 8001a0a:	d508      	bpl.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a0c:	4922      	ldr	r1, [pc, #136]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a0e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001a10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a18:	4302      	orrs	r2, r0
 8001a1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001a1e:	021f      	lsls	r7, r3, #8
 8001a20:	d509      	bpl.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a22:	491d      	ldr	r1, [pc, #116]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a24:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001a28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a2c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001a30:	4302      	orrs	r2, r0
 8001a32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001a36:	0158      	lsls	r0, r3, #5
 8001a38:	d509      	bpl.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001a3a:	4917      	ldr	r1, [pc, #92]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a3c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001a40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a44:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001a48:	4302      	orrs	r2, r0
 8001a4a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001a4e:	0119      	lsls	r1, r3, #4
 8001a50:	d509      	bpl.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001a52:	4911      	ldr	r1, [pc, #68]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001a58:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001a5c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001a60:	4302      	orrs	r2, r0
 8001a62:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001a66:	00da      	lsls	r2, r3, #3
 8001a68:	f140 813d 	bpl.w	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a6e:	2e01      	cmp	r6, #1
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001a70:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001a74:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001a78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a7c:	ea43 0301 	orr.w	r3, r3, r1
 8001a80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a84:	f000 80b1 	beq.w	8001bea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001a88:	2d01      	cmp	r5, #1
 8001a8a:	d175      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001a8c:	4d02      	ldr	r5, [pc, #8]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a8e:	682b      	ldr	r3, [r5, #0]
 8001a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a94:	e004      	b.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa2:	f7fe fde3 	bl	800066c <HAL_GetTick>
 8001aa6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	009f      	lsls	r7, r3, #2
 8001aac:	f100 8128 	bmi.w	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x544>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001ab0:	6822      	ldr	r2, [r4, #0]
 8001ab2:	0316      	lsls	r6, r2, #12
 8001ab4:	d501      	bpl.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8001ab6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ab8:	b11b      	cbz	r3, 8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8001aba:	02d0      	lsls	r0, r2, #11
 8001abc:	d51c      	bpl.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ac0:	b9d3      	cbnz	r3, 8001af8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001ac2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ac6:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001aca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ace:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	6961      	ldr	r1, [r4, #20]
 8001ad6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001ada:	69a1      	ldr	r1, [r4, #24]
 8001adc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001ae0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ae4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001ae8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001aea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001aee:	3901      	subs	r1, #1
 8001af0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001af4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001af8:	0291      	lsls	r1, r2, #10
 8001afa:	d515      	bpl.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8001afc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b02:	d111      	bne.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b04:	4985      	ldr	r1, [pc, #532]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001b06:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b0a:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001b0e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b12:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b16:	4303      	orrs	r3, r0
 8001b18:	6960      	ldr	r0, [r4, #20]
 8001b1a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b1e:	6a20      	ldr	r0, [r4, #32]
 8001b20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001b28:	0712      	lsls	r2, r2, #28
 8001b2a:	d519      	bpl.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b2c:	4a7b      	ldr	r2, [pc, #492]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001b2e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b32:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b36:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001b3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	6961      	ldr	r1, [r4, #20]
 8001b42:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001b46:	69e1      	ldr	r1, [r4, #28]
 8001b48:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001b50:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001b60:	4c6e      	ldr	r4, [pc, #440]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b6a:	f7fe fd7f 	bl	800066c <HAL_GetTick>
 8001b6e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	f140 80cb 	bpl.w	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x552>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001b78:	2000      	movs	r0, #0
 8001b7a:	e009      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 8001b7c:	2601      	movs	r6, #1
 8001b7e:	e659      	b.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b80:	f7fe fd74 	bl	800066c <HAL_GetTick>
 8001b84:	eba0 0008 	sub.w	r0, r0, r8
 8001b88:	2864      	cmp	r0, #100	; 0x64
 8001b8a:	f67f ae6b 	bls.w	8001864 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001b8e:	2003      	movs	r0, #3
}
 8001b90:	b003      	add	sp, #12
 8001b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b98:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f43f ae6b 	beq.w	8001878 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ba4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001baa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bae:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001bb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bb6:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001bb8:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bbc:	07da      	lsls	r2, r3, #31
 8001bbe:	f57f ae5b 	bpl.w	8001878 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001bc2:	f7fe fd53 	bl	800066c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001bca:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bce:	079b      	lsls	r3, r3, #30
 8001bd0:	f53f ae52 	bmi.w	8001878 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7fe fd4a 	bl	800066c <HAL_GetTick>
 8001bd8:	eba0 0008 	sub.w	r0, r0, r8
 8001bdc:	4548      	cmp	r0, r9
 8001bde:	d9f5      	bls.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8001be0:	e7d5      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001be2:	6891      	ldr	r1, [r2, #8]
 8001be4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001be8:	e656      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001bea:	4e4c      	ldr	r6, [pc, #304]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001bec:	6833      	ldr	r3, [r6, #0]
 8001bee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001bf2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001bf4:	f7fe fd3a 	bl	800066c <HAL_GetTick>
 8001bf8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bfa:	6833      	ldr	r3, [r6, #0]
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	d478      	bmi.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001c00:	6822      	ldr	r2, [r4, #0]
 8001c02:	07d7      	lsls	r7, r2, #31
 8001c04:	d512      	bpl.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x470>
 8001c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c08:	b983      	cbnz	r3, 8001c2c <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c0a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c0e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c16:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	6861      	ldr	r1, [r4, #4]
 8001c1e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001c22:	68a1      	ldr	r1, [r4, #8]
 8001c24:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001c28:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c2c:	0316      	lsls	r6, r2, #12
 8001c2e:	d503      	bpl.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001c30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c36:	d005      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8001c38:	02d0      	lsls	r0, r2, #11
 8001c3a:	d51e      	bpl.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c42:	d11a      	bne.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c44:	4935      	ldr	r1, [pc, #212]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001c46:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c4a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001c4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c52:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001c56:	4303      	orrs	r3, r0
 8001c58:	6860      	ldr	r0, [r4, #4]
 8001c5a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c5e:	68e0      	ldr	r0, [r4, #12]
 8001c60:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c68:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c6e:	f020 001f 	bic.w	r0, r0, #31
 8001c72:	3b01      	subs	r3, #1
 8001c74:	4303      	orrs	r3, r0
 8001c76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c7a:	01d1      	lsls	r1, r2, #7
 8001c7c:	d511      	bpl.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c7e:	4927      	ldr	r1, [pc, #156]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001c80:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c84:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001c88:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001c8c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001c90:	4303      	orrs	r3, r0
 8001c92:	6860      	ldr	r0, [r4, #4]
 8001c94:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c98:	6920      	ldr	r0, [r4, #16]
 8001c9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001c9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ca2:	0192      	lsls	r2, r2, #6
 8001ca4:	d50d      	bpl.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ca6:	6923      	ldr	r3, [r4, #16]
 8001ca8:	6862      	ldr	r2, [r4, #4]
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001cb0:	68e2      	ldr	r2, [r4, #12]
 8001cb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cb6:	68a2      	ldr	r2, [r4, #8]
 8001cb8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001cbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001cc2:	4e16      	ldr	r6, [pc, #88]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001cc4:	6833      	ldr	r3, [r6, #0]
 8001cc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cca:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001ccc:	f7fe fcce 	bl	800066c <HAL_GetTick>
 8001cd0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cd2:	6833      	ldr	r3, [r6, #0]
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	f53f aed7 	bmi.w	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cda:	f7fe fcc7 	bl	800066c <HAL_GetTick>
 8001cde:	1bc0      	subs	r0, r0, r7
 8001ce0:	2864      	cmp	r0, #100	; 0x64
 8001ce2:	d9f6      	bls.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001ce4:	e753      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ce6:	2e01      	cmp	r6, #1
 8001ce8:	f43f af7f 	beq.w	8001bea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001cec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cf0:	e6c8      	b.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cf2:	f7fe fcbb 	bl	800066c <HAL_GetTick>
 8001cf6:	1bc0      	subs	r0, r0, r7
 8001cf8:	2864      	cmp	r0, #100	; 0x64
 8001cfa:	f67f af7e 	bls.w	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8001cfe:	e746      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d00:	f7fe fcb4 	bl	800066c <HAL_GetTick>
 8001d04:	1b80      	subs	r0, r0, r6
 8001d06:	2864      	cmp	r0, #100	; 0x64
 8001d08:	f67f aece 	bls.w	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8001d0c:	e73f      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d0e:	f7fe fcad 	bl	800066c <HAL_GetTick>
 8001d12:	1b40      	subs	r0, r0, r5
 8001d14:	2864      	cmp	r0, #100	; 0x64
 8001d16:	f67f af2b 	bls.w	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8001d1a:	e738      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8001d20:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8001d24:	d131      	bne.n	8001d8a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8001d26:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001d28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8001d2c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8001d30:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001d34:	d05f      	beq.n	8001df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001d36:	d806      	bhi.n	8001d46 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	d039      	beq.n	8001db0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8001d3c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8001d40:	d051      	beq.n	8001de6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    default :
      {
        break;
      }
    }
  }
 8001d42:	2000      	movs	r0, #0
 8001d44:	4770      	bx	lr
    switch (saiclocksource)
 8001d46:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
    switch (saiclocksource)
 8001d4a:	d1fa      	bne.n	8001d42 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001d4c:	685b      	ldr	r3, [r3, #4]
          frequency = HSI_VALUE;
 8001d4e:	482c      	ldr	r0, [pc, #176]	; (8001e00 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001d50:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8001d56:	bf08      	it	eq
 8001d58:	4618      	moveq	r0, r3
 8001d5a:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001d5c:	4828      	ldr	r0, [pc, #160]	; (8001e00 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8001d5e:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001d60:	fbb0 f3f3 	udiv	r3, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8001d64:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8001d68:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8001d6c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001d70:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8001d72:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8001d76:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8001d7a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8001d84:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8001d88:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8001d8a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8001d8e:	d1d8      	bne.n	8001d42 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    saiclocksource = RCC->DCKCFGR1;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001d92:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8001d96:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8001d9a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8001d9e:	d02a      	beq.n	8001df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001da0:	d803      	bhi.n	8001daa <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 8001da2:	b12a      	cbz	r2, 8001db0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8001da4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001da8:	e7ca      	b.n	8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 8001daa:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001dae:	e7cc      	b.n	8001d4a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001db0:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001db2:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001db4:	0251      	lsls	r1, r2, #9
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8001db6:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dbc:	bf54      	ite	pl
 8001dbe:	4811      	ldrpl	r0, [pc, #68]	; (8001e04 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001dc0:	480f      	ldrmi	r0, [pc, #60]	; (8001e00 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8001dc2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001dc6:	fbb0 f3f3 	udiv	r3, r0, r3
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8001dca:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8001dce:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001dd2:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8001dd4:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8001dd8:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8001ddc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001de0:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8001de4:	e7cd      	b.n	8001d82 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001de6:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001de8:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001dea:	0252      	lsls	r2, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001df0:	d4b4      	bmi.n	8001d5c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001df2:	4804      	ldr	r0, [pc, #16]	; (8001e04 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8001df4:	e7b3      	b.n	8001d5e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8001df6:	4804      	ldr	r0, [pc, #16]	; (8001e08 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)

  return frequency;
}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	017d7840 	.word	0x017d7840
 8001e04:	00f42400 	.word	0x00f42400
 8001e08:	01770000 	.word	0x01770000

08001e0c <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <SAI_Disable.isra.0+0x34>)
 8001e0e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8001e18:	6802      	ldr	r2, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8001e1a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8001e1c:	6811      	ldr	r1, [r2, #0]
 8001e1e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001e22:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8001e24:	3b01      	subs	r3, #1
 8001e26:	d206      	bcs.n	8001e36 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8001e28:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8001e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e30:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
 8001e34:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8001e36:	6811      	ldr	r1, [r2, #0]
 8001e38:	03c9      	lsls	r1, r1, #15
 8001e3a:	d4f3      	bmi.n	8001e24 <SAI_Disable.isra.0+0x18>

  return status;
}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008

08001e44 <HAL_SAI_Init>:
{
 8001e44:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 8001e46:	4604      	mov	r4, r0
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	f000 80c6 	beq.w	8001fda <HAL_SAI_Init+0x196>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8001e4e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8001e52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e56:	b91b      	cbnz	r3, 8001e60 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8001e58:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8001e5c:	f000 ff32 	bl	8002cc4 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8001e60:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8001e62:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8001e64:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8001e68:	f7ff ffd0 	bl	8001e0c <SAI_Disable.isra.0>
  switch(hsai->Init.SynchroExt)
 8001e6c:	68e3      	ldr	r3, [r4, #12]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	f000 80a1 	beq.w	8001fb6 <HAL_SAI_Init+0x172>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	bf14      	ite	ne
 8001e78:	2300      	movne	r3, #0
 8001e7a:	2320      	moveq	r3, #32
  switch(hsai->Init.Synchro)
 8001e7c:	68a2      	ldr	r2, [r4, #8]
 8001e7e:	2a02      	cmp	r2, #2
 8001e80:	f000 809d 	beq.w	8001fbe <HAL_SAI_Init+0x17a>
 8001e84:	2a03      	cmp	r2, #3
 8001e86:	f000 8098 	beq.w	8001fba <HAL_SAI_Init+0x176>
 8001e8a:	2a01      	cmp	r2, #1
 8001e8c:	bf14      	ite	ne
 8001e8e:	2500      	movne	r5, #0
 8001e90:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8001e94:	6822      	ldr	r2, [r4, #0]
 8001e96:	4952      	ldr	r1, [pc, #328]	; (8001fe0 <HAL_SAI_Init+0x19c>)
 8001e98:	4852      	ldr	r0, [pc, #328]	; (8001fe4 <HAL_SAI_Init+0x1a0>)
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d003      	beq.n	8001ea6 <HAL_SAI_Init+0x62>
 8001e9e:	4e52      	ldr	r6, [pc, #328]	; (8001fe8 <HAL_SAI_Init+0x1a4>)
 8001ea0:	42b2      	cmp	r2, r6
 8001ea2:	f040 808f 	bne.w	8001fc4 <HAL_SAI_Init+0x180>
    SAI1->GCR = tmpregisterGCR;
 8001ea6:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8001eaa:	69e3      	ldr	r3, [r4, #28]
 8001eac:	b313      	cbz	r3, 8001ef4 <HAL_SAI_Init+0xb0>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8001eae:	428a      	cmp	r2, r1
 8001eb0:	d003      	beq.n	8001eba <HAL_SAI_Init+0x76>
 8001eb2:	4b4d      	ldr	r3, [pc, #308]	; (8001fe8 <HAL_SAI_Init+0x1a4>)
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8088 	bne.w	8001fca <HAL_SAI_Init+0x186>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8001eba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ebe:	f7ff ff2f 	bl	8001d20 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_SAI_Init+0x1a8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d002      	beq.n	8001ed0 <HAL_SAI_Init+0x8c>
 8001eca:	3220      	adds	r2, #32
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d103      	bne.n	8001ed8 <HAL_SAI_Init+0x94>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8001ed0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001ed4:	f7ff ff24 	bl	8001d20 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8001ed8:	220a      	movs	r2, #10
 8001eda:	69e3      	ldr	r3, [r4, #28]
 8001edc:	4350      	muls	r0, r2
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8001ee4:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8001ee8:	fb02 0013 	mls	r0, r2, r3, r0
 8001eec:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 8001eee:	bf08      	it	eq
 8001ef0:	3301      	addeq	r3, #1
 8001ef2:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8001ef4:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8001ef6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8001ef8:	f033 0102 	bics.w	r1, r3, #2
 8001efc:	d167      	bne.n	8001fce <HAL_SAI_Init+0x18a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8001efe:	2a01      	cmp	r2, #1
 8001f00:	bf18      	it	ne
 8001f02:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	4839      	ldr	r0, [pc, #228]	; (8001ff0 <HAL_SAI_Init+0x1ac>)
 8001f0a:	6816      	ldr	r6, [r2, #0]
 8001f0c:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8001f0e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001f10:	4333      	orrs	r3, r6
 8001f12:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8001f14:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8001f16:	4333      	orrs	r3, r6
 8001f18:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001f1a:	6810      	ldr	r0, [r2, #0]
 8001f1c:	4333      	orrs	r3, r6
 8001f1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001f20:	4333      	orrs	r3, r6
 8001f22:	6926      	ldr	r6, [r4, #16]
 8001f24:	4333      	orrs	r3, r6
 8001f26:	6966      	ldr	r6, [r4, #20]
 8001f28:	4333      	orrs	r3, r6
 8001f2a:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8001f2c:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8001f2e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8001f32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8001f34:	432b      	orrs	r3, r5
 8001f36:	430b      	orrs	r3, r1
 8001f38:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8001f3a:	6853      	ldr	r3, [r2, #4]
 8001f3c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f40:	f023 030f 	bic.w	r3, r3, #15
 8001f44:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8001f46:	69a3      	ldr	r3, [r4, #24]
 8001f48:	6851      	ldr	r1, [r2, #4]
 8001f4a:	4303      	orrs	r3, r0
 8001f4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f4e:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8001f50:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8001f52:	430b      	orrs	r3, r1
 8001f54:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8001f56:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_SAI_Init+0x1b0>)
 8001f58:	6891      	ldr	r1, [r2, #8]
 8001f5a:	400b      	ands	r3, r1
 8001f5c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8001f5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f60:	6891      	ldr	r1, [r2, #8]
 8001f62:	4303      	orrs	r3, r0
 8001f64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001f66:	4303      	orrs	r3, r0
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001f6c:	3901      	subs	r1, #1
 8001f6e:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8001f70:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001f72:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8001f74:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f78:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8001f7a:	68d3      	ldr	r3, [r2, #12]
 8001f7c:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8001f80:	f023 030f 	bic.w	r3, r3, #15
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	0c1b      	lsrs	r3, r3, #16
 8001f88:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8001f8a:	68d1      	ldr	r1, [r2, #12]
 8001f8c:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8001f90:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8001f92:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8001f94:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8001f96:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8001f98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8001f9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001f9e:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8001fa0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fa4:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8001fa6:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8001fa8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8001fac:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8001fb0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8001fb4:	bd70      	pop	{r4, r5, r6, pc}
  switch(hsai->Init.SynchroExt)
 8001fb6:	2310      	movs	r3, #16
 8001fb8:	e760      	b.n	8001e7c <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8001fba:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8001fbe:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8001fc2:	e767      	b.n	8001e94 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8001fc4:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
 8001fc8:	e76f      	b.n	8001eaa <HAL_SAI_Init+0x66>
    uint32_t freq = 0;
 8001fca:	2000      	movs	r0, #0
 8001fcc:	e779      	b.n	8001ec2 <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8001fce:	2a01      	cmp	r2, #1
 8001fd0:	bf14      	ite	ne
 8001fd2:	2100      	movne	r1, #0
 8001fd4:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8001fd8:	e795      	b.n	8001f06 <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 8001fda:	2001      	movs	r0, #1
 8001fdc:	e7ea      	b.n	8001fb4 <HAL_SAI_Init+0x170>
 8001fde:	bf00      	nop
 8001fe0:	40015804 	.word	0x40015804
 8001fe4:	40015000 	.word	0x40015000
 8001fe8:	40015824 	.word	0x40015824
 8001fec:	40015c04 	.word	0x40015c04
 8001ff0:	ff05c010 	.word	0xff05c010
 8001ff4:	fff88000 	.word	0xfff88000

08001ff8 <HAL_SAI_InitProtocol>:
  switch(protocol)
 8001ff8:	2902      	cmp	r1, #2
{
 8001ffa:	b430      	push	{r4, r5}
  switch(protocol)
 8001ffc:	d905      	bls.n	800200a <HAL_SAI_InitProtocol+0x12>
 8001ffe:	1ecc      	subs	r4, r1, #3
 8002000:	2c01      	cmp	r4, #1
 8002002:	d95b      	bls.n	80020bc <HAL_SAI_InitProtocol+0xc4>
}
 8002004:	2001      	movs	r0, #1
 8002006:	bc30      	pop	{r4, r5}
 8002008:	4770      	bx	lr
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800200a:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800200c:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800200e:	65c3      	str	r3, [r0, #92]	; 0x5c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002010:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002014:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8002016:	6384      	str	r4, [r0, #56]	; 0x38
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002018:	bf14      	ite	ne
 800201a:	2501      	movne	r5, #1
 800201c:	4625      	moveq	r5, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 800201e:	6544      	str	r4, [r0, #84]	; 0x54
  if((nbslot & 0x1) != 0 )
 8002020:	f013 0401 	ands.w	r4, r3, #1
 8002024:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8002026:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800202a:	6485      	str	r5, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800202c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002030:	6605      	str	r5, [r0, #96]	; 0x60
  if((nbslot & 0x1) != 0 )
 8002032:	d1e7      	bne.n	8002004 <HAL_SAI_InitProtocol+0xc>
  switch(protocol)
 8002034:	1e4d      	subs	r5, r1, #1
 8002036:	2d01      	cmp	r5, #1
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8002038:	bf93      	iteet	ls
 800203a:	f44f 3500 	movls.w	r5, #131072	; 0x20000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800203e:	64c4      	strhi	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8002040:	f44f 2480 	movhi.w	r4, #262144	; 0x40000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8002044:	64c5      	strls	r5, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8002046:	6504      	str	r4, [r0, #80]	; 0x50
  switch(datasize)
 8002048:	2a03      	cmp	r2, #3
 800204a:	d8db      	bhi.n	8002004 <HAL_SAI_InitProtocol+0xc>
 800204c:	e8df f002 	tbb	[pc, r2]
 8002050:	2d1d0c02 	.word	0x2d1d0c02
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002054:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 8002056:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002058:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 800205a:	015a      	lsls	r2, r3, #5
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 800205c:	011b      	lsls	r3, r3, #4
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 800205e:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 8002060:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8002062:	2340      	movs	r3, #64	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002064:	6583      	str	r3, [r0, #88]	; 0x58
  if(status == HAL_OK)
 8002066:	e00d      	b.n	8002084 <HAL_SAI_InitProtocol+0x8c>
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002068:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800206a:	2280      	movs	r2, #128	; 0x80
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 800206c:	2902      	cmp	r1, #2
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800206e:	ea4f 1483 	mov.w	r4, r3, lsl #6
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002072:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002074:	ea4f 1343 	mov.w	r3, r3, lsl #5
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002078:	6582      	str	r2, [r0, #88]	; 0x58
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800207a:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800207c:	6443      	str	r3, [r0, #68]	; 0x44
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 800207e:	d101      	bne.n	8002084 <HAL_SAI_InitProtocol+0x8c>
      hsai->SlotInit.FirstBitOffset = 16;
 8002080:	2310      	movs	r3, #16
      hsai->SlotInit.FirstBitOffset = 8;
 8002082:	6543      	str	r3, [r0, #84]	; 0x54
}
 8002084:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 8002086:	f7ff bedd 	b.w	8001e44 <HAL_SAI_Init>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 800208a:	22c0      	movs	r2, #192	; 0xc0
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800208c:	085b      	lsrs	r3, r3, #1
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 800208e:	2902      	cmp	r1, #2
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002090:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002092:	ea4f 1283 	mov.w	r2, r3, lsl #6
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002096:	ea4f 1343 	mov.w	r3, r3, lsl #5
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800209a:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800209c:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800209e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80020a2:	6583      	str	r3, [r0, #88]	; 0x58
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 80020a4:	d1ee      	bne.n	8002084 <HAL_SAI_InitProtocol+0x8c>
      hsai->SlotInit.FirstBitOffset = 8;
 80020a6:	2308      	movs	r3, #8
 80020a8:	e7eb      	b.n	8002082 <HAL_SAI_InitProtocol+0x8a>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 80020aa:	22e0      	movs	r2, #224	; 0xe0
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80020ac:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_32;
 80020ae:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80020b0:	019a      	lsls	r2, r3, #6
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80020b2:	015b      	lsls	r3, r3, #5
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80020b4:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80020b6:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	e7d3      	b.n	8002064 <HAL_SAI_InitProtocol+0x6c>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80020bc:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80020be:	2400      	movs	r4, #0
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80020c0:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
  hsai->SlotInit.SlotNumber      = nbslot;
 80020c4:	65c3      	str	r3, [r0, #92]	; 0x5c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80020c6:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80020ca:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80020cc:	6384      	str	r4, [r0, #56]	; 0x38
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80020ce:	bf14      	ite	ne
 80020d0:	4625      	movne	r5, r4
 80020d2:	2501      	moveq	r5, #1
    hsai->FrameInit.ActiveFrameLength = 13;
 80020d4:	2904      	cmp	r1, #4
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80020d6:	6484      	str	r4, [r0, #72]	; 0x48
 80020d8:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80020da:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    hsai->FrameInit.ActiveFrameLength = 13;
 80020de:	bf0c      	ite	eq
 80020e0:	2101      	moveq	r1, #1
 80020e2:	210d      	movne	r1, #13
  hsai->SlotInit.FirstBitOffset  = 0;
 80020e4:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80020e6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80020ea:	6441      	str	r1, [r0, #68]	; 0x44
 80020ec:	6604      	str	r4, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80020ee:	e9c0 c513 	strd	ip, r5, [r0, #76]	; 0x4c
  switch(datasize)
 80020f2:	2a03      	cmp	r2, #3
 80020f4:	d886      	bhi.n	8002004 <HAL_SAI_InitProtocol+0xc>
 80020f6:	e8df f002 	tbb	[pc, r2]
 80020fa:	0702      	.short	0x0702
 80020fc:	120d      	.short	0x120d
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80020fe:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 16 * nbslot;
 8002100:	011b      	lsls	r3, r3, #4
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002102:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 8002104:	6403      	str	r3, [r0, #64]	; 0x40
 8002106:	e7ac      	b.n	8002062 <HAL_SAI_InitProtocol+0x6a>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002108:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800210a:	015b      	lsls	r3, r3, #5
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800210c:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800210e:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002110:	6582      	str	r2, [r0, #88]	; 0x58
  if(status == HAL_OK)
 8002112:	e7b7      	b.n	8002084 <HAL_SAI_InitProtocol+0x8c>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002114:	22c0      	movs	r2, #192	; 0xc0
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002116:	015b      	lsls	r3, r3, #5
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002118:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800211a:	6403      	str	r3, [r0, #64]	; 0x40
 800211c:	e7cc      	b.n	80020b8 <HAL_SAI_InitProtocol+0xc0>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800211e:	22e0      	movs	r2, #224	; 0xe0
 8002120:	e7f9      	b.n	8002116 <HAL_SAI_InitProtocol+0x11e>

08002122 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002122:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002124:	4604      	mov	r4, r0
 8002126:	2800      	cmp	r0, #0
 8002128:	d04a      	beq.n	80021c0 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800212e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002132:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002136:	b91b      	cbnz	r3, 8002140 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002138:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800213c:	f000 feba 	bl	8002eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002140:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002142:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002144:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002146:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800214a:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800214c:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002154:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	d833      	bhi.n	80021c4 <HAL_SPI_Init+0xa2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800215c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002160:	d000      	beq.n	8002164 <HAL_SPI_Init+0x42>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002162:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002164:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002166:	b92b      	cbnz	r3, 8002174 <HAL_SPI_Init+0x52>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002168:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800216c:	bf8c      	ite	hi
 800216e:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002170:	2301      	movls	r3, #1
 8002172:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002174:	69a0      	ldr	r0, [r4, #24]
 8002176:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800217a:	4333      	orrs	r3, r6
 800217c:	6926      	ldr	r6, [r4, #16]
 800217e:	4333      	orrs	r3, r6
 8002180:	6966      	ldr	r6, [r4, #20]
 8002182:	4333      	orrs	r3, r6
 8002184:	69e6      	ldr	r6, [r4, #28]
 8002186:	4333      	orrs	r3, r6
 8002188:	6a26      	ldr	r6, [r4, #32]
 800218a:	4333      	orrs	r3, r6
 800218c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800218e:	4333      	orrs	r3, r6
 8002190:	f400 7600 	and.w	r6, r0, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002194:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002196:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002198:	f000 0004 	and.w	r0, r0, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800219c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800219e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021a0:	432b      	orrs	r3, r5
 80021a2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80021a4:	432b      	orrs	r3, r5
 80021a6:	4303      	orrs	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021a8:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80021aa:	430b      	orrs	r3, r1
 80021ac:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021ae:	69d3      	ldr	r3, [r2, #28]
 80021b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021b4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80021b6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021b8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021ba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 80021be:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
 80021c2:	e7fc      	b.n	80021be <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021c4:	4619      	mov	r1, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021c6:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 80021ca:	e7c9      	b.n	8002160 <HAL_SPI_Init+0x3e>

080021cc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021cc:	6a03      	ldr	r3, [r0, #32]
 80021ce:	f023 0301 	bic.w	r3, r3, #1
{
 80021d2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021da:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021dc:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80021e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021e2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80021e6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80021ea:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021ec:	688d      	ldr	r5, [r1, #8]
 80021ee:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021f0:	4d0e      	ldr	r5, [pc, #56]	; (800222c <TIM_OC1_SetConfig+0x60>)
 80021f2:	42a8      	cmp	r0, r5
 80021f4:	d002      	beq.n	80021fc <TIM_OC1_SetConfig+0x30>
 80021f6:	4e0e      	ldr	r6, [pc, #56]	; (8002230 <TIM_OC1_SetConfig+0x64>)
 80021f8:	42b0      	cmp	r0, r6
 80021fa:	d111      	bne.n	8002220 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021fc:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002200:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002202:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8002204:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002208:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800220c:	d002      	beq.n	8002214 <TIM_OC1_SetConfig+0x48>
 800220e:	4d08      	ldr	r5, [pc, #32]	; (8002230 <TIM_OC1_SetConfig+0x64>)
 8002210:	42a8      	cmp	r0, r5
 8002212:	d105      	bne.n	8002220 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002214:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002218:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800221c:	4335      	orrs	r5, r6
 800221e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002220:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002222:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002224:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002226:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002228:	6203      	str	r3, [r0, #32]
}
 800222a:	bd70      	pop	{r4, r5, r6, pc}
 800222c:	40010000 	.word	0x40010000
 8002230:	40010400 	.word	0x40010400

08002234 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002234:	6a03      	ldr	r3, [r0, #32]
 8002236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800223a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800223c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002240:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002242:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8002248:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800224a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800224e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002252:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002254:	688d      	ldr	r5, [r1, #8]
 8002256:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800225a:	4d11      	ldr	r5, [pc, #68]	; (80022a0 <TIM_OC3_SetConfig+0x6c>)
 800225c:	42a8      	cmp	r0, r5
 800225e:	d003      	beq.n	8002268 <TIM_OC3_SetConfig+0x34>
 8002260:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002264:	42a8      	cmp	r0, r5
 8002266:	d114      	bne.n	8002292 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002268:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800226a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800226e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002272:	4d0b      	ldr	r5, [pc, #44]	; (80022a0 <TIM_OC3_SetConfig+0x6c>)
 8002274:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800227a:	d003      	beq.n	8002284 <TIM_OC3_SetConfig+0x50>
 800227c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002280:	42a8      	cmp	r0, r5
 8002282:	d106      	bne.n	8002292 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002284:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002288:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800228c:	4335      	orrs	r5, r6
 800228e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002292:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002294:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002296:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002298:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800229a:	6203      	str	r3, [r0, #32]
}
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	bf00      	nop
 80022a0:	40010000 	.word	0x40010000

080022a4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022a4:	6a03      	ldr	r3, [r0, #32]
 80022a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80022aa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ae:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022b2:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022be:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022c6:	688d      	ldr	r5, [r1, #8]
 80022c8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022cc:	4d08      	ldr	r5, [pc, #32]	; (80022f0 <TIM_OC4_SetConfig+0x4c>)
 80022ce:	42a8      	cmp	r0, r5
 80022d0:	d003      	beq.n	80022da <TIM_OC4_SetConfig+0x36>
 80022d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022d6:	42a8      	cmp	r0, r5
 80022d8:	d104      	bne.n	80022e4 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022da:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022de:	694d      	ldr	r5, [r1, #20]
 80022e0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022e6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022e8:	684b      	ldr	r3, [r1, #4]
 80022ea:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ec:	6202      	str	r2, [r0, #32]
}
 80022ee:	bd30      	pop	{r4, r5, pc}
 80022f0:	40010000 	.word	0x40010000

080022f4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80022f4:	6a03      	ldr	r3, [r0, #32]
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80022fa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80022fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fe:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002300:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002302:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002304:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8002308:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002312:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002314:	688d      	ldr	r5, [r1, #8]
 8002316:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800231a:	4d09      	ldr	r5, [pc, #36]	; (8002340 <TIM_OC5_SetConfig+0x4c>)
 800231c:	42a8      	cmp	r0, r5
 800231e:	d003      	beq.n	8002328 <TIM_OC5_SetConfig+0x34>
 8002320:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002324:	42a8      	cmp	r0, r5
 8002326:	d104      	bne.n	8002332 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002328:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800232c:	694d      	ldr	r5, [r1, #20]
 800232e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002332:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002334:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002336:	684b      	ldr	r3, [r1, #4]
 8002338:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800233a:	6202      	str	r2, [r0, #32]
}
 800233c:	bd30      	pop	{r4, r5, pc}
 800233e:	bf00      	nop
 8002340:	40010000 	.word	0x40010000

08002344 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002344:	6a03      	ldr	r3, [r0, #32]
 8002346:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800234a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800234c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002350:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002352:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002354:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002358:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800235a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002362:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002366:	688d      	ldr	r5, [r1, #8]
 8002368:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800236c:	4d08      	ldr	r5, [pc, #32]	; (8002390 <TIM_OC6_SetConfig+0x4c>)
 800236e:	42a8      	cmp	r0, r5
 8002370:	d003      	beq.n	800237a <TIM_OC6_SetConfig+0x36>
 8002372:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002376:	42a8      	cmp	r0, r5
 8002378:	d104      	bne.n	8002384 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800237a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800237e:	694d      	ldr	r5, [r1, #20]
 8002380:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002384:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002386:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002388:	684b      	ldr	r3, [r1, #4]
 800238a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800238c:	6202      	str	r2, [r0, #32]
}
 800238e:	bd30      	pop	{r4, r5, pc}
 8002390:	40010000 	.word	0x40010000

08002394 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002394:	4a30      	ldr	r2, [pc, #192]	; (8002458 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002396:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002398:	4290      	cmp	r0, r2
 800239a:	d012      	beq.n	80023c2 <TIM_Base_SetConfig+0x2e>
 800239c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023a0:	d00f      	beq.n	80023c2 <TIM_Base_SetConfig+0x2e>
 80023a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80023a6:	4290      	cmp	r0, r2
 80023a8:	d00b      	beq.n	80023c2 <TIM_Base_SetConfig+0x2e>
 80023aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ae:	4290      	cmp	r0, r2
 80023b0:	d007      	beq.n	80023c2 <TIM_Base_SetConfig+0x2e>
 80023b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b6:	4290      	cmp	r0, r2
 80023b8:	d003      	beq.n	80023c2 <TIM_Base_SetConfig+0x2e>
 80023ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80023be:	4290      	cmp	r0, r2
 80023c0:	d119      	bne.n	80023f6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80023c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80023c8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ca:	4a23      	ldr	r2, [pc, #140]	; (8002458 <TIM_Base_SetConfig+0xc4>)
 80023cc:	4290      	cmp	r0, r2
 80023ce:	d029      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 80023d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023d4:	d026      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 80023d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80023da:	4290      	cmp	r0, r2
 80023dc:	d022      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 80023de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023e2:	4290      	cmp	r0, r2
 80023e4:	d01e      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 80023e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ea:	4290      	cmp	r0, r2
 80023ec:	d01a      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 80023ee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80023f2:	4290      	cmp	r0, r2
 80023f4:	d016      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 80023f6:	4a19      	ldr	r2, [pc, #100]	; (800245c <TIM_Base_SetConfig+0xc8>)
 80023f8:	4290      	cmp	r0, r2
 80023fa:	d013      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 80023fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002400:	4290      	cmp	r0, r2
 8002402:	d00f      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 8002404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002408:	4290      	cmp	r0, r2
 800240a:	d00b      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 800240c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002410:	4290      	cmp	r0, r2
 8002412:	d007      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 8002414:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002418:	4290      	cmp	r0, r2
 800241a:	d003      	beq.n	8002424 <TIM_Base_SetConfig+0x90>
 800241c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002420:	4290      	cmp	r0, r2
 8002422:	d103      	bne.n	800242c <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002428:	68ca      	ldr	r2, [r1, #12]
 800242a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800242c:	694a      	ldr	r2, [r1, #20]
 800242e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002432:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002434:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002436:	688b      	ldr	r3, [r1, #8]
 8002438:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800243a:	680b      	ldr	r3, [r1, #0]
 800243c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <TIM_Base_SetConfig+0xc4>)
 8002440:	4298      	cmp	r0, r3
 8002442:	d003      	beq.n	800244c <TIM_Base_SetConfig+0xb8>
 8002444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002448:	4298      	cmp	r0, r3
 800244a:	d101      	bne.n	8002450 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800244c:	690b      	ldr	r3, [r1, #16]
 800244e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002450:	2301      	movs	r3, #1
 8002452:	6143      	str	r3, [r0, #20]
}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40010000 	.word	0x40010000
 800245c:	40014000 	.word	0x40014000

08002460 <HAL_TIM_PWM_Init>:
{
 8002460:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002462:	4604      	mov	r4, r0
 8002464:	b1a0      	cbz	r0, 8002490 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002466:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800246a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800246e:	b91b      	cbnz	r3, 8002478 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002470:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002474:	f000 fe0e 	bl	8003094 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247a:	6820      	ldr	r0, [r4, #0]
 800247c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800247e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002482:	f7ff ff87 	bl	8002394 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002486:	2301      	movs	r3, #1
  return HAL_OK;
 8002488:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800248a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800248e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002490:	2001      	movs	r0, #1
 8002492:	e7fc      	b.n	800248e <HAL_TIM_PWM_Init+0x2e>

08002494 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002494:	6a03      	ldr	r3, [r0, #32]
 8002496:	f023 0310 	bic.w	r3, r3, #16
{
 800249a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800249c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800249e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80024a0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80024a2:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80024a4:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024aa:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80024ae:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024b2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024b6:	688d      	ldr	r5, [r1, #8]
 80024b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024bc:	4d10      	ldr	r5, [pc, #64]	; (8002500 <TIM_OC2_SetConfig+0x6c>)
 80024be:	42a8      	cmp	r0, r5
 80024c0:	d003      	beq.n	80024ca <TIM_OC2_SetConfig+0x36>
 80024c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024c6:	42a8      	cmp	r0, r5
 80024c8:	d114      	bne.n	80024f4 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024ca:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80024cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d4:	4d0a      	ldr	r5, [pc, #40]	; (8002500 <TIM_OC2_SetConfig+0x6c>)
 80024d6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80024d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024dc:	d003      	beq.n	80024e6 <TIM_OC2_SetConfig+0x52>
 80024de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024e2:	42a8      	cmp	r0, r5
 80024e4:	d106      	bne.n	80024f4 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024ea:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80024ee:	4335      	orrs	r5, r6
 80024f0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80024f4:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80024f6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80024f8:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80024fa:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80024fc:	6203      	str	r3, [r0, #32]
}
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	40010000 	.word	0x40010000

08002504 <HAL_TIM_PWM_ConfigChannel>:
{
 8002504:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002506:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800250a:	4604      	mov	r4, r0
 800250c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800250e:	2b01      	cmp	r3, #1
 8002510:	d012      	beq.n	8002538 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002512:	2301      	movs	r3, #1
  switch (Channel)
 8002514:	2a0c      	cmp	r2, #12
  htim->State = HAL_TIM_STATE_BUSY;
 8002516:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800251a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800251e:	d054      	beq.n	80025ca <HAL_TIM_PWM_ConfigChannel+0xc6>
 8002520:	d80b      	bhi.n	800253a <HAL_TIM_PWM_ConfigChannel+0x36>
 8002522:	2a04      	cmp	r2, #4
 8002524:	d02f      	beq.n	8002586 <HAL_TIM_PWM_ConfigChannel+0x82>
 8002526:	2a08      	cmp	r2, #8
 8002528:	d03e      	beq.n	80025a8 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800252a:	b1da      	cbz	r2, 8002564 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_READY;
 800252c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800252e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002530:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002534:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002538:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800253a:	2a10      	cmp	r2, #16
 800253c:	d056      	beq.n	80025ec <HAL_TIM_PWM_ConfigChannel+0xe8>
 800253e:	2a14      	cmp	r2, #20
 8002540:	d1f4      	bne.n	800252c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002542:	6820      	ldr	r0, [r4, #0]
 8002544:	f7ff fefe 	bl	8002344 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002548:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800254a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800254c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800254e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002552:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800255c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800255e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002562:	e052      	b.n	800260a <HAL_TIM_PWM_ConfigChannel+0x106>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002564:	6820      	ldr	r0, [r4, #0]
 8002566:	f7ff fe31 	bl	80021cc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800256a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800256c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	f042 0208 	orr.w	r2, r2, #8
 8002574:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	f022 0204 	bic.w	r2, r2, #4
 800257c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002582:	619a      	str	r2, [r3, #24]
      break;
 8002584:	e7d2      	b.n	800252c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002586:	6820      	ldr	r0, [r4, #0]
 8002588:	f7ff ff84 	bl	8002494 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800258c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800258e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025a6:	e7ec      	b.n	8002582 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025a8:	6820      	ldr	r0, [r4, #0]
 80025aa:	f7ff fe43 	bl	8002234 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025ae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025b0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	f042 0208 	orr.w	r2, r2, #8
 80025b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	f022 0204 	bic.w	r2, r2, #4
 80025c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025c6:	61da      	str	r2, [r3, #28]
      break;
 80025c8:	e7b0      	b.n	800252c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025ca:	6820      	ldr	r0, [r4, #0]
 80025cc:	f7ff fe6a 	bl	80022a4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025d0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025d2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025ea:	e7ec      	b.n	80025c6 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025ec:	6820      	ldr	r0, [r4, #0]
 80025ee:	f7ff fe81 	bl	80022f4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025f8:	f042 0208 	orr.w	r2, r2, #8
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002600:	f022 0204 	bic.w	r2, r2, #4
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002606:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002608:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800260c:	e78e      	b.n	800252c <HAL_TIM_PWM_ConfigChannel+0x28>
	...

08002610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002610:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002612:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002616:	2b01      	cmp	r3, #1
 8002618:	f04f 0302 	mov.w	r3, #2
 800261c:	d01f      	beq.n	800265e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800261e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002620:	4d10      	ldr	r5, [pc, #64]	; (8002664 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002622:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002626:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002628:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800262a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800262c:	d003      	beq.n	8002636 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800262e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002632:	42aa      	cmp	r2, r5
 8002634:	d103      	bne.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002636:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800263a:	684d      	ldr	r5, [r1, #4]
 800263c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800263e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002640:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002644:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002646:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800264a:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800264c:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800264e:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002650:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8002652:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002654:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002658:	2300      	movs	r3, #0
 800265a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800265e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002660:	bd30      	pop	{r4, r5, pc}
 8002662:	bf00      	nop
 8002664:	40010000 	.word	0x40010000

08002668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002668:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800266a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d038      	beq.n	80026e4 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002672:	68cb      	ldr	r3, [r1, #12]
 8002674:	688a      	ldr	r2, [r1, #8]
 8002676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800267a:	4c1b      	ldr	r4, [pc, #108]	; (80026e8 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800267c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800267e:	684a      	ldr	r2, [r1, #4]
 8002680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002684:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002686:	680a      	ldr	r2, [r1, #0]
 8002688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800268c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800268e:	690a      	ldr	r2, [r1, #16]
 8002690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002694:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002696:	694a      	ldr	r2, [r1, #20]
 8002698:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800269c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800269e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80026a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80026a6:	698a      	ldr	r2, [r1, #24]
 80026a8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80026ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80026b0:	6802      	ldr	r2, [r0, #0]
 80026b2:	42a2      	cmp	r2, r4
 80026b4:	d003      	beq.n	80026be <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 80026b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026ba:	42a2      	cmp	r2, r4
 80026bc:	d10c      	bne.n	80026d8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80026be:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80026c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80026c4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80026c8:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80026ca:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80026cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80026d2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80026d6:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80026da:	2300      	movs	r3, #0
 80026dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80026e0:	4618      	mov	r0, r3
}
 80026e2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80026e4:	2002      	movs	r0, #2
 80026e6:	e7fc      	b.n	80026e2 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 80026e8:	40010000 	.word	0x40010000

080026ec <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <MX_DMA_Init+0x60>)
{
 80026ee:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80026f2:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026f4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
 80026fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002700:	9200      	str	r2, [sp, #0]
 8002702:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002706:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800270c:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002710:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800271a:	f7fd ffd1 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800271e:	2010      	movs	r0, #16
 8002720:	f7fe f800 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	2011      	movs	r0, #17
 8002728:	4611      	mov	r1, r2
 800272a:	f7fd ffc9 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800272e:	2011      	movs	r0, #17
 8002730:	f7fd fff8 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002734:	2200      	movs	r2, #0
 8002736:	203a      	movs	r0, #58	; 0x3a
 8002738:	4611      	mov	r1, r2
 800273a:	f7fd ffc1 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800273e:	203a      	movs	r0, #58	; 0x3a

}
 8002740:	b003      	add	sp, #12
 8002742:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002746:	f7fd bfed 	b.w	8000724 <HAL_NVIC_EnableIRQ>
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800

08002750 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 8002750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002754:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002756:	2214      	movs	r2, #20
 8002758:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 800275a:	4f6e      	ldr	r7, [pc, #440]	; (8002914 <MX_GPIO_Init+0x1c4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_SS_n_GPIO_Port, FLASH_SS_n_Pin, GPIO_PIN_SET);
 800275e:	4e6e      	ldr	r6, [pc, #440]	; (8002918 <MX_GPIO_Init+0x1c8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f000 fd7e 	bl	8003260 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002764:	4b6d      	ldr	r3, [pc, #436]	; (800291c <MX_GPIO_Init+0x1cc>)
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 8002766:	4638      	mov	r0, r7
 8002768:	2124      	movs	r1, #36	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800276a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800276c:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 800276e:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8002928 <MX_GPIO_Init+0x1d8>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002774:	f042 0210 	orr.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOB, TS_NSS_Pin|SI_NRST_Pin, GPIO_PIN_RESET);
 8002778:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800292c <MX_GPIO_Init+0x1dc>
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 800277c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8002930 <MX_GPIO_Init+0x1e0>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002780:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
 8002786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002788:	f002 0210 	and.w	r2, r2, #16
 800278c:	9201      	str	r2, [sp, #4]
 800278e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002792:	f042 0204 	orr.w	r2, r2, #4
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
 8002798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279a:	f002 0204 	and.w	r2, r2, #4
 800279e:	9202      	str	r2, [sp, #8]
 80027a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
 80027aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80027b0:	9203      	str	r2, [sp, #12]
 80027b2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
 80027bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027be:	f002 0201 	and.w	r2, r2, #1
 80027c2:	9204      	str	r2, [sp, #16]
 80027c4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c8:	f042 0202 	orr.w	r2, r2, #2
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
 80027ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d0:	f002 0202 	and.w	r2, r2, #2
 80027d4:	9205      	str	r2, [sp, #20]
 80027d6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027da:	f042 0208 	orr.w	r2, r2, #8
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 80027e0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	9306      	str	r3, [sp, #24]
 80027ea:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 80027ec:	f7fe fa14 	bl	8000c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 80027f0:	4638      	mov	r0, r7
 80027f2:	2200      	movs	r2, #0
 80027f4:	2112      	movs	r1, #18
 80027f6:	f7fe fa0f 	bl	8000c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_SS_n_GPIO_Port, FLASH_SS_n_Pin, GPIO_PIN_SET);
 80027fa:	4630      	mov	r0, r6
 80027fc:	2201      	movs	r2, #1
 80027fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002802:	f7fe fa09 	bl	8000c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 8002806:	4630      	mov	r0, r6
 8002808:	2200      	movs	r2, #0
 800280a:	210f      	movs	r1, #15
 800280c:	f7fe fa04 	bl	8000c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8002810:	4658      	mov	r0, fp
 8002812:	2200      	movs	r2, #0
 8002814:	210e      	movs	r1, #14
 8002816:	f7fe f9ff 	bl	8000c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, TS_NSS_Pin|SI_NRST_Pin, GPIO_PIN_RESET);
 800281a:	4640      	mov	r0, r8
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8002822:	f7fe f9f9 	bl	8000c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8002826:	2200      	movs	r2, #0
 8002828:	4648      	mov	r0, r9
 800282a:	217f      	movs	r1, #127	; 0x7f
 800282c:	f7fe f9f4 	bl	8000c18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002830:	2324      	movs	r3, #36	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002832:	a907      	add	r1, sp, #28
 8002834:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002836:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283a:	e9cd 4a09 	strd	r4, sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800283e:	f7fe f8f9 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 8002842:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002844:	a907      	add	r1, sp, #28
 8002846:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284a:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800284e:	f7fe f8f1 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_B_EN_Pin|ESP32_A_EN_Pin;
 8002852:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002854:	a907      	add	r1, sp, #28
 8002856:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002858:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002860:	f7fe f8e8 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <MX_GPIO_Init+0x1d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 800286a:	a907      	add	r1, sp, #28
 800286c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002870:	e9cd 2307 	strd	r2, r3, [sp, #28]
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 8002874:	f7fe f8de 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = FLASH_SS_n_Pin|LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin 
 8002878:	f248 030f 	movw	r3, #32783	; 0x800f
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287c:	a907      	add	r1, sp, #28
 800287e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002880:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002888:	f7fe f8d4 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 800288c:	230e      	movs	r3, #14
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	a907      	add	r1, sp, #28
 8002890:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002892:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f7fe f8cb 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 800289e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	a907      	add	r1, sp, #28
 80028a4:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a6:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ae:	f7fe f8c1 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028b2:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b6:	a907      	add	r1, sp, #28
 80028b8:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	e9cd 3a07 	strd	r3, sl, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028be:	2305      	movs	r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028c4:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c6:	f7fe f8b5 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 80028ca:	237f      	movs	r3, #127	; 0x7f
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028cc:	a907      	add	r1, sp, #28
 80028ce:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d8:	f7fe f8ac 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <MX_GPIO_Init+0x1d4>)
 80028de:	2120      	movs	r1, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 80028e0:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028e4:	e9cd 1307 	strd	r1, r3, [sp, #28]
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 80028e8:	a907      	add	r1, sp, #28
 80028ea:	f7fe f8a3 	bl	8000a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80028ee:	4622      	mov	r2, r4
 80028f0:	4621      	mov	r1, r4
 80028f2:	2017      	movs	r0, #23
 80028f4:	f7fd fee4 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80028f8:	2017      	movs	r0, #23
 80028fa:	f7fd ff13 	bl	8000724 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80028fe:	4622      	mov	r2, r4
 8002900:	4621      	mov	r1, r4
 8002902:	2028      	movs	r0, #40	; 0x28
 8002904:	f7fd fedc 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002908:	2028      	movs	r0, #40	; 0x28
 800290a:	f7fd ff0b 	bl	8000724 <HAL_NVIC_EnableIRQ>

}
 800290e:	b00d      	add	sp, #52	; 0x34
 8002910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	40020800 	.word	0x40020800
 800291c:	40023800 	.word	0x40023800
 8002920:	10110000 	.word	0x10110000
 8002924:	10210000 	.word	0x10210000
 8002928:	40020000 	.word	0x40020000
 800292c:	40020400 	.word	0x40020400
 8002930:	40020c00 	.word	0x40020c00

08002934 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002934:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002936:	4812      	ldr	r0, [pc, #72]	; (8002980 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x6000030D;
 8002938:	4a12      	ldr	r2, [pc, #72]	; (8002984 <MX_I2C1_Init+0x50>)
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <MX_I2C1_Init+0x54>)
 800293c:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002940:	2300      	movs	r3, #0
 8002942:	2201      	movs	r2, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8002944:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002948:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800294c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002950:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002952:	f7fe f9a2 	bl	8000c9a <HAL_I2C_Init>
 8002956:	b108      	cbz	r0, 800295c <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8002958:	f000 f97a 	bl	8002c50 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800295c:	2100      	movs	r1, #0
 800295e:	4808      	ldr	r0, [pc, #32]	; (8002980 <MX_I2C1_Init+0x4c>)
 8002960:	f7fe fc46 	bl	80011f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002964:	b108      	cbz	r0, 800296a <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8002966:	f000 f973 	bl	8002c50 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800296a:	2100      	movs	r1, #0
 800296c:	4804      	ldr	r0, [pc, #16]	; (8002980 <MX_I2C1_Init+0x4c>)
 800296e:	f7fe fc65 	bl	800123c <HAL_I2CEx_ConfigDigitalFilter>
 8002972:	b118      	cbz	r0, 800297c <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8002974:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002978:	f000 b96a 	b.w	8002c50 <Error_Handler>
}
 800297c:	bd08      	pop	{r3, pc}
 800297e:	bf00      	nop
 8002980:	200002bc 	.word	0x200002bc
 8002984:	40005400 	.word	0x40005400
 8002988:	6000030d 	.word	0x6000030d

0800298c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800298c:	b530      	push	{r4, r5, lr}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002992:	2214      	movs	r2, #20
 8002994:	2100      	movs	r1, #0
 8002996:	a803      	add	r0, sp, #12
 8002998:	f000 fc62 	bl	8003260 <memset>
  if(i2cHandle->Instance==I2C1)
 800299c:	682a      	ldr	r2, [r5, #0]
 800299e:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <HAL_I2C_MspInit+0xf4>)
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d16a      	bne.n	8002a7a <HAL_I2C_MspInit+0xee>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a4:	4c37      	ldr	r4, [pc, #220]	; (8002a84 <HAL_I2C_MspInit+0xf8>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a6:	f44f 7140 	mov.w	r1, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	6323      	str	r3, [r4, #48]	; 0x30
 80029b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029be:	2312      	movs	r3, #18
 80029c0:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029cc:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	482e      	ldr	r0, [pc, #184]	; (8002a88 <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d2:	f7fe f82f 	bl	8000a34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80029dc:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8002a98 <HAL_I2C_MspInit+0x10c>
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e0:	f04f 0e40 	mov.w	lr, #64	; 0x40
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029e8:	6423      	str	r3, [r4, #64]	; 0x40
 80029ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80029ec:	4c27      	ldr	r4, [pc, #156]	; (8002a8c <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80029f2:	4620      	mov	r0, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029f4:	9302      	str	r3, [sp, #8]
 80029f6:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80029f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029fc:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a00:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a02:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0a:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002a0e:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a12:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002a16:	f7fd febd 	bl	8000794 <HAL_DMA_Init>
 8002a1a:	b108      	cbz	r0, 8002a20 <HAL_I2C_MspInit+0x94>
    {
      Error_Handler();
 8002a1c:	f000 f918 	bl	8002c50 <Error_Handler>

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002a20:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_I2C_MspInit+0x104>)
 8002a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002a26:	63ac      	str	r4, [r5, #56]	; 0x38
 8002a28:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8002a2a:	4c1a      	ldr	r4, [pc, #104]	; (8002a94 <HAL_I2C_MspInit+0x108>)
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002a2c:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a30:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002a36:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a38:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a40:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002a44:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a48:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002a4c:	f7fd fea2 	bl	8000794 <HAL_DMA_Init>
 8002a50:	b108      	cbz	r0, 8002a56 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002a52:	f000 f8fd 	bl	8002c50 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002a5a:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002a5c:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002a5e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002a60:	f7fd fe2e 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a64:	201f      	movs	r0, #31
 8002a66:	f7fd fe5d 	bl	8000724 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2020      	movs	r0, #32
 8002a6e:	4611      	mov	r1, r2
 8002a70:	f7fd fe26 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002a74:	2020      	movs	r0, #32
 8002a76:	f7fd fe55 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a7a:	b009      	add	sp, #36	; 0x24
 8002a7c:	bd30      	pop	{r4, r5, pc}
 8002a7e:	bf00      	nop
 8002a80:	40005400 	.word	0x40005400
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020400 	.word	0x40020400
 8002a8c:	2000025c 	.word	0x2000025c
 8002a90:	40026088 	.word	0x40026088
 8002a94:	200001fc 	.word	0x200001fc
 8002a98:	400260a0 	.word	0x400260a0

08002a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a9c:	b510      	push	{r4, lr}
 8002a9e:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aa0:	222c      	movs	r2, #44	; 0x2c
 8002aa2:	2100      	movs	r1, #0
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aa4:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aa6:	a809      	add	r0, sp, #36	; 0x24
 8002aa8:	f000 fbda 	bl	8003260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aac:	2214      	movs	r2, #20
 8002aae:	2100      	movs	r1, #0
 8002ab0:	a802      	add	r0, sp, #8
 8002ab2:	f000 fbd5 	bl	8003260 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab6:	2290      	movs	r2, #144	; 0x90
 8002ab8:	2100      	movs	r1, #0
 8002aba:	a814      	add	r0, sp, #80	; 0x50
 8002abc:	f000 fbd0 	bl	8003260 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <SystemClock_Config+0xbc>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002ac2:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002ac4:	f04f 0c19 	mov.w	ip, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <SystemClock_Config+0xc0>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002aee:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002af2:	e9cd 0307 	strd	r0, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002afa:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002afc:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002b00:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b04:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002b08:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b0c:	f7fe fbf4 	bl	80012f8 <HAL_RCC_OscConfig>
 8002b10:	b100      	cbz	r0, 8002b14 <SystemClock_Config+0x78>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002b12:	e7fe      	b.n	8002b12 <SystemClock_Config+0x76>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b14:	f7fe fbb8 	bl	8001288 <HAL_PWREx_EnableOverDrive>
 8002b18:	b100      	cbz	r0, 8002b1c <SystemClock_Config+0x80>
  while(1)
 8002b1a:	e7fe      	b.n	8002b1a <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b1c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b1e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b22:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002b24:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b26:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002b32:	2107      	movs	r1, #7
 8002b34:	f7fe fda6 	bl	8001684 <HAL_RCC_ClockConfig>
 8002b38:	b100      	cbz	r0, 8002b3c <SystemClock_Config+0xa0>
  while(1)
 8002b3a:	e7fe      	b.n	8002b3a <SystemClock_Config+0x9e>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1;
 8002b3c:	f44f 1382 	mov.w	r3, #1064960	; 0x104000
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b40:	902d      	str	r0, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b42:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1;
 8002b44:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PIN;
 8002b46:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002b4a:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b4c:	f7fe fe36 	bl	80017bc <HAL_RCCEx_PeriphCLKConfig>
 8002b50:	b100      	cbz	r0, 8002b54 <SystemClock_Config+0xb8>
  while(1)
 8002b52:	e7fe      	b.n	8002b52 <SystemClock_Config+0xb6>
}
 8002b54:	b038      	add	sp, #224	; 0xe0
 8002b56:	bd10      	pop	{r4, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40007000 	.word	0x40007000

08002b60 <main>:
{
 8002b60:	b570      	push	{r4, r5, r6, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b66:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002b6a:	4a36      	ldr	r2, [pc, #216]	; (8002c44 <main+0xe4>)
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002b72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b76:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002b7a:	6953      	ldr	r3, [r2, #20]
 8002b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b86:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002b8a:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002b8e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002b92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b96:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b9a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002b9e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002ba2:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002ba4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ba8:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002baa:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002bae:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002bb0:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8002bb4:	d2f9      	bcs.n	8002baa <main+0x4a>
    } while(sets-- != 0U);
 8002bb6:	3b20      	subs	r3, #32
 8002bb8:	f113 0f20 	cmn.w	r3, #32
 8002bbc:	d1f2      	bne.n	8002ba4 <main+0x44>
 8002bbe:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002bc2:	6953      	ldr	r3, [r2, #20]
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6153      	str	r3, [r2, #20]
 8002bca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bce:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8002bd2:	f7fd fd33 	bl	800063c <HAL_Init>
  uint8_t Count = 0;
 8002bd6:	2400      	movs	r4, #0
  SystemClock_Config();
 8002bd8:	f7ff ff60 	bl	8002a9c <SystemClock_Config>
	  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, Count & 1);
 8002bdc:	4d1a      	ldr	r5, [pc, #104]	; (8002c48 <main+0xe8>)
  MX_GPIO_Init();
 8002bde:	f7ff fdb7 	bl	8002750 <MX_GPIO_Init>
  MX_DMA_Init();
 8002be2:	f7ff fd83 	bl	80026ec <MX_DMA_Init>
  MX_I2C1_Init();
 8002be6:	f7ff fea5 	bl	8002934 <MX_I2C1_Init>
  MX_SAI2_Init();
 8002bea:	f000 f833 	bl	8002c54 <MX_SAI2_Init>
  MX_SPI1_Init();
 8002bee:	f000 f8eb 	bl	8002dc8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002bf2:	f000 f90f 	bl	8002e14 <MX_SPI2_Init>
  MX_SPI3_Init();
 8002bf6:	f000 f935 	bl	8002e64 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002bfa:	f000 fa89 	bl	8003110 <MX_TIM1_Init>
  HAL_GPIO_WritePin(ESP32_A_EN_GPIO_Port, ESP32_A_EN_Pin, GPIO_PIN_SET);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2102      	movs	r1, #2
 8002c02:	4812      	ldr	r0, [pc, #72]	; (8002c4c <main+0xec>)
 8002c04:	f7fe f808 	bl	8000c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ESP32_B_EN_GPIO_Port, ESP32_B_EN_Pin, GPIO_PIN_SET);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	2110      	movs	r1, #16
 8002c0c:	480f      	ldr	r0, [pc, #60]	; (8002c4c <main+0xec>)
 8002c0e:	f7fe f803 	bl	8000c18 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, Count & 1);
 8002c12:	f004 0201 	and.w	r2, r4, #1
 8002c16:	4628      	mov	r0, r5
 8002c18:	2102      	movs	r1, #2
 8002c1a:	f7fd fffd 	bl	8000c18 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, Count & 2);
 8002c1e:	f004 0202 	and.w	r2, r4, #2
 8002c22:	4628      	mov	r0, r5
 8002c24:	2104      	movs	r1, #4
 8002c26:	f7fd fff7 	bl	8000c18 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, Count & 4);
 8002c2a:	f004 0204 	and.w	r2, r4, #4
 8002c2e:	4628      	mov	r0, r5
 8002c30:	2108      	movs	r1, #8
	  ++Count;
 8002c32:	3401      	adds	r4, #1
	  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, Count & 4);
 8002c34:	f7fd fff0 	bl	8000c18 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8002c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	  ++Count;
 8002c3c:	b2e4      	uxtb	r4, r4
	  HAL_Delay(500);
 8002c3e:	f7fd fd1b 	bl	8000678 <HAL_Delay>
  while (1)
 8002c42:	e7e6      	b.n	8002c12 <main+0xb2>
 8002c44:	e000ed00 	.word	0xe000ed00
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	40021000 	.word	0x40021000

08002c50 <Error_Handler>:
  while(1)
 8002c50:	e7fe      	b.n	8002c50 <Error_Handler>
	...

08002c54 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_a;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8002c54:	b508      	push	{r3, lr}

  hsai_BlockA2.Instance = SAI2_Block_A;
 8002c56:	4817      	ldr	r0, [pc, #92]	; (8002cb4 <MX_SAI2_Init+0x60>)
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_SAI2_Init+0x64>)
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8002c5c:	2203      	movs	r2, #3
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002c5e:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002c60:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002c62:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002c64:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002c66:	e9c0 3100 	strd	r3, r1, [r0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002c6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002c6e:	61c3      	str	r3, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8002c70:	2302      	movs	r3, #2
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002c72:	e9c0 1104 	strd	r1, r1, [r0, #16]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002c76:	e9c0 1109 	strd	r1, r1, [r0, #36]	; 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8002c7a:	f7ff f9bd 	bl	8001ff8 <HAL_SAI_InitProtocol>
 8002c7e:	b108      	cbz	r0, 8002c84 <MX_SAI2_Init+0x30>
  {
    Error_Handler();
 8002c80:	f7ff ffe6 	bl	8002c50 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8002c84:	480d      	ldr	r0, [pc, #52]	; (8002cbc <MX_SAI2_Init+0x68>)
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002c86:	2203      	movs	r2, #3
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <MX_SAI2_Init+0x6c>)
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002c8a:	2100      	movs	r1, #0
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002c8c:	e9c0 3200 	strd	r3, r2, [r0]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002c90:	2301      	movs	r3, #1
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002c92:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002c94:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002c96:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8002c98:	2302      	movs	r3, #2
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002c9a:	60c1      	str	r1, [r0, #12]
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002c9c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002c9e:	e9c0 1109 	strd	r1, r1, [r0, #36]	; 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8002ca2:	f7ff f9a9 	bl	8001ff8 <HAL_SAI_InitProtocol>
 8002ca6:	b118      	cbz	r0, 8002cb0 <MX_SAI2_Init+0x5c>
  {
    Error_Handler();
  }

}
 8002ca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002cac:	f7ff bfd0 	b.w	8002c50 <Error_Handler>
}
 8002cb0:	bd08      	pop	{r3, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000036c 	.word	0x2000036c
 8002cb8:	40015c04 	.word	0x40015c04
 8002cbc:	200003f0 	.word	0x200003f0
 8002cc0:	40015c24 	.word	0x40015c24

08002cc4 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002cc4:	6802      	ldr	r2, [r0, #0]
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_SAI_MspInit+0xe0>)
 8002cc8:	429a      	cmp	r2, r3
{
 8002cca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ccc:	4605      	mov	r5, r0
 8002cce:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI2_Block_A)
 8002cd0:	d146      	bne.n	8002d60 <HAL_SAI_MspInit+0x9c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8002cd2:	4835      	ldr	r0, [pc, #212]	; (8002da8 <HAL_SAI_MspInit+0xe4>)
 8002cd4:	6803      	ldr	r3, [r0, #0]
 8002cd6:	b94b      	cbnz	r3, 8002cec <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002cd8:	4a34      	ldr	r2, [pc, #208]	; (8002dac <HAL_SAI_MspInit+0xe8>)
 8002cda:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002cdc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002ce0:	6451      	str	r1, [r2, #68]	; 0x44
 8002ce2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ce4:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	9a01      	ldr	r2, [sp, #4]
    }
    SAI2_client ++;
 8002cec:	3301      	adds	r3, #1
    PD13     ------> SAI2_SCK_A
    PE0     ------> SAI2_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002cf0:	240a      	movs	r4, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2702      	movs	r7, #2
    SAI2_client ++;
 8002cf4:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cfa:	a903      	add	r1, sp, #12
 8002cfc:	482c      	ldr	r0, [pc, #176]	; (8002db0 <HAL_SAI_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002cfe:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d08:	f7fd fe94 	bl	8000a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 8002d0c:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 8002d0e:	a903      	add	r1, sp, #12
 8002d10:	4828      	ldr	r0, [pc, #160]	; (8002db4 <HAL_SAI_MspInit+0xf0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d12:	9407      	str	r4, [sp, #28]

    /* Peripheral DMA init*/
    
    hdma_sai2_a.Instance = DMA2_Stream2;
 8002d14:	4c28      	ldr	r4, [pc, #160]	; (8002db8 <HAL_SAI_MspInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	f7fd fe89 	bl	8000a34 <HAL_GPIO_Init>
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 8002d22:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 8002d26:	4925      	ldr	r1, [pc, #148]	; (8002dbc <HAL_SAI_MspInit+0xf8>)
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d28:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 8002d2c:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d30:	2340      	movs	r3, #64	; 0x40
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d32:	e9c4 3602 	strd	r3, r6, [r4, #8]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3a:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai2_a.Init.Mode = DMA_NORMAL;
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8002d42:	4620      	mov	r0, r4
    hdma_sai2_a.Init.Mode = DMA_NORMAL;
 8002d44:	e9c4 3606 	strd	r3, r6, [r4, #24]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d4c:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8002d50:	f7fd fd20 	bl	8000794 <HAL_DMA_Init>
 8002d54:	b108      	cbz	r0, 8002d5a <HAL_SAI_MspInit+0x96>
    {
      Error_Handler();
 8002d56:	f7ff ff7b 	bl	8002c50 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8002d5a:	672c      	str	r4, [r5, #112]	; 0x70
 8002d5c:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8002d5e:	66ec      	str	r4, [r5, #108]	; 0x6c
    }
    if(hsai->Instance==SAI2_Block_B)
 8002d60:	682a      	ldr	r2, [r5, #0]
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_SAI_MspInit+0xfc>)
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d11b      	bne.n	8002da0 <HAL_SAI_MspInit+0xdc>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8002d68:	480f      	ldr	r0, [pc, #60]	; (8002da8 <HAL_SAI_MspInit+0xe4>)
 8002d6a:	6803      	ldr	r3, [r0, #0]
 8002d6c:	b94b      	cbnz	r3, 8002d82 <HAL_SAI_MspInit+0xbe>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <HAL_SAI_MspInit+0xe8>)
 8002d70:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002d76:	6451      	str	r1, [r2, #68]	; 0x44
 8002d78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d7a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002d7e:	9202      	str	r2, [sp, #8]
 8002d80:	9a02      	ldr	r2, [sp, #8]
      }
    SAI2_client ++;
 8002d82:	3301      	adds	r3, #1
    
    /**SAI2_B_Block_B GPIO Configuration    
    PA0/WKUP     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2201      	movs	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8002d86:	a903      	add	r1, sp, #12
    SAI2_client ++;
 8002d88:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8002d8c:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <HAL_SAI_MspInit+0x100>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d98:	230a      	movs	r3, #10
 8002d9a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	f7fd fe4a 	bl	8000a34 <HAL_GPIO_Init>

    }
}
 8002da0:	b009      	add	sp, #36	; 0x24
 8002da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da4:	40015c04 	.word	0x40015c04
 8002da8:	20000308 	.word	0x20000308
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020c00 	.word	0x40020c00
 8002db4:	40021000 	.word	0x40021000
 8002db8:	2000030c 	.word	0x2000030c
 8002dbc:	40026440 	.word	0x40026440
 8002dc0:	40015c24 	.word	0x40015c24
 8002dc4:	40020000 	.word	0x40020000

08002dc8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002dc8:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8002dca:	4810      	ldr	r0, [pc, #64]	; (8002e0c <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dcc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002dd0:	4a0f      	ldr	r2, [pc, #60]	; (8002e10 <MX_SPI1_Init+0x48>)
 8002dd2:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ddc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002de0:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002de6:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8002dea:	2207      	movs	r2, #7
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dec:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002df0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002df4:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002df8:	2308      	movs	r3, #8
 8002dfa:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dfc:	f7ff f991 	bl	8002122 <HAL_SPI_Init>
 8002e00:	b118      	cbz	r0, 8002e0a <MX_SPI1_Init+0x42>
  {
    Error_Handler();
  }

}
 8002e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002e06:	f7ff bf23 	b.w	8002c50 <Error_Handler>
}
 8002e0a:	bd08      	pop	{r3, pc}
 8002e0c:	20000474 	.word	0x20000474
 8002e10:	40013000 	.word	0x40013000

08002e14 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002e14:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8002e16:	4811      	ldr	r0, [pc, #68]	; (8002e5c <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e18:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002e1c:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <MX_SPI2_Init+0x4c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e22:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e2c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e30:	2220      	movs	r2, #32
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e32:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e34:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8002e38:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e3e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e42:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e46:	2308      	movs	r3, #8
 8002e48:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e4a:	f7ff f96a 	bl	8002122 <HAL_SPI_Init>
 8002e4e:	b118      	cbz	r0, 8002e58 <MX_SPI2_Init+0x44>
  {
    Error_Handler();
  }

}
 8002e50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002e54:	f7ff befc 	b.w	8002c50 <Error_Handler>
}
 8002e58:	bd08      	pop	{r3, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200004d8 	.word	0x200004d8
 8002e60:	40003800 	.word	0x40003800

08002e64 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002e64:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8002e66:	4811      	ldr	r0, [pc, #68]	; (8002eac <MX_SPI3_Init+0x48>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e68:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002e6c:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <MX_SPI3_Init+0x4c>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e72:	e9c0 2300 	strd	r2, r3, [r0]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e7c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e80:	2210      	movs	r2, #16
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e82:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e84:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8002e88:	2207      	movs	r2, #7
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e8e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e92:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e96:	2308      	movs	r3, #8
 8002e98:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e9a:	f7ff f942 	bl	8002122 <HAL_SPI_Init>
 8002e9e:	b118      	cbz	r0, 8002ea8 <MX_SPI3_Init+0x44>
  {
    Error_Handler();
  }

}
 8002ea0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002ea4:	f7ff bed4 	b.w	8002c50 <Error_Handler>
}
 8002ea8:	bd08      	pop	{r3, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000053c 	.word	0x2000053c
 8002eb0:	40003c00 	.word	0x40003c00

08002eb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eba:	2214      	movs	r2, #20
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	a807      	add	r0, sp, #28
 8002ec0:	f000 f9ce 	bl	8003260 <memset>
  if(spiHandle->Instance==SPI1)
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	4a35      	ldr	r2, [pc, #212]	; (8002f9c <HAL_SPI_MspInit+0xe8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d122      	bne.n	8002f12 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ecc:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_SPI_MspInit+0xec>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ed2:	f04f 0e03 	mov.w	lr, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	a907      	add	r1, sp, #28
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	4832      	ldr	r0, [pc, #200]	; (8002fa4 <HAL_SPI_MspInit+0xf0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ee4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ee8:	9201      	str	r2, [sp, #4]
 8002eea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	9302      	str	r3, [sp, #8]
 8002efc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f04:	2305      	movs	r3, #5
 8002f06:	e9cd e30a 	strd	lr, r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GENSPI_SCK_Pin|GENSPI_MISO_Pin|GENSPI_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f0a:	f7fd fd93 	bl	8000a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002f0e:	b00c      	add	sp, #48	; 0x30
 8002f10:	bd10      	pop	{r4, pc}
  else if(spiHandle->Instance==SPI2)
 8002f12:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <HAL_SPI_MspInit+0xf4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d11e      	bne.n	8002f56 <HAL_SPI_MspInit+0xa2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f18:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <HAL_SPI_MspInit+0xec>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	f44f 4060 	mov.w	r0, #57344	; 0xe000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f1e:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	a907      	add	r1, sp, #28
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
 8002f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002f30:	9203      	str	r2, [sp, #12]
 8002f32:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f36:	f042 0202 	orr.w	r2, r2, #2
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	9304      	str	r3, [sp, #16]
 8002f44:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f4c:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	4817      	ldr	r0, [pc, #92]	; (8002fac <HAL_SPI_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f50:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f54:	e7d9      	b.n	8002f0a <HAL_SPI_MspInit+0x56>
  else if(spiHandle->Instance==SPI3)
 8002f56:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <HAL_SPI_MspInit+0xfc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d1d8      	bne.n	8002f0e <HAL_SPI_MspInit+0x5a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f5c:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_SPI_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f5e:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f60:	4814      	ldr	r0, [pc, #80]	; (8002fb4 <HAL_SPI_MspInit+0x100>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
 8002f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002f70:	9205      	str	r2, [sp, #20]
 8002f72:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f76:	f042 0204 	orr.w	r2, r2, #4
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	9306      	str	r3, [sp, #24]
 8002f88:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f90:	2306      	movs	r3, #6
 8002f92:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f96:	a907      	add	r1, sp, #28
 8002f98:	e7b7      	b.n	8002f0a <HAL_SPI_MspInit+0x56>
 8002f9a:	bf00      	nop
 8002f9c:	40013000 	.word	0x40013000
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	40003800 	.word	0x40003800
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40003c00 	.word	0x40003c00
 8002fb4:	40020800 	.word	0x40020800

08002fb8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_MspInit+0x2c>)
{
 8002fba:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002fca:	9200      	str	r2, [sp, #0]
 8002fcc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe0:	b002      	add	sp, #8
 8002fe2:	4770      	bx	lr
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fe8:	4770      	bx	lr

08002fea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fea:	e7fe      	b.n	8002fea <HardFault_Handler>

08002fec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fec:	e7fe      	b.n	8002fec <MemManage_Handler>

08002fee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fee:	e7fe      	b.n	8002fee <BusFault_Handler>

08002ff0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ff0:	e7fe      	b.n	8002ff0 <UsageFault_Handler>

08002ff2 <SVC_Handler>:
 8002ff2:	4770      	bx	lr

08002ff4 <DebugMon_Handler>:
 8002ff4:	4770      	bx	lr

08002ff6 <PendSV_Handler>:
 8002ff6:	4770      	bx	lr

08002ff8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff8:	f7fd bb2c 	b.w	8000654 <HAL_IncTick>

08002ffc <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002ffc:	4801      	ldr	r0, [pc, #4]	; (8003004 <DMA1_Stream5_IRQHandler+0x8>)
 8002ffe:	f7fd bc5b 	b.w	80008b8 <HAL_DMA_IRQHandler>
 8003002:	bf00      	nop
 8003004:	200001fc 	.word	0x200001fc

08003008 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003008:	4801      	ldr	r0, [pc, #4]	; (8003010 <DMA1_Stream6_IRQHandler+0x8>)
 800300a:	f7fd bc55 	b.w	80008b8 <HAL_DMA_IRQHandler>
 800300e:	bf00      	nop
 8003010:	2000025c 	.word	0x2000025c

08003014 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003014:	2020      	movs	r0, #32
 8003016:	f7fd be05 	b.w	8000c24 <HAL_GPIO_EXTI_IRQHandler>
	...

0800301c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800301c:	4801      	ldr	r0, [pc, #4]	; (8003024 <I2C1_EV_IRQHandler+0x8>)
 800301e:	f7fd be8d 	b.w	8000d3c <HAL_I2C_EV_IRQHandler>
 8003022:	bf00      	nop
 8003024:	200002bc 	.word	0x200002bc

08003028 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003028:	4801      	ldr	r0, [pc, #4]	; (8003030 <I2C1_ER_IRQHandler+0x8>)
 800302a:	f7fe b89d 	b.w	8001168 <HAL_I2C_ER_IRQHandler>
 800302e:	bf00      	nop
 8003030:	200002bc 	.word	0x200002bc

08003034 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003034:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003038:	f7fd bdf4 	b.w	8000c24 <HAL_GPIO_EXTI_IRQHandler>

0800303c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800303c:	4801      	ldr	r0, [pc, #4]	; (8003044 <DMA2_Stream2_IRQHandler+0x8>)
 800303e:	f7fd bc3b 	b.w	80008b8 <HAL_DMA_IRQHandler>
 8003042:	bf00      	nop
 8003044:	2000030c 	.word	0x2000030c

08003048 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003048:	490f      	ldr	r1, [pc, #60]	; (8003088 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800304a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800304c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <SystemInit+0x44>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003062:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800306a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800306e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003070:	4a07      	ldr	r2, [pc, #28]	; (8003090 <SystemInit+0x48>)
 8003072:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800307a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800307c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800307e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003082:	608b      	str	r3, [r1, #8]
#endif
}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000ed00 	.word	0xe000ed00
 800308c:	40023800 	.word	0x40023800
 8003090:	24003010 	.word	0x24003010

08003094 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8003094:	6802      	ldr	r2, [r0, #0]
{
 8003096:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_TIM_PWM_MspInit+0x24>)
 800309a:	429a      	cmp	r2, r3
 800309c:	d10a      	bne.n	80030b4 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800309e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80030a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80030b4:	b002      	add	sp, #8
 80030b6:	4770      	bx	lr
 80030b8:	40010000 	.word	0x40010000

080030bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030bc:	b510      	push	{r4, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c2:	2214      	movs	r2, #20
 80030c4:	2100      	movs	r1, #0
 80030c6:	a801      	add	r0, sp, #4
 80030c8:	f000 f8ca 	bl	8003260 <memset>
  if(timHandle->Instance==TIM1)
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_TIM_MspPostInit+0x4c>)
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d116      	bne.n	8003102 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030d4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 80030d8:	a901      	add	r1, sp, #4
 80030da:	480c      	ldr	r0, [pc, #48]	; (800310c <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030de:	f042 0210 	orr.w	r2, r2, #16
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030fa:	2301      	movs	r3, #1
 80030fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 80030fe:	f7fd fc99 	bl	8000a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003102:	b006      	add	sp, #24
 8003104:	bd10      	pop	{r4, pc}
 8003106:	bf00      	nop
 8003108:	40010000 	.word	0x40010000
 800310c:	40021000 	.word	0x40021000

08003110 <MX_TIM1_Init>:
{
 8003110:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003112:	2400      	movs	r4, #0
{
 8003114:	b096      	sub	sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003116:	221c      	movs	r2, #28
 8003118:	4621      	mov	r1, r4
 800311a:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800311c:	9403      	str	r4, [sp, #12]
 800311e:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003122:	f000 f89d 	bl	8003260 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003126:	222c      	movs	r2, #44	; 0x2c
 8003128:	4621      	mov	r1, r4
 800312a:	eb0d 0002 	add.w	r0, sp, r2
 800312e:	f000 f897 	bl	8003260 <memset>
  htim1.Instance = TIM1;
 8003132:	4822      	ldr	r0, [pc, #136]	; (80031bc <MX_TIM1_Init+0xac>)
 8003134:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <MX_TIM1_Init+0xb0>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003136:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 0;
 8003138:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 0;
 800313c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8003140:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003144:	f7ff f98c 	bl	8002460 <HAL_TIM_PWM_Init>
 8003148:	b108      	cbz	r0, 800314e <MX_TIM1_Init+0x3e>
    Error_Handler();
 800314a:	f7ff fd81 	bl	8002c50 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800314e:	a901      	add	r1, sp, #4
 8003150:	481a      	ldr	r0, [pc, #104]	; (80031bc <MX_TIM1_Init+0xac>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003152:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003154:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003158:	f7ff fa5a 	bl	8002610 <HAL_TIMEx_MasterConfigSynchronization>
 800315c:	b108      	cbz	r0, 8003162 <MX_TIM1_Init+0x52>
    Error_Handler();
 800315e:	f7ff fd77 	bl	8002c50 <Error_Handler>
  sConfigOC.Pulse = 0;
 8003162:	2400      	movs	r4, #0
 8003164:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003166:	a904      	add	r1, sp, #16
 8003168:	4814      	ldr	r0, [pc, #80]	; (80031bc <MX_TIM1_Init+0xac>)
 800316a:	4622      	mov	r2, r4
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800316c:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 800316e:	e9cd 3404 	strd	r3, r4, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003172:	e9cd 4406 	strd	r4, r4, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003176:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800317a:	f7ff f9c3 	bl	8002504 <HAL_TIM_PWM_ConfigChannel>
 800317e:	b108      	cbz	r0, 8003184 <MX_TIM1_Init+0x74>
    Error_Handler();
 8003180:	f7ff fd66 	bl	8002c50 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003188:	a90b      	add	r1, sp, #44	; 0x2c
 800318a:	480c      	ldr	r0, [pc, #48]	; (80031bc <MX_TIM1_Init+0xac>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800318c:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800318e:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003190:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003192:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800319a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 800319e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.Break2Filter = 0;
 80031a2:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80031a6:	f7ff fa5f 	bl	8002668 <HAL_TIMEx_ConfigBreakDeadTime>
 80031aa:	b108      	cbz	r0, 80031b0 <MX_TIM1_Init+0xa0>
    Error_Handler();
 80031ac:	f7ff fd50 	bl	8002c50 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <MX_TIM1_Init+0xac>)
 80031b2:	f7ff ff83 	bl	80030bc <HAL_TIM_MspPostInit>
}
 80031b6:	b016      	add	sp, #88	; 0x58
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	bf00      	nop
 80031bc:	200005a0 	.word	0x200005a0
 80031c0:	40010000 	.word	0x40010000

080031c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031ca:	e003      	b.n	80031d4 <LoopCopyDataInit>

080031cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031d2:	3104      	adds	r1, #4

080031d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031d4:	480b      	ldr	r0, [pc, #44]	; (8003204 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031dc:	d3f6      	bcc.n	80031cc <CopyDataInit>
  ldr  r2, =_sbss
 80031de:	4a0b      	ldr	r2, [pc, #44]	; (800320c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80031e0:	e002      	b.n	80031e8 <LoopFillZerobss>

080031e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031e4:	f842 3b04 	str.w	r3, [r2], #4

080031e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80031ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031ec:	d3f9      	bcc.n	80031e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ee:	f7ff ff2b 	bl	8003048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031f2:	f000 f811 	bl	8003218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031f6:	f7ff fcb3 	bl	8002b60 <main>
  bx  lr    
 80031fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031fc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003200:	0800600c 	.word	0x0800600c
  ldr  r0, =_sdata
 8003204:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003208:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800320c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003210:	200005f4 	.word	0x200005f4

08003214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003214:	e7fe      	b.n	8003214 <ADC_IRQHandler>
	...

08003218 <__libc_init_array>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	4d0d      	ldr	r5, [pc, #52]	; (8003250 <__libc_init_array+0x38>)
 800321c:	4c0d      	ldr	r4, [pc, #52]	; (8003254 <__libc_init_array+0x3c>)
 800321e:	1b64      	subs	r4, r4, r5
 8003220:	10a4      	asrs	r4, r4, #2
 8003222:	2600      	movs	r6, #0
 8003224:	42a6      	cmp	r6, r4
 8003226:	d109      	bne.n	800323c <__libc_init_array+0x24>
 8003228:	4d0b      	ldr	r5, [pc, #44]	; (8003258 <__libc_init_array+0x40>)
 800322a:	4c0c      	ldr	r4, [pc, #48]	; (800325c <__libc_init_array+0x44>)
 800322c:	f002 fce0 	bl	8005bf0 <_init>
 8003230:	1b64      	subs	r4, r4, r5
 8003232:	10a4      	asrs	r4, r4, #2
 8003234:	2600      	movs	r6, #0
 8003236:	42a6      	cmp	r6, r4
 8003238:	d105      	bne.n	8003246 <__libc_init_array+0x2e>
 800323a:	bd70      	pop	{r4, r5, r6, pc}
 800323c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003240:	4798      	blx	r3
 8003242:	3601      	adds	r6, #1
 8003244:	e7ee      	b.n	8003224 <__libc_init_array+0xc>
 8003246:	f855 3b04 	ldr.w	r3, [r5], #4
 800324a:	4798      	blx	r3
 800324c:	3601      	adds	r6, #1
 800324e:	e7f2      	b.n	8003236 <__libc_init_array+0x1e>
 8003250:	08006004 	.word	0x08006004
 8003254:	08006004 	.word	0x08006004
 8003258:	08006004 	.word	0x08006004
 800325c:	08006008 	.word	0x08006008

08003260 <memset>:
 8003260:	4402      	add	r2, r0
 8003262:	4603      	mov	r3, r0
 8003264:	4293      	cmp	r3, r2
 8003266:	d100      	bne.n	800326a <memset+0xa>
 8003268:	4770      	bx	lr
 800326a:	f803 1b01 	strb.w	r1, [r3], #1
 800326e:	e7f9      	b.n	8003264 <memset+0x4>

08003270 <__cvt>:
 8003270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003272:	ed2d 8b02 	vpush	{d8}
 8003276:	eeb0 8b40 	vmov.f64	d8, d0
 800327a:	b085      	sub	sp, #20
 800327c:	4617      	mov	r7, r2
 800327e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003280:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003282:	ee18 2a90 	vmov	r2, s17
 8003286:	f025 0520 	bic.w	r5, r5, #32
 800328a:	2a00      	cmp	r2, #0
 800328c:	bfb6      	itet	lt
 800328e:	222d      	movlt	r2, #45	; 0x2d
 8003290:	2200      	movge	r2, #0
 8003292:	eeb1 8b40 	vneglt.f64	d8, d0
 8003296:	2d46      	cmp	r5, #70	; 0x46
 8003298:	460c      	mov	r4, r1
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	d004      	beq.n	80032a8 <__cvt+0x38>
 800329e:	2d45      	cmp	r5, #69	; 0x45
 80032a0:	d100      	bne.n	80032a4 <__cvt+0x34>
 80032a2:	3401      	adds	r4, #1
 80032a4:	2102      	movs	r1, #2
 80032a6:	e000      	b.n	80032aa <__cvt+0x3a>
 80032a8:	2103      	movs	r1, #3
 80032aa:	ab03      	add	r3, sp, #12
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	ab02      	add	r3, sp, #8
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	4622      	mov	r2, r4
 80032b4:	4633      	mov	r3, r6
 80032b6:	eeb0 0b48 	vmov.f64	d0, d8
 80032ba:	f000 fca9 	bl	8003c10 <_dtoa_r>
 80032be:	2d47      	cmp	r5, #71	; 0x47
 80032c0:	d101      	bne.n	80032c6 <__cvt+0x56>
 80032c2:	07fb      	lsls	r3, r7, #31
 80032c4:	d51a      	bpl.n	80032fc <__cvt+0x8c>
 80032c6:	2d46      	cmp	r5, #70	; 0x46
 80032c8:	eb00 0204 	add.w	r2, r0, r4
 80032cc:	d10c      	bne.n	80032e8 <__cvt+0x78>
 80032ce:	7803      	ldrb	r3, [r0, #0]
 80032d0:	2b30      	cmp	r3, #48	; 0x30
 80032d2:	d107      	bne.n	80032e4 <__cvt+0x74>
 80032d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	bf1c      	itt	ne
 80032de:	f1c4 0401 	rsbne	r4, r4, #1
 80032e2:	6034      	strne	r4, [r6, #0]
 80032e4:	6833      	ldr	r3, [r6, #0]
 80032e6:	441a      	add	r2, r3
 80032e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80032ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f0:	bf08      	it	eq
 80032f2:	9203      	streq	r2, [sp, #12]
 80032f4:	2130      	movs	r1, #48	; 0x30
 80032f6:	9b03      	ldr	r3, [sp, #12]
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d307      	bcc.n	800330c <__cvt+0x9c>
 80032fc:	9b03      	ldr	r3, [sp, #12]
 80032fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003300:	1a1b      	subs	r3, r3, r0
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	b005      	add	sp, #20
 8003306:	ecbd 8b02 	vpop	{d8}
 800330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800330c:	1c5c      	adds	r4, r3, #1
 800330e:	9403      	str	r4, [sp, #12]
 8003310:	7019      	strb	r1, [r3, #0]
 8003312:	e7f0      	b.n	80032f6 <__cvt+0x86>

08003314 <__exponent>:
 8003314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003316:	4603      	mov	r3, r0
 8003318:	2900      	cmp	r1, #0
 800331a:	bfb8      	it	lt
 800331c:	4249      	neglt	r1, r1
 800331e:	f803 2b02 	strb.w	r2, [r3], #2
 8003322:	bfb4      	ite	lt
 8003324:	222d      	movlt	r2, #45	; 0x2d
 8003326:	222b      	movge	r2, #43	; 0x2b
 8003328:	2909      	cmp	r1, #9
 800332a:	7042      	strb	r2, [r0, #1]
 800332c:	dd2a      	ble.n	8003384 <__exponent+0x70>
 800332e:	f10d 0407 	add.w	r4, sp, #7
 8003332:	46a4      	mov	ip, r4
 8003334:	270a      	movs	r7, #10
 8003336:	46a6      	mov	lr, r4
 8003338:	460a      	mov	r2, r1
 800333a:	fb91 f6f7 	sdiv	r6, r1, r7
 800333e:	fb07 1516 	mls	r5, r7, r6, r1
 8003342:	3530      	adds	r5, #48	; 0x30
 8003344:	2a63      	cmp	r2, #99	; 0x63
 8003346:	f104 34ff 	add.w	r4, r4, #4294967295
 800334a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800334e:	4631      	mov	r1, r6
 8003350:	dcf1      	bgt.n	8003336 <__exponent+0x22>
 8003352:	3130      	adds	r1, #48	; 0x30
 8003354:	f1ae 0502 	sub.w	r5, lr, #2
 8003358:	f804 1c01 	strb.w	r1, [r4, #-1]
 800335c:	1c44      	adds	r4, r0, #1
 800335e:	4629      	mov	r1, r5
 8003360:	4561      	cmp	r1, ip
 8003362:	d30a      	bcc.n	800337a <__exponent+0x66>
 8003364:	f10d 0209 	add.w	r2, sp, #9
 8003368:	eba2 020e 	sub.w	r2, r2, lr
 800336c:	4565      	cmp	r5, ip
 800336e:	bf88      	it	hi
 8003370:	2200      	movhi	r2, #0
 8003372:	4413      	add	r3, r2
 8003374:	1a18      	subs	r0, r3, r0
 8003376:	b003      	add	sp, #12
 8003378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800337a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800337e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003382:	e7ed      	b.n	8003360 <__exponent+0x4c>
 8003384:	2330      	movs	r3, #48	; 0x30
 8003386:	3130      	adds	r1, #48	; 0x30
 8003388:	7083      	strb	r3, [r0, #2]
 800338a:	70c1      	strb	r1, [r0, #3]
 800338c:	1d03      	adds	r3, r0, #4
 800338e:	e7f1      	b.n	8003374 <__exponent+0x60>

08003390 <_printf_float>:
 8003390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003394:	b08b      	sub	sp, #44	; 0x2c
 8003396:	460c      	mov	r4, r1
 8003398:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800339c:	4616      	mov	r6, r2
 800339e:	461f      	mov	r7, r3
 80033a0:	4605      	mov	r5, r0
 80033a2:	f001 f9a3 	bl	80046ec <_localeconv_r>
 80033a6:	f8d0 b000 	ldr.w	fp, [r0]
 80033aa:	4658      	mov	r0, fp
 80033ac:	f7fc ff48 	bl	8000240 <strlen>
 80033b0:	2300      	movs	r3, #0
 80033b2:	9308      	str	r3, [sp, #32]
 80033b4:	f8d8 3000 	ldr.w	r3, [r8]
 80033b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	3307      	adds	r3, #7
 80033c0:	f023 0307 	bic.w	r3, r3, #7
 80033c4:	f103 0108 	add.w	r1, r3, #8
 80033c8:	f8c8 1000 	str.w	r1, [r8]
 80033cc:	4682      	mov	sl, r0
 80033ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80033d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8003638 <_printf_float+0x2a8>
 80033da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80033de:	eeb0 6bc0 	vabs.f64	d6, d0
 80033e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	dd24      	ble.n	8003436 <_printf_float+0xa6>
 80033ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80033f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f4:	d502      	bpl.n	80033fc <_printf_float+0x6c>
 80033f6:	232d      	movs	r3, #45	; 0x2d
 80033f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033fc:	4b90      	ldr	r3, [pc, #576]	; (8003640 <_printf_float+0x2b0>)
 80033fe:	4891      	ldr	r0, [pc, #580]	; (8003644 <_printf_float+0x2b4>)
 8003400:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003404:	bf94      	ite	ls
 8003406:	4698      	movls	r8, r3
 8003408:	4680      	movhi	r8, r0
 800340a:	2303      	movs	r3, #3
 800340c:	6123      	str	r3, [r4, #16]
 800340e:	f022 0204 	bic.w	r2, r2, #4
 8003412:	2300      	movs	r3, #0
 8003414:	6022      	str	r2, [r4, #0]
 8003416:	9304      	str	r3, [sp, #16]
 8003418:	9700      	str	r7, [sp, #0]
 800341a:	4633      	mov	r3, r6
 800341c:	aa09      	add	r2, sp, #36	; 0x24
 800341e:	4621      	mov	r1, r4
 8003420:	4628      	mov	r0, r5
 8003422:	f000 f9d3 	bl	80037cc <_printf_common>
 8003426:	3001      	adds	r0, #1
 8003428:	f040 808a 	bne.w	8003540 <_printf_float+0x1b0>
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	b00b      	add	sp, #44	; 0x2c
 8003432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003436:	eeb4 0b40 	vcmp.f64	d0, d0
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	d709      	bvc.n	8003454 <_printf_float+0xc4>
 8003440:	ee10 3a90 	vmov	r3, s1
 8003444:	2b00      	cmp	r3, #0
 8003446:	bfbc      	itt	lt
 8003448:	232d      	movlt	r3, #45	; 0x2d
 800344a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800344e:	487e      	ldr	r0, [pc, #504]	; (8003648 <_printf_float+0x2b8>)
 8003450:	4b7e      	ldr	r3, [pc, #504]	; (800364c <_printf_float+0x2bc>)
 8003452:	e7d5      	b.n	8003400 <_printf_float+0x70>
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800345a:	9104      	str	r1, [sp, #16]
 800345c:	1c59      	adds	r1, r3, #1
 800345e:	d13c      	bne.n	80034da <_printf_float+0x14a>
 8003460:	2306      	movs	r3, #6
 8003462:	6063      	str	r3, [r4, #4]
 8003464:	2300      	movs	r3, #0
 8003466:	9303      	str	r3, [sp, #12]
 8003468:	ab08      	add	r3, sp, #32
 800346a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800346e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003472:	ab07      	add	r3, sp, #28
 8003474:	6861      	ldr	r1, [r4, #4]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	6022      	str	r2, [r4, #0]
 800347a:	f10d 031b 	add.w	r3, sp, #27
 800347e:	4628      	mov	r0, r5
 8003480:	f7ff fef6 	bl	8003270 <__cvt>
 8003484:	9b04      	ldr	r3, [sp, #16]
 8003486:	9907      	ldr	r1, [sp, #28]
 8003488:	2b47      	cmp	r3, #71	; 0x47
 800348a:	4680      	mov	r8, r0
 800348c:	d108      	bne.n	80034a0 <_printf_float+0x110>
 800348e:	1cc8      	adds	r0, r1, #3
 8003490:	db02      	blt.n	8003498 <_printf_float+0x108>
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	4299      	cmp	r1, r3
 8003496:	dd41      	ble.n	800351c <_printf_float+0x18c>
 8003498:	f1a9 0902 	sub.w	r9, r9, #2
 800349c:	fa5f f989 	uxtb.w	r9, r9
 80034a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034a4:	d820      	bhi.n	80034e8 <_printf_float+0x158>
 80034a6:	3901      	subs	r1, #1
 80034a8:	464a      	mov	r2, r9
 80034aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80034ae:	9107      	str	r1, [sp, #28]
 80034b0:	f7ff ff30 	bl	8003314 <__exponent>
 80034b4:	9a08      	ldr	r2, [sp, #32]
 80034b6:	9004      	str	r0, [sp, #16]
 80034b8:	1813      	adds	r3, r2, r0
 80034ba:	2a01      	cmp	r2, #1
 80034bc:	6123      	str	r3, [r4, #16]
 80034be:	dc02      	bgt.n	80034c6 <_printf_float+0x136>
 80034c0:	6822      	ldr	r2, [r4, #0]
 80034c2:	07d2      	lsls	r2, r2, #31
 80034c4:	d501      	bpl.n	80034ca <_printf_float+0x13a>
 80034c6:	3301      	adds	r3, #1
 80034c8:	6123      	str	r3, [r4, #16]
 80034ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0a2      	beq.n	8003418 <_printf_float+0x88>
 80034d2:	232d      	movs	r3, #45	; 0x2d
 80034d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034d8:	e79e      	b.n	8003418 <_printf_float+0x88>
 80034da:	9904      	ldr	r1, [sp, #16]
 80034dc:	2947      	cmp	r1, #71	; 0x47
 80034de:	d1c1      	bne.n	8003464 <_printf_float+0xd4>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1bf      	bne.n	8003464 <_printf_float+0xd4>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e7bc      	b.n	8003462 <_printf_float+0xd2>
 80034e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80034ec:	d118      	bne.n	8003520 <_printf_float+0x190>
 80034ee:	2900      	cmp	r1, #0
 80034f0:	6863      	ldr	r3, [r4, #4]
 80034f2:	dd0b      	ble.n	800350c <_printf_float+0x17c>
 80034f4:	6121      	str	r1, [r4, #16]
 80034f6:	b913      	cbnz	r3, 80034fe <_printf_float+0x16e>
 80034f8:	6822      	ldr	r2, [r4, #0]
 80034fa:	07d0      	lsls	r0, r2, #31
 80034fc:	d502      	bpl.n	8003504 <_printf_float+0x174>
 80034fe:	3301      	adds	r3, #1
 8003500:	440b      	add	r3, r1
 8003502:	6123      	str	r3, [r4, #16]
 8003504:	2300      	movs	r3, #0
 8003506:	65a1      	str	r1, [r4, #88]	; 0x58
 8003508:	9304      	str	r3, [sp, #16]
 800350a:	e7de      	b.n	80034ca <_printf_float+0x13a>
 800350c:	b913      	cbnz	r3, 8003514 <_printf_float+0x184>
 800350e:	6822      	ldr	r2, [r4, #0]
 8003510:	07d2      	lsls	r2, r2, #31
 8003512:	d501      	bpl.n	8003518 <_printf_float+0x188>
 8003514:	3302      	adds	r3, #2
 8003516:	e7f4      	b.n	8003502 <_printf_float+0x172>
 8003518:	2301      	movs	r3, #1
 800351a:	e7f2      	b.n	8003502 <_printf_float+0x172>
 800351c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003520:	9b08      	ldr	r3, [sp, #32]
 8003522:	4299      	cmp	r1, r3
 8003524:	db05      	blt.n	8003532 <_printf_float+0x1a2>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	6121      	str	r1, [r4, #16]
 800352a:	07d8      	lsls	r0, r3, #31
 800352c:	d5ea      	bpl.n	8003504 <_printf_float+0x174>
 800352e:	1c4b      	adds	r3, r1, #1
 8003530:	e7e7      	b.n	8003502 <_printf_float+0x172>
 8003532:	2900      	cmp	r1, #0
 8003534:	bfd4      	ite	le
 8003536:	f1c1 0202 	rsble	r2, r1, #2
 800353a:	2201      	movgt	r2, #1
 800353c:	4413      	add	r3, r2
 800353e:	e7e0      	b.n	8003502 <_printf_float+0x172>
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	055a      	lsls	r2, r3, #21
 8003544:	d407      	bmi.n	8003556 <_printf_float+0x1c6>
 8003546:	6923      	ldr	r3, [r4, #16]
 8003548:	4642      	mov	r2, r8
 800354a:	4631      	mov	r1, r6
 800354c:	4628      	mov	r0, r5
 800354e:	47b8      	blx	r7
 8003550:	3001      	adds	r0, #1
 8003552:	d12a      	bne.n	80035aa <_printf_float+0x21a>
 8003554:	e76a      	b.n	800342c <_printf_float+0x9c>
 8003556:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800355a:	f240 80e2 	bls.w	8003722 <_printf_float+0x392>
 800355e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003562:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	d133      	bne.n	80035d4 <_printf_float+0x244>
 800356c:	4a38      	ldr	r2, [pc, #224]	; (8003650 <_printf_float+0x2c0>)
 800356e:	2301      	movs	r3, #1
 8003570:	4631      	mov	r1, r6
 8003572:	4628      	mov	r0, r5
 8003574:	47b8      	blx	r7
 8003576:	3001      	adds	r0, #1
 8003578:	f43f af58 	beq.w	800342c <_printf_float+0x9c>
 800357c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003580:	429a      	cmp	r2, r3
 8003582:	db02      	blt.n	800358a <_printf_float+0x1fa>
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	07d8      	lsls	r0, r3, #31
 8003588:	d50f      	bpl.n	80035aa <_printf_float+0x21a>
 800358a:	4653      	mov	r3, sl
 800358c:	465a      	mov	r2, fp
 800358e:	4631      	mov	r1, r6
 8003590:	4628      	mov	r0, r5
 8003592:	47b8      	blx	r7
 8003594:	3001      	adds	r0, #1
 8003596:	f43f af49 	beq.w	800342c <_printf_float+0x9c>
 800359a:	f04f 0800 	mov.w	r8, #0
 800359e:	f104 091a 	add.w	r9, r4, #26
 80035a2:	9b08      	ldr	r3, [sp, #32]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	4543      	cmp	r3, r8
 80035a8:	dc09      	bgt.n	80035be <_printf_float+0x22e>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	079b      	lsls	r3, r3, #30
 80035ae:	f100 8108 	bmi.w	80037c2 <_printf_float+0x432>
 80035b2:	68e0      	ldr	r0, [r4, #12]
 80035b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035b6:	4298      	cmp	r0, r3
 80035b8:	bfb8      	it	lt
 80035ba:	4618      	movlt	r0, r3
 80035bc:	e738      	b.n	8003430 <_printf_float+0xa0>
 80035be:	2301      	movs	r3, #1
 80035c0:	464a      	mov	r2, r9
 80035c2:	4631      	mov	r1, r6
 80035c4:	4628      	mov	r0, r5
 80035c6:	47b8      	blx	r7
 80035c8:	3001      	adds	r0, #1
 80035ca:	f43f af2f 	beq.w	800342c <_printf_float+0x9c>
 80035ce:	f108 0801 	add.w	r8, r8, #1
 80035d2:	e7e6      	b.n	80035a2 <_printf_float+0x212>
 80035d4:	9b07      	ldr	r3, [sp, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	dc3c      	bgt.n	8003654 <_printf_float+0x2c4>
 80035da:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <_printf_float+0x2c0>)
 80035dc:	2301      	movs	r3, #1
 80035de:	4631      	mov	r1, r6
 80035e0:	4628      	mov	r0, r5
 80035e2:	47b8      	blx	r7
 80035e4:	3001      	adds	r0, #1
 80035e6:	f43f af21 	beq.w	800342c <_printf_float+0x9c>
 80035ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	d102      	bne.n	80035f8 <_printf_float+0x268>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	07d9      	lsls	r1, r3, #31
 80035f6:	d5d8      	bpl.n	80035aa <_printf_float+0x21a>
 80035f8:	4653      	mov	r3, sl
 80035fa:	465a      	mov	r2, fp
 80035fc:	4631      	mov	r1, r6
 80035fe:	4628      	mov	r0, r5
 8003600:	47b8      	blx	r7
 8003602:	3001      	adds	r0, #1
 8003604:	f43f af12 	beq.w	800342c <_printf_float+0x9c>
 8003608:	f04f 0900 	mov.w	r9, #0
 800360c:	f104 0a1a 	add.w	sl, r4, #26
 8003610:	9b07      	ldr	r3, [sp, #28]
 8003612:	425b      	negs	r3, r3
 8003614:	454b      	cmp	r3, r9
 8003616:	dc01      	bgt.n	800361c <_printf_float+0x28c>
 8003618:	9b08      	ldr	r3, [sp, #32]
 800361a:	e795      	b.n	8003548 <_printf_float+0x1b8>
 800361c:	2301      	movs	r3, #1
 800361e:	4652      	mov	r2, sl
 8003620:	4631      	mov	r1, r6
 8003622:	4628      	mov	r0, r5
 8003624:	47b8      	blx	r7
 8003626:	3001      	adds	r0, #1
 8003628:	f43f af00 	beq.w	800342c <_printf_float+0x9c>
 800362c:	f109 0901 	add.w	r9, r9, #1
 8003630:	e7ee      	b.n	8003610 <_printf_float+0x280>
 8003632:	bf00      	nop
 8003634:	f3af 8000 	nop.w
 8003638:	ffffffff 	.word	0xffffffff
 800363c:	7fefffff 	.word	0x7fefffff
 8003640:	08005c24 	.word	0x08005c24
 8003644:	08005c28 	.word	0x08005c28
 8003648:	08005c30 	.word	0x08005c30
 800364c:	08005c2c 	.word	0x08005c2c
 8003650:	08005c34 	.word	0x08005c34
 8003654:	9a08      	ldr	r2, [sp, #32]
 8003656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003658:	429a      	cmp	r2, r3
 800365a:	bfa8      	it	ge
 800365c:	461a      	movge	r2, r3
 800365e:	2a00      	cmp	r2, #0
 8003660:	4691      	mov	r9, r2
 8003662:	dc38      	bgt.n	80036d6 <_printf_float+0x346>
 8003664:	2300      	movs	r3, #0
 8003666:	9305      	str	r3, [sp, #20]
 8003668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800366c:	f104 021a 	add.w	r2, r4, #26
 8003670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003672:	9905      	ldr	r1, [sp, #20]
 8003674:	9304      	str	r3, [sp, #16]
 8003676:	eba3 0309 	sub.w	r3, r3, r9
 800367a:	428b      	cmp	r3, r1
 800367c:	dc33      	bgt.n	80036e6 <_printf_float+0x356>
 800367e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003682:	429a      	cmp	r2, r3
 8003684:	db3c      	blt.n	8003700 <_printf_float+0x370>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	07da      	lsls	r2, r3, #31
 800368a:	d439      	bmi.n	8003700 <_printf_float+0x370>
 800368c:	9b08      	ldr	r3, [sp, #32]
 800368e:	9a04      	ldr	r2, [sp, #16]
 8003690:	9907      	ldr	r1, [sp, #28]
 8003692:	1a9a      	subs	r2, r3, r2
 8003694:	eba3 0901 	sub.w	r9, r3, r1
 8003698:	4591      	cmp	r9, r2
 800369a:	bfa8      	it	ge
 800369c:	4691      	movge	r9, r2
 800369e:	f1b9 0f00 	cmp.w	r9, #0
 80036a2:	dc35      	bgt.n	8003710 <_printf_float+0x380>
 80036a4:	f04f 0800 	mov.w	r8, #0
 80036a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036ac:	f104 0a1a 	add.w	sl, r4, #26
 80036b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	eba3 0309 	sub.w	r3, r3, r9
 80036ba:	4543      	cmp	r3, r8
 80036bc:	f77f af75 	ble.w	80035aa <_printf_float+0x21a>
 80036c0:	2301      	movs	r3, #1
 80036c2:	4652      	mov	r2, sl
 80036c4:	4631      	mov	r1, r6
 80036c6:	4628      	mov	r0, r5
 80036c8:	47b8      	blx	r7
 80036ca:	3001      	adds	r0, #1
 80036cc:	f43f aeae 	beq.w	800342c <_printf_float+0x9c>
 80036d0:	f108 0801 	add.w	r8, r8, #1
 80036d4:	e7ec      	b.n	80036b0 <_printf_float+0x320>
 80036d6:	4613      	mov	r3, r2
 80036d8:	4631      	mov	r1, r6
 80036da:	4642      	mov	r2, r8
 80036dc:	4628      	mov	r0, r5
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	d1bf      	bne.n	8003664 <_printf_float+0x2d4>
 80036e4:	e6a2      	b.n	800342c <_printf_float+0x9c>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4631      	mov	r1, r6
 80036ea:	4628      	mov	r0, r5
 80036ec:	9204      	str	r2, [sp, #16]
 80036ee:	47b8      	blx	r7
 80036f0:	3001      	adds	r0, #1
 80036f2:	f43f ae9b 	beq.w	800342c <_printf_float+0x9c>
 80036f6:	9b05      	ldr	r3, [sp, #20]
 80036f8:	9a04      	ldr	r2, [sp, #16]
 80036fa:	3301      	adds	r3, #1
 80036fc:	9305      	str	r3, [sp, #20]
 80036fe:	e7b7      	b.n	8003670 <_printf_float+0x2e0>
 8003700:	4653      	mov	r3, sl
 8003702:	465a      	mov	r2, fp
 8003704:	4631      	mov	r1, r6
 8003706:	4628      	mov	r0, r5
 8003708:	47b8      	blx	r7
 800370a:	3001      	adds	r0, #1
 800370c:	d1be      	bne.n	800368c <_printf_float+0x2fc>
 800370e:	e68d      	b.n	800342c <_printf_float+0x9c>
 8003710:	9a04      	ldr	r2, [sp, #16]
 8003712:	464b      	mov	r3, r9
 8003714:	4442      	add	r2, r8
 8003716:	4631      	mov	r1, r6
 8003718:	4628      	mov	r0, r5
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	d1c1      	bne.n	80036a4 <_printf_float+0x314>
 8003720:	e684      	b.n	800342c <_printf_float+0x9c>
 8003722:	9a08      	ldr	r2, [sp, #32]
 8003724:	2a01      	cmp	r2, #1
 8003726:	dc01      	bgt.n	800372c <_printf_float+0x39c>
 8003728:	07db      	lsls	r3, r3, #31
 800372a:	d537      	bpl.n	800379c <_printf_float+0x40c>
 800372c:	2301      	movs	r3, #1
 800372e:	4642      	mov	r2, r8
 8003730:	4631      	mov	r1, r6
 8003732:	4628      	mov	r0, r5
 8003734:	47b8      	blx	r7
 8003736:	3001      	adds	r0, #1
 8003738:	f43f ae78 	beq.w	800342c <_printf_float+0x9c>
 800373c:	4653      	mov	r3, sl
 800373e:	465a      	mov	r2, fp
 8003740:	4631      	mov	r1, r6
 8003742:	4628      	mov	r0, r5
 8003744:	47b8      	blx	r7
 8003746:	3001      	adds	r0, #1
 8003748:	f43f ae70 	beq.w	800342c <_printf_float+0x9c>
 800374c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003750:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003758:	d01b      	beq.n	8003792 <_printf_float+0x402>
 800375a:	9b08      	ldr	r3, [sp, #32]
 800375c:	f108 0201 	add.w	r2, r8, #1
 8003760:	3b01      	subs	r3, #1
 8003762:	4631      	mov	r1, r6
 8003764:	4628      	mov	r0, r5
 8003766:	47b8      	blx	r7
 8003768:	3001      	adds	r0, #1
 800376a:	d10e      	bne.n	800378a <_printf_float+0x3fa>
 800376c:	e65e      	b.n	800342c <_printf_float+0x9c>
 800376e:	2301      	movs	r3, #1
 8003770:	464a      	mov	r2, r9
 8003772:	4631      	mov	r1, r6
 8003774:	4628      	mov	r0, r5
 8003776:	47b8      	blx	r7
 8003778:	3001      	adds	r0, #1
 800377a:	f43f ae57 	beq.w	800342c <_printf_float+0x9c>
 800377e:	f108 0801 	add.w	r8, r8, #1
 8003782:	9b08      	ldr	r3, [sp, #32]
 8003784:	3b01      	subs	r3, #1
 8003786:	4543      	cmp	r3, r8
 8003788:	dcf1      	bgt.n	800376e <_printf_float+0x3de>
 800378a:	9b04      	ldr	r3, [sp, #16]
 800378c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003790:	e6db      	b.n	800354a <_printf_float+0x1ba>
 8003792:	f04f 0800 	mov.w	r8, #0
 8003796:	f104 091a 	add.w	r9, r4, #26
 800379a:	e7f2      	b.n	8003782 <_printf_float+0x3f2>
 800379c:	2301      	movs	r3, #1
 800379e:	4642      	mov	r2, r8
 80037a0:	e7df      	b.n	8003762 <_printf_float+0x3d2>
 80037a2:	2301      	movs	r3, #1
 80037a4:	464a      	mov	r2, r9
 80037a6:	4631      	mov	r1, r6
 80037a8:	4628      	mov	r0, r5
 80037aa:	47b8      	blx	r7
 80037ac:	3001      	adds	r0, #1
 80037ae:	f43f ae3d 	beq.w	800342c <_printf_float+0x9c>
 80037b2:	f108 0801 	add.w	r8, r8, #1
 80037b6:	68e3      	ldr	r3, [r4, #12]
 80037b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80037ba:	1a5b      	subs	r3, r3, r1
 80037bc:	4543      	cmp	r3, r8
 80037be:	dcf0      	bgt.n	80037a2 <_printf_float+0x412>
 80037c0:	e6f7      	b.n	80035b2 <_printf_float+0x222>
 80037c2:	f04f 0800 	mov.w	r8, #0
 80037c6:	f104 0919 	add.w	r9, r4, #25
 80037ca:	e7f4      	b.n	80037b6 <_printf_float+0x426>

080037cc <_printf_common>:
 80037cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d0:	4616      	mov	r6, r2
 80037d2:	4699      	mov	r9, r3
 80037d4:	688a      	ldr	r2, [r1, #8]
 80037d6:	690b      	ldr	r3, [r1, #16]
 80037d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037dc:	4293      	cmp	r3, r2
 80037de:	bfb8      	it	lt
 80037e0:	4613      	movlt	r3, r2
 80037e2:	6033      	str	r3, [r6, #0]
 80037e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037e8:	4607      	mov	r7, r0
 80037ea:	460c      	mov	r4, r1
 80037ec:	b10a      	cbz	r2, 80037f2 <_printf_common+0x26>
 80037ee:	3301      	adds	r3, #1
 80037f0:	6033      	str	r3, [r6, #0]
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	0699      	lsls	r1, r3, #26
 80037f6:	bf42      	ittt	mi
 80037f8:	6833      	ldrmi	r3, [r6, #0]
 80037fa:	3302      	addmi	r3, #2
 80037fc:	6033      	strmi	r3, [r6, #0]
 80037fe:	6825      	ldr	r5, [r4, #0]
 8003800:	f015 0506 	ands.w	r5, r5, #6
 8003804:	d106      	bne.n	8003814 <_printf_common+0x48>
 8003806:	f104 0a19 	add.w	sl, r4, #25
 800380a:	68e3      	ldr	r3, [r4, #12]
 800380c:	6832      	ldr	r2, [r6, #0]
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	42ab      	cmp	r3, r5
 8003812:	dc26      	bgt.n	8003862 <_printf_common+0x96>
 8003814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003818:	1e13      	subs	r3, r2, #0
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	bf18      	it	ne
 800381e:	2301      	movne	r3, #1
 8003820:	0692      	lsls	r2, r2, #26
 8003822:	d42b      	bmi.n	800387c <_printf_common+0xb0>
 8003824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003828:	4649      	mov	r1, r9
 800382a:	4638      	mov	r0, r7
 800382c:	47c0      	blx	r8
 800382e:	3001      	adds	r0, #1
 8003830:	d01e      	beq.n	8003870 <_printf_common+0xa4>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	68e5      	ldr	r5, [r4, #12]
 8003836:	6832      	ldr	r2, [r6, #0]
 8003838:	f003 0306 	and.w	r3, r3, #6
 800383c:	2b04      	cmp	r3, #4
 800383e:	bf08      	it	eq
 8003840:	1aad      	subeq	r5, r5, r2
 8003842:	68a3      	ldr	r3, [r4, #8]
 8003844:	6922      	ldr	r2, [r4, #16]
 8003846:	bf0c      	ite	eq
 8003848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800384c:	2500      	movne	r5, #0
 800384e:	4293      	cmp	r3, r2
 8003850:	bfc4      	itt	gt
 8003852:	1a9b      	subgt	r3, r3, r2
 8003854:	18ed      	addgt	r5, r5, r3
 8003856:	2600      	movs	r6, #0
 8003858:	341a      	adds	r4, #26
 800385a:	42b5      	cmp	r5, r6
 800385c:	d11a      	bne.n	8003894 <_printf_common+0xc8>
 800385e:	2000      	movs	r0, #0
 8003860:	e008      	b.n	8003874 <_printf_common+0xa8>
 8003862:	2301      	movs	r3, #1
 8003864:	4652      	mov	r2, sl
 8003866:	4649      	mov	r1, r9
 8003868:	4638      	mov	r0, r7
 800386a:	47c0      	blx	r8
 800386c:	3001      	adds	r0, #1
 800386e:	d103      	bne.n	8003878 <_printf_common+0xac>
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003878:	3501      	adds	r5, #1
 800387a:	e7c6      	b.n	800380a <_printf_common+0x3e>
 800387c:	18e1      	adds	r1, r4, r3
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	2030      	movs	r0, #48	; 0x30
 8003882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003886:	4422      	add	r2, r4
 8003888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800388c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003890:	3302      	adds	r3, #2
 8003892:	e7c7      	b.n	8003824 <_printf_common+0x58>
 8003894:	2301      	movs	r3, #1
 8003896:	4622      	mov	r2, r4
 8003898:	4649      	mov	r1, r9
 800389a:	4638      	mov	r0, r7
 800389c:	47c0      	blx	r8
 800389e:	3001      	adds	r0, #1
 80038a0:	d0e6      	beq.n	8003870 <_printf_common+0xa4>
 80038a2:	3601      	adds	r6, #1
 80038a4:	e7d9      	b.n	800385a <_printf_common+0x8e>
	...

080038a8 <_printf_i>:
 80038a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038ac:	7e0f      	ldrb	r7, [r1, #24]
 80038ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038b0:	2f78      	cmp	r7, #120	; 0x78
 80038b2:	4691      	mov	r9, r2
 80038b4:	4680      	mov	r8, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	469a      	mov	sl, r3
 80038ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038be:	d807      	bhi.n	80038d0 <_printf_i+0x28>
 80038c0:	2f62      	cmp	r7, #98	; 0x62
 80038c2:	d80a      	bhi.n	80038da <_printf_i+0x32>
 80038c4:	2f00      	cmp	r7, #0
 80038c6:	f000 80d8 	beq.w	8003a7a <_printf_i+0x1d2>
 80038ca:	2f58      	cmp	r7, #88	; 0x58
 80038cc:	f000 80a3 	beq.w	8003a16 <_printf_i+0x16e>
 80038d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038d8:	e03a      	b.n	8003950 <_printf_i+0xa8>
 80038da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038de:	2b15      	cmp	r3, #21
 80038e0:	d8f6      	bhi.n	80038d0 <_printf_i+0x28>
 80038e2:	a101      	add	r1, pc, #4	; (adr r1, 80038e8 <_printf_i+0x40>)
 80038e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038e8:	08003941 	.word	0x08003941
 80038ec:	08003955 	.word	0x08003955
 80038f0:	080038d1 	.word	0x080038d1
 80038f4:	080038d1 	.word	0x080038d1
 80038f8:	080038d1 	.word	0x080038d1
 80038fc:	080038d1 	.word	0x080038d1
 8003900:	08003955 	.word	0x08003955
 8003904:	080038d1 	.word	0x080038d1
 8003908:	080038d1 	.word	0x080038d1
 800390c:	080038d1 	.word	0x080038d1
 8003910:	080038d1 	.word	0x080038d1
 8003914:	08003a61 	.word	0x08003a61
 8003918:	08003985 	.word	0x08003985
 800391c:	08003a43 	.word	0x08003a43
 8003920:	080038d1 	.word	0x080038d1
 8003924:	080038d1 	.word	0x080038d1
 8003928:	08003a83 	.word	0x08003a83
 800392c:	080038d1 	.word	0x080038d1
 8003930:	08003985 	.word	0x08003985
 8003934:	080038d1 	.word	0x080038d1
 8003938:	080038d1 	.word	0x080038d1
 800393c:	08003a4b 	.word	0x08003a4b
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	1d1a      	adds	r2, r3, #4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	602a      	str	r2, [r5, #0]
 8003948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800394c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003950:	2301      	movs	r3, #1
 8003952:	e0a3      	b.n	8003a9c <_printf_i+0x1f4>
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	6829      	ldr	r1, [r5, #0]
 8003958:	0606      	lsls	r6, r0, #24
 800395a:	f101 0304 	add.w	r3, r1, #4
 800395e:	d50a      	bpl.n	8003976 <_printf_i+0xce>
 8003960:	680e      	ldr	r6, [r1, #0]
 8003962:	602b      	str	r3, [r5, #0]
 8003964:	2e00      	cmp	r6, #0
 8003966:	da03      	bge.n	8003970 <_printf_i+0xc8>
 8003968:	232d      	movs	r3, #45	; 0x2d
 800396a:	4276      	negs	r6, r6
 800396c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003970:	485e      	ldr	r0, [pc, #376]	; (8003aec <_printf_i+0x244>)
 8003972:	230a      	movs	r3, #10
 8003974:	e019      	b.n	80039aa <_printf_i+0x102>
 8003976:	680e      	ldr	r6, [r1, #0]
 8003978:	602b      	str	r3, [r5, #0]
 800397a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800397e:	bf18      	it	ne
 8003980:	b236      	sxthne	r6, r6
 8003982:	e7ef      	b.n	8003964 <_printf_i+0xbc>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	6820      	ldr	r0, [r4, #0]
 8003988:	1d19      	adds	r1, r3, #4
 800398a:	6029      	str	r1, [r5, #0]
 800398c:	0601      	lsls	r1, r0, #24
 800398e:	d501      	bpl.n	8003994 <_printf_i+0xec>
 8003990:	681e      	ldr	r6, [r3, #0]
 8003992:	e002      	b.n	800399a <_printf_i+0xf2>
 8003994:	0646      	lsls	r6, r0, #25
 8003996:	d5fb      	bpl.n	8003990 <_printf_i+0xe8>
 8003998:	881e      	ldrh	r6, [r3, #0]
 800399a:	4854      	ldr	r0, [pc, #336]	; (8003aec <_printf_i+0x244>)
 800399c:	2f6f      	cmp	r7, #111	; 0x6f
 800399e:	bf0c      	ite	eq
 80039a0:	2308      	moveq	r3, #8
 80039a2:	230a      	movne	r3, #10
 80039a4:	2100      	movs	r1, #0
 80039a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039aa:	6865      	ldr	r5, [r4, #4]
 80039ac:	60a5      	str	r5, [r4, #8]
 80039ae:	2d00      	cmp	r5, #0
 80039b0:	bfa2      	ittt	ge
 80039b2:	6821      	ldrge	r1, [r4, #0]
 80039b4:	f021 0104 	bicge.w	r1, r1, #4
 80039b8:	6021      	strge	r1, [r4, #0]
 80039ba:	b90e      	cbnz	r6, 80039c0 <_printf_i+0x118>
 80039bc:	2d00      	cmp	r5, #0
 80039be:	d04d      	beq.n	8003a5c <_printf_i+0x1b4>
 80039c0:	4615      	mov	r5, r2
 80039c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80039c6:	fb03 6711 	mls	r7, r3, r1, r6
 80039ca:	5dc7      	ldrb	r7, [r0, r7]
 80039cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039d0:	4637      	mov	r7, r6
 80039d2:	42bb      	cmp	r3, r7
 80039d4:	460e      	mov	r6, r1
 80039d6:	d9f4      	bls.n	80039c2 <_printf_i+0x11a>
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d10b      	bne.n	80039f4 <_printf_i+0x14c>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	07de      	lsls	r6, r3, #31
 80039e0:	d508      	bpl.n	80039f4 <_printf_i+0x14c>
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	6861      	ldr	r1, [r4, #4]
 80039e6:	4299      	cmp	r1, r3
 80039e8:	bfde      	ittt	le
 80039ea:	2330      	movle	r3, #48	; 0x30
 80039ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039f4:	1b52      	subs	r2, r2, r5
 80039f6:	6122      	str	r2, [r4, #16]
 80039f8:	f8cd a000 	str.w	sl, [sp]
 80039fc:	464b      	mov	r3, r9
 80039fe:	aa03      	add	r2, sp, #12
 8003a00:	4621      	mov	r1, r4
 8003a02:	4640      	mov	r0, r8
 8003a04:	f7ff fee2 	bl	80037cc <_printf_common>
 8003a08:	3001      	adds	r0, #1
 8003a0a:	d14c      	bne.n	8003aa6 <_printf_i+0x1fe>
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a10:	b004      	add	sp, #16
 8003a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a16:	4835      	ldr	r0, [pc, #212]	; (8003aec <_printf_i+0x244>)
 8003a18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a1c:	6829      	ldr	r1, [r5, #0]
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a24:	6029      	str	r1, [r5, #0]
 8003a26:	061d      	lsls	r5, r3, #24
 8003a28:	d514      	bpl.n	8003a54 <_printf_i+0x1ac>
 8003a2a:	07df      	lsls	r7, r3, #31
 8003a2c:	bf44      	itt	mi
 8003a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8003a32:	6023      	strmi	r3, [r4, #0]
 8003a34:	b91e      	cbnz	r6, 8003a3e <_printf_i+0x196>
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	f023 0320 	bic.w	r3, r3, #32
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	2310      	movs	r3, #16
 8003a40:	e7b0      	b.n	80039a4 <_printf_i+0xfc>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	f043 0320 	orr.w	r3, r3, #32
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	2378      	movs	r3, #120	; 0x78
 8003a4c:	4828      	ldr	r0, [pc, #160]	; (8003af0 <_printf_i+0x248>)
 8003a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a52:	e7e3      	b.n	8003a1c <_printf_i+0x174>
 8003a54:	0659      	lsls	r1, r3, #25
 8003a56:	bf48      	it	mi
 8003a58:	b2b6      	uxthmi	r6, r6
 8003a5a:	e7e6      	b.n	8003a2a <_printf_i+0x182>
 8003a5c:	4615      	mov	r5, r2
 8003a5e:	e7bb      	b.n	80039d8 <_printf_i+0x130>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	6826      	ldr	r6, [r4, #0]
 8003a64:	6961      	ldr	r1, [r4, #20]
 8003a66:	1d18      	adds	r0, r3, #4
 8003a68:	6028      	str	r0, [r5, #0]
 8003a6a:	0635      	lsls	r5, r6, #24
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	d501      	bpl.n	8003a74 <_printf_i+0x1cc>
 8003a70:	6019      	str	r1, [r3, #0]
 8003a72:	e002      	b.n	8003a7a <_printf_i+0x1d2>
 8003a74:	0670      	lsls	r0, r6, #25
 8003a76:	d5fb      	bpl.n	8003a70 <_printf_i+0x1c8>
 8003a78:	8019      	strh	r1, [r3, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6123      	str	r3, [r4, #16]
 8003a7e:	4615      	mov	r5, r2
 8003a80:	e7ba      	b.n	80039f8 <_printf_i+0x150>
 8003a82:	682b      	ldr	r3, [r5, #0]
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	602a      	str	r2, [r5, #0]
 8003a88:	681d      	ldr	r5, [r3, #0]
 8003a8a:	6862      	ldr	r2, [r4, #4]
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f7fc fbde 	bl	8000250 <memchr>
 8003a94:	b108      	cbz	r0, 8003a9a <_printf_i+0x1f2>
 8003a96:	1b40      	subs	r0, r0, r5
 8003a98:	6060      	str	r0, [r4, #4]
 8003a9a:	6863      	ldr	r3, [r4, #4]
 8003a9c:	6123      	str	r3, [r4, #16]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa4:	e7a8      	b.n	80039f8 <_printf_i+0x150>
 8003aa6:	6923      	ldr	r3, [r4, #16]
 8003aa8:	462a      	mov	r2, r5
 8003aaa:	4649      	mov	r1, r9
 8003aac:	4640      	mov	r0, r8
 8003aae:	47d0      	blx	sl
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d0ab      	beq.n	8003a0c <_printf_i+0x164>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	079b      	lsls	r3, r3, #30
 8003ab8:	d413      	bmi.n	8003ae2 <_printf_i+0x23a>
 8003aba:	68e0      	ldr	r0, [r4, #12]
 8003abc:	9b03      	ldr	r3, [sp, #12]
 8003abe:	4298      	cmp	r0, r3
 8003ac0:	bfb8      	it	lt
 8003ac2:	4618      	movlt	r0, r3
 8003ac4:	e7a4      	b.n	8003a10 <_printf_i+0x168>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4632      	mov	r2, r6
 8003aca:	4649      	mov	r1, r9
 8003acc:	4640      	mov	r0, r8
 8003ace:	47d0      	blx	sl
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	d09b      	beq.n	8003a0c <_printf_i+0x164>
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	68e3      	ldr	r3, [r4, #12]
 8003ad8:	9903      	ldr	r1, [sp, #12]
 8003ada:	1a5b      	subs	r3, r3, r1
 8003adc:	42ab      	cmp	r3, r5
 8003ade:	dcf2      	bgt.n	8003ac6 <_printf_i+0x21e>
 8003ae0:	e7eb      	b.n	8003aba <_printf_i+0x212>
 8003ae2:	2500      	movs	r5, #0
 8003ae4:	f104 0619 	add.w	r6, r4, #25
 8003ae8:	e7f5      	b.n	8003ad6 <_printf_i+0x22e>
 8003aea:	bf00      	nop
 8003aec:	08005c36 	.word	0x08005c36
 8003af0:	08005c47 	.word	0x08005c47

08003af4 <quorem>:
 8003af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af8:	6903      	ldr	r3, [r0, #16]
 8003afa:	690c      	ldr	r4, [r1, #16]
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	4607      	mov	r7, r0
 8003b00:	f2c0 8081 	blt.w	8003c06 <quorem+0x112>
 8003b04:	3c01      	subs	r4, #1
 8003b06:	f101 0814 	add.w	r8, r1, #20
 8003b0a:	f100 0514 	add.w	r5, r0, #20
 8003b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b28:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b2c:	d331      	bcc.n	8003b92 <quorem+0x9e>
 8003b2e:	f04f 0e00 	mov.w	lr, #0
 8003b32:	4640      	mov	r0, r8
 8003b34:	46ac      	mov	ip, r5
 8003b36:	46f2      	mov	sl, lr
 8003b38:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b3c:	b293      	uxth	r3, r2
 8003b3e:	fb06 e303 	mla	r3, r6, r3, lr
 8003b42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	ebaa 0303 	sub.w	r3, sl, r3
 8003b4c:	f8dc a000 	ldr.w	sl, [ip]
 8003b50:	0c12      	lsrs	r2, r2, #16
 8003b52:	fa13 f38a 	uxtah	r3, r3, sl
 8003b56:	fb06 e202 	mla	r2, r6, r2, lr
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	9b00      	ldr	r3, [sp, #0]
 8003b5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b62:	b292      	uxth	r2, r2
 8003b64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003b68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003b70:	4581      	cmp	r9, r0
 8003b72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b76:	f84c 3b04 	str.w	r3, [ip], #4
 8003b7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003b7e:	d2db      	bcs.n	8003b38 <quorem+0x44>
 8003b80:	f855 300b 	ldr.w	r3, [r5, fp]
 8003b84:	b92b      	cbnz	r3, 8003b92 <quorem+0x9e>
 8003b86:	9b01      	ldr	r3, [sp, #4]
 8003b88:	3b04      	subs	r3, #4
 8003b8a:	429d      	cmp	r5, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	d32e      	bcc.n	8003bee <quorem+0xfa>
 8003b90:	613c      	str	r4, [r7, #16]
 8003b92:	4638      	mov	r0, r7
 8003b94:	f001 f846 	bl	8004c24 <__mcmp>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	db24      	blt.n	8003be6 <quorem+0xf2>
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f04f 0c00 	mov.w	ip, #0
 8003ba4:	f858 2b04 	ldr.w	r2, [r8], #4
 8003ba8:	f8d0 e000 	ldr.w	lr, [r0]
 8003bac:	b293      	uxth	r3, r2
 8003bae:	ebac 0303 	sub.w	r3, ip, r3
 8003bb2:	0c12      	lsrs	r2, r2, #16
 8003bb4:	fa13 f38e 	uxtah	r3, r3, lr
 8003bb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003bbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bc6:	45c1      	cmp	r9, r8
 8003bc8:	f840 3b04 	str.w	r3, [r0], #4
 8003bcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003bd0:	d2e8      	bcs.n	8003ba4 <quorem+0xb0>
 8003bd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bda:	b922      	cbnz	r2, 8003be6 <quorem+0xf2>
 8003bdc:	3b04      	subs	r3, #4
 8003bde:	429d      	cmp	r5, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	d30a      	bcc.n	8003bfa <quorem+0x106>
 8003be4:	613c      	str	r4, [r7, #16]
 8003be6:	4630      	mov	r0, r6
 8003be8:	b003      	add	sp, #12
 8003bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	3b04      	subs	r3, #4
 8003bf2:	2a00      	cmp	r2, #0
 8003bf4:	d1cc      	bne.n	8003b90 <quorem+0x9c>
 8003bf6:	3c01      	subs	r4, #1
 8003bf8:	e7c7      	b.n	8003b8a <quorem+0x96>
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	3b04      	subs	r3, #4
 8003bfe:	2a00      	cmp	r2, #0
 8003c00:	d1f0      	bne.n	8003be4 <quorem+0xf0>
 8003c02:	3c01      	subs	r4, #1
 8003c04:	e7eb      	b.n	8003bde <quorem+0xea>
 8003c06:	2000      	movs	r0, #0
 8003c08:	e7ee      	b.n	8003be8 <quorem+0xf4>
 8003c0a:	0000      	movs	r0, r0
 8003c0c:	0000      	movs	r0, r0
	...

08003c10 <_dtoa_r>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	ed2d 8b02 	vpush	{d8}
 8003c18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003c1a:	b091      	sub	sp, #68	; 0x44
 8003c1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003c20:	ec59 8b10 	vmov	r8, r9, d0
 8003c24:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8003c26:	9106      	str	r1, [sp, #24]
 8003c28:	4606      	mov	r6, r0
 8003c2a:	9208      	str	r2, [sp, #32]
 8003c2c:	930c      	str	r3, [sp, #48]	; 0x30
 8003c2e:	b975      	cbnz	r5, 8003c4e <_dtoa_r+0x3e>
 8003c30:	2010      	movs	r0, #16
 8003c32:	f000 fd5f 	bl	80046f4 <malloc>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6270      	str	r0, [r6, #36]	; 0x24
 8003c3a:	b920      	cbnz	r0, 8003c46 <_dtoa_r+0x36>
 8003c3c:	4baa      	ldr	r3, [pc, #680]	; (8003ee8 <_dtoa_r+0x2d8>)
 8003c3e:	21ea      	movs	r1, #234	; 0xea
 8003c40:	48aa      	ldr	r0, [pc, #680]	; (8003eec <_dtoa_r+0x2dc>)
 8003c42:	f001 f9f7 	bl	8005034 <__assert_func>
 8003c46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003c4a:	6005      	str	r5, [r0, #0]
 8003c4c:	60c5      	str	r5, [r0, #12]
 8003c4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003c50:	6819      	ldr	r1, [r3, #0]
 8003c52:	b151      	cbz	r1, 8003c6a <_dtoa_r+0x5a>
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	604a      	str	r2, [r1, #4]
 8003c58:	2301      	movs	r3, #1
 8003c5a:	4093      	lsls	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
 8003c5e:	4630      	mov	r0, r6
 8003c60:	f000 fd9e 	bl	80047a0 <_Bfree>
 8003c64:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f1b9 0300 	subs.w	r3, r9, #0
 8003c6e:	bfbb      	ittet	lt
 8003c70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003c74:	9303      	strlt	r3, [sp, #12]
 8003c76:	2300      	movge	r3, #0
 8003c78:	2201      	movlt	r2, #1
 8003c7a:	bfac      	ite	ge
 8003c7c:	6023      	strge	r3, [r4, #0]
 8003c7e:	6022      	strlt	r2, [r4, #0]
 8003c80:	4b9b      	ldr	r3, [pc, #620]	; (8003ef0 <_dtoa_r+0x2e0>)
 8003c82:	9c03      	ldr	r4, [sp, #12]
 8003c84:	43a3      	bics	r3, r4
 8003c86:	d11c      	bne.n	8003cc2 <_dtoa_r+0xb2>
 8003c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8003c94:	ea53 0308 	orrs.w	r3, r3, r8
 8003c98:	f000 84fd 	beq.w	8004696 <_dtoa_r+0xa86>
 8003c9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003c9e:	b963      	cbnz	r3, 8003cba <_dtoa_r+0xaa>
 8003ca0:	4b94      	ldr	r3, [pc, #592]	; (8003ef4 <_dtoa_r+0x2e4>)
 8003ca2:	e01f      	b.n	8003ce4 <_dtoa_r+0xd4>
 8003ca4:	4b94      	ldr	r3, [pc, #592]	; (8003ef8 <_dtoa_r+0x2e8>)
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	9801      	ldr	r0, [sp, #4]
 8003cb0:	b011      	add	sp, #68	; 0x44
 8003cb2:	ecbd 8b02 	vpop	{d8}
 8003cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cba:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <_dtoa_r+0x2e4>)
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	3303      	adds	r3, #3
 8003cc0:	e7f3      	b.n	8003caa <_dtoa_r+0x9a>
 8003cc2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8003cc6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	d10b      	bne.n	8003ce8 <_dtoa_r+0xd8>
 8003cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 84d9 	beq.w	8004690 <_dtoa_r+0xa80>
 8003cde:	4887      	ldr	r0, [pc, #540]	; (8003efc <_dtoa_r+0x2ec>)
 8003ce0:	6018      	str	r0, [r3, #0]
 8003ce2:	1e43      	subs	r3, r0, #1
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	e7e2      	b.n	8003cae <_dtoa_r+0x9e>
 8003ce8:	a90f      	add	r1, sp, #60	; 0x3c
 8003cea:	aa0e      	add	r2, sp, #56	; 0x38
 8003cec:	4630      	mov	r0, r6
 8003cee:	eeb0 0b48 	vmov.f64	d0, d8
 8003cf2:	f001 f83d 	bl	8004d70 <__d2b>
 8003cf6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003cfe:	2900      	cmp	r1, #0
 8003d00:	d046      	beq.n	8003d90 <_dtoa_r+0x180>
 8003d02:	ee18 4a90 	vmov	r4, s17
 8003d06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003d0a:	ec53 2b18 	vmov	r2, r3, d8
 8003d0e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8003d12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003d1a:	2400      	movs	r4, #0
 8003d1c:	ec43 2b16 	vmov	d6, r2, r3
 8003d20:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8003d24:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8003ed0 <_dtoa_r+0x2c0>
 8003d28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003d2c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003ed8 <_dtoa_r+0x2c8>
 8003d30:	eea7 6b05 	vfma.f64	d6, d7, d5
 8003d34:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8003ee0 <_dtoa_r+0x2d0>
 8003d38:	ee07 1a90 	vmov	s15, r1
 8003d3c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8003d40:	eeb0 7b46 	vmov.f64	d7, d6
 8003d44:	eea4 7b05 	vfma.f64	d7, d4, d5
 8003d48:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8003d4c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d54:	ee16 ba90 	vmov	fp, s13
 8003d58:	940a      	str	r4, [sp, #40]	; 0x28
 8003d5a:	d508      	bpl.n	8003d6e <_dtoa_r+0x15e>
 8003d5c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003d60:	eeb4 6b47 	vcmp.f64	d6, d7
 8003d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d68:	bf18      	it	ne
 8003d6a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8003d6e:	f1bb 0f16 	cmp.w	fp, #22
 8003d72:	d82f      	bhi.n	8003dd4 <_dtoa_r+0x1c4>
 8003d74:	4b62      	ldr	r3, [pc, #392]	; (8003f00 <_dtoa_r+0x2f0>)
 8003d76:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003d7a:	ed93 7b00 	vldr	d7, [r3]
 8003d7e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8003d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d86:	d501      	bpl.n	8003d8c <_dtoa_r+0x17c>
 8003d88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e022      	b.n	8003dd6 <_dtoa_r+0x1c6>
 8003d90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003d92:	4401      	add	r1, r0
 8003d94:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	bfc1      	itttt	gt
 8003d9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003da0:	fa04 f303 	lslgt.w	r3, r4, r3
 8003da4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8003da8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8003dac:	bfd6      	itet	le
 8003dae:	f1c3 0320 	rsble	r3, r3, #32
 8003db2:	ea43 0808 	orrgt.w	r8, r3, r8
 8003db6:	fa08 f803 	lslle.w	r8, r8, r3
 8003dba:	ee07 8a90 	vmov	s15, r8
 8003dbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003dc2:	3901      	subs	r1, #1
 8003dc4:	ee17 4a90 	vmov	r4, s15
 8003dc8:	ec53 2b17 	vmov	r2, r3, d7
 8003dcc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8003dd0:	2401      	movs	r4, #1
 8003dd2:	e7a3      	b.n	8003d1c <_dtoa_r+0x10c>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dd8:	1a43      	subs	r3, r0, r1
 8003dda:	1e5a      	subs	r2, r3, #1
 8003ddc:	bf45      	ittet	mi
 8003dde:	f1c3 0301 	rsbmi	r3, r3, #1
 8003de2:	9304      	strmi	r3, [sp, #16]
 8003de4:	2300      	movpl	r3, #0
 8003de6:	2300      	movmi	r3, #0
 8003de8:	9205      	str	r2, [sp, #20]
 8003dea:	bf54      	ite	pl
 8003dec:	9304      	strpl	r3, [sp, #16]
 8003dee:	9305      	strmi	r3, [sp, #20]
 8003df0:	f1bb 0f00 	cmp.w	fp, #0
 8003df4:	db18      	blt.n	8003e28 <_dtoa_r+0x218>
 8003df6:	9b05      	ldr	r3, [sp, #20]
 8003df8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8003dfc:	445b      	add	r3, fp
 8003dfe:	9305      	str	r3, [sp, #20]
 8003e00:	2300      	movs	r3, #0
 8003e02:	9a06      	ldr	r2, [sp, #24]
 8003e04:	2a09      	cmp	r2, #9
 8003e06:	d849      	bhi.n	8003e9c <_dtoa_r+0x28c>
 8003e08:	2a05      	cmp	r2, #5
 8003e0a:	bfc4      	itt	gt
 8003e0c:	3a04      	subgt	r2, #4
 8003e0e:	9206      	strgt	r2, [sp, #24]
 8003e10:	9a06      	ldr	r2, [sp, #24]
 8003e12:	f1a2 0202 	sub.w	r2, r2, #2
 8003e16:	bfcc      	ite	gt
 8003e18:	2400      	movgt	r4, #0
 8003e1a:	2401      	movle	r4, #1
 8003e1c:	2a03      	cmp	r2, #3
 8003e1e:	d848      	bhi.n	8003eb2 <_dtoa_r+0x2a2>
 8003e20:	e8df f002 	tbb	[pc, r2]
 8003e24:	3a2c2e0b 	.word	0x3a2c2e0b
 8003e28:	9b04      	ldr	r3, [sp, #16]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	eba3 030b 	sub.w	r3, r3, fp
 8003e30:	9304      	str	r3, [sp, #16]
 8003e32:	9209      	str	r2, [sp, #36]	; 0x24
 8003e34:	f1cb 0300 	rsb	r3, fp, #0
 8003e38:	e7e3      	b.n	8003e02 <_dtoa_r+0x1f2>
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	9207      	str	r2, [sp, #28]
 8003e3e:	9a08      	ldr	r2, [sp, #32]
 8003e40:	2a00      	cmp	r2, #0
 8003e42:	dc39      	bgt.n	8003eb8 <_dtoa_r+0x2a8>
 8003e44:	f04f 0a01 	mov.w	sl, #1
 8003e48:	46d1      	mov	r9, sl
 8003e4a:	4652      	mov	r2, sl
 8003e4c:	f8cd a020 	str.w	sl, [sp, #32]
 8003e50:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8003e52:	2100      	movs	r1, #0
 8003e54:	6079      	str	r1, [r7, #4]
 8003e56:	2004      	movs	r0, #4
 8003e58:	f100 0c14 	add.w	ip, r0, #20
 8003e5c:	4594      	cmp	ip, r2
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	d92f      	bls.n	8003ec2 <_dtoa_r+0x2b2>
 8003e62:	4630      	mov	r0, r6
 8003e64:	930d      	str	r3, [sp, #52]	; 0x34
 8003e66:	f000 fc5b 	bl	8004720 <_Balloc>
 8003e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e6c:	9001      	str	r0, [sp, #4]
 8003e6e:	4602      	mov	r2, r0
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d149      	bne.n	8003f08 <_dtoa_r+0x2f8>
 8003e74:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <_dtoa_r+0x2f4>)
 8003e76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003e7a:	e6e1      	b.n	8003c40 <_dtoa_r+0x30>
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	e7dd      	b.n	8003e3c <_dtoa_r+0x22c>
 8003e80:	2200      	movs	r2, #0
 8003e82:	9207      	str	r2, [sp, #28]
 8003e84:	9a08      	ldr	r2, [sp, #32]
 8003e86:	eb0b 0a02 	add.w	sl, fp, r2
 8003e8a:	f10a 0901 	add.w	r9, sl, #1
 8003e8e:	464a      	mov	r2, r9
 8003e90:	2a01      	cmp	r2, #1
 8003e92:	bfb8      	it	lt
 8003e94:	2201      	movlt	r2, #1
 8003e96:	e7db      	b.n	8003e50 <_dtoa_r+0x240>
 8003e98:	2201      	movs	r2, #1
 8003e9a:	e7f2      	b.n	8003e82 <_dtoa_r+0x272>
 8003e9c:	2401      	movs	r4, #1
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8003ea4:	f04f 3aff 	mov.w	sl, #4294967295
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	46d1      	mov	r9, sl
 8003eac:	2212      	movs	r2, #18
 8003eae:	9108      	str	r1, [sp, #32]
 8003eb0:	e7ce      	b.n	8003e50 <_dtoa_r+0x240>
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	9207      	str	r2, [sp, #28]
 8003eb6:	e7f5      	b.n	8003ea4 <_dtoa_r+0x294>
 8003eb8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003ebc:	46d1      	mov	r9, sl
 8003ebe:	4652      	mov	r2, sl
 8003ec0:	e7c6      	b.n	8003e50 <_dtoa_r+0x240>
 8003ec2:	3101      	adds	r1, #1
 8003ec4:	6079      	str	r1, [r7, #4]
 8003ec6:	0040      	lsls	r0, r0, #1
 8003ec8:	e7c6      	b.n	8003e58 <_dtoa_r+0x248>
 8003eca:	bf00      	nop
 8003ecc:	f3af 8000 	nop.w
 8003ed0:	636f4361 	.word	0x636f4361
 8003ed4:	3fd287a7 	.word	0x3fd287a7
 8003ed8:	8b60c8b3 	.word	0x8b60c8b3
 8003edc:	3fc68a28 	.word	0x3fc68a28
 8003ee0:	509f79fb 	.word	0x509f79fb
 8003ee4:	3fd34413 	.word	0x3fd34413
 8003ee8:	08005c65 	.word	0x08005c65
 8003eec:	08005c7c 	.word	0x08005c7c
 8003ef0:	7ff00000 	.word	0x7ff00000
 8003ef4:	08005c61 	.word	0x08005c61
 8003ef8:	08005c58 	.word	0x08005c58
 8003efc:	08005c35 	.word	0x08005c35
 8003f00:	08005d70 	.word	0x08005d70
 8003f04:	08005cd7 	.word	0x08005cd7
 8003f08:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003f0a:	9901      	ldr	r1, [sp, #4]
 8003f0c:	6011      	str	r1, [r2, #0]
 8003f0e:	f1b9 0f0e 	cmp.w	r9, #14
 8003f12:	d86c      	bhi.n	8003fee <_dtoa_r+0x3de>
 8003f14:	2c00      	cmp	r4, #0
 8003f16:	d06a      	beq.n	8003fee <_dtoa_r+0x3de>
 8003f18:	f1bb 0f00 	cmp.w	fp, #0
 8003f1c:	f340 80a0 	ble.w	8004060 <_dtoa_r+0x450>
 8003f20:	49c1      	ldr	r1, [pc, #772]	; (8004228 <_dtoa_r+0x618>)
 8003f22:	f00b 020f 	and.w	r2, fp, #15
 8003f26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8003f2a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003f2e:	ed92 7b00 	vldr	d7, [r2]
 8003f32:	ea4f 112b 	mov.w	r1, fp, asr #4
 8003f36:	f000 8087 	beq.w	8004048 <_dtoa_r+0x438>
 8003f3a:	4abc      	ldr	r2, [pc, #752]	; (800422c <_dtoa_r+0x61c>)
 8003f3c:	ed92 6b08 	vldr	d6, [r2, #32]
 8003f40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8003f44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003f48:	f001 010f 	and.w	r1, r1, #15
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	48b7      	ldr	r0, [pc, #732]	; (800422c <_dtoa_r+0x61c>)
 8003f50:	2900      	cmp	r1, #0
 8003f52:	d17b      	bne.n	800404c <_dtoa_r+0x43c>
 8003f54:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003f58:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003f5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003f60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f62:	2900      	cmp	r1, #0
 8003f64:	f000 80a2 	beq.w	80040ac <_dtoa_r+0x49c>
 8003f68:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003f6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f78:	f140 8098 	bpl.w	80040ac <_dtoa_r+0x49c>
 8003f7c:	f1b9 0f00 	cmp.w	r9, #0
 8003f80:	f000 8094 	beq.w	80040ac <_dtoa_r+0x49c>
 8003f84:	f1ba 0f00 	cmp.w	sl, #0
 8003f88:	dd2f      	ble.n	8003fea <_dtoa_r+0x3da>
 8003f8a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003f8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003f92:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003f96:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003f9a:	3201      	adds	r2, #1
 8003f9c:	4650      	mov	r0, sl
 8003f9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003fa2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8003fa6:	ee07 2a90 	vmov	s15, r2
 8003faa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003fae:	eea7 5b06 	vfma.f64	d5, d7, d6
 8003fb2:	ee15 4a90 	vmov	r4, s11
 8003fb6:	ec52 1b15 	vmov	r1, r2, d5
 8003fba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	d177      	bne.n	80040b2 <_dtoa_r+0x4a2>
 8003fc2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003fc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003fca:	ec42 1b17 	vmov	d7, r1, r2
 8003fce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd6:	f300 8263 	bgt.w	80044a0 <_dtoa_r+0x890>
 8003fda:	eeb1 7b47 	vneg.f64	d7, d7
 8003fde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe6:	f100 8258 	bmi.w	800449a <_dtoa_r+0x88a>
 8003fea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003fee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ff0:	2a00      	cmp	r2, #0
 8003ff2:	f2c0 811d 	blt.w	8004230 <_dtoa_r+0x620>
 8003ff6:	f1bb 0f0e 	cmp.w	fp, #14
 8003ffa:	f300 8119 	bgt.w	8004230 <_dtoa_r+0x620>
 8003ffe:	4b8a      	ldr	r3, [pc, #552]	; (8004228 <_dtoa_r+0x618>)
 8004000:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004004:	ed93 6b00 	vldr	d6, [r3]
 8004008:	9b08      	ldr	r3, [sp, #32]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f280 80b7 	bge.w	800417e <_dtoa_r+0x56e>
 8004010:	f1b9 0f00 	cmp.w	r9, #0
 8004014:	f300 80b3 	bgt.w	800417e <_dtoa_r+0x56e>
 8004018:	f040 823f 	bne.w	800449a <_dtoa_r+0x88a>
 800401c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004020:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004024:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004028:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800402c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004030:	464c      	mov	r4, r9
 8004032:	464f      	mov	r7, r9
 8004034:	f280 8215 	bge.w	8004462 <_dtoa_r+0x852>
 8004038:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800403c:	2331      	movs	r3, #49	; 0x31
 800403e:	f808 3b01 	strb.w	r3, [r8], #1
 8004042:	f10b 0b01 	add.w	fp, fp, #1
 8004046:	e211      	b.n	800446c <_dtoa_r+0x85c>
 8004048:	2202      	movs	r2, #2
 800404a:	e780      	b.n	8003f4e <_dtoa_r+0x33e>
 800404c:	07cc      	lsls	r4, r1, #31
 800404e:	d504      	bpl.n	800405a <_dtoa_r+0x44a>
 8004050:	ed90 6b00 	vldr	d6, [r0]
 8004054:	3201      	adds	r2, #1
 8004056:	ee27 7b06 	vmul.f64	d7, d7, d6
 800405a:	1049      	asrs	r1, r1, #1
 800405c:	3008      	adds	r0, #8
 800405e:	e777      	b.n	8003f50 <_dtoa_r+0x340>
 8004060:	d022      	beq.n	80040a8 <_dtoa_r+0x498>
 8004062:	f1cb 0100 	rsb	r1, fp, #0
 8004066:	4a70      	ldr	r2, [pc, #448]	; (8004228 <_dtoa_r+0x618>)
 8004068:	f001 000f 	and.w	r0, r1, #15
 800406c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004070:	ed92 7b00 	vldr	d7, [r2]
 8004074:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004078:	ed8d 7b02 	vstr	d7, [sp, #8]
 800407c:	486b      	ldr	r0, [pc, #428]	; (800422c <_dtoa_r+0x61c>)
 800407e:	1109      	asrs	r1, r1, #4
 8004080:	2400      	movs	r4, #0
 8004082:	2202      	movs	r2, #2
 8004084:	b929      	cbnz	r1, 8004092 <_dtoa_r+0x482>
 8004086:	2c00      	cmp	r4, #0
 8004088:	f43f af6a 	beq.w	8003f60 <_dtoa_r+0x350>
 800408c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004090:	e766      	b.n	8003f60 <_dtoa_r+0x350>
 8004092:	07cf      	lsls	r7, r1, #31
 8004094:	d505      	bpl.n	80040a2 <_dtoa_r+0x492>
 8004096:	ed90 6b00 	vldr	d6, [r0]
 800409a:	3201      	adds	r2, #1
 800409c:	2401      	movs	r4, #1
 800409e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040a2:	1049      	asrs	r1, r1, #1
 80040a4:	3008      	adds	r0, #8
 80040a6:	e7ed      	b.n	8004084 <_dtoa_r+0x474>
 80040a8:	2202      	movs	r2, #2
 80040aa:	e759      	b.n	8003f60 <_dtoa_r+0x350>
 80040ac:	465f      	mov	r7, fp
 80040ae:	4648      	mov	r0, r9
 80040b0:	e775      	b.n	8003f9e <_dtoa_r+0x38e>
 80040b2:	ec42 1b17 	vmov	d7, r1, r2
 80040b6:	4a5c      	ldr	r2, [pc, #368]	; (8004228 <_dtoa_r+0x618>)
 80040b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80040bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80040c0:	9a01      	ldr	r2, [sp, #4]
 80040c2:	1814      	adds	r4, r2, r0
 80040c4:	9a07      	ldr	r2, [sp, #28]
 80040c6:	b352      	cbz	r2, 800411e <_dtoa_r+0x50e>
 80040c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80040cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80040d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80040d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80040d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80040dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80040e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80040e4:	ee14 2a90 	vmov	r2, s9
 80040e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80040ec:	3230      	adds	r2, #48	; 0x30
 80040ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80040f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80040f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fa:	f808 2b01 	strb.w	r2, [r8], #1
 80040fe:	d439      	bmi.n	8004174 <_dtoa_r+0x564>
 8004100:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004104:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410c:	d472      	bmi.n	80041f4 <_dtoa_r+0x5e4>
 800410e:	45a0      	cmp	r8, r4
 8004110:	f43f af6b 	beq.w	8003fea <_dtoa_r+0x3da>
 8004114:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004118:	ee26 6b03 	vmul.f64	d6, d6, d3
 800411c:	e7e0      	b.n	80040e0 <_dtoa_r+0x4d0>
 800411e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004122:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004126:	4621      	mov	r1, r4
 8004128:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800412c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004130:	ee14 2a90 	vmov	r2, s9
 8004134:	3230      	adds	r2, #48	; 0x30
 8004136:	f808 2b01 	strb.w	r2, [r8], #1
 800413a:	45a0      	cmp	r8, r4
 800413c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004140:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004144:	d118      	bne.n	8004178 <_dtoa_r+0x568>
 8004146:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800414a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800414e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004156:	dc4d      	bgt.n	80041f4 <_dtoa_r+0x5e4>
 8004158:	ee35 7b47 	vsub.f64	d7, d5, d7
 800415c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004164:	f57f af41 	bpl.w	8003fea <_dtoa_r+0x3da>
 8004168:	4688      	mov	r8, r1
 800416a:	3901      	subs	r1, #1
 800416c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004170:	2b30      	cmp	r3, #48	; 0x30
 8004172:	d0f9      	beq.n	8004168 <_dtoa_r+0x558>
 8004174:	46bb      	mov	fp, r7
 8004176:	e02a      	b.n	80041ce <_dtoa_r+0x5be>
 8004178:	ee26 6b03 	vmul.f64	d6, d6, d3
 800417c:	e7d6      	b.n	800412c <_dtoa_r+0x51c>
 800417e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004182:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004186:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800418a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800418e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004192:	ee15 3a10 	vmov	r3, s10
 8004196:	3330      	adds	r3, #48	; 0x30
 8004198:	f808 3b01 	strb.w	r3, [r8], #1
 800419c:	9b01      	ldr	r3, [sp, #4]
 800419e:	eba8 0303 	sub.w	r3, r8, r3
 80041a2:	4599      	cmp	r9, r3
 80041a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80041a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80041ac:	d133      	bne.n	8004216 <_dtoa_r+0x606>
 80041ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80041b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80041b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ba:	dc1a      	bgt.n	80041f2 <_dtoa_r+0x5e2>
 80041bc:	eeb4 7b46 	vcmp.f64	d7, d6
 80041c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c4:	d103      	bne.n	80041ce <_dtoa_r+0x5be>
 80041c6:	ee15 3a10 	vmov	r3, s10
 80041ca:	07d9      	lsls	r1, r3, #31
 80041cc:	d411      	bmi.n	80041f2 <_dtoa_r+0x5e2>
 80041ce:	4629      	mov	r1, r5
 80041d0:	4630      	mov	r0, r6
 80041d2:	f000 fae5 	bl	80047a0 <_Bfree>
 80041d6:	2300      	movs	r3, #0
 80041d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041da:	f888 3000 	strb.w	r3, [r8]
 80041de:	f10b 0301 	add.w	r3, fp, #1
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f43f ad61 	beq.w	8003cae <_dtoa_r+0x9e>
 80041ec:	f8c3 8000 	str.w	r8, [r3]
 80041f0:	e55d      	b.n	8003cae <_dtoa_r+0x9e>
 80041f2:	465f      	mov	r7, fp
 80041f4:	4643      	mov	r3, r8
 80041f6:	4698      	mov	r8, r3
 80041f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041fc:	2a39      	cmp	r2, #57	; 0x39
 80041fe:	d106      	bne.n	800420e <_dtoa_r+0x5fe>
 8004200:	9a01      	ldr	r2, [sp, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d1f7      	bne.n	80041f6 <_dtoa_r+0x5e6>
 8004206:	9901      	ldr	r1, [sp, #4]
 8004208:	2230      	movs	r2, #48	; 0x30
 800420a:	3701      	adds	r7, #1
 800420c:	700a      	strb	r2, [r1, #0]
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	3201      	adds	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	e7ae      	b.n	8004174 <_dtoa_r+0x564>
 8004216:	ee27 7b04 	vmul.f64	d7, d7, d4
 800421a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800421e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004222:	d1b2      	bne.n	800418a <_dtoa_r+0x57a>
 8004224:	e7d3      	b.n	80041ce <_dtoa_r+0x5be>
 8004226:	bf00      	nop
 8004228:	08005d70 	.word	0x08005d70
 800422c:	08005d48 	.word	0x08005d48
 8004230:	9907      	ldr	r1, [sp, #28]
 8004232:	2900      	cmp	r1, #0
 8004234:	f000 80d0 	beq.w	80043d8 <_dtoa_r+0x7c8>
 8004238:	9906      	ldr	r1, [sp, #24]
 800423a:	2901      	cmp	r1, #1
 800423c:	f300 80b4 	bgt.w	80043a8 <_dtoa_r+0x798>
 8004240:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004242:	2900      	cmp	r1, #0
 8004244:	f000 80ac 	beq.w	80043a0 <_dtoa_r+0x790>
 8004248:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800424c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004250:	461c      	mov	r4, r3
 8004252:	930a      	str	r3, [sp, #40]	; 0x28
 8004254:	9b04      	ldr	r3, [sp, #16]
 8004256:	4413      	add	r3, r2
 8004258:	9304      	str	r3, [sp, #16]
 800425a:	9b05      	ldr	r3, [sp, #20]
 800425c:	2101      	movs	r1, #1
 800425e:	4413      	add	r3, r2
 8004260:	4630      	mov	r0, r6
 8004262:	9305      	str	r3, [sp, #20]
 8004264:	f000 fb54 	bl	8004910 <__i2b>
 8004268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800426a:	4607      	mov	r7, r0
 800426c:	f1b8 0f00 	cmp.w	r8, #0
 8004270:	dd0d      	ble.n	800428e <_dtoa_r+0x67e>
 8004272:	9a05      	ldr	r2, [sp, #20]
 8004274:	2a00      	cmp	r2, #0
 8004276:	dd0a      	ble.n	800428e <_dtoa_r+0x67e>
 8004278:	4542      	cmp	r2, r8
 800427a:	9904      	ldr	r1, [sp, #16]
 800427c:	bfa8      	it	ge
 800427e:	4642      	movge	r2, r8
 8004280:	1a89      	subs	r1, r1, r2
 8004282:	9104      	str	r1, [sp, #16]
 8004284:	9905      	ldr	r1, [sp, #20]
 8004286:	eba8 0802 	sub.w	r8, r8, r2
 800428a:	1a8a      	subs	r2, r1, r2
 800428c:	9205      	str	r2, [sp, #20]
 800428e:	b303      	cbz	r3, 80042d2 <_dtoa_r+0x6c2>
 8004290:	9a07      	ldr	r2, [sp, #28]
 8004292:	2a00      	cmp	r2, #0
 8004294:	f000 80a5 	beq.w	80043e2 <_dtoa_r+0x7d2>
 8004298:	2c00      	cmp	r4, #0
 800429a:	dd13      	ble.n	80042c4 <_dtoa_r+0x6b4>
 800429c:	4639      	mov	r1, r7
 800429e:	4622      	mov	r2, r4
 80042a0:	4630      	mov	r0, r6
 80042a2:	930d      	str	r3, [sp, #52]	; 0x34
 80042a4:	f000 fbf4 	bl	8004a90 <__pow5mult>
 80042a8:	462a      	mov	r2, r5
 80042aa:	4601      	mov	r1, r0
 80042ac:	4607      	mov	r7, r0
 80042ae:	4630      	mov	r0, r6
 80042b0:	f000 fb44 	bl	800493c <__multiply>
 80042b4:	4629      	mov	r1, r5
 80042b6:	900a      	str	r0, [sp, #40]	; 0x28
 80042b8:	4630      	mov	r0, r6
 80042ba:	f000 fa71 	bl	80047a0 <_Bfree>
 80042be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042c2:	4615      	mov	r5, r2
 80042c4:	1b1a      	subs	r2, r3, r4
 80042c6:	d004      	beq.n	80042d2 <_dtoa_r+0x6c2>
 80042c8:	4629      	mov	r1, r5
 80042ca:	4630      	mov	r0, r6
 80042cc:	f000 fbe0 	bl	8004a90 <__pow5mult>
 80042d0:	4605      	mov	r5, r0
 80042d2:	2101      	movs	r1, #1
 80042d4:	4630      	mov	r0, r6
 80042d6:	f000 fb1b 	bl	8004910 <__i2b>
 80042da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	4604      	mov	r4, r0
 80042e0:	f340 8081 	ble.w	80043e6 <_dtoa_r+0x7d6>
 80042e4:	461a      	mov	r2, r3
 80042e6:	4601      	mov	r1, r0
 80042e8:	4630      	mov	r0, r6
 80042ea:	f000 fbd1 	bl	8004a90 <__pow5mult>
 80042ee:	9b06      	ldr	r3, [sp, #24]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	4604      	mov	r4, r0
 80042f4:	dd7a      	ble.n	80043ec <_dtoa_r+0x7dc>
 80042f6:	2300      	movs	r3, #0
 80042f8:	930a      	str	r3, [sp, #40]	; 0x28
 80042fa:	6922      	ldr	r2, [r4, #16]
 80042fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004300:	6910      	ldr	r0, [r2, #16]
 8004302:	f000 fab5 	bl	8004870 <__hi0bits>
 8004306:	f1c0 0020 	rsb	r0, r0, #32
 800430a:	9b05      	ldr	r3, [sp, #20]
 800430c:	4418      	add	r0, r3
 800430e:	f010 001f 	ands.w	r0, r0, #31
 8004312:	f000 808c 	beq.w	800442e <_dtoa_r+0x81e>
 8004316:	f1c0 0220 	rsb	r2, r0, #32
 800431a:	2a04      	cmp	r2, #4
 800431c:	f340 8085 	ble.w	800442a <_dtoa_r+0x81a>
 8004320:	f1c0 001c 	rsb	r0, r0, #28
 8004324:	9b04      	ldr	r3, [sp, #16]
 8004326:	4403      	add	r3, r0
 8004328:	9304      	str	r3, [sp, #16]
 800432a:	9b05      	ldr	r3, [sp, #20]
 800432c:	4403      	add	r3, r0
 800432e:	4480      	add	r8, r0
 8004330:	9305      	str	r3, [sp, #20]
 8004332:	9b04      	ldr	r3, [sp, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	dd05      	ble.n	8004344 <_dtoa_r+0x734>
 8004338:	4629      	mov	r1, r5
 800433a:	461a      	mov	r2, r3
 800433c:	4630      	mov	r0, r6
 800433e:	f000 fc01 	bl	8004b44 <__lshift>
 8004342:	4605      	mov	r5, r0
 8004344:	9b05      	ldr	r3, [sp, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	dd05      	ble.n	8004356 <_dtoa_r+0x746>
 800434a:	4621      	mov	r1, r4
 800434c:	461a      	mov	r2, r3
 800434e:	4630      	mov	r0, r6
 8004350:	f000 fbf8 	bl	8004b44 <__lshift>
 8004354:	4604      	mov	r4, r0
 8004356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d06a      	beq.n	8004432 <_dtoa_r+0x822>
 800435c:	4621      	mov	r1, r4
 800435e:	4628      	mov	r0, r5
 8004360:	f000 fc60 	bl	8004c24 <__mcmp>
 8004364:	2800      	cmp	r0, #0
 8004366:	da64      	bge.n	8004432 <_dtoa_r+0x822>
 8004368:	2300      	movs	r3, #0
 800436a:	4629      	mov	r1, r5
 800436c:	220a      	movs	r2, #10
 800436e:	4630      	mov	r0, r6
 8004370:	f000 fa38 	bl	80047e4 <__multadd>
 8004374:	9b07      	ldr	r3, [sp, #28]
 8004376:	f10b 3bff 	add.w	fp, fp, #4294967295
 800437a:	4605      	mov	r5, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8191 	beq.w	80046a4 <_dtoa_r+0xa94>
 8004382:	4639      	mov	r1, r7
 8004384:	2300      	movs	r3, #0
 8004386:	220a      	movs	r2, #10
 8004388:	4630      	mov	r0, r6
 800438a:	f000 fa2b 	bl	80047e4 <__multadd>
 800438e:	f1ba 0f00 	cmp.w	sl, #0
 8004392:	4607      	mov	r7, r0
 8004394:	f300 808d 	bgt.w	80044b2 <_dtoa_r+0x8a2>
 8004398:	9b06      	ldr	r3, [sp, #24]
 800439a:	2b02      	cmp	r3, #2
 800439c:	dc50      	bgt.n	8004440 <_dtoa_r+0x830>
 800439e:	e088      	b.n	80044b2 <_dtoa_r+0x8a2>
 80043a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80043a6:	e751      	b.n	800424c <_dtoa_r+0x63c>
 80043a8:	f109 34ff 	add.w	r4, r9, #4294967295
 80043ac:	42a3      	cmp	r3, r4
 80043ae:	bfbf      	itttt	lt
 80043b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80043b2:	1ae3      	sublt	r3, r4, r3
 80043b4:	18d2      	addlt	r2, r2, r3
 80043b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80043b8:	bfb6      	itet	lt
 80043ba:	4623      	movlt	r3, r4
 80043bc:	1b1c      	subge	r4, r3, r4
 80043be:	2400      	movlt	r4, #0
 80043c0:	f1b9 0f00 	cmp.w	r9, #0
 80043c4:	bfb5      	itete	lt
 80043c6:	9a04      	ldrlt	r2, [sp, #16]
 80043c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80043cc:	eba2 0809 	sublt.w	r8, r2, r9
 80043d0:	464a      	movge	r2, r9
 80043d2:	bfb8      	it	lt
 80043d4:	2200      	movlt	r2, #0
 80043d6:	e73c      	b.n	8004252 <_dtoa_r+0x642>
 80043d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80043dc:	9f07      	ldr	r7, [sp, #28]
 80043de:	461c      	mov	r4, r3
 80043e0:	e744      	b.n	800426c <_dtoa_r+0x65c>
 80043e2:	461a      	mov	r2, r3
 80043e4:	e770      	b.n	80042c8 <_dtoa_r+0x6b8>
 80043e6:	9b06      	ldr	r3, [sp, #24]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	dc18      	bgt.n	800441e <_dtoa_r+0x80e>
 80043ec:	9b02      	ldr	r3, [sp, #8]
 80043ee:	b9b3      	cbnz	r3, 800441e <_dtoa_r+0x80e>
 80043f0:	9b03      	ldr	r3, [sp, #12]
 80043f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80043f6:	b9a2      	cbnz	r2, 8004422 <_dtoa_r+0x812>
 80043f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043fc:	0d12      	lsrs	r2, r2, #20
 80043fe:	0512      	lsls	r2, r2, #20
 8004400:	b18a      	cbz	r2, 8004426 <_dtoa_r+0x816>
 8004402:	9b04      	ldr	r3, [sp, #16]
 8004404:	3301      	adds	r3, #1
 8004406:	9304      	str	r3, [sp, #16]
 8004408:	9b05      	ldr	r3, [sp, #20]
 800440a:	3301      	adds	r3, #1
 800440c:	9305      	str	r3, [sp, #20]
 800440e:	2301      	movs	r3, #1
 8004410:	930a      	str	r3, [sp, #40]	; 0x28
 8004412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	f47f af70 	bne.w	80042fa <_dtoa_r+0x6ea>
 800441a:	2001      	movs	r0, #1
 800441c:	e775      	b.n	800430a <_dtoa_r+0x6fa>
 800441e:	2300      	movs	r3, #0
 8004420:	e7f6      	b.n	8004410 <_dtoa_r+0x800>
 8004422:	9b02      	ldr	r3, [sp, #8]
 8004424:	e7f4      	b.n	8004410 <_dtoa_r+0x800>
 8004426:	920a      	str	r2, [sp, #40]	; 0x28
 8004428:	e7f3      	b.n	8004412 <_dtoa_r+0x802>
 800442a:	d082      	beq.n	8004332 <_dtoa_r+0x722>
 800442c:	4610      	mov	r0, r2
 800442e:	301c      	adds	r0, #28
 8004430:	e778      	b.n	8004324 <_dtoa_r+0x714>
 8004432:	f1b9 0f00 	cmp.w	r9, #0
 8004436:	dc37      	bgt.n	80044a8 <_dtoa_r+0x898>
 8004438:	9b06      	ldr	r3, [sp, #24]
 800443a:	2b02      	cmp	r3, #2
 800443c:	dd34      	ble.n	80044a8 <_dtoa_r+0x898>
 800443e:	46ca      	mov	sl, r9
 8004440:	f1ba 0f00 	cmp.w	sl, #0
 8004444:	d10d      	bne.n	8004462 <_dtoa_r+0x852>
 8004446:	4621      	mov	r1, r4
 8004448:	4653      	mov	r3, sl
 800444a:	2205      	movs	r2, #5
 800444c:	4630      	mov	r0, r6
 800444e:	f000 f9c9 	bl	80047e4 <__multadd>
 8004452:	4601      	mov	r1, r0
 8004454:	4604      	mov	r4, r0
 8004456:	4628      	mov	r0, r5
 8004458:	f000 fbe4 	bl	8004c24 <__mcmp>
 800445c:	2800      	cmp	r0, #0
 800445e:	f73f adeb 	bgt.w	8004038 <_dtoa_r+0x428>
 8004462:	9b08      	ldr	r3, [sp, #32]
 8004464:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004468:	ea6f 0b03 	mvn.w	fp, r3
 800446c:	f04f 0900 	mov.w	r9, #0
 8004470:	4621      	mov	r1, r4
 8004472:	4630      	mov	r0, r6
 8004474:	f000 f994 	bl	80047a0 <_Bfree>
 8004478:	2f00      	cmp	r7, #0
 800447a:	f43f aea8 	beq.w	80041ce <_dtoa_r+0x5be>
 800447e:	f1b9 0f00 	cmp.w	r9, #0
 8004482:	d005      	beq.n	8004490 <_dtoa_r+0x880>
 8004484:	45b9      	cmp	r9, r7
 8004486:	d003      	beq.n	8004490 <_dtoa_r+0x880>
 8004488:	4649      	mov	r1, r9
 800448a:	4630      	mov	r0, r6
 800448c:	f000 f988 	bl	80047a0 <_Bfree>
 8004490:	4639      	mov	r1, r7
 8004492:	4630      	mov	r0, r6
 8004494:	f000 f984 	bl	80047a0 <_Bfree>
 8004498:	e699      	b.n	80041ce <_dtoa_r+0x5be>
 800449a:	2400      	movs	r4, #0
 800449c:	4627      	mov	r7, r4
 800449e:	e7e0      	b.n	8004462 <_dtoa_r+0x852>
 80044a0:	46bb      	mov	fp, r7
 80044a2:	4604      	mov	r4, r0
 80044a4:	4607      	mov	r7, r0
 80044a6:	e5c7      	b.n	8004038 <_dtoa_r+0x428>
 80044a8:	9b07      	ldr	r3, [sp, #28]
 80044aa:	46ca      	mov	sl, r9
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8100 	beq.w	80046b2 <_dtoa_r+0xaa2>
 80044b2:	f1b8 0f00 	cmp.w	r8, #0
 80044b6:	dd05      	ble.n	80044c4 <_dtoa_r+0x8b4>
 80044b8:	4639      	mov	r1, r7
 80044ba:	4642      	mov	r2, r8
 80044bc:	4630      	mov	r0, r6
 80044be:	f000 fb41 	bl	8004b44 <__lshift>
 80044c2:	4607      	mov	r7, r0
 80044c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d05d      	beq.n	8004586 <_dtoa_r+0x976>
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4630      	mov	r0, r6
 80044ce:	f000 f927 	bl	8004720 <_Balloc>
 80044d2:	4680      	mov	r8, r0
 80044d4:	b928      	cbnz	r0, 80044e2 <_dtoa_r+0x8d2>
 80044d6:	4b82      	ldr	r3, [pc, #520]	; (80046e0 <_dtoa_r+0xad0>)
 80044d8:	4602      	mov	r2, r0
 80044da:	f240 21ea 	movw	r1, #746	; 0x2ea
 80044de:	f7ff bbaf 	b.w	8003c40 <_dtoa_r+0x30>
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	3202      	adds	r2, #2
 80044e6:	0092      	lsls	r2, r2, #2
 80044e8:	f107 010c 	add.w	r1, r7, #12
 80044ec:	300c      	adds	r0, #12
 80044ee:	f000 f909 	bl	8004704 <memcpy>
 80044f2:	2201      	movs	r2, #1
 80044f4:	4641      	mov	r1, r8
 80044f6:	4630      	mov	r0, r6
 80044f8:	f000 fb24 	bl	8004b44 <__lshift>
 80044fc:	9b01      	ldr	r3, [sp, #4]
 80044fe:	3301      	adds	r3, #1
 8004500:	9304      	str	r3, [sp, #16]
 8004502:	9b01      	ldr	r3, [sp, #4]
 8004504:	4453      	add	r3, sl
 8004506:	9308      	str	r3, [sp, #32]
 8004508:	9b02      	ldr	r3, [sp, #8]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	46b9      	mov	r9, r7
 8004510:	9307      	str	r3, [sp, #28]
 8004512:	4607      	mov	r7, r0
 8004514:	9b04      	ldr	r3, [sp, #16]
 8004516:	4621      	mov	r1, r4
 8004518:	3b01      	subs	r3, #1
 800451a:	4628      	mov	r0, r5
 800451c:	9302      	str	r3, [sp, #8]
 800451e:	f7ff fae9 	bl	8003af4 <quorem>
 8004522:	4603      	mov	r3, r0
 8004524:	3330      	adds	r3, #48	; 0x30
 8004526:	9005      	str	r0, [sp, #20]
 8004528:	4649      	mov	r1, r9
 800452a:	4628      	mov	r0, r5
 800452c:	9309      	str	r3, [sp, #36]	; 0x24
 800452e:	f000 fb79 	bl	8004c24 <__mcmp>
 8004532:	463a      	mov	r2, r7
 8004534:	4682      	mov	sl, r0
 8004536:	4621      	mov	r1, r4
 8004538:	4630      	mov	r0, r6
 800453a:	f000 fb8f 	bl	8004c5c <__mdiff>
 800453e:	68c2      	ldr	r2, [r0, #12]
 8004540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004542:	4680      	mov	r8, r0
 8004544:	bb0a      	cbnz	r2, 800458a <_dtoa_r+0x97a>
 8004546:	4601      	mov	r1, r0
 8004548:	4628      	mov	r0, r5
 800454a:	f000 fb6b 	bl	8004c24 <__mcmp>
 800454e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004550:	4602      	mov	r2, r0
 8004552:	4641      	mov	r1, r8
 8004554:	4630      	mov	r0, r6
 8004556:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800455a:	f000 f921 	bl	80047a0 <_Bfree>
 800455e:	9b06      	ldr	r3, [sp, #24]
 8004560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004562:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004566:	ea43 0102 	orr.w	r1, r3, r2
 800456a:	9b07      	ldr	r3, [sp, #28]
 800456c:	430b      	orrs	r3, r1
 800456e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004570:	d10d      	bne.n	800458e <_dtoa_r+0x97e>
 8004572:	2b39      	cmp	r3, #57	; 0x39
 8004574:	d029      	beq.n	80045ca <_dtoa_r+0x9ba>
 8004576:	f1ba 0f00 	cmp.w	sl, #0
 800457a:	dd01      	ble.n	8004580 <_dtoa_r+0x970>
 800457c:	9b05      	ldr	r3, [sp, #20]
 800457e:	3331      	adds	r3, #49	; 0x31
 8004580:	9a02      	ldr	r2, [sp, #8]
 8004582:	7013      	strb	r3, [r2, #0]
 8004584:	e774      	b.n	8004470 <_dtoa_r+0x860>
 8004586:	4638      	mov	r0, r7
 8004588:	e7b8      	b.n	80044fc <_dtoa_r+0x8ec>
 800458a:	2201      	movs	r2, #1
 800458c:	e7e1      	b.n	8004552 <_dtoa_r+0x942>
 800458e:	f1ba 0f00 	cmp.w	sl, #0
 8004592:	db06      	blt.n	80045a2 <_dtoa_r+0x992>
 8004594:	9906      	ldr	r1, [sp, #24]
 8004596:	ea41 0a0a 	orr.w	sl, r1, sl
 800459a:	9907      	ldr	r1, [sp, #28]
 800459c:	ea5a 0101 	orrs.w	r1, sl, r1
 80045a0:	d120      	bne.n	80045e4 <_dtoa_r+0x9d4>
 80045a2:	2a00      	cmp	r2, #0
 80045a4:	ddec      	ble.n	8004580 <_dtoa_r+0x970>
 80045a6:	4629      	mov	r1, r5
 80045a8:	2201      	movs	r2, #1
 80045aa:	4630      	mov	r0, r6
 80045ac:	9304      	str	r3, [sp, #16]
 80045ae:	f000 fac9 	bl	8004b44 <__lshift>
 80045b2:	4621      	mov	r1, r4
 80045b4:	4605      	mov	r5, r0
 80045b6:	f000 fb35 	bl	8004c24 <__mcmp>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	9b04      	ldr	r3, [sp, #16]
 80045be:	dc02      	bgt.n	80045c6 <_dtoa_r+0x9b6>
 80045c0:	d1de      	bne.n	8004580 <_dtoa_r+0x970>
 80045c2:	07da      	lsls	r2, r3, #31
 80045c4:	d5dc      	bpl.n	8004580 <_dtoa_r+0x970>
 80045c6:	2b39      	cmp	r3, #57	; 0x39
 80045c8:	d1d8      	bne.n	800457c <_dtoa_r+0x96c>
 80045ca:	9a02      	ldr	r2, [sp, #8]
 80045cc:	2339      	movs	r3, #57	; 0x39
 80045ce:	7013      	strb	r3, [r2, #0]
 80045d0:	4643      	mov	r3, r8
 80045d2:	4698      	mov	r8, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80045da:	2a39      	cmp	r2, #57	; 0x39
 80045dc:	d051      	beq.n	8004682 <_dtoa_r+0xa72>
 80045de:	3201      	adds	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e745      	b.n	8004470 <_dtoa_r+0x860>
 80045e4:	2a00      	cmp	r2, #0
 80045e6:	dd03      	ble.n	80045f0 <_dtoa_r+0x9e0>
 80045e8:	2b39      	cmp	r3, #57	; 0x39
 80045ea:	d0ee      	beq.n	80045ca <_dtoa_r+0x9ba>
 80045ec:	3301      	adds	r3, #1
 80045ee:	e7c7      	b.n	8004580 <_dtoa_r+0x970>
 80045f0:	9a04      	ldr	r2, [sp, #16]
 80045f2:	9908      	ldr	r1, [sp, #32]
 80045f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80045f8:	428a      	cmp	r2, r1
 80045fa:	d02b      	beq.n	8004654 <_dtoa_r+0xa44>
 80045fc:	4629      	mov	r1, r5
 80045fe:	2300      	movs	r3, #0
 8004600:	220a      	movs	r2, #10
 8004602:	4630      	mov	r0, r6
 8004604:	f000 f8ee 	bl	80047e4 <__multadd>
 8004608:	45b9      	cmp	r9, r7
 800460a:	4605      	mov	r5, r0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	f04f 020a 	mov.w	r2, #10
 8004614:	4649      	mov	r1, r9
 8004616:	4630      	mov	r0, r6
 8004618:	d107      	bne.n	800462a <_dtoa_r+0xa1a>
 800461a:	f000 f8e3 	bl	80047e4 <__multadd>
 800461e:	4681      	mov	r9, r0
 8004620:	4607      	mov	r7, r0
 8004622:	9b04      	ldr	r3, [sp, #16]
 8004624:	3301      	adds	r3, #1
 8004626:	9304      	str	r3, [sp, #16]
 8004628:	e774      	b.n	8004514 <_dtoa_r+0x904>
 800462a:	f000 f8db 	bl	80047e4 <__multadd>
 800462e:	4639      	mov	r1, r7
 8004630:	4681      	mov	r9, r0
 8004632:	2300      	movs	r3, #0
 8004634:	220a      	movs	r2, #10
 8004636:	4630      	mov	r0, r6
 8004638:	f000 f8d4 	bl	80047e4 <__multadd>
 800463c:	4607      	mov	r7, r0
 800463e:	e7f0      	b.n	8004622 <_dtoa_r+0xa12>
 8004640:	f1ba 0f00 	cmp.w	sl, #0
 8004644:	9a01      	ldr	r2, [sp, #4]
 8004646:	bfcc      	ite	gt
 8004648:	46d0      	movgt	r8, sl
 800464a:	f04f 0801 	movle.w	r8, #1
 800464e:	4490      	add	r8, r2
 8004650:	f04f 0900 	mov.w	r9, #0
 8004654:	4629      	mov	r1, r5
 8004656:	2201      	movs	r2, #1
 8004658:	4630      	mov	r0, r6
 800465a:	9302      	str	r3, [sp, #8]
 800465c:	f000 fa72 	bl	8004b44 <__lshift>
 8004660:	4621      	mov	r1, r4
 8004662:	4605      	mov	r5, r0
 8004664:	f000 fade 	bl	8004c24 <__mcmp>
 8004668:	2800      	cmp	r0, #0
 800466a:	dcb1      	bgt.n	80045d0 <_dtoa_r+0x9c0>
 800466c:	d102      	bne.n	8004674 <_dtoa_r+0xa64>
 800466e:	9b02      	ldr	r3, [sp, #8]
 8004670:	07db      	lsls	r3, r3, #31
 8004672:	d4ad      	bmi.n	80045d0 <_dtoa_r+0x9c0>
 8004674:	4643      	mov	r3, r8
 8004676:	4698      	mov	r8, r3
 8004678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800467c:	2a30      	cmp	r2, #48	; 0x30
 800467e:	d0fa      	beq.n	8004676 <_dtoa_r+0xa66>
 8004680:	e6f6      	b.n	8004470 <_dtoa_r+0x860>
 8004682:	9a01      	ldr	r2, [sp, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d1a4      	bne.n	80045d2 <_dtoa_r+0x9c2>
 8004688:	f10b 0b01 	add.w	fp, fp, #1
 800468c:	2331      	movs	r3, #49	; 0x31
 800468e:	e778      	b.n	8004582 <_dtoa_r+0x972>
 8004690:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <_dtoa_r+0xad4>)
 8004692:	f7ff bb27 	b.w	8003ce4 <_dtoa_r+0xd4>
 8004696:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004698:	2b00      	cmp	r3, #0
 800469a:	f47f ab03 	bne.w	8003ca4 <_dtoa_r+0x94>
 800469e:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <_dtoa_r+0xad8>)
 80046a0:	f7ff bb20 	b.w	8003ce4 <_dtoa_r+0xd4>
 80046a4:	f1ba 0f00 	cmp.w	sl, #0
 80046a8:	dc03      	bgt.n	80046b2 <_dtoa_r+0xaa2>
 80046aa:	9b06      	ldr	r3, [sp, #24]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	f73f aec7 	bgt.w	8004440 <_dtoa_r+0x830>
 80046b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80046b6:	4621      	mov	r1, r4
 80046b8:	4628      	mov	r0, r5
 80046ba:	f7ff fa1b 	bl	8003af4 <quorem>
 80046be:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80046c2:	f808 3b01 	strb.w	r3, [r8], #1
 80046c6:	9a01      	ldr	r2, [sp, #4]
 80046c8:	eba8 0202 	sub.w	r2, r8, r2
 80046cc:	4592      	cmp	sl, r2
 80046ce:	ddb7      	ble.n	8004640 <_dtoa_r+0xa30>
 80046d0:	4629      	mov	r1, r5
 80046d2:	2300      	movs	r3, #0
 80046d4:	220a      	movs	r2, #10
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 f884 	bl	80047e4 <__multadd>
 80046dc:	4605      	mov	r5, r0
 80046de:	e7ea      	b.n	80046b6 <_dtoa_r+0xaa6>
 80046e0:	08005cd7 	.word	0x08005cd7
 80046e4:	08005c34 	.word	0x08005c34
 80046e8:	08005c58 	.word	0x08005c58

080046ec <_localeconv_r>:
 80046ec:	4800      	ldr	r0, [pc, #0]	; (80046f0 <_localeconv_r+0x4>)
 80046ee:	4770      	bx	lr
 80046f0:	20000160 	.word	0x20000160

080046f4 <malloc>:
 80046f4:	4b02      	ldr	r3, [pc, #8]	; (8004700 <malloc+0xc>)
 80046f6:	4601      	mov	r1, r0
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	f000 bc17 	b.w	8004f2c <_malloc_r>
 80046fe:	bf00      	nop
 8004700:	2000000c 	.word	0x2000000c

08004704 <memcpy>:
 8004704:	440a      	add	r2, r1
 8004706:	4291      	cmp	r1, r2
 8004708:	f100 33ff 	add.w	r3, r0, #4294967295
 800470c:	d100      	bne.n	8004710 <memcpy+0xc>
 800470e:	4770      	bx	lr
 8004710:	b510      	push	{r4, lr}
 8004712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800471a:	4291      	cmp	r1, r2
 800471c:	d1f9      	bne.n	8004712 <memcpy+0xe>
 800471e:	bd10      	pop	{r4, pc}

08004720 <_Balloc>:
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
 8004728:	b976      	cbnz	r6, 8004748 <_Balloc+0x28>
 800472a:	2010      	movs	r0, #16
 800472c:	f7ff ffe2 	bl	80046f4 <malloc>
 8004730:	4602      	mov	r2, r0
 8004732:	6260      	str	r0, [r4, #36]	; 0x24
 8004734:	b920      	cbnz	r0, 8004740 <_Balloc+0x20>
 8004736:	4b18      	ldr	r3, [pc, #96]	; (8004798 <_Balloc+0x78>)
 8004738:	4818      	ldr	r0, [pc, #96]	; (800479c <_Balloc+0x7c>)
 800473a:	2166      	movs	r1, #102	; 0x66
 800473c:	f000 fc7a 	bl	8005034 <__assert_func>
 8004740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004744:	6006      	str	r6, [r0, #0]
 8004746:	60c6      	str	r6, [r0, #12]
 8004748:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800474a:	68f3      	ldr	r3, [r6, #12]
 800474c:	b183      	cbz	r3, 8004770 <_Balloc+0x50>
 800474e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004756:	b9b8      	cbnz	r0, 8004788 <_Balloc+0x68>
 8004758:	2101      	movs	r1, #1
 800475a:	fa01 f605 	lsl.w	r6, r1, r5
 800475e:	1d72      	adds	r2, r6, #5
 8004760:	0092      	lsls	r2, r2, #2
 8004762:	4620      	mov	r0, r4
 8004764:	f000 fb60 	bl	8004e28 <_calloc_r>
 8004768:	b160      	cbz	r0, 8004784 <_Balloc+0x64>
 800476a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800476e:	e00e      	b.n	800478e <_Balloc+0x6e>
 8004770:	2221      	movs	r2, #33	; 0x21
 8004772:	2104      	movs	r1, #4
 8004774:	4620      	mov	r0, r4
 8004776:	f000 fb57 	bl	8004e28 <_calloc_r>
 800477a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800477c:	60f0      	str	r0, [r6, #12]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e4      	bne.n	800474e <_Balloc+0x2e>
 8004784:	2000      	movs	r0, #0
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	6802      	ldr	r2, [r0, #0]
 800478a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800478e:	2300      	movs	r3, #0
 8004790:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004794:	e7f7      	b.n	8004786 <_Balloc+0x66>
 8004796:	bf00      	nop
 8004798:	08005c65 	.word	0x08005c65
 800479c:	08005ce8 	.word	0x08005ce8

080047a0 <_Bfree>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80047a4:	4605      	mov	r5, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	b976      	cbnz	r6, 80047c8 <_Bfree+0x28>
 80047aa:	2010      	movs	r0, #16
 80047ac:	f7ff ffa2 	bl	80046f4 <malloc>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6268      	str	r0, [r5, #36]	; 0x24
 80047b4:	b920      	cbnz	r0, 80047c0 <_Bfree+0x20>
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <_Bfree+0x3c>)
 80047b8:	4809      	ldr	r0, [pc, #36]	; (80047e0 <_Bfree+0x40>)
 80047ba:	218a      	movs	r1, #138	; 0x8a
 80047bc:	f000 fc3a 	bl	8005034 <__assert_func>
 80047c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047c4:	6006      	str	r6, [r0, #0]
 80047c6:	60c6      	str	r6, [r0, #12]
 80047c8:	b13c      	cbz	r4, 80047da <_Bfree+0x3a>
 80047ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047cc:	6862      	ldr	r2, [r4, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047d4:	6021      	str	r1, [r4, #0]
 80047d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	08005c65 	.word	0x08005c65
 80047e0:	08005ce8 	.word	0x08005ce8

080047e4 <__multadd>:
 80047e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e8:	690d      	ldr	r5, [r1, #16]
 80047ea:	4607      	mov	r7, r0
 80047ec:	460c      	mov	r4, r1
 80047ee:	461e      	mov	r6, r3
 80047f0:	f101 0c14 	add.w	ip, r1, #20
 80047f4:	2000      	movs	r0, #0
 80047f6:	f8dc 3000 	ldr.w	r3, [ip]
 80047fa:	b299      	uxth	r1, r3
 80047fc:	fb02 6101 	mla	r1, r2, r1, r6
 8004800:	0c1e      	lsrs	r6, r3, #16
 8004802:	0c0b      	lsrs	r3, r1, #16
 8004804:	fb02 3306 	mla	r3, r2, r6, r3
 8004808:	b289      	uxth	r1, r1
 800480a:	3001      	adds	r0, #1
 800480c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004810:	4285      	cmp	r5, r0
 8004812:	f84c 1b04 	str.w	r1, [ip], #4
 8004816:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800481a:	dcec      	bgt.n	80047f6 <__multadd+0x12>
 800481c:	b30e      	cbz	r6, 8004862 <__multadd+0x7e>
 800481e:	68a3      	ldr	r3, [r4, #8]
 8004820:	42ab      	cmp	r3, r5
 8004822:	dc19      	bgt.n	8004858 <__multadd+0x74>
 8004824:	6861      	ldr	r1, [r4, #4]
 8004826:	4638      	mov	r0, r7
 8004828:	3101      	adds	r1, #1
 800482a:	f7ff ff79 	bl	8004720 <_Balloc>
 800482e:	4680      	mov	r8, r0
 8004830:	b928      	cbnz	r0, 800483e <__multadd+0x5a>
 8004832:	4602      	mov	r2, r0
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <__multadd+0x84>)
 8004836:	480d      	ldr	r0, [pc, #52]	; (800486c <__multadd+0x88>)
 8004838:	21b5      	movs	r1, #181	; 0xb5
 800483a:	f000 fbfb 	bl	8005034 <__assert_func>
 800483e:	6922      	ldr	r2, [r4, #16]
 8004840:	3202      	adds	r2, #2
 8004842:	f104 010c 	add.w	r1, r4, #12
 8004846:	0092      	lsls	r2, r2, #2
 8004848:	300c      	adds	r0, #12
 800484a:	f7ff ff5b 	bl	8004704 <memcpy>
 800484e:	4621      	mov	r1, r4
 8004850:	4638      	mov	r0, r7
 8004852:	f7ff ffa5 	bl	80047a0 <_Bfree>
 8004856:	4644      	mov	r4, r8
 8004858:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800485c:	3501      	adds	r5, #1
 800485e:	615e      	str	r6, [r3, #20]
 8004860:	6125      	str	r5, [r4, #16]
 8004862:	4620      	mov	r0, r4
 8004864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004868:	08005cd7 	.word	0x08005cd7
 800486c:	08005ce8 	.word	0x08005ce8

08004870 <__hi0bits>:
 8004870:	0c03      	lsrs	r3, r0, #16
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	b9d3      	cbnz	r3, 80048ac <__hi0bits+0x3c>
 8004876:	0400      	lsls	r0, r0, #16
 8004878:	2310      	movs	r3, #16
 800487a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800487e:	bf04      	itt	eq
 8004880:	0200      	lsleq	r0, r0, #8
 8004882:	3308      	addeq	r3, #8
 8004884:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004888:	bf04      	itt	eq
 800488a:	0100      	lsleq	r0, r0, #4
 800488c:	3304      	addeq	r3, #4
 800488e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004892:	bf04      	itt	eq
 8004894:	0080      	lsleq	r0, r0, #2
 8004896:	3302      	addeq	r3, #2
 8004898:	2800      	cmp	r0, #0
 800489a:	db05      	blt.n	80048a8 <__hi0bits+0x38>
 800489c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80048a0:	f103 0301 	add.w	r3, r3, #1
 80048a4:	bf08      	it	eq
 80048a6:	2320      	moveq	r3, #32
 80048a8:	4618      	mov	r0, r3
 80048aa:	4770      	bx	lr
 80048ac:	2300      	movs	r3, #0
 80048ae:	e7e4      	b.n	800487a <__hi0bits+0xa>

080048b0 <__lo0bits>:
 80048b0:	6803      	ldr	r3, [r0, #0]
 80048b2:	f013 0207 	ands.w	r2, r3, #7
 80048b6:	4601      	mov	r1, r0
 80048b8:	d00b      	beq.n	80048d2 <__lo0bits+0x22>
 80048ba:	07da      	lsls	r2, r3, #31
 80048bc:	d423      	bmi.n	8004906 <__lo0bits+0x56>
 80048be:	0798      	lsls	r0, r3, #30
 80048c0:	bf49      	itett	mi
 80048c2:	085b      	lsrmi	r3, r3, #1
 80048c4:	089b      	lsrpl	r3, r3, #2
 80048c6:	2001      	movmi	r0, #1
 80048c8:	600b      	strmi	r3, [r1, #0]
 80048ca:	bf5c      	itt	pl
 80048cc:	600b      	strpl	r3, [r1, #0]
 80048ce:	2002      	movpl	r0, #2
 80048d0:	4770      	bx	lr
 80048d2:	b298      	uxth	r0, r3
 80048d4:	b9a8      	cbnz	r0, 8004902 <__lo0bits+0x52>
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	2010      	movs	r0, #16
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	b90a      	cbnz	r2, 80048e2 <__lo0bits+0x32>
 80048de:	3008      	adds	r0, #8
 80048e0:	0a1b      	lsrs	r3, r3, #8
 80048e2:	071a      	lsls	r2, r3, #28
 80048e4:	bf04      	itt	eq
 80048e6:	091b      	lsreq	r3, r3, #4
 80048e8:	3004      	addeq	r0, #4
 80048ea:	079a      	lsls	r2, r3, #30
 80048ec:	bf04      	itt	eq
 80048ee:	089b      	lsreq	r3, r3, #2
 80048f0:	3002      	addeq	r0, #2
 80048f2:	07da      	lsls	r2, r3, #31
 80048f4:	d403      	bmi.n	80048fe <__lo0bits+0x4e>
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	f100 0001 	add.w	r0, r0, #1
 80048fc:	d005      	beq.n	800490a <__lo0bits+0x5a>
 80048fe:	600b      	str	r3, [r1, #0]
 8004900:	4770      	bx	lr
 8004902:	4610      	mov	r0, r2
 8004904:	e7e9      	b.n	80048da <__lo0bits+0x2a>
 8004906:	2000      	movs	r0, #0
 8004908:	4770      	bx	lr
 800490a:	2020      	movs	r0, #32
 800490c:	4770      	bx	lr
	...

08004910 <__i2b>:
 8004910:	b510      	push	{r4, lr}
 8004912:	460c      	mov	r4, r1
 8004914:	2101      	movs	r1, #1
 8004916:	f7ff ff03 	bl	8004720 <_Balloc>
 800491a:	4602      	mov	r2, r0
 800491c:	b928      	cbnz	r0, 800492a <__i2b+0x1a>
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <__i2b+0x24>)
 8004920:	4805      	ldr	r0, [pc, #20]	; (8004938 <__i2b+0x28>)
 8004922:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004926:	f000 fb85 	bl	8005034 <__assert_func>
 800492a:	2301      	movs	r3, #1
 800492c:	6144      	str	r4, [r0, #20]
 800492e:	6103      	str	r3, [r0, #16]
 8004930:	bd10      	pop	{r4, pc}
 8004932:	bf00      	nop
 8004934:	08005cd7 	.word	0x08005cd7
 8004938:	08005ce8 	.word	0x08005ce8

0800493c <__multiply>:
 800493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004940:	4691      	mov	r9, r2
 8004942:	690a      	ldr	r2, [r1, #16]
 8004944:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004948:	429a      	cmp	r2, r3
 800494a:	bfb8      	it	lt
 800494c:	460b      	movlt	r3, r1
 800494e:	460c      	mov	r4, r1
 8004950:	bfbc      	itt	lt
 8004952:	464c      	movlt	r4, r9
 8004954:	4699      	movlt	r9, r3
 8004956:	6927      	ldr	r7, [r4, #16]
 8004958:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800495c:	68a3      	ldr	r3, [r4, #8]
 800495e:	6861      	ldr	r1, [r4, #4]
 8004960:	eb07 060a 	add.w	r6, r7, sl
 8004964:	42b3      	cmp	r3, r6
 8004966:	b085      	sub	sp, #20
 8004968:	bfb8      	it	lt
 800496a:	3101      	addlt	r1, #1
 800496c:	f7ff fed8 	bl	8004720 <_Balloc>
 8004970:	b930      	cbnz	r0, 8004980 <__multiply+0x44>
 8004972:	4602      	mov	r2, r0
 8004974:	4b44      	ldr	r3, [pc, #272]	; (8004a88 <__multiply+0x14c>)
 8004976:	4845      	ldr	r0, [pc, #276]	; (8004a8c <__multiply+0x150>)
 8004978:	f240 115d 	movw	r1, #349	; 0x15d
 800497c:	f000 fb5a 	bl	8005034 <__assert_func>
 8004980:	f100 0514 	add.w	r5, r0, #20
 8004984:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004988:	462b      	mov	r3, r5
 800498a:	2200      	movs	r2, #0
 800498c:	4543      	cmp	r3, r8
 800498e:	d321      	bcc.n	80049d4 <__multiply+0x98>
 8004990:	f104 0314 	add.w	r3, r4, #20
 8004994:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004998:	f109 0314 	add.w	r3, r9, #20
 800499c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80049a0:	9202      	str	r2, [sp, #8]
 80049a2:	1b3a      	subs	r2, r7, r4
 80049a4:	3a15      	subs	r2, #21
 80049a6:	f022 0203 	bic.w	r2, r2, #3
 80049aa:	3204      	adds	r2, #4
 80049ac:	f104 0115 	add.w	r1, r4, #21
 80049b0:	428f      	cmp	r7, r1
 80049b2:	bf38      	it	cc
 80049b4:	2204      	movcc	r2, #4
 80049b6:	9201      	str	r2, [sp, #4]
 80049b8:	9a02      	ldr	r2, [sp, #8]
 80049ba:	9303      	str	r3, [sp, #12]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d80c      	bhi.n	80049da <__multiply+0x9e>
 80049c0:	2e00      	cmp	r6, #0
 80049c2:	dd03      	ble.n	80049cc <__multiply+0x90>
 80049c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d05a      	beq.n	8004a82 <__multiply+0x146>
 80049cc:	6106      	str	r6, [r0, #16]
 80049ce:	b005      	add	sp, #20
 80049d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d4:	f843 2b04 	str.w	r2, [r3], #4
 80049d8:	e7d8      	b.n	800498c <__multiply+0x50>
 80049da:	f8b3 a000 	ldrh.w	sl, [r3]
 80049de:	f1ba 0f00 	cmp.w	sl, #0
 80049e2:	d024      	beq.n	8004a2e <__multiply+0xf2>
 80049e4:	f104 0e14 	add.w	lr, r4, #20
 80049e8:	46a9      	mov	r9, r5
 80049ea:	f04f 0c00 	mov.w	ip, #0
 80049ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80049f2:	f8d9 1000 	ldr.w	r1, [r9]
 80049f6:	fa1f fb82 	uxth.w	fp, r2
 80049fa:	b289      	uxth	r1, r1
 80049fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8004a00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004a04:	f8d9 2000 	ldr.w	r2, [r9]
 8004a08:	4461      	add	r1, ip
 8004a0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004a0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004a12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004a16:	b289      	uxth	r1, r1
 8004a18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a1c:	4577      	cmp	r7, lr
 8004a1e:	f849 1b04 	str.w	r1, [r9], #4
 8004a22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004a26:	d8e2      	bhi.n	80049ee <__multiply+0xb2>
 8004a28:	9a01      	ldr	r2, [sp, #4]
 8004a2a:	f845 c002 	str.w	ip, [r5, r2]
 8004a2e:	9a03      	ldr	r2, [sp, #12]
 8004a30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004a34:	3304      	adds	r3, #4
 8004a36:	f1b9 0f00 	cmp.w	r9, #0
 8004a3a:	d020      	beq.n	8004a7e <__multiply+0x142>
 8004a3c:	6829      	ldr	r1, [r5, #0]
 8004a3e:	f104 0c14 	add.w	ip, r4, #20
 8004a42:	46ae      	mov	lr, r5
 8004a44:	f04f 0a00 	mov.w	sl, #0
 8004a48:	f8bc b000 	ldrh.w	fp, [ip]
 8004a4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004a50:	fb09 220b 	mla	r2, r9, fp, r2
 8004a54:	4492      	add	sl, r2
 8004a56:	b289      	uxth	r1, r1
 8004a58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004a5c:	f84e 1b04 	str.w	r1, [lr], #4
 8004a60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004a64:	f8be 1000 	ldrh.w	r1, [lr]
 8004a68:	0c12      	lsrs	r2, r2, #16
 8004a6a:	fb09 1102 	mla	r1, r9, r2, r1
 8004a6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004a72:	4567      	cmp	r7, ip
 8004a74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a78:	d8e6      	bhi.n	8004a48 <__multiply+0x10c>
 8004a7a:	9a01      	ldr	r2, [sp, #4]
 8004a7c:	50a9      	str	r1, [r5, r2]
 8004a7e:	3504      	adds	r5, #4
 8004a80:	e79a      	b.n	80049b8 <__multiply+0x7c>
 8004a82:	3e01      	subs	r6, #1
 8004a84:	e79c      	b.n	80049c0 <__multiply+0x84>
 8004a86:	bf00      	nop
 8004a88:	08005cd7 	.word	0x08005cd7
 8004a8c:	08005ce8 	.word	0x08005ce8

08004a90 <__pow5mult>:
 8004a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a94:	4615      	mov	r5, r2
 8004a96:	f012 0203 	ands.w	r2, r2, #3
 8004a9a:	4606      	mov	r6, r0
 8004a9c:	460f      	mov	r7, r1
 8004a9e:	d007      	beq.n	8004ab0 <__pow5mult+0x20>
 8004aa0:	4c25      	ldr	r4, [pc, #148]	; (8004b38 <__pow5mult+0xa8>)
 8004aa2:	3a01      	subs	r2, #1
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004aaa:	f7ff fe9b 	bl	80047e4 <__multadd>
 8004aae:	4607      	mov	r7, r0
 8004ab0:	10ad      	asrs	r5, r5, #2
 8004ab2:	d03d      	beq.n	8004b30 <__pow5mult+0xa0>
 8004ab4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004ab6:	b97c      	cbnz	r4, 8004ad8 <__pow5mult+0x48>
 8004ab8:	2010      	movs	r0, #16
 8004aba:	f7ff fe1b 	bl	80046f4 <malloc>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	6270      	str	r0, [r6, #36]	; 0x24
 8004ac2:	b928      	cbnz	r0, 8004ad0 <__pow5mult+0x40>
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <__pow5mult+0xac>)
 8004ac6:	481e      	ldr	r0, [pc, #120]	; (8004b40 <__pow5mult+0xb0>)
 8004ac8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004acc:	f000 fab2 	bl	8005034 <__assert_func>
 8004ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ad4:	6004      	str	r4, [r0, #0]
 8004ad6:	60c4      	str	r4, [r0, #12]
 8004ad8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ae0:	b94c      	cbnz	r4, 8004af6 <__pow5mult+0x66>
 8004ae2:	f240 2171 	movw	r1, #625	; 0x271
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f7ff ff12 	bl	8004910 <__i2b>
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c8 0008 	str.w	r0, [r8, #8]
 8004af2:	4604      	mov	r4, r0
 8004af4:	6003      	str	r3, [r0, #0]
 8004af6:	f04f 0900 	mov.w	r9, #0
 8004afa:	07eb      	lsls	r3, r5, #31
 8004afc:	d50a      	bpl.n	8004b14 <__pow5mult+0x84>
 8004afe:	4639      	mov	r1, r7
 8004b00:	4622      	mov	r2, r4
 8004b02:	4630      	mov	r0, r6
 8004b04:	f7ff ff1a 	bl	800493c <__multiply>
 8004b08:	4639      	mov	r1, r7
 8004b0a:	4680      	mov	r8, r0
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f7ff fe47 	bl	80047a0 <_Bfree>
 8004b12:	4647      	mov	r7, r8
 8004b14:	106d      	asrs	r5, r5, #1
 8004b16:	d00b      	beq.n	8004b30 <__pow5mult+0xa0>
 8004b18:	6820      	ldr	r0, [r4, #0]
 8004b1a:	b938      	cbnz	r0, 8004b2c <__pow5mult+0x9c>
 8004b1c:	4622      	mov	r2, r4
 8004b1e:	4621      	mov	r1, r4
 8004b20:	4630      	mov	r0, r6
 8004b22:	f7ff ff0b 	bl	800493c <__multiply>
 8004b26:	6020      	str	r0, [r4, #0]
 8004b28:	f8c0 9000 	str.w	r9, [r0]
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	e7e4      	b.n	8004afa <__pow5mult+0x6a>
 8004b30:	4638      	mov	r0, r7
 8004b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b36:	bf00      	nop
 8004b38:	08005e38 	.word	0x08005e38
 8004b3c:	08005c65 	.word	0x08005c65
 8004b40:	08005ce8 	.word	0x08005ce8

08004b44 <__lshift>:
 8004b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b48:	460c      	mov	r4, r1
 8004b4a:	6849      	ldr	r1, [r1, #4]
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	4607      	mov	r7, r0
 8004b56:	4691      	mov	r9, r2
 8004b58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b5c:	f108 0601 	add.w	r6, r8, #1
 8004b60:	42b3      	cmp	r3, r6
 8004b62:	db0b      	blt.n	8004b7c <__lshift+0x38>
 8004b64:	4638      	mov	r0, r7
 8004b66:	f7ff fddb 	bl	8004720 <_Balloc>
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	b948      	cbnz	r0, 8004b82 <__lshift+0x3e>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	4b2a      	ldr	r3, [pc, #168]	; (8004c1c <__lshift+0xd8>)
 8004b72:	482b      	ldr	r0, [pc, #172]	; (8004c20 <__lshift+0xdc>)
 8004b74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b78:	f000 fa5c 	bl	8005034 <__assert_func>
 8004b7c:	3101      	adds	r1, #1
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	e7ee      	b.n	8004b60 <__lshift+0x1c>
 8004b82:	2300      	movs	r3, #0
 8004b84:	f100 0114 	add.w	r1, r0, #20
 8004b88:	f100 0210 	add.w	r2, r0, #16
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	4553      	cmp	r3, sl
 8004b90:	db37      	blt.n	8004c02 <__lshift+0xbe>
 8004b92:	6920      	ldr	r0, [r4, #16]
 8004b94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b98:	f104 0314 	add.w	r3, r4, #20
 8004b9c:	f019 091f 	ands.w	r9, r9, #31
 8004ba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ba4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004ba8:	d02f      	beq.n	8004c0a <__lshift+0xc6>
 8004baa:	f1c9 0e20 	rsb	lr, r9, #32
 8004bae:	468a      	mov	sl, r1
 8004bb0:	f04f 0c00 	mov.w	ip, #0
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	fa02 f209 	lsl.w	r2, r2, r9
 8004bba:	ea42 020c 	orr.w	r2, r2, ip
 8004bbe:	f84a 2b04 	str.w	r2, [sl], #4
 8004bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bc6:	4298      	cmp	r0, r3
 8004bc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004bcc:	d8f2      	bhi.n	8004bb4 <__lshift+0x70>
 8004bce:	1b03      	subs	r3, r0, r4
 8004bd0:	3b15      	subs	r3, #21
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	f104 0215 	add.w	r2, r4, #21
 8004bdc:	4290      	cmp	r0, r2
 8004bde:	bf38      	it	cc
 8004be0:	2304      	movcc	r3, #4
 8004be2:	f841 c003 	str.w	ip, [r1, r3]
 8004be6:	f1bc 0f00 	cmp.w	ip, #0
 8004bea:	d001      	beq.n	8004bf0 <__lshift+0xac>
 8004bec:	f108 0602 	add.w	r6, r8, #2
 8004bf0:	3e01      	subs	r6, #1
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	612e      	str	r6, [r5, #16]
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	f7ff fdd2 	bl	80047a0 <_Bfree>
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c02:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c06:	3301      	adds	r3, #1
 8004c08:	e7c1      	b.n	8004b8e <__lshift+0x4a>
 8004c0a:	3904      	subs	r1, #4
 8004c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c10:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c14:	4298      	cmp	r0, r3
 8004c16:	d8f9      	bhi.n	8004c0c <__lshift+0xc8>
 8004c18:	e7ea      	b.n	8004bf0 <__lshift+0xac>
 8004c1a:	bf00      	nop
 8004c1c:	08005cd7 	.word	0x08005cd7
 8004c20:	08005ce8 	.word	0x08005ce8

08004c24 <__mcmp>:
 8004c24:	b530      	push	{r4, r5, lr}
 8004c26:	6902      	ldr	r2, [r0, #16]
 8004c28:	690c      	ldr	r4, [r1, #16]
 8004c2a:	1b12      	subs	r2, r2, r4
 8004c2c:	d10e      	bne.n	8004c4c <__mcmp+0x28>
 8004c2e:	f100 0314 	add.w	r3, r0, #20
 8004c32:	3114      	adds	r1, #20
 8004c34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004c38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004c3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004c40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004c44:	42a5      	cmp	r5, r4
 8004c46:	d003      	beq.n	8004c50 <__mcmp+0x2c>
 8004c48:	d305      	bcc.n	8004c56 <__mcmp+0x32>
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	bd30      	pop	{r4, r5, pc}
 8004c50:	4283      	cmp	r3, r0
 8004c52:	d3f3      	bcc.n	8004c3c <__mcmp+0x18>
 8004c54:	e7fa      	b.n	8004c4c <__mcmp+0x28>
 8004c56:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5a:	e7f7      	b.n	8004c4c <__mcmp+0x28>

08004c5c <__mdiff>:
 8004c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c60:	460c      	mov	r4, r1
 8004c62:	4606      	mov	r6, r0
 8004c64:	4611      	mov	r1, r2
 8004c66:	4620      	mov	r0, r4
 8004c68:	4690      	mov	r8, r2
 8004c6a:	f7ff ffdb 	bl	8004c24 <__mcmp>
 8004c6e:	1e05      	subs	r5, r0, #0
 8004c70:	d110      	bne.n	8004c94 <__mdiff+0x38>
 8004c72:	4629      	mov	r1, r5
 8004c74:	4630      	mov	r0, r6
 8004c76:	f7ff fd53 	bl	8004720 <_Balloc>
 8004c7a:	b930      	cbnz	r0, 8004c8a <__mdiff+0x2e>
 8004c7c:	4b3a      	ldr	r3, [pc, #232]	; (8004d68 <__mdiff+0x10c>)
 8004c7e:	4602      	mov	r2, r0
 8004c80:	f240 2132 	movw	r1, #562	; 0x232
 8004c84:	4839      	ldr	r0, [pc, #228]	; (8004d6c <__mdiff+0x110>)
 8004c86:	f000 f9d5 	bl	8005034 <__assert_func>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c94:	bfa4      	itt	ge
 8004c96:	4643      	movge	r3, r8
 8004c98:	46a0      	movge	r8, r4
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004ca0:	bfa6      	itte	ge
 8004ca2:	461c      	movge	r4, r3
 8004ca4:	2500      	movge	r5, #0
 8004ca6:	2501      	movlt	r5, #1
 8004ca8:	f7ff fd3a 	bl	8004720 <_Balloc>
 8004cac:	b920      	cbnz	r0, 8004cb8 <__mdiff+0x5c>
 8004cae:	4b2e      	ldr	r3, [pc, #184]	; (8004d68 <__mdiff+0x10c>)
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004cb6:	e7e5      	b.n	8004c84 <__mdiff+0x28>
 8004cb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004cbc:	6926      	ldr	r6, [r4, #16]
 8004cbe:	60c5      	str	r5, [r0, #12]
 8004cc0:	f104 0914 	add.w	r9, r4, #20
 8004cc4:	f108 0514 	add.w	r5, r8, #20
 8004cc8:	f100 0e14 	add.w	lr, r0, #20
 8004ccc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004cd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004cd4:	f108 0210 	add.w	r2, r8, #16
 8004cd8:	46f2      	mov	sl, lr
 8004cda:	2100      	movs	r1, #0
 8004cdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ce0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004ce4:	fa1f f883 	uxth.w	r8, r3
 8004ce8:	fa11 f18b 	uxtah	r1, r1, fp
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	eba1 0808 	sub.w	r8, r1, r8
 8004cf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004cf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004cfa:	fa1f f888 	uxth.w	r8, r8
 8004cfe:	1419      	asrs	r1, r3, #16
 8004d00:	454e      	cmp	r6, r9
 8004d02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004d06:	f84a 3b04 	str.w	r3, [sl], #4
 8004d0a:	d8e7      	bhi.n	8004cdc <__mdiff+0x80>
 8004d0c:	1b33      	subs	r3, r6, r4
 8004d0e:	3b15      	subs	r3, #21
 8004d10:	f023 0303 	bic.w	r3, r3, #3
 8004d14:	3304      	adds	r3, #4
 8004d16:	3415      	adds	r4, #21
 8004d18:	42a6      	cmp	r6, r4
 8004d1a:	bf38      	it	cc
 8004d1c:	2304      	movcc	r3, #4
 8004d1e:	441d      	add	r5, r3
 8004d20:	4473      	add	r3, lr
 8004d22:	469e      	mov	lr, r3
 8004d24:	462e      	mov	r6, r5
 8004d26:	4566      	cmp	r6, ip
 8004d28:	d30e      	bcc.n	8004d48 <__mdiff+0xec>
 8004d2a:	f10c 0203 	add.w	r2, ip, #3
 8004d2e:	1b52      	subs	r2, r2, r5
 8004d30:	f022 0203 	bic.w	r2, r2, #3
 8004d34:	3d03      	subs	r5, #3
 8004d36:	45ac      	cmp	ip, r5
 8004d38:	bf38      	it	cc
 8004d3a:	2200      	movcc	r2, #0
 8004d3c:	441a      	add	r2, r3
 8004d3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004d42:	b17b      	cbz	r3, 8004d64 <__mdiff+0x108>
 8004d44:	6107      	str	r7, [r0, #16]
 8004d46:	e7a3      	b.n	8004c90 <__mdiff+0x34>
 8004d48:	f856 8b04 	ldr.w	r8, [r6], #4
 8004d4c:	fa11 f288 	uxtah	r2, r1, r8
 8004d50:	1414      	asrs	r4, r2, #16
 8004d52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004d56:	b292      	uxth	r2, r2
 8004d58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004d5c:	f84e 2b04 	str.w	r2, [lr], #4
 8004d60:	1421      	asrs	r1, r4, #16
 8004d62:	e7e0      	b.n	8004d26 <__mdiff+0xca>
 8004d64:	3f01      	subs	r7, #1
 8004d66:	e7ea      	b.n	8004d3e <__mdiff+0xe2>
 8004d68:	08005cd7 	.word	0x08005cd7
 8004d6c:	08005ce8 	.word	0x08005ce8

08004d70 <__d2b>:
 8004d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d74:	4689      	mov	r9, r1
 8004d76:	2101      	movs	r1, #1
 8004d78:	ec57 6b10 	vmov	r6, r7, d0
 8004d7c:	4690      	mov	r8, r2
 8004d7e:	f7ff fccf 	bl	8004720 <_Balloc>
 8004d82:	4604      	mov	r4, r0
 8004d84:	b930      	cbnz	r0, 8004d94 <__d2b+0x24>
 8004d86:	4602      	mov	r2, r0
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <__d2b+0xb0>)
 8004d8a:	4826      	ldr	r0, [pc, #152]	; (8004e24 <__d2b+0xb4>)
 8004d8c:	f240 310a 	movw	r1, #778	; 0x30a
 8004d90:	f000 f950 	bl	8005034 <__assert_func>
 8004d94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004d98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d9c:	bb35      	cbnz	r5, 8004dec <__d2b+0x7c>
 8004d9e:	2e00      	cmp	r6, #0
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	d028      	beq.n	8004df6 <__d2b+0x86>
 8004da4:	4668      	mov	r0, sp
 8004da6:	9600      	str	r6, [sp, #0]
 8004da8:	f7ff fd82 	bl	80048b0 <__lo0bits>
 8004dac:	9900      	ldr	r1, [sp, #0]
 8004dae:	b300      	cbz	r0, 8004df2 <__d2b+0x82>
 8004db0:	9a01      	ldr	r2, [sp, #4]
 8004db2:	f1c0 0320 	rsb	r3, r0, #32
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	40c2      	lsrs	r2, r0
 8004dbe:	6163      	str	r3, [r4, #20]
 8004dc0:	9201      	str	r2, [sp, #4]
 8004dc2:	9b01      	ldr	r3, [sp, #4]
 8004dc4:	61a3      	str	r3, [r4, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bf14      	ite	ne
 8004dca:	2202      	movne	r2, #2
 8004dcc:	2201      	moveq	r2, #1
 8004dce:	6122      	str	r2, [r4, #16]
 8004dd0:	b1d5      	cbz	r5, 8004e08 <__d2b+0x98>
 8004dd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004dd6:	4405      	add	r5, r0
 8004dd8:	f8c9 5000 	str.w	r5, [r9]
 8004ddc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004de0:	f8c8 0000 	str.w	r0, [r8]
 8004de4:	4620      	mov	r0, r4
 8004de6:	b003      	add	sp, #12
 8004de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df0:	e7d5      	b.n	8004d9e <__d2b+0x2e>
 8004df2:	6161      	str	r1, [r4, #20]
 8004df4:	e7e5      	b.n	8004dc2 <__d2b+0x52>
 8004df6:	a801      	add	r0, sp, #4
 8004df8:	f7ff fd5a 	bl	80048b0 <__lo0bits>
 8004dfc:	9b01      	ldr	r3, [sp, #4]
 8004dfe:	6163      	str	r3, [r4, #20]
 8004e00:	2201      	movs	r2, #1
 8004e02:	6122      	str	r2, [r4, #16]
 8004e04:	3020      	adds	r0, #32
 8004e06:	e7e3      	b.n	8004dd0 <__d2b+0x60>
 8004e08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e10:	f8c9 0000 	str.w	r0, [r9]
 8004e14:	6918      	ldr	r0, [r3, #16]
 8004e16:	f7ff fd2b 	bl	8004870 <__hi0bits>
 8004e1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004e1e:	e7df      	b.n	8004de0 <__d2b+0x70>
 8004e20:	08005cd7 	.word	0x08005cd7
 8004e24:	08005ce8 	.word	0x08005ce8

08004e28 <_calloc_r>:
 8004e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e2a:	fba1 2402 	umull	r2, r4, r1, r2
 8004e2e:	b94c      	cbnz	r4, 8004e44 <_calloc_r+0x1c>
 8004e30:	4611      	mov	r1, r2
 8004e32:	9201      	str	r2, [sp, #4]
 8004e34:	f000 f87a 	bl	8004f2c <_malloc_r>
 8004e38:	9a01      	ldr	r2, [sp, #4]
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	b930      	cbnz	r0, 8004e4c <_calloc_r+0x24>
 8004e3e:	4628      	mov	r0, r5
 8004e40:	b003      	add	sp, #12
 8004e42:	bd30      	pop	{r4, r5, pc}
 8004e44:	220c      	movs	r2, #12
 8004e46:	6002      	str	r2, [r0, #0]
 8004e48:	2500      	movs	r5, #0
 8004e4a:	e7f8      	b.n	8004e3e <_calloc_r+0x16>
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	f7fe fa07 	bl	8003260 <memset>
 8004e52:	e7f4      	b.n	8004e3e <_calloc_r+0x16>

08004e54 <_free_r>:
 8004e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d044      	beq.n	8004ee4 <_free_r+0x90>
 8004e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e5e:	9001      	str	r0, [sp, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f1a1 0404 	sub.w	r4, r1, #4
 8004e66:	bfb8      	it	lt
 8004e68:	18e4      	addlt	r4, r4, r3
 8004e6a:	f000 f925 	bl	80050b8 <__malloc_lock>
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <_free_r+0x94>)
 8004e70:	9801      	ldr	r0, [sp, #4]
 8004e72:	6813      	ldr	r3, [r2, #0]
 8004e74:	b933      	cbnz	r3, 8004e84 <_free_r+0x30>
 8004e76:	6063      	str	r3, [r4, #4]
 8004e78:	6014      	str	r4, [r2, #0]
 8004e7a:	b003      	add	sp, #12
 8004e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e80:	f000 b920 	b.w	80050c4 <__malloc_unlock>
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d908      	bls.n	8004e9a <_free_r+0x46>
 8004e88:	6825      	ldr	r5, [r4, #0]
 8004e8a:	1961      	adds	r1, r4, r5
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	bf01      	itttt	eq
 8004e90:	6819      	ldreq	r1, [r3, #0]
 8004e92:	685b      	ldreq	r3, [r3, #4]
 8004e94:	1949      	addeq	r1, r1, r5
 8004e96:	6021      	streq	r1, [r4, #0]
 8004e98:	e7ed      	b.n	8004e76 <_free_r+0x22>
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b10b      	cbz	r3, 8004ea4 <_free_r+0x50>
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	d9fa      	bls.n	8004e9a <_free_r+0x46>
 8004ea4:	6811      	ldr	r1, [r2, #0]
 8004ea6:	1855      	adds	r5, r2, r1
 8004ea8:	42a5      	cmp	r5, r4
 8004eaa:	d10b      	bne.n	8004ec4 <_free_r+0x70>
 8004eac:	6824      	ldr	r4, [r4, #0]
 8004eae:	4421      	add	r1, r4
 8004eb0:	1854      	adds	r4, r2, r1
 8004eb2:	42a3      	cmp	r3, r4
 8004eb4:	6011      	str	r1, [r2, #0]
 8004eb6:	d1e0      	bne.n	8004e7a <_free_r+0x26>
 8004eb8:	681c      	ldr	r4, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	6053      	str	r3, [r2, #4]
 8004ebe:	4421      	add	r1, r4
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	e7da      	b.n	8004e7a <_free_r+0x26>
 8004ec4:	d902      	bls.n	8004ecc <_free_r+0x78>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	6003      	str	r3, [r0, #0]
 8004eca:	e7d6      	b.n	8004e7a <_free_r+0x26>
 8004ecc:	6825      	ldr	r5, [r4, #0]
 8004ece:	1961      	adds	r1, r4, r5
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	bf04      	itt	eq
 8004ed4:	6819      	ldreq	r1, [r3, #0]
 8004ed6:	685b      	ldreq	r3, [r3, #4]
 8004ed8:	6063      	str	r3, [r4, #4]
 8004eda:	bf04      	itt	eq
 8004edc:	1949      	addeq	r1, r1, r5
 8004ede:	6021      	streq	r1, [r4, #0]
 8004ee0:	6054      	str	r4, [r2, #4]
 8004ee2:	e7ca      	b.n	8004e7a <_free_r+0x26>
 8004ee4:	b003      	add	sp, #12
 8004ee6:	bd30      	pop	{r4, r5, pc}
 8004ee8:	200005e0 	.word	0x200005e0

08004eec <sbrk_aligned>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4e0e      	ldr	r6, [pc, #56]	; (8004f28 <sbrk_aligned+0x3c>)
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	6831      	ldr	r1, [r6, #0]
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	b911      	cbnz	r1, 8004efe <sbrk_aligned+0x12>
 8004ef8:	f000 f88c 	bl	8005014 <_sbrk_r>
 8004efc:	6030      	str	r0, [r6, #0]
 8004efe:	4621      	mov	r1, r4
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 f887 	bl	8005014 <_sbrk_r>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	d00a      	beq.n	8004f20 <sbrk_aligned+0x34>
 8004f0a:	1cc4      	adds	r4, r0, #3
 8004f0c:	f024 0403 	bic.w	r4, r4, #3
 8004f10:	42a0      	cmp	r0, r4
 8004f12:	d007      	beq.n	8004f24 <sbrk_aligned+0x38>
 8004f14:	1a21      	subs	r1, r4, r0
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f87c 	bl	8005014 <_sbrk_r>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d101      	bne.n	8004f24 <sbrk_aligned+0x38>
 8004f20:	f04f 34ff 	mov.w	r4, #4294967295
 8004f24:	4620      	mov	r0, r4
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	200005e4 	.word	0x200005e4

08004f2c <_malloc_r>:
 8004f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f30:	1ccd      	adds	r5, r1, #3
 8004f32:	f025 0503 	bic.w	r5, r5, #3
 8004f36:	3508      	adds	r5, #8
 8004f38:	2d0c      	cmp	r5, #12
 8004f3a:	bf38      	it	cc
 8004f3c:	250c      	movcc	r5, #12
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	4607      	mov	r7, r0
 8004f42:	db01      	blt.n	8004f48 <_malloc_r+0x1c>
 8004f44:	42a9      	cmp	r1, r5
 8004f46:	d905      	bls.n	8004f54 <_malloc_r+0x28>
 8004f48:	230c      	movs	r3, #12
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	2600      	movs	r6, #0
 8004f4e:	4630      	mov	r0, r6
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	4e2e      	ldr	r6, [pc, #184]	; (8005010 <_malloc_r+0xe4>)
 8004f56:	f000 f8af 	bl	80050b8 <__malloc_lock>
 8004f5a:	6833      	ldr	r3, [r6, #0]
 8004f5c:	461c      	mov	r4, r3
 8004f5e:	bb34      	cbnz	r4, 8004fae <_malloc_r+0x82>
 8004f60:	4629      	mov	r1, r5
 8004f62:	4638      	mov	r0, r7
 8004f64:	f7ff ffc2 	bl	8004eec <sbrk_aligned>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	d14d      	bne.n	800500a <_malloc_r+0xde>
 8004f6e:	6834      	ldr	r4, [r6, #0]
 8004f70:	4626      	mov	r6, r4
 8004f72:	2e00      	cmp	r6, #0
 8004f74:	d140      	bne.n	8004ff8 <_malloc_r+0xcc>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	eb04 0803 	add.w	r8, r4, r3
 8004f80:	f000 f848 	bl	8005014 <_sbrk_r>
 8004f84:	4580      	cmp	r8, r0
 8004f86:	d13a      	bne.n	8004ffe <_malloc_r+0xd2>
 8004f88:	6821      	ldr	r1, [r4, #0]
 8004f8a:	3503      	adds	r5, #3
 8004f8c:	1a6d      	subs	r5, r5, r1
 8004f8e:	f025 0503 	bic.w	r5, r5, #3
 8004f92:	3508      	adds	r5, #8
 8004f94:	2d0c      	cmp	r5, #12
 8004f96:	bf38      	it	cc
 8004f98:	250c      	movcc	r5, #12
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f7ff ffa5 	bl	8004eec <sbrk_aligned>
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d02b      	beq.n	8004ffe <_malloc_r+0xd2>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	442b      	add	r3, r5
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	e00e      	b.n	8004fcc <_malloc_r+0xa0>
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	1b52      	subs	r2, r2, r5
 8004fb2:	d41e      	bmi.n	8004ff2 <_malloc_r+0xc6>
 8004fb4:	2a0b      	cmp	r2, #11
 8004fb6:	d916      	bls.n	8004fe6 <_malloc_r+0xba>
 8004fb8:	1961      	adds	r1, r4, r5
 8004fba:	42a3      	cmp	r3, r4
 8004fbc:	6025      	str	r5, [r4, #0]
 8004fbe:	bf18      	it	ne
 8004fc0:	6059      	strne	r1, [r3, #4]
 8004fc2:	6863      	ldr	r3, [r4, #4]
 8004fc4:	bf08      	it	eq
 8004fc6:	6031      	streq	r1, [r6, #0]
 8004fc8:	5162      	str	r2, [r4, r5]
 8004fca:	604b      	str	r3, [r1, #4]
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f104 060b 	add.w	r6, r4, #11
 8004fd2:	f000 f877 	bl	80050c4 <__malloc_unlock>
 8004fd6:	f026 0607 	bic.w	r6, r6, #7
 8004fda:	1d23      	adds	r3, r4, #4
 8004fdc:	1af2      	subs	r2, r6, r3
 8004fde:	d0b6      	beq.n	8004f4e <_malloc_r+0x22>
 8004fe0:	1b9b      	subs	r3, r3, r6
 8004fe2:	50a3      	str	r3, [r4, r2]
 8004fe4:	e7b3      	b.n	8004f4e <_malloc_r+0x22>
 8004fe6:	6862      	ldr	r2, [r4, #4]
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	bf0c      	ite	eq
 8004fec:	6032      	streq	r2, [r6, #0]
 8004fee:	605a      	strne	r2, [r3, #4]
 8004ff0:	e7ec      	b.n	8004fcc <_malloc_r+0xa0>
 8004ff2:	4623      	mov	r3, r4
 8004ff4:	6864      	ldr	r4, [r4, #4]
 8004ff6:	e7b2      	b.n	8004f5e <_malloc_r+0x32>
 8004ff8:	4634      	mov	r4, r6
 8004ffa:	6876      	ldr	r6, [r6, #4]
 8004ffc:	e7b9      	b.n	8004f72 <_malloc_r+0x46>
 8004ffe:	230c      	movs	r3, #12
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	4638      	mov	r0, r7
 8005004:	f000 f85e 	bl	80050c4 <__malloc_unlock>
 8005008:	e7a1      	b.n	8004f4e <_malloc_r+0x22>
 800500a:	6025      	str	r5, [r4, #0]
 800500c:	e7de      	b.n	8004fcc <_malloc_r+0xa0>
 800500e:	bf00      	nop
 8005010:	200005e0 	.word	0x200005e0

08005014 <_sbrk_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4d06      	ldr	r5, [pc, #24]	; (8005030 <_sbrk_r+0x1c>)
 8005018:	2300      	movs	r3, #0
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	f000 fdce 	bl	8005bc0 <_sbrk>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_sbrk_r+0x1a>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_sbrk_r+0x1a>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	200005e8 	.word	0x200005e8

08005034 <__assert_func>:
 8005034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005036:	4614      	mov	r4, r2
 8005038:	461a      	mov	r2, r3
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <__assert_func+0x2c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4605      	mov	r5, r0
 8005040:	68d8      	ldr	r0, [r3, #12]
 8005042:	b14c      	cbz	r4, 8005058 <__assert_func+0x24>
 8005044:	4b07      	ldr	r3, [pc, #28]	; (8005064 <__assert_func+0x30>)
 8005046:	9100      	str	r1, [sp, #0]
 8005048:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800504c:	4906      	ldr	r1, [pc, #24]	; (8005068 <__assert_func+0x34>)
 800504e:	462b      	mov	r3, r5
 8005050:	f000 f80e 	bl	8005070 <fiprintf>
 8005054:	f000 fa64 	bl	8005520 <abort>
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <__assert_func+0x38>)
 800505a:	461c      	mov	r4, r3
 800505c:	e7f3      	b.n	8005046 <__assert_func+0x12>
 800505e:	bf00      	nop
 8005060:	2000000c 	.word	0x2000000c
 8005064:	08005e44 	.word	0x08005e44
 8005068:	08005e51 	.word	0x08005e51
 800506c:	08005e7f 	.word	0x08005e7f

08005070 <fiprintf>:
 8005070:	b40e      	push	{r1, r2, r3}
 8005072:	b503      	push	{r0, r1, lr}
 8005074:	4601      	mov	r1, r0
 8005076:	ab03      	add	r3, sp, #12
 8005078:	4805      	ldr	r0, [pc, #20]	; (8005090 <fiprintf+0x20>)
 800507a:	f853 2b04 	ldr.w	r2, [r3], #4
 800507e:	6800      	ldr	r0, [r0, #0]
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	f000 f84f 	bl	8005124 <_vfiprintf_r>
 8005086:	b002      	add	sp, #8
 8005088:	f85d eb04 	ldr.w	lr, [sp], #4
 800508c:	b003      	add	sp, #12
 800508e:	4770      	bx	lr
 8005090:	2000000c 	.word	0x2000000c

08005094 <__ascii_mbtowc>:
 8005094:	b082      	sub	sp, #8
 8005096:	b901      	cbnz	r1, 800509a <__ascii_mbtowc+0x6>
 8005098:	a901      	add	r1, sp, #4
 800509a:	b142      	cbz	r2, 80050ae <__ascii_mbtowc+0x1a>
 800509c:	b14b      	cbz	r3, 80050b2 <__ascii_mbtowc+0x1e>
 800509e:	7813      	ldrb	r3, [r2, #0]
 80050a0:	600b      	str	r3, [r1, #0]
 80050a2:	7812      	ldrb	r2, [r2, #0]
 80050a4:	1e10      	subs	r0, r2, #0
 80050a6:	bf18      	it	ne
 80050a8:	2001      	movne	r0, #1
 80050aa:	b002      	add	sp, #8
 80050ac:	4770      	bx	lr
 80050ae:	4610      	mov	r0, r2
 80050b0:	e7fb      	b.n	80050aa <__ascii_mbtowc+0x16>
 80050b2:	f06f 0001 	mvn.w	r0, #1
 80050b6:	e7f8      	b.n	80050aa <__ascii_mbtowc+0x16>

080050b8 <__malloc_lock>:
 80050b8:	4801      	ldr	r0, [pc, #4]	; (80050c0 <__malloc_lock+0x8>)
 80050ba:	f000 bbf1 	b.w	80058a0 <__retarget_lock_acquire_recursive>
 80050be:	bf00      	nop
 80050c0:	200005ec 	.word	0x200005ec

080050c4 <__malloc_unlock>:
 80050c4:	4801      	ldr	r0, [pc, #4]	; (80050cc <__malloc_unlock+0x8>)
 80050c6:	f000 bbec 	b.w	80058a2 <__retarget_lock_release_recursive>
 80050ca:	bf00      	nop
 80050cc:	200005ec 	.word	0x200005ec

080050d0 <__sfputc_r>:
 80050d0:	6893      	ldr	r3, [r2, #8]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	b410      	push	{r4}
 80050d8:	6093      	str	r3, [r2, #8]
 80050da:	da08      	bge.n	80050ee <__sfputc_r+0x1e>
 80050dc:	6994      	ldr	r4, [r2, #24]
 80050de:	42a3      	cmp	r3, r4
 80050e0:	db01      	blt.n	80050e6 <__sfputc_r+0x16>
 80050e2:	290a      	cmp	r1, #10
 80050e4:	d103      	bne.n	80050ee <__sfputc_r+0x1e>
 80050e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ea:	f000 b94b 	b.w	8005384 <__swbuf_r>
 80050ee:	6813      	ldr	r3, [r2, #0]
 80050f0:	1c58      	adds	r0, r3, #1
 80050f2:	6010      	str	r0, [r2, #0]
 80050f4:	7019      	strb	r1, [r3, #0]
 80050f6:	4608      	mov	r0, r1
 80050f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <__sfputs_r>:
 80050fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005100:	4606      	mov	r6, r0
 8005102:	460f      	mov	r7, r1
 8005104:	4614      	mov	r4, r2
 8005106:	18d5      	adds	r5, r2, r3
 8005108:	42ac      	cmp	r4, r5
 800510a:	d101      	bne.n	8005110 <__sfputs_r+0x12>
 800510c:	2000      	movs	r0, #0
 800510e:	e007      	b.n	8005120 <__sfputs_r+0x22>
 8005110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005114:	463a      	mov	r2, r7
 8005116:	4630      	mov	r0, r6
 8005118:	f7ff ffda 	bl	80050d0 <__sfputc_r>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d1f3      	bne.n	8005108 <__sfputs_r+0xa>
 8005120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005124 <_vfiprintf_r>:
 8005124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005128:	460d      	mov	r5, r1
 800512a:	b09d      	sub	sp, #116	; 0x74
 800512c:	4614      	mov	r4, r2
 800512e:	4698      	mov	r8, r3
 8005130:	4606      	mov	r6, r0
 8005132:	b118      	cbz	r0, 800513c <_vfiprintf_r+0x18>
 8005134:	6983      	ldr	r3, [r0, #24]
 8005136:	b90b      	cbnz	r3, 800513c <_vfiprintf_r+0x18>
 8005138:	f000 fb14 	bl	8005764 <__sinit>
 800513c:	4b89      	ldr	r3, [pc, #548]	; (8005364 <_vfiprintf_r+0x240>)
 800513e:	429d      	cmp	r5, r3
 8005140:	d11b      	bne.n	800517a <_vfiprintf_r+0x56>
 8005142:	6875      	ldr	r5, [r6, #4]
 8005144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005146:	07d9      	lsls	r1, r3, #31
 8005148:	d405      	bmi.n	8005156 <_vfiprintf_r+0x32>
 800514a:	89ab      	ldrh	r3, [r5, #12]
 800514c:	059a      	lsls	r2, r3, #22
 800514e:	d402      	bmi.n	8005156 <_vfiprintf_r+0x32>
 8005150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005152:	f000 fba5 	bl	80058a0 <__retarget_lock_acquire_recursive>
 8005156:	89ab      	ldrh	r3, [r5, #12]
 8005158:	071b      	lsls	r3, r3, #28
 800515a:	d501      	bpl.n	8005160 <_vfiprintf_r+0x3c>
 800515c:	692b      	ldr	r3, [r5, #16]
 800515e:	b9eb      	cbnz	r3, 800519c <_vfiprintf_r+0x78>
 8005160:	4629      	mov	r1, r5
 8005162:	4630      	mov	r0, r6
 8005164:	f000 f96e 	bl	8005444 <__swsetup_r>
 8005168:	b1c0      	cbz	r0, 800519c <_vfiprintf_r+0x78>
 800516a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800516c:	07dc      	lsls	r4, r3, #31
 800516e:	d50e      	bpl.n	800518e <_vfiprintf_r+0x6a>
 8005170:	f04f 30ff 	mov.w	r0, #4294967295
 8005174:	b01d      	add	sp, #116	; 0x74
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517a:	4b7b      	ldr	r3, [pc, #492]	; (8005368 <_vfiprintf_r+0x244>)
 800517c:	429d      	cmp	r5, r3
 800517e:	d101      	bne.n	8005184 <_vfiprintf_r+0x60>
 8005180:	68b5      	ldr	r5, [r6, #8]
 8005182:	e7df      	b.n	8005144 <_vfiprintf_r+0x20>
 8005184:	4b79      	ldr	r3, [pc, #484]	; (800536c <_vfiprintf_r+0x248>)
 8005186:	429d      	cmp	r5, r3
 8005188:	bf08      	it	eq
 800518a:	68f5      	ldreq	r5, [r6, #12]
 800518c:	e7da      	b.n	8005144 <_vfiprintf_r+0x20>
 800518e:	89ab      	ldrh	r3, [r5, #12]
 8005190:	0598      	lsls	r0, r3, #22
 8005192:	d4ed      	bmi.n	8005170 <_vfiprintf_r+0x4c>
 8005194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005196:	f000 fb84 	bl	80058a2 <__retarget_lock_release_recursive>
 800519a:	e7e9      	b.n	8005170 <_vfiprintf_r+0x4c>
 800519c:	2300      	movs	r3, #0
 800519e:	9309      	str	r3, [sp, #36]	; 0x24
 80051a0:	2320      	movs	r3, #32
 80051a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051aa:	2330      	movs	r3, #48	; 0x30
 80051ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005370 <_vfiprintf_r+0x24c>
 80051b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051b4:	f04f 0901 	mov.w	r9, #1
 80051b8:	4623      	mov	r3, r4
 80051ba:	469a      	mov	sl, r3
 80051bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051c0:	b10a      	cbz	r2, 80051c6 <_vfiprintf_r+0xa2>
 80051c2:	2a25      	cmp	r2, #37	; 0x25
 80051c4:	d1f9      	bne.n	80051ba <_vfiprintf_r+0x96>
 80051c6:	ebba 0b04 	subs.w	fp, sl, r4
 80051ca:	d00b      	beq.n	80051e4 <_vfiprintf_r+0xc0>
 80051cc:	465b      	mov	r3, fp
 80051ce:	4622      	mov	r2, r4
 80051d0:	4629      	mov	r1, r5
 80051d2:	4630      	mov	r0, r6
 80051d4:	f7ff ff93 	bl	80050fe <__sfputs_r>
 80051d8:	3001      	adds	r0, #1
 80051da:	f000 80aa 	beq.w	8005332 <_vfiprintf_r+0x20e>
 80051de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051e0:	445a      	add	r2, fp
 80051e2:	9209      	str	r2, [sp, #36]	; 0x24
 80051e4:	f89a 3000 	ldrb.w	r3, [sl]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80a2 	beq.w	8005332 <_vfiprintf_r+0x20e>
 80051ee:	2300      	movs	r3, #0
 80051f0:	f04f 32ff 	mov.w	r2, #4294967295
 80051f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051f8:	f10a 0a01 	add.w	sl, sl, #1
 80051fc:	9304      	str	r3, [sp, #16]
 80051fe:	9307      	str	r3, [sp, #28]
 8005200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005204:	931a      	str	r3, [sp, #104]	; 0x68
 8005206:	4654      	mov	r4, sl
 8005208:	2205      	movs	r2, #5
 800520a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520e:	4858      	ldr	r0, [pc, #352]	; (8005370 <_vfiprintf_r+0x24c>)
 8005210:	f7fb f81e 	bl	8000250 <memchr>
 8005214:	9a04      	ldr	r2, [sp, #16]
 8005216:	b9d8      	cbnz	r0, 8005250 <_vfiprintf_r+0x12c>
 8005218:	06d1      	lsls	r1, r2, #27
 800521a:	bf44      	itt	mi
 800521c:	2320      	movmi	r3, #32
 800521e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005222:	0713      	lsls	r3, r2, #28
 8005224:	bf44      	itt	mi
 8005226:	232b      	movmi	r3, #43	; 0x2b
 8005228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800522c:	f89a 3000 	ldrb.w	r3, [sl]
 8005230:	2b2a      	cmp	r3, #42	; 0x2a
 8005232:	d015      	beq.n	8005260 <_vfiprintf_r+0x13c>
 8005234:	9a07      	ldr	r2, [sp, #28]
 8005236:	4654      	mov	r4, sl
 8005238:	2000      	movs	r0, #0
 800523a:	f04f 0c0a 	mov.w	ip, #10
 800523e:	4621      	mov	r1, r4
 8005240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005244:	3b30      	subs	r3, #48	; 0x30
 8005246:	2b09      	cmp	r3, #9
 8005248:	d94e      	bls.n	80052e8 <_vfiprintf_r+0x1c4>
 800524a:	b1b0      	cbz	r0, 800527a <_vfiprintf_r+0x156>
 800524c:	9207      	str	r2, [sp, #28]
 800524e:	e014      	b.n	800527a <_vfiprintf_r+0x156>
 8005250:	eba0 0308 	sub.w	r3, r0, r8
 8005254:	fa09 f303 	lsl.w	r3, r9, r3
 8005258:	4313      	orrs	r3, r2
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	46a2      	mov	sl, r4
 800525e:	e7d2      	b.n	8005206 <_vfiprintf_r+0xe2>
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	1d19      	adds	r1, r3, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	9103      	str	r1, [sp, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	bfbb      	ittet	lt
 800526c:	425b      	neglt	r3, r3
 800526e:	f042 0202 	orrlt.w	r2, r2, #2
 8005272:	9307      	strge	r3, [sp, #28]
 8005274:	9307      	strlt	r3, [sp, #28]
 8005276:	bfb8      	it	lt
 8005278:	9204      	strlt	r2, [sp, #16]
 800527a:	7823      	ldrb	r3, [r4, #0]
 800527c:	2b2e      	cmp	r3, #46	; 0x2e
 800527e:	d10c      	bne.n	800529a <_vfiprintf_r+0x176>
 8005280:	7863      	ldrb	r3, [r4, #1]
 8005282:	2b2a      	cmp	r3, #42	; 0x2a
 8005284:	d135      	bne.n	80052f2 <_vfiprintf_r+0x1ce>
 8005286:	9b03      	ldr	r3, [sp, #12]
 8005288:	1d1a      	adds	r2, r3, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	9203      	str	r2, [sp, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	bfb8      	it	lt
 8005292:	f04f 33ff 	movlt.w	r3, #4294967295
 8005296:	3402      	adds	r4, #2
 8005298:	9305      	str	r3, [sp, #20]
 800529a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005380 <_vfiprintf_r+0x25c>
 800529e:	7821      	ldrb	r1, [r4, #0]
 80052a0:	2203      	movs	r2, #3
 80052a2:	4650      	mov	r0, sl
 80052a4:	f7fa ffd4 	bl	8000250 <memchr>
 80052a8:	b140      	cbz	r0, 80052bc <_vfiprintf_r+0x198>
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	eba0 000a 	sub.w	r0, r0, sl
 80052b0:	fa03 f000 	lsl.w	r0, r3, r0
 80052b4:	9b04      	ldr	r3, [sp, #16]
 80052b6:	4303      	orrs	r3, r0
 80052b8:	3401      	adds	r4, #1
 80052ba:	9304      	str	r3, [sp, #16]
 80052bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c0:	482c      	ldr	r0, [pc, #176]	; (8005374 <_vfiprintf_r+0x250>)
 80052c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052c6:	2206      	movs	r2, #6
 80052c8:	f7fa ffc2 	bl	8000250 <memchr>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d03f      	beq.n	8005350 <_vfiprintf_r+0x22c>
 80052d0:	4b29      	ldr	r3, [pc, #164]	; (8005378 <_vfiprintf_r+0x254>)
 80052d2:	bb1b      	cbnz	r3, 800531c <_vfiprintf_r+0x1f8>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	3307      	adds	r3, #7
 80052d8:	f023 0307 	bic.w	r3, r3, #7
 80052dc:	3308      	adds	r3, #8
 80052de:	9303      	str	r3, [sp, #12]
 80052e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e2:	443b      	add	r3, r7
 80052e4:	9309      	str	r3, [sp, #36]	; 0x24
 80052e6:	e767      	b.n	80051b8 <_vfiprintf_r+0x94>
 80052e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80052ec:	460c      	mov	r4, r1
 80052ee:	2001      	movs	r0, #1
 80052f0:	e7a5      	b.n	800523e <_vfiprintf_r+0x11a>
 80052f2:	2300      	movs	r3, #0
 80052f4:	3401      	adds	r4, #1
 80052f6:	9305      	str	r3, [sp, #20]
 80052f8:	4619      	mov	r1, r3
 80052fa:	f04f 0c0a 	mov.w	ip, #10
 80052fe:	4620      	mov	r0, r4
 8005300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005304:	3a30      	subs	r2, #48	; 0x30
 8005306:	2a09      	cmp	r2, #9
 8005308:	d903      	bls.n	8005312 <_vfiprintf_r+0x1ee>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0c5      	beq.n	800529a <_vfiprintf_r+0x176>
 800530e:	9105      	str	r1, [sp, #20]
 8005310:	e7c3      	b.n	800529a <_vfiprintf_r+0x176>
 8005312:	fb0c 2101 	mla	r1, ip, r1, r2
 8005316:	4604      	mov	r4, r0
 8005318:	2301      	movs	r3, #1
 800531a:	e7f0      	b.n	80052fe <_vfiprintf_r+0x1da>
 800531c:	ab03      	add	r3, sp, #12
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	462a      	mov	r2, r5
 8005322:	4b16      	ldr	r3, [pc, #88]	; (800537c <_vfiprintf_r+0x258>)
 8005324:	a904      	add	r1, sp, #16
 8005326:	4630      	mov	r0, r6
 8005328:	f7fe f832 	bl	8003390 <_printf_float>
 800532c:	4607      	mov	r7, r0
 800532e:	1c78      	adds	r0, r7, #1
 8005330:	d1d6      	bne.n	80052e0 <_vfiprintf_r+0x1bc>
 8005332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005334:	07d9      	lsls	r1, r3, #31
 8005336:	d405      	bmi.n	8005344 <_vfiprintf_r+0x220>
 8005338:	89ab      	ldrh	r3, [r5, #12]
 800533a:	059a      	lsls	r2, r3, #22
 800533c:	d402      	bmi.n	8005344 <_vfiprintf_r+0x220>
 800533e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005340:	f000 faaf 	bl	80058a2 <__retarget_lock_release_recursive>
 8005344:	89ab      	ldrh	r3, [r5, #12]
 8005346:	065b      	lsls	r3, r3, #25
 8005348:	f53f af12 	bmi.w	8005170 <_vfiprintf_r+0x4c>
 800534c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800534e:	e711      	b.n	8005174 <_vfiprintf_r+0x50>
 8005350:	ab03      	add	r3, sp, #12
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	462a      	mov	r2, r5
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <_vfiprintf_r+0x258>)
 8005358:	a904      	add	r1, sp, #16
 800535a:	4630      	mov	r0, r6
 800535c:	f7fe faa4 	bl	80038a8 <_printf_i>
 8005360:	e7e4      	b.n	800532c <_vfiprintf_r+0x208>
 8005362:	bf00      	nop
 8005364:	08005fbc 	.word	0x08005fbc
 8005368:	08005fdc 	.word	0x08005fdc
 800536c:	08005f9c 	.word	0x08005f9c
 8005370:	08005e8a 	.word	0x08005e8a
 8005374:	08005e94 	.word	0x08005e94
 8005378:	08003391 	.word	0x08003391
 800537c:	080050ff 	.word	0x080050ff
 8005380:	08005e90 	.word	0x08005e90

08005384 <__swbuf_r>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	460e      	mov	r6, r1
 8005388:	4614      	mov	r4, r2
 800538a:	4605      	mov	r5, r0
 800538c:	b118      	cbz	r0, 8005396 <__swbuf_r+0x12>
 800538e:	6983      	ldr	r3, [r0, #24]
 8005390:	b90b      	cbnz	r3, 8005396 <__swbuf_r+0x12>
 8005392:	f000 f9e7 	bl	8005764 <__sinit>
 8005396:	4b21      	ldr	r3, [pc, #132]	; (800541c <__swbuf_r+0x98>)
 8005398:	429c      	cmp	r4, r3
 800539a:	d12b      	bne.n	80053f4 <__swbuf_r+0x70>
 800539c:	686c      	ldr	r4, [r5, #4]
 800539e:	69a3      	ldr	r3, [r4, #24]
 80053a0:	60a3      	str	r3, [r4, #8]
 80053a2:	89a3      	ldrh	r3, [r4, #12]
 80053a4:	071a      	lsls	r2, r3, #28
 80053a6:	d52f      	bpl.n	8005408 <__swbuf_r+0x84>
 80053a8:	6923      	ldr	r3, [r4, #16]
 80053aa:	b36b      	cbz	r3, 8005408 <__swbuf_r+0x84>
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	6820      	ldr	r0, [r4, #0]
 80053b0:	1ac0      	subs	r0, r0, r3
 80053b2:	6963      	ldr	r3, [r4, #20]
 80053b4:	b2f6      	uxtb	r6, r6
 80053b6:	4283      	cmp	r3, r0
 80053b8:	4637      	mov	r7, r6
 80053ba:	dc04      	bgt.n	80053c6 <__swbuf_r+0x42>
 80053bc:	4621      	mov	r1, r4
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 f93c 	bl	800563c <_fflush_r>
 80053c4:	bb30      	cbnz	r0, 8005414 <__swbuf_r+0x90>
 80053c6:	68a3      	ldr	r3, [r4, #8]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	60a3      	str	r3, [r4, #8]
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	6022      	str	r2, [r4, #0]
 80053d2:	701e      	strb	r6, [r3, #0]
 80053d4:	6963      	ldr	r3, [r4, #20]
 80053d6:	3001      	adds	r0, #1
 80053d8:	4283      	cmp	r3, r0
 80053da:	d004      	beq.n	80053e6 <__swbuf_r+0x62>
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	07db      	lsls	r3, r3, #31
 80053e0:	d506      	bpl.n	80053f0 <__swbuf_r+0x6c>
 80053e2:	2e0a      	cmp	r6, #10
 80053e4:	d104      	bne.n	80053f0 <__swbuf_r+0x6c>
 80053e6:	4621      	mov	r1, r4
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 f927 	bl	800563c <_fflush_r>
 80053ee:	b988      	cbnz	r0, 8005414 <__swbuf_r+0x90>
 80053f0:	4638      	mov	r0, r7
 80053f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f4:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <__swbuf_r+0x9c>)
 80053f6:	429c      	cmp	r4, r3
 80053f8:	d101      	bne.n	80053fe <__swbuf_r+0x7a>
 80053fa:	68ac      	ldr	r4, [r5, #8]
 80053fc:	e7cf      	b.n	800539e <__swbuf_r+0x1a>
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <__swbuf_r+0xa0>)
 8005400:	429c      	cmp	r4, r3
 8005402:	bf08      	it	eq
 8005404:	68ec      	ldreq	r4, [r5, #12]
 8005406:	e7ca      	b.n	800539e <__swbuf_r+0x1a>
 8005408:	4621      	mov	r1, r4
 800540a:	4628      	mov	r0, r5
 800540c:	f000 f81a 	bl	8005444 <__swsetup_r>
 8005410:	2800      	cmp	r0, #0
 8005412:	d0cb      	beq.n	80053ac <__swbuf_r+0x28>
 8005414:	f04f 37ff 	mov.w	r7, #4294967295
 8005418:	e7ea      	b.n	80053f0 <__swbuf_r+0x6c>
 800541a:	bf00      	nop
 800541c:	08005fbc 	.word	0x08005fbc
 8005420:	08005fdc 	.word	0x08005fdc
 8005424:	08005f9c 	.word	0x08005f9c

08005428 <__ascii_wctomb>:
 8005428:	b149      	cbz	r1, 800543e <__ascii_wctomb+0x16>
 800542a:	2aff      	cmp	r2, #255	; 0xff
 800542c:	bf85      	ittet	hi
 800542e:	238a      	movhi	r3, #138	; 0x8a
 8005430:	6003      	strhi	r3, [r0, #0]
 8005432:	700a      	strbls	r2, [r1, #0]
 8005434:	f04f 30ff 	movhi.w	r0, #4294967295
 8005438:	bf98      	it	ls
 800543a:	2001      	movls	r0, #1
 800543c:	4770      	bx	lr
 800543e:	4608      	mov	r0, r1
 8005440:	4770      	bx	lr
	...

08005444 <__swsetup_r>:
 8005444:	4b32      	ldr	r3, [pc, #200]	; (8005510 <__swsetup_r+0xcc>)
 8005446:	b570      	push	{r4, r5, r6, lr}
 8005448:	681d      	ldr	r5, [r3, #0]
 800544a:	4606      	mov	r6, r0
 800544c:	460c      	mov	r4, r1
 800544e:	b125      	cbz	r5, 800545a <__swsetup_r+0x16>
 8005450:	69ab      	ldr	r3, [r5, #24]
 8005452:	b913      	cbnz	r3, 800545a <__swsetup_r+0x16>
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f985 	bl	8005764 <__sinit>
 800545a:	4b2e      	ldr	r3, [pc, #184]	; (8005514 <__swsetup_r+0xd0>)
 800545c:	429c      	cmp	r4, r3
 800545e:	d10f      	bne.n	8005480 <__swsetup_r+0x3c>
 8005460:	686c      	ldr	r4, [r5, #4]
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005468:	0719      	lsls	r1, r3, #28
 800546a:	d42c      	bmi.n	80054c6 <__swsetup_r+0x82>
 800546c:	06dd      	lsls	r5, r3, #27
 800546e:	d411      	bmi.n	8005494 <__swsetup_r+0x50>
 8005470:	2309      	movs	r3, #9
 8005472:	6033      	str	r3, [r6, #0]
 8005474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	f04f 30ff 	mov.w	r0, #4294967295
 800547e:	e03e      	b.n	80054fe <__swsetup_r+0xba>
 8005480:	4b25      	ldr	r3, [pc, #148]	; (8005518 <__swsetup_r+0xd4>)
 8005482:	429c      	cmp	r4, r3
 8005484:	d101      	bne.n	800548a <__swsetup_r+0x46>
 8005486:	68ac      	ldr	r4, [r5, #8]
 8005488:	e7eb      	b.n	8005462 <__swsetup_r+0x1e>
 800548a:	4b24      	ldr	r3, [pc, #144]	; (800551c <__swsetup_r+0xd8>)
 800548c:	429c      	cmp	r4, r3
 800548e:	bf08      	it	eq
 8005490:	68ec      	ldreq	r4, [r5, #12]
 8005492:	e7e6      	b.n	8005462 <__swsetup_r+0x1e>
 8005494:	0758      	lsls	r0, r3, #29
 8005496:	d512      	bpl.n	80054be <__swsetup_r+0x7a>
 8005498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800549a:	b141      	cbz	r1, 80054ae <__swsetup_r+0x6a>
 800549c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054a0:	4299      	cmp	r1, r3
 80054a2:	d002      	beq.n	80054aa <__swsetup_r+0x66>
 80054a4:	4630      	mov	r0, r6
 80054a6:	f7ff fcd5 	bl	8004e54 <_free_r>
 80054aa:	2300      	movs	r3, #0
 80054ac:	6363      	str	r3, [r4, #52]	; 0x34
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	2300      	movs	r3, #0
 80054b8:	6063      	str	r3, [r4, #4]
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	f043 0308 	orr.w	r3, r3, #8
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	b94b      	cbnz	r3, 80054de <__swsetup_r+0x9a>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d4:	d003      	beq.n	80054de <__swsetup_r+0x9a>
 80054d6:	4621      	mov	r1, r4
 80054d8:	4630      	mov	r0, r6
 80054da:	f000 fa09 	bl	80058f0 <__smakebuf_r>
 80054de:	89a0      	ldrh	r0, [r4, #12]
 80054e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054e4:	f010 0301 	ands.w	r3, r0, #1
 80054e8:	d00a      	beq.n	8005500 <__swsetup_r+0xbc>
 80054ea:	2300      	movs	r3, #0
 80054ec:	60a3      	str	r3, [r4, #8]
 80054ee:	6963      	ldr	r3, [r4, #20]
 80054f0:	425b      	negs	r3, r3
 80054f2:	61a3      	str	r3, [r4, #24]
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	b943      	cbnz	r3, 800550a <__swsetup_r+0xc6>
 80054f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054fc:	d1ba      	bne.n	8005474 <__swsetup_r+0x30>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	0781      	lsls	r1, r0, #30
 8005502:	bf58      	it	pl
 8005504:	6963      	ldrpl	r3, [r4, #20]
 8005506:	60a3      	str	r3, [r4, #8]
 8005508:	e7f4      	b.n	80054f4 <__swsetup_r+0xb0>
 800550a:	2000      	movs	r0, #0
 800550c:	e7f7      	b.n	80054fe <__swsetup_r+0xba>
 800550e:	bf00      	nop
 8005510:	2000000c 	.word	0x2000000c
 8005514:	08005fbc 	.word	0x08005fbc
 8005518:	08005fdc 	.word	0x08005fdc
 800551c:	08005f9c 	.word	0x08005f9c

08005520 <abort>:
 8005520:	b508      	push	{r3, lr}
 8005522:	2006      	movs	r0, #6
 8005524:	f000 fa4c 	bl	80059c0 <raise>
 8005528:	2001      	movs	r0, #1
 800552a:	f000 fb5f 	bl	8005bec <_exit>
	...

08005530 <__sflush_r>:
 8005530:	898a      	ldrh	r2, [r1, #12]
 8005532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005536:	4605      	mov	r5, r0
 8005538:	0710      	lsls	r0, r2, #28
 800553a:	460c      	mov	r4, r1
 800553c:	d458      	bmi.n	80055f0 <__sflush_r+0xc0>
 800553e:	684b      	ldr	r3, [r1, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	dc05      	bgt.n	8005550 <__sflush_r+0x20>
 8005544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	dc02      	bgt.n	8005550 <__sflush_r+0x20>
 800554a:	2000      	movs	r0, #0
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005552:	2e00      	cmp	r6, #0
 8005554:	d0f9      	beq.n	800554a <__sflush_r+0x1a>
 8005556:	2300      	movs	r3, #0
 8005558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800555c:	682f      	ldr	r7, [r5, #0]
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	d032      	beq.n	80055c8 <__sflush_r+0x98>
 8005562:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	075a      	lsls	r2, r3, #29
 8005568:	d505      	bpl.n	8005576 <__sflush_r+0x46>
 800556a:	6863      	ldr	r3, [r4, #4]
 800556c:	1ac0      	subs	r0, r0, r3
 800556e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005570:	b10b      	cbz	r3, 8005576 <__sflush_r+0x46>
 8005572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005574:	1ac0      	subs	r0, r0, r3
 8005576:	2300      	movs	r3, #0
 8005578:	4602      	mov	r2, r0
 800557a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800557c:	6a21      	ldr	r1, [r4, #32]
 800557e:	4628      	mov	r0, r5
 8005580:	47b0      	blx	r6
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	d106      	bne.n	8005596 <__sflush_r+0x66>
 8005588:	6829      	ldr	r1, [r5, #0]
 800558a:	291d      	cmp	r1, #29
 800558c:	d82c      	bhi.n	80055e8 <__sflush_r+0xb8>
 800558e:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <__sflush_r+0x108>)
 8005590:	40ca      	lsrs	r2, r1
 8005592:	07d6      	lsls	r6, r2, #31
 8005594:	d528      	bpl.n	80055e8 <__sflush_r+0xb8>
 8005596:	2200      	movs	r2, #0
 8005598:	6062      	str	r2, [r4, #4]
 800559a:	04d9      	lsls	r1, r3, #19
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	d504      	bpl.n	80055ac <__sflush_r+0x7c>
 80055a2:	1c42      	adds	r2, r0, #1
 80055a4:	d101      	bne.n	80055aa <__sflush_r+0x7a>
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	b903      	cbnz	r3, 80055ac <__sflush_r+0x7c>
 80055aa:	6560      	str	r0, [r4, #84]	; 0x54
 80055ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055ae:	602f      	str	r7, [r5, #0]
 80055b0:	2900      	cmp	r1, #0
 80055b2:	d0ca      	beq.n	800554a <__sflush_r+0x1a>
 80055b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055b8:	4299      	cmp	r1, r3
 80055ba:	d002      	beq.n	80055c2 <__sflush_r+0x92>
 80055bc:	4628      	mov	r0, r5
 80055be:	f7ff fc49 	bl	8004e54 <_free_r>
 80055c2:	2000      	movs	r0, #0
 80055c4:	6360      	str	r0, [r4, #52]	; 0x34
 80055c6:	e7c1      	b.n	800554c <__sflush_r+0x1c>
 80055c8:	6a21      	ldr	r1, [r4, #32]
 80055ca:	2301      	movs	r3, #1
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b0      	blx	r6
 80055d0:	1c41      	adds	r1, r0, #1
 80055d2:	d1c7      	bne.n	8005564 <__sflush_r+0x34>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0c4      	beq.n	8005564 <__sflush_r+0x34>
 80055da:	2b1d      	cmp	r3, #29
 80055dc:	d001      	beq.n	80055e2 <__sflush_r+0xb2>
 80055de:	2b16      	cmp	r3, #22
 80055e0:	d101      	bne.n	80055e6 <__sflush_r+0xb6>
 80055e2:	602f      	str	r7, [r5, #0]
 80055e4:	e7b1      	b.n	800554a <__sflush_r+0x1a>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	e7ad      	b.n	800554c <__sflush_r+0x1c>
 80055f0:	690f      	ldr	r7, [r1, #16]
 80055f2:	2f00      	cmp	r7, #0
 80055f4:	d0a9      	beq.n	800554a <__sflush_r+0x1a>
 80055f6:	0793      	lsls	r3, r2, #30
 80055f8:	680e      	ldr	r6, [r1, #0]
 80055fa:	bf08      	it	eq
 80055fc:	694b      	ldreq	r3, [r1, #20]
 80055fe:	600f      	str	r7, [r1, #0]
 8005600:	bf18      	it	ne
 8005602:	2300      	movne	r3, #0
 8005604:	eba6 0807 	sub.w	r8, r6, r7
 8005608:	608b      	str	r3, [r1, #8]
 800560a:	f1b8 0f00 	cmp.w	r8, #0
 800560e:	dd9c      	ble.n	800554a <__sflush_r+0x1a>
 8005610:	6a21      	ldr	r1, [r4, #32]
 8005612:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005614:	4643      	mov	r3, r8
 8005616:	463a      	mov	r2, r7
 8005618:	4628      	mov	r0, r5
 800561a:	47b0      	blx	r6
 800561c:	2800      	cmp	r0, #0
 800561e:	dc06      	bgt.n	800562e <__sflush_r+0xfe>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005626:	81a3      	strh	r3, [r4, #12]
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	e78e      	b.n	800554c <__sflush_r+0x1c>
 800562e:	4407      	add	r7, r0
 8005630:	eba8 0800 	sub.w	r8, r8, r0
 8005634:	e7e9      	b.n	800560a <__sflush_r+0xda>
 8005636:	bf00      	nop
 8005638:	20400001 	.word	0x20400001

0800563c <_fflush_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	690b      	ldr	r3, [r1, #16]
 8005640:	4605      	mov	r5, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b913      	cbnz	r3, 800564c <_fflush_r+0x10>
 8005646:	2500      	movs	r5, #0
 8005648:	4628      	mov	r0, r5
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	b118      	cbz	r0, 8005656 <_fflush_r+0x1a>
 800564e:	6983      	ldr	r3, [r0, #24]
 8005650:	b90b      	cbnz	r3, 8005656 <_fflush_r+0x1a>
 8005652:	f000 f887 	bl	8005764 <__sinit>
 8005656:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <_fflush_r+0x6c>)
 8005658:	429c      	cmp	r4, r3
 800565a:	d11b      	bne.n	8005694 <_fflush_r+0x58>
 800565c:	686c      	ldr	r4, [r5, #4]
 800565e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0ef      	beq.n	8005646 <_fflush_r+0xa>
 8005666:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005668:	07d0      	lsls	r0, r2, #31
 800566a:	d404      	bmi.n	8005676 <_fflush_r+0x3a>
 800566c:	0599      	lsls	r1, r3, #22
 800566e:	d402      	bmi.n	8005676 <_fflush_r+0x3a>
 8005670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005672:	f000 f915 	bl	80058a0 <__retarget_lock_acquire_recursive>
 8005676:	4628      	mov	r0, r5
 8005678:	4621      	mov	r1, r4
 800567a:	f7ff ff59 	bl	8005530 <__sflush_r>
 800567e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005680:	07da      	lsls	r2, r3, #31
 8005682:	4605      	mov	r5, r0
 8005684:	d4e0      	bmi.n	8005648 <_fflush_r+0xc>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	059b      	lsls	r3, r3, #22
 800568a:	d4dd      	bmi.n	8005648 <_fflush_r+0xc>
 800568c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800568e:	f000 f908 	bl	80058a2 <__retarget_lock_release_recursive>
 8005692:	e7d9      	b.n	8005648 <_fflush_r+0xc>
 8005694:	4b05      	ldr	r3, [pc, #20]	; (80056ac <_fflush_r+0x70>)
 8005696:	429c      	cmp	r4, r3
 8005698:	d101      	bne.n	800569e <_fflush_r+0x62>
 800569a:	68ac      	ldr	r4, [r5, #8]
 800569c:	e7df      	b.n	800565e <_fflush_r+0x22>
 800569e:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <_fflush_r+0x74>)
 80056a0:	429c      	cmp	r4, r3
 80056a2:	bf08      	it	eq
 80056a4:	68ec      	ldreq	r4, [r5, #12]
 80056a6:	e7da      	b.n	800565e <_fflush_r+0x22>
 80056a8:	08005fbc 	.word	0x08005fbc
 80056ac:	08005fdc 	.word	0x08005fdc
 80056b0:	08005f9c 	.word	0x08005f9c

080056b4 <std>:
 80056b4:	2300      	movs	r3, #0
 80056b6:	b510      	push	{r4, lr}
 80056b8:	4604      	mov	r4, r0
 80056ba:	e9c0 3300 	strd	r3, r3, [r0]
 80056be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056c2:	6083      	str	r3, [r0, #8]
 80056c4:	8181      	strh	r1, [r0, #12]
 80056c6:	6643      	str	r3, [r0, #100]	; 0x64
 80056c8:	81c2      	strh	r2, [r0, #14]
 80056ca:	6183      	str	r3, [r0, #24]
 80056cc:	4619      	mov	r1, r3
 80056ce:	2208      	movs	r2, #8
 80056d0:	305c      	adds	r0, #92	; 0x5c
 80056d2:	f7fd fdc5 	bl	8003260 <memset>
 80056d6:	4b05      	ldr	r3, [pc, #20]	; (80056ec <std+0x38>)
 80056d8:	6263      	str	r3, [r4, #36]	; 0x24
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <std+0x3c>)
 80056dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <std+0x40>)
 80056e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <std+0x44>)
 80056e4:	6224      	str	r4, [r4, #32]
 80056e6:	6323      	str	r3, [r4, #48]	; 0x30
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	bf00      	nop
 80056ec:	080059f9 	.word	0x080059f9
 80056f0:	08005a1b 	.word	0x08005a1b
 80056f4:	08005a53 	.word	0x08005a53
 80056f8:	08005a77 	.word	0x08005a77

080056fc <_cleanup_r>:
 80056fc:	4901      	ldr	r1, [pc, #4]	; (8005704 <_cleanup_r+0x8>)
 80056fe:	f000 b8af 	b.w	8005860 <_fwalk_reent>
 8005702:	bf00      	nop
 8005704:	0800563d 	.word	0x0800563d

08005708 <__sfmoreglue>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	2268      	movs	r2, #104	; 0x68
 800570c:	1e4d      	subs	r5, r1, #1
 800570e:	4355      	muls	r5, r2
 8005710:	460e      	mov	r6, r1
 8005712:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005716:	f7ff fc09 	bl	8004f2c <_malloc_r>
 800571a:	4604      	mov	r4, r0
 800571c:	b140      	cbz	r0, 8005730 <__sfmoreglue+0x28>
 800571e:	2100      	movs	r1, #0
 8005720:	e9c0 1600 	strd	r1, r6, [r0]
 8005724:	300c      	adds	r0, #12
 8005726:	60a0      	str	r0, [r4, #8]
 8005728:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800572c:	f7fd fd98 	bl	8003260 <memset>
 8005730:	4620      	mov	r0, r4
 8005732:	bd70      	pop	{r4, r5, r6, pc}

08005734 <__sfp_lock_acquire>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__sfp_lock_acquire+0x8>)
 8005736:	f000 b8b3 	b.w	80058a0 <__retarget_lock_acquire_recursive>
 800573a:	bf00      	nop
 800573c:	200005ed 	.word	0x200005ed

08005740 <__sfp_lock_release>:
 8005740:	4801      	ldr	r0, [pc, #4]	; (8005748 <__sfp_lock_release+0x8>)
 8005742:	f000 b8ae 	b.w	80058a2 <__retarget_lock_release_recursive>
 8005746:	bf00      	nop
 8005748:	200005ed 	.word	0x200005ed

0800574c <__sinit_lock_acquire>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__sinit_lock_acquire+0x8>)
 800574e:	f000 b8a7 	b.w	80058a0 <__retarget_lock_acquire_recursive>
 8005752:	bf00      	nop
 8005754:	200005ee 	.word	0x200005ee

08005758 <__sinit_lock_release>:
 8005758:	4801      	ldr	r0, [pc, #4]	; (8005760 <__sinit_lock_release+0x8>)
 800575a:	f000 b8a2 	b.w	80058a2 <__retarget_lock_release_recursive>
 800575e:	bf00      	nop
 8005760:	200005ee 	.word	0x200005ee

08005764 <__sinit>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4604      	mov	r4, r0
 8005768:	f7ff fff0 	bl	800574c <__sinit_lock_acquire>
 800576c:	69a3      	ldr	r3, [r4, #24]
 800576e:	b11b      	cbz	r3, 8005778 <__sinit+0x14>
 8005770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005774:	f7ff bff0 	b.w	8005758 <__sinit_lock_release>
 8005778:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800577c:	6523      	str	r3, [r4, #80]	; 0x50
 800577e:	4b13      	ldr	r3, [pc, #76]	; (80057cc <__sinit+0x68>)
 8005780:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <__sinit+0x6c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	62a2      	str	r2, [r4, #40]	; 0x28
 8005786:	42a3      	cmp	r3, r4
 8005788:	bf04      	itt	eq
 800578a:	2301      	moveq	r3, #1
 800578c:	61a3      	streq	r3, [r4, #24]
 800578e:	4620      	mov	r0, r4
 8005790:	f000 f820 	bl	80057d4 <__sfp>
 8005794:	6060      	str	r0, [r4, #4]
 8005796:	4620      	mov	r0, r4
 8005798:	f000 f81c 	bl	80057d4 <__sfp>
 800579c:	60a0      	str	r0, [r4, #8]
 800579e:	4620      	mov	r0, r4
 80057a0:	f000 f818 	bl	80057d4 <__sfp>
 80057a4:	2200      	movs	r2, #0
 80057a6:	60e0      	str	r0, [r4, #12]
 80057a8:	2104      	movs	r1, #4
 80057aa:	6860      	ldr	r0, [r4, #4]
 80057ac:	f7ff ff82 	bl	80056b4 <std>
 80057b0:	68a0      	ldr	r0, [r4, #8]
 80057b2:	2201      	movs	r2, #1
 80057b4:	2109      	movs	r1, #9
 80057b6:	f7ff ff7d 	bl	80056b4 <std>
 80057ba:	68e0      	ldr	r0, [r4, #12]
 80057bc:	2202      	movs	r2, #2
 80057be:	2112      	movs	r1, #18
 80057c0:	f7ff ff78 	bl	80056b4 <std>
 80057c4:	2301      	movs	r3, #1
 80057c6:	61a3      	str	r3, [r4, #24]
 80057c8:	e7d2      	b.n	8005770 <__sinit+0xc>
 80057ca:	bf00      	nop
 80057cc:	08005c20 	.word	0x08005c20
 80057d0:	080056fd 	.word	0x080056fd

080057d4 <__sfp>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	4607      	mov	r7, r0
 80057d8:	f7ff ffac 	bl	8005734 <__sfp_lock_acquire>
 80057dc:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <__sfp+0x84>)
 80057de:	681e      	ldr	r6, [r3, #0]
 80057e0:	69b3      	ldr	r3, [r6, #24]
 80057e2:	b913      	cbnz	r3, 80057ea <__sfp+0x16>
 80057e4:	4630      	mov	r0, r6
 80057e6:	f7ff ffbd 	bl	8005764 <__sinit>
 80057ea:	3648      	adds	r6, #72	; 0x48
 80057ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	d503      	bpl.n	80057fc <__sfp+0x28>
 80057f4:	6833      	ldr	r3, [r6, #0]
 80057f6:	b30b      	cbz	r3, 800583c <__sfp+0x68>
 80057f8:	6836      	ldr	r6, [r6, #0]
 80057fa:	e7f7      	b.n	80057ec <__sfp+0x18>
 80057fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005800:	b9d5      	cbnz	r5, 8005838 <__sfp+0x64>
 8005802:	4b16      	ldr	r3, [pc, #88]	; (800585c <__sfp+0x88>)
 8005804:	60e3      	str	r3, [r4, #12]
 8005806:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800580a:	6665      	str	r5, [r4, #100]	; 0x64
 800580c:	f000 f847 	bl	800589e <__retarget_lock_init_recursive>
 8005810:	f7ff ff96 	bl	8005740 <__sfp_lock_release>
 8005814:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005818:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800581c:	6025      	str	r5, [r4, #0]
 800581e:	61a5      	str	r5, [r4, #24]
 8005820:	2208      	movs	r2, #8
 8005822:	4629      	mov	r1, r5
 8005824:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005828:	f7fd fd1a 	bl	8003260 <memset>
 800582c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005830:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005834:	4620      	mov	r0, r4
 8005836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005838:	3468      	adds	r4, #104	; 0x68
 800583a:	e7d9      	b.n	80057f0 <__sfp+0x1c>
 800583c:	2104      	movs	r1, #4
 800583e:	4638      	mov	r0, r7
 8005840:	f7ff ff62 	bl	8005708 <__sfmoreglue>
 8005844:	4604      	mov	r4, r0
 8005846:	6030      	str	r0, [r6, #0]
 8005848:	2800      	cmp	r0, #0
 800584a:	d1d5      	bne.n	80057f8 <__sfp+0x24>
 800584c:	f7ff ff78 	bl	8005740 <__sfp_lock_release>
 8005850:	230c      	movs	r3, #12
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	e7ee      	b.n	8005834 <__sfp+0x60>
 8005856:	bf00      	nop
 8005858:	08005c20 	.word	0x08005c20
 800585c:	ffff0001 	.word	0xffff0001

08005860 <_fwalk_reent>:
 8005860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005864:	4606      	mov	r6, r0
 8005866:	4688      	mov	r8, r1
 8005868:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800586c:	2700      	movs	r7, #0
 800586e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005872:	f1b9 0901 	subs.w	r9, r9, #1
 8005876:	d505      	bpl.n	8005884 <_fwalk_reent+0x24>
 8005878:	6824      	ldr	r4, [r4, #0]
 800587a:	2c00      	cmp	r4, #0
 800587c:	d1f7      	bne.n	800586e <_fwalk_reent+0xe>
 800587e:	4638      	mov	r0, r7
 8005880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005884:	89ab      	ldrh	r3, [r5, #12]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d907      	bls.n	800589a <_fwalk_reent+0x3a>
 800588a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800588e:	3301      	adds	r3, #1
 8005890:	d003      	beq.n	800589a <_fwalk_reent+0x3a>
 8005892:	4629      	mov	r1, r5
 8005894:	4630      	mov	r0, r6
 8005896:	47c0      	blx	r8
 8005898:	4307      	orrs	r7, r0
 800589a:	3568      	adds	r5, #104	; 0x68
 800589c:	e7e9      	b.n	8005872 <_fwalk_reent+0x12>

0800589e <__retarget_lock_init_recursive>:
 800589e:	4770      	bx	lr

080058a0 <__retarget_lock_acquire_recursive>:
 80058a0:	4770      	bx	lr

080058a2 <__retarget_lock_release_recursive>:
 80058a2:	4770      	bx	lr

080058a4 <__swhatbuf_r>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	460e      	mov	r6, r1
 80058a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ac:	2900      	cmp	r1, #0
 80058ae:	b096      	sub	sp, #88	; 0x58
 80058b0:	4614      	mov	r4, r2
 80058b2:	461d      	mov	r5, r3
 80058b4:	da08      	bge.n	80058c8 <__swhatbuf_r+0x24>
 80058b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	602a      	str	r2, [r5, #0]
 80058be:	061a      	lsls	r2, r3, #24
 80058c0:	d410      	bmi.n	80058e4 <__swhatbuf_r+0x40>
 80058c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058c6:	e00e      	b.n	80058e6 <__swhatbuf_r+0x42>
 80058c8:	466a      	mov	r2, sp
 80058ca:	f000 f8fb 	bl	8005ac4 <_fstat_r>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	dbf1      	blt.n	80058b6 <__swhatbuf_r+0x12>
 80058d2:	9a01      	ldr	r2, [sp, #4]
 80058d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058dc:	425a      	negs	r2, r3
 80058de:	415a      	adcs	r2, r3
 80058e0:	602a      	str	r2, [r5, #0]
 80058e2:	e7ee      	b.n	80058c2 <__swhatbuf_r+0x1e>
 80058e4:	2340      	movs	r3, #64	; 0x40
 80058e6:	2000      	movs	r0, #0
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	b016      	add	sp, #88	; 0x58
 80058ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080058f0 <__smakebuf_r>:
 80058f0:	898b      	ldrh	r3, [r1, #12]
 80058f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058f4:	079d      	lsls	r5, r3, #30
 80058f6:	4606      	mov	r6, r0
 80058f8:	460c      	mov	r4, r1
 80058fa:	d507      	bpl.n	800590c <__smakebuf_r+0x1c>
 80058fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	6123      	str	r3, [r4, #16]
 8005904:	2301      	movs	r3, #1
 8005906:	6163      	str	r3, [r4, #20]
 8005908:	b002      	add	sp, #8
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	ab01      	add	r3, sp, #4
 800590e:	466a      	mov	r2, sp
 8005910:	f7ff ffc8 	bl	80058a4 <__swhatbuf_r>
 8005914:	9900      	ldr	r1, [sp, #0]
 8005916:	4605      	mov	r5, r0
 8005918:	4630      	mov	r0, r6
 800591a:	f7ff fb07 	bl	8004f2c <_malloc_r>
 800591e:	b948      	cbnz	r0, 8005934 <__smakebuf_r+0x44>
 8005920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005924:	059a      	lsls	r2, r3, #22
 8005926:	d4ef      	bmi.n	8005908 <__smakebuf_r+0x18>
 8005928:	f023 0303 	bic.w	r3, r3, #3
 800592c:	f043 0302 	orr.w	r3, r3, #2
 8005930:	81a3      	strh	r3, [r4, #12]
 8005932:	e7e3      	b.n	80058fc <__smakebuf_r+0xc>
 8005934:	4b0d      	ldr	r3, [pc, #52]	; (800596c <__smakebuf_r+0x7c>)
 8005936:	62b3      	str	r3, [r6, #40]	; 0x28
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	6020      	str	r0, [r4, #0]
 800593c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005940:	81a3      	strh	r3, [r4, #12]
 8005942:	9b00      	ldr	r3, [sp, #0]
 8005944:	6163      	str	r3, [r4, #20]
 8005946:	9b01      	ldr	r3, [sp, #4]
 8005948:	6120      	str	r0, [r4, #16]
 800594a:	b15b      	cbz	r3, 8005964 <__smakebuf_r+0x74>
 800594c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005950:	4630      	mov	r0, r6
 8005952:	f000 f8c9 	bl	8005ae8 <_isatty_r>
 8005956:	b128      	cbz	r0, 8005964 <__smakebuf_r+0x74>
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	f043 0301 	orr.w	r3, r3, #1
 8005962:	81a3      	strh	r3, [r4, #12]
 8005964:	89a0      	ldrh	r0, [r4, #12]
 8005966:	4305      	orrs	r5, r0
 8005968:	81a5      	strh	r5, [r4, #12]
 800596a:	e7cd      	b.n	8005908 <__smakebuf_r+0x18>
 800596c:	080056fd 	.word	0x080056fd

08005970 <_raise_r>:
 8005970:	291f      	cmp	r1, #31
 8005972:	b538      	push	{r3, r4, r5, lr}
 8005974:	4604      	mov	r4, r0
 8005976:	460d      	mov	r5, r1
 8005978:	d904      	bls.n	8005984 <_raise_r+0x14>
 800597a:	2316      	movs	r3, #22
 800597c:	6003      	str	r3, [r0, #0]
 800597e:	f04f 30ff 	mov.w	r0, #4294967295
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005986:	b112      	cbz	r2, 800598e <_raise_r+0x1e>
 8005988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800598c:	b94b      	cbnz	r3, 80059a2 <_raise_r+0x32>
 800598e:	4620      	mov	r0, r4
 8005990:	f000 f830 	bl	80059f4 <_getpid_r>
 8005994:	462a      	mov	r2, r5
 8005996:	4601      	mov	r1, r0
 8005998:	4620      	mov	r0, r4
 800599a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800599e:	f000 b817 	b.w	80059d0 <_kill_r>
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d00a      	beq.n	80059bc <_raise_r+0x4c>
 80059a6:	1c59      	adds	r1, r3, #1
 80059a8:	d103      	bne.n	80059b2 <_raise_r+0x42>
 80059aa:	2316      	movs	r3, #22
 80059ac:	6003      	str	r3, [r0, #0]
 80059ae:	2001      	movs	r0, #1
 80059b0:	e7e7      	b.n	8005982 <_raise_r+0x12>
 80059b2:	2400      	movs	r4, #0
 80059b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80059b8:	4628      	mov	r0, r5
 80059ba:	4798      	blx	r3
 80059bc:	2000      	movs	r0, #0
 80059be:	e7e0      	b.n	8005982 <_raise_r+0x12>

080059c0 <raise>:
 80059c0:	4b02      	ldr	r3, [pc, #8]	; (80059cc <raise+0xc>)
 80059c2:	4601      	mov	r1, r0
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	f7ff bfd3 	b.w	8005970 <_raise_r>
 80059ca:	bf00      	nop
 80059cc:	2000000c 	.word	0x2000000c

080059d0 <_kill_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d07      	ldr	r5, [pc, #28]	; (80059f0 <_kill_r+0x20>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	602b      	str	r3, [r5, #0]
 80059de:	f000 f8d7 	bl	8005b90 <_kill>
 80059e2:	1c43      	adds	r3, r0, #1
 80059e4:	d102      	bne.n	80059ec <_kill_r+0x1c>
 80059e6:	682b      	ldr	r3, [r5, #0]
 80059e8:	b103      	cbz	r3, 80059ec <_kill_r+0x1c>
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	bd38      	pop	{r3, r4, r5, pc}
 80059ee:	bf00      	nop
 80059f0:	200005e8 	.word	0x200005e8

080059f4 <_getpid_r>:
 80059f4:	f000 b8bc 	b.w	8005b70 <_getpid>

080059f8 <__sread>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	460c      	mov	r4, r1
 80059fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a00:	f000 f894 	bl	8005b2c <_read_r>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	bfab      	itete	ge
 8005a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a0c:	181b      	addge	r3, r3, r0
 8005a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a12:	bfac      	ite	ge
 8005a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a16:	81a3      	strhlt	r3, [r4, #12]
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <__swrite>:
 8005a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	461f      	mov	r7, r3
 8005a20:	898b      	ldrh	r3, [r1, #12]
 8005a22:	05db      	lsls	r3, r3, #23
 8005a24:	4605      	mov	r5, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	4616      	mov	r6, r2
 8005a2a:	d505      	bpl.n	8005a38 <__swrite+0x1e>
 8005a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a30:	2302      	movs	r3, #2
 8005a32:	2200      	movs	r2, #0
 8005a34:	f000 f868 	bl	8005b08 <_lseek_r>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	4632      	mov	r2, r6
 8005a46:	463b      	mov	r3, r7
 8005a48:	4628      	mov	r0, r5
 8005a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	f000 b817 	b.w	8005a80 <_write_r>

08005a52 <__sseek>:
 8005a52:	b510      	push	{r4, lr}
 8005a54:	460c      	mov	r4, r1
 8005a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5a:	f000 f855 	bl	8005b08 <_lseek_r>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	bf15      	itete	ne
 8005a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a6e:	81a3      	strheq	r3, [r4, #12]
 8005a70:	bf18      	it	ne
 8005a72:	81a3      	strhne	r3, [r4, #12]
 8005a74:	bd10      	pop	{r4, pc}

08005a76 <__sclose>:
 8005a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7a:	f000 b813 	b.w	8005aa4 <_close_r>
	...

08005a80 <_write_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d07      	ldr	r5, [pc, #28]	; (8005aa0 <_write_r+0x20>)
 8005a84:	4604      	mov	r4, r0
 8005a86:	4608      	mov	r0, r1
 8005a88:	4611      	mov	r1, r2
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	602a      	str	r2, [r5, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f000 f8a4 	bl	8005bdc <_write>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_write_r+0x1e>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_write_r+0x1e>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	200005e8 	.word	0x200005e8

08005aa4 <_close_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d06      	ldr	r5, [pc, #24]	; (8005ac0 <_close_r+0x1c>)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	f000 f84e 	bl	8005b50 <_close>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_close_r+0x1a>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_close_r+0x1a>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	200005e8 	.word	0x200005e8

08005ac4 <_fstat_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d07      	ldr	r5, [pc, #28]	; (8005ae4 <_fstat_r+0x20>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	f000 f845 	bl	8005b60 <_fstat>
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	d102      	bne.n	8005ae0 <_fstat_r+0x1c>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	b103      	cbz	r3, 8005ae0 <_fstat_r+0x1c>
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200005e8 	.word	0x200005e8

08005ae8 <_isatty_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4d06      	ldr	r5, [pc, #24]	; (8005b04 <_isatty_r+0x1c>)
 8005aec:	2300      	movs	r3, #0
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	f000 f844 	bl	8005b80 <_isatty>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_isatty_r+0x1a>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_isatty_r+0x1a>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	200005e8 	.word	0x200005e8

08005b08 <_lseek_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d07      	ldr	r5, [pc, #28]	; (8005b28 <_lseek_r+0x20>)
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	4608      	mov	r0, r1
 8005b10:	4611      	mov	r1, r2
 8005b12:	2200      	movs	r2, #0
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f000 f842 	bl	8005ba0 <_lseek>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_lseek_r+0x1e>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_lseek_r+0x1e>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	200005e8 	.word	0x200005e8

08005b2c <_read_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	; (8005b4c <_read_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f000 f838 	bl	8005bb0 <_read>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_read_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_read_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	200005e8 	.word	0x200005e8

08005b50 <_close>:
 8005b50:	4b02      	ldr	r3, [pc, #8]	; (8005b5c <_close+0xc>)
 8005b52:	2258      	movs	r2, #88	; 0x58
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5a:	4770      	bx	lr
 8005b5c:	200005e8 	.word	0x200005e8

08005b60 <_fstat>:
 8005b60:	4b02      	ldr	r3, [pc, #8]	; (8005b6c <_fstat+0xc>)
 8005b62:	2258      	movs	r2, #88	; 0x58
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6a:	4770      	bx	lr
 8005b6c:	200005e8 	.word	0x200005e8

08005b70 <_getpid>:
 8005b70:	4b02      	ldr	r3, [pc, #8]	; (8005b7c <_getpid+0xc>)
 8005b72:	2258      	movs	r2, #88	; 0x58
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7a:	4770      	bx	lr
 8005b7c:	200005e8 	.word	0x200005e8

08005b80 <_isatty>:
 8005b80:	4b02      	ldr	r3, [pc, #8]	; (8005b8c <_isatty+0xc>)
 8005b82:	2258      	movs	r2, #88	; 0x58
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	2000      	movs	r0, #0
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	200005e8 	.word	0x200005e8

08005b90 <_kill>:
 8005b90:	4b02      	ldr	r3, [pc, #8]	; (8005b9c <_kill+0xc>)
 8005b92:	2258      	movs	r2, #88	; 0x58
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9a:	4770      	bx	lr
 8005b9c:	200005e8 	.word	0x200005e8

08005ba0 <_lseek>:
 8005ba0:	4b02      	ldr	r3, [pc, #8]	; (8005bac <_lseek+0xc>)
 8005ba2:	2258      	movs	r2, #88	; 0x58
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8005baa:	4770      	bx	lr
 8005bac:	200005e8 	.word	0x200005e8

08005bb0 <_read>:
 8005bb0:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <_read+0xc>)
 8005bb2:	2258      	movs	r2, #88	; 0x58
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bba:	4770      	bx	lr
 8005bbc:	200005e8 	.word	0x200005e8

08005bc0 <_sbrk>:
 8005bc0:	4a04      	ldr	r2, [pc, #16]	; (8005bd4 <_sbrk+0x14>)
 8005bc2:	6811      	ldr	r1, [r2, #0]
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	b909      	cbnz	r1, 8005bcc <_sbrk+0xc>
 8005bc8:	4903      	ldr	r1, [pc, #12]	; (8005bd8 <_sbrk+0x18>)
 8005bca:	6011      	str	r1, [r2, #0]
 8005bcc:	6810      	ldr	r0, [r2, #0]
 8005bce:	4403      	add	r3, r0
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	4770      	bx	lr
 8005bd4:	200005f0 	.word	0x200005f0
 8005bd8:	200005f4 	.word	0x200005f4

08005bdc <_write>:
 8005bdc:	4b02      	ldr	r3, [pc, #8]	; (8005be8 <_write+0xc>)
 8005bde:	2258      	movs	r2, #88	; 0x58
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	f04f 30ff 	mov.w	r0, #4294967295
 8005be6:	4770      	bx	lr
 8005be8:	200005e8 	.word	0x200005e8

08005bec <_exit>:
 8005bec:	e7fe      	b.n	8005bec <_exit>
	...

08005bf0 <_init>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	bf00      	nop
 8005bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf6:	bc08      	pop	{r3}
 8005bf8:	469e      	mov	lr, r3
 8005bfa:	4770      	bx	lr

08005bfc <_fini>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	bf00      	nop
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr
