
11_LivingRoomHiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001250c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001214  08012710  08012710  00013710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013924  08013924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801392c  0801392c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013930  08013930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000005c8  20000000  08013934  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000177b8  200005e0  08013efc  000155e0  2**5
                  ALLOC
  8 ._user_heap_stack 00006000  20017d98  08013efc  00015d98  2**0
                  ALLOC
  9 .ARM.attributes 0000002c  00000000  00000000  000155c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004211f  00000000  00000000  000155f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008477  00000000  00000000  00057713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 000165fe  00000000  00000000  0005fb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002810  00000000  00000000  00076188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001fea  00000000  00000000  00078998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f672  00000000  00000000  0007a982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003aafd  00000000  00000000  000a9ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010ec85  00000000  00000000  000e4af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001f3776  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000086d8  00000000  00000000  001f37bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000b8  00000000  00000000  001fbe94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200005e0 	.word	0x200005e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080126f4 	.word	0x080126f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200005e4 	.word	0x200005e4
 800023c:	080126f4 	.word	0x080126f4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063c:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f860 	bl	8000704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000644:	2000      	movs	r0, #0
 8000646:	f00e f8db 	bl	800e800 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800064a:	f00e f8b5 	bl	800e7b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800064e:	2000      	movs	r0, #0
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000654:	4a03      	ldr	r2, [pc, #12]	@ (8000664 <HAL_IncTick+0x10>)
 8000656:	6811      	ldr	r1, [r2, #0]
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <HAL_IncTick+0x14>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	440b      	add	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200005fc 	.word	0x200005fc
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800066c:	4b01      	ldr	r3, [pc, #4]	@ (8000674 <HAL_GetTick+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	200005fc 	.word	0x200005fc

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff6 	bl	800066c <HAL_GetTick>
 8000680:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000686:	d002      	beq.n	800068e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <HAL_Delay+0x24>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068e:	f7ff ffed 	bl	800066c <HAL_GetTick>
 8000692:	1b40      	subs	r0, r0, r5
 8000694:	42a0      	cmp	r0, r4
 8000696:	d3fa      	bcc.n	800068e <HAL_Delay+0x16>
  {
  }
}
 8000698:	bd38      	pop	{r3, r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000

080006a0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80006a0:	2800      	cmp	r0, #0
 80006a2:	db04      	blt.n	80006ae <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	0109      	lsls	r1, r1, #4
 80006a6:	b2c9      	uxtb	r1, r1
 80006a8:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <__NVIC_SetPriority+0x1c>)
 80006aa:	5419      	strb	r1, [r3, r0]
 80006ac:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	f000 000f 	and.w	r0, r0, #15
 80006b2:	0109      	lsls	r1, r1, #4
 80006b4:	b2c9      	uxtb	r1, r1
 80006b6:	4b02      	ldr	r3, [pc, #8]	@ (80006c0 <__NVIC_SetPriority+0x20>)
 80006b8:	5419      	strb	r1, [r3, r0]
  }
}
 80006ba:	4770      	bx	lr
 80006bc:	e000e400 	.word	0xe000e400
 80006c0:	e000ed14 	.word	0xe000ed14

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ca:	f1c0 0c07 	rsb	ip, r0, #7
 80006ce:	f1bc 0f04 	cmp.w	ip, #4
 80006d2:	bf28      	it	cs
 80006d4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	1d03      	adds	r3, r0, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d90f      	bls.n	80006fe <NVIC_EncodePriority+0x3a>
 80006de:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 3eff 	mov.w	lr, #4294967295
 80006e4:	fa0e f00c 	lsl.w	r0, lr, ip
 80006e8:	ea21 0100 	bic.w	r1, r1, r0
 80006ec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ee:	fa0e fe03 	lsl.w	lr, lr, r3
 80006f2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80006f6:	ea41 0002 	orr.w	r0, r1, r2
 80006fa:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	2300      	movs	r3, #0
 8000700:	e7ee      	b.n	80006e0 <NVIC_EncodePriority+0x1c>
	...

08000704 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	4906      	ldr	r1, [pc, #24]	@ (8000720 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000706:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000708:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800070c:	041b      	lsls	r3, r3, #16
 800070e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000710:	0200      	lsls	r0, r0, #8
 8000712:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000716:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000718:	4a02      	ldr	r2, [pc, #8]	@ (8000724 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800071a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800071c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00
 8000724:	05fa0000 	.word	0x05fa0000

08000728 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000728:	b510      	push	{r4, lr}
 800072a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <HAL_NVIC_SetPriority+0x1c>)
 800072e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000730:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000734:	f7ff ffc6 	bl	80006c4 <NVIC_EncodePriority>
 8000738:	4601      	mov	r1, r0
 800073a:	4620      	mov	r0, r4
 800073c:	f7ff ffb0 	bl	80006a0 <__NVIC_SetPriority>
}
 8000740:	bd10      	pop	{r4, pc}
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000748:	2800      	cmp	r0, #0
 800074a:	db07      	blt.n	800075c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074c:	f000 021f 	and.w	r2, r0, #31
 8000750:	0940      	lsrs	r0, r0, #5
 8000752:	2301      	movs	r3, #1
 8000754:	4093      	lsls	r3, r2
 8000756:	4a02      	ldr	r2, [pc, #8]	@ (8000760 <HAL_NVIC_EnableIRQ+0x18>)
 8000758:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e100 	.word	0xe000e100

08000764 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000764:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000766:	6805      	ldr	r5, [r0, #0]
 8000768:	682c      	ldr	r4, [r5, #0]
 800076a:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 800076e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000770:	6804      	ldr	r4, [r0, #0]
 8000772:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000774:	6883      	ldr	r3, [r0, #8]
 8000776:	2b40      	cmp	r3, #64	@ 0x40
 8000778:	d005      	beq.n	8000786 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800077a:	6803      	ldr	r3, [r0, #0]
 800077c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800077e:	6803      	ldr	r3, [r0, #0]
 8000780:	60da      	str	r2, [r3, #12]
  }
}
 8000782:	bc30      	pop	{r4, r5}
 8000784:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000786:	6803      	ldr	r3, [r0, #0]
 8000788:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800078a:	6803      	ldr	r3, [r0, #0]
 800078c:	60d9      	str	r1, [r3, #12]
 800078e:	e7f8      	b.n	8000782 <DMA_SetConfig+0x1e>

08000790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000790:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000792:	6803      	ldr	r3, [r0, #0]
 8000794:	b2d9      	uxtb	r1, r3
 8000796:	3910      	subs	r1, #16
 8000798:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <DMA_CalcBaseAndBitshift+0x34>)
 800079a:	fba2 4201 	umull	r4, r2, r2, r1
 800079e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007a0:	4c09      	ldr	r4, [pc, #36]	@ (80007c8 <DMA_CalcBaseAndBitshift+0x38>)
 80007a2:	5ca2      	ldrb	r2, [r4, r2]
 80007a4:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80007a6:	295f      	cmp	r1, #95	@ 0x5f
 80007a8:	d907      	bls.n	80007ba <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80007aa:	f36f 0309 	bfc	r3, #0, #10
 80007ae:	3304      	adds	r3, #4
 80007b0:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80007b2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80007b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007b8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80007ba:	f36f 0309 	bfc	r3, #0, #10
 80007be:	6583      	str	r3, [r0, #88]	@ 0x58
 80007c0:	e7f7      	b.n	80007b2 <DMA_CalcBaseAndBitshift+0x22>
 80007c2:	bf00      	nop
 80007c4:	aaaaaaab 	.word	0xaaaaaaab
 80007c8:	08012784 	.word	0x08012784

080007cc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80007cc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007ce:	6982      	ldr	r2, [r0, #24]
 80007d0:	b992      	cbnz	r2, 80007f8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d00a      	beq.n	80007ec <DMA_CheckFifoParam+0x20>
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d002      	beq.n	80007e0 <DMA_CheckFifoParam+0x14>
 80007da:	b10b      	cbz	r3, 80007e0 <DMA_CheckFifoParam+0x14>
 80007dc:	2000      	movs	r0, #0
 80007de:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007e0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80007e2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80007e6:	d128      	bne.n	800083a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80007e8:	2000      	movs	r0, #0
 80007ea:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80007ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80007ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80007f2:	d024      	beq.n	800083e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80007f4:	2000      	movs	r0, #0
 80007f6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80007f8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80007fc:	d009      	beq.n	8000812 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d925      	bls.n	800084e <DMA_CheckFifoParam+0x82>
 8000802:	2b03      	cmp	r3, #3
 8000804:	d125      	bne.n	8000852 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000806:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000808:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800080c:	d123      	bne.n	8000856 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800080e:	2000      	movs	r0, #0
 8000810:	4770      	bx	lr
    switch (tmp)
 8000812:	2b03      	cmp	r3, #3
 8000814:	d803      	bhi.n	800081e <DMA_CheckFifoParam+0x52>
 8000816:	e8df f003 	tbb	[pc, r3]
 800081a:	0414      	.short	0x0414
 800081c:	0a14      	.short	0x0a14
 800081e:	2000      	movs	r0, #0
 8000820:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000822:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000824:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000828:	d10d      	bne.n	8000846 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800082a:	2000      	movs	r0, #0
 800082c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800082e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000830:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000834:	d009      	beq.n	800084a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000836:	2000      	movs	r0, #0
 8000838:	4770      	bx	lr
        status = HAL_ERROR;
 800083a:	2001      	movs	r0, #1
 800083c:	4770      	bx	lr
        status = HAL_ERROR;
 800083e:	2001      	movs	r0, #1
 8000840:	4770      	bx	lr
      status = HAL_ERROR;
 8000842:	2001      	movs	r0, #1
 8000844:	4770      	bx	lr
        status = HAL_ERROR;
 8000846:	2001      	movs	r0, #1
 8000848:	4770      	bx	lr
        status = HAL_ERROR;
 800084a:	2001      	movs	r0, #1
 800084c:	4770      	bx	lr
      status = HAL_ERROR;
 800084e:	2001      	movs	r0, #1
 8000850:	4770      	bx	lr
    switch (tmp)
 8000852:	2000      	movs	r0, #0
 8000854:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000856:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000858:	4770      	bx	lr
	...

0800085c <HAL_DMA_Init>:
{
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000860:	f7ff ff04 	bl	800066c <HAL_GetTick>
  if(hdma == NULL)
 8000864:	2c00      	cmp	r4, #0
 8000866:	d05b      	beq.n	8000920 <HAL_DMA_Init+0xc4>
 8000868:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800086a:	2300      	movs	r3, #0
 800086c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000870:	2302      	movs	r3, #2
 8000872:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_DMA_DISABLE(hdma);
 8000876:	6822      	ldr	r2, [r4, #0]
 8000878:	6813      	ldr	r3, [r2, #0]
 800087a:	f023 0301 	bic.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	f012 0f01 	tst.w	r2, #1
 8000888:	d00a      	beq.n	80008a0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800088a:	f7ff feef 	bl	800066c <HAL_GetTick>
 800088e:	1b43      	subs	r3, r0, r5
 8000890:	2b05      	cmp	r3, #5
 8000892:	d9f5      	bls.n	8000880 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000894:	2320      	movs	r3, #32
 8000896:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000898:	2003      	movs	r0, #3
 800089a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800089e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80008a0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008a2:	4920      	ldr	r1, [pc, #128]	@ (8000924 <HAL_DMA_Init+0xc8>)
 80008a4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008a6:	6862      	ldr	r2, [r4, #4]
 80008a8:	68a0      	ldr	r0, [r4, #8]
 80008aa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ac:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ae:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b0:	6920      	ldr	r0, [r4, #16]
 80008b2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b8:	69a0      	ldr	r0, [r4, #24]
 80008ba:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80008bc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008be:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80008c0:	6a20      	ldr	r0, [r4, #32]
 80008c2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008c4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80008c8:	2904      	cmp	r1, #4
 80008ca:	d01e      	beq.n	800090a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80008cc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80008ce:	6826      	ldr	r6, [r4, #0]
 80008d0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008d2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80008d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80008d8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d107      	bne.n	80008ee <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80008de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80008e0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008e2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80008e4:	b11b      	cbz	r3, 80008ee <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008e6:	4620      	mov	r0, r4
 80008e8:	f7ff ff70 	bl	80007cc <DMA_CheckFifoParam>
 80008ec:	b990      	cbnz	r0, 8000914 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80008ee:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008f0:	4620      	mov	r0, r4
 80008f2:	f7ff ff4d 	bl	8000790 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008f6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80008f8:	233f      	movs	r3, #63	@ 0x3f
 80008fa:	4093      	lsls	r3, r2
 80008fc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008fe:	2000      	movs	r0, #0
 8000900:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000902:	2301      	movs	r3, #1
 8000904:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8000908:	e7c9      	b.n	800089e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800090a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800090c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800090e:	4301      	orrs	r1, r0
 8000910:	430a      	orrs	r2, r1
 8000912:	e7db      	b.n	80008cc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000914:	2340      	movs	r3, #64	@ 0x40
 8000916:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000918:	2001      	movs	r0, #1
 800091a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800091e:	e7be      	b.n	800089e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000920:	2001      	movs	r0, #1
 8000922:	e7bc      	b.n	800089e <HAL_DMA_Init+0x42>
 8000924:	e010803f 	.word	0xe010803f

08000928 <HAL_DMA_Start_IT>:
{
 8000928:	b538      	push	{r3, r4, r5, lr}
 800092a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800092c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800092e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8000932:	2801      	cmp	r0, #1
 8000934:	d030      	beq.n	8000998 <HAL_DMA_Start_IT+0x70>
 8000936:	2001      	movs	r0, #1
 8000938:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800093c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8000940:	b2c0      	uxtb	r0, r0
 8000942:	2801      	cmp	r0, #1
 8000944:	d004      	beq.n	8000950 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8000946:	2300      	movs	r3, #0
 8000948:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 800094c:	2002      	movs	r0, #2
}
 800094e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000950:	2002      	movs	r0, #2
 8000952:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000956:	2000      	movs	r0, #0
 8000958:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800095a:	4620      	mov	r0, r4
 800095c:	f7ff ff02 	bl	8000764 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000960:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000962:	233f      	movs	r3, #63	@ 0x3f
 8000964:	4093      	lsls	r3, r2
 8000966:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000968:	6822      	ldr	r2, [r4, #0]
 800096a:	6813      	ldr	r3, [r2, #0]
 800096c:	f043 0316 	orr.w	r3, r3, #22
 8000970:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000972:	6822      	ldr	r2, [r4, #0]
 8000974:	6953      	ldr	r3, [r2, #20]
 8000976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800097a:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800097c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800097e:	b123      	cbz	r3, 800098a <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000980:	6822      	ldr	r2, [r4, #0]
 8000982:	6813      	ldr	r3, [r2, #0]
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	6813      	ldr	r3, [r2, #0]
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000994:	2000      	movs	r0, #0
 8000996:	e7da      	b.n	800094e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8000998:	2002      	movs	r0, #2
 800099a:	e7d8      	b.n	800094e <HAL_DMA_Start_IT+0x26>

0800099c <HAL_DMA_Abort>:
{
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009a0:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 80009a2:	f7ff fe63 	bl	800066c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009a6:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d006      	beq.n	80009be <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b0:	2380      	movs	r3, #128	@ 0x80
 80009b2:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80009b4:	2300      	movs	r3, #0
 80009b6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80009ba:	2001      	movs	r0, #1
}
 80009bc:	bd70      	pop	{r4, r5, r6, pc}
 80009be:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009c0:	6822      	ldr	r2, [r4, #0]
 80009c2:	6813      	ldr	r3, [r2, #0]
 80009c4:	f023 0316 	bic.w	r3, r3, #22
 80009c8:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009ca:	6822      	ldr	r2, [r4, #0]
 80009cc:	6953      	ldr	r3, [r2, #20]
 80009ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80009d2:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80009d6:	b1e3      	cbz	r3, 8000a12 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009d8:	6822      	ldr	r2, [r4, #0]
 80009da:	6813      	ldr	r3, [r2, #0]
 80009dc:	f023 0308 	bic.w	r3, r3, #8
 80009e0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80009e2:	6822      	ldr	r2, [r4, #0]
 80009e4:	6813      	ldr	r3, [r2, #0]
 80009e6:	f023 0301 	bic.w	r3, r3, #1
 80009ea:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f013 0f01 	tst.w	r3, #1
 80009f4:	d011      	beq.n	8000a1a <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009f6:	f7ff fe39 	bl	800066c <HAL_GetTick>
 80009fa:	1b43      	subs	r3, r0, r5
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	d9f5      	bls.n	80009ec <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a00:	2320      	movs	r3, #32
 8000a02:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hdma);
 8000a04:	2300      	movs	r3, #0
 8000a06:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 8000a10:	e7d4      	b.n	80009bc <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000a12:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1df      	bne.n	80009d8 <HAL_DMA_Abort+0x3c>
 8000a18:	e7e3      	b.n	80009e2 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a1a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000a1c:	233f      	movs	r3, #63	@ 0x3f
 8000a1e:	4093      	lsls	r3, r2
 8000a20:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8000a2e:	e7c5      	b.n	80009bc <HAL_DMA_Abort+0x20>

08000a30 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a30:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d003      	beq.n	8000a42 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a3a:	2380      	movs	r3, #128	@ 0x80
 8000a3c:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8000a3e:	2001      	movs	r0, #1
 8000a40:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a42:	2305      	movs	r3, #5
 8000a44:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8000a48:	6802      	ldr	r2, [r0, #0]
 8000a4a:	6813      	ldr	r3, [r2, #0]
 8000a4c:	f023 0301 	bic.w	r3, r3, #1
 8000a50:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000a52:	2000      	movs	r0, #0
}
 8000a54:	4770      	bx	lr
	...

08000a58 <HAL_DMA_IRQHandler>:
{
 8000a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8000a62:	4b72      	ldr	r3, [pc, #456]	@ (8000c2c <HAL_DMA_IRQHandler+0x1d4>)
 8000a64:	681d      	ldr	r5, [r3, #0]
 8000a66:	4b72      	ldr	r3, [pc, #456]	@ (8000c30 <HAL_DMA_IRQHandler+0x1d8>)
 8000a68:	fba3 3505 	umull	r3, r5, r3, r5
 8000a6c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a6e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8000a70:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a72:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000a74:	2308      	movs	r3, #8
 8000a76:	4093      	lsls	r3, r2
 8000a78:	4233      	tst	r3, r6
 8000a7a:	d010      	beq.n	8000a9e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a7c:	6803      	ldr	r3, [r0, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	f012 0f04 	tst.w	r2, #4
 8000a84:	d00b      	beq.n	8000a9e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	f022 0204 	bic.w	r2, r2, #4
 8000a8c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a8e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000a90:	2308      	movs	r3, #8
 8000a92:	4093      	lsls	r3, r2
 8000a94:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a96:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a9e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	4093      	lsls	r3, r2
 8000aa4:	4233      	tst	r3, r6
 8000aa6:	d009      	beq.n	8000abc <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000aa8:	6822      	ldr	r2, [r4, #0]
 8000aaa:	6952      	ldr	r2, [r2, #20]
 8000aac:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8000ab0:	d004      	beq.n	8000abc <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ab2:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ab4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000abc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000abe:	2304      	movs	r3, #4
 8000ac0:	4093      	lsls	r3, r2
 8000ac2:	4233      	tst	r3, r6
 8000ac4:	d009      	beq.n	8000ada <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ac6:	6822      	ldr	r2, [r4, #0]
 8000ac8:	6812      	ldr	r2, [r2, #0]
 8000aca:	f012 0f02 	tst.w	r2, #2
 8000ace:	d004      	beq.n	8000ada <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ad0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ad2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ada:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000adc:	2310      	movs	r3, #16
 8000ade:	4093      	lsls	r3, r2
 8000ae0:	4233      	tst	r3, r6
 8000ae2:	d024      	beq.n	8000b2e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ae4:	6822      	ldr	r2, [r4, #0]
 8000ae6:	6812      	ldr	r2, [r2, #0]
 8000ae8:	f012 0f08 	tst.w	r2, #8
 8000aec:	d01f      	beq.n	8000b2e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000aee:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000af8:	d00d      	beq.n	8000b16 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000b00:	d104      	bne.n	8000b0c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000b02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b04:	b19b      	cbz	r3, 8000b2e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000b06:	4620      	mov	r0, r4
 8000b08:	4798      	blx	r3
 8000b0a:	e010      	b.n	8000b2e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b0c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000b0e:	b173      	cbz	r3, 8000b2e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000b10:	4620      	mov	r0, r4
 8000b12:	4798      	blx	r3
 8000b14:	e00b      	b.n	8000b2e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000b1c:	d103      	bne.n	8000b26 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	f022 0208 	bic.w	r2, r2, #8
 8000b24:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000b26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b28:	b10b      	cbz	r3, 8000b2e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b2e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000b30:	2320      	movs	r3, #32
 8000b32:	4093      	lsls	r3, r2
 8000b34:	4233      	tst	r3, r6
 8000b36:	d055      	beq.n	8000be4 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b38:	6822      	ldr	r2, [r4, #0]
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	f012 0f10 	tst.w	r2, #16
 8000b40:	d050      	beq.n	8000be4 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b42:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b44:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	d00e      	beq.n	8000b6c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000b56:	d033      	beq.n	8000bc0 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000b5e:	d12a      	bne.n	8000bb6 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000b60:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d03e      	beq.n	8000be4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000b66:	4620      	mov	r0, r4
 8000b68:	4798      	blx	r3
 8000b6a:	e03b      	b.n	8000be4 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b6c:	6822      	ldr	r2, [r4, #0]
 8000b6e:	6813      	ldr	r3, [r2, #0]
 8000b70:	f023 0316 	bic.w	r3, r3, #22
 8000b74:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b76:	6822      	ldr	r2, [r4, #0]
 8000b78:	6953      	ldr	r3, [r2, #20]
 8000b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b7e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b82:	b1a3      	cbz	r3, 8000bae <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b84:	6822      	ldr	r2, [r4, #0]
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	f023 0308 	bic.w	r3, r3, #8
 8000b8c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b8e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000b90:	233f      	movs	r3, #63	@ 0x3f
 8000b92:	4093      	lsls	r3, r2
 8000b94:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000b96:	2300      	movs	r3, #0
 8000b98:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferAbortCallback != NULL)
 8000ba2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d03f      	beq.n	8000c28 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000ba8:	4620      	mov	r0, r4
 8000baa:	4798      	blx	r3
        return;
 8000bac:	e03c      	b.n	8000c28 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1e7      	bne.n	8000b84 <HAL_DMA_IRQHandler+0x12c>
 8000bb4:	e7eb      	b.n	8000b8e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000bb6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000bb8:	b1a3      	cbz	r3, 8000be4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000bba:	4620      	mov	r0, r4
 8000bbc:	4798      	blx	r3
 8000bbe:	e011      	b.n	8000be4 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000bc6:	d109      	bne.n	8000bdc <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	f022 0210 	bic.w	r2, r2, #16
 8000bce:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8000bdc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000bde:	b10b      	cbz	r3, 8000be4 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000be0:	4620      	mov	r0, r4
 8000be2:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000be4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000be6:	b1fb      	cbz	r3, 8000c28 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000be8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000bea:	f013 0f01 	tst.w	r3, #1
 8000bee:	d017      	beq.n	8000c20 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8000bf6:	6822      	ldr	r2, [r4, #0]
 8000bf8:	6813      	ldr	r3, [r2, #0]
 8000bfa:	f023 0301 	bic.w	r3, r3, #1
 8000bfe:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000c00:	9b01      	ldr	r3, [sp, #4]
 8000c02:	3301      	adds	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	42ab      	cmp	r3, r5
 8000c08:	d804      	bhi.n	8000c14 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f013 0f01 	tst.w	r3, #1
 8000c12:	d1f5      	bne.n	8000c00 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000c14:	2300      	movs	r3, #0
 8000c16:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    if(hdma->XferErrorCallback != NULL)
 8000c20:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000c22:	b10b      	cbz	r3, 8000c28 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000c24:	4620      	mov	r0, r4
 8000c26:	4798      	blx	r3
}
 8000c28:	b003      	add	sp, #12
 8000c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2c:	200003fc 	.word	0x200003fc
 8000c30:	1b4e81b5 	.word	0x1b4e81b5

08000c34 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	2b0f      	cmp	r3, #15
 8000c38:	f200 80e4 	bhi.w	8000e04 <HAL_GPIO_Init+0x1d0>
{
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	e03a      	b.n	8000cb8 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c42:	2209      	movs	r2, #9
 8000c44:	e000      	b.n	8000c48 <HAL_GPIO_Init+0x14>
 8000c46:	2200      	movs	r2, #0
 8000c48:	40aa      	lsls	r2, r5
 8000c4a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c4c:	3402      	adds	r4, #2
 8000c4e:	4d6e      	ldr	r5, [pc, #440]	@ (8000e08 <HAL_GPIO_Init+0x1d4>)
 8000c50:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c54:	4a6d      	ldr	r2, [pc, #436]	@ (8000e0c <HAL_GPIO_Init+0x1d8>)
 8000c56:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c58:	ea6f 020c 	mvn.w	r2, ip
 8000c5c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c60:	684e      	ldr	r6, [r1, #4]
 8000c62:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8000c66:	d001      	beq.n	8000c6c <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000c68:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8000c6c:	4c67      	ldr	r4, [pc, #412]	@ (8000e0c <HAL_GPIO_Init+0x1d8>)
 8000c6e:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000c70:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c72:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c76:	684e      	ldr	r6, [r1, #4]
 8000c78:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000c7c:	d001      	beq.n	8000c82 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8000c7e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000c82:	4c62      	ldr	r4, [pc, #392]	@ (8000e0c <HAL_GPIO_Init+0x1d8>)
 8000c84:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c86:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c88:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c8c:	684e      	ldr	r6, [r1, #4]
 8000c8e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000c92:	d001      	beq.n	8000c98 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8000c94:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000c98:	4c5c      	ldr	r4, [pc, #368]	@ (8000e0c <HAL_GPIO_Init+0x1d8>)
 8000c9a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000c9c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c9e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca0:	684d      	ldr	r5, [r1, #4]
 8000ca2:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 8000ca6:	d001      	beq.n	8000cac <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000ca8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8000cac:	4c57      	ldr	r4, [pc, #348]	@ (8000e0c <HAL_GPIO_Init+0x1d8>)
 8000cae:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	2b0f      	cmp	r3, #15
 8000cb4:	f200 80a4 	bhi.w	8000e00 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbc:	680c      	ldr	r4, [r1, #0]
 8000cbe:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000cc2:	ea32 0404 	bics.w	r4, r2, r4
 8000cc6:	d1f3      	bne.n	8000cb0 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc8:	684c      	ldr	r4, [r1, #4]
 8000cca:	2c12      	cmp	r4, #18
 8000ccc:	bf18      	it	ne
 8000cce:	2c02      	cmpne	r4, #2
 8000cd0:	d112      	bne.n	8000cf8 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->AFR[position >> 3];
 8000cd2:	08dd      	lsrs	r5, r3, #3
 8000cd4:	3508      	adds	r5, #8
 8000cd6:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cda:	f003 0607 	and.w	r6, r3, #7
 8000cde:	00b6      	lsls	r6, r6, #2
 8000ce0:	f04f 0e0f 	mov.w	lr, #15
 8000ce4:	fa0e fe06 	lsl.w	lr, lr, r6
 8000ce8:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000cec:	690c      	ldr	r4, [r1, #16]
 8000cee:	40b4      	lsls	r4, r6
 8000cf0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000cf4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000cf8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cfa:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000cfe:	2403      	movs	r4, #3
 8000d00:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d04:	43e5      	mvns	r5, r4
 8000d06:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d0a:	684c      	ldr	r4, [r1, #4]
 8000d0c:	f004 0403 	and.w	r4, r4, #3
 8000d10:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d14:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8000d16:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d18:	684c      	ldr	r4, [r1, #4]
 8000d1a:	1e66      	subs	r6, r4, #1
 8000d1c:	2c11      	cmp	r4, #17
 8000d1e:	bf18      	it	ne
 8000d20:	2e01      	cmpne	r6, #1
 8000d22:	d901      	bls.n	8000d28 <HAL_GPIO_Init+0xf4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d24:	2c12      	cmp	r4, #18
 8000d26:	d10f      	bne.n	8000d48 <HAL_GPIO_Init+0x114>
        temp = GPIOx->OSPEEDR; 
 8000d28:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d2a:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d2c:	68cc      	ldr	r4, [r1, #12]
 8000d2e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d32:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000d34:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d36:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d38:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d3c:	684a      	ldr	r2, [r1, #4]
 8000d3e:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000d42:	409a      	lsls	r2, r3
 8000d44:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000d46:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d48:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d4a:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d4c:	688a      	ldr	r2, [r1, #8]
 8000d4e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d52:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000d54:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d56:	684a      	ldr	r2, [r1, #4]
 8000d58:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8000d5c:	d0a8      	beq.n	8000cb0 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000e10 <HAL_GPIO_Init+0x1dc>)
 8000d60:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000d62:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000d66:	6454      	str	r4, [r2, #68]	@ 0x44
 8000d68:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000d6a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000d6e:	9201      	str	r2, [sp, #4]
 8000d70:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d72:	089c      	lsrs	r4, r3, #2
 8000d74:	1ca5      	adds	r5, r4, #2
 8000d76:	4a24      	ldr	r2, [pc, #144]	@ (8000e08 <HAL_GPIO_Init+0x1d4>)
 8000d78:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d7c:	f003 0503 	and.w	r5, r3, #3
 8000d80:	00ad      	lsls	r5, r5, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	40aa      	lsls	r2, r5
 8000d86:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d8a:	4a22      	ldr	r2, [pc, #136]	@ (8000e14 <HAL_GPIO_Init+0x1e0>)
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f43f af5a 	beq.w	8000c46 <HAL_GPIO_Init+0x12>
 8000d92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d022      	beq.n	8000de0 <HAL_GPIO_Init+0x1ac>
 8000d9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	d020      	beq.n	8000de4 <HAL_GPIO_Init+0x1b0>
 8000da2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d01e      	beq.n	8000de8 <HAL_GPIO_Init+0x1b4>
 8000daa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dae:	4290      	cmp	r0, r2
 8000db0:	d01c      	beq.n	8000dec <HAL_GPIO_Init+0x1b8>
 8000db2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d01a      	beq.n	8000df0 <HAL_GPIO_Init+0x1bc>
 8000dba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	d018      	beq.n	8000df4 <HAL_GPIO_Init+0x1c0>
 8000dc2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d016      	beq.n	8000df8 <HAL_GPIO_Init+0x1c4>
 8000dca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	d014      	beq.n	8000dfc <HAL_GPIO_Init+0x1c8>
 8000dd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	f43f af33 	beq.w	8000c42 <HAL_GPIO_Init+0xe>
 8000ddc:	220a      	movs	r2, #10
 8000dde:	e733      	b.n	8000c48 <HAL_GPIO_Init+0x14>
 8000de0:	2201      	movs	r2, #1
 8000de2:	e731      	b.n	8000c48 <HAL_GPIO_Init+0x14>
 8000de4:	2202      	movs	r2, #2
 8000de6:	e72f      	b.n	8000c48 <HAL_GPIO_Init+0x14>
 8000de8:	2203      	movs	r2, #3
 8000dea:	e72d      	b.n	8000c48 <HAL_GPIO_Init+0x14>
 8000dec:	2204      	movs	r2, #4
 8000dee:	e72b      	b.n	8000c48 <HAL_GPIO_Init+0x14>
 8000df0:	2205      	movs	r2, #5
 8000df2:	e729      	b.n	8000c48 <HAL_GPIO_Init+0x14>
 8000df4:	2206      	movs	r2, #6
 8000df6:	e727      	b.n	8000c48 <HAL_GPIO_Init+0x14>
 8000df8:	2207      	movs	r2, #7
 8000dfa:	e725      	b.n	8000c48 <HAL_GPIO_Init+0x14>
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	e723      	b.n	8000c48 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000e00:	b002      	add	sp, #8
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	40013c00 	.word	0x40013c00
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e18:	6903      	ldr	r3, [r0, #16]
 8000e1a:	4219      	tst	r1, r3
 8000e1c:	d001      	beq.n	8000e22 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000e1e:	2001      	movs	r0, #1
 8000e20:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e22:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000e24:	4770      	bx	lr

08000e26 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e26:	b10a      	cbz	r2, 8000e2c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e28:	6181      	str	r1, [r0, #24]
 8000e2a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e2c:	0409      	lsls	r1, r1, #16
 8000e2e:	6181      	str	r1, [r0, #24]
  }
}
 8000e30:	4770      	bx	lr

08000e32 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000e32:	6943      	ldr	r3, [r0, #20]
 8000e34:	ea31 0303 	bics.w	r3, r1, r3
 8000e38:	d001      	beq.n	8000e3e <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e3a:	6181      	str	r1, [r0, #24]
  }
}
 8000e3c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e3e:	0409      	lsls	r1, r1, #16
 8000e40:	6181      	str	r1, [r0, #24]
 8000e42:	4770      	bx	lr

08000e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e44:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e46:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	4203      	tst	r3, r0
 8000e4c:	d100      	bne.n	8000e50 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000e4e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e50:	4b02      	ldr	r3, [pc, #8]	@ (8000e5c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e52:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e54:	f00a ff5e 	bl	800bd14 <HAL_GPIO_EXTI_Callback>
}
 8000e58:	e7f9      	b.n	8000e4e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000e5a:	bf00      	nop
 8000e5c:	40013c00 	.word	0x40013c00

08000e60 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e60:	6803      	ldr	r3, [r0, #0]
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	f012 0f02 	tst.w	r2, #2
 8000e68:	d001      	beq.n	8000e6e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e6e:	6803      	ldr	r3, [r0, #0]
 8000e70:	699a      	ldr	r2, [r3, #24]
 8000e72:	f012 0f01 	tst.w	r2, #1
 8000e76:	d103      	bne.n	8000e80 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000e78:	699a      	ldr	r2, [r3, #24]
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	619a      	str	r2, [r3, #24]
  }
}
 8000e80:	4770      	bx	lr

08000e82 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000e82:	b430      	push	{r4, r5}
 8000e84:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000e86:	6804      	ldr	r4, [r0, #0]
 8000e88:	6860      	ldr	r0, [r4, #4]
 8000e8a:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 8000e8e:	f40c 6c80 	and.w	ip, ip, #1024	@ 0x400
 8000e92:	f04c 7c7f 	orr.w	ip, ip, #66846720	@ 0x3fc0000
 8000e96:	f44c 3c58 	orr.w	ip, ip, #221184	@ 0x36000
 8000e9a:	f44c 7c7f 	orr.w	ip, ip, #1020	@ 0x3fc
 8000e9e:	f04c 0c03 	orr.w	ip, ip, #3
 8000ea2:	ea20 000c 	bic.w	r0, r0, ip
 8000ea6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000eaa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000eae:	4319      	orrs	r1, r3
 8000eb0:	4329      	orrs	r1, r5
 8000eb2:	4308      	orrs	r0, r1
 8000eb4:	6060      	str	r0, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000eb6:	bc30      	pop	{r4, r5}
 8000eb8:	4770      	bx	lr

08000eba <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000eba:	f011 0f01 	tst.w	r1, #1
 8000ebe:	d009      	beq.n	8000ed4 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000ec0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8000ec4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8000ec8:	2b28      	cmp	r3, #40	@ 0x28
 8000eca:	d001      	beq.n	8000ed0 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000ecc:	23f2      	movs	r3, #242	@ 0xf2
 8000ece:	e002      	b.n	8000ed6 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8000ed0:	2342      	movs	r3, #66	@ 0x42
 8000ed2:	e000      	b.n	8000ed6 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8000ed4:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000ed6:	f011 0f02 	tst.w	r1, #2
 8000eda:	d009      	beq.n	8000ef0 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000edc:	f043 0c44 	orr.w	ip, r3, #68	@ 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000ee0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8000ee4:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8000ee8:	2a28      	cmp	r2, #40	@ 0x28
 8000eea:	d016      	beq.n	8000f1a <I2C_Disable_IRQ+0x60>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000eec:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000ef0:	f011 0f04 	tst.w	r1, #4
 8000ef4:	d001      	beq.n	8000efa <I2C_Disable_IRQ+0x40>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000ef6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000efa:	f001 0211 	and.w	r2, r1, #17
 8000efe:	2a11      	cmp	r2, #17
 8000f00:	d00d      	beq.n	8000f1e <I2C_Disable_IRQ+0x64>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000f02:	f001 0112 	and.w	r1, r1, #18
 8000f06:	2912      	cmp	r1, #18
 8000f08:	d00c      	beq.n	8000f24 <I2C_Disable_IRQ+0x6a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8000f0a:	2912      	cmp	r1, #18
 8000f0c:	d00d      	beq.n	8000f2a <I2C_Disable_IRQ+0x70>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000f0e:	6801      	ldr	r1, [r0, #0]
 8000f10:	680a      	ldr	r2, [r1, #0]
 8000f12:	ea22 0303 	bic.w	r3, r2, r3
 8000f16:	600b      	str	r3, [r1, #0]
}
 8000f18:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	e7e8      	b.n	8000ef0 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000f1e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8000f22:	e7ee      	b.n	8000f02 <I2C_Disable_IRQ+0x48>
    tmpisr |= I2C_IT_STOPI;
 8000f24:	f043 0320 	orr.w	r3, r3, #32
 8000f28:	e7ef      	b.n	8000f0a <I2C_Disable_IRQ+0x50>
    tmpisr |= I2C_IT_TCI;
 8000f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f2e:	e7ee      	b.n	8000f0e <I2C_Disable_IRQ+0x54>

08000f30 <I2C_IsAcknowledgeFailed>:
{
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	4605      	mov	r5, r0
 8000f34:	460e      	mov	r6, r1
 8000f36:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f38:	6803      	ldr	r3, [r0, #0]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f013 0f10 	tst.w	r3, #16
 8000f40:	d101      	bne.n	8000f46 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8000f42:	2000      	movs	r0, #0
}
 8000f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f46:	682b      	ldr	r3, [r5, #0]
 8000f48:	699c      	ldr	r4, [r3, #24]
 8000f4a:	f014 0f20 	tst.w	r4, #32
 8000f4e:	d117      	bne.n	8000f80 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8000f50:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000f54:	d0f7      	beq.n	8000f46 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f56:	f7ff fb89 	bl	800066c <HAL_GetTick>
 8000f5a:	1bc0      	subs	r0, r0, r7
 8000f5c:	42b0      	cmp	r0, r6
 8000f5e:	d801      	bhi.n	8000f64 <I2C_IsAcknowledgeFailed+0x34>
 8000f60:	2e00      	cmp	r6, #0
 8000f62:	d1f0      	bne.n	8000f46 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f64:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8000f66:	f043 0320 	orr.w	r3, r3, #32
 8000f6a:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8000f78:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	e7e1      	b.n	8000f44 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f80:	2210      	movs	r2, #16
 8000f82:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	2420      	movs	r4, #32
 8000f88:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f7ff ff68 	bl	8000e60 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000f90:	682a      	ldr	r2, [r5, #0]
 8000f92:	6853      	ldr	r3, [r2, #4]
 8000f94:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8000f98:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8000f9c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000fa6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000fae:	f885 4041 	strb.w	r4, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8000fb8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
    return HAL_ERROR;
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	e7c1      	b.n	8000f44 <I2C_IsAcknowledgeFailed+0x14>

08000fc0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	460d      	mov	r5, r1
 8000fc6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f013 0f02 	tst.w	r3, #2
 8000fd0:	d11d      	bne.n	800100e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f7ff ffaa 	bl	8000f30 <I2C_IsAcknowledgeFailed>
 8000fdc:	b9c8      	cbnz	r0, 8001012 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8000fde:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000fe2:	d0f1      	beq.n	8000fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fe4:	f7ff fb42 	bl	800066c <HAL_GetTick>
 8000fe8:	1b80      	subs	r0, r0, r6
 8000fea:	42a8      	cmp	r0, r5
 8000fec:	d801      	bhi.n	8000ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	d1ea      	bne.n	8000fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ff2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000ffa:	2320      	movs	r3, #32
 8000ffc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001000:	2300      	movs	r3, #0
 8001002:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8001006:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800100a:	2001      	movs	r0, #1
 800100c:	e000      	b.n	8001010 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800100e:	2000      	movs	r0, #0
}
 8001010:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001012:	2001      	movs	r0, #1
 8001014:	e7fc      	b.n	8001010 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08001016 <I2C_WaitOnFlagUntilTimeout>:
{
 8001016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800101a:	4606      	mov	r6, r0
 800101c:	4688      	mov	r8, r1
 800101e:	4617      	mov	r7, r2
 8001020:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001022:	6834      	ldr	r4, [r6, #0]
 8001024:	69a4      	ldr	r4, [r4, #24]
 8001026:	ea38 0404 	bics.w	r4, r8, r4
 800102a:	bf0c      	ite	eq
 800102c:	2401      	moveq	r4, #1
 800102e:	2400      	movne	r4, #0
 8001030:	42bc      	cmp	r4, r7
 8001032:	d118      	bne.n	8001066 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001034:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001038:	d0f3      	beq.n	8001022 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800103a:	f7ff fb17 	bl	800066c <HAL_GetTick>
 800103e:	9b06      	ldr	r3, [sp, #24]
 8001040:	1ac0      	subs	r0, r0, r3
 8001042:	42a8      	cmp	r0, r5
 8001044:	d801      	bhi.n	800104a <I2C_WaitOnFlagUntilTimeout+0x34>
 8001046:	2d00      	cmp	r5, #0
 8001048:	d1eb      	bne.n	8001022 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800104a:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800104c:	f043 0320 	orr.w	r3, r3, #32
 8001050:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001052:	2320      	movs	r3, #32
 8001054:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001058:	2300      	movs	r3, #0
 800105a:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800105e:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8001062:	2001      	movs	r0, #1
 8001064:	e000      	b.n	8001068 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8001066:	2000      	movs	r0, #0
}
 8001068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800106c <I2C_RequestMemoryWrite>:
{
 800106c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	4604      	mov	r4, r0
 8001074:	4690      	mov	r8, r2
 8001076:	461d      	mov	r5, r3
 8001078:	9e08      	ldr	r6, [sp, #32]
 800107a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800107c:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <I2C_RequestMemoryWrite+0x78>)
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001084:	b2ea      	uxtb	r2, r5
 8001086:	f7ff fefc 	bl	8000e82 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800108a:	463a      	mov	r2, r7
 800108c:	4631      	mov	r1, r6
 800108e:	4620      	mov	r0, r4
 8001090:	f7ff ff96 	bl	8000fc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001094:	b9f8      	cbnz	r0, 80010d6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001096:	2d01      	cmp	r5, #1
 8001098:	d10e      	bne.n	80010b8 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	fa5f f288 	uxtb.w	r2, r8
 80010a0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80010a2:	9700      	str	r7, [sp, #0]
 80010a4:	4633      	mov	r3, r6
 80010a6:	2200      	movs	r2, #0
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff ffb3 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 80010b0:	b9a8      	cbnz	r0, 80010de <I2C_RequestMemoryWrite+0x72>
}
 80010b2:	b002      	add	sp, #8
 80010b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010c0:	463a      	mov	r2, r7
 80010c2:	4631      	mov	r1, r6
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff ff7b 	bl	8000fc0 <I2C_WaitOnTXISFlagUntilTimeout>
 80010ca:	b930      	cbnz	r0, 80010da <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	fa5f f288 	uxtb.w	r2, r8
 80010d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80010d4:	e7e5      	b.n	80010a2 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e7eb      	b.n	80010b2 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80010da:	2001      	movs	r0, #1
 80010dc:	e7e9      	b.n	80010b2 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80010de:	2001      	movs	r0, #1
 80010e0:	e7e7      	b.n	80010b2 <I2C_RequestMemoryWrite+0x46>
 80010e2:	bf00      	nop
 80010e4:	80002000 	.word	0x80002000

080010e8 <I2C_RequestMemoryRead>:
{
 80010e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	4604      	mov	r4, r0
 80010f0:	4690      	mov	r8, r2
 80010f2:	461d      	mov	r5, r3
 80010f4:	9e08      	ldr	r6, [sp, #32]
 80010f6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <I2C_RequestMemoryRead+0x74>)
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2300      	movs	r3, #0
 80010fe:	b2ea      	uxtb	r2, r5
 8001100:	f7ff febf 	bl	8000e82 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001104:	463a      	mov	r2, r7
 8001106:	4631      	mov	r1, r6
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff ff59 	bl	8000fc0 <I2C_WaitOnTXISFlagUntilTimeout>
 800110e:	b9f8      	cbnz	r0, 8001150 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001110:	2d01      	cmp	r5, #1
 8001112:	d10e      	bne.n	8001132 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	fa5f f288 	uxtb.w	r2, r8
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800111c:	9700      	str	r7, [sp, #0]
 800111e:	4633      	mov	r3, r6
 8001120:	2200      	movs	r2, #0
 8001122:	2140      	movs	r1, #64	@ 0x40
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff ff76 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 800112a:	b9a8      	cbnz	r0, 8001158 <I2C_RequestMemoryRead+0x70>
}
 800112c:	b002      	add	sp, #8
 800112e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800113a:	463a      	mov	r2, r7
 800113c:	4631      	mov	r1, r6
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff ff3e 	bl	8000fc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001144:	b930      	cbnz	r0, 8001154 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	fa5f f288 	uxtb.w	r2, r8
 800114c:	629a      	str	r2, [r3, #40]	@ 0x28
 800114e:	e7e5      	b.n	800111c <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8001150:	2001      	movs	r0, #1
 8001152:	e7eb      	b.n	800112c <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8001154:	2001      	movs	r0, #1
 8001156:	e7e9      	b.n	800112c <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8001158:	2001      	movs	r0, #1
 800115a:	e7e7      	b.n	800112c <I2C_RequestMemoryRead+0x44>
 800115c:	80002000 	.word	0x80002000

08001160 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	4605      	mov	r5, r0
 8001164:	460c      	mov	r4, r1
 8001166:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001168:	682b      	ldr	r3, [r5, #0]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f013 0f20 	tst.w	r3, #32
 8001170:	d11a      	bne.n	80011a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001172:	4632      	mov	r2, r6
 8001174:	4621      	mov	r1, r4
 8001176:	4628      	mov	r0, r5
 8001178:	f7ff feda 	bl	8000f30 <I2C_IsAcknowledgeFailed>
 800117c:	b9b0      	cbnz	r0, 80011ac <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800117e:	f7ff fa75 	bl	800066c <HAL_GetTick>
 8001182:	1b80      	subs	r0, r0, r6
 8001184:	42a0      	cmp	r0, r4
 8001186:	d801      	bhi.n	800118c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001188:	2c00      	cmp	r4, #0
 800118a:	d1ed      	bne.n	8001168 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800118c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001194:	2320      	movs	r3, #32
 8001196:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800119a:	2300      	movs	r3, #0
 800119c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80011a0:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 80011a4:	2001      	movs	r0, #1
}
 80011a6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80011a8:	2000      	movs	r0, #0
 80011aa:	e7fc      	b.n	80011a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80011ac:	2001      	movs	r0, #1
 80011ae:	e7fa      	b.n	80011a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080011b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80011b0:	b570      	push	{r4, r5, r6, lr}
 80011b2:	4604      	mov	r4, r0
 80011b4:	460d      	mov	r5, r1
 80011b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f013 0f04 	tst.w	r3, #4
 80011c0:	d13e      	bne.n	8001240 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80011c2:	4632      	mov	r2, r6
 80011c4:	4629      	mov	r1, r5
 80011c6:	4620      	mov	r0, r4
 80011c8:	f7ff feb2 	bl	8000f30 <I2C_IsAcknowledgeFailed>
 80011cc:	4601      	mov	r1, r0
 80011ce:	2800      	cmp	r0, #0
 80011d0:	d138      	bne.n	8001244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	f012 0f20 	tst.w	r2, #32
 80011da:	d113      	bne.n	8001204 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011dc:	f7ff fa46 	bl	800066c <HAL_GetTick>
 80011e0:	1b80      	subs	r0, r0, r6
 80011e2:	42a8      	cmp	r0, r5
 80011e4:	d801      	bhi.n	80011ea <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d1e6      	bne.n	80011b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011f2:	2320      	movs	r3, #32
 80011f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      __HAL_UNLOCK(hi2c);
 80011f8:	2300      	movs	r3, #0
 80011fa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80011fe:	2101      	movs	r1, #1
}
 8001200:	4608      	mov	r0, r1
 8001202:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	f012 0f04 	tst.w	r2, #4
 800120a:	d002      	beq.n	8001212 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800120c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800120e:	2a00      	cmp	r2, #0
 8001210:	d1f6      	bne.n	8001200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001212:	2220      	movs	r2, #32
 8001214:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001216:	6821      	ldr	r1, [r4, #0]
 8001218:	684b      	ldr	r3, [r1, #4]
 800121a:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800121e:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001222:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800122c:	2300      	movs	r3, #0
 800122e:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001230:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001234:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8001238:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800123c:	2101      	movs	r1, #1
 800123e:	e7df      	b.n	8001200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8001240:	2100      	movs	r1, #0
 8001242:	e7dd      	b.n	8001200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8001244:	2101      	movs	r1, #1
 8001246:	e7db      	b.n	8001200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08001248 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001248:	2800      	cmp	r0, #0
 800124a:	d057      	beq.n	80012fc <HAL_I2C_Init+0xb4>
{
 800124c:	b510      	push	{r4, lr}
 800124e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001250:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001254:	2b00      	cmp	r3, #0
 8001256:	d041      	beq.n	80012dc <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001258:	2324      	movs	r3, #36	@ 0x24
 800125a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800125e:	6822      	ldr	r2, [r4, #0]
 8001260:	6813      	ldr	r3, [r2, #0]
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001270:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001272:	6822      	ldr	r2, [r4, #0]
 8001274:	6893      	ldr	r3, [r2, #8]
 8001276:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800127a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800127c:	68e3      	ldr	r3, [r4, #12]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d031      	beq.n	80012e6 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001282:	68a3      	ldr	r3, [r4, #8]
 8001284:	6822      	ldr	r2, [r4, #0]
 8001286:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 800128a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800128c:	68e3      	ldr	r3, [r4, #12]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d02f      	beq.n	80012f2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	6851      	ldr	r1, [r2, #4]
 8001296:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <HAL_I2C_Init+0xb8>)
 8001298:	430b      	orrs	r3, r1
 800129a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800129c:	6822      	ldr	r2, [r4, #0]
 800129e:	68d3      	ldr	r3, [r2, #12]
 80012a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80012a4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012a6:	6923      	ldr	r3, [r4, #16]
 80012a8:	6962      	ldr	r2, [r4, #20]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	69a1      	ldr	r1, [r4, #24]
 80012ae:	6822      	ldr	r2, [r4, #0]
 80012b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80012b4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012b6:	69e3      	ldr	r3, [r4, #28]
 80012b8:	6a21      	ldr	r1, [r4, #32]
 80012ba:	6822      	ldr	r2, [r4, #0]
 80012bc:	430b      	orrs	r3, r1
 80012be:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80012c0:	6822      	ldr	r2, [r4, #0]
 80012c2:	6813      	ldr	r3, [r2, #0]
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ca:	2000      	movs	r0, #0
 80012cc:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012ce:	2320      	movs	r3, #32
 80012d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012d4:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d6:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80012da:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80012dc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80012e0:	f00c fdd4 	bl	800de8c <HAL_I2C_MspInit>
 80012e4:	e7b8      	b.n	8001258 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012e6:	68a3      	ldr	r3, [r4, #8]
 80012e8:	6822      	ldr	r2, [r4, #0]
 80012ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012ee:	6093      	str	r3, [r2, #8]
 80012f0:	e7cc      	b.n	800128c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	e7ca      	b.n	8001292 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80012fc:	2001      	movs	r0, #1
}
 80012fe:	4770      	bx	lr
 8001300:	02008000 	.word	0x02008000

08001304 <HAL_I2C_Master_Transmit>:
{
 8001304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	460f      	mov	r7, r1
 800130c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800130e:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8001312:	b2c9      	uxtb	r1, r1
 8001314:	2920      	cmp	r1, #32
 8001316:	f040 80a3 	bne.w	8001460 <HAL_I2C_Master_Transmit+0x15c>
 800131a:	4604      	mov	r4, r0
 800131c:	4690      	mov	r8, r2
 800131e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8001320:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8001324:	2b01      	cmp	r3, #1
 8001326:	f000 809f 	beq.w	8001468 <HAL_I2C_Master_Transmit+0x164>
 800132a:	f04f 0a01 	mov.w	sl, #1
 800132e:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8001332:	f7ff f99b 	bl	800066c <HAL_GetTick>
 8001336:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001338:	9000      	str	r0, [sp, #0]
 800133a:	2319      	movs	r3, #25
 800133c:	4652      	mov	r2, sl
 800133e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001342:	4620      	mov	r0, r4
 8001344:	f7ff fe67 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 8001348:	2800      	cmp	r0, #0
 800134a:	f040 808f 	bne.w	800146c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800134e:	2321      	movs	r3, #33	@ 0x21
 8001350:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001354:	2310      	movs	r3, #16
 8001356:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800135a:	2300      	movs	r3, #0
 800135c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800135e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001362:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001366:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001368:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800136a:	b29b      	uxth	r3, r3
 800136c:	2bff      	cmp	r3, #255	@ 0xff
 800136e:	d90a      	bls.n	8001386 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001370:	22ff      	movs	r2, #255	@ 0xff
 8001372:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001374:	4b41      	ldr	r3, [pc, #260]	@ (800147c <HAL_I2C_Master_Transmit+0x178>)
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800137c:	4639      	mov	r1, r7
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff fd7f 	bl	8000e82 <I2C_TransferConfig>
 8001384:	e018      	b.n	80013b8 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8001386:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001388:	b292      	uxth	r2, r2
 800138a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800138c:	4b3b      	ldr	r3, [pc, #236]	@ (800147c <HAL_I2C_Master_Transmit+0x178>)
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	4639      	mov	r1, r7
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fd72 	bl	8000e82 <I2C_TransferConfig>
 800139e:	e00b      	b.n	80013b8 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80013a0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80013a2:	b292      	uxth	r2, r2
 80013a4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013a6:	2300      	movs	r3, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	4639      	mov	r1, r7
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7ff fd65 	bl	8000e82 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d033      	beq.n	8001428 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013c0:	462a      	mov	r2, r5
 80013c2:	4631      	mov	r1, r6
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff fdfb 	bl	8000fc0 <I2C_WaitOnTXISFlagUntilTimeout>
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d150      	bne.n	8001470 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013ce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	7812      	ldrb	r2, [r2, #0]
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80013d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80013d8:	3301      	adds	r3, #1
 80013da:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80013dc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80013de:	b29b      	uxth	r3, r3
 80013e0:	3b01      	subs	r3, #1
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80013e6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80013e8:	3b01      	subs	r3, #1
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013ee:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80013f0:	b292      	uxth	r2, r2
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d0e0      	beq.n	80013b8 <HAL_I2C_Master_Transmit+0xb4>
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1de      	bne.n	80013b8 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013fa:	9500      	str	r5, [sp, #0]
 80013fc:	4633      	mov	r3, r6
 80013fe:	2200      	movs	r2, #0
 8001400:	2180      	movs	r1, #128	@ 0x80
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fe07 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 8001408:	bba0      	cbnz	r0, 8001474 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800140a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800140c:	b29b      	uxth	r3, r3
 800140e:	2bff      	cmp	r3, #255	@ 0xff
 8001410:	d9c6      	bls.n	80013a0 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001412:	22ff      	movs	r2, #255	@ 0xff
 8001414:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001416:	2300      	movs	r3, #0
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800141e:	4639      	mov	r1, r7
 8001420:	4620      	mov	r0, r4
 8001422:	f7ff fd2e 	bl	8000e82 <I2C_TransferConfig>
 8001426:	e7c7      	b.n	80013b8 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001428:	462a      	mov	r2, r5
 800142a:	4631      	mov	r1, r6
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff fe97 	bl	8001160 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001432:	bb08      	cbnz	r0, 8001478 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	2220      	movs	r2, #32
 8001438:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800143a:	6821      	ldr	r1, [r4, #0]
 800143c:	684b      	ldr	r3, [r1, #4]
 800143e:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001442:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001446:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001450:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001454:	2300      	movs	r3, #0
 8001456:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800145a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800145e:	e000      	b.n	8001462 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8001460:	2002      	movs	r0, #2
}
 8001462:	b002      	add	sp, #8
 8001464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8001468:	2002      	movs	r0, #2
 800146a:	e7fa      	b.n	8001462 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 800146c:	2001      	movs	r0, #1
 800146e:	e7f8      	b.n	8001462 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8001470:	2001      	movs	r0, #1
 8001472:	e7f6      	b.n	8001462 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8001474:	2001      	movs	r0, #1
 8001476:	e7f4      	b.n	8001462 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8001478:	2001      	movs	r0, #1
 800147a:	e7f2      	b.n	8001462 <HAL_I2C_Master_Transmit+0x15e>
 800147c:	80002000 	.word	0x80002000

08001480 <HAL_I2C_Master_Receive>:
{
 8001480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	460f      	mov	r7, r1
 8001488:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800148a:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800148e:	b2c9      	uxtb	r1, r1
 8001490:	2920      	cmp	r1, #32
 8001492:	f040 80a2 	bne.w	80015da <HAL_I2C_Master_Receive+0x15a>
 8001496:	4604      	mov	r4, r0
 8001498:	4690      	mov	r8, r2
 800149a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800149c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	f000 809e 	beq.w	80015e2 <HAL_I2C_Master_Receive+0x162>
 80014a6:	f04f 0a01 	mov.w	sl, #1
 80014aa:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80014ae:	f7ff f8dd 	bl	800066c <HAL_GetTick>
 80014b2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014b4:	9000      	str	r0, [sp, #0]
 80014b6:	2319      	movs	r3, #25
 80014b8:	4652      	mov	r2, sl
 80014ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff fda9 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	f040 808e 	bne.w	80015e6 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014ca:	2322      	movs	r3, #34	@ 0x22
 80014cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014d0:	2310      	movs	r3, #16
 80014d2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80014da:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80014de:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80014e2:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	2bff      	cmp	r3, #255	@ 0xff
 80014ea:	d90a      	bls.n	8001502 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ec:	22ff      	movs	r2, #255	@ 0xff
 80014ee:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80014f0:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <HAL_I2C_Master_Receive+0x178>)
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014f8:	4639      	mov	r1, r7
 80014fa:	4620      	mov	r0, r4
 80014fc:	f7ff fcc1 	bl	8000e82 <I2C_TransferConfig>
 8001500:	e018      	b.n	8001534 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8001502:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001504:	b292      	uxth	r2, r2
 8001506:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001508:	4b3b      	ldr	r3, [pc, #236]	@ (80015f8 <HAL_I2C_Master_Receive+0x178>)
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	4639      	mov	r1, r7
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff fcb4 	bl	8000e82 <I2C_TransferConfig>
 800151a:	e00b      	b.n	8001534 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800151c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800151e:	b292      	uxth	r2, r2
 8001520:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001522:	2300      	movs	r3, #0
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	4639      	mov	r1, r7
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff fca7 	bl	8000e82 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001534:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001536:	b29b      	uxth	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d032      	beq.n	80015a2 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800153c:	462a      	mov	r2, r5
 800153e:	4631      	mov	r1, r6
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff fe35 	bl	80011b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001546:	2800      	cmp	r0, #0
 8001548:	d14f      	bne.n	80015ea <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800154e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001550:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001552:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001554:	3301      	adds	r3, #1
 8001556:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8001558:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800155a:	3a01      	subs	r2, #1
 800155c:	b292      	uxth	r2, r2
 800155e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001560:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001562:	b29b      	uxth	r3, r3
 8001564:	3b01      	subs	r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800156a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0e0      	beq.n	8001534 <HAL_I2C_Master_Receive+0xb4>
 8001572:	2a00      	cmp	r2, #0
 8001574:	d1de      	bne.n	8001534 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001576:	9500      	str	r5, [sp, #0]
 8001578:	4633      	mov	r3, r6
 800157a:	2180      	movs	r1, #128	@ 0x80
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff fd4a 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 8001582:	bba0      	cbnz	r0, 80015ee <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001584:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001586:	b29b      	uxth	r3, r3
 8001588:	2bff      	cmp	r3, #255	@ 0xff
 800158a:	d9c7      	bls.n	800151c <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800158c:	22ff      	movs	r2, #255	@ 0xff
 800158e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001598:	4639      	mov	r1, r7
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff fc71 	bl	8000e82 <I2C_TransferConfig>
 80015a0:	e7c8      	b.n	8001534 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a2:	462a      	mov	r2, r5
 80015a4:	4631      	mov	r1, r6
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff fdda 	bl	8001160 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015ac:	bb08      	cbnz	r0, 80015f2 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	2220      	movs	r2, #32
 80015b2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80015b4:	6821      	ldr	r1, [r4, #0]
 80015b6:	684b      	ldr	r3, [r1, #4]
 80015b8:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80015bc:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80015c0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80015ca:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80015d4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 80015d8:	e000      	b.n	80015dc <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 80015da:	2002      	movs	r0, #2
}
 80015dc:	b002      	add	sp, #8
 80015de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80015e2:	2002      	movs	r0, #2
 80015e4:	e7fa      	b.n	80015dc <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
 80015e8:	e7f8      	b.n	80015dc <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 80015ea:	2001      	movs	r0, #1
 80015ec:	e7f6      	b.n	80015dc <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
 80015f0:	e7f4      	b.n	80015dc <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80015f2:	2001      	movs	r0, #1
 80015f4:	e7f2      	b.n	80015dc <HAL_I2C_Master_Receive+0x15c>
 80015f6:	bf00      	nop
 80015f8:	80002400 	.word	0x80002400

080015fc <HAL_I2C_Mem_Write>:
{
 80015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001600:	b083      	sub	sp, #12
 8001602:	460d      	mov	r5, r1
 8001604:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8001608:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800160a:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800160e:	b2c9      	uxtb	r1, r1
 8001610:	2920      	cmp	r1, #32
 8001612:	f040 80bc 	bne.w	800178e <HAL_I2C_Mem_Write+0x192>
 8001616:	4604      	mov	r4, r0
 8001618:	4690      	mov	r8, r2
 800161a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800161c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800161e:	f1ba 0f00 	cmp.w	sl, #0
 8001622:	bf18      	it	ne
 8001624:	2b00      	cmpne	r3, #0
 8001626:	d016      	beq.n	8001656 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8001628:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800162c:	2b01      	cmp	r3, #1
 800162e:	f000 80b2 	beq.w	8001796 <HAL_I2C_Mem_Write+0x19a>
 8001632:	f04f 0b01 	mov.w	fp, #1
 8001636:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800163a:	f7ff f817 	bl	800066c <HAL_GetTick>
 800163e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001640:	9000      	str	r0, [sp, #0]
 8001642:	2319      	movs	r3, #25
 8001644:	465a      	mov	r2, fp
 8001646:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff fce3 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 8001650:	b130      	cbz	r0, 8001660 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
 8001654:	e09c      	b.n	8001790 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001656:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800165a:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 800165c:	2001      	movs	r0, #1
 800165e:	e097      	b.n	8001790 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001660:	2321      	movs	r3, #33	@ 0x21
 8001662:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001666:	2340      	movs	r3, #64	@ 0x40
 8001668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800166c:	2300      	movs	r3, #0
 800166e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001670:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001672:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001674:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001678:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800167a:	9601      	str	r6, [sp, #4]
 800167c:	9700      	str	r7, [sp, #0]
 800167e:	464b      	mov	r3, r9
 8001680:	4642      	mov	r2, r8
 8001682:	4629      	mov	r1, r5
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fcf1 	bl	800106c <I2C_RequestMemoryWrite>
 800168a:	b970      	cbnz	r0, 80016aa <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800168c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800168e:	b29b      	uxth	r3, r3
 8001690:	2bff      	cmp	r3, #255	@ 0xff
 8001692:	d90f      	bls.n	80016b4 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001694:	22ff      	movs	r2, #255	@ 0xff
 8001696:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001698:	2300      	movs	r3, #0
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016a0:	4629      	mov	r1, r5
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff fbed 	bl	8000e82 <I2C_TransferConfig>
 80016a8:	e021      	b.n	80016ee <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 80016aa:	2300      	movs	r3, #0
 80016ac:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80016b0:	4658      	mov	r0, fp
 80016b2:	e06d      	b.n	8001790 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 80016b4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80016b6:	b292      	uxth	r2, r2
 80016b8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016ba:	2300      	movs	r3, #0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	4629      	mov	r1, r5
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7ff fbdb 	bl	8000e82 <I2C_TransferConfig>
 80016cc:	e00f      	b.n	80016ee <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 80016ce:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80016d0:	b292      	uxth	r2, r2
 80016d2:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016d4:	2300      	movs	r3, #0
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	4629      	mov	r1, r5
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff fbce 	bl	8000e82 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80016e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d033      	beq.n	8001756 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ee:	4632      	mov	r2, r6
 80016f0:	4639      	mov	r1, r7
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fc64 	bl	8000fc0 <I2C_WaitOnTXISFlagUntilTimeout>
 80016f8:	2800      	cmp	r0, #0
 80016fa:	d14e      	bne.n	800179a <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	7812      	ldrb	r2, [r2, #0]
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001704:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001706:	3301      	adds	r3, #1
 8001708:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800170a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800170c:	b29b      	uxth	r3, r3
 800170e:	3b01      	subs	r3, #1
 8001710:	b29b      	uxth	r3, r3
 8001712:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001714:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001716:	3b01      	subs	r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800171c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800171e:	b292      	uxth	r2, r2
 8001720:	2a00      	cmp	r2, #0
 8001722:	d0e0      	beq.n	80016e6 <HAL_I2C_Mem_Write+0xea>
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1de      	bne.n	80016e6 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001728:	9600      	str	r6, [sp, #0]
 800172a:	463b      	mov	r3, r7
 800172c:	2200      	movs	r2, #0
 800172e:	2180      	movs	r1, #128	@ 0x80
 8001730:	4620      	mov	r0, r4
 8001732:	f7ff fc70 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 8001736:	bb90      	cbnz	r0, 800179e <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001738:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	2bff      	cmp	r3, #255	@ 0xff
 800173e:	d9c6      	bls.n	80016ce <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001740:	22ff      	movs	r2, #255	@ 0xff
 8001742:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001744:	2300      	movs	r3, #0
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800174c:	4629      	mov	r1, r5
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff fb97 	bl	8000e82 <I2C_TransferConfig>
 8001754:	e7c7      	b.n	80016e6 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001756:	4632      	mov	r2, r6
 8001758:	4639      	mov	r1, r7
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff fd00 	bl	8001160 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001760:	b9f8      	cbnz	r0, 80017a2 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	2220      	movs	r2, #32
 8001766:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001768:	6821      	ldr	r1, [r4, #0]
 800176a:	684b      	ldr	r3, [r1, #4]
 800176c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001770:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001774:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800177e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8001788:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800178c:	e000      	b.n	8001790 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800178e:	2002      	movs	r0, #2
}
 8001790:	b003      	add	sp, #12
 8001792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001796:	2002      	movs	r0, #2
 8001798:	e7fa      	b.n	8001790 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 800179a:	2001      	movs	r0, #1
 800179c:	e7f8      	b.n	8001790 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800179e:	2001      	movs	r0, #1
 80017a0:	e7f6      	b.n	8001790 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 80017a2:	2001      	movs	r0, #1
 80017a4:	e7f4      	b.n	8001790 <HAL_I2C_Mem_Write+0x194>
	...

080017a8 <HAL_I2C_Mem_Read>:
{
 80017a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ac:	b083      	sub	sp, #12
 80017ae:	460d      	mov	r5, r1
 80017b0:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80017b4:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b6:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80017ba:	b2c9      	uxtb	r1, r1
 80017bc:	2920      	cmp	r1, #32
 80017be:	f040 80bd 	bne.w	800193c <HAL_I2C_Mem_Read+0x194>
 80017c2:	4604      	mov	r4, r0
 80017c4:	4690      	mov	r8, r2
 80017c6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80017c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80017ca:	f1ba 0f00 	cmp.w	sl, #0
 80017ce:	bf18      	it	ne
 80017d0:	2b00      	cmpne	r3, #0
 80017d2:	d016      	beq.n	8001802 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 80017d4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80017d8:	2b01      	cmp	r3, #1
 80017da:	f000 80b3 	beq.w	8001944 <HAL_I2C_Mem_Read+0x19c>
 80017de:	f04f 0b01 	mov.w	fp, #1
 80017e2:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80017e6:	f7fe ff41 	bl	800066c <HAL_GetTick>
 80017ea:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ec:	9000      	str	r0, [sp, #0]
 80017ee:	2319      	movs	r3, #25
 80017f0:	465a      	mov	r2, fp
 80017f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7ff fc0d 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 80017fc:	b130      	cbz	r0, 800180c <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
 8001800:	e09d      	b.n	800193e <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001802:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001806:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 8001808:	2001      	movs	r0, #1
 800180a:	e098      	b.n	800193e <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800180c:	2322      	movs	r3, #34	@ 0x22
 800180e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001812:	2340      	movs	r3, #64	@ 0x40
 8001814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001818:	2300      	movs	r3, #0
 800181a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800181c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800181e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001820:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001824:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001826:	9601      	str	r6, [sp, #4]
 8001828:	9700      	str	r7, [sp, #0]
 800182a:	464b      	mov	r3, r9
 800182c:	4642      	mov	r2, r8
 800182e:	4629      	mov	r1, r5
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff fc59 	bl	80010e8 <I2C_RequestMemoryRead>
 8001836:	b970      	cbnz	r0, 8001856 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001838:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800183a:	b29b      	uxth	r3, r3
 800183c:	2bff      	cmp	r3, #255	@ 0xff
 800183e:	d90f      	bls.n	8001860 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001840:	22ff      	movs	r2, #255	@ 0xff
 8001842:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001844:	4b43      	ldr	r3, [pc, #268]	@ (8001954 <HAL_I2C_Mem_Read+0x1ac>)
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800184c:	4629      	mov	r1, r5
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff fb17 	bl	8000e82 <I2C_TransferConfig>
 8001854:	e021      	b.n	800189a <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8001856:	2300      	movs	r3, #0
 8001858:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800185c:	4658      	mov	r0, fp
 800185e:	e06e      	b.n	800193e <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8001860:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001862:	b292      	uxth	r2, r2
 8001864:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001866:	4b3b      	ldr	r3, [pc, #236]	@ (8001954 <HAL_I2C_Mem_Read+0x1ac>)
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	4629      	mov	r1, r5
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff fb05 	bl	8000e82 <I2C_TransferConfig>
 8001878:	e00f      	b.n	800189a <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800187a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800187c:	b292      	uxth	r2, r2
 800187e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	4629      	mov	r1, r5
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff faf8 	bl	8000e82 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001892:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d034      	beq.n	8001904 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800189a:	9600      	str	r6, [sp, #0]
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	2104      	movs	r1, #4
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff fbb7 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d14d      	bne.n	8001948 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80018b2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80018b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80018b6:	3301      	adds	r3, #1
 80018b8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80018ba:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80018bc:	3a01      	subs	r2, #1
 80018be:	b292      	uxth	r2, r2
 80018c0:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80018c2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018cc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0de      	beq.n	8001892 <HAL_I2C_Mem_Read+0xea>
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	d1dc      	bne.n	8001892 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018d8:	9600      	str	r6, [sp, #0]
 80018da:	463b      	mov	r3, r7
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff fb99 	bl	8001016 <I2C_WaitOnFlagUntilTimeout>
 80018e4:	bb90      	cbnz	r0, 800194c <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2bff      	cmp	r3, #255	@ 0xff
 80018ec:	d9c5      	bls.n	800187a <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ee:	22ff      	movs	r2, #255	@ 0xff
 80018f0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018f2:	2300      	movs	r3, #0
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018fa:	4629      	mov	r1, r5
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff fac0 	bl	8000e82 <I2C_TransferConfig>
 8001902:	e7c6      	b.n	8001892 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001904:	4632      	mov	r2, r6
 8001906:	4639      	mov	r1, r7
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff fc29 	bl	8001160 <I2C_WaitOnSTOPFlagUntilTimeout>
 800190e:	b9f8      	cbnz	r0, 8001950 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	2220      	movs	r2, #32
 8001914:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001916:	6821      	ldr	r1, [r4, #0]
 8001918:	684b      	ldr	r3, [r1, #4]
 800191a:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800191e:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001922:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800192c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001930:	2300      	movs	r3, #0
 8001932:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8001936:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800193a:	e000      	b.n	800193e <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 800193c:	2002      	movs	r0, #2
}
 800193e:	b003      	add	sp, #12
 8001940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001944:	2002      	movs	r0, #2
 8001946:	e7fa      	b.n	800193e <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8001948:	2001      	movs	r0, #1
 800194a:	e7f8      	b.n	800193e <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 800194c:	2001      	movs	r0, #1
 800194e:	e7f6      	b.n	800193e <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8001950:	2001      	movs	r0, #1
 8001952:	e7f4      	b.n	800193e <HAL_I2C_Mem_Read+0x196>
 8001954:	80002400 	.word	0x80002400

08001958 <HAL_I2C_EV_IRQHandler>:
{
 8001958:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800195a:	6803      	ldr	r3, [r0, #0]
 800195c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800195e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001960:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001962:	b103      	cbz	r3, 8001966 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001964:	4798      	blx	r3
}
 8001966:	bd08      	pop	{r3, pc}

08001968 <HAL_I2C_SlaveTxCpltCallback>:
}
 8001968:	4770      	bx	lr

0800196a <HAL_I2C_SlaveRxCpltCallback>:
}
 800196a:	4770      	bx	lr

0800196c <I2C_ITSlaveSeqCplt>:
{
 800196c:	b510      	push	{r4, lr}
 800196e:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001970:	2300      	movs	r3, #0
 8001972:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001976:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b29      	cmp	r3, #41	@ 0x29
 800197e:	d005      	beq.n	800198c <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001980:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b2a      	cmp	r3, #42	@ 0x2a
 8001988:	d00f      	beq.n	80019aa <I2C_ITSlaveSeqCplt+0x3e>
}
 800198a:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800198c:	2328      	movs	r3, #40	@ 0x28
 800198e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001992:	2321      	movs	r3, #33	@ 0x21
 8001994:	6303      	str	r3, [r0, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001996:	2101      	movs	r1, #1
 8001998:	f7ff fa8f 	bl	8000eba <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800199c:	2300      	movs	r3, #0
 800199e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff ffe0 	bl	8001968 <HAL_I2C_SlaveTxCpltCallback>
 80019a8:	e7ef      	b.n	800198a <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80019aa:	2328      	movs	r3, #40	@ 0x28
 80019ac:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80019b0:	2322      	movs	r3, #34	@ 0x22
 80019b2:	6303      	str	r3, [r0, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80019b4:	2102      	movs	r1, #2
 80019b6:	f7ff fa80 	bl	8000eba <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80019ba:	2300      	movs	r3, #0
 80019bc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff ffd2 	bl	800196a <HAL_I2C_SlaveRxCpltCallback>
}
 80019c6:	e7e0      	b.n	800198a <I2C_ITSlaveSeqCplt+0x1e>

080019c8 <HAL_I2C_AddrCallback>:
}
 80019c8:	4770      	bx	lr

080019ca <I2C_ITAddrCplt>:
{
 80019ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019cc:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019ce:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80019d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80019d6:	2b28      	cmp	r3, #40	@ 0x28
 80019d8:	d006      	beq.n	80019e8 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80019da:	6803      	ldr	r3, [r0, #0]
 80019dc:	2208      	movs	r2, #8
 80019de:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80019e0:	2300      	movs	r3, #0
 80019e2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
}
 80019e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 80019e8:	6803      	ldr	r3, [r0, #0]
 80019ea:	699e      	ldr	r6, [r3, #24]
 80019ec:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	0c12      	lsrs	r2, r2, #16
 80019f4:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80019fe:	68df      	ldr	r7, [r3, #12]
 8001a00:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a04:	68c1      	ldr	r1, [r0, #12]
 8001a06:	2902      	cmp	r1, #2
 8001a08:	d121      	bne.n	8001a4e <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001a0a:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8001a0e:	f015 0f06 	tst.w	r5, #6
 8001a12:	d110      	bne.n	8001a36 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8001a14:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001a16:	3101      	adds	r1, #1
 8001a18:	6481      	str	r1, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a1a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001a1c:	2902      	cmp	r1, #2
 8001a1e:	d1e2      	bne.n	80019e6 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8001a20:	2100      	movs	r1, #0
 8001a22:	6481      	str	r1, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a24:	2008      	movs	r0, #8
 8001a26:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001a28:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a2c:	4631      	mov	r1, r6
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f7ff ffca 	bl	80019c8 <HAL_I2C_AddrCallback>
 8001a34:	e7d7      	b.n	80019e6 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a36:	2104      	movs	r1, #4
 8001a38:	f7ff fa3f 	bl	8000eba <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a42:	463a      	mov	r2, r7
 8001a44:	4631      	mov	r1, r6
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff ffbe 	bl	80019c8 <HAL_I2C_AddrCallback>
 8001a4c:	e7cb      	b.n	80019e6 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a4e:	2104      	movs	r1, #4
 8001a50:	f7ff fa33 	bl	8000eba <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001a54:	2300      	movs	r3, #0
 8001a56:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a5a:	462a      	mov	r2, r5
 8001a5c:	4631      	mov	r1, r6
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff ffb2 	bl	80019c8 <HAL_I2C_AddrCallback>
 8001a64:	e7bf      	b.n	80019e6 <I2C_ITAddrCplt+0x1c>

08001a66 <HAL_I2C_ListenCpltCallback>:
}
 8001a66:	4770      	bx	lr

08001a68 <I2C_ITListenCplt>:
{
 8001a68:	b510      	push	{r4, lr}
 8001a6a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <I2C_ITListenCplt+0x64>)
 8001a6e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	6303      	str	r3, [r0, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001a74:	2220      	movs	r2, #32
 8001a76:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8001a7e:	6343      	str	r3, [r0, #52]	@ 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001a80:	f011 0f04 	tst.w	r1, #4
 8001a84:	d013      	beq.n	8001aae <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a86:	6803      	ldr	r3, [r0, #0]
 8001a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a8a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001a8e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	6243      	str	r3, [r0, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8001a94:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 8001a96:	b153      	cbz	r3, 8001aae <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	8503      	strh	r3, [r0, #40]	@ 0x28
      hi2c->XferCount--;
 8001a9c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	8543      	strh	r3, [r0, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001aa6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6443      	str	r3, [r0, #68]	@ 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001aae:	2107      	movs	r1, #7
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7ff fa02 	bl	8000eba <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001abc:	2300      	movs	r3, #0
 8001abe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff ffcf 	bl	8001a66 <HAL_I2C_ListenCpltCallback>
}
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	bf00      	nop
 8001acc:	ffff0000 	.word	0xffff0000

08001ad0 <HAL_I2C_ErrorCallback>:
}
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_I2C_AbortCpltCallback>:
}
 8001ad2:	4770      	bx	lr

08001ad4 <I2C_ITError>:
{
 8001ad4:	b510      	push	{r4, lr}
 8001ad6:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001ad8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001adc:	2200      	movs	r2, #0
 8001ade:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001ae2:	4836      	ldr	r0, [pc, #216]	@ (8001bbc <I2C_ITError+0xe8>)
 8001ae4:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001ae6:	8562      	strh	r2, [r4, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001ae8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001aea:	430a      	orrs	r2, r1
 8001aec:	6462      	str	r2, [r4, #68]	@ 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001aee:	3b28      	subs	r3, #40	@ 0x28
 8001af0:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d824      	bhi.n	8001b40 <I2C_ITError+0x6c>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001af6:	2103      	movs	r1, #3
 8001af8:	4620      	mov	r0, r4
 8001afa:	f7ff f9de 	bl	8000eba <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001afe:	2328      	movs	r3, #40	@ 0x28
 8001b00:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001b08:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc0 <I2C_ITError+0xec>)
 8001b0a:	6363      	str	r3, [r4, #52]	@ 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8001b14:	d024      	beq.n	8001b60 <I2C_ITError+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b1c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8001b1e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d03f      	beq.n	8001ba4 <I2C_ITError+0xd0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001b24:	4a27      	ldr	r2, [pc, #156]	@ (8001bc4 <I2C_ITError+0xf0>)
 8001b26:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001b2e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001b30:	f7fe ff7e 	bl	8000a30 <HAL_DMA_Abort_IT>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d035      	beq.n	8001ba4 <I2C_ITError+0xd0>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001b38:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001b3a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001b3c:	4798      	blx	r3
 8001b3e:	e031      	b.n	8001ba4 <I2C_ITError+0xd0>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001b40:	2107      	movs	r1, #7
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff f9b9 	bl	8000eba <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001b48:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b60      	cmp	r3, #96	@ 0x60
 8001b50:	d002      	beq.n	8001b58 <I2C_ITError+0x84>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001b52:	2320      	movs	r3, #32
 8001b54:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001b5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b5e:	e7d5      	b.n	8001b0c <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001b66:	d012      	beq.n	8001b8e <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001b70:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001b72:	b1bb      	cbz	r3, 8001ba4 <I2C_ITError+0xd0>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001b74:	4a13      	ldr	r2, [pc, #76]	@ (8001bc4 <I2C_ITError+0xf0>)
 8001b76:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001b7e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001b80:	f7fe ff56 	bl	8000a30 <HAL_DMA_Abort_IT>
 8001b84:	b170      	cbz	r0, 8001ba4 <I2C_ITError+0xd0>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001b86:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001b88:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001b8a:	4798      	blx	r3
 8001b8c:	e00a      	b.n	8001ba4 <I2C_ITError+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001b8e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b60      	cmp	r3, #96	@ 0x60
 8001b96:	d006      	beq.n	8001ba6 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff ff96 	bl	8001ad0 <HAL_I2C_ErrorCallback>
}
 8001ba4:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8001bac:	2300      	movs	r3, #0
 8001bae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7ff ff8d 	bl	8001ad2 <HAL_I2C_AbortCpltCallback>
 8001bb8:	e7f4      	b.n	8001ba4 <I2C_ITError+0xd0>
 8001bba:	bf00      	nop
 8001bbc:	ffff0000 	.word	0xffff0000
 8001bc0:	08001ce9 	.word	0x08001ce9
 8001bc4:	08001ea5 	.word	0x08001ea5

08001bc8 <I2C_ITSlaveCplt>:
{
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	4604      	mov	r4, r0
 8001bcc:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001bce:	6803      	ldr	r3, [r0, #0]
 8001bd0:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001bd6:	2107      	movs	r1, #7
 8001bd8:	f7ff f96f 	bl	8000eba <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	6853      	ldr	r3, [r2, #4]
 8001be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001be4:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	6853      	ldr	r3, [r2, #4]
 8001bea:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001bee:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001bf2:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f7ff f92f 	bl	8000e60 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c02:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8001c06:	d03b      	beq.n	8001c80 <I2C_ITSlaveCplt+0xb8>
    if (hi2c->hdmatx != NULL)
 8001c08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001c0a:	b11b      	cbz	r3, 8001c14 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001c14:	f015 0f04 	tst.w	r5, #4
 8001c18:	d011      	beq.n	8001c3e <I2C_ITSlaveCplt+0x76>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001c1a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001c24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001c26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001c28:	3301      	adds	r3, #1
 8001c2a:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8001c2c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001c2e:	b133      	cbz	r3, 8001c3e <I2C_ITSlaveCplt+0x76>
      hi2c->XferSize--;
 8001c30:	3b01      	subs	r3, #1
 8001c32:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001c34:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (hi2c->XferCount != 0U)
 8001c3e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	b11b      	cbz	r3, 8001c4c <I2C_ITSlaveCplt+0x84>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c44:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8001c54:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c56:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001c58:	b9eb      	cbnz	r3, 8001c96 <I2C_ITSlaveCplt+0xce>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001c5a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001c5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c60:	d127      	bne.n	8001cb2 <I2C_ITSlaveCplt+0xea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c62:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b22      	cmp	r3, #34	@ 0x22
 8001c6a:	d031      	beq.n	8001cd0 <I2C_ITSlaveCplt+0x108>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8001c72:	2300      	movs	r3, #0
 8001c74:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7ff fe75 	bl	8001968 <HAL_I2C_SlaveTxCpltCallback>
}
 8001c7e:	e026      	b.n	8001cce <I2C_ITSlaveCplt+0x106>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c80:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
 8001c84:	d0c6      	beq.n	8001c14 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8001c86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0c3      	beq.n	8001c14 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001c94:	e7be      	b.n	8001c14 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c96:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f7ff ff1b 	bl	8001ad4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001c9e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b28      	cmp	r3, #40	@ 0x28
 8001ca6:	d112      	bne.n	8001cce <I2C_ITSlaveCplt+0x106>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ca8:	4629      	mov	r1, r5
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff fedc 	bl	8001a68 <I2C_ITListenCplt>
 8001cb0:	e00d      	b.n	8001cce <I2C_ITSlaveCplt+0x106>
    I2C_ITSlaveSeqCplt(hi2c);
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7ff fe5a 	bl	800196c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <I2C_ITSlaveCplt+0x11c>)
 8001cba:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff fecc 	bl	8001a66 <HAL_I2C_ListenCpltCallback>
}
 8001cce:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7ff fe44 	bl	800196a <HAL_I2C_SlaveRxCpltCallback>
 8001ce2:	e7f4      	b.n	8001cce <I2C_ITSlaveCplt+0x106>
 8001ce4:	ffff0000 	.word	0xffff0000

08001ce8 <I2C_Slave_ISR_IT>:
{
 8001ce8:	b570      	push	{r4, r5, r6, lr}
 8001cea:	4616      	mov	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 8001cec:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 8001cee:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	f000 809f 	beq.w	8001e36 <I2C_Slave_ISR_IT+0x14e>
 8001cf8:	4604      	mov	r4, r0
 8001cfa:	460d      	mov	r5, r1
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d02:	f011 0f10 	tst.w	r1, #16
 8001d06:	d03f      	beq.n	8001d88 <I2C_Slave_ISR_IT+0xa0>
 8001d08:	f016 0f10 	tst.w	r6, #16
 8001d0c:	d03c      	beq.n	8001d88 <I2C_Slave_ISR_IT+0xa0>
    if (hi2c->XferCount == 0U)
 8001d0e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	bb4b      	cbnz	r3, 8001d68 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001d14:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b28      	cmp	r3, #40	@ 0x28
 8001d1c:	d011      	beq.n	8001d42 <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d1e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b29      	cmp	r3, #41	@ 0x29
 8001d26:	d012      	beq.n	8001d4e <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d2e:	f015 0f20 	tst.w	r5, #32
 8001d32:	d002      	beq.n	8001d3a <I2C_Slave_ISR_IT+0x52>
 8001d34:	f016 0f20 	tst.w	r6, #32
 8001d38:	d178      	bne.n	8001e2c <I2C_Slave_ISR_IT+0x144>
  __HAL_UNLOCK(hi2c);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001d42:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8001d46:	d1ea      	bne.n	8001d1e <I2C_Slave_ISR_IT+0x36>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d48:	f7ff fe8e 	bl	8001a68 <I2C_ITListenCplt>
 8001d4c:	e7ef      	b.n	8001d2e <I2C_Slave_ISR_IT+0x46>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d4e:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8001d52:	d0e9      	beq.n	8001d28 <I2C_Slave_ISR_IT+0x40>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	2210      	movs	r2, #16
 8001d58:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7ff f880 	bl	8000e60 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8001d60:	4620      	mov	r0, r4
 8001d62:	f7ff fe03 	bl	800196c <I2C_ITSlaveSeqCplt>
 8001d66:	e7e2      	b.n	8001d2e <I2C_Slave_ISR_IT+0x46>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d68:	6803      	ldr	r3, [r0, #0]
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	61d9      	str	r1, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d6e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6443      	str	r3, [r0, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d76:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8001d7a:	bf18      	it	ne
 8001d7c:	2a00      	cmpne	r2, #0
 8001d7e:	d1d6      	bne.n	8001d2e <I2C_Slave_ISR_IT+0x46>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d80:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001d82:	f7ff fea7 	bl	8001ad4 <I2C_ITError>
 8001d86:	e7d2      	b.n	8001d2e <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001d88:	f015 0f04 	tst.w	r5, #4
 8001d8c:	d021      	beq.n	8001dd2 <I2C_Slave_ISR_IT+0xea>
 8001d8e:	f016 0f04 	tst.w	r6, #4
 8001d92:	d01e      	beq.n	8001dd2 <I2C_Slave_ISR_IT+0xea>
    if (hi2c->XferCount > 0U)
 8001d94:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	b183      	cbz	r3, 8001dbc <I2C_Slave_ISR_IT+0xd4>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d9a:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001da2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001da4:	7019      	strb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001da6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001da8:	3301      	adds	r3, #1
 8001daa:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8001dac:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001dae:	3b01      	subs	r3, #1
 8001db0:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001db2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001dbc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1b4      	bne.n	8001d2e <I2C_Slave_ISR_IT+0x46>
 8001dc4:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8001dc8:	d0b1      	beq.n	8001d2e <I2C_Slave_ISR_IT+0x46>
      I2C_ITSlaveSeqCplt(hi2c);
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff fdce 	bl	800196c <I2C_ITSlaveSeqCplt>
 8001dd0:	e7ad      	b.n	8001d2e <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001dd2:	f015 0f08 	tst.w	r5, #8
 8001dd6:	d002      	beq.n	8001dde <I2C_Slave_ISR_IT+0xf6>
 8001dd8:	f016 0f08 	tst.w	r6, #8
 8001ddc:	d118      	bne.n	8001e10 <I2C_Slave_ISR_IT+0x128>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001dde:	f015 0f02 	tst.w	r5, #2
 8001de2:	d0a4      	beq.n	8001d2e <I2C_Slave_ISR_IT+0x46>
 8001de4:	f016 0f02 	tst.w	r6, #2
 8001de8:	d0a1      	beq.n	8001d2e <I2C_Slave_ISR_IT+0x46>
    if (hi2c->XferCount > 0U)
 8001dea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	b1a3      	cbz	r3, 8001e1a <I2C_Slave_ISR_IT+0x132>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001df0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	7812      	ldrb	r2, [r2, #0]
 8001df6:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001df8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001dfe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e08:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	8523      	strh	r3, [r4, #40]	@ 0x28
 8001e0e:	e78e      	b.n	8001d2e <I2C_Slave_ISR_IT+0x46>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001e10:	4629      	mov	r1, r5
 8001e12:	4620      	mov	r0, r4
 8001e14:	f7ff fdd9 	bl	80019ca <I2C_ITAddrCplt>
 8001e18:	e789      	b.n	8001d2e <I2C_Slave_ISR_IT+0x46>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	bf18      	it	ne
 8001e1e:	f1b2 7f80 	cmpne.w	r2, #16777216	@ 0x1000000
 8001e22:	d184      	bne.n	8001d2e <I2C_Slave_ISR_IT+0x46>
        I2C_ITSlaveSeqCplt(hi2c);
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff fda1 	bl	800196c <I2C_ITSlaveSeqCplt>
 8001e2a:	e780      	b.n	8001d2e <I2C_Slave_ISR_IT+0x46>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff feca 	bl	8001bc8 <I2C_ITSlaveCplt>
 8001e34:	e781      	b.n	8001d3a <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8001e36:	2002      	movs	r0, #2
 8001e38:	e782      	b.n	8001d40 <I2C_Slave_ISR_IT+0x58>

08001e3a <HAL_I2C_ER_IRQHandler>:
{
 8001e3a:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e3c:	6802      	ldr	r2, [r0, #0]
 8001e3e:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e40:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e42:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001e46:	d009      	beq.n	8001e5c <HAL_I2C_ER_IRQHandler+0x22>
 8001e48:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001e4c:	d006      	beq.n	8001e5c <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001e4e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8001e50:	f044 0401 	orr.w	r4, r4, #1
 8001e54:	6444      	str	r4, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e56:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001e5a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e5c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001e60:	d00a      	beq.n	8001e78 <HAL_I2C_ER_IRQHandler+0x3e>
 8001e62:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001e66:	d007      	beq.n	8001e78 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001e68:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e70:	6802      	ldr	r2, [r0, #0]
 8001e72:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8001e76:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e78:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001e7c:	d00a      	beq.n	8001e94 <HAL_I2C_ER_IRQHandler+0x5a>
 8001e7e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001e82:	d007      	beq.n	8001e94 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001e84:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001e86:	f043 0302 	orr.w	r3, r3, #2
 8001e8a:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e8c:	6803      	ldr	r3, [r0, #0]
 8001e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e92:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001e94:	6c41      	ldr	r1, [r0, #68]	@ 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001e96:	f011 0f0b 	tst.w	r1, #11
 8001e9a:	d100      	bne.n	8001e9e <HAL_I2C_ER_IRQHandler+0x64>
}
 8001e9c:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8001e9e:	f7ff fe19 	bl	8001ad4 <I2C_ITError>
}
 8001ea2:	e7fb      	b.n	8001e9c <HAL_I2C_ER_IRQHandler+0x62>

08001ea4 <I2C_DMAAbort>:
{
 8001ea4:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001ea6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001ea8:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8001eaa:	2300      	movs	r3, #0
 8001eac:	6513      	str	r3, [r2, #80]	@ 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001eae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001eb0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001eb2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b60      	cmp	r3, #96	@ 0x60
 8001eba:	d002      	beq.n	8001ec2 <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 8001ebc:	f7ff fe08 	bl	8001ad0 <HAL_I2C_ErrorCallback>
}
 8001ec0:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001ec8:	f7ff fe03 	bl	8001ad2 <HAL_I2C_AbortCpltCallback>
 8001ecc:	e7f8      	b.n	8001ec0 <I2C_DMAAbort+0x1c>

08001ece <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ece:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	2a20      	cmp	r2, #32
 8001ed8:	d123      	bne.n	8001f22 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eda:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001ede:	2a01      	cmp	r2, #1
 8001ee0:	d021      	beq.n	8001f26 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	2224      	movs	r2, #36	@ 0x24
 8001eea:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eee:	6800      	ldr	r0, [r0, #0]
 8001ef0:	6802      	ldr	r2, [r0, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	6802      	ldr	r2, [r0, #0]
 8001efc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f00:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	6802      	ldr	r2, [r0, #0]
 8001f06:	4311      	orrs	r1, r2
 8001f08:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	680a      	ldr	r2, [r1, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f20:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001f22:	2002      	movs	r0, #2
 8001f24:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001f26:	2002      	movs	r0, #2
  }
}
 8001f28:	4770      	bx	lr

08001f2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f2a:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	2a20      	cmp	r2, #32
 8001f34:	d121      	bne.n	8001f7a <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f36:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001f3a:	2a01      	cmp	r2, #1
 8001f3c:	d01f      	beq.n	8001f7e <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f44:	2224      	movs	r2, #36	@ 0x24
 8001f46:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f4a:	6800      	ldr	r0, [r0, #0]
 8001f4c:	6802      	ldr	r2, [r0, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f58:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f60:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f62:	6819      	ldr	r1, [r3, #0]
 8001f64:	680a      	ldr	r2, [r1, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f78:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001f7a:	2002      	movs	r0, #2
 8001f7c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001f7e:	2002      	movs	r0, #2
  }
}
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f84:	b510      	push	{r4, lr}
 8001f86:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_PWREx_EnableOverDrive+0x74>)
 8001f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f8c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f90:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f9c:	4a17      	ldr	r2, [pc, #92]	@ (8001ffc <HAL_PWREx_EnableOverDrive+0x78>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa6:	f7fe fb61 	bl	800066c <HAL_GetTick>
 8001faa:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <HAL_PWREx_EnableOverDrive+0x78>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001fb4:	d108      	bne.n	8001fc8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fb6:	f7fe fb59 	bl	800066c <HAL_GetTick>
 8001fba:	1b00      	subs	r0, r0, r4
 8001fbc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001fc0:	d9f4      	bls.n	8001fac <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001fc2:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001ffc <HAL_PWREx_EnableOverDrive+0x78>)
 8001fca:	6813      	ldr	r3, [r2, #0]
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001fd2:	f7fe fb4b 	bl	800066c <HAL_GetTick>
 8001fd6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <HAL_PWREx_EnableOverDrive+0x78>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001fe0:	d107      	bne.n	8001ff2 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fe2:	f7fe fb43 	bl	800066c <HAL_GetTick>
 8001fe6:	1b00      	subs	r0, r0, r4
 8001fe8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001fec:	d9f4      	bls.n	8001fd8 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001fee:	2003      	movs	r0, #3
 8001ff0:	e7e8      	b.n	8001fc4 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	e7e6      	b.n	8001fc4 <HAL_PWREx_EnableOverDrive+0x40>
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40007000 	.word	0x40007000

08002000 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002000:	2800      	cmp	r0, #0
 8002002:	f000 81da 	beq.w	80023ba <HAL_RCC_OscConfig+0x3ba>
{
 8002006:	b570      	push	{r4, r5, r6, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200c:	6803      	ldr	r3, [r0, #0]
 800200e:	f013 0f01 	tst.w	r3, #1
 8002012:	d029      	beq.n	8002068 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002014:	4b95      	ldr	r3, [pc, #596]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b04      	cmp	r3, #4
 800201e:	d01a      	beq.n	8002056 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002020:	4b92      	ldr	r3, [pc, #584]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d00f      	beq.n	800204c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202c:	6863      	ldr	r3, [r4, #4]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002032:	d040      	beq.n	80020b6 <HAL_RCC_OscConfig+0xb6>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d154      	bne.n	80020e2 <HAL_RCC_OscConfig+0xe2>
 8002038:	4b8c      	ldr	r3, [pc, #560]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e039      	b.n	80020c0 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204c:	4b87      	ldr	r3, [pc, #540]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002054:	d0ea      	beq.n	800202c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002056:	4b85      	ldr	r3, [pc, #532]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800205e:	d003      	beq.n	8002068 <HAL_RCC_OscConfig+0x68>
 8002060:	6863      	ldr	r3, [r4, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 81ab 	beq.w	80023be <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	f013 0f02 	tst.w	r3, #2
 800206e:	d074      	beq.n	800215a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002070:	4b7e      	ldr	r3, [pc, #504]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f013 0f0c 	tst.w	r3, #12
 8002078:	d05e      	beq.n	8002138 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207a:	4b7c      	ldr	r3, [pc, #496]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b08      	cmp	r3, #8
 8002084:	d053      	beq.n	800212e <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002086:	68e3      	ldr	r3, [r4, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8089 	beq.w	80021a0 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208e:	4a77      	ldr	r2, [pc, #476]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002090:	6813      	ldr	r3, [r2, #0]
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe fae8 	bl	800066c <HAL_GetTick>
 800209c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b73      	ldr	r3, [pc, #460]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f013 0f02 	tst.w	r3, #2
 80020a6:	d172      	bne.n	800218e <HAL_RCC_OscConfig+0x18e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a8:	f7fe fae0 	bl	800066c <HAL_GetTick>
 80020ac:	1b40      	subs	r0, r0, r5
 80020ae:	2802      	cmp	r0, #2
 80020b0:	d9f5      	bls.n	800209e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80020b2:	2003      	movs	r0, #3
 80020b4:	e188      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b6:	4a6d      	ldr	r2, [pc, #436]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 80020b8:	6813      	ldr	r3, [r2, #0]
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020be:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c0:	6863      	ldr	r3, [r4, #4]
 80020c2:	b32b      	cbz	r3, 8002110 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80020c4:	f7fe fad2 	bl	800066c <HAL_GetTick>
 80020c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b68      	ldr	r3, [pc, #416]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80020d2:	d1c9      	bne.n	8002068 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe faca 	bl	800066c <HAL_GetTick>
 80020d8:	1b40      	subs	r0, r0, r5
 80020da:	2864      	cmp	r0, #100	@ 0x64
 80020dc:	d9f5      	bls.n	80020ca <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80020de:	2003      	movs	r0, #3
 80020e0:	e172      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020e6:	d009      	beq.n	80020fc <HAL_RCC_OscConfig+0xfc>
 80020e8:	4b60      	ldr	r3, [pc, #384]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e7e1      	b.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 80020fc:	4b5b      	ldr	r3, [pc, #364]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e7d7      	b.n	80020c0 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002110:	f7fe faac 	bl	800066c <HAL_GetTick>
 8002114:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	4b55      	ldr	r3, [pc, #340]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800211e:	d0a3      	beq.n	8002068 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7fe faa4 	bl	800066c <HAL_GetTick>
 8002124:	1b40      	subs	r0, r0, r5
 8002126:	2864      	cmp	r0, #100	@ 0x64
 8002128:	d9f5      	bls.n	8002116 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800212a:	2003      	movs	r0, #3
 800212c:	e14c      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b4f      	ldr	r3, [pc, #316]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002136:	d1a6      	bne.n	8002086 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002138:	4b4c      	ldr	r3, [pc, #304]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f013 0f02 	tst.w	r3, #2
 8002140:	d003      	beq.n	800214a <HAL_RCC_OscConfig+0x14a>
 8002142:	68e3      	ldr	r3, [r4, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	f040 813c 	bne.w	80023c2 <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4a48      	ldr	r2, [pc, #288]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 800214c:	6813      	ldr	r3, [r2, #0]
 800214e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002152:	6921      	ldr	r1, [r4, #16]
 8002154:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002158:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	f013 0f08 	tst.w	r3, #8
 8002160:	d046      	beq.n	80021f0 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002162:	6963      	ldr	r3, [r4, #20]
 8002164:	b383      	cbz	r3, 80021c8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	4a41      	ldr	r2, [pc, #260]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002168:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7fe fa7c 	bl	800066c <HAL_GetTick>
 8002174:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	4b3d      	ldr	r3, [pc, #244]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800217a:	f013 0f02 	tst.w	r3, #2
 800217e:	d137      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002180:	f7fe fa74 	bl	800066c <HAL_GetTick>
 8002184:	1b40      	subs	r0, r0, r5
 8002186:	2802      	cmp	r0, #2
 8002188:	d9f5      	bls.n	8002176 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800218a:	2003      	movs	r0, #3
 800218c:	e11c      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4a37      	ldr	r2, [pc, #220]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002190:	6813      	ldr	r3, [r2, #0]
 8002192:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002196:	6921      	ldr	r1, [r4, #16]
 8002198:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e7dc      	b.n	800215a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80021a0:	4a32      	ldr	r2, [pc, #200]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 80021a2:	6813      	ldr	r3, [r2, #0]
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80021aa:	f7fe fa5f 	bl	800066c <HAL_GetTick>
 80021ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b0:	4b2e      	ldr	r3, [pc, #184]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f013 0f02 	tst.w	r3, #2
 80021b8:	d0cf      	beq.n	800215a <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ba:	f7fe fa57 	bl	800066c <HAL_GetTick>
 80021be:	1b40      	subs	r0, r0, r5
 80021c0:	2802      	cmp	r0, #2
 80021c2:	d9f5      	bls.n	80021b0 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80021c4:	2003      	movs	r0, #3
 80021c6:	e0ff      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c8:	4a28      	ldr	r2, [pc, #160]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 80021ca:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d2:	f7fe fa4b 	bl	800066c <HAL_GetTick>
 80021d6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	4b24      	ldr	r3, [pc, #144]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 80021da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021dc:	f013 0f02 	tst.w	r3, #2
 80021e0:	d006      	beq.n	80021f0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e2:	f7fe fa43 	bl	800066c <HAL_GetTick>
 80021e6:	1b40      	subs	r0, r0, r5
 80021e8:	2802      	cmp	r0, #2
 80021ea:	d9f5      	bls.n	80021d8 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80021ec:	2003      	movs	r0, #3
 80021ee:	e0eb      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	f013 0f04 	tst.w	r3, #4
 80021f6:	d07d      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f8:	4b1c      	ldr	r3, [pc, #112]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002200:	d11e      	bne.n	8002240 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b1a      	ldr	r3, [pc, #104]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 8002204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002206:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800220a:	641a      	str	r2, [r3, #64]	@ 0x40
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002216:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002218:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002220:	d010      	beq.n	8002244 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002222:	68a3      	ldr	r3, [r4, #8]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d025      	beq.n	8002274 <HAL_RCC_OscConfig+0x274>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d13b      	bne.n	80022a4 <HAL_RCC_OscConfig+0x2a4>
 800222c:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <HAL_RCC_OscConfig+0x26c>)
 800222e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	671a      	str	r2, [r3, #112]	@ 0x70
 8002236:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002238:	f022 0204 	bic.w	r2, r2, #4
 800223c:	671a      	str	r2, [r3, #112]	@ 0x70
 800223e:	e01e      	b.n	800227e <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8002240:	2500      	movs	r5, #0
 8002242:	e7e9      	b.n	8002218 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8002244:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <HAL_RCC_OscConfig+0x270>)
 8002246:	6813      	ldr	r3, [r2, #0]
 8002248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800224c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800224e:	f7fe fa0d 	bl	800066c <HAL_GetTick>
 8002252:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_RCC_OscConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800225c:	d1e1      	bne.n	8002222 <HAL_RCC_OscConfig+0x222>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7fe fa05 	bl	800066c <HAL_GetTick>
 8002262:	1b80      	subs	r0, r0, r6
 8002264:	2864      	cmp	r0, #100	@ 0x64
 8002266:	d9f5      	bls.n	8002254 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8002268:	2003      	movs	r0, #3
 800226a:	e0ad      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	4a56      	ldr	r2, [pc, #344]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 8002276:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800227e:	68a3      	ldr	r3, [r4, #8]
 8002280:	b333      	cbz	r3, 80022d0 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7fe f9f3 	bl	800066c <HAL_GetTick>
 8002286:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b51      	ldr	r3, [pc, #324]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228c:	f013 0f02 	tst.w	r3, #2
 8002290:	d12f      	bne.n	80022f2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe f9eb 	bl	800066c <HAL_GetTick>
 8002296:	1b80      	subs	r0, r0, r6
 8002298:	f241 3388 	movw	r3, #5000	@ 0x1388
 800229c:	4298      	cmp	r0, r3
 800229e:	d9f3      	bls.n	8002288 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80022a0:	2003      	movs	r0, #3
 80022a2:	e091      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d009      	beq.n	80022bc <HAL_RCC_OscConfig+0x2bc>
 80022a8:	4b49      	ldr	r3, [pc, #292]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 80022aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80022b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022b4:	f022 0204 	bic.w	r2, r2, #4
 80022b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80022ba:	e7e0      	b.n	800227e <HAL_RCC_OscConfig+0x27e>
 80022bc:	4b44      	ldr	r3, [pc, #272]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 80022be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022c0:	f042 0204 	orr.w	r2, r2, #4
 80022c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80022c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	671a      	str	r2, [r3, #112]	@ 0x70
 80022ce:	e7d6      	b.n	800227e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe f9cc 	bl	800066c <HAL_GetTick>
 80022d4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d6:	4b3e      	ldr	r3, [pc, #248]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	f013 0f02 	tst.w	r3, #2
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7fe f9c4 	bl	800066c <HAL_GetTick>
 80022e4:	1b80      	subs	r0, r0, r6
 80022e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80022ea:	4298      	cmp	r0, r3
 80022ec:	d9f3      	bls.n	80022d6 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80022ee:	2003      	movs	r0, #3
 80022f0:	e06a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f2:	b9f5      	cbnz	r5, 8002332 <HAL_RCC_OscConfig+0x332>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f4:	69a3      	ldr	r3, [r4, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d065      	beq.n	80023c6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fa:	4a35      	ldr	r2, [pc, #212]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 80022fc:	6892      	ldr	r2, [r2, #8]
 80022fe:	f002 020c 	and.w	r2, r2, #12
 8002302:	2a08      	cmp	r2, #8
 8002304:	d062      	beq.n	80023cc <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002306:	2b02      	cmp	r3, #2
 8002308:	d019      	beq.n	800233e <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4a31      	ldr	r2, [pc, #196]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe f9aa 	bl	800066c <HAL_GetTick>
 8002318:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002322:	d048      	beq.n	80023b6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe f9a2 	bl	800066c <HAL_GetTick>
 8002328:	1b00      	subs	r0, r0, r4
 800232a:	2802      	cmp	r0, #2
 800232c:	d9f5      	bls.n	800231a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 800232e:	2003      	movs	r0, #3
 8002330:	e04a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	4a27      	ldr	r2, [pc, #156]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 8002334:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800233a:	6413      	str	r3, [r2, #64]	@ 0x40
 800233c:	e7da      	b.n	80022f4 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800233e:	4a24      	ldr	r2, [pc, #144]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 8002340:	6813      	ldr	r3, [r2, #0]
 8002342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002346:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002348:	f7fe f990 	bl	800066c <HAL_GetTick>
 800234c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	4b20      	ldr	r3, [pc, #128]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002356:	d006      	beq.n	8002366 <HAL_RCC_OscConfig+0x366>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe f988 	bl	800066c <HAL_GetTick>
 800235c:	1b40      	subs	r0, r0, r5
 800235e:	2802      	cmp	r0, #2
 8002360:	d9f5      	bls.n	800234e <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8002362:	2003      	movs	r0, #3
 8002364:	e030      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002366:	69e3      	ldr	r3, [r4, #28]
 8002368:	6a22      	ldr	r2, [r4, #32]
 800236a:	4313      	orrs	r3, r2
 800236c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800236e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002372:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002374:	0852      	lsrs	r2, r2, #1
 8002376:	3a01      	subs	r2, #1
 8002378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800237c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800237e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002382:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002384:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002388:	4a11      	ldr	r2, [pc, #68]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 800238a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002392:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002394:	f7fe f96a 	bl	800066c <HAL_GetTick>
 8002398:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_RCC_OscConfig+0x3d0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe f962 	bl	800066c <HAL_GetTick>
 80023a8:	1b00      	subs	r0, r0, r4
 80023aa:	2802      	cmp	r0, #2
 80023ac:	d9f5      	bls.n	800239a <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 80023ae:	2003      	movs	r0, #3
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80023b2:	2000      	movs	r0, #0
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
 80023b6:	2000      	movs	r0, #0
 80023b8:	e006      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 80023ba:	2001      	movs	r0, #1
}
 80023bc:	4770      	bx	lr
        return HAL_ERROR;
 80023be:	2001      	movs	r0, #1
 80023c0:	e002      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 80023c2:	2001      	movs	r0, #1
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80023c6:	2000      	movs	r0, #0
}
 80023c8:	b002      	add	sp, #8
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80023cc:	2001      	movs	r0, #1
 80023ce:	e7fb      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d4:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d6:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d041      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x92>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d141      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e6:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80023f4:	d012      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80023fe:	481d      	ldr	r0, [pc, #116]	@ (8002474 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002400:	2300      	movs	r3, #0
 8002402:	fba1 0100 	umull	r0, r1, r1, r0
 8002406:	f7fd ff83 	bl	8000310 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800240a:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x9c>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002416:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800241a:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x9c>)
 800241e:	6858      	ldr	r0, [r3, #4]
 8002420:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002424:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002428:	ebbc 0c00 	subs.w	ip, ip, r0
 800242c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002430:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002434:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002438:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800243c:	ebb1 010c 	subs.w	r1, r1, ip
 8002440:	eb63 030e 	sbc.w	r3, r3, lr
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800244a:	00c9      	lsls	r1, r1, #3
 800244c:	eb11 0c00 	adds.w	ip, r1, r0
 8002450:	f143 0300 	adc.w	r3, r3, #0
 8002454:	0299      	lsls	r1, r3, #10
 8002456:	2300      	movs	r3, #0
 8002458:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800245c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002460:	f7fd ff56 	bl	8000310 <__aeabi_uldivmod>
 8002464:	e7d1      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8002466:	4803      	ldr	r0, [pc, #12]	@ (8002474 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002468:	e7d7      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800246a:	4803      	ldr	r0, [pc, #12]	@ (8002478 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 800246c:	e7d5      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x46>
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	017d7840 	.word	0x017d7840
 8002478:	00f42400 	.word	0x00f42400

0800247c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800247c:	2800      	cmp	r0, #0
 800247e:	f000 809f 	beq.w	80025c0 <HAL_RCC_ClockConfig+0x144>
{
 8002482:	b570      	push	{r4, r5, r6, lr}
 8002484:	460d      	mov	r5, r1
 8002486:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b51      	ldr	r3, [pc, #324]	@ (80025d0 <HAL_RCC_ClockConfig+0x154>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	428b      	cmp	r3, r1
 8002492:	d20b      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002494:	4a4e      	ldr	r2, [pc, #312]	@ (80025d0 <HAL_RCC_ClockConfig+0x154>)
 8002496:	6813      	ldr	r3, [r2, #0]
 8002498:	f023 030f 	bic.w	r3, r3, #15
 800249c:	430b      	orrs	r3, r1
 800249e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a0:	6813      	ldr	r3, [r2, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	428b      	cmp	r3, r1
 80024a8:	f040 808c 	bne.w	80025c4 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	f013 0f02 	tst.w	r3, #2
 80024b2:	d017      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	f013 0f04 	tst.w	r3, #4
 80024b8:	d004      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ba:	4a46      	ldr	r2, [pc, #280]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 80024bc:	6893      	ldr	r3, [r2, #8]
 80024be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024c2:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	f013 0f08 	tst.w	r3, #8
 80024ca:	d004      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024cc:	4a41      	ldr	r2, [pc, #260]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 80024ce:	6893      	ldr	r3, [r2, #8]
 80024d0:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024d4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d6:	4a3f      	ldr	r2, [pc, #252]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 80024d8:	6893      	ldr	r3, [r2, #8]
 80024da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024de:	68a1      	ldr	r1, [r4, #8]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	f013 0f01 	tst.w	r3, #1
 80024ea:	d031      	beq.n	8002550 <HAL_RCC_ClockConfig+0xd4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ec:	6863      	ldr	r3, [r4, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d020      	beq.n	8002534 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d025      	beq.n	8002542 <HAL_RCC_ClockConfig+0xc6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f6:	4a37      	ldr	r2, [pc, #220]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	f012 0f02 	tst.w	r2, #2
 80024fe:	d063      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x14c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002500:	4934      	ldr	r1, [pc, #208]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 8002502:	688a      	ldr	r2, [r1, #8]
 8002504:	f022 0203 	bic.w	r2, r2, #3
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800250c:	f7fe f8ae 	bl	800066c <HAL_GetTick>
 8002510:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b30      	ldr	r3, [pc, #192]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	6862      	ldr	r2, [r4, #4]
 800251c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002520:	d016      	beq.n	8002550 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002522:	f7fe f8a3 	bl	800066c <HAL_GetTick>
 8002526:	1b80      	subs	r0, r0, r6
 8002528:	f241 3388 	movw	r3, #5000	@ 0x1388
 800252c:	4298      	cmp	r0, r3
 800252e:	d9f0      	bls.n	8002512 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002530:	2003      	movs	r0, #3
 8002532:	e044      	b.n	80025be <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002534:	4a27      	ldr	r2, [pc, #156]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800253c:	d1e0      	bne.n	8002500 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800253e:	2001      	movs	r0, #1
 8002540:	e03d      	b.n	80025be <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4a24      	ldr	r2, [pc, #144]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800254a:	d1d9      	bne.n	8002500 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800254c:	2001      	movs	r0, #1
 800254e:	e036      	b.n	80025be <HAL_RCC_ClockConfig+0x142>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002550:	4b1f      	ldr	r3, [pc, #124]	@ (80025d0 <HAL_RCC_ClockConfig+0x154>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	42ab      	cmp	r3, r5
 800255a:	d90a      	bls.n	8002572 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255c:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <HAL_RCC_ClockConfig+0x154>)
 800255e:	6813      	ldr	r3, [r2, #0]
 8002560:	f023 030f 	bic.w	r3, r3, #15
 8002564:	432b      	orrs	r3, r5
 8002566:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002568:	6813      	ldr	r3, [r2, #0]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	42ab      	cmp	r3, r5
 8002570:	d12c      	bne.n	80025cc <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	f013 0f04 	tst.w	r3, #4
 8002578:	d006      	beq.n	8002588 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257a:	4a16      	ldr	r2, [pc, #88]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 800257c:	6893      	ldr	r3, [r2, #8]
 800257e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002582:	68e1      	ldr	r1, [r4, #12]
 8002584:	430b      	orrs	r3, r1
 8002586:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	f013 0f08 	tst.w	r3, #8
 800258e:	d007      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002590:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 8002592:	6893      	ldr	r3, [r2, #8]
 8002594:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002598:	6921      	ldr	r1, [r4, #16]
 800259a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800259e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025a0:	f7ff ff18 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCC_ClockConfig+0x158>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025ac:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <HAL_RCC_ClockConfig+0x15c>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	40d8      	lsrs	r0, r3
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_RCC_ClockConfig+0x160>)
 80025b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f00c f922 	bl	800e800 <HAL_InitTick>
  return HAL_OK;
 80025bc:	2000      	movs	r0, #0
}
 80025be:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80025c0:	2001      	movs	r0, #1
}
 80025c2:	4770      	bx	lr
      return HAL_ERROR;
 80025c4:	2001      	movs	r0, #1
 80025c6:	e7fa      	b.n	80025be <HAL_RCC_ClockConfig+0x142>
        return HAL_ERROR;
 80025c8:	2001      	movs	r0, #1
 80025ca:	e7f8      	b.n	80025be <HAL_RCC_ClockConfig+0x142>
      return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
 80025ce:	e7f6      	b.n	80025be <HAL_RCC_ClockConfig+0x142>
 80025d0:	40023c00 	.word	0x40023c00
 80025d4:	40023800 	.word	0x40023800
 80025d8:	08013584 	.word	0x08013584
 80025dc:	200003fc 	.word	0x200003fc

080025e0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80025e0:	4b01      	ldr	r3, [pc, #4]	@ (80025e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	200003fc 	.word	0x200003fc

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025ee:	f7ff fff7 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 80025f2:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <HAL_RCC_GetPCLK1Freq+0x18>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80025fa:	4a03      	ldr	r2, [pc, #12]	@ (8002608 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025fc:	5cd3      	ldrb	r3, [r2, r3]
}
 80025fe:	40d8      	lsrs	r0, r3
 8002600:	bd08      	pop	{r3, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	0801357c 	.word	0x0801357c

0800260c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800260c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800260e:	f7ff ffe7 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002612:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800261a:	4a03      	ldr	r2, [pc, #12]	@ (8002628 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800261c:	5cd3      	ldrb	r3, [r2, r3]
}
 800261e:	40d8      	lsrs	r0, r3
 8002620:	bd08      	pop	{r3, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	0801357c 	.word	0x0801357c

0800262c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800262c:	230f      	movs	r3, #15
 800262e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_RCC_GetClockConfig+0x34>)
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	f002 0203 	and.w	r2, r2, #3
 8002638:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002640:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002648:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002652:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002654:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <HAL_RCC_GetClockConfig+0x38>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	600b      	str	r3, [r1, #0]
}
 800265e:	4770      	bx	lr
 8002660:	40023800 	.word	0x40023800
 8002664:	40023c00 	.word	0x40023c00

08002668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266a:	b083      	sub	sp, #12
 800266c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800266e:	6806      	ldr	r6, [r0, #0]
 8002670:	f016 0601 	ands.w	r6, r6, #1
 8002674:	d00d      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002676:	4bb5      	ldr	r3, [pc, #724]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002688:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8155 	beq.w	800293a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 8002690:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002692:	6825      	ldr	r5, [r4, #0]
 8002694:	f415 2500 	ands.w	r5, r5, #524288	@ 0x80000
 8002698:	d011      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800269a:	4aac      	ldr	r2, [pc, #688]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800269c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80026a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80026a4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80026a6:	430b      	orrs	r3, r1
 80026a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80026ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026b2:	f000 8144 	beq.w	800293e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8143 	beq.w	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 80026bc:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80026c4:	d00f      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026c6:	4aa1      	ldr	r2, [pc, #644]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80026c8:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80026cc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80026d0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80026d2:	430b      	orrs	r3, r1
 80026d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026de:	f000 8132 	beq.w	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026e2:	b903      	cbnz	r3, 80026e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 80026e4:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80026ec:	d000      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 80026ee:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026f0:	f013 0f20 	tst.w	r3, #32
 80026f4:	f040 812c 	bne.w	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	f013 0f10 	tst.w	r3, #16
 80026fe:	d00c      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002700:	4b92      	ldr	r3, [pc, #584]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002702:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002706:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800270a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800270e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002712:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002714:	430a      	orrs	r2, r1
 8002716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002720:	d008      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002722:	4a8a      	ldr	r2, [pc, #552]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002724:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002728:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800272c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800272e:	430b      	orrs	r3, r1
 8002730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800273a:	d008      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800273c:	4a83      	ldr	r2, [pc, #524]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800273e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002742:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002746:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002748:	430b      	orrs	r3, r1
 800274a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002754:	d008      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002756:	4a7d      	ldr	r2, [pc, #500]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002758:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800275c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002760:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002762:	430b      	orrs	r3, r1
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800276e:	d008      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002770:	4a76      	ldr	r2, [pc, #472]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002772:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002776:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800277a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800277c:	430b      	orrs	r3, r1
 800277e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800278a:	4a70      	ldr	r2, [pc, #448]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800278c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002790:	f023 0303 	bic.w	r3, r3, #3
 8002794:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002796:	430b      	orrs	r3, r1
 8002798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80027a2:	d008      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a4:	4a69      	ldr	r2, [pc, #420]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80027aa:	f023 030c 	bic.w	r3, r3, #12
 80027ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80027b0:	430b      	orrs	r3, r1
 80027b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027be:	4a63      	ldr	r2, [pc, #396]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027c0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80027c4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80027c8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80027ca:	430b      	orrs	r3, r1
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80027d6:	d008      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027d8:	4a5c      	ldr	r2, [pc, #368]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027da:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80027de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80027e2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80027e4:	430b      	orrs	r3, r1
 80027e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80027f0:	d008      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027f2:	4a56      	ldr	r2, [pc, #344]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80027f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027fc:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80027fe:	430b      	orrs	r3, r1
 8002800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800280a:	d008      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800280c:	4a4f      	ldr	r2, [pc, #316]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800280e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002812:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002816:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002818:	430b      	orrs	r3, r1
 800281a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002824:	d008      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002826:	4a49      	ldr	r2, [pc, #292]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002828:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800282c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002830:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002832:	430b      	orrs	r3, r1
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800283e:	d008      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002840:	4a42      	ldr	r2, [pc, #264]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002842:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002846:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800284a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800284c:	430b      	orrs	r3, r1
 800284e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800285a:	4a3c      	ldr	r2, [pc, #240]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800285c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002860:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002864:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002866:	430b      	orrs	r3, r1
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002872:	d00d      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002874:	4a35      	ldr	r2, [pc, #212]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002876:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800287a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800287e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002880:	430b      	orrs	r3, r1
 8002882:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002886:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8002888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800288c:	f000 80c6 	beq.w	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	f013 0f08 	tst.w	r3, #8
 8002896:	d000      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8002898:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800289a:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800289e:	d008      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028a0:	4a2a      	ldr	r2, [pc, #168]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80028a6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80028aa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80028ac:	430b      	orrs	r3, r1
 80028ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80028b8:	d009      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028ba:	4a24      	ldr	r2, [pc, #144]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80028c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80028c8:	430b      	orrs	r3, r1
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 80028d4:	d009      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80028d6:	4a1d      	ldr	r2, [pc, #116]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80028dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80028e0:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80028e4:	430b      	orrs	r3, r1
 80028e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80028f0:	d009      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028f2:	4a16      	ldr	r2, [pc, #88]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028f4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80028f8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80028fc:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8002900:	430b      	orrs	r3, r1
 8002902:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800290c:	d009      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800290e:	4a0f      	ldr	r2, [pc, #60]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002910:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002914:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002918:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 800291c:	430b      	orrs	r3, r1
 800291e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002922:	2e00      	cmp	r6, #0
 8002924:	d17c      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800292c:	d078      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800292e:	2d01      	cmp	r5, #1
 8002930:	f000 8109 	beq.w	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002934:	2000      	movs	r0, #0
}
 8002936:	b003      	add	sp, #12
 8002938:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1;
 800293a:	2601      	movs	r6, #1
 800293c:	e6a9      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800293e:	2601      	movs	r6, #1
 8002940:	e6b9      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8002942:	2501      	movs	r5, #1
 8002944:	e6bb      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8002946:	2601      	movs	r6, #1
 8002948:	e6cb      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b87      	ldr	r3, [pc, #540]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002954:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002958:	641a      	str	r2, [r3, #64]	@ 0x40
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002964:	4a83      	ldr	r2, [pc, #524]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002966:	6813      	ldr	r3, [r2, #0]
 8002968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800296e:	f7fd fe7d 	bl	800066c <HAL_GetTick>
 8002972:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002974:	4b7f      	ldr	r3, [pc, #508]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800297c:	d106      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7fd fe75 	bl	800066c <HAL_GetTick>
 8002982:	1bc0      	subs	r0, r0, r7
 8002984:	2864      	cmp	r0, #100	@ 0x64
 8002986:	d9f5      	bls.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8002988:	2003      	movs	r0, #3
 800298a:	e7d4      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800298c:	4b78      	ldr	r3, [pc, #480]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002990:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002994:	d015      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002996:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002998:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800299c:	429a      	cmp	r2, r3
 800299e:	d010      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a0:	4b73      	ldr	r3, [pc, #460]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80029a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029a4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80029a8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80029aa:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80029ae:	6719      	str	r1, [r3, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80029b2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80029b6:	6719      	str	r1, [r3, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 80029b8:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	f013 0f01 	tst.w	r3, #1
 80029c0:	d112      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80029c4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80029c8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80029cc:	d01d      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80029ce:	4a68      	ldr	r2, [pc, #416]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80029d0:	6893      	ldr	r3, [r2, #8]
 80029d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80029d6:	6093      	str	r3, [r2, #8]
 80029d8:	4965      	ldr	r1, [pc, #404]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80029da:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80029dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80029de:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80029e2:	4313      	orrs	r3, r2
 80029e4:	670b      	str	r3, [r1, #112]	@ 0x70
 80029e6:	e687      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 80029e8:	f7fd fe40 	bl	800066c <HAL_GetTick>
 80029ec:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ee:	4b60      	ldr	r3, [pc, #384]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f2:	f013 0f02 	tst.w	r3, #2
 80029f6:	d1e4      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fd fe38 	bl	800066c <HAL_GetTick>
 80029fc:	1bc0      	subs	r0, r0, r7
 80029fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a02:	4298      	cmp	r0, r3
 8002a04:	d9f3      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8002a06:	2003      	movs	r0, #3
 8002a08:	e795      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0a:	4859      	ldr	r0, [pc, #356]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002a0c:	6882      	ldr	r2, [r0, #8]
 8002a0e:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002a12:	4959      	ldr	r1, [pc, #356]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002a14:	4019      	ands	r1, r3
 8002a16:	430a      	orrs	r2, r1
 8002a18:	6082      	str	r2, [r0, #8]
 8002a1a:	e7dd      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1;
 8002a1c:	2501      	movs	r5, #1
 8002a1e:	e737      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();
 8002a20:	4a53      	ldr	r2, [pc, #332]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002a22:	6813      	ldr	r3, [r2, #0]
 8002a24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a28:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002a2a:	f7fd fe1f 	bl	800066c <HAL_GetTick>
 8002a2e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a30:	4b4f      	ldr	r3, [pc, #316]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002a38:	d006      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a3a:	f7fd fe17 	bl	800066c <HAL_GetTick>
 8002a3e:	1b80      	subs	r0, r0, r6
 8002a40:	2864      	cmp	r0, #100	@ 0x64
 8002a42:	d9f5      	bls.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8002a44:	2003      	movs	r0, #3
 8002a46:	e776      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	f013 0f01 	tst.w	r3, #1
 8002a4e:	d013      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002a50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a52:	b98b      	cbnz	r3, 8002a78 <HAL_RCCEx_PeriphCLKConfig+0x410>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a54:	4a46      	ldr	r2, [pc, #280]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002a56:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a5a:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a5e:	6860      	ldr	r0, [r4, #4]
 8002a60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a64:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a68:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	68a1      	ldr	r1, [r4, #8]
 8002a70:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002a74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002a7e:	d003      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002a80:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002a82:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8002a86:	d006      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a88:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002a8c:	d01e      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x464>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a94:	d11a      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x464>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a96:	4a36      	ldr	r2, [pc, #216]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002a98:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a9c:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aa0:	6860      	ldr	r0, [r4, #4]
 8002aa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aa6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002aaa:	68e0      	ldr	r0, [r4, #12]
 8002aac:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002ab0:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002aba:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002abe:	f023 031f 	bic.w	r3, r3, #31
 8002ac2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002ac4:	3901      	subs	r1, #1
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002ad2:	d011      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x490>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ad4:	4a26      	ldr	r2, [pc, #152]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002ad6:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ada:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ade:	6866      	ldr	r6, [r4, #4]
 8002ae0:	6923      	ldr	r3, [r4, #16]
 8002ae2:	041b      	lsls	r3, r3, #16
 8002ae4:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002ae8:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
 8002aec:	4303      	orrs	r3, r0
 8002aee:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002af2:	430b      	orrs	r3, r1
 8002af4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002afe:	d00d      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b00:	6862      	ldr	r2, [r4, #4]
 8002b02:	6923      	ldr	r3, [r4, #16]
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b0a:	68e2      	ldr	r2, [r4, #12]
 8002b0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b10:	68a2      	ldr	r2, [r4, #8]
 8002b12:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002b16:	4a16      	ldr	r2, [pc, #88]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002b18:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002b1c:	4a14      	ldr	r2, [pc, #80]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b24:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002b26:	f7fd fda1 	bl	800066c <HAL_GetTick>
 8002b2a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b2c:	4b10      	ldr	r3, [pc, #64]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002b34:	f47f aefb 	bne.w	800292e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b38:	f7fd fd98 	bl	800066c <HAL_GetTick>
 8002b3c:	1b80      	subs	r0, r0, r6
 8002b3e:	2864      	cmp	r0, #100	@ 0x64
 8002b40:	d9f4      	bls.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        return HAL_TIMEOUT;
 8002b42:	2003      	movs	r0, #3
 8002b44:	e6f7      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_PLLSAI_DISABLE();
 8002b46:	4a0a      	ldr	r2, [pc, #40]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002b48:	6813      	ldr	r3, [r2, #0]
 8002b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002b50:	f7fd fd8c 	bl	800066c <HAL_GetTick>
 8002b54:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002b5e:	d00d      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b60:	f7fd fd84 	bl	800066c <HAL_GetTick>
 8002b64:	1b40      	subs	r0, r0, r5
 8002b66:	2864      	cmp	r0, #100	@ 0x64
 8002b68:	d9f5      	bls.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
        return HAL_TIMEOUT;
 8002b6a:	2003      	movs	r0, #3
 8002b6c:	e6e3      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40007000 	.word	0x40007000
 8002b78:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002b82:	d001      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002b84:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002b86:	b122      	cbz	r2, 8002b92 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002b88:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002b8c:	d01d      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x562>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b90:	b9db      	cbnz	r3, 8002bca <HAL_RCCEx_PeriphCLKConfig+0x562>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b92:	4a35      	ldr	r2, [pc, #212]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002b94:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b98:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b9c:	6960      	ldr	r0, [r4, #20]
 8002b9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ba2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002ba6:	69a0      	ldr	r0, [r4, #24]
 8002ba8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002bac:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bb6:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002bba:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002bbe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002bc0:	3901      	subs	r1, #1
 8002bc2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002bc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002bd0:	d003      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002bd2:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8002bd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bd8:	d031      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	f013 0f08 	tst.w	r3, #8
 8002be0:	d019      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002be2:	4a21      	ldr	r2, [pc, #132]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002be4:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002be8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bec:	6960      	ldr	r0, [r4, #20]
 8002bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002bf6:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	69e1      	ldr	r1, [r4, #28]
 8002bfe:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002c02:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c06:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002c0a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002c0e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002c10:	430b      	orrs	r3, r1
 8002c12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002c16:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002c18:	6813      	ldr	r3, [r2, #0]
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002c20:	f7fd fd24 	bl	800066c <HAL_GetTick>
 8002c24:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002c2e:	d119      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c30:	f7fd fd1c 	bl	800066c <HAL_GetTick>
 8002c34:	1b00      	subs	r0, r0, r4
 8002c36:	2864      	cmp	r0, #100	@ 0x64
 8002c38:	d9f5      	bls.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x5be>
        return HAL_TIMEOUT;
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	e67b      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002c40:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c44:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c48:	6965      	ldr	r5, [r4, #20]
 8002c4a:	6a23      	ldr	r3, [r4, #32]
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002c52:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
 8002c56:	4303      	orrs	r3, r0
 8002c58:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002c62:	e7ba      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x572>
  return HAL_OK;
 8002c64:	2000      	movs	r0, #0
 8002c66:	e666      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002c68:	40023800 	.word	0x40023800

08002c6c <EnsureFixPresent_Fix_JSB_20191115_HAL_RCCEx_GetPeriphCLKConfig__PLLDivisionFactors>:

void EnsureFixPresent_Fix_JSB_20191115_HAL_RCCEx_GetPeriphCLKConfig__PLLDivisionFactors() {} // JSB
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_RCCEx_GetPeriphCLKConfig>:
{
  uint32_t tempreg = 0;

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8002c70:	4b60      	ldr	r3, [pc, #384]	@ (8002df4 <HAL_RCCEx_GetPeriphCLKConfig+0x184>)
 8002c72:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8002c74:	4b60      	ldr	r3, [pc, #384]	@ (8002df8 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8002c76:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002c7a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002c7e:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c80:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002c84:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8002c88:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002c8e:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8002c92:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c94:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002c98:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8002c9c:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8002c9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ca2:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002ca6:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ca8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002cac:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8002cb0:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002cb6:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8002cba:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002cc0:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8002cc4:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos) + 1; // *** JSB: Cube fix: + 1 ***
 8002cc6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002cca:	f002 021f 	and.w	r2, r2, #31
 8002cce:	3201      	adds	r2, #1
 8002cd0:	6242      	str	r2, [r0, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos) + 1; // *** JSB: Cube fix: + 1 ***
 8002cd2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002cd6:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8002cda:	3201      	adds	r2, #1
 8002cdc:	6282      	str	r2, [r0, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8002cde:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002ce2:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8002ce6:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8002ce8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002cec:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 8002cf0:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8002cf2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002cf6:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 8002cfa:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8002d02:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8002d04:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d08:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8002d0c:	6642      	str	r2, [r0, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8002d0e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d12:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
 8002d16:	6682      	str	r2, [r0, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8002d18:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d1c:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 8002d20:	66c2      	str	r2, [r0, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8002d22:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d26:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 8002d2a:	6702      	str	r2, [r0, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8002d2c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d30:	f002 0203 	and.w	r2, r2, #3
 8002d34:	6442      	str	r2, [r0, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8002d36:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d3a:	f002 020c 	and.w	r2, r2, #12
 8002d3e:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8002d40:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d44:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8002d48:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8002d4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d4e:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8002d52:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8002d54:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d58:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002d5c:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8002d5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d62:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8002d66:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8002d68:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d6c:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 8002d70:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8002d72:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d76:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8002d7a:	6602      	str	r2, [r0, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002d7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d80:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 8002d84:	6742      	str	r2, [r0, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8002d86:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d8a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8002d8e:	6782      	str	r2, [r0, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8002d90:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d94:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002d98:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8002d9a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d9e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8002da2:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8002da6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002daa:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8002dae:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002db2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002db6:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8002dba:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8002dbe:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002dc2:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8002dc6:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8002dca:	6899      	ldr	r1, [r3, #8]
 8002dcc:	f401 11f8 	and.w	r1, r1, #2031616	@ 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8002dd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002dd2:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	6302      	str	r2, [r0, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8002dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dde:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002de2:	d102      	bne.n	8002dea <HAL_RCCEx_GetPeriphCLKConfig+0x17a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8002de4:	2300      	movs	r3, #0
 8002de6:	6383      	str	r3, [r0, #56]	@ 0x38
 8002de8:	4770      	bx	lr
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002dea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dee:	6383      	str	r3, [r0, #56]	@ 0x38
  }
}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	1cfffff1 	.word	0x1cfffff1
 8002df8:	40023800 	.word	0x40023800

08002dfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002dfc:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002dfe:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8002e02:	d004      	beq.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
  uint32_t frequency = 0;
 8002e04:	2000      	movs	r0, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8002e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e0a:	d071      	beq.n	8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      }
    }
  }

  return frequency;
}
 8002e0c:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 8002e0e:	4a70      	ldr	r2, [pc, #448]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002e10:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8002e14:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
    switch (saiclocksource)
 8002e18:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8002e1c:	d064      	beq.n	8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8002e1e:	d826      	bhi.n	8002e6e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8002e20:	b38a      	cbz	r2, 8002e86 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 8002e22:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8002e26:	d120      	bne.n	8002e6a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002e28:	4a69      	ldr	r2, [pc, #420]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002e2a:	6852      	ldr	r2, [r2, #4]
 8002e2c:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8002e30:	d152      	bne.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e32:	4a67      	ldr	r2, [pc, #412]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002e34:	6851      	ldr	r1, [r2, #4]
 8002e36:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8002e3a:	4a66      	ldr	r2, [pc, #408]	@ (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002e3c:	fbb2 fcf1 	udiv	ip, r2, r1
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002e40:	4a63      	ldr	r2, [pc, #396]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002e42:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
 8002e46:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002e4a:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 8002e4e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002e52:	fb0c f000 	mul.w	r0, ip, r0
 8002e56:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8002e5a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8002e5e:	f002 021f 	and.w	r2, r2, #31
 8002e62:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 8002e64:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 8002e68:	e7cd      	b.n	8002e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	e7cb      	b.n	8002e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
 8002e6e:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8002e72:	d106      	bne.n	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002e74:	4a56      	ldr	r2, [pc, #344]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002e76:	6852      	ldr	r2, [r2, #4]
 8002e78:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8002e7c:	d136      	bne.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
          frequency = HSI_VALUE;
 8002e7e:	4855      	ldr	r0, [pc, #340]	@ (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002e80:	e7c1      	b.n	8002e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 8002e82:	2000      	movs	r0, #0
 8002e84:	e7bf      	b.n	8002e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002e86:	4a52      	ldr	r2, [pc, #328]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002e88:	6852      	ldr	r2, [r2, #4]
 8002e8a:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e90:	4a4f      	ldr	r2, [pc, #316]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002e92:	6851      	ldr	r1, [r2, #4]
 8002e94:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8002e98:	4a4e      	ldr	r2, [pc, #312]	@ (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002e9a:	fbb2 fcf1 	udiv	ip, r2, r1
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002e9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002ea0:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 8002ea4:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002ea8:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 8002eac:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002eb0:	fb0c f000 	mul.w	r0, ip, r0
 8002eb4:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8002eb8:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8002ebc:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8002ec0:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 8002ec2:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 8002ec6:	e79e      	b.n	8002e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002ec8:	4a41      	ldr	r2, [pc, #260]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002eca:	6851      	ldr	r1, [r2, #4]
 8002ecc:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8002ed0:	4a41      	ldr	r2, [pc, #260]	@ (8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002ed2:	fbb2 fcf1 	udiv	ip, r2, r1
 8002ed6:	e7e2      	b.n	8002e9e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002eda:	6851      	ldr	r1, [r2, #4]
 8002edc:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8002ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002ee2:	fbb2 fcf1 	udiv	ip, r2, r1
 8002ee6:	e7ab      	b.n	8002e40 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        frequency = EXTERNAL_CLOCK_VALUE;
 8002ee8:	483c      	ldr	r0, [pc, #240]	@ (8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8002eea:	e78c      	b.n	8002e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          frequency = HSE_VALUE;
 8002eec:	483a      	ldr	r0, [pc, #232]	@ (8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002eee:	e78a      	b.n	8002e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 8002ef0:	4b37      	ldr	r3, [pc, #220]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8002ef6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
    switch (saiclocksource)
 8002efa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002efe:	d062      	beq.n	8002fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8002f00:	d825      	bhi.n	8002f4e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8002f02:	b37b      	cbz	r3, 8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8002f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f08:	d120      	bne.n	8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002f0a:	4b31      	ldr	r3, [pc, #196]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002f12:	d150      	bne.n	8002fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002f14:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f1c:	492d      	ldr	r1, [pc, #180]	@ (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002f1e:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002f22:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002f24:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f28:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002f2c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8002f30:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002f34:	fb01 f000 	mul.w	r0, r1, r0
 8002f38:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8002f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8002f46:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002f4a:	4770      	bx	lr
 8002f4c:	4770      	bx	lr
    switch (saiclocksource)
 8002f4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f52:	d106      	bne.n	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002f54:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002f5c:	d135      	bne.n	8002fca <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
          frequency = HSI_VALUE;
 8002f5e:	481d      	ldr	r0, [pc, #116]	@ (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002f60:	4770      	bx	lr
 8002f62:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002f64:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002f6c:	d11b      	bne.n	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002f6e:	4b18      	ldr	r3, [pc, #96]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f76:	4917      	ldr	r1, [pc, #92]	@ (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002f78:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002f7c:	4b14      	ldr	r3, [pc, #80]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002f7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f82:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002f86:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8002f8a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002f8e:	fb01 f000 	mul.w	r0, r1, r0
 8002f92:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8002f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f9a:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8002f9e:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8002fa0:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002fa4:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fae:	490a      	ldr	r1, [pc, #40]	@ (8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002fb0:	fbb1 f1f3 	udiv	r1, r1, r3
 8002fb4:	e7e2      	b.n	8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x180>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002fb6:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fbe:	4906      	ldr	r1, [pc, #24]	@ (8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002fc0:	fbb1 f1f3 	udiv	r1, r1, r3
 8002fc4:	e7ad      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
        frequency = EXTERNAL_CLOCK_VALUE;
 8002fc6:	4805      	ldr	r0, [pc, #20]	@ (8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8002fc8:	4770      	bx	lr
          frequency = HSE_VALUE;
 8002fca:	4803      	ldr	r0, [pc, #12]	@ (8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
  return frequency;
 8002fcc:	e71e      	b.n	8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	017d7840 	.word	0x017d7840
 8002fdc:	00ac4400 	.word	0x00ac4400

08002fe0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8002fe0:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002fe2:	2400      	movs	r4, #0
 8002fe4:	6304      	str	r4, [r0, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8002fe6:	6384      	str	r4, [r0, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002fe8:	6844      	ldr	r4, [r0, #4]
 8002fea:	2c02      	cmp	r4, #2
 8002fec:	bf18      	it	ne
 8002fee:	2c00      	cmpne	r4, #0
 8002ff0:	d117      	bne.n	8003022 <SAI_InitI2S+0x42>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002ff2:	2400      	movs	r4, #0
 8002ff4:	63c4      	str	r4, [r0, #60]	@ 0x3c
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8002ff6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8002ffa:	6484      	str	r4, [r0, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8002ffc:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8003000:	6604      	str	r4, [r0, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8003002:	2400      	movs	r4, #0
 8003004:	6544      	str	r4, [r0, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8003006:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if((nbslot & 0x1) != 0 )
 8003008:	f013 0f01 	tst.w	r3, #1
 800300c:	d14f      	bne.n	80030ae <SAI_InitI2S+0xce>
  {
    return HAL_ERROR;
  }

  switch(protocol)
 800300e:	b159      	cbz	r1, 8003028 <SAI_InitI2S+0x48>
 8003010:	1e4c      	subs	r4, r1, #1
 8003012:	2c01      	cmp	r4, #1
 8003014:	d84e      	bhi.n	80030b4 <SAI_InitI2S+0xd4>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
    break;
  case SAI_I2S_MSBJUSTIFIED :
  case SAI_I2S_LSBJUSTIFIED :
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8003016:	f44f 3400 	mov.w	r4, #131072	@ 0x20000
 800301a:	64c4      	str	r4, [r0, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800301c:	2400      	movs	r4, #0
 800301e:	6504      	str	r4, [r0, #80]	@ 0x50
    break;
 8003020:	e007      	b.n	8003032 <SAI_InitI2S+0x52>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8003022:	2401      	movs	r4, #1
 8003024:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8003026:	e7e6      	b.n	8002ff6 <SAI_InitI2S+0x16>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003028:	2400      	movs	r4, #0
 800302a:	64c4      	str	r4, [r0, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800302c:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 8003030:	6504      	str	r4, [r0, #80]	@ 0x50
  default :
    return HAL_ERROR;
  }

  /* Frame definition */
  switch(datasize)
 8003032:	2a03      	cmp	r2, #3
 8003034:	d840      	bhi.n	80030b8 <SAI_InitI2S+0xd8>
 8003036:	e8df f002 	tbb	[pc, r2]
 800303a:	0f02      	.short	0x0f02
 800303c:	2218      	.short	0x2218
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800303e:	2480      	movs	r4, #128	@ 0x80
 8003040:	6344      	str	r4, [r0, #52]	@ 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	015c      	lsls	r4, r3, #5
 8003046:	6404      	str	r4, [r0, #64]	@ 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	6443      	str	r3, [r0, #68]	@ 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800304c:	2340      	movs	r3, #64	@ 0x40
 800304e:	6583      	str	r3, [r0, #88]	@ 0x58
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
    break;
  default :
    return HAL_ERROR;
  }
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 8003050:	2902      	cmp	r1, #2
 8003052:	d01e      	beq.n	8003092 <SAI_InitI2S+0xb2>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return HAL_OK;
 8003054:	2000      	movs	r0, #0
 8003056:	e02b      	b.n	80030b0 <SAI_InitI2S+0xd0>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8003058:	2480      	movs	r4, #128	@ 0x80
 800305a:	6344      	str	r4, [r0, #52]	@ 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	019d      	lsls	r5, r3, #6
 8003060:	6405      	str	r5, [r0, #64]	@ 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	6443      	str	r3, [r0, #68]	@ 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003066:	6584      	str	r4, [r0, #88]	@ 0x58
    break;
 8003068:	e7f2      	b.n	8003050 <SAI_InitI2S+0x70>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 800306a:	24c0      	movs	r4, #192	@ 0xc0
 800306c:	6344      	str	r4, [r0, #52]	@ 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	019c      	lsls	r4, r3, #6
 8003072:	6404      	str	r4, [r0, #64]	@ 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8003074:	015b      	lsls	r3, r3, #5
 8003076:	6443      	str	r3, [r0, #68]	@ 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	6583      	str	r3, [r0, #88]	@ 0x58
    break;
 800307c:	e7e8      	b.n	8003050 <SAI_InitI2S+0x70>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800307e:	24e0      	movs	r4, #224	@ 0xe0
 8003080:	6344      	str	r4, [r0, #52]	@ 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	019c      	lsls	r4, r3, #6
 8003086:	6404      	str	r4, [r0, #64]	@ 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8003088:	015b      	lsls	r3, r3, #5
 800308a:	6443      	str	r3, [r0, #68]	@ 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800308c:	2380      	movs	r3, #128	@ 0x80
 800308e:	6583      	str	r3, [r0, #88]	@ 0x58
    break;
 8003090:	e7de      	b.n	8003050 <SAI_InitI2S+0x70>
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8003092:	2a01      	cmp	r2, #1
 8003094:	d003      	beq.n	800309e <SAI_InitI2S+0xbe>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8003096:	2a02      	cmp	r2, #2
 8003098:	d005      	beq.n	80030a6 <SAI_InitI2S+0xc6>
  return HAL_OK;
 800309a:	2000      	movs	r0, #0
 800309c:	e008      	b.n	80030b0 <SAI_InitI2S+0xd0>
      hsai->SlotInit.FirstBitOffset = 16;
 800309e:	2310      	movs	r3, #16
 80030a0:	6543      	str	r3, [r0, #84]	@ 0x54
  return HAL_OK;
 80030a2:	2000      	movs	r0, #0
 80030a4:	e004      	b.n	80030b0 <SAI_InitI2S+0xd0>
      hsai->SlotInit.FirstBitOffset = 8;
 80030a6:	2308      	movs	r3, #8
 80030a8:	6543      	str	r3, [r0, #84]	@ 0x54
  return HAL_OK;
 80030aa:	2000      	movs	r0, #0
 80030ac:	e000      	b.n	80030b0 <SAI_InitI2S+0xd0>
    return HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
}
 80030b0:	bc30      	pop	{r4, r5}
 80030b2:	4770      	bx	lr
  switch(protocol)
 80030b4:	2001      	movs	r0, #1
 80030b6:	e7fb      	b.n	80030b0 <SAI_InitI2S+0xd0>
  switch(datasize)
 80030b8:	2001      	movs	r0, #1
 80030ba:	e7f9      	b.n	80030b0 <SAI_InitI2S+0xd0>

080030bc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80030bc:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80030be:	2400      	movs	r4, #0
 80030c0:	6304      	str	r4, [r0, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80030c2:	6384      	str	r4, [r0, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80030c4:	6844      	ldr	r4, [r0, #4]
 80030c6:	2c02      	cmp	r4, #2
 80030c8:	bf18      	it	ne
 80030ca:	2c00      	cmpne	r4, #0
 80030cc:	d11a      	bne.n	8003104 <SAI_InitPCM+0x48>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80030ce:	2401      	movs	r4, #1
 80030d0:	63c4      	str	r4, [r0, #60]	@ 0x3c
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80030d2:	2400      	movs	r4, #0
 80030d4:	6484      	str	r4, [r0, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80030d6:	f44f 3500 	mov.w	r5, #131072	@ 0x20000
 80030da:	64c5      	str	r5, [r0, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80030dc:	f44f 2580 	mov.w	r5, #262144	@ 0x40000
 80030e0:	6505      	str	r5, [r0, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80030e2:	6544      	str	r4, [r0, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80030e4:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80030e6:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80030ea:	6604      	str	r4, [r0, #96]	@ 0x60

  switch(protocol)
 80030ec:	2903      	cmp	r1, #3
 80030ee:	d00c      	beq.n	800310a <SAI_InitPCM+0x4e>
 80030f0:	2904      	cmp	r1, #4
 80030f2:	d12c      	bne.n	800314e <SAI_InitPCM+0x92>
  {
  case SAI_PCM_SHORT :
    hsai->FrameInit.ActiveFrameLength = 1;
 80030f4:	2101      	movs	r1, #1
 80030f6:	6441      	str	r1, [r0, #68]	@ 0x44
    break;
  default :
    return HAL_ERROR;
  }

  switch(datasize)
 80030f8:	2a03      	cmp	r2, #3
 80030fa:	d82b      	bhi.n	8003154 <SAI_InitPCM+0x98>
 80030fc:	e8df f002 	tbb	[pc, r2]
 8003100:	1f171008 	.word	0x1f171008
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003104:	2400      	movs	r4, #0
 8003106:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8003108:	e7e3      	b.n	80030d2 <SAI_InitPCM+0x16>
    hsai->FrameInit.ActiveFrameLength = 13;
 800310a:	210d      	movs	r1, #13
 800310c:	6441      	str	r1, [r0, #68]	@ 0x44
    break;
 800310e:	e7f3      	b.n	80030f8 <SAI_InitPCM+0x3c>
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8003110:	2280      	movs	r2, #128	@ 0x80
 8003112:	6342      	str	r2, [r0, #52]	@ 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	6403      	str	r3, [r0, #64]	@ 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003118:	2340      	movs	r3, #64	@ 0x40
 800311a:	6583      	str	r3, [r0, #88]	@ 0x58
    break;
  default :
    return HAL_ERROR;
  }

  return HAL_OK;
 800311c:	2000      	movs	r0, #0
    break;
 800311e:	e017      	b.n	8003150 <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	6342      	str	r2, [r0, #52]	@ 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8003124:	015b      	lsls	r3, r3, #5
 8003126:	6403      	str	r3, [r0, #64]	@ 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003128:	6582      	str	r2, [r0, #88]	@ 0x58
  return HAL_OK;
 800312a:	2000      	movs	r0, #0
    break;
 800312c:	e010      	b.n	8003150 <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 800312e:	22c0      	movs	r2, #192	@ 0xc0
 8003130:	6342      	str	r2, [r0, #52]	@ 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8003132:	015b      	lsls	r3, r3, #5
 8003134:	6403      	str	r3, [r0, #64]	@ 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	6583      	str	r3, [r0, #88]	@ 0x58
  return HAL_OK;
 800313a:	2000      	movs	r0, #0
    break;
 800313c:	e008      	b.n	8003150 <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800313e:	22e0      	movs	r2, #224	@ 0xe0
 8003140:	6342      	str	r2, [r0, #52]	@ 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8003142:	015b      	lsls	r3, r3, #5
 8003144:	6403      	str	r3, [r0, #64]	@ 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003146:	2380      	movs	r3, #128	@ 0x80
 8003148:	6583      	str	r3, [r0, #88]	@ 0x58
  return HAL_OK;
 800314a:	2000      	movs	r0, #0
    break;
 800314c:	e000      	b.n	8003150 <SAI_InitPCM+0x94>
  switch(protocol)
 800314e:	2001      	movs	r0, #1
}
 8003150:	bc30      	pop	{r4, r5}
 8003152:	4770      	bx	lr
  switch(datasize)
 8003154:	2001      	movs	r0, #1
 8003156:	e7fb      	b.n	8003150 <SAI_InitPCM+0x94>

08003158 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
 8003158:	2901      	cmp	r1, #1
 800315a:	d00a      	beq.n	8003172 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800315c:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800315e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003160:	2a08      	cmp	r2, #8
 8003162:	d008      	beq.n	8003176 <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003164:	6842      	ldr	r2, [r0, #4]
 8003166:	3a02      	subs	r2, #2
 8003168:	2a01      	cmp	r2, #1
 800316a:	d90c      	bls.n	8003186 <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800316c:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8003170:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 8003172:	2309      	movs	r3, #9
 8003174:	e7f3      	b.n	800315e <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003176:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003178:	2a01      	cmp	r2, #1
 800317a:	bf18      	it	ne
 800317c:	2a03      	cmpne	r2, #3
 800317e:	d1f1      	bne.n	8003164 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 8003180:	f043 0310 	orr.w	r3, r3, #16
 8003184:	e7ee      	b.n	8003164 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8003186:	f043 0060 	orr.w	r0, r3, #96	@ 0x60
 800318a:	4770      	bx	lr

0800318c <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800318c:	4b0e      	ldr	r3, [pc, #56]	@ (80031c8 <SAI_Disable+0x3c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0e      	ldr	r2, [pc, #56]	@ (80031cc <SAI_Disable+0x40>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0b1b      	lsrs	r3, r3, #12
 8003198:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800319a:	6801      	ldr	r1, [r0, #0]
 800319c:	680a      	ldr	r2, [r1, #0]
 800319e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80031a2:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80031a4:	461a      	mov	r2, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b132      	cbz	r2, 80031b8 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80031aa:	6802      	ldr	r2, [r0, #0]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80031b2:	d1f7      	bne.n	80031a4 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80031b4:	2000      	movs	r0, #0

  return status;
}
 80031b6:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80031b8:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80031bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031c0:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80031c4:	2003      	movs	r0, #3
      break;
 80031c6:	4770      	bx	lr
 80031c8:	200003fc 	.word	0x200003fc
 80031cc:	95cbec1b 	.word	0x95cbec1b

080031d0 <HAL_SAI_Init>:
  if(hsai == NULL)
 80031d0:	2800      	cmp	r0, #0
 80031d2:	f000 80e4 	beq.w	800339e <HAL_SAI_Init+0x1ce>
{
 80031d6:	b538      	push	{r3, r4, r5, lr}
 80031d8:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 80031da:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 80031de:	b163      	cbz	r3, 80031fa <HAL_SAI_Init+0x2a>
  hsai->State = HAL_SAI_STATE_BUSY;
 80031e0:	2302      	movs	r3, #2
 80031e2:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  SAI_Disable(hsai);
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7ff ffd0 	bl	800318c <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 80031ec:	68e3      	ldr	r3, [r4, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d008      	beq.n	8003204 <HAL_SAI_Init+0x34>
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d113      	bne.n	800321e <HAL_SAI_Init+0x4e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80031f6:	2220      	movs	r2, #32
 80031f8:	e005      	b.n	8003206 <HAL_SAI_Init+0x36>
    hsai->Lock = HAL_UNLOCKED;
 80031fa:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 80031fe:	f00b f831 	bl	800e264 <HAL_SAI_MspInit>
 8003202:	e7ed      	b.n	80031e0 <HAL_SAI_Init+0x10>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003204:	2210      	movs	r2, #16
  switch(hsai->Init.Synchro)
 8003206:	68a3      	ldr	r3, [r4, #8]
 8003208:	2b02      	cmp	r3, #2
 800320a:	f000 80a9 	beq.w	8003360 <HAL_SAI_Init+0x190>
 800320e:	2b03      	cmp	r3, #3
 8003210:	d007      	beq.n	8003222 <HAL_SAI_Init+0x52>
 8003212:	2b01      	cmp	r3, #1
 8003214:	f040 80a7 	bne.w	8003366 <HAL_SAI_Init+0x196>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8003218:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800321c:	e005      	b.n	800322a <HAL_SAI_Init+0x5a>
  switch(hsai->Init.SynchroExt)
 800321e:	2200      	movs	r2, #0
 8003220:	e7f1      	b.n	8003206 <HAL_SAI_Init+0x36>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003222:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8003226:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	485d      	ldr	r0, [pc, #372]	@ (80033a4 <HAL_SAI_Init+0x1d4>)
 800322e:	495e      	ldr	r1, [pc, #376]	@ (80033a8 <HAL_SAI_Init+0x1d8>)
 8003230:	428b      	cmp	r3, r1
 8003232:	bf18      	it	ne
 8003234:	4283      	cmpne	r3, r0
 8003236:	f040 8098 	bne.w	800336a <HAL_SAI_Init+0x19a>
    SAI1->GCR = tmpregisterGCR;
 800323a:	4b5c      	ldr	r3, [pc, #368]	@ (80033ac <HAL_SAI_Init+0x1dc>)
 800323c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003240:	69e3      	ldr	r3, [r4, #28]
 8003242:	b323      	cbz	r3, 800328e <HAL_SAI_Init+0xbe>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	4957      	ldr	r1, [pc, #348]	@ (80033a4 <HAL_SAI_Init+0x1d4>)
 8003248:	4a57      	ldr	r2, [pc, #348]	@ (80033a8 <HAL_SAI_Init+0x1d8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	bf18      	it	ne
 800324e:	428b      	cmpne	r3, r1
 8003250:	f000 808f 	beq.w	8003372 <HAL_SAI_Init+0x1a2>
    uint32_t freq = 0;
 8003254:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	4955      	ldr	r1, [pc, #340]	@ (80033b0 <HAL_SAI_Init+0x1e0>)
 800325a:	4a56      	ldr	r2, [pc, #344]	@ (80033b4 <HAL_SAI_Init+0x1e4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	bf18      	it	ne
 8003260:	428b      	cmpne	r3, r1
 8003262:	f000 808b 	beq.w	800337c <HAL_SAI_Init+0x1ac>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8003266:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800326a:	0040      	lsls	r0, r0, #1
 800326c:	69e3      	ldr	r3, [r4, #28]
 800326e:	025b      	lsls	r3, r3, #9
 8003270:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8003274:	4b50      	ldr	r3, [pc, #320]	@ (80033b8 <HAL_SAI_Init+0x1e8>)
 8003276:	fba3 2300 	umull	r2, r3, r3, r0
 800327a:	08db      	lsrs	r3, r3, #3
 800327c:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 800327e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003282:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8003286:	2808      	cmp	r0, #8
 8003288:	d901      	bls.n	800328e <HAL_SAI_Init+0xbe>
      hsai->Init.Mckdiv+= 1;
 800328a:	3301      	adds	r3, #1
 800328c:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800328e:	6863      	ldr	r3, [r4, #4]
 8003290:	2b02      	cmp	r3, #2
 8003292:	bf18      	it	ne
 8003294:	2b00      	cmpne	r3, #0
 8003296:	d179      	bne.n	800338c <HAL_SAI_Init+0x1bc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003298:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800329a:	2b01      	cmp	r3, #1
 800329c:	d073      	beq.n	8003386 <HAL_SAI_Init+0x1b6>
 800329e:	f44f 7c00 	mov.w	ip, #512	@ 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	6811      	ldr	r1, [r2, #0]
 80032a6:	4b45      	ldr	r3, [pc, #276]	@ (80033bc <HAL_SAI_Init+0x1ec>)
 80032a8:	400b      	ands	r3, r1
 80032aa:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80032ac:	6822      	ldr	r2, [r4, #0]
 80032ae:	6811      	ldr	r1, [r2, #0]
 80032b0:	6863      	ldr	r3, [r4, #4]
 80032b2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80032b4:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80032b6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80032b8:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80032ba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80032bc:	4303      	orrs	r3, r0
 80032be:	ea43 030c 	orr.w	r3, r3, ip
                        ckstr_bits | syncen_bits |                               \
 80032c2:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80032c4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
                        ckstr_bits | syncen_bits |                               \
 80032c6:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80032c8:	6920      	ldr	r0, [r4, #16]
 80032ca:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80032cc:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80032ce:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80032d0:	6a20      	ldr	r0, [r4, #32]
 80032d2:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80032d6:	430b      	orrs	r3, r1
 80032d8:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80032da:	6822      	ldr	r2, [r4, #0]
 80032dc:	6851      	ldr	r1, [r2, #4]
 80032de:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <HAL_SAI_Init+0x1f0>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80032e4:	6821      	ldr	r1, [r4, #0]
 80032e6:	684a      	ldr	r2, [r1, #4]
 80032e8:	69a3      	ldr	r3, [r4, #24]
 80032ea:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80032ec:	4303      	orrs	r3, r0
 80032ee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80032f0:	4303      	orrs	r3, r0
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80032f6:	6822      	ldr	r2, [r4, #0]
 80032f8:	6891      	ldr	r1, [r2, #8]
 80032fa:	4b32      	ldr	r3, [pc, #200]	@ (80033c4 <HAL_SAI_Init+0x1f4>)
 80032fc:	400b      	ands	r3, r1
 80032fe:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8003300:	6820      	ldr	r0, [r4, #0]
 8003302:	6882      	ldr	r2, [r0, #8]
 8003304:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003306:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8003308:	6d21      	ldr	r1, [r4, #80]	@ 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800330a:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 800330c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                          hsai->FrameInit.FSOffset |
 800330e:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8003310:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
                          hsai->FrameInit.FSDefinition |
 8003312:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8003314:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003316:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8003318:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800331c:	4313      	orrs	r3, r2
 800331e:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003320:	6822      	ldr	r2, [r4, #0]
 8003322:	68d3      	ldr	r3, [r2, #12]
 8003324:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 8003328:	f023 030f 	bic.w	r3, r3, #15
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	0c1b      	lsrs	r3, r3, #16
 8003330:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	68c2      	ldr	r2, [r0, #12]
 8003336:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003338:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800333a:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800333c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800333e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003342:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003344:	3901      	subs	r1, #1
 8003346:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800334a:	4313      	orrs	r3, r2
 800334c:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800334e:	2000      	movs	r0, #0
 8003350:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  hsai->State= HAL_SAI_STATE_READY;
 8003354:	2301      	movs	r3, #1
 8003356:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 800335a:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
}
 800335e:	bd38      	pop	{r3, r4, r5, pc}
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8003360:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8003364:	e761      	b.n	800322a <HAL_SAI_Init+0x5a>
  switch(hsai->Init.Synchro)
 8003366:	2500      	movs	r5, #0
 8003368:	e75f      	b.n	800322a <HAL_SAI_Init+0x5a>
    SAI2->GCR = tmpregisterGCR;
 800336a:	4b10      	ldr	r3, [pc, #64]	@ (80033ac <HAL_SAI_Init+0x1dc>)
 800336c:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 8003370:	e766      	b.n	8003240 <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003372:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003376:	f7ff fd41 	bl	8002dfc <HAL_RCCEx_GetPeriphCLKFreq>
 800337a:	e76c      	b.n	8003256 <HAL_SAI_Init+0x86>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800337c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003380:	f7ff fd3c 	bl	8002dfc <HAL_RCCEx_GetPeriphCLKFreq>
 8003384:	e76f      	b.n	8003266 <HAL_SAI_Init+0x96>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003386:	f04f 0c00 	mov.w	ip, #0
 800338a:	e78a      	b.n	80032a2 <HAL_SAI_Init+0xd2>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800338c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d002      	beq.n	8003398 <HAL_SAI_Init+0x1c8>
 8003392:	f04f 0c00 	mov.w	ip, #0
 8003396:	e784      	b.n	80032a2 <HAL_SAI_Init+0xd2>
 8003398:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800339c:	e781      	b.n	80032a2 <HAL_SAI_Init+0xd2>
    return HAL_ERROR;
 800339e:	2001      	movs	r0, #1
}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40015804 	.word	0x40015804
 80033a8:	40015824 	.word	0x40015824
 80033ac:	40015000 	.word	0x40015000
 80033b0:	40015c04 	.word	0x40015c04
 80033b4:	40015c24 	.word	0x40015c24
 80033b8:	cccccccd 	.word	0xcccccccd
 80033bc:	ff05c010 	.word	0xff05c010
 80033c0:	ffff1ff0 	.word	0xffff1ff0
 80033c4:	fff88000 	.word	0xfff88000

080033c8 <HAL_SAI_InitProtocol>:
{
 80033c8:	b510      	push	{r4, lr}
 80033ca:	4604      	mov	r4, r0
  switch(protocol)
 80033cc:	2902      	cmp	r1, #2
 80033ce:	d906      	bls.n	80033de <HAL_SAI_InitProtocol+0x16>
 80033d0:	1ec8      	subs	r0, r1, #3
 80033d2:	2801      	cmp	r0, #1
 80033d4:	d80b      	bhi.n	80033ee <HAL_SAI_InitProtocol+0x26>
    status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7ff fe70 	bl	80030bc <SAI_InitPCM>
    break;
 80033dc:	e001      	b.n	80033e2 <HAL_SAI_InitProtocol+0x1a>
    status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80033de:	f7ff fdff 	bl	8002fe0 <SAI_InitI2S>
  if(status == HAL_OK)
 80033e2:	b100      	cbz	r0, 80033e6 <HAL_SAI_InitProtocol+0x1e>
}
 80033e4:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 80033e6:	4620      	mov	r0, r4
 80033e8:	f7ff fef2 	bl	80031d0 <HAL_SAI_Init>
 80033ec:	e7fa      	b.n	80033e4 <HAL_SAI_InitProtocol+0x1c>
  switch(protocol)
 80033ee:	2001      	movs	r0, #1
 80033f0:	e7f8      	b.n	80033e4 <HAL_SAI_InitProtocol+0x1c>

080033f2 <HAL_SAI_DMAStop>:
{
 80033f2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 80033f4:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d04c      	beq.n	8003496 <HAL_SAI_DMAStop+0xa4>
 80033fc:	4604      	mov	r4, r0
 80033fe:	2301      	movs	r3, #1
 8003400:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003404:	6802      	ldr	r2, [r0, #0]
 8003406:	6813      	ldr	r3, [r2, #0]
 8003408:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800340c:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800340e:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8003410:	b368      	cbz	r0, 800346e <HAL_SAI_DMAStop+0x7c>
 8003412:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b12      	cmp	r3, #18
 800341a:	d017      	beq.n	800344c <HAL_SAI_DMAStop+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800341c:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800341e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003420:	b120      	cbz	r0, 800342c <HAL_SAI_DMAStop+0x3a>
 8003422:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b22      	cmp	r3, #34	@ 0x22
 800342a:	d024      	beq.n	8003476 <HAL_SAI_DMAStop+0x84>
  SAI_Disable(hsai);
 800342c:	4620      	mov	r0, r4
 800342e:	f7ff fead 	bl	800318c <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	6853      	ldr	r3, [r2, #4]
 8003436:	f043 0308 	orr.w	r3, r3, #8
 800343a:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 800343c:	2301      	movs	r3, #1
 800343e:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 8003442:	2300      	movs	r3, #0
 8003444:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 8003448:	4628      	mov	r0, r5
 800344a:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800344c:	f7fd faa6 	bl	800099c <HAL_DMA_Abort>
 8003450:	4605      	mov	r5, r0
 8003452:	2800      	cmp	r0, #0
 8003454:	d0e3      	beq.n	800341e <HAL_SAI_DMAStop+0x2c>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8003456:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345a:	2b80      	cmp	r3, #128	@ 0x80
 800345c:	d009      	beq.n	8003472 <HAL_SAI_DMAStop+0x80>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800345e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8003462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003466:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 800346a:	2501      	movs	r5, #1
 800346c:	e7d7      	b.n	800341e <HAL_SAI_DMAStop+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 800346e:	2500      	movs	r5, #0
 8003470:	e7d5      	b.n	800341e <HAL_SAI_DMAStop+0x2c>
 8003472:	2500      	movs	r5, #0
 8003474:	e7d3      	b.n	800341e <HAL_SAI_DMAStop+0x2c>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8003476:	f7fd fa91 	bl	800099c <HAL_DMA_Abort>
 800347a:	2800      	cmp	r0, #0
 800347c:	d0d6      	beq.n	800342c <HAL_SAI_DMAStop+0x3a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800347e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	2b80      	cmp	r3, #128	@ 0x80
 8003484:	d0d2      	beq.n	800342c <HAL_SAI_DMAStop+0x3a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003486:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800348a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800348e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 8003492:	2501      	movs	r5, #1
 8003494:	e7ca      	b.n	800342c <HAL_SAI_DMAStop+0x3a>
  __HAL_LOCK(hsai);
 8003496:	2502      	movs	r5, #2
 8003498:	e7d6      	b.n	8003448 <HAL_SAI_DMAStop+0x56>
	...

0800349c <HAL_SAI_Transmit_DMA>:
{
 800349c:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 800349e:	2a00      	cmp	r2, #0
 80034a0:	bf18      	it	ne
 80034a2:	2900      	cmpne	r1, #0
 80034a4:	d04c      	beq.n	8003540 <HAL_SAI_Transmit_DMA+0xa4>
 80034a6:	4604      	mov	r4, r0
 80034a8:	4613      	mov	r3, r2
  if(hsai->State == HAL_SAI_STATE_READY)
 80034aa:	f894 507d 	ldrb.w	r5, [r4, #125]	@ 0x7d
 80034ae:	b2ed      	uxtb	r5, r5
 80034b0:	2d01      	cmp	r5, #1
 80034b2:	d148      	bne.n	8003546 <HAL_SAI_Transmit_DMA+0xaa>
    __HAL_LOCK(hsai);
 80034b4:	f894 207c 	ldrb.w	r2, [r4, #124]	@ 0x7c
 80034b8:	2a01      	cmp	r2, #1
 80034ba:	d046      	beq.n	800354a <HAL_SAI_Transmit_DMA+0xae>
 80034bc:	2201      	movs	r2, #1
 80034be:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->pBuffPtr = pData;
 80034c2:	6661      	str	r1, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 80034c4:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 80034c8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80034d2:	2212      	movs	r2, #18
 80034d4:	f884 207d 	strb.w	r2, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80034d8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80034da:	491d      	ldr	r1, [pc, #116]	@ (8003550 <HAL_SAI_Transmit_DMA+0xb4>)
 80034dc:	6411      	str	r1, [r2, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80034de:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80034e0:	491c      	ldr	r1, [pc, #112]	@ (8003554 <HAL_SAI_Transmit_DMA+0xb8>)
 80034e2:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80034e4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80034e6:	491c      	ldr	r1, [pc, #112]	@ (8003558 <HAL_SAI_Transmit_DMA+0xbc>)
 80034e8:	64d1      	str	r1, [r2, #76]	@ 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80034ea:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80034ec:	6513      	str	r3, [r2, #80]	@ 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80034ee:	6822      	ldr	r2, [r4, #0]
 80034f0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 80034f4:	321c      	adds	r2, #28
 80034f6:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80034f8:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80034fa:	f7fd fa15 	bl	8000928 <HAL_DMA_Start_IT>
 80034fe:	4606      	mov	r6, r0
 8003500:	b118      	cbz	r0, 800350a <HAL_SAI_Transmit_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 8003502:	2300      	movs	r3, #0
 8003504:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
      return  HAL_ERROR;
 8003508:	e01b      	b.n	8003542 <HAL_SAI_Transmit_DMA+0xa6>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003512:	d103      	bne.n	800351c <HAL_SAI_Transmit_DMA+0x80>
      __HAL_SAI_ENABLE(hsai);
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800351a:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800351c:	2100      	movs	r1, #0
 800351e:	4620      	mov	r0, r4
 8003520:	f7ff fe1a 	bl	8003158 <SAI_InterruptFlag>
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	6913      	ldr	r3, [r2, #16]
 8003528:	4303      	orrs	r3, r0
 800352a:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	6813      	ldr	r3, [r2, #0]
 8003530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003534:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8003536:	2300      	movs	r3, #0
 8003538:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800353c:	4635      	mov	r5, r6
 800353e:	e000      	b.n	8003542 <HAL_SAI_Transmit_DMA+0xa6>
    return  HAL_ERROR;
 8003540:	2501      	movs	r5, #1
}
 8003542:	4628      	mov	r0, r5
 8003544:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003546:	2502      	movs	r5, #2
 8003548:	e7fb      	b.n	8003542 <HAL_SAI_Transmit_DMA+0xa6>
    __HAL_LOCK(hsai);
 800354a:	2502      	movs	r5, #2
 800354c:	e7f9      	b.n	8003542 <HAL_SAI_Transmit_DMA+0xa6>
 800354e:	bf00      	nop
 8003550:	08003659 	.word	0x08003659
 8003554:	0800361d 	.word	0x0800361d
 8003558:	080036ab 	.word	0x080036ab

0800355c <HAL_SAI_Receive_DMA>:
{
 800355c:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 800355e:	2a00      	cmp	r2, #0
 8003560:	bf18      	it	ne
 8003562:	2900      	cmpne	r1, #0
 8003564:	d04c      	beq.n	8003600 <HAL_SAI_Receive_DMA+0xa4>
 8003566:	4604      	mov	r4, r0
 8003568:	4613      	mov	r3, r2
  if(hsai->State == HAL_SAI_STATE_READY)
 800356a:	f894 507d 	ldrb.w	r5, [r4, #125]	@ 0x7d
 800356e:	b2ed      	uxtb	r5, r5
 8003570:	2d01      	cmp	r5, #1
 8003572:	d148      	bne.n	8003606 <HAL_SAI_Receive_DMA+0xaa>
    __HAL_LOCK(hsai);
 8003574:	f894 207c 	ldrb.w	r2, [r4, #124]	@ 0x7c
 8003578:	2a01      	cmp	r2, #1
 800357a:	d046      	beq.n	800360a <HAL_SAI_Receive_DMA+0xae>
 800357c:	2201      	movs	r2, #1
 800357e:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->pBuffPtr = pData;
 8003582:	6661      	str	r1, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 8003584:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 8003588:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800358c:	2300      	movs	r3, #0
 800358e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003592:	2222      	movs	r2, #34	@ 0x22
 8003594:	f884 207d 	strb.w	r2, [r4, #125]	@ 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003598:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800359a:	491d      	ldr	r1, [pc, #116]	@ (8003610 <HAL_SAI_Receive_DMA+0xb4>)
 800359c:	6411      	str	r1, [r2, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800359e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80035a0:	491c      	ldr	r1, [pc, #112]	@ (8003614 <HAL_SAI_Receive_DMA+0xb8>)
 80035a2:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80035a4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80035a6:	491c      	ldr	r1, [pc, #112]	@ (8003618 <HAL_SAI_Receive_DMA+0xbc>)
 80035a8:	64d1      	str	r1, [r2, #76]	@ 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 80035aa:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80035ac:	6513      	str	r3, [r2, #80]	@ 0x50
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80035ae:	6821      	ldr	r1, [r4, #0]
 80035b0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 80035b4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80035b6:	311c      	adds	r1, #28
 80035b8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80035ba:	f7fd f9b5 	bl	8000928 <HAL_DMA_Start_IT>
 80035be:	4606      	mov	r6, r0
 80035c0:	b118      	cbz	r0, 80035ca <HAL_SAI_Receive_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 80035c2:	2300      	movs	r3, #0
 80035c4:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
      return  HAL_ERROR;
 80035c8:	e01b      	b.n	8003602 <HAL_SAI_Receive_DMA+0xa6>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80035d2:	d103      	bne.n	80035dc <HAL_SAI_Receive_DMA+0x80>
      __HAL_SAI_ENABLE(hsai);
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80035da:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80035dc:	2100      	movs	r1, #0
 80035de:	4620      	mov	r0, r4
 80035e0:	f7ff fdba 	bl	8003158 <SAI_InterruptFlag>
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	6913      	ldr	r3, [r2, #16]
 80035e8:	4303      	orrs	r3, r0
 80035ea:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f4:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 80035f6:	2300      	movs	r3, #0
 80035f8:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80035fc:	4635      	mov	r5, r6
 80035fe:	e000      	b.n	8003602 <HAL_SAI_Receive_DMA+0xa6>
    return  HAL_ERROR;
 8003600:	2501      	movs	r5, #1
}
 8003602:	4628      	mov	r0, r5
 8003604:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003606:	2502      	movs	r5, #2
 8003608:	e7fb      	b.n	8003602 <HAL_SAI_Receive_DMA+0xa6>
    __HAL_LOCK(hsai);
 800360a:	2502      	movs	r5, #2
 800360c:	e7f9      	b.n	8003602 <HAL_SAI_Receive_DMA+0xa6>
 800360e:	bf00      	nop
 8003610:	0800369f 	.word	0x0800369f
 8003614:	08003663 	.word	0x08003663
 8003618:	080036ab 	.word	0x080036ab

0800361c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800361c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 800361e:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003628:	d112      	bne.n	8003650 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 800362a:	2100      	movs	r1, #0
 800362c:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003630:	6822      	ldr	r2, [r4, #0]
 8003632:	6813      	ldr	r3, [r2, #0]
 8003634:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003638:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800363a:	4620      	mov	r0, r4
 800363c:	f7ff fd8c 	bl	8003158 <SAI_InterruptFlag>
 8003640:	6822      	ldr	r2, [r4, #0]
 8003642:	6913      	ldr	r3, [r2, #16]
 8003644:	ea23 0300 	bic.w	r3, r3, r0
 8003648:	6113      	str	r3, [r2, #16]

    hsai->State= HAL_SAI_STATE_READY;
 800364a:	2301      	movs	r3, #1
 800364c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8003650:	4620      	mov	r0, r4
 8003652:	f008 fb2b 	bl	800bcac <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003656:	bd10      	pop	{r4, pc}

08003658 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003658:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800365a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800365c:	f008 faf2 	bl	800bc44 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003660:	bd08      	pop	{r3, pc}

08003662 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003662:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003664:	6b84      	ldr	r4, [r0, #56]	@ 0x38

 if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8003666:	6803      	ldr	r3, [r0, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800366e:	d112      	bne.n	8003696 <SAI_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003670:	6822      	ldr	r2, [r4, #0]
 8003672:	6813      	ldr	r3, [r2, #0]
 8003674:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003678:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 800367a:	2100      	movs	r1, #0
 800367c:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003680:	4620      	mov	r0, r4
 8003682:	f7ff fd69 	bl	8003158 <SAI_InterruptFlag>
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	6913      	ldr	r3, [r2, #16]
 800368a:	ea23 0300 	bic.w	r3, r3, r0
 800368e:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8003690:	2301      	movs	r3, #1
 8003692:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8003696:	4620      	mov	r0, r4
 8003698:	f008 faa6 	bl	800bbe8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800369c:	bd10      	pop	{r4, pc}

0800369e <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800369e:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80036a0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80036a2:	f008 fa73 	bl	800bb8c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80036a6:	bd08      	pop	{r3, pc}

080036a8 <HAL_SAI_ErrorCallback>:
}
 80036a8:	4770      	bx	lr

080036aa <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80036aa:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036ac:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80036ae:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80036b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036b6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80036ba:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80036bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d007      	beq.n	80036d2 <SAI_DMAError+0x28>
 80036c2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80036c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d003      	beq.n	80036d2 <SAI_DMAError+0x28>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7ff ffec 	bl	80036a8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80036d0:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	6813      	ldr	r3, [r2, #0]
 80036d6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80036da:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 80036dc:	4620      	mov	r0, r4
 80036de:	f7ff fd55 	bl	800318c <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    hsai->XferCount = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 80036ee:	e7ec      	b.n	80036ca <SAI_DMAError+0x20>

080036f0 <EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE>:
#ifdef HAL_SPDIFRX_MODULE_ENABLED
#if defined (SPDIFRX)

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
void EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE() {} // JSB
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_SPDIFRX_Init>:
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d030      	beq.n	800375a <HAL_SPDIFRX_Init+0x66>
{
 80036f8:	b510      	push	{r4, lr}
 80036fa:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80036fc:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
 8003700:	b333      	cbz	r3, 8003750 <HAL_SPDIFRX_Init+0x5c>
    HAL_SPDIFRX_MspInit(hspdif);
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8003702:	2302      	movs	r3, #2
 8003704:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8003708:	6822      	ldr	r2, [r4, #0]
 800370a:	6813      	ldr	r3, [r2, #0]
 800370c:	f023 0303 	bic.w	r3, r3, #3
 8003710:	6013      	str	r3, [r2, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8003712:	6821      	ldr	r1, [r4, #0]
 8003714:	680b      	ldr	r3, [r1, #0]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8003716:	4a12      	ldr	r2, [pc, #72]	@ (8003760 <HAL_SPDIFRX_Init+0x6c>)
 8003718:	401a      	ands	r2, r3
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800371a:	69a3      	ldr	r3, [r4, #24]
             hspdif->Init.InputSelection |
 800371c:	6860      	ldr	r0, [r4, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800371e:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8003720:	68a0      	ldr	r0, [r4, #8]
             hspdif->Init.InputSelection |
 8003722:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 8003724:	68e0      	ldr	r0, [r4, #12]
             hspdif->Init.Retries |
 8003726:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 8003728:	6920      	ldr	r0, [r4, #16]
             hspdif->Init.WaitForActivity |
 800372a:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 800372c:	6960      	ldr	r0, [r4, #20]
             hspdif->Init.ChannelSelection |
 800372e:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 8003730:	69e0      	ldr	r0, [r4, #28]
             hspdif->Init.DataFormat |
 8003732:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 8003734:	6a20      	ldr	r0, [r4, #32]
             hspdif->Init.PreambleTypeMask |
 8003736:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 8003738:	6a60      	ldr	r0, [r4, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800373a:	4303      	orrs	r3, r0
             hspdif->Init.ParityErrorMask
 800373c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800373e:	4303      	orrs	r3, r0
  tmpreg |= (hspdif->Init.StereoMode |
 8003740:	4313      	orrs	r3, r2
             );


  hspdif->Instance->CR = tmpreg;
 8003742:	600b      	str	r3, [r1, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8003744:	2000      	movs	r0, #0
 8003746:	64a0      	str	r0, [r4, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003748:	2301      	movs	r3, #1
 800374a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45

  return HAL_OK;
}
 800374e:	bd10      	pop	{r4, pc}
    hspdif->Lock = HAL_UNLOCKED;
 8003750:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
    HAL_SPDIFRX_MspInit(hspdif);
 8003754:	f00a fe5c 	bl	800e410 <HAL_SPDIFRX_MspInit>
 8003758:	e7d3      	b.n	8003702 <HAL_SPDIFRX_Init+0xe>
    return HAL_ERROR;
 800375a:	2001      	movs	r0, #1
}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	fff88407 	.word	0xfff88407

08003764 <HAL_SPDIFRX_ReceiveDataFlow_DMA>:
  * @param pData a 32-bit pointer to the Receive data buffer.
  * @param Size number of data sample to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_ReceiveDataFlow_DMA(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData, uint16_t Size)
{
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	4604      	mov	r4, r0
  register uint32_t count = SPDIFRX_TIMEOUT_VALUE * (SystemCoreClock / 24U / 1000U);
 8003768:	4b50      	ldr	r3, [pc, #320]	@ (80038ac <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x148>)
 800376a:	681d      	ldr	r5, [r3, #0]
 800376c:	4b50      	ldr	r3, [pc, #320]	@ (80038b0 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x14c>)
 800376e:	fba3 3505 	umull	r3, r5, r3, r5
 8003772:	0a6d      	lsrs	r5, r5, #9
 8003774:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003778:	fb03 f505 	mul.w	r5, r3, r5

  const HAL_SPDIFRX_StateTypeDef tempState = hspdif->State;
 800377c:	f890 0045 	ldrb.w	r0, [r0, #69]	@ 0x45

  if((pData == NULL) || (Size == 0U))
 8003780:	2a00      	cmp	r2, #0
 8003782:	bf18      	it	ne
 8003784:	2900      	cmpne	r1, #0
 8003786:	f000 808b 	beq.w	80038a0 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13c>
 800378a:	b2c0      	uxtb	r0, r0
 800378c:	4613      	mov	r3, r2
  {
    return  HAL_ERROR;
  }

  if((tempState == HAL_SPDIFRX_STATE_READY) || (tempState == HAL_SPDIFRX_STATE_BUSY_CX))
 800378e:	2804      	cmp	r0, #4
 8003790:	bf18      	it	ne
 8003792:	2801      	cmpne	r0, #1
 8003794:	f040 8086 	bne.w	80038a4 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x140>
  {
    /* Process Locked */
    __HAL_LOCK(hspdif);
 8003798:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	2a01      	cmp	r2, #1
 80037a0:	f000 8082 	beq.w	80038a8 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x144>
 80037a4:	2201      	movs	r2, #1
 80037a6:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44

    hspdif->pRxBuffPtr = pData;
 80037aa:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hspdif->RxXferSize = Size;
 80037ac:	86a3      	strh	r3, [r4, #52]	@ 0x34
    hspdif->RxXferCount = Size;
 80037ae:	86e3      	strh	r3, [r4, #54]	@ 0x36

    hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80037b0:	2200      	movs	r2, #0
 80037b2:	64a2      	str	r2, [r4, #72]	@ 0x48
    hspdif->State = HAL_SPDIFRX_STATE_BUSY_RX;
 80037b4:	2203      	movs	r2, #3
 80037b6:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45

    /* Set the SPDIFRX Rx DMA Half transfer complete callback */
    hspdif->hdmaDrRx->XferHalfCpltCallback = SPDIFRX_DMARxHalfCplt;
 80037ba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80037bc:	493d      	ldr	r1, [pc, #244]	@ (80038b4 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x150>)
 80037be:	6411      	str	r1, [r2, #64]	@ 0x40

    /* Set the SPDIFRX Rx DMA transfer complete callback */
    hspdif->hdmaDrRx->XferCpltCallback = SPDIFRX_DMARxCplt;
 80037c0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80037c2:	493d      	ldr	r1, [pc, #244]	@ (80038b8 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x154>)
 80037c4:	63d1      	str	r1, [r2, #60]	@ 0x3c

    /* Set the DMA error callback */
    hspdif->hdmaDrRx->XferErrorCallback = SPDIFRX_DMAError;
 80037c6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80037c8:	493c      	ldr	r1, [pc, #240]	@ (80038bc <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x158>)
 80037ca:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Enable the DMA request */
    if(HAL_DMA_Start_IT(hspdif->hdmaDrRx, (uint32_t)&hspdif->Instance->DR, (uint32_t)hspdif->pRxBuffPtr, Size) != HAL_OK)
 80037cc:	6821      	ldr	r1, [r4, #0]
 80037ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80037d0:	3110      	adds	r1, #16
 80037d2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80037d4:	f7fd f8a8 	bl	8000928 <HAL_DMA_Start_IT>
 80037d8:	b9f8      	cbnz	r0, 800381a <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xb6>

      return HAL_ERROR;
    }

    /* Enable RXDMAEN bit in SPDIFRX CR register for data flow reception*/
    hspdif->Instance->CR |= SPDIFRX_CR_RXDMAEN;
 80037da:	6822      	ldr	r2, [r4, #0]
 80037dc:	6813      	ldr	r3, [r2, #0]
 80037de:	f043 0304 	orr.w	r3, r3, #4
 80037e2:	6013      	str	r3, [r2, #0]

    if((SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != SPDIFRX_STATE_RCV)
 80037e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d00f      	beq.n	8003812 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xae>
    {
      /* Start synchronization */
      __HAL_SPDIFRX_SYNC(hspdif);
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	6813      	ldr	r3, [r2, #0]
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6013      	str	r3, [r2, #0]

      /* Wait until SYNCD flag is set */
      do
      {
        if (count == 0U)
 80037fc:	b1bd      	cbz	r5, 800382e <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xca>
          /* Process Unlocked */
          __HAL_UNLOCK(hspdif);

          return HAL_TIMEOUT;
        }
        count--;
 80037fe:	3d01      	subs	r5, #1
      } while (__HAL_SPDIFRX_GET_FLAG(hspdif, SPDIFRX_FLAG_SYNCD) == RESET);
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	f012 0f20 	tst.w	r2, #32
 8003808:	d0f8      	beq.n	80037fc <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x98>

      /* Start reception */
      __HAL_SPDIFRX_RCV(hspdif);
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	f042 0203 	orr.w	r2, r2, #3
 8003810:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 8003812:	2300      	movs	r3, #0
 8003814:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44

    return HAL_OK;
 8003818:	e043      	b.n	80038a2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
      hspdif->ErrorCode = HAL_SPDIFRX_ERROR_DMA;
 800381a:	2308      	movs	r3, #8
 800381c:	64a3      	str	r3, [r4, #72]	@ 0x48
      hspdif->State = HAL_SPDIFRX_STATE_ERROR;
 800381e:	2307      	movs	r3, #7
 8003820:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
      __HAL_UNLOCK(hspdif);
 8003824:	2300      	movs	r3, #0
 8003826:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 800382a:	2001      	movs	r0, #1
 800382c:	e039      	b.n	80038a2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_RXNE);
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	6853      	ldr	r3, [r2, #4]
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 800383c:	6822      	ldr	r2, [r4, #0]
 800383e:	6853      	ldr	r3, [r2, #4]
 8003840:	f023 0302 	bic.w	r3, r3, #2
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	0c1b      	lsrs	r3, r3, #16
 8003848:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_PERRIE);
 800384a:	6822      	ldr	r2, [r4, #0]
 800384c:	6853      	ldr	r3, [r2, #4]
 800384e:	f023 0304 	bic.w	r3, r3, #4
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE);
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	6853      	ldr	r3, [r2, #4]
 800385c:	f023 0308 	bic.w	r3, r3, #8
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SBLKIE);
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	6853      	ldr	r3, [r2, #4]
 800386a:	f023 0310 	bic.w	r3, r3, #16
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SYNCDIE);
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	6853      	ldr	r3, [r2, #4]
 8003878:	f023 0320 	bic.w	r3, r3, #32
 800387c:	041b      	lsls	r3, r3, #16
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_IFEIE);
 8003882:	6822      	ldr	r2, [r4, #0]
 8003884:	6853      	ldr	r3, [r2, #4]
 8003886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	6053      	str	r3, [r2, #4]
          hspdif->State= HAL_SPDIFRX_STATE_READY;
 8003890:	2301      	movs	r3, #1
 8003892:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
          __HAL_UNLOCK(hspdif);
 8003896:	2300      	movs	r3, #0
 8003898:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
          return HAL_TIMEOUT;
 800389c:	2003      	movs	r0, #3
 800389e:	e000      	b.n	80038a2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
    return  HAL_ERROR;
 80038a0:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80038a4:	2002      	movs	r0, #2
 80038a6:	e7fc      	b.n	80038a2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
    __HAL_LOCK(hspdif);
 80038a8:	2002      	movs	r0, #2
 80038aa:	e7fa      	b.n	80038a2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
 80038ac:	200003fc 	.word	0x200003fc
 80038b0:	057619f1 	.word	0x057619f1
 80038b4:	0800392d 	.word	0x0800392d
 80038b8:	08003939 	.word	0x08003939
 80038bc:	080039eb 	.word	0x080039eb

080038c0 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort>:
  {
    return HAL_BUSY;
  }
}

void EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort() {} // JSB
 80038c0:	4770      	bx	lr

080038c2 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR>:
void EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR() {} // JSB
 80038c2:	4770      	bx	lr

080038c4 <HAL_SPDIFRX_DMAStop>:
  * @brief stop the audio stream receive from the Media.
  * @param hspdif SPDIFRX handle
  * @retval None
  */
HAL_StatusTypeDef HAL_SPDIFRX_DMAStop(SPDIFRX_HandleTypeDef *hspdif)
{
 80038c4:	b538      	push	{r3, r4, r5, lr}
  /* Process Locked */
  __HAL_LOCK(hspdif);
 80038c6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d02a      	beq.n	8003926 <HAL_SPDIFRX_DMAStop+0x62>
 80038d0:	4604      	mov	r4, r0
 80038d2:	2501      	movs	r5, #1
 80038d4:	f880 5044 	strb.w	r5, [r0, #68]	@ 0x44

  // JSB fix. 20191115. Otherwise the L&R channels can become reversed if the signal is interrupted.
  HAL_DMA_Abort(hspdif->hdmaDrRx); // JSB added!!!
 80038d8:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80038da:	f7fd f85f 	bl	800099c <HAL_DMA_Abort>
  HAL_DMA_Abort(hspdif->hdmaCsRx); // JSB added!!!
 80038de:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80038e0:	f7fd f85c 	bl	800099c <HAL_DMA_Abort>

  /* Disable the SPDIFRX DMA requests */
  // hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN); // *** JSB: Cube bug!!! This unintentionally clears bits 4+ of CR. ***
  hspdif->Instance->CR &= (uint32_t)(~SPDIFRX_CR_RXDMAEN); // *** JSB: Cube bug fix!!! ***
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	6813      	ldr	r3, [r2, #0]
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	6013      	str	r3, [r2, #0]
  // hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_CBDMAEN); // *** JSB: Cube bug!!! This unintentionally clears bits 4+ of CR. ***
  hspdif->Instance->CR &= (uint32_t)(~SPDIFRX_CR_CBDMAEN); // *** JSB: Cube bug fix!!! ***
 80038ee:	6822      	ldr	r2, [r4, #0]
 80038f0:	6813      	ldr	r3, [r2, #0]
 80038f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038f6:	6013      	str	r3, [r2, #0]

  /* Disable the SPDIFRX DMA channel */
  __HAL_DMA_DISABLE(hspdif->hdmaDrRx);
 80038f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(hspdif->hdmaCsRx);
 8003904:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	6813      	ldr	r3, [r2, #0]
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6013      	str	r3, [r2, #0]

  /* Disable SPDIFRX peripheral */
  __HAL_SPDIFRX_IDLE(hspdif);
 8003910:	6822      	ldr	r2, [r4, #0]
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	f023 0303 	bic.w	r3, r3, #3
 8003918:	6013      	str	r3, [r2, #0]

  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800391a:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45

  /* Process Unlocked */
  __HAL_UNLOCK(hspdif);
 800391e:	2000      	movs	r0, #0
 8003920:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44

  return HAL_OK;
}
 8003924:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspdif);
 8003926:	2002      	movs	r0, #2
 8003928:	e7fc      	b.n	8003924 <HAL_SPDIFRX_DMAStop+0x60>

0800392a <HAL_SPDIFRX_RxHalfCpltCallback>:
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 800392a:	4770      	bx	lr

0800392c <SPDIFRX_DMARxHalfCplt>:
  * @brief DMA SPDIFRX receive process (Data flow) half complete callback
  * @param hdma DMA handle
  * @retval None
  */
static void SPDIFRX_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800392c:	b508      	push	{r3, lr}
  SPDIFRX_HandleTypeDef* hspdif = (SPDIFRX_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
  hspdif->RxHalfCpltCallback(hspdif);
#else
  HAL_SPDIFRX_RxHalfCpltCallback(hspdif);
 800392e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003930:	f7ff fffb 	bl	800392a <HAL_SPDIFRX_RxHalfCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
}
 8003934:	bd08      	pop	{r3, pc}

08003936 <HAL_SPDIFRX_RxCpltCallback>:
}
 8003936:	4770      	bx	lr

08003938 <SPDIFRX_DMARxCplt>:
{
 8003938:	b508      	push	{r3, lr}
 800393a:	4603      	mov	r3, r0
  SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800393c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if(hdma->Init.Mode != DMA_CIRCULAR)
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003944:	d00b      	beq.n	800395e <SPDIFRX_DMARxCplt+0x26>
    hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN);
 8003946:	6802      	ldr	r2, [r0, #0]
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	f023 0304 	bic.w	r3, r3, #4
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	6013      	str	r3, [r2, #0]
    hspdif->RxXferCount = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	86c3      	strh	r3, [r0, #54]	@ 0x36
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003958:	2301      	movs	r3, #1
 800395a:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
  HAL_SPDIFRX_RxCpltCallback(hspdif);
 800395e:	f7ff ffea 	bl	8003936 <HAL_SPDIFRX_RxCpltCallback>
}
 8003962:	bd08      	pop	{r3, pc}

08003964 <SPDIFRX_ReceiveDataFlow_IT>:
  * @brief Receive an amount of data (Data Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 8003964:	b508      	push	{r3, lr}
  /* Receive data */
  (*hspdif->pRxBuffPtr) = hspdif->Instance->DR;
 8003966:	6802      	ldr	r2, [r0, #0]
 8003968:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800396a:	6912      	ldr	r2, [r2, #16]
 800396c:	601a      	str	r2, [r3, #0]
  hspdif->pRxBuffPtr++;
 800396e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003970:	3304      	adds	r3, #4
 8003972:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspdif->RxXferCount--;
 8003974:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29b      	uxth	r3, r3
 800397c:	86c3      	strh	r3, [r0, #54]	@ 0x36

  if(hspdif->RxXferCount == 0U)
 800397e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003980:	b29b      	uxth	r3, r3
 8003982:	b103      	cbz	r3, 8003986 <SPDIFRX_ReceiveDataFlow_IT+0x22>
  hspdif->RxCpltCallback(hspdif);
#else
  HAL_SPDIFRX_RxCpltCallback(hspdif);
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 8003984:	bd08      	pop	{r3, pc}
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE | SPDIFRX_IT_PERRIE | SPDIFRX_IT_RXNE);
 8003986:	6802      	ldr	r2, [r0, #0]
 8003988:	6853      	ldr	r3, [r2, #4]
 800398a:	f023 030d 	bic.w	r3, r3, #13
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	6053      	str	r3, [r2, #4]
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003994:	2301      	movs	r3, #1
 8003996:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
    __HAL_UNLOCK(hspdif);
 800399a:	2300      	movs	r3, #0
 800399c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
  HAL_SPDIFRX_RxCpltCallback(hspdif);
 80039a0:	f7ff ffc9 	bl	8003936 <HAL_SPDIFRX_RxCpltCallback>
}
 80039a4:	e7ee      	b.n	8003984 <SPDIFRX_ReceiveDataFlow_IT+0x20>

080039a6 <HAL_SPDIFRX_CxCpltCallback>:
}
 80039a6:	4770      	bx	lr

080039a8 <SPDIFRX_ReceiveControlFlow_IT>:
  * @brief Receive an amount of data (Control Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 80039a8:	b508      	push	{r3, lr}
  /* Receive data */
  (*hspdif->pCsBuffPtr) = hspdif->Instance->CSR;
 80039aa:	6802      	ldr	r2, [r0, #0]
 80039ac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80039ae:	6952      	ldr	r2, [r2, #20]
 80039b0:	601a      	str	r2, [r3, #0]
  hspdif->pCsBuffPtr++;
 80039b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80039b4:	3304      	adds	r3, #4
 80039b6:	6303      	str	r3, [r0, #48]	@ 0x30
  hspdif->CsXferCount--;
 80039b8:	8f43      	ldrh	r3, [r0, #58]	@ 0x3a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29b      	uxth	r3, r3
 80039c0:	8743      	strh	r3, [r0, #58]	@ 0x3a

  if(hspdif->CsXferCount == 0U)
 80039c2:	8f43      	ldrh	r3, [r0, #58]	@ 0x3a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	b103      	cbz	r3, 80039ca <SPDIFRX_ReceiveControlFlow_IT+0x22>
  hspdif->CxCpltCallback(hspdif);
#else
  HAL_SPDIFRX_CxCpltCallback(hspdif);
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 80039c8:	bd08      	pop	{r3, pc}
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 80039ca:	6802      	ldr	r2, [r0, #0]
 80039cc:	6853      	ldr	r3, [r2, #4]
 80039ce:	f023 0302 	bic.w	r3, r3, #2
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	6053      	str	r3, [r2, #4]
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 80039d8:	2301      	movs	r3, #1
 80039da:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
    __HAL_UNLOCK(hspdif);
 80039de:	2300      	movs	r3, #0
 80039e0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
  HAL_SPDIFRX_CxCpltCallback(hspdif);
 80039e4:	f7ff ffdf 	bl	80039a6 <HAL_SPDIFRX_CxCpltCallback>
}
 80039e8:	e7ee      	b.n	80039c8 <SPDIFRX_ReceiveControlFlow_IT+0x20>

080039ea <SPDIFRX_DMAError>:
{
 80039ea:	b508      	push	{r3, lr}
  SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039ec:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspdif->Instance->CR &= (uint16_t)(~(SPDIFRX_CR_RXDMAEN | SPDIFRX_CR_CBDMAEN));
 80039ee:	6802      	ldr	r2, [r0, #0]
 80039f0:	6813      	ldr	r3, [r2, #0]
 80039f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039f6:	f023 0304 	bic.w	r3, r3, #4
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	6013      	str	r3, [r2, #0]
  hspdif->RxXferCount = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	86c3      	strh	r3, [r0, #54]	@ 0x36
  hspdif->State= HAL_SPDIFRX_STATE_READY;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
  hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_DMA;
 8003a0a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003a0c:	f043 0308 	orr.w	r3, r3, #8
 8003a10:	6483      	str	r3, [r0, #72]	@ 0x48
  HAL_SPDIFRX_ErrorCallback(hspdif);
 8003a12:	f005 f8c5 	bl	8008ba0 <HAL_SPDIFRX_ErrorCallback>
}
 8003a16:	bd08      	pop	{r3, pc}

08003a18 <HAL_SPDIFRX_IRQHandler>:
{
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4604      	mov	r4, r0
  uint32_t itFlag   = hspdif->Instance->SR;
 8003a1c:	6803      	ldr	r3, [r0, #0]
 8003a1e:	689d      	ldr	r5, [r3, #8]
  uint32_t itSource = hspdif->Instance->IMR;
 8003a20:	685e      	ldr	r6, [r3, #4]
  if(((itFlag & SPDIFRX_FLAG_RXNE) == SPDIFRX_FLAG_RXNE) && ((itSource &  SPDIFRX_IT_RXNE) == SPDIFRX_IT_RXNE))
 8003a22:	f015 0f01 	tst.w	r5, #1
 8003a26:	d002      	beq.n	8003a2e <HAL_SPDIFRX_IRQHandler+0x16>
 8003a28:	f016 0f01 	tst.w	r6, #1
 8003a2c:	d112      	bne.n	8003a54 <HAL_SPDIFRX_IRQHandler+0x3c>
  if(((itFlag & SPDIFRX_FLAG_CSRNE) == SPDIFRX_FLAG_CSRNE) && ((itSource &  SPDIFRX_IT_CSRNE) == SPDIFRX_IT_CSRNE))
 8003a2e:	f015 0f02 	tst.w	r5, #2
 8003a32:	d002      	beq.n	8003a3a <HAL_SPDIFRX_IRQHandler+0x22>
 8003a34:	f016 0f02 	tst.w	r6, #2
 8003a38:	d111      	bne.n	8003a5e <HAL_SPDIFRX_IRQHandler+0x46>
  if(((itFlag & SPDIFRX_FLAG_OVR) == SPDIFRX_FLAG_OVR) && ((itSource &  SPDIFRX_IT_OVRIE) == SPDIFRX_IT_OVRIE))
 8003a3a:	f015 0f08 	tst.w	r5, #8
 8003a3e:	d002      	beq.n	8003a46 <HAL_SPDIFRX_IRQHandler+0x2e>
 8003a40:	f016 0f08 	tst.w	r6, #8
 8003a44:	d112      	bne.n	8003a6c <HAL_SPDIFRX_IRQHandler+0x54>
  if(((itFlag & SPDIFRX_FLAG_PERR) == SPDIFRX_FLAG_PERR) && ((itSource &  SPDIFRX_IT_PERRIE) == SPDIFRX_IT_PERRIE))
 8003a46:	f015 0f04 	tst.w	r5, #4
 8003a4a:	d002      	beq.n	8003a52 <HAL_SPDIFRX_IRQHandler+0x3a>
 8003a4c:	f016 0f04 	tst.w	r6, #4
 8003a50:	d117      	bne.n	8003a82 <HAL_SPDIFRX_IRQHandler+0x6a>
}
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 8003a54:	2201      	movs	r2, #1
 8003a56:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveDataFlow_IT(hspdif);
 8003a58:	f7ff ff84 	bl	8003964 <SPDIFRX_ReceiveDataFlow_IT>
 8003a5c:	e7e7      	b.n	8003a2e <HAL_SPDIFRX_IRQHandler+0x16>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_CSRNE);
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	2202      	movs	r2, #2
 8003a62:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveControlFlow_IT(hspdif);
 8003a64:	4620      	mov	r0, r4
 8003a66:	f7ff ff9f 	bl	80039a8 <SPDIFRX_ReceiveControlFlow_IT>
 8003a6a:	e7e6      	b.n	8003a3a <HAL_SPDIFRX_IRQHandler+0x22>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_OVRIE);
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	2208      	movs	r2, #8
 8003a70:	60da      	str	r2, [r3, #12]
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
 8003a72:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	64a3      	str	r3, [r4, #72]	@ 0x48
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f005 f890 	bl	8008ba0 <HAL_SPDIFRX_ErrorCallback>
 8003a80:	e7e1      	b.n	8003a46 <HAL_SPDIFRX_IRQHandler+0x2e>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_PERRIE);
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	2204      	movs	r2, #4
 8003a86:	60da      	str	r2, [r3, #12]
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
 8003a88:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	64a3      	str	r3, [r4, #72]	@ 0x48
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f005 f886 	bl	8008ba0 <HAL_SPDIFRX_ErrorCallback>
}
 8003a94:	e7dd      	b.n	8003a52 <HAL_SPDIFRX_IRQHandler+0x3a>

08003a96 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9a:	4606      	mov	r6, r0
 8003a9c:	4688      	mov	r8, r1
 8003a9e:	4617      	mov	r7, r2
 8003aa0:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aa2:	6834      	ldr	r4, [r6, #0]
 8003aa4:	68a4      	ldr	r4, [r4, #8]
 8003aa6:	ea38 0404 	bics.w	r4, r8, r4
 8003aaa:	bf0c      	ite	eq
 8003aac:	2401      	moveq	r4, #1
 8003aae:	2400      	movne	r4, #0
 8003ab0:	42bc      	cmp	r4, r7
 8003ab2:	d037      	beq.n	8003b24 <SPI_WaitFlagStateUntilTimeout+0x8e>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ab4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003ab8:	d0f3      	beq.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003aba:	f7fc fdd7 	bl	800066c <HAL_GetTick>
 8003abe:	9b06      	ldr	r3, [sp, #24]
 8003ac0:	1ac0      	subs	r0, r0, r3
 8003ac2:	42a8      	cmp	r0, r5
 8003ac4:	d201      	bcs.n	8003aca <SPI_WaitFlagStateUntilTimeout+0x34>
 8003ac6:	2d00      	cmp	r5, #0
 8003ac8:	d1eb      	bne.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aca:	6832      	ldr	r2, [r6, #0]
 8003acc:	6853      	ldr	r3, [r2, #4]
 8003ace:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003ad2:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad4:	6873      	ldr	r3, [r6, #4]
 8003ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ada:	d00b      	beq.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x5e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003adc:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae2:	d014      	beq.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0x78>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f886 305d 	strb.w	r3, [r6, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aea:	2300      	movs	r3, #0
 8003aec:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003af0:	2003      	movs	r0, #3
 8003af2:	e018      	b.n	8003b26 <SPI_WaitFlagStateUntilTimeout+0x90>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af4:	68b3      	ldr	r3, [r6, #8]
 8003af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003afa:	bf18      	it	ne
 8003afc:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8003b00:	d1ec      	bne.n	8003adc <SPI_WaitFlagStateUntilTimeout+0x46>
          __HAL_SPI_DISABLE(hspi);
 8003b02:	6832      	ldr	r2, [r6, #0]
 8003b04:	6813      	ldr	r3, [r2, #0]
 8003b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	e7e6      	b.n	8003adc <SPI_WaitFlagStateUntilTimeout+0x46>
          SPI_RESET_CRC(hspi);
 8003b0e:	6832      	ldr	r2, [r6, #0]
 8003b10:	6813      	ldr	r3, [r2, #0]
 8003b12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	6832      	ldr	r2, [r6, #0]
 8003b1a:	6813      	ldr	r3, [r2, #0]
 8003b1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e7df      	b.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x4e>
      }
    }
  }

  return HAL_OK;
 8003b24:	2000      	movs	r0, #0
}
 8003b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b2a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b2e:	4681      	mov	r9, r0
 8003b30:	460f      	mov	r7, r1
 8003b32:	4616      	mov	r6, r2
 8003b34:	4698      	mov	r8, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8003b36:	e002      	b.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b38:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003b3c:	d10d      	bne.n	8003b5a <SPI_WaitFifoStateUntilTimeout+0x30>
  while ((hspi->Instance->SR & Fifo) != State)
 8003b3e:	f8d9 5000 	ldr.w	r5, [r9]
 8003b42:	68ac      	ldr	r4, [r5, #8]
 8003b44:	ea04 0c07 	and.w	ip, r4, r7
 8003b48:	45b4      	cmp	ip, r6
 8003b4a:	d043      	beq.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b4c:	f5b7 6fc0 	cmp.w	r7, #1536	@ 0x600
 8003b50:	bf08      	it	eq
 8003b52:	2e00      	cmpeq	r6, #0
 8003b54:	d1f0      	bne.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003b56:	7b2b      	ldrb	r3, [r5, #12]
 8003b58:	e7ee      	b.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003b5a:	f7fc fd87 	bl	800066c <HAL_GetTick>
 8003b5e:	9b08      	ldr	r3, [sp, #32]
 8003b60:	1ac0      	subs	r0, r0, r3
 8003b62:	4540      	cmp	r0, r8
 8003b64:	d202      	bcs.n	8003b6c <SPI_WaitFifoStateUntilTimeout+0x42>
 8003b66:	f1b8 0f00 	cmp.w	r8, #0
 8003b6a:	d1e8      	bne.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8003b70:	6853      	ldr	r3, [r2, #4]
 8003b72:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003b76:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003b7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b80:	d00c      	beq.n	8003b9c <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b82:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8003b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b8a:	d016      	beq.n	8003bba <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f889 305d 	strb.w	r3, [r9, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b92:	2300      	movs	r3, #0
 8003b94:	f889 305c 	strb.w	r3, [r9, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003b98:	2003      	movs	r0, #3
 8003b9a:	e01c      	b.n	8003bd6 <SPI_WaitFifoStateUntilTimeout+0xac>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b9c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba4:	bf18      	it	ne
 8003ba6:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8003baa:	d1ea      	bne.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 8003bac:	f8d9 2000 	ldr.w	r2, [r9]
 8003bb0:	6813      	ldr	r3, [r2, #0]
 8003bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	e7e3      	b.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 8003bba:	f8d9 2000 	ldr.w	r2, [r9]
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	f8d9 2000 	ldr.w	r2, [r9]
 8003bca:	6813      	ldr	r3, [r2, #0]
 8003bcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e7db      	b.n	8003b8c <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 8003bd4:	2000      	movs	r0, #0
}
 8003bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003bda <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bda:	b570      	push	{r4, r5, r6, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	4604      	mov	r4, r0
 8003be0:	460d      	mov	r5, r1
 8003be2:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003be4:	9200      	str	r2, [sp, #0]
 8003be6:	460b      	mov	r3, r1
 8003be8:	2200      	movs	r2, #0
 8003bea:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003bee:	f7ff ff9c 	bl	8003b2a <SPI_WaitFifoStateUntilTimeout>
 8003bf2:	b9b0      	cbnz	r0, 8003c22 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf4:	9600      	str	r6, [sp, #0]
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2180      	movs	r1, #128	@ 0x80
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f7ff ff4a 	bl	8003a96 <SPI_WaitFlagStateUntilTimeout>
 8003c02:	b9a8      	cbnz	r0, 8003c30 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c04:	9600      	str	r6, [sp, #0]
 8003c06:	462b      	mov	r3, r5
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7ff ff8b 	bl	8003b2a <SPI_WaitFifoStateUntilTimeout>
 8003c14:	b150      	cbz	r0, 8003c2c <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c16:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003c18:	f043 0320 	orr.w	r3, r3, #32
 8003c1c:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c1e:	2003      	movs	r0, #3
 8003c20:	e004      	b.n	8003c2c <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c22:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003c24:	f043 0320 	orr.w	r3, r3, #32
 8003c28:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c2a:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c30:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003c32:	f043 0320 	orr.w	r3, r3, #32
 8003c36:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c38:	2003      	movs	r0, #3
 8003c3a:	e7f7      	b.n	8003c2c <SPI_EndRxTxTransaction+0x52>

08003c3c <SPI_EndRxTransaction>:
{
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	4604      	mov	r4, r0
 8003c42:	460d      	mov	r5, r1
 8003c44:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c46:	6843      	ldr	r3, [r0, #4]
 8003c48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c4c:	d00d      	beq.n	8003c6a <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c4e:	9600      	str	r6, [sp, #0]
 8003c50:	462b      	mov	r3, r5
 8003c52:	2200      	movs	r2, #0
 8003c54:	2180      	movs	r1, #128	@ 0x80
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff ff1d 	bl	8003a96 <SPI_WaitFlagStateUntilTimeout>
 8003c5c:	b990      	cbnz	r0, 8003c84 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5e:	6863      	ldr	r3, [r4, #4]
 8003c60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c64:	d014      	beq.n	8003c90 <SPI_EndRxTransaction+0x54>
}
 8003c66:	b002      	add	sp, #8
 8003c68:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6a:	6883      	ldr	r3, [r0, #8]
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c70:	bf18      	it	ne
 8003c72:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8003c76:	d1ea      	bne.n	8003c4e <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8003c78:	6802      	ldr	r2, [r0, #0]
 8003c7a:	6813      	ldr	r3, [r2, #0]
 8003c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e7e4      	b.n	8003c4e <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c84:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003c86:	f043 0320 	orr.w	r3, r3, #32
 8003c8a:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c8c:	2003      	movs	r0, #3
 8003c8e:	e7ea      	b.n	8003c66 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c90:	68a3      	ldr	r3, [r4, #8]
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c96:	bf18      	it	ne
 8003c98:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8003c9c:	d1e3      	bne.n	8003c66 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c9e:	9600      	str	r6, [sp, #0]
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7ff ff3e 	bl	8003b2a <SPI_WaitFifoStateUntilTimeout>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d0d9      	beq.n	8003c66 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003cb4:	f043 0320 	orr.w	r3, r3, #32
 8003cb8:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003cba:	2003      	movs	r0, #3
 8003cbc:	e7d3      	b.n	8003c66 <SPI_EndRxTransaction+0x2a>

08003cbe <HAL_SPI_Init>:
  if (hspi == NULL)
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d058      	beq.n	8003d74 <HAL_SPI_Init+0xb6>
{
 8003cc2:	b510      	push	{r4, lr}
 8003cc4:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	6283      	str	r3, [r0, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cca:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d045      	beq.n	8003d5e <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003cd8:	6822      	ldr	r2, [r4, #0]
 8003cda:	6813      	ldr	r3, [r2, #0]
 8003cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ce0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ce2:	68e3      	ldr	r3, [r4, #12]
 8003ce4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ce8:	d93e      	bls.n	8003d68 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cea:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cec:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003cf0:	bf18      	it	ne
 8003cf2:	f5b3 6fe0 	cmpne.w	r3, #1792	@ 0x700
 8003cf6:	d001      	beq.n	8003cfc <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003cfc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003cfe:	b921      	cbnz	r1, 8003d0a <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d04:	d933      	bls.n	8003d6e <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003d06:	2302      	movs	r3, #2
 8003d08:	6323      	str	r3, [r4, #48]	@ 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003d0a:	6863      	ldr	r3, [r4, #4]
 8003d0c:	68a1      	ldr	r1, [r4, #8]
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	6921      	ldr	r1, [r4, #16]
 8003d12:	430b      	orrs	r3, r1
 8003d14:	6961      	ldr	r1, [r4, #20]
 8003d16:	430b      	orrs	r3, r1
 8003d18:	69a1      	ldr	r1, [r4, #24]
 8003d1a:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	69e1      	ldr	r1, [r4, #28]
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6a21      	ldr	r1, [r4, #32]
 8003d26:	430b      	orrs	r3, r1
 8003d28:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003d2a:	6821      	ldr	r1, [r4, #0]
 8003d2c:	4303      	orrs	r3, r0
 8003d2e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003d30:	8b63      	ldrh	r3, [r4, #26]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	68e1      	ldr	r1, [r4, #12]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6821      	ldr	r1, [r4, #0]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	69d3      	ldr	r3, [r2, #28]
 8003d4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d50:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d52:	2000      	movs	r0, #0
 8003d54:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8003d5c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003d5e:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8003d62:	f00a fc5b 	bl	800e61c <HAL_SPI_MspInit>
 8003d66:	e7b4      	b.n	8003cd2 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d6c:	e7be      	b.n	8003cec <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d72:	e7ca      	b.n	8003d0a <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
}
 8003d76:	4770      	bx	lr

08003d78 <HAL_SPI_Transmit>:
{
 8003d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003d80:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	f000 80f0 	beq.w	8003f6a <HAL_SPI_Transmit+0x1f2>
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	4689      	mov	r9, r1
 8003d8e:	4690      	mov	r8, r2
 8003d90:	2301      	movs	r3, #1
 8003d92:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8003d96:	f7fc fc69 	bl	800066c <HAL_GetTick>
 8003d9a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003d9c:	f894 605d 	ldrb.w	r6, [r4, #93]	@ 0x5d
 8003da0:	b2f6      	uxtb	r6, r6
 8003da2:	2e01      	cmp	r6, #1
 8003da4:	f040 80ce 	bne.w	8003f44 <HAL_SPI_Transmit+0x1cc>
  if ((pData == NULL) || (Size == 0U))
 8003da8:	f1b8 0f00 	cmp.w	r8, #0
 8003dac:	bf18      	it	ne
 8003dae:	f1b9 0f00 	cmpne.w	r9, #0
 8003db2:	f000 80c8 	beq.w	8003f46 <HAL_SPI_Transmit+0x1ce>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003db6:	2303      	movs	r3, #3
 8003db8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dc0:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003dc4:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003dc8:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dcc:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003dce:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003dd2:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003dd6:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003dd8:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dda:	68a3      	ldr	r3, [r4, #8]
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de0:	d01e      	beq.n	8003e20 <HAL_SPI_Transmit+0xa8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003dea:	d103      	bne.n	8003df4 <HAL_SPI_Transmit+0x7c>
    __HAL_SPI_ENABLE(hspi);
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003df2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003df4:	68e3      	ldr	r3, [r4, #12]
 8003df6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dfa:	d93d      	bls.n	8003e78 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfc:	6863      	ldr	r3, [r4, #4]
 8003dfe:	b113      	cbz	r3, 8003e06 <HAL_SPI_Transmit+0x8e>
 8003e00:	f1b8 0f01 	cmp.w	r8, #1
 8003e04:	d11e      	bne.n	8003e44 <HAL_SPI_Transmit+0xcc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e06:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	8812      	ldrh	r2, [r2, #0]
 8003e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e10:	3302      	adds	r3, #2
 8003e12:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e14:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003e1e:	e011      	b.n	8003e44 <HAL_SPI_Transmit+0xcc>
    SPI_1LINE_TX(hspi);
 8003e20:	6822      	ldr	r2, [r4, #0]
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e7da      	b.n	8003de2 <HAL_SPI_Transmit+0x6a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e2c:	f7fc fc1e 	bl	800066c <HAL_GetTick>
 8003e30:	1bc0      	subs	r0, r0, r7
 8003e32:	42a8      	cmp	r0, r5
 8003e34:	d303      	bcc.n	8003e3e <HAL_SPI_Transmit+0xc6>
 8003e36:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003e3a:	f040 808e 	bne.w	8003f5a <HAL_SPI_Transmit+0x1e2>
 8003e3e:	2d00      	cmp	r5, #0
 8003e40:	f000 808d 	beq.w	8003f5e <HAL_SPI_Transmit+0x1e6>
    while (hspi->TxXferCount > 0U)
 8003e44:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d066      	beq.n	8003f1a <HAL_SPI_Transmit+0x1a2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	f012 0f02 	tst.w	r2, #2
 8003e54:	d0ea      	beq.n	8003e2c <HAL_SPI_Transmit+0xb4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e56:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e58:	8812      	ldrh	r2, [r2, #0]
 8003e5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e5c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e5e:	3302      	adds	r3, #2
 8003e60:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e62:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8003e66:	fa1f fc8c 	uxth.w	ip, ip
 8003e6a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003e6e:	fa1f fc8c 	uxth.w	ip, ip
 8003e72:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8003e76:	e7e5      	b.n	8003e44 <HAL_SPI_Transmit+0xcc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e78:	6863      	ldr	r3, [r4, #4]
 8003e7a:	b113      	cbz	r3, 8003e82 <HAL_SPI_Transmit+0x10a>
 8003e7c:	f1b8 0f01 	cmp.w	r8, #1
 8003e80:	d133      	bne.n	8003eea <HAL_SPI_Transmit+0x172>
      if (hspi->TxXferCount > 1U)
 8003e82:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d90c      	bls.n	8003ea4 <HAL_SPI_Transmit+0x12c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e8a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	8812      	ldrh	r2, [r2, #0]
 8003e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e92:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e94:	3302      	adds	r3, #2
 8003e96:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003e98:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b02      	subs	r3, #2
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003ea2:	e022      	b.n	8003eea <HAL_SPI_Transmit+0x172>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003eac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003eae:	3301      	adds	r3, #1
 8003eb0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003eb2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003ebc:	e015      	b.n	8003eea <HAL_SPI_Transmit+0x172>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ebe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003ec4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003eca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003ed4:	e009      	b.n	8003eea <HAL_SPI_Transmit+0x172>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed6:	f7fc fbc9 	bl	800066c <HAL_GetTick>
 8003eda:	1bc0      	subs	r0, r0, r7
 8003edc:	42a8      	cmp	r0, r5
 8003ede:	d302      	bcc.n	8003ee6 <HAL_SPI_Transmit+0x16e>
 8003ee0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003ee4:	d13d      	bne.n	8003f62 <HAL_SPI_Transmit+0x1ea>
 8003ee6:	2d00      	cmp	r5, #0
 8003ee8:	d03d      	beq.n	8003f66 <HAL_SPI_Transmit+0x1ee>
    while (hspi->TxXferCount > 0U)
 8003eea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	b1a3      	cbz	r3, 8003f1a <HAL_SPI_Transmit+0x1a2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ef0:	6822      	ldr	r2, [r4, #0]
 8003ef2:	6893      	ldr	r3, [r2, #8]
 8003ef4:	f013 0f02 	tst.w	r3, #2
 8003ef8:	d0ed      	beq.n	8003ed6 <HAL_SPI_Transmit+0x15e>
        if (hspi->TxXferCount > 1U)
 8003efa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d9dd      	bls.n	8003ebe <HAL_SPI_Transmit+0x146>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f02:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f0e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b02      	subs	r3, #2
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003f18:	e7e7      	b.n	8003eea <HAL_SPI_Transmit+0x172>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f1a:	463a      	mov	r2, r7
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7ff fe5b 	bl	8003bda <SPI_EndRxTxTransaction>
 8003f24:	b108      	cbz	r0, 8003f2a <HAL_SPI_Transmit+0x1b2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f26:	2320      	movs	r3, #32
 8003f28:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f2a:	68a3      	ldr	r3, [r4, #8]
 8003f2c:	b933      	cbnz	r3, 8003f3c <HAL_SPI_Transmit+0x1c4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	9201      	str	r2, [sp, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f3c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003f3e:	b913      	cbnz	r3, 8003f46 <HAL_SPI_Transmit+0x1ce>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f40:	2600      	movs	r6, #0
 8003f42:	e000      	b.n	8003f46 <HAL_SPI_Transmit+0x1ce>
    errorcode = HAL_BUSY;
 8003f44:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8003f52:	4630      	mov	r0, r6
 8003f54:	b003      	add	sp, #12
 8003f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003f5a:	2603      	movs	r6, #3
 8003f5c:	e7f3      	b.n	8003f46 <HAL_SPI_Transmit+0x1ce>
 8003f5e:	2603      	movs	r6, #3
 8003f60:	e7f1      	b.n	8003f46 <HAL_SPI_Transmit+0x1ce>
          errorcode = HAL_TIMEOUT;
 8003f62:	2603      	movs	r6, #3
 8003f64:	e7ef      	b.n	8003f46 <HAL_SPI_Transmit+0x1ce>
 8003f66:	2603      	movs	r6, #3
 8003f68:	e7ed      	b.n	8003f46 <HAL_SPI_Transmit+0x1ce>
  __HAL_LOCK(hspi);
 8003f6a:	2602      	movs	r6, #2
 8003f6c:	e7f1      	b.n	8003f52 <HAL_SPI_Transmit+0x1da>

08003f6e <HAL_SPI_TransmitReceive>:
{
 8003f6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f72:	461f      	mov	r7, r3
 8003f74:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003f76:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	f000 8161 	beq.w	8004242 <HAL_SPI_TransmitReceive+0x2d4>
 8003f80:	4604      	mov	r4, r0
 8003f82:	4688      	mov	r8, r1
 8003f84:	4691      	mov	r9, r2
 8003f86:	2301      	movs	r3, #1
 8003f88:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8003f8c:	f7fc fb6e 	bl	800066c <HAL_GetTick>
 8003f90:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003f92:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8003f96:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003f98:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_SPI_TransmitReceive+0x46>
 8003f9e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003fa2:	f040 8137 	bne.w	8004214 <HAL_SPI_TransmitReceive+0x2a6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fa6:	68a2      	ldr	r2, [r4, #8]
 8003fa8:	2a00      	cmp	r2, #0
 8003faa:	f040 813c 	bne.w	8004226 <HAL_SPI_TransmitReceive+0x2b8>
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	f040 813b 	bne.w	800422a <HAL_SPI_TransmitReceive+0x2bc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fb4:	f1b9 0f00 	cmp.w	r9, #0
 8003fb8:	bf18      	it	ne
 8003fba:	f1b8 0f00 	cmpne.w	r8, #0
 8003fbe:	f000 8136 	beq.w	800422e <HAL_SPI_TransmitReceive+0x2c0>
 8003fc2:	2f00      	cmp	r7, #0
 8003fc4:	f000 8135 	beq.w	8004232 <HAL_SPI_TransmitReceive+0x2c4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fc8:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fdc:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003fe0:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003fe4:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fe8:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003fec:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003fee:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 8003ff0:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003ff2:	6523      	str	r3, [r4, #80]	@ 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ff4:	68e3      	ldr	r3, [r4, #12]
 8003ff6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ffa:	d801      	bhi.n	8004000 <HAL_SPI_TransmitReceive+0x92>
 8003ffc:	2f01      	cmp	r7, #1
 8003ffe:	d923      	bls.n	8004048 <HAL_SPI_TransmitReceive+0xda>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004000:	6822      	ldr	r2, [r4, #0]
 8004002:	6853      	ldr	r3, [r2, #4]
 8004004:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004008:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004012:	d103      	bne.n	800401c <HAL_SPI_TransmitReceive+0xae>
    __HAL_SPI_ENABLE(hspi);
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800401a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800401c:	68e3      	ldr	r3, [r4, #12]
 800401e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004022:	d958      	bls.n	80040d6 <HAL_SPI_TransmitReceive+0x168>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004024:	6863      	ldr	r3, [r4, #4]
 8004026:	b10b      	cbz	r3, 800402c <HAL_SPI_TransmitReceive+0xbe>
 8004028:	2f01      	cmp	r7, #1
 800402a:	d10b      	bne.n	8004044 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800402c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	8812      	ldrh	r2, [r2, #0]
 8004032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004034:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004036:	3302      	adds	r3, #2
 8004038:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800403a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29b      	uxth	r3, r3
 8004042:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004044:	2701      	movs	r7, #1
 8004046:	e031      	b.n	80040ac <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	6853      	ldr	r3, [r2, #4]
 800404c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004050:	6053      	str	r3, [r2, #4]
 8004052:	e7da      	b.n	800400a <HAL_SPI_TransmitReceive+0x9c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004054:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004056:	8812      	ldrh	r2, [r2, #0]
 8004058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800405a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800405c:	3302      	adds	r3, #2
 800405e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004060:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800406a:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	f012 0f01 	tst.w	r2, #1
 8004074:	d011      	beq.n	800409a <HAL_SPI_TransmitReceive+0x12c>
 8004076:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800407a:	b292      	uxth	r2, r2
 800407c:	b16a      	cbz	r2, 800409a <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004082:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004084:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004086:	3302      	adds	r3, #2
 8004088:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800408a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29b      	uxth	r3, r3
 8004094:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8004098:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800409a:	f7fc fae7 	bl	800066c <HAL_GetTick>
 800409e:	1b83      	subs	r3, r0, r6
 80040a0:	42ab      	cmp	r3, r5
 80040a2:	d303      	bcc.n	80040ac <HAL_SPI_TransmitReceive+0x13e>
 80040a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80040a8:	f040 80c5 	bne.w	8004236 <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	b92b      	cbnz	r3, 80040be <HAL_SPI_TransmitReceive+0x150>
 80040b2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80a1 	beq.w	8004200 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	f012 0f02 	tst.w	r2, #2
 80040c6:	d0d1      	beq.n	800406c <HAL_SPI_TransmitReceive+0xfe>
 80040c8:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80040ca:	b292      	uxth	r2, r2
 80040cc:	2a00      	cmp	r2, #0
 80040ce:	d0cd      	beq.n	800406c <HAL_SPI_TransmitReceive+0xfe>
 80040d0:	2f00      	cmp	r7, #0
 80040d2:	d0cb      	beq.n	800406c <HAL_SPI_TransmitReceive+0xfe>
 80040d4:	e7be      	b.n	8004054 <HAL_SPI_TransmitReceive+0xe6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d6:	6863      	ldr	r3, [r4, #4]
 80040d8:	b10b      	cbz	r3, 80040de <HAL_SPI_TransmitReceive+0x170>
 80040da:	2f01      	cmp	r7, #1
 80040dc:	d10f      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x190>
      if (hspi->TxXferCount > 1U)
 80040de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d90d      	bls.n	8004102 <HAL_SPI_TransmitReceive+0x194>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	8812      	ldrh	r2, [r2, #0]
 80040ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80040f0:	3302      	adds	r3, #2
 80040f2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80040f4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b02      	subs	r3, #2
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80040fe:	2701      	movs	r7, #1
 8004100:	e049      	b.n	8004196 <HAL_SPI_TransmitReceive+0x228>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004102:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	7812      	ldrb	r2, [r2, #0]
 8004108:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800410a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800410c:	3301      	adds	r3, #1
 800410e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004110:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29b      	uxth	r3, r3
 8004118:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800411a:	e7f0      	b.n	80040fe <HAL_SPI_TransmitReceive+0x190>
        if (hspi->TxXferCount > 1U)
 800411c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800411e:	b292      	uxth	r2, r2
 8004120:	2a01      	cmp	r2, #1
 8004122:	d90c      	bls.n	800413e <HAL_SPI_TransmitReceive+0x1d0>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004124:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004126:	8812      	ldrh	r2, [r2, #0]
 8004128:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800412a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800412c:	3302      	adds	r3, #2
 800412e:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004130:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b02      	subs	r3, #2
 8004136:	b29b      	uxth	r3, r3
 8004138:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800413a:	2700      	movs	r7, #0
 800413c:	e03d      	b.n	80041ba <HAL_SPI_TransmitReceive+0x24c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800413e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8004144:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004146:	3301      	adds	r3, #1
 8004148:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800414a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29b      	uxth	r3, r3
 8004152:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8004154:	2700      	movs	r7, #0
 8004156:	e030      	b.n	80041ba <HAL_SPI_TransmitReceive+0x24c>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	6853      	ldr	r3, [r2, #4]
 800415c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004160:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8004162:	2701      	movs	r7, #1
 8004164:	e00d      	b.n	8004182 <HAL_SPI_TransmitReceive+0x214>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004166:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004168:	7b1b      	ldrb	r3, [r3, #12]
 800416a:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800416c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800416e:	3301      	adds	r3, #1
 8004170:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8004172:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8004180:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004182:	f7fc fa73 	bl	800066c <HAL_GetTick>
 8004186:	1b80      	subs	r0, r0, r6
 8004188:	42a8      	cmp	r0, r5
 800418a:	d302      	bcc.n	8004192 <HAL_SPI_TransmitReceive+0x224>
 800418c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004190:	d153      	bne.n	800423a <HAL_SPI_TransmitReceive+0x2cc>
 8004192:	2d00      	cmp	r5, #0
 8004194:	d053      	beq.n	800423e <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004196:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	b923      	cbnz	r3, 80041a6 <HAL_SPI_TransmitReceive+0x238>
 800419c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02c      	beq.n	8004200 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	f012 0f02 	tst.w	r2, #2
 80041ae:	d004      	beq.n	80041ba <HAL_SPI_TransmitReceive+0x24c>
 80041b0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80041b2:	b292      	uxth	r2, r2
 80041b4:	b10a      	cbz	r2, 80041ba <HAL_SPI_TransmitReceive+0x24c>
 80041b6:	2f00      	cmp	r7, #0
 80041b8:	d1b0      	bne.n	800411c <HAL_SPI_TransmitReceive+0x1ae>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	f012 0f01 	tst.w	r2, #1
 80041c2:	d0de      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x214>
 80041c4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80041c8:	b292      	uxth	r2, r2
 80041ca:	2a00      	cmp	r2, #0
 80041cc:	d0d9      	beq.n	8004182 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 80041ce:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80041d2:	b292      	uxth	r2, r2
 80041d4:	2a01      	cmp	r2, #1
 80041d6:	d9c6      	bls.n	8004166 <HAL_SPI_TransmitReceive+0x1f8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041e0:	3302      	adds	r3, #2
 80041e2:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80041e4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b02      	subs	r3, #2
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80041f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d9ad      	bls.n	8004158 <HAL_SPI_TransmitReceive+0x1ea>
        txallowed = 1U;
 80041fc:	2701      	movs	r7, #1
 80041fe:	e7c0      	b.n	8004182 <HAL_SPI_TransmitReceive+0x214>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004200:	4632      	mov	r2, r6
 8004202:	4629      	mov	r1, r5
 8004204:	4620      	mov	r0, r4
 8004206:	f7ff fce8 	bl	8003bda <SPI_EndRxTxTransaction>
 800420a:	b120      	cbz	r0, 8004216 <HAL_SPI_TransmitReceive+0x2a8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800420c:	2320      	movs	r3, #32
 800420e:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8004210:	2001      	movs	r0, #1
 8004212:	e000      	b.n	8004216 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_BUSY;
 8004214:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004216:	2301      	movs	r3, #1
 8004218:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800421c:	2300      	movs	r3, #0
 800421e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8004222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8004226:	2002      	movs	r0, #2
 8004228:	e7f5      	b.n	8004216 <HAL_SPI_TransmitReceive+0x2a8>
 800422a:	2002      	movs	r0, #2
 800422c:	e7f3      	b.n	8004216 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
 800422e:	2001      	movs	r0, #1
 8004230:	e7f1      	b.n	8004216 <HAL_SPI_TransmitReceive+0x2a8>
 8004232:	2001      	movs	r0, #1
 8004234:	e7ef      	b.n	8004216 <HAL_SPI_TransmitReceive+0x2a8>
        errorcode = HAL_TIMEOUT;
 8004236:	2003      	movs	r0, #3
 8004238:	e7ed      	b.n	8004216 <HAL_SPI_TransmitReceive+0x2a8>
        errorcode = HAL_TIMEOUT;
 800423a:	2003      	movs	r0, #3
 800423c:	e7eb      	b.n	8004216 <HAL_SPI_TransmitReceive+0x2a8>
 800423e:	2003      	movs	r0, #3
 8004240:	e7e9      	b.n	8004216 <HAL_SPI_TransmitReceive+0x2a8>
  __HAL_LOCK(hspi);
 8004242:	2002      	movs	r0, #2
 8004244:	e7ed      	b.n	8004222 <HAL_SPI_TransmitReceive+0x2b4>

08004246 <HAL_SPI_Receive>:
{
 8004246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800424a:	b083      	sub	sp, #12
 800424c:	4604      	mov	r4, r0
 800424e:	4688      	mov	r8, r1
 8004250:	4691      	mov	r9, r2
 8004252:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004254:	6840      	ldr	r0, [r0, #4]
 8004256:	f5b0 7f82 	cmp.w	r0, #260	@ 0x104
 800425a:	d042      	beq.n	80042e2 <HAL_SPI_Receive+0x9c>
  __HAL_LOCK(hspi);
 800425c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8004260:	2b01      	cmp	r3, #1
 8004262:	f000 80bd 	beq.w	80043e0 <HAL_SPI_Receive+0x19a>
 8004266:	2301      	movs	r3, #1
 8004268:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800426c:	f7fc f9fe 	bl	800066c <HAL_GetTick>
 8004270:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004272:	f894 605d 	ldrb.w	r6, [r4, #93]	@ 0x5d
 8004276:	b2f6      	uxtb	r6, r6
 8004278:	2e01      	cmp	r6, #1
 800427a:	f040 809e 	bne.w	80043ba <HAL_SPI_Receive+0x174>
  if ((pData == NULL) || (Size == 0U))
 800427e:	f1b9 0f00 	cmp.w	r9, #0
 8004282:	bf18      	it	ne
 8004284:	f1b8 0f00 	cmpne.w	r8, #0
 8004288:	f000 8098 	beq.w	80043bc <HAL_SPI_Receive+0x176>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800428c:	2304      	movs	r3, #4
 800428e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004292:	2300      	movs	r3, #0
 8004294:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004296:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800429a:	f8a4 9044 	strh.w	r9, [r4, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800429e:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042a2:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80042a4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80042a6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80042a8:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80042aa:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042ac:	68e3      	ldr	r3, [r4, #12]
 80042ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042b2:	d924      	bls.n	80042fe <HAL_SPI_Receive+0xb8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	6853      	ldr	r3, [r2, #4]
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042bc:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042be:	68a3      	ldr	r3, [r4, #8]
 80042c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c4:	d021      	beq.n	800430a <HAL_SPI_Receive+0xc4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80042ce:	d103      	bne.n	80042d8 <HAL_SPI_Receive+0x92>
    __HAL_SPI_ENABLE(hspi);
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042d6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80042d8:	68e3      	ldr	r3, [r4, #12]
 80042da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042de:	d924      	bls.n	800432a <HAL_SPI_Receive+0xe4>
 80042e0:	e045      	b.n	800436e <HAL_SPI_Receive+0x128>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042e2:	68a3      	ldr	r3, [r4, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1b9      	bne.n	800425c <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042e8:	2304      	movs	r3, #4
 80042ea:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042ee:	9500      	str	r5, [sp, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	460a      	mov	r2, r1
 80042f4:	4620      	mov	r0, r4
 80042f6:	f7ff fe3a 	bl	8003f6e <HAL_SPI_TransmitReceive>
 80042fa:	4606      	mov	r6, r0
 80042fc:	e064      	b.n	80043c8 <HAL_SPI_Receive+0x182>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	6853      	ldr	r3, [r2, #4]
 8004302:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004306:	6053      	str	r3, [r2, #4]
 8004308:	e7d9      	b.n	80042be <HAL_SPI_Receive+0x78>
    SPI_1LINE_RX(hspi);
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	6813      	ldr	r3, [r2, #0]
 800430e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e7d7      	b.n	80042c6 <HAL_SPI_Receive+0x80>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004316:	f7fc f9a9 	bl	800066c <HAL_GetTick>
 800431a:	1bc0      	subs	r0, r0, r7
 800431c:	42a8      	cmp	r0, r5
 800431e:	d302      	bcc.n	8004326 <HAL_SPI_Receive+0xe0>
 8004320:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004324:	d154      	bne.n	80043d0 <HAL_SPI_Receive+0x18a>
 8004326:	2d00      	cmp	r5, #0
 8004328:	d054      	beq.n	80043d4 <HAL_SPI_Receive+0x18e>
    while (hspi->RxXferCount > 0U)
 800432a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d036      	beq.n	80043a2 <HAL_SPI_Receive+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	f012 0f01 	tst.w	r2, #1
 800433c:	d0eb      	beq.n	8004316 <HAL_SPI_Receive+0xd0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800433e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004340:	7b1b      	ldrb	r3, [r3, #12]
 8004342:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004346:	3301      	adds	r3, #1
 8004348:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800434a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8004358:	e7e7      	b.n	800432a <HAL_SPI_Receive+0xe4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800435a:	f7fc f987 	bl	800066c <HAL_GetTick>
 800435e:	1bc0      	subs	r0, r0, r7
 8004360:	42a8      	cmp	r0, r5
 8004362:	d302      	bcc.n	800436a <HAL_SPI_Receive+0x124>
 8004364:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004368:	d136      	bne.n	80043d8 <HAL_SPI_Receive+0x192>
 800436a:	2d00      	cmp	r5, #0
 800436c:	d036      	beq.n	80043dc <HAL_SPI_Receive+0x196>
    while (hspi->RxXferCount > 0U)
 800436e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004372:	b29b      	uxth	r3, r3
 8004374:	b1ab      	cbz	r3, 80043a2 <HAL_SPI_Receive+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	f012 0f01 	tst.w	r2, #1
 800437e:	d0ec      	beq.n	800435a <HAL_SPI_Receive+0x114>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004384:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004386:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004388:	3302      	adds	r3, #2
 800438a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800438c:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
 8004390:	fa1f fc8c 	uxth.w	ip, ip
 8004394:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004398:	fa1f fc8c 	uxth.w	ip, ip
 800439c:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
 80043a0:	e7e5      	b.n	800436e <HAL_SPI_Receive+0x128>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a2:	463a      	mov	r2, r7
 80043a4:	4629      	mov	r1, r5
 80043a6:	4620      	mov	r0, r4
 80043a8:	f7ff fc48 	bl	8003c3c <SPI_EndRxTransaction>
 80043ac:	b108      	cbz	r0, 80043b2 <HAL_SPI_Receive+0x16c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ae:	2320      	movs	r3, #32
 80043b0:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043b2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80043b4:	b913      	cbnz	r3, 80043bc <HAL_SPI_Receive+0x176>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043b6:	2600      	movs	r6, #0
 80043b8:	e000      	b.n	80043bc <HAL_SPI_Receive+0x176>
    errorcode = HAL_BUSY;
 80043ba:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80043bc:	2301      	movs	r3, #1
 80043be:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80043c2:	2300      	movs	r3, #0
 80043c4:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80043c8:	4630      	mov	r0, r6
 80043ca:	b003      	add	sp, #12
 80043cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80043d0:	2603      	movs	r6, #3
 80043d2:	e7f3      	b.n	80043bc <HAL_SPI_Receive+0x176>
 80043d4:	2603      	movs	r6, #3
 80043d6:	e7f1      	b.n	80043bc <HAL_SPI_Receive+0x176>
          errorcode = HAL_TIMEOUT;
 80043d8:	2603      	movs	r6, #3
 80043da:	e7ef      	b.n	80043bc <HAL_SPI_Receive+0x176>
 80043dc:	2603      	movs	r6, #3
 80043de:	e7ed      	b.n	80043bc <HAL_SPI_Receive+0x176>
  __HAL_LOCK(hspi);
 80043e0:	2602      	movs	r6, #2
 80043e2:	e7f1      	b.n	80043c8 <HAL_SPI_Receive+0x182>

080043e4 <HAL_SPI_Transmit_DMA>:
{
 80043e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 80043e6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	f000 8087 	beq.w	80044fe <HAL_SPI_Transmit_DMA+0x11a>
 80043f0:	4604      	mov	r4, r0
 80043f2:	2301      	movs	r3, #1
 80043f4:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 80043f8:	f890 505d 	ldrb.w	r5, [r0, #93]	@ 0x5d
 80043fc:	b2ed      	uxtb	r5, r5
 80043fe:	429d      	cmp	r5, r3
 8004400:	d177      	bne.n	80044f2 <HAL_SPI_Transmit_DMA+0x10e>
  if ((pData == NULL) || (Size == 0U))
 8004402:	2a00      	cmp	r2, #0
 8004404:	bf18      	it	ne
 8004406:	2900      	cmpne	r1, #0
 8004408:	d074      	beq.n	80044f4 <HAL_SPI_Transmit_DMA+0x110>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800440a:	2303      	movs	r3, #3
 800440c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004410:	2300      	movs	r3, #0
 8004412:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004414:	6381      	str	r1, [r0, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004416:	8782      	strh	r2, [r0, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004418:	87c2      	strh	r2, [r0, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800441a:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800441c:	6503      	str	r3, [r0, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800441e:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004420:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004424:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004428:	6883      	ldr	r3, [r0, #8]
 800442a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800442e:	d039      	beq.n	80044a4 <HAL_SPI_Transmit_DMA+0xc0>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004430:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004432:	4a34      	ldr	r2, [pc, #208]	@ (8004504 <HAL_SPI_Transmit_DMA+0x120>)
 8004434:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004436:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004438:	4a33      	ldr	r2, [pc, #204]	@ (8004508 <HAL_SPI_Transmit_DMA+0x124>)
 800443a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800443c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800443e:	4a33      	ldr	r2, [pc, #204]	@ (800450c <HAL_SPI_Transmit_DMA+0x128>)
 8004440:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8004442:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004444:	2200      	movs	r2, #0
 8004446:	651a      	str	r2, [r3, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	6853      	ldr	r3, [r2, #4]
 800444c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004450:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004452:	68e3      	ldr	r3, [r4, #12]
 8004454:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004458:	d804      	bhi.n	8004464 <HAL_SPI_Transmit_DMA+0x80>
 800445a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004462:	d025      	beq.n	80044b0 <HAL_SPI_Transmit_DMA+0xcc>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004464:	6822      	ldr	r2, [r4, #0]
 8004466:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004468:	b29b      	uxth	r3, r3
 800446a:	320c      	adds	r2, #12
 800446c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800446e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004470:	f7fc fa5a 	bl	8000928 <HAL_DMA_Start_IT>
 8004474:	4601      	mov	r1, r0
 8004476:	2800      	cmp	r0, #0
 8004478:	d133      	bne.n	80044e2 <HAL_SPI_Transmit_DMA+0xfe>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004482:	d103      	bne.n	800448c <HAL_SPI_Transmit_DMA+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800448a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800448c:	6822      	ldr	r2, [r4, #0]
 800448e:	6853      	ldr	r3, [r2, #4]
 8004490:	f043 0320 	orr.w	r3, r3, #32
 8004494:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004496:	6822      	ldr	r2, [r4, #0]
 8004498:	6853      	ldr	r3, [r2, #4]
 800449a:	f043 0302 	orr.w	r3, r3, #2
 800449e:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044a0:	460d      	mov	r5, r1
 80044a2:	e027      	b.n	80044f4 <HAL_SPI_Transmit_DMA+0x110>
    SPI_1LINE_TX(hspi);
 80044a4:	6802      	ldr	r2, [r0, #0]
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e7bf      	b.n	8004430 <HAL_SPI_Transmit_DMA+0x4c>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80044b0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80044b2:	f013 0f01 	tst.w	r3, #1
 80044b6:	d109      	bne.n	80044cc <HAL_SPI_Transmit_DMA+0xe8>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80044b8:	6822      	ldr	r2, [r4, #0]
 80044ba:	6853      	ldr	r3, [r2, #4]
 80044bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044c0:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80044c2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80044c4:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80044c8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80044ca:	e7cb      	b.n	8004464 <HAL_SPI_Transmit_DMA+0x80>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80044cc:	6822      	ldr	r2, [r4, #0]
 80044ce:	6853      	ldr	r3, [r2, #4]
 80044d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044d4:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80044d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80044d8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80044dc:	3301      	adds	r3, #1
 80044de:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80044e0:	e7c0      	b.n	8004464 <HAL_SPI_Transmit_DMA+0x80>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80044e2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80044e4:	f043 0310 	orr.w	r3, r3, #16
 80044e8:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    goto error;
 80044f0:	e000      	b.n	80044f4 <HAL_SPI_Transmit_DMA+0x110>
    errorcode = HAL_BUSY;
 80044f2:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 80044f4:	2300      	movs	r3, #0
 80044f6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80044fa:	4628      	mov	r0, r5
 80044fc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 80044fe:	2502      	movs	r5, #2
 8004500:	e7fb      	b.n	80044fa <HAL_SPI_Transmit_DMA+0x116>
 8004502:	bf00      	nop
 8004504:	08004513 	.word	0x08004513
 8004508:	08004541 	.word	0x08004541
 800450c:	0800451f 	.word	0x0800451f

08004510 <HAL_SPI_TxHalfCpltCallback>:
}
 8004510:	4770      	bx	lr

08004512 <SPI_DMAHalfTransmitCplt>:
{
 8004512:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004514:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8004516:	f7ff fffb 	bl	8004510 <HAL_SPI_TxHalfCpltCallback>
}
 800451a:	bd08      	pop	{r3, pc}

0800451c <HAL_SPI_ErrorCallback>:
}
 800451c:	4770      	bx	lr

0800451e <SPI_DMAError>:
{
 800451e:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004520:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004522:	6802      	ldr	r2, [r0, #0]
 8004524:	6853      	ldr	r3, [r2, #4]
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800452c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800452e:	f043 0310 	orr.w	r3, r3, #16
 8004532:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004534:	2301      	movs	r3, #1
 8004536:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  HAL_SPI_ErrorCallback(hspi);
 800453a:	f7ff ffef 	bl	800451c <HAL_SPI_ErrorCallback>
}
 800453e:	bd08      	pop	{r3, pc}

08004540 <SPI_DMATransmitCplt>:
{
 8004540:	b530      	push	{r4, r5, lr}
 8004542:	b083      	sub	sp, #12
 8004544:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004546:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  tickstart = HAL_GetTick();
 8004548:	f7fc f890 	bl	800066c <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004554:	d123      	bne.n	800459e <SPI_DMATransmitCplt+0x5e>
 8004556:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004558:	6821      	ldr	r1, [r4, #0]
 800455a:	684b      	ldr	r3, [r1, #4]
 800455c:	f023 0320 	bic.w	r3, r3, #32
 8004560:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004562:	6821      	ldr	r1, [r4, #0]
 8004564:	684b      	ldr	r3, [r1, #4]
 8004566:	f023 0302 	bic.w	r3, r3, #2
 800456a:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800456c:	2164      	movs	r1, #100	@ 0x64
 800456e:	4620      	mov	r0, r4
 8004570:	f7ff fb33 	bl	8003bda <SPI_EndRxTxTransaction>
 8004574:	b118      	cbz	r0, 800457e <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004576:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004578:	f043 0320 	orr.w	r3, r3, #32
 800457c:	6623      	str	r3, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800457e:	68a3      	ldr	r3, [r4, #8]
 8004580:	b933      	cbnz	r3, 8004590 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	9201      	str	r2, [sp, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004594:	2301      	movs	r3, #1
 8004596:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800459a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800459c:	b923      	cbnz	r3, 80045a8 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 800459e:	4620      	mov	r0, r4
 80045a0:	f007 f83e 	bl	800b620 <HAL_SPI_TxCpltCallback>
}
 80045a4:	b003      	add	sp, #12
 80045a6:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7ff ffb7 	bl	800451c <HAL_SPI_ErrorCallback>
      return;
 80045ae:	e7f9      	b.n	80045a4 <SPI_DMATransmitCplt+0x64>

080045b0 <HAL_TIM_IC_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80045b0:	4770      	bx	lr

080045b2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045b4:	4770      	bx	lr

080045b6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80045b8:	4770      	bx	lr

080045ba <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ba:	4770      	bx	lr

080045bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80045bc:	4770      	bx	lr

080045be <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045be:	4770      	bx	lr

080045c0 <HAL_TIM_TriggerHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80045c0:	4770      	bx	lr

080045c2 <HAL_TIM_ErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80045c2:	4770      	bx	lr

080045c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045c4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c6:	6a03      	ldr	r3, [r0, #32]
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045d2:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045d4:	4b12      	ldr	r3, [pc, #72]	@ (8004620 <TIM_OC1_SetConfig+0x5c>)
 80045d6:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d8:	680d      	ldr	r5, [r1, #0]
 80045da:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045dc:	f024 0402 	bic.w	r4, r4, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045e0:	688b      	ldr	r3, [r1, #8]
 80045e2:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e4:	4c0f      	ldr	r4, [pc, #60]	@ (8004624 <TIM_OC1_SetConfig+0x60>)
 80045e6:	4e10      	ldr	r6, [pc, #64]	@ (8004628 <TIM_OC1_SetConfig+0x64>)
 80045e8:	42b0      	cmp	r0, r6
 80045ea:	bf18      	it	ne
 80045ec:	42a0      	cmpne	r0, r4
 80045ee:	bf0c      	ite	eq
 80045f0:	2401      	moveq	r4, #1
 80045f2:	2400      	movne	r4, #0
 80045f4:	d105      	bne.n	8004602 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045f6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045fa:	68ce      	ldr	r6, [r1, #12]
 80045fc:	431e      	orrs	r6, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045fe:	f026 0304 	bic.w	r3, r6, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004602:	b12c      	cbz	r4, 8004610 <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004604:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004608:	694c      	ldr	r4, [r1, #20]
 800460a:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800460c:	698a      	ldr	r2, [r1, #24]
 800460e:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004610:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004612:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004614:	684a      	ldr	r2, [r1, #4]
 8004616:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004618:	6203      	str	r3, [r0, #32]
}
 800461a:	bc70      	pop	{r4, r5, r6}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	fffeff8c 	.word	0xfffeff8c
 8004624:	40010000 	.word	0x40010000
 8004628:	40010400 	.word	0x40010400

0800462c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800462c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800462e:	6a03      	ldr	r3, [r0, #32]
 8004630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004634:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463a:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800463c:	4c14      	ldr	r4, [pc, #80]	@ (8004690 <TIM_OC3_SetConfig+0x64>)
 800463e:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004640:	680e      	ldr	r6, [r1, #0]
 8004642:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004644:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004648:	688c      	ldr	r4, [r1, #8]
 800464a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800464e:	4c11      	ldr	r4, [pc, #68]	@ (8004694 <TIM_OC3_SetConfig+0x68>)
 8004650:	4d11      	ldr	r5, [pc, #68]	@ (8004698 <TIM_OC3_SetConfig+0x6c>)
 8004652:	42a8      	cmp	r0, r5
 8004654:	bf18      	it	ne
 8004656:	42a0      	cmpne	r0, r4
 8004658:	bf0c      	ite	eq
 800465a:	2401      	moveq	r4, #1
 800465c:	2400      	movne	r4, #0
 800465e:	d106      	bne.n	800466e <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004660:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004664:	68cd      	ldr	r5, [r1, #12]
 8004666:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800466a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466e:	b13c      	cbz	r4, 8004680 <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004670:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004674:	694c      	ldr	r4, [r1, #20]
 8004676:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800467a:	698c      	ldr	r4, [r1, #24]
 800467c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004680:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004682:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004684:	684a      	ldr	r2, [r1, #4]
 8004686:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004688:	6203      	str	r3, [r0, #32]
}
 800468a:	bc70      	pop	{r4, r5, r6}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	fffeff8c 	.word	0xfffeff8c
 8004694:	40010000 	.word	0x40010000
 8004698:	40010400 	.word	0x40010400

0800469c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800469e:	6a03      	ldr	r3, [r0, #32]
 80046a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046aa:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046ac:	4a0d      	ldr	r2, [pc, #52]	@ (80046e4 <TIM_OC4_SetConfig+0x48>)
 80046ae:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b0:	680d      	ldr	r5, [r1, #0]
 80046b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046ba:	688d      	ldr	r5, [r1, #8]
 80046bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	4e09      	ldr	r6, [pc, #36]	@ (80046e8 <TIM_OC4_SetConfig+0x4c>)
 80046c2:	4d0a      	ldr	r5, [pc, #40]	@ (80046ec <TIM_OC4_SetConfig+0x50>)
 80046c4:	42a8      	cmp	r0, r5
 80046c6:	bf18      	it	ne
 80046c8:	42b0      	cmpne	r0, r6
 80046ca:	d104      	bne.n	80046d6 <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046cc:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046d0:	694d      	ldr	r5, [r1, #20]
 80046d2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046da:	684a      	ldr	r2, [r1, #4]
 80046dc:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046de:	6203      	str	r3, [r0, #32]
}
 80046e0:	bc70      	pop	{r4, r5, r6}
 80046e2:	4770      	bx	lr
 80046e4:	feff8cff 	.word	0xfeff8cff
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40010400 	.word	0x40010400

080046f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046f2:	6a03      	ldr	r3, [r0, #32]
 80046f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046f8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046fe:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004700:	4d0d      	ldr	r5, [pc, #52]	@ (8004738 <TIM_OC5_SetConfig+0x48>)
 8004702:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004704:	680a      	ldr	r2, [r1, #0]
 8004706:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004708:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800470c:	688d      	ldr	r5, [r1, #8]
 800470e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004712:	4e0a      	ldr	r6, [pc, #40]	@ (800473c <TIM_OC5_SetConfig+0x4c>)
 8004714:	4d0a      	ldr	r5, [pc, #40]	@ (8004740 <TIM_OC5_SetConfig+0x50>)
 8004716:	42a8      	cmp	r0, r5
 8004718:	bf18      	it	ne
 800471a:	42b0      	cmpne	r0, r6
 800471c:	d104      	bne.n	8004728 <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800471e:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004722:	694d      	ldr	r5, [r1, #20]
 8004724:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004728:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800472a:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800472c:	684a      	ldr	r2, [r1, #4]
 800472e:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004730:	6203      	str	r3, [r0, #32]
}
 8004732:	bc70      	pop	{r4, r5, r6}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	fffeff8f 	.word	0xfffeff8f
 800473c:	40010000 	.word	0x40010000
 8004740:	40010400 	.word	0x40010400

08004744 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004744:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004746:	6a03      	ldr	r3, [r0, #32]
 8004748:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800474c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004752:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004754:	4a0d      	ldr	r2, [pc, #52]	@ (800478c <TIM_OC6_SetConfig+0x48>)
 8004756:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004758:	680d      	ldr	r5, [r1, #0]
 800475a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800475e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004762:	688d      	ldr	r5, [r1, #8]
 8004764:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004768:	4e09      	ldr	r6, [pc, #36]	@ (8004790 <TIM_OC6_SetConfig+0x4c>)
 800476a:	4d0a      	ldr	r5, [pc, #40]	@ (8004794 <TIM_OC6_SetConfig+0x50>)
 800476c:	42a8      	cmp	r0, r5
 800476e:	bf18      	it	ne
 8004770:	42b0      	cmpne	r0, r6
 8004772:	d104      	bne.n	800477e <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004774:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004778:	694d      	ldr	r5, [r1, #20]
 800477a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004780:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004782:	684a      	ldr	r2, [r1, #4]
 8004784:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004786:	6203      	str	r3, [r0, #32]
}
 8004788:	bc70      	pop	{r4, r5, r6}
 800478a:	4770      	bx	lr
 800478c:	feff8fff 	.word	0xfeff8fff
 8004790:	40010000 	.word	0x40010000
 8004794:	40010400 	.word	0x40010400

08004798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004798:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800479a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479c:	6a04      	ldr	r4, [r0, #32]
 800479e:	f024 0401 	bic.w	r4, r4, #1
 80047a2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047a6:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047aa:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ae:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80047b2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047b4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80047b6:	6203      	str	r3, [r0, #32]
}
 80047b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047bc:	4770      	bx	lr

080047be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047be:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c0:	6a04      	ldr	r4, [r0, #32]
 80047c2:	f024 0410 	bic.w	r4, r4, #16
 80047c6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80047ca:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80047cc:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80047d0:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d4:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80047d8:	031b      	lsls	r3, r3, #12
 80047da:	b29b      	uxth	r3, r3
 80047dc:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e0:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80047e4:	0109      	lsls	r1, r1, #4
 80047e6:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 80047ea:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80047ee:	6201      	str	r1, [r0, #32]
}
 80047f0:	bc30      	pop	{r4, r5}
 80047f2:	4770      	bx	lr

080047f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f6:	6a03      	ldr	r3, [r0, #32]
 80047f8:	f023 0310 	bic.w	r3, r3, #16
 80047fc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fe:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004800:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004802:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004806:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800480a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800480e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004812:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004814:	6203      	str	r3, [r0, #32]
}
 8004816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800481a:	4770      	bx	lr

0800481c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800481c:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800481e:	6a04      	ldr	r4, [r0, #32]
 8004820:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8004824:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004826:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8004828:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800482a:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800482e:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004832:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	b2db      	uxtb	r3, r3
 800483a:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800483e:	f425 6520 	bic.w	r5, r5, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004842:	0209      	lsls	r1, r1, #8
 8004844:	f401 6120 	and.w	r1, r1, #2560	@ 0xa00
 8004848:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800484a:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 800484c:	6201      	str	r1, [r0, #32]
}
 800484e:	bc30      	pop	{r4, r5}
 8004850:	4770      	bx	lr

08004852 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004852:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004854:	6a04      	ldr	r4, [r0, #32]
 8004856:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 800485a:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800485c:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 800485e:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004860:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004864:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004868:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800486c:	031b      	lsls	r3, r3, #12
 800486e:	b29b      	uxth	r3, r3
 8004870:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004874:	f425 4520 	bic.w	r5, r5, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004878:	0309      	lsls	r1, r1, #12
 800487a:	f401 4120 	and.w	r1, r1, #40960	@ 0xa000
 800487e:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004880:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8004882:	6201      	str	r1, [r0, #32]
}
 8004884:	bc30      	pop	{r4, r5}
 8004886:	4770      	bx	lr

08004888 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004888:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800488a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800488e:	430b      	orrs	r3, r1
 8004890:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004894:	6083      	str	r3, [r0, #8]
}
 8004896:	4770      	bx	lr

08004898 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004898:	6802      	ldr	r2, [r0, #0]
 800489a:	68d3      	ldr	r3, [r2, #12]
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a2:	6802      	ldr	r2, [r0, #0]
 80048a4:	6891      	ldr	r1, [r2, #8]
 80048a6:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <HAL_TIM_Base_Start_IT+0x28>)
 80048a8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	bf18      	it	ne
 80048ae:	f5b3 3f80 	cmpne.w	r3, #65536	@ 0x10000
 80048b2:	d003      	beq.n	80048bc <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 80048b4:	6813      	ldr	r3, [r2, #0]
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6013      	str	r3, [r2, #0]
}
 80048bc:	2000      	movs	r0, #0
 80048be:	4770      	bx	lr
 80048c0:	00010007 	.word	0x00010007

080048c4 <HAL_TIM_IRQHandler>:
{
 80048c4:	b510      	push	{r4, lr}
 80048c6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048c8:	6803      	ldr	r3, [r0, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	f012 0f02 	tst.w	r2, #2
 80048d0:	d013      	beq.n	80048fa <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	f012 0f02 	tst.w	r2, #2
 80048d8:	d00f      	beq.n	80048fa <HAL_TIM_IRQHandler+0x36>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048da:	f06f 0202 	mvn.w	r2, #2
 80048de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e4:	6803      	ldr	r3, [r0, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f013 0f03 	tst.w	r3, #3
 80048ec:	f000 80a1 	beq.w	8004a32 <HAL_TIM_IRQHandler+0x16e>
          htim->IC_CaptureCallback(htim);
 80048f0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80048f4:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f6:	2300      	movs	r3, #0
 80048f8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	f012 0f04 	tst.w	r2, #4
 8004902:	d014      	beq.n	800492e <HAL_TIM_IRQHandler+0x6a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	f012 0f04 	tst.w	r2, #4
 800490a:	d010      	beq.n	800492e <HAL_TIM_IRQHandler+0x6a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800490c:	f06f 0204 	mvn.w	r2, #4
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004912:	2302      	movs	r3, #2
 8004914:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800491e:	f000 8090 	beq.w	8004a42 <HAL_TIM_IRQHandler+0x17e>
        htim->IC_CaptureCallback(htim);
 8004922:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8004926:	4620      	mov	r0, r4
 8004928:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	2300      	movs	r3, #0
 800492c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	f012 0f08 	tst.w	r2, #8
 8004936:	d013      	beq.n	8004960 <HAL_TIM_IRQHandler+0x9c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	f012 0f08 	tst.w	r2, #8
 800493e:	d00f      	beq.n	8004960 <HAL_TIM_IRQHandler+0x9c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004940:	f06f 0208 	mvn.w	r2, #8
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004946:	2304      	movs	r3, #4
 8004948:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f013 0f03 	tst.w	r3, #3
 8004952:	d07f      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x190>
        htim->IC_CaptureCallback(htim);
 8004954:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8004958:	4620      	mov	r0, r4
 800495a:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495c:	2300      	movs	r3, #0
 800495e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	f012 0f10 	tst.w	r2, #16
 8004968:	d013      	beq.n	8004992 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	f012 0f10 	tst.w	r2, #16
 8004970:	d00f      	beq.n	8004992 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004972:	f06f 0210 	mvn.w	r2, #16
 8004976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004978:	2308      	movs	r3, #8
 800497a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004984:	d06f      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x1a2>
        htim->IC_CaptureCallback(htim);
 8004986:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800498a:	4620      	mov	r0, r4
 800498c:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	2300      	movs	r3, #0
 8004990:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	f012 0f01 	tst.w	r2, #1
 800499a:	d009      	beq.n	80049b0 <HAL_TIM_IRQHandler+0xec>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	f012 0f01 	tst.w	r2, #1
 80049a2:	d005      	beq.n	80049b0 <HAL_TIM_IRQHandler+0xec>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049a4:	f06f 0201 	mvn.w	r2, #1
 80049a8:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 80049aa:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80049ac:	4620      	mov	r0, r4
 80049ae:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80049b8:	d00a      	beq.n	80049d0 <HAL_TIM_IRQHandler+0x10c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80049c0:	d006      	beq.n	80049d0 <HAL_TIM_IRQHandler+0x10c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049c2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049c6:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 80049c8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 80049cc:	4620      	mov	r0, r4
 80049ce:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80049d8:	d00a      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x12c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80049e0:	d006      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x12c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049e6:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 80049e8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 80049ec:	4620      	mov	r0, r4
 80049ee:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80049f8:	d00a      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x14c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004a00:	d006      	beq.n	8004a10 <HAL_TIM_IRQHandler+0x14c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a06:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8004a08:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	f012 0f20 	tst.w	r2, #32
 8004a18:	d00a      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x16c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	f012 0f20 	tst.w	r2, #32
 8004a20:	d006      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x16c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a22:	f06f 0220 	mvn.w	r2, #32
 8004a26:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 8004a28:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	4798      	blx	r3
}
 8004a30:	bd10      	pop	{r4, pc}
          htim->OC_DelayElapsedCallback(htim);
 8004a32:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8004a36:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004a38:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	4798      	blx	r3
 8004a40:	e759      	b.n	80048f6 <HAL_TIM_IRQHandler+0x32>
        htim->OC_DelayElapsedCallback(htim);
 8004a42:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004a46:	4620      	mov	r0, r4
 8004a48:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004a4a:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4798      	blx	r3
 8004a52:	e76a      	b.n	800492a <HAL_TIM_IRQHandler+0x66>
        htim->OC_DelayElapsedCallback(htim);
 8004a54:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004a5c:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8004a60:	4620      	mov	r0, r4
 8004a62:	4798      	blx	r3
 8004a64:	e77a      	b.n	800495c <HAL_TIM_IRQHandler+0x98>
        htim->OC_DelayElapsedCallback(htim);
 8004a66:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004a6e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8004a72:	4620      	mov	r0, r4
 8004a74:	4798      	blx	r3
 8004a76:	e78a      	b.n	800498e <HAL_TIM_IRQHandler+0xca>

08004a78 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8004a78:	290c      	cmp	r1, #12
 8004a7a:	d814      	bhi.n	8004aa6 <HAL_TIM_ReadCapturedValue+0x2e>
 8004a7c:	e8df f001 	tbb	[pc, r1]
 8004a80:	13131307 	.word	0x13131307
 8004a84:	1313130a 	.word	0x1313130a
 8004a88:	1313130d 	.word	0x1313130d
 8004a8c:	10          	.byte	0x10
 8004a8d:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8004a8e:	6803      	ldr	r3, [r0, #0]
 8004a90:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8004a92:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8004a94:	6803      	ldr	r3, [r0, #0]
 8004a96:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8004a98:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8004a9a:	6803      	ldr	r3, [r0, #0]
 8004a9c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8004a9e:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8004aa0:	6803      	ldr	r3, [r0, #0]
 8004aa2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 8004aa4:	4770      	bx	lr
  switch (Channel)
 8004aa6:	2000      	movs	r0, #0
}
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIM_RegisterCallback>:
  if (pCallback == NULL)
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	f000 80bc 	beq.w	8004c28 <HAL_TIM_RegisterCallback+0x17e>
{
 8004ab0:	b410      	push	{r4}
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4614      	mov	r4, r2
  __HAL_LOCK(htim);
 8004ab6:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004aba:	2a01      	cmp	r2, #1
 8004abc:	f000 80b6 	beq.w	8004c2c <HAL_TIM_RegisterCallback+0x182>
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (htim->State == HAL_TIM_STATE_READY)
 8004ac6:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
 8004aca:	b2c0      	uxtb	r0, r0
 8004acc:	4290      	cmp	r0, r2
 8004ace:	d012      	beq.n	8004af6 <HAL_TIM_RegisterCallback+0x4c>
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004ad0:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8004ad4:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 8004ad8:	2a00      	cmp	r2, #0
 8004ada:	f040 809c 	bne.w	8004c16 <HAL_TIM_RegisterCallback+0x16c>
    switch (CallbackID)
 8004ade:	290d      	cmp	r1, #13
 8004ae0:	f200 80a0 	bhi.w	8004c24 <HAL_TIM_RegisterCallback+0x17a>
 8004ae4:	e8df f001 	tbb	[pc, r1]
 8004ae8:	817f7d7a 	.word	0x817f7d7a
 8004aec:	89878583 	.word	0x89878583
 8004af0:	918f8d8b 	.word	0x918f8d8b
 8004af4:	9593      	.short	0x9593
    switch (CallbackID)
 8004af6:	291b      	cmp	r1, #27
 8004af8:	f200 808e 	bhi.w	8004c18 <HAL_TIM_RegisterCallback+0x16e>
 8004afc:	e8df f001 	tbb	[pc, r1]
 8004b00:	1714110e 	.word	0x1714110e
 8004b04:	23201d1a 	.word	0x23201d1a
 8004b08:	2f2c2926 	.word	0x2f2c2926
 8004b0c:	3b383532 	.word	0x3b383532
 8004b10:	4a46423e 	.word	0x4a46423e
 8004b14:	5a56524e 	.word	0x5a56524e
 8004b18:	6a66625e 	.word	0x6a66625e
        htim->Base_MspInitCallback                 = pCallback;
 8004b1c:	641c      	str	r4, [r3, #64]	@ 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	4608      	mov	r0, r1
        break;
 8004b20:	e07a      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->Base_MspDeInitCallback               = pCallback;
 8004b22:	645c      	str	r4, [r3, #68]	@ 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8004b24:	2000      	movs	r0, #0
        break;
 8004b26:	e077      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_MspInitCallback                   = pCallback;
 8004b28:	649c      	str	r4, [r3, #72]	@ 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8004b2a:	2000      	movs	r0, #0
        break;
 8004b2c:	e074      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_MspDeInitCallback                 = pCallback;
 8004b2e:	64dc      	str	r4, [r3, #76]	@ 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2000      	movs	r0, #0
        break;
 8004b32:	e071      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->OC_MspInitCallback                   = pCallback;
 8004b34:	651c      	str	r4, [r3, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2000      	movs	r0, #0
        break;
 8004b38:	e06e      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->OC_MspDeInitCallback                 = pCallback;
 8004b3a:	655c      	str	r4, [r3, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2000      	movs	r0, #0
        break;
 8004b3e:	e06b      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_MspInitCallback                  = pCallback;
 8004b40:	659c      	str	r4, [r3, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8004b42:	2000      	movs	r0, #0
        break;
 8004b44:	e068      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_MspDeInitCallback                = pCallback;
 8004b46:	65dc      	str	r4, [r3, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8004b48:	2000      	movs	r0, #0
        break;
 8004b4a:	e065      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->OnePulse_MspInitCallback             = pCallback;
 8004b4c:	661c      	str	r4, [r3, #96]	@ 0x60
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2000      	movs	r0, #0
        break;
 8004b50:	e062      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004b52:	665c      	str	r4, [r3, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8004b54:	2000      	movs	r0, #0
        break;
 8004b56:	e05f      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->Encoder_MspInitCallback              = pCallback;
 8004b58:	669c      	str	r4, [r3, #104]	@ 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8004b5a:	2000      	movs	r0, #0
        break;
 8004b5c:	e05c      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004b5e:	66dc      	str	r4, [r3, #108]	@ 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8004b60:	2000      	movs	r0, #0
        break;
 8004b62:	e059      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->HallSensor_MspInitCallback           = pCallback;
 8004b64:	671c      	str	r4, [r3, #112]	@ 0x70
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2000      	movs	r0, #0
        break;
 8004b68:	e056      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004b6a:	675c      	str	r4, [r3, #116]	@ 0x74
  HAL_StatusTypeDef status = HAL_OK;
 8004b6c:	2000      	movs	r0, #0
        break;
 8004b6e:	e053      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->PeriodElapsedCallback                = pCallback;
 8004b70:	679c      	str	r4, [r3, #120]	@ 0x78
  HAL_StatusTypeDef status = HAL_OK;
 8004b72:	2000      	movs	r0, #0
        break;
 8004b74:	e050      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004b76:	67dc      	str	r4, [r3, #124]	@ 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 8004b78:	2000      	movs	r0, #0
        break;
 8004b7a:	e04d      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->TriggerCallback                      = pCallback;
 8004b7c:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8004b80:	2000      	movs	r0, #0
        break;
 8004b82:	e049      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->TriggerHalfCpltCallback              = pCallback;
 8004b84:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2000      	movs	r0, #0
        break;
 8004b8a:	e045      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_CaptureCallback                   = pCallback;
 8004b8c:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;
 8004b90:	2000      	movs	r0, #0
        break;
 8004b92:	e041      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004b94:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
  HAL_StatusTypeDef status = HAL_OK;
 8004b98:	2000      	movs	r0, #0
        break;
 8004b9a:	e03d      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->OC_DelayElapsedCallback              = pCallback;
 8004b9c:	f8c3 4090 	str.w	r4, [r3, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;
 8004ba0:	2000      	movs	r0, #0
        break;
 8004ba2:	e039      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004ba4:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
  HAL_StatusTypeDef status = HAL_OK;
 8004ba8:	2000      	movs	r0, #0
        break;
 8004baa:	e035      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004bac:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
  HAL_StatusTypeDef status = HAL_OK;
 8004bb0:	2000      	movs	r0, #0
        break;
 8004bb2:	e031      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->ErrorCallback                        = pCallback;
 8004bb4:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 8004bb8:	2000      	movs	r0, #0
        break;
 8004bba:	e02d      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->CommutationCallback                  = pCallback;
 8004bbc:	f8c3 40a0 	str.w	r4, [r3, #160]	@ 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 8004bc0:	2000      	movs	r0, #0
        break;
 8004bc2:	e029      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->CommutationHalfCpltCallback          = pCallback;
 8004bc4:	f8c3 40a4 	str.w	r4, [r3, #164]	@ 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 8004bc8:	2000      	movs	r0, #0
        break;
 8004bca:	e025      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->BreakCallback                        = pCallback;
 8004bcc:	f8c3 40a8 	str.w	r4, [r3, #168]	@ 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 8004bd0:	2000      	movs	r0, #0
        break;
 8004bd2:	e021      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->Break2Callback                       = pCallback;
 8004bd4:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
  HAL_StatusTypeDef status = HAL_OK;
 8004bd8:	2000      	movs	r0, #0
        break;
 8004bda:	e01d      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->Base_MspInitCallback         = pCallback;
 8004bdc:	641c      	str	r4, [r3, #64]	@ 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8004bde:	4608      	mov	r0, r1
        break;
 8004be0:	e01a      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->Base_MspDeInitCallback       = pCallback;
 8004be2:	645c      	str	r4, [r3, #68]	@ 0x44
        break;
 8004be4:	e018      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_MspInitCallback           = pCallback;
 8004be6:	649c      	str	r4, [r3, #72]	@ 0x48
        break;
 8004be8:	e016      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_MspDeInitCallback         = pCallback;
 8004bea:	64dc      	str	r4, [r3, #76]	@ 0x4c
        break;
 8004bec:	e014      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->OC_MspInitCallback           = pCallback;
 8004bee:	651c      	str	r4, [r3, #80]	@ 0x50
        break;
 8004bf0:	e012      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->OC_MspDeInitCallback         = pCallback;
 8004bf2:	655c      	str	r4, [r3, #84]	@ 0x54
        break;
 8004bf4:	e010      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_MspInitCallback          = pCallback;
 8004bf6:	659c      	str	r4, [r3, #88]	@ 0x58
        break;
 8004bf8:	e00e      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_MspDeInitCallback        = pCallback;
 8004bfa:	65dc      	str	r4, [r3, #92]	@ 0x5c
        break;
 8004bfc:	e00c      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->OnePulse_MspInitCallback     = pCallback;
 8004bfe:	661c      	str	r4, [r3, #96]	@ 0x60
        break;
 8004c00:	e00a      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004c02:	665c      	str	r4, [r3, #100]	@ 0x64
        break;
 8004c04:	e008      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->Encoder_MspInitCallback      = pCallback;
 8004c06:	669c      	str	r4, [r3, #104]	@ 0x68
        break;
 8004c08:	e006      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004c0a:	66dc      	str	r4, [r3, #108]	@ 0x6c
        break;
 8004c0c:	e004      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->HallSensor_MspInitCallback   = pCallback;
 8004c0e:	671c      	str	r4, [r3, #112]	@ 0x70
        break;
 8004c10:	e002      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004c12:	675c      	str	r4, [r3, #116]	@ 0x74
        break;
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
    status =  HAL_ERROR;
 8004c16:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c22:	4770      	bx	lr
    switch (CallbackID)
 8004c24:	2001      	movs	r0, #1
 8004c26:	e7f7      	b.n	8004c18 <HAL_TIM_RegisterCallback+0x16e>
    return HAL_ERROR;
 8004c28:	2001      	movs	r0, #1
}
 8004c2a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004c2c:	2002      	movs	r0, #2
 8004c2e:	e7f6      	b.n	8004c1e <HAL_TIM_RegisterCallback+0x174>

08004c30 <TIM_Base_SetConfig>:
{
 8004c30:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8004c32:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c34:	4a3b      	ldr	r2, [pc, #236]	@ (8004d24 <TIM_Base_SetConfig+0xf4>)
 8004c36:	4290      	cmp	r0, r2
 8004c38:	bf14      	ite	ne
 8004c3a:	f04f 0e00 	movne.w	lr, #0
 8004c3e:	f04f 0e01 	moveq.w	lr, #1
 8004c42:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004c46:	bf14      	ite	ne
 8004c48:	4672      	movne	r2, lr
 8004c4a:	f04e 0201 	orreq.w	r2, lr, #1
 8004c4e:	b9aa      	cbnz	r2, 8004c7c <TIM_Base_SetConfig+0x4c>
 8004c50:	4c35      	ldr	r4, [pc, #212]	@ (8004d28 <TIM_Base_SetConfig+0xf8>)
 8004c52:	42a0      	cmp	r0, r4
 8004c54:	bf14      	ite	ne
 8004c56:	2400      	movne	r4, #0
 8004c58:	2401      	moveq	r4, #1
 8004c5a:	4d34      	ldr	r5, [pc, #208]	@ (8004d2c <TIM_Base_SetConfig+0xfc>)
 8004c5c:	42a8      	cmp	r0, r5
 8004c5e:	d00d      	beq.n	8004c7c <TIM_Base_SetConfig+0x4c>
 8004c60:	b964      	cbnz	r4, 8004c7c <TIM_Base_SetConfig+0x4c>
 8004c62:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8004c66:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 8004c6a:	42a0      	cmp	r0, r4
 8004c6c:	bf14      	ite	ne
 8004c6e:	2400      	movne	r4, #0
 8004c70:	2401      	moveq	r4, #1
 8004c72:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8004c76:	42a8      	cmp	r0, r5
 8004c78:	d000      	beq.n	8004c7c <TIM_Base_SetConfig+0x4c>
 8004c7a:	b11c      	cbz	r4, 8004c84 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c80:	684c      	ldr	r4, [r1, #4]
 8004c82:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c84:	2a00      	cmp	r2, #0
 8004c86:	d133      	bne.n	8004cf0 <TIM_Base_SetConfig+0xc0>
 8004c88:	4a27      	ldr	r2, [pc, #156]	@ (8004d28 <TIM_Base_SetConfig+0xf8>)
 8004c8a:	4290      	cmp	r0, r2
 8004c8c:	bf14      	ite	ne
 8004c8e:	2200      	movne	r2, #0
 8004c90:	2201      	moveq	r2, #1
 8004c92:	4c26      	ldr	r4, [pc, #152]	@ (8004d2c <TIM_Base_SetConfig+0xfc>)
 8004c94:	42a0      	cmp	r0, r4
 8004c96:	d02b      	beq.n	8004cf0 <TIM_Base_SetConfig+0xc0>
 8004c98:	bb52      	cbnz	r2, 8004cf0 <TIM_Base_SetConfig+0xc0>
 8004c9a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004c9e:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 8004ca2:	4290      	cmp	r0, r2
 8004ca4:	bf14      	ite	ne
 8004ca6:	2200      	movne	r2, #0
 8004ca8:	2201      	moveq	r2, #1
 8004caa:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8004cae:	42a0      	cmp	r0, r4
 8004cb0:	d01e      	beq.n	8004cf0 <TIM_Base_SetConfig+0xc0>
 8004cb2:	b9ea      	cbnz	r2, 8004cf0 <TIM_Base_SetConfig+0xc0>
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <TIM_Base_SetConfig+0x100>)
 8004cb6:	4290      	cmp	r0, r2
 8004cb8:	bf14      	ite	ne
 8004cba:	2200      	movne	r2, #0
 8004cbc:	2201      	moveq	r2, #1
 8004cbe:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 8004cc2:	42a0      	cmp	r0, r4
 8004cc4:	d014      	beq.n	8004cf0 <TIM_Base_SetConfig+0xc0>
 8004cc6:	b99a      	cbnz	r2, 8004cf0 <TIM_Base_SetConfig+0xc0>
 8004cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8004d34 <TIM_Base_SetConfig+0x104>)
 8004cca:	4290      	cmp	r0, r2
 8004ccc:	bf14      	ite	ne
 8004cce:	2200      	movne	r2, #0
 8004cd0:	2201      	moveq	r2, #1
 8004cd2:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8004cd6:	42a0      	cmp	r0, r4
 8004cd8:	d00a      	beq.n	8004cf0 <TIM_Base_SetConfig+0xc0>
 8004cda:	b94a      	cbnz	r2, 8004cf0 <TIM_Base_SetConfig+0xc0>
 8004cdc:	4a16      	ldr	r2, [pc, #88]	@ (8004d38 <TIM_Base_SetConfig+0x108>)
 8004cde:	4290      	cmp	r0, r2
 8004ce0:	bf14      	ite	ne
 8004ce2:	2200      	movne	r2, #0
 8004ce4:	2201      	moveq	r2, #1
 8004ce6:	f5a4 3496 	sub.w	r4, r4, #76800	@ 0x12c00
 8004cea:	42a0      	cmp	r0, r4
 8004cec:	d000      	beq.n	8004cf0 <TIM_Base_SetConfig+0xc0>
 8004cee:	b122      	cbz	r2, 8004cfa <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf0:	f423 7c40 	bic.w	ip, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf4:	68cb      	ldr	r3, [r1, #12]
 8004cf6:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cfe:	694a      	ldr	r2, [r1, #20]
 8004d00:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004d02:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d04:	688a      	ldr	r2, [r1, #8]
 8004d06:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d08:	680a      	ldr	r2, [r1, #0]
 8004d0a:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d3c <TIM_Base_SetConfig+0x10c>)
 8004d0e:	4290      	cmp	r0, r2
 8004d10:	bf14      	ite	ne
 8004d12:	4673      	movne	r3, lr
 8004d14:	f04e 0301 	orreq.w	r3, lr, #1
 8004d18:	b10b      	cbz	r3, 8004d1e <TIM_Base_SetConfig+0xee>
    TIMx->RCR = Structure->RepetitionCounter;
 8004d1a:	690b      	ldr	r3, [r1, #16]
 8004d1c:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	6143      	str	r3, [r0, #20]
}
 8004d22:	bd30      	pop	{r4, r5, pc}
 8004d24:	40010000 	.word	0x40010000
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40014400 	.word	0x40014400
 8004d34:	40001800 	.word	0x40001800
 8004d38:	40002000 	.word	0x40002000
 8004d3c:	40010400 	.word	0x40010400

08004d40 <TIM_OC2_SetConfig>:
{
 8004d40:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d42:	6a03      	ldr	r3, [r0, #32]
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004d4a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004d4c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004d4e:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d50:	4c14      	ldr	r4, [pc, #80]	@ (8004da4 <TIM_OC2_SetConfig+0x64>)
 8004d52:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d54:	680d      	ldr	r5, [r1, #0]
 8004d56:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004d5a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d5e:	688c      	ldr	r4, [r1, #8]
 8004d60:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d64:	4c10      	ldr	r4, [pc, #64]	@ (8004da8 <TIM_OC2_SetConfig+0x68>)
 8004d66:	4e11      	ldr	r6, [pc, #68]	@ (8004dac <TIM_OC2_SetConfig+0x6c>)
 8004d68:	42b0      	cmp	r0, r6
 8004d6a:	bf18      	it	ne
 8004d6c:	42a0      	cmpne	r0, r4
 8004d6e:	bf0c      	ite	eq
 8004d70:	2401      	moveq	r4, #1
 8004d72:	2400      	movne	r4, #0
 8004d74:	d106      	bne.n	8004d84 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d7a:	68ce      	ldr	r6, [r1, #12]
 8004d7c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d84:	b13c      	cbz	r4, 8004d96 <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d8a:	694c      	ldr	r4, [r1, #20]
 8004d8c:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d90:	698c      	ldr	r4, [r1, #24]
 8004d92:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8004d96:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004d98:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004d9a:	684a      	ldr	r2, [r1, #4]
 8004d9c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004d9e:	6203      	str	r3, [r0, #32]
}
 8004da0:	bc70      	pop	{r4, r5, r6}
 8004da2:	4770      	bx	lr
 8004da4:	feff8cff 	.word	0xfeff8cff
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40010400 	.word	0x40010400

08004db0 <HAL_TIM_PWM_ConfigChannel>:
{
 8004db0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004db2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	f000 8092 	beq.w	8004ee0 <HAL_TIM_PWM_ConfigChannel+0x130>
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  switch (Channel)
 8004dcc:	2a14      	cmp	r2, #20
 8004dce:	d81e      	bhi.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x5e>
 8004dd0:	e8df f002 	tbb	[pc, r2]
 8004dd4:	1d1d1d0b 	.word	0x1d1d1d0b
 8004dd8:	1d1d1d24 	.word	0x1d1d1d24
 8004ddc:	1d1d1d38 	.word	0x1d1d1d38
 8004de0:	1d1d1d4b 	.word	0x1d1d1d4b
 8004de4:	1d1d1d5f 	.word	0x1d1d1d5f
 8004de8:	72          	.byte	0x72
 8004de9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dea:	6800      	ldr	r0, [r0, #0]
 8004dec:	f7ff fbea 	bl	80045c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df0:	6822      	ldr	r2, [r4, #0]
 8004df2:	6993      	ldr	r3, [r2, #24]
 8004df4:	f043 0308 	orr.w	r3, r3, #8
 8004df8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dfa:	6822      	ldr	r2, [r4, #0]
 8004dfc:	6993      	ldr	r3, [r2, #24]
 8004dfe:	f023 0304 	bic.w	r3, r3, #4
 8004e02:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e04:	6822      	ldr	r2, [r4, #0]
 8004e06:	6993      	ldr	r3, [r2, #24]
 8004e08:	6929      	ldr	r1, [r5, #16]
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004e14:	2000      	movs	r0, #0
 8004e16:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e1c:	6800      	ldr	r0, [r0, #0]
 8004e1e:	f7ff ff8f 	bl	8004d40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	6993      	ldr	r3, [r2, #24]
 8004e26:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e2a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	6993      	ldr	r3, [r2, #24]
 8004e30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e34:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	6993      	ldr	r3, [r2, #24]
 8004e3a:	6929      	ldr	r1, [r5, #16]
 8004e3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004e40:	6193      	str	r3, [r2, #24]
      break;
 8004e42:	e7e4      	b.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e44:	6800      	ldr	r0, [r0, #0]
 8004e46:	f7ff fbf1 	bl	800462c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e4a:	6822      	ldr	r2, [r4, #0]
 8004e4c:	69d3      	ldr	r3, [r2, #28]
 8004e4e:	f043 0308 	orr.w	r3, r3, #8
 8004e52:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	69d3      	ldr	r3, [r2, #28]
 8004e58:	f023 0304 	bic.w	r3, r3, #4
 8004e5c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e5e:	6822      	ldr	r2, [r4, #0]
 8004e60:	69d3      	ldr	r3, [r2, #28]
 8004e62:	6929      	ldr	r1, [r5, #16]
 8004e64:	430b      	orrs	r3, r1
 8004e66:	61d3      	str	r3, [r2, #28]
      break;
 8004e68:	e7d1      	b.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e6a:	6800      	ldr	r0, [r0, #0]
 8004e6c:	f7ff fc16 	bl	800469c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e70:	6822      	ldr	r2, [r4, #0]
 8004e72:	69d3      	ldr	r3, [r2, #28]
 8004e74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e78:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	69d3      	ldr	r3, [r2, #28]
 8004e7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e82:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e84:	6822      	ldr	r2, [r4, #0]
 8004e86:	69d3      	ldr	r3, [r2, #28]
 8004e88:	6929      	ldr	r1, [r5, #16]
 8004e8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004e8e:	61d3      	str	r3, [r2, #28]
      break;
 8004e90:	e7bd      	b.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e92:	6800      	ldr	r0, [r0, #0]
 8004e94:	f7ff fc2c 	bl	80046f0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004e9c:	f043 0308 	orr.w	r3, r3, #8
 8004ea0:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004eac:	6822      	ldr	r2, [r4, #0]
 8004eae:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004eb0:	6929      	ldr	r1, [r5, #16]
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	6553      	str	r3, [r2, #84]	@ 0x54
      break;
 8004eb6:	e7aa      	b.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004eb8:	6800      	ldr	r0, [r0, #0]
 8004eba:	f7ff fc43 	bl	8004744 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ebe:	6822      	ldr	r2, [r4, #0]
 8004ec0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004ec2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ec6:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004ecc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ed0:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004ed6:	6929      	ldr	r1, [r5, #16]
 8004ed8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004edc:	6553      	str	r3, [r2, #84]	@ 0x54
      break;
 8004ede:	e796      	b.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8004ee0:	2002      	movs	r0, #2
 8004ee2:	e79a      	b.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x6a>

08004ee4 <TIM_TI1_SetConfig>:
{
 8004ee4:	b470      	push	{r4, r5, r6}
 8004ee6:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee8:	6a04      	ldr	r4, [r0, #32]
 8004eea:	f024 0401 	bic.w	r4, r4, #1
 8004eee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004ef2:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ef4:	4d1d      	ldr	r5, [pc, #116]	@ (8004f6c <TIM_TI1_SetConfig+0x88>)
 8004ef6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004efa:	bf18      	it	ne
 8004efc:	42a8      	cmpne	r0, r5
 8004efe:	d023      	beq.n	8004f48 <TIM_TI1_SetConfig+0x64>
 8004f00:	4a1b      	ldr	r2, [pc, #108]	@ (8004f70 <TIM_TI1_SetConfig+0x8c>)
 8004f02:	4290      	cmp	r0, r2
 8004f04:	bf14      	ite	ne
 8004f06:	2200      	movne	r2, #0
 8004f08:	2201      	moveq	r2, #1
 8004f0a:	f5a5 457c 	sub.w	r5, r5, #64512	@ 0xfc00
 8004f0e:	42a8      	cmp	r0, r5
 8004f10:	d01a      	beq.n	8004f48 <TIM_TI1_SetConfig+0x64>
 8004f12:	b9ca      	cbnz	r2, 8004f48 <TIM_TI1_SetConfig+0x64>
 8004f14:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004f18:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 8004f1c:	4290      	cmp	r0, r2
 8004f1e:	bf14      	ite	ne
 8004f20:	2200      	movne	r2, #0
 8004f22:	2201      	moveq	r2, #1
 8004f24:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8004f28:	42a8      	cmp	r0, r5
 8004f2a:	d00d      	beq.n	8004f48 <TIM_TI1_SetConfig+0x64>
 8004f2c:	b962      	cbnz	r2, 8004f48 <TIM_TI1_SetConfig+0x64>
 8004f2e:	4a11      	ldr	r2, [pc, #68]	@ (8004f74 <TIM_TI1_SetConfig+0x90>)
 8004f30:	4290      	cmp	r0, r2
 8004f32:	bf14      	ite	ne
 8004f34:	2200      	movne	r2, #0
 8004f36:	2201      	moveq	r2, #1
 8004f38:	f505 359a 	add.w	r5, r5, #78848	@ 0x13400
 8004f3c:	42a8      	cmp	r0, r5
 8004f3e:	d003      	beq.n	8004f48 <TIM_TI1_SetConfig+0x64>
 8004f40:	b912      	cbnz	r2, 8004f48 <TIM_TI1_SetConfig+0x64>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f42:	f044 0201 	orr.w	r2, r4, #1
 8004f46:	e003      	b.n	8004f50 <TIM_TI1_SetConfig+0x6c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f48:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004f4c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f50:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5a:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f5e:	f001 010a 	and.w	r1, r1, #10
 8004f62:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8004f64:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004f66:	6201      	str	r1, [r0, #32]
}
 8004f68:	bc70      	pop	{r4, r5, r6}
 8004f6a:	4770      	bx	lr
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40001800 	.word	0x40001800

08004f78 <HAL_TIM_IC_ConfigChannel>:
{
 8004f78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004f7a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d058      	beq.n	8005034 <HAL_TIM_IC_ConfigChannel+0xbc>
 8004f82:	4604      	mov	r4, r0
 8004f84:	460d      	mov	r5, r1
 8004f86:	2301      	movs	r3, #1
 8004f88:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (Channel == TIM_CHANNEL_1)
 8004f92:	b1da      	cbz	r2, 8004fcc <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 8004f94:	2a04      	cmp	r2, #4
 8004f96:	d02a      	beq.n	8004fee <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 8004f98:	2a08      	cmp	r2, #8
 8004f9a:	d03a      	beq.n	8005012 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance,
 8004f9c:	68cb      	ldr	r3, [r1, #12]
 8004f9e:	684a      	ldr	r2, [r1, #4]
 8004fa0:	6809      	ldr	r1, [r1, #0]
 8004fa2:	6800      	ldr	r0, [r0, #0]
 8004fa4:	f7ff fc55 	bl	8004852 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	69d3      	ldr	r3, [r2, #28]
 8004fac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004fb0:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	69d3      	ldr	r3, [r2, #28]
 8004fb6:	68a9      	ldr	r1, [r5, #8]
 8004fb8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004fbc:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8004fcc:	68cb      	ldr	r3, [r1, #12]
 8004fce:	684a      	ldr	r2, [r1, #4]
 8004fd0:	6809      	ldr	r1, [r1, #0]
 8004fd2:	6800      	ldr	r0, [r0, #0]
 8004fd4:	f7ff ff86 	bl	8004ee4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	6993      	ldr	r3, [r2, #24]
 8004fdc:	f023 030c 	bic.w	r3, r3, #12
 8004fe0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	6993      	ldr	r3, [r2, #24]
 8004fe6:	68a9      	ldr	r1, [r5, #8]
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6193      	str	r3, [r2, #24]
 8004fec:	e7e7      	b.n	8004fbe <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance,
 8004fee:	68cb      	ldr	r3, [r1, #12]
 8004ff0:	684a      	ldr	r2, [r1, #4]
 8004ff2:	6809      	ldr	r1, [r1, #0]
 8004ff4:	6800      	ldr	r0, [r0, #0]
 8004ff6:	f7ff fbe2 	bl	80047be <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	6993      	ldr	r3, [r2, #24]
 8004ffe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005002:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	6993      	ldr	r3, [r2, #24]
 8005008:	68a9      	ldr	r1, [r5, #8]
 800500a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800500e:	6193      	str	r3, [r2, #24]
 8005010:	e7d5      	b.n	8004fbe <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,
 8005012:	68cb      	ldr	r3, [r1, #12]
 8005014:	684a      	ldr	r2, [r1, #4]
 8005016:	6809      	ldr	r1, [r1, #0]
 8005018:	6800      	ldr	r0, [r0, #0]
 800501a:	f7ff fbff 	bl	800481c <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	69d3      	ldr	r3, [r2, #28]
 8005022:	f023 030c 	bic.w	r3, r3, #12
 8005026:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005028:	6822      	ldr	r2, [r4, #0]
 800502a:	69d3      	ldr	r3, [r2, #28]
 800502c:	68a9      	ldr	r1, [r5, #8]
 800502e:	430b      	orrs	r3, r1
 8005030:	61d3      	str	r3, [r2, #28]
 8005032:	e7c4      	b.n	8004fbe <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 8005034:	2002      	movs	r0, #2
 8005036:	e7c8      	b.n	8004fca <HAL_TIM_IC_ConfigChannel+0x52>

08005038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005038:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800503a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800503c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005040:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005044:	430a      	orrs	r2, r1
 8005046:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800504a:	6082      	str	r2, [r0, #8]
}
 800504c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005054:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d064      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0xd2>
{
 800505c:	b510      	push	{r4, lr}
 800505e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005060:	2301      	movs	r3, #1
 8005062:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005066:	2302      	movs	r3, #2
 8005068:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800506c:	6802      	ldr	r2, [r0, #0]
 800506e:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005070:	4b2e      	ldr	r3, [pc, #184]	@ (800512c <HAL_TIM_ConfigClockSource+0xd8>)
 8005072:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005074:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005076:	680b      	ldr	r3, [r1, #0]
 8005078:	2b60      	cmp	r3, #96	@ 0x60
 800507a:	d040      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0xaa>
 800507c:	d81c      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x64>
 800507e:	2b40      	cmp	r3, #64	@ 0x40
 8005080:	d047      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0xbe>
 8005082:	d90b      	bls.n	800509c <HAL_TIM_ConfigClockSource+0x48>
 8005084:	2b50      	cmp	r3, #80	@ 0x50
 8005086:	d133      	bne.n	80050f0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005088:	68ca      	ldr	r2, [r1, #12]
 800508a:	6849      	ldr	r1, [r1, #4]
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	f7ff fb83 	bl	8004798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005092:	2150      	movs	r1, #80	@ 0x50
 8005094:	6820      	ldr	r0, [r4, #0]
 8005096:	f7ff fbf7 	bl	8004888 <TIM_ITRx_SetConfig>
      break;
 800509a:	e029      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800509c:	2b20      	cmp	r3, #32
 800509e:	d006      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0x5a>
 80050a0:	d803      	bhi.n	80050aa <HAL_TIM_ConfigClockSource+0x56>
 80050a2:	b123      	cbz	r3, 80050ae <HAL_TIM_ConfigClockSource+0x5a>
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d002      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0x5a>
 80050a8:	e022      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x9c>
 80050aa:	2b30      	cmp	r3, #48	@ 0x30
 80050ac:	d120      	bne.n	80050f0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ae:	4619      	mov	r1, r3
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	f7ff fbe9 	bl	8004888 <TIM_ITRx_SetConfig>
      break;
 80050b6:	e01b      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 80050b8:	2b70      	cmp	r3, #112	@ 0x70
 80050ba:	d00e      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x86>
 80050bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050c0:	d116      	bne.n	80050f0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80050c2:	68cb      	ldr	r3, [r1, #12]
 80050c4:	684a      	ldr	r2, [r1, #4]
 80050c6:	6889      	ldr	r1, [r1, #8]
 80050c8:	6820      	ldr	r0, [r4, #0]
 80050ca:	f7ff ffb5 	bl	8005038 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	6893      	ldr	r3, [r2, #8]
 80050d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050d6:	6093      	str	r3, [r2, #8]
      break;
 80050d8:	e00a      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80050da:	68cb      	ldr	r3, [r1, #12]
 80050dc:	684a      	ldr	r2, [r1, #4]
 80050de:	6889      	ldr	r1, [r1, #8]
 80050e0:	6820      	ldr	r0, [r4, #0]
 80050e2:	f7ff ffa9 	bl	8005038 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050e6:	6822      	ldr	r2, [r4, #0]
 80050e8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80050ee:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80050f6:	2000      	movs	r0, #0
 80050f8:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 80050fc:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fe:	68ca      	ldr	r2, [r1, #12]
 8005100:	6849      	ldr	r1, [r1, #4]
 8005102:	6820      	ldr	r0, [r4, #0]
 8005104:	f7ff fb76 	bl	80047f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005108:	2160      	movs	r1, #96	@ 0x60
 800510a:	6820      	ldr	r0, [r4, #0]
 800510c:	f7ff fbbc 	bl	8004888 <TIM_ITRx_SetConfig>
      break;
 8005110:	e7ee      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005112:	68ca      	ldr	r2, [r1, #12]
 8005114:	6849      	ldr	r1, [r1, #4]
 8005116:	6820      	ldr	r0, [r4, #0]
 8005118:	f7ff fb3e 	bl	8004798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800511c:	2140      	movs	r1, #64	@ 0x40
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	f7ff fbb2 	bl	8004888 <TIM_ITRx_SetConfig>
      break;
 8005124:	e7e4      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8005126:	2002      	movs	r0, #2
}
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	fffe0088 	.word	0xfffe0088

08005130 <TIM_SlaveTimer_SetConfig>:
{
 8005130:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8005132:	6804      	ldr	r4, [r0, #0]
 8005134:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005136:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800513a:	684b      	ldr	r3, [r1, #4]
 800513c:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800513e:	4a20      	ldr	r2, [pc, #128]	@ (80051c0 <TIM_SlaveTimer_SetConfig+0x90>)
 8005140:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005142:	680b      	ldr	r3, [r1, #0]
 8005144:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005146:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8005148:	684b      	ldr	r3, [r1, #4]
 800514a:	2b60      	cmp	r3, #96	@ 0x60
 800514c:	d02c      	beq.n	80051a8 <TIM_SlaveTimer_SetConfig+0x78>
 800514e:	d80c      	bhi.n	800516a <TIM_SlaveTimer_SetConfig+0x3a>
 8005150:	2b40      	cmp	r3, #64	@ 0x40
 8005152:	d014      	beq.n	800517e <TIM_SlaveTimer_SetConfig+0x4e>
 8005154:	2b50      	cmp	r3, #80	@ 0x50
 8005156:	d106      	bne.n	8005166 <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005158:	690a      	ldr	r2, [r1, #16]
 800515a:	6889      	ldr	r1, [r1, #8]
 800515c:	6800      	ldr	r0, [r0, #0]
 800515e:	f7ff fb1b 	bl	8004798 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 8005162:	2000      	movs	r0, #0
      break;
 8005164:	e00a      	b.n	800517c <TIM_SlaveTimer_SetConfig+0x4c>
  switch (sSlaveConfig->InputTrigger)
 8005166:	2000      	movs	r0, #0
 8005168:	e008      	b.n	800517c <TIM_SlaveTimer_SetConfig+0x4c>
 800516a:	2b70      	cmp	r3, #112	@ 0x70
 800516c:	d123      	bne.n	80051b6 <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 800516e:	690b      	ldr	r3, [r1, #16]
 8005170:	688a      	ldr	r2, [r1, #8]
 8005172:	68c9      	ldr	r1, [r1, #12]
 8005174:	6800      	ldr	r0, [r0, #0]
 8005176:	f7ff ff5f 	bl	8005038 <TIM_ETR_SetConfig>
  return HAL_OK;
 800517a:	2000      	movs	r0, #0
}
 800517c:	bd10      	pop	{r4, pc}
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800517e:	680b      	ldr	r3, [r1, #0]
 8005180:	2b05      	cmp	r3, #5
 8005182:	d01a      	beq.n	80051ba <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 8005184:	6803      	ldr	r3, [r0, #0]
 8005186:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005188:	6a1a      	ldr	r2, [r3, #32]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005190:	6802      	ldr	r2, [r0, #0]
 8005192:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005194:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005198:	6909      	ldr	r1, [r1, #16]
 800519a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800519e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80051a0:	6803      	ldr	r3, [r0, #0]
 80051a2:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 80051a4:	2000      	movs	r0, #0
      break;
 80051a6:	e7e9      	b.n	800517c <TIM_SlaveTimer_SetConfig+0x4c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051a8:	690a      	ldr	r2, [r1, #16]
 80051aa:	6889      	ldr	r1, [r1, #8]
 80051ac:	6800      	ldr	r0, [r0, #0]
 80051ae:	f7ff fb21 	bl	80047f4 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 80051b2:	2000      	movs	r0, #0
      break;
 80051b4:	e7e2      	b.n	800517c <TIM_SlaveTimer_SetConfig+0x4c>
  switch (sSlaveConfig->InputTrigger)
 80051b6:	2000      	movs	r0, #0
 80051b8:	e7e0      	b.n	800517c <TIM_SlaveTimer_SetConfig+0x4c>
        return HAL_ERROR;
 80051ba:	2001      	movs	r0, #1
 80051bc:	e7de      	b.n	800517c <TIM_SlaveTimer_SetConfig+0x4c>
 80051be:	bf00      	nop
 80051c0:	fffefff8 	.word	0xfffefff8

080051c4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80051c4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d022      	beq.n	8005212 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 80051cc:	b510      	push	{r4, lr}
 80051ce:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80051d0:	2301      	movs	r3, #1
 80051d2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80051d6:	2302      	movs	r3, #2
 80051d8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80051dc:	f7ff ffa8 	bl	8005130 <TIM_SlaveTimer_SetConfig>
 80051e0:	b980      	cbnz	r0, 8005204 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	68d3      	ldr	r3, [r2, #12]
 80051e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ea:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	68d3      	ldr	r3, [r2, #12]
 80051f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051f4:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80051fc:	2300      	movs	r3, #0
 80051fe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005202:	bd10      	pop	{r4, pc}
      htim->State = HAL_TIM_STATE_READY;
 8005204:	2001      	movs	r0, #1
 8005206:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800520a:	2300      	movs	r3, #0
 800520c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8005210:	e7f7      	b.n	8005202 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8005212:	2002      	movs	r0, #2
}
 8005214:	4770      	bx	lr

08005216 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  // JSB fix. 20191115. Prevents CCxE bit getting reset momentarily, which would be a problem if any current flows into the output e.g. from a resistor.
  // Original version:
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005216:	f001 011f 	and.w	r1, r1, #31
 800521a:	2301      	movs	r3, #1
 800521c:	408b      	lsls	r3, r1
  //  TIMx->CCER &= ~tmp;
  //
  //  /* Set or reset the CCxE Bit */
  //  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
  // JSB version: !!! Not tested! !!!
  if (ChannelState)
 800521e:	b11a      	cbz	r2, 8005228 <TIM_CCxChannelCmd+0x12>
    TIMx->CCER |= tmp;
 8005220:	6a02      	ldr	r2, [r0, #32]
 8005222:	4313      	orrs	r3, r2
 8005224:	6203      	str	r3, [r0, #32]
 8005226:	4770      	bx	lr
  else
    TIMx->CCER &= ~tmp;
 8005228:	6a02      	ldr	r2, [r0, #32]
 800522a:	ea22 0303 	bic.w	r3, r2, r3
 800522e:	6203      	str	r3, [r0, #32]
}
 8005230:	4770      	bx	lr
	...

08005234 <HAL_TIM_IC_Start_IT>:
{
 8005234:	b510      	push	{r4, lr}
 8005236:	4604      	mov	r4, r0
  switch (Channel)
 8005238:	290c      	cmp	r1, #12
 800523a:	d80d      	bhi.n	8005258 <HAL_TIM_IC_Start_IT+0x24>
 800523c:	e8df f001 	tbb	[pc, r1]
 8005240:	0c0c0c07 	.word	0x0c0c0c07
 8005244:	0c0c0c1f 	.word	0x0c0c0c1f
 8005248:	0c0c0c25 	.word	0x0c0c0c25
 800524c:	2b          	.byte	0x2b
 800524d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800524e:	6802      	ldr	r2, [r0, #0]
 8005250:	68d3      	ldr	r3, [r2, #12]
 8005252:	f043 0302 	orr.w	r3, r3, #2
 8005256:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005258:	2201      	movs	r2, #1
 800525a:	6820      	ldr	r0, [r4, #0]
 800525c:	f7ff ffdb 	bl	8005216 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	6891      	ldr	r1, [r2, #8]
 8005264:	4b0f      	ldr	r3, [pc, #60]	@ (80052a4 <HAL_TIM_IC_Start_IT+0x70>)
 8005266:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005268:	2b06      	cmp	r3, #6
 800526a:	bf18      	it	ne
 800526c:	f5b3 3f80 	cmpne.w	r3, #65536	@ 0x10000
 8005270:	d003      	beq.n	800527a <HAL_TIM_IC_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	6013      	str	r3, [r2, #0]
}
 800527a:	2000      	movs	r0, #0
 800527c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800527e:	6802      	ldr	r2, [r0, #0]
 8005280:	68d3      	ldr	r3, [r2, #12]
 8005282:	f043 0304 	orr.w	r3, r3, #4
 8005286:	60d3      	str	r3, [r2, #12]
      break;
 8005288:	e7e6      	b.n	8005258 <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800528a:	6802      	ldr	r2, [r0, #0]
 800528c:	68d3      	ldr	r3, [r2, #12]
 800528e:	f043 0308 	orr.w	r3, r3, #8
 8005292:	60d3      	str	r3, [r2, #12]
      break;
 8005294:	e7e0      	b.n	8005258 <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005296:	6802      	ldr	r2, [r0, #0]
 8005298:	68d3      	ldr	r3, [r2, #12]
 800529a:	f043 0310 	orr.w	r3, r3, #16
 800529e:	60d3      	str	r3, [r2, #12]
      break;
 80052a0:	e7da      	b.n	8005258 <HAL_TIM_IC_Start_IT+0x24>
 80052a2:	bf00      	nop
 80052a4:	00010007 	.word	0x00010007

080052a8 <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 80052a8:	4b14      	ldr	r3, [pc, #80]	@ (80052fc <TIM_ResetCallback+0x54>)
 80052aa:	6783      	str	r3, [r0, #120]	@ 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 80052ac:	4b14      	ldr	r3, [pc, #80]	@ (8005300 <TIM_ResetCallback+0x58>)
 80052ae:	67c3      	str	r3, [r0, #124]	@ 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 80052b0:	4b14      	ldr	r3, [pc, #80]	@ (8005304 <TIM_ResetCallback+0x5c>)
 80052b2:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 80052b6:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <TIM_ResetCallback+0x60>)
 80052b8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 80052bc:	4b13      	ldr	r3, [pc, #76]	@ (800530c <TIM_ResetCallback+0x64>)
 80052be:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 80052c2:	4b13      	ldr	r3, [pc, #76]	@ (8005310 <TIM_ResetCallback+0x68>)
 80052c4:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 80052c8:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <TIM_ResetCallback+0x6c>)
 80052ca:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 80052ce:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <TIM_ResetCallback+0x70>)
 80052d0:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 80052d4:	4b11      	ldr	r3, [pc, #68]	@ (800531c <TIM_ResetCallback+0x74>)
 80052d6:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 80052da:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <TIM_ResetCallback+0x78>)
 80052dc:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 80052e0:	4b10      	ldr	r3, [pc, #64]	@ (8005324 <TIM_ResetCallback+0x7c>)
 80052e2:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 80052e6:	4b10      	ldr	r3, [pc, #64]	@ (8005328 <TIM_ResetCallback+0x80>)
 80052e8:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 80052ec:	4b0f      	ldr	r3, [pc, #60]	@ (800532c <TIM_ResetCallback+0x84>)
 80052ee:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 80052f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005330 <TIM_ResetCallback+0x88>)
 80052f4:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
}
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	0800e07d 	.word	0x0800e07d
 8005300:	080045b3 	.word	0x080045b3
 8005304:	080045bf 	.word	0x080045bf
 8005308:	080045c1 	.word	0x080045c1
 800530c:	080045b7 	.word	0x080045b7
 8005310:	080045b9 	.word	0x080045b9
 8005314:	080045b5 	.word	0x080045b5
 8005318:	080045bb 	.word	0x080045bb
 800531c:	080045bd 	.word	0x080045bd
 8005320:	080045c3 	.word	0x080045c3
 8005324:	08005529 	.word	0x08005529
 8005328:	0800552b 	.word	0x0800552b
 800532c:	0800552d 	.word	0x0800552d
 8005330:	0800552f 	.word	0x0800552f

08005334 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005334:	b1f0      	cbz	r0, 8005374 <HAL_TIM_Base_Init+0x40>
{
 8005336:	b510      	push	{r4, lr}
 8005338:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800533a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800533e:	b163      	cbz	r3, 800535a <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	2302      	movs	r3, #2
 8005342:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005346:	4621      	mov	r1, r4
 8005348:	f851 0b04 	ldr.w	r0, [r1], #4
 800534c:	f7ff fc70 	bl	8004c30 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005350:	2301      	movs	r3, #1
 8005352:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005356:	2000      	movs	r0, #0
}
 8005358:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800535a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 800535e:	f7ff ffa3 	bl	80052a8 <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 8005362:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005364:	b11b      	cbz	r3, 800536e <HAL_TIM_Base_Init+0x3a>
    htim->Base_MspInitCallback(htim);
 8005366:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005368:	4620      	mov	r0, r4
 800536a:	4798      	blx	r3
 800536c:	e7e8      	b.n	8005340 <HAL_TIM_Base_Init+0xc>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800536e:	4b02      	ldr	r3, [pc, #8]	@ (8005378 <HAL_TIM_Base_Init+0x44>)
 8005370:	6423      	str	r3, [r4, #64]	@ 0x40
 8005372:	e7f8      	b.n	8005366 <HAL_TIM_Base_Init+0x32>
    return HAL_ERROR;
 8005374:	2001      	movs	r0, #1
}
 8005376:	4770      	bx	lr
 8005378:	0800ec6d 	.word	0x0800ec6d

0800537c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800537c:	b1f0      	cbz	r0, 80053bc <HAL_TIM_PWM_Init+0x40>
{
 800537e:	b510      	push	{r4, lr}
 8005380:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005382:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005386:	b163      	cbz	r3, 80053a2 <HAL_TIM_PWM_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	2302      	movs	r3, #2
 800538a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800538e:	4621      	mov	r1, r4
 8005390:	f851 0b04 	ldr.w	r0, [r1], #4
 8005394:	f7ff fc4c 	bl	8004c30 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005398:	2301      	movs	r3, #1
 800539a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800539e:	2000      	movs	r0, #0
}
 80053a0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80053a2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 80053a6:	f7ff ff7f 	bl	80052a8 <TIM_ResetCallback>
    if (htim->PWM_MspInitCallback == NULL)
 80053aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053ac:	b11b      	cbz	r3, 80053b6 <HAL_TIM_PWM_Init+0x3a>
    htim->PWM_MspInitCallback(htim);
 80053ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053b0:	4620      	mov	r0, r4
 80053b2:	4798      	blx	r3
 80053b4:	e7e8      	b.n	8005388 <HAL_TIM_PWM_Init+0xc>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80053b6:	4b02      	ldr	r3, [pc, #8]	@ (80053c0 <HAL_TIM_PWM_Init+0x44>)
 80053b8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80053ba:	e7f8      	b.n	80053ae <HAL_TIM_PWM_Init+0x32>
    return HAL_ERROR;
 80053bc:	2001      	movs	r0, #1
}
 80053be:	4770      	bx	lr
 80053c0:	0800ebd9 	.word	0x0800ebd9

080053c4 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80053c4:	b1f0      	cbz	r0, 8005404 <HAL_TIM_IC_Init+0x40>
{
 80053c6:	b510      	push	{r4, lr}
 80053c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80053ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80053ce:	b163      	cbz	r3, 80053ea <HAL_TIM_IC_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	2302      	movs	r3, #2
 80053d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d6:	4621      	mov	r1, r4
 80053d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80053dc:	f7ff fc28 	bl	8004c30 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80053e6:	2000      	movs	r0, #0
}
 80053e8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80053ea:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 80053ee:	f7ff ff5b 	bl	80052a8 <TIM_ResetCallback>
    if (htim->IC_MspInitCallback == NULL)
 80053f2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80053f4:	b11b      	cbz	r3, 80053fe <HAL_TIM_IC_Init+0x3a>
    htim->IC_MspInitCallback(htim);
 80053f6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80053f8:	4620      	mov	r0, r4
 80053fa:	4798      	blx	r3
 80053fc:	e7e8      	b.n	80053d0 <HAL_TIM_IC_Init+0xc>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80053fe:	4b02      	ldr	r3, [pc, #8]	@ (8005408 <HAL_TIM_IC_Init+0x44>)
 8005400:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005402:	e7f8      	b.n	80053f6 <HAL_TIM_IC_Init+0x32>
    return HAL_ERROR;
 8005404:	2001      	movs	r0, #1
}
 8005406:	4770      	bx	lr
 8005408:	080045b1 	.word	0x080045b1

0800540c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005410:	2a01      	cmp	r2, #1
 8005412:	d028      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 8005414:	b470      	push	{r4, r5, r6}
 8005416:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005418:	2201      	movs	r2, #1
 800541a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541e:	2202      	movs	r2, #2
 8005420:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005424:	6802      	ldr	r2, [r0, #0]
 8005426:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005428:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800542a:	4e10      	ldr	r6, [pc, #64]	@ (800546c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800542c:	4d10      	ldr	r5, [pc, #64]	@ (8005470 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800542e:	42aa      	cmp	r2, r5
 8005430:	bf18      	it	ne
 8005432:	42b2      	cmpne	r2, r6
 8005434:	d103      	bne.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005436:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800543a:	684d      	ldr	r5, [r1, #4]
 800543c:	4328      	orrs	r0, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800543e:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005442:	680d      	ldr	r5, [r1, #0]
 8005444:	4328      	orrs	r0, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005446:	f024 0c80 	bic.w	ip, r4, #128	@ 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800544a:	6889      	ldr	r1, [r1, #8]
 800544c:	ea41 010c 	orr.w	r1, r1, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005450:	6050      	str	r0, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	6091      	str	r1, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800545c:	2000      	movs	r0, #0
 800545e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005462:	bc70      	pop	{r4, r5, r6}
 8005464:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005466:	2002      	movs	r0, #2
}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40010000 	.word	0x40010000
 8005470:	40010400 	.word	0x40010400

08005474 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005474:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d03c      	beq.n	80054f6 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 800547c:	b430      	push	{r4, r5}
 800547e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8005480:	2301      	movs	r3, #1
 8005482:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005486:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800548c:	6888      	ldr	r0, [r1, #8]
 800548e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005490:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005494:	6848      	ldr	r0, [r1, #4]
 8005496:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005498:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800549c:	6808      	ldr	r0, [r1, #0]
 800549e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054a4:	6908      	ldr	r0, [r1, #16]
 80054a6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054ac:	6948      	ldr	r0, [r1, #20]
 80054ae:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054b4:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 80054b6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054b8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80054bc:	6988      	ldr	r0, [r1, #24]
 80054be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054c2:	6810      	ldr	r0, [r2, #0]
 80054c4:	4d0d      	ldr	r5, [pc, #52]	@ (80054fc <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80054c6:	4c0e      	ldr	r4, [pc, #56]	@ (8005500 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80054c8:	42a0      	cmp	r0, r4
 80054ca:	bf18      	it	ne
 80054cc:	42a8      	cmpne	r0, r5
 80054ce:	d10c      	bne.n	80054ea <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054d4:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 80054d6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054de:	69cc      	ldr	r4, [r1, #28]
 80054e0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80054e6:	6a09      	ldr	r1, [r1, #32]
 80054e8:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054ea:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054ec:	2000      	movs	r0, #0
 80054ee:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 80054f2:	bc30      	pop	{r4, r5}
 80054f4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80054f6:	2002      	movs	r0, #2
}
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40010000 	.word	0x40010000
 8005500:	40010400 	.word	0x40010400

08005504 <HAL_TIMEx_RemapConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
  __HAL_LOCK(htim);
 8005504:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d00b      	beq.n	8005524 <HAL_TIMEx_RemapConfig+0x20>
 800550c:	2301      	movs	r3, #1
 800550e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
 8005512:	6802      	ldr	r2, [r0, #0]
 8005514:	6511      	str	r1, [r2, #80]	@ 0x50

  htim->State = HAL_TIM_STATE_READY;
 8005516:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800551a:	2300      	movs	r3, #0
 800551c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  return HAL_OK;
 8005520:	4618      	mov	r0, r3
 8005522:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005524:	2002      	movs	r0, #2
}
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005528:	4770      	bx	lr

0800552a <HAL_TIMEx_CommutHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800552a:	4770      	bx	lr

0800552c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800552c:	4770      	bx	lr

0800552e <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800552e:	4770      	bx	lr

08005530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005530:	b510      	push	{r4, lr}
 8005532:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005534:	6883      	ldr	r3, [r0, #8]
 8005536:	6902      	ldr	r2, [r0, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	6942      	ldr	r2, [r0, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	69c2      	ldr	r2, [r0, #28]
 8005540:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005542:	6801      	ldr	r1, [r0, #0]
 8005544:	6808      	ldr	r0, [r1, #0]
 8005546:	4a91      	ldr	r2, [pc, #580]	@ (800578c <UART_SetConfig+0x25c>)
 8005548:	4002      	ands	r2, r0
 800554a:	431a      	orrs	r2, r3
 800554c:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800554e:	6822      	ldr	r2, [r4, #0]
 8005550:	6853      	ldr	r3, [r2, #4]
 8005552:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005556:	68e1      	ldr	r1, [r4, #12]
 8005558:	430b      	orrs	r3, r1
 800555a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800555c:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 800555e:	6a23      	ldr	r3, [r4, #32]
 8005560:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005562:	6821      	ldr	r1, [r4, #0]
 8005564:	688b      	ldr	r3, [r1, #8]
 8005566:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	4a87      	ldr	r2, [pc, #540]	@ (8005790 <UART_SetConfig+0x260>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d018      	beq.n	80055a8 <UART_SetConfig+0x78>
 8005576:	4a87      	ldr	r2, [pc, #540]	@ (8005794 <UART_SetConfig+0x264>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d03a      	beq.n	80055f2 <UART_SetConfig+0xc2>
 800557c:	4a86      	ldr	r2, [pc, #536]	@ (8005798 <UART_SetConfig+0x268>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d04f      	beq.n	8005622 <UART_SetConfig+0xf2>
 8005582:	4a86      	ldr	r2, [pc, #536]	@ (800579c <UART_SetConfig+0x26c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d05e      	beq.n	8005646 <UART_SetConfig+0x116>
 8005588:	4a85      	ldr	r2, [pc, #532]	@ (80057a0 <UART_SetConfig+0x270>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d06d      	beq.n	800566a <UART_SetConfig+0x13a>
 800558e:	4a85      	ldr	r2, [pc, #532]	@ (80057a4 <UART_SetConfig+0x274>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d07f      	beq.n	8005694 <UART_SetConfig+0x164>
 8005594:	4a84      	ldr	r2, [pc, #528]	@ (80057a8 <UART_SetConfig+0x278>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f000 8091 	beq.w	80056be <UART_SetConfig+0x18e>
 800559c:	4a83      	ldr	r2, [pc, #524]	@ (80057ac <UART_SetConfig+0x27c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	f000 80a2 	beq.w	80056e8 <UART_SetConfig+0x1b8>
 80055a4:	2310      	movs	r3, #16
 80055a6:	e00b      	b.n	80055c0 <UART_SetConfig+0x90>
 80055a8:	4b81      	ldr	r3, [pc, #516]	@ (80057b0 <UART_SetConfig+0x280>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d81b      	bhi.n	80055ee <UART_SetConfig+0xbe>
 80055b6:	e8df f003 	tbb	[pc, r3]
 80055ba:	1602      	.short	0x1602
 80055bc:	18ab      	.short	0x18ab
 80055be:	2301      	movs	r3, #1

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c0:	69e2      	ldr	r2, [r4, #28]
 80055c2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80055c6:	f000 80d7 	beq.w	8005778 <UART_SetConfig+0x248>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	f200 8167 	bhi.w	800589e <UART_SetConfig+0x36e>
 80055d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80055d4:	013f012d 	.word	0x013f012d
 80055d8:	01650148 	.word	0x01650148
 80055dc:	01650150 	.word	0x01650150
 80055e0:	01650165 	.word	0x01650165
 80055e4:	0159      	.short	0x0159
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055e6:	2304      	movs	r3, #4
 80055e8:	e7ea      	b.n	80055c0 <UART_SetConfig+0x90>
 80055ea:	2308      	movs	r3, #8
 80055ec:	e7e8      	b.n	80055c0 <UART_SetConfig+0x90>
 80055ee:	2310      	movs	r3, #16
 80055f0:	e7e6      	b.n	80055c0 <UART_SetConfig+0x90>
 80055f2:	4b6f      	ldr	r3, [pc, #444]	@ (80057b0 <UART_SetConfig+0x280>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d80e      	bhi.n	800561e <UART_SetConfig+0xee>
 8005600:	e8df f003 	tbb	[pc, r3]
 8005604:	0d0d0d07 	.word	0x0d0d0d07
 8005608:	0d0d0d09 	.word	0x0d0d0d09
 800560c:	0d0d0d88 	.word	0x0d0d0d88
 8005610:	0b          	.byte	0x0b
 8005611:	00          	.byte	0x00
 8005612:	2300      	movs	r3, #0
 8005614:	e7d4      	b.n	80055c0 <UART_SetConfig+0x90>
 8005616:	2304      	movs	r3, #4
 8005618:	e7d2      	b.n	80055c0 <UART_SetConfig+0x90>
 800561a:	2308      	movs	r3, #8
 800561c:	e7d0      	b.n	80055c0 <UART_SetConfig+0x90>
 800561e:	2310      	movs	r3, #16
 8005620:	e7ce      	b.n	80055c0 <UART_SetConfig+0x90>
 8005622:	4b63      	ldr	r3, [pc, #396]	@ (80057b0 <UART_SetConfig+0x280>)
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005628:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800562c:	2b20      	cmp	r3, #32
 800562e:	d073      	beq.n	8005718 <UART_SetConfig+0x1e8>
 8005630:	d805      	bhi.n	800563e <UART_SetConfig+0x10e>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d072      	beq.n	800571c <UART_SetConfig+0x1ec>
 8005636:	2b10      	cmp	r3, #16
 8005638:	d172      	bne.n	8005720 <UART_SetConfig+0x1f0>
 800563a:	2304      	movs	r3, #4
 800563c:	e7c0      	b.n	80055c0 <UART_SetConfig+0x90>
 800563e:	2b30      	cmp	r3, #48	@ 0x30
 8005640:	d170      	bne.n	8005724 <UART_SetConfig+0x1f4>
 8005642:	2308      	movs	r3, #8
 8005644:	e7bc      	b.n	80055c0 <UART_SetConfig+0x90>
 8005646:	4b5a      	ldr	r3, [pc, #360]	@ (80057b0 <UART_SetConfig+0x280>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005650:	2b80      	cmp	r3, #128	@ 0x80
 8005652:	d069      	beq.n	8005728 <UART_SetConfig+0x1f8>
 8005654:	d805      	bhi.n	8005662 <UART_SetConfig+0x132>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d068      	beq.n	800572c <UART_SetConfig+0x1fc>
 800565a:	2b40      	cmp	r3, #64	@ 0x40
 800565c:	d168      	bne.n	8005730 <UART_SetConfig+0x200>
 800565e:	2304      	movs	r3, #4
 8005660:	e7ae      	b.n	80055c0 <UART_SetConfig+0x90>
 8005662:	2bc0      	cmp	r3, #192	@ 0xc0
 8005664:	d166      	bne.n	8005734 <UART_SetConfig+0x204>
 8005666:	2308      	movs	r3, #8
 8005668:	e7aa      	b.n	80055c0 <UART_SetConfig+0x90>
 800566a:	4b51      	ldr	r3, [pc, #324]	@ (80057b0 <UART_SetConfig+0x280>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005670:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005678:	d05e      	beq.n	8005738 <UART_SetConfig+0x208>
 800567a:	d806      	bhi.n	800568a <UART_SetConfig+0x15a>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d05d      	beq.n	800573c <UART_SetConfig+0x20c>
 8005680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005684:	d15c      	bne.n	8005740 <UART_SetConfig+0x210>
 8005686:	2304      	movs	r3, #4
 8005688:	e79a      	b.n	80055c0 <UART_SetConfig+0x90>
 800568a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800568e:	d159      	bne.n	8005744 <UART_SetConfig+0x214>
 8005690:	2308      	movs	r3, #8
 8005692:	e795      	b.n	80055c0 <UART_SetConfig+0x90>
 8005694:	4b46      	ldr	r3, [pc, #280]	@ (80057b0 <UART_SetConfig+0x280>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800569e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a2:	d051      	beq.n	8005748 <UART_SetConfig+0x218>
 80056a4:	d806      	bhi.n	80056b4 <UART_SetConfig+0x184>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d050      	beq.n	800574c <UART_SetConfig+0x21c>
 80056aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ae:	d14f      	bne.n	8005750 <UART_SetConfig+0x220>
 80056b0:	2304      	movs	r3, #4
 80056b2:	e785      	b.n	80055c0 <UART_SetConfig+0x90>
 80056b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056b8:	d14c      	bne.n	8005754 <UART_SetConfig+0x224>
 80056ba:	2308      	movs	r3, #8
 80056bc:	e780      	b.n	80055c0 <UART_SetConfig+0x90>
 80056be:	4b3c      	ldr	r3, [pc, #240]	@ (80057b0 <UART_SetConfig+0x280>)
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80056c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056cc:	d044      	beq.n	8005758 <UART_SetConfig+0x228>
 80056ce:	d806      	bhi.n	80056de <UART_SetConfig+0x1ae>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d043      	beq.n	800575c <UART_SetConfig+0x22c>
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d8:	d142      	bne.n	8005760 <UART_SetConfig+0x230>
 80056da:	2304      	movs	r3, #4
 80056dc:	e770      	b.n	80055c0 <UART_SetConfig+0x90>
 80056de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056e2:	d13f      	bne.n	8005764 <UART_SetConfig+0x234>
 80056e4:	2308      	movs	r3, #8
 80056e6:	e76b      	b.n	80055c0 <UART_SetConfig+0x90>
 80056e8:	4b31      	ldr	r3, [pc, #196]	@ (80057b0 <UART_SetConfig+0x280>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80056f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f6:	d037      	beq.n	8005768 <UART_SetConfig+0x238>
 80056f8:	d805      	bhi.n	8005706 <UART_SetConfig+0x1d6>
 80056fa:	b3bb      	cbz	r3, 800576c <UART_SetConfig+0x23c>
 80056fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005700:	d136      	bne.n	8005770 <UART_SetConfig+0x240>
 8005702:	2304      	movs	r3, #4
 8005704:	e75c      	b.n	80055c0 <UART_SetConfig+0x90>
 8005706:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800570a:	d133      	bne.n	8005774 <UART_SetConfig+0x244>
 800570c:	2308      	movs	r3, #8
 800570e:	e757      	b.n	80055c0 <UART_SetConfig+0x90>
 8005710:	2302      	movs	r3, #2
 8005712:	e755      	b.n	80055c0 <UART_SetConfig+0x90>
 8005714:	2302      	movs	r3, #2
 8005716:	e753      	b.n	80055c0 <UART_SetConfig+0x90>
 8005718:	2302      	movs	r3, #2
 800571a:	e751      	b.n	80055c0 <UART_SetConfig+0x90>
 800571c:	2300      	movs	r3, #0
 800571e:	e74f      	b.n	80055c0 <UART_SetConfig+0x90>
 8005720:	2310      	movs	r3, #16
 8005722:	e74d      	b.n	80055c0 <UART_SetConfig+0x90>
 8005724:	2310      	movs	r3, #16
 8005726:	e74b      	b.n	80055c0 <UART_SetConfig+0x90>
 8005728:	2302      	movs	r3, #2
 800572a:	e749      	b.n	80055c0 <UART_SetConfig+0x90>
 800572c:	2300      	movs	r3, #0
 800572e:	e747      	b.n	80055c0 <UART_SetConfig+0x90>
 8005730:	2310      	movs	r3, #16
 8005732:	e745      	b.n	80055c0 <UART_SetConfig+0x90>
 8005734:	2310      	movs	r3, #16
 8005736:	e743      	b.n	80055c0 <UART_SetConfig+0x90>
 8005738:	2302      	movs	r3, #2
 800573a:	e741      	b.n	80055c0 <UART_SetConfig+0x90>
 800573c:	2300      	movs	r3, #0
 800573e:	e73f      	b.n	80055c0 <UART_SetConfig+0x90>
 8005740:	2310      	movs	r3, #16
 8005742:	e73d      	b.n	80055c0 <UART_SetConfig+0x90>
 8005744:	2310      	movs	r3, #16
 8005746:	e73b      	b.n	80055c0 <UART_SetConfig+0x90>
 8005748:	2302      	movs	r3, #2
 800574a:	e739      	b.n	80055c0 <UART_SetConfig+0x90>
 800574c:	2301      	movs	r3, #1
 800574e:	e737      	b.n	80055c0 <UART_SetConfig+0x90>
 8005750:	2310      	movs	r3, #16
 8005752:	e735      	b.n	80055c0 <UART_SetConfig+0x90>
 8005754:	2310      	movs	r3, #16
 8005756:	e733      	b.n	80055c0 <UART_SetConfig+0x90>
 8005758:	2302      	movs	r3, #2
 800575a:	e731      	b.n	80055c0 <UART_SetConfig+0x90>
 800575c:	2300      	movs	r3, #0
 800575e:	e72f      	b.n	80055c0 <UART_SetConfig+0x90>
 8005760:	2310      	movs	r3, #16
 8005762:	e72d      	b.n	80055c0 <UART_SetConfig+0x90>
 8005764:	2310      	movs	r3, #16
 8005766:	e72b      	b.n	80055c0 <UART_SetConfig+0x90>
 8005768:	2302      	movs	r3, #2
 800576a:	e729      	b.n	80055c0 <UART_SetConfig+0x90>
 800576c:	2300      	movs	r3, #0
 800576e:	e727      	b.n	80055c0 <UART_SetConfig+0x90>
 8005770:	2310      	movs	r3, #16
 8005772:	e725      	b.n	80055c0 <UART_SetConfig+0x90>
 8005774:	2310      	movs	r3, #16
 8005776:	e723      	b.n	80055c0 <UART_SetConfig+0x90>
    switch (clocksource)
 8005778:	2b08      	cmp	r3, #8
 800577a:	f200 808c 	bhi.w	8005896 <UART_SetConfig+0x366>
 800577e:	e8df f003 	tbb	[pc, r3]
 8005782:	3219      	.short	0x3219
 8005784:	8a448a3c 	.word	0x8a448a3c
 8005788:	8a8a      	.short	0x8a8a
 800578a:	4e          	.byte	0x4e
 800578b:	00          	.byte	0x00
 800578c:	efff69f3 	.word	0xefff69f3
 8005790:	40011000 	.word	0x40011000
 8005794:	40004400 	.word	0x40004400
 8005798:	40004800 	.word	0x40004800
 800579c:	40004c00 	.word	0x40004c00
 80057a0:	40005000 	.word	0x40005000
 80057a4:	40011400 	.word	0x40011400
 80057a8:	40007800 	.word	0x40007800
 80057ac:	40007c00 	.word	0x40007c00
 80057b0:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80057b4:	f7fc ff1a 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 80057b8:	6862      	ldr	r2, [r4, #4]
 80057ba:	0853      	lsrs	r3, r2, #1
 80057bc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80057c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c4:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c6:	f1a3 0110 	sub.w	r1, r3, #16
 80057ca:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80057ce:	4291      	cmp	r1, r2
 80057d0:	d863      	bhi.n	800589a <UART_SetConfig+0x36a>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80057dc:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80057de:	6822      	ldr	r2, [r4, #0]
 80057e0:	60d3      	str	r3, [r2, #12]
 80057e2:	2000      	movs	r0, #0
 80057e4:	e05e      	b.n	80058a4 <UART_SetConfig+0x374>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80057e6:	f7fc ff11 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 80057ea:	6862      	ldr	r2, [r4, #4]
 80057ec:	0853      	lsrs	r3, r2, #1
 80057ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80057f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80057f6:	b29b      	uxth	r3, r3
        break;
 80057f8:	e7e5      	b.n	80057c6 <UART_SetConfig+0x296>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80057fa:	6862      	ldr	r2, [r4, #4]
 80057fc:	4b2b      	ldr	r3, [pc, #172]	@ (80058ac <UART_SetConfig+0x37c>)
 80057fe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005802:	fbb3 f3f2 	udiv	r3, r3, r2
 8005806:	b29b      	uxth	r3, r3
        break;
 8005808:	e7dd      	b.n	80057c6 <UART_SetConfig+0x296>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800580a:	f7fc fde3 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 800580e:	6862      	ldr	r2, [r4, #4]
 8005810:	0853      	lsrs	r3, r2, #1
 8005812:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005816:	fbb3 f3f2 	udiv	r3, r3, r2
 800581a:	b29b      	uxth	r3, r3
        break;
 800581c:	e7d3      	b.n	80057c6 <UART_SetConfig+0x296>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800581e:	6862      	ldr	r2, [r4, #4]
 8005820:	0853      	lsrs	r3, r2, #1
 8005822:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005826:	fbb3 f3f2 	udiv	r3, r3, r2
 800582a:	b29b      	uxth	r3, r3
        break;
 800582c:	e7cb      	b.n	80057c6 <UART_SetConfig+0x296>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800582e:	f7fc fedd 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8005832:	6862      	ldr	r2, [r4, #4]
 8005834:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005838:	fbb3 f3f2 	udiv	r3, r3, r2
 800583c:	b29b      	uxth	r3, r3
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583e:	f1a3 0110 	sub.w	r1, r3, #16
 8005842:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005846:	4291      	cmp	r1, r2
 8005848:	d82b      	bhi.n	80058a2 <UART_SetConfig+0x372>
    {
      huart->Instance->BRR = usartdiv;
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	60d3      	str	r3, [r2, #12]
 800584e:	2000      	movs	r0, #0
 8005850:	e028      	b.n	80058a4 <UART_SetConfig+0x374>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005852:	f7fc fedb 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 8005856:	6862      	ldr	r2, [r4, #4]
 8005858:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800585c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005860:	b29b      	uxth	r3, r3
        break;
 8005862:	e7ec      	b.n	800583e <UART_SetConfig+0x30e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005864:	6862      	ldr	r2, [r4, #4]
 8005866:	4b12      	ldr	r3, [pc, #72]	@ (80058b0 <UART_SetConfig+0x380>)
 8005868:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800586c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005870:	b29b      	uxth	r3, r3
        break;
 8005872:	e7e4      	b.n	800583e <UART_SetConfig+0x30e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005874:	f7fc fdae 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8005878:	6862      	ldr	r2, [r4, #4]
 800587a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800587e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005882:	b29b      	uxth	r3, r3
        break;
 8005884:	e7db      	b.n	800583e <UART_SetConfig+0x30e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005886:	6862      	ldr	r2, [r4, #4]
 8005888:	0853      	lsrs	r3, r2, #1
 800588a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800588e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005892:	b29b      	uxth	r3, r3
        break;
 8005894:	e7d3      	b.n	800583e <UART_SetConfig+0x30e>
    switch (clocksource)
 8005896:	2001      	movs	r0, #1
 8005898:	e004      	b.n	80058a4 <UART_SetConfig+0x374>
      ret = HAL_ERROR;
 800589a:	2001      	movs	r0, #1
 800589c:	e002      	b.n	80058a4 <UART_SetConfig+0x374>
    switch (clocksource)
 800589e:	2001      	movs	r0, #1
 80058a0:	e000      	b.n	80058a4 <UART_SetConfig+0x374>
    }
    else
    {
      ret = HAL_ERROR;
 80058a2:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->TxISR = NULL;
 80058a8:	6663      	str	r3, [r4, #100]	@ 0x64

  return ret;
}
 80058aa:	bd10      	pop	{r4, pc}
 80058ac:	01e84800 	.word	0x01e84800
 80058b0:	00f42400 	.word	0x00f42400

080058b4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058b4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80058b6:	f013 0f01 	tst.w	r3, #1
 80058ba:	d006      	beq.n	80058ca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058bc:	6802      	ldr	r2, [r0, #0]
 80058be:	6853      	ldr	r3, [r2, #4]
 80058c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80058c4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80058c6:	430b      	orrs	r3, r1
 80058c8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ca:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80058cc:	f013 0f02 	tst.w	r3, #2
 80058d0:	d006      	beq.n	80058e0 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058d2:	6802      	ldr	r2, [r0, #0]
 80058d4:	6853      	ldr	r3, [r2, #4]
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058da:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80058dc:	430b      	orrs	r3, r1
 80058de:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058e0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80058e2:	f013 0f04 	tst.w	r3, #4
 80058e6:	d006      	beq.n	80058f6 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058e8:	6802      	ldr	r2, [r0, #0]
 80058ea:	6853      	ldr	r3, [r2, #4]
 80058ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058f0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80058f2:	430b      	orrs	r3, r1
 80058f4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058f6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80058f8:	f013 0f08 	tst.w	r3, #8
 80058fc:	d006      	beq.n	800590c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058fe:	6802      	ldr	r2, [r0, #0]
 8005900:	6853      	ldr	r3, [r2, #4]
 8005902:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005906:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8005908:	430b      	orrs	r3, r1
 800590a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800590c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800590e:	f013 0f10 	tst.w	r3, #16
 8005912:	d006      	beq.n	8005922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005914:	6802      	ldr	r2, [r0, #0]
 8005916:	6893      	ldr	r3, [r2, #8]
 8005918:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800591c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800591e:	430b      	orrs	r3, r1
 8005920:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005922:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005924:	f013 0f20 	tst.w	r3, #32
 8005928:	d006      	beq.n	8005938 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800592a:	6802      	ldr	r2, [r0, #0]
 800592c:	6893      	ldr	r3, [r2, #8]
 800592e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005932:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8005934:	430b      	orrs	r3, r1
 8005936:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005938:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800593a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005940:	6802      	ldr	r2, [r0, #0]
 8005942:	6853      	ldr	r3, [r2, #4]
 8005944:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005948:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800594a:	430b      	orrs	r3, r1
 800594c:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800594e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005950:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005954:	d00b      	beq.n	800596e <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005956:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005958:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800595c:	d006      	beq.n	800596c <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800595e:	6802      	ldr	r2, [r0, #0]
 8005960:	6853      	ldr	r3, [r2, #4]
 8005962:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005966:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005968:	430b      	orrs	r3, r1
 800596a:	6053      	str	r3, [r2, #4]
  }
}
 800596c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800596e:	6802      	ldr	r2, [r0, #0]
 8005970:	6853      	ldr	r3, [r2, #4]
 8005972:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005976:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8005978:	430b      	orrs	r3, r1
 800597a:	6053      	str	r3, [r2, #4]
 800597c:	e7eb      	b.n	8005956 <UART_AdvFeatureConfig+0xa2>

0800597e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800597e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005982:	4605      	mov	r5, r0
 8005984:	460f      	mov	r7, r1
 8005986:	4616      	mov	r6, r2
 8005988:	4699      	mov	r9, r3
 800598a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	69dc      	ldr	r4, [r3, #28]
 8005992:	ea37 0404 	bics.w	r4, r7, r4
 8005996:	bf0c      	ite	eq
 8005998:	2401      	moveq	r4, #1
 800599a:	2400      	movne	r4, #0
 800599c:	42b4      	cmp	r4, r6
 800599e:	d11d      	bne.n	80059dc <UART_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80059a4:	d0f3      	beq.n	800598e <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a6:	f7fa fe61 	bl	800066c <HAL_GetTick>
 80059aa:	eba0 0009 	sub.w	r0, r0, r9
 80059ae:	4540      	cmp	r0, r8
 80059b0:	d802      	bhi.n	80059b8 <UART_WaitOnFlagUntilTimeout+0x3a>
 80059b2:	f1b8 0f00 	cmp.w	r8, #0
 80059b6:	d1ea      	bne.n	800598e <UART_WaitOnFlagUntilTimeout+0x10>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059b8:	682a      	ldr	r2, [r5, #0]
 80059ba:	6813      	ldr	r3, [r2, #0]
 80059bc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80059c0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c2:	682a      	ldr	r2, [r5, #0]
 80059c4:	6893      	ldr	r3, [r2, #8]
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 80059cc:	2320      	movs	r3, #32
 80059ce:	676b      	str	r3, [r5, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80059d0:	67ab      	str	r3, [r5, #120]	@ 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059d2:	2300      	movs	r3, #0
 80059d4:	f885 3070 	strb.w	r3, [r5, #112]	@ 0x70

        return HAL_TIMEOUT;
 80059d8:	2003      	movs	r0, #3
 80059da:	e000      	b.n	80059de <UART_WaitOnFlagUntilTimeout+0x60>
      }
    }
  }
  return HAL_OK;
 80059dc:	2000      	movs	r0, #0
}
 80059de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080059e2 <UART_CheckIdleState>:
{
 80059e2:	b510      	push	{r4, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	67c3      	str	r3, [r0, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80059ec:	f7fa fe3e 	bl	800066c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f013 0f08 	tst.w	r3, #8
 80059f8:	d107      	bne.n	8005a0a <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 80059fa:	2320      	movs	r3, #32
 80059fc:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80059fe:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UNLOCK(huart);
 8005a00:	2000      	movs	r0, #0
 8005a02:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
}
 8005a06:	b002      	add	sp, #8
 8005a08:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	4603      	mov	r3, r0
 8005a12:	2200      	movs	r2, #0
 8005a14:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f7ff ffb0 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d0eb      	beq.n	80059fa <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005a22:	2003      	movs	r0, #3
 8005a24:	e7ef      	b.n	8005a06 <UART_CheckIdleState+0x24>

08005a26 <HAL_UART_Init>:
  if (huart == NULL)
 8005a26:	b368      	cbz	r0, 8005a84 <HAL_UART_Init+0x5e>
{
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8005a2e:	b303      	cbz	r3, 8005a72 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005a30:	2324      	movs	r3, #36	@ 0x24
 8005a32:	6763      	str	r3, [r4, #116]	@ 0x74
  __HAL_UART_DISABLE(huart);
 8005a34:	6822      	ldr	r2, [r4, #0]
 8005a36:	6813      	ldr	r3, [r2, #0]
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f7ff fd76 	bl	8005530 <UART_SetConfig>
 8005a44:	2801      	cmp	r0, #1
 8005a46:	d013      	beq.n	8005a70 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a48:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005a4a:	b9bb      	cbnz	r3, 8005a7c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a4c:	6822      	ldr	r2, [r4, #0]
 8005a4e:	6853      	ldr	r3, [r2, #4]
 8005a50:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8005a54:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a56:	6822      	ldr	r2, [r4, #0]
 8005a58:	6893      	ldr	r3, [r2, #8]
 8005a5a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8005a5e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005a60:	6822      	ldr	r2, [r4, #0]
 8005a62:	6813      	ldr	r3, [r2, #0]
 8005a64:	f043 0301 	orr.w	r3, r3, #1
 8005a68:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7ff ffb9 	bl	80059e2 <UART_CheckIdleState>
}
 8005a70:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005a72:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
    HAL_UART_MspInit(huart);
 8005a76:	f009 f9f7 	bl	800ee68 <HAL_UART_MspInit>
 8005a7a:	e7d9      	b.n	8005a30 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7ff ff19 	bl	80058b4 <UART_AdvFeatureConfig>
 8005a82:	e7e3      	b.n	8005a4c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8005a84:	2001      	movs	r0, #1
}
 8005a86:	4770      	bx	lr

08005a88 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8005a88:	2884      	cmp	r0, #132	@ 0x84
 8005a8a:	d001      	beq.n	8005a90 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8005a8c:	3003      	adds	r0, #3
 8005a8e:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a90:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8005a92:	4770      	bx	lr

08005a94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a94:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005a96:	f001 fa71 	bl	8006f7c <vTaskStartScheduler>
  
  return osOK;
}
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	bd08      	pop	{r3, pc}

08005a9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005aa6:	6944      	ldr	r4, [r0, #20]
 8005aa8:	b1c4      	cbz	r4, 8005adc <osThreadCreate+0x3e>
 8005aaa:	6985      	ldr	r5, [r0, #24]
 8005aac:	b1b5      	cbz	r5, 8005adc <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aae:	6847      	ldr	r7, [r0, #4]
 8005ab0:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ab4:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ab8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8005abc:	f7ff ffe4 	bl	8005a88 <makeFreeRtosPriority>
 8005ac0:	9502      	str	r5, [sp, #8]
 8005ac2:	9401      	str	r4, [sp, #4]
 8005ac4:	9000      	str	r0, [sp, #0]
 8005ac6:	4633      	mov	r3, r6
 8005ac8:	464a      	mov	r2, r9
 8005aca:	4641      	mov	r1, r8
 8005acc:	4638      	mov	r0, r7
 8005ace:	f001 f9e3 	bl	8006e98 <xTaskCreateStatic>
 8005ad2:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ad4:	9805      	ldr	r0, [sp, #20]
}
 8005ad6:	b007      	add	sp, #28
 8005ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005adc:	6844      	ldr	r4, [r0, #4]
 8005ade:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ae0:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ae2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8005ae6:	f7ff ffcf 	bl	8005a88 <makeFreeRtosPriority>
 8005aea:	ab05      	add	r3, sp, #20
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	9000      	str	r0, [sp, #0]
 8005af0:	4633      	mov	r3, r6
 8005af2:	b2ba      	uxth	r2, r7
 8005af4:	4629      	mov	r1, r5
 8005af6:	4620      	mov	r0, r4
 8005af8:	f001 fa0e 	bl	8006f18 <xTaskCreate>
 8005afc:	2801      	cmp	r0, #1
 8005afe:	d0e9      	beq.n	8005ad4 <osThreadCreate+0x36>
      return NULL;
 8005b00:	2000      	movs	r0, #0
 8005b02:	e7e8      	b.n	8005ad6 <osThreadCreate+0x38>

08005b04 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b04:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b06:	b900      	cbnz	r0, 8005b0a <osDelay+0x6>
 8005b08:	2001      	movs	r0, #1
 8005b0a:	f001 fb8f 	bl	800722c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b0e:	2000      	movs	r0, #0
 8005b10:	bd08      	pop	{r3, pc}

08005b12 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005b12:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005b14:	6841      	ldr	r1, [r0, #4]
 8005b16:	b119      	cbz	r1, 8005b20 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005b18:	2001      	movs	r0, #1
 8005b1a:	f000 fdad 	bl	8006678 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005b1e:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8005b20:	2001      	movs	r0, #1
 8005b22:	f000 fd9e 	bl	8006662 <xQueueCreateMutex>
 8005b26:	e7fa      	b.n	8005b1e <osMutexCreate+0xc>

08005b28 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005b2c:	6844      	ldr	r4, [r0, #4]
 8005b2e:	b17c      	cbz	r4, 8005b50 <osSemaphoreCreate+0x28>
    if (count == 1) {
 8005b30:	2901      	cmp	r1, #1
 8005b32:	d003      	beq.n	8005b3c <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005b34:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005b36:	4620      	mov	r0, r4
 8005b38:	b002      	add	sp, #8
 8005b3a:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	4623      	mov	r3, r4
 8005b42:	2200      	movs	r2, #0
 8005b44:	4611      	mov	r1, r2
 8005b46:	2001      	movs	r0, #1
 8005b48:	f000 fc2e 	bl	80063a8 <xQueueGenericCreateStatic>
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	e7f2      	b.n	8005b36 <osSemaphoreCreate+0xe>
    if (count == 1) {
 8005b50:	2901      	cmp	r1, #1
 8005b52:	d1f0      	bne.n	8005b36 <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 8005b54:	2203      	movs	r2, #3
 8005b56:	2100      	movs	r1, #0
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f000 fc81 	bl	8006460 <xQueueGenericCreate>
 8005b5e:	4604      	mov	r4, r0
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d0e8      	beq.n	8005b36 <osSemaphoreCreate+0xe>
 8005b64:	2300      	movs	r3, #0
 8005b66:	461a      	mov	r2, r3
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f000 fca2 	bl	80064b2 <xQueueGenericSend>
      return sema;
 8005b6e:	e7e2      	b.n	8005b36 <osSemaphoreCreate+0xe>

08005b70 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005b70:	b500      	push	{lr}
 8005b72:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005b74:	6882      	ldr	r2, [r0, #8]
 8005b76:	b142      	cbz	r2, 8005b8a <osMessageCreate+0x1a>
 8005b78:	68c3      	ldr	r3, [r0, #12]
 8005b7a:	b133      	cbz	r3, 8005b8a <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	9100      	str	r1, [sp, #0]
 8005b80:	6841      	ldr	r1, [r0, #4]
 8005b82:	6800      	ldr	r0, [r0, #0]
 8005b84:	f000 fc10 	bl	80063a8 <xQueueGenericCreateStatic>
 8005b88:	e004      	b.n	8005b94 <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	6841      	ldr	r1, [r0, #4]
 8005b8e:	6800      	ldr	r0, [r0, #0]
 8005b90:	f000 fc66 	bl	8006460 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005b94:	b003      	add	sp, #12
 8005b96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005b9c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b9c:	4a12      	ldr	r2, [pc, #72]	@ (8005be8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b9e:	f012 0f07 	tst.w	r2, #7
 8005ba2:	d01e      	beq.n	8005be2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ba4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ba6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005baa:	f5c1 3380 	rsb	r3, r1, #65536	@ 0x10000
 8005bae:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bb0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bb2:	480e      	ldr	r0, [pc, #56]	@ (8005bec <prvHeapInit+0x50>)
 8005bb4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bba:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005bbc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bbe:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005bc2:	480b      	ldr	r0, [pc, #44]	@ (8005bf0 <prvHeapInit+0x54>)
 8005bc4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005bc6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bc8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bca:	1a99      	subs	r1, r3, r2
 8005bcc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bce:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bd0:	4b08      	ldr	r3, [pc, #32]	@ (8005bf4 <prvHeapInit+0x58>)
 8005bd2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bd4:	4b08      	ldr	r3, [pc, #32]	@ (8005bf8 <prvHeapInit+0x5c>)
 8005bd6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bd8:	4b08      	ldr	r3, [pc, #32]	@ (8005bfc <prvHeapInit+0x60>)
 8005bda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005bde:	601a      	str	r2, [r3, #0]
}
 8005be0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005be2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005be6:	e7e4      	b.n	8005bb2 <prvHeapInit+0x16>
 8005be8:	20000618 	.word	0x20000618
 8005bec:	20000610 	.word	0x20000610
 8005bf0:	2000060c 	.word	0x2000060c
 8005bf4:	20000604 	.word	0x20000604
 8005bf8:	20000608 	.word	0x20000608
 8005bfc:	20000600 	.word	0x20000600

08005c00 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c00:	4b16      	ldr	r3, [pc, #88]	@ (8005c5c <prvInsertBlockIntoFreeList+0x5c>)
 8005c02:	461a      	mov	r2, r3
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4283      	cmp	r3, r0
 8005c08:	d3fb      	bcc.n	8005c02 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c0a:	6851      	ldr	r1, [r2, #4]
 8005c0c:	eb02 0c01 	add.w	ip, r2, r1
 8005c10:	4584      	cmp	ip, r0
 8005c12:	d009      	beq.n	8005c28 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c14:	6841      	ldr	r1, [r0, #4]
 8005c16:	eb00 0c01 	add.w	ip, r0, r1
 8005c1a:	4563      	cmp	r3, ip
 8005c1c:	d009      	beq.n	8005c32 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c1e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c20:	4290      	cmp	r0, r2
 8005c22:	d019      	beq.n	8005c58 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c24:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8005c26:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c28:	6840      	ldr	r0, [r0, #4]
 8005c2a:	4401      	add	r1, r0
 8005c2c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8005c2e:	4610      	mov	r0, r2
 8005c30:	e7f0      	b.n	8005c14 <prvInsertBlockIntoFreeList+0x14>
{
 8005c32:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c34:	4c0a      	ldr	r4, [pc, #40]	@ (8005c60 <prvInsertBlockIntoFreeList+0x60>)
 8005c36:	6824      	ldr	r4, [r4, #0]
 8005c38:	42a3      	cmp	r3, r4
 8005c3a:	d00b      	beq.n	8005c54 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4419      	add	r1, r3
 8005c40:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8005c48:	4290      	cmp	r0, r2
 8005c4a:	d000      	beq.n	8005c4e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c4c:	6010      	str	r0, [r2, #0]
	}
}
 8005c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c52:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c54:	6004      	str	r4, [r0, #0]
 8005c56:	e7f7      	b.n	8005c48 <prvInsertBlockIntoFreeList+0x48>
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20000610 	.word	0x20000610
 8005c60:	2000060c 	.word	0x2000060c

08005c64 <pvPortMalloc>:
{
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005c68:	f001 f9cc 	bl	8007004 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005c6c:	4b38      	ldr	r3, [pc, #224]	@ (8005d50 <pvPortMalloc+0xec>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	b1b3      	cbz	r3, 8005ca0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c72:	4b38      	ldr	r3, [pc, #224]	@ (8005d54 <pvPortMalloc+0xf0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	421c      	tst	r4, r3
 8005c78:	d14e      	bne.n	8005d18 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8005c7a:	2c00      	cmp	r4, #0
 8005c7c:	d04e      	beq.n	8005d1c <pvPortMalloc+0xb8>
				xWantedSize += xHeapStructSize;
 8005c7e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c82:	f014 0f07 	tst.w	r4, #7
 8005c86:	d002      	beq.n	8005c8e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c88:	f022 0207 	bic.w	r2, r2, #7
 8005c8c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c8e:	2a00      	cmp	r2, #0
 8005c90:	d055      	beq.n	8005d3e <pvPortMalloc+0xda>
 8005c92:	4b31      	ldr	r3, [pc, #196]	@ (8005d58 <pvPortMalloc+0xf4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d353      	bcc.n	8005d42 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8005c9a:	4930      	ldr	r1, [pc, #192]	@ (8005d5c <pvPortMalloc+0xf8>)
 8005c9c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c9e:	e004      	b.n	8005caa <pvPortMalloc+0x46>
			prvHeapInit();
 8005ca0:	f7ff ff7c 	bl	8005b9c <prvHeapInit>
 8005ca4:	e7e5      	b.n	8005c72 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8005ca6:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ca8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005caa:	6863      	ldr	r3, [r4, #4]
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d202      	bcs.n	8005cb6 <pvPortMalloc+0x52>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f7      	bne.n	8005ca6 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8005cb6:	4b26      	ldr	r3, [pc, #152]	@ (8005d50 <pvPortMalloc+0xec>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	42a3      	cmp	r3, r4
 8005cbc:	d043      	beq.n	8005d46 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cbe:	680d      	ldr	r5, [r1, #0]
 8005cc0:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d912      	bls.n	8005cf4 <pvPortMalloc+0x90>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cce:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd0:	f010 0f07 	tst.w	r0, #7
 8005cd4:	d00a      	beq.n	8005cec <pvPortMalloc+0x88>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cda:	b672      	cpsid	i
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	b662      	cpsie	i
 8005cea:	e7fe      	b.n	8005cea <pvPortMalloc+0x86>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cec:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cee:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cf0:	f7ff ff86 	bl	8005c00 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cf4:	6862      	ldr	r2, [r4, #4]
 8005cf6:	4918      	ldr	r1, [pc, #96]	@ (8005d58 <pvPortMalloc+0xf4>)
 8005cf8:	680b      	ldr	r3, [r1, #0]
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cfe:	4918      	ldr	r1, [pc, #96]	@ (8005d60 <pvPortMalloc+0xfc>)
 8005d00:	6809      	ldr	r1, [r1, #0]
 8005d02:	428b      	cmp	r3, r1
 8005d04:	d201      	bcs.n	8005d0a <pvPortMalloc+0xa6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d06:	4916      	ldr	r1, [pc, #88]	@ (8005d60 <pvPortMalloc+0xfc>)
 8005d08:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d0a:	4b12      	ldr	r3, [pc, #72]	@ (8005d54 <pvPortMalloc+0xf0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	e002      	b.n	8005d1e <pvPortMalloc+0xba>
void *pvReturn = NULL;
 8005d18:	2500      	movs	r5, #0
 8005d1a:	e000      	b.n	8005d1e <pvPortMalloc+0xba>
 8005d1c:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8005d1e:	f001 fa07 	bl	8007130 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d22:	f015 0f07 	tst.w	r5, #7
 8005d26:	d010      	beq.n	8005d4a <pvPortMalloc+0xe6>
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	b672      	cpsid	i
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	b662      	cpsie	i
 8005d3c:	e7fe      	b.n	8005d3c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8005d3e:	2500      	movs	r5, #0
 8005d40:	e7ed      	b.n	8005d1e <pvPortMalloc+0xba>
 8005d42:	2500      	movs	r5, #0
 8005d44:	e7eb      	b.n	8005d1e <pvPortMalloc+0xba>
 8005d46:	2500      	movs	r5, #0
 8005d48:	e7e9      	b.n	8005d1e <pvPortMalloc+0xba>
}
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	bf00      	nop
 8005d50:	2000060c 	.word	0x2000060c
 8005d54:	20000600 	.word	0x20000600
 8005d58:	20000608 	.word	0x20000608
 8005d5c:	20000610 	.word	0x20000610
 8005d60:	20000604 	.word	0x20000604

08005d64 <vPortFree>:
	if( pv != NULL )
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d034      	beq.n	8005dd2 <vPortFree+0x6e>
{
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8005d6c:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d70:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005d74:	4a17      	ldr	r2, [pc, #92]	@ (8005dd4 <vPortFree+0x70>)
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	4213      	tst	r3, r2
 8005d7a:	d10a      	bne.n	8005d92 <vPortFree+0x2e>
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	b672      	cpsid	i
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	b662      	cpsie	i
 8005d90:	e7fe      	b.n	8005d90 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d92:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005d96:	b151      	cbz	r1, 8005dae <vPortFree+0x4a>
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	b672      	cpsid	i
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	b662      	cpsie	i
 8005dac:	e7fe      	b.n	8005dac <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dae:	ea23 0302 	bic.w	r3, r3, r2
 8005db2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005db6:	f001 f925 	bl	8007004 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dba:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8005dbe:	4a06      	ldr	r2, [pc, #24]	@ (8005dd8 <vPortFree+0x74>)
 8005dc0:	6813      	ldr	r3, [r2, #0]
 8005dc2:	440b      	add	r3, r1
 8005dc4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f7ff ff1a 	bl	8005c00 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8005dcc:	f001 f9b0 	bl	8007130 <xTaskResumeAll>
}
 8005dd0:	bd38      	pop	{r3, r4, r5, pc}
 8005dd2:	4770      	bx	lr
 8005dd4:	20000600 	.word	0x20000600
 8005dd8:	20000608 	.word	0x20000608

08005ddc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ddc:	f100 0308 	add.w	r3, r0, #8
 8005de0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005de2:	f04f 32ff 	mov.w	r2, #4294967295
 8005de6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005df0:	4770      	bx	lr

08005df2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005df6:	4770      	bx	lr

08005df8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005df8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dfa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e00:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e02:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e04:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005e06:	6803      	ldr	r3, [r0, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	6003      	str	r3, [r0, #0]
}
 8005e0c:	4770      	bx	lr

08005e0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e0e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e10:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e12:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005e16:	d011      	beq.n	8005e3c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e18:	f100 0308 	add.w	r3, r0, #8
 8005e1c:	461c      	mov	r4, r3
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	42aa      	cmp	r2, r5
 8005e24:	d9fa      	bls.n	8005e1c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e26:	6863      	ldr	r3, [r4, #4]
 8005e28:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e2a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e2c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e2e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e30:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005e32:	6803      	ldr	r3, [r0, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	6003      	str	r3, [r0, #0]
}
 8005e38:	bc30      	pop	{r4, r5}
 8005e3a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e3c:	6904      	ldr	r4, [r0, #16]
 8005e3e:	e7f2      	b.n	8005e26 <vListInsert+0x18>

08005e40 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e40:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e42:	6841      	ldr	r1, [r0, #4]
 8005e44:	6882      	ldr	r2, [r0, #8]
 8005e46:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e48:	6841      	ldr	r1, [r0, #4]
 8005e4a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	4282      	cmp	r2, r0
 8005e50:	d006      	beq.n	8005e60 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005e52:	2200      	movs	r2, #0
 8005e54:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	3a01      	subs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e5c:	6818      	ldr	r0, [r3, #0]
}
 8005e5e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e60:	6882      	ldr	r2, [r0, #8]
 8005e62:	605a      	str	r2, [r3, #4]
 8005e64:	e7f5      	b.n	8005e52 <uxListRemove+0x12>
	...

08005e68 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e68:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005eac <prvTaskExitError+0x44>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	d00a      	beq.n	8005e8e <prvTaskExitError+0x26>
 8005e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7c:	b672      	cpsid	i
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	b662      	cpsie	i
 8005e8c:	e7fe      	b.n	8005e8c <prvTaskExitError+0x24>
 8005e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e92:	b672      	cpsid	i
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ea2:	9b01      	ldr	r3, [sp, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0fc      	beq.n	8005ea2 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ea8:	b002      	add	sp, #8
 8005eaa:	4770      	bx	lr
 8005eac:	20000008 	.word	0x20000008

08005eb0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005eb0:	4808      	ldr	r0, [pc, #32]	@ (8005ed4 <prvPortStartFirstTask+0x24>)
 8005eb2:	6800      	ldr	r0, [r0, #0]
 8005eb4:	6800      	ldr	r0, [r0, #0]
 8005eb6:	f380 8808 	msr	MSP, r0
 8005eba:	f04f 0000 	mov.w	r0, #0
 8005ebe:	f380 8814 	msr	CONTROL, r0
 8005ec2:	b662      	cpsie	i
 8005ec4:	b661      	cpsie	f
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	df00      	svc	0
 8005ed0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ed2:	0000      	.short	0x0000
 8005ed4:	e000ed08 	.word	0xe000ed08

08005ed8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ed8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ee8 <vPortEnableVFP+0x10>
 8005edc:	6801      	ldr	r1, [r0, #0]
 8005ede:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005ee2:	6001      	str	r1, [r0, #0]
 8005ee4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ee6:	0000      	.short	0x0000
 8005ee8:	e000ed88 	.word	0xe000ed88

08005eec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ef0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ef4:	f021 0101 	bic.w	r1, r1, #1
 8005ef8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <pxPortInitialiseStack+0x28>)
 8005efe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f02:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f06:	f06f 0302 	mvn.w	r3, #2
 8005f0a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005f0e:	3844      	subs	r0, #68	@ 0x44
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	08005e69 	.word	0x08005e69
	...

08005f20 <SVC_Handler>:
	__asm volatile (
 8005f20:	4b07      	ldr	r3, [pc, #28]	@ (8005f40 <pxCurrentTCBConst2>)
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	6808      	ldr	r0, [r1, #0]
 8005f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2a:	f380 8809 	msr	PSP, r0
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f380 8811 	msr	BASEPRI, r0
 8005f3a:	4770      	bx	lr
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst2>:
 8005f40:	20010748 	.word	0x20010748

08005f44 <vPortEnterCritical>:
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	b672      	cpsid	i
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	b662      	cpsie	i
	uxCriticalNesting++;
 8005f58:	4a0c      	ldr	r2, [pc, #48]	@ (8005f8c <vPortEnterCritical+0x48>)
 8005f5a:	6813      	ldr	r3, [r2, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d000      	beq.n	8005f66 <vPortEnterCritical+0x22>
}
 8005f64:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f66:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f6a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8005f6e:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8005f72:	d0f7      	beq.n	8005f64 <vPortEnterCritical+0x20>
 8005f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f78:	b672      	cpsid	i
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	b662      	cpsie	i
 8005f88:	e7fe      	b.n	8005f88 <vPortEnterCritical+0x44>
 8005f8a:	bf00      	nop
 8005f8c:	20000008 	.word	0x20000008

08005f90 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005f90:	4b0a      	ldr	r3, [pc, #40]	@ (8005fbc <vPortExitCritical+0x2c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	b953      	cbnz	r3, 8005fac <vPortExitCritical+0x1c>
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	b672      	cpsid	i
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	b662      	cpsie	i
 8005faa:	e7fe      	b.n	8005faa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8005fac:	3b01      	subs	r3, #1
 8005fae:	4a03      	ldr	r2, [pc, #12]	@ (8005fbc <vPortExitCritical+0x2c>)
 8005fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fb2:	b90b      	cbnz	r3, 8005fb8 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fb4:	f383 8811 	msr	BASEPRI, r3
}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20000008 	.word	0x20000008

08005fc0 <PendSV_Handler>:
	__asm volatile
 8005fc0:	f3ef 8009 	mrs	r0, PSP
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	4b15      	ldr	r3, [pc, #84]	@ (8006020 <pxCurrentTCBConst>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	f01e 0f10 	tst.w	lr, #16
 8005fd0:	bf08      	it	eq
 8005fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fda:	6010      	str	r0, [r2, #0]
 8005fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005fe4:	b672      	cpsid	i
 8005fe6:	f380 8811 	msr	BASEPRI, r0
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	b662      	cpsie	i
 8005ff4:	f001 f942 	bl	800727c <vTaskSwitchContext>
 8005ff8:	f04f 0000 	mov.w	r0, #0
 8005ffc:	f380 8811 	msr	BASEPRI, r0
 8006000:	bc09      	pop	{r0, r3}
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	6808      	ldr	r0, [r1, #0]
 8006006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600a:	f01e 0f10 	tst.w	lr, #16
 800600e:	bf08      	it	eq
 8006010:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006014:	f380 8809 	msr	PSP, r0
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop

08006020 <pxCurrentTCBConst>:
 8006020:	20010748 	.word	0x20010748

08006024 <SysTick_Handler>:
{
 8006024:	b508      	push	{r3, lr}
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	b672      	cpsid	i
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800603a:	f000 ffeb 	bl	8007014 <xTaskIncrementTick>
 800603e:	b128      	cbz	r0, 800604c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006040:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006048:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800604c:	2300      	movs	r3, #0
 800604e:	f383 8811 	msr	BASEPRI, r3
}
 8006052:	bd08      	pop	{r3, pc}

08006054 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006054:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006058:	2300      	movs	r3, #0
 800605a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800605c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800605e:	4b05      	ldr	r3, [pc, #20]	@ (8006074 <vPortSetupTimerInterrupt+0x20>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4905      	ldr	r1, [pc, #20]	@ (8006078 <vPortSetupTimerInterrupt+0x24>)
 8006064:	fba1 1303 	umull	r1, r3, r1, r3
 8006068:	099b      	lsrs	r3, r3, #6
 800606a:	3b01      	subs	r3, #1
 800606c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800606e:	2307      	movs	r3, #7
 8006070:	6113      	str	r3, [r2, #16]
}
 8006072:	4770      	bx	lr
 8006074:	200003fc 	.word	0x200003fc
 8006078:	10624dd3 	.word	0x10624dd3

0800607c <xPortStartScheduler>:
{
 800607c:	b530      	push	{r4, r5, lr}
 800607e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006080:	4b2f      	ldr	r3, [pc, #188]	@ (8006140 <xPortStartScheduler+0xc4>)
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006088:	22ff      	movs	r2, #255	@ 0xff
 800608a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006094:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006098:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800609c:	4a29      	ldr	r2, [pc, #164]	@ (8006144 <xPortStartScheduler+0xc8>)
 800609e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060a0:	4b29      	ldr	r3, [pc, #164]	@ (8006148 <xPortStartScheduler+0xcc>)
 80060a2:	2207      	movs	r2, #7
 80060a4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060a6:	e009      	b.n	80060bc <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80060a8:	4a27      	ldr	r2, [pc, #156]	@ (8006148 <xPortStartScheduler+0xcc>)
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80060c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80060c4:	d1f0      	bne.n	80060a8 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060c6:	4b20      	ldr	r3, [pc, #128]	@ (8006148 <xPortStartScheduler+0xcc>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d00a      	beq.n	80060e4 <xPortStartScheduler+0x68>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	b672      	cpsid	i
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	b662      	cpsie	i
 80060e2:	e7fe      	b.n	80060e2 <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	4a18      	ldr	r2, [pc, #96]	@ (8006148 <xPortStartScheduler+0xcc>)
 80060e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060ee:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	4a12      	ldr	r2, [pc, #72]	@ (8006140 <xPortStartScheduler+0xc4>)
 80060f6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060f8:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80060fc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006104:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006108:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800610c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006110:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8006114:	f7ff ff9e 	bl	8006054 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006118:	2500      	movs	r5, #0
 800611a:	4b0c      	ldr	r3, [pc, #48]	@ (800614c <xPortStartScheduler+0xd0>)
 800611c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800611e:	f7ff fedb 	bl	8005ed8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006122:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006126:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800612a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800612e:	f7ff febf 	bl	8005eb0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006132:	f001 f8a3 	bl	800727c <vTaskSwitchContext>
	prvTaskExitError();
 8006136:	f7ff fe97 	bl	8005e68 <prvTaskExitError>
}
 800613a:	4628      	mov	r0, r5
 800613c:	b003      	add	sp, #12
 800613e:	bd30      	pop	{r4, r5, pc}
 8006140:	e000e400 	.word	0xe000e400
 8006144:	2001061c 	.word	0x2001061c
 8006148:	20010618 	.word	0x20010618
 800614c:	20000008 	.word	0x20000008

08006150 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006150:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006154:	2b0f      	cmp	r3, #15
 8006156:	d911      	bls.n	800617c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006158:	4a13      	ldr	r2, [pc, #76]	@ (80061a8 <vPortValidateInterruptPriority+0x58>)
 800615a:	5c9b      	ldrb	r3, [r3, r2]
 800615c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800615e:	4a13      	ldr	r2, [pc, #76]	@ (80061ac <vPortValidateInterruptPriority+0x5c>)
 8006160:	7812      	ldrb	r2, [r2, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d90a      	bls.n	800617c <vPortValidateInterruptPriority+0x2c>
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	b672      	cpsid	i
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	b662      	cpsie	i
 800617a:	e7fe      	b.n	800617a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800617c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006180:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006184:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006188:	4a09      	ldr	r2, [pc, #36]	@ (80061b0 <vPortValidateInterruptPriority+0x60>)
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	4293      	cmp	r3, r2
 800618e:	d90a      	bls.n	80061a6 <vPortValidateInterruptPriority+0x56>
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	b672      	cpsid	i
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	b662      	cpsie	i
 80061a4:	e7fe      	b.n	80061a4 <vPortValidateInterruptPriority+0x54>
	}
 80061a6:	4770      	bx	lr
 80061a8:	e000e3f0 	.word	0xe000e3f0
 80061ac:	2001061c 	.word	0x2001061c
 80061b0:	20010618 	.word	0x20010618

080061b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80061b4:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80061b6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80061b8:	b118      	cbz	r0, 80061c2 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80061ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80061c2:	4770      	bx	lr

080061c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061c4:	b510      	push	{r4, lr}
 80061c6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061c8:	f7ff febc 	bl	8005f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80061ce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d004      	beq.n	80061de <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80061d4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80061d6:	f7ff fedb 	bl	8005f90 <vPortExitCritical>

	return xReturn;
}
 80061da:	4620      	mov	r0, r4
 80061dc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80061de:	2401      	movs	r4, #1
 80061e0:	e7f9      	b.n	80061d6 <prvIsQueueFull+0x12>

080061e2 <prvIsQueueEmpty>:
{
 80061e2:	b510      	push	{r4, lr}
 80061e4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80061e6:	f7ff fead 	bl	8005f44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80061ec:	b923      	cbnz	r3, 80061f8 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80061ee:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80061f0:	f7ff fece 	bl	8005f90 <vPortExitCritical>
}
 80061f4:	4620      	mov	r0, r4
 80061f6:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80061f8:	2400      	movs	r4, #0
 80061fa:	e7f9      	b.n	80061f0 <prvIsQueueEmpty+0xe>

080061fc <prvCopyDataToQueue>:
{
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	4604      	mov	r4, r0
 8006200:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006202:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006204:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006206:	b95a      	cbnz	r2, 8006220 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006208:	6803      	ldr	r3, [r0, #0]
 800620a:	b11b      	cbz	r3, 8006214 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800620c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800620e:	3601      	adds	r6, #1
 8006210:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8006212:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006214:	6840      	ldr	r0, [r0, #4]
 8006216:	f001 f9ad 	bl	8007574 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	6063      	str	r3, [r4, #4]
 800621e:	e7f6      	b.n	800620e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8006220:	b96d      	cbnz	r5, 800623e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006222:	6880      	ldr	r0, [r0, #8]
 8006224:	f009 fe8d 	bl	800ff42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006228:	68a3      	ldr	r3, [r4, #8]
 800622a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800622c:	4413      	add	r3, r2
 800622e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006230:	6862      	ldr	r2, [r4, #4]
 8006232:	4293      	cmp	r3, r2
 8006234:	d319      	bcc.n	800626a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800623a:	4628      	mov	r0, r5
 800623c:	e7e7      	b.n	800620e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800623e:	68c0      	ldr	r0, [r0, #12]
 8006240:	f009 fe7f 	bl	800ff42 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006244:	68e3      	ldr	r3, [r4, #12]
 8006246:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006248:	4251      	negs	r1, r2
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800624e:	6822      	ldr	r2, [r4, #0]
 8006250:	4293      	cmp	r3, r2
 8006252:	d202      	bcs.n	800625a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	440b      	add	r3, r1
 8006258:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800625a:	2d02      	cmp	r5, #2
 800625c:	d001      	beq.n	8006262 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800625e:	2000      	movs	r0, #0
 8006260:	e7d5      	b.n	800620e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006262:	b126      	cbz	r6, 800626e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8006264:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8006266:	2000      	movs	r0, #0
 8006268:	e7d1      	b.n	800620e <prvCopyDataToQueue+0x12>
 800626a:	4628      	mov	r0, r5
 800626c:	e7cf      	b.n	800620e <prvCopyDataToQueue+0x12>
 800626e:	2000      	movs	r0, #0
 8006270:	e7cd      	b.n	800620e <prvCopyDataToQueue+0x12>

08006272 <prvCopyDataFromQueue>:
{
 8006272:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006274:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006276:	b16a      	cbz	r2, 8006294 <prvCopyDataFromQueue+0x22>
{
 8006278:	b510      	push	{r4, lr}
 800627a:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800627c:	68d9      	ldr	r1, [r3, #12]
 800627e:	4411      	add	r1, r2
 8006280:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006282:	685c      	ldr	r4, [r3, #4]
 8006284:	42a1      	cmp	r1, r4
 8006286:	d301      	bcc.n	800628c <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006288:	6819      	ldr	r1, [r3, #0]
 800628a:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800628c:	68d9      	ldr	r1, [r3, #12]
 800628e:	f009 fe58 	bl	800ff42 <memcpy>
}
 8006292:	bd10      	pop	{r4, pc}
 8006294:	4770      	bx	lr

08006296 <prvUnlockQueue>:
{
 8006296:	b538      	push	{r3, r4, r5, lr}
 8006298:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800629a:	f7ff fe53 	bl	8005f44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800629e:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 80062a2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062a4:	e001      	b.n	80062aa <prvUnlockQueue+0x14>
			--cTxLock;
 80062a6:	3c01      	subs	r4, #1
 80062a8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062aa:	2c00      	cmp	r4, #0
 80062ac:	dd0a      	ble.n	80062c4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062ae:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80062b0:	b143      	cbz	r3, 80062c4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062b2:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80062b6:	f001 f84f 	bl	8007358 <xTaskRemoveFromEventList>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d0f3      	beq.n	80062a6 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80062be:	f001 f8e5 	bl	800748c <vTaskMissedYield>
 80062c2:	e7f0      	b.n	80062a6 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80062c4:	23ff      	movs	r3, #255	@ 0xff
 80062c6:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80062ca:	f7ff fe61 	bl	8005f90 <vPortExitCritical>
	taskENTER_CRITICAL();
 80062ce:	f7ff fe39 	bl	8005f44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80062d2:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 80062d6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062d8:	e001      	b.n	80062de <prvUnlockQueue+0x48>
				--cRxLock;
 80062da:	3c01      	subs	r4, #1
 80062dc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062de:	2c00      	cmp	r4, #0
 80062e0:	dd0a      	ble.n	80062f8 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e2:	692b      	ldr	r3, [r5, #16]
 80062e4:	b143      	cbz	r3, 80062f8 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e6:	f105 0010 	add.w	r0, r5, #16
 80062ea:	f001 f835 	bl	8007358 <xTaskRemoveFromEventList>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d0f3      	beq.n	80062da <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80062f2:	f001 f8cb 	bl	800748c <vTaskMissedYield>
 80062f6:	e7f0      	b.n	80062da <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80062f8:	23ff      	movs	r3, #255	@ 0xff
 80062fa:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80062fe:	f7ff fe47 	bl	8005f90 <vPortExitCritical>
}
 8006302:	bd38      	pop	{r3, r4, r5, pc}

08006304 <xQueueGenericReset>:
{
 8006304:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8006306:	b1e0      	cbz	r0, 8006342 <xQueueGenericReset+0x3e>
 8006308:	460d      	mov	r5, r1
 800630a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800630c:	f7ff fe1a 	bl	8005f44 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006314:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006316:	fb01 3002 	mla	r0, r1, r2, r3
 800631a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800631c:	2000      	movs	r0, #0
 800631e:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006320:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006322:	3a01      	subs	r2, #1
 8006324:	fb02 3301 	mla	r3, r2, r1, r3
 8006328:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800632a:	23ff      	movs	r3, #255	@ 0xff
 800632c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006330:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8006334:	bb0d      	cbnz	r5, 800637a <xQueueGenericReset+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	b973      	cbnz	r3, 8006358 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 800633a:	f7ff fe29 	bl	8005f90 <vPortExitCritical>
}
 800633e:	2001      	movs	r0, #1
 8006340:	bd38      	pop	{r3, r4, r5, pc}
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	b672      	cpsid	i
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	b662      	cpsie	i
	configASSERT( pxQueue );
 8006356:	e7fe      	b.n	8006356 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006358:	f104 0010 	add.w	r0, r4, #16
 800635c:	f000 fffc 	bl	8007358 <xTaskRemoveFromEventList>
 8006360:	2800      	cmp	r0, #0
 8006362:	d0ea      	beq.n	800633a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8006364:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800636c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	e7df      	b.n	800633a <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800637a:	f104 0010 	add.w	r0, r4, #16
 800637e:	f7ff fd2d 	bl	8005ddc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006382:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006386:	f7ff fd29 	bl	8005ddc <vListInitialise>
 800638a:	e7d6      	b.n	800633a <xQueueGenericReset+0x36>

0800638c <prvInitialiseNewQueue>:
{
 800638c:	b510      	push	{r4, lr}
 800638e:	4603      	mov	r3, r0
 8006390:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006392:	460c      	mov	r4, r1
 8006394:	b931      	cbnz	r1, 80063a4 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006396:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8006398:	63c3      	str	r3, [r0, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800639a:	6404      	str	r4, [r0, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800639c:	2101      	movs	r1, #1
 800639e:	f7ff ffb1 	bl	8006304 <xQueueGenericReset>
}
 80063a2:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063a4:	6002      	str	r2, [r0, #0]
 80063a6:	e7f7      	b.n	8006398 <prvInitialiseNewQueue+0xc>

080063a8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063a8:	b950      	cbnz	r0, 80063c0 <xQueueGenericCreateStatic+0x18>
 80063aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ae:	b672      	cpsid	i
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	b662      	cpsie	i
 80063be:	e7fe      	b.n	80063be <xQueueGenericCreateStatic+0x16>
	{
 80063c0:	b510      	push	{r4, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 80063c6:	b193      	cbz	r3, 80063ee <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063c8:	1e0b      	subs	r3, r1, #0
 80063ca:	bf18      	it	ne
 80063cc:	2301      	movne	r3, #1
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	bf08      	it	eq
 80063d2:	f043 0301 	orreq.w	r3, r3, #1
 80063d6:	b9ab      	cbnz	r3, 8006404 <xQueueGenericCreateStatic+0x5c>
 80063d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063dc:	b672      	cpsid	i
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	b662      	cpsie	i
 80063ec:	e7fe      	b.n	80063ec <xQueueGenericCreateStatic+0x44>
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	b672      	cpsid	i
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8006402:	e7fe      	b.n	8006402 <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006404:	fab1 f381 	clz	r3, r1
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	2a00      	cmp	r2, #0
 800640c:	bf18      	it	ne
 800640e:	f043 0301 	orrne.w	r3, r3, #1
 8006412:	b953      	cbnz	r3, 800642a <xQueueGenericCreateStatic+0x82>
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	b672      	cpsid	i
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	b662      	cpsie	i
 8006428:	e7fe      	b.n	8006428 <xQueueGenericCreateStatic+0x80>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800642a:	2348      	movs	r3, #72	@ 0x48
 800642c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	2b48      	cmp	r3, #72	@ 0x48
 8006432:	d00a      	beq.n	800644a <xQueueGenericCreateStatic+0xa2>
 8006434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006438:	b672      	cpsid	i
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	b662      	cpsie	i
 8006448:	e7fe      	b.n	8006448 <xQueueGenericCreateStatic+0xa0>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800644a:	2301      	movs	r3, #1
 800644c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006450:	9400      	str	r4, [sp, #0]
 8006452:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006456:	f7ff ff99 	bl	800638c <prvInitialiseNewQueue>
	}
 800645a:	4620      	mov	r0, r4
 800645c:	b004      	add	sp, #16
 800645e:	bd10      	pop	{r4, pc}

08006460 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006460:	b950      	cbnz	r0, 8006478 <xQueueGenericCreate+0x18>
 8006462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006466:	b672      	cpsid	i
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	b662      	cpsie	i
 8006476:	e7fe      	b.n	8006476 <xQueueGenericCreate+0x16>
	{
 8006478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647a:	b083      	sub	sp, #12
 800647c:	460c      	mov	r4, r1
 800647e:	4615      	mov	r5, r2
 8006480:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8006482:	b1a1      	cbz	r1, 80064ae <xQueueGenericCreate+0x4e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006484:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006488:	3048      	adds	r0, #72	@ 0x48
 800648a:	f7ff fbeb 	bl	8005c64 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800648e:	4606      	mov	r6, r0
 8006490:	b150      	cbz	r0, 80064a8 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006492:	2300      	movs	r3, #0
 8006494:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006498:	9000      	str	r0, [sp, #0]
 800649a:	462b      	mov	r3, r5
 800649c:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 80064a0:	4621      	mov	r1, r4
 80064a2:	4638      	mov	r0, r7
 80064a4:	f7ff ff72 	bl	800638c <prvInitialiseNewQueue>
	}
 80064a8:	4630      	mov	r0, r6
 80064aa:	b003      	add	sp, #12
 80064ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 80064ae:	4608      	mov	r0, r1
 80064b0:	e7ea      	b.n	8006488 <xQueueGenericCreate+0x28>

080064b2 <xQueueGenericSend>:
{
 80064b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b4:	b085      	sub	sp, #20
 80064b6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80064b8:	b198      	cbz	r0, 80064e2 <xQueueGenericSend+0x30>
 80064ba:	460f      	mov	r7, r1
 80064bc:	461d      	mov	r5, r3
 80064be:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064c0:	b1d1      	cbz	r1, 80064f8 <xQueueGenericSend+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064c2:	2d02      	cmp	r5, #2
 80064c4:	d126      	bne.n	8006514 <xQueueGenericSend+0x62>
 80064c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d023      	beq.n	8006514 <xQueueGenericSend+0x62>
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	b672      	cpsid	i
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	b662      	cpsie	i
 80064e0:	e7fe      	b.n	80064e0 <xQueueGenericSend+0x2e>
 80064e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e6:	b672      	cpsid	i
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	b662      	cpsie	i
	configASSERT( pxQueue );
 80064f6:	e7fe      	b.n	80064f6 <xQueueGenericSend+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0e1      	beq.n	80064c2 <xQueueGenericSend+0x10>
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	b672      	cpsid	i
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	b662      	cpsie	i
 8006512:	e7fe      	b.n	8006512 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006514:	f000 ffc0 	bl	8007498 <xTaskGetSchedulerState>
 8006518:	4606      	mov	r6, r0
 800651a:	b968      	cbnz	r0, 8006538 <xQueueGenericSend+0x86>
 800651c:	9b01      	ldr	r3, [sp, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d04a      	beq.n	80065b8 <xQueueGenericSend+0x106>
 8006522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006526:	b672      	cpsid	i
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	b662      	cpsie	i
 8006536:	e7fe      	b.n	8006536 <xQueueGenericSend+0x84>
 8006538:	2600      	movs	r6, #0
 800653a:	e03d      	b.n	80065b8 <xQueueGenericSend+0x106>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800653c:	462a      	mov	r2, r5
 800653e:	4639      	mov	r1, r7
 8006540:	4620      	mov	r0, r4
 8006542:	f7ff fe5b 	bl	80061fc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006546:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006548:	b97b      	cbnz	r3, 800656a <xQueueGenericSend+0xb8>
					else if( xYieldRequired != pdFALSE )
 800654a:	b148      	cbz	r0, 8006560 <xQueueGenericSend+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 800654c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006554:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006560:	f7ff fd16 	bl	8005f90 <vPortExitCritical>
				return pdPASS;
 8006564:	2001      	movs	r0, #1
}
 8006566:	b005      	add	sp, #20
 8006568:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800656a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800656e:	f000 fef3 	bl	8007358 <xTaskRemoveFromEventList>
 8006572:	2800      	cmp	r0, #0
 8006574:	d0f4      	beq.n	8006560 <xQueueGenericSend+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8006576:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800657a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800657e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	e7e9      	b.n	8006560 <xQueueGenericSend+0xae>
					taskEXIT_CRITICAL();
 800658c:	f7ff fd00 	bl	8005f90 <vPortExitCritical>
					return errQUEUE_FULL;
 8006590:	2000      	movs	r0, #0
 8006592:	e7e8      	b.n	8006566 <xQueueGenericSend+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006594:	a802      	add	r0, sp, #8
 8006596:	f000 ff27 	bl	80073e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800659a:	2601      	movs	r6, #1
 800659c:	e019      	b.n	80065d2 <xQueueGenericSend+0x120>
		prvLockQueue( pxQueue );
 800659e:	2300      	movs	r3, #0
 80065a0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80065a4:	e021      	b.n	80065ea <xQueueGenericSend+0x138>
 80065a6:	2300      	movs	r3, #0
 80065a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80065ac:	e023      	b.n	80065f6 <xQueueGenericSend+0x144>
				prvUnlockQueue( pxQueue );
 80065ae:	4620      	mov	r0, r4
 80065b0:	f7ff fe71 	bl	8006296 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065b4:	f000 fdbc 	bl	8007130 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80065b8:	f7ff fcc4 	bl	8005f44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80065be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d3bb      	bcc.n	800653c <xQueueGenericSend+0x8a>
 80065c4:	2d02      	cmp	r5, #2
 80065c6:	d0b9      	beq.n	800653c <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80065c8:	9b01      	ldr	r3, [sp, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0de      	beq.n	800658c <xQueueGenericSend+0xda>
				else if( xEntryTimeSet == pdFALSE )
 80065ce:	2e00      	cmp	r6, #0
 80065d0:	d0e0      	beq.n	8006594 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 80065d2:	f7ff fcdd 	bl	8005f90 <vPortExitCritical>
		vTaskSuspendAll();
 80065d6:	f000 fd15 	bl	8007004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065da:	f7ff fcb3 	bl	8005f44 <vPortEnterCritical>
 80065de:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80065e2:	b252      	sxtb	r2, r2
 80065e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80065e8:	d0d9      	beq.n	800659e <xQueueGenericSend+0xec>
 80065ea:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80065ee:	b252      	sxtb	r2, r2
 80065f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80065f4:	d0d7      	beq.n	80065a6 <xQueueGenericSend+0xf4>
 80065f6:	f7ff fccb 	bl	8005f90 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065fa:	a901      	add	r1, sp, #4
 80065fc:	a802      	add	r0, sp, #8
 80065fe:	f000 feff 	bl	8007400 <xTaskCheckForTimeOut>
 8006602:	b9d8      	cbnz	r0, 800663c <xQueueGenericSend+0x18a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006604:	4620      	mov	r0, r4
 8006606:	f7ff fddd 	bl	80061c4 <prvIsQueueFull>
 800660a:	2800      	cmp	r0, #0
 800660c:	d0cf      	beq.n	80065ae <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800660e:	9901      	ldr	r1, [sp, #4]
 8006610:	f104 0010 	add.w	r0, r4, #16
 8006614:	f000 fe86 	bl	8007324 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006618:	4620      	mov	r0, r4
 800661a:	f7ff fe3c 	bl	8006296 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800661e:	f000 fd87 	bl	8007130 <xTaskResumeAll>
 8006622:	2800      	cmp	r0, #0
 8006624:	d1c8      	bne.n	80065b8 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
 8006626:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800662a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800662e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	e7bd      	b.n	80065b8 <xQueueGenericSend+0x106>
			prvUnlockQueue( pxQueue );
 800663c:	4620      	mov	r0, r4
 800663e:	f7ff fe2a 	bl	8006296 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006642:	f000 fd75 	bl	8007130 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006646:	2000      	movs	r0, #0
 8006648:	e78d      	b.n	8006566 <xQueueGenericSend+0xb4>

0800664a <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800664a:	b148      	cbz	r0, 8006660 <prvInitialiseMutex+0x16>
	{
 800664c:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 800664e:	2100      	movs	r1, #0
 8006650:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006652:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006654:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006656:	460b      	mov	r3, r1
 8006658:	460a      	mov	r2, r1
 800665a:	f7ff ff2a 	bl	80064b2 <xQueueGenericSend>
	}
 800665e:	bd08      	pop	{r3, pc}
 8006660:	4770      	bx	lr

08006662 <xQueueCreateMutex>:
	{
 8006662:	b510      	push	{r4, lr}
 8006664:	4602      	mov	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006666:	2100      	movs	r1, #0
 8006668:	2001      	movs	r0, #1
 800666a:	f7ff fef9 	bl	8006460 <xQueueGenericCreate>
 800666e:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8006670:	f7ff ffeb 	bl	800664a <prvInitialiseMutex>
	}
 8006674:	4620      	mov	r0, r4
 8006676:	bd10      	pop	{r4, pc}

08006678 <xQueueCreateMutexStatic>:
	{
 8006678:	b510      	push	{r4, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800667e:	9000      	str	r0, [sp, #0]
 8006680:	2200      	movs	r2, #0
 8006682:	4611      	mov	r1, r2
 8006684:	2001      	movs	r0, #1
 8006686:	f7ff fe8f 	bl	80063a8 <xQueueGenericCreateStatic>
 800668a:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800668c:	f7ff ffdd 	bl	800664a <prvInitialiseMutex>
	}
 8006690:	4620      	mov	r0, r4
 8006692:	b002      	add	sp, #8
 8006694:	bd10      	pop	{r4, pc}

08006696 <xQueueGenericSendFromISR>:
{
 8006696:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800669a:	b1a0      	cbz	r0, 80066c6 <xQueueGenericSendFromISR+0x30>
 800669c:	460f      	mov	r7, r1
 800669e:	4616      	mov	r6, r2
 80066a0:	461c      	mov	r4, r3
 80066a2:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066a4:	b1d1      	cbz	r1, 80066dc <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066a6:	2c02      	cmp	r4, #2
 80066a8:	d126      	bne.n	80066f8 <xQueueGenericSendFromISR+0x62>
 80066aa:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d023      	beq.n	80066f8 <xQueueGenericSendFromISR+0x62>
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	b672      	cpsid	i
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	b662      	cpsie	i
 80066c4:	e7fe      	b.n	80066c4 <xQueueGenericSendFromISR+0x2e>
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	b672      	cpsid	i
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	b662      	cpsie	i
	configASSERT( pxQueue );
 80066da:	e7fe      	b.n	80066da <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066dc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0e1      	beq.n	80066a6 <xQueueGenericSendFromISR+0x10>
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	b672      	cpsid	i
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	b662      	cpsie	i
 80066f6:	e7fe      	b.n	80066f6 <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066f8:	f7ff fd2a 	bl	8006150 <vPortValidateInterruptPriority>
	__asm volatile
 80066fc:	f3ef 8811 	mrs	r8, BASEPRI
 8006700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006704:	b672      	cpsid	i
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006714:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8006716:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8006718:	429a      	cmp	r2, r3
 800671a:	d306      	bcc.n	800672a <xQueueGenericSendFromISR+0x94>
 800671c:	2c02      	cmp	r4, #2
 800671e:	d004      	beq.n	800672a <xQueueGenericSendFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8006720:	2000      	movs	r0, #0
	__asm volatile
 8006722:	f388 8811 	msr	BASEPRI, r8
}
 8006726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800672a:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800672e:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006732:	4622      	mov	r2, r4
 8006734:	4639      	mov	r1, r7
 8006736:	4628      	mov	r0, r5
 8006738:	f7ff fd60 	bl	80061fc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800673c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006740:	d006      	beq.n	8006750 <xQueueGenericSendFromISR+0xba>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006742:	f109 0301 	add.w	r3, r9, #1
 8006746:	b25b      	sxtb	r3, r3
 8006748:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800674c:	2001      	movs	r0, #1
 800674e:	e7e8      	b.n	8006722 <xQueueGenericSendFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006750:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006752:	b90b      	cbnz	r3, 8006758 <xQueueGenericSendFromISR+0xc2>
			xReturn = pdPASS;
 8006754:	2001      	movs	r0, #1
 8006756:	e7e4      	b.n	8006722 <xQueueGenericSendFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006758:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800675c:	f000 fdfc 	bl	8007358 <xTaskRemoveFromEventList>
 8006760:	b118      	cbz	r0, 800676a <xQueueGenericSendFromISR+0xd4>
							if( pxHigherPriorityTaskWoken != NULL )
 8006762:	b126      	cbz	r6, 800676e <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006764:	2001      	movs	r0, #1
 8006766:	6030      	str	r0, [r6, #0]
 8006768:	e7db      	b.n	8006722 <xQueueGenericSendFromISR+0x8c>
			xReturn = pdPASS;
 800676a:	2001      	movs	r0, #1
 800676c:	e7d9      	b.n	8006722 <xQueueGenericSendFromISR+0x8c>
 800676e:	2001      	movs	r0, #1
 8006770:	e7d7      	b.n	8006722 <xQueueGenericSendFromISR+0x8c>

08006772 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8006772:	b178      	cbz	r0, 8006794 <xQueueGiveFromISR+0x22>
{
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	460c      	mov	r4, r1
 8006778:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800677a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800677c:	b1ab      	cbz	r3, 80067aa <xQueueGiveFromISR+0x38>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	b672      	cpsid	i
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	b662      	cpsie	i
 8006792:	e7fe      	b.n	8006792 <xQueueGiveFromISR+0x20>
 8006794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006798:	b672      	cpsid	i
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	b662      	cpsie	i
	configASSERT( pxQueue );
 80067a8:	e7fe      	b.n	80067a8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80067aa:	6803      	ldr	r3, [r0, #0]
 80067ac:	b1fb      	cbz	r3, 80067ee <xQueueGiveFromISR+0x7c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067ae:	f7ff fccf 	bl	8006150 <vPortValidateInterruptPriority>
	__asm volatile
 80067b2:	f3ef 8611 	mrs	r6, BASEPRI
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	b672      	cpsid	i
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ca:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80067cc:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d928      	bls.n	8006824 <xQueueGiveFromISR+0xb2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80067d2:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80067d6:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067d8:	3201      	adds	r2, #1
 80067da:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d013      	beq.n	800680a <xQueueGiveFromISR+0x98>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067e2:	3301      	adds	r3, #1
 80067e4:	b25b      	sxtb	r3, r3
 80067e6:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 80067ea:	2001      	movs	r0, #1
 80067ec:	e01b      	b.n	8006826 <xQueueGiveFromISR+0xb4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80067ee:	6843      	ldr	r3, [r0, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0dc      	beq.n	80067ae <xQueueGiveFromISR+0x3c>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f8:	b672      	cpsid	i
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	b662      	cpsie	i
 8006808:	e7fe      	b.n	8006808 <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800680a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800680c:	b90b      	cbnz	r3, 8006812 <xQueueGiveFromISR+0xa0>
			xReturn = pdPASS;
 800680e:	2001      	movs	r0, #1
 8006810:	e009      	b.n	8006826 <xQueueGiveFromISR+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006812:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8006816:	f000 fd9f 	bl	8007358 <xTaskRemoveFromEventList>
 800681a:	b138      	cbz	r0, 800682c <xQueueGiveFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 800681c:	b144      	cbz	r4, 8006830 <xQueueGiveFromISR+0xbe>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800681e:	2001      	movs	r0, #1
 8006820:	6020      	str	r0, [r4, #0]
 8006822:	e000      	b.n	8006826 <xQueueGiveFromISR+0xb4>
			xReturn = errQUEUE_FULL;
 8006824:	2000      	movs	r0, #0
	__asm volatile
 8006826:	f386 8811 	msr	BASEPRI, r6
}
 800682a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800682c:	2001      	movs	r0, #1
 800682e:	e7fa      	b.n	8006826 <xQueueGiveFromISR+0xb4>
 8006830:	2001      	movs	r0, #1
 8006832:	e7f8      	b.n	8006826 <xQueueGiveFromISR+0xb4>

08006834 <xQueueReceive>:
{
 8006834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006836:	b085      	sub	sp, #20
 8006838:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800683a:	b1a0      	cbz	r0, 8006866 <xQueueReceive+0x32>
 800683c:	460f      	mov	r7, r1
 800683e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006840:	b1e1      	cbz	r1, 800687c <xQueueReceive+0x48>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006842:	f000 fe29 	bl	8007498 <xTaskGetSchedulerState>
 8006846:	4606      	mov	r6, r0
 8006848:	bb30      	cbnz	r0, 8006898 <xQueueReceive+0x64>
 800684a:	9b01      	ldr	r3, [sp, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d064      	beq.n	800691a <xQueueReceive+0xe6>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	b672      	cpsid	i
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	b662      	cpsie	i
 8006864:	e7fe      	b.n	8006864 <xQueueReceive+0x30>
 8006866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686a:	b672      	cpsid	i
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 800687a:	e7fe      	b.n	800687a <xQueueReceive+0x46>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800687c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0df      	beq.n	8006842 <xQueueReceive+0xe>
 8006882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006886:	b672      	cpsid	i
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	b662      	cpsie	i
 8006896:	e7fe      	b.n	8006896 <xQueueReceive+0x62>
 8006898:	2600      	movs	r6, #0
 800689a:	e03e      	b.n	800691a <xQueueReceive+0xe6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800689c:	4639      	mov	r1, r7
 800689e:	4620      	mov	r0, r4
 80068a0:	f7ff fce7 	bl	8006272 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068a4:	3d01      	subs	r5, #1
 80068a6:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	b923      	cbnz	r3, 80068b6 <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 80068ac:	f7ff fb70 	bl	8005f90 <vPortExitCritical>
				return pdPASS;
 80068b0:	2001      	movs	r0, #1
}
 80068b2:	b005      	add	sp, #20
 80068b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b6:	f104 0010 	add.w	r0, r4, #16
 80068ba:	f000 fd4d 	bl	8007358 <xTaskRemoveFromEventList>
 80068be:	2800      	cmp	r0, #0
 80068c0:	d0f4      	beq.n	80068ac <xQueueReceive+0x78>
						queueYIELD_IF_USING_PREEMPTION();
 80068c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80068c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	e7e9      	b.n	80068ac <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 80068d8:	f7ff fb5a 	bl	8005f90 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80068dc:	2000      	movs	r0, #0
 80068de:	e7e8      	b.n	80068b2 <xQueueReceive+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068e0:	a802      	add	r0, sp, #8
 80068e2:	f000 fd81 	bl	80073e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068e6:	2601      	movs	r6, #1
 80068e8:	e021      	b.n	800692e <xQueueReceive+0xfa>
		prvLockQueue( pxQueue );
 80068ea:	2300      	movs	r3, #0
 80068ec:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80068f0:	e029      	b.n	8006946 <xQueueReceive+0x112>
 80068f2:	2300      	movs	r3, #0
 80068f4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80068f8:	e02b      	b.n	8006952 <xQueueReceive+0x11e>
				prvUnlockQueue( pxQueue );
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7ff fccb 	bl	8006296 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006900:	f000 fc16 	bl	8007130 <xTaskResumeAll>
 8006904:	e009      	b.n	800691a <xQueueReceive+0xe6>
			prvUnlockQueue( pxQueue );
 8006906:	4620      	mov	r0, r4
 8006908:	f7ff fcc5 	bl	8006296 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800690c:	f000 fc10 	bl	8007130 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006910:	4620      	mov	r0, r4
 8006912:	f7ff fc66 	bl	80061e2 <prvIsQueueEmpty>
 8006916:	2800      	cmp	r0, #0
 8006918:	d13f      	bne.n	800699a <xQueueReceive+0x166>
		taskENTER_CRITICAL();
 800691a:	f7ff fb13 	bl	8005f44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800691e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006920:	2d00      	cmp	r5, #0
 8006922:	d1bb      	bne.n	800689c <xQueueReceive+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006924:	9b01      	ldr	r3, [sp, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0d6      	beq.n	80068d8 <xQueueReceive+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800692a:	2e00      	cmp	r6, #0
 800692c:	d0d8      	beq.n	80068e0 <xQueueReceive+0xac>
		taskEXIT_CRITICAL();
 800692e:	f7ff fb2f 	bl	8005f90 <vPortExitCritical>
		vTaskSuspendAll();
 8006932:	f000 fb67 	bl	8007004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006936:	f7ff fb05 	bl	8005f44 <vPortEnterCritical>
 800693a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800693e:	b25b      	sxtb	r3, r3
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006944:	d0d1      	beq.n	80068ea <xQueueReceive+0xb6>
 8006946:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800694a:	b25b      	sxtb	r3, r3
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d0cf      	beq.n	80068f2 <xQueueReceive+0xbe>
 8006952:	f7ff fb1d 	bl	8005f90 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006956:	a901      	add	r1, sp, #4
 8006958:	a802      	add	r0, sp, #8
 800695a:	f000 fd51 	bl	8007400 <xTaskCheckForTimeOut>
 800695e:	2800      	cmp	r0, #0
 8006960:	d1d1      	bne.n	8006906 <xQueueReceive+0xd2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006962:	4620      	mov	r0, r4
 8006964:	f7ff fc3d 	bl	80061e2 <prvIsQueueEmpty>
 8006968:	2800      	cmp	r0, #0
 800696a:	d0c6      	beq.n	80068fa <xQueueReceive+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800696c:	9901      	ldr	r1, [sp, #4]
 800696e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006972:	f000 fcd7 	bl	8007324 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006976:	4620      	mov	r0, r4
 8006978:	f7ff fc8d 	bl	8006296 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800697c:	f000 fbd8 	bl	8007130 <xTaskResumeAll>
 8006980:	2800      	cmp	r0, #0
 8006982:	d1ca      	bne.n	800691a <xQueueReceive+0xe6>
					portYIELD_WITHIN_API();
 8006984:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	e7bf      	b.n	800691a <xQueueReceive+0xe6>
				return errQUEUE_EMPTY;
 800699a:	2000      	movs	r0, #0
 800699c:	e789      	b.n	80068b2 <xQueueReceive+0x7e>

0800699e <xQueueSemaphoreTake>:
{
 800699e:	b570      	push	{r4, r5, r6, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80069a4:	b168      	cbz	r0, 80069c2 <xQueueSemaphoreTake+0x24>
 80069a6:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80069a8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80069aa:	b1ab      	cbz	r3, 80069d8 <xQueueSemaphoreTake+0x3a>
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	b672      	cpsid	i
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	b662      	cpsie	i
 80069c0:	e7fe      	b.n	80069c0 <xQueueSemaphoreTake+0x22>
 80069c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c6:	b672      	cpsid	i
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 80069d6:	e7fe      	b.n	80069d6 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069d8:	f000 fd5e 	bl	8007498 <xTaskGetSchedulerState>
 80069dc:	4605      	mov	r5, r0
 80069de:	b960      	cbnz	r0, 80069fa <xQueueSemaphoreTake+0x5c>
 80069e0:	9b01      	ldr	r3, [sp, #4]
 80069e2:	b16b      	cbz	r3, 8006a00 <xQueueSemaphoreTake+0x62>
 80069e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e8:	b672      	cpsid	i
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	b662      	cpsie	i
 80069f8:	e7fe      	b.n	80069f8 <xQueueSemaphoreTake+0x5a>
 80069fa:	2600      	movs	r6, #0
 80069fc:	4635      	mov	r5, r6
 80069fe:	e057      	b.n	8006ab0 <xQueueSemaphoreTake+0x112>
 8006a00:	4606      	mov	r6, r0
 8006a02:	e055      	b.n	8006ab0 <xQueueSemaphoreTake+0x112>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a04:	3b01      	subs	r3, #1
 8006a06:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	b13b      	cbz	r3, 8006a1c <xQueueSemaphoreTake+0x7e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	b94b      	cbnz	r3, 8006a24 <xQueueSemaphoreTake+0x86>
				taskEXIT_CRITICAL();
 8006a10:	f7ff fabe 	bl	8005f90 <vPortExitCritical>
				return pdPASS;
 8006a14:	2601      	movs	r6, #1
}
 8006a16:	4630      	mov	r0, r6
 8006a18:	b004      	add	sp, #16
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006a1c:	f000 fe6a 	bl	80076f4 <pvTaskIncrementMutexHeldCount>
 8006a20:	6060      	str	r0, [r4, #4]
 8006a22:	e7f3      	b.n	8006a0c <xQueueSemaphoreTake+0x6e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a24:	f104 0010 	add.w	r0, r4, #16
 8006a28:	f000 fc96 	bl	8007358 <xTaskRemoveFromEventList>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d0ef      	beq.n	8006a10 <xQueueSemaphoreTake+0x72>
						queueYIELD_IF_USING_PREEMPTION();
 8006a30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a38:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	e7e4      	b.n	8006a10 <xQueueSemaphoreTake+0x72>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a46:	b156      	cbz	r6, 8006a5e <xQueueSemaphoreTake+0xc0>
 8006a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4c:	b672      	cpsid	i
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	b662      	cpsie	i
 8006a5c:	e7fe      	b.n	8006a5c <xQueueSemaphoreTake+0xbe>
					taskEXIT_CRITICAL();
 8006a5e:	f7ff fa97 	bl	8005f90 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006a62:	e7d8      	b.n	8006a16 <xQueueSemaphoreTake+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a64:	a802      	add	r0, sp, #8
 8006a66:	f000 fcbf 	bl	80073e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a6a:	2501      	movs	r5, #1
 8006a6c:	e02a      	b.n	8006ac4 <xQueueSemaphoreTake+0x126>
		prvLockQueue( pxQueue );
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006a74:	e032      	b.n	8006adc <xQueueSemaphoreTake+0x13e>
 8006a76:	2300      	movs	r3, #0
 8006a78:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006a7c:	e034      	b.n	8006ae8 <xQueueSemaphoreTake+0x14a>
						taskENTER_CRITICAL();
 8006a7e:	f7ff fa61 	bl	8005f44 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006a82:	6860      	ldr	r0, [r4, #4]
 8006a84:	f000 fd18 	bl	80074b8 <xTaskPriorityInherit>
 8006a88:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8006a8a:	f7ff fa81 	bl	8005f90 <vPortExitCritical>
 8006a8e:	e03b      	b.n	8006b08 <xQueueSemaphoreTake+0x16a>
				prvUnlockQueue( pxQueue );
 8006a90:	4620      	mov	r0, r4
 8006a92:	f7ff fc00 	bl	8006296 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a96:	f000 fb4b 	bl	8007130 <xTaskResumeAll>
 8006a9a:	e009      	b.n	8006ab0 <xQueueSemaphoreTake+0x112>
			prvUnlockQueue( pxQueue );
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f7ff fbfa 	bl	8006296 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aa2:	f000 fb45 	bl	8007130 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f7ff fb9b 	bl	80061e2 <prvIsQueueEmpty>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d142      	bne.n	8006b36 <xQueueSemaphoreTake+0x198>
		taskENTER_CRITICAL();
 8006ab0:	f7ff fa48 	bl	8005f44 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ab4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1a4      	bne.n	8006a04 <xQueueSemaphoreTake+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006aba:	9b01      	ldr	r3, [sp, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0c2      	beq.n	8006a46 <xQueueSemaphoreTake+0xa8>
				else if( xEntryTimeSet == pdFALSE )
 8006ac0:	2d00      	cmp	r5, #0
 8006ac2:	d0cf      	beq.n	8006a64 <xQueueSemaphoreTake+0xc6>
		taskEXIT_CRITICAL();
 8006ac4:	f7ff fa64 	bl	8005f90 <vPortExitCritical>
		vTaskSuspendAll();
 8006ac8:	f000 fa9c 	bl	8007004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006acc:	f7ff fa3a 	bl	8005f44 <vPortEnterCritical>
 8006ad0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006ad4:	b25b      	sxtb	r3, r3
 8006ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ada:	d0c8      	beq.n	8006a6e <xQueueSemaphoreTake+0xd0>
 8006adc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006ae0:	b25b      	sxtb	r3, r3
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	d0c6      	beq.n	8006a76 <xQueueSemaphoreTake+0xd8>
 8006ae8:	f7ff fa52 	bl	8005f90 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aec:	a901      	add	r1, sp, #4
 8006aee:	a802      	add	r0, sp, #8
 8006af0:	f000 fc86 	bl	8007400 <xTaskCheckForTimeOut>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d1d1      	bne.n	8006a9c <xQueueSemaphoreTake+0xfe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006af8:	4620      	mov	r0, r4
 8006afa:	f7ff fb72 	bl	80061e2 <prvIsQueueEmpty>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d0c6      	beq.n	8006a90 <xQueueSemaphoreTake+0xf2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0ba      	beq.n	8006a7e <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b08:	9901      	ldr	r1, [sp, #4]
 8006b0a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006b0e:	f000 fc09 	bl	8007324 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b12:	4620      	mov	r0, r4
 8006b14:	f7ff fbbf 	bl	8006296 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b18:	f000 fb0a 	bl	8007130 <xTaskResumeAll>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d1c7      	bne.n	8006ab0 <xQueueSemaphoreTake+0x112>
					portYIELD_WITHIN_API();
 8006b20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b28:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	e7bc      	b.n	8006ab0 <xQueueSemaphoreTake+0x112>
					if( xInheritanceOccurred != pdFALSE )
 8006b36:	b90e      	cbnz	r6, 8006b3c <xQueueSemaphoreTake+0x19e>
				return errQUEUE_EMPTY;
 8006b38:	2600      	movs	r6, #0
 8006b3a:	e76c      	b.n	8006a16 <xQueueSemaphoreTake+0x78>
						taskENTER_CRITICAL();
 8006b3c:	f7ff fa02 	bl	8005f44 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7ff fb37 	bl	80061b4 <prvGetDisinheritPriorityAfterTimeout>
 8006b46:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006b48:	6860      	ldr	r0, [r4, #4]
 8006b4a:	f000 fd6f 	bl	800762c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006b4e:	f7ff fa1f 	bl	8005f90 <vPortExitCritical>
 8006b52:	e7f1      	b.n	8006b38 <xQueueSemaphoreTake+0x19a>

08006b54 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b54:	4b08      	ldr	r3, [pc, #32]	@ (8006b78 <prvResetNextTaskUnblockTime+0x24>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	b923      	cbnz	r3, 8006b66 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b5c:	4b07      	ldr	r3, [pc, #28]	@ (8006b7c <prvResetNextTaskUnblockTime+0x28>)
 8006b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b66:	4b04      	ldr	r3, [pc, #16]	@ (8006b78 <prvResetNextTaskUnblockTime+0x24>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	4b02      	ldr	r3, [pc, #8]	@ (8006b7c <prvResetNextTaskUnblockTime+0x28>)
 8006b72:	601a      	str	r2, [r3, #0]
	}
}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	20010690 	.word	0x20010690
 8006b7c:	20010628 	.word	0x20010628

08006b80 <prvInitialiseNewTask>:
{
 8006b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b84:	4607      	mov	r7, r0
 8006b86:	4698      	mov	r8, r3
 8006b88:	9d08      	ldr	r5, [sp, #32]
 8006b8a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8006b8e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006b90:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8006b92:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006b96:	4413      	add	r3, r2
 8006b98:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b9c:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ba0:	f04f 0c00 	mov.w	ip, #0
 8006ba4:	f1bc 0f1f 	cmp.w	ip, #31
 8006ba8:	d809      	bhi.n	8006bbe <prvInitialiseNewTask+0x3e>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006baa:	f811 200c 	ldrb.w	r2, [r1, ip]
 8006bae:	eb04 030c 	add.w	r3, r4, ip
 8006bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		if( pcName[ x ] == 0x00 )
 8006bb6:	b112      	cbz	r2, 8006bbe <prvInitialiseNewTask+0x3e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb8:	f10c 0c01 	add.w	ip, ip, #1
 8006bbc:	e7f2      	b.n	8006ba4 <prvInitialiseNewTask+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bc4:	2d06      	cmp	r5, #6
 8006bc6:	d900      	bls.n	8006bca <prvInitialiseNewTask+0x4a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bc8:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8006bca:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006bcc:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8006bce:	f04f 0a00 	mov.w	sl, #0
 8006bd2:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bd6:	1d20      	adds	r0, r4, #4
 8006bd8:	f7ff f90b 	bl	8005df2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bdc:	f104 0018 	add.w	r0, r4, #24
 8006be0:	f7ff f907 	bl	8005df2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006be4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be6:	f1c5 0507 	rsb	r5, r5, #7
 8006bea:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bec:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006bee:	f8c4 a0a8 	str.w	sl, [r4, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bf2:	f884 a0ac 	strb.w	sl, [r4, #172]	@ 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bf6:	224c      	movs	r2, #76	@ 0x4c
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8006bfe:	f009 f8a0 	bl	800fd42 <memset>
 8006c02:	4b0a      	ldr	r3, [pc, #40]	@ (8006c2c <prvInitialiseNewTask+0xac>)
 8006c04:	6623      	str	r3, [r4, #96]	@ 0x60
 8006c06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c0a:	6662      	str	r2, [r4, #100]	@ 0x64
 8006c0c:	33d0      	adds	r3, #208	@ 0xd0
 8006c0e:	66a3      	str	r3, [r4, #104]	@ 0x68
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c10:	4642      	mov	r2, r8
 8006c12:	4639      	mov	r1, r7
 8006c14:	4630      	mov	r0, r6
 8006c16:	f7ff f969 	bl	8005eec <pxPortInitialiseStack>
 8006c1a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006c1c:	f1b9 0f00 	cmp.w	r9, #0
 8006c20:	d001      	beq.n	8006c26 <prvInitialiseNewTask+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c22:	f8c9 4000 	str.w	r4, [r9]
}
 8006c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20017c50 	.word	0x20017c50

08006c30 <prvInitialiseTaskLists>:
{
 8006c30:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c32:	2400      	movs	r4, #0
 8006c34:	e007      	b.n	8006c46 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c36:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006c3a:	0093      	lsls	r3, r2, #2
 8006c3c:	480e      	ldr	r0, [pc, #56]	@ (8006c78 <prvInitialiseTaskLists+0x48>)
 8006c3e:	4418      	add	r0, r3
 8006c40:	f7ff f8cc 	bl	8005ddc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c44:	3401      	adds	r4, #1
 8006c46:	2c06      	cmp	r4, #6
 8006c48:	d9f5      	bls.n	8006c36 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8006c4a:	4d0c      	ldr	r5, [pc, #48]	@ (8006c7c <prvInitialiseTaskLists+0x4c>)
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f7ff f8c5 	bl	8005ddc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c52:	4c0b      	ldr	r4, [pc, #44]	@ (8006c80 <prvInitialiseTaskLists+0x50>)
 8006c54:	4620      	mov	r0, r4
 8006c56:	f7ff f8c1 	bl	8005ddc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c5a:	480a      	ldr	r0, [pc, #40]	@ (8006c84 <prvInitialiseTaskLists+0x54>)
 8006c5c:	f7ff f8be 	bl	8005ddc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006c60:	4809      	ldr	r0, [pc, #36]	@ (8006c88 <prvInitialiseTaskLists+0x58>)
 8006c62:	f7ff f8bb 	bl	8005ddc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006c66:	4809      	ldr	r0, [pc, #36]	@ (8006c8c <prvInitialiseTaskLists+0x5c>)
 8006c68:	f7ff f8b8 	bl	8005ddc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c6c:	4b08      	ldr	r3, [pc, #32]	@ (8006c90 <prvInitialiseTaskLists+0x60>)
 8006c6e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c70:	4b08      	ldr	r3, [pc, #32]	@ (8006c94 <prvInitialiseTaskLists+0x64>)
 8006c72:	601c      	str	r4, [r3, #0]
}
 8006c74:	bd38      	pop	{r3, r4, r5, pc}
 8006c76:	bf00      	nop
 8006c78:	200106bc 	.word	0x200106bc
 8006c7c:	200106a8 	.word	0x200106a8
 8006c80:	20010694 	.word	0x20010694
 8006c84:	20010678 	.word	0x20010678
 8006c88:	20010664 	.word	0x20010664
 8006c8c:	2001064c 	.word	0x2001064c
 8006c90:	20010690 	.word	0x20010690
 8006c94:	2001068c 	.word	0x2001068c

08006c98 <prvAddNewTaskToReadyList>:
{
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006c9c:	f7ff f952 	bl	8005f44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006ca0:	4a21      	ldr	r2, [pc, #132]	@ (8006d28 <prvAddNewTaskToReadyList+0x90>)
 8006ca2:	6813      	ldr	r3, [r2, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ca8:	4b20      	ldr	r3, [pc, #128]	@ (8006d2c <prvAddNewTaskToReadyList+0x94>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	b15b      	cbz	r3, 8006cc6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8006cae:	4b20      	ldr	r3, [pc, #128]	@ (8006d30 <prvAddNewTaskToReadyList+0x98>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	b96b      	cbnz	r3, 8006cd0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d2c <prvAddNewTaskToReadyList+0x94>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d807      	bhi.n	8006cd0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8006cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d2c <prvAddNewTaskToReadyList+0x94>)
 8006cc2:	601c      	str	r4, [r3, #0]
 8006cc4:	e004      	b.n	8006cd0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8006cc6:	4b19      	ldr	r3, [pc, #100]	@ (8006d2c <prvAddNewTaskToReadyList+0x94>)
 8006cc8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d028      	beq.n	8006d22 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8006cd0:	4a18      	ldr	r2, [pc, #96]	@ (8006d34 <prvAddNewTaskToReadyList+0x9c>)
 8006cd2:	6813      	ldr	r3, [r2, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006cd8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4083      	lsls	r3, r0
 8006cde:	4a16      	ldr	r2, [pc, #88]	@ (8006d38 <prvAddNewTaskToReadyList+0xa0>)
 8006ce0:	6811      	ldr	r1, [r2, #0]
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cea:	1d21      	adds	r1, r4, #4
 8006cec:	4b13      	ldr	r3, [pc, #76]	@ (8006d3c <prvAddNewTaskToReadyList+0xa4>)
 8006cee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006cf2:	f7ff f881 	bl	8005df8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006cf6:	f7ff f94b 	bl	8005f90 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <prvAddNewTaskToReadyList+0x98>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	b17b      	cbz	r3, 8006d20 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d00:	4b0a      	ldr	r3, [pc, #40]	@ (8006d2c <prvAddNewTaskToReadyList+0x94>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d06:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d209      	bcs.n	8006d20 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 8006d0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d14:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
}
 8006d20:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8006d22:	f7ff ff85 	bl	8006c30 <prvInitialiseTaskLists>
 8006d26:	e7d3      	b.n	8006cd0 <prvAddNewTaskToReadyList+0x38>
 8006d28:	20010648 	.word	0x20010648
 8006d2c:	20010748 	.word	0x20010748
 8006d30:	2001063c 	.word	0x2001063c
 8006d34:	2001062c 	.word	0x2001062c
 8006d38:	20010640 	.word	0x20010640
 8006d3c:	200106bc 	.word	0x200106bc

08006d40 <prvDeleteTCB>:
	{
 8006d40:	b510      	push	{r4, lr}
 8006d42:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d44:	305c      	adds	r0, #92	@ 0x5c
 8006d46:	f009 f82b 	bl	800fda0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d4a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8006d4e:	b173      	cbz	r3, 8006d6e <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d013      	beq.n	8006d7c <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d010      	beq.n	8006d7a <prvDeleteTCB+0x3a>
 8006d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5c:	b672      	cpsid	i
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	b662      	cpsie	i
 8006d6c:	e7fe      	b.n	8006d6c <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 8006d6e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8006d70:	f7fe fff8 	bl	8005d64 <vPortFree>
				vPortFree( pxTCB );
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7fe fff5 	bl	8005d64 <vPortFree>
	}
 8006d7a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f7fe fff1 	bl	8005d64 <vPortFree>
 8006d82:	e7fa      	b.n	8006d7a <prvDeleteTCB+0x3a>

08006d84 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d84:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc4 <prvCheckTasksWaitingTermination+0x40>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	b1d3      	cbz	r3, 8006dc0 <prvCheckTasksWaitingTermination+0x3c>
{
 8006d8a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8006d8c:	f7ff f8da 	bl	8005f44 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d90:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc8 <prvCheckTasksWaitingTermination+0x44>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d96:	1d20      	adds	r0, r4, #4
 8006d98:	f7ff f852 	bl	8005e40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8006dcc <prvCheckTasksWaitingTermination+0x48>)
 8006d9e:	6813      	ldr	r3, [r2, #0]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006da4:	4a07      	ldr	r2, [pc, #28]	@ (8006dc4 <prvCheckTasksWaitingTermination+0x40>)
 8006da6:	6813      	ldr	r3, [r2, #0]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8006dac:	f7ff f8f0 	bl	8005f90 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006db0:	4620      	mov	r0, r4
 8006db2:	f7ff ffc5 	bl	8006d40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006db6:	4b03      	ldr	r3, [pc, #12]	@ (8006dc4 <prvCheckTasksWaitingTermination+0x40>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e6      	bne.n	8006d8c <prvCheckTasksWaitingTermination+0x8>
}
 8006dbe:	bd10      	pop	{r4, pc}
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20010660 	.word	0x20010660
 8006dc8:	20010664 	.word	0x20010664
 8006dcc:	20010648 	.word	0x20010648

08006dd0 <prvIdleTask>:
{
 8006dd0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8006dd2:	f7ff ffd7 	bl	8006d84 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006dd6:	4b07      	ldr	r3, [pc, #28]	@ (8006df4 <prvIdleTask+0x24>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d9f9      	bls.n	8006dd2 <prvIdleTask+0x2>
				taskYIELD();
 8006dde:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	e7ee      	b.n	8006dd2 <prvIdleTask+0x2>
 8006df4:	200106bc 	.word	0x200106bc

08006df8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8006e7c <prvAddCurrentTaskToDelayedList+0x84>)
 8006e00:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e02:	4b1f      	ldr	r3, [pc, #124]	@ (8006e80 <prvAddCurrentTaskToDelayedList+0x88>)
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	3004      	adds	r0, #4
 8006e08:	f7ff f81a 	bl	8005e40 <uxListRemove>
 8006e0c:	b948      	cbnz	r0, 8006e22 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8006e80 <prvAddCurrentTaskToDelayedList+0x88>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e14:	2201      	movs	r2, #1
 8006e16:	409a      	lsls	r2, r3
 8006e18:	491a      	ldr	r1, [pc, #104]	@ (8006e84 <prvAddCurrentTaskToDelayedList+0x8c>)
 8006e1a:	680b      	ldr	r3, [r1, #0]
 8006e1c:	ea23 0302 	bic.w	r3, r3, r2
 8006e20:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e22:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006e26:	bf14      	ite	ne
 8006e28:	2300      	movne	r3, #0
 8006e2a:	2301      	moveq	r3, #1
 8006e2c:	2d00      	cmp	r5, #0
 8006e2e:	bf08      	it	eq
 8006e30:	2300      	moveq	r3, #0
 8006e32:	b96b      	cbnz	r3, 8006e50 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e34:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e36:	4b12      	ldr	r3, [pc, #72]	@ (8006e80 <prvAddCurrentTaskToDelayedList+0x88>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006e3c:	42a6      	cmp	r6, r4
 8006e3e:	d90e      	bls.n	8006e5e <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e40:	4b11      	ldr	r3, [pc, #68]	@ (8006e88 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	4b0e      	ldr	r3, [pc, #56]	@ (8006e80 <prvAddCurrentTaskToDelayedList+0x88>)
 8006e46:	6819      	ldr	r1, [r3, #0]
 8006e48:	3104      	adds	r1, #4
 8006e4a:	f7fe ffe0 	bl	8005e0e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e50:	4b0b      	ldr	r3, [pc, #44]	@ (8006e80 <prvAddCurrentTaskToDelayedList+0x88>)
 8006e52:	6819      	ldr	r1, [r3, #0]
 8006e54:	3104      	adds	r1, #4
 8006e56:	480d      	ldr	r0, [pc, #52]	@ (8006e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e58:	f7fe ffce 	bl	8005df8 <vListInsertEnd>
 8006e5c:	e7f7      	b.n	8006e4e <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e90 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	4b07      	ldr	r3, [pc, #28]	@ (8006e80 <prvAddCurrentTaskToDelayedList+0x88>)
 8006e64:	6819      	ldr	r1, [r3, #0]
 8006e66:	3104      	adds	r1, #4
 8006e68:	f7fe ffd1 	bl	8005e0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e6c:	4b09      	ldr	r3, [pc, #36]	@ (8006e94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	42a3      	cmp	r3, r4
 8006e72:	d9ec      	bls.n	8006e4e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8006e74:	4b07      	ldr	r3, [pc, #28]	@ (8006e94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e76:	601c      	str	r4, [r3, #0]
}
 8006e78:	e7e9      	b.n	8006e4e <prvAddCurrentTaskToDelayedList+0x56>
 8006e7a:	bf00      	nop
 8006e7c:	20010644 	.word	0x20010644
 8006e80:	20010748 	.word	0x20010748
 8006e84:	20010640 	.word	0x20010640
 8006e88:	2001068c 	.word	0x2001068c
 8006e8c:	2001064c 	.word	0x2001064c
 8006e90:	20010690 	.word	0x20010690
 8006e94:	20010628 	.word	0x20010628

08006e98 <xTaskCreateStatic>:
	{
 8006e98:	b530      	push	{r4, r5, lr}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006e9e:	b18c      	cbz	r4, 8006ec4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006ea0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006ea2:	b1d5      	cbz	r5, 8006eda <xTaskCreateStatic+0x42>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ea4:	25b0      	movs	r5, #176	@ 0xb0
 8006ea6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ea8:	9d04      	ldr	r5, [sp, #16]
 8006eaa:	2db0      	cmp	r5, #176	@ 0xb0
 8006eac:	d020      	beq.n	8006ef0 <xTaskCreateStatic+0x58>
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	b672      	cpsid	i
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	b662      	cpsie	i
 8006ec2:	e7fe      	b.n	8006ec2 <xTaskCreateStatic+0x2a>
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	b672      	cpsid	i
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8006ed8:	e7fe      	b.n	8006ed8 <xTaskCreateStatic+0x40>
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	b672      	cpsid	i
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8006eee:	e7fe      	b.n	8006eee <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ef0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006ef2:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ef4:	2402      	movs	r4, #2
 8006ef6:	f885 40ad 	strb.w	r4, [r5, #173]	@ 0xad
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006efa:	2400      	movs	r4, #0
 8006efc:	9403      	str	r4, [sp, #12]
 8006efe:	9502      	str	r5, [sp, #8]
 8006f00:	ac05      	add	r4, sp, #20
 8006f02:	9401      	str	r4, [sp, #4]
 8006f04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f06:	9400      	str	r4, [sp, #0]
 8006f08:	f7ff fe3a 	bl	8006b80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f0c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006f0e:	f7ff fec3 	bl	8006c98 <prvAddNewTaskToReadyList>
	}
 8006f12:	9805      	ldr	r0, [sp, #20]
 8006f14:	b007      	add	sp, #28
 8006f16:	bd30      	pop	{r4, r5, pc}

08006f18 <xTaskCreate>:
	{
 8006f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	4607      	mov	r7, r0
 8006f20:	4688      	mov	r8, r1
 8006f22:	4614      	mov	r4, r2
 8006f24:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f26:	0090      	lsls	r0, r2, #2
 8006f28:	f7fe fe9c 	bl	8005c64 <pvPortMalloc>
			if( pxStack != NULL )
 8006f2c:	b308      	cbz	r0, 8006f72 <xTaskCreate+0x5a>
 8006f2e:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006f30:	20b0      	movs	r0, #176	@ 0xb0
 8006f32:	f7fe fe97 	bl	8005c64 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006f36:	4605      	mov	r5, r0
 8006f38:	b1a8      	cbz	r0, 8006f66 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8006f3a:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f880 30ad 	strb.w	r3, [r0, #173]	@ 0xad
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f44:	9303      	str	r3, [sp, #12]
 8006f46:	9002      	str	r0, [sp, #8]
 8006f48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	4633      	mov	r3, r6
 8006f52:	4622      	mov	r2, r4
 8006f54:	4641      	mov	r1, r8
 8006f56:	4638      	mov	r0, r7
 8006f58:	f7ff fe12 	bl	8006b80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f7ff fe9b 	bl	8006c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f62:	2001      	movs	r0, #1
 8006f64:	e007      	b.n	8006f76 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8006f66:	4648      	mov	r0, r9
 8006f68:	f7fe fefc 	bl	8005d64 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	e001      	b.n	8006f76 <xTaskCreate+0x5e>
 8006f72:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006f76:	b005      	add	sp, #20
 8006f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006f7c <vTaskStartScheduler>:
{
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f80:	2400      	movs	r4, #0
 8006f82:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f84:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f86:	aa07      	add	r2, sp, #28
 8006f88:	a906      	add	r1, sp, #24
 8006f8a:	a805      	add	r0, sp, #20
 8006f8c:	f003 ff56 	bl	800ae3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f90:	9b05      	ldr	r3, [sp, #20]
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	9b06      	ldr	r3, [sp, #24]
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	9400      	str	r4, [sp, #0]
 8006f9a:	4623      	mov	r3, r4
 8006f9c:	9a07      	ldr	r2, [sp, #28]
 8006f9e:	4911      	ldr	r1, [pc, #68]	@ (8006fe4 <vTaskStartScheduler+0x68>)
 8006fa0:	4811      	ldr	r0, [pc, #68]	@ (8006fe8 <vTaskStartScheduler+0x6c>)
 8006fa2:	f7ff ff79 	bl	8006e98 <xTaskCreateStatic>
 8006fa6:	4b11      	ldr	r3, [pc, #68]	@ (8006fec <vTaskStartScheduler+0x70>)
 8006fa8:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8006faa:	b1c8      	cbz	r0, 8006fe0 <vTaskStartScheduler+0x64>
 8006fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb0:	b672      	cpsid	i
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff0 <vTaskStartScheduler+0x74>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	335c      	adds	r3, #92	@ 0x5c
 8006fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8006ff4 <vTaskStartScheduler+0x78>)
 8006fc8:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fca:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <vTaskStartScheduler+0x7c>)
 8006fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ffc <vTaskStartScheduler+0x80>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006fd8:	4b09      	ldr	r3, [pc, #36]	@ (8007000 <vTaskStartScheduler+0x84>)
 8006fda:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006fdc:	f7ff f84e 	bl	800607c <xPortStartScheduler>
}
 8006fe0:	b008      	add	sp, #32
 8006fe2:	bd10      	pop	{r4, pc}
 8006fe4:	0801278c 	.word	0x0801278c
 8006fe8:	08006dd1 	.word	0x08006dd1
 8006fec:	20010624 	.word	0x20010624
 8006ff0:	20010748 	.word	0x20010748
 8006ff4:	2000040c 	.word	0x2000040c
 8006ff8:	20010628 	.word	0x20010628
 8006ffc:	2001063c 	.word	0x2001063c
 8007000:	20010644 	.word	0x20010644

08007004 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007004:	4a02      	ldr	r2, [pc, #8]	@ (8007010 <vTaskSuspendAll+0xc>)
 8007006:	6813      	ldr	r3, [r2, #0]
 8007008:	3301      	adds	r3, #1
 800700a:	6013      	str	r3, [r2, #0]
}
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20010620 	.word	0x20010620

08007014 <xTaskIncrementTick>:
{
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007016:	4b3b      	ldr	r3, [pc, #236]	@ (8007104 <xTaskIncrementTick+0xf0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d166      	bne.n	80070ec <xTaskIncrementTick+0xd8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800701e:	4b3a      	ldr	r3, [pc, #232]	@ (8007108 <xTaskIncrementTick+0xf4>)
 8007020:	681d      	ldr	r5, [r3, #0]
 8007022:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007024:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007026:	b9d5      	cbnz	r5, 800705e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8007028:	4b38      	ldr	r3, [pc, #224]	@ (800710c <xTaskIncrementTick+0xf8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	b153      	cbz	r3, 8007046 <xTaskIncrementTick+0x32>
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	b672      	cpsid	i
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	b662      	cpsie	i
 8007044:	e7fe      	b.n	8007044 <xTaskIncrementTick+0x30>
 8007046:	4a31      	ldr	r2, [pc, #196]	@ (800710c <xTaskIncrementTick+0xf8>)
 8007048:	6811      	ldr	r1, [r2, #0]
 800704a:	4b31      	ldr	r3, [pc, #196]	@ (8007110 <xTaskIncrementTick+0xfc>)
 800704c:	6818      	ldr	r0, [r3, #0]
 800704e:	6010      	str	r0, [r2, #0]
 8007050:	6019      	str	r1, [r3, #0]
 8007052:	4a30      	ldr	r2, [pc, #192]	@ (8007114 <xTaskIncrementTick+0x100>)
 8007054:	6813      	ldr	r3, [r2, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	f7ff fd7b 	bl	8006b54 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800705e:	4b2e      	ldr	r3, [pc, #184]	@ (8007118 <xTaskIncrementTick+0x104>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	42ab      	cmp	r3, r5
 8007064:	d938      	bls.n	80070d8 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8007066:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007068:	4b2c      	ldr	r3, [pc, #176]	@ (800711c <xTaskIncrementTick+0x108>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007072:	009a      	lsls	r2, r3, #2
 8007074:	4b2a      	ldr	r3, [pc, #168]	@ (8007120 <xTaskIncrementTick+0x10c>)
 8007076:	589b      	ldr	r3, [r3, r2]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d93c      	bls.n	80070f6 <xTaskIncrementTick+0xe2>
				xSwitchRequired = pdTRUE;
 800707c:	2701      	movs	r7, #1
 800707e:	e03a      	b.n	80070f6 <xTaskIncrementTick+0xe2>
							xSwitchRequired = pdTRUE;
 8007080:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007082:	4b22      	ldr	r3, [pc, #136]	@ (800710c <xTaskIncrementTick+0xf8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	b343      	cbz	r3, 80070dc <xTaskIncrementTick+0xc8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800708a:	4b20      	ldr	r3, [pc, #128]	@ (800710c <xTaskIncrementTick+0xf8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007092:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8007094:	429d      	cmp	r5, r3
 8007096:	d326      	bcc.n	80070e6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007098:	1d26      	adds	r6, r4, #4
 800709a:	4630      	mov	r0, r6
 800709c:	f7fe fed0 	bl	8005e40 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80070a2:	b11b      	cbz	r3, 80070ac <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070a4:	f104 0018 	add.w	r0, r4, #24
 80070a8:	f7fe feca 	bl	8005e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80070ae:	2201      	movs	r2, #1
 80070b0:	409a      	lsls	r2, r3
 80070b2:	491c      	ldr	r1, [pc, #112]	@ (8007124 <xTaskIncrementTick+0x110>)
 80070b4:	6808      	ldr	r0, [r1, #0]
 80070b6:	4302      	orrs	r2, r0
 80070b8:	600a      	str	r2, [r1, #0]
 80070ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80070be:	009a      	lsls	r2, r3, #2
 80070c0:	4631      	mov	r1, r6
 80070c2:	4817      	ldr	r0, [pc, #92]	@ (8007120 <xTaskIncrementTick+0x10c>)
 80070c4:	4410      	add	r0, r2
 80070c6:	f7fe fe97 	bl	8005df8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80070cc:	4b13      	ldr	r3, [pc, #76]	@ (800711c <xTaskIncrementTick+0x108>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d2d4      	bcs.n	8007080 <xTaskIncrementTick+0x6c>
 80070d6:	e7d4      	b.n	8007082 <xTaskIncrementTick+0x6e>
BaseType_t xSwitchRequired = pdFALSE;
 80070d8:	2700      	movs	r7, #0
 80070da:	e7d2      	b.n	8007082 <xTaskIncrementTick+0x6e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007118 <xTaskIncrementTick+0x104>)
 80070de:	f04f 32ff 	mov.w	r2, #4294967295
 80070e2:	601a      	str	r2, [r3, #0]
					break;
 80070e4:	e7c0      	b.n	8007068 <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 80070e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007118 <xTaskIncrementTick+0x104>)
 80070e8:	6013      	str	r3, [r2, #0]
						break;
 80070ea:	e7bd      	b.n	8007068 <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 80070ec:	4a0e      	ldr	r2, [pc, #56]	@ (8007128 <xTaskIncrementTick+0x114>)
 80070ee:	6813      	ldr	r3, [r2, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80070f4:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 80070f6:	4b0d      	ldr	r3, [pc, #52]	@ (800712c <xTaskIncrementTick+0x118>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	b103      	cbz	r3, 80070fe <xTaskIncrementTick+0xea>
			xSwitchRequired = pdTRUE;
 80070fc:	2701      	movs	r7, #1
}
 80070fe:	4638      	mov	r0, r7
 8007100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007102:	bf00      	nop
 8007104:	20010620 	.word	0x20010620
 8007108:	20010644 	.word	0x20010644
 800710c:	20010690 	.word	0x20010690
 8007110:	2001068c 	.word	0x2001068c
 8007114:	20010630 	.word	0x20010630
 8007118:	20010628 	.word	0x20010628
 800711c:	20010748 	.word	0x20010748
 8007120:	200106bc 	.word	0x200106bc
 8007124:	20010640 	.word	0x20010640
 8007128:	20010638 	.word	0x20010638
 800712c:	20010634 	.word	0x20010634

08007130 <xTaskResumeAll>:
{
 8007130:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8007132:	4b36      	ldr	r3, [pc, #216]	@ (800720c <xTaskResumeAll+0xdc>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	b953      	cbnz	r3, 800714e <xTaskResumeAll+0x1e>
 8007138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713c:	b672      	cpsid	i
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	b662      	cpsie	i
 800714c:	e7fe      	b.n	800714c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800714e:	f7fe fef9 	bl	8005f44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007152:	4b2e      	ldr	r3, [pc, #184]	@ (800720c <xTaskResumeAll+0xdc>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	3a01      	subs	r2, #1
 8007158:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d14f      	bne.n	8007200 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007160:	4b2b      	ldr	r3, [pc, #172]	@ (8007210 <xTaskResumeAll+0xe0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	b90b      	cbnz	r3, 800716a <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8007166:	2400      	movs	r4, #0
 8007168:	e04b      	b.n	8007202 <xTaskResumeAll+0xd2>
TCB_t *pxTCB = NULL;
 800716a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800716c:	4b29      	ldr	r3, [pc, #164]	@ (8007214 <xTaskResumeAll+0xe4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	b31b      	cbz	r3, 80071ba <xTaskResumeAll+0x8a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007172:	4b28      	ldr	r3, [pc, #160]	@ (8007214 <xTaskResumeAll+0xe4>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007178:	f104 0018 	add.w	r0, r4, #24
 800717c:	f7fe fe60 	bl	8005e40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007180:	1d25      	adds	r5, r4, #4
 8007182:	4628      	mov	r0, r5
 8007184:	f7fe fe5c 	bl	8005e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007188:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800718a:	2301      	movs	r3, #1
 800718c:	4083      	lsls	r3, r0
 800718e:	4a22      	ldr	r2, [pc, #136]	@ (8007218 <xTaskResumeAll+0xe8>)
 8007190:	6811      	ldr	r1, [r2, #0]
 8007192:	430b      	orrs	r3, r1
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800719a:	4629      	mov	r1, r5
 800719c:	4b1f      	ldr	r3, [pc, #124]	@ (800721c <xTaskResumeAll+0xec>)
 800719e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80071a2:	f7fe fe29 	bl	8005df8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80071a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007220 <xTaskResumeAll+0xf0>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d3dc      	bcc.n	800716c <xTaskResumeAll+0x3c>
						xYieldPending = pdTRUE;
 80071b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007224 <xTaskResumeAll+0xf4>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e7d8      	b.n	800716c <xTaskResumeAll+0x3c>
				if( pxTCB != NULL )
 80071ba:	b10c      	cbz	r4, 80071c0 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 80071bc:	f7ff fcca 	bl	8006b54 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80071c0:	4b19      	ldr	r3, [pc, #100]	@ (8007228 <xTaskResumeAll+0xf8>)
 80071c2:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80071c4:	b984      	cbnz	r4, 80071e8 <xTaskResumeAll+0xb8>
				if( xYieldPending != pdFALSE )
 80071c6:	4b17      	ldr	r3, [pc, #92]	@ (8007224 <xTaskResumeAll+0xf4>)
 80071c8:	681c      	ldr	r4, [r3, #0]
 80071ca:	b1d4      	cbz	r4, 8007202 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 80071cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80071d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80071e0:	2401      	movs	r4, #1
 80071e2:	e00e      	b.n	8007202 <xTaskResumeAll+0xd2>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80071e4:	3c01      	subs	r4, #1
 80071e6:	d007      	beq.n	80071f8 <xTaskResumeAll+0xc8>
							if( xTaskIncrementTick() != pdFALSE )
 80071e8:	f7ff ff14 	bl	8007014 <xTaskIncrementTick>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d0f9      	beq.n	80071e4 <xTaskResumeAll+0xb4>
								xYieldPending = pdTRUE;
 80071f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007224 <xTaskResumeAll+0xf4>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	e7f5      	b.n	80071e4 <xTaskResumeAll+0xb4>
						uxPendedTicks = 0;
 80071f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007228 <xTaskResumeAll+0xf8>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e7e2      	b.n	80071c6 <xTaskResumeAll+0x96>
BaseType_t xAlreadyYielded = pdFALSE;
 8007200:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007202:	f7fe fec5 	bl	8005f90 <vPortExitCritical>
}
 8007206:	4620      	mov	r0, r4
 8007208:	bd38      	pop	{r3, r4, r5, pc}
 800720a:	bf00      	nop
 800720c:	20010620 	.word	0x20010620
 8007210:	20010648 	.word	0x20010648
 8007214:	20010678 	.word	0x20010678
 8007218:	20010640 	.word	0x20010640
 800721c:	200106bc 	.word	0x200106bc
 8007220:	20010748 	.word	0x20010748
 8007224:	20010634 	.word	0x20010634
 8007228:	20010638 	.word	0x20010638

0800722c <vTaskDelay>:
	{
 800722c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800722e:	b1b8      	cbz	r0, 8007260 <vTaskDelay+0x34>
 8007230:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8007232:	4b11      	ldr	r3, [pc, #68]	@ (8007278 <vTaskDelay+0x4c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	b153      	cbz	r3, 800724e <vTaskDelay+0x22>
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	b672      	cpsid	i
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	b662      	cpsie	i
 800724c:	e7fe      	b.n	800724c <vTaskDelay+0x20>
			vTaskSuspendAll();
 800724e:	f7ff fed9 	bl	8007004 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007252:	2100      	movs	r1, #0
 8007254:	4620      	mov	r0, r4
 8007256:	f7ff fdcf 	bl	8006df8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800725a:	f7ff ff69 	bl	8007130 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800725e:	b948      	cbnz	r0, 8007274 <vTaskDelay+0x48>
			portYIELD_WITHIN_API();
 8007260:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007268:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
	}
 8007274:	bd10      	pop	{r4, pc}
 8007276:	bf00      	nop
 8007278:	20010620 	.word	0x20010620

0800727c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800727c:	4b23      	ldr	r3, [pc, #140]	@ (800730c <vTaskSwitchContext+0x90>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	b11b      	cbz	r3, 800728a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8007282:	4b23      	ldr	r3, [pc, #140]	@ (8007310 <vTaskSwitchContext+0x94>)
 8007284:	2201      	movs	r2, #1
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800728a:	4b21      	ldr	r3, [pc, #132]	@ (8007310 <vTaskSwitchContext+0x94>)
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007290:	4b20      	ldr	r3, [pc, #128]	@ (8007314 <vTaskSwitchContext+0x98>)
 8007292:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007294:	fab3 f383 	clz	r3, r3
 8007298:	b2db      	uxtb	r3, r3
 800729a:	f1c3 031f 	rsb	r3, r3, #31
 800729e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80072a2:	008a      	lsls	r2, r1, #2
 80072a4:	491c      	ldr	r1, [pc, #112]	@ (8007318 <vTaskSwitchContext+0x9c>)
 80072a6:	588a      	ldr	r2, [r1, r2]
 80072a8:	b952      	cbnz	r2, 80072c0 <vTaskSwitchContext+0x44>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ae:	b672      	cpsid	i
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	b662      	cpsie	i
 80072be:	e7fe      	b.n	80072be <vTaskSwitchContext+0x42>
 80072c0:	4815      	ldr	r0, [pc, #84]	@ (8007318 <vTaskSwitchContext+0x9c>)
 80072c2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80072c6:	008a      	lsls	r2, r1, #2
 80072c8:	4402      	add	r2, r0
 80072ca:	6851      	ldr	r1, [r2, #4]
 80072cc:	6849      	ldr	r1, [r1, #4]
 80072ce:	6051      	str	r1, [r2, #4]
 80072d0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80072d4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80072d8:	3208      	adds	r2, #8
 80072da:	4402      	add	r2, r0
 80072dc:	4291      	cmp	r1, r2
 80072de:	d00d      	beq.n	80072fc <vTaskSwitchContext+0x80>
 80072e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80072e4:	009a      	lsls	r2, r3, #2
 80072e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <vTaskSwitchContext+0x9c>)
 80072e8:	4413      	add	r3, r2
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	4b0b      	ldr	r3, [pc, #44]	@ (800731c <vTaskSwitchContext+0xa0>)
 80072f0:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	335c      	adds	r3, #92	@ 0x5c
 80072f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007320 <vTaskSwitchContext+0xa4>)
 80072f8:	6013      	str	r3, [r2, #0]
}
 80072fa:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80072fc:	6848      	ldr	r0, [r1, #4]
 80072fe:	4662      	mov	r2, ip
 8007300:	0091      	lsls	r1, r2, #2
 8007302:	4a05      	ldr	r2, [pc, #20]	@ (8007318 <vTaskSwitchContext+0x9c>)
 8007304:	440a      	add	r2, r1
 8007306:	6050      	str	r0, [r2, #4]
 8007308:	e7ea      	b.n	80072e0 <vTaskSwitchContext+0x64>
 800730a:	bf00      	nop
 800730c:	20010620 	.word	0x20010620
 8007310:	20010634 	.word	0x20010634
 8007314:	20010640 	.word	0x20010640
 8007318:	200106bc 	.word	0x200106bc
 800731c:	20010748 	.word	0x20010748
 8007320:	2000040c 	.word	0x2000040c

08007324 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007324:	b158      	cbz	r0, 800733e <vTaskPlaceOnEventList+0x1a>
{
 8007326:	b510      	push	{r4, lr}
 8007328:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800732a:	4a0a      	ldr	r2, [pc, #40]	@ (8007354 <vTaskPlaceOnEventList+0x30>)
 800732c:	6811      	ldr	r1, [r2, #0]
 800732e:	3118      	adds	r1, #24
 8007330:	f7fe fd6d 	bl	8005e0e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007334:	2101      	movs	r1, #1
 8007336:	4620      	mov	r0, r4
 8007338:	f7ff fd5e 	bl	8006df8 <prvAddCurrentTaskToDelayedList>
}
 800733c:	bd10      	pop	{r4, pc}
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	b672      	cpsid	i
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	b662      	cpsie	i
	configASSERT( pxEventList );
 8007352:	e7fe      	b.n	8007352 <vTaskPlaceOnEventList+0x2e>
 8007354:	20010748 	.word	0x20010748

08007358 <xTaskRemoveFromEventList>:
{
 8007358:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800735a:	68c3      	ldr	r3, [r0, #12]
 800735c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800735e:	b324      	cbz	r4, 80073aa <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007360:	f104 0518 	add.w	r5, r4, #24
 8007364:	4628      	mov	r0, r5
 8007366:	f7fe fd6b 	bl	8005e40 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800736a:	4b19      	ldr	r3, [pc, #100]	@ (80073d0 <xTaskRemoveFromEventList+0x78>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	bb3b      	cbnz	r3, 80073c0 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007370:	1d25      	adds	r5, r4, #4
 8007372:	4628      	mov	r0, r5
 8007374:	f7fe fd64 	bl	8005e40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007378:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800737a:	2301      	movs	r3, #1
 800737c:	4083      	lsls	r3, r0
 800737e:	4a15      	ldr	r2, [pc, #84]	@ (80073d4 <xTaskRemoveFromEventList+0x7c>)
 8007380:	6811      	ldr	r1, [r2, #0]
 8007382:	430b      	orrs	r3, r1
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800738a:	4629      	mov	r1, r5
 800738c:	4b12      	ldr	r3, [pc, #72]	@ (80073d8 <xTaskRemoveFromEventList+0x80>)
 800738e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007392:	f7fe fd31 	bl	8005df8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007396:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007398:	4b10      	ldr	r3, [pc, #64]	@ (80073dc <xTaskRemoveFromEventList+0x84>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739e:	429a      	cmp	r2, r3
 80073a0:	d913      	bls.n	80073ca <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 80073a2:	2001      	movs	r0, #1
 80073a4:	4b0e      	ldr	r3, [pc, #56]	@ (80073e0 <xTaskRemoveFromEventList+0x88>)
 80073a6:	6018      	str	r0, [r3, #0]
}
 80073a8:	bd38      	pop	{r3, r4, r5, pc}
 80073aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ae:	b672      	cpsid	i
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 80073be:	e7fe      	b.n	80073be <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073c0:	4629      	mov	r1, r5
 80073c2:	4808      	ldr	r0, [pc, #32]	@ (80073e4 <xTaskRemoveFromEventList+0x8c>)
 80073c4:	f7fe fd18 	bl	8005df8 <vListInsertEnd>
 80073c8:	e7e5      	b.n	8007396 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80073ca:	2000      	movs	r0, #0
	return xReturn;
 80073cc:	e7ec      	b.n	80073a8 <xTaskRemoveFromEventList+0x50>
 80073ce:	bf00      	nop
 80073d0:	20010620 	.word	0x20010620
 80073d4:	20010640 	.word	0x20010640
 80073d8:	200106bc 	.word	0x200106bc
 80073dc:	20010748 	.word	0x20010748
 80073e0:	20010634 	.word	0x20010634
 80073e4:	20010678 	.word	0x20010678

080073e8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073e8:	4b03      	ldr	r3, [pc, #12]	@ (80073f8 <vTaskInternalSetTimeOutState+0x10>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073ee:	4b03      	ldr	r3, [pc, #12]	@ (80073fc <vTaskInternalSetTimeOutState+0x14>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6043      	str	r3, [r0, #4]
}
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	20010630 	.word	0x20010630
 80073fc:	20010644 	.word	0x20010644

08007400 <xTaskCheckForTimeOut>:
{
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8007402:	b1c8      	cbz	r0, 8007438 <xTaskCheckForTimeOut+0x38>
 8007404:	460c      	mov	r4, r1
 8007406:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8007408:	b309      	cbz	r1, 800744e <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 800740a:	f7fe fd9b 	bl	8005f44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800740e:	4b1d      	ldr	r3, [pc, #116]	@ (8007484 <xTaskCheckForTimeOut+0x84>)
 8007410:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007412:	686b      	ldr	r3, [r5, #4]
 8007414:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	f1b2 3fff 	cmp.w	r2, #4294967295
 800741c:	d02a      	beq.n	8007474 <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800741e:	4e1a      	ldr	r6, [pc, #104]	@ (8007488 <xTaskCheckForTimeOut+0x88>)
 8007420:	6836      	ldr	r6, [r6, #0]
 8007422:	682f      	ldr	r7, [r5, #0]
 8007424:	42b7      	cmp	r7, r6
 8007426:	d001      	beq.n	800742c <xTaskCheckForTimeOut+0x2c>
 8007428:	428b      	cmp	r3, r1
 800742a:	d928      	bls.n	800747e <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800742c:	4282      	cmp	r2, r0
 800742e:	d819      	bhi.n	8007464 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007434:	2401      	movs	r4, #1
 8007436:	e01e      	b.n	8007476 <xTaskCheckForTimeOut+0x76>
 8007438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743c:	b672      	cpsid	i
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 800744c:	e7fe      	b.n	800744c <xTaskCheckForTimeOut+0x4c>
 800744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007452:	b672      	cpsid	i
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8007462:	e7fe      	b.n	8007462 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait -= xElapsedTime;
 8007464:	1a5b      	subs	r3, r3, r1
 8007466:	4413      	add	r3, r2
 8007468:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800746a:	4628      	mov	r0, r5
 800746c:	f7ff ffbc 	bl	80073e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007470:	2400      	movs	r4, #0
 8007472:	e000      	b.n	8007476 <xTaskCheckForTimeOut+0x76>
				xReturn = pdFALSE;
 8007474:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007476:	f7fe fd8b 	bl	8005f90 <vPortExitCritical>
}
 800747a:	4620      	mov	r0, r4
 800747c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800747e:	2401      	movs	r4, #1
 8007480:	e7f9      	b.n	8007476 <xTaskCheckForTimeOut+0x76>
 8007482:	bf00      	nop
 8007484:	20010644 	.word	0x20010644
 8007488:	20010630 	.word	0x20010630

0800748c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800748c:	4b01      	ldr	r3, [pc, #4]	@ (8007494 <vTaskMissedYield+0x8>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
}
 8007492:	4770      	bx	lr
 8007494:	20010634 	.word	0x20010634

08007498 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007498:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <xTaskGetSchedulerState+0x18>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	b133      	cbz	r3, 80074ac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800749e:	4b05      	ldr	r3, [pc, #20]	@ (80074b4 <xTaskGetSchedulerState+0x1c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	b10b      	cbz	r3, 80074a8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80074a4:	2000      	movs	r0, #0
	}
 80074a6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80074a8:	2002      	movs	r0, #2
 80074aa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074ac:	2001      	movs	r0, #1
 80074ae:	4770      	bx	lr
 80074b0:	2001063c 	.word	0x2001063c
 80074b4:	20010620 	.word	0x20010620

080074b8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d051      	beq.n	8007560 <xTaskPriorityInherit+0xa8>
	{
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80074c0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80074c2:	4a29      	ldr	r2, [pc, #164]	@ (8007568 <xTaskPriorityInherit+0xb0>)
 80074c4:	6812      	ldr	r2, [r2, #0]
 80074c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d241      	bcs.n	8007550 <xTaskPriorityInherit+0x98>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074cc:	6982      	ldr	r2, [r0, #24]
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	db05      	blt.n	80074de <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d2:	4a25      	ldr	r2, [pc, #148]	@ (8007568 <xTaskPriorityInherit+0xb0>)
 80074d4:	6812      	ldr	r2, [r2, #0]
 80074d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074d8:	f1c2 0207 	rsb	r2, r2, #7
 80074dc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074de:	6961      	ldr	r1, [r4, #20]
 80074e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80074e4:	4a21      	ldr	r2, [pc, #132]	@ (800756c <xTaskPriorityInherit+0xb4>)
 80074e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80074ea:	4299      	cmp	r1, r3
 80074ec:	d005      	beq.n	80074fa <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007568 <xTaskPriorityInherit+0xb0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 80074f6:	2001      	movs	r0, #1
	}
 80074f8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074fa:	1d25      	adds	r5, r4, #4
 80074fc:	4628      	mov	r0, r5
 80074fe:	f7fe fc9f 	bl	8005e40 <uxListRemove>
 8007502:	b1a0      	cbz	r0, 800752e <xTaskPriorityInherit+0x76>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007504:	4b18      	ldr	r3, [pc, #96]	@ (8007568 <xTaskPriorityInherit+0xb0>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800750a:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800750c:	2401      	movs	r4, #1
 800750e:	fa04 f300 	lsl.w	r3, r4, r0
 8007512:	4a17      	ldr	r2, [pc, #92]	@ (8007570 <xTaskPriorityInherit+0xb8>)
 8007514:	6811      	ldr	r1, [r2, #0]
 8007516:	430b      	orrs	r3, r1
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800751e:	4629      	mov	r1, r5
 8007520:	4b12      	ldr	r3, [pc, #72]	@ (800756c <xTaskPriorityInherit+0xb4>)
 8007522:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007526:	f7fe fc67 	bl	8005df8 <vListInsertEnd>
				xReturn = pdTRUE;
 800752a:	4620      	mov	r0, r4
 800752c:	e7e4      	b.n	80074f8 <xTaskPriorityInherit+0x40>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800752e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007530:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	490d      	ldr	r1, [pc, #52]	@ (800756c <xTaskPriorityInherit+0xb4>)
 8007538:	58cb      	ldr	r3, [r1, r3]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e2      	bne.n	8007504 <xTaskPriorityInherit+0x4c>
 800753e:	2301      	movs	r3, #1
 8007540:	fa03 f202 	lsl.w	r2, r3, r2
 8007544:	490a      	ldr	r1, [pc, #40]	@ (8007570 <xTaskPriorityInherit+0xb8>)
 8007546:	680b      	ldr	r3, [r1, #0]
 8007548:	ea23 0302 	bic.w	r3, r3, r2
 800754c:	600b      	str	r3, [r1, #0]
 800754e:	e7d9      	b.n	8007504 <xTaskPriorityInherit+0x4c>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007550:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007552:	4b05      	ldr	r3, [pc, #20]	@ (8007568 <xTaskPriorityInherit+0xb0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	429a      	cmp	r2, r3
 800755a:	d303      	bcc.n	8007564 <xTaskPriorityInherit+0xac>
	BaseType_t xReturn = pdFALSE;
 800755c:	2000      	movs	r0, #0
 800755e:	e7cb      	b.n	80074f8 <xTaskPriorityInherit+0x40>
 8007560:	2000      	movs	r0, #0
	}
 8007562:	4770      	bx	lr
					xReturn = pdTRUE;
 8007564:	2001      	movs	r0, #1
		return xReturn;
 8007566:	e7c7      	b.n	80074f8 <xTaskPriorityInherit+0x40>
 8007568:	20010748 	.word	0x20010748
 800756c:	200106bc 	.word	0x200106bc
 8007570:	20010640 	.word	0x20010640

08007574 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007574:	2800      	cmp	r0, #0
 8007576:	d04f      	beq.n	8007618 <xTaskPriorityDisinherit+0xa4>
	{
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800757c:	4b28      	ldr	r3, [pc, #160]	@ (8007620 <xTaskPriorityDisinherit+0xac>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4283      	cmp	r3, r0
 8007582:	d00a      	beq.n	800759a <xTaskPriorityDisinherit+0x26>
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	b672      	cpsid	i
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	b662      	cpsie	i
 8007598:	e7fe      	b.n	8007598 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800759a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800759c:	b953      	cbnz	r3, 80075b4 <xTaskPriorityDisinherit+0x40>
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	b672      	cpsid	i
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	b662      	cpsie	i
 80075b2:	e7fe      	b.n	80075b2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 80075b4:	3b01      	subs	r3, #1
 80075b6:	6583      	str	r3, [r0, #88]	@ 0x58
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075b8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80075ba:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80075bc:	4291      	cmp	r1, r2
 80075be:	d02d      	beq.n	800761c <xTaskPriorityDisinherit+0xa8>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075c0:	b10b      	cbz	r3, 80075c6 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 80075c2:	2000      	movs	r0, #0
	}
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c6:	1d05      	adds	r5, r0, #4
 80075c8:	4628      	mov	r0, r5
 80075ca:	f7fe fc39 	bl	8005e40 <uxListRemove>
 80075ce:	b968      	cbnz	r0, 80075ec <xTaskPriorityDisinherit+0x78>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80075d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80075d6:	0092      	lsls	r2, r2, #2
 80075d8:	4912      	ldr	r1, [pc, #72]	@ (8007624 <xTaskPriorityDisinherit+0xb0>)
 80075da:	588a      	ldr	r2, [r1, r2]
 80075dc:	b932      	cbnz	r2, 80075ec <xTaskPriorityDisinherit+0x78>
 80075de:	2201      	movs	r2, #1
 80075e0:	409a      	lsls	r2, r3
 80075e2:	4911      	ldr	r1, [pc, #68]	@ (8007628 <xTaskPriorityDisinherit+0xb4>)
 80075e4:	680b      	ldr	r3, [r1, #0]
 80075e6:	ea23 0302 	bic.w	r3, r3, r2
 80075ea:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075ec:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80075ee:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f0:	f1c0 0307 	rsb	r3, r0, #7
 80075f4:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80075f6:	2401      	movs	r4, #1
 80075f8:	fa04 f300 	lsl.w	r3, r4, r0
 80075fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007628 <xTaskPriorityDisinherit+0xb4>)
 80075fe:	6811      	ldr	r1, [r2, #0]
 8007600:	430b      	orrs	r3, r1
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007608:	4629      	mov	r1, r5
 800760a:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <xTaskPriorityDisinherit+0xb0>)
 800760c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007610:	f7fe fbf2 	bl	8005df8 <vListInsertEnd>
					xReturn = pdTRUE;
 8007614:	4620      	mov	r0, r4
 8007616:	e7d5      	b.n	80075c4 <xTaskPriorityDisinherit+0x50>
	BaseType_t xReturn = pdFALSE;
 8007618:	2000      	movs	r0, #0
	}
 800761a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800761c:	2000      	movs	r0, #0
 800761e:	e7d1      	b.n	80075c4 <xTaskPriorityDisinherit+0x50>
 8007620:	20010748 	.word	0x20010748
 8007624:	200106bc 	.word	0x200106bc
 8007628:	20010640 	.word	0x20010640

0800762c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800762c:	2800      	cmp	r0, #0
 800762e:	d059      	beq.n	80076e4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
	{
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8007634:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8007636:	b953      	cbnz	r3, 800764e <vTaskPriorityDisinheritAfterTimeout+0x22>
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	b672      	cpsid	i
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	b662      	cpsie	i
 800764c:	e7fe      	b.n	800764c <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800764e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007650:	428a      	cmp	r2, r1
 8007652:	d200      	bcs.n	8007656 <vTaskPriorityDisinheritAfterTimeout+0x2a>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007654:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007656:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007658:	4291      	cmp	r1, r2
 800765a:	d001      	beq.n	8007660 <vTaskPriorityDisinheritAfterTimeout+0x34>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800765c:	2b01      	cmp	r3, #1
 800765e:	d000      	beq.n	8007662 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8007660:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8007662:	4b21      	ldr	r3, [pc, #132]	@ (80076e8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	42a3      	cmp	r3, r4
 8007668:	d031      	beq.n	80076ce <vTaskPriorityDisinheritAfterTimeout+0xa2>
					pxTCB->uxPriority = uxPriorityToUse;
 800766a:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800766c:	69a3      	ldr	r3, [r4, #24]
 800766e:	2b00      	cmp	r3, #0
 8007670:	db02      	blt.n	8007678 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007672:	f1c2 0207 	rsb	r2, r2, #7
 8007676:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007678:	6962      	ldr	r2, [r4, #20]
 800767a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800767e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ec <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8007680:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007684:	429a      	cmp	r2, r3
 8007686:	d1eb      	bne.n	8007660 <vTaskPriorityDisinheritAfterTimeout+0x34>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007688:	1d25      	adds	r5, r4, #4
 800768a:	4628      	mov	r0, r5
 800768c:	f7fe fbd8 	bl	8005e40 <uxListRemove>
 8007690:	b968      	cbnz	r0, 80076ae <vTaskPriorityDisinheritAfterTimeout+0x82>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007692:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007694:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007698:	0092      	lsls	r2, r2, #2
 800769a:	4914      	ldr	r1, [pc, #80]	@ (80076ec <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 800769c:	588a      	ldr	r2, [r1, r2]
 800769e:	b932      	cbnz	r2, 80076ae <vTaskPriorityDisinheritAfterTimeout+0x82>
 80076a0:	2201      	movs	r2, #1
 80076a2:	409a      	lsls	r2, r3
 80076a4:	4912      	ldr	r1, [pc, #72]	@ (80076f0 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80076a6:	680b      	ldr	r3, [r1, #0]
 80076a8:	ea23 0302 	bic.w	r3, r3, r2
 80076ac:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 80076ae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80076b0:	2301      	movs	r3, #1
 80076b2:	4083      	lsls	r3, r0
 80076b4:	4a0e      	ldr	r2, [pc, #56]	@ (80076f0 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80076b6:	6811      	ldr	r1, [r2, #0]
 80076b8:	430b      	orrs	r3, r1
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80076c0:	4629      	mov	r1, r5
 80076c2:	4b0a      	ldr	r3, [pc, #40]	@ (80076ec <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80076c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80076c8:	f7fe fb96 	bl	8005df8 <vListInsertEnd>
	}
 80076cc:	e7c8      	b.n	8007660 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80076ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d2:	b672      	cpsid	i
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 80076e2:	e7fe      	b.n	80076e2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20010748 	.word	0x20010748
 80076ec:	200106bc 	.word	0x200106bc
 80076f0:	20010640 	.word	0x20010640

080076f4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80076f4:	4b05      	ldr	r3, [pc, #20]	@ (800770c <pvTaskIncrementMutexHeldCount+0x18>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	b123      	cbz	r3, 8007704 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80076fa:	4b04      	ldr	r3, [pc, #16]	@ (800770c <pvTaskIncrementMutexHeldCount+0x18>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007700:	3301      	adds	r3, #1
 8007702:	6593      	str	r3, [r2, #88]	@ 0x58
		return pxCurrentTCB;
 8007704:	4b01      	ldr	r3, [pc, #4]	@ (800770c <pvTaskIncrementMutexHeldCount+0x18>)
 8007706:	6818      	ldr	r0, [r3, #0]
	}
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	20010748 	.word	0x20010748

08007710 <reg_read>:
	HAL_Delay(10);
	return 0;
}

static uint16_t reg_read(uint8_t memAddr)
{
 8007710:	b510      	push	{r4, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_write(AR1010_ADDRESS, &memAddr, 1);
 8007718:	2201      	movs	r2, #1
 800771a:	f10d 0107 	add.w	r1, sp, #7
 800771e:	2010      	movs	r0, #16
 8007720:	f002 f9bc 	bl	8009a9c <I2C_write>
	uint8_t read[2];
	I2C_read(AR1010_ADDRESS, read, 2);
 8007724:	2202      	movs	r2, #2
 8007726:	a903      	add	r1, sp, #12
 8007728:	2010      	movs	r0, #16
 800772a:	f002 f9cd 	bl	8009ac8 <I2C_read>
	uint8_t upper = read[0];
 800772e:	f89d 300c 	ldrb.w	r3, [sp, #12]
	uint8_t lower = read[1];
 8007732:	f89d 400d 	ldrb.w	r4, [sp, #13]
	uint16_t outputWord = (upper << 8) + lower;
 8007736:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 800773a:	b2a4      	uxth	r4, r4
	HAL_Delay(10);
 800773c:	200a      	movs	r0, #10
 800773e:	f7f8 ff9b 	bl	8000678 <HAL_Delay>
	return outputWord;
}
 8007742:	4620      	mov	r0, r4
 8007744:	b004      	add	sp, #16
 8007746:	bd10      	pop	{r4, pc}

08007748 <mem_sub_read>:
{
	return mem_AND(memAddr, ~mask);
}

static uint16_t mem_sub_read(uint8_t memAddr, uint16_t mask)
{
 8007748:	b510      	push	{r4, lr}
 800774a:	460c      	mov	r4, r1
	uint16_t opWord = reg_read(memAddr);
 800774c:	f7ff ffe0 	bl	8007710 <reg_read>
	return opWord & mask;
}
 8007750:	4020      	ands	r0, r4
 8007752:	bd10      	pop	{r4, pc}

08007754 <reg_write>:
{
 8007754:	b500      	push	{lr}
 8007756:	b083      	sub	sp, #12
	uint8_t upper = (inputWord & 0xFF00) >> 8;
 8007758:	0a0b      	lsrs	r3, r1, #8
	data[0] = memAddr;
 800775a:	f88d 0004 	strb.w	r0, [sp, #4]
	data[1] = upper;
 800775e:	f88d 3005 	strb.w	r3, [sp, #5]
	data[2] = lower;
 8007762:	f88d 1006 	strb.w	r1, [sp, #6]
	I2C_write(AR1010_ADDRESS, data, 3);
 8007766:	2203      	movs	r2, #3
 8007768:	a901      	add	r1, sp, #4
 800776a:	2010      	movs	r0, #16
 800776c:	f002 f996 	bl	8009a9c <I2C_write>
	HAL_Delay(10);
 8007770:	200a      	movs	r0, #10
 8007772:	f7f8 ff81 	bl	8000678 <HAL_Delay>
}
 8007776:	2000      	movs	r0, #0
 8007778:	b003      	add	sp, #12
 800777a:	f85d fb04 	ldr.w	pc, [sp], #4

0800777e <mem_AND>:
{
 800777e:	b538      	push	{r3, r4, r5, lr}
 8007780:	4604      	mov	r4, r0
 8007782:	460d      	mov	r5, r1
	uint16_t opWord = reg_read(memAddr);
 8007784:	f7ff ffc4 	bl	8007710 <reg_read>
	return reg_write(memAddr, opWord);
 8007788:	ea00 0105 	and.w	r1, r0, r5
 800778c:	4620      	mov	r0, r4
 800778e:	f7ff ffe1 	bl	8007754 <reg_write>
}
 8007792:	bd38      	pop	{r3, r4, r5, pc}

08007794 <mem_low>:
{
 8007794:	b508      	push	{r3, lr}
	return mem_AND(memAddr, ~mask);
 8007796:	43c9      	mvns	r1, r1
 8007798:	b289      	uxth	r1, r1
 800779a:	f7ff fff0 	bl	800777e <mem_AND>
}
 800779e:	bd08      	pop	{r3, pc}

080077a0 <mem_sub_write>:

static uint8_t mem_sub_write(uint8_t memAddr, uint16_t inputWord, uint16_t mask)
{
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	4605      	mov	r5, r0
 80077a4:	460e      	mov	r6, r1
 80077a6:	4614      	mov	r4, r2
	uint16_t opWord = reg_read(memAddr);
 80077a8:	f7ff ffb2 	bl	8007710 <reg_read>
	opWord = opWord & ~mask;
 80077ac:	43e3      	mvns	r3, r4
 80077ae:	b21b      	sxth	r3, r3
 80077b0:	4003      	ands	r3, r0
 80077b2:	b29b      	uxth	r3, r3
	inputWord = inputWord & mask;
 80077b4:	4034      	ands	r4, r6
	uint16_t outputWord = opWord | inputWord;
	return reg_write(memAddr, outputWord);
 80077b6:	ea43 0104 	orr.w	r1, r3, r4
 80077ba:	4628      	mov	r0, r5
 80077bc:	f7ff ffca 	bl	8007754 <reg_write>
}
 80077c0:	bd70      	pop	{r4, r5, r6, pc}

080077c2 <mem_OR>:
{
 80077c2:	b538      	push	{r3, r4, r5, lr}
 80077c4:	4604      	mov	r4, r0
 80077c6:	460d      	mov	r5, r1
	uint16_t opWord = reg_read(memAddr);
 80077c8:	f7ff ffa2 	bl	8007710 <reg_read>
	opWord |= mask;
 80077cc:	ea40 0105 	orr.w	r1, r0, r5
	return reg_write(memAddr, opWord);
 80077d0:	b289      	uxth	r1, r1
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff ffbe 	bl	8007754 <reg_write>
}
 80077d8:	bd38      	pop	{r3, r4, r5, pc}

080077da <mem_high>:
{
 80077da:	b508      	push	{r3, lr}
	return mem_OR(memAddr, mask);
 80077dc:	f7ff fff1 	bl	80077c2 <mem_OR>
}
 80077e0:	bd08      	pop	{r3, pc}
	...

080077e4 <AR1010_init>:
{
 80077e4:	b510      	push	{r4, lr}
	uint16_t chip_no = mem_sub_read(0x1C, 0xFFFF);
 80077e6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80077ea:	201c      	movs	r0, #28
 80077ec:	f7ff ffac 	bl	8007748 <mem_sub_read>
	if (chip_no != 0x1010)
 80077f0:	f241 0310 	movw	r3, #4112	@ 0x1010
 80077f4:	4298      	cmp	r0, r3
 80077f6:	d101      	bne.n	80077fc <AR1010_init+0x18>
{
 80077f8:	2401      	movs	r4, #1
 80077fa:	e00a      	b.n	8007812 <AR1010_init+0x2e>
		Error_Handler();
 80077fc:	f006 fc4a 	bl	800e094 <Error_Handler>
 8007800:	e7fa      	b.n	80077f8 <AR1010_init+0x14>
		reg_write(i, initialRegisters[i]);
 8007802:	4b10      	ldr	r3, [pc, #64]	@ (8007844 <AR1010_init+0x60>)
 8007804:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8007808:	4620      	mov	r0, r4
 800780a:	f7ff ffa3 	bl	8007754 <reg_write>
	for (uint8_t i = 1; i < 18; i++)
 800780e:	3401      	adds	r4, #1
 8007810:	b2e4      	uxtb	r4, r4
 8007812:	2c11      	cmp	r4, #17
 8007814:	d9f5      	bls.n	8007802 <AR1010_init+0x1e>
	reg_write(0x00, initialRegisters[0]);
 8007816:	4b0b      	ldr	r3, [pc, #44]	@ (8007844 <AR1010_init+0x60>)
 8007818:	8819      	ldrh	r1, [r3, #0]
 800781a:	2000      	movs	r0, #0
 800781c:	f7ff ff9a 	bl	8007754 <reg_write>
	mem_low(0x01, 0x000E); //disable HMUTE and SMUTE
 8007820:	210e      	movs	r1, #14
 8007822:	2001      	movs	r0, #1
 8007824:	f7ff ffb6 	bl	8007794 <mem_low>
	mem_sub_write(0x03, 0B11 << 3, 0B11 << 3); //Setup Band and Space
 8007828:	2218      	movs	r2, #24
 800782a:	4611      	mov	r1, r2
 800782c:	2003      	movs	r0, #3
 800782e:	f7ff ffb7 	bl	80077a0 <mem_sub_write>
	mem_sub_write(0x03, 0B1000 << 7, 0B1111 << 7); //Set Volume
 8007832:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8007836:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800783a:	2003      	movs	r0, #3
 800783c:	f7ff ffb0 	bl	80077a0 <mem_sub_write>
}
 8007840:	bd10      	pop	{r4, pc}
 8007842:	bf00      	nop
 8007844:	2000000c 	.word	0x2000000c

08007848 <AR1010_auto_tune>:
		;     //Wait STC
	mem_low(0x01, 0x0002);                 //Clear mute
}

void AR1010_auto_tune(float freq, uint8_t convert)
{ //freq in MHz as float
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	ee07 0a90 	vmov	s15, r0
	uint16_t chan;
	if (convert)
 800784e:	2900      	cmp	r1, #0
 8007850:	d070      	beq.n	8007934 <AR1010_auto_tune+0xec>
		chan = (uint16_t) (freq * 10 - 690);
 8007852:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800785a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8007950 <AR1010_auto_tune+0x108>
 800785e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007866:	ee17 3a90 	vmov	r3, s15
 800786a:	b29c      	uxth	r4, r3
	else
		chan = (uint16_t) freq;

	mem_high(0x01, 0x0002);										//Set mute
 800786c:	2102      	movs	r1, #2
 800786e:	2001      	movs	r0, #1
 8007870:	f7ff ffb3 	bl	80077da <mem_high>
	mem_low(0x02, 0x0200);										//Clear TUNE
 8007874:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007878:	2002      	movs	r0, #2
 800787a:	f7ff ff8b 	bl	8007794 <mem_low>
	mem_low(0x03, 0x4000);										//Clear SEEK
 800787e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007882:	2003      	movs	r0, #3
 8007884:	f7ff ff86 	bl	8007794 <mem_low>
	mem_sub_write(0x02, chan, 0x01FF);							//Set CHAN
 8007888:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800788c:	4621      	mov	r1, r4
 800788e:	2002      	movs	r0, #2
 8007890:	f7ff ff86 	bl	80077a0 <mem_sub_write>
														//Read Low-side LO injection
	mem_sub_write(0x0B, 0x0000, 0x8005);							//Set R11 (Clear D15, Clear D0/D2)
 8007894:	f248 0205 	movw	r2, #32773	@ 0x8005
 8007898:	2100      	movs	r1, #0
 800789a:	200b      	movs	r0, #11
 800789c:	f7ff ff80 	bl	80077a0 <mem_sub_write>
	mem_high(0x02, 0x0200);										//Enable TUNE
 80078a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078a4:	2002      	movs	r0, #2
 80078a6:	f7ff ff98 	bl	80077da <mem_high>
	while (!mem_sub_read(0x13, 0x0020))
 80078aa:	2120      	movs	r1, #32
 80078ac:	2013      	movs	r0, #19
 80078ae:	f7ff ff4b 	bl	8007748 <mem_sub_read>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d0f9      	beq.n	80078aa <AR1010_auto_tune+0x62>
		;                   //Wait for STC flag
	uint8_t RSSI1 = mem_sub_read(0x12, 0xFE00);					//Get RSSI1
 80078b6:	f44f 417e 	mov.w	r1, #65024	@ 0xfe00
 80078ba:	2012      	movs	r0, #18
 80078bc:	f7ff ff44 	bl	8007748 <mem_sub_read>
 80078c0:	b2c5      	uxtb	r5, r0
	mem_low(0x02, 0x0200);										//Clear TUNE
 80078c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078c6:	2002      	movs	r0, #2
 80078c8:	f7ff ff64 	bl	8007794 <mem_low>
														//Read High-side LO injection
	mem_sub_write(0x0B, 0x8005, 0x8005);							//Set R11 (Set D15, Set D0/D2)
 80078cc:	f248 0205 	movw	r2, #32773	@ 0x8005
 80078d0:	4611      	mov	r1, r2
 80078d2:	200b      	movs	r0, #11
 80078d4:	f7ff ff64 	bl	80077a0 <mem_sub_write>
	mem_high(0x02, 0x0200);										//Enable TUNE
 80078d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078dc:	2002      	movs	r0, #2
 80078de:	f7ff ff7c 	bl	80077da <mem_high>
	while (!mem_sub_read(0x13, 0x0020))
 80078e2:	2120      	movs	r1, #32
 80078e4:	2013      	movs	r0, #19
 80078e6:	f7ff ff2f 	bl	8007748 <mem_sub_read>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d0f9      	beq.n	80078e2 <AR1010_auto_tune+0x9a>
		;                   //Wait for STC flag
	uint8_t RSSI2 = mem_sub_read(0x12, 0xFE00);					//Get RSSI2
 80078ee:	f44f 417e 	mov.w	r1, #65024	@ 0xfe00
 80078f2:	2012      	movs	r0, #18
 80078f4:	f7ff ff28 	bl	8007748 <mem_sub_read>
 80078f8:	b2c4      	uxtb	r4, r0
	mem_low(0x02, 0x0200);										//Clear TUNE
 80078fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078fe:	2002      	movs	r0, #2
 8007900:	f7ff ff48 	bl	8007794 <mem_low>
														//Compare Hi-Lo strength
	if (RSSI1 > RSSI2)
 8007904:	42a5      	cmp	r5, r4
 8007906:	d91b      	bls.n	8007940 <AR1010_auto_tune+0xf8>
		mem_sub_write(0x0B, 0x0005, 0x8005);						//(RSSI1>RSSI2)?R11(Clear D15, Set D0/D2)
 8007908:	f248 0205 	movw	r2, #32773	@ 0x8005
 800790c:	2105      	movs	r1, #5
 800790e:	200b      	movs	r0, #11
 8007910:	f7ff ff46 	bl	80077a0 <mem_sub_write>
	else
		mem_sub_write(0x0B, 0x0000, 0x8000);						//:R11(Set D11, Clear D0/D2)
	mem_high(0x02, 0x0200);										//Enable TUNE
 8007914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007918:	2002      	movs	r0, #2
 800791a:	f7ff ff5e 	bl	80077da <mem_high>
	while (!mem_sub_read(0x13, 0x0020));							//Wait STC
 800791e:	2120      	movs	r1, #32
 8007920:	2013      	movs	r0, #19
 8007922:	f7ff ff11 	bl	8007748 <mem_sub_read>
 8007926:	2800      	cmp	r0, #0
 8007928:	d0f9      	beq.n	800791e <AR1010_auto_tune+0xd6>
	mem_low(0x01, 0x0002);										//Clear mute
 800792a:	2102      	movs	r1, #2
 800792c:	2001      	movs	r0, #1
 800792e:	f7ff ff31 	bl	8007794 <mem_low>
}
 8007932:	bd38      	pop	{r3, r4, r5, pc}
		chan = (uint16_t) freq;
 8007934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007938:	ee17 3a90 	vmov	r3, s15
 800793c:	b29c      	uxth	r4, r3
 800793e:	e795      	b.n	800786c <AR1010_auto_tune+0x24>
		mem_sub_write(0x0B, 0x0000, 0x8000);						//:R11(Set D11, Clear D0/D2)
 8007940:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007944:	2100      	movs	r1, #0
 8007946:	200b      	movs	r0, #11
 8007948:	f7ff ff2a 	bl	80077a0 <mem_sub_write>
 800794c:	e7e2      	b.n	8007914 <AR1010_auto_tune+0xcc>
 800794e:	bf00      	nop
 8007950:	442c8000 	.word	0x442c8000

08007954 <AR1010_set_volume>:
		AR1010_auto_tune((float) (mem_sub_read(0x13, 0xFF80) >> 7), 0); //autoTune with READCHAN                                             //
	mem_low(0x01, 0x0002);                                   //Clear mute
}

void AR1010_set_volume(uint8_t volume)
{
 8007954:	b510      	push	{r4, lr}
	if (volume > 18)
 8007956:	2812      	cmp	r0, #18
 8007958:	d900      	bls.n	800795c <AR1010_set_volume+0x8>
		volume = 18;
 800795a:	2012      	movs	r0, #18
	int write1 = volume1_conv[volume];
 800795c:	4b08      	ldr	r3, [pc, #32]	@ (8007980 <AR1010_set_volume+0x2c>)
 800795e:	5c19      	ldrb	r1, [r3, r0]
	int write2 = volume2_conv[volume];
 8007960:	4b08      	ldr	r3, [pc, #32]	@ (8007984 <AR1010_set_volume+0x30>)
 8007962:	5c1c      	ldrb	r4, [r3, r0]
	mem_sub_write(0x03, write1 << 7, 0B1111 << 7);
 8007964:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8007968:	01c9      	lsls	r1, r1, #7
 800796a:	2003      	movs	r0, #3
 800796c:	f7ff ff18 	bl	80077a0 <mem_sub_write>
	mem_sub_write(0x0E, write2 << 12, 0B1111 << 12);
 8007970:	0321      	lsls	r1, r4, #12
 8007972:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 8007976:	4011      	ands	r1, r2
 8007978:	200e      	movs	r0, #14
 800797a:	f7ff ff11 	bl	80077a0 <mem_sub_write>
}
 800797e:	bd10      	pop	{r4, pc}
 8007980:	08012d34 	.word	0x08012d34
 8007984:	08012d20 	.word	0x08012d20

08007988 <JSB_AR1010_get_frequency>:

float JSB_AR1010_get_frequency()
{
 8007988:	b508      	push	{r3, lr}
  return 0.1f * (((reg_read(0x13) & 0xFF80) >> 7) + 690);
 800798a:	2013      	movs	r0, #19
 800798c:	f7ff fec0 	bl	8007710 <reg_read>
 8007990:	f3c0 10cf 	ubfx	r0, r0, #7, #16
 8007994:	f200 20b2 	addw	r0, r0, #690	@ 0x2b2
 8007998:	ee07 0a90 	vmov	s15, r0
 800799c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80079a0:	ed9f 7a03 	vldr	s14, [pc, #12]	@ 80079b0 <JSB_AR1010_get_frequency+0x28>
 80079a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079a8:	ee17 0a90 	vmov	r0, s15
 80079ac:	bd08      	pop	{r3, pc}
 80079ae:	bf00      	nop
 80079b0:	3dcccccd 	.word	0x3dcccccd

080079b4 <JSB_AR1010_get_RSSI>:

uint8_t JSB_AR1010_get_RSSI()
{
 80079b4:	b508      	push	{r3, lr}
  return ((reg_read(0x12) & 0xFE00) >> 9);
 80079b6:	2012      	movs	r0, #18
 80079b8:	f7ff feaa 	bl	8007710 <reg_read>
}
 80079bc:	f3c0 2046 	ubfx	r0, r0, #9, #7
 80079c0:	bd08      	pop	{r3, pc}

080079c2 <JSB_AR1010_is_stereo>:

uint8_t JSB_AR1010_is_stereo()
{
 80079c2:	b508      	push	{r3, lr}
  return (reg_read(0x13) & 0x0008) != 0;
 80079c4:	2013      	movs	r0, #19
 80079c6:	f7ff fea3 	bl	8007710 <reg_read>
}
 80079ca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80079ce:	bd08      	pop	{r3, pc}

080079d0 <SwapBytes>:
///////////////////////////////////////////////////////////////////////////////
// Uncategorized:

uint16_t SwapBytes(uint16_t Value)
{
  return (Value >> 8) | ((Value & 0xFF) << 8);
 80079d0:	0203      	lsls	r3, r0, #8
 80079d2:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
}
 80079d6:	b280      	uxth	r0, r0
 80079d8:	4770      	bx	lr

080079da <IfNotNullFreeAndNull>:

///////////////////////////////////////////////////////////////////////////////
// Memory allocation:

void IfNotNullFreeAndNull(void **ppMemory)
{
 80079da:	b510      	push	{r4, lr}
 80079dc:	4604      	mov	r4, r0
  if (*ppMemory)
 80079de:	6800      	ldr	r0, [r0, #0]
 80079e0:	b118      	cbz	r0, 80079ea <IfNotNullFreeAndNull+0x10>
  {
    free(*ppMemory);
 80079e2:	f007 faed 	bl	800efc0 <free>
    *ppMemory = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	6023      	str	r3, [r4, #0]
  }
}
 80079ea:	bd10      	pop	{r4, pc}

080079ec <Min_int32>:
}

int32_t Min_int32(int32_t A, int32_t B)
{
    return A < B ? A : B;
}
 80079ec:	4288      	cmp	r0, r1
 80079ee:	bfa8      	it	ge
 80079f0:	4608      	movge	r0, r1
 80079f2:	4770      	bx	lr

080079f4 <Clamp_uint16>:

///////////////////////////////////////////////////////////////////////////////
// Clamp:

uint16_t Clamp_uint16(uint16_t Value, uint16_t MinValue , uint16_t MaxValue)
{
 80079f4:	4603      	mov	r3, r0
 80079f6:	4610      	mov	r0, r2
  if (Value < MinValue)
 80079f8:	428b      	cmp	r3, r1
 80079fa:	d300      	bcc.n	80079fe <Clamp_uint16+0xa>
 80079fc:	4619      	mov	r1, r3
    Value = MinValue;
  if (Value > MaxValue)
 80079fe:	4281      	cmp	r1, r0
 8007a00:	d800      	bhi.n	8007a04 <Clamp_uint16+0x10>
 8007a02:	4608      	mov	r0, r1
    Value = MaxValue;
  return Value;
}
 8007a04:	4770      	bx	lr

08007a06 <Clamp_float>:

  return Value;
}

float Clamp_float(float Value, float MinValue, float MaxValue)
{
 8007a06:	ee07 0a10 	vmov	s14, r0
 8007a0a:	ee07 1a90 	vmov	s15, r1
 8007a0e:	ee06 2a90 	vmov	s13, r2
  if (Value < MinValue)
 8007a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1a:	d406      	bmi.n	8007a2a <Clamp_float+0x24>
    Value = MinValue;
  else if (Value > MaxValue)
 8007a1c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a24:	dc04      	bgt.n	8007a30 <Clamp_float+0x2a>
 8007a26:	eef0 7a47 	vmov.f32	s15, s14
    Value = MaxValue;

  return Value;
}
 8007a2a:	ee17 0a90 	vmov	r0, s15
 8007a2e:	4770      	bx	lr
    Value = MaxValue;
 8007a30:	eef0 7a66 	vmov.f32	s15, s13
 8007a34:	e7f9      	b.n	8007a2a <Clamp_float+0x24>

08007a36 <Wrap_int>:
///////////////////////////////////////////////////////////////////////////////
// Wrap:

int Wrap_int(int Value, int Size)
{
  if (Value < 0)
 8007a36:	2800      	cmp	r0, #0
 8007a38:	db03      	blt.n	8007a42 <Wrap_int+0xc>
    Value += Size;
  else if (Value >= Size)
 8007a3a:	4288      	cmp	r0, r1
 8007a3c:	db00      	blt.n	8007a40 <Wrap_int+0xa>
    Value -= Size;
 8007a3e:	1a40      	subs	r0, r0, r1

  return Value;
}
 8007a40:	4770      	bx	lr
    Value += Size;
 8007a42:	4408      	add	r0, r1
 8007a44:	4770      	bx	lr

08007a46 <Sqr>:

///////////////////////////////////////////////////////////////////////////////
// Maths:

double Sqr(double Value)
{
 8007a46:	ec41 0b17 	vmov	d7, r0, r1
  return Value * Value;
}
 8007a4a:	ee27 7b07 	vmul.f64	d7, d7, d7
 8007a4e:	ec51 0b17 	vmov	r0, r1, d7
 8007a52:	4770      	bx	lr

08007a54 <Cube>:

double Cube(double Value)
{
 8007a54:	ec41 0b17 	vmov	d7, r0, r1
  return Value * Value * Value;
 8007a58:	ee27 6b07 	vmul.f64	d6, d7, d7
}
 8007a5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007a60:	ec51 0b17 	vmov	r0, r1, d7
 8007a64:	4770      	bx	lr

08007a66 <CubicInterpolate>:
{
  return (1.0 - InterpolationParameter) * Value0 + InterpolationParameter * Value1;
}

double CubicInterpolate(double Value0, double Value1, double Value2, double Value3, double InterpolationParameter)
{
 8007a66:	b508      	push	{r3, lr}
 8007a68:	ed2d 8b0a 	vpush	{d8-d12}
 8007a6c:	ec41 0b1a 	vmov	d10, r0, r1
 8007a70:	ec43 2b17 	vmov	d7, r2, r3
  double C0, C1, C2, C3;
  double InterpolationCoefficient;

  C3 = (((Value3 - Value0) - 3.0 * (Value1 - Value0)) - 3.0 * ((Value2 - Value0) - 2.0 * (Value1-Value0))) / 6.0;
 8007a74:	ed9d 6b0e 	vldr	d6, [sp, #56]	@ 0x38
 8007a78:	ee36 6b4a 	vsub.f64	d6, d6, d10
 8007a7c:	ee37 7b4a 	vsub.f64	d7, d7, d10
 8007a80:	eeb0 5b08 	vmov.f64	d5, #8	@ 0x40400000  3.0
 8007a84:	ee07 6b45 	vmls.f64	d6, d7, d5
 8007a88:	ed9d 8b0c 	vldr	d8, [sp, #48]	@ 0x30
 8007a8c:	ee38 8b4a 	vsub.f64	d8, d8, d10
 8007a90:	ee37 4b07 	vadd.f64	d4, d7, d7
 8007a94:	ee38 8b44 	vsub.f64	d8, d8, d4
 8007a98:	ee08 6b45 	vmls.f64	d6, d8, d5
 8007a9c:	eeb1 5b08 	vmov.f64	d5, #24	@ 0x40c00000  6.0
 8007aa0:	ee86 bb05 	vdiv.f64	d11, d6, d5
  C2 = ((Value2 - Value0) - 2.0 * (Value1 - Value0) - 6.0 * C3) / 2.0;
 8007aa4:	ee0b 8b45 	vmls.f64	d8, d11, d5
 8007aa8:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8007aac:	ee28 8b06 	vmul.f64	d8, d8, d6
  C1 = Value1 - Value0 - C3 - C2;
 8007ab0:	ee37 7b4b 	vsub.f64	d7, d7, d11
 8007ab4:	ee37 9b48 	vsub.f64	d9, d7, d8
  C0 = Value0;

  InterpolationCoefficient = 1 + InterpolationParameter; // Interpolate the second of the three segments.
 8007ab8:	ed9d cb10 	vldr	d12, [sp, #64]	@ 0x40
 8007abc:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8007ac0:	ee3c cb07 	vadd.f64	d12, d12, d7

  return C3 * Cube(InterpolationCoefficient) + C2 * Sqr(InterpolationCoefficient) + C1 * InterpolationCoefficient + C0;
 8007ac4:	ec51 0b1c 	vmov	r0, r1, d12
 8007ac8:	f7ff ffc4 	bl	8007a54 <Cube>
 8007acc:	ec41 0b17 	vmov	d7, r0, r1
 8007ad0:	ee27 bb0b 	vmul.f64	d11, d7, d11
 8007ad4:	ec51 0b1c 	vmov	r0, r1, d12
 8007ad8:	f7ff ffb5 	bl	8007a46 <Sqr>
 8007adc:	ec41 0b17 	vmov	d7, r0, r1
 8007ae0:	ee07 bb08 	vmla.f64	d11, d7, d8
 8007ae4:	ee09 bb0c 	vmla.f64	d11, d9, d12
}
 8007ae8:	ee3b 7b0a 	vadd.f64	d7, d11, d10
 8007aec:	ec51 0b17 	vmov	r0, r1, d7
 8007af0:	ecbd 8b0a 	vpop	{d8-d12}
 8007af4:	bd08      	pop	{r3, pc}
	...

08007af8 <BooleanToOffOn>:
static const char *String_No = "No";
static const char *String_Yes = "Yes";

const char *BooleanToOffOn(uint8_t Value)
{
  return Value ? String_On : String_Off;
 8007af8:	b108      	cbz	r0, 8007afe <BooleanToOffOn+0x6>
 8007afa:	4802      	ldr	r0, [pc, #8]	@ (8007b04 <BooleanToOffOn+0xc>)
 8007afc:	4770      	bx	lr
 8007afe:	4802      	ldr	r0, [pc, #8]	@ (8007b08 <BooleanToOffOn+0x10>)
}
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	08012794 	.word	0x08012794
 8007b08:	0801279c 	.word	0x0801279c

08007b0c <BooleanToNoYes>:

const char *BooleanToNoYes(uint8_t Value)
{
  return Value ? String_Yes : String_No;
 8007b0c:	b108      	cbz	r0, 8007b12 <BooleanToNoYes+0x6>
 8007b0e:	4802      	ldr	r0, [pc, #8]	@ (8007b18 <BooleanToNoYes+0xc>)
 8007b10:	4770      	bx	lr
 8007b12:	4802      	ldr	r0, [pc, #8]	@ (8007b1c <BooleanToNoYes+0x10>)
}
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	080127a0 	.word	0x080127a0
 8007b1c:	080127a4 	.word	0x080127a4

08007b20 <StringToGUID>:

///////////////////////////////////////////////////////////////////////////////
// GUIDs:

uint8_t StringToGUID(char *Value, GUID_t *o_pGUID)
{
 8007b20:	b510      	push	{r4, lr}
 8007b22:	b09a      	sub	sp, #104	@ 0x68
 8007b24:	460c      	mov	r4, r1
  GUID_t Result;
  unsigned int X[11];
  int NumFields, NumChars;

  // STM32 sscanf bug (20181012): %08X (rather than %08x) assumes result is signed. Hence 0x9000000 => 0x7FFFFFF!!!
  NumFields = sscanf(Value, "{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}%n",
 8007b26:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b2a:	ab15      	add	r3, sp, #84	@ 0x54
 8007b2c:	9308      	str	r3, [sp, #32]
 8007b2e:	ab14      	add	r3, sp, #80	@ 0x50
 8007b30:	9307      	str	r3, [sp, #28]
 8007b32:	ab13      	add	r3, sp, #76	@ 0x4c
 8007b34:	9306      	str	r3, [sp, #24]
 8007b36:	ab12      	add	r3, sp, #72	@ 0x48
 8007b38:	9305      	str	r3, [sp, #20]
 8007b3a:	ab11      	add	r3, sp, #68	@ 0x44
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	ab10      	add	r3, sp, #64	@ 0x40
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	ab0f      	add	r3, sp, #60	@ 0x3c
 8007b44:	9302      	str	r3, [sp, #8]
 8007b46:	ab0e      	add	r3, sp, #56	@ 0x38
 8007b48:	9301      	str	r3, [sp, #4]
 8007b4a:	ab0d      	add	r3, sp, #52	@ 0x34
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007b50:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007b52:	491a      	ldr	r1, [pc, #104]	@ (8007bbc <StringToGUID+0x9c>)
 8007b54:	f008 f874 	bl	800fc40 <siscanf>
      &X[0], &X[1], &X[2], &X[3], &X[4], &X[5], &X[6], &X[7], &X[8], &X[9], &X[10], &NumChars);

  if ((NumFields != 11) || (NumChars != 38))
 8007b58:	280b      	cmp	r0, #11
 8007b5a:	d129      	bne.n	8007bb0 <StringToGUID+0x90>
 8007b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b5e:	2b26      	cmp	r3, #38	@ 0x26
 8007b60:	d129      	bne.n	8007bb6 <StringToGUID+0x96>
    return 0;

  Result.Field0 = X[0];
 8007b62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b64:	9316      	str	r3, [sp, #88]	@ 0x58
  Result.Field1 = X[1];
 8007b66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b68:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
  Result.Field2 = X[2];
 8007b6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b6e:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
  Result.Field3[0] = X[3];
 8007b72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b74:	f88d 3060 	strb.w	r3, [sp, #96]	@ 0x60
  Result.Field3[1] = X[4];
 8007b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b7a:	f88d 3061 	strb.w	r3, [sp, #97]	@ 0x61
  Result.Field3[2] = X[5];
 8007b7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b80:	f88d 3062 	strb.w	r3, [sp, #98]	@ 0x62
  Result.Field3[3] = X[6];
 8007b84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b86:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
  Result.Field3[4] = X[7];
 8007b8a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b8c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
  Result.Field3[5] = X[8];
 8007b90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b92:	f88d 3065 	strb.w	r3, [sp, #101]	@ 0x65
  Result.Field3[6] = X[9];
 8007b96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b98:	f88d 3066 	strb.w	r3, [sp, #102]	@ 0x66
  Result.Field3[7] = X[10];
 8007b9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b9e:	f88d 3067 	strb.w	r3, [sp, #103]	@ 0x67

  *o_pGUID = Result;
 8007ba2:	ab1a      	add	r3, sp, #104	@ 0x68
 8007ba4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8007ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return 1;
 8007bac:	2001      	movs	r0, #1
 8007bae:	e000      	b.n	8007bb2 <StringToGUID+0x92>
    return 0;
 8007bb0:	2000      	movs	r0, #0
}
 8007bb2:	b01a      	add	sp, #104	@ 0x68
 8007bb4:	bd10      	pop	{r4, pc}
    return 0;
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	e7fb      	b.n	8007bb2 <StringToGUID+0x92>
 8007bba:	bf00      	nop
 8007bbc:	080127a8 	.word	0x080127a8

08007bc0 <GUID_IsEqual>:
    i_Value->Field2,
    i_Value->Field3[0], i_Value->Field3[1], i_Value->Field3[2], i_Value->Field3[3], i_Value->Field3[4], i_Value->Field3[5], i_Value->Field3[6], i_Value->Field3[7]);
}

uint8_t GUID_IsEqual(GUID_t *pA, GUID_t *pB)
{
 8007bc0:	b508      	push	{r3, lr}
  return memcmp(pA, pB, sizeof(GUID_t)) == 0 ? 1 : 0;
 8007bc2:	2210      	movs	r2, #16
 8007bc4:	f008 f8ad 	bl	800fd22 <memcmp>
}
 8007bc8:	fab0 f080 	clz	r0, r0
 8007bcc:	0940      	lsrs	r0, r0, #5
 8007bce:	bd08      	pop	{r3, pc}

08007bd0 <ILI9341_DrawPixel_ToBackBuffer>:
    ILI9341_CSX_Low();
}

static void ILI9341_DrawPixel_ToBackBuffer(int16_t X, int16_t Y, uint16_t Color)
{
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8007bd0:	fa1f fc80 	uxth.w	ip, r0
 8007bd4:	0fcb      	lsrs	r3, r1, #31
 8007bd6:	f1bc 0fef 	cmp.w	ip, #239	@ 0xef
 8007bda:	bf88      	it	hi
 8007bdc:	f043 0301 	orrhi.w	r3, r3, #1
 8007be0:	b953      	cbnz	r3, 8007bf8 <ILI9341_DrawPixel_ToBackBuffer+0x28>
 8007be2:	f5b1 7fa0 	cmp.w	r1, #320	@ 0x140
 8007be6:	da07      	bge.n	8007bf8 <ILI9341_DrawPixel_ToBackBuffer+0x28>
    return;

  pBackBuffer[X + Y * ILI9341_Width] = Color;
 8007be8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007bec:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8007bf0:	4b02      	ldr	r3, [pc, #8]	@ (8007bfc <ILI9341_DrawPixel_ToBackBuffer+0x2c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	200109cc 	.word	0x200109cc

08007c00 <IsNonPrintingChar>:
  return pFont->yAdvance;
}

static uint8_t IsNonPrintingChar(uint8_t Ch)
{
  return ((Ch < pFont->first) || (Ch > pFont->last));
 8007c00:	4b06      	ldr	r3, [pc, #24]	@ (8007c1c <IsNonPrintingChar+0x1c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	7a1a      	ldrb	r2, [r3, #8]
 8007c06:	4282      	cmp	r2, r0
 8007c08:	d804      	bhi.n	8007c14 <IsNonPrintingChar+0x14>
 8007c0a:	7a5b      	ldrb	r3, [r3, #9]
 8007c0c:	4283      	cmp	r3, r0
 8007c0e:	d203      	bcs.n	8007c18 <IsNonPrintingChar+0x18>
 8007c10:	2001      	movs	r0, #1
 8007c12:	4770      	bx	lr
 8007c14:	2001      	movs	r0, #1
 8007c16:	4770      	bx	lr
 8007c18:	2000      	movs	r0, #0
}
 8007c1a:	4770      	bx	lr
 8007c1c:	200109d4 	.word	0x200109d4

08007c20 <ILI9341_Write8>:
{
 8007c20:	b500      	push	{lr}
 8007c22:	b087      	sub	sp, #28
 8007c24:	f88d 000f 	strb.w	r0, [sp, #15]
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8007c28:	2364      	movs	r3, #100	@ 0x64
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f10d 0217 	add.w	r2, sp, #23
 8007c32:	f10d 010f 	add.w	r1, sp, #15
 8007c36:	4805      	ldr	r0, [pc, #20]	@ (8007c4c <ILI9341_Write8+0x2c>)
 8007c38:	6800      	ldr	r0, [r0, #0]
 8007c3a:	f7fc f998 	bl	8003f6e <HAL_SPI_TransmitReceive>
 8007c3e:	b910      	cbnz	r0, 8007c46 <ILI9341_Write8+0x26>
}
 8007c40:	b007      	add	sp, #28
 8007c42:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007c46:	f006 fa25 	bl	800e094 <Error_Handler>
}
 8007c4a:	e7f9      	b.n	8007c40 <ILI9341_Write8+0x20>
 8007c4c:	200109dc 	.word	0x200109dc

08007c50 <ILI9341_Write16>:
{
 8007c50:	b510      	push	{r4, lr}
 8007c52:	4604      	mov	r4, r0
  ILI9341_Write8(Value >> 8);
 8007c54:	0a00      	lsrs	r0, r0, #8
 8007c56:	f7ff ffe3 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(Value);
 8007c5a:	b2e0      	uxtb	r0, r4
 8007c5c:	f7ff ffe0 	bl	8007c20 <ILI9341_Write8>
}
 8007c60:	bd10      	pop	{r4, pc}

08007c62 <ILI9341_Write32>:
{
 8007c62:	b510      	push	{r4, lr}
 8007c64:	4604      	mov	r4, r0
  ILI9341_Write16(Value >> 16);
 8007c66:	0c00      	lsrs	r0, r0, #16
 8007c68:	f7ff fff2 	bl	8007c50 <ILI9341_Write16>
  ILI9341_Write16(Value);
 8007c6c:	b2a0      	uxth	r0, r4
 8007c6e:	f7ff ffef 	bl	8007c50 <ILI9341_Write16>
}
 8007c72:	bd10      	pop	{r4, pc}

08007c74 <ILI9341_WriteCommand>:
{
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4604      	mov	r4, r0
  ILI9341_DC_Low();
 8007c78:	4d07      	ldr	r5, [pc, #28]	@ (8007c98 <ILI9341_WriteCommand+0x24>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2104      	movs	r1, #4
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f7f9 f8d1 	bl	8000e26 <HAL_GPIO_WritePin>
  ILI9341_Write8(Value);
 8007c84:	b2e0      	uxtb	r0, r4
 8007c86:	f7ff ffcb 	bl	8007c20 <ILI9341_Write8>
  ILI9341_DC_High();
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	2104      	movs	r1, #4
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f7f9 f8c9 	bl	8000e26 <HAL_GPIO_WritePin>
}
 8007c94:	bd38      	pop	{r3, r4, r5, pc}
 8007c96:	bf00      	nop
 8007c98:	40020800 	.word	0x40020800

08007c9c <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>:
{
 8007c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  if ((i_Width == 0) || (i_Height == 0))
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bf18      	it	ne
 8007caa:	2a00      	cmpne	r2, #0
 8007cac:	d102      	bne.n	8007cb4 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x18>
}
 8007cae:	b003      	add	sp, #12
 8007cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	468b      	mov	fp, r1
 8007cb8:	4690      	mov	r8, r2
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8007cba:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4658      	mov	r0, fp
 8007cc2:	f7ff fe97 	bl	80079f4 <Clamp_uint16>
 8007cc6:	4682      	mov	sl, r0
 8007cc8:	e011      	b.n	8007cee <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x52>
      pLine[X] = *pPixel++;
 8007cca:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 8007cce:	f834 2b02 	ldrh.w	r2, [r4], #2
 8007cd2:	f829 2003 	strh.w	r2, [r9, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8007cd6:	3501      	adds	r5, #1
 8007cd8:	eb08 0007 	add.w	r0, r8, r7
 8007cdc:	22f0      	movs	r2, #240	@ 0xf0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	b280      	uxth	r0, r0
 8007ce2:	f7ff fe87 	bl	80079f4 <Clamp_uint16>
 8007ce6:	42a8      	cmp	r0, r5
 8007ce8:	d8ef      	bhi.n	8007cca <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x2e>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8007cea:	f10a 0a01 	add.w	sl, sl, #1
 8007cee:	9b01      	ldr	r3, [sp, #4]
 8007cf0:	eb03 000b 	add.w	r0, r3, fp
 8007cf4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	b280      	uxth	r0, r0
 8007cfc:	f7ff fe7a 	bl	80079f4 <Clamp_uint16>
 8007d00:	4550      	cmp	r0, sl
 8007d02:	d9d4      	bls.n	8007cae <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x12>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8007d04:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x84>)
 8007d06:	f8d3 9000 	ldr.w	r9, [r3]
 8007d0a:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8007d0e:	0176      	lsls	r6, r6, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8007d10:	22f0      	movs	r2, #240	@ 0xf0
 8007d12:	2100      	movs	r1, #0
 8007d14:	4638      	mov	r0, r7
 8007d16:	f7ff fe6d 	bl	80079f4 <Clamp_uint16>
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	e7dc      	b.n	8007cd8 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x3c>
 8007d1e:	bf00      	nop
 8007d20:	200109cc 	.word	0x200109cc

08007d24 <ILI9341_DrawPixels_MSBFirst_ToDisplay>:
{
 8007d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	9d06      	ldr	r5, [sp, #24]
  if ((Width == 0) || (Height == 0))
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bf18      	it	ne
 8007d2e:	2a00      	cmpne	r2, #0
 8007d30:	d101      	bne.n	8007d36 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x12>
}
 8007d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d36:	4680      	mov	r8, r0
 8007d38:	460c      	mov	r4, r1
 8007d3a:	4616      	mov	r6, r2
 8007d3c:	461f      	mov	r7, r3
  ILI9341_CSX_Low();
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2102      	movs	r1, #2
 8007d42:	4829      	ldr	r0, [pc, #164]	@ (8007de8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8007d44:	f7f9 f86f 	bl	8000e26 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8007d48:	202a      	movs	r0, #42	@ 0x2a
 8007d4a:	f7ff ff93 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8007d4e:	4640      	mov	r0, r8
 8007d50:	f7ff ff7e 	bl	8007c50 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8007d54:	eb06 0008 	add.w	r0, r6, r8
 8007d58:	b280      	uxth	r0, r0
 8007d5a:	3801      	subs	r0, #1
 8007d5c:	b280      	uxth	r0, r0
 8007d5e:	f7ff ff77 	bl	8007c50 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8007d62:	202b      	movs	r0, #43	@ 0x2b
 8007d64:	f7ff ff86 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f7ff ff71 	bl	8007c50 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8007d6e:	1938      	adds	r0, r7, r4
 8007d70:	b280      	uxth	r0, r0
 8007d72:	3801      	subs	r0, #1
 8007d74:	b280      	uxth	r0, r0
 8007d76:	f7ff ff6b 	bl	8007c50 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2C); // Memory write.
 8007d7a:	202c      	movs	r0, #44	@ 0x2c
 8007d7c:	f7ff ff7a 	bl	8007c74 <ILI9341_WriteCommand>
  uint32_t NumBytes = Width * Height * sizeof(uint16_t);
 8007d80:	fb07 f306 	mul.w	r3, r7, r6
 8007d84:	005b      	lsls	r3, r3, #1
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
 8007d86:	462a      	mov	r2, r5
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007d88:	f3bf 8f4f 	dsb	sy
}
 8007d8c:	e004      	b.n	8007d98 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x74>
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCMVAC = op_addr;
 8007d8e:	4917      	ldr	r1, [pc, #92]	@ (8007dec <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc8>)
 8007d90:	f8c1 2268 	str.w	r2, [r1, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8007d94:	3220      	adds	r2, #32
      op_size -=           linesize;
 8007d96:	3b20      	subs	r3, #32
    while (op_size > 0) {
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dcf8      	bgt.n	8007d8e <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x6a>
  __ASM volatile ("dsb 0xF":::"memory");
 8007d9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007da0:	f3bf 8f6f 	isb	sy
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8007da4:	2400      	movs	r4, #0
 8007da6:	e00b      	b.n	8007dc0 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x9c>
    pPixels += Width;
 8007da8:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8007dac:	4b10      	ldr	r3, [pc, #64]	@ (8007df0 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d0f7      	beq.n	8007dac <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x88>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8007dbc:	3401      	adds	r4, #1
 8007dbe:	b224      	sxth	r4, r4
 8007dc0:	42a7      	cmp	r7, r4
 8007dc2:	dd0b      	ble.n	8007ddc <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xb8>
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8007dc4:	0072      	lsls	r2, r6, #1
 8007dc6:	b292      	uxth	r2, r2
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4b09      	ldr	r3, [pc, #36]	@ (8007df0 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	f7fc fb09 	bl	80043e4 <HAL_SPI_Transmit_DMA>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d0e8      	beq.n	8007da8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
      Error_Handler();
 8007dd6:	f006 f95d 	bl	800e094 <Error_Handler>
 8007dda:	e7e5      	b.n	8007da8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
  ILI9341_CSX_High();
 8007ddc:	2201      	movs	r2, #1
 8007dde:	2102      	movs	r1, #2
 8007de0:	4801      	ldr	r0, [pc, #4]	@ (8007de8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8007de2:	f7f9 f820 	bl	8000e26 <HAL_GPIO_WritePin>
 8007de6:	e7a4      	b.n	8007d32 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xe>
 8007de8:	40020800 	.word	0x40020800
 8007dec:	e000ed00 	.word	0xe000ed00
 8007df0:	200109dc 	.word	0x200109dc

08007df4 <ILI9341_DrawBar_ToDisplay>:
  if ((Width == 0) || (Height == 0))
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf18      	it	ne
 8007df8:	2a00      	cmpne	r2, #0
 8007dfa:	d100      	bne.n	8007dfe <ILI9341_DrawBar_ToDisplay+0xa>
 8007dfc:	4770      	bx	lr
{
 8007dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e00:	4607      	mov	r7, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	4615      	mov	r5, r2
 8007e06:	461e      	mov	r6, r3
  ILI9341_CSX_Low();
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2102      	movs	r1, #2
 8007e0c:	482c      	ldr	r0, [pc, #176]	@ (8007ec0 <ILI9341_DrawBar_ToDisplay+0xcc>)
 8007e0e:	f7f9 f80a 	bl	8000e26 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8007e12:	202a      	movs	r0, #42	@ 0x2a
 8007e14:	f7ff ff2e 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f7ff ff19 	bl	8007c50 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8007e1e:	19e8      	adds	r0, r5, r7
 8007e20:	b280      	uxth	r0, r0
 8007e22:	3801      	subs	r0, #1
 8007e24:	b280      	uxth	r0, r0
 8007e26:	f7ff ff13 	bl	8007c50 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8007e2a:	202b      	movs	r0, #43	@ 0x2b
 8007e2c:	f7ff ff22 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8007e30:	4620      	mov	r0, r4
 8007e32:	f7ff ff0d 	bl	8007c50 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8007e36:	1930      	adds	r0, r6, r4
 8007e38:	b280      	uxth	r0, r0
 8007e3a:	3801      	subs	r0, #1
 8007e3c:	b280      	uxth	r0, r0
 8007e3e:	f7ff ff07 	bl	8007c50 <ILI9341_Write16>
  uint16_t Color_MSBFirst = SwapBytes(Color);
 8007e42:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8007e46:	f7ff fdc3 	bl	80079d0 <SwapBytes>
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e004      	b.n	8007e58 <ILI9341_DrawBar_ToDisplay+0x64>
    ColumnColors[ColumnIndex] = Color_MSBFirst;
 8007e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ec4 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8007e50:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8007e54:	3301      	adds	r3, #1
 8007e56:	b21b      	sxth	r3, r3
 8007e58:	42ab      	cmp	r3, r5
 8007e5a:	dbf8      	blt.n	8007e4e <ILI9341_DrawBar_ToDisplay+0x5a>
  ILI9341_WriteCommand(0x2C); // Memory write.
 8007e5c:	202c      	movs	r0, #44	@ 0x2c
 8007e5e:	f7ff ff09 	bl	8007c74 <ILI9341_WriteCommand>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8007e62:	2400      	movs	r4, #0
 8007e64:	e01b      	b.n	8007e9e <ILI9341_DrawBar_ToDisplay+0xaa>
      SCB->DCCMVAC = op_addr;
 8007e66:	4818      	ldr	r0, [pc, #96]	@ (8007ec8 <ILI9341_DrawBar_ToDisplay+0xd4>)
 8007e68:	f8c0 1268 	str.w	r1, [r0, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8007e6c:	3120      	adds	r1, #32
      op_size -=           linesize;
 8007e6e:	3b20      	subs	r3, #32
    while (op_size > 0) {
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	dcf8      	bgt.n	8007e66 <ILI9341_DrawBar_ToDisplay+0x72>
  __ASM volatile ("dsb 0xF":::"memory");
 8007e74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007e78:	f3bf 8f6f 	isb	sy
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 8007e7c:	b292      	uxth	r2, r2
 8007e7e:	4911      	ldr	r1, [pc, #68]	@ (8007ec4 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8007e80:	4b12      	ldr	r3, [pc, #72]	@ (8007ecc <ILI9341_DrawBar_ToDisplay+0xd8>)
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	f7fc faae 	bl	80043e4 <HAL_SPI_Transmit_DMA>
 8007e88:	b988      	cbnz	r0, 8007eae <ILI9341_DrawBar_ToDisplay+0xba>
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8007e8a:	4b10      	ldr	r3, [pc, #64]	@ (8007ecc <ILI9341_DrawBar_ToDisplay+0xd8>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d0f7      	beq.n	8007e8a <ILI9341_DrawBar_ToDisplay+0x96>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8007e9a:	3401      	adds	r4, #1
 8007e9c:	b224      	sxth	r4, r4
 8007e9e:	42b4      	cmp	r4, r6
 8007ea0:	da08      	bge.n	8007eb4 <ILI9341_DrawBar_ToDisplay+0xc0>
    uint32_t NumBytes = Width * 2;
 8007ea2:	006a      	lsls	r2, r5, #1
    uint32_t op_addr = (uint32_t) addr;
 8007ea4:	4907      	ldr	r1, [pc, #28]	@ (8007ec4 <ILI9341_DrawBar_ToDisplay+0xd0>)
  __ASM volatile ("dsb 0xF":::"memory");
 8007ea6:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 8007eaa:	4613      	mov	r3, r2
}
 8007eac:	e7e0      	b.n	8007e70 <ILI9341_DrawBar_ToDisplay+0x7c>
      Error_Handler();
 8007eae:	f006 f8f1 	bl	800e094 <Error_Handler>
 8007eb2:	e7ea      	b.n	8007e8a <ILI9341_DrawBar_ToDisplay+0x96>
  ILI9341_CSX_High();
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	4801      	ldr	r0, [pc, #4]	@ (8007ec0 <ILI9341_DrawBar_ToDisplay+0xcc>)
 8007eba:	f7f8 ffb4 	bl	8000e26 <HAL_GPIO_WritePin>
}
 8007ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec0:	40020800 	.word	0x40020800
 8007ec4:	2001074c 	.word	0x2001074c
 8007ec8:	e000ed00 	.word	0xe000ed00
 8007ecc:	200109dc 	.word	0x200109dc

08007ed0 <ILI9341_SetDefaultState>:
  TextColor = TextColor_Default;
 8007ed0:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <ILI9341_SetDefaultState+0x18>)
 8007ed2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ed6:	801a      	strh	r2, [r3, #0]
  TextBackgroundColor = TextBackgroundColor_Default;
 8007ed8:	4b04      	ldr	r3, [pc, #16]	@ (8007eec <ILI9341_SetDefaultState+0x1c>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	801a      	strh	r2, [r3, #0]
  TextDrawMode = TextDrawMode_Default;
 8007ede:	4b04      	ldr	r3, [pc, #16]	@ (8007ef0 <ILI9341_SetDefaultState+0x20>)
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	701a      	strb	r2, [r3, #0]
}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000032 	.word	0x20000032
 8007eec:	200109d8 	.word	0x200109d8
 8007ef0:	20000031 	.word	0x20000031

08007ef4 <ILI9341_Initialize>:
{
 8007ef4:	b510      	push	{r4, lr}
  phspi = i_phspi;
 8007ef6:	4ba7      	ldr	r3, [pc, #668]	@ (8008194 <ILI9341_Initialize+0x2a0>)
 8007ef8:	6018      	str	r0, [r3, #0]
  UseBackBuffer = i_UseBackBuffer;
 8007efa:	b2c9      	uxtb	r1, r1
 8007efc:	4ba6      	ldr	r3, [pc, #664]	@ (8008198 <ILI9341_Initialize+0x2a4>)
 8007efe:	7019      	strb	r1, [r3, #0]
  if (UseBackBuffer)
 8007f00:	2900      	cmp	r1, #0
 8007f02:	f040 8139 	bne.w	8008178 <ILI9341_Initialize+0x284>
  ILI9341_SetDefaultState();
 8007f06:	f7ff ffe3 	bl	8007ed0 <ILI9341_SetDefaultState>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_RESET);
 8007f0a:	4ca4      	ldr	r4, [pc, #656]	@ (800819c <ILI9341_Initialize+0x2a8>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2101      	movs	r1, #1
 8007f10:	4620      	mov	r0, r4
 8007f12:	f7f8 ff88 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8007f16:	2001      	movs	r0, #1
 8007f18:	f7f8 fbae 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_SET);
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	4620      	mov	r0, r4
 8007f22:	f7f8 ff80 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8007f26:	2005      	movs	r0, #5
 8007f28:	f7f8 fba6 	bl	8000678 <HAL_Delay>
  ILI9341_CSX_Low();
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2102      	movs	r1, #2
 8007f30:	4620      	mov	r0, r4
 8007f32:	f7f8 ff78 	bl	8000e26 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0xEF);
 8007f36:	f06f 0010 	mvn.w	r0, #16
 8007f3a:	f7ff fe9b 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x03);
 8007f3e:	2003      	movs	r0, #3
 8007f40:	f7ff fe6e 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x80);
 8007f44:	2080      	movs	r0, #128	@ 0x80
 8007f46:	f7ff fe6b 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8007f4a:	2002      	movs	r0, #2
 8007f4c:	f7ff fe68 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERB);
 8007f50:	f06f 0030 	mvn.w	r0, #48	@ 0x30
 8007f54:	f7ff fe8e 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8007f58:	2000      	movs	r0, #0
 8007f5a:	f7ff fe61 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0XC1);
 8007f5e:	20c1      	movs	r0, #193	@ 0xc1
 8007f60:	f7ff fe5e 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0X30);
 8007f64:	2030      	movs	r0, #48	@ 0x30
 8007f66:	f7ff fe5b 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWER_SEQ);
 8007f6a:	f06f 0012 	mvn.w	r0, #18
 8007f6e:	f7ff fe81 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x64);
 8007f72:	2064      	movs	r0, #100	@ 0x64
 8007f74:	f7ff fe54 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8007f78:	2003      	movs	r0, #3
 8007f7a:	f7ff fe51 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0X12);
 8007f7e:	2012      	movs	r0, #18
 8007f80:	f7ff fe4e 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0X81);
 8007f84:	2081      	movs	r0, #129	@ 0x81
 8007f86:	f7ff fe4b 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCA);
 8007f8a:	f06f 0017 	mvn.w	r0, #23
 8007f8e:	f7ff fe71 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x85);
 8007f92:	2085      	movs	r0, #133	@ 0x85
 8007f94:	f7ff fe44 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8007f98:	2000      	movs	r0, #0
 8007f9a:	f7ff fe41 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x78);
 8007f9e:	2078      	movs	r0, #120	@ 0x78
 8007fa0:	f7ff fe3e 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERA);
 8007fa4:	f06f 0034 	mvn.w	r0, #52	@ 0x34
 8007fa8:	f7ff fe64 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x39);
 8007fac:	2039      	movs	r0, #57	@ 0x39
 8007fae:	f7ff fe37 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x2C);
 8007fb2:	202c      	movs	r0, #44	@ 0x2c
 8007fb4:	f7ff fe34 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f7ff fe31 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x34);
 8007fbe:	2034      	movs	r0, #52	@ 0x34
 8007fc0:	f7ff fe2e 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8007fc4:	2002      	movs	r0, #2
 8007fc6:	f7ff fe2b 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_PRC);
 8007fca:	f06f 0008 	mvn.w	r0, #8
 8007fce:	f7ff fe51 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x20);
 8007fd2:	2020      	movs	r0, #32
 8007fd4:	f7ff fe24 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCB);
 8007fd8:	f06f 0015 	mvn.w	r0, #21
 8007fdc:	f7ff fe4a 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	f7ff fe1d 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	f7ff fe1a 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR1); // Power control
 8007fec:	f06f 003f 	mvn.w	r0, #63	@ 0x3f
 8007ff0:	f7ff fe40 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x23); // VRH=[5:0]
 8007ff4:	2023      	movs	r0, #35	@ 0x23
 8007ff6:	f7ff fe13 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR2); // Power control
 8007ffa:	f06f 003e 	mvn.w	r0, #62	@ 0x3e
 8007ffe:	f7ff fe39 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x10); // BT=[3:0]
 8008002:	2010      	movs	r0, #16
 8008004:	f7ff fe0c 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR1); // VCOM control
 8008008:	f06f 003a 	mvn.w	r0, #58	@ 0x3a
 800800c:	f7ff fe32 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x3e); // VMH=[6:0]
 8008010:	203e      	movs	r0, #62	@ 0x3e
 8008012:	f7ff fe05 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x28); // VML=[6:0]
 8008016:	2028      	movs	r0, #40	@ 0x28
 8008018:	f7ff fe02 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR2); // VCOM control 2
 800801c:	f06f 0038 	mvn.w	r0, #56	@ 0x38
 8008020:	f7ff fe28 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x86); // VMF=[6:0]
 8008024:	2086      	movs	r0, #134	@ 0x86
 8008026:	f7ff fdfb 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_MADCTL); // Memory Access Control
 800802a:	2036      	movs	r0, #54	@ 0x36
 800802c:	f7ff fe22 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x48);
 8008030:	2048      	movs	r0, #72	@ 0x48
 8008032:	f7ff fdf5 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VSCRSADD); // Vertical scroll
 8008036:	2037      	movs	r0, #55	@ 0x37
 8008038:	f7ff fe1c 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write16(0); // Zero
 800803c:	2000      	movs	r0, #0
 800803e:	f7ff fe07 	bl	8007c50 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PIXFMT);
 8008042:	203a      	movs	r0, #58	@ 0x3a
 8008044:	f7ff fe16 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x55); // DPI=[6:4] DBI=[2:0]
 8008048:	2055      	movs	r0, #85	@ 0x55
 800804a:	f7ff fde9 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_FRMCTR1);
 800804e:	f06f 004e 	mvn.w	r0, #78	@ 0x4e
 8008052:	f7ff fe0f 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8008056:	2000      	movs	r0, #0
 8008058:	f7ff fde2 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x18);
 800805c:	2018      	movs	r0, #24
 800805e:	f7ff fddf 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_DFUNCTR); // Display Function Control
 8008062:	f06f 0049 	mvn.w	r0, #73	@ 0x49
 8008066:	f7ff fe05 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x08);
 800806a:	2008      	movs	r0, #8
 800806c:	f7ff fdd8 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x82);
 8008070:	2082      	movs	r0, #130	@ 0x82
 8008072:	f7ff fdd5 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x27);
 8008076:	2027      	movs	r0, #39	@ 0x27
 8008078:	f7ff fdd2 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(0xF2); // 3Gamma
 800807c:	f06f 000d 	mvn.w	r0, #13
 8008080:	f7ff fdf8 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00); // Disable
 8008084:	2000      	movs	r0, #0
 8008086:	f7ff fdcb 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GAMMASET); // Gamma curve selected
 800808a:	2026      	movs	r0, #38	@ 0x26
 800808c:	f7ff fdf2 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x01);
 8008090:	2001      	movs	r0, #1
 8008092:	f7ff fdc5 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRP1); // Set Gamma
 8008096:	f06f 001f 	mvn.w	r0, #31
 800809a:	f7ff fdeb 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x0F);
 800809e:	200f      	movs	r0, #15
 80080a0:	f7ff fdbe 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 80080a4:	2031      	movs	r0, #49	@ 0x31
 80080a6:	f7ff fdbb 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x2B);
 80080aa:	202b      	movs	r0, #43	@ 0x2b
 80080ac:	f7ff fdb8 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 80080b0:	200c      	movs	r0, #12
 80080b2:	f7ff fdb5 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80080b6:	200e      	movs	r0, #14
 80080b8:	f7ff fdb2 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 80080bc:	2008      	movs	r0, #8
 80080be:	f7ff fdaf 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x4E);
 80080c2:	204e      	movs	r0, #78	@ 0x4e
 80080c4:	f7ff fdac 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0xF1);
 80080c8:	20f1      	movs	r0, #241	@ 0xf1
 80080ca:	f7ff fda9 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x37);
 80080ce:	2037      	movs	r0, #55	@ 0x37
 80080d0:	f7ff fda6 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 80080d4:	2007      	movs	r0, #7
 80080d6:	f7ff fda3 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x10);
 80080da:	2010      	movs	r0, #16
 80080dc:	f7ff fda0 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 80080e0:	2003      	movs	r0, #3
 80080e2:	f7ff fd9d 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80080e6:	200e      	movs	r0, #14
 80080e8:	f7ff fd9a 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x09);
 80080ec:	2009      	movs	r0, #9
 80080ee:	f7ff fd97 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80080f2:	2000      	movs	r0, #0
 80080f4:	f7ff fd94 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRN1); // Set Gamma
 80080f8:	f06f 001e 	mvn.w	r0, #30
 80080fc:	f7ff fdba 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8008100:	2000      	movs	r0, #0
 8008102:	f7ff fd8d 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8008106:	200e      	movs	r0, #14
 8008108:	f7ff fd8a 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x14);
 800810c:	2014      	movs	r0, #20
 800810e:	f7ff fd87 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8008112:	2003      	movs	r0, #3
 8008114:	f7ff fd84 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x11);
 8008118:	2011      	movs	r0, #17
 800811a:	f7ff fd81 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 800811e:	2007      	movs	r0, #7
 8008120:	f7ff fd7e 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8008124:	2031      	movs	r0, #49	@ 0x31
 8008126:	f7ff fd7b 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0xC1);
 800812a:	20c1      	movs	r0, #193	@ 0xc1
 800812c:	f7ff fd78 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x48);
 8008130:	2048      	movs	r0, #72	@ 0x48
 8008132:	f7ff fd75 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8008136:	2008      	movs	r0, #8
 8008138:	f7ff fd72 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 800813c:	200f      	movs	r0, #15
 800813e:	f7ff fd6f 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8008142:	200c      	movs	r0, #12
 8008144:	f7ff fd6c 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8008148:	2031      	movs	r0, #49	@ 0x31
 800814a:	f7ff fd69 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x36);
 800814e:	2036      	movs	r0, #54	@ 0x36
 8008150:	f7ff fd66 	bl	8007c20 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8008154:	200f      	movs	r0, #15
 8008156:	f7ff fd63 	bl	8007c20 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_SLPOUT); // Exit sleep
 800815a:	2011      	movs	r0, #17
 800815c:	f7ff fd8a 	bl	8007c74 <ILI9341_WriteCommand>
  HAL_Delay(120);
 8008160:	2078      	movs	r0, #120	@ 0x78
 8008162:	f7f8 fa89 	bl	8000678 <HAL_Delay>
  ILI9341_WriteCommand(ILI9341_DISPON); // Display on
 8008166:	2029      	movs	r0, #41	@ 0x29
 8008168:	f7ff fd84 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_CSX_High();
 800816c:	2201      	movs	r2, #1
 800816e:	2102      	movs	r1, #2
 8008170:	4620      	mov	r0, r4
 8008172:	f7f8 fe58 	bl	8000e26 <HAL_GPIO_WritePin>
}
 8008176:	bd10      	pop	{r4, pc}
    pBackBuffer = calloc(1, ILI9341_Width * ILI9341_Height * sizeof(uint16_t));
 8008178:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 800817c:	2001      	movs	r0, #1
 800817e:	f006 fefb 	bl	800ef78 <calloc>
 8008182:	4b07      	ldr	r3, [pc, #28]	@ (80081a0 <ILI9341_Initialize+0x2ac>)
 8008184:	6018      	str	r0, [r3, #0]
    if (!pBackBuffer)
 8008186:	2800      	cmp	r0, #0
 8008188:	f47f aebd 	bne.w	8007f06 <ILI9341_Initialize+0x12>
      Error_Handler();
 800818c:	f005 ff82 	bl	800e094 <Error_Handler>
 8008190:	e6b9      	b.n	8007f06 <ILI9341_Initialize+0x12>
 8008192:	bf00      	nop
 8008194:	200109dc 	.word	0x200109dc
 8008198:	200109d0 	.word	0x200109d0
 800819c:	40020800 	.word	0x40020800
 80081a0:	200109cc 	.word	0x200109cc

080081a4 <ILI9341_SetAddrWindow>:
{
 80081a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a8:	4680      	mov	r8, r0
 80081aa:	460e      	mov	r6, r1
 80081ac:	4615      	mov	r5, r2
 80081ae:	461c      	mov	r4, r3
 80081b0:	f99d 7018 	ldrsb.w	r7, [sp, #24]
  if (UseCS)
 80081b4:	b9cf      	cbnz	r7, 80081ea <ILI9341_SetAddrWindow+0x46>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 80081b6:	4445      	add	r5, r8
 80081b8:	3d01      	subs	r5, #1
 80081ba:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 80081be:	4434      	add	r4, r6
 80081c0:	3c01      	subs	r4, #1
 80081c2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 80081c6:	202a      	movs	r0, #42	@ 0x2a
 80081c8:	f7ff fd54 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write32(xa);
 80081cc:	4628      	mov	r0, r5
 80081ce:	f7ff fd48 	bl	8007c62 <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_PASET); // Row addr set
 80081d2:	202b      	movs	r0, #43	@ 0x2b
 80081d4:	f7ff fd4e 	bl	8007c74 <ILI9341_WriteCommand>
  ILI9341_Write32(ya);
 80081d8:	4620      	mov	r0, r4
 80081da:	f7ff fd42 	bl	8007c62 <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_RAMWR); // Write to RAM
 80081de:	202c      	movs	r0, #44	@ 0x2c
 80081e0:	f7ff fd48 	bl	8007c74 <ILI9341_WriteCommand>
  if (UseCS)
 80081e4:	b93f      	cbnz	r7, 80081f6 <ILI9341_SetAddrWindow+0x52>
}
 80081e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ILI9341_CSX_Low();
 80081ea:	2200      	movs	r2, #0
 80081ec:	2102      	movs	r1, #2
 80081ee:	4805      	ldr	r0, [pc, #20]	@ (8008204 <ILI9341_SetAddrWindow+0x60>)
 80081f0:	f7f8 fe19 	bl	8000e26 <HAL_GPIO_WritePin>
 80081f4:	e7df      	b.n	80081b6 <ILI9341_SetAddrWindow+0x12>
    ILI9341_CSX_High();
 80081f6:	2201      	movs	r2, #1
 80081f8:	2102      	movs	r1, #2
 80081fa:	4802      	ldr	r0, [pc, #8]	@ (8008204 <ILI9341_SetAddrWindow+0x60>)
 80081fc:	f7f8 fe13 	bl	8000e26 <HAL_GPIO_WritePin>
}
 8008200:	e7f1      	b.n	80081e6 <ILI9341_SetAddrWindow+0x42>
 8008202:	bf00      	nop
 8008204:	40020800 	.word	0x40020800

08008208 <ILI9341_DrawPixel_ToDisplay>:
{
 8008208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800820a:	b083      	sub	sp, #12
 800820c:	4604      	mov	r4, r0
 800820e:	460d      	mov	r5, r1
 8008210:	4616      	mov	r6, r2
  if (UseCS)
 8008212:	461f      	mov	r7, r3
 8008214:	b95b      	cbnz	r3, 800822e <ILI9341_DrawPixel_ToDisplay+0x26>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8008216:	b2a0      	uxth	r0, r4
 8008218:	0feb      	lsrs	r3, r5, #31
 800821a:	28ef      	cmp	r0, #239	@ 0xef
 800821c:	bf88      	it	hi
 800821e:	f043 0301 	orrhi.w	r3, r3, #1
 8008222:	b913      	cbnz	r3, 800822a <ILI9341_DrawPixel_ToDisplay+0x22>
 8008224:	f5b5 7fa0 	cmp.w	r5, #320	@ 0x140
 8008228:	db07      	blt.n	800823a <ILI9341_DrawPixel_ToDisplay+0x32>
}
 800822a:	b003      	add	sp, #12
 800822c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ILI9341_CSX_Low();
 800822e:	2200      	movs	r2, #0
 8008230:	2102      	movs	r1, #2
 8008232:	480a      	ldr	r0, [pc, #40]	@ (800825c <ILI9341_DrawPixel_ToDisplay+0x54>)
 8008234:	f7f8 fdf7 	bl	8000e26 <HAL_GPIO_WritePin>
 8008238:	e7ed      	b.n	8008216 <ILI9341_DrawPixel_ToDisplay+0xe>
  ILI9341_SetAddrWindow(X, Y, 1, 1, 0);
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	2301      	movs	r3, #1
 800823e:	461a      	mov	r2, r3
 8008240:	b2a9      	uxth	r1, r5
 8008242:	f7ff ffaf 	bl	80081a4 <ILI9341_SetAddrWindow>
  ILI9341_Write16(Color);
 8008246:	4630      	mov	r0, r6
 8008248:	f7ff fd02 	bl	8007c50 <ILI9341_Write16>
  if (UseCS)
 800824c:	2f00      	cmp	r7, #0
 800824e:	d0ec      	beq.n	800822a <ILI9341_DrawPixel_ToDisplay+0x22>
    ILI9341_CSX_Low();
 8008250:	2200      	movs	r2, #0
 8008252:	2102      	movs	r1, #2
 8008254:	4801      	ldr	r0, [pc, #4]	@ (800825c <ILI9341_DrawPixel_ToDisplay+0x54>)
 8008256:	f7f8 fde6 	bl	8000e26 <HAL_GPIO_WritePin>
 800825a:	e7e6      	b.n	800822a <ILI9341_DrawPixel_ToDisplay+0x22>
 800825c:	40020800 	.word	0x40020800

08008260 <ILI9341_DrawPixel>:
{
 8008260:	b510      	push	{r4, lr}
  if (UseBackBuffer)
 8008262:	4c04      	ldr	r4, [pc, #16]	@ (8008274 <ILI9341_DrawPixel+0x14>)
 8008264:	7824      	ldrb	r4, [r4, #0]
 8008266:	b114      	cbz	r4, 800826e <ILI9341_DrawPixel+0xe>
    ILI9341_DrawPixel_ToBackBuffer(X, Y, Color);
 8008268:	f7ff fcb2 	bl	8007bd0 <ILI9341_DrawPixel_ToBackBuffer>
}
 800826c:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixel_ToDisplay(X, Y, Color, UseCS);
 800826e:	f7ff ffcb 	bl	8008208 <ILI9341_DrawPixel_ToDisplay>
}
 8008272:	e7fb      	b.n	800826c <ILI9341_DrawPixel+0xc>
 8008274:	200109d0 	.word	0x200109d0

08008278 <ILI9341_DrawPixels_MSBFirst>:
{
 8008278:	b510      	push	{r4, lr}
 800827a:	b082      	sub	sp, #8
  if (UseBackBuffer)
 800827c:	4c06      	ldr	r4, [pc, #24]	@ (8008298 <ILI9341_DrawPixels_MSBFirst+0x20>)
 800827e:	7824      	ldrb	r4, [r4, #0]
 8008280:	b12c      	cbz	r4, 800828e <ILI9341_DrawPixels_MSBFirst+0x16>
    ILI9341_DrawPixels_MSBFirst_ToBackBuffer(X, Y, Width, Height, pPixels);
 8008282:	9c04      	ldr	r4, [sp, #16]
 8008284:	9400      	str	r4, [sp, #0]
 8008286:	f7ff fd09 	bl	8007c9c <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>
}
 800828a:	b002      	add	sp, #8
 800828c:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixels_MSBFirst_ToDisplay(X, Y, Width, Height, pPixels);
 800828e:	9c04      	ldr	r4, [sp, #16]
 8008290:	9400      	str	r4, [sp, #0]
 8008292:	f7ff fd47 	bl	8007d24 <ILI9341_DrawPixels_MSBFirst_ToDisplay>
}
 8008296:	e7f8      	b.n	800828a <ILI9341_DrawPixels_MSBFirst+0x12>
 8008298:	200109d0 	.word	0x200109d0

0800829c <ILI9341_UsingBackBuffer>:
}
 800829c:	4b01      	ldr	r3, [pc, #4]	@ (80082a4 <ILI9341_UsingBackBuffer+0x8>)
 800829e:	7818      	ldrb	r0, [r3, #0]
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	200109d0 	.word	0x200109d0

080082a8 <ILI9341_CopyBackBufferToDisplay>:
{
 80082a8:	b500      	push	{lr}
 80082aa:	b083      	sub	sp, #12
  ILI9341_DrawPixels_MSBFirst_ToDisplay(0, 0, ILI9341_Width, ILI9341_Height, pBackBuffer);
 80082ac:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <ILI9341_CopyBackBufferToDisplay+0x20>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80082b6:	22f0      	movs	r2, #240	@ 0xf0
 80082b8:	2100      	movs	r1, #0
 80082ba:	4608      	mov	r0, r1
 80082bc:	f7ff fd32 	bl	8007d24 <ILI9341_DrawPixels_MSBFirst_ToDisplay>
}
 80082c0:	b003      	add	sp, #12
 80082c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80082c6:	bf00      	nop
 80082c8:	200109cc 	.word	0x200109cc

080082cc <ILI9341_DrawBar_ToBackBuffer>:
{
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	b083      	sub	sp, #12
 80082d2:	4606      	mov	r6, r0
 80082d4:	468b      	mov	fp, r1
 80082d6:	4617      	mov	r7, r2
 80082d8:	9301      	str	r3, [sp, #4]
  Color_MSBFirst = SwapBytes(i_Color);
 80082da:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80082de:	f7ff fb77 	bl	80079d0 <SwapBytes>
 80082e2:	4681      	mov	r9, r0
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80082e4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80082e8:	2100      	movs	r1, #0
 80082ea:	4658      	mov	r0, fp
 80082ec:	f7ff fb82 	bl	80079f4 <Clamp_uint16>
 80082f0:	4682      	mov	sl, r0
 80082f2:	e00e      	b.n	8008312 <ILI9341_DrawBar_ToBackBuffer+0x46>
      pLine[X] = Color_MSBFirst;
 80082f4:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 80082f8:	f828 9003 	strh.w	r9, [r8, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80082fc:	3401      	adds	r4, #1
 80082fe:	19f0      	adds	r0, r6, r7
 8008300:	22f0      	movs	r2, #240	@ 0xf0
 8008302:	2100      	movs	r1, #0
 8008304:	b280      	uxth	r0, r0
 8008306:	f7ff fb75 	bl	80079f4 <Clamp_uint16>
 800830a:	42a0      	cmp	r0, r4
 800830c:	d8f2      	bhi.n	80082f4 <ILI9341_DrawBar_ToBackBuffer+0x28>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 800830e:	f10a 0a01 	add.w	sl, sl, #1
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	eb0b 0003 	add.w	r0, fp, r3
 8008318:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800831c:	2100      	movs	r1, #0
 800831e:	b280      	uxth	r0, r0
 8008320:	f7ff fb68 	bl	80079f4 <Clamp_uint16>
 8008324:	4550      	cmp	r0, sl
 8008326:	d90c      	bls.n	8008342 <ILI9341_DrawBar_ToBackBuffer+0x76>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8008328:	4b07      	ldr	r3, [pc, #28]	@ (8008348 <ILI9341_DrawBar_ToBackBuffer+0x7c>)
 800832a:	f8d3 8000 	ldr.w	r8, [r3]
 800832e:	ebca 150a 	rsb	r5, sl, sl, lsl #4
 8008332:	016d      	lsls	r5, r5, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8008334:	22f0      	movs	r2, #240	@ 0xf0
 8008336:	2100      	movs	r1, #0
 8008338:	4630      	mov	r0, r6
 800833a:	f7ff fb5b 	bl	80079f4 <Clamp_uint16>
 800833e:	4604      	mov	r4, r0
 8008340:	e7dd      	b.n	80082fe <ILI9341_DrawBar_ToBackBuffer+0x32>
}
 8008342:	b003      	add	sp, #12
 8008344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008348:	200109cc 	.word	0x200109cc

0800834c <ILI9341_DrawBar>:
{
 800834c:	b530      	push	{r4, r5, lr}
 800834e:	b083      	sub	sp, #12
 8008350:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  if (UseBackBuffer)
 8008354:	4d05      	ldr	r5, [pc, #20]	@ (800836c <ILI9341_DrawBar+0x20>)
 8008356:	782d      	ldrb	r5, [r5, #0]
 8008358:	b125      	cbz	r5, 8008364 <ILI9341_DrawBar+0x18>
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 800835a:	9400      	str	r4, [sp, #0]
 800835c:	f7ff ffb6 	bl	80082cc <ILI9341_DrawBar_ToBackBuffer>
}
 8008360:	b003      	add	sp, #12
 8008362:	bd30      	pop	{r4, r5, pc}
    ILI9341_DrawBar_ToDisplay(X, Y, Width, Height, Color);
 8008364:	9400      	str	r4, [sp, #0]
 8008366:	f7ff fd45 	bl	8007df4 <ILI9341_DrawBar_ToDisplay>
}
 800836a:	e7f9      	b.n	8008360 <ILI9341_DrawBar+0x14>
 800836c:	200109d0 	.word	0x200109d0

08008370 <ILI9341_Clear>:
{
 8008370:	b500      	push	{lr}
 8008372:	b083      	sub	sp, #12
  ILI9341_DrawBar(0, 0, ILI9341_Width, ILI9341_Height, Color);
 8008374:	9000      	str	r0, [sp, #0]
 8008376:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800837a:	22f0      	movs	r2, #240	@ 0xf0
 800837c:	2100      	movs	r1, #0
 800837e:	4608      	mov	r0, r1
 8008380:	f7ff ffe4 	bl	800834c <ILI9341_DrawBar>
}
 8008384:	b003      	add	sp, #12
 8008386:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800838c <ILI9341_DrawRectangle>:
{
 800838c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	4607      	mov	r7, r0
 8008392:	460e      	mov	r6, r1
 8008394:	4691      	mov	r9, r2
 8008396:	469a      	mov	sl, r3
 8008398:	f8bd 5020 	ldrh.w	r5, [sp, #32]
  if (!UseBackBuffer)
 800839c:	4b22      	ldr	r3, [pc, #136]	@ (8008428 <ILI9341_DrawRectangle+0x9c>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	b10b      	cbz	r3, 80083a6 <ILI9341_DrawRectangle+0x1a>
  for (uint32_t X = Left; X < Left + Width; ++X)
 80083a2:	463c      	mov	r4, r7
 80083a4:	e018      	b.n	80083d8 <ILI9341_DrawRectangle+0x4c>
    ILI9341_CSX_Low();
 80083a6:	2200      	movs	r2, #0
 80083a8:	2102      	movs	r1, #2
 80083aa:	4820      	ldr	r0, [pc, #128]	@ (800842c <ILI9341_DrawRectangle+0xa0>)
 80083ac:	f7f8 fd3b 	bl	8000e26 <HAL_GPIO_WritePin>
 80083b0:	e7f7      	b.n	80083a2 <ILI9341_DrawRectangle+0x16>
    ILI9341_DrawPixel(X, Top, Color, 0);
 80083b2:	fa0f f884 	sxth.w	r8, r4
 80083b6:	2300      	movs	r3, #0
 80083b8:	462a      	mov	r2, r5
 80083ba:	b231      	sxth	r1, r6
 80083bc:	4640      	mov	r0, r8
 80083be:	f7ff ff4f 	bl	8008260 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(X, Top + Height - 1, Color, 0);
 80083c2:	eb06 010a 	add.w	r1, r6, sl
 80083c6:	b289      	uxth	r1, r1
 80083c8:	3901      	subs	r1, #1
 80083ca:	2300      	movs	r3, #0
 80083cc:	462a      	mov	r2, r5
 80083ce:	b209      	sxth	r1, r1
 80083d0:	4640      	mov	r0, r8
 80083d2:	f7ff ff45 	bl	8008260 <ILI9341_DrawPixel>
  for (uint32_t X = Left; X < Left + Width; ++X)
 80083d6:	3401      	adds	r4, #1
 80083d8:	eb07 0309 	add.w	r3, r7, r9
 80083dc:	42a3      	cmp	r3, r4
 80083de:	d8e8      	bhi.n	80083b2 <ILI9341_DrawRectangle+0x26>
  for (uint32_t Y = Top; Y < Top + Height; ++Y)
 80083e0:	4634      	mov	r4, r6
 80083e2:	e012      	b.n	800840a <ILI9341_DrawRectangle+0x7e>
    ILI9341_DrawPixel(Left, Y, Color, 0);
 80083e4:	fa0f f884 	sxth.w	r8, r4
 80083e8:	2300      	movs	r3, #0
 80083ea:	462a      	mov	r2, r5
 80083ec:	4641      	mov	r1, r8
 80083ee:	b238      	sxth	r0, r7
 80083f0:	f7ff ff36 	bl	8008260 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(Left + Width - 1, Y, Color, 0);
 80083f4:	eb07 0009 	add.w	r0, r7, r9
 80083f8:	b280      	uxth	r0, r0
 80083fa:	3801      	subs	r0, #1
 80083fc:	2300      	movs	r3, #0
 80083fe:	462a      	mov	r2, r5
 8008400:	4641      	mov	r1, r8
 8008402:	b200      	sxth	r0, r0
 8008404:	f7ff ff2c 	bl	8008260 <ILI9341_DrawPixel>
  for (uint32_t Y = Top; Y < Top + Height; ++Y)
 8008408:	3401      	adds	r4, #1
 800840a:	eb06 030a 	add.w	r3, r6, sl
 800840e:	42a3      	cmp	r3, r4
 8008410:	d8e8      	bhi.n	80083e4 <ILI9341_DrawRectangle+0x58>
  if (!UseBackBuffer)
 8008412:	4b05      	ldr	r3, [pc, #20]	@ (8008428 <ILI9341_DrawRectangle+0x9c>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	b10b      	cbz	r3, 800841c <ILI9341_DrawRectangle+0x90>
}
 8008418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ILI9341_CSX_High();
 800841c:	2201      	movs	r2, #1
 800841e:	2102      	movs	r1, #2
 8008420:	4802      	ldr	r0, [pc, #8]	@ (800842c <ILI9341_DrawRectangle+0xa0>)
 8008422:	f7f8 fd00 	bl	8000e26 <HAL_GPIO_WritePin>
}
 8008426:	e7f7      	b.n	8008418 <ILI9341_DrawRectangle+0x8c>
 8008428:	200109d0 	.word	0x200109d0
 800842c:	40020800 	.word	0x40020800

08008430 <ILI9341_SetFont>:
  Result = pFont;
 8008430:	4b02      	ldr	r3, [pc, #8]	@ (800843c <ILI9341_SetFont+0xc>)
 8008432:	681a      	ldr	r2, [r3, #0]
  pFont = i_pFont;
 8008434:	6018      	str	r0, [r3, #0]
}
 8008436:	4610      	mov	r0, r2
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	200109d4 	.word	0x200109d4

08008440 <ILI9341_GetFontYSpacing>:
  return pFont->yAdvance;
 8008440:	4b01      	ldr	r3, [pc, #4]	@ (8008448 <ILI9341_GetFontYSpacing+0x8>)
 8008442:	681b      	ldr	r3, [r3, #0]
}
 8008444:	7a98      	ldrb	r0, [r3, #10]
 8008446:	4770      	bx	lr
 8008448:	200109d4 	.word	0x200109d4

0800844c <GetCharWidth>:

uint16_t GetCharWidth(uint8_t Ch)
{
 800844c:	b510      	push	{r4, lr}
 800844e:	4604      	mov	r4, r0
  if (IsNonPrintingChar(Ch))
 8008450:	f7ff fbd6 	bl	8007c00 <IsNonPrintingChar>
 8008454:	b980      	cbnz	r0, 8008478 <GetCharWidth+0x2c>
    return 0;

  Ch -= pFont->first;
 8008456:	4b09      	ldr	r3, [pc, #36]	@ (800847c <GetCharWidth+0x30>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	7a1a      	ldrb	r2, [r3, #8]
 800845c:	1aa0      	subs	r0, r4, r2
 800845e:	b2c0      	uxtb	r0, r0
  GFXglyph *pGlyph = &pFont->pGlyph[Ch];
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  uint8_t w = pGlyph->width;
 8008466:	789a      	ldrb	r2, [r3, #2]
  int8_t xo = pGlyph->xOffset;
 8008468:	f993 0005 	ldrsb.w	r0, [r3, #5]

  if (w == 0)
 800846c:	b112      	cbz	r2, 8008474 <GetCharWidth+0x28>
    return pGlyph->xAdvance;

  return xo + w;
 800846e:	4410      	add	r0, r2
 8008470:	b280      	uxth	r0, r0
}
 8008472:	bd10      	pop	{r4, pc}
    return pGlyph->xAdvance;
 8008474:	7918      	ldrb	r0, [r3, #4]
 8008476:	e7fc      	b.n	8008472 <GetCharWidth+0x26>
    return 0;
 8008478:	2000      	movs	r0, #0
 800847a:	e7fa      	b.n	8008472 <GetCharWidth+0x26>
 800847c:	200109d4 	.word	0x200109d4

08008480 <ILI9341_GetTextWidth>:

uint16_t ILI9341_GetTextWidth(const char *Text)
{
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	4604      	mov	r4, r0
  uint16_t TotalWidth, NumChars;
  const char *pText;

  NumChars = strlen(Text);
 8008484:	f7f7 ff3c 	bl	8000300 <strlen>
 8008488:	b287      	uxth	r7, r0

  pText = Text;

  TotalWidth=0;

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 800848a:	2500      	movs	r5, #0
  TotalWidth=0;
 800848c:	462e      	mov	r6, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 800848e:	e007      	b.n	80084a0 <ILI9341_GetTextWidth+0x20>
    TotalWidth += GetCharWidth(*pText++);
 8008490:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008494:	f7ff ffda 	bl	800844c <GetCharWidth>
 8008498:	4406      	add	r6, r0
 800849a:	b2b6      	uxth	r6, r6
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 800849c:	3501      	adds	r5, #1
 800849e:	b2ad      	uxth	r5, r5
 80084a0:	42bd      	cmp	r5, r7
 80084a2:	d3f5      	bcc.n	8008490 <ILI9341_GetTextWidth+0x10>

  return TotalWidth;
}
 80084a4:	4630      	mov	r0, r6
 80084a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084a8 <ILI9341_DrawCharAtXY>:
uint8_t ILI9341_DrawCharAtXY(uint8_t Ch, uint16_t X, uint16_t Y, uint16_t Color)
// X: X position of left edge of char.
// Y: Y position of line on which the char sits. The char may go below this line (e.g. g j p q y).
// Returns required X advance.
// Based on Adafruit_GFX.cpp.
{
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	b08d      	sub	sp, #52	@ 0x34
 80084ae:	9105      	str	r1, [sp, #20]
 80084b0:	9208      	str	r2, [sp, #32]
 80084b2:	9306      	str	r3, [sp, #24]
  uint8_t *pBitmap;
  uint16_t Color_MSBFirst, TextBackgroundColor_MSBFirst;
  uint16_t *pMemChar, *pMemCharPixel;
  uint8_t CharWidth, CharHeight;

  if (!pFont)
 80084b4:	4b9a      	ldr	r3, [pc, #616]	@ (8008720 <ILI9341_DrawCharAtXY+0x278>)
 80084b6:	681c      	ldr	r4, [r3, #0]
 80084b8:	2c00      	cmp	r4, #0
 80084ba:	f000 812c 	beq.w	8008716 <ILI9341_DrawCharAtXY+0x26e>
 80084be:	4605      	mov	r5, r0
    return 0;
  if (IsNonPrintingChar(Ch))
 80084c0:	f7ff fb9e 	bl	8007c00 <IsNonPrintingChar>
 80084c4:	9003      	str	r0, [sp, #12]
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f040 8127 	bne.w	800871a <ILI9341_DrawCharAtXY+0x272>
    return 0;

  Ch -= pFont->first;
 80084cc:	7a23      	ldrb	r3, [r4, #8]
 80084ce:	1aed      	subs	r5, r5, r3
 80084d0:	b2ed      	uxtb	r5, r5
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 80084d2:	4b94      	ldr	r3, [pc, #592]	@ (8008724 <ILI9341_DrawCharAtXY+0x27c>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d034      	beq.n	8008544 <ILI9341_DrawCharAtXY+0x9c>
    Y -= (pFont->yOffsetMin / 2);

  pGlyph = &pFont->pGlyph[Ch];
 80084da:	6863      	ldr	r3, [r4, #4]
 80084dc:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80084e0:	920a      	str	r2, [sp, #40]	@ 0x28
  pBitmap = pFont->pBitmap;
 80084e2:	f8d4 9000 	ldr.w	r9, [r4]

  bo = pGlyph->bitmapOffset;
 80084e6:	f833 6035 	ldrh.w	r6, [r3, r5, lsl #3]
  w = pGlyph->width;
 80084ea:	4613      	mov	r3, r2
 80084ec:	f892 8002 	ldrb.w	r8, [r2, #2]
  h = pGlyph->height;
 80084f0:	f892 b003 	ldrb.w	fp, [r2, #3]
  xo = pGlyph->xOffset;
 80084f4:	f992 2005 	ldrsb.w	r2, [r2, #5]
 80084f8:	9204      	str	r2, [sp, #16]
  yo = pGlyph->yOffset;
 80084fa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80084fe:	9307      	str	r3, [sp, #28]
  bits = 0;
  bit = 0;
  yo_min = pFont->yOffsetMin;
 8008500:	f994 a00b 	ldrsb.w	sl, [r4, #11]
  yo_max = pFont->yOffsetMax;
 8008504:	f994 500c 	ldrsb.w	r5, [r4, #12]

  switch(TextDrawMode)
 8008508:	4b87      	ldr	r3, [pc, #540]	@ (8008728 <ILI9341_DrawCharAtXY+0x280>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2b02      	cmp	r3, #2
 800850e:	d060      	beq.n	80085d2 <ILI9341_DrawCharAtXY+0x12a>
 8008510:	2b03      	cmp	r3, #3
 8008512:	f000 80bb 	beq.w	800868c <ILI9341_DrawCharAtXY+0x1e4>
 8008516:	2b01      	cmp	r3, #1
 8008518:	d151      	bne.n	80085be <ILI9341_DrawCharAtXY+0x116>
  {
    case tdmNone:
      break;

    case tdmThisCharBar:
      Color_MSBFirst = SwapBytes(Color);
 800851a:	9806      	ldr	r0, [sp, #24]
 800851c:	f7ff fa58 	bl	80079d0 <SwapBytes>
 8008520:	4605      	mov	r5, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8008522:	4b82      	ldr	r3, [pc, #520]	@ (800872c <ILI9341_DrawCharAtXY+0x284>)
 8008524:	8818      	ldrh	r0, [r3, #0]
 8008526:	f7ff fa53 	bl	80079d0 <SwapBytes>
 800852a:	4604      	mov	r4, r0
      pMemChar = (uint16_t *)malloc(w * h * 2);
 800852c:	fb0b f008 	mul.w	r0, fp, r8
 8008530:	0040      	lsls	r0, r0, #1
 8008532:	f006 fd3d 	bl	800efb0 <malloc>
 8008536:	4607      	mov	r7, r0
      pMemCharPixel = pMemChar;
 8008538:	4684      	mov	ip, r0
  bit = 0;
 800853a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800853e:	4670      	mov	r0, lr
  bits = 0;
 8008540:	4673      	mov	r3, lr

      for (yy = 0; yy < h; ++yy)
 8008542:	e028      	b.n	8008596 <ILI9341_DrawCharAtXY+0xee>
    Y -= (pFont->yOffsetMin / 2);
 8008544:	f994 300b 	ldrsb.w	r3, [r4, #11]
 8008548:	2b00      	cmp	r3, #0
 800854a:	db05      	blt.n	8008558 <ILI9341_DrawCharAtXY+0xb0>
 800854c:	9a08      	ldr	r2, [sp, #32]
 800854e:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 8008552:	b29b      	uxth	r3, r3
 8008554:	9308      	str	r3, [sp, #32]
 8008556:	e7c0      	b.n	80084da <ILI9341_DrawCharAtXY+0x32>
 8008558:	3301      	adds	r3, #1
 800855a:	e7f7      	b.n	800854c <ILI9341_DrawCharAtXY+0xa4>
      {
        for (xx = 0; xx < w; ++xx)
        {
          if (!(bit++ & 7))
            bits = pBitmap[bo++];
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 800855c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008560:	d113      	bne.n	800858a <ILI9341_DrawCharAtXY+0xe2>
 8008562:	4620      	mov	r0, r4
 8008564:	f82c 0b02 	strh.w	r0, [ip], #2
          ++pMemCharPixel;
          bits <<= 1;
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 800856c:	3201      	adds	r2, #1
 800856e:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 8008570:	4608      	mov	r0, r1
        for (xx = 0; xx < w; ++xx)
 8008572:	4542      	cmp	r2, r8
 8008574:	d20b      	bcs.n	800858e <ILI9341_DrawCharAtXY+0xe6>
          if (!(bit++ & 7))
 8008576:	1c41      	adds	r1, r0, #1
 8008578:	b2c9      	uxtb	r1, r1
 800857a:	f010 0f07 	tst.w	r0, #7
 800857e:	d1ed      	bne.n	800855c <ILI9341_DrawCharAtXY+0xb4>
            bits = pBitmap[bo++];
 8008580:	1c70      	adds	r0, r6, #1
 8008582:	f819 3006 	ldrb.w	r3, [r9, r6]
 8008586:	b286      	uxth	r6, r0
 8008588:	e7e8      	b.n	800855c <ILI9341_DrawCharAtXY+0xb4>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 800858a:	4628      	mov	r0, r5
 800858c:	e7ea      	b.n	8008564 <ILI9341_DrawCharAtXY+0xbc>
      for (yy = 0; yy < h; ++yy)
 800858e:	f10e 0e01 	add.w	lr, lr, #1
 8008592:	fa5f fe8e 	uxtb.w	lr, lr
 8008596:	45de      	cmp	lr, fp
 8008598:	d201      	bcs.n	800859e <ILI9341_DrawCharAtXY+0xf6>
        for (xx = 0; xx < w; ++xx)
 800859a:	9a03      	ldr	r2, [sp, #12]
 800859c:	e7e9      	b.n	8008572 <ILI9341_DrawCharAtXY+0xca>
        }
      }
      ILI9341_DrawPixels_MSBFirst(X + xo, Y + yo, w, h, pMemChar);
 800859e:	9908      	ldr	r1, [sp, #32]
 80085a0:	9b07      	ldr	r3, [sp, #28]
 80085a2:	4419      	add	r1, r3
 80085a4:	9805      	ldr	r0, [sp, #20]
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	4418      	add	r0, r3
 80085aa:	9700      	str	r7, [sp, #0]
 80085ac:	465b      	mov	r3, fp
 80085ae:	4642      	mov	r2, r8
 80085b0:	b289      	uxth	r1, r1
 80085b2:	b280      	uxth	r0, r0
 80085b4:	f7ff fe60 	bl	8008278 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 80085b8:	4638      	mov	r0, r7
 80085ba:	f006 fd01 	bl	800efc0 <free>
      }
      ILI9341_CSX_High();
      break;
  }

  if (w == 0)
 80085be:	f1b8 0f00 	cmp.w	r8, #0
 80085c2:	f000 80a5 	beq.w	8008710 <ILI9341_DrawCharAtXY+0x268>
    return pGlyph->xAdvance;
  return xo + w;
 80085c6:	9804      	ldr	r0, [sp, #16]
 80085c8:	4440      	add	r0, r8
 80085ca:	b2c0      	uxtb	r0, r0
}
 80085cc:	b00d      	add	sp, #52	@ 0x34
 80085ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Color_MSBFirst = SwapBytes(Color);
 80085d2:	9806      	ldr	r0, [sp, #24]
 80085d4:	f7ff f9fc 	bl	80079d0 <SwapBytes>
 80085d8:	4604      	mov	r4, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 80085da:	4b54      	ldr	r3, [pc, #336]	@ (800872c <ILI9341_DrawCharAtXY+0x284>)
 80085dc:	8818      	ldrh	r0, [r3, #0]
 80085de:	f7ff f9f7 	bl	80079d0 <SwapBytes>
 80085e2:	4607      	mov	r7, r0
      CharWidth = pGlyph->xAdvance;
 80085e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085e6:	791a      	ldrb	r2, [r3, #4]
 80085e8:	9206      	str	r2, [sp, #24]
      CharHeight = yo_max - yo_min + 1;
 80085ea:	eba5 030a 	sub.w	r3, r5, sl
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	3301      	adds	r3, #1
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	930b      	str	r3, [sp, #44]	@ 0x2c
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 80085f6:	fb02 f503 	mul.w	r5, r2, r3
 80085fa:	0068      	lsls	r0, r5, #1
 80085fc:	f006 fcd8 	bl	800efb0 <malloc>
 8008600:	4603      	mov	r3, r0
 8008602:	9009      	str	r0, [sp, #36]	@ 0x24
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8008604:	2200      	movs	r2, #0
 8008606:	e003      	b.n	8008610 <ILI9341_DrawCharAtXY+0x168>
        *pMemCharPixel++ = TextBackgroundColor_MSBFirst;
 8008608:	f823 7b02 	strh.w	r7, [r3], #2
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800860c:	3201      	adds	r2, #1
 800860e:	b292      	uxth	r2, r2
 8008610:	4295      	cmp	r5, r2
 8008612:	dcf9      	bgt.n	8008608 <ILI9341_DrawCharAtXY+0x160>
  bit = 0;
 8008614:	9f03      	ldr	r7, [sp, #12]
 8008616:	463d      	mov	r5, r7
  bits = 0;
 8008618:	463b      	mov	r3, r7
 800861a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800861e:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8008622:	e018      	b.n	8008656 <ILI9341_DrawCharAtXY+0x1ae>
          if (bits & 0x80)
 8008624:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008628:	d111      	bne.n	800864e <ILI9341_DrawCharAtXY+0x1a6>
          ++pMemCharPixel;
 800862a:	3002      	adds	r0, #2
          bits <<= 1;
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 8008630:	3201      	adds	r2, #1
 8008632:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 8008634:	460d      	mov	r5, r1
        for (xx = 0; xx < w; ++xx)
 8008636:	4542      	cmp	r2, r8
 8008638:	d20b      	bcs.n	8008652 <ILI9341_DrawCharAtXY+0x1aa>
          if (!(bit++ & 7))
 800863a:	1c69      	adds	r1, r5, #1
 800863c:	b2c9      	uxtb	r1, r1
 800863e:	f015 0f07 	tst.w	r5, #7
 8008642:	d1ef      	bne.n	8008624 <ILI9341_DrawCharAtXY+0x17c>
            bits = pBitmap[bo++];
 8008644:	1c75      	adds	r5, r6, #1
 8008646:	f819 3006 	ldrb.w	r3, [r9, r6]
 800864a:	b2ae      	uxth	r6, r5
 800864c:	e7ea      	b.n	8008624 <ILI9341_DrawCharAtXY+0x17c>
            *pMemCharPixel = Color_MSBFirst;
 800864e:	8004      	strh	r4, [r0, #0]
 8008650:	e7eb      	b.n	800862a <ILI9341_DrawCharAtXY+0x182>
      for (yy = 0; yy < h; ++yy)
 8008652:	3701      	adds	r7, #1
 8008654:	b2ff      	uxtb	r7, r7
 8008656:	455f      	cmp	r7, fp
 8008658:	d20a      	bcs.n	8008670 <ILI9341_DrawCharAtXY+0x1c8>
        pMemCharPixel = &pMemChar[(- yo_min + yo + yy) * CharWidth + xo];
 800865a:	ebac 000a 	sub.w	r0, ip, sl
 800865e:	4438      	add	r0, r7
 8008660:	9a04      	ldr	r2, [sp, #16]
 8008662:	9906      	ldr	r1, [sp, #24]
 8008664:	fb00 2001 	mla	r0, r0, r1, r2
 8008668:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
        for (xx = 0; xx < w; ++xx)
 800866c:	9a03      	ldr	r2, [sp, #12]
 800866e:	e7e2      	b.n	8008636 <ILI9341_DrawCharAtXY+0x18e>
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
 8008670:	9908      	ldr	r1, [sp, #32]
 8008672:	4451      	add	r1, sl
 8008674:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8008676:	9400      	str	r4, [sp, #0]
 8008678:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800867a:	9a06      	ldr	r2, [sp, #24]
 800867c:	b289      	uxth	r1, r1
 800867e:	9805      	ldr	r0, [sp, #20]
 8008680:	f7ff fdfa 	bl	8008278 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 8008684:	4620      	mov	r0, r4
 8008686:	f006 fc9b 	bl	800efc0 <free>
      break;
 800868a:	e798      	b.n	80085be <ILI9341_DrawCharAtXY+0x116>
      ILI9341_CSX_Low();
 800868c:	2200      	movs	r2, #0
 800868e:	2102      	movs	r1, #2
 8008690:	4827      	ldr	r0, [pc, #156]	@ (8008730 <ILI9341_DrawCharAtXY+0x288>)
 8008692:	f7f8 fbc8 	bl	8000e26 <HAL_GPIO_WritePin>
  bit = 0;
 8008696:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800869a:	4653      	mov	r3, sl
  bits = 0;
 800869c:	4654      	mov	r4, sl
 800869e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80086a2:	f8dd b020 	ldr.w	fp, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 80086a6:	e028      	b.n	80086fa <ILI9341_DrawCharAtXY+0x252>
          if (bits & 0x80)
 80086a8:	f014 0f80 	tst.w	r4, #128	@ 0x80
 80086ac:	d110      	bne.n	80086d0 <ILI9341_DrawCharAtXY+0x228>
          bits <<= 1;
 80086ae:	0064      	lsls	r4, r4, #1
 80086b0:	b2e4      	uxtb	r4, r4
        for (xx = 0; xx < w; ++xx)
 80086b2:	3501      	adds	r5, #1
 80086b4:	b2ed      	uxtb	r5, r5
          if (!(bit++ & 7))
 80086b6:	463b      	mov	r3, r7
        for (xx = 0; xx < w; ++xx)
 80086b8:	4545      	cmp	r5, r8
 80086ba:	d21a      	bcs.n	80086f2 <ILI9341_DrawCharAtXY+0x24a>
          if (!(bit++ & 7))
 80086bc:	1c5f      	adds	r7, r3, #1
 80086be:	b2ff      	uxtb	r7, r7
 80086c0:	f013 0f07 	tst.w	r3, #7
 80086c4:	d1f0      	bne.n	80086a8 <ILI9341_DrawCharAtXY+0x200>
            bits = pBitmap[bo++];
 80086c6:	1c73      	adds	r3, r6, #1
 80086c8:	f819 4006 	ldrb.w	r4, [r9, r6]
 80086cc:	b29e      	uxth	r6, r3
 80086ce:	e7eb      	b.n	80086a8 <ILI9341_DrawCharAtXY+0x200>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80086d0:	9b05      	ldr	r3, [sp, #20]
 80086d2:	9a04      	ldr	r2, [sp, #16]
 80086d4:	1898      	adds	r0, r3, r2
 80086d6:	fa15 f080 	uxtah	r0, r5, r0
 80086da:	9b07      	ldr	r3, [sp, #28]
 80086dc:	eb0b 0103 	add.w	r1, fp, r3
 80086e0:	fa1a f181 	uxtah	r1, sl, r1
 80086e4:	2300      	movs	r3, #0
 80086e6:	9a06      	ldr	r2, [sp, #24]
 80086e8:	b209      	sxth	r1, r1
 80086ea:	b200      	sxth	r0, r0
 80086ec:	f7ff fdb8 	bl	8008260 <ILI9341_DrawPixel>
 80086f0:	e7dd      	b.n	80086ae <ILI9341_DrawCharAtXY+0x206>
      for (yy = 0; yy < h; ++yy)
 80086f2:	f10a 0201 	add.w	r2, sl, #1
 80086f6:	fa5f fa82 	uxtb.w	sl, r2
 80086fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086fc:	4592      	cmp	sl, r2
 80086fe:	d201      	bcs.n	8008704 <ILI9341_DrawCharAtXY+0x25c>
        for (xx = 0; xx < w; ++xx)
 8008700:	9d03      	ldr	r5, [sp, #12]
 8008702:	e7d9      	b.n	80086b8 <ILI9341_DrawCharAtXY+0x210>
      ILI9341_CSX_High();
 8008704:	2201      	movs	r2, #1
 8008706:	2102      	movs	r1, #2
 8008708:	4809      	ldr	r0, [pc, #36]	@ (8008730 <ILI9341_DrawCharAtXY+0x288>)
 800870a:	f7f8 fb8c 	bl	8000e26 <HAL_GPIO_WritePin>
      break;
 800870e:	e756      	b.n	80085be <ILI9341_DrawCharAtXY+0x116>
    return pGlyph->xAdvance;
 8008710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008712:	7918      	ldrb	r0, [r3, #4]
 8008714:	e75a      	b.n	80085cc <ILI9341_DrawCharAtXY+0x124>
    return 0;
 8008716:	2000      	movs	r0, #0
 8008718:	e758      	b.n	80085cc <ILI9341_DrawCharAtXY+0x124>
    return 0;
 800871a:	2000      	movs	r0, #0
 800871c:	e756      	b.n	80085cc <ILI9341_DrawCharAtXY+0x124>
 800871e:	bf00      	nop
 8008720:	200109d4 	.word	0x200109d4
 8008724:	20000030 	.word	0x20000030
 8008728:	20000031 	.word	0x20000031
 800872c:	200109d8 	.word	0x200109d8
 8008730:	40020800 	.word	0x40020800

08008734 <ILI9341_SetTextDrawMode>:

TextDrawMode_t ILI9341_SetTextDrawMode(TextDrawMode_t Value)
{
  TextDrawMode_t Result;

  Result = TextDrawMode;
 8008734:	4b02      	ldr	r3, [pc, #8]	@ (8008740 <ILI9341_SetTextDrawMode+0xc>)
 8008736:	781a      	ldrb	r2, [r3, #0]
  TextDrawMode = Value;
 8008738:	7018      	strb	r0, [r3, #0]
  return Result;
}
 800873a:	4610      	mov	r0, r2
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	20000031 	.word	0x20000031

08008744 <ILI9341_SetTextVerticalOrigin>:

TextVerticalOrigin_t ILI9341_SetTextVerticalOrigin(TextVerticalOrigin_t Value)
{
  TextVerticalOrigin_t Result;

  Result = TextVerticalOrigin;
 8008744:	4b02      	ldr	r3, [pc, #8]	@ (8008750 <ILI9341_SetTextVerticalOrigin+0xc>)
 8008746:	781a      	ldrb	r2, [r3, #0]
  TextVerticalOrigin = Value;
 8008748:	7018      	strb	r0, [r3, #0]
  return Result;
}
 800874a:	4610      	mov	r0, r2
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	20000030 	.word	0x20000030

08008754 <ILI9341_DrawTextAtXY>:
  uint16_t NumChars;
  uint8_t DX;
  
  pText = (uint8_t *) Text;

  if (!pText)
 8008754:	b360      	cbz	r0, 80087b0 <ILI9341_DrawTextAtXY+0x5c>
{
 8008756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800875a:	460d      	mov	r5, r1
 800875c:	4690      	mov	r8, r2
 800875e:	461c      	mov	r4, r3
 8008760:	4606      	mov	r6, r0
    return;

  NumChars = strlen(Text);
 8008762:	f7f7 fdcd 	bl	8000300 <strlen>
 8008766:	b287      	uxth	r7, r0

  switch (TextPosition)
 8008768:	2c02      	cmp	r4, #2
 800876a:	d003      	beq.n	8008774 <ILI9341_DrawTextAtXY+0x20>
 800876c:	2c03      	cmp	r4, #3
 800876e:	d009      	beq.n	8008784 <ILI9341_DrawTextAtXY+0x30>
{
 8008770:	2400      	movs	r4, #0
 8008772:	e019      	b.n	80087a8 <ILI9341_DrawTextAtXY+0x54>
  {
    case tpCentre:
      X -= ILI9341_GetTextWidth(Text) / 2;
 8008774:	4630      	mov	r0, r6
 8008776:	f7ff fe83 	bl	8008480 <ILI9341_GetTextWidth>
 800877a:	f3c0 034f 	ubfx	r3, r0, #1, #16
 800877e:	1aeb      	subs	r3, r5, r3
 8008780:	b29d      	uxth	r5, r3
      break;
 8008782:	e7f5      	b.n	8008770 <ILI9341_DrawTextAtXY+0x1c>
    case tpRight:
      X -= ILI9341_GetTextWidth(Text);
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff fe7b 	bl	8008480 <ILI9341_GetTextWidth>
 800878a:	1a28      	subs	r0, r5, r0
 800878c:	b285      	uxth	r5, r0
      break;
 800878e:	e7ef      	b.n	8008770 <ILI9341_DrawTextAtXY+0x1c>
  }

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
  {
    Ch = *pText;
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 8008790:	4b08      	ldr	r3, [pc, #32]	@ (80087b4 <ILI9341_DrawTextAtXY+0x60>)
 8008792:	881b      	ldrh	r3, [r3, #0]
 8008794:	4642      	mov	r2, r8
 8008796:	4629      	mov	r1, r5
 8008798:	f816 0b01 	ldrb.w	r0, [r6], #1
 800879c:	f7ff fe84 	bl	80084a8 <ILI9341_DrawCharAtXY>
    ++pText;
    X += DX;
 80087a0:	4428      	add	r0, r5
 80087a2:	b285      	uxth	r5, r0
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80087a4:	3401      	adds	r4, #1
 80087a6:	b2a4      	uxth	r4, r4
 80087a8:	42bc      	cmp	r4, r7
 80087aa:	d3f1      	bcc.n	8008790 <ILI9341_DrawTextAtXY+0x3c>
  }
}
 80087ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	20000032 	.word	0x20000032

080087b8 <IsCloseTo_f>:
//      => Enable global interrupt.
// => Requires USE_HAL_TIM_REGISTER_CALLBACKS symbol to be defined as 1 e.g. add "USE_HAL_TIM_REGISTER_CALLBACKS=1" to C compiler symbols in "Tool Settings".
///////////////////////////////////////////////////////////////////////////////

static uint8_t IsCloseTo_f(float ActualValue, float IntendedValue, float AllowedError)
{
 80087b8:	ee07 0a90 	vmov	s15, r0
 80087bc:	ee06 1a90 	vmov	s13, r1
 80087c0:	ee07 2a10 	vmov	s14, r2
  return fabs(ActualValue - IntendedValue) <= AllowedError;
 80087c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087c8:	eef0 7ae7 	vabs.f32	s15, s15
 80087cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 80087d4:	bf94      	ite	ls
 80087d6:	2001      	movls	r0, #1
 80087d8:	2000      	movhi	r0, #0
 80087da:	4770      	bx	lr

080087dc <PeriodElapsedCallback>:

///////////////////////////////////////////////////////////////////////////////

static void PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim == phTimer)
 80087dc:	4b09      	ldr	r3, [pc, #36]	@ (8008804 <PeriodElapsedCallback+0x28>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4283      	cmp	r3, r0
 80087e2:	d000      	beq.n	80087e6 <PeriodElapsedCallback+0xa>
      Decoder_State = stNone;
    }
    else if (Decoder_State == stReceiving)
      Decoder_State = stReceived;
  }
}
 80087e4:	4770      	bx	lr
    if (Decoder_State == stDone)
 80087e6:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <PeriodElapsedCallback+0x2c>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d005      	beq.n	80087fa <PeriodElapsedCallback+0x1e>
    else if (Decoder_State == stReceiving)
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d1f8      	bne.n	80087e4 <PeriodElapsedCallback+0x8>
      Decoder_State = stReceived;
 80087f2:	4b05      	ldr	r3, [pc, #20]	@ (8008808 <PeriodElapsedCallback+0x2c>)
 80087f4:	2202      	movs	r2, #2
 80087f6:	701a      	strb	r2, [r3, #0]
}
 80087f8:	e7f4      	b.n	80087e4 <PeriodElapsedCallback+0x8>
      Decoder_State = stNone;
 80087fa:	4b03      	ldr	r3, [pc, #12]	@ (8008808 <PeriodElapsedCallback+0x2c>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	200109ec 	.word	0x200109ec
 8008808:	200109e7 	.word	0x200109e7

0800880c <CaptureCallback>:

static void CaptureCallback(TIM_HandleTypeDef *htim)
{
  if (htim == phTimer)
 800880c:	4b32      	ldr	r3, [pc, #200]	@ (80088d8 <CaptureCallback+0xcc>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4283      	cmp	r3, r0
 8008812:	d000      	beq.n	8008816 <CaptureCallback+0xa>
 8008814:	4770      	bx	lr
  {
    if (Decoder_State == stNone)
 8008816:	4a31      	ldr	r2, [pc, #196]	@ (80088dc <CaptureCallback+0xd0>)
 8008818:	7812      	ldrb	r2, [r2, #0]
 800881a:	b972      	cbnz	r2, 800883a <CaptureCallback+0x2e>
    {
      Decoder_NumBits = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	4a30      	ldr	r2, [pc, #192]	@ (80088e0 <CaptureCallback+0xd4>)
 8008820:	6013      	str	r3, [r2, #0]
      Decoder_State = stReceiving;
 8008822:	2201      	movs	r2, #1
 8008824:	492d      	ldr	r1, [pc, #180]	@ (80088dc <CaptureCallback+0xd0>)
 8008826:	700a      	strb	r2, [r1, #0]
      Decoder_WasMidBit = 1;
 8008828:	492e      	ldr	r1, [pc, #184]	@ (80088e4 <CaptureCallback+0xd8>)
 800882a:	700a      	strb	r2, [r1, #0]
      Decoder_CurrentInputState = 0;
 800882c:	4a2e      	ldr	r2, [pc, #184]	@ (80088e8 <CaptureCallback+0xdc>)
 800882e:	7013      	strb	r3, [r2, #0]
      Decoder_Bits = 0;
 8008830:	4a2e      	ldr	r2, [pc, #184]	@ (80088ec <CaptureCallback+0xe0>)
 8008832:	6013      	str	r3, [r2, #0]
      Decoder_Error = 0;
 8008834:	4a2e      	ldr	r2, [pc, #184]	@ (80088f0 <CaptureCallback+0xe4>)
 8008836:	7013      	strb	r3, [r2, #0]
 8008838:	4770      	bx	lr
    }
    else if (Decoder_State == stReceiving)
 800883a:	2a01      	cmp	r2, #1
 800883c:	d1ea      	bne.n	8008814 <CaptureCallback+0x8>
{
 800883e:	b500      	push	{lr}
 8008840:	b083      	sub	sp, #12
    {
      if (Decoder_NumBits == Decoder_MaxNumBits)
 8008842:	4a27      	ldr	r2, [pc, #156]	@ (80088e0 <CaptureCallback+0xd4>)
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	2a20      	cmp	r2, #32
 8008848:	d10b      	bne.n	8008862 <CaptureCallback+0x56>
        Decoder_State = stDone;
 800884a:	4b24      	ldr	r3, [pc, #144]	@ (80088dc <CaptureCallback+0xd0>)
 800884c:	2203      	movs	r2, #3
 800884e:	701a      	strb	r2, [r3, #0]
          Decoder_Error = 1;
          Decoder_State = stReceived;
        }
      }

      Decoder_CurrentInputState = !Decoder_CurrentInputState;
 8008850:	4a25      	ldr	r2, [pc, #148]	@ (80088e8 <CaptureCallback+0xdc>)
 8008852:	7813      	ldrb	r3, [r2, #0]
 8008854:	fab3 f383 	clz	r3, r3
 8008858:	095b      	lsrs	r3, r3, #5
 800885a:	7013      	strb	r3, [r2, #0]
    }
  }
}
 800885c:	b003      	add	sp, #12
 800885e:	f85d fb04 	ldr.w	pc, [sp], #4
        uint8_t NumHalfCycles = (int)round(HAL_TIM_ReadCapturedValue(phTimer, TIM_CHANNEL_1) / 889.0f); // Assumes channel 1.
 8008862:	2100      	movs	r1, #0
 8008864:	4618      	mov	r0, r3
 8008866:	f7fc f907 	bl	8004a78 <HAL_TIM_ReadCapturedValue>
 800886a:	ee07 0a90 	vmov	s15, r0
 800886e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008872:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80088f4 <CaptureCallback+0xe8>
 8008876:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800887a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800887e:	feb8 7b47 	vrinta.f64	d7, d7
 8008882:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008886:	edcd 7a01 	vstr	s15, [sp, #4]
 800888a:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (Decoder_WasMidBit && (NumHalfCycles == 1))
 800888e:	4a15      	ldr	r2, [pc, #84]	@ (80088e4 <CaptureCallback+0xd8>)
 8008890:	7812      	ldrb	r2, [r2, #0]
 8008892:	b10a      	cbz	r2, 8008898 <CaptureCallback+0x8c>
 8008894:	2b01      	cmp	r3, #1
 8008896:	d00c      	beq.n	80088b2 <CaptureCallback+0xa6>
        else if ((Decoder_WasMidBit && (NumHalfCycles == 2)) || (!Decoder_WasMidBit && (NumHalfCycles == 1)))
 8008898:	b10a      	cbz	r2, 800889e <CaptureCallback+0x92>
 800889a:	2b02      	cmp	r3, #2
 800889c:	d00d      	beq.n	80088ba <CaptureCallback+0xae>
 800889e:	b90a      	cbnz	r2, 80088a4 <CaptureCallback+0x98>
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d00a      	beq.n	80088ba <CaptureCallback+0xae>
          Decoder_Error = 1;
 80088a4:	4b12      	ldr	r3, [pc, #72]	@ (80088f0 <CaptureCallback+0xe4>)
 80088a6:	2201      	movs	r2, #1
 80088a8:	701a      	strb	r2, [r3, #0]
          Decoder_State = stReceived;
 80088aa:	4b0c      	ldr	r3, [pc, #48]	@ (80088dc <CaptureCallback+0xd0>)
 80088ac:	2202      	movs	r2, #2
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	e7ce      	b.n	8008850 <CaptureCallback+0x44>
          Decoder_WasMidBit = 0;
 80088b2:	4b0c      	ldr	r3, [pc, #48]	@ (80088e4 <CaptureCallback+0xd8>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	701a      	strb	r2, [r3, #0]
 80088b8:	e7ca      	b.n	8008850 <CaptureCallback+0x44>
          Decoder_WasMidBit = 1;
 80088ba:	4b0a      	ldr	r3, [pc, #40]	@ (80088e4 <CaptureCallback+0xd8>)
 80088bc:	2201      	movs	r2, #1
 80088be:	701a      	strb	r2, [r3, #0]
          Decoder_Bits = (Decoder_Bits << 1) | Decoder_CurrentInputState;
 80088c0:	4a0a      	ldr	r2, [pc, #40]	@ (80088ec <CaptureCallback+0xe0>)
 80088c2:	6811      	ldr	r1, [r2, #0]
 80088c4:	4b08      	ldr	r3, [pc, #32]	@ (80088e8 <CaptureCallback+0xdc>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80088cc:	6013      	str	r3, [r2, #0]
          ++Decoder_NumBits;
 80088ce:	4a04      	ldr	r2, [pc, #16]	@ (80088e0 <CaptureCallback+0xd4>)
 80088d0:	6813      	ldr	r3, [r2, #0]
 80088d2:	3301      	adds	r3, #1
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	e7bb      	b.n	8008850 <CaptureCallback+0x44>
 80088d8:	200109ec 	.word	0x200109ec
 80088dc:	200109e7 	.word	0x200109e7
 80088e0:	200109e8 	.word	0x200109e8
 80088e4:	200109e5 	.word	0x200109e5
 80088e8:	200109e6 	.word	0x200109e6
 80088ec:	200109e0 	.word	0x200109e0
 80088f0:	200109e4 	.word	0x200109e4
 80088f4:	445e4000 	.word	0x445e4000

080088f8 <JSB_IR_RC5_Initialize>:

void JSB_IR_RC5_Initialize(TIM_HandleTypeDef *i_phTimer)
{
 80088f8:	b510      	push	{r4, lr}
  phTimer = i_phTimer;
 80088fa:	4c22      	ldr	r4, [pc, #136]	@ (8008984 <JSB_IR_RC5_Initialize+0x8c>)
 80088fc:	6020      	str	r0, [r4, #0]

  // Check that the timer frequency is set correctly:
  float TimerCountFrequency = (float)GetAPB1TimerClockFrequency() / ((float)phTimer->Instance->PSC + 1.0f);
 80088fe:	f001 f8f9 	bl	8009af4 <GetAPB1TimerClockFrequency>
 8008902:	ee07 0a10 	vmov	s14, r0
 8008906:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee87 6a27 	vdiv.f32	s12, s14, s15
  if (!IsCloseTo_f(TimerCountFrequency / 1E6, 1.0f, 0.01f))
 8008922:	4a19      	ldr	r2, [pc, #100]	@ (8008988 <JSB_IR_RC5_Initialize+0x90>)
 8008924:	ee16 1a90 	vmov	r1, s13
 8008928:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800898c <JSB_IR_RC5_Initialize+0x94>
 800892c:	eec6 7a27 	vdiv.f32	s15, s12, s15
 8008930:	ee17 0a90 	vmov	r0, s15
 8008934:	f7ff ff40 	bl	80087b8 <IsCloseTo_f>
 8008938:	b1d8      	cbz	r0, 8008972 <JSB_IR_RC5_Initialize+0x7a>
    Error_Handler();

  if (HAL_TIM_Base_Start_IT(phTimer))
 800893a:	4b12      	ldr	r3, [pc, #72]	@ (8008984 <JSB_IR_RC5_Initialize+0x8c>)
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	f7fb ffab 	bl	8004898 <HAL_TIM_Base_Start_IT>
 8008942:	b9c8      	cbnz	r0, 8008978 <JSB_IR_RC5_Initialize+0x80>
    Error_Handler();
  if (HAL_TIM_IC_Start_IT(phTimer, TIM_CHANNEL_1)) // Assumes channel 1.
 8008944:	2100      	movs	r1, #0
 8008946:	4b0f      	ldr	r3, [pc, #60]	@ (8008984 <JSB_IR_RC5_Initialize+0x8c>)
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f7fc fc73 	bl	8005234 <HAL_TIM_IC_Start_IT>
 800894e:	b9b0      	cbnz	r0, 800897e <JSB_IR_RC5_Initialize+0x86>
    Error_Handler();

  __HAL_TIM_URS_ENABLE(phTimer); // Prevent HAL_TIM_PeriodElapsedCallback() being called when counter is reset by input.
 8008950:	4c0c      	ldr	r4, [pc, #48]	@ (8008984 <JSB_IR_RC5_Initialize+0x8c>)
 8008952:	6820      	ldr	r0, [r4, #0]
 8008954:	6802      	ldr	r2, [r0, #0]
 8008956:	6813      	ldr	r3, [r2, #0]
 8008958:	f043 0304 	orr.w	r3, r3, #4
 800895c:	6013      	str	r3, [r2, #0]

  HAL_TIM_RegisterCallback(phTimer, HAL_TIM_PERIOD_ELAPSED_CB_ID, &PeriodElapsedCallback);
 800895e:	4a0c      	ldr	r2, [pc, #48]	@ (8008990 <JSB_IR_RC5_Initialize+0x98>)
 8008960:	210e      	movs	r1, #14
 8008962:	f7fc f8a2 	bl	8004aaa <HAL_TIM_RegisterCallback>
  HAL_TIM_RegisterCallback(phTimer, HAL_TIM_IC_CAPTURE_CB_ID, &CaptureCallback);
 8008966:	4a0b      	ldr	r2, [pc, #44]	@ (8008994 <JSB_IR_RC5_Initialize+0x9c>)
 8008968:	2112      	movs	r1, #18
 800896a:	6820      	ldr	r0, [r4, #0]
 800896c:	f7fc f89d 	bl	8004aaa <HAL_TIM_RegisterCallback>
}
 8008970:	bd10      	pop	{r4, pc}
    Error_Handler();
 8008972:	f005 fb8f 	bl	800e094 <Error_Handler>
 8008976:	e7e0      	b.n	800893a <JSB_IR_RC5_Initialize+0x42>
    Error_Handler();
 8008978:	f005 fb8c 	bl	800e094 <Error_Handler>
 800897c:	e7e2      	b.n	8008944 <JSB_IR_RC5_Initialize+0x4c>
    Error_Handler();
 800897e:	f005 fb89 	bl	800e094 <Error_Handler>
 8008982:	e7e5      	b.n	8008950 <JSB_IR_RC5_Initialize+0x58>
 8008984:	200109ec 	.word	0x200109ec
 8008988:	3c23d70a 	.word	0x3c23d70a
 800898c:	49742400 	.word	0x49742400
 8008990:	080087dd 	.word	0x080087dd
 8008994:	0800880d 	.word	0x0800880d

08008998 <JSB_IR_RC5_GetIfAvailable>:

uint8_t JSB_IR_RC5_GetIfAvailable(uint8_t *o_Address, uint8_t *o_Command, uint8_t *o_Toggle, uint8_t *o_Error)
{
 8008998:	b410      	push	{r4}
  if (Decoder_State != stReceived)
 800899a:	4c0e      	ldr	r4, [pc, #56]	@ (80089d4 <JSB_IR_RC5_GetIfAvailable+0x3c>)
 800899c:	7824      	ldrb	r4, [r4, #0]
 800899e:	2c02      	cmp	r4, #2
 80089a0:	d115      	bne.n	80089ce <JSB_IR_RC5_GetIfAvailable+0x36>
    return 0;

  *o_Address = (Decoder_Bits >> 6) & 0x1F;
 80089a2:	4c0d      	ldr	r4, [pc, #52]	@ (80089d8 <JSB_IR_RC5_GetIfAvailable+0x40>)
 80089a4:	6824      	ldr	r4, [r4, #0]
 80089a6:	f3c4 1c84 	ubfx	ip, r4, #6, #5
 80089aa:	f880 c000 	strb.w	ip, [r0]
  *o_Command = Decoder_Bits & 0x3F;
 80089ae:	f004 003f 	and.w	r0, r4, #63	@ 0x3f
 80089b2:	7008      	strb	r0, [r1, #0]
  *o_Toggle = (Decoder_Bits >> 11) & 0x01;
 80089b4:	f3c4 24c0 	ubfx	r4, r4, #11, #1
 80089b8:	7014      	strb	r4, [r2, #0]
  *o_Error = Decoder_Error;
 80089ba:	4a08      	ldr	r2, [pc, #32]	@ (80089dc <JSB_IR_RC5_GetIfAvailable+0x44>)
 80089bc:	7812      	ldrb	r2, [r2, #0]
 80089be:	701a      	strb	r2, [r3, #0]
  Decoder_State = stDone;
 80089c0:	4b04      	ldr	r3, [pc, #16]	@ (80089d4 <JSB_IR_RC5_GetIfAvailable+0x3c>)
 80089c2:	2203      	movs	r2, #3
 80089c4:	701a      	strb	r2, [r3, #0]
  return 1;
 80089c6:	2001      	movs	r0, #1
}
 80089c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089cc:	4770      	bx	lr
    return 0;
 80089ce:	2000      	movs	r0, #0
 80089d0:	e7fa      	b.n	80089c8 <JSB_IR_RC5_GetIfAvailable+0x30>
 80089d2:	bf00      	nop
 80089d4:	200109e7 	.word	0x200109e7
 80089d8:	200109e0 	.word	0x200109e0
 80089dc:	200109e4 	.word	0x200109e4

080089e0 <CaptureCallback>:
// static uint16_t AudioInput_MeasuredSampleRate_DeltaCount = 0;
static uint32_t AudioInput_MeasuredSampleRate_FrameCounter = 0;

static void CaptureCallback(TIM_HandleTypeDef *htim)
{
  ++AudioInput_MeasuredSampleRate_FrameCounter;
 80089e0:	4a02      	ldr	r2, [pc, #8]	@ (80089ec <CaptureCallback+0xc>)
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	3301      	adds	r3, #1
 80089e6:	6013      	str	r3, [r2, #0]

//  uint16_t AudioInput_MeasuredSampleRate_Count;
//  AudioInput_MeasuredSampleRate_Count = __HAL_TIM_GetCounter(htim);
//  AudioInput_MeasuredSampleRate_DeltaCount = AudioInput_MeasuredSampleRate_Count - AudioInput_MeasuredSampleRate_PreviousCount;
//  AudioInput_MeasuredSampleRate_PreviousCount = AudioInput_MeasuredSampleRate_Count;
}
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	20010a00 	.word	0x20010a00

080089f0 <InitializeResamplingVariables>:
  return fabs((SampleRateInQuestion / ReferenceSampleRate) - 1.0f) <= (InputSampleFrequencyCaptureHalfRangePPM / 1E6);
}

static void InitializeResamplingVariables()
{
  BufferReadPositionInitialized = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	4a08      	ldr	r2, [pc, #32]	@ (8008a14 <InitializeResamplingVariables+0x24>)
 80089f4:	7013      	strb	r3, [r2, #0]
  BufferReadPosition = 0.0f;
 80089f6:	2200      	movs	r2, #0
 80089f8:	4907      	ldr	r1, [pc, #28]	@ (8008a18 <InitializeResamplingVariables+0x28>)
 80089fa:	600a      	str	r2, [r1, #0]
  IntegralOfNormalizedError = 0.0f;
 80089fc:	4907      	ldr	r1, [pc, #28]	@ (8008a1c <InitializeResamplingVariables+0x2c>)
 80089fe:	600a      	str	r2, [r1, #0]
  PreviousNormalizedError = 0.0f;
 8008a00:	4907      	ldr	r1, [pc, #28]	@ (8008a20 <InitializeResamplingVariables+0x30>)
 8008a02:	600a      	str	r2, [r1, #0]
  InputSampleRateHistory_NumValues = 0;
 8008a04:	4a07      	ldr	r2, [pc, #28]	@ (8008a24 <InitializeResamplingVariables+0x34>)
 8008a06:	6013      	str	r3, [r2, #0]
  NumConsecutiveInputBufferReadPointerInRange = 0;
 8008a08:	4a07      	ldr	r2, [pc, #28]	@ (8008a28 <InitializeResamplingVariables+0x38>)
 8008a0a:	6013      	str	r3, [r2, #0]
  WasLocked = 0;
 8008a0c:	4a07      	ldr	r2, [pc, #28]	@ (8008a2c <InitializeResamplingVariables+0x3c>)
 8008a0e:	7013      	strb	r3, [r2, #0]
}
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	2001321c 	.word	0x2001321c
 8008a18:	20013224 	.word	0x20013224
 8008a1c:	200109f8 	.word	0x200109f8
 8008a20:	200109f4 	.word	0x200109f4
 8008a24:	200109fc 	.word	0x200109fc
 8008a28:	20013218 	.word	0x20013218
 8008a2c:	20013216 	.word	0x20013216

08008a30 <Calculate_SPDIFRX_BufferSampleStepSize>:
{
 8008a30:	b510      	push	{r4, lr}
 8008a32:	ed2d 8b02 	vpush	{d8}
 8008a36:	4604      	mov	r4, r0
  SPDIFRX_BufferWriteIndex = SPDIFRX_Buffer_NumSamples - 0.5f * hspdif.hdmaDrRx->Instance->NDTR; // NB: DMA counts in channel samples not LR samples. It also counts backward. It also starts at the maximum value, not one less. However, it is zero before it becomes active [PJB].
 8008a38:	4b4d      	ldr	r3, [pc, #308]	@ (8008b70 <Calculate_SPDIFRX_BufferSampleStepSize+0x140>)
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008a42:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008a46:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a4e:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8008b74 <Calculate_SPDIFRX_BufferSampleStepSize+0x144>
 8008a52:	ee37 8ac7 	vsub.f32	s16, s15, s14
  if (!BufferReadPositionInitialized)
 8008a56:	4b48      	ldr	r3, [pc, #288]	@ (8008b78 <Calculate_SPDIFRX_BufferSampleStepSize+0x148>)
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d05c      	beq.n	8008b18 <Calculate_SPDIFRX_BufferSampleStepSize+0xe8>
  NumSamplesReadIsBehindWrite = SPDIFRX_BufferWriteIndex - BufferReadPosition;
 8008a5e:	4b47      	ldr	r3, [pc, #284]	@ (8008b7c <Calculate_SPDIFRX_BufferSampleStepSize+0x14c>)
 8008a60:	edd3 7a00 	vldr	s15, [r3]
 8008a64:	ee78 7a67 	vsub.f32	s15, s16, s15
  if (NumSamplesReadIsBehindWrite < 0) NumSamplesReadIsBehindWrite += SPDIFRX_Buffer_NumSamples;
 8008a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a70:	d469      	bmi.n	8008b46 <Calculate_SPDIFRX_BufferSampleStepSize+0x116>
  ActualReadLagProportion = (float)NumSamplesReadIsBehindWrite / (float)SPDIFRX_Buffer_NumSamples;
 8008a72:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8008b74 <Calculate_SPDIFRX_BufferSampleStepSize+0x144>
 8008a76:	ee87 8a87 	vdiv.f32	s16, s15, s14
  float UnclampedNormalizedError = (1.0f / (1.0f - TargetReadLagProportion)) * (ActualReadLagProportion - TargetReadLagProportion);
 8008a7a:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
 8008a7e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008a82:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8008a86:	ee28 8a27 	vmul.f32	s16, s16, s15
  float ClampedNormalizedError = Clamp_float(UnclampedNormalizedError, -1.0f, 1.0f);
 8008a8a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a8e:	493c      	ldr	r1, [pc, #240]	@ (8008b80 <Calculate_SPDIFRX_BufferSampleStepSize+0x150>)
 8008a90:	ee18 0a10 	vmov	r0, s16
 8008a94:	f7fe ffb7 	bl	8007a06 <Clamp_float>
 8008a98:	ee07 0a10 	vmov	s14, r0
  *o_InputBufferReadPointerInRange = ((UnclampedNormalizedError >= -1.0f) || (UnclampedNormalizedError <= 1.0f));
 8008a9c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8008aa0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa8:	db52      	blt.n	8008b50 <Calculate_SPDIFRX_BufferSampleStepSize+0x120>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	7023      	strb	r3, [r4, #0]
  IntegralOfNormalizedError = 0.95f * IntegralOfNormalizedError + ClampedNormalizedError;
 8008aae:	4b35      	ldr	r3, [pc, #212]	@ (8008b84 <Calculate_SPDIFRX_BufferSampleStepSize+0x154>)
 8008ab0:	ed93 5a00 	vldr	s10, [r3]
 8008ab4:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8008b88 <Calculate_SPDIFRX_BufferSampleStepSize+0x158>
 8008ab8:	ee25 5a27 	vmul.f32	s10, s10, s15
 8008abc:	ee35 5a07 	vadd.f32	s10, s10, s14
 8008ac0:	ed83 5a00 	vstr	s10, [r3]
  SPDIFRX_BufferSampleStepSize = ((float)InputSampleRate / (float)OutputSampleRate) * (1.0f + Kp * ClampedNormalizedError + 2E-4 * IntegralOfNormalizedError);
 8008ac4:	4b31      	ldr	r3, [pc, #196]	@ (8008b8c <Calculate_SPDIFRX_BufferSampleStepSize+0x15c>)
 8008ac6:	edd3 6a00 	vldr	s13, [r3]
 8008aca:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008ace:	4b30      	ldr	r3, [pc, #192]	@ (8008b90 <Calculate_SPDIFRX_BufferSampleStepSize+0x160>)
 8008ad0:	edd3 7a00 	vldr	s15, [r3]
 8008ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008adc:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8008ae0:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8008b94 <Calculate_SPDIFRX_BufferSampleStepSize+0x164>
 8008ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ae8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008af0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008af4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8008af8:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 8008b68 <Calculate_SPDIFRX_BufferSampleStepSize+0x138>
 8008afc:	ee05 7b04 	vmla.f64	d7, d5, d4
 8008b00:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008b04:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8008b08:	4b23      	ldr	r3, [pc, #140]	@ (8008b98 <Calculate_SPDIFRX_BufferSampleStepSize+0x168>)
 8008b0a:	ed83 7a00 	vstr	s14, [r3]
}
 8008b0e:	ee17 0a10 	vmov	r0, s14
 8008b12:	ecbd 8b02 	vpop	{d8}
 8008b16:	bd10      	pop	{r4, pc}
    BufferReadPosition = Wrap_int(SPDIFRX_BufferWriteIndex - TargetReadLagProportion * SPDIFRX_Buffer_NumSamples, SPDIFRX_Buffer_NumSamples);
 8008b18:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8008b9c <Calculate_SPDIFRX_BufferSampleStepSize+0x16c>
 8008b1c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008b20:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8008b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b28:	ee17 0a90 	vmov	r0, s15
 8008b2c:	f7fe ff83 	bl	8007a36 <Wrap_int>
 8008b30:	ee07 0a90 	vmov	s15, r0
 8008b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b38:	4b10      	ldr	r3, [pc, #64]	@ (8008b7c <Calculate_SPDIFRX_BufferSampleStepSize+0x14c>)
 8008b3a:	edc3 7a00 	vstr	s15, [r3]
    BufferReadPositionInitialized = 1;
 8008b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b78 <Calculate_SPDIFRX_BufferSampleStepSize+0x148>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	701a      	strb	r2, [r3, #0]
 8008b44:	e78b      	b.n	8008a5e <Calculate_SPDIFRX_BufferSampleStepSize+0x2e>
  if (NumSamplesReadIsBehindWrite < 0) NumSamplesReadIsBehindWrite += SPDIFRX_Buffer_NumSamples;
 8008b46:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8008b74 <Calculate_SPDIFRX_BufferSampleStepSize+0x144>
 8008b4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b4e:	e790      	b.n	8008a72 <Calculate_SPDIFRX_BufferSampleStepSize+0x42>
  *o_InputBufferReadPointerInRange = ((UnclampedNormalizedError >= -1.0f) || (UnclampedNormalizedError <= 1.0f));
 8008b50:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008b54:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5c:	d901      	bls.n	8008b62 <Calculate_SPDIFRX_BufferSampleStepSize+0x132>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e7a4      	b.n	8008aac <Calculate_SPDIFRX_BufferSampleStepSize+0x7c>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e7a2      	b.n	8008aac <Calculate_SPDIFRX_BufferSampleStepSize+0x7c>
 8008b66:	bf00      	nop
 8008b68:	eb1c432d 	.word	0xeb1c432d
 8008b6c:	3f2a36e2 	.word	0x3f2a36e2
 8008b70:	20017670 	.word	0x20017670
 8008b74:	44200000 	.word	0x44200000
 8008b78:	2001321c 	.word	0x2001321c
 8008b7c:	20013224 	.word	0x20013224
 8008b80:	bf800000 	.word	0xbf800000
 8008b84:	200109f8 	.word	0x200109f8
 8008b88:	3f733333 	.word	0x3f733333
 8008b8c:	20010a0c 	.word	0x20010a0c
 8008b90:	20010a08 	.word	0x20010a08
 8008b94:	3a83126f 	.word	0x3a83126f
 8008b98:	20013220 	.word	0x20013220
 8008b9c:	43f00000 	.word	0x43f00000

08008ba0 <HAL_SPDIFRX_ErrorCallback>:
  SPDIFRX_ErrorCallbackCalled = 1;
 8008ba0:	4b01      	ldr	r3, [pc, #4]	@ (8008ba8 <HAL_SPDIFRX_ErrorCallback+0x8>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	701a      	strb	r2, [r3, #0]
}
 8008ba6:	4770      	bx	lr
 8008ba8:	20010a10 	.word	0x20010a10

08008bac <SPDIFRX_GetInputSampleRate>:
}
 8008bac:	4b01      	ldr	r3, [pc, #4]	@ (8008bb4 <SPDIFRX_GetInputSampleRate+0x8>)
 8008bae:	6818      	ldr	r0, [r3, #0]
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	20010a0c 	.word	0x20010a0c

08008bb8 <SPDIFRX_GetNumErrors>:
  *pNumTransitionErrors = SPDIFRX_NumTransitionErrors;
 8008bb8:	4b04      	ldr	r3, [pc, #16]	@ (8008bcc <SPDIFRX_GetNumErrors+0x14>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	7003      	strb	r3, [r0, #0]
  *pNumSyncErrors = SPDIFRX_NumSyncErrors;
 8008bbe:	4b04      	ldr	r3, [pc, #16]	@ (8008bd0 <SPDIFRX_GetNumErrors+0x18>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	700b      	strb	r3, [r1, #0]
  *pNumFrameErrors = SPDIFRX_NumFrameErrors;
 8008bc4:	4b03      	ldr	r3, [pc, #12]	@ (8008bd4 <SPDIFRX_GetNumErrors+0x1c>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	7013      	strb	r3, [r2, #0]
}
 8008bca:	4770      	bx	lr
 8008bcc:	200109f2 	.word	0x200109f2
 8008bd0:	200109f1 	.word	0x200109f1
 8008bd4:	200109f0 	.word	0x200109f0

08008bd8 <SPDIFRX_CopySamplesToGivenBuffer>:
  if (DisableInterruptHandler)
 8008bd8:	4bb3      	ldr	r3, [pc, #716]	@ (8008ea8 <SPDIFRX_CopySamplesToGivenBuffer+0x2d0>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f040 8162 	bne.w	8008ea6 <SPDIFRX_CopySamplesToGivenBuffer+0x2ce>
{
 8008be2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be6:	ed2d 8b04 	vpush	{d8-d9}
 8008bea:	b094      	sub	sp, #80	@ 0x50
 8008bec:	4605      	mov	r5, r0
 8008bee:	460e      	mov	r6, r1
  uint8_t SPDIFRX_State = hspdif.Instance->CR & 0x03;
 8008bf0:	4bae      	ldr	r3, [pc, #696]	@ (8008eac <SPDIFRX_CopySamplesToGivenBuffer+0x2d4>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	f002 0203 	and.w	r2, r2, #3
  if ((SPDIFRX_State != 0x03) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_TERR) != RESET) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_SERR) != RESET) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_FERR) != RESET))
 8008bfa:	2a03      	cmp	r2, #3
 8008bfc:	d10b      	bne.n	8008c16 <SPDIFRX_CopySamplesToGivenBuffer+0x3e>
 8008bfe:	689a      	ldr	r2, [r3, #8]
 8008c00:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008c04:	d107      	bne.n	8008c16 <SPDIFRX_CopySamplesToGivenBuffer+0x3e>
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8008c0c:	d103      	bne.n	8008c16 <SPDIFRX_CopySamplesToGivenBuffer+0x3e>
 8008c0e:	689c      	ldr	r4, [r3, #8]
 8008c10:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8008c14:	d02d      	beq.n	8008c72 <SPDIFRX_CopySamplesToGivenBuffer+0x9a>
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_TERR))
 8008c16:	689a      	ldr	r2, [r3, #8]
 8008c18:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008c1c:	d003      	beq.n	8008c26 <SPDIFRX_CopySamplesToGivenBuffer+0x4e>
      ++SPDIFRX_NumTransitionErrors;
 8008c1e:	49a4      	ldr	r1, [pc, #656]	@ (8008eb0 <SPDIFRX_CopySamplesToGivenBuffer+0x2d8>)
 8008c20:	780a      	ldrb	r2, [r1, #0]
 8008c22:	3201      	adds	r2, #1
 8008c24:	700a      	strb	r2, [r1, #0]
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_SERR))
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8008c2c:	d003      	beq.n	8008c36 <SPDIFRX_CopySamplesToGivenBuffer+0x5e>
      ++SPDIFRX_NumSyncErrors;
 8008c2e:	49a1      	ldr	r1, [pc, #644]	@ (8008eb4 <SPDIFRX_CopySamplesToGivenBuffer+0x2dc>)
 8008c30:	780a      	ldrb	r2, [r1, #0]
 8008c32:	3201      	adds	r2, #1
 8008c34:	700a      	strb	r2, [r1, #0]
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_FERR))
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8008c3c:	d003      	beq.n	8008c46 <SPDIFRX_CopySamplesToGivenBuffer+0x6e>
      ++SPDIFRX_NumFrameErrors;
 8008c3e:	499e      	ldr	r1, [pc, #632]	@ (8008eb8 <SPDIFRX_CopySamplesToGivenBuffer+0x2e0>)
 8008c40:	780a      	ldrb	r2, [r1, #0]
 8008c42:	3201      	adds	r2, #1
 8008c44:	700a      	strb	r2, [r1, #0]
    ReceiveErrorOccurred = 1;
 8008c46:	2001      	movs	r0, #1
 8008c48:	4a9c      	ldr	r2, [pc, #624]	@ (8008ebc <SPDIFRX_CopySamplesToGivenBuffer+0x2e4>)
 8008c4a:	7010      	strb	r0, [r2, #0]
    DisableInterruptHandler = 1;
 8008c4c:	4a96      	ldr	r2, [pc, #600]	@ (8008ea8 <SPDIFRX_CopySamplesToGivenBuffer+0x2d0>)
 8008c4e:	7010      	strb	r0, [r2, #0]
    __HAL_SPDIFRX_IDLE(&hspdif);
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	f022 0203 	bic.w	r2, r2, #3
 8008c56:	601a      	str	r2, [r3, #0]
    SPDIFRX_MuteOutput_Callback(1); //!!! May need to sort out Tick priorities and being called on main thread and in interrupt etc.
 8008c58:	f003 f986 	bl	800bf68 <SPDIFRX_MuteOutput_Callback>
    SPDIFRX_Locked_Callback(0);
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	f002 fb5b 	bl	800b318 <SPDIFRX_Locked_Callback>
    WasLocked = 0;
 8008c62:	4b97      	ldr	r3, [pc, #604]	@ (8008ec0 <SPDIFRX_CopySamplesToGivenBuffer+0x2e8>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	701a      	strb	r2, [r3, #0]
}
 8008c68:	b014      	add	sp, #80	@ 0x50
 8008c6a:	ecbd 8b04 	vpop	{d8-d9}
 8008c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  memcpy(SPDIFRX_SamplesSnapShot, SPDIFRX_IncomingSamples, sizeof(SPDIFRX_SamplesSnapShot));
 8008c72:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008c76:	4993      	ldr	r1, [pc, #588]	@ (8008ec4 <SPDIFRX_CopySamplesToGivenBuffer+0x2ec>)
 8008c78:	4893      	ldr	r0, [pc, #588]	@ (8008ec8 <SPDIFRX_CopySamplesToGivenBuffer+0x2f0>)
 8008c7a:	f007 f962 	bl	800ff42 <memcpy>
  SPDIFRX_BufferSampleStepSize = Calculate_SPDIFRX_BufferSampleStepSize(&InputBufferReadPointerInRange);
 8008c7e:	f10d 004f 	add.w	r0, sp, #79	@ 0x4f
 8008c82:	f7ff fed5 	bl	8008a30 <Calculate_SPDIFRX_BufferSampleStepSize>
 8008c86:	4b91      	ldr	r3, [pc, #580]	@ (8008ecc <SPDIFRX_CopySamplesToGivenBuffer+0x2f4>)
 8008c88:	6018      	str	r0, [r3, #0]
  if (InputBufferReadPointerInRange)
 8008c8a:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 8008c8e:	b9ab      	cbnz	r3, 8008cbc <SPDIFRX_CopySamplesToGivenBuffer+0xe4>
    NumConsecutiveInputBufferReadPointerInRange = 0;
 8008c90:	4b8f      	ldr	r3, [pc, #572]	@ (8008ed0 <SPDIFRX_CopySamplesToGivenBuffer+0x2f8>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
  IsLocked = NumConsecutiveInputBufferReadPointerInRange >= 20; //!!! Hardwired.
 8008c96:	4b8e      	ldr	r3, [pc, #568]	@ (8008ed0 <SPDIFRX_CopySamplesToGivenBuffer+0x2f8>)
 8008c98:	f8d3 8000 	ldr.w	r8, [r3]
 8008c9c:	f1b8 0f13 	cmp.w	r8, #19
 8008ca0:	bf94      	ite	ls
 8008ca2:	2700      	movls	r7, #0
 8008ca4:	2701      	movhi	r7, #1
  SPDIFRX_Locked_Callback(IsLocked);
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	f002 fb36 	bl	800b318 <SPDIFRX_Locked_Callback>
  if (IsLocked != WasLocked)
 8008cac:	4b84      	ldr	r3, [pc, #528]	@ (8008ec0 <SPDIFRX_CopySamplesToGivenBuffer+0x2e8>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	42bb      	cmp	r3, r7
 8008cb2:	d10b      	bne.n	8008ccc <SPDIFRX_CopySamplesToGivenBuffer+0xf4>
  if (AudioBufferHalf == abhSecondHalf)
 8008cb4:	2e02      	cmp	r6, #2
 8008cb6:	d013      	beq.n	8008ce0 <SPDIFRX_CopySamplesToGivenBuffer+0x108>
    SampleOffsetIndex = 0;
 8008cb8:	4626      	mov	r6, r4
  for(LocalSampleIndex = 0; LocalSampleIndex < SPDIFRX_Buffer_NumSamples / 2; ++LocalSampleIndex)
 8008cba:	e02c      	b.n	8008d16 <SPDIFRX_CopySamplesToGivenBuffer+0x13e>
    NumConsecutiveInputBufferReadPointerInRange = Min_int32(NumConsecutiveInputBufferReadPointerInRange + 1, 1000000);
 8008cbc:	4f84      	ldr	r7, [pc, #528]	@ (8008ed0 <SPDIFRX_CopySamplesToGivenBuffer+0x2f8>)
 8008cbe:	6838      	ldr	r0, [r7, #0]
 8008cc0:	4984      	ldr	r1, [pc, #528]	@ (8008ed4 <SPDIFRX_CopySamplesToGivenBuffer+0x2fc>)
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f7fe fe92 	bl	80079ec <Min_int32>
 8008cc8:	6038      	str	r0, [r7, #0]
 8008cca:	e7e4      	b.n	8008c96 <SPDIFRX_CopySamplesToGivenBuffer+0xbe>
    SPDIFRX_MuteOutput_Callback(!IsLocked);
 8008ccc:	f1b8 0f13 	cmp.w	r8, #19
 8008cd0:	bf8c      	ite	hi
 8008cd2:	2000      	movhi	r0, #0
 8008cd4:	2001      	movls	r0, #1
 8008cd6:	f003 f947 	bl	800bf68 <SPDIFRX_MuteOutput_Callback>
    WasLocked = IsLocked;
 8008cda:	4b79      	ldr	r3, [pc, #484]	@ (8008ec0 <SPDIFRX_CopySamplesToGivenBuffer+0x2e8>)
 8008cdc:	701f      	strb	r7, [r3, #0]
 8008cde:	e7e9      	b.n	8008cb4 <SPDIFRX_CopySamplesToGivenBuffer+0xdc>
    SampleOffsetIndex = SPDIFRX_Buffer_NumSamples / 2;
 8008ce0:	f44f 76a0 	mov.w	r6, #320	@ 0x140
 8008ce4:	e017      	b.n	8008d16 <SPDIFRX_CopySamplesToGivenBuffer+0x13e>
    TargetSample.Left = TargetSample.Left / 256;
 8008ce6:	f102 01ff 	add.w	r1, r2, #255	@ 0xff
 8008cea:	e0c2      	b.n	8008e72 <SPDIFRX_CopySamplesToGivenBuffer+0x29a>
    TargetSample.Right = TargetSample.Right / 256;
 8008cec:	f103 02ff 	add.w	r2, r3, #255	@ 0xff
 8008cf0:	e0c5      	b.n	8008e7e <SPDIFRX_CopySamplesToGivenBuffer+0x2a6>
      BufferReadPosition -= SPDIFRX_Buffer_NumSamples;
 8008cf2:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8008ed8 <SPDIFRX_CopySamplesToGivenBuffer+0x300>
 8008cf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008cfa:	4b78      	ldr	r3, [pc, #480]	@ (8008edc <SPDIFRX_CopySamplesToGivenBuffer+0x304>)
 8008cfc:	edc3 7a00 	vstr	s15, [r3]
    while (BufferReadPosition >= SPDIFRX_Buffer_NumSamples)
 8008d00:	4b76      	ldr	r3, [pc, #472]	@ (8008edc <SPDIFRX_CopySamplesToGivenBuffer+0x304>)
 8008d02:	edd3 7a00 	vldr	s15, [r3]
 8008d06:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8008ed8 <SPDIFRX_CopySamplesToGivenBuffer+0x300>
 8008d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d12:	daee      	bge.n	8008cf2 <SPDIFRX_CopySamplesToGivenBuffer+0x11a>
  for(LocalSampleIndex = 0; LocalSampleIndex < SPDIFRX_Buffer_NumSamples / 2; ++LocalSampleIndex)
 8008d14:	3401      	adds	r4, #1
 8008d16:	f5b4 7fa0 	cmp.w	r4, #320	@ 0x140
 8008d1a:	d2a5      	bcs.n	8008c68 <SPDIFRX_CopySamplesToGivenBuffer+0x90>
    GlobalSampleIndex = SampleOffsetIndex + LocalSampleIndex;
 8008d1c:	1937      	adds	r7, r6, r4
    BufferReadPosition_Fractional = modf(BufferReadPosition, &BufferReadPosition_Integral);
 8008d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8008edc <SPDIFRX_CopySamplesToGivenBuffer+0x304>)
 8008d20:	edd3 7a00 	vldr	s15, [r3]
 8008d24:	aa06      	add	r2, sp, #24
 8008d26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008d2a:	ec51 0b17 	vmov	r0, r1, d7
 8008d2e:	f007 f917 	bl	800ff60 <modf>
 8008d32:	ec41 0b19 	vmov	d9, r0, r1
    SourceSampleIndex0 = Wrap_int((int)(BufferReadPosition_Integral) - 1, SPDIFRX_Buffer_NumSamples);
 8008d36:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008d3a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008d3e:	ee17 0a90 	vmov	r0, s15
 8008d42:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8008d46:	3801      	subs	r0, #1
 8008d48:	f7fe fe75 	bl	8007a36 <Wrap_int>
 8008d4c:	4682      	mov	sl, r0
    SourceSampleIndex1 = Wrap_int(SourceSampleIndex0 + 1, SPDIFRX_Buffer_NumSamples);
 8008d4e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8008d52:	3001      	adds	r0, #1
 8008d54:	f7fe fe6f 	bl	8007a36 <Wrap_int>
 8008d58:	4681      	mov	r9, r0
    SourceSampleIndex2 = Wrap_int(SourceSampleIndex1 + 1, SPDIFRX_Buffer_NumSamples);
 8008d5a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f7fe fe69 	bl	8007a36 <Wrap_int>
 8008d64:	4680      	mov	r8, r0
    SourceSampleIndex3 = Wrap_int(SourceSampleIndex2 + 1, SPDIFRX_Buffer_NumSamples);
 8008d66:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	f7fe fe63 	bl	8007a36 <Wrap_int>
 8008d70:	4602      	mov	r2, r0
    SourceSample0 = SPDIFRX_SamplesSnapShot[SourceSampleIndex0];
 8008d72:	4b55      	ldr	r3, [pc, #340]	@ (8008ec8 <SPDIFRX_CopySamplesToGivenBuffer+0x2f0>)
 8008d74:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8008d78:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008d7c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008d80:	e88c 0003 	stmia.w	ip, {r0, r1}
    SourceSample1 = SPDIFRX_SamplesSnapShot[SourceSampleIndex1];
 8008d84:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8008d88:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008d8c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8008d90:	e88c 0003 	stmia.w	ip, {r0, r1}
    SourceSample2 = SPDIFRX_SamplesSnapShot[SourceSampleIndex2];
 8008d94:	f10d 0c34 	add.w	ip, sp, #52	@ 0x34
 8008d98:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008d9c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008da0:	e88c 0003 	stmia.w	ip, {r0, r1}
    SourceSample3 = SPDIFRX_SamplesSnapShot[SourceSampleIndex3];
 8008da4:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8008da8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008db0:	e88c 0003 	stmia.w	ip, {r0, r1}
    TargetSample.Left = CubicInterpolate(SourceSample0.Left, SourceSample1.Left, SourceSample2.Left, SourceSample3.Left, BufferReadPosition_Fractional);
 8008db4:	ed8d 9b04 	vstr	d9, [sp, #16]
 8008db8:	ee07 0a90 	vmov	s15, r0
 8008dbc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008dc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008dc4:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8008dc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008dcc:	ed8d 7b00 	vstr	d7, [sp]
 8008dd0:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8008dd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008dd8:	ec53 2b17 	vmov	r2, r3, d7
 8008ddc:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 8008de0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008de4:	ec51 0b17 	vmov	r0, r1, d7
 8008de8:	f7fe fe3d 	bl	8007a66 <CubicInterpolate>
 8008dec:	ec41 0b18 	vmov	d8, r0, r1
 8008df0:	eebd 8bc8 	vcvt.s32.f64	s16, d8
 8008df4:	ed8d 8a09 	vstr	s16, [sp, #36]	@ 0x24
    TargetSample.Right = CubicInterpolate(SourceSample0.Right, SourceSample1.Right, SourceSample2.Right, SourceSample3.Right, BufferReadPosition_Fractional);
 8008df8:	ed8d 9b04 	vstr	d9, [sp, #16]
 8008dfc:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8008e00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008e04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e08:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8008e0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008e10:	ed8d 7b00 	vstr	d7, [sp]
 8008e14:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8008e18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008e1c:	ec53 2b17 	vmov	r2, r3, d7
 8008e20:	eddd 7a12 	vldr	s15, [sp, #72]	@ 0x48
 8008e24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008e28:	ec51 0b17 	vmov	r0, r1, d7
 8008e2c:	f7fe fe1b 	bl	8007a66 <CubicInterpolate>
 8008e30:	ec41 0b17 	vmov	d7, r0, r1
 8008e34:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008e38:	ed8d 7a0a 	vstr	s14, [sp, #40]	@ 0x28
    TargetSample.Left *= SPDIFRX_TransferGain;
 8008e3c:	4b28      	ldr	r3, [pc, #160]	@ (8008ee0 <SPDIFRX_CopySamplesToGivenBuffer+0x308>)
 8008e3e:	edd3 7a00 	vldr	s15, [r3]
 8008e42:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8008e46:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008e4a:	eefd 6ac8 	vcvt.s32.f32	s13, s16
 8008e4e:	ee16 2a90 	vmov	r2, s13
 8008e52:	edcd 6a09 	vstr	s13, [sp, #36]	@ 0x24
    TargetSample.Right *= SPDIFRX_TransferGain;
 8008e56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e5e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8008e62:	ee17 3a90 	vmov	r3, s15
 8008e66:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
    TargetSample.Left = TargetSample.Left / 256;
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	2a00      	cmp	r2, #0
 8008e6e:	f6ff af3a 	blt.w	8008ce6 <SPDIFRX_CopySamplesToGivenBuffer+0x10e>
 8008e72:	1209      	asrs	r1, r1, #8
 8008e74:	9109      	str	r1, [sp, #36]	@ 0x24
    TargetSample.Right = TargetSample.Right / 256;
 8008e76:	461a      	mov	r2, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f6ff af37 	blt.w	8008cec <SPDIFRX_CopySamplesToGivenBuffer+0x114>
 8008e7e:	1212      	asrs	r2, r2, #8
 8008e80:	920a      	str	r2, [sp, #40]	@ 0x28
    pOutputBuffer[GlobalSampleIndex] = TargetSample;
 8008e82:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8008e86:	ab09      	add	r3, sp, #36	@ 0x24
 8008e88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008e8c:	e887 0003 	stmia.w	r7, {r0, r1}
    BufferReadPosition += SPDIFRX_BufferSampleStepSize;
 8008e90:	4b12      	ldr	r3, [pc, #72]	@ (8008edc <SPDIFRX_CopySamplesToGivenBuffer+0x304>)
 8008e92:	edd3 7a00 	vldr	s15, [r3]
 8008e96:	4a0d      	ldr	r2, [pc, #52]	@ (8008ecc <SPDIFRX_CopySamplesToGivenBuffer+0x2f4>)
 8008e98:	ed92 7a00 	vldr	s14, [r2]
 8008e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ea0:	edc3 7a00 	vstr	s15, [r3]
    while (BufferReadPosition >= SPDIFRX_Buffer_NumSamples)
 8008ea4:	e72c      	b.n	8008d00 <SPDIFRX_CopySamplesToGivenBuffer+0x128>
 8008ea6:	4770      	bx	lr
 8008ea8:	20013215 	.word	0x20013215
 8008eac:	20017670 	.word	0x20017670
 8008eb0:	200109f2 	.word	0x200109f2
 8008eb4:	200109f1 	.word	0x200109f1
 8008eb8:	200109f0 	.word	0x200109f0
 8008ebc:	20013214 	.word	0x20013214
 8008ec0:	20013216 	.word	0x20013216
 8008ec4:	20011e14 	.word	0x20011e14
 8008ec8:	20010a14 	.word	0x20010a14
 8008ecc:	20013220 	.word	0x20013220
 8008ed0:	20013218 	.word	0x20013218
 8008ed4:	000f4240 	.word	0x000f4240
 8008ed8:	44200000 	.word	0x44200000
 8008edc:	20013224 	.word	0x20013224
 8008ee0:	20000034 	.word	0x20000034

08008ee4 <MeasureInputSampleRate>:
{
 8008ee4:	b538      	push	{r3, r4, r5, lr}
  AudioInput_MeasuredSampleRate_FrameCounter = 0;
 8008ee6:	4d0e      	ldr	r5, [pc, #56]	@ (8008f20 <MeasureInputSampleRate+0x3c>)
 8008ee8:	2300      	movs	r3, #0
 8008eea:	602b      	str	r3, [r5, #0]
  uint32_t StartTick = HAL_GetTick();
 8008eec:	f7f7 fbbe 	bl	800066c <HAL_GetTick>
 8008ef0:	4604      	mov	r4, r0
  HAL_Delay(50);
 8008ef2:	2032      	movs	r0, #50	@ 0x32
 8008ef4:	f7f7 fbc0 	bl	8000678 <HAL_Delay>
  uint32_t EndTick = HAL_GetTick();
 8008ef8:	f7f7 fbb8 	bl	800066c <HAL_GetTick>
  return 1000.0f * AudioInput_MeasuredSampleRate_FrameCounter / (EndTick - StartTick);
 8008efc:	ed95 7a00 	vldr	s14, [r5]
 8008f00:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008f04:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8008f24 <MeasureInputSampleRate+0x40>
 8008f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f0c:	1b00      	subs	r0, r0, r4
 8008f0e:	ee07 0a90 	vmov	s15, r0
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8008f16:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008f1a:	ee17 0a90 	vmov	r0, s15
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20010a00 	.word	0x20010a00
 8008f24:	447a0000 	.word	0x447a0000

08008f28 <IsSampleRateInRange>:
{
 8008f28:	ee06 0a90 	vmov	s13, r0
 8008f2c:	ee07 1a90 	vmov	s15, r1
  return fabs((SampleRateInQuestion / ReferenceSampleRate) - 1.0f) <= (InputSampleFrequencyCaptureHalfRangePPM / 1E6);
 8008f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f34:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008f38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008f3c:	eeb0 7ac7 	vabs.f32	s14, s14
 8008f40:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008f44:	ed9f 6b04 	vldr	d6, [pc, #16]	@ 8008f58 <IsSampleRateInRange+0x30>
 8008f48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8008f50:	bf94      	ite	ls
 8008f52:	2001      	movls	r0, #1
 8008f54:	2000      	movhi	r0, #0
 8008f56:	4770      	bx	lr
 8008f58:	d2f1a9fc 	.word	0xd2f1a9fc
 8008f5c:	3f50624d 	.word	0x3f50624d

08008f60 <ClearBuffer>:

void ClearBuffer()
{
 8008f60:	b082      	sub	sp, #8
  AudioSample24_t ZeroSample={0,0};
 8008f62:	2200      	movs	r2, #0
 8008f64:	9200      	str	r2, [sp, #0]
 8008f66:	9201      	str	r2, [sp, #4]
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 8008f68:	e008      	b.n	8008f7c <ClearBuffer+0x1c>
    SPDIFRX_IncomingSamples[SampleIndex] = ZeroSample;
 8008f6a:	4b07      	ldr	r3, [pc, #28]	@ (8008f88 <ClearBuffer+0x28>)
 8008f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f70:	a902      	add	r1, sp, #8
 8008f72:	e911 0003 	ldmdb	r1, {r0, r1}
 8008f76:	e883 0003 	stmia.w	r3, {r0, r1}
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 8008f7a:	3201      	adds	r2, #1
 8008f7c:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 8008f80:	d3f3      	bcc.n	8008f6a <ClearBuffer+0xa>
}
 8008f82:	b002      	add	sp, #8
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	20011e14 	.word	0x20011e14

08008f8c <SPDIFRX_SelectInput>:

void SPDIFRX_SelectInput(uint32_t Value)
{
 8008f8c:	b508      	push	{r3, lr}
  uint32_t InputSelection = 0;

  switch(Value)
 8008f8e:	2803      	cmp	r0, #3
 8008f90:	d809      	bhi.n	8008fa6 <SPDIFRX_SelectInput+0x1a>
 8008f92:	e8df f000 	tbb	[pc, r0]
 8008f96:	0c0e      	.short	0x0c0e
 8008f98:	0502      	.short	0x0502
  {
    case 0: InputSelection = SPDIFRX_INPUT_IN0; break;
    case 1: InputSelection = SPDIFRX_INPUT_IN1; break;
    case 2: InputSelection = SPDIFRX_INPUT_IN2; break;
 8008f9a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008f9e:	e008      	b.n	8008fb2 <SPDIFRX_SelectInput+0x26>
    case 3: InputSelection = SPDIFRX_INPUT_IN3; break;
 8008fa0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8008fa4:	e005      	b.n	8008fb2 <SPDIFRX_SelectInput+0x26>

    default: Error_Handler();
 8008fa6:	f005 f875 	bl	800e094 <Error_Handler>
  uint32_t InputSelection = 0;
 8008faa:	2000      	movs	r0, #0
 8008fac:	e001      	b.n	8008fb2 <SPDIFRX_SelectInput+0x26>
    case 1: InputSelection = SPDIFRX_INPUT_IN1; break;
 8008fae:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  }

  hspdif.Instance->CR = (hspdif.Instance->CR & ~SPDIFRX_INPUT_IN3) | InputSelection;
 8008fb2:	4b04      	ldr	r3, [pc, #16]	@ (8008fc4 <SPDIFRX_SelectInput+0x38>)
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	6813      	ldr	r3, [r2, #0]
 8008fb8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8008fbc:	4303      	orrs	r3, r0
 8008fbe:	6013      	str	r3, [r2, #0]
}
 8008fc0:	bd08      	pop	{r3, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20017670 	.word	0x20017670

08008fc8 <SPDIFRX_IsStarted>:

uint8_t SPDIFRX_IsStarted()
{
  return Started;
}
 8008fc8:	4b01      	ldr	r3, [pc, #4]	@ (8008fd0 <SPDIFRX_IsStarted+0x8>)
 8008fca:	7818      	ldrb	r0, [r3, #0]
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	20013228 	.word	0x20013228

08008fd4 <SPDIFRX_Stop>:

  return 1;
}

void SPDIFRX_Stop()
{
 8008fd4:	b510      	push	{r4, lr}
  Started = 0;
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800900c <SPDIFRX_Stop+0x38>)
 8008fda:	7018      	strb	r0, [r3, #0]

  DisableInterruptHandler = 1;
 8008fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8009010 <SPDIFRX_Stop+0x3c>)
 8008fde:	2201      	movs	r2, #1
 8008fe0:	701a      	strb	r2, [r3, #0]
  SPDIFRX_Locked_Callback(0);
 8008fe2:	f002 f999 	bl	800b318 <SPDIFRX_Locked_Callback>
  SPDIFRX_ClearOutputBuffer();
 8008fe6:	f002 ff53 	bl	800be90 <SPDIFRX_ClearOutputBuffer>
  __HAL_SPDIFRX_IDLE(&hspdif);
 8008fea:	4c0a      	ldr	r4, [pc, #40]	@ (8009014 <SPDIFRX_Stop+0x40>)
 8008fec:	6822      	ldr	r2, [r4, #0]
 8008fee:	6813      	ldr	r3, [r2, #0]
 8008ff0:	f023 0303 	bic.w	r3, r3, #3
 8008ff4:	6013      	str	r3, [r2, #0]
  ClearBuffer();
 8008ff6:	f7ff ffb3 	bl	8008f60 <ClearBuffer>

  // SPDIFRX_MuteOutput_Callback(1); !!!Clashes with call from interrupt handler:

  // Reset SPDIFRX.
  EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort();
 8008ffa:	f7fa fc61 	bl	80038c0 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort>
  EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR();
 8008ffe:	f7fa fc60 	bl	80038c2 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR>
  HAL_SPDIFRX_DMAStop(&hspdif);
 8009002:	4620      	mov	r0, r4
 8009004:	f7fa fc5e 	bl	80038c4 <HAL_SPDIFRX_DMAStop>
}
 8009008:	bd10      	pop	{r4, pc}
 800900a:	bf00      	nop
 800900c:	20013228 	.word	0x20013228
 8009010:	20013215 	.word	0x20013215
 8009014:	20017670 	.word	0x20017670

08009018 <SPDIFRX_Start>:
{
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	460c      	mov	r4, r1
 800901c:	4615      	mov	r5, r2
 800901e:	461e      	mov	r6, r3
  EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE();
 8009020:	f7fa fb66 	bl	80036f0 <EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE>
  SPDIFRX_Stop(); // Get the receiver into a known state e.g. after a failed (timed out) start because there was no input.
 8009024:	f7ff ffd6 	bl	8008fd4 <SPDIFRX_Stop>
  InitializeResamplingVariables();
 8009028:	f7ff fce2 	bl	80089f0 <InitializeResamplingVariables>
  if (hspdif.State != HAL_SPDIFRX_STATE_READY)
 800902c:	4b37      	ldr	r3, [pc, #220]	@ (800910c <SPDIFRX_Start+0xf4>)
 800902e:	f893 1045 	ldrb.w	r1, [r3, #69]	@ 0x45
 8009032:	b2c9      	uxtb	r1, r1
 8009034:	2901      	cmp	r1, #1
 8009036:	d146      	bne.n	80090c6 <SPDIFRX_Start+0xae>
  HAL_TIM_RegisterCallback(&htim11, HAL_TIM_IC_CAPTURE_CB_ID, &CaptureCallback);
 8009038:	4f35      	ldr	r7, [pc, #212]	@ (8009110 <SPDIFRX_Start+0xf8>)
 800903a:	4a36      	ldr	r2, [pc, #216]	@ (8009114 <SPDIFRX_Start+0xfc>)
 800903c:	2112      	movs	r1, #18
 800903e:	4638      	mov	r0, r7
 8009040:	f7fb fd33 	bl	8004aaa <HAL_TIM_RegisterCallback>
  if (HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1))
 8009044:	2100      	movs	r1, #0
 8009046:	4638      	mov	r0, r7
 8009048:	f7fc f8f4 	bl	8005234 <HAL_TIM_IC_Start_IT>
 800904c:	2800      	cmp	r0, #0
 800904e:	d145      	bne.n	80090dc <SPDIFRX_Start+0xc4>
  SPDIFRX_SelectInput(InputChannel);
 8009050:	4620      	mov	r0, r4
 8009052:	f7ff ff9b 	bl	8008f8c <SPDIFRX_SelectInput>
  SPDIFRX_ErrorCallbackCalled = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	4a2f      	ldr	r2, [pc, #188]	@ (8009118 <SPDIFRX_Start+0x100>)
 800905a:	7013      	strb	r3, [r2, #0]
  DisableInterruptHandler = 1;
 800905c:	4a2f      	ldr	r2, [pc, #188]	@ (800911c <SPDIFRX_Start+0x104>)
 800905e:	2101      	movs	r1, #1
 8009060:	7011      	strb	r1, [r2, #0]
  ReceiveErrorOccurred = 0;
 8009062:	4a2f      	ldr	r2, [pc, #188]	@ (8009120 <SPDIFRX_Start+0x108>)
 8009064:	7013      	strb	r3, [r2, #0]
  HALResult = HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, (uint32_t *)SPDIFRX_IncomingSamples, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples);
 8009066:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800906a:	492e      	ldr	r1, [pc, #184]	@ (8009124 <SPDIFRX_Start+0x10c>)
 800906c:	4827      	ldr	r0, [pc, #156]	@ (800910c <SPDIFRX_Start+0xf4>)
 800906e:	f7fa fb79 	bl	8003764 <HAL_SPDIFRX_ReceiveDataFlow_DMA>
  if (HALResult == HAL_TIMEOUT)
 8009072:	2803      	cmp	r0, #3
 8009074:	d045      	beq.n	8009102 <SPDIFRX_Start+0xea>
  HAL_Delay(50); // Wait for receiver to settle.
 8009076:	2032      	movs	r0, #50	@ 0x32
 8009078:	f7f7 fafe 	bl	8000678 <HAL_Delay>
  AudioInput_MeasuredSampleRate =  MeasureInputSampleRate();
 800907c:	f7ff ff32 	bl	8008ee4 <MeasureInputSampleRate>
 8009080:	4604      	mov	r4, r0
 8009082:	4b29      	ldr	r3, [pc, #164]	@ (8009128 <SPDIFRX_Start+0x110>)
 8009084:	6018      	str	r0, [r3, #0]
  if (IsSampleRateInRange(AudioInput_MeasuredSampleRate, SAI_AUDIO_FREQUENCY_44K))
 8009086:	4929      	ldr	r1, [pc, #164]	@ (800912c <SPDIFRX_Start+0x114>)
 8009088:	f7ff ff4e 	bl	8008f28 <IsSampleRateInRange>
 800908c:	b348      	cbz	r0, 80090e2 <SPDIFRX_Start+0xca>
    InputSampleRate = SAI_AUDIO_FREQUENCY_44K;
 800908e:	4b28      	ldr	r3, [pc, #160]	@ (8009130 <SPDIFRX_Start+0x118>)
 8009090:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8009094:	601a      	str	r2, [r3, #0]
  if (ForceOutputSampleRate)
 8009096:	b37d      	cbz	r5, 80090f8 <SPDIFRX_Start+0xe0>
    OutputSampleRate = ForcedOutputSampleRate;
 8009098:	4b26      	ldr	r3, [pc, #152]	@ (8009134 <SPDIFRX_Start+0x11c>)
 800909a:	601e      	str	r6, [r3, #0]
  SPDIFRX_SetOutputSampleRate_Callback(OutputSampleRate);
 800909c:	4b25      	ldr	r3, [pc, #148]	@ (8009134 <SPDIFRX_Start+0x11c>)
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	f003 f800 	bl	800c0a4 <SPDIFRX_SetOutputSampleRate_Callback>
  SPDIFRX_Stop(); // Get the receiver into a known state e.g. after a failed (timed out) start because there was no input.
 80090a4:	f7ff ff96 	bl	8008fd4 <SPDIFRX_Stop>
  HALResult = HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, (uint32_t *)SPDIFRX_IncomingSamples, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples);
 80090a8:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80090ac:	491d      	ldr	r1, [pc, #116]	@ (8009124 <SPDIFRX_Start+0x10c>)
 80090ae:	4817      	ldr	r0, [pc, #92]	@ (800910c <SPDIFRX_Start+0xf4>)
 80090b0:	f7fa fb58 	bl	8003764 <HAL_SPDIFRX_ReceiveDataFlow_DMA>
  if (HALResult == HAL_TIMEOUT)
 80090b4:	2803      	cmp	r0, #3
 80090b6:	d026      	beq.n	8009106 <SPDIFRX_Start+0xee>
  DisableInterruptHandler = 0;
 80090b8:	4b18      	ldr	r3, [pc, #96]	@ (800911c <SPDIFRX_Start+0x104>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	701a      	strb	r2, [r3, #0]
  Started = 1;
 80090be:	2001      	movs	r0, #1
 80090c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009138 <SPDIFRX_Start+0x120>)
 80090c2:	7018      	strb	r0, [r3, #0]
}
 80090c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_DMA_Abort(hspdif.hdmaDrRx); // *** JSB Cube bug fix!!! ***
 80090c6:	461f      	mov	r7, r3
 80090c8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80090ca:	f7f7 fc67 	bl	800099c <HAL_DMA_Abort>
    HAL_DMA_Abort(hspdif.hdmaCsRx); // *** JSB Cube bug fix!!! ***
 80090ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80090d0:	f7f7 fc64 	bl	800099c <HAL_DMA_Abort>
    HAL_SPDIFRX_DMAStop(&hspdif);
 80090d4:	4638      	mov	r0, r7
 80090d6:	f7fa fbf5 	bl	80038c4 <HAL_SPDIFRX_DMAStop>
 80090da:	e7ad      	b.n	8009038 <SPDIFRX_Start+0x20>
    Error_Handler();
 80090dc:	f004 ffda 	bl	800e094 <Error_Handler>
 80090e0:	e7b6      	b.n	8009050 <SPDIFRX_Start+0x38>
  else if (IsSampleRateInRange(AudioInput_MeasuredSampleRate, SAI_AUDIO_FREQUENCY_48K))
 80090e2:	4916      	ldr	r1, [pc, #88]	@ (800913c <SPDIFRX_Start+0x124>)
 80090e4:	4620      	mov	r0, r4
 80090e6:	f7ff ff1f 	bl	8008f28 <IsSampleRateInRange>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d0ea      	beq.n	80090c4 <SPDIFRX_Start+0xac>
    InputSampleRate = SAI_AUDIO_FREQUENCY_48K;
 80090ee:	4b10      	ldr	r3, [pc, #64]	@ (8009130 <SPDIFRX_Start+0x118>)
 80090f0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	e7ce      	b.n	8009096 <SPDIFRX_Start+0x7e>
    OutputSampleRate = InputSampleRate;
 80090f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009130 <SPDIFRX_Start+0x118>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009134 <SPDIFRX_Start+0x11c>)
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	e7cc      	b.n	800909c <SPDIFRX_Start+0x84>
    return 0;
 8009102:	2000      	movs	r0, #0
 8009104:	e7de      	b.n	80090c4 <SPDIFRX_Start+0xac>
    return 0;
 8009106:	2000      	movs	r0, #0
 8009108:	e7dc      	b.n	80090c4 <SPDIFRX_Start+0xac>
 800910a:	bf00      	nop
 800910c:	20017670 	.word	0x20017670
 8009110:	200179b8 	.word	0x200179b8
 8009114:	080089e1 	.word	0x080089e1
 8009118:	20010a10 	.word	0x20010a10
 800911c:	20013215 	.word	0x20013215
 8009120:	20013214 	.word	0x20013214
 8009124:	20011e14 	.word	0x20011e14
 8009128:	20010a04 	.word	0x20010a04
 800912c:	472c4400 	.word	0x472c4400
 8009130:	20010a0c 	.word	0x20010a0c
 8009134:	20010a08 	.word	0x20010a08
 8009138:	20013228 	.word	0x20013228
 800913c:	473b8000 	.word	0x473b8000

08009140 <SPDIFRX_HasReceiveErrorOccurred>:

uint8_t SPDIFRX_HasReceiveErrorOccurred()
{
  return ReceiveErrorOccurred;
}
 8009140:	4b01      	ldr	r3, [pc, #4]	@ (8009148 <SPDIFRX_HasReceiveErrorOccurred+0x8>)
 8009142:	7818      	ldrb	r0, [r3, #0]
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	20013214 	.word	0x20013214

0800914c <SPDIFRX_IsReceiving>:

uint8_t SPDIFRX_IsReceiving()
{
  return DisableInterruptHandler ? 0 : 1;
 800914c:	4b02      	ldr	r3, [pc, #8]	@ (8009158 <SPDIFRX_IsReceiving+0xc>)
 800914e:	7818      	ldrb	r0, [r3, #0]
}
 8009150:	fab0 f080 	clz	r0, r0
 8009154:	0940      	lsrs	r0, r0, #5
 8009156:	4770      	bx	lr
 8009158:	20013215 	.word	0x20013215

0800915c <HitRect>:
///////////////////////////////////////////////////////////////////////////////
// Minor standalone support functions:

static uint8_t HitRect(uint16_t X, uint16_t Y, JSB_UI_Rect_t *pRect)
{
  if ((X < pRect->Left) || (X >= pRect->Left + pRect->Width))
 800915c:	6813      	ldr	r3, [r2, #0]
 800915e:	4298      	cmp	r0, r3
 8009160:	d30d      	bcc.n	800917e <HitRect+0x22>
{
 8009162:	b410      	push	{r4}
  if ((X < pRect->Left) || (X >= pRect->Left + pRect->Width))
 8009164:	6894      	ldr	r4, [r2, #8]
 8009166:	4423      	add	r3, r4
 8009168:	4298      	cmp	r0, r3
 800916a:	d20a      	bcs.n	8009182 <HitRect+0x26>
    return 0;
  if ((Y < pRect->Top) || (Y >= pRect->Top + pRect->Height))
 800916c:	6853      	ldr	r3, [r2, #4]
 800916e:	4299      	cmp	r1, r3
 8009170:	d30b      	bcc.n	800918a <HitRect+0x2e>
 8009172:	68d2      	ldr	r2, [r2, #12]
 8009174:	4413      	add	r3, r2
 8009176:	4299      	cmp	r1, r3
 8009178:	d209      	bcs.n	800918e <HitRect+0x32>
    return 0;
  return 1;
 800917a:	2001      	movs	r0, #1
 800917c:	e002      	b.n	8009184 <HitRect+0x28>
    return 0;
 800917e:	2000      	movs	r0, #0
}
 8009180:	4770      	bx	lr
    return 0;
 8009182:	2000      	movs	r0, #0
}
 8009184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009188:	4770      	bx	lr
    return 0;
 800918a:	2000      	movs	r0, #0
 800918c:	e7fa      	b.n	8009184 <HitRect+0x28>
 800918e:	2000      	movs	r0, #0
 8009190:	e7f8      	b.n	8009184 <HitRect+0x28>

08009192 <Interpolate_float>:

float Interpolate_float(float MinValue, float MaxValue, float Parameter)
{
 8009192:	ee06 0a10 	vmov	s12, r0
 8009196:	ee06 1a90 	vmov	s13, r1
 800919a:	ee07 2a90 	vmov	s15, r2
  return (1.0f - Parameter) * MinValue + Parameter * MaxValue;
 800919e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80091a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80091aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
}
 80091ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091b2:	ee17 0a90 	vmov	r0, s15
 80091b6:	4770      	bx	lr

080091b8 <JSB_UI_Page_UpdateSlideValue>:
  ILI9341_SetTextDrawMode(OriginalTextDrawMode);
  ILI9341_SetTextVerticalOrigin(OriginalTextVerticalOrigin);
}

void JSB_UI_Page_UpdateSlideValue(JSB_UI_Control_t *pControl, int16_t X, int16_t Y)
{
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4604      	mov	r4, r0
  float SliderParameter;

  if (pControl->Type == ctHorizontalSlider)
 80091bc:	7803      	ldrb	r3, [r0, #0]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d005      	beq.n	80091ce <JSB_UI_Page_UpdateSlideValue+0x16>
    SliderParameter = pControl->Rect.Width == 0 ? 0 : Clamp_float(((float)X - (float)pControl->Rect.Left) / (float)pControl->Rect.Width, 0.0f, 1.0f);
  else if (pControl->Type == ctVerticalSlider)
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d10c      	bne.n	80091e0 <JSB_UI_Page_UpdateSlideValue+0x28>
    SliderParameter = pControl->Rect.Height == 0 ? 0 : Clamp_float(((float)Y - (float)pControl->Rect.Top) / (float)pControl->Rect.Height, 0.0f, 1.0f);
 80091c6:	6903      	ldr	r3, [r0, #16]
 80091c8:	bb23      	cbnz	r3, 8009214 <JSB_UI_Page_UpdateSlideValue+0x5c>
 80091ca:	2200      	movs	r2, #0
 80091cc:	e002      	b.n	80091d4 <JSB_UI_Page_UpdateSlideValue+0x1c>
    SliderParameter = pControl->Rect.Width == 0 ? 0 : Clamp_float(((float)X - (float)pControl->Rect.Left) / (float)pControl->Rect.Width, 0.0f, 1.0f);
 80091ce:	68c3      	ldr	r3, [r0, #12]
 80091d0:	b93b      	cbnz	r3, 80091e2 <JSB_UI_Page_UpdateSlideValue+0x2a>
 80091d2:	2200      	movs	r2, #0
  else return;

  *pControl->pSliderValue = Interpolate_float(pControl->SliderMinValue, pControl->SliderMaxValue, SliderParameter);
 80091d4:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 80091d6:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80091d8:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80091da:	f7ff ffda 	bl	8009192 <Interpolate_float>
 80091de:	6028      	str	r0, [r5, #0]
}
 80091e0:	bd38      	pop	{r3, r4, r5, pc}
    SliderParameter = pControl->Rect.Width == 0 ? 0 : Clamp_float(((float)X - (float)pControl->Rect.Left) / (float)pControl->Rect.Width, 0.0f, 1.0f);
 80091e2:	ee07 1a90 	vmov	s15, r1
 80091e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091ea:	ed90 7a01 	vldr	s14, [r0, #4]
 80091ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80091f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091f6:	ee07 3a10 	vmov	s14, r3
 80091fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80091fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009202:	2100      	movs	r1, #0
 8009204:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8009208:	ee17 0a90 	vmov	r0, s15
 800920c:	f7fe fbfb 	bl	8007a06 <Clamp_float>
 8009210:	4602      	mov	r2, r0
 8009212:	e7df      	b.n	80091d4 <JSB_UI_Page_UpdateSlideValue+0x1c>
    SliderParameter = pControl->Rect.Height == 0 ? 0 : Clamp_float(((float)Y - (float)pControl->Rect.Top) / (float)pControl->Rect.Height, 0.0f, 1.0f);
 8009214:	ee07 2a90 	vmov	s15, r2
 8009218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800921c:	ed90 7a02 	vldr	s14, [r0, #8]
 8009220:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009224:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009228:	ee07 3a10 	vmov	s14, r3
 800922c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009230:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009234:	2100      	movs	r1, #0
 8009236:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800923a:	ee17 0a90 	vmov	r0, s15
 800923e:	f7fe fbe2 	bl	8007a06 <Clamp_float>
 8009242:	4602      	mov	r2, r0
 8009244:	e7c6      	b.n	80091d4 <JSB_UI_Page_UpdateSlideValue+0x1c>
	...

08009248 <JSB_UI_Page_PressMove>:

  return 0;
}

void JSB_UI_Page_PressMove(JSB_UI_Page_t *pPage, int16_t X, int16_t Y)
{
 8009248:	b508      	push	{r3, lr}
  if (!pPressedControl)
 800924a:	4b09      	ldr	r3, [pc, #36]	@ (8009270 <JSB_UI_Page_PressMove+0x28>)
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	b150      	cbz	r0, 8009266 <JSB_UI_Page_PressMove+0x1e>
    return;

  if ((pPressedControl->Type == ctHorizontalSlider) || (pPressedControl->Type == ctVerticalSlider))
 8009250:	7803      	ldrb	r3, [r0, #0]
 8009252:	3b02      	subs	r3, #2
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b01      	cmp	r3, #1
 8009258:	d906      	bls.n	8009268 <JSB_UI_Page_PressMove+0x20>
    JSB_UI_Page_UpdateSlideValue(pPressedControl, X, Y);

  if (pPressedControl->pPressMoveHandler)
 800925a:	4b05      	ldr	r3, [pc, #20]	@ (8009270 <JSB_UI_Page_PressMove+0x28>)
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8009262:	b103      	cbz	r3, 8009266 <JSB_UI_Page_PressMove+0x1e>
    (*pPressedControl->pPressMoveHandler)(pPressedControl);
 8009264:	4798      	blx	r3
}
 8009266:	bd08      	pop	{r3, pc}
    JSB_UI_Page_UpdateSlideValue(pPressedControl, X, Y);
 8009268:	f7ff ffa6 	bl	80091b8 <JSB_UI_Page_UpdateSlideValue>
 800926c:	e7f5      	b.n	800925a <JSB_UI_Page_PressMove+0x12>
 800926e:	bf00      	nop
 8009270:	2001322c 	.word	0x2001322c

08009274 <JSB_UI_Page_PressUp>:

void JSB_UI_Page_PressUp()
{
  pPressedControl = NULL;
 8009274:	4b01      	ldr	r3, [pc, #4]	@ (800927c <JSB_UI_Page_PressUp+0x8>)
 8009276:	2200      	movs	r2, #0
 8009278:	601a      	str	r2, [r3, #0]
}
 800927a:	4770      	bx	lr
 800927c:	2001322c 	.word	0x2001322c

08009280 <JSB_UI_CreatePage>:

JSB_UI_Page_t *JSB_UI_CreatePage()
{
 8009280:	b508      	push	{r3, lr}
  return calloc(1, sizeof(JSB_UI_Page_t));
 8009282:	214c      	movs	r1, #76	@ 0x4c
 8009284:	2001      	movs	r0, #1
 8009286:	f005 fe77 	bl	800ef78 <calloc>
}
 800928a:	bd08      	pop	{r3, pc}

0800928c <JSB_UI_Rect>:

JSB_UI_Rect_t JSB_UI_Rect(uint32_t Left, uint32_t Top, uint32_t Width, uint32_t Height)
{
  JSB_UI_Rect_t Rect;

  Rect.Left = Left;
 800928c:	6001      	str	r1, [r0, #0]
  Rect.Top = Top;
 800928e:	6042      	str	r2, [r0, #4]
  Rect.Width = Width;
 8009290:	6083      	str	r3, [r0, #8]
  Rect.Height = Height;
 8009292:	9b00      	ldr	r3, [sp, #0]
 8009294:	60c3      	str	r3, [r0, #12]

  return Rect;
}
 8009296:	4770      	bx	lr

08009298 <JSB_UI_RectFromCentrePoint>:

JSB_UI_Rect_t JSB_UI_RectFromCentrePoint(uint32_t CentreX, uint32_t CentreY, uint32_t Width, uint32_t Height)
{
 8009298:	b410      	push	{r4}
 800929a:	9c01      	ldr	r4, [sp, #4]
  JSB_UI_Rect_t Rect;

  Rect.Left = CentreX - Width / 2;
 800929c:	eba1 0153 	sub.w	r1, r1, r3, lsr #1
 80092a0:	6001      	str	r1, [r0, #0]
  Rect.Top = CentreY - Height / 2;
 80092a2:	eba2 0254 	sub.w	r2, r2, r4, lsr #1
 80092a6:	6042      	str	r2, [r0, #4]
  Rect.Width = Width;
 80092a8:	6083      	str	r3, [r0, #8]
  Rect.Height = Height;
 80092aa:	60c4      	str	r4, [r0, #12]

  return Rect;
}
 80092ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <JSB_UI_CreateControl>:

JSB_UI_Control_t *JSB_UI_CreateControl(JSB_UI_ControlType_t ControlType, JSB_UI_Rect_t Rect, char *Text, uint16_t ForegroundColor, uint16_t BackgroundColor,
  float *pSliderValue,
  uint8_t Visible,
  void (*pPressDownHandler)(JSB_UI_Control_t *), void (*pPressMoveHandler)(JSB_UI_Control_t *), void (*pCustomDrawHandler)(JSB_UI_Control_t *))
{
 80092b2:	b084      	sub	sp, #16
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	4606      	mov	r6, r0
 80092b8:	ad05      	add	r5, sp, #20
 80092ba:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  JSB_UI_Control_t *pControl;

  pControl = calloc(1, sizeof(JSB_UI_Control_t));
 80092be:	2188      	movs	r1, #136	@ 0x88
 80092c0:	2001      	movs	r0, #1
 80092c2:	f005 fe59 	bl	800ef78 <calloc>
 80092c6:	4604      	mov	r4, r0

  pControl->Type = ControlType;
 80092c8:	4684      	mov	ip, r0
 80092ca:	f80c 6b04 	strb.w	r6, [ip], #4
  pControl->Rect = Rect;
 80092ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80092d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  strncpy(pControl->Text, Text, JSB_UI_Control_MaxTextLength);
 80092d6:	2250      	movs	r2, #80	@ 0x50
 80092d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092da:	f104 0014 	add.w	r0, r4, #20
 80092de:	f006 fd38 	bl	800fd52 <strncpy>
  pControl->ForegroundColor = ForegroundColor;
 80092e2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80092e6:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
  pControl->BackgroundColor = BackgroundColor;
 80092ea:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80092ee:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
  pControl->pSliderValue = pSliderValue;
 80092f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092f4:	66a3      	str	r3, [r4, #104]	@ 0x68
  pControl->SliderMinValue = 0.0f;
 80092f6:	2300      	movs	r3, #0
 80092f8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  pControl->SliderMaxValue = 1.0f;
 80092fa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80092fe:	6723      	str	r3, [r4, #112]	@ 0x70
  pControl->Visible = Visible;
 8009300:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8009304:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
  pControl->pPressDownHandler = pPressDownHandler;
 8009308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800930a:	67e3      	str	r3, [r4, #124]	@ 0x7c
  pControl->pPressMoveHandler = pPressMoveHandler;
 800930c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800930e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  pControl->pCustomDrawHandler = pCustomDrawHandler;
 8009312:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009314:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  return pControl;
}
 8009318:	4620      	mov	r0, r4
 800931a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800931e:	b004      	add	sp, #16
 8009320:	4770      	bx	lr

08009322 <JSB_UI_Control_IsSlider>:

uint8_t JSB_UI_Control_IsSlider(JSB_UI_Control_t *pControl)
{
  return (pControl->Type == ctHorizontalSlider) || (pControl->Type == ctVerticalSlider);
 8009322:	7800      	ldrb	r0, [r0, #0]
 8009324:	3802      	subs	r0, #2
 8009326:	b2c0      	uxtb	r0, r0
}
 8009328:	2801      	cmp	r0, #1
 800932a:	bf8c      	ite	hi
 800932c:	2000      	movhi	r0, #0
 800932e:	2001      	movls	r0, #1
 8009330:	4770      	bx	lr
	...

08009334 <JSB_UI_Page_PressDown>:
  if (pPressedControl)
 8009334:	4b1a      	ldr	r3, [pc, #104]	@ (80093a0 <JSB_UI_Page_PressDown+0x6c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	b10b      	cbz	r3, 800933e <JSB_UI_Page_PressDown+0xa>
    return 0;
 800933a:	2000      	movs	r0, #0
}
 800933c:	4770      	bx	lr
{
 800933e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	4605      	mov	r5, r0
 8009346:	460f      	mov	r7, r1
 8009348:	4690      	mov	r8, r2
  for (ControlIndex = 0; ControlIndex < pPage->Controls.NumControls; ++ControlIndex)
 800934a:	2400      	movs	r4, #0
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	42a3      	cmp	r3, r4
 8009350:	d922      	bls.n	8009398 <JSB_UI_Page_PressDown+0x64>
    pControl = pPage->Controls.pControls[ControlIndex];
 8009352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009356:	685e      	ldr	r6, [r3, #4]
    Rect = pControl->Rect;
 8009358:	46ec      	mov	ip, sp
 800935a:	1d33      	adds	r3, r6, #4
 800935c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800935e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (HitRect(X, Y, &Rect))
 8009362:	4662      	mov	r2, ip
 8009364:	fa1f f188 	uxth.w	r1, r8
 8009368:	b2b8      	uxth	r0, r7
 800936a:	f7ff fef7 	bl	800915c <HitRect>
 800936e:	b908      	cbnz	r0, 8009374 <JSB_UI_Page_PressDown+0x40>
  for (ControlIndex = 0; ControlIndex < pPage->Controls.NumControls; ++ControlIndex)
 8009370:	3401      	adds	r4, #1
 8009372:	e7eb      	b.n	800934c <JSB_UI_Page_PressDown+0x18>
      pPressedControl = pControl;
 8009374:	4b0a      	ldr	r3, [pc, #40]	@ (80093a0 <JSB_UI_Page_PressDown+0x6c>)
 8009376:	601e      	str	r6, [r3, #0]
      if (JSB_UI_Control_IsSlider(pControl))
 8009378:	4630      	mov	r0, r6
 800937a:	f7ff ffd2 	bl	8009322 <JSB_UI_Control_IsSlider>
 800937e:	b928      	cbnz	r0, 800938c <JSB_UI_Page_PressDown+0x58>
      if (pControl->pPressDownHandler)
 8009380:	6ff3      	ldr	r3, [r6, #124]	@ 0x7c
 8009382:	b10b      	cbz	r3, 8009388 <JSB_UI_Page_PressDown+0x54>
        (*pControl->pPressDownHandler)(pControl);
 8009384:	4630      	mov	r0, r6
 8009386:	4798      	blx	r3
      return 1;
 8009388:	2001      	movs	r0, #1
 800938a:	e006      	b.n	800939a <JSB_UI_Page_PressDown+0x66>
        JSB_UI_Page_UpdateSlideValue(pControl, X, Y);
 800938c:	4642      	mov	r2, r8
 800938e:	4639      	mov	r1, r7
 8009390:	4630      	mov	r0, r6
 8009392:	f7ff ff11 	bl	80091b8 <JSB_UI_Page_UpdateSlideValue>
 8009396:	e7f3      	b.n	8009380 <JSB_UI_Page_PressDown+0x4c>
  return 0;
 8009398:	2000      	movs	r0, #0
}
 800939a:	b004      	add	sp, #16
 800939c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a0:	2001322c 	.word	0x2001322c

080093a4 <DrawControls>:
{
 80093a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a8:	b09f      	sub	sp, #124	@ 0x7c
 80093aa:	4606      	mov	r6, r0
  TextDrawMode_t OriginalTextDrawMode = ILI9341_SetTextDrawMode(tdmMergeWithExistingPixels);
 80093ac:	2003      	movs	r0, #3
 80093ae:	f7ff f9c1 	bl	8008734 <ILI9341_SetTextDrawMode>
 80093b2:	4604      	mov	r4, r0
  TextVerticalOrigin_t OriginalTextVerticalOrigin = ILI9341_SetTextVerticalOrigin(tvoCentreBetweenBaseAndTop);
 80093b4:	2002      	movs	r0, #2
 80093b6:	f7ff f9c5 	bl	8008744 <ILI9341_SetTextVerticalOrigin>
  for (ControlIndex = 0; ControlIndex < pPage->Controls.NumControls; ++ControlIndex)
 80093ba:	2500      	movs	r5, #0
 80093bc:	9404      	str	r4, [sp, #16]
 80093be:	9005      	str	r0, [sp, #20]
 80093c0:	e05b      	b.n	800947a <DrawControls+0xd6>
        uint16_t OnWidth = round(Rect.Width * SliderParameter);
 80093c2:	eddd 7a1c 	vldr	s15, [sp, #112]	@ 0x70
 80093c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093ca:	ee27 7a26 	vmul.f32	s14, s14, s13
 80093ce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80093d2:	feb8 7b47 	vrinta.f64	d7, d7
 80093d6:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80093da:	ee17 3a10 	vmov	r3, s14
 80093de:	fa1f f983 	uxth.w	r9, r3
        uint16_t OffWidth = Rect.Width - OnWidth;
 80093e2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	eba3 0309 	sub.w	r3, r3, r9
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	9303      	str	r3, [sp, #12]
        ILI9341_DrawBar(Rect.Left, Rect.Top, OnWidth, Rect.Height, ForegroundColor);
 80093ee:	f8bd a068 	ldrh.w	sl, [sp, #104]	@ 0x68
 80093f2:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 80093f6:	f8bd b074 	ldrh.w	fp, [sp, #116]	@ 0x74
 80093fa:	f8cd 8000 	str.w	r8, [sp]
 80093fe:	465b      	mov	r3, fp
 8009400:	464a      	mov	r2, r9
 8009402:	4688      	mov	r8, r1
 8009404:	4650      	mov	r0, sl
 8009406:	f7fe ffa1 	bl	800834c <ILI9341_DrawBar>
        ILI9341_DrawBar(Rect.Left + OnWidth, Rect.Top, OffWidth, Rect.Height, BackgroundColor);
 800940a:	eb0a 0009 	add.w	r0, sl, r9
 800940e:	9700      	str	r7, [sp, #0]
 8009410:	465b      	mov	r3, fp
 8009412:	9a03      	ldr	r2, [sp, #12]
 8009414:	4641      	mov	r1, r8
 8009416:	b280      	uxth	r0, r0
 8009418:	f7fe ff98 	bl	800834c <ILI9341_DrawBar>
 800941c:	e00a      	b.n	8009434 <DrawControls+0x90>
      ILI9341_DrawBar(Rect.Left, Rect.Top, Rect.Width, Rect.Height, BackgroundColor);
 800941e:	9700      	str	r7, [sp, #0]
 8009420:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8009424:	f8bd 2070 	ldrh.w	r2, [sp, #112]	@ 0x70
 8009428:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 800942c:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
 8009430:	f7fe ff8c 	bl	800834c <ILI9341_DrawBar>
    if (pControl->pCustomDrawHandler)
 8009434:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009438:	b10b      	cbz	r3, 800943e <DrawControls+0x9a>
      (*pControl->pCustomDrawHandler)(pControl);
 800943a:	4620      	mov	r0, r4
 800943c:	4798      	blx	r3
    if (pControl->pTweakTextHandler)
 800943e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009440:	2b00      	cmp	r3, #0
 8009442:	d070      	beq.n	8009526 <DrawControls+0x182>
      (*pControl->pTweakTextHandler)(pControl, Text, JSB_UI_Control_MaxTextLength);
 8009444:	2250      	movs	r2, #80	@ 0x50
 8009446:	a906      	add	r1, sp, #24
 8009448:	4620      	mov	r0, r4
 800944a:	4798      	blx	r3
      pText = Text;
 800944c:	af06      	add	r7, sp, #24
    ILI9341_DrawTextAtXY(pText, pControl->Rect.Left + ((pControl->Rect.Width - ILI9341_GetTextWidth(pText)) / 2), pControl->Rect.Top + (pControl->Rect.Height / 2), tpLeft);
 800944e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8009452:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8009456:	4638      	mov	r0, r7
 8009458:	f7ff f812 	bl	8008480 <ILI9341_GetTextWidth>
 800945c:	eba9 0900 	sub.w	r9, r9, r0
 8009460:	68a2      	ldr	r2, [r4, #8]
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8009468:	eb08 0159 	add.w	r1, r8, r9, lsr #1
 800946c:	2301      	movs	r3, #1
 800946e:	b292      	uxth	r2, r2
 8009470:	b289      	uxth	r1, r1
 8009472:	4638      	mov	r0, r7
 8009474:	f7ff f96e 	bl	8008754 <ILI9341_DrawTextAtXY>
  for (ControlIndex = 0; ControlIndex < pPage->Controls.NumControls; ++ControlIndex)
 8009478:	3501      	adds	r5, #1
 800947a:	6833      	ldr	r3, [r6, #0]
 800947c:	42ab      	cmp	r3, r5
 800947e:	d955      	bls.n	800952c <DrawControls+0x188>
    pControl = pPage->Controls.pControls[ControlIndex];
 8009480:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8009484:	685c      	ldr	r4, [r3, #4]
    Rect = pControl->Rect;
 8009486:	1d23      	adds	r3, r4, #4
 8009488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800948a:	af1e      	add	r7, sp, #120	@ 0x78
 800948c:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
    ForegroundColor = pControl->ForegroundColor;
 8009490:	f8b4 8064 	ldrh.w	r8, [r4, #100]	@ 0x64
    BackgroundColor = pControl->BackgroundColor;
 8009494:	f8b4 7066 	ldrh.w	r7, [r4, #102]	@ 0x66
    if (JSB_UI_Control_IsSlider(pControl))
 8009498:	4620      	mov	r0, r4
 800949a:	f7ff ff42 	bl	8009322 <JSB_UI_Control_IsSlider>
 800949e:	2800      	cmp	r0, #0
 80094a0:	d0bd      	beq.n	800941e <DrawControls+0x7a>
      float SliderParameter = (*pControl->pSliderValue - pControl->SliderMinValue) / (pControl->SliderMaxValue - pControl->SliderMinValue);
 80094a2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80094a4:	ed93 7a00 	vldr	s14, [r3]
 80094a8:	edd4 6a1b 	vldr	s13, [r4, #108]	@ 0x6c
 80094ac:	ee37 7a66 	vsub.f32	s14, s14, s13
 80094b0:	edd4 7a1c 	vldr	s15, [r4, #112]	@ 0x70
 80094b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80094b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
      if (pControl->Type == ctHorizontalSlider)
 80094bc:	7823      	ldrb	r3, [r4, #0]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	f43f af7f 	beq.w	80093c2 <DrawControls+0x1e>
      else if (pControl->Type == ctVerticalSlider)
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d1b5      	bne.n	8009434 <DrawControls+0x90>
        uint16_t OnHeight = round(Rect.Width * SliderParameter);
 80094c8:	eddd 7a1c 	vldr	s15, [sp, #112]	@ 0x70
 80094cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80094d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80094d4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80094d8:	feb8 7b47 	vrinta.f64	d7, d7
 80094dc:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80094e0:	ee17 3a10 	vmov	r3, s14
 80094e4:	fa1f f983 	uxth.w	r9, r3
        uint16_t OffHeight = Rect.Height - OnHeight;
 80094e8:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 80094ec:	eba3 0309 	sub.w	r3, r3, r9
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	9303      	str	r3, [sp, #12]
        ILI9341_DrawBar(Rect.Left, Rect.Top, Rect.Width, OnHeight, ForegroundColor);
 80094f4:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
 80094f8:	f8bd a06c 	ldrh.w	sl, [sp, #108]	@ 0x6c
 80094fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80094fe:	fa1f fb82 	uxth.w	fp, r2
 8009502:	f8cd 8000 	str.w	r8, [sp]
 8009506:	464b      	mov	r3, r9
 8009508:	465a      	mov	r2, fp
 800950a:	4651      	mov	r1, sl
 800950c:	4680      	mov	r8, r0
 800950e:	f7fe ff1d 	bl	800834c <ILI9341_DrawBar>
        ILI9341_DrawBar(Rect.Left, Rect.Top + OnHeight, Rect.Width, OffHeight, BackgroundColor);
 8009512:	eb0a 0109 	add.w	r1, sl, r9
 8009516:	9700      	str	r7, [sp, #0]
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	465a      	mov	r2, fp
 800951c:	b289      	uxth	r1, r1
 800951e:	4640      	mov	r0, r8
 8009520:	f7fe ff14 	bl	800834c <ILI9341_DrawBar>
 8009524:	e786      	b.n	8009434 <DrawControls+0x90>
      pText = pControl->Text;
 8009526:	f104 0714 	add.w	r7, r4, #20
 800952a:	e790      	b.n	800944e <DrawControls+0xaa>
  ILI9341_SetTextDrawMode(OriginalTextDrawMode);
 800952c:	9c04      	ldr	r4, [sp, #16]
 800952e:	9f05      	ldr	r7, [sp, #20]
 8009530:	4620      	mov	r0, r4
 8009532:	f7ff f8ff 	bl	8008734 <ILI9341_SetTextDrawMode>
  ILI9341_SetTextVerticalOrigin(OriginalTextVerticalOrigin);
 8009536:	4638      	mov	r0, r7
 8009538:	f7ff f904 	bl	8008744 <ILI9341_SetTextVerticalOrigin>
}
 800953c:	b01f      	add	sp, #124	@ 0x7c
 800953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009542 <JSB_UI_AddControlToPage>:

void JSB_UI_AddControlToPage(JSB_UI_Page_t *pPage, JSB_UI_Control_t *pControl)
{
 8009542:	b508      	push	{r3, lr}
  if (pPage->Controls.NumControls == JSB_UI_Controls_MaxNumber)
 8009544:	6803      	ldr	r3, [r0, #0]
 8009546:	2b10      	cmp	r3, #16
 8009548:	d005      	beq.n	8009556 <JSB_UI_AddControlToPage+0x14>
  {
    Error_Handler();
    return;
  }

  pPage->Controls.pControls[pPage->Controls.NumControls] = pControl;
 800954a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800954e:	6051      	str	r1, [r2, #4]
  pPage->Controls.NumControls += 1;
 8009550:	3301      	adds	r3, #1
 8009552:	6003      	str	r3, [r0, #0]
}
 8009554:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009556:	f004 fd9d 	bl	800e094 <Error_Handler>
    return;
 800955a:	e7fb      	b.n	8009554 <JSB_UI_AddControlToPage+0x12>

0800955c <JSB_UI_SetDefaultState>:

void JSB_UI_SetDefaultState()
{
 800955c:	b508      	push	{r3, lr}
  ILI9341_SetDefaultState();
 800955e:	f7fe fcb7 	bl	8007ed0 <ILI9341_SetDefaultState>

  ILI9341_SetFont(&FreeSans9pt7b);
 8009562:	4802      	ldr	r0, [pc, #8]	@ (800956c <JSB_UI_SetDefaultState+0x10>)
 8009564:	f7fe ff64 	bl	8008430 <ILI9341_SetFont>
}
 8009568:	bd08      	pop	{r3, pc}
 800956a:	bf00      	nop
 800956c:	08012d48 	.word	0x08012d48

08009570 <JSB_UI_InitializeDisplay>:

void JSB_UI_InitializeDisplay()
{
 8009570:	b508      	push	{r3, lr}
  ILI9341_Initialize(&hspi1, 1);
 8009572:	2101      	movs	r1, #1
 8009574:	4807      	ldr	r0, [pc, #28]	@ (8009594 <JSB_UI_InitializeDisplay+0x24>)
 8009576:	f7fe fcbd 	bl	8007ef4 <ILI9341_Initialize>
  LCD_BacklightOn(1);
 800957a:	2001      	movs	r0, #1
 800957c:	f000 fb1a 	bl	8009bb4 <LCD_BacklightOn>
  XPT2046_Initialize(&hspi2);
 8009580:	4805      	ldr	r0, [pc, #20]	@ (8009598 <JSB_UI_InitializeDisplay+0x28>)
 8009582:	f000 f851 	bl	8009628 <XPT2046_Initialize>

  JSB_UI_SetDefaultState();
 8009586:	f7ff ffe9 	bl	800955c <JSB_UI_SetDefaultState>

  ILI9341_Clear(0x0000);
 800958a:	2000      	movs	r0, #0
 800958c:	f7fe fef0 	bl	8008370 <ILI9341_Clear>
}
 8009590:	bd08      	pop	{r3, pc}
 8009592:	bf00      	nop
 8009594:	20017844 	.word	0x20017844
 8009598:	200177e0 	.word	0x200177e0

0800959c <JSB_UI_DrawPage>:

void JSB_UI_DrawPage(JSB_UI_Page_t *pPage)
{
 800959c:	b510      	push	{r4, lr}
 800959e:	4604      	mov	r4, r0
  ILI9341_Clear(0);
 80095a0:	2000      	movs	r0, #0
 80095a2:	f7fe fee5 	bl	8008370 <ILI9341_Clear>

  DrawControls(pPage);
 80095a6:	4620      	mov	r0, r4
 80095a8:	f7ff fefc 	bl	80093a4 <DrawControls>

  if (pPage->pCustomDrawHandler)
 80095ac:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80095ae:	b10b      	cbz	r3, 80095b4 <JSB_UI_DrawPage+0x18>
    (*pPage->pCustomDrawHandler)(pPage);
 80095b0:	4620      	mov	r0, r4
 80095b2:	4798      	blx	r3

  if (ILI9341_UsingBackBuffer())
 80095b4:	f7fe fe72 	bl	800829c <ILI9341_UsingBackBuffer>
 80095b8:	b900      	cbnz	r0, 80095bc <JSB_UI_DrawPage+0x20>
    ILI9341_CopyBackBufferToDisplay();
}
 80095ba:	bd10      	pop	{r4, pc}
    ILI9341_CopyBackBufferToDisplay();
 80095bc:	f7fe fe74 	bl	80082a8 <ILI9341_CopyBackBufferToDisplay>
}
 80095c0:	e7fb      	b.n	80095ba <JSB_UI_DrawPage+0x1e>

080095c2 <GetBest>:

static int16_t GetBest(int16_t A, int16_t B, int16_t C)
// From Adafruit Arduino library.
// JSB: I think it returns the average of the two closest values.
// JSB: I renamed the identifiers.
{
 80095c2:	b510      	push	{r4, lr}
  int16_t DeltaAB, DeltaCA, DeltaBC;
  int16_t Result = 0;

  if (A > B)
 80095c4:	4288      	cmp	r0, r1
 80095c6:	dd16      	ble.n	80095f6 <GetBest+0x34>
    DeltaAB = A - B;
 80095c8:	1a43      	subs	r3, r0, r1
 80095ca:	b21b      	sxth	r3, r3
  else
    DeltaAB = B - A;

  if (A > C)
 80095cc:	4290      	cmp	r0, r2
 80095ce:	dd15      	ble.n	80095fc <GetBest+0x3a>
    DeltaCA = A - C;
 80095d0:	eba0 0c02 	sub.w	ip, r0, r2
 80095d4:	fa0f fc8c 	sxth.w	ip, ip
  else
    DeltaCA = C - A;

  if (C > B)
 80095d8:	4291      	cmp	r1, r2
 80095da:	da14      	bge.n	8009606 <GetBest+0x44>
    DeltaBC = C - B;
 80095dc:	eba2 0e01 	sub.w	lr, r2, r1
 80095e0:	fa0f fe8e 	sxth.w	lr, lr
  else
    DeltaBC = B - C;

  if ((DeltaAB <= DeltaCA) && (DeltaAB <= DeltaBC))
 80095e4:	4664      	mov	r4, ip
 80095e6:	45f4      	cmp	ip, lr
 80095e8:	bfa8      	it	ge
 80095ea:	4674      	movge	r4, lr
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	dc0f      	bgt.n	8009610 <GetBest+0x4e>
    Result = (A + B) >> 1;
 80095f0:	4408      	add	r0, r1
 80095f2:	1040      	asrs	r0, r0, #1
    Result = (A + C) >> 1;
  else
    Result = (B + C) >> 1;

  return Result;
}
 80095f4:	bd10      	pop	{r4, pc}
    DeltaAB = B - A;
 80095f6:	1a0b      	subs	r3, r1, r0
 80095f8:	b21b      	sxth	r3, r3
 80095fa:	e7e7      	b.n	80095cc <GetBest+0xa>
    DeltaCA = C - A;
 80095fc:	eba2 0c00 	sub.w	ip, r2, r0
 8009600:	fa0f fc8c 	sxth.w	ip, ip
 8009604:	e7e8      	b.n	80095d8 <GetBest+0x16>
    DeltaBC = B - C;
 8009606:	eba1 0e02 	sub.w	lr, r1, r2
 800960a:	fa0f fe8e 	sxth.w	lr, lr
 800960e:	e7e9      	b.n	80095e4 <GetBest+0x22>
  else if ((DeltaCA <= DeltaAB) && (DeltaCA <= DeltaBC))
 8009610:	4573      	cmp	r3, lr
 8009612:	bfa8      	it	ge
 8009614:	4673      	movge	r3, lr
 8009616:	459c      	cmp	ip, r3
 8009618:	dc02      	bgt.n	8009620 <GetBest+0x5e>
    Result = (A + C) >> 1;
 800961a:	4410      	add	r0, r2
 800961c:	1040      	asrs	r0, r0, #1
 800961e:	e7e9      	b.n	80095f4 <GetBest+0x32>
    Result = (B + C) >> 1;
 8009620:	4411      	add	r1, r2
 8009622:	1048      	asrs	r0, r1, #1
 8009624:	e7e6      	b.n	80095f4 <GetBest+0x32>
	...

08009628 <XPT2046_Initialize>:
  phspi = i_phspi;
 8009628:	4b01      	ldr	r3, [pc, #4]	@ (8009630 <XPT2046_Initialize+0x8>)
 800962a:	6018      	str	r0, [r3, #0]
}
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	20013230 	.word	0x20013230

08009634 <XPT2046_Sample>:

uint8_t XPT2046_Sample(int16_t *pRawX, int16_t *pRawY, int16_t *pRawZ)
// Returns 1 if touched.
// The origin is bottom left (XL, YD). This is the natural origin of the XPT2046.
// None of the touch screens I've encountered so far are correctly wired. Use compiler defines to reverse the coordinates as required.
{
 8009634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009638:	b08c      	sub	sp, #48	@ 0x30
 800963a:	4680      	mov	r8, r0
 800963c:	460f      	mov	r7, r1
 800963e:	4691      	mov	r9, r2
  int16_t x, y, z;

  *pRawX = 0;
 8009640:	2200      	movs	r2, #0
 8009642:	8002      	strh	r2, [r0, #0]
  *pRawY = 0;
 8009644:	800a      	strh	r2, [r1, #0]
  *pRawZ = 0;
 8009646:	f8a9 2000 	strh.w	r2, [r9]

  uint8_t RxData[19];
  int16_t X_Positions[3];
  int16_t Y_Positions[3];

  XPT2046_CSX_Low();
 800964a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800964e:	4846      	ldr	r0, [pc, #280]	@ (8009768 <XPT2046_Sample+0x134>)
 8009650:	f7f7 fbe9 	bl	8000e26 <HAL_GPIO_WritePin>
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &SampleCommand, (uint8_t*) &RxData, 19, 100) != HAL_OK)
 8009654:	2364      	movs	r3, #100	@ 0x64
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	2313      	movs	r3, #19
 800965a:	aa07      	add	r2, sp, #28
 800965c:	4943      	ldr	r1, [pc, #268]	@ (800976c <XPT2046_Sample+0x138>)
 800965e:	4844      	ldr	r0, [pc, #272]	@ (8009770 <XPT2046_Sample+0x13c>)
 8009660:	6800      	ldr	r0, [r0, #0]
 8009662:	f7fa fc84 	bl	8003f6e <HAL_SPI_TransmitReceive>
 8009666:	2800      	cmp	r0, #0
 8009668:	d178      	bne.n	800975c <XPT2046_Sample+0x128>
    Error_Handler();
  XPT2046_CSX_High();
 800966a:	2201      	movs	r2, #1
 800966c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009670:	483d      	ldr	r0, [pc, #244]	@ (8009768 <XPT2046_Sample+0x134>)
 8009672:	f7f7 fbd8 	bl	8000e26 <HAL_GPIO_WritePin>
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8009676:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800967a:	f89d e01e 	ldrb.w	lr, [sp, #30]
 800967e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 8009682:	ea4e 1e43 	orr.w	lr, lr, r3, lsl #5
 8009686:	f3ce 0c0b 	ubfx	ip, lr, #0, #12
 800968a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800968e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8009692:	08db      	lsrs	r3, r3, #3
 8009694:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8009698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800969c:	f89d 2023 	ldrb.w	r2, [sp, #35]	@ 0x23
 80096a0:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80096a4:	08c0      	lsrs	r0, r0, #3
 80096a6:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
 80096aa:	f3c0 000b 	ubfx	r0, r0, #0, #12
  int16_t z1 = GetUnsigned12bitValue(&RxData[1]);
  int16_t z2 = GetUnsigned12bitValue(&RxData[3]);

  // Result from dummy measurement ignored.

  X_Positions[0] = GetUnsigned12bitValue(&RxData[7]);
 80096ae:	f8ad 0014 	strh.w	r0, [sp, #20]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 80096b2:	f89d 4027 	ldrb.w	r4, [sp, #39]	@ 0x27
 80096b6:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 80096ba:	08c9      	lsrs	r1, r1, #3
 80096bc:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 80096c0:	f3c1 010b 	ubfx	r1, r1, #0, #12
  X_Positions[1] = GetUnsigned12bitValue(&RxData[11]);
 80096c4:	f8ad 1016 	strh.w	r1, [sp, #22]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 80096c8:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 80096cc:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 80096d0:	08d2      	lsrs	r2, r2, #3
 80096d2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
 80096d6:	f3c2 020b 	ubfx	r2, r2, #0, #12
  X_Positions[2] = GetUnsigned12bitValue(&RxData[15]);
 80096da:	f8ad 2018 	strh.w	r2, [sp, #24]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 80096de:	f89d 5026 	ldrb.w	r5, [sp, #38]	@ 0x26
 80096e2:	08e4      	lsrs	r4, r4, #3
 80096e4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
 80096e8:	f3c4 040b 	ubfx	r4, r4, #0, #12

  Y_Positions[0] = GetUnsigned12bitValue(&RxData[10]);
 80096ec:	f8ad 400c 	strh.w	r4, [sp, #12]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 80096f0:	f89d 6029 	ldrb.w	r6, [sp, #41]	@ 0x29
 80096f4:	f89d 502a 	ldrb.w	r5, [sp, #42]	@ 0x2a
 80096f8:	08ed      	lsrs	r5, r5, #3
 80096fa:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
 80096fe:	f3c5 050b 	ubfx	r5, r5, #0, #12
  Y_Positions[1] = GetUnsigned12bitValue(&RxData[13]);
 8009702:	f8ad 500e 	strh.w	r5, [sp, #14]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8009706:	f89d 602d 	ldrb.w	r6, [sp, #45]	@ 0x2d
 800970a:	f89d a02e 	ldrb.w	sl, [sp, #46]	@ 0x2e
 800970e:	0176      	lsls	r6, r6, #5
 8009710:	ea46 06da 	orr.w	r6, r6, sl, lsr #3
 8009714:	f3c6 060b 	ubfx	r6, r6, #0, #12
  Y_Positions[2] = GetUnsigned12bitValue(&RxData[17]);
 8009718:	f8ad 6010 	strh.w	r6, [sp, #16]

  // Neutralize occasional z1 = 4095 values (which are possibly due to comms errors, as x and y values of 4095 often appear with the z value of 4095).
  if (z1 >= 2048)
 800971c:	f41e 6f00 	tst.w	lr, #2048	@ 0x800
 8009720:	d001      	beq.n	8009726 <XPT2046_Sample+0xf2>
    z1 = 0;
 8009722:	f04f 0c00 	mov.w	ip, #0

  z = 4095 + z1 - z2;
 8009726:	ebac 0303 	sub.w	r3, ip, r3
 800972a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff

  if (z < ZThreshold)
 800972e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8009732:	db16      	blt.n	8009762 <XPT2046_Sample+0x12e>
    return 0;

  *pRawZ = z;
 8009734:	f8a9 3000 	strh.w	r3, [r9]

  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 8009738:	f7ff ff43 	bl	80095c2 <GetBest>
 800973c:	4681      	mov	r9, r0
  y = GetBest(Y_Positions[0], Y_Positions[1], Y_Positions[2]);
 800973e:	4632      	mov	r2, r6
 8009740:	4629      	mov	r1, r5
 8009742:	4620      	mov	r0, r4
 8009744:	f7ff ff3d 	bl	80095c2 <GetBest>
#if XPT2046_Swap_XL_and_XR
  x = 4095 - x;
#endif

#if XPT2046_Swap_YD_and_YU
  y = 4095 - y;
 8009748:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800974c:	1a1b      	subs	r3, r3, r0
#endif

  *pRawX = x;
 800974e:	f8a8 9000 	strh.w	r9, [r8]
  *pRawY = y;
 8009752:	803b      	strh	r3, [r7, #0]

  return 1;
 8009754:	2001      	movs	r0, #1
}
 8009756:	b00c      	add	sp, #48	@ 0x30
 8009758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Error_Handler();
 800975c:	f004 fc9a 	bl	800e094 <Error_Handler>
 8009760:	e783      	b.n	800966a <XPT2046_Sample+0x36>
    return 0;
 8009762:	2000      	movs	r0, #0
 8009764:	e7f7      	b.n	8009756 <XPT2046_Sample+0x122>
 8009766:	bf00      	nop
 8009768:	40020400 	.word	0x40020400
 800976c:	080134d0 	.word	0x080134d0
 8009770:	20013230 	.word	0x20013230

08009774 <XPT2046_ConvertRawToScreen>:

void XPT2046_ConvertRawToScreen(int16_t RawX, int16_t RawY, int16_t *pX, int16_t *pY)
// Assumes portrait mode.
// The origin of the result is top-left.
{
 8009774:	b410      	push	{r4}
  float K;

  K = ((float)(RawX - XPT2046_RawX_Min) / (float)(XPT2046_RawX_Max - XPT2046_RawX_Min));
 8009776:	4c1a      	ldr	r4, [pc, #104]	@ (80097e0 <XPT2046_ConvertRawToScreen+0x6c>)
 8009778:	6824      	ldr	r4, [r4, #0]
 800977a:	1b00      	subs	r0, r0, r4
 800977c:	ee07 0a90 	vmov	s15, r0
 8009780:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009784:	4817      	ldr	r0, [pc, #92]	@ (80097e4 <XPT2046_ConvertRawToScreen+0x70>)
 8009786:	6800      	ldr	r0, [r0, #0]
 8009788:	1b00      	subs	r0, r0, r4
 800978a:	ee07 0a10 	vmov	s14, r0
 800978e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009792:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pX = K * XPT2046_Width;
 8009796:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80097e8 <XPT2046_ConvertRawToScreen+0x74>
 800979a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800979e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097a2:	ee17 0a90 	vmov	r0, s15
 80097a6:	8010      	strh	r0, [r2, #0]

  K = ((float)(RawY - XPT2046_RawY_Min) / (float)(XPT2046_RawY_Max - XPT2046_RawY_Min));
 80097a8:	4a10      	ldr	r2, [pc, #64]	@ (80097ec <XPT2046_ConvertRawToScreen+0x78>)
 80097aa:	6810      	ldr	r0, [r2, #0]
 80097ac:	1a09      	subs	r1, r1, r0
 80097ae:	ee07 1a90 	vmov	s15, r1
 80097b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80097b6:	4a0e      	ldr	r2, [pc, #56]	@ (80097f0 <XPT2046_ConvertRawToScreen+0x7c>)
 80097b8:	6812      	ldr	r2, [r2, #0]
 80097ba:	1a12      	subs	r2, r2, r0
 80097bc:	ee07 2a90 	vmov	s15, r2
 80097c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pY = K * XPT2046_Height;
 80097c8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80097f4 <XPT2046_ConvertRawToScreen+0x80>
 80097cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097d4:	ee17 2a90 	vmov	r2, s15
 80097d8:	801a      	strh	r2, [r3, #0]
}
 80097da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	20000044 	.word	0x20000044
 80097e4:	20000040 	.word	0x20000040
 80097e8:	43700000 	.word	0x43700000
 80097ec:	2000003c 	.word	0x2000003c
 80097f0:	20000038 	.word	0x20000038
 80097f4:	43a00000 	.word	0x43a00000

080097f8 <SST25_Start>:
	SST25_SPI_ReadBlock(pBlock, NumBytes);
	SST25_End();
}

static inline void SST25_Start()
{
 80097f8:	b508      	push	{r3, lr}
  SST25_SPI_Begin();
 80097fa:	f000 f9bb 	bl	8009b74 <SST25_SPI_Begin>
static inline void SST25_Delay()
// Warning: Requires CPU_CYCLES to be enabled!
{
  uint32_t End_NumCycles;

  End_NumCycles = CPU_CYCLES + 10; // !!! Hardwired!
 80097fe:	4b04      	ldr	r3, [pc, #16]	@ (8009810 <SST25_Start+0x18>)
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	320a      	adds	r2, #10
  do {} while (CPU_CYCLES < End_NumCycles);
 8009804:	4b02      	ldr	r3, [pc, #8]	@ (8009810 <SST25_Start+0x18>)
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	429a      	cmp	r2, r3
 800980a:	d8fb      	bhi.n	8009804 <SST25_Start+0xc>
}
 800980c:	bd08      	pop	{r3, pc}
 800980e:	bf00      	nop
 8009810:	e0001000 	.word	0xe0001000

08009814 <SST25_End>:
{
 8009814:	b508      	push	{r3, lr}
  SST25_SPI_End();
 8009816:	f000 f9bd 	bl	8009b94 <SST25_SPI_End>
  End_NumCycles = CPU_CYCLES + 10; // !!! Hardwired!
 800981a:	4b04      	ldr	r3, [pc, #16]	@ (800982c <SST25_End+0x18>)
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	320a      	adds	r2, #10
  do {} while (CPU_CYCLES < End_NumCycles);
 8009820:	4b02      	ldr	r3, [pc, #8]	@ (800982c <SST25_End+0x18>)
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	429a      	cmp	r2, r3
 8009826:	d8fb      	bhi.n	8009820 <SST25_End+0xc>
}
 8009828:	bd08      	pop	{r3, pc}
 800982a:	bf00      	nop
 800982c:	e0001000 	.word	0xe0001000

08009830 <SST25_WriteStatus>:
{
 8009830:	b510      	push	{r4, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	4604      	mov	r4, r0
	SST25_Start();
 8009836:	f7ff ffdf 	bl	80097f8 <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_ENABLE_WRITE_STATUS);
 800983a:	2050      	movs	r0, #80	@ 0x50
 800983c:	f000 f984 	bl	8009b48 <SST25_SPI_ReadWriteByte>
	SST25_End();
 8009840:	f7ff ffe8 	bl	8009814 <SST25_End>
	SST25_Start();
 8009844:	f7ff ffd8 	bl	80097f8 <SST25_Start>
	uint8_t cmd[] = {FLASH_WRITE_STATUS, Status};
 8009848:	2301      	movs	r3, #1
 800984a:	f88d 3004 	strb.w	r3, [sp, #4]
 800984e:	f88d 4005 	strb.w	r4, [sp, #5]
	SST25_SPI_WriteBlock(cmd, 2);
 8009852:	2102      	movs	r1, #2
 8009854:	a801      	add	r0, sp, #4
 8009856:	f000 f95f 	bl	8009b18 <SST25_SPI_WriteBlock>
	SST25_End();
 800985a:	f7ff ffdb 	bl	8009814 <SST25_End>
}
 800985e:	b002      	add	sp, #8
 8009860:	bd10      	pop	{r4, pc}

08009862 <SST25_WriteEnable>:
{
 8009862:	b508      	push	{r3, lr}
	SST25_Start();
 8009864:	f7ff ffc8 	bl	80097f8 <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_WRITE_ENABLE);
 8009868:	2006      	movs	r0, #6
 800986a:	f000 f96d 	bl	8009b48 <SST25_SPI_ReadWriteByte>
	SST25_End();
 800986e:	f7ff ffd1 	bl	8009814 <SST25_End>
}
 8009872:	bd08      	pop	{r3, pc}

08009874 <SST25_EnableHardware_EOW>:
{
 8009874:	b508      	push	{r3, lr}
	SST25_Start();
 8009876:	f7ff ffbf 	bl	80097f8 <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_ENABLE_SO);
 800987a:	2070      	movs	r0, #112	@ 0x70
 800987c:	f000 f964 	bl	8009b48 <SST25_SPI_ReadWriteByte>
	SST25_End();
 8009880:	f7ff ffc8 	bl	8009814 <SST25_End>
}
 8009884:	bd08      	pop	{r3, pc}
	...

08009888 <SST25_ReadStatus>:
{
 8009888:	b500      	push	{lr}
 800988a:	b085      	sub	sp, #20
	SST25_Start();
 800988c:	f7ff ffb4 	bl	80097f8 <SST25_Start>
	uint8_t Command[] = {FLASH_READ_STATUS, 0x00};
 8009890:	2305      	movs	r3, #5
 8009892:	f8ad 300c 	strh.w	r3, [sp, #12]
	if ((HAL_Result = HAL_SPI_TransmitReceive(&hspi3, Command, Received, 2, 1000)) != HAL_OK)
 8009896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	2302      	movs	r3, #2
 800989e:	aa02      	add	r2, sp, #8
 80098a0:	a903      	add	r1, sp, #12
 80098a2:	4807      	ldr	r0, [pc, #28]	@ (80098c0 <SST25_ReadStatus+0x38>)
 80098a4:	f7fa fb63 	bl	8003f6e <HAL_SPI_TransmitReceive>
 80098a8:	b930      	cbnz	r0, 80098b8 <SST25_ReadStatus+0x30>
	SST25_End();
 80098aa:	f7ff ffb3 	bl	8009814 <SST25_End>
}
 80098ae:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80098b2:	b005      	add	sp, #20
 80098b4:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80098b8:	f004 fbec 	bl	800e094 <Error_Handler>
 80098bc:	e7f5      	b.n	80098aa <SST25_ReadStatus+0x22>
 80098be:	bf00      	nop
 80098c0:	2001777c 	.word	0x2001777c

080098c4 <SST25_EraseSector_4K>:
{
 80098c4:	b510      	push	{r4, lr}
 80098c6:	b082      	sub	sp, #8
	Address &= 0xFFFFFF;
 80098c8:	f020 447f 	bic.w	r4, r0, #4278190080	@ 0xff000000
	SST25_WriteStatus(0x00); // Clear all sector protection
 80098cc:	2000      	movs	r0, #0
 80098ce:	f7ff ffaf 	bl	8009830 <SST25_WriteStatus>
	SST25_WriteEnable();
 80098d2:	f7ff ffc6 	bl	8009862 <SST25_WriteEnable>
	SST25_Start();
 80098d6:	f7ff ff8f 	bl	80097f8 <SST25_Start>
	uint8_t cmd[] =
 80098da:	2320      	movs	r3, #32
 80098dc:	f88d 3004 	strb.w	r3, [sp, #4]
			(Address >> 16) & 0xFF,
 80098e0:	0c23      	lsrs	r3, r4, #16
	uint8_t cmd[] =
 80098e2:	f88d 3005 	strb.w	r3, [sp, #5]
			(Address >> 8) & 0xFF,
 80098e6:	0a23      	lsrs	r3, r4, #8
	uint8_t cmd[] =
 80098e8:	f88d 3006 	strb.w	r3, [sp, #6]
 80098ec:	f88d 4007 	strb.w	r4, [sp, #7]
	SST25_SPI_WriteBlock(cmd, 4);
 80098f0:	2104      	movs	r1, #4
 80098f2:	eb0d 0001 	add.w	r0, sp, r1
 80098f6:	f000 f90f 	bl	8009b18 <SST25_SPI_WriteBlock>
	SST25_End();
 80098fa:	f7ff ff8b 	bl	8009814 <SST25_End>
	while (SST25_ReadStatus() & FLASH_SBIT_BUSY);
 80098fe:	f7ff ffc3 	bl	8009888 <SST25_ReadStatus>
 8009902:	f010 0f01 	tst.w	r0, #1
 8009906:	d1fa      	bne.n	80098fe <SST25_EraseSector_4K+0x3a>
}
 8009908:	b002      	add	sp, #8
 800990a:	bd10      	pop	{r4, pc}

0800990c <SST25_WriteByte>:
{
 800990c:	b530      	push	{r4, r5, lr}
 800990e:	b083      	sub	sp, #12
 8009910:	4604      	mov	r4, r0
 8009912:	460d      	mov	r5, r1
	if (!(SST25_ReadStatus() & FLASH_SBIT_WRITE_ENABLE))
 8009914:	f7ff ffb8 	bl	8009888 <SST25_ReadStatus>
 8009918:	f010 0f01 	tst.w	r0, #1
 800991c:	d018      	beq.n	8009950 <SST25_WriteByte+0x44>
	Address &= 0xFFFFFF;
 800991e:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
	SST25_Start();
 8009922:	f7ff ff69 	bl	80097f8 <SST25_Start>
	uint8_t cmd[] =
 8009926:	2302      	movs	r3, #2
 8009928:	f88d 3000 	strb.w	r3, [sp]
			(Address >> 16) & 0xFF,
 800992c:	0c23      	lsrs	r3, r4, #16
	uint8_t cmd[] =
 800992e:	f88d 3001 	strb.w	r3, [sp, #1]
			(Address >> 8) & 0xFF,
 8009932:	0a23      	lsrs	r3, r4, #8
	uint8_t cmd[] =
 8009934:	f88d 3002 	strb.w	r3, [sp, #2]
 8009938:	f88d 4003 	strb.w	r4, [sp, #3]
 800993c:	f88d 5004 	strb.w	r5, [sp, #4]
	SST25_SPI_WriteBlock(cmd, 5);
 8009940:	2105      	movs	r1, #5
 8009942:	4668      	mov	r0, sp
 8009944:	f000 f8e8 	bl	8009b18 <SST25_SPI_WriteBlock>
	SST25_End();
 8009948:	f7ff ff64 	bl	8009814 <SST25_End>
}
 800994c:	b003      	add	sp, #12
 800994e:	bd30      	pop	{r4, r5, pc}
		SST25_WriteEnable();
 8009950:	f7ff ff87 	bl	8009862 <SST25_WriteEnable>
 8009954:	e7e3      	b.n	800991e <SST25_WriteByte+0x12>
	...

08009958 <SST25_WriteBlock>:
{
 8009958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995c:	b082      	sub	sp, #8
 800995e:	4604      	mov	r4, r0
 8009960:	460e      	mov	r6, r1
 8009962:	4617      	mov	r7, r2
	if (!(SST25_ReadStatus() & FLASH_SBIT_WRITE_ENABLE))
 8009964:	f7ff ff90 	bl	8009888 <SST25_ReadStatus>
 8009968:	f010 0f01 	tst.w	r0, #1
 800996c:	d019      	beq.n	80099a2 <SST25_WriteBlock+0x4a>
	SST25_EnableHardware_EOW();
 800996e:	f7ff ff81 	bl	8009874 <SST25_EnableHardware_EOW>
	Address &= 0xFFFFFF;
 8009972:	f024 487f 	bic.w	r8, r4, #4278190080	@ 0xff000000
	uint8_t Address_cmd[] =
 8009976:	23ad      	movs	r3, #173	@ 0xad
 8009978:	f88d 3004 	strb.w	r3, [sp, #4]
			(Address >> 16) & 0xFF,
 800997c:	f3c4 4307 	ubfx	r3, r4, #16, #8
	uint8_t Address_cmd[] =
 8009980:	f88d 3005 	strb.w	r3, [sp, #5]
			(Address >> 8) & 0xFF,
 8009984:	f3c4 240f 	ubfx	r4, r4, #8, #16
	uint8_t Address_cmd[] =
 8009988:	f88d 4006 	strb.w	r4, [sp, #6]
 800998c:	f88d 8007 	strb.w	r8, [sp, #7]
	uint8_t DataCommand[3] = {FLASH_AAI, 0x00, 0x00};
 8009990:	4b2a      	ldr	r3, [pc, #168]	@ (8009a3c <SST25_WriteBlock+0xe4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f8ad 3000 	strh.w	r3, [sp]
 8009998:	0c1b      	lsrs	r3, r3, #16
 800999a:	f88d 3002 	strb.w	r3, [sp, #2]
	uint16_t NumBytesWritten = 0;
 800999e:	2400      	movs	r4, #0
	while ((NumBytesRemaining = NumBytes - NumBytesWritten) > 1)
 80099a0:	e019      	b.n	80099d6 <SST25_WriteBlock+0x7e>
		SST25_WriteEnable();
 80099a2:	f7ff ff5e 	bl	8009862 <SST25_WriteEnable>
 80099a6:	e7e2      	b.n	800996e <SST25_WriteBlock+0x16>
			SST25_SPI_WriteBlock(Address_cmd, 4);
 80099a8:	2104      	movs	r1, #4
 80099aa:	eb0d 0001 	add.w	r0, sp, r1
 80099ae:	f000 f8b3 	bl	8009b18 <SST25_SPI_WriteBlock>
 80099b2:	e018      	b.n	80099e6 <SST25_WriteBlock+0x8e>
			SST25_SPI_WriteBlock(DataCommand, 3);
 80099b4:	2103      	movs	r1, #3
 80099b6:	4668      	mov	r0, sp
 80099b8:	f000 f8ae 	bl	8009b18 <SST25_SPI_WriteBlock>
		SST25_End();
 80099bc:	f7ff ff2a 	bl	8009814 <SST25_End>
		SST25_Start();
 80099c0:	f7ff ff1a 	bl	80097f8 <SST25_Start>
		while (!HAL_GPIO_ReadPin(GENSPI_MISO_GPIO_Port, GENSPI_MISO_Pin));
 80099c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80099c8:	481d      	ldr	r0, [pc, #116]	@ (8009a40 <SST25_WriteBlock+0xe8>)
 80099ca:	f7f7 fa25 	bl	8000e18 <HAL_GPIO_ReadPin>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d0f8      	beq.n	80099c4 <SST25_WriteBlock+0x6c>
		SST25_End();
 80099d2:	f7ff ff1f 	bl	8009814 <SST25_End>
	while ((NumBytesRemaining = NumBytes - NumBytesWritten) > 1)
 80099d6:	1b3d      	subs	r5, r7, r4
 80099d8:	b2ad      	uxth	r5, r5
 80099da:	2d01      	cmp	r5, #1
 80099dc:	d915      	bls.n	8009a0a <SST25_WriteBlock+0xb2>
		SST25_Start();
 80099de:	f7ff ff0b 	bl	80097f8 <SST25_Start>
		if (!NumBytesWritten)
 80099e2:	2c00      	cmp	r4, #0
 80099e4:	d0e0      	beq.n	80099a8 <SST25_WriteBlock+0x50>
		DataCommand[1] = pBlock[NumBytesWritten++];
 80099e6:	1c63      	adds	r3, r4, #1
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	5d32      	ldrb	r2, [r6, r4]
 80099ec:	f88d 2001 	strb.w	r2, [sp, #1]
		DataCommand[2] = pBlock[NumBytesWritten++];
 80099f0:	3402      	adds	r4, #2
 80099f2:	b2a4      	uxth	r4, r4
 80099f4:	5cf3      	ldrb	r3, [r6, r3]
 80099f6:	f88d 3002 	strb.w	r3, [sp, #2]
		if (NumBytesWritten <= 2)
 80099fa:	2c02      	cmp	r4, #2
 80099fc:	d8da      	bhi.n	80099b4 <SST25_WriteBlock+0x5c>
			SST25_SPI_WriteBlock(DataCommand + 1, 2);
 80099fe:	2102      	movs	r1, #2
 8009a00:	f10d 0001 	add.w	r0, sp, #1
 8009a04:	f000 f888 	bl	8009b18 <SST25_SPI_WriteBlock>
 8009a08:	e7d8      	b.n	80099bc <SST25_WriteBlock+0x64>
	SST25_Start();
 8009a0a:	f7ff fef5 	bl	80097f8 <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_WRITE_DISABLE);
 8009a0e:	2004      	movs	r0, #4
 8009a10:	f000 f89a 	bl	8009b48 <SST25_SPI_ReadWriteByte>
	SST25_End();
 8009a14:	f7ff fefe 	bl	8009814 <SST25_End>
	SST25_Start();
 8009a18:	f7ff feee 	bl	80097f8 <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_DISABLE_SO);
 8009a1c:	2080      	movs	r0, #128	@ 0x80
 8009a1e:	f000 f893 	bl	8009b48 <SST25_SPI_ReadWriteByte>
	SST25_End();
 8009a22:	f7ff fef7 	bl	8009814 <SST25_End>
	if (NumBytesRemaining)
 8009a26:	b915      	cbnz	r5, 8009a2e <SST25_WriteBlock+0xd6>
}
 8009a28:	b002      	add	sp, #8
 8009a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		SST25_WriteByte(Address + NumBytesWritten, pBlock[NumBytesWritten]);
 8009a2e:	5d31      	ldrb	r1, [r6, r4]
 8009a30:	eb04 0008 	add.w	r0, r4, r8
 8009a34:	f7ff ff6a 	bl	800990c <SST25_WriteByte>
}
 8009a38:	e7f6      	b.n	8009a28 <SST25_WriteBlock+0xd0>
 8009a3a:	bf00      	nop
 8009a3c:	08012710 	.word	0x08012710
 8009a40:	40020800 	.word	0x40020800

08009a44 <SST25_ReadBlock>:
{
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	460d      	mov	r5, r1
 8009a4a:	4616      	mov	r6, r2
	Address &= 0xFFFFFF;
 8009a4c:	f020 447f 	bic.w	r4, r0, #4278190080	@ 0xff000000
	SST25_Start();
 8009a50:	f7ff fed2 	bl	80097f8 <SST25_Start>
	uint8_t Command[] =
 8009a54:	230b      	movs	r3, #11
 8009a56:	f88d 3000 	strb.w	r3, [sp]
			(Address >> 16) & 0xFF,
 8009a5a:	0c23      	lsrs	r3, r4, #16
	uint8_t Command[] =
 8009a5c:	f88d 3001 	strb.w	r3, [sp, #1]
			(Address >> 8) & 0xFF,
 8009a60:	0a23      	lsrs	r3, r4, #8
	uint8_t Command[] =
 8009a62:	f88d 3002 	strb.w	r3, [sp, #2]
 8009a66:	f88d 4003 	strb.w	r4, [sp, #3]
 8009a6a:	23ff      	movs	r3, #255	@ 0xff
 8009a6c:	f88d 3004 	strb.w	r3, [sp, #4]
	SST25_SPI_WriteBlock(Command, 5);
 8009a70:	2105      	movs	r1, #5
 8009a72:	4668      	mov	r0, sp
 8009a74:	f000 f850 	bl	8009b18 <SST25_SPI_WriteBlock>
	SST25_SPI_ReadBlock(pBlock, NumBytes);
 8009a78:	4631      	mov	r1, r6
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f000 f858 	bl	8009b30 <SST25_SPI_ReadBlock>
	SST25_End();
 8009a80:	f7ff fec8 	bl	8009814 <SST25_End>
}
 8009a84:	b002      	add	sp, #8
 8009a86:	bd70      	pop	{r4, r5, r6, pc}

08009a88 <HandleHALResult>:

///////////////////////////////////////////////////////////////////////////////

void HandleHALResult(HAL_StatusTypeDef Value, char *pText)
{
  if (Value != HAL_OK)
 8009a88:	b900      	cbnz	r0, 8009a8c <HandleHALResult+0x4>
 8009a8a:	4770      	bx	lr
{
 8009a8c:	b508      	push	{r3, lr}
  {
//    LCD_UsrLog("HAL error: %s\n", pText);
//    Error_Handler();
    HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); // !!!
 8009a8e:	2102      	movs	r1, #2
 8009a90:	4801      	ldr	r0, [pc, #4]	@ (8009a98 <HandleHALResult+0x10>)
 8009a92:	f7f7 f9ce 	bl	8000e32 <HAL_GPIO_TogglePin>
  }
}
 8009a96:	bd08      	pop	{r3, pc}
 8009a98:	40020000 	.word	0x40020000

08009a9c <I2C_write>:

///////////////////////////////////////////////////////////////////////////////
// For AR10101.c and Si4684 etc.c:

void I2C_write(uint8_t Address, uint8_t *pData, uint16_t NumBytes)
{
 8009a9c:	b500      	push	{lr}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	4613      	mov	r3, r2
  HandleHALResult(HAL_I2C_Master_Transmit(&hi2c1, Address << 1, pData, NumBytes, 1000), "HAL_I2C_Master_Transmit");
 8009aa2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009aa6:	9200      	str	r2, [sp, #0]
 8009aa8:	460a      	mov	r2, r1
 8009aaa:	0041      	lsls	r1, r0, #1
 8009aac:	4804      	ldr	r0, [pc, #16]	@ (8009ac0 <I2C_write+0x24>)
 8009aae:	f7f7 fc29 	bl	8001304 <HAL_I2C_Master_Transmit>
 8009ab2:	4904      	ldr	r1, [pc, #16]	@ (8009ac4 <I2C_write+0x28>)
 8009ab4:	f7ff ffe8 	bl	8009a88 <HandleHALResult>
}
 8009ab8:	b003      	add	sp, #12
 8009aba:	f85d fb04 	ldr.w	pc, [sp], #4
 8009abe:	bf00      	nop
 8009ac0:	20017398 	.word	0x20017398
 8009ac4:	080127e0 	.word	0x080127e0

08009ac8 <I2C_read>:

void I2C_read(uint8_t Address, uint8_t *pData, uint16_t NumBytes)
{
 8009ac8:	b500      	push	{lr}
 8009aca:	b083      	sub	sp, #12
 8009acc:	4613      	mov	r3, r2
  HandleHALResult(HAL_I2C_Master_Receive(&hi2c1, Address << 1, pData, NumBytes, 1000), "HAL_I2C_Master_Receive");
 8009ace:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009ad2:	9200      	str	r2, [sp, #0]
 8009ad4:	460a      	mov	r2, r1
 8009ad6:	0041      	lsls	r1, r0, #1
 8009ad8:	4804      	ldr	r0, [pc, #16]	@ (8009aec <I2C_read+0x24>)
 8009ada:	f7f7 fcd1 	bl	8001480 <HAL_I2C_Master_Receive>
 8009ade:	4904      	ldr	r1, [pc, #16]	@ (8009af0 <I2C_read+0x28>)
 8009ae0:	f7ff ffd2 	bl	8009a88 <HandleHALResult>
}
 8009ae4:	b003      	add	sp, #12
 8009ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009aea:	bf00      	nop
 8009aec:	20017398 	.word	0x20017398
 8009af0:	080127f8 	.word	0x080127f8

08009af4 <GetAPB1TimerClockFrequency>:

///////////////////////////////////////////////////////////////////////////////
// MCU stuff:

uint32_t GetAPB1TimerClockFrequency()
{
 8009af4:	b530      	push	{r4, r5, lr}
 8009af6:	b0a5      	sub	sp, #148	@ 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  uint32_t Result;

  Result = 2 * HAL_RCC_GetPCLK1Freq();
 8009af8:	f7f8 fd78 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8009afc:	4604      	mov	r4, r0
 8009afe:	0045      	lsls	r5, r0, #1

  HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInit);
 8009b00:	4668      	mov	r0, sp
 8009b02:	f7f9 f8b5 	bl	8002c70 <HAL_RCCEx_GetPeriphCLKConfig>

  if (PeriphClkInit.TIMPresSelection == RCC_TIMPRES_ACTIVATED)
 8009b06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b0c:	d002      	beq.n	8009b14 <GetAPB1TimerClockFrequency+0x20>
    Result *= 2;

  return Result;
}
 8009b0e:	4628      	mov	r0, r5
 8009b10:	b025      	add	sp, #148	@ 0x94
 8009b12:	bd30      	pop	{r4, r5, pc}
    Result *= 2;
 8009b14:	00a5      	lsls	r5, r4, #2
  return Result;
 8009b16:	e7fa      	b.n	8009b0e <GetAPB1TimerClockFrequency+0x1a>

08009b18 <SST25_SPI_WriteBlock>:

///////////////////////////////////////////////////////////////////////////////
// For SST25V_flash.c:

void SST25_SPI_WriteBlock(uint8_t *pBlock, uint16_t NumBytes)
{
 8009b18:	b508      	push	{r3, lr}
 8009b1a:	460a      	mov	r2, r1
  HAL_SPI_Transmit(&hspi3, pBlock, NumBytes, 1000);
 8009b1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009b20:	4601      	mov	r1, r0
 8009b22:	4802      	ldr	r0, [pc, #8]	@ (8009b2c <SST25_SPI_WriteBlock+0x14>)
 8009b24:	f7fa f928 	bl	8003d78 <HAL_SPI_Transmit>
}
 8009b28:	bd08      	pop	{r3, pc}
 8009b2a:	bf00      	nop
 8009b2c:	2001777c 	.word	0x2001777c

08009b30 <SST25_SPI_ReadBlock>:

void SST25_SPI_ReadBlock(uint8_t *pBlock, uint16_t NumBytes)
{
 8009b30:	b508      	push	{r3, lr}
 8009b32:	460a      	mov	r2, r1
  HAL_SPI_Receive(&hspi3, pBlock, NumBytes, 1000);
 8009b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009b38:	4601      	mov	r1, r0
 8009b3a:	4802      	ldr	r0, [pc, #8]	@ (8009b44 <SST25_SPI_ReadBlock+0x14>)
 8009b3c:	f7fa fb83 	bl	8004246 <HAL_SPI_Receive>
}
 8009b40:	bd08      	pop	{r3, pc}
 8009b42:	bf00      	nop
 8009b44:	2001777c 	.word	0x2001777c

08009b48 <SST25_SPI_ReadWriteByte>:

uint8_t SST25_SPI_ReadWriteByte(uint8_t Value)
{
 8009b48:	b500      	push	{lr}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	f88d 000f 	strb.w	r0, [sp, #15]
  uint8_t Received;

  HAL_SPI_TransmitReceive(&hspi3, &Value, &Received, 1, 1000);
 8009b50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	2301      	movs	r3, #1
 8009b58:	f10d 0217 	add.w	r2, sp, #23
 8009b5c:	f10d 010f 	add.w	r1, sp, #15
 8009b60:	4803      	ldr	r0, [pc, #12]	@ (8009b70 <SST25_SPI_ReadWriteByte+0x28>)
 8009b62:	f7fa fa04 	bl	8003f6e <HAL_SPI_TransmitReceive>

  return Received;
}
 8009b66:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8009b6a:	b007      	add	sp, #28
 8009b6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b70:	2001777c 	.word	0x2001777c

08009b74 <SST25_SPI_Begin>:

void SST25_SPI_Begin()
{
 8009b74:	b508      	push	{r3, lr}
  if (pGenSPI_Begin)
 8009b76:	4b05      	ldr	r3, [pc, #20]	@ (8009b8c <SST25_SPI_Begin+0x18>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	b103      	cbz	r3, 8009b7e <SST25_SPI_Begin+0xa>
    (*pGenSPI_Begin)();
 8009b7c:	4798      	blx	r3
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, 0);
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009b84:	4802      	ldr	r0, [pc, #8]	@ (8009b90 <SST25_SPI_Begin+0x1c>)
 8009b86:	f7f7 f94e 	bl	8000e26 <HAL_GPIO_WritePin>
}
 8009b8a:	bd08      	pop	{r3, pc}
 8009b8c:	20013238 	.word	0x20013238
 8009b90:	40020800 	.word	0x40020800

08009b94 <SST25_SPI_End>:

void SST25_SPI_End()
{
 8009b94:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, 1);
 8009b96:	2201      	movs	r2, #1
 8009b98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009b9c:	4803      	ldr	r0, [pc, #12]	@ (8009bac <SST25_SPI_End+0x18>)
 8009b9e:	f7f7 f942 	bl	8000e26 <HAL_GPIO_WritePin>
  if (pGenSPI_End)
 8009ba2:	4b03      	ldr	r3, [pc, #12]	@ (8009bb0 <SST25_SPI_End+0x1c>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	b103      	cbz	r3, 8009baa <SST25_SPI_End+0x16>
    (*pGenSPI_End)();
 8009ba8:	4798      	blx	r3
}
 8009baa:	bd08      	pop	{r3, pc}
 8009bac:	40020800 	.word	0x40020800
 8009bb0:	20013234 	.word	0x20013234

08009bb4 <LCD_BacklightOn>:

///////////////////////////////////////////////////////////////////////////////
// LCD:

void LCD_BacklightOn(uint8_t Value)
{
 8009bb4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LCD_NBACKLIGHT_GPIO_Port, LCD_NBACKLIGHT_Pin, Value ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8009bb6:	fab0 f280 	clz	r2, r0
 8009bba:	0952      	lsrs	r2, r2, #5
 8009bbc:	2108      	movs	r1, #8
 8009bbe:	4802      	ldr	r0, [pc, #8]	@ (8009bc8 <LCD_BacklightOn+0x14>)
 8009bc0:	f7f7 f931 	bl	8000e26 <HAL_GPIO_WritePin>
}
 8009bc4:	bd08      	pop	{r3, pc}
 8009bc6:	bf00      	nop
 8009bc8:	40020800 	.word	0x40020800

08009bcc <SetLED>:

///////////////////////////////////////////////////////////////////////////////
// LEDs:

void SetLED(LED_t LED, uint8_t Value)
{
 8009bcc:	b508      	push	{r3, lr}
 8009bce:	460a      	mov	r2, r1
  switch(LED)
 8009bd0:	2802      	cmp	r0, #2
 8009bd2:	d008      	beq.n	8009be6 <SetLED+0x1a>
 8009bd4:	2803      	cmp	r0, #3
 8009bd6:	d00b      	beq.n	8009bf0 <SetLED+0x24>
 8009bd8:	2801      	cmp	r0, #1
 8009bda:	d10e      	bne.n	8009bfa <SetLED+0x2e>
  {
    case LED_Red:
      HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, Value);
 8009bdc:	2102      	movs	r1, #2
 8009bde:	4808      	ldr	r0, [pc, #32]	@ (8009c00 <SetLED+0x34>)
 8009be0:	f7f7 f921 	bl	8000e26 <HAL_GPIO_WritePin>
      break;
    default:
      Error_Handler();
      break;
  }
}
 8009be4:	bd08      	pop	{r3, pc}
      HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, Value);
 8009be6:	2104      	movs	r1, #4
 8009be8:	4805      	ldr	r0, [pc, #20]	@ (8009c00 <SetLED+0x34>)
 8009bea:	f7f7 f91c 	bl	8000e26 <HAL_GPIO_WritePin>
      break;
 8009bee:	e7f9      	b.n	8009be4 <SetLED+0x18>
      HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, Value);
 8009bf0:	2108      	movs	r1, #8
 8009bf2:	4803      	ldr	r0, [pc, #12]	@ (8009c00 <SetLED+0x34>)
 8009bf4:	f7f7 f917 	bl	8000e26 <HAL_GPIO_WritePin>
      break;
 8009bf8:	e7f4      	b.n	8009be4 <SetLED+0x18>
      Error_Handler();
 8009bfa:	f004 fa4b 	bl	800e094 <Error_Handler>
}
 8009bfe:	e7f1      	b.n	8009be4 <SetLED+0x18>
 8009c00:	40020000 	.word	0x40020000

08009c04 <ToggleLED>:

void ToggleLED(LED_t LED)
{
 8009c04:	b508      	push	{r3, lr}
  switch(LED)
 8009c06:	2802      	cmp	r0, #2
 8009c08:	d008      	beq.n	8009c1c <ToggleLED+0x18>
 8009c0a:	2803      	cmp	r0, #3
 8009c0c:	d00b      	beq.n	8009c26 <ToggleLED+0x22>
 8009c0e:	2801      	cmp	r0, #1
 8009c10:	d10e      	bne.n	8009c30 <ToggleLED+0x2c>
  {
    case LED_Red:
      HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8009c12:	2102      	movs	r1, #2
 8009c14:	4808      	ldr	r0, [pc, #32]	@ (8009c38 <ToggleLED+0x34>)
 8009c16:	f7f7 f90c 	bl	8000e32 <HAL_GPIO_TogglePin>
      break;
    default:
      Error_Handler();
      break;
  }
}
 8009c1a:	bd08      	pop	{r3, pc}
      HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8009c1c:	2104      	movs	r1, #4
 8009c1e:	4806      	ldr	r0, [pc, #24]	@ (8009c38 <ToggleLED+0x34>)
 8009c20:	f7f7 f907 	bl	8000e32 <HAL_GPIO_TogglePin>
      break;
 8009c24:	e7f9      	b.n	8009c1a <ToggleLED+0x16>
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8009c26:	2108      	movs	r1, #8
 8009c28:	4803      	ldr	r0, [pc, #12]	@ (8009c38 <ToggleLED+0x34>)
 8009c2a:	f7f7 f902 	bl	8000e32 <HAL_GPIO_TogglePin>
      break;
 8009c2e:	e7f4      	b.n	8009c1a <ToggleLED+0x16>
      Error_Handler();
 8009c30:	f004 fa30 	bl	800e094 <Error_Handler>
}
 8009c34:	e7f1      	b.n	8009c1a <ToggleLED+0x16>
 8009c36:	bf00      	nop
 8009c38:	40020000 	.word	0x40020000

08009c3c <HandleError>:

///////////////////////////////////////////////////////////////////////////////

void HandleError()
{
 8009c3c:	b508      	push	{r3, lr}
  ToggleLED(LED_Red);
 8009c3e:	2001      	movs	r0, #1
 8009c40:	f7ff ffe0 	bl	8009c04 <ToggleLED>
}
 8009c44:	bd08      	pop	{r3, pc}
	...

08009c48 <IsUserButtonPressed>:

///////////////////////////////////////////////////////////////////////////////
// User button:

uint8_t IsUserButtonPressed()
{
 8009c48:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(NUserButton_GPIO_Port, NUserButton_Pin);
 8009c4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009c4e:	4803      	ldr	r0, [pc, #12]	@ (8009c5c <IsUserButtonPressed+0x14>)
 8009c50:	f7f7 f8e2 	bl	8000e18 <HAL_GPIO_ReadPin>
}
 8009c54:	fab0 f080 	clz	r0, r0
 8009c58:	0940      	lsrs	r0, r0, #5
 8009c5a:	bd08      	pop	{r3, pc}
 8009c5c:	40020800 	.word	0x40020800

08009c60 <I2S_SelectSource>:

///////////////////////////////////////////////////////////////////////////////
// I2S_Source:

void I2S_SelectSource(I2S_Source_t Source)
{
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(MUX_S0_GPIO_Port, MUX_S0_Pin, Source & 0x01);
 8009c64:	4d06      	ldr	r5, [pc, #24]	@ (8009c80 <I2S_SelectSource+0x20>)
 8009c66:	f000 0201 	and.w	r2, r0, #1
 8009c6a:	2104      	movs	r1, #4
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	f7f7 f8da 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_S1_GPIO_Port, MUX_S1_Pin, Source & 0x02);
 8009c72:	f004 0202 	and.w	r2, r4, #2
 8009c76:	2108      	movs	r1, #8
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f7f7 f8d4 	bl	8000e26 <HAL_GPIO_WritePin>
}
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	40020c00 	.word	0x40020c00

08009c84 <ADC_RegisterRead>:
// ADC (PCM1865):

#define ADC_I2C_Address 0x4A

uint8_t ADC_RegisterRead(uint8_t Index)
{
 8009c84:	b500      	push	{lr}
 8009c86:	b087      	sub	sp, #28
 8009c88:	4602      	mov	r2, r0
  uint8_t Result;
  HAL_StatusTypeDef HAL_Result;

  HAL_Result = HAL_I2C_Mem_Read(&hi2c1, ADC_I2C_Address << 1, Index, 1, &Result, 1, 1000);
 8009c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	2301      	movs	r3, #1
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	f10d 0117 	add.w	r1, sp, #23
 8009c98:	9100      	str	r1, [sp, #0]
 8009c9a:	2194      	movs	r1, #148	@ 0x94
 8009c9c:	4805      	ldr	r0, [pc, #20]	@ (8009cb4 <ADC_RegisterRead+0x30>)
 8009c9e:	f7f7 fd83 	bl	80017a8 <HAL_I2C_Mem_Read>
  if (HAL_Result != HAL_OK)
 8009ca2:	b920      	cbnz	r0, 8009cae <ADC_RegisterRead+0x2a>
    HandleError();

  return Result;
}
 8009ca4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8009ca8:	b007      	add	sp, #28
 8009caa:	f85d fb04 	ldr.w	pc, [sp], #4
    HandleError();
 8009cae:	f7ff ffc5 	bl	8009c3c <HandleError>
 8009cb2:	e7f7      	b.n	8009ca4 <ADC_RegisterRead+0x20>
 8009cb4:	20017398 	.word	0x20017398

08009cb8 <ADC_RegisterWrite>:

void ADC_RegisterWrite(uint8_t Index, uint8_t Value)
{
 8009cb8:	b500      	push	{lr}
 8009cba:	b085      	sub	sp, #20
  uint8_t Data[2];
  HAL_StatusTypeDef HAL_Result;

  Data[0] = Index;
 8009cbc:	f88d 000c 	strb.w	r0, [sp, #12]
  Data[1] = Value;
 8009cc0:	f88d 100d 	strb.w	r1, [sp, #13]

  HAL_Result = HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_Address << 1, Data, 2, 1000);
 8009cc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	2302      	movs	r3, #2
 8009ccc:	aa03      	add	r2, sp, #12
 8009cce:	2194      	movs	r1, #148	@ 0x94
 8009cd0:	4804      	ldr	r0, [pc, #16]	@ (8009ce4 <ADC_RegisterWrite+0x2c>)
 8009cd2:	f7f7 fb17 	bl	8001304 <HAL_I2C_Master_Transmit>
  if (HAL_Result != HAL_OK)
 8009cd6:	b910      	cbnz	r0, 8009cde <ADC_RegisterWrite+0x26>
    HandleError();
}
 8009cd8:	b005      	add	sp, #20
 8009cda:	f85d fb04 	ldr.w	pc, [sp], #4
    HandleError();
 8009cde:	f7ff ffad 	bl	8009c3c <HandleError>
}
 8009ce2:	e7f9      	b.n	8009cd8 <ADC_RegisterWrite+0x20>
 8009ce4:	20017398 	.word	0x20017398

08009ce8 <ADC_CheckPowerSupplies>:
{
  ADC_RegisterWrite(0x14, (Value & 0x0F) << 4);
}

void ADC_CheckPowerSupplies()
{
 8009ce8:	b508      	push	{r3, lr}
  uint8_t Value;

  Value = ADC_RegisterRead(0x78);
 8009cea:	2078      	movs	r0, #120	@ 0x78
 8009cec:	f7ff ffca 	bl	8009c84 <ADC_RegisterRead>

  if (!(Value || ~0x07))
    HandleError();
}
 8009cf0:	bd08      	pop	{r3, pc}

08009cf2 <ADC_SelectSource>:
  ADC_RegisterWrite(0x12, 0x44); // Set GPIO 1 and 0 to be outputs.
  ADC_RegisterWrite(0x13, 0x44); // Set GPIO 3 and 2 to be outputs.
}

void ADC_SelectSource(ADC_Source_t Source)
{
 8009cf2:	b510      	push	{r4, lr}
  uint8_t WriteValue;

  switch(Source)
 8009cf4:	2801      	cmp	r0, #1
 8009cf6:	d003      	beq.n	8009d00 <ADC_SelectSource+0xe>
 8009cf8:	2802      	cmp	r0, #2
 8009cfa:	d10b      	bne.n	8009d14 <ADC_SelectSource+0x22>
    case ADC_Source_AR1010:
      WriteValue = 0x41;
      break;

    case ADC_Source_BlueJack:
      WriteValue = 0x42;
 8009cfc:	2442      	movs	r4, #66	@ 0x42
 8009cfe:	e000      	b.n	8009d02 <ADC_SelectSource+0x10>
  switch(Source)
 8009d00:	2441      	movs	r4, #65	@ 0x41
    default:
      WriteValue = 0x40;
      break;
  }

  ADC_RegisterWrite(0x06, WriteValue);
 8009d02:	4621      	mov	r1, r4
 8009d04:	2006      	movs	r0, #6
 8009d06:	f7ff ffd7 	bl	8009cb8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x07, WriteValue);
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	2007      	movs	r0, #7
 8009d0e:	f7ff ffd3 	bl	8009cb8 <ADC_RegisterWrite>
}
 8009d12:	bd10      	pop	{r4, pc}
      WriteValue = 0x40;
 8009d14:	2440      	movs	r4, #64	@ 0x40
 8009d16:	e7f4      	b.n	8009d02 <ADC_SelectSource+0x10>

08009d18 <ADC_SetGain>:

void ADC_SetGain(float Value)
// -12dB to +32dB in 0.5dB steps.
{
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	ed2d 8b02 	vpush	{d8}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	ee08 0a10 	vmov	s16, r0
  uint8_t RegisterValue;

  if ((Value < -12.0f) || (Value > 32.0f))
 8009d24:	eefa 7a08 	vmov.f32	s15, #168	@ 0xc1400000 -12.0
 8009d28:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d30:	d406      	bmi.n	8009d40 <ADC_SetGain+0x28>
 8009d32:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8009d74 <ADC_SetGain+0x5c>
 8009d36:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3e:	dd01      	ble.n	8009d44 <ADC_SetGain+0x2c>
    Error_Handler();
 8009d40:	f004 f9a8 	bl	800e094 <Error_Handler>

  RegisterValue = (int)round(2.0f * Value);
 8009d44:	ee38 7a08 	vadd.f32	s14, s16, s16
 8009d48:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8009d4c:	feb8 7b47 	vrinta.f64	d7, d7
 8009d50:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009d54:	edcd 7a01 	vstr	s15, [sp, #4]
 8009d58:	f89d 4004 	ldrb.w	r4, [sp, #4]

  ADC_RegisterWrite(0x01, RegisterValue);
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	2001      	movs	r0, #1
 8009d60:	f7ff ffaa 	bl	8009cb8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x02, RegisterValue);
 8009d64:	4621      	mov	r1, r4
 8009d66:	2002      	movs	r0, #2
 8009d68:	f7ff ffa6 	bl	8009cb8 <ADC_RegisterWrite>
}
 8009d6c:	b002      	add	sp, #8
 8009d6e:	ecbd 8b02 	vpop	{d8}
 8009d72:	bd10      	pop	{r4, pc}
 8009d74:	42000000 	.word	0x42000000

08009d78 <ADC_Initialize>:
{
 8009d78:	b508      	push	{r3, lr}
  ADC_RegisterWrite(0x00, 0x00); // Default to bank 0.
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	f7ff ff9b 	bl	8009cb8 <ADC_RegisterWrite>
  ADC_CheckPowerSupplies();
 8009d82:	f7ff ffb1 	bl	8009ce8 <ADC_CheckPowerSupplies>
  ADC_SelectSource(ADC_Source_None);
 8009d86:	2000      	movs	r0, #0
 8009d88:	f7ff ffb3 	bl	8009cf2 <ADC_SelectSource>
  ADC_SetGain(0);
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	f7ff ffc3 	bl	8009d18 <ADC_SetGain>
  ADC_RegisterWrite(0x10, 0x00); // Set GPIO 1 and 0 to GPIO.
 8009d92:	2100      	movs	r1, #0
 8009d94:	2010      	movs	r0, #16
 8009d96:	f7ff ff8f 	bl	8009cb8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x11, 0x00); // Set GPIO 3 and 2 to GPIO.
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	2011      	movs	r0, #17
 8009d9e:	f7ff ff8b 	bl	8009cb8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x12, 0x44); // Set GPIO 1 and 0 to be outputs.
 8009da2:	2144      	movs	r1, #68	@ 0x44
 8009da4:	2012      	movs	r0, #18
 8009da6:	f7ff ff87 	bl	8009cb8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x13, 0x44); // Set GPIO 3 and 2 to be outputs.
 8009daa:	2144      	movs	r1, #68	@ 0x44
 8009dac:	2013      	movs	r0, #19
 8009dae:	f7ff ff83 	bl	8009cb8 <ADC_RegisterWrite>
}
 8009db2:	bd08      	pop	{r3, pc}

08009db4 <DAC_Mute>:
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
  DAC_Mute(1);
}

void DAC_Mute(uint8_t Value)
{
 8009db4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, Value ? 0 : 1);
 8009db6:	fab0 f280 	clz	r2, r0
 8009dba:	0952      	lsrs	r2, r2, #5
 8009dbc:	2140      	movs	r1, #64	@ 0x40
 8009dbe:	4802      	ldr	r0, [pc, #8]	@ (8009dc8 <DAC_Mute+0x14>)
 8009dc0:	f7f7 f831 	bl	8000e26 <HAL_GPIO_WritePin>
}
 8009dc4:	bd08      	pop	{r3, pc}
 8009dc6:	bf00      	nop
 8009dc8:	40020c00 	.word	0x40020c00

08009dcc <DAC_Initialize>:
{
 8009dcc:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, 0); // Latency.
 8009dce:	4c07      	ldr	r4, [pc, #28]	@ (8009dec <DAC_Initialize+0x20>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2110      	movs	r1, #16
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f7f7 f826 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
 8009dda:	2200      	movs	r2, #0
 8009ddc:	2120      	movs	r1, #32
 8009dde:	4620      	mov	r0, r4
 8009de0:	f7f7 f821 	bl	8000e26 <HAL_GPIO_WritePin>
  DAC_Mute(1);
 8009de4:	2001      	movs	r0, #1
 8009de6:	f7ff ffe5 	bl	8009db4 <DAC_Mute>
}
 8009dea:	bd10      	pop	{r4, pc}
 8009dec:	40020c00 	.word	0x40020c00

08009df0 <PA_RegisterWrite8>:
// PA (TAS5719):

#define PA_I2C_Address 0x2A

void PA_RegisterWrite8(uint8_t Index, uint8_t Value)
{
 8009df0:	b500      	push	{lr}
 8009df2:	b087      	sub	sp, #28
 8009df4:	4602      	mov	r2, r0
 8009df6:	f88d 1017 	strb.w	r1, [sp, #23]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 8009dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009dfe:	9302      	str	r3, [sp, #8]
 8009e00:	2301      	movs	r3, #1
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	f10d 0117 	add.w	r1, sp, #23
 8009e08:	9100      	str	r1, [sp, #0]
 8009e0a:	2154      	movs	r1, #84	@ 0x54
 8009e0c:	4804      	ldr	r0, [pc, #16]	@ (8009e20 <PA_RegisterWrite8+0x30>)
 8009e0e:	f7f7 fbf5 	bl	80015fc <HAL_I2C_Mem_Write>
 8009e12:	4904      	ldr	r1, [pc, #16]	@ (8009e24 <PA_RegisterWrite8+0x34>)
 8009e14:	f7ff fe38 	bl	8009a88 <HandleHALResult>
}
 8009e18:	b007      	add	sp, #28
 8009e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e1e:	bf00      	nop
 8009e20:	20017398 	.word	0x20017398
 8009e24:	08012810 	.word	0x08012810

08009e28 <PA_RegisterRead8>:

uint8_t PA_RegisterRead8(uint8_t Index)
{
 8009e28:	b500      	push	{lr}
 8009e2a:	b087      	sub	sp, #28
 8009e2c:	4602      	mov	r2, r0
  uint8_t Result;

  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, Index, 1, &Result, 1, 1000), "HAL_I2C_Mem_Read");
 8009e2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009e32:	9302      	str	r3, [sp, #8]
 8009e34:	2301      	movs	r3, #1
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	f10d 0117 	add.w	r1, sp, #23
 8009e3c:	9100      	str	r1, [sp, #0]
 8009e3e:	2154      	movs	r1, #84	@ 0x54
 8009e40:	4805      	ldr	r0, [pc, #20]	@ (8009e58 <PA_RegisterRead8+0x30>)
 8009e42:	f7f7 fcb1 	bl	80017a8 <HAL_I2C_Mem_Read>
 8009e46:	4905      	ldr	r1, [pc, #20]	@ (8009e5c <PA_RegisterRead8+0x34>)
 8009e48:	f7ff fe1e 	bl	8009a88 <HandleHALResult>

  return Result;
}
 8009e4c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8009e50:	b007      	add	sp, #28
 8009e52:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e56:	bf00      	nop
 8009e58:	20017398 	.word	0x20017398
 8009e5c:	08012824 	.word	0x08012824

08009e60 <PA_RegisterWrite16>:

void PA_RegisterWrite16(uint8_t Index, uint16_t Value)
{
 8009e60:	b500      	push	{lr}
 8009e62:	b087      	sub	sp, #28
 8009e64:	4602      	mov	r2, r0
  uint8_t Data[2];

  Data[0] = (uint8_t)(Value >> 8);
 8009e66:	0a0b      	lsrs	r3, r1, #8
 8009e68:	f88d 3014 	strb.w	r3, [sp, #20]
  Data[1] = (uint8_t)(Value);
 8009e6c:	f88d 1015 	strb.w	r1, [sp, #21]

  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 2, 1000), "HAL_I2C_Mem_Write");
 8009e70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009e74:	9302      	str	r3, [sp, #8]
 8009e76:	2302      	movs	r3, #2
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	ab05      	add	r3, sp, #20
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	2301      	movs	r3, #1
 8009e80:	2154      	movs	r1, #84	@ 0x54
 8009e82:	4804      	ldr	r0, [pc, #16]	@ (8009e94 <PA_RegisterWrite16+0x34>)
 8009e84:	f7f7 fbba 	bl	80015fc <HAL_I2C_Mem_Write>
 8009e88:	4903      	ldr	r1, [pc, #12]	@ (8009e98 <PA_RegisterWrite16+0x38>)
 8009e8a:	f7ff fdfd 	bl	8009a88 <HandleHALResult>
}
 8009e8e:	b007      	add	sp, #28
 8009e90:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e94:	20017398 	.word	0x20017398
 8009e98:	08012810 	.word	0x08012810

08009e9c <PA_RegisterWrite32>:

void PA_RegisterWrite32(uint8_t Index, uint32_t Value)
{
 8009e9c:	b500      	push	{lr}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	4602      	mov	r2, r0
  uint8_t Data[4];

  Data[0] = (uint8_t)(Value >> 24);
 8009ea2:	0e0b      	lsrs	r3, r1, #24
 8009ea4:	f88d 3014 	strb.w	r3, [sp, #20]
  Data[1] = (uint8_t)(Value >> 16);
 8009ea8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8009eac:	f88d 3015 	strb.w	r3, [sp, #21]
  Data[2] = (uint8_t)(Value >> 8);
 8009eb0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009eb4:	f88d 3016 	strb.w	r3, [sp, #22]
  Data[3] = (uint8_t)(Value);
 8009eb8:	f88d 1017 	strb.w	r1, [sp, #23]

  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 8009ebc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009ec0:	9302      	str	r3, [sp, #8]
 8009ec2:	2304      	movs	r3, #4
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	ab05      	add	r3, sp, #20
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	2301      	movs	r3, #1
 8009ecc:	2154      	movs	r1, #84	@ 0x54
 8009ece:	4804      	ldr	r0, [pc, #16]	@ (8009ee0 <PA_RegisterWrite32+0x44>)
 8009ed0:	f7f7 fb94 	bl	80015fc <HAL_I2C_Mem_Write>
 8009ed4:	4903      	ldr	r1, [pc, #12]	@ (8009ee4 <PA_RegisterWrite32+0x48>)
 8009ed6:	f7ff fdd7 	bl	8009a88 <HandleHALResult>
}
 8009eda:	b007      	add	sp, #28
 8009edc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ee0:	20017398 	.word	0x20017398
 8009ee4:	08012810 	.word	0x08012810

08009ee8 <PA_GetErrorStatus>:

  PA_Mute();
}

uint8_t PA_GetErrorStatus()
{
 8009ee8:	b508      	push	{r3, lr}
  return PA_RegisterRead8(0x02);
 8009eea:	2002      	movs	r0, #2
 8009eec:	f7ff ff9c 	bl	8009e28 <PA_RegisterRead8>
}
 8009ef0:	bd08      	pop	{r3, pc}

08009ef2 <PA_ClearErrorStatus>:

void PA_ClearErrorStatus()
{
 8009ef2:	b508      	push	{r3, lr}
  PA_RegisterWrite8(0x02, 0x00);
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	2002      	movs	r0, #2
 8009ef8:	f7ff ff7a 	bl	8009df0 <PA_RegisterWrite8>
}
 8009efc:	bd08      	pop	{r3, pc}
	...

08009f00 <PA_SetMasterVolume>:

void PA_SetMasterVolume(float Volume_dB)
{
 8009f00:	b508      	push	{r3, lr}
 8009f02:	ee07 0a10 	vmov	s14, r0
  uint16_t RegisterValue;

  if (Volume_dB > 24)
 8009f06:	eef3 7a08 	vmov.f32	s15, #56	@ 0x41c00000  24.0
 8009f0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f12:	dc09      	bgt.n	8009f28 <PA_SetMasterVolume+0x28>
    Volume_dB = 24;
  if (Volume_dB < -103.75)
 8009f14:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009f50 <PA_SetMasterVolume+0x50>
 8009f18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f20:	d504      	bpl.n	8009f2c <PA_SetMasterVolume+0x2c>
    Volume_dB = -103.75;
 8009f22:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8009f50 <PA_SetMasterVolume+0x50>
 8009f26:	e001      	b.n	8009f2c <PA_SetMasterVolume+0x2c>
    Volume_dB = 24;
 8009f28:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0

  RegisterValue = 8 * (24 - Volume_dB);
 8009f2c:	eef3 7a08 	vmov.f32	s15, #56	@ 0x41c00000  24.0
 8009f30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f34:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8009f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15

  PA_RegisterWrite16(0x07, RegisterValue);
 8009f40:	ee17 3a90 	vmov	r3, s15
 8009f44:	b299      	uxth	r1, r3
 8009f46:	2007      	movs	r0, #7
 8009f48:	f7ff ff8a 	bl	8009e60 <PA_RegisterWrite16>
}
 8009f4c:	bd08      	pop	{r3, pc}
 8009f4e:	bf00      	nop
 8009f50:	c2cf8000 	.word	0xc2cf8000

08009f54 <PA_Mute>:

void PA_Mute()
{
 8009f54:	b508      	push	{r3, lr}
  PA_RegisterWrite16(0x07, 0x03FF);
 8009f56:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009f5a:	2007      	movs	r0, #7
 8009f5c:	f7ff ff80 	bl	8009e60 <PA_RegisterWrite16>
}
 8009f60:	bd08      	pop	{r3, pc}
	...

08009f64 <PA_Initialize>:
{
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4605      	mov	r5, r0
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 0);
 8009f68:	4c1d      	ldr	r4, [pc, #116]	@ (8009fe0 <PA_Initialize+0x7c>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f7f6 ff59 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 0);
 8009f74:	2200      	movs	r2, #0
 8009f76:	2102      	movs	r1, #2
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f7f6 ff54 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8009f7e:	2001      	movs	r0, #1
 8009f80:	f7f6 fb7a 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 1);
 8009f84:	2201      	movs	r2, #1
 8009f86:	4611      	mov	r1, r2
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f7f6 ff4c 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8009f8e:	2001      	movs	r0, #1
 8009f90:	f7f6 fb72 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 1);
 8009f94:	2201      	movs	r2, #1
 8009f96:	2102      	movs	r1, #2
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7f6 ff44 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_Delay(10); // ???
 8009f9e:	200a      	movs	r0, #10
 8009fa0:	f7f6 fb6a 	bl	8000678 <HAL_Delay>
  PA_RegisterWrite32(0x4F, 0x00000007);
 8009fa4:	2107      	movs	r1, #7
 8009fa6:	204f      	movs	r0, #79	@ 0x4f
 8009fa8:	f7ff ff78 	bl	8009e9c <PA_RegisterWrite32>
  PA_RegisterWrite8(0x1B, 0x00);
 8009fac:	2100      	movs	r1, #0
 8009fae:	201b      	movs	r0, #27
 8009fb0:	f7ff ff1e 	bl	8009df0 <PA_RegisterWrite8>
  PA_RegisterWrite8(0x00, 0x6C);
 8009fb4:	216c      	movs	r1, #108	@ 0x6c
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	f7ff ff1a 	bl	8009df0 <PA_RegisterWrite8>
  if (HeadphoneMode)
 8009fbc:	b155      	cbz	r5, 8009fd4 <PA_Initialize+0x70>
    PA_RegisterWrite8(0x05, 0x01); // !!! Is this necessary?
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	2005      	movs	r0, #5
 8009fc2:	f7ff ff15 	bl	8009df0 <PA_RegisterWrite8>
    PA_RegisterWrite8(0x05, 0x13); // 0x13 or 0x1B. But 0x1B gives background noise and distortion.
 8009fc6:	2113      	movs	r1, #19
 8009fc8:	2005      	movs	r0, #5
 8009fca:	f7ff ff11 	bl	8009df0 <PA_RegisterWrite8>
  PA_Mute();
 8009fce:	f7ff ffc1 	bl	8009f54 <PA_Mute>
}
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
    PA_RegisterWrite8(0x05, 0x00);
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	2005      	movs	r0, #5
 8009fd8:	f7ff ff0a 	bl	8009df0 <PA_RegisterWrite8>
 8009fdc:	e7f7      	b.n	8009fce <PA_Initialize+0x6a>
 8009fde:	bf00      	nop
 8009fe0:	40020c00 	.word	0x40020c00

08009fe4 <ESP32_A_Enable>:

///////////////////////////////////////////////////////////////////////////////
// ESP32s:

void ESP32_A_Enable(uint8_t Value)
{
 8009fe4:	b508      	push	{r3, lr}
 8009fe6:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(ESP32_A_EN_GPIO_Port, ESP32_A_EN_Pin, Value);
 8009fe8:	2102      	movs	r1, #2
 8009fea:	4802      	ldr	r0, [pc, #8]	@ (8009ff4 <ESP32_A_Enable+0x10>)
 8009fec:	f7f6 ff1b 	bl	8000e26 <HAL_GPIO_WritePin>
}
 8009ff0:	bd08      	pop	{r3, pc}
 8009ff2:	bf00      	nop
 8009ff4:	40021000 	.word	0x40021000

08009ff8 <ESP32_B_Enable>:

void ESP32_B_Enable(uint8_t Value)
{
 8009ff8:	b508      	push	{r3, lr}
 8009ffa:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(ESP32_B_EN_GPIO_Port, ESP32_B_EN_Pin, Value);
 8009ffc:	2110      	movs	r1, #16
 8009ffe:	4802      	ldr	r0, [pc, #8]	@ (800a008 <ESP32_B_Enable+0x10>)
 800a000:	f7f6 ff11 	bl	8000e26 <HAL_GPIO_WritePin>
}
 800a004:	bd08      	pop	{r3, pc}
 800a006:	bf00      	nop
 800a008:	40021000 	.word	0x40021000

0800a00c <stream_create>:
#include "PJB_StreamUtils.h"

static void ensure_space(Stream *stream, uint16_t required_space);

Stream *stream_create()
{
 800a00c:	b508      	push	{r3, lr}
	Stream *stream = malloc(sizeof(Stream));
 800a00e:	208c      	movs	r0, #140	@ 0x8c
 800a010:	f004 ffce 	bl	800efb0 <malloc>
	stream->temp_size = 0;
 800a014:	2100      	movs	r1, #0
 800a016:	f8a0 1080 	strh.w	r1, [r0, #128]	@ 0x80
	stream->data_size = 2;
 800a01a:	2202      	movs	r2, #2
 800a01c:	f8a0 2088 	strh.w	r2, [r0, #136]	@ 0x88
	stream->data = NULL;
 800a020:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
	stream->read_address = 2;
 800a024:	f8a0 208a 	strh.w	r2, [r0, #138]	@ 0x8a
	return stream;
}
 800a028:	bd08      	pop	{r3, pc}

0800a02a <stream_load>:

Stream *stream_load(uint8_t *data, uint16_t size)
{
 800a02a:	b538      	push	{r3, r4, r5, lr}
 800a02c:	4604      	mov	r4, r0
 800a02e:	460d      	mov	r5, r1
	Stream *stream = malloc(sizeof(Stream));
 800a030:	208c      	movs	r0, #140	@ 0x8c
 800a032:	f004 ffbd 	bl	800efb0 <malloc>
	stream->temp_size = 0;
 800a036:	2200      	movs	r2, #0
 800a038:	f8a0 2080 	strh.w	r2, [r0, #128]	@ 0x80
	stream->data_size = size;
 800a03c:	f8a0 5088 	strh.w	r5, [r0, #136]	@ 0x88
	stream->data = data;
 800a040:	f8c0 4084 	str.w	r4, [r0, #132]	@ 0x84
	stream->read_address = 2;
 800a044:	2202      	movs	r2, #2
 800a046:	f8a0 208a 	strh.w	r2, [r0, #138]	@ 0x8a
	return stream;
}
 800a04a:	bd38      	pop	{r3, r4, r5, pc}

0800a04c <stream_free>:

void stream_free(Stream *stream)
{
	if (!stream)
 800a04c:	b150      	cbz	r0, 800a064 <stream_free+0x18>
{
 800a04e:	b510      	push	{r4, lr}
 800a050:	4604      	mov	r4, r0
		return;

	if (stream->data)
 800a052:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800a056:	b108      	cbz	r0, 800a05c <stream_free+0x10>
		free(stream->data);
 800a058:	f004 ffb2 	bl	800efc0 <free>

	free(stream);
 800a05c:	4620      	mov	r0, r4
 800a05e:	f004 ffaf 	bl	800efc0 <free>
}
 800a062:	bd10      	pop	{r4, pc}
 800a064:	4770      	bx	lr

0800a066 <stream_read_uint8>:
	stream->temp_size += size;
}

uint8_t stream_read_uint8(Stream *stream)
{
	return stream->data[stream->read_address++];
 800a066:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800a06a:	f8b0 308a 	ldrh.w	r3, [r0, #138]	@ 0x8a
 800a06e:	1c59      	adds	r1, r3, #1
 800a070:	f8a0 108a 	strh.w	r1, [r0, #138]	@ 0x8a
}
 800a074:	5cd0      	ldrb	r0, [r2, r3]
 800a076:	4770      	bx	lr

0800a078 <stream_read_uint32>:
	value |= (uint16_t) stream->data[stream->read_address++] << 8;
	return value;
}

uint32_t stream_read_uint32(Stream *stream)
{
 800a078:	b410      	push	{r4}
	uint32_t value = 0;
	value |= stream->data[stream->read_address++];
 800a07a:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800a07e:	f8b0 308a 	ldrh.w	r3, [r0, #138]	@ 0x8a
 800a082:	1c59      	adds	r1, r3, #1
 800a084:	b289      	uxth	r1, r1
 800a086:	f8a0 108a 	strh.w	r1, [r0, #138]	@ 0x8a
 800a08a:	5ce2      	ldrb	r2, [r4, r3]
	value |= (uint32_t) stream->data[stream->read_address++] << 8;
 800a08c:	f103 0c02 	add.w	ip, r3, #2
 800a090:	fa1f fc8c 	uxth.w	ip, ip
 800a094:	f8a0 c08a 	strh.w	ip, [r0, #138]	@ 0x8a
 800a098:	5c61      	ldrb	r1, [r4, r1]
 800a09a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	value |= (uint32_t) stream->data[stream->read_address++] << 16;
 800a09e:	1cd9      	adds	r1, r3, #3
 800a0a0:	b289      	uxth	r1, r1
 800a0a2:	f8a0 108a 	strh.w	r1, [r0, #138]	@ 0x8a
 800a0a6:	f814 c00c 	ldrb.w	ip, [r4, ip]
 800a0aa:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
	value |= (uint32_t) stream->data[stream->read_address++] << 24;
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	f8a0 308a 	strh.w	r3, [r0, #138]	@ 0x8a
 800a0b4:	5c60      	ldrb	r0, [r4, r1]
	return value;
}
 800a0b6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800a0ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <stream_read_bytes>:

void stream_read_bytes(Stream *stream, uint8_t *data, uint16_t size)
{
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	4615      	mov	r5, r2
	memcpy(data, stream->data + stream->read_address, size);
 800a0c8:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800a0cc:	f8b4 308a 	ldrh.w	r3, [r4, #138]	@ 0x8a
 800a0d0:	4419      	add	r1, r3
 800a0d2:	f005 ff36 	bl	800ff42 <memcpy>
	stream->read_address += size;
 800a0d6:	f8b4 308a 	ldrh.w	r3, [r4, #138]	@ 0x8a
 800a0da:	195a      	adds	r2, r3, r5
 800a0dc:	f8a4 208a 	strh.w	r2, [r4, #138]	@ 0x8a
}
 800a0e0:	bd38      	pop	{r3, r4, r5, pc}

0800a0e2 <stream_flush>:

	stream_flush(stream);
}

void stream_flush(Stream *stream)
{
 800a0e2:	b510      	push	{r4, lr}
 800a0e4:	4604      	mov	r4, r0
	stream->data = realloc(stream->data, stream->data_size + stream->temp_size);
 800a0e6:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
 800a0ea:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800a0ee:	4419      	add	r1, r3
 800a0f0:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800a0f4:	f005 f81a 	bl	800f12c <realloc>
 800a0f8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
	memcpy(stream->data + stream->data_size, stream->temp, stream->temp_size);
 800a0fc:	f8b4 3088 	ldrh.w	r3, [r4, #136]	@ 0x88
 800a100:	f8b4 2080 	ldrh.w	r2, [r4, #128]	@ 0x80
 800a104:	4621      	mov	r1, r4
 800a106:	4418      	add	r0, r3
 800a108:	f005 ff1b 	bl	800ff42 <memcpy>
	stream->data_size += stream->temp_size;
 800a10c:	f8b4 3088 	ldrh.w	r3, [r4, #136]	@ 0x88
 800a110:	f8b4 2080 	ldrh.w	r2, [r4, #128]	@ 0x80
 800a114:	4413      	add	r3, r2
 800a116:	b29b      	uxth	r3, r3
 800a118:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
	stream->temp_size = 0;
 800a11c:	2200      	movs	r2, #0
 800a11e:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80

	stream->data[0] = stream->data_size & 0xFF;
 800a122:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800a126:	7013      	strb	r3, [r2, #0]
	stream->data[1] = stream->data_size >> 8;
 800a128:	f8b4 3088 	ldrh.w	r3, [r4, #136]	@ 0x88
 800a12c:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800a130:	0a1b      	lsrs	r3, r3, #8
 800a132:	7053      	strb	r3, [r2, #1]
}
 800a134:	bd10      	pop	{r4, pc}

0800a136 <ensure_space>:
{
 800a136:	b508      	push	{r3, lr}
	if (stream->temp_size + required_space <= BUFFER_SIZE)
 800a138:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800a13c:	4419      	add	r1, r3
 800a13e:	2980      	cmp	r1, #128	@ 0x80
 800a140:	dc00      	bgt.n	800a144 <ensure_space+0xe>
}
 800a142:	bd08      	pop	{r3, pc}
	stream_flush(stream);
 800a144:	f7ff ffcd 	bl	800a0e2 <stream_flush>
 800a148:	e7fb      	b.n	800a142 <ensure_space+0xc>

0800a14a <stream_write_uint8>:
{
 800a14a:	b538      	push	{r3, r4, r5, lr}
 800a14c:	4604      	mov	r4, r0
 800a14e:	460d      	mov	r5, r1
	ensure_space(stream, 1);
 800a150:	2101      	movs	r1, #1
 800a152:	f7ff fff0 	bl	800a136 <ensure_space>
	stream->temp[stream->temp_size++] = value;
 800a156:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 800a160:	54e5      	strb	r5, [r4, r3]
}
 800a162:	bd38      	pop	{r3, r4, r5, pc}

0800a164 <stream_write_uint32>:
{
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4604      	mov	r4, r0
 800a168:	460d      	mov	r5, r1
	ensure_space(stream, 4);
 800a16a:	2104      	movs	r1, #4
 800a16c:	f7ff ffe3 	bl	800a136 <ensure_space>
	stream->temp[stream->temp_size++] = value & 0xFF;
 800a170:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	b292      	uxth	r2, r2
 800a178:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 800a17c:	54e5      	strb	r5, [r4, r3]
	stream->temp[stream->temp_size++] = (value >> 8) & 0xFF;
 800a17e:	0a28      	lsrs	r0, r5, #8
 800a180:	1c99      	adds	r1, r3, #2
 800a182:	b289      	uxth	r1, r1
 800a184:	f8a4 1080 	strh.w	r1, [r4, #128]	@ 0x80
 800a188:	54a0      	strb	r0, [r4, r2]
	stream->temp[stream->temp_size++] = (value >> 16) & 0xFF;
 800a18a:	0c28      	lsrs	r0, r5, #16
 800a18c:	1cda      	adds	r2, r3, #3
 800a18e:	b292      	uxth	r2, r2
 800a190:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 800a194:	5460      	strb	r0, [r4, r1]
	stream->temp[stream->temp_size++] = value >> 24;
 800a196:	0e2d      	lsrs	r5, r5, #24
 800a198:	3304      	adds	r3, #4
 800a19a:	f8a4 3080 	strh.w	r3, [r4, #128]	@ 0x80
 800a19e:	54a5      	strb	r5, [r4, r2]
}
 800a1a0:	bd38      	pop	{r3, r4, r5, pc}

0800a1a2 <stream_write_bytes>:
	if (size > BUFFER_SIZE)
 800a1a2:	2a80      	cmp	r2, #128	@ 0x80
 800a1a4:	d900      	bls.n	800a1a8 <stream_write_bytes+0x6>
 800a1a6:	4770      	bx	lr
{
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	460e      	mov	r6, r1
 800a1ae:	4614      	mov	r4, r2
	ensure_space(stream, size);
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	f7ff ffc0 	bl	800a136 <ensure_space>
	memcpy(stream->temp + stream->temp_size, data, size);
 800a1b6:	f8b5 0080 	ldrh.w	r0, [r5, #128]	@ 0x80
 800a1ba:	4622      	mov	r2, r4
 800a1bc:	4631      	mov	r1, r6
 800a1be:	4428      	add	r0, r5
 800a1c0:	f005 febf 	bl	800ff42 <memcpy>
	stream->temp_size += size;
 800a1c4:	f8b5 3080 	ldrh.w	r3, [r5, #128]	@ 0x80
 800a1c8:	4423      	add	r3, r4
 800a1ca:	f8a5 3080 	strh.w	r3, [r5, #128]	@ 0x80
}
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}

0800a1d0 <si468x_reset>:
static uint8_t update_interrupts = 0;

Interrupt_Status_t Interrupt_Status;

void si468x_reset(uint8_t Value)
{
 800a1d0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SI_NRST_GPIO_Port, SI_NRST_Pin, Value ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800a1d2:	fab0 f280 	clz	r2, r0
 800a1d6:	0952      	lsrs	r2, r2, #5
 800a1d8:	2140      	movs	r1, #64	@ 0x40
 800a1da:	4802      	ldr	r0, [pc, #8]	@ (800a1e4 <si468x_reset+0x14>)
 800a1dc:	f7f6 fe23 	bl	8000e26 <HAL_GPIO_WritePin>
}
 800a1e0:	bd08      	pop	{r3, pc}
 800a1e2:	bf00      	nop
 800a1e4:	40020400 	.word	0x40020400

0800a1e8 <si468x_interrupt>:
//      {
//        if (GPIO_Pin == SI_INT_Pin)
//          si468x_interrupt();
//      }
{
	update_interrupts = 1;
 800a1e8:	4b01      	ldr	r3, [pc, #4]	@ (800a1f0 <si468x_interrupt+0x8>)
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	701a      	strb	r2, [r3, #0]
}
 800a1ee:	4770      	bx	lr
 800a1f0:	20013241 	.word	0x20013241

0800a1f4 <si468x_read_response>:
	uint8_t error = si468x_read_response(read_buffer, 4);
	return error;
}

uint8_t si468x_read_response(uint8_t *response_buffer, uint16_t response_size)
{
 800a1f4:	b530      	push	{r4, r5, lr}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	460d      	mov	r5, r1
	uint8_t command = RD_REPLY;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f88d 3007 	strb.w	r3, [sp, #7]
	I2C_write(Si4684_ADDRESS, &command, 1);
 800a202:	2201      	movs	r2, #1
 800a204:	f10d 0107 	add.w	r1, sp, #7
 800a208:	2064      	movs	r0, #100	@ 0x64
 800a20a:	f7ff fc47 	bl	8009a9c <I2C_write>
	I2C_read(Si4684_ADDRESS, response_buffer, response_size);
 800a20e:	462a      	mov	r2, r5
 800a210:	4621      	mov	r1, r4
 800a212:	2064      	movs	r0, #100	@ 0x64
 800a214:	f7ff fc58 	bl	8009ac8 <I2C_read>
	return response_buffer[0] & 0x40 ? 1 : 0;
 800a218:	7820      	ldrb	r0, [r4, #0]
}
 800a21a:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800a21e:	b003      	add	sp, #12
 800a220:	bd30      	pop	{r4, r5, pc}
	...

0800a224 <si468x_update_interrupts>:
{
 800a224:	b500      	push	{lr}
 800a226:	b083      	sub	sp, #12
	si468x_read_response(&status_byte, 1);
 800a228:	2101      	movs	r1, #1
 800a22a:	f10d 0007 	add.w	r0, sp, #7
 800a22e:	f7ff ffe1 	bl	800a1f4 <si468x_read_response>
	while (status_byte == 0x00)
 800a232:	e004      	b.n	800a23e <si468x_update_interrupts+0x1a>
		si468x_read_response(&status_byte, 1); // !!!
 800a234:	2101      	movs	r1, #1
 800a236:	f10d 0007 	add.w	r0, sp, #7
 800a23a:	f7ff ffdb 	bl	800a1f4 <si468x_read_response>
	while (status_byte == 0x00)
 800a23e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0f6      	beq.n	800a234 <si468x_update_interrupts+0x10>
	Interrupt_Status.interrupt_register = status_byte;
 800a246:	4a04      	ldr	r2, [pc, #16]	@ (800a258 <si468x_update_interrupts+0x34>)
 800a248:	7013      	strb	r3, [r2, #0]
	update_interrupts = 0;
 800a24a:	4b04      	ldr	r3, [pc, #16]	@ (800a25c <si468x_update_interrupts+0x38>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	701a      	strb	r2, [r3, #0]
}
 800a250:	b003      	add	sp, #12
 800a252:	f85d fb04 	ldr.w	pc, [sp], #4
 800a256:	bf00      	nop
 800a258:	20013240 	.word	0x20013240
 800a25c:	20013241 	.word	0x20013241

0800a260 <si468x_wait_for_interrupt>:
{
 800a260:	b510      	push	{r4, lr}
 800a262:	4604      	mov	r4, r0
	uint8_t status = 0;
 800a264:	e003      	b.n	800a26e <si468x_wait_for_interrupt+0xe>
			si468x_update_interrupts();
 800a266:	f7ff ffdd 	bl	800a224 <si468x_update_interrupts>
 800a26a:	e004      	b.n	800a276 <si468x_wait_for_interrupt+0x16>
	} while (!status);
 800a26c:	b982      	cbnz	r2, 800a290 <si468x_wait_for_interrupt+0x30>
		if (update_interrupts)
 800a26e:	4b09      	ldr	r3, [pc, #36]	@ (800a294 <si468x_wait_for_interrupt+0x34>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1f7      	bne.n	800a266 <si468x_wait_for_interrupt+0x6>
		status = (Interrupt_Status.interrupt_register >> interrupt) & 0x01;
 800a276:	4b08      	ldr	r3, [pc, #32]	@ (800a298 <si468x_wait_for_interrupt+0x38>)
 800a278:	7819      	ldrb	r1, [r3, #0]
 800a27a:	fa41 f304 	asr.w	r3, r1, r4
 800a27e:	f003 0201 	and.w	r2, r3, #1
		if (interrupt == CTS)
 800a282:	2c07      	cmp	r4, #7
 800a284:	d1f2      	bne.n	800a26c <si468x_wait_for_interrupt+0xc>
			status |= (Interrupt_Status.interrupt_register >> ERR_CMD) & 0x01; //!!!
 800a286:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
 800a28a:	f003 0201 	and.w	r2, r3, #1
 800a28e:	e7ed      	b.n	800a26c <si468x_wait_for_interrupt+0xc>
}
 800a290:	bd10      	pop	{r4, pc}
 800a292:	bf00      	nop
 800a294:	20013241 	.word	0x20013241
 800a298:	20013240 	.word	0x20013240

0800a29c <si468x_execute_ext>:
{
 800a29c:	b510      	push	{r4, lr}
	if (use_interrupt)
 800a29e:	460c      	mov	r4, r1
 800a2a0:	b121      	cbz	r1, 800a2ac <si468x_execute_ext+0x10>
		Interrupt_Status.CTS = 0;
 800a2a2:	4a0a      	ldr	r2, [pc, #40]	@ (800a2cc <si468x_execute_ext+0x30>)
 800a2a4:	7813      	ldrb	r3, [r2, #0]
 800a2a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2aa:	7013      	strb	r3, [r2, #0]
	I2C_write(Si4684_ADDRESS, command->data, command->size);
 800a2ac:	8802      	ldrh	r2, [r0, #0]
 800a2ae:	6841      	ldr	r1, [r0, #4]
 800a2b0:	2064      	movs	r0, #100	@ 0x64
 800a2b2:	f7ff fbf3 	bl	8009a9c <I2C_write>
	if (use_interrupt)
 800a2b6:	b924      	cbnz	r4, 800a2c2 <si468x_execute_ext+0x26>
	uint8_t error = si468x_read_response(read_buffer, 4);
 800a2b8:	2104      	movs	r1, #4
 800a2ba:	4805      	ldr	r0, [pc, #20]	@ (800a2d0 <si468x_execute_ext+0x34>)
 800a2bc:	f7ff ff9a 	bl	800a1f4 <si468x_read_response>
}
 800a2c0:	bd10      	pop	{r4, pc}
		si468x_wait_for_interrupt(CTS);
 800a2c2:	2007      	movs	r0, #7
 800a2c4:	f7ff ffcc 	bl	800a260 <si468x_wait_for_interrupt>
 800a2c8:	e7f6      	b.n	800a2b8 <si468x_execute_ext+0x1c>
 800a2ca:	bf00      	nop
 800a2cc:	20013240 	.word	0x20013240
 800a2d0:	2001323c 	.word	0x2001323c

0800a2d4 <si468x_execute>:
{
 800a2d4:	b508      	push	{r3, lr}
	return si468x_execute_ext(command, patched);
 800a2d6:	4b02      	ldr	r3, [pc, #8]	@ (800a2e0 <si468x_execute+0xc>)
 800a2d8:	7819      	ldrb	r1, [r3, #0]
 800a2da:	f7ff ffdf 	bl	800a29c <si468x_execute_ext>
}
 800a2de:	bd08      	pop	{r3, pc}
 800a2e0:	20013242 	.word	0x20013242

0800a2e4 <si468x_build_command_ext>:
{
	return si468x_build_command_ext(command_id, args, num_args, 0, 0);
}

Si468x_Command *si468x_build_command_ext(uint8_t command_id, uint8_t *args, uint16_t num_args, uint8_t *data, uint16_t data_size)
{
 800a2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e8:	4680      	mov	r8, r0
 800a2ea:	460f      	mov	r7, r1
 800a2ec:	4614      	mov	r4, r2
 800a2ee:	461e      	mov	r6, r3
 800a2f0:	f8bd 9020 	ldrh.w	r9, [sp, #32]
	Si468x_Command *command = (Si468x_Command *) malloc(sizeof(Si468x_Command));
 800a2f4:	2008      	movs	r0, #8
 800a2f6:	f004 fe5b 	bl	800efb0 <malloc>
 800a2fa:	4605      	mov	r5, r0
	command->size = 1 + num_args + data_size;
 800a2fc:	eb04 0009 	add.w	r0, r4, r9
 800a300:	3001      	adds	r0, #1
 800a302:	b280      	uxth	r0, r0
 800a304:	8028      	strh	r0, [r5, #0]
	command->data = (uint8_t *) malloc(command->size);
 800a306:	f004 fe53 	bl	800efb0 <malloc>
 800a30a:	6068      	str	r0, [r5, #4]
	command->data[0] = command_id;
 800a30c:	f800 8b01 	strb.w	r8, [r0], #1
	memcpy(command->data + 1, args, num_args);
 800a310:	4622      	mov	r2, r4
 800a312:	4639      	mov	r1, r7
 800a314:	f005 fe15 	bl	800ff42 <memcpy>
	memcpy(command->data + 1 + num_args, data, data_size);
 800a318:	6868      	ldr	r0, [r5, #4]
 800a31a:	3401      	adds	r4, #1
 800a31c:	464a      	mov	r2, r9
 800a31e:	4631      	mov	r1, r6
 800a320:	4420      	add	r0, r4
 800a322:	f005 fe0e 	bl	800ff42 <memcpy>
	return command;
}
 800a326:	4628      	mov	r0, r5
 800a328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a32c <si468x_build_command>:
{
 800a32c:	b500      	push	{lr}
 800a32e:	b083      	sub	sp, #12
	return si468x_build_command_ext(command_id, args, num_args, 0, 0);
 800a330:	2300      	movs	r3, #0
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	f7ff ffd6 	bl	800a2e4 <si468x_build_command_ext>
}
 800a338:	b003      	add	sp, #12
 800a33a:	f85d fb04 	ldr.w	pc, [sp], #4

0800a33e <si468x_free_command>:

void si468x_free_command(Si468x_Command *command)
{
	if (!command)
 800a33e:	b158      	cbz	r0, 800a358 <si468x_free_command+0x1a>
{
 800a340:	b510      	push	{r4, lr}
 800a342:	4604      	mov	r4, r0
		return;
	if (command->data)
 800a344:	6840      	ldr	r0, [r0, #4]
 800a346:	b118      	cbz	r0, 800a350 <si468x_free_command+0x12>
	{
		free(command->data);
 800a348:	f004 fe3a 	bl	800efc0 <free>
		command->data = NULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	6063      	str	r3, [r4, #4]
	}
	free(command);
 800a350:	4620      	mov	r0, r4
 800a352:	f004 fe35 	bl	800efc0 <free>
	command = NULL;
}
 800a356:	bd10      	pop	{r4, pc}
 800a358:	4770      	bx	lr
	...

0800a35c <si468x_power_up>:
{
 800a35c:	b510      	push	{r4, lr}
 800a35e:	b084      	sub	sp, #16
	uint8_t args[] =
 800a360:	4b0b      	ldr	r3, [pc, #44]	@ (800a390 <si468x_power_up+0x34>)
 800a362:	46ec      	mov	ip, sp
 800a364:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a366:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800a36a:	f82c 3b02 	strh.w	r3, [ip], #2
 800a36e:	0c1b      	lsrs	r3, r3, #16
 800a370:	f88c 3000 	strb.w	r3, [ip]
	Si468x_Command *command = si468x_build_command(POWER_UP, args, 15);
 800a374:	220f      	movs	r2, #15
 800a376:	4669      	mov	r1, sp
 800a378:	2001      	movs	r0, #1
 800a37a:	f7ff ffd7 	bl	800a32c <si468x_build_command>
 800a37e:	4604      	mov	r4, r0
	si468x_execute(command);
 800a380:	f7ff ffa8 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800a384:	4620      	mov	r0, r4
 800a386:	f7ff ffda 	bl	800a33e <si468x_free_command>
}
 800a38a:	b004      	add	sp, #16
 800a38c:	bd10      	pop	{r4, pc}
 800a38e:	bf00      	nop
 800a390:	08012714 	.word	0x08012714

0800a394 <si468x_load_minipatch>:
{
 800a394:	b510      	push	{r4, lr}
 800a396:	b084      	sub	sp, #16
	uint8_t args[] = {0x00, 0x00, 0x00};
 800a398:	2300      	movs	r3, #0
 800a39a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a39e:	f88d 300e 	strb.w	r3, [sp, #14]
	Si468x_Command *command = si468x_build_command_ext(HOST_LOAD, args, 3, minipatch_data, minipatch_size);
 800a3a2:	f44f 736b 	mov.w	r3, #940	@ 0x3ac
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	4b06      	ldr	r3, [pc, #24]	@ (800a3c4 <si468x_load_minipatch+0x30>)
 800a3aa:	2203      	movs	r2, #3
 800a3ac:	a903      	add	r1, sp, #12
 800a3ae:	2004      	movs	r0, #4
 800a3b0:	f7ff ff98 	bl	800a2e4 <si468x_build_command_ext>
 800a3b4:	4604      	mov	r4, r0
	si468x_execute(command);
 800a3b6:	f7ff ff8d 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f7ff ffbf 	bl	800a33e <si468x_free_command>
}
 800a3c0:	b004      	add	sp, #16
 800a3c2:	bd10      	pop	{r4, pc}
 800a3c4:	20000048 	.word	0x20000048

0800a3c8 <si468x_load_patch>:
{
 800a3c8:	b510      	push	{r4, lr}
 800a3ca:	b084      	sub	sp, #16
	uint8_t args[] = {0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800a3cc:	ab01      	add	r3, sp, #4
 800a3ce:	4a0b      	ldr	r2, [pc, #44]	@ (800a3fc <si468x_load_patch+0x34>)
 800a3d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a3d2:	c303      	stmia	r3!, {r0, r1}
 800a3d4:	f823 2b02 	strh.w	r2, [r3], #2
 800a3d8:	0c12      	lsrs	r2, r2, #16
 800a3da:	701a      	strb	r2, [r3, #0]
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 800a3dc:	220b      	movs	r2, #11
 800a3de:	a901      	add	r1, sp, #4
 800a3e0:	2005      	movs	r0, #5
 800a3e2:	f7ff ffa3 	bl	800a32c <si468x_build_command>
 800a3e6:	4604      	mov	r4, r0
	si468x_execute(command);
 800a3e8:	f7ff ff74 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f7ff ffa6 	bl	800a33e <si468x_free_command>
	patched = 1;
 800a3f2:	4b03      	ldr	r3, [pc, #12]	@ (800a400 <si468x_load_patch+0x38>)
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	701a      	strb	r2, [r3, #0]
}
 800a3f8:	b004      	add	sp, #16
 800a3fa:	bd10      	pop	{r4, pc}
 800a3fc:	08012724 	.word	0x08012724
 800a400:	20013242 	.word	0x20013242

0800a404 <si468x_flash_set_property>:
{
 800a404:	b510      	push	{r4, lr}
 800a406:	b082      	sub	sp, #8
	uint8_t args[] = {0x10, 0x00, 0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 800a408:	2310      	movs	r3, #16
 800a40a:	f88d 3000 	strb.w	r3, [sp]
 800a40e:	2300      	movs	r3, #0
 800a410:	f88d 3001 	strb.w	r3, [sp, #1]
 800a414:	f88d 3002 	strb.w	r3, [sp, #2]
 800a418:	f88d 0003 	strb.w	r0, [sp, #3]
 800a41c:	0a00      	lsrs	r0, r0, #8
 800a41e:	f88d 0004 	strb.w	r0, [sp, #4]
 800a422:	f88d 1005 	strb.w	r1, [sp, #5]
 800a426:	0a09      	lsrs	r1, r1, #8
 800a428:	f88d 1006 	strb.w	r1, [sp, #6]
	Si468x_Command *command = si468x_build_command(FLASH_SET_PROP_LIST, args, 7);
 800a42c:	2207      	movs	r2, #7
 800a42e:	4669      	mov	r1, sp
 800a430:	2005      	movs	r0, #5
 800a432:	f7ff ff7b 	bl	800a32c <si468x_build_command>
 800a436:	4604      	mov	r4, r0
	si468x_execute(command);
 800a438:	f7ff ff4c 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800a43c:	4620      	mov	r0, r4
 800a43e:	f7ff ff7e 	bl	800a33e <si468x_free_command>
}
 800a442:	b002      	add	sp, #8
 800a444:	bd10      	pop	{r4, pc}

0800a446 <si468x_load_init>:
{
 800a446:	b510      	push	{r4, lr}
 800a448:	b082      	sub	sp, #8
	uint8_t args[] = {0x00};
 800a44a:	2300      	movs	r3, #0
 800a44c:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(LOAD_INIT, args, 1);
 800a450:	2201      	movs	r2, #1
 800a452:	a901      	add	r1, sp, #4
 800a454:	2006      	movs	r0, #6
 800a456:	f7ff ff69 	bl	800a32c <si468x_build_command>
 800a45a:	4604      	mov	r4, r0
	si468x_execute(command);
 800a45c:	f7ff ff3a 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800a460:	4620      	mov	r0, r4
 800a462:	f7ff ff6c 	bl	800a33e <si468x_free_command>
}
 800a466:	b002      	add	sp, #8
 800a468:	bd10      	pop	{r4, pc}

0800a46a <si468x_load_ROM>:
{
 800a46a:	b510      	push	{r4, lr}
 800a46c:	b084      	sub	sp, #16
  switch(mode)
 800a46e:	2801      	cmp	r0, #1
 800a470:	d004      	beq.n	800a47c <si468x_load_ROM+0x12>
 800a472:	2802      	cmp	r0, #2
 800a474:	d02b      	beq.n	800a4ce <si468x_load_ROM+0x64>
      Error_Handler();
 800a476:	f003 fe0d 	bl	800e094 <Error_Handler>
      return;
 800a47a:	e026      	b.n	800a4ca <si468x_load_ROM+0x60>
  switch(mode)
 800a47c:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
	uint8_t args[] =
 800a480:	2300      	movs	r3, #0
 800a482:	f88d 3004 	strb.w	r3, [sp, #4]
 800a486:	f88d 3005 	strb.w	r3, [sp, #5]
 800a48a:	f88d 3006 	strb.w	r3, [sp, #6]
 800a48e:	f88d 2007 	strb.w	r2, [sp, #7]
			(StartAddress >> 8) & 0xFF,
 800a492:	0a11      	lsrs	r1, r2, #8
	uint8_t args[] =
 800a494:	f88d 1008 	strb.w	r1, [sp, #8]
			(StartAddress >> 16) & 0xFF,
 800a498:	0c11      	lsrs	r1, r2, #16
	uint8_t args[] =
 800a49a:	f88d 1009 	strb.w	r1, [sp, #9]
			StartAddress >> 24,
 800a49e:	0e12      	lsrs	r2, r2, #24
	uint8_t args[] =
 800a4a0:	f88d 200a 	strb.w	r2, [sp, #10]
 800a4a4:	f88d 300b 	strb.w	r3, [sp, #11]
 800a4a8:	f88d 300c 	strb.w	r3, [sp, #12]
 800a4ac:	f88d 300d 	strb.w	r3, [sp, #13]
 800a4b0:	f88d 300e 	strb.w	r3, [sp, #14]
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 800a4b4:	220b      	movs	r2, #11
 800a4b6:	a901      	add	r1, sp, #4
 800a4b8:	2005      	movs	r0, #5
 800a4ba:	f7ff ff37 	bl	800a32c <si468x_build_command>
 800a4be:	4604      	mov	r4, r0
	si468x_execute(command);
 800a4c0:	f7ff ff08 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f7ff ff3a 	bl	800a33e <si468x_free_command>
}
 800a4ca:	b004      	add	sp, #16
 800a4cc:	bd10      	pop	{r4, pc}
      StartAddress = 0x00092000; // JSB: Hardwired.
 800a4ce:	f44f 2212 	mov.w	r2, #598016	@ 0x92000
 800a4d2:	e7d5      	b.n	800a480 <si468x_load_ROM+0x16>

0800a4d4 <si468x_boot>:
{
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	b082      	sub	sp, #8
	uint8_t args[] = {0x00};
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(BOOT, args, 1);
 800a4de:	2201      	movs	r2, #1
 800a4e0:	a901      	add	r1, sp, #4
 800a4e2:	2007      	movs	r0, #7
 800a4e4:	f7ff ff22 	bl	800a32c <si468x_build_command>
 800a4e8:	4604      	mov	r4, r0
	si468x_execute(command);
 800a4ea:	f7ff fef3 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f7ff ff25 	bl	800a33e <si468x_free_command>
}
 800a4f4:	b002      	add	sp, #8
 800a4f6:	bd10      	pop	{r4, pc}

0800a4f8 <si468x_set_property>:
{
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	b082      	sub	sp, #8
	uint8_t args[] = {0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f88d 3000 	strb.w	r3, [sp]
 800a502:	f88d 0001 	strb.w	r0, [sp, #1]
 800a506:	0a00      	lsrs	r0, r0, #8
 800a508:	f88d 0002 	strb.w	r0, [sp, #2]
 800a50c:	f88d 1003 	strb.w	r1, [sp, #3]
 800a510:	0a09      	lsrs	r1, r1, #8
 800a512:	f88d 1004 	strb.w	r1, [sp, #4]
	Si468x_Command *command = si468x_build_command(SET_PROPERTY, args, 5);
 800a516:	2205      	movs	r2, #5
 800a518:	4669      	mov	r1, sp
 800a51a:	2013      	movs	r0, #19
 800a51c:	f7ff ff06 	bl	800a32c <si468x_build_command>
 800a520:	4604      	mov	r4, r0
	si468x_execute(command);
 800a522:	f7ff fed7 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800a526:	4620      	mov	r0, r4
 800a528:	f7ff ff09 	bl	800a33e <si468x_free_command>
}
 800a52c:	b002      	add	sp, #8
 800a52e:	bd10      	pop	{r4, pc}

0800a530 <si468x_init>:
{
 800a530:	b538      	push	{r3, r4, r5, lr}
	current_mode = mode;
 800a532:	4b38      	ldr	r3, [pc, #224]	@ (800a614 <si468x_init+0xe4>)
 800a534:	7018      	strb	r0, [r3, #0]
	if (mode == Si468x_MODE_None) // JSB added.
 800a536:	b900      	cbnz	r0, 800a53a <si468x_init+0xa>
}
 800a538:	bd38      	pop	{r3, r4, r5, pc}
 800a53a:	4604      	mov	r4, r0
	si468x_reset(1);
 800a53c:	2001      	movs	r0, #1
 800a53e:	f7ff fe47 	bl	800a1d0 <si468x_reset>
	HAL_Delay(10);
 800a542:	200a      	movs	r0, #10
 800a544:	f7f6 f898 	bl	8000678 <HAL_Delay>
  si468x_reset(0);
 800a548:	2000      	movs	r0, #0
 800a54a:	f7ff fe41 	bl	800a1d0 <si468x_reset>
	HAL_Delay(10);
 800a54e:	200a      	movs	r0, #10
 800a550:	f7f6 f892 	bl	8000678 <HAL_Delay>
	patched = 0; // JSB Added.
 800a554:	2500      	movs	r5, #0
 800a556:	4b30      	ldr	r3, [pc, #192]	@ (800a618 <si468x_init+0xe8>)
 800a558:	701d      	strb	r5, [r3, #0]
	si468x_power_up();
 800a55a:	f7ff feff 	bl	800a35c <si468x_power_up>
	HAL_Delay(10);
 800a55e:	200a      	movs	r0, #10
 800a560:	f7f6 f88a 	bl	8000678 <HAL_Delay>
	si468x_load_init();
 800a564:	f7ff ff6f 	bl	800a446 <si468x_load_init>
	si468x_load_minipatch();
 800a568:	f7ff ff14 	bl	800a394 <si468x_load_minipatch>
	HAL_Delay(10);
 800a56c:	200a      	movs	r0, #10
 800a56e:	f7f6 f883 	bl	8000678 <HAL_Delay>
	si468x_load_init();
 800a572:	f7ff ff68 	bl	800a446 <si468x_load_init>
	si468x_load_patch();
 800a576:	f7ff ff27 	bl	800a3c8 <si468x_load_patch>
	HAL_Delay(15);
 800a57a:	200f      	movs	r0, #15
 800a57c:	f7f6 f87c 	bl	8000678 <HAL_Delay>
	si468x_flash_set_property(PROP_FLASH_SPI_CLOCK_FREQ_KHZ, 0x9C40); // Set flash speed to 40MHz
 800a580:	f649 4140 	movw	r1, #40000	@ 0x9c40
 800a584:	2001      	movs	r0, #1
 800a586:	f7ff ff3d 	bl	800a404 <si468x_flash_set_property>
	si468x_flash_set_property(PROP_HIGH_SPEED_READ_MAX_FREQ_MHZ, 0x00FF); // Set flash high speed read speed to 127MHz
 800a58a:	21ff      	movs	r1, #255	@ 0xff
 800a58c:	f240 1003 	movw	r0, #259	@ 0x103
 800a590:	f7ff ff38 	bl	800a404 <si468x_flash_set_property>
	si468x_load_init();
 800a594:	f7ff ff57 	bl	800a446 <si468x_load_init>
	si468x_load_ROM(mode);
 800a598:	4620      	mov	r0, r4
 800a59a:	f7ff ff66 	bl	800a46a <si468x_load_ROM>
	si468x_boot();
 800a59e:	f7ff ff99 	bl	800a4d4 <si468x_boot>
	si468x_set_property(PROP_INT_CTL_ENABLE, 0x00D1); // Enable CTS, ERR_CMD, STC and DSRV interrupts
 800a5a2:	21d1      	movs	r1, #209	@ 0xd1
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f7ff ffa7 	bl	800a4f8 <si468x_set_property>
	si468x_set_property(PROP_INT_CTL_REPEAT, 0x0001); // Enable STC interrupt repeat
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	f7ff ffa3 	bl	800a4f8 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_IO_OUTPUT_SELECT, 0x0000); // I2S set slave (0x8000 for master)
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a5b8:	f7ff ff9e 	bl	800a4f8 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_IO_OUTPUT_SAMPLE_RATE, 0xBB80); // I2S set sample rate 48kHz
 800a5bc:	f64b 3180 	movw	r1, #48000	@ 0xbb80
 800a5c0:	f240 2001 	movw	r0, #513	@ 0x201
 800a5c4:	f7ff ff98 	bl	800a4f8 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_IO_OUTPUT_FORMAT, 0x1870); // Set sample size to 24-bit, slot size to 32-bit, and format to I2S
 800a5c8:	f641 0170 	movw	r1, #6256	@ 0x1870
 800a5cc:	f240 2002 	movw	r0, #514	@ 0x202
 800a5d0:	f7ff ff92 	bl	800a4f8 <si468x_set_property>
	si468x_set_property(PROP_PIN_CONFIG_ENABLE, 0x8002); // I2S enable
 800a5d4:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a5d8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a5dc:	f7ff ff8c 	bl	800a4f8 <si468x_set_property>
	si468x_set_property(PROP_DAB_TUNE_FE_CFG, 0x0001); // VHFSW
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	f241 7012 	movw	r0, #5906	@ 0x1712
 800a5e6:	f7ff ff87 	bl	800a4f8 <si468x_set_property>
	si468x_set_property(PROP_FM_RDS_CONFIG, 0x0001); // Enable RDS processor
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	f643 4002 	movw	r0, #15362	@ 0x3c02
 800a5f0:	f7ff ff82 	bl	800a4f8 <si468x_set_property>
	si468x_set_property(PROP_DAB_XPAD_ENABLE, 0x0003); // Enable full PAD and XPAD
 800a5f4:	2103      	movs	r1, #3
 800a5f6:	f44f 4034 	mov.w	r0, #46080	@ 0xb400
 800a5fa:	f7ff ff7d 	bl	800a4f8 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_SERVICE_INT_SOURCE, 0x0001); // Enable DSRVPCKTINT
 800a5fe:	2101      	movs	r1, #1
 800a600:	f44f 4001 	mov.w	r0, #33024	@ 0x8100
 800a604:	f7ff ff78 	bl	800a4f8 <si468x_set_property>
	if (mode == Si468x_MODE_DAB)
 800a608:	2c02      	cmp	r4, #2
 800a60a:	d195      	bne.n	800a538 <si468x_init+0x8>
		si468x_DAB_set_freq_list();
 800a60c:	f000 f9b6 	bl	800a97c <si468x_DAB_set_freq_list>
 800a610:	e792      	b.n	800a538 <si468x_init+0x8>
 800a612:	bf00      	nop
 800a614:	20013243 	.word	0x20013243
 800a618:	20013242 	.word	0x20013242

0800a61c <JSB_si468x_get_current_mode>:

enum Si468x_MODE JSB_si468x_get_current_mode()
{
  return current_mode;
}
 800a61c:	4b01      	ldr	r3, [pc, #4]	@ (800a624 <JSB_si468x_get_current_mode+0x8>)
 800a61e:	7818      	ldrb	r0, [r3, #0]
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	20013243 	.word	0x20013243

0800a628 <Min_uint32>:
// JSB helper functions (from JSB_General.c):

static uint32_t Min_uint32(uint32_t A, uint32_t B)
{
    return A < B ? A : B;
}
 800a628:	4288      	cmp	r0, r1
 800a62a:	bf28      	it	cs
 800a62c:	4608      	movcs	r0, r1
 800a62e:	4770      	bx	lr

0800a630 <si468x_free_service_list>:

	return service_list;
}

static void si468x_free_service_list(DAB_Service_List *service_list)
{
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	4607      	mov	r7, r0
	for (int i = 0; i < service_list->size; i++)
 800a634:	2600      	movs	r6, #0
 800a636:	e011      	b.n	800a65c <si468x_free_service_list+0x2c>
	{
		DAB_Service *service = service_list->services[i];
		for (int j = 0; j < service->num_comp; j++)
			free(service->components[j]);
 800a638:	68eb      	ldr	r3, [r5, #12]
 800a63a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a63e:	f004 fcbf 	bl	800efc0 <free>
		for (int j = 0; j < service->num_comp; j++)
 800a642:	3401      	adds	r4, #1
 800a644:	7a6b      	ldrb	r3, [r5, #9]
 800a646:	f003 030f 	and.w	r3, r3, #15
 800a64a:	42a3      	cmp	r3, r4
 800a64c:	dcf4      	bgt.n	800a638 <si468x_free_service_list+0x8>
		free(service->components);
 800a64e:	68e8      	ldr	r0, [r5, #12]
 800a650:	f004 fcb6 	bl	800efc0 <free>
		free(service);
 800a654:	4628      	mov	r0, r5
 800a656:	f004 fcb3 	bl	800efc0 <free>
	for (int i = 0; i < service_list->size; i++)
 800a65a:	3601      	adds	r6, #1
 800a65c:	783b      	ldrb	r3, [r7, #0]
 800a65e:	42b3      	cmp	r3, r6
 800a660:	dd04      	ble.n	800a66c <si468x_free_service_list+0x3c>
		DAB_Service *service = service_list->services[i];
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
		for (int j = 0; j < service->num_comp; j++)
 800a668:	2400      	movs	r4, #0
 800a66a:	e7eb      	b.n	800a644 <si468x_free_service_list+0x14>
	}
	free(service_list);
 800a66c:	4638      	mov	r0, r7
 800a66e:	f004 fca7 	bl	800efc0 <free>
}
 800a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a674 <si468x_DAB_decode_digital_service_list>:
{
 800a674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	4606      	mov	r6, r0
 800a67a:	468b      	mov	fp, r1
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800a67c:	f7ff ffce 	bl	800a61c <JSB_si468x_get_current_mode>
 800a680:	2802      	cmp	r0, #2
 800a682:	d179      	bne.n	800a778 <si468x_DAB_decode_digital_service_list+0x104>
	DAB_Service_List *service_list = malloc(sizeof(DAB_Service_List));
 800a684:	2008      	movs	r0, #8
 800a686:	f004 fc93 	bl	800efb0 <malloc>
 800a68a:	4682      	mov	sl, r0
	uint8_t number_of_services = service_list_data[data_pointer];
 800a68c:	7930      	ldrb	r0, [r6, #4]
	service_list->size = number_of_services;
 800a68e:	f88a 0000 	strb.w	r0, [sl]
	service_list->services = (DAB_Service**) malloc(service_list->size * sizeof(DAB_Service*));
 800a692:	0080      	lsls	r0, r0, #2
 800a694:	f004 fc8c 	bl	800efb0 <malloc>
 800a698:	f8ca 0004 	str.w	r0, [sl, #4]
	for (int i = 0; i < service_list->size; i++)
 800a69c:	f04f 0900 	mov.w	r9, #0
	data_pointer += 4;
 800a6a0:	2408      	movs	r4, #8
	for (int i = 0; i < service_list->size; i++)
 800a6a2:	e029      	b.n	800a6f8 <si468x_DAB_decode_digital_service_list+0x84>
			data_pointer += 1;
 800a6a4:	3404      	adds	r4, #4
 800a6a6:	b2a4      	uxth	r4, r4
			DAB_Component *component = (DAB_Component*) malloc(sizeof(DAB_Component));
 800a6a8:	2008      	movs	r0, #8
 800a6aa:	f004 fc81 	bl	800efb0 <malloc>
			component->component_id = component_id;
 800a6ae:	6005      	str	r5, [r0, #0]
			component->component_info = service_list_data[data_pointer];
 800a6b0:	5d33      	ldrb	r3, [r6, r4]
 800a6b2:	7103      	strb	r3, [r0, #4]
			service->components[j] = component;
 800a6b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6b8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
		for (int j = 0; j < service->num_comp; j++)
 800a6bc:	3701      	adds	r7, #1
 800a6be:	f898 3009 	ldrb.w	r3, [r8, #9]
 800a6c2:	f003 030f 	and.w	r3, r3, #15
 800a6c6:	42bb      	cmp	r3, r7
 800a6c8:	dd14      	ble.n	800a6f4 <si468x_DAB_decode_digital_service_list+0x80>
			uint32_t component_id = service_list_data[data_pointer];
 800a6ca:	5d35      	ldrb	r5, [r6, r4]
			component_id += ((uint32_t) service_list_data[data_pointer + 1]) << 8;
 800a6cc:	1933      	adds	r3, r6, r4
 800a6ce:	785a      	ldrb	r2, [r3, #1]
 800a6d0:	eb05 2502 	add.w	r5, r5, r2, lsl #8
			component_id += ((uint32_t) service_list_data[data_pointer + 2]) << 16;
 800a6d4:	789b      	ldrb	r3, [r3, #2]
 800a6d6:	eb05 4503 	add.w	r5, r5, r3, lsl #16
			component_id += ((uint32_t) service_list_data[data_pointer + 3]) << 24; //!!! Component ID only 16 bits long...
 800a6da:	1ce3      	adds	r3, r4, #3
 800a6dc:	5cf2      	ldrb	r2, [r6, r3]
 800a6de:	eb05 6502 	add.w	r5, r5, r2, lsl #24
			uint8_t user_application_valid = service_list_data[data_pointer] & 0x01;
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	5cf3      	ldrb	r3, [r6, r3]
			if (user_application_valid)
 800a6e6:	f013 0f01 	tst.w	r3, #1
 800a6ea:	d0db      	beq.n	800a6a4 <si468x_DAB_decode_digital_service_list+0x30>
				HAL_Delay(1);
 800a6ec:	2001      	movs	r0, #1
 800a6ee:	f7f5 ffc3 	bl	8000678 <HAL_Delay>
 800a6f2:	e7d7      	b.n	800a6a4 <si468x_DAB_decode_digital_service_list+0x30>
	for (int i = 0; i < service_list->size; i++)
 800a6f4:	f109 0901 	add.w	r9, r9, #1
 800a6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fc:	454b      	cmp	r3, r9
 800a6fe:	dd3d      	ble.n	800a77c <si468x_DAB_decode_digital_service_list+0x108>
		DAB_Service *service = (DAB_Service*) malloc(sizeof(DAB_Service));
 800a700:	2020      	movs	r0, #32
 800a702:	f004 fc55 	bl	800efb0 <malloc>
 800a706:	4680      	mov	r8, r0
		service_list->services[i] = service;
 800a708:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a70c:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
		uint32_t service_id = service_list_data[data_pointer];
 800a710:	5d33      	ldrb	r3, [r6, r4]
		service_id += ((uint32_t) service_list_data[data_pointer + 1]) << 8;
 800a712:	1932      	adds	r2, r6, r4
 800a714:	7851      	ldrb	r1, [r2, #1]
 800a716:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		service_id += ((uint32_t) service_list_data[data_pointer + 2]) << 16;
 800a71a:	7891      	ldrb	r1, [r2, #2]
 800a71c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		service_id += ((uint32_t) service_list_data[data_pointer + 3]) << 24;
 800a720:	78d2      	ldrb	r2, [r2, #3]
 800a722:	eb03 6302 	add.w	r3, r3, r2, lsl #24
		data_pointer += 4;
 800a726:	1d22      	adds	r2, r4, #4
 800a728:	b292      	uxth	r2, r2
		service->service_info_1 = service_list_data[data_pointer];
 800a72a:	5cb2      	ldrb	r2, [r6, r2]
 800a72c:	7202      	strb	r2, [r0, #8]
		data_pointer += 1;
 800a72e:	1d62      	adds	r2, r4, #5
 800a730:	b292      	uxth	r2, r2
		service->service_info_2 = service_list_data[data_pointer];
 800a732:	5cb2      	ldrb	r2, [r6, r2]
 800a734:	7242      	strb	r2, [r0, #9]
		data_pointer += 3;
 800a736:	f104 0208 	add.w	r2, r4, #8
 800a73a:	b292      	uxth	r2, r2
		memcpy(service->name, service_list_data + data_pointer, 16);
 800a73c:	18b1      	adds	r1, r6, r2
 800a73e:	58b7      	ldr	r7, [r6, r2]
 800a740:	684d      	ldr	r5, [r1, #4]
 800a742:	6888      	ldr	r0, [r1, #8]
 800a744:	68ca      	ldr	r2, [r1, #12]
 800a746:	f8c8 7010 	str.w	r7, [r8, #16]
 800a74a:	f8c8 5014 	str.w	r5, [r8, #20]
 800a74e:	f8c8 0018 	str.w	r0, [r8, #24]
 800a752:	f8c8 201c 	str.w	r2, [r8, #28]
		data_pointer += 16;
 800a756:	3418      	adds	r4, #24
 800a758:	b2a4      	uxth	r4, r4
		service->freq_index = freq_index;
 800a75a:	f888 b000 	strb.w	fp, [r8]
		service->service_id = service_id;
 800a75e:	f8c8 3004 	str.w	r3, [r8, #4]
		service->components = (DAB_Component**) malloc(service->num_comp * sizeof(DAB_Component*));
 800a762:	f898 0009 	ldrb.w	r0, [r8, #9]
 800a766:	f000 000f 	and.w	r0, r0, #15
 800a76a:	0080      	lsls	r0, r0, #2
 800a76c:	f004 fc20 	bl	800efb0 <malloc>
 800a770:	f8c8 000c 	str.w	r0, [r8, #12]
		for (int j = 0; j < service->num_comp; j++)
 800a774:	2700      	movs	r7, #0
 800a776:	e7a2      	b.n	800a6be <si468x_DAB_decode_digital_service_list+0x4a>
		return NULL;
 800a778:	f04f 0a00 	mov.w	sl, #0
}
 800a77c:	4650      	mov	r0, sl
 800a77e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a784 <si468x_DAB_get_digital_service_list>:
{
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	4605      	mov	r5, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800a78a:	f7ff ff47 	bl	800a61c <JSB_si468x_get_current_mode>
 800a78e:	2802      	cmp	r0, #2
 800a790:	d12b      	bne.n	800a7ea <si468x_DAB_get_digital_service_list+0x66>
	uint8_t args[] = {0x00};
 800a792:	2300      	movs	r3, #0
 800a794:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(GET_DIGITAL_SERVICE_LIST, args, 1);
 800a798:	2201      	movs	r2, #1
 800a79a:	a901      	add	r1, sp, #4
 800a79c:	2080      	movs	r0, #128	@ 0x80
 800a79e:	f7ff fdc5 	bl	800a32c <si468x_build_command>
 800a7a2:	4604      	mov	r4, r0
	si468x_execute(command);
 800a7a4:	f7ff fd96 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f7ff fdc8 	bl	800a33e <si468x_free_command>
	si468x_read_response(read_buffer, 6);
 800a7ae:	4e11      	ldr	r6, [pc, #68]	@ (800a7f4 <si468x_DAB_get_digital_service_list+0x70>)
 800a7b0:	2106      	movs	r1, #6
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7ff fd1e 	bl	800a1f4 <si468x_read_response>
	uint16_t service_list_size = read_buffer[4] + (((uint16_t) read_buffer[5]) << 8);
 800a7b8:	7934      	ldrb	r4, [r6, #4]
 800a7ba:	7973      	ldrb	r3, [r6, #5]
 800a7bc:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 800a7c0:	b2a4      	uxth	r4, r4
	uint8_t *service_list_data = (uint8_t *) malloc(service_list_size + 4);
 800a7c2:	1d20      	adds	r0, r4, #4
 800a7c4:	f004 fbf4 	bl	800efb0 <malloc>
	if (!service_list_data)
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	b180      	cbz	r0, 800a7ee <si468x_DAB_get_digital_service_list+0x6a>
	si468x_read_response(service_list_data, service_list_size + 4);
 800a7cc:	3404      	adds	r4, #4
 800a7ce:	b2a1      	uxth	r1, r4
 800a7d0:	f7ff fd10 	bl	800a1f4 <si468x_read_response>
	DAB_Service_List *service_list = si468x_DAB_decode_digital_service_list(service_list_data + 4, freq_index);
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	1d30      	adds	r0, r6, #4
 800a7d8:	f7ff ff4c 	bl	800a674 <si468x_DAB_decode_digital_service_list>
 800a7dc:	4604      	mov	r4, r0
	free(service_list_data);
 800a7de:	4630      	mov	r0, r6
 800a7e0:	f004 fbee 	bl	800efc0 <free>
}
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	b002      	add	sp, #8
 800a7e8:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 800a7ea:	2400      	movs	r4, #0
 800a7ec:	e7fa      	b.n	800a7e4 <si468x_DAB_get_digital_service_list+0x60>
		return NULL; // !!! ERROR
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	e7f8      	b.n	800a7e4 <si468x_DAB_get_digital_service_list+0x60>
 800a7f2:	bf00      	nop
 800a7f4:	20013244 	.word	0x20013244

0800a7f8 <si468x_DAB_save_service_to_flash>:

static void si468x_DAB_save_service_to_flash(DAB_Service *service, uint16_t memory_index)
{
 800a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	4688      	mov	r8, r1
	Stream *stream = stream_create();
 800a800:	f7ff fc04 	bl	800a00c <stream_create>
 800a804:	4605      	mov	r5, r0
	uint32_t memory_address = 4096 * (memory_index + 2); // Keep first 8192 bytes free for control data.
 800a806:	f108 0802 	add.w	r8, r8, #2
 800a80a:	ea4f 3808 	mov.w	r8, r8, lsl #12
	SST25_EraseSector_4K(memory_address);
 800a80e:	4640      	mov	r0, r8
 800a810:	f7ff f858 	bl	80098c4 <SST25_EraseSector_4K>
	stream_write_uint8(stream, service->freq_index);
 800a814:	7831      	ldrb	r1, [r6, #0]
 800a816:	4628      	mov	r0, r5
 800a818:	f7ff fc97 	bl	800a14a <stream_write_uint8>
	stream_write_uint32(stream, service->service_id);
 800a81c:	6871      	ldr	r1, [r6, #4]
 800a81e:	4628      	mov	r0, r5
 800a820:	f7ff fca0 	bl	800a164 <stream_write_uint32>
	stream_write_uint8(stream, service->service_info_1);
 800a824:	7a31      	ldrb	r1, [r6, #8]
 800a826:	4628      	mov	r0, r5
 800a828:	f7ff fc8f 	bl	800a14a <stream_write_uint8>
	stream_write_uint8(stream, service->service_info_2);
 800a82c:	7a71      	ldrb	r1, [r6, #9]
 800a82e:	4628      	mov	r0, r5
 800a830:	f7ff fc8b 	bl	800a14a <stream_write_uint8>
	stream_write_bytes(stream, (uint8_t *) service->name, 16);
 800a834:	2210      	movs	r2, #16
 800a836:	18b1      	adds	r1, r6, r2
 800a838:	4628      	mov	r0, r5
 800a83a:	f7ff fcb2 	bl	800a1a2 <stream_write_bytes>
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 800a83e:	2400      	movs	r4, #0
 800a840:	e00c      	b.n	800a85c <si468x_DAB_save_service_to_flash+0x64>
	{
		DAB_Component *component = service->components[component_index];
 800a842:	68f3      	ldr	r3, [r6, #12]
 800a844:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
		stream_write_uint32(stream, component->component_id);
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	4628      	mov	r0, r5
 800a84c:	f7ff fc8a 	bl	800a164 <stream_write_uint32>
		stream_write_uint8(stream, component->component_info);
 800a850:	7939      	ldrb	r1, [r7, #4]
 800a852:	4628      	mov	r0, r5
 800a854:	f7ff fc79 	bl	800a14a <stream_write_uint8>
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 800a858:	3401      	adds	r4, #1
 800a85a:	b2e4      	uxtb	r4, r4
 800a85c:	7a73      	ldrb	r3, [r6, #9]
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	42a3      	cmp	r3, r4
 800a864:	d8ed      	bhi.n	800a842 <si468x_DAB_save_service_to_flash+0x4a>
	}
	stream_flush(stream);
 800a866:	4628      	mov	r0, r5
 800a868:	f7ff fc3b 	bl	800a0e2 <stream_flush>
	SST25_WriteBlock(memory_address, stream->data, stream->data_size);
 800a86c:	f8b5 2088 	ldrh.w	r2, [r5, #136]	@ 0x88
 800a870:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 800a874:	4640      	mov	r0, r8
 800a876:	f7ff f86f 	bl	8009958 <SST25_WriteBlock>
	stream_free(stream);
 800a87a:	4628      	mov	r0, r5
 800a87c:	f7ff fbe6 	bl	800a04c <stream_free>
}
 800a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a884 <si468x_load_service_from_flash>:

static DAB_Service *si468x_load_service_from_flash(uint16_t memory_index)
{
 800a884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a886:	b083      	sub	sp, #12
	uint16_t stream_size;
	SST25_ReadBlock(4096 * (memory_index + 2), (uint8_t *) &stream_size, 2);
 800a888:	1c84      	adds	r4, r0, #2
 800a88a:	0324      	lsls	r4, r4, #12
 800a88c:	2202      	movs	r2, #2
 800a88e:	f10d 0106 	add.w	r1, sp, #6
 800a892:	4620      	mov	r0, r4
 800a894:	f7ff f8d6 	bl	8009a44 <SST25_ReadBlock>
	uint8_t *data = malloc(stream_size);
 800a898:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 800a89c:	4630      	mov	r0, r6
 800a89e:	f004 fb87 	bl	800efb0 <malloc>
 800a8a2:	4605      	mov	r5, r0
	SST25_ReadBlock(4096 * (memory_index + 2), data, stream_size);
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	4601      	mov	r1, r0
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f7ff f8cb 	bl	8009a44 <SST25_ReadBlock>
	Stream *stream = stream_load(data, stream_size);
 800a8ae:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f7ff fbb9 	bl	800a02a <stream_load>
 800a8b8:	4607      	mov	r7, r0

	DAB_Service *service = malloc(sizeof(DAB_Service));
 800a8ba:	2020      	movs	r0, #32
 800a8bc:	f004 fb78 	bl	800efb0 <malloc>
 800a8c0:	4606      	mov	r6, r0
	service->freq_index = stream_read_uint8(stream);
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f7ff fbcf 	bl	800a066 <stream_read_uint8>
 800a8c8:	7030      	strb	r0, [r6, #0]
	service->service_id = stream_read_uint32(stream);
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	f7ff fbd4 	bl	800a078 <stream_read_uint32>
 800a8d0:	6070      	str	r0, [r6, #4]
	service->service_info_1 = stream_read_uint8(stream);
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	f7ff fbc7 	bl	800a066 <stream_read_uint8>
 800a8d8:	7230      	strb	r0, [r6, #8]
	service->service_info_2 = stream_read_uint8(stream);
 800a8da:	4638      	mov	r0, r7
 800a8dc:	f7ff fbc3 	bl	800a066 <stream_read_uint8>
 800a8e0:	7270      	strb	r0, [r6, #9]
	stream_read_bytes(stream, (uint8_t *) service->name, 16);
 800a8e2:	2210      	movs	r2, #16
 800a8e4:	18b1      	adds	r1, r6, r2
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	f7ff fbea 	bl	800a0c0 <stream_read_bytes>
	service->components = (DAB_Component**) malloc(service->num_comp * sizeof(DAB_Component*));
 800a8ec:	7a70      	ldrb	r0, [r6, #9]
 800a8ee:	f000 000f 	and.w	r0, r0, #15
 800a8f2:	0080      	lsls	r0, r0, #2
 800a8f4:	f004 fb5c 	bl	800efb0 <malloc>
 800a8f8:	60f0      	str	r0, [r6, #12]
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 800a8fa:	2400      	movs	r4, #0
 800a8fc:	e010      	b.n	800a920 <si468x_load_service_from_flash+0x9c>
	{
		DAB_Component *component = malloc(sizeof(DAB_Component));
 800a8fe:	2008      	movs	r0, #8
 800a900:	f004 fb56 	bl	800efb0 <malloc>
 800a904:	4605      	mov	r5, r0
		component->component_id = stream_read_uint32(stream);
 800a906:	4638      	mov	r0, r7
 800a908:	f7ff fbb6 	bl	800a078 <stream_read_uint32>
 800a90c:	6028      	str	r0, [r5, #0]
		component->component_info = stream_read_uint8(stream);
 800a90e:	4638      	mov	r0, r7
 800a910:	f7ff fba9 	bl	800a066 <stream_read_uint8>
 800a914:	7128      	strb	r0, [r5, #4]
		service->components[component_index] = component;
 800a916:	68f3      	ldr	r3, [r6, #12]
 800a918:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 800a91c:	3401      	adds	r4, #1
 800a91e:	b2e4      	uxtb	r4, r4
 800a920:	7a73      	ldrb	r3, [r6, #9]
 800a922:	f003 030f 	and.w	r3, r3, #15
 800a926:	42a3      	cmp	r3, r4
 800a928:	d8e9      	bhi.n	800a8fe <si468x_load_service_from_flash+0x7a>
	}
	stream_free(stream);
 800a92a:	4638      	mov	r0, r7
 800a92c:	f7ff fb8e 	bl	800a04c <stream_free>
	return service;
}
 800a930:	4630      	mov	r0, r6
 800a932:	b003      	add	sp, #12
 800a934:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a936 <TrimRight>:
{
 800a936:	b538      	push	{r3, r4, r5, lr}
 800a938:	4604      	mov	r4, r0
 800a93a:	460d      	mov	r5, r1
  char *pChar = pString + strlen(pString); // Point to terminator.
 800a93c:	f7f5 fce0 	bl	8000300 <strlen>
 800a940:	1823      	adds	r3, r4, r0
 800a942:	e001      	b.n	800a948 <TrimRight+0x12>
    *pChar = 0;
 800a944:	2200      	movs	r2, #0
 800a946:	701a      	strb	r2, [r3, #0]
    if (pChar == pString)
 800a948:	42a3      	cmp	r3, r4
 800a94a:	d003      	beq.n	800a954 <TrimRight+0x1e>
    if (*pChar != UnwantedChar)
 800a94c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a950:	42aa      	cmp	r2, r5
 800a952:	d0f7      	beq.n	800a944 <TrimRight+0xe>
}
 800a954:	bd38      	pop	{r3, r4, r5, pc}

0800a956 <JSB_si468x_get_service_name>:

static void JSB_si468x_get_service_name(DAB_Service *pService, char *pServiceName, int16_t ServiceName_MaxLength)
{
 800a956:	b538      	push	{r3, r4, r5, lr}
 800a958:	460c      	mov	r4, r1
  strncpy(pServiceName, pService->name, Min_uint32(ServiceName_MaxLength, 16));
 800a95a:	f100 0510 	add.w	r5, r0, #16
 800a95e:	2110      	movs	r1, #16
 800a960:	4610      	mov	r0, r2
 800a962:	f7ff fe61 	bl	800a628 <Min_uint32>
 800a966:	4602      	mov	r2, r0
 800a968:	4629      	mov	r1, r5
 800a96a:	4620      	mov	r0, r4
 800a96c:	f005 f9f1 	bl	800fd52 <strncpy>
  TrimRight(pServiceName, ' ');
 800a970:	2120      	movs	r1, #32
 800a972:	4620      	mov	r0, r4
 800a974:	f7ff ffdf 	bl	800a936 <TrimRight>
}
 800a978:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a97c <si468x_DAB_set_freq_list>:
{
 800a97c:	b538      	push	{r3, r4, r5, lr}
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800a97e:	f7ff fe4d 	bl	800a61c <JSB_si468x_get_current_mode>
 800a982:	2802      	cmp	r0, #2
 800a984:	d000      	beq.n	800a988 <si468x_DAB_set_freq_list+0xc>
}
 800a986:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t *args = (uint8_t *) malloc(args_size);
 800a988:	209c      	movs	r0, #156	@ 0x9c
 800a98a:	f004 fb11 	bl	800efb0 <malloc>
 800a98e:	4604      	mov	r4, r0
	args[0] = number_of_frequencies;
 800a990:	2326      	movs	r3, #38	@ 0x26
 800a992:	7003      	strb	r3, [r0, #0]
	args[1] = 0x00;
 800a994:	2200      	movs	r2, #0
 800a996:	7042      	strb	r2, [r0, #1]
	args[2] = 0x00;
 800a998:	7082      	strb	r2, [r0, #2]
	for (int i = 0; i < number_of_frequencies; i++)
 800a99a:	e011      	b.n	800a9c0 <si468x_DAB_set_freq_list+0x44>
		args[3 + 4 * i] = dab_freq_list[i] & 0xFF;
 800a99c:	4b11      	ldr	r3, [pc, #68]	@ (800a9e4 <si468x_DAB_set_freq_list+0x68>)
 800a99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a2:	0091      	lsls	r1, r2, #2
 800a9a4:	1cc8      	adds	r0, r1, #3
 800a9a6:	5423      	strb	r3, [r4, r0]
		args[4 + 4 * i] = (dab_freq_list[i] >> 8) & 0xFF;
 800a9a8:	0a18      	lsrs	r0, r3, #8
 800a9aa:	3201      	adds	r2, #1
 800a9ac:	f804 0022 	strb.w	r0, [r4, r2, lsl #2]
		args[5 + 4 * i] = (dab_freq_list[i] >> 16) & 0xFF;
 800a9b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800a9b4:	1d48      	adds	r0, r1, #5
 800a9b6:	f804 c000 	strb.w	ip, [r4, r0]
		args[6 + 4 * i] = dab_freq_list[i] >> 24;
 800a9ba:	0e1b      	lsrs	r3, r3, #24
 800a9bc:	3106      	adds	r1, #6
 800a9be:	5463      	strb	r3, [r4, r1]
	for (int i = 0; i < number_of_frequencies; i++)
 800a9c0:	2a25      	cmp	r2, #37	@ 0x25
 800a9c2:	ddeb      	ble.n	800a99c <si468x_DAB_set_freq_list+0x20>
	Si468x_Command *command = si468x_build_command(DAB_SET_FREQ_LIST, args, args_size);
 800a9c4:	229c      	movs	r2, #156	@ 0x9c
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	20b8      	movs	r0, #184	@ 0xb8
 800a9ca:	f7ff fcaf 	bl	800a32c <si468x_build_command>
 800a9ce:	4605      	mov	r5, r0
	si468x_execute(command);
 800a9d0:	f7ff fc80 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	f7ff fcb2 	bl	800a33e <si468x_free_command>
	free(args);
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f004 faf0 	bl	800efc0 <free>
 800a9e0:	e7d1      	b.n	800a986 <si468x_DAB_set_freq_list+0xa>
 800a9e2:	bf00      	nop
 800a9e4:	080134e4 	.word	0x080134e4

0800a9e8 <si468x_DAB_tune>:
{
 800a9e8:	b530      	push	{r4, r5, lr}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	4604      	mov	r4, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800a9ee:	f7ff fe15 	bl	800a61c <JSB_si468x_get_current_mode>
 800a9f2:	2802      	cmp	r0, #2
 800a9f4:	d001      	beq.n	800a9fa <si468x_DAB_tune+0x12>
}
 800a9f6:	b003      	add	sp, #12
 800a9f8:	bd30      	pop	{r4, r5, pc}
	uint8_t args[] = {0x00, freq_index, 0x00, 0x00, 0x00};
 800a9fa:	2500      	movs	r5, #0
 800a9fc:	f88d 5000 	strb.w	r5, [sp]
 800aa00:	f88d 4001 	strb.w	r4, [sp, #1]
 800aa04:	f88d 5002 	strb.w	r5, [sp, #2]
 800aa08:	f88d 5003 	strb.w	r5, [sp, #3]
 800aa0c:	f88d 5004 	strb.w	r5, [sp, #4]
	Si468x_Command *command = si468x_build_command(DAB_TUNE_FREQ, args, 5);
 800aa10:	2205      	movs	r2, #5
 800aa12:	4669      	mov	r1, sp
 800aa14:	20b0      	movs	r0, #176	@ 0xb0
 800aa16:	f7ff fc89 	bl	800a32c <si468x_build_command>
 800aa1a:	4604      	mov	r4, r0
	Interrupt_Status.STCINT = 0;
 800aa1c:	4b06      	ldr	r3, [pc, #24]	@ (800aa38 <si468x_DAB_tune+0x50>)
 800aa1e:	781a      	ldrb	r2, [r3, #0]
 800aa20:	f365 0200 	bfi	r2, r5, #0, #1
 800aa24:	701a      	strb	r2, [r3, #0]
	si468x_execute(command);
 800aa26:	f7ff fc55 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f7ff fc87 	bl	800a33e <si468x_free_command>
	si468x_wait_for_interrupt(STCINT);
 800aa30:	4628      	mov	r0, r5
 800aa32:	f7ff fc15 	bl	800a260 <si468x_wait_for_interrupt>
 800aa36:	e7de      	b.n	800a9f6 <si468x_DAB_tune+0xe>
 800aa38:	20013240 	.word	0x20013240

0800aa3c <si468x_DAB_get_digrad_status>:
{
 800aa3c:	b530      	push	{r4, r5, lr}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	4604      	mov	r4, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800aa42:	f7ff fdeb 	bl	800a61c <JSB_si468x_get_current_mode>
 800aa46:	2802      	cmp	r0, #2
 800aa48:	d001      	beq.n	800aa4e <si468x_DAB_get_digrad_status+0x12>
}
 800aa4a:	b003      	add	sp, #12
 800aa4c:	bd30      	pop	{r4, r5, pc}
	uint8_t args[] = {0x00};
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(DAB_DIGRAD_STATUS, args, 1);
 800aa54:	2201      	movs	r2, #1
 800aa56:	a901      	add	r1, sp, #4
 800aa58:	20b2      	movs	r0, #178	@ 0xb2
 800aa5a:	f7ff fc67 	bl	800a32c <si468x_build_command>
 800aa5e:	4605      	mov	r5, r0
	si468x_execute(command);
 800aa60:	f7ff fc38 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800aa64:	4628      	mov	r0, r5
 800aa66:	f7ff fc6a 	bl	800a33e <si468x_free_command>
	si468x_read_response(read_buffer, 23);
 800aa6a:	4d0a      	ldr	r5, [pc, #40]	@ (800aa94 <si468x_DAB_get_digrad_status+0x58>)
 800aa6c:	2117      	movs	r1, #23
 800aa6e:	4628      	mov	r0, r5
 800aa70:	f7ff fbc0 	bl	800a1f4 <si468x_read_response>
	memcpy(status->data, read_buffer + 4, 19);
 800aa74:	f105 0c04 	add.w	ip, r5, #4
 800aa78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa7c:	6020      	str	r0, [r4, #0]
 800aa7e:	6061      	str	r1, [r4, #4]
 800aa80:	60a2      	str	r2, [r4, #8]
 800aa82:	60e3      	str	r3, [r4, #12]
 800aa84:	f8bc 2000 	ldrh.w	r2, [ip]
 800aa88:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800aa8c:	8222      	strh	r2, [r4, #16]
 800aa8e:	74a3      	strb	r3, [r4, #18]
 800aa90:	e7db      	b.n	800aa4a <si468x_DAB_get_digrad_status+0xe>
 800aa92:	bf00      	nop
 800aa94:	20013244 	.word	0x20013244

0800aa98 <si468x_DAB_get_event_status>:
{
 800aa98:	b530      	push	{r4, r5, lr}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	4604      	mov	r4, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800aa9e:	f7ff fdbd 	bl	800a61c <JSB_si468x_get_current_mode>
 800aaa2:	2802      	cmp	r0, #2
 800aaa4:	d001      	beq.n	800aaaa <si468x_DAB_get_event_status+0x12>
}
 800aaa6:	b003      	add	sp, #12
 800aaa8:	bd30      	pop	{r4, r5, pc}
	uint8_t args[] = {0x00};
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(DAB_GET_EVENT_STATUS, args, 1);
 800aab0:	2201      	movs	r2, #1
 800aab2:	a901      	add	r1, sp, #4
 800aab4:	20b3      	movs	r0, #179	@ 0xb3
 800aab6:	f7ff fc39 	bl	800a32c <si468x_build_command>
 800aaba:	4605      	mov	r5, r0
	si468x_execute(command);
 800aabc:	f7ff fc0a 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800aac0:	4628      	mov	r0, r5
 800aac2:	f7ff fc3c 	bl	800a33e <si468x_free_command>
	si468x_read_response(read_buffer, 8);
 800aac6:	4d04      	ldr	r5, [pc, #16]	@ (800aad8 <si468x_DAB_get_event_status+0x40>)
 800aac8:	2108      	movs	r1, #8
 800aaca:	4628      	mov	r0, r5
 800aacc:	f7ff fb92 	bl	800a1f4 <si468x_read_response>
	memcpy(status->data, read_buffer + 4, 4);
 800aad0:	686b      	ldr	r3, [r5, #4]
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	e7e7      	b.n	800aaa6 <si468x_DAB_get_event_status+0xe>
 800aad6:	bf00      	nop
 800aad8:	20013244 	.word	0x20013244

0800aadc <si468x_DAB_band_scan>:
{
 800aadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae0:	b088      	sub	sp, #32
	uint16_t total_services = 0;
 800aae2:	2600      	movs	r6, #0
 800aae4:	f8ad 6006 	strh.w	r6, [sp, #6]
	for (int freq_index = 0; freq_index < sizeof(dab_freq_list) / sizeof(uint32_t); freq_index++)
 800aae8:	46b0      	mov	r8, r6
 800aaea:	e02a      	b.n	800ab42 <si468x_DAB_band_scan+0x66>
				si468x_DAB_get_event_status(&event_status);
 800aaec:	a802      	add	r0, sp, #8
 800aaee:	f7ff ffd3 	bl	800aa98 <si468x_DAB_get_event_status>
			while (!event_status.SVRLIST)
 800aaf2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800aaf6:	f013 0f01 	tst.w	r3, #1
 800aafa:	d0f7      	beq.n	800aaec <si468x_DAB_band_scan+0x10>
			HAL_Delay(500); //JSB: Temp. Could wait until event_status meets certain requirements.
 800aafc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ab00:	f7f5 fdba 	bl	8000678 <HAL_Delay>
			DAB_Service_List *service_list = si468x_DAB_get_digital_service_list(freq_index);
 800ab04:	4620      	mov	r0, r4
 800ab06:	f7ff fe3d 	bl	800a784 <si468x_DAB_get_digital_service_list>
 800ab0a:	4607      	mov	r7, r0
			total_services += service_list->size;
 800ab0c:	7803      	ldrb	r3, [r0, #0]
 800ab0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ab12:	4413      	add	r3, r2
 800ab14:	f8ad 3006 	strh.w	r3, [sp, #6]
			for (uint8_t service_index = 0; service_index < service_list->size; service_index++)
 800ab18:	2400      	movs	r4, #0
 800ab1a:	e00a      	b.n	800ab32 <si468x_DAB_band_scan+0x56>
				si468x_DAB_save_service_to_flash(service_list->services[service_index], service_mem_id++);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	1c75      	adds	r5, r6, #1
 800ab20:	b2ad      	uxth	r5, r5
 800ab22:	4631      	mov	r1, r6
 800ab24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ab28:	f7ff fe66 	bl	800a7f8 <si468x_DAB_save_service_to_flash>
			for (uint8_t service_index = 0; service_index < service_list->size; service_index++)
 800ab2c:	3401      	adds	r4, #1
 800ab2e:	b2e4      	uxtb	r4, r4
				si468x_DAB_save_service_to_flash(service_list->services[service_index], service_mem_id++);
 800ab30:	462e      	mov	r6, r5
			for (uint8_t service_index = 0; service_index < service_list->size; service_index++)
 800ab32:	783b      	ldrb	r3, [r7, #0]
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	d8f1      	bhi.n	800ab1c <si468x_DAB_band_scan+0x40>
			si468x_free_service_list(service_list);
 800ab38:	4638      	mov	r0, r7
 800ab3a:	f7ff fd79 	bl	800a630 <si468x_free_service_list>
	for (int freq_index = 0; freq_index < sizeof(dab_freq_list) / sizeof(uint32_t); freq_index++)
 800ab3e:	f108 0801 	add.w	r8, r8, #1
 800ab42:	f1b8 0f25 	cmp.w	r8, #37	@ 0x25
 800ab46:	d813      	bhi.n	800ab70 <si468x_DAB_band_scan+0x94>
		si468x_DAB_tune(freq_index);
 800ab48:	fa5f f488 	uxtb.w	r4, r8
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f7ff ff4b 	bl	800a9e8 <si468x_DAB_tune>
		si468x_DAB_get_digrad_status(&digrad_status);
 800ab52:	a803      	add	r0, sp, #12
 800ab54:	f7ff ff72 	bl	800aa3c <si468x_DAB_get_digrad_status>
		if (digrad_status.VALID)
 800ab58:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800ab5c:	f013 0f01 	tst.w	r3, #1
 800ab60:	d0ed      	beq.n	800ab3e <si468x_DAB_band_scan+0x62>
			event_status.SVRLIST = 0;
 800ab62:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800ab66:	f023 0301 	bic.w	r3, r3, #1
 800ab6a:	f88d 3009 	strb.w	r3, [sp, #9]
			while (!event_status.SVRLIST)
 800ab6e:	e7c0      	b.n	800aaf2 <si468x_DAB_band_scan+0x16>
	SST25_EraseSector_4K(4096);
 800ab70:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ab74:	f7fe fea6 	bl	80098c4 <SST25_EraseSector_4K>
	SST25_WriteBlock(4096, (uint8_t *) &total_services, 2);
 800ab78:	2202      	movs	r2, #2
 800ab7a:	f10d 0106 	add.w	r1, sp, #6
 800ab7e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ab82:	f7fe fee9 	bl	8009958 <SST25_WriteBlock>
}
 800ab86:	b008      	add	sp, #32
 800ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ab8c <si468x_DAB_start_digital_service>:
{
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	b084      	sub	sp, #16
	uint8_t args[] = {
 800ab90:	f88d 2004 	strb.w	r2, [sp, #4]
 800ab94:	2300      	movs	r3, #0
 800ab96:	f88d 3005 	strb.w	r3, [sp, #5]
 800ab9a:	f88d 3006 	strb.w	r3, [sp, #6]
 800ab9e:	f88d 0007 	strb.w	r0, [sp, #7]
			(service_id >> 8) & 0xFF,
 800aba2:	0a03      	lsrs	r3, r0, #8
	uint8_t args[] = {
 800aba4:	f88d 3008 	strb.w	r3, [sp, #8]
			(service_id >> 16) & 0xFF,
 800aba8:	0c03      	lsrs	r3, r0, #16
	uint8_t args[] = {
 800abaa:	f88d 3009 	strb.w	r3, [sp, #9]
			service_id >> 24,
 800abae:	0e00      	lsrs	r0, r0, #24
	uint8_t args[] = {
 800abb0:	f88d 000a 	strb.w	r0, [sp, #10]
 800abb4:	f88d 100b 	strb.w	r1, [sp, #11]
			(component_id >> 8) & 0xFF,
 800abb8:	0a0b      	lsrs	r3, r1, #8
	uint8_t args[] = {
 800abba:	f88d 300c 	strb.w	r3, [sp, #12]
			(component_id >> 16) & 0xFF,
 800abbe:	0c0b      	lsrs	r3, r1, #16
	uint8_t args[] = {
 800abc0:	f88d 300d 	strb.w	r3, [sp, #13]
			component_id >> 24
 800abc4:	0e09      	lsrs	r1, r1, #24
	uint8_t args[] = {
 800abc6:	f88d 100e 	strb.w	r1, [sp, #14]
	Si468x_Command *command = si468x_build_command(START_DIGITAL_SERVICE, args, 11);
 800abca:	220b      	movs	r2, #11
 800abcc:	a901      	add	r1, sp, #4
 800abce:	2081      	movs	r0, #129	@ 0x81
 800abd0:	f7ff fbac 	bl	800a32c <si468x_build_command>
 800abd4:	4604      	mov	r4, r0
	si468x_execute(command);
 800abd6:	f7ff fb7d 	bl	800a2d4 <si468x_execute>
	si468x_free_command(command);
 800abda:	4620      	mov	r0, r4
 800abdc:	f7ff fbaf 	bl	800a33e <si468x_free_command>
}
 800abe0:	b004      	add	sp, #16
 800abe2:	bd10      	pop	{r4, pc}

0800abe4 <si468x_DAB_tune_service>:
{
 800abe4:	b510      	push	{r4, lr}
  DAB_Service *service = si468x_load_service_from_flash(service_mem_id);
 800abe6:	f7ff fe4d 	bl	800a884 <si468x_load_service_from_flash>
 800abea:	4604      	mov	r4, r0
  si468x_DAB_tune(service->freq_index);
 800abec:	7800      	ldrb	r0, [r0, #0]
 800abee:	f7ff fefb 	bl	800a9e8 <si468x_DAB_tune>
  si468x_DAB_start_digital_service(service->service_id, service->components[0]->component_id, SER_AUDIO);
 800abf2:	68e3      	ldr	r3, [r4, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2200      	movs	r2, #0
 800abf8:	6819      	ldr	r1, [r3, #0]
 800abfa:	6860      	ldr	r0, [r4, #4]
 800abfc:	f7ff ffc6 	bl	800ab8c <si468x_DAB_start_digital_service>
}
 800ac00:	bd10      	pop	{r4, pc}

0800ac02 <JSB_si468x_load_service_name_from_flash>:

void JSB_si468x_load_service_name_from_flash(uint16_t ServiceID, char *pServiceName, int16_t ServiceName_MaxLength)
{
 800ac02:	b538      	push	{r3, r4, r5, lr}
 800ac04:	460c      	mov	r4, r1
 800ac06:	4615      	mov	r5, r2
  DAB_Service *pService = si468x_load_service_from_flash(ServiceID);
 800ac08:	f7ff fe3c 	bl	800a884 <si468x_load_service_from_flash>
  JSB_si468x_get_service_name(pService, pServiceName, ServiceName_MaxLength);
 800ac0c:	462a      	mov	r2, r5
 800ac0e:	4621      	mov	r1, r4
 800ac10:	f7ff fea1 	bl	800a956 <JSB_si468x_get_service_name>
}
 800ac14:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ac18 <si468x_FM_tune>:
#define FM_ACF_STATUS       0x33
#define FM_RDS_STATUS				0x34
#define FM_RDS_BLOCKCOUNT			0x35

void si468x_FM_tune(float MHz)
{
 800ac18:	b530      	push	{r4, r5, lr}
 800ac1a:	ed2d 8b02 	vpush	{d8}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	ee08 0a10 	vmov	s16, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_FM)
 800ac24:	f7ff fcfa 	bl	800a61c <JSB_si468x_get_current_mode>
 800ac28:	2801      	cmp	r0, #1
 800ac2a:	d003      	beq.n	800ac34 <si468x_FM_tune+0x1c>
	Si468x_Command *command = si468x_build_command(FM_TUNE_FREQ, args, 5);
	Interrupt_Status.STCINT = 0;
	si468x_execute(command);
	si468x_wait_for_interrupt(STCINT);
	si468x_free_command(command);
}
 800ac2c:	b003      	add	sp, #12
 800ac2e:	ecbd 8b02 	vpop	{d8}
 800ac32:	bd30      	pop	{r4, r5, pc}
	uint16_t freq = MHz * 100;
 800ac34:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ac88 <si468x_FM_tune+0x70>
 800ac38:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ac3c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800ac40:	ee18 3a10 	vmov	r3, s16
 800ac44:	b29b      	uxth	r3, r3
	uint8_t args[] = {0x00, freq & 0xFF, freq >> 8, 0x00, 0x00};
 800ac46:	2400      	movs	r4, #0
 800ac48:	f88d 4000 	strb.w	r4, [sp]
 800ac4c:	f88d 3001 	strb.w	r3, [sp, #1]
 800ac50:	0a1b      	lsrs	r3, r3, #8
 800ac52:	f88d 3002 	strb.w	r3, [sp, #2]
 800ac56:	f88d 4003 	strb.w	r4, [sp, #3]
 800ac5a:	f88d 4004 	strb.w	r4, [sp, #4]
	Si468x_Command *command = si468x_build_command(FM_TUNE_FREQ, args, 5);
 800ac5e:	2205      	movs	r2, #5
 800ac60:	4669      	mov	r1, sp
 800ac62:	2030      	movs	r0, #48	@ 0x30
 800ac64:	f7ff fb62 	bl	800a32c <si468x_build_command>
 800ac68:	4605      	mov	r5, r0
	Interrupt_Status.STCINT = 0;
 800ac6a:	4b08      	ldr	r3, [pc, #32]	@ (800ac8c <si468x_FM_tune+0x74>)
 800ac6c:	781a      	ldrb	r2, [r3, #0]
 800ac6e:	f364 0200 	bfi	r2, r4, #0, #1
 800ac72:	701a      	strb	r2, [r3, #0]
	si468x_execute(command);
 800ac74:	f7ff fb2e 	bl	800a2d4 <si468x_execute>
	si468x_wait_for_interrupt(STCINT);
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f7ff faf1 	bl	800a260 <si468x_wait_for_interrupt>
	si468x_free_command(command);
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f7ff fb5d 	bl	800a33e <si468x_free_command>
 800ac84:	e7d2      	b.n	800ac2c <si468x_FM_tune+0x14>
 800ac86:	bf00      	nop
 800ac88:	42c80000 	.word	0x42c80000
 800ac8c:	20013240 	.word	0x20013240

0800ac90 <JSB_si468x_FM_get_rsq_status>:
		// PJB!!! uint8_t minutes = (date_and_time & 0x0FC0) >> 5;
	}
}

void JSB_si468x_FM_get_rsq_status(JSB_FM_RSQ_Status_t *pStatus)
{
 800ac90:	b530      	push	{r4, r5, lr}
 800ac92:	b089      	sub	sp, #36	@ 0x24
 800ac94:	4604      	mov	r4, r0
  uint8_t read_buffer[22];

  if (JSB_si468x_get_current_mode() != Si468x_MODE_FM)
 800ac96:	f7ff fcc1 	bl	800a61c <JSB_si468x_get_current_mode>
 800ac9a:	2801      	cmp	r0, #1
 800ac9c:	d001      	beq.n	800aca2 <JSB_si468x_FM_get_rsq_status+0x12>
  pStatus->Frequency = 0.01f * (read_buffer[6] + (((uint16_t) read_buffer[7]) << 8));
  pStatus->RSSI = (int8_t)read_buffer[9];
  pStatus->SNR = (int8_t)read_buffer[10];
  pStatus->MultiPath = read_buffer[11];
  si468x_free_command(pCommand);
}
 800ac9e:	b009      	add	sp, #36	@ 0x24
 800aca0:	bd30      	pop	{r4, r5, pc}
  uint8_t args[] = {0x00};
 800aca2:	2300      	movs	r3, #0
 800aca4:	f88d 3004 	strb.w	r3, [sp, #4]
  Si468x_Command *pCommand = si468x_build_command(FM_RSQ_STATUS, args, 1);
 800aca8:	2201      	movs	r2, #1
 800acaa:	a901      	add	r1, sp, #4
 800acac:	2032      	movs	r0, #50	@ 0x32
 800acae:	f7ff fb3d 	bl	800a32c <si468x_build_command>
 800acb2:	4605      	mov	r5, r0
  si468x_execute(pCommand);
 800acb4:	f7ff fb0e 	bl	800a2d4 <si468x_execute>
  si468x_read_response(read_buffer, 22);
 800acb8:	2116      	movs	r1, #22
 800acba:	a802      	add	r0, sp, #8
 800acbc:	f7ff fa9a 	bl	800a1f4 <si468x_read_response>
  pStatus->Frequency = 0.01f * (read_buffer[6] + (((uint16_t) read_buffer[7]) << 8));
 800acc0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800acc4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800acc8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800accc:	ee07 3a90 	vmov	s15, r3
 800acd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acd4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800acfc <JSB_si468x_FM_get_rsq_status+0x6c>
 800acd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800acdc:	edc4 7a00 	vstr	s15, [r4]
  pStatus->RSSI = (int8_t)read_buffer[9];
 800ace0:	f99d 3011 	ldrsb.w	r3, [sp, #17]
 800ace4:	7123      	strb	r3, [r4, #4]
  pStatus->SNR = (int8_t)read_buffer[10];
 800ace6:	f99d 3012 	ldrsb.w	r3, [sp, #18]
 800acea:	7163      	strb	r3, [r4, #5]
  pStatus->MultiPath = read_buffer[11];
 800acec:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800acf0:	71a3      	strb	r3, [r4, #6]
  si468x_free_command(pCommand);
 800acf2:	4628      	mov	r0, r5
 800acf4:	f7ff fb23 	bl	800a33e <si468x_free_command>
 800acf8:	e7d1      	b.n	800ac9e <JSB_si468x_FM_get_rsq_status+0xe>
 800acfa:	bf00      	nop
 800acfc:	3c23d70a 	.word	0x3c23d70a

0800ad00 <JSB_si468x_FM_get_stereo_separation>:
  JSB_si468x_FM_get_rsq_status(&Status);
  return Status.Frequency;
}

uint8_t JSB_si468x_FM_get_stereo_separation()
{
 800ad00:	b530      	push	{r4, r5, lr}
 800ad02:	b085      	sub	sp, #20
  uint8_t read_buffer[10];
  uint8_t StereoSeparation;

  if (JSB_si468x_get_current_mode() != Si468x_MODE_FM)
 800ad04:	f7ff fc8a 	bl	800a61c <JSB_si468x_get_current_mode>
 800ad08:	2801      	cmp	r0, #1
 800ad0a:	d003      	beq.n	800ad14 <JSB_si468x_FM_get_stereo_separation+0x14>
    return 0;
 800ad0c:	2400      	movs	r4, #0
  si468x_read_response(read_buffer, 10);
  StereoSeparation = read_buffer[8] & 0x7F;
  si468x_free_command(pCommand);

  return StereoSeparation;
}
 800ad0e:	4620      	mov	r0, r4
 800ad10:	b005      	add	sp, #20
 800ad12:	bd30      	pop	{r4, r5, pc}
  uint8_t args[] = {0x00};
 800ad14:	2300      	movs	r3, #0
 800ad16:	f88d 3000 	strb.w	r3, [sp]
  Si468x_Command *pCommand = si468x_build_command(FM_ACF_STATUS, args, 1);
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	4669      	mov	r1, sp
 800ad1e:	2033      	movs	r0, #51	@ 0x33
 800ad20:	f7ff fb04 	bl	800a32c <si468x_build_command>
 800ad24:	4605      	mov	r5, r0
  si468x_execute(pCommand);
 800ad26:	f7ff fad5 	bl	800a2d4 <si468x_execute>
  si468x_read_response(read_buffer, 10);
 800ad2a:	210a      	movs	r1, #10
 800ad2c:	a801      	add	r0, sp, #4
 800ad2e:	f7ff fa61 	bl	800a1f4 <si468x_read_response>
  StereoSeparation = read_buffer[8] & 0x7F;
 800ad32:	f89d 400c 	ldrb.w	r4, [sp, #12]
 800ad36:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
  si468x_free_command(pCommand);
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f7ff faff 	bl	800a33e <si468x_free_command>
  return StereoSeparation;
 800ad40:	e7e5      	b.n	800ad0e <JSB_si468x_FM_get_stereo_separation+0xe>
	...

0800ad44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800ad44:	b500      	push	{lr}
 800ad46:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ad48:	4b2e      	ldr	r3, [pc, #184]	@ (800ae04 <MX_DMA_Init+0xc0>)
 800ad4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad4c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800ad50:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad54:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800ad58:	9200      	str	r2, [sp, #0]
 800ad5a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ad5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad5e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800ad62:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad6a:	9301      	str	r3, [sp, #4]
 800ad6c:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2105      	movs	r1, #5
 800ad72:	200b      	movs	r0, #11
 800ad74:	f7f5 fcd8 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800ad78:	200b      	movs	r0, #11
 800ad7a:	f7f5 fce5 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2105      	movs	r1, #5
 800ad82:	200c      	movs	r0, #12
 800ad84:	f7f5 fcd0 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800ad88:	200c      	movs	r0, #12
 800ad8a:	f7f5 fcdd 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2105      	movs	r1, #5
 800ad92:	2010      	movs	r0, #16
 800ad94:	f7f5 fcc8 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800ad98:	2010      	movs	r0, #16
 800ad9a:	f7f5 fcd5 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2105      	movs	r1, #5
 800ada2:	2011      	movs	r0, #17
 800ada4:	f7f5 fcc0 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800ada8:	2011      	movs	r0, #17
 800adaa:	f7f5 fccd 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800adae:	2200      	movs	r2, #0
 800adb0:	2105      	movs	r1, #5
 800adb2:	202f      	movs	r0, #47	@ 0x2f
 800adb4:	f7f5 fcb8 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800adb8:	202f      	movs	r0, #47	@ 0x2f
 800adba:	f7f5 fcc5 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800adbe:	2200      	movs	r2, #0
 800adc0:	2105      	movs	r1, #5
 800adc2:	2039      	movs	r0, #57	@ 0x39
 800adc4:	f7f5 fcb0 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800adc8:	2039      	movs	r0, #57	@ 0x39
 800adca:	f7f5 fcbd 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800adce:	2200      	movs	r2, #0
 800add0:	2105      	movs	r1, #5
 800add2:	203a      	movs	r0, #58	@ 0x3a
 800add4:	f7f5 fca8 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800add8:	203a      	movs	r0, #58	@ 0x3a
 800adda:	f7f5 fcb5 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800adde:	2200      	movs	r2, #0
 800ade0:	2105      	movs	r1, #5
 800ade2:	203b      	movs	r0, #59	@ 0x3b
 800ade4:	f7f5 fca0 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800ade8:	203b      	movs	r0, #59	@ 0x3b
 800adea:	f7f5 fcad 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800adee:	2200      	movs	r2, #0
 800adf0:	2105      	movs	r1, #5
 800adf2:	2045      	movs	r0, #69	@ 0x45
 800adf4:	f7f5 fc98 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800adf8:	2045      	movs	r0, #69	@ 0x45
 800adfa:	f7f5 fca5 	bl	8000748 <HAL_NVIC_EnableIRQ>

}
 800adfe:	b003      	add	sp, #12
 800ae00:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae04:	40023800 	.word	0x40023800

0800ae08 <MainTask_Start>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_MainTask_Start */
void MainTask_Start(void const * argument)
{
 800ae08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MainTask_Start */
  Go();
 800ae0a:	f002 fd63 	bl	800d8d4 <Go>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800ae0e:	2001      	movs	r0, #1
 800ae10:	f7fa fe78 	bl	8005b04 <osDelay>
  for(;;)
 800ae14:	e7fb      	b.n	800ae0e <MainTask_Start+0x6>
	...

0800ae18 <ProcessAudioTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ProcessAudioTask_Start */
void ProcessAudioTask_Start(void const * argument)
{
 800ae18:	b500      	push	{lr}
 800ae1a:	b083      	sub	sp, #12
  AudioBufferHalf_t AudioBufferHalf;

  /* Infinite loop */
  for(;;)
  {
    xQueueReceive(ProcessAudioTaskParameterQueueHandle, &AudioBufferHalf, portMAX_DELAY);
 800ae1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae20:	f10d 0107 	add.w	r1, sp, #7
 800ae24:	4b04      	ldr	r3, [pc, #16]	@ (800ae38 <ProcessAudioTask_Start+0x20>)
 800ae26:	6818      	ldr	r0, [r3, #0]
 800ae28:	f7fb fd04 	bl	8006834 <xQueueReceive>
    ProcessAudio(AudioBufferHalf);
 800ae2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ae30:	f001 f840 	bl	800beb4 <ProcessAudio>
  for(;;)
 800ae34:	e7f2      	b.n	800ae1c <ProcessAudioTask_Start+0x4>
 800ae36:	bf00      	nop
 800ae38:	20015330 	.word	0x20015330

0800ae3c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ae3c:	4b03      	ldr	r3, [pc, #12]	@ (800ae4c <vApplicationGetIdleTaskMemory+0x10>)
 800ae3e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ae40:	4b03      	ldr	r3, [pc, #12]	@ (800ae50 <vApplicationGetIdleTaskMemory+0x14>)
 800ae42:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ae44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae48:	6013      	str	r3, [r2, #0]
}
 800ae4a:	4770      	bx	lr
 800ae4c:	20015278 	.word	0x20015278
 800ae50:	20013278 	.word	0x20013278

0800ae54 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800ae54:	b530      	push	{r4, r5, lr}
 800ae56:	b097      	sub	sp, #92	@ 0x5c
  osMutexDef(SPI3_Mutex);
 800ae58:	2500      	movs	r5, #0
 800ae5a:	9514      	str	r5, [sp, #80]	@ 0x50
 800ae5c:	9515      	str	r5, [sp, #84]	@ 0x54
  SPI3_MutexHandle = osMutexCreate(osMutex(SPI3_Mutex));
 800ae5e:	a814      	add	r0, sp, #80	@ 0x50
 800ae60:	f7fa fe57 	bl	8005b12 <osMutexCreate>
 800ae64:	4b1d      	ldr	r3, [pc, #116]	@ (800aedc <MX_FREERTOS_Init+0x88>)
 800ae66:	6018      	str	r0, [r3, #0]
  osSemaphoreDef(GenSPITransferCompleteSemaphore);
 800ae68:	9512      	str	r5, [sp, #72]	@ 0x48
 800ae6a:	9513      	str	r5, [sp, #76]	@ 0x4c
  GenSPITransferCompleteSemaphoreHandle = osSemaphoreCreate(osSemaphore(GenSPITransferCompleteSemaphore), 1);
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	a812      	add	r0, sp, #72	@ 0x48
 800ae70:	f7fa fe5a 	bl	8005b28 <osSemaphoreCreate>
 800ae74:	4b1a      	ldr	r3, [pc, #104]	@ (800aee0 <MX_FREERTOS_Init+0x8c>)
 800ae76:	6018      	str	r0, [r3, #0]
  osMessageQDef(ProcessAudioTaskParameterQueue, 1, uint16_t);
 800ae78:	4c1a      	ldr	r4, [pc, #104]	@ (800aee4 <MX_FREERTOS_Init+0x90>)
 800ae7a:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 800ae7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ae82:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  ProcessAudioTaskParameterQueueHandle = osMessageCreate(osMessageQ(ProcessAudioTaskParameterQueue), NULL);
 800ae86:	4629      	mov	r1, r5
 800ae88:	4660      	mov	r0, ip
 800ae8a:	f7fa fe71 	bl	8005b70 <osMessageCreate>
 800ae8e:	4b16      	ldr	r3, [pc, #88]	@ (800aee8 <MX_FREERTOS_Init+0x94>)
 800ae90:	6018      	str	r0, [r3, #0]
  osThreadDef(MainTask, MainTask_Start, osPriorityNormal, 0, 2048);
 800ae92:	f10d 0c1c 	add.w	ip, sp, #28
 800ae96:	f104 0e10 	add.w	lr, r4, #16
 800ae9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ae9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aea2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800aea6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800aeaa:	4629      	mov	r1, r5
 800aeac:	a807      	add	r0, sp, #28
 800aeae:	f7fa fdf6 	bl	8005a9e <osThreadCreate>
 800aeb2:	4b0e      	ldr	r3, [pc, #56]	@ (800aeec <MX_FREERTOS_Init+0x98>)
 800aeb4:	6018      	str	r0, [r3, #0]
  osThreadDef(ProcessAudioTask, ProcessAudioTask_Start, osPriorityAboveNormal, 0, 2048);
 800aeb6:	46ee      	mov	lr, sp
 800aeb8:	f104 0c2c 	add.w	ip, r4, #44	@ 0x2c
 800aebc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aec0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aec4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800aec8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  ProcessAudioTaskHandle = osThreadCreate(osThread(ProcessAudioTask), NULL);
 800aecc:	4629      	mov	r1, r5
 800aece:	4668      	mov	r0, sp
 800aed0:	f7fa fde5 	bl	8005a9e <osThreadCreate>
 800aed4:	4b06      	ldr	r3, [pc, #24]	@ (800aef0 <MX_FREERTOS_Init+0x9c>)
 800aed6:	6018      	str	r0, [r3, #0]
}
 800aed8:	b017      	add	sp, #92	@ 0x5c
 800aeda:	bd30      	pop	{r4, r5, pc}
 800aedc:	2001532c 	.word	0x2001532c
 800aee0:	20015328 	.word	0x20015328
 800aee4:	08012730 	.word	0x08012730
 800aee8:	20015330 	.word	0x20015330
 800aeec:	20015338 	.word	0x20015338
 800aef0:	20015334 	.word	0x20015334

0800aef4 <SetInputChannel>:
static uint8_t InputChannelChanged = 0;
static uint8_t IR_UseChannelButtonsToControlRadio = 0;

static void SetInputChannel(InputChannel_t Value)
{
  if (InputChannel == Value)
 800aef4:	4b06      	ldr	r3, [pc, #24]	@ (800af10 <SetInputChannel+0x1c>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	4283      	cmp	r3, r0
 800aefa:	d007      	beq.n	800af0c <SetInputChannel+0x18>
    return;

  IR_UseChannelButtonsToControlRadio = 0;
 800aefc:	4b05      	ldr	r3, [pc, #20]	@ (800af14 <SetInputChannel+0x20>)
 800aefe:	2200      	movs	r2, #0
 800af00:	701a      	strb	r2, [r3, #0]
  InputChannel = Value;
 800af02:	4b03      	ldr	r3, [pc, #12]	@ (800af10 <SetInputChannel+0x1c>)
 800af04:	7018      	strb	r0, [r3, #0]
  InputChannelChanged = 1;
 800af06:	4b04      	ldr	r3, [pc, #16]	@ (800af18 <SetInputChannel+0x24>)
 800af08:	2201      	movs	r2, #1
 800af0a:	701a      	strb	r2, [r3, #0]
}
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	20017203 	.word	0x20017203
 800af14:	20017201 	.word	0x20017201
 800af18:	20017202 	.word	0x20017202

0800af1c <GetSPDIFInputChannel>:

static uint8_t GetSPDIFInputChannel(InputChannel_t Value)
{
  return Value - icSPDIF0;
 800af1c:	3801      	subs	r0, #1
}
 800af1e:	b2c0      	uxtb	r0, r0
 800af20:	4770      	bx	lr
	...

0800af24 <InputChannelIsSPDIF>:

static uint8_t InputChannelIsSPDIF()
{
  switch(InputChannel)
 800af24:	4b04      	ldr	r3, [pc, #16]	@ (800af38 <InputChannelIsSPDIF+0x14>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	3b01      	subs	r3, #1
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d801      	bhi.n	800af32 <InputChannelIsSPDIF+0xe>
  {
    case icSPDIF0:
    case icSPDIF1:
    case icSPDIF2:
    case icSPDIF3:
      return 1;
 800af2e:	2001      	movs	r0, #1
 800af30:	4770      	bx	lr
    default:
      return 0;
 800af32:	2000      	movs	r0, #0
  }
}
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	20017203 	.word	0x20017203

0800af3c <InputChannelIsI2S>:

static uint8_t InputChannelIsI2S()
{
  switch(InputChannel)
 800af3c:	4b04      	ldr	r3, [pc, #16]	@ (800af50 <InputChannelIsI2S+0x14>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	3b05      	subs	r3, #5
 800af42:	2b03      	cmp	r3, #3
 800af44:	d801      	bhi.n	800af4a <InputChannelIsI2S+0xe>
  {
    case icSi468x_DAB:
    case icSi468x_FM:
    case icAR1010_FM:
    case icAuxIn:
      return 1;
 800af46:	2001      	movs	r0, #1
 800af48:	4770      	bx	lr
    default:
      return 0;
 800af4a:	2000      	movs	r0, #0
  }
}
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	20017203 	.word	0x20017203

0800af54 <InputChannelIsRadio>:

static uint8_t InputChannelIsRadio()
{
  switch(InputChannel)
 800af54:	4b04      	ldr	r3, [pc, #16]	@ (800af68 <InputChannelIsRadio+0x14>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	3b05      	subs	r3, #5
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d801      	bhi.n	800af62 <InputChannelIsRadio+0xe>
  {
    case icSi468x_DAB:
    case icSi468x_FM:
    case icAR1010_FM:
      return 1;
 800af5e:	2001      	movs	r0, #1
 800af60:	4770      	bx	lr
    default:
      return 0;
 800af62:	2000      	movs	r0, #0
  }
}
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	20017203 	.word	0x20017203

0800af6c <InputPage_InputButtonPressed>:

///////////////////////////////////////////////////////////////////////////////
// InputPage:

void InputPage_InputButtonPressed(JSB_UI_Control_t *pControl)
{
 800af6c:	b508      	push	{r3, lr}
  if(pControl == pInputPage_InputButton_Humax)
 800af6e:	4b20      	ldr	r3, [pc, #128]	@ (800aff0 <InputPage_InputButtonPressed+0x84>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4283      	cmp	r3, r0
 800af74:	d01c      	beq.n	800afb0 <InputPage_InputButtonPressed+0x44>
    SetInputChannel(icSPDIF0);
  else if(pControl == pInputPage_InputButton_DVD_HDD)
 800af76:	4b1f      	ldr	r3, [pc, #124]	@ (800aff4 <InputPage_InputButtonPressed+0x88>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4283      	cmp	r3, r0
 800af7c:	d01c      	beq.n	800afb8 <InputPage_InputButtonPressed+0x4c>
    SetInputChannel(icSPDIF1);
  else if(pControl == pInputPage_InputButton_GCA)
 800af7e:	4b1e      	ldr	r3, [pc, #120]	@ (800aff8 <InputPage_InputButtonPressed+0x8c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4283      	cmp	r3, r0
 800af84:	d01c      	beq.n	800afc0 <InputPage_InputButtonPressed+0x54>
    SetInputChannel(icSPDIF2);
  else if(pControl == pInputPage_InputButton_Computer)
 800af86:	4b1d      	ldr	r3, [pc, #116]	@ (800affc <InputPage_InputButtonPressed+0x90>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4283      	cmp	r3, r0
 800af8c:	d01c      	beq.n	800afc8 <InputPage_InputButtonPressed+0x5c>
    SetInputChannel(icSPDIF3);
  else if(pControl == pInputPage_InputButton_DAB)
 800af8e:	4b1c      	ldr	r3, [pc, #112]	@ (800b000 <InputPage_InputButtonPressed+0x94>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4283      	cmp	r3, r0
 800af94:	d01c      	beq.n	800afd0 <InputPage_InputButtonPressed+0x64>
    SetInputChannel(icSi468x_DAB);
  else if(pControl == pInputPage_InputButton_Si468x_FM)
 800af96:	4b1b      	ldr	r3, [pc, #108]	@ (800b004 <InputPage_InputButtonPressed+0x98>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4283      	cmp	r3, r0
 800af9c:	d01c      	beq.n	800afd8 <InputPage_InputButtonPressed+0x6c>
    SetInputChannel(icSi468x_FM);
  else if(pControl == pInputPage_InputButton_AR1010_FM)
 800af9e:	4b1a      	ldr	r3, [pc, #104]	@ (800b008 <InputPage_InputButtonPressed+0x9c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4283      	cmp	r3, r0
 800afa4:	d01c      	beq.n	800afe0 <InputPage_InputButtonPressed+0x74>
    SetInputChannel(icAR1010_FM);
  else if(pControl == pInputPage_InputButton_AuxIn)
 800afa6:	4b19      	ldr	r3, [pc, #100]	@ (800b00c <InputPage_InputButtonPressed+0xa0>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4283      	cmp	r3, r0
 800afac:	d01c      	beq.n	800afe8 <InputPage_InputButtonPressed+0x7c>
    SetInputChannel(icAuxIn);
}
 800afae:	bd08      	pop	{r3, pc}
    SetInputChannel(icSPDIF0);
 800afb0:	2001      	movs	r0, #1
 800afb2:	f7ff ff9f 	bl	800aef4 <SetInputChannel>
 800afb6:	e7fa      	b.n	800afae <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icSPDIF1);
 800afb8:	2002      	movs	r0, #2
 800afba:	f7ff ff9b 	bl	800aef4 <SetInputChannel>
 800afbe:	e7f6      	b.n	800afae <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icSPDIF2);
 800afc0:	2003      	movs	r0, #3
 800afc2:	f7ff ff97 	bl	800aef4 <SetInputChannel>
 800afc6:	e7f2      	b.n	800afae <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icSPDIF3);
 800afc8:	2004      	movs	r0, #4
 800afca:	f7ff ff93 	bl	800aef4 <SetInputChannel>
 800afce:	e7ee      	b.n	800afae <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icSi468x_DAB);
 800afd0:	2005      	movs	r0, #5
 800afd2:	f7ff ff8f 	bl	800aef4 <SetInputChannel>
 800afd6:	e7ea      	b.n	800afae <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icSi468x_FM);
 800afd8:	2006      	movs	r0, #6
 800afda:	f7ff ff8b 	bl	800aef4 <SetInputChannel>
 800afde:	e7e6      	b.n	800afae <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icAR1010_FM);
 800afe0:	2007      	movs	r0, #7
 800afe2:	f7ff ff87 	bl	800aef4 <SetInputChannel>
 800afe6:	e7e2      	b.n	800afae <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icAuxIn);
 800afe8:	2008      	movs	r0, #8
 800afea:	f7ff ff83 	bl	800aef4 <SetInputChannel>
}
 800afee:	e7de      	b.n	800afae <InputPage_InputButtonPressed+0x42>
 800aff0:	200172a4 	.word	0x200172a4
 800aff4:	200172a0 	.word	0x200172a0
 800aff8:	2001729c 	.word	0x2001729c
 800affc:	20017298 	.word	0x20017298
 800b000:	20017294 	.word	0x20017294
 800b004:	20017290 	.word	0x20017290
 800b008:	2001728c 	.word	0x2001728c
 800b00c:	20017288 	.word	0x20017288

0800b010 <DebugInfoPage_CustomDraw>:
//}

void DebugInfoPage_CustomDraw(JSB_UI_Page_t *pPage)
{
  // DrawADCRegisters();
}
 800b010:	4770      	bx	lr
	...

0800b014 <GenSPI_Begin>:
{
 800b014:	b508      	push	{r3, lr}
  xSemaphoreTake(SPI3_MutexHandle, portMAX_DELAY);
 800b016:	f04f 31ff 	mov.w	r1, #4294967295
 800b01a:	4b02      	ldr	r3, [pc, #8]	@ (800b024 <GenSPI_Begin+0x10>)
 800b01c:	6818      	ldr	r0, [r3, #0]
 800b01e:	f7fb fcbe 	bl	800699e <xQueueSemaphoreTake>
}
 800b022:	bd08      	pop	{r3, pc}
 800b024:	2001532c 	.word	0x2001532c

0800b028 <GenSPI_End>:
{
 800b028:	b508      	push	{r3, lr}
  xSemaphoreGive(SPI3_MutexHandle);
 800b02a:	2300      	movs	r3, #0
 800b02c:	461a      	mov	r2, r3
 800b02e:	4619      	mov	r1, r3
 800b030:	4802      	ldr	r0, [pc, #8]	@ (800b03c <GenSPI_End+0x14>)
 800b032:	6800      	ldr	r0, [r0, #0]
 800b034:	f7fb fa3d 	bl	80064b2 <xQueueGenericSend>
}
 800b038:	bd08      	pop	{r3, pc}
 800b03a:	bf00      	nop
 800b03c:	2001532c 	.word	0x2001532c

0800b040 <pPowerAmplifierPage_VolumeControlTweakText>:
{
 800b040:	b500      	push	{lr}
 800b042:	b083      	sub	sp, #12
 800b044:	4603      	mov	r3, r0
 800b046:	4608      	mov	r0, r1
 800b048:	4611      	mov	r1, r2
  snprintf(Result, MaxResultLength, "%s %0.1f dB", pControl->Text, *pControl->pSliderValue);
 800b04a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b04c:	ed92 7a00 	vldr	s14, [r2]
 800b050:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800b054:	ed8d 7b00 	vstr	d7, [sp]
 800b058:	3314      	adds	r3, #20
 800b05a:	4a03      	ldr	r2, [pc, #12]	@ (800b068 <pPowerAmplifierPage_VolumeControlTweakText+0x28>)
 800b05c:	f004 fd98 	bl	800fb90 <sniprintf>
}
 800b060:	b003      	add	sp, #12
 800b062:	f85d fb04 	ldr.w	pc, [sp], #4
 800b066:	bf00      	nop
 800b068:	08012858 	.word	0x08012858

0800b06c <RadioInfoPage_CustomDraw>:
{
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	b0ba      	sub	sp, #232	@ 0xe8
  switch (InputChannel)
 800b070:	4b99      	ldr	r3, [pc, #612]	@ (800b2d8 <RadioInfoPage_CustomDraw+0x26c>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b06      	cmp	r3, #6
 800b076:	d061      	beq.n	800b13c <RadioInfoPage_CustomDraw+0xd0>
 800b078:	2b07      	cmp	r3, #7
 800b07a:	d013      	beq.n	800b0a4 <RadioInfoPage_CustomDraw+0x38>
 800b07c:	2b05      	cmp	r3, #5
 800b07e:	f000 80c6 	beq.w	800b20e <RadioInfoPage_CustomDraw+0x1a2>
      sprintf(S, "Radio: None");
 800b082:	ac08      	add	r4, sp, #32
 800b084:	4b95      	ldr	r3, [pc, #596]	@ (800b2dc <RadioInfoPage_CustomDraw+0x270>)
 800b086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b08a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b08e:	f7fd f9d7 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b092:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b096:	2301      	movs	r3, #1
 800b098:	b282      	uxth	r2, r0
 800b09a:	2100      	movs	r1, #0
 800b09c:	4620      	mov	r0, r4
 800b09e:	f7fd fb59 	bl	8008754 <ILI9341_DrawTextAtXY>
}
 800b0a2:	e049      	b.n	800b138 <RadioInfoPage_CustomDraw+0xcc>
      sprintf(S, "Radio: AR1010 FM");
 800b0a4:	ac08      	add	r4, sp, #32
 800b0a6:	4d8e      	ldr	r5, [pc, #568]	@ (800b2e0 <RadioInfoPage_CustomDraw+0x274>)
 800b0a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	7023      	strb	r3, [r4, #0]
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b0b0:	f7fd f9c6 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b0b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	b282      	uxth	r2, r0
 800b0bc:	2100      	movs	r1, #0
 800b0be:	a808      	add	r0, sp, #32
 800b0c0:	f7fd fb48 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "Frequency: %0.1f MHz", JSB_AR1010_get_frequency());
 800b0c4:	f7fc fc60 	bl	8007988 <JSB_AR1010_get_frequency>
 800b0c8:	ee07 0a90 	vmov	s15, r0
 800b0cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b0d0:	ec53 2b17 	vmov	r2, r3, d7
 800b0d4:	4983      	ldr	r1, [pc, #524]	@ (800b2e4 <RadioInfoPage_CustomDraw+0x278>)
 800b0d6:	a808      	add	r0, sp, #32
 800b0d8:	f004 fd90 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b0dc:	f7fd f9b0 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b0e0:	0082      	lsls	r2, r0, #2
 800b0e2:	b292      	uxth	r2, r2
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	a808      	add	r0, sp, #32
 800b0ea:	f7fd fb33 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "RSSI: %d", JSB_AR1010_get_RSSI());
 800b0ee:	f7fc fc61 	bl	80079b4 <JSB_AR1010_get_RSSI>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	497c      	ldr	r1, [pc, #496]	@ (800b2e8 <RadioInfoPage_CustomDraw+0x27c>)
 800b0f6:	a808      	add	r0, sp, #32
 800b0f8:	f004 fd80 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b0fc:	f7fd f9a0 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b100:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b104:	2301      	movs	r3, #1
 800b106:	b282      	uxth	r2, r0
 800b108:	2100      	movs	r1, #0
 800b10a:	a808      	add	r0, sp, #32
 800b10c:	f7fd fb22 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "Stereo: %s", BooleanToNoYes(JSB_AR1010_is_stereo()));
 800b110:	f7fc fc57 	bl	80079c2 <JSB_AR1010_is_stereo>
 800b114:	f7fc fcfa 	bl	8007b0c <BooleanToNoYes>
 800b118:	4602      	mov	r2, r0
 800b11a:	4974      	ldr	r1, [pc, #464]	@ (800b2ec <RadioInfoPage_CustomDraw+0x280>)
 800b11c:	a808      	add	r0, sp, #32
 800b11e:	f004 fd6d 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b122:	f7fd f98d 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b126:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b12a:	0042      	lsls	r2, r0, #1
 800b12c:	b292      	uxth	r2, r2
 800b12e:	2301      	movs	r3, #1
 800b130:	2100      	movs	r1, #0
 800b132:	a808      	add	r0, sp, #32
 800b134:	f7fd fb0e 	bl	8008754 <ILI9341_DrawTextAtXY>
}
 800b138:	b03a      	add	sp, #232	@ 0xe8
 800b13a:	bd70      	pop	{r4, r5, r6, pc}
      JSB_si468x_FM_get_rsq_status(&FM_RSQ_Status);
 800b13c:	a806      	add	r0, sp, #24
 800b13e:	f7ff fda7 	bl	800ac90 <JSB_si468x_FM_get_rsq_status>
      StereoSeparation = JSB_si468x_FM_get_stereo_separation();
 800b142:	f7ff fddd 	bl	800ad00 <JSB_si468x_FM_get_stereo_separation>
 800b146:	4606      	mov	r6, r0
      sprintf(S, "Radio: Si4684 FM");
 800b148:	ac08      	add	r4, sp, #32
 800b14a:	4d69      	ldr	r5, [pc, #420]	@ (800b2f0 <RadioInfoPage_CustomDraw+0x284>)
 800b14c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b14e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	7023      	strb	r3, [r4, #0]
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b154:	f7fd f974 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b158:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b15c:	2301      	movs	r3, #1
 800b15e:	b282      	uxth	r2, r0
 800b160:	2100      	movs	r1, #0
 800b162:	a808      	add	r0, sp, #32
 800b164:	f7fd faf6 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "Frequency: %0.1f MHz", FM_RSQ_Status.Frequency);
 800b168:	eddd 7a06 	vldr	s15, [sp, #24]
 800b16c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b170:	ec53 2b17 	vmov	r2, r3, d7
 800b174:	495b      	ldr	r1, [pc, #364]	@ (800b2e4 <RadioInfoPage_CustomDraw+0x278>)
 800b176:	a808      	add	r0, sp, #32
 800b178:	f004 fd40 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b17c:	f7fd f960 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b180:	0082      	lsls	r2, r0, #2
 800b182:	b292      	uxth	r2, r2
 800b184:	2301      	movs	r3, #1
 800b186:	2100      	movs	r1, #0
 800b188:	a808      	add	r0, sp, #32
 800b18a:	f7fd fae3 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "RSSI: %d dBuV", FM_RSQ_Status.RSSI);
 800b18e:	f99d 201c 	ldrsb.w	r2, [sp, #28]
 800b192:	4958      	ldr	r1, [pc, #352]	@ (800b2f4 <RadioInfoPage_CustomDraw+0x288>)
 800b194:	a808      	add	r0, sp, #32
 800b196:	f004 fd31 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b19a:	f7fd f951 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b19e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	b282      	uxth	r2, r0
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	a808      	add	r0, sp, #32
 800b1aa:	f7fd fad3 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "SNR: %d dB", FM_RSQ_Status.SNR);
 800b1ae:	f99d 201d 	ldrsb.w	r2, [sp, #29]
 800b1b2:	4951      	ldr	r1, [pc, #324]	@ (800b2f8 <RadioInfoPage_CustomDraw+0x28c>)
 800b1b4:	a808      	add	r0, sp, #32
 800b1b6:	f004 fd21 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b1ba:	f7fd f941 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b1be:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800b1c2:	0052      	lsls	r2, r2, #1
 800b1c4:	b292      	uxth	r2, r2
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	a808      	add	r0, sp, #32
 800b1cc:	f7fd fac2 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "Multi-path: %d", FM_RSQ_Status.MultiPath);
 800b1d0:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800b1d4:	4949      	ldr	r1, [pc, #292]	@ (800b2fc <RadioInfoPage_CustomDraw+0x290>)
 800b1d6:	a808      	add	r0, sp, #32
 800b1d8:	f004 fd10 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b1dc:	f7fd f930 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b1e0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	b282      	uxth	r2, r0
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	a808      	add	r0, sp, #32
 800b1ec:	f7fd fab2 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "Stereo separation: %d", StereoSeparation);
 800b1f0:	4632      	mov	r2, r6
 800b1f2:	4943      	ldr	r1, [pc, #268]	@ (800b300 <RadioInfoPage_CustomDraw+0x294>)
 800b1f4:	a808      	add	r0, sp, #32
 800b1f6:	f004 fd01 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b1fa:	f7fd f921 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b1fe:	00c2      	lsls	r2, r0, #3
 800b200:	b292      	uxth	r2, r2
 800b202:	2301      	movs	r3, #1
 800b204:	2100      	movs	r1, #0
 800b206:	a808      	add	r0, sp, #32
 800b208:	f7fd faa4 	bl	8008754 <ILI9341_DrawTextAtXY>
      break;
 800b20c:	e794      	b.n	800b138 <RadioInfoPage_CustomDraw+0xcc>
      si468x_DAB_get_digrad_status(&DAB_Status);
 800b20e:	a801      	add	r0, sp, #4
 800b210:	f7ff fc14 	bl	800aa3c <si468x_DAB_get_digrad_status>
      sprintf(S, "Radio: Si4684 DAB");
 800b214:	f10d 0c20 	add.w	ip, sp, #32
 800b218:	4c3a      	ldr	r4, [pc, #232]	@ (800b304 <RadioInfoPage_CustomDraw+0x298>)
 800b21a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b21c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	f8ac 3000 	strh.w	r3, [ip]
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b226:	f7fd f90b 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b22a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b22e:	2301      	movs	r3, #1
 800b230:	b282      	uxth	r2, r0
 800b232:	2100      	movs	r1, #0
 800b234:	a808      	add	r0, sp, #32
 800b236:	f7fd fa8d 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "Service: %s", DAB_ServiceName);
 800b23a:	4a33      	ldr	r2, [pc, #204]	@ (800b308 <RadioInfoPage_CustomDraw+0x29c>)
 800b23c:	4933      	ldr	r1, [pc, #204]	@ (800b30c <RadioInfoPage_CustomDraw+0x2a0>)
 800b23e:	a808      	add	r0, sp, #32
 800b240:	f004 fcdc 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b244:	f7fd f8fc 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b248:	0082      	lsls	r2, r0, #2
 800b24a:	b292      	uxth	r2, r2
 800b24c:	2301      	movs	r3, #1
 800b24e:	2100      	movs	r1, #0
 800b250:	a808      	add	r0, sp, #32
 800b252:	f7fd fa7f 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "RSSI: %d", (int8_t)DAB_Status.data[2]);
 800b256:	f99d 2006 	ldrsb.w	r2, [sp, #6]
 800b25a:	4923      	ldr	r1, [pc, #140]	@ (800b2e8 <RadioInfoPage_CustomDraw+0x27c>)
 800b25c:	a808      	add	r0, sp, #32
 800b25e:	f004 fccd 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b262:	f7fd f8ed 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b266:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b26a:	2301      	movs	r3, #1
 800b26c:	b282      	uxth	r2, r0
 800b26e:	2100      	movs	r1, #0
 800b270:	a808      	add	r0, sp, #32
 800b272:	f7fd fa6f 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "SNR: %d dB", (int8_t)DAB_Status.data[3]);
 800b276:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 800b27a:	491f      	ldr	r1, [pc, #124]	@ (800b2f8 <RadioInfoPage_CustomDraw+0x28c>)
 800b27c:	a808      	add	r0, sp, #32
 800b27e:	f004 fcbd 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b282:	f7fd f8dd 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b286:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b28a:	0042      	lsls	r2, r0, #1
 800b28c:	b292      	uxth	r2, r2
 800b28e:	2301      	movs	r3, #1
 800b290:	2100      	movs	r1, #0
 800b292:	a808      	add	r0, sp, #32
 800b294:	f7fd fa5e 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "FIC quality: %d", (int8_t)DAB_Status.data[4]);
 800b298:	f99d 2008 	ldrsb.w	r2, [sp, #8]
 800b29c:	491c      	ldr	r1, [pc, #112]	@ (800b310 <RadioInfoPage_CustomDraw+0x2a4>)
 800b29e:	a808      	add	r0, sp, #32
 800b2a0:	f004 fcac 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b2a4:	f7fd f8cc 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b2a8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	b282      	uxth	r2, r0
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	a808      	add	r0, sp, #32
 800b2b4:	f7fd fa4e 	bl	8008754 <ILI9341_DrawTextAtXY>
      sprintf(S, "CNR: %d", (int8_t)DAB_Status.data[5]);
 800b2b8:	f99d 2009 	ldrsb.w	r2, [sp, #9]
 800b2bc:	4915      	ldr	r1, [pc, #84]	@ (800b314 <RadioInfoPage_CustomDraw+0x2a8>)
 800b2be:	a808      	add	r0, sp, #32
 800b2c0:	f004 fc9c 	bl	800fbfc <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b2c4:	f7fd f8bc 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b2c8:	00c2      	lsls	r2, r0, #3
 800b2ca:	b292      	uxth	r2, r2
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	a808      	add	r0, sp, #32
 800b2d2:	f7fd fa3f 	bl	8008754 <ILI9341_DrawTextAtXY>
      break;
 800b2d6:	e72f      	b.n	800b138 <RadioInfoPage_CustomDraw+0xcc>
 800b2d8:	20017203 	.word	0x20017203
 800b2dc:	08012938 	.word	0x08012938
 800b2e0:	08012864 	.word	0x08012864
 800b2e4:	08012878 	.word	0x08012878
 800b2e8:	08012890 	.word	0x08012890
 800b2ec:	0801289c 	.word	0x0801289c
 800b2f0:	080128a8 	.word	0x080128a8
 800b2f4:	080128bc 	.word	0x080128bc
 800b2f8:	080128cc 	.word	0x080128cc
 800b2fc:	080128d8 	.word	0x080128d8
 800b300:	080128e8 	.word	0x080128e8
 800b304:	08012900 	.word	0x08012900
 800b308:	20015340 	.word	0x20015340
 800b30c:	08012914 	.word	0x08012914
 800b310:	08012920 	.word	0x08012920
 800b314:	08012930 	.word	0x08012930

0800b318 <SPDIFRX_Locked_Callback>:
{
 800b318:	b508      	push	{r3, lr}
 800b31a:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, Value);
 800b31c:	2104      	movs	r1, #4
 800b31e:	4802      	ldr	r0, [pc, #8]	@ (800b328 <SPDIFRX_Locked_Callback+0x10>)
 800b320:	f7f5 fd81 	bl	8000e26 <HAL_GPIO_WritePin>
}
 800b324:	bd08      	pop	{r3, pc}
 800b326:	bf00      	nop
 800b328:	40020000 	.word	0x40020000

0800b32c <GetInputSampleRate>:
{
 800b32c:	b508      	push	{r3, lr}
  if (SPDIFRX_IsStarted())
 800b32e:	f7fd fe4b 	bl	8008fc8 <SPDIFRX_IsStarted>
 800b332:	b910      	cbnz	r0, 800b33a <GetInputSampleRate+0xe>
  return OutputSampleRate; // Input sample rate is the same as the output one.
 800b334:	4b02      	ldr	r3, [pc, #8]	@ (800b340 <GetInputSampleRate+0x14>)
 800b336:	6818      	ldr	r0, [r3, #0]
}
 800b338:	bd08      	pop	{r3, pc}
    return SPDIFRX_GetInputSampleRate();
 800b33a:	f7fd fc37 	bl	8008bac <SPDIFRX_GetInputSampleRate>
 800b33e:	e7fb      	b.n	800b338 <GetInputSampleRate+0xc>
 800b340:	200153d8 	.word	0x200153d8

0800b344 <InfoPage_CustomDraw>:
{
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	b0b4      	sub	sp, #208	@ 0xd0
  if (InputChannelIsSPDIF())
 800b348:	f7ff fdec 	bl	800af24 <InputChannelIsSPDIF>
 800b34c:	b978      	cbnz	r0, 800b36e <InfoPage_CustomDraw+0x2a>
    switch (InputChannel)
 800b34e:	4b9c      	ldr	r3, [pc, #624]	@ (800b5c0 <InfoPage_CustomDraw+0x27c>)
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b08      	cmp	r3, #8
 800b354:	f200 8100 	bhi.w	800b558 <InfoPage_CustomDraw+0x214>
 800b358:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b35c:	00fe001d 	.word	0x00fe001d
 800b360:	00fe00fe 	.word	0x00fe00fe
 800b364:	00d500fe 	.word	0x00d500fe
 800b368:	00eb00de 	.word	0x00eb00de
 800b36c:	00f8      	.short	0x00f8
    sprintf(S, "Input: SPDIF %d", GetSPDIFInputChannel(InputChannel));
 800b36e:	4b94      	ldr	r3, [pc, #592]	@ (800b5c0 <InfoPage_CustomDraw+0x27c>)
 800b370:	7818      	ldrb	r0, [r3, #0]
 800b372:	f7ff fdd3 	bl	800af1c <GetSPDIFInputChannel>
 800b376:	4602      	mov	r2, r0
 800b378:	4992      	ldr	r1, [pc, #584]	@ (800b5c4 <InfoPage_CustomDraw+0x280>)
 800b37a:	a802      	add	r0, sp, #8
 800b37c:	f004 fc3e 	bl	800fbfc <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b380:	f7fd f85e 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b384:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b388:	2301      	movs	r3, #1
 800b38a:	b282      	uxth	r2, r0
 800b38c:	2100      	movs	r1, #0
 800b38e:	a802      	add	r0, sp, #8
 800b390:	f7fd f9e0 	bl	8008754 <ILI9341_DrawTextAtXY>
 800b394:	e00e      	b.n	800b3b4 <InfoPage_CustomDraw+0x70>
        sprintf(S, "Input: None");
 800b396:	ab02      	add	r3, sp, #8
 800b398:	4a8b      	ldr	r2, [pc, #556]	@ (800b5c8 <InfoPage_CustomDraw+0x284>)
 800b39a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b39c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b3a0:	f7fd f84e 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b3a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	b282      	uxth	r2, r0
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	a802      	add	r0, sp, #8
 800b3b0:	f7fd f9d0 	bl	8008754 <ILI9341_DrawTextAtXY>
  if (InputChannel == icSi468x_DAB)
 800b3b4:	4b82      	ldr	r3, [pc, #520]	@ (800b5c0 <InfoPage_CustomDraw+0x27c>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b05      	cmp	r3, #5
 800b3ba:	f000 80d0 	beq.w	800b55e <InfoPage_CustomDraw+0x21a>
 800b3be:	2404      	movs	r4, #4
  if (InputChannelIsSPDIF())
 800b3c0:	f7ff fdb0 	bl	800af24 <InputChannelIsSPDIF>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	f040 80da 	bne.w	800b57e <InfoPage_CustomDraw+0x23a>
  sprintf(S, "Input sample rate: %u", (unsigned int)GetInputSampleRate());
 800b3ca:	f7ff ffaf 	bl	800b32c <GetInputSampleRate>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	497e      	ldr	r1, [pc, #504]	@ (800b5cc <InfoPage_CustomDraw+0x288>)
 800b3d2:	a802      	add	r0, sp, #8
 800b3d4:	f004 fc12 	bl	800fbfc <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b3d8:	1c66      	adds	r6, r4, #1
 800b3da:	f7fd f831 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b3de:	fb14 f200 	smulbb	r2, r4, r0
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	b292      	uxth	r2, r2
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	a802      	add	r0, sp, #8
 800b3ea:	f7fd f9b3 	bl	8008754 <ILI9341_DrawTextAtXY>
  sprintf(S, "Process gain: %0.2f", Process_Gain);
 800b3ee:	4b78      	ldr	r3, [pc, #480]	@ (800b5d0 <InfoPage_CustomDraw+0x28c>)
 800b3f0:	edd3 7a00 	vldr	s15, [r3]
 800b3f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b3f8:	ec53 2b17 	vmov	r2, r3, d7
 800b3fc:	4975      	ldr	r1, [pc, #468]	@ (800b5d4 <InfoPage_CustomDraw+0x290>)
 800b3fe:	a802      	add	r0, sp, #8
 800b400:	f004 fbfc 	bl	800fbfc <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b404:	1ca5      	adds	r5, r4, #2
 800b406:	f7fd f81b 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b40a:	fb16 f200 	smulbb	r2, r6, r0
 800b40e:	2301      	movs	r3, #1
 800b410:	b292      	uxth	r2, r2
 800b412:	2100      	movs	r1, #0
 800b414:	a802      	add	r0, sp, #8
 800b416:	f7fd f99d 	bl	8008754 <ILI9341_DrawTextAtXY>
  sprintf(S, "Process muted: %s", BooleanToNoYes(Process_UserMuted));
 800b41a:	4b6f      	ldr	r3, [pc, #444]	@ (800b5d8 <InfoPage_CustomDraw+0x294>)
 800b41c:	7818      	ldrb	r0, [r3, #0]
 800b41e:	f7fc fb75 	bl	8007b0c <BooleanToNoYes>
 800b422:	4602      	mov	r2, r0
 800b424:	496d      	ldr	r1, [pc, #436]	@ (800b5dc <InfoPage_CustomDraw+0x298>)
 800b426:	a802      	add	r0, sp, #8
 800b428:	f004 fbe8 	bl	800fbfc <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b42c:	1ce6      	adds	r6, r4, #3
 800b42e:	f7fd f807 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b432:	fb15 f200 	smulbb	r2, r5, r0
 800b436:	2301      	movs	r3, #1
 800b438:	b292      	uxth	r2, r2
 800b43a:	2100      	movs	r1, #0
 800b43c:	a802      	add	r0, sp, #8
 800b43e:	f7fd f989 	bl	8008754 <ILI9341_DrawTextAtXY>
  sprintf(S, "Output sample rate: %u", (unsigned int)OutputSampleRate);
 800b442:	4b67      	ldr	r3, [pc, #412]	@ (800b5e0 <InfoPage_CustomDraw+0x29c>)
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	4967      	ldr	r1, [pc, #412]	@ (800b5e4 <InfoPage_CustomDraw+0x2a0>)
 800b448:	a802      	add	r0, sp, #8
 800b44a:	f004 fbd7 	bl	800fbfc <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b44e:	1d25      	adds	r5, r4, #4
 800b450:	f7fc fff6 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b454:	fb16 f200 	smulbb	r2, r6, r0
 800b458:	2301      	movs	r3, #1
 800b45a:	b292      	uxth	r2, r2
 800b45c:	2100      	movs	r1, #0
 800b45e:	a802      	add	r0, sp, #8
 800b460:	f7fd f978 	bl	8008754 <ILI9341_DrawTextAtXY>
  sprintf(S, "PA master volume: %0.1f", PA_MasterVolume_dB);
 800b464:	4b60      	ldr	r3, [pc, #384]	@ (800b5e8 <InfoPage_CustomDraw+0x2a4>)
 800b466:	edd3 7a00 	vldr	s15, [r3]
 800b46a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b46e:	ec53 2b17 	vmov	r2, r3, d7
 800b472:	495e      	ldr	r1, [pc, #376]	@ (800b5ec <InfoPage_CustomDraw+0x2a8>)
 800b474:	a802      	add	r0, sp, #8
 800b476:	f004 fbc1 	bl	800fbfc <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b47a:	1d66      	adds	r6, r4, #5
 800b47c:	f7fc ffe0 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b480:	fb15 f200 	smulbb	r2, r5, r0
 800b484:	2301      	movs	r3, #1
 800b486:	b292      	uxth	r2, r2
 800b488:	2100      	movs	r1, #0
 800b48a:	a802      	add	r0, sp, #8
 800b48c:	f7fd f962 	bl	8008754 <ILI9341_DrawTextAtXY>
  sprintf(S, "PA muted: %s", BooleanToNoYes(PA_UserMuted));
 800b490:	4b57      	ldr	r3, [pc, #348]	@ (800b5f0 <InfoPage_CustomDraw+0x2ac>)
 800b492:	7818      	ldrb	r0, [r3, #0]
 800b494:	f7fc fb3a 	bl	8007b0c <BooleanToNoYes>
 800b498:	4602      	mov	r2, r0
 800b49a:	4956      	ldr	r1, [pc, #344]	@ (800b5f4 <InfoPage_CustomDraw+0x2b0>)
 800b49c:	a802      	add	r0, sp, #8
 800b49e:	f004 fbad 	bl	800fbfc <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b4a2:	1da5      	adds	r5, r4, #6
 800b4a4:	f7fc ffcc 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b4a8:	fb16 f200 	smulbb	r2, r6, r0
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	b292      	uxth	r2, r2
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	a802      	add	r0, sp, #8
 800b4b4:	f7fd f94e 	bl	8008754 <ILI9341_DrawTextAtXY>
  PA_ErrorStatus = PA_GetErrorStatus();
 800b4b8:	f7fe fd16 	bl	8009ee8 <PA_GetErrorStatus>
 800b4bc:	4602      	mov	r2, r0
  sprintf(S, "PA error status: %2X", PA_ErrorStatus);
 800b4be:	494e      	ldr	r1, [pc, #312]	@ (800b5f8 <InfoPage_CustomDraw+0x2b4>)
 800b4c0:	a802      	add	r0, sp, #8
 800b4c2:	f004 fb9b 	bl	800fbfc <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b4c6:	3407      	adds	r4, #7
 800b4c8:	f7fc ffba 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b4cc:	fb15 f200 	smulbb	r2, r5, r0
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	b292      	uxth	r2, r2
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	a802      	add	r0, sp, #8
 800b4d8:	f7fd f93c 	bl	8008754 <ILI9341_DrawTextAtXY>
  sprintf(S, "Bluetooth out: %s", BooleanToOffOn(BluetoothOut_On));
 800b4dc:	4b47      	ldr	r3, [pc, #284]	@ (800b5fc <InfoPage_CustomDraw+0x2b8>)
 800b4de:	7818      	ldrb	r0, [r3, #0]
 800b4e0:	f7fc fb0a 	bl	8007af8 <BooleanToOffOn>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	4946      	ldr	r1, [pc, #280]	@ (800b600 <InfoPage_CustomDraw+0x2bc>)
 800b4e8:	a802      	add	r0, sp, #8
 800b4ea:	f004 fb87 	bl	800fbfc <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b4ee:	f7fc ffa7 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b4f2:	fb14 f400 	smulbb	r4, r4, r0
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	b2a2      	uxth	r2, r4
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	a802      	add	r0, sp, #8
 800b4fe:	f7fd f929 	bl	8008754 <ILI9341_DrawTextAtXY>
}
 800b502:	b034      	add	sp, #208	@ 0xd0
 800b504:	bd70      	pop	{r4, r5, r6, pc}
        sprintf(S, "Input: Si4648 DAB radio");
 800b506:	ac02      	add	r4, sp, #8
 800b508:	4d3e      	ldr	r5, [pc, #248]	@ (800b604 <InfoPage_CustomDraw+0x2c0>)
 800b50a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b50c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b50e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b512:	e884 0003 	stmia.w	r4, {r0, r1}
        break;
 800b516:	e743      	b.n	800b3a0 <InfoPage_CustomDraw+0x5c>
        sprintf(S, "Input: Si4648 FM radio");
 800b518:	ac02      	add	r4, sp, #8
 800b51a:	4d3b      	ldr	r5, [pc, #236]	@ (800b608 <InfoPage_CustomDraw+0x2c4>)
 800b51c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b51e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b520:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b524:	f844 0b04 	str.w	r0, [r4], #4
 800b528:	f824 1b02 	strh.w	r1, [r4], #2
 800b52c:	0c09      	lsrs	r1, r1, #16
 800b52e:	7021      	strb	r1, [r4, #0]
        break;
 800b530:	e736      	b.n	800b3a0 <InfoPage_CustomDraw+0x5c>
        sprintf(S, "Input: AR1010 FM radio");
 800b532:	ac02      	add	r4, sp, #8
 800b534:	4d35      	ldr	r5, [pc, #212]	@ (800b60c <InfoPage_CustomDraw+0x2c8>)
 800b536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b53a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b53e:	f844 0b04 	str.w	r0, [r4], #4
 800b542:	f824 1b02 	strh.w	r1, [r4], #2
 800b546:	0c09      	lsrs	r1, r1, #16
 800b548:	7021      	strb	r1, [r4, #0]
        break;
 800b54a:	e729      	b.n	800b3a0 <InfoPage_CustomDraw+0x5c>
        sprintf(S, "Input: Aux in");
 800b54c:	4b30      	ldr	r3, [pc, #192]	@ (800b610 <InfoPage_CustomDraw+0x2cc>)
 800b54e:	ac02      	add	r4, sp, #8
 800b550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b552:	c407      	stmia	r4!, {r0, r1, r2}
 800b554:	8023      	strh	r3, [r4, #0]
        break;
 800b556:	e723      	b.n	800b3a0 <InfoPage_CustomDraw+0x5c>
        Error_Handler();
 800b558:	f002 fd9c 	bl	800e094 <Error_Handler>
        break;
 800b55c:	e720      	b.n	800b3a0 <InfoPage_CustomDraw+0x5c>
    sprintf(S, "DAB service: %s", DAB_ServiceName);
 800b55e:	4a2d      	ldr	r2, [pc, #180]	@ (800b614 <InfoPage_CustomDraw+0x2d0>)
 800b560:	492d      	ldr	r1, [pc, #180]	@ (800b618 <InfoPage_CustomDraw+0x2d4>)
 800b562:	a802      	add	r0, sp, #8
 800b564:	f004 fb4a 	bl	800fbfc <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b568:	f7fc ff6a 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b56c:	0082      	lsls	r2, r0, #2
 800b56e:	b292      	uxth	r2, r2
 800b570:	2301      	movs	r3, #1
 800b572:	2100      	movs	r1, #0
 800b574:	a802      	add	r0, sp, #8
 800b576:	f7fd f8ed 	bl	8008754 <ILI9341_DrawTextAtXY>
 800b57a:	2405      	movs	r4, #5
 800b57c:	e720      	b.n	800b3c0 <InfoPage_CustomDraw+0x7c>
    SPDIFRX_GetNumErrors(&SPDIFRX_NumTransitionErrors, &SPDIFRX_NumFrameErrors, &SPDIFRX_NumSyncErrors);
 800b57e:	f10d 0207 	add.w	r2, sp, #7
 800b582:	f10d 0106 	add.w	r1, sp, #6
 800b586:	f10d 0005 	add.w	r0, sp, #5
 800b58a:	f7fd fb15 	bl	8008bb8 <SPDIFRX_GetNumErrors>
    sprintf(S, "Num SPDIF errors: %d", SPDIFRX_NumTransitionErrors + SPDIFRX_NumFrameErrors + SPDIFRX_NumSyncErrors);
 800b58e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b592:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b596:	4413      	add	r3, r2
 800b598:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b59c:	441a      	add	r2, r3
 800b59e:	491f      	ldr	r1, [pc, #124]	@ (800b61c <InfoPage_CustomDraw+0x2d8>)
 800b5a0:	a802      	add	r0, sp, #8
 800b5a2:	f004 fb2b 	bl	800fbfc <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800b5a6:	1c65      	adds	r5, r4, #1
 800b5a8:	f7fc ff4a 	bl	8008440 <ILI9341_GetFontYSpacing>
 800b5ac:	fb14 f200 	smulbb	r2, r4, r0
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	b292      	uxth	r2, r2
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	a802      	add	r0, sp, #8
 800b5b8:	f7fd f8cc 	bl	8008754 <ILI9341_DrawTextAtXY>
 800b5bc:	462c      	mov	r4, r5
 800b5be:	e704      	b.n	800b3ca <InfoPage_CustomDraw+0x86>
 800b5c0:	20017203 	.word	0x20017203
 800b5c4:	08012944 	.word	0x08012944
 800b5c8:	08012954 	.word	0x08012954
 800b5cc:	080129e0 	.word	0x080129e0
 800b5d0:	200003f8 	.word	0x200003f8
 800b5d4:	080129f8 	.word	0x080129f8
 800b5d8:	200153e4 	.word	0x200153e4
 800b5dc:	08012a0c 	.word	0x08012a0c
 800b5e0:	200153d8 	.word	0x200153d8
 800b5e4:	08012a20 	.word	0x08012a20
 800b5e8:	200153e0 	.word	0x200153e0
 800b5ec:	08012a38 	.word	0x08012a38
 800b5f0:	200153dc 	.word	0x200153dc
 800b5f4:	08012a50 	.word	0x08012a50
 800b5f8:	08012a60 	.word	0x08012a60
 800b5fc:	200153c5 	.word	0x200153c5
 800b600:	08012a78 	.word	0x08012a78
 800b604:	08012960 	.word	0x08012960
 800b608:	08012978 	.word	0x08012978
 800b60c:	08012990 	.word	0x08012990
 800b610:	080129a8 	.word	0x080129a8
 800b614:	20015340 	.word	0x20015340
 800b618:	080129b8 	.word	0x080129b8
 800b61c:	080129c8 	.word	0x080129c8

0800b620 <HAL_SPI_TxCpltCallback>:
  if (hspi == &hspi3)
 800b620:	4b0d      	ldr	r3, [pc, #52]	@ (800b658 <HAL_SPI_TxCpltCallback+0x38>)
 800b622:	4283      	cmp	r3, r0
 800b624:	d000      	beq.n	800b628 <HAL_SPI_TxCpltCallback+0x8>
 800b626:	4770      	bx	lr
{
 800b628:	b500      	push	{lr}
 800b62a:	b083      	sub	sp, #12
    BaseType_t HigherPriorityTaskWoken = pdFALSE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	9301      	str	r3, [sp, #4]
    xSemaphoreGiveFromISR(GenSPITransferCompleteSemaphoreHandle, &HigherPriorityTaskWoken);
 800b630:	a901      	add	r1, sp, #4
 800b632:	4b0a      	ldr	r3, [pc, #40]	@ (800b65c <HAL_SPI_TxCpltCallback+0x3c>)
 800b634:	6818      	ldr	r0, [r3, #0]
 800b636:	f7fb f89c 	bl	8006772 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	b14b      	cbz	r3, 800b652 <HAL_SPI_TxCpltCallback+0x32>
 800b63e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b646:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	f3bf 8f6f 	isb	sy
}
 800b652:	b003      	add	sp, #12
 800b654:	f85d fb04 	ldr.w	pc, [sp], #4
 800b658:	2001777c 	.word	0x2001777c
 800b65c:	20015328 	.word	0x20015328

0800b660 <ESP32_SendCommmandToBeNothing>:
{
 800b660:	b570      	push	{r4, r5, r6, lr}
 800b662:	b084      	sub	sp, #16
  NumTicks_Start = HAL_GetTick();
 800b664:	f7f5 f802 	bl	800066c <HAL_GetTick>
 800b668:	4605      	mov	r5, r0
    ESP32_Ready = HAL_GPIO_ReadPin(ESP32_A_HSK_GPIO_Port, ESP32_A_HSK_Pin);
 800b66a:	2108      	movs	r1, #8
 800b66c:	481b      	ldr	r0, [pc, #108]	@ (800b6dc <ESP32_SendCommmandToBeNothing+0x7c>)
 800b66e:	f7f5 fbd3 	bl	8000e18 <HAL_GPIO_ReadPin>
 800b672:	4604      	mov	r4, r0
    if (HAL_GetTick() - NumTicks_Start > ESP32_TimeoutTimeInMilliseconds)
 800b674:	f7f4 fffa 	bl	800066c <HAL_GetTick>
 800b678:	1b43      	subs	r3, r0, r5
 800b67a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b67e:	d827      	bhi.n	800b6d0 <ESP32_SendCommmandToBeNothing+0x70>
  } while (!ESP32_Ready);
 800b680:	2c00      	cmp	r4, #0
 800b682:	d0f2      	beq.n	800b66a <ESP32_SendCommmandToBeNothing+0xa>
  StringToGUID("{837C7FAA-9ADE-4E53-87B6-C5F42CEF40E9}", &Command.Format); // ESP32_BeNothing_CommandFormat0
 800b684:	4669      	mov	r1, sp
 800b686:	4816      	ldr	r0, [pc, #88]	@ (800b6e0 <ESP32_SendCommmandToBeNothing+0x80>)
 800b688:	f7fc fa4a 	bl	8007b20 <StringToGUID>
  xSemaphoreTake(SPI3_MutexHandle, portMAX_DELAY);
 800b68c:	4d15      	ldr	r5, [pc, #84]	@ (800b6e4 <ESP32_SendCommmandToBeNothing+0x84>)
 800b68e:	f04f 31ff 	mov.w	r1, #4294967295
 800b692:	6828      	ldr	r0, [r5, #0]
 800b694:	f7fb f983 	bl	800699e <xQueueSemaphoreTake>
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 0);
 800b698:	4e10      	ldr	r6, [pc, #64]	@ (800b6dc <ESP32_SendCommmandToBeNothing+0x7c>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	2104      	movs	r1, #4
 800b69e:	4630      	mov	r0, r6
 800b6a0:	f7f5 fbc1 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_Result = HAL_SPI_Transmit(&hspi3, (uint8_t *)&Command, sizeof(Command), ESP32_TimeoutTimeInMilliseconds);
 800b6a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b6a8:	2210      	movs	r2, #16
 800b6aa:	4669      	mov	r1, sp
 800b6ac:	480e      	ldr	r0, [pc, #56]	@ (800b6e8 <ESP32_SendCommmandToBeNothing+0x88>)
 800b6ae:	f7f8 fb63 	bl	8003d78 <HAL_SPI_Transmit>
 800b6b2:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	2104      	movs	r1, #4
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f7f5 fbb4 	bl	8000e26 <HAL_GPIO_WritePin>
  xSemaphoreGive(SPI3_MutexHandle);
 800b6be:	2300      	movs	r3, #0
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6828      	ldr	r0, [r5, #0]
 800b6c6:	f7fa fef4 	bl	80064b2 <xQueueGenericSend>
  if (HAL_Result != HAL_OK)
 800b6ca:	b924      	cbnz	r4, 800b6d6 <ESP32_SendCommmandToBeNothing+0x76>
  return 1;
 800b6cc:	2001      	movs	r0, #1
 800b6ce:	e000      	b.n	800b6d2 <ESP32_SendCommmandToBeNothing+0x72>
      return 0;
 800b6d0:	2000      	movs	r0, #0
}
 800b6d2:	b004      	add	sp, #16
 800b6d4:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	e7fb      	b.n	800b6d2 <ESP32_SendCommmandToBeNothing+0x72>
 800b6da:	bf00      	nop
 800b6dc:	40021000 	.word	0x40021000
 800b6e0:	08012a8c 	.word	0x08012a8c
 800b6e4:	2001532c 	.word	0x2001532c
 800b6e8:	2001777c 	.word	0x2001777c

0800b6ec <ESP32_SendCommmandToBeBluetoothSource>:
{
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	b088      	sub	sp, #32
  NumTicks_Start = HAL_GetTick();
 800b6f0:	f7f4 ffbc 	bl	800066c <HAL_GetTick>
 800b6f4:	4605      	mov	r5, r0
    ESP32_Ready = HAL_GPIO_ReadPin(ESP32_A_HSK_GPIO_Port, ESP32_A_HSK_Pin);
 800b6f6:	2108      	movs	r1, #8
 800b6f8:	4821      	ldr	r0, [pc, #132]	@ (800b780 <ESP32_SendCommmandToBeBluetoothSource+0x94>)
 800b6fa:	f7f5 fb8d 	bl	8000e18 <HAL_GPIO_ReadPin>
 800b6fe:	4604      	mov	r4, r0
    if (HAL_GetTick() - NumTicks_Start > ESP32_TimeoutTimeInMilliseconds)
 800b700:	f7f4 ffb4 	bl	800066c <HAL_GetTick>
 800b704:	1b43      	subs	r3, r0, r5
 800b706:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b70a:	d833      	bhi.n	800b774 <ESP32_SendCommmandToBeBluetoothSource+0x88>
  } while (!ESP32_Ready);
 800b70c:	2c00      	cmp	r4, #0
 800b70e:	d0f2      	beq.n	800b6f6 <ESP32_SendCommmandToBeBluetoothSource+0xa>
  StringToGUID("{6B44D75A-86B2-4A89-8E04-D1ABCF16E78F}", &Command.Format); // ESP32_BeBluetoothSource_CommandFormat0
 800b710:	a901      	add	r1, sp, #4
 800b712:	481c      	ldr	r0, [pc, #112]	@ (800b784 <ESP32_SendCommmandToBeBluetoothSource+0x98>)
 800b714:	f7fc fa04 	bl	8007b20 <StringToGUID>
  Command.SampleRate = SAI_AUDIO_FREQUENCY_44K; // Always operate at a sample rate of 44.1 KHz.
 800b718:	f64a 4344 	movw	r3, #44100	@ 0xac44
 800b71c:	9305      	str	r3, [sp, #20]
  Command.NumChannels = 2;
 800b71e:	2302      	movs	r3, #2
 800b720:	f8ad 3018 	strh.w	r3, [sp, #24]
  Command.NumBitsPerSampleChannel = 16;
 800b724:	2310      	movs	r3, #16
 800b726:	f8ad 301a 	strh.w	r3, [sp, #26]
  Command.NumSamplesPerBlock = ESP32_Samples_NumSamples;
 800b72a:	4b17      	ldr	r3, [pc, #92]	@ (800b788 <ESP32_SendCommmandToBeBluetoothSource+0x9c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	9307      	str	r3, [sp, #28]
  xSemaphoreTake(SPI3_MutexHandle, portMAX_DELAY);
 800b730:	4d16      	ldr	r5, [pc, #88]	@ (800b78c <ESP32_SendCommmandToBeBluetoothSource+0xa0>)
 800b732:	f04f 31ff 	mov.w	r1, #4294967295
 800b736:	6828      	ldr	r0, [r5, #0]
 800b738:	f7fb f931 	bl	800699e <xQueueSemaphoreTake>
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 0);
 800b73c:	4e10      	ldr	r6, [pc, #64]	@ (800b780 <ESP32_SendCommmandToBeBluetoothSource+0x94>)
 800b73e:	2200      	movs	r2, #0
 800b740:	2104      	movs	r1, #4
 800b742:	4630      	mov	r0, r6
 800b744:	f7f5 fb6f 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_Result = HAL_SPI_Transmit(&hspi3, (uint8_t *)&Command, sizeof(Command), ESP32_TimeoutTimeInMilliseconds);
 800b748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b74c:	221c      	movs	r2, #28
 800b74e:	a901      	add	r1, sp, #4
 800b750:	480f      	ldr	r0, [pc, #60]	@ (800b790 <ESP32_SendCommmandToBeBluetoothSource+0xa4>)
 800b752:	f7f8 fb11 	bl	8003d78 <HAL_SPI_Transmit>
 800b756:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
 800b758:	2201      	movs	r2, #1
 800b75a:	2104      	movs	r1, #4
 800b75c:	4630      	mov	r0, r6
 800b75e:	f7f5 fb62 	bl	8000e26 <HAL_GPIO_WritePin>
  xSemaphoreGive(SPI3_MutexHandle);
 800b762:	2300      	movs	r3, #0
 800b764:	461a      	mov	r2, r3
 800b766:	4619      	mov	r1, r3
 800b768:	6828      	ldr	r0, [r5, #0]
 800b76a:	f7fa fea2 	bl	80064b2 <xQueueGenericSend>
  if (HAL_Result != HAL_OK)
 800b76e:	b924      	cbnz	r4, 800b77a <ESP32_SendCommmandToBeBluetoothSource+0x8e>
  return 1;
 800b770:	2001      	movs	r0, #1
 800b772:	e000      	b.n	800b776 <ESP32_SendCommmandToBeBluetoothSource+0x8a>
      return 0;
 800b774:	2000      	movs	r0, #0
}
 800b776:	b008      	add	sp, #32
 800b778:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800b77a:	2000      	movs	r0, #0
 800b77c:	e7fb      	b.n	800b776 <ESP32_SendCommmandToBeBluetoothSource+0x8a>
 800b77e:	bf00      	nop
 800b780:	40021000 	.word	0x40021000
 800b784:	08012ab4 	.word	0x08012ab4
 800b788:	200153cc 	.word	0x200153cc
 800b78c:	2001532c 	.word	0x2001532c
 800b790:	2001777c 	.word	0x2001777c

0800b794 <ESP32_SendSamplesFromAudioOutputBufferToESP32>:
{
 800b794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b798:	ed2d 8b02 	vpush	{d8}
 800b79c:	b098      	sub	sp, #96	@ 0x60
 800b79e:	4604      	mov	r4, r0
  ESP32_Ready = HAL_GPIO_ReadPin(ESP32_A_HSK_GPIO_Port, ESP32_A_HSK_Pin);
 800b7a0:	2108      	movs	r1, #8
 800b7a2:	488c      	ldr	r0, [pc, #560]	@ (800b9d4 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x240>)
 800b7a4:	f7f5 fb38 	bl	8000e18 <HAL_GPIO_ReadPin>
  if (!ESP32_Ready)
 800b7a8:	b920      	cbnz	r0, 800b7b4 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x20>
}
 800b7aa:	b018      	add	sp, #96	@ 0x60
 800b7ac:	ecbd 8b02 	vpop	{d8}
 800b7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  StringToGUID("{4839C500-E431-42D3-9508-83009C1E31D4}", &Format); // ESP32_BeBluetoothSource_DataFormat0
 800b7b4:	a911      	add	r1, sp, #68	@ 0x44
 800b7b6:	4888      	ldr	r0, [pc, #544]	@ (800b9d8 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x244>)
 800b7b8:	f7fc f9b2 	bl	8007b20 <StringToGUID>
  if (SecondHalf)
 800b7bc:	b134      	cbz	r4, 800b7cc <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x38>
    AudioOutputBufferStartIndex = I2SBuffers_NumSamples / 2;
 800b7be:	4b87      	ldr	r3, [pc, #540]	@ (800b9dc <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x248>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	085b      	lsrs	r3, r3, #1
 800b7c4:	ee08 3a10 	vmov	s16, r3
  for (SampleIndex = 0; SampleIndex < ESP32_Samples_NumSamples; ++SampleIndex)
 800b7c8:	2700      	movs	r7, #0
 800b7ca:	e0a9      	b.n	800b920 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x18c>
    AudioOutputBufferStartIndex = 0;
 800b7cc:	ed9f 8a84 	vldr	s16, [pc, #528]	@ 800b9e0 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x24c>
 800b7d0:	e7fa      	b.n	800b7c8 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x34>
    float I2SOutputBufferPosition = AudioOutputBufferStartIndex + SampleIndex * ESP32_SourceSampleStepSize;
 800b7d2:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 800b7d6:	ee07 7a10 	vmov	s14, r7
 800b7da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b7de:	4b81      	ldr	r3, [pc, #516]	@ (800b9e4 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x250>)
 800b7e0:	edd3 6a00 	vldr	s13, [r3]
 800b7e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b7e8:	ee77 7a87 	vadd.f32	s15, s15, s14
    I2SOutputBufferPosition_Fractional = modf(I2SOutputBufferPosition, &I2SOutputBufferPosition_Integral);
 800b7ec:	aa06      	add	r2, sp, #24
 800b7ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b7f2:	ec51 0b17 	vmov	r0, r1, d7
 800b7f6:	f004 fbb3 	bl	800ff60 <modf>
 800b7fa:	4680      	mov	r8, r0
 800b7fc:	4689      	mov	r9, r1
    int32_t SourceSampleIndex0 = Wrap_int((int)(I2SOutputBufferPosition_Integral) - 1, I2SBuffers_NumSamples);
 800b7fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b802:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b806:	ee17 0a90 	vmov	r0, s15
 800b80a:	f8df a1d0 	ldr.w	sl, [pc, #464]	@ 800b9dc <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x248>
 800b80e:	f8da 1000 	ldr.w	r1, [sl]
 800b812:	3801      	subs	r0, #1
 800b814:	f7fc f90f 	bl	8007a36 <Wrap_int>
 800b818:	4606      	mov	r6, r0
    int32_t SourceSampleIndex1 = Wrap_int(SourceSampleIndex0 + 1, I2SBuffers_NumSamples);
 800b81a:	f8da 1000 	ldr.w	r1, [sl]
 800b81e:	3001      	adds	r0, #1
 800b820:	f7fc f909 	bl	8007a36 <Wrap_int>
 800b824:	4605      	mov	r5, r0
    int32_t SourceSampleIndex2 = Wrap_int(SourceSampleIndex1 + 1, I2SBuffers_NumSamples);
 800b826:	f8da 1000 	ldr.w	r1, [sl]
 800b82a:	3001      	adds	r0, #1
 800b82c:	f7fc f903 	bl	8007a36 <Wrap_int>
 800b830:	4604      	mov	r4, r0
    int32_t SourceSampleIndex3 = Wrap_int(SourceSampleIndex2 + 1, I2SBuffers_NumSamples);
 800b832:	f8da 1000 	ldr.w	r1, [sl]
 800b836:	3001      	adds	r0, #1
 800b838:	f7fc f8fd 	bl	8007a36 <Wrap_int>
 800b83c:	4684      	mov	ip, r0
    AudioSample24_t SourceSample0 = I2SOutputBuffer[SourceSampleIndex0];
 800b83e:	4b6a      	ldr	r3, [pc, #424]	@ (800b9e8 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x254>)
 800b840:	aa09      	add	r2, sp, #36	@ 0x24
 800b842:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b846:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b84a:	e882 0003 	stmia.w	r2, {r0, r1}
    AudioSample24_t SourceSample1 = I2SOutputBuffer[SourceSampleIndex1];
 800b84e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b850:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b854:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b858:	e882 0003 	stmia.w	r2, {r0, r1}
    AudioSample24_t SourceSample2 = I2SOutputBuffer[SourceSampleIndex2];
 800b85c:	aa0d      	add	r2, sp, #52	@ 0x34
 800b85e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b862:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b866:	e882 0003 	stmia.w	r2, {r0, r1}
    AudioSample24_t SourceSample3 = I2SOutputBuffer[SourceSampleIndex3];
 800b86a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b86c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800b870:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b874:	e882 0003 	stmia.w	r2, {r0, r1}
    AudioOutputBufferSample.Left = CubicInterpolate(SourceSample0.Left, SourceSample1.Left, SourceSample2.Left, SourceSample3.Left, I2SOutputBufferPosition_Fractional);
 800b878:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800b87c:	ee07 0a90 	vmov	s15, r0
 800b880:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b884:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b888:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 800b88c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b890:	ed8d 7b00 	vstr	d7, [sp]
 800b894:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 800b898:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b89c:	ec53 2b17 	vmov	r2, r3, d7
 800b8a0:	eddd 7a09 	vldr	s15, [sp, #36]	@ 0x24
 800b8a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b8a8:	ec51 0b17 	vmov	r0, r1, d7
 800b8ac:	f7fc f8db 	bl	8007a66 <CubicInterpolate>
 800b8b0:	ec41 0b17 	vmov	d7, r0, r1
 800b8b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b8b8:	ee17 4a90 	vmov	r4, s15
 800b8bc:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
    AudioOutputBufferSample.Right = CubicInterpolate(SourceSample0.Right, SourceSample1.Right, SourceSample2.Right, SourceSample3.Right, I2SOutputBufferPosition_Fractional);
 800b8c0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800b8c4:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 800b8c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b8cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8d0:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 800b8d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b8d8:	ed8d 7b00 	vstr	d7, [sp]
 800b8dc:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 800b8e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b8e4:	ec53 2b17 	vmov	r2, r3, d7
 800b8e8:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 800b8ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b8f0:	ec51 0b17 	vmov	r0, r1, d7
 800b8f4:	f7fc f8b7 	bl	8007a66 <CubicInterpolate>
 800b8f8:	ec41 0b17 	vmov	d7, r0, r1
 800b8fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b900:	ee17 3a90 	vmov	r3, s15
 800b904:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
    ESPSample.Left = AudioOutputBufferSample.Left >> 8;
 800b908:	1224      	asrs	r4, r4, #8
 800b90a:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
    ESPSample.Right = AudioOutputBufferSample.Right >> 8;
 800b90e:	121b      	asrs	r3, r3, #8
 800b910:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    ESP32_pSamples[SampleIndex] = ESPSample;
 800b914:	4b35      	ldr	r3, [pc, #212]	@ (800b9ec <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x258>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b91a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
  for (SampleIndex = 0; SampleIndex < ESP32_Samples_NumSamples; ++SampleIndex)
 800b91e:	3701      	adds	r7, #1
 800b920:	4b33      	ldr	r3, [pc, #204]	@ (800b9f0 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x25c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	429f      	cmp	r7, r3
 800b926:	f4ff af54 	bcc.w	800b7d2 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x3e>
  xSemaphoreTake(GenSPITransferCompleteSemaphoreHandle, 0); //!!!RTOS: Clear semaphore before use. This appears necessary.
 800b92a:	2100      	movs	r1, #0
 800b92c:	4b31      	ldr	r3, [pc, #196]	@ (800b9f4 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x260>)
 800b92e:	6818      	ldr	r0, [r3, #0]
 800b930:	f7fb f835 	bl	800699e <xQueueSemaphoreTake>
  xSemaphoreTake(SPI3_MutexHandle, portMAX_DELAY);
 800b934:	f04f 31ff 	mov.w	r1, #4294967295
 800b938:	4b2f      	ldr	r3, [pc, #188]	@ (800b9f8 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x264>)
 800b93a:	6818      	ldr	r0, [r3, #0]
 800b93c:	f7fb f82f 	bl	800699e <xQueueSemaphoreTake>
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 0);
 800b940:	2200      	movs	r2, #0
 800b942:	2104      	movs	r1, #4
 800b944:	4823      	ldr	r0, [pc, #140]	@ (800b9d4 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x240>)
 800b946:	f7f5 fa6e 	bl	8000e26 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&Format, sizeof(Format), HAL_MAX_DELAY);
 800b94a:	f04f 33ff 	mov.w	r3, #4294967295
 800b94e:	2210      	movs	r2, #16
 800b950:	a911      	add	r1, sp, #68	@ 0x44
 800b952:	482a      	ldr	r0, [pc, #168]	@ (800b9fc <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x268>)
 800b954:	f7f8 fa10 	bl	8003d78 <HAL_SPI_Transmit>
  uint32_t NumBytes = ESP32_Samples_NumSamples * sizeof(AudioSample16_t);
 800b958:	4b25      	ldr	r3, [pc, #148]	@ (800b9f0 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x25c>)
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	0092      	lsls	r2, r2, #2
  SCB_CleanDCache_by_Addr((uint32_t *)ESP32_pSamples, NumBytes);
 800b95e:	4613      	mov	r3, r2
    uint32_t op_addr = (uint32_t) addr;
 800b960:	4922      	ldr	r1, [pc, #136]	@ (800b9ec <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x258>)
 800b962:	6809      	ldr	r1, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800b964:	f3bf 8f4f 	dsb	sy
}
 800b968:	e004      	b.n	800b974 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x1e0>
      SCB->DCCMVAC = op_addr;
 800b96a:	4825      	ldr	r0, [pc, #148]	@ (800ba00 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x26c>)
 800b96c:	f8c0 1268 	str.w	r1, [r0, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 800b970:	3120      	adds	r1, #32
      op_size -=           linesize;
 800b972:	3b20      	subs	r3, #32
    while (op_size > 0) {
 800b974:	2b00      	cmp	r3, #0
 800b976:	dcf8      	bgt.n	800b96a <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x1d6>
  __ASM volatile ("dsb 0xF":::"memory");
 800b978:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b97c:	f3bf 8f6f 	isb	sy
  HAL_Result = HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *)ESP32_pSamples, NumBytes); // One DMA item is 8 bits.
 800b980:	b292      	uxth	r2, r2
 800b982:	4b1a      	ldr	r3, [pc, #104]	@ (800b9ec <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x258>)
 800b984:	6819      	ldr	r1, [r3, #0]
 800b986:	481d      	ldr	r0, [pc, #116]	@ (800b9fc <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x268>)
 800b988:	f7f8 fd2c 	bl	80043e4 <HAL_SPI_Transmit_DMA>
  if (HAL_Result != HAL_OK)
 800b98c:	b998      	cbnz	r0, 800b9b6 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x222>
  xSemaphoreTake(GenSPITransferCompleteSemaphoreHandle, portMAX_DELAY); // Wait for transmit to complete.
 800b98e:	f04f 31ff 	mov.w	r1, #4294967295
 800b992:	4b18      	ldr	r3, [pc, #96]	@ (800b9f4 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x260>)
 800b994:	6818      	ldr	r0, [r3, #0]
 800b996:	f7fb f802 	bl	800699e <xQueueSemaphoreTake>
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
 800b99a:	2201      	movs	r2, #1
 800b99c:	2104      	movs	r1, #4
 800b99e:	480d      	ldr	r0, [pc, #52]	@ (800b9d4 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x240>)
 800b9a0:	f7f5 fa41 	bl	8000e26 <HAL_GPIO_WritePin>
  xSemaphoreGive(SPI3_MutexHandle);
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	4813      	ldr	r0, [pc, #76]	@ (800b9f8 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x264>)
 800b9ac:	6800      	ldr	r0, [r0, #0]
 800b9ae:	f7fa fd80 	bl	80064b2 <xQueueGenericSend>
  return 1;
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	e6f9      	b.n	800b7aa <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x16>
    xSemaphoreGive(SPI3_MutexHandle);
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	480e      	ldr	r0, [pc, #56]	@ (800b9f8 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x264>)
 800b9be:	6800      	ldr	r0, [r0, #0]
 800b9c0:	f7fa fd77 	bl	80064b2 <xQueueGenericSend>
    HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	2104      	movs	r1, #4
 800b9c8:	4802      	ldr	r0, [pc, #8]	@ (800b9d4 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x240>)
 800b9ca:	f7f5 fa2c 	bl	8000e26 <HAL_GPIO_WritePin>
    return 0;
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	e6eb      	b.n	800b7aa <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x16>
 800b9d2:	bf00      	nop
 800b9d4:	40021000 	.word	0x40021000
 800b9d8:	08012adc 	.word	0x08012adc
 800b9dc:	200153e8 	.word	0x200153e8
 800b9e0:	00000000 	.word	0x00000000
 800b9e4:	200153c8 	.word	0x200153c8
 800b9e8:	20015400 	.word	0x20015400
 800b9ec:	200153d0 	.word	0x200153d0
 800b9f0:	200153cc 	.word	0x200153cc
 800b9f4:	20015328 	.word	0x20015328
 800b9f8:	2001532c 	.word	0x2001532c
 800b9fc:	2001777c 	.word	0x2001777c
 800ba00:	e000ed00 	.word	0xe000ed00

0800ba04 <BluetoothOut_Start>:
{
 800ba04:	b508      	push	{r3, lr}
  IfNotNullFreeAndNull((void **)&ESP32_pSamplesMemory);
 800ba06:	481c      	ldr	r0, [pc, #112]	@ (800ba78 <BluetoothOut_Start+0x74>)
 800ba08:	f7fb ffe7 	bl	80079da <IfNotNullFreeAndNull>
  ESP32_pSamples = NULL;
 800ba0c:	4b1b      	ldr	r3, [pc, #108]	@ (800ba7c <BluetoothOut_Start+0x78>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	601a      	str	r2, [r3, #0]
  if (!OutputSampleRate)
 800ba12:	4b1b      	ldr	r3, [pc, #108]	@ (800ba80 <BluetoothOut_Start+0x7c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	b90b      	cbnz	r3, 800ba1c <BluetoothOut_Start+0x18>
    return 0;
 800ba18:	2000      	movs	r0, #0
}
 800ba1a:	bd08      	pop	{r3, pc}
  ESP32_SourceSampleStepSize = (float)OutputSampleRate / (float)SAI_AUDIO_FREQUENCY_44K;
 800ba1c:	ee07 3a90 	vmov	s15, r3
 800ba20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba24:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800ba84 <BluetoothOut_Start+0x80>
 800ba28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ba2c:	4b16      	ldr	r3, [pc, #88]	@ (800ba88 <BluetoothOut_Start+0x84>)
 800ba2e:	edc3 6a00 	vstr	s13, [r3]
  ESP32_Samples_NumSamples = (int)round((I2SBuffers_NumSamples / 2) / ESP32_SourceSampleStepSize);
 800ba32:	4b16      	ldr	r3, [pc, #88]	@ (800ba8c <BluetoothOut_Start+0x88>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	085b      	lsrs	r3, r3, #1
 800ba38:	ee07 3a90 	vmov	s15, r3
 800ba3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ba44:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800ba48:	feb8 7b47 	vrinta.f64	d7, d7
 800ba4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ba50:	ee17 1a90 	vmov	r1, s15
 800ba54:	4b0e      	ldr	r3, [pc, #56]	@ (800ba90 <BluetoothOut_Start+0x8c>)
 800ba56:	edc3 7a00 	vstr	s15, [r3]
  ESP32_pSamplesMemory = calloc(1, ESP32_Samples_NumSamples * sizeof(AudioSample16_t) + 31);
 800ba5a:	0089      	lsls	r1, r1, #2
 800ba5c:	311f      	adds	r1, #31
 800ba5e:	2001      	movs	r0, #1
 800ba60:	f003 fa8a 	bl	800ef78 <calloc>
 800ba64:	4b04      	ldr	r3, [pc, #16]	@ (800ba78 <BluetoothOut_Start+0x74>)
 800ba66:	6018      	str	r0, [r3, #0]
  ESP32_pSamples = (AudioSample16_t *)(((uint32_t)ESP32_pSamplesMemory + 31) & ~31);
 800ba68:	301f      	adds	r0, #31
 800ba6a:	f020 001f 	bic.w	r0, r0, #31
 800ba6e:	4b03      	ldr	r3, [pc, #12]	@ (800ba7c <BluetoothOut_Start+0x78>)
 800ba70:	6018      	str	r0, [r3, #0]
  return ESP32_SendCommmandToBeBluetoothSource();
 800ba72:	f7ff fe3b 	bl	800b6ec <ESP32_SendCommmandToBeBluetoothSource>
 800ba76:	e7d0      	b.n	800ba1a <BluetoothOut_Start+0x16>
 800ba78:	200153d4 	.word	0x200153d4
 800ba7c:	200153d0 	.word	0x200153d0
 800ba80:	200153d8 	.word	0x200153d8
 800ba84:	472c4400 	.word	0x472c4400
 800ba88:	200153c8 	.word	0x200153c8
 800ba8c:	200153e8 	.word	0x200153e8
 800ba90:	200153cc 	.word	0x200153cc

0800ba94 <BluetoothOut_Stop>:
{
 800ba94:	b508      	push	{r3, lr}
  ESP32_SendCommmandToBeNothing();
 800ba96:	f7ff fde3 	bl	800b660 <ESP32_SendCommmandToBeNothing>
  IfNotNullFreeAndNull((void **)&ESP32_pSamplesMemory);
 800ba9a:	4803      	ldr	r0, [pc, #12]	@ (800baa8 <BluetoothOut_Stop+0x14>)
 800ba9c:	f7fb ff9d 	bl	80079da <IfNotNullFreeAndNull>
  ESP32_pSamples = NULL;
 800baa0:	4b02      	ldr	r3, [pc, #8]	@ (800baac <BluetoothOut_Stop+0x18>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	601a      	str	r2, [r3, #0]
}
 800baa6:	bd08      	pop	{r3, pc}
 800baa8:	200153d4 	.word	0x200153d4
 800baac:	200153d0 	.word	0x200153d0

0800bab0 <I2S_24bitToNormalizedFloat>:
  if (Value & 0x00800000)
 800bab0:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 800bab4:	d001      	beq.n	800baba <I2S_24bitToNormalizedFloat+0xa>
    Value |= 0xFF000000;
 800bab6:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
  return Value / 16777216.0f;
 800baba:	ee07 0a90 	vmov	s15, r0
 800babe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800bac2:	ed9f 7a03 	vldr	s14, [pc, #12]	@ 800bad0 <I2S_24bitToNormalizedFloat+0x20>
 800bac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800baca:	ee17 0a90 	vmov	r0, s15
 800bace:	4770      	bx	lr
 800bad0:	33800000 	.word	0x33800000

0800bad4 <I2S_NormalizedFloatTo24bit>:
{
 800bad4:	ee07 0a10 	vmov	s14, r0
  return round(16777216.0f * Value);
 800bad8:	eddf 7a06 	vldr	s15, [pc, #24]	@ 800baf4 <I2S_NormalizedFloatTo24bit+0x20>
 800badc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bae0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800bae4:	feb8 7b47 	vrinta.f64	d7, d7
}
 800bae8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800baec:	ee17 0a90 	vmov	r0, s15
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	4b800000 	.word	0x4b800000

0800baf8 <AudioBuffer_TransferFromInputBufferToOutputBuffer>:
{
 800baf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafa:	ed2d 8b02 	vpush	{d8}
  switch (AudioBufferHalf)
 800bafe:	2801      	cmp	r0, #1
 800bb00:	d00b      	beq.n	800bb1a <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x22>
 800bb02:	2802      	cmp	r0, #2
 800bb04:	d105      	bne.n	800bb12 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x1a>
    case abhSecondHalf: FirstSampleIndex = I2SBuffers_NumSamples / 2; break;
 800bb06:	4b1d      	ldr	r3, [pc, #116]	@ (800bb7c <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x84>)
 800bb08:	681e      	ldr	r6, [r3, #0]
 800bb0a:	f3c6 064f 	ubfx	r6, r6, #1, #16
  for(SampleIndex = FirstSampleIndex; SampleIndex < FirstSampleIndex + (I2SBuffers_NumSamples / 2); ++SampleIndex)
 800bb0e:	4634      	mov	r4, r6
 800bb10:	e02a      	b.n	800bb68 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x70>
    default: Error_Handler();
 800bb12:	f002 fabf 	bl	800e094 <Error_Handler>
  FirstSampleIndex = 0;
 800bb16:	2600      	movs	r6, #0
 800bb18:	e7f9      	b.n	800bb0e <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x16>
  switch (AudioBufferHalf)
 800bb1a:	2600      	movs	r6, #0
 800bb1c:	e7f7      	b.n	800bb0e <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x16>
    Audio_Left = I2S_24bitToNormalizedFloat(pInputSample->Left);
 800bb1e:	4d18      	ldr	r5, [pc, #96]	@ (800bb80 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x88>)
 800bb20:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 800bb24:	f7ff ffc4 	bl	800bab0 <I2S_24bitToNormalizedFloat>
 800bb28:	ee08 0a90 	vmov	s17, r0
    Audio_Right = I2S_24bitToNormalizedFloat(pInputSample->Right);
 800bb2c:	00e7      	lsls	r7, r4, #3
 800bb2e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bb32:	6868      	ldr	r0, [r5, #4]
 800bb34:	f7ff ffbc 	bl	800bab0 <I2S_24bitToNormalizedFloat>
 800bb38:	ee08 0a10 	vmov	s16, r0
    Audio_Left *= Process_Gain;
 800bb3c:	4b11      	ldr	r3, [pc, #68]	@ (800bb84 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x8c>)
 800bb3e:	edd3 7a00 	vldr	s15, [r3]
    Audio_Right *= Process_Gain;
 800bb42:	ee27 8a88 	vmul.f32	s16, s15, s16
    pOutputSample-> Left = I2S_NormalizedFloatTo24bit(Audio_Left);
 800bb46:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800bb4a:	ee17 0a90 	vmov	r0, s15
 800bb4e:	f7ff ffc1 	bl	800bad4 <I2S_NormalizedFloatTo24bit>
 800bb52:	4d0d      	ldr	r5, [pc, #52]	@ (800bb88 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x90>)
 800bb54:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
    pOutputSample-> Right = I2S_NormalizedFloatTo24bit(Audio_Right);
 800bb58:	ee18 0a10 	vmov	r0, s16
 800bb5c:	f7ff ffba 	bl	800bad4 <I2S_NormalizedFloatTo24bit>
 800bb60:	443d      	add	r5, r7
 800bb62:	6068      	str	r0, [r5, #4]
  for(SampleIndex = FirstSampleIndex; SampleIndex < FirstSampleIndex + (I2SBuffers_NumSamples / 2); ++SampleIndex)
 800bb64:	3401      	adds	r4, #1
 800bb66:	b2a4      	uxth	r4, r4
 800bb68:	4b04      	ldr	r3, [pc, #16]	@ (800bb7c <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x84>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	eb06 0353 	add.w	r3, r6, r3, lsr #1
 800bb70:	429c      	cmp	r4, r3
 800bb72:	d3d4      	bcc.n	800bb1e <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x26>
}
 800bb74:	ecbd 8b02 	vpop	{d8}
 800bb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	200153e8 	.word	0x200153e8
 800bb80:	20016800 	.word	0x20016800
 800bb84:	200003f8 	.word	0x200003f8
 800bb88:	20015400 	.word	0x20015400

0800bb8c <HAL_SAI_RxHalfCpltCallback>:
  if (hsai == &hsai_BlockB2)
 800bb8c:	4b12      	ldr	r3, [pc, #72]	@ (800bbd8 <HAL_SAI_RxHalfCpltCallback+0x4c>)
 800bb8e:	4283      	cmp	r3, r0
 800bb90:	d000      	beq.n	800bb94 <HAL_SAI_RxHalfCpltCallback+0x8>
 800bb92:	4770      	bx	lr
    SAI_BlockB2_PreviousCallbackPosition = dibpEndOfFirstHalf;
 800bb94:	4b11      	ldr	r3, [pc, #68]	@ (800bbdc <HAL_SAI_RxHalfCpltCallback+0x50>)
 800bb96:	2201      	movs	r2, #1
 800bb98:	701a      	strb	r2, [r3, #0]
    if (SAI_BlockA2_PreviousCallbackPosition == dibpEndOfFirstHalf)
 800bb9a:	4b11      	ldr	r3, [pc, #68]	@ (800bbe0 <HAL_SAI_RxHalfCpltCallback+0x54>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d1f7      	bne.n	800bb92 <HAL_SAI_RxHalfCpltCallback+0x6>
{
 800bba2:	b500      	push	{lr}
 800bba4:	b083      	sub	sp, #12
      AudioBufferHalf_t AudioBufferHalf = abhFirstHalf;
 800bba6:	f88d 2003 	strb.w	r2, [sp, #3]
      xQueueSendFromISR(ProcessAudioTaskParameterQueueHandle, &AudioBufferHalf, &HigherProrityTaskWoken);
 800bbaa:	2300      	movs	r3, #0
 800bbac:	aa01      	add	r2, sp, #4
 800bbae:	f10d 0103 	add.w	r1, sp, #3
 800bbb2:	480c      	ldr	r0, [pc, #48]	@ (800bbe4 <HAL_SAI_RxHalfCpltCallback+0x58>)
 800bbb4:	6800      	ldr	r0, [r0, #0]
 800bbb6:	f7fa fd6e 	bl	8006696 <xQueueGenericSendFromISR>
      portYIELD_FROM_ISR(HigherProrityTaskWoken);
 800bbba:	9b01      	ldr	r3, [sp, #4]
 800bbbc:	b14b      	cbz	r3, 800bbd2 <HAL_SAI_RxHalfCpltCallback+0x46>
 800bbbe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bbc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbc6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	f3bf 8f6f 	isb	sy
}
 800bbd2:	b003      	add	sp, #12
 800bbd4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbd8:	200174a8 	.word	0x200174a8
 800bbdc:	200153c1 	.word	0x200153c1
 800bbe0:	200153c2 	.word	0x200153c2
 800bbe4:	20015330 	.word	0x20015330

0800bbe8 <HAL_SAI_RxCpltCallback>:
  if (hsai == &hsai_BlockB2)
 800bbe8:	4b12      	ldr	r3, [pc, #72]	@ (800bc34 <HAL_SAI_RxCpltCallback+0x4c>)
 800bbea:	4283      	cmp	r3, r0
 800bbec:	d000      	beq.n	800bbf0 <HAL_SAI_RxCpltCallback+0x8>
 800bbee:	4770      	bx	lr
    SAI_BlockB2_PreviousCallbackPosition = dibpEndOfSecondHalf;
 800bbf0:	4b11      	ldr	r3, [pc, #68]	@ (800bc38 <HAL_SAI_RxCpltCallback+0x50>)
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	701a      	strb	r2, [r3, #0]
    if (SAI_BlockA2_PreviousCallbackPosition == dibpEndOfSecondHalf)
 800bbf6:	4b11      	ldr	r3, [pc, #68]	@ (800bc3c <HAL_SAI_RxCpltCallback+0x54>)
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d1f7      	bne.n	800bbee <HAL_SAI_RxCpltCallback+0x6>
{
 800bbfe:	b500      	push	{lr}
 800bc00:	b083      	sub	sp, #12
      AudioBufferHalf_t AudioBufferHalf = abhSecondHalf;
 800bc02:	f88d 2003 	strb.w	r2, [sp, #3]
      xQueueSendFromISR(ProcessAudioTaskParameterQueueHandle, &AudioBufferHalf, &HigherProrityTaskWoken);
 800bc06:	2300      	movs	r3, #0
 800bc08:	aa01      	add	r2, sp, #4
 800bc0a:	f10d 0103 	add.w	r1, sp, #3
 800bc0e:	480c      	ldr	r0, [pc, #48]	@ (800bc40 <HAL_SAI_RxCpltCallback+0x58>)
 800bc10:	6800      	ldr	r0, [r0, #0]
 800bc12:	f7fa fd40 	bl	8006696 <xQueueGenericSendFromISR>
      portYIELD_FROM_ISR(HigherProrityTaskWoken);
 800bc16:	9b01      	ldr	r3, [sp, #4]
 800bc18:	b14b      	cbz	r3, 800bc2e <HAL_SAI_RxCpltCallback+0x46>
 800bc1a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bc1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc22:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	f3bf 8f6f 	isb	sy
}
 800bc2e:	b003      	add	sp, #12
 800bc30:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc34:	200174a8 	.word	0x200174a8
 800bc38:	200153c1 	.word	0x200153c1
 800bc3c:	200153c2 	.word	0x200153c2
 800bc40:	20015330 	.word	0x20015330

0800bc44 <HAL_SAI_TxHalfCpltCallback>:
  if (hsai == &hsai_BlockA2)
 800bc44:	4b15      	ldr	r3, [pc, #84]	@ (800bc9c <HAL_SAI_TxHalfCpltCallback+0x58>)
 800bc46:	4283      	cmp	r3, r0
 800bc48:	d000      	beq.n	800bc4c <HAL_SAI_TxHalfCpltCallback+0x8>
 800bc4a:	4770      	bx	lr
{
 800bc4c:	b500      	push	{lr}
 800bc4e:	b083      	sub	sp, #12
    SAI_BlockA2_PreviousCallbackPosition = dibpEndOfFirstHalf;
 800bc50:	4b13      	ldr	r3, [pc, #76]	@ (800bca0 <HAL_SAI_TxHalfCpltCallback+0x5c>)
 800bc52:	2201      	movs	r2, #1
 800bc54:	701a      	strb	r2, [r3, #0]
    if (!InputChannelIsI2S() || (SAI_BlockB2_PreviousCallbackPosition == dibpEndOfFirstHalf))
 800bc56:	f7ff f971 	bl	800af3c <InputChannelIsI2S>
 800bc5a:	b130      	cbz	r0, 800bc6a <HAL_SAI_TxHalfCpltCallback+0x26>
 800bc5c:	4b11      	ldr	r3, [pc, #68]	@ (800bca4 <HAL_SAI_TxHalfCpltCallback+0x60>)
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d002      	beq.n	800bc6a <HAL_SAI_TxHalfCpltCallback+0x26>
}
 800bc64:	b003      	add	sp, #12
 800bc66:	f85d fb04 	ldr.w	pc, [sp], #4
      AudioBufferHalf_t AudioBufferHalf = abhFirstHalf;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	f88d 3003 	strb.w	r3, [sp, #3]
      xQueueSendFromISR(ProcessAudioTaskParameterQueueHandle, &AudioBufferHalf, &HigherProrityTaskWoken);
 800bc70:	2300      	movs	r3, #0
 800bc72:	aa01      	add	r2, sp, #4
 800bc74:	f10d 0103 	add.w	r1, sp, #3
 800bc78:	480b      	ldr	r0, [pc, #44]	@ (800bca8 <HAL_SAI_TxHalfCpltCallback+0x64>)
 800bc7a:	6800      	ldr	r0, [r0, #0]
 800bc7c:	f7fa fd0b 	bl	8006696 <xQueueGenericSendFromISR>
      portYIELD_FROM_ISR(HigherProrityTaskWoken);
 800bc80:	9b01      	ldr	r3, [sp, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d0ee      	beq.n	800bc64 <HAL_SAI_TxHalfCpltCallback+0x20>
 800bc86:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bc8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	f3bf 8f6f 	isb	sy
}
 800bc9a:	e7e3      	b.n	800bc64 <HAL_SAI_TxHalfCpltCallback+0x20>
 800bc9c:	2001752c 	.word	0x2001752c
 800bca0:	200153c2 	.word	0x200153c2
 800bca4:	200153c1 	.word	0x200153c1
 800bca8:	20015330 	.word	0x20015330

0800bcac <HAL_SAI_TxCpltCallback>:
  if (hsai == &hsai_BlockA2)
 800bcac:	4b15      	ldr	r3, [pc, #84]	@ (800bd04 <HAL_SAI_TxCpltCallback+0x58>)
 800bcae:	4283      	cmp	r3, r0
 800bcb0:	d000      	beq.n	800bcb4 <HAL_SAI_TxCpltCallback+0x8>
 800bcb2:	4770      	bx	lr
{
 800bcb4:	b500      	push	{lr}
 800bcb6:	b083      	sub	sp, #12
    SAI_BlockA2_PreviousCallbackPosition = dibpEndOfSecondHalf;
 800bcb8:	4b13      	ldr	r3, [pc, #76]	@ (800bd08 <HAL_SAI_TxCpltCallback+0x5c>)
 800bcba:	2202      	movs	r2, #2
 800bcbc:	701a      	strb	r2, [r3, #0]
    if (!InputChannelIsI2S() || (SAI_BlockB2_PreviousCallbackPosition == dibpEndOfSecondHalf))
 800bcbe:	f7ff f93d 	bl	800af3c <InputChannelIsI2S>
 800bcc2:	b130      	cbz	r0, 800bcd2 <HAL_SAI_TxCpltCallback+0x26>
 800bcc4:	4b11      	ldr	r3, [pc, #68]	@ (800bd0c <HAL_SAI_TxCpltCallback+0x60>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d002      	beq.n	800bcd2 <HAL_SAI_TxCpltCallback+0x26>
}
 800bccc:	b003      	add	sp, #12
 800bcce:	f85d fb04 	ldr.w	pc, [sp], #4
      AudioBufferHalf_t AudioBufferHalf = abhSecondHalf;
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	f88d 3003 	strb.w	r3, [sp, #3]
      xQueueSendFromISR(ProcessAudioTaskParameterQueueHandle, &AudioBufferHalf, &HigherProrityTaskWoken);
 800bcd8:	2300      	movs	r3, #0
 800bcda:	aa01      	add	r2, sp, #4
 800bcdc:	f10d 0103 	add.w	r1, sp, #3
 800bce0:	480b      	ldr	r0, [pc, #44]	@ (800bd10 <HAL_SAI_TxCpltCallback+0x64>)
 800bce2:	6800      	ldr	r0, [r0, #0]
 800bce4:	f7fa fcd7 	bl	8006696 <xQueueGenericSendFromISR>
      portYIELD_FROM_ISR(HigherProrityTaskWoken);
 800bce8:	9b01      	ldr	r3, [sp, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0ee      	beq.n	800bccc <HAL_SAI_TxCpltCallback+0x20>
 800bcee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bcf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcf6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	f3bf 8f6f 	isb	sy
}
 800bd02:	e7e3      	b.n	800bccc <HAL_SAI_TxCpltCallback+0x20>
 800bd04:	2001752c 	.word	0x2001752c
 800bd08:	200153c2 	.word	0x200153c2
 800bd0c:	200153c1 	.word	0x200153c1
 800bd10:	20015330 	.word	0x20015330

0800bd14 <HAL_GPIO_EXTI_Callback>:
  if (GPIO_Pin == SI_INT_Pin)
 800bd14:	2820      	cmp	r0, #32
 800bd16:	d000      	beq.n	800bd1a <HAL_GPIO_EXTI_Callback+0x6>
 800bd18:	4770      	bx	lr
{
 800bd1a:	b508      	push	{r3, lr}
    si468x_interrupt();
 800bd1c:	f7fe fa64 	bl	800a1e8 <si468x_interrupt>
}
 800bd20:	bd08      	pop	{r3, pc}
	...

0800bd24 <DAB_IsLikedService>:
{
 800bd24:	b510      	push	{r4, lr}
 800bd26:	4604      	mov	r4, r0
  if (strcmp(pServiceName, "BBC Radio 1") == 0)
 800bd28:	4918      	ldr	r1, [pc, #96]	@ (800bd8c <DAB_IsLikedService+0x68>)
 800bd2a:	f7f4 fa89 	bl	8000240 <strcmp>
 800bd2e:	b1f8      	cbz	r0, 800bd70 <DAB_IsLikedService+0x4c>
  if (strcmp(pServiceName, "BBC Radio 2") == 0)
 800bd30:	4917      	ldr	r1, [pc, #92]	@ (800bd90 <DAB_IsLikedService+0x6c>)
 800bd32:	4620      	mov	r0, r4
 800bd34:	f7f4 fa84 	bl	8000240 <strcmp>
 800bd38:	b1e0      	cbz	r0, 800bd74 <DAB_IsLikedService+0x50>
  if (strcmp(pServiceName, "BBC Radio 3") == 0)
 800bd3a:	4916      	ldr	r1, [pc, #88]	@ (800bd94 <DAB_IsLikedService+0x70>)
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f7f4 fa7f 	bl	8000240 <strcmp>
 800bd42:	b1c8      	cbz	r0, 800bd78 <DAB_IsLikedService+0x54>
  if (strcmp(pServiceName, "BBC Radio 4") == 0)
 800bd44:	4914      	ldr	r1, [pc, #80]	@ (800bd98 <DAB_IsLikedService+0x74>)
 800bd46:	4620      	mov	r0, r4
 800bd48:	f7f4 fa7a 	bl	8000240 <strcmp>
 800bd4c:	b1b0      	cbz	r0, 800bd7c <DAB_IsLikedService+0x58>
  if (strcmp(pServiceName, "Classic FM") == 0)
 800bd4e:	4913      	ldr	r1, [pc, #76]	@ (800bd9c <DAB_IsLikedService+0x78>)
 800bd50:	4620      	mov	r0, r4
 800bd52:	f7f4 fa75 	bl	8000240 <strcmp>
 800bd56:	b198      	cbz	r0, 800bd80 <DAB_IsLikedService+0x5c>
  if (strcmp(pServiceName, "BBC Sheffield") == 0)
 800bd58:	4911      	ldr	r1, [pc, #68]	@ (800bda0 <DAB_IsLikedService+0x7c>)
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f7f4 fa70 	bl	8000240 <strcmp>
 800bd60:	b180      	cbz	r0, 800bd84 <DAB_IsLikedService+0x60>
  if (strcmp(pServiceName, "Hallam FM") == 0)
 800bd62:	4910      	ldr	r1, [pc, #64]	@ (800bda4 <DAB_IsLikedService+0x80>)
 800bd64:	4620      	mov	r0, r4
 800bd66:	f7f4 fa6b 	bl	8000240 <strcmp>
 800bd6a:	b168      	cbz	r0, 800bd88 <DAB_IsLikedService+0x64>
  return 0;
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	e000      	b.n	800bd72 <DAB_IsLikedService+0x4e>
    return 1;
 800bd70:	2001      	movs	r0, #1
}
 800bd72:	bd10      	pop	{r4, pc}
    return 1;
 800bd74:	2001      	movs	r0, #1
 800bd76:	e7fc      	b.n	800bd72 <DAB_IsLikedService+0x4e>
    return 1;
 800bd78:	2001      	movs	r0, #1
 800bd7a:	e7fa      	b.n	800bd72 <DAB_IsLikedService+0x4e>
    return 1;
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	e7f8      	b.n	800bd72 <DAB_IsLikedService+0x4e>
    return 1;
 800bd80:	2001      	movs	r0, #1
 800bd82:	e7f6      	b.n	800bd72 <DAB_IsLikedService+0x4e>
    return 1;
 800bd84:	2001      	movs	r0, #1
 800bd86:	e7f4      	b.n	800bd72 <DAB_IsLikedService+0x4e>
    return 1;
 800bd88:	2001      	movs	r0, #1
 800bd8a:	e7f2      	b.n	800bd72 <DAB_IsLikedService+0x4e>
 800bd8c:	08012b04 	.word	0x08012b04
 800bd90:	08012b10 	.word	0x08012b10
 800bd94:	08012b1c 	.word	0x08012b1c
 800bd98:	08012b28 	.word	0x08012b28
 800bd9c:	08012b34 	.word	0x08012b34
 800bda0:	08012b40 	.word	0x08012b40
 800bda4:	08012b50 	.word	0x08012b50

0800bda8 <DAB_TuneService>:
{
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	b086      	sub	sp, #24
  uint32_t InitialServiceID = DAB_CurrentServiceID;
 800bdac:	4b29      	ldr	r3, [pc, #164]	@ (800be54 <DAB_TuneService+0xac>)
 800bdae:	881e      	ldrh	r6, [r3, #0]
  if (!DAB_NumServices)
 800bdb0:	4b29      	ldr	r3, [pc, #164]	@ (800be58 <DAB_TuneService+0xb0>)
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d048      	beq.n	800be4a <DAB_TuneService+0xa2>
 800bdb8:	4604      	mov	r4, r0
 800bdba:	460d      	mov	r5, r1
  if (ServiceToTune == sttCurrent)
 800bdbc:	2801      	cmp	r0, #1
 800bdbe:	d126      	bne.n	800be0e <DAB_TuneService+0x66>
    JSB_si468x_load_service_name_from_flash(DAB_CurrentServiceID, DAB_ServiceName, DAB_ServiceNameMaxLength);
 800bdc0:	2280      	movs	r2, #128	@ 0x80
 800bdc2:	4926      	ldr	r1, [pc, #152]	@ (800be5c <DAB_TuneService+0xb4>)
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f7fe ff1c 	bl	800ac02 <JSB_si468x_load_service_name_from_flash>
    if (!GetLikedServiceOnly || DAB_IsLikedService(DAB_ServiceName))
 800bdca:	2d00      	cmp	r5, #0
 800bdcc:	d030      	beq.n	800be30 <DAB_TuneService+0x88>
 800bdce:	4823      	ldr	r0, [pc, #140]	@ (800be5c <DAB_TuneService+0xb4>)
 800bdd0:	f7ff ffa8 	bl	800bd24 <DAB_IsLikedService>
 800bdd4:	bb60      	cbnz	r0, 800be30 <DAB_TuneService+0x88>
      ServiceToTune = sttNext;
 800bdd6:	2403      	movs	r4, #3
  if (!Found)
 800bdd8:	e019      	b.n	800be0e <DAB_TuneService+0x66>
          --DAB_CurrentServiceID;
 800bdda:	4a1e      	ldr	r2, [pc, #120]	@ (800be54 <DAB_TuneService+0xac>)
 800bddc:	8813      	ldrh	r3, [r2, #0]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	8013      	strh	r3, [r2, #0]
          if (DAB_CurrentServiceID == 0)
 800bde4:	b933      	cbnz	r3, 800bdf4 <DAB_TuneService+0x4c>
            DAB_CurrentServiceID = DAB_NumServices - 1;
 800bde6:	4b1c      	ldr	r3, [pc, #112]	@ (800be58 <DAB_TuneService+0xb0>)
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	8013      	strh	r3, [r2, #0]
 800bdee:	e001      	b.n	800bdf4 <DAB_TuneService+0x4c>
          Error_Handler();
 800bdf0:	f002 f950 	bl	800e094 <Error_Handler>
      if (DAB_CurrentServiceID == InitialServiceID)
 800bdf4:	4b17      	ldr	r3, [pc, #92]	@ (800be54 <DAB_TuneService+0xac>)
 800bdf6:	8818      	ldrh	r0, [r3, #0]
 800bdf8:	4286      	cmp	r6, r0
 800bdfa:	d028      	beq.n	800be4e <DAB_TuneService+0xa6>
      JSB_si468x_load_service_name_from_flash(DAB_CurrentServiceID, DAB_ServiceName, DAB_ServiceNameMaxLength);
 800bdfc:	2280      	movs	r2, #128	@ 0x80
 800bdfe:	4917      	ldr	r1, [pc, #92]	@ (800be5c <DAB_TuneService+0xb4>)
 800be00:	f7fe feff 	bl	800ac02 <JSB_si468x_load_service_name_from_flash>
      if (!GetLikedServiceOnly || DAB_IsLikedService(DAB_ServiceName))
 800be04:	b1a5      	cbz	r5, 800be30 <DAB_TuneService+0x88>
 800be06:	4815      	ldr	r0, [pc, #84]	@ (800be5c <DAB_TuneService+0xb4>)
 800be08:	f7ff ff8c 	bl	800bd24 <DAB_IsLikedService>
 800be0c:	b980      	cbnz	r0, 800be30 <DAB_TuneService+0x88>
      switch (ServiceToTune)
 800be0e:	2c02      	cmp	r4, #2
 800be10:	d0e3      	beq.n	800bdda <DAB_TuneService+0x32>
 800be12:	2c03      	cmp	r4, #3
 800be14:	d1ec      	bne.n	800bdf0 <DAB_TuneService+0x48>
          ++DAB_CurrentServiceID;
 800be16:	4a0f      	ldr	r2, [pc, #60]	@ (800be54 <DAB_TuneService+0xac>)
 800be18:	8813      	ldrh	r3, [r2, #0]
 800be1a:	3301      	adds	r3, #1
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	8013      	strh	r3, [r2, #0]
          if (DAB_CurrentServiceID == DAB_NumServices)
 800be20:	4a0d      	ldr	r2, [pc, #52]	@ (800be58 <DAB_TuneService+0xb0>)
 800be22:	8812      	ldrh	r2, [r2, #0]
 800be24:	4293      	cmp	r3, r2
 800be26:	d1e5      	bne.n	800bdf4 <DAB_TuneService+0x4c>
            DAB_CurrentServiceID = 0;
 800be28:	4b0a      	ldr	r3, [pc, #40]	@ (800be54 <DAB_TuneService+0xac>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	801a      	strh	r2, [r3, #0]
 800be2e:	e7e1      	b.n	800bdf4 <DAB_TuneService+0x4c>
    si468x_DAB_tune_service(DAB_CurrentServiceID);
 800be30:	4b08      	ldr	r3, [pc, #32]	@ (800be54 <DAB_TuneService+0xac>)
 800be32:	8818      	ldrh	r0, [r3, #0]
 800be34:	f7fe fed6 	bl	800abe4 <si468x_DAB_tune_service>
    si468x_DAB_get_digrad_status(&DAB_Status);
 800be38:	a801      	add	r0, sp, #4
 800be3a:	f7fe fdff 	bl	800aa3c <si468x_DAB_get_digrad_status>
    return DAB_Status.VALID ? 1 : 0;
 800be3e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800be42:	f000 0001 	and.w	r0, r0, #1
}
 800be46:	b006      	add	sp, #24
 800be48:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800be4a:	2000      	movs	r0, #0
 800be4c:	e7fb      	b.n	800be46 <DAB_TuneService+0x9e>
  return 0;
 800be4e:	2000      	movs	r0, #0
 800be50:	e7f9      	b.n	800be46 <DAB_TuneService+0x9e>
 800be52:	bf00      	nop
 800be54:	2001533c 	.word	0x2001533c
 800be58:	2001533e 	.word	0x2001533e
 800be5c:	20015340 	.word	0x20015340

0800be60 <ClearOutputBuffer>:
{
 800be60:	b082      	sub	sp, #8
  AudioSample24_t ZeroSample={0,0};
 800be62:	2200      	movs	r2, #0
 800be64:	9200      	str	r2, [sp, #0]
 800be66:	9201      	str	r2, [sp, #4]
  for(uint32_t SampleIndex = 0; SampleIndex < I2SBuffers_NumSamples; ++SampleIndex)
 800be68:	e008      	b.n	800be7c <ClearOutputBuffer+0x1c>
    I2SOutputBuffer[SampleIndex] = ZeroSample;
 800be6a:	4b07      	ldr	r3, [pc, #28]	@ (800be88 <ClearOutputBuffer+0x28>)
 800be6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be70:	a902      	add	r1, sp, #8
 800be72:	e911 0003 	ldmdb	r1, {r0, r1}
 800be76:	e883 0003 	stmia.w	r3, {r0, r1}
  for(uint32_t SampleIndex = 0; SampleIndex < I2SBuffers_NumSamples; ++SampleIndex)
 800be7a:	3201      	adds	r2, #1
 800be7c:	4b03      	ldr	r3, [pc, #12]	@ (800be8c <ClearOutputBuffer+0x2c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4293      	cmp	r3, r2
 800be82:	d8f2      	bhi.n	800be6a <ClearOutputBuffer+0xa>
}
 800be84:	b002      	add	sp, #8
 800be86:	4770      	bx	lr
 800be88:	20015400 	.word	0x20015400
 800be8c:	200153e8 	.word	0x200153e8

0800be90 <SPDIFRX_ClearOutputBuffer>:
{
 800be90:	b508      	push	{r3, lr}
  ClearOutputBuffer();
 800be92:	f7ff ffe5 	bl	800be60 <ClearOutputBuffer>
}
 800be96:	bd08      	pop	{r3, pc}

0800be98 <I2SInput_Stop>:
{
 800be98:	b508      	push	{r3, lr}
  ClearOutputBuffer();
 800be9a:	f7ff ffe1 	bl	800be60 <ClearOutputBuffer>
  HAL_SAI_DMAStop(&hsai_BlockA2);
 800be9e:	4803      	ldr	r0, [pc, #12]	@ (800beac <I2SInput_Stop+0x14>)
 800bea0:	f7f7 faa7 	bl	80033f2 <HAL_SAI_DMAStop>
  HAL_SAI_DMAStop(&hsai_BlockB2);
 800bea4:	4802      	ldr	r0, [pc, #8]	@ (800beb0 <I2SInput_Stop+0x18>)
 800bea6:	f7f7 faa4 	bl	80033f2 <HAL_SAI_DMAStop>
}
 800beaa:	bd08      	pop	{r3, pc}
 800beac:	2001752c 	.word	0x2001752c
 800beb0:	200174a8 	.word	0x200174a8

0800beb4 <ProcessAudio>:
{
 800beb4:	b510      	push	{r4, lr}
 800beb6:	4604      	mov	r4, r0
  if (InputChannelIsI2S())
 800beb8:	f7ff f840 	bl	800af3c <InputChannelIsI2S>
 800bebc:	b170      	cbz	r0, 800bedc <ProcessAudio+0x28>
    AudioBuffer_TransferFromInputBufferToOutputBuffer(AudioBufferHalf);
 800bebe:	4620      	mov	r0, r4
 800bec0:	f7ff fe1a 	bl	800baf8 <AudioBuffer_TransferFromInputBufferToOutputBuffer>
  if (InternalMuteActive || Process_UserMuted)
 800bec4:	4b11      	ldr	r3, [pc, #68]	@ (800bf0c <ProcessAudio+0x58>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	b913      	cbnz	r3, 800bed0 <ProcessAudio+0x1c>
 800beca:	4b11      	ldr	r3, [pc, #68]	@ (800bf10 <ProcessAudio+0x5c>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	b10b      	cbz	r3, 800bed4 <ProcessAudio+0x20>
    ClearOutputBuffer(); // Could clear just the relevant half of the buffer.
 800bed0:	f7ff ffc6 	bl	800be60 <ClearOutputBuffer>
  if (BluetoothOut_Started)
 800bed4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf14 <ProcessAudio+0x60>)
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	b94b      	cbnz	r3, 800beee <ProcessAudio+0x3a>
}
 800beda:	bd10      	pop	{r4, pc}
  else if (SPDIFRX_IsStarted())
 800bedc:	f7fd f874 	bl	8008fc8 <SPDIFRX_IsStarted>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	d0ef      	beq.n	800bec4 <ProcessAudio+0x10>
    SPDIFRX_CopySamplesToGivenBuffer(I2SOutputBuffer, AudioBufferHalf); // This MUST be called even if the output is muted (to stay in sync).
 800bee4:	4621      	mov	r1, r4
 800bee6:	480c      	ldr	r0, [pc, #48]	@ (800bf18 <ProcessAudio+0x64>)
 800bee8:	f7fc fe76 	bl	8008bd8 <SPDIFRX_CopySamplesToGivenBuffer>
 800beec:	e7ea      	b.n	800bec4 <ProcessAudio+0x10>
    if (!SPDIFRX_IsStarted() || SPDIFRX_IsReceiving()) // Disable during SPDIFRX sample rate measurement as otherwise the measurement result is too small e.g. 43kHz instead of 44.1kHz.
 800beee:	f7fd f86b 	bl	8008fc8 <SPDIFRX_IsStarted>
 800bef2:	b118      	cbz	r0, 800befc <ProcessAudio+0x48>
 800bef4:	f7fd f92a 	bl	800914c <SPDIFRX_IsReceiving>
 800bef8:	2800      	cmp	r0, #0
 800befa:	d0ee      	beq.n	800beda <ProcessAudio+0x26>
      ESP32_SendSamplesFromAudioOutputBufferToESP32(AudioBufferHalf == abhSecondHalf);
 800befc:	2c02      	cmp	r4, #2
 800befe:	bf14      	ite	ne
 800bf00:	2000      	movne	r0, #0
 800bf02:	2001      	moveq	r0, #1
 800bf04:	f7ff fc46 	bl	800b794 <ESP32_SendSamplesFromAudioOutputBufferToESP32>
}
 800bf08:	e7e7      	b.n	800beda <ProcessAudio+0x26>
 800bf0a:	bf00      	nop
 800bf0c:	200153e5 	.word	0x200153e5
 800bf10:	200153e4 	.word	0x200153e4
 800bf14:	200153c4 	.word	0x200153c4
 800bf18:	20015400 	.word	0x20015400

0800bf1c <UpdateMuteAndVolume>:
{
 800bf1c:	b508      	push	{r3, lr}
  DAC_Mute(0); // Don't mute this.
 800bf1e:	2000      	movs	r0, #0
 800bf20:	f7fd ff48 	bl	8009db4 <DAC_Mute>
  if (InternalMuteActive) // Internal mute trumps user settings.
 800bf24:	4b08      	ldr	r3, [pc, #32]	@ (800bf48 <UpdateMuteAndVolume+0x2c>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	b92b      	cbnz	r3, 800bf36 <UpdateMuteAndVolume+0x1a>
    if (PA_UserMuted)
 800bf2a:	4b08      	ldr	r3, [pc, #32]	@ (800bf4c <UpdateMuteAndVolume+0x30>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	b12b      	cbz	r3, 800bf3c <UpdateMuteAndVolume+0x20>
      PA_Mute();
 800bf30:	f7fe f810 	bl	8009f54 <PA_Mute>
}
 800bf34:	bd08      	pop	{r3, pc}
    PA_Mute();
 800bf36:	f7fe f80d 	bl	8009f54 <PA_Mute>
 800bf3a:	e7fb      	b.n	800bf34 <UpdateMuteAndVolume+0x18>
      PA_SetMasterVolume(PA_MasterVolume_dB);
 800bf3c:	4b04      	ldr	r3, [pc, #16]	@ (800bf50 <UpdateMuteAndVolume+0x34>)
 800bf3e:	6818      	ldr	r0, [r3, #0]
 800bf40:	f7fd ffde 	bl	8009f00 <PA_SetMasterVolume>
}
 800bf44:	e7f6      	b.n	800bf34 <UpdateMuteAndVolume+0x18>
 800bf46:	bf00      	nop
 800bf48:	200153e5 	.word	0x200153e5
 800bf4c:	200153dc 	.word	0x200153dc
 800bf50:	200153e0 	.word	0x200153e0

0800bf54 <InternalMute>:
{
 800bf54:	b510      	push	{r4, lr}
  uint8_t Result = InternalMuteActive;
 800bf56:	4b03      	ldr	r3, [pc, #12]	@ (800bf64 <InternalMute+0x10>)
 800bf58:	781c      	ldrb	r4, [r3, #0]
  InternalMuteActive = Value;
 800bf5a:	7018      	strb	r0, [r3, #0]
  UpdateMuteAndVolume();
 800bf5c:	f7ff ffde 	bl	800bf1c <UpdateMuteAndVolume>
}
 800bf60:	4620      	mov	r0, r4
 800bf62:	bd10      	pop	{r4, pc}
 800bf64:	200153e5 	.word	0x200153e5

0800bf68 <SPDIFRX_MuteOutput_Callback>:
{
 800bf68:	b508      	push	{r3, lr}
  InternalMute(Value);
 800bf6a:	f7ff fff3 	bl	800bf54 <InternalMute>
}
 800bf6e:	bd08      	pop	{r3, pc}

0800bf70 <SetOutputSampleRate>:
{
 800bf70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf74:	b0a5      	sub	sp, #148	@ 0x94
 800bf76:	4604      	mov	r4, r0
 800bf78:	460d      	mov	r5, r1
 800bf7a:	4617      	mov	r7, r2
 800bf7c:	461e      	mov	r6, r3
  WasMuted = InternalMute(1); // Try to prevent click from DAC output when stopping DMAs. Not completely successful.
 800bf7e:	2001      	movs	r0, #1
 800bf80:	f7ff ffe8 	bl	800bf54 <InternalMute>
 800bf84:	4680      	mov	r8, r0
  HandleHALResult(HAL_SAI_DMAStop(&hsai_BlockB2), "HAL_SAI_DMAStop");
 800bf86:	482c      	ldr	r0, [pc, #176]	@ (800c038 <SetOutputSampleRate+0xc8>)
 800bf88:	f7f7 fa33 	bl	80033f2 <HAL_SAI_DMAStop>
 800bf8c:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 800c05c <SetOutputSampleRate+0xec>
 800bf90:	4649      	mov	r1, r9
 800bf92:	f7fd fd79 	bl	8009a88 <HandleHALResult>
  HandleHALResult(HAL_SAI_DMAStop(&hsai_BlockA2), "HAL_SAI_DMAStop");
 800bf96:	4829      	ldr	r0, [pc, #164]	@ (800c03c <SetOutputSampleRate+0xcc>)
 800bf98:	f7f7 fa2b 	bl	80033f2 <HAL_SAI_DMAStop>
 800bf9c:	4649      	mov	r1, r9
 800bf9e:	f7fd fd73 	bl	8009a88 <HandleHALResult>
  InternalMute(WasMuted);
 800bfa2:	4640      	mov	r0, r8
 800bfa4:	f7ff ffd6 	bl	800bf54 <InternalMute>
  ClearOutputBuffer();
 800bfa8:	f7ff ff5a 	bl	800be60 <ClearOutputBuffer>
  EnsureFixPresent_Fix_JSB_20191115_HAL_RCCEx_GetPeriphCLKConfig__PLLDivisionFactors();
 800bfac:	f7f6 fe5e 	bl	8002c6c <EnsureFixPresent_Fix_JSB_20191115_HAL_RCCEx_GetPeriphCLKConfig__PLLDivisionFactors>
  HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInitStruct);
 800bfb0:	4668      	mov	r0, sp
 800bfb2:	f7f6 fe5d 	bl	8002c70 <HAL_RCCEx_GetPeriphCLKConfig>
  PeriphClkInitStruct.PLLI2S.PLLI2SN = i_N;
 800bfb6:	9701      	str	r7, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = i_P;
 800bfb8:	9604      	str	r6, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = i_Q;
 800bfba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800bfbc:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = i_DivQ;
 800bfbe:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800bfc0:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) // NB: This disables the PLL whilst changing its parameters.
 800bfc2:	4668      	mov	r0, sp
 800bfc4:	f7f6 fb50 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 800bfc8:	bb38      	cbnz	r0, 800c01a <SetOutputSampleRate+0xaa>
  hsai_BlockA2.Init.AudioFrequency = i_SampleRate;
 800bfca:	481c      	ldr	r0, [pc, #112]	@ (800c03c <SetOutputSampleRate+0xcc>)
 800bfcc:	61c4      	str	r4, [r0, #28]
  OutputSampleRate = i_SampleRate;
 800bfce:	4b1c      	ldr	r3, [pc, #112]	@ (800c040 <SetOutputSampleRate+0xd0>)
 800bfd0:	601c      	str	r4, [r3, #0]
  I2SBuffers_NumSamples = i_NumSamples;
 800bfd2:	4b1c      	ldr	r3, [pc, #112]	@ (800c044 <SetOutputSampleRate+0xd4>)
 800bfd4:	601d      	str	r5, [r3, #0]
  HandleHALResult(HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, NumInputChannels), "HAL_SAI_InitProtocol");
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	461a      	mov	r2, r3
 800bfda:	2100      	movs	r1, #0
 800bfdc:	f7f7 f9f4 	bl	80033c8 <HAL_SAI_InitProtocol>
 800bfe0:	4919      	ldr	r1, [pc, #100]	@ (800c048 <SetOutputSampleRate+0xd8>)
 800bfe2:	f7fd fd51 	bl	8009a88 <HandleHALResult>
  WasMuted = InternalMute(1); // Try to prevent click from DAC output when starting DMAs. Not completely successful.
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	f7ff ffb4 	bl	800bf54 <InternalMute>
 800bfec:	4604      	mov	r4, r0
  if (InputChannelIsI2S())
 800bfee:	f7fe ffa5 	bl	800af3c <InputChannelIsI2S>
 800bff2:	b9a8      	cbnz	r0, 800c020 <SetOutputSampleRate+0xb0>
  HandleHALResult(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)I2SOutputBuffer, NumInputChannels * I2SBuffers_NumSamples), "HAL_SAI_Transmit_DMA");
 800bff4:	4b13      	ldr	r3, [pc, #76]	@ (800c044 <SetOutputSampleRate+0xd4>)
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	0052      	lsls	r2, r2, #1
 800bffa:	b292      	uxth	r2, r2
 800bffc:	4913      	ldr	r1, [pc, #76]	@ (800c04c <SetOutputSampleRate+0xdc>)
 800bffe:	480f      	ldr	r0, [pc, #60]	@ (800c03c <SetOutputSampleRate+0xcc>)
 800c000:	f7f7 fa4c 	bl	800349c <HAL_SAI_Transmit_DMA>
 800c004:	4912      	ldr	r1, [pc, #72]	@ (800c050 <SetOutputSampleRate+0xe0>)
 800c006:	f7fd fd3f 	bl	8009a88 <HandleHALResult>
  InternalMute(WasMuted);
 800c00a:	4620      	mov	r0, r4
 800c00c:	f7ff ffa2 	bl	800bf54 <InternalMute>
  PA_ClearErrorStatus(); // Clear the likely MCLK error. !!! It seems that the PA can crash etc on MCLK change, giving no audio output. It may not be a good idea to hide this by clearing the error. !!!
 800c010:	f7fd ff6f 	bl	8009ef2 <PA_ClearErrorStatus>
}
 800c014:	b025      	add	sp, #148	@ 0x94
 800c016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 800c01a:	f002 f83b 	bl	800e094 <Error_Handler>
 800c01e:	e7d4      	b.n	800bfca <SetOutputSampleRate+0x5a>
    HandleHALResult(HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)I2SInputBuffer, NumInputChannels * I2SBuffers_NumSamples), "HAL_SAI_Receive_DMA");
 800c020:	4b08      	ldr	r3, [pc, #32]	@ (800c044 <SetOutputSampleRate+0xd4>)
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	0052      	lsls	r2, r2, #1
 800c026:	b292      	uxth	r2, r2
 800c028:	490a      	ldr	r1, [pc, #40]	@ (800c054 <SetOutputSampleRate+0xe4>)
 800c02a:	4803      	ldr	r0, [pc, #12]	@ (800c038 <SetOutputSampleRate+0xc8>)
 800c02c:	f7f7 fa96 	bl	800355c <HAL_SAI_Receive_DMA>
 800c030:	4909      	ldr	r1, [pc, #36]	@ (800c058 <SetOutputSampleRate+0xe8>)
 800c032:	f7fd fd29 	bl	8009a88 <HandleHALResult>
 800c036:	e7dd      	b.n	800bff4 <SetOutputSampleRate+0x84>
 800c038:	200174a8 	.word	0x200174a8
 800c03c:	2001752c 	.word	0x2001752c
 800c040:	200153d8 	.word	0x200153d8
 800c044:	200153e8 	.word	0x200153e8
 800c048:	08012b6c 	.word	0x08012b6c
 800c04c:	20015400 	.word	0x20015400
 800c050:	08012b98 	.word	0x08012b98
 800c054:	20016800 	.word	0x20016800
 800c058:	08012b84 	.word	0x08012b84
 800c05c:	08012b5c 	.word	0x08012b5c

0800c060 <SetOutputSampleRate_44100>:
{
 800c060:	b500      	push	{lr}
 800c062:	b083      	sub	sp, #12
 800c064:	4601      	mov	r1, r0
  SetOutputSampleRate(SAI_AUDIO_FREQUENCY_44K, i_NumSamples, 429, RCC_PLLI2SP_DIV4, 2, 19);
 800c066:	2313      	movs	r3, #19
 800c068:	9301      	str	r3, [sp, #4]
 800c06a:	2302      	movs	r3, #2
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	2301      	movs	r3, #1
 800c070:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800c074:	f64a 4044 	movw	r0, #44100	@ 0xac44
 800c078:	f7ff ff7a 	bl	800bf70 <SetOutputSampleRate>
}
 800c07c:	b003      	add	sp, #12
 800c07e:	f85d fb04 	ldr.w	pc, [sp], #4

0800c082 <SetOutputSampleRate_48000>:
{
 800c082:	b500      	push	{lr}
 800c084:	b083      	sub	sp, #12
 800c086:	4601      	mov	r1, r0
  SetOutputSampleRate(SAI_AUDIO_FREQUENCY_48K, i_NumSamples, 344, RCC_PLLI2SP_DIV4, 14, 1);
 800c088:	2301      	movs	r3, #1
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	220e      	movs	r2, #14
 800c08e:	9200      	str	r2, [sp, #0]
 800c090:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800c094:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 800c098:	f7ff ff6a 	bl	800bf70 <SetOutputSampleRate>
}
 800c09c:	b003      	add	sp, #12
 800c09e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c0a4 <SPDIFRX_SetOutputSampleRate_Callback>:
{
 800c0a4:	b508      	push	{r3, lr}
  if (Value == SAI_AUDIO_FREQUENCY_44K)
 800c0a6:	f64a 4344 	movw	r3, #44100	@ 0xac44
 800c0aa:	4298      	cmp	r0, r3
 800c0ac:	d007      	beq.n	800c0be <SPDIFRX_SetOutputSampleRate_Callback+0x1a>
  else if (Value == SAI_AUDIO_FREQUENCY_48K)
 800c0ae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c0b2:	4298      	cmp	r0, r3
 800c0b4:	d008      	beq.n	800c0c8 <SPDIFRX_SetOutputSampleRate_Callback+0x24>
    OutputSampleRate = 0;
 800c0b6:	4b07      	ldr	r3, [pc, #28]	@ (800c0d4 <SPDIFRX_SetOutputSampleRate_Callback+0x30>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	601a      	str	r2, [r3, #0]
}
 800c0bc:	bd08      	pop	{r3, pc}
    SetOutputSampleRate_44100(SPDIFRX_Buffer_NumSamples);
 800c0be:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800c0c2:	f7ff ffcd 	bl	800c060 <SetOutputSampleRate_44100>
 800c0c6:	e7f9      	b.n	800c0bc <SPDIFRX_SetOutputSampleRate_Callback+0x18>
    SetOutputSampleRate_48000(SPDIFRX_Buffer_NumSamples);
 800c0c8:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800c0cc:	f7ff ffd9 	bl	800c082 <SetOutputSampleRate_48000>
 800c0d0:	e7f4      	b.n	800c0bc <SPDIFRX_SetOutputSampleRate_Callback+0x18>
 800c0d2:	bf00      	nop
 800c0d4:	200153d8 	.word	0x200153d8

0800c0d8 <Si4684_Initialize>:
{
 800c0d8:	b530      	push	{r4, r5, lr}
 800c0da:	b0a9      	sub	sp, #164	@ 0xa4
 800c0dc:	4604      	mov	r4, r0
  WasMuted = InternalMute(1); // Mute because the I2S lines from the Si4684 float during its initialization, and tend to pick up spurious signals.
 800c0de:	2001      	movs	r0, #1
 800c0e0:	f7ff ff38 	bl	800bf54 <InternalMute>
 800c0e4:	4605      	mov	r5, r0
  si468x_init(Mode);
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f7fe fa22 	bl	800a530 <si468x_init>
  if (Mode == Si468x_MODE_DAB)
 800c0ec:	2c02      	cmp	r4, #2
 800c0ee:	d004      	beq.n	800c0fa <Si4684_Initialize+0x22>
  InternalMute(WasMuted);
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f7ff ff2f 	bl	800bf54 <InternalMute>
}
 800c0f6:	b029      	add	sp, #164	@ 0xa4
 800c0f8:	bd30      	pop	{r4, r5, pc}
    StringToGUID("{8f74f7d6-eba6-4a72-bd43-16f123bbc3e6}", &DAB_FlashFormat0);
 800c0fa:	a924      	add	r1, sp, #144	@ 0x90
 800c0fc:	481c      	ldr	r0, [pc, #112]	@ (800c170 <Si4684_Initialize+0x98>)
 800c0fe:	f7fb fd0f 	bl	8007b20 <StringToGUID>
    SST25_ReadBlock(0, (uint8_t *)&DAB_FlashFormatID, 16);
 800c102:	2210      	movs	r2, #16
 800c104:	a920      	add	r1, sp, #128	@ 0x80
 800c106:	2000      	movs	r0, #0
 800c108:	f7fd fc9c 	bl	8009a44 <SST25_ReadBlock>
    if (IsUserButtonPressed() || !GUID_IsEqual(&DAB_FlashFormatID, &DAB_FlashFormat0))
 800c10c:	f7fd fd9c 	bl	8009c48 <IsUserButtonPressed>
 800c110:	b920      	cbnz	r0, 800c11c <Si4684_Initialize+0x44>
 800c112:	a924      	add	r1, sp, #144	@ 0x90
 800c114:	a820      	add	r0, sp, #128	@ 0x80
 800c116:	f7fb fd53 	bl	8007bc0 <GUID_IsEqual>
 800c11a:	b9f8      	cbnz	r0, 800c15c <Si4684_Initialize+0x84>
      ILI9341_Clear(0);
 800c11c:	2000      	movs	r0, #0
 800c11e:	f7fc f927 	bl	8008370 <ILI9341_Clear>
      sprintf(S, "DAB scanning...");
 800c122:	466c      	mov	r4, sp
 800c124:	4b13      	ldr	r3, [pc, #76]	@ (800c174 <Si4684_Initialize+0x9c>)
 800c126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      ILI9341_DrawTextAtXY(S, 0, 1 * ILI9341_GetFontYSpacing(), tpLeft);
 800c12c:	f7fc f988 	bl	8008440 <ILI9341_GetFontYSpacing>
 800c130:	4602      	mov	r2, r0
 800c132:	2301      	movs	r3, #1
 800c134:	2100      	movs	r1, #0
 800c136:	4620      	mov	r0, r4
 800c138:	f7fc fb0c 	bl	8008754 <ILI9341_DrawTextAtXY>
      if (ILI9341_UsingBackBuffer())
 800c13c:	f7fc f8ae 	bl	800829c <ILI9341_UsingBackBuffer>
 800c140:	b998      	cbnz	r0, 800c16a <Si4684_Initialize+0x92>
      PageChanged = 1;
 800c142:	4b0d      	ldr	r3, [pc, #52]	@ (800c178 <Si4684_Initialize+0xa0>)
 800c144:	2201      	movs	r2, #1
 800c146:	701a      	strb	r2, [r3, #0]
      SST25_EraseSector_4K(0);
 800c148:	2000      	movs	r0, #0
 800c14a:	f7fd fbbb 	bl	80098c4 <SST25_EraseSector_4K>
      SST25_WriteBlock(0, (uint8_t *)&DAB_FlashFormat0, 16);
 800c14e:	2210      	movs	r2, #16
 800c150:	a924      	add	r1, sp, #144	@ 0x90
 800c152:	2000      	movs	r0, #0
 800c154:	f7fd fc00 	bl	8009958 <SST25_WriteBlock>
      si468x_DAB_band_scan();
 800c158:	f7fe fcc0 	bl	800aadc <si468x_DAB_band_scan>
    SST25_ReadBlock(4096, (uint8_t *) &DAB_NumServices, 2);
 800c15c:	2202      	movs	r2, #2
 800c15e:	4907      	ldr	r1, [pc, #28]	@ (800c17c <Si4684_Initialize+0xa4>)
 800c160:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c164:	f7fd fc6e 	bl	8009a44 <SST25_ReadBlock>
 800c168:	e7c2      	b.n	800c0f0 <Si4684_Initialize+0x18>
        ILI9341_CopyBackBufferToDisplay();
 800c16a:	f7fc f89d 	bl	80082a8 <ILI9341_CopyBackBufferToDisplay>
 800c16e:	e7e8      	b.n	800c142 <Si4684_Initialize+0x6a>
 800c170:	08012bb0 	.word	0x08012bb0
 800c174:	08012bd8 	.word	0x08012bd8
 800c178:	200172d1 	.word	0x200172d1
 800c17c:	2001533e 	.word	0x2001533e

0800c180 <Si4684_RequireMode>:
{
 800c180:	b510      	push	{r4, lr}
 800c182:	4604      	mov	r4, r0
  if (Mode == JSB_si468x_get_current_mode())
 800c184:	f7fe fa4a 	bl	800a61c <JSB_si468x_get_current_mode>
 800c188:	42a0      	cmp	r0, r4
 800c18a:	d002      	beq.n	800c192 <Si4684_RequireMode+0x12>
  Si4684_Initialize(Mode);
 800c18c:	4620      	mov	r0, r4
 800c18e:	f7ff ffa3 	bl	800c0d8 <Si4684_Initialize>
}
 800c192:	bd10      	pop	{r4, pc}

0800c194 <SetCurrentPage>:
  pCurrentPage = Value;
 800c194:	4b02      	ldr	r3, [pc, #8]	@ (800c1a0 <SetCurrentPage+0xc>)
 800c196:	6018      	str	r0, [r3, #0]
  PageChanged = 1;
 800c198:	4b02      	ldr	r3, [pc, #8]	@ (800c1a4 <SetCurrentPage+0x10>)
 800c19a:	2201      	movs	r2, #1
 800c19c:	701a      	strb	r2, [r3, #0]
}
 800c19e:	4770      	bx	lr
 800c1a0:	200172d4 	.word	0x200172d4
 800c1a4:	200172d1 	.word	0x200172d1

0800c1a8 <HomePage_InputButtonPressed>:
{
 800c1a8:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c1aa:	f7fd f863 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pInputPage);
 800c1ae:	4b02      	ldr	r3, [pc, #8]	@ (800c1b8 <HomePage_InputButtonPressed+0x10>)
 800c1b0:	6818      	ldr	r0, [r3, #0]
 800c1b2:	f7ff ffef 	bl	800c194 <SetCurrentPage>
}
 800c1b6:	bd08      	pop	{r3, pc}
 800c1b8:	200172a8 	.word	0x200172a8

0800c1bc <HomePage_ProcessButtonPressed>:
{
 800c1bc:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c1be:	f7fd f859 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pProcessPage);
 800c1c2:	4b02      	ldr	r3, [pc, #8]	@ (800c1cc <HomePage_ProcessButtonPressed+0x10>)
 800c1c4:	6818      	ldr	r0, [r3, #0]
 800c1c6:	f7ff ffe5 	bl	800c194 <SetCurrentPage>
}
 800c1ca:	bd08      	pop	{r3, pc}
 800c1cc:	20017280 	.word	0x20017280

0800c1d0 <HomePage_PowerAmpButtonPressed>:
{
 800c1d0:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c1d2:	f7fd f84f 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pPowerAmplifierPage);
 800c1d6:	4b02      	ldr	r3, [pc, #8]	@ (800c1e0 <HomePage_PowerAmpButtonPressed+0x10>)
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	f7ff ffdb 	bl	800c194 <SetCurrentPage>
}
 800c1de:	bd08      	pop	{r3, pc}
 800c1e0:	20017268 	.word	0x20017268

0800c1e4 <HomePage_BluetoothOutButtonPressed>:
{
 800c1e4:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c1e6:	f7fd f845 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pBluetoothOutPage);
 800c1ea:	4b02      	ldr	r3, [pc, #8]	@ (800c1f4 <HomePage_BluetoothOutButtonPressed+0x10>)
 800c1ec:	6818      	ldr	r0, [r3, #0]
 800c1ee:	f7ff ffd1 	bl	800c194 <SetCurrentPage>
}
 800c1f2:	bd08      	pop	{r3, pc}
 800c1f4:	20017250 	.word	0x20017250

0800c1f8 <HomePage_WiFiButtonPressed>:
{
 800c1f8:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c1fa:	f7fd f83b 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pWiFiPage);
 800c1fe:	4b02      	ldr	r3, [pc, #8]	@ (800c208 <HomePage_WiFiButtonPressed+0x10>)
 800c200:	6818      	ldr	r0, [r3, #0]
 800c202:	f7ff ffc7 	bl	800c194 <SetCurrentPage>
}
 800c206:	bd08      	pop	{r3, pc}
 800c208:	2001723c 	.word	0x2001723c

0800c20c <HomePage_InfoButtonPressed>:
{
 800c20c:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c20e:	f7fd f831 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pInfoPage);
 800c212:	4b02      	ldr	r3, [pc, #8]	@ (800c21c <HomePage_InfoButtonPressed+0x10>)
 800c214:	6818      	ldr	r0, [r3, #0]
 800c216:	f7ff ffbd 	bl	800c194 <SetCurrentPage>
}
 800c21a:	bd08      	pop	{r3, pc}
 800c21c:	20017228 	.word	0x20017228

0800c220 <InputPage_HomeButtonPressed>:
{
 800c220:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c222:	f7fd f827 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800c226:	4b02      	ldr	r3, [pc, #8]	@ (800c230 <InputPage_HomeButtonPressed+0x10>)
 800c228:	6818      	ldr	r0, [r3, #0]
 800c22a:	f7ff ffb3 	bl	800c194 <SetCurrentPage>
}
 800c22e:	bd08      	pop	{r3, pc}
 800c230:	200172cc 	.word	0x200172cc

0800c234 <ProcessPage_HomeButtonPressed>:
{
 800c234:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c236:	f7fd f81d 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800c23a:	4b02      	ldr	r3, [pc, #8]	@ (800c244 <ProcessPage_HomeButtonPressed+0x10>)
 800c23c:	6818      	ldr	r0, [r3, #0]
 800c23e:	f7ff ffa9 	bl	800c194 <SetCurrentPage>
}
 800c242:	bd08      	pop	{r3, pc}
 800c244:	200172cc 	.word	0x200172cc

0800c248 <PowerAmplifierPage_HomeButtonPressed>:
{
 800c248:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c24a:	f7fd f813 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800c24e:	4b02      	ldr	r3, [pc, #8]	@ (800c258 <PowerAmplifierPage_HomeButtonPressed+0x10>)
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	f7ff ff9f 	bl	800c194 <SetCurrentPage>
}
 800c256:	bd08      	pop	{r3, pc}
 800c258:	200172cc 	.word	0x200172cc

0800c25c <BluetoothOutPage_HomeButtonPressed>:
{
 800c25c:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c25e:	f7fd f809 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800c262:	4b02      	ldr	r3, [pc, #8]	@ (800c26c <BluetoothOutPage_HomeButtonPressed+0x10>)
 800c264:	6818      	ldr	r0, [r3, #0]
 800c266:	f7ff ff95 	bl	800c194 <SetCurrentPage>
}
 800c26a:	bd08      	pop	{r3, pc}
 800c26c:	200172cc 	.word	0x200172cc

0800c270 <WiFiPage_HomeButtonPressed>:
{
 800c270:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c272:	f7fc ffff 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800c276:	4b02      	ldr	r3, [pc, #8]	@ (800c280 <WiFiPage_HomeButtonPressed+0x10>)
 800c278:	6818      	ldr	r0, [r3, #0]
 800c27a:	f7ff ff8b 	bl	800c194 <SetCurrentPage>
}
 800c27e:	bd08      	pop	{r3, pc}
 800c280:	200172cc 	.word	0x200172cc

0800c284 <InfoPage_RadioInfoButtonPressed>:
{
 800c284:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c286:	f7fc fff5 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pRadioInfoPage);
 800c28a:	4b02      	ldr	r3, [pc, #8]	@ (800c294 <InfoPage_RadioInfoButtonPressed+0x10>)
 800c28c:	6818      	ldr	r0, [r3, #0]
 800c28e:	f7ff ff81 	bl	800c194 <SetCurrentPage>
}
 800c292:	bd08      	pop	{r3, pc}
 800c294:	20017218 	.word	0x20017218

0800c298 <InfoPage_HomeButtonPressed>:
{
 800c298:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c29a:	f7fc ffeb 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800c29e:	4b02      	ldr	r3, [pc, #8]	@ (800c2a8 <InfoPage_HomeButtonPressed+0x10>)
 800c2a0:	6818      	ldr	r0, [r3, #0]
 800c2a2:	f7ff ff77 	bl	800c194 <SetCurrentPage>
}
 800c2a6:	bd08      	pop	{r3, pc}
 800c2a8:	200172cc 	.word	0x200172cc

0800c2ac <RadioInfoPage_BackButtonPressed>:
{
 800c2ac:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c2ae:	f7fc ffe1 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pInfoPage);
 800c2b2:	4b02      	ldr	r3, [pc, #8]	@ (800c2bc <RadioInfoPage_BackButtonPressed+0x10>)
 800c2b4:	6818      	ldr	r0, [r3, #0]
 800c2b6:	f7ff ff6d 	bl	800c194 <SetCurrentPage>
}
 800c2ba:	bd08      	pop	{r3, pc}
 800c2bc:	20017228 	.word	0x20017228

0800c2c0 <DebugInfoPage_BackButtonPressed>:
{
 800c2c0:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c2c2:	f7fc ffd7 	bl	8009274 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pInfoPage);
 800c2c6:	4b02      	ldr	r3, [pc, #8]	@ (800c2d0 <DebugInfoPage_BackButtonPressed+0x10>)
 800c2c8:	6818      	ldr	r0, [r3, #0]
 800c2ca:	f7ff ff63 	bl	800c194 <SetCurrentPage>
}
 800c2ce:	bd08      	pop	{r3, pc}
 800c2d0:	20017228 	.word	0x20017228

0800c2d4 <SetPowerOn>:
{
 800c2d4:	b508      	push	{r3, lr}
  PowerOn = Value;
 800c2d6:	4b03      	ldr	r3, [pc, #12]	@ (800c2e4 <SetPowerOn+0x10>)
 800c2d8:	7018      	strb	r0, [r3, #0]
  SetCurrentPage(UI_pHomePage);
 800c2da:	4b03      	ldr	r3, [pc, #12]	@ (800c2e8 <SetPowerOn+0x14>)
 800c2dc:	6818      	ldr	r0, [r3, #0]
 800c2de:	f7ff ff59 	bl	800c194 <SetCurrentPage>
}
 800c2e2:	bd08      	pop	{r3, pc}
 800c2e4:	20017200 	.word	0x20017200
 800c2e8:	200172cc 	.word	0x200172cc

0800c2ec <HomePage_TitleBarPressed>:
{
 800c2ec:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c2ee:	f7fc ffc1 	bl	8009274 <JSB_UI_Page_PressUp>
  SetPowerOn(0);
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	f7ff ffee 	bl	800c2d4 <SetPowerOn>
}
 800c2f8:	bd08      	pop	{r3, pc}
	...

0800c2fc <Process_SetGain>:
{
 800c2fc:	b508      	push	{r3, lr}
  Value = Clamp_float(Value, 0.0f, 1.0f);
 800c2fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c302:	2100      	movs	r1, #0
 800c304:	f7fb fb7f 	bl	8007a06 <Clamp_float>
  Process_Gain = Value;
 800c308:	4b03      	ldr	r3, [pc, #12]	@ (800c318 <Process_SetGain+0x1c>)
 800c30a:	6018      	str	r0, [r3, #0]
  SPDIFRX_TransferGain = Value;
 800c30c:	4b03      	ldr	r3, [pc, #12]	@ (800c31c <Process_SetGain+0x20>)
 800c30e:	6018      	str	r0, [r3, #0]
  PageChanged = 1;
 800c310:	4b03      	ldr	r3, [pc, #12]	@ (800c320 <Process_SetGain+0x24>)
 800c312:	2201      	movs	r2, #1
 800c314:	701a      	strb	r2, [r3, #0]
}
 800c316:	bd08      	pop	{r3, pc}
 800c318:	200003f8 	.word	0x200003f8
 800c31c:	20000034 	.word	0x20000034
 800c320:	200172d1 	.word	0x200172d1

0800c324 <ProcessPage_GainControlChanged>:
{
 800c324:	b508      	push	{r3, lr}
  Process_SetGain(Process_Gain);
 800c326:	4b02      	ldr	r3, [pc, #8]	@ (800c330 <ProcessPage_GainControlChanged+0xc>)
 800c328:	6818      	ldr	r0, [r3, #0]
 800c32a:	f7ff ffe7 	bl	800c2fc <Process_SetGain>
}
 800c32e:	bd08      	pop	{r3, pc}
 800c330:	200003f8 	.word	0x200003f8

0800c334 <ProcessPage_DefaultGainControlPressed>:
{
 800c334:	b508      	push	{r3, lr}
  Process_SetGain(Process_Gain_Default);
 800c336:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800c33a:	f7ff ffdf 	bl	800c2fc <Process_SetGain>
}
 800c33e:	bd08      	pop	{r3, pc}

0800c340 <Process_SetMute>:
  Process_UserMuted = Value;
 800c340:	4b02      	ldr	r3, [pc, #8]	@ (800c34c <Process_SetMute+0xc>)
 800c342:	7018      	strb	r0, [r3, #0]
  PageChanged = 1;
 800c344:	4b02      	ldr	r3, [pc, #8]	@ (800c350 <Process_SetMute+0x10>)
 800c346:	2201      	movs	r2, #1
 800c348:	701a      	strb	r2, [r3, #0]
}
 800c34a:	4770      	bx	lr
 800c34c:	200153e4 	.word	0x200153e4
 800c350:	200172d1 	.word	0x200172d1

0800c354 <ProcessPage_MuteButtonPressed>:
{
 800c354:	b508      	push	{r3, lr}
  Process_SetMute(!Process_UserMuted);
 800c356:	4b04      	ldr	r3, [pc, #16]	@ (800c368 <ProcessPage_MuteButtonPressed+0x14>)
 800c358:	7818      	ldrb	r0, [r3, #0]
 800c35a:	fab0 f080 	clz	r0, r0
 800c35e:	0940      	lsrs	r0, r0, #5
 800c360:	f7ff ffee 	bl	800c340 <Process_SetMute>
}
 800c364:	bd08      	pop	{r3, pc}
 800c366:	bf00      	nop
 800c368:	200153e4 	.word	0x200153e4

0800c36c <PA_SetUserMute>:
{
 800c36c:	b508      	push	{r3, lr}
  PA_UserMuted = Value;
 800c36e:	4b04      	ldr	r3, [pc, #16]	@ (800c380 <PA_SetUserMute+0x14>)
 800c370:	7018      	strb	r0, [r3, #0]
  UpdateMuteAndVolume();
 800c372:	f7ff fdd3 	bl	800bf1c <UpdateMuteAndVolume>
  PageChanged = 1;
 800c376:	4b03      	ldr	r3, [pc, #12]	@ (800c384 <PA_SetUserMute+0x18>)
 800c378:	2201      	movs	r2, #1
 800c37a:	701a      	strb	r2, [r3, #0]
}
 800c37c:	bd08      	pop	{r3, pc}
 800c37e:	bf00      	nop
 800c380:	200153dc 	.word	0x200153dc
 800c384:	200172d1 	.word	0x200172d1

0800c388 <PA_SetVolume>:
{
 800c388:	b510      	push	{r4, lr}
  Value = Clamp_float(Value, PA_MasterVolume_dB_Min, PA_MasterVolume_dB_Max);
 800c38a:	4a09      	ldr	r2, [pc, #36]	@ (800c3b0 <PA_SetVolume+0x28>)
 800c38c:	4909      	ldr	r1, [pc, #36]	@ (800c3b4 <PA_SetVolume+0x2c>)
 800c38e:	f7fb fb3a 	bl	8007a06 <Clamp_float>
 800c392:	4604      	mov	r4, r0
  Process_SetMute(0);
 800c394:	2000      	movs	r0, #0
 800c396:	f7ff ffd3 	bl	800c340 <Process_SetMute>
  PA_UserMuted = 0;
 800c39a:	4b07      	ldr	r3, [pc, #28]	@ (800c3b8 <PA_SetVolume+0x30>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	701a      	strb	r2, [r3, #0]
  PA_MasterVolume_dB = Value;
 800c3a0:	4b06      	ldr	r3, [pc, #24]	@ (800c3bc <PA_SetVolume+0x34>)
 800c3a2:	601c      	str	r4, [r3, #0]
  UpdateMuteAndVolume();
 800c3a4:	f7ff fdba 	bl	800bf1c <UpdateMuteAndVolume>
  PageChanged = 1;
 800c3a8:	4b05      	ldr	r3, [pc, #20]	@ (800c3c0 <PA_SetVolume+0x38>)
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	701a      	strb	r2, [r3, #0]
}
 800c3ae:	bd10      	pop	{r4, pc}
 800c3b0:	41a00000 	.word	0x41a00000
 800c3b4:	c2a00000 	.word	0xc2a00000
 800c3b8:	200153dc 	.word	0x200153dc
 800c3bc:	200153e0 	.word	0x200153e0
 800c3c0:	200172d1 	.word	0x200172d1

0800c3c4 <PowerAmplifierPage_VolumeControlChanged>:
{
 800c3c4:	b508      	push	{r3, lr}
  PA_SetVolume(PA_MasterVolume_dB);
 800c3c6:	4b02      	ldr	r3, [pc, #8]	@ (800c3d0 <PowerAmplifierPage_VolumeControlChanged+0xc>)
 800c3c8:	6818      	ldr	r0, [r3, #0]
 800c3ca:	f7ff ffdd 	bl	800c388 <PA_SetVolume>
}
 800c3ce:	bd08      	pop	{r3, pc}
 800c3d0:	200153e0 	.word	0x200153e0

0800c3d4 <PowerAmplifierPage_DefaultVolumeButtonPressed>:
{
 800c3d4:	b508      	push	{r3, lr}
  PA_MasterVolume_dB = PA_MasterVolume_dB_Default;
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	4b02      	ldr	r3, [pc, #8]	@ (800c3e4 <PowerAmplifierPage_DefaultVolumeButtonPressed+0x10>)
 800c3da:	6018      	str	r0, [r3, #0]
  PA_SetVolume(PA_MasterVolume_dB);
 800c3dc:	f7ff ffd4 	bl	800c388 <PA_SetVolume>
}
 800c3e0:	bd08      	pop	{r3, pc}
 800c3e2:	bf00      	nop
 800c3e4:	200153e0 	.word	0x200153e0

0800c3e8 <PowerAmplifierPage_MuteButtonPressed>:
{
 800c3e8:	b508      	push	{r3, lr}
  if (!PA_UserMuted)
 800c3ea:	4b06      	ldr	r3, [pc, #24]	@ (800c404 <PowerAmplifierPage_MuteButtonPressed+0x1c>)
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	b91b      	cbnz	r3, 800c3f8 <PowerAmplifierPage_MuteButtonPressed+0x10>
    PA_SetUserMute(1);
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	f7ff ffbb 	bl	800c36c <PA_SetUserMute>
}
 800c3f6:	bd08      	pop	{r3, pc}
    PA_SetVolume(PA_MasterVolume_dB);
 800c3f8:	4b03      	ldr	r3, [pc, #12]	@ (800c408 <PowerAmplifierPage_MuteButtonPressed+0x20>)
 800c3fa:	6818      	ldr	r0, [r3, #0]
 800c3fc:	f7ff ffc4 	bl	800c388 <PA_SetVolume>
}
 800c400:	e7f9      	b.n	800c3f6 <PowerAmplifierPage_MuteButtonPressed+0xe>
 800c402:	bf00      	nop
 800c404:	200153dc 	.word	0x200153dc
 800c408:	200153e0 	.word	0x200153e0

0800c40c <BluetoothOut_SetOffOn>:
{
 800c40c:	b508      	push	{r3, lr}
  if (Value != BluetoothOut_On)
 800c40e:	4b07      	ldr	r3, [pc, #28]	@ (800c42c <BluetoothOut_SetOffOn+0x20>)
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	4283      	cmp	r3, r0
 800c414:	d100      	bne.n	800c418 <BluetoothOut_SetOffOn+0xc>
}
 800c416:	bd08      	pop	{r3, pc}
    BluetoothOut_On = Value;
 800c418:	4b04      	ldr	r3, [pc, #16]	@ (800c42c <BluetoothOut_SetOffOn+0x20>)
 800c41a:	7018      	strb	r0, [r3, #0]
    ESP32_A_Enable(Value);
 800c41c:	f7fd fde2 	bl	8009fe4 <ESP32_A_Enable>
    BluetoothOutChanged = 1;
 800c420:	2301      	movs	r3, #1
 800c422:	4a03      	ldr	r2, [pc, #12]	@ (800c430 <BluetoothOut_SetOffOn+0x24>)
 800c424:	7013      	strb	r3, [r2, #0]
    PageChanged = 1;
 800c426:	4a03      	ldr	r2, [pc, #12]	@ (800c434 <BluetoothOut_SetOffOn+0x28>)
 800c428:	7013      	strb	r3, [r2, #0]
}
 800c42a:	e7f4      	b.n	800c416 <BluetoothOut_SetOffOn+0xa>
 800c42c:	200153c5 	.word	0x200153c5
 800c430:	200172d0 	.word	0x200172d0
 800c434:	200172d1 	.word	0x200172d1

0800c438 <BluetoothOutPage_OffButtonPressed>:
{
 800c438:	b508      	push	{r3, lr}
  BluetoothOut_SetOffOn(0);
 800c43a:	2000      	movs	r0, #0
 800c43c:	f7ff ffe6 	bl	800c40c <BluetoothOut_SetOffOn>
}
 800c440:	bd08      	pop	{r3, pc}

0800c442 <BluetoothOutPage_OnButtonPressed>:
{
 800c442:	b508      	push	{r3, lr}
  BluetoothOut_SetOffOn(1);
 800c444:	2001      	movs	r0, #1
 800c446:	f7ff ffe1 	bl	800c40c <BluetoothOut_SetOffOn>
}
 800c44a:	bd08      	pop	{r3, pc}

0800c44c <WiFi_SetOffOn>:
{
 800c44c:	b508      	push	{r3, lr}
  if (Value != WiFi_On)
 800c44e:	4b06      	ldr	r3, [pc, #24]	@ (800c468 <WiFi_SetOffOn+0x1c>)
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	4283      	cmp	r3, r0
 800c454:	d100      	bne.n	800c458 <WiFi_SetOffOn+0xc>
}
 800c456:	bd08      	pop	{r3, pc}
    WiFi_On = Value;
 800c458:	4b03      	ldr	r3, [pc, #12]	@ (800c468 <WiFi_SetOffOn+0x1c>)
 800c45a:	7018      	strb	r0, [r3, #0]
    ESP32_B_Enable(Value);
 800c45c:	f7fd fdcc 	bl	8009ff8 <ESP32_B_Enable>
    PageChanged = 1;
 800c460:	4b02      	ldr	r3, [pc, #8]	@ (800c46c <WiFi_SetOffOn+0x20>)
 800c462:	2201      	movs	r2, #1
 800c464:	701a      	strb	r2, [r3, #0]
}
 800c466:	e7f6      	b.n	800c456 <WiFi_SetOffOn+0xa>
 800c468:	200153c3 	.word	0x200153c3
 800c46c:	200172d1 	.word	0x200172d1

0800c470 <WiFiPage_OffButtonPressed>:
{
 800c470:	b508      	push	{r3, lr}
  WiFi_SetOffOn(0);
 800c472:	2000      	movs	r0, #0
 800c474:	f7ff ffea 	bl	800c44c <WiFi_SetOffOn>
}
 800c478:	bd08      	pop	{r3, pc}

0800c47a <WiFiPage_OnButtonPressed>:
{
 800c47a:	b508      	push	{r3, lr}
  WiFi_SetOffOn(1);
 800c47c:	2001      	movs	r0, #1
 800c47e:	f7ff ffe5 	bl	800c44c <WiFi_SetOffOn>
}
 800c482:	bd08      	pop	{r3, pc}

0800c484 <SetUserMute>:
{
 800c484:	b510      	push	{r4, lr}
 800c486:	4604      	mov	r4, r0
  PA_SetUserMute(Value);
 800c488:	f7ff ff70 	bl	800c36c <PA_SetUserMute>
  Process_SetMute(Value);
 800c48c:	4620      	mov	r0, r4
 800c48e:	f7ff ff57 	bl	800c340 <Process_SetMute>
  PageChanged = 1;
 800c492:	4b02      	ldr	r3, [pc, #8]	@ (800c49c <SetUserMute+0x18>)
 800c494:	2201      	movs	r2, #1
 800c496:	701a      	strb	r2, [r3, #0]
}
 800c498:	bd10      	pop	{r4, pc}
 800c49a:	bf00      	nop
 800c49c:	200172d1 	.word	0x200172d1

0800c4a0 <DrawRectAroundControl>:
{
 800c4a0:	b510      	push	{r4, lr}
 800c4a2:	b086      	sub	sp, #24
  Rect = pControl->Rect;
 800c4a4:	3004      	adds	r0, #4
 800c4a6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800c4a8:	ac06      	add	r4, sp, #24
 800c4aa:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  Rect.Left -= 2;
 800c4ae:	3802      	subs	r0, #2
 800c4b0:	9002      	str	r0, [sp, #8]
  Rect.Top -= 2;
 800c4b2:	3902      	subs	r1, #2
 800c4b4:	9103      	str	r1, [sp, #12]
  Rect.Width += 4;
 800c4b6:	3204      	adds	r2, #4
 800c4b8:	9204      	str	r2, [sp, #16]
  Rect.Height += 4;
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	9305      	str	r3, [sp, #20]
  ILI9341_DrawRectangle(Rect.Left, Rect.Top, Rect. Width, Rect.Height, ILI9341_COLOR_WHITE);
 800c4be:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800c4c2:	9400      	str	r4, [sp, #0]
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	b292      	uxth	r2, r2
 800c4c8:	b289      	uxth	r1, r1
 800c4ca:	b280      	uxth	r0, r0
 800c4cc:	f7fb ff5e 	bl	800838c <ILI9341_DrawRectangle>
}
 800c4d0:	b006      	add	sp, #24
 800c4d2:	bd10      	pop	{r4, pc}

0800c4d4 <InputPage_InputButtonCustomDraw>:
{
 800c4d4:	b508      	push	{r3, lr}
  if (pControl == pInputPage_InputButton_Humax)
 800c4d6:	4b25      	ldr	r3, [pc, #148]	@ (800c56c <InputPage_InputButtonCustomDraw+0x98>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4283      	cmp	r3, r0
 800c4dc:	d020      	beq.n	800c520 <InputPage_InputButtonCustomDraw+0x4c>
  else if(pControl == pInputPage_InputButton_DVD_HDD)
 800c4de:	4b24      	ldr	r3, [pc, #144]	@ (800c570 <InputPage_InputButtonCustomDraw+0x9c>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4283      	cmp	r3, r0
 800c4e4:	d023      	beq.n	800c52e <InputPage_InputButtonCustomDraw+0x5a>
  else if(pControl == pInputPage_InputButton_GCA)
 800c4e6:	4b23      	ldr	r3, [pc, #140]	@ (800c574 <InputPage_InputButtonCustomDraw+0xa0>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4283      	cmp	r3, r0
 800c4ec:	d024      	beq.n	800c538 <InputPage_InputButtonCustomDraw+0x64>
  else if(pControl == pInputPage_InputButton_Computer)
 800c4ee:	4b22      	ldr	r3, [pc, #136]	@ (800c578 <InputPage_InputButtonCustomDraw+0xa4>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4283      	cmp	r3, r0
 800c4f4:	d025      	beq.n	800c542 <InputPage_InputButtonCustomDraw+0x6e>
  else if(pControl == pInputPage_InputButton_DAB)
 800c4f6:	4b21      	ldr	r3, [pc, #132]	@ (800c57c <InputPage_InputButtonCustomDraw+0xa8>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4283      	cmp	r3, r0
 800c4fc:	d026      	beq.n	800c54c <InputPage_InputButtonCustomDraw+0x78>
  else if(pControl == pInputPage_InputButton_Si468x_FM)
 800c4fe:	4b20      	ldr	r3, [pc, #128]	@ (800c580 <InputPage_InputButtonCustomDraw+0xac>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4283      	cmp	r3, r0
 800c504:	d027      	beq.n	800c556 <InputPage_InputButtonCustomDraw+0x82>
  else if(pControl == pInputPage_InputButton_AR1010_FM)
 800c506:	4b1f      	ldr	r3, [pc, #124]	@ (800c584 <InputPage_InputButtonCustomDraw+0xb0>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4283      	cmp	r3, r0
 800c50c:	d028      	beq.n	800c560 <InputPage_InputButtonCustomDraw+0x8c>
  else if(pControl == pInputPage_InputButton_AuxIn)
 800c50e:	4b1e      	ldr	r3, [pc, #120]	@ (800c588 <InputPage_InputButtonCustomDraw+0xb4>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4283      	cmp	r3, r0
 800c514:	d108      	bne.n	800c528 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icAuxIn)
 800c516:	4b1d      	ldr	r3, [pc, #116]	@ (800c58c <InputPage_InputButtonCustomDraw+0xb8>)
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	2b08      	cmp	r3, #8
 800c51c:	d106      	bne.n	800c52c <InputPage_InputButtonCustomDraw+0x58>
 800c51e:	e003      	b.n	800c528 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icSPDIF0)
 800c520:	4b1a      	ldr	r3, [pc, #104]	@ (800c58c <InputPage_InputButtonCustomDraw+0xb8>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d101      	bne.n	800c52c <InputPage_InputButtonCustomDraw+0x58>
  DrawRectAroundControl(pControl);
 800c528:	f7ff ffba 	bl	800c4a0 <DrawRectAroundControl>
}
 800c52c:	bd08      	pop	{r3, pc}
    if (InputChannel != icSPDIF1)
 800c52e:	4b17      	ldr	r3, [pc, #92]	@ (800c58c <InputPage_InputButtonCustomDraw+0xb8>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d1fa      	bne.n	800c52c <InputPage_InputButtonCustomDraw+0x58>
 800c536:	e7f7      	b.n	800c528 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icSPDIF2)
 800c538:	4b14      	ldr	r3, [pc, #80]	@ (800c58c <InputPage_InputButtonCustomDraw+0xb8>)
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2b03      	cmp	r3, #3
 800c53e:	d1f5      	bne.n	800c52c <InputPage_InputButtonCustomDraw+0x58>
 800c540:	e7f2      	b.n	800c528 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icSPDIF3)
 800c542:	4b12      	ldr	r3, [pc, #72]	@ (800c58c <InputPage_InputButtonCustomDraw+0xb8>)
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	2b04      	cmp	r3, #4
 800c548:	d1f0      	bne.n	800c52c <InputPage_InputButtonCustomDraw+0x58>
 800c54a:	e7ed      	b.n	800c528 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icSi468x_DAB)
 800c54c:	4b0f      	ldr	r3, [pc, #60]	@ (800c58c <InputPage_InputButtonCustomDraw+0xb8>)
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2b05      	cmp	r3, #5
 800c552:	d1eb      	bne.n	800c52c <InputPage_InputButtonCustomDraw+0x58>
 800c554:	e7e8      	b.n	800c528 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icSi468x_FM)
 800c556:	4b0d      	ldr	r3, [pc, #52]	@ (800c58c <InputPage_InputButtonCustomDraw+0xb8>)
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	2b06      	cmp	r3, #6
 800c55c:	d1e6      	bne.n	800c52c <InputPage_InputButtonCustomDraw+0x58>
 800c55e:	e7e3      	b.n	800c528 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icAR1010_FM)
 800c560:	4b0a      	ldr	r3, [pc, #40]	@ (800c58c <InputPage_InputButtonCustomDraw+0xb8>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b07      	cmp	r3, #7
 800c566:	d1e1      	bne.n	800c52c <InputPage_InputButtonCustomDraw+0x58>
 800c568:	e7de      	b.n	800c528 <InputPage_InputButtonCustomDraw+0x54>
 800c56a:	bf00      	nop
 800c56c:	200172a4 	.word	0x200172a4
 800c570:	200172a0 	.word	0x200172a0
 800c574:	2001729c 	.word	0x2001729c
 800c578:	20017298 	.word	0x20017298
 800c57c:	20017294 	.word	0x20017294
 800c580:	20017290 	.word	0x20017290
 800c584:	2001728c 	.word	0x2001728c
 800c588:	20017288 	.word	0x20017288
 800c58c:	20017203 	.word	0x20017203

0800c590 <ProcessPage_MuteButtonCustomDraw>:
{
 800c590:	b508      	push	{r3, lr}
  if (Process_UserMuted)
 800c592:	4b03      	ldr	r3, [pc, #12]	@ (800c5a0 <ProcessPage_MuteButtonCustomDraw+0x10>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	b903      	cbnz	r3, 800c59a <ProcessPage_MuteButtonCustomDraw+0xa>
}
 800c598:	bd08      	pop	{r3, pc}
    DrawRectAroundControl(pControl);
 800c59a:	f7ff ff81 	bl	800c4a0 <DrawRectAroundControl>
}
 800c59e:	e7fb      	b.n	800c598 <ProcessPage_MuteButtonCustomDraw+0x8>
 800c5a0:	200153e4 	.word	0x200153e4

0800c5a4 <PowerAmplifierPage_MuteButtonCustomDraw>:
{
 800c5a4:	b508      	push	{r3, lr}
  if (PA_UserMuted)
 800c5a6:	4b03      	ldr	r3, [pc, #12]	@ (800c5b4 <PowerAmplifierPage_MuteButtonCustomDraw+0x10>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	b903      	cbnz	r3, 800c5ae <PowerAmplifierPage_MuteButtonCustomDraw+0xa>
}
 800c5ac:	bd08      	pop	{r3, pc}
    DrawRectAroundControl(pControl);
 800c5ae:	f7ff ff77 	bl	800c4a0 <DrawRectAroundControl>
}
 800c5b2:	e7fb      	b.n	800c5ac <PowerAmplifierPage_MuteButtonCustomDraw+0x8>
 800c5b4:	200153dc 	.word	0x200153dc

0800c5b8 <BluetoothOutPage_OffOnButtonCustomDraw>:
{
 800c5b8:	b508      	push	{r3, lr}
  if (pControl == pBluetoothOutPage_OffButton)
 800c5ba:	4b0a      	ldr	r3, [pc, #40]	@ (800c5e4 <BluetoothOutPage_OffOnButtonCustomDraw+0x2c>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4283      	cmp	r3, r0
 800c5c0:	d006      	beq.n	800c5d0 <BluetoothOutPage_OffOnButtonCustomDraw+0x18>
  else if(pControl == pBluetoothOutPage_OnButton)
 800c5c2:	4b09      	ldr	r3, [pc, #36]	@ (800c5e8 <BluetoothOutPage_OffOnButtonCustomDraw+0x30>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4283      	cmp	r3, r0
 800c5c8:	d007      	beq.n	800c5da <BluetoothOutPage_OffOnButtonCustomDraw+0x22>
  DrawRectAroundControl(pControl);
 800c5ca:	f7ff ff69 	bl	800c4a0 <DrawRectAroundControl>
}
 800c5ce:	bd08      	pop	{r3, pc}
    if (BluetoothOut_On)
 800c5d0:	4b06      	ldr	r3, [pc, #24]	@ (800c5ec <BluetoothOutPage_OffOnButtonCustomDraw+0x34>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d0f8      	beq.n	800c5ca <BluetoothOutPage_OffOnButtonCustomDraw+0x12>
 800c5d8:	e7f9      	b.n	800c5ce <BluetoothOutPage_OffOnButtonCustomDraw+0x16>
    if (!BluetoothOut_On)
 800c5da:	4b04      	ldr	r3, [pc, #16]	@ (800c5ec <BluetoothOutPage_OffOnButtonCustomDraw+0x34>)
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1f3      	bne.n	800c5ca <BluetoothOutPage_OffOnButtonCustomDraw+0x12>
 800c5e2:	e7f4      	b.n	800c5ce <BluetoothOutPage_OffOnButtonCustomDraw+0x16>
 800c5e4:	20017248 	.word	0x20017248
 800c5e8:	20017244 	.word	0x20017244
 800c5ec:	200153c5 	.word	0x200153c5

0800c5f0 <WiFiPage_OffOnButtonCustomDraw>:
{
 800c5f0:	b508      	push	{r3, lr}
  if (pControl == pWiFiPage_OffButton)
 800c5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c61c <WiFiPage_OffOnButtonCustomDraw+0x2c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4283      	cmp	r3, r0
 800c5f8:	d006      	beq.n	800c608 <WiFiPage_OffOnButtonCustomDraw+0x18>
  else if(pControl == pWiFiPage_OnButton)
 800c5fa:	4b09      	ldr	r3, [pc, #36]	@ (800c620 <WiFiPage_OffOnButtonCustomDraw+0x30>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4283      	cmp	r3, r0
 800c600:	d007      	beq.n	800c612 <WiFiPage_OffOnButtonCustomDraw+0x22>
  DrawRectAroundControl(pControl);
 800c602:	f7ff ff4d 	bl	800c4a0 <DrawRectAroundControl>
}
 800c606:	bd08      	pop	{r3, pc}
    if (WiFi_On)
 800c608:	4b06      	ldr	r3, [pc, #24]	@ (800c624 <WiFiPage_OffOnButtonCustomDraw+0x34>)
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0f8      	beq.n	800c602 <WiFiPage_OffOnButtonCustomDraw+0x12>
 800c610:	e7f9      	b.n	800c606 <WiFiPage_OffOnButtonCustomDraw+0x16>
    if (!WiFi_On)
 800c612:	4b04      	ldr	r3, [pc, #16]	@ (800c624 <WiFiPage_OffOnButtonCustomDraw+0x34>)
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1f3      	bne.n	800c602 <WiFiPage_OffOnButtonCustomDraw+0x12>
 800c61a:	e7f4      	b.n	800c606 <WiFiPage_OffOnButtonCustomDraw+0x16>
 800c61c:	20017234 	.word	0x20017234
 800c620:	20017230 	.word	0x20017230
 800c624:	200153c3 	.word	0x200153c3

0800c628 <CreateHomePage>:
{
 800c628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c62c:	b0ab      	sub	sp, #172	@ 0xac
  UI_pHomePage = JSB_UI_CreatePage();
 800c62e:	f7fc fe27 	bl	8009280 <JSB_UI_CreatePage>
 800c632:	4e8a      	ldr	r6, [pc, #552]	@ (800c85c <CreateHomePage+0x234>)
 800c634:	6030      	str	r0, [r6, #0]
  pHomePage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, 0, 240, 32), "Phil's Uber Audio System", 0, Page_TitleColour, NULL, 1, &HomePage_TitleBarPressed, NULL, NULL);
 800c636:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800c63a:	2720      	movs	r7, #32
 800c63c:	9700      	str	r7, [sp, #0]
 800c63e:	23f0      	movs	r3, #240	@ 0xf0
 800c640:	2200      	movs	r2, #0
 800c642:	4611      	mov	r1, r2
 800c644:	4640      	mov	r0, r8
 800c646:	f7fc fe21 	bl	800928c <JSB_UI_Rect>
 800c64a:	2400      	movs	r4, #0
 800c64c:	9408      	str	r4, [sp, #32]
 800c64e:	9407      	str	r4, [sp, #28]
 800c650:	4b83      	ldr	r3, [pc, #524]	@ (800c860 <CreateHomePage+0x238>)
 800c652:	9306      	str	r3, [sp, #24]
 800c654:	2501      	movs	r5, #1
 800c656:	9505      	str	r5, [sp, #20]
 800c658:	9404      	str	r4, [sp, #16]
 800c65a:	f242 1304 	movw	r3, #8452	@ 0x2104
 800c65e:	9303      	str	r3, [sp, #12]
 800c660:	9402      	str	r4, [sp, #8]
 800c662:	4b80      	ldr	r3, [pc, #512]	@ (800c864 <CreateHomePage+0x23c>)
 800c664:	9301      	str	r3, [sp, #4]
 800c666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800c66e:	4628      	mov	r0, r5
 800c670:	f7fc fe1f 	bl	80092b2 <JSB_UI_CreateControl>
 800c674:	4601      	mov	r1, r0
 800c676:	4b7c      	ldr	r3, [pc, #496]	@ (800c868 <CreateHomePage+0x240>)
 800c678:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_TitleButton);
 800c67a:	6830      	ldr	r0, [r6, #0]
 800c67c:	f7fc ff61 	bl	8009542 <JSB_UI_AddControlToPage>
  pHomePage_InputButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Input", 0, Page_ButtonColor, NULL, 1, &HomePage_InputButtonPressed, NULL, NULL);
 800c680:	f10d 0938 	add.w	r9, sp, #56	@ 0x38
 800c684:	9700      	str	r7, [sp, #0]
 800c686:	23a0      	movs	r3, #160	@ 0xa0
 800c688:	223c      	movs	r2, #60	@ 0x3c
 800c68a:	2178      	movs	r1, #120	@ 0x78
 800c68c:	4648      	mov	r0, r9
 800c68e:	f7fc fe03 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c692:	9408      	str	r4, [sp, #32]
 800c694:	9407      	str	r4, [sp, #28]
 800c696:	4b75      	ldr	r3, [pc, #468]	@ (800c86c <CreateHomePage+0x244>)
 800c698:	9306      	str	r3, [sp, #24]
 800c69a:	9505      	str	r5, [sp, #20]
 800c69c:	9404      	str	r4, [sp, #16]
 800c69e:	f647 080f 	movw	r8, #30735	@ 0x780f
 800c6a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6a6:	9402      	str	r4, [sp, #8]
 800c6a8:	4b71      	ldr	r3, [pc, #452]	@ (800c870 <CreateHomePage+0x248>)
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	f7fc fdfc 	bl	80092b2 <JSB_UI_CreateControl>
 800c6ba:	4601      	mov	r1, r0
 800c6bc:	4b6d      	ldr	r3, [pc, #436]	@ (800c874 <CreateHomePage+0x24c>)
 800c6be:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_InputButton);
 800c6c0:	6830      	ldr	r0, [r6, #0]
 800c6c2:	f7fc ff3e 	bl	8009542 <JSB_UI_AddControlToPage>
  pHomePage_ProcessButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Process", 0, Page_ButtonColor, NULL, 1, &HomePage_ProcessButtonPressed, NULL, NULL);
 800c6c6:	f10d 0948 	add.w	r9, sp, #72	@ 0x48
 800c6ca:	9700      	str	r7, [sp, #0]
 800c6cc:	23a0      	movs	r3, #160	@ 0xa0
 800c6ce:	2264      	movs	r2, #100	@ 0x64
 800c6d0:	2178      	movs	r1, #120	@ 0x78
 800c6d2:	4648      	mov	r0, r9
 800c6d4:	f7fc fde0 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c6d8:	9408      	str	r4, [sp, #32]
 800c6da:	9407      	str	r4, [sp, #28]
 800c6dc:	4b66      	ldr	r3, [pc, #408]	@ (800c878 <CreateHomePage+0x250>)
 800c6de:	9306      	str	r3, [sp, #24]
 800c6e0:	9505      	str	r5, [sp, #20]
 800c6e2:	9404      	str	r4, [sp, #16]
 800c6e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6e8:	9402      	str	r4, [sp, #8]
 800c6ea:	4b64      	ldr	r3, [pc, #400]	@ (800c87c <CreateHomePage+0x254>)
 800c6ec:	9301      	str	r3, [sp, #4]
 800c6ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f7fc fddb 	bl	80092b2 <JSB_UI_CreateControl>
 800c6fc:	4601      	mov	r1, r0
 800c6fe:	4b60      	ldr	r3, [pc, #384]	@ (800c880 <CreateHomePage+0x258>)
 800c700:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_ProcessButton);
 800c702:	6830      	ldr	r0, [r6, #0]
 800c704:	f7fc ff1d 	bl	8009542 <JSB_UI_AddControlToPage>
  pHomePage_PowerAmpButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Power amp", 0, Page_ButtonColor, NULL, 1, &HomePage_PowerAmpButtonPressed, NULL, NULL);
 800c708:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 800c70c:	9700      	str	r7, [sp, #0]
 800c70e:	23a0      	movs	r3, #160	@ 0xa0
 800c710:	228c      	movs	r2, #140	@ 0x8c
 800c712:	2178      	movs	r1, #120	@ 0x78
 800c714:	4648      	mov	r0, r9
 800c716:	f7fc fdbf 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c71a:	9408      	str	r4, [sp, #32]
 800c71c:	9407      	str	r4, [sp, #28]
 800c71e:	4b59      	ldr	r3, [pc, #356]	@ (800c884 <CreateHomePage+0x25c>)
 800c720:	9306      	str	r3, [sp, #24]
 800c722:	9505      	str	r5, [sp, #20]
 800c724:	9404      	str	r4, [sp, #16]
 800c726:	f8cd 800c 	str.w	r8, [sp, #12]
 800c72a:	9402      	str	r4, [sp, #8]
 800c72c:	4b56      	ldr	r3, [pc, #344]	@ (800c888 <CreateHomePage+0x260>)
 800c72e:	9301      	str	r3, [sp, #4]
 800c730:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800c738:	4628      	mov	r0, r5
 800c73a:	f7fc fdba 	bl	80092b2 <JSB_UI_CreateControl>
 800c73e:	4601      	mov	r1, r0
 800c740:	4b52      	ldr	r3, [pc, #328]	@ (800c88c <CreateHomePage+0x264>)
 800c742:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_PowerAmpButton);
 800c744:	6830      	ldr	r0, [r6, #0]
 800c746:	f7fc fefc 	bl	8009542 <JSB_UI_AddControlToPage>
  pHomePage_BluetoothOutButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Bluetooth out", 0, Page_ButtonColor, NULL, 1, &HomePage_BluetoothOutButtonPressed, NULL, NULL);
 800c74a:	f10d 0968 	add.w	r9, sp, #104	@ 0x68
 800c74e:	9700      	str	r7, [sp, #0]
 800c750:	23a0      	movs	r3, #160	@ 0xa0
 800c752:	22b4      	movs	r2, #180	@ 0xb4
 800c754:	2178      	movs	r1, #120	@ 0x78
 800c756:	4648      	mov	r0, r9
 800c758:	f7fc fd9e 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c75c:	9408      	str	r4, [sp, #32]
 800c75e:	9407      	str	r4, [sp, #28]
 800c760:	4b4b      	ldr	r3, [pc, #300]	@ (800c890 <CreateHomePage+0x268>)
 800c762:	9306      	str	r3, [sp, #24]
 800c764:	9505      	str	r5, [sp, #20]
 800c766:	9404      	str	r4, [sp, #16]
 800c768:	f8cd 800c 	str.w	r8, [sp, #12]
 800c76c:	9402      	str	r4, [sp, #8]
 800c76e:	4b49      	ldr	r3, [pc, #292]	@ (800c894 <CreateHomePage+0x26c>)
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800c77a:	4628      	mov	r0, r5
 800c77c:	f7fc fd99 	bl	80092b2 <JSB_UI_CreateControl>
 800c780:	4601      	mov	r1, r0
 800c782:	4b45      	ldr	r3, [pc, #276]	@ (800c898 <CreateHomePage+0x270>)
 800c784:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_BluetoothOutButton);
 800c786:	6830      	ldr	r0, [r6, #0]
 800c788:	f7fc fedb 	bl	8009542 <JSB_UI_AddControlToPage>
  pHomePage_WiFiButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "WiFi", 0, Page_ButtonColor, NULL, 1, &HomePage_WiFiButtonPressed, NULL, NULL);
 800c78c:	f10d 0978 	add.w	r9, sp, #120	@ 0x78
 800c790:	9700      	str	r7, [sp, #0]
 800c792:	23a0      	movs	r3, #160	@ 0xa0
 800c794:	22dc      	movs	r2, #220	@ 0xdc
 800c796:	2178      	movs	r1, #120	@ 0x78
 800c798:	4648      	mov	r0, r9
 800c79a:	f7fc fd7d 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c79e:	9408      	str	r4, [sp, #32]
 800c7a0:	9407      	str	r4, [sp, #28]
 800c7a2:	4b3e      	ldr	r3, [pc, #248]	@ (800c89c <CreateHomePage+0x274>)
 800c7a4:	9306      	str	r3, [sp, #24]
 800c7a6:	9505      	str	r5, [sp, #20]
 800c7a8:	9404      	str	r4, [sp, #16]
 800c7aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7ae:	9402      	str	r4, [sp, #8]
 800c7b0:	4b3b      	ldr	r3, [pc, #236]	@ (800c8a0 <CreateHomePage+0x278>)
 800c7b2:	9301      	str	r3, [sp, #4]
 800c7b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7b6:	9300      	str	r3, [sp, #0]
 800c7b8:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f7fc fd78 	bl	80092b2 <JSB_UI_CreateControl>
 800c7c2:	4601      	mov	r1, r0
 800c7c4:	4b37      	ldr	r3, [pc, #220]	@ (800c8a4 <CreateHomePage+0x27c>)
 800c7c6:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_WiFiButton);
 800c7c8:	6830      	ldr	r0, [r6, #0]
 800c7ca:	f7fc feba 	bl	8009542 <JSB_UI_AddControlToPage>
  pHomePage_InfoButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Info", 0, Page_ButtonColor, NULL, 1, &HomePage_InfoButtonPressed, NULL, NULL);
 800c7ce:	f10d 0988 	add.w	r9, sp, #136	@ 0x88
 800c7d2:	9700      	str	r7, [sp, #0]
 800c7d4:	23a0      	movs	r3, #160	@ 0xa0
 800c7d6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c7da:	2178      	movs	r1, #120	@ 0x78
 800c7dc:	4648      	mov	r0, r9
 800c7de:	f7fc fd5b 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c7e2:	9408      	str	r4, [sp, #32]
 800c7e4:	9407      	str	r4, [sp, #28]
 800c7e6:	4b30      	ldr	r3, [pc, #192]	@ (800c8a8 <CreateHomePage+0x280>)
 800c7e8:	9306      	str	r3, [sp, #24]
 800c7ea:	9505      	str	r5, [sp, #20]
 800c7ec:	9404      	str	r4, [sp, #16]
 800c7ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7f2:	9402      	str	r4, [sp, #8]
 800c7f4:	4b2d      	ldr	r3, [pc, #180]	@ (800c8ac <CreateHomePage+0x284>)
 800c7f6:	9301      	str	r3, [sp, #4]
 800c7f8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800c800:	4628      	mov	r0, r5
 800c802:	f7fc fd56 	bl	80092b2 <JSB_UI_CreateControl>
 800c806:	4601      	mov	r1, r0
 800c808:	4b29      	ldr	r3, [pc, #164]	@ (800c8b0 <CreateHomePage+0x288>)
 800c80a:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_InfoButton);
 800c80c:	6830      	ldr	r0, [r6, #0]
 800c80e:	f7fc fe98 	bl	8009542 <JSB_UI_AddControlToPage>
  pHomePage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, 304, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, NULL, NULL, NULL);
 800c812:	f10d 0998 	add.w	r9, sp, #152	@ 0x98
 800c816:	9700      	str	r7, [sp, #0]
 800c818:	2364      	movs	r3, #100	@ 0x64
 800c81a:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800c81e:	2178      	movs	r1, #120	@ 0x78
 800c820:	4648      	mov	r0, r9
 800c822:	f7fc fd39 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c826:	9408      	str	r4, [sp, #32]
 800c828:	9407      	str	r4, [sp, #28]
 800c82a:	9406      	str	r4, [sp, #24]
 800c82c:	9505      	str	r5, [sp, #20]
 800c82e:	9404      	str	r4, [sp, #16]
 800c830:	f8cd 800c 	str.w	r8, [sp, #12]
 800c834:	9402      	str	r4, [sp, #8]
 800c836:	4b1f      	ldr	r3, [pc, #124]	@ (800c8b4 <CreateHomePage+0x28c>)
 800c838:	9301      	str	r3, [sp, #4]
 800c83a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800c842:	4628      	mov	r0, r5
 800c844:	f7fc fd35 	bl	80092b2 <JSB_UI_CreateControl>
 800c848:	4601      	mov	r1, r0
 800c84a:	4b1b      	ldr	r3, [pc, #108]	@ (800c8b8 <CreateHomePage+0x290>)
 800c84c:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_HomeButton);
 800c84e:	6830      	ldr	r0, [r6, #0]
 800c850:	f7fc fe77 	bl	8009542 <JSB_UI_AddControlToPage>
}
 800c854:	b02b      	add	sp, #172	@ 0xac
 800c856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c85a:	bf00      	nop
 800c85c:	200172cc 	.word	0x200172cc
 800c860:	0800c2ed 	.word	0x0800c2ed
 800c864:	08012be8 	.word	0x08012be8
 800c868:	200172c8 	.word	0x200172c8
 800c86c:	0800c1a9 	.word	0x0800c1a9
 800c870:	08012c04 	.word	0x08012c04
 800c874:	200172c4 	.word	0x200172c4
 800c878:	0800c1bd 	.word	0x0800c1bd
 800c87c:	08012c0c 	.word	0x08012c0c
 800c880:	200172c0 	.word	0x200172c0
 800c884:	0800c1d1 	.word	0x0800c1d1
 800c888:	08012c14 	.word	0x08012c14
 800c88c:	200172bc 	.word	0x200172bc
 800c890:	0800c1e5 	.word	0x0800c1e5
 800c894:	08012c20 	.word	0x08012c20
 800c898:	200172b8 	.word	0x200172b8
 800c89c:	0800c1f9 	.word	0x0800c1f9
 800c8a0:	08012c30 	.word	0x08012c30
 800c8a4:	200172b4 	.word	0x200172b4
 800c8a8:	0800c20d 	.word	0x0800c20d
 800c8ac:	08012c38 	.word	0x08012c38
 800c8b0:	200172b0 	.word	0x200172b0
 800c8b4:	08012c40 	.word	0x08012c40
 800c8b8:	200172ac 	.word	0x200172ac

0800c8bc <CreateInputPage>:
{
 800c8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c0:	b0af      	sub	sp, #188	@ 0xbc
  UI_pInputPage = JSB_UI_CreatePage();
 800c8c2:	f7fc fcdd 	bl	8009280 <JSB_UI_CreatePage>
 800c8c6:	4ea1      	ldr	r6, [pc, #644]	@ (800cb4c <CreateInputPage+0x290>)
 800c8c8:	6030      	str	r0, [r6, #0]
  pInputPage_InputButton_Humax = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Humax", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800c8ca:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 800c8ce:	f04f 0820 	mov.w	r8, #32
 800c8d2:	f8cd 8000 	str.w	r8, [sp]
 800c8d6:	23ec      	movs	r3, #236	@ 0xec
 800c8d8:	2212      	movs	r2, #18
 800c8da:	2178      	movs	r1, #120	@ 0x78
 800c8dc:	4658      	mov	r0, fp
 800c8de:	f7fc fcdb 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c8e2:	f8df a2b8 	ldr.w	sl, [pc, #696]	@ 800cb9c <CreateInputPage+0x2e0>
 800c8e6:	f8cd a020 	str.w	sl, [sp, #32]
 800c8ea:	2400      	movs	r4, #0
 800c8ec:	9407      	str	r4, [sp, #28]
 800c8ee:	f8df 92b0 	ldr.w	r9, [pc, #688]	@ 800cba0 <CreateInputPage+0x2e4>
 800c8f2:	f8cd 9018 	str.w	r9, [sp, #24]
 800c8f6:	2501      	movs	r5, #1
 800c8f8:	9505      	str	r5, [sp, #20]
 800c8fa:	9404      	str	r4, [sp, #16]
 800c8fc:	f647 070f 	movw	r7, #30735	@ 0x780f
 800c900:	9703      	str	r7, [sp, #12]
 800c902:	9402      	str	r4, [sp, #8]
 800c904:	4b92      	ldr	r3, [pc, #584]	@ (800cb50 <CreateInputPage+0x294>)
 800c906:	9301      	str	r3, [sp, #4]
 800c908:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800c910:	4628      	mov	r0, r5
 800c912:	f7fc fcce 	bl	80092b2 <JSB_UI_CreateControl>
 800c916:	4601      	mov	r1, r0
 800c918:	4b8e      	ldr	r3, [pc, #568]	@ (800cb54 <CreateInputPage+0x298>)
 800c91a:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_Humax);
 800c91c:	6830      	ldr	r0, [r6, #0]
 800c91e:	f7fc fe10 	bl	8009542 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_DVD_HDD = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "DVD/HDD", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800c922:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 800c926:	f8cd 8000 	str.w	r8, [sp]
 800c92a:	23ec      	movs	r3, #236	@ 0xec
 800c92c:	223a      	movs	r2, #58	@ 0x3a
 800c92e:	2178      	movs	r1, #120	@ 0x78
 800c930:	4658      	mov	r0, fp
 800c932:	f7fc fcb1 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c936:	f8cd a020 	str.w	sl, [sp, #32]
 800c93a:	9407      	str	r4, [sp, #28]
 800c93c:	f8cd 9018 	str.w	r9, [sp, #24]
 800c940:	9505      	str	r5, [sp, #20]
 800c942:	9404      	str	r4, [sp, #16]
 800c944:	9703      	str	r7, [sp, #12]
 800c946:	9402      	str	r4, [sp, #8]
 800c948:	4b83      	ldr	r3, [pc, #524]	@ (800cb58 <CreateInputPage+0x29c>)
 800c94a:	9301      	str	r3, [sp, #4]
 800c94c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800c954:	4628      	mov	r0, r5
 800c956:	f7fc fcac 	bl	80092b2 <JSB_UI_CreateControl>
 800c95a:	4601      	mov	r1, r0
 800c95c:	4b7f      	ldr	r3, [pc, #508]	@ (800cb5c <CreateInputPage+0x2a0>)
 800c95e:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_DVD_HDD);
 800c960:	6830      	ldr	r0, [r6, #0]
 800c962:	f7fc fdee 	bl	8009542 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_GCA = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Google Chromecast Audio", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800c966:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 800c96a:	f8cd 8000 	str.w	r8, [sp]
 800c96e:	23ec      	movs	r3, #236	@ 0xec
 800c970:	2262      	movs	r2, #98	@ 0x62
 800c972:	2178      	movs	r1, #120	@ 0x78
 800c974:	4658      	mov	r0, fp
 800c976:	f7fc fc8f 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c97a:	f8cd a020 	str.w	sl, [sp, #32]
 800c97e:	9407      	str	r4, [sp, #28]
 800c980:	f8cd 9018 	str.w	r9, [sp, #24]
 800c984:	9505      	str	r5, [sp, #20]
 800c986:	9404      	str	r4, [sp, #16]
 800c988:	9703      	str	r7, [sp, #12]
 800c98a:	9402      	str	r4, [sp, #8]
 800c98c:	4b74      	ldr	r3, [pc, #464]	@ (800cb60 <CreateInputPage+0x2a4>)
 800c98e:	9301      	str	r3, [sp, #4]
 800c990:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800c998:	4628      	mov	r0, r5
 800c99a:	f7fc fc8a 	bl	80092b2 <JSB_UI_CreateControl>
 800c99e:	4601      	mov	r1, r0
 800c9a0:	4b70      	ldr	r3, [pc, #448]	@ (800cb64 <CreateInputPage+0x2a8>)
 800c9a2:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_GCA);
 800c9a4:	6830      	ldr	r0, [r6, #0]
 800c9a6:	f7fc fdcc 	bl	8009542 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_Computer = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Computer", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800c9aa:	f10d 0b58 	add.w	fp, sp, #88	@ 0x58
 800c9ae:	f8cd 8000 	str.w	r8, [sp]
 800c9b2:	23ec      	movs	r3, #236	@ 0xec
 800c9b4:	228a      	movs	r2, #138	@ 0x8a
 800c9b6:	2178      	movs	r1, #120	@ 0x78
 800c9b8:	4658      	mov	r0, fp
 800c9ba:	f7fc fc6d 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800c9be:	f8cd a020 	str.w	sl, [sp, #32]
 800c9c2:	9407      	str	r4, [sp, #28]
 800c9c4:	f8cd 9018 	str.w	r9, [sp, #24]
 800c9c8:	9505      	str	r5, [sp, #20]
 800c9ca:	9404      	str	r4, [sp, #16]
 800c9cc:	9703      	str	r7, [sp, #12]
 800c9ce:	9402      	str	r4, [sp, #8]
 800c9d0:	4b65      	ldr	r3, [pc, #404]	@ (800cb68 <CreateInputPage+0x2ac>)
 800c9d2:	9301      	str	r3, [sp, #4]
 800c9d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800c9dc:	4628      	mov	r0, r5
 800c9de:	f7fc fc68 	bl	80092b2 <JSB_UI_CreateControl>
 800c9e2:	4601      	mov	r1, r0
 800c9e4:	4b61      	ldr	r3, [pc, #388]	@ (800cb6c <CreateInputPage+0x2b0>)
 800c9e6:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_Computer);
 800c9e8:	6830      	ldr	r0, [r6, #0]
 800c9ea:	f7fc fdaa 	bl	8009542 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_DAB = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(59, Y, 114, 32), "Si468x DAB", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800c9ee:	f10d 0b68 	add.w	fp, sp, #104	@ 0x68
 800c9f2:	f8cd 8000 	str.w	r8, [sp]
 800c9f6:	2372      	movs	r3, #114	@ 0x72
 800c9f8:	22b2      	movs	r2, #178	@ 0xb2
 800c9fa:	213b      	movs	r1, #59	@ 0x3b
 800c9fc:	4658      	mov	r0, fp
 800c9fe:	f7fc fc4b 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800ca02:	f8cd a020 	str.w	sl, [sp, #32]
 800ca06:	9407      	str	r4, [sp, #28]
 800ca08:	f8cd 9018 	str.w	r9, [sp, #24]
 800ca0c:	9505      	str	r5, [sp, #20]
 800ca0e:	9404      	str	r4, [sp, #16]
 800ca10:	9703      	str	r7, [sp, #12]
 800ca12:	9402      	str	r4, [sp, #8]
 800ca14:	4b56      	ldr	r3, [pc, #344]	@ (800cb70 <CreateInputPage+0x2b4>)
 800ca16:	9301      	str	r3, [sp, #4]
 800ca18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800ca20:	4628      	mov	r0, r5
 800ca22:	f7fc fc46 	bl	80092b2 <JSB_UI_CreateControl>
 800ca26:	4601      	mov	r1, r0
 800ca28:	4b52      	ldr	r3, [pc, #328]	@ (800cb74 <CreateInputPage+0x2b8>)
 800ca2a:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_DAB);
 800ca2c:	6830      	ldr	r0, [r6, #0]
 800ca2e:	f7fc fd88 	bl	8009542 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_Si468x_FM = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(181, Y, 114, 32), "Si468x FM", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800ca32:	f10d 0b78 	add.w	fp, sp, #120	@ 0x78
 800ca36:	f8cd 8000 	str.w	r8, [sp]
 800ca3a:	2372      	movs	r3, #114	@ 0x72
 800ca3c:	22b2      	movs	r2, #178	@ 0xb2
 800ca3e:	21b5      	movs	r1, #181	@ 0xb5
 800ca40:	4658      	mov	r0, fp
 800ca42:	f7fc fc29 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800ca46:	f8cd a020 	str.w	sl, [sp, #32]
 800ca4a:	9407      	str	r4, [sp, #28]
 800ca4c:	f8cd 9018 	str.w	r9, [sp, #24]
 800ca50:	9505      	str	r5, [sp, #20]
 800ca52:	9404      	str	r4, [sp, #16]
 800ca54:	9703      	str	r7, [sp, #12]
 800ca56:	9402      	str	r4, [sp, #8]
 800ca58:	4b47      	ldr	r3, [pc, #284]	@ (800cb78 <CreateInputPage+0x2bc>)
 800ca5a:	9301      	str	r3, [sp, #4]
 800ca5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800ca64:	4628      	mov	r0, r5
 800ca66:	f7fc fc24 	bl	80092b2 <JSB_UI_CreateControl>
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	4b43      	ldr	r3, [pc, #268]	@ (800cb7c <CreateInputPage+0x2c0>)
 800ca6e:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_Si468x_FM);
 800ca70:	6830      	ldr	r0, [r6, #0]
 800ca72:	f7fc fd66 	bl	8009542 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_AR1010_FM = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "AR1010 FM", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800ca76:	f10d 0b88 	add.w	fp, sp, #136	@ 0x88
 800ca7a:	f8cd 8000 	str.w	r8, [sp]
 800ca7e:	23ec      	movs	r3, #236	@ 0xec
 800ca80:	22da      	movs	r2, #218	@ 0xda
 800ca82:	2178      	movs	r1, #120	@ 0x78
 800ca84:	4658      	mov	r0, fp
 800ca86:	f7fc fc07 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800ca8a:	f8cd a020 	str.w	sl, [sp, #32]
 800ca8e:	9407      	str	r4, [sp, #28]
 800ca90:	f8cd 9018 	str.w	r9, [sp, #24]
 800ca94:	9505      	str	r5, [sp, #20]
 800ca96:	9404      	str	r4, [sp, #16]
 800ca98:	9703      	str	r7, [sp, #12]
 800ca9a:	9402      	str	r4, [sp, #8]
 800ca9c:	4b38      	ldr	r3, [pc, #224]	@ (800cb80 <CreateInputPage+0x2c4>)
 800ca9e:	9301      	str	r3, [sp, #4]
 800caa0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800caa8:	4628      	mov	r0, r5
 800caaa:	f7fc fc02 	bl	80092b2 <JSB_UI_CreateControl>
 800caae:	4601      	mov	r1, r0
 800cab0:	4b34      	ldr	r3, [pc, #208]	@ (800cb84 <CreateInputPage+0x2c8>)
 800cab2:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_AR1010_FM);
 800cab4:	6830      	ldr	r0, [r6, #0]
 800cab6:	f7fc fd44 	bl	8009542 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_AuxIn = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Aux in", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800caba:	f10d 0b98 	add.w	fp, sp, #152	@ 0x98
 800cabe:	f8cd 8000 	str.w	r8, [sp]
 800cac2:	23ec      	movs	r3, #236	@ 0xec
 800cac4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800cac8:	2178      	movs	r1, #120	@ 0x78
 800caca:	4658      	mov	r0, fp
 800cacc:	f7fc fbe4 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800cad0:	f8cd a020 	str.w	sl, [sp, #32]
 800cad4:	9407      	str	r4, [sp, #28]
 800cad6:	f8cd 9018 	str.w	r9, [sp, #24]
 800cada:	9505      	str	r5, [sp, #20]
 800cadc:	9404      	str	r4, [sp, #16]
 800cade:	9703      	str	r7, [sp, #12]
 800cae0:	9402      	str	r4, [sp, #8]
 800cae2:	4b29      	ldr	r3, [pc, #164]	@ (800cb88 <CreateInputPage+0x2cc>)
 800cae4:	9301      	str	r3, [sp, #4]
 800cae6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800caee:	4628      	mov	r0, r5
 800caf0:	f7fc fbdf 	bl	80092b2 <JSB_UI_CreateControl>
 800caf4:	4601      	mov	r1, r0
 800caf6:	4b25      	ldr	r3, [pc, #148]	@ (800cb8c <CreateInputPage+0x2d0>)
 800caf8:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_AuxIn);
 800cafa:	6830      	ldr	r0, [r6, #0]
 800cafc:	f7fc fd21 	bl	8009542 <JSB_UI_AddControlToPage>
  pInputPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, 304, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &InputPage_HomeButtonPressed, NULL, NULL);
 800cb00:	f10d 09a8 	add.w	r9, sp, #168	@ 0xa8
 800cb04:	f8cd 8000 	str.w	r8, [sp]
 800cb08:	2364      	movs	r3, #100	@ 0x64
 800cb0a:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800cb0e:	2178      	movs	r1, #120	@ 0x78
 800cb10:	4648      	mov	r0, r9
 800cb12:	f7fc fbc1 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800cb16:	9408      	str	r4, [sp, #32]
 800cb18:	9407      	str	r4, [sp, #28]
 800cb1a:	4b1d      	ldr	r3, [pc, #116]	@ (800cb90 <CreateInputPage+0x2d4>)
 800cb1c:	9306      	str	r3, [sp, #24]
 800cb1e:	9505      	str	r5, [sp, #20]
 800cb20:	9404      	str	r4, [sp, #16]
 800cb22:	9703      	str	r7, [sp, #12]
 800cb24:	9402      	str	r4, [sp, #8]
 800cb26:	4b1b      	ldr	r3, [pc, #108]	@ (800cb94 <CreateInputPage+0x2d8>)
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800cb32:	4628      	mov	r0, r5
 800cb34:	f7fc fbbd 	bl	80092b2 <JSB_UI_CreateControl>
 800cb38:	4601      	mov	r1, r0
 800cb3a:	4b17      	ldr	r3, [pc, #92]	@ (800cb98 <CreateInputPage+0x2dc>)
 800cb3c:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_HomeButton);
 800cb3e:	6830      	ldr	r0, [r6, #0]
 800cb40:	f7fc fcff 	bl	8009542 <JSB_UI_AddControlToPage>
}
 800cb44:	b02f      	add	sp, #188	@ 0xbc
 800cb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4a:	bf00      	nop
 800cb4c:	200172a8 	.word	0x200172a8
 800cb50:	08012c48 	.word	0x08012c48
 800cb54:	200172a4 	.word	0x200172a4
 800cb58:	08012c50 	.word	0x08012c50
 800cb5c:	200172a0 	.word	0x200172a0
 800cb60:	08012c58 	.word	0x08012c58
 800cb64:	2001729c 	.word	0x2001729c
 800cb68:	08012c70 	.word	0x08012c70
 800cb6c:	20017298 	.word	0x20017298
 800cb70:	08012c7c 	.word	0x08012c7c
 800cb74:	20017294 	.word	0x20017294
 800cb78:	08012c88 	.word	0x08012c88
 800cb7c:	20017290 	.word	0x20017290
 800cb80:	08012c94 	.word	0x08012c94
 800cb84:	2001728c 	.word	0x2001728c
 800cb88:	08012ca0 	.word	0x08012ca0
 800cb8c:	20017288 	.word	0x20017288
 800cb90:	0800c221 	.word	0x0800c221
 800cb94:	08012c40 	.word	0x08012c40
 800cb98:	20017284 	.word	0x20017284
 800cb9c:	0800c4d5 	.word	0x0800c4d5
 800cba0:	0800af6d 	.word	0x0800af6d

0800cba4 <CreateProcessPage>:
{
 800cba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cba8:	b09f      	sub	sp, #124	@ 0x7c
  UI_pProcessPage = JSB_UI_CreatePage();
 800cbaa:	f7fc fb69 	bl	8009280 <JSB_UI_CreatePage>
 800cbae:	4e5a      	ldr	r6, [pc, #360]	@ (800cd18 <CreateProcessPage+0x174>)
 800cbb0:	6030      	str	r0, [r6, #0]
  pProcessPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, Y, 240, 32), "Process", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800cbb2:	af0a      	add	r7, sp, #40	@ 0x28
 800cbb4:	f04f 0920 	mov.w	r9, #32
 800cbb8:	f8cd 9000 	str.w	r9, [sp]
 800cbbc:	23f0      	movs	r3, #240	@ 0xf0
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	4611      	mov	r1, r2
 800cbc2:	4638      	mov	r0, r7
 800cbc4:	f7fc fb62 	bl	800928c <JSB_UI_Rect>
 800cbc8:	2400      	movs	r4, #0
 800cbca:	9408      	str	r4, [sp, #32]
 800cbcc:	9407      	str	r4, [sp, #28]
 800cbce:	9406      	str	r4, [sp, #24]
 800cbd0:	2501      	movs	r5, #1
 800cbd2:	9505      	str	r5, [sp, #20]
 800cbd4:	9404      	str	r4, [sp, #16]
 800cbd6:	f242 1304 	movw	r3, #8452	@ 0x2104
 800cbda:	9303      	str	r3, [sp, #12]
 800cbdc:	9402      	str	r4, [sp, #8]
 800cbde:	4b4f      	ldr	r3, [pc, #316]	@ (800cd1c <CreateProcessPage+0x178>)
 800cbe0:	9301      	str	r3, [sp, #4]
 800cbe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cbea:	4628      	mov	r0, r5
 800cbec:	f7fc fb61 	bl	80092b2 <JSB_UI_CreateControl>
 800cbf0:	4601      	mov	r1, r0
 800cbf2:	4b4b      	ldr	r3, [pc, #300]	@ (800cd20 <CreateProcessPage+0x17c>)
 800cbf4:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pProcessPage, pProcessPage_TitleButton);
 800cbf6:	6830      	ldr	r0, [r6, #0]
 800cbf8:	f7fc fca3 	bl	8009542 <JSB_UI_AddControlToPage>
  pProcessPage_GainControl = JSB_UI_CreateControl(ctHorizontalSlider, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 80), "Gain", Page_SliderForegroundColor, Page_SliderBackgroundColor, &Process_Gain, 1, &ProcessPage_GainControlChanged, ProcessPage_GainControlChanged, NULL);
 800cbfc:	af0e      	add	r7, sp, #56	@ 0x38
 800cbfe:	2350      	movs	r3, #80	@ 0x50
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	23d0      	movs	r3, #208	@ 0xd0
 800cc04:	2228      	movs	r2, #40	@ 0x28
 800cc06:	2110      	movs	r1, #16
 800cc08:	4638      	mov	r0, r7
 800cc0a:	f7fc fb3f 	bl	800928c <JSB_UI_Rect>
 800cc0e:	9408      	str	r4, [sp, #32]
 800cc10:	4b44      	ldr	r3, [pc, #272]	@ (800cd24 <CreateProcessPage+0x180>)
 800cc12:	9307      	str	r3, [sp, #28]
 800cc14:	9306      	str	r3, [sp, #24]
 800cc16:	9505      	str	r5, [sp, #20]
 800cc18:	4b43      	ldr	r3, [pc, #268]	@ (800cd28 <CreateProcessPage+0x184>)
 800cc1a:	9304      	str	r3, [sp, #16]
 800cc1c:	f647 080f 	movw	r8, #30735	@ 0x780f
 800cc20:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc24:	f64b 0317 	movw	r3, #47127	@ 0xb817
 800cc28:	9302      	str	r3, [sp, #8]
 800cc2a:	4b40      	ldr	r3, [pc, #256]	@ (800cd2c <CreateProcessPage+0x188>)
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cc36:	2002      	movs	r0, #2
 800cc38:	f7fc fb3b 	bl	80092b2 <JSB_UI_CreateControl>
 800cc3c:	4601      	mov	r1, r0
 800cc3e:	4b3c      	ldr	r3, [pc, #240]	@ (800cd30 <CreateProcessPage+0x18c>)
 800cc40:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pProcessPage, pProcessPage_GainControl);
 800cc42:	6830      	ldr	r0, [r6, #0]
 800cc44:	f7fc fc7d 	bl	8009542 <JSB_UI_AddControlToPage>
  pProcessPage_DefaultGainControl = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 32), "Default gain", 0, Page_ButtonColor, NULL, 1, ProcessPage_DefaultGainControlPressed, NULL, NULL);
 800cc48:	af12      	add	r7, sp, #72	@ 0x48
 800cc4a:	f8cd 9000 	str.w	r9, [sp]
 800cc4e:	23d0      	movs	r3, #208	@ 0xd0
 800cc50:	2280      	movs	r2, #128	@ 0x80
 800cc52:	2110      	movs	r1, #16
 800cc54:	4638      	mov	r0, r7
 800cc56:	f7fc fb19 	bl	800928c <JSB_UI_Rect>
 800cc5a:	9408      	str	r4, [sp, #32]
 800cc5c:	9407      	str	r4, [sp, #28]
 800cc5e:	4b35      	ldr	r3, [pc, #212]	@ (800cd34 <CreateProcessPage+0x190>)
 800cc60:	9306      	str	r3, [sp, #24]
 800cc62:	9505      	str	r5, [sp, #20]
 800cc64:	9404      	str	r4, [sp, #16]
 800cc66:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc6a:	9402      	str	r4, [sp, #8]
 800cc6c:	4b32      	ldr	r3, [pc, #200]	@ (800cd38 <CreateProcessPage+0x194>)
 800cc6e:	9301      	str	r3, [sp, #4]
 800cc70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f7fc fb1a 	bl	80092b2 <JSB_UI_CreateControl>
 800cc7e:	4601      	mov	r1, r0
 800cc80:	4b2e      	ldr	r3, [pc, #184]	@ (800cd3c <CreateProcessPage+0x198>)
 800cc82:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pProcessPage, pProcessPage_DefaultGainControl);
 800cc84:	6830      	ldr	r0, [r6, #0]
 800cc86:	f7fc fc5c 	bl	8009542 <JSB_UI_AddControlToPage>
  pProcessPage_MuteButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 32), "Mute", 0, Page_ButtonColor, NULL, 1, ProcessPage_MuteButtonPressed, NULL, ProcessPage_MuteButtonCustomDraw);
 800cc8a:	af16      	add	r7, sp, #88	@ 0x58
 800cc8c:	f8cd 9000 	str.w	r9, [sp]
 800cc90:	23d0      	movs	r3, #208	@ 0xd0
 800cc92:	22a8      	movs	r2, #168	@ 0xa8
 800cc94:	2110      	movs	r1, #16
 800cc96:	4638      	mov	r0, r7
 800cc98:	f7fc faf8 	bl	800928c <JSB_UI_Rect>
 800cc9c:	4b28      	ldr	r3, [pc, #160]	@ (800cd40 <CreateProcessPage+0x19c>)
 800cc9e:	9308      	str	r3, [sp, #32]
 800cca0:	9407      	str	r4, [sp, #28]
 800cca2:	4b28      	ldr	r3, [pc, #160]	@ (800cd44 <CreateProcessPage+0x1a0>)
 800cca4:	9306      	str	r3, [sp, #24]
 800cca6:	9505      	str	r5, [sp, #20]
 800cca8:	9404      	str	r4, [sp, #16]
 800ccaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccae:	9402      	str	r4, [sp, #8]
 800ccb0:	4b25      	ldr	r3, [pc, #148]	@ (800cd48 <CreateProcessPage+0x1a4>)
 800ccb2:	9301      	str	r3, [sp, #4]
 800ccb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f7fc faf8 	bl	80092b2 <JSB_UI_CreateControl>
 800ccc2:	4601      	mov	r1, r0
 800ccc4:	4b21      	ldr	r3, [pc, #132]	@ (800cd4c <CreateProcessPage+0x1a8>)
 800ccc6:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pProcessPage, pProcessPage_MuteButton);
 800ccc8:	6830      	ldr	r0, [r6, #0]
 800ccca:	f7fc fc3a 	bl	8009542 <JSB_UI_AddControlToPage>
  pProcessPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - 100 / 2, 288, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &ProcessPage_HomeButtonPressed, NULL, NULL);
 800ccce:	af1a      	add	r7, sp, #104	@ 0x68
 800ccd0:	f8cd 9000 	str.w	r9, [sp]
 800ccd4:	2364      	movs	r3, #100	@ 0x64
 800ccd6:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800ccda:	2146      	movs	r1, #70	@ 0x46
 800ccdc:	4638      	mov	r0, r7
 800ccde:	f7fc fad5 	bl	800928c <JSB_UI_Rect>
 800cce2:	9408      	str	r4, [sp, #32]
 800cce4:	9407      	str	r4, [sp, #28]
 800cce6:	4b1a      	ldr	r3, [pc, #104]	@ (800cd50 <CreateProcessPage+0x1ac>)
 800cce8:	9306      	str	r3, [sp, #24]
 800ccea:	9505      	str	r5, [sp, #20]
 800ccec:	9404      	str	r4, [sp, #16]
 800ccee:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccf2:	9402      	str	r4, [sp, #8]
 800ccf4:	4b17      	ldr	r3, [pc, #92]	@ (800cd54 <CreateProcessPage+0x1b0>)
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cd00:	4628      	mov	r0, r5
 800cd02:	f7fc fad6 	bl	80092b2 <JSB_UI_CreateControl>
 800cd06:	4601      	mov	r1, r0
 800cd08:	4b13      	ldr	r3, [pc, #76]	@ (800cd58 <CreateProcessPage+0x1b4>)
 800cd0a:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pProcessPage, pProcessPage_HomeButton);
 800cd0c:	6830      	ldr	r0, [r6, #0]
 800cd0e:	f7fc fc18 	bl	8009542 <JSB_UI_AddControlToPage>
}
 800cd12:	b01f      	add	sp, #124	@ 0x7c
 800cd14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd18:	20017280 	.word	0x20017280
 800cd1c:	08012c0c 	.word	0x08012c0c
 800cd20:	2001727c 	.word	0x2001727c
 800cd24:	0800c325 	.word	0x0800c325
 800cd28:	200003f8 	.word	0x200003f8
 800cd2c:	08012ca8 	.word	0x08012ca8
 800cd30:	20017278 	.word	0x20017278
 800cd34:	0800c335 	.word	0x0800c335
 800cd38:	08012cb0 	.word	0x08012cb0
 800cd3c:	20017274 	.word	0x20017274
 800cd40:	0800c591 	.word	0x0800c591
 800cd44:	0800c355 	.word	0x0800c355
 800cd48:	08012cc0 	.word	0x08012cc0
 800cd4c:	20017270 	.word	0x20017270
 800cd50:	0800c235 	.word	0x0800c235
 800cd54:	08012c40 	.word	0x08012c40
 800cd58:	2001726c 	.word	0x2001726c

0800cd5c <CreatePowerAmplifierPage>:
{
 800cd5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd60:	b09f      	sub	sp, #124	@ 0x7c
  UI_pPowerAmplifierPage = JSB_UI_CreatePage();
 800cd62:	f7fc fa8d 	bl	8009280 <JSB_UI_CreatePage>
 800cd66:	4e5e      	ldr	r6, [pc, #376]	@ (800cee0 <CreatePowerAmplifierPage+0x184>)
 800cd68:	6030      	str	r0, [r6, #0]
  pPowerAmplifierPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, Y, 240, 32), "Power amplifier", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800cd6a:	af0a      	add	r7, sp, #40	@ 0x28
 800cd6c:	f04f 0920 	mov.w	r9, #32
 800cd70:	f8cd 9000 	str.w	r9, [sp]
 800cd74:	23f0      	movs	r3, #240	@ 0xf0
 800cd76:	2200      	movs	r2, #0
 800cd78:	4611      	mov	r1, r2
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	f7fc fa86 	bl	800928c <JSB_UI_Rect>
 800cd80:	2400      	movs	r4, #0
 800cd82:	9408      	str	r4, [sp, #32]
 800cd84:	9407      	str	r4, [sp, #28]
 800cd86:	9406      	str	r4, [sp, #24]
 800cd88:	2501      	movs	r5, #1
 800cd8a:	9505      	str	r5, [sp, #20]
 800cd8c:	9404      	str	r4, [sp, #16]
 800cd8e:	f242 1304 	movw	r3, #8452	@ 0x2104
 800cd92:	9303      	str	r3, [sp, #12]
 800cd94:	9402      	str	r4, [sp, #8]
 800cd96:	4b53      	ldr	r3, [pc, #332]	@ (800cee4 <CreatePowerAmplifierPage+0x188>)
 800cd98:	9301      	str	r3, [sp, #4]
 800cd9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd9c:	9300      	str	r3, [sp, #0]
 800cd9e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cda2:	4628      	mov	r0, r5
 800cda4:	f7fc fa85 	bl	80092b2 <JSB_UI_CreateControl>
 800cda8:	4601      	mov	r1, r0
 800cdaa:	4b4f      	ldr	r3, [pc, #316]	@ (800cee8 <CreatePowerAmplifierPage+0x18c>)
 800cdac:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pPowerAmplifierPage, pPowerAmplifierPage_TitleButton);
 800cdae:	6830      	ldr	r0, [r6, #0]
 800cdb0:	f7fc fbc7 	bl	8009542 <JSB_UI_AddControlToPage>
  pPowerAmplifierPage_VolumeControl = JSB_UI_CreateControl(ctHorizontalSlider, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 80), "Volume", Page_SliderForegroundColor, Page_SliderBackgroundColor, &PA_MasterVolume_dB, 1, &PowerAmplifierPage_VolumeControlChanged, PowerAmplifierPage_VolumeControlChanged, NULL);
 800cdb4:	af0e      	add	r7, sp, #56	@ 0x38
 800cdb6:	2350      	movs	r3, #80	@ 0x50
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	23d0      	movs	r3, #208	@ 0xd0
 800cdbc:	2228      	movs	r2, #40	@ 0x28
 800cdbe:	2110      	movs	r1, #16
 800cdc0:	4638      	mov	r0, r7
 800cdc2:	f7fc fa63 	bl	800928c <JSB_UI_Rect>
 800cdc6:	9408      	str	r4, [sp, #32]
 800cdc8:	4b48      	ldr	r3, [pc, #288]	@ (800ceec <CreatePowerAmplifierPage+0x190>)
 800cdca:	9307      	str	r3, [sp, #28]
 800cdcc:	9306      	str	r3, [sp, #24]
 800cdce:	9505      	str	r5, [sp, #20]
 800cdd0:	4b47      	ldr	r3, [pc, #284]	@ (800cef0 <CreatePowerAmplifierPage+0x194>)
 800cdd2:	9304      	str	r3, [sp, #16]
 800cdd4:	f647 080f 	movw	r8, #30735	@ 0x780f
 800cdd8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cddc:	f64b 0317 	movw	r3, #47127	@ 0xb817
 800cde0:	9302      	str	r3, [sp, #8]
 800cde2:	4b44      	ldr	r3, [pc, #272]	@ (800cef4 <CreatePowerAmplifierPage+0x198>)
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cde8:	9300      	str	r3, [sp, #0]
 800cdea:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cdee:	2002      	movs	r0, #2
 800cdf0:	f7fc fa5f 	bl	80092b2 <JSB_UI_CreateControl>
 800cdf4:	4601      	mov	r1, r0
 800cdf6:	4f40      	ldr	r7, [pc, #256]	@ (800cef8 <CreatePowerAmplifierPage+0x19c>)
 800cdf8:	6038      	str	r0, [r7, #0]
    JSB_UI_AddControlToPage(UI_pPowerAmplifierPage, pPowerAmplifierPage_VolumeControl);
 800cdfa:	6830      	ldr	r0, [r6, #0]
 800cdfc:	f7fc fba1 	bl	8009542 <JSB_UI_AddControlToPage>
  pPowerAmplifierPage_VolumeControl->SliderMinValue = PA_MasterVolume_dB_Min;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	4a3e      	ldr	r2, [pc, #248]	@ (800cefc <CreatePowerAmplifierPage+0x1a0>)
 800ce04:	66da      	str	r2, [r3, #108]	@ 0x6c
  pPowerAmplifierPage_VolumeControl->SliderMaxValue = PA_MasterVolume_dB_Max;
 800ce06:	4a3e      	ldr	r2, [pc, #248]	@ (800cf00 <CreatePowerAmplifierPage+0x1a4>)
 800ce08:	671a      	str	r2, [r3, #112]	@ 0x70
  pPowerAmplifierPage_VolumeControl->pTweakTextHandler = pPowerAmplifierPage_VolumeControlTweakText;
 800ce0a:	4a3e      	ldr	r2, [pc, #248]	@ (800cf04 <CreatePowerAmplifierPage+0x1a8>)
 800ce0c:	679a      	str	r2, [r3, #120]	@ 0x78
  pPowerAmplifierPage_DefaultVolumeButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 32), "Default volume", 0, Page_ButtonColor, NULL, 1, PowerAmplifierPage_DefaultVolumeButtonPressed, NULL, NULL);
 800ce0e:	af12      	add	r7, sp, #72	@ 0x48
 800ce10:	f8cd 9000 	str.w	r9, [sp]
 800ce14:	23d0      	movs	r3, #208	@ 0xd0
 800ce16:	2280      	movs	r2, #128	@ 0x80
 800ce18:	2110      	movs	r1, #16
 800ce1a:	4638      	mov	r0, r7
 800ce1c:	f7fc fa36 	bl	800928c <JSB_UI_Rect>
 800ce20:	9408      	str	r4, [sp, #32]
 800ce22:	9407      	str	r4, [sp, #28]
 800ce24:	4b38      	ldr	r3, [pc, #224]	@ (800cf08 <CreatePowerAmplifierPage+0x1ac>)
 800ce26:	9306      	str	r3, [sp, #24]
 800ce28:	9505      	str	r5, [sp, #20]
 800ce2a:	9404      	str	r4, [sp, #16]
 800ce2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce30:	9402      	str	r4, [sp, #8]
 800ce32:	4b36      	ldr	r3, [pc, #216]	@ (800cf0c <CreatePowerAmplifierPage+0x1b0>)
 800ce34:	9301      	str	r3, [sp, #4]
 800ce36:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ce3e:	4628      	mov	r0, r5
 800ce40:	f7fc fa37 	bl	80092b2 <JSB_UI_CreateControl>
 800ce44:	4601      	mov	r1, r0
 800ce46:	4b32      	ldr	r3, [pc, #200]	@ (800cf10 <CreatePowerAmplifierPage+0x1b4>)
 800ce48:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pPowerAmplifierPage, pPowerAmplifierPage_DefaultVolumeButton);
 800ce4a:	6830      	ldr	r0, [r6, #0]
 800ce4c:	f7fc fb79 	bl	8009542 <JSB_UI_AddControlToPage>
  pPowerAmplifierPage_MuteButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 32), "Mute", 0, Page_ButtonColor, NULL, 1, PowerAmplifierPage_MuteButtonPressed, NULL, PowerAmplifierPage_MuteButtonCustomDraw);
 800ce50:	af16      	add	r7, sp, #88	@ 0x58
 800ce52:	f8cd 9000 	str.w	r9, [sp]
 800ce56:	23d0      	movs	r3, #208	@ 0xd0
 800ce58:	22a8      	movs	r2, #168	@ 0xa8
 800ce5a:	2110      	movs	r1, #16
 800ce5c:	4638      	mov	r0, r7
 800ce5e:	f7fc fa15 	bl	800928c <JSB_UI_Rect>
 800ce62:	4b2c      	ldr	r3, [pc, #176]	@ (800cf14 <CreatePowerAmplifierPage+0x1b8>)
 800ce64:	9308      	str	r3, [sp, #32]
 800ce66:	9407      	str	r4, [sp, #28]
 800ce68:	4b2b      	ldr	r3, [pc, #172]	@ (800cf18 <CreatePowerAmplifierPage+0x1bc>)
 800ce6a:	9306      	str	r3, [sp, #24]
 800ce6c:	9505      	str	r5, [sp, #20]
 800ce6e:	9404      	str	r4, [sp, #16]
 800ce70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce74:	9402      	str	r4, [sp, #8]
 800ce76:	4b29      	ldr	r3, [pc, #164]	@ (800cf1c <CreatePowerAmplifierPage+0x1c0>)
 800ce78:	9301      	str	r3, [sp, #4]
 800ce7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ce82:	4628      	mov	r0, r5
 800ce84:	f7fc fa15 	bl	80092b2 <JSB_UI_CreateControl>
 800ce88:	4601      	mov	r1, r0
 800ce8a:	4b25      	ldr	r3, [pc, #148]	@ (800cf20 <CreatePowerAmplifierPage+0x1c4>)
 800ce8c:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pPowerAmplifierPage, pPowerAmplifierPage_MuteButton);
 800ce8e:	6830      	ldr	r0, [r6, #0]
 800ce90:	f7fc fb57 	bl	8009542 <JSB_UI_AddControlToPage>
  pPowerAmplifierPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - 100 / 2, 288, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &PowerAmplifierPage_HomeButtonPressed, NULL, NULL);
 800ce94:	af1a      	add	r7, sp, #104	@ 0x68
 800ce96:	f8cd 9000 	str.w	r9, [sp]
 800ce9a:	2364      	movs	r3, #100	@ 0x64
 800ce9c:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800cea0:	2146      	movs	r1, #70	@ 0x46
 800cea2:	4638      	mov	r0, r7
 800cea4:	f7fc f9f2 	bl	800928c <JSB_UI_Rect>
 800cea8:	9408      	str	r4, [sp, #32]
 800ceaa:	9407      	str	r4, [sp, #28]
 800ceac:	4b1d      	ldr	r3, [pc, #116]	@ (800cf24 <CreatePowerAmplifierPage+0x1c8>)
 800ceae:	9306      	str	r3, [sp, #24]
 800ceb0:	9505      	str	r5, [sp, #20]
 800ceb2:	9404      	str	r4, [sp, #16]
 800ceb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceb8:	9402      	str	r4, [sp, #8]
 800ceba:	4b1b      	ldr	r3, [pc, #108]	@ (800cf28 <CreatePowerAmplifierPage+0x1cc>)
 800cebc:	9301      	str	r3, [sp, #4]
 800cebe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cec6:	4628      	mov	r0, r5
 800cec8:	f7fc f9f3 	bl	80092b2 <JSB_UI_CreateControl>
 800cecc:	4601      	mov	r1, r0
 800cece:	4b17      	ldr	r3, [pc, #92]	@ (800cf2c <CreatePowerAmplifierPage+0x1d0>)
 800ced0:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pPowerAmplifierPage, pPowerAmplifierPage_HomeButton);
 800ced2:	6830      	ldr	r0, [r6, #0]
 800ced4:	f7fc fb35 	bl	8009542 <JSB_UI_AddControlToPage>
}
 800ced8:	b01f      	add	sp, #124	@ 0x7c
 800ceda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cede:	bf00      	nop
 800cee0:	20017268 	.word	0x20017268
 800cee4:	08012cc8 	.word	0x08012cc8
 800cee8:	20017264 	.word	0x20017264
 800ceec:	0800c3c5 	.word	0x0800c3c5
 800cef0:	200153e0 	.word	0x200153e0
 800cef4:	08012cd8 	.word	0x08012cd8
 800cef8:	20017260 	.word	0x20017260
 800cefc:	c2a00000 	.word	0xc2a00000
 800cf00:	41a00000 	.word	0x41a00000
 800cf04:	0800b041 	.word	0x0800b041
 800cf08:	0800c3d5 	.word	0x0800c3d5
 800cf0c:	08012ce0 	.word	0x08012ce0
 800cf10:	2001725c 	.word	0x2001725c
 800cf14:	0800c5a5 	.word	0x0800c5a5
 800cf18:	0800c3e9 	.word	0x0800c3e9
 800cf1c:	08012cc0 	.word	0x08012cc0
 800cf20:	20017258 	.word	0x20017258
 800cf24:	0800c249 	.word	0x0800c249
 800cf28:	08012c40 	.word	0x08012c40
 800cf2c:	20017254 	.word	0x20017254

0800cf30 <CreateBluetoothOutPage>:
{
 800cf30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf34:	b09a      	sub	sp, #104	@ 0x68
  UI_pBluetoothOutPage = JSB_UI_CreatePage();
 800cf36:	f7fc f9a3 	bl	8009280 <JSB_UI_CreatePage>
 800cf3a:	4e4a      	ldr	r6, [pc, #296]	@ (800d064 <CreateBluetoothOutPage+0x134>)
 800cf3c:	6030      	str	r0, [r6, #0]
  pBluetoothOutPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, Y, 240, 32), "Bluetooth out", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800cf3e:	af0a      	add	r7, sp, #40	@ 0x28
 800cf40:	f04f 0820 	mov.w	r8, #32
 800cf44:	f8cd 8000 	str.w	r8, [sp]
 800cf48:	23f0      	movs	r3, #240	@ 0xf0
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	4638      	mov	r0, r7
 800cf50:	f7fc f99c 	bl	800928c <JSB_UI_Rect>
 800cf54:	2400      	movs	r4, #0
 800cf56:	9408      	str	r4, [sp, #32]
 800cf58:	9407      	str	r4, [sp, #28]
 800cf5a:	9406      	str	r4, [sp, #24]
 800cf5c:	2501      	movs	r5, #1
 800cf5e:	9505      	str	r5, [sp, #20]
 800cf60:	9404      	str	r4, [sp, #16]
 800cf62:	f242 1304 	movw	r3, #8452	@ 0x2104
 800cf66:	9303      	str	r3, [sp, #12]
 800cf68:	9402      	str	r4, [sp, #8]
 800cf6a:	4b3f      	ldr	r3, [pc, #252]	@ (800d068 <CreateBluetoothOutPage+0x138>)
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cf76:	4628      	mov	r0, r5
 800cf78:	f7fc f99b 	bl	80092b2 <JSB_UI_CreateControl>
 800cf7c:	4601      	mov	r1, r0
 800cf7e:	4b3b      	ldr	r3, [pc, #236]	@ (800d06c <CreateBluetoothOutPage+0x13c>)
 800cf80:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pBluetoothOutPage, pBluetoothOutPage_TitleButton);
 800cf82:	6830      	ldr	r0, [r6, #0]
 800cf84:	f7fc fadd 	bl	8009542 <JSB_UI_AddControlToPage>
  pBluetoothOutPage_OffButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(2, Y, 114, 32), "Off", 0, Page_ButtonColor, NULL, 1, &BluetoothOutPage_OffButtonPressed, NULL, BluetoothOutPage_OffOnButtonCustomDraw);
 800cf88:	af0e      	add	r7, sp, #56	@ 0x38
 800cf8a:	f8cd 8000 	str.w	r8, [sp]
 800cf8e:	2372      	movs	r3, #114	@ 0x72
 800cf90:	2228      	movs	r2, #40	@ 0x28
 800cf92:	2102      	movs	r1, #2
 800cf94:	4638      	mov	r0, r7
 800cf96:	f7fc f979 	bl	800928c <JSB_UI_Rect>
 800cf9a:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 800d094 <CreateBluetoothOutPage+0x164>
 800cf9e:	f8cd a020 	str.w	sl, [sp, #32]
 800cfa2:	9407      	str	r4, [sp, #28]
 800cfa4:	4b32      	ldr	r3, [pc, #200]	@ (800d070 <CreateBluetoothOutPage+0x140>)
 800cfa6:	9306      	str	r3, [sp, #24]
 800cfa8:	9505      	str	r5, [sp, #20]
 800cfaa:	9404      	str	r4, [sp, #16]
 800cfac:	f647 090f 	movw	r9, #30735	@ 0x780f
 800cfb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cfb4:	9402      	str	r4, [sp, #8]
 800cfb6:	4b2f      	ldr	r3, [pc, #188]	@ (800d074 <CreateBluetoothOutPage+0x144>)
 800cfb8:	9301      	str	r3, [sp, #4]
 800cfba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	f7fc f975 	bl	80092b2 <JSB_UI_CreateControl>
 800cfc8:	4601      	mov	r1, r0
 800cfca:	4b2b      	ldr	r3, [pc, #172]	@ (800d078 <CreateBluetoothOutPage+0x148>)
 800cfcc:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pBluetoothOutPage, pBluetoothOutPage_OffButton);
 800cfce:	6830      	ldr	r0, [r6, #0]
 800cfd0:	f7fc fab7 	bl	8009542 <JSB_UI_AddControlToPage>
  pBluetoothOutPage_OnButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(124, Y, 114, 32), "On", 0, Page_ButtonColor, NULL, 1, &BluetoothOutPage_OnButtonPressed, NULL, BluetoothOutPage_OffOnButtonCustomDraw);
 800cfd4:	af12      	add	r7, sp, #72	@ 0x48
 800cfd6:	f8cd 8000 	str.w	r8, [sp]
 800cfda:	2372      	movs	r3, #114	@ 0x72
 800cfdc:	2228      	movs	r2, #40	@ 0x28
 800cfde:	217c      	movs	r1, #124	@ 0x7c
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	f7fc f953 	bl	800928c <JSB_UI_Rect>
 800cfe6:	f8cd a020 	str.w	sl, [sp, #32]
 800cfea:	9407      	str	r4, [sp, #28]
 800cfec:	4b23      	ldr	r3, [pc, #140]	@ (800d07c <CreateBluetoothOutPage+0x14c>)
 800cfee:	9306      	str	r3, [sp, #24]
 800cff0:	9505      	str	r5, [sp, #20]
 800cff2:	9404      	str	r4, [sp, #16]
 800cff4:	f8cd 900c 	str.w	r9, [sp, #12]
 800cff8:	9402      	str	r4, [sp, #8]
 800cffa:	4b21      	ldr	r3, [pc, #132]	@ (800d080 <CreateBluetoothOutPage+0x150>)
 800cffc:	9301      	str	r3, [sp, #4]
 800cffe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d006:	4628      	mov	r0, r5
 800d008:	f7fc f953 	bl	80092b2 <JSB_UI_CreateControl>
 800d00c:	4601      	mov	r1, r0
 800d00e:	4b1d      	ldr	r3, [pc, #116]	@ (800d084 <CreateBluetoothOutPage+0x154>)
 800d010:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pBluetoothOutPage, pBluetoothOutPage_OnButton);
 800d012:	6830      	ldr	r0, [r6, #0]
 800d014:	f7fc fa95 	bl	8009542 <JSB_UI_AddControlToPage>
  pBluetoothOutPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - 100 / 2, 288, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &BluetoothOutPage_HomeButtonPressed, NULL, NULL);
 800d018:	af16      	add	r7, sp, #88	@ 0x58
 800d01a:	f8cd 8000 	str.w	r8, [sp]
 800d01e:	2364      	movs	r3, #100	@ 0x64
 800d020:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800d024:	2146      	movs	r1, #70	@ 0x46
 800d026:	4638      	mov	r0, r7
 800d028:	f7fc f930 	bl	800928c <JSB_UI_Rect>
 800d02c:	9408      	str	r4, [sp, #32]
 800d02e:	9407      	str	r4, [sp, #28]
 800d030:	4b15      	ldr	r3, [pc, #84]	@ (800d088 <CreateBluetoothOutPage+0x158>)
 800d032:	9306      	str	r3, [sp, #24]
 800d034:	9505      	str	r5, [sp, #20]
 800d036:	9404      	str	r4, [sp, #16]
 800d038:	f8cd 900c 	str.w	r9, [sp, #12]
 800d03c:	9402      	str	r4, [sp, #8]
 800d03e:	4b13      	ldr	r3, [pc, #76]	@ (800d08c <CreateBluetoothOutPage+0x15c>)
 800d040:	9301      	str	r3, [sp, #4]
 800d042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d04a:	4628      	mov	r0, r5
 800d04c:	f7fc f931 	bl	80092b2 <JSB_UI_CreateControl>
 800d050:	4601      	mov	r1, r0
 800d052:	4b0f      	ldr	r3, [pc, #60]	@ (800d090 <CreateBluetoothOutPage+0x160>)
 800d054:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pBluetoothOutPage, pBluetoothOutPage_HomeButton);
 800d056:	6830      	ldr	r0, [r6, #0]
 800d058:	f7fc fa73 	bl	8009542 <JSB_UI_AddControlToPage>
}
 800d05c:	b01a      	add	sp, #104	@ 0x68
 800d05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d062:	bf00      	nop
 800d064:	20017250 	.word	0x20017250
 800d068:	08012c20 	.word	0x08012c20
 800d06c:	2001724c 	.word	0x2001724c
 800d070:	0800c439 	.word	0x0800c439
 800d074:	0801279c 	.word	0x0801279c
 800d078:	20017248 	.word	0x20017248
 800d07c:	0800c443 	.word	0x0800c443
 800d080:	08012794 	.word	0x08012794
 800d084:	20017244 	.word	0x20017244
 800d088:	0800c25d 	.word	0x0800c25d
 800d08c:	08012c40 	.word	0x08012c40
 800d090:	20017240 	.word	0x20017240
 800d094:	0800c5b9 	.word	0x0800c5b9

0800d098 <CreateWiFiPage>:
{
 800d098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d09c:	b09a      	sub	sp, #104	@ 0x68
  UI_pWiFiPage = JSB_UI_CreatePage();
 800d09e:	f7fc f8ef 	bl	8009280 <JSB_UI_CreatePage>
 800d0a2:	4e4a      	ldr	r6, [pc, #296]	@ (800d1cc <CreateWiFiPage+0x134>)
 800d0a4:	6030      	str	r0, [r6, #0]
  pWiFiPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, Y, 240, 32), "WiFI", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800d0a6:	af0a      	add	r7, sp, #40	@ 0x28
 800d0a8:	f04f 0820 	mov.w	r8, #32
 800d0ac:	f8cd 8000 	str.w	r8, [sp]
 800d0b0:	23f0      	movs	r3, #240	@ 0xf0
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	4611      	mov	r1, r2
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	f7fc f8e8 	bl	800928c <JSB_UI_Rect>
 800d0bc:	2400      	movs	r4, #0
 800d0be:	9408      	str	r4, [sp, #32]
 800d0c0:	9407      	str	r4, [sp, #28]
 800d0c2:	9406      	str	r4, [sp, #24]
 800d0c4:	2501      	movs	r5, #1
 800d0c6:	9505      	str	r5, [sp, #20]
 800d0c8:	9404      	str	r4, [sp, #16]
 800d0ca:	f242 1304 	movw	r3, #8452	@ 0x2104
 800d0ce:	9303      	str	r3, [sp, #12]
 800d0d0:	9402      	str	r4, [sp, #8]
 800d0d2:	4b3f      	ldr	r3, [pc, #252]	@ (800d1d0 <CreateWiFiPage+0x138>)
 800d0d4:	9301      	str	r3, [sp, #4]
 800d0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f7fc f8e7 	bl	80092b2 <JSB_UI_CreateControl>
 800d0e4:	4601      	mov	r1, r0
 800d0e6:	4b3b      	ldr	r3, [pc, #236]	@ (800d1d4 <CreateWiFiPage+0x13c>)
 800d0e8:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pWiFiPage, pWiFiPage_TitleButton);
 800d0ea:	6830      	ldr	r0, [r6, #0]
 800d0ec:	f7fc fa29 	bl	8009542 <JSB_UI_AddControlToPage>
  pWiFiPage_OffButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(2, Y, 114, 32), "Off", 0, Page_ButtonColor, NULL, 1, &WiFiPage_OffButtonPressed, NULL, WiFiPage_OffOnButtonCustomDraw);
 800d0f0:	af0e      	add	r7, sp, #56	@ 0x38
 800d0f2:	f8cd 8000 	str.w	r8, [sp]
 800d0f6:	2372      	movs	r3, #114	@ 0x72
 800d0f8:	2228      	movs	r2, #40	@ 0x28
 800d0fa:	2102      	movs	r1, #2
 800d0fc:	4638      	mov	r0, r7
 800d0fe:	f7fc f8c5 	bl	800928c <JSB_UI_Rect>
 800d102:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 800d1fc <CreateWiFiPage+0x164>
 800d106:	f8cd a020 	str.w	sl, [sp, #32]
 800d10a:	9407      	str	r4, [sp, #28]
 800d10c:	4b32      	ldr	r3, [pc, #200]	@ (800d1d8 <CreateWiFiPage+0x140>)
 800d10e:	9306      	str	r3, [sp, #24]
 800d110:	9505      	str	r5, [sp, #20]
 800d112:	9404      	str	r4, [sp, #16]
 800d114:	f647 090f 	movw	r9, #30735	@ 0x780f
 800d118:	f8cd 900c 	str.w	r9, [sp, #12]
 800d11c:	9402      	str	r4, [sp, #8]
 800d11e:	4b2f      	ldr	r3, [pc, #188]	@ (800d1dc <CreateWiFiPage+0x144>)
 800d120:	9301      	str	r3, [sp, #4]
 800d122:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d124:	9300      	str	r3, [sp, #0]
 800d126:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d12a:	4628      	mov	r0, r5
 800d12c:	f7fc f8c1 	bl	80092b2 <JSB_UI_CreateControl>
 800d130:	4601      	mov	r1, r0
 800d132:	4b2b      	ldr	r3, [pc, #172]	@ (800d1e0 <CreateWiFiPage+0x148>)
 800d134:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pWiFiPage, pWiFiPage_OffButton);
 800d136:	6830      	ldr	r0, [r6, #0]
 800d138:	f7fc fa03 	bl	8009542 <JSB_UI_AddControlToPage>
  pWiFiPage_OnButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(124, Y, 114, 32), "On", 0, Page_ButtonColor, NULL, 1, &WiFiPage_OnButtonPressed, NULL, WiFiPage_OffOnButtonCustomDraw);
 800d13c:	af12      	add	r7, sp, #72	@ 0x48
 800d13e:	f8cd 8000 	str.w	r8, [sp]
 800d142:	2372      	movs	r3, #114	@ 0x72
 800d144:	2228      	movs	r2, #40	@ 0x28
 800d146:	217c      	movs	r1, #124	@ 0x7c
 800d148:	4638      	mov	r0, r7
 800d14a:	f7fc f89f 	bl	800928c <JSB_UI_Rect>
 800d14e:	f8cd a020 	str.w	sl, [sp, #32]
 800d152:	9407      	str	r4, [sp, #28]
 800d154:	4b23      	ldr	r3, [pc, #140]	@ (800d1e4 <CreateWiFiPage+0x14c>)
 800d156:	9306      	str	r3, [sp, #24]
 800d158:	9505      	str	r5, [sp, #20]
 800d15a:	9404      	str	r4, [sp, #16]
 800d15c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d160:	9402      	str	r4, [sp, #8]
 800d162:	4b21      	ldr	r3, [pc, #132]	@ (800d1e8 <CreateWiFiPage+0x150>)
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d16e:	4628      	mov	r0, r5
 800d170:	f7fc f89f 	bl	80092b2 <JSB_UI_CreateControl>
 800d174:	4601      	mov	r1, r0
 800d176:	4b1d      	ldr	r3, [pc, #116]	@ (800d1ec <CreateWiFiPage+0x154>)
 800d178:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pWiFiPage, pWiFiPage_OnButton);
 800d17a:	6830      	ldr	r0, [r6, #0]
 800d17c:	f7fc f9e1 	bl	8009542 <JSB_UI_AddControlToPage>
  pWiFiPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - 100 / 2, 288, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &WiFiPage_HomeButtonPressed, NULL, NULL);
 800d180:	af16      	add	r7, sp, #88	@ 0x58
 800d182:	f8cd 8000 	str.w	r8, [sp]
 800d186:	2364      	movs	r3, #100	@ 0x64
 800d188:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800d18c:	2146      	movs	r1, #70	@ 0x46
 800d18e:	4638      	mov	r0, r7
 800d190:	f7fc f87c 	bl	800928c <JSB_UI_Rect>
 800d194:	9408      	str	r4, [sp, #32]
 800d196:	9407      	str	r4, [sp, #28]
 800d198:	4b15      	ldr	r3, [pc, #84]	@ (800d1f0 <CreateWiFiPage+0x158>)
 800d19a:	9306      	str	r3, [sp, #24]
 800d19c:	9505      	str	r5, [sp, #20]
 800d19e:	9404      	str	r4, [sp, #16]
 800d1a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1a4:	9402      	str	r4, [sp, #8]
 800d1a6:	4b13      	ldr	r3, [pc, #76]	@ (800d1f4 <CreateWiFiPage+0x15c>)
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	f7fc f87d 	bl	80092b2 <JSB_UI_CreateControl>
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	4b0f      	ldr	r3, [pc, #60]	@ (800d1f8 <CreateWiFiPage+0x160>)
 800d1bc:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pWiFiPage, pWiFiPage_HomeButton);
 800d1be:	6830      	ldr	r0, [r6, #0]
 800d1c0:	f7fc f9bf 	bl	8009542 <JSB_UI_AddControlToPage>
}
 800d1c4:	b01a      	add	sp, #104	@ 0x68
 800d1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ca:	bf00      	nop
 800d1cc:	2001723c 	.word	0x2001723c
 800d1d0:	08012cf0 	.word	0x08012cf0
 800d1d4:	20017238 	.word	0x20017238
 800d1d8:	0800c471 	.word	0x0800c471
 800d1dc:	0801279c 	.word	0x0801279c
 800d1e0:	20017234 	.word	0x20017234
 800d1e4:	0800c47b 	.word	0x0800c47b
 800d1e8:	08012794 	.word	0x08012794
 800d1ec:	20017230 	.word	0x20017230
 800d1f0:	0800c271 	.word	0x0800c271
 800d1f4:	08012c40 	.word	0x08012c40
 800d1f8:	2001722c 	.word	0x2001722c
 800d1fc:	0800c5f1 	.word	0x0800c5f1

0800d200 <CreateInfoPage>:
{
 800d200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d204:	b097      	sub	sp, #92	@ 0x5c
  UI_pInfoPage = JSB_UI_CreatePage();
 800d206:	f7fc f83b 	bl	8009280 <JSB_UI_CreatePage>
 800d20a:	4e3a      	ldr	r6, [pc, #232]	@ (800d2f4 <CreateInfoPage+0xf4>)
 800d20c:	6030      	str	r0, [r6, #0]
  UI_pInfoPage->ContinuousRefresh = 1;
 800d20e:	2501      	movs	r5, #1
 800d210:	f880 5044 	strb.w	r5, [r0, #68]	@ 0x44
  UI_pInfoPage->pCustomDrawHandler = &InfoPage_CustomDraw;
 800d214:	4b38      	ldr	r3, [pc, #224]	@ (800d2f8 <CreateInfoPage+0xf8>)
 800d216:	6483      	str	r3, [r0, #72]	@ 0x48
  pInfoPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, 0, 240, 32), "Info", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800d218:	af0a      	add	r7, sp, #40	@ 0x28
 800d21a:	f04f 0820 	mov.w	r8, #32
 800d21e:	f8cd 8000 	str.w	r8, [sp]
 800d222:	23f0      	movs	r3, #240	@ 0xf0
 800d224:	2200      	movs	r2, #0
 800d226:	4611      	mov	r1, r2
 800d228:	4638      	mov	r0, r7
 800d22a:	f7fc f82f 	bl	800928c <JSB_UI_Rect>
 800d22e:	2400      	movs	r4, #0
 800d230:	9408      	str	r4, [sp, #32]
 800d232:	9407      	str	r4, [sp, #28]
 800d234:	9406      	str	r4, [sp, #24]
 800d236:	9505      	str	r5, [sp, #20]
 800d238:	9404      	str	r4, [sp, #16]
 800d23a:	f242 1304 	movw	r3, #8452	@ 0x2104
 800d23e:	9303      	str	r3, [sp, #12]
 800d240:	9402      	str	r4, [sp, #8]
 800d242:	4b2e      	ldr	r3, [pc, #184]	@ (800d2fc <CreateInfoPage+0xfc>)
 800d244:	9301      	str	r3, [sp, #4]
 800d246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d24e:	4628      	mov	r0, r5
 800d250:	f7fc f82f 	bl	80092b2 <JSB_UI_CreateControl>
 800d254:	4601      	mov	r1, r0
 800d256:	4b2a      	ldr	r3, [pc, #168]	@ (800d300 <CreateInfoPage+0x100>)
 800d258:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInfoPage, pInfoPage_TitleButton);
 800d25a:	6830      	ldr	r0, [r6, #0]
 800d25c:	f7fc f971 	bl	8009542 <JSB_UI_AddControlToPage>
  pInfoPage_RadioInfoButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(30, 304, 60, 32), "Radio", 0, Page_ButtonColor, NULL, 1, &InfoPage_RadioInfoButtonPressed, NULL, NULL);
 800d260:	af0e      	add	r7, sp, #56	@ 0x38
 800d262:	f8cd 8000 	str.w	r8, [sp]
 800d266:	233c      	movs	r3, #60	@ 0x3c
 800d268:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800d26c:	211e      	movs	r1, #30
 800d26e:	4638      	mov	r0, r7
 800d270:	f7fc f812 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800d274:	9408      	str	r4, [sp, #32]
 800d276:	9407      	str	r4, [sp, #28]
 800d278:	4b22      	ldr	r3, [pc, #136]	@ (800d304 <CreateInfoPage+0x104>)
 800d27a:	9306      	str	r3, [sp, #24]
 800d27c:	9505      	str	r5, [sp, #20]
 800d27e:	9404      	str	r4, [sp, #16]
 800d280:	f647 090f 	movw	r9, #30735	@ 0x780f
 800d284:	f8cd 900c 	str.w	r9, [sp, #12]
 800d288:	9402      	str	r4, [sp, #8]
 800d28a:	4b1f      	ldr	r3, [pc, #124]	@ (800d308 <CreateInfoPage+0x108>)
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d296:	4628      	mov	r0, r5
 800d298:	f7fc f80b 	bl	80092b2 <JSB_UI_CreateControl>
 800d29c:	4601      	mov	r1, r0
 800d29e:	4b1b      	ldr	r3, [pc, #108]	@ (800d30c <CreateInfoPage+0x10c>)
 800d2a0:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInfoPage, pInfoPage_RadioInfoButton);
 800d2a2:	6830      	ldr	r0, [r6, #0]
 800d2a4:	f7fc f94d 	bl	8009542 <JSB_UI_AddControlToPage>
  pInfoPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, 304, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &InfoPage_HomeButtonPressed, NULL, NULL);
 800d2a8:	af12      	add	r7, sp, #72	@ 0x48
 800d2aa:	f8cd 8000 	str.w	r8, [sp]
 800d2ae:	2364      	movs	r3, #100	@ 0x64
 800d2b0:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800d2b4:	2178      	movs	r1, #120	@ 0x78
 800d2b6:	4638      	mov	r0, r7
 800d2b8:	f7fb ffee 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800d2bc:	9408      	str	r4, [sp, #32]
 800d2be:	9407      	str	r4, [sp, #28]
 800d2c0:	4b13      	ldr	r3, [pc, #76]	@ (800d310 <CreateInfoPage+0x110>)
 800d2c2:	9306      	str	r3, [sp, #24]
 800d2c4:	9505      	str	r5, [sp, #20]
 800d2c6:	9404      	str	r4, [sp, #16]
 800d2c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d2cc:	9402      	str	r4, [sp, #8]
 800d2ce:	4b11      	ldr	r3, [pc, #68]	@ (800d314 <CreateInfoPage+0x114>)
 800d2d0:	9301      	str	r3, [sp, #4]
 800d2d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d2da:	4628      	mov	r0, r5
 800d2dc:	f7fb ffe9 	bl	80092b2 <JSB_UI_CreateControl>
 800d2e0:	4601      	mov	r1, r0
 800d2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d318 <CreateInfoPage+0x118>)
 800d2e4:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInfoPage, pInfoPage_HomeButton);
 800d2e6:	6830      	ldr	r0, [r6, #0]
 800d2e8:	f7fc f92b 	bl	8009542 <JSB_UI_AddControlToPage>
}
 800d2ec:	b017      	add	sp, #92	@ 0x5c
 800d2ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20017228 	.word	0x20017228
 800d2f8:	0800b345 	.word	0x0800b345
 800d2fc:	08012c38 	.word	0x08012c38
 800d300:	20017224 	.word	0x20017224
 800d304:	0800c285 	.word	0x0800c285
 800d308:	08012cf8 	.word	0x08012cf8
 800d30c:	20017220 	.word	0x20017220
 800d310:	0800c299 	.word	0x0800c299
 800d314:	08012c40 	.word	0x08012c40
 800d318:	2001721c 	.word	0x2001721c

0800d31c <CreateRadioInfoPage>:
{
 800d31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d320:	b092      	sub	sp, #72	@ 0x48
  UI_pRadioInfoPage = JSB_UI_CreatePage();
 800d322:	f7fb ffad 	bl	8009280 <JSB_UI_CreatePage>
 800d326:	4f28      	ldr	r7, [pc, #160]	@ (800d3c8 <CreateRadioInfoPage+0xac>)
 800d328:	6038      	str	r0, [r7, #0]
  UI_pRadioInfoPage->ContinuousRefresh = 1;
 800d32a:	2501      	movs	r5, #1
 800d32c:	f880 5044 	strb.w	r5, [r0, #68]	@ 0x44
  UI_pRadioInfoPage->pCustomDrawHandler = &RadioInfoPage_CustomDraw;
 800d330:	4b26      	ldr	r3, [pc, #152]	@ (800d3cc <CreateRadioInfoPage+0xb0>)
 800d332:	6483      	str	r3, [r0, #72]	@ 0x48
  pRadioInfoPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, 0, 240, 32), "Radio info", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800d334:	ae0a      	add	r6, sp, #40	@ 0x28
 800d336:	f04f 0820 	mov.w	r8, #32
 800d33a:	f8cd 8000 	str.w	r8, [sp]
 800d33e:	23f0      	movs	r3, #240	@ 0xf0
 800d340:	2200      	movs	r2, #0
 800d342:	4611      	mov	r1, r2
 800d344:	4630      	mov	r0, r6
 800d346:	f7fb ffa1 	bl	800928c <JSB_UI_Rect>
 800d34a:	2400      	movs	r4, #0
 800d34c:	9408      	str	r4, [sp, #32]
 800d34e:	9407      	str	r4, [sp, #28]
 800d350:	9406      	str	r4, [sp, #24]
 800d352:	9505      	str	r5, [sp, #20]
 800d354:	9404      	str	r4, [sp, #16]
 800d356:	f242 1304 	movw	r3, #8452	@ 0x2104
 800d35a:	9303      	str	r3, [sp, #12]
 800d35c:	9402      	str	r4, [sp, #8]
 800d35e:	4b1c      	ldr	r3, [pc, #112]	@ (800d3d0 <CreateRadioInfoPage+0xb4>)
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d36a:	4628      	mov	r0, r5
 800d36c:	f7fb ffa1 	bl	80092b2 <JSB_UI_CreateControl>
 800d370:	4601      	mov	r1, r0
 800d372:	4b18      	ldr	r3, [pc, #96]	@ (800d3d4 <CreateRadioInfoPage+0xb8>)
 800d374:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pRadioInfoPage, pRadioInfoPage_TitleButton);
 800d376:	6838      	ldr	r0, [r7, #0]
 800d378:	f7fc f8e3 	bl	8009542 <JSB_UI_AddControlToPage>
  pRadioInfoPage_BackButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, 304, 100, 32), "Back", 0, Page_ButtonColor, NULL, 1, &RadioInfoPage_BackButtonPressed, NULL, NULL);
 800d37c:	ae0e      	add	r6, sp, #56	@ 0x38
 800d37e:	f8cd 8000 	str.w	r8, [sp]
 800d382:	2364      	movs	r3, #100	@ 0x64
 800d384:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800d388:	2178      	movs	r1, #120	@ 0x78
 800d38a:	4630      	mov	r0, r6
 800d38c:	f7fb ff84 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800d390:	9408      	str	r4, [sp, #32]
 800d392:	9407      	str	r4, [sp, #28]
 800d394:	4b10      	ldr	r3, [pc, #64]	@ (800d3d8 <CreateRadioInfoPage+0xbc>)
 800d396:	9306      	str	r3, [sp, #24]
 800d398:	9505      	str	r5, [sp, #20]
 800d39a:	9404      	str	r4, [sp, #16]
 800d39c:	f647 030f 	movw	r3, #30735	@ 0x780f
 800d3a0:	9303      	str	r3, [sp, #12]
 800d3a2:	9402      	str	r4, [sp, #8]
 800d3a4:	4b0d      	ldr	r3, [pc, #52]	@ (800d3dc <CreateRadioInfoPage+0xc0>)
 800d3a6:	9301      	str	r3, [sp, #4]
 800d3a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3aa:	9300      	str	r3, [sp, #0]
 800d3ac:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	f7fb ff7e 	bl	80092b2 <JSB_UI_CreateControl>
 800d3b6:	4601      	mov	r1, r0
 800d3b8:	4b09      	ldr	r3, [pc, #36]	@ (800d3e0 <CreateRadioInfoPage+0xc4>)
 800d3ba:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pRadioInfoPage, pRadioInfoPage_BackButton);
 800d3bc:	6838      	ldr	r0, [r7, #0]
 800d3be:	f7fc f8c0 	bl	8009542 <JSB_UI_AddControlToPage>
}
 800d3c2:	b012      	add	sp, #72	@ 0x48
 800d3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c8:	20017218 	.word	0x20017218
 800d3cc:	0800b06d 	.word	0x0800b06d
 800d3d0:	08012d00 	.word	0x08012d00
 800d3d4:	20017214 	.word	0x20017214
 800d3d8:	0800c2ad 	.word	0x0800c2ad
 800d3dc:	08012d0c 	.word	0x08012d0c
 800d3e0:	20017210 	.word	0x20017210

0800d3e4 <CreateDebugInfoPage>:

void CreateDebugInfoPage()
{
 800d3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e8:	b092      	sub	sp, #72	@ 0x48
  UI_pDebugInfoPage = JSB_UI_CreatePage();
 800d3ea:	f7fb ff49 	bl	8009280 <JSB_UI_CreatePage>
 800d3ee:	4f28      	ldr	r7, [pc, #160]	@ (800d490 <CreateDebugInfoPage+0xac>)
 800d3f0:	6038      	str	r0, [r7, #0]
  UI_pDebugInfoPage->ContinuousRefresh = 1;
 800d3f2:	2501      	movs	r5, #1
 800d3f4:	f880 5044 	strb.w	r5, [r0, #68]	@ 0x44

  UI_pDebugInfoPage->pCustomDrawHandler = &DebugInfoPage_CustomDraw;
 800d3f8:	4b26      	ldr	r3, [pc, #152]	@ (800d494 <CreateDebugInfoPage+0xb0>)
 800d3fa:	6483      	str	r3, [r0, #72]	@ 0x48

  pDebugInfoPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, 0, 240, 32), "Debug info", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800d3fc:	ae0a      	add	r6, sp, #40	@ 0x28
 800d3fe:	f04f 0820 	mov.w	r8, #32
 800d402:	f8cd 8000 	str.w	r8, [sp]
 800d406:	23f0      	movs	r3, #240	@ 0xf0
 800d408:	2200      	movs	r2, #0
 800d40a:	4611      	mov	r1, r2
 800d40c:	4630      	mov	r0, r6
 800d40e:	f7fb ff3d 	bl	800928c <JSB_UI_Rect>
 800d412:	2400      	movs	r4, #0
 800d414:	9408      	str	r4, [sp, #32]
 800d416:	9407      	str	r4, [sp, #28]
 800d418:	9406      	str	r4, [sp, #24]
 800d41a:	9505      	str	r5, [sp, #20]
 800d41c:	9404      	str	r4, [sp, #16]
 800d41e:	f242 1304 	movw	r3, #8452	@ 0x2104
 800d422:	9303      	str	r3, [sp, #12]
 800d424:	9402      	str	r4, [sp, #8]
 800d426:	4b1c      	ldr	r3, [pc, #112]	@ (800d498 <CreateDebugInfoPage+0xb4>)
 800d428:	9301      	str	r3, [sp, #4]
 800d42a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d432:	4628      	mov	r0, r5
 800d434:	f7fb ff3d 	bl	80092b2 <JSB_UI_CreateControl>
 800d438:	4601      	mov	r1, r0
 800d43a:	4b18      	ldr	r3, [pc, #96]	@ (800d49c <CreateDebugInfoPage+0xb8>)
 800d43c:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pDebugInfoPage, pDebugInfoPage_TitleButton);
 800d43e:	6838      	ldr	r0, [r7, #0]
 800d440:	f7fc f87f 	bl	8009542 <JSB_UI_AddControlToPage>
  //
  pDebugInfoPage_BackButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, 304, 100, 32), "Back", 0, Page_ButtonColor, NULL, 1, &DebugInfoPage_BackButtonPressed, NULL, NULL);
 800d444:	ae0e      	add	r6, sp, #56	@ 0x38
 800d446:	f8cd 8000 	str.w	r8, [sp]
 800d44a:	2364      	movs	r3, #100	@ 0x64
 800d44c:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800d450:	2178      	movs	r1, #120	@ 0x78
 800d452:	4630      	mov	r0, r6
 800d454:	f7fb ff20 	bl	8009298 <JSB_UI_RectFromCentrePoint>
 800d458:	9408      	str	r4, [sp, #32]
 800d45a:	9407      	str	r4, [sp, #28]
 800d45c:	4b10      	ldr	r3, [pc, #64]	@ (800d4a0 <CreateDebugInfoPage+0xbc>)
 800d45e:	9306      	str	r3, [sp, #24]
 800d460:	9505      	str	r5, [sp, #20]
 800d462:	9404      	str	r4, [sp, #16]
 800d464:	f647 030f 	movw	r3, #30735	@ 0x780f
 800d468:	9303      	str	r3, [sp, #12]
 800d46a:	9402      	str	r4, [sp, #8]
 800d46c:	4b0d      	ldr	r3, [pc, #52]	@ (800d4a4 <CreateDebugInfoPage+0xc0>)
 800d46e:	9301      	str	r3, [sp, #4]
 800d470:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d478:	4628      	mov	r0, r5
 800d47a:	f7fb ff1a 	bl	80092b2 <JSB_UI_CreateControl>
 800d47e:	4601      	mov	r1, r0
 800d480:	4b09      	ldr	r3, [pc, #36]	@ (800d4a8 <CreateDebugInfoPage+0xc4>)
 800d482:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pDebugInfoPage, pDebugInfoPage_BackButton);
 800d484:	6838      	ldr	r0, [r7, #0]
 800d486:	f7fc f85c 	bl	8009542 <JSB_UI_AddControlToPage>
}
 800d48a:	b012      	add	sp, #72	@ 0x48
 800d48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d490:	2001720c 	.word	0x2001720c
 800d494:	0800b011 	.word	0x0800b011
 800d498:	08012d14 	.word	0x08012d14
 800d49c:	20017208 	.word	0x20017208
 800d4a0:	0800c2c1 	.word	0x0800c2c1
 800d4a4:	08012d0c 	.word	0x08012d0c
 800d4a8:	20017204 	.word	0x20017204

0800d4ac <ProcessIR>:

///////////////////////////////////////////////////////////////////////////////
// IR:

void ProcessIR()
{
 800d4ac:	b510      	push	{r4, lr}
 800d4ae:	b082      	sub	sp, #8
  uint8_t IR_Address, IR_Command, IR_Toggle, IR_Error;
  static uint8_t IR_PreviousToggle = -1;

  if (JSB_IR_RC5_GetIfAvailable(&IR_Address, &IR_Command, &IR_Toggle, &IR_Error))
 800d4b0:	ab01      	add	r3, sp, #4
 800d4b2:	f10d 0205 	add.w	r2, sp, #5
 800d4b6:	f10d 0106 	add.w	r1, sp, #6
 800d4ba:	f10d 0007 	add.w	r0, sp, #7
 800d4be:	f7fb fa6b 	bl	8008998 <JSB_IR_RC5_GetIfAvailable>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	d059      	beq.n	800d57a <ProcessIR+0xce>
  {
    if (!IR_Error)
 800d4c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d155      	bne.n	800d57a <ProcessIR+0xce>
    {
      if (IR_Address == 16)
 800d4ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4d2:	2b10      	cmp	r3, #16
 800d4d4:	d053      	beq.n	800d57e <ProcessIR+0xd2>
          PA_SetVolume(Clamp_float(PA_MasterVolume_dB - 1.0f, PA_MasterVolume_dB_Min, PA_MasterVolume_dB_Max));
        else if (IR_Command == 16) // Volume up.
          PA_SetVolume(Clamp_float(PA_MasterVolume_dB + 1.0f, PA_MasterVolume_dB_Min, PA_MasterVolume_dB_Max));
      }

      if (IR_Address == 20)
 800d4d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4da:	2b14      	cmp	r3, #20
 800d4dc:	d075      	beq.n	800d5ca <ProcessIR+0x11e>
          Process_SetGain(0.1f);
        else if (IR_Command == 32) // RightBar.
          Process_SetGain(Process_Gain_Default);
      }

      if (IR_Toggle != IR_PreviousToggle)
 800d4de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d4e2:	4bcb      	ldr	r3, [pc, #812]	@ (800d810 <ProcessIR+0x364>)
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d043      	beq.n	800d572 <ProcessIR+0xc6>
      {
        if ((IR_Address == 16) && (IR_Command == 13)) // 'Mute'
 800d4ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4ee:	2b10      	cmp	r3, #16
 800d4f0:	f000 80bf 	beq.w	800d672 <ProcessIR+0x1c6>
        {
          SetUserMute(!PA_UserMuted);
        }

        if ((IR_Address == 16) && (IR_Command == 12)) // 'Power'
 800d4f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4f8:	2b10      	cmp	r3, #16
 800d4fa:	f000 80c7 	beq.w	800d68c <ProcessIR+0x1e0>
        {
          SetPowerOn(!PowerOn);
        }

        if (IR_Address == 17)
 800d4fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d502:	2b11      	cmp	r3, #17
 800d504:	f000 80cf 	beq.w	800d6a6 <ProcessIR+0x1fa>
                SetInputChannel(InputChannel + 1);
            }
          }
        }

        if (IR_Command == 63)
 800d508:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d50c:	2b3f      	cmp	r3, #63	@ 0x3f
 800d50e:	f000 80f7 	beq.w	800d700 <ProcessIR+0x254>
            SetInputChannel(icSi468x_FM);
          else if (IR_Address == 18) // '8'
            SetInputChannel(icAuxIn);
        }

        if ((IR_Address == 20) && (IR_Command == 53)) // Play
 800d512:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d516:	2b14      	cmp	r3, #20
 800d518:	f000 8148 	beq.w	800d7ac <ProcessIR+0x300>
          SetUserMute(0);

        if ((IR_Address == 20) && (IR_Command == 48)) // Pause
 800d51c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d520:	2b14      	cmp	r3, #20
 800d522:	f000 814c 	beq.w	800d7be <ProcessIR+0x312>
          SetUserMute(!PA_UserMuted);

        if ((IR_Address == 20) && (IR_Command == 54)) // Stop
 800d526:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d52a:	2b14      	cmp	r3, #20
 800d52c:	f000 8154 	beq.w	800d7d8 <ProcessIR+0x32c>
          SetUserMute(1);

        if ((IR_Address == 20) && (IR_Command == 59)) // 'BACK'
 800d530:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d534:	2b14      	cmp	r3, #20
 800d536:	f000 8158 	beq.w	800d7ea <ProcessIR+0x33e>
          SetCurrentPage(UI_pHomePage);

        if ((IR_Address == 20) && (IR_Command == 28)) // 'OPT+'
 800d53a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d53e:	2b14      	cmp	r3, #20
 800d540:	f000 815d 	beq.w	800d7fe <ProcessIR+0x352>
          PA_SetVolume(0.0f);

        if ((IR_Address == 17) && (IR_Command == 15)) // 'i' (Info)
 800d544:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d548:	2b11      	cmp	r3, #17
 800d54a:	f000 817b 	beq.w	800d844 <ProcessIR+0x398>
          SetCurrentPage(UI_pInfoPage);

        if ((IR_Address == 16) && (IR_Command == 63)) // Speaker?
 800d54e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d552:	2b10      	cmp	r3, #16
 800d554:	f000 8180 	beq.w	800d858 <ProcessIR+0x3ac>
          BluetoothOut_SetOffOn(!BluetoothOut_On);

        if ((IR_Address == 17) && (IR_Command == 46)) // 'TV/RADIO'
 800d558:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800d55c:	2c11      	cmp	r4, #17
 800d55e:	f000 8188 	beq.w	800d872 <ProcessIR+0x3c6>
            IR_UseChannelButtonsToControlRadio = 1;
            Radio_ServiceToTune = sttCurrent; // Re-tune radio. Use in case the previous tune didn't work out e.g. DAB was silent.
          }
        }

        if ((IR_Address == 16) && (IR_Command == 38)) // 'SLEEP'
 800d562:	2c10      	cmp	r4, #16
 800d564:	f000 8195 	beq.w	800d892 <ProcessIR+0x3e6>
          SetPowerOn(!PowerOn);

        if ((IR_Address == 16) && (IR_Command == 59)) // 'SOURCE'
 800d568:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d56c:	2b10      	cmp	r3, #16
 800d56e:	f000 819d 	beq.w	800d8ac <ProcessIR+0x400>
        {
          IR_UseChannelButtonsToControlRadio = 0;
        }
      }

      IR_PreviousToggle = IR_Toggle;
 800d572:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d576:	4ba6      	ldr	r3, [pc, #664]	@ (800d810 <ProcessIR+0x364>)
 800d578:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800d57a:	b002      	add	sp, #8
 800d57c:	bd10      	pop	{r4, pc}
        if (IR_Command == 17) // Volume down.
 800d57e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d582:	2b11      	cmp	r3, #17
 800d584:	d011      	beq.n	800d5aa <ProcessIR+0xfe>
        else if (IR_Command == 16) // Volume up.
 800d586:	2b10      	cmp	r3, #16
 800d588:	d1a5      	bne.n	800d4d6 <ProcessIR+0x2a>
          PA_SetVolume(Clamp_float(PA_MasterVolume_dB + 1.0f, PA_MasterVolume_dB_Min, PA_MasterVolume_dB_Max));
 800d58a:	4ba2      	ldr	r3, [pc, #648]	@ (800d814 <ProcessIR+0x368>)
 800d58c:	ed93 7a00 	vldr	s14, [r3]
 800d590:	4aa1      	ldr	r2, [pc, #644]	@ (800d818 <ProcessIR+0x36c>)
 800d592:	49a2      	ldr	r1, [pc, #648]	@ (800d81c <ProcessIR+0x370>)
 800d594:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d59c:	ee17 0a90 	vmov	r0, s15
 800d5a0:	f7fa fa31 	bl	8007a06 <Clamp_float>
 800d5a4:	f7fe fef0 	bl	800c388 <PA_SetVolume>
 800d5a8:	e795      	b.n	800d4d6 <ProcessIR+0x2a>
          PA_SetVolume(Clamp_float(PA_MasterVolume_dB - 1.0f, PA_MasterVolume_dB_Min, PA_MasterVolume_dB_Max));
 800d5aa:	4b9a      	ldr	r3, [pc, #616]	@ (800d814 <ProcessIR+0x368>)
 800d5ac:	ed93 7a00 	vldr	s14, [r3]
 800d5b0:	4a99      	ldr	r2, [pc, #612]	@ (800d818 <ProcessIR+0x36c>)
 800d5b2:	499a      	ldr	r1, [pc, #616]	@ (800d81c <ProcessIR+0x370>)
 800d5b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d5b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5bc:	ee17 0a90 	vmov	r0, s15
 800d5c0:	f7fa fa21 	bl	8007a06 <Clamp_float>
 800d5c4:	f7fe fee0 	bl	800c388 <PA_SetVolume>
 800d5c8:	e785      	b.n	800d4d6 <ProcessIR+0x2a>
        if (IR_Command == 50) // Left.
 800d5ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d5ce:	3b20      	subs	r3, #32
 800d5d0:	2b14      	cmp	r3, #20
 800d5d2:	d884      	bhi.n	800d4de <ProcessIR+0x32>
 800d5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d5dc <ProcessIR+0x130>)
 800d5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5da:	bf00      	nop
 800d5dc:	0800d669 	.word	0x0800d669
 800d5e0:	0800d661 	.word	0x0800d661
 800d5e4:	0800d4df 	.word	0x0800d4df
 800d5e8:	0800d4df 	.word	0x0800d4df
 800d5ec:	0800d4df 	.word	0x0800d4df
 800d5f0:	0800d4df 	.word	0x0800d4df
 800d5f4:	0800d4df 	.word	0x0800d4df
 800d5f8:	0800d4df 	.word	0x0800d4df
 800d5fc:	0800d4df 	.word	0x0800d4df
 800d600:	0800d4df 	.word	0x0800d4df
 800d604:	0800d4df 	.word	0x0800d4df
 800d608:	0800d4df 	.word	0x0800d4df
 800d60c:	0800d4df 	.word	0x0800d4df
 800d610:	0800d4df 	.word	0x0800d4df
 800d614:	0800d4df 	.word	0x0800d4df
 800d618:	0800d4df 	.word	0x0800d4df
 800d61c:	0800d4df 	.word	0x0800d4df
 800d620:	0800d4df 	.word	0x0800d4df
 800d624:	0800d631 	.word	0x0800d631
 800d628:	0800d4df 	.word	0x0800d4df
 800d62c:	0800d649 	.word	0x0800d649
          Process_SetGain(Process_Gain - 0.01f);
 800d630:	4b7b      	ldr	r3, [pc, #492]	@ (800d820 <ProcessIR+0x374>)
 800d632:	ed93 7a00 	vldr	s14, [r3]
 800d636:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 800d824 <ProcessIR+0x378>
 800d63a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d63e:	ee17 0a90 	vmov	r0, s15
 800d642:	f7fe fe5b 	bl	800c2fc <Process_SetGain>
 800d646:	e74a      	b.n	800d4de <ProcessIR+0x32>
          Process_SetGain(Process_Gain + 0.01f);
 800d648:	4b75      	ldr	r3, [pc, #468]	@ (800d820 <ProcessIR+0x374>)
 800d64a:	ed93 7a00 	vldr	s14, [r3]
 800d64e:	eddf 7a75 	vldr	s15, [pc, #468]	@ 800d824 <ProcessIR+0x378>
 800d652:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d656:	ee17 0a90 	vmov	r0, s15
 800d65a:	f7fe fe4f 	bl	800c2fc <Process_SetGain>
 800d65e:	e73e      	b.n	800d4de <ProcessIR+0x32>
          Process_SetGain(0.1f);
 800d660:	4871      	ldr	r0, [pc, #452]	@ (800d828 <ProcessIR+0x37c>)
 800d662:	f7fe fe4b 	bl	800c2fc <Process_SetGain>
 800d666:	e73a      	b.n	800d4de <ProcessIR+0x32>
          Process_SetGain(Process_Gain_Default);
 800d668:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d66c:	f7fe fe46 	bl	800c2fc <Process_SetGain>
 800d670:	e735      	b.n	800d4de <ProcessIR+0x32>
        if ((IR_Address == 16) && (IR_Command == 13)) // 'Mute'
 800d672:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d676:	2b0d      	cmp	r3, #13
 800d678:	f47f af3c 	bne.w	800d4f4 <ProcessIR+0x48>
          SetUserMute(!PA_UserMuted);
 800d67c:	4b6b      	ldr	r3, [pc, #428]	@ (800d82c <ProcessIR+0x380>)
 800d67e:	7818      	ldrb	r0, [r3, #0]
 800d680:	fab0 f080 	clz	r0, r0
 800d684:	0940      	lsrs	r0, r0, #5
 800d686:	f7fe fefd 	bl	800c484 <SetUserMute>
 800d68a:	e733      	b.n	800d4f4 <ProcessIR+0x48>
        if ((IR_Address == 16) && (IR_Command == 12)) // 'Power'
 800d68c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d690:	2b0c      	cmp	r3, #12
 800d692:	f47f af34 	bne.w	800d4fe <ProcessIR+0x52>
          SetPowerOn(!PowerOn);
 800d696:	4b66      	ldr	r3, [pc, #408]	@ (800d830 <ProcessIR+0x384>)
 800d698:	7818      	ldrb	r0, [r3, #0]
 800d69a:	fab0 f080 	clz	r0, r0
 800d69e:	0940      	lsrs	r0, r0, #5
 800d6a0:	f7fe fe18 	bl	800c2d4 <SetPowerOn>
 800d6a4:	e72b      	b.n	800d4fe <ProcessIR+0x52>
          if (IR_UseChannelButtonsToControlRadio)
 800d6a6:	4b63      	ldr	r3, [pc, #396]	@ (800d834 <ProcessIR+0x388>)
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	b173      	cbz	r3, 800d6ca <ProcessIR+0x21e>
            if (IR_Command == 33) // Channel down.
 800d6ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d6b0:	2b21      	cmp	r3, #33	@ 0x21
 800d6b2:	d006      	beq.n	800d6c2 <ProcessIR+0x216>
            else if (IR_Command == 32) // Channel up.
 800d6b4:	2b20      	cmp	r3, #32
 800d6b6:	f47f af27 	bne.w	800d508 <ProcessIR+0x5c>
              Radio_ServiceToTune = sttNext;
 800d6ba:	4b5f      	ldr	r3, [pc, #380]	@ (800d838 <ProcessIR+0x38c>)
 800d6bc:	2203      	movs	r2, #3
 800d6be:	701a      	strb	r2, [r3, #0]
 800d6c0:	e722      	b.n	800d508 <ProcessIR+0x5c>
              Radio_ServiceToTune = sttPrevious;
 800d6c2:	4b5d      	ldr	r3, [pc, #372]	@ (800d838 <ProcessIR+0x38c>)
 800d6c4:	2202      	movs	r2, #2
 800d6c6:	701a      	strb	r2, [r3, #0]
 800d6c8:	e71e      	b.n	800d508 <ProcessIR+0x5c>
            if (IR_Command == 33) // Channel down.
 800d6ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d6ce:	2b21      	cmp	r3, #33	@ 0x21
 800d6d0:	d00c      	beq.n	800d6ec <ProcessIR+0x240>
            else if (IR_Command == 32) // Channel up.
 800d6d2:	2b20      	cmp	r3, #32
 800d6d4:	f47f af18 	bne.w	800d508 <ProcessIR+0x5c>
              if (InputChannel < icMax)
 800d6d8:	4b58      	ldr	r3, [pc, #352]	@ (800d83c <ProcessIR+0x390>)
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	2b07      	cmp	r3, #7
 800d6de:	f63f af13 	bhi.w	800d508 <ProcessIR+0x5c>
                SetInputChannel(InputChannel + 1);
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	b2d8      	uxtb	r0, r3
 800d6e6:	f7fd fc05 	bl	800aef4 <SetInputChannel>
 800d6ea:	e70d      	b.n	800d508 <ProcessIR+0x5c>
              if (InputChannel > icNone)
 800d6ec:	4b53      	ldr	r3, [pc, #332]	@ (800d83c <ProcessIR+0x390>)
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f43f af09 	beq.w	800d508 <ProcessIR+0x5c>
                SetInputChannel(InputChannel - 1);
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	b2d8      	uxtb	r0, r3
 800d6fa:	f7fd fbfb 	bl	800aef4 <SetInputChannel>
 800d6fe:	e703      	b.n	800d508 <ProcessIR+0x5c>
          if (IR_Address == 4) // '0'
 800d700:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d704:	2b16      	cmp	r3, #22
 800d706:	f63f af04 	bhi.w	800d512 <ProcessIR+0x66>
 800d70a:	a201      	add	r2, pc, #4	@ (adr r2, 800d710 <ProcessIR+0x264>)
 800d70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d710:	0800d795 	.word	0x0800d795
 800d714:	0800d513 	.word	0x0800d513
 800d718:	0800d513 	.word	0x0800d513
 800d71c:	0800d513 	.word	0x0800d513
 800d720:	0800d76d 	.word	0x0800d76d
 800d724:	0800d78d 	.word	0x0800d78d
 800d728:	0800d513 	.word	0x0800d513
 800d72c:	0800d513 	.word	0x0800d513
 800d730:	0800d513 	.word	0x0800d513
 800d734:	0800d513 	.word	0x0800d513
 800d738:	0800d513 	.word	0x0800d513
 800d73c:	0800d513 	.word	0x0800d513
 800d740:	0800d77d 	.word	0x0800d77d
 800d744:	0800d513 	.word	0x0800d513
 800d748:	0800d513 	.word	0x0800d513
 800d74c:	0800d513 	.word	0x0800d513
 800d750:	0800d513 	.word	0x0800d513
 800d754:	0800d775 	.word	0x0800d775
 800d758:	0800d7a5 	.word	0x0800d7a5
 800d75c:	0800d513 	.word	0x0800d513
 800d760:	0800d785 	.word	0x0800d785
 800d764:	0800d513 	.word	0x0800d513
 800d768:	0800d79d 	.word	0x0800d79d
            SetInputChannel(icNone);
 800d76c:	2000      	movs	r0, #0
 800d76e:	f7fd fbc1 	bl	800aef4 <SetInputChannel>
 800d772:	e6ce      	b.n	800d512 <ProcessIR+0x66>
            SetInputChannel(icSPDIF0);
 800d774:	2001      	movs	r0, #1
 800d776:	f7fd fbbd 	bl	800aef4 <SetInputChannel>
 800d77a:	e6ca      	b.n	800d512 <ProcessIR+0x66>
            SetInputChannel(icSPDIF1);
 800d77c:	2002      	movs	r0, #2
 800d77e:	f7fd fbb9 	bl	800aef4 <SetInputChannel>
 800d782:	e6c6      	b.n	800d512 <ProcessIR+0x66>
            SetInputChannel(icSPDIF2);
 800d784:	2003      	movs	r0, #3
 800d786:	f7fd fbb5 	bl	800aef4 <SetInputChannel>
 800d78a:	e6c2      	b.n	800d512 <ProcessIR+0x66>
            SetInputChannel(icSPDIF3);
 800d78c:	2004      	movs	r0, #4
 800d78e:	f7fd fbb1 	bl	800aef4 <SetInputChannel>
 800d792:	e6be      	b.n	800d512 <ProcessIR+0x66>
            SetInputChannel(icSi468x_DAB);
 800d794:	2005      	movs	r0, #5
 800d796:	f7fd fbad 	bl	800aef4 <SetInputChannel>
 800d79a:	e6ba      	b.n	800d512 <ProcessIR+0x66>
            SetInputChannel(icSi468x_FM);
 800d79c:	2006      	movs	r0, #6
 800d79e:	f7fd fba9 	bl	800aef4 <SetInputChannel>
 800d7a2:	e6b6      	b.n	800d512 <ProcessIR+0x66>
            SetInputChannel(icAuxIn);
 800d7a4:	2008      	movs	r0, #8
 800d7a6:	f7fd fba5 	bl	800aef4 <SetInputChannel>
 800d7aa:	e6b2      	b.n	800d512 <ProcessIR+0x66>
        if ((IR_Address == 20) && (IR_Command == 53)) // Play
 800d7ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d7b0:	2b35      	cmp	r3, #53	@ 0x35
 800d7b2:	f47f aeb3 	bne.w	800d51c <ProcessIR+0x70>
          SetUserMute(0);
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	f7fe fe64 	bl	800c484 <SetUserMute>
 800d7bc:	e6ae      	b.n	800d51c <ProcessIR+0x70>
        if ((IR_Address == 20) && (IR_Command == 48)) // Pause
 800d7be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d7c2:	2b30      	cmp	r3, #48	@ 0x30
 800d7c4:	f47f aeaf 	bne.w	800d526 <ProcessIR+0x7a>
          SetUserMute(!PA_UserMuted);
 800d7c8:	4b18      	ldr	r3, [pc, #96]	@ (800d82c <ProcessIR+0x380>)
 800d7ca:	7818      	ldrb	r0, [r3, #0]
 800d7cc:	fab0 f080 	clz	r0, r0
 800d7d0:	0940      	lsrs	r0, r0, #5
 800d7d2:	f7fe fe57 	bl	800c484 <SetUserMute>
 800d7d6:	e6a6      	b.n	800d526 <ProcessIR+0x7a>
        if ((IR_Address == 20) && (IR_Command == 54)) // Stop
 800d7d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d7dc:	2b36      	cmp	r3, #54	@ 0x36
 800d7de:	f47f aea7 	bne.w	800d530 <ProcessIR+0x84>
          SetUserMute(1);
 800d7e2:	2001      	movs	r0, #1
 800d7e4:	f7fe fe4e 	bl	800c484 <SetUserMute>
 800d7e8:	e6a2      	b.n	800d530 <ProcessIR+0x84>
        if ((IR_Address == 20) && (IR_Command == 59)) // 'BACK'
 800d7ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d7ee:	2b3b      	cmp	r3, #59	@ 0x3b
 800d7f0:	f47f aea3 	bne.w	800d53a <ProcessIR+0x8e>
          SetCurrentPage(UI_pHomePage);
 800d7f4:	4b12      	ldr	r3, [pc, #72]	@ (800d840 <ProcessIR+0x394>)
 800d7f6:	6818      	ldr	r0, [r3, #0]
 800d7f8:	f7fe fccc 	bl	800c194 <SetCurrentPage>
 800d7fc:	e69d      	b.n	800d53a <ProcessIR+0x8e>
        if ((IR_Address == 20) && (IR_Command == 28)) // 'OPT+'
 800d7fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d802:	2b1c      	cmp	r3, #28
 800d804:	f47f ae9e 	bne.w	800d544 <ProcessIR+0x98>
          PA_SetVolume(0.0f);
 800d808:	2000      	movs	r0, #0
 800d80a:	f7fe fdbd 	bl	800c388 <PA_SetVolume>
 800d80e:	e699      	b.n	800d544 <ProcessIR+0x98>
 800d810:	200003f4 	.word	0x200003f4
 800d814:	200153e0 	.word	0x200153e0
 800d818:	41a00000 	.word	0x41a00000
 800d81c:	c2a00000 	.word	0xc2a00000
 800d820:	200003f8 	.word	0x200003f8
 800d824:	3c23d70a 	.word	0x3c23d70a
 800d828:	3dcccccd 	.word	0x3dcccccd
 800d82c:	200153dc 	.word	0x200153dc
 800d830:	20017200 	.word	0x20017200
 800d834:	20017201 	.word	0x20017201
 800d838:	200153c0 	.word	0x200153c0
 800d83c:	20017203 	.word	0x20017203
 800d840:	200172cc 	.word	0x200172cc
        if ((IR_Address == 17) && (IR_Command == 15)) // 'i' (Info)
 800d844:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d848:	2b0f      	cmp	r3, #15
 800d84a:	f47f ae80 	bne.w	800d54e <ProcessIR+0xa2>
          SetCurrentPage(UI_pInfoPage);
 800d84e:	4b1c      	ldr	r3, [pc, #112]	@ (800d8c0 <ProcessIR+0x414>)
 800d850:	6818      	ldr	r0, [r3, #0]
 800d852:	f7fe fc9f 	bl	800c194 <SetCurrentPage>
 800d856:	e67a      	b.n	800d54e <ProcessIR+0xa2>
        if ((IR_Address == 16) && (IR_Command == 63)) // Speaker?
 800d858:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d85c:	2b3f      	cmp	r3, #63	@ 0x3f
 800d85e:	f47f ae7b 	bne.w	800d558 <ProcessIR+0xac>
          BluetoothOut_SetOffOn(!BluetoothOut_On);
 800d862:	4b18      	ldr	r3, [pc, #96]	@ (800d8c4 <ProcessIR+0x418>)
 800d864:	7818      	ldrb	r0, [r3, #0]
 800d866:	fab0 f080 	clz	r0, r0
 800d86a:	0940      	lsrs	r0, r0, #5
 800d86c:	f7fe fdce 	bl	800c40c <BluetoothOut_SetOffOn>
 800d870:	e672      	b.n	800d558 <ProcessIR+0xac>
        if ((IR_Address == 17) && (IR_Command == 46)) // 'TV/RADIO'
 800d872:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d876:	2b2e      	cmp	r3, #46	@ 0x2e
 800d878:	f47f ae73 	bne.w	800d562 <ProcessIR+0xb6>
          if (InputChannelIsRadio())
 800d87c:	f7fd fb6a 	bl	800af54 <InputChannelIsRadio>
 800d880:	2800      	cmp	r0, #0
 800d882:	f43f ae6e 	beq.w	800d562 <ProcessIR+0xb6>
            IR_UseChannelButtonsToControlRadio = 1;
 800d886:	2301      	movs	r3, #1
 800d888:	4a0f      	ldr	r2, [pc, #60]	@ (800d8c8 <ProcessIR+0x41c>)
 800d88a:	7013      	strb	r3, [r2, #0]
            Radio_ServiceToTune = sttCurrent; // Re-tune radio. Use in case the previous tune didn't work out e.g. DAB was silent.
 800d88c:	4a0f      	ldr	r2, [pc, #60]	@ (800d8cc <ProcessIR+0x420>)
 800d88e:	7013      	strb	r3, [r2, #0]
 800d890:	e667      	b.n	800d562 <ProcessIR+0xb6>
        if ((IR_Address == 16) && (IR_Command == 38)) // 'SLEEP'
 800d892:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d896:	2b26      	cmp	r3, #38	@ 0x26
 800d898:	f47f ae66 	bne.w	800d568 <ProcessIR+0xbc>
          SetPowerOn(!PowerOn);
 800d89c:	4b0c      	ldr	r3, [pc, #48]	@ (800d8d0 <ProcessIR+0x424>)
 800d89e:	7818      	ldrb	r0, [r3, #0]
 800d8a0:	fab0 f080 	clz	r0, r0
 800d8a4:	0940      	lsrs	r0, r0, #5
 800d8a6:	f7fe fd15 	bl	800c2d4 <SetPowerOn>
 800d8aa:	e65d      	b.n	800d568 <ProcessIR+0xbc>
        if ((IR_Address == 16) && (IR_Command == 59)) // 'SOURCE'
 800d8ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8b0:	2b3b      	cmp	r3, #59	@ 0x3b
 800d8b2:	f47f ae5e 	bne.w	800d572 <ProcessIR+0xc6>
          IR_UseChannelButtonsToControlRadio = 0;
 800d8b6:	4b04      	ldr	r3, [pc, #16]	@ (800d8c8 <ProcessIR+0x41c>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	701a      	strb	r2, [r3, #0]
 800d8bc:	e659      	b.n	800d572 <ProcessIR+0xc6>
 800d8be:	bf00      	nop
 800d8c0:	20017228 	.word	0x20017228
 800d8c4:	200153c5 	.word	0x200153c5
 800d8c8:	20017201 	.word	0x20017201
 800d8cc:	200153c0 	.word	0x200153c0
 800d8d0:	20017200 	.word	0x20017200

0800d8d4 <Go>:

///////////////////////////////////////////////////////////////////////////////

void Go()
{
 800d8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8d8:	ed2d 8b02 	vpush	{d8}
 800d8dc:	b085      	sub	sp, #20
  uint8_t I2SInput_Started = 0;
  uint8_t I2SInput_StopRequired = 0;
  uint8_t BluetoothOut_StopRequired = 0;
  uint8_t UserButtonPressed = 0;

  PowerOn = 1;
 800d8de:	2401      	movs	r4, #1
 800d8e0:	4ba2      	ldr	r3, [pc, #648]	@ (800db6c <Go+0x298>)
 800d8e2:	701c      	strb	r4, [r3, #0]

  pGenSPI_Begin = &GenSPI_Begin;
 800d8e4:	4ba2      	ldr	r3, [pc, #648]	@ (800db70 <Go+0x29c>)
 800d8e6:	4aa3      	ldr	r2, [pc, #652]	@ (800db74 <Go+0x2a0>)
 800d8e8:	601a      	str	r2, [r3, #0]
  pGenSPI_End = &GenSPI_End;
 800d8ea:	4ba3      	ldr	r3, [pc, #652]	@ (800db78 <Go+0x2a4>)
 800d8ec:	4aa3      	ldr	r2, [pc, #652]	@ (800db7c <Go+0x2a8>)
 800d8ee:	601a      	str	r2, [r3, #0]

  JSB_UI_InitializeDisplay();
 800d8f0:	f7fb fe3e 	bl	8009570 <JSB_UI_InitializeDisplay>
  LCD_BacklightOn(1);
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f7fc f95d 	bl	8009bb4 <LCD_BacklightOn>
  //
  JSB_IR_RC5_Initialize(&htim3);
 800d8fa:	48a1      	ldr	r0, [pc, #644]	@ (800db80 <Go+0x2ac>)
 800d8fc:	f7fa fffc 	bl	80088f8 <JSB_IR_RC5_Initialize>
  //
  ADC_Initialize();
 800d900:	f7fc fa3a 	bl	8009d78 <ADC_Initialize>
  ADC_SetGain(10.0f); // Match AR1010 output level (set to maximum) to Si4684 FM output level.
 800d904:	489f      	ldr	r0, [pc, #636]	@ (800db84 <Go+0x2b0>)
 800d906:	f7fc fa07 	bl	8009d18 <ADC_SetGain>
  //
  DAC_Initialize();
 800d90a:	f7fc fa5f 	bl	8009dcc <DAC_Initialize>
  //
  Si4684_Initialize(Si468x_MODE_None);
 800d90e:	2000      	movs	r0, #0
 800d910:	f7fe fbe2 	bl	800c0d8 <Si4684_Initialize>
  Radio_ServiceToTune = sttNone;
 800d914:	2700      	movs	r7, #0
 800d916:	4b9c      	ldr	r3, [pc, #624]	@ (800db88 <Go+0x2b4>)
 800d918:	701f      	strb	r7, [r3, #0]
  //
  AR1010_init();
 800d91a:	f7f9 ff63 	bl	80077e4 <AR1010_init>
  AR1010_auto_tune(101.7, 1); // JSB: Was 96.4 (for Guildford). For Sheffield: 88.6 for Radio Sheffield. 92.1 for Radio 3. 101.7 for Classic FM, 97.4 for Hallam FM.
 800d91e:	4621      	mov	r1, r4
 800d920:	489a      	ldr	r0, [pc, #616]	@ (800db8c <Go+0x2b8>)
 800d922:	f7f9 ff91 	bl	8007848 <AR1010_auto_tune>
  AR1010_set_volume(18);
 800d926:	2012      	movs	r0, #18
 800d928:	f7fa f814 	bl	8007954 <AR1010_set_volume>
  //
  PA_Initialize(0);
 800d92c:	4638      	mov	r0, r7
 800d92e:	f7fc fb19 	bl	8009f64 <PA_Initialize>
  // PA_Initialize(1); // Headphones.

  InternalMute(0);
 800d932:	4638      	mov	r0, r7
 800d934:	f7fe fb0e 	bl	800bf54 <InternalMute>

  CreateHomePage();
 800d938:	f7fe fe76 	bl	800c628 <CreateHomePage>
  CreateInputPage();
 800d93c:	f7fe ffbe 	bl	800c8bc <CreateInputPage>
  CreateProcessPage();
 800d940:	f7ff f930 	bl	800cba4 <CreateProcessPage>
  CreatePowerAmplifierPage();
 800d944:	f7ff fa0a 	bl	800cd5c <CreatePowerAmplifierPage>
  CreateInfoPage();
 800d948:	f7ff fc5a 	bl	800d200 <CreateInfoPage>
  CreateRadioInfoPage();
 800d94c:	f7ff fce6 	bl	800d31c <CreateRadioInfoPage>
  CreateDebugInfoPage();
 800d950:	f7ff fd48 	bl	800d3e4 <CreateDebugInfoPage>
  CreateBluetoothOutPage();
 800d954:	f7ff faec 	bl	800cf30 <CreateBluetoothOutPage>
  CreateWiFiPage();
 800d958:	f7ff fb9e 	bl	800d098 <CreateWiFiPage>

  SetCurrentPage(UI_pHomePage);
 800d95c:	4b8c      	ldr	r3, [pc, #560]	@ (800db90 <Go+0x2bc>)
 800d95e:	6818      	ldr	r0, [r3, #0]
 800d960:	f7fe fc18 	bl	800c194 <SetCurrentPage>
  uint8_t UserButtonPressed = 0;
 800d964:	46b8      	mov	r8, r7
  uint8_t I2SInput_Started = 0;
 800d966:	463e      	mov	r6, r7
  uint8_t SPDIFRX_Started = 0;
 800d968:	463d      	mov	r5, r7
 800d96a:	e127      	b.n	800dbbc <Go+0x2e8>
            si468x_FM_tune(92.1); // Hardwired!
            //!!! JSB_si468x_set_mute(0); // Un-mute after station is tuned.
            break;

          case icSi468x_DAB:
            DAB_TuneService(Radio_ServiceToTune, 1);
 800d96c:	2101      	movs	r1, #1
 800d96e:	f7fe fa1b 	bl	800bda8 <DAB_TuneService>
            //!!! if (DAB_TuneService(Radio_ServiceToTune, 1))
              //!!! JSB_si468x_set_mute(0); // Un-mute after station is tuned.
            break;
 800d972:	e131      	b.n	800dbd8 <Go+0x304>
      PageChanged = 1;

      switch(InputChannel)
      {
        case icAR1010_FM:
          ADC_SelectSource(ADC_Source_AR1010);
 800d974:	2001      	movs	r0, #1
 800d976:	f7fc f9bc 	bl	8009cf2 <ADC_SelectSource>

        default:
          break;
      }

      SetLED(LED_Blue, InputChannel == icAuxIn); // Just for fun.
 800d97a:	4b86      	ldr	r3, [pc, #536]	@ (800db94 <Go+0x2c0>)
 800d97c:	7819      	ldrb	r1, [r3, #0]
 800d97e:	2908      	cmp	r1, #8
 800d980:	bf14      	ite	ne
 800d982:	2100      	movne	r1, #0
 800d984:	2101      	moveq	r1, #1
 800d986:	2003      	movs	r0, #3
 800d988:	f7fc f920 	bl	8009bcc <SetLED>
      SPDIFRX_StopRequired = 1;
 800d98c:	2401      	movs	r4, #1
    }

    if (SPDIFRX_Started)
 800d98e:	2d00      	cmp	r5, #0
 800d990:	d141      	bne.n	800da16 <Go+0x142>
 800d992:	46a1      	mov	r9, r4
        OutputSampleRate = 0; // Force DAC to be reconfigured so that DMAs are also reconfigured when coming from SPDIF.
        SPDIFRX_Started = 0;
      }
    }

    if (I2SInput_Started)
 800d994:	b10e      	cbz	r6, 800d99a <Go+0xc6>
    {
      if (I2SInput_StopRequired)
 800d996:	2c00      	cmp	r4, #0
 800d998:	d14d      	bne.n	800da36 <Go+0x162>
        OutputSampleRate = 0; // Force DAC to be reconfigured so that DMAs are also reconfigured when coming from SPDIF.
        I2SInput_Started = 0;
      }
    }

    if (BluetoothOut_Started)
 800d99a:	4b7f      	ldr	r3, [pc, #508]	@ (800db98 <Go+0x2c4>)
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	b113      	cbz	r3, 800d9a6 <Go+0xd2>
    {
      if (BluetoothOut_StopRequired)
 800d9a0:	f1b9 0f00 	cmp.w	r9, #0
 800d9a4:	d14d      	bne.n	800da42 <Go+0x16e>

    SPDIFRX_StopRequired = 0;
    I2SInput_StopRequired = 0;
    BluetoothOut_StopRequired = 0;

    if (InputChannelIsSPDIF())
 800d9a6:	f7fd fabd 	bl	800af24 <InputChannelIsSPDIF>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d067      	beq.n	800da7e <Go+0x1aa>
    {
      if (!SPDIFRX_Started)
 800d9ae:	2d00      	cmp	r5, #0
 800d9b0:	d04d      	beq.n	800da4e <Go+0x17a>
            break;
        }
      }
    }

    if (BluetoothOut_On)
 800d9b2:	4b7a      	ldr	r3, [pc, #488]	@ (800db9c <Go+0x2c8>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	b123      	cbz	r3, 800d9c2 <Go+0xee>
    {
      if (!BluetoothOut_Started)
 800d9b8:	4b77      	ldr	r3, [pc, #476]	@ (800db98 <Go+0x2c4>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f000 8098 	beq.w	800daf2 <Go+0x21e>
        if (BluetoothOut_Start())
          BluetoothOut_Started = 1;
      }
    }

    if (PageChanged || (pCurrentPage->ContinuousRefresh))
 800d9c2:	4b77      	ldr	r3, [pc, #476]	@ (800dba0 <Go+0x2cc>)
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	b923      	cbnz	r3, 800d9d2 <Go+0xfe>
 800d9c8:	4b76      	ldr	r3, [pc, #472]	@ (800dba4 <Go+0x2d0>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9d0:	b133      	cbz	r3, 800d9e0 <Go+0x10c>
    {
      PageChanged = 0;
 800d9d2:	4b73      	ldr	r3, [pc, #460]	@ (800dba0 <Go+0x2cc>)
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	701a      	strb	r2, [r3, #0]

      JSB_UI_DrawPage(pCurrentPage);
 800d9d8:	4b72      	ldr	r3, [pc, #456]	@ (800dba4 <Go+0x2d0>)
 800d9da:	6818      	ldr	r0, [r3, #0]
 800d9dc:	f7fb fdde 	bl	800959c <JSB_UI_DrawPage>
    }

    LCD_BacklightOn(PowerOn); // Do this after updating the page in case it was changed whilst the display was off.
 800d9e0:	4b62      	ldr	r3, [pc, #392]	@ (800db6c <Go+0x298>)
 800d9e2:	7818      	ldrb	r0, [r3, #0]
 800d9e4:	f7fc f8e6 	bl	8009bb4 <LCD_BacklightOn>

    if (XPT2046_Sample(&Touch_RawX, &Touch_RawY, &Touch_RawZ))
 800d9e8:	f10d 020a 	add.w	r2, sp, #10
 800d9ec:	a903      	add	r1, sp, #12
 800d9ee:	f10d 000e 	add.w	r0, sp, #14
 800d9f2:	f7fb fe1f 	bl	8009634 <XPT2046_Sample>
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	f000 80a0 	beq.w	800db3e <Go+0x26a>
    {
      if (!PowerOn)
 800d9fe:	4b5b      	ldr	r3, [pc, #364]	@ (800db6c <Go+0x298>)
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d17e      	bne.n	800db04 <Go+0x230>
      {
        if (!SomethingPressed)
 800da06:	2f00      	cmp	r7, #0
 800da08:	f040 809a 	bne.w	800db40 <Go+0x26c>
        {
          SetPowerOn(1);
 800da0c:	2001      	movs	r0, #1
 800da0e:	f7fe fc61 	bl	800c2d4 <SetPowerOn>
          SomethingPressed = 1;
 800da12:	2701      	movs	r7, #1
 800da14:	e094      	b.n	800db40 <Go+0x26c>
      if (SPDIFRX_HasReceiveErrorOccurred())
 800da16:	f7fb fb93 	bl	8009140 <SPDIFRX_HasReceiveErrorOccurred>
 800da1a:	b938      	cbnz	r0, 800da2c <Go+0x158>
      if (SPDIFRX_StopRequired)
 800da1c:	b14c      	cbz	r4, 800da32 <Go+0x15e>
 800da1e:	46a1      	mov	r9, r4
        SPDIFRX_Stop();
 800da20:	f7fb fad8 	bl	8008fd4 <SPDIFRX_Stop>
        OutputSampleRate = 0; // Force DAC to be reconfigured so that DMAs are also reconfigured when coming from SPDIF.
 800da24:	2500      	movs	r5, #0
 800da26:	4b60      	ldr	r3, [pc, #384]	@ (800dba8 <Go+0x2d4>)
 800da28:	601d      	str	r5, [r3, #0]
        SPDIFRX_Started = 0;
 800da2a:	e7b3      	b.n	800d994 <Go+0xc0>
        BluetoothOut_StopRequired = 1; // In case the sample rate has changed.
 800da2c:	f04f 0901 	mov.w	r9, #1
 800da30:	e7f6      	b.n	800da20 <Go+0x14c>
 800da32:	46a1      	mov	r9, r4
 800da34:	e7ae      	b.n	800d994 <Go+0xc0>
        I2SInput_Stop();
 800da36:	f7fe fa2f 	bl	800be98 <I2SInput_Stop>
        OutputSampleRate = 0; // Force DAC to be reconfigured so that DMAs are also reconfigured when coming from SPDIF.
 800da3a:	2600      	movs	r6, #0
 800da3c:	4b5a      	ldr	r3, [pc, #360]	@ (800dba8 <Go+0x2d4>)
 800da3e:	601e      	str	r6, [r3, #0]
        I2SInput_Started = 0;
 800da40:	e7ab      	b.n	800d99a <Go+0xc6>
        BluetoothOut_Stop();
 800da42:	f7fe f827 	bl	800ba94 <BluetoothOut_Stop>
        BluetoothOut_Started = 0;
 800da46:	4b54      	ldr	r3, [pc, #336]	@ (800db98 <Go+0x2c4>)
 800da48:	2200      	movs	r2, #0
 800da4a:	701a      	strb	r2, [r3, #0]
 800da4c:	e7ab      	b.n	800d9a6 <Go+0xd2>
        I2SBuffers_NumSamples = SPDIFRX_Buffer_NumSamples;
 800da4e:	4b57      	ldr	r3, [pc, #348]	@ (800dbac <Go+0x2d8>)
 800da50:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800da54:	601a      	str	r2, [r3, #0]
        SPDIFRX_Started = SPDIFRX_Start(hsai_BlockA2.Init.AudioFrequency, GetSPDIFInputChannel(InputChannel), 0, 0);
 800da56:	4b56      	ldr	r3, [pc, #344]	@ (800dbb0 <Go+0x2dc>)
 800da58:	ed93 8a07 	vldr	s16, [r3, #28]
 800da5c:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800da60:	4b4c      	ldr	r3, [pc, #304]	@ (800db94 <Go+0x2c0>)
 800da62:	7818      	ldrb	r0, [r3, #0]
 800da64:	f7fd fa5a 	bl	800af1c <GetSPDIFInputChannel>
 800da68:	4601      	mov	r1, r0
 800da6a:	2300      	movs	r3, #0
 800da6c:	461a      	mov	r2, r3
 800da6e:	ee18 0a10 	vmov	r0, s16
 800da72:	f7fb fad1 	bl	8009018 <SPDIFRX_Start>
 800da76:	4605      	mov	r5, r0
        PA_ClearErrorStatus();
 800da78:	f7fc fa3b 	bl	8009ef2 <PA_ClearErrorStatus>
 800da7c:	e799      	b.n	800d9b2 <Go+0xde>
    else if (InputChannelIsI2S())
 800da7e:	f7fd fa5d 	bl	800af3c <InputChannelIsI2S>
 800da82:	2800      	cmp	r0, #0
 800da84:	d095      	beq.n	800d9b2 <Go+0xde>
      if (!I2SInput_Started)
 800da86:	2e00      	cmp	r6, #0
 800da88:	d193      	bne.n	800d9b2 <Go+0xde>
        if (BluetoothOut_On)
 800da8a:	4b44      	ldr	r3, [pc, #272]	@ (800db9c <Go+0x2c8>)
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	b1bb      	cbz	r3, 800dac0 <Go+0x1ec>
          SetOutputSampleRate_48000(I2SBuffers_NumSamples_WhenBluetoothIsEnabled); // Currently, the ESP32 requires large sample packets so increase sample buffer size.
 800da90:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800da94:	f7fe faf5 	bl	800c082 <SetOutputSampleRate_48000>
        ClearOutputBuffer();
 800da98:	f7fe f9e2 	bl	800be60 <ClearOutputBuffer>
        InternalMute(0); // 18/6/2024: In case SPDIF left InternalMuteActive on e.g. if input data stopped.
 800da9c:	2000      	movs	r0, #0
 800da9e:	f7fe fa59 	bl	800bf54 <InternalMute>
        switch(InputChannel)
 800daa2:	4b3c      	ldr	r3, [pc, #240]	@ (800db94 <Go+0x2c0>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	2b06      	cmp	r3, #6
 800daa8:	d019      	beq.n	800dade <Go+0x20a>
 800daaa:	d80f      	bhi.n	800dacc <Go+0x1f8>
 800daac:	2b05      	cmp	r3, #5
 800daae:	d10b      	bne.n	800dac8 <Go+0x1f4>
            Si4684_RequireMode(Si468x_MODE_DAB);
 800dab0:	2002      	movs	r0, #2
 800dab2:	f7fe fb65 	bl	800c180 <Si4684_RequireMode>
            I2S_SelectSource(I2S_Source_Si4684);
 800dab6:	2002      	movs	r0, #2
 800dab8:	f7fc f8d2 	bl	8009c60 <I2S_SelectSource>
        I2SInput_Started = 1;
 800dabc:	2601      	movs	r6, #1
            break;
 800dabe:	e778      	b.n	800d9b2 <Go+0xde>
          SetOutputSampleRate_48000(I2SBuffers_NumSamples_WhenBluetoothIsNotEnabled);
 800dac0:	2020      	movs	r0, #32
 800dac2:	f7fe fade 	bl	800c082 <SetOutputSampleRate_48000>
 800dac6:	e7e7      	b.n	800da98 <Go+0x1c4>
        switch(InputChannel)
 800dac8:	2601      	movs	r6, #1
 800daca:	e772      	b.n	800d9b2 <Go+0xde>
 800dacc:	3b07      	subs	r3, #7
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d80c      	bhi.n	800daee <Go+0x21a>
            I2S_SelectSource(I2S_Source_ADC);
 800dad4:	2003      	movs	r0, #3
 800dad6:	f7fc f8c3 	bl	8009c60 <I2S_SelectSource>
        I2SInput_Started = 1;
 800dada:	2601      	movs	r6, #1
            break;
 800dadc:	e769      	b.n	800d9b2 <Go+0xde>
            Si4684_RequireMode(Si468x_MODE_FM);
 800dade:	2001      	movs	r0, #1
 800dae0:	f7fe fb4e 	bl	800c180 <Si4684_RequireMode>
            I2S_SelectSource(I2S_Source_Si4684);
 800dae4:	2002      	movs	r0, #2
 800dae6:	f7fc f8bb 	bl	8009c60 <I2S_SelectSource>
        I2SInput_Started = 1;
 800daea:	2601      	movs	r6, #1
            break;
 800daec:	e761      	b.n	800d9b2 <Go+0xde>
        switch(InputChannel)
 800daee:	2601      	movs	r6, #1
 800daf0:	e75f      	b.n	800d9b2 <Go+0xde>
        if (BluetoothOut_Start())
 800daf2:	f7fd ff87 	bl	800ba04 <BluetoothOut_Start>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	f43f af63 	beq.w	800d9c2 <Go+0xee>
          BluetoothOut_Started = 1;
 800dafc:	4b26      	ldr	r3, [pc, #152]	@ (800db98 <Go+0x2c4>)
 800dafe:	2201      	movs	r2, #1
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	e75e      	b.n	800d9c2 <Go+0xee>
        }
      }
      else
      {
        XPT2046_ConvertRawToScreen(Touch_RawX, Touch_RawY, &Touch_ScreenX, &Touch_ScreenY);
 800db04:	f10d 0306 	add.w	r3, sp, #6
 800db08:	aa02      	add	r2, sp, #8
 800db0a:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800db0e:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 800db12:	f7fb fe2f 	bl	8009774 <XPT2046_ConvertRawToScreen>

        if (!SomethingPressed)
 800db16:	b147      	cbz	r7, 800db2a <Go+0x256>
          SomethingPressed = JSB_UI_Page_PressDown(pCurrentPage, Touch_ScreenX, Touch_ScreenY);
        JSB_UI_Page_PressMove(pCurrentPage, Touch_ScreenX, Touch_ScreenY);
 800db18:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800db1c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800db20:	4b20      	ldr	r3, [pc, #128]	@ (800dba4 <Go+0x2d0>)
 800db22:	6818      	ldr	r0, [r3, #0]
 800db24:	f7fb fb90 	bl	8009248 <JSB_UI_Page_PressMove>
 800db28:	e00a      	b.n	800db40 <Go+0x26c>
          SomethingPressed = JSB_UI_Page_PressDown(pCurrentPage, Touch_ScreenX, Touch_ScreenY);
 800db2a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800db2e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800db32:	4b1c      	ldr	r3, [pc, #112]	@ (800dba4 <Go+0x2d0>)
 800db34:	6818      	ldr	r0, [r3, #0]
 800db36:	f7fb fbfd 	bl	8009334 <JSB_UI_Page_PressDown>
 800db3a:	4607      	mov	r7, r0
 800db3c:	e7ec      	b.n	800db18 <Go+0x244>
      }
    }
    else
    {
      if (SomethingPressed)
 800db3e:	b98f      	cbnz	r7, 800db64 <Go+0x290>
        JSB_UI_Page_PressUp();
        SomethingPressed = 0;
      }
    }

    ProcessIR();
 800db40:	f7ff fcb4 	bl	800d4ac <ProcessIR>

    if (IsUserButtonPressed())
 800db44:	f7fc f880 	bl	8009c48 <IsUserButtonPressed>
 800db48:	b3a0      	cbz	r0, 800dbb4 <Go+0x2e0>
    {
      if (!UserButtonPressed)
 800db4a:	f1b8 0f00 	cmp.w	r8, #0
 800db4e:	d132      	bne.n	800dbb6 <Go+0x2e2>
      {
        UserButtonPressed = 1;
        if (InputChannelIsRadio())
 800db50:	f7fd fa00 	bl	800af54 <InputChannelIsRadio>
 800db54:	2800      	cmp	r0, #0
 800db56:	d060      	beq.n	800dc1a <Go+0x346>
          Radio_ServiceToTune = sttNext;
 800db58:	4b0b      	ldr	r3, [pc, #44]	@ (800db88 <Go+0x2b4>)
 800db5a:	2203      	movs	r2, #3
 800db5c:	701a      	strb	r2, [r3, #0]
        UserButtonPressed = 1;
 800db5e:	f04f 0801 	mov.w	r8, #1
 800db62:	e028      	b.n	800dbb6 <Go+0x2e2>
        JSB_UI_Page_PressUp();
 800db64:	f7fb fb86 	bl	8009274 <JSB_UI_Page_PressUp>
        SomethingPressed = 0;
 800db68:	4627      	mov	r7, r4
 800db6a:	e7e9      	b.n	800db40 <Go+0x26c>
 800db6c:	20017200 	.word	0x20017200
 800db70:	20013238 	.word	0x20013238
 800db74:	0800b015 	.word	0x0800b015
 800db78:	20013234 	.word	0x20013234
 800db7c:	0800b029 	.word	0x0800b029
 800db80:	20017a68 	.word	0x20017a68
 800db84:	41200000 	.word	0x41200000
 800db88:	200153c0 	.word	0x200153c0
 800db8c:	42cb6666 	.word	0x42cb6666
 800db90:	200172cc 	.word	0x200172cc
 800db94:	20017203 	.word	0x20017203
 800db98:	200153c4 	.word	0x200153c4
 800db9c:	200153c5 	.word	0x200153c5
 800dba0:	200172d1 	.word	0x200172d1
 800dba4:	200172d4 	.word	0x200172d4
 800dba8:	200153d8 	.word	0x200153d8
 800dbac:	200153e8 	.word	0x200153e8
 800dbb0:	2001752c 	.word	0x2001752c
      }
    }
    else
    {
      UserButtonPressed = 0;
 800dbb4:	4680      	mov	r8, r0
    }

    osDelay(1);
 800dbb6:	2001      	movs	r0, #1
 800dbb8:	f7f7 ffa4 	bl	8005b04 <osDelay>
    if (Radio_ServiceToTune != sttNone)
 800dbbc:	4b18      	ldr	r3, [pc, #96]	@ (800dc20 <Go+0x34c>)
 800dbbe:	7818      	ldrb	r0, [r3, #0]
 800dbc0:	b168      	cbz	r0, 800dbde <Go+0x30a>
      if (I2SInput_Started) // Don't tune if no I2S else distortion occurs (on DAB, at least).
 800dbc2:	b14e      	cbz	r6, 800dbd8 <Go+0x304>
        switch (InputChannel)
 800dbc4:	4b17      	ldr	r3, [pc, #92]	@ (800dc24 <Go+0x350>)
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b05      	cmp	r3, #5
 800dbca:	f43f aecf 	beq.w	800d96c <Go+0x98>
 800dbce:	2b06      	cmp	r3, #6
 800dbd0:	d102      	bne.n	800dbd8 <Go+0x304>
            si468x_FM_tune(92.1); // Hardwired!
 800dbd2:	4815      	ldr	r0, [pc, #84]	@ (800dc28 <Go+0x354>)
 800dbd4:	f7fd f820 	bl	800ac18 <si468x_FM_tune>
      Radio_ServiceToTune = sttNone;
 800dbd8:	4b11      	ldr	r3, [pc, #68]	@ (800dc20 <Go+0x34c>)
 800dbda:	2200      	movs	r2, #0
 800dbdc:	701a      	strb	r2, [r3, #0]
    if (InputChannelChanged || BluetoothOutChanged)
 800dbde:	4b13      	ldr	r3, [pc, #76]	@ (800dc2c <Go+0x358>)
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	b923      	cbnz	r3, 800dbee <Go+0x31a>
 800dbe4:	4b12      	ldr	r3, [pc, #72]	@ (800dc30 <Go+0x35c>)
 800dbe6:	781c      	ldrb	r4, [r3, #0]
 800dbe8:	2c00      	cmp	r4, #0
 800dbea:	f43f aed0 	beq.w	800d98e <Go+0xba>
      InputChannelChanged = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	4a0e      	ldr	r2, [pc, #56]	@ (800dc2c <Go+0x358>)
 800dbf2:	7013      	strb	r3, [r2, #0]
      BluetoothOutChanged = 0;
 800dbf4:	4a0e      	ldr	r2, [pc, #56]	@ (800dc30 <Go+0x35c>)
 800dbf6:	7013      	strb	r3, [r2, #0]
      Radio_ServiceToTune = sttCurrent; // Re-tune DAB after I2S clock changes to prevent distortion.
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	4a09      	ldr	r2, [pc, #36]	@ (800dc20 <Go+0x34c>)
 800dbfc:	7013      	strb	r3, [r2, #0]
      PageChanged = 1;
 800dbfe:	4a0d      	ldr	r2, [pc, #52]	@ (800dc34 <Go+0x360>)
 800dc00:	7013      	strb	r3, [r2, #0]
      switch(InputChannel)
 800dc02:	4b08      	ldr	r3, [pc, #32]	@ (800dc24 <Go+0x350>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b07      	cmp	r3, #7
 800dc08:	f43f aeb4 	beq.w	800d974 <Go+0xa0>
 800dc0c:	2b08      	cmp	r3, #8
 800dc0e:	f47f aeb4 	bne.w	800d97a <Go+0xa6>
          ADC_SelectSource(ADC_Source_BlueJack);
 800dc12:	2002      	movs	r0, #2
 800dc14:	f7fc f86d 	bl	8009cf2 <ADC_SelectSource>
          break;
 800dc18:	e6af      	b.n	800d97a <Go+0xa6>
        UserButtonPressed = 1;
 800dc1a:	f04f 0801 	mov.w	r8, #1
 800dc1e:	e7ca      	b.n	800dbb6 <Go+0x2e2>
 800dc20:	200153c0 	.word	0x200153c0
 800dc24:	20017203 	.word	0x20017203
 800dc28:	42b83333 	.word	0x42b83333
 800dc2c:	20017202 	.word	0x20017202
 800dc30:	200172d0 	.word	0x200172d0
 800dc34:	200172d1 	.word	0x200172d1

0800dc38 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 800dc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3c:	b08d      	sub	sp, #52	@ 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc3e:	2400      	movs	r4, #0
 800dc40:	9407      	str	r4, [sp, #28]
 800dc42:	9408      	str	r4, [sp, #32]
 800dc44:	9409      	str	r4, [sp, #36]	@ 0x24
 800dc46:	940a      	str	r4, [sp, #40]	@ 0x28
 800dc48:	940b      	str	r4, [sp, #44]	@ 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800dc4a:	4b73      	ldr	r3, [pc, #460]	@ (800de18 <MX_GPIO_Init+0x1e0>)
 800dc4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc4e:	f042 0210 	orr.w	r2, r2, #16
 800dc52:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc56:	f002 0210 	and.w	r2, r2, #16
 800dc5a:	9201      	str	r2, [sp, #4]
 800dc5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800dc5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc60:	f042 0204 	orr.w	r2, r2, #4
 800dc64:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc68:	f002 0204 	and.w	r2, r2, #4
 800dc6c:	9202      	str	r2, [sp, #8]
 800dc6e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800dc70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800dc76:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc7a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800dc7e:	9203      	str	r2, [sp, #12]
 800dc80:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc84:	f042 0201 	orr.w	r2, r2, #1
 800dc88:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc8c:	f002 0201 	and.w	r2, r2, #1
 800dc90:	9204      	str	r2, [sp, #16]
 800dc92:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800dc94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc96:	f042 0202 	orr.w	r2, r2, #2
 800dc9a:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc9e:	f002 0202 	and.w	r2, r2, #2
 800dca2:	9205      	str	r2, [sp, #20]
 800dca4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800dca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dca8:	f042 0208 	orr.w	r2, r2, #8
 800dcac:	631a      	str	r2, [r3, #48]	@ 0x30
 800dcae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcb0:	f003 0308 	and.w	r3, r3, #8
 800dcb4:	9306      	str	r3, [sp, #24]
 800dcb6:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 800dcb8:	4f58      	ldr	r7, [pc, #352]	@ (800de1c <MX_GPIO_Init+0x1e4>)
 800dcba:	2201      	movs	r2, #1
 800dcbc:	2124      	movs	r1, #36	@ 0x24
 800dcbe:	4638      	mov	r0, r7
 800dcc0:	f7f3 f8b1 	bl	8000e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 800dcc4:	4622      	mov	r2, r4
 800dcc6:	2112      	movs	r1, #18
 800dcc8:	4638      	mov	r0, r7
 800dcca:	f7f3 f8ac 	bl	8000e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 800dcce:	4e54      	ldr	r6, [pc, #336]	@ (800de20 <MX_GPIO_Init+0x1e8>)
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f7f3 f8a5 	bl	8000e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 800dcdc:	4622      	mov	r2, r4
 800dcde:	210f      	movs	r1, #15
 800dce0:	4630      	mov	r0, r6
 800dce2:	f7f3 f8a0 	bl	8000e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 800dce6:	f8df b140 	ldr.w	fp, [pc, #320]	@ 800de28 <MX_GPIO_Init+0x1f0>
 800dcea:	4622      	mov	r2, r4
 800dcec:	210e      	movs	r1, #14
 800dcee:	4658      	mov	r0, fp
 800dcf0:	f7f3 f899 	bl	8000e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin
 800dcf4:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 800de2c <MX_GPIO_Init+0x1f4>
 800dcf8:	4622      	mov	r2, r4
 800dcfa:	f641 0143 	movw	r1, #6211	@ 0x1843
 800dcfe:	4640      	mov	r0, r8
 800dd00:	f7f3 f891 	bl	8000e26 <HAL_GPIO_WritePin>
                          |SI_NRST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin
 800dd04:	f8df a128 	ldr.w	sl, [pc, #296]	@ 800de30 <MX_GPIO_Init+0x1f8>
 800dd08:	4622      	mov	r2, r4
 800dd0a:	217f      	movs	r1, #127	@ 0x7f
 800dd0c:	4650      	mov	r0, sl
 800dd0e:	f7f3 f88a 	bl	8000e26 <HAL_GPIO_WritePin>
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ESP32_A_NSS_Pin ESP32_B_NSS_Pin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_NSS_Pin;
 800dd12:	2324      	movs	r3, #36	@ 0x24
 800dd14:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dd16:	2501      	movs	r5, #1
 800dd18:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd1a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800dd1c:	f04f 0902 	mov.w	r9, #2
 800dd20:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800dd24:	a907      	add	r1, sp, #28
 800dd26:	4638      	mov	r0, r7
 800dd28:	f7f2 ff84 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP32_A_HSK_Pin ESP32_B_HSK_Pin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 800dd2c:	2348      	movs	r3, #72	@ 0x48
 800dd2e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dd30:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd32:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800dd34:	a907      	add	r1, sp, #28
 800dd36:	4638      	mov	r0, r7
 800dd38:	f7f2 ff7c 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP32_B_EN_Pin ESP32_A_EN_Pin */
  GPIO_InitStruct.Pin = ESP32_B_EN_Pin|ESP32_A_EN_Pin;
 800dd3c:	2312      	movs	r3, #18
 800dd3e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dd40:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd42:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd44:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800dd46:	a907      	add	r1, sp, #28
 800dd48:	4638      	mov	r0, r7
 800dd4a:	f7f2 ff73 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : NUserButton_Pin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
 800dd4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dd52:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800dd54:	4f33      	ldr	r7, [pc, #204]	@ (800de24 <MX_GPIO_Init+0x1ec>)
 800dd56:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd58:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 800dd5a:	a907      	add	r1, sp, #28
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f7f2 ff69 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_NSS_Pin LCD_NRST_Pin LCD_NSS_Pin LCD_NC_D_Pin
                           LCD_NBACKLIGHT_Pin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin|LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin
 800dd62:	f248 030f 	movw	r3, #32783	@ 0x800f
 800dd66:	9307      	str	r3, [sp, #28]
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dd68:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd6a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd6c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dd6e:	a907      	add	r1, sp, #28
 800dd70:	4630      	mov	r0, r6
 800dd72:	f7f2 ff5f 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red_Pin LED_Green_Pin LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 800dd76:	230e      	movs	r3, #14
 800dd78:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dd7a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd7c:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd7e:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd80:	a907      	add	r1, sp, #28
 800dd82:	4658      	mov	r0, fp
 800dd84:	f7f2 ff56 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI_RxDMA_Pin SAI_TxDMA_Pin TestPoint_Pin */
  GPIO_InitStruct.Pin = SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin;
 800dd88:	f640 0303 	movw	r3, #2051	@ 0x803
 800dd8c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dd8e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd90:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800dd92:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dd96:	a907      	add	r1, sp, #28
 800dd98:	4640      	mov	r0, r8
 800dd9a:	f7f2 ff4b 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_NSS_Pin SI_NRST_Pin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 800dd9e:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 800dda2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dda4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dda6:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dda8:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ddaa:	a907      	add	r1, sp, #28
 800ddac:	4640      	mov	r0, r8
 800ddae:	f7f2 ff41 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ddb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ddb6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddb8:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddbc:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ddbe:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ddc0:	f04f 0905 	mov.w	r9, #5
 800ddc4:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ddc8:	a907      	add	r1, sp, #28
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f7f2 ff32 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : TAS_PDN_Pin TAS_NRST_Pin MUX_S0_Pin MUX_S1_Pin
                           DAC_FLT_Pin DAC_DEMP_Pin DAC_XSMT_Pin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin
 800ddd0:	237f      	movs	r3, #127	@ 0x7f
 800ddd2:	9307      	str	r3, [sp, #28]
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ddd4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddd6:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ddd8:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ddda:	a907      	add	r1, sp, #28
 800dddc:	4650      	mov	r0, sl
 800ddde:	f7f2 ff29 	bl	8000c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SI_INT_Pin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
 800dde2:	2320      	movs	r3, #32
 800dde4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800dde6:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dde8:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 800ddea:	a907      	add	r1, sp, #28
 800ddec:	4640      	mov	r0, r8
 800ddee:	f7f2 ff21 	bl	8000c34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800ddf2:	4622      	mov	r2, r4
 800ddf4:	4649      	mov	r1, r9
 800ddf6:	2017      	movs	r0, #23
 800ddf8:	f7f2 fc96 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800ddfc:	2017      	movs	r0, #23
 800ddfe:	f7f2 fca3 	bl	8000748 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800de02:	4622      	mov	r2, r4
 800de04:	4649      	mov	r1, r9
 800de06:	2028      	movs	r0, #40	@ 0x28
 800de08:	f7f2 fc8e 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800de0c:	2028      	movs	r0, #40	@ 0x28
 800de0e:	f7f2 fc9b 	bl	8000748 <HAL_NVIC_EnableIRQ>

}
 800de12:	b00d      	add	sp, #52	@ 0x34
 800de14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de18:	40023800 	.word	0x40023800
 800de1c:	40021000 	.word	0x40021000
 800de20:	40020800 	.word	0x40020800
 800de24:	10210000 	.word	0x10210000
 800de28:	40020000 	.word	0x40020000
 800de2c:	40020400 	.word	0x40020400
 800de30:	40020c00 	.word	0x40020c00

0800de34 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800de34:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800de36:	4812      	ldr	r0, [pc, #72]	@ (800de80 <MX_I2C1_Init+0x4c>)
 800de38:	4b12      	ldr	r3, [pc, #72]	@ (800de84 <MX_I2C1_Init+0x50>)
 800de3a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800de3c:	4b12      	ldr	r3, [pc, #72]	@ (800de88 <MX_I2C1_Init+0x54>)
 800de3e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800de44:	2201      	movs	r2, #1
 800de46:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800de48:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800de4a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800de4c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800de4e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800de50:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800de52:	f7f3 f9f9 	bl	8001248 <HAL_I2C_Init>
 800de56:	b950      	cbnz	r0, 800de6e <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800de58:	2100      	movs	r1, #0
 800de5a:	4809      	ldr	r0, [pc, #36]	@ (800de80 <MX_I2C1_Init+0x4c>)
 800de5c:	f7f4 f837 	bl	8001ece <HAL_I2CEx_ConfigAnalogFilter>
 800de60:	b940      	cbnz	r0, 800de74 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800de62:	2100      	movs	r1, #0
 800de64:	4806      	ldr	r0, [pc, #24]	@ (800de80 <MX_I2C1_Init+0x4c>)
 800de66:	f7f4 f860 	bl	8001f2a <HAL_I2CEx_ConfigDigitalFilter>
 800de6a:	b930      	cbnz	r0, 800de7a <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800de6c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800de6e:	f000 f911 	bl	800e094 <Error_Handler>
 800de72:	e7f1      	b.n	800de58 <MX_I2C1_Init+0x24>
    Error_Handler();
 800de74:	f000 f90e 	bl	800e094 <Error_Handler>
 800de78:	e7f3      	b.n	800de62 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800de7a:	f000 f90b 	bl	800e094 <Error_Handler>
}
 800de7e:	e7f5      	b.n	800de6c <MX_I2C1_Init+0x38>
 800de80:	20017398 	.word	0x20017398
 800de84:	40005400 	.word	0x40005400
 800de88:	6000030d 	.word	0x6000030d

0800de8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800de8c:	b530      	push	{r4, r5, lr}
 800de8e:	b0ad      	sub	sp, #180	@ 0xb4
 800de90:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de92:	2100      	movs	r1, #0
 800de94:	9127      	str	r1, [sp, #156]	@ 0x9c
 800de96:	9128      	str	r1, [sp, #160]	@ 0xa0
 800de98:	9129      	str	r1, [sp, #164]	@ 0xa4
 800de9a:	912a      	str	r1, [sp, #168]	@ 0xa8
 800de9c:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800de9e:	2290      	movs	r2, #144	@ 0x90
 800dea0:	a803      	add	r0, sp, #12
 800dea2:	f001 ff4e 	bl	800fd42 <memset>
  if(i2cHandle->Instance==I2C1)
 800dea6:	6822      	ldr	r2, [r4, #0]
 800dea8:	4b3e      	ldr	r3, [pc, #248]	@ (800dfa4 <HAL_I2C_MspInit+0x118>)
 800deaa:	429a      	cmp	r2, r3
 800deac:	d001      	beq.n	800deb2 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800deae:	b02d      	add	sp, #180	@ 0xb4
 800deb0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800deb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800deb6:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800deb8:	a803      	add	r0, sp, #12
 800deba:	f7f4 fbd5 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 800debe:	2800      	cmp	r0, #0
 800dec0:	d166      	bne.n	800df90 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dec2:	4d39      	ldr	r5, [pc, #228]	@ (800dfa8 <HAL_I2C_MspInit+0x11c>)
 800dec4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800dec6:	f043 0302 	orr.w	r3, r3, #2
 800deca:	632b      	str	r3, [r5, #48]	@ 0x30
 800decc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800dece:	f003 0302 	and.w	r3, r3, #2
 800ded2:	9301      	str	r3, [sp, #4]
 800ded4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ded6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800deda:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dedc:	2312      	movs	r3, #18
 800dede:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dee0:	2301      	movs	r3, #1
 800dee2:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dee4:	2303      	movs	r3, #3
 800dee6:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800dee8:	2304      	movs	r3, #4
 800deea:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800deec:	a927      	add	r1, sp, #156	@ 0x9c
 800deee:	482f      	ldr	r0, [pc, #188]	@ (800dfac <HAL_I2C_MspInit+0x120>)
 800def0:	f7f2 fea0 	bl	8000c34 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800def4:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800def6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800defa:	642b      	str	r3, [r5, #64]	@ 0x40
 800defc:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800defe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800df02:	9302      	str	r3, [sp, #8]
 800df04:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 800df06:	482a      	ldr	r0, [pc, #168]	@ (800dfb0 <HAL_I2C_MspInit+0x124>)
 800df08:	4b2a      	ldr	r3, [pc, #168]	@ (800dfb4 <HAL_I2C_MspInit+0x128>)
 800df0a:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800df0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800df10:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800df12:	2340      	movs	r3, #64	@ 0x40
 800df14:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800df16:	2300      	movs	r3, #0
 800df18:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800df1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800df1e:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800df20:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800df22:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800df24:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800df26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800df2a:	6202      	str	r2, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800df2c:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800df2e:	f7f2 fc95 	bl	800085c <HAL_DMA_Init>
 800df32:	2800      	cmp	r0, #0
 800df34:	d12f      	bne.n	800df96 <HAL_I2C_MspInit+0x10a>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800df36:	4b1e      	ldr	r3, [pc, #120]	@ (800dfb0 <HAL_I2C_MspInit+0x124>)
 800df38:	63a3      	str	r3, [r4, #56]	@ 0x38
 800df3a:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800df3c:	481e      	ldr	r0, [pc, #120]	@ (800dfb8 <HAL_I2C_MspInit+0x12c>)
 800df3e:	4b1f      	ldr	r3, [pc, #124]	@ (800dfbc <HAL_I2C_MspInit+0x130>)
 800df40:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800df42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800df46:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800df48:	2300      	movs	r3, #0
 800df4a:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800df4c:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800df4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800df52:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800df54:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800df56:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800df58:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800df5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800df5e:	6202      	str	r2, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800df60:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800df62:	f7f2 fc7b 	bl	800085c <HAL_DMA_Init>
 800df66:	b9c8      	cbnz	r0, 800df9c <HAL_I2C_MspInit+0x110>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800df68:	4b13      	ldr	r3, [pc, #76]	@ (800dfb8 <HAL_I2C_MspInit+0x12c>)
 800df6a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800df6c:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800df6e:	2200      	movs	r2, #0
 800df70:	2105      	movs	r1, #5
 800df72:	201f      	movs	r0, #31
 800df74:	f7f2 fbd8 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800df78:	201f      	movs	r0, #31
 800df7a:	f7f2 fbe5 	bl	8000748 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800df7e:	2200      	movs	r2, #0
 800df80:	2105      	movs	r1, #5
 800df82:	2020      	movs	r0, #32
 800df84:	f7f2 fbd0 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800df88:	2020      	movs	r0, #32
 800df8a:	f7f2 fbdd 	bl	8000748 <HAL_NVIC_EnableIRQ>
}
 800df8e:	e78e      	b.n	800deae <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800df90:	f000 f880 	bl	800e094 <Error_Handler>
 800df94:	e795      	b.n	800dec2 <HAL_I2C_MspInit+0x36>
      Error_Handler();
 800df96:	f000 f87d 	bl	800e094 <Error_Handler>
 800df9a:	e7cc      	b.n	800df36 <HAL_I2C_MspInit+0xaa>
      Error_Handler();
 800df9c:	f000 f87a 	bl	800e094 <Error_Handler>
 800dfa0:	e7e2      	b.n	800df68 <HAL_I2C_MspInit+0xdc>
 800dfa2:	bf00      	nop
 800dfa4:	40005400 	.word	0x40005400
 800dfa8:	40023800 	.word	0x40023800
 800dfac:	40020400 	.word	0x40020400
 800dfb0:	20017338 	.word	0x20017338
 800dfb4:	400260b8 	.word	0x400260b8
 800dfb8:	200172d8 	.word	0x200172d8
 800dfbc:	40026010 	.word	0x40026010

0800dfc0 <SCB_EnableICache>:
  __ASM volatile ("dsb 0xF":::"memory");
 800dfc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dfc4:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800dfc8:	4b08      	ldr	r3, [pc, #32]	@ (800dfec <SCB_EnableICache+0x2c>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800dfd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dfd4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800dfd8:	695a      	ldr	r2, [r3, #20]
 800dfda:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800dfde:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800dfe0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dfe4:	f3bf 8f6f 	isb	sy
}
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	e000ed00 	.word	0xe000ed00

0800dff0 <SCB_EnableDCache>:
{
 800dff0:	b410      	push	{r4}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800dff2:	4b15      	ldr	r3, [pc, #84]	@ (800e048 <SCB_EnableDCache+0x58>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800dffa:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800dffe:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800e002:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800e006:	e000      	b.n	800e00a <SCB_EnableDCache+0x1a>
    } while(sets-- != 0U);
 800e008:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e00a:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e00e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800e012:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800e016:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800e01a:	490b      	ldr	r1, [pc, #44]	@ (800e048 <SCB_EnableDCache+0x58>)
 800e01c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800e020:	4613      	mov	r3, r2
 800e022:	3a01      	subs	r2, #1
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1f2      	bne.n	800e00e <SCB_EnableDCache+0x1e>
    } while(sets-- != 0U);
 800e028:	1e43      	subs	r3, r0, #1
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d1ec      	bne.n	800e008 <SCB_EnableDCache+0x18>
 800e02e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800e032:	694b      	ldr	r3, [r1, #20]
 800e034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e038:	614b      	str	r3, [r1, #20]
 800e03a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e03e:	f3bf 8f6f 	isb	sy
}
 800e042:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	e000ed00 	.word	0xe000ed00

0800e04c <Enable_DWT_Delay>:
void DWT_Delay_ProcessorClockCycles(uint32_t Value);
void DWT_Delay_us(uint32_t Value);

inline void Enable_DWT_Delay()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT.
 800e04c:	4a08      	ldr	r2, [pc, #32]	@ (800e070 <Enable_DWT_Delay+0x24>)
 800e04e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 800e052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e056:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  DWT->LAR = 0xC5ACCE55; // Unlock register access.
 800e05a:	4b06      	ldr	r3, [pc, #24]	@ (800e074 <Enable_DWT_Delay+0x28>)
 800e05c:	4a06      	ldr	r2, [pc, #24]	@ (800e078 <Enable_DWT_Delay+0x2c>)
 800e05e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
  DWT->CTRL = 0; // Reset the counter.
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable CPU_CYCLES.
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	f042 0201 	orr.w	r2, r2, #1
 800e06c:	601a      	str	r2, [r3, #0]
}
 800e06e:	4770      	bx	lr
 800e070:	e000ed00 	.word	0xe000ed00
 800e074:	e0001000 	.word	0xe0001000
 800e078:	c5acce55 	.word	0xc5acce55

0800e07c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e07c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 800e07e:	6802      	ldr	r2, [r0, #0]
 800e080:	4b03      	ldr	r3, [pc, #12]	@ (800e090 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800e082:	429a      	cmp	r2, r3
 800e084:	d000      	beq.n	800e088 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800e086:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800e088:	f7f2 fae4 	bl	8000654 <HAL_IncTick>
}
 800e08c:	e7fb      	b.n	800e086 <HAL_TIM_PeriodElapsedCallback+0xa>
 800e08e:	bf00      	nop
 800e090:	40002000 	.word	0x40002000

0800e094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e094:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    ToggleLED(LED_Red);
 800e096:	2001      	movs	r0, #1
 800e098:	f7fb fdb4 	bl	8009c04 <ToggleLED>
    HAL_Delay(50);
 800e09c:	2032      	movs	r0, #50	@ 0x32
 800e09e:	f7f2 faeb 	bl	8000678 <HAL_Delay>
    ToggleLED(LED_Red);
 800e0a2:	2001      	movs	r0, #1
 800e0a4:	f7fb fdae 	bl	8009c04 <ToggleLED>
    HAL_Delay(50);
 800e0a8:	2032      	movs	r0, #50	@ 0x32
 800e0aa:	f7f2 fae5 	bl	8000678 <HAL_Delay>
  while(1)
 800e0ae:	e7f2      	b.n	800e096 <Error_Handler+0x2>

0800e0b0 <SystemClock_Config>:
{
 800e0b0:	b500      	push	{lr}
 800e0b2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e0b4:	2234      	movs	r2, #52	@ 0x34
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	a807      	add	r0, sp, #28
 800e0ba:	f001 fe42 	bl	800fd42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e0be:	2300      	movs	r3, #0
 800e0c0:	9302      	str	r3, [sp, #8]
 800e0c2:	9303      	str	r3, [sp, #12]
 800e0c4:	9304      	str	r3, [sp, #16]
 800e0c6:	9305      	str	r3, [sp, #20]
 800e0c8:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e0ca:	4b23      	ldr	r3, [pc, #140]	@ (800e158 <SystemClock_Config+0xa8>)
 800e0cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e0ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800e0d2:	641a      	str	r2, [r3, #64]	@ 0x40
 800e0d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e0de:	4b1f      	ldr	r3, [pc, #124]	@ (800e15c <SystemClock_Config+0xac>)
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800e0e6:	601a      	str	r2, [r3, #0]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e0ee:	9301      	str	r3, [sp, #4]
 800e0f0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800e0f6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800e0fa:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e100:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800e104:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800e106:	2219      	movs	r2, #25
 800e108:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 800e10a:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 800e10e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e110:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800e112:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800e114:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e116:	a807      	add	r0, sp, #28
 800e118:	f7f3 ff72 	bl	8002000 <HAL_RCC_OscConfig>
 800e11c:	b9b0      	cbnz	r0, 800e14c <SystemClock_Config+0x9c>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800e11e:	f7f3 ff31 	bl	8001f84 <HAL_PWREx_EnableOverDrive>
 800e122:	b9a8      	cbnz	r0, 800e150 <SystemClock_Config+0xa0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e124:	230f      	movs	r3, #15
 800e126:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e128:	2302      	movs	r3, #2
 800e12a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e12c:	2300      	movs	r3, #0
 800e12e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e130:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800e134:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e13a:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800e13c:	2107      	movs	r1, #7
 800e13e:	a802      	add	r0, sp, #8
 800e140:	f7f4 f99c 	bl	800247c <HAL_RCC_ClockConfig>
 800e144:	b930      	cbnz	r0, 800e154 <SystemClock_Config+0xa4>
}
 800e146:	b015      	add	sp, #84	@ 0x54
 800e148:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800e14c:	f7ff ffa2 	bl	800e094 <Error_Handler>
    Error_Handler();
 800e150:	f7ff ffa0 	bl	800e094 <Error_Handler>
    Error_Handler();
 800e154:	f7ff ff9e 	bl	800e094 <Error_Handler>
 800e158:	40023800 	.word	0x40023800
 800e15c:	40007000 	.word	0x40007000

0800e160 <PeriphCommonClock_Config>:
{
 800e160:	b500      	push	{lr}
 800e162:	b0a5      	sub	sp, #148	@ 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e164:	2290      	movs	r2, #144	@ 0x90
 800e166:	2100      	movs	r1, #0
 800e168:	4668      	mov	r0, sp
 800e16a:	f001 fdea 	bl	800fd42 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_SAI2;
 800e16e:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 800e172:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 800e174:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800e178:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800e17a:	2302      	movs	r3, #2
 800e17c:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800e17e:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 14;
 800e180:	230e      	movs	r3, #14
 800e182:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800e184:	2301      	movs	r3, #1
 800e186:	9309      	str	r3, [sp, #36]	@ 0x24
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800e188:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e18c:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e18e:	4668      	mov	r0, sp
 800e190:	f7f4 fa6a 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 800e194:	b910      	cbnz	r0, 800e19c <PeriphCommonClock_Config+0x3c>
}
 800e196:	b025      	add	sp, #148	@ 0x94
 800e198:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800e19c:	f7ff ff7a 	bl	800e094 <Error_Handler>

0800e1a0 <main>:
{
 800e1a0:	b508      	push	{r3, lr}
  SCB_EnableICache();
 800e1a2:	f7ff ff0d 	bl	800dfc0 <SCB_EnableICache>
  SCB_EnableDCache();
 800e1a6:	f7ff ff23 	bl	800dff0 <SCB_EnableDCache>
  HAL_Init();
 800e1aa:	f7f2 fa47 	bl	800063c <HAL_Init>
  Enable_DWT_Delay();
 800e1ae:	f7ff ff4d 	bl	800e04c <Enable_DWT_Delay>
  SystemClock_Config();
 800e1b2:	f7ff ff7d 	bl	800e0b0 <SystemClock_Config>
  PeriphCommonClock_Config();
 800e1b6:	f7ff ffd3 	bl	800e160 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800e1ba:	f7ff fd3d 	bl	800dc38 <MX_GPIO_Init>
  MX_DMA_Init();
 800e1be:	f7fc fdc1 	bl	800ad44 <MX_DMA_Init>
  MX_I2C1_Init();
 800e1c2:	f7ff fe37 	bl	800de34 <MX_I2C1_Init>
  MX_SPI1_Init();
 800e1c6:	f000 f9b7 	bl	800e538 <MX_SPI1_Init>
  MX_SPI2_Init();
 800e1ca:	f000 f9db 	bl	800e584 <MX_SPI2_Init>
  MX_SPI3_Init();
 800e1ce:	f000 f9ff 	bl	800e5d0 <MX_SPI3_Init>
  MX_TIM1_Init();
 800e1d2:	f000 fdc9 	bl	800ed68 <MX_TIM1_Init>
  MX_SAI2_Init();
 800e1d6:	f000 f80d 	bl	800e1f4 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800e1da:	f000 f8f3 	bl	800e3c4 <MX_SPDIFRX_Init>
  MX_TIM11_Init();
 800e1de:	f000 fcbf 	bl	800eb60 <MX_TIM11_Init>
  MX_TIM3_Init();
 800e1e2:	f000 fc55 	bl	800ea90 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800e1e6:	f000 fe23 	bl	800ee30 <MX_USART3_UART_Init>
  MX_FREERTOS_Init();
 800e1ea:	f7fc fe33 	bl	800ae54 <MX_FREERTOS_Init>
  osKernelStart();
 800e1ee:	f7f7 fc51 	bl	8005a94 <osKernelStart>
  while (1)
 800e1f2:	e7fe      	b.n	800e1f2 <main+0x52>

0800e1f4 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 800e1f4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 800e1f6:	4817      	ldr	r0, [pc, #92]	@ (800e254 <MX_SAI2_Init+0x60>)
 800e1f8:	4b17      	ldr	r3, [pc, #92]	@ (800e258 <MX_SAI2_Init+0x64>)
 800e1fa:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	6041      	str	r1, [r0, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800e200:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800e202:	6101      	str	r1, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800e204:	6141      	str	r1, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800e206:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800e208:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e20c:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800e20e:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800e210:	6241      	str	r1, [r0, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800e212:	6281      	str	r1, [r0, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800e214:	62c1      	str	r1, [r0, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800e216:	2302      	movs	r3, #2
 800e218:	461a      	mov	r2, r3
 800e21a:	f7f5 f8d5 	bl	80033c8 <HAL_SAI_InitProtocol>
 800e21e:	b998      	cbnz	r0, 800e248 <MX_SAI2_Init+0x54>
  {
    Error_Handler();
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800e220:	480e      	ldr	r0, [pc, #56]	@ (800e25c <MX_SAI2_Init+0x68>)
 800e222:	4b0f      	ldr	r3, [pc, #60]	@ (800e260 <MX_SAI2_Init+0x6c>)
 800e224:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800e226:	2303      	movs	r3, #3
 800e228:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800e22a:	2301      	movs	r3, #1
 800e22c:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800e22e:	2100      	movs	r1, #0
 800e230:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800e232:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800e234:	60c1      	str	r1, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800e236:	6241      	str	r1, [r0, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800e238:	6281      	str	r1, [r0, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800e23a:	62c1      	str	r1, [r0, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800e23c:	2302      	movs	r3, #2
 800e23e:	461a      	mov	r2, r3
 800e240:	f7f5 f8c2 	bl	80033c8 <HAL_SAI_InitProtocol>
 800e244:	b918      	cbnz	r0, 800e24e <MX_SAI2_Init+0x5a>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800e246:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e248:	f7ff ff24 	bl	800e094 <Error_Handler>
 800e24c:	e7e8      	b.n	800e220 <MX_SAI2_Init+0x2c>
    Error_Handler();
 800e24e:	f7ff ff21 	bl	800e094 <Error_Handler>
}
 800e252:	e7f8      	b.n	800e246 <MX_SAI2_Init+0x52>
 800e254:	2001752c 	.word	0x2001752c
 800e258:	40015c04 	.word	0x40015c04
 800e25c:	200174a8 	.word	0x200174a8
 800e260:	40015c24 	.word	0x40015c24

0800e264 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800e264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e266:	b089      	sub	sp, #36	@ 0x24
 800e268:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 800e26a:	6802      	ldr	r2, [r0, #0]
 800e26c:	4b4a      	ldr	r3, [pc, #296]	@ (800e398 <HAL_SAI_MspInit+0x134>)
 800e26e:	429a      	cmp	r2, r3
 800e270:	d005      	beq.n	800e27e <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
    }
    if(saiHandle->Instance==SAI2_Block_B)
 800e272:	6822      	ldr	r2, [r4, #0]
 800e274:	4b49      	ldr	r3, [pc, #292]	@ (800e39c <HAL_SAI_MspInit+0x138>)
 800e276:	429a      	cmp	r2, r3
 800e278:	d04d      	beq.n	800e316 <HAL_SAI_MspInit+0xb2>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
    }
}
 800e27a:	b009      	add	sp, #36	@ 0x24
 800e27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI2_client == 0)
 800e27e:	4b48      	ldr	r3, [pc, #288]	@ (800e3a0 <HAL_SAI_MspInit+0x13c>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	b94b      	cbnz	r3, 800e298 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI2_CLK_ENABLE();
 800e284:	4a47      	ldr	r2, [pc, #284]	@ (800e3a4 <HAL_SAI_MspInit+0x140>)
 800e286:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800e288:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800e28c:	6451      	str	r1, [r2, #68]	@ 0x44
 800e28e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800e290:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 800e294:	9201      	str	r2, [sp, #4]
 800e296:	9a01      	ldr	r2, [sp, #4]
    SAI2_client ++;
 800e298:	3301      	adds	r3, #1
 800e29a:	4a41      	ldr	r2, [pc, #260]	@ (800e3a0 <HAL_SAI_MspInit+0x13c>)
 800e29c:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
 800e29e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800e2a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2a4:	2702      	movs	r7, #2
 800e2a6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2a8:	2500      	movs	r5, #0
 800e2aa:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2ac:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800e2ae:	260a      	movs	r6, #10
 800e2b0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e2b2:	a903      	add	r1, sp, #12
 800e2b4:	483c      	ldr	r0, [pc, #240]	@ (800e3a8 <HAL_SAI_MspInit+0x144>)
 800e2b6:	f7f2 fcbd 	bl	8000c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2be:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2c0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2c2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800e2c4:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 800e2c6:	a903      	add	r1, sp, #12
 800e2c8:	4838      	ldr	r0, [pc, #224]	@ (800e3ac <HAL_SAI_MspInit+0x148>)
 800e2ca:	f7f2 fcb3 	bl	8000c34 <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA2_Stream2;
 800e2ce:	4838      	ldr	r0, [pc, #224]	@ (800e3b0 <HAL_SAI_MspInit+0x14c>)
 800e2d0:	4b38      	ldr	r3, [pc, #224]	@ (800e3b4 <HAL_SAI_MspInit+0x150>)
 800e2d2:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 800e2d4:	f04f 53a0 	mov.w	r3, #335544320	@ 0x14000000
 800e2d8:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e2da:	2340      	movs	r3, #64	@ 0x40
 800e2dc:	6083      	str	r3, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800e2de:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800e2e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2e4:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e2e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e2ea:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e2ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e2f0:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800e2f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e2f6:	61c3      	str	r3, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 800e2f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e2fc:	6203      	str	r3, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e2fe:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800e300:	f7f2 faac 	bl	800085c <HAL_DMA_Init>
 800e304:	b920      	cbnz	r0, 800e310 <HAL_SAI_MspInit+0xac>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 800e306:	4b2a      	ldr	r3, [pc, #168]	@ (800e3b0 <HAL_SAI_MspInit+0x14c>)
 800e308:	6723      	str	r3, [r4, #112]	@ 0x70
 800e30a:	639c      	str	r4, [r3, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 800e30c:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800e30e:	e7b0      	b.n	800e272 <HAL_SAI_MspInit+0xe>
      Error_Handler();
 800e310:	f7ff fec0 	bl	800e094 <Error_Handler>
 800e314:	e7f7      	b.n	800e306 <HAL_SAI_MspInit+0xa2>
      if (SAI2_client == 0)
 800e316:	4b22      	ldr	r3, [pc, #136]	@ (800e3a0 <HAL_SAI_MspInit+0x13c>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	b94b      	cbnz	r3, 800e330 <HAL_SAI_MspInit+0xcc>
       __HAL_RCC_SAI2_CLK_ENABLE();
 800e31c:	4a21      	ldr	r2, [pc, #132]	@ (800e3a4 <HAL_SAI_MspInit+0x140>)
 800e31e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800e320:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800e324:	6451      	str	r1, [r2, #68]	@ 0x44
 800e326:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800e328:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 800e32c:	9202      	str	r2, [sp, #8]
 800e32e:	9a02      	ldr	r2, [sp, #8]
    SAI2_client ++;
 800e330:	3301      	adds	r3, #1
 800e332:	4a1b      	ldr	r2, [pc, #108]	@ (800e3a0 <HAL_SAI_MspInit+0x13c>)
 800e334:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
 800e336:	2301      	movs	r3, #1
 800e338:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e33a:	2302      	movs	r3, #2
 800e33c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e33e:	2500      	movs	r5, #0
 800e340:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e342:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800e344:	230a      	movs	r3, #10
 800e346:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 800e348:	a903      	add	r1, sp, #12
 800e34a:	481b      	ldr	r0, [pc, #108]	@ (800e3b8 <HAL_SAI_MspInit+0x154>)
 800e34c:	f7f2 fc72 	bl	8000c34 <HAL_GPIO_Init>
    hdma_sai2_b.Instance = DMA2_Stream6;
 800e350:	481a      	ldr	r0, [pc, #104]	@ (800e3bc <HAL_SAI_MspInit+0x158>)
 800e352:	4b1b      	ldr	r3, [pc, #108]	@ (800e3c0 <HAL_SAI_MspInit+0x15c>)
 800e354:	6003      	str	r3, [r0, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 800e356:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 800e35a:	6043      	str	r3, [r0, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e35c:	6085      	str	r5, [r0, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800e35e:	60c5      	str	r5, [r0, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800e360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e364:	6103      	str	r3, [r0, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e36a:	6143      	str	r3, [r0, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e36c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e370:	6183      	str	r3, [r0, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800e372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e376:	61c3      	str	r3, [r0, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 800e378:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e37c:	6203      	str	r3, [r0, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e37e:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800e380:	f7f2 fa6c 	bl	800085c <HAL_DMA_Init>
 800e384:	b920      	cbnz	r0, 800e390 <HAL_SAI_MspInit+0x12c>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 800e386:	4b0d      	ldr	r3, [pc, #52]	@ (800e3bc <HAL_SAI_MspInit+0x158>)
 800e388:	6723      	str	r3, [r4, #112]	@ 0x70
 800e38a:	639c      	str	r4, [r3, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 800e38c:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800e38e:	e774      	b.n	800e27a <HAL_SAI_MspInit+0x16>
      Error_Handler();
 800e390:	f7ff fe80 	bl	800e094 <Error_Handler>
 800e394:	e7f7      	b.n	800e386 <HAL_SAI_MspInit+0x122>
 800e396:	bf00      	nop
 800e398:	40015c04 	.word	0x40015c04
 800e39c:	40015c24 	.word	0x40015c24
 800e3a0:	200173e4 	.word	0x200173e4
 800e3a4:	40023800 	.word	0x40023800
 800e3a8:	40020c00 	.word	0x40020c00
 800e3ac:	40021000 	.word	0x40021000
 800e3b0:	20017448 	.word	0x20017448
 800e3b4:	40026440 	.word	0x40026440
 800e3b8:	40020000 	.word	0x40020000
 800e3bc:	200173e8 	.word	0x200173e8
 800e3c0:	400264a0 	.word	0x400264a0

0800e3c4 <MX_SPDIFRX_Init>:
DMA_HandleTypeDef hdma_spdif_rx_dt;
DMA_HandleTypeDef hdma_spdif_rx_cs;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 800e3c4:	b508      	push	{r3, lr}
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800e3c6:	4811      	ldr	r0, [pc, #68]	@ (800e40c <MX_SPDIFRX_Init+0x48>)
 800e3c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800e3cc:	6003      	str	r3, [r0, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	6043      	str	r3, [r0, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_15;
 800e3d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e3d6:	6082      	str	r2, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_ON;
 800e3d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800e3dc:	60c2      	str	r2, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800e3de:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_MSB;
 800e3e0:	2310      	movs	r3, #16
 800e3e2:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_ENABLE;
 800e3e4:	2308      	movs	r3, #8
 800e3e6:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_ON;
 800e3e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3ec:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_ON;
 800e3ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e3f2:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_ON;
 800e3f4:	2380      	movs	r3, #128	@ 0x80
 800e3f6:	6243      	str	r3, [r0, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_ON;
 800e3f8:	2340      	movs	r3, #64	@ 0x40
 800e3fa:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800e3fc:	f7f5 f97a 	bl	80036f4 <HAL_SPDIFRX_Init>
 800e400:	b900      	cbnz	r0, 800e404 <MX_SPDIFRX_Init+0x40>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800e402:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e404:	f7ff fe46 	bl	800e094 <Error_Handler>
}
 800e408:	e7fb      	b.n	800e402 <MX_SPDIFRX_Init+0x3e>
 800e40a:	bf00      	nop
 800e40c:	20017670 	.word	0x20017670

0800e410 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 800e410:	b570      	push	{r4, r5, r6, lr}
 800e412:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e414:	2300      	movs	r3, #0
 800e416:	9303      	str	r3, [sp, #12]
 800e418:	9304      	str	r3, [sp, #16]
 800e41a:	9305      	str	r3, [sp, #20]
 800e41c:	9306      	str	r3, [sp, #24]
 800e41e:	9307      	str	r3, [sp, #28]
  if(spdifrxHandle->Instance==SPDIFRX)
 800e420:	6803      	ldr	r3, [r0, #0]
 800e422:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 800e426:	d001      	beq.n	800e42c <HAL_SPDIFRX_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 800e428:	b008      	add	sp, #32
 800e42a:	bd70      	pop	{r4, r5, r6, pc}
 800e42c:	4604      	mov	r4, r0
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800e42e:	f503 33fc 	add.w	r3, r3, #129024	@ 0x1f800
 800e432:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e434:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e438:	641a      	str	r2, [r3, #64]	@ 0x40
 800e43a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e43c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 800e440:	9200      	str	r2, [sp, #0]
 800e442:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e446:	f042 0204 	orr.w	r2, r2, #4
 800e44a:	631a      	str	r2, [r3, #48]	@ 0x30
 800e44c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e44e:	f002 0204 	and.w	r2, r2, #4
 800e452:	9201      	str	r2, [sp, #4]
 800e454:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e458:	f042 0208 	orr.w	r2, r2, #8
 800e45c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e460:	f003 0308 	and.w	r3, r3, #8
 800e464:	9302      	str	r3, [sp, #8]
 800e466:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800e468:	2330      	movs	r3, #48	@ 0x30
 800e46a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e46c:	2502      	movs	r5, #2
 800e46e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800e470:	2608      	movs	r6, #8
 800e472:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e474:	a903      	add	r1, sp, #12
 800e476:	482a      	ldr	r0, [pc, #168]	@ (800e520 <HAL_SPDIFRX_MspInit+0x110>)
 800e478:	f7f2 fbdc 	bl	8000c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800e47c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800e480:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e482:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e484:	2500      	movs	r5, #0
 800e486:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e488:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800e48a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e48c:	a903      	add	r1, sp, #12
 800e48e:	4825      	ldr	r0, [pc, #148]	@ (800e524 <HAL_SPDIFRX_MspInit+0x114>)
 800e490:	f7f2 fbd0 	bl	8000c34 <HAL_GPIO_Init>
    hdma_spdif_rx_dt.Instance = DMA1_Stream1;
 800e494:	4824      	ldr	r0, [pc, #144]	@ (800e528 <HAL_SPDIFRX_MspInit+0x118>)
 800e496:	4b25      	ldr	r3, [pc, #148]	@ (800e52c <HAL_SPDIFRX_MspInit+0x11c>)
 800e498:	6003      	str	r3, [r0, #0]
    hdma_spdif_rx_dt.Init.Channel = DMA_CHANNEL_0;
 800e49a:	6045      	str	r5, [r0, #4]
    hdma_spdif_rx_dt.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e49c:	6085      	str	r5, [r0, #8]
    hdma_spdif_rx_dt.Init.PeriphInc = DMA_PINC_DISABLE;
 800e49e:	60c5      	str	r5, [r0, #12]
    hdma_spdif_rx_dt.Init.MemInc = DMA_MINC_ENABLE;
 800e4a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4a4:	6103      	str	r3, [r0, #16]
    hdma_spdif_rx_dt.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e4a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e4aa:	6143      	str	r3, [r0, #20]
    hdma_spdif_rx_dt.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e4ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e4b0:	6183      	str	r3, [r0, #24]
    hdma_spdif_rx_dt.Init.Mode = DMA_CIRCULAR;
 800e4b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e4b6:	61c3      	str	r3, [r0, #28]
    hdma_spdif_rx_dt.Init.Priority = DMA_PRIORITY_HIGH;
 800e4b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e4bc:	6203      	str	r3, [r0, #32]
    hdma_spdif_rx_dt.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e4be:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spdif_rx_dt) != HAL_OK)
 800e4c0:	f7f2 f9cc 	bl	800085c <HAL_DMA_Init>
 800e4c4:	bb30      	cbnz	r0, 800e514 <HAL_SPDIFRX_MspInit+0x104>
    __HAL_LINKDMA(spdifrxHandle,hdmaDrRx,hdma_spdif_rx_dt);
 800e4c6:	4b18      	ldr	r3, [pc, #96]	@ (800e528 <HAL_SPDIFRX_MspInit+0x118>)
 800e4c8:	6423      	str	r3, [r4, #64]	@ 0x40
 800e4ca:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_spdif_rx_cs.Instance = DMA1_Stream6;
 800e4cc:	4818      	ldr	r0, [pc, #96]	@ (800e530 <HAL_SPDIFRX_MspInit+0x120>)
 800e4ce:	4b19      	ldr	r3, [pc, #100]	@ (800e534 <HAL_SPDIFRX_MspInit+0x124>)
 800e4d0:	6003      	str	r3, [r0, #0]
    hdma_spdif_rx_cs.Init.Channel = DMA_CHANNEL_0;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	6043      	str	r3, [r0, #4]
    hdma_spdif_rx_cs.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e4d6:	6083      	str	r3, [r0, #8]
    hdma_spdif_rx_cs.Init.PeriphInc = DMA_PINC_DISABLE;
 800e4d8:	60c3      	str	r3, [r0, #12]
    hdma_spdif_rx_cs.Init.MemInc = DMA_MINC_ENABLE;
 800e4da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e4de:	6102      	str	r2, [r0, #16]
    hdma_spdif_rx_cs.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e4e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e4e4:	6142      	str	r2, [r0, #20]
    hdma_spdif_rx_cs.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e4e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800e4ea:	6182      	str	r2, [r0, #24]
    hdma_spdif_rx_cs.Init.Mode = DMA_CIRCULAR;
 800e4ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e4f0:	61c2      	str	r2, [r0, #28]
    hdma_spdif_rx_cs.Init.Priority = DMA_PRIORITY_LOW;
 800e4f2:	6203      	str	r3, [r0, #32]
    hdma_spdif_rx_cs.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e4f4:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spdif_rx_cs) != HAL_OK)
 800e4f6:	f7f2 f9b1 	bl	800085c <HAL_DMA_Init>
 800e4fa:	b970      	cbnz	r0, 800e51a <HAL_SPDIFRX_MspInit+0x10a>
    __HAL_LINKDMA(spdifrxHandle,hdmaCsRx,hdma_spdif_rx_cs);
 800e4fc:	4b0c      	ldr	r3, [pc, #48]	@ (800e530 <HAL_SPDIFRX_MspInit+0x120>)
 800e4fe:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800e500:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 5, 0);
 800e502:	2200      	movs	r2, #0
 800e504:	2105      	movs	r1, #5
 800e506:	2061      	movs	r0, #97	@ 0x61
 800e508:	f7f2 f90e 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
 800e50c:	2061      	movs	r0, #97	@ 0x61
 800e50e:	f7f2 f91b 	bl	8000748 <HAL_NVIC_EnableIRQ>
}
 800e512:	e789      	b.n	800e428 <HAL_SPDIFRX_MspInit+0x18>
      Error_Handler();
 800e514:	f7ff fdbe 	bl	800e094 <Error_Handler>
 800e518:	e7d5      	b.n	800e4c6 <HAL_SPDIFRX_MspInit+0xb6>
      Error_Handler();
 800e51a:	f7ff fdbb 	bl	800e094 <Error_Handler>
 800e51e:	e7ed      	b.n	800e4fc <HAL_SPDIFRX_MspInit+0xec>
 800e520:	40020800 	.word	0x40020800
 800e524:	40020c00 	.word	0x40020c00
 800e528:	20017610 	.word	0x20017610
 800e52c:	40026028 	.word	0x40026028
 800e530:	200175b0 	.word	0x200175b0
 800e534:	400260a0 	.word	0x400260a0

0800e538 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800e538:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800e53a:	4810      	ldr	r0, [pc, #64]	@ (800e57c <MX_SPI1_Init+0x44>)
 800e53c:	4b10      	ldr	r3, [pc, #64]	@ (800e580 <MX_SPI1_Init+0x48>)
 800e53e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800e540:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800e544:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800e546:	2300      	movs	r3, #0
 800e548:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800e54a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800e54e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e550:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e552:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800e554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e558:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e55a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e55c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800e55e:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e560:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800e562:	2207      	movs	r2, #7
 800e564:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800e566:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800e568:	2308      	movs	r3, #8
 800e56a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800e56c:	f7f5 fba7 	bl	8003cbe <HAL_SPI_Init>
 800e570:	b900      	cbnz	r0, 800e574 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800e572:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e574:	f7ff fd8e 	bl	800e094 <Error_Handler>
}
 800e578:	e7fb      	b.n	800e572 <MX_SPI1_Init+0x3a>
 800e57a:	bf00      	nop
 800e57c:	20017844 	.word	0x20017844
 800e580:	40013000 	.word	0x40013000

0800e584 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800e584:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800e586:	4810      	ldr	r0, [pc, #64]	@ (800e5c8 <MX_SPI2_Init+0x44>)
 800e588:	4b10      	ldr	r3, [pc, #64]	@ (800e5cc <MX_SPI2_Init+0x48>)
 800e58a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800e58c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800e590:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800e592:	2300      	movs	r3, #0
 800e594:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800e596:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800e59a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e59c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e59e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800e5a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5a4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800e5a6:	2220      	movs	r2, #32
 800e5a8:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e5aa:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800e5ac:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e5ae:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800e5b0:	2207      	movs	r2, #7
 800e5b2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800e5b4:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800e5b6:	2308      	movs	r3, #8
 800e5b8:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800e5ba:	f7f5 fb80 	bl	8003cbe <HAL_SPI_Init>
 800e5be:	b900      	cbnz	r0, 800e5c2 <MX_SPI2_Init+0x3e>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800e5c0:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e5c2:	f7ff fd67 	bl	800e094 <Error_Handler>
}
 800e5c6:	e7fb      	b.n	800e5c0 <MX_SPI2_Init+0x3c>
 800e5c8:	200177e0 	.word	0x200177e0
 800e5cc:	40003800 	.word	0x40003800

0800e5d0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800e5d0:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800e5d2:	4810      	ldr	r0, [pc, #64]	@ (800e614 <MX_SPI3_Init+0x44>)
 800e5d4:	4b10      	ldr	r3, [pc, #64]	@ (800e618 <MX_SPI3_Init+0x48>)
 800e5d6:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800e5d8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800e5dc:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800e5e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800e5e6:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e5e8:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e5ea:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800e5ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5f0:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800e5f2:	2210      	movs	r2, #16
 800e5f4:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e5f6:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800e5f8:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e5fa:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800e5fc:	2207      	movs	r2, #7
 800e5fe:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800e600:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800e602:	2308      	movs	r3, #8
 800e604:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800e606:	f7f5 fb5a 	bl	8003cbe <HAL_SPI_Init>
 800e60a:	b900      	cbnz	r0, 800e60e <MX_SPI3_Init+0x3e>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800e60c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e60e:	f7ff fd41 	bl	800e094 <Error_Handler>
}
 800e612:	e7fb      	b.n	800e60c <MX_SPI3_Init+0x3c>
 800e614:	2001777c 	.word	0x2001777c
 800e618:	40003c00 	.word	0x40003c00

0800e61c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800e61c:	b530      	push	{r4, r5, lr}
 800e61e:	b08d      	sub	sp, #52	@ 0x34
 800e620:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e622:	2300      	movs	r3, #0
 800e624:	9307      	str	r3, [sp, #28]
 800e626:	9308      	str	r3, [sp, #32]
 800e628:	9309      	str	r3, [sp, #36]	@ 0x24
 800e62a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e62c:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(spiHandle->Instance==SPI1)
 800e62e:	6803      	ldr	r3, [r0, #0]
 800e630:	4a56      	ldr	r2, [pc, #344]	@ (800e78c <HAL_SPI_MspInit+0x170>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d007      	beq.n	800e646 <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 800e636:	4a56      	ldr	r2, [pc, #344]	@ (800e790 <HAL_SPI_MspInit+0x174>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d045      	beq.n	800e6c8 <HAL_SPI_MspInit+0xac>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 800e63c:	4a55      	ldr	r2, [pc, #340]	@ (800e794 <HAL_SPI_MspInit+0x178>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d063      	beq.n	800e70a <HAL_SPI_MspInit+0xee>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800e642:	b00d      	add	sp, #52	@ 0x34
 800e644:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e646:	4b54      	ldr	r3, [pc, #336]	@ (800e798 <HAL_SPI_MspInit+0x17c>)
 800e648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e64a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e64e:	645a      	str	r2, [r3, #68]	@ 0x44
 800e650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e652:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800e656:	9201      	str	r2, [sp, #4]
 800e658:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e65a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e65c:	f042 0201 	orr.w	r2, r2, #1
 800e660:	631a      	str	r2, [r3, #48]	@ 0x30
 800e662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e664:	f003 0301 	and.w	r3, r3, #1
 800e668:	9302      	str	r3, [sp, #8]
 800e66a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800e66c:	23e0      	movs	r3, #224	@ 0xe0
 800e66e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e670:	2302      	movs	r3, #2
 800e672:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e674:	2503      	movs	r5, #3
 800e676:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e678:	2305      	movs	r3, #5
 800e67a:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e67c:	a907      	add	r1, sp, #28
 800e67e:	4847      	ldr	r0, [pc, #284]	@ (800e79c <HAL_SPI_MspInit+0x180>)
 800e680:	f7f2 fad8 	bl	8000c34 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800e684:	4846      	ldr	r0, [pc, #280]	@ (800e7a0 <HAL_SPI_MspInit+0x184>)
 800e686:	4b47      	ldr	r3, [pc, #284]	@ (800e7a4 <HAL_SPI_MspInit+0x188>)
 800e688:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800e68a:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 800e68e:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e690:	2340      	movs	r3, #64	@ 0x40
 800e692:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e694:	2300      	movs	r3, #0
 800e696:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e69c:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e69e:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e6a0:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800e6a2:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800e6a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e6a8:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e6aa:	2204      	movs	r2, #4
 800e6ac:	6242      	str	r2, [r0, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e6ae:	6285      	str	r5, [r0, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800e6b0:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800e6b2:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800e6b4:	f7f2 f8d2 	bl	800085c <HAL_DMA_Init>
 800e6b8:	b918      	cbnz	r0, 800e6c2 <HAL_SPI_MspInit+0xa6>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800e6ba:	4b39      	ldr	r3, [pc, #228]	@ (800e7a0 <HAL_SPI_MspInit+0x184>)
 800e6bc:	6563      	str	r3, [r4, #84]	@ 0x54
 800e6be:	639c      	str	r4, [r3, #56]	@ 0x38
 800e6c0:	e7bf      	b.n	800e642 <HAL_SPI_MspInit+0x26>
      Error_Handler();
 800e6c2:	f7ff fce7 	bl	800e094 <Error_Handler>
 800e6c6:	e7f8      	b.n	800e6ba <HAL_SPI_MspInit+0x9e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e6c8:	4b33      	ldr	r3, [pc, #204]	@ (800e798 <HAL_SPI_MspInit+0x17c>)
 800e6ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e6cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e6d0:	641a      	str	r2, [r3, #64]	@ 0x40
 800e6d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e6d4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800e6d8:	9203      	str	r2, [sp, #12]
 800e6da:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e6dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e6de:	f042 0202 	orr.w	r2, r2, #2
 800e6e2:	631a      	str	r2, [r3, #48]	@ 0x30
 800e6e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6e6:	f003 0302 	and.w	r3, r3, #2
 800e6ea:	9304      	str	r3, [sp, #16]
 800e6ec:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 800e6ee:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800e6f2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6f8:	2303      	movs	r3, #3
 800e6fa:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e6fc:	2305      	movs	r3, #5
 800e6fe:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e700:	a907      	add	r1, sp, #28
 800e702:	4829      	ldr	r0, [pc, #164]	@ (800e7a8 <HAL_SPI_MspInit+0x18c>)
 800e704:	f7f2 fa96 	bl	8000c34 <HAL_GPIO_Init>
 800e708:	e79b      	b.n	800e642 <HAL_SPI_MspInit+0x26>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800e70a:	4b23      	ldr	r3, [pc, #140]	@ (800e798 <HAL_SPI_MspInit+0x17c>)
 800e70c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e70e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e712:	641a      	str	r2, [r3, #64]	@ 0x40
 800e714:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e716:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800e71a:	9205      	str	r2, [sp, #20]
 800e71c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e71e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e720:	f042 0204 	orr.w	r2, r2, #4
 800e724:	631a      	str	r2, [r3, #48]	@ 0x30
 800e726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e728:	f003 0304 	and.w	r3, r3, #4
 800e72c:	9306      	str	r3, [sp, #24]
 800e72e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GENSPI_SCK_Pin|GENSPI_MISO_Pin|GENSPI_MOSI_Pin;
 800e730:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800e734:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e736:	2302      	movs	r3, #2
 800e738:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e73a:	2503      	movs	r5, #3
 800e73c:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e73e:	2306      	movs	r3, #6
 800e740:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e742:	a907      	add	r1, sp, #28
 800e744:	4819      	ldr	r0, [pc, #100]	@ (800e7ac <HAL_SPI_MspInit+0x190>)
 800e746:	f7f2 fa75 	bl	8000c34 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800e74a:	4819      	ldr	r0, [pc, #100]	@ (800e7b0 <HAL_SPI_MspInit+0x194>)
 800e74c:	4b19      	ldr	r3, [pc, #100]	@ (800e7b4 <HAL_SPI_MspInit+0x198>)
 800e74e:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800e750:	2300      	movs	r3, #0
 800e752:	6043      	str	r3, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e754:	2240      	movs	r2, #64	@ 0x40
 800e756:	6082      	str	r2, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e758:	60c3      	str	r3, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e75a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e75e:	6102      	str	r2, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e760:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e762:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800e764:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800e766:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e76a:	6202      	str	r2, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e76c:	2204      	movs	r2, #4
 800e76e:	6242      	str	r2, [r0, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e770:	6285      	str	r5, [r0, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800e772:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800e774:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800e776:	f7f2 f871 	bl	800085c <HAL_DMA_Init>
 800e77a:	b918      	cbnz	r0, 800e784 <HAL_SPI_MspInit+0x168>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800e77c:	4b0c      	ldr	r3, [pc, #48]	@ (800e7b0 <HAL_SPI_MspInit+0x194>)
 800e77e:	6563      	str	r3, [r4, #84]	@ 0x54
 800e780:	639c      	str	r4, [r3, #56]	@ 0x38
}
 800e782:	e75e      	b.n	800e642 <HAL_SPI_MspInit+0x26>
      Error_Handler();
 800e784:	f7ff fc86 	bl	800e094 <Error_Handler>
 800e788:	e7f8      	b.n	800e77c <HAL_SPI_MspInit+0x160>
 800e78a:	bf00      	nop
 800e78c:	40013000 	.word	0x40013000
 800e790:	40003800 	.word	0x40003800
 800e794:	40003c00 	.word	0x40003c00
 800e798:	40023800 	.word	0x40023800
 800e79c:	40020000 	.word	0x40020000
 800e7a0:	2001771c 	.word	0x2001771c
 800e7a4:	40026458 	.word	0x40026458
 800e7a8:	40020400 	.word	0x40020400
 800e7ac:	40020800 	.word	0x40020800
 800e7b0:	200176bc 	.word	0x200176bc
 800e7b4:	40026088 	.word	0x40026088

0800e7b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e7b8:	b500      	push	{lr}
 800e7ba:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e7f4 <HAL_MspInit+0x3c>)
 800e7be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e7c0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800e7c4:	641a      	str	r2, [r3, #64]	@ 0x40
 800e7c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e7c8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800e7cc:	9200      	str	r2, [sp, #0]
 800e7ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e7d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e7d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e7d6:	645a      	str	r2, [r3, #68]	@ 0x44
 800e7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e7de:	9301      	str	r3, [sp, #4]
 800e7e0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	210f      	movs	r1, #15
 800e7e6:	f06f 0001 	mvn.w	r0, #1
 800e7ea:	f7f1 ff9d 	bl	8000728 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e7ee:	b003      	add	sp, #12
 800e7f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7f4:	40023800 	.word	0x40023800

0800e7f8 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7f8:	b508      	push	{r3, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800e7fa:	f7f1 ff2b 	bl	8000654 <HAL_IncTick>
}
 800e7fe:	bd08      	pop	{r3, pc}

0800e800 <HAL_InitTick>:
{
 800e800:	b530      	push	{r4, r5, lr}
 800e802:	b089      	sub	sp, #36	@ 0x24
 800e804:	4604      	mov	r4, r0
  __HAL_RCC_TIM14_CLK_ENABLE();
 800e806:	4b24      	ldr	r3, [pc, #144]	@ (800e898 <HAL_InitTick+0x98>)
 800e808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e80a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e80e:	641a      	str	r2, [r3, #64]	@ 0x40
 800e810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e816:	9301      	str	r3, [sp, #4]
 800e818:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e81a:	a902      	add	r1, sp, #8
 800e81c:	a803      	add	r0, sp, #12
 800e81e:	f7f3 ff05 	bl	800262c <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800e822:	9b06      	ldr	r3, [sp, #24]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800e824:	b9f3      	cbnz	r3, 800e864 <HAL_InitTick+0x64>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800e826:	f7f3 fee1 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 800e82a:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e82c:	4a1b      	ldr	r2, [pc, #108]	@ (800e89c <HAL_InitTick+0x9c>)
 800e82e:	fba2 2303 	umull	r2, r3, r2, r3
 800e832:	0c9b      	lsrs	r3, r3, #18
 800e834:	3b01      	subs	r3, #1
  htim14.Instance = TIM14;
 800e836:	481a      	ldr	r0, [pc, #104]	@ (800e8a0 <HAL_InitTick+0xa0>)
 800e838:	4a1a      	ldr	r2, [pc, #104]	@ (800e8a4 <HAL_InitTick+0xa4>)
 800e83a:	6002      	str	r2, [r0, #0]
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800e83c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800e840:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800e842:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 800e844:	2300      	movs	r3, #0
 800e846:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e848:	6083      	str	r3, [r0, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e84a:	6183      	str	r3, [r0, #24]
  status = HAL_TIM_Base_Init(&htim14);
 800e84c:	f7f6 fd72 	bl	8005334 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800e850:	4605      	mov	r5, r0
 800e852:	b158      	cbz	r0, 800e86c <HAL_InitTick+0x6c>
  HAL_TIM_RegisterCallback(&htim14, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 800e854:	4a14      	ldr	r2, [pc, #80]	@ (800e8a8 <HAL_InitTick+0xa8>)
 800e856:	210e      	movs	r1, #14
 800e858:	4811      	ldr	r0, [pc, #68]	@ (800e8a0 <HAL_InitTick+0xa0>)
 800e85a:	f7f6 f926 	bl	8004aaa <HAL_TIM_RegisterCallback>
}
 800e85e:	4628      	mov	r0, r5
 800e860:	b009      	add	sp, #36	@ 0x24
 800e862:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800e864:	f7f3 fec2 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 800e868:	0043      	lsls	r3, r0, #1
 800e86a:	e7df      	b.n	800e82c <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim14);
 800e86c:	480c      	ldr	r0, [pc, #48]	@ (800e8a0 <HAL_InitTick+0xa0>)
 800e86e:	f7f6 f813 	bl	8004898 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800e872:	4605      	mov	r5, r0
 800e874:	2800      	cmp	r0, #0
 800e876:	d1ed      	bne.n	800e854 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800e878:	202d      	movs	r0, #45	@ 0x2d
 800e87a:	f7f1 ff65 	bl	8000748 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e87e:	2c0f      	cmp	r4, #15
 800e880:	d901      	bls.n	800e886 <HAL_InitTick+0x86>
        status = HAL_ERROR;
 800e882:	2501      	movs	r5, #1
 800e884:	e7e6      	b.n	800e854 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800e886:	2200      	movs	r2, #0
 800e888:	4621      	mov	r1, r4
 800e88a:	202d      	movs	r0, #45	@ 0x2d
 800e88c:	f7f1 ff4c 	bl	8000728 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e890:	4b06      	ldr	r3, [pc, #24]	@ (800e8ac <HAL_InitTick+0xac>)
 800e892:	601c      	str	r4, [r3, #0]
 800e894:	e7de      	b.n	800e854 <HAL_InitTick+0x54>
 800e896:	bf00      	nop
 800e898:	40023800 	.word	0x40023800
 800e89c:	431bde83 	.word	0x431bde83
 800e8a0:	200178a8 	.word	0x200178a8
 800e8a4:	40002000 	.word	0x40002000
 800e8a8:	0800e7f9 	.word	0x0800e7f9
 800e8ac:	20000004 	.word	0x20000004

0800e8b0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e8b0:	4770      	bx	lr

0800e8b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e8b2:	e7fe      	b.n	800e8b2 <HardFault_Handler>

0800e8b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e8b4:	e7fe      	b.n	800e8b4 <MemManage_Handler>

0800e8b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e8b6:	e7fe      	b.n	800e8b6 <BusFault_Handler>

0800e8b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e8b8:	e7fe      	b.n	800e8b8 <UsageFault_Handler>

0800e8ba <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e8ba:	4770      	bx	lr

0800e8bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800e8bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800e8be:	4802      	ldr	r0, [pc, #8]	@ (800e8c8 <DMA1_Stream0_IRQHandler+0xc>)
 800e8c0:	f7f2 f8ca 	bl	8000a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800e8c4:	bd08      	pop	{r3, pc}
 800e8c6:	bf00      	nop
 800e8c8:	200172d8 	.word	0x200172d8

0800e8cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800e8cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spdif_rx_dt);
 800e8ce:	4802      	ldr	r0, [pc, #8]	@ (800e8d8 <DMA1_Stream1_IRQHandler+0xc>)
 800e8d0:	f7f2 f8c2 	bl	8000a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800e8d4:	bd08      	pop	{r3, pc}
 800e8d6:	bf00      	nop
 800e8d8:	20017610 	.word	0x20017610

0800e8dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800e8dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800e8de:	4802      	ldr	r0, [pc, #8]	@ (800e8e8 <DMA1_Stream5_IRQHandler+0xc>)
 800e8e0:	f7f2 f8ba 	bl	8000a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800e8e4:	bd08      	pop	{r3, pc}
 800e8e6:	bf00      	nop
 800e8e8:	200176bc 	.word	0x200176bc

0800e8ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800e8ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spdif_rx_cs);
 800e8ee:	4802      	ldr	r0, [pc, #8]	@ (800e8f8 <DMA1_Stream6_IRQHandler+0xc>)
 800e8f0:	f7f2 f8b2 	bl	8000a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800e8f4:	bd08      	pop	{r3, pc}
 800e8f6:	bf00      	nop
 800e8f8:	200175b0 	.word	0x200175b0

0800e8fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800e8fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SI_INT_Pin);
 800e8fe:	2020      	movs	r0, #32
 800e900:	f7f2 faa0 	bl	8000e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800e904:	bd08      	pop	{r3, pc}
	...

0800e908 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800e908:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e90a:	4803      	ldr	r0, [pc, #12]	@ (800e918 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800e90c:	f7f5 ffda 	bl	80048c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800e910:	4802      	ldr	r0, [pc, #8]	@ (800e91c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800e912:	f7f5 ffd7 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800e916:	bd08      	pop	{r3, pc}
 800e918:	20017b18 	.word	0x20017b18
 800e91c:	200179b8 	.word	0x200179b8

0800e920 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800e920:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800e922:	4802      	ldr	r0, [pc, #8]	@ (800e92c <TIM3_IRQHandler+0xc>)
 800e924:	f7f5 ffce 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800e928:	bd08      	pop	{r3, pc}
 800e92a:	bf00      	nop
 800e92c:	20017a68 	.word	0x20017a68

0800e930 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800e930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800e932:	4802      	ldr	r0, [pc, #8]	@ (800e93c <I2C1_EV_IRQHandler+0xc>)
 800e934:	f7f3 f810 	bl	8001958 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800e938:	bd08      	pop	{r3, pc}
 800e93a:	bf00      	nop
 800e93c:	20017398 	.word	0x20017398

0800e940 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800e940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800e942:	4802      	ldr	r0, [pc, #8]	@ (800e94c <I2C1_ER_IRQHandler+0xc>)
 800e944:	f7f3 fa79 	bl	8001e3a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800e948:	bd08      	pop	{r3, pc}
 800e94a:	bf00      	nop
 800e94c:	20017398 	.word	0x20017398

0800e950 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e950:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NUserButton_Pin);
 800e952:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e956:	f7f2 fa75 	bl	8000e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e95a:	bd08      	pop	{r3, pc}

0800e95c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800e95c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800e95e:	4802      	ldr	r0, [pc, #8]	@ (800e968 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 800e960:	f7f5 ffb0 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800e964:	bd08      	pop	{r3, pc}
 800e966:	bf00      	nop
 800e968:	200178a8 	.word	0x200178a8

0800e96c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800e96c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800e96e:	4802      	ldr	r0, [pc, #8]	@ (800e978 <DMA1_Stream7_IRQHandler+0xc>)
 800e970:	f7f2 f872 	bl	8000a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800e974:	bd08      	pop	{r3, pc}
 800e976:	bf00      	nop
 800e978:	20017338 	.word	0x20017338

0800e97c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800e97c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800e97e:	4802      	ldr	r0, [pc, #8]	@ (800e988 <DMA2_Stream1_IRQHandler+0xc>)
 800e980:	f7f2 f86a 	bl	8000a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800e984:	bd08      	pop	{r3, pc}
 800e986:	bf00      	nop
 800e988:	20017958 	.word	0x20017958

0800e98c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800e98c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800e98e:	4802      	ldr	r0, [pc, #8]	@ (800e998 <DMA2_Stream2_IRQHandler+0xc>)
 800e990:	f7f2 f862 	bl	8000a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800e994:	bd08      	pop	{r3, pc}
 800e996:	bf00      	nop
 800e998:	20017448 	.word	0x20017448

0800e99c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800e99c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800e99e:	4802      	ldr	r0, [pc, #8]	@ (800e9a8 <DMA2_Stream3_IRQHandler+0xc>)
 800e9a0:	f7f2 f85a 	bl	8000a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800e9a4:	bd08      	pop	{r3, pc}
 800e9a6:	bf00      	nop
 800e9a8:	2001771c 	.word	0x2001771c

0800e9ac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800e9ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800e9ae:	4802      	ldr	r0, [pc, #8]	@ (800e9b8 <DMA2_Stream6_IRQHandler+0xc>)
 800e9b0:	f7f2 f852 	bl	8000a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800e9b4:	bd08      	pop	{r3, pc}
 800e9b6:	bf00      	nop
 800e9b8:	200173e8 	.word	0x200173e8

0800e9bc <SPDIF_RX_IRQHandler>:

/**
  * @brief This function handles SPDIF-RX global interrupt.
  */
void SPDIF_RX_IRQHandler(void)
{
 800e9bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPDIF_RX_IRQn 0 */

  /* USER CODE END SPDIF_RX_IRQn 0 */
  HAL_SPDIFRX_IRQHandler(&hspdif);
 800e9be:	4802      	ldr	r0, [pc, #8]	@ (800e9c8 <SPDIF_RX_IRQHandler+0xc>)
 800e9c0:	f7f5 f82a 	bl	8003a18 <HAL_SPDIFRX_IRQHandler>
  /* USER CODE BEGIN SPDIF_RX_IRQn 1 */

  /* USER CODE END SPDIF_RX_IRQn 1 */
}
 800e9c4:	bd08      	pop	{r3, pc}
 800e9c6:	bf00      	nop
 800e9c8:	20017670 	.word	0x20017670

0800e9cc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800e9cc:	2001      	movs	r0, #1
 800e9ce:	4770      	bx	lr

0800e9d0 <_kill>:

int _kill(int pid, int sig)
{
 800e9d0:	b508      	push	{r3, lr}
	errno = EINVAL;
 800e9d2:	f001 fa89 	bl	800fee8 <__errno>
 800e9d6:	2316      	movs	r3, #22
 800e9d8:	6003      	str	r3, [r0, #0]
	return -1;
}
 800e9da:	f04f 30ff 	mov.w	r0, #4294967295
 800e9de:	bd08      	pop	{r3, pc}

0800e9e0 <_exit>:

void _exit (int status)
{
 800e9e0:	b508      	push	{r3, lr}
	_kill(status, -1);
 800e9e2:	f04f 31ff 	mov.w	r1, #4294967295
 800e9e6:	f7ff fff3 	bl	800e9d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800e9ea:	e7fe      	b.n	800e9ea <_exit+0xa>

0800e9ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e9ec:	b570      	push	{r4, r5, r6, lr}
 800e9ee:	460c      	mov	r4, r1
 800e9f0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e9f2:	2500      	movs	r5, #0
 800e9f4:	e006      	b.n	800ea04 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800e9f6:	f3af 8000 	nop.w
 800e9fa:	4621      	mov	r1, r4
 800e9fc:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea00:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800ea02:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea04:	42b5      	cmp	r5, r6
 800ea06:	dbf6      	blt.n	800e9f6 <_read+0xa>
	}

return len;
}
 800ea08:	4630      	mov	r0, r6
 800ea0a:	bd70      	pop	{r4, r5, r6, pc}

0800ea0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ea0c:	b570      	push	{r4, r5, r6, lr}
 800ea0e:	460c      	mov	r4, r1
 800ea10:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea12:	2500      	movs	r5, #0
 800ea14:	e004      	b.n	800ea20 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800ea16:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ea1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea1e:	3501      	adds	r5, #1
 800ea20:	42b5      	cmp	r5, r6
 800ea22:	dbf8      	blt.n	800ea16 <_write+0xa>
	}
	return len;
}
 800ea24:	4630      	mov	r0, r6
 800ea26:	bd70      	pop	{r4, r5, r6, pc}

0800ea28 <_close>:

int _close(int file)
{
	return -1;
}
 800ea28:	f04f 30ff 	mov.w	r0, #4294967295
 800ea2c:	4770      	bx	lr

0800ea2e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800ea2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ea32:	604b      	str	r3, [r1, #4]
	return 0;
}
 800ea34:	2000      	movs	r0, #0
 800ea36:	4770      	bx	lr

0800ea38 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800ea38:	2001      	movs	r0, #1
 800ea3a:	4770      	bx	lr

0800ea3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	4770      	bx	lr

0800ea40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ea40:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ea42:	4a0f      	ldr	r2, [pc, #60]	@ (800ea80 <SystemInit+0x40>)
 800ea44:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ea48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ea4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ea50:	4b0c      	ldr	r3, [pc, #48]	@ (800ea84 <SystemInit+0x44>)
 800ea52:	6819      	ldr	r1, [r3, #0]
 800ea54:	f041 0101 	orr.w	r1, r1, #1
 800ea58:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ea5e:	681c      	ldr	r4, [r3, #0]
 800ea60:	4909      	ldr	r1, [pc, #36]	@ (800ea88 <SystemInit+0x48>)
 800ea62:	4021      	ands	r1, r4
 800ea64:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ea66:	4909      	ldr	r1, [pc, #36]	@ (800ea8c <SystemInit+0x4c>)
 800ea68:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ea6a:	6819      	ldr	r1, [r3, #0]
 800ea6c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800ea70:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ea72:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ea74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ea78:	6093      	str	r3, [r2, #8]
#endif
}
 800ea7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	e000ed00 	.word	0xe000ed00
 800ea84:	40023800 	.word	0x40023800
 800ea88:	fef6ffff 	.word	0xfef6ffff
 800ea8c:	24003010 	.word	0x24003010

0800ea90 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ea90:	b500      	push	{lr}
 800ea92:	b091      	sub	sp, #68	@ 0x44

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ea94:	2300      	movs	r3, #0
 800ea96:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea98:	930d      	str	r3, [sp, #52]	@ 0x34
 800ea9a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ea9c:	930f      	str	r3, [sp, #60]	@ 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800ea9e:	9307      	str	r3, [sp, #28]
 800eaa0:	9308      	str	r3, [sp, #32]
 800eaa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaa4:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaa6:	930b      	str	r3, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eaa8:	9304      	str	r3, [sp, #16]
 800eaaa:	9305      	str	r3, [sp, #20]
 800eaac:	9306      	str	r3, [sp, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800eaae:	9300      	str	r3, [sp, #0]
 800eab0:	9301      	str	r3, [sp, #4]
 800eab2:	9302      	str	r3, [sp, #8]
 800eab4:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800eab6:	4828      	ldr	r0, [pc, #160]	@ (800eb58 <MX_TIM3_Init+0xc8>)
 800eab8:	4a28      	ldr	r2, [pc, #160]	@ (800eb5c <MX_TIM3_Init+0xcc>)
 800eaba:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 107;
 800eabc:	226b      	movs	r2, #107	@ 0x6b
 800eabe:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eac0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 4999;
 800eac2:	f241 3287 	movw	r2, #4999	@ 0x1387
 800eac6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eac8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eaca:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800eacc:	f7f6 fc32 	bl	8005334 <HAL_TIM_Base_Init>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	d12f      	bne.n	800eb34 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ead4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ead8:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800eada:	a90c      	add	r1, sp, #48	@ 0x30
 800eadc:	481e      	ldr	r0, [pc, #120]	@ (800eb58 <MX_TIM3_Init+0xc8>)
 800eade:	f7f6 fab9 	bl	8005054 <HAL_TIM_ConfigClockSource>
 800eae2:	bb50      	cbnz	r0, 800eb3a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800eae4:	481c      	ldr	r0, [pc, #112]	@ (800eb58 <MX_TIM3_Init+0xc8>)
 800eae6:	f7f6 fc6d 	bl	80053c4 <HAL_TIM_IC_Init>
 800eaea:	bb48      	cbnz	r0, 800eb40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800eaec:	2304      	movs	r3, #4
 800eaee:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800eaf0:	2350      	movs	r3, #80	@ 0x50
 800eaf2:	9308      	str	r3, [sp, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800eaf4:	230a      	movs	r3, #10
 800eaf6:	9309      	str	r3, [sp, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800eafc:	a907      	add	r1, sp, #28
 800eafe:	4816      	ldr	r0, [pc, #88]	@ (800eb58 <MX_TIM3_Init+0xc8>)
 800eb00:	f7f6 fb60 	bl	80051c4 <HAL_TIM_SlaveConfigSynchro>
 800eb04:	b9f8      	cbnz	r0, 800eb46 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eb06:	2300      	movs	r3, #0
 800eb08:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eb0a:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800eb0c:	a904      	add	r1, sp, #16
 800eb0e:	4812      	ldr	r0, [pc, #72]	@ (800eb58 <MX_TIM3_Init+0xc8>)
 800eb10:	f7f6 fc7c 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 800eb14:	b9d0      	cbnz	r0, 800eb4c <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800eb16:	230a      	movs	r3, #10
 800eb18:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800eb1e:	2200      	movs	r2, #0
 800eb20:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800eb22:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800eb24:	4669      	mov	r1, sp
 800eb26:	480c      	ldr	r0, [pc, #48]	@ (800eb58 <MX_TIM3_Init+0xc8>)
 800eb28:	f7f6 fa26 	bl	8004f78 <HAL_TIM_IC_ConfigChannel>
 800eb2c:	b988      	cbnz	r0, 800eb52 <MX_TIM3_Init+0xc2>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800eb2e:	b011      	add	sp, #68	@ 0x44
 800eb30:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800eb34:	f7ff faae 	bl	800e094 <Error_Handler>
 800eb38:	e7cc      	b.n	800ead4 <MX_TIM3_Init+0x44>
    Error_Handler();
 800eb3a:	f7ff faab 	bl	800e094 <Error_Handler>
 800eb3e:	e7d1      	b.n	800eae4 <MX_TIM3_Init+0x54>
    Error_Handler();
 800eb40:	f7ff faa8 	bl	800e094 <Error_Handler>
 800eb44:	e7d2      	b.n	800eaec <MX_TIM3_Init+0x5c>
    Error_Handler();
 800eb46:	f7ff faa5 	bl	800e094 <Error_Handler>
 800eb4a:	e7dc      	b.n	800eb06 <MX_TIM3_Init+0x76>
    Error_Handler();
 800eb4c:	f7ff faa2 	bl	800e094 <Error_Handler>
 800eb50:	e7e1      	b.n	800eb16 <MX_TIM3_Init+0x86>
    Error_Handler();
 800eb52:	f7ff fa9f 	bl	800e094 <Error_Handler>
}
 800eb56:	e7ea      	b.n	800eb2e <MX_TIM3_Init+0x9e>
 800eb58:	20017a68 	.word	0x20017a68
 800eb5c:	40000400 	.word	0x40000400

0800eb60 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800eb60:	b500      	push	{lr}
 800eb62:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800eb64:	2300      	movs	r3, #0
 800eb66:	9300      	str	r3, [sp, #0]
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	9302      	str	r3, [sp, #8]
 800eb6c:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800eb6e:	4818      	ldr	r0, [pc, #96]	@ (800ebd0 <MX_TIM11_Init+0x70>)
 800eb70:	4a18      	ldr	r2, [pc, #96]	@ (800ebd4 <MX_TIM11_Init+0x74>)
 800eb72:	6002      	str	r2, [r0, #0]
  htim11.Init.Prescaler = 0;
 800eb74:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb76:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 0xFFFF;
 800eb78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eb7c:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eb7e:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eb80:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800eb82:	f7f6 fbd7 	bl	8005334 <HAL_TIM_Base_Init>
 800eb86:	b9b0      	cbnz	r0, 800ebb6 <MX_TIM11_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 800eb88:	4811      	ldr	r0, [pc, #68]	@ (800ebd0 <MX_TIM11_Init+0x70>)
 800eb8a:	f7f6 fc1b 	bl	80053c4 <HAL_TIM_IC_Init>
 800eb8e:	b9a8      	cbnz	r0, 800ebbc <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800eb90:	2200      	movs	r2, #0
 800eb92:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800eb94:	2301      	movs	r3, #1
 800eb96:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800eb98:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800eb9a:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800eb9c:	4669      	mov	r1, sp
 800eb9e:	480c      	ldr	r0, [pc, #48]	@ (800ebd0 <MX_TIM11_Init+0x70>)
 800eba0:	f7f6 f9ea 	bl	8004f78 <HAL_TIM_IC_ConfigChannel>
 800eba4:	b968      	cbnz	r0, 800ebc2 <MX_TIM11_Init+0x62>
  {
    Error_Handler();
  }
  if (HAL_TIMEx_RemapConfig(&htim11, TIM_TIM11_SPDIFRX) != HAL_OK)
 800eba6:	2101      	movs	r1, #1
 800eba8:	4809      	ldr	r0, [pc, #36]	@ (800ebd0 <MX_TIM11_Init+0x70>)
 800ebaa:	f7f6 fcab 	bl	8005504 <HAL_TIMEx_RemapConfig>
 800ebae:	b958      	cbnz	r0, 800ebc8 <MX_TIM11_Init+0x68>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800ebb0:	b005      	add	sp, #20
 800ebb2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800ebb6:	f7ff fa6d 	bl	800e094 <Error_Handler>
 800ebba:	e7e5      	b.n	800eb88 <MX_TIM11_Init+0x28>
    Error_Handler();
 800ebbc:	f7ff fa6a 	bl	800e094 <Error_Handler>
 800ebc0:	e7e6      	b.n	800eb90 <MX_TIM11_Init+0x30>
    Error_Handler();
 800ebc2:	f7ff fa67 	bl	800e094 <Error_Handler>
 800ebc6:	e7ee      	b.n	800eba6 <MX_TIM11_Init+0x46>
    Error_Handler();
 800ebc8:	f7ff fa64 	bl	800e094 <Error_Handler>
}
 800ebcc:	e7f0      	b.n	800ebb0 <MX_TIM11_Init+0x50>
 800ebce:	bf00      	nop
 800ebd0:	200179b8 	.word	0x200179b8
 800ebd4:	40014800 	.word	0x40014800

0800ebd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 800ebd8:	6802      	ldr	r2, [r0, #0]
 800ebda:	4b21      	ldr	r3, [pc, #132]	@ (800ec60 <HAL_TIM_PWM_MspInit+0x88>)
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d000      	beq.n	800ebe2 <HAL_TIM_PWM_MspInit+0xa>
 800ebe0:	4770      	bx	lr
{
 800ebe2:	b510      	push	{r4, lr}
 800ebe4:	b082      	sub	sp, #8
 800ebe6:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ebe8:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 800ebec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ebee:	f042 0201 	orr.w	r2, r2, #1
 800ebf2:	645a      	str	r2, [r3, #68]	@ 0x44
 800ebf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebf6:	f003 0301 	and.w	r3, r3, #1
 800ebfa:	9301      	str	r3, [sp, #4]
 800ebfc:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800ebfe:	4819      	ldr	r0, [pc, #100]	@ (800ec64 <HAL_TIM_PWM_MspInit+0x8c>)
 800ec00:	4b19      	ldr	r3, [pc, #100]	@ (800ec68 <HAL_TIM_PWM_MspInit+0x90>)
 800ec02:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800ec04:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 800ec08:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ec0a:	2340      	movs	r3, #64	@ 0x40
 800ec0c:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ec12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ec16:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ec18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec1c:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ec1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ec22:	6182      	str	r2, [r0, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800ec24:	61c3      	str	r3, [r0, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ec26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ec2a:	6202      	str	r2, [r0, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ec2c:	2204      	movs	r2, #4
 800ec2e:	6242      	str	r2, [r0, #36]	@ 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800ec30:	2203      	movs	r2, #3
 800ec32:	6282      	str	r2, [r0, #40]	@ 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 800ec34:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ec36:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800ec38:	f7f1 fe10 	bl	800085c <HAL_DMA_Init>
 800ec3c:	b960      	cbnz	r0, 800ec58 <HAL_TIM_PWM_MspInit+0x80>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800ec3e:	4b09      	ldr	r3, [pc, #36]	@ (800ec64 <HAL_TIM_PWM_MspInit+0x8c>)
 800ec40:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec42:	639c      	str	r4, [r3, #56]	@ 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800ec44:	2200      	movs	r2, #0
 800ec46:	2105      	movs	r1, #5
 800ec48:	201a      	movs	r0, #26
 800ec4a:	f7f1 fd6d 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800ec4e:	201a      	movs	r0, #26
 800ec50:	f7f1 fd7a 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800ec54:	b002      	add	sp, #8
 800ec56:	bd10      	pop	{r4, pc}
      Error_Handler();
 800ec58:	f7ff fa1c 	bl	800e094 <Error_Handler>
 800ec5c:	e7ef      	b.n	800ec3e <HAL_TIM_PWM_MspInit+0x66>
 800ec5e:	bf00      	nop
 800ec60:	40010000 	.word	0x40010000
 800ec64:	20017958 	.word	0x20017958
 800ec68:	40026428 	.word	0x40026428

0800ec6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ec6c:	b500      	push	{lr}
 800ec6e:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec70:	2300      	movs	r3, #0
 800ec72:	9303      	str	r3, [sp, #12]
 800ec74:	9304      	str	r3, [sp, #16]
 800ec76:	9305      	str	r3, [sp, #20]
 800ec78:	9306      	str	r3, [sp, #24]
 800ec7a:	9307      	str	r3, [sp, #28]
  if(tim_baseHandle->Instance==TIM3)
 800ec7c:	6803      	ldr	r3, [r0, #0]
 800ec7e:	4a20      	ldr	r2, [pc, #128]	@ (800ed00 <HAL_TIM_Base_MspInit+0x94>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d005      	beq.n	800ec90 <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM11)
 800ec84:	4a1f      	ldr	r2, [pc, #124]	@ (800ed04 <HAL_TIM_Base_MspInit+0x98>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d027      	beq.n	800ecda <HAL_TIM_Base_MspInit+0x6e>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800ec8a:	b009      	add	sp, #36	@ 0x24
 800ec8c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ec90:	4b1d      	ldr	r3, [pc, #116]	@ (800ed08 <HAL_TIM_Base_MspInit+0x9c>)
 800ec92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ec94:	f042 0202 	orr.w	r2, r2, #2
 800ec98:	641a      	str	r2, [r3, #64]	@ 0x40
 800ec9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ec9c:	f002 0202 	and.w	r2, r2, #2
 800eca0:	9200      	str	r2, [sp, #0]
 800eca2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800eca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eca6:	f042 0204 	orr.w	r2, r2, #4
 800ecaa:	631a      	str	r2, [r3, #48]	@ 0x30
 800ecac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecae:	f003 0304 	and.w	r3, r3, #4
 800ecb2:	9301      	str	r3, [sp, #4]
 800ecb4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ecb6:	2340      	movs	r3, #64	@ 0x40
 800ecb8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecba:	2302      	movs	r3, #2
 800ecbc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ecbe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ecc0:	a903      	add	r1, sp, #12
 800ecc2:	4812      	ldr	r0, [pc, #72]	@ (800ed0c <HAL_TIM_Base_MspInit+0xa0>)
 800ecc4:	f7f1 ffb6 	bl	8000c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800ecc8:	2200      	movs	r2, #0
 800ecca:	2105      	movs	r1, #5
 800eccc:	201d      	movs	r0, #29
 800ecce:	f7f1 fd2b 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ecd2:	201d      	movs	r0, #29
 800ecd4:	f7f1 fd38 	bl	8000748 <HAL_NVIC_EnableIRQ>
 800ecd8:	e7d7      	b.n	800ec8a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800ecda:	4b0b      	ldr	r3, [pc, #44]	@ (800ed08 <HAL_TIM_Base_MspInit+0x9c>)
 800ecdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ecde:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ece2:	645a      	str	r2, [r3, #68]	@ 0x44
 800ece4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ece6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ecea:	9302      	str	r3, [sp, #8]
 800ecec:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800ecee:	2200      	movs	r2, #0
 800ecf0:	2105      	movs	r1, #5
 800ecf2:	201a      	movs	r0, #26
 800ecf4:	f7f1 fd18 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800ecf8:	201a      	movs	r0, #26
 800ecfa:	f7f1 fd25 	bl	8000748 <HAL_NVIC_EnableIRQ>
}
 800ecfe:	e7c4      	b.n	800ec8a <HAL_TIM_Base_MspInit+0x1e>
 800ed00:	40000400 	.word	0x40000400
 800ed04:	40014800 	.word	0x40014800
 800ed08:	40023800 	.word	0x40023800
 800ed0c:	40020800 	.word	0x40020800

0800ed10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ed10:	b500      	push	{lr}
 800ed12:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed14:	2300      	movs	r3, #0
 800ed16:	9301      	str	r3, [sp, #4]
 800ed18:	9302      	str	r3, [sp, #8]
 800ed1a:	9303      	str	r3, [sp, #12]
 800ed1c:	9304      	str	r3, [sp, #16]
 800ed1e:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 800ed20:	6802      	ldr	r2, [r0, #0]
 800ed22:	4b0f      	ldr	r3, [pc, #60]	@ (800ed60 <HAL_TIM_MspPostInit+0x50>)
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d002      	beq.n	800ed2e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800ed28:	b007      	add	sp, #28
 800ed2a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ed2e:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 800ed32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed34:	f042 0210 	orr.w	r2, r2, #16
 800ed38:	631a      	str	r2, [r3, #48]	@ 0x30
 800ed3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed3c:	f003 0310 	and.w	r3, r3, #16
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
 800ed44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ed48:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed4a:	2302      	movs	r3, #2
 800ed4c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ed4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ed50:	2301      	movs	r3, #1
 800ed52:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 800ed54:	a901      	add	r1, sp, #4
 800ed56:	4803      	ldr	r0, [pc, #12]	@ (800ed64 <HAL_TIM_MspPostInit+0x54>)
 800ed58:	f7f1 ff6c 	bl	8000c34 <HAL_GPIO_Init>
}
 800ed5c:	e7e4      	b.n	800ed28 <HAL_TIM_MspPostInit+0x18>
 800ed5e:	bf00      	nop
 800ed60:	40010000 	.word	0x40010000
 800ed64:	40021000 	.word	0x40021000

0800ed68 <MX_TIM1_Init>:
{
 800ed68:	b510      	push	{r4, lr}
 800ed6a:	b096      	sub	sp, #88	@ 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ed6c:	2400      	movs	r4, #0
 800ed6e:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ed70:	9414      	str	r4, [sp, #80]	@ 0x50
 800ed72:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ed74:	940c      	str	r4, [sp, #48]	@ 0x30
 800ed76:	940d      	str	r4, [sp, #52]	@ 0x34
 800ed78:	940e      	str	r4, [sp, #56]	@ 0x38
 800ed7a:	940f      	str	r4, [sp, #60]	@ 0x3c
 800ed7c:	9410      	str	r4, [sp, #64]	@ 0x40
 800ed7e:	9411      	str	r4, [sp, #68]	@ 0x44
 800ed80:	9412      	str	r4, [sp, #72]	@ 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ed82:	222c      	movs	r2, #44	@ 0x2c
 800ed84:	4621      	mov	r1, r4
 800ed86:	a801      	add	r0, sp, #4
 800ed88:	f000 ffdb 	bl	800fd42 <memset>
  htim1.Instance = TIM1;
 800ed8c:	4826      	ldr	r0, [pc, #152]	@ (800ee28 <MX_TIM1_Init+0xc0>)
 800ed8e:	4b27      	ldr	r3, [pc, #156]	@ (800ee2c <MX_TIM1_Init+0xc4>)
 800ed90:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800ed92:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ed94:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 269;
 800ed96:	f240 130d 	movw	r3, #269	@ 0x10d
 800ed9a:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ed9c:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800ed9e:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800eda0:	2380      	movs	r3, #128	@ 0x80
 800eda2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800eda4:	f7f6 faea 	bl	800537c <HAL_TIM_PWM_Init>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d131      	bne.n	800ee10 <MX_TIM1_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800edac:	2300      	movs	r3, #0
 800edae:	9313      	str	r3, [sp, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800edb0:	9314      	str	r3, [sp, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800edb2:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800edb4:	a913      	add	r1, sp, #76	@ 0x4c
 800edb6:	481c      	ldr	r0, [pc, #112]	@ (800ee28 <MX_TIM1_Init+0xc0>)
 800edb8:	f7f6 fb28 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 800edbc:	2800      	cmp	r0, #0
 800edbe:	d12a      	bne.n	800ee16 <MX_TIM1_Init+0xae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800edc0:	2360      	movs	r3, #96	@ 0x60
 800edc2:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800edc4:	2200      	movs	r2, #0
 800edc6:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800edc8:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800edca:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800edcc:	9210      	str	r2, [sp, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800edce:	9211      	str	r2, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800edd0:	9212      	str	r2, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800edd2:	a90c      	add	r1, sp, #48	@ 0x30
 800edd4:	4814      	ldr	r0, [pc, #80]	@ (800ee28 <MX_TIM1_Init+0xc0>)
 800edd6:	f7f5 ffeb 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 800edda:	b9f8      	cbnz	r0, 800ee1c <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800eddc:	2300      	movs	r3, #0
 800edde:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ede0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ede2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800ede4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ede6:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ede8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800edec:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800edee:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800edf0:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800edf2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800edf6:	9209      	str	r2, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800edf8:	930a      	str	r3, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800edfa:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800edfc:	a901      	add	r1, sp, #4
 800edfe:	480a      	ldr	r0, [pc, #40]	@ (800ee28 <MX_TIM1_Init+0xc0>)
 800ee00:	f7f6 fb38 	bl	8005474 <HAL_TIMEx_ConfigBreakDeadTime>
 800ee04:	b968      	cbnz	r0, 800ee22 <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 800ee06:	4808      	ldr	r0, [pc, #32]	@ (800ee28 <MX_TIM1_Init+0xc0>)
 800ee08:	f7ff ff82 	bl	800ed10 <HAL_TIM_MspPostInit>
}
 800ee0c:	b016      	add	sp, #88	@ 0x58
 800ee0e:	bd10      	pop	{r4, pc}
    Error_Handler();
 800ee10:	f7ff f940 	bl	800e094 <Error_Handler>
 800ee14:	e7ca      	b.n	800edac <MX_TIM1_Init+0x44>
    Error_Handler();
 800ee16:	f7ff f93d 	bl	800e094 <Error_Handler>
 800ee1a:	e7d1      	b.n	800edc0 <MX_TIM1_Init+0x58>
    Error_Handler();
 800ee1c:	f7ff f93a 	bl	800e094 <Error_Handler>
 800ee20:	e7dc      	b.n	800eddc <MX_TIM1_Init+0x74>
    Error_Handler();
 800ee22:	f7ff f937 	bl	800e094 <Error_Handler>
 800ee26:	e7ee      	b.n	800ee06 <MX_TIM1_Init+0x9e>
 800ee28:	20017b18 	.word	0x20017b18
 800ee2c:	40010000 	.word	0x40010000

0800ee30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800ee30:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ee32:	480b      	ldr	r0, [pc, #44]	@ (800ee60 <MX_USART3_UART_Init+0x30>)
 800ee34:	4b0b      	ldr	r3, [pc, #44]	@ (800ee64 <MX_USART3_UART_Init+0x34>)
 800ee36:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800ee38:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800ee3c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ee42:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ee44:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ee46:	220c      	movs	r2, #12
 800ee48:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ee4a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ee4c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ee4e:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ee50:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ee52:	f7f6 fde8 	bl	8005a26 <HAL_UART_Init>
 800ee56:	b900      	cbnz	r0, 800ee5a <MX_USART3_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ee58:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ee5a:	f7ff f91b 	bl	800e094 <Error_Handler>
}
 800ee5e:	e7fb      	b.n	800ee58 <MX_USART3_UART_Init+0x28>
 800ee60:	20017bc8 	.word	0x20017bc8
 800ee64:	40004800 	.word	0x40004800

0800ee68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ee68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee6a:	b0ad      	sub	sp, #180	@ 0xb4
 800ee6c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee6e:	2100      	movs	r1, #0
 800ee70:	9127      	str	r1, [sp, #156]	@ 0x9c
 800ee72:	9128      	str	r1, [sp, #160]	@ 0xa0
 800ee74:	9129      	str	r1, [sp, #164]	@ 0xa4
 800ee76:	912a      	str	r1, [sp, #168]	@ 0xa8
 800ee78:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ee7a:	2290      	movs	r2, #144	@ 0x90
 800ee7c:	a803      	add	r0, sp, #12
 800ee7e:	f000 ff60 	bl	800fd42 <memset>
  if(uartHandle->Instance==USART3)
 800ee82:	6822      	ldr	r2, [r4, #0]
 800ee84:	4b23      	ldr	r3, [pc, #140]	@ (800ef14 <HAL_UART_MspInit+0xac>)
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d001      	beq.n	800ee8e <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800ee8a:	b02d      	add	sp, #180	@ 0xb4
 800ee8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800ee8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee92:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ee94:	a803      	add	r0, sp, #12
 800ee96:	f7f3 fbe7 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d136      	bne.n	800ef0c <HAL_UART_MspInit+0xa4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ee9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ef18 <HAL_UART_MspInit+0xb0>)
 800eea0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eea2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800eea6:	641a      	str	r2, [r3, #64]	@ 0x40
 800eea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eeaa:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800eeae:	9200      	str	r2, [sp, #0]
 800eeb0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eeb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eeb4:	f042 0202 	orr.w	r2, r2, #2
 800eeb8:	631a      	str	r2, [r3, #48]	@ 0x30
 800eeba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eebc:	f002 0202 	and.w	r2, r2, #2
 800eec0:	9201      	str	r2, [sp, #4]
 800eec2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800eec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eec6:	f042 0208 	orr.w	r2, r2, #8
 800eeca:	631a      	str	r2, [r3, #48]	@ 0x30
 800eecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eece:	f003 0308 	and.w	r3, r3, #8
 800eed2:	9302      	str	r3, [sp, #8]
 800eed4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800eed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eeda:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eedc:	2702      	movs	r7, #2
 800eede:	9728      	str	r7, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eee0:	2600      	movs	r6, #0
 800eee2:	9629      	str	r6, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eee4:	2503      	movs	r5, #3
 800eee6:	952a      	str	r5, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800eee8:	2407      	movs	r4, #7
 800eeea:	942b      	str	r4, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eeec:	a927      	add	r1, sp, #156	@ 0x9c
 800eeee:	480b      	ldr	r0, [pc, #44]	@ (800ef1c <HAL_UART_MspInit+0xb4>)
 800eef0:	f7f1 fea0 	bl	8000c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800eef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eef8:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eefa:	9728      	str	r7, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eefc:	9629      	str	r6, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eefe:	952a      	str	r5, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ef00:	942b      	str	r4, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ef02:	a927      	add	r1, sp, #156	@ 0x9c
 800ef04:	4806      	ldr	r0, [pc, #24]	@ (800ef20 <HAL_UART_MspInit+0xb8>)
 800ef06:	f7f1 fe95 	bl	8000c34 <HAL_GPIO_Init>
}
 800ef0a:	e7be      	b.n	800ee8a <HAL_UART_MspInit+0x22>
      Error_Handler();
 800ef0c:	f7ff f8c2 	bl	800e094 <Error_Handler>
 800ef10:	e7c5      	b.n	800ee9e <HAL_UART_MspInit+0x36>
 800ef12:	bf00      	nop
 800ef14:	40004800 	.word	0x40004800
 800ef18:	40023800 	.word	0x40023800
 800ef1c:	40020400 	.word	0x40020400
 800ef20:	40020c00 	.word	0x40020c00

0800ef24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ef24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ef5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ef28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ef2a:	e003      	b.n	800ef34 <LoopCopyDataInit>

0800ef2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ef2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ef60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ef2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ef30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ef32:	3104      	adds	r1, #4

0800ef34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ef34:	480b      	ldr	r0, [pc, #44]	@ (800ef64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ef36:	4b0c      	ldr	r3, [pc, #48]	@ (800ef68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ef38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ef3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ef3c:	d3f6      	bcc.n	800ef2c <CopyDataInit>
  ldr  r2, =_sbss
 800ef3e:	4a0b      	ldr	r2, [pc, #44]	@ (800ef6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ef40:	e002      	b.n	800ef48 <LoopFillZerobss>

0800ef42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ef42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ef44:	f842 3b04 	str.w	r3, [r2], #4

0800ef48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ef48:	4b09      	ldr	r3, [pc, #36]	@ (800ef70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ef4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ef4c:	d3f9      	bcc.n	800ef42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ef4e:	f7ff fd77 	bl	800ea40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ef52:	f000 ffcf 	bl	800fef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ef56:	f7ff f923 	bl	800e1a0 <main>
  bx  lr    
 800ef5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ef5c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800ef60:	08013934 	.word	0x08013934
  ldr  r0, =_sdata
 800ef64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ef68:	200005c8 	.word	0x200005c8
  ldr  r2, =_sbss
 800ef6c:	200005e0 	.word	0x200005e0
  ldr  r3, = _ebss
 800ef70:	20017d98 	.word	0x20017d98

0800ef74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ef74:	e7fe      	b.n	800ef74 <ADC_IRQHandler>
	...

0800ef78 <calloc>:
 800ef78:	4b02      	ldr	r3, [pc, #8]	@ (800ef84 <calloc+0xc>)
 800ef7a:	460a      	mov	r2, r1
 800ef7c:	4601      	mov	r1, r0
 800ef7e:	6818      	ldr	r0, [r3, #0]
 800ef80:	f000 b802 	b.w	800ef88 <_calloc_r>
 800ef84:	2000040c 	.word	0x2000040c

0800ef88 <_calloc_r>:
 800ef88:	b570      	push	{r4, r5, r6, lr}
 800ef8a:	fba1 5402 	umull	r5, r4, r1, r2
 800ef8e:	b934      	cbnz	r4, 800ef9e <_calloc_r+0x16>
 800ef90:	4629      	mov	r1, r5
 800ef92:	f000 f83f 	bl	800f014 <_malloc_r>
 800ef96:	4606      	mov	r6, r0
 800ef98:	b928      	cbnz	r0, 800efa6 <_calloc_r+0x1e>
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	bd70      	pop	{r4, r5, r6, pc}
 800ef9e:	220c      	movs	r2, #12
 800efa0:	6002      	str	r2, [r0, #0]
 800efa2:	2600      	movs	r6, #0
 800efa4:	e7f9      	b.n	800ef9a <_calloc_r+0x12>
 800efa6:	462a      	mov	r2, r5
 800efa8:	4621      	mov	r1, r4
 800efaa:	f000 feca 	bl	800fd42 <memset>
 800efae:	e7f4      	b.n	800ef9a <_calloc_r+0x12>

0800efb0 <malloc>:
 800efb0:	4b02      	ldr	r3, [pc, #8]	@ (800efbc <malloc+0xc>)
 800efb2:	4601      	mov	r1, r0
 800efb4:	6818      	ldr	r0, [r3, #0]
 800efb6:	f000 b82d 	b.w	800f014 <_malloc_r>
 800efba:	bf00      	nop
 800efbc:	2000040c 	.word	0x2000040c

0800efc0 <free>:
 800efc0:	4b02      	ldr	r3, [pc, #8]	@ (800efcc <free+0xc>)
 800efc2:	4601      	mov	r1, r0
 800efc4:	6818      	ldr	r0, [r3, #0]
 800efc6:	f001 be09 	b.w	8010bdc <_free_r>
 800efca:	bf00      	nop
 800efcc:	2000040c 	.word	0x2000040c

0800efd0 <sbrk_aligned>:
 800efd0:	b570      	push	{r4, r5, r6, lr}
 800efd2:	4e0f      	ldr	r6, [pc, #60]	@ (800f010 <sbrk_aligned+0x40>)
 800efd4:	460c      	mov	r4, r1
 800efd6:	6831      	ldr	r1, [r6, #0]
 800efd8:	4605      	mov	r5, r0
 800efda:	b911      	cbnz	r1, 800efe2 <sbrk_aligned+0x12>
 800efdc:	f000 ff62 	bl	800fea4 <_sbrk_r>
 800efe0:	6030      	str	r0, [r6, #0]
 800efe2:	4621      	mov	r1, r4
 800efe4:	4628      	mov	r0, r5
 800efe6:	f000 ff5d 	bl	800fea4 <_sbrk_r>
 800efea:	1c43      	adds	r3, r0, #1
 800efec:	d103      	bne.n	800eff6 <sbrk_aligned+0x26>
 800efee:	f04f 34ff 	mov.w	r4, #4294967295
 800eff2:	4620      	mov	r0, r4
 800eff4:	bd70      	pop	{r4, r5, r6, pc}
 800eff6:	1cc4      	adds	r4, r0, #3
 800eff8:	f024 0403 	bic.w	r4, r4, #3
 800effc:	42a0      	cmp	r0, r4
 800effe:	d0f8      	beq.n	800eff2 <sbrk_aligned+0x22>
 800f000:	1a21      	subs	r1, r4, r0
 800f002:	4628      	mov	r0, r5
 800f004:	f000 ff4e 	bl	800fea4 <_sbrk_r>
 800f008:	3001      	adds	r0, #1
 800f00a:	d1f2      	bne.n	800eff2 <sbrk_aligned+0x22>
 800f00c:	e7ef      	b.n	800efee <sbrk_aligned+0x1e>
 800f00e:	bf00      	nop
 800f010:	20017c48 	.word	0x20017c48

0800f014 <_malloc_r>:
 800f014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f018:	1ccd      	adds	r5, r1, #3
 800f01a:	f025 0503 	bic.w	r5, r5, #3
 800f01e:	3508      	adds	r5, #8
 800f020:	2d0c      	cmp	r5, #12
 800f022:	bf38      	it	cc
 800f024:	250c      	movcc	r5, #12
 800f026:	2d00      	cmp	r5, #0
 800f028:	4606      	mov	r6, r0
 800f02a:	db01      	blt.n	800f030 <_malloc_r+0x1c>
 800f02c:	42a9      	cmp	r1, r5
 800f02e:	d904      	bls.n	800f03a <_malloc_r+0x26>
 800f030:	230c      	movs	r3, #12
 800f032:	6033      	str	r3, [r6, #0]
 800f034:	2000      	movs	r0, #0
 800f036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f03a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f110 <_malloc_r+0xfc>
 800f03e:	f000 f869 	bl	800f114 <__malloc_lock>
 800f042:	f8d8 3000 	ldr.w	r3, [r8]
 800f046:	461c      	mov	r4, r3
 800f048:	bb44      	cbnz	r4, 800f09c <_malloc_r+0x88>
 800f04a:	4629      	mov	r1, r5
 800f04c:	4630      	mov	r0, r6
 800f04e:	f7ff ffbf 	bl	800efd0 <sbrk_aligned>
 800f052:	1c43      	adds	r3, r0, #1
 800f054:	4604      	mov	r4, r0
 800f056:	d158      	bne.n	800f10a <_malloc_r+0xf6>
 800f058:	f8d8 4000 	ldr.w	r4, [r8]
 800f05c:	4627      	mov	r7, r4
 800f05e:	2f00      	cmp	r7, #0
 800f060:	d143      	bne.n	800f0ea <_malloc_r+0xd6>
 800f062:	2c00      	cmp	r4, #0
 800f064:	d04b      	beq.n	800f0fe <_malloc_r+0xea>
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	4639      	mov	r1, r7
 800f06a:	4630      	mov	r0, r6
 800f06c:	eb04 0903 	add.w	r9, r4, r3
 800f070:	f000 ff18 	bl	800fea4 <_sbrk_r>
 800f074:	4581      	cmp	r9, r0
 800f076:	d142      	bne.n	800f0fe <_malloc_r+0xea>
 800f078:	6821      	ldr	r1, [r4, #0]
 800f07a:	1a6d      	subs	r5, r5, r1
 800f07c:	4629      	mov	r1, r5
 800f07e:	4630      	mov	r0, r6
 800f080:	f7ff ffa6 	bl	800efd0 <sbrk_aligned>
 800f084:	3001      	adds	r0, #1
 800f086:	d03a      	beq.n	800f0fe <_malloc_r+0xea>
 800f088:	6823      	ldr	r3, [r4, #0]
 800f08a:	442b      	add	r3, r5
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	f8d8 3000 	ldr.w	r3, [r8]
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	bb62      	cbnz	r2, 800f0f0 <_malloc_r+0xdc>
 800f096:	f8c8 7000 	str.w	r7, [r8]
 800f09a:	e00f      	b.n	800f0bc <_malloc_r+0xa8>
 800f09c:	6822      	ldr	r2, [r4, #0]
 800f09e:	1b52      	subs	r2, r2, r5
 800f0a0:	d420      	bmi.n	800f0e4 <_malloc_r+0xd0>
 800f0a2:	2a0b      	cmp	r2, #11
 800f0a4:	d917      	bls.n	800f0d6 <_malloc_r+0xc2>
 800f0a6:	1961      	adds	r1, r4, r5
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	6025      	str	r5, [r4, #0]
 800f0ac:	bf18      	it	ne
 800f0ae:	6059      	strne	r1, [r3, #4]
 800f0b0:	6863      	ldr	r3, [r4, #4]
 800f0b2:	bf08      	it	eq
 800f0b4:	f8c8 1000 	streq.w	r1, [r8]
 800f0b8:	5162      	str	r2, [r4, r5]
 800f0ba:	604b      	str	r3, [r1, #4]
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f000 f82f 	bl	800f120 <__malloc_unlock>
 800f0c2:	f104 000b 	add.w	r0, r4, #11
 800f0c6:	1d23      	adds	r3, r4, #4
 800f0c8:	f020 0007 	bic.w	r0, r0, #7
 800f0cc:	1ac2      	subs	r2, r0, r3
 800f0ce:	bf1c      	itt	ne
 800f0d0:	1a1b      	subne	r3, r3, r0
 800f0d2:	50a3      	strne	r3, [r4, r2]
 800f0d4:	e7af      	b.n	800f036 <_malloc_r+0x22>
 800f0d6:	6862      	ldr	r2, [r4, #4]
 800f0d8:	42a3      	cmp	r3, r4
 800f0da:	bf0c      	ite	eq
 800f0dc:	f8c8 2000 	streq.w	r2, [r8]
 800f0e0:	605a      	strne	r2, [r3, #4]
 800f0e2:	e7eb      	b.n	800f0bc <_malloc_r+0xa8>
 800f0e4:	4623      	mov	r3, r4
 800f0e6:	6864      	ldr	r4, [r4, #4]
 800f0e8:	e7ae      	b.n	800f048 <_malloc_r+0x34>
 800f0ea:	463c      	mov	r4, r7
 800f0ec:	687f      	ldr	r7, [r7, #4]
 800f0ee:	e7b6      	b.n	800f05e <_malloc_r+0x4a>
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	42a3      	cmp	r3, r4
 800f0f6:	d1fb      	bne.n	800f0f0 <_malloc_r+0xdc>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	6053      	str	r3, [r2, #4]
 800f0fc:	e7de      	b.n	800f0bc <_malloc_r+0xa8>
 800f0fe:	230c      	movs	r3, #12
 800f100:	6033      	str	r3, [r6, #0]
 800f102:	4630      	mov	r0, r6
 800f104:	f000 f80c 	bl	800f120 <__malloc_unlock>
 800f108:	e794      	b.n	800f034 <_malloc_r+0x20>
 800f10a:	6005      	str	r5, [r0, #0]
 800f10c:	e7d6      	b.n	800f0bc <_malloc_r+0xa8>
 800f10e:	bf00      	nop
 800f110:	20017c4c 	.word	0x20017c4c

0800f114 <__malloc_lock>:
 800f114:	4801      	ldr	r0, [pc, #4]	@ (800f11c <__malloc_lock+0x8>)
 800f116:	f000 bf12 	b.w	800ff3e <__retarget_lock_acquire_recursive>
 800f11a:	bf00      	nop
 800f11c:	20017d90 	.word	0x20017d90

0800f120 <__malloc_unlock>:
 800f120:	4801      	ldr	r0, [pc, #4]	@ (800f128 <__malloc_unlock+0x8>)
 800f122:	f000 bf0d 	b.w	800ff40 <__retarget_lock_release_recursive>
 800f126:	bf00      	nop
 800f128:	20017d90 	.word	0x20017d90

0800f12c <realloc>:
 800f12c:	4b02      	ldr	r3, [pc, #8]	@ (800f138 <realloc+0xc>)
 800f12e:	460a      	mov	r2, r1
 800f130:	4601      	mov	r1, r0
 800f132:	6818      	ldr	r0, [r3, #0]
 800f134:	f000 b802 	b.w	800f13c <_realloc_r>
 800f138:	2000040c 	.word	0x2000040c

0800f13c <_realloc_r>:
 800f13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f140:	4607      	mov	r7, r0
 800f142:	4614      	mov	r4, r2
 800f144:	460d      	mov	r5, r1
 800f146:	b921      	cbnz	r1, 800f152 <_realloc_r+0x16>
 800f148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f14c:	4611      	mov	r1, r2
 800f14e:	f7ff bf61 	b.w	800f014 <_malloc_r>
 800f152:	b92a      	cbnz	r2, 800f160 <_realloc_r+0x24>
 800f154:	f001 fd42 	bl	8010bdc <_free_r>
 800f158:	4625      	mov	r5, r4
 800f15a:	4628      	mov	r0, r5
 800f15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f160:	f002 f900 	bl	8011364 <_malloc_usable_size_r>
 800f164:	4284      	cmp	r4, r0
 800f166:	4606      	mov	r6, r0
 800f168:	d802      	bhi.n	800f170 <_realloc_r+0x34>
 800f16a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f16e:	d8f4      	bhi.n	800f15a <_realloc_r+0x1e>
 800f170:	4621      	mov	r1, r4
 800f172:	4638      	mov	r0, r7
 800f174:	f7ff ff4e 	bl	800f014 <_malloc_r>
 800f178:	4680      	mov	r8, r0
 800f17a:	b908      	cbnz	r0, 800f180 <_realloc_r+0x44>
 800f17c:	4645      	mov	r5, r8
 800f17e:	e7ec      	b.n	800f15a <_realloc_r+0x1e>
 800f180:	42b4      	cmp	r4, r6
 800f182:	4622      	mov	r2, r4
 800f184:	4629      	mov	r1, r5
 800f186:	bf28      	it	cs
 800f188:	4632      	movcs	r2, r6
 800f18a:	f000 feda 	bl	800ff42 <memcpy>
 800f18e:	4629      	mov	r1, r5
 800f190:	4638      	mov	r0, r7
 800f192:	f001 fd23 	bl	8010bdc <_free_r>
 800f196:	e7f1      	b.n	800f17c <_realloc_r+0x40>

0800f198 <__cvt>:
 800f198:	b570      	push	{r4, r5, r6, lr}
 800f19a:	ed2d 8b02 	vpush	{d8}
 800f19e:	ec43 2b18 	vmov	d8, r2, r3
 800f1a2:	b088      	sub	sp, #32
 800f1a4:	ee18 3a90 	vmov	r3, s17
 800f1a8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 800f1aa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f1ac:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800f1ae:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	f025 0520 	bic.w	r5, r5, #32
 800f1b6:	bfb6      	itet	lt
 800f1b8:	232d      	movlt	r3, #45	@ 0x2d
 800f1ba:	2300      	movge	r3, #0
 800f1bc:	eeb1 8b48 	vneglt.f64	d8, d8
 800f1c0:	2d46      	cmp	r5, #70	@ 0x46
 800f1c2:	7013      	strb	r3, [r2, #0]
 800f1c4:	d004      	beq.n	800f1d0 <__cvt+0x38>
 800f1c6:	2d45      	cmp	r5, #69	@ 0x45
 800f1c8:	d100      	bne.n	800f1cc <__cvt+0x34>
 800f1ca:	3401      	adds	r4, #1
 800f1cc:	2302      	movs	r3, #2
 800f1ce:	e000      	b.n	800f1d2 <__cvt+0x3a>
 800f1d0:	2303      	movs	r3, #3
 800f1d2:	aa07      	add	r2, sp, #28
 800f1d4:	9204      	str	r2, [sp, #16]
 800f1d6:	aa06      	add	r2, sp, #24
 800f1d8:	e9cd 6202 	strd	r6, r2, [sp, #8]
 800f1dc:	e9cd 3400 	strd	r3, r4, [sp]
 800f1e0:	ec53 2b18 	vmov	r2, r3, d8
 800f1e4:	f000 ff9c 	bl	8010120 <_dtoa_r>
 800f1e8:	2d47      	cmp	r5, #71	@ 0x47
 800f1ea:	d115      	bne.n	800f218 <__cvt+0x80>
 800f1ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1ee:	07db      	lsls	r3, r3, #31
 800f1f0:	d50a      	bpl.n	800f208 <__cvt+0x70>
 800f1f2:	1903      	adds	r3, r0, r4
 800f1f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1fc:	bf08      	it	eq
 800f1fe:	9307      	streq	r3, [sp, #28]
 800f200:	2130      	movs	r1, #48	@ 0x30
 800f202:	9a07      	ldr	r2, [sp, #28]
 800f204:	429a      	cmp	r2, r3
 800f206:	d319      	bcc.n	800f23c <__cvt+0xa4>
 800f208:	9b07      	ldr	r3, [sp, #28]
 800f20a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f20c:	1a1b      	subs	r3, r3, r0
 800f20e:	6013      	str	r3, [r2, #0]
 800f210:	b008      	add	sp, #32
 800f212:	ecbd 8b02 	vpop	{d8}
 800f216:	bd70      	pop	{r4, r5, r6, pc}
 800f218:	2d46      	cmp	r5, #70	@ 0x46
 800f21a:	eb00 0304 	add.w	r3, r0, r4
 800f21e:	d1e9      	bne.n	800f1f4 <__cvt+0x5c>
 800f220:	7802      	ldrb	r2, [r0, #0]
 800f222:	2a30      	cmp	r2, #48	@ 0x30
 800f224:	d107      	bne.n	800f236 <__cvt+0x9e>
 800f226:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f22e:	bf1c      	itt	ne
 800f230:	f1c4 0401 	rsbne	r4, r4, #1
 800f234:	6034      	strne	r4, [r6, #0]
 800f236:	6832      	ldr	r2, [r6, #0]
 800f238:	4413      	add	r3, r2
 800f23a:	e7db      	b.n	800f1f4 <__cvt+0x5c>
 800f23c:	1c54      	adds	r4, r2, #1
 800f23e:	9407      	str	r4, [sp, #28]
 800f240:	7011      	strb	r1, [r2, #0]
 800f242:	e7de      	b.n	800f202 <__cvt+0x6a>

0800f244 <__exponent>:
 800f244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f246:	2900      	cmp	r1, #0
 800f248:	bfba      	itte	lt
 800f24a:	4249      	neglt	r1, r1
 800f24c:	232d      	movlt	r3, #45	@ 0x2d
 800f24e:	232b      	movge	r3, #43	@ 0x2b
 800f250:	2909      	cmp	r1, #9
 800f252:	7002      	strb	r2, [r0, #0]
 800f254:	7043      	strb	r3, [r0, #1]
 800f256:	dd29      	ble.n	800f2ac <__exponent+0x68>
 800f258:	f10d 0307 	add.w	r3, sp, #7
 800f25c:	461d      	mov	r5, r3
 800f25e:	270a      	movs	r7, #10
 800f260:	461a      	mov	r2, r3
 800f262:	fbb1 f6f7 	udiv	r6, r1, r7
 800f266:	fb07 1416 	mls	r4, r7, r6, r1
 800f26a:	3430      	adds	r4, #48	@ 0x30
 800f26c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f270:	460c      	mov	r4, r1
 800f272:	2c63      	cmp	r4, #99	@ 0x63
 800f274:	f103 33ff 	add.w	r3, r3, #4294967295
 800f278:	4631      	mov	r1, r6
 800f27a:	dcf1      	bgt.n	800f260 <__exponent+0x1c>
 800f27c:	3130      	adds	r1, #48	@ 0x30
 800f27e:	1e94      	subs	r4, r2, #2
 800f280:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f284:	1c41      	adds	r1, r0, #1
 800f286:	4623      	mov	r3, r4
 800f288:	42ab      	cmp	r3, r5
 800f28a:	d30a      	bcc.n	800f2a2 <__exponent+0x5e>
 800f28c:	f10d 0309 	add.w	r3, sp, #9
 800f290:	1a9b      	subs	r3, r3, r2
 800f292:	42ac      	cmp	r4, r5
 800f294:	bf88      	it	hi
 800f296:	2300      	movhi	r3, #0
 800f298:	3302      	adds	r3, #2
 800f29a:	4403      	add	r3, r0
 800f29c:	1a18      	subs	r0, r3, r0
 800f29e:	b003      	add	sp, #12
 800f2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f2a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f2aa:	e7ed      	b.n	800f288 <__exponent+0x44>
 800f2ac:	2330      	movs	r3, #48	@ 0x30
 800f2ae:	3130      	adds	r1, #48	@ 0x30
 800f2b0:	7083      	strb	r3, [r0, #2]
 800f2b2:	70c1      	strb	r1, [r0, #3]
 800f2b4:	1d03      	adds	r3, r0, #4
 800f2b6:	e7f1      	b.n	800f29c <__exponent+0x58>

0800f2b8 <_printf_float>:
 800f2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2bc:	b091      	sub	sp, #68	@ 0x44
 800f2be:	460c      	mov	r4, r1
 800f2c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800f2c4:	4616      	mov	r6, r2
 800f2c6:	461f      	mov	r7, r3
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	f000 fd55 	bl	800fd78 <_localeconv_r>
 800f2ce:	f8d0 b000 	ldr.w	fp, [r0]
 800f2d2:	4658      	mov	r0, fp
 800f2d4:	f7f1 f814 	bl	8000300 <strlen>
 800f2d8:	2300      	movs	r3, #0
 800f2da:	930e      	str	r3, [sp, #56]	@ 0x38
 800f2dc:	f8d8 3000 	ldr.w	r3, [r8]
 800f2e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f2e4:	6822      	ldr	r2, [r4, #0]
 800f2e6:	9009      	str	r0, [sp, #36]	@ 0x24
 800f2e8:	3307      	adds	r3, #7
 800f2ea:	f023 0307 	bic.w	r3, r3, #7
 800f2ee:	f103 0108 	add.w	r1, r3, #8
 800f2f2:	f8c8 1000 	str.w	r1, [r8]
 800f2f6:	ed93 7b00 	vldr	d7, [r3]
 800f2fa:	ed9f 5b99 	vldr	d5, [pc, #612]	@ 800f560 <_printf_float+0x2a8>
 800f2fe:	eeb0 6bc7 	vabs.f64	d6, d7
 800f302:	eeb4 6b45 	vcmp.f64	d6, d5
 800f306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f30a:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
 800f30e:	dd24      	ble.n	800f35a <_printf_float+0xa2>
 800f310:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f318:	d502      	bpl.n	800f320 <_printf_float+0x68>
 800f31a:	232d      	movs	r3, #45	@ 0x2d
 800f31c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f320:	4991      	ldr	r1, [pc, #580]	@ (800f568 <_printf_float+0x2b0>)
 800f322:	4b92      	ldr	r3, [pc, #584]	@ (800f56c <_printf_float+0x2b4>)
 800f324:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f328:	bf8c      	ite	hi
 800f32a:	4688      	movhi	r8, r1
 800f32c:	4698      	movls	r8, r3
 800f32e:	f022 0204 	bic.w	r2, r2, #4
 800f332:	2303      	movs	r3, #3
 800f334:	6123      	str	r3, [r4, #16]
 800f336:	6022      	str	r2, [r4, #0]
 800f338:	f04f 0a00 	mov.w	sl, #0
 800f33c:	9700      	str	r7, [sp, #0]
 800f33e:	4633      	mov	r3, r6
 800f340:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f342:	4621      	mov	r1, r4
 800f344:	4628      	mov	r0, r5
 800f346:	f000 f9d5 	bl	800f6f4 <_printf_common>
 800f34a:	3001      	adds	r0, #1
 800f34c:	f040 808e 	bne.w	800f46c <_printf_float+0x1b4>
 800f350:	f04f 30ff 	mov.w	r0, #4294967295
 800f354:	b011      	add	sp, #68	@ 0x44
 800f356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35a:	eeb4 7b47 	vcmp.f64	d7, d7
 800f35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f362:	d709      	bvc.n	800f378 <_printf_float+0xc0>
 800f364:	ee17 3a90 	vmov	r3, s15
 800f368:	2b00      	cmp	r3, #0
 800f36a:	bfbc      	itt	lt
 800f36c:	232d      	movlt	r3, #45	@ 0x2d
 800f36e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f372:	497f      	ldr	r1, [pc, #508]	@ (800f570 <_printf_float+0x2b8>)
 800f374:	4b7f      	ldr	r3, [pc, #508]	@ (800f574 <_printf_float+0x2bc>)
 800f376:	e7d5      	b.n	800f324 <_printf_float+0x6c>
 800f378:	6863      	ldr	r3, [r4, #4]
 800f37a:	1c59      	adds	r1, r3, #1
 800f37c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f380:	d13e      	bne.n	800f400 <_printf_float+0x148>
 800f382:	2306      	movs	r3, #6
 800f384:	6063      	str	r3, [r4, #4]
 800f386:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f38a:	2300      	movs	r3, #0
 800f38c:	6022      	str	r2, [r4, #0]
 800f38e:	9306      	str	r3, [sp, #24]
 800f390:	ab0e      	add	r3, sp, #56	@ 0x38
 800f392:	e9cd 9304 	strd	r9, r3, [sp, #16]
 800f396:	ab0d      	add	r3, sp, #52	@ 0x34
 800f398:	9303      	str	r3, [sp, #12]
 800f39a:	f10d 0333 	add.w	r3, sp, #51	@ 0x33
 800f39e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800f3a2:	6863      	ldr	r3, [r4, #4]
 800f3a4:	9300      	str	r3, [sp, #0]
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	ec53 2b17 	vmov	r2, r3, d7
 800f3ac:	f7ff fef4 	bl	800f198 <__cvt>
 800f3b0:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f3b4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f3b6:	4680      	mov	r8, r0
 800f3b8:	d129      	bne.n	800f40e <_printf_float+0x156>
 800f3ba:	1cc8      	adds	r0, r1, #3
 800f3bc:	db02      	blt.n	800f3c4 <_printf_float+0x10c>
 800f3be:	6863      	ldr	r3, [r4, #4]
 800f3c0:	4299      	cmp	r1, r3
 800f3c2:	dd41      	ble.n	800f448 <_printf_float+0x190>
 800f3c4:	f1a9 0902 	sub.w	r9, r9, #2
 800f3c8:	fa5f f989 	uxtb.w	r9, r9
 800f3cc:	3901      	subs	r1, #1
 800f3ce:	464a      	mov	r2, r9
 800f3d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f3d4:	910d      	str	r1, [sp, #52]	@ 0x34
 800f3d6:	f7ff ff35 	bl	800f244 <__exponent>
 800f3da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3dc:	1813      	adds	r3, r2, r0
 800f3de:	2a01      	cmp	r2, #1
 800f3e0:	4682      	mov	sl, r0
 800f3e2:	6123      	str	r3, [r4, #16]
 800f3e4:	dc02      	bgt.n	800f3ec <_printf_float+0x134>
 800f3e6:	6822      	ldr	r2, [r4, #0]
 800f3e8:	07d2      	lsls	r2, r2, #31
 800f3ea:	d501      	bpl.n	800f3f0 <_printf_float+0x138>
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	6123      	str	r3, [r4, #16]
 800f3f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d0a1      	beq.n	800f33c <_printf_float+0x84>
 800f3f8:	232d      	movs	r3, #45	@ 0x2d
 800f3fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3fe:	e79d      	b.n	800f33c <_printf_float+0x84>
 800f400:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f404:	d1bf      	bne.n	800f386 <_printf_float+0xce>
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1bd      	bne.n	800f386 <_printf_float+0xce>
 800f40a:	2301      	movs	r3, #1
 800f40c:	e7ba      	b.n	800f384 <_printf_float+0xcc>
 800f40e:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f412:	d9db      	bls.n	800f3cc <_printf_float+0x114>
 800f414:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f418:	d118      	bne.n	800f44c <_printf_float+0x194>
 800f41a:	2900      	cmp	r1, #0
 800f41c:	6863      	ldr	r3, [r4, #4]
 800f41e:	dd0b      	ble.n	800f438 <_printf_float+0x180>
 800f420:	6121      	str	r1, [r4, #16]
 800f422:	b913      	cbnz	r3, 800f42a <_printf_float+0x172>
 800f424:	6822      	ldr	r2, [r4, #0]
 800f426:	07d0      	lsls	r0, r2, #31
 800f428:	d502      	bpl.n	800f430 <_printf_float+0x178>
 800f42a:	3301      	adds	r3, #1
 800f42c:	440b      	add	r3, r1
 800f42e:	6123      	str	r3, [r4, #16]
 800f430:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f432:	f04f 0a00 	mov.w	sl, #0
 800f436:	e7db      	b.n	800f3f0 <_printf_float+0x138>
 800f438:	b913      	cbnz	r3, 800f440 <_printf_float+0x188>
 800f43a:	6822      	ldr	r2, [r4, #0]
 800f43c:	07d2      	lsls	r2, r2, #31
 800f43e:	d501      	bpl.n	800f444 <_printf_float+0x18c>
 800f440:	3302      	adds	r3, #2
 800f442:	e7f4      	b.n	800f42e <_printf_float+0x176>
 800f444:	2301      	movs	r3, #1
 800f446:	e7f2      	b.n	800f42e <_printf_float+0x176>
 800f448:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f44e:	4299      	cmp	r1, r3
 800f450:	db05      	blt.n	800f45e <_printf_float+0x1a6>
 800f452:	6823      	ldr	r3, [r4, #0]
 800f454:	6121      	str	r1, [r4, #16]
 800f456:	07d8      	lsls	r0, r3, #31
 800f458:	d5ea      	bpl.n	800f430 <_printf_float+0x178>
 800f45a:	1c4b      	adds	r3, r1, #1
 800f45c:	e7e7      	b.n	800f42e <_printf_float+0x176>
 800f45e:	2900      	cmp	r1, #0
 800f460:	bfd4      	ite	le
 800f462:	f1c1 0202 	rsble	r2, r1, #2
 800f466:	2201      	movgt	r2, #1
 800f468:	4413      	add	r3, r2
 800f46a:	e7e0      	b.n	800f42e <_printf_float+0x176>
 800f46c:	6823      	ldr	r3, [r4, #0]
 800f46e:	055a      	lsls	r2, r3, #21
 800f470:	d407      	bmi.n	800f482 <_printf_float+0x1ca>
 800f472:	6923      	ldr	r3, [r4, #16]
 800f474:	4642      	mov	r2, r8
 800f476:	4631      	mov	r1, r6
 800f478:	4628      	mov	r0, r5
 800f47a:	47b8      	blx	r7
 800f47c:	3001      	adds	r0, #1
 800f47e:	d12a      	bne.n	800f4d6 <_printf_float+0x21e>
 800f480:	e766      	b.n	800f350 <_printf_float+0x98>
 800f482:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f486:	f240 80df 	bls.w	800f648 <_printf_float+0x390>
 800f48a:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f48e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f496:	d133      	bne.n	800f500 <_printf_float+0x248>
 800f498:	4a37      	ldr	r2, [pc, #220]	@ (800f578 <_printf_float+0x2c0>)
 800f49a:	2301      	movs	r3, #1
 800f49c:	4631      	mov	r1, r6
 800f49e:	4628      	mov	r0, r5
 800f4a0:	47b8      	blx	r7
 800f4a2:	3001      	adds	r0, #1
 800f4a4:	f43f af54 	beq.w	800f350 <_printf_float+0x98>
 800f4a8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800f4ac:	4543      	cmp	r3, r8
 800f4ae:	db02      	blt.n	800f4b6 <_printf_float+0x1fe>
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	07d8      	lsls	r0, r3, #31
 800f4b4:	d50f      	bpl.n	800f4d6 <_printf_float+0x21e>
 800f4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4b8:	465a      	mov	r2, fp
 800f4ba:	4631      	mov	r1, r6
 800f4bc:	4628      	mov	r0, r5
 800f4be:	47b8      	blx	r7
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	f43f af45 	beq.w	800f350 <_printf_float+0x98>
 800f4c6:	f04f 0900 	mov.w	r9, #0
 800f4ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4ce:	f104 0a1a 	add.w	sl, r4, #26
 800f4d2:	45c8      	cmp	r8, r9
 800f4d4:	dc09      	bgt.n	800f4ea <_printf_float+0x232>
 800f4d6:	6823      	ldr	r3, [r4, #0]
 800f4d8:	079b      	lsls	r3, r3, #30
 800f4da:	f100 8106 	bmi.w	800f6ea <_printf_float+0x432>
 800f4de:	68e0      	ldr	r0, [r4, #12]
 800f4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4e2:	4298      	cmp	r0, r3
 800f4e4:	bfb8      	it	lt
 800f4e6:	4618      	movlt	r0, r3
 800f4e8:	e734      	b.n	800f354 <_printf_float+0x9c>
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	4652      	mov	r2, sl
 800f4ee:	4631      	mov	r1, r6
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	47b8      	blx	r7
 800f4f4:	3001      	adds	r0, #1
 800f4f6:	f43f af2b 	beq.w	800f350 <_printf_float+0x98>
 800f4fa:	f109 0901 	add.w	r9, r9, #1
 800f4fe:	e7e8      	b.n	800f4d2 <_printf_float+0x21a>
 800f500:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f502:	2b00      	cmp	r3, #0
 800f504:	dc3a      	bgt.n	800f57c <_printf_float+0x2c4>
 800f506:	4a1c      	ldr	r2, [pc, #112]	@ (800f578 <_printf_float+0x2c0>)
 800f508:	2301      	movs	r3, #1
 800f50a:	4631      	mov	r1, r6
 800f50c:	4628      	mov	r0, r5
 800f50e:	47b8      	blx	r7
 800f510:	3001      	adds	r0, #1
 800f512:	f43f af1d 	beq.w	800f350 <_printf_float+0x98>
 800f516:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800f51a:	ea59 0303 	orrs.w	r3, r9, r3
 800f51e:	d102      	bne.n	800f526 <_printf_float+0x26e>
 800f520:	6823      	ldr	r3, [r4, #0]
 800f522:	07d9      	lsls	r1, r3, #31
 800f524:	d5d7      	bpl.n	800f4d6 <_printf_float+0x21e>
 800f526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f528:	465a      	mov	r2, fp
 800f52a:	4631      	mov	r1, r6
 800f52c:	4628      	mov	r0, r5
 800f52e:	47b8      	blx	r7
 800f530:	3001      	adds	r0, #1
 800f532:	f43f af0d 	beq.w	800f350 <_printf_float+0x98>
 800f536:	f04f 0a00 	mov.w	sl, #0
 800f53a:	f104 0b1a 	add.w	fp, r4, #26
 800f53e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f540:	425b      	negs	r3, r3
 800f542:	4553      	cmp	r3, sl
 800f544:	dc01      	bgt.n	800f54a <_printf_float+0x292>
 800f546:	464b      	mov	r3, r9
 800f548:	e794      	b.n	800f474 <_printf_float+0x1bc>
 800f54a:	2301      	movs	r3, #1
 800f54c:	465a      	mov	r2, fp
 800f54e:	4631      	mov	r1, r6
 800f550:	4628      	mov	r0, r5
 800f552:	47b8      	blx	r7
 800f554:	3001      	adds	r0, #1
 800f556:	f43f aefb 	beq.w	800f350 <_printf_float+0x98>
 800f55a:	f10a 0a01 	add.w	sl, sl, #1
 800f55e:	e7ee      	b.n	800f53e <_printf_float+0x286>
 800f560:	ffffffff 	.word	0xffffffff
 800f564:	7fefffff 	.word	0x7fefffff
 800f568:	08013598 	.word	0x08013598
 800f56c:	08013594 	.word	0x08013594
 800f570:	080135a0 	.word	0x080135a0
 800f574:	0801359c 	.word	0x0801359c
 800f578:	080136d3 	.word	0x080136d3
 800f57c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f57e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800f582:	4553      	cmp	r3, sl
 800f584:	bfa8      	it	ge
 800f586:	4653      	movge	r3, sl
 800f588:	2b00      	cmp	r3, #0
 800f58a:	4699      	mov	r9, r3
 800f58c:	dc37      	bgt.n	800f5fe <_printf_float+0x346>
 800f58e:	2300      	movs	r3, #0
 800f590:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f596:	f104 021a 	add.w	r2, r4, #26
 800f59a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f59c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f59e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5a0:	eba3 0309 	sub.w	r3, r3, r9
 800f5a4:	428b      	cmp	r3, r1
 800f5a6:	dc31      	bgt.n	800f60c <_printf_float+0x354>
 800f5a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5aa:	459a      	cmp	sl, r3
 800f5ac:	dc3b      	bgt.n	800f626 <_printf_float+0x36e>
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	07da      	lsls	r2, r3, #31
 800f5b2:	d438      	bmi.n	800f626 <_printf_float+0x36e>
 800f5b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5b6:	ebaa 0903 	sub.w	r9, sl, r3
 800f5ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5bc:	ebaa 0303 	sub.w	r3, sl, r3
 800f5c0:	4599      	cmp	r9, r3
 800f5c2:	bfa8      	it	ge
 800f5c4:	4699      	movge	r9, r3
 800f5c6:	f1b9 0f00 	cmp.w	r9, #0
 800f5ca:	dc34      	bgt.n	800f636 <_printf_float+0x37e>
 800f5cc:	f04f 0800 	mov.w	r8, #0
 800f5d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5d4:	f104 0b1a 	add.w	fp, r4, #26
 800f5d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5da:	ebaa 0303 	sub.w	r3, sl, r3
 800f5de:	eba3 0309 	sub.w	r3, r3, r9
 800f5e2:	4543      	cmp	r3, r8
 800f5e4:	f77f af77 	ble.w	800f4d6 <_printf_float+0x21e>
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	465a      	mov	r2, fp
 800f5ec:	4631      	mov	r1, r6
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	47b8      	blx	r7
 800f5f2:	3001      	adds	r0, #1
 800f5f4:	f43f aeac 	beq.w	800f350 <_printf_float+0x98>
 800f5f8:	f108 0801 	add.w	r8, r8, #1
 800f5fc:	e7ec      	b.n	800f5d8 <_printf_float+0x320>
 800f5fe:	4642      	mov	r2, r8
 800f600:	4631      	mov	r1, r6
 800f602:	4628      	mov	r0, r5
 800f604:	47b8      	blx	r7
 800f606:	3001      	adds	r0, #1
 800f608:	d1c1      	bne.n	800f58e <_printf_float+0x2d6>
 800f60a:	e6a1      	b.n	800f350 <_printf_float+0x98>
 800f60c:	2301      	movs	r3, #1
 800f60e:	4631      	mov	r1, r6
 800f610:	4628      	mov	r0, r5
 800f612:	920a      	str	r2, [sp, #40]	@ 0x28
 800f614:	47b8      	blx	r7
 800f616:	3001      	adds	r0, #1
 800f618:	f43f ae9a 	beq.w	800f350 <_printf_float+0x98>
 800f61c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f61e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f620:	3301      	adds	r3, #1
 800f622:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f624:	e7b9      	b.n	800f59a <_printf_float+0x2e2>
 800f626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f628:	465a      	mov	r2, fp
 800f62a:	4631      	mov	r1, r6
 800f62c:	4628      	mov	r0, r5
 800f62e:	47b8      	blx	r7
 800f630:	3001      	adds	r0, #1
 800f632:	d1bf      	bne.n	800f5b4 <_printf_float+0x2fc>
 800f634:	e68c      	b.n	800f350 <_printf_float+0x98>
 800f636:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f638:	464b      	mov	r3, r9
 800f63a:	4442      	add	r2, r8
 800f63c:	4631      	mov	r1, r6
 800f63e:	4628      	mov	r0, r5
 800f640:	47b8      	blx	r7
 800f642:	3001      	adds	r0, #1
 800f644:	d1c2      	bne.n	800f5cc <_printf_float+0x314>
 800f646:	e683      	b.n	800f350 <_printf_float+0x98>
 800f648:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 800f64c:	f1b9 0f01 	cmp.w	r9, #1
 800f650:	dc01      	bgt.n	800f656 <_printf_float+0x39e>
 800f652:	07db      	lsls	r3, r3, #31
 800f654:	d536      	bpl.n	800f6c4 <_printf_float+0x40c>
 800f656:	2301      	movs	r3, #1
 800f658:	4642      	mov	r2, r8
 800f65a:	4631      	mov	r1, r6
 800f65c:	4628      	mov	r0, r5
 800f65e:	47b8      	blx	r7
 800f660:	3001      	adds	r0, #1
 800f662:	f43f ae75 	beq.w	800f350 <_printf_float+0x98>
 800f666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f668:	465a      	mov	r2, fp
 800f66a:	4631      	mov	r1, r6
 800f66c:	4628      	mov	r0, r5
 800f66e:	47b8      	blx	r7
 800f670:	3001      	adds	r0, #1
 800f672:	f43f ae6d 	beq.w	800f350 <_printf_float+0x98>
 800f676:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f67a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f682:	f109 39ff 	add.w	r9, r9, #4294967295
 800f686:	d018      	beq.n	800f6ba <_printf_float+0x402>
 800f688:	464b      	mov	r3, r9
 800f68a:	f108 0201 	add.w	r2, r8, #1
 800f68e:	4631      	mov	r1, r6
 800f690:	4628      	mov	r0, r5
 800f692:	47b8      	blx	r7
 800f694:	3001      	adds	r0, #1
 800f696:	d10c      	bne.n	800f6b2 <_printf_float+0x3fa>
 800f698:	e65a      	b.n	800f350 <_printf_float+0x98>
 800f69a:	2301      	movs	r3, #1
 800f69c:	465a      	mov	r2, fp
 800f69e:	4631      	mov	r1, r6
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	47b8      	blx	r7
 800f6a4:	3001      	adds	r0, #1
 800f6a6:	f43f ae53 	beq.w	800f350 <_printf_float+0x98>
 800f6aa:	f108 0801 	add.w	r8, r8, #1
 800f6ae:	45c8      	cmp	r8, r9
 800f6b0:	dbf3      	blt.n	800f69a <_printf_float+0x3e2>
 800f6b2:	4653      	mov	r3, sl
 800f6b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f6b8:	e6dd      	b.n	800f476 <_printf_float+0x1be>
 800f6ba:	f04f 0800 	mov.w	r8, #0
 800f6be:	f104 0b1a 	add.w	fp, r4, #26
 800f6c2:	e7f4      	b.n	800f6ae <_printf_float+0x3f6>
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	4642      	mov	r2, r8
 800f6c8:	e7e1      	b.n	800f68e <_printf_float+0x3d6>
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	464a      	mov	r2, r9
 800f6ce:	4631      	mov	r1, r6
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	47b8      	blx	r7
 800f6d4:	3001      	adds	r0, #1
 800f6d6:	f43f ae3b 	beq.w	800f350 <_printf_float+0x98>
 800f6da:	f108 0801 	add.w	r8, r8, #1
 800f6de:	68e3      	ldr	r3, [r4, #12]
 800f6e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f6e2:	1a5b      	subs	r3, r3, r1
 800f6e4:	4543      	cmp	r3, r8
 800f6e6:	dcf0      	bgt.n	800f6ca <_printf_float+0x412>
 800f6e8:	e6f9      	b.n	800f4de <_printf_float+0x226>
 800f6ea:	f04f 0800 	mov.w	r8, #0
 800f6ee:	f104 0919 	add.w	r9, r4, #25
 800f6f2:	e7f4      	b.n	800f6de <_printf_float+0x426>

0800f6f4 <_printf_common>:
 800f6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6f8:	4616      	mov	r6, r2
 800f6fa:	4698      	mov	r8, r3
 800f6fc:	688a      	ldr	r2, [r1, #8]
 800f6fe:	690b      	ldr	r3, [r1, #16]
 800f700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f704:	4293      	cmp	r3, r2
 800f706:	bfb8      	it	lt
 800f708:	4613      	movlt	r3, r2
 800f70a:	6033      	str	r3, [r6, #0]
 800f70c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f710:	4607      	mov	r7, r0
 800f712:	460c      	mov	r4, r1
 800f714:	b10a      	cbz	r2, 800f71a <_printf_common+0x26>
 800f716:	3301      	adds	r3, #1
 800f718:	6033      	str	r3, [r6, #0]
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	0699      	lsls	r1, r3, #26
 800f71e:	bf42      	ittt	mi
 800f720:	6833      	ldrmi	r3, [r6, #0]
 800f722:	3302      	addmi	r3, #2
 800f724:	6033      	strmi	r3, [r6, #0]
 800f726:	6825      	ldr	r5, [r4, #0]
 800f728:	f015 0506 	ands.w	r5, r5, #6
 800f72c:	d106      	bne.n	800f73c <_printf_common+0x48>
 800f72e:	f104 0a19 	add.w	sl, r4, #25
 800f732:	68e3      	ldr	r3, [r4, #12]
 800f734:	6832      	ldr	r2, [r6, #0]
 800f736:	1a9b      	subs	r3, r3, r2
 800f738:	42ab      	cmp	r3, r5
 800f73a:	dc26      	bgt.n	800f78a <_printf_common+0x96>
 800f73c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f740:	6822      	ldr	r2, [r4, #0]
 800f742:	3b00      	subs	r3, #0
 800f744:	bf18      	it	ne
 800f746:	2301      	movne	r3, #1
 800f748:	0692      	lsls	r2, r2, #26
 800f74a:	d42b      	bmi.n	800f7a4 <_printf_common+0xb0>
 800f74c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f750:	4641      	mov	r1, r8
 800f752:	4638      	mov	r0, r7
 800f754:	47c8      	blx	r9
 800f756:	3001      	adds	r0, #1
 800f758:	d01e      	beq.n	800f798 <_printf_common+0xa4>
 800f75a:	6823      	ldr	r3, [r4, #0]
 800f75c:	6922      	ldr	r2, [r4, #16]
 800f75e:	f003 0306 	and.w	r3, r3, #6
 800f762:	2b04      	cmp	r3, #4
 800f764:	bf02      	ittt	eq
 800f766:	68e5      	ldreq	r5, [r4, #12]
 800f768:	6833      	ldreq	r3, [r6, #0]
 800f76a:	1aed      	subeq	r5, r5, r3
 800f76c:	68a3      	ldr	r3, [r4, #8]
 800f76e:	bf0c      	ite	eq
 800f770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f774:	2500      	movne	r5, #0
 800f776:	4293      	cmp	r3, r2
 800f778:	bfc4      	itt	gt
 800f77a:	1a9b      	subgt	r3, r3, r2
 800f77c:	18ed      	addgt	r5, r5, r3
 800f77e:	2600      	movs	r6, #0
 800f780:	341a      	adds	r4, #26
 800f782:	42b5      	cmp	r5, r6
 800f784:	d11a      	bne.n	800f7bc <_printf_common+0xc8>
 800f786:	2000      	movs	r0, #0
 800f788:	e008      	b.n	800f79c <_printf_common+0xa8>
 800f78a:	2301      	movs	r3, #1
 800f78c:	4652      	mov	r2, sl
 800f78e:	4641      	mov	r1, r8
 800f790:	4638      	mov	r0, r7
 800f792:	47c8      	blx	r9
 800f794:	3001      	adds	r0, #1
 800f796:	d103      	bne.n	800f7a0 <_printf_common+0xac>
 800f798:	f04f 30ff 	mov.w	r0, #4294967295
 800f79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7a0:	3501      	adds	r5, #1
 800f7a2:	e7c6      	b.n	800f732 <_printf_common+0x3e>
 800f7a4:	18e1      	adds	r1, r4, r3
 800f7a6:	1c5a      	adds	r2, r3, #1
 800f7a8:	2030      	movs	r0, #48	@ 0x30
 800f7aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f7ae:	4422      	add	r2, r4
 800f7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f7b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f7b8:	3302      	adds	r3, #2
 800f7ba:	e7c7      	b.n	800f74c <_printf_common+0x58>
 800f7bc:	2301      	movs	r3, #1
 800f7be:	4622      	mov	r2, r4
 800f7c0:	4641      	mov	r1, r8
 800f7c2:	4638      	mov	r0, r7
 800f7c4:	47c8      	blx	r9
 800f7c6:	3001      	adds	r0, #1
 800f7c8:	d0e6      	beq.n	800f798 <_printf_common+0xa4>
 800f7ca:	3601      	adds	r6, #1
 800f7cc:	e7d9      	b.n	800f782 <_printf_common+0x8e>
	...

0800f7d0 <_printf_i>:
 800f7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d4:	7e0f      	ldrb	r7, [r1, #24]
 800f7d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f7d8:	2f78      	cmp	r7, #120	@ 0x78
 800f7da:	4691      	mov	r9, r2
 800f7dc:	4680      	mov	r8, r0
 800f7de:	460c      	mov	r4, r1
 800f7e0:	469a      	mov	sl, r3
 800f7e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f7e6:	d807      	bhi.n	800f7f8 <_printf_i+0x28>
 800f7e8:	2f62      	cmp	r7, #98	@ 0x62
 800f7ea:	d80a      	bhi.n	800f802 <_printf_i+0x32>
 800f7ec:	2f00      	cmp	r7, #0
 800f7ee:	f000 80d1 	beq.w	800f994 <_printf_i+0x1c4>
 800f7f2:	2f58      	cmp	r7, #88	@ 0x58
 800f7f4:	f000 80b8 	beq.w	800f968 <_printf_i+0x198>
 800f7f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f800:	e03a      	b.n	800f878 <_printf_i+0xa8>
 800f802:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f806:	2b15      	cmp	r3, #21
 800f808:	d8f6      	bhi.n	800f7f8 <_printf_i+0x28>
 800f80a:	a101      	add	r1, pc, #4	@ (adr r1, 800f810 <_printf_i+0x40>)
 800f80c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f810:	0800f869 	.word	0x0800f869
 800f814:	0800f87d 	.word	0x0800f87d
 800f818:	0800f7f9 	.word	0x0800f7f9
 800f81c:	0800f7f9 	.word	0x0800f7f9
 800f820:	0800f7f9 	.word	0x0800f7f9
 800f824:	0800f7f9 	.word	0x0800f7f9
 800f828:	0800f87d 	.word	0x0800f87d
 800f82c:	0800f7f9 	.word	0x0800f7f9
 800f830:	0800f7f9 	.word	0x0800f7f9
 800f834:	0800f7f9 	.word	0x0800f7f9
 800f838:	0800f7f9 	.word	0x0800f7f9
 800f83c:	0800f97b 	.word	0x0800f97b
 800f840:	0800f8a7 	.word	0x0800f8a7
 800f844:	0800f935 	.word	0x0800f935
 800f848:	0800f7f9 	.word	0x0800f7f9
 800f84c:	0800f7f9 	.word	0x0800f7f9
 800f850:	0800f99d 	.word	0x0800f99d
 800f854:	0800f7f9 	.word	0x0800f7f9
 800f858:	0800f8a7 	.word	0x0800f8a7
 800f85c:	0800f7f9 	.word	0x0800f7f9
 800f860:	0800f7f9 	.word	0x0800f7f9
 800f864:	0800f93d 	.word	0x0800f93d
 800f868:	6833      	ldr	r3, [r6, #0]
 800f86a:	1d1a      	adds	r2, r3, #4
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	6032      	str	r2, [r6, #0]
 800f870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f874:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f878:	2301      	movs	r3, #1
 800f87a:	e09c      	b.n	800f9b6 <_printf_i+0x1e6>
 800f87c:	6833      	ldr	r3, [r6, #0]
 800f87e:	6820      	ldr	r0, [r4, #0]
 800f880:	1d19      	adds	r1, r3, #4
 800f882:	6031      	str	r1, [r6, #0]
 800f884:	0606      	lsls	r6, r0, #24
 800f886:	d501      	bpl.n	800f88c <_printf_i+0xbc>
 800f888:	681d      	ldr	r5, [r3, #0]
 800f88a:	e003      	b.n	800f894 <_printf_i+0xc4>
 800f88c:	0645      	lsls	r5, r0, #25
 800f88e:	d5fb      	bpl.n	800f888 <_printf_i+0xb8>
 800f890:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f894:	2d00      	cmp	r5, #0
 800f896:	da03      	bge.n	800f8a0 <_printf_i+0xd0>
 800f898:	232d      	movs	r3, #45	@ 0x2d
 800f89a:	426d      	negs	r5, r5
 800f89c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8a0:	4858      	ldr	r0, [pc, #352]	@ (800fa04 <_printf_i+0x234>)
 800f8a2:	230a      	movs	r3, #10
 800f8a4:	e011      	b.n	800f8ca <_printf_i+0xfa>
 800f8a6:	6821      	ldr	r1, [r4, #0]
 800f8a8:	6833      	ldr	r3, [r6, #0]
 800f8aa:	0608      	lsls	r0, r1, #24
 800f8ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800f8b0:	d402      	bmi.n	800f8b8 <_printf_i+0xe8>
 800f8b2:	0649      	lsls	r1, r1, #25
 800f8b4:	bf48      	it	mi
 800f8b6:	b2ad      	uxthmi	r5, r5
 800f8b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f8ba:	4852      	ldr	r0, [pc, #328]	@ (800fa04 <_printf_i+0x234>)
 800f8bc:	6033      	str	r3, [r6, #0]
 800f8be:	bf14      	ite	ne
 800f8c0:	230a      	movne	r3, #10
 800f8c2:	2308      	moveq	r3, #8
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f8ca:	6866      	ldr	r6, [r4, #4]
 800f8cc:	60a6      	str	r6, [r4, #8]
 800f8ce:	2e00      	cmp	r6, #0
 800f8d0:	db05      	blt.n	800f8de <_printf_i+0x10e>
 800f8d2:	6821      	ldr	r1, [r4, #0]
 800f8d4:	432e      	orrs	r6, r5
 800f8d6:	f021 0104 	bic.w	r1, r1, #4
 800f8da:	6021      	str	r1, [r4, #0]
 800f8dc:	d04b      	beq.n	800f976 <_printf_i+0x1a6>
 800f8de:	4616      	mov	r6, r2
 800f8e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800f8e4:	fb03 5711 	mls	r7, r3, r1, r5
 800f8e8:	5dc7      	ldrb	r7, [r0, r7]
 800f8ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f8ee:	462f      	mov	r7, r5
 800f8f0:	42bb      	cmp	r3, r7
 800f8f2:	460d      	mov	r5, r1
 800f8f4:	d9f4      	bls.n	800f8e0 <_printf_i+0x110>
 800f8f6:	2b08      	cmp	r3, #8
 800f8f8:	d10b      	bne.n	800f912 <_printf_i+0x142>
 800f8fa:	6823      	ldr	r3, [r4, #0]
 800f8fc:	07df      	lsls	r7, r3, #31
 800f8fe:	d508      	bpl.n	800f912 <_printf_i+0x142>
 800f900:	6923      	ldr	r3, [r4, #16]
 800f902:	6861      	ldr	r1, [r4, #4]
 800f904:	4299      	cmp	r1, r3
 800f906:	bfde      	ittt	le
 800f908:	2330      	movle	r3, #48	@ 0x30
 800f90a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f90e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f912:	1b92      	subs	r2, r2, r6
 800f914:	6122      	str	r2, [r4, #16]
 800f916:	f8cd a000 	str.w	sl, [sp]
 800f91a:	464b      	mov	r3, r9
 800f91c:	aa03      	add	r2, sp, #12
 800f91e:	4621      	mov	r1, r4
 800f920:	4640      	mov	r0, r8
 800f922:	f7ff fee7 	bl	800f6f4 <_printf_common>
 800f926:	3001      	adds	r0, #1
 800f928:	d14a      	bne.n	800f9c0 <_printf_i+0x1f0>
 800f92a:	f04f 30ff 	mov.w	r0, #4294967295
 800f92e:	b004      	add	sp, #16
 800f930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f934:	6823      	ldr	r3, [r4, #0]
 800f936:	f043 0320 	orr.w	r3, r3, #32
 800f93a:	6023      	str	r3, [r4, #0]
 800f93c:	4832      	ldr	r0, [pc, #200]	@ (800fa08 <_printf_i+0x238>)
 800f93e:	2778      	movs	r7, #120	@ 0x78
 800f940:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f944:	6823      	ldr	r3, [r4, #0]
 800f946:	6831      	ldr	r1, [r6, #0]
 800f948:	061f      	lsls	r7, r3, #24
 800f94a:	f851 5b04 	ldr.w	r5, [r1], #4
 800f94e:	d402      	bmi.n	800f956 <_printf_i+0x186>
 800f950:	065f      	lsls	r7, r3, #25
 800f952:	bf48      	it	mi
 800f954:	b2ad      	uxthmi	r5, r5
 800f956:	6031      	str	r1, [r6, #0]
 800f958:	07d9      	lsls	r1, r3, #31
 800f95a:	bf44      	itt	mi
 800f95c:	f043 0320 	orrmi.w	r3, r3, #32
 800f960:	6023      	strmi	r3, [r4, #0]
 800f962:	b11d      	cbz	r5, 800f96c <_printf_i+0x19c>
 800f964:	2310      	movs	r3, #16
 800f966:	e7ad      	b.n	800f8c4 <_printf_i+0xf4>
 800f968:	4826      	ldr	r0, [pc, #152]	@ (800fa04 <_printf_i+0x234>)
 800f96a:	e7e9      	b.n	800f940 <_printf_i+0x170>
 800f96c:	6823      	ldr	r3, [r4, #0]
 800f96e:	f023 0320 	bic.w	r3, r3, #32
 800f972:	6023      	str	r3, [r4, #0]
 800f974:	e7f6      	b.n	800f964 <_printf_i+0x194>
 800f976:	4616      	mov	r6, r2
 800f978:	e7bd      	b.n	800f8f6 <_printf_i+0x126>
 800f97a:	6833      	ldr	r3, [r6, #0]
 800f97c:	6825      	ldr	r5, [r4, #0]
 800f97e:	6961      	ldr	r1, [r4, #20]
 800f980:	1d18      	adds	r0, r3, #4
 800f982:	6030      	str	r0, [r6, #0]
 800f984:	062e      	lsls	r6, r5, #24
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	d501      	bpl.n	800f98e <_printf_i+0x1be>
 800f98a:	6019      	str	r1, [r3, #0]
 800f98c:	e002      	b.n	800f994 <_printf_i+0x1c4>
 800f98e:	0668      	lsls	r0, r5, #25
 800f990:	d5fb      	bpl.n	800f98a <_printf_i+0x1ba>
 800f992:	8019      	strh	r1, [r3, #0]
 800f994:	2300      	movs	r3, #0
 800f996:	6123      	str	r3, [r4, #16]
 800f998:	4616      	mov	r6, r2
 800f99a:	e7bc      	b.n	800f916 <_printf_i+0x146>
 800f99c:	6833      	ldr	r3, [r6, #0]
 800f99e:	1d1a      	adds	r2, r3, #4
 800f9a0:	6032      	str	r2, [r6, #0]
 800f9a2:	681e      	ldr	r6, [r3, #0]
 800f9a4:	6862      	ldr	r2, [r4, #4]
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	f7f0 fc59 	bl	8000260 <memchr>
 800f9ae:	b108      	cbz	r0, 800f9b4 <_printf_i+0x1e4>
 800f9b0:	1b80      	subs	r0, r0, r6
 800f9b2:	6060      	str	r0, [r4, #4]
 800f9b4:	6863      	ldr	r3, [r4, #4]
 800f9b6:	6123      	str	r3, [r4, #16]
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9be:	e7aa      	b.n	800f916 <_printf_i+0x146>
 800f9c0:	6923      	ldr	r3, [r4, #16]
 800f9c2:	4632      	mov	r2, r6
 800f9c4:	4649      	mov	r1, r9
 800f9c6:	4640      	mov	r0, r8
 800f9c8:	47d0      	blx	sl
 800f9ca:	3001      	adds	r0, #1
 800f9cc:	d0ad      	beq.n	800f92a <_printf_i+0x15a>
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	079b      	lsls	r3, r3, #30
 800f9d2:	d413      	bmi.n	800f9fc <_printf_i+0x22c>
 800f9d4:	68e0      	ldr	r0, [r4, #12]
 800f9d6:	9b03      	ldr	r3, [sp, #12]
 800f9d8:	4298      	cmp	r0, r3
 800f9da:	bfb8      	it	lt
 800f9dc:	4618      	movlt	r0, r3
 800f9de:	e7a6      	b.n	800f92e <_printf_i+0x15e>
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	4632      	mov	r2, r6
 800f9e4:	4649      	mov	r1, r9
 800f9e6:	4640      	mov	r0, r8
 800f9e8:	47d0      	blx	sl
 800f9ea:	3001      	adds	r0, #1
 800f9ec:	d09d      	beq.n	800f92a <_printf_i+0x15a>
 800f9ee:	3501      	adds	r5, #1
 800f9f0:	68e3      	ldr	r3, [r4, #12]
 800f9f2:	9903      	ldr	r1, [sp, #12]
 800f9f4:	1a5b      	subs	r3, r3, r1
 800f9f6:	42ab      	cmp	r3, r5
 800f9f8:	dcf2      	bgt.n	800f9e0 <_printf_i+0x210>
 800f9fa:	e7eb      	b.n	800f9d4 <_printf_i+0x204>
 800f9fc:	2500      	movs	r5, #0
 800f9fe:	f104 0619 	add.w	r6, r4, #25
 800fa02:	e7f5      	b.n	800f9f0 <_printf_i+0x220>
 800fa04:	080135a4 	.word	0x080135a4
 800fa08:	080135b5 	.word	0x080135b5

0800fa0c <std>:
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	b510      	push	{r4, lr}
 800fa10:	4604      	mov	r4, r0
 800fa12:	e9c0 3300 	strd	r3, r3, [r0]
 800fa16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa1a:	6083      	str	r3, [r0, #8]
 800fa1c:	8181      	strh	r1, [r0, #12]
 800fa1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fa20:	81c2      	strh	r2, [r0, #14]
 800fa22:	6183      	str	r3, [r0, #24]
 800fa24:	4619      	mov	r1, r3
 800fa26:	2208      	movs	r2, #8
 800fa28:	305c      	adds	r0, #92	@ 0x5c
 800fa2a:	f000 f98a 	bl	800fd42 <memset>
 800fa2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa64 <std+0x58>)
 800fa30:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa32:	4b0d      	ldr	r3, [pc, #52]	@ (800fa68 <std+0x5c>)
 800fa34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa36:	4b0d      	ldr	r3, [pc, #52]	@ (800fa6c <std+0x60>)
 800fa38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa3a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa70 <std+0x64>)
 800fa3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa3e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa74 <std+0x68>)
 800fa40:	6224      	str	r4, [r4, #32]
 800fa42:	429c      	cmp	r4, r3
 800fa44:	d006      	beq.n	800fa54 <std+0x48>
 800fa46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa4a:	4294      	cmp	r4, r2
 800fa4c:	d002      	beq.n	800fa54 <std+0x48>
 800fa4e:	33d0      	adds	r3, #208	@ 0xd0
 800fa50:	429c      	cmp	r4, r3
 800fa52:	d105      	bne.n	800fa60 <std+0x54>
 800fa54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa5c:	f000 ba6e 	b.w	800ff3c <__retarget_lock_init_recursive>
 800fa60:	bd10      	pop	{r4, pc}
 800fa62:	bf00      	nop
 800fa64:	0800fc99 	.word	0x0800fc99
 800fa68:	0800fcbf 	.word	0x0800fcbf
 800fa6c:	0800fcf7 	.word	0x0800fcf7
 800fa70:	0800fd1b 	.word	0x0800fd1b
 800fa74:	20017c50 	.word	0x20017c50

0800fa78 <stdio_exit_handler>:
 800fa78:	4a02      	ldr	r2, [pc, #8]	@ (800fa84 <stdio_exit_handler+0xc>)
 800fa7a:	4903      	ldr	r1, [pc, #12]	@ (800fa88 <stdio_exit_handler+0x10>)
 800fa7c:	4803      	ldr	r0, [pc, #12]	@ (800fa8c <stdio_exit_handler+0x14>)
 800fa7e:	f000 b869 	b.w	800fb54 <_fwalk_sglue>
 800fa82:	bf00      	nop
 800fa84:	20000400 	.word	0x20000400
 800fa88:	08011d69 	.word	0x08011d69
 800fa8c:	20000410 	.word	0x20000410

0800fa90 <cleanup_stdio>:
 800fa90:	6841      	ldr	r1, [r0, #4]
 800fa92:	4b0c      	ldr	r3, [pc, #48]	@ (800fac4 <cleanup_stdio+0x34>)
 800fa94:	4299      	cmp	r1, r3
 800fa96:	b510      	push	{r4, lr}
 800fa98:	4604      	mov	r4, r0
 800fa9a:	d001      	beq.n	800faa0 <cleanup_stdio+0x10>
 800fa9c:	f002 f964 	bl	8011d68 <_fflush_r>
 800faa0:	68a1      	ldr	r1, [r4, #8]
 800faa2:	4b09      	ldr	r3, [pc, #36]	@ (800fac8 <cleanup_stdio+0x38>)
 800faa4:	4299      	cmp	r1, r3
 800faa6:	d002      	beq.n	800faae <cleanup_stdio+0x1e>
 800faa8:	4620      	mov	r0, r4
 800faaa:	f002 f95d 	bl	8011d68 <_fflush_r>
 800faae:	68e1      	ldr	r1, [r4, #12]
 800fab0:	4b06      	ldr	r3, [pc, #24]	@ (800facc <cleanup_stdio+0x3c>)
 800fab2:	4299      	cmp	r1, r3
 800fab4:	d004      	beq.n	800fac0 <cleanup_stdio+0x30>
 800fab6:	4620      	mov	r0, r4
 800fab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fabc:	f002 b954 	b.w	8011d68 <_fflush_r>
 800fac0:	bd10      	pop	{r4, pc}
 800fac2:	bf00      	nop
 800fac4:	20017c50 	.word	0x20017c50
 800fac8:	20017cb8 	.word	0x20017cb8
 800facc:	20017d20 	.word	0x20017d20

0800fad0 <global_stdio_init.part.0>:
 800fad0:	b510      	push	{r4, lr}
 800fad2:	4b0b      	ldr	r3, [pc, #44]	@ (800fb00 <global_stdio_init.part.0+0x30>)
 800fad4:	4c0b      	ldr	r4, [pc, #44]	@ (800fb04 <global_stdio_init.part.0+0x34>)
 800fad6:	4a0c      	ldr	r2, [pc, #48]	@ (800fb08 <global_stdio_init.part.0+0x38>)
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	4620      	mov	r0, r4
 800fadc:	2200      	movs	r2, #0
 800fade:	2104      	movs	r1, #4
 800fae0:	f7ff ff94 	bl	800fa0c <std>
 800fae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fae8:	2201      	movs	r2, #1
 800faea:	2109      	movs	r1, #9
 800faec:	f7ff ff8e 	bl	800fa0c <std>
 800faf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800faf4:	2202      	movs	r2, #2
 800faf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fafa:	2112      	movs	r1, #18
 800fafc:	f7ff bf86 	b.w	800fa0c <std>
 800fb00:	20017d88 	.word	0x20017d88
 800fb04:	20017c50 	.word	0x20017c50
 800fb08:	0800fa79 	.word	0x0800fa79

0800fb0c <__sfp_lock_acquire>:
 800fb0c:	4801      	ldr	r0, [pc, #4]	@ (800fb14 <__sfp_lock_acquire+0x8>)
 800fb0e:	f000 ba16 	b.w	800ff3e <__retarget_lock_acquire_recursive>
 800fb12:	bf00      	nop
 800fb14:	20017d91 	.word	0x20017d91

0800fb18 <__sfp_lock_release>:
 800fb18:	4801      	ldr	r0, [pc, #4]	@ (800fb20 <__sfp_lock_release+0x8>)
 800fb1a:	f000 ba11 	b.w	800ff40 <__retarget_lock_release_recursive>
 800fb1e:	bf00      	nop
 800fb20:	20017d91 	.word	0x20017d91

0800fb24 <__sinit>:
 800fb24:	b510      	push	{r4, lr}
 800fb26:	4604      	mov	r4, r0
 800fb28:	f7ff fff0 	bl	800fb0c <__sfp_lock_acquire>
 800fb2c:	6a23      	ldr	r3, [r4, #32]
 800fb2e:	b11b      	cbz	r3, 800fb38 <__sinit+0x14>
 800fb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb34:	f7ff bff0 	b.w	800fb18 <__sfp_lock_release>
 800fb38:	4b04      	ldr	r3, [pc, #16]	@ (800fb4c <__sinit+0x28>)
 800fb3a:	6223      	str	r3, [r4, #32]
 800fb3c:	4b04      	ldr	r3, [pc, #16]	@ (800fb50 <__sinit+0x2c>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d1f5      	bne.n	800fb30 <__sinit+0xc>
 800fb44:	f7ff ffc4 	bl	800fad0 <global_stdio_init.part.0>
 800fb48:	e7f2      	b.n	800fb30 <__sinit+0xc>
 800fb4a:	bf00      	nop
 800fb4c:	0800fa91 	.word	0x0800fa91
 800fb50:	20017d88 	.word	0x20017d88

0800fb54 <_fwalk_sglue>:
 800fb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb58:	4607      	mov	r7, r0
 800fb5a:	4688      	mov	r8, r1
 800fb5c:	4614      	mov	r4, r2
 800fb5e:	2600      	movs	r6, #0
 800fb60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb64:	f1b9 0901 	subs.w	r9, r9, #1
 800fb68:	d505      	bpl.n	800fb76 <_fwalk_sglue+0x22>
 800fb6a:	6824      	ldr	r4, [r4, #0]
 800fb6c:	2c00      	cmp	r4, #0
 800fb6e:	d1f7      	bne.n	800fb60 <_fwalk_sglue+0xc>
 800fb70:	4630      	mov	r0, r6
 800fb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb76:	89ab      	ldrh	r3, [r5, #12]
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d907      	bls.n	800fb8c <_fwalk_sglue+0x38>
 800fb7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb80:	3301      	adds	r3, #1
 800fb82:	d003      	beq.n	800fb8c <_fwalk_sglue+0x38>
 800fb84:	4629      	mov	r1, r5
 800fb86:	4638      	mov	r0, r7
 800fb88:	47c0      	blx	r8
 800fb8a:	4306      	orrs	r6, r0
 800fb8c:	3568      	adds	r5, #104	@ 0x68
 800fb8e:	e7e9      	b.n	800fb64 <_fwalk_sglue+0x10>

0800fb90 <sniprintf>:
 800fb90:	b40c      	push	{r2, r3}
 800fb92:	b530      	push	{r4, r5, lr}
 800fb94:	4b18      	ldr	r3, [pc, #96]	@ (800fbf8 <sniprintf+0x68>)
 800fb96:	1e0c      	subs	r4, r1, #0
 800fb98:	681d      	ldr	r5, [r3, #0]
 800fb9a:	b09d      	sub	sp, #116	@ 0x74
 800fb9c:	da08      	bge.n	800fbb0 <sniprintf+0x20>
 800fb9e:	238b      	movs	r3, #139	@ 0x8b
 800fba0:	602b      	str	r3, [r5, #0]
 800fba2:	f04f 30ff 	mov.w	r0, #4294967295
 800fba6:	b01d      	add	sp, #116	@ 0x74
 800fba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbac:	b002      	add	sp, #8
 800fbae:	4770      	bx	lr
 800fbb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fbb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fbb8:	f04f 0300 	mov.w	r3, #0
 800fbbc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fbbe:	bf14      	ite	ne
 800fbc0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fbc4:	4623      	moveq	r3, r4
 800fbc6:	9304      	str	r3, [sp, #16]
 800fbc8:	9307      	str	r3, [sp, #28]
 800fbca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fbce:	9002      	str	r0, [sp, #8]
 800fbd0:	9006      	str	r0, [sp, #24]
 800fbd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fbd6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fbd8:	ab21      	add	r3, sp, #132	@ 0x84
 800fbda:	a902      	add	r1, sp, #8
 800fbdc:	4628      	mov	r0, r5
 800fbde:	9301      	str	r3, [sp, #4]
 800fbe0:	f001 fc24 	bl	801142c <_svfiprintf_r>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	bfbc      	itt	lt
 800fbe8:	238b      	movlt	r3, #139	@ 0x8b
 800fbea:	602b      	strlt	r3, [r5, #0]
 800fbec:	2c00      	cmp	r4, #0
 800fbee:	d0da      	beq.n	800fba6 <sniprintf+0x16>
 800fbf0:	9b02      	ldr	r3, [sp, #8]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	701a      	strb	r2, [r3, #0]
 800fbf6:	e7d6      	b.n	800fba6 <sniprintf+0x16>
 800fbf8:	2000040c 	.word	0x2000040c

0800fbfc <siprintf>:
 800fbfc:	b40e      	push	{r1, r2, r3}
 800fbfe:	b510      	push	{r4, lr}
 800fc00:	b09d      	sub	sp, #116	@ 0x74
 800fc02:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fc04:	9002      	str	r0, [sp, #8]
 800fc06:	9006      	str	r0, [sp, #24]
 800fc08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fc0c:	480a      	ldr	r0, [pc, #40]	@ (800fc38 <siprintf+0x3c>)
 800fc0e:	9107      	str	r1, [sp, #28]
 800fc10:	9104      	str	r1, [sp, #16]
 800fc12:	490a      	ldr	r1, [pc, #40]	@ (800fc3c <siprintf+0x40>)
 800fc14:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc18:	9105      	str	r1, [sp, #20]
 800fc1a:	2400      	movs	r4, #0
 800fc1c:	a902      	add	r1, sp, #8
 800fc1e:	6800      	ldr	r0, [r0, #0]
 800fc20:	9301      	str	r3, [sp, #4]
 800fc22:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fc24:	f001 fc02 	bl	801142c <_svfiprintf_r>
 800fc28:	9b02      	ldr	r3, [sp, #8]
 800fc2a:	701c      	strb	r4, [r3, #0]
 800fc2c:	b01d      	add	sp, #116	@ 0x74
 800fc2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc32:	b003      	add	sp, #12
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	2000040c 	.word	0x2000040c
 800fc3c:	ffff0208 	.word	0xffff0208

0800fc40 <siscanf>:
 800fc40:	b40e      	push	{r1, r2, r3}
 800fc42:	b570      	push	{r4, r5, r6, lr}
 800fc44:	b09d      	sub	sp, #116	@ 0x74
 800fc46:	ac21      	add	r4, sp, #132	@ 0x84
 800fc48:	2500      	movs	r5, #0
 800fc4a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fc4e:	f854 6b04 	ldr.w	r6, [r4], #4
 800fc52:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fc56:	951b      	str	r5, [sp, #108]	@ 0x6c
 800fc58:	9002      	str	r0, [sp, #8]
 800fc5a:	9006      	str	r0, [sp, #24]
 800fc5c:	f7f0 fb50 	bl	8000300 <strlen>
 800fc60:	4b0b      	ldr	r3, [pc, #44]	@ (800fc90 <siscanf+0x50>)
 800fc62:	9003      	str	r0, [sp, #12]
 800fc64:	9007      	str	r0, [sp, #28]
 800fc66:	480b      	ldr	r0, [pc, #44]	@ (800fc94 <siscanf+0x54>)
 800fc68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fc72:	4632      	mov	r2, r6
 800fc74:	4623      	mov	r3, r4
 800fc76:	a902      	add	r1, sp, #8
 800fc78:	6800      	ldr	r0, [r0, #0]
 800fc7a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800fc7c:	9514      	str	r5, [sp, #80]	@ 0x50
 800fc7e:	9401      	str	r4, [sp, #4]
 800fc80:	f001 fd2a 	bl	80116d8 <__ssvfiscanf_r>
 800fc84:	b01d      	add	sp, #116	@ 0x74
 800fc86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc8a:	b003      	add	sp, #12
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	0800fcbb 	.word	0x0800fcbb
 800fc94:	2000040c 	.word	0x2000040c

0800fc98 <__sread>:
 800fc98:	b510      	push	{r4, lr}
 800fc9a:	460c      	mov	r4, r1
 800fc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fca0:	f000 f8ee 	bl	800fe80 <_read_r>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	bfab      	itete	ge
 800fca8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fcaa:	89a3      	ldrhlt	r3, [r4, #12]
 800fcac:	181b      	addge	r3, r3, r0
 800fcae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fcb2:	bfac      	ite	ge
 800fcb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fcb6:	81a3      	strhlt	r3, [r4, #12]
 800fcb8:	bd10      	pop	{r4, pc}

0800fcba <__seofread>:
 800fcba:	2000      	movs	r0, #0
 800fcbc:	4770      	bx	lr

0800fcbe <__swrite>:
 800fcbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc2:	461f      	mov	r7, r3
 800fcc4:	898b      	ldrh	r3, [r1, #12]
 800fcc6:	05db      	lsls	r3, r3, #23
 800fcc8:	4605      	mov	r5, r0
 800fcca:	460c      	mov	r4, r1
 800fccc:	4616      	mov	r6, r2
 800fcce:	d505      	bpl.n	800fcdc <__swrite+0x1e>
 800fcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcd4:	2302      	movs	r3, #2
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	f000 f8c0 	bl	800fe5c <_lseek_r>
 800fcdc:	89a3      	ldrh	r3, [r4, #12]
 800fcde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fce6:	81a3      	strh	r3, [r4, #12]
 800fce8:	4632      	mov	r2, r6
 800fcea:	463b      	mov	r3, r7
 800fcec:	4628      	mov	r0, r5
 800fcee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf2:	f000 b8e7 	b.w	800fec4 <_write_r>

0800fcf6 <__sseek>:
 800fcf6:	b510      	push	{r4, lr}
 800fcf8:	460c      	mov	r4, r1
 800fcfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcfe:	f000 f8ad 	bl	800fe5c <_lseek_r>
 800fd02:	1c43      	adds	r3, r0, #1
 800fd04:	89a3      	ldrh	r3, [r4, #12]
 800fd06:	bf15      	itete	ne
 800fd08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fd0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fd0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fd12:	81a3      	strheq	r3, [r4, #12]
 800fd14:	bf18      	it	ne
 800fd16:	81a3      	strhne	r3, [r4, #12]
 800fd18:	bd10      	pop	{r4, pc}

0800fd1a <__sclose>:
 800fd1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd1e:	f000 b82f 	b.w	800fd80 <_close_r>

0800fd22 <memcmp>:
 800fd22:	b510      	push	{r4, lr}
 800fd24:	3901      	subs	r1, #1
 800fd26:	4402      	add	r2, r0
 800fd28:	4290      	cmp	r0, r2
 800fd2a:	d101      	bne.n	800fd30 <memcmp+0xe>
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	e005      	b.n	800fd3c <memcmp+0x1a>
 800fd30:	7803      	ldrb	r3, [r0, #0]
 800fd32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fd36:	42a3      	cmp	r3, r4
 800fd38:	d001      	beq.n	800fd3e <memcmp+0x1c>
 800fd3a:	1b18      	subs	r0, r3, r4
 800fd3c:	bd10      	pop	{r4, pc}
 800fd3e:	3001      	adds	r0, #1
 800fd40:	e7f2      	b.n	800fd28 <memcmp+0x6>

0800fd42 <memset>:
 800fd42:	4402      	add	r2, r0
 800fd44:	4603      	mov	r3, r0
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d100      	bne.n	800fd4c <memset+0xa>
 800fd4a:	4770      	bx	lr
 800fd4c:	f803 1b01 	strb.w	r1, [r3], #1
 800fd50:	e7f9      	b.n	800fd46 <memset+0x4>

0800fd52 <strncpy>:
 800fd52:	b510      	push	{r4, lr}
 800fd54:	3901      	subs	r1, #1
 800fd56:	4603      	mov	r3, r0
 800fd58:	b132      	cbz	r2, 800fd68 <strncpy+0x16>
 800fd5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fd5e:	f803 4b01 	strb.w	r4, [r3], #1
 800fd62:	3a01      	subs	r2, #1
 800fd64:	2c00      	cmp	r4, #0
 800fd66:	d1f7      	bne.n	800fd58 <strncpy+0x6>
 800fd68:	441a      	add	r2, r3
 800fd6a:	2100      	movs	r1, #0
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d100      	bne.n	800fd72 <strncpy+0x20>
 800fd70:	bd10      	pop	{r4, pc}
 800fd72:	f803 1b01 	strb.w	r1, [r3], #1
 800fd76:	e7f9      	b.n	800fd6c <strncpy+0x1a>

0800fd78 <_localeconv_r>:
 800fd78:	4800      	ldr	r0, [pc, #0]	@ (800fd7c <_localeconv_r+0x4>)
 800fd7a:	4770      	bx	lr
 800fd7c:	2000054c 	.word	0x2000054c

0800fd80 <_close_r>:
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	4d06      	ldr	r5, [pc, #24]	@ (800fd9c <_close_r+0x1c>)
 800fd84:	2300      	movs	r3, #0
 800fd86:	4604      	mov	r4, r0
 800fd88:	4608      	mov	r0, r1
 800fd8a:	602b      	str	r3, [r5, #0]
 800fd8c:	f7fe fe4c 	bl	800ea28 <_close>
 800fd90:	1c43      	adds	r3, r0, #1
 800fd92:	d102      	bne.n	800fd9a <_close_r+0x1a>
 800fd94:	682b      	ldr	r3, [r5, #0]
 800fd96:	b103      	cbz	r3, 800fd9a <_close_r+0x1a>
 800fd98:	6023      	str	r3, [r4, #0]
 800fd9a:	bd38      	pop	{r3, r4, r5, pc}
 800fd9c:	20017d8c 	.word	0x20017d8c

0800fda0 <_reclaim_reent>:
 800fda0:	4b2d      	ldr	r3, [pc, #180]	@ (800fe58 <_reclaim_reent+0xb8>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4283      	cmp	r3, r0
 800fda6:	b570      	push	{r4, r5, r6, lr}
 800fda8:	4604      	mov	r4, r0
 800fdaa:	d053      	beq.n	800fe54 <_reclaim_reent+0xb4>
 800fdac:	69c3      	ldr	r3, [r0, #28]
 800fdae:	b31b      	cbz	r3, 800fdf8 <_reclaim_reent+0x58>
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	b163      	cbz	r3, 800fdce <_reclaim_reent+0x2e>
 800fdb4:	2500      	movs	r5, #0
 800fdb6:	69e3      	ldr	r3, [r4, #28]
 800fdb8:	68db      	ldr	r3, [r3, #12]
 800fdba:	5959      	ldr	r1, [r3, r5]
 800fdbc:	b9b1      	cbnz	r1, 800fdec <_reclaim_reent+0x4c>
 800fdbe:	3504      	adds	r5, #4
 800fdc0:	2d80      	cmp	r5, #128	@ 0x80
 800fdc2:	d1f8      	bne.n	800fdb6 <_reclaim_reent+0x16>
 800fdc4:	69e3      	ldr	r3, [r4, #28]
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	68d9      	ldr	r1, [r3, #12]
 800fdca:	f000 ff07 	bl	8010bdc <_free_r>
 800fdce:	69e3      	ldr	r3, [r4, #28]
 800fdd0:	6819      	ldr	r1, [r3, #0]
 800fdd2:	b111      	cbz	r1, 800fdda <_reclaim_reent+0x3a>
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f000 ff01 	bl	8010bdc <_free_r>
 800fdda:	69e3      	ldr	r3, [r4, #28]
 800fddc:	689d      	ldr	r5, [r3, #8]
 800fdde:	b15d      	cbz	r5, 800fdf8 <_reclaim_reent+0x58>
 800fde0:	4629      	mov	r1, r5
 800fde2:	4620      	mov	r0, r4
 800fde4:	682d      	ldr	r5, [r5, #0]
 800fde6:	f000 fef9 	bl	8010bdc <_free_r>
 800fdea:	e7f8      	b.n	800fdde <_reclaim_reent+0x3e>
 800fdec:	680e      	ldr	r6, [r1, #0]
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f000 fef4 	bl	8010bdc <_free_r>
 800fdf4:	4631      	mov	r1, r6
 800fdf6:	e7e1      	b.n	800fdbc <_reclaim_reent+0x1c>
 800fdf8:	6961      	ldr	r1, [r4, #20]
 800fdfa:	b111      	cbz	r1, 800fe02 <_reclaim_reent+0x62>
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f000 feed 	bl	8010bdc <_free_r>
 800fe02:	69e1      	ldr	r1, [r4, #28]
 800fe04:	b111      	cbz	r1, 800fe0c <_reclaim_reent+0x6c>
 800fe06:	4620      	mov	r0, r4
 800fe08:	f000 fee8 	bl	8010bdc <_free_r>
 800fe0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fe0e:	b111      	cbz	r1, 800fe16 <_reclaim_reent+0x76>
 800fe10:	4620      	mov	r0, r4
 800fe12:	f000 fee3 	bl	8010bdc <_free_r>
 800fe16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe18:	b111      	cbz	r1, 800fe20 <_reclaim_reent+0x80>
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	f000 fede 	bl	8010bdc <_free_r>
 800fe20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fe22:	b111      	cbz	r1, 800fe2a <_reclaim_reent+0x8a>
 800fe24:	4620      	mov	r0, r4
 800fe26:	f000 fed9 	bl	8010bdc <_free_r>
 800fe2a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fe2c:	b111      	cbz	r1, 800fe34 <_reclaim_reent+0x94>
 800fe2e:	4620      	mov	r0, r4
 800fe30:	f000 fed4 	bl	8010bdc <_free_r>
 800fe34:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fe36:	b111      	cbz	r1, 800fe3e <_reclaim_reent+0x9e>
 800fe38:	4620      	mov	r0, r4
 800fe3a:	f000 fecf 	bl	8010bdc <_free_r>
 800fe3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fe40:	b111      	cbz	r1, 800fe48 <_reclaim_reent+0xa8>
 800fe42:	4620      	mov	r0, r4
 800fe44:	f000 feca 	bl	8010bdc <_free_r>
 800fe48:	6a23      	ldr	r3, [r4, #32]
 800fe4a:	b11b      	cbz	r3, 800fe54 <_reclaim_reent+0xb4>
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe52:	4718      	bx	r3
 800fe54:	bd70      	pop	{r4, r5, r6, pc}
 800fe56:	bf00      	nop
 800fe58:	2000040c 	.word	0x2000040c

0800fe5c <_lseek_r>:
 800fe5c:	b538      	push	{r3, r4, r5, lr}
 800fe5e:	4d07      	ldr	r5, [pc, #28]	@ (800fe7c <_lseek_r+0x20>)
 800fe60:	4604      	mov	r4, r0
 800fe62:	4608      	mov	r0, r1
 800fe64:	4611      	mov	r1, r2
 800fe66:	2200      	movs	r2, #0
 800fe68:	602a      	str	r2, [r5, #0]
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	f7fe fde6 	bl	800ea3c <_lseek>
 800fe70:	1c43      	adds	r3, r0, #1
 800fe72:	d102      	bne.n	800fe7a <_lseek_r+0x1e>
 800fe74:	682b      	ldr	r3, [r5, #0]
 800fe76:	b103      	cbz	r3, 800fe7a <_lseek_r+0x1e>
 800fe78:	6023      	str	r3, [r4, #0]
 800fe7a:	bd38      	pop	{r3, r4, r5, pc}
 800fe7c:	20017d8c 	.word	0x20017d8c

0800fe80 <_read_r>:
 800fe80:	b538      	push	{r3, r4, r5, lr}
 800fe82:	4d07      	ldr	r5, [pc, #28]	@ (800fea0 <_read_r+0x20>)
 800fe84:	4604      	mov	r4, r0
 800fe86:	4608      	mov	r0, r1
 800fe88:	4611      	mov	r1, r2
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	602a      	str	r2, [r5, #0]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	f7fe fdac 	bl	800e9ec <_read>
 800fe94:	1c43      	adds	r3, r0, #1
 800fe96:	d102      	bne.n	800fe9e <_read_r+0x1e>
 800fe98:	682b      	ldr	r3, [r5, #0]
 800fe9a:	b103      	cbz	r3, 800fe9e <_read_r+0x1e>
 800fe9c:	6023      	str	r3, [r4, #0]
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
 800fea0:	20017d8c 	.word	0x20017d8c

0800fea4 <_sbrk_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	4d06      	ldr	r5, [pc, #24]	@ (800fec0 <_sbrk_r+0x1c>)
 800fea8:	2300      	movs	r3, #0
 800feaa:	4604      	mov	r4, r0
 800feac:	4608      	mov	r0, r1
 800feae:	602b      	str	r3, [r5, #0]
 800feb0:	f002 fc12 	bl	80126d8 <_sbrk>
 800feb4:	1c43      	adds	r3, r0, #1
 800feb6:	d102      	bne.n	800febe <_sbrk_r+0x1a>
 800feb8:	682b      	ldr	r3, [r5, #0]
 800feba:	b103      	cbz	r3, 800febe <_sbrk_r+0x1a>
 800febc:	6023      	str	r3, [r4, #0]
 800febe:	bd38      	pop	{r3, r4, r5, pc}
 800fec0:	20017d8c 	.word	0x20017d8c

0800fec4 <_write_r>:
 800fec4:	b538      	push	{r3, r4, r5, lr}
 800fec6:	4d07      	ldr	r5, [pc, #28]	@ (800fee4 <_write_r+0x20>)
 800fec8:	4604      	mov	r4, r0
 800feca:	4608      	mov	r0, r1
 800fecc:	4611      	mov	r1, r2
 800fece:	2200      	movs	r2, #0
 800fed0:	602a      	str	r2, [r5, #0]
 800fed2:	461a      	mov	r2, r3
 800fed4:	f7fe fd9a 	bl	800ea0c <_write>
 800fed8:	1c43      	adds	r3, r0, #1
 800feda:	d102      	bne.n	800fee2 <_write_r+0x1e>
 800fedc:	682b      	ldr	r3, [r5, #0]
 800fede:	b103      	cbz	r3, 800fee2 <_write_r+0x1e>
 800fee0:	6023      	str	r3, [r4, #0]
 800fee2:	bd38      	pop	{r3, r4, r5, pc}
 800fee4:	20017d8c 	.word	0x20017d8c

0800fee8 <__errno>:
 800fee8:	4b01      	ldr	r3, [pc, #4]	@ (800fef0 <__errno+0x8>)
 800feea:	6818      	ldr	r0, [r3, #0]
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	2000040c 	.word	0x2000040c

0800fef4 <__libc_init_array>:
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	4d0d      	ldr	r5, [pc, #52]	@ (800ff2c <__libc_init_array+0x38>)
 800fef8:	4c0d      	ldr	r4, [pc, #52]	@ (800ff30 <__libc_init_array+0x3c>)
 800fefa:	1b64      	subs	r4, r4, r5
 800fefc:	10a4      	asrs	r4, r4, #2
 800fefe:	2600      	movs	r6, #0
 800ff00:	42a6      	cmp	r6, r4
 800ff02:	d109      	bne.n	800ff18 <__libc_init_array+0x24>
 800ff04:	4d0b      	ldr	r5, [pc, #44]	@ (800ff34 <__libc_init_array+0x40>)
 800ff06:	4c0c      	ldr	r4, [pc, #48]	@ (800ff38 <__libc_init_array+0x44>)
 800ff08:	f002 fbf4 	bl	80126f4 <_init>
 800ff0c:	1b64      	subs	r4, r4, r5
 800ff0e:	10a4      	asrs	r4, r4, #2
 800ff10:	2600      	movs	r6, #0
 800ff12:	42a6      	cmp	r6, r4
 800ff14:	d105      	bne.n	800ff22 <__libc_init_array+0x2e>
 800ff16:	bd70      	pop	{r4, r5, r6, pc}
 800ff18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff1c:	4798      	blx	r3
 800ff1e:	3601      	adds	r6, #1
 800ff20:	e7ee      	b.n	800ff00 <__libc_init_array+0xc>
 800ff22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff26:	4798      	blx	r3
 800ff28:	3601      	adds	r6, #1
 800ff2a:	e7f2      	b.n	800ff12 <__libc_init_array+0x1e>
 800ff2c:	0801392c 	.word	0x0801392c
 800ff30:	0801392c 	.word	0x0801392c
 800ff34:	0801392c 	.word	0x0801392c
 800ff38:	08013930 	.word	0x08013930

0800ff3c <__retarget_lock_init_recursive>:
 800ff3c:	4770      	bx	lr

0800ff3e <__retarget_lock_acquire_recursive>:
 800ff3e:	4770      	bx	lr

0800ff40 <__retarget_lock_release_recursive>:
 800ff40:	4770      	bx	lr

0800ff42 <memcpy>:
 800ff42:	440a      	add	r2, r1
 800ff44:	4291      	cmp	r1, r2
 800ff46:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff4a:	d100      	bne.n	800ff4e <memcpy+0xc>
 800ff4c:	4770      	bx	lr
 800ff4e:	b510      	push	{r4, lr}
 800ff50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff58:	4291      	cmp	r1, r2
 800ff5a:	d1f9      	bne.n	800ff50 <memcpy+0xe>
 800ff5c:	bd10      	pop	{r4, pc}
	...

0800ff60 <modf>:
 800ff60:	b570      	push	{r4, r5, r6, lr}
 800ff62:	4604      	mov	r4, r0
 800ff64:	460d      	mov	r5, r1
 800ff66:	ed2d 8b02 	vpush	{d8}
 800ff6a:	ec45 4b18 	vmov	d8, r4, r5
 800ff6e:	ee18 5a90 	vmov	r5, s17
 800ff72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ff76:	4614      	mov	r4, r2
 800ff78:	f2a3 32ff 	subw	r2, r3, #1023	@ 0x3ff
 800ff7c:	2a13      	cmp	r2, #19
 800ff7e:	ee18 6a10 	vmov	r6, s16
 800ff82:	dc22      	bgt.n	800ffca <modf+0x6a>
 800ff84:	2a00      	cmp	r2, #0
 800ff86:	da09      	bge.n	800ff9c <modf+0x3c>
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 800ff8e:	e9c4 2300 	strd	r2, r3, [r4]
 800ff92:	ec51 0b18 	vmov	r0, r1, d8
 800ff96:	ecbd 8b02 	vpop	{d8}
 800ff9a:	bd70      	pop	{r4, r5, r6, pc}
 800ff9c:	491a      	ldr	r1, [pc, #104]	@ (8010008 <modf+0xa8>)
 800ff9e:	4111      	asrs	r1, r2
 800ffa0:	ea05 0301 	and.w	r3, r5, r1
 800ffa4:	ea53 0006 	orrs.w	r0, r3, r6
 800ffa8:	d105      	bne.n	800ffb6 <modf+0x56>
 800ffaa:	ed84 8b00 	vstr	d8, [r4]
 800ffae:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	e018      	b.n	800ffe8 <modf+0x88>
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	ea25 0301 	bic.w	r3, r5, r1
 800ffbc:	ec43 2b17 	vmov	d7, r2, r3
 800ffc0:	e9c4 2300 	strd	r2, r3, [r4]
 800ffc4:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ffc8:	e7e3      	b.n	800ff92 <modf+0x32>
 800ffca:	2a33      	cmp	r2, #51	@ 0x33
 800ffcc:	dd0f      	ble.n	800ffee <modf+0x8e>
 800ffce:	ed84 8b00 	vstr	d8, [r4]
 800ffd2:	f001 ff7f 	bl	8011ed4 <__fpclassifyd>
 800ffd6:	b920      	cbnz	r0, 800ffe2 <modf+0x82>
 800ffd8:	ee38 8b08 	vadd.f64	d8, d8, d8
 800ffdc:	ed84 8b00 	vstr	d8, [r4]
 800ffe0:	e7d7      	b.n	800ff92 <modf+0x32>
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 800ffe8:	ec43 2b18 	vmov	d8, r2, r3
 800ffec:	e7d1      	b.n	800ff92 <modf+0x32>
 800ffee:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800fff2:	f04f 31ff 	mov.w	r1, #4294967295
 800fff6:	40d9      	lsrs	r1, r3
 800fff8:	ea16 0001 	ands.w	r0, r6, r1
 800fffc:	d0d5      	beq.n	800ffaa <modf+0x4a>
 800fffe:	462b      	mov	r3, r5
 8010000:	ea26 0201 	bic.w	r2, r6, r1
 8010004:	e7da      	b.n	800ffbc <modf+0x5c>
 8010006:	bf00      	nop
 8010008:	000fffff 	.word	0x000fffff

0801000c <quorem>:
 801000c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010010:	6903      	ldr	r3, [r0, #16]
 8010012:	690c      	ldr	r4, [r1, #16]
 8010014:	42a3      	cmp	r3, r4
 8010016:	4607      	mov	r7, r0
 8010018:	db7e      	blt.n	8010118 <quorem+0x10c>
 801001a:	3c01      	subs	r4, #1
 801001c:	f101 0814 	add.w	r8, r1, #20
 8010020:	00a3      	lsls	r3, r4, #2
 8010022:	f100 0514 	add.w	r5, r0, #20
 8010026:	9300      	str	r3, [sp, #0]
 8010028:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801002c:	9301      	str	r3, [sp, #4]
 801002e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010036:	3301      	adds	r3, #1
 8010038:	429a      	cmp	r2, r3
 801003a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801003e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010042:	d32e      	bcc.n	80100a2 <quorem+0x96>
 8010044:	f04f 0a00 	mov.w	sl, #0
 8010048:	46c4      	mov	ip, r8
 801004a:	46ae      	mov	lr, r5
 801004c:	46d3      	mov	fp, sl
 801004e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010052:	b298      	uxth	r0, r3
 8010054:	fb06 a000 	mla	r0, r6, r0, sl
 8010058:	0c02      	lsrs	r2, r0, #16
 801005a:	0c1b      	lsrs	r3, r3, #16
 801005c:	fb06 2303 	mla	r3, r6, r3, r2
 8010060:	f8de 2000 	ldr.w	r2, [lr]
 8010064:	b280      	uxth	r0, r0
 8010066:	b292      	uxth	r2, r2
 8010068:	1a12      	subs	r2, r2, r0
 801006a:	445a      	add	r2, fp
 801006c:	f8de 0000 	ldr.w	r0, [lr]
 8010070:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010074:	b29b      	uxth	r3, r3
 8010076:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801007a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801007e:	b292      	uxth	r2, r2
 8010080:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010084:	45e1      	cmp	r9, ip
 8010086:	f84e 2b04 	str.w	r2, [lr], #4
 801008a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801008e:	d2de      	bcs.n	801004e <quorem+0x42>
 8010090:	9b00      	ldr	r3, [sp, #0]
 8010092:	58eb      	ldr	r3, [r5, r3]
 8010094:	b92b      	cbnz	r3, 80100a2 <quorem+0x96>
 8010096:	9b01      	ldr	r3, [sp, #4]
 8010098:	3b04      	subs	r3, #4
 801009a:	429d      	cmp	r5, r3
 801009c:	461a      	mov	r2, r3
 801009e:	d32f      	bcc.n	8010100 <quorem+0xf4>
 80100a0:	613c      	str	r4, [r7, #16]
 80100a2:	4638      	mov	r0, r7
 80100a4:	f001 f856 	bl	8011154 <__mcmp>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	db25      	blt.n	80100f8 <quorem+0xec>
 80100ac:	4629      	mov	r1, r5
 80100ae:	2000      	movs	r0, #0
 80100b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80100b4:	f8d1 c000 	ldr.w	ip, [r1]
 80100b8:	fa1f fe82 	uxth.w	lr, r2
 80100bc:	fa1f f38c 	uxth.w	r3, ip
 80100c0:	eba3 030e 	sub.w	r3, r3, lr
 80100c4:	4403      	add	r3, r0
 80100c6:	0c12      	lsrs	r2, r2, #16
 80100c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80100cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100d6:	45c1      	cmp	r9, r8
 80100d8:	f841 3b04 	str.w	r3, [r1], #4
 80100dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80100e0:	d2e6      	bcs.n	80100b0 <quorem+0xa4>
 80100e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100ea:	b922      	cbnz	r2, 80100f6 <quorem+0xea>
 80100ec:	3b04      	subs	r3, #4
 80100ee:	429d      	cmp	r5, r3
 80100f0:	461a      	mov	r2, r3
 80100f2:	d30b      	bcc.n	801010c <quorem+0x100>
 80100f4:	613c      	str	r4, [r7, #16]
 80100f6:	3601      	adds	r6, #1
 80100f8:	4630      	mov	r0, r6
 80100fa:	b003      	add	sp, #12
 80100fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010100:	6812      	ldr	r2, [r2, #0]
 8010102:	3b04      	subs	r3, #4
 8010104:	2a00      	cmp	r2, #0
 8010106:	d1cb      	bne.n	80100a0 <quorem+0x94>
 8010108:	3c01      	subs	r4, #1
 801010a:	e7c6      	b.n	801009a <quorem+0x8e>
 801010c:	6812      	ldr	r2, [r2, #0]
 801010e:	3b04      	subs	r3, #4
 8010110:	2a00      	cmp	r2, #0
 8010112:	d1ef      	bne.n	80100f4 <quorem+0xe8>
 8010114:	3c01      	subs	r4, #1
 8010116:	e7ea      	b.n	80100ee <quorem+0xe2>
 8010118:	2000      	movs	r0, #0
 801011a:	e7ee      	b.n	80100fa <quorem+0xee>
 801011c:	0000      	movs	r0, r0
	...

08010120 <_dtoa_r>:
 8010120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010124:	ed2d 8b02 	vpush	{d8}
 8010128:	69c7      	ldr	r7, [r0, #28]
 801012a:	b08f      	sub	sp, #60	@ 0x3c
 801012c:	4614      	mov	r4, r2
 801012e:	461d      	mov	r5, r3
 8010130:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010134:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8010136:	4681      	mov	r9, r0
 8010138:	b97f      	cbnz	r7, 801015a <_dtoa_r+0x3a>
 801013a:	2010      	movs	r0, #16
 801013c:	f7fe ff38 	bl	800efb0 <malloc>
 8010140:	4602      	mov	r2, r0
 8010142:	f8c9 001c 	str.w	r0, [r9, #28]
 8010146:	b920      	cbnz	r0, 8010152 <_dtoa_r+0x32>
 8010148:	4ba1      	ldr	r3, [pc, #644]	@ (80103d0 <_dtoa_r+0x2b0>)
 801014a:	21ef      	movs	r1, #239	@ 0xef
 801014c:	48a1      	ldr	r0, [pc, #644]	@ (80103d4 <_dtoa_r+0x2b4>)
 801014e:	f001 fee3 	bl	8011f18 <__assert_func>
 8010152:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010156:	6007      	str	r7, [r0, #0]
 8010158:	60c7      	str	r7, [r0, #12]
 801015a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801015e:	6819      	ldr	r1, [r3, #0]
 8010160:	b159      	cbz	r1, 801017a <_dtoa_r+0x5a>
 8010162:	685a      	ldr	r2, [r3, #4]
 8010164:	604a      	str	r2, [r1, #4]
 8010166:	2301      	movs	r3, #1
 8010168:	4093      	lsls	r3, r2
 801016a:	608b      	str	r3, [r1, #8]
 801016c:	4648      	mov	r0, r9
 801016e:	f000 fdbf 	bl	8010cf0 <_Bfree>
 8010172:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010176:	2200      	movs	r2, #0
 8010178:	601a      	str	r2, [r3, #0]
 801017a:	1e2b      	subs	r3, r5, #0
 801017c:	bfbb      	ittet	lt
 801017e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010182:	9305      	strlt	r3, [sp, #20]
 8010184:	2300      	movge	r3, #0
 8010186:	2201      	movlt	r2, #1
 8010188:	bfac      	ite	ge
 801018a:	6033      	strge	r3, [r6, #0]
 801018c:	6032      	strlt	r2, [r6, #0]
 801018e:	4b92      	ldr	r3, [pc, #584]	@ (80103d8 <_dtoa_r+0x2b8>)
 8010190:	9e05      	ldr	r6, [sp, #20]
 8010192:	43b3      	bics	r3, r6
 8010194:	d110      	bne.n	80101b8 <_dtoa_r+0x98>
 8010196:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010198:	f242 730f 	movw	r3, #9999	@ 0x270f
 801019c:	6013      	str	r3, [r2, #0]
 801019e:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80101a2:	4323      	orrs	r3, r4
 80101a4:	f000 84e9 	beq.w	8010b7a <_dtoa_r+0xa5a>
 80101a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80101aa:	4f8c      	ldr	r7, [pc, #560]	@ (80103dc <_dtoa_r+0x2bc>)
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f000 84eb 	beq.w	8010b88 <_dtoa_r+0xa68>
 80101b2:	1cfb      	adds	r3, r7, #3
 80101b4:	f000 bce6 	b.w	8010b84 <_dtoa_r+0xa64>
 80101b8:	ed9d 8b04 	vldr	d8, [sp, #16]
 80101bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80101c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c4:	d10a      	bne.n	80101dc <_dtoa_r+0xbc>
 80101c6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80101c8:	2301      	movs	r3, #1
 80101ca:	6013      	str	r3, [r2, #0]
 80101cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80101ce:	b113      	cbz	r3, 80101d6 <_dtoa_r+0xb6>
 80101d0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80101d2:	4b83      	ldr	r3, [pc, #524]	@ (80103e0 <_dtoa_r+0x2c0>)
 80101d4:	6013      	str	r3, [r2, #0]
 80101d6:	4f83      	ldr	r7, [pc, #524]	@ (80103e4 <_dtoa_r+0x2c4>)
 80101d8:	f000 bcd6 	b.w	8010b88 <_dtoa_r+0xa68>
 80101dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80101de:	9301      	str	r3, [sp, #4]
 80101e0:	ab0d      	add	r3, sp, #52	@ 0x34
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	4648      	mov	r0, r9
 80101e6:	ec53 2b18 	vmov	r2, r3, d8
 80101ea:	f001 f863 	bl	80112b4 <__d2b>
 80101ee:	f3c6 520a 	ubfx	r2, r6, #20, #11
 80101f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101f4:	9002      	str	r0, [sp, #8]
 80101f6:	2a00      	cmp	r2, #0
 80101f8:	d045      	beq.n	8010286 <_dtoa_r+0x166>
 80101fa:	eeb0 7b48 	vmov.f64	d7, d8
 80101fe:	ee18 1a90 	vmov	r1, s17
 8010202:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010206:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801020a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801020e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010212:	2500      	movs	r5, #0
 8010214:	ee07 1a90 	vmov	s15, r1
 8010218:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801021c:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80103b8 <_dtoa_r+0x298>
 8010220:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010224:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80103c0 <_dtoa_r+0x2a0>
 8010228:	eea7 6b05 	vfma.f64	d6, d7, d5
 801022c:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80103c8 <_dtoa_r+0x2a8>
 8010230:	ee07 2a90 	vmov	s15, r2
 8010234:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010238:	eeb0 7b46 	vmov.f64	d7, d6
 801023c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010240:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010244:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024c:	ee16 8a90 	vmov	r8, s13
 8010250:	d508      	bpl.n	8010264 <_dtoa_r+0x144>
 8010252:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010256:	eeb4 6b47 	vcmp.f64	d6, d7
 801025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801025e:	bf18      	it	ne
 8010260:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010264:	f1b8 0f16 	cmp.w	r8, #22
 8010268:	d82b      	bhi.n	80102c2 <_dtoa_r+0x1a2>
 801026a:	495f      	ldr	r1, [pc, #380]	@ (80103e8 <_dtoa_r+0x2c8>)
 801026c:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010270:	ed91 7b00 	vldr	d7, [r1]
 8010274:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027c:	d501      	bpl.n	8010282 <_dtoa_r+0x162>
 801027e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010282:	2100      	movs	r1, #0
 8010284:	e01e      	b.n	80102c4 <_dtoa_r+0x1a4>
 8010286:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010288:	441a      	add	r2, r3
 801028a:	f202 4132 	addw	r1, r2, #1074	@ 0x432
 801028e:	2920      	cmp	r1, #32
 8010290:	bfc1      	itttt	gt
 8010292:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010296:	408e      	lslgt	r6, r1
 8010298:	f202 4112 	addwgt	r1, r2, #1042	@ 0x412
 801029c:	fa24 f101 	lsrgt.w	r1, r4, r1
 80102a0:	bfd6      	itet	le
 80102a2:	f1c1 0120 	rsble	r1, r1, #32
 80102a6:	4331      	orrgt	r1, r6
 80102a8:	fa04 f101 	lslle.w	r1, r4, r1
 80102ac:	ee07 1a90 	vmov	s15, r1
 80102b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80102b4:	3a01      	subs	r2, #1
 80102b6:	ee17 1a90 	vmov	r1, s15
 80102ba:	2501      	movs	r5, #1
 80102bc:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80102c0:	e7a8      	b.n	8010214 <_dtoa_r+0xf4>
 80102c2:	2101      	movs	r1, #1
 80102c4:	1a9b      	subs	r3, r3, r2
 80102c6:	1e5a      	subs	r2, r3, #1
 80102c8:	bf45      	ittet	mi
 80102ca:	f1c3 0301 	rsbmi	r3, r3, #1
 80102ce:	9303      	strmi	r3, [sp, #12]
 80102d0:	2300      	movpl	r3, #0
 80102d2:	2300      	movmi	r3, #0
 80102d4:	9207      	str	r2, [sp, #28]
 80102d6:	bf54      	ite	pl
 80102d8:	9303      	strpl	r3, [sp, #12]
 80102da:	9307      	strmi	r3, [sp, #28]
 80102dc:	f1b8 0f00 	cmp.w	r8, #0
 80102e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80102e2:	db18      	blt.n	8010316 <_dtoa_r+0x1f6>
 80102e4:	9b07      	ldr	r3, [sp, #28]
 80102e6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80102ea:	4443      	add	r3, r8
 80102ec:	9307      	str	r3, [sp, #28]
 80102ee:	2300      	movs	r3, #0
 80102f0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80102f2:	2a09      	cmp	r2, #9
 80102f4:	d845      	bhi.n	8010382 <_dtoa_r+0x262>
 80102f6:	2a05      	cmp	r2, #5
 80102f8:	bfc4      	itt	gt
 80102fa:	3a04      	subgt	r2, #4
 80102fc:	921a      	strgt	r2, [sp, #104]	@ 0x68
 80102fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010300:	f1a2 0202 	sub.w	r2, r2, #2
 8010304:	bfcc      	ite	gt
 8010306:	2400      	movgt	r4, #0
 8010308:	2401      	movle	r4, #1
 801030a:	2a03      	cmp	r2, #3
 801030c:	d844      	bhi.n	8010398 <_dtoa_r+0x278>
 801030e:	e8df f002 	tbb	[pc, r2]
 8010312:	3634      	.short	0x3634
 8010314:	0b17      	.short	0x0b17
 8010316:	9b03      	ldr	r3, [sp, #12]
 8010318:	2200      	movs	r2, #0
 801031a:	eba3 0308 	sub.w	r3, r3, r8
 801031e:	9303      	str	r3, [sp, #12]
 8010320:	9209      	str	r2, [sp, #36]	@ 0x24
 8010322:	f1c8 0300 	rsb	r3, r8, #0
 8010326:	e7e3      	b.n	80102f0 <_dtoa_r+0x1d0>
 8010328:	2201      	movs	r2, #1
 801032a:	9208      	str	r2, [sp, #32]
 801032c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801032e:	eb08 0b02 	add.w	fp, r8, r2
 8010332:	f10b 0a01 	add.w	sl, fp, #1
 8010336:	4652      	mov	r2, sl
 8010338:	2a01      	cmp	r2, #1
 801033a:	bfb8      	it	lt
 801033c:	2201      	movlt	r2, #1
 801033e:	e006      	b.n	801034e <_dtoa_r+0x22e>
 8010340:	2201      	movs	r2, #1
 8010342:	9208      	str	r2, [sp, #32]
 8010344:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010346:	2a00      	cmp	r2, #0
 8010348:	dd29      	ble.n	801039e <_dtoa_r+0x27e>
 801034a:	4693      	mov	fp, r2
 801034c:	4692      	mov	sl, r2
 801034e:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010352:	2100      	movs	r1, #0
 8010354:	2004      	movs	r0, #4
 8010356:	f100 0614 	add.w	r6, r0, #20
 801035a:	4296      	cmp	r6, r2
 801035c:	d926      	bls.n	80103ac <_dtoa_r+0x28c>
 801035e:	6079      	str	r1, [r7, #4]
 8010360:	4648      	mov	r0, r9
 8010362:	9306      	str	r3, [sp, #24]
 8010364:	f000 fc84 	bl	8010c70 <_Balloc>
 8010368:	9b06      	ldr	r3, [sp, #24]
 801036a:	4607      	mov	r7, r0
 801036c:	2800      	cmp	r0, #0
 801036e:	d13f      	bne.n	80103f0 <_dtoa_r+0x2d0>
 8010370:	4b1e      	ldr	r3, [pc, #120]	@ (80103ec <_dtoa_r+0x2cc>)
 8010372:	4602      	mov	r2, r0
 8010374:	f240 11af 	movw	r1, #431	@ 0x1af
 8010378:	e6e8      	b.n	801014c <_dtoa_r+0x2c>
 801037a:	2200      	movs	r2, #0
 801037c:	e7e1      	b.n	8010342 <_dtoa_r+0x222>
 801037e:	2200      	movs	r2, #0
 8010380:	e7d3      	b.n	801032a <_dtoa_r+0x20a>
 8010382:	2401      	movs	r4, #1
 8010384:	2200      	movs	r2, #0
 8010386:	921a      	str	r2, [sp, #104]	@ 0x68
 8010388:	9408      	str	r4, [sp, #32]
 801038a:	f04f 3bff 	mov.w	fp, #4294967295
 801038e:	2100      	movs	r1, #0
 8010390:	46da      	mov	sl, fp
 8010392:	2212      	movs	r2, #18
 8010394:	911b      	str	r1, [sp, #108]	@ 0x6c
 8010396:	e7da      	b.n	801034e <_dtoa_r+0x22e>
 8010398:	2201      	movs	r2, #1
 801039a:	9208      	str	r2, [sp, #32]
 801039c:	e7f5      	b.n	801038a <_dtoa_r+0x26a>
 801039e:	f04f 0b01 	mov.w	fp, #1
 80103a2:	46da      	mov	sl, fp
 80103a4:	465a      	mov	r2, fp
 80103a6:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 80103aa:	e7d0      	b.n	801034e <_dtoa_r+0x22e>
 80103ac:	3101      	adds	r1, #1
 80103ae:	0040      	lsls	r0, r0, #1
 80103b0:	e7d1      	b.n	8010356 <_dtoa_r+0x236>
 80103b2:	bf00      	nop
 80103b4:	f3af 8000 	nop.w
 80103b8:	636f4361 	.word	0x636f4361
 80103bc:	3fd287a7 	.word	0x3fd287a7
 80103c0:	8b60c8b3 	.word	0x8b60c8b3
 80103c4:	3fc68a28 	.word	0x3fc68a28
 80103c8:	509f79fb 	.word	0x509f79fb
 80103cc:	3fd34413 	.word	0x3fd34413
 80103d0:	080135d3 	.word	0x080135d3
 80103d4:	080135ea 	.word	0x080135ea
 80103d8:	7ff00000 	.word	0x7ff00000
 80103dc:	080135cf 	.word	0x080135cf
 80103e0:	080136d4 	.word	0x080136d4
 80103e4:	080136d3 	.word	0x080136d3
 80103e8:	08013758 	.word	0x08013758
 80103ec:	08013642 	.word	0x08013642
 80103f0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80103f4:	f1ba 0f0e 	cmp.w	sl, #14
 80103f8:	6010      	str	r0, [r2, #0]
 80103fa:	d86e      	bhi.n	80104da <_dtoa_r+0x3ba>
 80103fc:	2c00      	cmp	r4, #0
 80103fe:	d06c      	beq.n	80104da <_dtoa_r+0x3ba>
 8010400:	f1b8 0f00 	cmp.w	r8, #0
 8010404:	f340 80b4 	ble.w	8010570 <_dtoa_r+0x450>
 8010408:	4ac8      	ldr	r2, [pc, #800]	@ (801072c <_dtoa_r+0x60c>)
 801040a:	f008 010f 	and.w	r1, r8, #15
 801040e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010412:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010416:	ed92 7b00 	vldr	d7, [r2]
 801041a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801041e:	f000 809b 	beq.w	8010558 <_dtoa_r+0x438>
 8010422:	4ac3      	ldr	r2, [pc, #780]	@ (8010730 <_dtoa_r+0x610>)
 8010424:	ed92 6b08 	vldr	d6, [r2, #32]
 8010428:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801042c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010430:	f001 010f 	and.w	r1, r1, #15
 8010434:	2203      	movs	r2, #3
 8010436:	48be      	ldr	r0, [pc, #760]	@ (8010730 <_dtoa_r+0x610>)
 8010438:	2900      	cmp	r1, #0
 801043a:	f040 808f 	bne.w	801055c <_dtoa_r+0x43c>
 801043e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8010442:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010446:	ed8d 7b04 	vstr	d7, [sp, #16]
 801044a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801044c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010450:	2900      	cmp	r1, #0
 8010452:	f000 80b3 	beq.w	80105bc <_dtoa_r+0x49c>
 8010456:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801045a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801045e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010462:	f140 80ab 	bpl.w	80105bc <_dtoa_r+0x49c>
 8010466:	f1ba 0f00 	cmp.w	sl, #0
 801046a:	f000 80a7 	beq.w	80105bc <_dtoa_r+0x49c>
 801046e:	f1bb 0f00 	cmp.w	fp, #0
 8010472:	dd30      	ble.n	80104d6 <_dtoa_r+0x3b6>
 8010474:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010478:	ee27 7b06 	vmul.f64	d7, d7, d6
 801047c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010480:	f108 31ff 	add.w	r1, r8, #4294967295
 8010484:	9106      	str	r1, [sp, #24]
 8010486:	3201      	adds	r2, #1
 8010488:	465c      	mov	r4, fp
 801048a:	ed9d 6b04 	vldr	d6, [sp, #16]
 801048e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010492:	ee07 2a90 	vmov	s15, r2
 8010496:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801049a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801049e:	ee15 2a90 	vmov	r2, s11
 80104a2:	ec51 0b15 	vmov	r0, r1, d5
 80104a6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80104aa:	2c00      	cmp	r4, #0
 80104ac:	f040 808a 	bne.w	80105c4 <_dtoa_r+0x4a4>
 80104b0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80104b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80104b8:	ec41 0b17 	vmov	d7, r0, r1
 80104bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80104c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104c4:	f300 826a 	bgt.w	801099c <_dtoa_r+0x87c>
 80104c8:	eeb1 7b47 	vneg.f64	d7, d7
 80104cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80104d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d4:	d423      	bmi.n	801051e <_dtoa_r+0x3fe>
 80104d6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80104da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80104dc:	2a00      	cmp	r2, #0
 80104de:	f2c0 8129 	blt.w	8010734 <_dtoa_r+0x614>
 80104e2:	f1b8 0f0e 	cmp.w	r8, #14
 80104e6:	f300 8125 	bgt.w	8010734 <_dtoa_r+0x614>
 80104ea:	4b90      	ldr	r3, [pc, #576]	@ (801072c <_dtoa_r+0x60c>)
 80104ec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80104f0:	ed93 6b00 	vldr	d6, [r3]
 80104f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f280 80c8 	bge.w	801068c <_dtoa_r+0x56c>
 80104fc:	f1ba 0f00 	cmp.w	sl, #0
 8010500:	f300 80c4 	bgt.w	801068c <_dtoa_r+0x56c>
 8010504:	d10b      	bne.n	801051e <_dtoa_r+0x3fe>
 8010506:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801050a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801050e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010512:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801051a:	f2c0 823c 	blt.w	8010996 <_dtoa_r+0x876>
 801051e:	2400      	movs	r4, #0
 8010520:	4625      	mov	r5, r4
 8010522:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010524:	43db      	mvns	r3, r3
 8010526:	9306      	str	r3, [sp, #24]
 8010528:	463e      	mov	r6, r7
 801052a:	f04f 0800 	mov.w	r8, #0
 801052e:	4621      	mov	r1, r4
 8010530:	4648      	mov	r0, r9
 8010532:	f000 fbdd 	bl	8010cf0 <_Bfree>
 8010536:	2d00      	cmp	r5, #0
 8010538:	f000 80a2 	beq.w	8010680 <_dtoa_r+0x560>
 801053c:	f1b8 0f00 	cmp.w	r8, #0
 8010540:	d005      	beq.n	801054e <_dtoa_r+0x42e>
 8010542:	45a8      	cmp	r8, r5
 8010544:	d003      	beq.n	801054e <_dtoa_r+0x42e>
 8010546:	4641      	mov	r1, r8
 8010548:	4648      	mov	r0, r9
 801054a:	f000 fbd1 	bl	8010cf0 <_Bfree>
 801054e:	4629      	mov	r1, r5
 8010550:	4648      	mov	r0, r9
 8010552:	f000 fbcd 	bl	8010cf0 <_Bfree>
 8010556:	e093      	b.n	8010680 <_dtoa_r+0x560>
 8010558:	2202      	movs	r2, #2
 801055a:	e76c      	b.n	8010436 <_dtoa_r+0x316>
 801055c:	07cc      	lsls	r4, r1, #31
 801055e:	d504      	bpl.n	801056a <_dtoa_r+0x44a>
 8010560:	ed90 6b00 	vldr	d6, [r0]
 8010564:	3201      	adds	r2, #1
 8010566:	ee27 7b06 	vmul.f64	d7, d7, d6
 801056a:	1049      	asrs	r1, r1, #1
 801056c:	3008      	adds	r0, #8
 801056e:	e763      	b.n	8010438 <_dtoa_r+0x318>
 8010570:	d022      	beq.n	80105b8 <_dtoa_r+0x498>
 8010572:	f1c8 0100 	rsb	r1, r8, #0
 8010576:	4a6d      	ldr	r2, [pc, #436]	@ (801072c <_dtoa_r+0x60c>)
 8010578:	f001 000f 	and.w	r0, r1, #15
 801057c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010580:	ed92 7b00 	vldr	d7, [r2]
 8010584:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010588:	ed8d 7b04 	vstr	d7, [sp, #16]
 801058c:	4868      	ldr	r0, [pc, #416]	@ (8010730 <_dtoa_r+0x610>)
 801058e:	1109      	asrs	r1, r1, #4
 8010590:	2400      	movs	r4, #0
 8010592:	2202      	movs	r2, #2
 8010594:	b929      	cbnz	r1, 80105a2 <_dtoa_r+0x482>
 8010596:	2c00      	cmp	r4, #0
 8010598:	f43f af57 	beq.w	801044a <_dtoa_r+0x32a>
 801059c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80105a0:	e753      	b.n	801044a <_dtoa_r+0x32a>
 80105a2:	07ce      	lsls	r6, r1, #31
 80105a4:	d505      	bpl.n	80105b2 <_dtoa_r+0x492>
 80105a6:	ed90 6b00 	vldr	d6, [r0]
 80105aa:	3201      	adds	r2, #1
 80105ac:	2401      	movs	r4, #1
 80105ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80105b2:	1049      	asrs	r1, r1, #1
 80105b4:	3008      	adds	r0, #8
 80105b6:	e7ed      	b.n	8010594 <_dtoa_r+0x474>
 80105b8:	2202      	movs	r2, #2
 80105ba:	e746      	b.n	801044a <_dtoa_r+0x32a>
 80105bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80105c0:	4654      	mov	r4, sl
 80105c2:	e762      	b.n	801048a <_dtoa_r+0x36a>
 80105c4:	4a59      	ldr	r2, [pc, #356]	@ (801072c <_dtoa_r+0x60c>)
 80105c6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80105ca:	ed12 4b02 	vldr	d4, [r2, #-8]
 80105ce:	9a08      	ldr	r2, [sp, #32]
 80105d0:	ec41 0b17 	vmov	d7, r0, r1
 80105d4:	443c      	add	r4, r7
 80105d6:	b34a      	cbz	r2, 801062c <_dtoa_r+0x50c>
 80105d8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80105dc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80105e0:	463e      	mov	r6, r7
 80105e2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80105e6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80105ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80105ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80105f2:	ee14 2a90 	vmov	r2, s9
 80105f6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80105fa:	3230      	adds	r2, #48	@ 0x30
 80105fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010600:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010608:	f806 2b01 	strb.w	r2, [r6], #1
 801060c:	d438      	bmi.n	8010680 <_dtoa_r+0x560>
 801060e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010612:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801061a:	d46e      	bmi.n	80106fa <_dtoa_r+0x5da>
 801061c:	42a6      	cmp	r6, r4
 801061e:	f43f af5a 	beq.w	80104d6 <_dtoa_r+0x3b6>
 8010622:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010626:	ee26 6b03 	vmul.f64	d6, d6, d3
 801062a:	e7e0      	b.n	80105ee <_dtoa_r+0x4ce>
 801062c:	4621      	mov	r1, r4
 801062e:	463e      	mov	r6, r7
 8010630:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010634:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010638:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801063c:	ee14 2a90 	vmov	r2, s9
 8010640:	3230      	adds	r2, #48	@ 0x30
 8010642:	f806 2b01 	strb.w	r2, [r6], #1
 8010646:	42a6      	cmp	r6, r4
 8010648:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801064c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010650:	d119      	bne.n	8010686 <_dtoa_r+0x566>
 8010652:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010656:	ee37 4b05 	vadd.f64	d4, d7, d5
 801065a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801065e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010662:	dc4a      	bgt.n	80106fa <_dtoa_r+0x5da>
 8010664:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010668:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801066c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010670:	f57f af31 	bpl.w	80104d6 <_dtoa_r+0x3b6>
 8010674:	460e      	mov	r6, r1
 8010676:	3901      	subs	r1, #1
 8010678:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801067c:	2b30      	cmp	r3, #48	@ 0x30
 801067e:	d0f9      	beq.n	8010674 <_dtoa_r+0x554>
 8010680:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010684:	e027      	b.n	80106d6 <_dtoa_r+0x5b6>
 8010686:	ee26 6b03 	vmul.f64	d6, d6, d3
 801068a:	e7d5      	b.n	8010638 <_dtoa_r+0x518>
 801068c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010690:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010694:	463e      	mov	r6, r7
 8010696:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801069a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801069e:	ee15 3a10 	vmov	r3, s10
 80106a2:	3330      	adds	r3, #48	@ 0x30
 80106a4:	f806 3b01 	strb.w	r3, [r6], #1
 80106a8:	1bf3      	subs	r3, r6, r7
 80106aa:	459a      	cmp	sl, r3
 80106ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80106b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80106b4:	d132      	bne.n	801071c <_dtoa_r+0x5fc>
 80106b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80106ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80106be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c2:	dc18      	bgt.n	80106f6 <_dtoa_r+0x5d6>
 80106c4:	eeb4 7b46 	vcmp.f64	d7, d6
 80106c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106cc:	d103      	bne.n	80106d6 <_dtoa_r+0x5b6>
 80106ce:	ee15 3a10 	vmov	r3, s10
 80106d2:	07db      	lsls	r3, r3, #31
 80106d4:	d40f      	bmi.n	80106f6 <_dtoa_r+0x5d6>
 80106d6:	9902      	ldr	r1, [sp, #8]
 80106d8:	4648      	mov	r0, r9
 80106da:	f000 fb09 	bl	8010cf0 <_Bfree>
 80106de:	2300      	movs	r3, #0
 80106e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80106e2:	7033      	strb	r3, [r6, #0]
 80106e4:	f108 0301 	add.w	r3, r8, #1
 80106e8:	6013      	str	r3, [r2, #0]
 80106ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f000 824b 	beq.w	8010b88 <_dtoa_r+0xa68>
 80106f2:	601e      	str	r6, [r3, #0]
 80106f4:	e248      	b.n	8010b88 <_dtoa_r+0xa68>
 80106f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80106fa:	4633      	mov	r3, r6
 80106fc:	461e      	mov	r6, r3
 80106fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010702:	2a39      	cmp	r2, #57	@ 0x39
 8010704:	d106      	bne.n	8010714 <_dtoa_r+0x5f4>
 8010706:	429f      	cmp	r7, r3
 8010708:	d1f8      	bne.n	80106fc <_dtoa_r+0x5dc>
 801070a:	9a06      	ldr	r2, [sp, #24]
 801070c:	3201      	adds	r2, #1
 801070e:	9206      	str	r2, [sp, #24]
 8010710:	2230      	movs	r2, #48	@ 0x30
 8010712:	703a      	strb	r2, [r7, #0]
 8010714:	781a      	ldrb	r2, [r3, #0]
 8010716:	3201      	adds	r2, #1
 8010718:	701a      	strb	r2, [r3, #0]
 801071a:	e7b1      	b.n	8010680 <_dtoa_r+0x560>
 801071c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010720:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010728:	d1b5      	bne.n	8010696 <_dtoa_r+0x576>
 801072a:	e7d4      	b.n	80106d6 <_dtoa_r+0x5b6>
 801072c:	08013758 	.word	0x08013758
 8010730:	08013730 	.word	0x08013730
 8010734:	9908      	ldr	r1, [sp, #32]
 8010736:	2900      	cmp	r1, #0
 8010738:	f000 80e9 	beq.w	801090e <_dtoa_r+0x7ee>
 801073c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801073e:	2901      	cmp	r1, #1
 8010740:	f300 80cb 	bgt.w	80108da <_dtoa_r+0x7ba>
 8010744:	2d00      	cmp	r5, #0
 8010746:	f000 80c4 	beq.w	80108d2 <_dtoa_r+0x7b2>
 801074a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801074e:	9e03      	ldr	r6, [sp, #12]
 8010750:	461c      	mov	r4, r3
 8010752:	9306      	str	r3, [sp, #24]
 8010754:	9b03      	ldr	r3, [sp, #12]
 8010756:	4413      	add	r3, r2
 8010758:	9303      	str	r3, [sp, #12]
 801075a:	9b07      	ldr	r3, [sp, #28]
 801075c:	2101      	movs	r1, #1
 801075e:	4413      	add	r3, r2
 8010760:	4648      	mov	r0, r9
 8010762:	9307      	str	r3, [sp, #28]
 8010764:	f000 fb78 	bl	8010e58 <__i2b>
 8010768:	9b06      	ldr	r3, [sp, #24]
 801076a:	4605      	mov	r5, r0
 801076c:	b166      	cbz	r6, 8010788 <_dtoa_r+0x668>
 801076e:	9a07      	ldr	r2, [sp, #28]
 8010770:	2a00      	cmp	r2, #0
 8010772:	dd09      	ble.n	8010788 <_dtoa_r+0x668>
 8010774:	42b2      	cmp	r2, r6
 8010776:	9903      	ldr	r1, [sp, #12]
 8010778:	bfa8      	it	ge
 801077a:	4632      	movge	r2, r6
 801077c:	1a89      	subs	r1, r1, r2
 801077e:	9103      	str	r1, [sp, #12]
 8010780:	9907      	ldr	r1, [sp, #28]
 8010782:	1ab6      	subs	r6, r6, r2
 8010784:	1a8a      	subs	r2, r1, r2
 8010786:	9207      	str	r2, [sp, #28]
 8010788:	b30b      	cbz	r3, 80107ce <_dtoa_r+0x6ae>
 801078a:	9a08      	ldr	r2, [sp, #32]
 801078c:	2a00      	cmp	r2, #0
 801078e:	f000 80c5 	beq.w	801091c <_dtoa_r+0x7fc>
 8010792:	2c00      	cmp	r4, #0
 8010794:	f000 80bf 	beq.w	8010916 <_dtoa_r+0x7f6>
 8010798:	4629      	mov	r1, r5
 801079a:	4622      	mov	r2, r4
 801079c:	4648      	mov	r0, r9
 801079e:	930a      	str	r3, [sp, #40]	@ 0x28
 80107a0:	f000 fc12 	bl	8010fc8 <__pow5mult>
 80107a4:	9a02      	ldr	r2, [sp, #8]
 80107a6:	4601      	mov	r1, r0
 80107a8:	4605      	mov	r5, r0
 80107aa:	4648      	mov	r0, r9
 80107ac:	f000 fb6a 	bl	8010e84 <__multiply>
 80107b0:	9902      	ldr	r1, [sp, #8]
 80107b2:	9006      	str	r0, [sp, #24]
 80107b4:	4648      	mov	r0, r9
 80107b6:	f000 fa9b 	bl	8010cf0 <_Bfree>
 80107ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107bc:	1b1b      	subs	r3, r3, r4
 80107be:	f000 80b0 	beq.w	8010922 <_dtoa_r+0x802>
 80107c2:	9906      	ldr	r1, [sp, #24]
 80107c4:	461a      	mov	r2, r3
 80107c6:	4648      	mov	r0, r9
 80107c8:	f000 fbfe 	bl	8010fc8 <__pow5mult>
 80107cc:	9002      	str	r0, [sp, #8]
 80107ce:	2101      	movs	r1, #1
 80107d0:	4648      	mov	r0, r9
 80107d2:	f000 fb41 	bl	8010e58 <__i2b>
 80107d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107d8:	4604      	mov	r4, r0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	f000 81da 	beq.w	8010b94 <_dtoa_r+0xa74>
 80107e0:	461a      	mov	r2, r3
 80107e2:	4601      	mov	r1, r0
 80107e4:	4648      	mov	r0, r9
 80107e6:	f000 fbef 	bl	8010fc8 <__pow5mult>
 80107ea:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	4604      	mov	r4, r0
 80107f0:	f300 80a0 	bgt.w	8010934 <_dtoa_r+0x814>
 80107f4:	9b04      	ldr	r3, [sp, #16]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	f040 8096 	bne.w	8010928 <_dtoa_r+0x808>
 80107fc:	9b05      	ldr	r3, [sp, #20]
 80107fe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010802:	2a00      	cmp	r2, #0
 8010804:	f040 8092 	bne.w	801092c <_dtoa_r+0x80c>
 8010808:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801080c:	0d12      	lsrs	r2, r2, #20
 801080e:	0512      	lsls	r2, r2, #20
 8010810:	2a00      	cmp	r2, #0
 8010812:	f000 808d 	beq.w	8010930 <_dtoa_r+0x810>
 8010816:	9b03      	ldr	r3, [sp, #12]
 8010818:	3301      	adds	r3, #1
 801081a:	9303      	str	r3, [sp, #12]
 801081c:	9b07      	ldr	r3, [sp, #28]
 801081e:	3301      	adds	r3, #1
 8010820:	9307      	str	r3, [sp, #28]
 8010822:	2301      	movs	r3, #1
 8010824:	930a      	str	r3, [sp, #40]	@ 0x28
 8010826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010828:	2b00      	cmp	r3, #0
 801082a:	f000 81b9 	beq.w	8010ba0 <_dtoa_r+0xa80>
 801082e:	6922      	ldr	r2, [r4, #16]
 8010830:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010834:	6910      	ldr	r0, [r2, #16]
 8010836:	f000 fac3 	bl	8010dc0 <__hi0bits>
 801083a:	f1c0 0020 	rsb	r0, r0, #32
 801083e:	9b07      	ldr	r3, [sp, #28]
 8010840:	4418      	add	r0, r3
 8010842:	f010 001f 	ands.w	r0, r0, #31
 8010846:	f000 8081 	beq.w	801094c <_dtoa_r+0x82c>
 801084a:	f1c0 0220 	rsb	r2, r0, #32
 801084e:	2a04      	cmp	r2, #4
 8010850:	dd73      	ble.n	801093a <_dtoa_r+0x81a>
 8010852:	9b03      	ldr	r3, [sp, #12]
 8010854:	f1c0 001c 	rsb	r0, r0, #28
 8010858:	4403      	add	r3, r0
 801085a:	9303      	str	r3, [sp, #12]
 801085c:	9b07      	ldr	r3, [sp, #28]
 801085e:	4406      	add	r6, r0
 8010860:	4403      	add	r3, r0
 8010862:	9307      	str	r3, [sp, #28]
 8010864:	9b03      	ldr	r3, [sp, #12]
 8010866:	2b00      	cmp	r3, #0
 8010868:	dd05      	ble.n	8010876 <_dtoa_r+0x756>
 801086a:	9902      	ldr	r1, [sp, #8]
 801086c:	461a      	mov	r2, r3
 801086e:	4648      	mov	r0, r9
 8010870:	f000 fc04 	bl	801107c <__lshift>
 8010874:	9002      	str	r0, [sp, #8]
 8010876:	9b07      	ldr	r3, [sp, #28]
 8010878:	2b00      	cmp	r3, #0
 801087a:	dd05      	ble.n	8010888 <_dtoa_r+0x768>
 801087c:	4621      	mov	r1, r4
 801087e:	461a      	mov	r2, r3
 8010880:	4648      	mov	r0, r9
 8010882:	f000 fbfb 	bl	801107c <__lshift>
 8010886:	4604      	mov	r4, r0
 8010888:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801088a:	2b00      	cmp	r3, #0
 801088c:	d060      	beq.n	8010950 <_dtoa_r+0x830>
 801088e:	9802      	ldr	r0, [sp, #8]
 8010890:	4621      	mov	r1, r4
 8010892:	f000 fc5f 	bl	8011154 <__mcmp>
 8010896:	2800      	cmp	r0, #0
 8010898:	da5a      	bge.n	8010950 <_dtoa_r+0x830>
 801089a:	f108 33ff 	add.w	r3, r8, #4294967295
 801089e:	9306      	str	r3, [sp, #24]
 80108a0:	9902      	ldr	r1, [sp, #8]
 80108a2:	2300      	movs	r3, #0
 80108a4:	220a      	movs	r2, #10
 80108a6:	4648      	mov	r0, r9
 80108a8:	f000 fa44 	bl	8010d34 <__multadd>
 80108ac:	9b08      	ldr	r3, [sp, #32]
 80108ae:	9002      	str	r0, [sp, #8]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f000 8177 	beq.w	8010ba4 <_dtoa_r+0xa84>
 80108b6:	4629      	mov	r1, r5
 80108b8:	2300      	movs	r3, #0
 80108ba:	220a      	movs	r2, #10
 80108bc:	4648      	mov	r0, r9
 80108be:	f000 fa39 	bl	8010d34 <__multadd>
 80108c2:	f1bb 0f00 	cmp.w	fp, #0
 80108c6:	4605      	mov	r5, r0
 80108c8:	dc6e      	bgt.n	80109a8 <_dtoa_r+0x888>
 80108ca:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80108cc:	2b02      	cmp	r3, #2
 80108ce:	dc48      	bgt.n	8010962 <_dtoa_r+0x842>
 80108d0:	e06a      	b.n	80109a8 <_dtoa_r+0x888>
 80108d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80108d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80108d8:	e739      	b.n	801074e <_dtoa_r+0x62e>
 80108da:	f10a 34ff 	add.w	r4, sl, #4294967295
 80108de:	42a3      	cmp	r3, r4
 80108e0:	db07      	blt.n	80108f2 <_dtoa_r+0x7d2>
 80108e2:	f1ba 0f00 	cmp.w	sl, #0
 80108e6:	eba3 0404 	sub.w	r4, r3, r4
 80108ea:	db0b      	blt.n	8010904 <_dtoa_r+0x7e4>
 80108ec:	9e03      	ldr	r6, [sp, #12]
 80108ee:	4652      	mov	r2, sl
 80108f0:	e72f      	b.n	8010752 <_dtoa_r+0x632>
 80108f2:	1ae2      	subs	r2, r4, r3
 80108f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108f6:	9e03      	ldr	r6, [sp, #12]
 80108f8:	4413      	add	r3, r2
 80108fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80108fc:	4652      	mov	r2, sl
 80108fe:	4623      	mov	r3, r4
 8010900:	2400      	movs	r4, #0
 8010902:	e726      	b.n	8010752 <_dtoa_r+0x632>
 8010904:	9a03      	ldr	r2, [sp, #12]
 8010906:	eba2 060a 	sub.w	r6, r2, sl
 801090a:	2200      	movs	r2, #0
 801090c:	e721      	b.n	8010752 <_dtoa_r+0x632>
 801090e:	9e03      	ldr	r6, [sp, #12]
 8010910:	9d08      	ldr	r5, [sp, #32]
 8010912:	461c      	mov	r4, r3
 8010914:	e72a      	b.n	801076c <_dtoa_r+0x64c>
 8010916:	9a02      	ldr	r2, [sp, #8]
 8010918:	9206      	str	r2, [sp, #24]
 801091a:	e752      	b.n	80107c2 <_dtoa_r+0x6a2>
 801091c:	9902      	ldr	r1, [sp, #8]
 801091e:	461a      	mov	r2, r3
 8010920:	e751      	b.n	80107c6 <_dtoa_r+0x6a6>
 8010922:	9b06      	ldr	r3, [sp, #24]
 8010924:	9302      	str	r3, [sp, #8]
 8010926:	e752      	b.n	80107ce <_dtoa_r+0x6ae>
 8010928:	2300      	movs	r3, #0
 801092a:	e77b      	b.n	8010824 <_dtoa_r+0x704>
 801092c:	9b04      	ldr	r3, [sp, #16]
 801092e:	e779      	b.n	8010824 <_dtoa_r+0x704>
 8010930:	920a      	str	r2, [sp, #40]	@ 0x28
 8010932:	e778      	b.n	8010826 <_dtoa_r+0x706>
 8010934:	2300      	movs	r3, #0
 8010936:	930a      	str	r3, [sp, #40]	@ 0x28
 8010938:	e779      	b.n	801082e <_dtoa_r+0x70e>
 801093a:	d093      	beq.n	8010864 <_dtoa_r+0x744>
 801093c:	9b03      	ldr	r3, [sp, #12]
 801093e:	321c      	adds	r2, #28
 8010940:	4413      	add	r3, r2
 8010942:	9303      	str	r3, [sp, #12]
 8010944:	9b07      	ldr	r3, [sp, #28]
 8010946:	4416      	add	r6, r2
 8010948:	4413      	add	r3, r2
 801094a:	e78a      	b.n	8010862 <_dtoa_r+0x742>
 801094c:	4602      	mov	r2, r0
 801094e:	e7f5      	b.n	801093c <_dtoa_r+0x81c>
 8010950:	f1ba 0f00 	cmp.w	sl, #0
 8010954:	f8cd 8018 	str.w	r8, [sp, #24]
 8010958:	46d3      	mov	fp, sl
 801095a:	dc21      	bgt.n	80109a0 <_dtoa_r+0x880>
 801095c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801095e:	2b02      	cmp	r3, #2
 8010960:	dd1e      	ble.n	80109a0 <_dtoa_r+0x880>
 8010962:	f1bb 0f00 	cmp.w	fp, #0
 8010966:	f47f addc 	bne.w	8010522 <_dtoa_r+0x402>
 801096a:	4621      	mov	r1, r4
 801096c:	465b      	mov	r3, fp
 801096e:	2205      	movs	r2, #5
 8010970:	4648      	mov	r0, r9
 8010972:	f000 f9df 	bl	8010d34 <__multadd>
 8010976:	4601      	mov	r1, r0
 8010978:	4604      	mov	r4, r0
 801097a:	9802      	ldr	r0, [sp, #8]
 801097c:	f000 fbea 	bl	8011154 <__mcmp>
 8010980:	2800      	cmp	r0, #0
 8010982:	f77f adce 	ble.w	8010522 <_dtoa_r+0x402>
 8010986:	463e      	mov	r6, r7
 8010988:	2331      	movs	r3, #49	@ 0x31
 801098a:	f806 3b01 	strb.w	r3, [r6], #1
 801098e:	9b06      	ldr	r3, [sp, #24]
 8010990:	3301      	adds	r3, #1
 8010992:	9306      	str	r3, [sp, #24]
 8010994:	e5c9      	b.n	801052a <_dtoa_r+0x40a>
 8010996:	f8cd 8018 	str.w	r8, [sp, #24]
 801099a:	4654      	mov	r4, sl
 801099c:	4625      	mov	r5, r4
 801099e:	e7f2      	b.n	8010986 <_dtoa_r+0x866>
 80109a0:	9b08      	ldr	r3, [sp, #32]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f000 8102 	beq.w	8010bac <_dtoa_r+0xa8c>
 80109a8:	2e00      	cmp	r6, #0
 80109aa:	dd05      	ble.n	80109b8 <_dtoa_r+0x898>
 80109ac:	4629      	mov	r1, r5
 80109ae:	4632      	mov	r2, r6
 80109b0:	4648      	mov	r0, r9
 80109b2:	f000 fb63 	bl	801107c <__lshift>
 80109b6:	4605      	mov	r5, r0
 80109b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d058      	beq.n	8010a70 <_dtoa_r+0x950>
 80109be:	6869      	ldr	r1, [r5, #4]
 80109c0:	4648      	mov	r0, r9
 80109c2:	f000 f955 	bl	8010c70 <_Balloc>
 80109c6:	4606      	mov	r6, r0
 80109c8:	b928      	cbnz	r0, 80109d6 <_dtoa_r+0x8b6>
 80109ca:	4b82      	ldr	r3, [pc, #520]	@ (8010bd4 <_dtoa_r+0xab4>)
 80109cc:	4602      	mov	r2, r0
 80109ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80109d2:	f7ff bbbb 	b.w	801014c <_dtoa_r+0x2c>
 80109d6:	692a      	ldr	r2, [r5, #16]
 80109d8:	3202      	adds	r2, #2
 80109da:	0092      	lsls	r2, r2, #2
 80109dc:	f105 010c 	add.w	r1, r5, #12
 80109e0:	300c      	adds	r0, #12
 80109e2:	f7ff faae 	bl	800ff42 <memcpy>
 80109e6:	2201      	movs	r2, #1
 80109e8:	4631      	mov	r1, r6
 80109ea:	4648      	mov	r0, r9
 80109ec:	f000 fb46 	bl	801107c <__lshift>
 80109f0:	1c7b      	adds	r3, r7, #1
 80109f2:	9303      	str	r3, [sp, #12]
 80109f4:	eb07 030b 	add.w	r3, r7, fp
 80109f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80109fa:	9b04      	ldr	r3, [sp, #16]
 80109fc:	f003 0301 	and.w	r3, r3, #1
 8010a00:	46a8      	mov	r8, r5
 8010a02:	9308      	str	r3, [sp, #32]
 8010a04:	4605      	mov	r5, r0
 8010a06:	9b03      	ldr	r3, [sp, #12]
 8010a08:	9802      	ldr	r0, [sp, #8]
 8010a0a:	4621      	mov	r1, r4
 8010a0c:	f103 3bff 	add.w	fp, r3, #4294967295
 8010a10:	f7ff fafc 	bl	801000c <quorem>
 8010a14:	4641      	mov	r1, r8
 8010a16:	9004      	str	r0, [sp, #16]
 8010a18:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010a1c:	9802      	ldr	r0, [sp, #8]
 8010a1e:	f000 fb99 	bl	8011154 <__mcmp>
 8010a22:	462a      	mov	r2, r5
 8010a24:	9007      	str	r0, [sp, #28]
 8010a26:	4621      	mov	r1, r4
 8010a28:	4648      	mov	r0, r9
 8010a2a:	f000 fbaf 	bl	801118c <__mdiff>
 8010a2e:	68c2      	ldr	r2, [r0, #12]
 8010a30:	4606      	mov	r6, r0
 8010a32:	b9fa      	cbnz	r2, 8010a74 <_dtoa_r+0x954>
 8010a34:	4601      	mov	r1, r0
 8010a36:	9802      	ldr	r0, [sp, #8]
 8010a38:	f000 fb8c 	bl	8011154 <__mcmp>
 8010a3c:	4602      	mov	r2, r0
 8010a3e:	4631      	mov	r1, r6
 8010a40:	4648      	mov	r0, r9
 8010a42:	920a      	str	r2, [sp, #40]	@ 0x28
 8010a44:	f000 f954 	bl	8010cf0 <_Bfree>
 8010a48:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010a4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a4c:	9e03      	ldr	r6, [sp, #12]
 8010a4e:	ea42 0103 	orr.w	r1, r2, r3
 8010a52:	9b08      	ldr	r3, [sp, #32]
 8010a54:	4319      	orrs	r1, r3
 8010a56:	d10f      	bne.n	8010a78 <_dtoa_r+0x958>
 8010a58:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010a5c:	d028      	beq.n	8010ab0 <_dtoa_r+0x990>
 8010a5e:	9b07      	ldr	r3, [sp, #28]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	dd02      	ble.n	8010a6a <_dtoa_r+0x94a>
 8010a64:	9b04      	ldr	r3, [sp, #16]
 8010a66:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010a6a:	f88b a000 	strb.w	sl, [fp]
 8010a6e:	e55e      	b.n	801052e <_dtoa_r+0x40e>
 8010a70:	4628      	mov	r0, r5
 8010a72:	e7bd      	b.n	80109f0 <_dtoa_r+0x8d0>
 8010a74:	2201      	movs	r2, #1
 8010a76:	e7e2      	b.n	8010a3e <_dtoa_r+0x91e>
 8010a78:	9b07      	ldr	r3, [sp, #28]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	db04      	blt.n	8010a88 <_dtoa_r+0x968>
 8010a7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010a80:	430b      	orrs	r3, r1
 8010a82:	9908      	ldr	r1, [sp, #32]
 8010a84:	430b      	orrs	r3, r1
 8010a86:	d120      	bne.n	8010aca <_dtoa_r+0x9aa>
 8010a88:	2a00      	cmp	r2, #0
 8010a8a:	ddee      	ble.n	8010a6a <_dtoa_r+0x94a>
 8010a8c:	9902      	ldr	r1, [sp, #8]
 8010a8e:	2201      	movs	r2, #1
 8010a90:	4648      	mov	r0, r9
 8010a92:	f000 faf3 	bl	801107c <__lshift>
 8010a96:	4621      	mov	r1, r4
 8010a98:	9002      	str	r0, [sp, #8]
 8010a9a:	f000 fb5b 	bl	8011154 <__mcmp>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	dc03      	bgt.n	8010aaa <_dtoa_r+0x98a>
 8010aa2:	d1e2      	bne.n	8010a6a <_dtoa_r+0x94a>
 8010aa4:	f01a 0f01 	tst.w	sl, #1
 8010aa8:	d0df      	beq.n	8010a6a <_dtoa_r+0x94a>
 8010aaa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010aae:	d1d9      	bne.n	8010a64 <_dtoa_r+0x944>
 8010ab0:	2339      	movs	r3, #57	@ 0x39
 8010ab2:	f88b 3000 	strb.w	r3, [fp]
 8010ab6:	4633      	mov	r3, r6
 8010ab8:	461e      	mov	r6, r3
 8010aba:	3b01      	subs	r3, #1
 8010abc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010ac0:	2a39      	cmp	r2, #57	@ 0x39
 8010ac2:	d052      	beq.n	8010b6a <_dtoa_r+0xa4a>
 8010ac4:	3201      	adds	r2, #1
 8010ac6:	701a      	strb	r2, [r3, #0]
 8010ac8:	e531      	b.n	801052e <_dtoa_r+0x40e>
 8010aca:	2a00      	cmp	r2, #0
 8010acc:	dd07      	ble.n	8010ade <_dtoa_r+0x9be>
 8010ace:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010ad2:	d0ed      	beq.n	8010ab0 <_dtoa_r+0x990>
 8010ad4:	f10a 0301 	add.w	r3, sl, #1
 8010ad8:	f88b 3000 	strb.w	r3, [fp]
 8010adc:	e527      	b.n	801052e <_dtoa_r+0x40e>
 8010ade:	9b03      	ldr	r3, [sp, #12]
 8010ae0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ae2:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	d029      	beq.n	8010b3e <_dtoa_r+0xa1e>
 8010aea:	9902      	ldr	r1, [sp, #8]
 8010aec:	2300      	movs	r3, #0
 8010aee:	220a      	movs	r2, #10
 8010af0:	4648      	mov	r0, r9
 8010af2:	f000 f91f 	bl	8010d34 <__multadd>
 8010af6:	45a8      	cmp	r8, r5
 8010af8:	9002      	str	r0, [sp, #8]
 8010afa:	f04f 0300 	mov.w	r3, #0
 8010afe:	f04f 020a 	mov.w	r2, #10
 8010b02:	4641      	mov	r1, r8
 8010b04:	4648      	mov	r0, r9
 8010b06:	d107      	bne.n	8010b18 <_dtoa_r+0x9f8>
 8010b08:	f000 f914 	bl	8010d34 <__multadd>
 8010b0c:	4680      	mov	r8, r0
 8010b0e:	4605      	mov	r5, r0
 8010b10:	9b03      	ldr	r3, [sp, #12]
 8010b12:	3301      	adds	r3, #1
 8010b14:	9303      	str	r3, [sp, #12]
 8010b16:	e776      	b.n	8010a06 <_dtoa_r+0x8e6>
 8010b18:	f000 f90c 	bl	8010d34 <__multadd>
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	4680      	mov	r8, r0
 8010b20:	2300      	movs	r3, #0
 8010b22:	220a      	movs	r2, #10
 8010b24:	4648      	mov	r0, r9
 8010b26:	f000 f905 	bl	8010d34 <__multadd>
 8010b2a:	4605      	mov	r5, r0
 8010b2c:	e7f0      	b.n	8010b10 <_dtoa_r+0x9f0>
 8010b2e:	f1bb 0f00 	cmp.w	fp, #0
 8010b32:	bfcc      	ite	gt
 8010b34:	465e      	movgt	r6, fp
 8010b36:	2601      	movle	r6, #1
 8010b38:	443e      	add	r6, r7
 8010b3a:	f04f 0800 	mov.w	r8, #0
 8010b3e:	9902      	ldr	r1, [sp, #8]
 8010b40:	2201      	movs	r2, #1
 8010b42:	4648      	mov	r0, r9
 8010b44:	f000 fa9a 	bl	801107c <__lshift>
 8010b48:	4621      	mov	r1, r4
 8010b4a:	9002      	str	r0, [sp, #8]
 8010b4c:	f000 fb02 	bl	8011154 <__mcmp>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	dcb0      	bgt.n	8010ab6 <_dtoa_r+0x996>
 8010b54:	d102      	bne.n	8010b5c <_dtoa_r+0xa3c>
 8010b56:	f01a 0f01 	tst.w	sl, #1
 8010b5a:	d1ac      	bne.n	8010ab6 <_dtoa_r+0x996>
 8010b5c:	4633      	mov	r3, r6
 8010b5e:	461e      	mov	r6, r3
 8010b60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b64:	2a30      	cmp	r2, #48	@ 0x30
 8010b66:	d0fa      	beq.n	8010b5e <_dtoa_r+0xa3e>
 8010b68:	e4e1      	b.n	801052e <_dtoa_r+0x40e>
 8010b6a:	429f      	cmp	r7, r3
 8010b6c:	d1a4      	bne.n	8010ab8 <_dtoa_r+0x998>
 8010b6e:	9b06      	ldr	r3, [sp, #24]
 8010b70:	3301      	adds	r3, #1
 8010b72:	9306      	str	r3, [sp, #24]
 8010b74:	2331      	movs	r3, #49	@ 0x31
 8010b76:	703b      	strb	r3, [r7, #0]
 8010b78:	e4d9      	b.n	801052e <_dtoa_r+0x40e>
 8010b7a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010b7c:	4f16      	ldr	r7, [pc, #88]	@ (8010bd8 <_dtoa_r+0xab8>)
 8010b7e:	b11b      	cbz	r3, 8010b88 <_dtoa_r+0xa68>
 8010b80:	f107 0308 	add.w	r3, r7, #8
 8010b84:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010b86:	6013      	str	r3, [r2, #0]
 8010b88:	4638      	mov	r0, r7
 8010b8a:	b00f      	add	sp, #60	@ 0x3c
 8010b8c:	ecbd 8b02 	vpop	{d8}
 8010b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b94:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	f77f ae2c 	ble.w	80107f4 <_dtoa_r+0x6d4>
 8010b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ba0:	2001      	movs	r0, #1
 8010ba2:	e64c      	b.n	801083e <_dtoa_r+0x71e>
 8010ba4:	f1bb 0f00 	cmp.w	fp, #0
 8010ba8:	f77f aed8 	ble.w	801095c <_dtoa_r+0x83c>
 8010bac:	463e      	mov	r6, r7
 8010bae:	9802      	ldr	r0, [sp, #8]
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	f7ff fa2b 	bl	801000c <quorem>
 8010bb6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010bba:	f806 ab01 	strb.w	sl, [r6], #1
 8010bbe:	1bf2      	subs	r2, r6, r7
 8010bc0:	4593      	cmp	fp, r2
 8010bc2:	ddb4      	ble.n	8010b2e <_dtoa_r+0xa0e>
 8010bc4:	9902      	ldr	r1, [sp, #8]
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	220a      	movs	r2, #10
 8010bca:	4648      	mov	r0, r9
 8010bcc:	f000 f8b2 	bl	8010d34 <__multadd>
 8010bd0:	9002      	str	r0, [sp, #8]
 8010bd2:	e7ec      	b.n	8010bae <_dtoa_r+0xa8e>
 8010bd4:	08013642 	.word	0x08013642
 8010bd8:	080135c6 	.word	0x080135c6

08010bdc <_free_r>:
 8010bdc:	b538      	push	{r3, r4, r5, lr}
 8010bde:	4605      	mov	r5, r0
 8010be0:	2900      	cmp	r1, #0
 8010be2:	d041      	beq.n	8010c68 <_free_r+0x8c>
 8010be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010be8:	1f0c      	subs	r4, r1, #4
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	bfb8      	it	lt
 8010bee:	18e4      	addlt	r4, r4, r3
 8010bf0:	f7fe fa90 	bl	800f114 <__malloc_lock>
 8010bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8010c6c <_free_r+0x90>)
 8010bf6:	6813      	ldr	r3, [r2, #0]
 8010bf8:	b933      	cbnz	r3, 8010c08 <_free_r+0x2c>
 8010bfa:	6063      	str	r3, [r4, #4]
 8010bfc:	6014      	str	r4, [r2, #0]
 8010bfe:	4628      	mov	r0, r5
 8010c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c04:	f7fe ba8c 	b.w	800f120 <__malloc_unlock>
 8010c08:	42a3      	cmp	r3, r4
 8010c0a:	d908      	bls.n	8010c1e <_free_r+0x42>
 8010c0c:	6820      	ldr	r0, [r4, #0]
 8010c0e:	1821      	adds	r1, r4, r0
 8010c10:	428b      	cmp	r3, r1
 8010c12:	bf01      	itttt	eq
 8010c14:	6819      	ldreq	r1, [r3, #0]
 8010c16:	685b      	ldreq	r3, [r3, #4]
 8010c18:	1809      	addeq	r1, r1, r0
 8010c1a:	6021      	streq	r1, [r4, #0]
 8010c1c:	e7ed      	b.n	8010bfa <_free_r+0x1e>
 8010c1e:	461a      	mov	r2, r3
 8010c20:	685b      	ldr	r3, [r3, #4]
 8010c22:	b10b      	cbz	r3, 8010c28 <_free_r+0x4c>
 8010c24:	42a3      	cmp	r3, r4
 8010c26:	d9fa      	bls.n	8010c1e <_free_r+0x42>
 8010c28:	6811      	ldr	r1, [r2, #0]
 8010c2a:	1850      	adds	r0, r2, r1
 8010c2c:	42a0      	cmp	r0, r4
 8010c2e:	d10b      	bne.n	8010c48 <_free_r+0x6c>
 8010c30:	6820      	ldr	r0, [r4, #0]
 8010c32:	4401      	add	r1, r0
 8010c34:	1850      	adds	r0, r2, r1
 8010c36:	4283      	cmp	r3, r0
 8010c38:	6011      	str	r1, [r2, #0]
 8010c3a:	d1e0      	bne.n	8010bfe <_free_r+0x22>
 8010c3c:	6818      	ldr	r0, [r3, #0]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	6053      	str	r3, [r2, #4]
 8010c42:	4408      	add	r0, r1
 8010c44:	6010      	str	r0, [r2, #0]
 8010c46:	e7da      	b.n	8010bfe <_free_r+0x22>
 8010c48:	d902      	bls.n	8010c50 <_free_r+0x74>
 8010c4a:	230c      	movs	r3, #12
 8010c4c:	602b      	str	r3, [r5, #0]
 8010c4e:	e7d6      	b.n	8010bfe <_free_r+0x22>
 8010c50:	6820      	ldr	r0, [r4, #0]
 8010c52:	1821      	adds	r1, r4, r0
 8010c54:	428b      	cmp	r3, r1
 8010c56:	bf04      	itt	eq
 8010c58:	6819      	ldreq	r1, [r3, #0]
 8010c5a:	685b      	ldreq	r3, [r3, #4]
 8010c5c:	6063      	str	r3, [r4, #4]
 8010c5e:	bf04      	itt	eq
 8010c60:	1809      	addeq	r1, r1, r0
 8010c62:	6021      	streq	r1, [r4, #0]
 8010c64:	6054      	str	r4, [r2, #4]
 8010c66:	e7ca      	b.n	8010bfe <_free_r+0x22>
 8010c68:	bd38      	pop	{r3, r4, r5, pc}
 8010c6a:	bf00      	nop
 8010c6c:	20017c4c 	.word	0x20017c4c

08010c70 <_Balloc>:
 8010c70:	b570      	push	{r4, r5, r6, lr}
 8010c72:	69c6      	ldr	r6, [r0, #28]
 8010c74:	4604      	mov	r4, r0
 8010c76:	460d      	mov	r5, r1
 8010c78:	b976      	cbnz	r6, 8010c98 <_Balloc+0x28>
 8010c7a:	2010      	movs	r0, #16
 8010c7c:	f7fe f998 	bl	800efb0 <malloc>
 8010c80:	4602      	mov	r2, r0
 8010c82:	61e0      	str	r0, [r4, #28]
 8010c84:	b920      	cbnz	r0, 8010c90 <_Balloc+0x20>
 8010c86:	4b18      	ldr	r3, [pc, #96]	@ (8010ce8 <_Balloc+0x78>)
 8010c88:	4818      	ldr	r0, [pc, #96]	@ (8010cec <_Balloc+0x7c>)
 8010c8a:	216b      	movs	r1, #107	@ 0x6b
 8010c8c:	f001 f944 	bl	8011f18 <__assert_func>
 8010c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c94:	6006      	str	r6, [r0, #0]
 8010c96:	60c6      	str	r6, [r0, #12]
 8010c98:	69e6      	ldr	r6, [r4, #28]
 8010c9a:	68f3      	ldr	r3, [r6, #12]
 8010c9c:	b183      	cbz	r3, 8010cc0 <_Balloc+0x50>
 8010c9e:	69e3      	ldr	r3, [r4, #28]
 8010ca0:	68db      	ldr	r3, [r3, #12]
 8010ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010ca6:	b9b8      	cbnz	r0, 8010cd8 <_Balloc+0x68>
 8010ca8:	2101      	movs	r1, #1
 8010caa:	fa01 f605 	lsl.w	r6, r1, r5
 8010cae:	1d72      	adds	r2, r6, #5
 8010cb0:	0092      	lsls	r2, r2, #2
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f7fe f968 	bl	800ef88 <_calloc_r>
 8010cb8:	b160      	cbz	r0, 8010cd4 <_Balloc+0x64>
 8010cba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010cbe:	e00e      	b.n	8010cde <_Balloc+0x6e>
 8010cc0:	2221      	movs	r2, #33	@ 0x21
 8010cc2:	2104      	movs	r1, #4
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f7fe f95f 	bl	800ef88 <_calloc_r>
 8010cca:	69e3      	ldr	r3, [r4, #28]
 8010ccc:	60f0      	str	r0, [r6, #12]
 8010cce:	68db      	ldr	r3, [r3, #12]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d1e4      	bne.n	8010c9e <_Balloc+0x2e>
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	bd70      	pop	{r4, r5, r6, pc}
 8010cd8:	6802      	ldr	r2, [r0, #0]
 8010cda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010cde:	2300      	movs	r3, #0
 8010ce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ce4:	e7f7      	b.n	8010cd6 <_Balloc+0x66>
 8010ce6:	bf00      	nop
 8010ce8:	080135d3 	.word	0x080135d3
 8010cec:	08013653 	.word	0x08013653

08010cf0 <_Bfree>:
 8010cf0:	b570      	push	{r4, r5, r6, lr}
 8010cf2:	69c6      	ldr	r6, [r0, #28]
 8010cf4:	4605      	mov	r5, r0
 8010cf6:	460c      	mov	r4, r1
 8010cf8:	b976      	cbnz	r6, 8010d18 <_Bfree+0x28>
 8010cfa:	2010      	movs	r0, #16
 8010cfc:	f7fe f958 	bl	800efb0 <malloc>
 8010d00:	4602      	mov	r2, r0
 8010d02:	61e8      	str	r0, [r5, #28]
 8010d04:	b920      	cbnz	r0, 8010d10 <_Bfree+0x20>
 8010d06:	4b09      	ldr	r3, [pc, #36]	@ (8010d2c <_Bfree+0x3c>)
 8010d08:	4809      	ldr	r0, [pc, #36]	@ (8010d30 <_Bfree+0x40>)
 8010d0a:	218f      	movs	r1, #143	@ 0x8f
 8010d0c:	f001 f904 	bl	8011f18 <__assert_func>
 8010d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d14:	6006      	str	r6, [r0, #0]
 8010d16:	60c6      	str	r6, [r0, #12]
 8010d18:	b13c      	cbz	r4, 8010d2a <_Bfree+0x3a>
 8010d1a:	69eb      	ldr	r3, [r5, #28]
 8010d1c:	6862      	ldr	r2, [r4, #4]
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d24:	6021      	str	r1, [r4, #0]
 8010d26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d2a:	bd70      	pop	{r4, r5, r6, pc}
 8010d2c:	080135d3 	.word	0x080135d3
 8010d30:	08013653 	.word	0x08013653

08010d34 <__multadd>:
 8010d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d38:	690d      	ldr	r5, [r1, #16]
 8010d3a:	4607      	mov	r7, r0
 8010d3c:	460c      	mov	r4, r1
 8010d3e:	461e      	mov	r6, r3
 8010d40:	f101 0c14 	add.w	ip, r1, #20
 8010d44:	2000      	movs	r0, #0
 8010d46:	f8dc 3000 	ldr.w	r3, [ip]
 8010d4a:	b299      	uxth	r1, r3
 8010d4c:	fb02 6101 	mla	r1, r2, r1, r6
 8010d50:	0c1e      	lsrs	r6, r3, #16
 8010d52:	0c0b      	lsrs	r3, r1, #16
 8010d54:	fb02 3306 	mla	r3, r2, r6, r3
 8010d58:	b289      	uxth	r1, r1
 8010d5a:	3001      	adds	r0, #1
 8010d5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010d60:	4285      	cmp	r5, r0
 8010d62:	f84c 1b04 	str.w	r1, [ip], #4
 8010d66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010d6a:	dcec      	bgt.n	8010d46 <__multadd+0x12>
 8010d6c:	b30e      	cbz	r6, 8010db2 <__multadd+0x7e>
 8010d6e:	68a3      	ldr	r3, [r4, #8]
 8010d70:	42ab      	cmp	r3, r5
 8010d72:	dc19      	bgt.n	8010da8 <__multadd+0x74>
 8010d74:	6861      	ldr	r1, [r4, #4]
 8010d76:	4638      	mov	r0, r7
 8010d78:	3101      	adds	r1, #1
 8010d7a:	f7ff ff79 	bl	8010c70 <_Balloc>
 8010d7e:	4680      	mov	r8, r0
 8010d80:	b928      	cbnz	r0, 8010d8e <__multadd+0x5a>
 8010d82:	4602      	mov	r2, r0
 8010d84:	4b0c      	ldr	r3, [pc, #48]	@ (8010db8 <__multadd+0x84>)
 8010d86:	480d      	ldr	r0, [pc, #52]	@ (8010dbc <__multadd+0x88>)
 8010d88:	21ba      	movs	r1, #186	@ 0xba
 8010d8a:	f001 f8c5 	bl	8011f18 <__assert_func>
 8010d8e:	6922      	ldr	r2, [r4, #16]
 8010d90:	3202      	adds	r2, #2
 8010d92:	f104 010c 	add.w	r1, r4, #12
 8010d96:	0092      	lsls	r2, r2, #2
 8010d98:	300c      	adds	r0, #12
 8010d9a:	f7ff f8d2 	bl	800ff42 <memcpy>
 8010d9e:	4621      	mov	r1, r4
 8010da0:	4638      	mov	r0, r7
 8010da2:	f7ff ffa5 	bl	8010cf0 <_Bfree>
 8010da6:	4644      	mov	r4, r8
 8010da8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010dac:	3501      	adds	r5, #1
 8010dae:	615e      	str	r6, [r3, #20]
 8010db0:	6125      	str	r5, [r4, #16]
 8010db2:	4620      	mov	r0, r4
 8010db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db8:	08013642 	.word	0x08013642
 8010dbc:	08013653 	.word	0x08013653

08010dc0 <__hi0bits>:
 8010dc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	bf36      	itet	cc
 8010dc8:	0403      	lslcc	r3, r0, #16
 8010dca:	2000      	movcs	r0, #0
 8010dcc:	2010      	movcc	r0, #16
 8010dce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010dd2:	bf3c      	itt	cc
 8010dd4:	021b      	lslcc	r3, r3, #8
 8010dd6:	3008      	addcc	r0, #8
 8010dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ddc:	bf3c      	itt	cc
 8010dde:	011b      	lslcc	r3, r3, #4
 8010de0:	3004      	addcc	r0, #4
 8010de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010de6:	bf3c      	itt	cc
 8010de8:	009b      	lslcc	r3, r3, #2
 8010dea:	3002      	addcc	r0, #2
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	db05      	blt.n	8010dfc <__hi0bits+0x3c>
 8010df0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010df4:	f100 0001 	add.w	r0, r0, #1
 8010df8:	bf08      	it	eq
 8010dfa:	2020      	moveq	r0, #32
 8010dfc:	4770      	bx	lr

08010dfe <__lo0bits>:
 8010dfe:	6803      	ldr	r3, [r0, #0]
 8010e00:	4602      	mov	r2, r0
 8010e02:	f013 0007 	ands.w	r0, r3, #7
 8010e06:	d00b      	beq.n	8010e20 <__lo0bits+0x22>
 8010e08:	07d9      	lsls	r1, r3, #31
 8010e0a:	d421      	bmi.n	8010e50 <__lo0bits+0x52>
 8010e0c:	0798      	lsls	r0, r3, #30
 8010e0e:	bf49      	itett	mi
 8010e10:	085b      	lsrmi	r3, r3, #1
 8010e12:	089b      	lsrpl	r3, r3, #2
 8010e14:	2001      	movmi	r0, #1
 8010e16:	6013      	strmi	r3, [r2, #0]
 8010e18:	bf5c      	itt	pl
 8010e1a:	6013      	strpl	r3, [r2, #0]
 8010e1c:	2002      	movpl	r0, #2
 8010e1e:	4770      	bx	lr
 8010e20:	b299      	uxth	r1, r3
 8010e22:	b909      	cbnz	r1, 8010e28 <__lo0bits+0x2a>
 8010e24:	0c1b      	lsrs	r3, r3, #16
 8010e26:	2010      	movs	r0, #16
 8010e28:	b2d9      	uxtb	r1, r3
 8010e2a:	b909      	cbnz	r1, 8010e30 <__lo0bits+0x32>
 8010e2c:	3008      	adds	r0, #8
 8010e2e:	0a1b      	lsrs	r3, r3, #8
 8010e30:	0719      	lsls	r1, r3, #28
 8010e32:	bf04      	itt	eq
 8010e34:	091b      	lsreq	r3, r3, #4
 8010e36:	3004      	addeq	r0, #4
 8010e38:	0799      	lsls	r1, r3, #30
 8010e3a:	bf04      	itt	eq
 8010e3c:	089b      	lsreq	r3, r3, #2
 8010e3e:	3002      	addeq	r0, #2
 8010e40:	07d9      	lsls	r1, r3, #31
 8010e42:	d403      	bmi.n	8010e4c <__lo0bits+0x4e>
 8010e44:	085b      	lsrs	r3, r3, #1
 8010e46:	f100 0001 	add.w	r0, r0, #1
 8010e4a:	d003      	beq.n	8010e54 <__lo0bits+0x56>
 8010e4c:	6013      	str	r3, [r2, #0]
 8010e4e:	4770      	bx	lr
 8010e50:	2000      	movs	r0, #0
 8010e52:	4770      	bx	lr
 8010e54:	2020      	movs	r0, #32
 8010e56:	4770      	bx	lr

08010e58 <__i2b>:
 8010e58:	b510      	push	{r4, lr}
 8010e5a:	460c      	mov	r4, r1
 8010e5c:	2101      	movs	r1, #1
 8010e5e:	f7ff ff07 	bl	8010c70 <_Balloc>
 8010e62:	4602      	mov	r2, r0
 8010e64:	b928      	cbnz	r0, 8010e72 <__i2b+0x1a>
 8010e66:	4b05      	ldr	r3, [pc, #20]	@ (8010e7c <__i2b+0x24>)
 8010e68:	4805      	ldr	r0, [pc, #20]	@ (8010e80 <__i2b+0x28>)
 8010e6a:	f240 1145 	movw	r1, #325	@ 0x145
 8010e6e:	f001 f853 	bl	8011f18 <__assert_func>
 8010e72:	2301      	movs	r3, #1
 8010e74:	6144      	str	r4, [r0, #20]
 8010e76:	6103      	str	r3, [r0, #16]
 8010e78:	bd10      	pop	{r4, pc}
 8010e7a:	bf00      	nop
 8010e7c:	08013642 	.word	0x08013642
 8010e80:	08013653 	.word	0x08013653

08010e84 <__multiply>:
 8010e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e88:	4617      	mov	r7, r2
 8010e8a:	690a      	ldr	r2, [r1, #16]
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	bfa8      	it	ge
 8010e92:	463b      	movge	r3, r7
 8010e94:	4689      	mov	r9, r1
 8010e96:	bfa4      	itt	ge
 8010e98:	460f      	movge	r7, r1
 8010e9a:	4699      	movge	r9, r3
 8010e9c:	693d      	ldr	r5, [r7, #16]
 8010e9e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	6879      	ldr	r1, [r7, #4]
 8010ea6:	eb05 060a 	add.w	r6, r5, sl
 8010eaa:	42b3      	cmp	r3, r6
 8010eac:	b085      	sub	sp, #20
 8010eae:	bfb8      	it	lt
 8010eb0:	3101      	addlt	r1, #1
 8010eb2:	f7ff fedd 	bl	8010c70 <_Balloc>
 8010eb6:	b930      	cbnz	r0, 8010ec6 <__multiply+0x42>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	4b41      	ldr	r3, [pc, #260]	@ (8010fc0 <__multiply+0x13c>)
 8010ebc:	4841      	ldr	r0, [pc, #260]	@ (8010fc4 <__multiply+0x140>)
 8010ebe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010ec2:	f001 f829 	bl	8011f18 <__assert_func>
 8010ec6:	f100 0414 	add.w	r4, r0, #20
 8010eca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010ece:	4623      	mov	r3, r4
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	4573      	cmp	r3, lr
 8010ed4:	d320      	bcc.n	8010f18 <__multiply+0x94>
 8010ed6:	f107 0814 	add.w	r8, r7, #20
 8010eda:	f109 0114 	add.w	r1, r9, #20
 8010ede:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010ee2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010ee6:	9302      	str	r3, [sp, #8]
 8010ee8:	1beb      	subs	r3, r5, r7
 8010eea:	3b15      	subs	r3, #21
 8010eec:	f023 0303 	bic.w	r3, r3, #3
 8010ef0:	3304      	adds	r3, #4
 8010ef2:	3715      	adds	r7, #21
 8010ef4:	42bd      	cmp	r5, r7
 8010ef6:	bf38      	it	cc
 8010ef8:	2304      	movcc	r3, #4
 8010efa:	9301      	str	r3, [sp, #4]
 8010efc:	9b02      	ldr	r3, [sp, #8]
 8010efe:	9103      	str	r1, [sp, #12]
 8010f00:	428b      	cmp	r3, r1
 8010f02:	d80c      	bhi.n	8010f1e <__multiply+0x9a>
 8010f04:	2e00      	cmp	r6, #0
 8010f06:	dd03      	ble.n	8010f10 <__multiply+0x8c>
 8010f08:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d055      	beq.n	8010fbc <__multiply+0x138>
 8010f10:	6106      	str	r6, [r0, #16]
 8010f12:	b005      	add	sp, #20
 8010f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f18:	f843 2b04 	str.w	r2, [r3], #4
 8010f1c:	e7d9      	b.n	8010ed2 <__multiply+0x4e>
 8010f1e:	f8b1 a000 	ldrh.w	sl, [r1]
 8010f22:	f1ba 0f00 	cmp.w	sl, #0
 8010f26:	d01f      	beq.n	8010f68 <__multiply+0xe4>
 8010f28:	46c4      	mov	ip, r8
 8010f2a:	46a1      	mov	r9, r4
 8010f2c:	2700      	movs	r7, #0
 8010f2e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010f32:	f8d9 3000 	ldr.w	r3, [r9]
 8010f36:	fa1f fb82 	uxth.w	fp, r2
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010f40:	443b      	add	r3, r7
 8010f42:	f8d9 7000 	ldr.w	r7, [r9]
 8010f46:	0c12      	lsrs	r2, r2, #16
 8010f48:	0c3f      	lsrs	r7, r7, #16
 8010f4a:	fb0a 7202 	mla	r2, sl, r2, r7
 8010f4e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f58:	4565      	cmp	r5, ip
 8010f5a:	f849 3b04 	str.w	r3, [r9], #4
 8010f5e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010f62:	d8e4      	bhi.n	8010f2e <__multiply+0xaa>
 8010f64:	9b01      	ldr	r3, [sp, #4]
 8010f66:	50e7      	str	r7, [r4, r3]
 8010f68:	9b03      	ldr	r3, [sp, #12]
 8010f6a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010f6e:	3104      	adds	r1, #4
 8010f70:	f1b9 0f00 	cmp.w	r9, #0
 8010f74:	d020      	beq.n	8010fb8 <__multiply+0x134>
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	4647      	mov	r7, r8
 8010f7a:	46a4      	mov	ip, r4
 8010f7c:	f04f 0a00 	mov.w	sl, #0
 8010f80:	f8b7 b000 	ldrh.w	fp, [r7]
 8010f84:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010f88:	fb09 220b 	mla	r2, r9, fp, r2
 8010f8c:	4452      	add	r2, sl
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f94:	f84c 3b04 	str.w	r3, [ip], #4
 8010f98:	f857 3b04 	ldr.w	r3, [r7], #4
 8010f9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010fa0:	f8bc 3000 	ldrh.w	r3, [ip]
 8010fa4:	fb09 330a 	mla	r3, r9, sl, r3
 8010fa8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010fac:	42bd      	cmp	r5, r7
 8010fae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010fb2:	d8e5      	bhi.n	8010f80 <__multiply+0xfc>
 8010fb4:	9a01      	ldr	r2, [sp, #4]
 8010fb6:	50a3      	str	r3, [r4, r2]
 8010fb8:	3404      	adds	r4, #4
 8010fba:	e79f      	b.n	8010efc <__multiply+0x78>
 8010fbc:	3e01      	subs	r6, #1
 8010fbe:	e7a1      	b.n	8010f04 <__multiply+0x80>
 8010fc0:	08013642 	.word	0x08013642
 8010fc4:	08013653 	.word	0x08013653

08010fc8 <__pow5mult>:
 8010fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fcc:	4615      	mov	r5, r2
 8010fce:	f012 0203 	ands.w	r2, r2, #3
 8010fd2:	4607      	mov	r7, r0
 8010fd4:	460e      	mov	r6, r1
 8010fd6:	d007      	beq.n	8010fe8 <__pow5mult+0x20>
 8010fd8:	4c25      	ldr	r4, [pc, #148]	@ (8011070 <__pow5mult+0xa8>)
 8010fda:	3a01      	subs	r2, #1
 8010fdc:	2300      	movs	r3, #0
 8010fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010fe2:	f7ff fea7 	bl	8010d34 <__multadd>
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	10ad      	asrs	r5, r5, #2
 8010fea:	d03d      	beq.n	8011068 <__pow5mult+0xa0>
 8010fec:	69fc      	ldr	r4, [r7, #28]
 8010fee:	b97c      	cbnz	r4, 8011010 <__pow5mult+0x48>
 8010ff0:	2010      	movs	r0, #16
 8010ff2:	f7fd ffdd 	bl	800efb0 <malloc>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	61f8      	str	r0, [r7, #28]
 8010ffa:	b928      	cbnz	r0, 8011008 <__pow5mult+0x40>
 8010ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8011074 <__pow5mult+0xac>)
 8010ffe:	481e      	ldr	r0, [pc, #120]	@ (8011078 <__pow5mult+0xb0>)
 8011000:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011004:	f000 ff88 	bl	8011f18 <__assert_func>
 8011008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801100c:	6004      	str	r4, [r0, #0]
 801100e:	60c4      	str	r4, [r0, #12]
 8011010:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011018:	b94c      	cbnz	r4, 801102e <__pow5mult+0x66>
 801101a:	f240 2171 	movw	r1, #625	@ 0x271
 801101e:	4638      	mov	r0, r7
 8011020:	f7ff ff1a 	bl	8010e58 <__i2b>
 8011024:	2300      	movs	r3, #0
 8011026:	f8c8 0008 	str.w	r0, [r8, #8]
 801102a:	4604      	mov	r4, r0
 801102c:	6003      	str	r3, [r0, #0]
 801102e:	f04f 0900 	mov.w	r9, #0
 8011032:	07eb      	lsls	r3, r5, #31
 8011034:	d50a      	bpl.n	801104c <__pow5mult+0x84>
 8011036:	4631      	mov	r1, r6
 8011038:	4622      	mov	r2, r4
 801103a:	4638      	mov	r0, r7
 801103c:	f7ff ff22 	bl	8010e84 <__multiply>
 8011040:	4631      	mov	r1, r6
 8011042:	4680      	mov	r8, r0
 8011044:	4638      	mov	r0, r7
 8011046:	f7ff fe53 	bl	8010cf0 <_Bfree>
 801104a:	4646      	mov	r6, r8
 801104c:	106d      	asrs	r5, r5, #1
 801104e:	d00b      	beq.n	8011068 <__pow5mult+0xa0>
 8011050:	6820      	ldr	r0, [r4, #0]
 8011052:	b938      	cbnz	r0, 8011064 <__pow5mult+0x9c>
 8011054:	4622      	mov	r2, r4
 8011056:	4621      	mov	r1, r4
 8011058:	4638      	mov	r0, r7
 801105a:	f7ff ff13 	bl	8010e84 <__multiply>
 801105e:	6020      	str	r0, [r4, #0]
 8011060:	f8c0 9000 	str.w	r9, [r0]
 8011064:	4604      	mov	r4, r0
 8011066:	e7e4      	b.n	8011032 <__pow5mult+0x6a>
 8011068:	4630      	mov	r0, r6
 801106a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801106e:	bf00      	nop
 8011070:	08013720 	.word	0x08013720
 8011074:	080135d3 	.word	0x080135d3
 8011078:	08013653 	.word	0x08013653

0801107c <__lshift>:
 801107c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011080:	460c      	mov	r4, r1
 8011082:	6849      	ldr	r1, [r1, #4]
 8011084:	6923      	ldr	r3, [r4, #16]
 8011086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801108a:	68a3      	ldr	r3, [r4, #8]
 801108c:	4607      	mov	r7, r0
 801108e:	4691      	mov	r9, r2
 8011090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011094:	f108 0601 	add.w	r6, r8, #1
 8011098:	42b3      	cmp	r3, r6
 801109a:	db0b      	blt.n	80110b4 <__lshift+0x38>
 801109c:	4638      	mov	r0, r7
 801109e:	f7ff fde7 	bl	8010c70 <_Balloc>
 80110a2:	4605      	mov	r5, r0
 80110a4:	b948      	cbnz	r0, 80110ba <__lshift+0x3e>
 80110a6:	4602      	mov	r2, r0
 80110a8:	4b28      	ldr	r3, [pc, #160]	@ (801114c <__lshift+0xd0>)
 80110aa:	4829      	ldr	r0, [pc, #164]	@ (8011150 <__lshift+0xd4>)
 80110ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80110b0:	f000 ff32 	bl	8011f18 <__assert_func>
 80110b4:	3101      	adds	r1, #1
 80110b6:	005b      	lsls	r3, r3, #1
 80110b8:	e7ee      	b.n	8011098 <__lshift+0x1c>
 80110ba:	2300      	movs	r3, #0
 80110bc:	f100 0114 	add.w	r1, r0, #20
 80110c0:	f100 0210 	add.w	r2, r0, #16
 80110c4:	4618      	mov	r0, r3
 80110c6:	4553      	cmp	r3, sl
 80110c8:	db33      	blt.n	8011132 <__lshift+0xb6>
 80110ca:	6920      	ldr	r0, [r4, #16]
 80110cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80110d0:	f104 0314 	add.w	r3, r4, #20
 80110d4:	f019 091f 	ands.w	r9, r9, #31
 80110d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80110dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80110e0:	d02b      	beq.n	801113a <__lshift+0xbe>
 80110e2:	f1c9 0e20 	rsb	lr, r9, #32
 80110e6:	468a      	mov	sl, r1
 80110e8:	2200      	movs	r2, #0
 80110ea:	6818      	ldr	r0, [r3, #0]
 80110ec:	fa00 f009 	lsl.w	r0, r0, r9
 80110f0:	4310      	orrs	r0, r2
 80110f2:	f84a 0b04 	str.w	r0, [sl], #4
 80110f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80110fa:	459c      	cmp	ip, r3
 80110fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8011100:	d8f3      	bhi.n	80110ea <__lshift+0x6e>
 8011102:	ebac 0304 	sub.w	r3, ip, r4
 8011106:	3b15      	subs	r3, #21
 8011108:	f023 0303 	bic.w	r3, r3, #3
 801110c:	3304      	adds	r3, #4
 801110e:	f104 0015 	add.w	r0, r4, #21
 8011112:	4560      	cmp	r0, ip
 8011114:	bf88      	it	hi
 8011116:	2304      	movhi	r3, #4
 8011118:	50ca      	str	r2, [r1, r3]
 801111a:	b10a      	cbz	r2, 8011120 <__lshift+0xa4>
 801111c:	f108 0602 	add.w	r6, r8, #2
 8011120:	3e01      	subs	r6, #1
 8011122:	4638      	mov	r0, r7
 8011124:	612e      	str	r6, [r5, #16]
 8011126:	4621      	mov	r1, r4
 8011128:	f7ff fde2 	bl	8010cf0 <_Bfree>
 801112c:	4628      	mov	r0, r5
 801112e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011132:	f842 0f04 	str.w	r0, [r2, #4]!
 8011136:	3301      	adds	r3, #1
 8011138:	e7c5      	b.n	80110c6 <__lshift+0x4a>
 801113a:	3904      	subs	r1, #4
 801113c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011140:	f841 2f04 	str.w	r2, [r1, #4]!
 8011144:	459c      	cmp	ip, r3
 8011146:	d8f9      	bhi.n	801113c <__lshift+0xc0>
 8011148:	e7ea      	b.n	8011120 <__lshift+0xa4>
 801114a:	bf00      	nop
 801114c:	08013642 	.word	0x08013642
 8011150:	08013653 	.word	0x08013653

08011154 <__mcmp>:
 8011154:	690a      	ldr	r2, [r1, #16]
 8011156:	4603      	mov	r3, r0
 8011158:	6900      	ldr	r0, [r0, #16]
 801115a:	1a80      	subs	r0, r0, r2
 801115c:	b530      	push	{r4, r5, lr}
 801115e:	d10e      	bne.n	801117e <__mcmp+0x2a>
 8011160:	3314      	adds	r3, #20
 8011162:	3114      	adds	r1, #20
 8011164:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011168:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801116c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011174:	4295      	cmp	r5, r2
 8011176:	d003      	beq.n	8011180 <__mcmp+0x2c>
 8011178:	d205      	bcs.n	8011186 <__mcmp+0x32>
 801117a:	f04f 30ff 	mov.w	r0, #4294967295
 801117e:	bd30      	pop	{r4, r5, pc}
 8011180:	42a3      	cmp	r3, r4
 8011182:	d3f3      	bcc.n	801116c <__mcmp+0x18>
 8011184:	e7fb      	b.n	801117e <__mcmp+0x2a>
 8011186:	2001      	movs	r0, #1
 8011188:	e7f9      	b.n	801117e <__mcmp+0x2a>
	...

0801118c <__mdiff>:
 801118c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011190:	4689      	mov	r9, r1
 8011192:	4606      	mov	r6, r0
 8011194:	4611      	mov	r1, r2
 8011196:	4648      	mov	r0, r9
 8011198:	4614      	mov	r4, r2
 801119a:	f7ff ffdb 	bl	8011154 <__mcmp>
 801119e:	1e05      	subs	r5, r0, #0
 80111a0:	d112      	bne.n	80111c8 <__mdiff+0x3c>
 80111a2:	4629      	mov	r1, r5
 80111a4:	4630      	mov	r0, r6
 80111a6:	f7ff fd63 	bl	8010c70 <_Balloc>
 80111aa:	4602      	mov	r2, r0
 80111ac:	b928      	cbnz	r0, 80111ba <__mdiff+0x2e>
 80111ae:	4b3f      	ldr	r3, [pc, #252]	@ (80112ac <__mdiff+0x120>)
 80111b0:	f240 2137 	movw	r1, #567	@ 0x237
 80111b4:	483e      	ldr	r0, [pc, #248]	@ (80112b0 <__mdiff+0x124>)
 80111b6:	f000 feaf 	bl	8011f18 <__assert_func>
 80111ba:	2301      	movs	r3, #1
 80111bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80111c0:	4610      	mov	r0, r2
 80111c2:	b003      	add	sp, #12
 80111c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c8:	bfbc      	itt	lt
 80111ca:	464b      	movlt	r3, r9
 80111cc:	46a1      	movlt	r9, r4
 80111ce:	4630      	mov	r0, r6
 80111d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80111d4:	bfba      	itte	lt
 80111d6:	461c      	movlt	r4, r3
 80111d8:	2501      	movlt	r5, #1
 80111da:	2500      	movge	r5, #0
 80111dc:	f7ff fd48 	bl	8010c70 <_Balloc>
 80111e0:	4602      	mov	r2, r0
 80111e2:	b918      	cbnz	r0, 80111ec <__mdiff+0x60>
 80111e4:	4b31      	ldr	r3, [pc, #196]	@ (80112ac <__mdiff+0x120>)
 80111e6:	f240 2145 	movw	r1, #581	@ 0x245
 80111ea:	e7e3      	b.n	80111b4 <__mdiff+0x28>
 80111ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80111f0:	6926      	ldr	r6, [r4, #16]
 80111f2:	60c5      	str	r5, [r0, #12]
 80111f4:	f109 0310 	add.w	r3, r9, #16
 80111f8:	f109 0514 	add.w	r5, r9, #20
 80111fc:	f104 0e14 	add.w	lr, r4, #20
 8011200:	f100 0b14 	add.w	fp, r0, #20
 8011204:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011208:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801120c:	9301      	str	r3, [sp, #4]
 801120e:	46d9      	mov	r9, fp
 8011210:	f04f 0c00 	mov.w	ip, #0
 8011214:	9b01      	ldr	r3, [sp, #4]
 8011216:	f85e 0b04 	ldr.w	r0, [lr], #4
 801121a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801121e:	9301      	str	r3, [sp, #4]
 8011220:	fa1f f38a 	uxth.w	r3, sl
 8011224:	4619      	mov	r1, r3
 8011226:	b283      	uxth	r3, r0
 8011228:	1acb      	subs	r3, r1, r3
 801122a:	0c00      	lsrs	r0, r0, #16
 801122c:	4463      	add	r3, ip
 801122e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011232:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011236:	b29b      	uxth	r3, r3
 8011238:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801123c:	4576      	cmp	r6, lr
 801123e:	f849 3b04 	str.w	r3, [r9], #4
 8011242:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011246:	d8e5      	bhi.n	8011214 <__mdiff+0x88>
 8011248:	1b33      	subs	r3, r6, r4
 801124a:	3b15      	subs	r3, #21
 801124c:	f023 0303 	bic.w	r3, r3, #3
 8011250:	3415      	adds	r4, #21
 8011252:	3304      	adds	r3, #4
 8011254:	42a6      	cmp	r6, r4
 8011256:	bf38      	it	cc
 8011258:	2304      	movcc	r3, #4
 801125a:	441d      	add	r5, r3
 801125c:	445b      	add	r3, fp
 801125e:	461e      	mov	r6, r3
 8011260:	462c      	mov	r4, r5
 8011262:	4544      	cmp	r4, r8
 8011264:	d30e      	bcc.n	8011284 <__mdiff+0xf8>
 8011266:	f108 0103 	add.w	r1, r8, #3
 801126a:	1b49      	subs	r1, r1, r5
 801126c:	f021 0103 	bic.w	r1, r1, #3
 8011270:	3d03      	subs	r5, #3
 8011272:	45a8      	cmp	r8, r5
 8011274:	bf38      	it	cc
 8011276:	2100      	movcc	r1, #0
 8011278:	440b      	add	r3, r1
 801127a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801127e:	b191      	cbz	r1, 80112a6 <__mdiff+0x11a>
 8011280:	6117      	str	r7, [r2, #16]
 8011282:	e79d      	b.n	80111c0 <__mdiff+0x34>
 8011284:	f854 1b04 	ldr.w	r1, [r4], #4
 8011288:	46e6      	mov	lr, ip
 801128a:	0c08      	lsrs	r0, r1, #16
 801128c:	fa1c fc81 	uxtah	ip, ip, r1
 8011290:	4471      	add	r1, lr
 8011292:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011296:	b289      	uxth	r1, r1
 8011298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801129c:	f846 1b04 	str.w	r1, [r6], #4
 80112a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80112a4:	e7dd      	b.n	8011262 <__mdiff+0xd6>
 80112a6:	3f01      	subs	r7, #1
 80112a8:	e7e7      	b.n	801127a <__mdiff+0xee>
 80112aa:	bf00      	nop
 80112ac:	08013642 	.word	0x08013642
 80112b0:	08013653 	.word	0x08013653

080112b4 <__d2b>:
 80112b4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80112b8:	2101      	movs	r1, #1
 80112ba:	9e08      	ldr	r6, [sp, #32]
 80112bc:	4690      	mov	r8, r2
 80112be:	4699      	mov	r9, r3
 80112c0:	f7ff fcd6 	bl	8010c70 <_Balloc>
 80112c4:	4604      	mov	r4, r0
 80112c6:	b930      	cbnz	r0, 80112d6 <__d2b+0x22>
 80112c8:	4602      	mov	r2, r0
 80112ca:	4b24      	ldr	r3, [pc, #144]	@ (801135c <__d2b+0xa8>)
 80112cc:	4824      	ldr	r0, [pc, #144]	@ (8011360 <__d2b+0xac>)
 80112ce:	f240 310f 	movw	r1, #783	@ 0x30f
 80112d2:	f000 fe21 	bl	8011f18 <__assert_func>
 80112d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80112da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80112de:	b10d      	cbz	r5, 80112e4 <__d2b+0x30>
 80112e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80112e4:	9301      	str	r3, [sp, #4]
 80112e6:	f1b8 0300 	subs.w	r3, r8, #0
 80112ea:	d024      	beq.n	8011336 <__d2b+0x82>
 80112ec:	4668      	mov	r0, sp
 80112ee:	9300      	str	r3, [sp, #0]
 80112f0:	f7ff fd85 	bl	8010dfe <__lo0bits>
 80112f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80112f8:	b1d8      	cbz	r0, 8011332 <__d2b+0x7e>
 80112fa:	f1c0 0320 	rsb	r3, r0, #32
 80112fe:	fa02 f303 	lsl.w	r3, r2, r3
 8011302:	430b      	orrs	r3, r1
 8011304:	40c2      	lsrs	r2, r0
 8011306:	6163      	str	r3, [r4, #20]
 8011308:	9201      	str	r2, [sp, #4]
 801130a:	9b01      	ldr	r3, [sp, #4]
 801130c:	61a3      	str	r3, [r4, #24]
 801130e:	2b00      	cmp	r3, #0
 8011310:	bf0c      	ite	eq
 8011312:	2201      	moveq	r2, #1
 8011314:	2202      	movne	r2, #2
 8011316:	6122      	str	r2, [r4, #16]
 8011318:	b1ad      	cbz	r5, 8011346 <__d2b+0x92>
 801131a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801131e:	4405      	add	r5, r0
 8011320:	6035      	str	r5, [r6, #0]
 8011322:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011328:	6018      	str	r0, [r3, #0]
 801132a:	4620      	mov	r0, r4
 801132c:	b002      	add	sp, #8
 801132e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8011332:	6161      	str	r1, [r4, #20]
 8011334:	e7e9      	b.n	801130a <__d2b+0x56>
 8011336:	a801      	add	r0, sp, #4
 8011338:	f7ff fd61 	bl	8010dfe <__lo0bits>
 801133c:	9b01      	ldr	r3, [sp, #4]
 801133e:	6163      	str	r3, [r4, #20]
 8011340:	3020      	adds	r0, #32
 8011342:	2201      	movs	r2, #1
 8011344:	e7e7      	b.n	8011316 <__d2b+0x62>
 8011346:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801134a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801134e:	6030      	str	r0, [r6, #0]
 8011350:	6918      	ldr	r0, [r3, #16]
 8011352:	f7ff fd35 	bl	8010dc0 <__hi0bits>
 8011356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801135a:	e7e4      	b.n	8011326 <__d2b+0x72>
 801135c:	08013642 	.word	0x08013642
 8011360:	08013653 	.word	0x08013653

08011364 <_malloc_usable_size_r>:
 8011364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011368:	1f18      	subs	r0, r3, #4
 801136a:	2b00      	cmp	r3, #0
 801136c:	bfbc      	itt	lt
 801136e:	580b      	ldrlt	r3, [r1, r0]
 8011370:	18c0      	addlt	r0, r0, r3
 8011372:	4770      	bx	lr

08011374 <__ssputs_r>:
 8011374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011378:	688e      	ldr	r6, [r1, #8]
 801137a:	461f      	mov	r7, r3
 801137c:	42be      	cmp	r6, r7
 801137e:	680b      	ldr	r3, [r1, #0]
 8011380:	4682      	mov	sl, r0
 8011382:	460c      	mov	r4, r1
 8011384:	4690      	mov	r8, r2
 8011386:	d82d      	bhi.n	80113e4 <__ssputs_r+0x70>
 8011388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801138c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011390:	d026      	beq.n	80113e0 <__ssputs_r+0x6c>
 8011392:	6965      	ldr	r5, [r4, #20]
 8011394:	6909      	ldr	r1, [r1, #16]
 8011396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801139a:	eba3 0901 	sub.w	r9, r3, r1
 801139e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80113a2:	1c7b      	adds	r3, r7, #1
 80113a4:	444b      	add	r3, r9
 80113a6:	106d      	asrs	r5, r5, #1
 80113a8:	429d      	cmp	r5, r3
 80113aa:	bf38      	it	cc
 80113ac:	461d      	movcc	r5, r3
 80113ae:	0553      	lsls	r3, r2, #21
 80113b0:	d527      	bpl.n	8011402 <__ssputs_r+0x8e>
 80113b2:	4629      	mov	r1, r5
 80113b4:	f7fd fe2e 	bl	800f014 <_malloc_r>
 80113b8:	4606      	mov	r6, r0
 80113ba:	b360      	cbz	r0, 8011416 <__ssputs_r+0xa2>
 80113bc:	6921      	ldr	r1, [r4, #16]
 80113be:	464a      	mov	r2, r9
 80113c0:	f7fe fdbf 	bl	800ff42 <memcpy>
 80113c4:	89a3      	ldrh	r3, [r4, #12]
 80113c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80113ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113ce:	81a3      	strh	r3, [r4, #12]
 80113d0:	6126      	str	r6, [r4, #16]
 80113d2:	6165      	str	r5, [r4, #20]
 80113d4:	444e      	add	r6, r9
 80113d6:	eba5 0509 	sub.w	r5, r5, r9
 80113da:	6026      	str	r6, [r4, #0]
 80113dc:	60a5      	str	r5, [r4, #8]
 80113de:	463e      	mov	r6, r7
 80113e0:	42be      	cmp	r6, r7
 80113e2:	d900      	bls.n	80113e6 <__ssputs_r+0x72>
 80113e4:	463e      	mov	r6, r7
 80113e6:	6820      	ldr	r0, [r4, #0]
 80113e8:	4632      	mov	r2, r6
 80113ea:	4641      	mov	r1, r8
 80113ec:	f000 fd57 	bl	8011e9e <memmove>
 80113f0:	68a3      	ldr	r3, [r4, #8]
 80113f2:	1b9b      	subs	r3, r3, r6
 80113f4:	60a3      	str	r3, [r4, #8]
 80113f6:	6823      	ldr	r3, [r4, #0]
 80113f8:	4433      	add	r3, r6
 80113fa:	6023      	str	r3, [r4, #0]
 80113fc:	2000      	movs	r0, #0
 80113fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011402:	462a      	mov	r2, r5
 8011404:	f7fd fe9a 	bl	800f13c <_realloc_r>
 8011408:	4606      	mov	r6, r0
 801140a:	2800      	cmp	r0, #0
 801140c:	d1e0      	bne.n	80113d0 <__ssputs_r+0x5c>
 801140e:	6921      	ldr	r1, [r4, #16]
 8011410:	4650      	mov	r0, sl
 8011412:	f7ff fbe3 	bl	8010bdc <_free_r>
 8011416:	230c      	movs	r3, #12
 8011418:	f8ca 3000 	str.w	r3, [sl]
 801141c:	89a3      	ldrh	r3, [r4, #12]
 801141e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011422:	81a3      	strh	r3, [r4, #12]
 8011424:	f04f 30ff 	mov.w	r0, #4294967295
 8011428:	e7e9      	b.n	80113fe <__ssputs_r+0x8a>
	...

0801142c <_svfiprintf_r>:
 801142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011430:	4698      	mov	r8, r3
 8011432:	898b      	ldrh	r3, [r1, #12]
 8011434:	061b      	lsls	r3, r3, #24
 8011436:	b09d      	sub	sp, #116	@ 0x74
 8011438:	4607      	mov	r7, r0
 801143a:	460d      	mov	r5, r1
 801143c:	4614      	mov	r4, r2
 801143e:	d510      	bpl.n	8011462 <_svfiprintf_r+0x36>
 8011440:	690b      	ldr	r3, [r1, #16]
 8011442:	b973      	cbnz	r3, 8011462 <_svfiprintf_r+0x36>
 8011444:	2140      	movs	r1, #64	@ 0x40
 8011446:	f7fd fde5 	bl	800f014 <_malloc_r>
 801144a:	6028      	str	r0, [r5, #0]
 801144c:	6128      	str	r0, [r5, #16]
 801144e:	b930      	cbnz	r0, 801145e <_svfiprintf_r+0x32>
 8011450:	230c      	movs	r3, #12
 8011452:	603b      	str	r3, [r7, #0]
 8011454:	f04f 30ff 	mov.w	r0, #4294967295
 8011458:	b01d      	add	sp, #116	@ 0x74
 801145a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801145e:	2340      	movs	r3, #64	@ 0x40
 8011460:	616b      	str	r3, [r5, #20]
 8011462:	2300      	movs	r3, #0
 8011464:	9309      	str	r3, [sp, #36]	@ 0x24
 8011466:	2320      	movs	r3, #32
 8011468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801146c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011470:	2330      	movs	r3, #48	@ 0x30
 8011472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011610 <_svfiprintf_r+0x1e4>
 8011476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801147a:	f04f 0901 	mov.w	r9, #1
 801147e:	4623      	mov	r3, r4
 8011480:	469a      	mov	sl, r3
 8011482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011486:	b10a      	cbz	r2, 801148c <_svfiprintf_r+0x60>
 8011488:	2a25      	cmp	r2, #37	@ 0x25
 801148a:	d1f9      	bne.n	8011480 <_svfiprintf_r+0x54>
 801148c:	ebba 0b04 	subs.w	fp, sl, r4
 8011490:	d00b      	beq.n	80114aa <_svfiprintf_r+0x7e>
 8011492:	465b      	mov	r3, fp
 8011494:	4622      	mov	r2, r4
 8011496:	4629      	mov	r1, r5
 8011498:	4638      	mov	r0, r7
 801149a:	f7ff ff6b 	bl	8011374 <__ssputs_r>
 801149e:	3001      	adds	r0, #1
 80114a0:	f000 80a7 	beq.w	80115f2 <_svfiprintf_r+0x1c6>
 80114a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114a6:	445a      	add	r2, fp
 80114a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80114aa:	f89a 3000 	ldrb.w	r3, [sl]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	f000 809f 	beq.w	80115f2 <_svfiprintf_r+0x1c6>
 80114b4:	2300      	movs	r3, #0
 80114b6:	f04f 32ff 	mov.w	r2, #4294967295
 80114ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114be:	f10a 0a01 	add.w	sl, sl, #1
 80114c2:	9304      	str	r3, [sp, #16]
 80114c4:	9307      	str	r3, [sp, #28]
 80114c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80114ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80114cc:	4654      	mov	r4, sl
 80114ce:	2205      	movs	r2, #5
 80114d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114d4:	484e      	ldr	r0, [pc, #312]	@ (8011610 <_svfiprintf_r+0x1e4>)
 80114d6:	f7ee fec3 	bl	8000260 <memchr>
 80114da:	9a04      	ldr	r2, [sp, #16]
 80114dc:	b9d8      	cbnz	r0, 8011516 <_svfiprintf_r+0xea>
 80114de:	06d0      	lsls	r0, r2, #27
 80114e0:	bf44      	itt	mi
 80114e2:	2320      	movmi	r3, #32
 80114e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80114e8:	0711      	lsls	r1, r2, #28
 80114ea:	bf44      	itt	mi
 80114ec:	232b      	movmi	r3, #43	@ 0x2b
 80114ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80114f2:	f89a 3000 	ldrb.w	r3, [sl]
 80114f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80114f8:	d015      	beq.n	8011526 <_svfiprintf_r+0xfa>
 80114fa:	9a07      	ldr	r2, [sp, #28]
 80114fc:	4654      	mov	r4, sl
 80114fe:	2000      	movs	r0, #0
 8011500:	f04f 0c0a 	mov.w	ip, #10
 8011504:	4621      	mov	r1, r4
 8011506:	f811 3b01 	ldrb.w	r3, [r1], #1
 801150a:	3b30      	subs	r3, #48	@ 0x30
 801150c:	2b09      	cmp	r3, #9
 801150e:	d94b      	bls.n	80115a8 <_svfiprintf_r+0x17c>
 8011510:	b1b0      	cbz	r0, 8011540 <_svfiprintf_r+0x114>
 8011512:	9207      	str	r2, [sp, #28]
 8011514:	e014      	b.n	8011540 <_svfiprintf_r+0x114>
 8011516:	eba0 0308 	sub.w	r3, r0, r8
 801151a:	fa09 f303 	lsl.w	r3, r9, r3
 801151e:	4313      	orrs	r3, r2
 8011520:	9304      	str	r3, [sp, #16]
 8011522:	46a2      	mov	sl, r4
 8011524:	e7d2      	b.n	80114cc <_svfiprintf_r+0xa0>
 8011526:	9b03      	ldr	r3, [sp, #12]
 8011528:	1d19      	adds	r1, r3, #4
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	9103      	str	r1, [sp, #12]
 801152e:	2b00      	cmp	r3, #0
 8011530:	bfbb      	ittet	lt
 8011532:	425b      	neglt	r3, r3
 8011534:	f042 0202 	orrlt.w	r2, r2, #2
 8011538:	9307      	strge	r3, [sp, #28]
 801153a:	9307      	strlt	r3, [sp, #28]
 801153c:	bfb8      	it	lt
 801153e:	9204      	strlt	r2, [sp, #16]
 8011540:	7823      	ldrb	r3, [r4, #0]
 8011542:	2b2e      	cmp	r3, #46	@ 0x2e
 8011544:	d10a      	bne.n	801155c <_svfiprintf_r+0x130>
 8011546:	7863      	ldrb	r3, [r4, #1]
 8011548:	2b2a      	cmp	r3, #42	@ 0x2a
 801154a:	d132      	bne.n	80115b2 <_svfiprintf_r+0x186>
 801154c:	9b03      	ldr	r3, [sp, #12]
 801154e:	1d1a      	adds	r2, r3, #4
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	9203      	str	r2, [sp, #12]
 8011554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011558:	3402      	adds	r4, #2
 801155a:	9305      	str	r3, [sp, #20]
 801155c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011620 <_svfiprintf_r+0x1f4>
 8011560:	7821      	ldrb	r1, [r4, #0]
 8011562:	2203      	movs	r2, #3
 8011564:	4650      	mov	r0, sl
 8011566:	f7ee fe7b 	bl	8000260 <memchr>
 801156a:	b138      	cbz	r0, 801157c <_svfiprintf_r+0x150>
 801156c:	9b04      	ldr	r3, [sp, #16]
 801156e:	eba0 000a 	sub.w	r0, r0, sl
 8011572:	2240      	movs	r2, #64	@ 0x40
 8011574:	4082      	lsls	r2, r0
 8011576:	4313      	orrs	r3, r2
 8011578:	3401      	adds	r4, #1
 801157a:	9304      	str	r3, [sp, #16]
 801157c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011580:	4824      	ldr	r0, [pc, #144]	@ (8011614 <_svfiprintf_r+0x1e8>)
 8011582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011586:	2206      	movs	r2, #6
 8011588:	f7ee fe6a 	bl	8000260 <memchr>
 801158c:	2800      	cmp	r0, #0
 801158e:	d036      	beq.n	80115fe <_svfiprintf_r+0x1d2>
 8011590:	4b21      	ldr	r3, [pc, #132]	@ (8011618 <_svfiprintf_r+0x1ec>)
 8011592:	bb1b      	cbnz	r3, 80115dc <_svfiprintf_r+0x1b0>
 8011594:	9b03      	ldr	r3, [sp, #12]
 8011596:	3307      	adds	r3, #7
 8011598:	f023 0307 	bic.w	r3, r3, #7
 801159c:	3308      	adds	r3, #8
 801159e:	9303      	str	r3, [sp, #12]
 80115a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115a2:	4433      	add	r3, r6
 80115a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80115a6:	e76a      	b.n	801147e <_svfiprintf_r+0x52>
 80115a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80115ac:	460c      	mov	r4, r1
 80115ae:	2001      	movs	r0, #1
 80115b0:	e7a8      	b.n	8011504 <_svfiprintf_r+0xd8>
 80115b2:	2300      	movs	r3, #0
 80115b4:	3401      	adds	r4, #1
 80115b6:	9305      	str	r3, [sp, #20]
 80115b8:	4619      	mov	r1, r3
 80115ba:	f04f 0c0a 	mov.w	ip, #10
 80115be:	4620      	mov	r0, r4
 80115c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115c4:	3a30      	subs	r2, #48	@ 0x30
 80115c6:	2a09      	cmp	r2, #9
 80115c8:	d903      	bls.n	80115d2 <_svfiprintf_r+0x1a6>
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d0c6      	beq.n	801155c <_svfiprintf_r+0x130>
 80115ce:	9105      	str	r1, [sp, #20]
 80115d0:	e7c4      	b.n	801155c <_svfiprintf_r+0x130>
 80115d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80115d6:	4604      	mov	r4, r0
 80115d8:	2301      	movs	r3, #1
 80115da:	e7f0      	b.n	80115be <_svfiprintf_r+0x192>
 80115dc:	ab03      	add	r3, sp, #12
 80115de:	9300      	str	r3, [sp, #0]
 80115e0:	462a      	mov	r2, r5
 80115e2:	4b0e      	ldr	r3, [pc, #56]	@ (801161c <_svfiprintf_r+0x1f0>)
 80115e4:	a904      	add	r1, sp, #16
 80115e6:	4638      	mov	r0, r7
 80115e8:	f7fd fe66 	bl	800f2b8 <_printf_float>
 80115ec:	1c42      	adds	r2, r0, #1
 80115ee:	4606      	mov	r6, r0
 80115f0:	d1d6      	bne.n	80115a0 <_svfiprintf_r+0x174>
 80115f2:	89ab      	ldrh	r3, [r5, #12]
 80115f4:	065b      	lsls	r3, r3, #25
 80115f6:	f53f af2d 	bmi.w	8011454 <_svfiprintf_r+0x28>
 80115fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80115fc:	e72c      	b.n	8011458 <_svfiprintf_r+0x2c>
 80115fe:	ab03      	add	r3, sp, #12
 8011600:	9300      	str	r3, [sp, #0]
 8011602:	462a      	mov	r2, r5
 8011604:	4b05      	ldr	r3, [pc, #20]	@ (801161c <_svfiprintf_r+0x1f0>)
 8011606:	a904      	add	r1, sp, #16
 8011608:	4638      	mov	r0, r7
 801160a:	f7fe f8e1 	bl	800f7d0 <_printf_i>
 801160e:	e7ed      	b.n	80115ec <_svfiprintf_r+0x1c0>
 8011610:	080136ac 	.word	0x080136ac
 8011614:	080136b6 	.word	0x080136b6
 8011618:	0800f2b9 	.word	0x0800f2b9
 801161c:	08011375 	.word	0x08011375
 8011620:	080136b2 	.word	0x080136b2

08011624 <_sungetc_r>:
 8011624:	b538      	push	{r3, r4, r5, lr}
 8011626:	1c4b      	adds	r3, r1, #1
 8011628:	4614      	mov	r4, r2
 801162a:	d103      	bne.n	8011634 <_sungetc_r+0x10>
 801162c:	f04f 35ff 	mov.w	r5, #4294967295
 8011630:	4628      	mov	r0, r5
 8011632:	bd38      	pop	{r3, r4, r5, pc}
 8011634:	8993      	ldrh	r3, [r2, #12]
 8011636:	f023 0320 	bic.w	r3, r3, #32
 801163a:	8193      	strh	r3, [r2, #12]
 801163c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801163e:	6852      	ldr	r2, [r2, #4]
 8011640:	b2cd      	uxtb	r5, r1
 8011642:	b18b      	cbz	r3, 8011668 <_sungetc_r+0x44>
 8011644:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011646:	4293      	cmp	r3, r2
 8011648:	dd08      	ble.n	801165c <_sungetc_r+0x38>
 801164a:	6823      	ldr	r3, [r4, #0]
 801164c:	1e5a      	subs	r2, r3, #1
 801164e:	6022      	str	r2, [r4, #0]
 8011650:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011654:	6863      	ldr	r3, [r4, #4]
 8011656:	3301      	adds	r3, #1
 8011658:	6063      	str	r3, [r4, #4]
 801165a:	e7e9      	b.n	8011630 <_sungetc_r+0xc>
 801165c:	4621      	mov	r1, r4
 801165e:	f000 fbe4 	bl	8011e2a <__submore>
 8011662:	2800      	cmp	r0, #0
 8011664:	d0f1      	beq.n	801164a <_sungetc_r+0x26>
 8011666:	e7e1      	b.n	801162c <_sungetc_r+0x8>
 8011668:	6921      	ldr	r1, [r4, #16]
 801166a:	6823      	ldr	r3, [r4, #0]
 801166c:	b151      	cbz	r1, 8011684 <_sungetc_r+0x60>
 801166e:	4299      	cmp	r1, r3
 8011670:	d208      	bcs.n	8011684 <_sungetc_r+0x60>
 8011672:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011676:	42a9      	cmp	r1, r5
 8011678:	d104      	bne.n	8011684 <_sungetc_r+0x60>
 801167a:	3b01      	subs	r3, #1
 801167c:	3201      	adds	r2, #1
 801167e:	6023      	str	r3, [r4, #0]
 8011680:	6062      	str	r2, [r4, #4]
 8011682:	e7d5      	b.n	8011630 <_sungetc_r+0xc>
 8011684:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011688:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801168c:	6363      	str	r3, [r4, #52]	@ 0x34
 801168e:	2303      	movs	r3, #3
 8011690:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011692:	4623      	mov	r3, r4
 8011694:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011698:	6023      	str	r3, [r4, #0]
 801169a:	2301      	movs	r3, #1
 801169c:	e7dc      	b.n	8011658 <_sungetc_r+0x34>

0801169e <__ssrefill_r>:
 801169e:	b510      	push	{r4, lr}
 80116a0:	460c      	mov	r4, r1
 80116a2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80116a4:	b169      	cbz	r1, 80116c2 <__ssrefill_r+0x24>
 80116a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80116aa:	4299      	cmp	r1, r3
 80116ac:	d001      	beq.n	80116b2 <__ssrefill_r+0x14>
 80116ae:	f7ff fa95 	bl	8010bdc <_free_r>
 80116b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80116b4:	6063      	str	r3, [r4, #4]
 80116b6:	2000      	movs	r0, #0
 80116b8:	6360      	str	r0, [r4, #52]	@ 0x34
 80116ba:	b113      	cbz	r3, 80116c2 <__ssrefill_r+0x24>
 80116bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80116be:	6023      	str	r3, [r4, #0]
 80116c0:	bd10      	pop	{r4, pc}
 80116c2:	6923      	ldr	r3, [r4, #16]
 80116c4:	6023      	str	r3, [r4, #0]
 80116c6:	2300      	movs	r3, #0
 80116c8:	6063      	str	r3, [r4, #4]
 80116ca:	89a3      	ldrh	r3, [r4, #12]
 80116cc:	f043 0320 	orr.w	r3, r3, #32
 80116d0:	81a3      	strh	r3, [r4, #12]
 80116d2:	f04f 30ff 	mov.w	r0, #4294967295
 80116d6:	e7f3      	b.n	80116c0 <__ssrefill_r+0x22>

080116d8 <__ssvfiscanf_r>:
 80116d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116dc:	460c      	mov	r4, r1
 80116de:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80116e2:	2100      	movs	r1, #0
 80116e4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80116e8:	49a6      	ldr	r1, [pc, #664]	@ (8011984 <__ssvfiscanf_r+0x2ac>)
 80116ea:	91a0      	str	r1, [sp, #640]	@ 0x280
 80116ec:	f10d 0804 	add.w	r8, sp, #4
 80116f0:	49a5      	ldr	r1, [pc, #660]	@ (8011988 <__ssvfiscanf_r+0x2b0>)
 80116f2:	4fa6      	ldr	r7, [pc, #664]	@ (801198c <__ssvfiscanf_r+0x2b4>)
 80116f4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80116f8:	4606      	mov	r6, r0
 80116fa:	91a1      	str	r1, [sp, #644]	@ 0x284
 80116fc:	9300      	str	r3, [sp, #0]
 80116fe:	f892 9000 	ldrb.w	r9, [r2]
 8011702:	f1b9 0f00 	cmp.w	r9, #0
 8011706:	f000 8158 	beq.w	80119ba <__ssvfiscanf_r+0x2e2>
 801170a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801170e:	f013 0308 	ands.w	r3, r3, #8
 8011712:	f102 0501 	add.w	r5, r2, #1
 8011716:	d019      	beq.n	801174c <__ssvfiscanf_r+0x74>
 8011718:	6863      	ldr	r3, [r4, #4]
 801171a:	2b00      	cmp	r3, #0
 801171c:	dd0f      	ble.n	801173e <__ssvfiscanf_r+0x66>
 801171e:	6823      	ldr	r3, [r4, #0]
 8011720:	781a      	ldrb	r2, [r3, #0]
 8011722:	5cba      	ldrb	r2, [r7, r2]
 8011724:	0712      	lsls	r2, r2, #28
 8011726:	d401      	bmi.n	801172c <__ssvfiscanf_r+0x54>
 8011728:	462a      	mov	r2, r5
 801172a:	e7e8      	b.n	80116fe <__ssvfiscanf_r+0x26>
 801172c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801172e:	3201      	adds	r2, #1
 8011730:	9245      	str	r2, [sp, #276]	@ 0x114
 8011732:	6862      	ldr	r2, [r4, #4]
 8011734:	3301      	adds	r3, #1
 8011736:	3a01      	subs	r2, #1
 8011738:	6062      	str	r2, [r4, #4]
 801173a:	6023      	str	r3, [r4, #0]
 801173c:	e7ec      	b.n	8011718 <__ssvfiscanf_r+0x40>
 801173e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011740:	4621      	mov	r1, r4
 8011742:	4630      	mov	r0, r6
 8011744:	4798      	blx	r3
 8011746:	2800      	cmp	r0, #0
 8011748:	d0e9      	beq.n	801171e <__ssvfiscanf_r+0x46>
 801174a:	e7ed      	b.n	8011728 <__ssvfiscanf_r+0x50>
 801174c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011750:	f040 8085 	bne.w	801185e <__ssvfiscanf_r+0x186>
 8011754:	9341      	str	r3, [sp, #260]	@ 0x104
 8011756:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011758:	7853      	ldrb	r3, [r2, #1]
 801175a:	2b2a      	cmp	r3, #42	@ 0x2a
 801175c:	bf02      	ittt	eq
 801175e:	2310      	moveq	r3, #16
 8011760:	1c95      	addeq	r5, r2, #2
 8011762:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011764:	220a      	movs	r2, #10
 8011766:	46aa      	mov	sl, r5
 8011768:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801176c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011770:	2b09      	cmp	r3, #9
 8011772:	d91e      	bls.n	80117b2 <__ssvfiscanf_r+0xda>
 8011774:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8011990 <__ssvfiscanf_r+0x2b8>
 8011778:	2203      	movs	r2, #3
 801177a:	4658      	mov	r0, fp
 801177c:	f7ee fd70 	bl	8000260 <memchr>
 8011780:	b138      	cbz	r0, 8011792 <__ssvfiscanf_r+0xba>
 8011782:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011784:	eba0 000b 	sub.w	r0, r0, fp
 8011788:	2301      	movs	r3, #1
 801178a:	4083      	lsls	r3, r0
 801178c:	4313      	orrs	r3, r2
 801178e:	9341      	str	r3, [sp, #260]	@ 0x104
 8011790:	4655      	mov	r5, sl
 8011792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011796:	2b78      	cmp	r3, #120	@ 0x78
 8011798:	d806      	bhi.n	80117a8 <__ssvfiscanf_r+0xd0>
 801179a:	2b57      	cmp	r3, #87	@ 0x57
 801179c:	d810      	bhi.n	80117c0 <__ssvfiscanf_r+0xe8>
 801179e:	2b25      	cmp	r3, #37	@ 0x25
 80117a0:	d05d      	beq.n	801185e <__ssvfiscanf_r+0x186>
 80117a2:	d857      	bhi.n	8011854 <__ssvfiscanf_r+0x17c>
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d075      	beq.n	8011894 <__ssvfiscanf_r+0x1bc>
 80117a8:	2303      	movs	r3, #3
 80117aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80117ac:	230a      	movs	r3, #10
 80117ae:	9342      	str	r3, [sp, #264]	@ 0x108
 80117b0:	e088      	b.n	80118c4 <__ssvfiscanf_r+0x1ec>
 80117b2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80117b4:	fb02 1103 	mla	r1, r2, r3, r1
 80117b8:	3930      	subs	r1, #48	@ 0x30
 80117ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 80117bc:	4655      	mov	r5, sl
 80117be:	e7d2      	b.n	8011766 <__ssvfiscanf_r+0x8e>
 80117c0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80117c4:	2a20      	cmp	r2, #32
 80117c6:	d8ef      	bhi.n	80117a8 <__ssvfiscanf_r+0xd0>
 80117c8:	a101      	add	r1, pc, #4	@ (adr r1, 80117d0 <__ssvfiscanf_r+0xf8>)
 80117ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80117ce:	bf00      	nop
 80117d0:	080118a3 	.word	0x080118a3
 80117d4:	080117a9 	.word	0x080117a9
 80117d8:	080117a9 	.word	0x080117a9
 80117dc:	080118fd 	.word	0x080118fd
 80117e0:	080117a9 	.word	0x080117a9
 80117e4:	080117a9 	.word	0x080117a9
 80117e8:	080117a9 	.word	0x080117a9
 80117ec:	080117a9 	.word	0x080117a9
 80117f0:	080117a9 	.word	0x080117a9
 80117f4:	080117a9 	.word	0x080117a9
 80117f8:	080117a9 	.word	0x080117a9
 80117fc:	08011913 	.word	0x08011913
 8011800:	080118f9 	.word	0x080118f9
 8011804:	0801185b 	.word	0x0801185b
 8011808:	0801185b 	.word	0x0801185b
 801180c:	0801185b 	.word	0x0801185b
 8011810:	080117a9 	.word	0x080117a9
 8011814:	080118b5 	.word	0x080118b5
 8011818:	080117a9 	.word	0x080117a9
 801181c:	080117a9 	.word	0x080117a9
 8011820:	080117a9 	.word	0x080117a9
 8011824:	080117a9 	.word	0x080117a9
 8011828:	08011923 	.word	0x08011923
 801182c:	080118bd 	.word	0x080118bd
 8011830:	0801189b 	.word	0x0801189b
 8011834:	080117a9 	.word	0x080117a9
 8011838:	080117a9 	.word	0x080117a9
 801183c:	0801191f 	.word	0x0801191f
 8011840:	080117a9 	.word	0x080117a9
 8011844:	080118f9 	.word	0x080118f9
 8011848:	080117a9 	.word	0x080117a9
 801184c:	080117a9 	.word	0x080117a9
 8011850:	080118a3 	.word	0x080118a3
 8011854:	3b45      	subs	r3, #69	@ 0x45
 8011856:	2b02      	cmp	r3, #2
 8011858:	d8a6      	bhi.n	80117a8 <__ssvfiscanf_r+0xd0>
 801185a:	2305      	movs	r3, #5
 801185c:	e031      	b.n	80118c2 <__ssvfiscanf_r+0x1ea>
 801185e:	6863      	ldr	r3, [r4, #4]
 8011860:	2b00      	cmp	r3, #0
 8011862:	dd0d      	ble.n	8011880 <__ssvfiscanf_r+0x1a8>
 8011864:	6823      	ldr	r3, [r4, #0]
 8011866:	781a      	ldrb	r2, [r3, #0]
 8011868:	454a      	cmp	r2, r9
 801186a:	f040 80a6 	bne.w	80119ba <__ssvfiscanf_r+0x2e2>
 801186e:	3301      	adds	r3, #1
 8011870:	6862      	ldr	r2, [r4, #4]
 8011872:	6023      	str	r3, [r4, #0]
 8011874:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8011876:	3a01      	subs	r2, #1
 8011878:	3301      	adds	r3, #1
 801187a:	6062      	str	r2, [r4, #4]
 801187c:	9345      	str	r3, [sp, #276]	@ 0x114
 801187e:	e753      	b.n	8011728 <__ssvfiscanf_r+0x50>
 8011880:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011882:	4621      	mov	r1, r4
 8011884:	4630      	mov	r0, r6
 8011886:	4798      	blx	r3
 8011888:	2800      	cmp	r0, #0
 801188a:	d0eb      	beq.n	8011864 <__ssvfiscanf_r+0x18c>
 801188c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801188e:	2800      	cmp	r0, #0
 8011890:	f040 808b 	bne.w	80119aa <__ssvfiscanf_r+0x2d2>
 8011894:	f04f 30ff 	mov.w	r0, #4294967295
 8011898:	e08b      	b.n	80119b2 <__ssvfiscanf_r+0x2da>
 801189a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801189c:	f042 0220 	orr.w	r2, r2, #32
 80118a0:	9241      	str	r2, [sp, #260]	@ 0x104
 80118a2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80118a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80118a8:	9241      	str	r2, [sp, #260]	@ 0x104
 80118aa:	2210      	movs	r2, #16
 80118ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80118ae:	9242      	str	r2, [sp, #264]	@ 0x108
 80118b0:	d902      	bls.n	80118b8 <__ssvfiscanf_r+0x1e0>
 80118b2:	e005      	b.n	80118c0 <__ssvfiscanf_r+0x1e8>
 80118b4:	2300      	movs	r3, #0
 80118b6:	9342      	str	r3, [sp, #264]	@ 0x108
 80118b8:	2303      	movs	r3, #3
 80118ba:	e002      	b.n	80118c2 <__ssvfiscanf_r+0x1ea>
 80118bc:	2308      	movs	r3, #8
 80118be:	9342      	str	r3, [sp, #264]	@ 0x108
 80118c0:	2304      	movs	r3, #4
 80118c2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80118c4:	6863      	ldr	r3, [r4, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	dd39      	ble.n	801193e <__ssvfiscanf_r+0x266>
 80118ca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80118cc:	0659      	lsls	r1, r3, #25
 80118ce:	d404      	bmi.n	80118da <__ssvfiscanf_r+0x202>
 80118d0:	6823      	ldr	r3, [r4, #0]
 80118d2:	781a      	ldrb	r2, [r3, #0]
 80118d4:	5cba      	ldrb	r2, [r7, r2]
 80118d6:	0712      	lsls	r2, r2, #28
 80118d8:	d438      	bmi.n	801194c <__ssvfiscanf_r+0x274>
 80118da:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80118dc:	2b02      	cmp	r3, #2
 80118de:	dc47      	bgt.n	8011970 <__ssvfiscanf_r+0x298>
 80118e0:	466b      	mov	r3, sp
 80118e2:	4622      	mov	r2, r4
 80118e4:	a941      	add	r1, sp, #260	@ 0x104
 80118e6:	4630      	mov	r0, r6
 80118e8:	f000 f86c 	bl	80119c4 <_scanf_chars>
 80118ec:	2801      	cmp	r0, #1
 80118ee:	d064      	beq.n	80119ba <__ssvfiscanf_r+0x2e2>
 80118f0:	2802      	cmp	r0, #2
 80118f2:	f47f af19 	bne.w	8011728 <__ssvfiscanf_r+0x50>
 80118f6:	e7c9      	b.n	801188c <__ssvfiscanf_r+0x1b4>
 80118f8:	220a      	movs	r2, #10
 80118fa:	e7d7      	b.n	80118ac <__ssvfiscanf_r+0x1d4>
 80118fc:	4629      	mov	r1, r5
 80118fe:	4640      	mov	r0, r8
 8011900:	f000 fa5a 	bl	8011db8 <__sccl>
 8011904:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801190a:	9341      	str	r3, [sp, #260]	@ 0x104
 801190c:	4605      	mov	r5, r0
 801190e:	2301      	movs	r3, #1
 8011910:	e7d7      	b.n	80118c2 <__ssvfiscanf_r+0x1ea>
 8011912:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011918:	9341      	str	r3, [sp, #260]	@ 0x104
 801191a:	2300      	movs	r3, #0
 801191c:	e7d1      	b.n	80118c2 <__ssvfiscanf_r+0x1ea>
 801191e:	2302      	movs	r3, #2
 8011920:	e7cf      	b.n	80118c2 <__ssvfiscanf_r+0x1ea>
 8011922:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011924:	06c3      	lsls	r3, r0, #27
 8011926:	f53f aeff 	bmi.w	8011728 <__ssvfiscanf_r+0x50>
 801192a:	9b00      	ldr	r3, [sp, #0]
 801192c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801192e:	1d19      	adds	r1, r3, #4
 8011930:	9100      	str	r1, [sp, #0]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	07c0      	lsls	r0, r0, #31
 8011936:	bf4c      	ite	mi
 8011938:	801a      	strhmi	r2, [r3, #0]
 801193a:	601a      	strpl	r2, [r3, #0]
 801193c:	e6f4      	b.n	8011728 <__ssvfiscanf_r+0x50>
 801193e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011940:	4621      	mov	r1, r4
 8011942:	4630      	mov	r0, r6
 8011944:	4798      	blx	r3
 8011946:	2800      	cmp	r0, #0
 8011948:	d0bf      	beq.n	80118ca <__ssvfiscanf_r+0x1f2>
 801194a:	e79f      	b.n	801188c <__ssvfiscanf_r+0x1b4>
 801194c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801194e:	3201      	adds	r2, #1
 8011950:	9245      	str	r2, [sp, #276]	@ 0x114
 8011952:	6862      	ldr	r2, [r4, #4]
 8011954:	3a01      	subs	r2, #1
 8011956:	2a00      	cmp	r2, #0
 8011958:	6062      	str	r2, [r4, #4]
 801195a:	dd02      	ble.n	8011962 <__ssvfiscanf_r+0x28a>
 801195c:	3301      	adds	r3, #1
 801195e:	6023      	str	r3, [r4, #0]
 8011960:	e7b6      	b.n	80118d0 <__ssvfiscanf_r+0x1f8>
 8011962:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011964:	4621      	mov	r1, r4
 8011966:	4630      	mov	r0, r6
 8011968:	4798      	blx	r3
 801196a:	2800      	cmp	r0, #0
 801196c:	d0b0      	beq.n	80118d0 <__ssvfiscanf_r+0x1f8>
 801196e:	e78d      	b.n	801188c <__ssvfiscanf_r+0x1b4>
 8011970:	2b04      	cmp	r3, #4
 8011972:	dc0f      	bgt.n	8011994 <__ssvfiscanf_r+0x2bc>
 8011974:	466b      	mov	r3, sp
 8011976:	4622      	mov	r2, r4
 8011978:	a941      	add	r1, sp, #260	@ 0x104
 801197a:	4630      	mov	r0, r6
 801197c:	f000 f87c 	bl	8011a78 <_scanf_i>
 8011980:	e7b4      	b.n	80118ec <__ssvfiscanf_r+0x214>
 8011982:	bf00      	nop
 8011984:	08011625 	.word	0x08011625
 8011988:	0801169f 	.word	0x0801169f
 801198c:	08013821 	.word	0x08013821
 8011990:	080136b2 	.word	0x080136b2
 8011994:	4b0a      	ldr	r3, [pc, #40]	@ (80119c0 <__ssvfiscanf_r+0x2e8>)
 8011996:	2b00      	cmp	r3, #0
 8011998:	f43f aec6 	beq.w	8011728 <__ssvfiscanf_r+0x50>
 801199c:	466b      	mov	r3, sp
 801199e:	4622      	mov	r2, r4
 80119a0:	a941      	add	r1, sp, #260	@ 0x104
 80119a2:	4630      	mov	r0, r6
 80119a4:	f3af 8000 	nop.w
 80119a8:	e7a0      	b.n	80118ec <__ssvfiscanf_r+0x214>
 80119aa:	89a3      	ldrh	r3, [r4, #12]
 80119ac:	065b      	lsls	r3, r3, #25
 80119ae:	f53f af71 	bmi.w	8011894 <__ssvfiscanf_r+0x1bc>
 80119b2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80119b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ba:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80119bc:	e7f9      	b.n	80119b2 <__ssvfiscanf_r+0x2da>
 80119be:	bf00      	nop
 80119c0:	00000000 	.word	0x00000000

080119c4 <_scanf_chars>:
 80119c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119c8:	4615      	mov	r5, r2
 80119ca:	688a      	ldr	r2, [r1, #8]
 80119cc:	4680      	mov	r8, r0
 80119ce:	460c      	mov	r4, r1
 80119d0:	b932      	cbnz	r2, 80119e0 <_scanf_chars+0x1c>
 80119d2:	698a      	ldr	r2, [r1, #24]
 80119d4:	2a00      	cmp	r2, #0
 80119d6:	bf14      	ite	ne
 80119d8:	f04f 32ff 	movne.w	r2, #4294967295
 80119dc:	2201      	moveq	r2, #1
 80119de:	608a      	str	r2, [r1, #8]
 80119e0:	6822      	ldr	r2, [r4, #0]
 80119e2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011a74 <_scanf_chars+0xb0>
 80119e6:	06d1      	lsls	r1, r2, #27
 80119e8:	bf5f      	itttt	pl
 80119ea:	681a      	ldrpl	r2, [r3, #0]
 80119ec:	1d11      	addpl	r1, r2, #4
 80119ee:	6019      	strpl	r1, [r3, #0]
 80119f0:	6816      	ldrpl	r6, [r2, #0]
 80119f2:	2700      	movs	r7, #0
 80119f4:	69a0      	ldr	r0, [r4, #24]
 80119f6:	b188      	cbz	r0, 8011a1c <_scanf_chars+0x58>
 80119f8:	2801      	cmp	r0, #1
 80119fa:	d107      	bne.n	8011a0c <_scanf_chars+0x48>
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	781a      	ldrb	r2, [r3, #0]
 8011a00:	6963      	ldr	r3, [r4, #20]
 8011a02:	5c9b      	ldrb	r3, [r3, r2]
 8011a04:	b953      	cbnz	r3, 8011a1c <_scanf_chars+0x58>
 8011a06:	2f00      	cmp	r7, #0
 8011a08:	d031      	beq.n	8011a6e <_scanf_chars+0xaa>
 8011a0a:	e022      	b.n	8011a52 <_scanf_chars+0x8e>
 8011a0c:	2802      	cmp	r0, #2
 8011a0e:	d120      	bne.n	8011a52 <_scanf_chars+0x8e>
 8011a10:	682b      	ldr	r3, [r5, #0]
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011a18:	071b      	lsls	r3, r3, #28
 8011a1a:	d41a      	bmi.n	8011a52 <_scanf_chars+0x8e>
 8011a1c:	6823      	ldr	r3, [r4, #0]
 8011a1e:	06da      	lsls	r2, r3, #27
 8011a20:	bf5e      	ittt	pl
 8011a22:	682b      	ldrpl	r3, [r5, #0]
 8011a24:	781b      	ldrbpl	r3, [r3, #0]
 8011a26:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011a2a:	682a      	ldr	r2, [r5, #0]
 8011a2c:	686b      	ldr	r3, [r5, #4]
 8011a2e:	3201      	adds	r2, #1
 8011a30:	602a      	str	r2, [r5, #0]
 8011a32:	68a2      	ldr	r2, [r4, #8]
 8011a34:	3b01      	subs	r3, #1
 8011a36:	3a01      	subs	r2, #1
 8011a38:	606b      	str	r3, [r5, #4]
 8011a3a:	3701      	adds	r7, #1
 8011a3c:	60a2      	str	r2, [r4, #8]
 8011a3e:	b142      	cbz	r2, 8011a52 <_scanf_chars+0x8e>
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	dcd7      	bgt.n	80119f4 <_scanf_chars+0x30>
 8011a44:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011a48:	4629      	mov	r1, r5
 8011a4a:	4640      	mov	r0, r8
 8011a4c:	4798      	blx	r3
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d0d0      	beq.n	80119f4 <_scanf_chars+0x30>
 8011a52:	6823      	ldr	r3, [r4, #0]
 8011a54:	f013 0310 	ands.w	r3, r3, #16
 8011a58:	d105      	bne.n	8011a66 <_scanf_chars+0xa2>
 8011a5a:	68e2      	ldr	r2, [r4, #12]
 8011a5c:	3201      	adds	r2, #1
 8011a5e:	60e2      	str	r2, [r4, #12]
 8011a60:	69a2      	ldr	r2, [r4, #24]
 8011a62:	b102      	cbz	r2, 8011a66 <_scanf_chars+0xa2>
 8011a64:	7033      	strb	r3, [r6, #0]
 8011a66:	6923      	ldr	r3, [r4, #16]
 8011a68:	443b      	add	r3, r7
 8011a6a:	6123      	str	r3, [r4, #16]
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a72:	bf00      	nop
 8011a74:	08013821 	.word	0x08013821

08011a78 <_scanf_i>:
 8011a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7c:	4698      	mov	r8, r3
 8011a7e:	4b74      	ldr	r3, [pc, #464]	@ (8011c50 <_scanf_i+0x1d8>)
 8011a80:	460c      	mov	r4, r1
 8011a82:	4682      	mov	sl, r0
 8011a84:	4616      	mov	r6, r2
 8011a86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011a8a:	b087      	sub	sp, #28
 8011a8c:	ab03      	add	r3, sp, #12
 8011a8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011a92:	4b70      	ldr	r3, [pc, #448]	@ (8011c54 <_scanf_i+0x1dc>)
 8011a94:	69a1      	ldr	r1, [r4, #24]
 8011a96:	4a70      	ldr	r2, [pc, #448]	@ (8011c58 <_scanf_i+0x1e0>)
 8011a98:	2903      	cmp	r1, #3
 8011a9a:	bf08      	it	eq
 8011a9c:	461a      	moveq	r2, r3
 8011a9e:	68a3      	ldr	r3, [r4, #8]
 8011aa0:	9201      	str	r2, [sp, #4]
 8011aa2:	1e5a      	subs	r2, r3, #1
 8011aa4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011aa8:	bf88      	it	hi
 8011aaa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011aae:	4627      	mov	r7, r4
 8011ab0:	bf82      	ittt	hi
 8011ab2:	eb03 0905 	addhi.w	r9, r3, r5
 8011ab6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011aba:	60a3      	strhi	r3, [r4, #8]
 8011abc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011ac0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011ac4:	bf98      	it	ls
 8011ac6:	f04f 0900 	movls.w	r9, #0
 8011aca:	6023      	str	r3, [r4, #0]
 8011acc:	463d      	mov	r5, r7
 8011ace:	f04f 0b00 	mov.w	fp, #0
 8011ad2:	6831      	ldr	r1, [r6, #0]
 8011ad4:	ab03      	add	r3, sp, #12
 8011ad6:	7809      	ldrb	r1, [r1, #0]
 8011ad8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011adc:	2202      	movs	r2, #2
 8011ade:	f7ee fbbf 	bl	8000260 <memchr>
 8011ae2:	b328      	cbz	r0, 8011b30 <_scanf_i+0xb8>
 8011ae4:	f1bb 0f01 	cmp.w	fp, #1
 8011ae8:	d159      	bne.n	8011b9e <_scanf_i+0x126>
 8011aea:	6862      	ldr	r2, [r4, #4]
 8011aec:	b92a      	cbnz	r2, 8011afa <_scanf_i+0x82>
 8011aee:	6822      	ldr	r2, [r4, #0]
 8011af0:	2108      	movs	r1, #8
 8011af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011af6:	6061      	str	r1, [r4, #4]
 8011af8:	6022      	str	r2, [r4, #0]
 8011afa:	6822      	ldr	r2, [r4, #0]
 8011afc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011b00:	6022      	str	r2, [r4, #0]
 8011b02:	68a2      	ldr	r2, [r4, #8]
 8011b04:	1e51      	subs	r1, r2, #1
 8011b06:	60a1      	str	r1, [r4, #8]
 8011b08:	b192      	cbz	r2, 8011b30 <_scanf_i+0xb8>
 8011b0a:	6832      	ldr	r2, [r6, #0]
 8011b0c:	1c51      	adds	r1, r2, #1
 8011b0e:	6031      	str	r1, [r6, #0]
 8011b10:	7812      	ldrb	r2, [r2, #0]
 8011b12:	f805 2b01 	strb.w	r2, [r5], #1
 8011b16:	6872      	ldr	r2, [r6, #4]
 8011b18:	3a01      	subs	r2, #1
 8011b1a:	2a00      	cmp	r2, #0
 8011b1c:	6072      	str	r2, [r6, #4]
 8011b1e:	dc07      	bgt.n	8011b30 <_scanf_i+0xb8>
 8011b20:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011b24:	4631      	mov	r1, r6
 8011b26:	4650      	mov	r0, sl
 8011b28:	4790      	blx	r2
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	f040 8085 	bne.w	8011c3a <_scanf_i+0x1c2>
 8011b30:	f10b 0b01 	add.w	fp, fp, #1
 8011b34:	f1bb 0f03 	cmp.w	fp, #3
 8011b38:	d1cb      	bne.n	8011ad2 <_scanf_i+0x5a>
 8011b3a:	6863      	ldr	r3, [r4, #4]
 8011b3c:	b90b      	cbnz	r3, 8011b42 <_scanf_i+0xca>
 8011b3e:	230a      	movs	r3, #10
 8011b40:	6063      	str	r3, [r4, #4]
 8011b42:	6863      	ldr	r3, [r4, #4]
 8011b44:	4945      	ldr	r1, [pc, #276]	@ (8011c5c <_scanf_i+0x1e4>)
 8011b46:	6960      	ldr	r0, [r4, #20]
 8011b48:	1ac9      	subs	r1, r1, r3
 8011b4a:	f000 f935 	bl	8011db8 <__sccl>
 8011b4e:	f04f 0b00 	mov.w	fp, #0
 8011b52:	68a3      	ldr	r3, [r4, #8]
 8011b54:	6822      	ldr	r2, [r4, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d03d      	beq.n	8011bd6 <_scanf_i+0x15e>
 8011b5a:	6831      	ldr	r1, [r6, #0]
 8011b5c:	6960      	ldr	r0, [r4, #20]
 8011b5e:	f891 c000 	ldrb.w	ip, [r1]
 8011b62:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011b66:	2800      	cmp	r0, #0
 8011b68:	d035      	beq.n	8011bd6 <_scanf_i+0x15e>
 8011b6a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011b6e:	d124      	bne.n	8011bba <_scanf_i+0x142>
 8011b70:	0510      	lsls	r0, r2, #20
 8011b72:	d522      	bpl.n	8011bba <_scanf_i+0x142>
 8011b74:	f10b 0b01 	add.w	fp, fp, #1
 8011b78:	f1b9 0f00 	cmp.w	r9, #0
 8011b7c:	d003      	beq.n	8011b86 <_scanf_i+0x10e>
 8011b7e:	3301      	adds	r3, #1
 8011b80:	f109 39ff 	add.w	r9, r9, #4294967295
 8011b84:	60a3      	str	r3, [r4, #8]
 8011b86:	6873      	ldr	r3, [r6, #4]
 8011b88:	3b01      	subs	r3, #1
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	6073      	str	r3, [r6, #4]
 8011b8e:	dd1b      	ble.n	8011bc8 <_scanf_i+0x150>
 8011b90:	6833      	ldr	r3, [r6, #0]
 8011b92:	3301      	adds	r3, #1
 8011b94:	6033      	str	r3, [r6, #0]
 8011b96:	68a3      	ldr	r3, [r4, #8]
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	60a3      	str	r3, [r4, #8]
 8011b9c:	e7d9      	b.n	8011b52 <_scanf_i+0xda>
 8011b9e:	f1bb 0f02 	cmp.w	fp, #2
 8011ba2:	d1ae      	bne.n	8011b02 <_scanf_i+0x8a>
 8011ba4:	6822      	ldr	r2, [r4, #0]
 8011ba6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011baa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011bae:	d1c4      	bne.n	8011b3a <_scanf_i+0xc2>
 8011bb0:	2110      	movs	r1, #16
 8011bb2:	6061      	str	r1, [r4, #4]
 8011bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011bb8:	e7a2      	b.n	8011b00 <_scanf_i+0x88>
 8011bba:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011bbe:	6022      	str	r2, [r4, #0]
 8011bc0:	780b      	ldrb	r3, [r1, #0]
 8011bc2:	f805 3b01 	strb.w	r3, [r5], #1
 8011bc6:	e7de      	b.n	8011b86 <_scanf_i+0x10e>
 8011bc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011bcc:	4631      	mov	r1, r6
 8011bce:	4650      	mov	r0, sl
 8011bd0:	4798      	blx	r3
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	d0df      	beq.n	8011b96 <_scanf_i+0x11e>
 8011bd6:	6823      	ldr	r3, [r4, #0]
 8011bd8:	05d9      	lsls	r1, r3, #23
 8011bda:	d50d      	bpl.n	8011bf8 <_scanf_i+0x180>
 8011bdc:	42bd      	cmp	r5, r7
 8011bde:	d909      	bls.n	8011bf4 <_scanf_i+0x17c>
 8011be0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011be4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011be8:	4632      	mov	r2, r6
 8011bea:	4650      	mov	r0, sl
 8011bec:	4798      	blx	r3
 8011bee:	f105 39ff 	add.w	r9, r5, #4294967295
 8011bf2:	464d      	mov	r5, r9
 8011bf4:	42bd      	cmp	r5, r7
 8011bf6:	d028      	beq.n	8011c4a <_scanf_i+0x1d2>
 8011bf8:	6822      	ldr	r2, [r4, #0]
 8011bfa:	f012 0210 	ands.w	r2, r2, #16
 8011bfe:	d113      	bne.n	8011c28 <_scanf_i+0x1b0>
 8011c00:	702a      	strb	r2, [r5, #0]
 8011c02:	6863      	ldr	r3, [r4, #4]
 8011c04:	9e01      	ldr	r6, [sp, #4]
 8011c06:	4639      	mov	r1, r7
 8011c08:	4650      	mov	r0, sl
 8011c0a:	47b0      	blx	r6
 8011c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8011c10:	6821      	ldr	r1, [r4, #0]
 8011c12:	1d1a      	adds	r2, r3, #4
 8011c14:	f8c8 2000 	str.w	r2, [r8]
 8011c18:	f011 0f20 	tst.w	r1, #32
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	d00f      	beq.n	8011c40 <_scanf_i+0x1c8>
 8011c20:	6018      	str	r0, [r3, #0]
 8011c22:	68e3      	ldr	r3, [r4, #12]
 8011c24:	3301      	adds	r3, #1
 8011c26:	60e3      	str	r3, [r4, #12]
 8011c28:	6923      	ldr	r3, [r4, #16]
 8011c2a:	1bed      	subs	r5, r5, r7
 8011c2c:	445d      	add	r5, fp
 8011c2e:	442b      	add	r3, r5
 8011c30:	6123      	str	r3, [r4, #16]
 8011c32:	2000      	movs	r0, #0
 8011c34:	b007      	add	sp, #28
 8011c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c3a:	f04f 0b00 	mov.w	fp, #0
 8011c3e:	e7ca      	b.n	8011bd6 <_scanf_i+0x15e>
 8011c40:	07ca      	lsls	r2, r1, #31
 8011c42:	bf4c      	ite	mi
 8011c44:	8018      	strhmi	r0, [r3, #0]
 8011c46:	6018      	strpl	r0, [r3, #0]
 8011c48:	e7eb      	b.n	8011c22 <_scanf_i+0x1aa>
 8011c4a:	2001      	movs	r0, #1
 8011c4c:	e7f2      	b.n	8011c34 <_scanf_i+0x1bc>
 8011c4e:	bf00      	nop
 8011c50:	08012778 	.word	0x08012778
 8011c54:	0801206d 	.word	0x0801206d
 8011c58:	0801214d 	.word	0x0801214d
 8011c5c:	080136cd 	.word	0x080136cd

08011c60 <__sflush_r>:
 8011c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c68:	0716      	lsls	r6, r2, #28
 8011c6a:	4605      	mov	r5, r0
 8011c6c:	460c      	mov	r4, r1
 8011c6e:	d454      	bmi.n	8011d1a <__sflush_r+0xba>
 8011c70:	684b      	ldr	r3, [r1, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	dc02      	bgt.n	8011c7c <__sflush_r+0x1c>
 8011c76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	dd48      	ble.n	8011d0e <__sflush_r+0xae>
 8011c7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c7e:	2e00      	cmp	r6, #0
 8011c80:	d045      	beq.n	8011d0e <__sflush_r+0xae>
 8011c82:	2300      	movs	r3, #0
 8011c84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011c88:	682f      	ldr	r7, [r5, #0]
 8011c8a:	6a21      	ldr	r1, [r4, #32]
 8011c8c:	602b      	str	r3, [r5, #0]
 8011c8e:	d030      	beq.n	8011cf2 <__sflush_r+0x92>
 8011c90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011c92:	89a3      	ldrh	r3, [r4, #12]
 8011c94:	0759      	lsls	r1, r3, #29
 8011c96:	d505      	bpl.n	8011ca4 <__sflush_r+0x44>
 8011c98:	6863      	ldr	r3, [r4, #4]
 8011c9a:	1ad2      	subs	r2, r2, r3
 8011c9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011c9e:	b10b      	cbz	r3, 8011ca4 <__sflush_r+0x44>
 8011ca0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ca2:	1ad2      	subs	r2, r2, r3
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011ca8:	6a21      	ldr	r1, [r4, #32]
 8011caa:	4628      	mov	r0, r5
 8011cac:	47b0      	blx	r6
 8011cae:	1c43      	adds	r3, r0, #1
 8011cb0:	89a3      	ldrh	r3, [r4, #12]
 8011cb2:	d106      	bne.n	8011cc2 <__sflush_r+0x62>
 8011cb4:	6829      	ldr	r1, [r5, #0]
 8011cb6:	291d      	cmp	r1, #29
 8011cb8:	d82b      	bhi.n	8011d12 <__sflush_r+0xb2>
 8011cba:	4a2a      	ldr	r2, [pc, #168]	@ (8011d64 <__sflush_r+0x104>)
 8011cbc:	40ca      	lsrs	r2, r1
 8011cbe:	07d6      	lsls	r6, r2, #31
 8011cc0:	d527      	bpl.n	8011d12 <__sflush_r+0xb2>
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	6062      	str	r2, [r4, #4]
 8011cc6:	04d9      	lsls	r1, r3, #19
 8011cc8:	6922      	ldr	r2, [r4, #16]
 8011cca:	6022      	str	r2, [r4, #0]
 8011ccc:	d504      	bpl.n	8011cd8 <__sflush_r+0x78>
 8011cce:	1c42      	adds	r2, r0, #1
 8011cd0:	d101      	bne.n	8011cd6 <__sflush_r+0x76>
 8011cd2:	682b      	ldr	r3, [r5, #0]
 8011cd4:	b903      	cbnz	r3, 8011cd8 <__sflush_r+0x78>
 8011cd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8011cd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cda:	602f      	str	r7, [r5, #0]
 8011cdc:	b1b9      	cbz	r1, 8011d0e <__sflush_r+0xae>
 8011cde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ce2:	4299      	cmp	r1, r3
 8011ce4:	d002      	beq.n	8011cec <__sflush_r+0x8c>
 8011ce6:	4628      	mov	r0, r5
 8011ce8:	f7fe ff78 	bl	8010bdc <_free_r>
 8011cec:	2300      	movs	r3, #0
 8011cee:	6363      	str	r3, [r4, #52]	@ 0x34
 8011cf0:	e00d      	b.n	8011d0e <__sflush_r+0xae>
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	47b0      	blx	r6
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	1c50      	adds	r0, r2, #1
 8011cfc:	d1c9      	bne.n	8011c92 <__sflush_r+0x32>
 8011cfe:	682b      	ldr	r3, [r5, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d0c6      	beq.n	8011c92 <__sflush_r+0x32>
 8011d04:	2b1d      	cmp	r3, #29
 8011d06:	d001      	beq.n	8011d0c <__sflush_r+0xac>
 8011d08:	2b16      	cmp	r3, #22
 8011d0a:	d11e      	bne.n	8011d4a <__sflush_r+0xea>
 8011d0c:	602f      	str	r7, [r5, #0]
 8011d0e:	2000      	movs	r0, #0
 8011d10:	e022      	b.n	8011d58 <__sflush_r+0xf8>
 8011d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d16:	b21b      	sxth	r3, r3
 8011d18:	e01b      	b.n	8011d52 <__sflush_r+0xf2>
 8011d1a:	690f      	ldr	r7, [r1, #16]
 8011d1c:	2f00      	cmp	r7, #0
 8011d1e:	d0f6      	beq.n	8011d0e <__sflush_r+0xae>
 8011d20:	0793      	lsls	r3, r2, #30
 8011d22:	680e      	ldr	r6, [r1, #0]
 8011d24:	bf08      	it	eq
 8011d26:	694b      	ldreq	r3, [r1, #20]
 8011d28:	600f      	str	r7, [r1, #0]
 8011d2a:	bf18      	it	ne
 8011d2c:	2300      	movne	r3, #0
 8011d2e:	eba6 0807 	sub.w	r8, r6, r7
 8011d32:	608b      	str	r3, [r1, #8]
 8011d34:	f1b8 0f00 	cmp.w	r8, #0
 8011d38:	dde9      	ble.n	8011d0e <__sflush_r+0xae>
 8011d3a:	6a21      	ldr	r1, [r4, #32]
 8011d3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011d3e:	4643      	mov	r3, r8
 8011d40:	463a      	mov	r2, r7
 8011d42:	4628      	mov	r0, r5
 8011d44:	47b0      	blx	r6
 8011d46:	2800      	cmp	r0, #0
 8011d48:	dc08      	bgt.n	8011d5c <__sflush_r+0xfc>
 8011d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d52:	81a3      	strh	r3, [r4, #12]
 8011d54:	f04f 30ff 	mov.w	r0, #4294967295
 8011d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d5c:	4407      	add	r7, r0
 8011d5e:	eba8 0800 	sub.w	r8, r8, r0
 8011d62:	e7e7      	b.n	8011d34 <__sflush_r+0xd4>
 8011d64:	20400001 	.word	0x20400001

08011d68 <_fflush_r>:
 8011d68:	b538      	push	{r3, r4, r5, lr}
 8011d6a:	690b      	ldr	r3, [r1, #16]
 8011d6c:	4605      	mov	r5, r0
 8011d6e:	460c      	mov	r4, r1
 8011d70:	b913      	cbnz	r3, 8011d78 <_fflush_r+0x10>
 8011d72:	2500      	movs	r5, #0
 8011d74:	4628      	mov	r0, r5
 8011d76:	bd38      	pop	{r3, r4, r5, pc}
 8011d78:	b118      	cbz	r0, 8011d82 <_fflush_r+0x1a>
 8011d7a:	6a03      	ldr	r3, [r0, #32]
 8011d7c:	b90b      	cbnz	r3, 8011d82 <_fflush_r+0x1a>
 8011d7e:	f7fd fed1 	bl	800fb24 <__sinit>
 8011d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d0f3      	beq.n	8011d72 <_fflush_r+0xa>
 8011d8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011d8c:	07d0      	lsls	r0, r2, #31
 8011d8e:	d404      	bmi.n	8011d9a <_fflush_r+0x32>
 8011d90:	0599      	lsls	r1, r3, #22
 8011d92:	d402      	bmi.n	8011d9a <_fflush_r+0x32>
 8011d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d96:	f7fe f8d2 	bl	800ff3e <__retarget_lock_acquire_recursive>
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	4621      	mov	r1, r4
 8011d9e:	f7ff ff5f 	bl	8011c60 <__sflush_r>
 8011da2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011da4:	07da      	lsls	r2, r3, #31
 8011da6:	4605      	mov	r5, r0
 8011da8:	d4e4      	bmi.n	8011d74 <_fflush_r+0xc>
 8011daa:	89a3      	ldrh	r3, [r4, #12]
 8011dac:	059b      	lsls	r3, r3, #22
 8011dae:	d4e1      	bmi.n	8011d74 <_fflush_r+0xc>
 8011db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011db2:	f7fe f8c5 	bl	800ff40 <__retarget_lock_release_recursive>
 8011db6:	e7dd      	b.n	8011d74 <_fflush_r+0xc>

08011db8 <__sccl>:
 8011db8:	b570      	push	{r4, r5, r6, lr}
 8011dba:	780b      	ldrb	r3, [r1, #0]
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	2b5e      	cmp	r3, #94	@ 0x5e
 8011dc0:	bf0b      	itete	eq
 8011dc2:	784b      	ldrbeq	r3, [r1, #1]
 8011dc4:	1c4a      	addne	r2, r1, #1
 8011dc6:	1c8a      	addeq	r2, r1, #2
 8011dc8:	2100      	movne	r1, #0
 8011dca:	bf08      	it	eq
 8011dcc:	2101      	moveq	r1, #1
 8011dce:	3801      	subs	r0, #1
 8011dd0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011dd4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011dd8:	42a8      	cmp	r0, r5
 8011dda:	d1fb      	bne.n	8011dd4 <__sccl+0x1c>
 8011ddc:	b90b      	cbnz	r3, 8011de2 <__sccl+0x2a>
 8011dde:	1e50      	subs	r0, r2, #1
 8011de0:	bd70      	pop	{r4, r5, r6, pc}
 8011de2:	f081 0101 	eor.w	r1, r1, #1
 8011de6:	54e1      	strb	r1, [r4, r3]
 8011de8:	4610      	mov	r0, r2
 8011dea:	4602      	mov	r2, r0
 8011dec:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011df0:	2d2d      	cmp	r5, #45	@ 0x2d
 8011df2:	d005      	beq.n	8011e00 <__sccl+0x48>
 8011df4:	2d5d      	cmp	r5, #93	@ 0x5d
 8011df6:	d016      	beq.n	8011e26 <__sccl+0x6e>
 8011df8:	2d00      	cmp	r5, #0
 8011dfa:	d0f1      	beq.n	8011de0 <__sccl+0x28>
 8011dfc:	462b      	mov	r3, r5
 8011dfe:	e7f2      	b.n	8011de6 <__sccl+0x2e>
 8011e00:	7846      	ldrb	r6, [r0, #1]
 8011e02:	2e5d      	cmp	r6, #93	@ 0x5d
 8011e04:	d0fa      	beq.n	8011dfc <__sccl+0x44>
 8011e06:	42b3      	cmp	r3, r6
 8011e08:	dcf8      	bgt.n	8011dfc <__sccl+0x44>
 8011e0a:	3002      	adds	r0, #2
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	3201      	adds	r2, #1
 8011e10:	4296      	cmp	r6, r2
 8011e12:	54a1      	strb	r1, [r4, r2]
 8011e14:	dcfb      	bgt.n	8011e0e <__sccl+0x56>
 8011e16:	1af2      	subs	r2, r6, r3
 8011e18:	3a01      	subs	r2, #1
 8011e1a:	1c5d      	adds	r5, r3, #1
 8011e1c:	42b3      	cmp	r3, r6
 8011e1e:	bfa8      	it	ge
 8011e20:	2200      	movge	r2, #0
 8011e22:	18ab      	adds	r3, r5, r2
 8011e24:	e7e1      	b.n	8011dea <__sccl+0x32>
 8011e26:	4610      	mov	r0, r2
 8011e28:	e7da      	b.n	8011de0 <__sccl+0x28>

08011e2a <__submore>:
 8011e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e2e:	460c      	mov	r4, r1
 8011e30:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011e32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e36:	4299      	cmp	r1, r3
 8011e38:	d11d      	bne.n	8011e76 <__submore+0x4c>
 8011e3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011e3e:	f7fd f8e9 	bl	800f014 <_malloc_r>
 8011e42:	b918      	cbnz	r0, 8011e4c <__submore+0x22>
 8011e44:	f04f 30ff 	mov.w	r0, #4294967295
 8011e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e50:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011e52:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011e56:	6360      	str	r0, [r4, #52]	@ 0x34
 8011e58:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011e5c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011e60:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8011e64:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e68:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011e6c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011e70:	6020      	str	r0, [r4, #0]
 8011e72:	2000      	movs	r0, #0
 8011e74:	e7e8      	b.n	8011e48 <__submore+0x1e>
 8011e76:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011e78:	0077      	lsls	r7, r6, #1
 8011e7a:	463a      	mov	r2, r7
 8011e7c:	f7fd f95e 	bl	800f13c <_realloc_r>
 8011e80:	4605      	mov	r5, r0
 8011e82:	2800      	cmp	r0, #0
 8011e84:	d0de      	beq.n	8011e44 <__submore+0x1a>
 8011e86:	eb00 0806 	add.w	r8, r0, r6
 8011e8a:	4601      	mov	r1, r0
 8011e8c:	4632      	mov	r2, r6
 8011e8e:	4640      	mov	r0, r8
 8011e90:	f7fe f857 	bl	800ff42 <memcpy>
 8011e94:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011e98:	f8c4 8000 	str.w	r8, [r4]
 8011e9c:	e7e9      	b.n	8011e72 <__submore+0x48>

08011e9e <memmove>:
 8011e9e:	4288      	cmp	r0, r1
 8011ea0:	b510      	push	{r4, lr}
 8011ea2:	eb01 0402 	add.w	r4, r1, r2
 8011ea6:	d902      	bls.n	8011eae <memmove+0x10>
 8011ea8:	4284      	cmp	r4, r0
 8011eaa:	4623      	mov	r3, r4
 8011eac:	d807      	bhi.n	8011ebe <memmove+0x20>
 8011eae:	1e43      	subs	r3, r0, #1
 8011eb0:	42a1      	cmp	r1, r4
 8011eb2:	d008      	beq.n	8011ec6 <memmove+0x28>
 8011eb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011eb8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ebc:	e7f8      	b.n	8011eb0 <memmove+0x12>
 8011ebe:	4402      	add	r2, r0
 8011ec0:	4601      	mov	r1, r0
 8011ec2:	428a      	cmp	r2, r1
 8011ec4:	d100      	bne.n	8011ec8 <memmove+0x2a>
 8011ec6:	bd10      	pop	{r4, pc}
 8011ec8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ecc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ed0:	e7f7      	b.n	8011ec2 <memmove+0x24>
	...

08011ed4 <__fpclassifyd>:
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8011eda:	b510      	push	{r4, lr}
 8011edc:	d104      	bne.n	8011ee8 <__fpclassifyd+0x14>
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	bf0c      	ite	eq
 8011ee2:	2002      	moveq	r0, #2
 8011ee4:	2003      	movne	r0, #3
 8011ee6:	bd10      	pop	{r4, pc}
 8011ee8:	4a09      	ldr	r2, [pc, #36]	@ (8011f10 <__fpclassifyd+0x3c>)
 8011eea:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8011eee:	4294      	cmp	r4, r2
 8011ef0:	d908      	bls.n	8011f04 <__fpclassifyd+0x30>
 8011ef2:	4a08      	ldr	r2, [pc, #32]	@ (8011f14 <__fpclassifyd+0x40>)
 8011ef4:	4213      	tst	r3, r2
 8011ef6:	d007      	beq.n	8011f08 <__fpclassifyd+0x34>
 8011ef8:	4291      	cmp	r1, r2
 8011efa:	d107      	bne.n	8011f0c <__fpclassifyd+0x38>
 8011efc:	fab0 f080 	clz	r0, r0
 8011f00:	0940      	lsrs	r0, r0, #5
 8011f02:	e7f0      	b.n	8011ee6 <__fpclassifyd+0x12>
 8011f04:	2004      	movs	r0, #4
 8011f06:	e7ee      	b.n	8011ee6 <__fpclassifyd+0x12>
 8011f08:	2003      	movs	r0, #3
 8011f0a:	e7ec      	b.n	8011ee6 <__fpclassifyd+0x12>
 8011f0c:	2000      	movs	r0, #0
 8011f0e:	e7ea      	b.n	8011ee6 <__fpclassifyd+0x12>
 8011f10:	7fdfffff 	.word	0x7fdfffff
 8011f14:	7ff00000 	.word	0x7ff00000

08011f18 <__assert_func>:
 8011f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f1a:	4614      	mov	r4, r2
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	4b09      	ldr	r3, [pc, #36]	@ (8011f44 <__assert_func+0x2c>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	4605      	mov	r5, r0
 8011f24:	68d8      	ldr	r0, [r3, #12]
 8011f26:	b14c      	cbz	r4, 8011f3c <__assert_func+0x24>
 8011f28:	4b07      	ldr	r3, [pc, #28]	@ (8011f48 <__assert_func+0x30>)
 8011f2a:	9100      	str	r1, [sp, #0]
 8011f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f30:	4906      	ldr	r1, [pc, #24]	@ (8011f4c <__assert_func+0x34>)
 8011f32:	462b      	mov	r3, r5
 8011f34:	f000 f91a 	bl	801216c <fiprintf>
 8011f38:	f000 f92a 	bl	8012190 <abort>
 8011f3c:	4b04      	ldr	r3, [pc, #16]	@ (8011f50 <__assert_func+0x38>)
 8011f3e:	461c      	mov	r4, r3
 8011f40:	e7f3      	b.n	8011f2a <__assert_func+0x12>
 8011f42:	bf00      	nop
 8011f44:	2000040c 	.word	0x2000040c
 8011f48:	080136e2 	.word	0x080136e2
 8011f4c:	080136ef 	.word	0x080136ef
 8011f50:	0801371d 	.word	0x0801371d

08011f54 <__ascii_mbtowc>:
 8011f54:	b082      	sub	sp, #8
 8011f56:	b901      	cbnz	r1, 8011f5a <__ascii_mbtowc+0x6>
 8011f58:	a901      	add	r1, sp, #4
 8011f5a:	b142      	cbz	r2, 8011f6e <__ascii_mbtowc+0x1a>
 8011f5c:	b14b      	cbz	r3, 8011f72 <__ascii_mbtowc+0x1e>
 8011f5e:	7813      	ldrb	r3, [r2, #0]
 8011f60:	600b      	str	r3, [r1, #0]
 8011f62:	7812      	ldrb	r2, [r2, #0]
 8011f64:	1e10      	subs	r0, r2, #0
 8011f66:	bf18      	it	ne
 8011f68:	2001      	movne	r0, #1
 8011f6a:	b002      	add	sp, #8
 8011f6c:	4770      	bx	lr
 8011f6e:	4610      	mov	r0, r2
 8011f70:	e7fb      	b.n	8011f6a <__ascii_mbtowc+0x16>
 8011f72:	f06f 0001 	mvn.w	r0, #1
 8011f76:	e7f8      	b.n	8011f6a <__ascii_mbtowc+0x16>

08011f78 <_strtol_l.isra.0>:
 8011f78:	2b24      	cmp	r3, #36	@ 0x24
 8011f7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f7e:	4686      	mov	lr, r0
 8011f80:	4690      	mov	r8, r2
 8011f82:	d801      	bhi.n	8011f88 <_strtol_l.isra.0+0x10>
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d106      	bne.n	8011f96 <_strtol_l.isra.0+0x1e>
 8011f88:	f7fd ffae 	bl	800fee8 <__errno>
 8011f8c:	2316      	movs	r3, #22
 8011f8e:	6003      	str	r3, [r0, #0]
 8011f90:	2000      	movs	r0, #0
 8011f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f96:	4834      	ldr	r0, [pc, #208]	@ (8012068 <_strtol_l.isra.0+0xf0>)
 8011f98:	460d      	mov	r5, r1
 8011f9a:	462a      	mov	r2, r5
 8011f9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011fa0:	5d06      	ldrb	r6, [r0, r4]
 8011fa2:	f016 0608 	ands.w	r6, r6, #8
 8011fa6:	d1f8      	bne.n	8011f9a <_strtol_l.isra.0+0x22>
 8011fa8:	2c2d      	cmp	r4, #45	@ 0x2d
 8011faa:	d110      	bne.n	8011fce <_strtol_l.isra.0+0x56>
 8011fac:	782c      	ldrb	r4, [r5, #0]
 8011fae:	2601      	movs	r6, #1
 8011fb0:	1c95      	adds	r5, r2, #2
 8011fb2:	f033 0210 	bics.w	r2, r3, #16
 8011fb6:	d115      	bne.n	8011fe4 <_strtol_l.isra.0+0x6c>
 8011fb8:	2c30      	cmp	r4, #48	@ 0x30
 8011fba:	d10d      	bne.n	8011fd8 <_strtol_l.isra.0+0x60>
 8011fbc:	782a      	ldrb	r2, [r5, #0]
 8011fbe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011fc2:	2a58      	cmp	r2, #88	@ 0x58
 8011fc4:	d108      	bne.n	8011fd8 <_strtol_l.isra.0+0x60>
 8011fc6:	786c      	ldrb	r4, [r5, #1]
 8011fc8:	3502      	adds	r5, #2
 8011fca:	2310      	movs	r3, #16
 8011fcc:	e00a      	b.n	8011fe4 <_strtol_l.isra.0+0x6c>
 8011fce:	2c2b      	cmp	r4, #43	@ 0x2b
 8011fd0:	bf04      	itt	eq
 8011fd2:	782c      	ldrbeq	r4, [r5, #0]
 8011fd4:	1c95      	addeq	r5, r2, #2
 8011fd6:	e7ec      	b.n	8011fb2 <_strtol_l.isra.0+0x3a>
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d1f6      	bne.n	8011fca <_strtol_l.isra.0+0x52>
 8011fdc:	2c30      	cmp	r4, #48	@ 0x30
 8011fde:	bf14      	ite	ne
 8011fe0:	230a      	movne	r3, #10
 8011fe2:	2308      	moveq	r3, #8
 8011fe4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011fe8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011fec:	2200      	movs	r2, #0
 8011fee:	fbbc f9f3 	udiv	r9, ip, r3
 8011ff2:	4610      	mov	r0, r2
 8011ff4:	fb03 ca19 	mls	sl, r3, r9, ip
 8011ff8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011ffc:	2f09      	cmp	r7, #9
 8011ffe:	d80f      	bhi.n	8012020 <_strtol_l.isra.0+0xa8>
 8012000:	463c      	mov	r4, r7
 8012002:	42a3      	cmp	r3, r4
 8012004:	dd1b      	ble.n	801203e <_strtol_l.isra.0+0xc6>
 8012006:	1c57      	adds	r7, r2, #1
 8012008:	d007      	beq.n	801201a <_strtol_l.isra.0+0xa2>
 801200a:	4581      	cmp	r9, r0
 801200c:	d314      	bcc.n	8012038 <_strtol_l.isra.0+0xc0>
 801200e:	d101      	bne.n	8012014 <_strtol_l.isra.0+0x9c>
 8012010:	45a2      	cmp	sl, r4
 8012012:	db11      	blt.n	8012038 <_strtol_l.isra.0+0xc0>
 8012014:	fb00 4003 	mla	r0, r0, r3, r4
 8012018:	2201      	movs	r2, #1
 801201a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801201e:	e7eb      	b.n	8011ff8 <_strtol_l.isra.0+0x80>
 8012020:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012024:	2f19      	cmp	r7, #25
 8012026:	d801      	bhi.n	801202c <_strtol_l.isra.0+0xb4>
 8012028:	3c37      	subs	r4, #55	@ 0x37
 801202a:	e7ea      	b.n	8012002 <_strtol_l.isra.0+0x8a>
 801202c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012030:	2f19      	cmp	r7, #25
 8012032:	d804      	bhi.n	801203e <_strtol_l.isra.0+0xc6>
 8012034:	3c57      	subs	r4, #87	@ 0x57
 8012036:	e7e4      	b.n	8012002 <_strtol_l.isra.0+0x8a>
 8012038:	f04f 32ff 	mov.w	r2, #4294967295
 801203c:	e7ed      	b.n	801201a <_strtol_l.isra.0+0xa2>
 801203e:	1c53      	adds	r3, r2, #1
 8012040:	d108      	bne.n	8012054 <_strtol_l.isra.0+0xdc>
 8012042:	2322      	movs	r3, #34	@ 0x22
 8012044:	f8ce 3000 	str.w	r3, [lr]
 8012048:	4660      	mov	r0, ip
 801204a:	f1b8 0f00 	cmp.w	r8, #0
 801204e:	d0a0      	beq.n	8011f92 <_strtol_l.isra.0+0x1a>
 8012050:	1e69      	subs	r1, r5, #1
 8012052:	e006      	b.n	8012062 <_strtol_l.isra.0+0xea>
 8012054:	b106      	cbz	r6, 8012058 <_strtol_l.isra.0+0xe0>
 8012056:	4240      	negs	r0, r0
 8012058:	f1b8 0f00 	cmp.w	r8, #0
 801205c:	d099      	beq.n	8011f92 <_strtol_l.isra.0+0x1a>
 801205e:	2a00      	cmp	r2, #0
 8012060:	d1f6      	bne.n	8012050 <_strtol_l.isra.0+0xd8>
 8012062:	f8c8 1000 	str.w	r1, [r8]
 8012066:	e794      	b.n	8011f92 <_strtol_l.isra.0+0x1a>
 8012068:	08013821 	.word	0x08013821

0801206c <_strtol_r>:
 801206c:	f7ff bf84 	b.w	8011f78 <_strtol_l.isra.0>

08012070 <_strtoul_l.isra.0>:
 8012070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012074:	4e34      	ldr	r6, [pc, #208]	@ (8012148 <_strtoul_l.isra.0+0xd8>)
 8012076:	4686      	mov	lr, r0
 8012078:	460d      	mov	r5, r1
 801207a:	4628      	mov	r0, r5
 801207c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012080:	5d37      	ldrb	r7, [r6, r4]
 8012082:	f017 0708 	ands.w	r7, r7, #8
 8012086:	d1f8      	bne.n	801207a <_strtoul_l.isra.0+0xa>
 8012088:	2c2d      	cmp	r4, #45	@ 0x2d
 801208a:	d110      	bne.n	80120ae <_strtoul_l.isra.0+0x3e>
 801208c:	782c      	ldrb	r4, [r5, #0]
 801208e:	2701      	movs	r7, #1
 8012090:	1c85      	adds	r5, r0, #2
 8012092:	f033 0010 	bics.w	r0, r3, #16
 8012096:	d115      	bne.n	80120c4 <_strtoul_l.isra.0+0x54>
 8012098:	2c30      	cmp	r4, #48	@ 0x30
 801209a:	d10d      	bne.n	80120b8 <_strtoul_l.isra.0+0x48>
 801209c:	7828      	ldrb	r0, [r5, #0]
 801209e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80120a2:	2858      	cmp	r0, #88	@ 0x58
 80120a4:	d108      	bne.n	80120b8 <_strtoul_l.isra.0+0x48>
 80120a6:	786c      	ldrb	r4, [r5, #1]
 80120a8:	3502      	adds	r5, #2
 80120aa:	2310      	movs	r3, #16
 80120ac:	e00a      	b.n	80120c4 <_strtoul_l.isra.0+0x54>
 80120ae:	2c2b      	cmp	r4, #43	@ 0x2b
 80120b0:	bf04      	itt	eq
 80120b2:	782c      	ldrbeq	r4, [r5, #0]
 80120b4:	1c85      	addeq	r5, r0, #2
 80120b6:	e7ec      	b.n	8012092 <_strtoul_l.isra.0+0x22>
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d1f6      	bne.n	80120aa <_strtoul_l.isra.0+0x3a>
 80120bc:	2c30      	cmp	r4, #48	@ 0x30
 80120be:	bf14      	ite	ne
 80120c0:	230a      	movne	r3, #10
 80120c2:	2308      	moveq	r3, #8
 80120c4:	f04f 38ff 	mov.w	r8, #4294967295
 80120c8:	2600      	movs	r6, #0
 80120ca:	fbb8 f8f3 	udiv	r8, r8, r3
 80120ce:	fb03 f908 	mul.w	r9, r3, r8
 80120d2:	ea6f 0909 	mvn.w	r9, r9
 80120d6:	4630      	mov	r0, r6
 80120d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80120dc:	f1bc 0f09 	cmp.w	ip, #9
 80120e0:	d810      	bhi.n	8012104 <_strtoul_l.isra.0+0x94>
 80120e2:	4664      	mov	r4, ip
 80120e4:	42a3      	cmp	r3, r4
 80120e6:	dd1e      	ble.n	8012126 <_strtoul_l.isra.0+0xb6>
 80120e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80120ec:	d007      	beq.n	80120fe <_strtoul_l.isra.0+0x8e>
 80120ee:	4580      	cmp	r8, r0
 80120f0:	d316      	bcc.n	8012120 <_strtoul_l.isra.0+0xb0>
 80120f2:	d101      	bne.n	80120f8 <_strtoul_l.isra.0+0x88>
 80120f4:	45a1      	cmp	r9, r4
 80120f6:	db13      	blt.n	8012120 <_strtoul_l.isra.0+0xb0>
 80120f8:	fb00 4003 	mla	r0, r0, r3, r4
 80120fc:	2601      	movs	r6, #1
 80120fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012102:	e7e9      	b.n	80120d8 <_strtoul_l.isra.0+0x68>
 8012104:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012108:	f1bc 0f19 	cmp.w	ip, #25
 801210c:	d801      	bhi.n	8012112 <_strtoul_l.isra.0+0xa2>
 801210e:	3c37      	subs	r4, #55	@ 0x37
 8012110:	e7e8      	b.n	80120e4 <_strtoul_l.isra.0+0x74>
 8012112:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012116:	f1bc 0f19 	cmp.w	ip, #25
 801211a:	d804      	bhi.n	8012126 <_strtoul_l.isra.0+0xb6>
 801211c:	3c57      	subs	r4, #87	@ 0x57
 801211e:	e7e1      	b.n	80120e4 <_strtoul_l.isra.0+0x74>
 8012120:	f04f 36ff 	mov.w	r6, #4294967295
 8012124:	e7eb      	b.n	80120fe <_strtoul_l.isra.0+0x8e>
 8012126:	1c73      	adds	r3, r6, #1
 8012128:	d106      	bne.n	8012138 <_strtoul_l.isra.0+0xc8>
 801212a:	2322      	movs	r3, #34	@ 0x22
 801212c:	f8ce 3000 	str.w	r3, [lr]
 8012130:	4630      	mov	r0, r6
 8012132:	b932      	cbnz	r2, 8012142 <_strtoul_l.isra.0+0xd2>
 8012134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012138:	b107      	cbz	r7, 801213c <_strtoul_l.isra.0+0xcc>
 801213a:	4240      	negs	r0, r0
 801213c:	2a00      	cmp	r2, #0
 801213e:	d0f9      	beq.n	8012134 <_strtoul_l.isra.0+0xc4>
 8012140:	b106      	cbz	r6, 8012144 <_strtoul_l.isra.0+0xd4>
 8012142:	1e69      	subs	r1, r5, #1
 8012144:	6011      	str	r1, [r2, #0]
 8012146:	e7f5      	b.n	8012134 <_strtoul_l.isra.0+0xc4>
 8012148:	08013821 	.word	0x08013821

0801214c <_strtoul_r>:
 801214c:	f7ff bf90 	b.w	8012070 <_strtoul_l.isra.0>

08012150 <__ascii_wctomb>:
 8012150:	4603      	mov	r3, r0
 8012152:	4608      	mov	r0, r1
 8012154:	b141      	cbz	r1, 8012168 <__ascii_wctomb+0x18>
 8012156:	2aff      	cmp	r2, #255	@ 0xff
 8012158:	d904      	bls.n	8012164 <__ascii_wctomb+0x14>
 801215a:	228a      	movs	r2, #138	@ 0x8a
 801215c:	601a      	str	r2, [r3, #0]
 801215e:	f04f 30ff 	mov.w	r0, #4294967295
 8012162:	4770      	bx	lr
 8012164:	700a      	strb	r2, [r1, #0]
 8012166:	2001      	movs	r0, #1
 8012168:	4770      	bx	lr
	...

0801216c <fiprintf>:
 801216c:	b40e      	push	{r1, r2, r3}
 801216e:	b503      	push	{r0, r1, lr}
 8012170:	4601      	mov	r1, r0
 8012172:	ab03      	add	r3, sp, #12
 8012174:	4805      	ldr	r0, [pc, #20]	@ (801218c <fiprintf+0x20>)
 8012176:	f853 2b04 	ldr.w	r2, [r3], #4
 801217a:	6800      	ldr	r0, [r0, #0]
 801217c:	9301      	str	r3, [sp, #4]
 801217e:	f000 f837 	bl	80121f0 <_vfiprintf_r>
 8012182:	b002      	add	sp, #8
 8012184:	f85d eb04 	ldr.w	lr, [sp], #4
 8012188:	b003      	add	sp, #12
 801218a:	4770      	bx	lr
 801218c:	2000040c 	.word	0x2000040c

08012190 <abort>:
 8012190:	b508      	push	{r3, lr}
 8012192:	2006      	movs	r0, #6
 8012194:	f000 fa00 	bl	8012598 <raise>
 8012198:	2001      	movs	r0, #1
 801219a:	f7fc fc21 	bl	800e9e0 <_exit>

0801219e <__sfputc_r>:
 801219e:	6893      	ldr	r3, [r2, #8]
 80121a0:	3b01      	subs	r3, #1
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	b410      	push	{r4}
 80121a6:	6093      	str	r3, [r2, #8]
 80121a8:	da08      	bge.n	80121bc <__sfputc_r+0x1e>
 80121aa:	6994      	ldr	r4, [r2, #24]
 80121ac:	42a3      	cmp	r3, r4
 80121ae:	db01      	blt.n	80121b4 <__sfputc_r+0x16>
 80121b0:	290a      	cmp	r1, #10
 80121b2:	d103      	bne.n	80121bc <__sfputc_r+0x1e>
 80121b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121b8:	f000 b932 	b.w	8012420 <__swbuf_r>
 80121bc:	6813      	ldr	r3, [r2, #0]
 80121be:	1c58      	adds	r0, r3, #1
 80121c0:	6010      	str	r0, [r2, #0]
 80121c2:	7019      	strb	r1, [r3, #0]
 80121c4:	4608      	mov	r0, r1
 80121c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121ca:	4770      	bx	lr

080121cc <__sfputs_r>:
 80121cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ce:	4606      	mov	r6, r0
 80121d0:	460f      	mov	r7, r1
 80121d2:	4614      	mov	r4, r2
 80121d4:	18d5      	adds	r5, r2, r3
 80121d6:	42ac      	cmp	r4, r5
 80121d8:	d101      	bne.n	80121de <__sfputs_r+0x12>
 80121da:	2000      	movs	r0, #0
 80121dc:	e007      	b.n	80121ee <__sfputs_r+0x22>
 80121de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121e2:	463a      	mov	r2, r7
 80121e4:	4630      	mov	r0, r6
 80121e6:	f7ff ffda 	bl	801219e <__sfputc_r>
 80121ea:	1c43      	adds	r3, r0, #1
 80121ec:	d1f3      	bne.n	80121d6 <__sfputs_r+0xa>
 80121ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080121f0 <_vfiprintf_r>:
 80121f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121f4:	460d      	mov	r5, r1
 80121f6:	b09d      	sub	sp, #116	@ 0x74
 80121f8:	4614      	mov	r4, r2
 80121fa:	4698      	mov	r8, r3
 80121fc:	4606      	mov	r6, r0
 80121fe:	b118      	cbz	r0, 8012208 <_vfiprintf_r+0x18>
 8012200:	6a03      	ldr	r3, [r0, #32]
 8012202:	b90b      	cbnz	r3, 8012208 <_vfiprintf_r+0x18>
 8012204:	f7fd fc8e 	bl	800fb24 <__sinit>
 8012208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801220a:	07d9      	lsls	r1, r3, #31
 801220c:	d405      	bmi.n	801221a <_vfiprintf_r+0x2a>
 801220e:	89ab      	ldrh	r3, [r5, #12]
 8012210:	059a      	lsls	r2, r3, #22
 8012212:	d402      	bmi.n	801221a <_vfiprintf_r+0x2a>
 8012214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012216:	f7fd fe92 	bl	800ff3e <__retarget_lock_acquire_recursive>
 801221a:	89ab      	ldrh	r3, [r5, #12]
 801221c:	071b      	lsls	r3, r3, #28
 801221e:	d501      	bpl.n	8012224 <_vfiprintf_r+0x34>
 8012220:	692b      	ldr	r3, [r5, #16]
 8012222:	b99b      	cbnz	r3, 801224c <_vfiprintf_r+0x5c>
 8012224:	4629      	mov	r1, r5
 8012226:	4630      	mov	r0, r6
 8012228:	f000 f938 	bl	801249c <__swsetup_r>
 801222c:	b170      	cbz	r0, 801224c <_vfiprintf_r+0x5c>
 801222e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012230:	07dc      	lsls	r4, r3, #31
 8012232:	d504      	bpl.n	801223e <_vfiprintf_r+0x4e>
 8012234:	f04f 30ff 	mov.w	r0, #4294967295
 8012238:	b01d      	add	sp, #116	@ 0x74
 801223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801223e:	89ab      	ldrh	r3, [r5, #12]
 8012240:	0598      	lsls	r0, r3, #22
 8012242:	d4f7      	bmi.n	8012234 <_vfiprintf_r+0x44>
 8012244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012246:	f7fd fe7b 	bl	800ff40 <__retarget_lock_release_recursive>
 801224a:	e7f3      	b.n	8012234 <_vfiprintf_r+0x44>
 801224c:	2300      	movs	r3, #0
 801224e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012250:	2320      	movs	r3, #32
 8012252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012256:	f8cd 800c 	str.w	r8, [sp, #12]
 801225a:	2330      	movs	r3, #48	@ 0x30
 801225c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801240c <_vfiprintf_r+0x21c>
 8012260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012264:	f04f 0901 	mov.w	r9, #1
 8012268:	4623      	mov	r3, r4
 801226a:	469a      	mov	sl, r3
 801226c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012270:	b10a      	cbz	r2, 8012276 <_vfiprintf_r+0x86>
 8012272:	2a25      	cmp	r2, #37	@ 0x25
 8012274:	d1f9      	bne.n	801226a <_vfiprintf_r+0x7a>
 8012276:	ebba 0b04 	subs.w	fp, sl, r4
 801227a:	d00b      	beq.n	8012294 <_vfiprintf_r+0xa4>
 801227c:	465b      	mov	r3, fp
 801227e:	4622      	mov	r2, r4
 8012280:	4629      	mov	r1, r5
 8012282:	4630      	mov	r0, r6
 8012284:	f7ff ffa2 	bl	80121cc <__sfputs_r>
 8012288:	3001      	adds	r0, #1
 801228a:	f000 80a7 	beq.w	80123dc <_vfiprintf_r+0x1ec>
 801228e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012290:	445a      	add	r2, fp
 8012292:	9209      	str	r2, [sp, #36]	@ 0x24
 8012294:	f89a 3000 	ldrb.w	r3, [sl]
 8012298:	2b00      	cmp	r3, #0
 801229a:	f000 809f 	beq.w	80123dc <_vfiprintf_r+0x1ec>
 801229e:	2300      	movs	r3, #0
 80122a0:	f04f 32ff 	mov.w	r2, #4294967295
 80122a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122a8:	f10a 0a01 	add.w	sl, sl, #1
 80122ac:	9304      	str	r3, [sp, #16]
 80122ae:	9307      	str	r3, [sp, #28]
 80122b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80122b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80122b6:	4654      	mov	r4, sl
 80122b8:	2205      	movs	r2, #5
 80122ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122be:	4853      	ldr	r0, [pc, #332]	@ (801240c <_vfiprintf_r+0x21c>)
 80122c0:	f7ed ffce 	bl	8000260 <memchr>
 80122c4:	9a04      	ldr	r2, [sp, #16]
 80122c6:	b9d8      	cbnz	r0, 8012300 <_vfiprintf_r+0x110>
 80122c8:	06d1      	lsls	r1, r2, #27
 80122ca:	bf44      	itt	mi
 80122cc:	2320      	movmi	r3, #32
 80122ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122d2:	0713      	lsls	r3, r2, #28
 80122d4:	bf44      	itt	mi
 80122d6:	232b      	movmi	r3, #43	@ 0x2b
 80122d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80122dc:	f89a 3000 	ldrb.w	r3, [sl]
 80122e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80122e2:	d015      	beq.n	8012310 <_vfiprintf_r+0x120>
 80122e4:	9a07      	ldr	r2, [sp, #28]
 80122e6:	4654      	mov	r4, sl
 80122e8:	2000      	movs	r0, #0
 80122ea:	f04f 0c0a 	mov.w	ip, #10
 80122ee:	4621      	mov	r1, r4
 80122f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122f4:	3b30      	subs	r3, #48	@ 0x30
 80122f6:	2b09      	cmp	r3, #9
 80122f8:	d94b      	bls.n	8012392 <_vfiprintf_r+0x1a2>
 80122fa:	b1b0      	cbz	r0, 801232a <_vfiprintf_r+0x13a>
 80122fc:	9207      	str	r2, [sp, #28]
 80122fe:	e014      	b.n	801232a <_vfiprintf_r+0x13a>
 8012300:	eba0 0308 	sub.w	r3, r0, r8
 8012304:	fa09 f303 	lsl.w	r3, r9, r3
 8012308:	4313      	orrs	r3, r2
 801230a:	9304      	str	r3, [sp, #16]
 801230c:	46a2      	mov	sl, r4
 801230e:	e7d2      	b.n	80122b6 <_vfiprintf_r+0xc6>
 8012310:	9b03      	ldr	r3, [sp, #12]
 8012312:	1d19      	adds	r1, r3, #4
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	9103      	str	r1, [sp, #12]
 8012318:	2b00      	cmp	r3, #0
 801231a:	bfbb      	ittet	lt
 801231c:	425b      	neglt	r3, r3
 801231e:	f042 0202 	orrlt.w	r2, r2, #2
 8012322:	9307      	strge	r3, [sp, #28]
 8012324:	9307      	strlt	r3, [sp, #28]
 8012326:	bfb8      	it	lt
 8012328:	9204      	strlt	r2, [sp, #16]
 801232a:	7823      	ldrb	r3, [r4, #0]
 801232c:	2b2e      	cmp	r3, #46	@ 0x2e
 801232e:	d10a      	bne.n	8012346 <_vfiprintf_r+0x156>
 8012330:	7863      	ldrb	r3, [r4, #1]
 8012332:	2b2a      	cmp	r3, #42	@ 0x2a
 8012334:	d132      	bne.n	801239c <_vfiprintf_r+0x1ac>
 8012336:	9b03      	ldr	r3, [sp, #12]
 8012338:	1d1a      	adds	r2, r3, #4
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	9203      	str	r2, [sp, #12]
 801233e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012342:	3402      	adds	r4, #2
 8012344:	9305      	str	r3, [sp, #20]
 8012346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801241c <_vfiprintf_r+0x22c>
 801234a:	7821      	ldrb	r1, [r4, #0]
 801234c:	2203      	movs	r2, #3
 801234e:	4650      	mov	r0, sl
 8012350:	f7ed ff86 	bl	8000260 <memchr>
 8012354:	b138      	cbz	r0, 8012366 <_vfiprintf_r+0x176>
 8012356:	9b04      	ldr	r3, [sp, #16]
 8012358:	eba0 000a 	sub.w	r0, r0, sl
 801235c:	2240      	movs	r2, #64	@ 0x40
 801235e:	4082      	lsls	r2, r0
 8012360:	4313      	orrs	r3, r2
 8012362:	3401      	adds	r4, #1
 8012364:	9304      	str	r3, [sp, #16]
 8012366:	f814 1b01 	ldrb.w	r1, [r4], #1
 801236a:	4829      	ldr	r0, [pc, #164]	@ (8012410 <_vfiprintf_r+0x220>)
 801236c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012370:	2206      	movs	r2, #6
 8012372:	f7ed ff75 	bl	8000260 <memchr>
 8012376:	2800      	cmp	r0, #0
 8012378:	d03f      	beq.n	80123fa <_vfiprintf_r+0x20a>
 801237a:	4b26      	ldr	r3, [pc, #152]	@ (8012414 <_vfiprintf_r+0x224>)
 801237c:	bb1b      	cbnz	r3, 80123c6 <_vfiprintf_r+0x1d6>
 801237e:	9b03      	ldr	r3, [sp, #12]
 8012380:	3307      	adds	r3, #7
 8012382:	f023 0307 	bic.w	r3, r3, #7
 8012386:	3308      	adds	r3, #8
 8012388:	9303      	str	r3, [sp, #12]
 801238a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801238c:	443b      	add	r3, r7
 801238e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012390:	e76a      	b.n	8012268 <_vfiprintf_r+0x78>
 8012392:	fb0c 3202 	mla	r2, ip, r2, r3
 8012396:	460c      	mov	r4, r1
 8012398:	2001      	movs	r0, #1
 801239a:	e7a8      	b.n	80122ee <_vfiprintf_r+0xfe>
 801239c:	2300      	movs	r3, #0
 801239e:	3401      	adds	r4, #1
 80123a0:	9305      	str	r3, [sp, #20]
 80123a2:	4619      	mov	r1, r3
 80123a4:	f04f 0c0a 	mov.w	ip, #10
 80123a8:	4620      	mov	r0, r4
 80123aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123ae:	3a30      	subs	r2, #48	@ 0x30
 80123b0:	2a09      	cmp	r2, #9
 80123b2:	d903      	bls.n	80123bc <_vfiprintf_r+0x1cc>
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d0c6      	beq.n	8012346 <_vfiprintf_r+0x156>
 80123b8:	9105      	str	r1, [sp, #20]
 80123ba:	e7c4      	b.n	8012346 <_vfiprintf_r+0x156>
 80123bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80123c0:	4604      	mov	r4, r0
 80123c2:	2301      	movs	r3, #1
 80123c4:	e7f0      	b.n	80123a8 <_vfiprintf_r+0x1b8>
 80123c6:	ab03      	add	r3, sp, #12
 80123c8:	9300      	str	r3, [sp, #0]
 80123ca:	462a      	mov	r2, r5
 80123cc:	4b12      	ldr	r3, [pc, #72]	@ (8012418 <_vfiprintf_r+0x228>)
 80123ce:	a904      	add	r1, sp, #16
 80123d0:	4630      	mov	r0, r6
 80123d2:	f7fc ff71 	bl	800f2b8 <_printf_float>
 80123d6:	4607      	mov	r7, r0
 80123d8:	1c78      	adds	r0, r7, #1
 80123da:	d1d6      	bne.n	801238a <_vfiprintf_r+0x19a>
 80123dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80123de:	07d9      	lsls	r1, r3, #31
 80123e0:	d405      	bmi.n	80123ee <_vfiprintf_r+0x1fe>
 80123e2:	89ab      	ldrh	r3, [r5, #12]
 80123e4:	059a      	lsls	r2, r3, #22
 80123e6:	d402      	bmi.n	80123ee <_vfiprintf_r+0x1fe>
 80123e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123ea:	f7fd fda9 	bl	800ff40 <__retarget_lock_release_recursive>
 80123ee:	89ab      	ldrh	r3, [r5, #12]
 80123f0:	065b      	lsls	r3, r3, #25
 80123f2:	f53f af1f 	bmi.w	8012234 <_vfiprintf_r+0x44>
 80123f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80123f8:	e71e      	b.n	8012238 <_vfiprintf_r+0x48>
 80123fa:	ab03      	add	r3, sp, #12
 80123fc:	9300      	str	r3, [sp, #0]
 80123fe:	462a      	mov	r2, r5
 8012400:	4b05      	ldr	r3, [pc, #20]	@ (8012418 <_vfiprintf_r+0x228>)
 8012402:	a904      	add	r1, sp, #16
 8012404:	4630      	mov	r0, r6
 8012406:	f7fd f9e3 	bl	800f7d0 <_printf_i>
 801240a:	e7e4      	b.n	80123d6 <_vfiprintf_r+0x1e6>
 801240c:	080136ac 	.word	0x080136ac
 8012410:	080136b6 	.word	0x080136b6
 8012414:	0800f2b9 	.word	0x0800f2b9
 8012418:	080121cd 	.word	0x080121cd
 801241c:	080136b2 	.word	0x080136b2

08012420 <__swbuf_r>:
 8012420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012422:	460e      	mov	r6, r1
 8012424:	4614      	mov	r4, r2
 8012426:	4605      	mov	r5, r0
 8012428:	b118      	cbz	r0, 8012432 <__swbuf_r+0x12>
 801242a:	6a03      	ldr	r3, [r0, #32]
 801242c:	b90b      	cbnz	r3, 8012432 <__swbuf_r+0x12>
 801242e:	f7fd fb79 	bl	800fb24 <__sinit>
 8012432:	69a3      	ldr	r3, [r4, #24]
 8012434:	60a3      	str	r3, [r4, #8]
 8012436:	89a3      	ldrh	r3, [r4, #12]
 8012438:	071a      	lsls	r2, r3, #28
 801243a:	d501      	bpl.n	8012440 <__swbuf_r+0x20>
 801243c:	6923      	ldr	r3, [r4, #16]
 801243e:	b943      	cbnz	r3, 8012452 <__swbuf_r+0x32>
 8012440:	4621      	mov	r1, r4
 8012442:	4628      	mov	r0, r5
 8012444:	f000 f82a 	bl	801249c <__swsetup_r>
 8012448:	b118      	cbz	r0, 8012452 <__swbuf_r+0x32>
 801244a:	f04f 37ff 	mov.w	r7, #4294967295
 801244e:	4638      	mov	r0, r7
 8012450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012452:	6823      	ldr	r3, [r4, #0]
 8012454:	6922      	ldr	r2, [r4, #16]
 8012456:	1a98      	subs	r0, r3, r2
 8012458:	6963      	ldr	r3, [r4, #20]
 801245a:	b2f6      	uxtb	r6, r6
 801245c:	4283      	cmp	r3, r0
 801245e:	4637      	mov	r7, r6
 8012460:	dc05      	bgt.n	801246e <__swbuf_r+0x4e>
 8012462:	4621      	mov	r1, r4
 8012464:	4628      	mov	r0, r5
 8012466:	f7ff fc7f 	bl	8011d68 <_fflush_r>
 801246a:	2800      	cmp	r0, #0
 801246c:	d1ed      	bne.n	801244a <__swbuf_r+0x2a>
 801246e:	68a3      	ldr	r3, [r4, #8]
 8012470:	3b01      	subs	r3, #1
 8012472:	60a3      	str	r3, [r4, #8]
 8012474:	6823      	ldr	r3, [r4, #0]
 8012476:	1c5a      	adds	r2, r3, #1
 8012478:	6022      	str	r2, [r4, #0]
 801247a:	701e      	strb	r6, [r3, #0]
 801247c:	6962      	ldr	r2, [r4, #20]
 801247e:	1c43      	adds	r3, r0, #1
 8012480:	429a      	cmp	r2, r3
 8012482:	d004      	beq.n	801248e <__swbuf_r+0x6e>
 8012484:	89a3      	ldrh	r3, [r4, #12]
 8012486:	07db      	lsls	r3, r3, #31
 8012488:	d5e1      	bpl.n	801244e <__swbuf_r+0x2e>
 801248a:	2e0a      	cmp	r6, #10
 801248c:	d1df      	bne.n	801244e <__swbuf_r+0x2e>
 801248e:	4621      	mov	r1, r4
 8012490:	4628      	mov	r0, r5
 8012492:	f7ff fc69 	bl	8011d68 <_fflush_r>
 8012496:	2800      	cmp	r0, #0
 8012498:	d0d9      	beq.n	801244e <__swbuf_r+0x2e>
 801249a:	e7d6      	b.n	801244a <__swbuf_r+0x2a>

0801249c <__swsetup_r>:
 801249c:	b538      	push	{r3, r4, r5, lr}
 801249e:	4b29      	ldr	r3, [pc, #164]	@ (8012544 <__swsetup_r+0xa8>)
 80124a0:	4605      	mov	r5, r0
 80124a2:	6818      	ldr	r0, [r3, #0]
 80124a4:	460c      	mov	r4, r1
 80124a6:	b118      	cbz	r0, 80124b0 <__swsetup_r+0x14>
 80124a8:	6a03      	ldr	r3, [r0, #32]
 80124aa:	b90b      	cbnz	r3, 80124b0 <__swsetup_r+0x14>
 80124ac:	f7fd fb3a 	bl	800fb24 <__sinit>
 80124b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124b4:	0719      	lsls	r1, r3, #28
 80124b6:	d422      	bmi.n	80124fe <__swsetup_r+0x62>
 80124b8:	06da      	lsls	r2, r3, #27
 80124ba:	d407      	bmi.n	80124cc <__swsetup_r+0x30>
 80124bc:	2209      	movs	r2, #9
 80124be:	602a      	str	r2, [r5, #0]
 80124c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124c4:	81a3      	strh	r3, [r4, #12]
 80124c6:	f04f 30ff 	mov.w	r0, #4294967295
 80124ca:	e033      	b.n	8012534 <__swsetup_r+0x98>
 80124cc:	0758      	lsls	r0, r3, #29
 80124ce:	d512      	bpl.n	80124f6 <__swsetup_r+0x5a>
 80124d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124d2:	b141      	cbz	r1, 80124e6 <__swsetup_r+0x4a>
 80124d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80124d8:	4299      	cmp	r1, r3
 80124da:	d002      	beq.n	80124e2 <__swsetup_r+0x46>
 80124dc:	4628      	mov	r0, r5
 80124de:	f7fe fb7d 	bl	8010bdc <_free_r>
 80124e2:	2300      	movs	r3, #0
 80124e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80124e6:	89a3      	ldrh	r3, [r4, #12]
 80124e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80124ec:	81a3      	strh	r3, [r4, #12]
 80124ee:	2300      	movs	r3, #0
 80124f0:	6063      	str	r3, [r4, #4]
 80124f2:	6923      	ldr	r3, [r4, #16]
 80124f4:	6023      	str	r3, [r4, #0]
 80124f6:	89a3      	ldrh	r3, [r4, #12]
 80124f8:	f043 0308 	orr.w	r3, r3, #8
 80124fc:	81a3      	strh	r3, [r4, #12]
 80124fe:	6923      	ldr	r3, [r4, #16]
 8012500:	b94b      	cbnz	r3, 8012516 <__swsetup_r+0x7a>
 8012502:	89a3      	ldrh	r3, [r4, #12]
 8012504:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801250c:	d003      	beq.n	8012516 <__swsetup_r+0x7a>
 801250e:	4621      	mov	r1, r4
 8012510:	4628      	mov	r0, r5
 8012512:	f000 f883 	bl	801261c <__smakebuf_r>
 8012516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801251a:	f013 0201 	ands.w	r2, r3, #1
 801251e:	d00a      	beq.n	8012536 <__swsetup_r+0x9a>
 8012520:	2200      	movs	r2, #0
 8012522:	60a2      	str	r2, [r4, #8]
 8012524:	6962      	ldr	r2, [r4, #20]
 8012526:	4252      	negs	r2, r2
 8012528:	61a2      	str	r2, [r4, #24]
 801252a:	6922      	ldr	r2, [r4, #16]
 801252c:	b942      	cbnz	r2, 8012540 <__swsetup_r+0xa4>
 801252e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012532:	d1c5      	bne.n	80124c0 <__swsetup_r+0x24>
 8012534:	bd38      	pop	{r3, r4, r5, pc}
 8012536:	0799      	lsls	r1, r3, #30
 8012538:	bf58      	it	pl
 801253a:	6962      	ldrpl	r2, [r4, #20]
 801253c:	60a2      	str	r2, [r4, #8]
 801253e:	e7f4      	b.n	801252a <__swsetup_r+0x8e>
 8012540:	2000      	movs	r0, #0
 8012542:	e7f7      	b.n	8012534 <__swsetup_r+0x98>
 8012544:	2000040c 	.word	0x2000040c

08012548 <_raise_r>:
 8012548:	291f      	cmp	r1, #31
 801254a:	b538      	push	{r3, r4, r5, lr}
 801254c:	4605      	mov	r5, r0
 801254e:	460c      	mov	r4, r1
 8012550:	d904      	bls.n	801255c <_raise_r+0x14>
 8012552:	2316      	movs	r3, #22
 8012554:	6003      	str	r3, [r0, #0]
 8012556:	f04f 30ff 	mov.w	r0, #4294967295
 801255a:	bd38      	pop	{r3, r4, r5, pc}
 801255c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801255e:	b112      	cbz	r2, 8012566 <_raise_r+0x1e>
 8012560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012564:	b94b      	cbnz	r3, 801257a <_raise_r+0x32>
 8012566:	4628      	mov	r0, r5
 8012568:	f000 f830 	bl	80125cc <_getpid_r>
 801256c:	4622      	mov	r2, r4
 801256e:	4601      	mov	r1, r0
 8012570:	4628      	mov	r0, r5
 8012572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012576:	f000 b817 	b.w	80125a8 <_kill_r>
 801257a:	2b01      	cmp	r3, #1
 801257c:	d00a      	beq.n	8012594 <_raise_r+0x4c>
 801257e:	1c59      	adds	r1, r3, #1
 8012580:	d103      	bne.n	801258a <_raise_r+0x42>
 8012582:	2316      	movs	r3, #22
 8012584:	6003      	str	r3, [r0, #0]
 8012586:	2001      	movs	r0, #1
 8012588:	e7e7      	b.n	801255a <_raise_r+0x12>
 801258a:	2100      	movs	r1, #0
 801258c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012590:	4620      	mov	r0, r4
 8012592:	4798      	blx	r3
 8012594:	2000      	movs	r0, #0
 8012596:	e7e0      	b.n	801255a <_raise_r+0x12>

08012598 <raise>:
 8012598:	4b02      	ldr	r3, [pc, #8]	@ (80125a4 <raise+0xc>)
 801259a:	4601      	mov	r1, r0
 801259c:	6818      	ldr	r0, [r3, #0]
 801259e:	f7ff bfd3 	b.w	8012548 <_raise_r>
 80125a2:	bf00      	nop
 80125a4:	2000040c 	.word	0x2000040c

080125a8 <_kill_r>:
 80125a8:	b538      	push	{r3, r4, r5, lr}
 80125aa:	4d07      	ldr	r5, [pc, #28]	@ (80125c8 <_kill_r+0x20>)
 80125ac:	2300      	movs	r3, #0
 80125ae:	4604      	mov	r4, r0
 80125b0:	4608      	mov	r0, r1
 80125b2:	4611      	mov	r1, r2
 80125b4:	602b      	str	r3, [r5, #0]
 80125b6:	f7fc fa0b 	bl	800e9d0 <_kill>
 80125ba:	1c43      	adds	r3, r0, #1
 80125bc:	d102      	bne.n	80125c4 <_kill_r+0x1c>
 80125be:	682b      	ldr	r3, [r5, #0]
 80125c0:	b103      	cbz	r3, 80125c4 <_kill_r+0x1c>
 80125c2:	6023      	str	r3, [r4, #0]
 80125c4:	bd38      	pop	{r3, r4, r5, pc}
 80125c6:	bf00      	nop
 80125c8:	20017d8c 	.word	0x20017d8c

080125cc <_getpid_r>:
 80125cc:	f7fc b9fe 	b.w	800e9cc <_getpid>

080125d0 <__swhatbuf_r>:
 80125d0:	b570      	push	{r4, r5, r6, lr}
 80125d2:	460c      	mov	r4, r1
 80125d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125d8:	2900      	cmp	r1, #0
 80125da:	b096      	sub	sp, #88	@ 0x58
 80125dc:	4615      	mov	r5, r2
 80125de:	461e      	mov	r6, r3
 80125e0:	da0d      	bge.n	80125fe <__swhatbuf_r+0x2e>
 80125e2:	89a3      	ldrh	r3, [r4, #12]
 80125e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80125e8:	f04f 0100 	mov.w	r1, #0
 80125ec:	bf14      	ite	ne
 80125ee:	2340      	movne	r3, #64	@ 0x40
 80125f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80125f4:	2000      	movs	r0, #0
 80125f6:	6031      	str	r1, [r6, #0]
 80125f8:	602b      	str	r3, [r5, #0]
 80125fa:	b016      	add	sp, #88	@ 0x58
 80125fc:	bd70      	pop	{r4, r5, r6, pc}
 80125fe:	466a      	mov	r2, sp
 8012600:	f000 f848 	bl	8012694 <_fstat_r>
 8012604:	2800      	cmp	r0, #0
 8012606:	dbec      	blt.n	80125e2 <__swhatbuf_r+0x12>
 8012608:	9901      	ldr	r1, [sp, #4]
 801260a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801260e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012612:	4259      	negs	r1, r3
 8012614:	4159      	adcs	r1, r3
 8012616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801261a:	e7eb      	b.n	80125f4 <__swhatbuf_r+0x24>

0801261c <__smakebuf_r>:
 801261c:	898b      	ldrh	r3, [r1, #12]
 801261e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012620:	079d      	lsls	r5, r3, #30
 8012622:	4606      	mov	r6, r0
 8012624:	460c      	mov	r4, r1
 8012626:	d507      	bpl.n	8012638 <__smakebuf_r+0x1c>
 8012628:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801262c:	6023      	str	r3, [r4, #0]
 801262e:	6123      	str	r3, [r4, #16]
 8012630:	2301      	movs	r3, #1
 8012632:	6163      	str	r3, [r4, #20]
 8012634:	b003      	add	sp, #12
 8012636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012638:	ab01      	add	r3, sp, #4
 801263a:	466a      	mov	r2, sp
 801263c:	f7ff ffc8 	bl	80125d0 <__swhatbuf_r>
 8012640:	9f00      	ldr	r7, [sp, #0]
 8012642:	4605      	mov	r5, r0
 8012644:	4639      	mov	r1, r7
 8012646:	4630      	mov	r0, r6
 8012648:	f7fc fce4 	bl	800f014 <_malloc_r>
 801264c:	b948      	cbnz	r0, 8012662 <__smakebuf_r+0x46>
 801264e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012652:	059a      	lsls	r2, r3, #22
 8012654:	d4ee      	bmi.n	8012634 <__smakebuf_r+0x18>
 8012656:	f023 0303 	bic.w	r3, r3, #3
 801265a:	f043 0302 	orr.w	r3, r3, #2
 801265e:	81a3      	strh	r3, [r4, #12]
 8012660:	e7e2      	b.n	8012628 <__smakebuf_r+0xc>
 8012662:	89a3      	ldrh	r3, [r4, #12]
 8012664:	6020      	str	r0, [r4, #0]
 8012666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801266a:	81a3      	strh	r3, [r4, #12]
 801266c:	9b01      	ldr	r3, [sp, #4]
 801266e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012672:	b15b      	cbz	r3, 801268c <__smakebuf_r+0x70>
 8012674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012678:	4630      	mov	r0, r6
 801267a:	f000 f81d 	bl	80126b8 <_isatty_r>
 801267e:	b128      	cbz	r0, 801268c <__smakebuf_r+0x70>
 8012680:	89a3      	ldrh	r3, [r4, #12]
 8012682:	f023 0303 	bic.w	r3, r3, #3
 8012686:	f043 0301 	orr.w	r3, r3, #1
 801268a:	81a3      	strh	r3, [r4, #12]
 801268c:	89a3      	ldrh	r3, [r4, #12]
 801268e:	431d      	orrs	r5, r3
 8012690:	81a5      	strh	r5, [r4, #12]
 8012692:	e7cf      	b.n	8012634 <__smakebuf_r+0x18>

08012694 <_fstat_r>:
 8012694:	b538      	push	{r3, r4, r5, lr}
 8012696:	4d07      	ldr	r5, [pc, #28]	@ (80126b4 <_fstat_r+0x20>)
 8012698:	2300      	movs	r3, #0
 801269a:	4604      	mov	r4, r0
 801269c:	4608      	mov	r0, r1
 801269e:	4611      	mov	r1, r2
 80126a0:	602b      	str	r3, [r5, #0]
 80126a2:	f7fc f9c4 	bl	800ea2e <_fstat>
 80126a6:	1c43      	adds	r3, r0, #1
 80126a8:	d102      	bne.n	80126b0 <_fstat_r+0x1c>
 80126aa:	682b      	ldr	r3, [r5, #0]
 80126ac:	b103      	cbz	r3, 80126b0 <_fstat_r+0x1c>
 80126ae:	6023      	str	r3, [r4, #0]
 80126b0:	bd38      	pop	{r3, r4, r5, pc}
 80126b2:	bf00      	nop
 80126b4:	20017d8c 	.word	0x20017d8c

080126b8 <_isatty_r>:
 80126b8:	b538      	push	{r3, r4, r5, lr}
 80126ba:	4d06      	ldr	r5, [pc, #24]	@ (80126d4 <_isatty_r+0x1c>)
 80126bc:	2300      	movs	r3, #0
 80126be:	4604      	mov	r4, r0
 80126c0:	4608      	mov	r0, r1
 80126c2:	602b      	str	r3, [r5, #0]
 80126c4:	f7fc f9b8 	bl	800ea38 <_isatty>
 80126c8:	1c43      	adds	r3, r0, #1
 80126ca:	d102      	bne.n	80126d2 <_isatty_r+0x1a>
 80126cc:	682b      	ldr	r3, [r5, #0]
 80126ce:	b103      	cbz	r3, 80126d2 <_isatty_r+0x1a>
 80126d0:	6023      	str	r3, [r4, #0]
 80126d2:	bd38      	pop	{r3, r4, r5, pc}
 80126d4:	20017d8c 	.word	0x20017d8c

080126d8 <_sbrk>:
 80126d8:	4a04      	ldr	r2, [pc, #16]	@ (80126ec <_sbrk+0x14>)
 80126da:	6811      	ldr	r1, [r2, #0]
 80126dc:	4603      	mov	r3, r0
 80126de:	b909      	cbnz	r1, 80126e4 <_sbrk+0xc>
 80126e0:	4903      	ldr	r1, [pc, #12]	@ (80126f0 <_sbrk+0x18>)
 80126e2:	6011      	str	r1, [r2, #0]
 80126e4:	6810      	ldr	r0, [r2, #0]
 80126e6:	4403      	add	r3, r0
 80126e8:	6013      	str	r3, [r2, #0]
 80126ea:	4770      	bx	lr
 80126ec:	20017d94 	.word	0x20017d94
 80126f0:	20017d98 	.word	0x20017d98

080126f4 <_init>:
 80126f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126f6:	bf00      	nop
 80126f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126fa:	bc08      	pop	{r3}
 80126fc:	469e      	mov	lr, r3
 80126fe:	4770      	bx	lr

08012700 <_fini>:
 8012700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012702:	bf00      	nop
 8012704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012706:	bc08      	pop	{r3}
 8012708:	469e      	mov	lr, r3
 801270a:	4770      	bx	lr
