
11_LivingRoomHiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d4c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001214  08012f50  08012f50  00013f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014164  08014164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801416c  0801416c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014170  08014170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000005c8  20000000  08014174  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000177f8  200005e0  0801473c  000165e0  2**5
                  ALLOC
  8 ._user_heap_stack 00006000  20017dd8  0801473c  00016dd8  2**0
                  ALLOC
  9 .ARM.attributes 0000002c  00000000  00000000  000165c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00046fb3  00000000  00000000  000165f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000084df  00000000  00000000  0005d5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0001a0cc  00000000  00000000  00065a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000028a8  00000000  00000000  0007fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002093  00000000  00000000  00082400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000304bf  00000000  00000000  00084493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003e999  00000000  00000000  000b4952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00115455  00000000  00000000  000f32eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00208740  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000892c  00000000  00000000  00208784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000070  00000000  00000000  002110b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200005e0 	.word	0x200005e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08012f34 	.word	0x08012f34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200005e4 	.word	0x200005e4
 800023c:	08012f34 	.word	0x08012f34

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063c:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f860 	bl	8000704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000644:	2000      	movs	r0, #0
 8000646:	f00e fcfb 	bl	800f040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064a:	f00e fcd5 	bl	800eff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800064e:	2000      	movs	r0, #0
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000654:	4a03      	ldr	r2, [pc, #12]	@ (8000664 <HAL_IncTick+0x10>)
 8000656:	6811      	ldr	r1, [r2, #0]
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <HAL_IncTick+0x14>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	440b      	add	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200005fc 	.word	0x200005fc
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800066c:	4b01      	ldr	r3, [pc, #4]	@ (8000674 <HAL_GetTick+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	200005fc 	.word	0x200005fc

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff6 	bl	800066c <HAL_GetTick>
 8000680:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000686:	d002      	beq.n	800068e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <HAL_Delay+0x24>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068e:	f7ff ffed 	bl	800066c <HAL_GetTick>
 8000692:	1b40      	subs	r0, r0, r5
 8000694:	42a0      	cmp	r0, r4
 8000696:	d3fa      	bcc.n	800068e <HAL_Delay+0x16>
  {
  }
}
 8000698:	bd38      	pop	{r3, r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000

080006a0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80006a0:	2800      	cmp	r0, #0
 80006a2:	db04      	blt.n	80006ae <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	0109      	lsls	r1, r1, #4
 80006a6:	b2c9      	uxtb	r1, r1
 80006a8:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <__NVIC_SetPriority+0x1c>)
 80006aa:	5419      	strb	r1, [r3, r0]
 80006ac:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	f000 000f 	and.w	r0, r0, #15
 80006b2:	0109      	lsls	r1, r1, #4
 80006b4:	b2c9      	uxtb	r1, r1
 80006b6:	4b02      	ldr	r3, [pc, #8]	@ (80006c0 <__NVIC_SetPriority+0x20>)
 80006b8:	5419      	strb	r1, [r3, r0]
  }
}
 80006ba:	4770      	bx	lr
 80006bc:	e000e400 	.word	0xe000e400
 80006c0:	e000ed14 	.word	0xe000ed14

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ca:	f1c0 0c07 	rsb	ip, r0, #7
 80006ce:	f1bc 0f04 	cmp.w	ip, #4
 80006d2:	bf28      	it	cs
 80006d4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	1d03      	adds	r3, r0, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d90f      	bls.n	80006fe <NVIC_EncodePriority+0x3a>
 80006de:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80006e4:	fa0e f00c 	lsl.w	r0, lr, ip
 80006e8:	ea21 0100 	bic.w	r1, r1, r0
 80006ec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ee:	fa0e fe03 	lsl.w	lr, lr, r3
 80006f2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80006f6:	ea41 0002 	orr.w	r0, r1, r2
 80006fa:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	2300      	movs	r3, #0
 8000700:	e7ee      	b.n	80006e0 <NVIC_EncodePriority+0x1c>
	...

08000704 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	4906      	ldr	r1, [pc, #24]	@ (8000720 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000706:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000708:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800070c:	041b      	lsls	r3, r3, #16
 800070e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000710:	0200      	lsls	r0, r0, #8
 8000712:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000716:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000718:	4a02      	ldr	r2, [pc, #8]	@ (8000724 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800071a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800071c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00
 8000724:	05fa0000 	.word	0x05fa0000

08000728 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000728:	b510      	push	{r4, lr}
 800072a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <HAL_NVIC_SetPriority+0x1c>)
 800072e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000730:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000734:	f7ff ffc6 	bl	80006c4 <NVIC_EncodePriority>
 8000738:	4601      	mov	r1, r0
 800073a:	4620      	mov	r0, r4
 800073c:	f7ff ffb0 	bl	80006a0 <__NVIC_SetPriority>
}
 8000740:	bd10      	pop	{r4, pc}
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000748:	2800      	cmp	r0, #0
 800074a:	db07      	blt.n	800075c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074c:	f000 021f 	and.w	r2, r0, #31
 8000750:	0940      	lsrs	r0, r0, #5
 8000752:	2301      	movs	r3, #1
 8000754:	4093      	lsls	r3, r2
 8000756:	4a02      	ldr	r2, [pc, #8]	@ (8000760 <HAL_NVIC_EnableIRQ+0x18>)
 8000758:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e100 	.word	0xe000e100

08000764 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000764:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000766:	6805      	ldr	r5, [r0, #0]
 8000768:	682c      	ldr	r4, [r5, #0]
 800076a:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 800076e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000770:	6804      	ldr	r4, [r0, #0]
 8000772:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000774:	6883      	ldr	r3, [r0, #8]
 8000776:	2b40      	cmp	r3, #64	@ 0x40
 8000778:	d005      	beq.n	8000786 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800077a:	6803      	ldr	r3, [r0, #0]
 800077c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800077e:	6803      	ldr	r3, [r0, #0]
 8000780:	60da      	str	r2, [r3, #12]
  }
}
 8000782:	bc30      	pop	{r4, r5}
 8000784:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000786:	6803      	ldr	r3, [r0, #0]
 8000788:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800078a:	6803      	ldr	r3, [r0, #0]
 800078c:	60d9      	str	r1, [r3, #12]
 800078e:	e7f8      	b.n	8000782 <DMA_SetConfig+0x1e>

08000790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000790:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000792:	6803      	ldr	r3, [r0, #0]
 8000794:	b2d9      	uxtb	r1, r3
 8000796:	3910      	subs	r1, #16
 8000798:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <DMA_CalcBaseAndBitshift+0x34>)
 800079a:	fba2 4201 	umull	r4, r2, r2, r1
 800079e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007a0:	4c09      	ldr	r4, [pc, #36]	@ (80007c8 <DMA_CalcBaseAndBitshift+0x38>)
 80007a2:	5ca2      	ldrb	r2, [r4, r2]
 80007a4:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80007a6:	295f      	cmp	r1, #95	@ 0x5f
 80007a8:	d907      	bls.n	80007ba <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80007aa:	f36f 0309 	bfc	r3, #0, #10
 80007ae:	3304      	adds	r3, #4
 80007b0:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80007b2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80007b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007b8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80007ba:	f36f 0309 	bfc	r3, #0, #10
 80007be:	6583      	str	r3, [r0, #88]	@ 0x58
 80007c0:	e7f7      	b.n	80007b2 <DMA_CalcBaseAndBitshift+0x22>
 80007c2:	bf00      	nop
 80007c4:	aaaaaaab 	.word	0xaaaaaaab
 80007c8:	08012fc4 	.word	0x08012fc4

080007cc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80007cc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007ce:	6982      	ldr	r2, [r0, #24]
 80007d0:	b992      	cbnz	r2, 80007f8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d00a      	beq.n	80007ec <DMA_CheckFifoParam+0x20>
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d002      	beq.n	80007e0 <DMA_CheckFifoParam+0x14>
 80007da:	b10b      	cbz	r3, 80007e0 <DMA_CheckFifoParam+0x14>
 80007dc:	2000      	movs	r0, #0
 80007de:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007e0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80007e2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80007e6:	d128      	bne.n	800083a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80007e8:	2000      	movs	r0, #0
 80007ea:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80007ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80007ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80007f2:	d024      	beq.n	800083e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80007f4:	2000      	movs	r0, #0
 80007f6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80007f8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80007fc:	d009      	beq.n	8000812 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d925      	bls.n	800084e <DMA_CheckFifoParam+0x82>
 8000802:	2b03      	cmp	r3, #3
 8000804:	d125      	bne.n	8000852 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000806:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000808:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800080c:	d123      	bne.n	8000856 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 800080e:	2000      	movs	r0, #0
 8000810:	4770      	bx	lr
    switch (tmp)
 8000812:	2b03      	cmp	r3, #3
 8000814:	d803      	bhi.n	800081e <DMA_CheckFifoParam+0x52>
 8000816:	e8df f003 	tbb	[pc, r3]
 800081a:	0414      	.short	0x0414
 800081c:	0a14      	.short	0x0a14
 800081e:	2000      	movs	r0, #0
 8000820:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000822:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000824:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000828:	d10d      	bne.n	8000846 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800082a:	2000      	movs	r0, #0
 800082c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800082e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000830:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000834:	d009      	beq.n	800084a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000836:	2000      	movs	r0, #0
 8000838:	4770      	bx	lr
        status = HAL_ERROR;
 800083a:	2001      	movs	r0, #1
 800083c:	4770      	bx	lr
        status = HAL_ERROR;
 800083e:	2001      	movs	r0, #1
 8000840:	4770      	bx	lr
      status = HAL_ERROR;
 8000842:	2001      	movs	r0, #1
 8000844:	4770      	bx	lr
        status = HAL_ERROR;
 8000846:	2001      	movs	r0, #1
 8000848:	4770      	bx	lr
        status = HAL_ERROR;
 800084a:	2001      	movs	r0, #1
 800084c:	4770      	bx	lr
      status = HAL_ERROR;
 800084e:	2001      	movs	r0, #1
 8000850:	4770      	bx	lr
    switch (tmp)
 8000852:	2000      	movs	r0, #0
 8000854:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000856:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000858:	4770      	bx	lr
	...

0800085c <HAL_DMA_Init>:
{
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000860:	f7ff ff04 	bl	800066c <HAL_GetTick>
  if(hdma == NULL)
 8000864:	2c00      	cmp	r4, #0
 8000866:	d05c      	beq.n	8000922 <HAL_DMA_Init+0xc6>
 8000868:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800086a:	2302      	movs	r3, #2
 800086c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000870:	2300      	movs	r3, #0
 8000872:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000876:	6822      	ldr	r2, [r4, #0]
 8000878:	6813      	ldr	r3, [r2, #0]
 800087a:	f023 0301 	bic.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	f012 0f01 	tst.w	r2, #1
 8000888:	d00a      	beq.n	80008a0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800088a:	f7ff feef 	bl	800066c <HAL_GetTick>
 800088e:	1b43      	subs	r3, r0, r5
 8000890:	2b05      	cmp	r3, #5
 8000892:	d9f5      	bls.n	8000880 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000894:	2320      	movs	r3, #32
 8000896:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000898:	2003      	movs	r0, #3
 800089a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800089e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80008a0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008a2:	4921      	ldr	r1, [pc, #132]	@ (8000928 <HAL_DMA_Init+0xcc>)
 80008a4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008a6:	6862      	ldr	r2, [r4, #4]
 80008a8:	68a0      	ldr	r0, [r4, #8]
 80008aa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ac:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ae:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b0:	6920      	ldr	r0, [r4, #16]
 80008b2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b8:	69a0      	ldr	r0, [r4, #24]
 80008ba:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80008bc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008be:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80008c0:	6a20      	ldr	r0, [r4, #32]
 80008c2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008c4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80008c8:	2904      	cmp	r1, #4
 80008ca:	d01e      	beq.n	800090a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80008cc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80008ce:	6826      	ldr	r6, [r4, #0]
 80008d0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008d2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80008d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80008d8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d107      	bne.n	80008ee <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80008de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80008e0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008e2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80008e4:	b11b      	cbz	r3, 80008ee <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008e6:	4620      	mov	r0, r4
 80008e8:	f7ff ff70 	bl	80007cc <DMA_CheckFifoParam>
 80008ec:	b990      	cbnz	r0, 8000914 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80008ee:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008f0:	4620      	mov	r0, r4
 80008f2:	f7ff ff4d 	bl	8000790 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008f6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80008f8:	233f      	movs	r3, #63	@ 0x3f
 80008fa:	4093      	lsls	r3, r2
 80008fc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008fe:	2000      	movs	r0, #0
 8000900:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000902:	2301      	movs	r3, #1
 8000904:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8000908:	e7c9      	b.n	800089e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800090a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800090c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800090e:	4301      	orrs	r1, r0
 8000910:	430a      	orrs	r2, r1
 8000912:	e7db      	b.n	80008cc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000914:	2340      	movs	r3, #64	@ 0x40
 8000916:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800091e:	2001      	movs	r0, #1
 8000920:	e7bd      	b.n	800089e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000922:	2001      	movs	r0, #1
 8000924:	e7bb      	b.n	800089e <HAL_DMA_Init+0x42>
 8000926:	bf00      	nop
 8000928:	e010803f 	.word	0xe010803f

0800092c <HAL_DMA_Start_IT>:
{
 800092c:	b538      	push	{r3, r4, r5, lr}
 800092e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000930:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8000932:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8000936:	2801      	cmp	r0, #1
 8000938:	d030      	beq.n	800099c <HAL_DMA_Start_IT+0x70>
 800093a:	2001      	movs	r0, #1
 800093c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000940:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8000944:	b2c0      	uxtb	r0, r0
 8000946:	2801      	cmp	r0, #1
 8000948:	d004      	beq.n	8000954 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800094a:	2300      	movs	r3, #0
 800094c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8000950:	2002      	movs	r0, #2
}
 8000952:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000954:	2002      	movs	r0, #2
 8000956:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800095a:	2000      	movs	r0, #0
 800095c:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff ff00 	bl	8000764 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000964:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000966:	233f      	movs	r3, #63	@ 0x3f
 8000968:	4093      	lsls	r3, r2
 800096a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800096c:	6822      	ldr	r2, [r4, #0]
 800096e:	6813      	ldr	r3, [r2, #0]
 8000970:	f043 0316 	orr.w	r3, r3, #22
 8000974:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000976:	6822      	ldr	r2, [r4, #0]
 8000978:	6953      	ldr	r3, [r2, #20]
 800097a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800097e:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000980:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000982:	b123      	cbz	r3, 800098e <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000984:	6822      	ldr	r2, [r4, #0]
 8000986:	6813      	ldr	r3, [r2, #0]
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800098e:	6822      	ldr	r2, [r4, #0]
 8000990:	6813      	ldr	r3, [r2, #0]
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000998:	2000      	movs	r0, #0
 800099a:	e7da      	b.n	8000952 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 800099c:	2002      	movs	r0, #2
 800099e:	e7d8      	b.n	8000952 <HAL_DMA_Start_IT+0x26>

080009a0 <HAL_DMA_Abort>:
{
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009a4:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 80009a6:	f7ff fe61 	bl	800066c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009aa:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d006      	beq.n	80009c2 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b4:	2380      	movs	r3, #128	@ 0x80
 80009b6:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80009b8:	2300      	movs	r3, #0
 80009ba:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80009be:	2001      	movs	r0, #1
}
 80009c0:	bd70      	pop	{r4, r5, r6, pc}
 80009c2:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009c4:	6822      	ldr	r2, [r4, #0]
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	f023 0316 	bic.w	r3, r3, #22
 80009cc:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009ce:	6822      	ldr	r2, [r4, #0]
 80009d0:	6953      	ldr	r3, [r2, #20]
 80009d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80009d6:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80009da:	b1e3      	cbz	r3, 8000a16 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009dc:	6822      	ldr	r2, [r4, #0]
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	f023 0308 	bic.w	r3, r3, #8
 80009e4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80009e6:	6822      	ldr	r2, [r4, #0]
 80009e8:	6813      	ldr	r3, [r2, #0]
 80009ea:	f023 0301 	bic.w	r3, r3, #1
 80009ee:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f013 0f01 	tst.w	r3, #1
 80009f8:	d011      	beq.n	8000a1e <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009fa:	f7ff fe37 	bl	800066c <HAL_GetTick>
 80009fe:	1b43      	subs	r3, r0, r5
 8000a00:	2b05      	cmp	r3, #5
 8000a02:	d9f5      	bls.n	80009f0 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a04:	2320      	movs	r3, #32
 8000a06:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8000a14:	e7d4      	b.n	80009c0 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000a16:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1df      	bne.n	80009dc <HAL_DMA_Abort+0x3c>
 8000a1c:	e7e3      	b.n	80009e6 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a1e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000a20:	233f      	movs	r3, #63	@ 0x3f
 8000a22:	4093      	lsls	r3, r2
 8000a24:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8000a26:	2301      	movs	r3, #1
 8000a28:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8000a32:	e7c5      	b.n	80009c0 <HAL_DMA_Abort+0x20>

08000a34 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a34:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d003      	beq.n	8000a46 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8000a42:	2001      	movs	r0, #1
 8000a44:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a46:	2305      	movs	r3, #5
 8000a48:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8000a4c:	6802      	ldr	r2, [r0, #0]
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000a56:	2000      	movs	r0, #0
}
 8000a58:	4770      	bx	lr
	...

08000a5c <HAL_DMA_IRQHandler>:
{
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8000a66:	4b72      	ldr	r3, [pc, #456]	@ (8000c30 <HAL_DMA_IRQHandler+0x1d4>)
 8000a68:	681d      	ldr	r5, [r3, #0]
 8000a6a:	4b72      	ldr	r3, [pc, #456]	@ (8000c34 <HAL_DMA_IRQHandler+0x1d8>)
 8000a6c:	fba3 3505 	umull	r3, r5, r3, r5
 8000a70:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a72:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8000a74:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a76:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000a78:	2308      	movs	r3, #8
 8000a7a:	4093      	lsls	r3, r2
 8000a7c:	4233      	tst	r3, r6
 8000a7e:	d010      	beq.n	8000aa2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a80:	6803      	ldr	r3, [r0, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	f012 0f04 	tst.w	r2, #4
 8000a88:	d00b      	beq.n	8000aa2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	f022 0204 	bic.w	r2, r2, #4
 8000a90:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a92:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000a94:	2308      	movs	r3, #8
 8000a96:	4093      	lsls	r3, r2
 8000a98:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a9a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	4093      	lsls	r3, r2
 8000aa8:	4233      	tst	r3, r6
 8000aaa:	d009      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000aac:	6822      	ldr	r2, [r4, #0]
 8000aae:	6952      	ldr	r2, [r2, #20]
 8000ab0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8000ab4:	d004      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ab6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ab8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	4093      	lsls	r3, r2
 8000ac6:	4233      	tst	r3, r6
 8000ac8:	d009      	beq.n	8000ade <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aca:	6822      	ldr	r2, [r4, #0]
 8000acc:	6812      	ldr	r2, [r2, #0]
 8000ace:	f012 0f02 	tst.w	r2, #2
 8000ad2:	d004      	beq.n	8000ade <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ad4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ad6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ade:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	4093      	lsls	r3, r2
 8000ae4:	4233      	tst	r3, r6
 8000ae6:	d024      	beq.n	8000b32 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ae8:	6822      	ldr	r2, [r4, #0]
 8000aea:	6812      	ldr	r2, [r2, #0]
 8000aec:	f012 0f08 	tst.w	r2, #8
 8000af0:	d01f      	beq.n	8000b32 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000af2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000afc:	d00d      	beq.n	8000b1a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000b04:	d104      	bne.n	8000b10 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000b06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b08:	b19b      	cbz	r3, 8000b32 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	4798      	blx	r3
 8000b0e:	e010      	b.n	8000b32 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b10:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000b12:	b173      	cbz	r3, 8000b32 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000b14:	4620      	mov	r0, r4
 8000b16:	4798      	blx	r3
 8000b18:	e00b      	b.n	8000b32 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000b20:	d103      	bne.n	8000b2a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	f022 0208 	bic.w	r2, r2, #8
 8000b28:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000b2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b2c:	b10b      	cbz	r3, 8000b32 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000b2e:	4620      	mov	r0, r4
 8000b30:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b32:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000b34:	2320      	movs	r3, #32
 8000b36:	4093      	lsls	r3, r2
 8000b38:	4233      	tst	r3, r6
 8000b3a:	d055      	beq.n	8000be8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b3c:	6822      	ldr	r2, [r4, #0]
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	f012 0f10 	tst.w	r2, #16
 8000b44:	d050      	beq.n	8000be8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b46:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b48:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b05      	cmp	r3, #5
 8000b50:	d00e      	beq.n	8000b70 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b52:	6823      	ldr	r3, [r4, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000b5a:	d033      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000b62:	d12a      	bne.n	8000bba <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000b64:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d03e      	beq.n	8000be8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	4798      	blx	r3
 8000b6e:	e03b      	b.n	8000be8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b70:	6822      	ldr	r2, [r4, #0]
 8000b72:	6813      	ldr	r3, [r2, #0]
 8000b74:	f023 0316 	bic.w	r3, r3, #22
 8000b78:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	6953      	ldr	r3, [r2, #20]
 8000b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b82:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b86:	b1a3      	cbz	r3, 8000bb2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b88:	6822      	ldr	r2, [r4, #0]
 8000b8a:	6813      	ldr	r3, [r2, #0]
 8000b8c:	f023 0308 	bic.w	r3, r3, #8
 8000b90:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b92:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000b94:	233f      	movs	r3, #63	@ 0x3f
 8000b96:	4093      	lsls	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8000ba6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d03f      	beq.n	8000c2c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000bac:	4620      	mov	r0, r4
 8000bae:	4798      	blx	r3
        return;
 8000bb0:	e03c      	b.n	8000c2c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bb2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1e7      	bne.n	8000b88 <HAL_DMA_IRQHandler+0x12c>
 8000bb8:	e7eb      	b.n	8000b92 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000bba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000bbc:	b1a3      	cbz	r3, 8000be8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	4798      	blx	r3
 8000bc2:	e011      	b.n	8000be8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000bca:	d109      	bne.n	8000be0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f022 0210 	bic.w	r2, r2, #16
 8000bd2:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8000be0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000be2:	b10b      	cbz	r3, 8000be8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000be4:	4620      	mov	r0, r4
 8000be6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000be8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000bea:	b1fb      	cbz	r3, 8000c2c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000bec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000bee:	f013 0f01 	tst.w	r3, #1
 8000bf2:	d017      	beq.n	8000c24 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8000bfa:	6822      	ldr	r2, [r4, #0]
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000c04:	9b01      	ldr	r3, [sp, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	42ab      	cmp	r3, r5
 8000c0c:	d804      	bhi.n	8000c18 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f013 0f01 	tst.w	r3, #1
 8000c16:	d1f5      	bne.n	8000c04 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8000c24:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000c26:	b10b      	cbz	r3, 8000c2c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4798      	blx	r3
}
 8000c2c:	b003      	add	sp, #12
 8000c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c30:	200003fc 	.word	0x200003fc
 8000c34:	1b4e81b5 	.word	0x1b4e81b5

08000c38 <HAL_DMA_GetState>:
  return hdma->State;
 8000c38:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 8000c3c:	4770      	bx	lr
	...

08000c40 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	f200 80f4 	bhi.w	8000e30 <HAL_GPIO_Init+0x1f0>
{
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	e066      	b.n	8000d1c <HAL_GPIO_Init+0xdc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c4e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c50:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c54:	2403      	movs	r4, #3
 8000c56:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c5a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c5e:	68cc      	ldr	r4, [r1, #12]
 8000c60:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c64:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000c66:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c68:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c6a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6e:	684a      	ldr	r2, [r1, #4]
 8000c70:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000c74:	409a      	lsls	r2, r3
 8000c76:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000c78:	6042      	str	r2, [r0, #4]
 8000c7a:	e05d      	b.n	8000d38 <HAL_GPIO_Init+0xf8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c7c:	08dc      	lsrs	r4, r3, #3
 8000c7e:	3408      	adds	r4, #8
 8000c80:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c84:	f003 0507 	and.w	r5, r3, #7
 8000c88:	00ad      	lsls	r5, r5, #2
 8000c8a:	f04f 0e0f 	mov.w	lr, #15
 8000c8e:	fa0e fe05 	lsl.w	lr, lr, r5
 8000c92:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c96:	690a      	ldr	r2, [r1, #16]
 8000c98:	40aa      	lsls	r2, r5
 8000c9a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8000c9e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000ca2:	e05d      	b.n	8000d60 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ca4:	2209      	movs	r2, #9
 8000ca6:	e000      	b.n	8000caa <HAL_GPIO_Init+0x6a>
 8000ca8:	2200      	movs	r2, #0
 8000caa:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cae:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cb0:	3402      	adds	r4, #2
 8000cb2:	4d60      	ldr	r5, [pc, #384]	@ (8000e34 <HAL_GPIO_Init+0x1f4>)
 8000cb4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cb8:	4a5f      	ldr	r2, [pc, #380]	@ (8000e38 <HAL_GPIO_Init+0x1f8>)
 8000cba:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cbc:	ea6f 020c 	mvn.w	r2, ip
 8000cc0:	ea24 050c 	bic.w	r5, r4, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cc4:	684e      	ldr	r6, [r1, #4]
 8000cc6:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000cca:	d001      	beq.n	8000cd0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000ccc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000cd0:	4c59      	ldr	r4, [pc, #356]	@ (8000e38 <HAL_GPIO_Init+0x1f8>)
 8000cd2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000cd4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cd6:	ea02 0504 	and.w	r5, r2, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cda:	684e      	ldr	r6, [r1, #4]
 8000cdc:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000ce0:	d001      	beq.n	8000ce6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000ce2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000ce6:	4c54      	ldr	r4, [pc, #336]	@ (8000e38 <HAL_GPIO_Init+0x1f8>)
 8000ce8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000cea:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cec:	ea02 0504 	and.w	r5, r2, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cf0:	684e      	ldr	r6, [r1, #4]
 8000cf2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000cf6:	d001      	beq.n	8000cfc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000cf8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000cfc:	4c4e      	ldr	r4, [pc, #312]	@ (8000e38 <HAL_GPIO_Init+0x1f8>)
 8000cfe:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d00:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d02:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d04:	684d      	ldr	r5, [r1, #4]
 8000d06:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000d0a:	d001      	beq.n	8000d10 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000d0c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000d10:	4c49      	ldr	r4, [pc, #292]	@ (8000e38 <HAL_GPIO_Init+0x1f8>)
 8000d12:	6022      	str	r2, [r4, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000d14:	3301      	adds	r3, #1
 8000d16:	2b0f      	cmp	r3, #15
 8000d18:	f200 8088 	bhi.w	8000e2c <HAL_GPIO_Init+0x1ec>
    ioposition = ((uint32_t)0x01) << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d20:	680c      	ldr	r4, [r1, #0]
 8000d22:	ea04 0c02 	and.w	ip, r4, r2
    if (iocurrent == ioposition)
 8000d26:	ea32 0404 	bics.w	r4, r2, r4
 8000d2a:	d1f3      	bne.n	8000d14 <HAL_GPIO_Init+0xd4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d2c:	684c      	ldr	r4, [r1, #4]
 8000d2e:	f004 0403 	and.w	r4, r4, #3
 8000d32:	3c01      	subs	r4, #1
 8000d34:	2c01      	cmp	r4, #1
 8000d36:	d98a      	bls.n	8000c4e <HAL_GPIO_Init+0xe>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d38:	684a      	ldr	r2, [r1, #4]
 8000d3a:	f002 0203 	and.w	r2, r2, #3
 8000d3e:	2a03      	cmp	r2, #3
 8000d40:	d009      	beq.n	8000d56 <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8000d42:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d44:	005d      	lsls	r5, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	40aa      	lsls	r2, r5
 8000d4a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d4e:	688a      	ldr	r2, [r1, #8]
 8000d50:	40aa      	lsls	r2, r5
 8000d52:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000d54:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	684a      	ldr	r2, [r1, #4]
 8000d58:	f002 0203 	and.w	r2, r2, #3
 8000d5c:	2a02      	cmp	r2, #2
 8000d5e:	d08d      	beq.n	8000c7c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000d60:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d62:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d6c:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d70:	684a      	ldr	r2, [r1, #4]
 8000d72:	f002 0203 	and.w	r2, r2, #3
 8000d76:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d7a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000d7c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d7e:	684a      	ldr	r2, [r1, #4]
 8000d80:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000d84:	d0c6      	beq.n	8000d14 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4a2d      	ldr	r2, [pc, #180]	@ (8000e3c <HAL_GPIO_Init+0x1fc>)
 8000d88:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000d8a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000d8e:	6454      	str	r4, [r2, #68]	@ 0x44
 8000d90:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000d92:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000d96:	9201      	str	r2, [sp, #4]
 8000d98:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d9a:	089c      	lsrs	r4, r3, #2
 8000d9c:	1ca5      	adds	r5, r4, #2
 8000d9e:	4a25      	ldr	r2, [pc, #148]	@ (8000e34 <HAL_GPIO_Init+0x1f4>)
 8000da0:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000da4:	f003 0e03 	and.w	lr, r3, #3
 8000da8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f20e 	lsl.w	r2, r2, lr
 8000db2:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000db6:	4a22      	ldr	r2, [pc, #136]	@ (8000e40 <HAL_GPIO_Init+0x200>)
 8000db8:	4290      	cmp	r0, r2
 8000dba:	f43f af75 	beq.w	8000ca8 <HAL_GPIO_Init+0x68>
 8000dbe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dc2:	4290      	cmp	r0, r2
 8000dc4:	d022      	beq.n	8000e0c <HAL_GPIO_Init+0x1cc>
 8000dc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dca:	4290      	cmp	r0, r2
 8000dcc:	d020      	beq.n	8000e10 <HAL_GPIO_Init+0x1d0>
 8000dce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dd2:	4290      	cmp	r0, r2
 8000dd4:	d01e      	beq.n	8000e14 <HAL_GPIO_Init+0x1d4>
 8000dd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	d01c      	beq.n	8000e18 <HAL_GPIO_Init+0x1d8>
 8000dde:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d01a      	beq.n	8000e1c <HAL_GPIO_Init+0x1dc>
 8000de6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dea:	4290      	cmp	r0, r2
 8000dec:	d018      	beq.n	8000e20 <HAL_GPIO_Init+0x1e0>
 8000dee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000df2:	4290      	cmp	r0, r2
 8000df4:	d016      	beq.n	8000e24 <HAL_GPIO_Init+0x1e4>
 8000df6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	d014      	beq.n	8000e28 <HAL_GPIO_Init+0x1e8>
 8000dfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000e02:	4290      	cmp	r0, r2
 8000e04:	f43f af4e 	beq.w	8000ca4 <HAL_GPIO_Init+0x64>
 8000e08:	220a      	movs	r2, #10
 8000e0a:	e74e      	b.n	8000caa <HAL_GPIO_Init+0x6a>
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	e74c      	b.n	8000caa <HAL_GPIO_Init+0x6a>
 8000e10:	2202      	movs	r2, #2
 8000e12:	e74a      	b.n	8000caa <HAL_GPIO_Init+0x6a>
 8000e14:	2203      	movs	r2, #3
 8000e16:	e748      	b.n	8000caa <HAL_GPIO_Init+0x6a>
 8000e18:	2204      	movs	r2, #4
 8000e1a:	e746      	b.n	8000caa <HAL_GPIO_Init+0x6a>
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	e744      	b.n	8000caa <HAL_GPIO_Init+0x6a>
 8000e20:	2206      	movs	r2, #6
 8000e22:	e742      	b.n	8000caa <HAL_GPIO_Init+0x6a>
 8000e24:	2207      	movs	r2, #7
 8000e26:	e740      	b.n	8000caa <HAL_GPIO_Init+0x6a>
 8000e28:	2208      	movs	r2, #8
 8000e2a:	e73e      	b.n	8000caa <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000e2c:	b002      	add	sp, #8
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40013800 	.word	0x40013800
 8000e38:	40013c00 	.word	0x40013c00
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000

08000e44 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e44:	6903      	ldr	r3, [r0, #16]
 8000e46:	4219      	tst	r1, r3
 8000e48:	d001      	beq.n	8000e4e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e4e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000e50:	4770      	bx	lr

08000e52 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e52:	b10a      	cbz	r2, 8000e58 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e54:	6181      	str	r1, [r0, #24]
 8000e56:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e58:	0409      	lsls	r1, r1, #16
 8000e5a:	6181      	str	r1, [r0, #24]
  }
}
 8000e5c:	4770      	bx	lr

08000e5e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e5e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e60:	ea01 0203 	and.w	r2, r1, r3
 8000e64:	ea21 0103 	bic.w	r1, r1, r3
 8000e68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e6c:	6181      	str	r1, [r0, #24]
}
 8000e6e:	4770      	bx	lr

08000e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e70:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e72:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4203      	tst	r3, r0
 8000e78:	d100      	bne.n	8000e7c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000e7a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e7c:	4b02      	ldr	r3, [pc, #8]	@ (8000e88 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e7e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e80:	f00b fb68 	bl	800c554 <HAL_GPIO_EXTI_Callback>
}
 8000e84:	e7f9      	b.n	8000e7a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000e86:	bf00      	nop
 8000e88:	40013c00 	.word	0x40013c00

08000e8c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e8c:	6803      	ldr	r3, [r0, #0]
 8000e8e:	699a      	ldr	r2, [r3, #24]
 8000e90:	f012 0f02 	tst.w	r2, #2
 8000e94:	d001      	beq.n	8000e9a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000e96:	2200      	movs	r2, #0
 8000e98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e9a:	6803      	ldr	r3, [r0, #0]
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	f012 0f01 	tst.w	r2, #1
 8000ea2:	d103      	bne.n	8000eac <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ea4:	699a      	ldr	r2, [r3, #24]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	619a      	str	r2, [r3, #24]
  }
}
 8000eac:	4770      	bx	lr

08000eae <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000eae:	b410      	push	{r4}
 8000eb0:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000eb2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000eb6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000eba:	4319      	orrs	r1, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000ebc:	4321      	orrs	r1, r4
 8000ebe:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8000ec2:	6802      	ldr	r2, [r0, #0]
 8000ec4:	6853      	ldr	r3, [r2, #4]
 8000ec6:	0d64      	lsrs	r4, r4, #21
 8000ec8:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8000ecc:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8000ed0:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8000ed4:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8000ed8:	f044 0403 	orr.w	r4, r4, #3
 8000edc:	ea23 0304 	bic.w	r3, r3, r4
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8000ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000eea:	f011 0f01 	tst.w	r1, #1
 8000eee:	d009      	beq.n	8000f04 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000ef0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8000ef4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8000ef8:	2b28      	cmp	r3, #40	@ 0x28
 8000efa:	d001      	beq.n	8000f00 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000efc:	23f2      	movs	r3, #242	@ 0xf2
 8000efe:	e002      	b.n	8000f06 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8000f00:	2342      	movs	r3, #66	@ 0x42
 8000f02:	e000      	b.n	8000f06 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8000f04:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000f06:	f011 0f02 	tst.w	r1, #2
 8000f0a:	d009      	beq.n	8000f20 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000f0c:	f043 0c44 	orr.w	ip, r3, #68	@ 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000f10:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8000f14:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8000f18:	2a28      	cmp	r2, #40	@ 0x28
 8000f1a:	d009      	beq.n	8000f30 <I2C_Disable_IRQ+0x46>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000f1c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000f20:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8000f24:	d106      	bne.n	8000f34 <I2C_Disable_IRQ+0x4a>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8000f26:	2910      	cmp	r1, #16
 8000f28:	d106      	bne.n	8000f38 <I2C_Disable_IRQ+0x4e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000f2a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8000f2e:	e005      	b.n	8000f3c <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000f30:	4663      	mov	r3, ip
 8000f32:	e7f5      	b.n	8000f20 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000f34:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8000f38:	2920      	cmp	r1, #32
 8000f3a:	d007      	beq.n	8000f4c <I2C_Disable_IRQ+0x62>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8000f3c:	2940      	cmp	r1, #64	@ 0x40
 8000f3e:	d008      	beq.n	8000f52 <I2C_Disable_IRQ+0x68>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000f40:	6801      	ldr	r1, [r0, #0]
 8000f42:	680a      	ldr	r2, [r1, #0]
 8000f44:	ea22 0303 	bic.w	r3, r2, r3
 8000f48:	600b      	str	r3, [r1, #0]
}
 8000f4a:	4770      	bx	lr
    tmpisr |= I2C_IT_STOPI;
 8000f4c:	f043 0320 	orr.w	r3, r3, #32
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8000f50:	e7f6      	b.n	8000f40 <I2C_Disable_IRQ+0x56>
    tmpisr |= I2C_IT_TCI;
 8000f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f56:	e7f3      	b.n	8000f40 <I2C_Disable_IRQ+0x56>

08000f58 <I2C_IsErrorOccurred>:
{
 8000f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f5c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8000f5e:	6803      	ldr	r3, [r0, #0]
 8000f60:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000f62:	f016 0610 	ands.w	r6, r6, #16
 8000f66:	d07e      	beq.n	8001066 <I2C_IsErrorOccurred+0x10e>
 8000f68:	460d      	mov	r5, r1
 8000f6a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8000f70:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f72:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	6998      	ldr	r0, [r3, #24]
 8000f78:	f010 0f20 	tst.w	r0, #32
 8000f7c:	d132      	bne.n	8000fe4 <I2C_IsErrorOccurred+0x8c>
 8000f7e:	bb8f      	cbnz	r7, 8000fe4 <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 8000f80:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8000f84:	d0f6      	beq.n	8000f74 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000f86:	f7ff fb71 	bl	800066c <HAL_GetTick>
 8000f8a:	eba0 0008 	sub.w	r0, r0, r8
 8000f8e:	42a8      	cmp	r0, r5
 8000f90:	d801      	bhi.n	8000f96 <I2C_IsErrorOccurred+0x3e>
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	d1ee      	bne.n	8000f74 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000f96:	6821      	ldr	r1, [r4, #0]
 8000f98:	684a      	ldr	r2, [r1, #4]
 8000f9a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 8000f9e:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8000fa2:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000fa4:	6988      	ldr	r0, [r1, #24]
 8000fa6:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8000faa:	d004      	beq.n	8000fb6 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8000fac:	3b20      	subs	r3, #32
 8000fae:	bf18      	it	ne
 8000fb0:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8000fb2:	b902      	cbnz	r2, 8000fb6 <I2C_IsErrorOccurred+0x5e>
 8000fb4:	b973      	cbnz	r3, 8000fd4 <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fb6:	6823      	ldr	r3, [r4, #0]
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f013 0f20 	tst.w	r3, #32
 8000fbe:	d1d9      	bne.n	8000f74 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8000fc0:	f7ff fb54 	bl	800066c <HAL_GetTick>
 8000fc4:	eba0 0008 	sub.w	r0, r0, r8
 8000fc8:	2819      	cmp	r0, #25
 8000fca:	d9f4      	bls.n	8000fb6 <I2C_IsErrorOccurred+0x5e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8000fcc:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8000fd0:	2701      	movs	r7, #1
              break;
 8000fd2:	e7cf      	b.n	8000f74 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000fd4:	684b      	ldr	r3, [r1, #4]
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fda:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8000fdc:	f7ff fb46 	bl	800066c <HAL_GetTick>
 8000fe0:	4680      	mov	r8, r0
 8000fe2:	e7e8      	b.n	8000fb6 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8000fe4:	b90f      	cbnz	r7, 8000fea <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8000fea:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8000fee:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8000ff0:	6822      	ldr	r2, [r4, #0]
 8000ff2:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000ff4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000ff8:	d005      	beq.n	8001006 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 8000ffa:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000ffe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001002:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001004:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001006:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800100a:	d006      	beq.n	800101a <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 800100c:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001010:	6822      	ldr	r2, [r4, #0]
 8001012:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001016:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001018:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800101a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800101e:	d024      	beq.n	800106a <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001020:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102a:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800102c:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800102e:	4620      	mov	r0, r4
 8001030:	f7ff ff2c 	bl	8000e8c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001034:	6822      	ldr	r2, [r4, #0]
 8001036:	6853      	ldr	r3, [r2, #4]
 8001038:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800103c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001040:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800104a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800104c:	4333      	orrs	r3, r6
 800104e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001050:	2320      	movs	r3, #32
 8001052:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001056:	2300      	movs	r3, #0
 8001058:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800105c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8001060:	4628      	mov	r0, r5
 8001062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001066:	2500      	movs	r5, #0
 8001068:	e7c2      	b.n	8000ff0 <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 800106a:	2d00      	cmp	r5, #0
 800106c:	d0f8      	beq.n	8001060 <I2C_IsErrorOccurred+0x108>
 800106e:	e7de      	b.n	800102e <I2C_IsErrorOccurred+0xd6>

08001070 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001070:	b570      	push	{r4, r5, r6, lr}
 8001072:	4604      	mov	r4, r0
 8001074:	460d      	mov	r5, r1
 8001076:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f013 0f02 	tst.w	r3, #2
 8001080:	d122      	bne.n	80010c8 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001082:	4632      	mov	r2, r6
 8001084:	4629      	mov	r1, r5
 8001086:	4620      	mov	r0, r4
 8001088:	f7ff ff66 	bl	8000f58 <I2C_IsErrorOccurred>
 800108c:	b9f0      	cbnz	r0, 80010cc <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800108e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001092:	d0f1      	beq.n	8001078 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001094:	f7ff faea 	bl	800066c <HAL_GetTick>
 8001098:	1b80      	subs	r0, r0, r6
 800109a:	42a8      	cmp	r0, r5
 800109c:	d801      	bhi.n	80010a2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800109e:	2d00      	cmp	r5, #0
 80010a0:	d1ea      	bne.n	8001078 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f013 0f02 	tst.w	r3, #2
 80010aa:	d1e5      	bne.n	8001078 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010ac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80010ae:	f043 0320 	orr.w	r3, r3, #32
 80010b2:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80010b4:	2320      	movs	r3, #32
 80010b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80010c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 80010c4:	2001      	movs	r0, #1
 80010c6:	e000      	b.n	80010ca <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 80010c8:	2000      	movs	r0, #0
}
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80010cc:	2001      	movs	r0, #1
 80010ce:	e7fc      	b.n	80010ca <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

080010d0 <I2C_WaitOnFlagUntilTimeout>:
{
 80010d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010d4:	4605      	mov	r5, r0
 80010d6:	4688      	mov	r8, r1
 80010d8:	4617      	mov	r7, r2
 80010da:	461e      	mov	r6, r3
 80010dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010e0:	682b      	ldr	r3, [r5, #0]
 80010e2:	699c      	ldr	r4, [r3, #24]
 80010e4:	ea38 0404 	bics.w	r4, r8, r4
 80010e8:	bf0c      	ite	eq
 80010ea:	2301      	moveq	r3, #1
 80010ec:	2300      	movne	r3, #0
 80010ee:	42bb      	cmp	r3, r7
 80010f0:	d127      	bne.n	8001142 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80010f2:	464a      	mov	r2, r9
 80010f4:	4631      	mov	r1, r6
 80010f6:	4628      	mov	r0, r5
 80010f8:	f7ff ff2e 	bl	8000f58 <I2C_IsErrorOccurred>
 80010fc:	bb20      	cbnz	r0, 8001148 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 80010fe:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8001102:	d0ed      	beq.n	80010e0 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001104:	f7ff fab2 	bl	800066c <HAL_GetTick>
 8001108:	eba0 0009 	sub.w	r0, r0, r9
 800110c:	42b0      	cmp	r0, r6
 800110e:	d801      	bhi.n	8001114 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001110:	2e00      	cmp	r6, #0
 8001112:	d1e5      	bne.n	80010e0 <I2C_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	ea38 0303 	bics.w	r3, r8, r3
 800111c:	bf0c      	ite	eq
 800111e:	2301      	moveq	r3, #1
 8001120:	2300      	movne	r3, #0
 8001122:	42bb      	cmp	r3, r7
 8001124:	d1dc      	bne.n	80010e0 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001126:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001128:	f043 0320 	orr.w	r3, r3, #32
 800112c:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800112e:	2320      	movs	r3, #32
 8001130:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001134:	2300      	movs	r3, #0
 8001136:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800113a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800113e:	2001      	movs	r0, #1
 8001140:	e000      	b.n	8001144 <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 8001142:	2000      	movs	r0, #0
}
 8001144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8001148:	2001      	movs	r0, #1
 800114a:	e7fb      	b.n	8001144 <I2C_WaitOnFlagUntilTimeout+0x74>

0800114c <I2C_RequestMemoryWrite>:
{
 800114c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	4604      	mov	r4, r0
 8001154:	4690      	mov	r8, r2
 8001156:	461d      	mov	r5, r3
 8001158:	9e08      	ldr	r6, [sp, #32]
 800115a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <I2C_RequestMemoryWrite+0x78>)
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001164:	b2ea      	uxtb	r2, r5
 8001166:	f7ff fea2 	bl	8000eae <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800116a:	463a      	mov	r2, r7
 800116c:	4631      	mov	r1, r6
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff ff7e 	bl	8001070 <I2C_WaitOnTXISFlagUntilTimeout>
 8001174:	b9f8      	cbnz	r0, 80011b6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001176:	2d01      	cmp	r5, #1
 8001178:	d10e      	bne.n	8001198 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	fa5f f288 	uxtb.w	r2, r8
 8001180:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001182:	9700      	str	r7, [sp, #0]
 8001184:	4633      	mov	r3, r6
 8001186:	2200      	movs	r2, #0
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff ffa0 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 8001190:	b9a8      	cbnz	r0, 80011be <I2C_RequestMemoryWrite+0x72>
}
 8001192:	b002      	add	sp, #8
 8001194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011a0:	463a      	mov	r2, r7
 80011a2:	4631      	mov	r1, r6
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff ff63 	bl	8001070 <I2C_WaitOnTXISFlagUntilTimeout>
 80011aa:	b930      	cbnz	r0, 80011ba <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	fa5f f288 	uxtb.w	r2, r8
 80011b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80011b4:	e7e5      	b.n	8001182 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80011b6:	2001      	movs	r0, #1
 80011b8:	e7eb      	b.n	8001192 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80011ba:	2001      	movs	r0, #1
 80011bc:	e7e9      	b.n	8001192 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80011be:	2001      	movs	r0, #1
 80011c0:	e7e7      	b.n	8001192 <I2C_RequestMemoryWrite+0x46>
 80011c2:	bf00      	nop
 80011c4:	80002000 	.word	0x80002000

080011c8 <I2C_RequestMemoryRead>:
{
 80011c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	4604      	mov	r4, r0
 80011d0:	4690      	mov	r8, r2
 80011d2:	461d      	mov	r5, r3
 80011d4:	9e08      	ldr	r6, [sp, #32]
 80011d6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <I2C_RequestMemoryRead+0x74>)
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2300      	movs	r3, #0
 80011de:	b2ea      	uxtb	r2, r5
 80011e0:	f7ff fe65 	bl	8000eae <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011e4:	463a      	mov	r2, r7
 80011e6:	4631      	mov	r1, r6
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff ff41 	bl	8001070 <I2C_WaitOnTXISFlagUntilTimeout>
 80011ee:	b9f8      	cbnz	r0, 8001230 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80011f0:	2d01      	cmp	r5, #1
 80011f2:	d10e      	bne.n	8001212 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	fa5f f288 	uxtb.w	r2, r8
 80011fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80011fc:	9700      	str	r7, [sp, #0]
 80011fe:	4633      	mov	r3, r6
 8001200:	2200      	movs	r2, #0
 8001202:	2140      	movs	r1, #64	@ 0x40
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff ff63 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 800120a:	b9a8      	cbnz	r0, 8001238 <I2C_RequestMemoryRead+0x70>
}
 800120c:	b002      	add	sp, #8
 800120e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800121a:	463a      	mov	r2, r7
 800121c:	4631      	mov	r1, r6
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff ff26 	bl	8001070 <I2C_WaitOnTXISFlagUntilTimeout>
 8001224:	b930      	cbnz	r0, 8001234 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	fa5f f288 	uxtb.w	r2, r8
 800122c:	629a      	str	r2, [r3, #40]	@ 0x28
 800122e:	e7e5      	b.n	80011fc <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8001230:	2001      	movs	r0, #1
 8001232:	e7eb      	b.n	800120c <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8001234:	2001      	movs	r0, #1
 8001236:	e7e9      	b.n	800120c <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8001238:	2001      	movs	r0, #1
 800123a:	e7e7      	b.n	800120c <I2C_RequestMemoryRead+0x44>
 800123c:	80002000 	.word	0x80002000

08001240 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	4604      	mov	r4, r0
 8001244:	460d      	mov	r5, r1
 8001246:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001248:	e004      	b.n	8001254 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f013 0f20 	tst.w	r3, #32
 8001252:	d012      	beq.n	800127a <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f013 0f20 	tst.w	r3, #32
 800125c:	d11b      	bne.n	8001296 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800125e:	4632      	mov	r2, r6
 8001260:	4629      	mov	r1, r5
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff fe78 	bl	8000f58 <I2C_IsErrorOccurred>
 8001268:	b9b8      	cbnz	r0, 800129a <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800126a:	f7ff f9ff 	bl	800066c <HAL_GetTick>
 800126e:	1b80      	subs	r0, r0, r6
 8001270:	42a8      	cmp	r0, r5
 8001272:	d8ea      	bhi.n	800124a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8001274:	2d00      	cmp	r5, #0
 8001276:	d1ed      	bne.n	8001254 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8001278:	e7e7      	b.n	800124a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800127a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800127c:	f043 0320 	orr.w	r3, r3, #32
 8001280:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001282:	2320      	movs	r3, #32
 8001284:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800128e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8001292:	2001      	movs	r0, #1
 8001294:	e000      	b.n	8001298 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8001296:	2000      	movs	r0, #0
}
 8001298:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800129a:	2001      	movs	r0, #1
 800129c:	e7fc      	b.n	8001298 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

0800129e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800129e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a0:	4604      	mov	r4, r0
 80012a2:	460e      	mov	r6, r1
 80012a4:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 80012a6:	2500      	movs	r5, #0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80012a8:	e018      	b.n	80012dc <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	6463      	str	r3, [r4, #68]	@ 0x44
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80012ae:	f7ff f9dd 	bl	800066c <HAL_GetTick>
 80012b2:	1bc0      	subs	r0, r0, r7
 80012b4:	42b0      	cmp	r0, r6
 80012b6:	d800      	bhi.n	80012ba <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
 80012b8:	b986      	cbnz	r6, 80012dc <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
 80012ba:	b97d      	cbnz	r5, 80012dc <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f013 0f04 	tst.w	r3, #4
 80012c4:	d10a      	bne.n	80012dc <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80012c8:	f043 0320 	orr.w	r3, r3, #32
 80012cc:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012ce:	2320      	movs	r3, #32
 80012d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 80012d4:	2300      	movs	r3, #0
 80012d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        status = HAL_ERROR;
 80012da:	2501      	movs	r5, #1
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f013 0f04 	tst.w	r3, #4
 80012e4:	d12e      	bne.n	8001344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
 80012e6:	bb6d      	cbnz	r5, 8001344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012e8:	463a      	mov	r2, r7
 80012ea:	4631      	mov	r1, r6
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fe33 	bl	8000f58 <I2C_IsErrorOccurred>
 80012f2:	b100      	cbz	r0, 80012f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
      status = HAL_ERROR;
 80012f4:	2501      	movs	r5, #1
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	f012 0f20 	tst.w	r2, #32
 80012fe:	d0d6      	beq.n	80012ae <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
 8001300:	2d00      	cmp	r5, #0
 8001302:	d1d4      	bne.n	80012ae <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001304:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	f012 0f10 	tst.w	r2, #16
 800130c:	d0cd      	beq.n	80012aa <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800130e:	2210      	movs	r2, #16
 8001310:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001312:	2304      	movs	r3, #4
 8001314:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	2220      	movs	r2, #32
 800131a:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800131c:	6821      	ldr	r1, [r4, #0]
 800131e:	684b      	ldr	r3, [r1, #4]
 8001320:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001324:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001328:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8001332:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001336:	2300      	movs	r3, #0
 8001338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800133c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        status = HAL_ERROR;
 8001340:	2501      	movs	r5, #1
 8001342:	e7b4      	b.n	80012ae <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
}
 8001344:	4628      	mov	r0, r5
 8001346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001348 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001348:	2800      	cmp	r0, #0
 800134a:	d05d      	beq.n	8001408 <HAL_I2C_Init+0xc0>
{
 800134c:	b510      	push	{r4, lr}
 800134e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001350:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001354:	2b00      	cmp	r3, #0
 8001356:	d046      	beq.n	80013e6 <HAL_I2C_Init+0x9e>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001358:	2324      	movs	r3, #36	@ 0x24
 800135a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800135e:	6822      	ldr	r2, [r4, #0]
 8001360:	6813      	ldr	r3, [r2, #0]
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001368:	6863      	ldr	r3, [r4, #4]
 800136a:	6822      	ldr	r2, [r4, #0]
 800136c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001370:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001372:	6822      	ldr	r2, [r4, #0]
 8001374:	6893      	ldr	r3, [r2, #8]
 8001376:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800137a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800137c:	68e3      	ldr	r3, [r4, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d036      	beq.n	80013f0 <HAL_I2C_Init+0xa8>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001382:	68a3      	ldr	r3, [r4, #8]
 8001384:	6822      	ldr	r2, [r4, #0]
 8001386:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 800138a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800138c:	68e3      	ldr	r3, [r4, #12]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d034      	beq.n	80013fc <HAL_I2C_Init+0xb4>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001392:	6822      	ldr	r2, [r4, #0]
 8001394:	6853      	ldr	r3, [r2, #4]
 8001396:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800139a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800139c:	6822      	ldr	r2, [r4, #0]
 800139e:	6851      	ldr	r1, [r2, #4]
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <HAL_I2C_Init+0xc4>)
 80013a2:	430b      	orrs	r3, r1
 80013a4:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013a6:	6822      	ldr	r2, [r4, #0]
 80013a8:	68d3      	ldr	r3, [r2, #12]
 80013aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80013ae:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b0:	6923      	ldr	r3, [r4, #16]
 80013b2:	6962      	ldr	r2, [r4, #20]
 80013b4:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013b6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b8:	6822      	ldr	r2, [r4, #0]
 80013ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80013be:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013c0:	69e3      	ldr	r3, [r4, #28]
 80013c2:	6a21      	ldr	r1, [r4, #32]
 80013c4:	6822      	ldr	r2, [r4, #0]
 80013c6:	430b      	orrs	r3, r1
 80013c8:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	6813      	ldr	r3, [r2, #0]
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d4:	2000      	movs	r0, #0
 80013d6:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013d8:	2320      	movs	r3, #32
 80013da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013de:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80013e4:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80013e6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80013ea:	f00d f96f 	bl	800e6cc <HAL_I2C_MspInit>
 80013ee:	e7b3      	b.n	8001358 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013f0:	68a3      	ldr	r3, [r4, #8]
 80013f2:	6822      	ldr	r2, [r4, #0]
 80013f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013f8:	6093      	str	r3, [r2, #8]
 80013fa:	e7c7      	b.n	800138c <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013fc:	6822      	ldr	r2, [r4, #0]
 80013fe:	6853      	ldr	r3, [r2, #4]
 8001400:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001404:	6053      	str	r3, [r2, #4]
 8001406:	e7c9      	b.n	800139c <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8001408:	2001      	movs	r0, #1
}
 800140a:	4770      	bx	lr
 800140c:	02008000 	.word	0x02008000

08001410 <HAL_I2C_Master_Transmit>:
{
 8001410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	460f      	mov	r7, r1
 8001418:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800141a:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800141e:	b2c9      	uxtb	r1, r1
 8001420:	2920      	cmp	r1, #32
 8001422:	f040 80b7 	bne.w	8001594 <HAL_I2C_Master_Transmit+0x184>
 8001426:	4604      	mov	r4, r0
 8001428:	4690      	mov	r8, r2
 800142a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800142c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8001430:	2b01      	cmp	r3, #1
 8001432:	f000 80b3 	beq.w	800159c <HAL_I2C_Master_Transmit+0x18c>
 8001436:	f04f 0a01 	mov.w	sl, #1
 800143a:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800143e:	f7ff f915 	bl	800066c <HAL_GetTick>
 8001442:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001444:	9000      	str	r0, [sp, #0]
 8001446:	2319      	movs	r3, #25
 8001448:	4652      	mov	r2, sl
 800144a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff fe3e 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 8001454:	2800      	cmp	r0, #0
 8001456:	f040 80a3 	bne.w	80015a0 <HAL_I2C_Master_Transmit+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800145a:	2321      	movs	r3, #33	@ 0x21
 800145c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001460:	2310      	movs	r3, #16
 8001462:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001466:	2300      	movs	r3, #0
 8001468:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800146a:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800146e:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001472:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001474:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001476:	b29b      	uxth	r3, r3
 8001478:	2bff      	cmp	r3, #255	@ 0xff
 800147a:	d91e      	bls.n	80014ba <HAL_I2C_Master_Transmit+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800147c:	23ff      	movs	r3, #255	@ 0xff
 800147e:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    if (hi2c->XferSize > 0U)
 8001484:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8001486:	b1ea      	cbz	r2, 80014c4 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001488:	6822      	ldr	r2, [r4, #0]
 800148a:	f898 1000 	ldrb.w	r1, [r8]
 800148e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001490:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001492:	3201      	adds	r2, #1
 8001494:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001496:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001498:	b292      	uxth	r2, r2
 800149a:	3a01      	subs	r2, #1
 800149c:	b292      	uxth	r2, r2
 800149e:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80014a0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80014a2:	3a01      	subs	r2, #1
 80014a4:	b292      	uxth	r2, r2
 80014a6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80014a8:	3201      	adds	r2, #1
 80014aa:	4941      	ldr	r1, [pc, #260]	@ (80015b0 <HAL_I2C_Master_Transmit+0x1a0>)
 80014ac:	9100      	str	r1, [sp, #0]
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	4639      	mov	r1, r7
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff fcfb 	bl	8000eae <I2C_TransferConfig>
 80014b8:	e018      	b.n	80014ec <HAL_I2C_Master_Transmit+0xdc>
      hi2c->XferSize = hi2c->XferCount;
 80014ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80014bc:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80014be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014c2:	e7df      	b.n	8001484 <HAL_I2C_Master_Transmit+0x74>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80014c4:	493a      	ldr	r1, [pc, #232]	@ (80015b0 <HAL_I2C_Master_Transmit+0x1a0>)
 80014c6:	9100      	str	r1, [sp, #0]
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	4639      	mov	r1, r7
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fcee 	bl	8000eae <I2C_TransferConfig>
 80014d2:	e00b      	b.n	80014ec <HAL_I2C_Master_Transmit+0xdc>
          hi2c->XferSize = hi2c->XferCount;
 80014d4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80014d6:	b292      	uxth	r2, r2
 80014d8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014da:	2300      	movs	r3, #0
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	4639      	mov	r1, r7
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff fce1 	bl	8000eae <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d033      	beq.n	800155c <HAL_I2C_Master_Transmit+0x14c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f4:	462a      	mov	r2, r5
 80014f6:	4631      	mov	r1, r6
 80014f8:	4620      	mov	r0, r4
 80014fa:	f7ff fdb9 	bl	8001070 <I2C_WaitOnTXISFlagUntilTimeout>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d150      	bne.n	80015a4 <HAL_I2C_Master_Transmit+0x194>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001502:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	7812      	ldrb	r2, [r2, #0]
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800150a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800150c:	3301      	adds	r3, #1
 800150e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001510:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001512:	b29b      	uxth	r3, r3
 8001514:	3b01      	subs	r3, #1
 8001516:	b29b      	uxth	r3, r3
 8001518:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800151a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800151c:	3b01      	subs	r3, #1
 800151e:	b29b      	uxth	r3, r3
 8001520:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001522:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001524:	b292      	uxth	r2, r2
 8001526:	2a00      	cmp	r2, #0
 8001528:	d0e0      	beq.n	80014ec <HAL_I2C_Master_Transmit+0xdc>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1de      	bne.n	80014ec <HAL_I2C_Master_Transmit+0xdc>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800152e:	9500      	str	r5, [sp, #0]
 8001530:	4633      	mov	r3, r6
 8001532:	2200      	movs	r2, #0
 8001534:	2180      	movs	r1, #128	@ 0x80
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff fdca 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 800153c:	bba0      	cbnz	r0, 80015a8 <HAL_I2C_Master_Transmit+0x198>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800153e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001540:	b29b      	uxth	r3, r3
 8001542:	2bff      	cmp	r3, #255	@ 0xff
 8001544:	d9c6      	bls.n	80014d4 <HAL_I2C_Master_Transmit+0xc4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001546:	22ff      	movs	r2, #255	@ 0xff
 8001548:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800154a:	2300      	movs	r3, #0
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001552:	4639      	mov	r1, r7
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fcaa 	bl	8000eae <I2C_TransferConfig>
 800155a:	e7c7      	b.n	80014ec <HAL_I2C_Master_Transmit+0xdc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800155c:	462a      	mov	r2, r5
 800155e:	4631      	mov	r1, r6
 8001560:	4620      	mov	r0, r4
 8001562:	f7ff fe6d 	bl	8001240 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001566:	bb08      	cbnz	r0, 80015ac <HAL_I2C_Master_Transmit+0x19c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	2220      	movs	r2, #32
 800156c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800156e:	6821      	ldr	r1, [r4, #0]
 8001570:	684b      	ldr	r3, [r1, #4]
 8001572:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001576:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800157a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001584:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001588:	2300      	movs	r3, #0
 800158a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800158e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8001592:	e000      	b.n	8001596 <HAL_I2C_Master_Transmit+0x186>
    return HAL_BUSY;
 8001594:	2002      	movs	r0, #2
}
 8001596:	b002      	add	sp, #8
 8001598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800159c:	2002      	movs	r0, #2
 800159e:	e7fa      	b.n	8001596 <HAL_I2C_Master_Transmit+0x186>
      return HAL_ERROR;
 80015a0:	2001      	movs	r0, #1
 80015a2:	e7f8      	b.n	8001596 <HAL_I2C_Master_Transmit+0x186>
        return HAL_ERROR;
 80015a4:	2001      	movs	r0, #1
 80015a6:	e7f6      	b.n	8001596 <HAL_I2C_Master_Transmit+0x186>
          return HAL_ERROR;
 80015a8:	2001      	movs	r0, #1
 80015aa:	e7f4      	b.n	8001596 <HAL_I2C_Master_Transmit+0x186>
      return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
 80015ae:	e7f2      	b.n	8001596 <HAL_I2C_Master_Transmit+0x186>
 80015b0:	80002000 	.word	0x80002000

080015b4 <HAL_I2C_Master_Receive>:
{
 80015b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	460f      	mov	r7, r1
 80015bc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015be:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80015c2:	b2c9      	uxtb	r1, r1
 80015c4:	2920      	cmp	r1, #32
 80015c6:	f040 80a3 	bne.w	8001710 <HAL_I2C_Master_Receive+0x15c>
 80015ca:	4604      	mov	r4, r0
 80015cc:	4690      	mov	r8, r2
 80015ce:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80015d0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	f000 809f 	beq.w	8001718 <HAL_I2C_Master_Receive+0x164>
 80015da:	f04f 0a01 	mov.w	sl, #1
 80015de:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80015e2:	f7ff f843 	bl	800066c <HAL_GetTick>
 80015e6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015e8:	9000      	str	r0, [sp, #0]
 80015ea:	2319      	movs	r3, #25
 80015ec:	4652      	mov	r2, sl
 80015ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff fd6c 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 80015f8:	2800      	cmp	r0, #0
 80015fa:	f040 808f 	bne.w	800171c <HAL_I2C_Master_Receive+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015fe:	2322      	movs	r3, #34	@ 0x22
 8001600:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001604:	2310      	movs	r3, #16
 8001606:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160a:	2300      	movs	r3, #0
 800160c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800160e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001612:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001616:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001618:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800161a:	b29b      	uxth	r3, r3
 800161c:	2bff      	cmp	r3, #255	@ 0xff
 800161e:	d90b      	bls.n	8001638 <HAL_I2C_Master_Receive+0x84>
      hi2c->XferSize = 1U;
 8001620:	4652      	mov	r2, sl
 8001622:	f8a4 a028 	strh.w	sl, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <HAL_I2C_Master_Receive+0x178>)
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800162e:	4639      	mov	r1, r7
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff fc3c 	bl	8000eae <I2C_TransferConfig>
 8001636:	e018      	b.n	800166a <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = hi2c->XferCount;
 8001638:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800163a:	b292      	uxth	r2, r2
 800163c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_I2C_Master_Receive+0x178>)
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	4639      	mov	r1, r7
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff fc2f 	bl	8000eae <I2C_TransferConfig>
 8001650:	e00b      	b.n	800166a <HAL_I2C_Master_Receive+0xb6>
          hi2c->XferSize = hi2c->XferCount;
 8001652:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001654:	b292      	uxth	r2, r2
 8001656:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001658:	2300      	movs	r3, #0
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	4639      	mov	r1, r7
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fc22 	bl	8000eae <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800166a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d032      	beq.n	80016d8 <HAL_I2C_Master_Receive+0x124>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001672:	462a      	mov	r2, r5
 8001674:	4631      	mov	r1, r6
 8001676:	4620      	mov	r0, r4
 8001678:	f7ff fe11 	bl	800129e <I2C_WaitOnRXNEFlagUntilTimeout>
 800167c:	2800      	cmp	r0, #0
 800167e:	d14f      	bne.n	8001720 <HAL_I2C_Master_Receive+0x16c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001684:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001686:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001688:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800168a:	3301      	adds	r3, #1
 800168c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800168e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8001690:	3a01      	subs	r2, #1
 8001692:	b292      	uxth	r2, r2
 8001694:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001696:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001698:	b29b      	uxth	r3, r3
 800169a:	3b01      	subs	r3, #1
 800169c:	b29b      	uxth	r3, r3
 800169e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0e0      	beq.n	800166a <HAL_I2C_Master_Receive+0xb6>
 80016a8:	2a00      	cmp	r2, #0
 80016aa:	d1de      	bne.n	800166a <HAL_I2C_Master_Receive+0xb6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016ac:	9500      	str	r5, [sp, #0]
 80016ae:	4633      	mov	r3, r6
 80016b0:	2180      	movs	r1, #128	@ 0x80
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff fd0c 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 80016b8:	bba0      	cbnz	r0, 8001724 <HAL_I2C_Master_Receive+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2bff      	cmp	r3, #255	@ 0xff
 80016c0:	d9c7      	bls.n	8001652 <HAL_I2C_Master_Receive+0x9e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c2:	22ff      	movs	r2, #255	@ 0xff
 80016c4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016ce:	4639      	mov	r1, r7
 80016d0:	4620      	mov	r0, r4
 80016d2:	f7ff fbec 	bl	8000eae <I2C_TransferConfig>
 80016d6:	e7c8      	b.n	800166a <HAL_I2C_Master_Receive+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d8:	462a      	mov	r2, r5
 80016da:	4631      	mov	r1, r6
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fdaf 	bl	8001240 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016e2:	bb08      	cbnz	r0, 8001728 <HAL_I2C_Master_Receive+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	2220      	movs	r2, #32
 80016e8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80016ea:	6821      	ldr	r1, [r4, #0]
 80016ec:	684b      	ldr	r3, [r1, #4]
 80016ee:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80016f2:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80016f6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001700:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001704:	2300      	movs	r3, #0
 8001706:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800170a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800170e:	e000      	b.n	8001712 <HAL_I2C_Master_Receive+0x15e>
    return HAL_BUSY;
 8001710:	2002      	movs	r0, #2
}
 8001712:	b002      	add	sp, #8
 8001714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8001718:	2002      	movs	r0, #2
 800171a:	e7fa      	b.n	8001712 <HAL_I2C_Master_Receive+0x15e>
      return HAL_ERROR;
 800171c:	2001      	movs	r0, #1
 800171e:	e7f8      	b.n	8001712 <HAL_I2C_Master_Receive+0x15e>
        return HAL_ERROR;
 8001720:	2001      	movs	r0, #1
 8001722:	e7f6      	b.n	8001712 <HAL_I2C_Master_Receive+0x15e>
          return HAL_ERROR;
 8001724:	2001      	movs	r0, #1
 8001726:	e7f4      	b.n	8001712 <HAL_I2C_Master_Receive+0x15e>
      return HAL_ERROR;
 8001728:	2001      	movs	r0, #1
 800172a:	e7f2      	b.n	8001712 <HAL_I2C_Master_Receive+0x15e>
 800172c:	80002400 	.word	0x80002400

08001730 <HAL_I2C_Mem_Write>:
{
 8001730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001734:	b083      	sub	sp, #12
 8001736:	460d      	mov	r5, r1
 8001738:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800173c:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800173e:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8001742:	b2c9      	uxtb	r1, r1
 8001744:	2920      	cmp	r1, #32
 8001746:	f040 80bc 	bne.w	80018c2 <HAL_I2C_Mem_Write+0x192>
 800174a:	4604      	mov	r4, r0
 800174c:	4690      	mov	r8, r2
 800174e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8001750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001752:	f1ba 0f00 	cmp.w	sl, #0
 8001756:	bf18      	it	ne
 8001758:	2b00      	cmpne	r3, #0
 800175a:	d016      	beq.n	800178a <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 800175c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8001760:	2b01      	cmp	r3, #1
 8001762:	f000 80b2 	beq.w	80018ca <HAL_I2C_Mem_Write+0x19a>
 8001766:	f04f 0b01 	mov.w	fp, #1
 800176a:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800176e:	f7fe ff7d 	bl	800066c <HAL_GetTick>
 8001772:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001774:	9000      	str	r0, [sp, #0]
 8001776:	2319      	movs	r3, #25
 8001778:	465a      	mov	r2, fp
 800177a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff fca6 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 8001784:	b130      	cbz	r0, 8001794 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8001786:	2001      	movs	r0, #1
 8001788:	e09c      	b.n	80018c4 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800178a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178e:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 8001790:	2001      	movs	r0, #1
 8001792:	e097      	b.n	80018c4 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001794:	2321      	movs	r3, #33	@ 0x21
 8001796:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800179a:	2340      	movs	r3, #64	@ 0x40
 800179c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80017a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80017a6:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017a8:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017ac:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017ae:	9601      	str	r6, [sp, #4]
 80017b0:	9700      	str	r7, [sp, #0]
 80017b2:	464b      	mov	r3, r9
 80017b4:	4642      	mov	r2, r8
 80017b6:	4629      	mov	r1, r5
 80017b8:	4620      	mov	r0, r4
 80017ba:	f7ff fcc7 	bl	800114c <I2C_RequestMemoryWrite>
 80017be:	b970      	cbnz	r0, 80017de <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2bff      	cmp	r3, #255	@ 0xff
 80017c6:	d90f      	bls.n	80017e8 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c8:	22ff      	movs	r2, #255	@ 0xff
 80017ca:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017cc:	2300      	movs	r3, #0
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017d4:	4629      	mov	r1, r5
 80017d6:	4620      	mov	r0, r4
 80017d8:	f7ff fb69 	bl	8000eae <I2C_TransferConfig>
 80017dc:	e021      	b.n	8001822 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 80017de:	2300      	movs	r3, #0
 80017e0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80017e4:	4658      	mov	r0, fp
 80017e6:	e06d      	b.n	80018c4 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 80017e8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80017ea:	b292      	uxth	r2, r2
 80017ec:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017ee:	2300      	movs	r3, #0
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	4629      	mov	r1, r5
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff fb57 	bl	8000eae <I2C_TransferConfig>
 8001800:	e00f      	b.n	8001822 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8001802:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001804:	b292      	uxth	r2, r2
 8001806:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	4629      	mov	r1, r5
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff fb4a 	bl	8000eae <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800181a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800181c:	b29b      	uxth	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d033      	beq.n	800188a <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001822:	4632      	mov	r2, r6
 8001824:	4639      	mov	r1, r7
 8001826:	4620      	mov	r0, r4
 8001828:	f7ff fc22 	bl	8001070 <I2C_WaitOnTXISFlagUntilTimeout>
 800182c:	2800      	cmp	r0, #0
 800182e:	d14e      	bne.n	80018ce <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001830:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001838:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800183a:	3301      	adds	r3, #1
 800183c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800183e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	3b01      	subs	r3, #1
 8001844:	b29b      	uxth	r3, r3
 8001846:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001848:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800184a:	3b01      	subs	r3, #1
 800184c:	b29b      	uxth	r3, r3
 800184e:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001850:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001852:	b292      	uxth	r2, r2
 8001854:	2a00      	cmp	r2, #0
 8001856:	d0e0      	beq.n	800181a <HAL_I2C_Mem_Write+0xea>
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1de      	bne.n	800181a <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800185c:	9600      	str	r6, [sp, #0]
 800185e:	463b      	mov	r3, r7
 8001860:	2200      	movs	r2, #0
 8001862:	2180      	movs	r1, #128	@ 0x80
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fc33 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 800186a:	bb90      	cbnz	r0, 80018d2 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800186c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	2bff      	cmp	r3, #255	@ 0xff
 8001872:	d9c6      	bls.n	8001802 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001874:	22ff      	movs	r2, #255	@ 0xff
 8001876:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001878:	2300      	movs	r3, #0
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001880:	4629      	mov	r1, r5
 8001882:	4620      	mov	r0, r4
 8001884:	f7ff fb13 	bl	8000eae <I2C_TransferConfig>
 8001888:	e7c7      	b.n	800181a <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188a:	4632      	mov	r2, r6
 800188c:	4639      	mov	r1, r7
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff fcd6 	bl	8001240 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001894:	b9f8      	cbnz	r0, 80018d6 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	2220      	movs	r2, #32
 800189a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800189c:	6821      	ldr	r1, [r4, #0]
 800189e:	684b      	ldr	r3, [r1, #4]
 80018a0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80018a4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80018a8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80018b2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80018bc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 80018c0:	e000      	b.n	80018c4 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 80018c2:	2002      	movs	r0, #2
}
 80018c4:	b003      	add	sp, #12
 80018c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80018ca:	2002      	movs	r0, #2
 80018cc:	e7fa      	b.n	80018c4 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 80018ce:	2001      	movs	r0, #1
 80018d0:	e7f8      	b.n	80018c4 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 80018d2:	2001      	movs	r0, #1
 80018d4:	e7f6      	b.n	80018c4 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 80018d6:	2001      	movs	r0, #1
 80018d8:	e7f4      	b.n	80018c4 <HAL_I2C_Mem_Write+0x194>
	...

080018dc <HAL_I2C_Mem_Read>:
{
 80018dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e0:	b083      	sub	sp, #12
 80018e2:	460d      	mov	r5, r1
 80018e4:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80018e8:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ea:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80018ee:	b2c9      	uxtb	r1, r1
 80018f0:	2920      	cmp	r1, #32
 80018f2:	f040 80bd 	bne.w	8001a70 <HAL_I2C_Mem_Read+0x194>
 80018f6:	4604      	mov	r4, r0
 80018f8:	4690      	mov	r8, r2
 80018fa:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80018fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80018fe:	f1ba 0f00 	cmp.w	sl, #0
 8001902:	bf18      	it	ne
 8001904:	2b00      	cmpne	r3, #0
 8001906:	d016      	beq.n	8001936 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8001908:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800190c:	2b01      	cmp	r3, #1
 800190e:	f000 80b3 	beq.w	8001a78 <HAL_I2C_Mem_Read+0x19c>
 8001912:	f04f 0b01 	mov.w	fp, #1
 8001916:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800191a:	f7fe fea7 	bl	800066c <HAL_GetTick>
 800191e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001920:	9000      	str	r0, [sp, #0]
 8001922:	2319      	movs	r3, #25
 8001924:	465a      	mov	r2, fp
 8001926:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff fbd0 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 8001930:	b130      	cbz	r0, 8001940 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8001932:	2001      	movs	r0, #1
 8001934:	e09d      	b.n	8001a72 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001936:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800193a:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 800193c:	2001      	movs	r0, #1
 800193e:	e098      	b.n	8001a72 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001940:	2322      	movs	r3, #34	@ 0x22
 8001942:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001946:	2340      	movs	r3, #64	@ 0x40
 8001948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194c:	2300      	movs	r3, #0
 800194e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001950:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001952:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001954:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001958:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800195a:	9601      	str	r6, [sp, #4]
 800195c:	9700      	str	r7, [sp, #0]
 800195e:	464b      	mov	r3, r9
 8001960:	4642      	mov	r2, r8
 8001962:	4629      	mov	r1, r5
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff fc2f 	bl	80011c8 <I2C_RequestMemoryRead>
 800196a:	b970      	cbnz	r0, 800198a <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800196c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800196e:	b29b      	uxth	r3, r3
 8001970:	2bff      	cmp	r3, #255	@ 0xff
 8001972:	d90f      	bls.n	8001994 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = 1U;
 8001974:	2201      	movs	r2, #1
 8001976:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001978:	4b43      	ldr	r3, [pc, #268]	@ (8001a88 <HAL_I2C_Mem_Read+0x1ac>)
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001980:	4629      	mov	r1, r5
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff fa93 	bl	8000eae <I2C_TransferConfig>
 8001988:	e021      	b.n	80019ce <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 800198a:	2300      	movs	r3, #0
 800198c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001990:	4658      	mov	r0, fp
 8001992:	e06e      	b.n	8001a72 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8001994:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001996:	b292      	uxth	r2, r2
 8001998:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800199a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a88 <HAL_I2C_Mem_Read+0x1ac>)
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	4629      	mov	r1, r5
 80019a6:	4620      	mov	r0, r4
 80019a8:	f7ff fa81 	bl	8000eae <I2C_TransferConfig>
 80019ac:	e00f      	b.n	80019ce <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 80019ae:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80019b0:	b292      	uxth	r2, r2
 80019b2:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019b4:	2300      	movs	r3, #0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	4629      	mov	r1, r5
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff fa74 	bl	8000eae <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80019c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d034      	beq.n	8001a38 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80019ce:	9600      	str	r6, [sp, #0]
 80019d0:	463b      	mov	r3, r7
 80019d2:	2200      	movs	r2, #0
 80019d4:	2104      	movs	r1, #4
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff fb7a 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d14d      	bne.n	8001a7c <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80019e6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80019e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80019ea:	3301      	adds	r3, #1
 80019ec:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80019ee:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80019f0:	3a01      	subs	r2, #1
 80019f2:	b292      	uxth	r2, r2
 80019f4:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80019f6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a00:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0de      	beq.n	80019c6 <HAL_I2C_Mem_Read+0xea>
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d1dc      	bne.n	80019c6 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a0c:	9600      	str	r6, [sp, #0]
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2180      	movs	r1, #128	@ 0x80
 8001a12:	4620      	mov	r0, r4
 8001a14:	f7ff fb5c 	bl	80010d0 <I2C_WaitOnFlagUntilTimeout>
 8001a18:	bb90      	cbnz	r0, 8001a80 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a1a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	2bff      	cmp	r3, #255	@ 0xff
 8001a20:	d9c5      	bls.n	80019ae <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = 1U;
 8001a22:	2201      	movs	r2, #1
 8001a24:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001a26:	2300      	movs	r3, #0
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a2e:	4629      	mov	r1, r5
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7ff fa3c 	bl	8000eae <I2C_TransferConfig>
 8001a36:	e7c6      	b.n	80019c6 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a38:	4632      	mov	r2, r6
 8001a3a:	4639      	mov	r1, r7
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff fbff 	bl	8001240 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a42:	b9f8      	cbnz	r0, 8001a84 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	2220      	movs	r2, #32
 8001a48:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001a4a:	6821      	ldr	r1, [r4, #0]
 8001a4c:	684b      	ldr	r3, [r1, #4]
 8001a4e:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001a52:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001a56:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a60:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8001a6a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8001a6e:	e000      	b.n	8001a72 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8001a70:	2002      	movs	r0, #2
}
 8001a72:	b003      	add	sp, #12
 8001a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001a78:	2002      	movs	r0, #2
 8001a7a:	e7fa      	b.n	8001a72 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	e7f8      	b.n	8001a72 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8001a80:	2001      	movs	r0, #1
 8001a82:	e7f6      	b.n	8001a72 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8001a84:	2001      	movs	r0, #1
 8001a86:	e7f4      	b.n	8001a72 <HAL_I2C_Mem_Read+0x196>
 8001a88:	80002400 	.word	0x80002400

08001a8c <HAL_I2C_EV_IRQHandler>:
{
 8001a8c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a8e:	6803      	ldr	r3, [r0, #0]
 8001a90:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a92:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001a94:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001a96:	b103      	cbz	r3, 8001a9a <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001a98:	4798      	blx	r3
}
 8001a9a:	bd08      	pop	{r3, pc}

08001a9c <HAL_I2C_SlaveTxCpltCallback>:
}
 8001a9c:	4770      	bx	lr

08001a9e <HAL_I2C_SlaveRxCpltCallback>:
}
 8001a9e:	4770      	bx	lr

08001aa0 <I2C_ITSlaveSeqCplt>:
{
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001aa4:	6803      	ldr	r3, [r0, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001aae:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8001ab2:	d00e      	beq.n	8001ad2 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001aba:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001abc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b29      	cmp	r3, #41	@ 0x29
 8001ac4:	d00d      	beq.n	8001ae2 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001ac6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ace:	d018      	beq.n	8001b02 <I2C_ITSlaveSeqCplt+0x62>
}
 8001ad0:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ad2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001ad6:	d0f1      	beq.n	8001abc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e7ec      	b.n	8001abc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ae2:	2328      	movs	r3, #40	@ 0x28
 8001ae4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ae8:	2321      	movs	r3, #33	@ 0x21
 8001aea:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001aec:	2101      	movs	r1, #1
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7ff f9fb 	bl	8000eea <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001af4:	2300      	movs	r3, #0
 8001af6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff ffce 	bl	8001a9c <HAL_I2C_SlaveTxCpltCallback>
 8001b00:	e7e6      	b.n	8001ad0 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b02:	2328      	movs	r3, #40	@ 0x28
 8001b04:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b08:	2322      	movs	r3, #34	@ 0x22
 8001b0a:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff f9eb 	bl	8000eea <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b14:	2300      	movs	r3, #0
 8001b16:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7ff ffbf 	bl	8001a9e <HAL_I2C_SlaveRxCpltCallback>
}
 8001b20:	e7d6      	b.n	8001ad0 <I2C_ITSlaveSeqCplt+0x30>

08001b22 <HAL_I2C_AddrCallback>:
}
 8001b22:	4770      	bx	lr

08001b24 <I2C_ITAddrCplt>:
{
 8001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b26:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b28:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001b2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001b30:	2b28      	cmp	r3, #40	@ 0x28
 8001b32:	d006      	beq.n	8001b42 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b34:	6803      	ldr	r3, [r0, #0]
 8001b36:	2208      	movs	r2, #8
 8001b38:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
}
 8001b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8001b42:	6803      	ldr	r3, [r0, #0]
 8001b44:	699e      	ldr	r6, [r3, #24]
 8001b46:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	0c12      	lsrs	r2, r2, #16
 8001b4e:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001b58:	68df      	ldr	r7, [r3, #12]
 8001b5a:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b5e:	68c1      	ldr	r1, [r0, #12]
 8001b60:	2902      	cmp	r1, #2
 8001b62:	d122      	bne.n	8001baa <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001b64:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8001b68:	f015 0f06 	tst.w	r5, #6
 8001b6c:	d110      	bne.n	8001b90 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8001b6e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001b70:	3101      	adds	r1, #1
 8001b72:	6481      	str	r1, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001b74:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001b76:	2902      	cmp	r1, #2
 8001b78:	d1e2      	bne.n	8001b40 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6481      	str	r1, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b7e:	2008      	movs	r0, #8
 8001b80:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001b82:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b86:	4631      	mov	r1, r6
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f7ff ffca 	bl	8001b22 <HAL_I2C_AddrCallback>
 8001b8e:	e7d7      	b.n	8001b40 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b94:	f7ff f9a9 	bl	8000eea <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b9e:	463a      	mov	r2, r7
 8001ba0:	4631      	mov	r1, r6
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7ff ffbd 	bl	8001b22 <HAL_I2C_AddrCallback>
 8001ba8:	e7ca      	b.n	8001b40 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001baa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bae:	f7ff f99c 	bl	8000eea <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001bb8:	462a      	mov	r2, r5
 8001bba:	4631      	mov	r1, r6
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7ff ffb0 	bl	8001b22 <HAL_I2C_AddrCallback>
 8001bc2:	e7bd      	b.n	8001b40 <I2C_ITAddrCplt+0x1c>

08001bc4 <HAL_I2C_ListenCpltCallback>:
}
 8001bc4:	4770      	bx	lr
	...

08001bc8 <I2C_ITListenCplt>:
{
 8001bc8:	b510      	push	{r4, lr}
 8001bca:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <I2C_ITListenCplt+0x64>)
 8001bce:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6303      	str	r3, [r0, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bda:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8001bde:	6343      	str	r3, [r0, #52]	@ 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001be0:	f011 0f04 	tst.w	r1, #4
 8001be4:	d013      	beq.n	8001c0e <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001be6:	6803      	ldr	r3, [r0, #0]
 8001be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bea:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001bec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001bee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	6243      	str	r3, [r0, #36]	@ 0x24
    if (hi2c->XferSize > 0U)
 8001bf4:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 8001bf6:	b153      	cbz	r3, 8001c0e <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	8503      	strh	r3, [r0, #40]	@ 0x28
      hi2c->XferCount--;
 8001bfc:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	8543      	strh	r3, [r0, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c06:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6443      	str	r3, [r0, #68]	@ 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001c0e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff f969 	bl	8000eea <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8001c24:	4620      	mov	r0, r4
 8001c26:	f7ff ffcd 	bl	8001bc4 <HAL_I2C_ListenCpltCallback>
}
 8001c2a:	bd10      	pop	{r4, pc}
 8001c2c:	ffff0000 	.word	0xffff0000

08001c30 <HAL_I2C_ErrorCallback>:
}
 8001c30:	4770      	bx	lr

08001c32 <HAL_I2C_AbortCpltCallback>:
}
 8001c32:	4770      	bx	lr

08001c34 <I2C_TreatErrorCallback>:
{
 8001c34:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001c36:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b60      	cmp	r3, #96	@ 0x60
 8001c3e:	d006      	beq.n	8001c4e <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001c44:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001c48:	f7ff fff2 	bl	8001c30 <HAL_I2C_ErrorCallback>
}
 8001c4c:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	2320      	movs	r3, #32
 8001c50:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001c58:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001c5c:	f7ff ffe9 	bl	8001c32 <HAL_I2C_AbortCpltCallback>
 8001c60:	e7f4      	b.n	8001c4c <I2C_TreatErrorCallback+0x18>
	...

08001c64 <I2C_ITError>:
{
 8001c64:	b510      	push	{r4, lr}
 8001c66:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001c68:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001c72:	4845      	ldr	r0, [pc, #276]	@ (8001d88 <I2C_ITError+0x124>)
 8001c74:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001c76:	8562      	strh	r2, [r4, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001c78:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	6462      	str	r2, [r4, #68]	@ 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001c7e:	3b28      	subs	r3, #40	@ 0x28
 8001c80:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d82d      	bhi.n	8001ce2 <I2C_ITError+0x7e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001c86:	2103      	movs	r1, #3
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f7ff f92e 	bl	8000eea <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c8e:	2328      	movs	r3, #40	@ 0x28
 8001c90:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001c94:	4b3d      	ldr	r3, [pc, #244]	@ (8001d8c <I2C_ITError+0x128>)
 8001c96:	6363      	str	r3, [r4, #52]	@ 0x34
  tmppreviousstate = hi2c->PreviousState;
 8001c98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001c9a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001c9c:	2a00      	cmp	r2, #0
 8001c9e:	d049      	beq.n	8001d34 <I2C_ITError+0xd0>
 8001ca0:	2b21      	cmp	r3, #33	@ 0x21
 8001ca2:	bf18      	it	ne
 8001ca4:	2b11      	cmpne	r3, #17
 8001ca6:	d145      	bne.n	8001d34 <I2C_ITError+0xd0>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8001cb0:	d003      	beq.n	8001cba <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001cb8:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001cba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001cbc:	f7fe ffbc 	bl	8000c38 <HAL_DMA_GetState>
 8001cc0:	2801      	cmp	r0, #1
 8001cc2:	d033      	beq.n	8001d2c <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001cc4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001cc6:	4a32      	ldr	r2, [pc, #200]	@ (8001d90 <I2C_ITError+0x12c>)
 8001cc8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001cd0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001cd2:	f7fe feaf 	bl	8000a34 <HAL_DMA_Abort_IT>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d055      	beq.n	8001d86 <I2C_ITError+0x122>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001cda:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001cdc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001cde:	4798      	blx	r3
 8001ce0:	e051      	b.n	8001d86 <I2C_ITError+0x122>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ce2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f7ff f8ff 	bl	8000eea <I2C_Disable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff f8cd 	bl	8000e8c <I2C_Flush_TXDR>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001cf2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b60      	cmp	r3, #96	@ 0x60
 8001cfa:	d014      	beq.n	8001d26 <I2C_ITError+0xc2>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	f012 0f20 	tst.w	r2, #32
 8001d0a:	d00c      	beq.n	8001d26 <I2C_ITError+0xc2>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	f012 0f10 	tst.w	r2, #16
 8001d12:	d005      	beq.n	8001d20 <I2C_ITError+0xbc>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d14:	2210      	movs	r2, #16
 8001d16:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d18:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	2220      	movs	r2, #32
 8001d24:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d2a:	e7b5      	b.n	8001c98 <I2C_ITError+0x34>
      I2C_TreatErrorCallback(hi2c);
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff ff81 	bl	8001c34 <I2C_TreatErrorCallback>
 8001d32:	e028      	b.n	8001d86 <I2C_ITError+0x122>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001d34:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001d36:	b31a      	cbz	r2, 8001d80 <I2C_ITError+0x11c>
 8001d38:	2b22      	cmp	r3, #34	@ 0x22
 8001d3a:	bf18      	it	ne
 8001d3c:	2b12      	cmpne	r3, #18
 8001d3e:	d11f      	bne.n	8001d80 <I2C_ITError+0x11c>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8001d48:	d003      	beq.n	8001d52 <I2C_ITError+0xee>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d50:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001d52:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001d54:	f7fe ff70 	bl	8000c38 <HAL_DMA_GetState>
 8001d58:	2801      	cmp	r0, #1
 8001d5a:	d00d      	beq.n	8001d78 <I2C_ITError+0x114>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001d5c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d90 <I2C_ITError+0x12c>)
 8001d60:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8001d62:	2300      	movs	r3, #0
 8001d64:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001d68:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001d6a:	f7fe fe63 	bl	8000a34 <HAL_DMA_Abort_IT>
 8001d6e:	b150      	cbz	r0, 8001d86 <I2C_ITError+0x122>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001d70:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001d72:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001d74:	4798      	blx	r3
 8001d76:	e006      	b.n	8001d86 <I2C_ITError+0x122>
      I2C_TreatErrorCallback(hi2c);
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7ff ff5b 	bl	8001c34 <I2C_TreatErrorCallback>
 8001d7e:	e002      	b.n	8001d86 <I2C_ITError+0x122>
    I2C_TreatErrorCallback(hi2c);
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff ff57 	bl	8001c34 <I2C_TreatErrorCallback>
}
 8001d86:	bd10      	pop	{r4, pc}
 8001d88:	ffff0000 	.word	0xffff0000
 8001d8c:	08001f85 	.word	0x08001f85
 8001d90:	08002139 	.word	0x08002139

08001d94 <I2C_ITSlaveCplt>:
{
 8001d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d96:	4604      	mov	r4, r0
 8001d98:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d9a:	6802      	ldr	r2, [r0, #0]
 8001d9c:	6816      	ldr	r6, [r2, #0]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001d9e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001da0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da4:	2120      	movs	r1, #32
 8001da6:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001da8:	3b21      	subs	r3, #33	@ 0x21
 8001daa:	2b09      	cmp	r3, #9
 8001dac:	d80c      	bhi.n	8001dc8 <I2C_ITSlaveCplt+0x34>
 8001dae:	e8df f003 	tbb	[pc, r3]
 8001db2:	7a05      	.short	0x7a05
 8001db4:	0b0b0b0b 	.word	0x0b0b0b0b
 8001db8:	7a05810b 	.word	0x7a05810b
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001dbc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001dc0:	f7ff f893 	bl	8000eea <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001dc4:	2321      	movs	r3, #33	@ 0x21
 8001dc6:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001dc8:	6822      	ldr	r2, [r4, #0]
 8001dca:	6853      	ldr	r3, [r2, #4]
 8001dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dd0:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8001dd2:	6822      	ldr	r2, [r4, #0]
 8001dd4:	6853      	ldr	r3, [r2, #4]
 8001dd6:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001dda:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001dde:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff f84f 	bl	8000e8c <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001dee:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8001df2:	d066      	beq.n	8001ec2 <I2C_ITSlaveCplt+0x12e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001dfc:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8001dfe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001e00:	b11b      	cbz	r3, 8001e0a <I2C_ITSlaveCplt+0x76>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001e0a:	f015 0f04 	tst.w	r5, #4
 8001e0e:	d011      	beq.n	8001e34 <I2C_ITSlaveCplt+0xa0>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001e10:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e1e:	3301      	adds	r3, #1
 8001e20:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hi2c->XferSize > 0U)
 8001e22:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e24:	b133      	cbz	r3, 8001e34 <I2C_ITSlaveCplt+0xa0>
      hi2c->XferSize--;
 8001e26:	3b01      	subs	r3, #1
 8001e28:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001e2a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (hi2c->XferCount != 0U)
 8001e34:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b11b      	cbz	r3, 8001e42 <I2C_ITSlaveCplt+0xae>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e3a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e42:	f015 0f10 	tst.w	r5, #16
 8001e46:	d013      	beq.n	8001e70 <I2C_ITSlaveCplt+0xdc>
 8001e48:	f016 0f10 	tst.w	r6, #16
 8001e4c:	d010      	beq.n	8001e70 <I2C_ITSlaveCplt+0xdc>
    if (hi2c->XferCount == 0U)
 8001e4e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d15a      	bne.n	8001f0c <I2C_ITSlaveCplt+0x178>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001e56:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b28      	cmp	r3, #40	@ 0x28
 8001e5e:	d040      	beq.n	8001ee2 <I2C_ITSlaveCplt+0x14e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001e60:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b29      	cmp	r3, #41	@ 0x29
 8001e68:	d043      	beq.n	8001ef2 <I2C_ITSlaveCplt+0x15e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	61da      	str	r2, [r3, #28]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8001e76:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e78:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d157      	bne.n	8001f2e <I2C_ITSlaveCplt+0x19a>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e7e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001e80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e84:	d161      	bne.n	8001f4a <I2C_ITSlaveCplt+0x1b6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e86:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b22      	cmp	r3, #34	@ 0x22
 8001e8e:	d06c      	beq.n	8001f6a <I2C_ITSlaveCplt+0x1d6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e90:	2320      	movs	r3, #32
 8001e92:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f7ff fdfc 	bl	8001a9c <HAL_I2C_SlaveTxCpltCallback>
}
 8001ea4:	e060      	b.n	8001f68 <I2C_ITSlaveCplt+0x1d4>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001ea6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001eaa:	f7ff f81e 	bl	8000eea <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001eae:	2322      	movs	r3, #34	@ 0x22
 8001eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8001eb2:	e789      	b.n	8001dc8 <I2C_ITSlaveCplt+0x34>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001eb4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001eb8:	f7ff f817 	bl	8000eea <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	6323      	str	r3, [r4, #48]	@ 0x30
 8001ec0:	e782      	b.n	8001dc8 <I2C_ITSlaveCplt+0x34>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ec2:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
 8001ec6:	d0a0      	beq.n	8001e0a <I2C_ITSlaveCplt+0x76>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ec8:	6822      	ldr	r2, [r4, #0]
 8001eca:	6813      	ldr	r3, [r2, #0]
 8001ecc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ed0:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8001ed2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d098      	beq.n	8001e0a <I2C_ITSlaveCplt+0x76>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001ee0:	e793      	b.n	8001e0a <I2C_ITSlaveCplt+0x76>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001ee2:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 8001ee6:	d1bb      	bne.n	8001e60 <I2C_ITSlaveCplt+0xcc>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ee8:	4629      	mov	r1, r5
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff fe6c 	bl	8001bc8 <I2C_ITListenCplt>
 8001ef0:	e7be      	b.n	8001e70 <I2C_ITSlaveCplt+0xdc>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ef2:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 8001ef6:	d0b8      	beq.n	8001e6a <I2C_ITSlaveCplt+0xd6>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	2210      	movs	r2, #16
 8001efc:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7fe ffc4 	bl	8000e8c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7ff fdcb 	bl	8001aa0 <I2C_ITSlaveSeqCplt>
 8001f0a:	e7b1      	b.n	8001e70 <I2C_ITSlaveCplt+0xdc>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	2210      	movs	r2, #16
 8001f10:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f12:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f1a:	f1b7 7f80 	cmp.w	r7, #16777216	@ 0x1000000
 8001f1e:	bf18      	it	ne
 8001f20:	2f00      	cmpne	r7, #0
 8001f22:	d1a5      	bne.n	8001e70 <I2C_ITSlaveCplt+0xdc>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff fe9c 	bl	8001c64 <I2C_ITError>
 8001f2c:	e7a0      	b.n	8001e70 <I2C_ITSlaveCplt+0xdc>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f2e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff fe97 	bl	8001c64 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001f36:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b28      	cmp	r3, #40	@ 0x28
 8001f3e:	d113      	bne.n	8001f68 <I2C_ITSlaveCplt+0x1d4>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f40:	4629      	mov	r1, r5
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7ff fe40 	bl	8001bc8 <I2C_ITListenCplt>
 8001f48:	e00e      	b.n	8001f68 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f7ff fda8 	bl	8001aa0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <I2C_ITSlaveCplt+0x1ec>)
 8001f52:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	2320      	movs	r3, #32
 8001f56:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001f5e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff fe2e 	bl	8001bc4 <HAL_I2C_ListenCpltCallback>
}
 8001f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001f74:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7ff fd90 	bl	8001a9e <HAL_I2C_SlaveRxCpltCallback>
 8001f7e:	e7f3      	b.n	8001f68 <I2C_ITSlaveCplt+0x1d4>
 8001f80:	ffff0000 	.word	0xffff0000

08001f84 <I2C_Slave_ISR_IT>:
{
 8001f84:	b510      	push	{r4, lr}
 8001f86:	4604      	mov	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8001f88:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 8001f8a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	f000 809b 	beq.w	80020ca <I2C_Slave_ISR_IT+0x146>
 8001f94:	2301      	movs	r3, #1
 8001f96:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f9a:	f011 0f20 	tst.w	r1, #32
 8001f9e:	d002      	beq.n	8001fa6 <I2C_Slave_ISR_IT+0x22>
 8001fa0:	f012 0f20 	tst.w	r2, #32
 8001fa4:	d116      	bne.n	8001fd4 <I2C_Slave_ISR_IT+0x50>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001fa6:	f011 0f10 	tst.w	r1, #16
 8001faa:	d03f      	beq.n	800202c <I2C_Slave_ISR_IT+0xa8>
 8001fac:	f012 0f10 	tst.w	r2, #16
 8001fb0:	d03c      	beq.n	800202c <I2C_Slave_ISR_IT+0xa8>
    if (hi2c->XferCount == 0U)
 8001fb2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	bb43      	cbnz	r3, 800200a <I2C_Slave_ISR_IT+0x86>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001fb8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b28      	cmp	r3, #40	@ 0x28
 8001fc0:	d00f      	beq.n	8001fe2 <I2C_Slave_ISR_IT+0x5e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001fc2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b29      	cmp	r3, #41	@ 0x29
 8001fca:	d011      	beq.n	8001ff0 <I2C_Slave_ISR_IT+0x6c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	2210      	movs	r2, #16
 8001fd0:	61da      	str	r2, [r3, #28]
 8001fd2:	e002      	b.n	8001fda <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff fedd 	bl	8001d94 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8001fe0:	bd10      	pop	{r4, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001fe2:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 8001fe6:	d1ec      	bne.n	8001fc2 <I2C_Slave_ISR_IT+0x3e>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff fded 	bl	8001bc8 <I2C_ITListenCplt>
 8001fee:	e7f4      	b.n	8001fda <I2C_Slave_ISR_IT+0x56>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ff0:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8001ff4:	d0ea      	beq.n	8001fcc <I2C_Slave_ISR_IT+0x48>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7fe ff45 	bl	8000e8c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff fd4c 	bl	8001aa0 <I2C_ITSlaveSeqCplt>
 8002008:	e7e7      	b.n	8001fda <I2C_Slave_ISR_IT+0x56>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	2210      	movs	r2, #16
 800200e:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002010:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002018:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800201c:	bf18      	it	ne
 800201e:	2800      	cmpne	r0, #0
 8002020:	d1db      	bne.n	8001fda <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002022:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff fe1d 	bl	8001c64 <I2C_ITError>
 800202a:	e7d6      	b.n	8001fda <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800202c:	f011 0f04 	tst.w	r1, #4
 8002030:	d01f      	beq.n	8002072 <I2C_Slave_ISR_IT+0xee>
 8002032:	f012 0f04 	tst.w	r2, #4
 8002036:	d01c      	beq.n	8002072 <I2C_Slave_ISR_IT+0xee>
    if (hi2c->XferCount > 0U)
 8002038:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	b173      	cbz	r3, 800205c <I2C_Slave_ISR_IT+0xd8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002042:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002044:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002046:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002048:	3301      	adds	r3, #1
 800204a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800204c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800204e:	3b01      	subs	r3, #1
 8002050:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002052:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29b      	uxth	r3, r3
 800205a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 800205c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ba      	bne.n	8001fda <I2C_Slave_ISR_IT+0x56>
 8002064:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8002068:	d0b7      	beq.n	8001fda <I2C_Slave_ISR_IT+0x56>
      I2C_ITSlaveSeqCplt(hi2c);
 800206a:	4620      	mov	r0, r4
 800206c:	f7ff fd18 	bl	8001aa0 <I2C_ITSlaveSeqCplt>
 8002070:	e7b3      	b.n	8001fda <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002072:	f011 0f08 	tst.w	r1, #8
 8002076:	d002      	beq.n	800207e <I2C_Slave_ISR_IT+0xfa>
 8002078:	f012 0f08 	tst.w	r2, #8
 800207c:	d118      	bne.n	80020b0 <I2C_Slave_ISR_IT+0x12c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800207e:	f011 0f02 	tst.w	r1, #2
 8002082:	d0aa      	beq.n	8001fda <I2C_Slave_ISR_IT+0x56>
 8002084:	f012 0f02 	tst.w	r2, #2
 8002088:	d0a7      	beq.n	8001fda <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
 800208a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	b19b      	cbz	r3, 80020b8 <I2C_Slave_ISR_IT+0x134>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002090:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002098:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800209a:	3301      	adds	r3, #1
 800209c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800209e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80020a8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80020aa:	3b01      	subs	r3, #1
 80020ac:	8523      	strh	r3, [r4, #40]	@ 0x28
 80020ae:	e794      	b.n	8001fda <I2C_Slave_ISR_IT+0x56>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7ff fd37 	bl	8001b24 <I2C_ITAddrCplt>
 80020b6:	e790      	b.n	8001fda <I2C_Slave_ISR_IT+0x56>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80020b8:	2800      	cmp	r0, #0
 80020ba:	bf18      	it	ne
 80020bc:	f1b0 7f80 	cmpne.w	r0, #16777216	@ 0x1000000
 80020c0:	d18b      	bne.n	8001fda <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
 80020c2:	4620      	mov	r0, r4
 80020c4:	f7ff fcec 	bl	8001aa0 <I2C_ITSlaveSeqCplt>
 80020c8:	e787      	b.n	8001fda <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
 80020ca:	2002      	movs	r0, #2
 80020cc:	e788      	b.n	8001fe0 <I2C_Slave_ISR_IT+0x5c>

080020ce <HAL_I2C_ER_IRQHandler>:
{
 80020ce:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020d0:	6802      	ldr	r2, [r0, #0]
 80020d2:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020d4:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020d6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80020da:	d009      	beq.n	80020f0 <HAL_I2C_ER_IRQHandler+0x22>
 80020dc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80020e0:	d006      	beq.n	80020f0 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80020e2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80020e4:	f044 0401 	orr.w	r4, r4, #1
 80020e8:	6444      	str	r4, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020ea:	f44f 7480 	mov.w	r4, #256	@ 0x100
 80020ee:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020f0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80020f4:	d00a      	beq.n	800210c <HAL_I2C_ER_IRQHandler+0x3e>
 80020f6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80020fa:	d007      	beq.n	800210c <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80020fc:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80020fe:	f042 0208 	orr.w	r2, r2, #8
 8002102:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002104:	6802      	ldr	r2, [r0, #0]
 8002106:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800210a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800210c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002110:	d00a      	beq.n	8002128 <HAL_I2C_ER_IRQHandler+0x5a>
 8002112:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002116:	d007      	beq.n	8002128 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002118:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002120:	6803      	ldr	r3, [r0, #0]
 8002122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002126:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8002128:	6c41      	ldr	r1, [r0, #68]	@ 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800212a:	f011 0f0b 	tst.w	r1, #11
 800212e:	d100      	bne.n	8002132 <HAL_I2C_ER_IRQHandler+0x64>
}
 8002130:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8002132:	f7ff fd97 	bl	8001c64 <I2C_ITError>
}
 8002136:	e7fb      	b.n	8002130 <HAL_I2C_ER_IRQHandler+0x62>

08002138 <I2C_DMAAbort>:
{
 8002138:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800213a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hi2c->hdmatx != NULL)
 800213c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800213e:	b10b      	cbz	r3, 8002144 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002140:	2200      	movs	r2, #0
 8002142:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 8002144:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002146:	b10b      	cbz	r3, 800214c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002148:	2200      	movs	r2, #0
 800214a:	651a      	str	r2, [r3, #80]	@ 0x50
  I2C_TreatErrorCallback(hi2c);
 800214c:	f7ff fd72 	bl	8001c34 <I2C_TreatErrorCallback>
}
 8002150:	bd08      	pop	{r3, pc}

08002152 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002152:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002154:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	2a20      	cmp	r2, #32
 800215c:	d123      	bne.n	80021a6 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002162:	2a01      	cmp	r2, #1
 8002164:	d021      	beq.n	80021aa <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002166:	2201      	movs	r2, #1
 8002168:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	2224      	movs	r2, #36	@ 0x24
 800216e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002172:	6800      	ldr	r0, [r0, #0]
 8002174:	6802      	ldr	r2, [r0, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	6802      	ldr	r2, [r0, #0]
 8002180:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002184:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	6802      	ldr	r2, [r0, #0]
 800218a:	4311      	orrs	r1, r2
 800218c:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218e:	6819      	ldr	r1, [r3, #0]
 8002190:	680a      	ldr	r2, [r1, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	2220      	movs	r2, #32
 800219a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219e:	2000      	movs	r0, #0
 80021a0:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80021a4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80021a6:	2002      	movs	r0, #2
 80021a8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80021aa:	2002      	movs	r0, #2
  }
}
 80021ac:	4770      	bx	lr

080021ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ae:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	2a20      	cmp	r2, #32
 80021b8:	d121      	bne.n	80021fe <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ba:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80021be:	2a01      	cmp	r2, #1
 80021c0:	d01f      	beq.n	8002202 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80021c2:	2201      	movs	r2, #1
 80021c4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021c8:	2224      	movs	r2, #36	@ 0x24
 80021ca:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ce:	6800      	ldr	r0, [r0, #0]
 80021d0:	6802      	ldr	r2, [r0, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021dc:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021e4:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e6:	6819      	ldr	r1, [r3, #0]
 80021e8:	680a      	ldr	r2, [r1, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80021fc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80021fe:	2002      	movs	r0, #2
 8002200:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002202:	2002      	movs	r0, #2
  }
}
 8002204:	4770      	bx	lr
	...

08002208 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002208:	b510      	push	{r4, lr}
 800220a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <HAL_PWREx_EnableOverDrive+0x74>)
 800220e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002210:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002214:	641a      	str	r2, [r3, #64]	@ 0x40
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002220:	4a17      	ldr	r2, [pc, #92]	@ (8002280 <HAL_PWREx_EnableOverDrive+0x78>)
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002228:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800222a:	f7fe fa1f 	bl	800066c <HAL_GetTick>
 800222e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002230:	4b13      	ldr	r3, [pc, #76]	@ (8002280 <HAL_PWREx_EnableOverDrive+0x78>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002238:	d108      	bne.n	800224c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800223a:	f7fe fa17 	bl	800066c <HAL_GetTick>
 800223e:	1b00      	subs	r0, r0, r4
 8002240:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002244:	d9f4      	bls.n	8002230 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8002246:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8002248:	b002      	add	sp, #8
 800224a:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800224c:	4a0c      	ldr	r2, [pc, #48]	@ (8002280 <HAL_PWREx_EnableOverDrive+0x78>)
 800224e:	6813      	ldr	r3, [r2, #0]
 8002250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002254:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002256:	f7fe fa09 	bl	800066c <HAL_GetTick>
 800225a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800225c:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <HAL_PWREx_EnableOverDrive+0x78>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002264:	d107      	bne.n	8002276 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002266:	f7fe fa01 	bl	800066c <HAL_GetTick>
 800226a:	1b00      	subs	r0, r0, r4
 800226c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002270:	d9f4      	bls.n	800225c <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8002272:	2003      	movs	r0, #3
 8002274:	e7e8      	b.n	8002248 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8002276:	2000      	movs	r0, #0
 8002278:	e7e6      	b.n	8002248 <HAL_PWREx_EnableOverDrive+0x40>
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000

08002284 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002284:	2800      	cmp	r0, #0
 8002286:	f000 8206 	beq.w	8002696 <HAL_RCC_OscConfig+0x412>
{
 800228a:	b570      	push	{r4, r5, r6, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002290:	6803      	ldr	r3, [r0, #0]
 8002292:	f013 0f01 	tst.w	r3, #1
 8002296:	d029      	beq.n	80022ec <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002298:	4b95      	ldr	r3, [pc, #596]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d01a      	beq.n	80022da <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a4:	4b92      	ldr	r3, [pc, #584]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d00f      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	6863      	ldr	r3, [r4, #4]
 80022b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b6:	d040      	beq.n	800233a <HAL_RCC_OscConfig+0xb6>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d154      	bne.n	8002366 <HAL_RCC_OscConfig+0xe2>
 80022bc:	4b8c      	ldr	r3, [pc, #560]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e039      	b.n	8002344 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d0:	4b87      	ldr	r3, [pc, #540]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80022d8:	d0ea      	beq.n	80022b0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022da:	4b85      	ldr	r3, [pc, #532]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80022e2:	d003      	beq.n	80022ec <HAL_RCC_OscConfig+0x68>
 80022e4:	6863      	ldr	r3, [r4, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 81d7 	beq.w	800269a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	f013 0f02 	tst.w	r3, #2
 80022f2:	d074      	beq.n	80023de <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f4:	4b7e      	ldr	r3, [pc, #504]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f013 0f0c 	tst.w	r3, #12
 80022fc:	d05e      	beq.n	80023bc <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fe:	4b7c      	ldr	r3, [pc, #496]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d053      	beq.n	80023b2 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800230a:	68e3      	ldr	r3, [r4, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8089 	beq.w	8002424 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002312:	4a77      	ldr	r2, [pc, #476]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002314:	6813      	ldr	r3, [r2, #0]
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe f9a6 	bl	800066c <HAL_GetTick>
 8002320:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002322:	4b73      	ldr	r3, [pc, #460]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f013 0f02 	tst.w	r3, #2
 800232a:	d172      	bne.n	8002412 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232c:	f7fe f99e 	bl	800066c <HAL_GetTick>
 8002330:	1b40      	subs	r0, r0, r5
 8002332:	2802      	cmp	r0, #2
 8002334:	d9f5      	bls.n	8002322 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002336:	2003      	movs	r0, #3
 8002338:	e1b4      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233a:	4a6d      	ldr	r2, [pc, #436]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800233c:	6813      	ldr	r3, [r2, #0]
 800233e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002342:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002344:	6863      	ldr	r3, [r4, #4]
 8002346:	b32b      	cbz	r3, 8002394 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002348:	f7fe f990 	bl	800066c <HAL_GetTick>
 800234c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b68      	ldr	r3, [pc, #416]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002356:	d1c9      	bne.n	80022ec <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe f988 	bl	800066c <HAL_GetTick>
 800235c:	1b40      	subs	r0, r0, r5
 800235e:	2864      	cmp	r0, #100	@ 0x64
 8002360:	d9f5      	bls.n	800234e <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8002362:	2003      	movs	r0, #3
 8002364:	e19e      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002366:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800236a:	d009      	beq.n	8002380 <HAL_RCC_OscConfig+0xfc>
 800236c:	4b60      	ldr	r3, [pc, #384]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e7e1      	b.n	8002344 <HAL_RCC_OscConfig+0xc0>
 8002380:	4b5b      	ldr	r3, [pc, #364]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e7d7      	b.n	8002344 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002394:	f7fe f96a 	bl	800066c <HAL_GetTick>
 8002398:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	4b55      	ldr	r3, [pc, #340]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80023a2:	d0a3      	beq.n	80022ec <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7fe f962 	bl	800066c <HAL_GetTick>
 80023a8:	1b40      	subs	r0, r0, r5
 80023aa:	2864      	cmp	r0, #100	@ 0x64
 80023ac:	d9f5      	bls.n	800239a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80023ae:	2003      	movs	r0, #3
 80023b0:	e178      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b2:	4b4f      	ldr	r3, [pc, #316]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80023ba:	d1a6      	bne.n	800230a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023bc:	4b4c      	ldr	r3, [pc, #304]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f013 0f02 	tst.w	r3, #2
 80023c4:	d003      	beq.n	80023ce <HAL_RCC_OscConfig+0x14a>
 80023c6:	68e3      	ldr	r3, [r4, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 8168 	bne.w	800269e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4a48      	ldr	r2, [pc, #288]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	6813      	ldr	r3, [r2, #0]
 80023d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80023d6:	6921      	ldr	r1, [r4, #16]
 80023d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023dc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	f013 0f08 	tst.w	r3, #8
 80023e4:	d046      	beq.n	8002474 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023e6:	6963      	ldr	r3, [r4, #20]
 80023e8:	b383      	cbz	r3, 800244c <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ea:	4a41      	ldr	r2, [pc, #260]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe f93a 	bl	800066c <HAL_GetTick>
 80023f8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	4b3d      	ldr	r3, [pc, #244]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023fe:	f013 0f02 	tst.w	r3, #2
 8002402:	d137      	bne.n	8002474 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7fe f932 	bl	800066c <HAL_GetTick>
 8002408:	1b40      	subs	r0, r0, r5
 800240a:	2802      	cmp	r0, #2
 800240c:	d9f5      	bls.n	80023fa <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800240e:	2003      	movs	r0, #3
 8002410:	e148      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4a37      	ldr	r2, [pc, #220]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002414:	6813      	ldr	r3, [r2, #0]
 8002416:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800241a:	6921      	ldr	r1, [r4, #16]
 800241c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e7dc      	b.n	80023de <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8002424:	4a32      	ldr	r2, [pc, #200]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002426:	6813      	ldr	r3, [r2, #0]
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800242e:	f7fe f91d 	bl	800066c <HAL_GetTick>
 8002432:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002434:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f013 0f02 	tst.w	r3, #2
 800243c:	d0cf      	beq.n	80023de <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe f915 	bl	800066c <HAL_GetTick>
 8002442:	1b40      	subs	r0, r0, r5
 8002444:	2802      	cmp	r0, #2
 8002446:	d9f5      	bls.n	8002434 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8002448:	2003      	movs	r0, #3
 800244a:	e12b      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244c:	4a28      	ldr	r2, [pc, #160]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800244e:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7fe f909 	bl	800066c <HAL_GetTick>
 800245a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245c:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800245e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002460:	f013 0f02 	tst.w	r3, #2
 8002464:	d006      	beq.n	8002474 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002466:	f7fe f901 	bl	800066c <HAL_GetTick>
 800246a:	1b40      	subs	r0, r0, r5
 800246c:	2802      	cmp	r0, #2
 800246e:	d9f5      	bls.n	800245c <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8002470:	2003      	movs	r0, #3
 8002472:	e117      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	f013 0f04 	tst.w	r3, #4
 800247a:	d07d      	beq.n	8002578 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247c:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002484:	d11e      	bne.n	80024c4 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800248a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800249a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249c:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80024a4:	d010      	beq.n	80024c8 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a6:	68a3      	ldr	r3, [r4, #8]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d025      	beq.n	80024f8 <HAL_RCC_OscConfig+0x274>
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d13b      	bne.n	8002528 <HAL_RCC_OscConfig+0x2a4>
 80024b0:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80024ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024bc:	f022 0204 	bic.w	r2, r2, #4
 80024c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80024c2:	e01e      	b.n	8002502 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 80024c4:	2500      	movs	r5, #0
 80024c6:	e7e9      	b.n	800249c <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 80024c8:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <HAL_RCC_OscConfig+0x270>)
 80024ca:	6813      	ldr	r3, [r2, #0]
 80024cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80024d2:	f7fe f8cb 	bl	800066c <HAL_GetTick>
 80024d6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80024e0:	d1e1      	bne.n	80024a6 <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7fe f8c3 	bl	800066c <HAL_GetTick>
 80024e6:	1b80      	subs	r0, r0, r6
 80024e8:	2864      	cmp	r0, #100	@ 0x64
 80024ea:	d9f5      	bls.n	80024d8 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 80024ec:	2003      	movs	r0, #3
 80024ee:	e0d9      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f8:	4a72      	ldr	r2, [pc, #456]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 80024fa:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002502:	68a3      	ldr	r3, [r4, #8]
 8002504:	b333      	cbz	r3, 8002554 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7fe f8b1 	bl	800066c <HAL_GetTick>
 800250a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	4b6d      	ldr	r3, [pc, #436]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002510:	f013 0f02 	tst.w	r3, #2
 8002514:	d12f      	bne.n	8002576 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe f8a9 	bl	800066c <HAL_GetTick>
 800251a:	1b80      	subs	r0, r0, r6
 800251c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002520:	4298      	cmp	r0, r3
 8002522:	d9f3      	bls.n	800250c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
 8002526:	e0bd      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002528:	2b05      	cmp	r3, #5
 800252a:	d009      	beq.n	8002540 <HAL_RCC_OscConfig+0x2bc>
 800252c:	4b65      	ldr	r3, [pc, #404]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 800252e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002530:	f022 0201 	bic.w	r2, r2, #1
 8002534:	671a      	str	r2, [r3, #112]	@ 0x70
 8002536:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002538:	f022 0204 	bic.w	r2, r2, #4
 800253c:	671a      	str	r2, [r3, #112]	@ 0x70
 800253e:	e7e0      	b.n	8002502 <HAL_RCC_OscConfig+0x27e>
 8002540:	4b60      	ldr	r3, [pc, #384]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 8002542:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002544:	f042 0204 	orr.w	r2, r2, #4
 8002548:	671a      	str	r2, [r3, #112]	@ 0x70
 800254a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	671a      	str	r2, [r3, #112]	@ 0x70
 8002552:	e7d6      	b.n	8002502 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe f88a 	bl	800066c <HAL_GetTick>
 8002558:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255a:	4b5a      	ldr	r3, [pc, #360]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255e:	f013 0f02 	tst.w	r3, #2
 8002562:	d008      	beq.n	8002576 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7fe f882 	bl	800066c <HAL_GetTick>
 8002568:	1b80      	subs	r0, r0, r6
 800256a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800256e:	4298      	cmp	r0, r3
 8002570:	d9f3      	bls.n	800255a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8002572:	2003      	movs	r0, #3
 8002574:	e096      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002576:	b9fd      	cbnz	r5, 80025b8 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002578:	69a3      	ldr	r3, [r4, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8091 	beq.w	80026a2 <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002580:	4a50      	ldr	r2, [pc, #320]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	f002 020c 	and.w	r2, r2, #12
 8002588:	2a08      	cmp	r2, #8
 800258a:	d059      	beq.n	8002640 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258c:	2b02      	cmp	r3, #2
 800258e:	d019      	beq.n	80025c4 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002590:	4a4c      	ldr	r2, [pc, #304]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 8002592:	6813      	ldr	r3, [r2, #0]
 8002594:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe f867 	bl	800066c <HAL_GetTick>
 800259e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a0:	4b48      	ldr	r3, [pc, #288]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80025a8:	d048      	beq.n	800263c <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe f85f 	bl	800066c <HAL_GetTick>
 80025ae:	1b00      	subs	r0, r0, r4
 80025b0:	2802      	cmp	r0, #2
 80025b2:	d9f5      	bls.n	80025a0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80025b4:	2003      	movs	r0, #3
 80025b6:	e075      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4a42      	ldr	r2, [pc, #264]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 80025ba:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c2:	e7d9      	b.n	8002578 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4a3f      	ldr	r2, [pc, #252]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80025ce:	f7fe f84d 	bl	800066c <HAL_GetTick>
 80025d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d4:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80025dc:	d006      	beq.n	80025ec <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe f845 	bl	800066c <HAL_GetTick>
 80025e2:	1b40      	subs	r0, r0, r5
 80025e4:	2802      	cmp	r0, #2
 80025e6:	d9f5      	bls.n	80025d4 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80025e8:	2003      	movs	r0, #3
 80025ea:	e05b      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ec:	69e3      	ldr	r3, [r4, #28]
 80025ee:	6a22      	ldr	r2, [r4, #32]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80025f4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80025f8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80025fa:	0852      	lsrs	r2, r2, #1
 80025fc:	3a01      	subs	r2, #1
 80025fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002602:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002604:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002608:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800260a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800260e:	4a2d      	ldr	r2, [pc, #180]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 8002610:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002612:	6813      	ldr	r3, [r2, #0]
 8002614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002618:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800261a:	f7fe f827 	bl	800066c <HAL_GetTick>
 800261e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002620:	4b28      	ldr	r3, [pc, #160]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe f81f 	bl	800066c <HAL_GetTick>
 800262e:	1b00      	subs	r0, r0, r4
 8002630:	2802      	cmp	r0, #2
 8002632:	d9f5      	bls.n	8002620 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8002634:	2003      	movs	r0, #3
 8002636:	e035      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002638:	2000      	movs	r0, #0
 800263a:	e033      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
 800263c:	2000      	movs	r0, #0
 800263e:	e031      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 8002640:	4a20      	ldr	r2, [pc, #128]	@ (80026c4 <HAL_RCC_OscConfig+0x440>)
 8002642:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002644:	2b01      	cmp	r3, #1
 8002646:	d02f      	beq.n	80026a8 <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002648:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800264c:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264e:	428b      	cmp	r3, r1
 8002650:	d12c      	bne.n	80026ac <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002652:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 8002656:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002658:	428b      	cmp	r3, r1
 800265a:	d129      	bne.n	80026b0 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800265e:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002662:	4013      	ands	r3, r2
 8002664:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002668:	d124      	bne.n	80026b4 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800266a:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 800266e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002674:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002678:	d11e      	bne.n	80026b8 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267a:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 800267e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002680:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8002684:	d11a      	bne.n	80026bc <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002686:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 800268a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800268c:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8002690:	d116      	bne.n	80026c0 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 8002692:	2000      	movs	r0, #0
 8002694:	e006      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 8002696:	2001      	movs	r0, #1
}
 8002698:	4770      	bx	lr
        return HAL_ERROR;
 800269a:	2001      	movs	r0, #1
 800269c:	e002      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 800269e:	2001      	movs	r0, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 80026a2:	2000      	movs	r0, #0
}
 80026a4:	b002      	add	sp, #8
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80026a8:	2001      	movs	r0, #1
 80026aa:	e7fb      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7f9      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
 80026b0:	2001      	movs	r0, #1
 80026b2:	e7f7      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
 80026b4:	2001      	movs	r0, #1
 80026b6:	e7f5      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
 80026b8:	2001      	movs	r0, #1
 80026ba:	e7f3      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
 80026bc:	2001      	movs	r0, #1
 80026be:	e7f1      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
 80026c0:	2001      	movs	r0, #1
 80026c2:	e7ef      	b.n	80026a4 <HAL_RCC_OscConfig+0x420>
 80026c4:	40023800 	.word	0x40023800

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ca:	4b26      	ldr	r3, [pc, #152]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d041      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x92>
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d141      	bne.n	800275e <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026da:	4b22      	ldr	r3, [pc, #136]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80026e8:	d012      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80026f2:	481d      	ldr	r0, [pc, #116]	@ (8002768 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026f4:	2300      	movs	r3, #0
 80026f6:	fba1 0100 	umull	r0, r1, r1, r0
 80026fa:	f7fd fe09 	bl	8000310 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026fe:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002706:	3301      	adds	r3, #1
 8002708:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800270a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800270e:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002710:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002712:	6858      	ldr	r0, [r3, #4]
 8002714:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002718:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800271c:	ebbc 0c00 	subs.w	ip, ip, r0
 8002720:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002724:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002728:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800272c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002730:	ebb1 010c 	subs.w	r1, r1, ip
 8002734:	eb63 030e 	sbc.w	r3, r3, lr
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800273e:	00c9      	lsls	r1, r1, #3
 8002740:	eb11 0c00 	adds.w	ip, r1, r0
 8002744:	f143 0300 	adc.w	r3, r3, #0
 8002748:	0299      	lsls	r1, r3, #10
 800274a:	2300      	movs	r3, #0
 800274c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002750:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002754:	f7fd fddc 	bl	8000310 <__aeabi_uldivmod>
 8002758:	e7d1      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800275a:	4803      	ldr	r0, [pc, #12]	@ (8002768 <HAL_RCC_GetSysClockFreq+0xa0>)
 800275c:	e7d7      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800275e:	4803      	ldr	r0, [pc, #12]	@ (800276c <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8002760:	e7d5      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x46>
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	017d7840 	.word	0x017d7840
 800276c:	00f42400 	.word	0x00f42400

08002770 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002770:	2800      	cmp	r0, #0
 8002772:	f000 80a0 	beq.w	80028b6 <HAL_RCC_ClockConfig+0x146>
{
 8002776:	b570      	push	{r4, r5, r6, lr}
 8002778:	460d      	mov	r5, r1
 800277a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b52      	ldr	r3, [pc, #328]	@ (80028c8 <HAL_RCC_ClockConfig+0x158>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	428b      	cmp	r3, r1
 8002786:	d20b      	bcs.n	80027a0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002788:	4a4f      	ldr	r2, [pc, #316]	@ (80028c8 <HAL_RCC_ClockConfig+0x158>)
 800278a:	6813      	ldr	r3, [r2, #0]
 800278c:	f023 030f 	bic.w	r3, r3, #15
 8002790:	430b      	orrs	r3, r1
 8002792:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002794:	6813      	ldr	r3, [r2, #0]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	428b      	cmp	r3, r1
 800279c:	f040 808d 	bne.w	80028ba <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f013 0f02 	tst.w	r3, #2
 80027a6:	d017      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	f013 0f04 	tst.w	r3, #4
 80027ac:	d004      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ae:	4a47      	ldr	r2, [pc, #284]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 80027b0:	6893      	ldr	r3, [r2, #8]
 80027b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027b6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	f013 0f08 	tst.w	r3, #8
 80027be:	d004      	beq.n	80027ca <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c0:	4a42      	ldr	r2, [pc, #264]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 80027c2:	6893      	ldr	r3, [r2, #8]
 80027c4:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027c8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ca:	4a40      	ldr	r2, [pc, #256]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 80027cc:	6893      	ldr	r3, [r2, #8]
 80027ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027d2:	68a1      	ldr	r1, [r4, #8]
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	f013 0f01 	tst.w	r3, #1
 80027de:	d031      	beq.n	8002844 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d020      	beq.n	8002828 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d025      	beq.n	8002836 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4a38      	ldr	r2, [pc, #224]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	f012 0f02 	tst.w	r2, #2
 80027f2:	d064      	beq.n	80028be <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f4:	4935      	ldr	r1, [pc, #212]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 80027f6:	688a      	ldr	r2, [r1, #8]
 80027f8:	f022 0203 	bic.w	r2, r2, #3
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002800:	f7fd ff34 	bl	800066c <HAL_GetTick>
 8002804:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b31      	ldr	r3, [pc, #196]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	6862      	ldr	r2, [r4, #4]
 8002810:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002814:	d016      	beq.n	8002844 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002816:	f7fd ff29 	bl	800066c <HAL_GetTick>
 800281a:	1b80      	subs	r0, r0, r6
 800281c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002820:	4298      	cmp	r0, r3
 8002822:	d9f0      	bls.n	8002806 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002824:	2003      	movs	r0, #3
 8002826:	e045      	b.n	80028b4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002828:	4a28      	ldr	r2, [pc, #160]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002830:	d1e0      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002832:	2001      	movs	r0, #1
 8002834:	e03e      	b.n	80028b4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4a25      	ldr	r2, [pc, #148]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800283e:	d1d9      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002840:	2001      	movs	r0, #1
 8002842:	e037      	b.n	80028b4 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002844:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <HAL_RCC_ClockConfig+0x158>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	42ab      	cmp	r3, r5
 800284e:	d90a      	bls.n	8002866 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002850:	4a1d      	ldr	r2, [pc, #116]	@ (80028c8 <HAL_RCC_ClockConfig+0x158>)
 8002852:	6813      	ldr	r3, [r2, #0]
 8002854:	f023 030f 	bic.w	r3, r3, #15
 8002858:	432b      	orrs	r3, r5
 800285a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285c:	6813      	ldr	r3, [r2, #0]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	42ab      	cmp	r3, r5
 8002864:	d12d      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	f013 0f04 	tst.w	r3, #4
 800286c:	d006      	beq.n	800287c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286e:	4a17      	ldr	r2, [pc, #92]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 8002870:	6893      	ldr	r3, [r2, #8]
 8002872:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002876:	68e1      	ldr	r1, [r4, #12]
 8002878:	430b      	orrs	r3, r1
 800287a:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	f013 0f08 	tst.w	r3, #8
 8002882:	d007      	beq.n	8002894 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002884:	4a11      	ldr	r2, [pc, #68]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 8002886:	6893      	ldr	r3, [r2, #8]
 8002888:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800288c:	6921      	ldr	r1, [r4, #16]
 800288e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002892:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002894:	f7ff ff18 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <HAL_RCC_ClockConfig+0x15c>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80028a0:	4a0b      	ldr	r2, [pc, #44]	@ (80028d0 <HAL_RCC_ClockConfig+0x160>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	40d8      	lsrs	r0, r3
 80028a6:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_RCC_ClockConfig+0x164>)
 80028a8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80028aa:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_RCC_ClockConfig+0x168>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f00c fbc7 	bl	800f040 <HAL_InitTick>
  return HAL_OK;
 80028b2:	2000      	movs	r0, #0
}
 80028b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80028b6:	2001      	movs	r0, #1
}
 80028b8:	4770      	bx	lr
      return HAL_ERROR;
 80028ba:	2001      	movs	r0, #1
 80028bc:	e7fa      	b.n	80028b4 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80028be:	2001      	movs	r0, #1
 80028c0:	e7f8      	b.n	80028b4 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80028c2:	2001      	movs	r0, #1
 80028c4:	e7f6      	b.n	80028b4 <HAL_RCC_ClockConfig+0x144>
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	08013dc4 	.word	0x08013dc4
 80028d4:	200003fc 	.word	0x200003fc
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80028dc:	4b01      	ldr	r3, [pc, #4]	@ (80028e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	200003fc 	.word	0x200003fc

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028ea:	f7ff fff7 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 80028ee:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <HAL_RCC_GetPCLK1Freq+0x18>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80028f6:	4a03      	ldr	r2, [pc, #12]	@ (8002904 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80028f8:	5cd3      	ldrb	r3, [r2, r3]
}
 80028fa:	40d8      	lsrs	r0, r3
 80028fc:	bd08      	pop	{r3, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	08013dbc 	.word	0x08013dbc

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800290a:	f7ff ffe7 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 800290e:	4b04      	ldr	r3, [pc, #16]	@ (8002920 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002916:	4a03      	ldr	r2, [pc, #12]	@ (8002924 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002918:	5cd3      	ldrb	r3, [r2, r3]
}
 800291a:	40d8      	lsrs	r0, r3
 800291c:	bd08      	pop	{r3, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	08013dbc 	.word	0x08013dbc

08002928 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002928:	230f      	movs	r3, #15
 800292a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800292c:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <HAL_RCC_GetClockConfig+0x34>)
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	f002 0203 	and.w	r2, r2, #3
 8002934:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800293c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002944:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	08db      	lsrs	r3, r3, #3
 800294a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800294e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002950:	4b03      	ldr	r3, [pc, #12]	@ (8002960 <HAL_RCC_GetClockConfig+0x38>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	600b      	str	r3, [r1, #0]
}
 800295a:	4770      	bx	lr
 800295c:	40023800 	.word	0x40023800
 8002960:	40023c00 	.word	0x40023c00

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002966:	b083      	sub	sp, #12
 8002968:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800296a:	6806      	ldr	r6, [r0, #0]
 800296c:	f016 0601 	ands.w	r6, r6, #1
 8002970:	d00d      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002972:	4bb5      	ldr	r3, [pc, #724]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002980:	430a      	orrs	r2, r1
 8002982:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002984:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8167 	beq.w	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  uint32_t plli2sused = 0;
 800298c:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800298e:	6825      	ldr	r5, [r4, #0]
 8002990:	f415 2500 	ands.w	r5, r5, #524288	@ 0x80000
 8002994:	d011      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002996:	4aac      	ldr	r2, [pc, #688]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002998:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800299c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80029a0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80029a2:	430b      	orrs	r3, r1
 80029a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80029aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ae:	f000 8156 	beq.w	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8155 	beq.w	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  uint32_t pllsaiused = 0;
 80029b8:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80029c0:	d00f      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029c2:	4aa1      	ldr	r2, [pc, #644]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029c4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80029c8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80029cc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80029ce:	430b      	orrs	r3, r1
 80029d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029da:	f000 8144 	beq.w	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x302>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029de:	b903      	cbnz	r3, 80029e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 80029e0:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80029e8:	d000      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 80029ea:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ec:	f013 0f20 	tst.w	r3, #32
 80029f0:	f040 813b 	bne.w	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x306>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	f013 0f10 	tst.w	r3, #16
 80029fa:	d00c      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029fc:	4b92      	ldr	r3, [pc, #584]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029fe:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a02:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002a0a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a0e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002a10:	430a      	orrs	r2, r1
 8002a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002a1c:	d008      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a1e:	4a8a      	ldr	r2, [pc, #552]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a20:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002a24:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002a28:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002a36:	d008      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a38:	4a83      	ldr	r2, [pc, #524]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002a3e:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002a42:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002a44:	430b      	orrs	r3, r1
 8002a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002a50:	d008      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a52:	4a7d      	ldr	r2, [pc, #500]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a54:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002a58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002a5c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a6c:	4a76      	ldr	r2, [pc, #472]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002a72:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002a76:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002a84:	d008      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a86:	4a70      	ldr	r2, [pc, #448]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a88:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002a8c:	f023 0303 	bic.w	r3, r3, #3
 8002a90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002a92:	430b      	orrs	r3, r1
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aa0:	4a69      	ldr	r2, [pc, #420]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aa2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002aa6:	f023 030c 	bic.w	r3, r3, #12
 8002aaa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002aac:	430b      	orrs	r3, r1
 8002aae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002ab8:	d008      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aba:	4a63      	ldr	r2, [pc, #396]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002abc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002ac0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ac4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ad4:	4a5c      	ldr	r2, [pc, #368]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ad6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002ada:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002ade:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002aec:	d008      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aee:	4a56      	ldr	r2, [pc, #344]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002af0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002afa:	430b      	orrs	r3, r1
 8002afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002b06:	d008      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b08:	4a4f      	ldr	r2, [pc, #316]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b0e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002b12:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002b14:	430b      	orrs	r3, r1
 8002b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002b20:	d008      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b22:	4a49      	ldr	r2, [pc, #292]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b24:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b2c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b3c:	4a42      	ldr	r2, [pc, #264]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b42:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b46:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002b54:	d008      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b56:	4a3c      	ldr	r2, [pc, #240]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b58:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b60:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002b62:	430b      	orrs	r3, r1
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002b6e:	d00d      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b70:	4a35      	ldr	r2, [pc, #212]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b72:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b76:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8002b7a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b82:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8002b84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b88:	f000 80d5 	beq.w	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	f013 0f08 	tst.w	r3, #8
 8002b92:	d000      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8002b94:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b96:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8002b9a:	d008      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b9e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002ba2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002ba6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8002bb4:	d009      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bb6:	4a24      	ldr	r2, [pc, #144]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bb8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc0:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bd4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002bd8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002bdc:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8002be0:	430b      	orrs	r3, r1
 8002be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002bec:	d009      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bee:	4a16      	ldr	r2, [pc, #88]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bf0:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002bf4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002bf8:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002c08:	d009      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c0c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002c10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c14:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c1e:	b926      	cbnz	r6, 8002c2a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002c26:	f000 8106 	beq.w	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c2a:	4a07      	ldr	r2, [pc, #28]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c2c:	6813      	ldr	r3, [r2, #0]
 8002c2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fd fd1a 	bl	800066c <HAL_GetTick>
 8002c38:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c3a:	4b03      	ldr	r3, [pc, #12]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002c42:	d07a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8002c44:	e002      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c4c:	f7fd fd0e 	bl	800066c <HAL_GetTick>
 8002c50:	1b80      	subs	r0, r0, r6
 8002c52:	2864      	cmp	r0, #100	@ 0x64
 8002c54:	d9f1      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c56:	2003      	movs	r0, #3
 8002c58:	e0f0      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      plli2sused = 1;
 8002c5a:	2601      	movs	r6, #1
 8002c5c:	e697      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8002c5e:	2601      	movs	r6, #1
 8002c60:	e6a7      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8002c62:	2501      	movs	r5, #1
 8002c64:	e6a9      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8002c66:	2601      	movs	r6, #1
 8002c68:	e6b9      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002c6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c6e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002c7e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002c80:	6813      	ldr	r3, [r2, #0]
 8002c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c86:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002c88:	f7fd fcf0 	bl	800066c <HAL_GetTick>
 8002c8c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c8e:	4b77      	ldr	r3, [pc, #476]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x342>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c98:	f7fd fce8 	bl	800066c <HAL_GetTick>
 8002c9c:	1bc0      	subs	r0, r0, r7
 8002c9e:	2864      	cmp	r0, #100	@ 0x64
 8002ca0:	d9f5      	bls.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x32a>
        return HAL_TIMEOUT;
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	e0ca      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ca6:	4b70      	ldr	r3, [pc, #448]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002caa:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002cae:	d015      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002cb0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002cb2:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x378>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cba:	4b6b      	ldr	r3, [pc, #428]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002cbc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cbe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002cc4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8002cc8:	6719      	str	r1, [r3, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cca:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002ccc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8002cd0:	6719      	str	r1, [r3, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8002cd2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd6:	f013 0f01 	tst.w	r3, #1
 8002cda:	d112      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cdc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002cde:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002ce2:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002ce6:	d01d      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002cea:	6893      	ldr	r3, [r2, #8]
 8002cec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cf0:	6093      	str	r3, [r2, #8]
 8002cf2:	495d      	ldr	r1, [pc, #372]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002cf4:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8002cf6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002cf8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	670b      	str	r3, [r1, #112]	@ 0x70
 8002d00:	e678      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8002d02:	f7fd fcb3 	bl	800066c <HAL_GetTick>
 8002d06:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d08:	4b57      	ldr	r3, [pc, #348]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0c:	f013 0f02 	tst.w	r3, #2
 8002d10:	d1e4      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x378>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fd fcab 	bl	800066c <HAL_GetTick>
 8002d16:	1bc0      	subs	r0, r0, r7
 8002d18:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d1c:	4298      	cmp	r0, r3
 8002d1e:	d9f3      	bls.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
            return HAL_TIMEOUT;
 8002d20:	2003      	movs	r0, #3
 8002d22:	e08b      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d24:	4850      	ldr	r0, [pc, #320]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d26:	6882      	ldr	r2, [r0, #8]
 8002d28:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002d2c:	4950      	ldr	r1, [pc, #320]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d2e:	4019      	ands	r1, r3
 8002d30:	430a      	orrs	r2, r1
 8002d32:	6082      	str	r2, [r0, #8]
 8002d34:	e7dd      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      pllsaiused = 1;
 8002d36:	2501      	movs	r5, #1
 8002d38:	e728      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	f013 0f01 	tst.w	r3, #1
 8002d40:	d013      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002d42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d44:	b98b      	cbnz	r3, 8002d6a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d46:	4a48      	ldr	r2, [pc, #288]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d48:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d4c:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d50:	6860      	ldr	r0, [r4, #4]
 8002d52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d56:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002d5a:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	68a1      	ldr	r1, [r4, #8]
 8002d62:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002d66:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002d70:	d003      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d72:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002d74:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8002d78:	d006      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002d7a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002d7e:	d01e      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x45a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d86:	d11a      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x45a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d88:	4a37      	ldr	r2, [pc, #220]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002d8a:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d8e:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d92:	6860      	ldr	r0, [r4, #4]
 8002d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d98:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002d9c:	68e0      	ldr	r0, [r4, #12]
 8002d9e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002da2:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002da6:	430b      	orrs	r3, r1
 8002da8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dac:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002db0:	f023 031f 	bic.w	r3, r3, #31
 8002db4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002db6:	3901      	subs	r1, #1
 8002db8:	430b      	orrs	r3, r1
 8002dba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002dc4:	d011      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dc6:	4a28      	ldr	r2, [pc, #160]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002dc8:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dcc:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002dd0:	6866      	ldr	r6, [r4, #4]
 8002dd2:	6923      	ldr	r3, [r4, #16]
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002dda:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
 8002dde:	4303      	orrs	r3, r0
 8002de0:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002de4:	430b      	orrs	r3, r1
 8002de6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002df0:	d00d      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002df2:	6862      	ldr	r2, [r4, #4]
 8002df4:	6923      	ldr	r3, [r4, #16]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002dfc:	68e2      	ldr	r2, [r4, #12]
 8002dfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e02:	68a2      	ldr	r2, [r4, #8]
 8002e04:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002e08:	4a17      	ldr	r2, [pc, #92]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002e0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e0e:	4a16      	ldr	r2, [pc, #88]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002e10:	6813      	ldr	r3, [r2, #0]
 8002e12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e18:	f7fd fc28 	bl	800066c <HAL_GetTick>
 8002e1c:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002e26:	d106      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e28:	f7fd fc20 	bl	800066c <HAL_GetTick>
 8002e2c:	1b80      	subs	r0, r0, r6
 8002e2e:	2864      	cmp	r0, #100	@ 0x64
 8002e30:	d9f5      	bls.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e32:	2003      	movs	r0, #3
 8002e34:	e002      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e36:	2d01      	cmp	r5, #1
 8002e38:	d002      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002e3a:	2000      	movs	r0, #0
}
 8002e3c:	b003      	add	sp, #12
 8002e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002e40:	4a09      	ldr	r2, [pc, #36]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002e42:	6813      	ldr	r3, [r2, #0]
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e48:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002e4a:	f7fd fc0f 	bl	800066c <HAL_GetTick>
 8002e4e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002e58:	d00c      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x510>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e5a:	f7fd fc07 	bl	800066c <HAL_GetTick>
 8002e5e:	1b40      	subs	r0, r0, r5
 8002e60:	2864      	cmp	r0, #100	@ 0x64
 8002e62:	d9f5      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        return HAL_TIMEOUT;
 8002e64:	2003      	movs	r0, #3
 8002e66:	e7e9      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8002e7c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002e7e:	b122      	cbz	r2, 8002e8a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002e80:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002e84:	d01d      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e88:	b9db      	cbnz	r3, 8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e8a:	4a35      	ldr	r2, [pc, #212]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002e8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e90:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e94:	6960      	ldr	r0, [r4, #20]
 8002e96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e9a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002e9e:	69a0      	ldr	r0, [r4, #24]
 8002ea0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002ea4:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002eae:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002eb2:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002eb6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002eb8:	3901      	subs	r1, #1
 8002eba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ebe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8002eca:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8002ecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ed0:	d031      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	f013 0f08 	tst.w	r3, #8
 8002ed8:	d019      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eda:	4a21      	ldr	r2, [pc, #132]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002edc:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ee0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ee4:	6960      	ldr	r0, [r4, #20]
 8002ee6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eea:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002eee:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	69e1      	ldr	r1, [r4, #28]
 8002ef6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002efa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002efe:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002f02:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002f06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002f0e:	4a14      	ldr	r2, [pc, #80]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002f10:	6813      	ldr	r3, [r2, #0]
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f18:	f7fd fba8 	bl	800066c <HAL_GetTick>
 8002f1c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002f26:	d119      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f28:	f7fd fba0 	bl	800066c <HAL_GetTick>
 8002f2c:	1b00      	subs	r0, r0, r4
 8002f2e:	2864      	cmp	r0, #100	@ 0x64
 8002f30:	d9f5      	bls.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
        return HAL_TIMEOUT;
 8002f32:	2003      	movs	r0, #3
 8002f34:	e782      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f36:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8002f38:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f3c:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f40:	6965      	ldr	r5, [r4, #20]
 8002f42:	6a23      	ldr	r3, [r4, #32]
 8002f44:	041b      	lsls	r3, r3, #16
 8002f46:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002f4a:	f000 6070 	and.w	r0, r0, #251658240	@ 0xf000000
 8002f4e:	4303      	orrs	r3, r0
 8002f50:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002f54:	430b      	orrs	r3, r1
 8002f56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002f5a:	e7ba      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  return HAL_OK;
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	e76d      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8002f60:	40023800 	.word	0x40023800

08002f64 <EnsureFixPresent_Fix_JSB_20191115_HAL_RCCEx_GetPeriphCLKConfig__PLLDivisionFactors>:

void EnsureFixPresent_Fix_JSB_20191115_HAL_RCCEx_GetPeriphCLKConfig__PLLDivisionFactors() {} // JSB
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_RCCEx_GetPeriphCLKConfig>:
{
  uint32_t tempreg = 0;

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8002f68:	4b60      	ldr	r3, [pc, #384]	@ (80030ec <HAL_RCCEx_GetPeriphCLKConfig+0x184>)
 8002f6a:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8002f6c:	4b60      	ldr	r3, [pc, #384]	@ (80030f0 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8002f6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f72:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002f76:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f78:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f7c:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8002f80:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f82:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f86:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8002f8a:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f8c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002f90:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8002f94:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8002f96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f9a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002f9e:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fa0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fa4:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8002fa8:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002faa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fae:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8002fb2:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fb8:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8002fbc:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos) + 1; // *** JSB: Cube fix: + 1 ***
 8002fbe:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002fc2:	f002 021f 	and.w	r2, r2, #31
 8002fc6:	3201      	adds	r2, #1
 8002fc8:	6242      	str	r2, [r0, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos) + 1; // *** JSB: Cube fix: + 1 ***
 8002fca:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002fce:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8002fd2:	3201      	adds	r2, #1
 8002fd4:	6282      	str	r2, [r0, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8002fd6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002fda:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8002fde:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8002fe0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002fe4:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 8002fe8:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8002fea:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002fee:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 8002ff2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8002ffa:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8002ffc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003000:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8003004:	6642      	str	r2, [r0, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8003006:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800300a:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
 800300e:	6682      	str	r2, [r0, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8003010:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003014:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 8003018:	66c2      	str	r2, [r0, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800301a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800301e:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 8003022:	6702      	str	r2, [r0, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8003024:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003028:	f002 0203 	and.w	r2, r2, #3
 800302c:	6442      	str	r2, [r0, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800302e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003032:	f002 020c 	and.w	r2, r2, #12
 8003036:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8003038:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800303c:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8003040:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8003042:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003046:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 800304a:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800304c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003050:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003054:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8003056:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800305a:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 800305e:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8003060:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003064:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 8003068:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800306a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800306e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8003072:	6602      	str	r2, [r0, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003074:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003078:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 800307c:	6742      	str	r2, [r0, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800307e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003082:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8003086:	6782      	str	r2, [r0, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8003088:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800308c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003090:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8003092:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003096:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800309a:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800309e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80030a2:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80030a6:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 80030aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80030ae:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 80030b2:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80030b6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80030ba:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 80030be:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	f401 11f8 	and.w	r1, r1, #2031616	@ 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80030c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030ca:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80030ce:	430a      	orrs	r2, r1
 80030d0:	6302      	str	r2, [r0, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80030d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030d6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80030da:	d102      	bne.n	80030e2 <HAL_RCCEx_GetPeriphCLKConfig+0x17a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80030dc:	2300      	movs	r3, #0
 80030de:	6383      	str	r3, [r0, #56]	@ 0x38
 80030e0:	4770      	bx	lr
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80030e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030e6:	6383      	str	r3, [r0, #56]	@ 0x38
  }
}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	1cfffff1 	.word	0x1cfffff1
 80030f0:	40023800 	.word	0x40023800

080030f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030f4:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80030f6:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 80030fa:	d004      	beq.n	8003106 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
  uint32_t frequency = 0;
 80030fc:	2000      	movs	r0, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80030fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003102:	d071      	beq.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      }
    }
  }

  return frequency;
}
 8003104:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 8003106:	4a70      	ldr	r2, [pc, #448]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8003108:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800310c:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
    switch (saiclocksource)
 8003110:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8003114:	d064      	beq.n	80031e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003116:	d826      	bhi.n	8003166 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8003118:	b38a      	cbz	r2, 800317e <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 800311a:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800311e:	d120      	bne.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003120:	4a69      	ldr	r2, [pc, #420]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8003122:	6852      	ldr	r2, [r2, #4]
 8003124:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8003128:	d152      	bne.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800312a:	4a67      	ldr	r2, [pc, #412]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800312c:	6851      	ldr	r1, [r2, #4]
 800312e:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8003132:	4a66      	ldr	r2, [pc, #408]	@ (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003134:	fbb2 fcf1 	udiv	ip, r2, r1
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003138:	4a63      	ldr	r2, [pc, #396]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800313a:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
 800313e:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003142:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 8003146:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800314a:	fb0c f000 	mul.w	r0, ip, r0
 800314e:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003152:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8003156:	f002 021f 	and.w	r2, r2, #31
 800315a:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 800315c:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 8003160:	e7cd      	b.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 8003162:	2000      	movs	r0, #0
 8003164:	e7cb      	b.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0xa>
 8003166:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 800316a:	d106      	bne.n	800317a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800316c:	4a56      	ldr	r2, [pc, #344]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800316e:	6852      	ldr	r2, [r2, #4]
 8003170:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8003174:	d136      	bne.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
          frequency = HSI_VALUE;
 8003176:	4855      	ldr	r0, [pc, #340]	@ (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003178:	e7c1      	b.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 800317a:	2000      	movs	r0, #0
 800317c:	e7bf      	b.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800317e:	4a52      	ldr	r2, [pc, #328]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8003180:	6852      	ldr	r2, [r2, #4]
 8003182:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8003186:	d11b      	bne.n	80031c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003188:	4a4f      	ldr	r2, [pc, #316]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800318a:	6851      	ldr	r1, [r2, #4]
 800318c:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8003190:	4a4e      	ldr	r2, [pc, #312]	@ (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003192:	fbb2 fcf1 	udiv	ip, r2, r1
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003196:	4a4c      	ldr	r2, [pc, #304]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8003198:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800319c:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80031a0:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 80031a4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80031a8:	fb0c f000 	mul.w	r0, ip, r0
 80031ac:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80031b0:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 80031b4:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80031b8:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 80031ba:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 80031be:	e79e      	b.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80031c0:	4a41      	ldr	r2, [pc, #260]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80031c2:	6851      	ldr	r1, [r2, #4]
 80031c4:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80031c8:	4a41      	ldr	r2, [pc, #260]	@ (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80031ca:	fbb2 fcf1 	udiv	ip, r2, r1
 80031ce:	e7e2      	b.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80031d0:	4a3d      	ldr	r2, [pc, #244]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80031d2:	6851      	ldr	r1, [r2, #4]
 80031d4:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80031d8:	4a3d      	ldr	r2, [pc, #244]	@ (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80031da:	fbb2 fcf1 	udiv	ip, r2, r1
 80031de:	e7ab      	b.n	8003138 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        frequency = EXTERNAL_CLOCK_VALUE;
 80031e0:	483c      	ldr	r0, [pc, #240]	@ (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80031e2:	e78c      	b.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          frequency = HSE_VALUE;
 80031e4:	483a      	ldr	r0, [pc, #232]	@ (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80031e6:	e78a      	b.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 80031e8:	4b37      	ldr	r3, [pc, #220]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80031ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80031ee:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
    switch (saiclocksource)
 80031f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031f6:	d062      	beq.n	80032be <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80031f8:	d825      	bhi.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80031fa:	b37b      	cbz	r3, 800325c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80031fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003200:	d120      	bne.n	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003202:	4b31      	ldr	r3, [pc, #196]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800320a:	d150      	bne.n	80032ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800320c:	4b2e      	ldr	r3, [pc, #184]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003214:	492d      	ldr	r1, [pc, #180]	@ (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003216:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800321a:	4b2b      	ldr	r3, [pc, #172]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800321c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003220:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003224:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8003228:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800322c:	fb01 f000 	mul.w	r0, r1, r0
 8003230:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003234:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 800323e:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003242:	4770      	bx	lr
 8003244:	4770      	bx	lr
    switch (saiclocksource)
 8003246:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800324a:	d106      	bne.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800324c:	4b1e      	ldr	r3, [pc, #120]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003254:	d135      	bne.n	80032c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
          frequency = HSI_VALUE;
 8003256:	481d      	ldr	r0, [pc, #116]	@ (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003258:	4770      	bx	lr
 800325a:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800325c:	4b1a      	ldr	r3, [pc, #104]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003264:	d11b      	bne.n	800329e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003266:	4b18      	ldr	r3, [pc, #96]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800326e:	4917      	ldr	r1, [pc, #92]	@ (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8003270:	fbb1 f1f3 	udiv	r1, r1, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003274:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8003276:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800327a:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800327e:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8003282:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003286:	fb01 f000 	mul.w	r0, r1, r0
 800328a:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800328e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003292:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8003296:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8003298:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800329c:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800329e:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032a6:	490a      	ldr	r1, [pc, #40]	@ (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80032a8:	fbb1 f1f3 	udiv	r1, r1, r3
 80032ac:	e7e2      	b.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032b6:	4906      	ldr	r1, [pc, #24]	@ (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80032b8:	fbb1 f1f3 	udiv	r1, r1, r3
 80032bc:	e7ad      	b.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
        frequency = EXTERNAL_CLOCK_VALUE;
 80032be:	4805      	ldr	r0, [pc, #20]	@ (80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80032c0:	4770      	bx	lr
          frequency = HSE_VALUE;
 80032c2:	4803      	ldr	r0, [pc, #12]	@ (80032d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
  return frequency;
 80032c4:	e71e      	b.n	8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	017d7840 	.word	0x017d7840
 80032d4:	00ac4400 	.word	0x00ac4400

080032d8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80032d8:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80032da:	2400      	movs	r4, #0
 80032dc:	6304      	str	r4, [r0, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80032de:	6384      	str	r4, [r0, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80032e0:	6844      	ldr	r4, [r0, #4]
 80032e2:	2c02      	cmp	r4, #2
 80032e4:	bf18      	it	ne
 80032e6:	2c00      	cmpne	r4, #0
 80032e8:	d118      	bne.n	800331c <SAI_InitI2S+0x44>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80032ea:	2400      	movs	r4, #0
 80032ec:	63c4      	str	r4, [r0, #60]	@ 0x3c
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80032ee:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80032f2:	6484      	str	r4, [r0, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80032f4:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80032f8:	6604      	str	r4, [r0, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80032fa:	2400      	movs	r4, #0
 80032fc:	6544      	str	r4, [r0, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80032fe:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 8003300:	f013 0f01 	tst.w	r3, #1
 8003304:	d14c      	bne.n	80033a0 <SAI_InitI2S+0xc8>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 8003306:	b961      	cbnz	r1, 8003322 <SAI_InitI2S+0x4a>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003308:	64c4      	str	r4, [r0, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800330a:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 800330e:	6504      	str	r4, [r0, #80]	@ 0x50
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 8003310:	2a03      	cmp	r2, #3
 8003312:	d847      	bhi.n	80033a4 <SAI_InitI2S+0xcc>
 8003314:	e8df f002 	tbb	[pc, r2]
 8003318:	2c22190b 	.word	0x2c22190b
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800331c:	2401      	movs	r4, #1
 800331e:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8003320:	e7e5      	b.n	80032ee <SAI_InitI2S+0x16>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8003322:	f44f 3400 	mov.w	r4, #131072	@ 0x20000
 8003326:	64c4      	str	r4, [r0, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8003328:	2400      	movs	r4, #0
 800332a:	6504      	str	r4, [r0, #80]	@ 0x50
 800332c:	e7f0      	b.n	8003310 <SAI_InitI2S+0x38>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800332e:	2480      	movs	r4, #128	@ 0x80
 8003330:	6344      	str	r4, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	015c      	lsls	r4, r3, #5
 8003336:	6404      	str	r4, [r0, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	6443      	str	r3, [r0, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800333c:	2340      	movs	r3, #64	@ 0x40
 800333e:	6583      	str	r3, [r0, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
      break;
    default :
      return HAL_ERROR;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8003340:	2902      	cmp	r1, #2
 8003342:	d01f      	beq.n	8003384 <SAI_InitI2S+0xac>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return HAL_OK;
 8003344:	2000      	movs	r0, #0
}
 8003346:	bc30      	pop	{r4, r5}
 8003348:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800334a:	2480      	movs	r4, #128	@ 0x80
 800334c:	6344      	str	r4, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	019d      	lsls	r5, r3, #6
 8003352:	6405      	str	r5, [r0, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003354:	015b      	lsls	r3, r3, #5
 8003356:	6443      	str	r3, [r0, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003358:	6584      	str	r4, [r0, #88]	@ 0x58
      break;
 800335a:	e7f1      	b.n	8003340 <SAI_InitI2S+0x68>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800335c:	24c0      	movs	r4, #192	@ 0xc0
 800335e:	6344      	str	r4, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003360:	085b      	lsrs	r3, r3, #1
 8003362:	019c      	lsls	r4, r3, #6
 8003364:	6404      	str	r4, [r0, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8003366:	015b      	lsls	r3, r3, #5
 8003368:	6443      	str	r3, [r0, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	6583      	str	r3, [r0, #88]	@ 0x58
      break;
 800336e:	e7e7      	b.n	8003340 <SAI_InitI2S+0x68>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003370:	24e0      	movs	r4, #224	@ 0xe0
 8003372:	6344      	str	r4, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	019c      	lsls	r4, r3, #6
 8003378:	6404      	str	r4, [r0, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800337a:	015b      	lsls	r3, r3, #5
 800337c:	6443      	str	r3, [r0, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	6583      	str	r3, [r0, #88]	@ 0x58
      break;
 8003382:	e7dd      	b.n	8003340 <SAI_InitI2S+0x68>
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8003384:	2a01      	cmp	r2, #1
 8003386:	d003      	beq.n	8003390 <SAI_InitI2S+0xb8>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8003388:	2a02      	cmp	r2, #2
 800338a:	d005      	beq.n	8003398 <SAI_InitI2S+0xc0>
  return HAL_OK;
 800338c:	2000      	movs	r0, #0
 800338e:	e7da      	b.n	8003346 <SAI_InitI2S+0x6e>
      hsai->SlotInit.FirstBitOffset = 16;
 8003390:	2310      	movs	r3, #16
 8003392:	6543      	str	r3, [r0, #84]	@ 0x54
  return HAL_OK;
 8003394:	2000      	movs	r0, #0
 8003396:	e7d6      	b.n	8003346 <SAI_InitI2S+0x6e>
      hsai->SlotInit.FirstBitOffset = 8;
 8003398:	2308      	movs	r3, #8
 800339a:	6543      	str	r3, [r0, #84]	@ 0x54
  return HAL_OK;
 800339c:	2000      	movs	r0, #0
 800339e:	e7d2      	b.n	8003346 <SAI_InitI2S+0x6e>
    return HAL_ERROR;
 80033a0:	2001      	movs	r0, #1
 80033a2:	e7d0      	b.n	8003346 <SAI_InitI2S+0x6e>
  switch (datasize)
 80033a4:	2001      	movs	r0, #1
 80033a6:	e7ce      	b.n	8003346 <SAI_InitI2S+0x6e>

080033a8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80033a8:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80033aa:	2400      	movs	r4, #0
 80033ac:	6304      	str	r4, [r0, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80033ae:	6384      	str	r4, [r0, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80033b0:	6844      	ldr	r4, [r0, #4]
 80033b2:	2c02      	cmp	r4, #2
 80033b4:	bf18      	it	ne
 80033b6:	2c00      	cmpne	r4, #0
 80033b8:	d118      	bne.n	80033ec <SAI_InitPCM+0x44>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80033ba:	2401      	movs	r4, #1
 80033bc:	63c4      	str	r4, [r0, #60]	@ 0x3c
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80033be:	2400      	movs	r4, #0
 80033c0:	6484      	str	r4, [r0, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80033c2:	f44f 3500 	mov.w	r5, #131072	@ 0x20000
 80033c6:	64c5      	str	r5, [r0, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80033c8:	f44f 2580 	mov.w	r5, #262144	@ 0x40000
 80033cc:	6505      	str	r5, [r0, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80033ce:	6544      	str	r4, [r0, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80033d0:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80033d2:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80033d6:	6604      	str	r4, [r0, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 80033d8:	2904      	cmp	r1, #4
 80033da:	d00a      	beq.n	80033f2 <SAI_InitPCM+0x4a>
    hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80033dc:	210d      	movs	r1, #13
 80033de:	6441      	str	r1, [r0, #68]	@ 0x44
  }

  switch (datasize)
 80033e0:	2a03      	cmp	r2, #3
 80033e2:	d829      	bhi.n	8003438 <SAI_InitPCM+0x90>
 80033e4:	e8df f002 	tbb	[pc, r2]
 80033e8:	20181108 	.word	0x20181108
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80033ec:	2400      	movs	r4, #0
 80033ee:	63c4      	str	r4, [r0, #60]	@ 0x3c
 80033f0:	e7e5      	b.n	80033be <SAI_InitPCM+0x16>
    hsai->FrameInit.ActiveFrameLength = 1;
 80033f2:	2101      	movs	r1, #1
 80033f4:	6441      	str	r1, [r0, #68]	@ 0x44
 80033f6:	e7f3      	b.n	80033e0 <SAI_InitPCM+0x38>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8003400:	2340      	movs	r3, #64	@ 0x40
 8003402:	6583      	str	r3, [r0, #88]	@ 0x58
      break;
    default :
      return HAL_ERROR;
  }

  return HAL_OK;
 8003404:	2000      	movs	r0, #0
}
 8003406:	bc30      	pop	{r4, r5}
 8003408:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800340a:	2280      	movs	r2, #128	@ 0x80
 800340c:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800340e:	015b      	lsls	r3, r3, #5
 8003410:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003412:	6582      	str	r2, [r0, #88]	@ 0x58
  return HAL_OK;
 8003414:	2000      	movs	r0, #0
      break;
 8003416:	e7f6      	b.n	8003406 <SAI_InitPCM+0x5e>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8003418:	22c0      	movs	r2, #192	@ 0xc0
 800341a:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800341c:	015b      	lsls	r3, r3, #5
 800341e:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003420:	2380      	movs	r3, #128	@ 0x80
 8003422:	6583      	str	r3, [r0, #88]	@ 0x58
  return HAL_OK;
 8003424:	2000      	movs	r0, #0
      break;
 8003426:	e7ee      	b.n	8003406 <SAI_InitPCM+0x5e>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8003428:	22e0      	movs	r2, #224	@ 0xe0
 800342a:	6342      	str	r2, [r0, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800342c:	015b      	lsls	r3, r3, #5
 800342e:	6403      	str	r3, [r0, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	6583      	str	r3, [r0, #88]	@ 0x58
  return HAL_OK;
 8003434:	2000      	movs	r0, #0
      break;
 8003436:	e7e6      	b.n	8003406 <SAI_InitPCM+0x5e>
  switch (datasize)
 8003438:	2001      	movs	r0, #1
 800343a:	e7e4      	b.n	8003406 <SAI_InitPCM+0x5e>

0800343c <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 800343c:	2901      	cmp	r1, #1
 800343e:	d00a      	beq.n	8003456 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8003440:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003442:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003444:	2a08      	cmp	r2, #8
 8003446:	d008      	beq.n	800345a <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003448:	6842      	ldr	r2, [r0, #4]
 800344a:	3a02      	subs	r2, #2
 800344c:	2a01      	cmp	r2, #1
 800344e:	d90c      	bls.n	800346a <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8003450:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8003454:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8003456:	2309      	movs	r3, #9
 8003458:	e7f3      	b.n	8003442 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800345a:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800345c:	2a01      	cmp	r2, #1
 800345e:	bf18      	it	ne
 8003460:	2a03      	cmpne	r2, #3
 8003462:	d1f1      	bne.n	8003448 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 8003464:	f043 0310 	orr.w	r3, r3, #16
 8003468:	e7ee      	b.n	8003448 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800346a:	f043 0060 	orr.w	r0, r3, #96	@ 0x60
 800346e:	4770      	bx	lr

08003470 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003470:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <SAI_Disable+0x3c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a0e      	ldr	r2, [pc, #56]	@ (80034b0 <SAI_Disable+0x40>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	0b1b      	lsrs	r3, r3, #12
 800347c:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800347e:	6801      	ldr	r1, [r0, #0]
 8003480:	680a      	ldr	r2, [r1, #0]
 8003482:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003486:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8003488:	461a      	mov	r2, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b132      	cbz	r2, 800349c <SAI_Disable+0x2c>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800348e:	6802      	ldr	r2, [r0, #0]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003496:	d1f7      	bne.n	8003488 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2000      	movs	r0, #0

  return status;
}
 800349a:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800349c:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80034a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034a4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80034a8:	2003      	movs	r0, #3
      break;
 80034aa:	4770      	bx	lr
 80034ac:	200003fc 	.word	0x200003fc
 80034b0:	95cbec1b 	.word	0x95cbec1b

080034b4 <HAL_SAI_Init>:
  if (hsai == NULL)
 80034b4:	2800      	cmp	r0, #0
 80034b6:	f000 80eb 	beq.w	8003690 <HAL_SAI_Init+0x1dc>
{
 80034ba:	b538      	push	{r3, r4, r5, lr}
 80034bc:	4604      	mov	r4, r0
  if (hsai->State == HAL_SAI_STATE_RESET)
 80034be:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 80034c2:	b163      	cbz	r3, 80034de <HAL_SAI_Init+0x2a>
  hsai->State = HAL_SAI_STATE_BUSY;
 80034c4:	2302      	movs	r3, #2
 80034c6:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  SAI_Disable(hsai);
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7ff ffd0 	bl	8003470 <SAI_Disable>
  switch (hsai->Init.SynchroExt)
 80034d0:	68e3      	ldr	r3, [r4, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d008      	beq.n	80034e8 <HAL_SAI_Init+0x34>
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d113      	bne.n	8003502 <HAL_SAI_Init+0x4e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80034da:	2220      	movs	r2, #32
 80034dc:	e005      	b.n	80034ea <HAL_SAI_Init+0x36>
    hsai->Lock = HAL_UNLOCKED;
 80034de:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 80034e2:	f00b fadf 	bl	800eaa4 <HAL_SAI_MspInit>
 80034e6:	e7ed      	b.n	80034c4 <HAL_SAI_Init+0x10>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80034e8:	2210      	movs	r2, #16
  switch (hsai->Init.Synchro)
 80034ea:	68a3      	ldr	r3, [r4, #8]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	f000 80ac 	beq.w	800364a <HAL_SAI_Init+0x196>
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d007      	beq.n	8003506 <HAL_SAI_Init+0x52>
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	f040 80aa 	bne.w	8003650 <HAL_SAI_Init+0x19c>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80034fc:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8003500:	e005      	b.n	800350e <HAL_SAI_Init+0x5a>
  switch (hsai->Init.SynchroExt)
 8003502:	2200      	movs	r2, #0
 8003504:	e7f1      	b.n	80034ea <HAL_SAI_Init+0x36>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003506:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800350a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	4860      	ldr	r0, [pc, #384]	@ (8003694 <HAL_SAI_Init+0x1e0>)
 8003512:	4961      	ldr	r1, [pc, #388]	@ (8003698 <HAL_SAI_Init+0x1e4>)
 8003514:	428b      	cmp	r3, r1
 8003516:	bf18      	it	ne
 8003518:	4283      	cmpne	r3, r0
 800351a:	f040 809b 	bne.w	8003654 <HAL_SAI_Init+0x1a0>
    SAI1->GCR = tmpregisterGCR;
 800351e:	4b5f      	ldr	r3, [pc, #380]	@ (800369c <HAL_SAI_Init+0x1e8>)
 8003520:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003524:	69e3      	ldr	r3, [r4, #28]
 8003526:	b33b      	cbz	r3, 8003578 <HAL_SAI_Init+0xc4>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	495a      	ldr	r1, [pc, #360]	@ (8003694 <HAL_SAI_Init+0x1e0>)
 800352c:	4a5a      	ldr	r2, [pc, #360]	@ (8003698 <HAL_SAI_Init+0x1e4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	bf18      	it	ne
 8003532:	428b      	cmpne	r3, r1
 8003534:	f000 8092 	beq.w	800365c <HAL_SAI_Init+0x1a8>
    uint32_t freq = 0;
 8003538:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	4958      	ldr	r1, [pc, #352]	@ (80036a0 <HAL_SAI_Init+0x1ec>)
 800353e:	4a59      	ldr	r2, [pc, #356]	@ (80036a4 <HAL_SAI_Init+0x1f0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	bf18      	it	ne
 8003544:	428b      	cmpne	r3, r1
 8003546:	f000 808e 	beq.w	8003666 <HAL_SAI_Init+0x1b2>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800354a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800354e:	0040      	lsls	r0, r0, #1
 8003550:	69e3      	ldr	r3, [r4, #28]
 8003552:	025b      	lsls	r3, r3, #9
 8003554:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8003558:	4b53      	ldr	r3, [pc, #332]	@ (80036a8 <HAL_SAI_Init+0x1f4>)
 800355a:	fba3 2300 	umull	r2, r3, r3, r0
 800355e:	08db      	lsrs	r3, r3, #3
 8003560:	6223      	str	r3, [r4, #32]
    if ((tmpval % 10) > 8)
 8003562:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003566:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 800356a:	2808      	cmp	r0, #8
 800356c:	d901      	bls.n	8003572 <HAL_SAI_Init+0xbe>
      hsai->Init.Mckdiv += 1;
 800356e:	3301      	adds	r3, #1
 8003570:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003572:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003574:	2b04      	cmp	r3, #4
 8003576:	d07b      	beq.n	8003670 <HAL_SAI_Init+0x1bc>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003578:	6863      	ldr	r3, [r4, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	bf18      	it	ne
 800357e:	2b00      	cmpne	r3, #0
 8003580:	d17d      	bne.n	800367e <HAL_SAI_Init+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003582:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d077      	beq.n	8003678 <HAL_SAI_Init+0x1c4>
 8003588:	f44f 7c00 	mov.w	ip, #512	@ 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800358c:	6822      	ldr	r2, [r4, #0]
 800358e:	6811      	ldr	r1, [r2, #0]
 8003590:	4b46      	ldr	r3, [pc, #280]	@ (80036ac <HAL_SAI_Init+0x1f8>)
 8003592:	400b      	ands	r3, r1
 8003594:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	6811      	ldr	r1, [r2, #0]
 800359a:	6863      	ldr	r3, [r4, #4]
 800359c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800359e:	4303      	orrs	r3, r0
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80035a0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80035a2:	4303      	orrs	r3, r0
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80035a4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80035a6:	4303      	orrs	r3, r0
 80035a8:	ea43 030c 	orr.w	r3, r3, ip
                          ckstr_bits | syncen_bits |                               \
 80035ac:	432b      	orrs	r3, r5
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80035ae:	6a60      	ldr	r0, [r4, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80035b0:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80035b2:	6920      	ldr	r0, [r4, #16]
 80035b4:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80035b6:	6960      	ldr	r0, [r4, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80035b8:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80035ba:	6a20      	ldr	r0, [r4, #32]
 80035bc:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80035c4:	6822      	ldr	r2, [r4, #0]
 80035c6:	6851      	ldr	r1, [r2, #4]
 80035c8:	4b39      	ldr	r3, [pc, #228]	@ (80036b0 <HAL_SAI_Init+0x1fc>)
 80035ca:	400b      	ands	r3, r1
 80035cc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80035ce:	6821      	ldr	r1, [r4, #0]
 80035d0:	684a      	ldr	r2, [r1, #4]
 80035d2:	69a3      	ldr	r3, [r4, #24]
 80035d4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80035d6:	4303      	orrs	r3, r0
 80035d8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80035da:	4303      	orrs	r3, r0
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80035e0:	6822      	ldr	r2, [r4, #0]
 80035e2:	6891      	ldr	r1, [r2, #8]
 80035e4:	4b33      	ldr	r3, [pc, #204]	@ (80036b4 <HAL_SAI_Init+0x200>)
 80035e6:	400b      	ands	r3, r1
 80035e8:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80035ea:	6820      	ldr	r0, [r4, #0]
 80035ec:	6882      	ldr	r2, [r0, #8]
 80035ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035f0:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 80035f2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80035f4:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 80035f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80035f8:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 80035fa:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80035fc:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80035fe:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003600:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 8003602:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003606:	4313      	orrs	r3, r2
 8003608:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	68d3      	ldr	r3, [r2, #12]
 800360e:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 8003612:	f023 030f 	bic.w	r3, r3, #15
 8003616:	041b      	lsls	r3, r3, #16
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800361c:	6820      	ldr	r0, [r4, #0]
 800361e:	68c2      	ldr	r2, [r0, #12]
 8003620:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003622:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003624:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003626:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003628:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800362c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800362e:	3901      	subs	r1, #1
 8003630:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003634:	4313      	orrs	r3, r2
 8003636:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003638:	2000      	movs	r0, #0
 800363a:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  hsai->State = HAL_SAI_STATE_READY;
 800363e:	2301      	movs	r3, #1
 8003640:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 8003644:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
}
 8003648:	bd38      	pop	{r3, r4, r5, pc}
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800364a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800364e:	e75e      	b.n	800350e <HAL_SAI_Init+0x5a>
  switch (hsai->Init.Synchro)
 8003650:	2500      	movs	r5, #0
 8003652:	e75c      	b.n	800350e <HAL_SAI_Init+0x5a>
    SAI2->GCR = tmpregisterGCR;
 8003654:	4b11      	ldr	r3, [pc, #68]	@ (800369c <HAL_SAI_Init+0x1e8>)
 8003656:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 800365a:	e763      	b.n	8003524 <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800365c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003660:	f7ff fd48 	bl	80030f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003664:	e769      	b.n	800353a <HAL_SAI_Init+0x86>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003666:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800366a:	f7ff fd43 	bl	80030f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800366e:	e76c      	b.n	800354a <HAL_SAI_Init+0x96>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003670:	6a23      	ldr	r3, [r4, #32]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	6223      	str	r3, [r4, #32]
 8003676:	e77f      	b.n	8003578 <HAL_SAI_Init+0xc4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003678:	f04f 0c00 	mov.w	ip, #0
 800367c:	e786      	b.n	800358c <HAL_SAI_Init+0xd8>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800367e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d002      	beq.n	800368a <HAL_SAI_Init+0x1d6>
 8003684:	f04f 0c00 	mov.w	ip, #0
 8003688:	e780      	b.n	800358c <HAL_SAI_Init+0xd8>
 800368a:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800368e:	e77d      	b.n	800358c <HAL_SAI_Init+0xd8>
    return HAL_ERROR;
 8003690:	2001      	movs	r0, #1
}
 8003692:	4770      	bx	lr
 8003694:	40015804 	.word	0x40015804
 8003698:	40015824 	.word	0x40015824
 800369c:	40015000 	.word	0x40015000
 80036a0:	40015c04 	.word	0x40015c04
 80036a4:	40015c24 	.word	0x40015c24
 80036a8:	cccccccd 	.word	0xcccccccd
 80036ac:	ff05c010 	.word	0xff05c010
 80036b0:	ffff1ff0 	.word	0xffff1ff0
 80036b4:	fff88000 	.word	0xfff88000

080036b8 <HAL_SAI_InitProtocol>:
{
 80036b8:	b510      	push	{r4, lr}
 80036ba:	4604      	mov	r4, r0
  switch (protocol)
 80036bc:	2902      	cmp	r1, #2
 80036be:	d906      	bls.n	80036ce <HAL_SAI_InitProtocol+0x16>
 80036c0:	1ec8      	subs	r0, r1, #3
 80036c2:	2801      	cmp	r0, #1
 80036c4:	d80b      	bhi.n	80036de <HAL_SAI_InitProtocol+0x26>
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff fe6e 	bl	80033a8 <SAI_InitPCM>
      break;
 80036cc:	e001      	b.n	80036d2 <HAL_SAI_InitProtocol+0x1a>
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80036ce:	f7ff fe03 	bl	80032d8 <SAI_InitI2S>
  if (status == HAL_OK)
 80036d2:	b100      	cbz	r0, 80036d6 <HAL_SAI_InitProtocol+0x1e>
}
 80036d4:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff feec 	bl	80034b4 <HAL_SAI_Init>
 80036dc:	e7fa      	b.n	80036d4 <HAL_SAI_InitProtocol+0x1c>
  switch (protocol)
 80036de:	2001      	movs	r0, #1
 80036e0:	e7f8      	b.n	80036d4 <HAL_SAI_InitProtocol+0x1c>

080036e2 <HAL_SAI_DMAStop>:
{
 80036e2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 80036e4:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d04b      	beq.n	8003784 <HAL_SAI_DMAStop+0xa2>
 80036ec:	4604      	mov	r4, r0
 80036ee:	2301      	movs	r3, #1
 80036f0:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
  SAI_Disable(hsai);
 80036f4:	f7ff febc 	bl	8003470 <SAI_Disable>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003700:	6013      	str	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8003702:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003704:	b350      	cbz	r0, 800375c <HAL_SAI_DMAStop+0x7a>
 8003706:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b12      	cmp	r3, #18
 800370e:	d014      	beq.n	800373a <HAL_SAI_DMAStop+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2500      	movs	r5, #0
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8003712:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003714:	b120      	cbz	r0, 8003720 <HAL_SAI_DMAStop+0x3e>
 8003716:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b22      	cmp	r3, #34	@ 0x22
 800371e:	d021      	beq.n	8003764 <HAL_SAI_DMAStop+0x82>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	6853      	ldr	r3, [r2, #4]
 8003724:	f043 0308 	orr.w	r3, r3, #8
 8003728:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 800372a:	2301      	movs	r3, #1
 800372c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 8003730:	2300      	movs	r3, #0
 8003732:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 8003736:	4628      	mov	r0, r5
 8003738:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800373a:	f7fd f931 	bl	80009a0 <HAL_DMA_Abort>
 800373e:	4605      	mov	r5, r0
 8003740:	2800      	cmp	r0, #0
 8003742:	d0e6      	beq.n	8003712 <HAL_SAI_DMAStop+0x30>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8003744:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003748:	2b80      	cmp	r3, #128	@ 0x80
 800374a:	d009      	beq.n	8003760 <HAL_SAI_DMAStop+0x7e>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800374c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8003750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003754:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 8003758:	2501      	movs	r5, #1
 800375a:	e7da      	b.n	8003712 <HAL_SAI_DMAStop+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2500      	movs	r5, #0
 800375e:	e7d8      	b.n	8003712 <HAL_SAI_DMAStop+0x30>
 8003760:	2500      	movs	r5, #0
 8003762:	e7d6      	b.n	8003712 <HAL_SAI_DMAStop+0x30>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8003764:	f7fd f91c 	bl	80009a0 <HAL_DMA_Abort>
 8003768:	2800      	cmp	r0, #0
 800376a:	d0d9      	beq.n	8003720 <HAL_SAI_DMAStop+0x3e>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800376c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800376e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003770:	2b80      	cmp	r3, #128	@ 0x80
 8003772:	d0d5      	beq.n	8003720 <HAL_SAI_DMAStop+0x3e>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003774:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8003778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800377c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 8003780:	2501      	movs	r5, #1
 8003782:	e7cd      	b.n	8003720 <HAL_SAI_DMAStop+0x3e>
  __HAL_LOCK(hsai);
 8003784:	2502      	movs	r5, #2
 8003786:	e7d6      	b.n	8003736 <HAL_SAI_DMAStop+0x54>

08003788 <HAL_SAI_Transmit_DMA>:
{
 8003788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800378c:	4604      	mov	r4, r0
 800378e:	4688      	mov	r8, r1
 8003790:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8003792:	f7fc ff6b 	bl	800066c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0))
 8003796:	2e00      	cmp	r6, #0
 8003798:	bf18      	it	ne
 800379a:	f1b8 0f00 	cmpne.w	r8, #0
 800379e:	d061      	beq.n	8003864 <HAL_SAI_Transmit_DMA+0xdc>
 80037a0:	4605      	mov	r5, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 80037a2:	f894 707d 	ldrb.w	r7, [r4, #125]	@ 0x7d
 80037a6:	b2ff      	uxtb	r7, r7
 80037a8:	2f01      	cmp	r7, #1
 80037aa:	d15f      	bne.n	800386c <HAL_SAI_Transmit_DMA+0xe4>
    __HAL_LOCK(hsai);
 80037ac:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d05d      	beq.n	8003870 <HAL_SAI_Transmit_DMA+0xe8>
 80037b4:	2301      	movs	r3, #1
 80037b6:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    hsai->pBuffPtr = pData;
 80037ba:	f8c4 8064 	str.w	r8, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 80037be:	f8a4 6068 	strh.w	r6, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 80037c2:	f8a4 606a 	strh.w	r6, [r4, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80037cc:	2212      	movs	r2, #18
 80037ce:	f884 207d 	strb.w	r2, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80037d2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80037d4:	4927      	ldr	r1, [pc, #156]	@ (8003874 <HAL_SAI_Transmit_DMA+0xec>)
 80037d6:	6411      	str	r1, [r2, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80037d8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80037da:	4927      	ldr	r1, [pc, #156]	@ (8003878 <HAL_SAI_Transmit_DMA+0xf0>)
 80037dc:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80037de:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80037e0:	4926      	ldr	r1, [pc, #152]	@ (800387c <HAL_SAI_Transmit_DMA+0xf4>)
 80037e2:	64d1      	str	r1, [r2, #76]	@ 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80037e4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80037e6:	6513      	str	r3, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 80037ee:	321c      	adds	r2, #28
 80037f0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80037f2:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80037f4:	f7fd f89a 	bl	800092c <HAL_DMA_Start_IT>
 80037f8:	4606      	mov	r6, r0
 80037fa:	bb10      	cbnz	r0, 8003842 <HAL_SAI_Transmit_DMA+0xba>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80037fc:	2100      	movs	r1, #0
 80037fe:	4620      	mov	r0, r4
 8003800:	f7ff fe1c 	bl	800343c <SAI_InterruptFlag>
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	6913      	ldr	r3, [r2, #16]
 8003808:	4303      	orrs	r3, r0
 800380a:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800380c:	6822      	ldr	r2, [r4, #0]
 800380e:	6813      	ldr	r3, [r2, #0]
 8003810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003814:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	f412 2fe0 	tst.w	r2, #458752	@ 0x70000
 800381e:	d114      	bne.n	800384a <HAL_SAI_Transmit_DMA+0xc2>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8003820:	f7fc ff24 	bl	800066c <HAL_GetTick>
 8003824:	1b43      	subs	r3, r0, r5
 8003826:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800382a:	d9f4      	bls.n	8003816 <HAL_SAI_Transmit_DMA+0x8e>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800382c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8003830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003834:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        __HAL_UNLOCK(hsai);
 8003838:	2300      	movs	r3, #0
 800383a:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800383e:	2703      	movs	r7, #3
 8003840:	e011      	b.n	8003866 <HAL_SAI_Transmit_DMA+0xde>
      __HAL_UNLOCK(hsai);
 8003842:	2300      	movs	r3, #0
 8003844:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
      return  HAL_ERROR;
 8003848:	e00d      	b.n	8003866 <HAL_SAI_Transmit_DMA+0xde>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003850:	d103      	bne.n	800385a <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003858:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800385a:	2300      	movs	r3, #0
 800385c:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8003860:	4637      	mov	r7, r6
 8003862:	e000      	b.n	8003866 <HAL_SAI_Transmit_DMA+0xde>
    return  HAL_ERROR;
 8003864:	2701      	movs	r7, #1
}
 8003866:	4638      	mov	r0, r7
 8003868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800386c:	2702      	movs	r7, #2
 800386e:	e7fa      	b.n	8003866 <HAL_SAI_Transmit_DMA+0xde>
    __HAL_LOCK(hsai);
 8003870:	2702      	movs	r7, #2
 8003872:	e7f8      	b.n	8003866 <HAL_SAI_Transmit_DMA+0xde>
 8003874:	0800397b 	.word	0x0800397b
 8003878:	08003941 	.word	0x08003941
 800387c:	080039cb 	.word	0x080039cb

08003880 <HAL_SAI_Receive_DMA>:
{
 8003880:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0))
 8003882:	2a00      	cmp	r2, #0
 8003884:	bf18      	it	ne
 8003886:	2900      	cmpne	r1, #0
 8003888:	d04c      	beq.n	8003924 <HAL_SAI_Receive_DMA+0xa4>
 800388a:	4604      	mov	r4, r0
 800388c:	4613      	mov	r3, r2
  if (hsai->State == HAL_SAI_STATE_READY)
 800388e:	f894 507d 	ldrb.w	r5, [r4, #125]	@ 0x7d
 8003892:	b2ed      	uxtb	r5, r5
 8003894:	2d01      	cmp	r5, #1
 8003896:	d148      	bne.n	800392a <HAL_SAI_Receive_DMA+0xaa>
    __HAL_LOCK(hsai);
 8003898:	f894 207c 	ldrb.w	r2, [r4, #124]	@ 0x7c
 800389c:	2a01      	cmp	r2, #1
 800389e:	d046      	beq.n	800392e <HAL_SAI_Receive_DMA+0xae>
 80038a0:	2201      	movs	r2, #1
 80038a2:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->pBuffPtr = pData;
 80038a6:	6661      	str	r1, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 80038a8:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 80038ac:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80038b6:	2222      	movs	r2, #34	@ 0x22
 80038b8:	f884 207d 	strb.w	r2, [r4, #125]	@ 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80038bc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80038be:	491d      	ldr	r1, [pc, #116]	@ (8003934 <HAL_SAI_Receive_DMA+0xb4>)
 80038c0:	6411      	str	r1, [r2, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80038c2:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80038c4:	491c      	ldr	r1, [pc, #112]	@ (8003938 <HAL_SAI_Receive_DMA+0xb8>)
 80038c6:	63d1      	str	r1, [r2, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80038c8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80038ca:	491c      	ldr	r1, [pc, #112]	@ (800393c <HAL_SAI_Receive_DMA+0xbc>)
 80038cc:	64d1      	str	r1, [r2, #76]	@ 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 80038ce:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80038d0:	6513      	str	r3, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80038d2:	6821      	ldr	r1, [r4, #0]
 80038d4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 80038d8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038da:	311c      	adds	r1, #28
 80038dc:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80038de:	f7fd f825 	bl	800092c <HAL_DMA_Start_IT>
 80038e2:	4606      	mov	r6, r0
 80038e4:	b118      	cbz	r0, 80038ee <HAL_SAI_Receive_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 80038e6:	2300      	movs	r3, #0
 80038e8:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
      return  HAL_ERROR;
 80038ec:	e01b      	b.n	8003926 <HAL_SAI_Receive_DMA+0xa6>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80038ee:	2100      	movs	r1, #0
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7ff fda3 	bl	800343c <SAI_InterruptFlag>
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	6913      	ldr	r3, [r2, #16]
 80038fa:	4303      	orrs	r3, r0
 80038fc:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80038fe:	6822      	ldr	r2, [r4, #0]
 8003900:	6813      	ldr	r3, [r2, #0]
 8003902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003906:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003910:	d103      	bne.n	800391a <HAL_SAI_Receive_DMA+0x9a>
      __HAL_SAI_ENABLE(hsai);
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003918:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800391a:	2300      	movs	r3, #0
 800391c:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8003920:	4635      	mov	r5, r6
 8003922:	e000      	b.n	8003926 <HAL_SAI_Receive_DMA+0xa6>
    return  HAL_ERROR;
 8003924:	2501      	movs	r5, #1
}
 8003926:	4628      	mov	r0, r5
 8003928:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800392a:	2502      	movs	r5, #2
 800392c:	e7fb      	b.n	8003926 <HAL_SAI_Receive_DMA+0xa6>
    __HAL_LOCK(hsai);
 800392e:	2502      	movs	r5, #2
 8003930:	e7f9      	b.n	8003926 <HAL_SAI_Receive_DMA+0xa6>
 8003932:	bf00      	nop
 8003934:	080039bf 	.word	0x080039bf
 8003938:	08003985 	.word	0x08003985
 800393c:	080039cb 	.word	0x080039cb

08003940 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003940:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003942:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003944:	69c3      	ldr	r3, [r0, #28]
 8003946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800394a:	d012      	beq.n	8003972 <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 800394c:	2100      	movs	r1, #0
 800394e:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	6813      	ldr	r3, [r2, #0]
 8003956:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800395a:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800395c:	4620      	mov	r0, r4
 800395e:	f7ff fd6d 	bl	800343c <SAI_InterruptFlag>
 8003962:	6822      	ldr	r2, [r4, #0]
 8003964:	6913      	ldr	r3, [r2, #16]
 8003966:	ea23 0300 	bic.w	r3, r3, r0
 800396a:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800396c:	2301      	movs	r3, #1
 800396e:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8003972:	4620      	mov	r0, r4
 8003974:	f008 fdba 	bl	800c4ec <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003978:	bd10      	pop	{r4, pc}

0800397a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800397a:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800397c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800397e:	f008 fd81 	bl	800c484 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003982:	bd08      	pop	{r3, pc}

08003984 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003984:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003986:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003988:	69c3      	ldr	r3, [r0, #28]
 800398a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398e:	d012      	beq.n	80039b6 <SAI_DMARxCplt+0x32>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003990:	6822      	ldr	r2, [r4, #0]
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003998:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 800399a:	2100      	movs	r1, #0
 800399c:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80039a0:	4620      	mov	r0, r4
 80039a2:	f7ff fd4b 	bl	800343c <SAI_InterruptFlag>
 80039a6:	6822      	ldr	r2, [r4, #0]
 80039a8:	6913      	ldr	r3, [r2, #16]
 80039aa:	ea23 0300 	bic.w	r3, r3, r0
 80039ae:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80039b6:	4620      	mov	r0, r4
 80039b8:	f008 fd36 	bl	800c428 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80039bc:	bd10      	pop	{r4, pc}

080039be <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039be:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80039c0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80039c2:	f008 fd03 	bl	800c3cc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80039c6:	bd08      	pop	{r3, pc}

080039c8 <HAL_SAI_ErrorCallback>:
}
 80039c8:	4770      	bx	lr

080039ca <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80039ca:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039cc:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80039ce:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80039d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039d6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80039da:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80039dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d007      	beq.n	80039f2 <SAI_DMAError+0x28>
 80039e2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80039e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d003      	beq.n	80039f2 <SAI_DMAError+0x28>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80039ea:	4620      	mov	r0, r4
 80039ec:	f7ff ffec 	bl	80039c8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80039f0:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80039f2:	6822      	ldr	r2, [r4, #0]
 80039f4:	6813      	ldr	r3, [r2, #0]
 80039f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80039fa:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 80039fc:	4620      	mov	r0, r4
 80039fe:	f7ff fd37 	bl	8003470 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    hsai->XferCount = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 8003a0e:	e7ec      	b.n	80039ea <SAI_DMAError+0x20>

08003a10 <EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE>:
#ifdef HAL_SPDIFRX_MODULE_ENABLED
#if defined (SPDIFRX)

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
void EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE() {} // JSB
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_SPDIFRX_Init>:
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d030      	beq.n	8003a7a <HAL_SPDIFRX_Init+0x66>
{
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8003a1c:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
 8003a20:	b333      	cbz	r3, 8003a70 <HAL_SPDIFRX_Init+0x5c>
    HAL_SPDIFRX_MspInit(hspdif);
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8003a22:	2302      	movs	r3, #2
 8003a24:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	6813      	ldr	r3, [r2, #0]
 8003a2c:	f023 0303 	bic.w	r3, r3, #3
 8003a30:	6013      	str	r3, [r2, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8003a32:	6821      	ldr	r1, [r4, #0]
 8003a34:	680b      	ldr	r3, [r1, #0]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8003a36:	4a12      	ldr	r2, [pc, #72]	@ (8003a80 <HAL_SPDIFRX_Init+0x6c>)
 8003a38:	401a      	ands	r2, r3
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8003a3a:	69a3      	ldr	r3, [r4, #24]
             hspdif->Init.InputSelection |
 8003a3c:	6860      	ldr	r0, [r4, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8003a3e:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8003a40:	68a0      	ldr	r0, [r4, #8]
             hspdif->Init.InputSelection |
 8003a42:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 8003a44:	68e0      	ldr	r0, [r4, #12]
             hspdif->Init.Retries |
 8003a46:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 8003a48:	6920      	ldr	r0, [r4, #16]
             hspdif->Init.WaitForActivity |
 8003a4a:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 8003a4c:	6960      	ldr	r0, [r4, #20]
             hspdif->Init.ChannelSelection |
 8003a4e:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 8003a50:	69e0      	ldr	r0, [r4, #28]
             hspdif->Init.DataFormat |
 8003a52:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 8003a54:	6a20      	ldr	r0, [r4, #32]
             hspdif->Init.PreambleTypeMask |
 8003a56:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 8003a58:	6a60      	ldr	r0, [r4, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8003a5a:	4303      	orrs	r3, r0
             hspdif->Init.ParityErrorMask
 8003a5c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8003a5e:	4303      	orrs	r3, r0
  tmpreg |= (hspdif->Init.StereoMode |
 8003a60:	4313      	orrs	r3, r2
            );


  hspdif->Instance->CR = tmpreg;
 8003a62:	600b      	str	r3, [r1, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8003a64:	2000      	movs	r0, #0
 8003a66:	64a0      	str	r0, [r4, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45

  return HAL_OK;
}
 8003a6e:	bd10      	pop	{r4, pc}
    hspdif->Lock = HAL_UNLOCKED;
 8003a70:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
    HAL_SPDIFRX_MspInit(hspdif);
 8003a74:	f00b f8ec 	bl	800ec50 <HAL_SPDIFRX_MspInit>
 8003a78:	e7d3      	b.n	8003a22 <HAL_SPDIFRX_Init+0xe>
    return HAL_ERROR;
 8003a7a:	2001      	movs	r0, #1
}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	fff88407 	.word	0xfff88407

08003a84 <HAL_SPDIFRX_ReceiveDataFlow_DMA>:
  * @param pData a 32-bit pointer to the Receive data buffer.
  * @param Size number of data sample to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_ReceiveDataFlow_DMA(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData, uint16_t Size)
{
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	4604      	mov	r4, r0
  uint32_t count = SPDIFRX_TIMEOUT_VALUE * (SystemCoreClock / 24U / 1000U);
 8003a88:	4b50      	ldr	r3, [pc, #320]	@ (8003bcc <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x148>)
 8003a8a:	681d      	ldr	r5, [r3, #0]
 8003a8c:	4b50      	ldr	r3, [pc, #320]	@ (8003bd0 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x14c>)
 8003a8e:	fba3 3505 	umull	r3, r5, r3, r5
 8003a92:	0a6d      	lsrs	r5, r5, #9
 8003a94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a98:	fb03 f505 	mul.w	r5, r3, r5

  const HAL_SPDIFRX_StateTypeDef tempState = hspdif->State;
 8003a9c:	f890 0045 	ldrb.w	r0, [r0, #69]	@ 0x45

  if ((pData == NULL) || (Size == 0U))
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	bf18      	it	ne
 8003aa4:	2900      	cmpne	r1, #0
 8003aa6:	f000 808b 	beq.w	8003bc0 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13c>
 8003aaa:	b2c0      	uxtb	r0, r0
 8003aac:	4613      	mov	r3, r2
  {
    return  HAL_ERROR;
  }

  if ((tempState == HAL_SPDIFRX_STATE_READY) || (tempState == HAL_SPDIFRX_STATE_BUSY_CX))
 8003aae:	2804      	cmp	r0, #4
 8003ab0:	bf18      	it	ne
 8003ab2:	2801      	cmpne	r0, #1
 8003ab4:	f040 8086 	bne.w	8003bc4 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x140>
  {
    /* Process Locked */
    __HAL_LOCK(hspdif);
 8003ab8:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	2a01      	cmp	r2, #1
 8003ac0:	f000 8082 	beq.w	8003bc8 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x144>
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44

    hspdif->pRxBuffPtr = pData;
 8003aca:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hspdif->RxXferSize = Size;
 8003acc:	86a3      	strh	r3, [r4, #52]	@ 0x34
    hspdif->RxXferCount = Size;
 8003ace:	86e3      	strh	r3, [r4, #54]	@ 0x36

    hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	64a2      	str	r2, [r4, #72]	@ 0x48
    hspdif->State = HAL_SPDIFRX_STATE_BUSY_RX;
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45

    /* Set the SPDIFRX Rx DMA Half transfer complete callback */
    hspdif->hdmaDrRx->XferHalfCpltCallback = SPDIFRX_DMARxHalfCplt;
 8003ada:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003adc:	493d      	ldr	r1, [pc, #244]	@ (8003bd4 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x150>)
 8003ade:	6411      	str	r1, [r2, #64]	@ 0x40

    /* Set the SPDIFRX Rx DMA transfer complete callback */
    hspdif->hdmaDrRx->XferCpltCallback = SPDIFRX_DMARxCplt;
 8003ae0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003ae2:	493d      	ldr	r1, [pc, #244]	@ (8003bd8 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x154>)
 8003ae4:	63d1      	str	r1, [r2, #60]	@ 0x3c

    /* Set the DMA error callback */
    hspdif->hdmaDrRx->XferErrorCallback = SPDIFRX_DMAError;
 8003ae6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003ae8:	493c      	ldr	r1, [pc, #240]	@ (8003bdc <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x158>)
 8003aea:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Enable the DMA request */
    if (HAL_DMA_Start_IT(hspdif->hdmaDrRx, (uint32_t)&hspdif->Instance->DR, (uint32_t)hspdif->pRxBuffPtr, Size) !=
 8003aec:	6821      	ldr	r1, [r4, #0]
 8003aee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003af0:	3110      	adds	r1, #16
 8003af2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003af4:	f7fc ff1a 	bl	800092c <HAL_DMA_Start_IT>
 8003af8:	b9f8      	cbnz	r0, 8003b3a <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xb6>

      return HAL_ERROR;
    }

    /* Enable RXDMAEN bit in SPDIFRX CR register for data flow reception*/
    hspdif->Instance->CR |= SPDIFRX_CR_RXDMAEN;
 8003afa:	6822      	ldr	r2, [r4, #0]
 8003afc:	6813      	ldr	r3, [r2, #0]
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	6013      	str	r3, [r2, #0]

    if ((SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != SPDIFRX_STATE_RCV)
 8003b04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d00f      	beq.n	8003b32 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xae>
    {
      /* Start synchronization */
      __HAL_SPDIFRX_SYNC(hspdif);
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	6813      	ldr	r3, [r2, #0]
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6013      	str	r3, [r2, #0]

      /* Wait until SYNCD flag is set */
      do
      {
        if (count == 0U)
 8003b1c:	b1bd      	cbz	r5, 8003b4e <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xca>
          /* Process Unlocked */
          __HAL_UNLOCK(hspdif);

          return HAL_TIMEOUT;
        }
        count--;
 8003b1e:	3d01      	subs	r5, #1
      } while (__HAL_SPDIFRX_GET_FLAG(hspdif, SPDIFRX_FLAG_SYNCD) == RESET);
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	f012 0f20 	tst.w	r2, #32
 8003b28:	d0f8      	beq.n	8003b1c <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x98>

      /* Start reception */
      __HAL_SPDIFRX_RCV(hspdif);
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	f042 0203 	orr.w	r2, r2, #3
 8003b30:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 8003b32:	2300      	movs	r3, #0
 8003b34:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44

    return HAL_OK;
 8003b38:	e043      	b.n	8003bc2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
      hspdif->ErrorCode = HAL_SPDIFRX_ERROR_DMA;
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	64a3      	str	r3, [r4, #72]	@ 0x48
      hspdif->State = HAL_SPDIFRX_STATE_ERROR;
 8003b3e:	2307      	movs	r3, #7
 8003b40:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
      __HAL_UNLOCK(hspdif);
 8003b44:	2300      	movs	r3, #0
 8003b46:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	e039      	b.n	8003bc2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_RXNE);
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	6853      	ldr	r3, [r2, #4]
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 8003b5c:	6822      	ldr	r2, [r4, #0]
 8003b5e:	6853      	ldr	r3, [r2, #4]
 8003b60:	f023 0302 	bic.w	r3, r3, #2
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	0c1b      	lsrs	r3, r3, #16
 8003b68:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_PERRIE);
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	6853      	ldr	r3, [r2, #4]
 8003b6e:	f023 0304 	bic.w	r3, r3, #4
 8003b72:	041b      	lsls	r3, r3, #16
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE);
 8003b78:	6822      	ldr	r2, [r4, #0]
 8003b7a:	6853      	ldr	r3, [r2, #4]
 8003b7c:	f023 0308 	bic.w	r3, r3, #8
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	0c1b      	lsrs	r3, r3, #16
 8003b84:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SBLKIE);
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	6853      	ldr	r3, [r2, #4]
 8003b8a:	f023 0310 	bic.w	r3, r3, #16
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SYNCDIE);
 8003b94:	6822      	ldr	r2, [r4, #0]
 8003b96:	6853      	ldr	r3, [r2, #4]
 8003b98:	f023 0320 	bic.w	r3, r3, #32
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_IFEIE);
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	6853      	ldr	r3, [r2, #4]
 8003ba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	6053      	str	r3, [r2, #4]
          hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
          __HAL_UNLOCK(hspdif);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
          return HAL_TIMEOUT;
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	e000      	b.n	8003bc2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
    return  HAL_ERROR;
 8003bc0:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003bc4:	2002      	movs	r0, #2
 8003bc6:	e7fc      	b.n	8003bc2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
    __HAL_LOCK(hspdif);
 8003bc8:	2002      	movs	r0, #2
 8003bca:	e7fa      	b.n	8003bc2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
 8003bcc:	200003fc 	.word	0x200003fc
 8003bd0:	057619f1 	.word	0x057619f1
 8003bd4:	08003c53 	.word	0x08003c53
 8003bd8:	08003c5f 	.word	0x08003c5f
 8003bdc:	08003d11 	.word	0x08003d11

08003be0 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort>:
  {
    return HAL_BUSY;
  }
}

void EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort() {} // JSB
 8003be0:	4770      	bx	lr

08003be2 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR>:
void EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR() {} // JSB
 8003be2:	4770      	bx	lr

08003be4 <HAL_SPDIFRX_DMAStop>:
  * @retval None
  */
HAL_StatusTypeDef HAL_SPDIFRX_DMAStop(SPDIFRX_HandleTypeDef *hspdif)
{
  /* Process Locked */
  __HAL_LOCK(hspdif);
 8003be4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d02e      	beq.n	8003c4c <HAL_SPDIFRX_DMAStop+0x68>
{
 8003bee:	b510      	push	{r4, lr}
 8003bf0:	4604      	mov	r4, r0
  __HAL_LOCK(hspdif);
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44

  // JSB fix. 20191115. Otherwise the L&R channels can become reversed if the signal is interrupted.
  HAL_DMA_Abort(hspdif->hdmaDrRx); // JSB added!!!
 8003bf8:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003bfa:	f7fc fed1 	bl	80009a0 <HAL_DMA_Abort>
  HAL_DMA_Abort(hspdif->hdmaCsRx); // JSB added!!!
 8003bfe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003c00:	f7fc fece 	bl	80009a0 <HAL_DMA_Abort>

  /* Disable the SPDIFRX DMA requests */
  // hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN); // *** JSB: Cube bug!!! This unintentionally clears bits 4+ of CR. ***
  hspdif->Instance->CR &= (uint32_t)(~SPDIFRX_CR_RXDMAEN); // *** JSB: Cube bug fix!!! ***
 8003c04:	6822      	ldr	r2, [r4, #0]
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	6013      	str	r3, [r2, #0]
  // hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_CBDMAEN); // *** JSB: Cube bug!!! This unintentionally clears bits 4+ of CR. ***
  hspdif->Instance->CR &= (uint32_t)(~SPDIFRX_CR_CBDMAEN); // *** JSB: Cube bug fix!!! ***
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	6813      	ldr	r3, [r2, #0]
 8003c12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c16:	6013      	str	r3, [r2, #0]

  /* Disable the SPDIFRX DMA channel */
  if (hspdif->hdmaDrRx != NULL)
 8003c18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c1a:	b123      	cbz	r3, 8003c26 <HAL_SPDIFRX_DMAStop+0x42>
  {
    __HAL_DMA_DISABLE(hspdif->hdmaDrRx);
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	6813      	ldr	r3, [r2, #0]
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	6013      	str	r3, [r2, #0]
  }
  if (hspdif->hdmaCsRx != NULL)
 8003c26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003c28:	b123      	cbz	r3, 8003c34 <HAL_SPDIFRX_DMAStop+0x50>
  {
    __HAL_DMA_DISABLE(hspdif->hdmaCsRx);
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	6813      	ldr	r3, [r2, #0]
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	6013      	str	r3, [r2, #0]
  }

  /* Disable SPDIFRX peripheral */
  __HAL_SPDIFRX_IDLE(hspdif);
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	f023 0303 	bic.w	r3, r3, #3
 8003c3c:	6013      	str	r3, [r2, #0]

  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45

  /* Process Unlocked */
  __HAL_UNLOCK(hspdif);
 8003c44:	2000      	movs	r0, #0
 8003c46:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44

  return HAL_OK;
}
 8003c4a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hspdif);
 8003c4c:	2002      	movs	r0, #2
}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_SPDIFRX_RxHalfCpltCallback>:
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 8003c50:	4770      	bx	lr

08003c52 <SPDIFRX_DMARxHalfCplt>:
  * @brief DMA SPDIFRX receive process (Data flow) half complete callback
  * @param hdma DMA handle
  * @retval None
  */
static void SPDIFRX_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c52:	b508      	push	{r3, lr}
  SPDIFRX_HandleTypeDef *hspdif = (SPDIFRX_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
  hspdif->RxHalfCpltCallback(hspdif);
#else
  HAL_SPDIFRX_RxHalfCpltCallback(hspdif);
 8003c54:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003c56:	f7ff fffb 	bl	8003c50 <HAL_SPDIFRX_RxHalfCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
}
 8003c5a:	bd08      	pop	{r3, pc}

08003c5c <HAL_SPDIFRX_RxCpltCallback>:
}
 8003c5c:	4770      	bx	lr

08003c5e <SPDIFRX_DMARxCplt>:
{
 8003c5e:	b508      	push	{r3, lr}
 8003c60:	4603      	mov	r3, r0
  SPDIFRX_HandleTypeDef *hspdif = (SPDIFRX_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c62:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c6a:	d00b      	beq.n	8003c84 <SPDIFRX_DMARxCplt+0x26>
    hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN);
 8003c6c:	6802      	ldr	r2, [r0, #0]
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	6013      	str	r3, [r2, #0]
    hspdif->RxXferCount = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	86c3      	strh	r3, [r0, #54]	@ 0x36
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
  HAL_SPDIFRX_RxCpltCallback(hspdif);
 8003c84:	f7ff ffea 	bl	8003c5c <HAL_SPDIFRX_RxCpltCallback>
}
 8003c88:	bd08      	pop	{r3, pc}

08003c8a <SPDIFRX_ReceiveDataFlow_IT>:
  * @brief Receive an amount of data (Data Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 8003c8a:	b508      	push	{r3, lr}
  /* Receive data */
  (*hspdif->pRxBuffPtr) = hspdif->Instance->DR;
 8003c8c:	6802      	ldr	r2, [r0, #0]
 8003c8e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003c90:	6912      	ldr	r2, [r2, #16]
 8003c92:	601a      	str	r2, [r3, #0]
  hspdif->pRxBuffPtr++;
 8003c94:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003c96:	3304      	adds	r3, #4
 8003c98:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspdif->RxXferCount--;
 8003c9a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	86c3      	strh	r3, [r0, #54]	@ 0x36

  if (hspdif->RxXferCount == 0U)
 8003ca4:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	b103      	cbz	r3, 8003cac <SPDIFRX_ReceiveDataFlow_IT+0x22>
    hspdif->RxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_RxCpltCallback(hspdif);
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 8003caa:	bd08      	pop	{r3, pc}
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE | SPDIFRX_IT_PERRIE | SPDIFRX_IT_RXNE);
 8003cac:	6802      	ldr	r2, [r0, #0]
 8003cae:	6853      	ldr	r3, [r2, #4]
 8003cb0:	f023 030d 	bic.w	r3, r3, #13
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	0c1b      	lsrs	r3, r3, #16
 8003cb8:	6053      	str	r3, [r2, #4]
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
    __HAL_UNLOCK(hspdif);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
    HAL_SPDIFRX_RxCpltCallback(hspdif);
 8003cc6:	f7ff ffc9 	bl	8003c5c <HAL_SPDIFRX_RxCpltCallback>
}
 8003cca:	e7ee      	b.n	8003caa <SPDIFRX_ReceiveDataFlow_IT+0x20>

08003ccc <HAL_SPDIFRX_CxCpltCallback>:
}
 8003ccc:	4770      	bx	lr

08003cce <SPDIFRX_ReceiveControlFlow_IT>:
  * @brief Receive an amount of data (Control Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 8003cce:	b508      	push	{r3, lr}
  /* Receive data */
  (*hspdif->pCsBuffPtr) = hspdif->Instance->CSR;
 8003cd0:	6802      	ldr	r2, [r0, #0]
 8003cd2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003cd4:	6952      	ldr	r2, [r2, #20]
 8003cd6:	601a      	str	r2, [r3, #0]
  hspdif->pCsBuffPtr++;
 8003cd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003cda:	3304      	adds	r3, #4
 8003cdc:	6303      	str	r3, [r0, #48]	@ 0x30
  hspdif->CsXferCount--;
 8003cde:	8f43      	ldrh	r3, [r0, #58]	@ 0x3a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8743      	strh	r3, [r0, #58]	@ 0x3a

  if (hspdif->CsXferCount == 0U)
 8003ce8:	8f43      	ldrh	r3, [r0, #58]	@ 0x3a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	b103      	cbz	r3, 8003cf0 <SPDIFRX_ReceiveControlFlow_IT+0x22>
    hspdif->CxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_CxCpltCallback(hspdif);
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 8003cee:	bd08      	pop	{r3, pc}
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 8003cf0:	6802      	ldr	r2, [r0, #0]
 8003cf2:	6853      	ldr	r3, [r2, #4]
 8003cf4:	f023 0302 	bic.w	r3, r3, #2
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	0c1b      	lsrs	r3, r3, #16
 8003cfc:	6053      	str	r3, [r2, #4]
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
    __HAL_UNLOCK(hspdif);
 8003d04:	2300      	movs	r3, #0
 8003d06:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
    HAL_SPDIFRX_CxCpltCallback(hspdif);
 8003d0a:	f7ff ffdf 	bl	8003ccc <HAL_SPDIFRX_CxCpltCallback>
}
 8003d0e:	e7ee      	b.n	8003cee <SPDIFRX_ReceiveControlFlow_IT+0x20>

08003d10 <SPDIFRX_DMAError>:
{
 8003d10:	b508      	push	{r3, lr}
  SPDIFRX_HandleTypeDef *hspdif = (SPDIFRX_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d12:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspdif->Instance->CR &= (uint16_t)(~(SPDIFRX_CR_RXDMAEN | SPDIFRX_CR_CBDMAEN));
 8003d14:	6802      	ldr	r2, [r0, #0]
 8003d16:	6813      	ldr	r3, [r2, #0]
 8003d18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	6013      	str	r3, [r2, #0]
  hspdif->RxXferCount = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	86c3      	strh	r3, [r0, #54]	@ 0x36
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
  hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_DMA;
 8003d30:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003d32:	f043 0308 	orr.w	r3, r3, #8
 8003d36:	6483      	str	r3, [r0, #72]	@ 0x48
  HAL_SPDIFRX_ErrorCallback(hspdif);
 8003d38:	f005 fb52 	bl	80093e0 <HAL_SPDIFRX_ErrorCallback>
}
 8003d3c:	bd08      	pop	{r3, pc}

08003d3e <HAL_SPDIFRX_IRQHandler>:
{
 8003d3e:	b570      	push	{r4, r5, r6, lr}
 8003d40:	4604      	mov	r4, r0
  uint32_t itFlag   = hspdif->Instance->SR;
 8003d42:	6803      	ldr	r3, [r0, #0]
 8003d44:	689d      	ldr	r5, [r3, #8]
  uint32_t itSource = hspdif->Instance->IMR;
 8003d46:	685e      	ldr	r6, [r3, #4]
  if (((itFlag & SPDIFRX_FLAG_RXNE) == SPDIFRX_FLAG_RXNE) && ((itSource &  SPDIFRX_IT_RXNE) == SPDIFRX_IT_RXNE))
 8003d48:	f015 0f01 	tst.w	r5, #1
 8003d4c:	d002      	beq.n	8003d54 <HAL_SPDIFRX_IRQHandler+0x16>
 8003d4e:	f016 0f01 	tst.w	r6, #1
 8003d52:	d112      	bne.n	8003d7a <HAL_SPDIFRX_IRQHandler+0x3c>
  if (((itFlag & SPDIFRX_FLAG_CSRNE) == SPDIFRX_FLAG_CSRNE) && ((itSource &  SPDIFRX_IT_CSRNE) == SPDIFRX_IT_CSRNE))
 8003d54:	f015 0f02 	tst.w	r5, #2
 8003d58:	d002      	beq.n	8003d60 <HAL_SPDIFRX_IRQHandler+0x22>
 8003d5a:	f016 0f02 	tst.w	r6, #2
 8003d5e:	d111      	bne.n	8003d84 <HAL_SPDIFRX_IRQHandler+0x46>
  if (((itFlag & SPDIFRX_FLAG_OVR) == SPDIFRX_FLAG_OVR) && ((itSource &  SPDIFRX_IT_OVRIE) == SPDIFRX_IT_OVRIE))
 8003d60:	f015 0f08 	tst.w	r5, #8
 8003d64:	d002      	beq.n	8003d6c <HAL_SPDIFRX_IRQHandler+0x2e>
 8003d66:	f016 0f08 	tst.w	r6, #8
 8003d6a:	d112      	bne.n	8003d92 <HAL_SPDIFRX_IRQHandler+0x54>
  if (((itFlag & SPDIFRX_FLAG_PERR) == SPDIFRX_FLAG_PERR) && ((itSource &  SPDIFRX_IT_PERRIE) == SPDIFRX_IT_PERRIE))
 8003d6c:	f015 0f04 	tst.w	r5, #4
 8003d70:	d002      	beq.n	8003d78 <HAL_SPDIFRX_IRQHandler+0x3a>
 8003d72:	f016 0f04 	tst.w	r6, #4
 8003d76:	d117      	bne.n	8003da8 <HAL_SPDIFRX_IRQHandler+0x6a>
}
 8003d78:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveDataFlow_IT(hspdif);
 8003d7e:	f7ff ff84 	bl	8003c8a <SPDIFRX_ReceiveDataFlow_IT>
 8003d82:	e7e7      	b.n	8003d54 <HAL_SPDIFRX_IRQHandler+0x16>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_CSRNE);
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	2202      	movs	r2, #2
 8003d88:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveControlFlow_IT(hspdif);
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff ff9f 	bl	8003cce <SPDIFRX_ReceiveControlFlow_IT>
 8003d90:	e7e6      	b.n	8003d60 <HAL_SPDIFRX_IRQHandler+0x22>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_OVRIE);
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	2208      	movs	r2, #8
 8003d96:	60da      	str	r2, [r3, #12]
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
 8003d98:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003d9a:	f043 0302 	orr.w	r3, r3, #2
 8003d9e:	64a3      	str	r3, [r4, #72]	@ 0x48
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8003da0:	4620      	mov	r0, r4
 8003da2:	f005 fb1d 	bl	80093e0 <HAL_SPDIFRX_ErrorCallback>
 8003da6:	e7e1      	b.n	8003d6c <HAL_SPDIFRX_IRQHandler+0x2e>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_PERRIE);
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	2204      	movs	r2, #4
 8003dac:	60da      	str	r2, [r3, #12]
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
 8003dae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003db0:	4313      	orrs	r3, r2
 8003db2:	64a3      	str	r3, [r4, #72]	@ 0x48
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8003db4:	4620      	mov	r0, r4
 8003db6:	f005 fb13 	bl	80093e0 <HAL_SPDIFRX_ErrorCallback>
}
 8003dba:	e7dd      	b.n	8003d78 <HAL_SPDIFRX_IRQHandler+0x3a>

08003dbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	4688      	mov	r8, r1
 8003dc6:	4617      	mov	r7, r2
 8003dc8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dca:	f7fc fc4f 	bl	800066c <HAL_GetTick>
 8003dce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003dd0:	1a1b      	subs	r3, r3, r0
 8003dd2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003dd6:	f7fc fc49 	bl	800066c <HAL_GetTick>
 8003dda:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ddc:	4b28      	ldr	r3, [pc, #160]	@ (8003e80 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003de4:	fb09 f303 	mul.w	r3, r9, r3
 8003de8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dea:	682b      	ldr	r3, [r5, #0]
 8003dec:	689c      	ldr	r4, [r3, #8]
 8003dee:	ea38 0404 	bics.w	r4, r8, r4
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	42bb      	cmp	r3, r7
 8003dfa:	d03d      	beq.n	8003e78 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dfc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8003e00:	d0f3      	beq.n	8003dea <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e02:	f7fc fc33 	bl	800066c <HAL_GetTick>
 8003e06:	eba0 000a 	sub.w	r0, r0, sl
 8003e0a:	4548      	cmp	r0, r9
 8003e0c:	d203      	bcs.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0x5a>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e0e:	9b01      	ldr	r3, [sp, #4]
 8003e10:	bb73      	cbnz	r3, 8003e70 <SPI_WaitFlagStateUntilTimeout+0xb4>
      {
        tmp_timeout = 0U;
 8003e12:	4699      	mov	r9, r3
 8003e14:	e7e9      	b.n	8003dea <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e16:	682a      	ldr	r2, [r5, #0]
 8003e18:	6853      	ldr	r3, [r2, #4]
 8003e1a:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003e1e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e20:	686b      	ldr	r3, [r5, #4]
 8003e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e26:	d00b      	beq.n	8003e40 <SPI_WaitFlagStateUntilTimeout+0x84>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e28:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2e:	d014      	beq.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003e36:	2300      	movs	r3, #0
 8003e38:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003e3c:	2003      	movs	r0, #3
 8003e3e:	e01c      	b.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e40:	68ab      	ldr	r3, [r5, #8]
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e46:	bf18      	it	ne
 8003e48:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8003e4c:	d1ec      	bne.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8003e4e:	682a      	ldr	r2, [r5, #0]
 8003e50:	6813      	ldr	r3, [r2, #0]
 8003e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	e7e6      	b.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0x6c>
          SPI_RESET_CRC(hspi);
 8003e5a:	682a      	ldr	r2, [r5, #0]
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	682a      	ldr	r2, [r5, #0]
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e7df      	b.n	8003e30 <SPI_WaitFlagStateUntilTimeout+0x74>
      }
      else
      {
        count--;
 8003e70:	9b01      	ldr	r3, [sp, #4]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	e7b8      	b.n	8003dea <SPI_WaitFlagStateUntilTimeout+0x2e>
      }
    }
  }

  return HAL_OK;
 8003e78:	2000      	movs	r0, #0
}
 8003e7a:	b002      	add	sp, #8
 8003e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e80:	200003fc 	.word	0x200003fc

08003e84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	460d      	mov	r5, r1
 8003e8e:	4614      	mov	r4, r2
 8003e90:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e98:	f7fc fbe8 	bl	800066c <HAL_GetTick>
 8003e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e9e:	1a1b      	subs	r3, r3, r0
 8003ea0:	eb03 0907 	add.w	r9, r3, r7
  tmp_tickstart = HAL_GetTick();
 8003ea4:	f7fc fbe2 	bl	800066c <HAL_GetTick>
 8003ea8:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003eaa:	f8d6 8000 	ldr.w	r8, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003eae:	4b30      	ldr	r3, [pc, #192]	@ (8003f70 <SPI_WaitFifoStateUntilTimeout+0xec>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003eb6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003eba:	0d1b      	lsrs	r3, r3, #20
 8003ebc:	fb09 f303 	mul.w	r3, r9, r3
 8003ec0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ec2:	e002      	b.n	8003eca <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 8003ec8:	d112      	bne.n	8003ef0 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8003eca:	6833      	ldr	r3, [r6, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	ea03 0c05 	and.w	ip, r3, r5
 8003ed2:	45a4      	cmp	ip, r4
 8003ed4:	d047      	beq.n	8003f66 <SPI_WaitFifoStateUntilTimeout+0xe2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ed6:	f5b5 6fc0 	cmp.w	r5, #1536	@ 0x600
 8003eda:	bf08      	it	eq
 8003edc:	2c00      	cmpeq	r4, #0
 8003ede:	d1f1      	bne.n	8003ec4 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8003ee0:	f898 300c 	ldrb.w	r3, [r8, #12]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003eea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003eee:	e7e9      	b.n	8003ec4 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ef0:	f7fc fbbc 	bl	800066c <HAL_GetTick>
 8003ef4:	eba0 000a 	sub.w	r0, r0, sl
 8003ef8:	4548      	cmp	r0, r9
 8003efa:	d203      	bcs.n	8003f04 <SPI_WaitFifoStateUntilTimeout+0x80>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003efc:	9b01      	ldr	r3, [sp, #4]
 8003efe:	bb73      	cbnz	r3, 8003f5e <SPI_WaitFifoStateUntilTimeout+0xda>
      {
        tmp_timeout = 0U;
 8003f00:	4699      	mov	r9, r3
 8003f02:	e7e2      	b.n	8003eca <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f04:	6832      	ldr	r2, [r6, #0]
 8003f06:	6853      	ldr	r3, [r2, #4]
 8003f08:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003f0c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f0e:	6873      	ldr	r3, [r6, #4]
 8003f10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f14:	d00b      	beq.n	8003f2e <SPI_WaitFifoStateUntilTimeout+0xaa>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f16:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8003f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1c:	d014      	beq.n	8003f48 <SPI_WaitFifoStateUntilTimeout+0xc4>
        hspi->State = HAL_SPI_STATE_READY;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f886 305d 	strb.w	r3, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003f24:	2300      	movs	r3, #0
 8003f26:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003f2a:	2003      	movs	r0, #3
 8003f2c:	e01c      	b.n	8003f68 <SPI_WaitFifoStateUntilTimeout+0xe4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f2e:	68b3      	ldr	r3, [r6, #8]
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f34:	bf18      	it	ne
 8003f36:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8003f3a:	d1ec      	bne.n	8003f16 <SPI_WaitFifoStateUntilTimeout+0x92>
          __HAL_SPI_DISABLE(hspi);
 8003f3c:	6832      	ldr	r2, [r6, #0]
 8003f3e:	6813      	ldr	r3, [r2, #0]
 8003f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e7e6      	b.n	8003f16 <SPI_WaitFifoStateUntilTimeout+0x92>
          SPI_RESET_CRC(hspi);
 8003f48:	6832      	ldr	r2, [r6, #0]
 8003f4a:	6813      	ldr	r3, [r2, #0]
 8003f4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	6832      	ldr	r2, [r6, #0]
 8003f54:	6813      	ldr	r3, [r2, #0]
 8003f56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e7df      	b.n	8003f1e <SPI_WaitFifoStateUntilTimeout+0x9a>
      }
      else
      {
        count--;
 8003f5e:	9b01      	ldr	r3, [sp, #4]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	e7b1      	b.n	8003eca <SPI_WaitFifoStateUntilTimeout+0x46>
      }
    }
  }

  return HAL_OK;
 8003f66:	2000      	movs	r0, #0
}
 8003f68:	b002      	add	sp, #8
 8003f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f6e:	bf00      	nop
 8003f70:	200003fc 	.word	0x200003fc

08003f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	4604      	mov	r4, r0
 8003f7a:	460d      	mov	r5, r1
 8003f7c:	4616      	mov	r6, r2
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f7e:	9200      	str	r2, [sp, #0]
 8003f80:	460b      	mov	r3, r1
 8003f82:	2200      	movs	r2, #0
 8003f84:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f88:	f7ff ff7c 	bl	8003e84 <SPI_WaitFifoStateUntilTimeout>
 8003f8c:	bb18      	cbnz	r0, 8003fd6 <SPI_EndRxTxTransaction+0x62>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <SPI_EndRxTxTransaction+0x98>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1f      	ldr	r2, [pc, #124]	@ (8004010 <SPI_EndRxTxTransaction+0x9c>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	0d5b      	lsrs	r3, r3, #21
 8003f9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa4:	6863      	ldr	r3, [r4, #4]
 8003fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003faa:	d01a      	beq.n	8003fe2 <SPI_EndRxTxTransaction+0x6e>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fac:	9b03      	ldr	r3, [sp, #12]
 8003fae:	b13b      	cbz	r3, 8003fc0 <SPI_EndRxTxTransaction+0x4c>
      {
        break;
      }
      count--;
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003fbe:	d1f5      	bne.n	8003fac <SPI_EndRxTxTransaction+0x38>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fc0:	9600      	str	r6, [sp, #0]
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7ff ff5a 	bl	8003e84 <SPI_WaitFifoStateUntilTimeout>
 8003fd0:	b9b0      	cbnz	r0, 8004000 <SPI_EndRxTxTransaction+0x8c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8003fd2:	b004      	add	sp, #16
 8003fd4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003fd8:	f043 0320 	orr.w	r3, r3, #32
 8003fdc:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fde:	2003      	movs	r0, #3
 8003fe0:	e7f7      	b.n	8003fd2 <SPI_EndRxTxTransaction+0x5e>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe2:	9600      	str	r6, [sp, #0]
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2180      	movs	r1, #128	@ 0x80
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff fee6 	bl	8003dbc <SPI_WaitFlagStateUntilTimeout>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d0e5      	beq.n	8003fc0 <SPI_EndRxTxTransaction+0x4c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003ff6:	f043 0320 	orr.w	r3, r3, #32
 8003ffa:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003ffc:	2003      	movs	r0, #3
 8003ffe:	e7e8      	b.n	8003fd2 <SPI_EndRxTxTransaction+0x5e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004000:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004002:	f043 0320 	orr.w	r3, r3, #32
 8004006:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004008:	2003      	movs	r0, #3
 800400a:	e7e2      	b.n	8003fd2 <SPI_EndRxTxTransaction+0x5e>
 800400c:	200003fc 	.word	0x200003fc
 8004010:	165e9f81 	.word	0x165e9f81

08004014 <SPI_EndRxTransaction>:
{
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	4604      	mov	r4, r0
 800401a:	460d      	mov	r5, r1
 800401c:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800401e:	6843      	ldr	r3, [r0, #4]
 8004020:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004024:	d01f      	beq.n	8004066 <SPI_EndRxTransaction+0x52>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004026:	6863      	ldr	r3, [r4, #4]
 8004028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800402c:	d028      	beq.n	8004080 <SPI_EndRxTransaction+0x6c>
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800402e:	4b28      	ldr	r3, [pc, #160]	@ (80040d0 <SPI_EndRxTransaction+0xbc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a28      	ldr	r2, [pc, #160]	@ (80040d4 <SPI_EndRxTransaction+0xc0>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	0d5b      	lsrs	r3, r3, #21
 800403a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	9303      	str	r3, [sp, #12]
      if (count == 0U)
 8004044:	9b03      	ldr	r3, [sp, #12]
 8004046:	b13b      	cbz	r3, 8004058 <SPI_EndRxTransaction+0x44>
      count--;
 8004048:	9b03      	ldr	r3, [sp, #12]
 800404a:	3b01      	subs	r3, #1
 800404c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800404e:	6820      	ldr	r0, [r4, #0]
 8004050:	6880      	ldr	r0, [r0, #8]
 8004052:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8004056:	d1f5      	bne.n	8004044 <SPI_EndRxTransaction+0x30>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004058:	6863      	ldr	r3, [r4, #4]
 800405a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800405e:	d01e      	beq.n	800409e <SPI_EndRxTransaction+0x8a>
  return HAL_OK;
 8004060:	2000      	movs	r0, #0
}
 8004062:	b004      	add	sp, #16
 8004064:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004066:	6883      	ldr	r3, [r0, #8]
 8004068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406c:	bf18      	it	ne
 800406e:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8004072:	d1d8      	bne.n	8004026 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8004074:	6802      	ldr	r2, [r0, #0]
 8004076:	6813      	ldr	r3, [r2, #0]
 8004078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e7d2      	b.n	8004026 <SPI_EndRxTransaction+0x12>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004080:	9600      	str	r6, [sp, #0]
 8004082:	462b      	mov	r3, r5
 8004084:	2200      	movs	r2, #0
 8004086:	2180      	movs	r1, #128	@ 0x80
 8004088:	4620      	mov	r0, r4
 800408a:	f7ff fe97 	bl	8003dbc <SPI_WaitFlagStateUntilTimeout>
 800408e:	2800      	cmp	r0, #0
 8004090:	d0e2      	beq.n	8004058 <SPI_EndRxTransaction+0x44>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004092:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004094:	f043 0320 	orr.w	r3, r3, #32
 8004098:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 800409a:	2003      	movs	r0, #3
 800409c:	e7e1      	b.n	8004062 <SPI_EndRxTransaction+0x4e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800409e:	68a3      	ldr	r3, [r4, #8]
 80040a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a4:	bf18      	it	ne
 80040a6:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 80040aa:	d001      	beq.n	80040b0 <SPI_EndRxTransaction+0x9c>
  return HAL_OK;
 80040ac:	2000      	movs	r0, #0
 80040ae:	e7d8      	b.n	8004062 <SPI_EndRxTransaction+0x4e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040b0:	9600      	str	r6, [sp, #0]
 80040b2:	462b      	mov	r3, r5
 80040b4:	2200      	movs	r2, #0
 80040b6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80040ba:	4620      	mov	r0, r4
 80040bc:	f7ff fee2 	bl	8003e84 <SPI_WaitFifoStateUntilTimeout>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d0ce      	beq.n	8004062 <SPI_EndRxTransaction+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80040c6:	f043 0320 	orr.w	r3, r3, #32
 80040ca:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 80040cc:	2003      	movs	r0, #3
 80040ce:	e7c8      	b.n	8004062 <SPI_EndRxTransaction+0x4e>
 80040d0:	200003fc 	.word	0x200003fc
 80040d4:	165e9f81 	.word	0x165e9f81

080040d8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80040d8:	2800      	cmp	r0, #0
 80040da:	d06f      	beq.n	80041bc <HAL_SPI_Init+0xe4>
{
 80040dc:	b510      	push	{r4, lr}
 80040de:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040e0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80040e2:	b933      	cbnz	r3, 80040f2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040e4:	6843      	ldr	r3, [r0, #4]
 80040e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ea:	d005      	beq.n	80040f8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61c3      	str	r3, [r0, #28]
 80040f0:	e002      	b.n	80040f8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040f2:	2300      	movs	r3, #0
 80040f4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040f6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80040fc:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004100:	2b00      	cmp	r3, #0
 8004102:	d052      	beq.n	80041aa <HAL_SPI_Init+0xd2>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004104:	2302      	movs	r3, #2
 8004106:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	6813      	ldr	r3, [r2, #0]
 800410e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004112:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004114:	68e3      	ldr	r3, [r4, #12]
 8004116:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800411a:	d94c      	bls.n	80041b6 <HAL_SPI_Init+0xde>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800411c:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800411e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004122:	bf18      	it	ne
 8004124:	f5b3 6fe0 	cmpne.w	r3, #1792	@ 0x700
 8004128:	d001      	beq.n	800412e <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800412a:	2300      	movs	r3, #0
 800412c:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800412e:	6863      	ldr	r3, [r4, #4]
 8004130:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8004134:	68a1      	ldr	r1, [r4, #8]
 8004136:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 800413a:	430b      	orrs	r3, r1
 800413c:	6921      	ldr	r1, [r4, #16]
 800413e:	f001 0102 	and.w	r1, r1, #2
 8004142:	430b      	orrs	r3, r1
 8004144:	6961      	ldr	r1, [r4, #20]
 8004146:	f001 0101 	and.w	r1, r1, #1
 800414a:	430b      	orrs	r3, r1
 800414c:	69a1      	ldr	r1, [r4, #24]
 800414e:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8004152:	430b      	orrs	r3, r1
 8004154:	69e1      	ldr	r1, [r4, #28]
 8004156:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 800415a:	430b      	orrs	r3, r1
 800415c:	6a21      	ldr	r1, [r4, #32]
 800415e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8004162:	430b      	orrs	r3, r1
 8004164:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004166:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 800416a:	6820      	ldr	r0, [r4, #0]
 800416c:	430b      	orrs	r3, r1
 800416e:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004170:	8b63      	ldrh	r3, [r4, #26]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004178:	f001 0110 	and.w	r1, r1, #16
 800417c:	430b      	orrs	r3, r1
 800417e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004180:	f001 0108 	and.w	r1, r1, #8
 8004184:	430b      	orrs	r3, r1
 8004186:	68e1      	ldr	r1, [r4, #12]
 8004188:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800418c:	430b      	orrs	r3, r1
 800418e:	6821      	ldr	r1, [r4, #0]
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004194:	6822      	ldr	r2, [r4, #0]
 8004196:	69d3      	ldr	r3, [r2, #28]
 8004198:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800419c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800419e:	2000      	movs	r0, #0
 80041a0:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 80041a8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80041aa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80041ae:	4620      	mov	r0, r4
 80041b0:	f00a fe54 	bl	800ee5c <HAL_SPI_MspInit>
 80041b4:	e7a6      	b.n	8004104 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80041ba:	e7b0      	b.n	800411e <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80041bc:	2001      	movs	r0, #1
}
 80041be:	4770      	bx	lr

080041c0 <HAL_SPI_Transmit>:
{
 80041c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041c4:	b083      	sub	sp, #12
 80041c6:	4604      	mov	r4, r0
 80041c8:	4689      	mov	r9, r1
 80041ca:	4690      	mov	r8, r2
 80041cc:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 80041ce:	f7fc fa4d 	bl	800066c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80041d2:	f894 605d 	ldrb.w	r6, [r4, #93]	@ 0x5d
 80041d6:	b2f6      	uxtb	r6, r6
 80041d8:	2e01      	cmp	r6, #1
 80041da:	f040 80ee 	bne.w	80043ba <HAL_SPI_Transmit+0x1fa>
 80041de:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 80041e0:	f1b8 0f00 	cmp.w	r8, #0
 80041e4:	bf18      	it	ne
 80041e6:	f1b9 0f00 	cmpne.w	r9, #0
 80041ea:	f000 80e7 	beq.w	80043bc <HAL_SPI_Transmit+0x1fc>
  __HAL_LOCK(hspi);
 80041ee:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	f000 80e6 	beq.w	80043c4 <HAL_SPI_Transmit+0x204>
 80041f8:	2301      	movs	r3, #1
 80041fa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041fe:	2303      	movs	r3, #3
 8004200:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004204:	2300      	movs	r3, #0
 8004206:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004208:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800420c:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004210:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004214:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004216:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800421a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800421e:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004220:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004222:	68a3      	ldr	r3, [r4, #8]
 8004224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004228:	d01e      	beq.n	8004268 <HAL_SPI_Transmit+0xa8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004232:	d103      	bne.n	800423c <HAL_SPI_Transmit+0x7c>
    __HAL_SPI_ENABLE(hspi);
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800423a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800423c:	68e3      	ldr	r3, [r4, #12]
 800423e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004242:	d947      	bls.n	80042d4 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004244:	6863      	ldr	r3, [r4, #4]
 8004246:	b113      	cbz	r3, 800424e <HAL_SPI_Transmit+0x8e>
 8004248:	f1b8 0f01 	cmp.w	r8, #1
 800424c:	d127      	bne.n	800429e <HAL_SPI_Transmit+0xde>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800424e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	8812      	ldrh	r2, [r2, #0]
 8004254:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004256:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004258:	3302      	adds	r3, #2
 800425a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800425c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29b      	uxth	r3, r3
 8004264:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004266:	e01a      	b.n	800429e <HAL_SPI_Transmit+0xde>
    __HAL_SPI_DISABLE(hspi);
 8004268:	6822      	ldr	r2, [r4, #0]
 800426a:	6813      	ldr	r3, [r2, #0]
 800426c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004270:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004272:	6822      	ldr	r2, [r4, #0]
 8004274:	6813      	ldr	r3, [r2, #0]
 8004276:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	e7d5      	b.n	800422a <HAL_SPI_Transmit+0x6a>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800427e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004280:	8812      	ldrh	r2, [r2, #0]
 8004282:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004284:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004286:	3302      	adds	r3, #2
 8004288:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800428a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 800428e:	fa1f fc8c 	uxth.w	ip, ip
 8004292:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004296:	fa1f fc8c 	uxth.w	ip, ip
 800429a:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800429e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d06e      	beq.n	8004384 <HAL_SPI_Transmit+0x1c4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	f012 0f02 	tst.w	r2, #2
 80042ae:	d1e6      	bne.n	800427e <HAL_SPI_Transmit+0xbe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042b0:	f7fc f9dc 	bl	800066c <HAL_GetTick>
 80042b4:	1bc0      	subs	r0, r0, r7
 80042b6:	42a8      	cmp	r0, r5
 80042b8:	d302      	bcc.n	80042c0 <HAL_SPI_Transmit+0x100>
 80042ba:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80042be:	d101      	bne.n	80042c4 <HAL_SPI_Transmit+0x104>
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	d1ec      	bne.n	800429e <HAL_SPI_Transmit+0xde>
          hspi->State = HAL_SPI_STATE_READY;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80042ca:	2300      	movs	r3, #0
 80042cc:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80042d0:	2603      	movs	r6, #3
 80042d2:	e073      	b.n	80043bc <HAL_SPI_Transmit+0x1fc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d4:	6863      	ldr	r3, [r4, #4]
 80042d6:	b113      	cbz	r3, 80042de <HAL_SPI_Transmit+0x11e>
 80042d8:	f1b8 0f01 	cmp.w	r8, #1
 80042dc:	d132      	bne.n	8004344 <HAL_SPI_Transmit+0x184>
      if (hspi->TxXferCount > 1U)
 80042de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d90c      	bls.n	8004300 <HAL_SPI_Transmit+0x140>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042e6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	8812      	ldrh	r2, [r2, #0]
 80042ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80042f0:	3302      	adds	r3, #2
 80042f2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80042f4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b02      	subs	r3, #2
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80042fe:	e021      	b.n	8004344 <HAL_SPI_Transmit+0x184>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004300:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	7812      	ldrb	r2, [r2, #0]
 8004306:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8004308:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800430a:	3301      	adds	r3, #1
 800430c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800430e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29b      	uxth	r3, r3
 8004316:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004318:	e014      	b.n	8004344 <HAL_SPI_Transmit+0x184>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800431a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004320:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004322:	3301      	adds	r3, #1
 8004324:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8004326:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29b      	uxth	r3, r3
 800432e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004330:	e008      	b.n	8004344 <HAL_SPI_Transmit+0x184>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004332:	f7fc f99b 	bl	800066c <HAL_GetTick>
 8004336:	1bc0      	subs	r0, r0, r7
 8004338:	42a8      	cmp	r0, r5
 800433a:	d302      	bcc.n	8004342 <HAL_SPI_Transmit+0x182>
 800433c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8004340:	d118      	bne.n	8004374 <HAL_SPI_Transmit+0x1b4>
 8004342:	b1bd      	cbz	r5, 8004374 <HAL_SPI_Transmit+0x1b4>
    while (hspi->TxXferCount > 0U)
 8004344:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004346:	b29b      	uxth	r3, r3
 8004348:	b1e3      	cbz	r3, 8004384 <HAL_SPI_Transmit+0x1c4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	6893      	ldr	r3, [r2, #8]
 800434e:	f013 0f02 	tst.w	r3, #2
 8004352:	d0ee      	beq.n	8004332 <HAL_SPI_Transmit+0x172>
        if (hspi->TxXferCount > 1U)
 8004354:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d9de      	bls.n	800431a <HAL_SPI_Transmit+0x15a>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800435c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004362:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004364:	3302      	adds	r3, #2
 8004366:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004368:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b02      	subs	r3, #2
 800436e:	b29b      	uxth	r3, r3
 8004370:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004372:	e7e7      	b.n	8004344 <HAL_SPI_Transmit+0x184>
          hspi->State = HAL_SPI_STATE_READY;
 8004374:	2301      	movs	r3, #1
 8004376:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800437a:	2300      	movs	r3, #0
 800437c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004380:	2603      	movs	r6, #3
 8004382:	e01b      	b.n	80043bc <HAL_SPI_Transmit+0x1fc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004384:	463a      	mov	r2, r7
 8004386:	4629      	mov	r1, r5
 8004388:	4620      	mov	r0, r4
 800438a:	f7ff fdf3 	bl	8003f74 <SPI_EndRxTxTransaction>
 800438e:	b108      	cbz	r0, 8004394 <HAL_SPI_Transmit+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004390:	2320      	movs	r3, #32
 8004392:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004394:	68a3      	ldr	r3, [r4, #8]
 8004396:	b933      	cbnz	r3, 80043a6 <HAL_SPI_Transmit+0x1e6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	9201      	str	r2, [sp, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80043ac:	2300      	movs	r3, #0
 80043ae:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043b2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80043b4:	b913      	cbnz	r3, 80043bc <HAL_SPI_Transmit+0x1fc>
    return HAL_OK;
 80043b6:	2600      	movs	r6, #0
 80043b8:	e000      	b.n	80043bc <HAL_SPI_Transmit+0x1fc>
    return HAL_BUSY;
 80043ba:	2602      	movs	r6, #2
}
 80043bc:	4630      	mov	r0, r6
 80043be:	b003      	add	sp, #12
 80043c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80043c4:	2602      	movs	r6, #2
 80043c6:	e7f9      	b.n	80043bc <HAL_SPI_Transmit+0x1fc>

080043c8 <HAL_SPI_TransmitReceive>:
{
 80043c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043cc:	4604      	mov	r4, r0
 80043ce:	4688      	mov	r8, r1
 80043d0:	4691      	mov	r9, r2
 80043d2:	461f      	mov	r7, r3
 80043d4:	9d08      	ldr	r5, [sp, #32]
  tickstart = HAL_GetTick();
 80043d6:	f7fc f949 	bl	800066c <HAL_GetTick>
 80043da:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80043dc:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80043e0:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80043e2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d00a      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x36>
 80043e8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80043ec:	f040 815b 	bne.w	80046a6 <HAL_SPI_TransmitReceive+0x2de>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80043f0:	68a2      	ldr	r2, [r4, #8]
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	f040 815a 	bne.w	80046ac <HAL_SPI_TransmitReceive+0x2e4>
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	f040 8159 	bne.w	80046b0 <HAL_SPI_TransmitReceive+0x2e8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043fe:	f1b9 0f00 	cmp.w	r9, #0
 8004402:	bf18      	it	ne
 8004404:	f1b8 0f00 	cmpne.w	r8, #0
 8004408:	f000 8154 	beq.w	80046b4 <HAL_SPI_TransmitReceive+0x2ec>
 800440c:	2f00      	cmp	r7, #0
 800440e:	f000 8153 	beq.w	80046b8 <HAL_SPI_TransmitReceive+0x2f0>
  __HAL_LOCK(hspi);
 8004412:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8004416:	2b01      	cmp	r3, #1
 8004418:	f000 8150 	beq.w	80046bc <HAL_SPI_TransmitReceive+0x2f4>
 800441c:	2301      	movs	r3, #1
 800441e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004422:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b04      	cmp	r3, #4
 800442a:	d002      	beq.n	8004432 <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800442c:	2305      	movs	r3, #5
 800442e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004432:	2300      	movs	r3, #0
 8004434:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004436:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800443a:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800443e:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004442:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004446:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004448:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 800444a:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800444c:	6523      	str	r3, [r4, #80]	@ 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800444e:	68e3      	ldr	r3, [r4, #12]
 8004450:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004454:	d801      	bhi.n	800445a <HAL_SPI_TransmitReceive+0x92>
 8004456:	2f01      	cmp	r7, #1
 8004458:	d923      	bls.n	80044a2 <HAL_SPI_TransmitReceive+0xda>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	6853      	ldr	r3, [r2, #4]
 800445e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004462:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800446c:	d103      	bne.n	8004476 <HAL_SPI_TransmitReceive+0xae>
    __HAL_SPI_ENABLE(hspi);
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004474:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004476:	68e3      	ldr	r3, [r4, #12]
 8004478:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800447c:	d95f      	bls.n	800453e <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800447e:	6863      	ldr	r3, [r4, #4]
 8004480:	b10b      	cbz	r3, 8004486 <HAL_SPI_TransmitReceive+0xbe>
 8004482:	2f01      	cmp	r7, #1
 8004484:	d10b      	bne.n	800449e <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004486:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	8812      	ldrh	r2, [r2, #0]
 800448c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800448e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004490:	3302      	adds	r3, #2
 8004492:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8004494:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29b      	uxth	r3, r3
 800449c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800449e:	2701      	movs	r7, #1
 80044a0:	e030      	b.n	8004504 <HAL_SPI_TransmitReceive+0x13c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044a2:	6822      	ldr	r2, [r4, #0]
 80044a4:	6853      	ldr	r3, [r2, #4]
 80044a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044aa:	6053      	str	r3, [r2, #4]
 80044ac:	e7da      	b.n	8004464 <HAL_SPI_TransmitReceive+0x9c>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044ae:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80044b0:	8812      	ldrh	r2, [r2, #0]
 80044b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80044b6:	3302      	adds	r3, #2
 80044b8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80044ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80044c4:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	f012 0f01 	tst.w	r2, #1
 80044ce:	d011      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x12c>
 80044d0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80044d4:	b292      	uxth	r2, r2
 80044d6:	b16a      	cbz	r2, 80044f4 <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044e0:	3302      	adds	r3, #2
 80044e2:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80044e4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80044f2:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044f4:	f7fc f8ba 	bl	800066c <HAL_GetTick>
 80044f8:	1b83      	subs	r3, r0, r6
 80044fa:	42ab      	cmp	r3, r5
 80044fc:	d302      	bcc.n	8004504 <HAL_SPI_TransmitReceive+0x13c>
 80044fe:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8004502:	d114      	bne.n	800452e <HAL_SPI_TransmitReceive+0x166>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004504:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004506:	b29b      	uxth	r3, r3
 8004508:	b92b      	cbnz	r3, 8004516 <HAL_SPI_TransmitReceive+0x14e>
 800450a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80b1 	beq.w	8004678 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	f012 0f02 	tst.w	r2, #2
 800451e:	d0d2      	beq.n	80044c6 <HAL_SPI_TransmitReceive+0xfe>
 8004520:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004522:	b292      	uxth	r2, r2
 8004524:	2a00      	cmp	r2, #0
 8004526:	d0ce      	beq.n	80044c6 <HAL_SPI_TransmitReceive+0xfe>
 8004528:	2f00      	cmp	r7, #0
 800452a:	d0cc      	beq.n	80044c6 <HAL_SPI_TransmitReceive+0xfe>
 800452c:	e7bf      	b.n	80044ae <HAL_SPI_TransmitReceive+0xe6>
        hspi->State = HAL_SPI_STATE_READY;
 800452e:	2301      	movs	r3, #1
 8004530:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004534:	2300      	movs	r3, #0
 8004536:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800453a:	2003      	movs	r0, #3
 800453c:	e0b4      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x2e0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800453e:	6863      	ldr	r3, [r4, #4]
 8004540:	b10b      	cbz	r3, 8004546 <HAL_SPI_TransmitReceive+0x17e>
 8004542:	2f01      	cmp	r7, #1
 8004544:	d10f      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x19e>
      if (hspi->TxXferCount > 1U)
 8004546:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d90d      	bls.n	800456a <HAL_SPI_TransmitReceive+0x1a2>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800454e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	8812      	ldrh	r2, [r2, #0]
 8004554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004556:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004558:	3302      	adds	r3, #2
 800455a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800455c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b02      	subs	r3, #2
 8004562:	b29b      	uxth	r3, r3
 8004564:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004566:	2701      	movs	r7, #1
 8004568:	e049      	b.n	80045fe <HAL_SPI_TransmitReceive+0x236>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800456a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	7812      	ldrb	r2, [r2, #0]
 8004570:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004572:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004574:	3301      	adds	r3, #1
 8004576:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004578:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29b      	uxth	r3, r3
 8004580:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004582:	e7f0      	b.n	8004566 <HAL_SPI_TransmitReceive+0x19e>
        if (hspi->TxXferCount > 1U)
 8004584:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004586:	b292      	uxth	r2, r2
 8004588:	2a01      	cmp	r2, #1
 800458a:	d90c      	bls.n	80045a6 <HAL_SPI_TransmitReceive+0x1de>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800458c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800458e:	8812      	ldrh	r2, [r2, #0]
 8004590:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004592:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004594:	3302      	adds	r3, #2
 8004596:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004598:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b02      	subs	r3, #2
 800459e:	b29b      	uxth	r3, r3
 80045a0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80045a2:	2700      	movs	r7, #0
 80045a4:	e03d      	b.n	8004622 <HAL_SPI_TransmitReceive+0x25a>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80045a6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80045ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80045ae:	3301      	adds	r3, #1
 80045b0:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80045b2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80045bc:	2700      	movs	r7, #0
 80045be:	e030      	b.n	8004622 <HAL_SPI_TransmitReceive+0x25a>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c0:	6822      	ldr	r2, [r4, #0]
 80045c2:	6853      	ldr	r3, [r2, #4]
 80045c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045c8:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80045ca:	2701      	movs	r7, #1
 80045cc:	e00d      	b.n	80045ea <HAL_SPI_TransmitReceive+0x222>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045ce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80045d0:	7b1b      	ldrb	r3, [r3, #12]
 80045d2:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80045d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045d6:	3301      	adds	r3, #1
 80045d8:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 80045da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80045e8:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045ea:	f7fc f83f 	bl	800066c <HAL_GetTick>
 80045ee:	1b80      	subs	r0, r0, r6
 80045f0:	42a8      	cmp	r0, r5
 80045f2:	d302      	bcc.n	80045fa <HAL_SPI_TransmitReceive+0x232>
 80045f4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80045f8:	d136      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x2a0>
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	d034      	beq.n	8004668 <HAL_SPI_TransmitReceive+0x2a0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045fe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	b923      	cbnz	r3, 800460e <HAL_SPI_TransmitReceive+0x246>
 8004604:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d034      	beq.n	8004678 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	f012 0f02 	tst.w	r2, #2
 8004616:	d004      	beq.n	8004622 <HAL_SPI_TransmitReceive+0x25a>
 8004618:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800461a:	b292      	uxth	r2, r2
 800461c:	b10a      	cbz	r2, 8004622 <HAL_SPI_TransmitReceive+0x25a>
 800461e:	2f00      	cmp	r7, #0
 8004620:	d1b0      	bne.n	8004584 <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	f012 0f01 	tst.w	r2, #1
 800462a:	d0de      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x222>
 800462c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8004630:	b292      	uxth	r2, r2
 8004632:	2a00      	cmp	r2, #0
 8004634:	d0d9      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x222>
        if (hspi->RxXferCount > 1U)
 8004636:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 800463a:	b292      	uxth	r2, r2
 800463c:	2a01      	cmp	r2, #1
 800463e:	d9c6      	bls.n	80045ce <HAL_SPI_TransmitReceive+0x206>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004644:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004646:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004648:	3302      	adds	r3, #2
 800464a:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800464c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b02      	subs	r3, #2
 8004654:	b29b      	uxth	r3, r3
 8004656:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800465a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d9ad      	bls.n	80045c0 <HAL_SPI_TransmitReceive+0x1f8>
        txallowed = 1U;
 8004664:	2701      	movs	r7, #1
 8004666:	e7c0      	b.n	80045ea <HAL_SPI_TransmitReceive+0x222>
        hspi->State = HAL_SPI_STATE_READY;
 8004668:	2301      	movs	r3, #1
 800466a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800466e:	2300      	movs	r3, #0
 8004670:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004674:	2003      	movs	r0, #3
 8004676:	e017      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x2e0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004678:	4632      	mov	r2, r6
 800467a:	4629      	mov	r1, r5
 800467c:	4620      	mov	r0, r4
 800467e:	f7ff fc79 	bl	8003f74 <SPI_EndRxTxTransaction>
 8004682:	b948      	cbnz	r0, 8004698 <HAL_SPI_TransmitReceive+0x2d0>
  hspi->State = HAL_SPI_STATE_READY;
 8004684:	2301      	movs	r3, #1
 8004686:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800468a:	2300      	movs	r3, #0
 800468c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004690:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004692:	b14b      	cbz	r3, 80046a8 <HAL_SPI_TransmitReceive+0x2e0>
    return HAL_ERROR;
 8004694:	2001      	movs	r0, #1
 8004696:	e007      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x2e0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004698:	2320      	movs	r3, #32
 800469a:	6623      	str	r3, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800469c:	2300      	movs	r3, #0
 800469e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80046a2:	2001      	movs	r0, #1
 80046a4:	e000      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x2e0>
    return HAL_BUSY;
 80046a6:	2002      	movs	r0, #2
}
 80046a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80046ac:	2002      	movs	r0, #2
 80046ae:	e7fb      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x2e0>
 80046b0:	2002      	movs	r0, #2
 80046b2:	e7f9      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x2e0>
    return HAL_ERROR;
 80046b4:	2001      	movs	r0, #1
 80046b6:	e7f7      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x2e0>
 80046b8:	2001      	movs	r0, #1
 80046ba:	e7f5      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x2e0>
  __HAL_LOCK(hspi);
 80046bc:	2002      	movs	r0, #2
 80046be:	e7f3      	b.n	80046a8 <HAL_SPI_TransmitReceive+0x2e0>

080046c0 <HAL_SPI_Receive>:
{
 80046c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046c4:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 80046c6:	f890 605d 	ldrb.w	r6, [r0, #93]	@ 0x5d
 80046ca:	b2f6      	uxtb	r6, r6
 80046cc:	2e01      	cmp	r6, #1
 80046ce:	f040 80c7 	bne.w	8004860 <HAL_SPI_Receive+0x1a0>
 80046d2:	4604      	mov	r4, r0
 80046d4:	4689      	mov	r9, r1
 80046d6:	4690      	mov	r8, r2
 80046d8:	461d      	mov	r5, r3
  if ((pData == NULL) || (Size == 0U))
 80046da:	2a00      	cmp	r2, #0
 80046dc:	bf18      	it	ne
 80046de:	2900      	cmpne	r1, #0
 80046e0:	f000 80bf 	beq.w	8004862 <HAL_SPI_Receive+0x1a2>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046e4:	6843      	ldr	r3, [r0, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ea:	d102      	bne.n	80046f2 <HAL_SPI_Receive+0x32>
 80046ec:	6883      	ldr	r3, [r0, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d035      	beq.n	800475e <HAL_SPI_Receive+0x9e>
  tickstart = HAL_GetTick();
 80046f2:	f7fb ffbb 	bl	800066c <HAL_GetTick>
 80046f6:	4607      	mov	r7, r0
  __HAL_LOCK(hspi);
 80046f8:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	f000 80b4 	beq.w	800486a <HAL_SPI_Receive+0x1aa>
 8004702:	2301      	movs	r3, #1
 8004704:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004708:	2304      	movs	r3, #4
 800470a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800470e:	2300      	movs	r3, #0
 8004710:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004712:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004716:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800471a:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800471e:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004720:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004722:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004724:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004726:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004728:	68e3      	ldr	r3, [r4, #12]
 800472a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800472e:	d920      	bls.n	8004772 <HAL_SPI_Receive+0xb2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	6853      	ldr	r3, [r2, #4]
 8004734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004738:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473a:	68a3      	ldr	r3, [r4, #8]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004740:	d01d      	beq.n	800477e <HAL_SPI_Receive+0xbe>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800474a:	d103      	bne.n	8004754 <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004752:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004754:	68e3      	ldr	r3, [r4, #12]
 8004756:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800475a:	d924      	bls.n	80047a6 <HAL_SPI_Receive+0xe6>
 800475c:	e04c      	b.n	80047f8 <HAL_SPI_Receive+0x138>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800475e:	2304      	movs	r3, #4
 8004760:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004764:	9500      	str	r5, [sp, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	460a      	mov	r2, r1
 800476a:	f7ff fe2d 	bl	80043c8 <HAL_SPI_TransmitReceive>
 800476e:	4606      	mov	r6, r0
 8004770:	e077      	b.n	8004862 <HAL_SPI_Receive+0x1a2>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	6853      	ldr	r3, [r2, #4]
 8004776:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800477a:	6053      	str	r3, [r2, #4]
 800477c:	e7dd      	b.n	800473a <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 800477e:	6822      	ldr	r2, [r4, #0]
 8004780:	6813      	ldr	r3, [r2, #0]
 8004782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004786:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	6813      	ldr	r3, [r2, #0]
 800478c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e7d6      	b.n	8004742 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004794:	f7fb ff6a 	bl	800066c <HAL_GetTick>
 8004798:	1bc0      	subs	r0, r0, r7
 800479a:	42a8      	cmp	r0, r5
 800479c:	d302      	bcc.n	80047a4 <HAL_SPI_Receive+0xe4>
 800479e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80047a2:	d118      	bne.n	80047d6 <HAL_SPI_Receive+0x116>
 80047a4:	b1bd      	cbz	r5, 80047d6 <HAL_SPI_Receive+0x116>
    while (hspi->RxXferCount > 0U)
 80047a6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d045      	beq.n	800483c <HAL_SPI_Receive+0x17c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	f012 0f01 	tst.w	r2, #1
 80047b8:	d0ec      	beq.n	8004794 <HAL_SPI_Receive+0xd4>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047ba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80047bc:	7b1b      	ldrb	r3, [r3, #12]
 80047be:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047c2:	3301      	adds	r3, #1
 80047c4:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80047c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 80047d4:	e7e7      	b.n	80047a6 <HAL_SPI_Receive+0xe6>
          hspi->State = HAL_SPI_STATE_READY;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80047dc:	2300      	movs	r3, #0
 80047de:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80047e2:	2603      	movs	r6, #3
 80047e4:	e03d      	b.n	8004862 <HAL_SPI_Receive+0x1a2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047e6:	f7fb ff41 	bl	800066c <HAL_GetTick>
 80047ea:	1bc0      	subs	r0, r0, r7
 80047ec:	42a8      	cmp	r0, r5
 80047ee:	d302      	bcc.n	80047f6 <HAL_SPI_Receive+0x136>
 80047f0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80047f4:	d11a      	bne.n	800482c <HAL_SPI_Receive+0x16c>
 80047f6:	b1cd      	cbz	r5, 800482c <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 80047f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	b1eb      	cbz	r3, 800483c <HAL_SPI_Receive+0x17c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	f012 0f01 	tst.w	r2, #1
 8004808:	d0ed      	beq.n	80047e6 <HAL_SPI_Receive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800480e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004812:	3302      	adds	r3, #2
 8004814:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004816:	f8b4 c046 	ldrh.w	ip, [r4, #70]	@ 0x46
 800481a:	fa1f fc8c 	uxth.w	ip, ip
 800481e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004822:	fa1f fc8c 	uxth.w	ip, ip
 8004826:	f8a4 c046 	strh.w	ip, [r4, #70]	@ 0x46
 800482a:	e7e5      	b.n	80047f8 <HAL_SPI_Receive+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 800482c:	2301      	movs	r3, #1
 800482e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004832:	2300      	movs	r3, #0
 8004834:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004838:	2603      	movs	r6, #3
 800483a:	e012      	b.n	8004862 <HAL_SPI_Receive+0x1a2>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800483c:	463a      	mov	r2, r7
 800483e:	4629      	mov	r1, r5
 8004840:	4620      	mov	r0, r4
 8004842:	f7ff fbe7 	bl	8004014 <SPI_EndRxTransaction>
 8004846:	b108      	cbz	r0, 800484c <HAL_SPI_Receive+0x18c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004848:	2320      	movs	r3, #32
 800484a:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800484c:	2301      	movs	r3, #1
 800484e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8004852:	2300      	movs	r3, #0
 8004854:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004858:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800485a:	b913      	cbnz	r3, 8004862 <HAL_SPI_Receive+0x1a2>
    return HAL_OK;
 800485c:	2600      	movs	r6, #0
 800485e:	e000      	b.n	8004862 <HAL_SPI_Receive+0x1a2>
    return HAL_BUSY;
 8004860:	2602      	movs	r6, #2
}
 8004862:	4630      	mov	r0, r6
 8004864:	b003      	add	sp, #12
 8004866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800486a:	2602      	movs	r6, #2
 800486c:	e7f9      	b.n	8004862 <HAL_SPI_Receive+0x1a2>
	...

08004870 <HAL_SPI_Transmit_DMA>:
{
 8004870:	b538      	push	{r3, r4, r5, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 8004872:	f890 505d 	ldrb.w	r5, [r0, #93]	@ 0x5d
 8004876:	b2ed      	uxtb	r5, r5
 8004878:	2d01      	cmp	r5, #1
 800487a:	f040 808a 	bne.w	8004992 <HAL_SPI_Transmit_DMA+0x122>
 800487e:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8004880:	2a00      	cmp	r2, #0
 8004882:	bf18      	it	ne
 8004884:	2900      	cmpne	r1, #0
 8004886:	f000 8085 	beq.w	8004994 <HAL_SPI_Transmit_DMA+0x124>
  __HAL_LOCK(hspi);
 800488a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800488e:	2b01      	cmp	r3, #1
 8004890:	f000 8082 	beq.w	8004998 <HAL_SPI_Transmit_DMA+0x128>
 8004894:	2301      	movs	r3, #1
 8004896:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800489a:	2303      	movs	r3, #3
 800489c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048a0:	2300      	movs	r3, #0
 80048a2:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80048a4:	6381      	str	r1, [r0, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80048a6:	8782      	strh	r2, [r0, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80048a8:	87c2      	strh	r2, [r0, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048aa:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048ac:	6503      	str	r3, [r0, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80048ae:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80048b0:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80048b4:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b8:	6883      	ldr	r3, [r0, #8]
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048be:	d03c      	beq.n	800493a <HAL_SPI_Transmit_DMA+0xca>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80048c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048c2:	4a36      	ldr	r2, [pc, #216]	@ (800499c <HAL_SPI_Transmit_DMA+0x12c>)
 80048c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80048c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048c8:	4a35      	ldr	r2, [pc, #212]	@ (80049a0 <HAL_SPI_Transmit_DMA+0x130>)
 80048ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80048cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048ce:	4a35      	ldr	r2, [pc, #212]	@ (80049a4 <HAL_SPI_Transmit_DMA+0x134>)
 80048d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80048d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048d4:	2200      	movs	r2, #0
 80048d6:	651a      	str	r2, [r3, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	6853      	ldr	r3, [r2, #4]
 80048dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048e0:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80048e2:	68e3      	ldr	r3, [r4, #12]
 80048e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048e8:	d804      	bhi.n	80048f4 <HAL_SPI_Transmit_DMA+0x84>
 80048ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048f2:	d02d      	beq.n	8004950 <HAL_SPI_Transmit_DMA+0xe0>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80048f4:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 80048f6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	320c      	adds	r2, #12
 80048fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80048fe:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004900:	f7fc f814 	bl	800092c <HAL_DMA_Start_IT>
 8004904:	4601      	mov	r1, r0
 8004906:	2800      	cmp	r0, #0
 8004908:	d13b      	bne.n	8004982 <HAL_SPI_Transmit_DMA+0x112>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004912:	d103      	bne.n	800491c <HAL_SPI_Transmit_DMA+0xac>
    __HAL_SPI_ENABLE(hspi);
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800491a:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800491c:	2300      	movs	r3, #0
 800491e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	6853      	ldr	r3, [r2, #4]
 8004926:	f043 0320 	orr.w	r3, r3, #32
 800492a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	6853      	ldr	r3, [r2, #4]
 8004930:	f043 0302 	orr.w	r3, r3, #2
 8004934:	6053      	str	r3, [r2, #4]
  return HAL_OK;
 8004936:	460d      	mov	r5, r1
 8004938:	e02c      	b.n	8004994 <HAL_SPI_Transmit_DMA+0x124>
    __HAL_SPI_DISABLE(hspi);
 800493a:	6802      	ldr	r2, [r0, #0]
 800493c:	6813      	ldr	r3, [r2, #0]
 800493e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004942:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004944:	6802      	ldr	r2, [r0, #0]
 8004946:	6813      	ldr	r3, [r2, #0]
 8004948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e7b7      	b.n	80048c0 <HAL_SPI_Transmit_DMA+0x50>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004950:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004952:	f013 0f01 	tst.w	r3, #1
 8004956:	d109      	bne.n	800496c <HAL_SPI_Transmit_DMA+0xfc>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004958:	6822      	ldr	r2, [r4, #0]
 800495a:	6853      	ldr	r3, [r2, #4]
 800495c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004960:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004962:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004964:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004968:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800496a:	e7c3      	b.n	80048f4 <HAL_SPI_Transmit_DMA+0x84>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	6853      	ldr	r3, [r2, #4]
 8004970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004974:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004976:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004978:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800497c:	3301      	adds	r3, #1
 800497e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004980:	e7b8      	b.n	80048f4 <HAL_SPI_Transmit_DMA+0x84>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004982:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004984:	f043 0310 	orr.w	r3, r3, #16
 8004988:	6623      	str	r3, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800498a:	2300      	movs	r3, #0
 800498c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8004990:	e000      	b.n	8004994 <HAL_SPI_Transmit_DMA+0x124>
    return HAL_BUSY;
 8004992:	2502      	movs	r5, #2
}
 8004994:	4628      	mov	r0, r5
 8004996:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 8004998:	2502      	movs	r5, #2
 800499a:	e7fb      	b.n	8004994 <HAL_SPI_Transmit_DMA+0x124>
 800499c:	080049ab 	.word	0x080049ab
 80049a0:	080049d9 	.word	0x080049d9
 80049a4:	080049b7 	.word	0x080049b7

080049a8 <HAL_SPI_TxHalfCpltCallback>:
}
 80049a8:	4770      	bx	lr

080049aa <SPI_DMAHalfTransmitCplt>:
{
 80049aa:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80049ac:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80049ae:	f7ff fffb 	bl	80049a8 <HAL_SPI_TxHalfCpltCallback>
}
 80049b2:	bd08      	pop	{r3, pc}

080049b4 <HAL_SPI_ErrorCallback>:
}
 80049b4:	4770      	bx	lr

080049b6 <SPI_DMAError>:
{
 80049b6:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049b8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80049ba:	6802      	ldr	r2, [r0, #0]
 80049bc:	6853      	ldr	r3, [r2, #4]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049c4:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80049c6:	f043 0310 	orr.w	r3, r3, #16
 80049ca:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80049d2:	f7ff ffef 	bl	80049b4 <HAL_SPI_ErrorCallback>
}
 80049d6:	bd08      	pop	{r3, pc}

080049d8 <SPI_DMATransmitCplt>:
{
 80049d8:	b530      	push	{r4, r5, lr}
 80049da:	b083      	sub	sp, #12
 80049dc:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049de:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  tickstart = HAL_GetTick();
 80049e0:	f7fb fe44 	bl	800066c <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80049ec:	d123      	bne.n	8004a36 <SPI_DMATransmitCplt+0x5e>
 80049ee:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049f0:	6821      	ldr	r1, [r4, #0]
 80049f2:	684b      	ldr	r3, [r1, #4]
 80049f4:	f023 0320 	bic.w	r3, r3, #32
 80049f8:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80049fa:	6821      	ldr	r1, [r4, #0]
 80049fc:	684b      	ldr	r3, [r1, #4]
 80049fe:	f023 0302 	bic.w	r3, r3, #2
 8004a02:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a04:	2164      	movs	r1, #100	@ 0x64
 8004a06:	4620      	mov	r0, r4
 8004a08:	f7ff fab4 	bl	8003f74 <SPI_EndRxTxTransaction>
 8004a0c:	b118      	cbz	r0, 8004a16 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a0e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004a10:	f043 0320 	orr.w	r3, r3, #32
 8004a14:	6623      	str	r3, [r4, #96]	@ 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a16:	68a3      	ldr	r3, [r4, #8]
 8004a18:	b933      	cbnz	r3, 8004a28 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	9201      	str	r2, [sp, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a32:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004a34:	b923      	cbnz	r3, 8004a40 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8004a36:	4620      	mov	r0, r4
 8004a38:	f007 fa12 	bl	800be60 <HAL_SPI_TxCpltCallback>
}
 8004a3c:	b003      	add	sp, #12
 8004a3e:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7ff ffb7 	bl	80049b4 <HAL_SPI_ErrorCallback>
      return;
 8004a46:	e7f9      	b.n	8004a3c <SPI_DMATransmitCplt+0x64>

08004a48 <HAL_TIM_IC_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a48:	4770      	bx	lr

08004a4a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4c:	4770      	bx	lr

08004a4e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004a50:	4770      	bx	lr

08004a52 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIM_TriggerHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004a58:	4770      	bx	lr

08004a5a <HAL_TIM_ErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a5a:	4770      	bx	lr

08004a5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a5c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a60:	6a03      	ldr	r3, [r0, #32]
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a68:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6a:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a6c:	4b12      	ldr	r3, [pc, #72]	@ (8004ab8 <TIM_OC1_SetConfig+0x5c>)
 8004a6e:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a70:	680d      	ldr	r5, [r1, #0]
 8004a72:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a74:	f024 0402 	bic.w	r4, r4, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a78:	688b      	ldr	r3, [r1, #8]
 8004a7a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a7c:	4c0f      	ldr	r4, [pc, #60]	@ (8004abc <TIM_OC1_SetConfig+0x60>)
 8004a7e:	4e10      	ldr	r6, [pc, #64]	@ (8004ac0 <TIM_OC1_SetConfig+0x64>)
 8004a80:	42b0      	cmp	r0, r6
 8004a82:	bf18      	it	ne
 8004a84:	42a0      	cmpne	r0, r4
 8004a86:	bf0c      	ite	eq
 8004a88:	2401      	moveq	r4, #1
 8004a8a:	2400      	movne	r4, #0
 8004a8c:	d105      	bne.n	8004a9a <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a8e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a92:	68ce      	ldr	r6, [r1, #12]
 8004a94:	431e      	orrs	r6, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a96:	f026 0304 	bic.w	r3, r6, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9a:	b12c      	cbz	r4, 8004aa8 <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a9c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aa0:	694c      	ldr	r4, [r1, #20]
 8004aa2:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aa4:	698a      	ldr	r2, [r1, #24]
 8004aa6:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aaa:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aac:	684a      	ldr	r2, [r1, #4]
 8004aae:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab0:	6203      	str	r3, [r0, #32]
}
 8004ab2:	bc70      	pop	{r4, r5, r6}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	fffeff8c 	.word	0xfffeff8c
 8004abc:	40010000 	.word	0x40010000
 8004ac0:	40010400 	.word	0x40010400

08004ac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ac8:	6a02      	ldr	r2, [r0, #32]
 8004aca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ace:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ad4:	4c14      	ldr	r4, [pc, #80]	@ (8004b28 <TIM_OC3_SetConfig+0x64>)
 8004ad6:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad8:	680e      	ldr	r6, [r1, #0]
 8004ada:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004adc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ae0:	688c      	ldr	r4, [r1, #8]
 8004ae2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ae6:	4c11      	ldr	r4, [pc, #68]	@ (8004b2c <TIM_OC3_SetConfig+0x68>)
 8004ae8:	4d11      	ldr	r5, [pc, #68]	@ (8004b30 <TIM_OC3_SetConfig+0x6c>)
 8004aea:	42a8      	cmp	r0, r5
 8004aec:	bf18      	it	ne
 8004aee:	42a0      	cmpne	r0, r4
 8004af0:	bf0c      	ite	eq
 8004af2:	2401      	moveq	r4, #1
 8004af4:	2400      	movne	r4, #0
 8004af6:	d106      	bne.n	8004b06 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004af8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004afc:	68cd      	ldr	r5, [r1, #12]
 8004afe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b06:	b13c      	cbz	r4, 8004b18 <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b08:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b0c:	694c      	ldr	r4, [r1, #20]
 8004b0e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b12:	698c      	ldr	r4, [r1, #24]
 8004b14:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b18:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b1a:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b1c:	684a      	ldr	r2, [r1, #4]
 8004b1e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b20:	6203      	str	r3, [r0, #32]
}
 8004b22:	bc70      	pop	{r4, r5, r6}
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	fffeff8c 	.word	0xfffeff8c
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40010400 	.word	0x40010400

08004b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b38:	6a02      	ldr	r2, [r0, #32]
 8004b3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b3e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b40:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b42:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b44:	4a0d      	ldr	r2, [pc, #52]	@ (8004b7c <TIM_OC4_SetConfig+0x48>)
 8004b46:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	680d      	ldr	r5, [r1, #0]
 8004b4a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b52:	688d      	ldr	r5, [r1, #8]
 8004b54:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b58:	4e09      	ldr	r6, [pc, #36]	@ (8004b80 <TIM_OC4_SetConfig+0x4c>)
 8004b5a:	4d0a      	ldr	r5, [pc, #40]	@ (8004b84 <TIM_OC4_SetConfig+0x50>)
 8004b5c:	42a8      	cmp	r0, r5
 8004b5e:	bf18      	it	ne
 8004b60:	42b0      	cmpne	r0, r6
 8004b62:	d104      	bne.n	8004b6e <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b64:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b68:	694d      	ldr	r5, [r1, #20]
 8004b6a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b70:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b72:	684a      	ldr	r2, [r1, #4]
 8004b74:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b76:	6203      	str	r3, [r0, #32]
}
 8004b78:	bc70      	pop	{r4, r5, r6}
 8004b7a:	4770      	bx	lr
 8004b7c:	feff8cff 	.word	0xfeff8cff
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40010400 	.word	0x40010400

08004b88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b8c:	6a02      	ldr	r2, [r0, #32]
 8004b8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004b92:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b94:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b96:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b98:	4d0d      	ldr	r5, [pc, #52]	@ (8004bd0 <TIM_OC5_SetConfig+0x48>)
 8004b9a:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b9c:	680a      	ldr	r2, [r1, #0]
 8004b9e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ba0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ba4:	688d      	ldr	r5, [r1, #8]
 8004ba6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	4e0a      	ldr	r6, [pc, #40]	@ (8004bd4 <TIM_OC5_SetConfig+0x4c>)
 8004bac:	4d0a      	ldr	r5, [pc, #40]	@ (8004bd8 <TIM_OC5_SetConfig+0x50>)
 8004bae:	42a8      	cmp	r0, r5
 8004bb0:	bf18      	it	ne
 8004bb2:	42b0      	cmpne	r0, r6
 8004bb4:	d104      	bne.n	8004bc0 <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bb6:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bba:	694d      	ldr	r5, [r1, #20]
 8004bbc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bc2:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bc4:	684a      	ldr	r2, [r1, #4]
 8004bc6:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc8:	6203      	str	r3, [r0, #32]
}
 8004bca:	bc70      	pop	{r4, r5, r6}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	fffeff8f 	.word	0xfffeff8f
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40010400 	.word	0x40010400

08004bdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004be0:	6a02      	ldr	r2, [r0, #32]
 8004be2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004be6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bea:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bec:	4a0d      	ldr	r2, [pc, #52]	@ (8004c24 <TIM_OC6_SetConfig+0x48>)
 8004bee:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf0:	680d      	ldr	r5, [r1, #0]
 8004bf2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bfa:	688d      	ldr	r5, [r1, #8]
 8004bfc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c00:	4e09      	ldr	r6, [pc, #36]	@ (8004c28 <TIM_OC6_SetConfig+0x4c>)
 8004c02:	4d0a      	ldr	r5, [pc, #40]	@ (8004c2c <TIM_OC6_SetConfig+0x50>)
 8004c04:	42a8      	cmp	r0, r5
 8004c06:	bf18      	it	ne
 8004c08:	42b0      	cmpne	r0, r6
 8004c0a:	d104      	bne.n	8004c16 <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c0c:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c10:	694d      	ldr	r5, [r1, #20]
 8004c12:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c16:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c18:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c1a:	684a      	ldr	r2, [r1, #4]
 8004c1c:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1e:	6203      	str	r3, [r0, #32]
}
 8004c20:	bc70      	pop	{r4, r5, r6}
 8004c22:	4770      	bx	lr
 8004c24:	feff8fff 	.word	0xfeff8fff
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40010400 	.word	0x40010400

08004c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c30:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c32:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c34:	6a04      	ldr	r4, [r0, #32]
 8004c36:	f024 0401 	bic.w	r4, r4, #1
 8004c3a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c3e:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c42:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c46:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004c4a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c4c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004c4e:	6203      	str	r3, [r0, #32]
}
 8004c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c56:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c58:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5a:	6a04      	ldr	r4, [r0, #32]
 8004c5c:	f024 0410 	bic.w	r4, r4, #16
 8004c60:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c62:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004c64:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c68:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c6c:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c70:	031b      	lsls	r3, r3, #12
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c78:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c7c:	0109      	lsls	r1, r1, #4
 8004c7e:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 8004c82:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c84:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004c86:	6201      	str	r1, [r0, #32]
}
 8004c88:	bc30      	pop	{r4, r5}
 8004c8a:	4770      	bx	lr

08004c8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c8e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c90:	6a04      	ldr	r4, [r0, #32]
 8004c92:	f024 0410 	bic.w	r4, r4, #16
 8004c96:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c98:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c9a:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c9e:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ca2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004caa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004cac:	6203      	str	r3, [r0, #32]
}
 8004cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cb4:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004cb6:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cb8:	6a04      	ldr	r4, [r0, #32]
 8004cba:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8004cbe:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cc0:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004cc2:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8004cc6:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004cca:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004cd6:	f425 6520 	bic.w	r5, r5, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004cda:	0209      	lsls	r1, r1, #8
 8004cdc:	f401 6120 	and.w	r1, r1, #2560	@ 0xa00
 8004ce0:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ce2:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8004ce4:	6201      	str	r1, [r0, #32]
}
 8004ce6:	bc30      	pop	{r4, r5}
 8004ce8:	4770      	bx	lr

08004cea <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cea:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004cec:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cee:	6a04      	ldr	r4, [r0, #32]
 8004cf0:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 8004cf4:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cf6:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004cf8:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cfc:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d00:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d04:	031b      	lsls	r3, r3, #12
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004d0c:	f425 4520 	bic.w	r5, r5, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d10:	0309      	lsls	r1, r1, #12
 8004d12:	f401 4120 	and.w	r1, r1, #40960	@ 0xa000
 8004d16:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d18:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8004d1a:	6201      	str	r1, [r0, #32]
}
 8004d1c:	bc30      	pop	{r4, r5}
 8004d1e:	4770      	bx	lr

08004d20 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d20:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d26:	430b      	orrs	r3, r1
 8004d28:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2c:	6083      	str	r3, [r0, #8]
}
 8004d2e:	4770      	bx	lr

08004d30 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004d30:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d13a      	bne.n	8004db0 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d40:	6802      	ldr	r2, [r0, #0]
 8004d42:	68d3      	ldr	r3, [r2, #12]
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4a:	6803      	ldr	r3, [r0, #0]
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004db8 <HAL_TIM_Base_Start_IT+0x88>)
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d52:	bf18      	it	ne
 8004d54:	4293      	cmpne	r3, r2
 8004d56:	d01d      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x64>
 8004d58:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d019      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x64>
 8004d60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d015      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x64>
 8004d68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d011      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x64>
 8004d70:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00d      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x64>
 8004d78:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x64>
 8004d80:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d005      	beq.n	8004d94 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004d90:	2000      	movs	r0, #0
 8004d92:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d94:	6899      	ldr	r1, [r3, #8]
 8004d96:	4a09      	ldr	r2, [pc, #36]	@ (8004dbc <HAL_TIM_Base_Start_IT+0x8c>)
 8004d98:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9a:	2a06      	cmp	r2, #6
 8004d9c:	bf18      	it	ne
 8004d9e:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 8004da2:	d007      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004dac:	2000      	movs	r0, #0
 8004dae:	4770      	bx	lr
    return HAL_ERROR;
 8004db0:	2001      	movs	r0, #1
 8004db2:	4770      	bx	lr
  return HAL_OK;
 8004db4:	2000      	movs	r0, #0
}
 8004db6:	4770      	bx	lr
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	00010007 	.word	0x00010007

08004dc0 <HAL_TIM_IRQHandler>:
{
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004dc4:	6803      	ldr	r3, [r0, #0]
 8004dc6:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dc8:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dca:	f015 0f02 	tst.w	r5, #2
 8004dce:	d012      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x36>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dd0:	f016 0f02 	tst.w	r6, #2
 8004dd4:	d00f      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x36>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004dd6:	f06f 0202 	mvn.w	r2, #2
 8004dda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de0:	6803      	ldr	r3, [r0, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f013 0f03 	tst.w	r3, #3
 8004de8:	f000 8092 	beq.w	8004f10 <HAL_TIM_IRQHandler+0x150>
          htim->IC_CaptureCallback(htim);
 8004dec:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8004df0:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	2300      	movs	r3, #0
 8004df4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004df6:	f015 0f04 	tst.w	r5, #4
 8004dfa:	d014      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x66>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dfc:	f016 0f04 	tst.w	r6, #4
 8004e00:	d011      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	f06f 0204 	mvn.w	r2, #4
 8004e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004e16:	f000 8083 	beq.w	8004f20 <HAL_TIM_IRQHandler+0x160>
        htim->IC_CaptureCallback(htim);
 8004e1a:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8004e1e:	4620      	mov	r0, r4
 8004e20:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	2300      	movs	r3, #0
 8004e24:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e26:	f015 0f08 	tst.w	r5, #8
 8004e2a:	d013      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x94>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e2c:	f016 0f08 	tst.w	r6, #8
 8004e30:	d010      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x94>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	f06f 0208 	mvn.w	r2, #8
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e3a:	2304      	movs	r3, #4
 8004e3c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f013 0f03 	tst.w	r3, #3
 8004e46:	d074      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x172>
        htim->IC_CaptureCallback(htim);
 8004e48:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e50:	2300      	movs	r3, #0
 8004e52:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e54:	f015 0f10 	tst.w	r5, #16
 8004e58:	d013      	beq.n	8004e82 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e5a:	f016 0f10 	tst.w	r6, #16
 8004e5e:	d010      	beq.n	8004e82 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	f06f 0210 	mvn.w	r2, #16
 8004e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e68:	2308      	movs	r3, #8
 8004e6a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004e74:	d066      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x184>
        htim->IC_CaptureCallback(htim);
 8004e76:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e82:	f015 0f01 	tst.w	r5, #1
 8004e86:	d00a      	beq.n	8004e9e <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e88:	f016 0f01 	tst.w	r6, #1
 8004e8c:	d007      	beq.n	8004e9e <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f06f 0201 	mvn.w	r2, #1
 8004e94:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 8004e96:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	4798      	blx	r3
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e9e:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 8004ea2:	d00a      	beq.n	8004eba <HAL_TIM_IRQHandler+0xfa>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ea4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004ea8:	d007      	beq.n	8004eba <HAL_TIM_IRQHandler+0xfa>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004eb0:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 8004eb2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004eba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x116>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ec0:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004ec4:	d007      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ecc:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 8004ece:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ed6:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8004eda:	d00a      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x132>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004edc:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004ee0:	d007      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8004eea:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8004eee:	4620      	mov	r0, r4
 8004ef0:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ef2:	f015 0f20 	tst.w	r5, #32
 8004ef6:	d00a      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x14e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ef8:	f016 0f20 	tst.w	r6, #32
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x14e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	f06f 0220 	mvn.w	r2, #32
 8004f04:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 8004f06:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	4798      	blx	r3
}
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
          htim->OC_DelayElapsedCallback(htim);
 8004f10:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8004f14:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004f16:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	4798      	blx	r3
 8004f1e:	e768      	b.n	8004df2 <HAL_TIM_IRQHandler+0x32>
        htim->OC_DelayElapsedCallback(htim);
 8004f20:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8004f24:	4620      	mov	r0, r4
 8004f26:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f28:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	4798      	blx	r3
 8004f30:	e777      	b.n	8004e22 <HAL_TIM_IRQHandler+0x62>
        htim->OC_DelayElapsedCallback(htim);
 8004f32:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8004f36:	4620      	mov	r0, r4
 8004f38:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f3a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8004f3e:	4620      	mov	r0, r4
 8004f40:	4798      	blx	r3
 8004f42:	e785      	b.n	8004e50 <HAL_TIM_IRQHandler+0x90>
        htim->OC_DelayElapsedCallback(htim);
 8004f44:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8004f48:	4620      	mov	r0, r4
 8004f4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f4c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8004f50:	4620      	mov	r0, r4
 8004f52:	4798      	blx	r3
 8004f54:	e793      	b.n	8004e7e <HAL_TIM_IRQHandler+0xbe>

08004f56 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8004f56:	290c      	cmp	r1, #12
 8004f58:	d814      	bhi.n	8004f84 <HAL_TIM_ReadCapturedValue+0x2e>
 8004f5a:	e8df f001 	tbb	[pc, r1]
 8004f5e:	1307      	.short	0x1307
 8004f60:	130a1313 	.word	0x130a1313
 8004f64:	130d1313 	.word	0x130d1313
 8004f68:	1313      	.short	0x1313
 8004f6a:	10          	.byte	0x10
 8004f6b:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8004f6c:	6803      	ldr	r3, [r0, #0]
 8004f6e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8004f70:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8004f72:	6803      	ldr	r3, [r0, #0]
 8004f74:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8004f76:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8004f78:	6803      	ldr	r3, [r0, #0]
 8004f7a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8004f7c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8004f7e:	6803      	ldr	r3, [r0, #0]
 8004f80:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 8004f82:	4770      	bx	lr
  switch (Channel)
 8004f84:	2000      	movs	r0, #0
}
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIM_RegisterCallback>:
  if (pCallback == NULL)
 8004f88:	2a00      	cmp	r2, #0
 8004f8a:	f000 80c8 	beq.w	800511e <HAL_TIM_RegisterCallback+0x196>
{
 8004f8e:	b410      	push	{r4}
 8004f90:	4684      	mov	ip, r0
  if (htim->State == HAL_TIM_STATE_READY)
 8004f92:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004f96:	b2d8      	uxtb	r0, r3
 8004f98:	2801      	cmp	r0, #1
 8004f9a:	d012      	beq.n	8004fc2 <HAL_TIM_RegisterCallback+0x3a>
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004f9c:	f89c 303d 	ldrb.w	r3, [ip, #61]	@ 0x3d
 8004fa0:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f040 80bc 	bne.w	8005122 <HAL_TIM_RegisterCallback+0x19a>
    switch (CallbackID)
 8004faa:	290d      	cmp	r1, #13
 8004fac:	f200 80bd 	bhi.w	800512a <HAL_TIM_RegisterCallback+0x1a2>
 8004fb0:	e8df f001 	tbb	[pc, r1]
 8004fb4:	94918e8a 	.word	0x94918e8a
 8004fb8:	a09d9a97 	.word	0xa09d9a97
 8004fbc:	aca9a6a3 	.word	0xaca9a6a3
 8004fc0:	b2af      	.short	0xb2af
    switch (CallbackID)
 8004fc2:	291b      	cmp	r1, #27
 8004fc4:	f200 80ae 	bhi.w	8005124 <HAL_TIM_RegisterCallback+0x19c>
 8004fc8:	e8df f001 	tbb	[pc, r1]
 8004fcc:	1a16120e 	.word	0x1a16120e
 8004fd0:	2a26221e 	.word	0x2a26221e
 8004fd4:	3a36322e 	.word	0x3a36322e
 8004fd8:	4a46423e 	.word	0x4a46423e
 8004fdc:	5a56524e 	.word	0x5a56524e
 8004fe0:	6a66625e 	.word	0x6a66625e
 8004fe4:	7a76726e 	.word	0x7a76726e
        htim->Base_MspInitCallback                 = pCallback;
 8004fe8:	f8cc 204c 	str.w	r2, [ip, #76]	@ 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8004fec:	4608      	mov	r0, r1
        break;
 8004fee:	e099      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->Base_MspDeInitCallback               = pCallback;
 8004ff0:	f8cc 2050 	str.w	r2, [ip, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8004ff4:	2000      	movs	r0, #0
        break;
 8004ff6:	e095      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->IC_MspInitCallback                   = pCallback;
 8004ff8:	f8cc 2054 	str.w	r2, [ip, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004ffc:	2000      	movs	r0, #0
        break;
 8004ffe:	e091      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->IC_MspDeInitCallback                 = pCallback;
 8005000:	f8cc 2058 	str.w	r2, [ip, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8005004:	2000      	movs	r0, #0
        break;
 8005006:	e08d      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->OC_MspInitCallback                   = pCallback;
 8005008:	f8cc 205c 	str.w	r2, [ip, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 800500c:	2000      	movs	r0, #0
        break;
 800500e:	e089      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->OC_MspDeInitCallback                 = pCallback;
 8005010:	f8cc 2060 	str.w	r2, [ip, #96]	@ 0x60
  HAL_StatusTypeDef status = HAL_OK;
 8005014:	2000      	movs	r0, #0
        break;
 8005016:	e085      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->PWM_MspInitCallback                  = pCallback;
 8005018:	f8cc 2064 	str.w	r2, [ip, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 800501c:	2000      	movs	r0, #0
        break;
 800501e:	e081      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->PWM_MspDeInitCallback                = pCallback;
 8005020:	f8cc 2068 	str.w	r2, [ip, #104]	@ 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8005024:	2000      	movs	r0, #0
        break;
 8005026:	e07d      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->OnePulse_MspInitCallback             = pCallback;
 8005028:	f8cc 206c 	str.w	r2, [ip, #108]	@ 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800502c:	2000      	movs	r0, #0
        break;
 800502e:	e079      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8005030:	f8cc 2070 	str.w	r2, [ip, #112]	@ 0x70
  HAL_StatusTypeDef status = HAL_OK;
 8005034:	2000      	movs	r0, #0
        break;
 8005036:	e075      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->Encoder_MspInitCallback              = pCallback;
 8005038:	f8cc 2074 	str.w	r2, [ip, #116]	@ 0x74
  HAL_StatusTypeDef status = HAL_OK;
 800503c:	2000      	movs	r0, #0
        break;
 800503e:	e071      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->Encoder_MspDeInitCallback            = pCallback;
 8005040:	f8cc 2078 	str.w	r2, [ip, #120]	@ 0x78
  HAL_StatusTypeDef status = HAL_OK;
 8005044:	2000      	movs	r0, #0
        break;
 8005046:	e06d      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->HallSensor_MspInitCallback           = pCallback;
 8005048:	f8cc 207c 	str.w	r2, [ip, #124]	@ 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 800504c:	2000      	movs	r0, #0
        break;
 800504e:	e069      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8005050:	f8cc 2080 	str.w	r2, [ip, #128]	@ 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8005054:	2000      	movs	r0, #0
        break;
 8005056:	e065      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->PeriodElapsedCallback                = pCallback;
 8005058:	f8cc 2084 	str.w	r2, [ip, #132]	@ 0x84
  HAL_StatusTypeDef status = HAL_OK;
 800505c:	2000      	movs	r0, #0
        break;
 800505e:	e061      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005060:	f8cc 2088 	str.w	r2, [ip, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;
 8005064:	2000      	movs	r0, #0
        break;
 8005066:	e05d      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->TriggerCallback                      = pCallback;
 8005068:	f8cc 208c 	str.w	r2, [ip, #140]	@ 0x8c
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2000      	movs	r0, #0
        break;
 800506e:	e059      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->TriggerHalfCpltCallback              = pCallback;
 8005070:	f8cc 2090 	str.w	r2, [ip, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;
 8005074:	2000      	movs	r0, #0
        break;
 8005076:	e055      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->IC_CaptureCallback                   = pCallback;
 8005078:	f8cc 2094 	str.w	r2, [ip, #148]	@ 0x94
  HAL_StatusTypeDef status = HAL_OK;
 800507c:	2000      	movs	r0, #0
        break;
 800507e:	e051      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8005080:	f8cc 2098 	str.w	r2, [ip, #152]	@ 0x98
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	2000      	movs	r0, #0
        break;
 8005086:	e04d      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->OC_DelayElapsedCallback              = pCallback;
 8005088:	f8cc 209c 	str.w	r2, [ip, #156]	@ 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 800508c:	2000      	movs	r0, #0
        break;
 800508e:	e049      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->PWM_PulseFinishedCallback            = pCallback;
 8005090:	f8cc 20a0 	str.w	r2, [ip, #160]	@ 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 8005094:	2000      	movs	r0, #0
        break;
 8005096:	e045      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8005098:	f8cc 20a4 	str.w	r2, [ip, #164]	@ 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 800509c:	2000      	movs	r0, #0
        break;
 800509e:	e041      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->ErrorCallback                        = pCallback;
 80050a0:	f8cc 20a8 	str.w	r2, [ip, #168]	@ 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 80050a4:	2000      	movs	r0, #0
        break;
 80050a6:	e03d      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->CommutationCallback                  = pCallback;
 80050a8:	f8cc 20ac 	str.w	r2, [ip, #172]	@ 0xac
  HAL_StatusTypeDef status = HAL_OK;
 80050ac:	2000      	movs	r0, #0
        break;
 80050ae:	e039      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->CommutationHalfCpltCallback          = pCallback;
 80050b0:	f8cc 20b0 	str.w	r2, [ip, #176]	@ 0xb0
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2000      	movs	r0, #0
        break;
 80050b6:	e035      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->BreakCallback                        = pCallback;
 80050b8:	f8cc 20b4 	str.w	r2, [ip, #180]	@ 0xb4
  HAL_StatusTypeDef status = HAL_OK;
 80050bc:	2000      	movs	r0, #0
        break;
 80050be:	e031      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->Break2Callback                       = pCallback;
 80050c0:	f8cc 20b8 	str.w	r2, [ip, #184]	@ 0xb8
  HAL_StatusTypeDef status = HAL_OK;
 80050c4:	2000      	movs	r0, #0
        break;
 80050c6:	e02d      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->Base_MspInitCallback         = pCallback;
 80050c8:	f8cc 204c 	str.w	r2, [ip, #76]	@ 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 80050cc:	4608      	mov	r0, r1
        break;
 80050ce:	e029      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->Base_MspDeInitCallback       = pCallback;
 80050d0:	f8cc 2050 	str.w	r2, [ip, #80]	@ 0x50
        break;
 80050d4:	e026      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->IC_MspInitCallback           = pCallback;
 80050d6:	f8cc 2054 	str.w	r2, [ip, #84]	@ 0x54
        break;
 80050da:	e023      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->IC_MspDeInitCallback         = pCallback;
 80050dc:	f8cc 2058 	str.w	r2, [ip, #88]	@ 0x58
        break;
 80050e0:	e020      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->OC_MspInitCallback           = pCallback;
 80050e2:	f8cc 205c 	str.w	r2, [ip, #92]	@ 0x5c
        break;
 80050e6:	e01d      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->OC_MspDeInitCallback         = pCallback;
 80050e8:	f8cc 2060 	str.w	r2, [ip, #96]	@ 0x60
        break;
 80050ec:	e01a      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->PWM_MspInitCallback          = pCallback;
 80050ee:	f8cc 2064 	str.w	r2, [ip, #100]	@ 0x64
        break;
 80050f2:	e017      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->PWM_MspDeInitCallback        = pCallback;
 80050f4:	f8cc 2068 	str.w	r2, [ip, #104]	@ 0x68
        break;
 80050f8:	e014      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->OnePulse_MspInitCallback     = pCallback;
 80050fa:	f8cc 206c 	str.w	r2, [ip, #108]	@ 0x6c
        break;
 80050fe:	e011      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005100:	f8cc 2070 	str.w	r2, [ip, #112]	@ 0x70
        break;
 8005104:	e00e      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->Encoder_MspInitCallback      = pCallback;
 8005106:	f8cc 2074 	str.w	r2, [ip, #116]	@ 0x74
        break;
 800510a:	e00b      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->Encoder_MspDeInitCallback    = pCallback;
 800510c:	f8cc 2078 	str.w	r2, [ip, #120]	@ 0x78
        break;
 8005110:	e008      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->HallSensor_MspInitCallback   = pCallback;
 8005112:	f8cc 207c 	str.w	r2, [ip, #124]	@ 0x7c
        break;
 8005116:	e005      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
        htim->HallSensor_MspDeInitCallback = pCallback;
 8005118:	f8cc 2080 	str.w	r2, [ip, #128]	@ 0x80
        break;
 800511c:	e002      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
    return HAL_ERROR;
 800511e:	2001      	movs	r0, #1
}
 8005120:	4770      	bx	lr
    status = HAL_ERROR;
 8005122:	2001      	movs	r0, #1
}
 8005124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005128:	4770      	bx	lr
    switch (CallbackID)
 800512a:	2001      	movs	r0, #1
 800512c:	e7fa      	b.n	8005124 <HAL_TIM_RegisterCallback+0x19c>
	...

08005130 <TIM_Base_SetConfig>:
{
 8005130:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8005132:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005134:	4a3c      	ldr	r2, [pc, #240]	@ (8005228 <TIM_Base_SetConfig+0xf8>)
 8005136:	4290      	cmp	r0, r2
 8005138:	bf14      	ite	ne
 800513a:	2200      	movne	r2, #0
 800513c:	2201      	moveq	r2, #1
 800513e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005142:	bf14      	ite	ne
 8005144:	4614      	movne	r4, r2
 8005146:	f042 0401 	orreq.w	r4, r2, #1
 800514a:	b9ac      	cbnz	r4, 8005178 <TIM_Base_SetConfig+0x48>
 800514c:	4d37      	ldr	r5, [pc, #220]	@ (800522c <TIM_Base_SetConfig+0xfc>)
 800514e:	42a8      	cmp	r0, r5
 8005150:	bf14      	ite	ne
 8005152:	2500      	movne	r5, #0
 8005154:	2501      	moveq	r5, #1
 8005156:	4e36      	ldr	r6, [pc, #216]	@ (8005230 <TIM_Base_SetConfig+0x100>)
 8005158:	42b0      	cmp	r0, r6
 800515a:	d00d      	beq.n	8005178 <TIM_Base_SetConfig+0x48>
 800515c:	b965      	cbnz	r5, 8005178 <TIM_Base_SetConfig+0x48>
 800515e:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8005162:	f505 3582 	add.w	r5, r5, #66560	@ 0x10400
 8005166:	42a8      	cmp	r0, r5
 8005168:	bf14      	ite	ne
 800516a:	2500      	movne	r5, #0
 800516c:	2501      	moveq	r5, #1
 800516e:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8005172:	42b0      	cmp	r0, r6
 8005174:	d000      	beq.n	8005178 <TIM_Base_SetConfig+0x48>
 8005176:	b11d      	cbz	r5, 8005180 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800517c:	684d      	ldr	r5, [r1, #4]
 800517e:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005180:	2c00      	cmp	r4, #0
 8005182:	d133      	bne.n	80051ec <TIM_Base_SetConfig+0xbc>
 8005184:	4c29      	ldr	r4, [pc, #164]	@ (800522c <TIM_Base_SetConfig+0xfc>)
 8005186:	42a0      	cmp	r0, r4
 8005188:	bf14      	ite	ne
 800518a:	2400      	movne	r4, #0
 800518c:	2401      	moveq	r4, #1
 800518e:	4d28      	ldr	r5, [pc, #160]	@ (8005230 <TIM_Base_SetConfig+0x100>)
 8005190:	42a8      	cmp	r0, r5
 8005192:	d02b      	beq.n	80051ec <TIM_Base_SetConfig+0xbc>
 8005194:	bb54      	cbnz	r4, 80051ec <TIM_Base_SetConfig+0xbc>
 8005196:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800519a:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 800519e:	42a0      	cmp	r0, r4
 80051a0:	bf14      	ite	ne
 80051a2:	2400      	movne	r4, #0
 80051a4:	2401      	moveq	r4, #1
 80051a6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80051aa:	42a8      	cmp	r0, r5
 80051ac:	d01e      	beq.n	80051ec <TIM_Base_SetConfig+0xbc>
 80051ae:	b9ec      	cbnz	r4, 80051ec <TIM_Base_SetConfig+0xbc>
 80051b0:	4c20      	ldr	r4, [pc, #128]	@ (8005234 <TIM_Base_SetConfig+0x104>)
 80051b2:	42a0      	cmp	r0, r4
 80051b4:	bf14      	ite	ne
 80051b6:	2400      	movne	r4, #0
 80051b8:	2401      	moveq	r4, #1
 80051ba:	f505 359a 	add.w	r5, r5, #78848	@ 0x13400
 80051be:	42a8      	cmp	r0, r5
 80051c0:	d014      	beq.n	80051ec <TIM_Base_SetConfig+0xbc>
 80051c2:	b99c      	cbnz	r4, 80051ec <TIM_Base_SetConfig+0xbc>
 80051c4:	4c1c      	ldr	r4, [pc, #112]	@ (8005238 <TIM_Base_SetConfig+0x108>)
 80051c6:	42a0      	cmp	r0, r4
 80051c8:	bf14      	ite	ne
 80051ca:	2400      	movne	r4, #0
 80051cc:	2401      	moveq	r4, #1
 80051ce:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80051d2:	42a8      	cmp	r0, r5
 80051d4:	d00a      	beq.n	80051ec <TIM_Base_SetConfig+0xbc>
 80051d6:	b94c      	cbnz	r4, 80051ec <TIM_Base_SetConfig+0xbc>
 80051d8:	4c18      	ldr	r4, [pc, #96]	@ (800523c <TIM_Base_SetConfig+0x10c>)
 80051da:	42a0      	cmp	r0, r4
 80051dc:	bf14      	ite	ne
 80051de:	2400      	movne	r4, #0
 80051e0:	2401      	moveq	r4, #1
 80051e2:	f5a5 3596 	sub.w	r5, r5, #76800	@ 0x12c00
 80051e6:	42a8      	cmp	r0, r5
 80051e8:	d000      	beq.n	80051ec <TIM_Base_SetConfig+0xbc>
 80051ea:	b11c      	cbz	r4, 80051f4 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f0:	68cc      	ldr	r4, [r1, #12]
 80051f2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f8:	694c      	ldr	r4, [r1, #20]
 80051fa:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051fc:	688c      	ldr	r4, [r1, #8]
 80051fe:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005200:	680c      	ldr	r4, [r1, #0]
 8005202:	6284      	str	r4, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005204:	4c0e      	ldr	r4, [pc, #56]	@ (8005240 <TIM_Base_SetConfig+0x110>)
 8005206:	42a0      	cmp	r0, r4
 8005208:	bf08      	it	eq
 800520a:	f042 0201 	orreq.w	r2, r2, #1
 800520e:	b10a      	cbz	r2, 8005214 <TIM_Base_SetConfig+0xe4>
    TIMx->RCR = Structure->RepetitionCounter;
 8005210:	690a      	ldr	r2, [r1, #16]
 8005212:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005214:	6802      	ldr	r2, [r0, #0]
 8005216:	f042 0204 	orr.w	r2, r2, #4
 800521a:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800521c:	2201      	movs	r2, #1
 800521e:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8005220:	6003      	str	r3, [r0, #0]
}
 8005222:	bc70      	pop	{r4, r5, r6}
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40000800 	.word	0x40000800
 8005230:	40000400 	.word	0x40000400
 8005234:	40014400 	.word	0x40014400
 8005238:	40001800 	.word	0x40001800
 800523c:	40002000 	.word	0x40002000
 8005240:	40010400 	.word	0x40010400

08005244 <TIM_OC2_SetConfig>:
{
 8005244:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8005246:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005248:	6a02      	ldr	r2, [r0, #32]
 800524a:	f022 0210 	bic.w	r2, r2, #16
 800524e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005250:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005252:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005254:	4c14      	ldr	r4, [pc, #80]	@ (80052a8 <TIM_OC2_SetConfig+0x64>)
 8005256:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005258:	680d      	ldr	r5, [r1, #0]
 800525a:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800525e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005262:	688c      	ldr	r4, [r1, #8]
 8005264:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005268:	4c10      	ldr	r4, [pc, #64]	@ (80052ac <TIM_OC2_SetConfig+0x68>)
 800526a:	4e11      	ldr	r6, [pc, #68]	@ (80052b0 <TIM_OC2_SetConfig+0x6c>)
 800526c:	42b0      	cmp	r0, r6
 800526e:	bf18      	it	ne
 8005270:	42a0      	cmpne	r0, r4
 8005272:	bf0c      	ite	eq
 8005274:	2401      	moveq	r4, #1
 8005276:	2400      	movne	r4, #0
 8005278:	d106      	bne.n	8005288 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800527a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800527e:	68ce      	ldr	r6, [r1, #12]
 8005280:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005288:	b13c      	cbz	r4, 800529a <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800528a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800528e:	694c      	ldr	r4, [r1, #20]
 8005290:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005294:	698c      	ldr	r4, [r1, #24]
 8005296:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800529a:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800529c:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800529e:	684a      	ldr	r2, [r1, #4]
 80052a0:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80052a2:	6203      	str	r3, [r0, #32]
}
 80052a4:	bc70      	pop	{r4, r5, r6}
 80052a6:	4770      	bx	lr
 80052a8:	feff8cff 	.word	0xfeff8cff
 80052ac:	40010000 	.word	0x40010000
 80052b0:	40010400 	.word	0x40010400

080052b4 <HAL_TIM_PWM_ConfigChannel>:
{
 80052b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80052b6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	f000 8095 	beq.w	80053ea <HAL_TIM_PWM_ConfigChannel+0x136>
 80052c0:	4604      	mov	r4, r0
 80052c2:	460d      	mov	r5, r1
 80052c4:	2301      	movs	r3, #1
 80052c6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80052ca:	2a14      	cmp	r2, #20
 80052cc:	f200 8088 	bhi.w	80053e0 <HAL_TIM_PWM_ConfigChannel+0x12c>
 80052d0:	e8df f002 	tbb	[pc, r2]
 80052d4:	8686860b 	.word	0x8686860b
 80052d8:	8686861f 	.word	0x8686861f
 80052dc:	86868634 	.word	0x86868634
 80052e0:	86868648 	.word	0x86868648
 80052e4:	8686865d 	.word	0x8686865d
 80052e8:	71          	.byte	0x71
 80052e9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	f7ff fbb6 	bl	8004a5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052f0:	6822      	ldr	r2, [r4, #0]
 80052f2:	6993      	ldr	r3, [r2, #24]
 80052f4:	f043 0308 	orr.w	r3, r3, #8
 80052f8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052fa:	6822      	ldr	r2, [r4, #0]
 80052fc:	6993      	ldr	r3, [r2, #24]
 80052fe:	f023 0304 	bic.w	r3, r3, #4
 8005302:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	6993      	ldr	r3, [r2, #24]
 8005308:	6929      	ldr	r1, [r5, #16]
 800530a:	430b      	orrs	r3, r1
 800530c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800530e:	2000      	movs	r0, #0
      break;
 8005310:	e067      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005312:	6800      	ldr	r0, [r0, #0]
 8005314:	f7ff ff96 	bl	8005244 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	6993      	ldr	r3, [r2, #24]
 800531c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005320:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	6993      	ldr	r3, [r2, #24]
 8005326:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800532a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800532c:	6822      	ldr	r2, [r4, #0]
 800532e:	6993      	ldr	r3, [r2, #24]
 8005330:	6929      	ldr	r1, [r5, #16]
 8005332:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005336:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005338:	2000      	movs	r0, #0
      break;
 800533a:	e052      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800533c:	6800      	ldr	r0, [r0, #0]
 800533e:	f7ff fbc1 	bl	8004ac4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005342:	6822      	ldr	r2, [r4, #0]
 8005344:	69d3      	ldr	r3, [r2, #28]
 8005346:	f043 0308 	orr.w	r3, r3, #8
 800534a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800534c:	6822      	ldr	r2, [r4, #0]
 800534e:	69d3      	ldr	r3, [r2, #28]
 8005350:	f023 0304 	bic.w	r3, r3, #4
 8005354:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	69d3      	ldr	r3, [r2, #28]
 800535a:	6929      	ldr	r1, [r5, #16]
 800535c:	430b      	orrs	r3, r1
 800535e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005360:	2000      	movs	r0, #0
      break;
 8005362:	e03e      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005364:	6800      	ldr	r0, [r0, #0]
 8005366:	f7ff fbe5 	bl	8004b34 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	69d3      	ldr	r3, [r2, #28]
 800536e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005372:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005374:	6822      	ldr	r2, [r4, #0]
 8005376:	69d3      	ldr	r3, [r2, #28]
 8005378:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800537c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	69d3      	ldr	r3, [r2, #28]
 8005382:	6929      	ldr	r1, [r5, #16]
 8005384:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005388:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800538a:	2000      	movs	r0, #0
      break;
 800538c:	e029      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800538e:	6800      	ldr	r0, [r0, #0]
 8005390:	f7ff fbfa 	bl	8004b88 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005394:	6822      	ldr	r2, [r4, #0]
 8005396:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005398:	f043 0308 	orr.w	r3, r3, #8
 800539c:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80053a2:	f023 0304 	bic.w	r3, r3, #4
 80053a6:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053a8:	6822      	ldr	r2, [r4, #0]
 80053aa:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80053ac:	6929      	ldr	r1, [r5, #16]
 80053ae:	430b      	orrs	r3, r1
 80053b0:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2000      	movs	r0, #0
      break;
 80053b4:	e015      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053b6:	6800      	ldr	r0, [r0, #0]
 80053b8:	f7ff fc10 	bl	8004bdc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053bc:	6822      	ldr	r2, [r4, #0]
 80053be:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80053c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053c4:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053c6:	6822      	ldr	r2, [r4, #0]
 80053c8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80053ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053ce:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053d0:	6822      	ldr	r2, [r4, #0]
 80053d2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80053d4:	6929      	ldr	r1, [r5, #16]
 80053d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80053da:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80053dc:	2000      	movs	r0, #0
      break;
 80053de:	e000      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 80053e0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80053e2:	2300      	movs	r3, #0
 80053e4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80053ea:	2002      	movs	r0, #2
 80053ec:	e7fc      	b.n	80053e8 <HAL_TIM_PWM_ConfigChannel+0x134>
	...

080053f0 <TIM_TI1_SetConfig>:
{
 80053f0:	b470      	push	{r4, r5, r6}
 80053f2:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 80053f4:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f6:	6a04      	ldr	r4, [r0, #32]
 80053f8:	f024 0401 	bic.w	r4, r4, #1
 80053fc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053fe:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005400:	4d1d      	ldr	r5, [pc, #116]	@ (8005478 <TIM_TI1_SetConfig+0x88>)
 8005402:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005406:	bf18      	it	ne
 8005408:	42a8      	cmpne	r0, r5
 800540a:	d023      	beq.n	8005454 <TIM_TI1_SetConfig+0x64>
 800540c:	4a1b      	ldr	r2, [pc, #108]	@ (800547c <TIM_TI1_SetConfig+0x8c>)
 800540e:	4290      	cmp	r0, r2
 8005410:	bf14      	ite	ne
 8005412:	2200      	movne	r2, #0
 8005414:	2201      	moveq	r2, #1
 8005416:	f5a5 457c 	sub.w	r5, r5, #64512	@ 0xfc00
 800541a:	42a8      	cmp	r0, r5
 800541c:	d01a      	beq.n	8005454 <TIM_TI1_SetConfig+0x64>
 800541e:	b9ca      	cbnz	r2, 8005454 <TIM_TI1_SetConfig+0x64>
 8005420:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005424:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 8005428:	4290      	cmp	r0, r2
 800542a:	bf14      	ite	ne
 800542c:	2200      	movne	r2, #0
 800542e:	2201      	moveq	r2, #1
 8005430:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8005434:	42a8      	cmp	r0, r5
 8005436:	d00d      	beq.n	8005454 <TIM_TI1_SetConfig+0x64>
 8005438:	b962      	cbnz	r2, 8005454 <TIM_TI1_SetConfig+0x64>
 800543a:	4a11      	ldr	r2, [pc, #68]	@ (8005480 <TIM_TI1_SetConfig+0x90>)
 800543c:	4290      	cmp	r0, r2
 800543e:	bf14      	ite	ne
 8005440:	2200      	movne	r2, #0
 8005442:	2201      	moveq	r2, #1
 8005444:	f505 359a 	add.w	r5, r5, #78848	@ 0x13400
 8005448:	42a8      	cmp	r0, r5
 800544a:	d003      	beq.n	8005454 <TIM_TI1_SetConfig+0x64>
 800544c:	b912      	cbnz	r2, 8005454 <TIM_TI1_SetConfig+0x64>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800544e:	f044 0201 	orr.w	r2, r4, #1
 8005452:	e003      	b.n	800545c <TIM_TI1_SetConfig+0x6c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005454:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8005458:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800545c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	b2db      	uxtb	r3, r3
 8005464:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005466:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800546a:	f001 010a 	and.w	r1, r1, #10
 800546e:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8005470:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005472:	6201      	str	r1, [r0, #32]
}
 8005474:	bc70      	pop	{r4, r5, r6}
 8005476:	4770      	bx	lr
 8005478:	40010000 	.word	0x40010000
 800547c:	40000800 	.word	0x40000800
 8005480:	40001800 	.word	0x40001800

08005484 <HAL_TIM_IC_ConfigChannel>:
{
 8005484:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005486:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d05e      	beq.n	800554c <HAL_TIM_IC_ConfigChannel+0xc8>
 800548e:	4604      	mov	r4, r0
 8005490:	460d      	mov	r5, r1
 8005492:	2301      	movs	r3, #1
 8005494:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8005498:	2a0c      	cmp	r2, #12
 800549a:	d852      	bhi.n	8005542 <HAL_TIM_IC_ConfigChannel+0xbe>
 800549c:	e8df f002 	tbb	[pc, r2]
 80054a0:	51515107 	.word	0x51515107
 80054a4:	51515119 	.word	0x51515119
 80054a8:	5151512c 	.word	0x5151512c
 80054ac:	3e          	.byte	0x3e
 80054ad:	00          	.byte	0x00
    TIM_TI1_SetConfig(htim->Instance,
 80054ae:	68cb      	ldr	r3, [r1, #12]
 80054b0:	684a      	ldr	r2, [r1, #4]
 80054b2:	6809      	ldr	r1, [r1, #0]
 80054b4:	6800      	ldr	r0, [r0, #0]
 80054b6:	f7ff ff9b 	bl	80053f0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	6993      	ldr	r3, [r2, #24]
 80054be:	f023 030c 	bic.w	r3, r3, #12
 80054c2:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80054c4:	6822      	ldr	r2, [r4, #0]
 80054c6:	6993      	ldr	r3, [r2, #24]
 80054c8:	68a9      	ldr	r1, [r5, #8]
 80054ca:	430b      	orrs	r3, r1
 80054cc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2000      	movs	r0, #0
 80054d0:	e038      	b.n	8005544 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI2_SetConfig(htim->Instance,
 80054d2:	68cb      	ldr	r3, [r1, #12]
 80054d4:	684a      	ldr	r2, [r1, #4]
 80054d6:	6809      	ldr	r1, [r1, #0]
 80054d8:	6800      	ldr	r0, [r0, #0]
 80054da:	f7ff fbbc 	bl	8004c56 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054de:	6822      	ldr	r2, [r4, #0]
 80054e0:	6993      	ldr	r3, [r2, #24]
 80054e2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80054e6:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054e8:	6822      	ldr	r2, [r4, #0]
 80054ea:	6993      	ldr	r3, [r2, #24]
 80054ec:	68a9      	ldr	r1, [r5, #8]
 80054ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80054f2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80054f4:	2000      	movs	r0, #0
 80054f6:	e025      	b.n	8005544 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI3_SetConfig(htim->Instance,
 80054f8:	68cb      	ldr	r3, [r1, #12]
 80054fa:	684a      	ldr	r2, [r1, #4]
 80054fc:	6809      	ldr	r1, [r1, #0]
 80054fe:	6800      	ldr	r0, [r0, #0]
 8005500:	f7ff fbd8 	bl	8004cb4 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005504:	6822      	ldr	r2, [r4, #0]
 8005506:	69d3      	ldr	r3, [r2, #28]
 8005508:	f023 030c 	bic.w	r3, r3, #12
 800550c:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	69d3      	ldr	r3, [r2, #28]
 8005512:	68a9      	ldr	r1, [r5, #8]
 8005514:	430b      	orrs	r3, r1
 8005516:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005518:	2000      	movs	r0, #0
 800551a:	e013      	b.n	8005544 <HAL_TIM_IC_ConfigChannel+0xc0>
    TIM_TI4_SetConfig(htim->Instance,
 800551c:	68cb      	ldr	r3, [r1, #12]
 800551e:	684a      	ldr	r2, [r1, #4]
 8005520:	6809      	ldr	r1, [r1, #0]
 8005522:	6800      	ldr	r0, [r0, #0]
 8005524:	f7ff fbe1 	bl	8004cea <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005528:	6822      	ldr	r2, [r4, #0]
 800552a:	69d3      	ldr	r3, [r2, #28]
 800552c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005530:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	69d3      	ldr	r3, [r2, #28]
 8005536:	68a9      	ldr	r1, [r5, #8]
 8005538:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800553c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800553e:	2000      	movs	r0, #0
 8005540:	e000      	b.n	8005544 <HAL_TIM_IC_ConfigChannel+0xc0>
  __HAL_LOCK(htim);
 8005542:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005544:	2300      	movs	r3, #0
 8005546:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800554a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800554c:	2002      	movs	r0, #2
 800554e:	e7fc      	b.n	800554a <HAL_TIM_IC_ConfigChannel+0xc6>

08005550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005550:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005552:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005554:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005558:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800555c:	430a      	orrs	r2, r1
 800555e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005562:	6082      	str	r2, [r0, #8]
}
 8005564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005568:	4770      	bx	lr
	...

0800556c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800556c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d076      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0xf6>
{
 8005574:	b510      	push	{r4, lr}
 8005576:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005578:	2301      	movs	r3, #1
 800557a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800557e:	2302      	movs	r3, #2
 8005580:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005584:	6802      	ldr	r2, [r0, #0]
 8005586:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005588:	4b37      	ldr	r3, [pc, #220]	@ (8005668 <HAL_TIM_ConfigClockSource+0xfc>)
 800558a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800558c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800558e:	680b      	ldr	r3, [r1, #0]
 8005590:	2b60      	cmp	r3, #96	@ 0x60
 8005592:	d04c      	beq.n	800562e <HAL_TIM_ConfigClockSource+0xc2>
 8005594:	d823      	bhi.n	80055de <HAL_TIM_ConfigClockSource+0x72>
 8005596:	2b40      	cmp	r3, #64	@ 0x40
 8005598:	d054      	beq.n	8005644 <HAL_TIM_ConfigClockSource+0xd8>
 800559a:	d811      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x54>
 800559c:	2b20      	cmp	r3, #32
 800559e:	d003      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0x3c>
 80055a0:	d80a      	bhi.n	80055b8 <HAL_TIM_ConfigClockSource+0x4c>
 80055a2:	b10b      	cbz	r3, 80055a8 <HAL_TIM_ConfigClockSource+0x3c>
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	d105      	bne.n	80055b4 <HAL_TIM_ConfigClockSource+0x48>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055a8:	4619      	mov	r1, r3
 80055aa:	6820      	ldr	r0, [r4, #0]
 80055ac:	f7ff fbb8 	bl	8004d20 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80055b0:	2000      	movs	r0, #0
      break;
 80055b2:	e028      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 80055b4:	2001      	movs	r0, #1
 80055b6:	e026      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 80055b8:	2b30      	cmp	r3, #48	@ 0x30
 80055ba:	d0f5      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0x3c>
      status = HAL_ERROR;
 80055bc:	2001      	movs	r0, #1
 80055be:	e022      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 80055c0:	2b50      	cmp	r3, #80	@ 0x50
 80055c2:	d10a      	bne.n	80055da <HAL_TIM_ConfigClockSource+0x6e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c4:	68ca      	ldr	r2, [r1, #12]
 80055c6:	6849      	ldr	r1, [r1, #4]
 80055c8:	6820      	ldr	r0, [r4, #0]
 80055ca:	f7ff fb31 	bl	8004c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055ce:	2150      	movs	r1, #80	@ 0x50
 80055d0:	6820      	ldr	r0, [r4, #0]
 80055d2:	f7ff fba5 	bl	8004d20 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80055d6:	2000      	movs	r0, #0
      break;
 80055d8:	e015      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 80055da:	2001      	movs	r0, #1
 80055dc:	e013      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 80055de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e2:	d03a      	beq.n	800565a <HAL_TIM_ConfigClockSource+0xee>
 80055e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e8:	d014      	beq.n	8005614 <HAL_TIM_ConfigClockSource+0xa8>
 80055ea:	2b70      	cmp	r3, #112	@ 0x70
 80055ec:	d137      	bne.n	800565e <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 80055ee:	68cb      	ldr	r3, [r1, #12]
 80055f0:	684a      	ldr	r2, [r1, #4]
 80055f2:	6889      	ldr	r1, [r1, #8]
 80055f4:	6820      	ldr	r0, [r4, #0]
 80055f6:	f7ff ffab 	bl	8005550 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055fe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005602:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005604:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005606:	2301      	movs	r3, #1
 8005608:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800560c:	2300      	movs	r3, #0
 800560e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005612:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8005614:	68cb      	ldr	r3, [r1, #12]
 8005616:	684a      	ldr	r2, [r1, #4]
 8005618:	6889      	ldr	r1, [r1, #8]
 800561a:	6820      	ldr	r0, [r4, #0]
 800561c:	f7ff ff98 	bl	8005550 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005620:	6822      	ldr	r2, [r4, #0]
 8005622:	6893      	ldr	r3, [r2, #8]
 8005624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005628:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800562a:	2000      	movs	r0, #0
      break;
 800562c:	e7eb      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800562e:	68ca      	ldr	r2, [r1, #12]
 8005630:	6849      	ldr	r1, [r1, #4]
 8005632:	6820      	ldr	r0, [r4, #0]
 8005634:	f7ff fb2a 	bl	8004c8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005638:	2160      	movs	r1, #96	@ 0x60
 800563a:	6820      	ldr	r0, [r4, #0]
 800563c:	f7ff fb70 	bl	8004d20 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005640:	2000      	movs	r0, #0
      break;
 8005642:	e7e0      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005644:	68ca      	ldr	r2, [r1, #12]
 8005646:	6849      	ldr	r1, [r1, #4]
 8005648:	6820      	ldr	r0, [r4, #0]
 800564a:	f7ff faf1 	bl	8004c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800564e:	2140      	movs	r1, #64	@ 0x40
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	f7ff fb65 	bl	8004d20 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2000      	movs	r0, #0
      break;
 8005658:	e7d5      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 800565a:	2000      	movs	r0, #0
 800565c:	e7d3      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 800565e:	2001      	movs	r0, #1
 8005660:	e7d1      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8005662:	2002      	movs	r0, #2
}
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	fffe0088 	.word	0xfffe0088

0800566c <TIM_SlaveTimer_SetConfig>:
{
 800566c:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 800566e:	6804      	ldr	r4, [r0, #0]
 8005670:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005672:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005676:	684b      	ldr	r3, [r1, #4]
 8005678:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800567a:	4a2a      	ldr	r2, [pc, #168]	@ (8005724 <TIM_SlaveTimer_SetConfig+0xb8>)
 800567c:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800567e:	680b      	ldr	r3, [r1, #0]
 8005680:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005682:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8005684:	684b      	ldr	r3, [r1, #4]
 8005686:	2b50      	cmp	r3, #80	@ 0x50
 8005688:	d030      	beq.n	80056ec <TIM_SlaveTimer_SetConfig+0x80>
 800568a:	d90b      	bls.n	80056a4 <TIM_SlaveTimer_SetConfig+0x38>
 800568c:	2b60      	cmp	r3, #96	@ 0x60
 800568e:	d034      	beq.n	80056fa <TIM_SlaveTimer_SetConfig+0x8e>
 8005690:	2b70      	cmp	r3, #112	@ 0x70
 8005692:	d143      	bne.n	800571c <TIM_SlaveTimer_SetConfig+0xb0>
      TIM_ETR_SetConfig(htim->Instance,
 8005694:	690b      	ldr	r3, [r1, #16]
 8005696:	688a      	ldr	r2, [r1, #8]
 8005698:	68c9      	ldr	r1, [r1, #12]
 800569a:	6800      	ldr	r0, [r0, #0]
 800569c:	f7ff ff58 	bl	8005550 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80056a0:	2000      	movs	r0, #0
}
 80056a2:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 80056a4:	2b40      	cmp	r3, #64	@ 0x40
 80056a6:	d00c      	beq.n	80056c2 <TIM_SlaveTimer_SetConfig+0x56>
 80056a8:	d82e      	bhi.n	8005708 <TIM_SlaveTimer_SetConfig+0x9c>
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	d02e      	beq.n	800570c <TIM_SlaveTimer_SetConfig+0xa0>
 80056ae:	d804      	bhi.n	80056ba <TIM_SlaveTimer_SetConfig+0x4e>
 80056b0:	b373      	cbz	r3, 8005710 <TIM_SlaveTimer_SetConfig+0xa4>
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d12e      	bne.n	8005714 <TIM_SlaveTimer_SetConfig+0xa8>
 80056b6:	2000      	movs	r0, #0
 80056b8:	e7f3      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
 80056ba:	2b30      	cmp	r3, #48	@ 0x30
 80056bc:	d12c      	bne.n	8005718 <TIM_SlaveTimer_SetConfig+0xac>
 80056be:	2000      	movs	r0, #0
 80056c0:	e7ef      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80056c2:	680b      	ldr	r3, [r1, #0]
 80056c4:	2b05      	cmp	r3, #5
 80056c6:	d02b      	beq.n	8005720 <TIM_SlaveTimer_SetConfig+0xb4>
      tmpccer = htim->Instance->CCER;
 80056c8:	6803      	ldr	r3, [r0, #0]
 80056ca:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	f022 0201 	bic.w	r2, r2, #1
 80056d2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80056d4:	6802      	ldr	r2, [r0, #0]
 80056d6:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80056dc:	6909      	ldr	r1, [r1, #16]
 80056de:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80056e2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80056e4:	6803      	ldr	r3, [r0, #0]
 80056e6:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80056e8:	2000      	movs	r0, #0
      break;
 80056ea:	e7da      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ec:	690a      	ldr	r2, [r1, #16]
 80056ee:	6889      	ldr	r1, [r1, #8]
 80056f0:	6800      	ldr	r0, [r0, #0]
 80056f2:	f7ff fa9d 	bl	8004c30 <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2000      	movs	r0, #0
      break;
 80056f8:	e7d3      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056fa:	690a      	ldr	r2, [r1, #16]
 80056fc:	6889      	ldr	r1, [r1, #8]
 80056fe:	6800      	ldr	r0, [r0, #0]
 8005700:	f7ff fac4 	bl	8004c8c <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8005704:	2000      	movs	r0, #0
      break;
 8005706:	e7cc      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
      status = HAL_ERROR;
 8005708:	2001      	movs	r0, #1
 800570a:	e7ca      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
  switch (sSlaveConfig->InputTrigger)
 800570c:	2000      	movs	r0, #0
 800570e:	e7c8      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
 8005710:	2000      	movs	r0, #0
 8005712:	e7c6      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
      status = HAL_ERROR;
 8005714:	2001      	movs	r0, #1
 8005716:	e7c4      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
 8005718:	2001      	movs	r0, #1
 800571a:	e7c2      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
 800571c:	2001      	movs	r0, #1
 800571e:	e7c0      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
        return HAL_ERROR;
 8005720:	2001      	movs	r0, #1
 8005722:	e7be      	b.n	80056a2 <TIM_SlaveTimer_SetConfig+0x36>
 8005724:	fffefff8 	.word	0xfffefff8

08005728 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005728:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d022      	beq.n	8005776 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8005730:	b510      	push	{r4, lr}
 8005732:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005734:	2301      	movs	r3, #1
 8005736:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800573a:	2302      	movs	r3, #2
 800573c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005740:	f7ff ff94 	bl	800566c <TIM_SlaveTimer_SetConfig>
 8005744:	b980      	cbnz	r0, 8005768 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	68d3      	ldr	r3, [r2, #12]
 800574a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800574e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	68d3      	ldr	r3, [r2, #12]
 8005754:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005758:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 800575a:	2301      	movs	r3, #1
 800575c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005760:	2300      	movs	r3, #0
 8005762:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005766:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8005768:	2001      	movs	r0, #1
 800576a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800576e:	2300      	movs	r3, #0
 8005770:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8005774:	e7f7      	b.n	8005766 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8005776:	2002      	movs	r0, #2
}
 8005778:	4770      	bx	lr

0800577a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800577a:	f001 011f 	and.w	r1, r1, #31
 800577e:	f04f 0c01 	mov.w	ip, #1
 8005782:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005786:	6a03      	ldr	r3, [r0, #32]
 8005788:	ea23 030c 	bic.w	r3, r3, ip
 800578c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800578e:	6a03      	ldr	r3, [r0, #32]
 8005790:	408a      	lsls	r2, r1
 8005792:	4313      	orrs	r3, r2
 8005794:	6203      	str	r3, [r0, #32]
}
 8005796:	4770      	bx	lr

08005798 <HAL_TIM_IC_Start_IT>:
{
 8005798:	b510      	push	{r4, lr}
 800579a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800579c:	2910      	cmp	r1, #16
 800579e:	d839      	bhi.n	8005814 <HAL_TIM_IC_Start_IT+0x7c>
 80057a0:	e8df f001 	tbb	[pc, r1]
 80057a4:	38383809 	.word	0x38383809
 80057a8:	38383810 	.word	0x38383810
 80057ac:	3838382c 	.word	0x3838382c
 80057b0:	38383830 	.word	0x38383830
 80057b4:	34          	.byte	0x34
 80057b5:	00          	.byte	0x00
 80057b6:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 80057ba:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80057bc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	e009      	b.n	80057d8 <HAL_TIM_IC_Start_IT+0x40>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80057c4:	f890 203f 	ldrb.w	r2, [r0, #63]	@ 0x3f
 80057c8:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80057ca:	2904      	cmp	r1, #4
 80057cc:	d026      	beq.n	800581c <HAL_TIM_IC_Start_IT+0x84>
 80057ce:	2908      	cmp	r1, #8
 80057d0:	d028      	beq.n	8005824 <HAL_TIM_IC_Start_IT+0x8c>
 80057d2:	f894 3047 	ldrb.w	r3, [r4, #71]	@ 0x47
 80057d6:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80057d8:	2b01      	cmp	r3, #1
 80057da:	bf08      	it	eq
 80057dc:	2a01      	cmpeq	r2, #1
 80057de:	f040 80b7 	bne.w	8005950 <HAL_TIM_IC_Start_IT+0x1b8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e2:	2910      	cmp	r1, #16
 80057e4:	d862      	bhi.n	80058ac <HAL_TIM_IC_Start_IT+0x114>
 80057e6:	e8df f001 	tbb	[pc, r1]
 80057ea:	6121      	.short	0x6121
 80057ec:	612c6161 	.word	0x612c6161
 80057f0:	61556161 	.word	0x61556161
 80057f4:	61596161 	.word	0x61596161
 80057f8:	6161      	.short	0x6161
 80057fa:	5d          	.byte	0x5d
 80057fb:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80057fc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8005800:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005802:	e7e2      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x32>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005804:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8005808:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800580a:	e7de      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x32>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800580c:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 8005810:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005812:	e7da      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x32>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005814:	f890 2043 	ldrb.w	r2, [r0, #67]	@ 0x43
 8005818:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800581a:	e7d6      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x32>
 800581c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005820:	b2db      	uxtb	r3, r3
 8005822:	e7d9      	b.n	80057d8 <HAL_TIM_IC_Start_IT+0x40>
 8005824:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005828:	b2db      	uxtb	r3, r3
 800582a:	e7d5      	b.n	80057d8 <HAL_TIM_IC_Start_IT+0x40>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800582c:	2302      	movs	r3, #2
 800582e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005832:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	68d3      	ldr	r3, [r2, #12]
 800583a:	f043 0302 	orr.w	r3, r3, #2
 800583e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8005840:	e040      	b.n	80058c4 <HAL_TIM_IC_Start_IT+0x12c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005842:	2302      	movs	r3, #2
 8005844:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005848:	2904      	cmp	r1, #4
 800584a:	d033      	beq.n	80058b4 <HAL_TIM_IC_Start_IT+0x11c>
 800584c:	2908      	cmp	r1, #8
 800584e:	d062      	beq.n	8005916 <HAL_TIM_IC_Start_IT+0x17e>
 8005850:	2302      	movs	r3, #2
 8005852:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  switch (Channel)
 8005856:	290c      	cmp	r1, #12
 8005858:	d87c      	bhi.n	8005954 <HAL_TIM_IC_Start_IT+0x1bc>
 800585a:	a301      	add	r3, pc, #4	@ (adr r3, 8005860 <HAL_TIM_IC_Start_IT+0xc8>)
 800585c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8005860:	08005837 	.word	0x08005837
 8005864:	08005955 	.word	0x08005955
 8005868:	08005955 	.word	0x08005955
 800586c:	08005955 	.word	0x08005955
 8005870:	080058bb 	.word	0x080058bb
 8005874:	08005955 	.word	0x08005955
 8005878:	08005955 	.word	0x08005955
 800587c:	08005955 	.word	0x08005955
 8005880:	0800591d 	.word	0x0800591d
 8005884:	08005955 	.word	0x08005955
 8005888:	08005955 	.word	0x08005955
 800588c:	08005955 	.word	0x08005955
 8005890:	08005929 	.word	0x08005929
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005894:	2302      	movs	r3, #2
 8005896:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800589a:	e7d5      	b.n	8005848 <HAL_TIM_IC_Start_IT+0xb0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800589c:	2302      	movs	r3, #2
 800589e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a2:	e7d1      	b.n	8005848 <HAL_TIM_IC_Start_IT+0xb0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a4:	2302      	movs	r3, #2
 80058a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058aa:	e7cd      	b.n	8005848 <HAL_TIM_IC_Start_IT+0xb0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ac:	2302      	movs	r3, #2
 80058ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b2:	e7c9      	b.n	8005848 <HAL_TIM_IC_Start_IT+0xb0>
 80058b4:	2302      	movs	r3, #2
 80058b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	68d3      	ldr	r3, [r2, #12]
 80058be:	f043 0304 	orr.w	r3, r3, #4
 80058c2:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058c4:	2201      	movs	r2, #1
 80058c6:	6820      	ldr	r0, [r4, #0]
 80058c8:	f7ff ff57 	bl	800577a <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	4a23      	ldr	r2, [pc, #140]	@ (800595c <HAL_TIM_IC_Start_IT+0x1c4>)
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d4:	bf18      	it	ne
 80058d6:	4293      	cmpne	r3, r2
 80058d8:	d02c      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x19c>
 80058da:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80058de:	4293      	cmp	r3, r2
 80058e0:	d028      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x19c>
 80058e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d024      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x19c>
 80058ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d020      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x19c>
 80058f2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01c      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x19c>
 80058fa:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80058fe:	4293      	cmp	r3, r2
 8005900:	d018      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x19c>
 8005902:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005906:	4293      	cmp	r3, r2
 8005908:	d014      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x19c>
      __HAL_TIM_ENABLE(htim);
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	f042 0201 	orr.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	2000      	movs	r0, #0
 8005914:	e01d      	b.n	8005952 <HAL_TIM_IC_Start_IT+0x1ba>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005916:	2302      	movs	r3, #2
 8005918:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800591c:	6822      	ldr	r2, [r4, #0]
 800591e:	68d3      	ldr	r3, [r2, #12]
 8005920:	f043 0308 	orr.w	r3, r3, #8
 8005924:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8005926:	e7cd      	b.n	80058c4 <HAL_TIM_IC_Start_IT+0x12c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005928:	6822      	ldr	r2, [r4, #0]
 800592a:	68d3      	ldr	r3, [r2, #12]
 800592c:	f043 0310 	orr.w	r3, r3, #16
 8005930:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8005932:	e7c7      	b.n	80058c4 <HAL_TIM_IC_Start_IT+0x12c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005934:	6899      	ldr	r1, [r3, #8]
 8005936:	4a0a      	ldr	r2, [pc, #40]	@ (8005960 <HAL_TIM_IC_Start_IT+0x1c8>)
 8005938:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593a:	2a06      	cmp	r2, #6
 800593c:	bf18      	it	ne
 800593e:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 8005942:	d009      	beq.n	8005958 <HAL_TIM_IC_Start_IT+0x1c0>
        __HAL_TIM_ENABLE(htim);
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	2000      	movs	r0, #0
 800594e:	e000      	b.n	8005952 <HAL_TIM_IC_Start_IT+0x1ba>
    return HAL_ERROR;
 8005950:	2001      	movs	r0, #1
}
 8005952:	bd10      	pop	{r4, pc}
  switch (Channel)
 8005954:	2001      	movs	r0, #1
 8005956:	e7fc      	b.n	8005952 <HAL_TIM_IC_Start_IT+0x1ba>
 8005958:	2000      	movs	r0, #0
 800595a:	e7fa      	b.n	8005952 <HAL_TIM_IC_Start_IT+0x1ba>
 800595c:	40010000 	.word	0x40010000
 8005960:	00010007 	.word	0x00010007

08005964 <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005964:	4b15      	ldr	r3, [pc, #84]	@ (80059bc <TIM_ResetCallback+0x58>)
 8005966:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800596a:	4b15      	ldr	r3, [pc, #84]	@ (80059c0 <TIM_ResetCallback+0x5c>)
 800596c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005970:	4b14      	ldr	r3, [pc, #80]	@ (80059c4 <TIM_ResetCallback+0x60>)
 8005972:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005976:	4b14      	ldr	r3, [pc, #80]	@ (80059c8 <TIM_ResetCallback+0x64>)
 8005978:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800597c:	4b13      	ldr	r3, [pc, #76]	@ (80059cc <TIM_ResetCallback+0x68>)
 800597e:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005982:	4b13      	ldr	r3, [pc, #76]	@ (80059d0 <TIM_ResetCallback+0x6c>)
 8005984:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005988:	4b12      	ldr	r3, [pc, #72]	@ (80059d4 <TIM_ResetCallback+0x70>)
 800598a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800598e:	4b12      	ldr	r3, [pc, #72]	@ (80059d8 <TIM_ResetCallback+0x74>)
 8005990:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005994:	4b11      	ldr	r3, [pc, #68]	@ (80059dc <TIM_ResetCallback+0x78>)
 8005996:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800599a:	4b11      	ldr	r3, [pc, #68]	@ (80059e0 <TIM_ResetCallback+0x7c>)
 800599c:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80059a0:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <TIM_ResetCallback+0x80>)
 80059a2:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80059a6:	4b10      	ldr	r3, [pc, #64]	@ (80059e8 <TIM_ResetCallback+0x84>)
 80059a8:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80059ac:	4b0f      	ldr	r3, [pc, #60]	@ (80059ec <TIM_ResetCallback+0x88>)
 80059ae:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80059b2:	4b0f      	ldr	r3, [pc, #60]	@ (80059f0 <TIM_ResetCallback+0x8c>)
 80059b4:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	0800e8bd 	.word	0x0800e8bd
 80059c0:	08004a4b 	.word	0x08004a4b
 80059c4:	08004a57 	.word	0x08004a57
 80059c8:	08004a59 	.word	0x08004a59
 80059cc:	08004a4f 	.word	0x08004a4f
 80059d0:	08004a51 	.word	0x08004a51
 80059d4:	08004a4d 	.word	0x08004a4d
 80059d8:	08004a53 	.word	0x08004a53
 80059dc:	08004a55 	.word	0x08004a55
 80059e0:	08004a5b 	.word	0x08004a5b
 80059e4:	08005ca5 	.word	0x08005ca5
 80059e8:	08005ca7 	.word	0x08005ca7
 80059ec:	08005ca9 	.word	0x08005ca9
 80059f0:	08005cab 	.word	0x08005cab

080059f4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80059f4:	b3a0      	cbz	r0, 8005a60 <HAL_TIM_Base_Init+0x6c>
{
 80059f6:	b510      	push	{r4, lr}
 80059f8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80059fa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80059fe:	b313      	cbz	r3, 8005a46 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	2302      	movs	r3, #2
 8005a02:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a06:	4621      	mov	r1, r4
 8005a08:	f851 0b04 	ldr.w	r0, [r1], #4
 8005a0c:	f7ff fb90 	bl	8005130 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a16:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005a1a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005a1e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005a22:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005a26:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005a32:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005a36:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005a3a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005a3e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005a42:	2000      	movs	r0, #0
}
 8005a44:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005a46:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 8005a4a:	f7ff ff8b 	bl	8005964 <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 8005a4e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005a50:	b11b      	cbz	r3, 8005a5a <HAL_TIM_Base_Init+0x66>
    htim->Base_MspInitCallback(htim);
 8005a52:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005a54:	4620      	mov	r0, r4
 8005a56:	4798      	blx	r3
 8005a58:	e7d2      	b.n	8005a00 <HAL_TIM_Base_Init+0xc>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005a5a:	4b02      	ldr	r3, [pc, #8]	@ (8005a64 <HAL_TIM_Base_Init+0x70>)
 8005a5c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8005a5e:	e7f8      	b.n	8005a52 <HAL_TIM_Base_Init+0x5e>
    return HAL_ERROR;
 8005a60:	2001      	movs	r0, #1
}
 8005a62:	4770      	bx	lr
 8005a64:	0800f4ad 	.word	0x0800f4ad

08005a68 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005a68:	b3a0      	cbz	r0, 8005ad4 <HAL_TIM_PWM_Init+0x6c>
{
 8005a6a:	b510      	push	{r4, lr}
 8005a6c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005a72:	b313      	cbz	r3, 8005aba <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	2302      	movs	r3, #2
 8005a76:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005a80:	f7ff fb56 	bl	8005130 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a84:	2301      	movs	r3, #1
 8005a86:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005a8e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005a92:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005a96:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005a9a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005aa6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005aaa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005aae:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005ab2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005ab6:	2000      	movs	r0, #0
}
 8005ab8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005aba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 8005abe:	f7ff ff51 	bl	8005964 <TIM_ResetCallback>
    if (htim->PWM_MspInitCallback == NULL)
 8005ac2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ac4:	b11b      	cbz	r3, 8005ace <HAL_TIM_PWM_Init+0x66>
    htim->PWM_MspInitCallback(htim);
 8005ac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ac8:	4620      	mov	r0, r4
 8005aca:	4798      	blx	r3
 8005acc:	e7d2      	b.n	8005a74 <HAL_TIM_PWM_Init+0xc>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005ace:	4b02      	ldr	r3, [pc, #8]	@ (8005ad8 <HAL_TIM_PWM_Init+0x70>)
 8005ad0:	6663      	str	r3, [r4, #100]	@ 0x64
 8005ad2:	e7f8      	b.n	8005ac6 <HAL_TIM_PWM_Init+0x5e>
    return HAL_ERROR;
 8005ad4:	2001      	movs	r0, #1
}
 8005ad6:	4770      	bx	lr
 8005ad8:	0800f419 	.word	0x0800f419

08005adc <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8005adc:	b3a0      	cbz	r0, 8005b48 <HAL_TIM_IC_Init+0x6c>
{
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005ae6:	b313      	cbz	r3, 8005b2e <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aee:	4621      	mov	r1, r4
 8005af0:	f851 0b04 	ldr.w	r0, [r1], #4
 8005af4:	f7ff fb1c 	bl	8005130 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005b02:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005b06:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005b0a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005b0e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b16:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005b1a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005b1e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005b22:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005b26:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005b2a:	2000      	movs	r0, #0
}
 8005b2c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005b2e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 8005b32:	f7ff ff17 	bl	8005964 <TIM_ResetCallback>
    if (htim->IC_MspInitCallback == NULL)
 8005b36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005b38:	b11b      	cbz	r3, 8005b42 <HAL_TIM_IC_Init+0x66>
    htim->IC_MspInitCallback(htim);
 8005b3a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	4798      	blx	r3
 8005b40:	e7d2      	b.n	8005ae8 <HAL_TIM_IC_Init+0xc>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8005b42:	4b02      	ldr	r3, [pc, #8]	@ (8005b4c <HAL_TIM_IC_Init+0x70>)
 8005b44:	6563      	str	r3, [r4, #84]	@ 0x54
 8005b46:	e7f8      	b.n	8005b3a <HAL_TIM_IC_Init+0x5e>
    return HAL_ERROR;
 8005b48:	2001      	movs	r0, #1
}
 8005b4a:	4770      	bx	lr
 8005b4c:	08004a49 	.word	0x08004a49

08005b50 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b50:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005b54:	2a01      	cmp	r2, #1
 8005b56:	d045      	beq.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 8005b58:	b470      	push	{r4, r5, r6}
 8005b5a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b62:	2202      	movs	r2, #2
 8005b64:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b68:	6802      	ldr	r2, [r0, #0]
 8005b6a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b6c:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b6e:	4e1e      	ldr	r6, [pc, #120]	@ (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8005b70:	4d1e      	ldr	r5, [pc, #120]	@ (8005bec <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8005b72:	42aa      	cmp	r2, r5
 8005b74:	bf18      	it	ne
 8005b76:	42b2      	cmpne	r2, r6
 8005b78:	d103      	bne.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b7a:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b7e:	684d      	ldr	r5, [r1, #4]
 8005b80:	4328      	orrs	r0, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b82:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b86:	680d      	ldr	r5, [r1, #0]
 8005b88:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b8a:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4816      	ldr	r0, [pc, #88]	@ (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8005b90:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005b94:	bf18      	it	ne
 8005b96:	4282      	cmpne	r2, r0
 8005b98:	d017      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b9a:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8005b9e:	4282      	cmp	r2, r0
 8005ba0:	d013      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ba2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005ba6:	4282      	cmp	r2, r0
 8005ba8:	d00f      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005baa:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005bae:	4282      	cmp	r2, r0
 8005bb0:	d00b      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bb2:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8005bb6:	4282      	cmp	r2, r0
 8005bb8:	d007      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bba:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8005bbe:	4282      	cmp	r2, r0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bc2:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8005bc6:	4282      	cmp	r2, r0
 8005bc8:	d104      	bne.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bca:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bce:	6889      	ldr	r1, [r1, #8]
 8005bd0:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bd2:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005be0:	bc70      	pop	{r4, r5, r6}
 8005be2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005be4:	2002      	movs	r0, #2
}
 8005be6:	4770      	bx	lr
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40010400 	.word	0x40010400

08005bf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d03c      	beq.n	8005c72 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 8005bf8:	b430      	push	{r4, r5}
 8005bfa:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c02:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c08:	6888      	ldr	r0, [r1, #8]
 8005c0a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c10:	6848      	ldr	r0, [r1, #4]
 8005c12:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c18:	6808      	ldr	r0, [r1, #0]
 8005c1a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c20:	6908      	ldr	r0, [r1, #16]
 8005c22:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c28:	6948      	ldr	r0, [r1, #20]
 8005c2a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c30:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8005c32:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c34:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8005c38:	6988      	ldr	r0, [r1, #24]
 8005c3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c3e:	6810      	ldr	r0, [r2, #0]
 8005c40:	4d0d      	ldr	r5, [pc, #52]	@ (8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8005c42:	4c0e      	ldr	r4, [pc, #56]	@ (8005c7c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8005c44:	42a0      	cmp	r0, r4
 8005c46:	bf18      	it	ne
 8005c48:	42a8      	cmpne	r0, r5
 8005c4a:	d10c      	bne.n	8005c66 <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c50:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8005c52:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c5a:	69cc      	ldr	r4, [r1, #28]
 8005c5c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c5e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c62:	6a09      	ldr	r1, [r1, #32]
 8005c64:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c66:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c68:	2000      	movs	r0, #0
 8005c6a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8005c6e:	bc30      	pop	{r4, r5}
 8005c70:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005c72:	2002      	movs	r0, #2
}
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40010400 	.word	0x40010400

08005c80 <HAL_TIMEx_RemapConfig>:
{
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 8005c80:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d00b      	beq.n	8005ca0 <HAL_TIMEx_RemapConfig+0x20>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
 8005c8e:	6802      	ldr	r2, [r0, #0]
 8005c90:	6511      	str	r1, [r2, #80]	@ 0x50

  htim->State = HAL_TIM_STATE_READY;
 8005c92:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c96:	2300      	movs	r3, #0
 8005c98:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  return HAL_OK;
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005ca0:	2002      	movs	r0, #2
}
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_TIMEx_CommutHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca8:	4770      	bx	lr

08005caa <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005caa:	4770      	bx	lr

08005cac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cac:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	e852 3f00 	ldrex	r3, [r2]
 8005cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	e842 3100 	strex	r1, r3, [r2]
 8005cba:	2900      	cmp	r1, #0
 8005cbc:	d1f6      	bne.n	8005cac <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	f102 0308 	add.w	r3, r2, #8
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	3208      	adds	r2, #8
 8005cce:	e842 3100 	strex	r1, r3, [r2]
 8005cd2:	2900      	cmp	r1, #0
 8005cd4:	d1f3      	bne.n	8005cbe <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d006      	beq.n	8005cea <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ce6:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8005ce8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	e852 3f00 	ldrex	r3, [r2]
 8005cf0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	e842 3100 	strex	r1, r3, [r2]
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	d1f6      	bne.n	8005cea <UART_EndRxTransfer+0x3e>
 8005cfc:	e7ee      	b.n	8005cdc <UART_EndRxTransfer+0x30>
	...

08005d00 <UART_SetConfig>:
{
 8005d00:	b510      	push	{r4, lr}
 8005d02:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d04:	6883      	ldr	r3, [r0, #8]
 8005d06:	6902      	ldr	r2, [r0, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	6942      	ldr	r2, [r0, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	69c2      	ldr	r2, [r0, #28]
 8005d10:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d12:	6801      	ldr	r1, [r0, #0]
 8005d14:	6808      	ldr	r0, [r1, #0]
 8005d16:	4a91      	ldr	r2, [pc, #580]	@ (8005f5c <UART_SetConfig+0x25c>)
 8005d18:	4002      	ands	r2, r0
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	6853      	ldr	r3, [r2, #4]
 8005d22:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005d26:	68e1      	ldr	r1, [r4, #12]
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d2c:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8005d2e:	6a23      	ldr	r3, [r4, #32]
 8005d30:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d32:	6821      	ldr	r1, [r4, #0]
 8005d34:	688b      	ldr	r3, [r1, #8]
 8005d36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	4a87      	ldr	r2, [pc, #540]	@ (8005f60 <UART_SetConfig+0x260>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <UART_SetConfig+0x78>
 8005d46:	4a87      	ldr	r2, [pc, #540]	@ (8005f64 <UART_SetConfig+0x264>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d03a      	beq.n	8005dc2 <UART_SetConfig+0xc2>
 8005d4c:	4a86      	ldr	r2, [pc, #536]	@ (8005f68 <UART_SetConfig+0x268>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d04f      	beq.n	8005df2 <UART_SetConfig+0xf2>
 8005d52:	4a86      	ldr	r2, [pc, #536]	@ (8005f6c <UART_SetConfig+0x26c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d05e      	beq.n	8005e16 <UART_SetConfig+0x116>
 8005d58:	4a85      	ldr	r2, [pc, #532]	@ (8005f70 <UART_SetConfig+0x270>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d06d      	beq.n	8005e3a <UART_SetConfig+0x13a>
 8005d5e:	4a85      	ldr	r2, [pc, #532]	@ (8005f74 <UART_SetConfig+0x274>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d07f      	beq.n	8005e64 <UART_SetConfig+0x164>
 8005d64:	4a84      	ldr	r2, [pc, #528]	@ (8005f78 <UART_SetConfig+0x278>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	f000 8091 	beq.w	8005e8e <UART_SetConfig+0x18e>
 8005d6c:	4a83      	ldr	r2, [pc, #524]	@ (8005f7c <UART_SetConfig+0x27c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	f000 80a2 	beq.w	8005eb8 <UART_SetConfig+0x1b8>
 8005d74:	2310      	movs	r3, #16
 8005d76:	e00b      	b.n	8005d90 <UART_SetConfig+0x90>
 8005d78:	4b81      	ldr	r3, [pc, #516]	@ (8005f80 <UART_SetConfig+0x280>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d81b      	bhi.n	8005dbe <UART_SetConfig+0xbe>
 8005d86:	e8df f003 	tbb	[pc, r3]
 8005d8a:	1602      	.short	0x1602
 8005d8c:	18ab      	.short	0x18ab
 8005d8e:	2301      	movs	r3, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d90:	69e0      	ldr	r0, [r4, #28]
 8005d92:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005d96:	f000 80d7 	beq.w	8005f48 <UART_SetConfig+0x248>
    switch (clocksource)
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	f200 8138 	bhi.w	8006010 <UART_SetConfig+0x310>
 8005da0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005da4:	01270114 	.word	0x01270114
 8005da8:	01360112 	.word	0x01360112
 8005dac:	0136012a 	.word	0x0136012a
 8005db0:	01360136 	.word	0x01360136
 8005db4:	012d      	.short	0x012d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db6:	2304      	movs	r3, #4
 8005db8:	e7ea      	b.n	8005d90 <UART_SetConfig+0x90>
 8005dba:	2308      	movs	r3, #8
 8005dbc:	e7e8      	b.n	8005d90 <UART_SetConfig+0x90>
 8005dbe:	2310      	movs	r3, #16
 8005dc0:	e7e6      	b.n	8005d90 <UART_SetConfig+0x90>
 8005dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8005f80 <UART_SetConfig+0x280>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc8:	f003 030c 	and.w	r3, r3, #12
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d80e      	bhi.n	8005dee <UART_SetConfig+0xee>
 8005dd0:	e8df f003 	tbb	[pc, r3]
 8005dd4:	0d0d0d07 	.word	0x0d0d0d07
 8005dd8:	0d0d0d09 	.word	0x0d0d0d09
 8005ddc:	0d0d0d88 	.word	0x0d0d0d88
 8005de0:	0b          	.byte	0x0b
 8005de1:	00          	.byte	0x00
 8005de2:	2300      	movs	r3, #0
 8005de4:	e7d4      	b.n	8005d90 <UART_SetConfig+0x90>
 8005de6:	2304      	movs	r3, #4
 8005de8:	e7d2      	b.n	8005d90 <UART_SetConfig+0x90>
 8005dea:	2308      	movs	r3, #8
 8005dec:	e7d0      	b.n	8005d90 <UART_SetConfig+0x90>
 8005dee:	2310      	movs	r3, #16
 8005df0:	e7ce      	b.n	8005d90 <UART_SetConfig+0x90>
 8005df2:	4b63      	ldr	r3, [pc, #396]	@ (8005f80 <UART_SetConfig+0x280>)
 8005df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d073      	beq.n	8005ee8 <UART_SetConfig+0x1e8>
 8005e00:	d805      	bhi.n	8005e0e <UART_SetConfig+0x10e>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d072      	beq.n	8005eec <UART_SetConfig+0x1ec>
 8005e06:	2b10      	cmp	r3, #16
 8005e08:	d172      	bne.n	8005ef0 <UART_SetConfig+0x1f0>
 8005e0a:	2304      	movs	r3, #4
 8005e0c:	e7c0      	b.n	8005d90 <UART_SetConfig+0x90>
 8005e0e:	2b30      	cmp	r3, #48	@ 0x30
 8005e10:	d170      	bne.n	8005ef4 <UART_SetConfig+0x1f4>
 8005e12:	2308      	movs	r3, #8
 8005e14:	e7bc      	b.n	8005d90 <UART_SetConfig+0x90>
 8005e16:	4b5a      	ldr	r3, [pc, #360]	@ (8005f80 <UART_SetConfig+0x280>)
 8005e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e20:	2b80      	cmp	r3, #128	@ 0x80
 8005e22:	d069      	beq.n	8005ef8 <UART_SetConfig+0x1f8>
 8005e24:	d805      	bhi.n	8005e32 <UART_SetConfig+0x132>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d068      	beq.n	8005efc <UART_SetConfig+0x1fc>
 8005e2a:	2b40      	cmp	r3, #64	@ 0x40
 8005e2c:	d168      	bne.n	8005f00 <UART_SetConfig+0x200>
 8005e2e:	2304      	movs	r3, #4
 8005e30:	e7ae      	b.n	8005d90 <UART_SetConfig+0x90>
 8005e32:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e34:	d166      	bne.n	8005f04 <UART_SetConfig+0x204>
 8005e36:	2308      	movs	r3, #8
 8005e38:	e7aa      	b.n	8005d90 <UART_SetConfig+0x90>
 8005e3a:	4b51      	ldr	r3, [pc, #324]	@ (8005f80 <UART_SetConfig+0x280>)
 8005e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e48:	d05e      	beq.n	8005f08 <UART_SetConfig+0x208>
 8005e4a:	d806      	bhi.n	8005e5a <UART_SetConfig+0x15a>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d05d      	beq.n	8005f0c <UART_SetConfig+0x20c>
 8005e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e54:	d15c      	bne.n	8005f10 <UART_SetConfig+0x210>
 8005e56:	2304      	movs	r3, #4
 8005e58:	e79a      	b.n	8005d90 <UART_SetConfig+0x90>
 8005e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e5e:	d159      	bne.n	8005f14 <UART_SetConfig+0x214>
 8005e60:	2308      	movs	r3, #8
 8005e62:	e795      	b.n	8005d90 <UART_SetConfig+0x90>
 8005e64:	4b46      	ldr	r3, [pc, #280]	@ (8005f80 <UART_SetConfig+0x280>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e72:	d051      	beq.n	8005f18 <UART_SetConfig+0x218>
 8005e74:	d806      	bhi.n	8005e84 <UART_SetConfig+0x184>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d050      	beq.n	8005f1c <UART_SetConfig+0x21c>
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7e:	d14f      	bne.n	8005f20 <UART_SetConfig+0x220>
 8005e80:	2304      	movs	r3, #4
 8005e82:	e785      	b.n	8005d90 <UART_SetConfig+0x90>
 8005e84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e88:	d14c      	bne.n	8005f24 <UART_SetConfig+0x224>
 8005e8a:	2308      	movs	r3, #8
 8005e8c:	e780      	b.n	8005d90 <UART_SetConfig+0x90>
 8005e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f80 <UART_SetConfig+0x280>)
 8005e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e94:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e9c:	d044      	beq.n	8005f28 <UART_SetConfig+0x228>
 8005e9e:	d806      	bhi.n	8005eae <UART_SetConfig+0x1ae>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d043      	beq.n	8005f2c <UART_SetConfig+0x22c>
 8005ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea8:	d142      	bne.n	8005f30 <UART_SetConfig+0x230>
 8005eaa:	2304      	movs	r3, #4
 8005eac:	e770      	b.n	8005d90 <UART_SetConfig+0x90>
 8005eae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eb2:	d13f      	bne.n	8005f34 <UART_SetConfig+0x234>
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	e76b      	b.n	8005d90 <UART_SetConfig+0x90>
 8005eb8:	4b31      	ldr	r3, [pc, #196]	@ (8005f80 <UART_SetConfig+0x280>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ec6:	d037      	beq.n	8005f38 <UART_SetConfig+0x238>
 8005ec8:	d805      	bhi.n	8005ed6 <UART_SetConfig+0x1d6>
 8005eca:	b3bb      	cbz	r3, 8005f3c <UART_SetConfig+0x23c>
 8005ecc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ed0:	d136      	bne.n	8005f40 <UART_SetConfig+0x240>
 8005ed2:	2304      	movs	r3, #4
 8005ed4:	e75c      	b.n	8005d90 <UART_SetConfig+0x90>
 8005ed6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005eda:	d133      	bne.n	8005f44 <UART_SetConfig+0x244>
 8005edc:	2308      	movs	r3, #8
 8005ede:	e757      	b.n	8005d90 <UART_SetConfig+0x90>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e755      	b.n	8005d90 <UART_SetConfig+0x90>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e753      	b.n	8005d90 <UART_SetConfig+0x90>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e751      	b.n	8005d90 <UART_SetConfig+0x90>
 8005eec:	2300      	movs	r3, #0
 8005eee:	e74f      	b.n	8005d90 <UART_SetConfig+0x90>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	e74d      	b.n	8005d90 <UART_SetConfig+0x90>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	e74b      	b.n	8005d90 <UART_SetConfig+0x90>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e749      	b.n	8005d90 <UART_SetConfig+0x90>
 8005efc:	2300      	movs	r3, #0
 8005efe:	e747      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f00:	2310      	movs	r3, #16
 8005f02:	e745      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f04:	2310      	movs	r3, #16
 8005f06:	e743      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e741      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e73f      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f10:	2310      	movs	r3, #16
 8005f12:	e73d      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f14:	2310      	movs	r3, #16
 8005f16:	e73b      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e739      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e737      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f20:	2310      	movs	r3, #16
 8005f22:	e735      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f24:	2310      	movs	r3, #16
 8005f26:	e733      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e731      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e72f      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f30:	2310      	movs	r3, #16
 8005f32:	e72d      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f34:	2310      	movs	r3, #16
 8005f36:	e72b      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e729      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e727      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f40:	2310      	movs	r3, #16
 8005f42:	e725      	b.n	8005d90 <UART_SetConfig+0x90>
 8005f44:	2310      	movs	r3, #16
 8005f46:	e723      	b.n	8005d90 <UART_SetConfig+0x90>
    switch (clocksource)
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d85b      	bhi.n	8006004 <UART_SetConfig+0x304>
 8005f4c:	e8df f003 	tbb	[pc, r3]
 8005f50:	5a3a341a 	.word	0x5a3a341a
 8005f54:	5a5a5a37 	.word	0x5a5a5a37
 8005f58:	1e          	.byte	0x1e
 8005f59:	00          	.byte	0x00
 8005f5a:	bf00      	nop
 8005f5c:	efff69f3 	.word	0xefff69f3
 8005f60:	40011000 	.word	0x40011000
 8005f64:	40004400 	.word	0x40004400
 8005f68:	40004800 	.word	0x40004800
 8005f6c:	40004c00 	.word	0x40004c00
 8005f70:	40005000 	.word	0x40005000
 8005f74:	40011400 	.word	0x40011400
 8005f78:	40007800 	.word	0x40007800
 8005f7c:	40007c00 	.word	0x40007c00
 8005f80:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f84:	f7fc fcb0 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d03d      	beq.n	8006008 <UART_SetConfig+0x308>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f8c:	6862      	ldr	r2, [r4, #4]
 8005f8e:	0853      	lsrs	r3, r2, #1
 8005f90:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005f94:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f98:	f1a3 0110 	sub.w	r1, r3, #16
 8005f9c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005fa0:	4291      	cmp	r1, r2
 8005fa2:	d833      	bhi.n	800600c <UART_SetConfig+0x30c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005faa:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005fae:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8005fb0:	6822      	ldr	r2, [r4, #0]
 8005fb2:	60d3      	str	r3, [r2, #12]
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	e030      	b.n	800601a <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb8:	f7fc fca6 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
        break;
 8005fbc:	e7e4      	b.n	8005f88 <UART_SetConfig+0x288>
        pclk = HAL_RCC_GetSysClockFreq();
 8005fbe:	f7fc fb83 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
        break;
 8005fc2:	e7e1      	b.n	8005f88 <UART_SetConfig+0x288>
        pclk = (uint32_t) HSI_VALUE;
 8005fc4:	4817      	ldr	r0, [pc, #92]	@ (8006024 <UART_SetConfig+0x324>)
 8005fc6:	e7e1      	b.n	8005f8c <UART_SetConfig+0x28c>
    switch (clocksource)
 8005fc8:	4816      	ldr	r0, [pc, #88]	@ (8006024 <UART_SetConfig+0x324>)
 8005fca:	e002      	b.n	8005fd2 <UART_SetConfig+0x2d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fc fc8c 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005fd0:	b300      	cbz	r0, 8006014 <UART_SetConfig+0x314>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005fd8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fdc:	f1a0 0210 	sub.w	r2, r0, #16
 8005fe0:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d817      	bhi.n	8006018 <UART_SetConfig+0x318>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	b280      	uxth	r0, r0
 8005fec:	60d8      	str	r0, [r3, #12]
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e013      	b.n	800601a <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff2:	f7fc fc89 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
        break;
 8005ff6:	e7eb      	b.n	8005fd0 <UART_SetConfig+0x2d0>
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff8:	f7fc fb66 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
        break;
 8005ffc:	e7e8      	b.n	8005fd0 <UART_SetConfig+0x2d0>
        pclk = (uint32_t) LSE_VALUE;
 8005ffe:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006002:	e7e6      	b.n	8005fd2 <UART_SetConfig+0x2d2>
    switch (clocksource)
 8006004:	2001      	movs	r0, #1
 8006006:	e008      	b.n	800601a <UART_SetConfig+0x31a>
 8006008:	2000      	movs	r0, #0
 800600a:	e006      	b.n	800601a <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 800600c:	2001      	movs	r0, #1
 800600e:	e004      	b.n	800601a <UART_SetConfig+0x31a>
    switch (clocksource)
 8006010:	2001      	movs	r0, #1
 8006012:	e002      	b.n	800601a <UART_SetConfig+0x31a>
 8006014:	2000      	movs	r0, #0
 8006016:	e000      	b.n	800601a <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 8006018:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800601e:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8006020:	bd10      	pop	{r4, pc}
 8006022:	bf00      	nop
 8006024:	00f42400 	.word	0x00f42400

08006028 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006028:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800602a:	f013 0f08 	tst.w	r3, #8
 800602e:	d006      	beq.n	800603e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006030:	6802      	ldr	r2, [r0, #0]
 8006032:	6853      	ldr	r3, [r2, #4]
 8006034:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006038:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800603a:	430b      	orrs	r3, r1
 800603c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800603e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006040:	f013 0f01 	tst.w	r3, #1
 8006044:	d006      	beq.n	8006054 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006046:	6802      	ldr	r2, [r0, #0]
 8006048:	6853      	ldr	r3, [r2, #4]
 800604a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800604e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8006050:	430b      	orrs	r3, r1
 8006052:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006054:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006056:	f013 0f02 	tst.w	r3, #2
 800605a:	d006      	beq.n	800606a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800605c:	6802      	ldr	r2, [r0, #0]
 800605e:	6853      	ldr	r3, [r2, #4]
 8006060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006064:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006066:	430b      	orrs	r3, r1
 8006068:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800606a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800606c:	f013 0f04 	tst.w	r3, #4
 8006070:	d006      	beq.n	8006080 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006072:	6802      	ldr	r2, [r0, #0]
 8006074:	6853      	ldr	r3, [r2, #4]
 8006076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800607a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800607c:	430b      	orrs	r3, r1
 800607e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006080:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006082:	f013 0f10 	tst.w	r3, #16
 8006086:	d006      	beq.n	8006096 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006088:	6802      	ldr	r2, [r0, #0]
 800608a:	6893      	ldr	r3, [r2, #8]
 800608c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006090:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006092:	430b      	orrs	r3, r1
 8006094:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006096:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006098:	f013 0f20 	tst.w	r3, #32
 800609c:	d006      	beq.n	80060ac <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800609e:	6802      	ldr	r2, [r0, #0]
 80060a0:	6893      	ldr	r3, [r2, #8]
 80060a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060a6:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80060a8:	430b      	orrs	r3, r1
 80060aa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80060ae:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80060b2:	d00a      	beq.n	80060ca <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060b4:	6802      	ldr	r2, [r0, #0]
 80060b6:	6853      	ldr	r3, [r2, #4]
 80060b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80060bc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80060be:	430b      	orrs	r3, r1
 80060c0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060c2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80060c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060c8:	d00b      	beq.n	80060e2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ca:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80060cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80060d0:	d006      	beq.n	80060e0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060d2:	6802      	ldr	r2, [r0, #0]
 80060d4:	6853      	ldr	r3, [r2, #4]
 80060d6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80060da:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80060dc:	430b      	orrs	r3, r1
 80060de:	6053      	str	r3, [r2, #4]
}
 80060e0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060e2:	6802      	ldr	r2, [r0, #0]
 80060e4:	6853      	ldr	r3, [r2, #4]
 80060e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80060ea:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6053      	str	r3, [r2, #4]
 80060f0:	e7eb      	b.n	80060ca <UART_AdvFeatureConfig+0xa2>

080060f2 <UART_WaitOnFlagUntilTimeout>:
{
 80060f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f6:	4605      	mov	r5, r0
 80060f8:	460e      	mov	r6, r1
 80060fa:	4617      	mov	r7, r2
 80060fc:	4699      	mov	r9, r3
 80060fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	69dc      	ldr	r4, [r3, #28]
 8006106:	ea36 0404 	bics.w	r4, r6, r4
 800610a:	bf0c      	ite	eq
 800610c:	2401      	moveq	r4, #1
 800610e:	2400      	movne	r4, #0
 8006110:	42bc      	cmp	r4, r7
 8006112:	d13a      	bne.n	800618a <UART_WaitOnFlagUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 8006114:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8006118:	d0f3      	beq.n	8006102 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611a:	f7fa faa7 	bl	800066c <HAL_GetTick>
 800611e:	eba0 0009 	sub.w	r0, r0, r9
 8006122:	4540      	cmp	r0, r8
 8006124:	d834      	bhi.n	8006190 <UART_WaitOnFlagUntilTimeout+0x9e>
 8006126:	f1b8 0f00 	cmp.w	r8, #0
 800612a:	d033      	beq.n	8006194 <UART_WaitOnFlagUntilTimeout+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	f012 0f04 	tst.w	r2, #4
 8006134:	d0e5      	beq.n	8006102 <UART_WaitOnFlagUntilTimeout+0x10>
 8006136:	f1b6 0240 	subs.w	r2, r6, #64	@ 0x40
 800613a:	bf18      	it	ne
 800613c:	2201      	movne	r2, #1
 800613e:	2e80      	cmp	r6, #128	@ 0x80
 8006140:	d0df      	beq.n	8006102 <UART_WaitOnFlagUntilTimeout+0x10>
 8006142:	2a00      	cmp	r2, #0
 8006144:	d0dd      	beq.n	8006102 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	f012 0f08 	tst.w	r2, #8
 800614c:	d111      	bne.n	8006172 <UART_WaitOnFlagUntilTimeout+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8006154:	d0d5      	beq.n	8006102 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800615a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800615c:	4628      	mov	r0, r5
 800615e:	f7ff fda5 	bl	8005cac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006162:	2320      	movs	r3, #32
 8006164:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8006168:	2300      	movs	r3, #0
 800616a:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 800616e:	2003      	movs	r0, #3
 8006170:	e00c      	b.n	800618c <UART_WaitOnFlagUntilTimeout+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006172:	2408      	movs	r4, #8
 8006174:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8006176:	4628      	mov	r0, r5
 8006178:	f7ff fd98 	bl	8005cac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800617c:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8006180:	2300      	movs	r3, #0
 8006182:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 8006186:	2001      	movs	r0, #1
 8006188:	e000      	b.n	800618c <UART_WaitOnFlagUntilTimeout+0x9a>
  return HAL_OK;
 800618a:	2000      	movs	r0, #0
}
 800618c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8006190:	2003      	movs	r0, #3
 8006192:	e7fb      	b.n	800618c <UART_WaitOnFlagUntilTimeout+0x9a>
 8006194:	2003      	movs	r0, #3
 8006196:	e7f9      	b.n	800618c <UART_WaitOnFlagUntilTimeout+0x9a>

08006198 <UART_CheckIdleState>:
{
 8006198:	b530      	push	{r4, r5, lr}
 800619a:	b083      	sub	sp, #12
 800619c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80061a4:	f7fa fa62 	bl	800066c <HAL_GetTick>
 80061a8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061aa:	6822      	ldr	r2, [r4, #0]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	f012 0f08 	tst.w	r2, #8
 80061b2:	d10f      	bne.n	80061d4 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f013 0f04 	tst.w	r3, #4
 80061bc:	d126      	bne.n	800620c <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 80061be:	2320      	movs	r3, #32
 80061c0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061c2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c6:	2000      	movs	r0, #0
 80061c8:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061ca:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 80061cc:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 80061d0:	b003      	add	sp, #12
 80061d2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	4603      	mov	r3, r0
 80061dc:	2200      	movs	r2, #0
 80061de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061e2:	4620      	mov	r0, r4
 80061e4:	f7ff ff85 	bl	80060f2 <UART_WaitOnFlagUntilTimeout>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d0e3      	beq.n	80061b4 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ee:	e852 3f00 	ldrex	r3, [r2]
 80061f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	e842 3100 	strex	r1, r3, [r2]
 80061fa:	2900      	cmp	r1, #0
 80061fc:	d1f6      	bne.n	80061ec <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 80061fe:	2320      	movs	r3, #32
 8006200:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 8006202:	2300      	movs	r3, #0
 8006204:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8006208:	2003      	movs	r0, #3
 800620a:	e7e1      	b.n	80061d0 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	462b      	mov	r3, r5
 8006214:	2200      	movs	r2, #0
 8006216:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800621a:	4620      	mov	r0, r4
 800621c:	f7ff ff69 	bl	80060f2 <UART_WaitOnFlagUntilTimeout>
 8006220:	2800      	cmp	r0, #0
 8006222:	d0cc      	beq.n	80061be <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006224:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	e852 3f00 	ldrex	r3, [r2]
 800622a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	e842 3100 	strex	r1, r3, [r2]
 8006232:	2900      	cmp	r1, #0
 8006234:	d1f6      	bne.n	8006224 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006236:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	f102 0308 	add.w	r3, r2, #8
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	3208      	adds	r2, #8
 8006246:	e842 3100 	strex	r1, r3, [r2]
 800624a:	2900      	cmp	r1, #0
 800624c:	d1f3      	bne.n	8006236 <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 800624e:	2320      	movs	r3, #32
 8006250:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      __HAL_UNLOCK(huart);
 8006254:	2300      	movs	r3, #0
 8006256:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 800625a:	2003      	movs	r0, #3
 800625c:	e7b8      	b.n	80061d0 <UART_CheckIdleState+0x38>

0800625e <HAL_UART_Init>:
  if (huart == NULL)
 800625e:	b368      	cbz	r0, 80062bc <HAL_UART_Init+0x5e>
{
 8006260:	b510      	push	{r4, lr}
 8006262:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006264:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8006266:	b303      	cbz	r3, 80062aa <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006268:	2324      	movs	r3, #36	@ 0x24
 800626a:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800626c:	6822      	ldr	r2, [r4, #0]
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006276:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006278:	b9e3      	cbnz	r3, 80062b4 <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800627a:	4620      	mov	r0, r4
 800627c:	f7ff fd40 	bl	8005d00 <UART_SetConfig>
 8006280:	2801      	cmp	r0, #1
 8006282:	d011      	beq.n	80062a8 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	6853      	ldr	r3, [r2, #4]
 8006288:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800628c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800628e:	6822      	ldr	r2, [r4, #0]
 8006290:	6893      	ldr	r3, [r2, #8]
 8006292:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8006296:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80062a2:	4620      	mov	r0, r4
 80062a4:	f7ff ff78 	bl	8006198 <UART_CheckIdleState>
}
 80062a8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80062aa:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 80062ae:	f009 f9fb 	bl	800f6a8 <HAL_UART_MspInit>
 80062b2:	e7d9      	b.n	8006268 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80062b4:	4620      	mov	r0, r4
 80062b6:	f7ff feb7 	bl	8006028 <UART_AdvFeatureConfig>
 80062ba:	e7de      	b.n	800627a <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 80062bc:	2001      	movs	r0, #1
}
 80062be:	4770      	bx	lr

080062c0 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80062c0:	2884      	cmp	r0, #132	@ 0x84
 80062c2:	d001      	beq.n	80062c8 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80062c4:	3003      	adds	r0, #3
 80062c6:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80062c8:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80062ca:	4770      	bx	lr

080062cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062cc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80062ce:	f001 fa77 	bl	80077c0 <vTaskStartScheduler>
  
  return osOK;
}
 80062d2:	2000      	movs	r0, #0
 80062d4:	bd08      	pop	{r3, pc}

080062d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80062d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062da:	b087      	sub	sp, #28
 80062dc:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062de:	6944      	ldr	r4, [r0, #20]
 80062e0:	b1c4      	cbz	r4, 8006314 <osThreadCreate+0x3e>
 80062e2:	6985      	ldr	r5, [r0, #24]
 80062e4:	b1b5      	cbz	r5, 8006314 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062e6:	6847      	ldr	r7, [r0, #4]
 80062e8:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062ec:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062f0:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80062f4:	f7ff ffe4 	bl	80062c0 <makeFreeRtosPriority>
 80062f8:	9502      	str	r5, [sp, #8]
 80062fa:	9401      	str	r4, [sp, #4]
 80062fc:	9000      	str	r0, [sp, #0]
 80062fe:	4633      	mov	r3, r6
 8006300:	464a      	mov	r2, r9
 8006302:	4641      	mov	r1, r8
 8006304:	4638      	mov	r0, r7
 8006306:	f001 f9e7 	bl	80076d8 <xTaskCreateStatic>
 800630a:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800630c:	9805      	ldr	r0, [sp, #20]
}
 800630e:	b007      	add	sp, #28
 8006310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006314:	6844      	ldr	r4, [r0, #4]
 8006316:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006318:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800631a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800631e:	f7ff ffcf 	bl	80062c0 <makeFreeRtosPriority>
 8006322:	ab05      	add	r3, sp, #20
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	9000      	str	r0, [sp, #0]
 8006328:	4633      	mov	r3, r6
 800632a:	b2ba      	uxth	r2, r7
 800632c:	4629      	mov	r1, r5
 800632e:	4620      	mov	r0, r4
 8006330:	f001 fa13 	bl	800775a <xTaskCreate>
 8006334:	2801      	cmp	r0, #1
 8006336:	d0e9      	beq.n	800630c <osThreadCreate+0x36>
      return NULL;
 8006338:	2000      	movs	r0, #0
 800633a:	e7e8      	b.n	800630e <osThreadCreate+0x38>

0800633c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800633c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800633e:	b900      	cbnz	r0, 8006342 <osDelay+0x6>
 8006340:	2001      	movs	r0, #1
 8006342:	f001 fb95 	bl	8007a70 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006346:	2000      	movs	r0, #0
 8006348:	bd08      	pop	{r3, pc}

0800634a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800634a:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800634c:	6841      	ldr	r1, [r0, #4]
 800634e:	b119      	cbz	r1, 8006358 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006350:	2001      	movs	r0, #1
 8006352:	f000 fdaa 	bl	8006eaa <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006356:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8006358:	2001      	movs	r0, #1
 800635a:	f000 fd9b 	bl	8006e94 <xQueueCreateMutex>
 800635e:	e7fa      	b.n	8006356 <osMutexCreate+0xc>

08006360 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006360:	b510      	push	{r4, lr}
 8006362:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006364:	6844      	ldr	r4, [r0, #4]
 8006366:	b17c      	cbz	r4, 8006388 <osSemaphoreCreate+0x28>
    if (count == 1) {
 8006368:	2901      	cmp	r1, #1
 800636a:	d003      	beq.n	8006374 <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800636c:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 800636e:	4620      	mov	r0, r4
 8006370:	b002      	add	sp, #8
 8006372:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006374:	2303      	movs	r3, #3
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	4623      	mov	r3, r4
 800637a:	2200      	movs	r2, #0
 800637c:	4611      	mov	r1, r2
 800637e:	2001      	movs	r0, #1
 8006380:	f000 fc2a 	bl	8006bd8 <xQueueGenericCreateStatic>
 8006384:	4604      	mov	r4, r0
 8006386:	e7f2      	b.n	800636e <osSemaphoreCreate+0xe>
    if (count == 1) {
 8006388:	2901      	cmp	r1, #1
 800638a:	d1f0      	bne.n	800636e <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 800638c:	2203      	movs	r2, #3
 800638e:	2100      	movs	r1, #0
 8006390:	2001      	movs	r0, #1
 8006392:	f000 fc7e 	bl	8006c92 <xQueueGenericCreate>
 8006396:	4604      	mov	r4, r0
 8006398:	2800      	cmp	r0, #0
 800639a:	d0e8      	beq.n	800636e <osSemaphoreCreate+0xe>
 800639c:	2300      	movs	r3, #0
 800639e:	461a      	mov	r2, r3
 80063a0:	4619      	mov	r1, r3
 80063a2:	f000 fc9f 	bl	8006ce4 <xQueueGenericSend>
      return sema;
 80063a6:	e7e2      	b.n	800636e <osSemaphoreCreate+0xe>

080063a8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80063a8:	b500      	push	{lr}
 80063aa:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80063ac:	6882      	ldr	r2, [r0, #8]
 80063ae:	b142      	cbz	r2, 80063c2 <osMessageCreate+0x1a>
 80063b0:	68c3      	ldr	r3, [r0, #12]
 80063b2:	b133      	cbz	r3, 80063c2 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80063b4:	2100      	movs	r1, #0
 80063b6:	9100      	str	r1, [sp, #0]
 80063b8:	6841      	ldr	r1, [r0, #4]
 80063ba:	6800      	ldr	r0, [r0, #0]
 80063bc:	f000 fc0c 	bl	8006bd8 <xQueueGenericCreateStatic>
 80063c0:	e004      	b.n	80063cc <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80063c2:	2200      	movs	r2, #0
 80063c4:	6841      	ldr	r1, [r0, #4]
 80063c6:	6800      	ldr	r0, [r0, #0]
 80063c8:	f000 fc63 	bl	8006c92 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80063cc:	b003      	add	sp, #12
 80063ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080063d4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063d4:	4a12      	ldr	r2, [pc, #72]	@ (8006420 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063d6:	f012 0f07 	tst.w	r2, #7
 80063da:	d01e      	beq.n	800641a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063dc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063de:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063e2:	f5c1 3380 	rsb	r3, r1, #65536	@ 0x10000
 80063e6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063ea:	480e      	ldr	r0, [pc, #56]	@ (8006424 <prvHeapInit+0x50>)
 80063ec:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063ee:	2100      	movs	r1, #0
 80063f0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063f2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80063f4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063f6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80063fa:	480b      	ldr	r0, [pc, #44]	@ (8006428 <prvHeapInit+0x54>)
 80063fc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80063fe:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006400:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006402:	1a99      	subs	r1, r3, r2
 8006404:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006406:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006408:	4b08      	ldr	r3, [pc, #32]	@ (800642c <prvHeapInit+0x58>)
 800640a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800640c:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <prvHeapInit+0x5c>)
 800640e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006410:	4b08      	ldr	r3, [pc, #32]	@ (8006434 <prvHeapInit+0x60>)
 8006412:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006416:	601a      	str	r2, [r3, #0]
}
 8006418:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800641a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800641e:	e7e4      	b.n	80063ea <prvHeapInit+0x16>
 8006420:	20000618 	.word	0x20000618
 8006424:	20000610 	.word	0x20000610
 8006428:	2000060c 	.word	0x2000060c
 800642c:	20000604 	.word	0x20000604
 8006430:	20000608 	.word	0x20000608
 8006434:	20000600 	.word	0x20000600

08006438 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006438:	4b16      	ldr	r3, [pc, #88]	@ (8006494 <prvInsertBlockIntoFreeList+0x5c>)
 800643a:	461a      	mov	r2, r3
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4283      	cmp	r3, r0
 8006440:	d3fb      	bcc.n	800643a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006442:	6851      	ldr	r1, [r2, #4]
 8006444:	eb02 0c01 	add.w	ip, r2, r1
 8006448:	4584      	cmp	ip, r0
 800644a:	d009      	beq.n	8006460 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800644c:	6841      	ldr	r1, [r0, #4]
 800644e:	eb00 0c01 	add.w	ip, r0, r1
 8006452:	4563      	cmp	r3, ip
 8006454:	d009      	beq.n	800646a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006456:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006458:	4290      	cmp	r0, r2
 800645a:	d019      	beq.n	8006490 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800645c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800645e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006460:	6840      	ldr	r0, [r0, #4]
 8006462:	4401      	add	r1, r0
 8006464:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8006466:	4610      	mov	r0, r2
 8006468:	e7f0      	b.n	800644c <prvInsertBlockIntoFreeList+0x14>
{
 800646a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800646c:	4c0a      	ldr	r4, [pc, #40]	@ (8006498 <prvInsertBlockIntoFreeList+0x60>)
 800646e:	6824      	ldr	r4, [r4, #0]
 8006470:	42a3      	cmp	r3, r4
 8006472:	d00b      	beq.n	800648c <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4419      	add	r1, r3
 8006478:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8006480:	4290      	cmp	r0, r2
 8006482:	d000      	beq.n	8006486 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006484:	6010      	str	r0, [r2, #0]
	}
}
 8006486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800648a:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800648c:	6004      	str	r4, [r0, #0]
 800648e:	e7f7      	b.n	8006480 <prvInsertBlockIntoFreeList+0x48>
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	20000610 	.word	0x20000610
 8006498:	2000060c 	.word	0x2000060c

0800649c <pvPortMalloc>:
{
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80064a0:	f001 f9d2 	bl	8007848 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80064a4:	4b38      	ldr	r3, [pc, #224]	@ (8006588 <pvPortMalloc+0xec>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	b1b3      	cbz	r3, 80064d8 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064aa:	4b38      	ldr	r3, [pc, #224]	@ (800658c <pvPortMalloc+0xf0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	421c      	tst	r4, r3
 80064b0:	d14e      	bne.n	8006550 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 80064b2:	2c00      	cmp	r4, #0
 80064b4:	d04e      	beq.n	8006554 <pvPortMalloc+0xb8>
				xWantedSize += xHeapStructSize;
 80064b6:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064ba:	f014 0f07 	tst.w	r4, #7
 80064be:	d002      	beq.n	80064c6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064c0:	f022 0207 	bic.w	r2, r2, #7
 80064c4:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	d055      	beq.n	8006576 <pvPortMalloc+0xda>
 80064ca:	4b31      	ldr	r3, [pc, #196]	@ (8006590 <pvPortMalloc+0xf4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d353      	bcc.n	800657a <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 80064d2:	4930      	ldr	r1, [pc, #192]	@ (8006594 <pvPortMalloc+0xf8>)
 80064d4:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064d6:	e004      	b.n	80064e2 <pvPortMalloc+0x46>
			prvHeapInit();
 80064d8:	f7ff ff7c 	bl	80063d4 <prvHeapInit>
 80064dc:	e7e5      	b.n	80064aa <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80064de:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80064e0:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064e2:	6863      	ldr	r3, [r4, #4]
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d202      	bcs.n	80064ee <pvPortMalloc+0x52>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f7      	bne.n	80064de <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 80064ee:	4b26      	ldr	r3, [pc, #152]	@ (8006588 <pvPortMalloc+0xec>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	42a3      	cmp	r3, r4
 80064f4:	d043      	beq.n	800657e <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064f6:	680d      	ldr	r5, [r1, #0]
 80064f8:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064fe:	6863      	ldr	r3, [r4, #4]
 8006500:	1a9b      	subs	r3, r3, r2
 8006502:	2b10      	cmp	r3, #16
 8006504:	d912      	bls.n	800652c <pvPortMalloc+0x90>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006506:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006508:	f010 0f07 	tst.w	r0, #7
 800650c:	d00a      	beq.n	8006524 <pvPortMalloc+0x88>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	b672      	cpsid	i
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	b662      	cpsie	i
 8006522:	e7fe      	b.n	8006522 <pvPortMalloc+0x86>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006524:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006526:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006528:	f7ff ff86 	bl	8006438 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800652c:	6862      	ldr	r2, [r4, #4]
 800652e:	4918      	ldr	r1, [pc, #96]	@ (8006590 <pvPortMalloc+0xf4>)
 8006530:	680b      	ldr	r3, [r1, #0]
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006536:	4918      	ldr	r1, [pc, #96]	@ (8006598 <pvPortMalloc+0xfc>)
 8006538:	6809      	ldr	r1, [r1, #0]
 800653a:	428b      	cmp	r3, r1
 800653c:	d201      	bcs.n	8006542 <pvPortMalloc+0xa6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800653e:	4916      	ldr	r1, [pc, #88]	@ (8006598 <pvPortMalloc+0xfc>)
 8006540:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006542:	4b12      	ldr	r3, [pc, #72]	@ (800658c <pvPortMalloc+0xf0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4313      	orrs	r3, r2
 8006548:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	e002      	b.n	8006556 <pvPortMalloc+0xba>
void *pvReturn = NULL;
 8006550:	2500      	movs	r5, #0
 8006552:	e000      	b.n	8006556 <pvPortMalloc+0xba>
 8006554:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8006556:	f001 fa0d 	bl	8007974 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800655a:	f015 0f07 	tst.w	r5, #7
 800655e:	d010      	beq.n	8006582 <pvPortMalloc+0xe6>
 8006560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006564:	b672      	cpsid	i
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	b662      	cpsie	i
 8006574:	e7fe      	b.n	8006574 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8006576:	2500      	movs	r5, #0
 8006578:	e7ed      	b.n	8006556 <pvPortMalloc+0xba>
 800657a:	2500      	movs	r5, #0
 800657c:	e7eb      	b.n	8006556 <pvPortMalloc+0xba>
 800657e:	2500      	movs	r5, #0
 8006580:	e7e9      	b.n	8006556 <pvPortMalloc+0xba>
}
 8006582:	4628      	mov	r0, r5
 8006584:	bd38      	pop	{r3, r4, r5, pc}
 8006586:	bf00      	nop
 8006588:	2000060c 	.word	0x2000060c
 800658c:	20000600 	.word	0x20000600
 8006590:	20000608 	.word	0x20000608
 8006594:	20000610 	.word	0x20000610
 8006598:	20000604 	.word	0x20000604

0800659c <vPortFree>:
	if( pv != NULL )
 800659c:	2800      	cmp	r0, #0
 800659e:	d034      	beq.n	800660a <vPortFree+0x6e>
{
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80065a4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80065ac:	4a17      	ldr	r2, [pc, #92]	@ (800660c <vPortFree+0x70>)
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	4213      	tst	r3, r2
 80065b2:	d10a      	bne.n	80065ca <vPortFree+0x2e>
 80065b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b8:	b672      	cpsid	i
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	b662      	cpsie	i
 80065c8:	e7fe      	b.n	80065c8 <vPortFree+0x2c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065ca:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80065ce:	b151      	cbz	r1, 80065e6 <vPortFree+0x4a>
 80065d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d4:	b672      	cpsid	i
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	b662      	cpsie	i
 80065e4:	e7fe      	b.n	80065e4 <vPortFree+0x48>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065e6:	ea23 0302 	bic.w	r3, r3, r2
 80065ea:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80065ee:	f001 f92b 	bl	8007848 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065f2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80065f6:	4a06      	ldr	r2, [pc, #24]	@ (8006610 <vPortFree+0x74>)
 80065f8:	6813      	ldr	r3, [r2, #0]
 80065fa:	440b      	add	r3, r1
 80065fc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065fe:	4628      	mov	r0, r5
 8006600:	f7ff ff1a 	bl	8006438 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006604:	f001 f9b6 	bl	8007974 <xTaskResumeAll>
}
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	4770      	bx	lr
 800660c:	20000600 	.word	0x20000600
 8006610:	20000608 	.word	0x20000608

08006614 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006614:	f100 0308 	add.w	r3, r0, #8
 8006618:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800661a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800661e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006620:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006622:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006628:	4770      	bx	lr

0800662a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800662e:	4770      	bx	lr

08006630 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006630:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006632:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006638:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800663a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800663c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800663e:	6803      	ldr	r3, [r0, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	6003      	str	r3, [r0, #0]
}
 8006644:	4770      	bx	lr

08006646 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006646:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006648:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800664a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800664e:	d011      	beq.n	8006674 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006650:	f100 0308 	add.w	r3, r0, #8
 8006654:	461c      	mov	r4, r3
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	42aa      	cmp	r2, r5
 800665c:	d9fa      	bls.n	8006654 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006662:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006664:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006666:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006668:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800666a:	6803      	ldr	r3, [r0, #0]
 800666c:	3301      	adds	r3, #1
 800666e:	6003      	str	r3, [r0, #0]
}
 8006670:	bc30      	pop	{r4, r5}
 8006672:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006674:	6904      	ldr	r4, [r0, #16]
 8006676:	e7f2      	b.n	800665e <vListInsert+0x18>

08006678 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006678:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800667a:	6841      	ldr	r1, [r0, #4]
 800667c:	6882      	ldr	r2, [r0, #8]
 800667e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006680:	6841      	ldr	r1, [r0, #4]
 8006682:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	4282      	cmp	r2, r0
 8006688:	d006      	beq.n	8006698 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800668a:	2200      	movs	r2, #0
 800668c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	3a01      	subs	r2, #1
 8006692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006694:	6818      	ldr	r0, [r3, #0]
}
 8006696:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006698:	6882      	ldr	r2, [r0, #8]
 800669a:	605a      	str	r2, [r3, #4]
 800669c:	e7f5      	b.n	800668a <uxListRemove+0x12>
	...

080066a0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066a0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066a6:	4b0f      	ldr	r3, [pc, #60]	@ (80066e4 <prvTaskExitError+0x44>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066ae:	d00a      	beq.n	80066c6 <prvTaskExitError+0x26>
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	b672      	cpsid	i
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	b662      	cpsie	i
 80066c4:	e7fe      	b.n	80066c4 <prvTaskExitError+0x24>
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	b672      	cpsid	i
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066da:	9b01      	ldr	r3, [sp, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0fc      	beq.n	80066da <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066e0:	b002      	add	sp, #8
 80066e2:	4770      	bx	lr
 80066e4:	20000008 	.word	0x20000008

080066e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066e8:	4808      	ldr	r0, [pc, #32]	@ (800670c <prvPortStartFirstTask+0x24>)
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	6800      	ldr	r0, [r0, #0]
 80066ee:	f380 8808 	msr	MSP, r0
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f380 8814 	msr	CONTROL, r0
 80066fa:	b662      	cpsie	i
 80066fc:	b661      	cpsie	f
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	df00      	svc	0
 8006708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800670a:	0000      	.short	0x0000
 800670c:	e000ed08 	.word	0xe000ed08

08006710 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006710:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006720 <vPortEnableVFP+0x10>
 8006714:	6801      	ldr	r1, [r0, #0]
 8006716:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800671a:	6001      	str	r1, [r0, #0]
 800671c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800671e:	0000      	.short	0x0000
 8006720:	e000ed88 	.word	0xe000ed88

08006724 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006724:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006728:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800672c:	f021 0101 	bic.w	r1, r1, #1
 8006730:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006734:	4b05      	ldr	r3, [pc, #20]	@ (800674c <pxPortInitialiseStack+0x28>)
 8006736:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800673a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800673e:	f06f 0302 	mvn.w	r3, #2
 8006742:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006746:	3844      	subs	r0, #68	@ 0x44
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	080066a1 	.word	0x080066a1

08006750 <SVC_Handler>:
	__asm volatile (
 8006750:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <pxCurrentTCBConst2>)
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	6808      	ldr	r0, [r1, #0]
 8006756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	f380 8809 	msr	PSP, r0
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8811 	msr	BASEPRI, r0
 800676a:	4770      	bx	lr
 800676c:	f3af 8000 	nop.w

08006770 <pxCurrentTCBConst2>:
 8006770:	20010748 	.word	0x20010748

08006774 <vPortEnterCritical>:
 8006774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006778:	b672      	cpsid	i
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	b662      	cpsie	i
	uxCriticalNesting++;
 8006788:	4a0c      	ldr	r2, [pc, #48]	@ (80067bc <vPortEnterCritical+0x48>)
 800678a:	6813      	ldr	r3, [r2, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006790:	2b01      	cmp	r3, #1
 8006792:	d000      	beq.n	8006796 <vPortEnterCritical+0x22>
}
 8006794:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006796:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800679a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800679e:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80067a2:	d0f7      	beq.n	8006794 <vPortEnterCritical+0x20>
 80067a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a8:	b672      	cpsid	i
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	b662      	cpsie	i
 80067b8:	e7fe      	b.n	80067b8 <vPortEnterCritical+0x44>
 80067ba:	bf00      	nop
 80067bc:	20000008 	.word	0x20000008

080067c0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80067c0:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <vPortExitCritical+0x2c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	b953      	cbnz	r3, 80067dc <vPortExitCritical+0x1c>
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	b672      	cpsid	i
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	b662      	cpsie	i
 80067da:	e7fe      	b.n	80067da <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80067dc:	3b01      	subs	r3, #1
 80067de:	4a03      	ldr	r2, [pc, #12]	@ (80067ec <vPortExitCritical+0x2c>)
 80067e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067e2:	b90b      	cbnz	r3, 80067e8 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067e4:	f383 8811 	msr	BASEPRI, r3
}
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	20000008 	.word	0x20000008

080067f0 <PendSV_Handler>:
	__asm volatile
 80067f0:	f3ef 8009 	mrs	r0, PSP
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	4b15      	ldr	r3, [pc, #84]	@ (8006850 <pxCurrentTCBConst>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	f01e 0f10 	tst.w	lr, #16
 8006800:	bf08      	it	eq
 8006802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	6010      	str	r0, [r2, #0]
 800680c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006814:	b672      	cpsid	i
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	b662      	cpsie	i
 8006824:	f001 f94c 	bl	8007ac0 <vTaskSwitchContext>
 8006828:	f04f 0000 	mov.w	r0, #0
 800682c:	f380 8811 	msr	BASEPRI, r0
 8006830:	bc09      	pop	{r0, r3}
 8006832:	6819      	ldr	r1, [r3, #0]
 8006834:	6808      	ldr	r0, [r1, #0]
 8006836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683a:	f01e 0f10 	tst.w	lr, #16
 800683e:	bf08      	it	eq
 8006840:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006844:	f380 8809 	msr	PSP, r0
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop

08006850 <pxCurrentTCBConst>:
 8006850:	20010748 	.word	0x20010748

08006854 <SysTick_Handler>:
{
 8006854:	b508      	push	{r3, lr}
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	b672      	cpsid	i
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800686a:	f000 fff5 	bl	8007858 <xTaskIncrementTick>
 800686e:	b128      	cbz	r0, 800687c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006870:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006878:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800687c:	2300      	movs	r3, #0
 800687e:	f383 8811 	msr	BASEPRI, r3
}
 8006882:	bd08      	pop	{r3, pc}

08006884 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006884:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006888:	2300      	movs	r3, #0
 800688a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800688c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800688e:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <vPortSetupTimerInterrupt+0x20>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4905      	ldr	r1, [pc, #20]	@ (80068a8 <vPortSetupTimerInterrupt+0x24>)
 8006894:	fba1 1303 	umull	r1, r3, r1, r3
 8006898:	099b      	lsrs	r3, r3, #6
 800689a:	3b01      	subs	r3, #1
 800689c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800689e:	2307      	movs	r3, #7
 80068a0:	6113      	str	r3, [r2, #16]
}
 80068a2:	4770      	bx	lr
 80068a4:	200003fc 	.word	0x200003fc
 80068a8:	10624dd3 	.word	0x10624dd3

080068ac <xPortStartScheduler>:
{
 80068ac:	b530      	push	{r4, r5, lr}
 80068ae:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006970 <xPortStartScheduler+0xc4>)
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068b8:	22ff      	movs	r2, #255	@ 0xff
 80068ba:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80068c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068cc:	4a29      	ldr	r2, [pc, #164]	@ (8006974 <xPortStartScheduler+0xc8>)
 80068ce:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068d0:	4b29      	ldr	r3, [pc, #164]	@ (8006978 <xPortStartScheduler+0xcc>)
 80068d2:	2207      	movs	r2, #7
 80068d4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068d6:	e009      	b.n	80068ec <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80068d8:	4a27      	ldr	r2, [pc, #156]	@ (8006978 <xPortStartScheduler+0xcc>)
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	3b01      	subs	r3, #1
 80068de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80068f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80068f4:	d1f0      	bne.n	80068d8 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068f6:	4b20      	ldr	r3, [pc, #128]	@ (8006978 <xPortStartScheduler+0xcc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d00a      	beq.n	8006914 <xPortStartScheduler+0x68>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	b672      	cpsid	i
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	b662      	cpsie	i
 8006912:	e7fe      	b.n	8006912 <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	4a18      	ldr	r2, [pc, #96]	@ (8006978 <xPortStartScheduler+0xcc>)
 8006918:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800691a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800691e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006920:	9b01      	ldr	r3, [sp, #4]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	4a12      	ldr	r2, [pc, #72]	@ (8006970 <xPortStartScheduler+0xc4>)
 8006926:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006928:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800692c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006934:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006938:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800693c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006940:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8006944:	f7ff ff9e 	bl	8006884 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006948:	2500      	movs	r5, #0
 800694a:	4b0c      	ldr	r3, [pc, #48]	@ (800697c <xPortStartScheduler+0xd0>)
 800694c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800694e:	f7ff fedf 	bl	8006710 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006952:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006956:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800695a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800695e:	f7ff fec3 	bl	80066e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006962:	f001 f8ad 	bl	8007ac0 <vTaskSwitchContext>
	prvTaskExitError();
 8006966:	f7ff fe9b 	bl	80066a0 <prvTaskExitError>
}
 800696a:	4628      	mov	r0, r5
 800696c:	b003      	add	sp, #12
 800696e:	bd30      	pop	{r4, r5, pc}
 8006970:	e000e400 	.word	0xe000e400
 8006974:	2001061c 	.word	0x2001061c
 8006978:	20010618 	.word	0x20010618
 800697c:	20000008 	.word	0x20000008

08006980 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006980:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006984:	2b0f      	cmp	r3, #15
 8006986:	d911      	bls.n	80069ac <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006988:	4a13      	ldr	r2, [pc, #76]	@ (80069d8 <vPortValidateInterruptPriority+0x58>)
 800698a:	5c9b      	ldrb	r3, [r3, r2]
 800698c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800698e:	4a13      	ldr	r2, [pc, #76]	@ (80069dc <vPortValidateInterruptPriority+0x5c>)
 8006990:	7812      	ldrb	r2, [r2, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d90a      	bls.n	80069ac <vPortValidateInterruptPriority+0x2c>
 8006996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699a:	b672      	cpsid	i
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	b662      	cpsie	i
 80069aa:	e7fe      	b.n	80069aa <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80069b0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80069b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069b8:	4a09      	ldr	r2, [pc, #36]	@ (80069e0 <vPortValidateInterruptPriority+0x60>)
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	4293      	cmp	r3, r2
 80069be:	d90a      	bls.n	80069d6 <vPortValidateInterruptPriority+0x56>
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	b672      	cpsid	i
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	b662      	cpsie	i
 80069d4:	e7fe      	b.n	80069d4 <vPortValidateInterruptPriority+0x54>
	}
 80069d6:	4770      	bx	lr
 80069d8:	e000e3f0 	.word	0xe000e3f0
 80069dc:	2001061c 	.word	0x2001061c
 80069e0:	20010618 	.word	0x20010618

080069e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80069e4:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80069e6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80069e8:	b118      	cbz	r0, 80069f2 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80069ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80069f2:	4770      	bx	lr

080069f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069f4:	b510      	push	{r4, lr}
 80069f6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069f8:	f7ff febc 	bl	8006774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80069fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d004      	beq.n	8006a0e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8006a04:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8006a06:	f7ff fedb 	bl	80067c0 <vPortExitCritical>

	return xReturn;
}
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8006a0e:	2401      	movs	r4, #1
 8006a10:	e7f9      	b.n	8006a06 <prvIsQueueFull+0x12>

08006a12 <prvIsQueueEmpty>:
{
 8006a12:	b510      	push	{r4, lr}
 8006a14:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006a16:	f7ff fead 	bl	8006774 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a1a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a1c:	b923      	cbnz	r3, 8006a28 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8006a1e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8006a20:	f7ff fece 	bl	80067c0 <vPortExitCritical>
}
 8006a24:	4620      	mov	r0, r4
 8006a26:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8006a28:	2400      	movs	r4, #0
 8006a2a:	e7f9      	b.n	8006a20 <prvIsQueueEmpty+0xe>

08006a2c <prvCopyDataToQueue>:
{
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a32:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a34:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006a36:	b95a      	cbnz	r2, 8006a50 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a38:	6803      	ldr	r3, [r0, #0]
 8006a3a:	b11b      	cbz	r3, 8006a44 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8006a3c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a3e:	3601      	adds	r6, #1
 8006a40:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a44:	6880      	ldr	r0, [r0, #8]
 8006a46:	f001 f9b5 	bl	8007db4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60a3      	str	r3, [r4, #8]
 8006a4e:	e7f6      	b.n	8006a3e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8006a50:	b96d      	cbnz	r5, 8006a6e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a52:	6840      	ldr	r0, [r0, #4]
 8006a54:	f009 fe95 	bl	8010782 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a58:	6863      	ldr	r3, [r4, #4]
 8006a5a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006a5c:	4413      	add	r3, r2
 8006a5e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a60:	68a2      	ldr	r2, [r4, #8]
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d319      	bcc.n	8006a9a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	e7e7      	b.n	8006a3e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a6e:	68c0      	ldr	r0, [r0, #12]
 8006a70:	f009 fe87 	bl	8010782 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a74:	68e3      	ldr	r3, [r4, #12]
 8006a76:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006a78:	4251      	negs	r1, r2
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d202      	bcs.n	8006a8a <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a84:	68a3      	ldr	r3, [r4, #8]
 8006a86:	440b      	add	r3, r1
 8006a88:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006a8a:	2d02      	cmp	r5, #2
 8006a8c:	d001      	beq.n	8006a92 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8006a8e:	2000      	movs	r0, #0
 8006a90:	e7d5      	b.n	8006a3e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a92:	b126      	cbz	r6, 8006a9e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8006a94:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8006a96:	2000      	movs	r0, #0
 8006a98:	e7d1      	b.n	8006a3e <prvCopyDataToQueue+0x12>
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	e7cf      	b.n	8006a3e <prvCopyDataToQueue+0x12>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e7cd      	b.n	8006a3e <prvCopyDataToQueue+0x12>

08006aa2 <prvCopyDataFromQueue>:
{
 8006aa2:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006aa4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006aa6:	b16a      	cbz	r2, 8006ac4 <prvCopyDataFromQueue+0x22>
{
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006aac:	68d9      	ldr	r1, [r3, #12]
 8006aae:	4411      	add	r1, r2
 8006ab0:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ab2:	689c      	ldr	r4, [r3, #8]
 8006ab4:	42a1      	cmp	r1, r4
 8006ab6:	d301      	bcc.n	8006abc <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ab8:	6819      	ldr	r1, [r3, #0]
 8006aba:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006abc:	68d9      	ldr	r1, [r3, #12]
 8006abe:	f009 fe60 	bl	8010782 <memcpy>
}
 8006ac2:	bd10      	pop	{r4, pc}
 8006ac4:	4770      	bx	lr

08006ac6 <prvUnlockQueue>:
{
 8006ac6:	b538      	push	{r3, r4, r5, lr}
 8006ac8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8006aca:	f7ff fe53 	bl	8006774 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006ace:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8006ad2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ad4:	e001      	b.n	8006ada <prvUnlockQueue+0x14>
			--cTxLock;
 8006ad6:	3c01      	subs	r4, #1
 8006ad8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ada:	2c00      	cmp	r4, #0
 8006adc:	dd0a      	ble.n	8006af4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ade:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006ae0:	b143      	cbz	r3, 8006af4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ae2:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8006ae6:	f001 f859 	bl	8007b9c <xTaskRemoveFromEventList>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d0f3      	beq.n	8006ad6 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8006aee:	f001 f8ef 	bl	8007cd0 <vTaskMissedYield>
 8006af2:	e7f0      	b.n	8006ad6 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8006af4:	23ff      	movs	r3, #255	@ 0xff
 8006af6:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006afa:	f7ff fe61 	bl	80067c0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006afe:	f7ff fe39 	bl	8006774 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006b02:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8006b06:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b08:	e001      	b.n	8006b0e <prvUnlockQueue+0x48>
				--cRxLock;
 8006b0a:	3c01      	subs	r4, #1
 8006b0c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	dd0a      	ble.n	8006b28 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b12:	692b      	ldr	r3, [r5, #16]
 8006b14:	b143      	cbz	r3, 8006b28 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b16:	f105 0010 	add.w	r0, r5, #16
 8006b1a:	f001 f83f 	bl	8007b9c <xTaskRemoveFromEventList>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d0f3      	beq.n	8006b0a <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8006b22:	f001 f8d5 	bl	8007cd0 <vTaskMissedYield>
 8006b26:	e7f0      	b.n	8006b0a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8006b28:	23ff      	movs	r3, #255	@ 0xff
 8006b2a:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006b2e:	f7ff fe47 	bl	80067c0 <vPortExitCritical>
}
 8006b32:	bd38      	pop	{r3, r4, r5, pc}

08006b34 <xQueueGenericReset>:
{
 8006b34:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8006b36:	b1e0      	cbz	r0, 8006b72 <xQueueGenericReset+0x3e>
 8006b38:	460d      	mov	r5, r1
 8006b3a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006b3c:	f7ff fe1a 	bl	8006774 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006b44:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006b46:	fb01 3002 	mla	r0, r1, r2, r3
 8006b4a:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b50:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b52:	3a01      	subs	r2, #1
 8006b54:	fb02 3301 	mla	r3, r2, r1, r3
 8006b58:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b5a:	23ff      	movs	r3, #255	@ 0xff
 8006b5c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b60:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8006b64:	bb0d      	cbnz	r5, 8006baa <xQueueGenericReset+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	b973      	cbnz	r3, 8006b88 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 8006b6a:	f7ff fe29 	bl	80067c0 <vPortExitCritical>
}
 8006b6e:	2001      	movs	r0, #1
 8006b70:	bd38      	pop	{r3, r4, r5, pc}
 8006b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b76:	b672      	cpsid	i
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	b662      	cpsie	i
	configASSERT( pxQueue );
 8006b86:	e7fe      	b.n	8006b86 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b88:	f104 0010 	add.w	r0, r4, #16
 8006b8c:	f001 f806 	bl	8007b9c <xTaskRemoveFromEventList>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d0ea      	beq.n	8006b6a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8006b94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	e7df      	b.n	8006b6a <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006baa:	f104 0010 	add.w	r0, r4, #16
 8006bae:	f7ff fd31 	bl	8006614 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bb2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006bb6:	f7ff fd2d 	bl	8006614 <vListInitialise>
 8006bba:	e7d6      	b.n	8006b6a <xQueueGenericReset+0x36>

08006bbc <prvInitialiseNewQueue>:
{
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	b931      	cbnz	r1, 8006bd4 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bc6:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8006bc8:	63c3      	str	r3, [r0, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bca:	6404      	str	r4, [r0, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bcc:	2101      	movs	r1, #1
 8006bce:	f7ff ffb1 	bl	8006b34 <xQueueGenericReset>
}
 8006bd2:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bd4:	6002      	str	r2, [r0, #0]
 8006bd6:	e7f7      	b.n	8006bc8 <prvInitialiseNewQueue+0xc>

08006bd8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bd8:	b950      	cbnz	r0, 8006bf0 <xQueueGenericCreateStatic+0x18>
 8006bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bde:	b672      	cpsid	i
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	b662      	cpsie	i
 8006bee:	e7fe      	b.n	8006bee <xQueueGenericCreateStatic+0x16>
	{
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 8006bf6:	b193      	cbz	r3, 8006c1e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bf8:	1e0b      	subs	r3, r1, #0
 8006bfa:	bf18      	it	ne
 8006bfc:	2301      	movne	r3, #1
 8006bfe:	2a00      	cmp	r2, #0
 8006c00:	bf08      	it	eq
 8006c02:	f043 0301 	orreq.w	r3, r3, #1
 8006c06:	b9ab      	cbnz	r3, 8006c34 <xQueueGenericCreateStatic+0x5c>
 8006c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0c:	b672      	cpsid	i
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	b662      	cpsie	i
 8006c1c:	e7fe      	b.n	8006c1c <xQueueGenericCreateStatic+0x44>
 8006c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c22:	b672      	cpsid	i
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8006c32:	e7fe      	b.n	8006c32 <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c34:	fab1 f381 	clz	r3, r1
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	2a00      	cmp	r2, #0
 8006c3c:	bf18      	it	ne
 8006c3e:	f043 0301 	orrne.w	r3, r3, #1
 8006c42:	b953      	cbnz	r3, 8006c5a <xQueueGenericCreateStatic+0x82>
 8006c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c48:	b672      	cpsid	i
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	b662      	cpsie	i
 8006c58:	e7fe      	b.n	8006c58 <xQueueGenericCreateStatic+0x80>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c5a:	2348      	movs	r3, #72	@ 0x48
 8006c5c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	2b48      	cmp	r3, #72	@ 0x48
 8006c62:	d00a      	beq.n	8006c7a <xQueueGenericCreateStatic+0xa2>
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	b672      	cpsid	i
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	b662      	cpsie	i
 8006c78:	e7fe      	b.n	8006c78 <xQueueGenericCreateStatic+0xa0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c7a:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c82:	9400      	str	r4, [sp, #0]
 8006c84:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006c88:	f7ff ff98 	bl	8006bbc <prvInitialiseNewQueue>
	}
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	b004      	add	sp, #16
 8006c90:	bd10      	pop	{r4, pc}

08006c92 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c92:	b950      	cbnz	r0, 8006caa <xQueueGenericCreate+0x18>
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	b672      	cpsid	i
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	b662      	cpsie	i
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueGenericCreate+0x16>
	{
 8006caa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cac:	b083      	sub	sp, #12
 8006cae:	460c      	mov	r4, r1
 8006cb0:	4615      	mov	r5, r2
 8006cb2:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8006cb4:	b1a1      	cbz	r1, 8006ce0 <xQueueGenericCreate+0x4e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006cba:	3048      	adds	r0, #72	@ 0x48
 8006cbc:	f7ff fbee 	bl	800649c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	b150      	cbz	r0, 8006cda <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cca:	9000      	str	r0, [sp, #0]
 8006ccc:	462b      	mov	r3, r5
 8006cce:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f7ff ff71 	bl	8006bbc <prvInitialiseNewQueue>
	}
 8006cda:	4630      	mov	r0, r6
 8006cdc:	b003      	add	sp, #12
 8006cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	e7ea      	b.n	8006cba <xQueueGenericCreate+0x28>

08006ce4 <xQueueGenericSend>:
{
 8006ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006cea:	b198      	cbz	r0, 8006d14 <xQueueGenericSend+0x30>
 8006cec:	460f      	mov	r7, r1
 8006cee:	461d      	mov	r5, r3
 8006cf0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cf2:	b1d1      	cbz	r1, 8006d2a <xQueueGenericSend+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cf4:	2d02      	cmp	r5, #2
 8006cf6:	d126      	bne.n	8006d46 <xQueueGenericSend+0x62>
 8006cf8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d023      	beq.n	8006d46 <xQueueGenericSend+0x62>
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	b672      	cpsid	i
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	b662      	cpsie	i
 8006d12:	e7fe      	b.n	8006d12 <xQueueGenericSend+0x2e>
 8006d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d18:	b672      	cpsid	i
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	b662      	cpsie	i
	configASSERT( pxQueue );
 8006d28:	e7fe      	b.n	8006d28 <xQueueGenericSend+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d2a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0e1      	beq.n	8006cf4 <xQueueGenericSend+0x10>
 8006d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d34:	b672      	cpsid	i
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	b662      	cpsie	i
 8006d44:	e7fe      	b.n	8006d44 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d46:	f000 ffc9 	bl	8007cdc <xTaskGetSchedulerState>
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	b968      	cbnz	r0, 8006d6a <xQueueGenericSend+0x86>
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d04a      	beq.n	8006dea <xQueueGenericSend+0x106>
 8006d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d58:	b672      	cpsid	i
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	b662      	cpsie	i
 8006d68:	e7fe      	b.n	8006d68 <xQueueGenericSend+0x84>
 8006d6a:	2600      	movs	r6, #0
 8006d6c:	e03d      	b.n	8006dea <xQueueGenericSend+0x106>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d6e:	462a      	mov	r2, r5
 8006d70:	4639      	mov	r1, r7
 8006d72:	4620      	mov	r0, r4
 8006d74:	f7ff fe5a 	bl	8006a2c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006d7a:	b97b      	cbnz	r3, 8006d9c <xQueueGenericSend+0xb8>
					else if( xYieldRequired != pdFALSE )
 8006d7c:	b148      	cbz	r0, 8006d92 <xQueueGenericSend+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8006d7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d86:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006d92:	f7ff fd15 	bl	80067c0 <vPortExitCritical>
				return pdPASS;
 8006d96:	2001      	movs	r0, #1
}
 8006d98:	b005      	add	sp, #20
 8006d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d9c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006da0:	f000 fefc 	bl	8007b9c <xTaskRemoveFromEventList>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d0f4      	beq.n	8006d92 <xQueueGenericSend+0xae>
							queueYIELD_IF_USING_PREEMPTION();
 8006da8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006dac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	e7e9      	b.n	8006d92 <xQueueGenericSend+0xae>
					taskEXIT_CRITICAL();
 8006dbe:	f7ff fcff 	bl	80067c0 <vPortExitCritical>
					return errQUEUE_FULL;
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	e7e8      	b.n	8006d98 <xQueueGenericSend+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dc6:	a802      	add	r0, sp, #8
 8006dc8:	f000 ff30 	bl	8007c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dcc:	2601      	movs	r6, #1
 8006dce:	e019      	b.n	8006e04 <xQueueGenericSend+0x120>
		prvLockQueue( pxQueue );
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006dd6:	e021      	b.n	8006e1c <xQueueGenericSend+0x138>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006dde:	e023      	b.n	8006e28 <xQueueGenericSend+0x144>
				prvUnlockQueue( pxQueue );
 8006de0:	4620      	mov	r0, r4
 8006de2:	f7ff fe70 	bl	8006ac6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006de6:	f000 fdc5 	bl	8007974 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006dea:	f7ff fcc3 	bl	8006774 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dee:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006df0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d3bb      	bcc.n	8006d6e <xQueueGenericSend+0x8a>
 8006df6:	2d02      	cmp	r5, #2
 8006df8:	d0b9      	beq.n	8006d6e <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dfa:	9b01      	ldr	r3, [sp, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0de      	beq.n	8006dbe <xQueueGenericSend+0xda>
				else if( xEntryTimeSet == pdFALSE )
 8006e00:	2e00      	cmp	r6, #0
 8006e02:	d0e0      	beq.n	8006dc6 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 8006e04:	f7ff fcdc 	bl	80067c0 <vPortExitCritical>
		vTaskSuspendAll();
 8006e08:	f000 fd1e 	bl	8007848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e0c:	f7ff fcb2 	bl	8006774 <vPortEnterCritical>
 8006e10:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8006e14:	b252      	sxtb	r2, r2
 8006e16:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8006e1a:	d0d9      	beq.n	8006dd0 <xQueueGenericSend+0xec>
 8006e1c:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8006e20:	b252      	sxtb	r2, r2
 8006e22:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8006e26:	d0d7      	beq.n	8006dd8 <xQueueGenericSend+0xf4>
 8006e28:	f7ff fcca 	bl	80067c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e2c:	a901      	add	r1, sp, #4
 8006e2e:	a802      	add	r0, sp, #8
 8006e30:	f000 ff08 	bl	8007c44 <xTaskCheckForTimeOut>
 8006e34:	b9d8      	cbnz	r0, 8006e6e <xQueueGenericSend+0x18a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e36:	4620      	mov	r0, r4
 8006e38:	f7ff fddc 	bl	80069f4 <prvIsQueueFull>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d0cf      	beq.n	8006de0 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e40:	9901      	ldr	r1, [sp, #4]
 8006e42:	f104 0010 	add.w	r0, r4, #16
 8006e46:	f000 fe8f 	bl	8007b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f7ff fe3b 	bl	8006ac6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e50:	f000 fd90 	bl	8007974 <xTaskResumeAll>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d1c8      	bne.n	8006dea <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
 8006e58:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e60:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	e7bd      	b.n	8006dea <xQueueGenericSend+0x106>
			prvUnlockQueue( pxQueue );
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f7ff fe29 	bl	8006ac6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e74:	f000 fd7e 	bl	8007974 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e78d      	b.n	8006d98 <xQueueGenericSend+0xb4>

08006e7c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8006e7c:	b148      	cbz	r0, 8006e92 <prvInitialiseMutex+0x16>
	{
 8006e7e:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e80:	2100      	movs	r1, #0
 8006e82:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e84:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e86:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e88:	460b      	mov	r3, r1
 8006e8a:	460a      	mov	r2, r1
 8006e8c:	f7ff ff2a 	bl	8006ce4 <xQueueGenericSend>
	}
 8006e90:	bd08      	pop	{r3, pc}
 8006e92:	4770      	bx	lr

08006e94 <xQueueCreateMutex>:
	{
 8006e94:	b510      	push	{r4, lr}
 8006e96:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e98:	2100      	movs	r1, #0
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	f7ff fef9 	bl	8006c92 <xQueueGenericCreate>
 8006ea0:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ea2:	f7ff ffeb 	bl	8006e7c <prvInitialiseMutex>
	}
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	bd10      	pop	{r4, pc}

08006eaa <xQueueCreateMutexStatic>:
	{
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	b082      	sub	sp, #8
 8006eae:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006eb0:	9000      	str	r0, [sp, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	f7ff fe8e 	bl	8006bd8 <xQueueGenericCreateStatic>
 8006ebc:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ebe:	f7ff ffdd 	bl	8006e7c <prvInitialiseMutex>
	}
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	b002      	add	sp, #8
 8006ec6:	bd10      	pop	{r4, pc}

08006ec8 <xQueueGenericSendFromISR>:
{
 8006ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006ecc:	b1a0      	cbz	r0, 8006ef8 <xQueueGenericSendFromISR+0x30>
 8006ece:	460f      	mov	r7, r1
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	461c      	mov	r4, r3
 8006ed4:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ed6:	b1d1      	cbz	r1, 8006f0e <xQueueGenericSendFromISR+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ed8:	2c02      	cmp	r4, #2
 8006eda:	d126      	bne.n	8006f2a <xQueueGenericSendFromISR+0x62>
 8006edc:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d023      	beq.n	8006f2a <xQueueGenericSendFromISR+0x62>
 8006ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee6:	b672      	cpsid	i
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	b662      	cpsie	i
 8006ef6:	e7fe      	b.n	8006ef6 <xQueueGenericSendFromISR+0x2e>
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	b672      	cpsid	i
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	b662      	cpsie	i
	configASSERT( pxQueue );
 8006f0c:	e7fe      	b.n	8006f0c <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f0e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0e1      	beq.n	8006ed8 <xQueueGenericSendFromISR+0x10>
 8006f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f18:	b672      	cpsid	i
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	b662      	cpsie	i
 8006f28:	e7fe      	b.n	8006f28 <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f2a:	f7ff fd29 	bl	8006980 <vPortValidateInterruptPriority>
	__asm volatile
 8006f2e:	f3ef 8811 	mrs	r8, BASEPRI
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	b672      	cpsid	i
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f46:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8006f48:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d306      	bcc.n	8006f5c <xQueueGenericSendFromISR+0x94>
 8006f4e:	2c02      	cmp	r4, #2
 8006f50:	d004      	beq.n	8006f5c <xQueueGenericSendFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8006f52:	2000      	movs	r0, #0
	__asm volatile
 8006f54:	f388 8811 	msr	BASEPRI, r8
}
 8006f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f5c:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8006f60:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f64:	4622      	mov	r2, r4
 8006f66:	4639      	mov	r1, r7
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f7ff fd5f 	bl	8006a2c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006f6e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8006f72:	d006      	beq.n	8006f82 <xQueueGenericSendFromISR+0xba>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f74:	f109 0301 	add.w	r3, r9, #1
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8006f7e:	2001      	movs	r0, #1
 8006f80:	e7e8      	b.n	8006f54 <xQueueGenericSendFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f82:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006f84:	b90b      	cbnz	r3, 8006f8a <xQueueGenericSendFromISR+0xc2>
			xReturn = pdPASS;
 8006f86:	2001      	movs	r0, #1
 8006f88:	e7e4      	b.n	8006f54 <xQueueGenericSendFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f8a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8006f8e:	f000 fe05 	bl	8007b9c <xTaskRemoveFromEventList>
 8006f92:	b118      	cbz	r0, 8006f9c <xQueueGenericSendFromISR+0xd4>
							if( pxHigherPriorityTaskWoken != NULL )
 8006f94:	b126      	cbz	r6, 8006fa0 <xQueueGenericSendFromISR+0xd8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f96:	2001      	movs	r0, #1
 8006f98:	6030      	str	r0, [r6, #0]
 8006f9a:	e7db      	b.n	8006f54 <xQueueGenericSendFromISR+0x8c>
			xReturn = pdPASS;
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	e7d9      	b.n	8006f54 <xQueueGenericSendFromISR+0x8c>
 8006fa0:	2001      	movs	r0, #1
 8006fa2:	e7d7      	b.n	8006f54 <xQueueGenericSendFromISR+0x8c>

08006fa4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8006fa4:	b178      	cbz	r0, 8006fc6 <xQueueGiveFromISR+0x22>
{
 8006fa6:	b570      	push	{r4, r5, r6, lr}
 8006fa8:	460c      	mov	r4, r1
 8006faa:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006fae:	b1ab      	cbz	r3, 8006fdc <xQueueGiveFromISR+0x38>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb4:	b672      	cpsid	i
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	b662      	cpsie	i
 8006fc4:	e7fe      	b.n	8006fc4 <xQueueGiveFromISR+0x20>
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	b672      	cpsid	i
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	b662      	cpsie	i
	configASSERT( pxQueue );
 8006fda:	e7fe      	b.n	8006fda <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006fdc:	6803      	ldr	r3, [r0, #0]
 8006fde:	b1fb      	cbz	r3, 8007020 <xQueueGiveFromISR+0x7c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fe0:	f7ff fcce 	bl	8006980 <vPortValidateInterruptPriority>
	__asm volatile
 8006fe4:	f3ef 8611 	mrs	r6, BASEPRI
 8006fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fec:	b672      	cpsid	i
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ffc:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ffe:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8007000:	4293      	cmp	r3, r2
 8007002:	d928      	bls.n	8007056 <xQueueGiveFromISR+0xb2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007004:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8007008:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800700a:	3201      	adds	r2, #1
 800700c:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007012:	d013      	beq.n	800703c <xQueueGiveFromISR+0x98>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007014:	3301      	adds	r3, #1
 8007016:	b25b      	sxtb	r3, r3
 8007018:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800701c:	2001      	movs	r0, #1
 800701e:	e01b      	b.n	8007058 <xQueueGiveFromISR+0xb4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007020:	6883      	ldr	r3, [r0, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0dc      	beq.n	8006fe0 <xQueueGiveFromISR+0x3c>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702a:	b672      	cpsid	i
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	b662      	cpsie	i
 800703a:	e7fe      	b.n	800703a <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800703c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800703e:	b90b      	cbnz	r3, 8007044 <xQueueGiveFromISR+0xa0>
			xReturn = pdPASS;
 8007040:	2001      	movs	r0, #1
 8007042:	e009      	b.n	8007058 <xQueueGiveFromISR+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007044:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8007048:	f000 fda8 	bl	8007b9c <xTaskRemoveFromEventList>
 800704c:	b138      	cbz	r0, 800705e <xQueueGiveFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 800704e:	b144      	cbz	r4, 8007062 <xQueueGiveFromISR+0xbe>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007050:	2001      	movs	r0, #1
 8007052:	6020      	str	r0, [r4, #0]
 8007054:	e000      	b.n	8007058 <xQueueGiveFromISR+0xb4>
			xReturn = errQUEUE_FULL;
 8007056:	2000      	movs	r0, #0
	__asm volatile
 8007058:	f386 8811 	msr	BASEPRI, r6
}
 800705c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800705e:	2001      	movs	r0, #1
 8007060:	e7fa      	b.n	8007058 <xQueueGiveFromISR+0xb4>
 8007062:	2001      	movs	r0, #1
 8007064:	e7f8      	b.n	8007058 <xQueueGiveFromISR+0xb4>

08007066 <xQueueReceive>:
{
 8007066:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007068:	b085      	sub	sp, #20
 800706a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800706c:	b1a0      	cbz	r0, 8007098 <xQueueReceive+0x32>
 800706e:	460f      	mov	r7, r1
 8007070:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007072:	b1e1      	cbz	r1, 80070ae <xQueueReceive+0x48>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007074:	f000 fe32 	bl	8007cdc <xTaskGetSchedulerState>
 8007078:	4606      	mov	r6, r0
 800707a:	bb30      	cbnz	r0, 80070ca <xQueueReceive+0x64>
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d064      	beq.n	800714c <xQueueReceive+0xe6>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007086:	b672      	cpsid	i
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	b662      	cpsie	i
 8007096:	e7fe      	b.n	8007096 <xQueueReceive+0x30>
 8007098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709c:	b672      	cpsid	i
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 80070ac:	e7fe      	b.n	80070ac <xQueueReceive+0x46>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070ae:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0df      	beq.n	8007074 <xQueueReceive+0xe>
 80070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b8:	b672      	cpsid	i
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	b662      	cpsie	i
 80070c8:	e7fe      	b.n	80070c8 <xQueueReceive+0x62>
 80070ca:	2600      	movs	r6, #0
 80070cc:	e03e      	b.n	800714c <xQueueReceive+0xe6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070ce:	4639      	mov	r1, r7
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7ff fce6 	bl	8006aa2 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070d6:	3d01      	subs	r5, #1
 80070d8:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	b923      	cbnz	r3, 80070e8 <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 80070de:	f7ff fb6f 	bl	80067c0 <vPortExitCritical>
				return pdPASS;
 80070e2:	2001      	movs	r0, #1
}
 80070e4:	b005      	add	sp, #20
 80070e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070e8:	f104 0010 	add.w	r0, r4, #16
 80070ec:	f000 fd56 	bl	8007b9c <xTaskRemoveFromEventList>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d0f4      	beq.n	80070de <xQueueReceive+0x78>
						queueYIELD_IF_USING_PREEMPTION();
 80070f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80070f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	e7e9      	b.n	80070de <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 800710a:	f7ff fb59 	bl	80067c0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800710e:	2000      	movs	r0, #0
 8007110:	e7e8      	b.n	80070e4 <xQueueReceive+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007112:	a802      	add	r0, sp, #8
 8007114:	f000 fd8a 	bl	8007c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007118:	2601      	movs	r6, #1
 800711a:	e021      	b.n	8007160 <xQueueReceive+0xfa>
		prvLockQueue( pxQueue );
 800711c:	2300      	movs	r3, #0
 800711e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007122:	e029      	b.n	8007178 <xQueueReceive+0x112>
 8007124:	2300      	movs	r3, #0
 8007126:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800712a:	e02b      	b.n	8007184 <xQueueReceive+0x11e>
				prvUnlockQueue( pxQueue );
 800712c:	4620      	mov	r0, r4
 800712e:	f7ff fcca 	bl	8006ac6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007132:	f000 fc1f 	bl	8007974 <xTaskResumeAll>
 8007136:	e009      	b.n	800714c <xQueueReceive+0xe6>
			prvUnlockQueue( pxQueue );
 8007138:	4620      	mov	r0, r4
 800713a:	f7ff fcc4 	bl	8006ac6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800713e:	f000 fc19 	bl	8007974 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007142:	4620      	mov	r0, r4
 8007144:	f7ff fc65 	bl	8006a12 <prvIsQueueEmpty>
 8007148:	2800      	cmp	r0, #0
 800714a:	d13f      	bne.n	80071cc <xQueueReceive+0x166>
		taskENTER_CRITICAL();
 800714c:	f7ff fb12 	bl	8006774 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007150:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007152:	2d00      	cmp	r5, #0
 8007154:	d1bb      	bne.n	80070ce <xQueueReceive+0x68>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0d6      	beq.n	800710a <xQueueReceive+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800715c:	2e00      	cmp	r6, #0
 800715e:	d0d8      	beq.n	8007112 <xQueueReceive+0xac>
		taskEXIT_CRITICAL();
 8007160:	f7ff fb2e 	bl	80067c0 <vPortExitCritical>
		vTaskSuspendAll();
 8007164:	f000 fb70 	bl	8007848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007168:	f7ff fb04 	bl	8006774 <vPortEnterCritical>
 800716c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007170:	b25b      	sxtb	r3, r3
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007176:	d0d1      	beq.n	800711c <xQueueReceive+0xb6>
 8007178:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800717c:	b25b      	sxtb	r3, r3
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007182:	d0cf      	beq.n	8007124 <xQueueReceive+0xbe>
 8007184:	f7ff fb1c 	bl	80067c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007188:	a901      	add	r1, sp, #4
 800718a:	a802      	add	r0, sp, #8
 800718c:	f000 fd5a 	bl	8007c44 <xTaskCheckForTimeOut>
 8007190:	2800      	cmp	r0, #0
 8007192:	d1d1      	bne.n	8007138 <xQueueReceive+0xd2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007194:	4620      	mov	r0, r4
 8007196:	f7ff fc3c 	bl	8006a12 <prvIsQueueEmpty>
 800719a:	2800      	cmp	r0, #0
 800719c:	d0c6      	beq.n	800712c <xQueueReceive+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800719e:	9901      	ldr	r1, [sp, #4]
 80071a0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80071a4:	f000 fce0 	bl	8007b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071a8:	4620      	mov	r0, r4
 80071aa:	f7ff fc8c 	bl	8006ac6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071ae:	f000 fbe1 	bl	8007974 <xTaskResumeAll>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d1ca      	bne.n	800714c <xQueueReceive+0xe6>
					portYIELD_WITHIN_API();
 80071b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80071ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	e7bf      	b.n	800714c <xQueueReceive+0xe6>
				return errQUEUE_EMPTY;
 80071cc:	2000      	movs	r0, #0
 80071ce:	e789      	b.n	80070e4 <xQueueReceive+0x7e>

080071d0 <xQueueSemaphoreTake>:
{
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80071d6:	b168      	cbz	r0, 80071f4 <xQueueSemaphoreTake+0x24>
 80071d8:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80071da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80071dc:	b1ab      	cbz	r3, 800720a <xQueueSemaphoreTake+0x3a>
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	b672      	cpsid	i
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	b662      	cpsie	i
 80071f2:	e7fe      	b.n	80071f2 <xQueueSemaphoreTake+0x22>
 80071f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f8:	b672      	cpsid	i
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8007208:	e7fe      	b.n	8007208 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800720a:	f000 fd67 	bl	8007cdc <xTaskGetSchedulerState>
 800720e:	4605      	mov	r5, r0
 8007210:	b960      	cbnz	r0, 800722c <xQueueSemaphoreTake+0x5c>
 8007212:	9b01      	ldr	r3, [sp, #4]
 8007214:	b16b      	cbz	r3, 8007232 <xQueueSemaphoreTake+0x62>
 8007216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721a:	b672      	cpsid	i
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	b662      	cpsie	i
 800722a:	e7fe      	b.n	800722a <xQueueSemaphoreTake+0x5a>
 800722c:	2600      	movs	r6, #0
 800722e:	4635      	mov	r5, r6
 8007230:	e057      	b.n	80072e2 <xQueueSemaphoreTake+0x112>
 8007232:	4606      	mov	r6, r0
 8007234:	e055      	b.n	80072e2 <xQueueSemaphoreTake+0x112>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007236:	3b01      	subs	r3, #1
 8007238:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	b13b      	cbz	r3, 800724e <xQueueSemaphoreTake+0x7e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	b94b      	cbnz	r3, 8007256 <xQueueSemaphoreTake+0x86>
				taskEXIT_CRITICAL();
 8007242:	f7ff fabd 	bl	80067c0 <vPortExitCritical>
				return pdPASS;
 8007246:	2601      	movs	r6, #1
}
 8007248:	4630      	mov	r0, r6
 800724a:	b004      	add	sp, #16
 800724c:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800724e:	f000 fe71 	bl	8007f34 <pvTaskIncrementMutexHeldCount>
 8007252:	60a0      	str	r0, [r4, #8]
 8007254:	e7f3      	b.n	800723e <xQueueSemaphoreTake+0x6e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007256:	f104 0010 	add.w	r0, r4, #16
 800725a:	f000 fc9f 	bl	8007b9c <xTaskRemoveFromEventList>
 800725e:	2800      	cmp	r0, #0
 8007260:	d0ef      	beq.n	8007242 <xQueueSemaphoreTake+0x72>
						queueYIELD_IF_USING_PREEMPTION();
 8007262:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	e7e4      	b.n	8007242 <xQueueSemaphoreTake+0x72>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007278:	b156      	cbz	r6, 8007290 <xQueueSemaphoreTake+0xc0>
 800727a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727e:	b672      	cpsid	i
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	b662      	cpsie	i
 800728e:	e7fe      	b.n	800728e <xQueueSemaphoreTake+0xbe>
					taskEXIT_CRITICAL();
 8007290:	f7ff fa96 	bl	80067c0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007294:	e7d8      	b.n	8007248 <xQueueSemaphoreTake+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007296:	a802      	add	r0, sp, #8
 8007298:	f000 fcc8 	bl	8007c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800729c:	2501      	movs	r5, #1
 800729e:	e02a      	b.n	80072f6 <xQueueSemaphoreTake+0x126>
		prvLockQueue( pxQueue );
 80072a0:	2300      	movs	r3, #0
 80072a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80072a6:	e032      	b.n	800730e <xQueueSemaphoreTake+0x13e>
 80072a8:	2300      	movs	r3, #0
 80072aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80072ae:	e034      	b.n	800731a <xQueueSemaphoreTake+0x14a>
						taskENTER_CRITICAL();
 80072b0:	f7ff fa60 	bl	8006774 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072b4:	68a0      	ldr	r0, [r4, #8]
 80072b6:	f000 fd21 	bl	8007cfc <xTaskPriorityInherit>
 80072ba:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80072bc:	f7ff fa80 	bl	80067c0 <vPortExitCritical>
 80072c0:	e03b      	b.n	800733a <xQueueSemaphoreTake+0x16a>
				prvUnlockQueue( pxQueue );
 80072c2:	4620      	mov	r0, r4
 80072c4:	f7ff fbff 	bl	8006ac6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072c8:	f000 fb54 	bl	8007974 <xTaskResumeAll>
 80072cc:	e009      	b.n	80072e2 <xQueueSemaphoreTake+0x112>
			prvUnlockQueue( pxQueue );
 80072ce:	4620      	mov	r0, r4
 80072d0:	f7ff fbf9 	bl	8006ac6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072d4:	f000 fb4e 	bl	8007974 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072d8:	4620      	mov	r0, r4
 80072da:	f7ff fb9a 	bl	8006a12 <prvIsQueueEmpty>
 80072de:	2800      	cmp	r0, #0
 80072e0:	d142      	bne.n	8007368 <xQueueSemaphoreTake+0x198>
		taskENTER_CRITICAL();
 80072e2:	f7ff fa47 	bl	8006774 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1a4      	bne.n	8007236 <xQueueSemaphoreTake+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 80072ec:	9b01      	ldr	r3, [sp, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0c2      	beq.n	8007278 <xQueueSemaphoreTake+0xa8>
				else if( xEntryTimeSet == pdFALSE )
 80072f2:	2d00      	cmp	r5, #0
 80072f4:	d0cf      	beq.n	8007296 <xQueueSemaphoreTake+0xc6>
		taskEXIT_CRITICAL();
 80072f6:	f7ff fa63 	bl	80067c0 <vPortExitCritical>
		vTaskSuspendAll();
 80072fa:	f000 faa5 	bl	8007848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072fe:	f7ff fa39 	bl	8006774 <vPortEnterCritical>
 8007302:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007306:	b25b      	sxtb	r3, r3
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800730c:	d0c8      	beq.n	80072a0 <xQueueSemaphoreTake+0xd0>
 800730e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007312:	b25b      	sxtb	r3, r3
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007318:	d0c6      	beq.n	80072a8 <xQueueSemaphoreTake+0xd8>
 800731a:	f7ff fa51 	bl	80067c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800731e:	a901      	add	r1, sp, #4
 8007320:	a802      	add	r0, sp, #8
 8007322:	f000 fc8f 	bl	8007c44 <xTaskCheckForTimeOut>
 8007326:	2800      	cmp	r0, #0
 8007328:	d1d1      	bne.n	80072ce <xQueueSemaphoreTake+0xfe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800732a:	4620      	mov	r0, r4
 800732c:	f7ff fb71 	bl	8006a12 <prvIsQueueEmpty>
 8007330:	2800      	cmp	r0, #0
 8007332:	d0c6      	beq.n	80072c2 <xQueueSemaphoreTake+0xf2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0ba      	beq.n	80072b0 <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800733a:	9901      	ldr	r1, [sp, #4]
 800733c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007340:	f000 fc12 	bl	8007b68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007344:	4620      	mov	r0, r4
 8007346:	f7ff fbbe 	bl	8006ac6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800734a:	f000 fb13 	bl	8007974 <xTaskResumeAll>
 800734e:	2800      	cmp	r0, #0
 8007350:	d1c7      	bne.n	80072e2 <xQueueSemaphoreTake+0x112>
					portYIELD_WITHIN_API();
 8007352:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800735a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	e7bc      	b.n	80072e2 <xQueueSemaphoreTake+0x112>
					if( xInheritanceOccurred != pdFALSE )
 8007368:	b90e      	cbnz	r6, 800736e <xQueueSemaphoreTake+0x19e>
				return errQUEUE_EMPTY;
 800736a:	2600      	movs	r6, #0
 800736c:	e76c      	b.n	8007248 <xQueueSemaphoreTake+0x78>
						taskENTER_CRITICAL();
 800736e:	f7ff fa01 	bl	8006774 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007372:	4620      	mov	r0, r4
 8007374:	f7ff fb36 	bl	80069e4 <prvGetDisinheritPriorityAfterTimeout>
 8007378:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800737a:	68a0      	ldr	r0, [r4, #8]
 800737c:	f000 fd76 	bl	8007e6c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007380:	f7ff fa1e 	bl	80067c0 <vPortExitCritical>
 8007384:	e7f1      	b.n	800736a <xQueueSemaphoreTake+0x19a>
	...

08007388 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007388:	4b08      	ldr	r3, [pc, #32]	@ (80073ac <prvResetNextTaskUnblockTime+0x24>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	b923      	cbnz	r3, 800739a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007390:	4b07      	ldr	r3, [pc, #28]	@ (80073b0 <prvResetNextTaskUnblockTime+0x28>)
 8007392:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800739a:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <prvResetNextTaskUnblockTime+0x24>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	4b02      	ldr	r3, [pc, #8]	@ (80073b0 <prvResetNextTaskUnblockTime+0x28>)
 80073a6:	601a      	str	r2, [r3, #0]
	}
}
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20010690 	.word	0x20010690
 80073b0:	20010628 	.word	0x20010628

080073b4 <prvInitialiseNewTask>:
{
 80073b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	4607      	mov	r7, r0
 80073ba:	4698      	mov	r8, r3
 80073bc:	9d08      	ldr	r5, [sp, #32]
 80073be:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 80073c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073c4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80073c6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80073ca:	4413      	add	r3, r2
 80073cc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073d0:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80073d4:	2900      	cmp	r1, #0
 80073d6:	d045      	beq.n	8007464 <prvInitialiseNewTask+0xb0>
 80073d8:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073da:	f04f 0c00 	mov.w	ip, #0
 80073de:	f1bc 0f1f 	cmp.w	ip, #31
 80073e2:	d809      	bhi.n	80073f8 <prvInitialiseNewTask+0x44>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073e4:	f810 200c 	ldrb.w	r2, [r0, ip]
 80073e8:	eb04 030c 	add.w	r3, r4, ip
 80073ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80073f0:	b112      	cbz	r2, 80073f8 <prvInitialiseNewTask+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073f2:	f10c 0c01 	add.w	ip, ip, #1
 80073f6:	e7f2      	b.n	80073de <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073f8:	2300      	movs	r3, #0
 80073fa:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073fe:	2d06      	cmp	r5, #6
 8007400:	d900      	bls.n	8007404 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007402:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8007404:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007406:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8007408:	f04f 0a00 	mov.w	sl, #0
 800740c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007410:	1d20      	adds	r0, r4, #4
 8007412:	f7ff f90a 	bl	800662a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007416:	f104 0018 	add.w	r0, r4, #24
 800741a:	f7ff f906 	bl	800662a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800741e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007420:	f1c5 0507 	rsb	r5, r5, #7
 8007424:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007426:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8007428:	f8c4 a0a8 	str.w	sl, [r4, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800742c:	f884 a0ac 	strb.w	sl, [r4, #172]	@ 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007430:	224c      	movs	r2, #76	@ 0x4c
 8007432:	4651      	mov	r1, sl
 8007434:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8007438:	f009 f8a3 	bl	8010582 <memset>
 800743c:	4b0b      	ldr	r3, [pc, #44]	@ (800746c <prvInitialiseNewTask+0xb8>)
 800743e:	6623      	str	r3, [r4, #96]	@ 0x60
 8007440:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007444:	6662      	str	r2, [r4, #100]	@ 0x64
 8007446:	33d0      	adds	r3, #208	@ 0xd0
 8007448:	66a3      	str	r3, [r4, #104]	@ 0x68
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800744a:	4642      	mov	r2, r8
 800744c:	4639      	mov	r1, r7
 800744e:	4630      	mov	r0, r6
 8007450:	f7ff f968 	bl	8006724 <pxPortInitialiseStack>
 8007454:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007456:	f1b9 0f00 	cmp.w	r9, #0
 800745a:	d001      	beq.n	8007460 <prvInitialiseNewTask+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800745c:	f8c9 4000 	str.w	r4, [r9]
}
 8007460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007464:	2300      	movs	r3, #0
 8007466:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800746a:	e7c8      	b.n	80073fe <prvInitialiseNewTask+0x4a>
 800746c:	20017c90 	.word	0x20017c90

08007470 <prvInitialiseTaskLists>:
{
 8007470:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007472:	2400      	movs	r4, #0
 8007474:	e007      	b.n	8007486 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007476:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800747a:	0093      	lsls	r3, r2, #2
 800747c:	480e      	ldr	r0, [pc, #56]	@ (80074b8 <prvInitialiseTaskLists+0x48>)
 800747e:	4418      	add	r0, r3
 8007480:	f7ff f8c8 	bl	8006614 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007484:	3401      	adds	r4, #1
 8007486:	2c06      	cmp	r4, #6
 8007488:	d9f5      	bls.n	8007476 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800748a:	4d0c      	ldr	r5, [pc, #48]	@ (80074bc <prvInitialiseTaskLists+0x4c>)
 800748c:	4628      	mov	r0, r5
 800748e:	f7ff f8c1 	bl	8006614 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007492:	4c0b      	ldr	r4, [pc, #44]	@ (80074c0 <prvInitialiseTaskLists+0x50>)
 8007494:	4620      	mov	r0, r4
 8007496:	f7ff f8bd 	bl	8006614 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800749a:	480a      	ldr	r0, [pc, #40]	@ (80074c4 <prvInitialiseTaskLists+0x54>)
 800749c:	f7ff f8ba 	bl	8006614 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80074a0:	4809      	ldr	r0, [pc, #36]	@ (80074c8 <prvInitialiseTaskLists+0x58>)
 80074a2:	f7ff f8b7 	bl	8006614 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80074a6:	4809      	ldr	r0, [pc, #36]	@ (80074cc <prvInitialiseTaskLists+0x5c>)
 80074a8:	f7ff f8b4 	bl	8006614 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80074ac:	4b08      	ldr	r3, [pc, #32]	@ (80074d0 <prvInitialiseTaskLists+0x60>)
 80074ae:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074b0:	4b08      	ldr	r3, [pc, #32]	@ (80074d4 <prvInitialiseTaskLists+0x64>)
 80074b2:	601c      	str	r4, [r3, #0]
}
 80074b4:	bd38      	pop	{r3, r4, r5, pc}
 80074b6:	bf00      	nop
 80074b8:	200106bc 	.word	0x200106bc
 80074bc:	200106a8 	.word	0x200106a8
 80074c0:	20010694 	.word	0x20010694
 80074c4:	20010678 	.word	0x20010678
 80074c8:	20010664 	.word	0x20010664
 80074cc:	2001064c 	.word	0x2001064c
 80074d0:	20010690 	.word	0x20010690
 80074d4:	2001068c 	.word	0x2001068c

080074d8 <prvAddNewTaskToReadyList>:
{
 80074d8:	b510      	push	{r4, lr}
 80074da:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80074dc:	f7ff f94a 	bl	8006774 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80074e0:	4a21      	ldr	r2, [pc, #132]	@ (8007568 <prvAddNewTaskToReadyList+0x90>)
 80074e2:	6813      	ldr	r3, [r2, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074e8:	4b20      	ldr	r3, [pc, #128]	@ (800756c <prvAddNewTaskToReadyList+0x94>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	b15b      	cbz	r3, 8007506 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80074ee:	4b20      	ldr	r3, [pc, #128]	@ (8007570 <prvAddNewTaskToReadyList+0x98>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	b96b      	cbnz	r3, 8007510 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074f4:	4b1d      	ldr	r3, [pc, #116]	@ (800756c <prvAddNewTaskToReadyList+0x94>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d807      	bhi.n	8007510 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8007500:	4b1a      	ldr	r3, [pc, #104]	@ (800756c <prvAddNewTaskToReadyList+0x94>)
 8007502:	601c      	str	r4, [r3, #0]
 8007504:	e004      	b.n	8007510 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8007506:	4b19      	ldr	r3, [pc, #100]	@ (800756c <prvAddNewTaskToReadyList+0x94>)
 8007508:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800750a:	6813      	ldr	r3, [r2, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d028      	beq.n	8007562 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8007510:	4a18      	ldr	r2, [pc, #96]	@ (8007574 <prvAddNewTaskToReadyList+0x9c>)
 8007512:	6813      	ldr	r3, [r2, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007518:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800751a:	2301      	movs	r3, #1
 800751c:	4083      	lsls	r3, r0
 800751e:	4a16      	ldr	r2, [pc, #88]	@ (8007578 <prvAddNewTaskToReadyList+0xa0>)
 8007520:	6811      	ldr	r1, [r2, #0]
 8007522:	430b      	orrs	r3, r1
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800752a:	1d21      	adds	r1, r4, #4
 800752c:	4b13      	ldr	r3, [pc, #76]	@ (800757c <prvAddNewTaskToReadyList+0xa4>)
 800752e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007532:	f7ff f87d 	bl	8006630 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007536:	f7ff f943 	bl	80067c0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800753a:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <prvAddNewTaskToReadyList+0x98>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	b17b      	cbz	r3, 8007560 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007540:	4b0a      	ldr	r3, [pc, #40]	@ (800756c <prvAddNewTaskToReadyList+0x94>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007546:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007548:	429a      	cmp	r2, r3
 800754a:	d209      	bcs.n	8007560 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 800754c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007554:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	f3bf 8f6f 	isb	sy
}
 8007560:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8007562:	f7ff ff85 	bl	8007470 <prvInitialiseTaskLists>
 8007566:	e7d3      	b.n	8007510 <prvAddNewTaskToReadyList+0x38>
 8007568:	20010648 	.word	0x20010648
 800756c:	20010748 	.word	0x20010748
 8007570:	2001063c 	.word	0x2001063c
 8007574:	2001062c 	.word	0x2001062c
 8007578:	20010640 	.word	0x20010640
 800757c:	200106bc 	.word	0x200106bc

08007580 <prvDeleteTCB>:
	{
 8007580:	b510      	push	{r4, lr}
 8007582:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007584:	305c      	adds	r0, #92	@ 0x5c
 8007586:	f009 f82b 	bl	80105e0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800758a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 800758e:	b173      	cbz	r3, 80075ae <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007590:	2b01      	cmp	r3, #1
 8007592:	d013      	beq.n	80075bc <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007594:	2b02      	cmp	r3, #2
 8007596:	d010      	beq.n	80075ba <prvDeleteTCB+0x3a>
 8007598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759c:	b672      	cpsid	i
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	b662      	cpsie	i
 80075ac:	e7fe      	b.n	80075ac <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 80075ae:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80075b0:	f7fe fff4 	bl	800659c <vPortFree>
				vPortFree( pxTCB );
 80075b4:	4620      	mov	r0, r4
 80075b6:	f7fe fff1 	bl	800659c <vPortFree>
	}
 80075ba:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80075bc:	4620      	mov	r0, r4
 80075be:	f7fe ffed 	bl	800659c <vPortFree>
 80075c2:	e7fa      	b.n	80075ba <prvDeleteTCB+0x3a>

080075c4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007604 <prvCheckTasksWaitingTermination+0x40>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	b1d3      	cbz	r3, 8007600 <prvCheckTasksWaitingTermination+0x3c>
{
 80075ca:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80075cc:	f7ff f8d2 	bl	8006774 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007608 <prvCheckTasksWaitingTermination+0x44>)
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075d6:	1d20      	adds	r0, r4, #4
 80075d8:	f7ff f84e 	bl	8006678 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075dc:	4a0b      	ldr	r2, [pc, #44]	@ (800760c <prvCheckTasksWaitingTermination+0x48>)
 80075de:	6813      	ldr	r3, [r2, #0]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075e4:	4a07      	ldr	r2, [pc, #28]	@ (8007604 <prvCheckTasksWaitingTermination+0x40>)
 80075e6:	6813      	ldr	r3, [r2, #0]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80075ec:	f7ff f8e8 	bl	80067c0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80075f0:	4620      	mov	r0, r4
 80075f2:	f7ff ffc5 	bl	8007580 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075f6:	4b03      	ldr	r3, [pc, #12]	@ (8007604 <prvCheckTasksWaitingTermination+0x40>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e6      	bne.n	80075cc <prvCheckTasksWaitingTermination+0x8>
}
 80075fe:	bd10      	pop	{r4, pc}
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	20010660 	.word	0x20010660
 8007608:	20010664 	.word	0x20010664
 800760c:	20010648 	.word	0x20010648

08007610 <prvIdleTask>:
{
 8007610:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8007612:	f7ff ffd7 	bl	80075c4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007616:	4b07      	ldr	r3, [pc, #28]	@ (8007634 <prvIdleTask+0x24>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d9f9      	bls.n	8007612 <prvIdleTask+0x2>
				taskYIELD();
 800761e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007626:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	e7ee      	b.n	8007612 <prvIdleTask+0x2>
 8007634:	200106bc 	.word	0x200106bc

08007638 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	4604      	mov	r4, r0
 800763c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800763e:	4b1f      	ldr	r3, [pc, #124]	@ (80076bc <prvAddCurrentTaskToDelayedList+0x84>)
 8007640:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007642:	4b1f      	ldr	r3, [pc, #124]	@ (80076c0 <prvAddCurrentTaskToDelayedList+0x88>)
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	3004      	adds	r0, #4
 8007648:	f7ff f816 	bl	8006678 <uxListRemove>
 800764c:	b948      	cbnz	r0, 8007662 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800764e:	4b1c      	ldr	r3, [pc, #112]	@ (80076c0 <prvAddCurrentTaskToDelayedList+0x88>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007654:	2201      	movs	r2, #1
 8007656:	409a      	lsls	r2, r3
 8007658:	491a      	ldr	r1, [pc, #104]	@ (80076c4 <prvAddCurrentTaskToDelayedList+0x8c>)
 800765a:	680b      	ldr	r3, [r1, #0]
 800765c:	ea23 0302 	bic.w	r3, r3, r2
 8007660:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007662:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8007666:	bf14      	ite	ne
 8007668:	2300      	movne	r3, #0
 800766a:	2301      	moveq	r3, #1
 800766c:	2d00      	cmp	r5, #0
 800766e:	bf08      	it	eq
 8007670:	2300      	moveq	r3, #0
 8007672:	b96b      	cbnz	r3, 8007690 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007674:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007676:	4b12      	ldr	r3, [pc, #72]	@ (80076c0 <prvAddCurrentTaskToDelayedList+0x88>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800767c:	42a6      	cmp	r6, r4
 800767e:	d90e      	bls.n	800769e <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007680:	4b11      	ldr	r3, [pc, #68]	@ (80076c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007682:	6818      	ldr	r0, [r3, #0]
 8007684:	4b0e      	ldr	r3, [pc, #56]	@ (80076c0 <prvAddCurrentTaskToDelayedList+0x88>)
 8007686:	6819      	ldr	r1, [r3, #0]
 8007688:	3104      	adds	r1, #4
 800768a:	f7fe ffdc 	bl	8006646 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800768e:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007690:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <prvAddCurrentTaskToDelayedList+0x88>)
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	3104      	adds	r1, #4
 8007696:	480d      	ldr	r0, [pc, #52]	@ (80076cc <prvAddCurrentTaskToDelayedList+0x94>)
 8007698:	f7fe ffca 	bl	8006630 <vListInsertEnd>
 800769c:	e7f7      	b.n	800768e <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800769e:	4b0c      	ldr	r3, [pc, #48]	@ (80076d0 <prvAddCurrentTaskToDelayedList+0x98>)
 80076a0:	6818      	ldr	r0, [r3, #0]
 80076a2:	4b07      	ldr	r3, [pc, #28]	@ (80076c0 <prvAddCurrentTaskToDelayedList+0x88>)
 80076a4:	6819      	ldr	r1, [r3, #0]
 80076a6:	3104      	adds	r1, #4
 80076a8:	f7fe ffcd 	bl	8006646 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076ac:	4b09      	ldr	r3, [pc, #36]	@ (80076d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	d9ec      	bls.n	800768e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 80076b4:	4b07      	ldr	r3, [pc, #28]	@ (80076d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076b6:	601c      	str	r4, [r3, #0]
}
 80076b8:	e7e9      	b.n	800768e <prvAddCurrentTaskToDelayedList+0x56>
 80076ba:	bf00      	nop
 80076bc:	20010644 	.word	0x20010644
 80076c0:	20010748 	.word	0x20010748
 80076c4:	20010640 	.word	0x20010640
 80076c8:	2001068c 	.word	0x2001068c
 80076cc:	2001064c 	.word	0x2001064c
 80076d0:	20010690 	.word	0x20010690
 80076d4:	20010628 	.word	0x20010628

080076d8 <xTaskCreateStatic>:
	{
 80076d8:	b530      	push	{r4, r5, lr}
 80076da:	b087      	sub	sp, #28
 80076dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80076de:	b18c      	cbz	r4, 8007704 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80076e0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80076e2:	b1d5      	cbz	r5, 800771a <xTaskCreateStatic+0x42>
			volatile size_t xSize = sizeof( StaticTask_t );
 80076e4:	25b0      	movs	r5, #176	@ 0xb0
 80076e6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076e8:	9d04      	ldr	r5, [sp, #16]
 80076ea:	2db0      	cmp	r5, #176	@ 0xb0
 80076ec:	d020      	beq.n	8007730 <xTaskCreateStatic+0x58>
 80076ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f2:	b672      	cpsid	i
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	b662      	cpsie	i
 8007702:	e7fe      	b.n	8007702 <xTaskCreateStatic+0x2a>
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	b672      	cpsid	i
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8007718:	e7fe      	b.n	8007718 <xTaskCreateStatic+0x40>
 800771a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771e:	b672      	cpsid	i
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 800772e:	e7fe      	b.n	800772e <xTaskCreateStatic+0x56>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007730:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007732:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8007734:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007736:	2402      	movs	r4, #2
 8007738:	f885 40ad 	strb.w	r4, [r5, #173]	@ 0xad
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800773c:	2400      	movs	r4, #0
 800773e:	9403      	str	r4, [sp, #12]
 8007740:	9502      	str	r5, [sp, #8]
 8007742:	ac05      	add	r4, sp, #20
 8007744:	9401      	str	r4, [sp, #4]
 8007746:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007748:	9400      	str	r4, [sp, #0]
 800774a:	f7ff fe33 	bl	80073b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800774e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007750:	f7ff fec2 	bl	80074d8 <prvAddNewTaskToReadyList>
	}
 8007754:	9805      	ldr	r0, [sp, #20]
 8007756:	b007      	add	sp, #28
 8007758:	bd30      	pop	{r4, r5, pc}

0800775a <xTaskCreate>:
	{
 800775a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800775e:	b085      	sub	sp, #20
 8007760:	4607      	mov	r7, r0
 8007762:	4688      	mov	r8, r1
 8007764:	4614      	mov	r4, r2
 8007766:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007768:	0090      	lsls	r0, r2, #2
 800776a:	f7fe fe97 	bl	800649c <pvPortMalloc>
			if( pxStack != NULL )
 800776e:	b308      	cbz	r0, 80077b4 <xTaskCreate+0x5a>
 8007770:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007772:	20b0      	movs	r0, #176	@ 0xb0
 8007774:	f7fe fe92 	bl	800649c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007778:	4605      	mov	r5, r0
 800777a:	b1a8      	cbz	r0, 80077a8 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800777c:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007780:	2300      	movs	r3, #0
 8007782:	f880 30ad 	strb.w	r3, [r0, #173]	@ 0xad
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007786:	9303      	str	r3, [sp, #12]
 8007788:	9002      	str	r0, [sp, #8]
 800778a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	4633      	mov	r3, r6
 8007794:	4622      	mov	r2, r4
 8007796:	4641      	mov	r1, r8
 8007798:	4638      	mov	r0, r7
 800779a:	f7ff fe0b 	bl	80073b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800779e:	4628      	mov	r0, r5
 80077a0:	f7ff fe9a 	bl	80074d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077a4:	2001      	movs	r0, #1
 80077a6:	e007      	b.n	80077b8 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80077a8:	4648      	mov	r0, r9
 80077aa:	f7fe fef7 	bl	800659c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077b2:	e001      	b.n	80077b8 <xTaskCreate+0x5e>
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 80077b8:	b005      	add	sp, #20
 80077ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080077c0 <vTaskStartScheduler>:
{
 80077c0:	b510      	push	{r4, lr}
 80077c2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077c4:	2400      	movs	r4, #0
 80077c6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077c8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077ca:	aa07      	add	r2, sp, #28
 80077cc:	a906      	add	r1, sp, #24
 80077ce:	a805      	add	r0, sp, #20
 80077d0:	f003 ff54 	bl	800b67c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077d4:	9b05      	ldr	r3, [sp, #20]
 80077d6:	9302      	str	r3, [sp, #8]
 80077d8:	9b06      	ldr	r3, [sp, #24]
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	9400      	str	r4, [sp, #0]
 80077de:	4623      	mov	r3, r4
 80077e0:	9a07      	ldr	r2, [sp, #28]
 80077e2:	4911      	ldr	r1, [pc, #68]	@ (8007828 <vTaskStartScheduler+0x68>)
 80077e4:	4811      	ldr	r0, [pc, #68]	@ (800782c <vTaskStartScheduler+0x6c>)
 80077e6:	f7ff ff77 	bl	80076d8 <xTaskCreateStatic>
 80077ea:	4b11      	ldr	r3, [pc, #68]	@ (8007830 <vTaskStartScheduler+0x70>)
 80077ec:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80077ee:	b1c8      	cbz	r0, 8007824 <vTaskStartScheduler+0x64>
 80077f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f4:	b672      	cpsid	i
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007804:	4b0b      	ldr	r3, [pc, #44]	@ (8007834 <vTaskStartScheduler+0x74>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	335c      	adds	r3, #92	@ 0x5c
 800780a:	4a0b      	ldr	r2, [pc, #44]	@ (8007838 <vTaskStartScheduler+0x78>)
 800780c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800780e:	4b0b      	ldr	r3, [pc, #44]	@ (800783c <vTaskStartScheduler+0x7c>)
 8007810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007814:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007816:	4b0a      	ldr	r3, [pc, #40]	@ (8007840 <vTaskStartScheduler+0x80>)
 8007818:	2201      	movs	r2, #1
 800781a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800781c:	4b09      	ldr	r3, [pc, #36]	@ (8007844 <vTaskStartScheduler+0x84>)
 800781e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007820:	f7ff f844 	bl	80068ac <xPortStartScheduler>
}
 8007824:	b008      	add	sp, #32
 8007826:	bd10      	pop	{r4, pc}
 8007828:	08012fcc 	.word	0x08012fcc
 800782c:	08007611 	.word	0x08007611
 8007830:	20010624 	.word	0x20010624
 8007834:	20010748 	.word	0x20010748
 8007838:	2000040c 	.word	0x2000040c
 800783c:	20010628 	.word	0x20010628
 8007840:	2001063c 	.word	0x2001063c
 8007844:	20010644 	.word	0x20010644

08007848 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007848:	4a02      	ldr	r2, [pc, #8]	@ (8007854 <vTaskSuspendAll+0xc>)
 800784a:	6813      	ldr	r3, [r2, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	6013      	str	r3, [r2, #0]
}
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20010620 	.word	0x20010620

08007858 <xTaskIncrementTick>:
{
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800785a:	4b3b      	ldr	r3, [pc, #236]	@ (8007948 <xTaskIncrementTick+0xf0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d166      	bne.n	8007930 <xTaskIncrementTick+0xd8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007862:	4b3a      	ldr	r3, [pc, #232]	@ (800794c <xTaskIncrementTick+0xf4>)
 8007864:	681d      	ldr	r5, [r3, #0]
 8007866:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007868:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800786a:	b9d5      	cbnz	r5, 80078a2 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800786c:	4b38      	ldr	r3, [pc, #224]	@ (8007950 <xTaskIncrementTick+0xf8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	b153      	cbz	r3, 800788a <xTaskIncrementTick+0x32>
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	b672      	cpsid	i
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	b662      	cpsie	i
 8007888:	e7fe      	b.n	8007888 <xTaskIncrementTick+0x30>
 800788a:	4a31      	ldr	r2, [pc, #196]	@ (8007950 <xTaskIncrementTick+0xf8>)
 800788c:	6811      	ldr	r1, [r2, #0]
 800788e:	4b31      	ldr	r3, [pc, #196]	@ (8007954 <xTaskIncrementTick+0xfc>)
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	6010      	str	r0, [r2, #0]
 8007894:	6019      	str	r1, [r3, #0]
 8007896:	4a30      	ldr	r2, [pc, #192]	@ (8007958 <xTaskIncrementTick+0x100>)
 8007898:	6813      	ldr	r3, [r2, #0]
 800789a:	3301      	adds	r3, #1
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	f7ff fd73 	bl	8007388 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078a2:	4b2e      	ldr	r3, [pc, #184]	@ (800795c <xTaskIncrementTick+0x104>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	42ab      	cmp	r3, r5
 80078a8:	d938      	bls.n	800791c <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 80078aa:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078ac:	4b2c      	ldr	r3, [pc, #176]	@ (8007960 <xTaskIncrementTick+0x108>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80078b6:	009a      	lsls	r2, r3, #2
 80078b8:	4b2a      	ldr	r3, [pc, #168]	@ (8007964 <xTaskIncrementTick+0x10c>)
 80078ba:	589b      	ldr	r3, [r3, r2]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d93c      	bls.n	800793a <xTaskIncrementTick+0xe2>
				xSwitchRequired = pdTRUE;
 80078c0:	2701      	movs	r7, #1
 80078c2:	e03a      	b.n	800793a <xTaskIncrementTick+0xe2>
							xSwitchRequired = pdTRUE;
 80078c4:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078c6:	4b22      	ldr	r3, [pc, #136]	@ (8007950 <xTaskIncrementTick+0xf8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	b343      	cbz	r3, 8007920 <xTaskIncrementTick+0xc8>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ce:	4b20      	ldr	r3, [pc, #128]	@ (8007950 <xTaskIncrementTick+0xf8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078d6:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80078d8:	429d      	cmp	r5, r3
 80078da:	d326      	bcc.n	800792a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078dc:	1d26      	adds	r6, r4, #4
 80078de:	4630      	mov	r0, r6
 80078e0:	f7fe feca 	bl	8006678 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078e4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80078e6:	b11b      	cbz	r3, 80078f0 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078e8:	f104 0018 	add.w	r0, r4, #24
 80078ec:	f7fe fec4 	bl	8006678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80078f2:	2201      	movs	r2, #1
 80078f4:	409a      	lsls	r2, r3
 80078f6:	491c      	ldr	r1, [pc, #112]	@ (8007968 <xTaskIncrementTick+0x110>)
 80078f8:	6808      	ldr	r0, [r1, #0]
 80078fa:	4302      	orrs	r2, r0
 80078fc:	600a      	str	r2, [r1, #0]
 80078fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007902:	009a      	lsls	r2, r3, #2
 8007904:	4631      	mov	r1, r6
 8007906:	4817      	ldr	r0, [pc, #92]	@ (8007964 <xTaskIncrementTick+0x10c>)
 8007908:	4410      	add	r0, r2
 800790a:	f7fe fe91 	bl	8006630 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800790e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007910:	4b13      	ldr	r3, [pc, #76]	@ (8007960 <xTaskIncrementTick+0x108>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	429a      	cmp	r2, r3
 8007918:	d2d4      	bcs.n	80078c4 <xTaskIncrementTick+0x6c>
 800791a:	e7d4      	b.n	80078c6 <xTaskIncrementTick+0x6e>
BaseType_t xSwitchRequired = pdFALSE;
 800791c:	2700      	movs	r7, #0
 800791e:	e7d2      	b.n	80078c6 <xTaskIncrementTick+0x6e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007920:	4b0e      	ldr	r3, [pc, #56]	@ (800795c <xTaskIncrementTick+0x104>)
 8007922:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007926:	601a      	str	r2, [r3, #0]
					break;
 8007928:	e7c0      	b.n	80078ac <xTaskIncrementTick+0x54>
						xNextTaskUnblockTime = xItemValue;
 800792a:	4a0c      	ldr	r2, [pc, #48]	@ (800795c <xTaskIncrementTick+0x104>)
 800792c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800792e:	e7bd      	b.n	80078ac <xTaskIncrementTick+0x54>
		++uxPendedTicks;
 8007930:	4a0e      	ldr	r2, [pc, #56]	@ (800796c <xTaskIncrementTick+0x114>)
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007938:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800793a:	4b0d      	ldr	r3, [pc, #52]	@ (8007970 <xTaskIncrementTick+0x118>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	b103      	cbz	r3, 8007942 <xTaskIncrementTick+0xea>
			xSwitchRequired = pdTRUE;
 8007940:	2701      	movs	r7, #1
}
 8007942:	4638      	mov	r0, r7
 8007944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007946:	bf00      	nop
 8007948:	20010620 	.word	0x20010620
 800794c:	20010644 	.word	0x20010644
 8007950:	20010690 	.word	0x20010690
 8007954:	2001068c 	.word	0x2001068c
 8007958:	20010630 	.word	0x20010630
 800795c:	20010628 	.word	0x20010628
 8007960:	20010748 	.word	0x20010748
 8007964:	200106bc 	.word	0x200106bc
 8007968:	20010640 	.word	0x20010640
 800796c:	20010638 	.word	0x20010638
 8007970:	20010634 	.word	0x20010634

08007974 <xTaskResumeAll>:
{
 8007974:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8007976:	4b36      	ldr	r3, [pc, #216]	@ (8007a50 <xTaskResumeAll+0xdc>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	b953      	cbnz	r3, 8007992 <xTaskResumeAll+0x1e>
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	b672      	cpsid	i
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	b662      	cpsie	i
 8007990:	e7fe      	b.n	8007990 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8007992:	f7fe feef 	bl	8006774 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007996:	4b2e      	ldr	r3, [pc, #184]	@ (8007a50 <xTaskResumeAll+0xdc>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	3a01      	subs	r2, #1
 800799c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d14f      	bne.n	8007a44 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007a54 <xTaskResumeAll+0xe0>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	b90b      	cbnz	r3, 80079ae <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 80079aa:	2400      	movs	r4, #0
 80079ac:	e04b      	b.n	8007a46 <xTaskResumeAll+0xd2>
TCB_t *pxTCB = NULL;
 80079ae:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079b0:	4b29      	ldr	r3, [pc, #164]	@ (8007a58 <xTaskResumeAll+0xe4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	b31b      	cbz	r3, 80079fe <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b6:	4b28      	ldr	r3, [pc, #160]	@ (8007a58 <xTaskResumeAll+0xe4>)
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079bc:	f104 0018 	add.w	r0, r4, #24
 80079c0:	f7fe fe5a 	bl	8006678 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079c4:	1d25      	adds	r5, r4, #4
 80079c6:	4628      	mov	r0, r5
 80079c8:	f7fe fe56 	bl	8006678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079cc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80079ce:	2301      	movs	r3, #1
 80079d0:	4083      	lsls	r3, r0
 80079d2:	4a22      	ldr	r2, [pc, #136]	@ (8007a5c <xTaskResumeAll+0xe8>)
 80079d4:	6811      	ldr	r1, [r2, #0]
 80079d6:	430b      	orrs	r3, r1
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80079de:	4629      	mov	r1, r5
 80079e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007a60 <xTaskResumeAll+0xec>)
 80079e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80079e6:	f7fe fe23 	bl	8006630 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80079ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007a64 <xTaskResumeAll+0xf0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d3dc      	bcc.n	80079b0 <xTaskResumeAll+0x3c>
						xYieldPending = pdTRUE;
 80079f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a68 <xTaskResumeAll+0xf4>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	e7d8      	b.n	80079b0 <xTaskResumeAll+0x3c>
				if( pxTCB != NULL )
 80079fe:	b10c      	cbz	r4, 8007a04 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8007a00:	f7ff fcc2 	bl	8007388 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a04:	4b19      	ldr	r3, [pc, #100]	@ (8007a6c <xTaskResumeAll+0xf8>)
 8007a06:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a08:	b984      	cbnz	r4, 8007a2c <xTaskResumeAll+0xb8>
				if( xYieldPending != pdFALSE )
 8007a0a:	4b17      	ldr	r3, [pc, #92]	@ (8007a68 <xTaskResumeAll+0xf4>)
 8007a0c:	681c      	ldr	r4, [r3, #0]
 8007a0e:	b1d4      	cbz	r4, 8007a46 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 8007a10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a18:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007a24:	2401      	movs	r4, #1
 8007a26:	e00e      	b.n	8007a46 <xTaskResumeAll+0xd2>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a28:	3c01      	subs	r4, #1
 8007a2a:	d007      	beq.n	8007a3c <xTaskResumeAll+0xc8>
							if( xTaskIncrementTick() != pdFALSE )
 8007a2c:	f7ff ff14 	bl	8007858 <xTaskIncrementTick>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d0f9      	beq.n	8007a28 <xTaskResumeAll+0xb4>
								xYieldPending = pdTRUE;
 8007a34:	4b0c      	ldr	r3, [pc, #48]	@ (8007a68 <xTaskResumeAll+0xf4>)
 8007a36:	2201      	movs	r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	e7f5      	b.n	8007a28 <xTaskResumeAll+0xb4>
						uxPendedTicks = 0;
 8007a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a6c <xTaskResumeAll+0xf8>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	e7e2      	b.n	8007a0a <xTaskResumeAll+0x96>
BaseType_t xAlreadyYielded = pdFALSE;
 8007a44:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007a46:	f7fe febb 	bl	80067c0 <vPortExitCritical>
}
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	bd38      	pop	{r3, r4, r5, pc}
 8007a4e:	bf00      	nop
 8007a50:	20010620 	.word	0x20010620
 8007a54:	20010648 	.word	0x20010648
 8007a58:	20010678 	.word	0x20010678
 8007a5c:	20010640 	.word	0x20010640
 8007a60:	200106bc 	.word	0x200106bc
 8007a64:	20010748 	.word	0x20010748
 8007a68:	20010634 	.word	0x20010634
 8007a6c:	20010638 	.word	0x20010638

08007a70 <vTaskDelay>:
	{
 8007a70:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a72:	b1b8      	cbz	r0, 8007aa4 <vTaskDelay+0x34>
 8007a74:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8007a76:	4b11      	ldr	r3, [pc, #68]	@ (8007abc <vTaskDelay+0x4c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	b153      	cbz	r3, 8007a92 <vTaskDelay+0x22>
 8007a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a80:	b672      	cpsid	i
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	b662      	cpsie	i
 8007a90:	e7fe      	b.n	8007a90 <vTaskDelay+0x20>
			vTaskSuspendAll();
 8007a92:	f7ff fed9 	bl	8007848 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a96:	2100      	movs	r1, #0
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f7ff fdcd 	bl	8007638 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007a9e:	f7ff ff69 	bl	8007974 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007aa2:	b948      	cbnz	r0, 8007ab8 <vTaskDelay+0x48>
			portYIELD_WITHIN_API();
 8007aa4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	f3bf 8f6f 	isb	sy
	}
 8007ab8:	bd10      	pop	{r4, pc}
 8007aba:	bf00      	nop
 8007abc:	20010620 	.word	0x20010620

08007ac0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ac0:	4b23      	ldr	r3, [pc, #140]	@ (8007b50 <vTaskSwitchContext+0x90>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	b11b      	cbz	r3, 8007ace <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8007ac6:	4b23      	ldr	r3, [pc, #140]	@ (8007b54 <vTaskSwitchContext+0x94>)
 8007ac8:	2201      	movs	r2, #1
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007ace:	4b21      	ldr	r3, [pc, #132]	@ (8007b54 <vTaskSwitchContext+0x94>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad4:	4b20      	ldr	r3, [pc, #128]	@ (8007b58 <vTaskSwitchContext+0x98>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ad8:	fab3 f383 	clz	r3, r3
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	f1c3 031f 	rsb	r3, r3, #31
 8007ae2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007ae6:	008a      	lsls	r2, r1, #2
 8007ae8:	491c      	ldr	r1, [pc, #112]	@ (8007b5c <vTaskSwitchContext+0x9c>)
 8007aea:	588a      	ldr	r2, [r1, r2]
 8007aec:	b952      	cbnz	r2, 8007b04 <vTaskSwitchContext+0x44>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	b672      	cpsid	i
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	b662      	cpsie	i
 8007b02:	e7fe      	b.n	8007b02 <vTaskSwitchContext+0x42>
 8007b04:	4815      	ldr	r0, [pc, #84]	@ (8007b5c <vTaskSwitchContext+0x9c>)
 8007b06:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007b0a:	008a      	lsls	r2, r1, #2
 8007b0c:	4402      	add	r2, r0
 8007b0e:	6851      	ldr	r1, [r2, #4]
 8007b10:	6849      	ldr	r1, [r1, #4]
 8007b12:	6051      	str	r1, [r2, #4]
 8007b14:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8007b18:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8007b1c:	3208      	adds	r2, #8
 8007b1e:	4402      	add	r2, r0
 8007b20:	4291      	cmp	r1, r2
 8007b22:	d00d      	beq.n	8007b40 <vTaskSwitchContext+0x80>
 8007b24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007b28:	009a      	lsls	r2, r3, #2
 8007b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b5c <vTaskSwitchContext+0x9c>)
 8007b2c:	4413      	add	r3, r2
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	4b0b      	ldr	r3, [pc, #44]	@ (8007b60 <vTaskSwitchContext+0xa0>)
 8007b34:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	335c      	adds	r3, #92	@ 0x5c
 8007b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8007b64 <vTaskSwitchContext+0xa4>)
 8007b3c:	6013      	str	r3, [r2, #0]
}
 8007b3e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b40:	6848      	ldr	r0, [r1, #4]
 8007b42:	4662      	mov	r2, ip
 8007b44:	0091      	lsls	r1, r2, #2
 8007b46:	4a05      	ldr	r2, [pc, #20]	@ (8007b5c <vTaskSwitchContext+0x9c>)
 8007b48:	440a      	add	r2, r1
 8007b4a:	6050      	str	r0, [r2, #4]
 8007b4c:	e7ea      	b.n	8007b24 <vTaskSwitchContext+0x64>
 8007b4e:	bf00      	nop
 8007b50:	20010620 	.word	0x20010620
 8007b54:	20010634 	.word	0x20010634
 8007b58:	20010640 	.word	0x20010640
 8007b5c:	200106bc 	.word	0x200106bc
 8007b60:	20010748 	.word	0x20010748
 8007b64:	2000040c 	.word	0x2000040c

08007b68 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007b68:	b158      	cbz	r0, 8007b82 <vTaskPlaceOnEventList+0x1a>
{
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007b98 <vTaskPlaceOnEventList+0x30>)
 8007b70:	6811      	ldr	r1, [r2, #0]
 8007b72:	3118      	adds	r1, #24
 8007b74:	f7fe fd67 	bl	8006646 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b78:	2101      	movs	r1, #1
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7ff fd5c 	bl	8007638 <prvAddCurrentTaskToDelayedList>
}
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b86:	b672      	cpsid	i
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	b662      	cpsie	i
	configASSERT( pxEventList );
 8007b96:	e7fe      	b.n	8007b96 <vTaskPlaceOnEventList+0x2e>
 8007b98:	20010748 	.word	0x20010748

08007b9c <xTaskRemoveFromEventList>:
{
 8007b9c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9e:	68c3      	ldr	r3, [r0, #12]
 8007ba0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007ba2:	b324      	cbz	r4, 8007bee <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ba4:	f104 0518 	add.w	r5, r4, #24
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f7fe fd65 	bl	8006678 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bae:	4b19      	ldr	r3, [pc, #100]	@ (8007c14 <xTaskRemoveFromEventList+0x78>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	bb3b      	cbnz	r3, 8007c04 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bb4:	1d25      	adds	r5, r4, #4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f7fe fd5e 	bl	8006678 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bbc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4083      	lsls	r3, r0
 8007bc2:	4a15      	ldr	r2, [pc, #84]	@ (8007c18 <xTaskRemoveFromEventList+0x7c>)
 8007bc4:	6811      	ldr	r1, [r2, #0]
 8007bc6:	430b      	orrs	r3, r1
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4b12      	ldr	r3, [pc, #72]	@ (8007c1c <xTaskRemoveFromEventList+0x80>)
 8007bd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bd6:	f7fe fd2b 	bl	8006630 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bda:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007bdc:	4b10      	ldr	r3, [pc, #64]	@ (8007c20 <xTaskRemoveFromEventList+0x84>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d913      	bls.n	8007c0e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8007be6:	2001      	movs	r0, #1
 8007be8:	4b0e      	ldr	r3, [pc, #56]	@ (8007c24 <xTaskRemoveFromEventList+0x88>)
 8007bea:	6018      	str	r0, [r3, #0]
}
 8007bec:	bd38      	pop	{r3, r4, r5, pc}
 8007bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf2:	b672      	cpsid	i
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8007c02:	e7fe      	b.n	8007c02 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c04:	4629      	mov	r1, r5
 8007c06:	4808      	ldr	r0, [pc, #32]	@ (8007c28 <xTaskRemoveFromEventList+0x8c>)
 8007c08:	f7fe fd12 	bl	8006630 <vListInsertEnd>
 8007c0c:	e7e5      	b.n	8007bda <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8007c0e:	2000      	movs	r0, #0
	return xReturn;
 8007c10:	e7ec      	b.n	8007bec <xTaskRemoveFromEventList+0x50>
 8007c12:	bf00      	nop
 8007c14:	20010620 	.word	0x20010620
 8007c18:	20010640 	.word	0x20010640
 8007c1c:	200106bc 	.word	0x200106bc
 8007c20:	20010748 	.word	0x20010748
 8007c24:	20010634 	.word	0x20010634
 8007c28:	20010678 	.word	0x20010678

08007c2c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c2c:	4b03      	ldr	r3, [pc, #12]	@ (8007c3c <vTaskInternalSetTimeOutState+0x10>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c32:	4b03      	ldr	r3, [pc, #12]	@ (8007c40 <vTaskInternalSetTimeOutState+0x14>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6043      	str	r3, [r0, #4]
}
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	20010630 	.word	0x20010630
 8007c40:	20010644 	.word	0x20010644

08007c44 <xTaskCheckForTimeOut>:
{
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8007c46:	b1c8      	cbz	r0, 8007c7c <xTaskCheckForTimeOut+0x38>
 8007c48:	460c      	mov	r4, r1
 8007c4a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8007c4c:	b309      	cbz	r1, 8007c92 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 8007c4e:	f7fe fd91 	bl	8006774 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007c52:	4b1d      	ldr	r3, [pc, #116]	@ (8007cc8 <xTaskCheckForTimeOut+0x84>)
 8007c54:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c56:	686b      	ldr	r3, [r5, #4]
 8007c58:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8007c5a:	6822      	ldr	r2, [r4, #0]
 8007c5c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007c60:	d02a      	beq.n	8007cb8 <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c62:	4e1a      	ldr	r6, [pc, #104]	@ (8007ccc <xTaskCheckForTimeOut+0x88>)
 8007c64:	6836      	ldr	r6, [r6, #0]
 8007c66:	682f      	ldr	r7, [r5, #0]
 8007c68:	42b7      	cmp	r7, r6
 8007c6a:	d001      	beq.n	8007c70 <xTaskCheckForTimeOut+0x2c>
 8007c6c:	428b      	cmp	r3, r1
 8007c6e:	d928      	bls.n	8007cc2 <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c70:	4282      	cmp	r2, r0
 8007c72:	d819      	bhi.n	8007ca8 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007c78:	2401      	movs	r4, #1
 8007c7a:	e01e      	b.n	8007cba <xTaskCheckForTimeOut+0x76>
 8007c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c80:	b672      	cpsid	i
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8007c90:	e7fe      	b.n	8007c90 <xTaskCheckForTimeOut+0x4c>
 8007c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c96:	b672      	cpsid	i
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8007ca6:	e7fe      	b.n	8007ca6 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait -= xElapsedTime;
 8007ca8:	1a5b      	subs	r3, r3, r1
 8007caa:	4413      	add	r3, r2
 8007cac:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f7ff ffbc 	bl	8007c2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cb4:	2400      	movs	r4, #0
 8007cb6:	e000      	b.n	8007cba <xTaskCheckForTimeOut+0x76>
				xReturn = pdFALSE;
 8007cb8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007cba:	f7fe fd81 	bl	80067c0 <vPortExitCritical>
}
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8007cc2:	2401      	movs	r4, #1
 8007cc4:	e7f9      	b.n	8007cba <xTaskCheckForTimeOut+0x76>
 8007cc6:	bf00      	nop
 8007cc8:	20010644 	.word	0x20010644
 8007ccc:	20010630 	.word	0x20010630

08007cd0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007cd0:	4b01      	ldr	r3, [pc, #4]	@ (8007cd8 <vTaskMissedYield+0x8>)
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
}
 8007cd6:	4770      	bx	lr
 8007cd8:	20010634 	.word	0x20010634

08007cdc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007cdc:	4b05      	ldr	r3, [pc, #20]	@ (8007cf4 <xTaskGetSchedulerState+0x18>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	b133      	cbz	r3, 8007cf0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ce2:	4b05      	ldr	r3, [pc, #20]	@ (8007cf8 <xTaskGetSchedulerState+0x1c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	b10b      	cbz	r3, 8007cec <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ce8:	2000      	movs	r0, #0
	}
 8007cea:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8007cec:	2002      	movs	r0, #2
 8007cee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	4770      	bx	lr
 8007cf4:	2001063c 	.word	0x2001063c
 8007cf8:	20010620 	.word	0x20010620

08007cfc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d04f      	beq.n	8007da0 <xTaskPriorityInherit+0xa4>
	{
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d04:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007d06:	4a28      	ldr	r2, [pc, #160]	@ (8007da8 <xTaskPriorityInherit+0xac>)
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d23f      	bcs.n	8007d90 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d10:	6982      	ldr	r2, [r0, #24]
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	db05      	blt.n	8007d22 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d16:	4a24      	ldr	r2, [pc, #144]	@ (8007da8 <xTaskPriorityInherit+0xac>)
 8007d18:	6812      	ldr	r2, [r2, #0]
 8007d1a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007d1c:	f1c2 0207 	rsb	r2, r2, #7
 8007d20:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007d22:	6961      	ldr	r1, [r4, #20]
 8007d24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d28:	4a20      	ldr	r2, [pc, #128]	@ (8007dac <xTaskPriorityInherit+0xb0>)
 8007d2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d2e:	4299      	cmp	r1, r3
 8007d30:	d005      	beq.n	8007d3e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d32:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <xTaskPriorityInherit+0xac>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d38:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8007d3a:	2001      	movs	r0, #1
	}
 8007d3c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d3e:	1d25      	adds	r5, r4, #4
 8007d40:	4628      	mov	r0, r5
 8007d42:	f7fe fc99 	bl	8006678 <uxListRemove>
 8007d46:	b970      	cbnz	r0, 8007d66 <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007d48:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007d4a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4916      	ldr	r1, [pc, #88]	@ (8007dac <xTaskPriorityInherit+0xb0>)
 8007d52:	58cb      	ldr	r3, [r1, r3]
 8007d54:	b93b      	cbnz	r3, 8007d66 <xTaskPriorityInherit+0x6a>
 8007d56:	2301      	movs	r3, #1
 8007d58:	fa03 f202 	lsl.w	r2, r3, r2
 8007d5c:	4914      	ldr	r1, [pc, #80]	@ (8007db0 <xTaskPriorityInherit+0xb4>)
 8007d5e:	680b      	ldr	r3, [r1, #0]
 8007d60:	ea23 0302 	bic.w	r3, r3, r2
 8007d64:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d66:	4b10      	ldr	r3, [pc, #64]	@ (8007da8 <xTaskPriorityInherit+0xac>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007d6c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d6e:	2401      	movs	r4, #1
 8007d70:	fa04 f300 	lsl.w	r3, r4, r0
 8007d74:	4a0e      	ldr	r2, [pc, #56]	@ (8007db0 <xTaskPriorityInherit+0xb4>)
 8007d76:	6811      	ldr	r1, [r2, #0]
 8007d78:	430b      	orrs	r3, r1
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007d80:	4629      	mov	r1, r5
 8007d82:	4b0a      	ldr	r3, [pc, #40]	@ (8007dac <xTaskPriorityInherit+0xb0>)
 8007d84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d88:	f7fe fc52 	bl	8006630 <vListInsertEnd>
				xReturn = pdTRUE;
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	e7d5      	b.n	8007d3c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d90:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007d92:	4b05      	ldr	r3, [pc, #20]	@ (8007da8 <xTaskPriorityInherit+0xac>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d303      	bcc.n	8007da4 <xTaskPriorityInherit+0xa8>
	BaseType_t xReturn = pdFALSE;
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	e7cd      	b.n	8007d3c <xTaskPriorityInherit+0x40>
 8007da0:	2000      	movs	r0, #0
	}
 8007da2:	4770      	bx	lr
					xReturn = pdTRUE;
 8007da4:	2001      	movs	r0, #1
		return xReturn;
 8007da6:	e7c9      	b.n	8007d3c <xTaskPriorityInherit+0x40>
 8007da8:	20010748 	.word	0x20010748
 8007dac:	200106bc 	.word	0x200106bc
 8007db0:	20010640 	.word	0x20010640

08007db4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d04f      	beq.n	8007e58 <xTaskPriorityDisinherit+0xa4>
	{
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007dbc:	4b28      	ldr	r3, [pc, #160]	@ (8007e60 <xTaskPriorityDisinherit+0xac>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4283      	cmp	r3, r0
 8007dc2:	d00a      	beq.n	8007dda <xTaskPriorityDisinherit+0x26>
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	b672      	cpsid	i
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	b662      	cpsie	i
 8007dd8:	e7fe      	b.n	8007dd8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8007dda:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8007ddc:	b953      	cbnz	r3, 8007df4 <xTaskPriorityDisinherit+0x40>
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	b672      	cpsid	i
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	b662      	cpsie	i
 8007df2:	e7fe      	b.n	8007df2 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
 8007df4:	3b01      	subs	r3, #1
 8007df6:	6583      	str	r3, [r0, #88]	@ 0x58
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007df8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007dfa:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007dfc:	4291      	cmp	r1, r2
 8007dfe:	d02d      	beq.n	8007e5c <xTaskPriorityDisinherit+0xa8>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e00:	b10b      	cbz	r3, 8007e06 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8007e02:	2000      	movs	r0, #0
	}
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e06:	1d05      	adds	r5, r0, #4
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f7fe fc35 	bl	8006678 <uxListRemove>
 8007e0e:	b968      	cbnz	r0, 8007e2c <xTaskPriorityDisinherit+0x78>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e12:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007e16:	0092      	lsls	r2, r2, #2
 8007e18:	4912      	ldr	r1, [pc, #72]	@ (8007e64 <xTaskPriorityDisinherit+0xb0>)
 8007e1a:	588a      	ldr	r2, [r1, r2]
 8007e1c:	b932      	cbnz	r2, 8007e2c <xTaskPriorityDisinherit+0x78>
 8007e1e:	2201      	movs	r2, #1
 8007e20:	409a      	lsls	r2, r3
 8007e22:	4911      	ldr	r1, [pc, #68]	@ (8007e68 <xTaskPriorityDisinherit+0xb4>)
 8007e24:	680b      	ldr	r3, [r1, #0]
 8007e26:	ea23 0302 	bic.w	r3, r3, r2
 8007e2a:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e2c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8007e2e:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e30:	f1c0 0307 	rsb	r3, r0, #7
 8007e34:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e36:	2401      	movs	r4, #1
 8007e38:	fa04 f300 	lsl.w	r3, r4, r0
 8007e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e68 <xTaskPriorityDisinherit+0xb4>)
 8007e3e:	6811      	ldr	r1, [r2, #0]
 8007e40:	430b      	orrs	r3, r1
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4b06      	ldr	r3, [pc, #24]	@ (8007e64 <xTaskPriorityDisinherit+0xb0>)
 8007e4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007e50:	f7fe fbee 	bl	8006630 <vListInsertEnd>
					xReturn = pdTRUE;
 8007e54:	4620      	mov	r0, r4
 8007e56:	e7d5      	b.n	8007e04 <xTaskPriorityDisinherit+0x50>
	BaseType_t xReturn = pdFALSE;
 8007e58:	2000      	movs	r0, #0
	}
 8007e5a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	e7d1      	b.n	8007e04 <xTaskPriorityDisinherit+0x50>
 8007e60:	20010748 	.word	0x20010748
 8007e64:	200106bc 	.word	0x200106bc
 8007e68:	20010640 	.word	0x20010640

08007e6c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d059      	beq.n	8007f24 <vTaskPriorityDisinheritAfterTimeout+0xb8>
	{
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8007e74:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8007e76:	b953      	cbnz	r3, 8007e8e <vTaskPriorityDisinheritAfterTimeout+0x22>
 8007e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7c:	b672      	cpsid	i
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	b662      	cpsie	i
 8007e8c:	e7fe      	b.n	8007e8c <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e8e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007e90:	428a      	cmp	r2, r1
 8007e92:	d200      	bcs.n	8007e96 <vTaskPriorityDisinheritAfterTimeout+0x2a>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e94:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007e98:	4291      	cmp	r1, r2
 8007e9a:	d001      	beq.n	8007ea0 <vTaskPriorityDisinheritAfterTimeout+0x34>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d000      	beq.n	8007ea2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8007ea0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8007ea2:	4b21      	ldr	r3, [pc, #132]	@ (8007f28 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	d031      	beq.n	8007f0e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					pxTCB->uxPriority = uxPriorityToUse;
 8007eaa:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007eac:	69a3      	ldr	r3, [r4, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	db02      	blt.n	8007eb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb2:	f1c2 0207 	rsb	r2, r2, #7
 8007eb6:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007eb8:	6962      	ldr	r2, [r4, #20]
 8007eba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8007f2c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8007ec0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d1eb      	bne.n	8007ea0 <vTaskPriorityDisinheritAfterTimeout+0x34>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec8:	1d25      	adds	r5, r4, #4
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f7fe fbd4 	bl	8006678 <uxListRemove>
 8007ed0:	b968      	cbnz	r0, 8007eee <vTaskPriorityDisinheritAfterTimeout+0x82>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ed2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007ed4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007ed8:	0092      	lsls	r2, r2, #2
 8007eda:	4914      	ldr	r1, [pc, #80]	@ (8007f2c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8007edc:	588a      	ldr	r2, [r1, r2]
 8007ede:	b932      	cbnz	r2, 8007eee <vTaskPriorityDisinheritAfterTimeout+0x82>
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	409a      	lsls	r2, r3
 8007ee4:	4912      	ldr	r1, [pc, #72]	@ (8007f30 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8007ee6:	680b      	ldr	r3, [r1, #0]
 8007ee8:	ea23 0302 	bic.w	r3, r3, r2
 8007eec:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8007eee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	4083      	lsls	r3, r0
 8007ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8007f30 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8007ef6:	6811      	ldr	r1, [r2, #0]
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007f00:	4629      	mov	r1, r5
 8007f02:	4b0a      	ldr	r3, [pc, #40]	@ (8007f2c <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8007f04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007f08:	f7fe fb92 	bl	8006630 <vListInsertEnd>
	}
 8007f0c:	e7c8      	b.n	8007ea0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8007f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f12:	b672      	cpsid	i
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8007f22:	e7fe      	b.n	8007f22 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	20010748 	.word	0x20010748
 8007f2c:	200106bc 	.word	0x200106bc
 8007f30:	20010640 	.word	0x20010640

08007f34 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007f34:	4b05      	ldr	r3, [pc, #20]	@ (8007f4c <pvTaskIncrementMutexHeldCount+0x18>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	b123      	cbz	r3, 8007f44 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f3a:	4b04      	ldr	r3, [pc, #16]	@ (8007f4c <pvTaskIncrementMutexHeldCount+0x18>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007f40:	3301      	adds	r3, #1
 8007f42:	6593      	str	r3, [r2, #88]	@ 0x58
		return pxCurrentTCB;
 8007f44:	4b01      	ldr	r3, [pc, #4]	@ (8007f4c <pvTaskIncrementMutexHeldCount+0x18>)
 8007f46:	6818      	ldr	r0, [r3, #0]
	}
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20010748 	.word	0x20010748

08007f50 <reg_read>:
	HAL_Delay(10);
	return 0;
}

static uint16_t reg_read(uint8_t memAddr)
{
 8007f50:	b510      	push	{r4, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_write(AR1010_ADDRESS, &memAddr, 1);
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f10d 0107 	add.w	r1, sp, #7
 8007f5e:	2010      	movs	r0, #16
 8007f60:	f002 f9bc 	bl	800a2dc <I2C_write>
	uint8_t read[2];
	I2C_read(AR1010_ADDRESS, read, 2);
 8007f64:	2202      	movs	r2, #2
 8007f66:	a903      	add	r1, sp, #12
 8007f68:	2010      	movs	r0, #16
 8007f6a:	f002 f9cd 	bl	800a308 <I2C_read>
	uint8_t upper = read[0];
 8007f6e:	f89d 300c 	ldrb.w	r3, [sp, #12]
	uint8_t lower = read[1];
 8007f72:	f89d 400d 	ldrb.w	r4, [sp, #13]
	uint16_t outputWord = (upper << 8) + lower;
 8007f76:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8007f7a:	b2a4      	uxth	r4, r4
	HAL_Delay(10);
 8007f7c:	200a      	movs	r0, #10
 8007f7e:	f7f8 fb7b 	bl	8000678 <HAL_Delay>
	return outputWord;
}
 8007f82:	4620      	mov	r0, r4
 8007f84:	b004      	add	sp, #16
 8007f86:	bd10      	pop	{r4, pc}

08007f88 <mem_sub_read>:
{
	return mem_AND(memAddr, ~mask);
}

static uint16_t mem_sub_read(uint8_t memAddr, uint16_t mask)
{
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	460c      	mov	r4, r1
	uint16_t opWord = reg_read(memAddr);
 8007f8c:	f7ff ffe0 	bl	8007f50 <reg_read>
	return opWord & mask;
}
 8007f90:	4020      	ands	r0, r4
 8007f92:	bd10      	pop	{r4, pc}

08007f94 <reg_write>:
{
 8007f94:	b500      	push	{lr}
 8007f96:	b083      	sub	sp, #12
	uint8_t upper = (inputWord & 0xFF00) >> 8;
 8007f98:	0a0b      	lsrs	r3, r1, #8
	data[0] = memAddr;
 8007f9a:	f88d 0004 	strb.w	r0, [sp, #4]
	data[1] = upper;
 8007f9e:	f88d 3005 	strb.w	r3, [sp, #5]
	data[2] = lower;
 8007fa2:	f88d 1006 	strb.w	r1, [sp, #6]
	I2C_write(AR1010_ADDRESS, data, 3);
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	a901      	add	r1, sp, #4
 8007faa:	2010      	movs	r0, #16
 8007fac:	f002 f996 	bl	800a2dc <I2C_write>
	HAL_Delay(10);
 8007fb0:	200a      	movs	r0, #10
 8007fb2:	f7f8 fb61 	bl	8000678 <HAL_Delay>
}
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	b003      	add	sp, #12
 8007fba:	f85d fb04 	ldr.w	pc, [sp], #4

08007fbe <mem_AND>:
{
 8007fbe:	b538      	push	{r3, r4, r5, lr}
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	460d      	mov	r5, r1
	uint16_t opWord = reg_read(memAddr);
 8007fc4:	f7ff ffc4 	bl	8007f50 <reg_read>
	return reg_write(memAddr, opWord);
 8007fc8:	ea00 0105 	and.w	r1, r0, r5
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f7ff ffe1 	bl	8007f94 <reg_write>
}
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}

08007fd4 <mem_low>:
{
 8007fd4:	b508      	push	{r3, lr}
	return mem_AND(memAddr, ~mask);
 8007fd6:	43c9      	mvns	r1, r1
 8007fd8:	b289      	uxth	r1, r1
 8007fda:	f7ff fff0 	bl	8007fbe <mem_AND>
}
 8007fde:	bd08      	pop	{r3, pc}

08007fe0 <mem_sub_write>:

static uint8_t mem_sub_write(uint8_t memAddr, uint16_t inputWord, uint16_t mask)
{
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	460e      	mov	r6, r1
 8007fe6:	4614      	mov	r4, r2
	uint16_t opWord = reg_read(memAddr);
 8007fe8:	f7ff ffb2 	bl	8007f50 <reg_read>
	opWord = opWord & ~mask;
 8007fec:	43e3      	mvns	r3, r4
 8007fee:	b21b      	sxth	r3, r3
 8007ff0:	4003      	ands	r3, r0
 8007ff2:	b29b      	uxth	r3, r3
	inputWord = inputWord & mask;
 8007ff4:	4034      	ands	r4, r6
	uint16_t outputWord = opWord | inputWord;
	return reg_write(memAddr, outputWord);
 8007ff6:	ea43 0104 	orr.w	r1, r3, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f7ff ffca 	bl	8007f94 <reg_write>
}
 8008000:	bd70      	pop	{r4, r5, r6, pc}

08008002 <mem_OR>:
{
 8008002:	b538      	push	{r3, r4, r5, lr}
 8008004:	4604      	mov	r4, r0
 8008006:	460d      	mov	r5, r1
	uint16_t opWord = reg_read(memAddr);
 8008008:	f7ff ffa2 	bl	8007f50 <reg_read>
	opWord |= mask;
 800800c:	ea40 0105 	orr.w	r1, r0, r5
	return reg_write(memAddr, opWord);
 8008010:	b289      	uxth	r1, r1
 8008012:	4620      	mov	r0, r4
 8008014:	f7ff ffbe 	bl	8007f94 <reg_write>
}
 8008018:	bd38      	pop	{r3, r4, r5, pc}

0800801a <mem_high>:
{
 800801a:	b508      	push	{r3, lr}
	return mem_OR(memAddr, mask);
 800801c:	f7ff fff1 	bl	8008002 <mem_OR>
}
 8008020:	bd08      	pop	{r3, pc}
	...

08008024 <AR1010_init>:
{
 8008024:	b510      	push	{r4, lr}
	uint16_t chip_no = mem_sub_read(0x1C, 0xFFFF);
 8008026:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800802a:	201c      	movs	r0, #28
 800802c:	f7ff ffac 	bl	8007f88 <mem_sub_read>
	if (chip_no != 0x1010)
 8008030:	f241 0310 	movw	r3, #4112	@ 0x1010
 8008034:	4298      	cmp	r0, r3
 8008036:	d101      	bne.n	800803c <AR1010_init+0x18>
{
 8008038:	2401      	movs	r4, #1
 800803a:	e00a      	b.n	8008052 <AR1010_init+0x2e>
		Error_Handler();
 800803c:	f006 fc4a 	bl	800e8d4 <Error_Handler>
 8008040:	e7fa      	b.n	8008038 <AR1010_init+0x14>
		reg_write(i, initialRegisters[i]);
 8008042:	4b10      	ldr	r3, [pc, #64]	@ (8008084 <AR1010_init+0x60>)
 8008044:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8008048:	4620      	mov	r0, r4
 800804a:	f7ff ffa3 	bl	8007f94 <reg_write>
	for (uint8_t i = 1; i < 18; i++)
 800804e:	3401      	adds	r4, #1
 8008050:	b2e4      	uxtb	r4, r4
 8008052:	2c11      	cmp	r4, #17
 8008054:	d9f5      	bls.n	8008042 <AR1010_init+0x1e>
	reg_write(0x00, initialRegisters[0]);
 8008056:	4b0b      	ldr	r3, [pc, #44]	@ (8008084 <AR1010_init+0x60>)
 8008058:	8819      	ldrh	r1, [r3, #0]
 800805a:	2000      	movs	r0, #0
 800805c:	f7ff ff9a 	bl	8007f94 <reg_write>
	mem_low(0x01, 0x000E); //disable HMUTE and SMUTE
 8008060:	210e      	movs	r1, #14
 8008062:	2001      	movs	r0, #1
 8008064:	f7ff ffb6 	bl	8007fd4 <mem_low>
	mem_sub_write(0x03, 0B11 << 3, 0B11 << 3); //Setup Band and Space
 8008068:	2218      	movs	r2, #24
 800806a:	4611      	mov	r1, r2
 800806c:	2003      	movs	r0, #3
 800806e:	f7ff ffb7 	bl	8007fe0 <mem_sub_write>
	mem_sub_write(0x03, 0B1000 << 7, 0B1111 << 7); //Set Volume
 8008072:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8008076:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800807a:	2003      	movs	r0, #3
 800807c:	f7ff ffb0 	bl	8007fe0 <mem_sub_write>
}
 8008080:	bd10      	pop	{r4, pc}
 8008082:	bf00      	nop
 8008084:	2000000c 	.word	0x2000000c

08008088 <AR1010_auto_tune>:
		;     //Wait STC
	mem_low(0x01, 0x0002);                 //Clear mute
}

void AR1010_auto_tune(float freq, uint8_t convert)
{ //freq in MHz as float
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	ee07 0a90 	vmov	s15, r0
	uint16_t chan;
	if (convert)
 800808e:	2900      	cmp	r1, #0
 8008090:	d070      	beq.n	8008174 <AR1010_auto_tune+0xec>
		chan = (uint16_t) (freq * 10 - 690);
 8008092:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800809a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8008190 <AR1010_auto_tune+0x108>
 800809e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080a6:	ee17 3a90 	vmov	r3, s15
 80080aa:	b29c      	uxth	r4, r3
	else
		chan = (uint16_t) freq;

	mem_high(0x01, 0x0002);										//Set mute
 80080ac:	2102      	movs	r1, #2
 80080ae:	2001      	movs	r0, #1
 80080b0:	f7ff ffb3 	bl	800801a <mem_high>
	mem_low(0x02, 0x0200);										//Clear TUNE
 80080b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80080b8:	2002      	movs	r0, #2
 80080ba:	f7ff ff8b 	bl	8007fd4 <mem_low>
	mem_low(0x03, 0x4000);										//Clear SEEK
 80080be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80080c2:	2003      	movs	r0, #3
 80080c4:	f7ff ff86 	bl	8007fd4 <mem_low>
	mem_sub_write(0x02, chan, 0x01FF);							//Set CHAN
 80080c8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80080cc:	4621      	mov	r1, r4
 80080ce:	2002      	movs	r0, #2
 80080d0:	f7ff ff86 	bl	8007fe0 <mem_sub_write>
														//Read Low-side LO injection
	mem_sub_write(0x0B, 0x0000, 0x8005);							//Set R11 (Clear D15, Clear D0/D2)
 80080d4:	f248 0205 	movw	r2, #32773	@ 0x8005
 80080d8:	2100      	movs	r1, #0
 80080da:	200b      	movs	r0, #11
 80080dc:	f7ff ff80 	bl	8007fe0 <mem_sub_write>
	mem_high(0x02, 0x0200);										//Enable TUNE
 80080e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80080e4:	2002      	movs	r0, #2
 80080e6:	f7ff ff98 	bl	800801a <mem_high>
	while (!mem_sub_read(0x13, 0x0020))
 80080ea:	2120      	movs	r1, #32
 80080ec:	2013      	movs	r0, #19
 80080ee:	f7ff ff4b 	bl	8007f88 <mem_sub_read>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d0f9      	beq.n	80080ea <AR1010_auto_tune+0x62>
		;                   //Wait for STC flag
	uint8_t RSSI1 = mem_sub_read(0x12, 0xFE00);					//Get RSSI1
 80080f6:	f44f 417e 	mov.w	r1, #65024	@ 0xfe00
 80080fa:	2012      	movs	r0, #18
 80080fc:	f7ff ff44 	bl	8007f88 <mem_sub_read>
 8008100:	b2c5      	uxtb	r5, r0
	mem_low(0x02, 0x0200);										//Clear TUNE
 8008102:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008106:	2002      	movs	r0, #2
 8008108:	f7ff ff64 	bl	8007fd4 <mem_low>
														//Read High-side LO injection
	mem_sub_write(0x0B, 0x8005, 0x8005);							//Set R11 (Set D15, Set D0/D2)
 800810c:	f248 0205 	movw	r2, #32773	@ 0x8005
 8008110:	4611      	mov	r1, r2
 8008112:	200b      	movs	r0, #11
 8008114:	f7ff ff64 	bl	8007fe0 <mem_sub_write>
	mem_high(0x02, 0x0200);										//Enable TUNE
 8008118:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800811c:	2002      	movs	r0, #2
 800811e:	f7ff ff7c 	bl	800801a <mem_high>
	while (!mem_sub_read(0x13, 0x0020))
 8008122:	2120      	movs	r1, #32
 8008124:	2013      	movs	r0, #19
 8008126:	f7ff ff2f 	bl	8007f88 <mem_sub_read>
 800812a:	2800      	cmp	r0, #0
 800812c:	d0f9      	beq.n	8008122 <AR1010_auto_tune+0x9a>
		;                   //Wait for STC flag
	uint8_t RSSI2 = mem_sub_read(0x12, 0xFE00);					//Get RSSI2
 800812e:	f44f 417e 	mov.w	r1, #65024	@ 0xfe00
 8008132:	2012      	movs	r0, #18
 8008134:	f7ff ff28 	bl	8007f88 <mem_sub_read>
 8008138:	b2c4      	uxtb	r4, r0
	mem_low(0x02, 0x0200);										//Clear TUNE
 800813a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800813e:	2002      	movs	r0, #2
 8008140:	f7ff ff48 	bl	8007fd4 <mem_low>
														//Compare Hi-Lo strength
	if (RSSI1 > RSSI2)
 8008144:	42a5      	cmp	r5, r4
 8008146:	d91b      	bls.n	8008180 <AR1010_auto_tune+0xf8>
		mem_sub_write(0x0B, 0x0005, 0x8005);						//(RSSI1>RSSI2)?R11(Clear D15, Set D0/D2)
 8008148:	f248 0205 	movw	r2, #32773	@ 0x8005
 800814c:	2105      	movs	r1, #5
 800814e:	200b      	movs	r0, #11
 8008150:	f7ff ff46 	bl	8007fe0 <mem_sub_write>
	else
		mem_sub_write(0x0B, 0x0000, 0x8000);						//:R11(Set D11, Clear D0/D2)
	mem_high(0x02, 0x0200);										//Enable TUNE
 8008154:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008158:	2002      	movs	r0, #2
 800815a:	f7ff ff5e 	bl	800801a <mem_high>
	while (!mem_sub_read(0x13, 0x0020));							//Wait STC
 800815e:	2120      	movs	r1, #32
 8008160:	2013      	movs	r0, #19
 8008162:	f7ff ff11 	bl	8007f88 <mem_sub_read>
 8008166:	2800      	cmp	r0, #0
 8008168:	d0f9      	beq.n	800815e <AR1010_auto_tune+0xd6>
	mem_low(0x01, 0x0002);										//Clear mute
 800816a:	2102      	movs	r1, #2
 800816c:	2001      	movs	r0, #1
 800816e:	f7ff ff31 	bl	8007fd4 <mem_low>
}
 8008172:	bd38      	pop	{r3, r4, r5, pc}
		chan = (uint16_t) freq;
 8008174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008178:	ee17 3a90 	vmov	r3, s15
 800817c:	b29c      	uxth	r4, r3
 800817e:	e795      	b.n	80080ac <AR1010_auto_tune+0x24>
		mem_sub_write(0x0B, 0x0000, 0x8000);						//:R11(Set D11, Clear D0/D2)
 8008180:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008184:	2100      	movs	r1, #0
 8008186:	200b      	movs	r0, #11
 8008188:	f7ff ff2a 	bl	8007fe0 <mem_sub_write>
 800818c:	e7e2      	b.n	8008154 <AR1010_auto_tune+0xcc>
 800818e:	bf00      	nop
 8008190:	442c8000 	.word	0x442c8000

08008194 <AR1010_set_volume>:
		AR1010_auto_tune((float) (mem_sub_read(0x13, 0xFF80) >> 7), 0); //autoTune with READCHAN                                             //
	mem_low(0x01, 0x0002);                                   //Clear mute
}

void AR1010_set_volume(uint8_t volume)
{
 8008194:	b510      	push	{r4, lr}
	if (volume > 18)
 8008196:	2812      	cmp	r0, #18
 8008198:	d900      	bls.n	800819c <AR1010_set_volume+0x8>
		volume = 18;
 800819a:	2012      	movs	r0, #18
	int write1 = volume1_conv[volume];
 800819c:	4b08      	ldr	r3, [pc, #32]	@ (80081c0 <AR1010_set_volume+0x2c>)
 800819e:	5c19      	ldrb	r1, [r3, r0]
	int write2 = volume2_conv[volume];
 80081a0:	4b08      	ldr	r3, [pc, #32]	@ (80081c4 <AR1010_set_volume+0x30>)
 80081a2:	5c1c      	ldrb	r4, [r3, r0]
	mem_sub_write(0x03, write1 << 7, 0B1111 << 7);
 80081a4:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 80081a8:	01c9      	lsls	r1, r1, #7
 80081aa:	2003      	movs	r0, #3
 80081ac:	f7ff ff18 	bl	8007fe0 <mem_sub_write>
	mem_sub_write(0x0E, write2 << 12, 0B1111 << 12);
 80081b0:	0321      	lsls	r1, r4, #12
 80081b2:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 80081b6:	4011      	ands	r1, r2
 80081b8:	200e      	movs	r0, #14
 80081ba:	f7ff ff11 	bl	8007fe0 <mem_sub_write>
}
 80081be:	bd10      	pop	{r4, pc}
 80081c0:	08013574 	.word	0x08013574
 80081c4:	08013560 	.word	0x08013560

080081c8 <JSB_AR1010_get_frequency>:

float JSB_AR1010_get_frequency()
{
 80081c8:	b508      	push	{r3, lr}
  return 0.1f * (((reg_read(0x13) & 0xFF80) >> 7) + 690);
 80081ca:	2013      	movs	r0, #19
 80081cc:	f7ff fec0 	bl	8007f50 <reg_read>
 80081d0:	f3c0 10cf 	ubfx	r0, r0, #7, #16
 80081d4:	f200 20b2 	addw	r0, r0, #690	@ 0x2b2
 80081d8:	ee07 0a90 	vmov	s15, r0
 80081dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80081e0:	ed9f 7a03 	vldr	s14, [pc, #12]	@ 80081f0 <JSB_AR1010_get_frequency+0x28>
 80081e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081e8:	ee17 0a90 	vmov	r0, s15
 80081ec:	bd08      	pop	{r3, pc}
 80081ee:	bf00      	nop
 80081f0:	3dcccccd 	.word	0x3dcccccd

080081f4 <JSB_AR1010_get_RSSI>:

uint8_t JSB_AR1010_get_RSSI()
{
 80081f4:	b508      	push	{r3, lr}
  return ((reg_read(0x12) & 0xFE00) >> 9);
 80081f6:	2012      	movs	r0, #18
 80081f8:	f7ff feaa 	bl	8007f50 <reg_read>
}
 80081fc:	f3c0 2046 	ubfx	r0, r0, #9, #7
 8008200:	bd08      	pop	{r3, pc}

08008202 <JSB_AR1010_is_stereo>:

uint8_t JSB_AR1010_is_stereo()
{
 8008202:	b508      	push	{r3, lr}
  return (reg_read(0x13) & 0x0008) != 0;
 8008204:	2013      	movs	r0, #19
 8008206:	f7ff fea3 	bl	8007f50 <reg_read>
}
 800820a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800820e:	bd08      	pop	{r3, pc}

08008210 <SwapBytes>:
///////////////////////////////////////////////////////////////////////////////
// Uncategorized:

uint16_t SwapBytes(uint16_t Value)
{
  return (Value >> 8) | ((Value & 0xFF) << 8);
 8008210:	0203      	lsls	r3, r0, #8
 8008212:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
}
 8008216:	b280      	uxth	r0, r0
 8008218:	4770      	bx	lr

0800821a <IfNotNullFreeAndNull>:

///////////////////////////////////////////////////////////////////////////////
// Memory allocation:

void IfNotNullFreeAndNull(void **ppMemory)
{
 800821a:	b510      	push	{r4, lr}
 800821c:	4604      	mov	r4, r0
  if (*ppMemory)
 800821e:	6800      	ldr	r0, [r0, #0]
 8008220:	b118      	cbz	r0, 800822a <IfNotNullFreeAndNull+0x10>
  {
    free(*ppMemory);
 8008222:	f007 faed 	bl	800f800 <free>
    *ppMemory = NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	6023      	str	r3, [r4, #0]
  }
}
 800822a:	bd10      	pop	{r4, pc}

0800822c <Min_int32>:
}

int32_t Min_int32(int32_t A, int32_t B)
{
    return A < B ? A : B;
}
 800822c:	4288      	cmp	r0, r1
 800822e:	bfa8      	it	ge
 8008230:	4608      	movge	r0, r1
 8008232:	4770      	bx	lr

08008234 <Clamp_uint16>:

///////////////////////////////////////////////////////////////////////////////
// Clamp:

uint16_t Clamp_uint16(uint16_t Value, uint16_t MinValue , uint16_t MaxValue)
{
 8008234:	4603      	mov	r3, r0
 8008236:	4610      	mov	r0, r2
  if (Value < MinValue)
 8008238:	428b      	cmp	r3, r1
 800823a:	d300      	bcc.n	800823e <Clamp_uint16+0xa>
 800823c:	4619      	mov	r1, r3
    Value = MinValue;
  if (Value > MaxValue)
 800823e:	4281      	cmp	r1, r0
 8008240:	d800      	bhi.n	8008244 <Clamp_uint16+0x10>
 8008242:	4608      	mov	r0, r1
    Value = MaxValue;
  return Value;
}
 8008244:	4770      	bx	lr

08008246 <Clamp_float>:

  return Value;
}

float Clamp_float(float Value, float MinValue, float MaxValue)
{
 8008246:	ee07 0a10 	vmov	s14, r0
 800824a:	ee07 1a90 	vmov	s15, r1
 800824e:	ee06 2a90 	vmov	s13, r2
  if (Value < MinValue)
 8008252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825a:	d406      	bmi.n	800826a <Clamp_float+0x24>
    Value = MinValue;
  else if (Value > MaxValue)
 800825c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008264:	dc04      	bgt.n	8008270 <Clamp_float+0x2a>
 8008266:	eef0 7a47 	vmov.f32	s15, s14
    Value = MaxValue;

  return Value;
}
 800826a:	ee17 0a90 	vmov	r0, s15
 800826e:	4770      	bx	lr
    Value = MaxValue;
 8008270:	eef0 7a66 	vmov.f32	s15, s13
 8008274:	e7f9      	b.n	800826a <Clamp_float+0x24>

08008276 <Wrap_int>:
///////////////////////////////////////////////////////////////////////////////
// Wrap:

int Wrap_int(int Value, int Size)
{
  if (Value < 0)
 8008276:	2800      	cmp	r0, #0
 8008278:	db03      	blt.n	8008282 <Wrap_int+0xc>
    Value += Size;
  else if (Value >= Size)
 800827a:	4288      	cmp	r0, r1
 800827c:	db00      	blt.n	8008280 <Wrap_int+0xa>
    Value -= Size;
 800827e:	1a40      	subs	r0, r0, r1

  return Value;
}
 8008280:	4770      	bx	lr
    Value += Size;
 8008282:	4408      	add	r0, r1
 8008284:	4770      	bx	lr

08008286 <Sqr>:

///////////////////////////////////////////////////////////////////////////////
// Maths:

double Sqr(double Value)
{
 8008286:	ec41 0b17 	vmov	d7, r0, r1
  return Value * Value;
}
 800828a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800828e:	ec51 0b17 	vmov	r0, r1, d7
 8008292:	4770      	bx	lr

08008294 <Cube>:

double Cube(double Value)
{
 8008294:	ec41 0b17 	vmov	d7, r0, r1
  return Value * Value * Value;
 8008298:	ee27 6b07 	vmul.f64	d6, d7, d7
}
 800829c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80082a0:	ec51 0b17 	vmov	r0, r1, d7
 80082a4:	4770      	bx	lr

080082a6 <CubicInterpolate>:
{
  return (1.0 - InterpolationParameter) * Value0 + InterpolationParameter * Value1;
}

double CubicInterpolate(double Value0, double Value1, double Value2, double Value3, double InterpolationParameter)
{
 80082a6:	b508      	push	{r3, lr}
 80082a8:	ed2d 8b0a 	vpush	{d8-d12}
 80082ac:	ec41 0b1a 	vmov	d10, r0, r1
 80082b0:	ec43 2b17 	vmov	d7, r2, r3
  double C0, C1, C2, C3;
  double InterpolationCoefficient;

  C3 = (((Value3 - Value0) - 3.0 * (Value1 - Value0)) - 3.0 * ((Value2 - Value0) - 2.0 * (Value1-Value0))) / 6.0;
 80082b4:	ed9d 6b0e 	vldr	d6, [sp, #56]	@ 0x38
 80082b8:	ee36 6b4a 	vsub.f64	d6, d6, d10
 80082bc:	ee37 7b4a 	vsub.f64	d7, d7, d10
 80082c0:	eeb0 5b08 	vmov.f64	d5, #8	@ 0x40400000  3.0
 80082c4:	ee07 6b45 	vmls.f64	d6, d7, d5
 80082c8:	ed9d 8b0c 	vldr	d8, [sp, #48]	@ 0x30
 80082cc:	ee38 8b4a 	vsub.f64	d8, d8, d10
 80082d0:	ee37 4b07 	vadd.f64	d4, d7, d7
 80082d4:	ee38 8b44 	vsub.f64	d8, d8, d4
 80082d8:	ee08 6b45 	vmls.f64	d6, d8, d5
 80082dc:	eeb1 5b08 	vmov.f64	d5, #24	@ 0x40c00000  6.0
 80082e0:	ee86 bb05 	vdiv.f64	d11, d6, d5
  C2 = ((Value2 - Value0) - 2.0 * (Value1 - Value0) - 6.0 * C3) / 2.0;
 80082e4:	ee0b 8b45 	vmls.f64	d8, d11, d5
 80082e8:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80082ec:	ee28 8b06 	vmul.f64	d8, d8, d6
  C1 = Value1 - Value0 - C3 - C2;
 80082f0:	ee37 7b4b 	vsub.f64	d7, d7, d11
 80082f4:	ee37 9b48 	vsub.f64	d9, d7, d8
  C0 = Value0;

  InterpolationCoefficient = 1 + InterpolationParameter; // Interpolate the second of the three segments.
 80082f8:	ed9d cb10 	vldr	d12, [sp, #64]	@ 0x40
 80082fc:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8008300:	ee3c cb07 	vadd.f64	d12, d12, d7

  return C3 * Cube(InterpolationCoefficient) + C2 * Sqr(InterpolationCoefficient) + C1 * InterpolationCoefficient + C0;
 8008304:	ec51 0b1c 	vmov	r0, r1, d12
 8008308:	f7ff ffc4 	bl	8008294 <Cube>
 800830c:	ec41 0b17 	vmov	d7, r0, r1
 8008310:	ee27 bb0b 	vmul.f64	d11, d7, d11
 8008314:	ec51 0b1c 	vmov	r0, r1, d12
 8008318:	f7ff ffb5 	bl	8008286 <Sqr>
 800831c:	ec41 0b17 	vmov	d7, r0, r1
 8008320:	ee07 bb08 	vmla.f64	d11, d7, d8
 8008324:	ee09 bb0c 	vmla.f64	d11, d9, d12
}
 8008328:	ee3b 7b0a 	vadd.f64	d7, d11, d10
 800832c:	ec51 0b17 	vmov	r0, r1, d7
 8008330:	ecbd 8b0a 	vpop	{d8-d12}
 8008334:	bd08      	pop	{r3, pc}
	...

08008338 <BooleanToOffOn>:
static const char *String_No = "No";
static const char *String_Yes = "Yes";

const char *BooleanToOffOn(uint8_t Value)
{
  return Value ? String_On : String_Off;
 8008338:	b108      	cbz	r0, 800833e <BooleanToOffOn+0x6>
 800833a:	4802      	ldr	r0, [pc, #8]	@ (8008344 <BooleanToOffOn+0xc>)
 800833c:	4770      	bx	lr
 800833e:	4802      	ldr	r0, [pc, #8]	@ (8008348 <BooleanToOffOn+0x10>)
}
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	08012fd4 	.word	0x08012fd4
 8008348:	08012fdc 	.word	0x08012fdc

0800834c <BooleanToNoYes>:

const char *BooleanToNoYes(uint8_t Value)
{
  return Value ? String_Yes : String_No;
 800834c:	b108      	cbz	r0, 8008352 <BooleanToNoYes+0x6>
 800834e:	4802      	ldr	r0, [pc, #8]	@ (8008358 <BooleanToNoYes+0xc>)
 8008350:	4770      	bx	lr
 8008352:	4802      	ldr	r0, [pc, #8]	@ (800835c <BooleanToNoYes+0x10>)
}
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	08012fe0 	.word	0x08012fe0
 800835c:	08012fe4 	.word	0x08012fe4

08008360 <StringToGUID>:

///////////////////////////////////////////////////////////////////////////////
// GUIDs:

uint8_t StringToGUID(char *Value, GUID_t *o_pGUID)
{
 8008360:	b510      	push	{r4, lr}
 8008362:	b09a      	sub	sp, #104	@ 0x68
 8008364:	460c      	mov	r4, r1
  GUID_t Result;
  unsigned int X[11];
  int NumFields, NumChars;

  // STM32 sscanf bug (20181012): %08X (rather than %08x) assumes result is signed. Hence 0x9000000 => 0x7FFFFFF!!!
  NumFields = sscanf(Value, "{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}%n",
 8008366:	ab0a      	add	r3, sp, #40	@ 0x28
 8008368:	9309      	str	r3, [sp, #36]	@ 0x24
 800836a:	ab15      	add	r3, sp, #84	@ 0x54
 800836c:	9308      	str	r3, [sp, #32]
 800836e:	ab14      	add	r3, sp, #80	@ 0x50
 8008370:	9307      	str	r3, [sp, #28]
 8008372:	ab13      	add	r3, sp, #76	@ 0x4c
 8008374:	9306      	str	r3, [sp, #24]
 8008376:	ab12      	add	r3, sp, #72	@ 0x48
 8008378:	9305      	str	r3, [sp, #20]
 800837a:	ab11      	add	r3, sp, #68	@ 0x44
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	ab10      	add	r3, sp, #64	@ 0x40
 8008380:	9303      	str	r3, [sp, #12]
 8008382:	ab0f      	add	r3, sp, #60	@ 0x3c
 8008384:	9302      	str	r3, [sp, #8]
 8008386:	ab0e      	add	r3, sp, #56	@ 0x38
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	ab0d      	add	r3, sp, #52	@ 0x34
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	ab0c      	add	r3, sp, #48	@ 0x30
 8008390:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008392:	491a      	ldr	r1, [pc, #104]	@ (80083fc <StringToGUID+0x9c>)
 8008394:	f008 f874 	bl	8010480 <siscanf>
      &X[0], &X[1], &X[2], &X[3], &X[4], &X[5], &X[6], &X[7], &X[8], &X[9], &X[10], &NumChars);

  if ((NumFields != 11) || (NumChars != 38))
 8008398:	280b      	cmp	r0, #11
 800839a:	d129      	bne.n	80083f0 <StringToGUID+0x90>
 800839c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800839e:	2b26      	cmp	r3, #38	@ 0x26
 80083a0:	d129      	bne.n	80083f6 <StringToGUID+0x96>
    return 0;

  Result.Field0 = X[0];
 80083a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083a4:	9316      	str	r3, [sp, #88]	@ 0x58
  Result.Field1 = X[1];
 80083a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083a8:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
  Result.Field2 = X[2];
 80083ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083ae:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
  Result.Field3[0] = X[3];
 80083b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083b4:	f88d 3060 	strb.w	r3, [sp, #96]	@ 0x60
  Result.Field3[1] = X[4];
 80083b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083ba:	f88d 3061 	strb.w	r3, [sp, #97]	@ 0x61
  Result.Field3[2] = X[5];
 80083be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083c0:	f88d 3062 	strb.w	r3, [sp, #98]	@ 0x62
  Result.Field3[3] = X[6];
 80083c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80083c6:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
  Result.Field3[4] = X[7];
 80083ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083cc:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
  Result.Field3[5] = X[8];
 80083d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083d2:	f88d 3065 	strb.w	r3, [sp, #101]	@ 0x65
  Result.Field3[6] = X[9];
 80083d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083d8:	f88d 3066 	strb.w	r3, [sp, #102]	@ 0x66
  Result.Field3[7] = X[10];
 80083dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80083de:	f88d 3067 	strb.w	r3, [sp, #103]	@ 0x67

  *o_pGUID = Result;
 80083e2:	ab1a      	add	r3, sp, #104	@ 0x68
 80083e4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80083e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return 1;
 80083ec:	2001      	movs	r0, #1
 80083ee:	e000      	b.n	80083f2 <StringToGUID+0x92>
    return 0;
 80083f0:	2000      	movs	r0, #0
}
 80083f2:	b01a      	add	sp, #104	@ 0x68
 80083f4:	bd10      	pop	{r4, pc}
    return 0;
 80083f6:	2000      	movs	r0, #0
 80083f8:	e7fb      	b.n	80083f2 <StringToGUID+0x92>
 80083fa:	bf00      	nop
 80083fc:	08012fe8 	.word	0x08012fe8

08008400 <GUID_IsEqual>:
    i_Value->Field2,
    i_Value->Field3[0], i_Value->Field3[1], i_Value->Field3[2], i_Value->Field3[3], i_Value->Field3[4], i_Value->Field3[5], i_Value->Field3[6], i_Value->Field3[7]);
}

uint8_t GUID_IsEqual(GUID_t *pA, GUID_t *pB)
{
 8008400:	b508      	push	{r3, lr}
  return memcmp(pA, pB, sizeof(GUID_t)) == 0 ? 1 : 0;
 8008402:	2210      	movs	r2, #16
 8008404:	f008 f8ad 	bl	8010562 <memcmp>
}
 8008408:	fab0 f080 	clz	r0, r0
 800840c:	0940      	lsrs	r0, r0, #5
 800840e:	bd08      	pop	{r3, pc}

08008410 <ILI9341_DrawPixel_ToBackBuffer>:
    ILI9341_CSX_Low();
}

static void ILI9341_DrawPixel_ToBackBuffer(int16_t X, int16_t Y, uint16_t Color)
{
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8008410:	fa1f fc80 	uxth.w	ip, r0
 8008414:	0fcb      	lsrs	r3, r1, #31
 8008416:	f1bc 0fef 	cmp.w	ip, #239	@ 0xef
 800841a:	bf88      	it	hi
 800841c:	f043 0301 	orrhi.w	r3, r3, #1
 8008420:	b953      	cbnz	r3, 8008438 <ILI9341_DrawPixel_ToBackBuffer+0x28>
 8008422:	f5b1 7fa0 	cmp.w	r1, #320	@ 0x140
 8008426:	da07      	bge.n	8008438 <ILI9341_DrawPixel_ToBackBuffer+0x28>
    return;

  pBackBuffer[X + Y * ILI9341_Width] = Color;
 8008428:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800842c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8008430:	4b02      	ldr	r3, [pc, #8]	@ (800843c <ILI9341_DrawPixel_ToBackBuffer+0x2c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
}
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	200109cc 	.word	0x200109cc

08008440 <IsNonPrintingChar>:
  return pFont->yAdvance;
}

static uint8_t IsNonPrintingChar(uint8_t Ch)
{
  return ((Ch < pFont->first) || (Ch > pFont->last));
 8008440:	4b06      	ldr	r3, [pc, #24]	@ (800845c <IsNonPrintingChar+0x1c>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	7a1a      	ldrb	r2, [r3, #8]
 8008446:	4282      	cmp	r2, r0
 8008448:	d804      	bhi.n	8008454 <IsNonPrintingChar+0x14>
 800844a:	7a5b      	ldrb	r3, [r3, #9]
 800844c:	4283      	cmp	r3, r0
 800844e:	d203      	bcs.n	8008458 <IsNonPrintingChar+0x18>
 8008450:	2001      	movs	r0, #1
 8008452:	4770      	bx	lr
 8008454:	2001      	movs	r0, #1
 8008456:	4770      	bx	lr
 8008458:	2000      	movs	r0, #0
}
 800845a:	4770      	bx	lr
 800845c:	200109d4 	.word	0x200109d4

08008460 <ILI9341_Write8>:
{
 8008460:	b500      	push	{lr}
 8008462:	b087      	sub	sp, #28
 8008464:	f88d 000f 	strb.w	r0, [sp, #15]
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8008468:	2364      	movs	r3, #100	@ 0x64
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	2301      	movs	r3, #1
 800846e:	f10d 0217 	add.w	r2, sp, #23
 8008472:	f10d 010f 	add.w	r1, sp, #15
 8008476:	4805      	ldr	r0, [pc, #20]	@ (800848c <ILI9341_Write8+0x2c>)
 8008478:	6800      	ldr	r0, [r0, #0]
 800847a:	f7fb ffa5 	bl	80043c8 <HAL_SPI_TransmitReceive>
 800847e:	b910      	cbnz	r0, 8008486 <ILI9341_Write8+0x26>
}
 8008480:	b007      	add	sp, #28
 8008482:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008486:	f006 fa25 	bl	800e8d4 <Error_Handler>
}
 800848a:	e7f9      	b.n	8008480 <ILI9341_Write8+0x20>
 800848c:	200109dc 	.word	0x200109dc

08008490 <ILI9341_Write16>:
{
 8008490:	b510      	push	{r4, lr}
 8008492:	4604      	mov	r4, r0
  ILI9341_Write8(Value >> 8);
 8008494:	0a00      	lsrs	r0, r0, #8
 8008496:	f7ff ffe3 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(Value);
 800849a:	b2e0      	uxtb	r0, r4
 800849c:	f7ff ffe0 	bl	8008460 <ILI9341_Write8>
}
 80084a0:	bd10      	pop	{r4, pc}

080084a2 <ILI9341_Write32>:
{
 80084a2:	b510      	push	{r4, lr}
 80084a4:	4604      	mov	r4, r0
  ILI9341_Write16(Value >> 16);
 80084a6:	0c00      	lsrs	r0, r0, #16
 80084a8:	f7ff fff2 	bl	8008490 <ILI9341_Write16>
  ILI9341_Write16(Value);
 80084ac:	b2a0      	uxth	r0, r4
 80084ae:	f7ff ffef 	bl	8008490 <ILI9341_Write16>
}
 80084b2:	bd10      	pop	{r4, pc}

080084b4 <ILI9341_WriteCommand>:
{
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4604      	mov	r4, r0
  ILI9341_DC_Low();
 80084b8:	4d07      	ldr	r5, [pc, #28]	@ (80084d8 <ILI9341_WriteCommand+0x24>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	2104      	movs	r1, #4
 80084be:	4628      	mov	r0, r5
 80084c0:	f7f8 fcc7 	bl	8000e52 <HAL_GPIO_WritePin>
  ILI9341_Write8(Value);
 80084c4:	b2e0      	uxtb	r0, r4
 80084c6:	f7ff ffcb 	bl	8008460 <ILI9341_Write8>
  ILI9341_DC_High();
 80084ca:	2201      	movs	r2, #1
 80084cc:	2104      	movs	r1, #4
 80084ce:	4628      	mov	r0, r5
 80084d0:	f7f8 fcbf 	bl	8000e52 <HAL_GPIO_WritePin>
}
 80084d4:	bd38      	pop	{r3, r4, r5, pc}
 80084d6:	bf00      	nop
 80084d8:	40020800 	.word	0x40020800

080084dc <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>:
{
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	b083      	sub	sp, #12
 80084e2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  if ((i_Width == 0) || (i_Height == 0))
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf18      	it	ne
 80084ea:	2a00      	cmpne	r2, #0
 80084ec:	d102      	bne.n	80084f4 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x18>
}
 80084ee:	b003      	add	sp, #12
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	4607      	mov	r7, r0
 80084f6:	468b      	mov	fp, r1
 80084f8:	4690      	mov	r8, r2
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80084fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80084fe:	2100      	movs	r1, #0
 8008500:	4658      	mov	r0, fp
 8008502:	f7ff fe97 	bl	8008234 <Clamp_uint16>
 8008506:	4682      	mov	sl, r0
 8008508:	e011      	b.n	800852e <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x52>
      pLine[X] = *pPixel++;
 800850a:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 800850e:	f834 2b02 	ldrh.w	r2, [r4], #2
 8008512:	f829 2003 	strh.w	r2, [r9, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8008516:	3501      	adds	r5, #1
 8008518:	eb08 0007 	add.w	r0, r8, r7
 800851c:	22f0      	movs	r2, #240	@ 0xf0
 800851e:	2100      	movs	r1, #0
 8008520:	b280      	uxth	r0, r0
 8008522:	f7ff fe87 	bl	8008234 <Clamp_uint16>
 8008526:	42a8      	cmp	r0, r5
 8008528:	d8ef      	bhi.n	800850a <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x2e>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 800852a:	f10a 0a01 	add.w	sl, sl, #1
 800852e:	9b01      	ldr	r3, [sp, #4]
 8008530:	eb03 000b 	add.w	r0, r3, fp
 8008534:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8008538:	2100      	movs	r1, #0
 800853a:	b280      	uxth	r0, r0
 800853c:	f7ff fe7a 	bl	8008234 <Clamp_uint16>
 8008540:	4550      	cmp	r0, sl
 8008542:	d9d4      	bls.n	80084ee <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x12>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8008544:	4b06      	ldr	r3, [pc, #24]	@ (8008560 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x84>)
 8008546:	f8d3 9000 	ldr.w	r9, [r3]
 800854a:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 800854e:	0176      	lsls	r6, r6, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8008550:	22f0      	movs	r2, #240	@ 0xf0
 8008552:	2100      	movs	r1, #0
 8008554:	4638      	mov	r0, r7
 8008556:	f7ff fe6d 	bl	8008234 <Clamp_uint16>
 800855a:	4605      	mov	r5, r0
 800855c:	e7dc      	b.n	8008518 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x3c>
 800855e:	bf00      	nop
 8008560:	200109cc 	.word	0x200109cc

08008564 <ILI9341_DrawPixels_MSBFirst_ToDisplay>:
{
 8008564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008568:	9d06      	ldr	r5, [sp, #24]
  if ((Width == 0) || (Height == 0))
 800856a:	2b00      	cmp	r3, #0
 800856c:	bf18      	it	ne
 800856e:	2a00      	cmpne	r2, #0
 8008570:	d101      	bne.n	8008576 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x12>
}
 8008572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008576:	4680      	mov	r8, r0
 8008578:	460c      	mov	r4, r1
 800857a:	4616      	mov	r6, r2
 800857c:	461f      	mov	r7, r3
  ILI9341_CSX_Low();
 800857e:	2200      	movs	r2, #0
 8008580:	2102      	movs	r1, #2
 8008582:	4829      	ldr	r0, [pc, #164]	@ (8008628 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8008584:	f7f8 fc65 	bl	8000e52 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8008588:	202a      	movs	r0, #42	@ 0x2a
 800858a:	f7ff ff93 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 800858e:	4640      	mov	r0, r8
 8008590:	f7ff ff7e 	bl	8008490 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8008594:	eb06 0008 	add.w	r0, r6, r8
 8008598:	b280      	uxth	r0, r0
 800859a:	3801      	subs	r0, #1
 800859c:	b280      	uxth	r0, r0
 800859e:	f7ff ff77 	bl	8008490 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 80085a2:	202b      	movs	r0, #43	@ 0x2b
 80085a4:	f7ff ff86 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 80085a8:	4620      	mov	r0, r4
 80085aa:	f7ff ff71 	bl	8008490 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 80085ae:	1938      	adds	r0, r7, r4
 80085b0:	b280      	uxth	r0, r0
 80085b2:	3801      	subs	r0, #1
 80085b4:	b280      	uxth	r0, r0
 80085b6:	f7ff ff6b 	bl	8008490 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2C); // Memory write.
 80085ba:	202c      	movs	r0, #44	@ 0x2c
 80085bc:	f7ff ff7a 	bl	80084b4 <ILI9341_WriteCommand>
  uint32_t NumBytes = Width * Height * sizeof(uint16_t);
 80085c0:	fb07 f306 	mul.w	r3, r7, r6
 80085c4:	005b      	lsls	r3, r3, #1
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
 80085c6:	462a      	mov	r2, r5
  __ASM volatile ("dsb 0xF":::"memory");
 80085c8:	f3bf 8f4f 	dsb	sy
}
 80085cc:	e004      	b.n	80085d8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x74>
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCMVAC = op_addr;
 80085ce:	4917      	ldr	r1, [pc, #92]	@ (800862c <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc8>)
 80085d0:	f8c1 2268 	str.w	r2, [r1, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 80085d4:	3220      	adds	r2, #32
      op_size -=           linesize;
 80085d6:	3b20      	subs	r3, #32
    while (op_size > 0) {
 80085d8:	2b00      	cmp	r3, #0
 80085da:	dcf8      	bgt.n	80085ce <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x6a>
  __ASM volatile ("dsb 0xF":::"memory");
 80085dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80085e0:	f3bf 8f6f 	isb	sy
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 80085e4:	2400      	movs	r4, #0
 80085e6:	e00b      	b.n	8008600 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x9c>
    pPixels += Width;
 80085e8:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 80085ec:	4b10      	ldr	r3, [pc, #64]	@ (8008630 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d0f7      	beq.n	80085ec <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x88>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 80085fc:	3401      	adds	r4, #1
 80085fe:	b224      	sxth	r4, r4
 8008600:	42a7      	cmp	r7, r4
 8008602:	dd0b      	ble.n	800861c <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xb8>
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8008604:	0072      	lsls	r2, r6, #1
 8008606:	b292      	uxth	r2, r2
 8008608:	4629      	mov	r1, r5
 800860a:	4b09      	ldr	r3, [pc, #36]	@ (8008630 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	f7fc f92f 	bl	8004870 <HAL_SPI_Transmit_DMA>
 8008612:	2800      	cmp	r0, #0
 8008614:	d0e8      	beq.n	80085e8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
      Error_Handler();
 8008616:	f006 f95d 	bl	800e8d4 <Error_Handler>
 800861a:	e7e5      	b.n	80085e8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
  ILI9341_CSX_High();
 800861c:	2201      	movs	r2, #1
 800861e:	2102      	movs	r1, #2
 8008620:	4801      	ldr	r0, [pc, #4]	@ (8008628 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8008622:	f7f8 fc16 	bl	8000e52 <HAL_GPIO_WritePin>
 8008626:	e7a4      	b.n	8008572 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xe>
 8008628:	40020800 	.word	0x40020800
 800862c:	e000ed00 	.word	0xe000ed00
 8008630:	200109dc 	.word	0x200109dc

08008634 <ILI9341_DrawBar_ToDisplay>:
  if ((Width == 0) || (Height == 0))
 8008634:	2b00      	cmp	r3, #0
 8008636:	bf18      	it	ne
 8008638:	2a00      	cmpne	r2, #0
 800863a:	d100      	bne.n	800863e <ILI9341_DrawBar_ToDisplay+0xa>
 800863c:	4770      	bx	lr
{
 800863e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008640:	4607      	mov	r7, r0
 8008642:	460c      	mov	r4, r1
 8008644:	4615      	mov	r5, r2
 8008646:	461e      	mov	r6, r3
  ILI9341_CSX_Low();
 8008648:	2200      	movs	r2, #0
 800864a:	2102      	movs	r1, #2
 800864c:	482c      	ldr	r0, [pc, #176]	@ (8008700 <ILI9341_DrawBar_ToDisplay+0xcc>)
 800864e:	f7f8 fc00 	bl	8000e52 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8008652:	202a      	movs	r0, #42	@ 0x2a
 8008654:	f7ff ff2e 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8008658:	4638      	mov	r0, r7
 800865a:	f7ff ff19 	bl	8008490 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 800865e:	19e8      	adds	r0, r5, r7
 8008660:	b280      	uxth	r0, r0
 8008662:	3801      	subs	r0, #1
 8008664:	b280      	uxth	r0, r0
 8008666:	f7ff ff13 	bl	8008490 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 800866a:	202b      	movs	r0, #43	@ 0x2b
 800866c:	f7ff ff22 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8008670:	4620      	mov	r0, r4
 8008672:	f7ff ff0d 	bl	8008490 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8008676:	1930      	adds	r0, r6, r4
 8008678:	b280      	uxth	r0, r0
 800867a:	3801      	subs	r0, #1
 800867c:	b280      	uxth	r0, r0
 800867e:	f7ff ff07 	bl	8008490 <ILI9341_Write16>
  uint16_t Color_MSBFirst = SwapBytes(Color);
 8008682:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8008686:	f7ff fdc3 	bl	8008210 <SwapBytes>
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 800868a:	2300      	movs	r3, #0
 800868c:	e004      	b.n	8008698 <ILI9341_DrawBar_ToDisplay+0x64>
    ColumnColors[ColumnIndex] = Color_MSBFirst;
 800868e:	4a1d      	ldr	r2, [pc, #116]	@ (8008704 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8008690:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8008694:	3301      	adds	r3, #1
 8008696:	b21b      	sxth	r3, r3
 8008698:	42ab      	cmp	r3, r5
 800869a:	dbf8      	blt.n	800868e <ILI9341_DrawBar_ToDisplay+0x5a>
  ILI9341_WriteCommand(0x2C); // Memory write.
 800869c:	202c      	movs	r0, #44	@ 0x2c
 800869e:	f7ff ff09 	bl	80084b4 <ILI9341_WriteCommand>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 80086a2:	2400      	movs	r4, #0
 80086a4:	e01b      	b.n	80086de <ILI9341_DrawBar_ToDisplay+0xaa>
      SCB->DCCMVAC = op_addr;
 80086a6:	4818      	ldr	r0, [pc, #96]	@ (8008708 <ILI9341_DrawBar_ToDisplay+0xd4>)
 80086a8:	f8c0 1268 	str.w	r1, [r0, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 80086ac:	3120      	adds	r1, #32
      op_size -=           linesize;
 80086ae:	3b20      	subs	r3, #32
    while (op_size > 0) {
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	dcf8      	bgt.n	80086a6 <ILI9341_DrawBar_ToDisplay+0x72>
  __ASM volatile ("dsb 0xF":::"memory");
 80086b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80086b8:	f3bf 8f6f 	isb	sy
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 80086bc:	b292      	uxth	r2, r2
 80086be:	4911      	ldr	r1, [pc, #68]	@ (8008704 <ILI9341_DrawBar_ToDisplay+0xd0>)
 80086c0:	4b12      	ldr	r3, [pc, #72]	@ (800870c <ILI9341_DrawBar_ToDisplay+0xd8>)
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	f7fc f8d4 	bl	8004870 <HAL_SPI_Transmit_DMA>
 80086c8:	b988      	cbnz	r0, 80086ee <ILI9341_DrawBar_ToDisplay+0xba>
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 80086ca:	4b10      	ldr	r3, [pc, #64]	@ (800870c <ILI9341_DrawBar_ToDisplay+0xd8>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d0f7      	beq.n	80086ca <ILI9341_DrawBar_ToDisplay+0x96>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 80086da:	3401      	adds	r4, #1
 80086dc:	b224      	sxth	r4, r4
 80086de:	42b4      	cmp	r4, r6
 80086e0:	da08      	bge.n	80086f4 <ILI9341_DrawBar_ToDisplay+0xc0>
    uint32_t NumBytes = Width * 2;
 80086e2:	006a      	lsls	r2, r5, #1
    uint32_t op_addr = (uint32_t) addr;
 80086e4:	4907      	ldr	r1, [pc, #28]	@ (8008704 <ILI9341_DrawBar_ToDisplay+0xd0>)
  __ASM volatile ("dsb 0xF":::"memory");
 80086e6:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 80086ea:	4613      	mov	r3, r2
}
 80086ec:	e7e0      	b.n	80086b0 <ILI9341_DrawBar_ToDisplay+0x7c>
      Error_Handler();
 80086ee:	f006 f8f1 	bl	800e8d4 <Error_Handler>
 80086f2:	e7ea      	b.n	80086ca <ILI9341_DrawBar_ToDisplay+0x96>
  ILI9341_CSX_High();
 80086f4:	2201      	movs	r2, #1
 80086f6:	2102      	movs	r1, #2
 80086f8:	4801      	ldr	r0, [pc, #4]	@ (8008700 <ILI9341_DrawBar_ToDisplay+0xcc>)
 80086fa:	f7f8 fbaa 	bl	8000e52 <HAL_GPIO_WritePin>
}
 80086fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008700:	40020800 	.word	0x40020800
 8008704:	2001074c 	.word	0x2001074c
 8008708:	e000ed00 	.word	0xe000ed00
 800870c:	200109dc 	.word	0x200109dc

08008710 <ILI9341_SetDefaultState>:
  TextColor = TextColor_Default;
 8008710:	4b05      	ldr	r3, [pc, #20]	@ (8008728 <ILI9341_SetDefaultState+0x18>)
 8008712:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008716:	801a      	strh	r2, [r3, #0]
  TextBackgroundColor = TextBackgroundColor_Default;
 8008718:	4b04      	ldr	r3, [pc, #16]	@ (800872c <ILI9341_SetDefaultState+0x1c>)
 800871a:	2200      	movs	r2, #0
 800871c:	801a      	strh	r2, [r3, #0]
  TextDrawMode = TextDrawMode_Default;
 800871e:	4b04      	ldr	r3, [pc, #16]	@ (8008730 <ILI9341_SetDefaultState+0x20>)
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
}
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	20000032 	.word	0x20000032
 800872c:	200109d8 	.word	0x200109d8
 8008730:	20000031 	.word	0x20000031

08008734 <ILI9341_Initialize>:
{
 8008734:	b510      	push	{r4, lr}
  phspi = i_phspi;
 8008736:	4ba7      	ldr	r3, [pc, #668]	@ (80089d4 <ILI9341_Initialize+0x2a0>)
 8008738:	6018      	str	r0, [r3, #0]
  UseBackBuffer = i_UseBackBuffer;
 800873a:	b2c9      	uxtb	r1, r1
 800873c:	4ba6      	ldr	r3, [pc, #664]	@ (80089d8 <ILI9341_Initialize+0x2a4>)
 800873e:	7019      	strb	r1, [r3, #0]
  if (UseBackBuffer)
 8008740:	2900      	cmp	r1, #0
 8008742:	f040 8139 	bne.w	80089b8 <ILI9341_Initialize+0x284>
  ILI9341_SetDefaultState();
 8008746:	f7ff ffe3 	bl	8008710 <ILI9341_SetDefaultState>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_RESET);
 800874a:	4ca4      	ldr	r4, [pc, #656]	@ (80089dc <ILI9341_Initialize+0x2a8>)
 800874c:	2200      	movs	r2, #0
 800874e:	2101      	movs	r1, #1
 8008750:	4620      	mov	r0, r4
 8008752:	f7f8 fb7e 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8008756:	2001      	movs	r0, #1
 8008758:	f7f7 ff8e 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_SET);
 800875c:	2201      	movs	r2, #1
 800875e:	4611      	mov	r1, r2
 8008760:	4620      	mov	r0, r4
 8008762:	f7f8 fb76 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8008766:	2005      	movs	r0, #5
 8008768:	f7f7 ff86 	bl	8000678 <HAL_Delay>
  ILI9341_CSX_Low();
 800876c:	2200      	movs	r2, #0
 800876e:	2102      	movs	r1, #2
 8008770:	4620      	mov	r0, r4
 8008772:	f7f8 fb6e 	bl	8000e52 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0xEF);
 8008776:	f06f 0010 	mvn.w	r0, #16
 800877a:	f7ff fe9b 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x03);
 800877e:	2003      	movs	r0, #3
 8008780:	f7ff fe6e 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x80);
 8008784:	2080      	movs	r0, #128	@ 0x80
 8008786:	f7ff fe6b 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 800878a:	2002      	movs	r0, #2
 800878c:	f7ff fe68 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERB);
 8008790:	f06f 0030 	mvn.w	r0, #48	@ 0x30
 8008794:	f7ff fe8e 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8008798:	2000      	movs	r0, #0
 800879a:	f7ff fe61 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0XC1);
 800879e:	20c1      	movs	r0, #193	@ 0xc1
 80087a0:	f7ff fe5e 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0X30);
 80087a4:	2030      	movs	r0, #48	@ 0x30
 80087a6:	f7ff fe5b 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWER_SEQ);
 80087aa:	f06f 0012 	mvn.w	r0, #18
 80087ae:	f7ff fe81 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x64);
 80087b2:	2064      	movs	r0, #100	@ 0x64
 80087b4:	f7ff fe54 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 80087b8:	2003      	movs	r0, #3
 80087ba:	f7ff fe51 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0X12);
 80087be:	2012      	movs	r0, #18
 80087c0:	f7ff fe4e 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0X81);
 80087c4:	2081      	movs	r0, #129	@ 0x81
 80087c6:	f7ff fe4b 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCA);
 80087ca:	f06f 0017 	mvn.w	r0, #23
 80087ce:	f7ff fe71 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x85);
 80087d2:	2085      	movs	r0, #133	@ 0x85
 80087d4:	f7ff fe44 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80087d8:	2000      	movs	r0, #0
 80087da:	f7ff fe41 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x78);
 80087de:	2078      	movs	r0, #120	@ 0x78
 80087e0:	f7ff fe3e 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERA);
 80087e4:	f06f 0034 	mvn.w	r0, #52	@ 0x34
 80087e8:	f7ff fe64 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x39);
 80087ec:	2039      	movs	r0, #57	@ 0x39
 80087ee:	f7ff fe37 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x2C);
 80087f2:	202c      	movs	r0, #44	@ 0x2c
 80087f4:	f7ff fe34 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80087f8:	2000      	movs	r0, #0
 80087fa:	f7ff fe31 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x34);
 80087fe:	2034      	movs	r0, #52	@ 0x34
 8008800:	f7ff fe2e 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8008804:	2002      	movs	r0, #2
 8008806:	f7ff fe2b 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_PRC);
 800880a:	f06f 0008 	mvn.w	r0, #8
 800880e:	f7ff fe51 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x20);
 8008812:	2020      	movs	r0, #32
 8008814:	f7ff fe24 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCB);
 8008818:	f06f 0015 	mvn.w	r0, #21
 800881c:	f7ff fe4a 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8008820:	2000      	movs	r0, #0
 8008822:	f7ff fe1d 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8008826:	2000      	movs	r0, #0
 8008828:	f7ff fe1a 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR1); // Power control
 800882c:	f06f 003f 	mvn.w	r0, #63	@ 0x3f
 8008830:	f7ff fe40 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x23); // VRH=[5:0]
 8008834:	2023      	movs	r0, #35	@ 0x23
 8008836:	f7ff fe13 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR2); // Power control
 800883a:	f06f 003e 	mvn.w	r0, #62	@ 0x3e
 800883e:	f7ff fe39 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x10); // BT=[3:0]
 8008842:	2010      	movs	r0, #16
 8008844:	f7ff fe0c 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR1); // VCOM control
 8008848:	f06f 003a 	mvn.w	r0, #58	@ 0x3a
 800884c:	f7ff fe32 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x3e); // VMH=[6:0]
 8008850:	203e      	movs	r0, #62	@ 0x3e
 8008852:	f7ff fe05 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x28); // VML=[6:0]
 8008856:	2028      	movs	r0, #40	@ 0x28
 8008858:	f7ff fe02 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR2); // VCOM control 2
 800885c:	f06f 0038 	mvn.w	r0, #56	@ 0x38
 8008860:	f7ff fe28 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x86); // VMF=[6:0]
 8008864:	2086      	movs	r0, #134	@ 0x86
 8008866:	f7ff fdfb 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_MADCTL); // Memory Access Control
 800886a:	2036      	movs	r0, #54	@ 0x36
 800886c:	f7ff fe22 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x48);
 8008870:	2048      	movs	r0, #72	@ 0x48
 8008872:	f7ff fdf5 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VSCRSADD); // Vertical scroll
 8008876:	2037      	movs	r0, #55	@ 0x37
 8008878:	f7ff fe1c 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write16(0); // Zero
 800887c:	2000      	movs	r0, #0
 800887e:	f7ff fe07 	bl	8008490 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PIXFMT);
 8008882:	203a      	movs	r0, #58	@ 0x3a
 8008884:	f7ff fe16 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x55); // DPI=[6:4] DBI=[2:0]
 8008888:	2055      	movs	r0, #85	@ 0x55
 800888a:	f7ff fde9 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_FRMCTR1);
 800888e:	f06f 004e 	mvn.w	r0, #78	@ 0x4e
 8008892:	f7ff fe0f 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8008896:	2000      	movs	r0, #0
 8008898:	f7ff fde2 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x18);
 800889c:	2018      	movs	r0, #24
 800889e:	f7ff fddf 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_DFUNCTR); // Display Function Control
 80088a2:	f06f 0049 	mvn.w	r0, #73	@ 0x49
 80088a6:	f7ff fe05 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x08);
 80088aa:	2008      	movs	r0, #8
 80088ac:	f7ff fdd8 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x82);
 80088b0:	2082      	movs	r0, #130	@ 0x82
 80088b2:	f7ff fdd5 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x27);
 80088b6:	2027      	movs	r0, #39	@ 0x27
 80088b8:	f7ff fdd2 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(0xF2); // 3Gamma
 80088bc:	f06f 000d 	mvn.w	r0, #13
 80088c0:	f7ff fdf8 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00); // Disable
 80088c4:	2000      	movs	r0, #0
 80088c6:	f7ff fdcb 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GAMMASET); // Gamma curve selected
 80088ca:	2026      	movs	r0, #38	@ 0x26
 80088cc:	f7ff fdf2 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x01);
 80088d0:	2001      	movs	r0, #1
 80088d2:	f7ff fdc5 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRP1); // Set Gamma
 80088d6:	f06f 001f 	mvn.w	r0, #31
 80088da:	f7ff fdeb 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x0F);
 80088de:	200f      	movs	r0, #15
 80088e0:	f7ff fdbe 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 80088e4:	2031      	movs	r0, #49	@ 0x31
 80088e6:	f7ff fdbb 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x2B);
 80088ea:	202b      	movs	r0, #43	@ 0x2b
 80088ec:	f7ff fdb8 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 80088f0:	200c      	movs	r0, #12
 80088f2:	f7ff fdb5 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80088f6:	200e      	movs	r0, #14
 80088f8:	f7ff fdb2 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 80088fc:	2008      	movs	r0, #8
 80088fe:	f7ff fdaf 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x4E);
 8008902:	204e      	movs	r0, #78	@ 0x4e
 8008904:	f7ff fdac 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0xF1);
 8008908:	20f1      	movs	r0, #241	@ 0xf1
 800890a:	f7ff fda9 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x37);
 800890e:	2037      	movs	r0, #55	@ 0x37
 8008910:	f7ff fda6 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8008914:	2007      	movs	r0, #7
 8008916:	f7ff fda3 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x10);
 800891a:	2010      	movs	r0, #16
 800891c:	f7ff fda0 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8008920:	2003      	movs	r0, #3
 8008922:	f7ff fd9d 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8008926:	200e      	movs	r0, #14
 8008928:	f7ff fd9a 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x09);
 800892c:	2009      	movs	r0, #9
 800892e:	f7ff fd97 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8008932:	2000      	movs	r0, #0
 8008934:	f7ff fd94 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRN1); // Set Gamma
 8008938:	f06f 001e 	mvn.w	r0, #30
 800893c:	f7ff fdba 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8008940:	2000      	movs	r0, #0
 8008942:	f7ff fd8d 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8008946:	200e      	movs	r0, #14
 8008948:	f7ff fd8a 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x14);
 800894c:	2014      	movs	r0, #20
 800894e:	f7ff fd87 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8008952:	2003      	movs	r0, #3
 8008954:	f7ff fd84 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x11);
 8008958:	2011      	movs	r0, #17
 800895a:	f7ff fd81 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 800895e:	2007      	movs	r0, #7
 8008960:	f7ff fd7e 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8008964:	2031      	movs	r0, #49	@ 0x31
 8008966:	f7ff fd7b 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0xC1);
 800896a:	20c1      	movs	r0, #193	@ 0xc1
 800896c:	f7ff fd78 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x48);
 8008970:	2048      	movs	r0, #72	@ 0x48
 8008972:	f7ff fd75 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8008976:	2008      	movs	r0, #8
 8008978:	f7ff fd72 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 800897c:	200f      	movs	r0, #15
 800897e:	f7ff fd6f 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8008982:	200c      	movs	r0, #12
 8008984:	f7ff fd6c 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8008988:	2031      	movs	r0, #49	@ 0x31
 800898a:	f7ff fd69 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x36);
 800898e:	2036      	movs	r0, #54	@ 0x36
 8008990:	f7ff fd66 	bl	8008460 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8008994:	200f      	movs	r0, #15
 8008996:	f7ff fd63 	bl	8008460 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_SLPOUT); // Exit sleep
 800899a:	2011      	movs	r0, #17
 800899c:	f7ff fd8a 	bl	80084b4 <ILI9341_WriteCommand>
  HAL_Delay(120);
 80089a0:	2078      	movs	r0, #120	@ 0x78
 80089a2:	f7f7 fe69 	bl	8000678 <HAL_Delay>
  ILI9341_WriteCommand(ILI9341_DISPON); // Display on
 80089a6:	2029      	movs	r0, #41	@ 0x29
 80089a8:	f7ff fd84 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_CSX_High();
 80089ac:	2201      	movs	r2, #1
 80089ae:	2102      	movs	r1, #2
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7f8 fa4e 	bl	8000e52 <HAL_GPIO_WritePin>
}
 80089b6:	bd10      	pop	{r4, pc}
    pBackBuffer = calloc(1, ILI9341_Width * ILI9341_Height * sizeof(uint16_t));
 80089b8:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 80089bc:	2001      	movs	r0, #1
 80089be:	f006 fefb 	bl	800f7b8 <calloc>
 80089c2:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <ILI9341_Initialize+0x2ac>)
 80089c4:	6018      	str	r0, [r3, #0]
    if (!pBackBuffer)
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f47f aebd 	bne.w	8008746 <ILI9341_Initialize+0x12>
      Error_Handler();
 80089cc:	f005 ff82 	bl	800e8d4 <Error_Handler>
 80089d0:	e6b9      	b.n	8008746 <ILI9341_Initialize+0x12>
 80089d2:	bf00      	nop
 80089d4:	200109dc 	.word	0x200109dc
 80089d8:	200109d0 	.word	0x200109d0
 80089dc:	40020800 	.word	0x40020800
 80089e0:	200109cc 	.word	0x200109cc

080089e4 <ILI9341_SetAddrWindow>:
{
 80089e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	4680      	mov	r8, r0
 80089ea:	460e      	mov	r6, r1
 80089ec:	4615      	mov	r5, r2
 80089ee:	461c      	mov	r4, r3
 80089f0:	f99d 7018 	ldrsb.w	r7, [sp, #24]
  if (UseCS)
 80089f4:	b9cf      	cbnz	r7, 8008a2a <ILI9341_SetAddrWindow+0x46>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 80089f6:	4445      	add	r5, r8
 80089f8:	3d01      	subs	r5, #1
 80089fa:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 80089fe:	4434      	add	r4, r6
 8008a00:	3c01      	subs	r4, #1
 8008a02:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 8008a06:	202a      	movs	r0, #42	@ 0x2a
 8008a08:	f7ff fd54 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write32(xa);
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f7ff fd48 	bl	80084a2 <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_PASET); // Row addr set
 8008a12:	202b      	movs	r0, #43	@ 0x2b
 8008a14:	f7ff fd4e 	bl	80084b4 <ILI9341_WriteCommand>
  ILI9341_Write32(ya);
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f7ff fd42 	bl	80084a2 <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_RAMWR); // Write to RAM
 8008a1e:	202c      	movs	r0, #44	@ 0x2c
 8008a20:	f7ff fd48 	bl	80084b4 <ILI9341_WriteCommand>
  if (UseCS)
 8008a24:	b93f      	cbnz	r7, 8008a36 <ILI9341_SetAddrWindow+0x52>
}
 8008a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ILI9341_CSX_Low();
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2102      	movs	r1, #2
 8008a2e:	4805      	ldr	r0, [pc, #20]	@ (8008a44 <ILI9341_SetAddrWindow+0x60>)
 8008a30:	f7f8 fa0f 	bl	8000e52 <HAL_GPIO_WritePin>
 8008a34:	e7df      	b.n	80089f6 <ILI9341_SetAddrWindow+0x12>
    ILI9341_CSX_High();
 8008a36:	2201      	movs	r2, #1
 8008a38:	2102      	movs	r1, #2
 8008a3a:	4802      	ldr	r0, [pc, #8]	@ (8008a44 <ILI9341_SetAddrWindow+0x60>)
 8008a3c:	f7f8 fa09 	bl	8000e52 <HAL_GPIO_WritePin>
}
 8008a40:	e7f1      	b.n	8008a26 <ILI9341_SetAddrWindow+0x42>
 8008a42:	bf00      	nop
 8008a44:	40020800 	.word	0x40020800

08008a48 <ILI9341_DrawPixel_ToDisplay>:
{
 8008a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	460d      	mov	r5, r1
 8008a50:	4616      	mov	r6, r2
  if (UseCS)
 8008a52:	461f      	mov	r7, r3
 8008a54:	b95b      	cbnz	r3, 8008a6e <ILI9341_DrawPixel_ToDisplay+0x26>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8008a56:	b2a0      	uxth	r0, r4
 8008a58:	0feb      	lsrs	r3, r5, #31
 8008a5a:	28ef      	cmp	r0, #239	@ 0xef
 8008a5c:	bf88      	it	hi
 8008a5e:	f043 0301 	orrhi.w	r3, r3, #1
 8008a62:	b913      	cbnz	r3, 8008a6a <ILI9341_DrawPixel_ToDisplay+0x22>
 8008a64:	f5b5 7fa0 	cmp.w	r5, #320	@ 0x140
 8008a68:	db07      	blt.n	8008a7a <ILI9341_DrawPixel_ToDisplay+0x32>
}
 8008a6a:	b003      	add	sp, #12
 8008a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ILI9341_CSX_Low();
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2102      	movs	r1, #2
 8008a72:	480a      	ldr	r0, [pc, #40]	@ (8008a9c <ILI9341_DrawPixel_ToDisplay+0x54>)
 8008a74:	f7f8 f9ed 	bl	8000e52 <HAL_GPIO_WritePin>
 8008a78:	e7ed      	b.n	8008a56 <ILI9341_DrawPixel_ToDisplay+0xe>
  ILI9341_SetAddrWindow(X, Y, 1, 1, 0);
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	461a      	mov	r2, r3
 8008a80:	b2a9      	uxth	r1, r5
 8008a82:	f7ff ffaf 	bl	80089e4 <ILI9341_SetAddrWindow>
  ILI9341_Write16(Color);
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7ff fd02 	bl	8008490 <ILI9341_Write16>
  if (UseCS)
 8008a8c:	2f00      	cmp	r7, #0
 8008a8e:	d0ec      	beq.n	8008a6a <ILI9341_DrawPixel_ToDisplay+0x22>
    ILI9341_CSX_Low();
 8008a90:	2200      	movs	r2, #0
 8008a92:	2102      	movs	r1, #2
 8008a94:	4801      	ldr	r0, [pc, #4]	@ (8008a9c <ILI9341_DrawPixel_ToDisplay+0x54>)
 8008a96:	f7f8 f9dc 	bl	8000e52 <HAL_GPIO_WritePin>
 8008a9a:	e7e6      	b.n	8008a6a <ILI9341_DrawPixel_ToDisplay+0x22>
 8008a9c:	40020800 	.word	0x40020800

08008aa0 <ILI9341_DrawPixel>:
{
 8008aa0:	b510      	push	{r4, lr}
  if (UseBackBuffer)
 8008aa2:	4c04      	ldr	r4, [pc, #16]	@ (8008ab4 <ILI9341_DrawPixel+0x14>)
 8008aa4:	7824      	ldrb	r4, [r4, #0]
 8008aa6:	b114      	cbz	r4, 8008aae <ILI9341_DrawPixel+0xe>
    ILI9341_DrawPixel_ToBackBuffer(X, Y, Color);
 8008aa8:	f7ff fcb2 	bl	8008410 <ILI9341_DrawPixel_ToBackBuffer>
}
 8008aac:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixel_ToDisplay(X, Y, Color, UseCS);
 8008aae:	f7ff ffcb 	bl	8008a48 <ILI9341_DrawPixel_ToDisplay>
}
 8008ab2:	e7fb      	b.n	8008aac <ILI9341_DrawPixel+0xc>
 8008ab4:	200109d0 	.word	0x200109d0

08008ab8 <ILI9341_DrawPixels_MSBFirst>:
{
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	b082      	sub	sp, #8
  if (UseBackBuffer)
 8008abc:	4c06      	ldr	r4, [pc, #24]	@ (8008ad8 <ILI9341_DrawPixels_MSBFirst+0x20>)
 8008abe:	7824      	ldrb	r4, [r4, #0]
 8008ac0:	b12c      	cbz	r4, 8008ace <ILI9341_DrawPixels_MSBFirst+0x16>
    ILI9341_DrawPixels_MSBFirst_ToBackBuffer(X, Y, Width, Height, pPixels);
 8008ac2:	9c04      	ldr	r4, [sp, #16]
 8008ac4:	9400      	str	r4, [sp, #0]
 8008ac6:	f7ff fd09 	bl	80084dc <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>
}
 8008aca:	b002      	add	sp, #8
 8008acc:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixels_MSBFirst_ToDisplay(X, Y, Width, Height, pPixels);
 8008ace:	9c04      	ldr	r4, [sp, #16]
 8008ad0:	9400      	str	r4, [sp, #0]
 8008ad2:	f7ff fd47 	bl	8008564 <ILI9341_DrawPixels_MSBFirst_ToDisplay>
}
 8008ad6:	e7f8      	b.n	8008aca <ILI9341_DrawPixels_MSBFirst+0x12>
 8008ad8:	200109d0 	.word	0x200109d0

08008adc <ILI9341_UsingBackBuffer>:
}
 8008adc:	4b01      	ldr	r3, [pc, #4]	@ (8008ae4 <ILI9341_UsingBackBuffer+0x8>)
 8008ade:	7818      	ldrb	r0, [r3, #0]
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	200109d0 	.word	0x200109d0

08008ae8 <ILI9341_CopyBackBufferToDisplay>:
{
 8008ae8:	b500      	push	{lr}
 8008aea:	b083      	sub	sp, #12
  ILI9341_DrawPixels_MSBFirst_ToDisplay(0, 0, ILI9341_Width, ILI9341_Height, pBackBuffer);
 8008aec:	4b06      	ldr	r3, [pc, #24]	@ (8008b08 <ILI9341_CopyBackBufferToDisplay+0x20>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8008af6:	22f0      	movs	r2, #240	@ 0xf0
 8008af8:	2100      	movs	r1, #0
 8008afa:	4608      	mov	r0, r1
 8008afc:	f7ff fd32 	bl	8008564 <ILI9341_DrawPixels_MSBFirst_ToDisplay>
}
 8008b00:	b003      	add	sp, #12
 8008b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b06:	bf00      	nop
 8008b08:	200109cc 	.word	0x200109cc

08008b0c <ILI9341_DrawBar_ToBackBuffer>:
{
 8008b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b10:	b083      	sub	sp, #12
 8008b12:	4606      	mov	r6, r0
 8008b14:	468b      	mov	fp, r1
 8008b16:	4617      	mov	r7, r2
 8008b18:	9301      	str	r3, [sp, #4]
  Color_MSBFirst = SwapBytes(i_Color);
 8008b1a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8008b1e:	f7ff fb77 	bl	8008210 <SwapBytes>
 8008b22:	4681      	mov	r9, r0
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8008b24:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4658      	mov	r0, fp
 8008b2c:	f7ff fb82 	bl	8008234 <Clamp_uint16>
 8008b30:	4682      	mov	sl, r0
 8008b32:	e00e      	b.n	8008b52 <ILI9341_DrawBar_ToBackBuffer+0x46>
      pLine[X] = Color_MSBFirst;
 8008b34:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8008b38:	f828 9003 	strh.w	r9, [r8, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8008b3c:	3401      	adds	r4, #1
 8008b3e:	19f0      	adds	r0, r6, r7
 8008b40:	22f0      	movs	r2, #240	@ 0xf0
 8008b42:	2100      	movs	r1, #0
 8008b44:	b280      	uxth	r0, r0
 8008b46:	f7ff fb75 	bl	8008234 <Clamp_uint16>
 8008b4a:	42a0      	cmp	r0, r4
 8008b4c:	d8f2      	bhi.n	8008b34 <ILI9341_DrawBar_ToBackBuffer+0x28>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8008b4e:	f10a 0a01 	add.w	sl, sl, #1
 8008b52:	9b01      	ldr	r3, [sp, #4]
 8008b54:	eb0b 0003 	add.w	r0, fp, r3
 8008b58:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	b280      	uxth	r0, r0
 8008b60:	f7ff fb68 	bl	8008234 <Clamp_uint16>
 8008b64:	4550      	cmp	r0, sl
 8008b66:	d90c      	bls.n	8008b82 <ILI9341_DrawBar_ToBackBuffer+0x76>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8008b68:	4b07      	ldr	r3, [pc, #28]	@ (8008b88 <ILI9341_DrawBar_ToBackBuffer+0x7c>)
 8008b6a:	f8d3 8000 	ldr.w	r8, [r3]
 8008b6e:	ebca 150a 	rsb	r5, sl, sl, lsl #4
 8008b72:	016d      	lsls	r5, r5, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8008b74:	22f0      	movs	r2, #240	@ 0xf0
 8008b76:	2100      	movs	r1, #0
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7ff fb5b 	bl	8008234 <Clamp_uint16>
 8008b7e:	4604      	mov	r4, r0
 8008b80:	e7dd      	b.n	8008b3e <ILI9341_DrawBar_ToBackBuffer+0x32>
}
 8008b82:	b003      	add	sp, #12
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	200109cc 	.word	0x200109cc

08008b8c <ILI9341_DrawBar>:
{
 8008b8c:	b530      	push	{r4, r5, lr}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  if (UseBackBuffer)
 8008b94:	4d05      	ldr	r5, [pc, #20]	@ (8008bac <ILI9341_DrawBar+0x20>)
 8008b96:	782d      	ldrb	r5, [r5, #0]
 8008b98:	b125      	cbz	r5, 8008ba4 <ILI9341_DrawBar+0x18>
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 8008b9a:	9400      	str	r4, [sp, #0]
 8008b9c:	f7ff ffb6 	bl	8008b0c <ILI9341_DrawBar_ToBackBuffer>
}
 8008ba0:	b003      	add	sp, #12
 8008ba2:	bd30      	pop	{r4, r5, pc}
    ILI9341_DrawBar_ToDisplay(X, Y, Width, Height, Color);
 8008ba4:	9400      	str	r4, [sp, #0]
 8008ba6:	f7ff fd45 	bl	8008634 <ILI9341_DrawBar_ToDisplay>
}
 8008baa:	e7f9      	b.n	8008ba0 <ILI9341_DrawBar+0x14>
 8008bac:	200109d0 	.word	0x200109d0

08008bb0 <ILI9341_Clear>:
{
 8008bb0:	b500      	push	{lr}
 8008bb2:	b083      	sub	sp, #12
  ILI9341_DrawBar(0, 0, ILI9341_Width, ILI9341_Height, Color);
 8008bb4:	9000      	str	r0, [sp, #0]
 8008bb6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8008bba:	22f0      	movs	r2, #240	@ 0xf0
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	f7ff ffe4 	bl	8008b8c <ILI9341_DrawBar>
}
 8008bc4:	b003      	add	sp, #12
 8008bc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008bcc <ILI9341_DrawRectangle>:
{
 8008bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	460e      	mov	r6, r1
 8008bd4:	4691      	mov	r9, r2
 8008bd6:	469a      	mov	sl, r3
 8008bd8:	f8bd 5020 	ldrh.w	r5, [sp, #32]
  if (!UseBackBuffer)
 8008bdc:	4b22      	ldr	r3, [pc, #136]	@ (8008c68 <ILI9341_DrawRectangle+0x9c>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	b10b      	cbz	r3, 8008be6 <ILI9341_DrawRectangle+0x1a>
  for (uint32_t X = Left; X < Left + Width; ++X)
 8008be2:	463c      	mov	r4, r7
 8008be4:	e018      	b.n	8008c18 <ILI9341_DrawRectangle+0x4c>
    ILI9341_CSX_Low();
 8008be6:	2200      	movs	r2, #0
 8008be8:	2102      	movs	r1, #2
 8008bea:	4820      	ldr	r0, [pc, #128]	@ (8008c6c <ILI9341_DrawRectangle+0xa0>)
 8008bec:	f7f8 f931 	bl	8000e52 <HAL_GPIO_WritePin>
 8008bf0:	e7f7      	b.n	8008be2 <ILI9341_DrawRectangle+0x16>
    ILI9341_DrawPixel(X, Top, Color, 0);
 8008bf2:	fa0f f884 	sxth.w	r8, r4
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	462a      	mov	r2, r5
 8008bfa:	b231      	sxth	r1, r6
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	f7ff ff4f 	bl	8008aa0 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(X, Top + Height - 1, Color, 0);
 8008c02:	eb06 010a 	add.w	r1, r6, sl
 8008c06:	b289      	uxth	r1, r1
 8008c08:	3901      	subs	r1, #1
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	b209      	sxth	r1, r1
 8008c10:	4640      	mov	r0, r8
 8008c12:	f7ff ff45 	bl	8008aa0 <ILI9341_DrawPixel>
  for (uint32_t X = Left; X < Left + Width; ++X)
 8008c16:	3401      	adds	r4, #1
 8008c18:	eb07 0309 	add.w	r3, r7, r9
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	d8e8      	bhi.n	8008bf2 <ILI9341_DrawRectangle+0x26>
  for (uint32_t Y = Top; Y < Top + Height; ++Y)
 8008c20:	4634      	mov	r4, r6
 8008c22:	e012      	b.n	8008c4a <ILI9341_DrawRectangle+0x7e>
    ILI9341_DrawPixel(Left, Y, Color, 0);
 8008c24:	fa0f f884 	sxth.w	r8, r4
 8008c28:	2300      	movs	r3, #0
 8008c2a:	462a      	mov	r2, r5
 8008c2c:	4641      	mov	r1, r8
 8008c2e:	b238      	sxth	r0, r7
 8008c30:	f7ff ff36 	bl	8008aa0 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(Left + Width - 1, Y, Color, 0);
 8008c34:	eb07 0009 	add.w	r0, r7, r9
 8008c38:	b280      	uxth	r0, r0
 8008c3a:	3801      	subs	r0, #1
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	462a      	mov	r2, r5
 8008c40:	4641      	mov	r1, r8
 8008c42:	b200      	sxth	r0, r0
 8008c44:	f7ff ff2c 	bl	8008aa0 <ILI9341_DrawPixel>
  for (uint32_t Y = Top; Y < Top + Height; ++Y)
 8008c48:	3401      	adds	r4, #1
 8008c4a:	eb06 030a 	add.w	r3, r6, sl
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	d8e8      	bhi.n	8008c24 <ILI9341_DrawRectangle+0x58>
  if (!UseBackBuffer)
 8008c52:	4b05      	ldr	r3, [pc, #20]	@ (8008c68 <ILI9341_DrawRectangle+0x9c>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	b10b      	cbz	r3, 8008c5c <ILI9341_DrawRectangle+0x90>
}
 8008c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ILI9341_CSX_High();
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	2102      	movs	r1, #2
 8008c60:	4802      	ldr	r0, [pc, #8]	@ (8008c6c <ILI9341_DrawRectangle+0xa0>)
 8008c62:	f7f8 f8f6 	bl	8000e52 <HAL_GPIO_WritePin>
}
 8008c66:	e7f7      	b.n	8008c58 <ILI9341_DrawRectangle+0x8c>
 8008c68:	200109d0 	.word	0x200109d0
 8008c6c:	40020800 	.word	0x40020800

08008c70 <ILI9341_SetFont>:
  Result = pFont;
 8008c70:	4b02      	ldr	r3, [pc, #8]	@ (8008c7c <ILI9341_SetFont+0xc>)
 8008c72:	681a      	ldr	r2, [r3, #0]
  pFont = i_pFont;
 8008c74:	6018      	str	r0, [r3, #0]
}
 8008c76:	4610      	mov	r0, r2
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	200109d4 	.word	0x200109d4

08008c80 <ILI9341_GetFontYSpacing>:
  return pFont->yAdvance;
 8008c80:	4b01      	ldr	r3, [pc, #4]	@ (8008c88 <ILI9341_GetFontYSpacing+0x8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
}
 8008c84:	7a98      	ldrb	r0, [r3, #10]
 8008c86:	4770      	bx	lr
 8008c88:	200109d4 	.word	0x200109d4

08008c8c <GetCharWidth>:

uint16_t GetCharWidth(uint8_t Ch)
{
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	4604      	mov	r4, r0
  if (IsNonPrintingChar(Ch))
 8008c90:	f7ff fbd6 	bl	8008440 <IsNonPrintingChar>
 8008c94:	b980      	cbnz	r0, 8008cb8 <GetCharWidth+0x2c>
    return 0;

  Ch -= pFont->first;
 8008c96:	4b09      	ldr	r3, [pc, #36]	@ (8008cbc <GetCharWidth+0x30>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	7a1a      	ldrb	r2, [r3, #8]
 8008c9c:	1aa0      	subs	r0, r4, r2
 8008c9e:	b2c0      	uxtb	r0, r0
  GFXglyph *pGlyph = &pFont->pGlyph[Ch];
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  uint8_t w = pGlyph->width;
 8008ca6:	789a      	ldrb	r2, [r3, #2]
  int8_t xo = pGlyph->xOffset;
 8008ca8:	f993 0005 	ldrsb.w	r0, [r3, #5]

  if (w == 0)
 8008cac:	b112      	cbz	r2, 8008cb4 <GetCharWidth+0x28>
    return pGlyph->xAdvance;

  return xo + w;
 8008cae:	4410      	add	r0, r2
 8008cb0:	b280      	uxth	r0, r0
}
 8008cb2:	bd10      	pop	{r4, pc}
    return pGlyph->xAdvance;
 8008cb4:	7918      	ldrb	r0, [r3, #4]
 8008cb6:	e7fc      	b.n	8008cb2 <GetCharWidth+0x26>
    return 0;
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e7fa      	b.n	8008cb2 <GetCharWidth+0x26>
 8008cbc:	200109d4 	.word	0x200109d4

08008cc0 <ILI9341_GetTextWidth>:

uint16_t ILI9341_GetTextWidth(const char *Text)
{
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	4604      	mov	r4, r0
  uint16_t TotalWidth, NumChars;
  const char *pText;

  NumChars = strlen(Text);
 8008cc4:	f7f7 fb1c 	bl	8000300 <strlen>
 8008cc8:	b287      	uxth	r7, r0

  pText = Text;

  TotalWidth=0;

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8008cca:	2500      	movs	r5, #0
  TotalWidth=0;
 8008ccc:	462e      	mov	r6, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8008cce:	e007      	b.n	8008ce0 <ILI9341_GetTextWidth+0x20>
    TotalWidth += GetCharWidth(*pText++);
 8008cd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008cd4:	f7ff ffda 	bl	8008c8c <GetCharWidth>
 8008cd8:	4406      	add	r6, r0
 8008cda:	b2b6      	uxth	r6, r6
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8008cdc:	3501      	adds	r5, #1
 8008cde:	b2ad      	uxth	r5, r5
 8008ce0:	42bd      	cmp	r5, r7
 8008ce2:	d3f5      	bcc.n	8008cd0 <ILI9341_GetTextWidth+0x10>

  return TotalWidth;
}
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ce8 <ILI9341_DrawCharAtXY>:
uint8_t ILI9341_DrawCharAtXY(uint8_t Ch, uint16_t X, uint16_t Y, uint16_t Color)
// X: X position of left edge of char.
// Y: Y position of line on which the char sits. The char may go below this line (e.g. g j p q y).
// Returns required X advance.
// Based on Adafruit_GFX.cpp.
{
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	b08d      	sub	sp, #52	@ 0x34
 8008cee:	9105      	str	r1, [sp, #20]
 8008cf0:	9208      	str	r2, [sp, #32]
 8008cf2:	9306      	str	r3, [sp, #24]
  uint8_t *pBitmap;
  uint16_t Color_MSBFirst, TextBackgroundColor_MSBFirst;
  uint16_t *pMemChar, *pMemCharPixel;
  uint8_t CharWidth, CharHeight;

  if (!pFont)
 8008cf4:	4b9a      	ldr	r3, [pc, #616]	@ (8008f60 <ILI9341_DrawCharAtXY+0x278>)
 8008cf6:	681c      	ldr	r4, [r3, #0]
 8008cf8:	2c00      	cmp	r4, #0
 8008cfa:	f000 812c 	beq.w	8008f56 <ILI9341_DrawCharAtXY+0x26e>
 8008cfe:	4605      	mov	r5, r0
    return 0;
  if (IsNonPrintingChar(Ch))
 8008d00:	f7ff fb9e 	bl	8008440 <IsNonPrintingChar>
 8008d04:	9003      	str	r0, [sp, #12]
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f040 8127 	bne.w	8008f5a <ILI9341_DrawCharAtXY+0x272>
    return 0;

  Ch -= pFont->first;
 8008d0c:	7a23      	ldrb	r3, [r4, #8]
 8008d0e:	1aed      	subs	r5, r5, r3
 8008d10:	b2ed      	uxtb	r5, r5
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 8008d12:	4b94      	ldr	r3, [pc, #592]	@ (8008f64 <ILI9341_DrawCharAtXY+0x27c>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d034      	beq.n	8008d84 <ILI9341_DrawCharAtXY+0x9c>
    Y -= (pFont->yOffsetMin / 2);

  pGlyph = &pFont->pGlyph[Ch];
 8008d1a:	6863      	ldr	r3, [r4, #4]
 8008d1c:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008d20:	920a      	str	r2, [sp, #40]	@ 0x28
  pBitmap = pFont->pBitmap;
 8008d22:	f8d4 9000 	ldr.w	r9, [r4]

  bo = pGlyph->bitmapOffset;
 8008d26:	f833 6035 	ldrh.w	r6, [r3, r5, lsl #3]
  w = pGlyph->width;
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	f892 8002 	ldrb.w	r8, [r2, #2]
  h = pGlyph->height;
 8008d30:	f892 b003 	ldrb.w	fp, [r2, #3]
  xo = pGlyph->xOffset;
 8008d34:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8008d38:	9204      	str	r2, [sp, #16]
  yo = pGlyph->yOffset;
 8008d3a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8008d3e:	9307      	str	r3, [sp, #28]
  bits = 0;
  bit = 0;
  yo_min = pFont->yOffsetMin;
 8008d40:	f994 a00b 	ldrsb.w	sl, [r4, #11]
  yo_max = pFont->yOffsetMax;
 8008d44:	f994 500c 	ldrsb.w	r5, [r4, #12]

  switch(TextDrawMode)
 8008d48:	4b87      	ldr	r3, [pc, #540]	@ (8008f68 <ILI9341_DrawCharAtXY+0x280>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d060      	beq.n	8008e12 <ILI9341_DrawCharAtXY+0x12a>
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	f000 80bb 	beq.w	8008ecc <ILI9341_DrawCharAtXY+0x1e4>
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d151      	bne.n	8008dfe <ILI9341_DrawCharAtXY+0x116>
  {
    case tdmNone:
      break;

    case tdmThisCharBar:
      Color_MSBFirst = SwapBytes(Color);
 8008d5a:	9806      	ldr	r0, [sp, #24]
 8008d5c:	f7ff fa58 	bl	8008210 <SwapBytes>
 8008d60:	4605      	mov	r5, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8008d62:	4b82      	ldr	r3, [pc, #520]	@ (8008f6c <ILI9341_DrawCharAtXY+0x284>)
 8008d64:	8818      	ldrh	r0, [r3, #0]
 8008d66:	f7ff fa53 	bl	8008210 <SwapBytes>
 8008d6a:	4604      	mov	r4, r0
      pMemChar = (uint16_t *)malloc(w * h * 2);
 8008d6c:	fb0b f008 	mul.w	r0, fp, r8
 8008d70:	0040      	lsls	r0, r0, #1
 8008d72:	f006 fd3d 	bl	800f7f0 <malloc>
 8008d76:	4607      	mov	r7, r0
      pMemCharPixel = pMemChar;
 8008d78:	4684      	mov	ip, r0
  bit = 0;
 8008d7a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8008d7e:	4670      	mov	r0, lr
  bits = 0;
 8008d80:	4673      	mov	r3, lr

      for (yy = 0; yy < h; ++yy)
 8008d82:	e028      	b.n	8008dd6 <ILI9341_DrawCharAtXY+0xee>
    Y -= (pFont->yOffsetMin / 2);
 8008d84:	f994 300b 	ldrsb.w	r3, [r4, #11]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	db05      	blt.n	8008d98 <ILI9341_DrawCharAtXY+0xb0>
 8008d8c:	9a08      	ldr	r2, [sp, #32]
 8008d8e:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	9308      	str	r3, [sp, #32]
 8008d96:	e7c0      	b.n	8008d1a <ILI9341_DrawCharAtXY+0x32>
 8008d98:	3301      	adds	r3, #1
 8008d9a:	e7f7      	b.n	8008d8c <ILI9341_DrawCharAtXY+0xa4>
      {
        for (xx = 0; xx < w; ++xx)
        {
          if (!(bit++ & 7))
            bits = pBitmap[bo++];
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 8008d9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008da0:	d113      	bne.n	8008dca <ILI9341_DrawCharAtXY+0xe2>
 8008da2:	4620      	mov	r0, r4
 8008da4:	f82c 0b02 	strh.w	r0, [ip], #2
          ++pMemCharPixel;
          bits <<= 1;
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 8008dac:	3201      	adds	r2, #1
 8008dae:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 8008db0:	4608      	mov	r0, r1
        for (xx = 0; xx < w; ++xx)
 8008db2:	4542      	cmp	r2, r8
 8008db4:	d20b      	bcs.n	8008dce <ILI9341_DrawCharAtXY+0xe6>
          if (!(bit++ & 7))
 8008db6:	1c41      	adds	r1, r0, #1
 8008db8:	b2c9      	uxtb	r1, r1
 8008dba:	f010 0f07 	tst.w	r0, #7
 8008dbe:	d1ed      	bne.n	8008d9c <ILI9341_DrawCharAtXY+0xb4>
            bits = pBitmap[bo++];
 8008dc0:	1c70      	adds	r0, r6, #1
 8008dc2:	f819 3006 	ldrb.w	r3, [r9, r6]
 8008dc6:	b286      	uxth	r6, r0
 8008dc8:	e7e8      	b.n	8008d9c <ILI9341_DrawCharAtXY+0xb4>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 8008dca:	4628      	mov	r0, r5
 8008dcc:	e7ea      	b.n	8008da4 <ILI9341_DrawCharAtXY+0xbc>
      for (yy = 0; yy < h; ++yy)
 8008dce:	f10e 0e01 	add.w	lr, lr, #1
 8008dd2:	fa5f fe8e 	uxtb.w	lr, lr
 8008dd6:	45de      	cmp	lr, fp
 8008dd8:	d201      	bcs.n	8008dde <ILI9341_DrawCharAtXY+0xf6>
        for (xx = 0; xx < w; ++xx)
 8008dda:	9a03      	ldr	r2, [sp, #12]
 8008ddc:	e7e9      	b.n	8008db2 <ILI9341_DrawCharAtXY+0xca>
        }
      }
      ILI9341_DrawPixels_MSBFirst(X + xo, Y + yo, w, h, pMemChar);
 8008dde:	9908      	ldr	r1, [sp, #32]
 8008de0:	9b07      	ldr	r3, [sp, #28]
 8008de2:	4419      	add	r1, r3
 8008de4:	9805      	ldr	r0, [sp, #20]
 8008de6:	9b04      	ldr	r3, [sp, #16]
 8008de8:	4418      	add	r0, r3
 8008dea:	9700      	str	r7, [sp, #0]
 8008dec:	465b      	mov	r3, fp
 8008dee:	4642      	mov	r2, r8
 8008df0:	b289      	uxth	r1, r1
 8008df2:	b280      	uxth	r0, r0
 8008df4:	f7ff fe60 	bl	8008ab8 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f006 fd01 	bl	800f800 <free>
      }
      ILI9341_CSX_High();
      break;
  }

  if (w == 0)
 8008dfe:	f1b8 0f00 	cmp.w	r8, #0
 8008e02:	f000 80a5 	beq.w	8008f50 <ILI9341_DrawCharAtXY+0x268>
    return pGlyph->xAdvance;
  return xo + w;
 8008e06:	9804      	ldr	r0, [sp, #16]
 8008e08:	4440      	add	r0, r8
 8008e0a:	b2c0      	uxtb	r0, r0
}
 8008e0c:	b00d      	add	sp, #52	@ 0x34
 8008e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Color_MSBFirst = SwapBytes(Color);
 8008e12:	9806      	ldr	r0, [sp, #24]
 8008e14:	f7ff f9fc 	bl	8008210 <SwapBytes>
 8008e18:	4604      	mov	r4, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8008e1a:	4b54      	ldr	r3, [pc, #336]	@ (8008f6c <ILI9341_DrawCharAtXY+0x284>)
 8008e1c:	8818      	ldrh	r0, [r3, #0]
 8008e1e:	f7ff f9f7 	bl	8008210 <SwapBytes>
 8008e22:	4607      	mov	r7, r0
      CharWidth = pGlyph->xAdvance;
 8008e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e26:	791a      	ldrb	r2, [r3, #4]
 8008e28:	9206      	str	r2, [sp, #24]
      CharHeight = yo_max - yo_min + 1;
 8008e2a:	eba5 030a 	sub.w	r3, r5, sl
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	3301      	adds	r3, #1
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	930b      	str	r3, [sp, #44]	@ 0x2c
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 8008e36:	fb02 f503 	mul.w	r5, r2, r3
 8008e3a:	0068      	lsls	r0, r5, #1
 8008e3c:	f006 fcd8 	bl	800f7f0 <malloc>
 8008e40:	4603      	mov	r3, r0
 8008e42:	9009      	str	r0, [sp, #36]	@ 0x24
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8008e44:	2200      	movs	r2, #0
 8008e46:	e003      	b.n	8008e50 <ILI9341_DrawCharAtXY+0x168>
        *pMemCharPixel++ = TextBackgroundColor_MSBFirst;
 8008e48:	f823 7b02 	strh.w	r7, [r3], #2
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8008e4c:	3201      	adds	r2, #1
 8008e4e:	b292      	uxth	r2, r2
 8008e50:	4295      	cmp	r5, r2
 8008e52:	dcf9      	bgt.n	8008e48 <ILI9341_DrawCharAtXY+0x160>
  bit = 0;
 8008e54:	9f03      	ldr	r7, [sp, #12]
 8008e56:	463d      	mov	r5, r7
  bits = 0;
 8008e58:	463b      	mov	r3, r7
 8008e5a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008e5e:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8008e62:	e018      	b.n	8008e96 <ILI9341_DrawCharAtXY+0x1ae>
          if (bits & 0x80)
 8008e64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e68:	d111      	bne.n	8008e8e <ILI9341_DrawCharAtXY+0x1a6>
          ++pMemCharPixel;
 8008e6a:	3002      	adds	r0, #2
          bits <<= 1;
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 8008e70:	3201      	adds	r2, #1
 8008e72:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 8008e74:	460d      	mov	r5, r1
        for (xx = 0; xx < w; ++xx)
 8008e76:	4542      	cmp	r2, r8
 8008e78:	d20b      	bcs.n	8008e92 <ILI9341_DrawCharAtXY+0x1aa>
          if (!(bit++ & 7))
 8008e7a:	1c69      	adds	r1, r5, #1
 8008e7c:	b2c9      	uxtb	r1, r1
 8008e7e:	f015 0f07 	tst.w	r5, #7
 8008e82:	d1ef      	bne.n	8008e64 <ILI9341_DrawCharAtXY+0x17c>
            bits = pBitmap[bo++];
 8008e84:	1c75      	adds	r5, r6, #1
 8008e86:	f819 3006 	ldrb.w	r3, [r9, r6]
 8008e8a:	b2ae      	uxth	r6, r5
 8008e8c:	e7ea      	b.n	8008e64 <ILI9341_DrawCharAtXY+0x17c>
            *pMemCharPixel = Color_MSBFirst;
 8008e8e:	8004      	strh	r4, [r0, #0]
 8008e90:	e7eb      	b.n	8008e6a <ILI9341_DrawCharAtXY+0x182>
      for (yy = 0; yy < h; ++yy)
 8008e92:	3701      	adds	r7, #1
 8008e94:	b2ff      	uxtb	r7, r7
 8008e96:	455f      	cmp	r7, fp
 8008e98:	d20a      	bcs.n	8008eb0 <ILI9341_DrawCharAtXY+0x1c8>
        pMemCharPixel = &pMemChar[(- yo_min + yo + yy) * CharWidth + xo];
 8008e9a:	ebac 000a 	sub.w	r0, ip, sl
 8008e9e:	4438      	add	r0, r7
 8008ea0:	9a04      	ldr	r2, [sp, #16]
 8008ea2:	9906      	ldr	r1, [sp, #24]
 8008ea4:	fb00 2001 	mla	r0, r0, r1, r2
 8008ea8:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
        for (xx = 0; xx < w; ++xx)
 8008eac:	9a03      	ldr	r2, [sp, #12]
 8008eae:	e7e2      	b.n	8008e76 <ILI9341_DrawCharAtXY+0x18e>
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
 8008eb0:	9908      	ldr	r1, [sp, #32]
 8008eb2:	4451      	add	r1, sl
 8008eb4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8008eb6:	9400      	str	r4, [sp, #0]
 8008eb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eba:	9a06      	ldr	r2, [sp, #24]
 8008ebc:	b289      	uxth	r1, r1
 8008ebe:	9805      	ldr	r0, [sp, #20]
 8008ec0:	f7ff fdfa 	bl	8008ab8 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f006 fc9b 	bl	800f800 <free>
      break;
 8008eca:	e798      	b.n	8008dfe <ILI9341_DrawCharAtXY+0x116>
      ILI9341_CSX_Low();
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2102      	movs	r1, #2
 8008ed0:	4827      	ldr	r0, [pc, #156]	@ (8008f70 <ILI9341_DrawCharAtXY+0x288>)
 8008ed2:	f7f7 ffbe 	bl	8000e52 <HAL_GPIO_WritePin>
  bit = 0;
 8008ed6:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8008eda:	4653      	mov	r3, sl
  bits = 0;
 8008edc:	4654      	mov	r4, sl
 8008ede:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008ee2:	f8dd b020 	ldr.w	fp, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 8008ee6:	e028      	b.n	8008f3a <ILI9341_DrawCharAtXY+0x252>
          if (bits & 0x80)
 8008ee8:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8008eec:	d110      	bne.n	8008f10 <ILI9341_DrawCharAtXY+0x228>
          bits <<= 1;
 8008eee:	0064      	lsls	r4, r4, #1
 8008ef0:	b2e4      	uxtb	r4, r4
        for (xx = 0; xx < w; ++xx)
 8008ef2:	3501      	adds	r5, #1
 8008ef4:	b2ed      	uxtb	r5, r5
          if (!(bit++ & 7))
 8008ef6:	463b      	mov	r3, r7
        for (xx = 0; xx < w; ++xx)
 8008ef8:	4545      	cmp	r5, r8
 8008efa:	d21a      	bcs.n	8008f32 <ILI9341_DrawCharAtXY+0x24a>
          if (!(bit++ & 7))
 8008efc:	1c5f      	adds	r7, r3, #1
 8008efe:	b2ff      	uxtb	r7, r7
 8008f00:	f013 0f07 	tst.w	r3, #7
 8008f04:	d1f0      	bne.n	8008ee8 <ILI9341_DrawCharAtXY+0x200>
            bits = pBitmap[bo++];
 8008f06:	1c73      	adds	r3, r6, #1
 8008f08:	f819 4006 	ldrb.w	r4, [r9, r6]
 8008f0c:	b29e      	uxth	r6, r3
 8008f0e:	e7eb      	b.n	8008ee8 <ILI9341_DrawCharAtXY+0x200>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 8008f10:	9b05      	ldr	r3, [sp, #20]
 8008f12:	9a04      	ldr	r2, [sp, #16]
 8008f14:	1898      	adds	r0, r3, r2
 8008f16:	fa15 f080 	uxtah	r0, r5, r0
 8008f1a:	9b07      	ldr	r3, [sp, #28]
 8008f1c:	eb0b 0103 	add.w	r1, fp, r3
 8008f20:	fa1a f181 	uxtah	r1, sl, r1
 8008f24:	2300      	movs	r3, #0
 8008f26:	9a06      	ldr	r2, [sp, #24]
 8008f28:	b209      	sxth	r1, r1
 8008f2a:	b200      	sxth	r0, r0
 8008f2c:	f7ff fdb8 	bl	8008aa0 <ILI9341_DrawPixel>
 8008f30:	e7dd      	b.n	8008eee <ILI9341_DrawCharAtXY+0x206>
      for (yy = 0; yy < h; ++yy)
 8008f32:	f10a 0201 	add.w	r2, sl, #1
 8008f36:	fa5f fa82 	uxtb.w	sl, r2
 8008f3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f3c:	4592      	cmp	sl, r2
 8008f3e:	d201      	bcs.n	8008f44 <ILI9341_DrawCharAtXY+0x25c>
        for (xx = 0; xx < w; ++xx)
 8008f40:	9d03      	ldr	r5, [sp, #12]
 8008f42:	e7d9      	b.n	8008ef8 <ILI9341_DrawCharAtXY+0x210>
      ILI9341_CSX_High();
 8008f44:	2201      	movs	r2, #1
 8008f46:	2102      	movs	r1, #2
 8008f48:	4809      	ldr	r0, [pc, #36]	@ (8008f70 <ILI9341_DrawCharAtXY+0x288>)
 8008f4a:	f7f7 ff82 	bl	8000e52 <HAL_GPIO_WritePin>
      break;
 8008f4e:	e756      	b.n	8008dfe <ILI9341_DrawCharAtXY+0x116>
    return pGlyph->xAdvance;
 8008f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f52:	7918      	ldrb	r0, [r3, #4]
 8008f54:	e75a      	b.n	8008e0c <ILI9341_DrawCharAtXY+0x124>
    return 0;
 8008f56:	2000      	movs	r0, #0
 8008f58:	e758      	b.n	8008e0c <ILI9341_DrawCharAtXY+0x124>
    return 0;
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	e756      	b.n	8008e0c <ILI9341_DrawCharAtXY+0x124>
 8008f5e:	bf00      	nop
 8008f60:	200109d4 	.word	0x200109d4
 8008f64:	20000030 	.word	0x20000030
 8008f68:	20000031 	.word	0x20000031
 8008f6c:	200109d8 	.word	0x200109d8
 8008f70:	40020800 	.word	0x40020800

08008f74 <ILI9341_SetTextDrawMode>:

TextDrawMode_t ILI9341_SetTextDrawMode(TextDrawMode_t Value)
{
  TextDrawMode_t Result;

  Result = TextDrawMode;
 8008f74:	4b02      	ldr	r3, [pc, #8]	@ (8008f80 <ILI9341_SetTextDrawMode+0xc>)
 8008f76:	781a      	ldrb	r2, [r3, #0]
  TextDrawMode = Value;
 8008f78:	7018      	strb	r0, [r3, #0]
  return Result;
}
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	20000031 	.word	0x20000031

08008f84 <ILI9341_SetTextVerticalOrigin>:

TextVerticalOrigin_t ILI9341_SetTextVerticalOrigin(TextVerticalOrigin_t Value)
{
  TextVerticalOrigin_t Result;

  Result = TextVerticalOrigin;
 8008f84:	4b02      	ldr	r3, [pc, #8]	@ (8008f90 <ILI9341_SetTextVerticalOrigin+0xc>)
 8008f86:	781a      	ldrb	r2, [r3, #0]
  TextVerticalOrigin = Value;
 8008f88:	7018      	strb	r0, [r3, #0]
  return Result;
}
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	20000030 	.word	0x20000030

08008f94 <ILI9341_DrawTextAtXY>:
  uint16_t NumChars;
  uint8_t DX;
  
  pText = (uint8_t *) Text;

  if (!pText)
 8008f94:	b360      	cbz	r0, 8008ff0 <ILI9341_DrawTextAtXY+0x5c>
{
 8008f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	4690      	mov	r8, r2
 8008f9e:	461c      	mov	r4, r3
 8008fa0:	4606      	mov	r6, r0
    return;

  NumChars = strlen(Text);
 8008fa2:	f7f7 f9ad 	bl	8000300 <strlen>
 8008fa6:	b287      	uxth	r7, r0

  switch (TextPosition)
 8008fa8:	2c02      	cmp	r4, #2
 8008faa:	d003      	beq.n	8008fb4 <ILI9341_DrawTextAtXY+0x20>
 8008fac:	2c03      	cmp	r4, #3
 8008fae:	d009      	beq.n	8008fc4 <ILI9341_DrawTextAtXY+0x30>
{
 8008fb0:	2400      	movs	r4, #0
 8008fb2:	e019      	b.n	8008fe8 <ILI9341_DrawTextAtXY+0x54>
  {
    case tpCentre:
      X -= ILI9341_GetTextWidth(Text) / 2;
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f7ff fe83 	bl	8008cc0 <ILI9341_GetTextWidth>
 8008fba:	f3c0 034f 	ubfx	r3, r0, #1, #16
 8008fbe:	1aeb      	subs	r3, r5, r3
 8008fc0:	b29d      	uxth	r5, r3
      break;
 8008fc2:	e7f5      	b.n	8008fb0 <ILI9341_DrawTextAtXY+0x1c>
    case tpRight:
      X -= ILI9341_GetTextWidth(Text);
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7ff fe7b 	bl	8008cc0 <ILI9341_GetTextWidth>
 8008fca:	1a28      	subs	r0, r5, r0
 8008fcc:	b285      	uxth	r5, r0
      break;
 8008fce:	e7ef      	b.n	8008fb0 <ILI9341_DrawTextAtXY+0x1c>
  }

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
  {
    Ch = *pText;
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 8008fd0:	4b08      	ldr	r3, [pc, #32]	@ (8008ff4 <ILI9341_DrawTextAtXY+0x60>)
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f816 0b01 	ldrb.w	r0, [r6], #1
 8008fdc:	f7ff fe84 	bl	8008ce8 <ILI9341_DrawCharAtXY>
    ++pText;
    X += DX;
 8008fe0:	4428      	add	r0, r5
 8008fe2:	b285      	uxth	r5, r0
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8008fe4:	3401      	adds	r4, #1
 8008fe6:	b2a4      	uxth	r4, r4
 8008fe8:	42bc      	cmp	r4, r7
 8008fea:	d3f1      	bcc.n	8008fd0 <ILI9341_DrawTextAtXY+0x3c>
  }
}
 8008fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20000032 	.word	0x20000032

08008ff8 <IsCloseTo_f>:
//      => Enable global interrupt.
// => Requires USE_HAL_TIM_REGISTER_CALLBACKS symbol to be defined as 1 e.g. add "USE_HAL_TIM_REGISTER_CALLBACKS=1" to C compiler symbols in "Tool Settings".
///////////////////////////////////////////////////////////////////////////////

static uint8_t IsCloseTo_f(float ActualValue, float IntendedValue, float AllowedError)
{
 8008ff8:	ee07 0a90 	vmov	s15, r0
 8008ffc:	ee06 1a90 	vmov	s13, r1
 8009000:	ee07 2a10 	vmov	s14, r2
  return fabs(ActualValue - IntendedValue) <= AllowedError;
 8009004:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009008:	eef0 7ae7 	vabs.f32	s15, s15
 800900c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8009014:	bf94      	ite	ls
 8009016:	2001      	movls	r0, #1
 8009018:	2000      	movhi	r0, #0
 800901a:	4770      	bx	lr

0800901c <PeriodElapsedCallback>:

///////////////////////////////////////////////////////////////////////////////

static void PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim == phTimer)
 800901c:	4b09      	ldr	r3, [pc, #36]	@ (8009044 <PeriodElapsedCallback+0x28>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4283      	cmp	r3, r0
 8009022:	d000      	beq.n	8009026 <PeriodElapsedCallback+0xa>
      Decoder_State = stNone;
    }
    else if (Decoder_State == stReceiving)
      Decoder_State = stReceived;
  }
}
 8009024:	4770      	bx	lr
    if (Decoder_State == stDone)
 8009026:	4b08      	ldr	r3, [pc, #32]	@ (8009048 <PeriodElapsedCallback+0x2c>)
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b03      	cmp	r3, #3
 800902c:	d005      	beq.n	800903a <PeriodElapsedCallback+0x1e>
    else if (Decoder_State == stReceiving)
 800902e:	2b01      	cmp	r3, #1
 8009030:	d1f8      	bne.n	8009024 <PeriodElapsedCallback+0x8>
      Decoder_State = stReceived;
 8009032:	4b05      	ldr	r3, [pc, #20]	@ (8009048 <PeriodElapsedCallback+0x2c>)
 8009034:	2202      	movs	r2, #2
 8009036:	701a      	strb	r2, [r3, #0]
}
 8009038:	e7f4      	b.n	8009024 <PeriodElapsedCallback+0x8>
      Decoder_State = stNone;
 800903a:	4b03      	ldr	r3, [pc, #12]	@ (8009048 <PeriodElapsedCallback+0x2c>)
 800903c:	2200      	movs	r2, #0
 800903e:	701a      	strb	r2, [r3, #0]
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	200109ec 	.word	0x200109ec
 8009048:	200109e7 	.word	0x200109e7

0800904c <CaptureCallback>:

static void CaptureCallback(TIM_HandleTypeDef *htim)
{
  if (htim == phTimer)
 800904c:	4b32      	ldr	r3, [pc, #200]	@ (8009118 <CaptureCallback+0xcc>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4283      	cmp	r3, r0
 8009052:	d000      	beq.n	8009056 <CaptureCallback+0xa>
 8009054:	4770      	bx	lr
  {
    if (Decoder_State == stNone)
 8009056:	4a31      	ldr	r2, [pc, #196]	@ (800911c <CaptureCallback+0xd0>)
 8009058:	7812      	ldrb	r2, [r2, #0]
 800905a:	b972      	cbnz	r2, 800907a <CaptureCallback+0x2e>
    {
      Decoder_NumBits = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	4a30      	ldr	r2, [pc, #192]	@ (8009120 <CaptureCallback+0xd4>)
 8009060:	6013      	str	r3, [r2, #0]
      Decoder_State = stReceiving;
 8009062:	2201      	movs	r2, #1
 8009064:	492d      	ldr	r1, [pc, #180]	@ (800911c <CaptureCallback+0xd0>)
 8009066:	700a      	strb	r2, [r1, #0]
      Decoder_WasMidBit = 1;
 8009068:	492e      	ldr	r1, [pc, #184]	@ (8009124 <CaptureCallback+0xd8>)
 800906a:	700a      	strb	r2, [r1, #0]
      Decoder_CurrentInputState = 0;
 800906c:	4a2e      	ldr	r2, [pc, #184]	@ (8009128 <CaptureCallback+0xdc>)
 800906e:	7013      	strb	r3, [r2, #0]
      Decoder_Bits = 0;
 8009070:	4a2e      	ldr	r2, [pc, #184]	@ (800912c <CaptureCallback+0xe0>)
 8009072:	6013      	str	r3, [r2, #0]
      Decoder_Error = 0;
 8009074:	4a2e      	ldr	r2, [pc, #184]	@ (8009130 <CaptureCallback+0xe4>)
 8009076:	7013      	strb	r3, [r2, #0]
 8009078:	4770      	bx	lr
    }
    else if (Decoder_State == stReceiving)
 800907a:	2a01      	cmp	r2, #1
 800907c:	d1ea      	bne.n	8009054 <CaptureCallback+0x8>
{
 800907e:	b500      	push	{lr}
 8009080:	b083      	sub	sp, #12
    {
      if (Decoder_NumBits == Decoder_MaxNumBits)
 8009082:	4a27      	ldr	r2, [pc, #156]	@ (8009120 <CaptureCallback+0xd4>)
 8009084:	6812      	ldr	r2, [r2, #0]
 8009086:	2a20      	cmp	r2, #32
 8009088:	d10b      	bne.n	80090a2 <CaptureCallback+0x56>
        Decoder_State = stDone;
 800908a:	4b24      	ldr	r3, [pc, #144]	@ (800911c <CaptureCallback+0xd0>)
 800908c:	2203      	movs	r2, #3
 800908e:	701a      	strb	r2, [r3, #0]
          Decoder_Error = 1;
          Decoder_State = stReceived;
        }
      }

      Decoder_CurrentInputState = !Decoder_CurrentInputState;
 8009090:	4a25      	ldr	r2, [pc, #148]	@ (8009128 <CaptureCallback+0xdc>)
 8009092:	7813      	ldrb	r3, [r2, #0]
 8009094:	fab3 f383 	clz	r3, r3
 8009098:	095b      	lsrs	r3, r3, #5
 800909a:	7013      	strb	r3, [r2, #0]
    }
  }
}
 800909c:	b003      	add	sp, #12
 800909e:	f85d fb04 	ldr.w	pc, [sp], #4
        uint8_t NumHalfCycles = (int)round(HAL_TIM_ReadCapturedValue(phTimer, TIM_CHANNEL_1) / 889.0f); // Assumes channel 1.
 80090a2:	2100      	movs	r1, #0
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fb ff56 	bl	8004f56 <HAL_TIM_ReadCapturedValue>
 80090aa:	ee07 0a90 	vmov	s15, r0
 80090ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8009134 <CaptureCallback+0xe8>
 80090b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80090ba:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80090be:	feb8 7b47 	vrinta.f64	d7, d7
 80090c2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80090c6:	edcd 7a01 	vstr	s15, [sp, #4]
 80090ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
        if (Decoder_WasMidBit && (NumHalfCycles == 1))
 80090ce:	4a15      	ldr	r2, [pc, #84]	@ (8009124 <CaptureCallback+0xd8>)
 80090d0:	7812      	ldrb	r2, [r2, #0]
 80090d2:	b10a      	cbz	r2, 80090d8 <CaptureCallback+0x8c>
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d00c      	beq.n	80090f2 <CaptureCallback+0xa6>
        else if ((Decoder_WasMidBit && (NumHalfCycles == 2)) || (!Decoder_WasMidBit && (NumHalfCycles == 1)))
 80090d8:	b10a      	cbz	r2, 80090de <CaptureCallback+0x92>
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d00d      	beq.n	80090fa <CaptureCallback+0xae>
 80090de:	b90a      	cbnz	r2, 80090e4 <CaptureCallback+0x98>
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d00a      	beq.n	80090fa <CaptureCallback+0xae>
          Decoder_Error = 1;
 80090e4:	4b12      	ldr	r3, [pc, #72]	@ (8009130 <CaptureCallback+0xe4>)
 80090e6:	2201      	movs	r2, #1
 80090e8:	701a      	strb	r2, [r3, #0]
          Decoder_State = stReceived;
 80090ea:	4b0c      	ldr	r3, [pc, #48]	@ (800911c <CaptureCallback+0xd0>)
 80090ec:	2202      	movs	r2, #2
 80090ee:	701a      	strb	r2, [r3, #0]
 80090f0:	e7ce      	b.n	8009090 <CaptureCallback+0x44>
          Decoder_WasMidBit = 0;
 80090f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009124 <CaptureCallback+0xd8>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	701a      	strb	r2, [r3, #0]
 80090f8:	e7ca      	b.n	8009090 <CaptureCallback+0x44>
          Decoder_WasMidBit = 1;
 80090fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009124 <CaptureCallback+0xd8>)
 80090fc:	2201      	movs	r2, #1
 80090fe:	701a      	strb	r2, [r3, #0]
          Decoder_Bits = (Decoder_Bits << 1) | Decoder_CurrentInputState;
 8009100:	4a0a      	ldr	r2, [pc, #40]	@ (800912c <CaptureCallback+0xe0>)
 8009102:	6811      	ldr	r1, [r2, #0]
 8009104:	4b08      	ldr	r3, [pc, #32]	@ (8009128 <CaptureCallback+0xdc>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800910c:	6013      	str	r3, [r2, #0]
          ++Decoder_NumBits;
 800910e:	4a04      	ldr	r2, [pc, #16]	@ (8009120 <CaptureCallback+0xd4>)
 8009110:	6813      	ldr	r3, [r2, #0]
 8009112:	3301      	adds	r3, #1
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	e7bb      	b.n	8009090 <CaptureCallback+0x44>
 8009118:	200109ec 	.word	0x200109ec
 800911c:	200109e7 	.word	0x200109e7
 8009120:	200109e8 	.word	0x200109e8
 8009124:	200109e5 	.word	0x200109e5
 8009128:	200109e6 	.word	0x200109e6
 800912c:	200109e0 	.word	0x200109e0
 8009130:	200109e4 	.word	0x200109e4
 8009134:	445e4000 	.word	0x445e4000

08009138 <JSB_IR_RC5_Initialize>:

void JSB_IR_RC5_Initialize(TIM_HandleTypeDef *i_phTimer)
{
 8009138:	b510      	push	{r4, lr}
  phTimer = i_phTimer;
 800913a:	4c22      	ldr	r4, [pc, #136]	@ (80091c4 <JSB_IR_RC5_Initialize+0x8c>)
 800913c:	6020      	str	r0, [r4, #0]

  // Check that the timer frequency is set correctly:
  float TimerCountFrequency = (float)GetAPB1TimerClockFrequency() / ((float)phTimer->Instance->PSC + 1.0f);
 800913e:	f001 f8f9 	bl	800a334 <GetAPB1TimerClockFrequency>
 8009142:	ee07 0a10 	vmov	s14, r0
 8009146:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8009152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800915a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915e:	ee87 6a27 	vdiv.f32	s12, s14, s15
  if (!IsCloseTo_f(TimerCountFrequency / 1E6, 1.0f, 0.01f))
 8009162:	4a19      	ldr	r2, [pc, #100]	@ (80091c8 <JSB_IR_RC5_Initialize+0x90>)
 8009164:	ee16 1a90 	vmov	r1, s13
 8009168:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80091cc <JSB_IR_RC5_Initialize+0x94>
 800916c:	eec6 7a27 	vdiv.f32	s15, s12, s15
 8009170:	ee17 0a90 	vmov	r0, s15
 8009174:	f7ff ff40 	bl	8008ff8 <IsCloseTo_f>
 8009178:	b1d8      	cbz	r0, 80091b2 <JSB_IR_RC5_Initialize+0x7a>
    Error_Handler();

  if (HAL_TIM_Base_Start_IT(phTimer))
 800917a:	4b12      	ldr	r3, [pc, #72]	@ (80091c4 <JSB_IR_RC5_Initialize+0x8c>)
 800917c:	6818      	ldr	r0, [r3, #0]
 800917e:	f7fb fdd7 	bl	8004d30 <HAL_TIM_Base_Start_IT>
 8009182:	b9c8      	cbnz	r0, 80091b8 <JSB_IR_RC5_Initialize+0x80>
    Error_Handler();
  if (HAL_TIM_IC_Start_IT(phTimer, TIM_CHANNEL_1)) // Assumes channel 1.
 8009184:	2100      	movs	r1, #0
 8009186:	4b0f      	ldr	r3, [pc, #60]	@ (80091c4 <JSB_IR_RC5_Initialize+0x8c>)
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	f7fc fb05 	bl	8005798 <HAL_TIM_IC_Start_IT>
 800918e:	b9b0      	cbnz	r0, 80091be <JSB_IR_RC5_Initialize+0x86>
    Error_Handler();

  __HAL_TIM_URS_ENABLE(phTimer); // Prevent HAL_TIM_PeriodElapsedCallback() being called when counter is reset by input.
 8009190:	4c0c      	ldr	r4, [pc, #48]	@ (80091c4 <JSB_IR_RC5_Initialize+0x8c>)
 8009192:	6820      	ldr	r0, [r4, #0]
 8009194:	6802      	ldr	r2, [r0, #0]
 8009196:	6813      	ldr	r3, [r2, #0]
 8009198:	f043 0304 	orr.w	r3, r3, #4
 800919c:	6013      	str	r3, [r2, #0]

  HAL_TIM_RegisterCallback(phTimer, HAL_TIM_PERIOD_ELAPSED_CB_ID, &PeriodElapsedCallback);
 800919e:	4a0c      	ldr	r2, [pc, #48]	@ (80091d0 <JSB_IR_RC5_Initialize+0x98>)
 80091a0:	210e      	movs	r1, #14
 80091a2:	f7fb fef1 	bl	8004f88 <HAL_TIM_RegisterCallback>
  HAL_TIM_RegisterCallback(phTimer, HAL_TIM_IC_CAPTURE_CB_ID, &CaptureCallback);
 80091a6:	4a0b      	ldr	r2, [pc, #44]	@ (80091d4 <JSB_IR_RC5_Initialize+0x9c>)
 80091a8:	2112      	movs	r1, #18
 80091aa:	6820      	ldr	r0, [r4, #0]
 80091ac:	f7fb feec 	bl	8004f88 <HAL_TIM_RegisterCallback>
}
 80091b0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80091b2:	f005 fb8f 	bl	800e8d4 <Error_Handler>
 80091b6:	e7e0      	b.n	800917a <JSB_IR_RC5_Initialize+0x42>
    Error_Handler();
 80091b8:	f005 fb8c 	bl	800e8d4 <Error_Handler>
 80091bc:	e7e2      	b.n	8009184 <JSB_IR_RC5_Initialize+0x4c>
    Error_Handler();
 80091be:	f005 fb89 	bl	800e8d4 <Error_Handler>
 80091c2:	e7e5      	b.n	8009190 <JSB_IR_RC5_Initialize+0x58>
 80091c4:	200109ec 	.word	0x200109ec
 80091c8:	3c23d70a 	.word	0x3c23d70a
 80091cc:	49742400 	.word	0x49742400
 80091d0:	0800901d 	.word	0x0800901d
 80091d4:	0800904d 	.word	0x0800904d

080091d8 <JSB_IR_RC5_GetIfAvailable>:

uint8_t JSB_IR_RC5_GetIfAvailable(uint8_t *o_Address, uint8_t *o_Command, uint8_t *o_Toggle, uint8_t *o_Error)
{
 80091d8:	b410      	push	{r4}
  if (Decoder_State != stReceived)
 80091da:	4c0e      	ldr	r4, [pc, #56]	@ (8009214 <JSB_IR_RC5_GetIfAvailable+0x3c>)
 80091dc:	7824      	ldrb	r4, [r4, #0]
 80091de:	2c02      	cmp	r4, #2
 80091e0:	d115      	bne.n	800920e <JSB_IR_RC5_GetIfAvailable+0x36>
    return 0;

  *o_Address = (Decoder_Bits >> 6) & 0x1F;
 80091e2:	4c0d      	ldr	r4, [pc, #52]	@ (8009218 <JSB_IR_RC5_GetIfAvailable+0x40>)
 80091e4:	6824      	ldr	r4, [r4, #0]
 80091e6:	f3c4 1c84 	ubfx	ip, r4, #6, #5
 80091ea:	f880 c000 	strb.w	ip, [r0]
  *o_Command = Decoder_Bits & 0x3F;
 80091ee:	f004 003f 	and.w	r0, r4, #63	@ 0x3f
 80091f2:	7008      	strb	r0, [r1, #0]
  *o_Toggle = (Decoder_Bits >> 11) & 0x01;
 80091f4:	f3c4 24c0 	ubfx	r4, r4, #11, #1
 80091f8:	7014      	strb	r4, [r2, #0]
  *o_Error = Decoder_Error;
 80091fa:	4a08      	ldr	r2, [pc, #32]	@ (800921c <JSB_IR_RC5_GetIfAvailable+0x44>)
 80091fc:	7812      	ldrb	r2, [r2, #0]
 80091fe:	701a      	strb	r2, [r3, #0]
  Decoder_State = stDone;
 8009200:	4b04      	ldr	r3, [pc, #16]	@ (8009214 <JSB_IR_RC5_GetIfAvailable+0x3c>)
 8009202:	2203      	movs	r2, #3
 8009204:	701a      	strb	r2, [r3, #0]
  return 1;
 8009206:	2001      	movs	r0, #1
}
 8009208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800920c:	4770      	bx	lr
    return 0;
 800920e:	2000      	movs	r0, #0
 8009210:	e7fa      	b.n	8009208 <JSB_IR_RC5_GetIfAvailable+0x30>
 8009212:	bf00      	nop
 8009214:	200109e7 	.word	0x200109e7
 8009218:	200109e0 	.word	0x200109e0
 800921c:	200109e4 	.word	0x200109e4

08009220 <CaptureCallback>:
// static uint16_t AudioInput_MeasuredSampleRate_DeltaCount = 0;
static uint32_t AudioInput_MeasuredSampleRate_FrameCounter = 0;

static void CaptureCallback(TIM_HandleTypeDef *htim)
{
  ++AudioInput_MeasuredSampleRate_FrameCounter;
 8009220:	4a02      	ldr	r2, [pc, #8]	@ (800922c <CaptureCallback+0xc>)
 8009222:	6813      	ldr	r3, [r2, #0]
 8009224:	3301      	adds	r3, #1
 8009226:	6013      	str	r3, [r2, #0]

//  uint16_t AudioInput_MeasuredSampleRate_Count;
//  AudioInput_MeasuredSampleRate_Count = __HAL_TIM_GetCounter(htim);
//  AudioInput_MeasuredSampleRate_DeltaCount = AudioInput_MeasuredSampleRate_Count - AudioInput_MeasuredSampleRate_PreviousCount;
//  AudioInput_MeasuredSampleRate_PreviousCount = AudioInput_MeasuredSampleRate_Count;
}
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	20010a00 	.word	0x20010a00

08009230 <InitializeResamplingVariables>:
  return fabs((SampleRateInQuestion / ReferenceSampleRate) - 1.0f) <= (InputSampleFrequencyCaptureHalfRangePPM / 1E6);
}

static void InitializeResamplingVariables()
{
  BufferReadPositionInitialized = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	4a08      	ldr	r2, [pc, #32]	@ (8009254 <InitializeResamplingVariables+0x24>)
 8009234:	7013      	strb	r3, [r2, #0]
  BufferReadPosition = 0.0f;
 8009236:	2200      	movs	r2, #0
 8009238:	4907      	ldr	r1, [pc, #28]	@ (8009258 <InitializeResamplingVariables+0x28>)
 800923a:	600a      	str	r2, [r1, #0]
  IntegralOfNormalizedError = 0.0f;
 800923c:	4907      	ldr	r1, [pc, #28]	@ (800925c <InitializeResamplingVariables+0x2c>)
 800923e:	600a      	str	r2, [r1, #0]
  PreviousNormalizedError = 0.0f;
 8009240:	4907      	ldr	r1, [pc, #28]	@ (8009260 <InitializeResamplingVariables+0x30>)
 8009242:	600a      	str	r2, [r1, #0]
  InputSampleRateHistory_NumValues = 0;
 8009244:	4a07      	ldr	r2, [pc, #28]	@ (8009264 <InitializeResamplingVariables+0x34>)
 8009246:	6013      	str	r3, [r2, #0]
  NumConsecutiveInputBufferReadPointerInRange = 0;
 8009248:	4a07      	ldr	r2, [pc, #28]	@ (8009268 <InitializeResamplingVariables+0x38>)
 800924a:	6013      	str	r3, [r2, #0]
  WasLocked = 0;
 800924c:	4a07      	ldr	r2, [pc, #28]	@ (800926c <InitializeResamplingVariables+0x3c>)
 800924e:	7013      	strb	r3, [r2, #0]
}
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	2001321c 	.word	0x2001321c
 8009258:	20013224 	.word	0x20013224
 800925c:	200109f8 	.word	0x200109f8
 8009260:	200109f4 	.word	0x200109f4
 8009264:	200109fc 	.word	0x200109fc
 8009268:	20013218 	.word	0x20013218
 800926c:	20013216 	.word	0x20013216

08009270 <Calculate_SPDIFRX_BufferSampleStepSize>:
{
 8009270:	b510      	push	{r4, lr}
 8009272:	ed2d 8b02 	vpush	{d8}
 8009276:	4604      	mov	r4, r0
  SPDIFRX_BufferWriteIndex = SPDIFRX_Buffer_NumSamples - 0.5f * hspdif.hdmaDrRx->Instance->NDTR; // NB: DMA counts in channel samples not LR samples. It also counts backward. It also starts at the maximum value, not one less. However, it is zero before it becomes active [PJB].
 8009278:	4b4d      	ldr	r3, [pc, #308]	@ (80093b0 <Calculate_SPDIFRX_BufferSampleStepSize+0x140>)
 800927a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	ed93 7a01 	vldr	s14, [r3, #4]
 8009282:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009286:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800928a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800928e:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80093b4 <Calculate_SPDIFRX_BufferSampleStepSize+0x144>
 8009292:	ee37 8ac7 	vsub.f32	s16, s15, s14
  if (!BufferReadPositionInitialized)
 8009296:	4b48      	ldr	r3, [pc, #288]	@ (80093b8 <Calculate_SPDIFRX_BufferSampleStepSize+0x148>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d05c      	beq.n	8009358 <Calculate_SPDIFRX_BufferSampleStepSize+0xe8>
  NumSamplesReadIsBehindWrite = SPDIFRX_BufferWriteIndex - BufferReadPosition;
 800929e:	4b47      	ldr	r3, [pc, #284]	@ (80093bc <Calculate_SPDIFRX_BufferSampleStepSize+0x14c>)
 80092a0:	edd3 7a00 	vldr	s15, [r3]
 80092a4:	ee78 7a67 	vsub.f32	s15, s16, s15
  if (NumSamplesReadIsBehindWrite < 0) NumSamplesReadIsBehindWrite += SPDIFRX_Buffer_NumSamples;
 80092a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b0:	d469      	bmi.n	8009386 <Calculate_SPDIFRX_BufferSampleStepSize+0x116>
  ActualReadLagProportion = (float)NumSamplesReadIsBehindWrite / (float)SPDIFRX_Buffer_NumSamples;
 80092b2:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80093b4 <Calculate_SPDIFRX_BufferSampleStepSize+0x144>
 80092b6:	ee87 8a87 	vdiv.f32	s16, s15, s14
  float UnclampedNormalizedError = (1.0f / (1.0f - TargetReadLagProportion)) * (ActualReadLagProportion - TargetReadLagProportion);
 80092ba:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
 80092be:	ee38 8a67 	vsub.f32	s16, s16, s15
 80092c2:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 80092c6:	ee28 8a27 	vmul.f32	s16, s16, s15
  float ClampedNormalizedError = Clamp_float(UnclampedNormalizedError, -1.0f, 1.0f);
 80092ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80092ce:	493c      	ldr	r1, [pc, #240]	@ (80093c0 <Calculate_SPDIFRX_BufferSampleStepSize+0x150>)
 80092d0:	ee18 0a10 	vmov	r0, s16
 80092d4:	f7fe ffb7 	bl	8008246 <Clamp_float>
 80092d8:	ee07 0a10 	vmov	s14, r0
  *o_InputBufferReadPointerInRange = ((UnclampedNormalizedError >= -1.0f) || (UnclampedNormalizedError <= 1.0f));
 80092dc:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80092e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80092e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e8:	db52      	blt.n	8009390 <Calculate_SPDIFRX_BufferSampleStepSize+0x120>
 80092ea:	2301      	movs	r3, #1
 80092ec:	7023      	strb	r3, [r4, #0]
  IntegralOfNormalizedError = 0.95f * IntegralOfNormalizedError + ClampedNormalizedError;
 80092ee:	4b35      	ldr	r3, [pc, #212]	@ (80093c4 <Calculate_SPDIFRX_BufferSampleStepSize+0x154>)
 80092f0:	ed93 5a00 	vldr	s10, [r3]
 80092f4:	eddf 7a34 	vldr	s15, [pc, #208]	@ 80093c8 <Calculate_SPDIFRX_BufferSampleStepSize+0x158>
 80092f8:	ee25 5a27 	vmul.f32	s10, s10, s15
 80092fc:	ee35 5a07 	vadd.f32	s10, s10, s14
 8009300:	ed83 5a00 	vstr	s10, [r3]
  SPDIFRX_BufferSampleStepSize = ((float)InputSampleRate / (float)OutputSampleRate) * (1.0f + Kp * ClampedNormalizedError + 2E-4 * IntegralOfNormalizedError);
 8009304:	4b31      	ldr	r3, [pc, #196]	@ (80093cc <Calculate_SPDIFRX_BufferSampleStepSize+0x15c>)
 8009306:	edd3 6a00 	vldr	s13, [r3]
 800930a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800930e:	4b30      	ldr	r3, [pc, #192]	@ (80093d0 <Calculate_SPDIFRX_BufferSampleStepSize+0x160>)
 8009310:	edd3 7a00 	vldr	s15, [r3]
 8009314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009318:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800931c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8009320:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80093d4 <Calculate_SPDIFRX_BufferSampleStepSize+0x164>
 8009324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009328:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800932c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009330:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8009334:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8009338:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 80093a8 <Calculate_SPDIFRX_BufferSampleStepSize+0x138>
 800933c:	ee05 7b04 	vmla.f64	d7, d5, d4
 8009340:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009344:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8009348:	4b23      	ldr	r3, [pc, #140]	@ (80093d8 <Calculate_SPDIFRX_BufferSampleStepSize+0x168>)
 800934a:	ed83 7a00 	vstr	s14, [r3]
}
 800934e:	ee17 0a10 	vmov	r0, s14
 8009352:	ecbd 8b02 	vpop	{d8}
 8009356:	bd10      	pop	{r4, pc}
    BufferReadPosition = Wrap_int(SPDIFRX_BufferWriteIndex - TargetReadLagProportion * SPDIFRX_Buffer_NumSamples, SPDIFRX_Buffer_NumSamples);
 8009358:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80093dc <Calculate_SPDIFRX_BufferSampleStepSize+0x16c>
 800935c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8009360:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8009364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009368:	ee17 0a90 	vmov	r0, s15
 800936c:	f7fe ff83 	bl	8008276 <Wrap_int>
 8009370:	ee07 0a90 	vmov	s15, r0
 8009374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009378:	4b10      	ldr	r3, [pc, #64]	@ (80093bc <Calculate_SPDIFRX_BufferSampleStepSize+0x14c>)
 800937a:	edc3 7a00 	vstr	s15, [r3]
    BufferReadPositionInitialized = 1;
 800937e:	4b0e      	ldr	r3, [pc, #56]	@ (80093b8 <Calculate_SPDIFRX_BufferSampleStepSize+0x148>)
 8009380:	2201      	movs	r2, #1
 8009382:	701a      	strb	r2, [r3, #0]
 8009384:	e78b      	b.n	800929e <Calculate_SPDIFRX_BufferSampleStepSize+0x2e>
  if (NumSamplesReadIsBehindWrite < 0) NumSamplesReadIsBehindWrite += SPDIFRX_Buffer_NumSamples;
 8009386:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80093b4 <Calculate_SPDIFRX_BufferSampleStepSize+0x144>
 800938a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800938e:	e790      	b.n	80092b2 <Calculate_SPDIFRX_BufferSampleStepSize+0x42>
  *o_InputBufferReadPointerInRange = ((UnclampedNormalizedError >= -1.0f) || (UnclampedNormalizedError <= 1.0f));
 8009390:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009394:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800939c:	d901      	bls.n	80093a2 <Calculate_SPDIFRX_BufferSampleStepSize+0x132>
 800939e:	2300      	movs	r3, #0
 80093a0:	e7a4      	b.n	80092ec <Calculate_SPDIFRX_BufferSampleStepSize+0x7c>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e7a2      	b.n	80092ec <Calculate_SPDIFRX_BufferSampleStepSize+0x7c>
 80093a6:	bf00      	nop
 80093a8:	eb1c432d 	.word	0xeb1c432d
 80093ac:	3f2a36e2 	.word	0x3f2a36e2
 80093b0:	20017678 	.word	0x20017678
 80093b4:	44200000 	.word	0x44200000
 80093b8:	2001321c 	.word	0x2001321c
 80093bc:	20013224 	.word	0x20013224
 80093c0:	bf800000 	.word	0xbf800000
 80093c4:	200109f8 	.word	0x200109f8
 80093c8:	3f733333 	.word	0x3f733333
 80093cc:	20010a0c 	.word	0x20010a0c
 80093d0:	20010a08 	.word	0x20010a08
 80093d4:	3a83126f 	.word	0x3a83126f
 80093d8:	20013220 	.word	0x20013220
 80093dc:	43f00000 	.word	0x43f00000

080093e0 <HAL_SPDIFRX_ErrorCallback>:
  SPDIFRX_ErrorCallbackCalled = 1;
 80093e0:	4b01      	ldr	r3, [pc, #4]	@ (80093e8 <HAL_SPDIFRX_ErrorCallback+0x8>)
 80093e2:	2201      	movs	r2, #1
 80093e4:	701a      	strb	r2, [r3, #0]
}
 80093e6:	4770      	bx	lr
 80093e8:	20010a10 	.word	0x20010a10

080093ec <SPDIFRX_GetInputSampleRate>:
}
 80093ec:	4b01      	ldr	r3, [pc, #4]	@ (80093f4 <SPDIFRX_GetInputSampleRate+0x8>)
 80093ee:	6818      	ldr	r0, [r3, #0]
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20010a0c 	.word	0x20010a0c

080093f8 <SPDIFRX_GetNumErrors>:
  *pNumTransitionErrors = SPDIFRX_NumTransitionErrors;
 80093f8:	4b04      	ldr	r3, [pc, #16]	@ (800940c <SPDIFRX_GetNumErrors+0x14>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	7003      	strb	r3, [r0, #0]
  *pNumSyncErrors = SPDIFRX_NumSyncErrors;
 80093fe:	4b04      	ldr	r3, [pc, #16]	@ (8009410 <SPDIFRX_GetNumErrors+0x18>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	700b      	strb	r3, [r1, #0]
  *pNumFrameErrors = SPDIFRX_NumFrameErrors;
 8009404:	4b03      	ldr	r3, [pc, #12]	@ (8009414 <SPDIFRX_GetNumErrors+0x1c>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	7013      	strb	r3, [r2, #0]
}
 800940a:	4770      	bx	lr
 800940c:	200109f2 	.word	0x200109f2
 8009410:	200109f1 	.word	0x200109f1
 8009414:	200109f0 	.word	0x200109f0

08009418 <SPDIFRX_CopySamplesToGivenBuffer>:
  if (DisableInterruptHandler)
 8009418:	4bb3      	ldr	r3, [pc, #716]	@ (80096e8 <SPDIFRX_CopySamplesToGivenBuffer+0x2d0>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f040 8162 	bne.w	80096e6 <SPDIFRX_CopySamplesToGivenBuffer+0x2ce>
{
 8009422:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009426:	ed2d 8b04 	vpush	{d8-d9}
 800942a:	b094      	sub	sp, #80	@ 0x50
 800942c:	4605      	mov	r5, r0
 800942e:	460e      	mov	r6, r1
  uint8_t SPDIFRX_State = hspdif.Instance->CR & 0x03;
 8009430:	4bae      	ldr	r3, [pc, #696]	@ (80096ec <SPDIFRX_CopySamplesToGivenBuffer+0x2d4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	f002 0203 	and.w	r2, r2, #3
  if ((SPDIFRX_State != 0x03) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_TERR) != RESET) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_SERR) != RESET) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_FERR) != RESET))
 800943a:	2a03      	cmp	r2, #3
 800943c:	d10b      	bne.n	8009456 <SPDIFRX_CopySamplesToGivenBuffer+0x3e>
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009444:	d107      	bne.n	8009456 <SPDIFRX_CopySamplesToGivenBuffer+0x3e>
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800944c:	d103      	bne.n	8009456 <SPDIFRX_CopySamplesToGivenBuffer+0x3e>
 800944e:	689c      	ldr	r4, [r3, #8]
 8009450:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8009454:	d02d      	beq.n	80094b2 <SPDIFRX_CopySamplesToGivenBuffer+0x9a>
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_TERR))
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800945c:	d003      	beq.n	8009466 <SPDIFRX_CopySamplesToGivenBuffer+0x4e>
      ++SPDIFRX_NumTransitionErrors;
 800945e:	49a4      	ldr	r1, [pc, #656]	@ (80096f0 <SPDIFRX_CopySamplesToGivenBuffer+0x2d8>)
 8009460:	780a      	ldrb	r2, [r1, #0]
 8009462:	3201      	adds	r2, #1
 8009464:	700a      	strb	r2, [r1, #0]
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_SERR))
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800946c:	d003      	beq.n	8009476 <SPDIFRX_CopySamplesToGivenBuffer+0x5e>
      ++SPDIFRX_NumSyncErrors;
 800946e:	49a1      	ldr	r1, [pc, #644]	@ (80096f4 <SPDIFRX_CopySamplesToGivenBuffer+0x2dc>)
 8009470:	780a      	ldrb	r2, [r1, #0]
 8009472:	3201      	adds	r2, #1
 8009474:	700a      	strb	r2, [r1, #0]
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_FERR))
 8009476:	689a      	ldr	r2, [r3, #8]
 8009478:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800947c:	d003      	beq.n	8009486 <SPDIFRX_CopySamplesToGivenBuffer+0x6e>
      ++SPDIFRX_NumFrameErrors;
 800947e:	499e      	ldr	r1, [pc, #632]	@ (80096f8 <SPDIFRX_CopySamplesToGivenBuffer+0x2e0>)
 8009480:	780a      	ldrb	r2, [r1, #0]
 8009482:	3201      	adds	r2, #1
 8009484:	700a      	strb	r2, [r1, #0]
    ReceiveErrorOccurred = 1;
 8009486:	2001      	movs	r0, #1
 8009488:	4a9c      	ldr	r2, [pc, #624]	@ (80096fc <SPDIFRX_CopySamplesToGivenBuffer+0x2e4>)
 800948a:	7010      	strb	r0, [r2, #0]
    DisableInterruptHandler = 1;
 800948c:	4a96      	ldr	r2, [pc, #600]	@ (80096e8 <SPDIFRX_CopySamplesToGivenBuffer+0x2d0>)
 800948e:	7010      	strb	r0, [r2, #0]
    __HAL_SPDIFRX_IDLE(&hspdif);
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	f022 0203 	bic.w	r2, r2, #3
 8009496:	601a      	str	r2, [r3, #0]
    SPDIFRX_MuteOutput_Callback(1); //!!! May need to sort out Tick priorities and being called on main thread and in interrupt etc.
 8009498:	f003 f986 	bl	800c7a8 <SPDIFRX_MuteOutput_Callback>
    SPDIFRX_Locked_Callback(0);
 800949c:	2000      	movs	r0, #0
 800949e:	f002 fb5b 	bl	800bb58 <SPDIFRX_Locked_Callback>
    WasLocked = 0;
 80094a2:	4b97      	ldr	r3, [pc, #604]	@ (8009700 <SPDIFRX_CopySamplesToGivenBuffer+0x2e8>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
}
 80094a8:	b014      	add	sp, #80	@ 0x50
 80094aa:	ecbd 8b04 	vpop	{d8-d9}
 80094ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  memcpy(SPDIFRX_SamplesSnapShot, SPDIFRX_IncomingSamples, sizeof(SPDIFRX_SamplesSnapShot));
 80094b2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80094b6:	4993      	ldr	r1, [pc, #588]	@ (8009704 <SPDIFRX_CopySamplesToGivenBuffer+0x2ec>)
 80094b8:	4893      	ldr	r0, [pc, #588]	@ (8009708 <SPDIFRX_CopySamplesToGivenBuffer+0x2f0>)
 80094ba:	f007 f962 	bl	8010782 <memcpy>
  SPDIFRX_BufferSampleStepSize = Calculate_SPDIFRX_BufferSampleStepSize(&InputBufferReadPointerInRange);
 80094be:	f10d 004f 	add.w	r0, sp, #79	@ 0x4f
 80094c2:	f7ff fed5 	bl	8009270 <Calculate_SPDIFRX_BufferSampleStepSize>
 80094c6:	4b91      	ldr	r3, [pc, #580]	@ (800970c <SPDIFRX_CopySamplesToGivenBuffer+0x2f4>)
 80094c8:	6018      	str	r0, [r3, #0]
  if (InputBufferReadPointerInRange)
 80094ca:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 80094ce:	b9ab      	cbnz	r3, 80094fc <SPDIFRX_CopySamplesToGivenBuffer+0xe4>
    NumConsecutiveInputBufferReadPointerInRange = 0;
 80094d0:	4b8f      	ldr	r3, [pc, #572]	@ (8009710 <SPDIFRX_CopySamplesToGivenBuffer+0x2f8>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]
  IsLocked = NumConsecutiveInputBufferReadPointerInRange >= 20; //!!! Hardwired.
 80094d6:	4b8e      	ldr	r3, [pc, #568]	@ (8009710 <SPDIFRX_CopySamplesToGivenBuffer+0x2f8>)
 80094d8:	f8d3 8000 	ldr.w	r8, [r3]
 80094dc:	f1b8 0f13 	cmp.w	r8, #19
 80094e0:	bf94      	ite	ls
 80094e2:	2700      	movls	r7, #0
 80094e4:	2701      	movhi	r7, #1
  SPDIFRX_Locked_Callback(IsLocked);
 80094e6:	4638      	mov	r0, r7
 80094e8:	f002 fb36 	bl	800bb58 <SPDIFRX_Locked_Callback>
  if (IsLocked != WasLocked)
 80094ec:	4b84      	ldr	r3, [pc, #528]	@ (8009700 <SPDIFRX_CopySamplesToGivenBuffer+0x2e8>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	42bb      	cmp	r3, r7
 80094f2:	d10b      	bne.n	800950c <SPDIFRX_CopySamplesToGivenBuffer+0xf4>
  if (AudioBufferHalf == abhSecondHalf)
 80094f4:	2e02      	cmp	r6, #2
 80094f6:	d013      	beq.n	8009520 <SPDIFRX_CopySamplesToGivenBuffer+0x108>
    SampleOffsetIndex = 0;
 80094f8:	4626      	mov	r6, r4
  for(LocalSampleIndex = 0; LocalSampleIndex < SPDIFRX_Buffer_NumSamples / 2; ++LocalSampleIndex)
 80094fa:	e02c      	b.n	8009556 <SPDIFRX_CopySamplesToGivenBuffer+0x13e>
    NumConsecutiveInputBufferReadPointerInRange = Min_int32(NumConsecutiveInputBufferReadPointerInRange + 1, 1000000);
 80094fc:	4f84      	ldr	r7, [pc, #528]	@ (8009710 <SPDIFRX_CopySamplesToGivenBuffer+0x2f8>)
 80094fe:	6838      	ldr	r0, [r7, #0]
 8009500:	4984      	ldr	r1, [pc, #528]	@ (8009714 <SPDIFRX_CopySamplesToGivenBuffer+0x2fc>)
 8009502:	3001      	adds	r0, #1
 8009504:	f7fe fe92 	bl	800822c <Min_int32>
 8009508:	6038      	str	r0, [r7, #0]
 800950a:	e7e4      	b.n	80094d6 <SPDIFRX_CopySamplesToGivenBuffer+0xbe>
    SPDIFRX_MuteOutput_Callback(!IsLocked);
 800950c:	f1b8 0f13 	cmp.w	r8, #19
 8009510:	bf8c      	ite	hi
 8009512:	2000      	movhi	r0, #0
 8009514:	2001      	movls	r0, #1
 8009516:	f003 f947 	bl	800c7a8 <SPDIFRX_MuteOutput_Callback>
    WasLocked = IsLocked;
 800951a:	4b79      	ldr	r3, [pc, #484]	@ (8009700 <SPDIFRX_CopySamplesToGivenBuffer+0x2e8>)
 800951c:	701f      	strb	r7, [r3, #0]
 800951e:	e7e9      	b.n	80094f4 <SPDIFRX_CopySamplesToGivenBuffer+0xdc>
    SampleOffsetIndex = SPDIFRX_Buffer_NumSamples / 2;
 8009520:	f44f 76a0 	mov.w	r6, #320	@ 0x140
 8009524:	e017      	b.n	8009556 <SPDIFRX_CopySamplesToGivenBuffer+0x13e>
    TargetSample.Left = TargetSample.Left / 256;
 8009526:	f102 01ff 	add.w	r1, r2, #255	@ 0xff
 800952a:	e0c2      	b.n	80096b2 <SPDIFRX_CopySamplesToGivenBuffer+0x29a>
    TargetSample.Right = TargetSample.Right / 256;
 800952c:	f103 02ff 	add.w	r2, r3, #255	@ 0xff
 8009530:	e0c5      	b.n	80096be <SPDIFRX_CopySamplesToGivenBuffer+0x2a6>
      BufferReadPosition -= SPDIFRX_Buffer_NumSamples;
 8009532:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8009718 <SPDIFRX_CopySamplesToGivenBuffer+0x300>
 8009536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800953a:	4b78      	ldr	r3, [pc, #480]	@ (800971c <SPDIFRX_CopySamplesToGivenBuffer+0x304>)
 800953c:	edc3 7a00 	vstr	s15, [r3]
    while (BufferReadPosition >= SPDIFRX_Buffer_NumSamples)
 8009540:	4b76      	ldr	r3, [pc, #472]	@ (800971c <SPDIFRX_CopySamplesToGivenBuffer+0x304>)
 8009542:	edd3 7a00 	vldr	s15, [r3]
 8009546:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8009718 <SPDIFRX_CopySamplesToGivenBuffer+0x300>
 800954a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800954e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009552:	daee      	bge.n	8009532 <SPDIFRX_CopySamplesToGivenBuffer+0x11a>
  for(LocalSampleIndex = 0; LocalSampleIndex < SPDIFRX_Buffer_NumSamples / 2; ++LocalSampleIndex)
 8009554:	3401      	adds	r4, #1
 8009556:	f5b4 7fa0 	cmp.w	r4, #320	@ 0x140
 800955a:	d2a5      	bcs.n	80094a8 <SPDIFRX_CopySamplesToGivenBuffer+0x90>
    GlobalSampleIndex = SampleOffsetIndex + LocalSampleIndex;
 800955c:	1937      	adds	r7, r6, r4
    BufferReadPosition_Fractional = modf(BufferReadPosition, &BufferReadPosition_Integral);
 800955e:	4b6f      	ldr	r3, [pc, #444]	@ (800971c <SPDIFRX_CopySamplesToGivenBuffer+0x304>)
 8009560:	edd3 7a00 	vldr	s15, [r3]
 8009564:	aa06      	add	r2, sp, #24
 8009566:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800956a:	ec51 0b17 	vmov	r0, r1, d7
 800956e:	f007 f917 	bl	80107a0 <modf>
 8009572:	ec41 0b19 	vmov	d9, r0, r1
    SourceSampleIndex0 = Wrap_int((int)(BufferReadPosition_Integral) - 1, SPDIFRX_Buffer_NumSamples);
 8009576:	ed9d 7b06 	vldr	d7, [sp, #24]
 800957a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800957e:	ee17 0a90 	vmov	r0, s15
 8009582:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8009586:	3801      	subs	r0, #1
 8009588:	f7fe fe75 	bl	8008276 <Wrap_int>
 800958c:	4682      	mov	sl, r0
    SourceSampleIndex1 = Wrap_int(SourceSampleIndex0 + 1, SPDIFRX_Buffer_NumSamples);
 800958e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8009592:	3001      	adds	r0, #1
 8009594:	f7fe fe6f 	bl	8008276 <Wrap_int>
 8009598:	4681      	mov	r9, r0
    SourceSampleIndex2 = Wrap_int(SourceSampleIndex1 + 1, SPDIFRX_Buffer_NumSamples);
 800959a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800959e:	3001      	adds	r0, #1
 80095a0:	f7fe fe69 	bl	8008276 <Wrap_int>
 80095a4:	4680      	mov	r8, r0
    SourceSampleIndex3 = Wrap_int(SourceSampleIndex2 + 1, SPDIFRX_Buffer_NumSamples);
 80095a6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80095aa:	3001      	adds	r0, #1
 80095ac:	f7fe fe63 	bl	8008276 <Wrap_int>
 80095b0:	4602      	mov	r2, r0
    SourceSample0 = SPDIFRX_SamplesSnapShot[SourceSampleIndex0];
 80095b2:	4b55      	ldr	r3, [pc, #340]	@ (8009708 <SPDIFRX_CopySamplesToGivenBuffer+0x2f0>)
 80095b4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80095b8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80095bc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80095c0:	e88c 0003 	stmia.w	ip, {r0, r1}
    SourceSample1 = SPDIFRX_SamplesSnapShot[SourceSampleIndex1];
 80095c4:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80095c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80095cc:	e899 0003 	ldmia.w	r9, {r0, r1}
 80095d0:	e88c 0003 	stmia.w	ip, {r0, r1}
    SourceSample2 = SPDIFRX_SamplesSnapShot[SourceSampleIndex2];
 80095d4:	f10d 0c34 	add.w	ip, sp, #52	@ 0x34
 80095d8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80095dc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80095e0:	e88c 0003 	stmia.w	ip, {r0, r1}
    SourceSample3 = SPDIFRX_SamplesSnapShot[SourceSampleIndex3];
 80095e4:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 80095e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80095f0:	e88c 0003 	stmia.w	ip, {r0, r1}
    TargetSample.Left = CubicInterpolate(SourceSample0.Left, SourceSample1.Left, SourceSample2.Left, SourceSample3.Left, BufferReadPosition_Fractional);
 80095f4:	ed8d 9b04 	vstr	d9, [sp, #16]
 80095f8:	ee07 0a90 	vmov	s15, r0
 80095fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009600:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009604:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8009608:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800960c:	ed8d 7b00 	vstr	d7, [sp]
 8009610:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8009614:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009618:	ec53 2b17 	vmov	r2, r3, d7
 800961c:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 8009620:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009624:	ec51 0b17 	vmov	r0, r1, d7
 8009628:	f7fe fe3d 	bl	80082a6 <CubicInterpolate>
 800962c:	ec41 0b18 	vmov	d8, r0, r1
 8009630:	eebd 8bc8 	vcvt.s32.f64	s16, d8
 8009634:	ed8d 8a09 	vstr	s16, [sp, #36]	@ 0x24
    TargetSample.Right = CubicInterpolate(SourceSample0.Right, SourceSample1.Right, SourceSample2.Right, SourceSample3.Right, BufferReadPosition_Fractional);
 8009638:	ed8d 9b04 	vstr	d9, [sp, #16]
 800963c:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8009640:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009644:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009648:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 800964c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009650:	ed8d 7b00 	vstr	d7, [sp]
 8009654:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8009658:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800965c:	ec53 2b17 	vmov	r2, r3, d7
 8009660:	eddd 7a12 	vldr	s15, [sp, #72]	@ 0x48
 8009664:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009668:	ec51 0b17 	vmov	r0, r1, d7
 800966c:	f7fe fe1b 	bl	80082a6 <CubicInterpolate>
 8009670:	ec41 0b17 	vmov	d7, r0, r1
 8009674:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009678:	ed8d 7a0a 	vstr	s14, [sp, #40]	@ 0x28
    TargetSample.Left *= SPDIFRX_TransferGain;
 800967c:	4b28      	ldr	r3, [pc, #160]	@ (8009720 <SPDIFRX_CopySamplesToGivenBuffer+0x308>)
 800967e:	edd3 7a00 	vldr	s15, [r3]
 8009682:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8009686:	ee28 8a27 	vmul.f32	s16, s16, s15
 800968a:	eefd 6ac8 	vcvt.s32.f32	s13, s16
 800968e:	ee16 2a90 	vmov	r2, s13
 8009692:	edcd 6a09 	vstr	s13, [sp, #36]	@ 0x24
    TargetSample.Right *= SPDIFRX_TransferGain;
 8009696:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800969a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800969e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80096a2:	ee17 3a90 	vmov	r3, s15
 80096a6:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
    TargetSample.Left = TargetSample.Left / 256;
 80096aa:	4611      	mov	r1, r2
 80096ac:	2a00      	cmp	r2, #0
 80096ae:	f6ff af3a 	blt.w	8009526 <SPDIFRX_CopySamplesToGivenBuffer+0x10e>
 80096b2:	1209      	asrs	r1, r1, #8
 80096b4:	9109      	str	r1, [sp, #36]	@ 0x24
    TargetSample.Right = TargetSample.Right / 256;
 80096b6:	461a      	mov	r2, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f6ff af37 	blt.w	800952c <SPDIFRX_CopySamplesToGivenBuffer+0x114>
 80096be:	1212      	asrs	r2, r2, #8
 80096c0:	920a      	str	r2, [sp, #40]	@ 0x28
    pOutputBuffer[GlobalSampleIndex] = TargetSample;
 80096c2:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 80096c6:	ab09      	add	r3, sp, #36	@ 0x24
 80096c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80096cc:	e887 0003 	stmia.w	r7, {r0, r1}
    BufferReadPosition += SPDIFRX_BufferSampleStepSize;
 80096d0:	4b12      	ldr	r3, [pc, #72]	@ (800971c <SPDIFRX_CopySamplesToGivenBuffer+0x304>)
 80096d2:	edd3 7a00 	vldr	s15, [r3]
 80096d6:	4a0d      	ldr	r2, [pc, #52]	@ (800970c <SPDIFRX_CopySamplesToGivenBuffer+0x2f4>)
 80096d8:	ed92 7a00 	vldr	s14, [r2]
 80096dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80096e0:	edc3 7a00 	vstr	s15, [r3]
    while (BufferReadPosition >= SPDIFRX_Buffer_NumSamples)
 80096e4:	e72c      	b.n	8009540 <SPDIFRX_CopySamplesToGivenBuffer+0x128>
 80096e6:	4770      	bx	lr
 80096e8:	20013215 	.word	0x20013215
 80096ec:	20017678 	.word	0x20017678
 80096f0:	200109f2 	.word	0x200109f2
 80096f4:	200109f1 	.word	0x200109f1
 80096f8:	200109f0 	.word	0x200109f0
 80096fc:	20013214 	.word	0x20013214
 8009700:	20013216 	.word	0x20013216
 8009704:	20011e14 	.word	0x20011e14
 8009708:	20010a14 	.word	0x20010a14
 800970c:	20013220 	.word	0x20013220
 8009710:	20013218 	.word	0x20013218
 8009714:	000f4240 	.word	0x000f4240
 8009718:	44200000 	.word	0x44200000
 800971c:	20013224 	.word	0x20013224
 8009720:	20000034 	.word	0x20000034

08009724 <MeasureInputSampleRate>:
{
 8009724:	b538      	push	{r3, r4, r5, lr}
  AudioInput_MeasuredSampleRate_FrameCounter = 0;
 8009726:	4d0e      	ldr	r5, [pc, #56]	@ (8009760 <MeasureInputSampleRate+0x3c>)
 8009728:	2300      	movs	r3, #0
 800972a:	602b      	str	r3, [r5, #0]
  uint32_t StartTick = HAL_GetTick();
 800972c:	f7f6 ff9e 	bl	800066c <HAL_GetTick>
 8009730:	4604      	mov	r4, r0
  HAL_Delay(50);
 8009732:	2032      	movs	r0, #50	@ 0x32
 8009734:	f7f6 ffa0 	bl	8000678 <HAL_Delay>
  uint32_t EndTick = HAL_GetTick();
 8009738:	f7f6 ff98 	bl	800066c <HAL_GetTick>
  return 1000.0f * AudioInput_MeasuredSampleRate_FrameCounter / (EndTick - StartTick);
 800973c:	ed95 7a00 	vldr	s14, [r5]
 8009740:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009744:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8009764 <MeasureInputSampleRate+0x40>
 8009748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800974c:	1b00      	subs	r0, r0, r4
 800974e:	ee07 0a90 	vmov	s15, r0
 8009752:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8009756:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800975a:	ee17 0a90 	vmov	r0, s15
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	20010a00 	.word	0x20010a00
 8009764:	447a0000 	.word	0x447a0000

08009768 <IsSampleRateInRange>:
{
 8009768:	ee06 0a90 	vmov	s13, r0
 800976c:	ee07 1a90 	vmov	s15, r1
  return fabs((SampleRateInQuestion / ReferenceSampleRate) - 1.0f) <= (InputSampleFrequencyCaptureHalfRangePPM / 1E6);
 8009770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009774:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009778:	ee37 7a67 	vsub.f32	s14, s14, s15
 800977c:	eeb0 7ac7 	vabs.f32	s14, s14
 8009780:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8009784:	ed9f 6b04 	vldr	d6, [pc, #16]	@ 8009798 <IsSampleRateInRange+0x30>
 8009788:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800978c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8009790:	bf94      	ite	ls
 8009792:	2001      	movls	r0, #1
 8009794:	2000      	movhi	r0, #0
 8009796:	4770      	bx	lr
 8009798:	d2f1a9fc 	.word	0xd2f1a9fc
 800979c:	3f50624d 	.word	0x3f50624d

080097a0 <ClearBuffer>:

void ClearBuffer()
{
 80097a0:	b082      	sub	sp, #8
  AudioSample24_t ZeroSample={0,0};
 80097a2:	2200      	movs	r2, #0
 80097a4:	9200      	str	r2, [sp, #0]
 80097a6:	9201      	str	r2, [sp, #4]
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 80097a8:	e008      	b.n	80097bc <ClearBuffer+0x1c>
    SPDIFRX_IncomingSamples[SampleIndex] = ZeroSample;
 80097aa:	4b07      	ldr	r3, [pc, #28]	@ (80097c8 <ClearBuffer+0x28>)
 80097ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097b0:	a902      	add	r1, sp, #8
 80097b2:	e911 0003 	ldmdb	r1, {r0, r1}
 80097b6:	e883 0003 	stmia.w	r3, {r0, r1}
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 80097ba:	3201      	adds	r2, #1
 80097bc:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 80097c0:	d3f3      	bcc.n	80097aa <ClearBuffer+0xa>
}
 80097c2:	b002      	add	sp, #8
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	20011e14 	.word	0x20011e14

080097cc <SPDIFRX_SelectInput>:

void SPDIFRX_SelectInput(uint32_t Value)
{
 80097cc:	b508      	push	{r3, lr}
  uint32_t InputSelection = 0;

  switch(Value)
 80097ce:	2803      	cmp	r0, #3
 80097d0:	d809      	bhi.n	80097e6 <SPDIFRX_SelectInput+0x1a>
 80097d2:	e8df f000 	tbb	[pc, r0]
 80097d6:	0c0e      	.short	0x0c0e
 80097d8:	0502      	.short	0x0502
  {
    case 0: InputSelection = SPDIFRX_INPUT_IN0; break;
    case 1: InputSelection = SPDIFRX_INPUT_IN1; break;
    case 2: InputSelection = SPDIFRX_INPUT_IN2; break;
 80097da:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80097de:	e008      	b.n	80097f2 <SPDIFRX_SelectInput+0x26>
    case 3: InputSelection = SPDIFRX_INPUT_IN3; break;
 80097e0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80097e4:	e005      	b.n	80097f2 <SPDIFRX_SelectInput+0x26>

    default: Error_Handler();
 80097e6:	f005 f875 	bl	800e8d4 <Error_Handler>
  uint32_t InputSelection = 0;
 80097ea:	2000      	movs	r0, #0
 80097ec:	e001      	b.n	80097f2 <SPDIFRX_SelectInput+0x26>
    case 1: InputSelection = SPDIFRX_INPUT_IN1; break;
 80097ee:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  }

  hspdif.Instance->CR = (hspdif.Instance->CR & ~SPDIFRX_INPUT_IN3) | InputSelection;
 80097f2:	4b04      	ldr	r3, [pc, #16]	@ (8009804 <SPDIFRX_SelectInput+0x38>)
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	6813      	ldr	r3, [r2, #0]
 80097f8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80097fc:	4303      	orrs	r3, r0
 80097fe:	6013      	str	r3, [r2, #0]
}
 8009800:	bd08      	pop	{r3, pc}
 8009802:	bf00      	nop
 8009804:	20017678 	.word	0x20017678

08009808 <SPDIFRX_IsStarted>:

uint8_t SPDIFRX_IsStarted()
{
  return Started;
}
 8009808:	4b01      	ldr	r3, [pc, #4]	@ (8009810 <SPDIFRX_IsStarted+0x8>)
 800980a:	7818      	ldrb	r0, [r3, #0]
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	20013228 	.word	0x20013228

08009814 <SPDIFRX_Stop>:

  return 1;
}

void SPDIFRX_Stop()
{
 8009814:	b510      	push	{r4, lr}
  Started = 0;
 8009816:	2000      	movs	r0, #0
 8009818:	4b0c      	ldr	r3, [pc, #48]	@ (800984c <SPDIFRX_Stop+0x38>)
 800981a:	7018      	strb	r0, [r3, #0]

  DisableInterruptHandler = 1;
 800981c:	4b0c      	ldr	r3, [pc, #48]	@ (8009850 <SPDIFRX_Stop+0x3c>)
 800981e:	2201      	movs	r2, #1
 8009820:	701a      	strb	r2, [r3, #0]
  SPDIFRX_Locked_Callback(0);
 8009822:	f002 f999 	bl	800bb58 <SPDIFRX_Locked_Callback>
  SPDIFRX_ClearOutputBuffer();
 8009826:	f002 ff53 	bl	800c6d0 <SPDIFRX_ClearOutputBuffer>
  __HAL_SPDIFRX_IDLE(&hspdif);
 800982a:	4c0a      	ldr	r4, [pc, #40]	@ (8009854 <SPDIFRX_Stop+0x40>)
 800982c:	6822      	ldr	r2, [r4, #0]
 800982e:	6813      	ldr	r3, [r2, #0]
 8009830:	f023 0303 	bic.w	r3, r3, #3
 8009834:	6013      	str	r3, [r2, #0]
  ClearBuffer();
 8009836:	f7ff ffb3 	bl	80097a0 <ClearBuffer>

  // SPDIFRX_MuteOutput_Callback(1); !!!Clashes with call from interrupt handler:

  // Reset SPDIFRX.
  EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort();
 800983a:	f7fa f9d1 	bl	8003be0 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort>
  EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR();
 800983e:	f7fa f9d0 	bl	8003be2 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR>
  HAL_SPDIFRX_DMAStop(&hspdif);
 8009842:	4620      	mov	r0, r4
 8009844:	f7fa f9ce 	bl	8003be4 <HAL_SPDIFRX_DMAStop>
}
 8009848:	bd10      	pop	{r4, pc}
 800984a:	bf00      	nop
 800984c:	20013228 	.word	0x20013228
 8009850:	20013215 	.word	0x20013215
 8009854:	20017678 	.word	0x20017678

08009858 <SPDIFRX_Start>:
{
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	460c      	mov	r4, r1
 800985c:	4615      	mov	r5, r2
 800985e:	461e      	mov	r6, r3
  EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE();
 8009860:	f7fa f8d6 	bl	8003a10 <EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE>
  SPDIFRX_Stop(); // Get the receiver into a known state e.g. after a failed (timed out) start because there was no input.
 8009864:	f7ff ffd6 	bl	8009814 <SPDIFRX_Stop>
  InitializeResamplingVariables();
 8009868:	f7ff fce2 	bl	8009230 <InitializeResamplingVariables>
  if (hspdif.State != HAL_SPDIFRX_STATE_READY)
 800986c:	4b37      	ldr	r3, [pc, #220]	@ (800994c <SPDIFRX_Start+0xf4>)
 800986e:	f893 1045 	ldrb.w	r1, [r3, #69]	@ 0x45
 8009872:	b2c9      	uxtb	r1, r1
 8009874:	2901      	cmp	r1, #1
 8009876:	d146      	bne.n	8009906 <SPDIFRX_Start+0xae>
  HAL_TIM_RegisterCallback(&htim11, HAL_TIM_IC_CAPTURE_CB_ID, &CaptureCallback);
 8009878:	4f35      	ldr	r7, [pc, #212]	@ (8009950 <SPDIFRX_Start+0xf8>)
 800987a:	4a36      	ldr	r2, [pc, #216]	@ (8009954 <SPDIFRX_Start+0xfc>)
 800987c:	2112      	movs	r1, #18
 800987e:	4638      	mov	r0, r7
 8009880:	f7fb fb82 	bl	8004f88 <HAL_TIM_RegisterCallback>
  if (HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1))
 8009884:	2100      	movs	r1, #0
 8009886:	4638      	mov	r0, r7
 8009888:	f7fb ff86 	bl	8005798 <HAL_TIM_IC_Start_IT>
 800988c:	2800      	cmp	r0, #0
 800988e:	d145      	bne.n	800991c <SPDIFRX_Start+0xc4>
  SPDIFRX_SelectInput(InputChannel);
 8009890:	4620      	mov	r0, r4
 8009892:	f7ff ff9b 	bl	80097cc <SPDIFRX_SelectInput>
  SPDIFRX_ErrorCallbackCalled = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	4a2f      	ldr	r2, [pc, #188]	@ (8009958 <SPDIFRX_Start+0x100>)
 800989a:	7013      	strb	r3, [r2, #0]
  DisableInterruptHandler = 1;
 800989c:	4a2f      	ldr	r2, [pc, #188]	@ (800995c <SPDIFRX_Start+0x104>)
 800989e:	2101      	movs	r1, #1
 80098a0:	7011      	strb	r1, [r2, #0]
  ReceiveErrorOccurred = 0;
 80098a2:	4a2f      	ldr	r2, [pc, #188]	@ (8009960 <SPDIFRX_Start+0x108>)
 80098a4:	7013      	strb	r3, [r2, #0]
  HALResult = HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, (uint32_t *)SPDIFRX_IncomingSamples, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples);
 80098a6:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80098aa:	492e      	ldr	r1, [pc, #184]	@ (8009964 <SPDIFRX_Start+0x10c>)
 80098ac:	4827      	ldr	r0, [pc, #156]	@ (800994c <SPDIFRX_Start+0xf4>)
 80098ae:	f7fa f8e9 	bl	8003a84 <HAL_SPDIFRX_ReceiveDataFlow_DMA>
  if (HALResult == HAL_TIMEOUT)
 80098b2:	2803      	cmp	r0, #3
 80098b4:	d045      	beq.n	8009942 <SPDIFRX_Start+0xea>
  HAL_Delay(50); // Wait for receiver to settle.
 80098b6:	2032      	movs	r0, #50	@ 0x32
 80098b8:	f7f6 fede 	bl	8000678 <HAL_Delay>
  AudioInput_MeasuredSampleRate =  MeasureInputSampleRate();
 80098bc:	f7ff ff32 	bl	8009724 <MeasureInputSampleRate>
 80098c0:	4604      	mov	r4, r0
 80098c2:	4b29      	ldr	r3, [pc, #164]	@ (8009968 <SPDIFRX_Start+0x110>)
 80098c4:	6018      	str	r0, [r3, #0]
  if (IsSampleRateInRange(AudioInput_MeasuredSampleRate, SAI_AUDIO_FREQUENCY_44K))
 80098c6:	4929      	ldr	r1, [pc, #164]	@ (800996c <SPDIFRX_Start+0x114>)
 80098c8:	f7ff ff4e 	bl	8009768 <IsSampleRateInRange>
 80098cc:	b348      	cbz	r0, 8009922 <SPDIFRX_Start+0xca>
    InputSampleRate = SAI_AUDIO_FREQUENCY_44K;
 80098ce:	4b28      	ldr	r3, [pc, #160]	@ (8009970 <SPDIFRX_Start+0x118>)
 80098d0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80098d4:	601a      	str	r2, [r3, #0]
  if (ForceOutputSampleRate)
 80098d6:	b37d      	cbz	r5, 8009938 <SPDIFRX_Start+0xe0>
    OutputSampleRate = ForcedOutputSampleRate;
 80098d8:	4b26      	ldr	r3, [pc, #152]	@ (8009974 <SPDIFRX_Start+0x11c>)
 80098da:	601e      	str	r6, [r3, #0]
  SPDIFRX_SetOutputSampleRate_Callback(OutputSampleRate);
 80098dc:	4b25      	ldr	r3, [pc, #148]	@ (8009974 <SPDIFRX_Start+0x11c>)
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	f003 f800 	bl	800c8e4 <SPDIFRX_SetOutputSampleRate_Callback>
  SPDIFRX_Stop(); // Get the receiver into a known state e.g. after a failed (timed out) start because there was no input.
 80098e4:	f7ff ff96 	bl	8009814 <SPDIFRX_Stop>
  HALResult = HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, (uint32_t *)SPDIFRX_IncomingSamples, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples);
 80098e8:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80098ec:	491d      	ldr	r1, [pc, #116]	@ (8009964 <SPDIFRX_Start+0x10c>)
 80098ee:	4817      	ldr	r0, [pc, #92]	@ (800994c <SPDIFRX_Start+0xf4>)
 80098f0:	f7fa f8c8 	bl	8003a84 <HAL_SPDIFRX_ReceiveDataFlow_DMA>
  if (HALResult == HAL_TIMEOUT)
 80098f4:	2803      	cmp	r0, #3
 80098f6:	d026      	beq.n	8009946 <SPDIFRX_Start+0xee>
  DisableInterruptHandler = 0;
 80098f8:	4b18      	ldr	r3, [pc, #96]	@ (800995c <SPDIFRX_Start+0x104>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	701a      	strb	r2, [r3, #0]
  Started = 1;
 80098fe:	2001      	movs	r0, #1
 8009900:	4b1d      	ldr	r3, [pc, #116]	@ (8009978 <SPDIFRX_Start+0x120>)
 8009902:	7018      	strb	r0, [r3, #0]
}
 8009904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_DMA_Abort(hspdif.hdmaDrRx); // *** JSB Cube bug fix!!! ***
 8009906:	461f      	mov	r7, r3
 8009908:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800990a:	f7f7 f849 	bl	80009a0 <HAL_DMA_Abort>
    HAL_DMA_Abort(hspdif.hdmaCsRx); // *** JSB Cube bug fix!!! ***
 800990e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009910:	f7f7 f846 	bl	80009a0 <HAL_DMA_Abort>
    HAL_SPDIFRX_DMAStop(&hspdif);
 8009914:	4638      	mov	r0, r7
 8009916:	f7fa f965 	bl	8003be4 <HAL_SPDIFRX_DMAStop>
 800991a:	e7ad      	b.n	8009878 <SPDIFRX_Start+0x20>
    Error_Handler();
 800991c:	f004 ffda 	bl	800e8d4 <Error_Handler>
 8009920:	e7b6      	b.n	8009890 <SPDIFRX_Start+0x38>
  else if (IsSampleRateInRange(AudioInput_MeasuredSampleRate, SAI_AUDIO_FREQUENCY_48K))
 8009922:	4916      	ldr	r1, [pc, #88]	@ (800997c <SPDIFRX_Start+0x124>)
 8009924:	4620      	mov	r0, r4
 8009926:	f7ff ff1f 	bl	8009768 <IsSampleRateInRange>
 800992a:	2800      	cmp	r0, #0
 800992c:	d0ea      	beq.n	8009904 <SPDIFRX_Start+0xac>
    InputSampleRate = SAI_AUDIO_FREQUENCY_48K;
 800992e:	4b10      	ldr	r3, [pc, #64]	@ (8009970 <SPDIFRX_Start+0x118>)
 8009930:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	e7ce      	b.n	80098d6 <SPDIFRX_Start+0x7e>
    OutputSampleRate = InputSampleRate;
 8009938:	4b0d      	ldr	r3, [pc, #52]	@ (8009970 <SPDIFRX_Start+0x118>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	4b0d      	ldr	r3, [pc, #52]	@ (8009974 <SPDIFRX_Start+0x11c>)
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	e7cc      	b.n	80098dc <SPDIFRX_Start+0x84>
    return 0;
 8009942:	2000      	movs	r0, #0
 8009944:	e7de      	b.n	8009904 <SPDIFRX_Start+0xac>
    return 0;
 8009946:	2000      	movs	r0, #0
 8009948:	e7dc      	b.n	8009904 <SPDIFRX_Start+0xac>
 800994a:	bf00      	nop
 800994c:	20017678 	.word	0x20017678
 8009950:	200179cc 	.word	0x200179cc
 8009954:	08009221 	.word	0x08009221
 8009958:	20010a10 	.word	0x20010a10
 800995c:	20013215 	.word	0x20013215
 8009960:	20013214 	.word	0x20013214
 8009964:	20011e14 	.word	0x20011e14
 8009968:	20010a04 	.word	0x20010a04
 800996c:	472c4400 	.word	0x472c4400
 8009970:	20010a0c 	.word	0x20010a0c
 8009974:	20010a08 	.word	0x20010a08
 8009978:	20013228 	.word	0x20013228
 800997c:	473b8000 	.word	0x473b8000

08009980 <SPDIFRX_HasReceiveErrorOccurred>:

uint8_t SPDIFRX_HasReceiveErrorOccurred()
{
  return ReceiveErrorOccurred;
}
 8009980:	4b01      	ldr	r3, [pc, #4]	@ (8009988 <SPDIFRX_HasReceiveErrorOccurred+0x8>)
 8009982:	7818      	ldrb	r0, [r3, #0]
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	20013214 	.word	0x20013214

0800998c <SPDIFRX_IsReceiving>:

uint8_t SPDIFRX_IsReceiving()
{
  return DisableInterruptHandler ? 0 : 1;
 800998c:	4b02      	ldr	r3, [pc, #8]	@ (8009998 <SPDIFRX_IsReceiving+0xc>)
 800998e:	7818      	ldrb	r0, [r3, #0]
}
 8009990:	fab0 f080 	clz	r0, r0
 8009994:	0940      	lsrs	r0, r0, #5
 8009996:	4770      	bx	lr
 8009998:	20013215 	.word	0x20013215

0800999c <HitRect>:
///////////////////////////////////////////////////////////////////////////////
// Minor standalone support functions:

static uint8_t HitRect(uint16_t X, uint16_t Y, JSB_UI_Rect_t *pRect)
{
  if ((X < pRect->Left) || (X >= pRect->Left + pRect->Width))
 800999c:	6813      	ldr	r3, [r2, #0]
 800999e:	4298      	cmp	r0, r3
 80099a0:	d30d      	bcc.n	80099be <HitRect+0x22>
{
 80099a2:	b410      	push	{r4}
  if ((X < pRect->Left) || (X >= pRect->Left + pRect->Width))
 80099a4:	6894      	ldr	r4, [r2, #8]
 80099a6:	4423      	add	r3, r4
 80099a8:	4298      	cmp	r0, r3
 80099aa:	d20a      	bcs.n	80099c2 <HitRect+0x26>
    return 0;
  if ((Y < pRect->Top) || (Y >= pRect->Top + pRect->Height))
 80099ac:	6853      	ldr	r3, [r2, #4]
 80099ae:	4299      	cmp	r1, r3
 80099b0:	d30b      	bcc.n	80099ca <HitRect+0x2e>
 80099b2:	68d2      	ldr	r2, [r2, #12]
 80099b4:	4413      	add	r3, r2
 80099b6:	4299      	cmp	r1, r3
 80099b8:	d209      	bcs.n	80099ce <HitRect+0x32>
    return 0;
  return 1;
 80099ba:	2001      	movs	r0, #1
 80099bc:	e002      	b.n	80099c4 <HitRect+0x28>
    return 0;
 80099be:	2000      	movs	r0, #0
}
 80099c0:	4770      	bx	lr
    return 0;
 80099c2:	2000      	movs	r0, #0
}
 80099c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099c8:	4770      	bx	lr
    return 0;
 80099ca:	2000      	movs	r0, #0
 80099cc:	e7fa      	b.n	80099c4 <HitRect+0x28>
 80099ce:	2000      	movs	r0, #0
 80099d0:	e7f8      	b.n	80099c4 <HitRect+0x28>

080099d2 <Interpolate_float>:

float Interpolate_float(float MinValue, float MaxValue, float Parameter)
{
 80099d2:	ee06 0a10 	vmov	s12, r0
 80099d6:	ee06 1a90 	vmov	s13, r1
 80099da:	ee07 2a90 	vmov	s15, r2
  return (1.0f - Parameter) * MinValue + Parameter * MaxValue;
 80099de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80099ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
}
 80099ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099f2:	ee17 0a90 	vmov	r0, s15
 80099f6:	4770      	bx	lr

080099f8 <JSB_UI_Page_UpdateSlideValue>:
  ILI9341_SetTextDrawMode(OriginalTextDrawMode);
  ILI9341_SetTextVerticalOrigin(OriginalTextVerticalOrigin);
}

void JSB_UI_Page_UpdateSlideValue(JSB_UI_Control_t *pControl, int16_t X, int16_t Y)
{
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4604      	mov	r4, r0
  float SliderParameter;

  if (pControl->Type == ctHorizontalSlider)
 80099fc:	7803      	ldrb	r3, [r0, #0]
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d005      	beq.n	8009a0e <JSB_UI_Page_UpdateSlideValue+0x16>
    SliderParameter = pControl->Rect.Width == 0 ? 0 : Clamp_float(((float)X - (float)pControl->Rect.Left) / (float)pControl->Rect.Width, 0.0f, 1.0f);
  else if (pControl->Type == ctVerticalSlider)
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	d10c      	bne.n	8009a20 <JSB_UI_Page_UpdateSlideValue+0x28>
    SliderParameter = pControl->Rect.Height == 0 ? 0 : Clamp_float(((float)Y - (float)pControl->Rect.Top) / (float)pControl->Rect.Height, 0.0f, 1.0f);
 8009a06:	6903      	ldr	r3, [r0, #16]
 8009a08:	bb23      	cbnz	r3, 8009a54 <JSB_UI_Page_UpdateSlideValue+0x5c>
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	e002      	b.n	8009a14 <JSB_UI_Page_UpdateSlideValue+0x1c>
    SliderParameter = pControl->Rect.Width == 0 ? 0 : Clamp_float(((float)X - (float)pControl->Rect.Left) / (float)pControl->Rect.Width, 0.0f, 1.0f);
 8009a0e:	68c3      	ldr	r3, [r0, #12]
 8009a10:	b93b      	cbnz	r3, 8009a22 <JSB_UI_Page_UpdateSlideValue+0x2a>
 8009a12:	2200      	movs	r2, #0
  else return;

  *pControl->pSliderValue = Interpolate_float(pControl->SliderMinValue, pControl->SliderMaxValue, SliderParameter);
 8009a14:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8009a16:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8009a18:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8009a1a:	f7ff ffda 	bl	80099d2 <Interpolate_float>
 8009a1e:	6028      	str	r0, [r5, #0]
}
 8009a20:	bd38      	pop	{r3, r4, r5, pc}
    SliderParameter = pControl->Rect.Width == 0 ? 0 : Clamp_float(((float)X - (float)pControl->Rect.Left) / (float)pControl->Rect.Width, 0.0f, 1.0f);
 8009a22:	ee07 1a90 	vmov	s15, r1
 8009a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a2a:	ed90 7a01 	vldr	s14, [r0, #4]
 8009a2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a36:	ee07 3a10 	vmov	s14, r3
 8009a3a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009a3e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009a42:	2100      	movs	r1, #0
 8009a44:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8009a48:	ee17 0a90 	vmov	r0, s15
 8009a4c:	f7fe fbfb 	bl	8008246 <Clamp_float>
 8009a50:	4602      	mov	r2, r0
 8009a52:	e7df      	b.n	8009a14 <JSB_UI_Page_UpdateSlideValue+0x1c>
    SliderParameter = pControl->Rect.Height == 0 ? 0 : Clamp_float(((float)Y - (float)pControl->Rect.Top) / (float)pControl->Rect.Height, 0.0f, 1.0f);
 8009a54:	ee07 2a90 	vmov	s15, r2
 8009a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a5c:	ed90 7a02 	vldr	s14, [r0, #8]
 8009a60:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a68:	ee07 3a10 	vmov	s14, r3
 8009a6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009a70:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009a74:	2100      	movs	r1, #0
 8009a76:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8009a7a:	ee17 0a90 	vmov	r0, s15
 8009a7e:	f7fe fbe2 	bl	8008246 <Clamp_float>
 8009a82:	4602      	mov	r2, r0
 8009a84:	e7c6      	b.n	8009a14 <JSB_UI_Page_UpdateSlideValue+0x1c>
	...

08009a88 <JSB_UI_Page_PressMove>:

  return 0;
}

void JSB_UI_Page_PressMove(JSB_UI_Page_t *pPage, int16_t X, int16_t Y)
{
 8009a88:	b508      	push	{r3, lr}
  if (!pPressedControl)
 8009a8a:	4b09      	ldr	r3, [pc, #36]	@ (8009ab0 <JSB_UI_Page_PressMove+0x28>)
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	b150      	cbz	r0, 8009aa6 <JSB_UI_Page_PressMove+0x1e>
    return;

  if ((pPressedControl->Type == ctHorizontalSlider) || (pPressedControl->Type == ctVerticalSlider))
 8009a90:	7803      	ldrb	r3, [r0, #0]
 8009a92:	3b02      	subs	r3, #2
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d906      	bls.n	8009aa8 <JSB_UI_Page_PressMove+0x20>
    JSB_UI_Page_UpdateSlideValue(pPressedControl, X, Y);

  if (pPressedControl->pPressMoveHandler)
 8009a9a:	4b05      	ldr	r3, [pc, #20]	@ (8009ab0 <JSB_UI_Page_PressMove+0x28>)
 8009a9c:	6818      	ldr	r0, [r3, #0]
 8009a9e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8009aa2:	b103      	cbz	r3, 8009aa6 <JSB_UI_Page_PressMove+0x1e>
    (*pPressedControl->pPressMoveHandler)(pPressedControl);
 8009aa4:	4798      	blx	r3
}
 8009aa6:	bd08      	pop	{r3, pc}
    JSB_UI_Page_UpdateSlideValue(pPressedControl, X, Y);
 8009aa8:	f7ff ffa6 	bl	80099f8 <JSB_UI_Page_UpdateSlideValue>
 8009aac:	e7f5      	b.n	8009a9a <JSB_UI_Page_PressMove+0x12>
 8009aae:	bf00      	nop
 8009ab0:	2001322c 	.word	0x2001322c

08009ab4 <JSB_UI_Page_PressUp>:

void JSB_UI_Page_PressUp()
{
  pPressedControl = NULL;
 8009ab4:	4b01      	ldr	r3, [pc, #4]	@ (8009abc <JSB_UI_Page_PressUp+0x8>)
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
}
 8009aba:	4770      	bx	lr
 8009abc:	2001322c 	.word	0x2001322c

08009ac0 <JSB_UI_CreatePage>:

JSB_UI_Page_t *JSB_UI_CreatePage()
{
 8009ac0:	b508      	push	{r3, lr}
  return calloc(1, sizeof(JSB_UI_Page_t));
 8009ac2:	214c      	movs	r1, #76	@ 0x4c
 8009ac4:	2001      	movs	r0, #1
 8009ac6:	f005 fe77 	bl	800f7b8 <calloc>
}
 8009aca:	bd08      	pop	{r3, pc}

08009acc <JSB_UI_Rect>:

JSB_UI_Rect_t JSB_UI_Rect(uint32_t Left, uint32_t Top, uint32_t Width, uint32_t Height)
{
  JSB_UI_Rect_t Rect;

  Rect.Left = Left;
 8009acc:	6001      	str	r1, [r0, #0]
  Rect.Top = Top;
 8009ace:	6042      	str	r2, [r0, #4]
  Rect.Width = Width;
 8009ad0:	6083      	str	r3, [r0, #8]
  Rect.Height = Height;
 8009ad2:	9b00      	ldr	r3, [sp, #0]
 8009ad4:	60c3      	str	r3, [r0, #12]

  return Rect;
}
 8009ad6:	4770      	bx	lr

08009ad8 <JSB_UI_RectFromCentrePoint>:

JSB_UI_Rect_t JSB_UI_RectFromCentrePoint(uint32_t CentreX, uint32_t CentreY, uint32_t Width, uint32_t Height)
{
 8009ad8:	b410      	push	{r4}
 8009ada:	9c01      	ldr	r4, [sp, #4]
  JSB_UI_Rect_t Rect;

  Rect.Left = CentreX - Width / 2;
 8009adc:	eba1 0153 	sub.w	r1, r1, r3, lsr #1
 8009ae0:	6001      	str	r1, [r0, #0]
  Rect.Top = CentreY - Height / 2;
 8009ae2:	eba2 0254 	sub.w	r2, r2, r4, lsr #1
 8009ae6:	6042      	str	r2, [r0, #4]
  Rect.Width = Width;
 8009ae8:	6083      	str	r3, [r0, #8]
  Rect.Height = Height;
 8009aea:	60c4      	str	r4, [r0, #12]

  return Rect;
}
 8009aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <JSB_UI_CreateControl>:

JSB_UI_Control_t *JSB_UI_CreateControl(JSB_UI_ControlType_t ControlType, JSB_UI_Rect_t Rect, char *Text, uint16_t ForegroundColor, uint16_t BackgroundColor,
  float *pSliderValue,
  uint8_t Visible,
  void (*pPressDownHandler)(JSB_UI_Control_t *), void (*pPressMoveHandler)(JSB_UI_Control_t *), void (*pCustomDrawHandler)(JSB_UI_Control_t *))
{
 8009af2:	b084      	sub	sp, #16
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	4606      	mov	r6, r0
 8009af8:	ad05      	add	r5, sp, #20
 8009afa:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  JSB_UI_Control_t *pControl;

  pControl = calloc(1, sizeof(JSB_UI_Control_t));
 8009afe:	2188      	movs	r1, #136	@ 0x88
 8009b00:	2001      	movs	r0, #1
 8009b02:	f005 fe59 	bl	800f7b8 <calloc>
 8009b06:	4604      	mov	r4, r0

  pControl->Type = ControlType;
 8009b08:	4684      	mov	ip, r0
 8009b0a:	f80c 6b04 	strb.w	r6, [ip], #4
  pControl->Rect = Rect;
 8009b0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009b12:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  strncpy(pControl->Text, Text, JSB_UI_Control_MaxTextLength);
 8009b16:	2250      	movs	r2, #80	@ 0x50
 8009b18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b1a:	f104 0014 	add.w	r0, r4, #20
 8009b1e:	f006 fd38 	bl	8010592 <strncpy>
  pControl->ForegroundColor = ForegroundColor;
 8009b22:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8009b26:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
  pControl->BackgroundColor = BackgroundColor;
 8009b2a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8009b2e:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
  pControl->pSliderValue = pSliderValue;
 8009b32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b34:	66a3      	str	r3, [r4, #104]	@ 0x68
  pControl->SliderMinValue = 0.0f;
 8009b36:	2300      	movs	r3, #0
 8009b38:	66e3      	str	r3, [r4, #108]	@ 0x6c
  pControl->SliderMaxValue = 1.0f;
 8009b3a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009b3e:	6723      	str	r3, [r4, #112]	@ 0x70
  pControl->Visible = Visible;
 8009b40:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8009b44:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
  pControl->pPressDownHandler = pPressDownHandler;
 8009b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b4a:	67e3      	str	r3, [r4, #124]	@ 0x7c
  pControl->pPressMoveHandler = pPressMoveHandler;
 8009b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b4e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  pControl->pCustomDrawHandler = pCustomDrawHandler;
 8009b52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b54:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  return pControl;
}
 8009b58:	4620      	mov	r0, r4
 8009b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b5e:	b004      	add	sp, #16
 8009b60:	4770      	bx	lr

08009b62 <JSB_UI_Control_IsSlider>:

uint8_t JSB_UI_Control_IsSlider(JSB_UI_Control_t *pControl)
{
  return (pControl->Type == ctHorizontalSlider) || (pControl->Type == ctVerticalSlider);
 8009b62:	7800      	ldrb	r0, [r0, #0]
 8009b64:	3802      	subs	r0, #2
 8009b66:	b2c0      	uxtb	r0, r0
}
 8009b68:	2801      	cmp	r0, #1
 8009b6a:	bf8c      	ite	hi
 8009b6c:	2000      	movhi	r0, #0
 8009b6e:	2001      	movls	r0, #1
 8009b70:	4770      	bx	lr
	...

08009b74 <JSB_UI_Page_PressDown>:
  if (pPressedControl)
 8009b74:	4b1a      	ldr	r3, [pc, #104]	@ (8009be0 <JSB_UI_Page_PressDown+0x6c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	b10b      	cbz	r3, 8009b7e <JSB_UI_Page_PressDown+0xa>
    return 0;
 8009b7a:	2000      	movs	r0, #0
}
 8009b7c:	4770      	bx	lr
{
 8009b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	4605      	mov	r5, r0
 8009b86:	460f      	mov	r7, r1
 8009b88:	4690      	mov	r8, r2
  for (ControlIndex = 0; ControlIndex < pPage->Controls.NumControls; ++ControlIndex)
 8009b8a:	2400      	movs	r4, #0
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	42a3      	cmp	r3, r4
 8009b90:	d922      	bls.n	8009bd8 <JSB_UI_Page_PressDown+0x64>
    pControl = pPage->Controls.pControls[ControlIndex];
 8009b92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b96:	685e      	ldr	r6, [r3, #4]
    Rect = pControl->Rect;
 8009b98:	46ec      	mov	ip, sp
 8009b9a:	1d33      	adds	r3, r6, #4
 8009b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (HitRect(X, Y, &Rect))
 8009ba2:	4662      	mov	r2, ip
 8009ba4:	fa1f f188 	uxth.w	r1, r8
 8009ba8:	b2b8      	uxth	r0, r7
 8009baa:	f7ff fef7 	bl	800999c <HitRect>
 8009bae:	b908      	cbnz	r0, 8009bb4 <JSB_UI_Page_PressDown+0x40>
  for (ControlIndex = 0; ControlIndex < pPage->Controls.NumControls; ++ControlIndex)
 8009bb0:	3401      	adds	r4, #1
 8009bb2:	e7eb      	b.n	8009b8c <JSB_UI_Page_PressDown+0x18>
      pPressedControl = pControl;
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009be0 <JSB_UI_Page_PressDown+0x6c>)
 8009bb6:	601e      	str	r6, [r3, #0]
      if (JSB_UI_Control_IsSlider(pControl))
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff ffd2 	bl	8009b62 <JSB_UI_Control_IsSlider>
 8009bbe:	b928      	cbnz	r0, 8009bcc <JSB_UI_Page_PressDown+0x58>
      if (pControl->pPressDownHandler)
 8009bc0:	6ff3      	ldr	r3, [r6, #124]	@ 0x7c
 8009bc2:	b10b      	cbz	r3, 8009bc8 <JSB_UI_Page_PressDown+0x54>
        (*pControl->pPressDownHandler)(pControl);
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4798      	blx	r3
      return 1;
 8009bc8:	2001      	movs	r0, #1
 8009bca:	e006      	b.n	8009bda <JSB_UI_Page_PressDown+0x66>
        JSB_UI_Page_UpdateSlideValue(pControl, X, Y);
 8009bcc:	4642      	mov	r2, r8
 8009bce:	4639      	mov	r1, r7
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff ff11 	bl	80099f8 <JSB_UI_Page_UpdateSlideValue>
 8009bd6:	e7f3      	b.n	8009bc0 <JSB_UI_Page_PressDown+0x4c>
  return 0;
 8009bd8:	2000      	movs	r0, #0
}
 8009bda:	b004      	add	sp, #16
 8009bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be0:	2001322c 	.word	0x2001322c

08009be4 <DrawControls>:
{
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	b09f      	sub	sp, #124	@ 0x7c
 8009bea:	4606      	mov	r6, r0
  TextDrawMode_t OriginalTextDrawMode = ILI9341_SetTextDrawMode(tdmMergeWithExistingPixels);
 8009bec:	2003      	movs	r0, #3
 8009bee:	f7ff f9c1 	bl	8008f74 <ILI9341_SetTextDrawMode>
 8009bf2:	4604      	mov	r4, r0
  TextVerticalOrigin_t OriginalTextVerticalOrigin = ILI9341_SetTextVerticalOrigin(tvoCentreBetweenBaseAndTop);
 8009bf4:	2002      	movs	r0, #2
 8009bf6:	f7ff f9c5 	bl	8008f84 <ILI9341_SetTextVerticalOrigin>
  for (ControlIndex = 0; ControlIndex < pPage->Controls.NumControls; ++ControlIndex)
 8009bfa:	2500      	movs	r5, #0
 8009bfc:	9404      	str	r4, [sp, #16]
 8009bfe:	9005      	str	r0, [sp, #20]
 8009c00:	e05b      	b.n	8009cba <DrawControls+0xd6>
        uint16_t OnWidth = round(Rect.Width * SliderParameter);
 8009c02:	eddd 7a1c 	vldr	s15, [sp, #112]	@ 0x70
 8009c06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c0a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009c0e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8009c12:	feb8 7b47 	vrinta.f64	d7, d7
 8009c16:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8009c1a:	ee17 3a10 	vmov	r3, s14
 8009c1e:	fa1f f983 	uxth.w	r9, r3
        uint16_t OffWidth = Rect.Width - OnWidth;
 8009c22:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	eba3 0309 	sub.w	r3, r3, r9
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	9303      	str	r3, [sp, #12]
        ILI9341_DrawBar(Rect.Left, Rect.Top, OnWidth, Rect.Height, ForegroundColor);
 8009c2e:	f8bd a068 	ldrh.w	sl, [sp, #104]	@ 0x68
 8009c32:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 8009c36:	f8bd b074 	ldrh.w	fp, [sp, #116]	@ 0x74
 8009c3a:	f8cd 8000 	str.w	r8, [sp]
 8009c3e:	465b      	mov	r3, fp
 8009c40:	464a      	mov	r2, r9
 8009c42:	4688      	mov	r8, r1
 8009c44:	4650      	mov	r0, sl
 8009c46:	f7fe ffa1 	bl	8008b8c <ILI9341_DrawBar>
        ILI9341_DrawBar(Rect.Left + OnWidth, Rect.Top, OffWidth, Rect.Height, BackgroundColor);
 8009c4a:	eb0a 0009 	add.w	r0, sl, r9
 8009c4e:	9700      	str	r7, [sp, #0]
 8009c50:	465b      	mov	r3, fp
 8009c52:	9a03      	ldr	r2, [sp, #12]
 8009c54:	4641      	mov	r1, r8
 8009c56:	b280      	uxth	r0, r0
 8009c58:	f7fe ff98 	bl	8008b8c <ILI9341_DrawBar>
 8009c5c:	e00a      	b.n	8009c74 <DrawControls+0x90>
      ILI9341_DrawBar(Rect.Left, Rect.Top, Rect.Width, Rect.Height, BackgroundColor);
 8009c5e:	9700      	str	r7, [sp, #0]
 8009c60:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8009c64:	f8bd 2070 	ldrh.w	r2, [sp, #112]	@ 0x70
 8009c68:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 8009c6c:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
 8009c70:	f7fe ff8c 	bl	8008b8c <ILI9341_DrawBar>
    if (pControl->pCustomDrawHandler)
 8009c74:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009c78:	b10b      	cbz	r3, 8009c7e <DrawControls+0x9a>
      (*pControl->pCustomDrawHandler)(pControl);
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	4798      	blx	r3
    if (pControl->pTweakTextHandler)
 8009c7e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d070      	beq.n	8009d66 <DrawControls+0x182>
      (*pControl->pTweakTextHandler)(pControl, Text, JSB_UI_Control_MaxTextLength);
 8009c84:	2250      	movs	r2, #80	@ 0x50
 8009c86:	a906      	add	r1, sp, #24
 8009c88:	4620      	mov	r0, r4
 8009c8a:	4798      	blx	r3
      pText = Text;
 8009c8c:	af06      	add	r7, sp, #24
    ILI9341_DrawTextAtXY(pText, pControl->Rect.Left + ((pControl->Rect.Width - ILI9341_GetTextWidth(pText)) / 2), pControl->Rect.Top + (pControl->Rect.Height / 2), tpLeft);
 8009c8e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8009c92:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8009c96:	4638      	mov	r0, r7
 8009c98:	f7ff f812 	bl	8008cc0 <ILI9341_GetTextWidth>
 8009c9c:	eba9 0900 	sub.w	r9, r9, r0
 8009ca0:	68a2      	ldr	r2, [r4, #8]
 8009ca2:	6923      	ldr	r3, [r4, #16]
 8009ca4:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8009ca8:	eb08 0159 	add.w	r1, r8, r9, lsr #1
 8009cac:	2301      	movs	r3, #1
 8009cae:	b292      	uxth	r2, r2
 8009cb0:	b289      	uxth	r1, r1
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	f7ff f96e 	bl	8008f94 <ILI9341_DrawTextAtXY>
  for (ControlIndex = 0; ControlIndex < pPage->Controls.NumControls; ++ControlIndex)
 8009cb8:	3501      	adds	r5, #1
 8009cba:	6833      	ldr	r3, [r6, #0]
 8009cbc:	42ab      	cmp	r3, r5
 8009cbe:	d955      	bls.n	8009d6c <DrawControls+0x188>
    pControl = pPage->Controls.pControls[ControlIndex];
 8009cc0:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8009cc4:	685c      	ldr	r4, [r3, #4]
    Rect = pControl->Rect;
 8009cc6:	1d23      	adds	r3, r4, #4
 8009cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009cca:	af1e      	add	r7, sp, #120	@ 0x78
 8009ccc:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
    ForegroundColor = pControl->ForegroundColor;
 8009cd0:	f8b4 8064 	ldrh.w	r8, [r4, #100]	@ 0x64
    BackgroundColor = pControl->BackgroundColor;
 8009cd4:	f8b4 7066 	ldrh.w	r7, [r4, #102]	@ 0x66
    if (JSB_UI_Control_IsSlider(pControl))
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7ff ff42 	bl	8009b62 <JSB_UI_Control_IsSlider>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d0bd      	beq.n	8009c5e <DrawControls+0x7a>
      float SliderParameter = (*pControl->pSliderValue - pControl->SliderMinValue) / (pControl->SliderMaxValue - pControl->SliderMinValue);
 8009ce2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009ce4:	ed93 7a00 	vldr	s14, [r3]
 8009ce8:	edd4 6a1b 	vldr	s13, [r4, #108]	@ 0x6c
 8009cec:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009cf0:	edd4 7a1c 	vldr	s15, [r4, #112]	@ 0x70
 8009cf4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009cf8:	eec7 6a27 	vdiv.f32	s13, s14, s15
      if (pControl->Type == ctHorizontalSlider)
 8009cfc:	7823      	ldrb	r3, [r4, #0]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	f43f af7f 	beq.w	8009c02 <DrawControls+0x1e>
      else if (pControl->Type == ctVerticalSlider)
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d1b5      	bne.n	8009c74 <DrawControls+0x90>
        uint16_t OnHeight = round(Rect.Width * SliderParameter);
 8009d08:	eddd 7a1c 	vldr	s15, [sp, #112]	@ 0x70
 8009d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d10:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009d14:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8009d18:	feb8 7b47 	vrinta.f64	d7, d7
 8009d1c:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8009d20:	ee17 3a10 	vmov	r3, s14
 8009d24:	fa1f f983 	uxth.w	r9, r3
        uint16_t OffHeight = Rect.Height - OnHeight;
 8009d28:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8009d2c:	eba3 0309 	sub.w	r3, r3, r9
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	9303      	str	r3, [sp, #12]
        ILI9341_DrawBar(Rect.Left, Rect.Top, Rect.Width, OnHeight, ForegroundColor);
 8009d34:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
 8009d38:	f8bd a06c 	ldrh.w	sl, [sp, #108]	@ 0x6c
 8009d3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009d3e:	fa1f fb82 	uxth.w	fp, r2
 8009d42:	f8cd 8000 	str.w	r8, [sp]
 8009d46:	464b      	mov	r3, r9
 8009d48:	465a      	mov	r2, fp
 8009d4a:	4651      	mov	r1, sl
 8009d4c:	4680      	mov	r8, r0
 8009d4e:	f7fe ff1d 	bl	8008b8c <ILI9341_DrawBar>
        ILI9341_DrawBar(Rect.Left, Rect.Top + OnHeight, Rect.Width, OffHeight, BackgroundColor);
 8009d52:	eb0a 0109 	add.w	r1, sl, r9
 8009d56:	9700      	str	r7, [sp, #0]
 8009d58:	9b03      	ldr	r3, [sp, #12]
 8009d5a:	465a      	mov	r2, fp
 8009d5c:	b289      	uxth	r1, r1
 8009d5e:	4640      	mov	r0, r8
 8009d60:	f7fe ff14 	bl	8008b8c <ILI9341_DrawBar>
 8009d64:	e786      	b.n	8009c74 <DrawControls+0x90>
      pText = pControl->Text;
 8009d66:	f104 0714 	add.w	r7, r4, #20
 8009d6a:	e790      	b.n	8009c8e <DrawControls+0xaa>
  ILI9341_SetTextDrawMode(OriginalTextDrawMode);
 8009d6c:	9c04      	ldr	r4, [sp, #16]
 8009d6e:	9f05      	ldr	r7, [sp, #20]
 8009d70:	4620      	mov	r0, r4
 8009d72:	f7ff f8ff 	bl	8008f74 <ILI9341_SetTextDrawMode>
  ILI9341_SetTextVerticalOrigin(OriginalTextVerticalOrigin);
 8009d76:	4638      	mov	r0, r7
 8009d78:	f7ff f904 	bl	8008f84 <ILI9341_SetTextVerticalOrigin>
}
 8009d7c:	b01f      	add	sp, #124	@ 0x7c
 8009d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d82 <JSB_UI_AddControlToPage>:

void JSB_UI_AddControlToPage(JSB_UI_Page_t *pPage, JSB_UI_Control_t *pControl)
{
 8009d82:	b508      	push	{r3, lr}
  if (pPage->Controls.NumControls == JSB_UI_Controls_MaxNumber)
 8009d84:	6803      	ldr	r3, [r0, #0]
 8009d86:	2b10      	cmp	r3, #16
 8009d88:	d005      	beq.n	8009d96 <JSB_UI_AddControlToPage+0x14>
  {
    Error_Handler();
    return;
  }

  pPage->Controls.pControls[pPage->Controls.NumControls] = pControl;
 8009d8a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8009d8e:	6051      	str	r1, [r2, #4]
  pPage->Controls.NumControls += 1;
 8009d90:	3301      	adds	r3, #1
 8009d92:	6003      	str	r3, [r0, #0]
}
 8009d94:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009d96:	f004 fd9d 	bl	800e8d4 <Error_Handler>
    return;
 8009d9a:	e7fb      	b.n	8009d94 <JSB_UI_AddControlToPage+0x12>

08009d9c <JSB_UI_SetDefaultState>:

void JSB_UI_SetDefaultState()
{
 8009d9c:	b508      	push	{r3, lr}
  ILI9341_SetDefaultState();
 8009d9e:	f7fe fcb7 	bl	8008710 <ILI9341_SetDefaultState>

  ILI9341_SetFont(&FreeSans9pt7b);
 8009da2:	4802      	ldr	r0, [pc, #8]	@ (8009dac <JSB_UI_SetDefaultState+0x10>)
 8009da4:	f7fe ff64 	bl	8008c70 <ILI9341_SetFont>
}
 8009da8:	bd08      	pop	{r3, pc}
 8009daa:	bf00      	nop
 8009dac:	08013588 	.word	0x08013588

08009db0 <JSB_UI_InitializeDisplay>:

void JSB_UI_InitializeDisplay()
{
 8009db0:	b508      	push	{r3, lr}
  ILI9341_Initialize(&hspi1, 1);
 8009db2:	2101      	movs	r1, #1
 8009db4:	4807      	ldr	r0, [pc, #28]	@ (8009dd4 <JSB_UI_InitializeDisplay+0x24>)
 8009db6:	f7fe fcbd 	bl	8008734 <ILI9341_Initialize>
  LCD_BacklightOn(1);
 8009dba:	2001      	movs	r0, #1
 8009dbc:	f000 fb1a 	bl	800a3f4 <LCD_BacklightOn>
  XPT2046_Initialize(&hspi2);
 8009dc0:	4805      	ldr	r0, [pc, #20]	@ (8009dd8 <JSB_UI_InitializeDisplay+0x28>)
 8009dc2:	f000 f851 	bl	8009e68 <XPT2046_Initialize>

  JSB_UI_SetDefaultState();
 8009dc6:	f7ff ffe9 	bl	8009d9c <JSB_UI_SetDefaultState>

  ILI9341_Clear(0x0000);
 8009dca:	2000      	movs	r0, #0
 8009dcc:	f7fe fef0 	bl	8008bb0 <ILI9341_Clear>
}
 8009dd0:	bd08      	pop	{r3, pc}
 8009dd2:	bf00      	nop
 8009dd4:	2001784c 	.word	0x2001784c
 8009dd8:	200177e8 	.word	0x200177e8

08009ddc <JSB_UI_DrawPage>:

void JSB_UI_DrawPage(JSB_UI_Page_t *pPage)
{
 8009ddc:	b510      	push	{r4, lr}
 8009dde:	4604      	mov	r4, r0
  ILI9341_Clear(0);
 8009de0:	2000      	movs	r0, #0
 8009de2:	f7fe fee5 	bl	8008bb0 <ILI9341_Clear>

  DrawControls(pPage);
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff fefc 	bl	8009be4 <DrawControls>

  if (pPage->pCustomDrawHandler)
 8009dec:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009dee:	b10b      	cbz	r3, 8009df4 <JSB_UI_DrawPage+0x18>
    (*pPage->pCustomDrawHandler)(pPage);
 8009df0:	4620      	mov	r0, r4
 8009df2:	4798      	blx	r3

  if (ILI9341_UsingBackBuffer())
 8009df4:	f7fe fe72 	bl	8008adc <ILI9341_UsingBackBuffer>
 8009df8:	b900      	cbnz	r0, 8009dfc <JSB_UI_DrawPage+0x20>
    ILI9341_CopyBackBufferToDisplay();
}
 8009dfa:	bd10      	pop	{r4, pc}
    ILI9341_CopyBackBufferToDisplay();
 8009dfc:	f7fe fe74 	bl	8008ae8 <ILI9341_CopyBackBufferToDisplay>
}
 8009e00:	e7fb      	b.n	8009dfa <JSB_UI_DrawPage+0x1e>

08009e02 <GetBest>:

static int16_t GetBest(int16_t A, int16_t B, int16_t C)
// From Adafruit Arduino library.
// JSB: I think it returns the average of the two closest values.
// JSB: I renamed the identifiers.
{
 8009e02:	b510      	push	{r4, lr}
  int16_t DeltaAB, DeltaCA, DeltaBC;
  int16_t Result = 0;

  if (A > B)
 8009e04:	4288      	cmp	r0, r1
 8009e06:	dd16      	ble.n	8009e36 <GetBest+0x34>
    DeltaAB = A - B;
 8009e08:	1a43      	subs	r3, r0, r1
 8009e0a:	b21b      	sxth	r3, r3
  else
    DeltaAB = B - A;

  if (A > C)
 8009e0c:	4290      	cmp	r0, r2
 8009e0e:	dd15      	ble.n	8009e3c <GetBest+0x3a>
    DeltaCA = A - C;
 8009e10:	eba0 0c02 	sub.w	ip, r0, r2
 8009e14:	fa0f fc8c 	sxth.w	ip, ip
  else
    DeltaCA = C - A;

  if (C > B)
 8009e18:	4291      	cmp	r1, r2
 8009e1a:	da14      	bge.n	8009e46 <GetBest+0x44>
    DeltaBC = C - B;
 8009e1c:	eba2 0e01 	sub.w	lr, r2, r1
 8009e20:	fa0f fe8e 	sxth.w	lr, lr
  else
    DeltaBC = B - C;

  if ((DeltaAB <= DeltaCA) && (DeltaAB <= DeltaBC))
 8009e24:	4664      	mov	r4, ip
 8009e26:	45f4      	cmp	ip, lr
 8009e28:	bfa8      	it	ge
 8009e2a:	4674      	movge	r4, lr
 8009e2c:	42a3      	cmp	r3, r4
 8009e2e:	dc0f      	bgt.n	8009e50 <GetBest+0x4e>
    Result = (A + B) >> 1;
 8009e30:	4408      	add	r0, r1
 8009e32:	1040      	asrs	r0, r0, #1
    Result = (A + C) >> 1;
  else
    Result = (B + C) >> 1;

  return Result;
}
 8009e34:	bd10      	pop	{r4, pc}
    DeltaAB = B - A;
 8009e36:	1a0b      	subs	r3, r1, r0
 8009e38:	b21b      	sxth	r3, r3
 8009e3a:	e7e7      	b.n	8009e0c <GetBest+0xa>
    DeltaCA = C - A;
 8009e3c:	eba2 0c00 	sub.w	ip, r2, r0
 8009e40:	fa0f fc8c 	sxth.w	ip, ip
 8009e44:	e7e8      	b.n	8009e18 <GetBest+0x16>
    DeltaBC = B - C;
 8009e46:	eba1 0e02 	sub.w	lr, r1, r2
 8009e4a:	fa0f fe8e 	sxth.w	lr, lr
 8009e4e:	e7e9      	b.n	8009e24 <GetBest+0x22>
  else if ((DeltaCA <= DeltaAB) && (DeltaCA <= DeltaBC))
 8009e50:	4573      	cmp	r3, lr
 8009e52:	bfa8      	it	ge
 8009e54:	4673      	movge	r3, lr
 8009e56:	459c      	cmp	ip, r3
 8009e58:	dc02      	bgt.n	8009e60 <GetBest+0x5e>
    Result = (A + C) >> 1;
 8009e5a:	4410      	add	r0, r2
 8009e5c:	1040      	asrs	r0, r0, #1
 8009e5e:	e7e9      	b.n	8009e34 <GetBest+0x32>
    Result = (B + C) >> 1;
 8009e60:	4411      	add	r1, r2
 8009e62:	1048      	asrs	r0, r1, #1
 8009e64:	e7e6      	b.n	8009e34 <GetBest+0x32>
	...

08009e68 <XPT2046_Initialize>:
  phspi = i_phspi;
 8009e68:	4b01      	ldr	r3, [pc, #4]	@ (8009e70 <XPT2046_Initialize+0x8>)
 8009e6a:	6018      	str	r0, [r3, #0]
}
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	20013230 	.word	0x20013230

08009e74 <XPT2046_Sample>:

uint8_t XPT2046_Sample(int16_t *pRawX, int16_t *pRawY, int16_t *pRawZ)
// Returns 1 if touched.
// The origin is bottom left (XL, YD). This is the natural origin of the XPT2046.
// None of the touch screens I've encountered so far are correctly wired. Use compiler defines to reverse the coordinates as required.
{
 8009e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e78:	b08c      	sub	sp, #48	@ 0x30
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	460f      	mov	r7, r1
 8009e7e:	4691      	mov	r9, r2
  int16_t x, y, z;

  *pRawX = 0;
 8009e80:	2200      	movs	r2, #0
 8009e82:	8002      	strh	r2, [r0, #0]
  *pRawY = 0;
 8009e84:	800a      	strh	r2, [r1, #0]
  *pRawZ = 0;
 8009e86:	f8a9 2000 	strh.w	r2, [r9]

  uint8_t RxData[19];
  int16_t X_Positions[3];
  int16_t Y_Positions[3];

  XPT2046_CSX_Low();
 8009e8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009e8e:	4846      	ldr	r0, [pc, #280]	@ (8009fa8 <XPT2046_Sample+0x134>)
 8009e90:	f7f6 ffdf 	bl	8000e52 <HAL_GPIO_WritePin>
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &SampleCommand, (uint8_t*) &RxData, 19, 100) != HAL_OK)
 8009e94:	2364      	movs	r3, #100	@ 0x64
 8009e96:	9300      	str	r3, [sp, #0]
 8009e98:	2313      	movs	r3, #19
 8009e9a:	aa07      	add	r2, sp, #28
 8009e9c:	4943      	ldr	r1, [pc, #268]	@ (8009fac <XPT2046_Sample+0x138>)
 8009e9e:	4844      	ldr	r0, [pc, #272]	@ (8009fb0 <XPT2046_Sample+0x13c>)
 8009ea0:	6800      	ldr	r0, [r0, #0]
 8009ea2:	f7fa fa91 	bl	80043c8 <HAL_SPI_TransmitReceive>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d178      	bne.n	8009f9c <XPT2046_Sample+0x128>
    Error_Handler();
  XPT2046_CSX_High();
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009eb0:	483d      	ldr	r0, [pc, #244]	@ (8009fa8 <XPT2046_Sample+0x134>)
 8009eb2:	f7f6 ffce 	bl	8000e52 <HAL_GPIO_WritePin>
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8009eb6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8009eba:	f89d e01e 	ldrb.w	lr, [sp, #30]
 8009ebe:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 8009ec2:	ea4e 1e43 	orr.w	lr, lr, r3, lsl #5
 8009ec6:	f3ce 0c0b 	ubfx	ip, lr, #0, #12
 8009eca:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8009ece:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8009ed2:	08db      	lsrs	r3, r3, #3
 8009ed4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8009ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009edc:	f89d 2023 	ldrb.w	r2, [sp, #35]	@ 0x23
 8009ee0:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8009ee4:	08c0      	lsrs	r0, r0, #3
 8009ee6:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
 8009eea:	f3c0 000b 	ubfx	r0, r0, #0, #12
  int16_t z1 = GetUnsigned12bitValue(&RxData[1]);
  int16_t z2 = GetUnsigned12bitValue(&RxData[3]);

  // Result from dummy measurement ignored.

  X_Positions[0] = GetUnsigned12bitValue(&RxData[7]);
 8009eee:	f8ad 0014 	strh.w	r0, [sp, #20]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8009ef2:	f89d 4027 	ldrb.w	r4, [sp, #39]	@ 0x27
 8009ef6:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 8009efa:	08c9      	lsrs	r1, r1, #3
 8009efc:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8009f00:	f3c1 010b 	ubfx	r1, r1, #0, #12
  X_Positions[1] = GetUnsigned12bitValue(&RxData[11]);
 8009f04:	f8ad 1016 	strh.w	r1, [sp, #22]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8009f08:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 8009f0c:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 8009f10:	08d2      	lsrs	r2, r2, #3
 8009f12:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
 8009f16:	f3c2 020b 	ubfx	r2, r2, #0, #12
  X_Positions[2] = GetUnsigned12bitValue(&RxData[15]);
 8009f1a:	f8ad 2018 	strh.w	r2, [sp, #24]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8009f1e:	f89d 5026 	ldrb.w	r5, [sp, #38]	@ 0x26
 8009f22:	08e4      	lsrs	r4, r4, #3
 8009f24:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
 8009f28:	f3c4 040b 	ubfx	r4, r4, #0, #12

  Y_Positions[0] = GetUnsigned12bitValue(&RxData[10]);
 8009f2c:	f8ad 400c 	strh.w	r4, [sp, #12]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8009f30:	f89d 6029 	ldrb.w	r6, [sp, #41]	@ 0x29
 8009f34:	f89d 502a 	ldrb.w	r5, [sp, #42]	@ 0x2a
 8009f38:	08ed      	lsrs	r5, r5, #3
 8009f3a:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
 8009f3e:	f3c5 050b 	ubfx	r5, r5, #0, #12
  Y_Positions[1] = GetUnsigned12bitValue(&RxData[13]);
 8009f42:	f8ad 500e 	strh.w	r5, [sp, #14]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8009f46:	f89d 602d 	ldrb.w	r6, [sp, #45]	@ 0x2d
 8009f4a:	f89d a02e 	ldrb.w	sl, [sp, #46]	@ 0x2e
 8009f4e:	0176      	lsls	r6, r6, #5
 8009f50:	ea46 06da 	orr.w	r6, r6, sl, lsr #3
 8009f54:	f3c6 060b 	ubfx	r6, r6, #0, #12
  Y_Positions[2] = GetUnsigned12bitValue(&RxData[17]);
 8009f58:	f8ad 6010 	strh.w	r6, [sp, #16]

  // Neutralize occasional z1 = 4095 values (which are possibly due to comms errors, as x and y values of 4095 often appear with the z value of 4095).
  if (z1 >= 2048)
 8009f5c:	f41e 6f00 	tst.w	lr, #2048	@ 0x800
 8009f60:	d001      	beq.n	8009f66 <XPT2046_Sample+0xf2>
    z1 = 0;
 8009f62:	f04f 0c00 	mov.w	ip, #0

  z = 4095 + z1 - z2;
 8009f66:	ebac 0303 	sub.w	r3, ip, r3
 8009f6a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff

  if (z < ZThreshold)
 8009f6e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8009f72:	db16      	blt.n	8009fa2 <XPT2046_Sample+0x12e>
    return 0;

  *pRawZ = z;
 8009f74:	f8a9 3000 	strh.w	r3, [r9]

  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 8009f78:	f7ff ff43 	bl	8009e02 <GetBest>
 8009f7c:	4681      	mov	r9, r0
  y = GetBest(Y_Positions[0], Y_Positions[1], Y_Positions[2]);
 8009f7e:	4632      	mov	r2, r6
 8009f80:	4629      	mov	r1, r5
 8009f82:	4620      	mov	r0, r4
 8009f84:	f7ff ff3d 	bl	8009e02 <GetBest>
#if XPT2046_Swap_XL_and_XR
  x = 4095 - x;
#endif

#if XPT2046_Swap_YD_and_YU
  y = 4095 - y;
 8009f88:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8009f8c:	1a1b      	subs	r3, r3, r0
#endif

  *pRawX = x;
 8009f8e:	f8a8 9000 	strh.w	r9, [r8]
  *pRawY = y;
 8009f92:	803b      	strh	r3, [r7, #0]

  return 1;
 8009f94:	2001      	movs	r0, #1
}
 8009f96:	b00c      	add	sp, #48	@ 0x30
 8009f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Error_Handler();
 8009f9c:	f004 fc9a 	bl	800e8d4 <Error_Handler>
 8009fa0:	e783      	b.n	8009eaa <XPT2046_Sample+0x36>
    return 0;
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	e7f7      	b.n	8009f96 <XPT2046_Sample+0x122>
 8009fa6:	bf00      	nop
 8009fa8:	40020400 	.word	0x40020400
 8009fac:	08013d10 	.word	0x08013d10
 8009fb0:	20013230 	.word	0x20013230

08009fb4 <XPT2046_ConvertRawToScreen>:

void XPT2046_ConvertRawToScreen(int16_t RawX, int16_t RawY, int16_t *pX, int16_t *pY)
// Assumes portrait mode.
// The origin of the result is top-left.
{
 8009fb4:	b410      	push	{r4}
  float K;

  K = ((float)(RawX - XPT2046_RawX_Min) / (float)(XPT2046_RawX_Max - XPT2046_RawX_Min));
 8009fb6:	4c1a      	ldr	r4, [pc, #104]	@ (800a020 <XPT2046_ConvertRawToScreen+0x6c>)
 8009fb8:	6824      	ldr	r4, [r4, #0]
 8009fba:	1b00      	subs	r0, r0, r4
 8009fbc:	ee07 0a90 	vmov	s15, r0
 8009fc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009fc4:	4817      	ldr	r0, [pc, #92]	@ (800a024 <XPT2046_ConvertRawToScreen+0x70>)
 8009fc6:	6800      	ldr	r0, [r0, #0]
 8009fc8:	1b00      	subs	r0, r0, r4
 8009fca:	ee07 0a10 	vmov	s14, r0
 8009fce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pX = K * XPT2046_Width;
 8009fd6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a028 <XPT2046_ConvertRawToScreen+0x74>
 8009fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fe2:	ee17 0a90 	vmov	r0, s15
 8009fe6:	8010      	strh	r0, [r2, #0]

  K = ((float)(RawY - XPT2046_RawY_Min) / (float)(XPT2046_RawY_Max - XPT2046_RawY_Min));
 8009fe8:	4a10      	ldr	r2, [pc, #64]	@ (800a02c <XPT2046_ConvertRawToScreen+0x78>)
 8009fea:	6810      	ldr	r0, [r2, #0]
 8009fec:	1a09      	subs	r1, r1, r0
 8009fee:	ee07 1a90 	vmov	s15, r1
 8009ff2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009ff6:	4a0e      	ldr	r2, [pc, #56]	@ (800a030 <XPT2046_ConvertRawToScreen+0x7c>)
 8009ff8:	6812      	ldr	r2, [r2, #0]
 8009ffa:	1a12      	subs	r2, r2, r0
 8009ffc:	ee07 2a90 	vmov	s15, r2
 800a000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a004:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pY = K * XPT2046_Height;
 800a008:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800a034 <XPT2046_ConvertRawToScreen+0x80>
 800a00c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a014:	ee17 2a90 	vmov	r2, s15
 800a018:	801a      	strh	r2, [r3, #0]
}
 800a01a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	20000044 	.word	0x20000044
 800a024:	20000040 	.word	0x20000040
 800a028:	43700000 	.word	0x43700000
 800a02c:	2000003c 	.word	0x2000003c
 800a030:	20000038 	.word	0x20000038
 800a034:	43a00000 	.word	0x43a00000

0800a038 <SST25_Start>:
	SST25_SPI_ReadBlock(pBlock, NumBytes);
	SST25_End();
}

static inline void SST25_Start()
{
 800a038:	b508      	push	{r3, lr}
  SST25_SPI_Begin();
 800a03a:	f000 f9bb 	bl	800a3b4 <SST25_SPI_Begin>
static inline void SST25_Delay()
// Warning: Requires CPU_CYCLES to be enabled!
{
  uint32_t End_NumCycles;

  End_NumCycles = CPU_CYCLES + 10; // !!! Hardwired!
 800a03e:	4b04      	ldr	r3, [pc, #16]	@ (800a050 <SST25_Start+0x18>)
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	320a      	adds	r2, #10
  do {} while (CPU_CYCLES < End_NumCycles);
 800a044:	4b02      	ldr	r3, [pc, #8]	@ (800a050 <SST25_Start+0x18>)
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d8fb      	bhi.n	800a044 <SST25_Start+0xc>
}
 800a04c:	bd08      	pop	{r3, pc}
 800a04e:	bf00      	nop
 800a050:	e0001000 	.word	0xe0001000

0800a054 <SST25_End>:
{
 800a054:	b508      	push	{r3, lr}
  SST25_SPI_End();
 800a056:	f000 f9bd 	bl	800a3d4 <SST25_SPI_End>
  End_NumCycles = CPU_CYCLES + 10; // !!! Hardwired!
 800a05a:	4b04      	ldr	r3, [pc, #16]	@ (800a06c <SST25_End+0x18>)
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	320a      	adds	r2, #10
  do {} while (CPU_CYCLES < End_NumCycles);
 800a060:	4b02      	ldr	r3, [pc, #8]	@ (800a06c <SST25_End+0x18>)
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	429a      	cmp	r2, r3
 800a066:	d8fb      	bhi.n	800a060 <SST25_End+0xc>
}
 800a068:	bd08      	pop	{r3, pc}
 800a06a:	bf00      	nop
 800a06c:	e0001000 	.word	0xe0001000

0800a070 <SST25_WriteStatus>:
{
 800a070:	b510      	push	{r4, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	4604      	mov	r4, r0
	SST25_Start();
 800a076:	f7ff ffdf 	bl	800a038 <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_ENABLE_WRITE_STATUS);
 800a07a:	2050      	movs	r0, #80	@ 0x50
 800a07c:	f000 f984 	bl	800a388 <SST25_SPI_ReadWriteByte>
	SST25_End();
 800a080:	f7ff ffe8 	bl	800a054 <SST25_End>
	SST25_Start();
 800a084:	f7ff ffd8 	bl	800a038 <SST25_Start>
	uint8_t cmd[] = {FLASH_WRITE_STATUS, Status};
 800a088:	2301      	movs	r3, #1
 800a08a:	f88d 3004 	strb.w	r3, [sp, #4]
 800a08e:	f88d 4005 	strb.w	r4, [sp, #5]
	SST25_SPI_WriteBlock(cmd, 2);
 800a092:	2102      	movs	r1, #2
 800a094:	a801      	add	r0, sp, #4
 800a096:	f000 f95f 	bl	800a358 <SST25_SPI_WriteBlock>
	SST25_End();
 800a09a:	f7ff ffdb 	bl	800a054 <SST25_End>
}
 800a09e:	b002      	add	sp, #8
 800a0a0:	bd10      	pop	{r4, pc}

0800a0a2 <SST25_WriteEnable>:
{
 800a0a2:	b508      	push	{r3, lr}
	SST25_Start();
 800a0a4:	f7ff ffc8 	bl	800a038 <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_WRITE_ENABLE);
 800a0a8:	2006      	movs	r0, #6
 800a0aa:	f000 f96d 	bl	800a388 <SST25_SPI_ReadWriteByte>
	SST25_End();
 800a0ae:	f7ff ffd1 	bl	800a054 <SST25_End>
}
 800a0b2:	bd08      	pop	{r3, pc}

0800a0b4 <SST25_EnableHardware_EOW>:
{
 800a0b4:	b508      	push	{r3, lr}
	SST25_Start();
 800a0b6:	f7ff ffbf 	bl	800a038 <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_ENABLE_SO);
 800a0ba:	2070      	movs	r0, #112	@ 0x70
 800a0bc:	f000 f964 	bl	800a388 <SST25_SPI_ReadWriteByte>
	SST25_End();
 800a0c0:	f7ff ffc8 	bl	800a054 <SST25_End>
}
 800a0c4:	bd08      	pop	{r3, pc}
	...

0800a0c8 <SST25_ReadStatus>:
{
 800a0c8:	b500      	push	{lr}
 800a0ca:	b085      	sub	sp, #20
	SST25_Start();
 800a0cc:	f7ff ffb4 	bl	800a038 <SST25_Start>
	uint8_t Command[] = {FLASH_READ_STATUS, 0x00};
 800a0d0:	2305      	movs	r3, #5
 800a0d2:	f8ad 300c 	strh.w	r3, [sp, #12]
	if ((HAL_Result = HAL_SPI_TransmitReceive(&hspi3, Command, Received, 2, 1000)) != HAL_OK)
 800a0d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	2302      	movs	r3, #2
 800a0de:	aa02      	add	r2, sp, #8
 800a0e0:	a903      	add	r1, sp, #12
 800a0e2:	4807      	ldr	r0, [pc, #28]	@ (800a100 <SST25_ReadStatus+0x38>)
 800a0e4:	f7fa f970 	bl	80043c8 <HAL_SPI_TransmitReceive>
 800a0e8:	b930      	cbnz	r0, 800a0f8 <SST25_ReadStatus+0x30>
	SST25_End();
 800a0ea:	f7ff ffb3 	bl	800a054 <SST25_End>
}
 800a0ee:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800a0f2:	b005      	add	sp, #20
 800a0f4:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800a0f8:	f004 fbec 	bl	800e8d4 <Error_Handler>
 800a0fc:	e7f5      	b.n	800a0ea <SST25_ReadStatus+0x22>
 800a0fe:	bf00      	nop
 800a100:	20017784 	.word	0x20017784

0800a104 <SST25_EraseSector_4K>:
{
 800a104:	b510      	push	{r4, lr}
 800a106:	b082      	sub	sp, #8
	Address &= 0xFFFFFF;
 800a108:	f020 447f 	bic.w	r4, r0, #4278190080	@ 0xff000000
	SST25_WriteStatus(0x00); // Clear all sector protection
 800a10c:	2000      	movs	r0, #0
 800a10e:	f7ff ffaf 	bl	800a070 <SST25_WriteStatus>
	SST25_WriteEnable();
 800a112:	f7ff ffc6 	bl	800a0a2 <SST25_WriteEnable>
	SST25_Start();
 800a116:	f7ff ff8f 	bl	800a038 <SST25_Start>
	uint8_t cmd[] =
 800a11a:	2320      	movs	r3, #32
 800a11c:	f88d 3004 	strb.w	r3, [sp, #4]
			(Address >> 16) & 0xFF,
 800a120:	0c23      	lsrs	r3, r4, #16
	uint8_t cmd[] =
 800a122:	f88d 3005 	strb.w	r3, [sp, #5]
			(Address >> 8) & 0xFF,
 800a126:	0a23      	lsrs	r3, r4, #8
	uint8_t cmd[] =
 800a128:	f88d 3006 	strb.w	r3, [sp, #6]
 800a12c:	f88d 4007 	strb.w	r4, [sp, #7]
	SST25_SPI_WriteBlock(cmd, 4);
 800a130:	2104      	movs	r1, #4
 800a132:	eb0d 0001 	add.w	r0, sp, r1
 800a136:	f000 f90f 	bl	800a358 <SST25_SPI_WriteBlock>
	SST25_End();
 800a13a:	f7ff ff8b 	bl	800a054 <SST25_End>
	while (SST25_ReadStatus() & FLASH_SBIT_BUSY);
 800a13e:	f7ff ffc3 	bl	800a0c8 <SST25_ReadStatus>
 800a142:	f010 0f01 	tst.w	r0, #1
 800a146:	d1fa      	bne.n	800a13e <SST25_EraseSector_4K+0x3a>
}
 800a148:	b002      	add	sp, #8
 800a14a:	bd10      	pop	{r4, pc}

0800a14c <SST25_WriteByte>:
{
 800a14c:	b530      	push	{r4, r5, lr}
 800a14e:	b083      	sub	sp, #12
 800a150:	4604      	mov	r4, r0
 800a152:	460d      	mov	r5, r1
	if (!(SST25_ReadStatus() & FLASH_SBIT_WRITE_ENABLE))
 800a154:	f7ff ffb8 	bl	800a0c8 <SST25_ReadStatus>
 800a158:	f010 0f01 	tst.w	r0, #1
 800a15c:	d018      	beq.n	800a190 <SST25_WriteByte+0x44>
	Address &= 0xFFFFFF;
 800a15e:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
	SST25_Start();
 800a162:	f7ff ff69 	bl	800a038 <SST25_Start>
	uint8_t cmd[] =
 800a166:	2302      	movs	r3, #2
 800a168:	f88d 3000 	strb.w	r3, [sp]
			(Address >> 16) & 0xFF,
 800a16c:	0c23      	lsrs	r3, r4, #16
	uint8_t cmd[] =
 800a16e:	f88d 3001 	strb.w	r3, [sp, #1]
			(Address >> 8) & 0xFF,
 800a172:	0a23      	lsrs	r3, r4, #8
	uint8_t cmd[] =
 800a174:	f88d 3002 	strb.w	r3, [sp, #2]
 800a178:	f88d 4003 	strb.w	r4, [sp, #3]
 800a17c:	f88d 5004 	strb.w	r5, [sp, #4]
	SST25_SPI_WriteBlock(cmd, 5);
 800a180:	2105      	movs	r1, #5
 800a182:	4668      	mov	r0, sp
 800a184:	f000 f8e8 	bl	800a358 <SST25_SPI_WriteBlock>
	SST25_End();
 800a188:	f7ff ff64 	bl	800a054 <SST25_End>
}
 800a18c:	b003      	add	sp, #12
 800a18e:	bd30      	pop	{r4, r5, pc}
		SST25_WriteEnable();
 800a190:	f7ff ff87 	bl	800a0a2 <SST25_WriteEnable>
 800a194:	e7e3      	b.n	800a15e <SST25_WriteByte+0x12>
	...

0800a198 <SST25_WriteBlock>:
{
 800a198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	4604      	mov	r4, r0
 800a1a0:	460e      	mov	r6, r1
 800a1a2:	4617      	mov	r7, r2
	if (!(SST25_ReadStatus() & FLASH_SBIT_WRITE_ENABLE))
 800a1a4:	f7ff ff90 	bl	800a0c8 <SST25_ReadStatus>
 800a1a8:	f010 0f01 	tst.w	r0, #1
 800a1ac:	d019      	beq.n	800a1e2 <SST25_WriteBlock+0x4a>
	SST25_EnableHardware_EOW();
 800a1ae:	f7ff ff81 	bl	800a0b4 <SST25_EnableHardware_EOW>
	Address &= 0xFFFFFF;
 800a1b2:	f024 487f 	bic.w	r8, r4, #4278190080	@ 0xff000000
	uint8_t Address_cmd[] =
 800a1b6:	23ad      	movs	r3, #173	@ 0xad
 800a1b8:	f88d 3004 	strb.w	r3, [sp, #4]
			(Address >> 16) & 0xFF,
 800a1bc:	f3c4 4307 	ubfx	r3, r4, #16, #8
	uint8_t Address_cmd[] =
 800a1c0:	f88d 3005 	strb.w	r3, [sp, #5]
			(Address >> 8) & 0xFF,
 800a1c4:	f3c4 240f 	ubfx	r4, r4, #8, #16
	uint8_t Address_cmd[] =
 800a1c8:	f88d 4006 	strb.w	r4, [sp, #6]
 800a1cc:	f88d 8007 	strb.w	r8, [sp, #7]
	uint8_t DataCommand[3] = {FLASH_AAI, 0x00, 0x00};
 800a1d0:	4b2a      	ldr	r3, [pc, #168]	@ (800a27c <SST25_WriteBlock+0xe4>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f8ad 3000 	strh.w	r3, [sp]
 800a1d8:	0c1b      	lsrs	r3, r3, #16
 800a1da:	f88d 3002 	strb.w	r3, [sp, #2]
	uint16_t NumBytesWritten = 0;
 800a1de:	2400      	movs	r4, #0
	while ((NumBytesRemaining = NumBytes - NumBytesWritten) > 1)
 800a1e0:	e019      	b.n	800a216 <SST25_WriteBlock+0x7e>
		SST25_WriteEnable();
 800a1e2:	f7ff ff5e 	bl	800a0a2 <SST25_WriteEnable>
 800a1e6:	e7e2      	b.n	800a1ae <SST25_WriteBlock+0x16>
			SST25_SPI_WriteBlock(Address_cmd, 4);
 800a1e8:	2104      	movs	r1, #4
 800a1ea:	eb0d 0001 	add.w	r0, sp, r1
 800a1ee:	f000 f8b3 	bl	800a358 <SST25_SPI_WriteBlock>
 800a1f2:	e018      	b.n	800a226 <SST25_WriteBlock+0x8e>
			SST25_SPI_WriteBlock(DataCommand, 3);
 800a1f4:	2103      	movs	r1, #3
 800a1f6:	4668      	mov	r0, sp
 800a1f8:	f000 f8ae 	bl	800a358 <SST25_SPI_WriteBlock>
		SST25_End();
 800a1fc:	f7ff ff2a 	bl	800a054 <SST25_End>
		SST25_Start();
 800a200:	f7ff ff1a 	bl	800a038 <SST25_Start>
		while (!HAL_GPIO_ReadPin(GENSPI_MISO_GPIO_Port, GENSPI_MISO_Pin));
 800a204:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a208:	481d      	ldr	r0, [pc, #116]	@ (800a280 <SST25_WriteBlock+0xe8>)
 800a20a:	f7f6 fe1b 	bl	8000e44 <HAL_GPIO_ReadPin>
 800a20e:	2800      	cmp	r0, #0
 800a210:	d0f8      	beq.n	800a204 <SST25_WriteBlock+0x6c>
		SST25_End();
 800a212:	f7ff ff1f 	bl	800a054 <SST25_End>
	while ((NumBytesRemaining = NumBytes - NumBytesWritten) > 1)
 800a216:	1b3d      	subs	r5, r7, r4
 800a218:	b2ad      	uxth	r5, r5
 800a21a:	2d01      	cmp	r5, #1
 800a21c:	d915      	bls.n	800a24a <SST25_WriteBlock+0xb2>
		SST25_Start();
 800a21e:	f7ff ff0b 	bl	800a038 <SST25_Start>
		if (!NumBytesWritten)
 800a222:	2c00      	cmp	r4, #0
 800a224:	d0e0      	beq.n	800a1e8 <SST25_WriteBlock+0x50>
		DataCommand[1] = pBlock[NumBytesWritten++];
 800a226:	1c63      	adds	r3, r4, #1
 800a228:	b29b      	uxth	r3, r3
 800a22a:	5d32      	ldrb	r2, [r6, r4]
 800a22c:	f88d 2001 	strb.w	r2, [sp, #1]
		DataCommand[2] = pBlock[NumBytesWritten++];
 800a230:	3402      	adds	r4, #2
 800a232:	b2a4      	uxth	r4, r4
 800a234:	5cf3      	ldrb	r3, [r6, r3]
 800a236:	f88d 3002 	strb.w	r3, [sp, #2]
		if (NumBytesWritten <= 2)
 800a23a:	2c02      	cmp	r4, #2
 800a23c:	d8da      	bhi.n	800a1f4 <SST25_WriteBlock+0x5c>
			SST25_SPI_WriteBlock(DataCommand + 1, 2);
 800a23e:	2102      	movs	r1, #2
 800a240:	f10d 0001 	add.w	r0, sp, #1
 800a244:	f000 f888 	bl	800a358 <SST25_SPI_WriteBlock>
 800a248:	e7d8      	b.n	800a1fc <SST25_WriteBlock+0x64>
	SST25_Start();
 800a24a:	f7ff fef5 	bl	800a038 <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_WRITE_DISABLE);
 800a24e:	2004      	movs	r0, #4
 800a250:	f000 f89a 	bl	800a388 <SST25_SPI_ReadWriteByte>
	SST25_End();
 800a254:	f7ff fefe 	bl	800a054 <SST25_End>
	SST25_Start();
 800a258:	f7ff feee 	bl	800a038 <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_DISABLE_SO);
 800a25c:	2080      	movs	r0, #128	@ 0x80
 800a25e:	f000 f893 	bl	800a388 <SST25_SPI_ReadWriteByte>
	SST25_End();
 800a262:	f7ff fef7 	bl	800a054 <SST25_End>
	if (NumBytesRemaining)
 800a266:	b915      	cbnz	r5, 800a26e <SST25_WriteBlock+0xd6>
}
 800a268:	b002      	add	sp, #8
 800a26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		SST25_WriteByte(Address + NumBytesWritten, pBlock[NumBytesWritten]);
 800a26e:	5d31      	ldrb	r1, [r6, r4]
 800a270:	eb04 0008 	add.w	r0, r4, r8
 800a274:	f7ff ff6a 	bl	800a14c <SST25_WriteByte>
}
 800a278:	e7f6      	b.n	800a268 <SST25_WriteBlock+0xd0>
 800a27a:	bf00      	nop
 800a27c:	08012f50 	.word	0x08012f50
 800a280:	40020800 	.word	0x40020800

0800a284 <SST25_ReadBlock>:
{
 800a284:	b570      	push	{r4, r5, r6, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	460d      	mov	r5, r1
 800a28a:	4616      	mov	r6, r2
	Address &= 0xFFFFFF;
 800a28c:	f020 447f 	bic.w	r4, r0, #4278190080	@ 0xff000000
	SST25_Start();
 800a290:	f7ff fed2 	bl	800a038 <SST25_Start>
	uint8_t Command[] =
 800a294:	230b      	movs	r3, #11
 800a296:	f88d 3000 	strb.w	r3, [sp]
			(Address >> 16) & 0xFF,
 800a29a:	0c23      	lsrs	r3, r4, #16
	uint8_t Command[] =
 800a29c:	f88d 3001 	strb.w	r3, [sp, #1]
			(Address >> 8) & 0xFF,
 800a2a0:	0a23      	lsrs	r3, r4, #8
	uint8_t Command[] =
 800a2a2:	f88d 3002 	strb.w	r3, [sp, #2]
 800a2a6:	f88d 4003 	strb.w	r4, [sp, #3]
 800a2aa:	23ff      	movs	r3, #255	@ 0xff
 800a2ac:	f88d 3004 	strb.w	r3, [sp, #4]
	SST25_SPI_WriteBlock(Command, 5);
 800a2b0:	2105      	movs	r1, #5
 800a2b2:	4668      	mov	r0, sp
 800a2b4:	f000 f850 	bl	800a358 <SST25_SPI_WriteBlock>
	SST25_SPI_ReadBlock(pBlock, NumBytes);
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f000 f858 	bl	800a370 <SST25_SPI_ReadBlock>
	SST25_End();
 800a2c0:	f7ff fec8 	bl	800a054 <SST25_End>
}
 800a2c4:	b002      	add	sp, #8
 800a2c6:	bd70      	pop	{r4, r5, r6, pc}

0800a2c8 <HandleHALResult>:

///////////////////////////////////////////////////////////////////////////////

void HandleHALResult(HAL_StatusTypeDef Value, char *pText)
{
  if (Value != HAL_OK)
 800a2c8:	b900      	cbnz	r0, 800a2cc <HandleHALResult+0x4>
 800a2ca:	4770      	bx	lr
{
 800a2cc:	b508      	push	{r3, lr}
  {
//    LCD_UsrLog("HAL error: %s\n", pText);
//    Error_Handler();
    HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); // !!!
 800a2ce:	2102      	movs	r1, #2
 800a2d0:	4801      	ldr	r0, [pc, #4]	@ (800a2d8 <HandleHALResult+0x10>)
 800a2d2:	f7f6 fdc4 	bl	8000e5e <HAL_GPIO_TogglePin>
  }
}
 800a2d6:	bd08      	pop	{r3, pc}
 800a2d8:	40020000 	.word	0x40020000

0800a2dc <I2C_write>:

///////////////////////////////////////////////////////////////////////////////
// For AR10101.c and Si4684 etc.c:

void I2C_write(uint8_t Address, uint8_t *pData, uint16_t NumBytes)
{
 800a2dc:	b500      	push	{lr}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	4613      	mov	r3, r2
  HandleHALResult(HAL_I2C_Master_Transmit(&hi2c1, Address << 1, pData, NumBytes, 1000), "HAL_I2C_Master_Transmit");
 800a2e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a2e6:	9200      	str	r2, [sp, #0]
 800a2e8:	460a      	mov	r2, r1
 800a2ea:	0041      	lsls	r1, r0, #1
 800a2ec:	4804      	ldr	r0, [pc, #16]	@ (800a300 <I2C_write+0x24>)
 800a2ee:	f7f7 f88f 	bl	8001410 <HAL_I2C_Master_Transmit>
 800a2f2:	4904      	ldr	r1, [pc, #16]	@ (800a304 <I2C_write+0x28>)
 800a2f4:	f7ff ffe8 	bl	800a2c8 <HandleHALResult>
}
 800a2f8:	b003      	add	sp, #12
 800a2fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2fe:	bf00      	nop
 800a300:	20017398 	.word	0x20017398
 800a304:	08013020 	.word	0x08013020

0800a308 <I2C_read>:

void I2C_read(uint8_t Address, uint8_t *pData, uint16_t NumBytes)
{
 800a308:	b500      	push	{lr}
 800a30a:	b083      	sub	sp, #12
 800a30c:	4613      	mov	r3, r2
  HandleHALResult(HAL_I2C_Master_Receive(&hi2c1, Address << 1, pData, NumBytes, 1000), "HAL_I2C_Master_Receive");
 800a30e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a312:	9200      	str	r2, [sp, #0]
 800a314:	460a      	mov	r2, r1
 800a316:	0041      	lsls	r1, r0, #1
 800a318:	4804      	ldr	r0, [pc, #16]	@ (800a32c <I2C_read+0x24>)
 800a31a:	f7f7 f94b 	bl	80015b4 <HAL_I2C_Master_Receive>
 800a31e:	4904      	ldr	r1, [pc, #16]	@ (800a330 <I2C_read+0x28>)
 800a320:	f7ff ffd2 	bl	800a2c8 <HandleHALResult>
}
 800a324:	b003      	add	sp, #12
 800a326:	f85d fb04 	ldr.w	pc, [sp], #4
 800a32a:	bf00      	nop
 800a32c:	20017398 	.word	0x20017398
 800a330:	08013038 	.word	0x08013038

0800a334 <GetAPB1TimerClockFrequency>:

///////////////////////////////////////////////////////////////////////////////
// MCU stuff:

uint32_t GetAPB1TimerClockFrequency()
{
 800a334:	b530      	push	{r4, r5, lr}
 800a336:	b0a5      	sub	sp, #148	@ 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  uint32_t Result;

  Result = 2 * HAL_RCC_GetPCLK1Freq();
 800a338:	f7f8 fad6 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 800a33c:	4604      	mov	r4, r0
 800a33e:	0045      	lsls	r5, r0, #1

  HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInit);
 800a340:	4668      	mov	r0, sp
 800a342:	f7f8 fe11 	bl	8002f68 <HAL_RCCEx_GetPeriphCLKConfig>

  if (PeriphClkInit.TIMPresSelection == RCC_TIMPRES_ACTIVATED)
 800a346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a34c:	d002      	beq.n	800a354 <GetAPB1TimerClockFrequency+0x20>
    Result *= 2;

  return Result;
}
 800a34e:	4628      	mov	r0, r5
 800a350:	b025      	add	sp, #148	@ 0x94
 800a352:	bd30      	pop	{r4, r5, pc}
    Result *= 2;
 800a354:	00a5      	lsls	r5, r4, #2
  return Result;
 800a356:	e7fa      	b.n	800a34e <GetAPB1TimerClockFrequency+0x1a>

0800a358 <SST25_SPI_WriteBlock>:

///////////////////////////////////////////////////////////////////////////////
// For SST25V_flash.c:

void SST25_SPI_WriteBlock(uint8_t *pBlock, uint16_t NumBytes)
{
 800a358:	b508      	push	{r3, lr}
 800a35a:	460a      	mov	r2, r1
  HAL_SPI_Transmit(&hspi3, pBlock, NumBytes, 1000);
 800a35c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a360:	4601      	mov	r1, r0
 800a362:	4802      	ldr	r0, [pc, #8]	@ (800a36c <SST25_SPI_WriteBlock+0x14>)
 800a364:	f7f9 ff2c 	bl	80041c0 <HAL_SPI_Transmit>
}
 800a368:	bd08      	pop	{r3, pc}
 800a36a:	bf00      	nop
 800a36c:	20017784 	.word	0x20017784

0800a370 <SST25_SPI_ReadBlock>:

void SST25_SPI_ReadBlock(uint8_t *pBlock, uint16_t NumBytes)
{
 800a370:	b508      	push	{r3, lr}
 800a372:	460a      	mov	r2, r1
  HAL_SPI_Receive(&hspi3, pBlock, NumBytes, 1000);
 800a374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a378:	4601      	mov	r1, r0
 800a37a:	4802      	ldr	r0, [pc, #8]	@ (800a384 <SST25_SPI_ReadBlock+0x14>)
 800a37c:	f7fa f9a0 	bl	80046c0 <HAL_SPI_Receive>
}
 800a380:	bd08      	pop	{r3, pc}
 800a382:	bf00      	nop
 800a384:	20017784 	.word	0x20017784

0800a388 <SST25_SPI_ReadWriteByte>:

uint8_t SST25_SPI_ReadWriteByte(uint8_t Value)
{
 800a388:	b500      	push	{lr}
 800a38a:	b087      	sub	sp, #28
 800a38c:	f88d 000f 	strb.w	r0, [sp, #15]
  uint8_t Received;

  HAL_SPI_TransmitReceive(&hspi3, &Value, &Received, 1, 1000);
 800a390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	2301      	movs	r3, #1
 800a398:	f10d 0217 	add.w	r2, sp, #23
 800a39c:	f10d 010f 	add.w	r1, sp, #15
 800a3a0:	4803      	ldr	r0, [pc, #12]	@ (800a3b0 <SST25_SPI_ReadWriteByte+0x28>)
 800a3a2:	f7fa f811 	bl	80043c8 <HAL_SPI_TransmitReceive>

  return Received;
}
 800a3a6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800a3aa:	b007      	add	sp, #28
 800a3ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3b0:	20017784 	.word	0x20017784

0800a3b4 <SST25_SPI_Begin>:

void SST25_SPI_Begin()
{
 800a3b4:	b508      	push	{r3, lr}
  if (pGenSPI_Begin)
 800a3b6:	4b05      	ldr	r3, [pc, #20]	@ (800a3cc <SST25_SPI_Begin+0x18>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	b103      	cbz	r3, 800a3be <SST25_SPI_Begin+0xa>
    (*pGenSPI_Begin)();
 800a3bc:	4798      	blx	r3
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, 0);
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a3c4:	4802      	ldr	r0, [pc, #8]	@ (800a3d0 <SST25_SPI_Begin+0x1c>)
 800a3c6:	f7f6 fd44 	bl	8000e52 <HAL_GPIO_WritePin>
}
 800a3ca:	bd08      	pop	{r3, pc}
 800a3cc:	20013238 	.word	0x20013238
 800a3d0:	40020800 	.word	0x40020800

0800a3d4 <SST25_SPI_End>:

void SST25_SPI_End()
{
 800a3d4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, 1);
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a3dc:	4803      	ldr	r0, [pc, #12]	@ (800a3ec <SST25_SPI_End+0x18>)
 800a3de:	f7f6 fd38 	bl	8000e52 <HAL_GPIO_WritePin>
  if (pGenSPI_End)
 800a3e2:	4b03      	ldr	r3, [pc, #12]	@ (800a3f0 <SST25_SPI_End+0x1c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <SST25_SPI_End+0x16>
    (*pGenSPI_End)();
 800a3e8:	4798      	blx	r3
}
 800a3ea:	bd08      	pop	{r3, pc}
 800a3ec:	40020800 	.word	0x40020800
 800a3f0:	20013234 	.word	0x20013234

0800a3f4 <LCD_BacklightOn>:

///////////////////////////////////////////////////////////////////////////////
// LCD:

void LCD_BacklightOn(uint8_t Value)
{
 800a3f4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LCD_NBACKLIGHT_GPIO_Port, LCD_NBACKLIGHT_Pin, Value ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800a3f6:	fab0 f280 	clz	r2, r0
 800a3fa:	0952      	lsrs	r2, r2, #5
 800a3fc:	2108      	movs	r1, #8
 800a3fe:	4802      	ldr	r0, [pc, #8]	@ (800a408 <LCD_BacklightOn+0x14>)
 800a400:	f7f6 fd27 	bl	8000e52 <HAL_GPIO_WritePin>
}
 800a404:	bd08      	pop	{r3, pc}
 800a406:	bf00      	nop
 800a408:	40020800 	.word	0x40020800

0800a40c <SetLED>:

///////////////////////////////////////////////////////////////////////////////
// LEDs:

void SetLED(LED_t LED, uint8_t Value)
{
 800a40c:	b508      	push	{r3, lr}
 800a40e:	460a      	mov	r2, r1
  switch(LED)
 800a410:	2802      	cmp	r0, #2
 800a412:	d008      	beq.n	800a426 <SetLED+0x1a>
 800a414:	2803      	cmp	r0, #3
 800a416:	d00b      	beq.n	800a430 <SetLED+0x24>
 800a418:	2801      	cmp	r0, #1
 800a41a:	d10e      	bne.n	800a43a <SetLED+0x2e>
  {
    case LED_Red:
      HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, Value);
 800a41c:	2102      	movs	r1, #2
 800a41e:	4808      	ldr	r0, [pc, #32]	@ (800a440 <SetLED+0x34>)
 800a420:	f7f6 fd17 	bl	8000e52 <HAL_GPIO_WritePin>
      break;
    default:
      Error_Handler();
      break;
  }
}
 800a424:	bd08      	pop	{r3, pc}
      HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, Value);
 800a426:	2104      	movs	r1, #4
 800a428:	4805      	ldr	r0, [pc, #20]	@ (800a440 <SetLED+0x34>)
 800a42a:	f7f6 fd12 	bl	8000e52 <HAL_GPIO_WritePin>
      break;
 800a42e:	e7f9      	b.n	800a424 <SetLED+0x18>
      HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, Value);
 800a430:	2108      	movs	r1, #8
 800a432:	4803      	ldr	r0, [pc, #12]	@ (800a440 <SetLED+0x34>)
 800a434:	f7f6 fd0d 	bl	8000e52 <HAL_GPIO_WritePin>
      break;
 800a438:	e7f4      	b.n	800a424 <SetLED+0x18>
      Error_Handler();
 800a43a:	f004 fa4b 	bl	800e8d4 <Error_Handler>
}
 800a43e:	e7f1      	b.n	800a424 <SetLED+0x18>
 800a440:	40020000 	.word	0x40020000

0800a444 <ToggleLED>:

void ToggleLED(LED_t LED)
{
 800a444:	b508      	push	{r3, lr}
  switch(LED)
 800a446:	2802      	cmp	r0, #2
 800a448:	d008      	beq.n	800a45c <ToggleLED+0x18>
 800a44a:	2803      	cmp	r0, #3
 800a44c:	d00b      	beq.n	800a466 <ToggleLED+0x22>
 800a44e:	2801      	cmp	r0, #1
 800a450:	d10e      	bne.n	800a470 <ToggleLED+0x2c>
  {
    case LED_Red:
      HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 800a452:	2102      	movs	r1, #2
 800a454:	4808      	ldr	r0, [pc, #32]	@ (800a478 <ToggleLED+0x34>)
 800a456:	f7f6 fd02 	bl	8000e5e <HAL_GPIO_TogglePin>
      break;
    default:
      Error_Handler();
      break;
  }
}
 800a45a:	bd08      	pop	{r3, pc}
      HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 800a45c:	2104      	movs	r1, #4
 800a45e:	4806      	ldr	r0, [pc, #24]	@ (800a478 <ToggleLED+0x34>)
 800a460:	f7f6 fcfd 	bl	8000e5e <HAL_GPIO_TogglePin>
      break;
 800a464:	e7f9      	b.n	800a45a <ToggleLED+0x16>
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 800a466:	2108      	movs	r1, #8
 800a468:	4803      	ldr	r0, [pc, #12]	@ (800a478 <ToggleLED+0x34>)
 800a46a:	f7f6 fcf8 	bl	8000e5e <HAL_GPIO_TogglePin>
      break;
 800a46e:	e7f4      	b.n	800a45a <ToggleLED+0x16>
      Error_Handler();
 800a470:	f004 fa30 	bl	800e8d4 <Error_Handler>
}
 800a474:	e7f1      	b.n	800a45a <ToggleLED+0x16>
 800a476:	bf00      	nop
 800a478:	40020000 	.word	0x40020000

0800a47c <HandleError>:

///////////////////////////////////////////////////////////////////////////////

void HandleError()
{
 800a47c:	b508      	push	{r3, lr}
  ToggleLED(LED_Red);
 800a47e:	2001      	movs	r0, #1
 800a480:	f7ff ffe0 	bl	800a444 <ToggleLED>
}
 800a484:	bd08      	pop	{r3, pc}
	...

0800a488 <IsUserButtonPressed>:

///////////////////////////////////////////////////////////////////////////////
// User button:

uint8_t IsUserButtonPressed()
{
 800a488:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(NUserButton_GPIO_Port, NUserButton_Pin);
 800a48a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a48e:	4803      	ldr	r0, [pc, #12]	@ (800a49c <IsUserButtonPressed+0x14>)
 800a490:	f7f6 fcd8 	bl	8000e44 <HAL_GPIO_ReadPin>
}
 800a494:	fab0 f080 	clz	r0, r0
 800a498:	0940      	lsrs	r0, r0, #5
 800a49a:	bd08      	pop	{r3, pc}
 800a49c:	40020800 	.word	0x40020800

0800a4a0 <I2S_SelectSource>:

///////////////////////////////////////////////////////////////////////////////
// I2S_Source:

void I2S_SelectSource(I2S_Source_t Source)
{
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(MUX_S0_GPIO_Port, MUX_S0_Pin, Source & 0x01);
 800a4a4:	4d06      	ldr	r5, [pc, #24]	@ (800a4c0 <I2S_SelectSource+0x20>)
 800a4a6:	f000 0201 	and.w	r2, r0, #1
 800a4aa:	2104      	movs	r1, #4
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f7f6 fcd0 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_S1_GPIO_Port, MUX_S1_Pin, Source & 0x02);
 800a4b2:	f004 0202 	and.w	r2, r4, #2
 800a4b6:	2108      	movs	r1, #8
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f7f6 fcca 	bl	8000e52 <HAL_GPIO_WritePin>
}
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	40020c00 	.word	0x40020c00

0800a4c4 <ADC_RegisterRead>:
// ADC (PCM1865):

#define ADC_I2C_Address 0x4A

uint8_t ADC_RegisterRead(uint8_t Index)
{
 800a4c4:	b500      	push	{lr}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	4602      	mov	r2, r0
  uint8_t Result;
  HAL_StatusTypeDef HAL_Result;

  HAL_Result = HAL_I2C_Mem_Read(&hi2c1, ADC_I2C_Address << 1, Index, 1, &Result, 1, 1000);
 800a4ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a4ce:	9302      	str	r3, [sp, #8]
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	f10d 0117 	add.w	r1, sp, #23
 800a4d8:	9100      	str	r1, [sp, #0]
 800a4da:	2194      	movs	r1, #148	@ 0x94
 800a4dc:	4805      	ldr	r0, [pc, #20]	@ (800a4f4 <ADC_RegisterRead+0x30>)
 800a4de:	f7f7 f9fd 	bl	80018dc <HAL_I2C_Mem_Read>
  if (HAL_Result != HAL_OK)
 800a4e2:	b920      	cbnz	r0, 800a4ee <ADC_RegisterRead+0x2a>
    HandleError();

  return Result;
}
 800a4e4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800a4e8:	b007      	add	sp, #28
 800a4ea:	f85d fb04 	ldr.w	pc, [sp], #4
    HandleError();
 800a4ee:	f7ff ffc5 	bl	800a47c <HandleError>
 800a4f2:	e7f7      	b.n	800a4e4 <ADC_RegisterRead+0x20>
 800a4f4:	20017398 	.word	0x20017398

0800a4f8 <ADC_RegisterWrite>:

void ADC_RegisterWrite(uint8_t Index, uint8_t Value)
{
 800a4f8:	b500      	push	{lr}
 800a4fa:	b085      	sub	sp, #20
  uint8_t Data[2];
  HAL_StatusTypeDef HAL_Result;

  Data[0] = Index;
 800a4fc:	f88d 000c 	strb.w	r0, [sp, #12]
  Data[1] = Value;
 800a500:	f88d 100d 	strb.w	r1, [sp, #13]

  HAL_Result = HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_Address << 1, Data, 2, 1000);
 800a504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	2302      	movs	r3, #2
 800a50c:	aa03      	add	r2, sp, #12
 800a50e:	2194      	movs	r1, #148	@ 0x94
 800a510:	4804      	ldr	r0, [pc, #16]	@ (800a524 <ADC_RegisterWrite+0x2c>)
 800a512:	f7f6 ff7d 	bl	8001410 <HAL_I2C_Master_Transmit>
  if (HAL_Result != HAL_OK)
 800a516:	b910      	cbnz	r0, 800a51e <ADC_RegisterWrite+0x26>
    HandleError();
}
 800a518:	b005      	add	sp, #20
 800a51a:	f85d fb04 	ldr.w	pc, [sp], #4
    HandleError();
 800a51e:	f7ff ffad 	bl	800a47c <HandleError>
}
 800a522:	e7f9      	b.n	800a518 <ADC_RegisterWrite+0x20>
 800a524:	20017398 	.word	0x20017398

0800a528 <ADC_CheckPowerSupplies>:
{
  ADC_RegisterWrite(0x14, (Value & 0x0F) << 4);
}

void ADC_CheckPowerSupplies()
{
 800a528:	b508      	push	{r3, lr}
  uint8_t Value;

  Value = ADC_RegisterRead(0x78);
 800a52a:	2078      	movs	r0, #120	@ 0x78
 800a52c:	f7ff ffca 	bl	800a4c4 <ADC_RegisterRead>

  if (!(Value || ~0x07))
    HandleError();
}
 800a530:	bd08      	pop	{r3, pc}

0800a532 <ADC_SelectSource>:
  ADC_RegisterWrite(0x12, 0x44); // Set GPIO 1 and 0 to be outputs.
  ADC_RegisterWrite(0x13, 0x44); // Set GPIO 3 and 2 to be outputs.
}

void ADC_SelectSource(ADC_Source_t Source)
{
 800a532:	b510      	push	{r4, lr}
  uint8_t WriteValue;

  switch(Source)
 800a534:	2801      	cmp	r0, #1
 800a536:	d003      	beq.n	800a540 <ADC_SelectSource+0xe>
 800a538:	2802      	cmp	r0, #2
 800a53a:	d10b      	bne.n	800a554 <ADC_SelectSource+0x22>
    case ADC_Source_AR1010:
      WriteValue = 0x41;
      break;

    case ADC_Source_BlueJack:
      WriteValue = 0x42;
 800a53c:	2442      	movs	r4, #66	@ 0x42
 800a53e:	e000      	b.n	800a542 <ADC_SelectSource+0x10>
  switch(Source)
 800a540:	2441      	movs	r4, #65	@ 0x41
    default:
      WriteValue = 0x40;
      break;
  }

  ADC_RegisterWrite(0x06, WriteValue);
 800a542:	4621      	mov	r1, r4
 800a544:	2006      	movs	r0, #6
 800a546:	f7ff ffd7 	bl	800a4f8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x07, WriteValue);
 800a54a:	4621      	mov	r1, r4
 800a54c:	2007      	movs	r0, #7
 800a54e:	f7ff ffd3 	bl	800a4f8 <ADC_RegisterWrite>
}
 800a552:	bd10      	pop	{r4, pc}
      WriteValue = 0x40;
 800a554:	2440      	movs	r4, #64	@ 0x40
 800a556:	e7f4      	b.n	800a542 <ADC_SelectSource+0x10>

0800a558 <ADC_SetGain>:

void ADC_SetGain(float Value)
// -12dB to +32dB in 0.5dB steps.
{
 800a558:	b510      	push	{r4, lr}
 800a55a:	ed2d 8b02 	vpush	{d8}
 800a55e:	b082      	sub	sp, #8
 800a560:	ee08 0a10 	vmov	s16, r0
  uint8_t RegisterValue;

  if ((Value < -12.0f) || (Value > 32.0f))
 800a564:	eefa 7a08 	vmov.f32	s15, #168	@ 0xc1400000 -12.0
 800a568:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a570:	d406      	bmi.n	800a580 <ADC_SetGain+0x28>
 800a572:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800a5b4 <ADC_SetGain+0x5c>
 800a576:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a57e:	dd01      	ble.n	800a584 <ADC_SetGain+0x2c>
    Error_Handler();
 800a580:	f004 f9a8 	bl	800e8d4 <Error_Handler>

  RegisterValue = (int)round(2.0f * Value);
 800a584:	ee38 7a08 	vadd.f32	s14, s16, s16
 800a588:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800a58c:	feb8 7b47 	vrinta.f64	d7, d7
 800a590:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a594:	edcd 7a01 	vstr	s15, [sp, #4]
 800a598:	f89d 4004 	ldrb.w	r4, [sp, #4]

  ADC_RegisterWrite(0x01, RegisterValue);
 800a59c:	4621      	mov	r1, r4
 800a59e:	2001      	movs	r0, #1
 800a5a0:	f7ff ffaa 	bl	800a4f8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x02, RegisterValue);
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	2002      	movs	r0, #2
 800a5a8:	f7ff ffa6 	bl	800a4f8 <ADC_RegisterWrite>
}
 800a5ac:	b002      	add	sp, #8
 800a5ae:	ecbd 8b02 	vpop	{d8}
 800a5b2:	bd10      	pop	{r4, pc}
 800a5b4:	42000000 	.word	0x42000000

0800a5b8 <ADC_Initialize>:
{
 800a5b8:	b508      	push	{r3, lr}
  ADC_RegisterWrite(0x00, 0x00); // Default to bank 0.
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	f7ff ff9b 	bl	800a4f8 <ADC_RegisterWrite>
  ADC_CheckPowerSupplies();
 800a5c2:	f7ff ffb1 	bl	800a528 <ADC_CheckPowerSupplies>
  ADC_SelectSource(ADC_Source_None);
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f7ff ffb3 	bl	800a532 <ADC_SelectSource>
  ADC_SetGain(0);
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	f7ff ffc3 	bl	800a558 <ADC_SetGain>
  ADC_RegisterWrite(0x10, 0x00); // Set GPIO 1 and 0 to GPIO.
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	2010      	movs	r0, #16
 800a5d6:	f7ff ff8f 	bl	800a4f8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x11, 0x00); // Set GPIO 3 and 2 to GPIO.
 800a5da:	2100      	movs	r1, #0
 800a5dc:	2011      	movs	r0, #17
 800a5de:	f7ff ff8b 	bl	800a4f8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x12, 0x44); // Set GPIO 1 and 0 to be outputs.
 800a5e2:	2144      	movs	r1, #68	@ 0x44
 800a5e4:	2012      	movs	r0, #18
 800a5e6:	f7ff ff87 	bl	800a4f8 <ADC_RegisterWrite>
  ADC_RegisterWrite(0x13, 0x44); // Set GPIO 3 and 2 to be outputs.
 800a5ea:	2144      	movs	r1, #68	@ 0x44
 800a5ec:	2013      	movs	r0, #19
 800a5ee:	f7ff ff83 	bl	800a4f8 <ADC_RegisterWrite>
}
 800a5f2:	bd08      	pop	{r3, pc}

0800a5f4 <DAC_Mute>:
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
  DAC_Mute(1);
}

void DAC_Mute(uint8_t Value)
{
 800a5f4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, Value ? 0 : 1);
 800a5f6:	fab0 f280 	clz	r2, r0
 800a5fa:	0952      	lsrs	r2, r2, #5
 800a5fc:	2140      	movs	r1, #64	@ 0x40
 800a5fe:	4802      	ldr	r0, [pc, #8]	@ (800a608 <DAC_Mute+0x14>)
 800a600:	f7f6 fc27 	bl	8000e52 <HAL_GPIO_WritePin>
}
 800a604:	bd08      	pop	{r3, pc}
 800a606:	bf00      	nop
 800a608:	40020c00 	.word	0x40020c00

0800a60c <DAC_Initialize>:
{
 800a60c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, 0); // Latency.
 800a60e:	4c07      	ldr	r4, [pc, #28]	@ (800a62c <DAC_Initialize+0x20>)
 800a610:	2200      	movs	r2, #0
 800a612:	2110      	movs	r1, #16
 800a614:	4620      	mov	r0, r4
 800a616:	f7f6 fc1c 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
 800a61a:	2200      	movs	r2, #0
 800a61c:	2120      	movs	r1, #32
 800a61e:	4620      	mov	r0, r4
 800a620:	f7f6 fc17 	bl	8000e52 <HAL_GPIO_WritePin>
  DAC_Mute(1);
 800a624:	2001      	movs	r0, #1
 800a626:	f7ff ffe5 	bl	800a5f4 <DAC_Mute>
}
 800a62a:	bd10      	pop	{r4, pc}
 800a62c:	40020c00 	.word	0x40020c00

0800a630 <PA_RegisterWrite8>:
// PA (TAS5719):

#define PA_I2C_Address 0x2A

void PA_RegisterWrite8(uint8_t Index, uint8_t Value)
{
 800a630:	b500      	push	{lr}
 800a632:	b087      	sub	sp, #28
 800a634:	4602      	mov	r2, r0
 800a636:	f88d 1017 	strb.w	r1, [sp, #23]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 800a63a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a63e:	9302      	str	r3, [sp, #8]
 800a640:	2301      	movs	r3, #1
 800a642:	9301      	str	r3, [sp, #4]
 800a644:	f10d 0117 	add.w	r1, sp, #23
 800a648:	9100      	str	r1, [sp, #0]
 800a64a:	2154      	movs	r1, #84	@ 0x54
 800a64c:	4804      	ldr	r0, [pc, #16]	@ (800a660 <PA_RegisterWrite8+0x30>)
 800a64e:	f7f7 f86f 	bl	8001730 <HAL_I2C_Mem_Write>
 800a652:	4904      	ldr	r1, [pc, #16]	@ (800a664 <PA_RegisterWrite8+0x34>)
 800a654:	f7ff fe38 	bl	800a2c8 <HandleHALResult>
}
 800a658:	b007      	add	sp, #28
 800a65a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a65e:	bf00      	nop
 800a660:	20017398 	.word	0x20017398
 800a664:	08013050 	.word	0x08013050

0800a668 <PA_RegisterRead8>:

uint8_t PA_RegisterRead8(uint8_t Index)
{
 800a668:	b500      	push	{lr}
 800a66a:	b087      	sub	sp, #28
 800a66c:	4602      	mov	r2, r0
  uint8_t Result;

  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, Index, 1, &Result, 1, 1000), "HAL_I2C_Mem_Read");
 800a66e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a672:	9302      	str	r3, [sp, #8]
 800a674:	2301      	movs	r3, #1
 800a676:	9301      	str	r3, [sp, #4]
 800a678:	f10d 0117 	add.w	r1, sp, #23
 800a67c:	9100      	str	r1, [sp, #0]
 800a67e:	2154      	movs	r1, #84	@ 0x54
 800a680:	4805      	ldr	r0, [pc, #20]	@ (800a698 <PA_RegisterRead8+0x30>)
 800a682:	f7f7 f92b 	bl	80018dc <HAL_I2C_Mem_Read>
 800a686:	4905      	ldr	r1, [pc, #20]	@ (800a69c <PA_RegisterRead8+0x34>)
 800a688:	f7ff fe1e 	bl	800a2c8 <HandleHALResult>

  return Result;
}
 800a68c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800a690:	b007      	add	sp, #28
 800a692:	f85d fb04 	ldr.w	pc, [sp], #4
 800a696:	bf00      	nop
 800a698:	20017398 	.word	0x20017398
 800a69c:	08013064 	.word	0x08013064

0800a6a0 <PA_RegisterWrite16>:

void PA_RegisterWrite16(uint8_t Index, uint16_t Value)
{
 800a6a0:	b500      	push	{lr}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	4602      	mov	r2, r0
  uint8_t Data[2];

  Data[0] = (uint8_t)(Value >> 8);
 800a6a6:	0a0b      	lsrs	r3, r1, #8
 800a6a8:	f88d 3014 	strb.w	r3, [sp, #20]
  Data[1] = (uint8_t)(Value);
 800a6ac:	f88d 1015 	strb.w	r1, [sp, #21]

  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 2, 1000), "HAL_I2C_Mem_Write");
 800a6b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a6b4:	9302      	str	r3, [sp, #8]
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	ab05      	add	r3, sp, #20
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	2301      	movs	r3, #1
 800a6c0:	2154      	movs	r1, #84	@ 0x54
 800a6c2:	4804      	ldr	r0, [pc, #16]	@ (800a6d4 <PA_RegisterWrite16+0x34>)
 800a6c4:	f7f7 f834 	bl	8001730 <HAL_I2C_Mem_Write>
 800a6c8:	4903      	ldr	r1, [pc, #12]	@ (800a6d8 <PA_RegisterWrite16+0x38>)
 800a6ca:	f7ff fdfd 	bl	800a2c8 <HandleHALResult>
}
 800a6ce:	b007      	add	sp, #28
 800a6d0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6d4:	20017398 	.word	0x20017398
 800a6d8:	08013050 	.word	0x08013050

0800a6dc <PA_RegisterWrite32>:

void PA_RegisterWrite32(uint8_t Index, uint32_t Value)
{
 800a6dc:	b500      	push	{lr}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	4602      	mov	r2, r0
  uint8_t Data[4];

  Data[0] = (uint8_t)(Value >> 24);
 800a6e2:	0e0b      	lsrs	r3, r1, #24
 800a6e4:	f88d 3014 	strb.w	r3, [sp, #20]
  Data[1] = (uint8_t)(Value >> 16);
 800a6e8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800a6ec:	f88d 3015 	strb.w	r3, [sp, #21]
  Data[2] = (uint8_t)(Value >> 8);
 800a6f0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a6f4:	f88d 3016 	strb.w	r3, [sp, #22]
  Data[3] = (uint8_t)(Value);
 800a6f8:	f88d 1017 	strb.w	r1, [sp, #23]

  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 800a6fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a700:	9302      	str	r3, [sp, #8]
 800a702:	2304      	movs	r3, #4
 800a704:	9301      	str	r3, [sp, #4]
 800a706:	ab05      	add	r3, sp, #20
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	2301      	movs	r3, #1
 800a70c:	2154      	movs	r1, #84	@ 0x54
 800a70e:	4804      	ldr	r0, [pc, #16]	@ (800a720 <PA_RegisterWrite32+0x44>)
 800a710:	f7f7 f80e 	bl	8001730 <HAL_I2C_Mem_Write>
 800a714:	4903      	ldr	r1, [pc, #12]	@ (800a724 <PA_RegisterWrite32+0x48>)
 800a716:	f7ff fdd7 	bl	800a2c8 <HandleHALResult>
}
 800a71a:	b007      	add	sp, #28
 800a71c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a720:	20017398 	.word	0x20017398
 800a724:	08013050 	.word	0x08013050

0800a728 <PA_GetErrorStatus>:

  PA_Mute();
}

uint8_t PA_GetErrorStatus()
{
 800a728:	b508      	push	{r3, lr}
  return PA_RegisterRead8(0x02);
 800a72a:	2002      	movs	r0, #2
 800a72c:	f7ff ff9c 	bl	800a668 <PA_RegisterRead8>
}
 800a730:	bd08      	pop	{r3, pc}

0800a732 <PA_ClearErrorStatus>:

void PA_ClearErrorStatus()
{
 800a732:	b508      	push	{r3, lr}
  PA_RegisterWrite8(0x02, 0x00);
 800a734:	2100      	movs	r1, #0
 800a736:	2002      	movs	r0, #2
 800a738:	f7ff ff7a 	bl	800a630 <PA_RegisterWrite8>
}
 800a73c:	bd08      	pop	{r3, pc}
	...

0800a740 <PA_SetMasterVolume>:

void PA_SetMasterVolume(float Volume_dB)
{
 800a740:	b508      	push	{r3, lr}
 800a742:	ee07 0a10 	vmov	s14, r0
  uint16_t RegisterValue;

  if (Volume_dB > 24)
 800a746:	eef3 7a08 	vmov.f32	s15, #56	@ 0x41c00000  24.0
 800a74a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a752:	dc09      	bgt.n	800a768 <PA_SetMasterVolume+0x28>
    Volume_dB = 24;
  if (Volume_dB < -103.75)
 800a754:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a790 <PA_SetMasterVolume+0x50>
 800a758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a760:	d504      	bpl.n	800a76c <PA_SetMasterVolume+0x2c>
    Volume_dB = -103.75;
 800a762:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800a790 <PA_SetMasterVolume+0x50>
 800a766:	e001      	b.n	800a76c <PA_SetMasterVolume+0x2c>
    Volume_dB = 24;
 800a768:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0

  RegisterValue = 8 * (24 - Volume_dB);
 800a76c:	eef3 7a08 	vmov.f32	s15, #56	@ 0x41c00000  24.0
 800a770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a774:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800a778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a77c:	eefc 7ae7 	vcvt.u32.f32	s15, s15

  PA_RegisterWrite16(0x07, RegisterValue);
 800a780:	ee17 3a90 	vmov	r3, s15
 800a784:	b299      	uxth	r1, r3
 800a786:	2007      	movs	r0, #7
 800a788:	f7ff ff8a 	bl	800a6a0 <PA_RegisterWrite16>
}
 800a78c:	bd08      	pop	{r3, pc}
 800a78e:	bf00      	nop
 800a790:	c2cf8000 	.word	0xc2cf8000

0800a794 <PA_Mute>:

void PA_Mute()
{
 800a794:	b508      	push	{r3, lr}
  PA_RegisterWrite16(0x07, 0x03FF);
 800a796:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a79a:	2007      	movs	r0, #7
 800a79c:	f7ff ff80 	bl	800a6a0 <PA_RegisterWrite16>
}
 800a7a0:	bd08      	pop	{r3, pc}
	...

0800a7a4 <PA_Initialize>:
{
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4605      	mov	r5, r0
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 0);
 800a7a8:	4c1d      	ldr	r4, [pc, #116]	@ (800a820 <PA_Initialize+0x7c>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	2101      	movs	r1, #1
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f7f6 fb4f 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 0);
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2102      	movs	r1, #2
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f7f6 fb4a 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800a7be:	2001      	movs	r0, #1
 800a7c0:	f7f5 ff5a 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 1);
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f7f6 fb42 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	f7f5 ff52 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 1);
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	2102      	movs	r1, #2
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f7f6 fb3a 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_Delay(10); // ???
 800a7de:	200a      	movs	r0, #10
 800a7e0:	f7f5 ff4a 	bl	8000678 <HAL_Delay>
  PA_RegisterWrite32(0x4F, 0x00000007);
 800a7e4:	2107      	movs	r1, #7
 800a7e6:	204f      	movs	r0, #79	@ 0x4f
 800a7e8:	f7ff ff78 	bl	800a6dc <PA_RegisterWrite32>
  PA_RegisterWrite8(0x1B, 0x00);
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	201b      	movs	r0, #27
 800a7f0:	f7ff ff1e 	bl	800a630 <PA_RegisterWrite8>
  PA_RegisterWrite8(0x00, 0x6C);
 800a7f4:	216c      	movs	r1, #108	@ 0x6c
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	f7ff ff1a 	bl	800a630 <PA_RegisterWrite8>
  if (HeadphoneMode)
 800a7fc:	b155      	cbz	r5, 800a814 <PA_Initialize+0x70>
    PA_RegisterWrite8(0x05, 0x01); // !!! Is this necessary?
 800a7fe:	2101      	movs	r1, #1
 800a800:	2005      	movs	r0, #5
 800a802:	f7ff ff15 	bl	800a630 <PA_RegisterWrite8>
    PA_RegisterWrite8(0x05, 0x13); // 0x13 or 0x1B. But 0x1B gives background noise and distortion.
 800a806:	2113      	movs	r1, #19
 800a808:	2005      	movs	r0, #5
 800a80a:	f7ff ff11 	bl	800a630 <PA_RegisterWrite8>
  PA_Mute();
 800a80e:	f7ff ffc1 	bl	800a794 <PA_Mute>
}
 800a812:	bd38      	pop	{r3, r4, r5, pc}
    PA_RegisterWrite8(0x05, 0x00);
 800a814:	2100      	movs	r1, #0
 800a816:	2005      	movs	r0, #5
 800a818:	f7ff ff0a 	bl	800a630 <PA_RegisterWrite8>
 800a81c:	e7f7      	b.n	800a80e <PA_Initialize+0x6a>
 800a81e:	bf00      	nop
 800a820:	40020c00 	.word	0x40020c00

0800a824 <ESP32_A_Enable>:

///////////////////////////////////////////////////////////////////////////////
// ESP32s:

void ESP32_A_Enable(uint8_t Value)
{
 800a824:	b508      	push	{r3, lr}
 800a826:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(ESP32_A_EN_GPIO_Port, ESP32_A_EN_Pin, Value);
 800a828:	2102      	movs	r1, #2
 800a82a:	4802      	ldr	r0, [pc, #8]	@ (800a834 <ESP32_A_Enable+0x10>)
 800a82c:	f7f6 fb11 	bl	8000e52 <HAL_GPIO_WritePin>
}
 800a830:	bd08      	pop	{r3, pc}
 800a832:	bf00      	nop
 800a834:	40021000 	.word	0x40021000

0800a838 <ESP32_B_Enable>:

void ESP32_B_Enable(uint8_t Value)
{
 800a838:	b508      	push	{r3, lr}
 800a83a:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(ESP32_B_EN_GPIO_Port, ESP32_B_EN_Pin, Value);
 800a83c:	2110      	movs	r1, #16
 800a83e:	4802      	ldr	r0, [pc, #8]	@ (800a848 <ESP32_B_Enable+0x10>)
 800a840:	f7f6 fb07 	bl	8000e52 <HAL_GPIO_WritePin>
}
 800a844:	bd08      	pop	{r3, pc}
 800a846:	bf00      	nop
 800a848:	40021000 	.word	0x40021000

0800a84c <stream_create>:
#include "PJB_StreamUtils.h"

static void ensure_space(Stream *stream, uint16_t required_space);

Stream *stream_create()
{
 800a84c:	b508      	push	{r3, lr}
	Stream *stream = malloc(sizeof(Stream));
 800a84e:	208c      	movs	r0, #140	@ 0x8c
 800a850:	f004 ffce 	bl	800f7f0 <malloc>
	stream->temp_size = 0;
 800a854:	2100      	movs	r1, #0
 800a856:	f8a0 1080 	strh.w	r1, [r0, #128]	@ 0x80
	stream->data_size = 2;
 800a85a:	2202      	movs	r2, #2
 800a85c:	f8a0 2088 	strh.w	r2, [r0, #136]	@ 0x88
	stream->data = NULL;
 800a860:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
	stream->read_address = 2;
 800a864:	f8a0 208a 	strh.w	r2, [r0, #138]	@ 0x8a
	return stream;
}
 800a868:	bd08      	pop	{r3, pc}

0800a86a <stream_load>:

Stream *stream_load(uint8_t *data, uint16_t size)
{
 800a86a:	b538      	push	{r3, r4, r5, lr}
 800a86c:	4604      	mov	r4, r0
 800a86e:	460d      	mov	r5, r1
	Stream *stream = malloc(sizeof(Stream));
 800a870:	208c      	movs	r0, #140	@ 0x8c
 800a872:	f004 ffbd 	bl	800f7f0 <malloc>
	stream->temp_size = 0;
 800a876:	2200      	movs	r2, #0
 800a878:	f8a0 2080 	strh.w	r2, [r0, #128]	@ 0x80
	stream->data_size = size;
 800a87c:	f8a0 5088 	strh.w	r5, [r0, #136]	@ 0x88
	stream->data = data;
 800a880:	f8c0 4084 	str.w	r4, [r0, #132]	@ 0x84
	stream->read_address = 2;
 800a884:	2202      	movs	r2, #2
 800a886:	f8a0 208a 	strh.w	r2, [r0, #138]	@ 0x8a
	return stream;
}
 800a88a:	bd38      	pop	{r3, r4, r5, pc}

0800a88c <stream_free>:

void stream_free(Stream *stream)
{
	if (!stream)
 800a88c:	b150      	cbz	r0, 800a8a4 <stream_free+0x18>
{
 800a88e:	b510      	push	{r4, lr}
 800a890:	4604      	mov	r4, r0
		return;

	if (stream->data)
 800a892:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800a896:	b108      	cbz	r0, 800a89c <stream_free+0x10>
		free(stream->data);
 800a898:	f004 ffb2 	bl	800f800 <free>

	free(stream);
 800a89c:	4620      	mov	r0, r4
 800a89e:	f004 ffaf 	bl	800f800 <free>
}
 800a8a2:	bd10      	pop	{r4, pc}
 800a8a4:	4770      	bx	lr

0800a8a6 <stream_read_uint8>:
	stream->temp_size += size;
}

uint8_t stream_read_uint8(Stream *stream)
{
	return stream->data[stream->read_address++];
 800a8a6:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800a8aa:	f8b0 308a 	ldrh.w	r3, [r0, #138]	@ 0x8a
 800a8ae:	1c59      	adds	r1, r3, #1
 800a8b0:	f8a0 108a 	strh.w	r1, [r0, #138]	@ 0x8a
}
 800a8b4:	5cd0      	ldrb	r0, [r2, r3]
 800a8b6:	4770      	bx	lr

0800a8b8 <stream_read_uint32>:
	value |= (uint16_t) stream->data[stream->read_address++] << 8;
	return value;
}

uint32_t stream_read_uint32(Stream *stream)
{
 800a8b8:	b410      	push	{r4}
	uint32_t value = 0;
	value |= stream->data[stream->read_address++];
 800a8ba:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800a8be:	f8b0 308a 	ldrh.w	r3, [r0, #138]	@ 0x8a
 800a8c2:	1c59      	adds	r1, r3, #1
 800a8c4:	b289      	uxth	r1, r1
 800a8c6:	f8a0 108a 	strh.w	r1, [r0, #138]	@ 0x8a
 800a8ca:	5ce2      	ldrb	r2, [r4, r3]
	value |= (uint32_t) stream->data[stream->read_address++] << 8;
 800a8cc:	f103 0c02 	add.w	ip, r3, #2
 800a8d0:	fa1f fc8c 	uxth.w	ip, ip
 800a8d4:	f8a0 c08a 	strh.w	ip, [r0, #138]	@ 0x8a
 800a8d8:	5c61      	ldrb	r1, [r4, r1]
 800a8da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	value |= (uint32_t) stream->data[stream->read_address++] << 16;
 800a8de:	1cd9      	adds	r1, r3, #3
 800a8e0:	b289      	uxth	r1, r1
 800a8e2:	f8a0 108a 	strh.w	r1, [r0, #138]	@ 0x8a
 800a8e6:	f814 c00c 	ldrb.w	ip, [r4, ip]
 800a8ea:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
	value |= (uint32_t) stream->data[stream->read_address++] << 24;
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	f8a0 308a 	strh.w	r3, [r0, #138]	@ 0x8a
 800a8f4:	5c60      	ldrb	r0, [r4, r1]
	return value;
}
 800a8f6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800a8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <stream_read_bytes>:

void stream_read_bytes(Stream *stream, uint8_t *data, uint16_t size)
{
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4604      	mov	r4, r0
 800a904:	4608      	mov	r0, r1
 800a906:	4615      	mov	r5, r2
	memcpy(data, stream->data + stream->read_address, size);
 800a908:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800a90c:	f8b4 308a 	ldrh.w	r3, [r4, #138]	@ 0x8a
 800a910:	4419      	add	r1, r3
 800a912:	f005 ff36 	bl	8010782 <memcpy>
	stream->read_address += size;
 800a916:	f8b4 308a 	ldrh.w	r3, [r4, #138]	@ 0x8a
 800a91a:	195a      	adds	r2, r3, r5
 800a91c:	f8a4 208a 	strh.w	r2, [r4, #138]	@ 0x8a
}
 800a920:	bd38      	pop	{r3, r4, r5, pc}

0800a922 <stream_flush>:

	stream_flush(stream);
}

void stream_flush(Stream *stream)
{
 800a922:	b510      	push	{r4, lr}
 800a924:	4604      	mov	r4, r0
	stream->data = realloc(stream->data, stream->data_size + stream->temp_size);
 800a926:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
 800a92a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800a92e:	4419      	add	r1, r3
 800a930:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800a934:	f005 f81a 	bl	800f96c <realloc>
 800a938:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
	memcpy(stream->data + stream->data_size, stream->temp, stream->temp_size);
 800a93c:	f8b4 3088 	ldrh.w	r3, [r4, #136]	@ 0x88
 800a940:	f8b4 2080 	ldrh.w	r2, [r4, #128]	@ 0x80
 800a944:	4621      	mov	r1, r4
 800a946:	4418      	add	r0, r3
 800a948:	f005 ff1b 	bl	8010782 <memcpy>
	stream->data_size += stream->temp_size;
 800a94c:	f8b4 3088 	ldrh.w	r3, [r4, #136]	@ 0x88
 800a950:	f8b4 2080 	ldrh.w	r2, [r4, #128]	@ 0x80
 800a954:	4413      	add	r3, r2
 800a956:	b29b      	uxth	r3, r3
 800a958:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
	stream->temp_size = 0;
 800a95c:	2200      	movs	r2, #0
 800a95e:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80

	stream->data[0] = stream->data_size & 0xFF;
 800a962:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800a966:	7013      	strb	r3, [r2, #0]
	stream->data[1] = stream->data_size >> 8;
 800a968:	f8b4 3088 	ldrh.w	r3, [r4, #136]	@ 0x88
 800a96c:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800a970:	0a1b      	lsrs	r3, r3, #8
 800a972:	7053      	strb	r3, [r2, #1]
}
 800a974:	bd10      	pop	{r4, pc}

0800a976 <ensure_space>:
{
 800a976:	b508      	push	{r3, lr}
	if (stream->temp_size + required_space <= BUFFER_SIZE)
 800a978:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800a97c:	4419      	add	r1, r3
 800a97e:	2980      	cmp	r1, #128	@ 0x80
 800a980:	dc00      	bgt.n	800a984 <ensure_space+0xe>
}
 800a982:	bd08      	pop	{r3, pc}
	stream_flush(stream);
 800a984:	f7ff ffcd 	bl	800a922 <stream_flush>
 800a988:	e7fb      	b.n	800a982 <ensure_space+0xc>

0800a98a <stream_write_uint8>:
{
 800a98a:	b538      	push	{r3, r4, r5, lr}
 800a98c:	4604      	mov	r4, r0
 800a98e:	460d      	mov	r5, r1
	ensure_space(stream, 1);
 800a990:	2101      	movs	r1, #1
 800a992:	f7ff fff0 	bl	800a976 <ensure_space>
	stream->temp[stream->temp_size++] = value;
 800a996:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 800a9a0:	54e5      	strb	r5, [r4, r3]
}
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}

0800a9a4 <stream_write_uint32>:
{
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	460d      	mov	r5, r1
	ensure_space(stream, 4);
 800a9aa:	2104      	movs	r1, #4
 800a9ac:	f7ff ffe3 	bl	800a976 <ensure_space>
	stream->temp[stream->temp_size++] = value & 0xFF;
 800a9b0:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	b292      	uxth	r2, r2
 800a9b8:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 800a9bc:	54e5      	strb	r5, [r4, r3]
	stream->temp[stream->temp_size++] = (value >> 8) & 0xFF;
 800a9be:	0a28      	lsrs	r0, r5, #8
 800a9c0:	1c99      	adds	r1, r3, #2
 800a9c2:	b289      	uxth	r1, r1
 800a9c4:	f8a4 1080 	strh.w	r1, [r4, #128]	@ 0x80
 800a9c8:	54a0      	strb	r0, [r4, r2]
	stream->temp[stream->temp_size++] = (value >> 16) & 0xFF;
 800a9ca:	0c28      	lsrs	r0, r5, #16
 800a9cc:	1cda      	adds	r2, r3, #3
 800a9ce:	b292      	uxth	r2, r2
 800a9d0:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 800a9d4:	5460      	strb	r0, [r4, r1]
	stream->temp[stream->temp_size++] = value >> 24;
 800a9d6:	0e2d      	lsrs	r5, r5, #24
 800a9d8:	3304      	adds	r3, #4
 800a9da:	f8a4 3080 	strh.w	r3, [r4, #128]	@ 0x80
 800a9de:	54a5      	strb	r5, [r4, r2]
}
 800a9e0:	bd38      	pop	{r3, r4, r5, pc}

0800a9e2 <stream_write_bytes>:
	if (size > BUFFER_SIZE)
 800a9e2:	2a80      	cmp	r2, #128	@ 0x80
 800a9e4:	d900      	bls.n	800a9e8 <stream_write_bytes+0x6>
 800a9e6:	4770      	bx	lr
{
 800a9e8:	b570      	push	{r4, r5, r6, lr}
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	460e      	mov	r6, r1
 800a9ee:	4614      	mov	r4, r2
	ensure_space(stream, size);
 800a9f0:	4611      	mov	r1, r2
 800a9f2:	f7ff ffc0 	bl	800a976 <ensure_space>
	memcpy(stream->temp + stream->temp_size, data, size);
 800a9f6:	f8b5 0080 	ldrh.w	r0, [r5, #128]	@ 0x80
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4428      	add	r0, r5
 800aa00:	f005 febf 	bl	8010782 <memcpy>
	stream->temp_size += size;
 800aa04:	f8b5 3080 	ldrh.w	r3, [r5, #128]	@ 0x80
 800aa08:	4423      	add	r3, r4
 800aa0a:	f8a5 3080 	strh.w	r3, [r5, #128]	@ 0x80
}
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}

0800aa10 <si468x_reset>:
static uint8_t update_interrupts = 0;

Interrupt_Status_t Interrupt_Status;

void si468x_reset(uint8_t Value)
{
 800aa10:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SI_NRST_GPIO_Port, SI_NRST_Pin, Value ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800aa12:	fab0 f280 	clz	r2, r0
 800aa16:	0952      	lsrs	r2, r2, #5
 800aa18:	2140      	movs	r1, #64	@ 0x40
 800aa1a:	4802      	ldr	r0, [pc, #8]	@ (800aa24 <si468x_reset+0x14>)
 800aa1c:	f7f6 fa19 	bl	8000e52 <HAL_GPIO_WritePin>
}
 800aa20:	bd08      	pop	{r3, pc}
 800aa22:	bf00      	nop
 800aa24:	40020400 	.word	0x40020400

0800aa28 <si468x_interrupt>:
//      {
//        if (GPIO_Pin == SI_INT_Pin)
//          si468x_interrupt();
//      }
{
	update_interrupts = 1;
 800aa28:	4b01      	ldr	r3, [pc, #4]	@ (800aa30 <si468x_interrupt+0x8>)
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	701a      	strb	r2, [r3, #0]
}
 800aa2e:	4770      	bx	lr
 800aa30:	20013241 	.word	0x20013241

0800aa34 <si468x_read_response>:
	uint8_t error = si468x_read_response(read_buffer, 4);
	return error;
}

uint8_t si468x_read_response(uint8_t *response_buffer, uint16_t response_size)
{
 800aa34:	b530      	push	{r4, r5, lr}
 800aa36:	b083      	sub	sp, #12
 800aa38:	4604      	mov	r4, r0
 800aa3a:	460d      	mov	r5, r1
	uint8_t command = RD_REPLY;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	f88d 3007 	strb.w	r3, [sp, #7]
	I2C_write(Si4684_ADDRESS, &command, 1);
 800aa42:	2201      	movs	r2, #1
 800aa44:	f10d 0107 	add.w	r1, sp, #7
 800aa48:	2064      	movs	r0, #100	@ 0x64
 800aa4a:	f7ff fc47 	bl	800a2dc <I2C_write>
	I2C_read(Si4684_ADDRESS, response_buffer, response_size);
 800aa4e:	462a      	mov	r2, r5
 800aa50:	4621      	mov	r1, r4
 800aa52:	2064      	movs	r0, #100	@ 0x64
 800aa54:	f7ff fc58 	bl	800a308 <I2C_read>
	return response_buffer[0] & 0x40 ? 1 : 0;
 800aa58:	7820      	ldrb	r0, [r4, #0]
}
 800aa5a:	f3c0 1080 	ubfx	r0, r0, #6, #1
 800aa5e:	b003      	add	sp, #12
 800aa60:	bd30      	pop	{r4, r5, pc}
	...

0800aa64 <si468x_update_interrupts>:
{
 800aa64:	b500      	push	{lr}
 800aa66:	b083      	sub	sp, #12
	si468x_read_response(&status_byte, 1);
 800aa68:	2101      	movs	r1, #1
 800aa6a:	f10d 0007 	add.w	r0, sp, #7
 800aa6e:	f7ff ffe1 	bl	800aa34 <si468x_read_response>
	while (status_byte == 0x00)
 800aa72:	e004      	b.n	800aa7e <si468x_update_interrupts+0x1a>
		si468x_read_response(&status_byte, 1); // !!!
 800aa74:	2101      	movs	r1, #1
 800aa76:	f10d 0007 	add.w	r0, sp, #7
 800aa7a:	f7ff ffdb 	bl	800aa34 <si468x_read_response>
	while (status_byte == 0x00)
 800aa7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d0f6      	beq.n	800aa74 <si468x_update_interrupts+0x10>
	Interrupt_Status.interrupt_register = status_byte;
 800aa86:	4a04      	ldr	r2, [pc, #16]	@ (800aa98 <si468x_update_interrupts+0x34>)
 800aa88:	7013      	strb	r3, [r2, #0]
	update_interrupts = 0;
 800aa8a:	4b04      	ldr	r3, [pc, #16]	@ (800aa9c <si468x_update_interrupts+0x38>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
}
 800aa90:	b003      	add	sp, #12
 800aa92:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa96:	bf00      	nop
 800aa98:	20013240 	.word	0x20013240
 800aa9c:	20013241 	.word	0x20013241

0800aaa0 <si468x_wait_for_interrupt>:
{
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	4604      	mov	r4, r0
	uint8_t status = 0;
 800aaa4:	e003      	b.n	800aaae <si468x_wait_for_interrupt+0xe>
			si468x_update_interrupts();
 800aaa6:	f7ff ffdd 	bl	800aa64 <si468x_update_interrupts>
 800aaaa:	e004      	b.n	800aab6 <si468x_wait_for_interrupt+0x16>
	} while (!status);
 800aaac:	b982      	cbnz	r2, 800aad0 <si468x_wait_for_interrupt+0x30>
		if (update_interrupts)
 800aaae:	4b09      	ldr	r3, [pc, #36]	@ (800aad4 <si468x_wait_for_interrupt+0x34>)
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1f7      	bne.n	800aaa6 <si468x_wait_for_interrupt+0x6>
		status = (Interrupt_Status.interrupt_register >> interrupt) & 0x01;
 800aab6:	4b08      	ldr	r3, [pc, #32]	@ (800aad8 <si468x_wait_for_interrupt+0x38>)
 800aab8:	7819      	ldrb	r1, [r3, #0]
 800aaba:	fa41 f304 	asr.w	r3, r1, r4
 800aabe:	f003 0201 	and.w	r2, r3, #1
		if (interrupt == CTS)
 800aac2:	2c07      	cmp	r4, #7
 800aac4:	d1f2      	bne.n	800aaac <si468x_wait_for_interrupt+0xc>
			status |= (Interrupt_Status.interrupt_register >> ERR_CMD) & 0x01; //!!!
 800aac6:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
 800aaca:	f003 0201 	and.w	r2, r3, #1
 800aace:	e7ed      	b.n	800aaac <si468x_wait_for_interrupt+0xc>
}
 800aad0:	bd10      	pop	{r4, pc}
 800aad2:	bf00      	nop
 800aad4:	20013241 	.word	0x20013241
 800aad8:	20013240 	.word	0x20013240

0800aadc <si468x_execute_ext>:
{
 800aadc:	b510      	push	{r4, lr}
	if (use_interrupt)
 800aade:	460c      	mov	r4, r1
 800aae0:	b121      	cbz	r1, 800aaec <si468x_execute_ext+0x10>
		Interrupt_Status.CTS = 0;
 800aae2:	4a0a      	ldr	r2, [pc, #40]	@ (800ab0c <si468x_execute_ext+0x30>)
 800aae4:	7813      	ldrb	r3, [r2, #0]
 800aae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaea:	7013      	strb	r3, [r2, #0]
	I2C_write(Si4684_ADDRESS, command->data, command->size);
 800aaec:	8802      	ldrh	r2, [r0, #0]
 800aaee:	6841      	ldr	r1, [r0, #4]
 800aaf0:	2064      	movs	r0, #100	@ 0x64
 800aaf2:	f7ff fbf3 	bl	800a2dc <I2C_write>
	if (use_interrupt)
 800aaf6:	b924      	cbnz	r4, 800ab02 <si468x_execute_ext+0x26>
	uint8_t error = si468x_read_response(read_buffer, 4);
 800aaf8:	2104      	movs	r1, #4
 800aafa:	4805      	ldr	r0, [pc, #20]	@ (800ab10 <si468x_execute_ext+0x34>)
 800aafc:	f7ff ff9a 	bl	800aa34 <si468x_read_response>
}
 800ab00:	bd10      	pop	{r4, pc}
		si468x_wait_for_interrupt(CTS);
 800ab02:	2007      	movs	r0, #7
 800ab04:	f7ff ffcc 	bl	800aaa0 <si468x_wait_for_interrupt>
 800ab08:	e7f6      	b.n	800aaf8 <si468x_execute_ext+0x1c>
 800ab0a:	bf00      	nop
 800ab0c:	20013240 	.word	0x20013240
 800ab10:	2001323c 	.word	0x2001323c

0800ab14 <si468x_execute>:
{
 800ab14:	b508      	push	{r3, lr}
	return si468x_execute_ext(command, patched);
 800ab16:	4b02      	ldr	r3, [pc, #8]	@ (800ab20 <si468x_execute+0xc>)
 800ab18:	7819      	ldrb	r1, [r3, #0]
 800ab1a:	f7ff ffdf 	bl	800aadc <si468x_execute_ext>
}
 800ab1e:	bd08      	pop	{r3, pc}
 800ab20:	20013242 	.word	0x20013242

0800ab24 <si468x_build_command_ext>:
{
	return si468x_build_command_ext(command_id, args, num_args, 0, 0);
}

Si468x_Command *si468x_build_command_ext(uint8_t command_id, uint8_t *args, uint16_t num_args, uint8_t *data, uint16_t data_size)
{
 800ab24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab28:	4680      	mov	r8, r0
 800ab2a:	460f      	mov	r7, r1
 800ab2c:	4614      	mov	r4, r2
 800ab2e:	461e      	mov	r6, r3
 800ab30:	f8bd 9020 	ldrh.w	r9, [sp, #32]
	Si468x_Command *command = (Si468x_Command *) malloc(sizeof(Si468x_Command));
 800ab34:	2008      	movs	r0, #8
 800ab36:	f004 fe5b 	bl	800f7f0 <malloc>
 800ab3a:	4605      	mov	r5, r0
	command->size = 1 + num_args + data_size;
 800ab3c:	eb04 0009 	add.w	r0, r4, r9
 800ab40:	3001      	adds	r0, #1
 800ab42:	b280      	uxth	r0, r0
 800ab44:	8028      	strh	r0, [r5, #0]
	command->data = (uint8_t *) malloc(command->size);
 800ab46:	f004 fe53 	bl	800f7f0 <malloc>
 800ab4a:	6068      	str	r0, [r5, #4]
	command->data[0] = command_id;
 800ab4c:	f800 8b01 	strb.w	r8, [r0], #1
	memcpy(command->data + 1, args, num_args);
 800ab50:	4622      	mov	r2, r4
 800ab52:	4639      	mov	r1, r7
 800ab54:	f005 fe15 	bl	8010782 <memcpy>
	memcpy(command->data + 1 + num_args, data, data_size);
 800ab58:	6868      	ldr	r0, [r5, #4]
 800ab5a:	3401      	adds	r4, #1
 800ab5c:	464a      	mov	r2, r9
 800ab5e:	4631      	mov	r1, r6
 800ab60:	4420      	add	r0, r4
 800ab62:	f005 fe0e 	bl	8010782 <memcpy>
	return command;
}
 800ab66:	4628      	mov	r0, r5
 800ab68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ab6c <si468x_build_command>:
{
 800ab6c:	b500      	push	{lr}
 800ab6e:	b083      	sub	sp, #12
	return si468x_build_command_ext(command_id, args, num_args, 0, 0);
 800ab70:	2300      	movs	r3, #0
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	f7ff ffd6 	bl	800ab24 <si468x_build_command_ext>
}
 800ab78:	b003      	add	sp, #12
 800ab7a:	f85d fb04 	ldr.w	pc, [sp], #4

0800ab7e <si468x_free_command>:

void si468x_free_command(Si468x_Command *command)
{
	if (!command)
 800ab7e:	b158      	cbz	r0, 800ab98 <si468x_free_command+0x1a>
{
 800ab80:	b510      	push	{r4, lr}
 800ab82:	4604      	mov	r4, r0
		return;
	if (command->data)
 800ab84:	6840      	ldr	r0, [r0, #4]
 800ab86:	b118      	cbz	r0, 800ab90 <si468x_free_command+0x12>
	{
		free(command->data);
 800ab88:	f004 fe3a 	bl	800f800 <free>
		command->data = NULL;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	6063      	str	r3, [r4, #4]
	}
	free(command);
 800ab90:	4620      	mov	r0, r4
 800ab92:	f004 fe35 	bl	800f800 <free>
	command = NULL;
}
 800ab96:	bd10      	pop	{r4, pc}
 800ab98:	4770      	bx	lr
	...

0800ab9c <si468x_power_up>:
{
 800ab9c:	b510      	push	{r4, lr}
 800ab9e:	b084      	sub	sp, #16
	uint8_t args[] =
 800aba0:	4b0b      	ldr	r3, [pc, #44]	@ (800abd0 <si468x_power_up+0x34>)
 800aba2:	46ec      	mov	ip, sp
 800aba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aba6:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800abaa:	f82c 3b02 	strh.w	r3, [ip], #2
 800abae:	0c1b      	lsrs	r3, r3, #16
 800abb0:	f88c 3000 	strb.w	r3, [ip]
	Si468x_Command *command = si468x_build_command(POWER_UP, args, 15);
 800abb4:	220f      	movs	r2, #15
 800abb6:	4669      	mov	r1, sp
 800abb8:	2001      	movs	r0, #1
 800abba:	f7ff ffd7 	bl	800ab6c <si468x_build_command>
 800abbe:	4604      	mov	r4, r0
	si468x_execute(command);
 800abc0:	f7ff ffa8 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800abc4:	4620      	mov	r0, r4
 800abc6:	f7ff ffda 	bl	800ab7e <si468x_free_command>
}
 800abca:	b004      	add	sp, #16
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	bf00      	nop
 800abd0:	08012f54 	.word	0x08012f54

0800abd4 <si468x_load_minipatch>:
{
 800abd4:	b510      	push	{r4, lr}
 800abd6:	b084      	sub	sp, #16
	uint8_t args[] = {0x00, 0x00, 0x00};
 800abd8:	2300      	movs	r3, #0
 800abda:	f8ad 300c 	strh.w	r3, [sp, #12]
 800abde:	f88d 300e 	strb.w	r3, [sp, #14]
	Si468x_Command *command = si468x_build_command_ext(HOST_LOAD, args, 3, minipatch_data, minipatch_size);
 800abe2:	f44f 736b 	mov.w	r3, #940	@ 0x3ac
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	4b06      	ldr	r3, [pc, #24]	@ (800ac04 <si468x_load_minipatch+0x30>)
 800abea:	2203      	movs	r2, #3
 800abec:	a903      	add	r1, sp, #12
 800abee:	2004      	movs	r0, #4
 800abf0:	f7ff ff98 	bl	800ab24 <si468x_build_command_ext>
 800abf4:	4604      	mov	r4, r0
	si468x_execute(command);
 800abf6:	f7ff ff8d 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800abfa:	4620      	mov	r0, r4
 800abfc:	f7ff ffbf 	bl	800ab7e <si468x_free_command>
}
 800ac00:	b004      	add	sp, #16
 800ac02:	bd10      	pop	{r4, pc}
 800ac04:	20000048 	.word	0x20000048

0800ac08 <si468x_load_patch>:
{
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	b084      	sub	sp, #16
	uint8_t args[] = {0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800ac0c:	ab01      	add	r3, sp, #4
 800ac0e:	4a0b      	ldr	r2, [pc, #44]	@ (800ac3c <si468x_load_patch+0x34>)
 800ac10:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac12:	c303      	stmia	r3!, {r0, r1}
 800ac14:	f823 2b02 	strh.w	r2, [r3], #2
 800ac18:	0c12      	lsrs	r2, r2, #16
 800ac1a:	701a      	strb	r2, [r3, #0]
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 800ac1c:	220b      	movs	r2, #11
 800ac1e:	a901      	add	r1, sp, #4
 800ac20:	2005      	movs	r0, #5
 800ac22:	f7ff ffa3 	bl	800ab6c <si468x_build_command>
 800ac26:	4604      	mov	r4, r0
	si468x_execute(command);
 800ac28:	f7ff ff74 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f7ff ffa6 	bl	800ab7e <si468x_free_command>
	patched = 1;
 800ac32:	4b03      	ldr	r3, [pc, #12]	@ (800ac40 <si468x_load_patch+0x38>)
 800ac34:	2201      	movs	r2, #1
 800ac36:	701a      	strb	r2, [r3, #0]
}
 800ac38:	b004      	add	sp, #16
 800ac3a:	bd10      	pop	{r4, pc}
 800ac3c:	08012f64 	.word	0x08012f64
 800ac40:	20013242 	.word	0x20013242

0800ac44 <si468x_flash_set_property>:
{
 800ac44:	b510      	push	{r4, lr}
 800ac46:	b082      	sub	sp, #8
	uint8_t args[] = {0x10, 0x00, 0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 800ac48:	2310      	movs	r3, #16
 800ac4a:	f88d 3000 	strb.w	r3, [sp]
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f88d 3001 	strb.w	r3, [sp, #1]
 800ac54:	f88d 3002 	strb.w	r3, [sp, #2]
 800ac58:	f88d 0003 	strb.w	r0, [sp, #3]
 800ac5c:	0a00      	lsrs	r0, r0, #8
 800ac5e:	f88d 0004 	strb.w	r0, [sp, #4]
 800ac62:	f88d 1005 	strb.w	r1, [sp, #5]
 800ac66:	0a09      	lsrs	r1, r1, #8
 800ac68:	f88d 1006 	strb.w	r1, [sp, #6]
	Si468x_Command *command = si468x_build_command(FLASH_SET_PROP_LIST, args, 7);
 800ac6c:	2207      	movs	r2, #7
 800ac6e:	4669      	mov	r1, sp
 800ac70:	2005      	movs	r0, #5
 800ac72:	f7ff ff7b 	bl	800ab6c <si468x_build_command>
 800ac76:	4604      	mov	r4, r0
	si468x_execute(command);
 800ac78:	f7ff ff4c 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f7ff ff7e 	bl	800ab7e <si468x_free_command>
}
 800ac82:	b002      	add	sp, #8
 800ac84:	bd10      	pop	{r4, pc}

0800ac86 <si468x_load_init>:
{
 800ac86:	b510      	push	{r4, lr}
 800ac88:	b082      	sub	sp, #8
	uint8_t args[] = {0x00};
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(LOAD_INIT, args, 1);
 800ac90:	2201      	movs	r2, #1
 800ac92:	a901      	add	r1, sp, #4
 800ac94:	2006      	movs	r0, #6
 800ac96:	f7ff ff69 	bl	800ab6c <si468x_build_command>
 800ac9a:	4604      	mov	r4, r0
	si468x_execute(command);
 800ac9c:	f7ff ff3a 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800aca0:	4620      	mov	r0, r4
 800aca2:	f7ff ff6c 	bl	800ab7e <si468x_free_command>
}
 800aca6:	b002      	add	sp, #8
 800aca8:	bd10      	pop	{r4, pc}

0800acaa <si468x_load_ROM>:
{
 800acaa:	b510      	push	{r4, lr}
 800acac:	b084      	sub	sp, #16
  switch(mode)
 800acae:	2801      	cmp	r0, #1
 800acb0:	d004      	beq.n	800acbc <si468x_load_ROM+0x12>
 800acb2:	2802      	cmp	r0, #2
 800acb4:	d02b      	beq.n	800ad0e <si468x_load_ROM+0x64>
      Error_Handler();
 800acb6:	f003 fe0d 	bl	800e8d4 <Error_Handler>
      return;
 800acba:	e026      	b.n	800ad0a <si468x_load_ROM+0x60>
  switch(mode)
 800acbc:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
	uint8_t args[] =
 800acc0:	2300      	movs	r3, #0
 800acc2:	f88d 3004 	strb.w	r3, [sp, #4]
 800acc6:	f88d 3005 	strb.w	r3, [sp, #5]
 800acca:	f88d 3006 	strb.w	r3, [sp, #6]
 800acce:	f88d 2007 	strb.w	r2, [sp, #7]
			(StartAddress >> 8) & 0xFF,
 800acd2:	0a11      	lsrs	r1, r2, #8
	uint8_t args[] =
 800acd4:	f88d 1008 	strb.w	r1, [sp, #8]
			(StartAddress >> 16) & 0xFF,
 800acd8:	0c11      	lsrs	r1, r2, #16
	uint8_t args[] =
 800acda:	f88d 1009 	strb.w	r1, [sp, #9]
			StartAddress >> 24,
 800acde:	0e12      	lsrs	r2, r2, #24
	uint8_t args[] =
 800ace0:	f88d 200a 	strb.w	r2, [sp, #10]
 800ace4:	f88d 300b 	strb.w	r3, [sp, #11]
 800ace8:	f88d 300c 	strb.w	r3, [sp, #12]
 800acec:	f88d 300d 	strb.w	r3, [sp, #13]
 800acf0:	f88d 300e 	strb.w	r3, [sp, #14]
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 800acf4:	220b      	movs	r2, #11
 800acf6:	a901      	add	r1, sp, #4
 800acf8:	2005      	movs	r0, #5
 800acfa:	f7ff ff37 	bl	800ab6c <si468x_build_command>
 800acfe:	4604      	mov	r4, r0
	si468x_execute(command);
 800ad00:	f7ff ff08 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800ad04:	4620      	mov	r0, r4
 800ad06:	f7ff ff3a 	bl	800ab7e <si468x_free_command>
}
 800ad0a:	b004      	add	sp, #16
 800ad0c:	bd10      	pop	{r4, pc}
      StartAddress = 0x00092000; // JSB: Hardwired.
 800ad0e:	f44f 2212 	mov.w	r2, #598016	@ 0x92000
 800ad12:	e7d5      	b.n	800acc0 <si468x_load_ROM+0x16>

0800ad14 <si468x_boot>:
{
 800ad14:	b510      	push	{r4, lr}
 800ad16:	b082      	sub	sp, #8
	uint8_t args[] = {0x00};
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(BOOT, args, 1);
 800ad1e:	2201      	movs	r2, #1
 800ad20:	a901      	add	r1, sp, #4
 800ad22:	2007      	movs	r0, #7
 800ad24:	f7ff ff22 	bl	800ab6c <si468x_build_command>
 800ad28:	4604      	mov	r4, r0
	si468x_execute(command);
 800ad2a:	f7ff fef3 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7ff ff25 	bl	800ab7e <si468x_free_command>
}
 800ad34:	b002      	add	sp, #8
 800ad36:	bd10      	pop	{r4, pc}

0800ad38 <si468x_set_property>:
{
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	b082      	sub	sp, #8
	uint8_t args[] = {0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f88d 3000 	strb.w	r3, [sp]
 800ad42:	f88d 0001 	strb.w	r0, [sp, #1]
 800ad46:	0a00      	lsrs	r0, r0, #8
 800ad48:	f88d 0002 	strb.w	r0, [sp, #2]
 800ad4c:	f88d 1003 	strb.w	r1, [sp, #3]
 800ad50:	0a09      	lsrs	r1, r1, #8
 800ad52:	f88d 1004 	strb.w	r1, [sp, #4]
	Si468x_Command *command = si468x_build_command(SET_PROPERTY, args, 5);
 800ad56:	2205      	movs	r2, #5
 800ad58:	4669      	mov	r1, sp
 800ad5a:	2013      	movs	r0, #19
 800ad5c:	f7ff ff06 	bl	800ab6c <si468x_build_command>
 800ad60:	4604      	mov	r4, r0
	si468x_execute(command);
 800ad62:	f7ff fed7 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800ad66:	4620      	mov	r0, r4
 800ad68:	f7ff ff09 	bl	800ab7e <si468x_free_command>
}
 800ad6c:	b002      	add	sp, #8
 800ad6e:	bd10      	pop	{r4, pc}

0800ad70 <si468x_init>:
{
 800ad70:	b538      	push	{r3, r4, r5, lr}
	current_mode = mode;
 800ad72:	4b38      	ldr	r3, [pc, #224]	@ (800ae54 <si468x_init+0xe4>)
 800ad74:	7018      	strb	r0, [r3, #0]
	if (mode == Si468x_MODE_None) // JSB added.
 800ad76:	b900      	cbnz	r0, 800ad7a <si468x_init+0xa>
}
 800ad78:	bd38      	pop	{r3, r4, r5, pc}
 800ad7a:	4604      	mov	r4, r0
	si468x_reset(1);
 800ad7c:	2001      	movs	r0, #1
 800ad7e:	f7ff fe47 	bl	800aa10 <si468x_reset>
	HAL_Delay(10);
 800ad82:	200a      	movs	r0, #10
 800ad84:	f7f5 fc78 	bl	8000678 <HAL_Delay>
  si468x_reset(0);
 800ad88:	2000      	movs	r0, #0
 800ad8a:	f7ff fe41 	bl	800aa10 <si468x_reset>
	HAL_Delay(10);
 800ad8e:	200a      	movs	r0, #10
 800ad90:	f7f5 fc72 	bl	8000678 <HAL_Delay>
	patched = 0; // JSB Added.
 800ad94:	2500      	movs	r5, #0
 800ad96:	4b30      	ldr	r3, [pc, #192]	@ (800ae58 <si468x_init+0xe8>)
 800ad98:	701d      	strb	r5, [r3, #0]
	si468x_power_up();
 800ad9a:	f7ff feff 	bl	800ab9c <si468x_power_up>
	HAL_Delay(10);
 800ad9e:	200a      	movs	r0, #10
 800ada0:	f7f5 fc6a 	bl	8000678 <HAL_Delay>
	si468x_load_init();
 800ada4:	f7ff ff6f 	bl	800ac86 <si468x_load_init>
	si468x_load_minipatch();
 800ada8:	f7ff ff14 	bl	800abd4 <si468x_load_minipatch>
	HAL_Delay(10);
 800adac:	200a      	movs	r0, #10
 800adae:	f7f5 fc63 	bl	8000678 <HAL_Delay>
	si468x_load_init();
 800adb2:	f7ff ff68 	bl	800ac86 <si468x_load_init>
	si468x_load_patch();
 800adb6:	f7ff ff27 	bl	800ac08 <si468x_load_patch>
	HAL_Delay(15);
 800adba:	200f      	movs	r0, #15
 800adbc:	f7f5 fc5c 	bl	8000678 <HAL_Delay>
	si468x_flash_set_property(PROP_FLASH_SPI_CLOCK_FREQ_KHZ, 0x9C40); // Set flash speed to 40MHz
 800adc0:	f649 4140 	movw	r1, #40000	@ 0x9c40
 800adc4:	2001      	movs	r0, #1
 800adc6:	f7ff ff3d 	bl	800ac44 <si468x_flash_set_property>
	si468x_flash_set_property(PROP_HIGH_SPEED_READ_MAX_FREQ_MHZ, 0x00FF); // Set flash high speed read speed to 127MHz
 800adca:	21ff      	movs	r1, #255	@ 0xff
 800adcc:	f240 1003 	movw	r0, #259	@ 0x103
 800add0:	f7ff ff38 	bl	800ac44 <si468x_flash_set_property>
	si468x_load_init();
 800add4:	f7ff ff57 	bl	800ac86 <si468x_load_init>
	si468x_load_ROM(mode);
 800add8:	4620      	mov	r0, r4
 800adda:	f7ff ff66 	bl	800acaa <si468x_load_ROM>
	si468x_boot();
 800adde:	f7ff ff99 	bl	800ad14 <si468x_boot>
	si468x_set_property(PROP_INT_CTL_ENABLE, 0x00D1); // Enable CTS, ERR_CMD, STC and DSRV interrupts
 800ade2:	21d1      	movs	r1, #209	@ 0xd1
 800ade4:	4628      	mov	r0, r5
 800ade6:	f7ff ffa7 	bl	800ad38 <si468x_set_property>
	si468x_set_property(PROP_INT_CTL_REPEAT, 0x0001); // Enable STC interrupt repeat
 800adea:	2101      	movs	r1, #1
 800adec:	4608      	mov	r0, r1
 800adee:	f7ff ffa3 	bl	800ad38 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_IO_OUTPUT_SELECT, 0x0000); // I2S set slave (0x8000 for master)
 800adf2:	4629      	mov	r1, r5
 800adf4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800adf8:	f7ff ff9e 	bl	800ad38 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_IO_OUTPUT_SAMPLE_RATE, 0xBB80); // I2S set sample rate 48kHz
 800adfc:	f64b 3180 	movw	r1, #48000	@ 0xbb80
 800ae00:	f240 2001 	movw	r0, #513	@ 0x201
 800ae04:	f7ff ff98 	bl	800ad38 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_IO_OUTPUT_FORMAT, 0x1870); // Set sample size to 24-bit, slot size to 32-bit, and format to I2S
 800ae08:	f641 0170 	movw	r1, #6256	@ 0x1870
 800ae0c:	f240 2002 	movw	r0, #514	@ 0x202
 800ae10:	f7ff ff92 	bl	800ad38 <si468x_set_property>
	si468x_set_property(PROP_PIN_CONFIG_ENABLE, 0x8002); // I2S enable
 800ae14:	f248 0102 	movw	r1, #32770	@ 0x8002
 800ae18:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ae1c:	f7ff ff8c 	bl	800ad38 <si468x_set_property>
	si468x_set_property(PROP_DAB_TUNE_FE_CFG, 0x0001); // VHFSW
 800ae20:	2101      	movs	r1, #1
 800ae22:	f241 7012 	movw	r0, #5906	@ 0x1712
 800ae26:	f7ff ff87 	bl	800ad38 <si468x_set_property>
	si468x_set_property(PROP_FM_RDS_CONFIG, 0x0001); // Enable RDS processor
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	f643 4002 	movw	r0, #15362	@ 0x3c02
 800ae30:	f7ff ff82 	bl	800ad38 <si468x_set_property>
	si468x_set_property(PROP_DAB_XPAD_ENABLE, 0x0003); // Enable full PAD and XPAD
 800ae34:	2103      	movs	r1, #3
 800ae36:	f44f 4034 	mov.w	r0, #46080	@ 0xb400
 800ae3a:	f7ff ff7d 	bl	800ad38 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_SERVICE_INT_SOURCE, 0x0001); // Enable DSRVPCKTINT
 800ae3e:	2101      	movs	r1, #1
 800ae40:	f44f 4001 	mov.w	r0, #33024	@ 0x8100
 800ae44:	f7ff ff78 	bl	800ad38 <si468x_set_property>
	if (mode == Si468x_MODE_DAB)
 800ae48:	2c02      	cmp	r4, #2
 800ae4a:	d195      	bne.n	800ad78 <si468x_init+0x8>
		si468x_DAB_set_freq_list();
 800ae4c:	f000 f9b6 	bl	800b1bc <si468x_DAB_set_freq_list>
 800ae50:	e792      	b.n	800ad78 <si468x_init+0x8>
 800ae52:	bf00      	nop
 800ae54:	20013243 	.word	0x20013243
 800ae58:	20013242 	.word	0x20013242

0800ae5c <JSB_si468x_get_current_mode>:

enum Si468x_MODE JSB_si468x_get_current_mode()
{
  return current_mode;
}
 800ae5c:	4b01      	ldr	r3, [pc, #4]	@ (800ae64 <JSB_si468x_get_current_mode+0x8>)
 800ae5e:	7818      	ldrb	r0, [r3, #0]
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20013243 	.word	0x20013243

0800ae68 <Min_uint32>:
// JSB helper functions (from JSB_General.c):

static uint32_t Min_uint32(uint32_t A, uint32_t B)
{
    return A < B ? A : B;
}
 800ae68:	4288      	cmp	r0, r1
 800ae6a:	bf28      	it	cs
 800ae6c:	4608      	movcs	r0, r1
 800ae6e:	4770      	bx	lr

0800ae70 <si468x_free_service_list>:

	return service_list;
}

static void si468x_free_service_list(DAB_Service_List *service_list)
{
 800ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae72:	4607      	mov	r7, r0
	for (int i = 0; i < service_list->size; i++)
 800ae74:	2600      	movs	r6, #0
 800ae76:	e011      	b.n	800ae9c <si468x_free_service_list+0x2c>
	{
		DAB_Service *service = service_list->services[i];
		for (int j = 0; j < service->num_comp; j++)
			free(service->components[j]);
 800ae78:	68eb      	ldr	r3, [r5, #12]
 800ae7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ae7e:	f004 fcbf 	bl	800f800 <free>
		for (int j = 0; j < service->num_comp; j++)
 800ae82:	3401      	adds	r4, #1
 800ae84:	7a6b      	ldrb	r3, [r5, #9]
 800ae86:	f003 030f 	and.w	r3, r3, #15
 800ae8a:	42a3      	cmp	r3, r4
 800ae8c:	dcf4      	bgt.n	800ae78 <si468x_free_service_list+0x8>
		free(service->components);
 800ae8e:	68e8      	ldr	r0, [r5, #12]
 800ae90:	f004 fcb6 	bl	800f800 <free>
		free(service);
 800ae94:	4628      	mov	r0, r5
 800ae96:	f004 fcb3 	bl	800f800 <free>
	for (int i = 0; i < service_list->size; i++)
 800ae9a:	3601      	adds	r6, #1
 800ae9c:	783b      	ldrb	r3, [r7, #0]
 800ae9e:	42b3      	cmp	r3, r6
 800aea0:	dd04      	ble.n	800aeac <si468x_free_service_list+0x3c>
		DAB_Service *service = service_list->services[i];
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
		for (int j = 0; j < service->num_comp; j++)
 800aea8:	2400      	movs	r4, #0
 800aeaa:	e7eb      	b.n	800ae84 <si468x_free_service_list+0x14>
	}
	free(service_list);
 800aeac:	4638      	mov	r0, r7
 800aeae:	f004 fca7 	bl	800f800 <free>
}
 800aeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aeb4 <si468x_DAB_decode_digital_service_list>:
{
 800aeb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb8:	4606      	mov	r6, r0
 800aeba:	468b      	mov	fp, r1
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800aebc:	f7ff ffce 	bl	800ae5c <JSB_si468x_get_current_mode>
 800aec0:	2802      	cmp	r0, #2
 800aec2:	d179      	bne.n	800afb8 <si468x_DAB_decode_digital_service_list+0x104>
	DAB_Service_List *service_list = malloc(sizeof(DAB_Service_List));
 800aec4:	2008      	movs	r0, #8
 800aec6:	f004 fc93 	bl	800f7f0 <malloc>
 800aeca:	4682      	mov	sl, r0
	uint8_t number_of_services = service_list_data[data_pointer];
 800aecc:	7930      	ldrb	r0, [r6, #4]
	service_list->size = number_of_services;
 800aece:	f88a 0000 	strb.w	r0, [sl]
	service_list->services = (DAB_Service**) malloc(service_list->size * sizeof(DAB_Service*));
 800aed2:	0080      	lsls	r0, r0, #2
 800aed4:	f004 fc8c 	bl	800f7f0 <malloc>
 800aed8:	f8ca 0004 	str.w	r0, [sl, #4]
	for (int i = 0; i < service_list->size; i++)
 800aedc:	f04f 0900 	mov.w	r9, #0
	data_pointer += 4;
 800aee0:	2408      	movs	r4, #8
	for (int i = 0; i < service_list->size; i++)
 800aee2:	e029      	b.n	800af38 <si468x_DAB_decode_digital_service_list+0x84>
			data_pointer += 1;
 800aee4:	3404      	adds	r4, #4
 800aee6:	b2a4      	uxth	r4, r4
			DAB_Component *component = (DAB_Component*) malloc(sizeof(DAB_Component));
 800aee8:	2008      	movs	r0, #8
 800aeea:	f004 fc81 	bl	800f7f0 <malloc>
			component->component_id = component_id;
 800aeee:	6005      	str	r5, [r0, #0]
			component->component_info = service_list_data[data_pointer];
 800aef0:	5d33      	ldrb	r3, [r6, r4]
 800aef2:	7103      	strb	r3, [r0, #4]
			service->components[j] = component;
 800aef4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aef8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
		for (int j = 0; j < service->num_comp; j++)
 800aefc:	3701      	adds	r7, #1
 800aefe:	f898 3009 	ldrb.w	r3, [r8, #9]
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	42bb      	cmp	r3, r7
 800af08:	dd14      	ble.n	800af34 <si468x_DAB_decode_digital_service_list+0x80>
			uint32_t component_id = service_list_data[data_pointer];
 800af0a:	5d35      	ldrb	r5, [r6, r4]
			component_id += ((uint32_t) service_list_data[data_pointer + 1]) << 8;
 800af0c:	1933      	adds	r3, r6, r4
 800af0e:	785a      	ldrb	r2, [r3, #1]
 800af10:	eb05 2502 	add.w	r5, r5, r2, lsl #8
			component_id += ((uint32_t) service_list_data[data_pointer + 2]) << 16;
 800af14:	789b      	ldrb	r3, [r3, #2]
 800af16:	eb05 4503 	add.w	r5, r5, r3, lsl #16
			component_id += ((uint32_t) service_list_data[data_pointer + 3]) << 24; //!!! Component ID only 16 bits long...
 800af1a:	1ce3      	adds	r3, r4, #3
 800af1c:	5cf2      	ldrb	r2, [r6, r3]
 800af1e:	eb05 6502 	add.w	r5, r5, r2, lsl #24
			uint8_t user_application_valid = service_list_data[data_pointer] & 0x01;
 800af22:	b29b      	uxth	r3, r3
 800af24:	5cf3      	ldrb	r3, [r6, r3]
			if (user_application_valid)
 800af26:	f013 0f01 	tst.w	r3, #1
 800af2a:	d0db      	beq.n	800aee4 <si468x_DAB_decode_digital_service_list+0x30>
				HAL_Delay(1);
 800af2c:	2001      	movs	r0, #1
 800af2e:	f7f5 fba3 	bl	8000678 <HAL_Delay>
 800af32:	e7d7      	b.n	800aee4 <si468x_DAB_decode_digital_service_list+0x30>
	for (int i = 0; i < service_list->size; i++)
 800af34:	f109 0901 	add.w	r9, r9, #1
 800af38:	f89a 3000 	ldrb.w	r3, [sl]
 800af3c:	454b      	cmp	r3, r9
 800af3e:	dd3d      	ble.n	800afbc <si468x_DAB_decode_digital_service_list+0x108>
		DAB_Service *service = (DAB_Service*) malloc(sizeof(DAB_Service));
 800af40:	2020      	movs	r0, #32
 800af42:	f004 fc55 	bl	800f7f0 <malloc>
 800af46:	4680      	mov	r8, r0
		service_list->services[i] = service;
 800af48:	f8da 3004 	ldr.w	r3, [sl, #4]
 800af4c:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
		uint32_t service_id = service_list_data[data_pointer];
 800af50:	5d33      	ldrb	r3, [r6, r4]
		service_id += ((uint32_t) service_list_data[data_pointer + 1]) << 8;
 800af52:	1932      	adds	r2, r6, r4
 800af54:	7851      	ldrb	r1, [r2, #1]
 800af56:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		service_id += ((uint32_t) service_list_data[data_pointer + 2]) << 16;
 800af5a:	7891      	ldrb	r1, [r2, #2]
 800af5c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		service_id += ((uint32_t) service_list_data[data_pointer + 3]) << 24;
 800af60:	78d2      	ldrb	r2, [r2, #3]
 800af62:	eb03 6302 	add.w	r3, r3, r2, lsl #24
		data_pointer += 4;
 800af66:	1d22      	adds	r2, r4, #4
 800af68:	b292      	uxth	r2, r2
		service->service_info_1 = service_list_data[data_pointer];
 800af6a:	5cb2      	ldrb	r2, [r6, r2]
 800af6c:	7202      	strb	r2, [r0, #8]
		data_pointer += 1;
 800af6e:	1d62      	adds	r2, r4, #5
 800af70:	b292      	uxth	r2, r2
		service->service_info_2 = service_list_data[data_pointer];
 800af72:	5cb2      	ldrb	r2, [r6, r2]
 800af74:	7242      	strb	r2, [r0, #9]
		data_pointer += 3;
 800af76:	f104 0208 	add.w	r2, r4, #8
 800af7a:	b292      	uxth	r2, r2
		memcpy(service->name, service_list_data + data_pointer, 16);
 800af7c:	18b1      	adds	r1, r6, r2
 800af7e:	58b7      	ldr	r7, [r6, r2]
 800af80:	684d      	ldr	r5, [r1, #4]
 800af82:	6888      	ldr	r0, [r1, #8]
 800af84:	68ca      	ldr	r2, [r1, #12]
 800af86:	f8c8 7010 	str.w	r7, [r8, #16]
 800af8a:	f8c8 5014 	str.w	r5, [r8, #20]
 800af8e:	f8c8 0018 	str.w	r0, [r8, #24]
 800af92:	f8c8 201c 	str.w	r2, [r8, #28]
		data_pointer += 16;
 800af96:	3418      	adds	r4, #24
 800af98:	b2a4      	uxth	r4, r4
		service->freq_index = freq_index;
 800af9a:	f888 b000 	strb.w	fp, [r8]
		service->service_id = service_id;
 800af9e:	f8c8 3004 	str.w	r3, [r8, #4]
		service->components = (DAB_Component**) malloc(service->num_comp * sizeof(DAB_Component*));
 800afa2:	f898 0009 	ldrb.w	r0, [r8, #9]
 800afa6:	f000 000f 	and.w	r0, r0, #15
 800afaa:	0080      	lsls	r0, r0, #2
 800afac:	f004 fc20 	bl	800f7f0 <malloc>
 800afb0:	f8c8 000c 	str.w	r0, [r8, #12]
		for (int j = 0; j < service->num_comp; j++)
 800afb4:	2700      	movs	r7, #0
 800afb6:	e7a2      	b.n	800aefe <si468x_DAB_decode_digital_service_list+0x4a>
		return NULL;
 800afb8:	f04f 0a00 	mov.w	sl, #0
}
 800afbc:	4650      	mov	r0, sl
 800afbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800afc4 <si468x_DAB_get_digital_service_list>:
{
 800afc4:	b570      	push	{r4, r5, r6, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	4605      	mov	r5, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800afca:	f7ff ff47 	bl	800ae5c <JSB_si468x_get_current_mode>
 800afce:	2802      	cmp	r0, #2
 800afd0:	d12b      	bne.n	800b02a <si468x_DAB_get_digital_service_list+0x66>
	uint8_t args[] = {0x00};
 800afd2:	2300      	movs	r3, #0
 800afd4:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(GET_DIGITAL_SERVICE_LIST, args, 1);
 800afd8:	2201      	movs	r2, #1
 800afda:	a901      	add	r1, sp, #4
 800afdc:	2080      	movs	r0, #128	@ 0x80
 800afde:	f7ff fdc5 	bl	800ab6c <si468x_build_command>
 800afe2:	4604      	mov	r4, r0
	si468x_execute(command);
 800afe4:	f7ff fd96 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800afe8:	4620      	mov	r0, r4
 800afea:	f7ff fdc8 	bl	800ab7e <si468x_free_command>
	si468x_read_response(read_buffer, 6);
 800afee:	4e11      	ldr	r6, [pc, #68]	@ (800b034 <si468x_DAB_get_digital_service_list+0x70>)
 800aff0:	2106      	movs	r1, #6
 800aff2:	4630      	mov	r0, r6
 800aff4:	f7ff fd1e 	bl	800aa34 <si468x_read_response>
	uint16_t service_list_size = read_buffer[4] + (((uint16_t) read_buffer[5]) << 8);
 800aff8:	7934      	ldrb	r4, [r6, #4]
 800affa:	7973      	ldrb	r3, [r6, #5]
 800affc:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 800b000:	b2a4      	uxth	r4, r4
	uint8_t *service_list_data = (uint8_t *) malloc(service_list_size + 4);
 800b002:	1d20      	adds	r0, r4, #4
 800b004:	f004 fbf4 	bl	800f7f0 <malloc>
	if (!service_list_data)
 800b008:	4606      	mov	r6, r0
 800b00a:	b180      	cbz	r0, 800b02e <si468x_DAB_get_digital_service_list+0x6a>
	si468x_read_response(service_list_data, service_list_size + 4);
 800b00c:	3404      	adds	r4, #4
 800b00e:	b2a1      	uxth	r1, r4
 800b010:	f7ff fd10 	bl	800aa34 <si468x_read_response>
	DAB_Service_List *service_list = si468x_DAB_decode_digital_service_list(service_list_data + 4, freq_index);
 800b014:	4629      	mov	r1, r5
 800b016:	1d30      	adds	r0, r6, #4
 800b018:	f7ff ff4c 	bl	800aeb4 <si468x_DAB_decode_digital_service_list>
 800b01c:	4604      	mov	r4, r0
	free(service_list_data);
 800b01e:	4630      	mov	r0, r6
 800b020:	f004 fbee 	bl	800f800 <free>
}
 800b024:	4620      	mov	r0, r4
 800b026:	b002      	add	sp, #8
 800b028:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 800b02a:	2400      	movs	r4, #0
 800b02c:	e7fa      	b.n	800b024 <si468x_DAB_get_digital_service_list+0x60>
		return NULL; // !!! ERROR
 800b02e:	4604      	mov	r4, r0
 800b030:	e7f8      	b.n	800b024 <si468x_DAB_get_digital_service_list+0x60>
 800b032:	bf00      	nop
 800b034:	20013244 	.word	0x20013244

0800b038 <si468x_DAB_save_service_to_flash>:

static void si468x_DAB_save_service_to_flash(DAB_Service *service, uint16_t memory_index)
{
 800b038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03c:	4606      	mov	r6, r0
 800b03e:	4688      	mov	r8, r1
	Stream *stream = stream_create();
 800b040:	f7ff fc04 	bl	800a84c <stream_create>
 800b044:	4605      	mov	r5, r0
	uint32_t memory_address = 4096 * (memory_index + 2); // Keep first 8192 bytes free for control data.
 800b046:	f108 0802 	add.w	r8, r8, #2
 800b04a:	ea4f 3808 	mov.w	r8, r8, lsl #12
	SST25_EraseSector_4K(memory_address);
 800b04e:	4640      	mov	r0, r8
 800b050:	f7ff f858 	bl	800a104 <SST25_EraseSector_4K>
	stream_write_uint8(stream, service->freq_index);
 800b054:	7831      	ldrb	r1, [r6, #0]
 800b056:	4628      	mov	r0, r5
 800b058:	f7ff fc97 	bl	800a98a <stream_write_uint8>
	stream_write_uint32(stream, service->service_id);
 800b05c:	6871      	ldr	r1, [r6, #4]
 800b05e:	4628      	mov	r0, r5
 800b060:	f7ff fca0 	bl	800a9a4 <stream_write_uint32>
	stream_write_uint8(stream, service->service_info_1);
 800b064:	7a31      	ldrb	r1, [r6, #8]
 800b066:	4628      	mov	r0, r5
 800b068:	f7ff fc8f 	bl	800a98a <stream_write_uint8>
	stream_write_uint8(stream, service->service_info_2);
 800b06c:	7a71      	ldrb	r1, [r6, #9]
 800b06e:	4628      	mov	r0, r5
 800b070:	f7ff fc8b 	bl	800a98a <stream_write_uint8>
	stream_write_bytes(stream, (uint8_t *) service->name, 16);
 800b074:	2210      	movs	r2, #16
 800b076:	18b1      	adds	r1, r6, r2
 800b078:	4628      	mov	r0, r5
 800b07a:	f7ff fcb2 	bl	800a9e2 <stream_write_bytes>
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 800b07e:	2400      	movs	r4, #0
 800b080:	e00c      	b.n	800b09c <si468x_DAB_save_service_to_flash+0x64>
	{
		DAB_Component *component = service->components[component_index];
 800b082:	68f3      	ldr	r3, [r6, #12]
 800b084:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
		stream_write_uint32(stream, component->component_id);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	4628      	mov	r0, r5
 800b08c:	f7ff fc8a 	bl	800a9a4 <stream_write_uint32>
		stream_write_uint8(stream, component->component_info);
 800b090:	7939      	ldrb	r1, [r7, #4]
 800b092:	4628      	mov	r0, r5
 800b094:	f7ff fc79 	bl	800a98a <stream_write_uint8>
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 800b098:	3401      	adds	r4, #1
 800b09a:	b2e4      	uxtb	r4, r4
 800b09c:	7a73      	ldrb	r3, [r6, #9]
 800b09e:	f003 030f 	and.w	r3, r3, #15
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	d8ed      	bhi.n	800b082 <si468x_DAB_save_service_to_flash+0x4a>
	}
	stream_flush(stream);
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	f7ff fc3b 	bl	800a922 <stream_flush>
	SST25_WriteBlock(memory_address, stream->data, stream->data_size);
 800b0ac:	f8b5 2088 	ldrh.w	r2, [r5, #136]	@ 0x88
 800b0b0:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 800b0b4:	4640      	mov	r0, r8
 800b0b6:	f7ff f86f 	bl	800a198 <SST25_WriteBlock>
	stream_free(stream);
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f7ff fbe6 	bl	800a88c <stream_free>
}
 800b0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0c4 <si468x_load_service_from_flash>:

static DAB_Service *si468x_load_service_from_flash(uint16_t memory_index)
{
 800b0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0c6:	b083      	sub	sp, #12
	uint16_t stream_size;
	SST25_ReadBlock(4096 * (memory_index + 2), (uint8_t *) &stream_size, 2);
 800b0c8:	1c84      	adds	r4, r0, #2
 800b0ca:	0324      	lsls	r4, r4, #12
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	f10d 0106 	add.w	r1, sp, #6
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f7ff f8d6 	bl	800a284 <SST25_ReadBlock>
	uint8_t *data = malloc(stream_size);
 800b0d8:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 800b0dc:	4630      	mov	r0, r6
 800b0de:	f004 fb87 	bl	800f7f0 <malloc>
 800b0e2:	4605      	mov	r5, r0
	SST25_ReadBlock(4096 * (memory_index + 2), data, stream_size);
 800b0e4:	4632      	mov	r2, r6
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f7ff f8cb 	bl	800a284 <SST25_ReadBlock>
	Stream *stream = stream_load(data, stream_size);
 800b0ee:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f7ff fbb9 	bl	800a86a <stream_load>
 800b0f8:	4607      	mov	r7, r0

	DAB_Service *service = malloc(sizeof(DAB_Service));
 800b0fa:	2020      	movs	r0, #32
 800b0fc:	f004 fb78 	bl	800f7f0 <malloc>
 800b100:	4606      	mov	r6, r0
	service->freq_index = stream_read_uint8(stream);
 800b102:	4638      	mov	r0, r7
 800b104:	f7ff fbcf 	bl	800a8a6 <stream_read_uint8>
 800b108:	7030      	strb	r0, [r6, #0]
	service->service_id = stream_read_uint32(stream);
 800b10a:	4638      	mov	r0, r7
 800b10c:	f7ff fbd4 	bl	800a8b8 <stream_read_uint32>
 800b110:	6070      	str	r0, [r6, #4]
	service->service_info_1 = stream_read_uint8(stream);
 800b112:	4638      	mov	r0, r7
 800b114:	f7ff fbc7 	bl	800a8a6 <stream_read_uint8>
 800b118:	7230      	strb	r0, [r6, #8]
	service->service_info_2 = stream_read_uint8(stream);
 800b11a:	4638      	mov	r0, r7
 800b11c:	f7ff fbc3 	bl	800a8a6 <stream_read_uint8>
 800b120:	7270      	strb	r0, [r6, #9]
	stream_read_bytes(stream, (uint8_t *) service->name, 16);
 800b122:	2210      	movs	r2, #16
 800b124:	18b1      	adds	r1, r6, r2
 800b126:	4638      	mov	r0, r7
 800b128:	f7ff fbea 	bl	800a900 <stream_read_bytes>
	service->components = (DAB_Component**) malloc(service->num_comp * sizeof(DAB_Component*));
 800b12c:	7a70      	ldrb	r0, [r6, #9]
 800b12e:	f000 000f 	and.w	r0, r0, #15
 800b132:	0080      	lsls	r0, r0, #2
 800b134:	f004 fb5c 	bl	800f7f0 <malloc>
 800b138:	60f0      	str	r0, [r6, #12]
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 800b13a:	2400      	movs	r4, #0
 800b13c:	e010      	b.n	800b160 <si468x_load_service_from_flash+0x9c>
	{
		DAB_Component *component = malloc(sizeof(DAB_Component));
 800b13e:	2008      	movs	r0, #8
 800b140:	f004 fb56 	bl	800f7f0 <malloc>
 800b144:	4605      	mov	r5, r0
		component->component_id = stream_read_uint32(stream);
 800b146:	4638      	mov	r0, r7
 800b148:	f7ff fbb6 	bl	800a8b8 <stream_read_uint32>
 800b14c:	6028      	str	r0, [r5, #0]
		component->component_info = stream_read_uint8(stream);
 800b14e:	4638      	mov	r0, r7
 800b150:	f7ff fba9 	bl	800a8a6 <stream_read_uint8>
 800b154:	7128      	strb	r0, [r5, #4]
		service->components[component_index] = component;
 800b156:	68f3      	ldr	r3, [r6, #12]
 800b158:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 800b15c:	3401      	adds	r4, #1
 800b15e:	b2e4      	uxtb	r4, r4
 800b160:	7a73      	ldrb	r3, [r6, #9]
 800b162:	f003 030f 	and.w	r3, r3, #15
 800b166:	42a3      	cmp	r3, r4
 800b168:	d8e9      	bhi.n	800b13e <si468x_load_service_from_flash+0x7a>
	}
	stream_free(stream);
 800b16a:	4638      	mov	r0, r7
 800b16c:	f7ff fb8e 	bl	800a88c <stream_free>
	return service;
}
 800b170:	4630      	mov	r0, r6
 800b172:	b003      	add	sp, #12
 800b174:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b176 <TrimRight>:
{
 800b176:	b538      	push	{r3, r4, r5, lr}
 800b178:	4604      	mov	r4, r0
 800b17a:	460d      	mov	r5, r1
  char *pChar = pString + strlen(pString); // Point to terminator.
 800b17c:	f7f5 f8c0 	bl	8000300 <strlen>
 800b180:	1823      	adds	r3, r4, r0
 800b182:	e001      	b.n	800b188 <TrimRight+0x12>
    *pChar = 0;
 800b184:	2200      	movs	r2, #0
 800b186:	701a      	strb	r2, [r3, #0]
    if (pChar == pString)
 800b188:	42a3      	cmp	r3, r4
 800b18a:	d003      	beq.n	800b194 <TrimRight+0x1e>
    if (*pChar != UnwantedChar)
 800b18c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b190:	42aa      	cmp	r2, r5
 800b192:	d0f7      	beq.n	800b184 <TrimRight+0xe>
}
 800b194:	bd38      	pop	{r3, r4, r5, pc}

0800b196 <JSB_si468x_get_service_name>:

static void JSB_si468x_get_service_name(DAB_Service *pService, char *pServiceName, int16_t ServiceName_MaxLength)
{
 800b196:	b538      	push	{r3, r4, r5, lr}
 800b198:	460c      	mov	r4, r1
  strncpy(pServiceName, pService->name, Min_uint32(ServiceName_MaxLength, 16));
 800b19a:	f100 0510 	add.w	r5, r0, #16
 800b19e:	2110      	movs	r1, #16
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	f7ff fe61 	bl	800ae68 <Min_uint32>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f005 f9f1 	bl	8010592 <strncpy>
  TrimRight(pServiceName, ' ');
 800b1b0:	2120      	movs	r1, #32
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f7ff ffdf 	bl	800b176 <TrimRight>
}
 800b1b8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b1bc <si468x_DAB_set_freq_list>:
{
 800b1bc:	b538      	push	{r3, r4, r5, lr}
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800b1be:	f7ff fe4d 	bl	800ae5c <JSB_si468x_get_current_mode>
 800b1c2:	2802      	cmp	r0, #2
 800b1c4:	d000      	beq.n	800b1c8 <si468x_DAB_set_freq_list+0xc>
}
 800b1c6:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t *args = (uint8_t *) malloc(args_size);
 800b1c8:	209c      	movs	r0, #156	@ 0x9c
 800b1ca:	f004 fb11 	bl	800f7f0 <malloc>
 800b1ce:	4604      	mov	r4, r0
	args[0] = number_of_frequencies;
 800b1d0:	2326      	movs	r3, #38	@ 0x26
 800b1d2:	7003      	strb	r3, [r0, #0]
	args[1] = 0x00;
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	7042      	strb	r2, [r0, #1]
	args[2] = 0x00;
 800b1d8:	7082      	strb	r2, [r0, #2]
	for (int i = 0; i < number_of_frequencies; i++)
 800b1da:	e011      	b.n	800b200 <si468x_DAB_set_freq_list+0x44>
		args[3 + 4 * i] = dab_freq_list[i] & 0xFF;
 800b1dc:	4b11      	ldr	r3, [pc, #68]	@ (800b224 <si468x_DAB_set_freq_list+0x68>)
 800b1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e2:	0091      	lsls	r1, r2, #2
 800b1e4:	1cc8      	adds	r0, r1, #3
 800b1e6:	5423      	strb	r3, [r4, r0]
		args[4 + 4 * i] = (dab_freq_list[i] >> 8) & 0xFF;
 800b1e8:	0a18      	lsrs	r0, r3, #8
 800b1ea:	3201      	adds	r2, #1
 800b1ec:	f804 0022 	strb.w	r0, [r4, r2, lsl #2]
		args[5 + 4 * i] = (dab_freq_list[i] >> 16) & 0xFF;
 800b1f0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800b1f4:	1d48      	adds	r0, r1, #5
 800b1f6:	f804 c000 	strb.w	ip, [r4, r0]
		args[6 + 4 * i] = dab_freq_list[i] >> 24;
 800b1fa:	0e1b      	lsrs	r3, r3, #24
 800b1fc:	3106      	adds	r1, #6
 800b1fe:	5463      	strb	r3, [r4, r1]
	for (int i = 0; i < number_of_frequencies; i++)
 800b200:	2a25      	cmp	r2, #37	@ 0x25
 800b202:	ddeb      	ble.n	800b1dc <si468x_DAB_set_freq_list+0x20>
	Si468x_Command *command = si468x_build_command(DAB_SET_FREQ_LIST, args, args_size);
 800b204:	229c      	movs	r2, #156	@ 0x9c
 800b206:	4621      	mov	r1, r4
 800b208:	20b8      	movs	r0, #184	@ 0xb8
 800b20a:	f7ff fcaf 	bl	800ab6c <si468x_build_command>
 800b20e:	4605      	mov	r5, r0
	si468x_execute(command);
 800b210:	f7ff fc80 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800b214:	4628      	mov	r0, r5
 800b216:	f7ff fcb2 	bl	800ab7e <si468x_free_command>
	free(args);
 800b21a:	4620      	mov	r0, r4
 800b21c:	f004 faf0 	bl	800f800 <free>
 800b220:	e7d1      	b.n	800b1c6 <si468x_DAB_set_freq_list+0xa>
 800b222:	bf00      	nop
 800b224:	08013d24 	.word	0x08013d24

0800b228 <si468x_DAB_tune>:
{
 800b228:	b530      	push	{r4, r5, lr}
 800b22a:	b083      	sub	sp, #12
 800b22c:	4604      	mov	r4, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800b22e:	f7ff fe15 	bl	800ae5c <JSB_si468x_get_current_mode>
 800b232:	2802      	cmp	r0, #2
 800b234:	d001      	beq.n	800b23a <si468x_DAB_tune+0x12>
}
 800b236:	b003      	add	sp, #12
 800b238:	bd30      	pop	{r4, r5, pc}
	uint8_t args[] = {0x00, freq_index, 0x00, 0x00, 0x00};
 800b23a:	2500      	movs	r5, #0
 800b23c:	f88d 5000 	strb.w	r5, [sp]
 800b240:	f88d 4001 	strb.w	r4, [sp, #1]
 800b244:	f88d 5002 	strb.w	r5, [sp, #2]
 800b248:	f88d 5003 	strb.w	r5, [sp, #3]
 800b24c:	f88d 5004 	strb.w	r5, [sp, #4]
	Si468x_Command *command = si468x_build_command(DAB_TUNE_FREQ, args, 5);
 800b250:	2205      	movs	r2, #5
 800b252:	4669      	mov	r1, sp
 800b254:	20b0      	movs	r0, #176	@ 0xb0
 800b256:	f7ff fc89 	bl	800ab6c <si468x_build_command>
 800b25a:	4604      	mov	r4, r0
	Interrupt_Status.STCINT = 0;
 800b25c:	4b06      	ldr	r3, [pc, #24]	@ (800b278 <si468x_DAB_tune+0x50>)
 800b25e:	781a      	ldrb	r2, [r3, #0]
 800b260:	f365 0200 	bfi	r2, r5, #0, #1
 800b264:	701a      	strb	r2, [r3, #0]
	si468x_execute(command);
 800b266:	f7ff fc55 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800b26a:	4620      	mov	r0, r4
 800b26c:	f7ff fc87 	bl	800ab7e <si468x_free_command>
	si468x_wait_for_interrupt(STCINT);
 800b270:	4628      	mov	r0, r5
 800b272:	f7ff fc15 	bl	800aaa0 <si468x_wait_for_interrupt>
 800b276:	e7de      	b.n	800b236 <si468x_DAB_tune+0xe>
 800b278:	20013240 	.word	0x20013240

0800b27c <si468x_DAB_get_digrad_status>:
{
 800b27c:	b530      	push	{r4, r5, lr}
 800b27e:	b083      	sub	sp, #12
 800b280:	4604      	mov	r4, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800b282:	f7ff fdeb 	bl	800ae5c <JSB_si468x_get_current_mode>
 800b286:	2802      	cmp	r0, #2
 800b288:	d001      	beq.n	800b28e <si468x_DAB_get_digrad_status+0x12>
}
 800b28a:	b003      	add	sp, #12
 800b28c:	bd30      	pop	{r4, r5, pc}
	uint8_t args[] = {0x00};
 800b28e:	2300      	movs	r3, #0
 800b290:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(DAB_DIGRAD_STATUS, args, 1);
 800b294:	2201      	movs	r2, #1
 800b296:	a901      	add	r1, sp, #4
 800b298:	20b2      	movs	r0, #178	@ 0xb2
 800b29a:	f7ff fc67 	bl	800ab6c <si468x_build_command>
 800b29e:	4605      	mov	r5, r0
	si468x_execute(command);
 800b2a0:	f7ff fc38 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	f7ff fc6a 	bl	800ab7e <si468x_free_command>
	si468x_read_response(read_buffer, 23);
 800b2aa:	4d0a      	ldr	r5, [pc, #40]	@ (800b2d4 <si468x_DAB_get_digrad_status+0x58>)
 800b2ac:	2117      	movs	r1, #23
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f7ff fbc0 	bl	800aa34 <si468x_read_response>
	memcpy(status->data, read_buffer + 4, 19);
 800b2b4:	f105 0c04 	add.w	ip, r5, #4
 800b2b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2bc:	6020      	str	r0, [r4, #0]
 800b2be:	6061      	str	r1, [r4, #4]
 800b2c0:	60a2      	str	r2, [r4, #8]
 800b2c2:	60e3      	str	r3, [r4, #12]
 800b2c4:	f8bc 2000 	ldrh.w	r2, [ip]
 800b2c8:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800b2cc:	8222      	strh	r2, [r4, #16]
 800b2ce:	74a3      	strb	r3, [r4, #18]
 800b2d0:	e7db      	b.n	800b28a <si468x_DAB_get_digrad_status+0xe>
 800b2d2:	bf00      	nop
 800b2d4:	20013244 	.word	0x20013244

0800b2d8 <si468x_DAB_get_event_status>:
{
 800b2d8:	b530      	push	{r4, r5, lr}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	4604      	mov	r4, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 800b2de:	f7ff fdbd 	bl	800ae5c <JSB_si468x_get_current_mode>
 800b2e2:	2802      	cmp	r0, #2
 800b2e4:	d001      	beq.n	800b2ea <si468x_DAB_get_event_status+0x12>
}
 800b2e6:	b003      	add	sp, #12
 800b2e8:	bd30      	pop	{r4, r5, pc}
	uint8_t args[] = {0x00};
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(DAB_GET_EVENT_STATUS, args, 1);
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	a901      	add	r1, sp, #4
 800b2f4:	20b3      	movs	r0, #179	@ 0xb3
 800b2f6:	f7ff fc39 	bl	800ab6c <si468x_build_command>
 800b2fa:	4605      	mov	r5, r0
	si468x_execute(command);
 800b2fc:	f7ff fc0a 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800b300:	4628      	mov	r0, r5
 800b302:	f7ff fc3c 	bl	800ab7e <si468x_free_command>
	si468x_read_response(read_buffer, 8);
 800b306:	4d04      	ldr	r5, [pc, #16]	@ (800b318 <si468x_DAB_get_event_status+0x40>)
 800b308:	2108      	movs	r1, #8
 800b30a:	4628      	mov	r0, r5
 800b30c:	f7ff fb92 	bl	800aa34 <si468x_read_response>
	memcpy(status->data, read_buffer + 4, 4);
 800b310:	686b      	ldr	r3, [r5, #4]
 800b312:	6023      	str	r3, [r4, #0]
 800b314:	e7e7      	b.n	800b2e6 <si468x_DAB_get_event_status+0xe>
 800b316:	bf00      	nop
 800b318:	20013244 	.word	0x20013244

0800b31c <si468x_DAB_band_scan>:
{
 800b31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b320:	b088      	sub	sp, #32
	uint16_t total_services = 0;
 800b322:	2600      	movs	r6, #0
 800b324:	f8ad 6006 	strh.w	r6, [sp, #6]
	for (int freq_index = 0; freq_index < sizeof(dab_freq_list) / sizeof(uint32_t); freq_index++)
 800b328:	46b0      	mov	r8, r6
 800b32a:	e02a      	b.n	800b382 <si468x_DAB_band_scan+0x66>
				si468x_DAB_get_event_status(&event_status);
 800b32c:	a802      	add	r0, sp, #8
 800b32e:	f7ff ffd3 	bl	800b2d8 <si468x_DAB_get_event_status>
			while (!event_status.SVRLIST)
 800b332:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b336:	f013 0f01 	tst.w	r3, #1
 800b33a:	d0f7      	beq.n	800b32c <si468x_DAB_band_scan+0x10>
			HAL_Delay(500); //JSB: Temp. Could wait until event_status meets certain requirements.
 800b33c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b340:	f7f5 f99a 	bl	8000678 <HAL_Delay>
			DAB_Service_List *service_list = si468x_DAB_get_digital_service_list(freq_index);
 800b344:	4620      	mov	r0, r4
 800b346:	f7ff fe3d 	bl	800afc4 <si468x_DAB_get_digital_service_list>
 800b34a:	4607      	mov	r7, r0
			total_services += service_list->size;
 800b34c:	7803      	ldrb	r3, [r0, #0]
 800b34e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b352:	4413      	add	r3, r2
 800b354:	f8ad 3006 	strh.w	r3, [sp, #6]
			for (uint8_t service_index = 0; service_index < service_list->size; service_index++)
 800b358:	2400      	movs	r4, #0
 800b35a:	e00a      	b.n	800b372 <si468x_DAB_band_scan+0x56>
				si468x_DAB_save_service_to_flash(service_list->services[service_index], service_mem_id++);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	1c75      	adds	r5, r6, #1
 800b360:	b2ad      	uxth	r5, r5
 800b362:	4631      	mov	r1, r6
 800b364:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b368:	f7ff fe66 	bl	800b038 <si468x_DAB_save_service_to_flash>
			for (uint8_t service_index = 0; service_index < service_list->size; service_index++)
 800b36c:	3401      	adds	r4, #1
 800b36e:	b2e4      	uxtb	r4, r4
				si468x_DAB_save_service_to_flash(service_list->services[service_index], service_mem_id++);
 800b370:	462e      	mov	r6, r5
			for (uint8_t service_index = 0; service_index < service_list->size; service_index++)
 800b372:	783b      	ldrb	r3, [r7, #0]
 800b374:	42a3      	cmp	r3, r4
 800b376:	d8f1      	bhi.n	800b35c <si468x_DAB_band_scan+0x40>
			si468x_free_service_list(service_list);
 800b378:	4638      	mov	r0, r7
 800b37a:	f7ff fd79 	bl	800ae70 <si468x_free_service_list>
	for (int freq_index = 0; freq_index < sizeof(dab_freq_list) / sizeof(uint32_t); freq_index++)
 800b37e:	f108 0801 	add.w	r8, r8, #1
 800b382:	f1b8 0f25 	cmp.w	r8, #37	@ 0x25
 800b386:	d813      	bhi.n	800b3b0 <si468x_DAB_band_scan+0x94>
		si468x_DAB_tune(freq_index);
 800b388:	fa5f f488 	uxtb.w	r4, r8
 800b38c:	4620      	mov	r0, r4
 800b38e:	f7ff ff4b 	bl	800b228 <si468x_DAB_tune>
		si468x_DAB_get_digrad_status(&digrad_status);
 800b392:	a803      	add	r0, sp, #12
 800b394:	f7ff ff72 	bl	800b27c <si468x_DAB_get_digrad_status>
		if (digrad_status.VALID)
 800b398:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800b39c:	f013 0f01 	tst.w	r3, #1
 800b3a0:	d0ed      	beq.n	800b37e <si468x_DAB_band_scan+0x62>
			event_status.SVRLIST = 0;
 800b3a2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b3a6:	f023 0301 	bic.w	r3, r3, #1
 800b3aa:	f88d 3009 	strb.w	r3, [sp, #9]
			while (!event_status.SVRLIST)
 800b3ae:	e7c0      	b.n	800b332 <si468x_DAB_band_scan+0x16>
	SST25_EraseSector_4K(4096);
 800b3b0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b3b4:	f7fe fea6 	bl	800a104 <SST25_EraseSector_4K>
	SST25_WriteBlock(4096, (uint8_t *) &total_services, 2);
 800b3b8:	2202      	movs	r2, #2
 800b3ba:	f10d 0106 	add.w	r1, sp, #6
 800b3be:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b3c2:	f7fe fee9 	bl	800a198 <SST25_WriteBlock>
}
 800b3c6:	b008      	add	sp, #32
 800b3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3cc <si468x_DAB_start_digital_service>:
{
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	b084      	sub	sp, #16
	uint8_t args[] = {
 800b3d0:	f88d 2004 	strb.w	r2, [sp, #4]
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f88d 3005 	strb.w	r3, [sp, #5]
 800b3da:	f88d 3006 	strb.w	r3, [sp, #6]
 800b3de:	f88d 0007 	strb.w	r0, [sp, #7]
			(service_id >> 8) & 0xFF,
 800b3e2:	0a03      	lsrs	r3, r0, #8
	uint8_t args[] = {
 800b3e4:	f88d 3008 	strb.w	r3, [sp, #8]
			(service_id >> 16) & 0xFF,
 800b3e8:	0c03      	lsrs	r3, r0, #16
	uint8_t args[] = {
 800b3ea:	f88d 3009 	strb.w	r3, [sp, #9]
			service_id >> 24,
 800b3ee:	0e00      	lsrs	r0, r0, #24
	uint8_t args[] = {
 800b3f0:	f88d 000a 	strb.w	r0, [sp, #10]
 800b3f4:	f88d 100b 	strb.w	r1, [sp, #11]
			(component_id >> 8) & 0xFF,
 800b3f8:	0a0b      	lsrs	r3, r1, #8
	uint8_t args[] = {
 800b3fa:	f88d 300c 	strb.w	r3, [sp, #12]
			(component_id >> 16) & 0xFF,
 800b3fe:	0c0b      	lsrs	r3, r1, #16
	uint8_t args[] = {
 800b400:	f88d 300d 	strb.w	r3, [sp, #13]
			component_id >> 24
 800b404:	0e09      	lsrs	r1, r1, #24
	uint8_t args[] = {
 800b406:	f88d 100e 	strb.w	r1, [sp, #14]
	Si468x_Command *command = si468x_build_command(START_DIGITAL_SERVICE, args, 11);
 800b40a:	220b      	movs	r2, #11
 800b40c:	a901      	add	r1, sp, #4
 800b40e:	2081      	movs	r0, #129	@ 0x81
 800b410:	f7ff fbac 	bl	800ab6c <si468x_build_command>
 800b414:	4604      	mov	r4, r0
	si468x_execute(command);
 800b416:	f7ff fb7d 	bl	800ab14 <si468x_execute>
	si468x_free_command(command);
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7ff fbaf 	bl	800ab7e <si468x_free_command>
}
 800b420:	b004      	add	sp, #16
 800b422:	bd10      	pop	{r4, pc}

0800b424 <si468x_DAB_tune_service>:
{
 800b424:	b510      	push	{r4, lr}
  DAB_Service *service = si468x_load_service_from_flash(service_mem_id);
 800b426:	f7ff fe4d 	bl	800b0c4 <si468x_load_service_from_flash>
 800b42a:	4604      	mov	r4, r0
  si468x_DAB_tune(service->freq_index);
 800b42c:	7800      	ldrb	r0, [r0, #0]
 800b42e:	f7ff fefb 	bl	800b228 <si468x_DAB_tune>
  si468x_DAB_start_digital_service(service->service_id, service->components[0]->component_id, SER_AUDIO);
 800b432:	68e3      	ldr	r3, [r4, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2200      	movs	r2, #0
 800b438:	6819      	ldr	r1, [r3, #0]
 800b43a:	6860      	ldr	r0, [r4, #4]
 800b43c:	f7ff ffc6 	bl	800b3cc <si468x_DAB_start_digital_service>
}
 800b440:	bd10      	pop	{r4, pc}

0800b442 <JSB_si468x_load_service_name_from_flash>:

void JSB_si468x_load_service_name_from_flash(uint16_t ServiceID, char *pServiceName, int16_t ServiceName_MaxLength)
{
 800b442:	b538      	push	{r3, r4, r5, lr}
 800b444:	460c      	mov	r4, r1
 800b446:	4615      	mov	r5, r2
  DAB_Service *pService = si468x_load_service_from_flash(ServiceID);
 800b448:	f7ff fe3c 	bl	800b0c4 <si468x_load_service_from_flash>
  JSB_si468x_get_service_name(pService, pServiceName, ServiceName_MaxLength);
 800b44c:	462a      	mov	r2, r5
 800b44e:	4621      	mov	r1, r4
 800b450:	f7ff fea1 	bl	800b196 <JSB_si468x_get_service_name>
}
 800b454:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b458 <si468x_FM_tune>:
#define FM_ACF_STATUS       0x33
#define FM_RDS_STATUS				0x34
#define FM_RDS_BLOCKCOUNT			0x35

void si468x_FM_tune(float MHz)
{
 800b458:	b530      	push	{r4, r5, lr}
 800b45a:	ed2d 8b02 	vpush	{d8}
 800b45e:	b083      	sub	sp, #12
 800b460:	ee08 0a10 	vmov	s16, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_FM)
 800b464:	f7ff fcfa 	bl	800ae5c <JSB_si468x_get_current_mode>
 800b468:	2801      	cmp	r0, #1
 800b46a:	d003      	beq.n	800b474 <si468x_FM_tune+0x1c>
	Si468x_Command *command = si468x_build_command(FM_TUNE_FREQ, args, 5);
	Interrupt_Status.STCINT = 0;
	si468x_execute(command);
	si468x_wait_for_interrupt(STCINT);
	si468x_free_command(command);
}
 800b46c:	b003      	add	sp, #12
 800b46e:	ecbd 8b02 	vpop	{d8}
 800b472:	bd30      	pop	{r4, r5, pc}
	uint16_t freq = MHz * 100;
 800b474:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b4c8 <si468x_FM_tune+0x70>
 800b478:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b47c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800b480:	ee18 3a10 	vmov	r3, s16
 800b484:	b29b      	uxth	r3, r3
	uint8_t args[] = {0x00, freq & 0xFF, freq >> 8, 0x00, 0x00};
 800b486:	2400      	movs	r4, #0
 800b488:	f88d 4000 	strb.w	r4, [sp]
 800b48c:	f88d 3001 	strb.w	r3, [sp, #1]
 800b490:	0a1b      	lsrs	r3, r3, #8
 800b492:	f88d 3002 	strb.w	r3, [sp, #2]
 800b496:	f88d 4003 	strb.w	r4, [sp, #3]
 800b49a:	f88d 4004 	strb.w	r4, [sp, #4]
	Si468x_Command *command = si468x_build_command(FM_TUNE_FREQ, args, 5);
 800b49e:	2205      	movs	r2, #5
 800b4a0:	4669      	mov	r1, sp
 800b4a2:	2030      	movs	r0, #48	@ 0x30
 800b4a4:	f7ff fb62 	bl	800ab6c <si468x_build_command>
 800b4a8:	4605      	mov	r5, r0
	Interrupt_Status.STCINT = 0;
 800b4aa:	4b08      	ldr	r3, [pc, #32]	@ (800b4cc <si468x_FM_tune+0x74>)
 800b4ac:	781a      	ldrb	r2, [r3, #0]
 800b4ae:	f364 0200 	bfi	r2, r4, #0, #1
 800b4b2:	701a      	strb	r2, [r3, #0]
	si468x_execute(command);
 800b4b4:	f7ff fb2e 	bl	800ab14 <si468x_execute>
	si468x_wait_for_interrupt(STCINT);
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7ff faf1 	bl	800aaa0 <si468x_wait_for_interrupt>
	si468x_free_command(command);
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f7ff fb5d 	bl	800ab7e <si468x_free_command>
 800b4c4:	e7d2      	b.n	800b46c <si468x_FM_tune+0x14>
 800b4c6:	bf00      	nop
 800b4c8:	42c80000 	.word	0x42c80000
 800b4cc:	20013240 	.word	0x20013240

0800b4d0 <JSB_si468x_FM_get_rsq_status>:
		// PJB!!! uint8_t minutes = (date_and_time & 0x0FC0) >> 5;
	}
}

void JSB_si468x_FM_get_rsq_status(JSB_FM_RSQ_Status_t *pStatus)
{
 800b4d0:	b530      	push	{r4, r5, lr}
 800b4d2:	b089      	sub	sp, #36	@ 0x24
 800b4d4:	4604      	mov	r4, r0
  uint8_t read_buffer[22];

  if (JSB_si468x_get_current_mode() != Si468x_MODE_FM)
 800b4d6:	f7ff fcc1 	bl	800ae5c <JSB_si468x_get_current_mode>
 800b4da:	2801      	cmp	r0, #1
 800b4dc:	d001      	beq.n	800b4e2 <JSB_si468x_FM_get_rsq_status+0x12>
  pStatus->Frequency = 0.01f * (read_buffer[6] + (((uint16_t) read_buffer[7]) << 8));
  pStatus->RSSI = (int8_t)read_buffer[9];
  pStatus->SNR = (int8_t)read_buffer[10];
  pStatus->MultiPath = read_buffer[11];
  si468x_free_command(pCommand);
}
 800b4de:	b009      	add	sp, #36	@ 0x24
 800b4e0:	bd30      	pop	{r4, r5, pc}
  uint8_t args[] = {0x00};
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f88d 3004 	strb.w	r3, [sp, #4]
  Si468x_Command *pCommand = si468x_build_command(FM_RSQ_STATUS, args, 1);
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	a901      	add	r1, sp, #4
 800b4ec:	2032      	movs	r0, #50	@ 0x32
 800b4ee:	f7ff fb3d 	bl	800ab6c <si468x_build_command>
 800b4f2:	4605      	mov	r5, r0
  si468x_execute(pCommand);
 800b4f4:	f7ff fb0e 	bl	800ab14 <si468x_execute>
  si468x_read_response(read_buffer, 22);
 800b4f8:	2116      	movs	r1, #22
 800b4fa:	a802      	add	r0, sp, #8
 800b4fc:	f7ff fa9a 	bl	800aa34 <si468x_read_response>
  pStatus->Frequency = 0.01f * (read_buffer[6] + (((uint16_t) read_buffer[7]) << 8));
 800b500:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800b504:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b508:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b50c:	ee07 3a90 	vmov	s15, r3
 800b510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b514:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800b53c <JSB_si468x_FM_get_rsq_status+0x6c>
 800b518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b51c:	edc4 7a00 	vstr	s15, [r4]
  pStatus->RSSI = (int8_t)read_buffer[9];
 800b520:	f99d 3011 	ldrsb.w	r3, [sp, #17]
 800b524:	7123      	strb	r3, [r4, #4]
  pStatus->SNR = (int8_t)read_buffer[10];
 800b526:	f99d 3012 	ldrsb.w	r3, [sp, #18]
 800b52a:	7163      	strb	r3, [r4, #5]
  pStatus->MultiPath = read_buffer[11];
 800b52c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800b530:	71a3      	strb	r3, [r4, #6]
  si468x_free_command(pCommand);
 800b532:	4628      	mov	r0, r5
 800b534:	f7ff fb23 	bl	800ab7e <si468x_free_command>
 800b538:	e7d1      	b.n	800b4de <JSB_si468x_FM_get_rsq_status+0xe>
 800b53a:	bf00      	nop
 800b53c:	3c23d70a 	.word	0x3c23d70a

0800b540 <JSB_si468x_FM_get_stereo_separation>:
  JSB_si468x_FM_get_rsq_status(&Status);
  return Status.Frequency;
}

uint8_t JSB_si468x_FM_get_stereo_separation()
{
 800b540:	b530      	push	{r4, r5, lr}
 800b542:	b085      	sub	sp, #20
  uint8_t read_buffer[10];
  uint8_t StereoSeparation;

  if (JSB_si468x_get_current_mode() != Si468x_MODE_FM)
 800b544:	f7ff fc8a 	bl	800ae5c <JSB_si468x_get_current_mode>
 800b548:	2801      	cmp	r0, #1
 800b54a:	d003      	beq.n	800b554 <JSB_si468x_FM_get_stereo_separation+0x14>
    return 0;
 800b54c:	2400      	movs	r4, #0
  si468x_read_response(read_buffer, 10);
  StereoSeparation = read_buffer[8] & 0x7F;
  si468x_free_command(pCommand);

  return StereoSeparation;
}
 800b54e:	4620      	mov	r0, r4
 800b550:	b005      	add	sp, #20
 800b552:	bd30      	pop	{r4, r5, pc}
  uint8_t args[] = {0x00};
 800b554:	2300      	movs	r3, #0
 800b556:	f88d 3000 	strb.w	r3, [sp]
  Si468x_Command *pCommand = si468x_build_command(FM_ACF_STATUS, args, 1);
 800b55a:	2201      	movs	r2, #1
 800b55c:	4669      	mov	r1, sp
 800b55e:	2033      	movs	r0, #51	@ 0x33
 800b560:	f7ff fb04 	bl	800ab6c <si468x_build_command>
 800b564:	4605      	mov	r5, r0
  si468x_execute(pCommand);
 800b566:	f7ff fad5 	bl	800ab14 <si468x_execute>
  si468x_read_response(read_buffer, 10);
 800b56a:	210a      	movs	r1, #10
 800b56c:	a801      	add	r0, sp, #4
 800b56e:	f7ff fa61 	bl	800aa34 <si468x_read_response>
  StereoSeparation = read_buffer[8] & 0x7F;
 800b572:	f89d 400c 	ldrb.w	r4, [sp, #12]
 800b576:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
  si468x_free_command(pCommand);
 800b57a:	4628      	mov	r0, r5
 800b57c:	f7ff faff 	bl	800ab7e <si468x_free_command>
  return StereoSeparation;
 800b580:	e7e5      	b.n	800b54e <JSB_si468x_FM_get_stereo_separation+0xe>
	...

0800b584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b584:	b500      	push	{lr}
 800b586:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b588:	4b2e      	ldr	r3, [pc, #184]	@ (800b644 <MX_DMA_Init+0xc0>)
 800b58a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b58c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800b590:	631a      	str	r2, [r3, #48]	@ 0x30
 800b592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b594:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b598:	9200      	str	r2, [sp, #0]
 800b59a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b59c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b59e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800b5a2:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5aa:	9301      	str	r3, [sp, #4]
 800b5ac:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	2105      	movs	r1, #5
 800b5b2:	200b      	movs	r0, #11
 800b5b4:	f7f5 f8b8 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800b5b8:	200b      	movs	r0, #11
 800b5ba:	f7f5 f8c5 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800b5be:	2200      	movs	r2, #0
 800b5c0:	2105      	movs	r1, #5
 800b5c2:	200c      	movs	r0, #12
 800b5c4:	f7f5 f8b0 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800b5c8:	200c      	movs	r0, #12
 800b5ca:	f7f5 f8bd 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2105      	movs	r1, #5
 800b5d2:	2010      	movs	r0, #16
 800b5d4:	f7f5 f8a8 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800b5d8:	2010      	movs	r0, #16
 800b5da:	f7f5 f8b5 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2105      	movs	r1, #5
 800b5e2:	2011      	movs	r0, #17
 800b5e4:	f7f5 f8a0 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800b5e8:	2011      	movs	r0, #17
 800b5ea:	f7f5 f8ad 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2105      	movs	r1, #5
 800b5f2:	202f      	movs	r0, #47	@ 0x2f
 800b5f4:	f7f5 f898 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800b5f8:	202f      	movs	r0, #47	@ 0x2f
 800b5fa:	f7f5 f8a5 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800b5fe:	2200      	movs	r2, #0
 800b600:	2105      	movs	r1, #5
 800b602:	2039      	movs	r0, #57	@ 0x39
 800b604:	f7f5 f890 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800b608:	2039      	movs	r0, #57	@ 0x39
 800b60a:	f7f5 f89d 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800b60e:	2200      	movs	r2, #0
 800b610:	2105      	movs	r1, #5
 800b612:	203a      	movs	r0, #58	@ 0x3a
 800b614:	f7f5 f888 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800b618:	203a      	movs	r0, #58	@ 0x3a
 800b61a:	f7f5 f895 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800b61e:	2200      	movs	r2, #0
 800b620:	2105      	movs	r1, #5
 800b622:	203b      	movs	r0, #59	@ 0x3b
 800b624:	f7f5 f880 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800b628:	203b      	movs	r0, #59	@ 0x3b
 800b62a:	f7f5 f88d 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800b62e:	2200      	movs	r2, #0
 800b630:	2105      	movs	r1, #5
 800b632:	2045      	movs	r0, #69	@ 0x45
 800b634:	f7f5 f878 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800b638:	2045      	movs	r0, #69	@ 0x45
 800b63a:	f7f5 f885 	bl	8000748 <HAL_NVIC_EnableIRQ>

}
 800b63e:	b003      	add	sp, #12
 800b640:	f85d fb04 	ldr.w	pc, [sp], #4
 800b644:	40023800 	.word	0x40023800

0800b648 <MainTask_Start>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_MainTask_Start */
void MainTask_Start(void const * argument)
{
 800b648:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MainTask_Start */
  Go();
 800b64a:	f002 fd63 	bl	800e114 <Go>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800b64e:	2001      	movs	r0, #1
 800b650:	f7fa fe74 	bl	800633c <osDelay>
  for(;;)
 800b654:	e7fb      	b.n	800b64e <MainTask_Start+0x6>
	...

0800b658 <ProcessAudioTask_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ProcessAudioTask_Start */
void ProcessAudioTask_Start(void const * argument)
{
 800b658:	b500      	push	{lr}
 800b65a:	b083      	sub	sp, #12
  AudioBufferHalf_t AudioBufferHalf;

  /* Infinite loop */
  for(;;)
  {
    xQueueReceive(ProcessAudioTaskParameterQueueHandle, &AudioBufferHalf, portMAX_DELAY);
 800b65c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b660:	f10d 0107 	add.w	r1, sp, #7
 800b664:	4b04      	ldr	r3, [pc, #16]	@ (800b678 <ProcessAudioTask_Start+0x20>)
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	f7fb fcfd 	bl	8007066 <xQueueReceive>
    ProcessAudio(AudioBufferHalf);
 800b66c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b670:	f001 f840 	bl	800c6f4 <ProcessAudio>
  for(;;)
 800b674:	e7f2      	b.n	800b65c <ProcessAudioTask_Start+0x4>
 800b676:	bf00      	nop
 800b678:	20015330 	.word	0x20015330

0800b67c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800b67c:	4b03      	ldr	r3, [pc, #12]	@ (800b68c <vApplicationGetIdleTaskMemory+0x10>)
 800b67e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800b680:	4b03      	ldr	r3, [pc, #12]	@ (800b690 <vApplicationGetIdleTaskMemory+0x14>)
 800b682:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800b684:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b688:	6013      	str	r3, [r2, #0]
}
 800b68a:	4770      	bx	lr
 800b68c:	20015278 	.word	0x20015278
 800b690:	20013278 	.word	0x20013278

0800b694 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800b694:	b530      	push	{r4, r5, lr}
 800b696:	b097      	sub	sp, #92	@ 0x5c
  osMutexDef(SPI3_Mutex);
 800b698:	2500      	movs	r5, #0
 800b69a:	9514      	str	r5, [sp, #80]	@ 0x50
 800b69c:	9515      	str	r5, [sp, #84]	@ 0x54
  SPI3_MutexHandle = osMutexCreate(osMutex(SPI3_Mutex));
 800b69e:	a814      	add	r0, sp, #80	@ 0x50
 800b6a0:	f7fa fe53 	bl	800634a <osMutexCreate>
 800b6a4:	4b1d      	ldr	r3, [pc, #116]	@ (800b71c <MX_FREERTOS_Init+0x88>)
 800b6a6:	6018      	str	r0, [r3, #0]
  osSemaphoreDef(GenSPITransferCompleteSemaphore);
 800b6a8:	9512      	str	r5, [sp, #72]	@ 0x48
 800b6aa:	9513      	str	r5, [sp, #76]	@ 0x4c
  GenSPITransferCompleteSemaphoreHandle = osSemaphoreCreate(osSemaphore(GenSPITransferCompleteSemaphore), 1);
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	a812      	add	r0, sp, #72	@ 0x48
 800b6b0:	f7fa fe56 	bl	8006360 <osSemaphoreCreate>
 800b6b4:	4b1a      	ldr	r3, [pc, #104]	@ (800b720 <MX_FREERTOS_Init+0x8c>)
 800b6b6:	6018      	str	r0, [r3, #0]
  osMessageQDef(ProcessAudioTaskParameterQueue, 1, uint16_t);
 800b6b8:	4c1a      	ldr	r4, [pc, #104]	@ (800b724 <MX_FREERTOS_Init+0x90>)
 800b6ba:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 800b6be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b6c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  ProcessAudioTaskParameterQueueHandle = osMessageCreate(osMessageQ(ProcessAudioTaskParameterQueue), NULL);
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4660      	mov	r0, ip
 800b6ca:	f7fa fe6d 	bl	80063a8 <osMessageCreate>
 800b6ce:	4b16      	ldr	r3, [pc, #88]	@ (800b728 <MX_FREERTOS_Init+0x94>)
 800b6d0:	6018      	str	r0, [r3, #0]
  osThreadDef(MainTask, MainTask_Start, osPriorityNormal, 0, 2048);
 800b6d2:	f10d 0c1c 	add.w	ip, sp, #28
 800b6d6:	f104 0e10 	add.w	lr, r4, #16
 800b6da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b6de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b6e2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800b6e6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800b6ea:	4629      	mov	r1, r5
 800b6ec:	a807      	add	r0, sp, #28
 800b6ee:	f7fa fdf2 	bl	80062d6 <osThreadCreate>
 800b6f2:	4b0e      	ldr	r3, [pc, #56]	@ (800b72c <MX_FREERTOS_Init+0x98>)
 800b6f4:	6018      	str	r0, [r3, #0]
  osThreadDef(ProcessAudioTask, ProcessAudioTask_Start, osPriorityAboveNormal, 0, 2048);
 800b6f6:	46ee      	mov	lr, sp
 800b6f8:	f104 0c2c 	add.w	ip, r4, #44	@ 0x2c
 800b6fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b700:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b704:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b708:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  ProcessAudioTaskHandle = osThreadCreate(osThread(ProcessAudioTask), NULL);
 800b70c:	4629      	mov	r1, r5
 800b70e:	4668      	mov	r0, sp
 800b710:	f7fa fde1 	bl	80062d6 <osThreadCreate>
 800b714:	4b06      	ldr	r3, [pc, #24]	@ (800b730 <MX_FREERTOS_Init+0x9c>)
 800b716:	6018      	str	r0, [r3, #0]
}
 800b718:	b017      	add	sp, #92	@ 0x5c
 800b71a:	bd30      	pop	{r4, r5, pc}
 800b71c:	2001532c 	.word	0x2001532c
 800b720:	20015328 	.word	0x20015328
 800b724:	08012f70 	.word	0x08012f70
 800b728:	20015330 	.word	0x20015330
 800b72c:	20015338 	.word	0x20015338
 800b730:	20015334 	.word	0x20015334

0800b734 <SetInputChannel>:
static uint8_t InputChannelChanged = 0;
static uint8_t IR_UseChannelButtonsToControlRadio = 0;

static void SetInputChannel(InputChannel_t Value)
{
  if (InputChannel == Value)
 800b734:	4b06      	ldr	r3, [pc, #24]	@ (800b750 <SetInputChannel+0x1c>)
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	4283      	cmp	r3, r0
 800b73a:	d007      	beq.n	800b74c <SetInputChannel+0x18>
    return;

  IR_UseChannelButtonsToControlRadio = 0;
 800b73c:	4b05      	ldr	r3, [pc, #20]	@ (800b754 <SetInputChannel+0x20>)
 800b73e:	2200      	movs	r2, #0
 800b740:	701a      	strb	r2, [r3, #0]
  InputChannel = Value;
 800b742:	4b03      	ldr	r3, [pc, #12]	@ (800b750 <SetInputChannel+0x1c>)
 800b744:	7018      	strb	r0, [r3, #0]
  InputChannelChanged = 1;
 800b746:	4b04      	ldr	r3, [pc, #16]	@ (800b758 <SetInputChannel+0x24>)
 800b748:	2201      	movs	r2, #1
 800b74a:	701a      	strb	r2, [r3, #0]
}
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	20017203 	.word	0x20017203
 800b754:	20017201 	.word	0x20017201
 800b758:	20017202 	.word	0x20017202

0800b75c <GetSPDIFInputChannel>:

static uint8_t GetSPDIFInputChannel(InputChannel_t Value)
{
  return Value - icSPDIF0;
 800b75c:	3801      	subs	r0, #1
}
 800b75e:	b2c0      	uxtb	r0, r0
 800b760:	4770      	bx	lr
	...

0800b764 <InputChannelIsSPDIF>:

static uint8_t InputChannelIsSPDIF()
{
  switch(InputChannel)
 800b764:	4b04      	ldr	r3, [pc, #16]	@ (800b778 <InputChannelIsSPDIF+0x14>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	3b01      	subs	r3, #1
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d801      	bhi.n	800b772 <InputChannelIsSPDIF+0xe>
  {
    case icSPDIF0:
    case icSPDIF1:
    case icSPDIF2:
    case icSPDIF3:
      return 1;
 800b76e:	2001      	movs	r0, #1
 800b770:	4770      	bx	lr
    default:
      return 0;
 800b772:	2000      	movs	r0, #0
  }
}
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	20017203 	.word	0x20017203

0800b77c <InputChannelIsI2S>:

static uint8_t InputChannelIsI2S()
{
  switch(InputChannel)
 800b77c:	4b04      	ldr	r3, [pc, #16]	@ (800b790 <InputChannelIsI2S+0x14>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	3b05      	subs	r3, #5
 800b782:	2b03      	cmp	r3, #3
 800b784:	d801      	bhi.n	800b78a <InputChannelIsI2S+0xe>
  {
    case icSi468x_DAB:
    case icSi468x_FM:
    case icAR1010_FM:
    case icAuxIn:
      return 1;
 800b786:	2001      	movs	r0, #1
 800b788:	4770      	bx	lr
    default:
      return 0;
 800b78a:	2000      	movs	r0, #0
  }
}
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	20017203 	.word	0x20017203

0800b794 <InputChannelIsRadio>:

static uint8_t InputChannelIsRadio()
{
  switch(InputChannel)
 800b794:	4b04      	ldr	r3, [pc, #16]	@ (800b7a8 <InputChannelIsRadio+0x14>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	3b05      	subs	r3, #5
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d801      	bhi.n	800b7a2 <InputChannelIsRadio+0xe>
  {
    case icSi468x_DAB:
    case icSi468x_FM:
    case icAR1010_FM:
      return 1;
 800b79e:	2001      	movs	r0, #1
 800b7a0:	4770      	bx	lr
    default:
      return 0;
 800b7a2:	2000      	movs	r0, #0
  }
}
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20017203 	.word	0x20017203

0800b7ac <InputPage_InputButtonPressed>:

///////////////////////////////////////////////////////////////////////////////
// InputPage:

void InputPage_InputButtonPressed(JSB_UI_Control_t *pControl)
{
 800b7ac:	b508      	push	{r3, lr}
  if(pControl == pInputPage_InputButton_Humax)
 800b7ae:	4b20      	ldr	r3, [pc, #128]	@ (800b830 <InputPage_InputButtonPressed+0x84>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4283      	cmp	r3, r0
 800b7b4:	d01c      	beq.n	800b7f0 <InputPage_InputButtonPressed+0x44>
    SetInputChannel(icSPDIF0);
  else if(pControl == pInputPage_InputButton_DVD_HDD)
 800b7b6:	4b1f      	ldr	r3, [pc, #124]	@ (800b834 <InputPage_InputButtonPressed+0x88>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4283      	cmp	r3, r0
 800b7bc:	d01c      	beq.n	800b7f8 <InputPage_InputButtonPressed+0x4c>
    SetInputChannel(icSPDIF1);
  else if(pControl == pInputPage_InputButton_GCA)
 800b7be:	4b1e      	ldr	r3, [pc, #120]	@ (800b838 <InputPage_InputButtonPressed+0x8c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4283      	cmp	r3, r0
 800b7c4:	d01c      	beq.n	800b800 <InputPage_InputButtonPressed+0x54>
    SetInputChannel(icSPDIF2);
  else if(pControl == pInputPage_InputButton_Computer)
 800b7c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b83c <InputPage_InputButtonPressed+0x90>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4283      	cmp	r3, r0
 800b7cc:	d01c      	beq.n	800b808 <InputPage_InputButtonPressed+0x5c>
    SetInputChannel(icSPDIF3);
  else if(pControl == pInputPage_InputButton_DAB)
 800b7ce:	4b1c      	ldr	r3, [pc, #112]	@ (800b840 <InputPage_InputButtonPressed+0x94>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4283      	cmp	r3, r0
 800b7d4:	d01c      	beq.n	800b810 <InputPage_InputButtonPressed+0x64>
    SetInputChannel(icSi468x_DAB);
  else if(pControl == pInputPage_InputButton_Si468x_FM)
 800b7d6:	4b1b      	ldr	r3, [pc, #108]	@ (800b844 <InputPage_InputButtonPressed+0x98>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4283      	cmp	r3, r0
 800b7dc:	d01c      	beq.n	800b818 <InputPage_InputButtonPressed+0x6c>
    SetInputChannel(icSi468x_FM);
  else if(pControl == pInputPage_InputButton_AR1010_FM)
 800b7de:	4b1a      	ldr	r3, [pc, #104]	@ (800b848 <InputPage_InputButtonPressed+0x9c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4283      	cmp	r3, r0
 800b7e4:	d01c      	beq.n	800b820 <InputPage_InputButtonPressed+0x74>
    SetInputChannel(icAR1010_FM);
  else if(pControl == pInputPage_InputButton_AuxIn)
 800b7e6:	4b19      	ldr	r3, [pc, #100]	@ (800b84c <InputPage_InputButtonPressed+0xa0>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4283      	cmp	r3, r0
 800b7ec:	d01c      	beq.n	800b828 <InputPage_InputButtonPressed+0x7c>
    SetInputChannel(icAuxIn);
}
 800b7ee:	bd08      	pop	{r3, pc}
    SetInputChannel(icSPDIF0);
 800b7f0:	2001      	movs	r0, #1
 800b7f2:	f7ff ff9f 	bl	800b734 <SetInputChannel>
 800b7f6:	e7fa      	b.n	800b7ee <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icSPDIF1);
 800b7f8:	2002      	movs	r0, #2
 800b7fa:	f7ff ff9b 	bl	800b734 <SetInputChannel>
 800b7fe:	e7f6      	b.n	800b7ee <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icSPDIF2);
 800b800:	2003      	movs	r0, #3
 800b802:	f7ff ff97 	bl	800b734 <SetInputChannel>
 800b806:	e7f2      	b.n	800b7ee <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icSPDIF3);
 800b808:	2004      	movs	r0, #4
 800b80a:	f7ff ff93 	bl	800b734 <SetInputChannel>
 800b80e:	e7ee      	b.n	800b7ee <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icSi468x_DAB);
 800b810:	2005      	movs	r0, #5
 800b812:	f7ff ff8f 	bl	800b734 <SetInputChannel>
 800b816:	e7ea      	b.n	800b7ee <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icSi468x_FM);
 800b818:	2006      	movs	r0, #6
 800b81a:	f7ff ff8b 	bl	800b734 <SetInputChannel>
 800b81e:	e7e6      	b.n	800b7ee <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icAR1010_FM);
 800b820:	2007      	movs	r0, #7
 800b822:	f7ff ff87 	bl	800b734 <SetInputChannel>
 800b826:	e7e2      	b.n	800b7ee <InputPage_InputButtonPressed+0x42>
    SetInputChannel(icAuxIn);
 800b828:	2008      	movs	r0, #8
 800b82a:	f7ff ff83 	bl	800b734 <SetInputChannel>
}
 800b82e:	e7de      	b.n	800b7ee <InputPage_InputButtonPressed+0x42>
 800b830:	200172a4 	.word	0x200172a4
 800b834:	200172a0 	.word	0x200172a0
 800b838:	2001729c 	.word	0x2001729c
 800b83c:	20017298 	.word	0x20017298
 800b840:	20017294 	.word	0x20017294
 800b844:	20017290 	.word	0x20017290
 800b848:	2001728c 	.word	0x2001728c
 800b84c:	20017288 	.word	0x20017288

0800b850 <DebugInfoPage_CustomDraw>:
//}

void DebugInfoPage_CustomDraw(JSB_UI_Page_t *pPage)
{
  // DrawADCRegisters();
}
 800b850:	4770      	bx	lr
	...

0800b854 <GenSPI_Begin>:
{
 800b854:	b508      	push	{r3, lr}
  xSemaphoreTake(SPI3_MutexHandle, portMAX_DELAY);
 800b856:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b85a:	4b02      	ldr	r3, [pc, #8]	@ (800b864 <GenSPI_Begin+0x10>)
 800b85c:	6818      	ldr	r0, [r3, #0]
 800b85e:	f7fb fcb7 	bl	80071d0 <xQueueSemaphoreTake>
}
 800b862:	bd08      	pop	{r3, pc}
 800b864:	2001532c 	.word	0x2001532c

0800b868 <GenSPI_End>:
{
 800b868:	b508      	push	{r3, lr}
  xSemaphoreGive(SPI3_MutexHandle);
 800b86a:	2300      	movs	r3, #0
 800b86c:	461a      	mov	r2, r3
 800b86e:	4619      	mov	r1, r3
 800b870:	4802      	ldr	r0, [pc, #8]	@ (800b87c <GenSPI_End+0x14>)
 800b872:	6800      	ldr	r0, [r0, #0]
 800b874:	f7fb fa36 	bl	8006ce4 <xQueueGenericSend>
}
 800b878:	bd08      	pop	{r3, pc}
 800b87a:	bf00      	nop
 800b87c:	2001532c 	.word	0x2001532c

0800b880 <pPowerAmplifierPage_VolumeControlTweakText>:
{
 800b880:	b500      	push	{lr}
 800b882:	b083      	sub	sp, #12
 800b884:	4603      	mov	r3, r0
 800b886:	4608      	mov	r0, r1
 800b888:	4611      	mov	r1, r2
  snprintf(Result, MaxResultLength, "%s %0.1f dB", pControl->Text, *pControl->pSliderValue);
 800b88a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b88c:	ed92 7a00 	vldr	s14, [r2]
 800b890:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800b894:	ed8d 7b00 	vstr	d7, [sp]
 800b898:	3314      	adds	r3, #20
 800b89a:	4a03      	ldr	r2, [pc, #12]	@ (800b8a8 <pPowerAmplifierPage_VolumeControlTweakText+0x28>)
 800b89c:	f004 fd98 	bl	80103d0 <sniprintf>
}
 800b8a0:	b003      	add	sp, #12
 800b8a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8a6:	bf00      	nop
 800b8a8:	08013098 	.word	0x08013098

0800b8ac <RadioInfoPage_CustomDraw>:
{
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	b0ba      	sub	sp, #232	@ 0xe8
  switch (InputChannel)
 800b8b0:	4b99      	ldr	r3, [pc, #612]	@ (800bb18 <RadioInfoPage_CustomDraw+0x26c>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b06      	cmp	r3, #6
 800b8b6:	d061      	beq.n	800b97c <RadioInfoPage_CustomDraw+0xd0>
 800b8b8:	2b07      	cmp	r3, #7
 800b8ba:	d013      	beq.n	800b8e4 <RadioInfoPage_CustomDraw+0x38>
 800b8bc:	2b05      	cmp	r3, #5
 800b8be:	f000 80c6 	beq.w	800ba4e <RadioInfoPage_CustomDraw+0x1a2>
      sprintf(S, "Radio: None");
 800b8c2:	ac08      	add	r4, sp, #32
 800b8c4:	4b95      	ldr	r3, [pc, #596]	@ (800bb1c <RadioInfoPage_CustomDraw+0x270>)
 800b8c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b8ce:	f7fd f9d7 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800b8d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	b282      	uxth	r2, r0
 800b8da:	2100      	movs	r1, #0
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f7fd fb59 	bl	8008f94 <ILI9341_DrawTextAtXY>
}
 800b8e2:	e049      	b.n	800b978 <RadioInfoPage_CustomDraw+0xcc>
      sprintf(S, "Radio: AR1010 FM");
 800b8e4:	ac08      	add	r4, sp, #32
 800b8e6:	4d8e      	ldr	r5, [pc, #568]	@ (800bb20 <RadioInfoPage_CustomDraw+0x274>)
 800b8e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	7023      	strb	r3, [r4, #0]
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b8f0:	f7fd f9c6 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800b8f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	b282      	uxth	r2, r0
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	a808      	add	r0, sp, #32
 800b900:	f7fd fb48 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "Frequency: %0.1f MHz", JSB_AR1010_get_frequency());
 800b904:	f7fc fc60 	bl	80081c8 <JSB_AR1010_get_frequency>
 800b908:	ee07 0a90 	vmov	s15, r0
 800b90c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b910:	ec53 2b17 	vmov	r2, r3, d7
 800b914:	4983      	ldr	r1, [pc, #524]	@ (800bb24 <RadioInfoPage_CustomDraw+0x278>)
 800b916:	a808      	add	r0, sp, #32
 800b918:	f004 fd90 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b91c:	f7fd f9b0 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800b920:	0082      	lsls	r2, r0, #2
 800b922:	b292      	uxth	r2, r2
 800b924:	2301      	movs	r3, #1
 800b926:	2100      	movs	r1, #0
 800b928:	a808      	add	r0, sp, #32
 800b92a:	f7fd fb33 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "RSSI: %d", JSB_AR1010_get_RSSI());
 800b92e:	f7fc fc61 	bl	80081f4 <JSB_AR1010_get_RSSI>
 800b932:	4602      	mov	r2, r0
 800b934:	497c      	ldr	r1, [pc, #496]	@ (800bb28 <RadioInfoPage_CustomDraw+0x27c>)
 800b936:	a808      	add	r0, sp, #32
 800b938:	f004 fd80 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b93c:	f7fd f9a0 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800b940:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b944:	2301      	movs	r3, #1
 800b946:	b282      	uxth	r2, r0
 800b948:	2100      	movs	r1, #0
 800b94a:	a808      	add	r0, sp, #32
 800b94c:	f7fd fb22 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "Stereo: %s", BooleanToNoYes(JSB_AR1010_is_stereo()));
 800b950:	f7fc fc57 	bl	8008202 <JSB_AR1010_is_stereo>
 800b954:	f7fc fcfa 	bl	800834c <BooleanToNoYes>
 800b958:	4602      	mov	r2, r0
 800b95a:	4974      	ldr	r1, [pc, #464]	@ (800bb2c <RadioInfoPage_CustomDraw+0x280>)
 800b95c:	a808      	add	r0, sp, #32
 800b95e:	f004 fd6d 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b962:	f7fd f98d 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800b966:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b96a:	0042      	lsls	r2, r0, #1
 800b96c:	b292      	uxth	r2, r2
 800b96e:	2301      	movs	r3, #1
 800b970:	2100      	movs	r1, #0
 800b972:	a808      	add	r0, sp, #32
 800b974:	f7fd fb0e 	bl	8008f94 <ILI9341_DrawTextAtXY>
}
 800b978:	b03a      	add	sp, #232	@ 0xe8
 800b97a:	bd70      	pop	{r4, r5, r6, pc}
      JSB_si468x_FM_get_rsq_status(&FM_RSQ_Status);
 800b97c:	a806      	add	r0, sp, #24
 800b97e:	f7ff fda7 	bl	800b4d0 <JSB_si468x_FM_get_rsq_status>
      StereoSeparation = JSB_si468x_FM_get_stereo_separation();
 800b982:	f7ff fddd 	bl	800b540 <JSB_si468x_FM_get_stereo_separation>
 800b986:	4606      	mov	r6, r0
      sprintf(S, "Radio: Si4684 FM");
 800b988:	ac08      	add	r4, sp, #32
 800b98a:	4d69      	ldr	r5, [pc, #420]	@ (800bb30 <RadioInfoPage_CustomDraw+0x284>)
 800b98c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b98e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	7023      	strb	r3, [r4, #0]
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b994:	f7fd f974 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800b998:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800b99c:	2301      	movs	r3, #1
 800b99e:	b282      	uxth	r2, r0
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	a808      	add	r0, sp, #32
 800b9a4:	f7fd faf6 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "Frequency: %0.1f MHz", FM_RSQ_Status.Frequency);
 800b9a8:	eddd 7a06 	vldr	s15, [sp, #24]
 800b9ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b9b0:	ec53 2b17 	vmov	r2, r3, d7
 800b9b4:	495b      	ldr	r1, [pc, #364]	@ (800bb24 <RadioInfoPage_CustomDraw+0x278>)
 800b9b6:	a808      	add	r0, sp, #32
 800b9b8:	f004 fd40 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b9bc:	f7fd f960 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800b9c0:	0082      	lsls	r2, r0, #2
 800b9c2:	b292      	uxth	r2, r2
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	a808      	add	r0, sp, #32
 800b9ca:	f7fd fae3 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "RSSI: %d dBuV", FM_RSQ_Status.RSSI);
 800b9ce:	f99d 201c 	ldrsb.w	r2, [sp, #28]
 800b9d2:	4958      	ldr	r1, [pc, #352]	@ (800bb34 <RadioInfoPage_CustomDraw+0x288>)
 800b9d4:	a808      	add	r0, sp, #32
 800b9d6:	f004 fd31 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b9da:	f7fd f951 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800b9de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	b282      	uxth	r2, r0
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	a808      	add	r0, sp, #32
 800b9ea:	f7fd fad3 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "SNR: %d dB", FM_RSQ_Status.SNR);
 800b9ee:	f99d 201d 	ldrsb.w	r2, [sp, #29]
 800b9f2:	4951      	ldr	r1, [pc, #324]	@ (800bb38 <RadioInfoPage_CustomDraw+0x28c>)
 800b9f4:	a808      	add	r0, sp, #32
 800b9f6:	f004 fd21 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800b9fa:	f7fd f941 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800b9fe:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800ba02:	0052      	lsls	r2, r2, #1
 800ba04:	b292      	uxth	r2, r2
 800ba06:	2301      	movs	r3, #1
 800ba08:	2100      	movs	r1, #0
 800ba0a:	a808      	add	r0, sp, #32
 800ba0c:	f7fd fac2 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "Multi-path: %d", FM_RSQ_Status.MultiPath);
 800ba10:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800ba14:	4949      	ldr	r1, [pc, #292]	@ (800bb3c <RadioInfoPage_CustomDraw+0x290>)
 800ba16:	a808      	add	r0, sp, #32
 800ba18:	f004 fd10 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800ba1c:	f7fd f930 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800ba20:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800ba24:	2301      	movs	r3, #1
 800ba26:	b282      	uxth	r2, r0
 800ba28:	2100      	movs	r1, #0
 800ba2a:	a808      	add	r0, sp, #32
 800ba2c:	f7fd fab2 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "Stereo separation: %d", StereoSeparation);
 800ba30:	4632      	mov	r2, r6
 800ba32:	4943      	ldr	r1, [pc, #268]	@ (800bb40 <RadioInfoPage_CustomDraw+0x294>)
 800ba34:	a808      	add	r0, sp, #32
 800ba36:	f004 fd01 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800ba3a:	f7fd f921 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800ba3e:	00c2      	lsls	r2, r0, #3
 800ba40:	b292      	uxth	r2, r2
 800ba42:	2301      	movs	r3, #1
 800ba44:	2100      	movs	r1, #0
 800ba46:	a808      	add	r0, sp, #32
 800ba48:	f7fd faa4 	bl	8008f94 <ILI9341_DrawTextAtXY>
      break;
 800ba4c:	e794      	b.n	800b978 <RadioInfoPage_CustomDraw+0xcc>
      si468x_DAB_get_digrad_status(&DAB_Status);
 800ba4e:	a801      	add	r0, sp, #4
 800ba50:	f7ff fc14 	bl	800b27c <si468x_DAB_get_digrad_status>
      sprintf(S, "Radio: Si4684 DAB");
 800ba54:	f10d 0c20 	add.w	ip, sp, #32
 800ba58:	4c3a      	ldr	r4, [pc, #232]	@ (800bb44 <RadioInfoPage_CustomDraw+0x298>)
 800ba5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	f8ac 3000 	strh.w	r3, [ip]
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800ba66:	f7fd f90b 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800ba6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ba6e:	2301      	movs	r3, #1
 800ba70:	b282      	uxth	r2, r0
 800ba72:	2100      	movs	r1, #0
 800ba74:	a808      	add	r0, sp, #32
 800ba76:	f7fd fa8d 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "Service: %s", DAB_ServiceName);
 800ba7a:	4a33      	ldr	r2, [pc, #204]	@ (800bb48 <RadioInfoPage_CustomDraw+0x29c>)
 800ba7c:	4933      	ldr	r1, [pc, #204]	@ (800bb4c <RadioInfoPage_CustomDraw+0x2a0>)
 800ba7e:	a808      	add	r0, sp, #32
 800ba80:	f004 fcdc 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800ba84:	f7fd f8fc 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800ba88:	0082      	lsls	r2, r0, #2
 800ba8a:	b292      	uxth	r2, r2
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	2100      	movs	r1, #0
 800ba90:	a808      	add	r0, sp, #32
 800ba92:	f7fd fa7f 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "RSSI: %d", (int8_t)DAB_Status.data[2]);
 800ba96:	f99d 2006 	ldrsb.w	r2, [sp, #6]
 800ba9a:	4923      	ldr	r1, [pc, #140]	@ (800bb28 <RadioInfoPage_CustomDraw+0x27c>)
 800ba9c:	a808      	add	r0, sp, #32
 800ba9e:	f004 fccd 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800baa2:	f7fd f8ed 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800baa6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800baaa:	2301      	movs	r3, #1
 800baac:	b282      	uxth	r2, r0
 800baae:	2100      	movs	r1, #0
 800bab0:	a808      	add	r0, sp, #32
 800bab2:	f7fd fa6f 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "SNR: %d dB", (int8_t)DAB_Status.data[3]);
 800bab6:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 800baba:	491f      	ldr	r1, [pc, #124]	@ (800bb38 <RadioInfoPage_CustomDraw+0x28c>)
 800babc:	a808      	add	r0, sp, #32
 800babe:	f004 fcbd 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800bac2:	f7fd f8dd 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bac6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800baca:	0042      	lsls	r2, r0, #1
 800bacc:	b292      	uxth	r2, r2
 800bace:	2301      	movs	r3, #1
 800bad0:	2100      	movs	r1, #0
 800bad2:	a808      	add	r0, sp, #32
 800bad4:	f7fd fa5e 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "FIC quality: %d", (int8_t)DAB_Status.data[4]);
 800bad8:	f99d 2008 	ldrsb.w	r2, [sp, #8]
 800badc:	491c      	ldr	r1, [pc, #112]	@ (800bb50 <RadioInfoPage_CustomDraw+0x2a4>)
 800bade:	a808      	add	r0, sp, #32
 800bae0:	f004 fcac 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800bae4:	f7fd f8cc 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bae8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800baec:	2301      	movs	r3, #1
 800baee:	b282      	uxth	r2, r0
 800baf0:	2100      	movs	r1, #0
 800baf2:	a808      	add	r0, sp, #32
 800baf4:	f7fd fa4e 	bl	8008f94 <ILI9341_DrawTextAtXY>
      sprintf(S, "CNR: %d", (int8_t)DAB_Status.data[5]);
 800baf8:	f99d 2009 	ldrsb.w	r2, [sp, #9]
 800bafc:	4915      	ldr	r1, [pc, #84]	@ (800bb54 <RadioInfoPage_CustomDraw+0x2a8>)
 800bafe:	a808      	add	r0, sp, #32
 800bb00:	f004 fc9c 	bl	801043c <siprintf>
      ILI9341_DrawTextAtXY(S, 0, LineIndex++ *ILI9341_GetFontYSpacing(), tpLeft);
 800bb04:	f7fd f8bc 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bb08:	00c2      	lsls	r2, r0, #3
 800bb0a:	b292      	uxth	r2, r2
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	2100      	movs	r1, #0
 800bb10:	a808      	add	r0, sp, #32
 800bb12:	f7fd fa3f 	bl	8008f94 <ILI9341_DrawTextAtXY>
      break;
 800bb16:	e72f      	b.n	800b978 <RadioInfoPage_CustomDraw+0xcc>
 800bb18:	20017203 	.word	0x20017203
 800bb1c:	08013178 	.word	0x08013178
 800bb20:	080130a4 	.word	0x080130a4
 800bb24:	080130b8 	.word	0x080130b8
 800bb28:	080130d0 	.word	0x080130d0
 800bb2c:	080130dc 	.word	0x080130dc
 800bb30:	080130e8 	.word	0x080130e8
 800bb34:	080130fc 	.word	0x080130fc
 800bb38:	0801310c 	.word	0x0801310c
 800bb3c:	08013118 	.word	0x08013118
 800bb40:	08013128 	.word	0x08013128
 800bb44:	08013140 	.word	0x08013140
 800bb48:	20015340 	.word	0x20015340
 800bb4c:	08013154 	.word	0x08013154
 800bb50:	08013160 	.word	0x08013160
 800bb54:	08013170 	.word	0x08013170

0800bb58 <SPDIFRX_Locked_Callback>:
{
 800bb58:	b508      	push	{r3, lr}
 800bb5a:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, Value);
 800bb5c:	2104      	movs	r1, #4
 800bb5e:	4802      	ldr	r0, [pc, #8]	@ (800bb68 <SPDIFRX_Locked_Callback+0x10>)
 800bb60:	f7f5 f977 	bl	8000e52 <HAL_GPIO_WritePin>
}
 800bb64:	bd08      	pop	{r3, pc}
 800bb66:	bf00      	nop
 800bb68:	40020000 	.word	0x40020000

0800bb6c <GetInputSampleRate>:
{
 800bb6c:	b508      	push	{r3, lr}
  if (SPDIFRX_IsStarted())
 800bb6e:	f7fd fe4b 	bl	8009808 <SPDIFRX_IsStarted>
 800bb72:	b910      	cbnz	r0, 800bb7a <GetInputSampleRate+0xe>
  return OutputSampleRate; // Input sample rate is the same as the output one.
 800bb74:	4b02      	ldr	r3, [pc, #8]	@ (800bb80 <GetInputSampleRate+0x14>)
 800bb76:	6818      	ldr	r0, [r3, #0]
}
 800bb78:	bd08      	pop	{r3, pc}
    return SPDIFRX_GetInputSampleRate();
 800bb7a:	f7fd fc37 	bl	80093ec <SPDIFRX_GetInputSampleRate>
 800bb7e:	e7fb      	b.n	800bb78 <GetInputSampleRate+0xc>
 800bb80:	200153d8 	.word	0x200153d8

0800bb84 <InfoPage_CustomDraw>:
{
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	b0b4      	sub	sp, #208	@ 0xd0
  if (InputChannelIsSPDIF())
 800bb88:	f7ff fdec 	bl	800b764 <InputChannelIsSPDIF>
 800bb8c:	b978      	cbnz	r0, 800bbae <InfoPage_CustomDraw+0x2a>
    switch (InputChannel)
 800bb8e:	4b9c      	ldr	r3, [pc, #624]	@ (800be00 <InfoPage_CustomDraw+0x27c>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2b08      	cmp	r3, #8
 800bb94:	f200 8100 	bhi.w	800bd98 <InfoPage_CustomDraw+0x214>
 800bb98:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb9c:	00fe001d 	.word	0x00fe001d
 800bba0:	00fe00fe 	.word	0x00fe00fe
 800bba4:	00d500fe 	.word	0x00d500fe
 800bba8:	00eb00de 	.word	0x00eb00de
 800bbac:	00f8      	.short	0x00f8
    sprintf(S, "Input: SPDIF %d", GetSPDIFInputChannel(InputChannel));
 800bbae:	4b94      	ldr	r3, [pc, #592]	@ (800be00 <InfoPage_CustomDraw+0x27c>)
 800bbb0:	7818      	ldrb	r0, [r3, #0]
 800bbb2:	f7ff fdd3 	bl	800b75c <GetSPDIFInputChannel>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	4992      	ldr	r1, [pc, #584]	@ (800be04 <InfoPage_CustomDraw+0x280>)
 800bbba:	a802      	add	r0, sp, #8
 800bbbc:	f004 fc3e 	bl	801043c <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bbc0:	f7fd f85e 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bbc4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800bbc8:	2301      	movs	r3, #1
 800bbca:	b282      	uxth	r2, r0
 800bbcc:	2100      	movs	r1, #0
 800bbce:	a802      	add	r0, sp, #8
 800bbd0:	f7fd f9e0 	bl	8008f94 <ILI9341_DrawTextAtXY>
 800bbd4:	e00e      	b.n	800bbf4 <InfoPage_CustomDraw+0x70>
        sprintf(S, "Input: None");
 800bbd6:	ab02      	add	r3, sp, #8
 800bbd8:	4a8b      	ldr	r2, [pc, #556]	@ (800be08 <InfoPage_CustomDraw+0x284>)
 800bbda:	ca07      	ldmia	r2, {r0, r1, r2}
 800bbdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bbe0:	f7fd f84e 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bbe4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800bbe8:	2301      	movs	r3, #1
 800bbea:	b282      	uxth	r2, r0
 800bbec:	2100      	movs	r1, #0
 800bbee:	a802      	add	r0, sp, #8
 800bbf0:	f7fd f9d0 	bl	8008f94 <ILI9341_DrawTextAtXY>
  if (InputChannel == icSi468x_DAB)
 800bbf4:	4b82      	ldr	r3, [pc, #520]	@ (800be00 <InfoPage_CustomDraw+0x27c>)
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	2b05      	cmp	r3, #5
 800bbfa:	f000 80d0 	beq.w	800bd9e <InfoPage_CustomDraw+0x21a>
 800bbfe:	2404      	movs	r4, #4
  if (InputChannelIsSPDIF())
 800bc00:	f7ff fdb0 	bl	800b764 <InputChannelIsSPDIF>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f040 80da 	bne.w	800bdbe <InfoPage_CustomDraw+0x23a>
  sprintf(S, "Input sample rate: %u", (unsigned int)GetInputSampleRate());
 800bc0a:	f7ff ffaf 	bl	800bb6c <GetInputSampleRate>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	497e      	ldr	r1, [pc, #504]	@ (800be0c <InfoPage_CustomDraw+0x288>)
 800bc12:	a802      	add	r0, sp, #8
 800bc14:	f004 fc12 	bl	801043c <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bc18:	1c66      	adds	r6, r4, #1
 800bc1a:	f7fd f831 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bc1e:	fb14 f200 	smulbb	r2, r4, r0
 800bc22:	2301      	movs	r3, #1
 800bc24:	b292      	uxth	r2, r2
 800bc26:	2100      	movs	r1, #0
 800bc28:	a802      	add	r0, sp, #8
 800bc2a:	f7fd f9b3 	bl	8008f94 <ILI9341_DrawTextAtXY>
  sprintf(S, "Process gain: %0.2f", Process_Gain);
 800bc2e:	4b78      	ldr	r3, [pc, #480]	@ (800be10 <InfoPage_CustomDraw+0x28c>)
 800bc30:	edd3 7a00 	vldr	s15, [r3]
 800bc34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc38:	ec53 2b17 	vmov	r2, r3, d7
 800bc3c:	4975      	ldr	r1, [pc, #468]	@ (800be14 <InfoPage_CustomDraw+0x290>)
 800bc3e:	a802      	add	r0, sp, #8
 800bc40:	f004 fbfc 	bl	801043c <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bc44:	1ca5      	adds	r5, r4, #2
 800bc46:	f7fd f81b 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bc4a:	fb16 f200 	smulbb	r2, r6, r0
 800bc4e:	2301      	movs	r3, #1
 800bc50:	b292      	uxth	r2, r2
 800bc52:	2100      	movs	r1, #0
 800bc54:	a802      	add	r0, sp, #8
 800bc56:	f7fd f99d 	bl	8008f94 <ILI9341_DrawTextAtXY>
  sprintf(S, "Process muted: %s", BooleanToNoYes(Process_UserMuted));
 800bc5a:	4b6f      	ldr	r3, [pc, #444]	@ (800be18 <InfoPage_CustomDraw+0x294>)
 800bc5c:	7818      	ldrb	r0, [r3, #0]
 800bc5e:	f7fc fb75 	bl	800834c <BooleanToNoYes>
 800bc62:	4602      	mov	r2, r0
 800bc64:	496d      	ldr	r1, [pc, #436]	@ (800be1c <InfoPage_CustomDraw+0x298>)
 800bc66:	a802      	add	r0, sp, #8
 800bc68:	f004 fbe8 	bl	801043c <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bc6c:	1ce6      	adds	r6, r4, #3
 800bc6e:	f7fd f807 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bc72:	fb15 f200 	smulbb	r2, r5, r0
 800bc76:	2301      	movs	r3, #1
 800bc78:	b292      	uxth	r2, r2
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	a802      	add	r0, sp, #8
 800bc7e:	f7fd f989 	bl	8008f94 <ILI9341_DrawTextAtXY>
  sprintf(S, "Output sample rate: %u", (unsigned int)OutputSampleRate);
 800bc82:	4b67      	ldr	r3, [pc, #412]	@ (800be20 <InfoPage_CustomDraw+0x29c>)
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	4967      	ldr	r1, [pc, #412]	@ (800be24 <InfoPage_CustomDraw+0x2a0>)
 800bc88:	a802      	add	r0, sp, #8
 800bc8a:	f004 fbd7 	bl	801043c <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bc8e:	1d25      	adds	r5, r4, #4
 800bc90:	f7fc fff6 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bc94:	fb16 f200 	smulbb	r2, r6, r0
 800bc98:	2301      	movs	r3, #1
 800bc9a:	b292      	uxth	r2, r2
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	a802      	add	r0, sp, #8
 800bca0:	f7fd f978 	bl	8008f94 <ILI9341_DrawTextAtXY>
  sprintf(S, "PA master volume: %0.1f", PA_MasterVolume_dB);
 800bca4:	4b60      	ldr	r3, [pc, #384]	@ (800be28 <InfoPage_CustomDraw+0x2a4>)
 800bca6:	edd3 7a00 	vldr	s15, [r3]
 800bcaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bcae:	ec53 2b17 	vmov	r2, r3, d7
 800bcb2:	495e      	ldr	r1, [pc, #376]	@ (800be2c <InfoPage_CustomDraw+0x2a8>)
 800bcb4:	a802      	add	r0, sp, #8
 800bcb6:	f004 fbc1 	bl	801043c <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bcba:	1d66      	adds	r6, r4, #5
 800bcbc:	f7fc ffe0 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bcc0:	fb15 f200 	smulbb	r2, r5, r0
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	b292      	uxth	r2, r2
 800bcc8:	2100      	movs	r1, #0
 800bcca:	a802      	add	r0, sp, #8
 800bccc:	f7fd f962 	bl	8008f94 <ILI9341_DrawTextAtXY>
  sprintf(S, "PA muted: %s", BooleanToNoYes(PA_UserMuted));
 800bcd0:	4b57      	ldr	r3, [pc, #348]	@ (800be30 <InfoPage_CustomDraw+0x2ac>)
 800bcd2:	7818      	ldrb	r0, [r3, #0]
 800bcd4:	f7fc fb3a 	bl	800834c <BooleanToNoYes>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	4956      	ldr	r1, [pc, #344]	@ (800be34 <InfoPage_CustomDraw+0x2b0>)
 800bcdc:	a802      	add	r0, sp, #8
 800bcde:	f004 fbad 	bl	801043c <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bce2:	1da5      	adds	r5, r4, #6
 800bce4:	f7fc ffcc 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bce8:	fb16 f200 	smulbb	r2, r6, r0
 800bcec:	2301      	movs	r3, #1
 800bcee:	b292      	uxth	r2, r2
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	a802      	add	r0, sp, #8
 800bcf4:	f7fd f94e 	bl	8008f94 <ILI9341_DrawTextAtXY>
  PA_ErrorStatus = PA_GetErrorStatus();
 800bcf8:	f7fe fd16 	bl	800a728 <PA_GetErrorStatus>
 800bcfc:	4602      	mov	r2, r0
  sprintf(S, "PA error status: %2X", PA_ErrorStatus);
 800bcfe:	494e      	ldr	r1, [pc, #312]	@ (800be38 <InfoPage_CustomDraw+0x2b4>)
 800bd00:	a802      	add	r0, sp, #8
 800bd02:	f004 fb9b 	bl	801043c <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bd06:	3407      	adds	r4, #7
 800bd08:	f7fc ffba 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bd0c:	fb15 f200 	smulbb	r2, r5, r0
 800bd10:	2301      	movs	r3, #1
 800bd12:	b292      	uxth	r2, r2
 800bd14:	2100      	movs	r1, #0
 800bd16:	a802      	add	r0, sp, #8
 800bd18:	f7fd f93c 	bl	8008f94 <ILI9341_DrawTextAtXY>
  sprintf(S, "Bluetooth out: %s", BooleanToOffOn(BluetoothOut_On));
 800bd1c:	4b47      	ldr	r3, [pc, #284]	@ (800be3c <InfoPage_CustomDraw+0x2b8>)
 800bd1e:	7818      	ldrb	r0, [r3, #0]
 800bd20:	f7fc fb0a 	bl	8008338 <BooleanToOffOn>
 800bd24:	4602      	mov	r2, r0
 800bd26:	4946      	ldr	r1, [pc, #280]	@ (800be40 <InfoPage_CustomDraw+0x2bc>)
 800bd28:	a802      	add	r0, sp, #8
 800bd2a:	f004 fb87 	bl	801043c <siprintf>
  ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bd2e:	f7fc ffa7 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bd32:	fb14 f400 	smulbb	r4, r4, r0
 800bd36:	2301      	movs	r3, #1
 800bd38:	b2a2      	uxth	r2, r4
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	a802      	add	r0, sp, #8
 800bd3e:	f7fd f929 	bl	8008f94 <ILI9341_DrawTextAtXY>
}
 800bd42:	b034      	add	sp, #208	@ 0xd0
 800bd44:	bd70      	pop	{r4, r5, r6, pc}
        sprintf(S, "Input: Si4648 DAB radio");
 800bd46:	ac02      	add	r4, sp, #8
 800bd48:	4d3e      	ldr	r5, [pc, #248]	@ (800be44 <InfoPage_CustomDraw+0x2c0>)
 800bd4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd52:	e884 0003 	stmia.w	r4, {r0, r1}
        break;
 800bd56:	e743      	b.n	800bbe0 <InfoPage_CustomDraw+0x5c>
        sprintf(S, "Input: Si4648 FM radio");
 800bd58:	ac02      	add	r4, sp, #8
 800bd5a:	4d3b      	ldr	r5, [pc, #236]	@ (800be48 <InfoPage_CustomDraw+0x2c4>)
 800bd5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd60:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd64:	f844 0b04 	str.w	r0, [r4], #4
 800bd68:	f824 1b02 	strh.w	r1, [r4], #2
 800bd6c:	0c09      	lsrs	r1, r1, #16
 800bd6e:	7021      	strb	r1, [r4, #0]
        break;
 800bd70:	e736      	b.n	800bbe0 <InfoPage_CustomDraw+0x5c>
        sprintf(S, "Input: AR1010 FM radio");
 800bd72:	ac02      	add	r4, sp, #8
 800bd74:	4d35      	ldr	r5, [pc, #212]	@ (800be4c <InfoPage_CustomDraw+0x2c8>)
 800bd76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd7e:	f844 0b04 	str.w	r0, [r4], #4
 800bd82:	f824 1b02 	strh.w	r1, [r4], #2
 800bd86:	0c09      	lsrs	r1, r1, #16
 800bd88:	7021      	strb	r1, [r4, #0]
        break;
 800bd8a:	e729      	b.n	800bbe0 <InfoPage_CustomDraw+0x5c>
        sprintf(S, "Input: Aux in");
 800bd8c:	4b30      	ldr	r3, [pc, #192]	@ (800be50 <InfoPage_CustomDraw+0x2cc>)
 800bd8e:	ac02      	add	r4, sp, #8
 800bd90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd92:	c407      	stmia	r4!, {r0, r1, r2}
 800bd94:	8023      	strh	r3, [r4, #0]
        break;
 800bd96:	e723      	b.n	800bbe0 <InfoPage_CustomDraw+0x5c>
        Error_Handler();
 800bd98:	f002 fd9c 	bl	800e8d4 <Error_Handler>
        break;
 800bd9c:	e720      	b.n	800bbe0 <InfoPage_CustomDraw+0x5c>
    sprintf(S, "DAB service: %s", DAB_ServiceName);
 800bd9e:	4a2d      	ldr	r2, [pc, #180]	@ (800be54 <InfoPage_CustomDraw+0x2d0>)
 800bda0:	492d      	ldr	r1, [pc, #180]	@ (800be58 <InfoPage_CustomDraw+0x2d4>)
 800bda2:	a802      	add	r0, sp, #8
 800bda4:	f004 fb4a 	bl	801043c <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bda8:	f7fc ff6a 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bdac:	0082      	lsls	r2, r0, #2
 800bdae:	b292      	uxth	r2, r2
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	a802      	add	r0, sp, #8
 800bdb6:	f7fd f8ed 	bl	8008f94 <ILI9341_DrawTextAtXY>
 800bdba:	2405      	movs	r4, #5
 800bdbc:	e720      	b.n	800bc00 <InfoPage_CustomDraw+0x7c>
    SPDIFRX_GetNumErrors(&SPDIFRX_NumTransitionErrors, &SPDIFRX_NumFrameErrors, &SPDIFRX_NumSyncErrors);
 800bdbe:	f10d 0207 	add.w	r2, sp, #7
 800bdc2:	f10d 0106 	add.w	r1, sp, #6
 800bdc6:	f10d 0005 	add.w	r0, sp, #5
 800bdca:	f7fd fb15 	bl	80093f8 <SPDIFRX_GetNumErrors>
    sprintf(S, "Num SPDIF errors: %d", SPDIFRX_NumTransitionErrors + SPDIFRX_NumFrameErrors + SPDIFRX_NumSyncErrors);
 800bdce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bdd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bddc:	441a      	add	r2, r3
 800bdde:	491f      	ldr	r1, [pc, #124]	@ (800be5c <InfoPage_CustomDraw+0x2d8>)
 800bde0:	a802      	add	r0, sp, #8
 800bde2:	f004 fb2b 	bl	801043c <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800bde6:	1c65      	adds	r5, r4, #1
 800bde8:	f7fc ff4a 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800bdec:	fb14 f200 	smulbb	r2, r4, r0
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	b292      	uxth	r2, r2
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	a802      	add	r0, sp, #8
 800bdf8:	f7fd f8cc 	bl	8008f94 <ILI9341_DrawTextAtXY>
 800bdfc:	462c      	mov	r4, r5
 800bdfe:	e704      	b.n	800bc0a <InfoPage_CustomDraw+0x86>
 800be00:	20017203 	.word	0x20017203
 800be04:	08013184 	.word	0x08013184
 800be08:	08013194 	.word	0x08013194
 800be0c:	08013220 	.word	0x08013220
 800be10:	200003f8 	.word	0x200003f8
 800be14:	08013238 	.word	0x08013238
 800be18:	200153e4 	.word	0x200153e4
 800be1c:	0801324c 	.word	0x0801324c
 800be20:	200153d8 	.word	0x200153d8
 800be24:	08013260 	.word	0x08013260
 800be28:	200153e0 	.word	0x200153e0
 800be2c:	08013278 	.word	0x08013278
 800be30:	200153dc 	.word	0x200153dc
 800be34:	08013290 	.word	0x08013290
 800be38:	080132a0 	.word	0x080132a0
 800be3c:	200153c5 	.word	0x200153c5
 800be40:	080132b8 	.word	0x080132b8
 800be44:	080131a0 	.word	0x080131a0
 800be48:	080131b8 	.word	0x080131b8
 800be4c:	080131d0 	.word	0x080131d0
 800be50:	080131e8 	.word	0x080131e8
 800be54:	20015340 	.word	0x20015340
 800be58:	080131f8 	.word	0x080131f8
 800be5c:	08013208 	.word	0x08013208

0800be60 <HAL_SPI_TxCpltCallback>:
  if (hspi == &hspi3)
 800be60:	4b0d      	ldr	r3, [pc, #52]	@ (800be98 <HAL_SPI_TxCpltCallback+0x38>)
 800be62:	4283      	cmp	r3, r0
 800be64:	d000      	beq.n	800be68 <HAL_SPI_TxCpltCallback+0x8>
 800be66:	4770      	bx	lr
{
 800be68:	b500      	push	{lr}
 800be6a:	b083      	sub	sp, #12
    BaseType_t HigherPriorityTaskWoken = pdFALSE;
 800be6c:	2300      	movs	r3, #0
 800be6e:	9301      	str	r3, [sp, #4]
    xSemaphoreGiveFromISR(GenSPITransferCompleteSemaphoreHandle, &HigherPriorityTaskWoken);
 800be70:	a901      	add	r1, sp, #4
 800be72:	4b0a      	ldr	r3, [pc, #40]	@ (800be9c <HAL_SPI_TxCpltCallback+0x3c>)
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	f7fb f895 	bl	8006fa4 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(HigherPriorityTaskWoken);
 800be7a:	9b01      	ldr	r3, [sp, #4]
 800be7c:	b14b      	cbz	r3, 800be92 <HAL_SPI_TxCpltCallback+0x32>
 800be7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800be82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be86:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	f3bf 8f6f 	isb	sy
}
 800be92:	b003      	add	sp, #12
 800be94:	f85d fb04 	ldr.w	pc, [sp], #4
 800be98:	20017784 	.word	0x20017784
 800be9c:	20015328 	.word	0x20015328

0800bea0 <ESP32_SendCommmandToBeNothing>:
{
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	b084      	sub	sp, #16
  NumTicks_Start = HAL_GetTick();
 800bea4:	f7f4 fbe2 	bl	800066c <HAL_GetTick>
 800bea8:	4605      	mov	r5, r0
    ESP32_Ready = HAL_GPIO_ReadPin(ESP32_A_HSK_GPIO_Port, ESP32_A_HSK_Pin);
 800beaa:	2108      	movs	r1, #8
 800beac:	481b      	ldr	r0, [pc, #108]	@ (800bf1c <ESP32_SendCommmandToBeNothing+0x7c>)
 800beae:	f7f4 ffc9 	bl	8000e44 <HAL_GPIO_ReadPin>
 800beb2:	4604      	mov	r4, r0
    if (HAL_GetTick() - NumTicks_Start > ESP32_TimeoutTimeInMilliseconds)
 800beb4:	f7f4 fbda 	bl	800066c <HAL_GetTick>
 800beb8:	1b43      	subs	r3, r0, r5
 800beba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bebe:	d827      	bhi.n	800bf10 <ESP32_SendCommmandToBeNothing+0x70>
  } while (!ESP32_Ready);
 800bec0:	2c00      	cmp	r4, #0
 800bec2:	d0f2      	beq.n	800beaa <ESP32_SendCommmandToBeNothing+0xa>
  StringToGUID("{837C7FAA-9ADE-4E53-87B6-C5F42CEF40E9}", &Command.Format); // ESP32_BeNothing_CommandFormat0
 800bec4:	4669      	mov	r1, sp
 800bec6:	4816      	ldr	r0, [pc, #88]	@ (800bf20 <ESP32_SendCommmandToBeNothing+0x80>)
 800bec8:	f7fc fa4a 	bl	8008360 <StringToGUID>
  xSemaphoreTake(SPI3_MutexHandle, portMAX_DELAY);
 800becc:	4d15      	ldr	r5, [pc, #84]	@ (800bf24 <ESP32_SendCommmandToBeNothing+0x84>)
 800bece:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800bed2:	6828      	ldr	r0, [r5, #0]
 800bed4:	f7fb f97c 	bl	80071d0 <xQueueSemaphoreTake>
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 0);
 800bed8:	4e10      	ldr	r6, [pc, #64]	@ (800bf1c <ESP32_SendCommmandToBeNothing+0x7c>)
 800beda:	2200      	movs	r2, #0
 800bedc:	2104      	movs	r1, #4
 800bede:	4630      	mov	r0, r6
 800bee0:	f7f4 ffb7 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_Result = HAL_SPI_Transmit(&hspi3, (uint8_t *)&Command, sizeof(Command), ESP32_TimeoutTimeInMilliseconds);
 800bee4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bee8:	2210      	movs	r2, #16
 800beea:	4669      	mov	r1, sp
 800beec:	480e      	ldr	r0, [pc, #56]	@ (800bf28 <ESP32_SendCommmandToBeNothing+0x88>)
 800beee:	f7f8 f967 	bl	80041c0 <HAL_SPI_Transmit>
 800bef2:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
 800bef4:	2201      	movs	r2, #1
 800bef6:	2104      	movs	r1, #4
 800bef8:	4630      	mov	r0, r6
 800befa:	f7f4 ffaa 	bl	8000e52 <HAL_GPIO_WritePin>
  xSemaphoreGive(SPI3_MutexHandle);
 800befe:	2300      	movs	r3, #0
 800bf00:	461a      	mov	r2, r3
 800bf02:	4619      	mov	r1, r3
 800bf04:	6828      	ldr	r0, [r5, #0]
 800bf06:	f7fa feed 	bl	8006ce4 <xQueueGenericSend>
  if (HAL_Result != HAL_OK)
 800bf0a:	b924      	cbnz	r4, 800bf16 <ESP32_SendCommmandToBeNothing+0x76>
  return 1;
 800bf0c:	2001      	movs	r0, #1
 800bf0e:	e000      	b.n	800bf12 <ESP32_SendCommmandToBeNothing+0x72>
      return 0;
 800bf10:	2000      	movs	r0, #0
}
 800bf12:	b004      	add	sp, #16
 800bf14:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800bf16:	2000      	movs	r0, #0
 800bf18:	e7fb      	b.n	800bf12 <ESP32_SendCommmandToBeNothing+0x72>
 800bf1a:	bf00      	nop
 800bf1c:	40021000 	.word	0x40021000
 800bf20:	080132cc 	.word	0x080132cc
 800bf24:	2001532c 	.word	0x2001532c
 800bf28:	20017784 	.word	0x20017784

0800bf2c <ESP32_SendCommmandToBeBluetoothSource>:
{
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	b088      	sub	sp, #32
  NumTicks_Start = HAL_GetTick();
 800bf30:	f7f4 fb9c 	bl	800066c <HAL_GetTick>
 800bf34:	4605      	mov	r5, r0
    ESP32_Ready = HAL_GPIO_ReadPin(ESP32_A_HSK_GPIO_Port, ESP32_A_HSK_Pin);
 800bf36:	2108      	movs	r1, #8
 800bf38:	4821      	ldr	r0, [pc, #132]	@ (800bfc0 <ESP32_SendCommmandToBeBluetoothSource+0x94>)
 800bf3a:	f7f4 ff83 	bl	8000e44 <HAL_GPIO_ReadPin>
 800bf3e:	4604      	mov	r4, r0
    if (HAL_GetTick() - NumTicks_Start > ESP32_TimeoutTimeInMilliseconds)
 800bf40:	f7f4 fb94 	bl	800066c <HAL_GetTick>
 800bf44:	1b43      	subs	r3, r0, r5
 800bf46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf4a:	d833      	bhi.n	800bfb4 <ESP32_SendCommmandToBeBluetoothSource+0x88>
  } while (!ESP32_Ready);
 800bf4c:	2c00      	cmp	r4, #0
 800bf4e:	d0f2      	beq.n	800bf36 <ESP32_SendCommmandToBeBluetoothSource+0xa>
  StringToGUID("{6B44D75A-86B2-4A89-8E04-D1ABCF16E78F}", &Command.Format); // ESP32_BeBluetoothSource_CommandFormat0
 800bf50:	a901      	add	r1, sp, #4
 800bf52:	481c      	ldr	r0, [pc, #112]	@ (800bfc4 <ESP32_SendCommmandToBeBluetoothSource+0x98>)
 800bf54:	f7fc fa04 	bl	8008360 <StringToGUID>
  Command.SampleRate = SAI_AUDIO_FREQUENCY_44K; // Always operate at a sample rate of 44.1 KHz.
 800bf58:	f64a 4344 	movw	r3, #44100	@ 0xac44
 800bf5c:	9305      	str	r3, [sp, #20]
  Command.NumChannels = 2;
 800bf5e:	2302      	movs	r3, #2
 800bf60:	f8ad 3018 	strh.w	r3, [sp, #24]
  Command.NumBitsPerSampleChannel = 16;
 800bf64:	2310      	movs	r3, #16
 800bf66:	f8ad 301a 	strh.w	r3, [sp, #26]
  Command.NumSamplesPerBlock = ESP32_Samples_NumSamples;
 800bf6a:	4b17      	ldr	r3, [pc, #92]	@ (800bfc8 <ESP32_SendCommmandToBeBluetoothSource+0x9c>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	9307      	str	r3, [sp, #28]
  xSemaphoreTake(SPI3_MutexHandle, portMAX_DELAY);
 800bf70:	4d16      	ldr	r5, [pc, #88]	@ (800bfcc <ESP32_SendCommmandToBeBluetoothSource+0xa0>)
 800bf72:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800bf76:	6828      	ldr	r0, [r5, #0]
 800bf78:	f7fb f92a 	bl	80071d0 <xQueueSemaphoreTake>
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 0);
 800bf7c:	4e10      	ldr	r6, [pc, #64]	@ (800bfc0 <ESP32_SendCommmandToBeBluetoothSource+0x94>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	2104      	movs	r1, #4
 800bf82:	4630      	mov	r0, r6
 800bf84:	f7f4 ff65 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_Result = HAL_SPI_Transmit(&hspi3, (uint8_t *)&Command, sizeof(Command), ESP32_TimeoutTimeInMilliseconds);
 800bf88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bf8c:	221c      	movs	r2, #28
 800bf8e:	a901      	add	r1, sp, #4
 800bf90:	480f      	ldr	r0, [pc, #60]	@ (800bfd0 <ESP32_SendCommmandToBeBluetoothSource+0xa4>)
 800bf92:	f7f8 f915 	bl	80041c0 <HAL_SPI_Transmit>
 800bf96:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
 800bf98:	2201      	movs	r2, #1
 800bf9a:	2104      	movs	r1, #4
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	f7f4 ff58 	bl	8000e52 <HAL_GPIO_WritePin>
  xSemaphoreGive(SPI3_MutexHandle);
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	6828      	ldr	r0, [r5, #0]
 800bfaa:	f7fa fe9b 	bl	8006ce4 <xQueueGenericSend>
  if (HAL_Result != HAL_OK)
 800bfae:	b924      	cbnz	r4, 800bfba <ESP32_SendCommmandToBeBluetoothSource+0x8e>
  return 1;
 800bfb0:	2001      	movs	r0, #1
 800bfb2:	e000      	b.n	800bfb6 <ESP32_SendCommmandToBeBluetoothSource+0x8a>
      return 0;
 800bfb4:	2000      	movs	r0, #0
}
 800bfb6:	b008      	add	sp, #32
 800bfb8:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800bfba:	2000      	movs	r0, #0
 800bfbc:	e7fb      	b.n	800bfb6 <ESP32_SendCommmandToBeBluetoothSource+0x8a>
 800bfbe:	bf00      	nop
 800bfc0:	40021000 	.word	0x40021000
 800bfc4:	080132f4 	.word	0x080132f4
 800bfc8:	200153cc 	.word	0x200153cc
 800bfcc:	2001532c 	.word	0x2001532c
 800bfd0:	20017784 	.word	0x20017784

0800bfd4 <ESP32_SendSamplesFromAudioOutputBufferToESP32>:
{
 800bfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd8:	ed2d 8b02 	vpush	{d8}
 800bfdc:	b098      	sub	sp, #96	@ 0x60
 800bfde:	4604      	mov	r4, r0
  ESP32_Ready = HAL_GPIO_ReadPin(ESP32_A_HSK_GPIO_Port, ESP32_A_HSK_Pin);
 800bfe0:	2108      	movs	r1, #8
 800bfe2:	488c      	ldr	r0, [pc, #560]	@ (800c214 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x240>)
 800bfe4:	f7f4 ff2e 	bl	8000e44 <HAL_GPIO_ReadPin>
  if (!ESP32_Ready)
 800bfe8:	b920      	cbnz	r0, 800bff4 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x20>
}
 800bfea:	b018      	add	sp, #96	@ 0x60
 800bfec:	ecbd 8b02 	vpop	{d8}
 800bff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  StringToGUID("{4839C500-E431-42D3-9508-83009C1E31D4}", &Format); // ESP32_BeBluetoothSource_DataFormat0
 800bff4:	a911      	add	r1, sp, #68	@ 0x44
 800bff6:	4888      	ldr	r0, [pc, #544]	@ (800c218 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x244>)
 800bff8:	f7fc f9b2 	bl	8008360 <StringToGUID>
  if (SecondHalf)
 800bffc:	b134      	cbz	r4, 800c00c <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x38>
    AudioOutputBufferStartIndex = I2SBuffers_NumSamples / 2;
 800bffe:	4b87      	ldr	r3, [pc, #540]	@ (800c21c <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x248>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	085b      	lsrs	r3, r3, #1
 800c004:	ee08 3a10 	vmov	s16, r3
  for (SampleIndex = 0; SampleIndex < ESP32_Samples_NumSamples; ++SampleIndex)
 800c008:	2700      	movs	r7, #0
 800c00a:	e0a9      	b.n	800c160 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x18c>
    AudioOutputBufferStartIndex = 0;
 800c00c:	ed9f 8a84 	vldr	s16, [pc, #528]	@ 800c220 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x24c>
 800c010:	e7fa      	b.n	800c008 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x34>
    float I2SOutputBufferPosition = AudioOutputBufferStartIndex + SampleIndex * ESP32_SourceSampleStepSize;
 800c012:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 800c016:	ee07 7a10 	vmov	s14, r7
 800c01a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c01e:	4b81      	ldr	r3, [pc, #516]	@ (800c224 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x250>)
 800c020:	edd3 6a00 	vldr	s13, [r3]
 800c024:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c028:	ee77 7a87 	vadd.f32	s15, s15, s14
    I2SOutputBufferPosition_Fractional = modf(I2SOutputBufferPosition, &I2SOutputBufferPosition_Integral);
 800c02c:	aa06      	add	r2, sp, #24
 800c02e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c032:	ec51 0b17 	vmov	r0, r1, d7
 800c036:	f004 fbb3 	bl	80107a0 <modf>
 800c03a:	4680      	mov	r8, r0
 800c03c:	4689      	mov	r9, r1
    int32_t SourceSampleIndex0 = Wrap_int((int)(I2SOutputBufferPosition_Integral) - 1, I2SBuffers_NumSamples);
 800c03e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c042:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c046:	ee17 0a90 	vmov	r0, s15
 800c04a:	f8df a1d0 	ldr.w	sl, [pc, #464]	@ 800c21c <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x248>
 800c04e:	f8da 1000 	ldr.w	r1, [sl]
 800c052:	3801      	subs	r0, #1
 800c054:	f7fc f90f 	bl	8008276 <Wrap_int>
 800c058:	4606      	mov	r6, r0
    int32_t SourceSampleIndex1 = Wrap_int(SourceSampleIndex0 + 1, I2SBuffers_NumSamples);
 800c05a:	f8da 1000 	ldr.w	r1, [sl]
 800c05e:	3001      	adds	r0, #1
 800c060:	f7fc f909 	bl	8008276 <Wrap_int>
 800c064:	4605      	mov	r5, r0
    int32_t SourceSampleIndex2 = Wrap_int(SourceSampleIndex1 + 1, I2SBuffers_NumSamples);
 800c066:	f8da 1000 	ldr.w	r1, [sl]
 800c06a:	3001      	adds	r0, #1
 800c06c:	f7fc f903 	bl	8008276 <Wrap_int>
 800c070:	4604      	mov	r4, r0
    int32_t SourceSampleIndex3 = Wrap_int(SourceSampleIndex2 + 1, I2SBuffers_NumSamples);
 800c072:	f8da 1000 	ldr.w	r1, [sl]
 800c076:	3001      	adds	r0, #1
 800c078:	f7fc f8fd 	bl	8008276 <Wrap_int>
 800c07c:	4684      	mov	ip, r0
    AudioSample24_t SourceSample0 = I2SOutputBuffer[SourceSampleIndex0];
 800c07e:	4b6a      	ldr	r3, [pc, #424]	@ (800c228 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x254>)
 800c080:	aa09      	add	r2, sp, #36	@ 0x24
 800c082:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c086:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c08a:	e882 0003 	stmia.w	r2, {r0, r1}
    AudioSample24_t SourceSample1 = I2SOutputBuffer[SourceSampleIndex1];
 800c08e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c090:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c094:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c098:	e882 0003 	stmia.w	r2, {r0, r1}
    AudioSample24_t SourceSample2 = I2SOutputBuffer[SourceSampleIndex2];
 800c09c:	aa0d      	add	r2, sp, #52	@ 0x34
 800c09e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c0a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c0a6:	e882 0003 	stmia.w	r2, {r0, r1}
    AudioSample24_t SourceSample3 = I2SOutputBuffer[SourceSampleIndex3];
 800c0aa:	aa0f      	add	r2, sp, #60	@ 0x3c
 800c0ac:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800c0b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0b4:	e882 0003 	stmia.w	r2, {r0, r1}
    AudioOutputBufferSample.Left = CubicInterpolate(SourceSample0.Left, SourceSample1.Left, SourceSample2.Left, SourceSample3.Left, I2SOutputBufferPosition_Fractional);
 800c0b8:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800c0bc:	ee07 0a90 	vmov	s15, r0
 800c0c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c0c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0c8:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 800c0cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c0d0:	ed8d 7b00 	vstr	d7, [sp]
 800c0d4:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 800c0d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c0dc:	ec53 2b17 	vmov	r2, r3, d7
 800c0e0:	eddd 7a09 	vldr	s15, [sp, #36]	@ 0x24
 800c0e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c0e8:	ec51 0b17 	vmov	r0, r1, d7
 800c0ec:	f7fc f8db 	bl	80082a6 <CubicInterpolate>
 800c0f0:	ec41 0b17 	vmov	d7, r0, r1
 800c0f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c0f8:	ee17 4a90 	vmov	r4, s15
 800c0fc:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
    AudioOutputBufferSample.Right = CubicInterpolate(SourceSample0.Right, SourceSample1.Right, SourceSample2.Right, SourceSample3.Right, I2SOutputBufferPosition_Fractional);
 800c100:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800c104:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 800c108:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c10c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c110:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 800c114:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c118:	ed8d 7b00 	vstr	d7, [sp]
 800c11c:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 800c120:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c124:	ec53 2b17 	vmov	r2, r3, d7
 800c128:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 800c12c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c130:	ec51 0b17 	vmov	r0, r1, d7
 800c134:	f7fc f8b7 	bl	80082a6 <CubicInterpolate>
 800c138:	ec41 0b17 	vmov	d7, r0, r1
 800c13c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c140:	ee17 3a90 	vmov	r3, s15
 800c144:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
    ESPSample.Left = AudioOutputBufferSample.Left >> 8;
 800c148:	1224      	asrs	r4, r4, #8
 800c14a:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
    ESPSample.Right = AudioOutputBufferSample.Right >> 8;
 800c14e:	121b      	asrs	r3, r3, #8
 800c150:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    ESP32_pSamples[SampleIndex] = ESPSample;
 800c154:	4b35      	ldr	r3, [pc, #212]	@ (800c22c <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x258>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800c15a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
  for (SampleIndex = 0; SampleIndex < ESP32_Samples_NumSamples; ++SampleIndex)
 800c15e:	3701      	adds	r7, #1
 800c160:	4b33      	ldr	r3, [pc, #204]	@ (800c230 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x25c>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	429f      	cmp	r7, r3
 800c166:	f4ff af54 	bcc.w	800c012 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x3e>
  xSemaphoreTake(GenSPITransferCompleteSemaphoreHandle, 0); //!!!RTOS: Clear semaphore before use. This appears necessary.
 800c16a:	2100      	movs	r1, #0
 800c16c:	4b31      	ldr	r3, [pc, #196]	@ (800c234 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x260>)
 800c16e:	6818      	ldr	r0, [r3, #0]
 800c170:	f7fb f82e 	bl	80071d0 <xQueueSemaphoreTake>
  xSemaphoreTake(SPI3_MutexHandle, portMAX_DELAY);
 800c174:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c178:	4b2f      	ldr	r3, [pc, #188]	@ (800c238 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x264>)
 800c17a:	6818      	ldr	r0, [r3, #0]
 800c17c:	f7fb f828 	bl	80071d0 <xQueueSemaphoreTake>
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 0);
 800c180:	2200      	movs	r2, #0
 800c182:	2104      	movs	r1, #4
 800c184:	4823      	ldr	r0, [pc, #140]	@ (800c214 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x240>)
 800c186:	f7f4 fe64 	bl	8000e52 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&Format, sizeof(Format), HAL_MAX_DELAY);
 800c18a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c18e:	2210      	movs	r2, #16
 800c190:	a911      	add	r1, sp, #68	@ 0x44
 800c192:	482a      	ldr	r0, [pc, #168]	@ (800c23c <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x268>)
 800c194:	f7f8 f814 	bl	80041c0 <HAL_SPI_Transmit>
  uint32_t NumBytes = ESP32_Samples_NumSamples * sizeof(AudioSample16_t);
 800c198:	4b25      	ldr	r3, [pc, #148]	@ (800c230 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x25c>)
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	0092      	lsls	r2, r2, #2
  SCB_CleanDCache_by_Addr((uint32_t *)ESP32_pSamples, NumBytes);
 800c19e:	4613      	mov	r3, r2
    uint32_t op_addr = (uint32_t) addr;
 800c1a0:	4922      	ldr	r1, [pc, #136]	@ (800c22c <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x258>)
 800c1a2:	6809      	ldr	r1, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800c1a4:	f3bf 8f4f 	dsb	sy
}
 800c1a8:	e004      	b.n	800c1b4 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x1e0>
      SCB->DCCMVAC = op_addr;
 800c1aa:	4825      	ldr	r0, [pc, #148]	@ (800c240 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x26c>)
 800c1ac:	f8c0 1268 	str.w	r1, [r0, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 800c1b0:	3120      	adds	r1, #32
      op_size -=           linesize;
 800c1b2:	3b20      	subs	r3, #32
    while (op_size > 0) {
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dcf8      	bgt.n	800c1aa <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x1d6>
  __ASM volatile ("dsb 0xF":::"memory");
 800c1b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c1bc:	f3bf 8f6f 	isb	sy
  HAL_Result = HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *)ESP32_pSamples, NumBytes); // One DMA item is 8 bits.
 800c1c0:	b292      	uxth	r2, r2
 800c1c2:	4b1a      	ldr	r3, [pc, #104]	@ (800c22c <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x258>)
 800c1c4:	6819      	ldr	r1, [r3, #0]
 800c1c6:	481d      	ldr	r0, [pc, #116]	@ (800c23c <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x268>)
 800c1c8:	f7f8 fb52 	bl	8004870 <HAL_SPI_Transmit_DMA>
  if (HAL_Result != HAL_OK)
 800c1cc:	b998      	cbnz	r0, 800c1f6 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x222>
  xSemaphoreTake(GenSPITransferCompleteSemaphoreHandle, portMAX_DELAY); // Wait for transmit to complete.
 800c1ce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c1d2:	4b18      	ldr	r3, [pc, #96]	@ (800c234 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x260>)
 800c1d4:	6818      	ldr	r0, [r3, #0]
 800c1d6:	f7fa fffb 	bl	80071d0 <xQueueSemaphoreTake>
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
 800c1da:	2201      	movs	r2, #1
 800c1dc:	2104      	movs	r1, #4
 800c1de:	480d      	ldr	r0, [pc, #52]	@ (800c214 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x240>)
 800c1e0:	f7f4 fe37 	bl	8000e52 <HAL_GPIO_WritePin>
  xSemaphoreGive(SPI3_MutexHandle);
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4813      	ldr	r0, [pc, #76]	@ (800c238 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x264>)
 800c1ec:	6800      	ldr	r0, [r0, #0]
 800c1ee:	f7fa fd79 	bl	8006ce4 <xQueueGenericSend>
  return 1;
 800c1f2:	2001      	movs	r0, #1
 800c1f4:	e6f9      	b.n	800bfea <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x16>
    xSemaphoreGive(SPI3_MutexHandle);
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	480e      	ldr	r0, [pc, #56]	@ (800c238 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x264>)
 800c1fe:	6800      	ldr	r0, [r0, #0]
 800c200:	f7fa fd70 	bl	8006ce4 <xQueueGenericSend>
    HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
 800c204:	2201      	movs	r2, #1
 800c206:	2104      	movs	r1, #4
 800c208:	4802      	ldr	r0, [pc, #8]	@ (800c214 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x240>)
 800c20a:	f7f4 fe22 	bl	8000e52 <HAL_GPIO_WritePin>
    return 0;
 800c20e:	2000      	movs	r0, #0
 800c210:	e6eb      	b.n	800bfea <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x16>
 800c212:	bf00      	nop
 800c214:	40021000 	.word	0x40021000
 800c218:	0801331c 	.word	0x0801331c
 800c21c:	200153e8 	.word	0x200153e8
 800c220:	00000000 	.word	0x00000000
 800c224:	200153c8 	.word	0x200153c8
 800c228:	20015400 	.word	0x20015400
 800c22c:	200153d0 	.word	0x200153d0
 800c230:	200153cc 	.word	0x200153cc
 800c234:	20015328 	.word	0x20015328
 800c238:	2001532c 	.word	0x2001532c
 800c23c:	20017784 	.word	0x20017784
 800c240:	e000ed00 	.word	0xe000ed00

0800c244 <BluetoothOut_Start>:
{
 800c244:	b508      	push	{r3, lr}
  IfNotNullFreeAndNull((void **)&ESP32_pSamplesMemory);
 800c246:	481c      	ldr	r0, [pc, #112]	@ (800c2b8 <BluetoothOut_Start+0x74>)
 800c248:	f7fb ffe7 	bl	800821a <IfNotNullFreeAndNull>
  ESP32_pSamples = NULL;
 800c24c:	4b1b      	ldr	r3, [pc, #108]	@ (800c2bc <BluetoothOut_Start+0x78>)
 800c24e:	2200      	movs	r2, #0
 800c250:	601a      	str	r2, [r3, #0]
  if (!OutputSampleRate)
 800c252:	4b1b      	ldr	r3, [pc, #108]	@ (800c2c0 <BluetoothOut_Start+0x7c>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	b90b      	cbnz	r3, 800c25c <BluetoothOut_Start+0x18>
    return 0;
 800c258:	2000      	movs	r0, #0
}
 800c25a:	bd08      	pop	{r3, pc}
  ESP32_SourceSampleStepSize = (float)OutputSampleRate / (float)SAI_AUDIO_FREQUENCY_44K;
 800c25c:	ee07 3a90 	vmov	s15, r3
 800c260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c264:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800c2c4 <BluetoothOut_Start+0x80>
 800c268:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c26c:	4b16      	ldr	r3, [pc, #88]	@ (800c2c8 <BluetoothOut_Start+0x84>)
 800c26e:	edc3 6a00 	vstr	s13, [r3]
  ESP32_Samples_NumSamples = (int)round((I2SBuffers_NumSamples / 2) / ESP32_SourceSampleStepSize);
 800c272:	4b16      	ldr	r3, [pc, #88]	@ (800c2cc <BluetoothOut_Start+0x88>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	085b      	lsrs	r3, r3, #1
 800c278:	ee07 3a90 	vmov	s15, r3
 800c27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c280:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c284:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800c288:	feb8 7b47 	vrinta.f64	d7, d7
 800c28c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c290:	ee17 1a90 	vmov	r1, s15
 800c294:	4b0e      	ldr	r3, [pc, #56]	@ (800c2d0 <BluetoothOut_Start+0x8c>)
 800c296:	edc3 7a00 	vstr	s15, [r3]
  ESP32_pSamplesMemory = calloc(1, ESP32_Samples_NumSamples * sizeof(AudioSample16_t) + 31);
 800c29a:	0089      	lsls	r1, r1, #2
 800c29c:	311f      	adds	r1, #31
 800c29e:	2001      	movs	r0, #1
 800c2a0:	f003 fa8a 	bl	800f7b8 <calloc>
 800c2a4:	4b04      	ldr	r3, [pc, #16]	@ (800c2b8 <BluetoothOut_Start+0x74>)
 800c2a6:	6018      	str	r0, [r3, #0]
  ESP32_pSamples = (AudioSample16_t *)(((uint32_t)ESP32_pSamplesMemory + 31) & ~31);
 800c2a8:	301f      	adds	r0, #31
 800c2aa:	f020 001f 	bic.w	r0, r0, #31
 800c2ae:	4b03      	ldr	r3, [pc, #12]	@ (800c2bc <BluetoothOut_Start+0x78>)
 800c2b0:	6018      	str	r0, [r3, #0]
  return ESP32_SendCommmandToBeBluetoothSource();
 800c2b2:	f7ff fe3b 	bl	800bf2c <ESP32_SendCommmandToBeBluetoothSource>
 800c2b6:	e7d0      	b.n	800c25a <BluetoothOut_Start+0x16>
 800c2b8:	200153d4 	.word	0x200153d4
 800c2bc:	200153d0 	.word	0x200153d0
 800c2c0:	200153d8 	.word	0x200153d8
 800c2c4:	472c4400 	.word	0x472c4400
 800c2c8:	200153c8 	.word	0x200153c8
 800c2cc:	200153e8 	.word	0x200153e8
 800c2d0:	200153cc 	.word	0x200153cc

0800c2d4 <BluetoothOut_Stop>:
{
 800c2d4:	b508      	push	{r3, lr}
  ESP32_SendCommmandToBeNothing();
 800c2d6:	f7ff fde3 	bl	800bea0 <ESP32_SendCommmandToBeNothing>
  IfNotNullFreeAndNull((void **)&ESP32_pSamplesMemory);
 800c2da:	4803      	ldr	r0, [pc, #12]	@ (800c2e8 <BluetoothOut_Stop+0x14>)
 800c2dc:	f7fb ff9d 	bl	800821a <IfNotNullFreeAndNull>
  ESP32_pSamples = NULL;
 800c2e0:	4b02      	ldr	r3, [pc, #8]	@ (800c2ec <BluetoothOut_Stop+0x18>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]
}
 800c2e6:	bd08      	pop	{r3, pc}
 800c2e8:	200153d4 	.word	0x200153d4
 800c2ec:	200153d0 	.word	0x200153d0

0800c2f0 <I2S_24bitToNormalizedFloat>:
  if (Value & 0x00800000)
 800c2f0:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 800c2f4:	d001      	beq.n	800c2fa <I2S_24bitToNormalizedFloat+0xa>
    Value |= 0xFF000000;
 800c2f6:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
  return Value / 16777216.0f;
 800c2fa:	ee07 0a90 	vmov	s15, r0
 800c2fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800c302:	ed9f 7a03 	vldr	s14, [pc, #12]	@ 800c310 <I2S_24bitToNormalizedFloat+0x20>
 800c306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c30a:	ee17 0a90 	vmov	r0, s15
 800c30e:	4770      	bx	lr
 800c310:	33800000 	.word	0x33800000

0800c314 <I2S_NormalizedFloatTo24bit>:
{
 800c314:	ee07 0a10 	vmov	s14, r0
  return round(16777216.0f * Value);
 800c318:	eddf 7a06 	vldr	s15, [pc, #24]	@ 800c334 <I2S_NormalizedFloatTo24bit+0x20>
 800c31c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c320:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800c324:	feb8 7b47 	vrinta.f64	d7, d7
}
 800c328:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c32c:	ee17 0a90 	vmov	r0, s15
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	4b800000 	.word	0x4b800000

0800c338 <AudioBuffer_TransferFromInputBufferToOutputBuffer>:
{
 800c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33a:	ed2d 8b02 	vpush	{d8}
  switch (AudioBufferHalf)
 800c33e:	2801      	cmp	r0, #1
 800c340:	d00b      	beq.n	800c35a <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x22>
 800c342:	2802      	cmp	r0, #2
 800c344:	d105      	bne.n	800c352 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x1a>
    case abhSecondHalf: FirstSampleIndex = I2SBuffers_NumSamples / 2; break;
 800c346:	4b1d      	ldr	r3, [pc, #116]	@ (800c3bc <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x84>)
 800c348:	681e      	ldr	r6, [r3, #0]
 800c34a:	f3c6 064f 	ubfx	r6, r6, #1, #16
  for(SampleIndex = FirstSampleIndex; SampleIndex < FirstSampleIndex + (I2SBuffers_NumSamples / 2); ++SampleIndex)
 800c34e:	4634      	mov	r4, r6
 800c350:	e02a      	b.n	800c3a8 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x70>
    default: Error_Handler();
 800c352:	f002 fabf 	bl	800e8d4 <Error_Handler>
  FirstSampleIndex = 0;
 800c356:	2600      	movs	r6, #0
 800c358:	e7f9      	b.n	800c34e <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x16>
  switch (AudioBufferHalf)
 800c35a:	2600      	movs	r6, #0
 800c35c:	e7f7      	b.n	800c34e <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x16>
    Audio_Left = I2S_24bitToNormalizedFloat(pInputSample->Left);
 800c35e:	4d18      	ldr	r5, [pc, #96]	@ (800c3c0 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x88>)
 800c360:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 800c364:	f7ff ffc4 	bl	800c2f0 <I2S_24bitToNormalizedFloat>
 800c368:	ee08 0a90 	vmov	s17, r0
    Audio_Right = I2S_24bitToNormalizedFloat(pInputSample->Right);
 800c36c:	00e7      	lsls	r7, r4, #3
 800c36e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c372:	6868      	ldr	r0, [r5, #4]
 800c374:	f7ff ffbc 	bl	800c2f0 <I2S_24bitToNormalizedFloat>
 800c378:	ee08 0a10 	vmov	s16, r0
    Audio_Left *= Process_Gain;
 800c37c:	4b11      	ldr	r3, [pc, #68]	@ (800c3c4 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x8c>)
 800c37e:	edd3 7a00 	vldr	s15, [r3]
    Audio_Right *= Process_Gain;
 800c382:	ee27 8a88 	vmul.f32	s16, s15, s16
    pOutputSample-> Left = I2S_NormalizedFloatTo24bit(Audio_Left);
 800c386:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c38a:	ee17 0a90 	vmov	r0, s15
 800c38e:	f7ff ffc1 	bl	800c314 <I2S_NormalizedFloatTo24bit>
 800c392:	4d0d      	ldr	r5, [pc, #52]	@ (800c3c8 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x90>)
 800c394:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
    pOutputSample-> Right = I2S_NormalizedFloatTo24bit(Audio_Right);
 800c398:	ee18 0a10 	vmov	r0, s16
 800c39c:	f7ff ffba 	bl	800c314 <I2S_NormalizedFloatTo24bit>
 800c3a0:	443d      	add	r5, r7
 800c3a2:	6068      	str	r0, [r5, #4]
  for(SampleIndex = FirstSampleIndex; SampleIndex < FirstSampleIndex + (I2SBuffers_NumSamples / 2); ++SampleIndex)
 800c3a4:	3401      	adds	r4, #1
 800c3a6:	b2a4      	uxth	r4, r4
 800c3a8:	4b04      	ldr	r3, [pc, #16]	@ (800c3bc <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x84>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	eb06 0353 	add.w	r3, r6, r3, lsr #1
 800c3b0:	429c      	cmp	r4, r3
 800c3b2:	d3d4      	bcc.n	800c35e <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x26>
}
 800c3b4:	ecbd 8b02 	vpop	{d8}
 800c3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	200153e8 	.word	0x200153e8
 800c3c0:	20016800 	.word	0x20016800
 800c3c4:	200003f8 	.word	0x200003f8
 800c3c8:	20015400 	.word	0x20015400

0800c3cc <HAL_SAI_RxHalfCpltCallback>:
  if (hsai == &hsai_BlockB2)
 800c3cc:	4b12      	ldr	r3, [pc, #72]	@ (800c418 <HAL_SAI_RxHalfCpltCallback+0x4c>)
 800c3ce:	4283      	cmp	r3, r0
 800c3d0:	d000      	beq.n	800c3d4 <HAL_SAI_RxHalfCpltCallback+0x8>
 800c3d2:	4770      	bx	lr
    SAI_BlockB2_PreviousCallbackPosition = dibpEndOfFirstHalf;
 800c3d4:	4b11      	ldr	r3, [pc, #68]	@ (800c41c <HAL_SAI_RxHalfCpltCallback+0x50>)
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	701a      	strb	r2, [r3, #0]
    if (SAI_BlockA2_PreviousCallbackPosition == dibpEndOfFirstHalf)
 800c3da:	4b11      	ldr	r3, [pc, #68]	@ (800c420 <HAL_SAI_RxHalfCpltCallback+0x54>)
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d1f7      	bne.n	800c3d2 <HAL_SAI_RxHalfCpltCallback+0x6>
{
 800c3e2:	b500      	push	{lr}
 800c3e4:	b083      	sub	sp, #12
      AudioBufferHalf_t AudioBufferHalf = abhFirstHalf;
 800c3e6:	f88d 2003 	strb.w	r2, [sp, #3]
      xQueueSendFromISR(ProcessAudioTaskParameterQueueHandle, &AudioBufferHalf, &HigherProrityTaskWoken);
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	aa01      	add	r2, sp, #4
 800c3ee:	f10d 0103 	add.w	r1, sp, #3
 800c3f2:	480c      	ldr	r0, [pc, #48]	@ (800c424 <HAL_SAI_RxHalfCpltCallback+0x58>)
 800c3f4:	6800      	ldr	r0, [r0, #0]
 800c3f6:	f7fa fd67 	bl	8006ec8 <xQueueGenericSendFromISR>
      portYIELD_FROM_ISR(HigherProrityTaskWoken);
 800c3fa:	9b01      	ldr	r3, [sp, #4]
 800c3fc:	b14b      	cbz	r3, 800c412 <HAL_SAI_RxHalfCpltCallback+0x46>
 800c3fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c406:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	f3bf 8f6f 	isb	sy
}
 800c412:	b003      	add	sp, #12
 800c414:	f85d fb04 	ldr.w	pc, [sp], #4
 800c418:	200174b0 	.word	0x200174b0
 800c41c:	200153c1 	.word	0x200153c1
 800c420:	200153c2 	.word	0x200153c2
 800c424:	20015330 	.word	0x20015330

0800c428 <HAL_SAI_RxCpltCallback>:
  if (hsai == &hsai_BlockB2)
 800c428:	4b12      	ldr	r3, [pc, #72]	@ (800c474 <HAL_SAI_RxCpltCallback+0x4c>)
 800c42a:	4283      	cmp	r3, r0
 800c42c:	d000      	beq.n	800c430 <HAL_SAI_RxCpltCallback+0x8>
 800c42e:	4770      	bx	lr
    SAI_BlockB2_PreviousCallbackPosition = dibpEndOfSecondHalf;
 800c430:	4b11      	ldr	r3, [pc, #68]	@ (800c478 <HAL_SAI_RxCpltCallback+0x50>)
 800c432:	2202      	movs	r2, #2
 800c434:	701a      	strb	r2, [r3, #0]
    if (SAI_BlockA2_PreviousCallbackPosition == dibpEndOfSecondHalf)
 800c436:	4b11      	ldr	r3, [pc, #68]	@ (800c47c <HAL_SAI_RxCpltCallback+0x54>)
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d1f7      	bne.n	800c42e <HAL_SAI_RxCpltCallback+0x6>
{
 800c43e:	b500      	push	{lr}
 800c440:	b083      	sub	sp, #12
      AudioBufferHalf_t AudioBufferHalf = abhSecondHalf;
 800c442:	f88d 2003 	strb.w	r2, [sp, #3]
      xQueueSendFromISR(ProcessAudioTaskParameterQueueHandle, &AudioBufferHalf, &HigherProrityTaskWoken);
 800c446:	2300      	movs	r3, #0
 800c448:	aa01      	add	r2, sp, #4
 800c44a:	f10d 0103 	add.w	r1, sp, #3
 800c44e:	480c      	ldr	r0, [pc, #48]	@ (800c480 <HAL_SAI_RxCpltCallback+0x58>)
 800c450:	6800      	ldr	r0, [r0, #0]
 800c452:	f7fa fd39 	bl	8006ec8 <xQueueGenericSendFromISR>
      portYIELD_FROM_ISR(HigherProrityTaskWoken);
 800c456:	9b01      	ldr	r3, [sp, #4]
 800c458:	b14b      	cbz	r3, 800c46e <HAL_SAI_RxCpltCallback+0x46>
 800c45a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c462:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	f3bf 8f6f 	isb	sy
}
 800c46e:	b003      	add	sp, #12
 800c470:	f85d fb04 	ldr.w	pc, [sp], #4
 800c474:	200174b0 	.word	0x200174b0
 800c478:	200153c1 	.word	0x200153c1
 800c47c:	200153c2 	.word	0x200153c2
 800c480:	20015330 	.word	0x20015330

0800c484 <HAL_SAI_TxHalfCpltCallback>:
  if (hsai == &hsai_BlockA2)
 800c484:	4b15      	ldr	r3, [pc, #84]	@ (800c4dc <HAL_SAI_TxHalfCpltCallback+0x58>)
 800c486:	4283      	cmp	r3, r0
 800c488:	d000      	beq.n	800c48c <HAL_SAI_TxHalfCpltCallback+0x8>
 800c48a:	4770      	bx	lr
{
 800c48c:	b500      	push	{lr}
 800c48e:	b083      	sub	sp, #12
    SAI_BlockA2_PreviousCallbackPosition = dibpEndOfFirstHalf;
 800c490:	4b13      	ldr	r3, [pc, #76]	@ (800c4e0 <HAL_SAI_TxHalfCpltCallback+0x5c>)
 800c492:	2201      	movs	r2, #1
 800c494:	701a      	strb	r2, [r3, #0]
    if (!InputChannelIsI2S() || (SAI_BlockB2_PreviousCallbackPosition == dibpEndOfFirstHalf))
 800c496:	f7ff f971 	bl	800b77c <InputChannelIsI2S>
 800c49a:	b130      	cbz	r0, 800c4aa <HAL_SAI_TxHalfCpltCallback+0x26>
 800c49c:	4b11      	ldr	r3, [pc, #68]	@ (800c4e4 <HAL_SAI_TxHalfCpltCallback+0x60>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d002      	beq.n	800c4aa <HAL_SAI_TxHalfCpltCallback+0x26>
}
 800c4a4:	b003      	add	sp, #12
 800c4a6:	f85d fb04 	ldr.w	pc, [sp], #4
      AudioBufferHalf_t AudioBufferHalf = abhFirstHalf;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	f88d 3003 	strb.w	r3, [sp, #3]
      xQueueSendFromISR(ProcessAudioTaskParameterQueueHandle, &AudioBufferHalf, &HigherProrityTaskWoken);
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	aa01      	add	r2, sp, #4
 800c4b4:	f10d 0103 	add.w	r1, sp, #3
 800c4b8:	480b      	ldr	r0, [pc, #44]	@ (800c4e8 <HAL_SAI_TxHalfCpltCallback+0x64>)
 800c4ba:	6800      	ldr	r0, [r0, #0]
 800c4bc:	f7fa fd04 	bl	8006ec8 <xQueueGenericSendFromISR>
      portYIELD_FROM_ISR(HigherProrityTaskWoken);
 800c4c0:	9b01      	ldr	r3, [sp, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d0ee      	beq.n	800c4a4 <HAL_SAI_TxHalfCpltCallback+0x20>
 800c4c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c4ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	f3bf 8f6f 	isb	sy
}
 800c4da:	e7e3      	b.n	800c4a4 <HAL_SAI_TxHalfCpltCallback+0x20>
 800c4dc:	20017534 	.word	0x20017534
 800c4e0:	200153c2 	.word	0x200153c2
 800c4e4:	200153c1 	.word	0x200153c1
 800c4e8:	20015330 	.word	0x20015330

0800c4ec <HAL_SAI_TxCpltCallback>:
  if (hsai == &hsai_BlockA2)
 800c4ec:	4b15      	ldr	r3, [pc, #84]	@ (800c544 <HAL_SAI_TxCpltCallback+0x58>)
 800c4ee:	4283      	cmp	r3, r0
 800c4f0:	d000      	beq.n	800c4f4 <HAL_SAI_TxCpltCallback+0x8>
 800c4f2:	4770      	bx	lr
{
 800c4f4:	b500      	push	{lr}
 800c4f6:	b083      	sub	sp, #12
    SAI_BlockA2_PreviousCallbackPosition = dibpEndOfSecondHalf;
 800c4f8:	4b13      	ldr	r3, [pc, #76]	@ (800c548 <HAL_SAI_TxCpltCallback+0x5c>)
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	701a      	strb	r2, [r3, #0]
    if (!InputChannelIsI2S() || (SAI_BlockB2_PreviousCallbackPosition == dibpEndOfSecondHalf))
 800c4fe:	f7ff f93d 	bl	800b77c <InputChannelIsI2S>
 800c502:	b130      	cbz	r0, 800c512 <HAL_SAI_TxCpltCallback+0x26>
 800c504:	4b11      	ldr	r3, [pc, #68]	@ (800c54c <HAL_SAI_TxCpltCallback+0x60>)
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d002      	beq.n	800c512 <HAL_SAI_TxCpltCallback+0x26>
}
 800c50c:	b003      	add	sp, #12
 800c50e:	f85d fb04 	ldr.w	pc, [sp], #4
      AudioBufferHalf_t AudioBufferHalf = abhSecondHalf;
 800c512:	2302      	movs	r3, #2
 800c514:	f88d 3003 	strb.w	r3, [sp, #3]
      xQueueSendFromISR(ProcessAudioTaskParameterQueueHandle, &AudioBufferHalf, &HigherProrityTaskWoken);
 800c518:	2300      	movs	r3, #0
 800c51a:	aa01      	add	r2, sp, #4
 800c51c:	f10d 0103 	add.w	r1, sp, #3
 800c520:	480b      	ldr	r0, [pc, #44]	@ (800c550 <HAL_SAI_TxCpltCallback+0x64>)
 800c522:	6800      	ldr	r0, [r0, #0]
 800c524:	f7fa fcd0 	bl	8006ec8 <xQueueGenericSendFromISR>
      portYIELD_FROM_ISR(HigherProrityTaskWoken);
 800c528:	9b01      	ldr	r3, [sp, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0ee      	beq.n	800c50c <HAL_SAI_TxCpltCallback+0x20>
 800c52e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c536:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	f3bf 8f6f 	isb	sy
}
 800c542:	e7e3      	b.n	800c50c <HAL_SAI_TxCpltCallback+0x20>
 800c544:	20017534 	.word	0x20017534
 800c548:	200153c2 	.word	0x200153c2
 800c54c:	200153c1 	.word	0x200153c1
 800c550:	20015330 	.word	0x20015330

0800c554 <HAL_GPIO_EXTI_Callback>:
  if (GPIO_Pin == SI_INT_Pin)
 800c554:	2820      	cmp	r0, #32
 800c556:	d000      	beq.n	800c55a <HAL_GPIO_EXTI_Callback+0x6>
 800c558:	4770      	bx	lr
{
 800c55a:	b508      	push	{r3, lr}
    si468x_interrupt();
 800c55c:	f7fe fa64 	bl	800aa28 <si468x_interrupt>
}
 800c560:	bd08      	pop	{r3, pc}
	...

0800c564 <DAB_IsLikedService>:
{
 800c564:	b510      	push	{r4, lr}
 800c566:	4604      	mov	r4, r0
  if (strcmp(pServiceName, "BBC Radio 1") == 0)
 800c568:	4918      	ldr	r1, [pc, #96]	@ (800c5cc <DAB_IsLikedService+0x68>)
 800c56a:	f7f3 fe69 	bl	8000240 <strcmp>
 800c56e:	b1f8      	cbz	r0, 800c5b0 <DAB_IsLikedService+0x4c>
  if (strcmp(pServiceName, "BBC Radio 2") == 0)
 800c570:	4917      	ldr	r1, [pc, #92]	@ (800c5d0 <DAB_IsLikedService+0x6c>)
 800c572:	4620      	mov	r0, r4
 800c574:	f7f3 fe64 	bl	8000240 <strcmp>
 800c578:	b1e0      	cbz	r0, 800c5b4 <DAB_IsLikedService+0x50>
  if (strcmp(pServiceName, "BBC Radio 3") == 0)
 800c57a:	4916      	ldr	r1, [pc, #88]	@ (800c5d4 <DAB_IsLikedService+0x70>)
 800c57c:	4620      	mov	r0, r4
 800c57e:	f7f3 fe5f 	bl	8000240 <strcmp>
 800c582:	b1c8      	cbz	r0, 800c5b8 <DAB_IsLikedService+0x54>
  if (strcmp(pServiceName, "BBC Radio 4") == 0)
 800c584:	4914      	ldr	r1, [pc, #80]	@ (800c5d8 <DAB_IsLikedService+0x74>)
 800c586:	4620      	mov	r0, r4
 800c588:	f7f3 fe5a 	bl	8000240 <strcmp>
 800c58c:	b1b0      	cbz	r0, 800c5bc <DAB_IsLikedService+0x58>
  if (strcmp(pServiceName, "Classic FM") == 0)
 800c58e:	4913      	ldr	r1, [pc, #76]	@ (800c5dc <DAB_IsLikedService+0x78>)
 800c590:	4620      	mov	r0, r4
 800c592:	f7f3 fe55 	bl	8000240 <strcmp>
 800c596:	b198      	cbz	r0, 800c5c0 <DAB_IsLikedService+0x5c>
  if (strcmp(pServiceName, "BBC Sheffield") == 0)
 800c598:	4911      	ldr	r1, [pc, #68]	@ (800c5e0 <DAB_IsLikedService+0x7c>)
 800c59a:	4620      	mov	r0, r4
 800c59c:	f7f3 fe50 	bl	8000240 <strcmp>
 800c5a0:	b180      	cbz	r0, 800c5c4 <DAB_IsLikedService+0x60>
  if (strcmp(pServiceName, "Hallam FM") == 0)
 800c5a2:	4910      	ldr	r1, [pc, #64]	@ (800c5e4 <DAB_IsLikedService+0x80>)
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f7f3 fe4b 	bl	8000240 <strcmp>
 800c5aa:	b168      	cbz	r0, 800c5c8 <DAB_IsLikedService+0x64>
  return 0;
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	e000      	b.n	800c5b2 <DAB_IsLikedService+0x4e>
    return 1;
 800c5b0:	2001      	movs	r0, #1
}
 800c5b2:	bd10      	pop	{r4, pc}
    return 1;
 800c5b4:	2001      	movs	r0, #1
 800c5b6:	e7fc      	b.n	800c5b2 <DAB_IsLikedService+0x4e>
    return 1;
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	e7fa      	b.n	800c5b2 <DAB_IsLikedService+0x4e>
    return 1;
 800c5bc:	2001      	movs	r0, #1
 800c5be:	e7f8      	b.n	800c5b2 <DAB_IsLikedService+0x4e>
    return 1;
 800c5c0:	2001      	movs	r0, #1
 800c5c2:	e7f6      	b.n	800c5b2 <DAB_IsLikedService+0x4e>
    return 1;
 800c5c4:	2001      	movs	r0, #1
 800c5c6:	e7f4      	b.n	800c5b2 <DAB_IsLikedService+0x4e>
    return 1;
 800c5c8:	2001      	movs	r0, #1
 800c5ca:	e7f2      	b.n	800c5b2 <DAB_IsLikedService+0x4e>
 800c5cc:	08013344 	.word	0x08013344
 800c5d0:	08013350 	.word	0x08013350
 800c5d4:	0801335c 	.word	0x0801335c
 800c5d8:	08013368 	.word	0x08013368
 800c5dc:	08013374 	.word	0x08013374
 800c5e0:	08013380 	.word	0x08013380
 800c5e4:	08013390 	.word	0x08013390

0800c5e8 <DAB_TuneService>:
{
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	b086      	sub	sp, #24
  uint32_t InitialServiceID = DAB_CurrentServiceID;
 800c5ec:	4b29      	ldr	r3, [pc, #164]	@ (800c694 <DAB_TuneService+0xac>)
 800c5ee:	881e      	ldrh	r6, [r3, #0]
  if (!DAB_NumServices)
 800c5f0:	4b29      	ldr	r3, [pc, #164]	@ (800c698 <DAB_TuneService+0xb0>)
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d048      	beq.n	800c68a <DAB_TuneService+0xa2>
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	460d      	mov	r5, r1
  if (ServiceToTune == sttCurrent)
 800c5fc:	2801      	cmp	r0, #1
 800c5fe:	d126      	bne.n	800c64e <DAB_TuneService+0x66>
    JSB_si468x_load_service_name_from_flash(DAB_CurrentServiceID, DAB_ServiceName, DAB_ServiceNameMaxLength);
 800c600:	2280      	movs	r2, #128	@ 0x80
 800c602:	4926      	ldr	r1, [pc, #152]	@ (800c69c <DAB_TuneService+0xb4>)
 800c604:	4630      	mov	r0, r6
 800c606:	f7fe ff1c 	bl	800b442 <JSB_si468x_load_service_name_from_flash>
    if (!GetLikedServiceOnly || DAB_IsLikedService(DAB_ServiceName))
 800c60a:	2d00      	cmp	r5, #0
 800c60c:	d030      	beq.n	800c670 <DAB_TuneService+0x88>
 800c60e:	4823      	ldr	r0, [pc, #140]	@ (800c69c <DAB_TuneService+0xb4>)
 800c610:	f7ff ffa8 	bl	800c564 <DAB_IsLikedService>
 800c614:	bb60      	cbnz	r0, 800c670 <DAB_TuneService+0x88>
      ServiceToTune = sttNext;
 800c616:	2403      	movs	r4, #3
  if (!Found)
 800c618:	e019      	b.n	800c64e <DAB_TuneService+0x66>
          --DAB_CurrentServiceID;
 800c61a:	4a1e      	ldr	r2, [pc, #120]	@ (800c694 <DAB_TuneService+0xac>)
 800c61c:	8813      	ldrh	r3, [r2, #0]
 800c61e:	3b01      	subs	r3, #1
 800c620:	b29b      	uxth	r3, r3
 800c622:	8013      	strh	r3, [r2, #0]
          if (DAB_CurrentServiceID == 0)
 800c624:	b933      	cbnz	r3, 800c634 <DAB_TuneService+0x4c>
            DAB_CurrentServiceID = DAB_NumServices - 1;
 800c626:	4b1c      	ldr	r3, [pc, #112]	@ (800c698 <DAB_TuneService+0xb0>)
 800c628:	881b      	ldrh	r3, [r3, #0]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	8013      	strh	r3, [r2, #0]
 800c62e:	e001      	b.n	800c634 <DAB_TuneService+0x4c>
          Error_Handler();
 800c630:	f002 f950 	bl	800e8d4 <Error_Handler>
      if (DAB_CurrentServiceID == InitialServiceID)
 800c634:	4b17      	ldr	r3, [pc, #92]	@ (800c694 <DAB_TuneService+0xac>)
 800c636:	8818      	ldrh	r0, [r3, #0]
 800c638:	4286      	cmp	r6, r0
 800c63a:	d028      	beq.n	800c68e <DAB_TuneService+0xa6>
      JSB_si468x_load_service_name_from_flash(DAB_CurrentServiceID, DAB_ServiceName, DAB_ServiceNameMaxLength);
 800c63c:	2280      	movs	r2, #128	@ 0x80
 800c63e:	4917      	ldr	r1, [pc, #92]	@ (800c69c <DAB_TuneService+0xb4>)
 800c640:	f7fe feff 	bl	800b442 <JSB_si468x_load_service_name_from_flash>
      if (!GetLikedServiceOnly || DAB_IsLikedService(DAB_ServiceName))
 800c644:	b1a5      	cbz	r5, 800c670 <DAB_TuneService+0x88>
 800c646:	4815      	ldr	r0, [pc, #84]	@ (800c69c <DAB_TuneService+0xb4>)
 800c648:	f7ff ff8c 	bl	800c564 <DAB_IsLikedService>
 800c64c:	b980      	cbnz	r0, 800c670 <DAB_TuneService+0x88>
      switch (ServiceToTune)
 800c64e:	2c02      	cmp	r4, #2
 800c650:	d0e3      	beq.n	800c61a <DAB_TuneService+0x32>
 800c652:	2c03      	cmp	r4, #3
 800c654:	d1ec      	bne.n	800c630 <DAB_TuneService+0x48>
          ++DAB_CurrentServiceID;
 800c656:	4a0f      	ldr	r2, [pc, #60]	@ (800c694 <DAB_TuneService+0xac>)
 800c658:	8813      	ldrh	r3, [r2, #0]
 800c65a:	3301      	adds	r3, #1
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	8013      	strh	r3, [r2, #0]
          if (DAB_CurrentServiceID == DAB_NumServices)
 800c660:	4a0d      	ldr	r2, [pc, #52]	@ (800c698 <DAB_TuneService+0xb0>)
 800c662:	8812      	ldrh	r2, [r2, #0]
 800c664:	4293      	cmp	r3, r2
 800c666:	d1e5      	bne.n	800c634 <DAB_TuneService+0x4c>
            DAB_CurrentServiceID = 0;
 800c668:	4b0a      	ldr	r3, [pc, #40]	@ (800c694 <DAB_TuneService+0xac>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	801a      	strh	r2, [r3, #0]
 800c66e:	e7e1      	b.n	800c634 <DAB_TuneService+0x4c>
    si468x_DAB_tune_service(DAB_CurrentServiceID);
 800c670:	4b08      	ldr	r3, [pc, #32]	@ (800c694 <DAB_TuneService+0xac>)
 800c672:	8818      	ldrh	r0, [r3, #0]
 800c674:	f7fe fed6 	bl	800b424 <si468x_DAB_tune_service>
    si468x_DAB_get_digrad_status(&DAB_Status);
 800c678:	a801      	add	r0, sp, #4
 800c67a:	f7fe fdff 	bl	800b27c <si468x_DAB_get_digrad_status>
    return DAB_Status.VALID ? 1 : 0;
 800c67e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800c682:	f000 0001 	and.w	r0, r0, #1
}
 800c686:	b006      	add	sp, #24
 800c688:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800c68a:	2000      	movs	r0, #0
 800c68c:	e7fb      	b.n	800c686 <DAB_TuneService+0x9e>
  return 0;
 800c68e:	2000      	movs	r0, #0
 800c690:	e7f9      	b.n	800c686 <DAB_TuneService+0x9e>
 800c692:	bf00      	nop
 800c694:	2001533c 	.word	0x2001533c
 800c698:	2001533e 	.word	0x2001533e
 800c69c:	20015340 	.word	0x20015340

0800c6a0 <ClearOutputBuffer>:
{
 800c6a0:	b082      	sub	sp, #8
  AudioSample24_t ZeroSample={0,0};
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	9200      	str	r2, [sp, #0]
 800c6a6:	9201      	str	r2, [sp, #4]
  for(uint32_t SampleIndex = 0; SampleIndex < I2SBuffers_NumSamples; ++SampleIndex)
 800c6a8:	e008      	b.n	800c6bc <ClearOutputBuffer+0x1c>
    I2SOutputBuffer[SampleIndex] = ZeroSample;
 800c6aa:	4b07      	ldr	r3, [pc, #28]	@ (800c6c8 <ClearOutputBuffer+0x28>)
 800c6ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6b0:	a902      	add	r1, sp, #8
 800c6b2:	e911 0003 	ldmdb	r1, {r0, r1}
 800c6b6:	e883 0003 	stmia.w	r3, {r0, r1}
  for(uint32_t SampleIndex = 0; SampleIndex < I2SBuffers_NumSamples; ++SampleIndex)
 800c6ba:	3201      	adds	r2, #1
 800c6bc:	4b03      	ldr	r3, [pc, #12]	@ (800c6cc <ClearOutputBuffer+0x2c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d8f2      	bhi.n	800c6aa <ClearOutputBuffer+0xa>
}
 800c6c4:	b002      	add	sp, #8
 800c6c6:	4770      	bx	lr
 800c6c8:	20015400 	.word	0x20015400
 800c6cc:	200153e8 	.word	0x200153e8

0800c6d0 <SPDIFRX_ClearOutputBuffer>:
{
 800c6d0:	b508      	push	{r3, lr}
  ClearOutputBuffer();
 800c6d2:	f7ff ffe5 	bl	800c6a0 <ClearOutputBuffer>
}
 800c6d6:	bd08      	pop	{r3, pc}

0800c6d8 <I2SInput_Stop>:
{
 800c6d8:	b508      	push	{r3, lr}
  ClearOutputBuffer();
 800c6da:	f7ff ffe1 	bl	800c6a0 <ClearOutputBuffer>
  HAL_SAI_DMAStop(&hsai_BlockA2);
 800c6de:	4803      	ldr	r0, [pc, #12]	@ (800c6ec <I2SInput_Stop+0x14>)
 800c6e0:	f7f6 ffff 	bl	80036e2 <HAL_SAI_DMAStop>
  HAL_SAI_DMAStop(&hsai_BlockB2);
 800c6e4:	4802      	ldr	r0, [pc, #8]	@ (800c6f0 <I2SInput_Stop+0x18>)
 800c6e6:	f7f6 fffc 	bl	80036e2 <HAL_SAI_DMAStop>
}
 800c6ea:	bd08      	pop	{r3, pc}
 800c6ec:	20017534 	.word	0x20017534
 800c6f0:	200174b0 	.word	0x200174b0

0800c6f4 <ProcessAudio>:
{
 800c6f4:	b510      	push	{r4, lr}
 800c6f6:	4604      	mov	r4, r0
  if (InputChannelIsI2S())
 800c6f8:	f7ff f840 	bl	800b77c <InputChannelIsI2S>
 800c6fc:	b170      	cbz	r0, 800c71c <ProcessAudio+0x28>
    AudioBuffer_TransferFromInputBufferToOutputBuffer(AudioBufferHalf);
 800c6fe:	4620      	mov	r0, r4
 800c700:	f7ff fe1a 	bl	800c338 <AudioBuffer_TransferFromInputBufferToOutputBuffer>
  if (InternalMuteActive || Process_UserMuted)
 800c704:	4b11      	ldr	r3, [pc, #68]	@ (800c74c <ProcessAudio+0x58>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	b913      	cbnz	r3, 800c710 <ProcessAudio+0x1c>
 800c70a:	4b11      	ldr	r3, [pc, #68]	@ (800c750 <ProcessAudio+0x5c>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	b10b      	cbz	r3, 800c714 <ProcessAudio+0x20>
    ClearOutputBuffer(); // Could clear just the relevant half of the buffer.
 800c710:	f7ff ffc6 	bl	800c6a0 <ClearOutputBuffer>
  if (BluetoothOut_Started)
 800c714:	4b0f      	ldr	r3, [pc, #60]	@ (800c754 <ProcessAudio+0x60>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	b94b      	cbnz	r3, 800c72e <ProcessAudio+0x3a>
}
 800c71a:	bd10      	pop	{r4, pc}
  else if (SPDIFRX_IsStarted())
 800c71c:	f7fd f874 	bl	8009808 <SPDIFRX_IsStarted>
 800c720:	2800      	cmp	r0, #0
 800c722:	d0ef      	beq.n	800c704 <ProcessAudio+0x10>
    SPDIFRX_CopySamplesToGivenBuffer(I2SOutputBuffer, AudioBufferHalf); // This MUST be called even if the output is muted (to stay in sync).
 800c724:	4621      	mov	r1, r4
 800c726:	480c      	ldr	r0, [pc, #48]	@ (800c758 <ProcessAudio+0x64>)
 800c728:	f7fc fe76 	bl	8009418 <SPDIFRX_CopySamplesToGivenBuffer>
 800c72c:	e7ea      	b.n	800c704 <ProcessAudio+0x10>
    if (!SPDIFRX_IsStarted() || SPDIFRX_IsReceiving()) // Disable during SPDIFRX sample rate measurement as otherwise the measurement result is too small e.g. 43kHz instead of 44.1kHz.
 800c72e:	f7fd f86b 	bl	8009808 <SPDIFRX_IsStarted>
 800c732:	b118      	cbz	r0, 800c73c <ProcessAudio+0x48>
 800c734:	f7fd f92a 	bl	800998c <SPDIFRX_IsReceiving>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d0ee      	beq.n	800c71a <ProcessAudio+0x26>
      ESP32_SendSamplesFromAudioOutputBufferToESP32(AudioBufferHalf == abhSecondHalf);
 800c73c:	2c02      	cmp	r4, #2
 800c73e:	bf14      	ite	ne
 800c740:	2000      	movne	r0, #0
 800c742:	2001      	moveq	r0, #1
 800c744:	f7ff fc46 	bl	800bfd4 <ESP32_SendSamplesFromAudioOutputBufferToESP32>
}
 800c748:	e7e7      	b.n	800c71a <ProcessAudio+0x26>
 800c74a:	bf00      	nop
 800c74c:	200153e5 	.word	0x200153e5
 800c750:	200153e4 	.word	0x200153e4
 800c754:	200153c4 	.word	0x200153c4
 800c758:	20015400 	.word	0x20015400

0800c75c <UpdateMuteAndVolume>:
{
 800c75c:	b508      	push	{r3, lr}
  DAC_Mute(0); // Don't mute this.
 800c75e:	2000      	movs	r0, #0
 800c760:	f7fd ff48 	bl	800a5f4 <DAC_Mute>
  if (InternalMuteActive) // Internal mute trumps user settings.
 800c764:	4b08      	ldr	r3, [pc, #32]	@ (800c788 <UpdateMuteAndVolume+0x2c>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	b92b      	cbnz	r3, 800c776 <UpdateMuteAndVolume+0x1a>
    if (PA_UserMuted)
 800c76a:	4b08      	ldr	r3, [pc, #32]	@ (800c78c <UpdateMuteAndVolume+0x30>)
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	b12b      	cbz	r3, 800c77c <UpdateMuteAndVolume+0x20>
      PA_Mute();
 800c770:	f7fe f810 	bl	800a794 <PA_Mute>
}
 800c774:	bd08      	pop	{r3, pc}
    PA_Mute();
 800c776:	f7fe f80d 	bl	800a794 <PA_Mute>
 800c77a:	e7fb      	b.n	800c774 <UpdateMuteAndVolume+0x18>
      PA_SetMasterVolume(PA_MasterVolume_dB);
 800c77c:	4b04      	ldr	r3, [pc, #16]	@ (800c790 <UpdateMuteAndVolume+0x34>)
 800c77e:	6818      	ldr	r0, [r3, #0]
 800c780:	f7fd ffde 	bl	800a740 <PA_SetMasterVolume>
}
 800c784:	e7f6      	b.n	800c774 <UpdateMuteAndVolume+0x18>
 800c786:	bf00      	nop
 800c788:	200153e5 	.word	0x200153e5
 800c78c:	200153dc 	.word	0x200153dc
 800c790:	200153e0 	.word	0x200153e0

0800c794 <InternalMute>:
{
 800c794:	b510      	push	{r4, lr}
  uint8_t Result = InternalMuteActive;
 800c796:	4b03      	ldr	r3, [pc, #12]	@ (800c7a4 <InternalMute+0x10>)
 800c798:	781c      	ldrb	r4, [r3, #0]
  InternalMuteActive = Value;
 800c79a:	7018      	strb	r0, [r3, #0]
  UpdateMuteAndVolume();
 800c79c:	f7ff ffde 	bl	800c75c <UpdateMuteAndVolume>
}
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	bd10      	pop	{r4, pc}
 800c7a4:	200153e5 	.word	0x200153e5

0800c7a8 <SPDIFRX_MuteOutput_Callback>:
{
 800c7a8:	b508      	push	{r3, lr}
  InternalMute(Value);
 800c7aa:	f7ff fff3 	bl	800c794 <InternalMute>
}
 800c7ae:	bd08      	pop	{r3, pc}

0800c7b0 <SetOutputSampleRate>:
{
 800c7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7b4:	b0a5      	sub	sp, #148	@ 0x94
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	4617      	mov	r7, r2
 800c7bc:	461e      	mov	r6, r3
  WasMuted = InternalMute(1); // Try to prevent click from DAC output when stopping DMAs. Not completely successful.
 800c7be:	2001      	movs	r0, #1
 800c7c0:	f7ff ffe8 	bl	800c794 <InternalMute>
 800c7c4:	4680      	mov	r8, r0
  HandleHALResult(HAL_SAI_DMAStop(&hsai_BlockB2), "HAL_SAI_DMAStop");
 800c7c6:	482c      	ldr	r0, [pc, #176]	@ (800c878 <SetOutputSampleRate+0xc8>)
 800c7c8:	f7f6 ff8b 	bl	80036e2 <HAL_SAI_DMAStop>
 800c7cc:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 800c89c <SetOutputSampleRate+0xec>
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	f7fd fd79 	bl	800a2c8 <HandleHALResult>
  HandleHALResult(HAL_SAI_DMAStop(&hsai_BlockA2), "HAL_SAI_DMAStop");
 800c7d6:	4829      	ldr	r0, [pc, #164]	@ (800c87c <SetOutputSampleRate+0xcc>)
 800c7d8:	f7f6 ff83 	bl	80036e2 <HAL_SAI_DMAStop>
 800c7dc:	4649      	mov	r1, r9
 800c7de:	f7fd fd73 	bl	800a2c8 <HandleHALResult>
  InternalMute(WasMuted);
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	f7ff ffd6 	bl	800c794 <InternalMute>
  ClearOutputBuffer();
 800c7e8:	f7ff ff5a 	bl	800c6a0 <ClearOutputBuffer>
  EnsureFixPresent_Fix_JSB_20191115_HAL_RCCEx_GetPeriphCLKConfig__PLLDivisionFactors();
 800c7ec:	f7f6 fbba 	bl	8002f64 <EnsureFixPresent_Fix_JSB_20191115_HAL_RCCEx_GetPeriphCLKConfig__PLLDivisionFactors>
  HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInitStruct);
 800c7f0:	4668      	mov	r0, sp
 800c7f2:	f7f6 fbb9 	bl	8002f68 <HAL_RCCEx_GetPeriphCLKConfig>
  PeriphClkInitStruct.PLLI2S.PLLI2SN = i_N;
 800c7f6:	9701      	str	r7, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = i_P;
 800c7f8:	9604      	str	r6, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = i_Q;
 800c7fa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800c7fc:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = i_DivQ;
 800c7fe:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c800:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) // NB: This disables the PLL whilst changing its parameters.
 800c802:	4668      	mov	r0, sp
 800c804:	f7f6 f8ae 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 800c808:	bb38      	cbnz	r0, 800c85a <SetOutputSampleRate+0xaa>
  hsai_BlockA2.Init.AudioFrequency = i_SampleRate;
 800c80a:	481c      	ldr	r0, [pc, #112]	@ (800c87c <SetOutputSampleRate+0xcc>)
 800c80c:	61c4      	str	r4, [r0, #28]
  OutputSampleRate = i_SampleRate;
 800c80e:	4b1c      	ldr	r3, [pc, #112]	@ (800c880 <SetOutputSampleRate+0xd0>)
 800c810:	601c      	str	r4, [r3, #0]
  I2SBuffers_NumSamples = i_NumSamples;
 800c812:	4b1c      	ldr	r3, [pc, #112]	@ (800c884 <SetOutputSampleRate+0xd4>)
 800c814:	601d      	str	r5, [r3, #0]
  HandleHALResult(HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, NumInputChannels), "HAL_SAI_InitProtocol");
 800c816:	2302      	movs	r3, #2
 800c818:	461a      	mov	r2, r3
 800c81a:	2100      	movs	r1, #0
 800c81c:	f7f6 ff4c 	bl	80036b8 <HAL_SAI_InitProtocol>
 800c820:	4919      	ldr	r1, [pc, #100]	@ (800c888 <SetOutputSampleRate+0xd8>)
 800c822:	f7fd fd51 	bl	800a2c8 <HandleHALResult>
  WasMuted = InternalMute(1); // Try to prevent click from DAC output when starting DMAs. Not completely successful.
 800c826:	2001      	movs	r0, #1
 800c828:	f7ff ffb4 	bl	800c794 <InternalMute>
 800c82c:	4604      	mov	r4, r0
  if (InputChannelIsI2S())
 800c82e:	f7fe ffa5 	bl	800b77c <InputChannelIsI2S>
 800c832:	b9a8      	cbnz	r0, 800c860 <SetOutputSampleRate+0xb0>
  HandleHALResult(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)I2SOutputBuffer, NumInputChannels * I2SBuffers_NumSamples), "HAL_SAI_Transmit_DMA");
 800c834:	4b13      	ldr	r3, [pc, #76]	@ (800c884 <SetOutputSampleRate+0xd4>)
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	0052      	lsls	r2, r2, #1
 800c83a:	b292      	uxth	r2, r2
 800c83c:	4913      	ldr	r1, [pc, #76]	@ (800c88c <SetOutputSampleRate+0xdc>)
 800c83e:	480f      	ldr	r0, [pc, #60]	@ (800c87c <SetOutputSampleRate+0xcc>)
 800c840:	f7f6 ffa2 	bl	8003788 <HAL_SAI_Transmit_DMA>
 800c844:	4912      	ldr	r1, [pc, #72]	@ (800c890 <SetOutputSampleRate+0xe0>)
 800c846:	f7fd fd3f 	bl	800a2c8 <HandleHALResult>
  InternalMute(WasMuted);
 800c84a:	4620      	mov	r0, r4
 800c84c:	f7ff ffa2 	bl	800c794 <InternalMute>
  PA_ClearErrorStatus(); // Clear the likely MCLK error. !!! It seems that the PA can crash etc on MCLK change, giving no audio output. It may not be a good idea to hide this by clearing the error. !!!
 800c850:	f7fd ff6f 	bl	800a732 <PA_ClearErrorStatus>
}
 800c854:	b025      	add	sp, #148	@ 0x94
 800c856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 800c85a:	f002 f83b 	bl	800e8d4 <Error_Handler>
 800c85e:	e7d4      	b.n	800c80a <SetOutputSampleRate+0x5a>
    HandleHALResult(HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)I2SInputBuffer, NumInputChannels * I2SBuffers_NumSamples), "HAL_SAI_Receive_DMA");
 800c860:	4b08      	ldr	r3, [pc, #32]	@ (800c884 <SetOutputSampleRate+0xd4>)
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	0052      	lsls	r2, r2, #1
 800c866:	b292      	uxth	r2, r2
 800c868:	490a      	ldr	r1, [pc, #40]	@ (800c894 <SetOutputSampleRate+0xe4>)
 800c86a:	4803      	ldr	r0, [pc, #12]	@ (800c878 <SetOutputSampleRate+0xc8>)
 800c86c:	f7f7 f808 	bl	8003880 <HAL_SAI_Receive_DMA>
 800c870:	4909      	ldr	r1, [pc, #36]	@ (800c898 <SetOutputSampleRate+0xe8>)
 800c872:	f7fd fd29 	bl	800a2c8 <HandleHALResult>
 800c876:	e7dd      	b.n	800c834 <SetOutputSampleRate+0x84>
 800c878:	200174b0 	.word	0x200174b0
 800c87c:	20017534 	.word	0x20017534
 800c880:	200153d8 	.word	0x200153d8
 800c884:	200153e8 	.word	0x200153e8
 800c888:	080133ac 	.word	0x080133ac
 800c88c:	20015400 	.word	0x20015400
 800c890:	080133d8 	.word	0x080133d8
 800c894:	20016800 	.word	0x20016800
 800c898:	080133c4 	.word	0x080133c4
 800c89c:	0801339c 	.word	0x0801339c

0800c8a0 <SetOutputSampleRate_44100>:
{
 800c8a0:	b500      	push	{lr}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	4601      	mov	r1, r0
  SetOutputSampleRate(SAI_AUDIO_FREQUENCY_44K, i_NumSamples, 429, RCC_PLLI2SP_DIV4, 2, 19);
 800c8a6:	2313      	movs	r3, #19
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	2302      	movs	r3, #2
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800c8b4:	f64a 4044 	movw	r0, #44100	@ 0xac44
 800c8b8:	f7ff ff7a 	bl	800c7b0 <SetOutputSampleRate>
}
 800c8bc:	b003      	add	sp, #12
 800c8be:	f85d fb04 	ldr.w	pc, [sp], #4

0800c8c2 <SetOutputSampleRate_48000>:
{
 800c8c2:	b500      	push	{lr}
 800c8c4:	b083      	sub	sp, #12
 800c8c6:	4601      	mov	r1, r0
  SetOutputSampleRate(SAI_AUDIO_FREQUENCY_48K, i_NumSamples, 344, RCC_PLLI2SP_DIV4, 14, 1);
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	220e      	movs	r2, #14
 800c8ce:	9200      	str	r2, [sp, #0]
 800c8d0:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800c8d4:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 800c8d8:	f7ff ff6a 	bl	800c7b0 <SetOutputSampleRate>
}
 800c8dc:	b003      	add	sp, #12
 800c8de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c8e4 <SPDIFRX_SetOutputSampleRate_Callback>:
{
 800c8e4:	b508      	push	{r3, lr}
  if (Value == SAI_AUDIO_FREQUENCY_44K)
 800c8e6:	f64a 4344 	movw	r3, #44100	@ 0xac44
 800c8ea:	4298      	cmp	r0, r3
 800c8ec:	d007      	beq.n	800c8fe <SPDIFRX_SetOutputSampleRate_Callback+0x1a>
  else if (Value == SAI_AUDIO_FREQUENCY_48K)
 800c8ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c8f2:	4298      	cmp	r0, r3
 800c8f4:	d008      	beq.n	800c908 <SPDIFRX_SetOutputSampleRate_Callback+0x24>
    OutputSampleRate = 0;
 800c8f6:	4b07      	ldr	r3, [pc, #28]	@ (800c914 <SPDIFRX_SetOutputSampleRate_Callback+0x30>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]
}
 800c8fc:	bd08      	pop	{r3, pc}
    SetOutputSampleRate_44100(SPDIFRX_Buffer_NumSamples);
 800c8fe:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800c902:	f7ff ffcd 	bl	800c8a0 <SetOutputSampleRate_44100>
 800c906:	e7f9      	b.n	800c8fc <SPDIFRX_SetOutputSampleRate_Callback+0x18>
    SetOutputSampleRate_48000(SPDIFRX_Buffer_NumSamples);
 800c908:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800c90c:	f7ff ffd9 	bl	800c8c2 <SetOutputSampleRate_48000>
 800c910:	e7f4      	b.n	800c8fc <SPDIFRX_SetOutputSampleRate_Callback+0x18>
 800c912:	bf00      	nop
 800c914:	200153d8 	.word	0x200153d8

0800c918 <Si4684_Initialize>:
{
 800c918:	b530      	push	{r4, r5, lr}
 800c91a:	b0a9      	sub	sp, #164	@ 0xa4
 800c91c:	4604      	mov	r4, r0
  WasMuted = InternalMute(1); // Mute because the I2S lines from the Si4684 float during its initialization, and tend to pick up spurious signals.
 800c91e:	2001      	movs	r0, #1
 800c920:	f7ff ff38 	bl	800c794 <InternalMute>
 800c924:	4605      	mov	r5, r0
  si468x_init(Mode);
 800c926:	4620      	mov	r0, r4
 800c928:	f7fe fa22 	bl	800ad70 <si468x_init>
  if (Mode == Si468x_MODE_DAB)
 800c92c:	2c02      	cmp	r4, #2
 800c92e:	d004      	beq.n	800c93a <Si4684_Initialize+0x22>
  InternalMute(WasMuted);
 800c930:	4628      	mov	r0, r5
 800c932:	f7ff ff2f 	bl	800c794 <InternalMute>
}
 800c936:	b029      	add	sp, #164	@ 0xa4
 800c938:	bd30      	pop	{r4, r5, pc}
    StringToGUID("{8f74f7d6-eba6-4a72-bd43-16f123bbc3e6}", &DAB_FlashFormat0);
 800c93a:	a924      	add	r1, sp, #144	@ 0x90
 800c93c:	481c      	ldr	r0, [pc, #112]	@ (800c9b0 <Si4684_Initialize+0x98>)
 800c93e:	f7fb fd0f 	bl	8008360 <StringToGUID>
    SST25_ReadBlock(0, (uint8_t *)&DAB_FlashFormatID, 16);
 800c942:	2210      	movs	r2, #16
 800c944:	a920      	add	r1, sp, #128	@ 0x80
 800c946:	2000      	movs	r0, #0
 800c948:	f7fd fc9c 	bl	800a284 <SST25_ReadBlock>
    if (IsUserButtonPressed() || !GUID_IsEqual(&DAB_FlashFormatID, &DAB_FlashFormat0))
 800c94c:	f7fd fd9c 	bl	800a488 <IsUserButtonPressed>
 800c950:	b920      	cbnz	r0, 800c95c <Si4684_Initialize+0x44>
 800c952:	a924      	add	r1, sp, #144	@ 0x90
 800c954:	a820      	add	r0, sp, #128	@ 0x80
 800c956:	f7fb fd53 	bl	8008400 <GUID_IsEqual>
 800c95a:	b9f8      	cbnz	r0, 800c99c <Si4684_Initialize+0x84>
      ILI9341_Clear(0);
 800c95c:	2000      	movs	r0, #0
 800c95e:	f7fc f927 	bl	8008bb0 <ILI9341_Clear>
      sprintf(S, "DAB scanning...");
 800c962:	466c      	mov	r4, sp
 800c964:	4b13      	ldr	r3, [pc, #76]	@ (800c9b4 <Si4684_Initialize+0x9c>)
 800c966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      ILI9341_DrawTextAtXY(S, 0, 1 * ILI9341_GetFontYSpacing(), tpLeft);
 800c96c:	f7fc f988 	bl	8008c80 <ILI9341_GetFontYSpacing>
 800c970:	4602      	mov	r2, r0
 800c972:	2301      	movs	r3, #1
 800c974:	2100      	movs	r1, #0
 800c976:	4620      	mov	r0, r4
 800c978:	f7fc fb0c 	bl	8008f94 <ILI9341_DrawTextAtXY>
      if (ILI9341_UsingBackBuffer())
 800c97c:	f7fc f8ae 	bl	8008adc <ILI9341_UsingBackBuffer>
 800c980:	b998      	cbnz	r0, 800c9aa <Si4684_Initialize+0x92>
      PageChanged = 1;
 800c982:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b8 <Si4684_Initialize+0xa0>)
 800c984:	2201      	movs	r2, #1
 800c986:	701a      	strb	r2, [r3, #0]
      SST25_EraseSector_4K(0);
 800c988:	2000      	movs	r0, #0
 800c98a:	f7fd fbbb 	bl	800a104 <SST25_EraseSector_4K>
      SST25_WriteBlock(0, (uint8_t *)&DAB_FlashFormat0, 16);
 800c98e:	2210      	movs	r2, #16
 800c990:	a924      	add	r1, sp, #144	@ 0x90
 800c992:	2000      	movs	r0, #0
 800c994:	f7fd fc00 	bl	800a198 <SST25_WriteBlock>
      si468x_DAB_band_scan();
 800c998:	f7fe fcc0 	bl	800b31c <si468x_DAB_band_scan>
    SST25_ReadBlock(4096, (uint8_t *) &DAB_NumServices, 2);
 800c99c:	2202      	movs	r2, #2
 800c99e:	4907      	ldr	r1, [pc, #28]	@ (800c9bc <Si4684_Initialize+0xa4>)
 800c9a0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c9a4:	f7fd fc6e 	bl	800a284 <SST25_ReadBlock>
 800c9a8:	e7c2      	b.n	800c930 <Si4684_Initialize+0x18>
        ILI9341_CopyBackBufferToDisplay();
 800c9aa:	f7fc f89d 	bl	8008ae8 <ILI9341_CopyBackBufferToDisplay>
 800c9ae:	e7e8      	b.n	800c982 <Si4684_Initialize+0x6a>
 800c9b0:	080133f0 	.word	0x080133f0
 800c9b4:	08013418 	.word	0x08013418
 800c9b8:	200172d1 	.word	0x200172d1
 800c9bc:	2001533e 	.word	0x2001533e

0800c9c0 <Si4684_RequireMode>:
{
 800c9c0:	b510      	push	{r4, lr}
 800c9c2:	4604      	mov	r4, r0
  if (Mode == JSB_si468x_get_current_mode())
 800c9c4:	f7fe fa4a 	bl	800ae5c <JSB_si468x_get_current_mode>
 800c9c8:	42a0      	cmp	r0, r4
 800c9ca:	d002      	beq.n	800c9d2 <Si4684_RequireMode+0x12>
  Si4684_Initialize(Mode);
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f7ff ffa3 	bl	800c918 <Si4684_Initialize>
}
 800c9d2:	bd10      	pop	{r4, pc}

0800c9d4 <SetCurrentPage>:
  pCurrentPage = Value;
 800c9d4:	4b02      	ldr	r3, [pc, #8]	@ (800c9e0 <SetCurrentPage+0xc>)
 800c9d6:	6018      	str	r0, [r3, #0]
  PageChanged = 1;
 800c9d8:	4b02      	ldr	r3, [pc, #8]	@ (800c9e4 <SetCurrentPage+0x10>)
 800c9da:	2201      	movs	r2, #1
 800c9dc:	701a      	strb	r2, [r3, #0]
}
 800c9de:	4770      	bx	lr
 800c9e0:	200172d4 	.word	0x200172d4
 800c9e4:	200172d1 	.word	0x200172d1

0800c9e8 <HomePage_InputButtonPressed>:
{
 800c9e8:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c9ea:	f7fd f863 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pInputPage);
 800c9ee:	4b02      	ldr	r3, [pc, #8]	@ (800c9f8 <HomePage_InputButtonPressed+0x10>)
 800c9f0:	6818      	ldr	r0, [r3, #0]
 800c9f2:	f7ff ffef 	bl	800c9d4 <SetCurrentPage>
}
 800c9f6:	bd08      	pop	{r3, pc}
 800c9f8:	200172a8 	.word	0x200172a8

0800c9fc <HomePage_ProcessButtonPressed>:
{
 800c9fc:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800c9fe:	f7fd f859 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pProcessPage);
 800ca02:	4b02      	ldr	r3, [pc, #8]	@ (800ca0c <HomePage_ProcessButtonPressed+0x10>)
 800ca04:	6818      	ldr	r0, [r3, #0]
 800ca06:	f7ff ffe5 	bl	800c9d4 <SetCurrentPage>
}
 800ca0a:	bd08      	pop	{r3, pc}
 800ca0c:	20017280 	.word	0x20017280

0800ca10 <HomePage_PowerAmpButtonPressed>:
{
 800ca10:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800ca12:	f7fd f84f 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pPowerAmplifierPage);
 800ca16:	4b02      	ldr	r3, [pc, #8]	@ (800ca20 <HomePage_PowerAmpButtonPressed+0x10>)
 800ca18:	6818      	ldr	r0, [r3, #0]
 800ca1a:	f7ff ffdb 	bl	800c9d4 <SetCurrentPage>
}
 800ca1e:	bd08      	pop	{r3, pc}
 800ca20:	20017268 	.word	0x20017268

0800ca24 <HomePage_BluetoothOutButtonPressed>:
{
 800ca24:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800ca26:	f7fd f845 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pBluetoothOutPage);
 800ca2a:	4b02      	ldr	r3, [pc, #8]	@ (800ca34 <HomePage_BluetoothOutButtonPressed+0x10>)
 800ca2c:	6818      	ldr	r0, [r3, #0]
 800ca2e:	f7ff ffd1 	bl	800c9d4 <SetCurrentPage>
}
 800ca32:	bd08      	pop	{r3, pc}
 800ca34:	20017250 	.word	0x20017250

0800ca38 <HomePage_WiFiButtonPressed>:
{
 800ca38:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800ca3a:	f7fd f83b 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pWiFiPage);
 800ca3e:	4b02      	ldr	r3, [pc, #8]	@ (800ca48 <HomePage_WiFiButtonPressed+0x10>)
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	f7ff ffc7 	bl	800c9d4 <SetCurrentPage>
}
 800ca46:	bd08      	pop	{r3, pc}
 800ca48:	2001723c 	.word	0x2001723c

0800ca4c <HomePage_InfoButtonPressed>:
{
 800ca4c:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800ca4e:	f7fd f831 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pInfoPage);
 800ca52:	4b02      	ldr	r3, [pc, #8]	@ (800ca5c <HomePage_InfoButtonPressed+0x10>)
 800ca54:	6818      	ldr	r0, [r3, #0]
 800ca56:	f7ff ffbd 	bl	800c9d4 <SetCurrentPage>
}
 800ca5a:	bd08      	pop	{r3, pc}
 800ca5c:	20017228 	.word	0x20017228

0800ca60 <InputPage_HomeButtonPressed>:
{
 800ca60:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800ca62:	f7fd f827 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800ca66:	4b02      	ldr	r3, [pc, #8]	@ (800ca70 <InputPage_HomeButtonPressed+0x10>)
 800ca68:	6818      	ldr	r0, [r3, #0]
 800ca6a:	f7ff ffb3 	bl	800c9d4 <SetCurrentPage>
}
 800ca6e:	bd08      	pop	{r3, pc}
 800ca70:	200172cc 	.word	0x200172cc

0800ca74 <ProcessPage_HomeButtonPressed>:
{
 800ca74:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800ca76:	f7fd f81d 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800ca7a:	4b02      	ldr	r3, [pc, #8]	@ (800ca84 <ProcessPage_HomeButtonPressed+0x10>)
 800ca7c:	6818      	ldr	r0, [r3, #0]
 800ca7e:	f7ff ffa9 	bl	800c9d4 <SetCurrentPage>
}
 800ca82:	bd08      	pop	{r3, pc}
 800ca84:	200172cc 	.word	0x200172cc

0800ca88 <PowerAmplifierPage_HomeButtonPressed>:
{
 800ca88:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800ca8a:	f7fd f813 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800ca8e:	4b02      	ldr	r3, [pc, #8]	@ (800ca98 <PowerAmplifierPage_HomeButtonPressed+0x10>)
 800ca90:	6818      	ldr	r0, [r3, #0]
 800ca92:	f7ff ff9f 	bl	800c9d4 <SetCurrentPage>
}
 800ca96:	bd08      	pop	{r3, pc}
 800ca98:	200172cc 	.word	0x200172cc

0800ca9c <BluetoothOutPage_HomeButtonPressed>:
{
 800ca9c:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800ca9e:	f7fd f809 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800caa2:	4b02      	ldr	r3, [pc, #8]	@ (800caac <BluetoothOutPage_HomeButtonPressed+0x10>)
 800caa4:	6818      	ldr	r0, [r3, #0]
 800caa6:	f7ff ff95 	bl	800c9d4 <SetCurrentPage>
}
 800caaa:	bd08      	pop	{r3, pc}
 800caac:	200172cc 	.word	0x200172cc

0800cab0 <WiFiPage_HomeButtonPressed>:
{
 800cab0:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800cab2:	f7fc ffff 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800cab6:	4b02      	ldr	r3, [pc, #8]	@ (800cac0 <WiFiPage_HomeButtonPressed+0x10>)
 800cab8:	6818      	ldr	r0, [r3, #0]
 800caba:	f7ff ff8b 	bl	800c9d4 <SetCurrentPage>
}
 800cabe:	bd08      	pop	{r3, pc}
 800cac0:	200172cc 	.word	0x200172cc

0800cac4 <InfoPage_RadioInfoButtonPressed>:
{
 800cac4:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800cac6:	f7fc fff5 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pRadioInfoPage);
 800caca:	4b02      	ldr	r3, [pc, #8]	@ (800cad4 <InfoPage_RadioInfoButtonPressed+0x10>)
 800cacc:	6818      	ldr	r0, [r3, #0]
 800cace:	f7ff ff81 	bl	800c9d4 <SetCurrentPage>
}
 800cad2:	bd08      	pop	{r3, pc}
 800cad4:	20017218 	.word	0x20017218

0800cad8 <InfoPage_HomeButtonPressed>:
{
 800cad8:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800cada:	f7fc ffeb 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pHomePage);
 800cade:	4b02      	ldr	r3, [pc, #8]	@ (800cae8 <InfoPage_HomeButtonPressed+0x10>)
 800cae0:	6818      	ldr	r0, [r3, #0]
 800cae2:	f7ff ff77 	bl	800c9d4 <SetCurrentPage>
}
 800cae6:	bd08      	pop	{r3, pc}
 800cae8:	200172cc 	.word	0x200172cc

0800caec <RadioInfoPage_BackButtonPressed>:
{
 800caec:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800caee:	f7fc ffe1 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pInfoPage);
 800caf2:	4b02      	ldr	r3, [pc, #8]	@ (800cafc <RadioInfoPage_BackButtonPressed+0x10>)
 800caf4:	6818      	ldr	r0, [r3, #0]
 800caf6:	f7ff ff6d 	bl	800c9d4 <SetCurrentPage>
}
 800cafa:	bd08      	pop	{r3, pc}
 800cafc:	20017228 	.word	0x20017228

0800cb00 <DebugInfoPage_BackButtonPressed>:
{
 800cb00:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800cb02:	f7fc ffd7 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetCurrentPage(UI_pInfoPage);
 800cb06:	4b02      	ldr	r3, [pc, #8]	@ (800cb10 <DebugInfoPage_BackButtonPressed+0x10>)
 800cb08:	6818      	ldr	r0, [r3, #0]
 800cb0a:	f7ff ff63 	bl	800c9d4 <SetCurrentPage>
}
 800cb0e:	bd08      	pop	{r3, pc}
 800cb10:	20017228 	.word	0x20017228

0800cb14 <SetPowerOn>:
{
 800cb14:	b508      	push	{r3, lr}
  PowerOn = Value;
 800cb16:	4b03      	ldr	r3, [pc, #12]	@ (800cb24 <SetPowerOn+0x10>)
 800cb18:	7018      	strb	r0, [r3, #0]
  SetCurrentPage(UI_pHomePage);
 800cb1a:	4b03      	ldr	r3, [pc, #12]	@ (800cb28 <SetPowerOn+0x14>)
 800cb1c:	6818      	ldr	r0, [r3, #0]
 800cb1e:	f7ff ff59 	bl	800c9d4 <SetCurrentPage>
}
 800cb22:	bd08      	pop	{r3, pc}
 800cb24:	20017200 	.word	0x20017200
 800cb28:	200172cc 	.word	0x200172cc

0800cb2c <HomePage_TitleBarPressed>:
{
 800cb2c:	b508      	push	{r3, lr}
  JSB_UI_Page_PressUp();
 800cb2e:	f7fc ffc1 	bl	8009ab4 <JSB_UI_Page_PressUp>
  SetPowerOn(0);
 800cb32:	2000      	movs	r0, #0
 800cb34:	f7ff ffee 	bl	800cb14 <SetPowerOn>
}
 800cb38:	bd08      	pop	{r3, pc}
	...

0800cb3c <Process_SetGain>:
{
 800cb3c:	b508      	push	{r3, lr}
  Value = Clamp_float(Value, 0.0f, 1.0f);
 800cb3e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800cb42:	2100      	movs	r1, #0
 800cb44:	f7fb fb7f 	bl	8008246 <Clamp_float>
  Process_Gain = Value;
 800cb48:	4b03      	ldr	r3, [pc, #12]	@ (800cb58 <Process_SetGain+0x1c>)
 800cb4a:	6018      	str	r0, [r3, #0]
  SPDIFRX_TransferGain = Value;
 800cb4c:	4b03      	ldr	r3, [pc, #12]	@ (800cb5c <Process_SetGain+0x20>)
 800cb4e:	6018      	str	r0, [r3, #0]
  PageChanged = 1;
 800cb50:	4b03      	ldr	r3, [pc, #12]	@ (800cb60 <Process_SetGain+0x24>)
 800cb52:	2201      	movs	r2, #1
 800cb54:	701a      	strb	r2, [r3, #0]
}
 800cb56:	bd08      	pop	{r3, pc}
 800cb58:	200003f8 	.word	0x200003f8
 800cb5c:	20000034 	.word	0x20000034
 800cb60:	200172d1 	.word	0x200172d1

0800cb64 <ProcessPage_GainControlChanged>:
{
 800cb64:	b508      	push	{r3, lr}
  Process_SetGain(Process_Gain);
 800cb66:	4b02      	ldr	r3, [pc, #8]	@ (800cb70 <ProcessPage_GainControlChanged+0xc>)
 800cb68:	6818      	ldr	r0, [r3, #0]
 800cb6a:	f7ff ffe7 	bl	800cb3c <Process_SetGain>
}
 800cb6e:	bd08      	pop	{r3, pc}
 800cb70:	200003f8 	.word	0x200003f8

0800cb74 <ProcessPage_DefaultGainControlPressed>:
{
 800cb74:	b508      	push	{r3, lr}
  Process_SetGain(Process_Gain_Default);
 800cb76:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800cb7a:	f7ff ffdf 	bl	800cb3c <Process_SetGain>
}
 800cb7e:	bd08      	pop	{r3, pc}

0800cb80 <Process_SetMute>:
  Process_UserMuted = Value;
 800cb80:	4b02      	ldr	r3, [pc, #8]	@ (800cb8c <Process_SetMute+0xc>)
 800cb82:	7018      	strb	r0, [r3, #0]
  PageChanged = 1;
 800cb84:	4b02      	ldr	r3, [pc, #8]	@ (800cb90 <Process_SetMute+0x10>)
 800cb86:	2201      	movs	r2, #1
 800cb88:	701a      	strb	r2, [r3, #0]
}
 800cb8a:	4770      	bx	lr
 800cb8c:	200153e4 	.word	0x200153e4
 800cb90:	200172d1 	.word	0x200172d1

0800cb94 <ProcessPage_MuteButtonPressed>:
{
 800cb94:	b508      	push	{r3, lr}
  Process_SetMute(!Process_UserMuted);
 800cb96:	4b04      	ldr	r3, [pc, #16]	@ (800cba8 <ProcessPage_MuteButtonPressed+0x14>)
 800cb98:	7818      	ldrb	r0, [r3, #0]
 800cb9a:	fab0 f080 	clz	r0, r0
 800cb9e:	0940      	lsrs	r0, r0, #5
 800cba0:	f7ff ffee 	bl	800cb80 <Process_SetMute>
}
 800cba4:	bd08      	pop	{r3, pc}
 800cba6:	bf00      	nop
 800cba8:	200153e4 	.word	0x200153e4

0800cbac <PA_SetUserMute>:
{
 800cbac:	b508      	push	{r3, lr}
  PA_UserMuted = Value;
 800cbae:	4b04      	ldr	r3, [pc, #16]	@ (800cbc0 <PA_SetUserMute+0x14>)
 800cbb0:	7018      	strb	r0, [r3, #0]
  UpdateMuteAndVolume();
 800cbb2:	f7ff fdd3 	bl	800c75c <UpdateMuteAndVolume>
  PageChanged = 1;
 800cbb6:	4b03      	ldr	r3, [pc, #12]	@ (800cbc4 <PA_SetUserMute+0x18>)
 800cbb8:	2201      	movs	r2, #1
 800cbba:	701a      	strb	r2, [r3, #0]
}
 800cbbc:	bd08      	pop	{r3, pc}
 800cbbe:	bf00      	nop
 800cbc0:	200153dc 	.word	0x200153dc
 800cbc4:	200172d1 	.word	0x200172d1

0800cbc8 <PA_SetVolume>:
{
 800cbc8:	b510      	push	{r4, lr}
  Value = Clamp_float(Value, PA_MasterVolume_dB_Min, PA_MasterVolume_dB_Max);
 800cbca:	4a09      	ldr	r2, [pc, #36]	@ (800cbf0 <PA_SetVolume+0x28>)
 800cbcc:	4909      	ldr	r1, [pc, #36]	@ (800cbf4 <PA_SetVolume+0x2c>)
 800cbce:	f7fb fb3a 	bl	8008246 <Clamp_float>
 800cbd2:	4604      	mov	r4, r0
  Process_SetMute(0);
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	f7ff ffd3 	bl	800cb80 <Process_SetMute>
  PA_UserMuted = 0;
 800cbda:	4b07      	ldr	r3, [pc, #28]	@ (800cbf8 <PA_SetVolume+0x30>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	701a      	strb	r2, [r3, #0]
  PA_MasterVolume_dB = Value;
 800cbe0:	4b06      	ldr	r3, [pc, #24]	@ (800cbfc <PA_SetVolume+0x34>)
 800cbe2:	601c      	str	r4, [r3, #0]
  UpdateMuteAndVolume();
 800cbe4:	f7ff fdba 	bl	800c75c <UpdateMuteAndVolume>
  PageChanged = 1;
 800cbe8:	4b05      	ldr	r3, [pc, #20]	@ (800cc00 <PA_SetVolume+0x38>)
 800cbea:	2201      	movs	r2, #1
 800cbec:	701a      	strb	r2, [r3, #0]
}
 800cbee:	bd10      	pop	{r4, pc}
 800cbf0:	41a00000 	.word	0x41a00000
 800cbf4:	c2a00000 	.word	0xc2a00000
 800cbf8:	200153dc 	.word	0x200153dc
 800cbfc:	200153e0 	.word	0x200153e0
 800cc00:	200172d1 	.word	0x200172d1

0800cc04 <PowerAmplifierPage_VolumeControlChanged>:
{
 800cc04:	b508      	push	{r3, lr}
  PA_SetVolume(PA_MasterVolume_dB);
 800cc06:	4b02      	ldr	r3, [pc, #8]	@ (800cc10 <PowerAmplifierPage_VolumeControlChanged+0xc>)
 800cc08:	6818      	ldr	r0, [r3, #0]
 800cc0a:	f7ff ffdd 	bl	800cbc8 <PA_SetVolume>
}
 800cc0e:	bd08      	pop	{r3, pc}
 800cc10:	200153e0 	.word	0x200153e0

0800cc14 <PowerAmplifierPage_DefaultVolumeButtonPressed>:
{
 800cc14:	b508      	push	{r3, lr}
  PA_MasterVolume_dB = PA_MasterVolume_dB_Default;
 800cc16:	2000      	movs	r0, #0
 800cc18:	4b02      	ldr	r3, [pc, #8]	@ (800cc24 <PowerAmplifierPage_DefaultVolumeButtonPressed+0x10>)
 800cc1a:	6018      	str	r0, [r3, #0]
  PA_SetVolume(PA_MasterVolume_dB);
 800cc1c:	f7ff ffd4 	bl	800cbc8 <PA_SetVolume>
}
 800cc20:	bd08      	pop	{r3, pc}
 800cc22:	bf00      	nop
 800cc24:	200153e0 	.word	0x200153e0

0800cc28 <PowerAmplifierPage_MuteButtonPressed>:
{
 800cc28:	b508      	push	{r3, lr}
  if (!PA_UserMuted)
 800cc2a:	4b06      	ldr	r3, [pc, #24]	@ (800cc44 <PowerAmplifierPage_MuteButtonPressed+0x1c>)
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	b91b      	cbnz	r3, 800cc38 <PowerAmplifierPage_MuteButtonPressed+0x10>
    PA_SetUserMute(1);
 800cc30:	2001      	movs	r0, #1
 800cc32:	f7ff ffbb 	bl	800cbac <PA_SetUserMute>
}
 800cc36:	bd08      	pop	{r3, pc}
    PA_SetVolume(PA_MasterVolume_dB);
 800cc38:	4b03      	ldr	r3, [pc, #12]	@ (800cc48 <PowerAmplifierPage_MuteButtonPressed+0x20>)
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	f7ff ffc4 	bl	800cbc8 <PA_SetVolume>
}
 800cc40:	e7f9      	b.n	800cc36 <PowerAmplifierPage_MuteButtonPressed+0xe>
 800cc42:	bf00      	nop
 800cc44:	200153dc 	.word	0x200153dc
 800cc48:	200153e0 	.word	0x200153e0

0800cc4c <BluetoothOut_SetOffOn>:
{
 800cc4c:	b508      	push	{r3, lr}
  if (Value != BluetoothOut_On)
 800cc4e:	4b07      	ldr	r3, [pc, #28]	@ (800cc6c <BluetoothOut_SetOffOn+0x20>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	4283      	cmp	r3, r0
 800cc54:	d100      	bne.n	800cc58 <BluetoothOut_SetOffOn+0xc>
}
 800cc56:	bd08      	pop	{r3, pc}
    BluetoothOut_On = Value;
 800cc58:	4b04      	ldr	r3, [pc, #16]	@ (800cc6c <BluetoothOut_SetOffOn+0x20>)
 800cc5a:	7018      	strb	r0, [r3, #0]
    ESP32_A_Enable(Value);
 800cc5c:	f7fd fde2 	bl	800a824 <ESP32_A_Enable>
    BluetoothOutChanged = 1;
 800cc60:	2301      	movs	r3, #1
 800cc62:	4a03      	ldr	r2, [pc, #12]	@ (800cc70 <BluetoothOut_SetOffOn+0x24>)
 800cc64:	7013      	strb	r3, [r2, #0]
    PageChanged = 1;
 800cc66:	4a03      	ldr	r2, [pc, #12]	@ (800cc74 <BluetoothOut_SetOffOn+0x28>)
 800cc68:	7013      	strb	r3, [r2, #0]
}
 800cc6a:	e7f4      	b.n	800cc56 <BluetoothOut_SetOffOn+0xa>
 800cc6c:	200153c5 	.word	0x200153c5
 800cc70:	200172d0 	.word	0x200172d0
 800cc74:	200172d1 	.word	0x200172d1

0800cc78 <BluetoothOutPage_OffButtonPressed>:
{
 800cc78:	b508      	push	{r3, lr}
  BluetoothOut_SetOffOn(0);
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	f7ff ffe6 	bl	800cc4c <BluetoothOut_SetOffOn>
}
 800cc80:	bd08      	pop	{r3, pc}

0800cc82 <BluetoothOutPage_OnButtonPressed>:
{
 800cc82:	b508      	push	{r3, lr}
  BluetoothOut_SetOffOn(1);
 800cc84:	2001      	movs	r0, #1
 800cc86:	f7ff ffe1 	bl	800cc4c <BluetoothOut_SetOffOn>
}
 800cc8a:	bd08      	pop	{r3, pc}

0800cc8c <WiFi_SetOffOn>:
{
 800cc8c:	b508      	push	{r3, lr}
  if (Value != WiFi_On)
 800cc8e:	4b06      	ldr	r3, [pc, #24]	@ (800cca8 <WiFi_SetOffOn+0x1c>)
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	4283      	cmp	r3, r0
 800cc94:	d100      	bne.n	800cc98 <WiFi_SetOffOn+0xc>
}
 800cc96:	bd08      	pop	{r3, pc}
    WiFi_On = Value;
 800cc98:	4b03      	ldr	r3, [pc, #12]	@ (800cca8 <WiFi_SetOffOn+0x1c>)
 800cc9a:	7018      	strb	r0, [r3, #0]
    ESP32_B_Enable(Value);
 800cc9c:	f7fd fdcc 	bl	800a838 <ESP32_B_Enable>
    PageChanged = 1;
 800cca0:	4b02      	ldr	r3, [pc, #8]	@ (800ccac <WiFi_SetOffOn+0x20>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	701a      	strb	r2, [r3, #0]
}
 800cca6:	e7f6      	b.n	800cc96 <WiFi_SetOffOn+0xa>
 800cca8:	200153c3 	.word	0x200153c3
 800ccac:	200172d1 	.word	0x200172d1

0800ccb0 <WiFiPage_OffButtonPressed>:
{
 800ccb0:	b508      	push	{r3, lr}
  WiFi_SetOffOn(0);
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	f7ff ffea 	bl	800cc8c <WiFi_SetOffOn>
}
 800ccb8:	bd08      	pop	{r3, pc}

0800ccba <WiFiPage_OnButtonPressed>:
{
 800ccba:	b508      	push	{r3, lr}
  WiFi_SetOffOn(1);
 800ccbc:	2001      	movs	r0, #1
 800ccbe:	f7ff ffe5 	bl	800cc8c <WiFi_SetOffOn>
}
 800ccc2:	bd08      	pop	{r3, pc}

0800ccc4 <SetUserMute>:
{
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	4604      	mov	r4, r0
  PA_SetUserMute(Value);
 800ccc8:	f7ff ff70 	bl	800cbac <PA_SetUserMute>
  Process_SetMute(Value);
 800cccc:	4620      	mov	r0, r4
 800ccce:	f7ff ff57 	bl	800cb80 <Process_SetMute>
  PageChanged = 1;
 800ccd2:	4b02      	ldr	r3, [pc, #8]	@ (800ccdc <SetUserMute+0x18>)
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	701a      	strb	r2, [r3, #0]
}
 800ccd8:	bd10      	pop	{r4, pc}
 800ccda:	bf00      	nop
 800ccdc:	200172d1 	.word	0x200172d1

0800cce0 <DrawRectAroundControl>:
{
 800cce0:	b510      	push	{r4, lr}
 800cce2:	b086      	sub	sp, #24
  Rect = pControl->Rect;
 800cce4:	3004      	adds	r0, #4
 800cce6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800cce8:	ac06      	add	r4, sp, #24
 800ccea:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  Rect.Left -= 2;
 800ccee:	3802      	subs	r0, #2
 800ccf0:	9002      	str	r0, [sp, #8]
  Rect.Top -= 2;
 800ccf2:	3902      	subs	r1, #2
 800ccf4:	9103      	str	r1, [sp, #12]
  Rect.Width += 4;
 800ccf6:	3204      	adds	r2, #4
 800ccf8:	9204      	str	r2, [sp, #16]
  Rect.Height += 4;
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	9305      	str	r3, [sp, #20]
  ILI9341_DrawRectangle(Rect.Left, Rect.Top, Rect. Width, Rect.Height, ILI9341_COLOR_WHITE);
 800ccfe:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800cd02:	9400      	str	r4, [sp, #0]
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	b292      	uxth	r2, r2
 800cd08:	b289      	uxth	r1, r1
 800cd0a:	b280      	uxth	r0, r0
 800cd0c:	f7fb ff5e 	bl	8008bcc <ILI9341_DrawRectangle>
}
 800cd10:	b006      	add	sp, #24
 800cd12:	bd10      	pop	{r4, pc}

0800cd14 <InputPage_InputButtonCustomDraw>:
{
 800cd14:	b508      	push	{r3, lr}
  if (pControl == pInputPage_InputButton_Humax)
 800cd16:	4b25      	ldr	r3, [pc, #148]	@ (800cdac <InputPage_InputButtonCustomDraw+0x98>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4283      	cmp	r3, r0
 800cd1c:	d020      	beq.n	800cd60 <InputPage_InputButtonCustomDraw+0x4c>
  else if(pControl == pInputPage_InputButton_DVD_HDD)
 800cd1e:	4b24      	ldr	r3, [pc, #144]	@ (800cdb0 <InputPage_InputButtonCustomDraw+0x9c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4283      	cmp	r3, r0
 800cd24:	d023      	beq.n	800cd6e <InputPage_InputButtonCustomDraw+0x5a>
  else if(pControl == pInputPage_InputButton_GCA)
 800cd26:	4b23      	ldr	r3, [pc, #140]	@ (800cdb4 <InputPage_InputButtonCustomDraw+0xa0>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4283      	cmp	r3, r0
 800cd2c:	d024      	beq.n	800cd78 <InputPage_InputButtonCustomDraw+0x64>
  else if(pControl == pInputPage_InputButton_Computer)
 800cd2e:	4b22      	ldr	r3, [pc, #136]	@ (800cdb8 <InputPage_InputButtonCustomDraw+0xa4>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4283      	cmp	r3, r0
 800cd34:	d025      	beq.n	800cd82 <InputPage_InputButtonCustomDraw+0x6e>
  else if(pControl == pInputPage_InputButton_DAB)
 800cd36:	4b21      	ldr	r3, [pc, #132]	@ (800cdbc <InputPage_InputButtonCustomDraw+0xa8>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4283      	cmp	r3, r0
 800cd3c:	d026      	beq.n	800cd8c <InputPage_InputButtonCustomDraw+0x78>
  else if(pControl == pInputPage_InputButton_Si468x_FM)
 800cd3e:	4b20      	ldr	r3, [pc, #128]	@ (800cdc0 <InputPage_InputButtonCustomDraw+0xac>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4283      	cmp	r3, r0
 800cd44:	d027      	beq.n	800cd96 <InputPage_InputButtonCustomDraw+0x82>
  else if(pControl == pInputPage_InputButton_AR1010_FM)
 800cd46:	4b1f      	ldr	r3, [pc, #124]	@ (800cdc4 <InputPage_InputButtonCustomDraw+0xb0>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4283      	cmp	r3, r0
 800cd4c:	d028      	beq.n	800cda0 <InputPage_InputButtonCustomDraw+0x8c>
  else if(pControl == pInputPage_InputButton_AuxIn)
 800cd4e:	4b1e      	ldr	r3, [pc, #120]	@ (800cdc8 <InputPage_InputButtonCustomDraw+0xb4>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4283      	cmp	r3, r0
 800cd54:	d108      	bne.n	800cd68 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icAuxIn)
 800cd56:	4b1d      	ldr	r3, [pc, #116]	@ (800cdcc <InputPage_InputButtonCustomDraw+0xb8>)
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	2b08      	cmp	r3, #8
 800cd5c:	d106      	bne.n	800cd6c <InputPage_InputButtonCustomDraw+0x58>
 800cd5e:	e003      	b.n	800cd68 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icSPDIF0)
 800cd60:	4b1a      	ldr	r3, [pc, #104]	@ (800cdcc <InputPage_InputButtonCustomDraw+0xb8>)
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d101      	bne.n	800cd6c <InputPage_InputButtonCustomDraw+0x58>
  DrawRectAroundControl(pControl);
 800cd68:	f7ff ffba 	bl	800cce0 <DrawRectAroundControl>
}
 800cd6c:	bd08      	pop	{r3, pc}
    if (InputChannel != icSPDIF1)
 800cd6e:	4b17      	ldr	r3, [pc, #92]	@ (800cdcc <InputPage_InputButtonCustomDraw+0xb8>)
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d1fa      	bne.n	800cd6c <InputPage_InputButtonCustomDraw+0x58>
 800cd76:	e7f7      	b.n	800cd68 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icSPDIF2)
 800cd78:	4b14      	ldr	r3, [pc, #80]	@ (800cdcc <InputPage_InputButtonCustomDraw+0xb8>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d1f5      	bne.n	800cd6c <InputPage_InputButtonCustomDraw+0x58>
 800cd80:	e7f2      	b.n	800cd68 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icSPDIF3)
 800cd82:	4b12      	ldr	r3, [pc, #72]	@ (800cdcc <InputPage_InputButtonCustomDraw+0xb8>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	d1f0      	bne.n	800cd6c <InputPage_InputButtonCustomDraw+0x58>
 800cd8a:	e7ed      	b.n	800cd68 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icSi468x_DAB)
 800cd8c:	4b0f      	ldr	r3, [pc, #60]	@ (800cdcc <InputPage_InputButtonCustomDraw+0xb8>)
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	2b05      	cmp	r3, #5
 800cd92:	d1eb      	bne.n	800cd6c <InputPage_InputButtonCustomDraw+0x58>
 800cd94:	e7e8      	b.n	800cd68 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icSi468x_FM)
 800cd96:	4b0d      	ldr	r3, [pc, #52]	@ (800cdcc <InputPage_InputButtonCustomDraw+0xb8>)
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	2b06      	cmp	r3, #6
 800cd9c:	d1e6      	bne.n	800cd6c <InputPage_InputButtonCustomDraw+0x58>
 800cd9e:	e7e3      	b.n	800cd68 <InputPage_InputButtonCustomDraw+0x54>
    if (InputChannel != icAR1010_FM)
 800cda0:	4b0a      	ldr	r3, [pc, #40]	@ (800cdcc <InputPage_InputButtonCustomDraw+0xb8>)
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	2b07      	cmp	r3, #7
 800cda6:	d1e1      	bne.n	800cd6c <InputPage_InputButtonCustomDraw+0x58>
 800cda8:	e7de      	b.n	800cd68 <InputPage_InputButtonCustomDraw+0x54>
 800cdaa:	bf00      	nop
 800cdac:	200172a4 	.word	0x200172a4
 800cdb0:	200172a0 	.word	0x200172a0
 800cdb4:	2001729c 	.word	0x2001729c
 800cdb8:	20017298 	.word	0x20017298
 800cdbc:	20017294 	.word	0x20017294
 800cdc0:	20017290 	.word	0x20017290
 800cdc4:	2001728c 	.word	0x2001728c
 800cdc8:	20017288 	.word	0x20017288
 800cdcc:	20017203 	.word	0x20017203

0800cdd0 <ProcessPage_MuteButtonCustomDraw>:
{
 800cdd0:	b508      	push	{r3, lr}
  if (Process_UserMuted)
 800cdd2:	4b03      	ldr	r3, [pc, #12]	@ (800cde0 <ProcessPage_MuteButtonCustomDraw+0x10>)
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	b903      	cbnz	r3, 800cdda <ProcessPage_MuteButtonCustomDraw+0xa>
}
 800cdd8:	bd08      	pop	{r3, pc}
    DrawRectAroundControl(pControl);
 800cdda:	f7ff ff81 	bl	800cce0 <DrawRectAroundControl>
}
 800cdde:	e7fb      	b.n	800cdd8 <ProcessPage_MuteButtonCustomDraw+0x8>
 800cde0:	200153e4 	.word	0x200153e4

0800cde4 <PowerAmplifierPage_MuteButtonCustomDraw>:
{
 800cde4:	b508      	push	{r3, lr}
  if (PA_UserMuted)
 800cde6:	4b03      	ldr	r3, [pc, #12]	@ (800cdf4 <PowerAmplifierPage_MuteButtonCustomDraw+0x10>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	b903      	cbnz	r3, 800cdee <PowerAmplifierPage_MuteButtonCustomDraw+0xa>
}
 800cdec:	bd08      	pop	{r3, pc}
    DrawRectAroundControl(pControl);
 800cdee:	f7ff ff77 	bl	800cce0 <DrawRectAroundControl>
}
 800cdf2:	e7fb      	b.n	800cdec <PowerAmplifierPage_MuteButtonCustomDraw+0x8>
 800cdf4:	200153dc 	.word	0x200153dc

0800cdf8 <BluetoothOutPage_OffOnButtonCustomDraw>:
{
 800cdf8:	b508      	push	{r3, lr}
  if (pControl == pBluetoothOutPage_OffButton)
 800cdfa:	4b0a      	ldr	r3, [pc, #40]	@ (800ce24 <BluetoothOutPage_OffOnButtonCustomDraw+0x2c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4283      	cmp	r3, r0
 800ce00:	d006      	beq.n	800ce10 <BluetoothOutPage_OffOnButtonCustomDraw+0x18>
  else if(pControl == pBluetoothOutPage_OnButton)
 800ce02:	4b09      	ldr	r3, [pc, #36]	@ (800ce28 <BluetoothOutPage_OffOnButtonCustomDraw+0x30>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4283      	cmp	r3, r0
 800ce08:	d007      	beq.n	800ce1a <BluetoothOutPage_OffOnButtonCustomDraw+0x22>
  DrawRectAroundControl(pControl);
 800ce0a:	f7ff ff69 	bl	800cce0 <DrawRectAroundControl>
}
 800ce0e:	bd08      	pop	{r3, pc}
    if (BluetoothOut_On)
 800ce10:	4b06      	ldr	r3, [pc, #24]	@ (800ce2c <BluetoothOutPage_OffOnButtonCustomDraw+0x34>)
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d0f8      	beq.n	800ce0a <BluetoothOutPage_OffOnButtonCustomDraw+0x12>
 800ce18:	e7f9      	b.n	800ce0e <BluetoothOutPage_OffOnButtonCustomDraw+0x16>
    if (!BluetoothOut_On)
 800ce1a:	4b04      	ldr	r3, [pc, #16]	@ (800ce2c <BluetoothOutPage_OffOnButtonCustomDraw+0x34>)
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1f3      	bne.n	800ce0a <BluetoothOutPage_OffOnButtonCustomDraw+0x12>
 800ce22:	e7f4      	b.n	800ce0e <BluetoothOutPage_OffOnButtonCustomDraw+0x16>
 800ce24:	20017248 	.word	0x20017248
 800ce28:	20017244 	.word	0x20017244
 800ce2c:	200153c5 	.word	0x200153c5

0800ce30 <WiFiPage_OffOnButtonCustomDraw>:
{
 800ce30:	b508      	push	{r3, lr}
  if (pControl == pWiFiPage_OffButton)
 800ce32:	4b0a      	ldr	r3, [pc, #40]	@ (800ce5c <WiFiPage_OffOnButtonCustomDraw+0x2c>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4283      	cmp	r3, r0
 800ce38:	d006      	beq.n	800ce48 <WiFiPage_OffOnButtonCustomDraw+0x18>
  else if(pControl == pWiFiPage_OnButton)
 800ce3a:	4b09      	ldr	r3, [pc, #36]	@ (800ce60 <WiFiPage_OffOnButtonCustomDraw+0x30>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4283      	cmp	r3, r0
 800ce40:	d007      	beq.n	800ce52 <WiFiPage_OffOnButtonCustomDraw+0x22>
  DrawRectAroundControl(pControl);
 800ce42:	f7ff ff4d 	bl	800cce0 <DrawRectAroundControl>
}
 800ce46:	bd08      	pop	{r3, pc}
    if (WiFi_On)
 800ce48:	4b06      	ldr	r3, [pc, #24]	@ (800ce64 <WiFiPage_OffOnButtonCustomDraw+0x34>)
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d0f8      	beq.n	800ce42 <WiFiPage_OffOnButtonCustomDraw+0x12>
 800ce50:	e7f9      	b.n	800ce46 <WiFiPage_OffOnButtonCustomDraw+0x16>
    if (!WiFi_On)
 800ce52:	4b04      	ldr	r3, [pc, #16]	@ (800ce64 <WiFiPage_OffOnButtonCustomDraw+0x34>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1f3      	bne.n	800ce42 <WiFiPage_OffOnButtonCustomDraw+0x12>
 800ce5a:	e7f4      	b.n	800ce46 <WiFiPage_OffOnButtonCustomDraw+0x16>
 800ce5c:	20017234 	.word	0x20017234
 800ce60:	20017230 	.word	0x20017230
 800ce64:	200153c3 	.word	0x200153c3

0800ce68 <CreateHomePage>:
{
 800ce68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce6c:	b0ab      	sub	sp, #172	@ 0xac
  UI_pHomePage = JSB_UI_CreatePage();
 800ce6e:	f7fc fe27 	bl	8009ac0 <JSB_UI_CreatePage>
 800ce72:	4e8a      	ldr	r6, [pc, #552]	@ (800d09c <CreateHomePage+0x234>)
 800ce74:	6030      	str	r0, [r6, #0]
  pHomePage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, 0, 240, 32), "Phil's Uber Audio System", 0, Page_TitleColour, NULL, 1, &HomePage_TitleBarPressed, NULL, NULL);
 800ce76:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800ce7a:	2720      	movs	r7, #32
 800ce7c:	9700      	str	r7, [sp, #0]
 800ce7e:	23f0      	movs	r3, #240	@ 0xf0
 800ce80:	2200      	movs	r2, #0
 800ce82:	4611      	mov	r1, r2
 800ce84:	4640      	mov	r0, r8
 800ce86:	f7fc fe21 	bl	8009acc <JSB_UI_Rect>
 800ce8a:	2400      	movs	r4, #0
 800ce8c:	9408      	str	r4, [sp, #32]
 800ce8e:	9407      	str	r4, [sp, #28]
 800ce90:	4b83      	ldr	r3, [pc, #524]	@ (800d0a0 <CreateHomePage+0x238>)
 800ce92:	9306      	str	r3, [sp, #24]
 800ce94:	2501      	movs	r5, #1
 800ce96:	9505      	str	r5, [sp, #20]
 800ce98:	9404      	str	r4, [sp, #16]
 800ce9a:	f242 1304 	movw	r3, #8452	@ 0x2104
 800ce9e:	9303      	str	r3, [sp, #12]
 800cea0:	9402      	str	r4, [sp, #8]
 800cea2:	4b80      	ldr	r3, [pc, #512]	@ (800d0a4 <CreateHomePage+0x23c>)
 800cea4:	9301      	str	r3, [sp, #4]
 800cea6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f7fc fe1f 	bl	8009af2 <JSB_UI_CreateControl>
 800ceb4:	4601      	mov	r1, r0
 800ceb6:	4b7c      	ldr	r3, [pc, #496]	@ (800d0a8 <CreateHomePage+0x240>)
 800ceb8:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_TitleButton);
 800ceba:	6830      	ldr	r0, [r6, #0]
 800cebc:	f7fc ff61 	bl	8009d82 <JSB_UI_AddControlToPage>
  pHomePage_InputButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Input", 0, Page_ButtonColor, NULL, 1, &HomePage_InputButtonPressed, NULL, NULL);
 800cec0:	f10d 0938 	add.w	r9, sp, #56	@ 0x38
 800cec4:	9700      	str	r7, [sp, #0]
 800cec6:	23a0      	movs	r3, #160	@ 0xa0
 800cec8:	223c      	movs	r2, #60	@ 0x3c
 800ceca:	2178      	movs	r1, #120	@ 0x78
 800cecc:	4648      	mov	r0, r9
 800cece:	f7fc fe03 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800ced2:	9408      	str	r4, [sp, #32]
 800ced4:	9407      	str	r4, [sp, #28]
 800ced6:	4b75      	ldr	r3, [pc, #468]	@ (800d0ac <CreateHomePage+0x244>)
 800ced8:	9306      	str	r3, [sp, #24]
 800ceda:	9505      	str	r5, [sp, #20]
 800cedc:	9404      	str	r4, [sp, #16]
 800cede:	f647 080f 	movw	r8, #30735	@ 0x780f
 800cee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cee6:	9402      	str	r4, [sp, #8]
 800cee8:	4b71      	ldr	r3, [pc, #452]	@ (800d0b0 <CreateHomePage+0x248>)
 800ceea:	9301      	str	r3, [sp, #4]
 800ceec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800cef4:	4628      	mov	r0, r5
 800cef6:	f7fc fdfc 	bl	8009af2 <JSB_UI_CreateControl>
 800cefa:	4601      	mov	r1, r0
 800cefc:	4b6d      	ldr	r3, [pc, #436]	@ (800d0b4 <CreateHomePage+0x24c>)
 800cefe:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_InputButton);
 800cf00:	6830      	ldr	r0, [r6, #0]
 800cf02:	f7fc ff3e 	bl	8009d82 <JSB_UI_AddControlToPage>
  pHomePage_ProcessButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Process", 0, Page_ButtonColor, NULL, 1, &HomePage_ProcessButtonPressed, NULL, NULL);
 800cf06:	f10d 0948 	add.w	r9, sp, #72	@ 0x48
 800cf0a:	9700      	str	r7, [sp, #0]
 800cf0c:	23a0      	movs	r3, #160	@ 0xa0
 800cf0e:	2264      	movs	r2, #100	@ 0x64
 800cf10:	2178      	movs	r1, #120	@ 0x78
 800cf12:	4648      	mov	r0, r9
 800cf14:	f7fc fde0 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800cf18:	9408      	str	r4, [sp, #32]
 800cf1a:	9407      	str	r4, [sp, #28]
 800cf1c:	4b66      	ldr	r3, [pc, #408]	@ (800d0b8 <CreateHomePage+0x250>)
 800cf1e:	9306      	str	r3, [sp, #24]
 800cf20:	9505      	str	r5, [sp, #20]
 800cf22:	9404      	str	r4, [sp, #16]
 800cf24:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf28:	9402      	str	r4, [sp, #8]
 800cf2a:	4b64      	ldr	r3, [pc, #400]	@ (800d0bc <CreateHomePage+0x254>)
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800cf36:	4628      	mov	r0, r5
 800cf38:	f7fc fddb 	bl	8009af2 <JSB_UI_CreateControl>
 800cf3c:	4601      	mov	r1, r0
 800cf3e:	4b60      	ldr	r3, [pc, #384]	@ (800d0c0 <CreateHomePage+0x258>)
 800cf40:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_ProcessButton);
 800cf42:	6830      	ldr	r0, [r6, #0]
 800cf44:	f7fc ff1d 	bl	8009d82 <JSB_UI_AddControlToPage>
  pHomePage_PowerAmpButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Power amp", 0, Page_ButtonColor, NULL, 1, &HomePage_PowerAmpButtonPressed, NULL, NULL);
 800cf48:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 800cf4c:	9700      	str	r7, [sp, #0]
 800cf4e:	23a0      	movs	r3, #160	@ 0xa0
 800cf50:	228c      	movs	r2, #140	@ 0x8c
 800cf52:	2178      	movs	r1, #120	@ 0x78
 800cf54:	4648      	mov	r0, r9
 800cf56:	f7fc fdbf 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800cf5a:	9408      	str	r4, [sp, #32]
 800cf5c:	9407      	str	r4, [sp, #28]
 800cf5e:	4b59      	ldr	r3, [pc, #356]	@ (800d0c4 <CreateHomePage+0x25c>)
 800cf60:	9306      	str	r3, [sp, #24]
 800cf62:	9505      	str	r5, [sp, #20]
 800cf64:	9404      	str	r4, [sp, #16]
 800cf66:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf6a:	9402      	str	r4, [sp, #8]
 800cf6c:	4b56      	ldr	r3, [pc, #344]	@ (800d0c8 <CreateHomePage+0x260>)
 800cf6e:	9301      	str	r3, [sp, #4]
 800cf70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800cf78:	4628      	mov	r0, r5
 800cf7a:	f7fc fdba 	bl	8009af2 <JSB_UI_CreateControl>
 800cf7e:	4601      	mov	r1, r0
 800cf80:	4b52      	ldr	r3, [pc, #328]	@ (800d0cc <CreateHomePage+0x264>)
 800cf82:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_PowerAmpButton);
 800cf84:	6830      	ldr	r0, [r6, #0]
 800cf86:	f7fc fefc 	bl	8009d82 <JSB_UI_AddControlToPage>
  pHomePage_BluetoothOutButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Bluetooth out", 0, Page_ButtonColor, NULL, 1, &HomePage_BluetoothOutButtonPressed, NULL, NULL);
 800cf8a:	f10d 0968 	add.w	r9, sp, #104	@ 0x68
 800cf8e:	9700      	str	r7, [sp, #0]
 800cf90:	23a0      	movs	r3, #160	@ 0xa0
 800cf92:	22b4      	movs	r2, #180	@ 0xb4
 800cf94:	2178      	movs	r1, #120	@ 0x78
 800cf96:	4648      	mov	r0, r9
 800cf98:	f7fc fd9e 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800cf9c:	9408      	str	r4, [sp, #32]
 800cf9e:	9407      	str	r4, [sp, #28]
 800cfa0:	4b4b      	ldr	r3, [pc, #300]	@ (800d0d0 <CreateHomePage+0x268>)
 800cfa2:	9306      	str	r3, [sp, #24]
 800cfa4:	9505      	str	r5, [sp, #20]
 800cfa6:	9404      	str	r4, [sp, #16]
 800cfa8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfac:	9402      	str	r4, [sp, #8]
 800cfae:	4b49      	ldr	r3, [pc, #292]	@ (800d0d4 <CreateHomePage+0x26c>)
 800cfb0:	9301      	str	r3, [sp, #4]
 800cfb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800cfba:	4628      	mov	r0, r5
 800cfbc:	f7fc fd99 	bl	8009af2 <JSB_UI_CreateControl>
 800cfc0:	4601      	mov	r1, r0
 800cfc2:	4b45      	ldr	r3, [pc, #276]	@ (800d0d8 <CreateHomePage+0x270>)
 800cfc4:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_BluetoothOutButton);
 800cfc6:	6830      	ldr	r0, [r6, #0]
 800cfc8:	f7fc fedb 	bl	8009d82 <JSB_UI_AddControlToPage>
  pHomePage_WiFiButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "WiFi", 0, Page_ButtonColor, NULL, 1, &HomePage_WiFiButtonPressed, NULL, NULL);
 800cfcc:	f10d 0978 	add.w	r9, sp, #120	@ 0x78
 800cfd0:	9700      	str	r7, [sp, #0]
 800cfd2:	23a0      	movs	r3, #160	@ 0xa0
 800cfd4:	22dc      	movs	r2, #220	@ 0xdc
 800cfd6:	2178      	movs	r1, #120	@ 0x78
 800cfd8:	4648      	mov	r0, r9
 800cfda:	f7fc fd7d 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800cfde:	9408      	str	r4, [sp, #32]
 800cfe0:	9407      	str	r4, [sp, #28]
 800cfe2:	4b3e      	ldr	r3, [pc, #248]	@ (800d0dc <CreateHomePage+0x274>)
 800cfe4:	9306      	str	r3, [sp, #24]
 800cfe6:	9505      	str	r5, [sp, #20]
 800cfe8:	9404      	str	r4, [sp, #16]
 800cfea:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfee:	9402      	str	r4, [sp, #8]
 800cff0:	4b3b      	ldr	r3, [pc, #236]	@ (800d0e0 <CreateHomePage+0x278>)
 800cff2:	9301      	str	r3, [sp, #4]
 800cff4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800cffc:	4628      	mov	r0, r5
 800cffe:	f7fc fd78 	bl	8009af2 <JSB_UI_CreateControl>
 800d002:	4601      	mov	r1, r0
 800d004:	4b37      	ldr	r3, [pc, #220]	@ (800d0e4 <CreateHomePage+0x27c>)
 800d006:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_WiFiButton);
 800d008:	6830      	ldr	r0, [r6, #0]
 800d00a:	f7fc feba 	bl	8009d82 <JSB_UI_AddControlToPage>
  pHomePage_InfoButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Info", 0, Page_ButtonColor, NULL, 1, &HomePage_InfoButtonPressed, NULL, NULL);
 800d00e:	f10d 0988 	add.w	r9, sp, #136	@ 0x88
 800d012:	9700      	str	r7, [sp, #0]
 800d014:	23a0      	movs	r3, #160	@ 0xa0
 800d016:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800d01a:	2178      	movs	r1, #120	@ 0x78
 800d01c:	4648      	mov	r0, r9
 800d01e:	f7fc fd5b 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d022:	9408      	str	r4, [sp, #32]
 800d024:	9407      	str	r4, [sp, #28]
 800d026:	4b30      	ldr	r3, [pc, #192]	@ (800d0e8 <CreateHomePage+0x280>)
 800d028:	9306      	str	r3, [sp, #24]
 800d02a:	9505      	str	r5, [sp, #20]
 800d02c:	9404      	str	r4, [sp, #16]
 800d02e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d032:	9402      	str	r4, [sp, #8]
 800d034:	4b2d      	ldr	r3, [pc, #180]	@ (800d0ec <CreateHomePage+0x284>)
 800d036:	9301      	str	r3, [sp, #4]
 800d038:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800d040:	4628      	mov	r0, r5
 800d042:	f7fc fd56 	bl	8009af2 <JSB_UI_CreateControl>
 800d046:	4601      	mov	r1, r0
 800d048:	4b29      	ldr	r3, [pc, #164]	@ (800d0f0 <CreateHomePage+0x288>)
 800d04a:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_InfoButton);
 800d04c:	6830      	ldr	r0, [r6, #0]
 800d04e:	f7fc fe98 	bl	8009d82 <JSB_UI_AddControlToPage>
  pHomePage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, 304, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, NULL, NULL, NULL);
 800d052:	f10d 0998 	add.w	r9, sp, #152	@ 0x98
 800d056:	9700      	str	r7, [sp, #0]
 800d058:	2364      	movs	r3, #100	@ 0x64
 800d05a:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800d05e:	2178      	movs	r1, #120	@ 0x78
 800d060:	4648      	mov	r0, r9
 800d062:	f7fc fd39 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d066:	9408      	str	r4, [sp, #32]
 800d068:	9407      	str	r4, [sp, #28]
 800d06a:	9406      	str	r4, [sp, #24]
 800d06c:	9505      	str	r5, [sp, #20]
 800d06e:	9404      	str	r4, [sp, #16]
 800d070:	f8cd 800c 	str.w	r8, [sp, #12]
 800d074:	9402      	str	r4, [sp, #8]
 800d076:	4b1f      	ldr	r3, [pc, #124]	@ (800d0f4 <CreateHomePage+0x28c>)
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800d082:	4628      	mov	r0, r5
 800d084:	f7fc fd35 	bl	8009af2 <JSB_UI_CreateControl>
 800d088:	4601      	mov	r1, r0
 800d08a:	4b1b      	ldr	r3, [pc, #108]	@ (800d0f8 <CreateHomePage+0x290>)
 800d08c:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pHomePage, pHomePage_HomeButton);
 800d08e:	6830      	ldr	r0, [r6, #0]
 800d090:	f7fc fe77 	bl	8009d82 <JSB_UI_AddControlToPage>
}
 800d094:	b02b      	add	sp, #172	@ 0xac
 800d096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d09a:	bf00      	nop
 800d09c:	200172cc 	.word	0x200172cc
 800d0a0:	0800cb2d 	.word	0x0800cb2d
 800d0a4:	08013428 	.word	0x08013428
 800d0a8:	200172c8 	.word	0x200172c8
 800d0ac:	0800c9e9 	.word	0x0800c9e9
 800d0b0:	08013444 	.word	0x08013444
 800d0b4:	200172c4 	.word	0x200172c4
 800d0b8:	0800c9fd 	.word	0x0800c9fd
 800d0bc:	0801344c 	.word	0x0801344c
 800d0c0:	200172c0 	.word	0x200172c0
 800d0c4:	0800ca11 	.word	0x0800ca11
 800d0c8:	08013454 	.word	0x08013454
 800d0cc:	200172bc 	.word	0x200172bc
 800d0d0:	0800ca25 	.word	0x0800ca25
 800d0d4:	08013460 	.word	0x08013460
 800d0d8:	200172b8 	.word	0x200172b8
 800d0dc:	0800ca39 	.word	0x0800ca39
 800d0e0:	08013470 	.word	0x08013470
 800d0e4:	200172b4 	.word	0x200172b4
 800d0e8:	0800ca4d 	.word	0x0800ca4d
 800d0ec:	08013478 	.word	0x08013478
 800d0f0:	200172b0 	.word	0x200172b0
 800d0f4:	08013480 	.word	0x08013480
 800d0f8:	200172ac 	.word	0x200172ac

0800d0fc <CreateInputPage>:
{
 800d0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d100:	b0af      	sub	sp, #188	@ 0xbc
  UI_pInputPage = JSB_UI_CreatePage();
 800d102:	f7fc fcdd 	bl	8009ac0 <JSB_UI_CreatePage>
 800d106:	4ea1      	ldr	r6, [pc, #644]	@ (800d38c <CreateInputPage+0x290>)
 800d108:	6030      	str	r0, [r6, #0]
  pInputPage_InputButton_Humax = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Humax", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800d10a:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 800d10e:	f04f 0820 	mov.w	r8, #32
 800d112:	f8cd 8000 	str.w	r8, [sp]
 800d116:	23ec      	movs	r3, #236	@ 0xec
 800d118:	2212      	movs	r2, #18
 800d11a:	2178      	movs	r1, #120	@ 0x78
 800d11c:	4658      	mov	r0, fp
 800d11e:	f7fc fcdb 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d122:	f8df a2b8 	ldr.w	sl, [pc, #696]	@ 800d3dc <CreateInputPage+0x2e0>
 800d126:	f8cd a020 	str.w	sl, [sp, #32]
 800d12a:	2400      	movs	r4, #0
 800d12c:	9407      	str	r4, [sp, #28]
 800d12e:	f8df 92b0 	ldr.w	r9, [pc, #688]	@ 800d3e0 <CreateInputPage+0x2e4>
 800d132:	f8cd 9018 	str.w	r9, [sp, #24]
 800d136:	2501      	movs	r5, #1
 800d138:	9505      	str	r5, [sp, #20]
 800d13a:	9404      	str	r4, [sp, #16]
 800d13c:	f647 070f 	movw	r7, #30735	@ 0x780f
 800d140:	9703      	str	r7, [sp, #12]
 800d142:	9402      	str	r4, [sp, #8]
 800d144:	4b92      	ldr	r3, [pc, #584]	@ (800d390 <CreateInputPage+0x294>)
 800d146:	9301      	str	r3, [sp, #4]
 800d148:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800d150:	4628      	mov	r0, r5
 800d152:	f7fc fcce 	bl	8009af2 <JSB_UI_CreateControl>
 800d156:	4601      	mov	r1, r0
 800d158:	4b8e      	ldr	r3, [pc, #568]	@ (800d394 <CreateInputPage+0x298>)
 800d15a:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_Humax);
 800d15c:	6830      	ldr	r0, [r6, #0]
 800d15e:	f7fc fe10 	bl	8009d82 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_DVD_HDD = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "DVD/HDD", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800d162:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 800d166:	f8cd 8000 	str.w	r8, [sp]
 800d16a:	23ec      	movs	r3, #236	@ 0xec
 800d16c:	223a      	movs	r2, #58	@ 0x3a
 800d16e:	2178      	movs	r1, #120	@ 0x78
 800d170:	4658      	mov	r0, fp
 800d172:	f7fc fcb1 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d176:	f8cd a020 	str.w	sl, [sp, #32]
 800d17a:	9407      	str	r4, [sp, #28]
 800d17c:	f8cd 9018 	str.w	r9, [sp, #24]
 800d180:	9505      	str	r5, [sp, #20]
 800d182:	9404      	str	r4, [sp, #16]
 800d184:	9703      	str	r7, [sp, #12]
 800d186:	9402      	str	r4, [sp, #8]
 800d188:	4b83      	ldr	r3, [pc, #524]	@ (800d398 <CreateInputPage+0x29c>)
 800d18a:	9301      	str	r3, [sp, #4]
 800d18c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800d194:	4628      	mov	r0, r5
 800d196:	f7fc fcac 	bl	8009af2 <JSB_UI_CreateControl>
 800d19a:	4601      	mov	r1, r0
 800d19c:	4b7f      	ldr	r3, [pc, #508]	@ (800d39c <CreateInputPage+0x2a0>)
 800d19e:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_DVD_HDD);
 800d1a0:	6830      	ldr	r0, [r6, #0]
 800d1a2:	f7fc fdee 	bl	8009d82 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_GCA = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Google Chromecast Audio", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800d1a6:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 800d1aa:	f8cd 8000 	str.w	r8, [sp]
 800d1ae:	23ec      	movs	r3, #236	@ 0xec
 800d1b0:	2262      	movs	r2, #98	@ 0x62
 800d1b2:	2178      	movs	r1, #120	@ 0x78
 800d1b4:	4658      	mov	r0, fp
 800d1b6:	f7fc fc8f 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d1ba:	f8cd a020 	str.w	sl, [sp, #32]
 800d1be:	9407      	str	r4, [sp, #28]
 800d1c0:	f8cd 9018 	str.w	r9, [sp, #24]
 800d1c4:	9505      	str	r5, [sp, #20]
 800d1c6:	9404      	str	r4, [sp, #16]
 800d1c8:	9703      	str	r7, [sp, #12]
 800d1ca:	9402      	str	r4, [sp, #8]
 800d1cc:	4b74      	ldr	r3, [pc, #464]	@ (800d3a0 <CreateInputPage+0x2a4>)
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800d1d8:	4628      	mov	r0, r5
 800d1da:	f7fc fc8a 	bl	8009af2 <JSB_UI_CreateControl>
 800d1de:	4601      	mov	r1, r0
 800d1e0:	4b70      	ldr	r3, [pc, #448]	@ (800d3a4 <CreateInputPage+0x2a8>)
 800d1e2:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_GCA);
 800d1e4:	6830      	ldr	r0, [r6, #0]
 800d1e6:	f7fc fdcc 	bl	8009d82 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_Computer = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Computer", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800d1ea:	f10d 0b58 	add.w	fp, sp, #88	@ 0x58
 800d1ee:	f8cd 8000 	str.w	r8, [sp]
 800d1f2:	23ec      	movs	r3, #236	@ 0xec
 800d1f4:	228a      	movs	r2, #138	@ 0x8a
 800d1f6:	2178      	movs	r1, #120	@ 0x78
 800d1f8:	4658      	mov	r0, fp
 800d1fa:	f7fc fc6d 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d1fe:	f8cd a020 	str.w	sl, [sp, #32]
 800d202:	9407      	str	r4, [sp, #28]
 800d204:	f8cd 9018 	str.w	r9, [sp, #24]
 800d208:	9505      	str	r5, [sp, #20]
 800d20a:	9404      	str	r4, [sp, #16]
 800d20c:	9703      	str	r7, [sp, #12]
 800d20e:	9402      	str	r4, [sp, #8]
 800d210:	4b65      	ldr	r3, [pc, #404]	@ (800d3a8 <CreateInputPage+0x2ac>)
 800d212:	9301      	str	r3, [sp, #4]
 800d214:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800d21c:	4628      	mov	r0, r5
 800d21e:	f7fc fc68 	bl	8009af2 <JSB_UI_CreateControl>
 800d222:	4601      	mov	r1, r0
 800d224:	4b61      	ldr	r3, [pc, #388]	@ (800d3ac <CreateInputPage+0x2b0>)
 800d226:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_Computer);
 800d228:	6830      	ldr	r0, [r6, #0]
 800d22a:	f7fc fdaa 	bl	8009d82 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_DAB = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(59, Y, 114, 32), "Si468x DAB", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800d22e:	f10d 0b68 	add.w	fp, sp, #104	@ 0x68
 800d232:	f8cd 8000 	str.w	r8, [sp]
 800d236:	2372      	movs	r3, #114	@ 0x72
 800d238:	22b2      	movs	r2, #178	@ 0xb2
 800d23a:	213b      	movs	r1, #59	@ 0x3b
 800d23c:	4658      	mov	r0, fp
 800d23e:	f7fc fc4b 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d242:	f8cd a020 	str.w	sl, [sp, #32]
 800d246:	9407      	str	r4, [sp, #28]
 800d248:	f8cd 9018 	str.w	r9, [sp, #24]
 800d24c:	9505      	str	r5, [sp, #20]
 800d24e:	9404      	str	r4, [sp, #16]
 800d250:	9703      	str	r7, [sp, #12]
 800d252:	9402      	str	r4, [sp, #8]
 800d254:	4b56      	ldr	r3, [pc, #344]	@ (800d3b0 <CreateInputPage+0x2b4>)
 800d256:	9301      	str	r3, [sp, #4]
 800d258:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800d260:	4628      	mov	r0, r5
 800d262:	f7fc fc46 	bl	8009af2 <JSB_UI_CreateControl>
 800d266:	4601      	mov	r1, r0
 800d268:	4b52      	ldr	r3, [pc, #328]	@ (800d3b4 <CreateInputPage+0x2b8>)
 800d26a:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_DAB);
 800d26c:	6830      	ldr	r0, [r6, #0]
 800d26e:	f7fc fd88 	bl	8009d82 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_Si468x_FM = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(181, Y, 114, 32), "Si468x FM", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800d272:	f10d 0b78 	add.w	fp, sp, #120	@ 0x78
 800d276:	f8cd 8000 	str.w	r8, [sp]
 800d27a:	2372      	movs	r3, #114	@ 0x72
 800d27c:	22b2      	movs	r2, #178	@ 0xb2
 800d27e:	21b5      	movs	r1, #181	@ 0xb5
 800d280:	4658      	mov	r0, fp
 800d282:	f7fc fc29 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d286:	f8cd a020 	str.w	sl, [sp, #32]
 800d28a:	9407      	str	r4, [sp, #28]
 800d28c:	f8cd 9018 	str.w	r9, [sp, #24]
 800d290:	9505      	str	r5, [sp, #20]
 800d292:	9404      	str	r4, [sp, #16]
 800d294:	9703      	str	r7, [sp, #12]
 800d296:	9402      	str	r4, [sp, #8]
 800d298:	4b47      	ldr	r3, [pc, #284]	@ (800d3b8 <CreateInputPage+0x2bc>)
 800d29a:	9301      	str	r3, [sp, #4]
 800d29c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f7fc fc24 	bl	8009af2 <JSB_UI_CreateControl>
 800d2aa:	4601      	mov	r1, r0
 800d2ac:	4b43      	ldr	r3, [pc, #268]	@ (800d3bc <CreateInputPage+0x2c0>)
 800d2ae:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_Si468x_FM);
 800d2b0:	6830      	ldr	r0, [r6, #0]
 800d2b2:	f7fc fd66 	bl	8009d82 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_AR1010_FM = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "AR1010 FM", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800d2b6:	f10d 0b88 	add.w	fp, sp, #136	@ 0x88
 800d2ba:	f8cd 8000 	str.w	r8, [sp]
 800d2be:	23ec      	movs	r3, #236	@ 0xec
 800d2c0:	22da      	movs	r2, #218	@ 0xda
 800d2c2:	2178      	movs	r1, #120	@ 0x78
 800d2c4:	4658      	mov	r0, fp
 800d2c6:	f7fc fc07 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d2ca:	f8cd a020 	str.w	sl, [sp, #32]
 800d2ce:	9407      	str	r4, [sp, #28]
 800d2d0:	f8cd 9018 	str.w	r9, [sp, #24]
 800d2d4:	9505      	str	r5, [sp, #20]
 800d2d6:	9404      	str	r4, [sp, #16]
 800d2d8:	9703      	str	r7, [sp, #12]
 800d2da:	9402      	str	r4, [sp, #8]
 800d2dc:	4b38      	ldr	r3, [pc, #224]	@ (800d3c0 <CreateInputPage+0x2c4>)
 800d2de:	9301      	str	r3, [sp, #4]
 800d2e0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	f7fc fc02 	bl	8009af2 <JSB_UI_CreateControl>
 800d2ee:	4601      	mov	r1, r0
 800d2f0:	4b34      	ldr	r3, [pc, #208]	@ (800d3c4 <CreateInputPage+0x2c8>)
 800d2f2:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_AR1010_FM);
 800d2f4:	6830      	ldr	r0, [r6, #0]
 800d2f6:	f7fc fd44 	bl	8009d82 <JSB_UI_AddControlToPage>
  pInputPage_InputButton_AuxIn = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, Y, ButtonWidth, 32), "Aux in", 0, Page_ButtonColor, NULL, 1, &InputPage_InputButtonPressed, NULL, InputPage_InputButtonCustomDraw);
 800d2fa:	f10d 0b98 	add.w	fp, sp, #152	@ 0x98
 800d2fe:	f8cd 8000 	str.w	r8, [sp]
 800d302:	23ec      	movs	r3, #236	@ 0xec
 800d304:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d308:	2178      	movs	r1, #120	@ 0x78
 800d30a:	4658      	mov	r0, fp
 800d30c:	f7fc fbe4 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d310:	f8cd a020 	str.w	sl, [sp, #32]
 800d314:	9407      	str	r4, [sp, #28]
 800d316:	f8cd 9018 	str.w	r9, [sp, #24]
 800d31a:	9505      	str	r5, [sp, #20]
 800d31c:	9404      	str	r4, [sp, #16]
 800d31e:	9703      	str	r7, [sp, #12]
 800d320:	9402      	str	r4, [sp, #8]
 800d322:	4b29      	ldr	r3, [pc, #164]	@ (800d3c8 <CreateInputPage+0x2cc>)
 800d324:	9301      	str	r3, [sp, #4]
 800d326:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 800d32e:	4628      	mov	r0, r5
 800d330:	f7fc fbdf 	bl	8009af2 <JSB_UI_CreateControl>
 800d334:	4601      	mov	r1, r0
 800d336:	4b25      	ldr	r3, [pc, #148]	@ (800d3cc <CreateInputPage+0x2d0>)
 800d338:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_InputButton_AuxIn);
 800d33a:	6830      	ldr	r0, [r6, #0]
 800d33c:	f7fc fd21 	bl	8009d82 <JSB_UI_AddControlToPage>
  pInputPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, 304, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &InputPage_HomeButtonPressed, NULL, NULL);
 800d340:	f10d 09a8 	add.w	r9, sp, #168	@ 0xa8
 800d344:	f8cd 8000 	str.w	r8, [sp]
 800d348:	2364      	movs	r3, #100	@ 0x64
 800d34a:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800d34e:	2178      	movs	r1, #120	@ 0x78
 800d350:	4648      	mov	r0, r9
 800d352:	f7fc fbc1 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800d356:	9408      	str	r4, [sp, #32]
 800d358:	9407      	str	r4, [sp, #28]
 800d35a:	4b1d      	ldr	r3, [pc, #116]	@ (800d3d0 <CreateInputPage+0x2d4>)
 800d35c:	9306      	str	r3, [sp, #24]
 800d35e:	9505      	str	r5, [sp, #20]
 800d360:	9404      	str	r4, [sp, #16]
 800d362:	9703      	str	r7, [sp, #12]
 800d364:	9402      	str	r4, [sp, #8]
 800d366:	4b1b      	ldr	r3, [pc, #108]	@ (800d3d4 <CreateInputPage+0x2d8>)
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800d372:	4628      	mov	r0, r5
 800d374:	f7fc fbbd 	bl	8009af2 <JSB_UI_CreateControl>
 800d378:	4601      	mov	r1, r0
 800d37a:	4b17      	ldr	r3, [pc, #92]	@ (800d3d8 <CreateInputPage+0x2dc>)
 800d37c:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInputPage, pInputPage_HomeButton);
 800d37e:	6830      	ldr	r0, [r6, #0]
 800d380:	f7fc fcff 	bl	8009d82 <JSB_UI_AddControlToPage>
}
 800d384:	b02f      	add	sp, #188	@ 0xbc
 800d386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38a:	bf00      	nop
 800d38c:	200172a8 	.word	0x200172a8
 800d390:	08013488 	.word	0x08013488
 800d394:	200172a4 	.word	0x200172a4
 800d398:	08013490 	.word	0x08013490
 800d39c:	200172a0 	.word	0x200172a0
 800d3a0:	08013498 	.word	0x08013498
 800d3a4:	2001729c 	.word	0x2001729c
 800d3a8:	080134b0 	.word	0x080134b0
 800d3ac:	20017298 	.word	0x20017298
 800d3b0:	080134bc 	.word	0x080134bc
 800d3b4:	20017294 	.word	0x20017294
 800d3b8:	080134c8 	.word	0x080134c8
 800d3bc:	20017290 	.word	0x20017290
 800d3c0:	080134d4 	.word	0x080134d4
 800d3c4:	2001728c 	.word	0x2001728c
 800d3c8:	080134e0 	.word	0x080134e0
 800d3cc:	20017288 	.word	0x20017288
 800d3d0:	0800ca61 	.word	0x0800ca61
 800d3d4:	08013480 	.word	0x08013480
 800d3d8:	20017284 	.word	0x20017284
 800d3dc:	0800cd15 	.word	0x0800cd15
 800d3e0:	0800b7ad 	.word	0x0800b7ad

0800d3e4 <CreateProcessPage>:
{
 800d3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3e8:	b09f      	sub	sp, #124	@ 0x7c
  UI_pProcessPage = JSB_UI_CreatePage();
 800d3ea:	f7fc fb69 	bl	8009ac0 <JSB_UI_CreatePage>
 800d3ee:	4e5a      	ldr	r6, [pc, #360]	@ (800d558 <CreateProcessPage+0x174>)
 800d3f0:	6030      	str	r0, [r6, #0]
  pProcessPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, Y, 240, 32), "Process", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800d3f2:	af0a      	add	r7, sp, #40	@ 0x28
 800d3f4:	f04f 0920 	mov.w	r9, #32
 800d3f8:	f8cd 9000 	str.w	r9, [sp]
 800d3fc:	23f0      	movs	r3, #240	@ 0xf0
 800d3fe:	2200      	movs	r2, #0
 800d400:	4611      	mov	r1, r2
 800d402:	4638      	mov	r0, r7
 800d404:	f7fc fb62 	bl	8009acc <JSB_UI_Rect>
 800d408:	2400      	movs	r4, #0
 800d40a:	9408      	str	r4, [sp, #32]
 800d40c:	9407      	str	r4, [sp, #28]
 800d40e:	9406      	str	r4, [sp, #24]
 800d410:	2501      	movs	r5, #1
 800d412:	9505      	str	r5, [sp, #20]
 800d414:	9404      	str	r4, [sp, #16]
 800d416:	f242 1304 	movw	r3, #8452	@ 0x2104
 800d41a:	9303      	str	r3, [sp, #12]
 800d41c:	9402      	str	r4, [sp, #8]
 800d41e:	4b4f      	ldr	r3, [pc, #316]	@ (800d55c <CreateProcessPage+0x178>)
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d42a:	4628      	mov	r0, r5
 800d42c:	f7fc fb61 	bl	8009af2 <JSB_UI_CreateControl>
 800d430:	4601      	mov	r1, r0
 800d432:	4b4b      	ldr	r3, [pc, #300]	@ (800d560 <CreateProcessPage+0x17c>)
 800d434:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pProcessPage, pProcessPage_TitleButton);
 800d436:	6830      	ldr	r0, [r6, #0]
 800d438:	f7fc fca3 	bl	8009d82 <JSB_UI_AddControlToPage>
  pProcessPage_GainControl = JSB_UI_CreateControl(ctHorizontalSlider, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 80), "Gain", Page_SliderForegroundColor, Page_SliderBackgroundColor, &Process_Gain, 1, &ProcessPage_GainControlChanged, ProcessPage_GainControlChanged, NULL);
 800d43c:	af0e      	add	r7, sp, #56	@ 0x38
 800d43e:	2350      	movs	r3, #80	@ 0x50
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	23d0      	movs	r3, #208	@ 0xd0
 800d444:	2228      	movs	r2, #40	@ 0x28
 800d446:	2110      	movs	r1, #16
 800d448:	4638      	mov	r0, r7
 800d44a:	f7fc fb3f 	bl	8009acc <JSB_UI_Rect>
 800d44e:	9408      	str	r4, [sp, #32]
 800d450:	4b44      	ldr	r3, [pc, #272]	@ (800d564 <CreateProcessPage+0x180>)
 800d452:	9307      	str	r3, [sp, #28]
 800d454:	9306      	str	r3, [sp, #24]
 800d456:	9505      	str	r5, [sp, #20]
 800d458:	4b43      	ldr	r3, [pc, #268]	@ (800d568 <CreateProcessPage+0x184>)
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	f647 080f 	movw	r8, #30735	@ 0x780f
 800d460:	f8cd 800c 	str.w	r8, [sp, #12]
 800d464:	f64b 0317 	movw	r3, #47127	@ 0xb817
 800d468:	9302      	str	r3, [sp, #8]
 800d46a:	4b40      	ldr	r3, [pc, #256]	@ (800d56c <CreateProcessPage+0x188>)
 800d46c:	9301      	str	r3, [sp, #4]
 800d46e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d476:	2002      	movs	r0, #2
 800d478:	f7fc fb3b 	bl	8009af2 <JSB_UI_CreateControl>
 800d47c:	4601      	mov	r1, r0
 800d47e:	4b3c      	ldr	r3, [pc, #240]	@ (800d570 <CreateProcessPage+0x18c>)
 800d480:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pProcessPage, pProcessPage_GainControl);
 800d482:	6830      	ldr	r0, [r6, #0]
 800d484:	f7fc fc7d 	bl	8009d82 <JSB_UI_AddControlToPage>
  pProcessPage_DefaultGainControl = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 32), "Default gain", 0, Page_ButtonColor, NULL, 1, ProcessPage_DefaultGainControlPressed, NULL, NULL);
 800d488:	af12      	add	r7, sp, #72	@ 0x48
 800d48a:	f8cd 9000 	str.w	r9, [sp]
 800d48e:	23d0      	movs	r3, #208	@ 0xd0
 800d490:	2280      	movs	r2, #128	@ 0x80
 800d492:	2110      	movs	r1, #16
 800d494:	4638      	mov	r0, r7
 800d496:	f7fc fb19 	bl	8009acc <JSB_UI_Rect>
 800d49a:	9408      	str	r4, [sp, #32]
 800d49c:	9407      	str	r4, [sp, #28]
 800d49e:	4b35      	ldr	r3, [pc, #212]	@ (800d574 <CreateProcessPage+0x190>)
 800d4a0:	9306      	str	r3, [sp, #24]
 800d4a2:	9505      	str	r5, [sp, #20]
 800d4a4:	9404      	str	r4, [sp, #16]
 800d4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4aa:	9402      	str	r4, [sp, #8]
 800d4ac:	4b32      	ldr	r3, [pc, #200]	@ (800d578 <CreateProcessPage+0x194>)
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	f7fc fb1a 	bl	8009af2 <JSB_UI_CreateControl>
 800d4be:	4601      	mov	r1, r0
 800d4c0:	4b2e      	ldr	r3, [pc, #184]	@ (800d57c <CreateProcessPage+0x198>)
 800d4c2:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pProcessPage, pProcessPage_DefaultGainControl);
 800d4c4:	6830      	ldr	r0, [r6, #0]
 800d4c6:	f7fc fc5c 	bl	8009d82 <JSB_UI_AddControlToPage>
  pProcessPage_MuteButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 32), "Mute", 0, Page_ButtonColor, NULL, 1, ProcessPage_MuteButtonPressed, NULL, ProcessPage_MuteButtonCustomDraw);
 800d4ca:	af16      	add	r7, sp, #88	@ 0x58
 800d4cc:	f8cd 9000 	str.w	r9, [sp]
 800d4d0:	23d0      	movs	r3, #208	@ 0xd0
 800d4d2:	22a8      	movs	r2, #168	@ 0xa8
 800d4d4:	2110      	movs	r1, #16
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	f7fc faf8 	bl	8009acc <JSB_UI_Rect>
 800d4dc:	4b28      	ldr	r3, [pc, #160]	@ (800d580 <CreateProcessPage+0x19c>)
 800d4de:	9308      	str	r3, [sp, #32]
 800d4e0:	9407      	str	r4, [sp, #28]
 800d4e2:	4b28      	ldr	r3, [pc, #160]	@ (800d584 <CreateProcessPage+0x1a0>)
 800d4e4:	9306      	str	r3, [sp, #24]
 800d4e6:	9505      	str	r5, [sp, #20]
 800d4e8:	9404      	str	r4, [sp, #16]
 800d4ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4ee:	9402      	str	r4, [sp, #8]
 800d4f0:	4b25      	ldr	r3, [pc, #148]	@ (800d588 <CreateProcessPage+0x1a4>)
 800d4f2:	9301      	str	r3, [sp, #4]
 800d4f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4f6:	9300      	str	r3, [sp, #0]
 800d4f8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	f7fc faf8 	bl	8009af2 <JSB_UI_CreateControl>
 800d502:	4601      	mov	r1, r0
 800d504:	4b21      	ldr	r3, [pc, #132]	@ (800d58c <CreateProcessPage+0x1a8>)
 800d506:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pProcessPage, pProcessPage_MuteButton);
 800d508:	6830      	ldr	r0, [r6, #0]
 800d50a:	f7fc fc3a 	bl	8009d82 <JSB_UI_AddControlToPage>
  pProcessPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - 100 / 2, 288, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &ProcessPage_HomeButtonPressed, NULL, NULL);
 800d50e:	af1a      	add	r7, sp, #104	@ 0x68
 800d510:	f8cd 9000 	str.w	r9, [sp]
 800d514:	2364      	movs	r3, #100	@ 0x64
 800d516:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800d51a:	2146      	movs	r1, #70	@ 0x46
 800d51c:	4638      	mov	r0, r7
 800d51e:	f7fc fad5 	bl	8009acc <JSB_UI_Rect>
 800d522:	9408      	str	r4, [sp, #32]
 800d524:	9407      	str	r4, [sp, #28]
 800d526:	4b1a      	ldr	r3, [pc, #104]	@ (800d590 <CreateProcessPage+0x1ac>)
 800d528:	9306      	str	r3, [sp, #24]
 800d52a:	9505      	str	r5, [sp, #20]
 800d52c:	9404      	str	r4, [sp, #16]
 800d52e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d532:	9402      	str	r4, [sp, #8]
 800d534:	4b17      	ldr	r3, [pc, #92]	@ (800d594 <CreateProcessPage+0x1b0>)
 800d536:	9301      	str	r3, [sp, #4]
 800d538:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d53a:	9300      	str	r3, [sp, #0]
 800d53c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d540:	4628      	mov	r0, r5
 800d542:	f7fc fad6 	bl	8009af2 <JSB_UI_CreateControl>
 800d546:	4601      	mov	r1, r0
 800d548:	4b13      	ldr	r3, [pc, #76]	@ (800d598 <CreateProcessPage+0x1b4>)
 800d54a:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pProcessPage, pProcessPage_HomeButton);
 800d54c:	6830      	ldr	r0, [r6, #0]
 800d54e:	f7fc fc18 	bl	8009d82 <JSB_UI_AddControlToPage>
}
 800d552:	b01f      	add	sp, #124	@ 0x7c
 800d554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d558:	20017280 	.word	0x20017280
 800d55c:	0801344c 	.word	0x0801344c
 800d560:	2001727c 	.word	0x2001727c
 800d564:	0800cb65 	.word	0x0800cb65
 800d568:	200003f8 	.word	0x200003f8
 800d56c:	080134e8 	.word	0x080134e8
 800d570:	20017278 	.word	0x20017278
 800d574:	0800cb75 	.word	0x0800cb75
 800d578:	080134f0 	.word	0x080134f0
 800d57c:	20017274 	.word	0x20017274
 800d580:	0800cdd1 	.word	0x0800cdd1
 800d584:	0800cb95 	.word	0x0800cb95
 800d588:	08013500 	.word	0x08013500
 800d58c:	20017270 	.word	0x20017270
 800d590:	0800ca75 	.word	0x0800ca75
 800d594:	08013480 	.word	0x08013480
 800d598:	2001726c 	.word	0x2001726c

0800d59c <CreatePowerAmplifierPage>:
{
 800d59c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5a0:	b09f      	sub	sp, #124	@ 0x7c
  UI_pPowerAmplifierPage = JSB_UI_CreatePage();
 800d5a2:	f7fc fa8d 	bl	8009ac0 <JSB_UI_CreatePage>
 800d5a6:	4e5e      	ldr	r6, [pc, #376]	@ (800d720 <CreatePowerAmplifierPage+0x184>)
 800d5a8:	6030      	str	r0, [r6, #0]
  pPowerAmplifierPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, Y, 240, 32), "Power amplifier", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800d5aa:	af0a      	add	r7, sp, #40	@ 0x28
 800d5ac:	f04f 0920 	mov.w	r9, #32
 800d5b0:	f8cd 9000 	str.w	r9, [sp]
 800d5b4:	23f0      	movs	r3, #240	@ 0xf0
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	4638      	mov	r0, r7
 800d5bc:	f7fc fa86 	bl	8009acc <JSB_UI_Rect>
 800d5c0:	2400      	movs	r4, #0
 800d5c2:	9408      	str	r4, [sp, #32]
 800d5c4:	9407      	str	r4, [sp, #28]
 800d5c6:	9406      	str	r4, [sp, #24]
 800d5c8:	2501      	movs	r5, #1
 800d5ca:	9505      	str	r5, [sp, #20]
 800d5cc:	9404      	str	r4, [sp, #16]
 800d5ce:	f242 1304 	movw	r3, #8452	@ 0x2104
 800d5d2:	9303      	str	r3, [sp, #12]
 800d5d4:	9402      	str	r4, [sp, #8]
 800d5d6:	4b53      	ldr	r3, [pc, #332]	@ (800d724 <CreatePowerAmplifierPage+0x188>)
 800d5d8:	9301      	str	r3, [sp, #4]
 800d5da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5dc:	9300      	str	r3, [sp, #0]
 800d5de:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	f7fc fa85 	bl	8009af2 <JSB_UI_CreateControl>
 800d5e8:	4601      	mov	r1, r0
 800d5ea:	4b4f      	ldr	r3, [pc, #316]	@ (800d728 <CreatePowerAmplifierPage+0x18c>)
 800d5ec:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pPowerAmplifierPage, pPowerAmplifierPage_TitleButton);
 800d5ee:	6830      	ldr	r0, [r6, #0]
 800d5f0:	f7fc fbc7 	bl	8009d82 <JSB_UI_AddControlToPage>
  pPowerAmplifierPage_VolumeControl = JSB_UI_CreateControl(ctHorizontalSlider, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 80), "Volume", Page_SliderForegroundColor, Page_SliderBackgroundColor, &PA_MasterVolume_dB, 1, &PowerAmplifierPage_VolumeControlChanged, PowerAmplifierPage_VolumeControlChanged, NULL);
 800d5f4:	af0e      	add	r7, sp, #56	@ 0x38
 800d5f6:	2350      	movs	r3, #80	@ 0x50
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	23d0      	movs	r3, #208	@ 0xd0
 800d5fc:	2228      	movs	r2, #40	@ 0x28
 800d5fe:	2110      	movs	r1, #16
 800d600:	4638      	mov	r0, r7
 800d602:	f7fc fa63 	bl	8009acc <JSB_UI_Rect>
 800d606:	9408      	str	r4, [sp, #32]
 800d608:	4b48      	ldr	r3, [pc, #288]	@ (800d72c <CreatePowerAmplifierPage+0x190>)
 800d60a:	9307      	str	r3, [sp, #28]
 800d60c:	9306      	str	r3, [sp, #24]
 800d60e:	9505      	str	r5, [sp, #20]
 800d610:	4b47      	ldr	r3, [pc, #284]	@ (800d730 <CreatePowerAmplifierPage+0x194>)
 800d612:	9304      	str	r3, [sp, #16]
 800d614:	f647 080f 	movw	r8, #30735	@ 0x780f
 800d618:	f8cd 800c 	str.w	r8, [sp, #12]
 800d61c:	f64b 0317 	movw	r3, #47127	@ 0xb817
 800d620:	9302      	str	r3, [sp, #8]
 800d622:	4b44      	ldr	r3, [pc, #272]	@ (800d734 <CreatePowerAmplifierPage+0x198>)
 800d624:	9301      	str	r3, [sp, #4]
 800d626:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d628:	9300      	str	r3, [sp, #0]
 800d62a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d62e:	2002      	movs	r0, #2
 800d630:	f7fc fa5f 	bl	8009af2 <JSB_UI_CreateControl>
 800d634:	4601      	mov	r1, r0
 800d636:	4f40      	ldr	r7, [pc, #256]	@ (800d738 <CreatePowerAmplifierPage+0x19c>)
 800d638:	6038      	str	r0, [r7, #0]
    JSB_UI_AddControlToPage(UI_pPowerAmplifierPage, pPowerAmplifierPage_VolumeControl);
 800d63a:	6830      	ldr	r0, [r6, #0]
 800d63c:	f7fc fba1 	bl	8009d82 <JSB_UI_AddControlToPage>
  pPowerAmplifierPage_VolumeControl->SliderMinValue = PA_MasterVolume_dB_Min;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	4a3e      	ldr	r2, [pc, #248]	@ (800d73c <CreatePowerAmplifierPage+0x1a0>)
 800d644:	66da      	str	r2, [r3, #108]	@ 0x6c
  pPowerAmplifierPage_VolumeControl->SliderMaxValue = PA_MasterVolume_dB_Max;
 800d646:	4a3e      	ldr	r2, [pc, #248]	@ (800d740 <CreatePowerAmplifierPage+0x1a4>)
 800d648:	671a      	str	r2, [r3, #112]	@ 0x70
  pPowerAmplifierPage_VolumeControl->pTweakTextHandler = pPowerAmplifierPage_VolumeControlTweakText;
 800d64a:	4a3e      	ldr	r2, [pc, #248]	@ (800d744 <CreatePowerAmplifierPage+0x1a8>)
 800d64c:	679a      	str	r2, [r3, #120]	@ 0x78
  pPowerAmplifierPage_DefaultVolumeButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 32), "Default volume", 0, Page_ButtonColor, NULL, 1, PowerAmplifierPage_DefaultVolumeButtonPressed, NULL, NULL);
 800d64e:	af12      	add	r7, sp, #72	@ 0x48
 800d650:	f8cd 9000 	str.w	r9, [sp]
 800d654:	23d0      	movs	r3, #208	@ 0xd0
 800d656:	2280      	movs	r2, #128	@ 0x80
 800d658:	2110      	movs	r1, #16
 800d65a:	4638      	mov	r0, r7
 800d65c:	f7fc fa36 	bl	8009acc <JSB_UI_Rect>
 800d660:	9408      	str	r4, [sp, #32]
 800d662:	9407      	str	r4, [sp, #28]
 800d664:	4b38      	ldr	r3, [pc, #224]	@ (800d748 <CreatePowerAmplifierPage+0x1ac>)
 800d666:	9306      	str	r3, [sp, #24]
 800d668:	9505      	str	r5, [sp, #20]
 800d66a:	9404      	str	r4, [sp, #16]
 800d66c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d670:	9402      	str	r4, [sp, #8]
 800d672:	4b36      	ldr	r3, [pc, #216]	@ (800d74c <CreatePowerAmplifierPage+0x1b0>)
 800d674:	9301      	str	r3, [sp, #4]
 800d676:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d67e:	4628      	mov	r0, r5
 800d680:	f7fc fa37 	bl	8009af2 <JSB_UI_CreateControl>
 800d684:	4601      	mov	r1, r0
 800d686:	4b32      	ldr	r3, [pc, #200]	@ (800d750 <CreatePowerAmplifierPage+0x1b4>)
 800d688:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pPowerAmplifierPage, pPowerAmplifierPage_DefaultVolumeButton);
 800d68a:	6830      	ldr	r0, [r6, #0]
 800d68c:	f7fc fb79 	bl	8009d82 <JSB_UI_AddControlToPage>
  pPowerAmplifierPage_MuteButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - ButtonWidth / 2, Y, ButtonWidth, 32), "Mute", 0, Page_ButtonColor, NULL, 1, PowerAmplifierPage_MuteButtonPressed, NULL, PowerAmplifierPage_MuteButtonCustomDraw);
 800d690:	af16      	add	r7, sp, #88	@ 0x58
 800d692:	f8cd 9000 	str.w	r9, [sp]
 800d696:	23d0      	movs	r3, #208	@ 0xd0
 800d698:	22a8      	movs	r2, #168	@ 0xa8
 800d69a:	2110      	movs	r1, #16
 800d69c:	4638      	mov	r0, r7
 800d69e:	f7fc fa15 	bl	8009acc <JSB_UI_Rect>
 800d6a2:	4b2c      	ldr	r3, [pc, #176]	@ (800d754 <CreatePowerAmplifierPage+0x1b8>)
 800d6a4:	9308      	str	r3, [sp, #32]
 800d6a6:	9407      	str	r4, [sp, #28]
 800d6a8:	4b2b      	ldr	r3, [pc, #172]	@ (800d758 <CreatePowerAmplifierPage+0x1bc>)
 800d6aa:	9306      	str	r3, [sp, #24]
 800d6ac:	9505      	str	r5, [sp, #20]
 800d6ae:	9404      	str	r4, [sp, #16]
 800d6b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6b4:	9402      	str	r4, [sp, #8]
 800d6b6:	4b29      	ldr	r3, [pc, #164]	@ (800d75c <CreatePowerAmplifierPage+0x1c0>)
 800d6b8:	9301      	str	r3, [sp, #4]
 800d6ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	f7fc fa15 	bl	8009af2 <JSB_UI_CreateControl>
 800d6c8:	4601      	mov	r1, r0
 800d6ca:	4b25      	ldr	r3, [pc, #148]	@ (800d760 <CreatePowerAmplifierPage+0x1c4>)
 800d6cc:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pPowerAmplifierPage, pPowerAmplifierPage_MuteButton);
 800d6ce:	6830      	ldr	r0, [r6, #0]
 800d6d0:	f7fc fb57 	bl	8009d82 <JSB_UI_AddControlToPage>
  pPowerAmplifierPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - 100 / 2, 288, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &PowerAmplifierPage_HomeButtonPressed, NULL, NULL);
 800d6d4:	af1a      	add	r7, sp, #104	@ 0x68
 800d6d6:	f8cd 9000 	str.w	r9, [sp]
 800d6da:	2364      	movs	r3, #100	@ 0x64
 800d6dc:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800d6e0:	2146      	movs	r1, #70	@ 0x46
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	f7fc f9f2 	bl	8009acc <JSB_UI_Rect>
 800d6e8:	9408      	str	r4, [sp, #32]
 800d6ea:	9407      	str	r4, [sp, #28]
 800d6ec:	4b1d      	ldr	r3, [pc, #116]	@ (800d764 <CreatePowerAmplifierPage+0x1c8>)
 800d6ee:	9306      	str	r3, [sp, #24]
 800d6f0:	9505      	str	r5, [sp, #20]
 800d6f2:	9404      	str	r4, [sp, #16]
 800d6f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6f8:	9402      	str	r4, [sp, #8]
 800d6fa:	4b1b      	ldr	r3, [pc, #108]	@ (800d768 <CreatePowerAmplifierPage+0x1cc>)
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d706:	4628      	mov	r0, r5
 800d708:	f7fc f9f3 	bl	8009af2 <JSB_UI_CreateControl>
 800d70c:	4601      	mov	r1, r0
 800d70e:	4b17      	ldr	r3, [pc, #92]	@ (800d76c <CreatePowerAmplifierPage+0x1d0>)
 800d710:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pPowerAmplifierPage, pPowerAmplifierPage_HomeButton);
 800d712:	6830      	ldr	r0, [r6, #0]
 800d714:	f7fc fb35 	bl	8009d82 <JSB_UI_AddControlToPage>
}
 800d718:	b01f      	add	sp, #124	@ 0x7c
 800d71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d71e:	bf00      	nop
 800d720:	20017268 	.word	0x20017268
 800d724:	08013508 	.word	0x08013508
 800d728:	20017264 	.word	0x20017264
 800d72c:	0800cc05 	.word	0x0800cc05
 800d730:	200153e0 	.word	0x200153e0
 800d734:	08013518 	.word	0x08013518
 800d738:	20017260 	.word	0x20017260
 800d73c:	c2a00000 	.word	0xc2a00000
 800d740:	41a00000 	.word	0x41a00000
 800d744:	0800b881 	.word	0x0800b881
 800d748:	0800cc15 	.word	0x0800cc15
 800d74c:	08013520 	.word	0x08013520
 800d750:	2001725c 	.word	0x2001725c
 800d754:	0800cde5 	.word	0x0800cde5
 800d758:	0800cc29 	.word	0x0800cc29
 800d75c:	08013500 	.word	0x08013500
 800d760:	20017258 	.word	0x20017258
 800d764:	0800ca89 	.word	0x0800ca89
 800d768:	08013480 	.word	0x08013480
 800d76c:	20017254 	.word	0x20017254

0800d770 <CreateBluetoothOutPage>:
{
 800d770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d774:	b09a      	sub	sp, #104	@ 0x68
  UI_pBluetoothOutPage = JSB_UI_CreatePage();
 800d776:	f7fc f9a3 	bl	8009ac0 <JSB_UI_CreatePage>
 800d77a:	4e4a      	ldr	r6, [pc, #296]	@ (800d8a4 <CreateBluetoothOutPage+0x134>)
 800d77c:	6030      	str	r0, [r6, #0]
  pBluetoothOutPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, Y, 240, 32), "Bluetooth out", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800d77e:	af0a      	add	r7, sp, #40	@ 0x28
 800d780:	f04f 0820 	mov.w	r8, #32
 800d784:	f8cd 8000 	str.w	r8, [sp]
 800d788:	23f0      	movs	r3, #240	@ 0xf0
 800d78a:	2200      	movs	r2, #0
 800d78c:	4611      	mov	r1, r2
 800d78e:	4638      	mov	r0, r7
 800d790:	f7fc f99c 	bl	8009acc <JSB_UI_Rect>
 800d794:	2400      	movs	r4, #0
 800d796:	9408      	str	r4, [sp, #32]
 800d798:	9407      	str	r4, [sp, #28]
 800d79a:	9406      	str	r4, [sp, #24]
 800d79c:	2501      	movs	r5, #1
 800d79e:	9505      	str	r5, [sp, #20]
 800d7a0:	9404      	str	r4, [sp, #16]
 800d7a2:	f242 1304 	movw	r3, #8452	@ 0x2104
 800d7a6:	9303      	str	r3, [sp, #12]
 800d7a8:	9402      	str	r4, [sp, #8]
 800d7aa:	4b3f      	ldr	r3, [pc, #252]	@ (800d8a8 <CreateBluetoothOutPage+0x138>)
 800d7ac:	9301      	str	r3, [sp, #4]
 800d7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7b0:	9300      	str	r3, [sp, #0]
 800d7b2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	f7fc f99b 	bl	8009af2 <JSB_UI_CreateControl>
 800d7bc:	4601      	mov	r1, r0
 800d7be:	4b3b      	ldr	r3, [pc, #236]	@ (800d8ac <CreateBluetoothOutPage+0x13c>)
 800d7c0:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pBluetoothOutPage, pBluetoothOutPage_TitleButton);
 800d7c2:	6830      	ldr	r0, [r6, #0]
 800d7c4:	f7fc fadd 	bl	8009d82 <JSB_UI_AddControlToPage>
  pBluetoothOutPage_OffButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(2, Y, 114, 32), "Off", 0, Page_ButtonColor, NULL, 1, &BluetoothOutPage_OffButtonPressed, NULL, BluetoothOutPage_OffOnButtonCustomDraw);
 800d7c8:	af0e      	add	r7, sp, #56	@ 0x38
 800d7ca:	f8cd 8000 	str.w	r8, [sp]
 800d7ce:	2372      	movs	r3, #114	@ 0x72
 800d7d0:	2228      	movs	r2, #40	@ 0x28
 800d7d2:	2102      	movs	r1, #2
 800d7d4:	4638      	mov	r0, r7
 800d7d6:	f7fc f979 	bl	8009acc <JSB_UI_Rect>
 800d7da:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 800d8d4 <CreateBluetoothOutPage+0x164>
 800d7de:	f8cd a020 	str.w	sl, [sp, #32]
 800d7e2:	9407      	str	r4, [sp, #28]
 800d7e4:	4b32      	ldr	r3, [pc, #200]	@ (800d8b0 <CreateBluetoothOutPage+0x140>)
 800d7e6:	9306      	str	r3, [sp, #24]
 800d7e8:	9505      	str	r5, [sp, #20]
 800d7ea:	9404      	str	r4, [sp, #16]
 800d7ec:	f647 090f 	movw	r9, #30735	@ 0x780f
 800d7f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d7f4:	9402      	str	r4, [sp, #8]
 800d7f6:	4b2f      	ldr	r3, [pc, #188]	@ (800d8b4 <CreateBluetoothOutPage+0x144>)
 800d7f8:	9301      	str	r3, [sp, #4]
 800d7fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d802:	4628      	mov	r0, r5
 800d804:	f7fc f975 	bl	8009af2 <JSB_UI_CreateControl>
 800d808:	4601      	mov	r1, r0
 800d80a:	4b2b      	ldr	r3, [pc, #172]	@ (800d8b8 <CreateBluetoothOutPage+0x148>)
 800d80c:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pBluetoothOutPage, pBluetoothOutPage_OffButton);
 800d80e:	6830      	ldr	r0, [r6, #0]
 800d810:	f7fc fab7 	bl	8009d82 <JSB_UI_AddControlToPage>
  pBluetoothOutPage_OnButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(124, Y, 114, 32), "On", 0, Page_ButtonColor, NULL, 1, &BluetoothOutPage_OnButtonPressed, NULL, BluetoothOutPage_OffOnButtonCustomDraw);
 800d814:	af12      	add	r7, sp, #72	@ 0x48
 800d816:	f8cd 8000 	str.w	r8, [sp]
 800d81a:	2372      	movs	r3, #114	@ 0x72
 800d81c:	2228      	movs	r2, #40	@ 0x28
 800d81e:	217c      	movs	r1, #124	@ 0x7c
 800d820:	4638      	mov	r0, r7
 800d822:	f7fc f953 	bl	8009acc <JSB_UI_Rect>
 800d826:	f8cd a020 	str.w	sl, [sp, #32]
 800d82a:	9407      	str	r4, [sp, #28]
 800d82c:	4b23      	ldr	r3, [pc, #140]	@ (800d8bc <CreateBluetoothOutPage+0x14c>)
 800d82e:	9306      	str	r3, [sp, #24]
 800d830:	9505      	str	r5, [sp, #20]
 800d832:	9404      	str	r4, [sp, #16]
 800d834:	f8cd 900c 	str.w	r9, [sp, #12]
 800d838:	9402      	str	r4, [sp, #8]
 800d83a:	4b21      	ldr	r3, [pc, #132]	@ (800d8c0 <CreateBluetoothOutPage+0x150>)
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d846:	4628      	mov	r0, r5
 800d848:	f7fc f953 	bl	8009af2 <JSB_UI_CreateControl>
 800d84c:	4601      	mov	r1, r0
 800d84e:	4b1d      	ldr	r3, [pc, #116]	@ (800d8c4 <CreateBluetoothOutPage+0x154>)
 800d850:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pBluetoothOutPage, pBluetoothOutPage_OnButton);
 800d852:	6830      	ldr	r0, [r6, #0]
 800d854:	f7fc fa95 	bl	8009d82 <JSB_UI_AddControlToPage>
  pBluetoothOutPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - 100 / 2, 288, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &BluetoothOutPage_HomeButtonPressed, NULL, NULL);
 800d858:	af16      	add	r7, sp, #88	@ 0x58
 800d85a:	f8cd 8000 	str.w	r8, [sp]
 800d85e:	2364      	movs	r3, #100	@ 0x64
 800d860:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800d864:	2146      	movs	r1, #70	@ 0x46
 800d866:	4638      	mov	r0, r7
 800d868:	f7fc f930 	bl	8009acc <JSB_UI_Rect>
 800d86c:	9408      	str	r4, [sp, #32]
 800d86e:	9407      	str	r4, [sp, #28]
 800d870:	4b15      	ldr	r3, [pc, #84]	@ (800d8c8 <CreateBluetoothOutPage+0x158>)
 800d872:	9306      	str	r3, [sp, #24]
 800d874:	9505      	str	r5, [sp, #20]
 800d876:	9404      	str	r4, [sp, #16]
 800d878:	f8cd 900c 	str.w	r9, [sp, #12]
 800d87c:	9402      	str	r4, [sp, #8]
 800d87e:	4b13      	ldr	r3, [pc, #76]	@ (800d8cc <CreateBluetoothOutPage+0x15c>)
 800d880:	9301      	str	r3, [sp, #4]
 800d882:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d88a:	4628      	mov	r0, r5
 800d88c:	f7fc f931 	bl	8009af2 <JSB_UI_CreateControl>
 800d890:	4601      	mov	r1, r0
 800d892:	4b0f      	ldr	r3, [pc, #60]	@ (800d8d0 <CreateBluetoothOutPage+0x160>)
 800d894:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pBluetoothOutPage, pBluetoothOutPage_HomeButton);
 800d896:	6830      	ldr	r0, [r6, #0]
 800d898:	f7fc fa73 	bl	8009d82 <JSB_UI_AddControlToPage>
}
 800d89c:	b01a      	add	sp, #104	@ 0x68
 800d89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a2:	bf00      	nop
 800d8a4:	20017250 	.word	0x20017250
 800d8a8:	08013460 	.word	0x08013460
 800d8ac:	2001724c 	.word	0x2001724c
 800d8b0:	0800cc79 	.word	0x0800cc79
 800d8b4:	08012fdc 	.word	0x08012fdc
 800d8b8:	20017248 	.word	0x20017248
 800d8bc:	0800cc83 	.word	0x0800cc83
 800d8c0:	08012fd4 	.word	0x08012fd4
 800d8c4:	20017244 	.word	0x20017244
 800d8c8:	0800ca9d 	.word	0x0800ca9d
 800d8cc:	08013480 	.word	0x08013480
 800d8d0:	20017240 	.word	0x20017240
 800d8d4:	0800cdf9 	.word	0x0800cdf9

0800d8d8 <CreateWiFiPage>:
{
 800d8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8dc:	b09a      	sub	sp, #104	@ 0x68
  UI_pWiFiPage = JSB_UI_CreatePage();
 800d8de:	f7fc f8ef 	bl	8009ac0 <JSB_UI_CreatePage>
 800d8e2:	4e4a      	ldr	r6, [pc, #296]	@ (800da0c <CreateWiFiPage+0x134>)
 800d8e4:	6030      	str	r0, [r6, #0]
  pWiFiPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, Y, 240, 32), "WiFI", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800d8e6:	af0a      	add	r7, sp, #40	@ 0x28
 800d8e8:	f04f 0820 	mov.w	r8, #32
 800d8ec:	f8cd 8000 	str.w	r8, [sp]
 800d8f0:	23f0      	movs	r3, #240	@ 0xf0
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	4611      	mov	r1, r2
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	f7fc f8e8 	bl	8009acc <JSB_UI_Rect>
 800d8fc:	2400      	movs	r4, #0
 800d8fe:	9408      	str	r4, [sp, #32]
 800d900:	9407      	str	r4, [sp, #28]
 800d902:	9406      	str	r4, [sp, #24]
 800d904:	2501      	movs	r5, #1
 800d906:	9505      	str	r5, [sp, #20]
 800d908:	9404      	str	r4, [sp, #16]
 800d90a:	f242 1304 	movw	r3, #8452	@ 0x2104
 800d90e:	9303      	str	r3, [sp, #12]
 800d910:	9402      	str	r4, [sp, #8]
 800d912:	4b3f      	ldr	r3, [pc, #252]	@ (800da10 <CreateWiFiPage+0x138>)
 800d914:	9301      	str	r3, [sp, #4]
 800d916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d91e:	4628      	mov	r0, r5
 800d920:	f7fc f8e7 	bl	8009af2 <JSB_UI_CreateControl>
 800d924:	4601      	mov	r1, r0
 800d926:	4b3b      	ldr	r3, [pc, #236]	@ (800da14 <CreateWiFiPage+0x13c>)
 800d928:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pWiFiPage, pWiFiPage_TitleButton);
 800d92a:	6830      	ldr	r0, [r6, #0]
 800d92c:	f7fc fa29 	bl	8009d82 <JSB_UI_AddControlToPage>
  pWiFiPage_OffButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(2, Y, 114, 32), "Off", 0, Page_ButtonColor, NULL, 1, &WiFiPage_OffButtonPressed, NULL, WiFiPage_OffOnButtonCustomDraw);
 800d930:	af0e      	add	r7, sp, #56	@ 0x38
 800d932:	f8cd 8000 	str.w	r8, [sp]
 800d936:	2372      	movs	r3, #114	@ 0x72
 800d938:	2228      	movs	r2, #40	@ 0x28
 800d93a:	2102      	movs	r1, #2
 800d93c:	4638      	mov	r0, r7
 800d93e:	f7fc f8c5 	bl	8009acc <JSB_UI_Rect>
 800d942:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 800da3c <CreateWiFiPage+0x164>
 800d946:	f8cd a020 	str.w	sl, [sp, #32]
 800d94a:	9407      	str	r4, [sp, #28]
 800d94c:	4b32      	ldr	r3, [pc, #200]	@ (800da18 <CreateWiFiPage+0x140>)
 800d94e:	9306      	str	r3, [sp, #24]
 800d950:	9505      	str	r5, [sp, #20]
 800d952:	9404      	str	r4, [sp, #16]
 800d954:	f647 090f 	movw	r9, #30735	@ 0x780f
 800d958:	f8cd 900c 	str.w	r9, [sp, #12]
 800d95c:	9402      	str	r4, [sp, #8]
 800d95e:	4b2f      	ldr	r3, [pc, #188]	@ (800da1c <CreateWiFiPage+0x144>)
 800d960:	9301      	str	r3, [sp, #4]
 800d962:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d96a:	4628      	mov	r0, r5
 800d96c:	f7fc f8c1 	bl	8009af2 <JSB_UI_CreateControl>
 800d970:	4601      	mov	r1, r0
 800d972:	4b2b      	ldr	r3, [pc, #172]	@ (800da20 <CreateWiFiPage+0x148>)
 800d974:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pWiFiPage, pWiFiPage_OffButton);
 800d976:	6830      	ldr	r0, [r6, #0]
 800d978:	f7fc fa03 	bl	8009d82 <JSB_UI_AddControlToPage>
  pWiFiPage_OnButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(124, Y, 114, 32), "On", 0, Page_ButtonColor, NULL, 1, &WiFiPage_OnButtonPressed, NULL, WiFiPage_OffOnButtonCustomDraw);
 800d97c:	af12      	add	r7, sp, #72	@ 0x48
 800d97e:	f8cd 8000 	str.w	r8, [sp]
 800d982:	2372      	movs	r3, #114	@ 0x72
 800d984:	2228      	movs	r2, #40	@ 0x28
 800d986:	217c      	movs	r1, #124	@ 0x7c
 800d988:	4638      	mov	r0, r7
 800d98a:	f7fc f89f 	bl	8009acc <JSB_UI_Rect>
 800d98e:	f8cd a020 	str.w	sl, [sp, #32]
 800d992:	9407      	str	r4, [sp, #28]
 800d994:	4b23      	ldr	r3, [pc, #140]	@ (800da24 <CreateWiFiPage+0x14c>)
 800d996:	9306      	str	r3, [sp, #24]
 800d998:	9505      	str	r5, [sp, #20]
 800d99a:	9404      	str	r4, [sp, #16]
 800d99c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d9a0:	9402      	str	r4, [sp, #8]
 800d9a2:	4b21      	ldr	r3, [pc, #132]	@ (800da28 <CreateWiFiPage+0x150>)
 800d9a4:	9301      	str	r3, [sp, #4]
 800d9a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f7fc f89f 	bl	8009af2 <JSB_UI_CreateControl>
 800d9b4:	4601      	mov	r1, r0
 800d9b6:	4b1d      	ldr	r3, [pc, #116]	@ (800da2c <CreateWiFiPage+0x154>)
 800d9b8:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pWiFiPage, pWiFiPage_OnButton);
 800d9ba:	6830      	ldr	r0, [r6, #0]
 800d9bc:	f7fc f9e1 	bl	8009d82 <JSB_UI_AddControlToPage>
  pWiFiPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(120 - 100 / 2, 288, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &WiFiPage_HomeButtonPressed, NULL, NULL);
 800d9c0:	af16      	add	r7, sp, #88	@ 0x58
 800d9c2:	f8cd 8000 	str.w	r8, [sp]
 800d9c6:	2364      	movs	r3, #100	@ 0x64
 800d9c8:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800d9cc:	2146      	movs	r1, #70	@ 0x46
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	f7fc f87c 	bl	8009acc <JSB_UI_Rect>
 800d9d4:	9408      	str	r4, [sp, #32]
 800d9d6:	9407      	str	r4, [sp, #28]
 800d9d8:	4b15      	ldr	r3, [pc, #84]	@ (800da30 <CreateWiFiPage+0x158>)
 800d9da:	9306      	str	r3, [sp, #24]
 800d9dc:	9505      	str	r5, [sp, #20]
 800d9de:	9404      	str	r4, [sp, #16]
 800d9e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d9e4:	9402      	str	r4, [sp, #8]
 800d9e6:	4b13      	ldr	r3, [pc, #76]	@ (800da34 <CreateWiFiPage+0x15c>)
 800d9e8:	9301      	str	r3, [sp, #4]
 800d9ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	f7fc f87d 	bl	8009af2 <JSB_UI_CreateControl>
 800d9f8:	4601      	mov	r1, r0
 800d9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800da38 <CreateWiFiPage+0x160>)
 800d9fc:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pWiFiPage, pWiFiPage_HomeButton);
 800d9fe:	6830      	ldr	r0, [r6, #0]
 800da00:	f7fc f9bf 	bl	8009d82 <JSB_UI_AddControlToPage>
}
 800da04:	b01a      	add	sp, #104	@ 0x68
 800da06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0a:	bf00      	nop
 800da0c:	2001723c 	.word	0x2001723c
 800da10:	08013530 	.word	0x08013530
 800da14:	20017238 	.word	0x20017238
 800da18:	0800ccb1 	.word	0x0800ccb1
 800da1c:	08012fdc 	.word	0x08012fdc
 800da20:	20017234 	.word	0x20017234
 800da24:	0800ccbb 	.word	0x0800ccbb
 800da28:	08012fd4 	.word	0x08012fd4
 800da2c:	20017230 	.word	0x20017230
 800da30:	0800cab1 	.word	0x0800cab1
 800da34:	08013480 	.word	0x08013480
 800da38:	2001722c 	.word	0x2001722c
 800da3c:	0800ce31 	.word	0x0800ce31

0800da40 <CreateInfoPage>:
{
 800da40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da44:	b097      	sub	sp, #92	@ 0x5c
  UI_pInfoPage = JSB_UI_CreatePage();
 800da46:	f7fc f83b 	bl	8009ac0 <JSB_UI_CreatePage>
 800da4a:	4e3a      	ldr	r6, [pc, #232]	@ (800db34 <CreateInfoPage+0xf4>)
 800da4c:	6030      	str	r0, [r6, #0]
  UI_pInfoPage->ContinuousRefresh = 1;
 800da4e:	2501      	movs	r5, #1
 800da50:	f880 5044 	strb.w	r5, [r0, #68]	@ 0x44
  UI_pInfoPage->pCustomDrawHandler = &InfoPage_CustomDraw;
 800da54:	4b38      	ldr	r3, [pc, #224]	@ (800db38 <CreateInfoPage+0xf8>)
 800da56:	6483      	str	r3, [r0, #72]	@ 0x48
  pInfoPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, 0, 240, 32), "Info", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800da58:	af0a      	add	r7, sp, #40	@ 0x28
 800da5a:	f04f 0820 	mov.w	r8, #32
 800da5e:	f8cd 8000 	str.w	r8, [sp]
 800da62:	23f0      	movs	r3, #240	@ 0xf0
 800da64:	2200      	movs	r2, #0
 800da66:	4611      	mov	r1, r2
 800da68:	4638      	mov	r0, r7
 800da6a:	f7fc f82f 	bl	8009acc <JSB_UI_Rect>
 800da6e:	2400      	movs	r4, #0
 800da70:	9408      	str	r4, [sp, #32]
 800da72:	9407      	str	r4, [sp, #28]
 800da74:	9406      	str	r4, [sp, #24]
 800da76:	9505      	str	r5, [sp, #20]
 800da78:	9404      	str	r4, [sp, #16]
 800da7a:	f242 1304 	movw	r3, #8452	@ 0x2104
 800da7e:	9303      	str	r3, [sp, #12]
 800da80:	9402      	str	r4, [sp, #8]
 800da82:	4b2e      	ldr	r3, [pc, #184]	@ (800db3c <CreateInfoPage+0xfc>)
 800da84:	9301      	str	r3, [sp, #4]
 800da86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800da8e:	4628      	mov	r0, r5
 800da90:	f7fc f82f 	bl	8009af2 <JSB_UI_CreateControl>
 800da94:	4601      	mov	r1, r0
 800da96:	4b2a      	ldr	r3, [pc, #168]	@ (800db40 <CreateInfoPage+0x100>)
 800da98:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInfoPage, pInfoPage_TitleButton);
 800da9a:	6830      	ldr	r0, [r6, #0]
 800da9c:	f7fc f971 	bl	8009d82 <JSB_UI_AddControlToPage>
  pInfoPage_RadioInfoButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(30, 304, 60, 32), "Radio", 0, Page_ButtonColor, NULL, 1, &InfoPage_RadioInfoButtonPressed, NULL, NULL);
 800daa0:	af0e      	add	r7, sp, #56	@ 0x38
 800daa2:	f8cd 8000 	str.w	r8, [sp]
 800daa6:	233c      	movs	r3, #60	@ 0x3c
 800daa8:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800daac:	211e      	movs	r1, #30
 800daae:	4638      	mov	r0, r7
 800dab0:	f7fc f812 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800dab4:	9408      	str	r4, [sp, #32]
 800dab6:	9407      	str	r4, [sp, #28]
 800dab8:	4b22      	ldr	r3, [pc, #136]	@ (800db44 <CreateInfoPage+0x104>)
 800daba:	9306      	str	r3, [sp, #24]
 800dabc:	9505      	str	r5, [sp, #20]
 800dabe:	9404      	str	r4, [sp, #16]
 800dac0:	f647 090f 	movw	r9, #30735	@ 0x780f
 800dac4:	f8cd 900c 	str.w	r9, [sp, #12]
 800dac8:	9402      	str	r4, [sp, #8]
 800daca:	4b1f      	ldr	r3, [pc, #124]	@ (800db48 <CreateInfoPage+0x108>)
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dad0:	9300      	str	r3, [sp, #0]
 800dad2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800dad6:	4628      	mov	r0, r5
 800dad8:	f7fc f80b 	bl	8009af2 <JSB_UI_CreateControl>
 800dadc:	4601      	mov	r1, r0
 800dade:	4b1b      	ldr	r3, [pc, #108]	@ (800db4c <CreateInfoPage+0x10c>)
 800dae0:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInfoPage, pInfoPage_RadioInfoButton);
 800dae2:	6830      	ldr	r0, [r6, #0]
 800dae4:	f7fc f94d 	bl	8009d82 <JSB_UI_AddControlToPage>
  pInfoPage_HomeButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, 304, 100, 32), "Home", 0, Page_ButtonColor, NULL, 1, &InfoPage_HomeButtonPressed, NULL, NULL);
 800dae8:	af12      	add	r7, sp, #72	@ 0x48
 800daea:	f8cd 8000 	str.w	r8, [sp]
 800daee:	2364      	movs	r3, #100	@ 0x64
 800daf0:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800daf4:	2178      	movs	r1, #120	@ 0x78
 800daf6:	4638      	mov	r0, r7
 800daf8:	f7fb ffee 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800dafc:	9408      	str	r4, [sp, #32]
 800dafe:	9407      	str	r4, [sp, #28]
 800db00:	4b13      	ldr	r3, [pc, #76]	@ (800db50 <CreateInfoPage+0x110>)
 800db02:	9306      	str	r3, [sp, #24]
 800db04:	9505      	str	r5, [sp, #20]
 800db06:	9404      	str	r4, [sp, #16]
 800db08:	f8cd 900c 	str.w	r9, [sp, #12]
 800db0c:	9402      	str	r4, [sp, #8]
 800db0e:	4b11      	ldr	r3, [pc, #68]	@ (800db54 <CreateInfoPage+0x114>)
 800db10:	9301      	str	r3, [sp, #4]
 800db12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800db14:	9300      	str	r3, [sp, #0]
 800db16:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800db1a:	4628      	mov	r0, r5
 800db1c:	f7fb ffe9 	bl	8009af2 <JSB_UI_CreateControl>
 800db20:	4601      	mov	r1, r0
 800db22:	4b0d      	ldr	r3, [pc, #52]	@ (800db58 <CreateInfoPage+0x118>)
 800db24:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pInfoPage, pInfoPage_HomeButton);
 800db26:	6830      	ldr	r0, [r6, #0]
 800db28:	f7fc f92b 	bl	8009d82 <JSB_UI_AddControlToPage>
}
 800db2c:	b017      	add	sp, #92	@ 0x5c
 800db2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db32:	bf00      	nop
 800db34:	20017228 	.word	0x20017228
 800db38:	0800bb85 	.word	0x0800bb85
 800db3c:	08013478 	.word	0x08013478
 800db40:	20017224 	.word	0x20017224
 800db44:	0800cac5 	.word	0x0800cac5
 800db48:	08013538 	.word	0x08013538
 800db4c:	20017220 	.word	0x20017220
 800db50:	0800cad9 	.word	0x0800cad9
 800db54:	08013480 	.word	0x08013480
 800db58:	2001721c 	.word	0x2001721c

0800db5c <CreateRadioInfoPage>:
{
 800db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db60:	b092      	sub	sp, #72	@ 0x48
  UI_pRadioInfoPage = JSB_UI_CreatePage();
 800db62:	f7fb ffad 	bl	8009ac0 <JSB_UI_CreatePage>
 800db66:	4f28      	ldr	r7, [pc, #160]	@ (800dc08 <CreateRadioInfoPage+0xac>)
 800db68:	6038      	str	r0, [r7, #0]
  UI_pRadioInfoPage->ContinuousRefresh = 1;
 800db6a:	2501      	movs	r5, #1
 800db6c:	f880 5044 	strb.w	r5, [r0, #68]	@ 0x44
  UI_pRadioInfoPage->pCustomDrawHandler = &RadioInfoPage_CustomDraw;
 800db70:	4b26      	ldr	r3, [pc, #152]	@ (800dc0c <CreateRadioInfoPage+0xb0>)
 800db72:	6483      	str	r3, [r0, #72]	@ 0x48
  pRadioInfoPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, 0, 240, 32), "Radio info", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800db74:	ae0a      	add	r6, sp, #40	@ 0x28
 800db76:	f04f 0820 	mov.w	r8, #32
 800db7a:	f8cd 8000 	str.w	r8, [sp]
 800db7e:	23f0      	movs	r3, #240	@ 0xf0
 800db80:	2200      	movs	r2, #0
 800db82:	4611      	mov	r1, r2
 800db84:	4630      	mov	r0, r6
 800db86:	f7fb ffa1 	bl	8009acc <JSB_UI_Rect>
 800db8a:	2400      	movs	r4, #0
 800db8c:	9408      	str	r4, [sp, #32]
 800db8e:	9407      	str	r4, [sp, #28]
 800db90:	9406      	str	r4, [sp, #24]
 800db92:	9505      	str	r5, [sp, #20]
 800db94:	9404      	str	r4, [sp, #16]
 800db96:	f242 1304 	movw	r3, #8452	@ 0x2104
 800db9a:	9303      	str	r3, [sp, #12]
 800db9c:	9402      	str	r4, [sp, #8]
 800db9e:	4b1c      	ldr	r3, [pc, #112]	@ (800dc10 <CreateRadioInfoPage+0xb4>)
 800dba0:	9301      	str	r3, [sp, #4]
 800dba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800dbaa:	4628      	mov	r0, r5
 800dbac:	f7fb ffa1 	bl	8009af2 <JSB_UI_CreateControl>
 800dbb0:	4601      	mov	r1, r0
 800dbb2:	4b18      	ldr	r3, [pc, #96]	@ (800dc14 <CreateRadioInfoPage+0xb8>)
 800dbb4:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pRadioInfoPage, pRadioInfoPage_TitleButton);
 800dbb6:	6838      	ldr	r0, [r7, #0]
 800dbb8:	f7fc f8e3 	bl	8009d82 <JSB_UI_AddControlToPage>
  pRadioInfoPage_BackButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, 304, 100, 32), "Back", 0, Page_ButtonColor, NULL, 1, &RadioInfoPage_BackButtonPressed, NULL, NULL);
 800dbbc:	ae0e      	add	r6, sp, #56	@ 0x38
 800dbbe:	f8cd 8000 	str.w	r8, [sp]
 800dbc2:	2364      	movs	r3, #100	@ 0x64
 800dbc4:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800dbc8:	2178      	movs	r1, #120	@ 0x78
 800dbca:	4630      	mov	r0, r6
 800dbcc:	f7fb ff84 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800dbd0:	9408      	str	r4, [sp, #32]
 800dbd2:	9407      	str	r4, [sp, #28]
 800dbd4:	4b10      	ldr	r3, [pc, #64]	@ (800dc18 <CreateRadioInfoPage+0xbc>)
 800dbd6:	9306      	str	r3, [sp, #24]
 800dbd8:	9505      	str	r5, [sp, #20]
 800dbda:	9404      	str	r4, [sp, #16]
 800dbdc:	f647 030f 	movw	r3, #30735	@ 0x780f
 800dbe0:	9303      	str	r3, [sp, #12]
 800dbe2:	9402      	str	r4, [sp, #8]
 800dbe4:	4b0d      	ldr	r3, [pc, #52]	@ (800dc1c <CreateRadioInfoPage+0xc0>)
 800dbe6:	9301      	str	r3, [sp, #4]
 800dbe8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	f7fb ff7e 	bl	8009af2 <JSB_UI_CreateControl>
 800dbf6:	4601      	mov	r1, r0
 800dbf8:	4b09      	ldr	r3, [pc, #36]	@ (800dc20 <CreateRadioInfoPage+0xc4>)
 800dbfa:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pRadioInfoPage, pRadioInfoPage_BackButton);
 800dbfc:	6838      	ldr	r0, [r7, #0]
 800dbfe:	f7fc f8c0 	bl	8009d82 <JSB_UI_AddControlToPage>
}
 800dc02:	b012      	add	sp, #72	@ 0x48
 800dc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc08:	20017218 	.word	0x20017218
 800dc0c:	0800b8ad 	.word	0x0800b8ad
 800dc10:	08013540 	.word	0x08013540
 800dc14:	20017214 	.word	0x20017214
 800dc18:	0800caed 	.word	0x0800caed
 800dc1c:	0801354c 	.word	0x0801354c
 800dc20:	20017210 	.word	0x20017210

0800dc24 <CreateDebugInfoPage>:

void CreateDebugInfoPage()
{
 800dc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc28:	b092      	sub	sp, #72	@ 0x48
  UI_pDebugInfoPage = JSB_UI_CreatePage();
 800dc2a:	f7fb ff49 	bl	8009ac0 <JSB_UI_CreatePage>
 800dc2e:	4f28      	ldr	r7, [pc, #160]	@ (800dcd0 <CreateDebugInfoPage+0xac>)
 800dc30:	6038      	str	r0, [r7, #0]
  UI_pDebugInfoPage->ContinuousRefresh = 1;
 800dc32:	2501      	movs	r5, #1
 800dc34:	f880 5044 	strb.w	r5, [r0, #68]	@ 0x44

  UI_pDebugInfoPage->pCustomDrawHandler = &DebugInfoPage_CustomDraw;
 800dc38:	4b26      	ldr	r3, [pc, #152]	@ (800dcd4 <CreateDebugInfoPage+0xb0>)
 800dc3a:	6483      	str	r3, [r0, #72]	@ 0x48

  pDebugInfoPage_TitleButton = JSB_UI_CreateControl(ctButton, JSB_UI_Rect(0, 0, 240, 32), "Debug info", 0, Page_TitleColour, NULL, 1, NULL, NULL, NULL);
 800dc3c:	ae0a      	add	r6, sp, #40	@ 0x28
 800dc3e:	f04f 0820 	mov.w	r8, #32
 800dc42:	f8cd 8000 	str.w	r8, [sp]
 800dc46:	23f0      	movs	r3, #240	@ 0xf0
 800dc48:	2200      	movs	r2, #0
 800dc4a:	4611      	mov	r1, r2
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f7fb ff3d 	bl	8009acc <JSB_UI_Rect>
 800dc52:	2400      	movs	r4, #0
 800dc54:	9408      	str	r4, [sp, #32]
 800dc56:	9407      	str	r4, [sp, #28]
 800dc58:	9406      	str	r4, [sp, #24]
 800dc5a:	9505      	str	r5, [sp, #20]
 800dc5c:	9404      	str	r4, [sp, #16]
 800dc5e:	f242 1304 	movw	r3, #8452	@ 0x2104
 800dc62:	9303      	str	r3, [sp, #12]
 800dc64:	9402      	str	r4, [sp, #8]
 800dc66:	4b1c      	ldr	r3, [pc, #112]	@ (800dcd8 <CreateDebugInfoPage+0xb4>)
 800dc68:	9301      	str	r3, [sp, #4]
 800dc6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800dc72:	4628      	mov	r0, r5
 800dc74:	f7fb ff3d 	bl	8009af2 <JSB_UI_CreateControl>
 800dc78:	4601      	mov	r1, r0
 800dc7a:	4b18      	ldr	r3, [pc, #96]	@ (800dcdc <CreateDebugInfoPage+0xb8>)
 800dc7c:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pDebugInfoPage, pDebugInfoPage_TitleButton);
 800dc7e:	6838      	ldr	r0, [r7, #0]
 800dc80:	f7fc f87f 	bl	8009d82 <JSB_UI_AddControlToPage>
  //
  pDebugInfoPage_BackButton = JSB_UI_CreateControl(ctButton, JSB_UI_RectFromCentrePoint(120, 304, 100, 32), "Back", 0, Page_ButtonColor, NULL, 1, &DebugInfoPage_BackButtonPressed, NULL, NULL);
 800dc84:	ae0e      	add	r6, sp, #56	@ 0x38
 800dc86:	f8cd 8000 	str.w	r8, [sp]
 800dc8a:	2364      	movs	r3, #100	@ 0x64
 800dc8c:	f44f 7298 	mov.w	r2, #304	@ 0x130
 800dc90:	2178      	movs	r1, #120	@ 0x78
 800dc92:	4630      	mov	r0, r6
 800dc94:	f7fb ff20 	bl	8009ad8 <JSB_UI_RectFromCentrePoint>
 800dc98:	9408      	str	r4, [sp, #32]
 800dc9a:	9407      	str	r4, [sp, #28]
 800dc9c:	4b10      	ldr	r3, [pc, #64]	@ (800dce0 <CreateDebugInfoPage+0xbc>)
 800dc9e:	9306      	str	r3, [sp, #24]
 800dca0:	9505      	str	r5, [sp, #20]
 800dca2:	9404      	str	r4, [sp, #16]
 800dca4:	f647 030f 	movw	r3, #30735	@ 0x780f
 800dca8:	9303      	str	r3, [sp, #12]
 800dcaa:	9402      	str	r4, [sp, #8]
 800dcac:	4b0d      	ldr	r3, [pc, #52]	@ (800dce4 <CreateDebugInfoPage+0xc0>)
 800dcae:	9301      	str	r3, [sp, #4]
 800dcb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dcb2:	9300      	str	r3, [sp, #0]
 800dcb4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f7fb ff1a 	bl	8009af2 <JSB_UI_CreateControl>
 800dcbe:	4601      	mov	r1, r0
 800dcc0:	4b09      	ldr	r3, [pc, #36]	@ (800dce8 <CreateDebugInfoPage+0xc4>)
 800dcc2:	6018      	str	r0, [r3, #0]
  JSB_UI_AddControlToPage(UI_pDebugInfoPage, pDebugInfoPage_BackButton);
 800dcc4:	6838      	ldr	r0, [r7, #0]
 800dcc6:	f7fc f85c 	bl	8009d82 <JSB_UI_AddControlToPage>
}
 800dcca:	b012      	add	sp, #72	@ 0x48
 800dccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd0:	2001720c 	.word	0x2001720c
 800dcd4:	0800b851 	.word	0x0800b851
 800dcd8:	08013554 	.word	0x08013554
 800dcdc:	20017208 	.word	0x20017208
 800dce0:	0800cb01 	.word	0x0800cb01
 800dce4:	0801354c 	.word	0x0801354c
 800dce8:	20017204 	.word	0x20017204

0800dcec <ProcessIR>:

///////////////////////////////////////////////////////////////////////////////
// IR:

void ProcessIR()
{
 800dcec:	b510      	push	{r4, lr}
 800dcee:	b082      	sub	sp, #8
  uint8_t IR_Address, IR_Command, IR_Toggle, IR_Error;
  static uint8_t IR_PreviousToggle = -1;

  if (JSB_IR_RC5_GetIfAvailable(&IR_Address, &IR_Command, &IR_Toggle, &IR_Error))
 800dcf0:	ab01      	add	r3, sp, #4
 800dcf2:	f10d 0205 	add.w	r2, sp, #5
 800dcf6:	f10d 0106 	add.w	r1, sp, #6
 800dcfa:	f10d 0007 	add.w	r0, sp, #7
 800dcfe:	f7fb fa6b 	bl	80091d8 <JSB_IR_RC5_GetIfAvailable>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d059      	beq.n	800ddba <ProcessIR+0xce>
  {
    if (!IR_Error)
 800dd06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d155      	bne.n	800ddba <ProcessIR+0xce>
    {
      if (IR_Address == 16)
 800dd0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd12:	2b10      	cmp	r3, #16
 800dd14:	d053      	beq.n	800ddbe <ProcessIR+0xd2>
          PA_SetVolume(Clamp_float(PA_MasterVolume_dB - 1.0f, PA_MasterVolume_dB_Min, PA_MasterVolume_dB_Max));
        else if (IR_Command == 16) // Volume up.
          PA_SetVolume(Clamp_float(PA_MasterVolume_dB + 1.0f, PA_MasterVolume_dB_Min, PA_MasterVolume_dB_Max));
      }

      if (IR_Address == 20)
 800dd16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd1a:	2b14      	cmp	r3, #20
 800dd1c:	d075      	beq.n	800de0a <ProcessIR+0x11e>
          Process_SetGain(0.1f);
        else if (IR_Command == 32) // RightBar.
          Process_SetGain(Process_Gain_Default);
      }

      if (IR_Toggle != IR_PreviousToggle)
 800dd1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd22:	4bcb      	ldr	r3, [pc, #812]	@ (800e050 <ProcessIR+0x364>)
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d043      	beq.n	800ddb2 <ProcessIR+0xc6>
      {
        if ((IR_Address == 16) && (IR_Command == 13)) // 'Mute'
 800dd2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd2e:	2b10      	cmp	r3, #16
 800dd30:	f000 80bf 	beq.w	800deb2 <ProcessIR+0x1c6>
        {
          SetUserMute(!PA_UserMuted);
        }

        if ((IR_Address == 16) && (IR_Command == 12)) // 'Power'
 800dd34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd38:	2b10      	cmp	r3, #16
 800dd3a:	f000 80c7 	beq.w	800decc <ProcessIR+0x1e0>
        {
          SetPowerOn(!PowerOn);
        }

        if (IR_Address == 17)
 800dd3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd42:	2b11      	cmp	r3, #17
 800dd44:	f000 80cf 	beq.w	800dee6 <ProcessIR+0x1fa>
                SetInputChannel(InputChannel + 1);
            }
          }
        }

        if (IR_Command == 63)
 800dd48:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dd4c:	2b3f      	cmp	r3, #63	@ 0x3f
 800dd4e:	f000 80f7 	beq.w	800df40 <ProcessIR+0x254>
            SetInputChannel(icSi468x_FM);
          else if (IR_Address == 18) // '8'
            SetInputChannel(icAuxIn);
        }

        if ((IR_Address == 20) && (IR_Command == 53)) // Play
 800dd52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd56:	2b14      	cmp	r3, #20
 800dd58:	f000 8148 	beq.w	800dfec <ProcessIR+0x300>
          SetUserMute(0);

        if ((IR_Address == 20) && (IR_Command == 48)) // Pause
 800dd5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd60:	2b14      	cmp	r3, #20
 800dd62:	f000 814c 	beq.w	800dffe <ProcessIR+0x312>
          SetUserMute(!PA_UserMuted);

        if ((IR_Address == 20) && (IR_Command == 54)) // Stop
 800dd66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd6a:	2b14      	cmp	r3, #20
 800dd6c:	f000 8154 	beq.w	800e018 <ProcessIR+0x32c>
          SetUserMute(1);

        if ((IR_Address == 20) && (IR_Command == 59)) // 'BACK'
 800dd70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd74:	2b14      	cmp	r3, #20
 800dd76:	f000 8158 	beq.w	800e02a <ProcessIR+0x33e>
          SetCurrentPage(UI_pHomePage);

        if ((IR_Address == 20) && (IR_Command == 28)) // 'OPT+'
 800dd7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd7e:	2b14      	cmp	r3, #20
 800dd80:	f000 815d 	beq.w	800e03e <ProcessIR+0x352>
          PA_SetVolume(0.0f);

        if ((IR_Address == 17) && (IR_Command == 15)) // 'i' (Info)
 800dd84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd88:	2b11      	cmp	r3, #17
 800dd8a:	f000 817b 	beq.w	800e084 <ProcessIR+0x398>
          SetCurrentPage(UI_pInfoPage);

        if ((IR_Address == 16) && (IR_Command == 63)) // Speaker?
 800dd8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd92:	2b10      	cmp	r3, #16
 800dd94:	f000 8180 	beq.w	800e098 <ProcessIR+0x3ac>
          BluetoothOut_SetOffOn(!BluetoothOut_On);

        if ((IR_Address == 17) && (IR_Command == 46)) // 'TV/RADIO'
 800dd98:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800dd9c:	2c11      	cmp	r4, #17
 800dd9e:	f000 8188 	beq.w	800e0b2 <ProcessIR+0x3c6>
            IR_UseChannelButtonsToControlRadio = 1;
            Radio_ServiceToTune = sttCurrent; // Re-tune radio. Use in case the previous tune didn't work out e.g. DAB was silent.
          }
        }

        if ((IR_Address == 16) && (IR_Command == 38)) // 'SLEEP'
 800dda2:	2c10      	cmp	r4, #16
 800dda4:	f000 8195 	beq.w	800e0d2 <ProcessIR+0x3e6>
          SetPowerOn(!PowerOn);

        if ((IR_Address == 16) && (IR_Command == 59)) // 'SOURCE'
 800dda8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ddac:	2b10      	cmp	r3, #16
 800ddae:	f000 819d 	beq.w	800e0ec <ProcessIR+0x400>
        {
          IR_UseChannelButtonsToControlRadio = 0;
        }
      }

      IR_PreviousToggle = IR_Toggle;
 800ddb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ddb6:	4ba6      	ldr	r3, [pc, #664]	@ (800e050 <ProcessIR+0x364>)
 800ddb8:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800ddba:	b002      	add	sp, #8
 800ddbc:	bd10      	pop	{r4, pc}
        if (IR_Command == 17) // Volume down.
 800ddbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ddc2:	2b11      	cmp	r3, #17
 800ddc4:	d011      	beq.n	800ddea <ProcessIR+0xfe>
        else if (IR_Command == 16) // Volume up.
 800ddc6:	2b10      	cmp	r3, #16
 800ddc8:	d1a5      	bne.n	800dd16 <ProcessIR+0x2a>
          PA_SetVolume(Clamp_float(PA_MasterVolume_dB + 1.0f, PA_MasterVolume_dB_Min, PA_MasterVolume_dB_Max));
 800ddca:	4ba2      	ldr	r3, [pc, #648]	@ (800e054 <ProcessIR+0x368>)
 800ddcc:	ed93 7a00 	vldr	s14, [r3]
 800ddd0:	4aa1      	ldr	r2, [pc, #644]	@ (800e058 <ProcessIR+0x36c>)
 800ddd2:	49a2      	ldr	r1, [pc, #648]	@ (800e05c <ProcessIR+0x370>)
 800ddd4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ddd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dddc:	ee17 0a90 	vmov	r0, s15
 800dde0:	f7fa fa31 	bl	8008246 <Clamp_float>
 800dde4:	f7fe fef0 	bl	800cbc8 <PA_SetVolume>
 800dde8:	e795      	b.n	800dd16 <ProcessIR+0x2a>
          PA_SetVolume(Clamp_float(PA_MasterVolume_dB - 1.0f, PA_MasterVolume_dB_Min, PA_MasterVolume_dB_Max));
 800ddea:	4b9a      	ldr	r3, [pc, #616]	@ (800e054 <ProcessIR+0x368>)
 800ddec:	ed93 7a00 	vldr	s14, [r3]
 800ddf0:	4a99      	ldr	r2, [pc, #612]	@ (800e058 <ProcessIR+0x36c>)
 800ddf2:	499a      	ldr	r1, [pc, #616]	@ (800e05c <ProcessIR+0x370>)
 800ddf4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ddf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddfc:	ee17 0a90 	vmov	r0, s15
 800de00:	f7fa fa21 	bl	8008246 <Clamp_float>
 800de04:	f7fe fee0 	bl	800cbc8 <PA_SetVolume>
 800de08:	e785      	b.n	800dd16 <ProcessIR+0x2a>
        if (IR_Command == 50) // Left.
 800de0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de0e:	3b20      	subs	r3, #32
 800de10:	2b14      	cmp	r3, #20
 800de12:	d884      	bhi.n	800dd1e <ProcessIR+0x32>
 800de14:	a201      	add	r2, pc, #4	@ (adr r2, 800de1c <ProcessIR+0x130>)
 800de16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de1a:	bf00      	nop
 800de1c:	0800dea9 	.word	0x0800dea9
 800de20:	0800dea1 	.word	0x0800dea1
 800de24:	0800dd1f 	.word	0x0800dd1f
 800de28:	0800dd1f 	.word	0x0800dd1f
 800de2c:	0800dd1f 	.word	0x0800dd1f
 800de30:	0800dd1f 	.word	0x0800dd1f
 800de34:	0800dd1f 	.word	0x0800dd1f
 800de38:	0800dd1f 	.word	0x0800dd1f
 800de3c:	0800dd1f 	.word	0x0800dd1f
 800de40:	0800dd1f 	.word	0x0800dd1f
 800de44:	0800dd1f 	.word	0x0800dd1f
 800de48:	0800dd1f 	.word	0x0800dd1f
 800de4c:	0800dd1f 	.word	0x0800dd1f
 800de50:	0800dd1f 	.word	0x0800dd1f
 800de54:	0800dd1f 	.word	0x0800dd1f
 800de58:	0800dd1f 	.word	0x0800dd1f
 800de5c:	0800dd1f 	.word	0x0800dd1f
 800de60:	0800dd1f 	.word	0x0800dd1f
 800de64:	0800de71 	.word	0x0800de71
 800de68:	0800dd1f 	.word	0x0800dd1f
 800de6c:	0800de89 	.word	0x0800de89
          Process_SetGain(Process_Gain - 0.01f);
 800de70:	4b7b      	ldr	r3, [pc, #492]	@ (800e060 <ProcessIR+0x374>)
 800de72:	ed93 7a00 	vldr	s14, [r3]
 800de76:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 800e064 <ProcessIR+0x378>
 800de7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de7e:	ee17 0a90 	vmov	r0, s15
 800de82:	f7fe fe5b 	bl	800cb3c <Process_SetGain>
 800de86:	e74a      	b.n	800dd1e <ProcessIR+0x32>
          Process_SetGain(Process_Gain + 0.01f);
 800de88:	4b75      	ldr	r3, [pc, #468]	@ (800e060 <ProcessIR+0x374>)
 800de8a:	ed93 7a00 	vldr	s14, [r3]
 800de8e:	eddf 7a75 	vldr	s15, [pc, #468]	@ 800e064 <ProcessIR+0x378>
 800de92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de96:	ee17 0a90 	vmov	r0, s15
 800de9a:	f7fe fe4f 	bl	800cb3c <Process_SetGain>
 800de9e:	e73e      	b.n	800dd1e <ProcessIR+0x32>
          Process_SetGain(0.1f);
 800dea0:	4871      	ldr	r0, [pc, #452]	@ (800e068 <ProcessIR+0x37c>)
 800dea2:	f7fe fe4b 	bl	800cb3c <Process_SetGain>
 800dea6:	e73a      	b.n	800dd1e <ProcessIR+0x32>
          Process_SetGain(Process_Gain_Default);
 800dea8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800deac:	f7fe fe46 	bl	800cb3c <Process_SetGain>
 800deb0:	e735      	b.n	800dd1e <ProcessIR+0x32>
        if ((IR_Address == 16) && (IR_Command == 13)) // 'Mute'
 800deb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800deb6:	2b0d      	cmp	r3, #13
 800deb8:	f47f af3c 	bne.w	800dd34 <ProcessIR+0x48>
          SetUserMute(!PA_UserMuted);
 800debc:	4b6b      	ldr	r3, [pc, #428]	@ (800e06c <ProcessIR+0x380>)
 800debe:	7818      	ldrb	r0, [r3, #0]
 800dec0:	fab0 f080 	clz	r0, r0
 800dec4:	0940      	lsrs	r0, r0, #5
 800dec6:	f7fe fefd 	bl	800ccc4 <SetUserMute>
 800deca:	e733      	b.n	800dd34 <ProcessIR+0x48>
        if ((IR_Address == 16) && (IR_Command == 12)) // 'Power'
 800decc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ded0:	2b0c      	cmp	r3, #12
 800ded2:	f47f af34 	bne.w	800dd3e <ProcessIR+0x52>
          SetPowerOn(!PowerOn);
 800ded6:	4b66      	ldr	r3, [pc, #408]	@ (800e070 <ProcessIR+0x384>)
 800ded8:	7818      	ldrb	r0, [r3, #0]
 800deda:	fab0 f080 	clz	r0, r0
 800dede:	0940      	lsrs	r0, r0, #5
 800dee0:	f7fe fe18 	bl	800cb14 <SetPowerOn>
 800dee4:	e72b      	b.n	800dd3e <ProcessIR+0x52>
          if (IR_UseChannelButtonsToControlRadio)
 800dee6:	4b63      	ldr	r3, [pc, #396]	@ (800e074 <ProcessIR+0x388>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	b173      	cbz	r3, 800df0a <ProcessIR+0x21e>
            if (IR_Command == 33) // Channel down.
 800deec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800def0:	2b21      	cmp	r3, #33	@ 0x21
 800def2:	d006      	beq.n	800df02 <ProcessIR+0x216>
            else if (IR_Command == 32) // Channel up.
 800def4:	2b20      	cmp	r3, #32
 800def6:	f47f af27 	bne.w	800dd48 <ProcessIR+0x5c>
              Radio_ServiceToTune = sttNext;
 800defa:	4b5f      	ldr	r3, [pc, #380]	@ (800e078 <ProcessIR+0x38c>)
 800defc:	2203      	movs	r2, #3
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	e722      	b.n	800dd48 <ProcessIR+0x5c>
              Radio_ServiceToTune = sttPrevious;
 800df02:	4b5d      	ldr	r3, [pc, #372]	@ (800e078 <ProcessIR+0x38c>)
 800df04:	2202      	movs	r2, #2
 800df06:	701a      	strb	r2, [r3, #0]
 800df08:	e71e      	b.n	800dd48 <ProcessIR+0x5c>
            if (IR_Command == 33) // Channel down.
 800df0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800df0e:	2b21      	cmp	r3, #33	@ 0x21
 800df10:	d00c      	beq.n	800df2c <ProcessIR+0x240>
            else if (IR_Command == 32) // Channel up.
 800df12:	2b20      	cmp	r3, #32
 800df14:	f47f af18 	bne.w	800dd48 <ProcessIR+0x5c>
              if (InputChannel < icMax)
 800df18:	4b58      	ldr	r3, [pc, #352]	@ (800e07c <ProcessIR+0x390>)
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	2b07      	cmp	r3, #7
 800df1e:	f63f af13 	bhi.w	800dd48 <ProcessIR+0x5c>
                SetInputChannel(InputChannel + 1);
 800df22:	3301      	adds	r3, #1
 800df24:	b2d8      	uxtb	r0, r3
 800df26:	f7fd fc05 	bl	800b734 <SetInputChannel>
 800df2a:	e70d      	b.n	800dd48 <ProcessIR+0x5c>
              if (InputChannel > icNone)
 800df2c:	4b53      	ldr	r3, [pc, #332]	@ (800e07c <ProcessIR+0x390>)
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	f43f af09 	beq.w	800dd48 <ProcessIR+0x5c>
                SetInputChannel(InputChannel - 1);
 800df36:	3b01      	subs	r3, #1
 800df38:	b2d8      	uxtb	r0, r3
 800df3a:	f7fd fbfb 	bl	800b734 <SetInputChannel>
 800df3e:	e703      	b.n	800dd48 <ProcessIR+0x5c>
          if (IR_Address == 4) // '0'
 800df40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800df44:	2b16      	cmp	r3, #22
 800df46:	f63f af04 	bhi.w	800dd52 <ProcessIR+0x66>
 800df4a:	a201      	add	r2, pc, #4	@ (adr r2, 800df50 <ProcessIR+0x264>)
 800df4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df50:	0800dfd5 	.word	0x0800dfd5
 800df54:	0800dd53 	.word	0x0800dd53
 800df58:	0800dd53 	.word	0x0800dd53
 800df5c:	0800dd53 	.word	0x0800dd53
 800df60:	0800dfad 	.word	0x0800dfad
 800df64:	0800dfcd 	.word	0x0800dfcd
 800df68:	0800dd53 	.word	0x0800dd53
 800df6c:	0800dd53 	.word	0x0800dd53
 800df70:	0800dd53 	.word	0x0800dd53
 800df74:	0800dd53 	.word	0x0800dd53
 800df78:	0800dd53 	.word	0x0800dd53
 800df7c:	0800dd53 	.word	0x0800dd53
 800df80:	0800dfbd 	.word	0x0800dfbd
 800df84:	0800dd53 	.word	0x0800dd53
 800df88:	0800dd53 	.word	0x0800dd53
 800df8c:	0800dd53 	.word	0x0800dd53
 800df90:	0800dd53 	.word	0x0800dd53
 800df94:	0800dfb5 	.word	0x0800dfb5
 800df98:	0800dfe5 	.word	0x0800dfe5
 800df9c:	0800dd53 	.word	0x0800dd53
 800dfa0:	0800dfc5 	.word	0x0800dfc5
 800dfa4:	0800dd53 	.word	0x0800dd53
 800dfa8:	0800dfdd 	.word	0x0800dfdd
            SetInputChannel(icNone);
 800dfac:	2000      	movs	r0, #0
 800dfae:	f7fd fbc1 	bl	800b734 <SetInputChannel>
 800dfb2:	e6ce      	b.n	800dd52 <ProcessIR+0x66>
            SetInputChannel(icSPDIF0);
 800dfb4:	2001      	movs	r0, #1
 800dfb6:	f7fd fbbd 	bl	800b734 <SetInputChannel>
 800dfba:	e6ca      	b.n	800dd52 <ProcessIR+0x66>
            SetInputChannel(icSPDIF1);
 800dfbc:	2002      	movs	r0, #2
 800dfbe:	f7fd fbb9 	bl	800b734 <SetInputChannel>
 800dfc2:	e6c6      	b.n	800dd52 <ProcessIR+0x66>
            SetInputChannel(icSPDIF2);
 800dfc4:	2003      	movs	r0, #3
 800dfc6:	f7fd fbb5 	bl	800b734 <SetInputChannel>
 800dfca:	e6c2      	b.n	800dd52 <ProcessIR+0x66>
            SetInputChannel(icSPDIF3);
 800dfcc:	2004      	movs	r0, #4
 800dfce:	f7fd fbb1 	bl	800b734 <SetInputChannel>
 800dfd2:	e6be      	b.n	800dd52 <ProcessIR+0x66>
            SetInputChannel(icSi468x_DAB);
 800dfd4:	2005      	movs	r0, #5
 800dfd6:	f7fd fbad 	bl	800b734 <SetInputChannel>
 800dfda:	e6ba      	b.n	800dd52 <ProcessIR+0x66>
            SetInputChannel(icSi468x_FM);
 800dfdc:	2006      	movs	r0, #6
 800dfde:	f7fd fba9 	bl	800b734 <SetInputChannel>
 800dfe2:	e6b6      	b.n	800dd52 <ProcessIR+0x66>
            SetInputChannel(icAuxIn);
 800dfe4:	2008      	movs	r0, #8
 800dfe6:	f7fd fba5 	bl	800b734 <SetInputChannel>
 800dfea:	e6b2      	b.n	800dd52 <ProcessIR+0x66>
        if ((IR_Address == 20) && (IR_Command == 53)) // Play
 800dfec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dff0:	2b35      	cmp	r3, #53	@ 0x35
 800dff2:	f47f aeb3 	bne.w	800dd5c <ProcessIR+0x70>
          SetUserMute(0);
 800dff6:	2000      	movs	r0, #0
 800dff8:	f7fe fe64 	bl	800ccc4 <SetUserMute>
 800dffc:	e6ae      	b.n	800dd5c <ProcessIR+0x70>
        if ((IR_Address == 20) && (IR_Command == 48)) // Pause
 800dffe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e002:	2b30      	cmp	r3, #48	@ 0x30
 800e004:	f47f aeaf 	bne.w	800dd66 <ProcessIR+0x7a>
          SetUserMute(!PA_UserMuted);
 800e008:	4b18      	ldr	r3, [pc, #96]	@ (800e06c <ProcessIR+0x380>)
 800e00a:	7818      	ldrb	r0, [r3, #0]
 800e00c:	fab0 f080 	clz	r0, r0
 800e010:	0940      	lsrs	r0, r0, #5
 800e012:	f7fe fe57 	bl	800ccc4 <SetUserMute>
 800e016:	e6a6      	b.n	800dd66 <ProcessIR+0x7a>
        if ((IR_Address == 20) && (IR_Command == 54)) // Stop
 800e018:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e01c:	2b36      	cmp	r3, #54	@ 0x36
 800e01e:	f47f aea7 	bne.w	800dd70 <ProcessIR+0x84>
          SetUserMute(1);
 800e022:	2001      	movs	r0, #1
 800e024:	f7fe fe4e 	bl	800ccc4 <SetUserMute>
 800e028:	e6a2      	b.n	800dd70 <ProcessIR+0x84>
        if ((IR_Address == 20) && (IR_Command == 59)) // 'BACK'
 800e02a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e02e:	2b3b      	cmp	r3, #59	@ 0x3b
 800e030:	f47f aea3 	bne.w	800dd7a <ProcessIR+0x8e>
          SetCurrentPage(UI_pHomePage);
 800e034:	4b12      	ldr	r3, [pc, #72]	@ (800e080 <ProcessIR+0x394>)
 800e036:	6818      	ldr	r0, [r3, #0]
 800e038:	f7fe fccc 	bl	800c9d4 <SetCurrentPage>
 800e03c:	e69d      	b.n	800dd7a <ProcessIR+0x8e>
        if ((IR_Address == 20) && (IR_Command == 28)) // 'OPT+'
 800e03e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e042:	2b1c      	cmp	r3, #28
 800e044:	f47f ae9e 	bne.w	800dd84 <ProcessIR+0x98>
          PA_SetVolume(0.0f);
 800e048:	2000      	movs	r0, #0
 800e04a:	f7fe fdbd 	bl	800cbc8 <PA_SetVolume>
 800e04e:	e699      	b.n	800dd84 <ProcessIR+0x98>
 800e050:	200003f4 	.word	0x200003f4
 800e054:	200153e0 	.word	0x200153e0
 800e058:	41a00000 	.word	0x41a00000
 800e05c:	c2a00000 	.word	0xc2a00000
 800e060:	200003f8 	.word	0x200003f8
 800e064:	3c23d70a 	.word	0x3c23d70a
 800e068:	3dcccccd 	.word	0x3dcccccd
 800e06c:	200153dc 	.word	0x200153dc
 800e070:	20017200 	.word	0x20017200
 800e074:	20017201 	.word	0x20017201
 800e078:	200153c0 	.word	0x200153c0
 800e07c:	20017203 	.word	0x20017203
 800e080:	200172cc 	.word	0x200172cc
        if ((IR_Address == 17) && (IR_Command == 15)) // 'i' (Info)
 800e084:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e088:	2b0f      	cmp	r3, #15
 800e08a:	f47f ae80 	bne.w	800dd8e <ProcessIR+0xa2>
          SetCurrentPage(UI_pInfoPage);
 800e08e:	4b1c      	ldr	r3, [pc, #112]	@ (800e100 <ProcessIR+0x414>)
 800e090:	6818      	ldr	r0, [r3, #0]
 800e092:	f7fe fc9f 	bl	800c9d4 <SetCurrentPage>
 800e096:	e67a      	b.n	800dd8e <ProcessIR+0xa2>
        if ((IR_Address == 16) && (IR_Command == 63)) // Speaker?
 800e098:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e09c:	2b3f      	cmp	r3, #63	@ 0x3f
 800e09e:	f47f ae7b 	bne.w	800dd98 <ProcessIR+0xac>
          BluetoothOut_SetOffOn(!BluetoothOut_On);
 800e0a2:	4b18      	ldr	r3, [pc, #96]	@ (800e104 <ProcessIR+0x418>)
 800e0a4:	7818      	ldrb	r0, [r3, #0]
 800e0a6:	fab0 f080 	clz	r0, r0
 800e0aa:	0940      	lsrs	r0, r0, #5
 800e0ac:	f7fe fdce 	bl	800cc4c <BluetoothOut_SetOffOn>
 800e0b0:	e672      	b.n	800dd98 <ProcessIR+0xac>
        if ((IR_Address == 17) && (IR_Command == 46)) // 'TV/RADIO'
 800e0b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e0b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0b8:	f47f ae73 	bne.w	800dda2 <ProcessIR+0xb6>
          if (InputChannelIsRadio())
 800e0bc:	f7fd fb6a 	bl	800b794 <InputChannelIsRadio>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	f43f ae6e 	beq.w	800dda2 <ProcessIR+0xb6>
            IR_UseChannelButtonsToControlRadio = 1;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	4a0f      	ldr	r2, [pc, #60]	@ (800e108 <ProcessIR+0x41c>)
 800e0ca:	7013      	strb	r3, [r2, #0]
            Radio_ServiceToTune = sttCurrent; // Re-tune radio. Use in case the previous tune didn't work out e.g. DAB was silent.
 800e0cc:	4a0f      	ldr	r2, [pc, #60]	@ (800e10c <ProcessIR+0x420>)
 800e0ce:	7013      	strb	r3, [r2, #0]
 800e0d0:	e667      	b.n	800dda2 <ProcessIR+0xb6>
        if ((IR_Address == 16) && (IR_Command == 38)) // 'SLEEP'
 800e0d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e0d6:	2b26      	cmp	r3, #38	@ 0x26
 800e0d8:	f47f ae66 	bne.w	800dda8 <ProcessIR+0xbc>
          SetPowerOn(!PowerOn);
 800e0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800e110 <ProcessIR+0x424>)
 800e0de:	7818      	ldrb	r0, [r3, #0]
 800e0e0:	fab0 f080 	clz	r0, r0
 800e0e4:	0940      	lsrs	r0, r0, #5
 800e0e6:	f7fe fd15 	bl	800cb14 <SetPowerOn>
 800e0ea:	e65d      	b.n	800dda8 <ProcessIR+0xbc>
        if ((IR_Address == 16) && (IR_Command == 59)) // 'SOURCE'
 800e0ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e0f0:	2b3b      	cmp	r3, #59	@ 0x3b
 800e0f2:	f47f ae5e 	bne.w	800ddb2 <ProcessIR+0xc6>
          IR_UseChannelButtonsToControlRadio = 0;
 800e0f6:	4b04      	ldr	r3, [pc, #16]	@ (800e108 <ProcessIR+0x41c>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	701a      	strb	r2, [r3, #0]
 800e0fc:	e659      	b.n	800ddb2 <ProcessIR+0xc6>
 800e0fe:	bf00      	nop
 800e100:	20017228 	.word	0x20017228
 800e104:	200153c5 	.word	0x200153c5
 800e108:	20017201 	.word	0x20017201
 800e10c:	200153c0 	.word	0x200153c0
 800e110:	20017200 	.word	0x20017200

0800e114 <Go>:

///////////////////////////////////////////////////////////////////////////////

void Go()
{
 800e114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e118:	ed2d 8b02 	vpush	{d8}
 800e11c:	b085      	sub	sp, #20
  uint8_t I2SInput_Started = 0;
  uint8_t I2SInput_StopRequired = 0;
  uint8_t BluetoothOut_StopRequired = 0;
  uint8_t UserButtonPressed = 0;

  PowerOn = 1;
 800e11e:	2401      	movs	r4, #1
 800e120:	4ba2      	ldr	r3, [pc, #648]	@ (800e3ac <Go+0x298>)
 800e122:	701c      	strb	r4, [r3, #0]

  pGenSPI_Begin = &GenSPI_Begin;
 800e124:	4ba2      	ldr	r3, [pc, #648]	@ (800e3b0 <Go+0x29c>)
 800e126:	4aa3      	ldr	r2, [pc, #652]	@ (800e3b4 <Go+0x2a0>)
 800e128:	601a      	str	r2, [r3, #0]
  pGenSPI_End = &GenSPI_End;
 800e12a:	4ba3      	ldr	r3, [pc, #652]	@ (800e3b8 <Go+0x2a4>)
 800e12c:	4aa3      	ldr	r2, [pc, #652]	@ (800e3bc <Go+0x2a8>)
 800e12e:	601a      	str	r2, [r3, #0]

  JSB_UI_InitializeDisplay();
 800e130:	f7fb fe3e 	bl	8009db0 <JSB_UI_InitializeDisplay>
  LCD_BacklightOn(1);
 800e134:	4620      	mov	r0, r4
 800e136:	f7fc f95d 	bl	800a3f4 <LCD_BacklightOn>
  //
  JSB_IR_RC5_Initialize(&htim3);
 800e13a:	48a1      	ldr	r0, [pc, #644]	@ (800e3c0 <Go+0x2ac>)
 800e13c:	f7fa fffc 	bl	8009138 <JSB_IR_RC5_Initialize>
  //
  ADC_Initialize();
 800e140:	f7fc fa3a 	bl	800a5b8 <ADC_Initialize>
  ADC_SetGain(10.0f); // Match AR1010 output level (set to maximum) to Si4684 FM output level.
 800e144:	489f      	ldr	r0, [pc, #636]	@ (800e3c4 <Go+0x2b0>)
 800e146:	f7fc fa07 	bl	800a558 <ADC_SetGain>
  //
  DAC_Initialize();
 800e14a:	f7fc fa5f 	bl	800a60c <DAC_Initialize>
  //
  Si4684_Initialize(Si468x_MODE_None);
 800e14e:	2000      	movs	r0, #0
 800e150:	f7fe fbe2 	bl	800c918 <Si4684_Initialize>
  Radio_ServiceToTune = sttNone;
 800e154:	2700      	movs	r7, #0
 800e156:	4b9c      	ldr	r3, [pc, #624]	@ (800e3c8 <Go+0x2b4>)
 800e158:	701f      	strb	r7, [r3, #0]
  //
  AR1010_init();
 800e15a:	f7f9 ff63 	bl	8008024 <AR1010_init>
  AR1010_auto_tune(101.7, 1); // JSB: Was 96.4 (for Guildford). For Sheffield: 88.6 for Radio Sheffield. 92.1 for Radio 3. 101.7 for Classic FM, 97.4 for Hallam FM.
 800e15e:	4621      	mov	r1, r4
 800e160:	489a      	ldr	r0, [pc, #616]	@ (800e3cc <Go+0x2b8>)
 800e162:	f7f9 ff91 	bl	8008088 <AR1010_auto_tune>
  AR1010_set_volume(18);
 800e166:	2012      	movs	r0, #18
 800e168:	f7fa f814 	bl	8008194 <AR1010_set_volume>
  //
  PA_Initialize(0);
 800e16c:	4638      	mov	r0, r7
 800e16e:	f7fc fb19 	bl	800a7a4 <PA_Initialize>
  // PA_Initialize(1); // Headphones.

  InternalMute(0);
 800e172:	4638      	mov	r0, r7
 800e174:	f7fe fb0e 	bl	800c794 <InternalMute>

  CreateHomePage();
 800e178:	f7fe fe76 	bl	800ce68 <CreateHomePage>
  CreateInputPage();
 800e17c:	f7fe ffbe 	bl	800d0fc <CreateInputPage>
  CreateProcessPage();
 800e180:	f7ff f930 	bl	800d3e4 <CreateProcessPage>
  CreatePowerAmplifierPage();
 800e184:	f7ff fa0a 	bl	800d59c <CreatePowerAmplifierPage>
  CreateInfoPage();
 800e188:	f7ff fc5a 	bl	800da40 <CreateInfoPage>
  CreateRadioInfoPage();
 800e18c:	f7ff fce6 	bl	800db5c <CreateRadioInfoPage>
  CreateDebugInfoPage();
 800e190:	f7ff fd48 	bl	800dc24 <CreateDebugInfoPage>
  CreateBluetoothOutPage();
 800e194:	f7ff faec 	bl	800d770 <CreateBluetoothOutPage>
  CreateWiFiPage();
 800e198:	f7ff fb9e 	bl	800d8d8 <CreateWiFiPage>

  SetCurrentPage(UI_pHomePage);
 800e19c:	4b8c      	ldr	r3, [pc, #560]	@ (800e3d0 <Go+0x2bc>)
 800e19e:	6818      	ldr	r0, [r3, #0]
 800e1a0:	f7fe fc18 	bl	800c9d4 <SetCurrentPage>
  uint8_t UserButtonPressed = 0;
 800e1a4:	46b8      	mov	r8, r7
  uint8_t I2SInput_Started = 0;
 800e1a6:	463e      	mov	r6, r7
  uint8_t SPDIFRX_Started = 0;
 800e1a8:	463d      	mov	r5, r7
 800e1aa:	e127      	b.n	800e3fc <Go+0x2e8>
            si468x_FM_tune(92.1); // Hardwired!
            //!!! JSB_si468x_set_mute(0); // Un-mute after station is tuned.
            break;

          case icSi468x_DAB:
            DAB_TuneService(Radio_ServiceToTune, 1);
 800e1ac:	2101      	movs	r1, #1
 800e1ae:	f7fe fa1b 	bl	800c5e8 <DAB_TuneService>
            //!!! if (DAB_TuneService(Radio_ServiceToTune, 1))
              //!!! JSB_si468x_set_mute(0); // Un-mute after station is tuned.
            break;
 800e1b2:	e131      	b.n	800e418 <Go+0x304>
      PageChanged = 1;

      switch(InputChannel)
      {
        case icAR1010_FM:
          ADC_SelectSource(ADC_Source_AR1010);
 800e1b4:	2001      	movs	r0, #1
 800e1b6:	f7fc f9bc 	bl	800a532 <ADC_SelectSource>

        default:
          break;
      }

      SetLED(LED_Blue, InputChannel == icAuxIn); // Just for fun.
 800e1ba:	4b86      	ldr	r3, [pc, #536]	@ (800e3d4 <Go+0x2c0>)
 800e1bc:	7819      	ldrb	r1, [r3, #0]
 800e1be:	2908      	cmp	r1, #8
 800e1c0:	bf14      	ite	ne
 800e1c2:	2100      	movne	r1, #0
 800e1c4:	2101      	moveq	r1, #1
 800e1c6:	2003      	movs	r0, #3
 800e1c8:	f7fc f920 	bl	800a40c <SetLED>
      SPDIFRX_StopRequired = 1;
 800e1cc:	2401      	movs	r4, #1
    }

    if (SPDIFRX_Started)
 800e1ce:	2d00      	cmp	r5, #0
 800e1d0:	d141      	bne.n	800e256 <Go+0x142>
 800e1d2:	46a1      	mov	r9, r4
        OutputSampleRate = 0; // Force DAC to be reconfigured so that DMAs are also reconfigured when coming from SPDIF.
        SPDIFRX_Started = 0;
      }
    }

    if (I2SInput_Started)
 800e1d4:	b10e      	cbz	r6, 800e1da <Go+0xc6>
    {
      if (I2SInput_StopRequired)
 800e1d6:	2c00      	cmp	r4, #0
 800e1d8:	d14d      	bne.n	800e276 <Go+0x162>
        OutputSampleRate = 0; // Force DAC to be reconfigured so that DMAs are also reconfigured when coming from SPDIF.
        I2SInput_Started = 0;
      }
    }

    if (BluetoothOut_Started)
 800e1da:	4b7f      	ldr	r3, [pc, #508]	@ (800e3d8 <Go+0x2c4>)
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	b113      	cbz	r3, 800e1e6 <Go+0xd2>
    {
      if (BluetoothOut_StopRequired)
 800e1e0:	f1b9 0f00 	cmp.w	r9, #0
 800e1e4:	d14d      	bne.n	800e282 <Go+0x16e>

    SPDIFRX_StopRequired = 0;
    I2SInput_StopRequired = 0;
    BluetoothOut_StopRequired = 0;

    if (InputChannelIsSPDIF())
 800e1e6:	f7fd fabd 	bl	800b764 <InputChannelIsSPDIF>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d067      	beq.n	800e2be <Go+0x1aa>
    {
      if (!SPDIFRX_Started)
 800e1ee:	2d00      	cmp	r5, #0
 800e1f0:	d04d      	beq.n	800e28e <Go+0x17a>
            break;
        }
      }
    }

    if (BluetoothOut_On)
 800e1f2:	4b7a      	ldr	r3, [pc, #488]	@ (800e3dc <Go+0x2c8>)
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	b123      	cbz	r3, 800e202 <Go+0xee>
    {
      if (!BluetoothOut_Started)
 800e1f8:	4b77      	ldr	r3, [pc, #476]	@ (800e3d8 <Go+0x2c4>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f000 8098 	beq.w	800e332 <Go+0x21e>
        if (BluetoothOut_Start())
          BluetoothOut_Started = 1;
      }
    }

    if (PageChanged || (pCurrentPage->ContinuousRefresh))
 800e202:	4b77      	ldr	r3, [pc, #476]	@ (800e3e0 <Go+0x2cc>)
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	b923      	cbnz	r3, 800e212 <Go+0xfe>
 800e208:	4b76      	ldr	r3, [pc, #472]	@ (800e3e4 <Go+0x2d0>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e210:	b133      	cbz	r3, 800e220 <Go+0x10c>
    {
      PageChanged = 0;
 800e212:	4b73      	ldr	r3, [pc, #460]	@ (800e3e0 <Go+0x2cc>)
 800e214:	2200      	movs	r2, #0
 800e216:	701a      	strb	r2, [r3, #0]

      JSB_UI_DrawPage(pCurrentPage);
 800e218:	4b72      	ldr	r3, [pc, #456]	@ (800e3e4 <Go+0x2d0>)
 800e21a:	6818      	ldr	r0, [r3, #0]
 800e21c:	f7fb fdde 	bl	8009ddc <JSB_UI_DrawPage>
    }

    LCD_BacklightOn(PowerOn); // Do this after updating the page in case it was changed whilst the display was off.
 800e220:	4b62      	ldr	r3, [pc, #392]	@ (800e3ac <Go+0x298>)
 800e222:	7818      	ldrb	r0, [r3, #0]
 800e224:	f7fc f8e6 	bl	800a3f4 <LCD_BacklightOn>

    if (XPT2046_Sample(&Touch_RawX, &Touch_RawY, &Touch_RawZ))
 800e228:	f10d 020a 	add.w	r2, sp, #10
 800e22c:	a903      	add	r1, sp, #12
 800e22e:	f10d 000e 	add.w	r0, sp, #14
 800e232:	f7fb fe1f 	bl	8009e74 <XPT2046_Sample>
 800e236:	4604      	mov	r4, r0
 800e238:	2800      	cmp	r0, #0
 800e23a:	f000 80a0 	beq.w	800e37e <Go+0x26a>
    {
      if (!PowerOn)
 800e23e:	4b5b      	ldr	r3, [pc, #364]	@ (800e3ac <Go+0x298>)
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d17e      	bne.n	800e344 <Go+0x230>
      {
        if (!SomethingPressed)
 800e246:	2f00      	cmp	r7, #0
 800e248:	f040 809a 	bne.w	800e380 <Go+0x26c>
        {
          SetPowerOn(1);
 800e24c:	2001      	movs	r0, #1
 800e24e:	f7fe fc61 	bl	800cb14 <SetPowerOn>
          SomethingPressed = 1;
 800e252:	2701      	movs	r7, #1
 800e254:	e094      	b.n	800e380 <Go+0x26c>
      if (SPDIFRX_HasReceiveErrorOccurred())
 800e256:	f7fb fb93 	bl	8009980 <SPDIFRX_HasReceiveErrorOccurred>
 800e25a:	b938      	cbnz	r0, 800e26c <Go+0x158>
      if (SPDIFRX_StopRequired)
 800e25c:	b14c      	cbz	r4, 800e272 <Go+0x15e>
 800e25e:	46a1      	mov	r9, r4
        SPDIFRX_Stop();
 800e260:	f7fb fad8 	bl	8009814 <SPDIFRX_Stop>
        OutputSampleRate = 0; // Force DAC to be reconfigured so that DMAs are also reconfigured when coming from SPDIF.
 800e264:	2500      	movs	r5, #0
 800e266:	4b60      	ldr	r3, [pc, #384]	@ (800e3e8 <Go+0x2d4>)
 800e268:	601d      	str	r5, [r3, #0]
        SPDIFRX_Started = 0;
 800e26a:	e7b3      	b.n	800e1d4 <Go+0xc0>
        BluetoothOut_StopRequired = 1; // In case the sample rate has changed.
 800e26c:	f04f 0901 	mov.w	r9, #1
 800e270:	e7f6      	b.n	800e260 <Go+0x14c>
 800e272:	46a1      	mov	r9, r4
 800e274:	e7ae      	b.n	800e1d4 <Go+0xc0>
        I2SInput_Stop();
 800e276:	f7fe fa2f 	bl	800c6d8 <I2SInput_Stop>
        OutputSampleRate = 0; // Force DAC to be reconfigured so that DMAs are also reconfigured when coming from SPDIF.
 800e27a:	2600      	movs	r6, #0
 800e27c:	4b5a      	ldr	r3, [pc, #360]	@ (800e3e8 <Go+0x2d4>)
 800e27e:	601e      	str	r6, [r3, #0]
        I2SInput_Started = 0;
 800e280:	e7ab      	b.n	800e1da <Go+0xc6>
        BluetoothOut_Stop();
 800e282:	f7fe f827 	bl	800c2d4 <BluetoothOut_Stop>
        BluetoothOut_Started = 0;
 800e286:	4b54      	ldr	r3, [pc, #336]	@ (800e3d8 <Go+0x2c4>)
 800e288:	2200      	movs	r2, #0
 800e28a:	701a      	strb	r2, [r3, #0]
 800e28c:	e7ab      	b.n	800e1e6 <Go+0xd2>
        I2SBuffers_NumSamples = SPDIFRX_Buffer_NumSamples;
 800e28e:	4b57      	ldr	r3, [pc, #348]	@ (800e3ec <Go+0x2d8>)
 800e290:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e294:	601a      	str	r2, [r3, #0]
        SPDIFRX_Started = SPDIFRX_Start(hsai_BlockA2.Init.AudioFrequency, GetSPDIFInputChannel(InputChannel), 0, 0);
 800e296:	4b56      	ldr	r3, [pc, #344]	@ (800e3f0 <Go+0x2dc>)
 800e298:	ed93 8a07 	vldr	s16, [r3, #28]
 800e29c:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800e2a0:	4b4c      	ldr	r3, [pc, #304]	@ (800e3d4 <Go+0x2c0>)
 800e2a2:	7818      	ldrb	r0, [r3, #0]
 800e2a4:	f7fd fa5a 	bl	800b75c <GetSPDIFInputChannel>
 800e2a8:	4601      	mov	r1, r0
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	ee18 0a10 	vmov	r0, s16
 800e2b2:	f7fb fad1 	bl	8009858 <SPDIFRX_Start>
 800e2b6:	4605      	mov	r5, r0
        PA_ClearErrorStatus();
 800e2b8:	f7fc fa3b 	bl	800a732 <PA_ClearErrorStatus>
 800e2bc:	e799      	b.n	800e1f2 <Go+0xde>
    else if (InputChannelIsI2S())
 800e2be:	f7fd fa5d 	bl	800b77c <InputChannelIsI2S>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d095      	beq.n	800e1f2 <Go+0xde>
      if (!I2SInput_Started)
 800e2c6:	2e00      	cmp	r6, #0
 800e2c8:	d193      	bne.n	800e1f2 <Go+0xde>
        if (BluetoothOut_On)
 800e2ca:	4b44      	ldr	r3, [pc, #272]	@ (800e3dc <Go+0x2c8>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	b1bb      	cbz	r3, 800e300 <Go+0x1ec>
          SetOutputSampleRate_48000(I2SBuffers_NumSamples_WhenBluetoothIsEnabled); // Currently, the ESP32 requires large sample packets so increase sample buffer size.
 800e2d0:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800e2d4:	f7fe faf5 	bl	800c8c2 <SetOutputSampleRate_48000>
        ClearOutputBuffer();
 800e2d8:	f7fe f9e2 	bl	800c6a0 <ClearOutputBuffer>
        InternalMute(0); // 18/6/2024: In case SPDIF left InternalMuteActive on e.g. if input data stopped.
 800e2dc:	2000      	movs	r0, #0
 800e2de:	f7fe fa59 	bl	800c794 <InternalMute>
        switch(InputChannel)
 800e2e2:	4b3c      	ldr	r3, [pc, #240]	@ (800e3d4 <Go+0x2c0>)
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2b06      	cmp	r3, #6
 800e2e8:	d019      	beq.n	800e31e <Go+0x20a>
 800e2ea:	d80f      	bhi.n	800e30c <Go+0x1f8>
 800e2ec:	2b05      	cmp	r3, #5
 800e2ee:	d10b      	bne.n	800e308 <Go+0x1f4>
            Si4684_RequireMode(Si468x_MODE_DAB);
 800e2f0:	2002      	movs	r0, #2
 800e2f2:	f7fe fb65 	bl	800c9c0 <Si4684_RequireMode>
            I2S_SelectSource(I2S_Source_Si4684);
 800e2f6:	2002      	movs	r0, #2
 800e2f8:	f7fc f8d2 	bl	800a4a0 <I2S_SelectSource>
        I2SInput_Started = 1;
 800e2fc:	2601      	movs	r6, #1
            break;
 800e2fe:	e778      	b.n	800e1f2 <Go+0xde>
          SetOutputSampleRate_48000(I2SBuffers_NumSamples_WhenBluetoothIsNotEnabled);
 800e300:	2020      	movs	r0, #32
 800e302:	f7fe fade 	bl	800c8c2 <SetOutputSampleRate_48000>
 800e306:	e7e7      	b.n	800e2d8 <Go+0x1c4>
        switch(InputChannel)
 800e308:	2601      	movs	r6, #1
 800e30a:	e772      	b.n	800e1f2 <Go+0xde>
 800e30c:	3b07      	subs	r3, #7
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b01      	cmp	r3, #1
 800e312:	d80c      	bhi.n	800e32e <Go+0x21a>
            I2S_SelectSource(I2S_Source_ADC);
 800e314:	2003      	movs	r0, #3
 800e316:	f7fc f8c3 	bl	800a4a0 <I2S_SelectSource>
        I2SInput_Started = 1;
 800e31a:	2601      	movs	r6, #1
            break;
 800e31c:	e769      	b.n	800e1f2 <Go+0xde>
            Si4684_RequireMode(Si468x_MODE_FM);
 800e31e:	2001      	movs	r0, #1
 800e320:	f7fe fb4e 	bl	800c9c0 <Si4684_RequireMode>
            I2S_SelectSource(I2S_Source_Si4684);
 800e324:	2002      	movs	r0, #2
 800e326:	f7fc f8bb 	bl	800a4a0 <I2S_SelectSource>
        I2SInput_Started = 1;
 800e32a:	2601      	movs	r6, #1
            break;
 800e32c:	e761      	b.n	800e1f2 <Go+0xde>
        switch(InputChannel)
 800e32e:	2601      	movs	r6, #1
 800e330:	e75f      	b.n	800e1f2 <Go+0xde>
        if (BluetoothOut_Start())
 800e332:	f7fd ff87 	bl	800c244 <BluetoothOut_Start>
 800e336:	2800      	cmp	r0, #0
 800e338:	f43f af63 	beq.w	800e202 <Go+0xee>
          BluetoothOut_Started = 1;
 800e33c:	4b26      	ldr	r3, [pc, #152]	@ (800e3d8 <Go+0x2c4>)
 800e33e:	2201      	movs	r2, #1
 800e340:	701a      	strb	r2, [r3, #0]
 800e342:	e75e      	b.n	800e202 <Go+0xee>
        }
      }
      else
      {
        XPT2046_ConvertRawToScreen(Touch_RawX, Touch_RawY, &Touch_ScreenX, &Touch_ScreenY);
 800e344:	f10d 0306 	add.w	r3, sp, #6
 800e348:	aa02      	add	r2, sp, #8
 800e34a:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800e34e:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 800e352:	f7fb fe2f 	bl	8009fb4 <XPT2046_ConvertRawToScreen>

        if (!SomethingPressed)
 800e356:	b147      	cbz	r7, 800e36a <Go+0x256>
          SomethingPressed = JSB_UI_Page_PressDown(pCurrentPage, Touch_ScreenX, Touch_ScreenY);
        JSB_UI_Page_PressMove(pCurrentPage, Touch_ScreenX, Touch_ScreenY);
 800e358:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800e35c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800e360:	4b20      	ldr	r3, [pc, #128]	@ (800e3e4 <Go+0x2d0>)
 800e362:	6818      	ldr	r0, [r3, #0]
 800e364:	f7fb fb90 	bl	8009a88 <JSB_UI_Page_PressMove>
 800e368:	e00a      	b.n	800e380 <Go+0x26c>
          SomethingPressed = JSB_UI_Page_PressDown(pCurrentPage, Touch_ScreenX, Touch_ScreenY);
 800e36a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800e36e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800e372:	4b1c      	ldr	r3, [pc, #112]	@ (800e3e4 <Go+0x2d0>)
 800e374:	6818      	ldr	r0, [r3, #0]
 800e376:	f7fb fbfd 	bl	8009b74 <JSB_UI_Page_PressDown>
 800e37a:	4607      	mov	r7, r0
 800e37c:	e7ec      	b.n	800e358 <Go+0x244>
      }
    }
    else
    {
      if (SomethingPressed)
 800e37e:	b98f      	cbnz	r7, 800e3a4 <Go+0x290>
        JSB_UI_Page_PressUp();
        SomethingPressed = 0;
      }
    }

    ProcessIR();
 800e380:	f7ff fcb4 	bl	800dcec <ProcessIR>

    if (IsUserButtonPressed())
 800e384:	f7fc f880 	bl	800a488 <IsUserButtonPressed>
 800e388:	b3a0      	cbz	r0, 800e3f4 <Go+0x2e0>
    {
      if (!UserButtonPressed)
 800e38a:	f1b8 0f00 	cmp.w	r8, #0
 800e38e:	d132      	bne.n	800e3f6 <Go+0x2e2>
      {
        UserButtonPressed = 1;
        if (InputChannelIsRadio())
 800e390:	f7fd fa00 	bl	800b794 <InputChannelIsRadio>
 800e394:	2800      	cmp	r0, #0
 800e396:	d060      	beq.n	800e45a <Go+0x346>
          Radio_ServiceToTune = sttNext;
 800e398:	4b0b      	ldr	r3, [pc, #44]	@ (800e3c8 <Go+0x2b4>)
 800e39a:	2203      	movs	r2, #3
 800e39c:	701a      	strb	r2, [r3, #0]
        UserButtonPressed = 1;
 800e39e:	f04f 0801 	mov.w	r8, #1
 800e3a2:	e028      	b.n	800e3f6 <Go+0x2e2>
        JSB_UI_Page_PressUp();
 800e3a4:	f7fb fb86 	bl	8009ab4 <JSB_UI_Page_PressUp>
        SomethingPressed = 0;
 800e3a8:	4627      	mov	r7, r4
 800e3aa:	e7e9      	b.n	800e380 <Go+0x26c>
 800e3ac:	20017200 	.word	0x20017200
 800e3b0:	20013238 	.word	0x20013238
 800e3b4:	0800b855 	.word	0x0800b855
 800e3b8:	20013234 	.word	0x20013234
 800e3bc:	0800b869 	.word	0x0800b869
 800e3c0:	20017a88 	.word	0x20017a88
 800e3c4:	41200000 	.word	0x41200000
 800e3c8:	200153c0 	.word	0x200153c0
 800e3cc:	42cb6666 	.word	0x42cb6666
 800e3d0:	200172cc 	.word	0x200172cc
 800e3d4:	20017203 	.word	0x20017203
 800e3d8:	200153c4 	.word	0x200153c4
 800e3dc:	200153c5 	.word	0x200153c5
 800e3e0:	200172d1 	.word	0x200172d1
 800e3e4:	200172d4 	.word	0x200172d4
 800e3e8:	200153d8 	.word	0x200153d8
 800e3ec:	200153e8 	.word	0x200153e8
 800e3f0:	20017534 	.word	0x20017534
      }
    }
    else
    {
      UserButtonPressed = 0;
 800e3f4:	4680      	mov	r8, r0
    }

    osDelay(1);
 800e3f6:	2001      	movs	r0, #1
 800e3f8:	f7f7 ffa0 	bl	800633c <osDelay>
    if (Radio_ServiceToTune != sttNone)
 800e3fc:	4b18      	ldr	r3, [pc, #96]	@ (800e460 <Go+0x34c>)
 800e3fe:	7818      	ldrb	r0, [r3, #0]
 800e400:	b168      	cbz	r0, 800e41e <Go+0x30a>
      if (I2SInput_Started) // Don't tune if no I2S else distortion occurs (on DAB, at least).
 800e402:	b14e      	cbz	r6, 800e418 <Go+0x304>
        switch (InputChannel)
 800e404:	4b17      	ldr	r3, [pc, #92]	@ (800e464 <Go+0x350>)
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b05      	cmp	r3, #5
 800e40a:	f43f aecf 	beq.w	800e1ac <Go+0x98>
 800e40e:	2b06      	cmp	r3, #6
 800e410:	d102      	bne.n	800e418 <Go+0x304>
            si468x_FM_tune(92.1); // Hardwired!
 800e412:	4815      	ldr	r0, [pc, #84]	@ (800e468 <Go+0x354>)
 800e414:	f7fd f820 	bl	800b458 <si468x_FM_tune>
      Radio_ServiceToTune = sttNone;
 800e418:	4b11      	ldr	r3, [pc, #68]	@ (800e460 <Go+0x34c>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	701a      	strb	r2, [r3, #0]
    if (InputChannelChanged || BluetoothOutChanged)
 800e41e:	4b13      	ldr	r3, [pc, #76]	@ (800e46c <Go+0x358>)
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	b923      	cbnz	r3, 800e42e <Go+0x31a>
 800e424:	4b12      	ldr	r3, [pc, #72]	@ (800e470 <Go+0x35c>)
 800e426:	781c      	ldrb	r4, [r3, #0]
 800e428:	2c00      	cmp	r4, #0
 800e42a:	f43f aed0 	beq.w	800e1ce <Go+0xba>
      InputChannelChanged = 0;
 800e42e:	2300      	movs	r3, #0
 800e430:	4a0e      	ldr	r2, [pc, #56]	@ (800e46c <Go+0x358>)
 800e432:	7013      	strb	r3, [r2, #0]
      BluetoothOutChanged = 0;
 800e434:	4a0e      	ldr	r2, [pc, #56]	@ (800e470 <Go+0x35c>)
 800e436:	7013      	strb	r3, [r2, #0]
      Radio_ServiceToTune = sttCurrent; // Re-tune DAB after I2S clock changes to prevent distortion.
 800e438:	2301      	movs	r3, #1
 800e43a:	4a09      	ldr	r2, [pc, #36]	@ (800e460 <Go+0x34c>)
 800e43c:	7013      	strb	r3, [r2, #0]
      PageChanged = 1;
 800e43e:	4a0d      	ldr	r2, [pc, #52]	@ (800e474 <Go+0x360>)
 800e440:	7013      	strb	r3, [r2, #0]
      switch(InputChannel)
 800e442:	4b08      	ldr	r3, [pc, #32]	@ (800e464 <Go+0x350>)
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	2b07      	cmp	r3, #7
 800e448:	f43f aeb4 	beq.w	800e1b4 <Go+0xa0>
 800e44c:	2b08      	cmp	r3, #8
 800e44e:	f47f aeb4 	bne.w	800e1ba <Go+0xa6>
          ADC_SelectSource(ADC_Source_BlueJack);
 800e452:	2002      	movs	r0, #2
 800e454:	f7fc f86d 	bl	800a532 <ADC_SelectSource>
          break;
 800e458:	e6af      	b.n	800e1ba <Go+0xa6>
        UserButtonPressed = 1;
 800e45a:	f04f 0801 	mov.w	r8, #1
 800e45e:	e7ca      	b.n	800e3f6 <Go+0x2e2>
 800e460:	200153c0 	.word	0x200153c0
 800e464:	20017203 	.word	0x20017203
 800e468:	42b83333 	.word	0x42b83333
 800e46c:	20017202 	.word	0x20017202
 800e470:	200172d0 	.word	0x200172d0
 800e474:	200172d1 	.word	0x200172d1

0800e478 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	b08d      	sub	sp, #52	@ 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e47e:	2400      	movs	r4, #0
 800e480:	9407      	str	r4, [sp, #28]
 800e482:	9408      	str	r4, [sp, #32]
 800e484:	9409      	str	r4, [sp, #36]	@ 0x24
 800e486:	940a      	str	r4, [sp, #40]	@ 0x28
 800e488:	940b      	str	r4, [sp, #44]	@ 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800e48a:	4b74      	ldr	r3, [pc, #464]	@ (800e65c <MX_GPIO_Init+0x1e4>)
 800e48c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e48e:	f042 0210 	orr.w	r2, r2, #16
 800e492:	631a      	str	r2, [r3, #48]	@ 0x30
 800e494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e496:	f002 0210 	and.w	r2, r2, #16
 800e49a:	9201      	str	r2, [sp, #4]
 800e49c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e49e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4a0:	f042 0204 	orr.w	r2, r2, #4
 800e4a4:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4a8:	f002 0204 	and.w	r2, r2, #4
 800e4ac:	9202      	str	r2, [sp, #8]
 800e4ae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e4b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800e4b6:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4ba:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800e4be:	9203      	str	r2, [sp, #12]
 800e4c0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4c4:	f042 0201 	orr.w	r2, r2, #1
 800e4c8:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4cc:	f002 0201 	and.w	r2, r2, #1
 800e4d0:	9204      	str	r2, [sp, #16]
 800e4d2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e4d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4d6:	f042 0202 	orr.w	r2, r2, #2
 800e4da:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4de:	f002 0202 	and.w	r2, r2, #2
 800e4e2:	9205      	str	r2, [sp, #20]
 800e4e4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e4e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4e8:	f042 0208 	orr.w	r2, r2, #8
 800e4ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4f0:	f003 0308 	and.w	r3, r3, #8
 800e4f4:	9306      	str	r3, [sp, #24]
 800e4f6:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 800e4f8:	4f59      	ldr	r7, [pc, #356]	@ (800e660 <MX_GPIO_Init+0x1e8>)
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	2124      	movs	r1, #36	@ 0x24
 800e4fe:	4638      	mov	r0, r7
 800e500:	f7f2 fca7 	bl	8000e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 800e504:	4622      	mov	r2, r4
 800e506:	2112      	movs	r1, #18
 800e508:	4638      	mov	r0, r7
 800e50a:	f7f2 fca2 	bl	8000e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 800e50e:	4e55      	ldr	r6, [pc, #340]	@ (800e664 <MX_GPIO_Init+0x1ec>)
 800e510:	2201      	movs	r2, #1
 800e512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e516:	4630      	mov	r0, r6
 800e518:	f7f2 fc9b 	bl	8000e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 800e51c:	4622      	mov	r2, r4
 800e51e:	210f      	movs	r1, #15
 800e520:	4630      	mov	r0, r6
 800e522:	f7f2 fc96 	bl	8000e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 800e526:	f8df b140 	ldr.w	fp, [pc, #320]	@ 800e668 <MX_GPIO_Init+0x1f0>
 800e52a:	4622      	mov	r2, r4
 800e52c:	210e      	movs	r1, #14
 800e52e:	4658      	mov	r0, fp
 800e530:	f7f2 fc8f 	bl	8000e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin
 800e534:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 800e66c <MX_GPIO_Init+0x1f4>
 800e538:	4622      	mov	r2, r4
 800e53a:	f641 0143 	movw	r1, #6211	@ 0x1843
 800e53e:	4640      	mov	r0, r8
 800e540:	f7f2 fc87 	bl	8000e52 <HAL_GPIO_WritePin>
                          |SI_NRST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin
 800e544:	f8df a128 	ldr.w	sl, [pc, #296]	@ 800e670 <MX_GPIO_Init+0x1f8>
 800e548:	4622      	mov	r2, r4
 800e54a:	217f      	movs	r1, #127	@ 0x7f
 800e54c:	4650      	mov	r0, sl
 800e54e:	f7f2 fc80 	bl	8000e52 <HAL_GPIO_WritePin>
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ESP32_A_NSS_Pin ESP32_B_NSS_Pin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_NSS_Pin;
 800e552:	2324      	movs	r3, #36	@ 0x24
 800e554:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e556:	2501      	movs	r5, #1
 800e558:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e55a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e55c:	f04f 0902 	mov.w	r9, #2
 800e560:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e564:	a907      	add	r1, sp, #28
 800e566:	4638      	mov	r0, r7
 800e568:	f7f2 fb6a 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP32_A_HSK_Pin ESP32_B_HSK_Pin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 800e56c:	2348      	movs	r3, #72	@ 0x48
 800e56e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e570:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e572:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e574:	a907      	add	r1, sp, #28
 800e576:	4638      	mov	r0, r7
 800e578:	f7f2 fb62 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP32_B_EN_Pin ESP32_A_EN_Pin */
  GPIO_InitStruct.Pin = ESP32_B_EN_Pin|ESP32_A_EN_Pin;
 800e57c:	2312      	movs	r3, #18
 800e57e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e580:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e582:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e584:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e586:	a907      	add	r1, sp, #28
 800e588:	4638      	mov	r0, r7
 800e58a:	f7f2 fb59 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : NUserButton_Pin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
 800e58e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e592:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800e594:	f44f 1704 	mov.w	r7, #2162688	@ 0x210000
 800e598:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e59a:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 800e59c:	a907      	add	r1, sp, #28
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f7f2 fb4e 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_NSS_Pin LCD_NRST_Pin LCD_NSS_Pin LCD_NC_D_Pin
                           LCD_NBACKLIGHT_Pin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin|LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin
 800e5a4:	f248 030f 	movw	r3, #32783	@ 0x800f
 800e5a8:	9307      	str	r3, [sp, #28]
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e5aa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5ac:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5ae:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e5b0:	a907      	add	r1, sp, #28
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f7f2 fb44 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red_Pin LED_Green_Pin LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 800e5b8:	230e      	movs	r3, #14
 800e5ba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e5bc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5be:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5c0:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5c2:	a907      	add	r1, sp, #28
 800e5c4:	4658      	mov	r0, fp
 800e5c6:	f7f2 fb3b 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI_RxDMA_Pin SAI_TxDMA_Pin TestPoint_Pin */
  GPIO_InitStruct.Pin = SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin;
 800e5ca:	f640 0303 	movw	r3, #2051	@ 0x803
 800e5ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e5d0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5d2:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e5d4:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e5d8:	a907      	add	r1, sp, #28
 800e5da:	4640      	mov	r0, r8
 800e5dc:	f7f2 fb30 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_NSS_Pin SI_NRST_Pin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 800e5e0:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 800e5e4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e5e6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5e8:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5ea:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e5ec:	a907      	add	r1, sp, #28
 800e5ee:	4640      	mov	r0, r8
 800e5f0:	f7f2 fb26 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e5f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e5f8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5fa:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5fe:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e600:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e602:	f04f 0905 	mov.w	r9, #5
 800e606:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e60a:	a907      	add	r1, sp, #28
 800e60c:	4630      	mov	r0, r6
 800e60e:	f7f2 fb17 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TAS_PDN_Pin TAS_NRST_Pin MUX_S0_Pin MUX_S1_Pin
                           DAC_FLT_Pin DAC_DEMP_Pin DAC_XSMT_Pin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin
 800e612:	237f      	movs	r3, #127	@ 0x7f
 800e614:	9307      	str	r3, [sp, #28]
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e616:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e618:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e61a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e61c:	a907      	add	r1, sp, #28
 800e61e:	4650      	mov	r0, sl
 800e620:	f7f2 fb0e 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SI_INT_Pin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
 800e624:	2320      	movs	r3, #32
 800e626:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800e628:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e62a:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 800e62c:	a907      	add	r1, sp, #28
 800e62e:	4640      	mov	r0, r8
 800e630:	f7f2 fb06 	bl	8000c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800e634:	4622      	mov	r2, r4
 800e636:	4649      	mov	r1, r9
 800e638:	2017      	movs	r0, #23
 800e63a:	f7f2 f875 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800e63e:	2017      	movs	r0, #23
 800e640:	f7f2 f882 	bl	8000748 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800e644:	4622      	mov	r2, r4
 800e646:	4649      	mov	r1, r9
 800e648:	2028      	movs	r0, #40	@ 0x28
 800e64a:	f7f2 f86d 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e64e:	2028      	movs	r0, #40	@ 0x28
 800e650:	f7f2 f87a 	bl	8000748 <HAL_NVIC_EnableIRQ>

}
 800e654:	b00d      	add	sp, #52	@ 0x34
 800e656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65a:	bf00      	nop
 800e65c:	40023800 	.word	0x40023800
 800e660:	40021000 	.word	0x40021000
 800e664:	40020800 	.word	0x40020800
 800e668:	40020000 	.word	0x40020000
 800e66c:	40020400 	.word	0x40020400
 800e670:	40020c00 	.word	0x40020c00

0800e674 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800e674:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800e676:	4812      	ldr	r0, [pc, #72]	@ (800e6c0 <MX_I2C1_Init+0x4c>)
 800e678:	4b12      	ldr	r3, [pc, #72]	@ (800e6c4 <MX_I2C1_Init+0x50>)
 800e67a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800e67c:	4b12      	ldr	r3, [pc, #72]	@ (800e6c8 <MX_I2C1_Init+0x54>)
 800e67e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800e680:	2300      	movs	r3, #0
 800e682:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800e684:	2201      	movs	r2, #1
 800e686:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800e688:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800e68a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800e68c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e68e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800e690:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800e692:	f7f2 fe59 	bl	8001348 <HAL_I2C_Init>
 800e696:	b950      	cbnz	r0, 800e6ae <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800e698:	2100      	movs	r1, #0
 800e69a:	4809      	ldr	r0, [pc, #36]	@ (800e6c0 <MX_I2C1_Init+0x4c>)
 800e69c:	f7f3 fd59 	bl	8002152 <HAL_I2CEx_ConfigAnalogFilter>
 800e6a0:	b940      	cbnz	r0, 800e6b4 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	4806      	ldr	r0, [pc, #24]	@ (800e6c0 <MX_I2C1_Init+0x4c>)
 800e6a6:	f7f3 fd82 	bl	80021ae <HAL_I2CEx_ConfigDigitalFilter>
 800e6aa:	b930      	cbnz	r0, 800e6ba <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800e6ac:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e6ae:	f000 f911 	bl	800e8d4 <Error_Handler>
 800e6b2:	e7f1      	b.n	800e698 <MX_I2C1_Init+0x24>
    Error_Handler();
 800e6b4:	f000 f90e 	bl	800e8d4 <Error_Handler>
 800e6b8:	e7f3      	b.n	800e6a2 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800e6ba:	f000 f90b 	bl	800e8d4 <Error_Handler>
}
 800e6be:	e7f5      	b.n	800e6ac <MX_I2C1_Init+0x38>
 800e6c0:	20017398 	.word	0x20017398
 800e6c4:	40005400 	.word	0x40005400
 800e6c8:	6000030d 	.word	0x6000030d

0800e6cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800e6cc:	b530      	push	{r4, r5, lr}
 800e6ce:	b0ad      	sub	sp, #180	@ 0xb4
 800e6d0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6d2:	2100      	movs	r1, #0
 800e6d4:	9127      	str	r1, [sp, #156]	@ 0x9c
 800e6d6:	9128      	str	r1, [sp, #160]	@ 0xa0
 800e6d8:	9129      	str	r1, [sp, #164]	@ 0xa4
 800e6da:	912a      	str	r1, [sp, #168]	@ 0xa8
 800e6dc:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e6de:	2290      	movs	r2, #144	@ 0x90
 800e6e0:	a803      	add	r0, sp, #12
 800e6e2:	f001 ff4e 	bl	8010582 <memset>
  if(i2cHandle->Instance==I2C1)
 800e6e6:	6822      	ldr	r2, [r4, #0]
 800e6e8:	4b3e      	ldr	r3, [pc, #248]	@ (800e7e4 <HAL_I2C_MspInit+0x118>)
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d001      	beq.n	800e6f2 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800e6ee:	b02d      	add	sp, #180	@ 0xb4
 800e6f0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800e6f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e6f6:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e6f8:	a803      	add	r0, sp, #12
 800e6fa:	f7f4 f933 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d166      	bne.n	800e7d0 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e702:	4d39      	ldr	r5, [pc, #228]	@ (800e7e8 <HAL_I2C_MspInit+0x11c>)
 800e704:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e706:	f043 0302 	orr.w	r3, r3, #2
 800e70a:	632b      	str	r3, [r5, #48]	@ 0x30
 800e70c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e70e:	f003 0302 	and.w	r3, r3, #2
 800e712:	9301      	str	r3, [sp, #4]
 800e714:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800e716:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e71a:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e71c:	2312      	movs	r3, #18
 800e71e:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e720:	2301      	movs	r3, #1
 800e722:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e724:	2303      	movs	r3, #3
 800e726:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e728:	2304      	movs	r3, #4
 800e72a:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e72c:	a927      	add	r1, sp, #156	@ 0x9c
 800e72e:	482f      	ldr	r0, [pc, #188]	@ (800e7ec <HAL_I2C_MspInit+0x120>)
 800e730:	f7f2 fa86 	bl	8000c40 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e734:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800e736:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e73a:	642b      	str	r3, [r5, #64]	@ 0x40
 800e73c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800e73e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e742:	9302      	str	r3, [sp, #8]
 800e744:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 800e746:	482a      	ldr	r0, [pc, #168]	@ (800e7f0 <HAL_I2C_MspInit+0x124>)
 800e748:	4b2a      	ldr	r3, [pc, #168]	@ (800e7f4 <HAL_I2C_MspInit+0x128>)
 800e74a:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800e74c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e750:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e752:	2340      	movs	r3, #64	@ 0x40
 800e754:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e756:	2300      	movs	r3, #0
 800e758:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e75a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e75e:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e760:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e762:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800e764:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800e766:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e76a:	6202      	str	r2, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e76c:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800e76e:	f7f2 f875 	bl	800085c <HAL_DMA_Init>
 800e772:	2800      	cmp	r0, #0
 800e774:	d12f      	bne.n	800e7d6 <HAL_I2C_MspInit+0x10a>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800e776:	4b1e      	ldr	r3, [pc, #120]	@ (800e7f0 <HAL_I2C_MspInit+0x124>)
 800e778:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e77a:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800e77c:	481e      	ldr	r0, [pc, #120]	@ (800e7f8 <HAL_I2C_MspInit+0x12c>)
 800e77e:	4b1f      	ldr	r3, [pc, #124]	@ (800e7fc <HAL_I2C_MspInit+0x130>)
 800e780:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800e782:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e786:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e788:	2300      	movs	r3, #0
 800e78a:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e78c:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e78e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e792:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e794:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e796:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800e798:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800e79a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e79e:	6202      	str	r2, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e7a0:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800e7a2:	f7f2 f85b 	bl	800085c <HAL_DMA_Init>
 800e7a6:	b9c8      	cbnz	r0, 800e7dc <HAL_I2C_MspInit+0x110>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800e7a8:	4b13      	ldr	r3, [pc, #76]	@ (800e7f8 <HAL_I2C_MspInit+0x12c>)
 800e7aa:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800e7ac:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	2105      	movs	r1, #5
 800e7b2:	201f      	movs	r0, #31
 800e7b4:	f7f1 ffb8 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800e7b8:	201f      	movs	r0, #31
 800e7ba:	f7f1 ffc5 	bl	8000748 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800e7be:	2200      	movs	r2, #0
 800e7c0:	2105      	movs	r1, #5
 800e7c2:	2020      	movs	r0, #32
 800e7c4:	f7f1 ffb0 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800e7c8:	2020      	movs	r0, #32
 800e7ca:	f7f1 ffbd 	bl	8000748 <HAL_NVIC_EnableIRQ>
}
 800e7ce:	e78e      	b.n	800e6ee <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800e7d0:	f000 f880 	bl	800e8d4 <Error_Handler>
 800e7d4:	e795      	b.n	800e702 <HAL_I2C_MspInit+0x36>
      Error_Handler();
 800e7d6:	f000 f87d 	bl	800e8d4 <Error_Handler>
 800e7da:	e7cc      	b.n	800e776 <HAL_I2C_MspInit+0xaa>
      Error_Handler();
 800e7dc:	f000 f87a 	bl	800e8d4 <Error_Handler>
 800e7e0:	e7e2      	b.n	800e7a8 <HAL_I2C_MspInit+0xdc>
 800e7e2:	bf00      	nop
 800e7e4:	40005400 	.word	0x40005400
 800e7e8:	40023800 	.word	0x40023800
 800e7ec:	40020400 	.word	0x40020400
 800e7f0:	20017338 	.word	0x20017338
 800e7f4:	400260b8 	.word	0x400260b8
 800e7f8:	200172d8 	.word	0x200172d8
 800e7fc:	40026010 	.word	0x40026010

0800e800 <SCB_EnableICache>:
  __ASM volatile ("dsb 0xF":::"memory");
 800e800:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e804:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800e808:	4b08      	ldr	r3, [pc, #32]	@ (800e82c <SCB_EnableICache+0x2c>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800e810:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e814:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800e818:	695a      	ldr	r2, [r3, #20]
 800e81a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e81e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800e820:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e824:	f3bf 8f6f 	isb	sy
}
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	e000ed00 	.word	0xe000ed00

0800e830 <SCB_EnableDCache>:
{
 800e830:	b410      	push	{r4}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800e832:	4b15      	ldr	r3, [pc, #84]	@ (800e888 <SCB_EnableDCache+0x58>)
 800e834:	2200      	movs	r2, #0
 800e836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800e83a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800e83e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800e842:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800e846:	e000      	b.n	800e84a <SCB_EnableDCache+0x1a>
    } while(sets-- != 0U);
 800e848:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e84a:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e84e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800e852:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800e856:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800e85a:	490b      	ldr	r1, [pc, #44]	@ (800e888 <SCB_EnableDCache+0x58>)
 800e85c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800e860:	4613      	mov	r3, r2
 800e862:	3a01      	subs	r2, #1
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1f2      	bne.n	800e84e <SCB_EnableDCache+0x1e>
    } while(sets-- != 0U);
 800e868:	1e43      	subs	r3, r0, #1
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d1ec      	bne.n	800e848 <SCB_EnableDCache+0x18>
 800e86e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800e872:	694b      	ldr	r3, [r1, #20]
 800e874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e878:	614b      	str	r3, [r1, #20]
 800e87a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e87e:	f3bf 8f6f 	isb	sy
}
 800e882:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e886:	4770      	bx	lr
 800e888:	e000ed00 	.word	0xe000ed00

0800e88c <Enable_DWT_Delay>:
void DWT_Delay_ProcessorClockCycles(uint32_t Value);
void DWT_Delay_us(uint32_t Value);

inline void Enable_DWT_Delay()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT.
 800e88c:	4a08      	ldr	r2, [pc, #32]	@ (800e8b0 <Enable_DWT_Delay+0x24>)
 800e88e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 800e892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e896:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  DWT->LAR = 0xC5ACCE55; // Unlock register access.
 800e89a:	4b06      	ldr	r3, [pc, #24]	@ (800e8b4 <Enable_DWT_Delay+0x28>)
 800e89c:	4a06      	ldr	r2, [pc, #24]	@ (800e8b8 <Enable_DWT_Delay+0x2c>)
 800e89e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
  DWT->CTRL = 0; // Reset the counter.
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	601a      	str	r2, [r3, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable CPU_CYCLES.
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	f042 0201 	orr.w	r2, r2, #1
 800e8ac:	601a      	str	r2, [r3, #0]
}
 800e8ae:	4770      	bx	lr
 800e8b0:	e000ed00 	.word	0xe000ed00
 800e8b4:	e0001000 	.word	0xe0001000
 800e8b8:	c5acce55 	.word	0xc5acce55

0800e8bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e8bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 800e8be:	6802      	ldr	r2, [r0, #0]
 800e8c0:	4b03      	ldr	r3, [pc, #12]	@ (800e8d0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d000      	beq.n	800e8c8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800e8c6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800e8c8:	f7f1 fec4 	bl	8000654 <HAL_IncTick>
}
 800e8cc:	e7fb      	b.n	800e8c6 <HAL_TIM_PeriodElapsedCallback+0xa>
 800e8ce:	bf00      	nop
 800e8d0:	40002000 	.word	0x40002000

0800e8d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e8d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    ToggleLED(LED_Red);
 800e8d6:	2001      	movs	r0, #1
 800e8d8:	f7fb fdb4 	bl	800a444 <ToggleLED>
    HAL_Delay(50);
 800e8dc:	2032      	movs	r0, #50	@ 0x32
 800e8de:	f7f1 fecb 	bl	8000678 <HAL_Delay>
    ToggleLED(LED_Red);
 800e8e2:	2001      	movs	r0, #1
 800e8e4:	f7fb fdae 	bl	800a444 <ToggleLED>
    HAL_Delay(50);
 800e8e8:	2032      	movs	r0, #50	@ 0x32
 800e8ea:	f7f1 fec5 	bl	8000678 <HAL_Delay>
  while(1)
 800e8ee:	e7f2      	b.n	800e8d6 <Error_Handler+0x2>

0800e8f0 <SystemClock_Config>:
{
 800e8f0:	b500      	push	{lr}
 800e8f2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e8f4:	2234      	movs	r2, #52	@ 0x34
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	a807      	add	r0, sp, #28
 800e8fa:	f001 fe42 	bl	8010582 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e8fe:	2300      	movs	r3, #0
 800e900:	9302      	str	r3, [sp, #8]
 800e902:	9303      	str	r3, [sp, #12]
 800e904:	9304      	str	r3, [sp, #16]
 800e906:	9305      	str	r3, [sp, #20]
 800e908:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e90a:	4b23      	ldr	r3, [pc, #140]	@ (800e998 <SystemClock_Config+0xa8>)
 800e90c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e90e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800e912:	641a      	str	r2, [r3, #64]	@ 0x40
 800e914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e91e:	4b1f      	ldr	r3, [pc, #124]	@ (800e99c <SystemClock_Config+0xac>)
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800e926:	601a      	str	r2, [r3, #0]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e932:	2301      	movs	r3, #1
 800e934:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800e936:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800e93a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e93c:	2302      	movs	r3, #2
 800e93e:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e940:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800e944:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800e946:	2219      	movs	r2, #25
 800e948:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 800e94a:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 800e94e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e950:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800e952:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800e954:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e956:	a807      	add	r0, sp, #28
 800e958:	f7f3 fc94 	bl	8002284 <HAL_RCC_OscConfig>
 800e95c:	b9b0      	cbnz	r0, 800e98c <SystemClock_Config+0x9c>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800e95e:	f7f3 fc53 	bl	8002208 <HAL_PWREx_EnableOverDrive>
 800e962:	b9a8      	cbnz	r0, 800e990 <SystemClock_Config+0xa0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e964:	230f      	movs	r3, #15
 800e966:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e968:	2302      	movs	r3, #2
 800e96a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e96c:	2300      	movs	r3, #0
 800e96e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e970:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800e974:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e97a:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800e97c:	2107      	movs	r1, #7
 800e97e:	a802      	add	r0, sp, #8
 800e980:	f7f3 fef6 	bl	8002770 <HAL_RCC_ClockConfig>
 800e984:	b930      	cbnz	r0, 800e994 <SystemClock_Config+0xa4>
}
 800e986:	b015      	add	sp, #84	@ 0x54
 800e988:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800e98c:	f7ff ffa2 	bl	800e8d4 <Error_Handler>
    Error_Handler();
 800e990:	f7ff ffa0 	bl	800e8d4 <Error_Handler>
    Error_Handler();
 800e994:	f7ff ff9e 	bl	800e8d4 <Error_Handler>
 800e998:	40023800 	.word	0x40023800
 800e99c:	40007000 	.word	0x40007000

0800e9a0 <PeriphCommonClock_Config>:
{
 800e9a0:	b500      	push	{lr}
 800e9a2:	b0a5      	sub	sp, #148	@ 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e9a4:	2290      	movs	r2, #144	@ 0x90
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	4668      	mov	r0, sp
 800e9aa:	f001 fdea 	bl	8010582 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_SAI2;
 800e9ae:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 800e9b2:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 800e9b4:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800e9b8:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800e9ba:	2302      	movs	r3, #2
 800e9bc:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800e9be:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 14;
 800e9c0:	230e      	movs	r3, #14
 800e9c2:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	9309      	str	r3, [sp, #36]	@ 0x24
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800e9c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e9cc:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e9ce:	4668      	mov	r0, sp
 800e9d0:	f7f3 ffc8 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 800e9d4:	b910      	cbnz	r0, 800e9dc <PeriphCommonClock_Config+0x3c>
}
 800e9d6:	b025      	add	sp, #148	@ 0x94
 800e9d8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800e9dc:	f7ff ff7a 	bl	800e8d4 <Error_Handler>

0800e9e0 <main>:
{
 800e9e0:	b508      	push	{r3, lr}
  SCB_EnableICache();
 800e9e2:	f7ff ff0d 	bl	800e800 <SCB_EnableICache>
  SCB_EnableDCache();
 800e9e6:	f7ff ff23 	bl	800e830 <SCB_EnableDCache>
  HAL_Init();
 800e9ea:	f7f1 fe27 	bl	800063c <HAL_Init>
  Enable_DWT_Delay();
 800e9ee:	f7ff ff4d 	bl	800e88c <Enable_DWT_Delay>
  SystemClock_Config();
 800e9f2:	f7ff ff7d 	bl	800e8f0 <SystemClock_Config>
  PeriphCommonClock_Config();
 800e9f6:	f7ff ffd3 	bl	800e9a0 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800e9fa:	f7ff fd3d 	bl	800e478 <MX_GPIO_Init>
  MX_DMA_Init();
 800e9fe:	f7fc fdc1 	bl	800b584 <MX_DMA_Init>
  MX_I2C1_Init();
 800ea02:	f7ff fe37 	bl	800e674 <MX_I2C1_Init>
  MX_SPI1_Init();
 800ea06:	f000 f9b7 	bl	800ed78 <MX_SPI1_Init>
  MX_SPI2_Init();
 800ea0a:	f000 f9db 	bl	800edc4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800ea0e:	f000 f9ff 	bl	800ee10 <MX_SPI3_Init>
  MX_TIM1_Init();
 800ea12:	f000 fdc9 	bl	800f5a8 <MX_TIM1_Init>
  MX_SAI2_Init();
 800ea16:	f000 f80d 	bl	800ea34 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800ea1a:	f000 f8f3 	bl	800ec04 <MX_SPDIFRX_Init>
  MX_TIM11_Init();
 800ea1e:	f000 fcbf 	bl	800f3a0 <MX_TIM11_Init>
  MX_TIM3_Init();
 800ea22:	f000 fc55 	bl	800f2d0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800ea26:	f000 fe23 	bl	800f670 <MX_USART3_UART_Init>
  MX_FREERTOS_Init();
 800ea2a:	f7fc fe33 	bl	800b694 <MX_FREERTOS_Init>
  osKernelStart();
 800ea2e:	f7f7 fc4d 	bl	80062cc <osKernelStart>
  while (1)
 800ea32:	e7fe      	b.n	800ea32 <main+0x52>

0800ea34 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 800ea34:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 800ea36:	4817      	ldr	r0, [pc, #92]	@ (800ea94 <MX_SAI2_Init+0x60>)
 800ea38:	4b17      	ldr	r3, [pc, #92]	@ (800ea98 <MX_SAI2_Init+0x64>)
 800ea3a:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	6041      	str	r1, [r0, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800ea40:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800ea42:	6101      	str	r1, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800ea44:	6141      	str	r1, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800ea46:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800ea48:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ea4c:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800ea4e:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800ea50:	6241      	str	r1, [r0, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800ea52:	6281      	str	r1, [r0, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800ea54:	62c1      	str	r1, [r0, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800ea56:	2302      	movs	r3, #2
 800ea58:	461a      	mov	r2, r3
 800ea5a:	f7f4 fe2d 	bl	80036b8 <HAL_SAI_InitProtocol>
 800ea5e:	b998      	cbnz	r0, 800ea88 <MX_SAI2_Init+0x54>
  {
    Error_Handler();
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800ea60:	480e      	ldr	r0, [pc, #56]	@ (800ea9c <MX_SAI2_Init+0x68>)
 800ea62:	4b0f      	ldr	r3, [pc, #60]	@ (800eaa0 <MX_SAI2_Init+0x6c>)
 800ea64:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800ea66:	2303      	movs	r3, #3
 800ea68:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800ea6e:	2100      	movs	r1, #0
 800ea70:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800ea72:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800ea74:	60c1      	str	r1, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800ea76:	6241      	str	r1, [r0, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800ea78:	6281      	str	r1, [r0, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800ea7a:	62c1      	str	r1, [r0, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	461a      	mov	r2, r3
 800ea80:	f7f4 fe1a 	bl	80036b8 <HAL_SAI_InitProtocol>
 800ea84:	b918      	cbnz	r0, 800ea8e <MX_SAI2_Init+0x5a>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800ea86:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ea88:	f7ff ff24 	bl	800e8d4 <Error_Handler>
 800ea8c:	e7e8      	b.n	800ea60 <MX_SAI2_Init+0x2c>
    Error_Handler();
 800ea8e:	f7ff ff21 	bl	800e8d4 <Error_Handler>
}
 800ea92:	e7f8      	b.n	800ea86 <MX_SAI2_Init+0x52>
 800ea94:	20017534 	.word	0x20017534
 800ea98:	40015c04 	.word	0x40015c04
 800ea9c:	200174b0 	.word	0x200174b0
 800eaa0:	40015c24 	.word	0x40015c24

0800eaa4 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800eaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaa6:	b089      	sub	sp, #36	@ 0x24
 800eaa8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 800eaaa:	6802      	ldr	r2, [r0, #0]
 800eaac:	4b4a      	ldr	r3, [pc, #296]	@ (800ebd8 <HAL_SAI_MspInit+0x134>)
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d005      	beq.n	800eabe <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
    }
    if(saiHandle->Instance==SAI2_Block_B)
 800eab2:	6822      	ldr	r2, [r4, #0]
 800eab4:	4b49      	ldr	r3, [pc, #292]	@ (800ebdc <HAL_SAI_MspInit+0x138>)
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d04d      	beq.n	800eb56 <HAL_SAI_MspInit+0xb2>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
    }
}
 800eaba:	b009      	add	sp, #36	@ 0x24
 800eabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI2_client == 0)
 800eabe:	4b48      	ldr	r3, [pc, #288]	@ (800ebe0 <HAL_SAI_MspInit+0x13c>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	b94b      	cbnz	r3, 800ead8 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI2_CLK_ENABLE();
 800eac4:	4a47      	ldr	r2, [pc, #284]	@ (800ebe4 <HAL_SAI_MspInit+0x140>)
 800eac6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800eac8:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800eacc:	6451      	str	r1, [r2, #68]	@ 0x44
 800eace:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ead0:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 800ead4:	9201      	str	r2, [sp, #4]
 800ead6:	9a01      	ldr	r2, [sp, #4]
    SAI2_client ++;
 800ead8:	3301      	adds	r3, #1
 800eada:	4a41      	ldr	r2, [pc, #260]	@ (800ebe0 <HAL_SAI_MspInit+0x13c>)
 800eadc:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
 800eade:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800eae2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eae4:	2702      	movs	r7, #2
 800eae6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eae8:	2500      	movs	r5, #0
 800eaea:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eaec:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800eaee:	260a      	movs	r6, #10
 800eaf0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800eaf2:	a903      	add	r1, sp, #12
 800eaf4:	483c      	ldr	r0, [pc, #240]	@ (800ebe8 <HAL_SAI_MspInit+0x144>)
 800eaf6:	f7f2 f8a3 	bl	8000c40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 800eafa:	2301      	movs	r3, #1
 800eafc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eafe:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb00:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb02:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800eb04:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 800eb06:	a903      	add	r1, sp, #12
 800eb08:	4838      	ldr	r0, [pc, #224]	@ (800ebec <HAL_SAI_MspInit+0x148>)
 800eb0a:	f7f2 f899 	bl	8000c40 <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA2_Stream2;
 800eb0e:	4838      	ldr	r0, [pc, #224]	@ (800ebf0 <HAL_SAI_MspInit+0x14c>)
 800eb10:	4b38      	ldr	r3, [pc, #224]	@ (800ebf4 <HAL_SAI_MspInit+0x150>)
 800eb12:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 800eb14:	f04f 53a0 	mov.w	r3, #335544320	@ 0x14000000
 800eb18:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800eb1a:	2340      	movs	r3, #64	@ 0x40
 800eb1c:	6083      	str	r3, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800eb1e:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800eb20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb24:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800eb26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eb2a:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800eb2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800eb30:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800eb32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eb36:	61c3      	str	r3, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 800eb38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800eb3c:	6203      	str	r3, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800eb3e:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800eb40:	f7f1 fe8c 	bl	800085c <HAL_DMA_Init>
 800eb44:	b920      	cbnz	r0, 800eb50 <HAL_SAI_MspInit+0xac>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 800eb46:	4b2a      	ldr	r3, [pc, #168]	@ (800ebf0 <HAL_SAI_MspInit+0x14c>)
 800eb48:	6723      	str	r3, [r4, #112]	@ 0x70
 800eb4a:	639c      	str	r4, [r3, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 800eb4c:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800eb4e:	e7b0      	b.n	800eab2 <HAL_SAI_MspInit+0xe>
      Error_Handler();
 800eb50:	f7ff fec0 	bl	800e8d4 <Error_Handler>
 800eb54:	e7f7      	b.n	800eb46 <HAL_SAI_MspInit+0xa2>
      if (SAI2_client == 0)
 800eb56:	4b22      	ldr	r3, [pc, #136]	@ (800ebe0 <HAL_SAI_MspInit+0x13c>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	b94b      	cbnz	r3, 800eb70 <HAL_SAI_MspInit+0xcc>
       __HAL_RCC_SAI2_CLK_ENABLE();
 800eb5c:	4a21      	ldr	r2, [pc, #132]	@ (800ebe4 <HAL_SAI_MspInit+0x140>)
 800eb5e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800eb60:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800eb64:	6451      	str	r1, [r2, #68]	@ 0x44
 800eb66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800eb68:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 800eb6c:	9202      	str	r2, [sp, #8]
 800eb6e:	9a02      	ldr	r2, [sp, #8]
    SAI2_client ++;
 800eb70:	3301      	adds	r3, #1
 800eb72:	4a1b      	ldr	r2, [pc, #108]	@ (800ebe0 <HAL_SAI_MspInit+0x13c>)
 800eb74:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
 800eb76:	2301      	movs	r3, #1
 800eb78:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb7a:	2302      	movs	r3, #2
 800eb7c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb7e:	2500      	movs	r5, #0
 800eb80:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb82:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800eb84:	230a      	movs	r3, #10
 800eb86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 800eb88:	a903      	add	r1, sp, #12
 800eb8a:	481b      	ldr	r0, [pc, #108]	@ (800ebf8 <HAL_SAI_MspInit+0x154>)
 800eb8c:	f7f2 f858 	bl	8000c40 <HAL_GPIO_Init>
    hdma_sai2_b.Instance = DMA2_Stream6;
 800eb90:	481a      	ldr	r0, [pc, #104]	@ (800ebfc <HAL_SAI_MspInit+0x158>)
 800eb92:	4b1b      	ldr	r3, [pc, #108]	@ (800ec00 <HAL_SAI_MspInit+0x15c>)
 800eb94:	6003      	str	r3, [r0, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 800eb96:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 800eb9a:	6043      	str	r3, [r0, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800eb9c:	6085      	str	r5, [r0, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800eb9e:	60c5      	str	r5, [r0, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800eba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eba4:	6103      	str	r3, [r0, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800eba6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ebaa:	6143      	str	r3, [r0, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ebac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ebb0:	6183      	str	r3, [r0, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800ebb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ebb6:	61c3      	str	r3, [r0, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 800ebb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ebbc:	6203      	str	r3, [r0, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ebbe:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800ebc0:	f7f1 fe4c 	bl	800085c <HAL_DMA_Init>
 800ebc4:	b920      	cbnz	r0, 800ebd0 <HAL_SAI_MspInit+0x12c>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 800ebc6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebfc <HAL_SAI_MspInit+0x158>)
 800ebc8:	6723      	str	r3, [r4, #112]	@ 0x70
 800ebca:	639c      	str	r4, [r3, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 800ebcc:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800ebce:	e774      	b.n	800eaba <HAL_SAI_MspInit+0x16>
      Error_Handler();
 800ebd0:	f7ff fe80 	bl	800e8d4 <Error_Handler>
 800ebd4:	e7f7      	b.n	800ebc6 <HAL_SAI_MspInit+0x122>
 800ebd6:	bf00      	nop
 800ebd8:	40015c04 	.word	0x40015c04
 800ebdc:	40015c24 	.word	0x40015c24
 800ebe0:	200173ec 	.word	0x200173ec
 800ebe4:	40023800 	.word	0x40023800
 800ebe8:	40020c00 	.word	0x40020c00
 800ebec:	40021000 	.word	0x40021000
 800ebf0:	20017450 	.word	0x20017450
 800ebf4:	40026440 	.word	0x40026440
 800ebf8:	40020000 	.word	0x40020000
 800ebfc:	200173f0 	.word	0x200173f0
 800ec00:	400264a0 	.word	0x400264a0

0800ec04 <MX_SPDIFRX_Init>:
DMA_HandleTypeDef hdma_spdif_rx_dt;
DMA_HandleTypeDef hdma_spdif_rx_cs;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 800ec04:	b508      	push	{r3, lr}
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800ec06:	4811      	ldr	r0, [pc, #68]	@ (800ec4c <MX_SPDIFRX_Init+0x48>)
 800ec08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800ec0c:	6003      	str	r3, [r0, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	6043      	str	r3, [r0, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_15;
 800ec12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ec16:	6082      	str	r2, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_ON;
 800ec18:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800ec1c:	60c2      	str	r2, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800ec1e:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_MSB;
 800ec20:	2310      	movs	r3, #16
 800ec22:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_ENABLE;
 800ec24:	2308      	movs	r3, #8
 800ec26:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_ON;
 800ec28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec2c:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_ON;
 800ec2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ec32:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_ON;
 800ec34:	2380      	movs	r3, #128	@ 0x80
 800ec36:	6243      	str	r3, [r0, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_ON;
 800ec38:	2340      	movs	r3, #64	@ 0x40
 800ec3a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800ec3c:	f7f4 feea 	bl	8003a14 <HAL_SPDIFRX_Init>
 800ec40:	b900      	cbnz	r0, 800ec44 <MX_SPDIFRX_Init+0x40>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800ec42:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ec44:	f7ff fe46 	bl	800e8d4 <Error_Handler>
}
 800ec48:	e7fb      	b.n	800ec42 <MX_SPDIFRX_Init+0x3e>
 800ec4a:	bf00      	nop
 800ec4c:	20017678 	.word	0x20017678

0800ec50 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec54:	2300      	movs	r3, #0
 800ec56:	9303      	str	r3, [sp, #12]
 800ec58:	9304      	str	r3, [sp, #16]
 800ec5a:	9305      	str	r3, [sp, #20]
 800ec5c:	9306      	str	r3, [sp, #24]
 800ec5e:	9307      	str	r3, [sp, #28]
  if(spdifrxHandle->Instance==SPDIFRX)
 800ec60:	6803      	ldr	r3, [r0, #0]
 800ec62:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 800ec66:	d001      	beq.n	800ec6c <HAL_SPDIFRX_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 800ec68:	b008      	add	sp, #32
 800ec6a:	bd70      	pop	{r4, r5, r6, pc}
 800ec6c:	4604      	mov	r4, r0
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800ec6e:	f503 33fc 	add.w	r3, r3, #129024	@ 0x1f800
 800ec72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ec74:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ec78:	641a      	str	r2, [r3, #64]	@ 0x40
 800ec7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ec7c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 800ec80:	9200      	str	r2, [sp, #0]
 800ec82:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ec84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec86:	f042 0204 	orr.w	r2, r2, #4
 800ec8a:	631a      	str	r2, [r3, #48]	@ 0x30
 800ec8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec8e:	f002 0204 	and.w	r2, r2, #4
 800ec92:	9201      	str	r2, [sp, #4]
 800ec94:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ec96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec98:	f042 0208 	orr.w	r2, r2, #8
 800ec9c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ec9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eca0:	f003 0308 	and.w	r3, r3, #8
 800eca4:	9302      	str	r3, [sp, #8]
 800eca6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800eca8:	2330      	movs	r3, #48	@ 0x30
 800ecaa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecac:	2502      	movs	r5, #2
 800ecae:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800ecb0:	2608      	movs	r6, #8
 800ecb2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ecb4:	a903      	add	r1, sp, #12
 800ecb6:	482a      	ldr	r0, [pc, #168]	@ (800ed60 <HAL_SPDIFRX_MspInit+0x110>)
 800ecb8:	f7f1 ffc2 	bl	8000c40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800ecbc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800ecc0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecc2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecc4:	2500      	movs	r5, #0
 800ecc6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecc8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800ecca:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800eccc:	a903      	add	r1, sp, #12
 800ecce:	4825      	ldr	r0, [pc, #148]	@ (800ed64 <HAL_SPDIFRX_MspInit+0x114>)
 800ecd0:	f7f1 ffb6 	bl	8000c40 <HAL_GPIO_Init>
    hdma_spdif_rx_dt.Instance = DMA1_Stream1;
 800ecd4:	4824      	ldr	r0, [pc, #144]	@ (800ed68 <HAL_SPDIFRX_MspInit+0x118>)
 800ecd6:	4b25      	ldr	r3, [pc, #148]	@ (800ed6c <HAL_SPDIFRX_MspInit+0x11c>)
 800ecd8:	6003      	str	r3, [r0, #0]
    hdma_spdif_rx_dt.Init.Channel = DMA_CHANNEL_0;
 800ecda:	6045      	str	r5, [r0, #4]
    hdma_spdif_rx_dt.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ecdc:	6085      	str	r5, [r0, #8]
    hdma_spdif_rx_dt.Init.PeriphInc = DMA_PINC_DISABLE;
 800ecde:	60c5      	str	r5, [r0, #12]
    hdma_spdif_rx_dt.Init.MemInc = DMA_MINC_ENABLE;
 800ece0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ece4:	6103      	str	r3, [r0, #16]
    hdma_spdif_rx_dt.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ece6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ecea:	6143      	str	r3, [r0, #20]
    hdma_spdif_rx_dt.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ecec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ecf0:	6183      	str	r3, [r0, #24]
    hdma_spdif_rx_dt.Init.Mode = DMA_CIRCULAR;
 800ecf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ecf6:	61c3      	str	r3, [r0, #28]
    hdma_spdif_rx_dt.Init.Priority = DMA_PRIORITY_HIGH;
 800ecf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ecfc:	6203      	str	r3, [r0, #32]
    hdma_spdif_rx_dt.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ecfe:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spdif_rx_dt) != HAL_OK)
 800ed00:	f7f1 fdac 	bl	800085c <HAL_DMA_Init>
 800ed04:	bb30      	cbnz	r0, 800ed54 <HAL_SPDIFRX_MspInit+0x104>
    __HAL_LINKDMA(spdifrxHandle,hdmaDrRx,hdma_spdif_rx_dt);
 800ed06:	4b18      	ldr	r3, [pc, #96]	@ (800ed68 <HAL_SPDIFRX_MspInit+0x118>)
 800ed08:	6423      	str	r3, [r4, #64]	@ 0x40
 800ed0a:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_spdif_rx_cs.Instance = DMA1_Stream6;
 800ed0c:	4818      	ldr	r0, [pc, #96]	@ (800ed70 <HAL_SPDIFRX_MspInit+0x120>)
 800ed0e:	4b19      	ldr	r3, [pc, #100]	@ (800ed74 <HAL_SPDIFRX_MspInit+0x124>)
 800ed10:	6003      	str	r3, [r0, #0]
    hdma_spdif_rx_cs.Init.Channel = DMA_CHANNEL_0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	6043      	str	r3, [r0, #4]
    hdma_spdif_rx_cs.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ed16:	6083      	str	r3, [r0, #8]
    hdma_spdif_rx_cs.Init.PeriphInc = DMA_PINC_DISABLE;
 800ed18:	60c3      	str	r3, [r0, #12]
    hdma_spdif_rx_cs.Init.MemInc = DMA_MINC_ENABLE;
 800ed1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ed1e:	6102      	str	r2, [r0, #16]
    hdma_spdif_rx_cs.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ed20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ed24:	6142      	str	r2, [r0, #20]
    hdma_spdif_rx_cs.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ed26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800ed2a:	6182      	str	r2, [r0, #24]
    hdma_spdif_rx_cs.Init.Mode = DMA_CIRCULAR;
 800ed2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ed30:	61c2      	str	r2, [r0, #28]
    hdma_spdif_rx_cs.Init.Priority = DMA_PRIORITY_LOW;
 800ed32:	6203      	str	r3, [r0, #32]
    hdma_spdif_rx_cs.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ed34:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spdif_rx_cs) != HAL_OK)
 800ed36:	f7f1 fd91 	bl	800085c <HAL_DMA_Init>
 800ed3a:	b970      	cbnz	r0, 800ed5a <HAL_SPDIFRX_MspInit+0x10a>
    __HAL_LINKDMA(spdifrxHandle,hdmaCsRx,hdma_spdif_rx_cs);
 800ed3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ed70 <HAL_SPDIFRX_MspInit+0x120>)
 800ed3e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ed40:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 5, 0);
 800ed42:	2200      	movs	r2, #0
 800ed44:	2105      	movs	r1, #5
 800ed46:	2061      	movs	r0, #97	@ 0x61
 800ed48:	f7f1 fcee 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
 800ed4c:	2061      	movs	r0, #97	@ 0x61
 800ed4e:	f7f1 fcfb 	bl	8000748 <HAL_NVIC_EnableIRQ>
}
 800ed52:	e789      	b.n	800ec68 <HAL_SPDIFRX_MspInit+0x18>
      Error_Handler();
 800ed54:	f7ff fdbe 	bl	800e8d4 <Error_Handler>
 800ed58:	e7d5      	b.n	800ed06 <HAL_SPDIFRX_MspInit+0xb6>
      Error_Handler();
 800ed5a:	f7ff fdbb 	bl	800e8d4 <Error_Handler>
 800ed5e:	e7ed      	b.n	800ed3c <HAL_SPDIFRX_MspInit+0xec>
 800ed60:	40020800 	.word	0x40020800
 800ed64:	40020c00 	.word	0x40020c00
 800ed68:	20017618 	.word	0x20017618
 800ed6c:	40026028 	.word	0x40026028
 800ed70:	200175b8 	.word	0x200175b8
 800ed74:	400260a0 	.word	0x400260a0

0800ed78 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800ed78:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800ed7a:	4810      	ldr	r0, [pc, #64]	@ (800edbc <MX_SPI1_Init+0x44>)
 800ed7c:	4b10      	ldr	r3, [pc, #64]	@ (800edc0 <MX_SPI1_Init+0x48>)
 800ed7e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ed80:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800ed84:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ed86:	2300      	movs	r3, #0
 800ed88:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ed8a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800ed8e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ed90:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ed92:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ed94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed98:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ed9a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ed9c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ed9e:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eda0:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800eda2:	2207      	movs	r2, #7
 800eda4:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800eda6:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800eda8:	2308      	movs	r3, #8
 800edaa:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800edac:	f7f5 f994 	bl	80040d8 <HAL_SPI_Init>
 800edb0:	b900      	cbnz	r0, 800edb4 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800edb2:	bd08      	pop	{r3, pc}
    Error_Handler();
 800edb4:	f7ff fd8e 	bl	800e8d4 <Error_Handler>
}
 800edb8:	e7fb      	b.n	800edb2 <MX_SPI1_Init+0x3a>
 800edba:	bf00      	nop
 800edbc:	2001784c 	.word	0x2001784c
 800edc0:	40013000 	.word	0x40013000

0800edc4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800edc4:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800edc6:	4810      	ldr	r0, [pc, #64]	@ (800ee08 <MX_SPI2_Init+0x44>)
 800edc8:	4b10      	ldr	r3, [pc, #64]	@ (800ee0c <MX_SPI2_Init+0x48>)
 800edca:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800edcc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800edd0:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800edd2:	2300      	movs	r3, #0
 800edd4:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800edd6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800edda:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800eddc:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800edde:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800ede0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ede4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800ede6:	2220      	movs	r2, #32
 800ede8:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800edea:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800edec:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800edee:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800edf0:	2207      	movs	r2, #7
 800edf2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800edf4:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800edf6:	2308      	movs	r3, #8
 800edf8:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800edfa:	f7f5 f96d 	bl	80040d8 <HAL_SPI_Init>
 800edfe:	b900      	cbnz	r0, 800ee02 <MX_SPI2_Init+0x3e>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800ee00:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ee02:	f7ff fd67 	bl	800e8d4 <Error_Handler>
}
 800ee06:	e7fb      	b.n	800ee00 <MX_SPI2_Init+0x3c>
 800ee08:	200177e8 	.word	0x200177e8
 800ee0c:	40003800 	.word	0x40003800

0800ee10 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800ee10:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800ee12:	4810      	ldr	r0, [pc, #64]	@ (800ee54 <MX_SPI3_Init+0x44>)
 800ee14:	4b10      	ldr	r3, [pc, #64]	@ (800ee58 <MX_SPI3_Init+0x48>)
 800ee16:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ee18:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800ee1c:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800ee22:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800ee26:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ee28:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ee2a:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800ee2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee30:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800ee32:	2210      	movs	r2, #16
 800ee34:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ee36:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800ee38:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee3a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800ee3c:	2207      	movs	r2, #7
 800ee3e:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800ee40:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ee42:	2308      	movs	r3, #8
 800ee44:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800ee46:	f7f5 f947 	bl	80040d8 <HAL_SPI_Init>
 800ee4a:	b900      	cbnz	r0, 800ee4e <MX_SPI3_Init+0x3e>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800ee4c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ee4e:	f7ff fd41 	bl	800e8d4 <Error_Handler>
}
 800ee52:	e7fb      	b.n	800ee4c <MX_SPI3_Init+0x3c>
 800ee54:	20017784 	.word	0x20017784
 800ee58:	40003c00 	.word	0x40003c00

0800ee5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800ee5c:	b530      	push	{r4, r5, lr}
 800ee5e:	b08d      	sub	sp, #52	@ 0x34
 800ee60:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee62:	2300      	movs	r3, #0
 800ee64:	9307      	str	r3, [sp, #28]
 800ee66:	9308      	str	r3, [sp, #32]
 800ee68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee6c:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(spiHandle->Instance==SPI1)
 800ee6e:	6803      	ldr	r3, [r0, #0]
 800ee70:	4a56      	ldr	r2, [pc, #344]	@ (800efcc <HAL_SPI_MspInit+0x170>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d007      	beq.n	800ee86 <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 800ee76:	4a56      	ldr	r2, [pc, #344]	@ (800efd0 <HAL_SPI_MspInit+0x174>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d045      	beq.n	800ef08 <HAL_SPI_MspInit+0xac>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 800ee7c:	4a55      	ldr	r2, [pc, #340]	@ (800efd4 <HAL_SPI_MspInit+0x178>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d063      	beq.n	800ef4a <HAL_SPI_MspInit+0xee>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800ee82:	b00d      	add	sp, #52	@ 0x34
 800ee84:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ee86:	4b54      	ldr	r3, [pc, #336]	@ (800efd8 <HAL_SPI_MspInit+0x17c>)
 800ee88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ee8e:	645a      	str	r2, [r3, #68]	@ 0x44
 800ee90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee92:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800ee96:	9201      	str	r2, [sp, #4]
 800ee98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee9c:	f042 0201 	orr.w	r2, r2, #1
 800eea0:	631a      	str	r2, [r3, #48]	@ 0x30
 800eea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eea4:	f003 0301 	and.w	r3, r3, #1
 800eea8:	9302      	str	r3, [sp, #8]
 800eeaa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 800eeac:	23e0      	movs	r3, #224	@ 0xe0
 800eeae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eeb0:	2302      	movs	r3, #2
 800eeb2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eeb4:	2503      	movs	r5, #3
 800eeb6:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800eeb8:	2305      	movs	r3, #5
 800eeba:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eebc:	a907      	add	r1, sp, #28
 800eebe:	4847      	ldr	r0, [pc, #284]	@ (800efdc <HAL_SPI_MspInit+0x180>)
 800eec0:	f7f1 febe 	bl	8000c40 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800eec4:	4846      	ldr	r0, [pc, #280]	@ (800efe0 <HAL_SPI_MspInit+0x184>)
 800eec6:	4b47      	ldr	r3, [pc, #284]	@ (800efe4 <HAL_SPI_MspInit+0x188>)
 800eec8:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800eeca:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 800eece:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800eed0:	2340      	movs	r3, #64	@ 0x40
 800eed2:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eed4:	2300      	movs	r3, #0
 800eed6:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800eed8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800eedc:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eede:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eee0:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800eee2:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800eee4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800eee8:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800eeea:	2204      	movs	r2, #4
 800eeec:	6242      	str	r2, [r0, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800eeee:	6285      	str	r5, [r0, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800eef0:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800eef2:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800eef4:	f7f1 fcb2 	bl	800085c <HAL_DMA_Init>
 800eef8:	b918      	cbnz	r0, 800ef02 <HAL_SPI_MspInit+0xa6>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800eefa:	4b39      	ldr	r3, [pc, #228]	@ (800efe0 <HAL_SPI_MspInit+0x184>)
 800eefc:	6563      	str	r3, [r4, #84]	@ 0x54
 800eefe:	639c      	str	r4, [r3, #56]	@ 0x38
 800ef00:	e7bf      	b.n	800ee82 <HAL_SPI_MspInit+0x26>
      Error_Handler();
 800ef02:	f7ff fce7 	bl	800e8d4 <Error_Handler>
 800ef06:	e7f8      	b.n	800eefa <HAL_SPI_MspInit+0x9e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ef08:	4b33      	ldr	r3, [pc, #204]	@ (800efd8 <HAL_SPI_MspInit+0x17c>)
 800ef0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ef0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ef10:	641a      	str	r2, [r3, #64]	@ 0x40
 800ef12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ef14:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800ef18:	9203      	str	r2, [sp, #12]
 800ef1a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ef1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ef1e:	f042 0202 	orr.w	r2, r2, #2
 800ef22:	631a      	str	r2, [r3, #48]	@ 0x30
 800ef24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef26:	f003 0302 	and.w	r3, r3, #2
 800ef2a:	9304      	str	r3, [sp, #16]
 800ef2c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 800ef2e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800ef32:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef34:	2302      	movs	r3, #2
 800ef36:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef38:	2303      	movs	r3, #3
 800ef3a:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ef3c:	2305      	movs	r3, #5
 800ef3e:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ef40:	a907      	add	r1, sp, #28
 800ef42:	4829      	ldr	r0, [pc, #164]	@ (800efe8 <HAL_SPI_MspInit+0x18c>)
 800ef44:	f7f1 fe7c 	bl	8000c40 <HAL_GPIO_Init>
 800ef48:	e79b      	b.n	800ee82 <HAL_SPI_MspInit+0x26>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800ef4a:	4b23      	ldr	r3, [pc, #140]	@ (800efd8 <HAL_SPI_MspInit+0x17c>)
 800ef4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ef4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ef52:	641a      	str	r2, [r3, #64]	@ 0x40
 800ef54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ef56:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800ef5a:	9205      	str	r2, [sp, #20]
 800ef5c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ef5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ef60:	f042 0204 	orr.w	r2, r2, #4
 800ef64:	631a      	str	r2, [r3, #48]	@ 0x30
 800ef66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef68:	f003 0304 	and.w	r3, r3, #4
 800ef6c:	9306      	str	r3, [sp, #24]
 800ef6e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GENSPI_SCK_Pin|GENSPI_MISO_Pin|GENSPI_MOSI_Pin;
 800ef70:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ef74:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef76:	2302      	movs	r3, #2
 800ef78:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef7a:	2503      	movs	r5, #3
 800ef7c:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ef7e:	2306      	movs	r3, #6
 800ef80:	930b      	str	r3, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ef82:	a907      	add	r1, sp, #28
 800ef84:	4819      	ldr	r0, [pc, #100]	@ (800efec <HAL_SPI_MspInit+0x190>)
 800ef86:	f7f1 fe5b 	bl	8000c40 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800ef8a:	4819      	ldr	r0, [pc, #100]	@ (800eff0 <HAL_SPI_MspInit+0x194>)
 800ef8c:	4b19      	ldr	r3, [pc, #100]	@ (800eff4 <HAL_SPI_MspInit+0x198>)
 800ef8e:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800ef90:	2300      	movs	r3, #0
 800ef92:	6043      	str	r3, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ef94:	2240      	movs	r2, #64	@ 0x40
 800ef96:	6082      	str	r2, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ef98:	60c3      	str	r3, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ef9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ef9e:	6102      	str	r2, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800efa0:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800efa2:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800efa4:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800efa6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800efaa:	6202      	str	r2, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800efac:	2204      	movs	r2, #4
 800efae:	6242      	str	r2, [r0, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800efb0:	6285      	str	r5, [r0, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800efb2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800efb4:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800efb6:	f7f1 fc51 	bl	800085c <HAL_DMA_Init>
 800efba:	b918      	cbnz	r0, 800efc4 <HAL_SPI_MspInit+0x168>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800efbc:	4b0c      	ldr	r3, [pc, #48]	@ (800eff0 <HAL_SPI_MspInit+0x194>)
 800efbe:	6563      	str	r3, [r4, #84]	@ 0x54
 800efc0:	639c      	str	r4, [r3, #56]	@ 0x38
}
 800efc2:	e75e      	b.n	800ee82 <HAL_SPI_MspInit+0x26>
      Error_Handler();
 800efc4:	f7ff fc86 	bl	800e8d4 <Error_Handler>
 800efc8:	e7f8      	b.n	800efbc <HAL_SPI_MspInit+0x160>
 800efca:	bf00      	nop
 800efcc:	40013000 	.word	0x40013000
 800efd0:	40003800 	.word	0x40003800
 800efd4:	40003c00 	.word	0x40003c00
 800efd8:	40023800 	.word	0x40023800
 800efdc:	40020000 	.word	0x40020000
 800efe0:	20017724 	.word	0x20017724
 800efe4:	40026458 	.word	0x40026458
 800efe8:	40020400 	.word	0x40020400
 800efec:	40020800 	.word	0x40020800
 800eff0:	200176c4 	.word	0x200176c4
 800eff4:	40026088 	.word	0x40026088

0800eff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800eff8:	b500      	push	{lr}
 800effa:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800effc:	4b0d      	ldr	r3, [pc, #52]	@ (800f034 <HAL_MspInit+0x3c>)
 800effe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f000:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800f004:	641a      	str	r2, [r3, #64]	@ 0x40
 800f006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f008:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800f00c:	9200      	str	r2, [sp, #0]
 800f00e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f012:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f016:	645a      	str	r2, [r3, #68]	@ 0x44
 800f018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f01a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f01e:	9301      	str	r3, [sp, #4]
 800f020:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800f022:	2200      	movs	r2, #0
 800f024:	210f      	movs	r1, #15
 800f026:	f06f 0001 	mvn.w	r0, #1
 800f02a:	f7f1 fb7d 	bl	8000728 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f02e:	b003      	add	sp, #12
 800f030:	f85d fb04 	ldr.w	pc, [sp], #4
 800f034:	40023800 	.word	0x40023800

0800f038 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f038:	b508      	push	{r3, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800f03a:	f7f1 fb0b 	bl	8000654 <HAL_IncTick>
}
 800f03e:	bd08      	pop	{r3, pc}

0800f040 <HAL_InitTick>:
{
 800f040:	b530      	push	{r4, r5, lr}
 800f042:	b089      	sub	sp, #36	@ 0x24
 800f044:	4604      	mov	r4, r0
  __HAL_RCC_TIM14_CLK_ENABLE();
 800f046:	4b24      	ldr	r3, [pc, #144]	@ (800f0d8 <HAL_InitTick+0x98>)
 800f048:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f04a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f04e:	641a      	str	r2, [r3, #64]	@ 0x40
 800f050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f056:	9301      	str	r3, [sp, #4]
 800f058:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800f05a:	a902      	add	r1, sp, #8
 800f05c:	a803      	add	r0, sp, #12
 800f05e:	f7f3 fc63 	bl	8002928 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800f062:	9b06      	ldr	r3, [sp, #24]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800f064:	b9f3      	cbnz	r3, 800f0a4 <HAL_InitTick+0x64>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800f066:	f7f3 fc3f 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 800f06a:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800f06c:	4a1b      	ldr	r2, [pc, #108]	@ (800f0dc <HAL_InitTick+0x9c>)
 800f06e:	fba2 2303 	umull	r2, r3, r2, r3
 800f072:	0c9b      	lsrs	r3, r3, #18
 800f074:	3b01      	subs	r3, #1
  htim14.Instance = TIM14;
 800f076:	481a      	ldr	r0, [pc, #104]	@ (800f0e0 <HAL_InitTick+0xa0>)
 800f078:	4a1a      	ldr	r2, [pc, #104]	@ (800f0e4 <HAL_InitTick+0xa4>)
 800f07a:	6002      	str	r2, [r0, #0]
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800f07c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800f080:	60c2      	str	r2, [r0, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800f082:	6043      	str	r3, [r0, #4]
  htim14.Init.ClockDivision = 0;
 800f084:	2300      	movs	r3, #0
 800f086:	6103      	str	r3, [r0, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f088:	6083      	str	r3, [r0, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f08a:	6183      	str	r3, [r0, #24]
  status = HAL_TIM_Base_Init(&htim14);
 800f08c:	f7f6 fcb2 	bl	80059f4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800f090:	4605      	mov	r5, r0
 800f092:	b158      	cbz	r0, 800f0ac <HAL_InitTick+0x6c>
  HAL_TIM_RegisterCallback(&htim14, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 800f094:	4a14      	ldr	r2, [pc, #80]	@ (800f0e8 <HAL_InitTick+0xa8>)
 800f096:	210e      	movs	r1, #14
 800f098:	4811      	ldr	r0, [pc, #68]	@ (800f0e0 <HAL_InitTick+0xa0>)
 800f09a:	f7f5 ff75 	bl	8004f88 <HAL_TIM_RegisterCallback>
}
 800f09e:	4628      	mov	r0, r5
 800f0a0:	b009      	add	sp, #36	@ 0x24
 800f0a2:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800f0a4:	f7f3 fc20 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 800f0a8:	0043      	lsls	r3, r0, #1
 800f0aa:	e7df      	b.n	800f06c <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim14);
 800f0ac:	480c      	ldr	r0, [pc, #48]	@ (800f0e0 <HAL_InitTick+0xa0>)
 800f0ae:	f7f5 fe3f 	bl	8004d30 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800f0b2:	4605      	mov	r5, r0
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d1ed      	bne.n	800f094 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800f0b8:	202d      	movs	r0, #45	@ 0x2d
 800f0ba:	f7f1 fb45 	bl	8000748 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f0be:	2c0f      	cmp	r4, #15
 800f0c0:	d901      	bls.n	800f0c6 <HAL_InitTick+0x86>
        status = HAL_ERROR;
 800f0c2:	2501      	movs	r5, #1
 800f0c4:	e7e6      	b.n	800f094 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	202d      	movs	r0, #45	@ 0x2d
 800f0cc:	f7f1 fb2c 	bl	8000728 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f0d0:	4b06      	ldr	r3, [pc, #24]	@ (800f0ec <HAL_InitTick+0xac>)
 800f0d2:	601c      	str	r4, [r3, #0]
 800f0d4:	e7de      	b.n	800f094 <HAL_InitTick+0x54>
 800f0d6:	bf00      	nop
 800f0d8:	40023800 	.word	0x40023800
 800f0dc:	431bde83 	.word	0x431bde83
 800f0e0:	200178b0 	.word	0x200178b0
 800f0e4:	40002000 	.word	0x40002000
 800f0e8:	0800f039 	.word	0x0800f039
 800f0ec:	20000004 	.word	0x20000004

0800f0f0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800f0f0:	4770      	bx	lr

0800f0f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f0f2:	e7fe      	b.n	800f0f2 <HardFault_Handler>

0800f0f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f0f4:	e7fe      	b.n	800f0f4 <MemManage_Handler>

0800f0f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f0f6:	e7fe      	b.n	800f0f6 <BusFault_Handler>

0800f0f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f0f8:	e7fe      	b.n	800f0f8 <UsageFault_Handler>

0800f0fa <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f0fa:	4770      	bx	lr

0800f0fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800f0fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800f0fe:	4802      	ldr	r0, [pc, #8]	@ (800f108 <DMA1_Stream0_IRQHandler+0xc>)
 800f100:	f7f1 fcac 	bl	8000a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800f104:	bd08      	pop	{r3, pc}
 800f106:	bf00      	nop
 800f108:	200172d8 	.word	0x200172d8

0800f10c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800f10c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spdif_rx_dt);
 800f10e:	4802      	ldr	r0, [pc, #8]	@ (800f118 <DMA1_Stream1_IRQHandler+0xc>)
 800f110:	f7f1 fca4 	bl	8000a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800f114:	bd08      	pop	{r3, pc}
 800f116:	bf00      	nop
 800f118:	20017618 	.word	0x20017618

0800f11c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800f11c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800f11e:	4802      	ldr	r0, [pc, #8]	@ (800f128 <DMA1_Stream5_IRQHandler+0xc>)
 800f120:	f7f1 fc9c 	bl	8000a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800f124:	bd08      	pop	{r3, pc}
 800f126:	bf00      	nop
 800f128:	200176c4 	.word	0x200176c4

0800f12c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800f12c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spdif_rx_cs);
 800f12e:	4802      	ldr	r0, [pc, #8]	@ (800f138 <DMA1_Stream6_IRQHandler+0xc>)
 800f130:	f7f1 fc94 	bl	8000a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800f134:	bd08      	pop	{r3, pc}
 800f136:	bf00      	nop
 800f138:	200175b8 	.word	0x200175b8

0800f13c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800f13c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SI_INT_Pin);
 800f13e:	2020      	movs	r0, #32
 800f140:	f7f1 fe96 	bl	8000e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800f144:	bd08      	pop	{r3, pc}
	...

0800f148 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800f148:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800f14a:	4803      	ldr	r0, [pc, #12]	@ (800f158 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800f14c:	f7f5 fe38 	bl	8004dc0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800f150:	4802      	ldr	r0, [pc, #8]	@ (800f15c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800f152:	f7f5 fe35 	bl	8004dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800f156:	bd08      	pop	{r3, pc}
 800f158:	20017b44 	.word	0x20017b44
 800f15c:	200179cc 	.word	0x200179cc

0800f160 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800f160:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800f162:	4802      	ldr	r0, [pc, #8]	@ (800f16c <TIM3_IRQHandler+0xc>)
 800f164:	f7f5 fe2c 	bl	8004dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800f168:	bd08      	pop	{r3, pc}
 800f16a:	bf00      	nop
 800f16c:	20017a88 	.word	0x20017a88

0800f170 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800f170:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800f172:	4802      	ldr	r0, [pc, #8]	@ (800f17c <I2C1_EV_IRQHandler+0xc>)
 800f174:	f7f2 fc8a 	bl	8001a8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800f178:	bd08      	pop	{r3, pc}
 800f17a:	bf00      	nop
 800f17c:	20017398 	.word	0x20017398

0800f180 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800f180:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800f182:	4802      	ldr	r0, [pc, #8]	@ (800f18c <I2C1_ER_IRQHandler+0xc>)
 800f184:	f7f2 ffa3 	bl	80020ce <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800f188:	bd08      	pop	{r3, pc}
 800f18a:	bf00      	nop
 800f18c:	20017398 	.word	0x20017398

0800f190 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800f190:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NUserButton_Pin);
 800f192:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800f196:	f7f1 fe6b 	bl	8000e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800f19a:	bd08      	pop	{r3, pc}

0800f19c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800f19c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800f19e:	4802      	ldr	r0, [pc, #8]	@ (800f1a8 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 800f1a0:	f7f5 fe0e 	bl	8004dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800f1a4:	bd08      	pop	{r3, pc}
 800f1a6:	bf00      	nop
 800f1a8:	200178b0 	.word	0x200178b0

0800f1ac <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800f1ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800f1ae:	4802      	ldr	r0, [pc, #8]	@ (800f1b8 <DMA1_Stream7_IRQHandler+0xc>)
 800f1b0:	f7f1 fc54 	bl	8000a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800f1b4:	bd08      	pop	{r3, pc}
 800f1b6:	bf00      	nop
 800f1b8:	20017338 	.word	0x20017338

0800f1bc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800f1bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800f1be:	4802      	ldr	r0, [pc, #8]	@ (800f1c8 <DMA2_Stream1_IRQHandler+0xc>)
 800f1c0:	f7f1 fc4c 	bl	8000a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800f1c4:	bd08      	pop	{r3, pc}
 800f1c6:	bf00      	nop
 800f1c8:	2001796c 	.word	0x2001796c

0800f1cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800f1cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800f1ce:	4802      	ldr	r0, [pc, #8]	@ (800f1d8 <DMA2_Stream2_IRQHandler+0xc>)
 800f1d0:	f7f1 fc44 	bl	8000a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800f1d4:	bd08      	pop	{r3, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20017450 	.word	0x20017450

0800f1dc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800f1dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800f1de:	4802      	ldr	r0, [pc, #8]	@ (800f1e8 <DMA2_Stream3_IRQHandler+0xc>)
 800f1e0:	f7f1 fc3c 	bl	8000a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800f1e4:	bd08      	pop	{r3, pc}
 800f1e6:	bf00      	nop
 800f1e8:	20017724 	.word	0x20017724

0800f1ec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800f1ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800f1ee:	4802      	ldr	r0, [pc, #8]	@ (800f1f8 <DMA2_Stream6_IRQHandler+0xc>)
 800f1f0:	f7f1 fc34 	bl	8000a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800f1f4:	bd08      	pop	{r3, pc}
 800f1f6:	bf00      	nop
 800f1f8:	200173f0 	.word	0x200173f0

0800f1fc <SPDIF_RX_IRQHandler>:

/**
  * @brief This function handles SPDIF-RX global interrupt.
  */
void SPDIF_RX_IRQHandler(void)
{
 800f1fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPDIF_RX_IRQn 0 */

  /* USER CODE END SPDIF_RX_IRQn 0 */
  HAL_SPDIFRX_IRQHandler(&hspdif);
 800f1fe:	4802      	ldr	r0, [pc, #8]	@ (800f208 <SPDIF_RX_IRQHandler+0xc>)
 800f200:	f7f4 fd9d 	bl	8003d3e <HAL_SPDIFRX_IRQHandler>
  /* USER CODE BEGIN SPDIF_RX_IRQn 1 */

  /* USER CODE END SPDIF_RX_IRQn 1 */
}
 800f204:	bd08      	pop	{r3, pc}
 800f206:	bf00      	nop
 800f208:	20017678 	.word	0x20017678

0800f20c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800f20c:	2001      	movs	r0, #1
 800f20e:	4770      	bx	lr

0800f210 <_kill>:

int _kill(int pid, int sig)
{
 800f210:	b508      	push	{r3, lr}
	errno = EINVAL;
 800f212:	f001 fa89 	bl	8010728 <__errno>
 800f216:	2316      	movs	r3, #22
 800f218:	6003      	str	r3, [r0, #0]
	return -1;
}
 800f21a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f21e:	bd08      	pop	{r3, pc}

0800f220 <_exit>:

void _exit (int status)
{
 800f220:	b508      	push	{r3, lr}
	_kill(status, -1);
 800f222:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800f226:	f7ff fff3 	bl	800f210 <_kill>
	while (1) {}		/* Make sure we hang here */
 800f22a:	e7fe      	b.n	800f22a <_exit+0xa>

0800f22c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f22c:	b570      	push	{r4, r5, r6, lr}
 800f22e:	460c      	mov	r4, r1
 800f230:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f232:	2500      	movs	r5, #0
 800f234:	e006      	b.n	800f244 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800f236:	f3af 8000 	nop.w
 800f23a:	4621      	mov	r1, r4
 800f23c:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f240:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800f242:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f244:	42b5      	cmp	r5, r6
 800f246:	dbf6      	blt.n	800f236 <_read+0xa>
	}

return len;
}
 800f248:	4630      	mov	r0, r6
 800f24a:	bd70      	pop	{r4, r5, r6, pc}

0800f24c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f24c:	b570      	push	{r4, r5, r6, lr}
 800f24e:	460c      	mov	r4, r1
 800f250:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f252:	2500      	movs	r5, #0
 800f254:	e004      	b.n	800f260 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800f256:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f25a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f25e:	3501      	adds	r5, #1
 800f260:	42b5      	cmp	r5, r6
 800f262:	dbf8      	blt.n	800f256 <_write+0xa>
	}
	return len;
}
 800f264:	4630      	mov	r0, r6
 800f266:	bd70      	pop	{r4, r5, r6, pc}

0800f268 <_close>:

int _close(int file)
{
	return -1;
}
 800f268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f26c:	4770      	bx	lr

0800f26e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800f26e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f272:	604b      	str	r3, [r1, #4]
	return 0;
}
 800f274:	2000      	movs	r0, #0
 800f276:	4770      	bx	lr

0800f278 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800f278:	2001      	movs	r0, #1
 800f27a:	4770      	bx	lr

0800f27c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800f27c:	2000      	movs	r0, #0
 800f27e:	4770      	bx	lr

0800f280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f280:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f282:	4a0f      	ldr	r2, [pc, #60]	@ (800f2c0 <SystemInit+0x40>)
 800f284:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f288:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f28c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f290:	4b0c      	ldr	r3, [pc, #48]	@ (800f2c4 <SystemInit+0x44>)
 800f292:	6819      	ldr	r1, [r3, #0]
 800f294:	f041 0101 	orr.w	r1, r1, #1
 800f298:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f29a:	2000      	movs	r0, #0
 800f29c:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800f29e:	681c      	ldr	r4, [r3, #0]
 800f2a0:	4909      	ldr	r1, [pc, #36]	@ (800f2c8 <SystemInit+0x48>)
 800f2a2:	4021      	ands	r1, r4
 800f2a4:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800f2a6:	4909      	ldr	r1, [pc, #36]	@ (800f2cc <SystemInit+0x4c>)
 800f2a8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f2aa:	6819      	ldr	r1, [r3, #0]
 800f2ac:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800f2b0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f2b2:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f2b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f2b8:	6093      	str	r3, [r2, #8]
#endif
}
 800f2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2be:	4770      	bx	lr
 800f2c0:	e000ed00 	.word	0xe000ed00
 800f2c4:	40023800 	.word	0x40023800
 800f2c8:	fef6ffff 	.word	0xfef6ffff
 800f2cc:	24003010 	.word	0x24003010

0800f2d0 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800f2d0:	b500      	push	{lr}
 800f2d2:	b091      	sub	sp, #68	@ 0x44

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f2d8:	930d      	str	r3, [sp, #52]	@ 0x34
 800f2da:	930e      	str	r3, [sp, #56]	@ 0x38
 800f2dc:	930f      	str	r3, [sp, #60]	@ 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800f2de:	9307      	str	r3, [sp, #28]
 800f2e0:	9308      	str	r3, [sp, #32]
 800f2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2e6:	930b      	str	r3, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f2e8:	9304      	str	r3, [sp, #16]
 800f2ea:	9305      	str	r3, [sp, #20]
 800f2ec:	9306      	str	r3, [sp, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	9301      	str	r3, [sp, #4]
 800f2f2:	9302      	str	r3, [sp, #8]
 800f2f4:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800f2f6:	4828      	ldr	r0, [pc, #160]	@ (800f398 <MX_TIM3_Init+0xc8>)
 800f2f8:	4a28      	ldr	r2, [pc, #160]	@ (800f39c <MX_TIM3_Init+0xcc>)
 800f2fa:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 107;
 800f2fc:	226b      	movs	r2, #107	@ 0x6b
 800f2fe:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f300:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 4999;
 800f302:	f241 3287 	movw	r2, #4999	@ 0x1387
 800f306:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f308:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f30a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800f30c:	f7f6 fb72 	bl	80059f4 <HAL_TIM_Base_Init>
 800f310:	2800      	cmp	r0, #0
 800f312:	d12f      	bne.n	800f374 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f318:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800f31a:	a90c      	add	r1, sp, #48	@ 0x30
 800f31c:	481e      	ldr	r0, [pc, #120]	@ (800f398 <MX_TIM3_Init+0xc8>)
 800f31e:	f7f6 f925 	bl	800556c <HAL_TIM_ConfigClockSource>
 800f322:	bb50      	cbnz	r0, 800f37a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800f324:	481c      	ldr	r0, [pc, #112]	@ (800f398 <MX_TIM3_Init+0xc8>)
 800f326:	f7f6 fbd9 	bl	8005adc <HAL_TIM_IC_Init>
 800f32a:	bb48      	cbnz	r0, 800f380 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800f32c:	2304      	movs	r3, #4
 800f32e:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800f330:	2350      	movs	r3, #80	@ 0x50
 800f332:	9308      	str	r3, [sp, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800f334:	230a      	movs	r3, #10
 800f336:	9309      	str	r3, [sp, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 800f338:	2300      	movs	r3, #0
 800f33a:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800f33c:	a907      	add	r1, sp, #28
 800f33e:	4816      	ldr	r0, [pc, #88]	@ (800f398 <MX_TIM3_Init+0xc8>)
 800f340:	f7f6 f9f2 	bl	8005728 <HAL_TIM_SlaveConfigSynchro>
 800f344:	b9f8      	cbnz	r0, 800f386 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f346:	2300      	movs	r3, #0
 800f348:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f34a:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f34c:	a904      	add	r1, sp, #16
 800f34e:	4812      	ldr	r0, [pc, #72]	@ (800f398 <MX_TIM3_Init+0xc8>)
 800f350:	f7f6 fbfe 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 800f354:	b9d0      	cbnz	r0, 800f38c <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800f356:	230a      	movs	r3, #10
 800f358:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f35a:	2301      	movs	r3, #1
 800f35c:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f35e:	2200      	movs	r2, #0
 800f360:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800f362:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f364:	4669      	mov	r1, sp
 800f366:	480c      	ldr	r0, [pc, #48]	@ (800f398 <MX_TIM3_Init+0xc8>)
 800f368:	f7f6 f88c 	bl	8005484 <HAL_TIM_IC_ConfigChannel>
 800f36c:	b988      	cbnz	r0, 800f392 <MX_TIM3_Init+0xc2>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800f36e:	b011      	add	sp, #68	@ 0x44
 800f370:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800f374:	f7ff faae 	bl	800e8d4 <Error_Handler>
 800f378:	e7cc      	b.n	800f314 <MX_TIM3_Init+0x44>
    Error_Handler();
 800f37a:	f7ff faab 	bl	800e8d4 <Error_Handler>
 800f37e:	e7d1      	b.n	800f324 <MX_TIM3_Init+0x54>
    Error_Handler();
 800f380:	f7ff faa8 	bl	800e8d4 <Error_Handler>
 800f384:	e7d2      	b.n	800f32c <MX_TIM3_Init+0x5c>
    Error_Handler();
 800f386:	f7ff faa5 	bl	800e8d4 <Error_Handler>
 800f38a:	e7dc      	b.n	800f346 <MX_TIM3_Init+0x76>
    Error_Handler();
 800f38c:	f7ff faa2 	bl	800e8d4 <Error_Handler>
 800f390:	e7e1      	b.n	800f356 <MX_TIM3_Init+0x86>
    Error_Handler();
 800f392:	f7ff fa9f 	bl	800e8d4 <Error_Handler>
}
 800f396:	e7ea      	b.n	800f36e <MX_TIM3_Init+0x9e>
 800f398:	20017a88 	.word	0x20017a88
 800f39c:	40000400 	.word	0x40000400

0800f3a0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800f3a0:	b500      	push	{lr}
 800f3a2:	b085      	sub	sp, #20

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	9301      	str	r3, [sp, #4]
 800f3aa:	9302      	str	r3, [sp, #8]
 800f3ac:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800f3ae:	4818      	ldr	r0, [pc, #96]	@ (800f410 <MX_TIM11_Init+0x70>)
 800f3b0:	4a18      	ldr	r2, [pc, #96]	@ (800f414 <MX_TIM11_Init+0x74>)
 800f3b2:	6002      	str	r2, [r0, #0]
  htim11.Init.Prescaler = 0;
 800f3b4:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f3b6:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 0xFFFF;
 800f3b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f3bc:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f3be:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f3c0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800f3c2:	f7f6 fb17 	bl	80059f4 <HAL_TIM_Base_Init>
 800f3c6:	b9b0      	cbnz	r0, 800f3f6 <MX_TIM11_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 800f3c8:	4811      	ldr	r0, [pc, #68]	@ (800f410 <MX_TIM11_Init+0x70>)
 800f3ca:	f7f6 fb87 	bl	8005adc <HAL_TIM_IC_Init>
 800f3ce:	b9a8      	cbnz	r0, 800f3fc <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f3d8:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800f3da:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f3dc:	4669      	mov	r1, sp
 800f3de:	480c      	ldr	r0, [pc, #48]	@ (800f410 <MX_TIM11_Init+0x70>)
 800f3e0:	f7f6 f850 	bl	8005484 <HAL_TIM_IC_ConfigChannel>
 800f3e4:	b968      	cbnz	r0, 800f402 <MX_TIM11_Init+0x62>
  {
    Error_Handler();
  }
  if (HAL_TIMEx_RemapConfig(&htim11, TIM_TIM11_SPDIFRX) != HAL_OK)
 800f3e6:	2101      	movs	r1, #1
 800f3e8:	4809      	ldr	r0, [pc, #36]	@ (800f410 <MX_TIM11_Init+0x70>)
 800f3ea:	f7f6 fc49 	bl	8005c80 <HAL_TIMEx_RemapConfig>
 800f3ee:	b958      	cbnz	r0, 800f408 <MX_TIM11_Init+0x68>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800f3f0:	b005      	add	sp, #20
 800f3f2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800f3f6:	f7ff fa6d 	bl	800e8d4 <Error_Handler>
 800f3fa:	e7e5      	b.n	800f3c8 <MX_TIM11_Init+0x28>
    Error_Handler();
 800f3fc:	f7ff fa6a 	bl	800e8d4 <Error_Handler>
 800f400:	e7e6      	b.n	800f3d0 <MX_TIM11_Init+0x30>
    Error_Handler();
 800f402:	f7ff fa67 	bl	800e8d4 <Error_Handler>
 800f406:	e7ee      	b.n	800f3e6 <MX_TIM11_Init+0x46>
    Error_Handler();
 800f408:	f7ff fa64 	bl	800e8d4 <Error_Handler>
}
 800f40c:	e7f0      	b.n	800f3f0 <MX_TIM11_Init+0x50>
 800f40e:	bf00      	nop
 800f410:	200179cc 	.word	0x200179cc
 800f414:	40014800 	.word	0x40014800

0800f418 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 800f418:	6802      	ldr	r2, [r0, #0]
 800f41a:	4b21      	ldr	r3, [pc, #132]	@ (800f4a0 <HAL_TIM_PWM_MspInit+0x88>)
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d000      	beq.n	800f422 <HAL_TIM_PWM_MspInit+0xa>
 800f420:	4770      	bx	lr
{
 800f422:	b510      	push	{r4, lr}
 800f424:	b082      	sub	sp, #8
 800f426:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800f428:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 800f42c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f42e:	f042 0201 	orr.w	r2, r2, #1
 800f432:	645a      	str	r2, [r3, #68]	@ 0x44
 800f434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f436:	f003 0301 	and.w	r3, r3, #1
 800f43a:	9301      	str	r3, [sp, #4]
 800f43c:	9b01      	ldr	r3, [sp, #4]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800f43e:	4819      	ldr	r0, [pc, #100]	@ (800f4a4 <HAL_TIM_PWM_MspInit+0x8c>)
 800f440:	4b19      	ldr	r3, [pc, #100]	@ (800f4a8 <HAL_TIM_PWM_MspInit+0x90>)
 800f442:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800f444:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 800f448:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f44a:	2340      	movs	r3, #64	@ 0x40
 800f44c:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f44e:	2300      	movs	r3, #0
 800f450:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800f452:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f456:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f45c:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f45e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f462:	6182      	str	r2, [r0, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800f464:	61c3      	str	r3, [r0, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800f466:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f46a:	6202      	str	r2, [r0, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800f46c:	2204      	movs	r2, #4
 800f46e:	6242      	str	r2, [r0, #36]	@ 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800f470:	2203      	movs	r2, #3
 800f472:	6282      	str	r2, [r0, #40]	@ 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 800f474:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800f476:	6303      	str	r3, [r0, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800f478:	f7f1 f9f0 	bl	800085c <HAL_DMA_Init>
 800f47c:	b960      	cbnz	r0, 800f498 <HAL_TIM_PWM_MspInit+0x80>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800f47e:	4b09      	ldr	r3, [pc, #36]	@ (800f4a4 <HAL_TIM_PWM_MspInit+0x8c>)
 800f480:	6263      	str	r3, [r4, #36]	@ 0x24
 800f482:	639c      	str	r4, [r3, #56]	@ 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800f484:	2200      	movs	r2, #0
 800f486:	2105      	movs	r1, #5
 800f488:	201a      	movs	r0, #26
 800f48a:	f7f1 f94d 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800f48e:	201a      	movs	r0, #26
 800f490:	f7f1 f95a 	bl	8000748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800f494:	b002      	add	sp, #8
 800f496:	bd10      	pop	{r4, pc}
      Error_Handler();
 800f498:	f7ff fa1c 	bl	800e8d4 <Error_Handler>
 800f49c:	e7ef      	b.n	800f47e <HAL_TIM_PWM_MspInit+0x66>
 800f49e:	bf00      	nop
 800f4a0:	40010000 	.word	0x40010000
 800f4a4:	2001796c 	.word	0x2001796c
 800f4a8:	40026428 	.word	0x40026428

0800f4ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800f4ac:	b500      	push	{lr}
 800f4ae:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	9303      	str	r3, [sp, #12]
 800f4b4:	9304      	str	r3, [sp, #16]
 800f4b6:	9305      	str	r3, [sp, #20]
 800f4b8:	9306      	str	r3, [sp, #24]
 800f4ba:	9307      	str	r3, [sp, #28]
  if(tim_baseHandle->Instance==TIM3)
 800f4bc:	6803      	ldr	r3, [r0, #0]
 800f4be:	4a20      	ldr	r2, [pc, #128]	@ (800f540 <HAL_TIM_Base_MspInit+0x94>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d005      	beq.n	800f4d0 <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM11)
 800f4c4:	4a1f      	ldr	r2, [pc, #124]	@ (800f544 <HAL_TIM_Base_MspInit+0x98>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d027      	beq.n	800f51a <HAL_TIM_Base_MspInit+0x6e>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800f4ca:	b009      	add	sp, #36	@ 0x24
 800f4cc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f4d0:	4b1d      	ldr	r3, [pc, #116]	@ (800f548 <HAL_TIM_Base_MspInit+0x9c>)
 800f4d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f4d4:	f042 0202 	orr.w	r2, r2, #2
 800f4d8:	641a      	str	r2, [r3, #64]	@ 0x40
 800f4da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f4dc:	f002 0202 	and.w	r2, r2, #2
 800f4e0:	9200      	str	r2, [sp, #0]
 800f4e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f4e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f4e6:	f042 0204 	orr.w	r2, r2, #4
 800f4ea:	631a      	str	r2, [r3, #48]	@ 0x30
 800f4ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4ee:	f003 0304 	and.w	r3, r3, #4
 800f4f2:	9301      	str	r3, [sp, #4]
 800f4f4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800f4f6:	2340      	movs	r3, #64	@ 0x40
 800f4f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4fa:	2302      	movs	r3, #2
 800f4fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f4fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f500:	a903      	add	r1, sp, #12
 800f502:	4812      	ldr	r0, [pc, #72]	@ (800f54c <HAL_TIM_Base_MspInit+0xa0>)
 800f504:	f7f1 fb9c 	bl	8000c40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800f508:	2200      	movs	r2, #0
 800f50a:	2105      	movs	r1, #5
 800f50c:	201d      	movs	r0, #29
 800f50e:	f7f1 f90b 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800f512:	201d      	movs	r0, #29
 800f514:	f7f1 f918 	bl	8000748 <HAL_NVIC_EnableIRQ>
 800f518:	e7d7      	b.n	800f4ca <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800f51a:	4b0b      	ldr	r3, [pc, #44]	@ (800f548 <HAL_TIM_Base_MspInit+0x9c>)
 800f51c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f51e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800f522:	645a      	str	r2, [r3, #68]	@ 0x44
 800f524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f526:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f52a:	9302      	str	r3, [sp, #8]
 800f52c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800f52e:	2200      	movs	r2, #0
 800f530:	2105      	movs	r1, #5
 800f532:	201a      	movs	r0, #26
 800f534:	f7f1 f8f8 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800f538:	201a      	movs	r0, #26
 800f53a:	f7f1 f905 	bl	8000748 <HAL_NVIC_EnableIRQ>
}
 800f53e:	e7c4      	b.n	800f4ca <HAL_TIM_Base_MspInit+0x1e>
 800f540:	40000400 	.word	0x40000400
 800f544:	40014800 	.word	0x40014800
 800f548:	40023800 	.word	0x40023800
 800f54c:	40020800 	.word	0x40020800

0800f550 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800f550:	b500      	push	{lr}
 800f552:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f554:	2300      	movs	r3, #0
 800f556:	9301      	str	r3, [sp, #4]
 800f558:	9302      	str	r3, [sp, #8]
 800f55a:	9303      	str	r3, [sp, #12]
 800f55c:	9304      	str	r3, [sp, #16]
 800f55e:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 800f560:	6802      	ldr	r2, [r0, #0]
 800f562:	4b0f      	ldr	r3, [pc, #60]	@ (800f5a0 <HAL_TIM_MspPostInit+0x50>)
 800f564:	429a      	cmp	r2, r3
 800f566:	d002      	beq.n	800f56e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800f568:	b007      	add	sp, #28
 800f56a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800f56e:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 800f572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f574:	f042 0210 	orr.w	r2, r2, #16
 800f578:	631a      	str	r2, [r3, #48]	@ 0x30
 800f57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f57c:	f003 0310 	and.w	r3, r3, #16
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
 800f584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f588:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f58a:	2302      	movs	r3, #2
 800f58c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800f58e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800f590:	2301      	movs	r3, #1
 800f592:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 800f594:	a901      	add	r1, sp, #4
 800f596:	4803      	ldr	r0, [pc, #12]	@ (800f5a4 <HAL_TIM_MspPostInit+0x54>)
 800f598:	f7f1 fb52 	bl	8000c40 <HAL_GPIO_Init>
}
 800f59c:	e7e4      	b.n	800f568 <HAL_TIM_MspPostInit+0x18>
 800f59e:	bf00      	nop
 800f5a0:	40010000 	.word	0x40010000
 800f5a4:	40021000 	.word	0x40021000

0800f5a8 <MX_TIM1_Init>:
{
 800f5a8:	b510      	push	{r4, lr}
 800f5aa:	b096      	sub	sp, #88	@ 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f5ac:	2400      	movs	r4, #0
 800f5ae:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f5b0:	9414      	str	r4, [sp, #80]	@ 0x50
 800f5b2:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f5b4:	940c      	str	r4, [sp, #48]	@ 0x30
 800f5b6:	940d      	str	r4, [sp, #52]	@ 0x34
 800f5b8:	940e      	str	r4, [sp, #56]	@ 0x38
 800f5ba:	940f      	str	r4, [sp, #60]	@ 0x3c
 800f5bc:	9410      	str	r4, [sp, #64]	@ 0x40
 800f5be:	9411      	str	r4, [sp, #68]	@ 0x44
 800f5c0:	9412      	str	r4, [sp, #72]	@ 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f5c2:	222c      	movs	r2, #44	@ 0x2c
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	a801      	add	r0, sp, #4
 800f5c8:	f000 ffdb 	bl	8010582 <memset>
  htim1.Instance = TIM1;
 800f5cc:	4826      	ldr	r0, [pc, #152]	@ (800f668 <MX_TIM1_Init+0xc0>)
 800f5ce:	4b27      	ldr	r3, [pc, #156]	@ (800f66c <MX_TIM1_Init+0xc4>)
 800f5d0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800f5d2:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f5d4:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 269;
 800f5d6:	f240 130d 	movw	r3, #269	@ 0x10d
 800f5da:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f5dc:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800f5de:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800f5e0:	2380      	movs	r3, #128	@ 0x80
 800f5e2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800f5e4:	f7f6 fa40 	bl	8005a68 <HAL_TIM_PWM_Init>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	d131      	bne.n	800f650 <MX_TIM1_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	9313      	str	r3, [sp, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f5f0:	9314      	str	r3, [sp, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f5f2:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800f5f4:	a913      	add	r1, sp, #76	@ 0x4c
 800f5f6:	481c      	ldr	r0, [pc, #112]	@ (800f668 <MX_TIM1_Init+0xc0>)
 800f5f8:	f7f6 faaa 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d12a      	bne.n	800f656 <MX_TIM1_Init+0xae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f600:	2360      	movs	r3, #96	@ 0x60
 800f602:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800f604:	2200      	movs	r2, #0
 800f606:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f608:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f60a:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f60c:	9210      	str	r2, [sp, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f60e:	9211      	str	r2, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f610:	9212      	str	r2, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f612:	a90c      	add	r1, sp, #48	@ 0x30
 800f614:	4814      	ldr	r0, [pc, #80]	@ (800f668 <MX_TIM1_Init+0xc0>)
 800f616:	f7f5 fe4d 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 800f61a:	b9f8      	cbnz	r0, 800f65c <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f61c:	2300      	movs	r3, #0
 800f61e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f620:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f622:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f624:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f626:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f62c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f62e:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f630:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f632:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800f636:	9209      	str	r2, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f638:	930a      	str	r3, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f63a:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800f63c:	a901      	add	r1, sp, #4
 800f63e:	480a      	ldr	r0, [pc, #40]	@ (800f668 <MX_TIM1_Init+0xc0>)
 800f640:	f7f6 fad6 	bl	8005bf0 <HAL_TIMEx_ConfigBreakDeadTime>
 800f644:	b968      	cbnz	r0, 800f662 <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 800f646:	4808      	ldr	r0, [pc, #32]	@ (800f668 <MX_TIM1_Init+0xc0>)
 800f648:	f7ff ff82 	bl	800f550 <HAL_TIM_MspPostInit>
}
 800f64c:	b016      	add	sp, #88	@ 0x58
 800f64e:	bd10      	pop	{r4, pc}
    Error_Handler();
 800f650:	f7ff f940 	bl	800e8d4 <Error_Handler>
 800f654:	e7ca      	b.n	800f5ec <MX_TIM1_Init+0x44>
    Error_Handler();
 800f656:	f7ff f93d 	bl	800e8d4 <Error_Handler>
 800f65a:	e7d1      	b.n	800f600 <MX_TIM1_Init+0x58>
    Error_Handler();
 800f65c:	f7ff f93a 	bl	800e8d4 <Error_Handler>
 800f660:	e7dc      	b.n	800f61c <MX_TIM1_Init+0x74>
    Error_Handler();
 800f662:	f7ff f937 	bl	800e8d4 <Error_Handler>
 800f666:	e7ee      	b.n	800f646 <MX_TIM1_Init+0x9e>
 800f668:	20017b44 	.word	0x20017b44
 800f66c:	40010000 	.word	0x40010000

0800f670 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800f670:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800f672:	480b      	ldr	r0, [pc, #44]	@ (800f6a0 <MX_USART3_UART_Init+0x30>)
 800f674:	4b0b      	ldr	r3, [pc, #44]	@ (800f6a4 <MX_USART3_UART_Init+0x34>)
 800f676:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800f678:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800f67c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800f67e:	2300      	movs	r3, #0
 800f680:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800f682:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800f684:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800f686:	220c      	movs	r2, #12
 800f688:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f68a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800f68c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f68e:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f690:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800f692:	f7f6 fde4 	bl	800625e <HAL_UART_Init>
 800f696:	b900      	cbnz	r0, 800f69a <MX_USART3_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800f698:	bd08      	pop	{r3, pc}
    Error_Handler();
 800f69a:	f7ff f91b 	bl	800e8d4 <Error_Handler>
}
 800f69e:	e7fb      	b.n	800f698 <MX_USART3_UART_Init+0x28>
 800f6a0:	20017c00 	.word	0x20017c00
 800f6a4:	40004800 	.word	0x40004800

0800f6a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800f6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6aa:	b0ad      	sub	sp, #180	@ 0xb4
 800f6ac:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6ae:	2100      	movs	r1, #0
 800f6b0:	9127      	str	r1, [sp, #156]	@ 0x9c
 800f6b2:	9128      	str	r1, [sp, #160]	@ 0xa0
 800f6b4:	9129      	str	r1, [sp, #164]	@ 0xa4
 800f6b6:	912a      	str	r1, [sp, #168]	@ 0xa8
 800f6b8:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f6ba:	2290      	movs	r2, #144	@ 0x90
 800f6bc:	a803      	add	r0, sp, #12
 800f6be:	f000 ff60 	bl	8010582 <memset>
  if(uartHandle->Instance==USART3)
 800f6c2:	6822      	ldr	r2, [r4, #0]
 800f6c4:	4b23      	ldr	r3, [pc, #140]	@ (800f754 <HAL_UART_MspInit+0xac>)
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d001      	beq.n	800f6ce <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800f6ca:	b02d      	add	sp, #180	@ 0xb4
 800f6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800f6ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f6d2:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f6d4:	a803      	add	r0, sp, #12
 800f6d6:	f7f3 f945 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 800f6da:	2800      	cmp	r0, #0
 800f6dc:	d136      	bne.n	800f74c <HAL_UART_MspInit+0xa4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800f6de:	4b1e      	ldr	r3, [pc, #120]	@ (800f758 <HAL_UART_MspInit+0xb0>)
 800f6e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f6e2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800f6e6:	641a      	str	r2, [r3, #64]	@ 0x40
 800f6e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f6ea:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800f6ee:	9200      	str	r2, [sp, #0]
 800f6f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f6f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f6f4:	f042 0202 	orr.w	r2, r2, #2
 800f6f8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f6fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f6fc:	f002 0202 	and.w	r2, r2, #2
 800f700:	9201      	str	r2, [sp, #4]
 800f702:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f706:	f042 0208 	orr.w	r2, r2, #8
 800f70a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f70c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f70e:	f003 0308 	and.w	r3, r3, #8
 800f712:	9302      	str	r3, [sp, #8]
 800f714:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800f716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f71a:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f71c:	2702      	movs	r7, #2
 800f71e:	9728      	str	r7, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f720:	2600      	movs	r6, #0
 800f722:	9629      	str	r6, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f724:	2503      	movs	r5, #3
 800f726:	952a      	str	r5, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f728:	2407      	movs	r4, #7
 800f72a:	942b      	str	r4, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f72c:	a927      	add	r1, sp, #156	@ 0x9c
 800f72e:	480b      	ldr	r0, [pc, #44]	@ (800f75c <HAL_UART_MspInit+0xb4>)
 800f730:	f7f1 fa86 	bl	8000c40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f734:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f738:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f73a:	9728      	str	r7, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f73c:	9629      	str	r6, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f73e:	952a      	str	r5, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f740:	942b      	str	r4, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f742:	a927      	add	r1, sp, #156	@ 0x9c
 800f744:	4806      	ldr	r0, [pc, #24]	@ (800f760 <HAL_UART_MspInit+0xb8>)
 800f746:	f7f1 fa7b 	bl	8000c40 <HAL_GPIO_Init>
}
 800f74a:	e7be      	b.n	800f6ca <HAL_UART_MspInit+0x22>
      Error_Handler();
 800f74c:	f7ff f8c2 	bl	800e8d4 <Error_Handler>
 800f750:	e7c5      	b.n	800f6de <HAL_UART_MspInit+0x36>
 800f752:	bf00      	nop
 800f754:	40004800 	.word	0x40004800
 800f758:	40023800 	.word	0x40023800
 800f75c:	40020400 	.word	0x40020400
 800f760:	40020c00 	.word	0x40020c00

0800f764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800f764:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800f79c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f768:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f76a:	e003      	b.n	800f774 <LoopCopyDataInit>

0800f76c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f76c:	4b0c      	ldr	r3, [pc, #48]	@ (800f7a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f76e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f770:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f772:	3104      	adds	r1, #4

0800f774 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f774:	480b      	ldr	r0, [pc, #44]	@ (800f7a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f776:	4b0c      	ldr	r3, [pc, #48]	@ (800f7a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f778:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f77a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f77c:	d3f6      	bcc.n	800f76c <CopyDataInit>
  ldr  r2, =_sbss
 800f77e:	4a0b      	ldr	r2, [pc, #44]	@ (800f7ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f780:	e002      	b.n	800f788 <LoopFillZerobss>

0800f782 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f782:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f784:	f842 3b04 	str.w	r3, [r2], #4

0800f788 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f788:	4b09      	ldr	r3, [pc, #36]	@ (800f7b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f78a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f78c:	d3f9      	bcc.n	800f782 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800f78e:	f7ff fd77 	bl	800f280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f792:	f000 ffcf 	bl	8010734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f796:	f7ff f923 	bl	800e9e0 <main>
  bx  lr    
 800f79a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f79c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800f7a0:	08014174 	.word	0x08014174
  ldr  r0, =_sdata
 800f7a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f7a8:	200005c8 	.word	0x200005c8
  ldr  r2, =_sbss
 800f7ac:	200005e0 	.word	0x200005e0
  ldr  r3, = _ebss
 800f7b0:	20017dd8 	.word	0x20017dd8

0800f7b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f7b4:	e7fe      	b.n	800f7b4 <ADC_IRQHandler>
	...

0800f7b8 <calloc>:
 800f7b8:	4b02      	ldr	r3, [pc, #8]	@ (800f7c4 <calloc+0xc>)
 800f7ba:	460a      	mov	r2, r1
 800f7bc:	4601      	mov	r1, r0
 800f7be:	6818      	ldr	r0, [r3, #0]
 800f7c0:	f000 b802 	b.w	800f7c8 <_calloc_r>
 800f7c4:	2000040c 	.word	0x2000040c

0800f7c8 <_calloc_r>:
 800f7c8:	b570      	push	{r4, r5, r6, lr}
 800f7ca:	fba1 5402 	umull	r5, r4, r1, r2
 800f7ce:	b934      	cbnz	r4, 800f7de <_calloc_r+0x16>
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	f000 f83f 	bl	800f854 <_malloc_r>
 800f7d6:	4606      	mov	r6, r0
 800f7d8:	b928      	cbnz	r0, 800f7e6 <_calloc_r+0x1e>
 800f7da:	4630      	mov	r0, r6
 800f7dc:	bd70      	pop	{r4, r5, r6, pc}
 800f7de:	220c      	movs	r2, #12
 800f7e0:	6002      	str	r2, [r0, #0]
 800f7e2:	2600      	movs	r6, #0
 800f7e4:	e7f9      	b.n	800f7da <_calloc_r+0x12>
 800f7e6:	462a      	mov	r2, r5
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	f000 feca 	bl	8010582 <memset>
 800f7ee:	e7f4      	b.n	800f7da <_calloc_r+0x12>

0800f7f0 <malloc>:
 800f7f0:	4b02      	ldr	r3, [pc, #8]	@ (800f7fc <malloc+0xc>)
 800f7f2:	4601      	mov	r1, r0
 800f7f4:	6818      	ldr	r0, [r3, #0]
 800f7f6:	f000 b82d 	b.w	800f854 <_malloc_r>
 800f7fa:	bf00      	nop
 800f7fc:	2000040c 	.word	0x2000040c

0800f800 <free>:
 800f800:	4b02      	ldr	r3, [pc, #8]	@ (800f80c <free+0xc>)
 800f802:	4601      	mov	r1, r0
 800f804:	6818      	ldr	r0, [r3, #0]
 800f806:	f001 be09 	b.w	801141c <_free_r>
 800f80a:	bf00      	nop
 800f80c:	2000040c 	.word	0x2000040c

0800f810 <sbrk_aligned>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	4e0f      	ldr	r6, [pc, #60]	@ (800f850 <sbrk_aligned+0x40>)
 800f814:	460c      	mov	r4, r1
 800f816:	6831      	ldr	r1, [r6, #0]
 800f818:	4605      	mov	r5, r0
 800f81a:	b911      	cbnz	r1, 800f822 <sbrk_aligned+0x12>
 800f81c:	f000 ff62 	bl	80106e4 <_sbrk_r>
 800f820:	6030      	str	r0, [r6, #0]
 800f822:	4621      	mov	r1, r4
 800f824:	4628      	mov	r0, r5
 800f826:	f000 ff5d 	bl	80106e4 <_sbrk_r>
 800f82a:	1c43      	adds	r3, r0, #1
 800f82c:	d103      	bne.n	800f836 <sbrk_aligned+0x26>
 800f82e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f832:	4620      	mov	r0, r4
 800f834:	bd70      	pop	{r4, r5, r6, pc}
 800f836:	1cc4      	adds	r4, r0, #3
 800f838:	f024 0403 	bic.w	r4, r4, #3
 800f83c:	42a0      	cmp	r0, r4
 800f83e:	d0f8      	beq.n	800f832 <sbrk_aligned+0x22>
 800f840:	1a21      	subs	r1, r4, r0
 800f842:	4628      	mov	r0, r5
 800f844:	f000 ff4e 	bl	80106e4 <_sbrk_r>
 800f848:	3001      	adds	r0, #1
 800f84a:	d1f2      	bne.n	800f832 <sbrk_aligned+0x22>
 800f84c:	e7ef      	b.n	800f82e <sbrk_aligned+0x1e>
 800f84e:	bf00      	nop
 800f850:	20017c88 	.word	0x20017c88

0800f854 <_malloc_r>:
 800f854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f858:	1ccd      	adds	r5, r1, #3
 800f85a:	f025 0503 	bic.w	r5, r5, #3
 800f85e:	3508      	adds	r5, #8
 800f860:	2d0c      	cmp	r5, #12
 800f862:	bf38      	it	cc
 800f864:	250c      	movcc	r5, #12
 800f866:	2d00      	cmp	r5, #0
 800f868:	4606      	mov	r6, r0
 800f86a:	db01      	blt.n	800f870 <_malloc_r+0x1c>
 800f86c:	42a9      	cmp	r1, r5
 800f86e:	d904      	bls.n	800f87a <_malloc_r+0x26>
 800f870:	230c      	movs	r3, #12
 800f872:	6033      	str	r3, [r6, #0]
 800f874:	2000      	movs	r0, #0
 800f876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f87a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f950 <_malloc_r+0xfc>
 800f87e:	f000 f869 	bl	800f954 <__malloc_lock>
 800f882:	f8d8 3000 	ldr.w	r3, [r8]
 800f886:	461c      	mov	r4, r3
 800f888:	bb44      	cbnz	r4, 800f8dc <_malloc_r+0x88>
 800f88a:	4629      	mov	r1, r5
 800f88c:	4630      	mov	r0, r6
 800f88e:	f7ff ffbf 	bl	800f810 <sbrk_aligned>
 800f892:	1c43      	adds	r3, r0, #1
 800f894:	4604      	mov	r4, r0
 800f896:	d158      	bne.n	800f94a <_malloc_r+0xf6>
 800f898:	f8d8 4000 	ldr.w	r4, [r8]
 800f89c:	4627      	mov	r7, r4
 800f89e:	2f00      	cmp	r7, #0
 800f8a0:	d143      	bne.n	800f92a <_malloc_r+0xd6>
 800f8a2:	2c00      	cmp	r4, #0
 800f8a4:	d04b      	beq.n	800f93e <_malloc_r+0xea>
 800f8a6:	6823      	ldr	r3, [r4, #0]
 800f8a8:	4639      	mov	r1, r7
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	eb04 0903 	add.w	r9, r4, r3
 800f8b0:	f000 ff18 	bl	80106e4 <_sbrk_r>
 800f8b4:	4581      	cmp	r9, r0
 800f8b6:	d142      	bne.n	800f93e <_malloc_r+0xea>
 800f8b8:	6821      	ldr	r1, [r4, #0]
 800f8ba:	1a6d      	subs	r5, r5, r1
 800f8bc:	4629      	mov	r1, r5
 800f8be:	4630      	mov	r0, r6
 800f8c0:	f7ff ffa6 	bl	800f810 <sbrk_aligned>
 800f8c4:	3001      	adds	r0, #1
 800f8c6:	d03a      	beq.n	800f93e <_malloc_r+0xea>
 800f8c8:	6823      	ldr	r3, [r4, #0]
 800f8ca:	442b      	add	r3, r5
 800f8cc:	6023      	str	r3, [r4, #0]
 800f8ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f8d2:	685a      	ldr	r2, [r3, #4]
 800f8d4:	bb62      	cbnz	r2, 800f930 <_malloc_r+0xdc>
 800f8d6:	f8c8 7000 	str.w	r7, [r8]
 800f8da:	e00f      	b.n	800f8fc <_malloc_r+0xa8>
 800f8dc:	6822      	ldr	r2, [r4, #0]
 800f8de:	1b52      	subs	r2, r2, r5
 800f8e0:	d420      	bmi.n	800f924 <_malloc_r+0xd0>
 800f8e2:	2a0b      	cmp	r2, #11
 800f8e4:	d917      	bls.n	800f916 <_malloc_r+0xc2>
 800f8e6:	1961      	adds	r1, r4, r5
 800f8e8:	42a3      	cmp	r3, r4
 800f8ea:	6025      	str	r5, [r4, #0]
 800f8ec:	bf18      	it	ne
 800f8ee:	6059      	strne	r1, [r3, #4]
 800f8f0:	6863      	ldr	r3, [r4, #4]
 800f8f2:	bf08      	it	eq
 800f8f4:	f8c8 1000 	streq.w	r1, [r8]
 800f8f8:	5162      	str	r2, [r4, r5]
 800f8fa:	604b      	str	r3, [r1, #4]
 800f8fc:	4630      	mov	r0, r6
 800f8fe:	f000 f82f 	bl	800f960 <__malloc_unlock>
 800f902:	f104 000b 	add.w	r0, r4, #11
 800f906:	1d23      	adds	r3, r4, #4
 800f908:	f020 0007 	bic.w	r0, r0, #7
 800f90c:	1ac2      	subs	r2, r0, r3
 800f90e:	bf1c      	itt	ne
 800f910:	1a1b      	subne	r3, r3, r0
 800f912:	50a3      	strne	r3, [r4, r2]
 800f914:	e7af      	b.n	800f876 <_malloc_r+0x22>
 800f916:	6862      	ldr	r2, [r4, #4]
 800f918:	42a3      	cmp	r3, r4
 800f91a:	bf0c      	ite	eq
 800f91c:	f8c8 2000 	streq.w	r2, [r8]
 800f920:	605a      	strne	r2, [r3, #4]
 800f922:	e7eb      	b.n	800f8fc <_malloc_r+0xa8>
 800f924:	4623      	mov	r3, r4
 800f926:	6864      	ldr	r4, [r4, #4]
 800f928:	e7ae      	b.n	800f888 <_malloc_r+0x34>
 800f92a:	463c      	mov	r4, r7
 800f92c:	687f      	ldr	r7, [r7, #4]
 800f92e:	e7b6      	b.n	800f89e <_malloc_r+0x4a>
 800f930:	461a      	mov	r2, r3
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	42a3      	cmp	r3, r4
 800f936:	d1fb      	bne.n	800f930 <_malloc_r+0xdc>
 800f938:	2300      	movs	r3, #0
 800f93a:	6053      	str	r3, [r2, #4]
 800f93c:	e7de      	b.n	800f8fc <_malloc_r+0xa8>
 800f93e:	230c      	movs	r3, #12
 800f940:	6033      	str	r3, [r6, #0]
 800f942:	4630      	mov	r0, r6
 800f944:	f000 f80c 	bl	800f960 <__malloc_unlock>
 800f948:	e794      	b.n	800f874 <_malloc_r+0x20>
 800f94a:	6005      	str	r5, [r0, #0]
 800f94c:	e7d6      	b.n	800f8fc <_malloc_r+0xa8>
 800f94e:	bf00      	nop
 800f950:	20017c8c 	.word	0x20017c8c

0800f954 <__malloc_lock>:
 800f954:	4801      	ldr	r0, [pc, #4]	@ (800f95c <__malloc_lock+0x8>)
 800f956:	f000 bf12 	b.w	801077e <__retarget_lock_acquire_recursive>
 800f95a:	bf00      	nop
 800f95c:	20017dd0 	.word	0x20017dd0

0800f960 <__malloc_unlock>:
 800f960:	4801      	ldr	r0, [pc, #4]	@ (800f968 <__malloc_unlock+0x8>)
 800f962:	f000 bf0d 	b.w	8010780 <__retarget_lock_release_recursive>
 800f966:	bf00      	nop
 800f968:	20017dd0 	.word	0x20017dd0

0800f96c <realloc>:
 800f96c:	4b02      	ldr	r3, [pc, #8]	@ (800f978 <realloc+0xc>)
 800f96e:	460a      	mov	r2, r1
 800f970:	4601      	mov	r1, r0
 800f972:	6818      	ldr	r0, [r3, #0]
 800f974:	f000 b802 	b.w	800f97c <_realloc_r>
 800f978:	2000040c 	.word	0x2000040c

0800f97c <_realloc_r>:
 800f97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f980:	4607      	mov	r7, r0
 800f982:	4614      	mov	r4, r2
 800f984:	460d      	mov	r5, r1
 800f986:	b921      	cbnz	r1, 800f992 <_realloc_r+0x16>
 800f988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f98c:	4611      	mov	r1, r2
 800f98e:	f7ff bf61 	b.w	800f854 <_malloc_r>
 800f992:	b92a      	cbnz	r2, 800f9a0 <_realloc_r+0x24>
 800f994:	f001 fd42 	bl	801141c <_free_r>
 800f998:	4625      	mov	r5, r4
 800f99a:	4628      	mov	r0, r5
 800f99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9a0:	f002 f900 	bl	8011ba4 <_malloc_usable_size_r>
 800f9a4:	4284      	cmp	r4, r0
 800f9a6:	4606      	mov	r6, r0
 800f9a8:	d802      	bhi.n	800f9b0 <_realloc_r+0x34>
 800f9aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f9ae:	d8f4      	bhi.n	800f99a <_realloc_r+0x1e>
 800f9b0:	4621      	mov	r1, r4
 800f9b2:	4638      	mov	r0, r7
 800f9b4:	f7ff ff4e 	bl	800f854 <_malloc_r>
 800f9b8:	4680      	mov	r8, r0
 800f9ba:	b908      	cbnz	r0, 800f9c0 <_realloc_r+0x44>
 800f9bc:	4645      	mov	r5, r8
 800f9be:	e7ec      	b.n	800f99a <_realloc_r+0x1e>
 800f9c0:	42b4      	cmp	r4, r6
 800f9c2:	4622      	mov	r2, r4
 800f9c4:	4629      	mov	r1, r5
 800f9c6:	bf28      	it	cs
 800f9c8:	4632      	movcs	r2, r6
 800f9ca:	f000 feda 	bl	8010782 <memcpy>
 800f9ce:	4629      	mov	r1, r5
 800f9d0:	4638      	mov	r0, r7
 800f9d2:	f001 fd23 	bl	801141c <_free_r>
 800f9d6:	e7f1      	b.n	800f9bc <_realloc_r+0x40>

0800f9d8 <__cvt>:
 800f9d8:	b570      	push	{r4, r5, r6, lr}
 800f9da:	ed2d 8b02 	vpush	{d8}
 800f9de:	ec43 2b18 	vmov	d8, r2, r3
 800f9e2:	b088      	sub	sp, #32
 800f9e4:	ee18 3a90 	vmov	r3, s17
 800f9e8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 800f9ea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f9ec:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800f9ee:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f025 0520 	bic.w	r5, r5, #32
 800f9f6:	bfb6      	itet	lt
 800f9f8:	232d      	movlt	r3, #45	@ 0x2d
 800f9fa:	2300      	movge	r3, #0
 800f9fc:	eeb1 8b48 	vneglt.f64	d8, d8
 800fa00:	2d46      	cmp	r5, #70	@ 0x46
 800fa02:	7013      	strb	r3, [r2, #0]
 800fa04:	d004      	beq.n	800fa10 <__cvt+0x38>
 800fa06:	2d45      	cmp	r5, #69	@ 0x45
 800fa08:	d100      	bne.n	800fa0c <__cvt+0x34>
 800fa0a:	3401      	adds	r4, #1
 800fa0c:	2302      	movs	r3, #2
 800fa0e:	e000      	b.n	800fa12 <__cvt+0x3a>
 800fa10:	2303      	movs	r3, #3
 800fa12:	aa07      	add	r2, sp, #28
 800fa14:	9204      	str	r2, [sp, #16]
 800fa16:	aa06      	add	r2, sp, #24
 800fa18:	e9cd 6202 	strd	r6, r2, [sp, #8]
 800fa1c:	e9cd 3400 	strd	r3, r4, [sp]
 800fa20:	ec53 2b18 	vmov	r2, r3, d8
 800fa24:	f000 ff9c 	bl	8010960 <_dtoa_r>
 800fa28:	2d47      	cmp	r5, #71	@ 0x47
 800fa2a:	d115      	bne.n	800fa58 <__cvt+0x80>
 800fa2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa2e:	07db      	lsls	r3, r3, #31
 800fa30:	d50a      	bpl.n	800fa48 <__cvt+0x70>
 800fa32:	1903      	adds	r3, r0, r4
 800fa34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa3c:	bf08      	it	eq
 800fa3e:	9307      	streq	r3, [sp, #28]
 800fa40:	2130      	movs	r1, #48	@ 0x30
 800fa42:	9a07      	ldr	r2, [sp, #28]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d319      	bcc.n	800fa7c <__cvt+0xa4>
 800fa48:	9b07      	ldr	r3, [sp, #28]
 800fa4a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa4c:	1a1b      	subs	r3, r3, r0
 800fa4e:	6013      	str	r3, [r2, #0]
 800fa50:	b008      	add	sp, #32
 800fa52:	ecbd 8b02 	vpop	{d8}
 800fa56:	bd70      	pop	{r4, r5, r6, pc}
 800fa58:	2d46      	cmp	r5, #70	@ 0x46
 800fa5a:	eb00 0304 	add.w	r3, r0, r4
 800fa5e:	d1e9      	bne.n	800fa34 <__cvt+0x5c>
 800fa60:	7802      	ldrb	r2, [r0, #0]
 800fa62:	2a30      	cmp	r2, #48	@ 0x30
 800fa64:	d107      	bne.n	800fa76 <__cvt+0x9e>
 800fa66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6e:	bf1c      	itt	ne
 800fa70:	f1c4 0401 	rsbne	r4, r4, #1
 800fa74:	6034      	strne	r4, [r6, #0]
 800fa76:	6832      	ldr	r2, [r6, #0]
 800fa78:	4413      	add	r3, r2
 800fa7a:	e7db      	b.n	800fa34 <__cvt+0x5c>
 800fa7c:	1c54      	adds	r4, r2, #1
 800fa7e:	9407      	str	r4, [sp, #28]
 800fa80:	7011      	strb	r1, [r2, #0]
 800fa82:	e7de      	b.n	800fa42 <__cvt+0x6a>

0800fa84 <__exponent>:
 800fa84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa86:	2900      	cmp	r1, #0
 800fa88:	bfba      	itte	lt
 800fa8a:	4249      	neglt	r1, r1
 800fa8c:	232d      	movlt	r3, #45	@ 0x2d
 800fa8e:	232b      	movge	r3, #43	@ 0x2b
 800fa90:	2909      	cmp	r1, #9
 800fa92:	7002      	strb	r2, [r0, #0]
 800fa94:	7043      	strb	r3, [r0, #1]
 800fa96:	dd29      	ble.n	800faec <__exponent+0x68>
 800fa98:	f10d 0307 	add.w	r3, sp, #7
 800fa9c:	461d      	mov	r5, r3
 800fa9e:	270a      	movs	r7, #10
 800faa0:	461a      	mov	r2, r3
 800faa2:	fbb1 f6f7 	udiv	r6, r1, r7
 800faa6:	fb07 1416 	mls	r4, r7, r6, r1
 800faaa:	3430      	adds	r4, #48	@ 0x30
 800faac:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fab0:	460c      	mov	r4, r1
 800fab2:	2c63      	cmp	r4, #99	@ 0x63
 800fab4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800fab8:	4631      	mov	r1, r6
 800faba:	dcf1      	bgt.n	800faa0 <__exponent+0x1c>
 800fabc:	3130      	adds	r1, #48	@ 0x30
 800fabe:	1e94      	subs	r4, r2, #2
 800fac0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fac4:	1c41      	adds	r1, r0, #1
 800fac6:	4623      	mov	r3, r4
 800fac8:	42ab      	cmp	r3, r5
 800faca:	d30a      	bcc.n	800fae2 <__exponent+0x5e>
 800facc:	f10d 0309 	add.w	r3, sp, #9
 800fad0:	1a9b      	subs	r3, r3, r2
 800fad2:	42ac      	cmp	r4, r5
 800fad4:	bf88      	it	hi
 800fad6:	2300      	movhi	r3, #0
 800fad8:	3302      	adds	r3, #2
 800fada:	4403      	add	r3, r0
 800fadc:	1a18      	subs	r0, r3, r0
 800fade:	b003      	add	sp, #12
 800fae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fae2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fae6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800faea:	e7ed      	b.n	800fac8 <__exponent+0x44>
 800faec:	2330      	movs	r3, #48	@ 0x30
 800faee:	3130      	adds	r1, #48	@ 0x30
 800faf0:	7083      	strb	r3, [r0, #2]
 800faf2:	70c1      	strb	r1, [r0, #3]
 800faf4:	1d03      	adds	r3, r0, #4
 800faf6:	e7f1      	b.n	800fadc <__exponent+0x58>

0800faf8 <_printf_float>:
 800faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafc:	b091      	sub	sp, #68	@ 0x44
 800fafe:	460c      	mov	r4, r1
 800fb00:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800fb04:	4616      	mov	r6, r2
 800fb06:	461f      	mov	r7, r3
 800fb08:	4605      	mov	r5, r0
 800fb0a:	f000 fd55 	bl	80105b8 <_localeconv_r>
 800fb0e:	f8d0 b000 	ldr.w	fp, [r0]
 800fb12:	4658      	mov	r0, fp
 800fb14:	f7f0 fbf4 	bl	8000300 <strlen>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	930e      	str	r3, [sp, #56]	@ 0x38
 800fb1c:	f8d8 3000 	ldr.w	r3, [r8]
 800fb20:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fb24:	6822      	ldr	r2, [r4, #0]
 800fb26:	9009      	str	r0, [sp, #36]	@ 0x24
 800fb28:	3307      	adds	r3, #7
 800fb2a:	f023 0307 	bic.w	r3, r3, #7
 800fb2e:	f103 0108 	add.w	r1, r3, #8
 800fb32:	f8c8 1000 	str.w	r1, [r8]
 800fb36:	ed93 7b00 	vldr	d7, [r3]
 800fb3a:	ed9f 5b99 	vldr	d5, [pc, #612]	@ 800fda0 <_printf_float+0x2a8>
 800fb3e:	eeb0 6bc7 	vabs.f64	d6, d7
 800fb42:	eeb4 6b45 	vcmp.f64	d6, d5
 800fb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4a:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
 800fb4e:	dd24      	ble.n	800fb9a <_printf_float+0xa2>
 800fb50:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb58:	d502      	bpl.n	800fb60 <_printf_float+0x68>
 800fb5a:	232d      	movs	r3, #45	@ 0x2d
 800fb5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb60:	4991      	ldr	r1, [pc, #580]	@ (800fda8 <_printf_float+0x2b0>)
 800fb62:	4b92      	ldr	r3, [pc, #584]	@ (800fdac <_printf_float+0x2b4>)
 800fb64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800fb68:	bf8c      	ite	hi
 800fb6a:	4688      	movhi	r8, r1
 800fb6c:	4698      	movls	r8, r3
 800fb6e:	f022 0204 	bic.w	r2, r2, #4
 800fb72:	2303      	movs	r3, #3
 800fb74:	6123      	str	r3, [r4, #16]
 800fb76:	6022      	str	r2, [r4, #0]
 800fb78:	f04f 0a00 	mov.w	sl, #0
 800fb7c:	9700      	str	r7, [sp, #0]
 800fb7e:	4633      	mov	r3, r6
 800fb80:	aa0f      	add	r2, sp, #60	@ 0x3c
 800fb82:	4621      	mov	r1, r4
 800fb84:	4628      	mov	r0, r5
 800fb86:	f000 f9d5 	bl	800ff34 <_printf_common>
 800fb8a:	3001      	adds	r0, #1
 800fb8c:	f040 808e 	bne.w	800fcac <_printf_float+0x1b4>
 800fb90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb94:	b011      	add	sp, #68	@ 0x44
 800fb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb9a:	eeb4 7b47 	vcmp.f64	d7, d7
 800fb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba2:	d709      	bvc.n	800fbb8 <_printf_float+0xc0>
 800fba4:	ee17 3a90 	vmov	r3, s15
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	bfbc      	itt	lt
 800fbac:	232d      	movlt	r3, #45	@ 0x2d
 800fbae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fbb2:	497f      	ldr	r1, [pc, #508]	@ (800fdb0 <_printf_float+0x2b8>)
 800fbb4:	4b7f      	ldr	r3, [pc, #508]	@ (800fdb4 <_printf_float+0x2bc>)
 800fbb6:	e7d5      	b.n	800fb64 <_printf_float+0x6c>
 800fbb8:	6863      	ldr	r3, [r4, #4]
 800fbba:	1c59      	adds	r1, r3, #1
 800fbbc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800fbc0:	d13e      	bne.n	800fc40 <_printf_float+0x148>
 800fbc2:	2306      	movs	r3, #6
 800fbc4:	6063      	str	r3, [r4, #4]
 800fbc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fbca:	2300      	movs	r3, #0
 800fbcc:	6022      	str	r2, [r4, #0]
 800fbce:	9306      	str	r3, [sp, #24]
 800fbd0:	ab0e      	add	r3, sp, #56	@ 0x38
 800fbd2:	e9cd 9304 	strd	r9, r3, [sp, #16]
 800fbd6:	ab0d      	add	r3, sp, #52	@ 0x34
 800fbd8:	9303      	str	r3, [sp, #12]
 800fbda:	f10d 0333 	add.w	r3, sp, #51	@ 0x33
 800fbde:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800fbe2:	6863      	ldr	r3, [r4, #4]
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	ec53 2b17 	vmov	r2, r3, d7
 800fbec:	f7ff fef4 	bl	800f9d8 <__cvt>
 800fbf0:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fbf4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fbf6:	4680      	mov	r8, r0
 800fbf8:	d129      	bne.n	800fc4e <_printf_float+0x156>
 800fbfa:	1cc8      	adds	r0, r1, #3
 800fbfc:	db02      	blt.n	800fc04 <_printf_float+0x10c>
 800fbfe:	6863      	ldr	r3, [r4, #4]
 800fc00:	4299      	cmp	r1, r3
 800fc02:	dd41      	ble.n	800fc88 <_printf_float+0x190>
 800fc04:	f1a9 0902 	sub.w	r9, r9, #2
 800fc08:	fa5f f989 	uxtb.w	r9, r9
 800fc0c:	3901      	subs	r1, #1
 800fc0e:	464a      	mov	r2, r9
 800fc10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fc14:	910d      	str	r1, [sp, #52]	@ 0x34
 800fc16:	f7ff ff35 	bl	800fa84 <__exponent>
 800fc1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc1c:	1813      	adds	r3, r2, r0
 800fc1e:	2a01      	cmp	r2, #1
 800fc20:	4682      	mov	sl, r0
 800fc22:	6123      	str	r3, [r4, #16]
 800fc24:	dc02      	bgt.n	800fc2c <_printf_float+0x134>
 800fc26:	6822      	ldr	r2, [r4, #0]
 800fc28:	07d2      	lsls	r2, r2, #31
 800fc2a:	d501      	bpl.n	800fc30 <_printf_float+0x138>
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	6123      	str	r3, [r4, #16]
 800fc30:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d0a1      	beq.n	800fb7c <_printf_float+0x84>
 800fc38:	232d      	movs	r3, #45	@ 0x2d
 800fc3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc3e:	e79d      	b.n	800fb7c <_printf_float+0x84>
 800fc40:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fc44:	d1bf      	bne.n	800fbc6 <_printf_float+0xce>
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d1bd      	bne.n	800fbc6 <_printf_float+0xce>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	e7ba      	b.n	800fbc4 <_printf_float+0xcc>
 800fc4e:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fc52:	d9db      	bls.n	800fc0c <_printf_float+0x114>
 800fc54:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fc58:	d118      	bne.n	800fc8c <_printf_float+0x194>
 800fc5a:	2900      	cmp	r1, #0
 800fc5c:	6863      	ldr	r3, [r4, #4]
 800fc5e:	dd0b      	ble.n	800fc78 <_printf_float+0x180>
 800fc60:	6121      	str	r1, [r4, #16]
 800fc62:	b913      	cbnz	r3, 800fc6a <_printf_float+0x172>
 800fc64:	6822      	ldr	r2, [r4, #0]
 800fc66:	07d0      	lsls	r0, r2, #31
 800fc68:	d502      	bpl.n	800fc70 <_printf_float+0x178>
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	440b      	add	r3, r1
 800fc6e:	6123      	str	r3, [r4, #16]
 800fc70:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fc72:	f04f 0a00 	mov.w	sl, #0
 800fc76:	e7db      	b.n	800fc30 <_printf_float+0x138>
 800fc78:	b913      	cbnz	r3, 800fc80 <_printf_float+0x188>
 800fc7a:	6822      	ldr	r2, [r4, #0]
 800fc7c:	07d2      	lsls	r2, r2, #31
 800fc7e:	d501      	bpl.n	800fc84 <_printf_float+0x18c>
 800fc80:	3302      	adds	r3, #2
 800fc82:	e7f4      	b.n	800fc6e <_printf_float+0x176>
 800fc84:	2301      	movs	r3, #1
 800fc86:	e7f2      	b.n	800fc6e <_printf_float+0x176>
 800fc88:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fc8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc8e:	4299      	cmp	r1, r3
 800fc90:	db05      	blt.n	800fc9e <_printf_float+0x1a6>
 800fc92:	6823      	ldr	r3, [r4, #0]
 800fc94:	6121      	str	r1, [r4, #16]
 800fc96:	07d8      	lsls	r0, r3, #31
 800fc98:	d5ea      	bpl.n	800fc70 <_printf_float+0x178>
 800fc9a:	1c4b      	adds	r3, r1, #1
 800fc9c:	e7e7      	b.n	800fc6e <_printf_float+0x176>
 800fc9e:	2900      	cmp	r1, #0
 800fca0:	bfd4      	ite	le
 800fca2:	f1c1 0202 	rsble	r2, r1, #2
 800fca6:	2201      	movgt	r2, #1
 800fca8:	4413      	add	r3, r2
 800fcaa:	e7e0      	b.n	800fc6e <_printf_float+0x176>
 800fcac:	6823      	ldr	r3, [r4, #0]
 800fcae:	055a      	lsls	r2, r3, #21
 800fcb0:	d407      	bmi.n	800fcc2 <_printf_float+0x1ca>
 800fcb2:	6923      	ldr	r3, [r4, #16]
 800fcb4:	4642      	mov	r2, r8
 800fcb6:	4631      	mov	r1, r6
 800fcb8:	4628      	mov	r0, r5
 800fcba:	47b8      	blx	r7
 800fcbc:	3001      	adds	r0, #1
 800fcbe:	d12a      	bne.n	800fd16 <_printf_float+0x21e>
 800fcc0:	e766      	b.n	800fb90 <_printf_float+0x98>
 800fcc2:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fcc6:	f240 80df 	bls.w	800fe88 <_printf_float+0x390>
 800fcca:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fcce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd6:	d133      	bne.n	800fd40 <_printf_float+0x248>
 800fcd8:	4a37      	ldr	r2, [pc, #220]	@ (800fdb8 <_printf_float+0x2c0>)
 800fcda:	2301      	movs	r3, #1
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4628      	mov	r0, r5
 800fce0:	47b8      	blx	r7
 800fce2:	3001      	adds	r0, #1
 800fce4:	f43f af54 	beq.w	800fb90 <_printf_float+0x98>
 800fce8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800fcec:	4543      	cmp	r3, r8
 800fcee:	db02      	blt.n	800fcf6 <_printf_float+0x1fe>
 800fcf0:	6823      	ldr	r3, [r4, #0]
 800fcf2:	07d8      	lsls	r0, r3, #31
 800fcf4:	d50f      	bpl.n	800fd16 <_printf_float+0x21e>
 800fcf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf8:	465a      	mov	r2, fp
 800fcfa:	4631      	mov	r1, r6
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	47b8      	blx	r7
 800fd00:	3001      	adds	r0, #1
 800fd02:	f43f af45 	beq.w	800fb90 <_printf_float+0x98>
 800fd06:	f04f 0900 	mov.w	r9, #0
 800fd0a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800fd0e:	f104 0a1a 	add.w	sl, r4, #26
 800fd12:	45c8      	cmp	r8, r9
 800fd14:	dc09      	bgt.n	800fd2a <_printf_float+0x232>
 800fd16:	6823      	ldr	r3, [r4, #0]
 800fd18:	079b      	lsls	r3, r3, #30
 800fd1a:	f100 8106 	bmi.w	800ff2a <_printf_float+0x432>
 800fd1e:	68e0      	ldr	r0, [r4, #12]
 800fd20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd22:	4298      	cmp	r0, r3
 800fd24:	bfb8      	it	lt
 800fd26:	4618      	movlt	r0, r3
 800fd28:	e734      	b.n	800fb94 <_printf_float+0x9c>
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	4652      	mov	r2, sl
 800fd2e:	4631      	mov	r1, r6
 800fd30:	4628      	mov	r0, r5
 800fd32:	47b8      	blx	r7
 800fd34:	3001      	adds	r0, #1
 800fd36:	f43f af2b 	beq.w	800fb90 <_printf_float+0x98>
 800fd3a:	f109 0901 	add.w	r9, r9, #1
 800fd3e:	e7e8      	b.n	800fd12 <_printf_float+0x21a>
 800fd40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	dc3a      	bgt.n	800fdbc <_printf_float+0x2c4>
 800fd46:	4a1c      	ldr	r2, [pc, #112]	@ (800fdb8 <_printf_float+0x2c0>)
 800fd48:	2301      	movs	r3, #1
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	47b8      	blx	r7
 800fd50:	3001      	adds	r0, #1
 800fd52:	f43f af1d 	beq.w	800fb90 <_printf_float+0x98>
 800fd56:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800fd5a:	ea59 0303 	orrs.w	r3, r9, r3
 800fd5e:	d102      	bne.n	800fd66 <_printf_float+0x26e>
 800fd60:	6823      	ldr	r3, [r4, #0]
 800fd62:	07d9      	lsls	r1, r3, #31
 800fd64:	d5d7      	bpl.n	800fd16 <_printf_float+0x21e>
 800fd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd68:	465a      	mov	r2, fp
 800fd6a:	4631      	mov	r1, r6
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	47b8      	blx	r7
 800fd70:	3001      	adds	r0, #1
 800fd72:	f43f af0d 	beq.w	800fb90 <_printf_float+0x98>
 800fd76:	f04f 0a00 	mov.w	sl, #0
 800fd7a:	f104 0b1a 	add.w	fp, r4, #26
 800fd7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd80:	425b      	negs	r3, r3
 800fd82:	4553      	cmp	r3, sl
 800fd84:	dc01      	bgt.n	800fd8a <_printf_float+0x292>
 800fd86:	464b      	mov	r3, r9
 800fd88:	e794      	b.n	800fcb4 <_printf_float+0x1bc>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	465a      	mov	r2, fp
 800fd8e:	4631      	mov	r1, r6
 800fd90:	4628      	mov	r0, r5
 800fd92:	47b8      	blx	r7
 800fd94:	3001      	adds	r0, #1
 800fd96:	f43f aefb 	beq.w	800fb90 <_printf_float+0x98>
 800fd9a:	f10a 0a01 	add.w	sl, sl, #1
 800fd9e:	e7ee      	b.n	800fd7e <_printf_float+0x286>
 800fda0:	ffffffff 	.word	0xffffffff
 800fda4:	7fefffff 	.word	0x7fefffff
 800fda8:	08013dd8 	.word	0x08013dd8
 800fdac:	08013dd4 	.word	0x08013dd4
 800fdb0:	08013de0 	.word	0x08013de0
 800fdb4:	08013ddc 	.word	0x08013ddc
 800fdb8:	08013f13 	.word	0x08013f13
 800fdbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fdbe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800fdc2:	4553      	cmp	r3, sl
 800fdc4:	bfa8      	it	ge
 800fdc6:	4653      	movge	r3, sl
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	4699      	mov	r9, r3
 800fdcc:	dc37      	bgt.n	800fe3e <_printf_float+0x346>
 800fdce:	2300      	movs	r3, #0
 800fdd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdd6:	f104 021a 	add.w	r2, r4, #26
 800fdda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fddc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fdde:	930a      	str	r3, [sp, #40]	@ 0x28
 800fde0:	eba3 0309 	sub.w	r3, r3, r9
 800fde4:	428b      	cmp	r3, r1
 800fde6:	dc31      	bgt.n	800fe4c <_printf_float+0x354>
 800fde8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fdea:	459a      	cmp	sl, r3
 800fdec:	dc3b      	bgt.n	800fe66 <_printf_float+0x36e>
 800fdee:	6823      	ldr	r3, [r4, #0]
 800fdf0:	07da      	lsls	r2, r3, #31
 800fdf2:	d438      	bmi.n	800fe66 <_printf_float+0x36e>
 800fdf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fdf6:	ebaa 0903 	sub.w	r9, sl, r3
 800fdfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdfc:	ebaa 0303 	sub.w	r3, sl, r3
 800fe00:	4599      	cmp	r9, r3
 800fe02:	bfa8      	it	ge
 800fe04:	4699      	movge	r9, r3
 800fe06:	f1b9 0f00 	cmp.w	r9, #0
 800fe0a:	dc34      	bgt.n	800fe76 <_printf_float+0x37e>
 800fe0c:	f04f 0800 	mov.w	r8, #0
 800fe10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe14:	f104 0b1a 	add.w	fp, r4, #26
 800fe18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe1a:	ebaa 0303 	sub.w	r3, sl, r3
 800fe1e:	eba3 0309 	sub.w	r3, r3, r9
 800fe22:	4543      	cmp	r3, r8
 800fe24:	f77f af77 	ble.w	800fd16 <_printf_float+0x21e>
 800fe28:	2301      	movs	r3, #1
 800fe2a:	465a      	mov	r2, fp
 800fe2c:	4631      	mov	r1, r6
 800fe2e:	4628      	mov	r0, r5
 800fe30:	47b8      	blx	r7
 800fe32:	3001      	adds	r0, #1
 800fe34:	f43f aeac 	beq.w	800fb90 <_printf_float+0x98>
 800fe38:	f108 0801 	add.w	r8, r8, #1
 800fe3c:	e7ec      	b.n	800fe18 <_printf_float+0x320>
 800fe3e:	4642      	mov	r2, r8
 800fe40:	4631      	mov	r1, r6
 800fe42:	4628      	mov	r0, r5
 800fe44:	47b8      	blx	r7
 800fe46:	3001      	adds	r0, #1
 800fe48:	d1c1      	bne.n	800fdce <_printf_float+0x2d6>
 800fe4a:	e6a1      	b.n	800fb90 <_printf_float+0x98>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	4631      	mov	r1, r6
 800fe50:	4628      	mov	r0, r5
 800fe52:	920a      	str	r2, [sp, #40]	@ 0x28
 800fe54:	47b8      	blx	r7
 800fe56:	3001      	adds	r0, #1
 800fe58:	f43f ae9a 	beq.w	800fb90 <_printf_float+0x98>
 800fe5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe60:	3301      	adds	r3, #1
 800fe62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe64:	e7b9      	b.n	800fdda <_printf_float+0x2e2>
 800fe66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe68:	465a      	mov	r2, fp
 800fe6a:	4631      	mov	r1, r6
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	47b8      	blx	r7
 800fe70:	3001      	adds	r0, #1
 800fe72:	d1bf      	bne.n	800fdf4 <_printf_float+0x2fc>
 800fe74:	e68c      	b.n	800fb90 <_printf_float+0x98>
 800fe76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe78:	464b      	mov	r3, r9
 800fe7a:	4442      	add	r2, r8
 800fe7c:	4631      	mov	r1, r6
 800fe7e:	4628      	mov	r0, r5
 800fe80:	47b8      	blx	r7
 800fe82:	3001      	adds	r0, #1
 800fe84:	d1c2      	bne.n	800fe0c <_printf_float+0x314>
 800fe86:	e683      	b.n	800fb90 <_printf_float+0x98>
 800fe88:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 800fe8c:	f1b9 0f01 	cmp.w	r9, #1
 800fe90:	dc01      	bgt.n	800fe96 <_printf_float+0x39e>
 800fe92:	07db      	lsls	r3, r3, #31
 800fe94:	d536      	bpl.n	800ff04 <_printf_float+0x40c>
 800fe96:	2301      	movs	r3, #1
 800fe98:	4642      	mov	r2, r8
 800fe9a:	4631      	mov	r1, r6
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	47b8      	blx	r7
 800fea0:	3001      	adds	r0, #1
 800fea2:	f43f ae75 	beq.w	800fb90 <_printf_float+0x98>
 800fea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fea8:	465a      	mov	r2, fp
 800feaa:	4631      	mov	r1, r6
 800feac:	4628      	mov	r0, r5
 800feae:	47b8      	blx	r7
 800feb0:	3001      	adds	r0, #1
 800feb2:	f43f ae6d 	beq.w	800fb90 <_printf_float+0x98>
 800feb6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800feba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800febe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800fec6:	d018      	beq.n	800fefa <_printf_float+0x402>
 800fec8:	464b      	mov	r3, r9
 800feca:	f108 0201 	add.w	r2, r8, #1
 800fece:	4631      	mov	r1, r6
 800fed0:	4628      	mov	r0, r5
 800fed2:	47b8      	blx	r7
 800fed4:	3001      	adds	r0, #1
 800fed6:	d10c      	bne.n	800fef2 <_printf_float+0x3fa>
 800fed8:	e65a      	b.n	800fb90 <_printf_float+0x98>
 800feda:	2301      	movs	r3, #1
 800fedc:	465a      	mov	r2, fp
 800fede:	4631      	mov	r1, r6
 800fee0:	4628      	mov	r0, r5
 800fee2:	47b8      	blx	r7
 800fee4:	3001      	adds	r0, #1
 800fee6:	f43f ae53 	beq.w	800fb90 <_printf_float+0x98>
 800feea:	f108 0801 	add.w	r8, r8, #1
 800feee:	45c8      	cmp	r8, r9
 800fef0:	dbf3      	blt.n	800feda <_printf_float+0x3e2>
 800fef2:	4653      	mov	r3, sl
 800fef4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fef8:	e6dd      	b.n	800fcb6 <_printf_float+0x1be>
 800fefa:	f04f 0800 	mov.w	r8, #0
 800fefe:	f104 0b1a 	add.w	fp, r4, #26
 800ff02:	e7f4      	b.n	800feee <_printf_float+0x3f6>
 800ff04:	2301      	movs	r3, #1
 800ff06:	4642      	mov	r2, r8
 800ff08:	e7e1      	b.n	800fece <_printf_float+0x3d6>
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	464a      	mov	r2, r9
 800ff0e:	4631      	mov	r1, r6
 800ff10:	4628      	mov	r0, r5
 800ff12:	47b8      	blx	r7
 800ff14:	3001      	adds	r0, #1
 800ff16:	f43f ae3b 	beq.w	800fb90 <_printf_float+0x98>
 800ff1a:	f108 0801 	add.w	r8, r8, #1
 800ff1e:	68e3      	ldr	r3, [r4, #12]
 800ff20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff22:	1a5b      	subs	r3, r3, r1
 800ff24:	4543      	cmp	r3, r8
 800ff26:	dcf0      	bgt.n	800ff0a <_printf_float+0x412>
 800ff28:	e6f9      	b.n	800fd1e <_printf_float+0x226>
 800ff2a:	f04f 0800 	mov.w	r8, #0
 800ff2e:	f104 0919 	add.w	r9, r4, #25
 800ff32:	e7f4      	b.n	800ff1e <_printf_float+0x426>

0800ff34 <_printf_common>:
 800ff34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff38:	4616      	mov	r6, r2
 800ff3a:	4698      	mov	r8, r3
 800ff3c:	688a      	ldr	r2, [r1, #8]
 800ff3e:	690b      	ldr	r3, [r1, #16]
 800ff40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ff44:	4293      	cmp	r3, r2
 800ff46:	bfb8      	it	lt
 800ff48:	4613      	movlt	r3, r2
 800ff4a:	6033      	str	r3, [r6, #0]
 800ff4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ff50:	4607      	mov	r7, r0
 800ff52:	460c      	mov	r4, r1
 800ff54:	b10a      	cbz	r2, 800ff5a <_printf_common+0x26>
 800ff56:	3301      	adds	r3, #1
 800ff58:	6033      	str	r3, [r6, #0]
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	0699      	lsls	r1, r3, #26
 800ff5e:	bf42      	ittt	mi
 800ff60:	6833      	ldrmi	r3, [r6, #0]
 800ff62:	3302      	addmi	r3, #2
 800ff64:	6033      	strmi	r3, [r6, #0]
 800ff66:	6825      	ldr	r5, [r4, #0]
 800ff68:	f015 0506 	ands.w	r5, r5, #6
 800ff6c:	d106      	bne.n	800ff7c <_printf_common+0x48>
 800ff6e:	f104 0a19 	add.w	sl, r4, #25
 800ff72:	68e3      	ldr	r3, [r4, #12]
 800ff74:	6832      	ldr	r2, [r6, #0]
 800ff76:	1a9b      	subs	r3, r3, r2
 800ff78:	42ab      	cmp	r3, r5
 800ff7a:	dc26      	bgt.n	800ffca <_printf_common+0x96>
 800ff7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ff80:	6822      	ldr	r2, [r4, #0]
 800ff82:	3b00      	subs	r3, #0
 800ff84:	bf18      	it	ne
 800ff86:	2301      	movne	r3, #1
 800ff88:	0692      	lsls	r2, r2, #26
 800ff8a:	d42b      	bmi.n	800ffe4 <_printf_common+0xb0>
 800ff8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ff90:	4641      	mov	r1, r8
 800ff92:	4638      	mov	r0, r7
 800ff94:	47c8      	blx	r9
 800ff96:	3001      	adds	r0, #1
 800ff98:	d01e      	beq.n	800ffd8 <_printf_common+0xa4>
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	6922      	ldr	r2, [r4, #16]
 800ff9e:	f003 0306 	and.w	r3, r3, #6
 800ffa2:	2b04      	cmp	r3, #4
 800ffa4:	bf02      	ittt	eq
 800ffa6:	68e5      	ldreq	r5, [r4, #12]
 800ffa8:	6833      	ldreq	r3, [r6, #0]
 800ffaa:	1aed      	subeq	r5, r5, r3
 800ffac:	68a3      	ldr	r3, [r4, #8]
 800ffae:	bf0c      	ite	eq
 800ffb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffb4:	2500      	movne	r5, #0
 800ffb6:	4293      	cmp	r3, r2
 800ffb8:	bfc4      	itt	gt
 800ffba:	1a9b      	subgt	r3, r3, r2
 800ffbc:	18ed      	addgt	r5, r5, r3
 800ffbe:	2600      	movs	r6, #0
 800ffc0:	341a      	adds	r4, #26
 800ffc2:	42b5      	cmp	r5, r6
 800ffc4:	d11a      	bne.n	800fffc <_printf_common+0xc8>
 800ffc6:	2000      	movs	r0, #0
 800ffc8:	e008      	b.n	800ffdc <_printf_common+0xa8>
 800ffca:	2301      	movs	r3, #1
 800ffcc:	4652      	mov	r2, sl
 800ffce:	4641      	mov	r1, r8
 800ffd0:	4638      	mov	r0, r7
 800ffd2:	47c8      	blx	r9
 800ffd4:	3001      	adds	r0, #1
 800ffd6:	d103      	bne.n	800ffe0 <_printf_common+0xac>
 800ffd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ffdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffe0:	3501      	adds	r5, #1
 800ffe2:	e7c6      	b.n	800ff72 <_printf_common+0x3e>
 800ffe4:	18e1      	adds	r1, r4, r3
 800ffe6:	1c5a      	adds	r2, r3, #1
 800ffe8:	2030      	movs	r0, #48	@ 0x30
 800ffea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ffee:	4422      	add	r2, r4
 800fff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fff8:	3302      	adds	r3, #2
 800fffa:	e7c7      	b.n	800ff8c <_printf_common+0x58>
 800fffc:	2301      	movs	r3, #1
 800fffe:	4622      	mov	r2, r4
 8010000:	4641      	mov	r1, r8
 8010002:	4638      	mov	r0, r7
 8010004:	47c8      	blx	r9
 8010006:	3001      	adds	r0, #1
 8010008:	d0e6      	beq.n	800ffd8 <_printf_common+0xa4>
 801000a:	3601      	adds	r6, #1
 801000c:	e7d9      	b.n	800ffc2 <_printf_common+0x8e>
	...

08010010 <_printf_i>:
 8010010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010014:	7e0f      	ldrb	r7, [r1, #24]
 8010016:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010018:	2f78      	cmp	r7, #120	@ 0x78
 801001a:	4691      	mov	r9, r2
 801001c:	4680      	mov	r8, r0
 801001e:	460c      	mov	r4, r1
 8010020:	469a      	mov	sl, r3
 8010022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010026:	d807      	bhi.n	8010038 <_printf_i+0x28>
 8010028:	2f62      	cmp	r7, #98	@ 0x62
 801002a:	d80a      	bhi.n	8010042 <_printf_i+0x32>
 801002c:	2f00      	cmp	r7, #0
 801002e:	f000 80d1 	beq.w	80101d4 <_printf_i+0x1c4>
 8010032:	2f58      	cmp	r7, #88	@ 0x58
 8010034:	f000 80b8 	beq.w	80101a8 <_printf_i+0x198>
 8010038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801003c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010040:	e03a      	b.n	80100b8 <_printf_i+0xa8>
 8010042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010046:	2b15      	cmp	r3, #21
 8010048:	d8f6      	bhi.n	8010038 <_printf_i+0x28>
 801004a:	a101      	add	r1, pc, #4	@ (adr r1, 8010050 <_printf_i+0x40>)
 801004c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010050:	080100a9 	.word	0x080100a9
 8010054:	080100bd 	.word	0x080100bd
 8010058:	08010039 	.word	0x08010039
 801005c:	08010039 	.word	0x08010039
 8010060:	08010039 	.word	0x08010039
 8010064:	08010039 	.word	0x08010039
 8010068:	080100bd 	.word	0x080100bd
 801006c:	08010039 	.word	0x08010039
 8010070:	08010039 	.word	0x08010039
 8010074:	08010039 	.word	0x08010039
 8010078:	08010039 	.word	0x08010039
 801007c:	080101bb 	.word	0x080101bb
 8010080:	080100e7 	.word	0x080100e7
 8010084:	08010175 	.word	0x08010175
 8010088:	08010039 	.word	0x08010039
 801008c:	08010039 	.word	0x08010039
 8010090:	080101dd 	.word	0x080101dd
 8010094:	08010039 	.word	0x08010039
 8010098:	080100e7 	.word	0x080100e7
 801009c:	08010039 	.word	0x08010039
 80100a0:	08010039 	.word	0x08010039
 80100a4:	0801017d 	.word	0x0801017d
 80100a8:	6833      	ldr	r3, [r6, #0]
 80100aa:	1d1a      	adds	r2, r3, #4
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	6032      	str	r2, [r6, #0]
 80100b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80100b8:	2301      	movs	r3, #1
 80100ba:	e09c      	b.n	80101f6 <_printf_i+0x1e6>
 80100bc:	6833      	ldr	r3, [r6, #0]
 80100be:	6820      	ldr	r0, [r4, #0]
 80100c0:	1d19      	adds	r1, r3, #4
 80100c2:	6031      	str	r1, [r6, #0]
 80100c4:	0606      	lsls	r6, r0, #24
 80100c6:	d501      	bpl.n	80100cc <_printf_i+0xbc>
 80100c8:	681d      	ldr	r5, [r3, #0]
 80100ca:	e003      	b.n	80100d4 <_printf_i+0xc4>
 80100cc:	0645      	lsls	r5, r0, #25
 80100ce:	d5fb      	bpl.n	80100c8 <_printf_i+0xb8>
 80100d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80100d4:	2d00      	cmp	r5, #0
 80100d6:	da03      	bge.n	80100e0 <_printf_i+0xd0>
 80100d8:	232d      	movs	r3, #45	@ 0x2d
 80100da:	426d      	negs	r5, r5
 80100dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100e0:	4858      	ldr	r0, [pc, #352]	@ (8010244 <_printf_i+0x234>)
 80100e2:	230a      	movs	r3, #10
 80100e4:	e011      	b.n	801010a <_printf_i+0xfa>
 80100e6:	6821      	ldr	r1, [r4, #0]
 80100e8:	6833      	ldr	r3, [r6, #0]
 80100ea:	0608      	lsls	r0, r1, #24
 80100ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80100f0:	d402      	bmi.n	80100f8 <_printf_i+0xe8>
 80100f2:	0649      	lsls	r1, r1, #25
 80100f4:	bf48      	it	mi
 80100f6:	b2ad      	uxthmi	r5, r5
 80100f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80100fa:	4852      	ldr	r0, [pc, #328]	@ (8010244 <_printf_i+0x234>)
 80100fc:	6033      	str	r3, [r6, #0]
 80100fe:	bf14      	ite	ne
 8010100:	230a      	movne	r3, #10
 8010102:	2308      	moveq	r3, #8
 8010104:	2100      	movs	r1, #0
 8010106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801010a:	6866      	ldr	r6, [r4, #4]
 801010c:	60a6      	str	r6, [r4, #8]
 801010e:	2e00      	cmp	r6, #0
 8010110:	db05      	blt.n	801011e <_printf_i+0x10e>
 8010112:	6821      	ldr	r1, [r4, #0]
 8010114:	432e      	orrs	r6, r5
 8010116:	f021 0104 	bic.w	r1, r1, #4
 801011a:	6021      	str	r1, [r4, #0]
 801011c:	d04b      	beq.n	80101b6 <_printf_i+0x1a6>
 801011e:	4616      	mov	r6, r2
 8010120:	fbb5 f1f3 	udiv	r1, r5, r3
 8010124:	fb03 5711 	mls	r7, r3, r1, r5
 8010128:	5dc7      	ldrb	r7, [r0, r7]
 801012a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801012e:	462f      	mov	r7, r5
 8010130:	42bb      	cmp	r3, r7
 8010132:	460d      	mov	r5, r1
 8010134:	d9f4      	bls.n	8010120 <_printf_i+0x110>
 8010136:	2b08      	cmp	r3, #8
 8010138:	d10b      	bne.n	8010152 <_printf_i+0x142>
 801013a:	6823      	ldr	r3, [r4, #0]
 801013c:	07df      	lsls	r7, r3, #31
 801013e:	d508      	bpl.n	8010152 <_printf_i+0x142>
 8010140:	6923      	ldr	r3, [r4, #16]
 8010142:	6861      	ldr	r1, [r4, #4]
 8010144:	4299      	cmp	r1, r3
 8010146:	bfde      	ittt	le
 8010148:	2330      	movle	r3, #48	@ 0x30
 801014a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801014e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010152:	1b92      	subs	r2, r2, r6
 8010154:	6122      	str	r2, [r4, #16]
 8010156:	f8cd a000 	str.w	sl, [sp]
 801015a:	464b      	mov	r3, r9
 801015c:	aa03      	add	r2, sp, #12
 801015e:	4621      	mov	r1, r4
 8010160:	4640      	mov	r0, r8
 8010162:	f7ff fee7 	bl	800ff34 <_printf_common>
 8010166:	3001      	adds	r0, #1
 8010168:	d14a      	bne.n	8010200 <_printf_i+0x1f0>
 801016a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801016e:	b004      	add	sp, #16
 8010170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010174:	6823      	ldr	r3, [r4, #0]
 8010176:	f043 0320 	orr.w	r3, r3, #32
 801017a:	6023      	str	r3, [r4, #0]
 801017c:	4832      	ldr	r0, [pc, #200]	@ (8010248 <_printf_i+0x238>)
 801017e:	2778      	movs	r7, #120	@ 0x78
 8010180:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010184:	6823      	ldr	r3, [r4, #0]
 8010186:	6831      	ldr	r1, [r6, #0]
 8010188:	061f      	lsls	r7, r3, #24
 801018a:	f851 5b04 	ldr.w	r5, [r1], #4
 801018e:	d402      	bmi.n	8010196 <_printf_i+0x186>
 8010190:	065f      	lsls	r7, r3, #25
 8010192:	bf48      	it	mi
 8010194:	b2ad      	uxthmi	r5, r5
 8010196:	6031      	str	r1, [r6, #0]
 8010198:	07d9      	lsls	r1, r3, #31
 801019a:	bf44      	itt	mi
 801019c:	f043 0320 	orrmi.w	r3, r3, #32
 80101a0:	6023      	strmi	r3, [r4, #0]
 80101a2:	b11d      	cbz	r5, 80101ac <_printf_i+0x19c>
 80101a4:	2310      	movs	r3, #16
 80101a6:	e7ad      	b.n	8010104 <_printf_i+0xf4>
 80101a8:	4826      	ldr	r0, [pc, #152]	@ (8010244 <_printf_i+0x234>)
 80101aa:	e7e9      	b.n	8010180 <_printf_i+0x170>
 80101ac:	6823      	ldr	r3, [r4, #0]
 80101ae:	f023 0320 	bic.w	r3, r3, #32
 80101b2:	6023      	str	r3, [r4, #0]
 80101b4:	e7f6      	b.n	80101a4 <_printf_i+0x194>
 80101b6:	4616      	mov	r6, r2
 80101b8:	e7bd      	b.n	8010136 <_printf_i+0x126>
 80101ba:	6833      	ldr	r3, [r6, #0]
 80101bc:	6825      	ldr	r5, [r4, #0]
 80101be:	6961      	ldr	r1, [r4, #20]
 80101c0:	1d18      	adds	r0, r3, #4
 80101c2:	6030      	str	r0, [r6, #0]
 80101c4:	062e      	lsls	r6, r5, #24
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	d501      	bpl.n	80101ce <_printf_i+0x1be>
 80101ca:	6019      	str	r1, [r3, #0]
 80101cc:	e002      	b.n	80101d4 <_printf_i+0x1c4>
 80101ce:	0668      	lsls	r0, r5, #25
 80101d0:	d5fb      	bpl.n	80101ca <_printf_i+0x1ba>
 80101d2:	8019      	strh	r1, [r3, #0]
 80101d4:	2300      	movs	r3, #0
 80101d6:	6123      	str	r3, [r4, #16]
 80101d8:	4616      	mov	r6, r2
 80101da:	e7bc      	b.n	8010156 <_printf_i+0x146>
 80101dc:	6833      	ldr	r3, [r6, #0]
 80101de:	1d1a      	adds	r2, r3, #4
 80101e0:	6032      	str	r2, [r6, #0]
 80101e2:	681e      	ldr	r6, [r3, #0]
 80101e4:	6862      	ldr	r2, [r4, #4]
 80101e6:	2100      	movs	r1, #0
 80101e8:	4630      	mov	r0, r6
 80101ea:	f7f0 f839 	bl	8000260 <memchr>
 80101ee:	b108      	cbz	r0, 80101f4 <_printf_i+0x1e4>
 80101f0:	1b80      	subs	r0, r0, r6
 80101f2:	6060      	str	r0, [r4, #4]
 80101f4:	6863      	ldr	r3, [r4, #4]
 80101f6:	6123      	str	r3, [r4, #16]
 80101f8:	2300      	movs	r3, #0
 80101fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101fe:	e7aa      	b.n	8010156 <_printf_i+0x146>
 8010200:	6923      	ldr	r3, [r4, #16]
 8010202:	4632      	mov	r2, r6
 8010204:	4649      	mov	r1, r9
 8010206:	4640      	mov	r0, r8
 8010208:	47d0      	blx	sl
 801020a:	3001      	adds	r0, #1
 801020c:	d0ad      	beq.n	801016a <_printf_i+0x15a>
 801020e:	6823      	ldr	r3, [r4, #0]
 8010210:	079b      	lsls	r3, r3, #30
 8010212:	d413      	bmi.n	801023c <_printf_i+0x22c>
 8010214:	68e0      	ldr	r0, [r4, #12]
 8010216:	9b03      	ldr	r3, [sp, #12]
 8010218:	4298      	cmp	r0, r3
 801021a:	bfb8      	it	lt
 801021c:	4618      	movlt	r0, r3
 801021e:	e7a6      	b.n	801016e <_printf_i+0x15e>
 8010220:	2301      	movs	r3, #1
 8010222:	4632      	mov	r2, r6
 8010224:	4649      	mov	r1, r9
 8010226:	4640      	mov	r0, r8
 8010228:	47d0      	blx	sl
 801022a:	3001      	adds	r0, #1
 801022c:	d09d      	beq.n	801016a <_printf_i+0x15a>
 801022e:	3501      	adds	r5, #1
 8010230:	68e3      	ldr	r3, [r4, #12]
 8010232:	9903      	ldr	r1, [sp, #12]
 8010234:	1a5b      	subs	r3, r3, r1
 8010236:	42ab      	cmp	r3, r5
 8010238:	dcf2      	bgt.n	8010220 <_printf_i+0x210>
 801023a:	e7eb      	b.n	8010214 <_printf_i+0x204>
 801023c:	2500      	movs	r5, #0
 801023e:	f104 0619 	add.w	r6, r4, #25
 8010242:	e7f5      	b.n	8010230 <_printf_i+0x220>
 8010244:	08013de4 	.word	0x08013de4
 8010248:	08013df5 	.word	0x08013df5

0801024c <std>:
 801024c:	2300      	movs	r3, #0
 801024e:	b510      	push	{r4, lr}
 8010250:	4604      	mov	r4, r0
 8010252:	e9c0 3300 	strd	r3, r3, [r0]
 8010256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801025a:	6083      	str	r3, [r0, #8]
 801025c:	8181      	strh	r1, [r0, #12]
 801025e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010260:	81c2      	strh	r2, [r0, #14]
 8010262:	6183      	str	r3, [r0, #24]
 8010264:	4619      	mov	r1, r3
 8010266:	2208      	movs	r2, #8
 8010268:	305c      	adds	r0, #92	@ 0x5c
 801026a:	f000 f98a 	bl	8010582 <memset>
 801026e:	4b0d      	ldr	r3, [pc, #52]	@ (80102a4 <std+0x58>)
 8010270:	6263      	str	r3, [r4, #36]	@ 0x24
 8010272:	4b0d      	ldr	r3, [pc, #52]	@ (80102a8 <std+0x5c>)
 8010274:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010276:	4b0d      	ldr	r3, [pc, #52]	@ (80102ac <std+0x60>)
 8010278:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801027a:	4b0d      	ldr	r3, [pc, #52]	@ (80102b0 <std+0x64>)
 801027c:	6323      	str	r3, [r4, #48]	@ 0x30
 801027e:	4b0d      	ldr	r3, [pc, #52]	@ (80102b4 <std+0x68>)
 8010280:	6224      	str	r4, [r4, #32]
 8010282:	429c      	cmp	r4, r3
 8010284:	d006      	beq.n	8010294 <std+0x48>
 8010286:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801028a:	4294      	cmp	r4, r2
 801028c:	d002      	beq.n	8010294 <std+0x48>
 801028e:	33d0      	adds	r3, #208	@ 0xd0
 8010290:	429c      	cmp	r4, r3
 8010292:	d105      	bne.n	80102a0 <std+0x54>
 8010294:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801029c:	f000 ba6e 	b.w	801077c <__retarget_lock_init_recursive>
 80102a0:	bd10      	pop	{r4, pc}
 80102a2:	bf00      	nop
 80102a4:	080104d9 	.word	0x080104d9
 80102a8:	080104ff 	.word	0x080104ff
 80102ac:	08010537 	.word	0x08010537
 80102b0:	0801055b 	.word	0x0801055b
 80102b4:	20017c90 	.word	0x20017c90

080102b8 <stdio_exit_handler>:
 80102b8:	4a02      	ldr	r2, [pc, #8]	@ (80102c4 <stdio_exit_handler+0xc>)
 80102ba:	4903      	ldr	r1, [pc, #12]	@ (80102c8 <stdio_exit_handler+0x10>)
 80102bc:	4803      	ldr	r0, [pc, #12]	@ (80102cc <stdio_exit_handler+0x14>)
 80102be:	f000 b869 	b.w	8010394 <_fwalk_sglue>
 80102c2:	bf00      	nop
 80102c4:	20000400 	.word	0x20000400
 80102c8:	080125a9 	.word	0x080125a9
 80102cc:	20000410 	.word	0x20000410

080102d0 <cleanup_stdio>:
 80102d0:	6841      	ldr	r1, [r0, #4]
 80102d2:	4b0c      	ldr	r3, [pc, #48]	@ (8010304 <cleanup_stdio+0x34>)
 80102d4:	4299      	cmp	r1, r3
 80102d6:	b510      	push	{r4, lr}
 80102d8:	4604      	mov	r4, r0
 80102da:	d001      	beq.n	80102e0 <cleanup_stdio+0x10>
 80102dc:	f002 f964 	bl	80125a8 <_fflush_r>
 80102e0:	68a1      	ldr	r1, [r4, #8]
 80102e2:	4b09      	ldr	r3, [pc, #36]	@ (8010308 <cleanup_stdio+0x38>)
 80102e4:	4299      	cmp	r1, r3
 80102e6:	d002      	beq.n	80102ee <cleanup_stdio+0x1e>
 80102e8:	4620      	mov	r0, r4
 80102ea:	f002 f95d 	bl	80125a8 <_fflush_r>
 80102ee:	68e1      	ldr	r1, [r4, #12]
 80102f0:	4b06      	ldr	r3, [pc, #24]	@ (801030c <cleanup_stdio+0x3c>)
 80102f2:	4299      	cmp	r1, r3
 80102f4:	d004      	beq.n	8010300 <cleanup_stdio+0x30>
 80102f6:	4620      	mov	r0, r4
 80102f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102fc:	f002 b954 	b.w	80125a8 <_fflush_r>
 8010300:	bd10      	pop	{r4, pc}
 8010302:	bf00      	nop
 8010304:	20017c90 	.word	0x20017c90
 8010308:	20017cf8 	.word	0x20017cf8
 801030c:	20017d60 	.word	0x20017d60

08010310 <global_stdio_init.part.0>:
 8010310:	b510      	push	{r4, lr}
 8010312:	4b0b      	ldr	r3, [pc, #44]	@ (8010340 <global_stdio_init.part.0+0x30>)
 8010314:	4c0b      	ldr	r4, [pc, #44]	@ (8010344 <global_stdio_init.part.0+0x34>)
 8010316:	4a0c      	ldr	r2, [pc, #48]	@ (8010348 <global_stdio_init.part.0+0x38>)
 8010318:	601a      	str	r2, [r3, #0]
 801031a:	4620      	mov	r0, r4
 801031c:	2200      	movs	r2, #0
 801031e:	2104      	movs	r1, #4
 8010320:	f7ff ff94 	bl	801024c <std>
 8010324:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010328:	2201      	movs	r2, #1
 801032a:	2109      	movs	r1, #9
 801032c:	f7ff ff8e 	bl	801024c <std>
 8010330:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010334:	2202      	movs	r2, #2
 8010336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801033a:	2112      	movs	r1, #18
 801033c:	f7ff bf86 	b.w	801024c <std>
 8010340:	20017dc8 	.word	0x20017dc8
 8010344:	20017c90 	.word	0x20017c90
 8010348:	080102b9 	.word	0x080102b9

0801034c <__sfp_lock_acquire>:
 801034c:	4801      	ldr	r0, [pc, #4]	@ (8010354 <__sfp_lock_acquire+0x8>)
 801034e:	f000 ba16 	b.w	801077e <__retarget_lock_acquire_recursive>
 8010352:	bf00      	nop
 8010354:	20017dd1 	.word	0x20017dd1

08010358 <__sfp_lock_release>:
 8010358:	4801      	ldr	r0, [pc, #4]	@ (8010360 <__sfp_lock_release+0x8>)
 801035a:	f000 ba11 	b.w	8010780 <__retarget_lock_release_recursive>
 801035e:	bf00      	nop
 8010360:	20017dd1 	.word	0x20017dd1

08010364 <__sinit>:
 8010364:	b510      	push	{r4, lr}
 8010366:	4604      	mov	r4, r0
 8010368:	f7ff fff0 	bl	801034c <__sfp_lock_acquire>
 801036c:	6a23      	ldr	r3, [r4, #32]
 801036e:	b11b      	cbz	r3, 8010378 <__sinit+0x14>
 8010370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010374:	f7ff bff0 	b.w	8010358 <__sfp_lock_release>
 8010378:	4b04      	ldr	r3, [pc, #16]	@ (801038c <__sinit+0x28>)
 801037a:	6223      	str	r3, [r4, #32]
 801037c:	4b04      	ldr	r3, [pc, #16]	@ (8010390 <__sinit+0x2c>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1f5      	bne.n	8010370 <__sinit+0xc>
 8010384:	f7ff ffc4 	bl	8010310 <global_stdio_init.part.0>
 8010388:	e7f2      	b.n	8010370 <__sinit+0xc>
 801038a:	bf00      	nop
 801038c:	080102d1 	.word	0x080102d1
 8010390:	20017dc8 	.word	0x20017dc8

08010394 <_fwalk_sglue>:
 8010394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010398:	4607      	mov	r7, r0
 801039a:	4688      	mov	r8, r1
 801039c:	4614      	mov	r4, r2
 801039e:	2600      	movs	r6, #0
 80103a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80103a4:	f1b9 0901 	subs.w	r9, r9, #1
 80103a8:	d505      	bpl.n	80103b6 <_fwalk_sglue+0x22>
 80103aa:	6824      	ldr	r4, [r4, #0]
 80103ac:	2c00      	cmp	r4, #0
 80103ae:	d1f7      	bne.n	80103a0 <_fwalk_sglue+0xc>
 80103b0:	4630      	mov	r0, r6
 80103b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103b6:	89ab      	ldrh	r3, [r5, #12]
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	d907      	bls.n	80103cc <_fwalk_sglue+0x38>
 80103bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103c0:	3301      	adds	r3, #1
 80103c2:	d003      	beq.n	80103cc <_fwalk_sglue+0x38>
 80103c4:	4629      	mov	r1, r5
 80103c6:	4638      	mov	r0, r7
 80103c8:	47c0      	blx	r8
 80103ca:	4306      	orrs	r6, r0
 80103cc:	3568      	adds	r5, #104	@ 0x68
 80103ce:	e7e9      	b.n	80103a4 <_fwalk_sglue+0x10>

080103d0 <sniprintf>:
 80103d0:	b40c      	push	{r2, r3}
 80103d2:	b530      	push	{r4, r5, lr}
 80103d4:	4b18      	ldr	r3, [pc, #96]	@ (8010438 <sniprintf+0x68>)
 80103d6:	1e0c      	subs	r4, r1, #0
 80103d8:	681d      	ldr	r5, [r3, #0]
 80103da:	b09d      	sub	sp, #116	@ 0x74
 80103dc:	da08      	bge.n	80103f0 <sniprintf+0x20>
 80103de:	238b      	movs	r3, #139	@ 0x8b
 80103e0:	602b      	str	r3, [r5, #0]
 80103e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80103e6:	b01d      	add	sp, #116	@ 0x74
 80103e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103ec:	b002      	add	sp, #8
 80103ee:	4770      	bx	lr
 80103f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80103f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80103f8:	f04f 0300 	mov.w	r3, #0
 80103fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80103fe:	bf14      	ite	ne
 8010400:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8010404:	4623      	moveq	r3, r4
 8010406:	9304      	str	r3, [sp, #16]
 8010408:	9307      	str	r3, [sp, #28]
 801040a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801040e:	9002      	str	r0, [sp, #8]
 8010410:	9006      	str	r0, [sp, #24]
 8010412:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010416:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010418:	ab21      	add	r3, sp, #132	@ 0x84
 801041a:	a902      	add	r1, sp, #8
 801041c:	4628      	mov	r0, r5
 801041e:	9301      	str	r3, [sp, #4]
 8010420:	f001 fc24 	bl	8011c6c <_svfiprintf_r>
 8010424:	1c43      	adds	r3, r0, #1
 8010426:	bfbc      	itt	lt
 8010428:	238b      	movlt	r3, #139	@ 0x8b
 801042a:	602b      	strlt	r3, [r5, #0]
 801042c:	2c00      	cmp	r4, #0
 801042e:	d0da      	beq.n	80103e6 <sniprintf+0x16>
 8010430:	9b02      	ldr	r3, [sp, #8]
 8010432:	2200      	movs	r2, #0
 8010434:	701a      	strb	r2, [r3, #0]
 8010436:	e7d6      	b.n	80103e6 <sniprintf+0x16>
 8010438:	2000040c 	.word	0x2000040c

0801043c <siprintf>:
 801043c:	b40e      	push	{r1, r2, r3}
 801043e:	b510      	push	{r4, lr}
 8010440:	b09d      	sub	sp, #116	@ 0x74
 8010442:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010444:	9002      	str	r0, [sp, #8]
 8010446:	9006      	str	r0, [sp, #24]
 8010448:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801044c:	480a      	ldr	r0, [pc, #40]	@ (8010478 <siprintf+0x3c>)
 801044e:	9107      	str	r1, [sp, #28]
 8010450:	9104      	str	r1, [sp, #16]
 8010452:	490a      	ldr	r1, [pc, #40]	@ (801047c <siprintf+0x40>)
 8010454:	f853 2b04 	ldr.w	r2, [r3], #4
 8010458:	9105      	str	r1, [sp, #20]
 801045a:	2400      	movs	r4, #0
 801045c:	a902      	add	r1, sp, #8
 801045e:	6800      	ldr	r0, [r0, #0]
 8010460:	9301      	str	r3, [sp, #4]
 8010462:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010464:	f001 fc02 	bl	8011c6c <_svfiprintf_r>
 8010468:	9b02      	ldr	r3, [sp, #8]
 801046a:	701c      	strb	r4, [r3, #0]
 801046c:	b01d      	add	sp, #116	@ 0x74
 801046e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010472:	b003      	add	sp, #12
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	2000040c 	.word	0x2000040c
 801047c:	ffff0208 	.word	0xffff0208

08010480 <siscanf>:
 8010480:	b40e      	push	{r1, r2, r3}
 8010482:	b570      	push	{r4, r5, r6, lr}
 8010484:	b09d      	sub	sp, #116	@ 0x74
 8010486:	ac21      	add	r4, sp, #132	@ 0x84
 8010488:	2500      	movs	r5, #0
 801048a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801048e:	f854 6b04 	ldr.w	r6, [r4], #4
 8010492:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010496:	951b      	str	r5, [sp, #108]	@ 0x6c
 8010498:	9002      	str	r0, [sp, #8]
 801049a:	9006      	str	r0, [sp, #24]
 801049c:	f7ef ff30 	bl	8000300 <strlen>
 80104a0:	4b0b      	ldr	r3, [pc, #44]	@ (80104d0 <siscanf+0x50>)
 80104a2:	9003      	str	r0, [sp, #12]
 80104a4:	9007      	str	r0, [sp, #28]
 80104a6:	480b      	ldr	r0, [pc, #44]	@ (80104d4 <siscanf+0x54>)
 80104a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80104ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 80104b2:	4632      	mov	r2, r6
 80104b4:	4623      	mov	r3, r4
 80104b6:	a902      	add	r1, sp, #8
 80104b8:	6800      	ldr	r0, [r0, #0]
 80104ba:	950f      	str	r5, [sp, #60]	@ 0x3c
 80104bc:	9514      	str	r5, [sp, #80]	@ 0x50
 80104be:	9401      	str	r4, [sp, #4]
 80104c0:	f001 fd2a 	bl	8011f18 <__ssvfiscanf_r>
 80104c4:	b01d      	add	sp, #116	@ 0x74
 80104c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104ca:	b003      	add	sp, #12
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	080104fb 	.word	0x080104fb
 80104d4:	2000040c 	.word	0x2000040c

080104d8 <__sread>:
 80104d8:	b510      	push	{r4, lr}
 80104da:	460c      	mov	r4, r1
 80104dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104e0:	f000 f8ee 	bl	80106c0 <_read_r>
 80104e4:	2800      	cmp	r0, #0
 80104e6:	bfab      	itete	ge
 80104e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80104ea:	89a3      	ldrhlt	r3, [r4, #12]
 80104ec:	181b      	addge	r3, r3, r0
 80104ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80104f2:	bfac      	ite	ge
 80104f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80104f6:	81a3      	strhlt	r3, [r4, #12]
 80104f8:	bd10      	pop	{r4, pc}

080104fa <__seofread>:
 80104fa:	2000      	movs	r0, #0
 80104fc:	4770      	bx	lr

080104fe <__swrite>:
 80104fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010502:	461f      	mov	r7, r3
 8010504:	898b      	ldrh	r3, [r1, #12]
 8010506:	05db      	lsls	r3, r3, #23
 8010508:	4605      	mov	r5, r0
 801050a:	460c      	mov	r4, r1
 801050c:	4616      	mov	r6, r2
 801050e:	d505      	bpl.n	801051c <__swrite+0x1e>
 8010510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010514:	2302      	movs	r3, #2
 8010516:	2200      	movs	r2, #0
 8010518:	f000 f8c0 	bl	801069c <_lseek_r>
 801051c:	89a3      	ldrh	r3, [r4, #12]
 801051e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010522:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010526:	81a3      	strh	r3, [r4, #12]
 8010528:	4632      	mov	r2, r6
 801052a:	463b      	mov	r3, r7
 801052c:	4628      	mov	r0, r5
 801052e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010532:	f000 b8e7 	b.w	8010704 <_write_r>

08010536 <__sseek>:
 8010536:	b510      	push	{r4, lr}
 8010538:	460c      	mov	r4, r1
 801053a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801053e:	f000 f8ad 	bl	801069c <_lseek_r>
 8010542:	1c43      	adds	r3, r0, #1
 8010544:	89a3      	ldrh	r3, [r4, #12]
 8010546:	bf15      	itete	ne
 8010548:	6560      	strne	r0, [r4, #84]	@ 0x54
 801054a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801054e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010552:	81a3      	strheq	r3, [r4, #12]
 8010554:	bf18      	it	ne
 8010556:	81a3      	strhne	r3, [r4, #12]
 8010558:	bd10      	pop	{r4, pc}

0801055a <__sclose>:
 801055a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801055e:	f000 b82f 	b.w	80105c0 <_close_r>

08010562 <memcmp>:
 8010562:	b510      	push	{r4, lr}
 8010564:	3901      	subs	r1, #1
 8010566:	4402      	add	r2, r0
 8010568:	4290      	cmp	r0, r2
 801056a:	d101      	bne.n	8010570 <memcmp+0xe>
 801056c:	2000      	movs	r0, #0
 801056e:	e005      	b.n	801057c <memcmp+0x1a>
 8010570:	7803      	ldrb	r3, [r0, #0]
 8010572:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010576:	42a3      	cmp	r3, r4
 8010578:	d001      	beq.n	801057e <memcmp+0x1c>
 801057a:	1b18      	subs	r0, r3, r4
 801057c:	bd10      	pop	{r4, pc}
 801057e:	3001      	adds	r0, #1
 8010580:	e7f2      	b.n	8010568 <memcmp+0x6>

08010582 <memset>:
 8010582:	4402      	add	r2, r0
 8010584:	4603      	mov	r3, r0
 8010586:	4293      	cmp	r3, r2
 8010588:	d100      	bne.n	801058c <memset+0xa>
 801058a:	4770      	bx	lr
 801058c:	f803 1b01 	strb.w	r1, [r3], #1
 8010590:	e7f9      	b.n	8010586 <memset+0x4>

08010592 <strncpy>:
 8010592:	b510      	push	{r4, lr}
 8010594:	3901      	subs	r1, #1
 8010596:	4603      	mov	r3, r0
 8010598:	b132      	cbz	r2, 80105a8 <strncpy+0x16>
 801059a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801059e:	f803 4b01 	strb.w	r4, [r3], #1
 80105a2:	3a01      	subs	r2, #1
 80105a4:	2c00      	cmp	r4, #0
 80105a6:	d1f7      	bne.n	8010598 <strncpy+0x6>
 80105a8:	441a      	add	r2, r3
 80105aa:	2100      	movs	r1, #0
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d100      	bne.n	80105b2 <strncpy+0x20>
 80105b0:	bd10      	pop	{r4, pc}
 80105b2:	f803 1b01 	strb.w	r1, [r3], #1
 80105b6:	e7f9      	b.n	80105ac <strncpy+0x1a>

080105b8 <_localeconv_r>:
 80105b8:	4800      	ldr	r0, [pc, #0]	@ (80105bc <_localeconv_r+0x4>)
 80105ba:	4770      	bx	lr
 80105bc:	2000054c 	.word	0x2000054c

080105c0 <_close_r>:
 80105c0:	b538      	push	{r3, r4, r5, lr}
 80105c2:	4d06      	ldr	r5, [pc, #24]	@ (80105dc <_close_r+0x1c>)
 80105c4:	2300      	movs	r3, #0
 80105c6:	4604      	mov	r4, r0
 80105c8:	4608      	mov	r0, r1
 80105ca:	602b      	str	r3, [r5, #0]
 80105cc:	f7fe fe4c 	bl	800f268 <_close>
 80105d0:	1c43      	adds	r3, r0, #1
 80105d2:	d102      	bne.n	80105da <_close_r+0x1a>
 80105d4:	682b      	ldr	r3, [r5, #0]
 80105d6:	b103      	cbz	r3, 80105da <_close_r+0x1a>
 80105d8:	6023      	str	r3, [r4, #0]
 80105da:	bd38      	pop	{r3, r4, r5, pc}
 80105dc:	20017dcc 	.word	0x20017dcc

080105e0 <_reclaim_reent>:
 80105e0:	4b2d      	ldr	r3, [pc, #180]	@ (8010698 <_reclaim_reent+0xb8>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4283      	cmp	r3, r0
 80105e6:	b570      	push	{r4, r5, r6, lr}
 80105e8:	4604      	mov	r4, r0
 80105ea:	d053      	beq.n	8010694 <_reclaim_reent+0xb4>
 80105ec:	69c3      	ldr	r3, [r0, #28]
 80105ee:	b31b      	cbz	r3, 8010638 <_reclaim_reent+0x58>
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	b163      	cbz	r3, 801060e <_reclaim_reent+0x2e>
 80105f4:	2500      	movs	r5, #0
 80105f6:	69e3      	ldr	r3, [r4, #28]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	5959      	ldr	r1, [r3, r5]
 80105fc:	b9b1      	cbnz	r1, 801062c <_reclaim_reent+0x4c>
 80105fe:	3504      	adds	r5, #4
 8010600:	2d80      	cmp	r5, #128	@ 0x80
 8010602:	d1f8      	bne.n	80105f6 <_reclaim_reent+0x16>
 8010604:	69e3      	ldr	r3, [r4, #28]
 8010606:	4620      	mov	r0, r4
 8010608:	68d9      	ldr	r1, [r3, #12]
 801060a:	f000 ff07 	bl	801141c <_free_r>
 801060e:	69e3      	ldr	r3, [r4, #28]
 8010610:	6819      	ldr	r1, [r3, #0]
 8010612:	b111      	cbz	r1, 801061a <_reclaim_reent+0x3a>
 8010614:	4620      	mov	r0, r4
 8010616:	f000 ff01 	bl	801141c <_free_r>
 801061a:	69e3      	ldr	r3, [r4, #28]
 801061c:	689d      	ldr	r5, [r3, #8]
 801061e:	b15d      	cbz	r5, 8010638 <_reclaim_reent+0x58>
 8010620:	4629      	mov	r1, r5
 8010622:	4620      	mov	r0, r4
 8010624:	682d      	ldr	r5, [r5, #0]
 8010626:	f000 fef9 	bl	801141c <_free_r>
 801062a:	e7f8      	b.n	801061e <_reclaim_reent+0x3e>
 801062c:	680e      	ldr	r6, [r1, #0]
 801062e:	4620      	mov	r0, r4
 8010630:	f000 fef4 	bl	801141c <_free_r>
 8010634:	4631      	mov	r1, r6
 8010636:	e7e1      	b.n	80105fc <_reclaim_reent+0x1c>
 8010638:	6961      	ldr	r1, [r4, #20]
 801063a:	b111      	cbz	r1, 8010642 <_reclaim_reent+0x62>
 801063c:	4620      	mov	r0, r4
 801063e:	f000 feed 	bl	801141c <_free_r>
 8010642:	69e1      	ldr	r1, [r4, #28]
 8010644:	b111      	cbz	r1, 801064c <_reclaim_reent+0x6c>
 8010646:	4620      	mov	r0, r4
 8010648:	f000 fee8 	bl	801141c <_free_r>
 801064c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801064e:	b111      	cbz	r1, 8010656 <_reclaim_reent+0x76>
 8010650:	4620      	mov	r0, r4
 8010652:	f000 fee3 	bl	801141c <_free_r>
 8010656:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010658:	b111      	cbz	r1, 8010660 <_reclaim_reent+0x80>
 801065a:	4620      	mov	r0, r4
 801065c:	f000 fede 	bl	801141c <_free_r>
 8010660:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010662:	b111      	cbz	r1, 801066a <_reclaim_reent+0x8a>
 8010664:	4620      	mov	r0, r4
 8010666:	f000 fed9 	bl	801141c <_free_r>
 801066a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801066c:	b111      	cbz	r1, 8010674 <_reclaim_reent+0x94>
 801066e:	4620      	mov	r0, r4
 8010670:	f000 fed4 	bl	801141c <_free_r>
 8010674:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010676:	b111      	cbz	r1, 801067e <_reclaim_reent+0x9e>
 8010678:	4620      	mov	r0, r4
 801067a:	f000 fecf 	bl	801141c <_free_r>
 801067e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010680:	b111      	cbz	r1, 8010688 <_reclaim_reent+0xa8>
 8010682:	4620      	mov	r0, r4
 8010684:	f000 feca 	bl	801141c <_free_r>
 8010688:	6a23      	ldr	r3, [r4, #32]
 801068a:	b11b      	cbz	r3, 8010694 <_reclaim_reent+0xb4>
 801068c:	4620      	mov	r0, r4
 801068e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010692:	4718      	bx	r3
 8010694:	bd70      	pop	{r4, r5, r6, pc}
 8010696:	bf00      	nop
 8010698:	2000040c 	.word	0x2000040c

0801069c <_lseek_r>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	4d07      	ldr	r5, [pc, #28]	@ (80106bc <_lseek_r+0x20>)
 80106a0:	4604      	mov	r4, r0
 80106a2:	4608      	mov	r0, r1
 80106a4:	4611      	mov	r1, r2
 80106a6:	2200      	movs	r2, #0
 80106a8:	602a      	str	r2, [r5, #0]
 80106aa:	461a      	mov	r2, r3
 80106ac:	f7fe fde6 	bl	800f27c <_lseek>
 80106b0:	1c43      	adds	r3, r0, #1
 80106b2:	d102      	bne.n	80106ba <_lseek_r+0x1e>
 80106b4:	682b      	ldr	r3, [r5, #0]
 80106b6:	b103      	cbz	r3, 80106ba <_lseek_r+0x1e>
 80106b8:	6023      	str	r3, [r4, #0]
 80106ba:	bd38      	pop	{r3, r4, r5, pc}
 80106bc:	20017dcc 	.word	0x20017dcc

080106c0 <_read_r>:
 80106c0:	b538      	push	{r3, r4, r5, lr}
 80106c2:	4d07      	ldr	r5, [pc, #28]	@ (80106e0 <_read_r+0x20>)
 80106c4:	4604      	mov	r4, r0
 80106c6:	4608      	mov	r0, r1
 80106c8:	4611      	mov	r1, r2
 80106ca:	2200      	movs	r2, #0
 80106cc:	602a      	str	r2, [r5, #0]
 80106ce:	461a      	mov	r2, r3
 80106d0:	f7fe fdac 	bl	800f22c <_read>
 80106d4:	1c43      	adds	r3, r0, #1
 80106d6:	d102      	bne.n	80106de <_read_r+0x1e>
 80106d8:	682b      	ldr	r3, [r5, #0]
 80106da:	b103      	cbz	r3, 80106de <_read_r+0x1e>
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	bd38      	pop	{r3, r4, r5, pc}
 80106e0:	20017dcc 	.word	0x20017dcc

080106e4 <_sbrk_r>:
 80106e4:	b538      	push	{r3, r4, r5, lr}
 80106e6:	4d06      	ldr	r5, [pc, #24]	@ (8010700 <_sbrk_r+0x1c>)
 80106e8:	2300      	movs	r3, #0
 80106ea:	4604      	mov	r4, r0
 80106ec:	4608      	mov	r0, r1
 80106ee:	602b      	str	r3, [r5, #0]
 80106f0:	f002 fc12 	bl	8012f18 <_sbrk>
 80106f4:	1c43      	adds	r3, r0, #1
 80106f6:	d102      	bne.n	80106fe <_sbrk_r+0x1a>
 80106f8:	682b      	ldr	r3, [r5, #0]
 80106fa:	b103      	cbz	r3, 80106fe <_sbrk_r+0x1a>
 80106fc:	6023      	str	r3, [r4, #0]
 80106fe:	bd38      	pop	{r3, r4, r5, pc}
 8010700:	20017dcc 	.word	0x20017dcc

08010704 <_write_r>:
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	4d07      	ldr	r5, [pc, #28]	@ (8010724 <_write_r+0x20>)
 8010708:	4604      	mov	r4, r0
 801070a:	4608      	mov	r0, r1
 801070c:	4611      	mov	r1, r2
 801070e:	2200      	movs	r2, #0
 8010710:	602a      	str	r2, [r5, #0]
 8010712:	461a      	mov	r2, r3
 8010714:	f7fe fd9a 	bl	800f24c <_write>
 8010718:	1c43      	adds	r3, r0, #1
 801071a:	d102      	bne.n	8010722 <_write_r+0x1e>
 801071c:	682b      	ldr	r3, [r5, #0]
 801071e:	b103      	cbz	r3, 8010722 <_write_r+0x1e>
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	bd38      	pop	{r3, r4, r5, pc}
 8010724:	20017dcc 	.word	0x20017dcc

08010728 <__errno>:
 8010728:	4b01      	ldr	r3, [pc, #4]	@ (8010730 <__errno+0x8>)
 801072a:	6818      	ldr	r0, [r3, #0]
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	2000040c 	.word	0x2000040c

08010734 <__libc_init_array>:
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	4d0d      	ldr	r5, [pc, #52]	@ (801076c <__libc_init_array+0x38>)
 8010738:	4c0d      	ldr	r4, [pc, #52]	@ (8010770 <__libc_init_array+0x3c>)
 801073a:	1b64      	subs	r4, r4, r5
 801073c:	10a4      	asrs	r4, r4, #2
 801073e:	2600      	movs	r6, #0
 8010740:	42a6      	cmp	r6, r4
 8010742:	d109      	bne.n	8010758 <__libc_init_array+0x24>
 8010744:	4d0b      	ldr	r5, [pc, #44]	@ (8010774 <__libc_init_array+0x40>)
 8010746:	4c0c      	ldr	r4, [pc, #48]	@ (8010778 <__libc_init_array+0x44>)
 8010748:	f002 fbf4 	bl	8012f34 <_init>
 801074c:	1b64      	subs	r4, r4, r5
 801074e:	10a4      	asrs	r4, r4, #2
 8010750:	2600      	movs	r6, #0
 8010752:	42a6      	cmp	r6, r4
 8010754:	d105      	bne.n	8010762 <__libc_init_array+0x2e>
 8010756:	bd70      	pop	{r4, r5, r6, pc}
 8010758:	f855 3b04 	ldr.w	r3, [r5], #4
 801075c:	4798      	blx	r3
 801075e:	3601      	adds	r6, #1
 8010760:	e7ee      	b.n	8010740 <__libc_init_array+0xc>
 8010762:	f855 3b04 	ldr.w	r3, [r5], #4
 8010766:	4798      	blx	r3
 8010768:	3601      	adds	r6, #1
 801076a:	e7f2      	b.n	8010752 <__libc_init_array+0x1e>
 801076c:	0801416c 	.word	0x0801416c
 8010770:	0801416c 	.word	0x0801416c
 8010774:	0801416c 	.word	0x0801416c
 8010778:	08014170 	.word	0x08014170

0801077c <__retarget_lock_init_recursive>:
 801077c:	4770      	bx	lr

0801077e <__retarget_lock_acquire_recursive>:
 801077e:	4770      	bx	lr

08010780 <__retarget_lock_release_recursive>:
 8010780:	4770      	bx	lr

08010782 <memcpy>:
 8010782:	440a      	add	r2, r1
 8010784:	4291      	cmp	r1, r2
 8010786:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801078a:	d100      	bne.n	801078e <memcpy+0xc>
 801078c:	4770      	bx	lr
 801078e:	b510      	push	{r4, lr}
 8010790:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010798:	4291      	cmp	r1, r2
 801079a:	d1f9      	bne.n	8010790 <memcpy+0xe>
 801079c:	bd10      	pop	{r4, pc}
	...

080107a0 <modf>:
 80107a0:	b570      	push	{r4, r5, r6, lr}
 80107a2:	4604      	mov	r4, r0
 80107a4:	460d      	mov	r5, r1
 80107a6:	ed2d 8b02 	vpush	{d8}
 80107aa:	ec45 4b18 	vmov	d8, r4, r5
 80107ae:	ee18 5a90 	vmov	r5, s17
 80107b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80107b6:	4614      	mov	r4, r2
 80107b8:	f2a3 32ff 	subw	r2, r3, #1023	@ 0x3ff
 80107bc:	2a13      	cmp	r2, #19
 80107be:	ee18 6a10 	vmov	r6, s16
 80107c2:	dc22      	bgt.n	801080a <modf+0x6a>
 80107c4:	2a00      	cmp	r2, #0
 80107c6:	da09      	bge.n	80107dc <modf+0x3c>
 80107c8:	2200      	movs	r2, #0
 80107ca:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 80107ce:	e9c4 2300 	strd	r2, r3, [r4]
 80107d2:	ec51 0b18 	vmov	r0, r1, d8
 80107d6:	ecbd 8b02 	vpop	{d8}
 80107da:	bd70      	pop	{r4, r5, r6, pc}
 80107dc:	491a      	ldr	r1, [pc, #104]	@ (8010848 <modf+0xa8>)
 80107de:	4111      	asrs	r1, r2
 80107e0:	ea05 0301 	and.w	r3, r5, r1
 80107e4:	ea53 0006 	orrs.w	r0, r3, r6
 80107e8:	d105      	bne.n	80107f6 <modf+0x56>
 80107ea:	ed84 8b00 	vstr	d8, [r4]
 80107ee:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 80107f2:	4602      	mov	r2, r0
 80107f4:	e018      	b.n	8010828 <modf+0x88>
 80107f6:	2200      	movs	r2, #0
 80107f8:	ea25 0301 	bic.w	r3, r5, r1
 80107fc:	ec43 2b17 	vmov	d7, r2, r3
 8010800:	e9c4 2300 	strd	r2, r3, [r4]
 8010804:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010808:	e7e3      	b.n	80107d2 <modf+0x32>
 801080a:	2a33      	cmp	r2, #51	@ 0x33
 801080c:	dd0f      	ble.n	801082e <modf+0x8e>
 801080e:	ed84 8b00 	vstr	d8, [r4]
 8010812:	f001 ff7f 	bl	8012714 <__fpclassifyd>
 8010816:	b920      	cbnz	r0, 8010822 <modf+0x82>
 8010818:	ee38 8b08 	vadd.f64	d8, d8, d8
 801081c:	ed84 8b00 	vstr	d8, [r4]
 8010820:	e7d7      	b.n	80107d2 <modf+0x32>
 8010822:	2200      	movs	r2, #0
 8010824:	f005 4300 	and.w	r3, r5, #2147483648	@ 0x80000000
 8010828:	ec43 2b18 	vmov	d8, r2, r3
 801082c:	e7d1      	b.n	80107d2 <modf+0x32>
 801082e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010832:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010836:	40d9      	lsrs	r1, r3
 8010838:	ea16 0001 	ands.w	r0, r6, r1
 801083c:	d0d5      	beq.n	80107ea <modf+0x4a>
 801083e:	462b      	mov	r3, r5
 8010840:	ea26 0201 	bic.w	r2, r6, r1
 8010844:	e7da      	b.n	80107fc <modf+0x5c>
 8010846:	bf00      	nop
 8010848:	000fffff 	.word	0x000fffff

0801084c <quorem>:
 801084c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010850:	6903      	ldr	r3, [r0, #16]
 8010852:	690c      	ldr	r4, [r1, #16]
 8010854:	42a3      	cmp	r3, r4
 8010856:	4607      	mov	r7, r0
 8010858:	db7e      	blt.n	8010958 <quorem+0x10c>
 801085a:	3c01      	subs	r4, #1
 801085c:	f101 0814 	add.w	r8, r1, #20
 8010860:	00a3      	lsls	r3, r4, #2
 8010862:	f100 0514 	add.w	r5, r0, #20
 8010866:	9300      	str	r3, [sp, #0]
 8010868:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801086c:	9301      	str	r3, [sp, #4]
 801086e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010876:	3301      	adds	r3, #1
 8010878:	429a      	cmp	r2, r3
 801087a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801087e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010882:	d32e      	bcc.n	80108e2 <quorem+0x96>
 8010884:	f04f 0a00 	mov.w	sl, #0
 8010888:	46c4      	mov	ip, r8
 801088a:	46ae      	mov	lr, r5
 801088c:	46d3      	mov	fp, sl
 801088e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010892:	b298      	uxth	r0, r3
 8010894:	fb06 a000 	mla	r0, r6, r0, sl
 8010898:	0c02      	lsrs	r2, r0, #16
 801089a:	0c1b      	lsrs	r3, r3, #16
 801089c:	fb06 2303 	mla	r3, r6, r3, r2
 80108a0:	f8de 2000 	ldr.w	r2, [lr]
 80108a4:	b280      	uxth	r0, r0
 80108a6:	b292      	uxth	r2, r2
 80108a8:	1a12      	subs	r2, r2, r0
 80108aa:	445a      	add	r2, fp
 80108ac:	f8de 0000 	ldr.w	r0, [lr]
 80108b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80108ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80108be:	b292      	uxth	r2, r2
 80108c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80108c4:	45e1      	cmp	r9, ip
 80108c6:	f84e 2b04 	str.w	r2, [lr], #4
 80108ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80108ce:	d2de      	bcs.n	801088e <quorem+0x42>
 80108d0:	9b00      	ldr	r3, [sp, #0]
 80108d2:	58eb      	ldr	r3, [r5, r3]
 80108d4:	b92b      	cbnz	r3, 80108e2 <quorem+0x96>
 80108d6:	9b01      	ldr	r3, [sp, #4]
 80108d8:	3b04      	subs	r3, #4
 80108da:	429d      	cmp	r5, r3
 80108dc:	461a      	mov	r2, r3
 80108de:	d32f      	bcc.n	8010940 <quorem+0xf4>
 80108e0:	613c      	str	r4, [r7, #16]
 80108e2:	4638      	mov	r0, r7
 80108e4:	f001 f856 	bl	8011994 <__mcmp>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	db25      	blt.n	8010938 <quorem+0xec>
 80108ec:	4629      	mov	r1, r5
 80108ee:	2000      	movs	r0, #0
 80108f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80108f4:	f8d1 c000 	ldr.w	ip, [r1]
 80108f8:	fa1f fe82 	uxth.w	lr, r2
 80108fc:	fa1f f38c 	uxth.w	r3, ip
 8010900:	eba3 030e 	sub.w	r3, r3, lr
 8010904:	4403      	add	r3, r0
 8010906:	0c12      	lsrs	r2, r2, #16
 8010908:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801090c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010910:	b29b      	uxth	r3, r3
 8010912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010916:	45c1      	cmp	r9, r8
 8010918:	f841 3b04 	str.w	r3, [r1], #4
 801091c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010920:	d2e6      	bcs.n	80108f0 <quorem+0xa4>
 8010922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801092a:	b922      	cbnz	r2, 8010936 <quorem+0xea>
 801092c:	3b04      	subs	r3, #4
 801092e:	429d      	cmp	r5, r3
 8010930:	461a      	mov	r2, r3
 8010932:	d30b      	bcc.n	801094c <quorem+0x100>
 8010934:	613c      	str	r4, [r7, #16]
 8010936:	3601      	adds	r6, #1
 8010938:	4630      	mov	r0, r6
 801093a:	b003      	add	sp, #12
 801093c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010940:	6812      	ldr	r2, [r2, #0]
 8010942:	3b04      	subs	r3, #4
 8010944:	2a00      	cmp	r2, #0
 8010946:	d1cb      	bne.n	80108e0 <quorem+0x94>
 8010948:	3c01      	subs	r4, #1
 801094a:	e7c6      	b.n	80108da <quorem+0x8e>
 801094c:	6812      	ldr	r2, [r2, #0]
 801094e:	3b04      	subs	r3, #4
 8010950:	2a00      	cmp	r2, #0
 8010952:	d1ef      	bne.n	8010934 <quorem+0xe8>
 8010954:	3c01      	subs	r4, #1
 8010956:	e7ea      	b.n	801092e <quorem+0xe2>
 8010958:	2000      	movs	r0, #0
 801095a:	e7ee      	b.n	801093a <quorem+0xee>
 801095c:	0000      	movs	r0, r0
	...

08010960 <_dtoa_r>:
 8010960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010964:	ed2d 8b02 	vpush	{d8}
 8010968:	69c7      	ldr	r7, [r0, #28]
 801096a:	b08f      	sub	sp, #60	@ 0x3c
 801096c:	4614      	mov	r4, r2
 801096e:	461d      	mov	r5, r3
 8010970:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010974:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8010976:	4681      	mov	r9, r0
 8010978:	b97f      	cbnz	r7, 801099a <_dtoa_r+0x3a>
 801097a:	2010      	movs	r0, #16
 801097c:	f7fe ff38 	bl	800f7f0 <malloc>
 8010980:	4602      	mov	r2, r0
 8010982:	f8c9 001c 	str.w	r0, [r9, #28]
 8010986:	b920      	cbnz	r0, 8010992 <_dtoa_r+0x32>
 8010988:	4ba1      	ldr	r3, [pc, #644]	@ (8010c10 <_dtoa_r+0x2b0>)
 801098a:	21ef      	movs	r1, #239	@ 0xef
 801098c:	48a1      	ldr	r0, [pc, #644]	@ (8010c14 <_dtoa_r+0x2b4>)
 801098e:	f001 fee3 	bl	8012758 <__assert_func>
 8010992:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010996:	6007      	str	r7, [r0, #0]
 8010998:	60c7      	str	r7, [r0, #12]
 801099a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801099e:	6819      	ldr	r1, [r3, #0]
 80109a0:	b159      	cbz	r1, 80109ba <_dtoa_r+0x5a>
 80109a2:	685a      	ldr	r2, [r3, #4]
 80109a4:	604a      	str	r2, [r1, #4]
 80109a6:	2301      	movs	r3, #1
 80109a8:	4093      	lsls	r3, r2
 80109aa:	608b      	str	r3, [r1, #8]
 80109ac:	4648      	mov	r0, r9
 80109ae:	f000 fdbf 	bl	8011530 <_Bfree>
 80109b2:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80109b6:	2200      	movs	r2, #0
 80109b8:	601a      	str	r2, [r3, #0]
 80109ba:	1e2b      	subs	r3, r5, #0
 80109bc:	bfbb      	ittet	lt
 80109be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80109c2:	9305      	strlt	r3, [sp, #20]
 80109c4:	2300      	movge	r3, #0
 80109c6:	2201      	movlt	r2, #1
 80109c8:	bfac      	ite	ge
 80109ca:	6033      	strge	r3, [r6, #0]
 80109cc:	6032      	strlt	r2, [r6, #0]
 80109ce:	4b92      	ldr	r3, [pc, #584]	@ (8010c18 <_dtoa_r+0x2b8>)
 80109d0:	9e05      	ldr	r6, [sp, #20]
 80109d2:	43b3      	bics	r3, r6
 80109d4:	d110      	bne.n	80109f8 <_dtoa_r+0x98>
 80109d6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80109d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80109dc:	6013      	str	r3, [r2, #0]
 80109de:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80109e2:	4323      	orrs	r3, r4
 80109e4:	f000 84e9 	beq.w	80113ba <_dtoa_r+0xa5a>
 80109e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80109ea:	4f8c      	ldr	r7, [pc, #560]	@ (8010c1c <_dtoa_r+0x2bc>)
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f000 84eb 	beq.w	80113c8 <_dtoa_r+0xa68>
 80109f2:	1cfb      	adds	r3, r7, #3
 80109f4:	f000 bce6 	b.w	80113c4 <_dtoa_r+0xa64>
 80109f8:	ed9d 8b04 	vldr	d8, [sp, #16]
 80109fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a04:	d10a      	bne.n	8010a1c <_dtoa_r+0xbc>
 8010a06:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010a08:	2301      	movs	r3, #1
 8010a0a:	6013      	str	r3, [r2, #0]
 8010a0c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010a0e:	b113      	cbz	r3, 8010a16 <_dtoa_r+0xb6>
 8010a10:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010a12:	4b83      	ldr	r3, [pc, #524]	@ (8010c20 <_dtoa_r+0x2c0>)
 8010a14:	6013      	str	r3, [r2, #0]
 8010a16:	4f83      	ldr	r7, [pc, #524]	@ (8010c24 <_dtoa_r+0x2c4>)
 8010a18:	f000 bcd6 	b.w	80113c8 <_dtoa_r+0xa68>
 8010a1c:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a1e:	9301      	str	r3, [sp, #4]
 8010a20:	ab0d      	add	r3, sp, #52	@ 0x34
 8010a22:	9300      	str	r3, [sp, #0]
 8010a24:	4648      	mov	r0, r9
 8010a26:	ec53 2b18 	vmov	r2, r3, d8
 8010a2a:	f001 f863 	bl	8011af4 <__d2b>
 8010a2e:	f3c6 520a 	ubfx	r2, r6, #20, #11
 8010a32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a34:	9002      	str	r0, [sp, #8]
 8010a36:	2a00      	cmp	r2, #0
 8010a38:	d045      	beq.n	8010ac6 <_dtoa_r+0x166>
 8010a3a:	eeb0 7b48 	vmov.f64	d7, d8
 8010a3e:	ee18 1a90 	vmov	r1, s17
 8010a42:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010a46:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010a4a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010a4e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010a52:	2500      	movs	r5, #0
 8010a54:	ee07 1a90 	vmov	s15, r1
 8010a58:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8010a5c:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010bf8 <_dtoa_r+0x298>
 8010a60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010a64:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010c00 <_dtoa_r+0x2a0>
 8010a68:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010a6c:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010c08 <_dtoa_r+0x2a8>
 8010a70:	ee07 2a90 	vmov	s15, r2
 8010a74:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010a78:	eeb0 7b46 	vmov.f64	d7, d6
 8010a7c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010a80:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010a84:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8c:	ee16 8a90 	vmov	r8, s13
 8010a90:	d508      	bpl.n	8010aa4 <_dtoa_r+0x144>
 8010a92:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010a96:	eeb4 6b47 	vcmp.f64	d6, d7
 8010a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9e:	bf18      	it	ne
 8010aa0:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8010aa4:	f1b8 0f16 	cmp.w	r8, #22
 8010aa8:	d82b      	bhi.n	8010b02 <_dtoa_r+0x1a2>
 8010aaa:	495f      	ldr	r1, [pc, #380]	@ (8010c28 <_dtoa_r+0x2c8>)
 8010aac:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010ab0:	ed91 7b00 	vldr	d7, [r1]
 8010ab4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010abc:	d501      	bpl.n	8010ac2 <_dtoa_r+0x162>
 8010abe:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010ac2:	2100      	movs	r1, #0
 8010ac4:	e01e      	b.n	8010b04 <_dtoa_r+0x1a4>
 8010ac6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ac8:	441a      	add	r2, r3
 8010aca:	f202 4132 	addw	r1, r2, #1074	@ 0x432
 8010ace:	2920      	cmp	r1, #32
 8010ad0:	bfc1      	itttt	gt
 8010ad2:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010ad6:	408e      	lslgt	r6, r1
 8010ad8:	f202 4112 	addwgt	r1, r2, #1042	@ 0x412
 8010adc:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010ae0:	bfd6      	itet	le
 8010ae2:	f1c1 0120 	rsble	r1, r1, #32
 8010ae6:	4331      	orrgt	r1, r6
 8010ae8:	fa04 f101 	lslle.w	r1, r4, r1
 8010aec:	ee07 1a90 	vmov	s15, r1
 8010af0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010af4:	3a01      	subs	r2, #1
 8010af6:	ee17 1a90 	vmov	r1, s15
 8010afa:	2501      	movs	r5, #1
 8010afc:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010b00:	e7a8      	b.n	8010a54 <_dtoa_r+0xf4>
 8010b02:	2101      	movs	r1, #1
 8010b04:	1a9b      	subs	r3, r3, r2
 8010b06:	1e5a      	subs	r2, r3, #1
 8010b08:	bf45      	ittet	mi
 8010b0a:	f1c3 0301 	rsbmi	r3, r3, #1
 8010b0e:	9303      	strmi	r3, [sp, #12]
 8010b10:	2300      	movpl	r3, #0
 8010b12:	2300      	movmi	r3, #0
 8010b14:	9207      	str	r2, [sp, #28]
 8010b16:	bf54      	ite	pl
 8010b18:	9303      	strpl	r3, [sp, #12]
 8010b1a:	9307      	strmi	r3, [sp, #28]
 8010b1c:	f1b8 0f00 	cmp.w	r8, #0
 8010b20:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010b22:	db18      	blt.n	8010b56 <_dtoa_r+0x1f6>
 8010b24:	9b07      	ldr	r3, [sp, #28]
 8010b26:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8010b2a:	4443      	add	r3, r8
 8010b2c:	9307      	str	r3, [sp, #28]
 8010b2e:	2300      	movs	r3, #0
 8010b30:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010b32:	2a09      	cmp	r2, #9
 8010b34:	d845      	bhi.n	8010bc2 <_dtoa_r+0x262>
 8010b36:	2a05      	cmp	r2, #5
 8010b38:	bfc4      	itt	gt
 8010b3a:	3a04      	subgt	r2, #4
 8010b3c:	921a      	strgt	r2, [sp, #104]	@ 0x68
 8010b3e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010b40:	f1a2 0202 	sub.w	r2, r2, #2
 8010b44:	bfcc      	ite	gt
 8010b46:	2400      	movgt	r4, #0
 8010b48:	2401      	movle	r4, #1
 8010b4a:	2a03      	cmp	r2, #3
 8010b4c:	d844      	bhi.n	8010bd8 <_dtoa_r+0x278>
 8010b4e:	e8df f002 	tbb	[pc, r2]
 8010b52:	3634      	.short	0x3634
 8010b54:	0b17      	.short	0x0b17
 8010b56:	9b03      	ldr	r3, [sp, #12]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	eba3 0308 	sub.w	r3, r3, r8
 8010b5e:	9303      	str	r3, [sp, #12]
 8010b60:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b62:	f1c8 0300 	rsb	r3, r8, #0
 8010b66:	e7e3      	b.n	8010b30 <_dtoa_r+0x1d0>
 8010b68:	2201      	movs	r2, #1
 8010b6a:	9208      	str	r2, [sp, #32]
 8010b6c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010b6e:	eb08 0b02 	add.w	fp, r8, r2
 8010b72:	f10b 0a01 	add.w	sl, fp, #1
 8010b76:	4652      	mov	r2, sl
 8010b78:	2a01      	cmp	r2, #1
 8010b7a:	bfb8      	it	lt
 8010b7c:	2201      	movlt	r2, #1
 8010b7e:	e006      	b.n	8010b8e <_dtoa_r+0x22e>
 8010b80:	2201      	movs	r2, #1
 8010b82:	9208      	str	r2, [sp, #32]
 8010b84:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010b86:	2a00      	cmp	r2, #0
 8010b88:	dd29      	ble.n	8010bde <_dtoa_r+0x27e>
 8010b8a:	4693      	mov	fp, r2
 8010b8c:	4692      	mov	sl, r2
 8010b8e:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010b92:	2100      	movs	r1, #0
 8010b94:	2004      	movs	r0, #4
 8010b96:	f100 0614 	add.w	r6, r0, #20
 8010b9a:	4296      	cmp	r6, r2
 8010b9c:	d926      	bls.n	8010bec <_dtoa_r+0x28c>
 8010b9e:	6079      	str	r1, [r7, #4]
 8010ba0:	4648      	mov	r0, r9
 8010ba2:	9306      	str	r3, [sp, #24]
 8010ba4:	f000 fc84 	bl	80114b0 <_Balloc>
 8010ba8:	9b06      	ldr	r3, [sp, #24]
 8010baa:	4607      	mov	r7, r0
 8010bac:	2800      	cmp	r0, #0
 8010bae:	d13f      	bne.n	8010c30 <_dtoa_r+0x2d0>
 8010bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8010c2c <_dtoa_r+0x2cc>)
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	f240 11af 	movw	r1, #431	@ 0x1af
 8010bb8:	e6e8      	b.n	801098c <_dtoa_r+0x2c>
 8010bba:	2200      	movs	r2, #0
 8010bbc:	e7e1      	b.n	8010b82 <_dtoa_r+0x222>
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	e7d3      	b.n	8010b6a <_dtoa_r+0x20a>
 8010bc2:	2401      	movs	r4, #1
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	921a      	str	r2, [sp, #104]	@ 0x68
 8010bc8:	9408      	str	r4, [sp, #32]
 8010bca:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010bce:	2100      	movs	r1, #0
 8010bd0:	46da      	mov	sl, fp
 8010bd2:	2212      	movs	r2, #18
 8010bd4:	911b      	str	r1, [sp, #108]	@ 0x6c
 8010bd6:	e7da      	b.n	8010b8e <_dtoa_r+0x22e>
 8010bd8:	2201      	movs	r2, #1
 8010bda:	9208      	str	r2, [sp, #32]
 8010bdc:	e7f5      	b.n	8010bca <_dtoa_r+0x26a>
 8010bde:	f04f 0b01 	mov.w	fp, #1
 8010be2:	46da      	mov	sl, fp
 8010be4:	465a      	mov	r2, fp
 8010be6:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 8010bea:	e7d0      	b.n	8010b8e <_dtoa_r+0x22e>
 8010bec:	3101      	adds	r1, #1
 8010bee:	0040      	lsls	r0, r0, #1
 8010bf0:	e7d1      	b.n	8010b96 <_dtoa_r+0x236>
 8010bf2:	bf00      	nop
 8010bf4:	f3af 8000 	nop.w
 8010bf8:	636f4361 	.word	0x636f4361
 8010bfc:	3fd287a7 	.word	0x3fd287a7
 8010c00:	8b60c8b3 	.word	0x8b60c8b3
 8010c04:	3fc68a28 	.word	0x3fc68a28
 8010c08:	509f79fb 	.word	0x509f79fb
 8010c0c:	3fd34413 	.word	0x3fd34413
 8010c10:	08013e13 	.word	0x08013e13
 8010c14:	08013e2a 	.word	0x08013e2a
 8010c18:	7ff00000 	.word	0x7ff00000
 8010c1c:	08013e0f 	.word	0x08013e0f
 8010c20:	08013f14 	.word	0x08013f14
 8010c24:	08013f13 	.word	0x08013f13
 8010c28:	08013f98 	.word	0x08013f98
 8010c2c:	08013e82 	.word	0x08013e82
 8010c30:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010c34:	f1ba 0f0e 	cmp.w	sl, #14
 8010c38:	6010      	str	r0, [r2, #0]
 8010c3a:	d86e      	bhi.n	8010d1a <_dtoa_r+0x3ba>
 8010c3c:	2c00      	cmp	r4, #0
 8010c3e:	d06c      	beq.n	8010d1a <_dtoa_r+0x3ba>
 8010c40:	f1b8 0f00 	cmp.w	r8, #0
 8010c44:	f340 80b4 	ble.w	8010db0 <_dtoa_r+0x450>
 8010c48:	4ac8      	ldr	r2, [pc, #800]	@ (8010f6c <_dtoa_r+0x60c>)
 8010c4a:	f008 010f 	and.w	r1, r8, #15
 8010c4e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010c52:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010c56:	ed92 7b00 	vldr	d7, [r2]
 8010c5a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010c5e:	f000 809b 	beq.w	8010d98 <_dtoa_r+0x438>
 8010c62:	4ac3      	ldr	r2, [pc, #780]	@ (8010f70 <_dtoa_r+0x610>)
 8010c64:	ed92 6b08 	vldr	d6, [r2, #32]
 8010c68:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010c6c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010c70:	f001 010f 	and.w	r1, r1, #15
 8010c74:	2203      	movs	r2, #3
 8010c76:	48be      	ldr	r0, [pc, #760]	@ (8010f70 <_dtoa_r+0x610>)
 8010c78:	2900      	cmp	r1, #0
 8010c7a:	f040 808f 	bne.w	8010d9c <_dtoa_r+0x43c>
 8010c7e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8010c82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010c86:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010c8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010c8c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010c90:	2900      	cmp	r1, #0
 8010c92:	f000 80b3 	beq.w	8010dfc <_dtoa_r+0x49c>
 8010c96:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010c9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca2:	f140 80ab 	bpl.w	8010dfc <_dtoa_r+0x49c>
 8010ca6:	f1ba 0f00 	cmp.w	sl, #0
 8010caa:	f000 80a7 	beq.w	8010dfc <_dtoa_r+0x49c>
 8010cae:	f1bb 0f00 	cmp.w	fp, #0
 8010cb2:	dd30      	ble.n	8010d16 <_dtoa_r+0x3b6>
 8010cb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010cb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010cbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010cc0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8010cc4:	9106      	str	r1, [sp, #24]
 8010cc6:	3201      	adds	r2, #1
 8010cc8:	465c      	mov	r4, fp
 8010cca:	ed9d 6b04 	vldr	d6, [sp, #16]
 8010cce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010cd2:	ee07 2a90 	vmov	s15, r2
 8010cd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010cda:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010cde:	ee15 2a90 	vmov	r2, s11
 8010ce2:	ec51 0b15 	vmov	r0, r1, d5
 8010ce6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010cea:	2c00      	cmp	r4, #0
 8010cec:	f040 808a 	bne.w	8010e04 <_dtoa_r+0x4a4>
 8010cf0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010cf4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010cf8:	ec41 0b17 	vmov	d7, r0, r1
 8010cfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d04:	f300 826a 	bgt.w	80111dc <_dtoa_r+0x87c>
 8010d08:	eeb1 7b47 	vneg.f64	d7, d7
 8010d0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d14:	d423      	bmi.n	8010d5e <_dtoa_r+0x3fe>
 8010d16:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010d1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010d1c:	2a00      	cmp	r2, #0
 8010d1e:	f2c0 8129 	blt.w	8010f74 <_dtoa_r+0x614>
 8010d22:	f1b8 0f0e 	cmp.w	r8, #14
 8010d26:	f300 8125 	bgt.w	8010f74 <_dtoa_r+0x614>
 8010d2a:	4b90      	ldr	r3, [pc, #576]	@ (8010f6c <_dtoa_r+0x60c>)
 8010d2c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010d30:	ed93 6b00 	vldr	d6, [r3]
 8010d34:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f280 80c8 	bge.w	8010ecc <_dtoa_r+0x56c>
 8010d3c:	f1ba 0f00 	cmp.w	sl, #0
 8010d40:	f300 80c4 	bgt.w	8010ecc <_dtoa_r+0x56c>
 8010d44:	d10b      	bne.n	8010d5e <_dtoa_r+0x3fe>
 8010d46:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010d4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010d4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010d52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5a:	f2c0 823c 	blt.w	80111d6 <_dtoa_r+0x876>
 8010d5e:	2400      	movs	r4, #0
 8010d60:	4625      	mov	r5, r4
 8010d62:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010d64:	43db      	mvns	r3, r3
 8010d66:	9306      	str	r3, [sp, #24]
 8010d68:	463e      	mov	r6, r7
 8010d6a:	f04f 0800 	mov.w	r8, #0
 8010d6e:	4621      	mov	r1, r4
 8010d70:	4648      	mov	r0, r9
 8010d72:	f000 fbdd 	bl	8011530 <_Bfree>
 8010d76:	2d00      	cmp	r5, #0
 8010d78:	f000 80a2 	beq.w	8010ec0 <_dtoa_r+0x560>
 8010d7c:	f1b8 0f00 	cmp.w	r8, #0
 8010d80:	d005      	beq.n	8010d8e <_dtoa_r+0x42e>
 8010d82:	45a8      	cmp	r8, r5
 8010d84:	d003      	beq.n	8010d8e <_dtoa_r+0x42e>
 8010d86:	4641      	mov	r1, r8
 8010d88:	4648      	mov	r0, r9
 8010d8a:	f000 fbd1 	bl	8011530 <_Bfree>
 8010d8e:	4629      	mov	r1, r5
 8010d90:	4648      	mov	r0, r9
 8010d92:	f000 fbcd 	bl	8011530 <_Bfree>
 8010d96:	e093      	b.n	8010ec0 <_dtoa_r+0x560>
 8010d98:	2202      	movs	r2, #2
 8010d9a:	e76c      	b.n	8010c76 <_dtoa_r+0x316>
 8010d9c:	07cc      	lsls	r4, r1, #31
 8010d9e:	d504      	bpl.n	8010daa <_dtoa_r+0x44a>
 8010da0:	ed90 6b00 	vldr	d6, [r0]
 8010da4:	3201      	adds	r2, #1
 8010da6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010daa:	1049      	asrs	r1, r1, #1
 8010dac:	3008      	adds	r0, #8
 8010dae:	e763      	b.n	8010c78 <_dtoa_r+0x318>
 8010db0:	d022      	beq.n	8010df8 <_dtoa_r+0x498>
 8010db2:	f1c8 0100 	rsb	r1, r8, #0
 8010db6:	4a6d      	ldr	r2, [pc, #436]	@ (8010f6c <_dtoa_r+0x60c>)
 8010db8:	f001 000f 	and.w	r0, r1, #15
 8010dbc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010dc0:	ed92 7b00 	vldr	d7, [r2]
 8010dc4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010dc8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010dcc:	4868      	ldr	r0, [pc, #416]	@ (8010f70 <_dtoa_r+0x610>)
 8010dce:	1109      	asrs	r1, r1, #4
 8010dd0:	2400      	movs	r4, #0
 8010dd2:	2202      	movs	r2, #2
 8010dd4:	b929      	cbnz	r1, 8010de2 <_dtoa_r+0x482>
 8010dd6:	2c00      	cmp	r4, #0
 8010dd8:	f43f af57 	beq.w	8010c8a <_dtoa_r+0x32a>
 8010ddc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010de0:	e753      	b.n	8010c8a <_dtoa_r+0x32a>
 8010de2:	07ce      	lsls	r6, r1, #31
 8010de4:	d505      	bpl.n	8010df2 <_dtoa_r+0x492>
 8010de6:	ed90 6b00 	vldr	d6, [r0]
 8010dea:	3201      	adds	r2, #1
 8010dec:	2401      	movs	r4, #1
 8010dee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010df2:	1049      	asrs	r1, r1, #1
 8010df4:	3008      	adds	r0, #8
 8010df6:	e7ed      	b.n	8010dd4 <_dtoa_r+0x474>
 8010df8:	2202      	movs	r2, #2
 8010dfa:	e746      	b.n	8010c8a <_dtoa_r+0x32a>
 8010dfc:	f8cd 8018 	str.w	r8, [sp, #24]
 8010e00:	4654      	mov	r4, sl
 8010e02:	e762      	b.n	8010cca <_dtoa_r+0x36a>
 8010e04:	4a59      	ldr	r2, [pc, #356]	@ (8010f6c <_dtoa_r+0x60c>)
 8010e06:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010e0a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010e0e:	9a08      	ldr	r2, [sp, #32]
 8010e10:	ec41 0b17 	vmov	d7, r0, r1
 8010e14:	443c      	add	r4, r7
 8010e16:	b34a      	cbz	r2, 8010e6c <_dtoa_r+0x50c>
 8010e18:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010e1c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010e20:	463e      	mov	r6, r7
 8010e22:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010e26:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010e2a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010e2e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010e32:	ee14 2a90 	vmov	r2, s9
 8010e36:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010e3a:	3230      	adds	r2, #48	@ 0x30
 8010e3c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e48:	f806 2b01 	strb.w	r2, [r6], #1
 8010e4c:	d438      	bmi.n	8010ec0 <_dtoa_r+0x560>
 8010e4e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010e52:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5a:	d46e      	bmi.n	8010f3a <_dtoa_r+0x5da>
 8010e5c:	42a6      	cmp	r6, r4
 8010e5e:	f43f af5a 	beq.w	8010d16 <_dtoa_r+0x3b6>
 8010e62:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010e66:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010e6a:	e7e0      	b.n	8010e2e <_dtoa_r+0x4ce>
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	463e      	mov	r6, r7
 8010e70:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010e74:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010e78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010e7c:	ee14 2a90 	vmov	r2, s9
 8010e80:	3230      	adds	r2, #48	@ 0x30
 8010e82:	f806 2b01 	strb.w	r2, [r6], #1
 8010e86:	42a6      	cmp	r6, r4
 8010e88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010e8c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e90:	d119      	bne.n	8010ec6 <_dtoa_r+0x566>
 8010e92:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010e96:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010e9a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea2:	dc4a      	bgt.n	8010f3a <_dtoa_r+0x5da>
 8010ea4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010ea8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb0:	f57f af31 	bpl.w	8010d16 <_dtoa_r+0x3b6>
 8010eb4:	460e      	mov	r6, r1
 8010eb6:	3901      	subs	r1, #1
 8010eb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010ebc:	2b30      	cmp	r3, #48	@ 0x30
 8010ebe:	d0f9      	beq.n	8010eb4 <_dtoa_r+0x554>
 8010ec0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010ec4:	e027      	b.n	8010f16 <_dtoa_r+0x5b6>
 8010ec6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010eca:	e7d5      	b.n	8010e78 <_dtoa_r+0x518>
 8010ecc:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010ed0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010ed4:	463e      	mov	r6, r7
 8010ed6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010eda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010ede:	ee15 3a10 	vmov	r3, s10
 8010ee2:	3330      	adds	r3, #48	@ 0x30
 8010ee4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ee8:	1bf3      	subs	r3, r6, r7
 8010eea:	459a      	cmp	sl, r3
 8010eec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010ef0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010ef4:	d132      	bne.n	8010f5c <_dtoa_r+0x5fc>
 8010ef6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010efa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f02:	dc18      	bgt.n	8010f36 <_dtoa_r+0x5d6>
 8010f04:	eeb4 7b46 	vcmp.f64	d7, d6
 8010f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0c:	d103      	bne.n	8010f16 <_dtoa_r+0x5b6>
 8010f0e:	ee15 3a10 	vmov	r3, s10
 8010f12:	07db      	lsls	r3, r3, #31
 8010f14:	d40f      	bmi.n	8010f36 <_dtoa_r+0x5d6>
 8010f16:	9902      	ldr	r1, [sp, #8]
 8010f18:	4648      	mov	r0, r9
 8010f1a:	f000 fb09 	bl	8011530 <_Bfree>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010f22:	7033      	strb	r3, [r6, #0]
 8010f24:	f108 0301 	add.w	r3, r8, #1
 8010f28:	6013      	str	r3, [r2, #0]
 8010f2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f000 824b 	beq.w	80113c8 <_dtoa_r+0xa68>
 8010f32:	601e      	str	r6, [r3, #0]
 8010f34:	e248      	b.n	80113c8 <_dtoa_r+0xa68>
 8010f36:	f8cd 8018 	str.w	r8, [sp, #24]
 8010f3a:	4633      	mov	r3, r6
 8010f3c:	461e      	mov	r6, r3
 8010f3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f42:	2a39      	cmp	r2, #57	@ 0x39
 8010f44:	d106      	bne.n	8010f54 <_dtoa_r+0x5f4>
 8010f46:	429f      	cmp	r7, r3
 8010f48:	d1f8      	bne.n	8010f3c <_dtoa_r+0x5dc>
 8010f4a:	9a06      	ldr	r2, [sp, #24]
 8010f4c:	3201      	adds	r2, #1
 8010f4e:	9206      	str	r2, [sp, #24]
 8010f50:	2230      	movs	r2, #48	@ 0x30
 8010f52:	703a      	strb	r2, [r7, #0]
 8010f54:	781a      	ldrb	r2, [r3, #0]
 8010f56:	3201      	adds	r2, #1
 8010f58:	701a      	strb	r2, [r3, #0]
 8010f5a:	e7b1      	b.n	8010ec0 <_dtoa_r+0x560>
 8010f5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f68:	d1b5      	bne.n	8010ed6 <_dtoa_r+0x576>
 8010f6a:	e7d4      	b.n	8010f16 <_dtoa_r+0x5b6>
 8010f6c:	08013f98 	.word	0x08013f98
 8010f70:	08013f70 	.word	0x08013f70
 8010f74:	9908      	ldr	r1, [sp, #32]
 8010f76:	2900      	cmp	r1, #0
 8010f78:	f000 80e9 	beq.w	801114e <_dtoa_r+0x7ee>
 8010f7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f7e:	2901      	cmp	r1, #1
 8010f80:	f300 80cb 	bgt.w	801111a <_dtoa_r+0x7ba>
 8010f84:	2d00      	cmp	r5, #0
 8010f86:	f000 80c4 	beq.w	8011112 <_dtoa_r+0x7b2>
 8010f8a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010f8e:	9e03      	ldr	r6, [sp, #12]
 8010f90:	461c      	mov	r4, r3
 8010f92:	9306      	str	r3, [sp, #24]
 8010f94:	9b03      	ldr	r3, [sp, #12]
 8010f96:	4413      	add	r3, r2
 8010f98:	9303      	str	r3, [sp, #12]
 8010f9a:	9b07      	ldr	r3, [sp, #28]
 8010f9c:	2101      	movs	r1, #1
 8010f9e:	4413      	add	r3, r2
 8010fa0:	4648      	mov	r0, r9
 8010fa2:	9307      	str	r3, [sp, #28]
 8010fa4:	f000 fb78 	bl	8011698 <__i2b>
 8010fa8:	9b06      	ldr	r3, [sp, #24]
 8010faa:	4605      	mov	r5, r0
 8010fac:	b166      	cbz	r6, 8010fc8 <_dtoa_r+0x668>
 8010fae:	9a07      	ldr	r2, [sp, #28]
 8010fb0:	2a00      	cmp	r2, #0
 8010fb2:	dd09      	ble.n	8010fc8 <_dtoa_r+0x668>
 8010fb4:	42b2      	cmp	r2, r6
 8010fb6:	9903      	ldr	r1, [sp, #12]
 8010fb8:	bfa8      	it	ge
 8010fba:	4632      	movge	r2, r6
 8010fbc:	1a89      	subs	r1, r1, r2
 8010fbe:	9103      	str	r1, [sp, #12]
 8010fc0:	9907      	ldr	r1, [sp, #28]
 8010fc2:	1ab6      	subs	r6, r6, r2
 8010fc4:	1a8a      	subs	r2, r1, r2
 8010fc6:	9207      	str	r2, [sp, #28]
 8010fc8:	b30b      	cbz	r3, 801100e <_dtoa_r+0x6ae>
 8010fca:	9a08      	ldr	r2, [sp, #32]
 8010fcc:	2a00      	cmp	r2, #0
 8010fce:	f000 80c5 	beq.w	801115c <_dtoa_r+0x7fc>
 8010fd2:	2c00      	cmp	r4, #0
 8010fd4:	f000 80bf 	beq.w	8011156 <_dtoa_r+0x7f6>
 8010fd8:	4629      	mov	r1, r5
 8010fda:	4622      	mov	r2, r4
 8010fdc:	4648      	mov	r0, r9
 8010fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fe0:	f000 fc12 	bl	8011808 <__pow5mult>
 8010fe4:	9a02      	ldr	r2, [sp, #8]
 8010fe6:	4601      	mov	r1, r0
 8010fe8:	4605      	mov	r5, r0
 8010fea:	4648      	mov	r0, r9
 8010fec:	f000 fb6a 	bl	80116c4 <__multiply>
 8010ff0:	9902      	ldr	r1, [sp, #8]
 8010ff2:	9006      	str	r0, [sp, #24]
 8010ff4:	4648      	mov	r0, r9
 8010ff6:	f000 fa9b 	bl	8011530 <_Bfree>
 8010ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ffc:	1b1b      	subs	r3, r3, r4
 8010ffe:	f000 80b0 	beq.w	8011162 <_dtoa_r+0x802>
 8011002:	9906      	ldr	r1, [sp, #24]
 8011004:	461a      	mov	r2, r3
 8011006:	4648      	mov	r0, r9
 8011008:	f000 fbfe 	bl	8011808 <__pow5mult>
 801100c:	9002      	str	r0, [sp, #8]
 801100e:	2101      	movs	r1, #1
 8011010:	4648      	mov	r0, r9
 8011012:	f000 fb41 	bl	8011698 <__i2b>
 8011016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011018:	4604      	mov	r4, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	f000 81da 	beq.w	80113d4 <_dtoa_r+0xa74>
 8011020:	461a      	mov	r2, r3
 8011022:	4601      	mov	r1, r0
 8011024:	4648      	mov	r0, r9
 8011026:	f000 fbef 	bl	8011808 <__pow5mult>
 801102a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801102c:	2b01      	cmp	r3, #1
 801102e:	4604      	mov	r4, r0
 8011030:	f300 80a0 	bgt.w	8011174 <_dtoa_r+0x814>
 8011034:	9b04      	ldr	r3, [sp, #16]
 8011036:	2b00      	cmp	r3, #0
 8011038:	f040 8096 	bne.w	8011168 <_dtoa_r+0x808>
 801103c:	9b05      	ldr	r3, [sp, #20]
 801103e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011042:	2a00      	cmp	r2, #0
 8011044:	f040 8092 	bne.w	801116c <_dtoa_r+0x80c>
 8011048:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801104c:	0d12      	lsrs	r2, r2, #20
 801104e:	0512      	lsls	r2, r2, #20
 8011050:	2a00      	cmp	r2, #0
 8011052:	f000 808d 	beq.w	8011170 <_dtoa_r+0x810>
 8011056:	9b03      	ldr	r3, [sp, #12]
 8011058:	3301      	adds	r3, #1
 801105a:	9303      	str	r3, [sp, #12]
 801105c:	9b07      	ldr	r3, [sp, #28]
 801105e:	3301      	adds	r3, #1
 8011060:	9307      	str	r3, [sp, #28]
 8011062:	2301      	movs	r3, #1
 8011064:	930a      	str	r3, [sp, #40]	@ 0x28
 8011066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011068:	2b00      	cmp	r3, #0
 801106a:	f000 81b9 	beq.w	80113e0 <_dtoa_r+0xa80>
 801106e:	6922      	ldr	r2, [r4, #16]
 8011070:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011074:	6910      	ldr	r0, [r2, #16]
 8011076:	f000 fac3 	bl	8011600 <__hi0bits>
 801107a:	f1c0 0020 	rsb	r0, r0, #32
 801107e:	9b07      	ldr	r3, [sp, #28]
 8011080:	4418      	add	r0, r3
 8011082:	f010 001f 	ands.w	r0, r0, #31
 8011086:	f000 8081 	beq.w	801118c <_dtoa_r+0x82c>
 801108a:	f1c0 0220 	rsb	r2, r0, #32
 801108e:	2a04      	cmp	r2, #4
 8011090:	dd73      	ble.n	801117a <_dtoa_r+0x81a>
 8011092:	9b03      	ldr	r3, [sp, #12]
 8011094:	f1c0 001c 	rsb	r0, r0, #28
 8011098:	4403      	add	r3, r0
 801109a:	9303      	str	r3, [sp, #12]
 801109c:	9b07      	ldr	r3, [sp, #28]
 801109e:	4406      	add	r6, r0
 80110a0:	4403      	add	r3, r0
 80110a2:	9307      	str	r3, [sp, #28]
 80110a4:	9b03      	ldr	r3, [sp, #12]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	dd05      	ble.n	80110b6 <_dtoa_r+0x756>
 80110aa:	9902      	ldr	r1, [sp, #8]
 80110ac:	461a      	mov	r2, r3
 80110ae:	4648      	mov	r0, r9
 80110b0:	f000 fc04 	bl	80118bc <__lshift>
 80110b4:	9002      	str	r0, [sp, #8]
 80110b6:	9b07      	ldr	r3, [sp, #28]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	dd05      	ble.n	80110c8 <_dtoa_r+0x768>
 80110bc:	4621      	mov	r1, r4
 80110be:	461a      	mov	r2, r3
 80110c0:	4648      	mov	r0, r9
 80110c2:	f000 fbfb 	bl	80118bc <__lshift>
 80110c6:	4604      	mov	r4, r0
 80110c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d060      	beq.n	8011190 <_dtoa_r+0x830>
 80110ce:	9802      	ldr	r0, [sp, #8]
 80110d0:	4621      	mov	r1, r4
 80110d2:	f000 fc5f 	bl	8011994 <__mcmp>
 80110d6:	2800      	cmp	r0, #0
 80110d8:	da5a      	bge.n	8011190 <_dtoa_r+0x830>
 80110da:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80110de:	9306      	str	r3, [sp, #24]
 80110e0:	9902      	ldr	r1, [sp, #8]
 80110e2:	2300      	movs	r3, #0
 80110e4:	220a      	movs	r2, #10
 80110e6:	4648      	mov	r0, r9
 80110e8:	f000 fa44 	bl	8011574 <__multadd>
 80110ec:	9b08      	ldr	r3, [sp, #32]
 80110ee:	9002      	str	r0, [sp, #8]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	f000 8177 	beq.w	80113e4 <_dtoa_r+0xa84>
 80110f6:	4629      	mov	r1, r5
 80110f8:	2300      	movs	r3, #0
 80110fa:	220a      	movs	r2, #10
 80110fc:	4648      	mov	r0, r9
 80110fe:	f000 fa39 	bl	8011574 <__multadd>
 8011102:	f1bb 0f00 	cmp.w	fp, #0
 8011106:	4605      	mov	r5, r0
 8011108:	dc6e      	bgt.n	80111e8 <_dtoa_r+0x888>
 801110a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801110c:	2b02      	cmp	r3, #2
 801110e:	dc48      	bgt.n	80111a2 <_dtoa_r+0x842>
 8011110:	e06a      	b.n	80111e8 <_dtoa_r+0x888>
 8011112:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011114:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011118:	e739      	b.n	8010f8e <_dtoa_r+0x62e>
 801111a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 801111e:	42a3      	cmp	r3, r4
 8011120:	db07      	blt.n	8011132 <_dtoa_r+0x7d2>
 8011122:	f1ba 0f00 	cmp.w	sl, #0
 8011126:	eba3 0404 	sub.w	r4, r3, r4
 801112a:	db0b      	blt.n	8011144 <_dtoa_r+0x7e4>
 801112c:	9e03      	ldr	r6, [sp, #12]
 801112e:	4652      	mov	r2, sl
 8011130:	e72f      	b.n	8010f92 <_dtoa_r+0x632>
 8011132:	1ae2      	subs	r2, r4, r3
 8011134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011136:	9e03      	ldr	r6, [sp, #12]
 8011138:	4413      	add	r3, r2
 801113a:	9309      	str	r3, [sp, #36]	@ 0x24
 801113c:	4652      	mov	r2, sl
 801113e:	4623      	mov	r3, r4
 8011140:	2400      	movs	r4, #0
 8011142:	e726      	b.n	8010f92 <_dtoa_r+0x632>
 8011144:	9a03      	ldr	r2, [sp, #12]
 8011146:	eba2 060a 	sub.w	r6, r2, sl
 801114a:	2200      	movs	r2, #0
 801114c:	e721      	b.n	8010f92 <_dtoa_r+0x632>
 801114e:	9e03      	ldr	r6, [sp, #12]
 8011150:	9d08      	ldr	r5, [sp, #32]
 8011152:	461c      	mov	r4, r3
 8011154:	e72a      	b.n	8010fac <_dtoa_r+0x64c>
 8011156:	9a02      	ldr	r2, [sp, #8]
 8011158:	9206      	str	r2, [sp, #24]
 801115a:	e752      	b.n	8011002 <_dtoa_r+0x6a2>
 801115c:	9902      	ldr	r1, [sp, #8]
 801115e:	461a      	mov	r2, r3
 8011160:	e751      	b.n	8011006 <_dtoa_r+0x6a6>
 8011162:	9b06      	ldr	r3, [sp, #24]
 8011164:	9302      	str	r3, [sp, #8]
 8011166:	e752      	b.n	801100e <_dtoa_r+0x6ae>
 8011168:	2300      	movs	r3, #0
 801116a:	e77b      	b.n	8011064 <_dtoa_r+0x704>
 801116c:	9b04      	ldr	r3, [sp, #16]
 801116e:	e779      	b.n	8011064 <_dtoa_r+0x704>
 8011170:	920a      	str	r2, [sp, #40]	@ 0x28
 8011172:	e778      	b.n	8011066 <_dtoa_r+0x706>
 8011174:	2300      	movs	r3, #0
 8011176:	930a      	str	r3, [sp, #40]	@ 0x28
 8011178:	e779      	b.n	801106e <_dtoa_r+0x70e>
 801117a:	d093      	beq.n	80110a4 <_dtoa_r+0x744>
 801117c:	9b03      	ldr	r3, [sp, #12]
 801117e:	321c      	adds	r2, #28
 8011180:	4413      	add	r3, r2
 8011182:	9303      	str	r3, [sp, #12]
 8011184:	9b07      	ldr	r3, [sp, #28]
 8011186:	4416      	add	r6, r2
 8011188:	4413      	add	r3, r2
 801118a:	e78a      	b.n	80110a2 <_dtoa_r+0x742>
 801118c:	4602      	mov	r2, r0
 801118e:	e7f5      	b.n	801117c <_dtoa_r+0x81c>
 8011190:	f1ba 0f00 	cmp.w	sl, #0
 8011194:	f8cd 8018 	str.w	r8, [sp, #24]
 8011198:	46d3      	mov	fp, sl
 801119a:	dc21      	bgt.n	80111e0 <_dtoa_r+0x880>
 801119c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801119e:	2b02      	cmp	r3, #2
 80111a0:	dd1e      	ble.n	80111e0 <_dtoa_r+0x880>
 80111a2:	f1bb 0f00 	cmp.w	fp, #0
 80111a6:	f47f addc 	bne.w	8010d62 <_dtoa_r+0x402>
 80111aa:	4621      	mov	r1, r4
 80111ac:	465b      	mov	r3, fp
 80111ae:	2205      	movs	r2, #5
 80111b0:	4648      	mov	r0, r9
 80111b2:	f000 f9df 	bl	8011574 <__multadd>
 80111b6:	4601      	mov	r1, r0
 80111b8:	4604      	mov	r4, r0
 80111ba:	9802      	ldr	r0, [sp, #8]
 80111bc:	f000 fbea 	bl	8011994 <__mcmp>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	f77f adce 	ble.w	8010d62 <_dtoa_r+0x402>
 80111c6:	463e      	mov	r6, r7
 80111c8:	2331      	movs	r3, #49	@ 0x31
 80111ca:	f806 3b01 	strb.w	r3, [r6], #1
 80111ce:	9b06      	ldr	r3, [sp, #24]
 80111d0:	3301      	adds	r3, #1
 80111d2:	9306      	str	r3, [sp, #24]
 80111d4:	e5c9      	b.n	8010d6a <_dtoa_r+0x40a>
 80111d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80111da:	4654      	mov	r4, sl
 80111dc:	4625      	mov	r5, r4
 80111de:	e7f2      	b.n	80111c6 <_dtoa_r+0x866>
 80111e0:	9b08      	ldr	r3, [sp, #32]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	f000 8102 	beq.w	80113ec <_dtoa_r+0xa8c>
 80111e8:	2e00      	cmp	r6, #0
 80111ea:	dd05      	ble.n	80111f8 <_dtoa_r+0x898>
 80111ec:	4629      	mov	r1, r5
 80111ee:	4632      	mov	r2, r6
 80111f0:	4648      	mov	r0, r9
 80111f2:	f000 fb63 	bl	80118bc <__lshift>
 80111f6:	4605      	mov	r5, r0
 80111f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d058      	beq.n	80112b0 <_dtoa_r+0x950>
 80111fe:	6869      	ldr	r1, [r5, #4]
 8011200:	4648      	mov	r0, r9
 8011202:	f000 f955 	bl	80114b0 <_Balloc>
 8011206:	4606      	mov	r6, r0
 8011208:	b928      	cbnz	r0, 8011216 <_dtoa_r+0x8b6>
 801120a:	4b82      	ldr	r3, [pc, #520]	@ (8011414 <_dtoa_r+0xab4>)
 801120c:	4602      	mov	r2, r0
 801120e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011212:	f7ff bbbb 	b.w	801098c <_dtoa_r+0x2c>
 8011216:	692a      	ldr	r2, [r5, #16]
 8011218:	3202      	adds	r2, #2
 801121a:	0092      	lsls	r2, r2, #2
 801121c:	f105 010c 	add.w	r1, r5, #12
 8011220:	300c      	adds	r0, #12
 8011222:	f7ff faae 	bl	8010782 <memcpy>
 8011226:	2201      	movs	r2, #1
 8011228:	4631      	mov	r1, r6
 801122a:	4648      	mov	r0, r9
 801122c:	f000 fb46 	bl	80118bc <__lshift>
 8011230:	1c7b      	adds	r3, r7, #1
 8011232:	9303      	str	r3, [sp, #12]
 8011234:	eb07 030b 	add.w	r3, r7, fp
 8011238:	9309      	str	r3, [sp, #36]	@ 0x24
 801123a:	9b04      	ldr	r3, [sp, #16]
 801123c:	f003 0301 	and.w	r3, r3, #1
 8011240:	46a8      	mov	r8, r5
 8011242:	9308      	str	r3, [sp, #32]
 8011244:	4605      	mov	r5, r0
 8011246:	9b03      	ldr	r3, [sp, #12]
 8011248:	9802      	ldr	r0, [sp, #8]
 801124a:	4621      	mov	r1, r4
 801124c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8011250:	f7ff fafc 	bl	801084c <quorem>
 8011254:	4641      	mov	r1, r8
 8011256:	9004      	str	r0, [sp, #16]
 8011258:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801125c:	9802      	ldr	r0, [sp, #8]
 801125e:	f000 fb99 	bl	8011994 <__mcmp>
 8011262:	462a      	mov	r2, r5
 8011264:	9007      	str	r0, [sp, #28]
 8011266:	4621      	mov	r1, r4
 8011268:	4648      	mov	r0, r9
 801126a:	f000 fbaf 	bl	80119cc <__mdiff>
 801126e:	68c2      	ldr	r2, [r0, #12]
 8011270:	4606      	mov	r6, r0
 8011272:	b9fa      	cbnz	r2, 80112b4 <_dtoa_r+0x954>
 8011274:	4601      	mov	r1, r0
 8011276:	9802      	ldr	r0, [sp, #8]
 8011278:	f000 fb8c 	bl	8011994 <__mcmp>
 801127c:	4602      	mov	r2, r0
 801127e:	4631      	mov	r1, r6
 8011280:	4648      	mov	r0, r9
 8011282:	920a      	str	r2, [sp, #40]	@ 0x28
 8011284:	f000 f954 	bl	8011530 <_Bfree>
 8011288:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801128a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801128c:	9e03      	ldr	r6, [sp, #12]
 801128e:	ea42 0103 	orr.w	r1, r2, r3
 8011292:	9b08      	ldr	r3, [sp, #32]
 8011294:	4319      	orrs	r1, r3
 8011296:	d10f      	bne.n	80112b8 <_dtoa_r+0x958>
 8011298:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801129c:	d028      	beq.n	80112f0 <_dtoa_r+0x990>
 801129e:	9b07      	ldr	r3, [sp, #28]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	dd02      	ble.n	80112aa <_dtoa_r+0x94a>
 80112a4:	9b04      	ldr	r3, [sp, #16]
 80112a6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80112aa:	f88b a000 	strb.w	sl, [fp]
 80112ae:	e55e      	b.n	8010d6e <_dtoa_r+0x40e>
 80112b0:	4628      	mov	r0, r5
 80112b2:	e7bd      	b.n	8011230 <_dtoa_r+0x8d0>
 80112b4:	2201      	movs	r2, #1
 80112b6:	e7e2      	b.n	801127e <_dtoa_r+0x91e>
 80112b8:	9b07      	ldr	r3, [sp, #28]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	db04      	blt.n	80112c8 <_dtoa_r+0x968>
 80112be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80112c0:	430b      	orrs	r3, r1
 80112c2:	9908      	ldr	r1, [sp, #32]
 80112c4:	430b      	orrs	r3, r1
 80112c6:	d120      	bne.n	801130a <_dtoa_r+0x9aa>
 80112c8:	2a00      	cmp	r2, #0
 80112ca:	ddee      	ble.n	80112aa <_dtoa_r+0x94a>
 80112cc:	9902      	ldr	r1, [sp, #8]
 80112ce:	2201      	movs	r2, #1
 80112d0:	4648      	mov	r0, r9
 80112d2:	f000 faf3 	bl	80118bc <__lshift>
 80112d6:	4621      	mov	r1, r4
 80112d8:	9002      	str	r0, [sp, #8]
 80112da:	f000 fb5b 	bl	8011994 <__mcmp>
 80112de:	2800      	cmp	r0, #0
 80112e0:	dc03      	bgt.n	80112ea <_dtoa_r+0x98a>
 80112e2:	d1e2      	bne.n	80112aa <_dtoa_r+0x94a>
 80112e4:	f01a 0f01 	tst.w	sl, #1
 80112e8:	d0df      	beq.n	80112aa <_dtoa_r+0x94a>
 80112ea:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80112ee:	d1d9      	bne.n	80112a4 <_dtoa_r+0x944>
 80112f0:	2339      	movs	r3, #57	@ 0x39
 80112f2:	f88b 3000 	strb.w	r3, [fp]
 80112f6:	4633      	mov	r3, r6
 80112f8:	461e      	mov	r6, r3
 80112fa:	3b01      	subs	r3, #1
 80112fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011300:	2a39      	cmp	r2, #57	@ 0x39
 8011302:	d052      	beq.n	80113aa <_dtoa_r+0xa4a>
 8011304:	3201      	adds	r2, #1
 8011306:	701a      	strb	r2, [r3, #0]
 8011308:	e531      	b.n	8010d6e <_dtoa_r+0x40e>
 801130a:	2a00      	cmp	r2, #0
 801130c:	dd07      	ble.n	801131e <_dtoa_r+0x9be>
 801130e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011312:	d0ed      	beq.n	80112f0 <_dtoa_r+0x990>
 8011314:	f10a 0301 	add.w	r3, sl, #1
 8011318:	f88b 3000 	strb.w	r3, [fp]
 801131c:	e527      	b.n	8010d6e <_dtoa_r+0x40e>
 801131e:	9b03      	ldr	r3, [sp, #12]
 8011320:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011322:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011326:	4293      	cmp	r3, r2
 8011328:	d029      	beq.n	801137e <_dtoa_r+0xa1e>
 801132a:	9902      	ldr	r1, [sp, #8]
 801132c:	2300      	movs	r3, #0
 801132e:	220a      	movs	r2, #10
 8011330:	4648      	mov	r0, r9
 8011332:	f000 f91f 	bl	8011574 <__multadd>
 8011336:	45a8      	cmp	r8, r5
 8011338:	9002      	str	r0, [sp, #8]
 801133a:	f04f 0300 	mov.w	r3, #0
 801133e:	f04f 020a 	mov.w	r2, #10
 8011342:	4641      	mov	r1, r8
 8011344:	4648      	mov	r0, r9
 8011346:	d107      	bne.n	8011358 <_dtoa_r+0x9f8>
 8011348:	f000 f914 	bl	8011574 <__multadd>
 801134c:	4680      	mov	r8, r0
 801134e:	4605      	mov	r5, r0
 8011350:	9b03      	ldr	r3, [sp, #12]
 8011352:	3301      	adds	r3, #1
 8011354:	9303      	str	r3, [sp, #12]
 8011356:	e776      	b.n	8011246 <_dtoa_r+0x8e6>
 8011358:	f000 f90c 	bl	8011574 <__multadd>
 801135c:	4629      	mov	r1, r5
 801135e:	4680      	mov	r8, r0
 8011360:	2300      	movs	r3, #0
 8011362:	220a      	movs	r2, #10
 8011364:	4648      	mov	r0, r9
 8011366:	f000 f905 	bl	8011574 <__multadd>
 801136a:	4605      	mov	r5, r0
 801136c:	e7f0      	b.n	8011350 <_dtoa_r+0x9f0>
 801136e:	f1bb 0f00 	cmp.w	fp, #0
 8011372:	bfcc      	ite	gt
 8011374:	465e      	movgt	r6, fp
 8011376:	2601      	movle	r6, #1
 8011378:	443e      	add	r6, r7
 801137a:	f04f 0800 	mov.w	r8, #0
 801137e:	9902      	ldr	r1, [sp, #8]
 8011380:	2201      	movs	r2, #1
 8011382:	4648      	mov	r0, r9
 8011384:	f000 fa9a 	bl	80118bc <__lshift>
 8011388:	4621      	mov	r1, r4
 801138a:	9002      	str	r0, [sp, #8]
 801138c:	f000 fb02 	bl	8011994 <__mcmp>
 8011390:	2800      	cmp	r0, #0
 8011392:	dcb0      	bgt.n	80112f6 <_dtoa_r+0x996>
 8011394:	d102      	bne.n	801139c <_dtoa_r+0xa3c>
 8011396:	f01a 0f01 	tst.w	sl, #1
 801139a:	d1ac      	bne.n	80112f6 <_dtoa_r+0x996>
 801139c:	4633      	mov	r3, r6
 801139e:	461e      	mov	r6, r3
 80113a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113a4:	2a30      	cmp	r2, #48	@ 0x30
 80113a6:	d0fa      	beq.n	801139e <_dtoa_r+0xa3e>
 80113a8:	e4e1      	b.n	8010d6e <_dtoa_r+0x40e>
 80113aa:	429f      	cmp	r7, r3
 80113ac:	d1a4      	bne.n	80112f8 <_dtoa_r+0x998>
 80113ae:	9b06      	ldr	r3, [sp, #24]
 80113b0:	3301      	adds	r3, #1
 80113b2:	9306      	str	r3, [sp, #24]
 80113b4:	2331      	movs	r3, #49	@ 0x31
 80113b6:	703b      	strb	r3, [r7, #0]
 80113b8:	e4d9      	b.n	8010d6e <_dtoa_r+0x40e>
 80113ba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80113bc:	4f16      	ldr	r7, [pc, #88]	@ (8011418 <_dtoa_r+0xab8>)
 80113be:	b11b      	cbz	r3, 80113c8 <_dtoa_r+0xa68>
 80113c0:	f107 0308 	add.w	r3, r7, #8
 80113c4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80113c6:	6013      	str	r3, [r2, #0]
 80113c8:	4638      	mov	r0, r7
 80113ca:	b00f      	add	sp, #60	@ 0x3c
 80113cc:	ecbd 8b02 	vpop	{d8}
 80113d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	f77f ae2c 	ble.w	8011034 <_dtoa_r+0x6d4>
 80113dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113de:	930a      	str	r3, [sp, #40]	@ 0x28
 80113e0:	2001      	movs	r0, #1
 80113e2:	e64c      	b.n	801107e <_dtoa_r+0x71e>
 80113e4:	f1bb 0f00 	cmp.w	fp, #0
 80113e8:	f77f aed8 	ble.w	801119c <_dtoa_r+0x83c>
 80113ec:	463e      	mov	r6, r7
 80113ee:	9802      	ldr	r0, [sp, #8]
 80113f0:	4621      	mov	r1, r4
 80113f2:	f7ff fa2b 	bl	801084c <quorem>
 80113f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80113fa:	f806 ab01 	strb.w	sl, [r6], #1
 80113fe:	1bf2      	subs	r2, r6, r7
 8011400:	4593      	cmp	fp, r2
 8011402:	ddb4      	ble.n	801136e <_dtoa_r+0xa0e>
 8011404:	9902      	ldr	r1, [sp, #8]
 8011406:	2300      	movs	r3, #0
 8011408:	220a      	movs	r2, #10
 801140a:	4648      	mov	r0, r9
 801140c:	f000 f8b2 	bl	8011574 <__multadd>
 8011410:	9002      	str	r0, [sp, #8]
 8011412:	e7ec      	b.n	80113ee <_dtoa_r+0xa8e>
 8011414:	08013e82 	.word	0x08013e82
 8011418:	08013e06 	.word	0x08013e06

0801141c <_free_r>:
 801141c:	b538      	push	{r3, r4, r5, lr}
 801141e:	4605      	mov	r5, r0
 8011420:	2900      	cmp	r1, #0
 8011422:	d041      	beq.n	80114a8 <_free_r+0x8c>
 8011424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011428:	1f0c      	subs	r4, r1, #4
 801142a:	2b00      	cmp	r3, #0
 801142c:	bfb8      	it	lt
 801142e:	18e4      	addlt	r4, r4, r3
 8011430:	f7fe fa90 	bl	800f954 <__malloc_lock>
 8011434:	4a1d      	ldr	r2, [pc, #116]	@ (80114ac <_free_r+0x90>)
 8011436:	6813      	ldr	r3, [r2, #0]
 8011438:	b933      	cbnz	r3, 8011448 <_free_r+0x2c>
 801143a:	6063      	str	r3, [r4, #4]
 801143c:	6014      	str	r4, [r2, #0]
 801143e:	4628      	mov	r0, r5
 8011440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011444:	f7fe ba8c 	b.w	800f960 <__malloc_unlock>
 8011448:	42a3      	cmp	r3, r4
 801144a:	d908      	bls.n	801145e <_free_r+0x42>
 801144c:	6820      	ldr	r0, [r4, #0]
 801144e:	1821      	adds	r1, r4, r0
 8011450:	428b      	cmp	r3, r1
 8011452:	bf01      	itttt	eq
 8011454:	6819      	ldreq	r1, [r3, #0]
 8011456:	685b      	ldreq	r3, [r3, #4]
 8011458:	1809      	addeq	r1, r1, r0
 801145a:	6021      	streq	r1, [r4, #0]
 801145c:	e7ed      	b.n	801143a <_free_r+0x1e>
 801145e:	461a      	mov	r2, r3
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	b10b      	cbz	r3, 8011468 <_free_r+0x4c>
 8011464:	42a3      	cmp	r3, r4
 8011466:	d9fa      	bls.n	801145e <_free_r+0x42>
 8011468:	6811      	ldr	r1, [r2, #0]
 801146a:	1850      	adds	r0, r2, r1
 801146c:	42a0      	cmp	r0, r4
 801146e:	d10b      	bne.n	8011488 <_free_r+0x6c>
 8011470:	6820      	ldr	r0, [r4, #0]
 8011472:	4401      	add	r1, r0
 8011474:	1850      	adds	r0, r2, r1
 8011476:	4283      	cmp	r3, r0
 8011478:	6011      	str	r1, [r2, #0]
 801147a:	d1e0      	bne.n	801143e <_free_r+0x22>
 801147c:	6818      	ldr	r0, [r3, #0]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	6053      	str	r3, [r2, #4]
 8011482:	4408      	add	r0, r1
 8011484:	6010      	str	r0, [r2, #0]
 8011486:	e7da      	b.n	801143e <_free_r+0x22>
 8011488:	d902      	bls.n	8011490 <_free_r+0x74>
 801148a:	230c      	movs	r3, #12
 801148c:	602b      	str	r3, [r5, #0]
 801148e:	e7d6      	b.n	801143e <_free_r+0x22>
 8011490:	6820      	ldr	r0, [r4, #0]
 8011492:	1821      	adds	r1, r4, r0
 8011494:	428b      	cmp	r3, r1
 8011496:	bf04      	itt	eq
 8011498:	6819      	ldreq	r1, [r3, #0]
 801149a:	685b      	ldreq	r3, [r3, #4]
 801149c:	6063      	str	r3, [r4, #4]
 801149e:	bf04      	itt	eq
 80114a0:	1809      	addeq	r1, r1, r0
 80114a2:	6021      	streq	r1, [r4, #0]
 80114a4:	6054      	str	r4, [r2, #4]
 80114a6:	e7ca      	b.n	801143e <_free_r+0x22>
 80114a8:	bd38      	pop	{r3, r4, r5, pc}
 80114aa:	bf00      	nop
 80114ac:	20017c8c 	.word	0x20017c8c

080114b0 <_Balloc>:
 80114b0:	b570      	push	{r4, r5, r6, lr}
 80114b2:	69c6      	ldr	r6, [r0, #28]
 80114b4:	4604      	mov	r4, r0
 80114b6:	460d      	mov	r5, r1
 80114b8:	b976      	cbnz	r6, 80114d8 <_Balloc+0x28>
 80114ba:	2010      	movs	r0, #16
 80114bc:	f7fe f998 	bl	800f7f0 <malloc>
 80114c0:	4602      	mov	r2, r0
 80114c2:	61e0      	str	r0, [r4, #28]
 80114c4:	b920      	cbnz	r0, 80114d0 <_Balloc+0x20>
 80114c6:	4b18      	ldr	r3, [pc, #96]	@ (8011528 <_Balloc+0x78>)
 80114c8:	4818      	ldr	r0, [pc, #96]	@ (801152c <_Balloc+0x7c>)
 80114ca:	216b      	movs	r1, #107	@ 0x6b
 80114cc:	f001 f944 	bl	8012758 <__assert_func>
 80114d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114d4:	6006      	str	r6, [r0, #0]
 80114d6:	60c6      	str	r6, [r0, #12]
 80114d8:	69e6      	ldr	r6, [r4, #28]
 80114da:	68f3      	ldr	r3, [r6, #12]
 80114dc:	b183      	cbz	r3, 8011500 <_Balloc+0x50>
 80114de:	69e3      	ldr	r3, [r4, #28]
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114e6:	b9b8      	cbnz	r0, 8011518 <_Balloc+0x68>
 80114e8:	2101      	movs	r1, #1
 80114ea:	fa01 f605 	lsl.w	r6, r1, r5
 80114ee:	1d72      	adds	r2, r6, #5
 80114f0:	0092      	lsls	r2, r2, #2
 80114f2:	4620      	mov	r0, r4
 80114f4:	f7fe f968 	bl	800f7c8 <_calloc_r>
 80114f8:	b160      	cbz	r0, 8011514 <_Balloc+0x64>
 80114fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114fe:	e00e      	b.n	801151e <_Balloc+0x6e>
 8011500:	2221      	movs	r2, #33	@ 0x21
 8011502:	2104      	movs	r1, #4
 8011504:	4620      	mov	r0, r4
 8011506:	f7fe f95f 	bl	800f7c8 <_calloc_r>
 801150a:	69e3      	ldr	r3, [r4, #28]
 801150c:	60f0      	str	r0, [r6, #12]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d1e4      	bne.n	80114de <_Balloc+0x2e>
 8011514:	2000      	movs	r0, #0
 8011516:	bd70      	pop	{r4, r5, r6, pc}
 8011518:	6802      	ldr	r2, [r0, #0]
 801151a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801151e:	2300      	movs	r3, #0
 8011520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011524:	e7f7      	b.n	8011516 <_Balloc+0x66>
 8011526:	bf00      	nop
 8011528:	08013e13 	.word	0x08013e13
 801152c:	08013e93 	.word	0x08013e93

08011530 <_Bfree>:
 8011530:	b570      	push	{r4, r5, r6, lr}
 8011532:	69c6      	ldr	r6, [r0, #28]
 8011534:	4605      	mov	r5, r0
 8011536:	460c      	mov	r4, r1
 8011538:	b976      	cbnz	r6, 8011558 <_Bfree+0x28>
 801153a:	2010      	movs	r0, #16
 801153c:	f7fe f958 	bl	800f7f0 <malloc>
 8011540:	4602      	mov	r2, r0
 8011542:	61e8      	str	r0, [r5, #28]
 8011544:	b920      	cbnz	r0, 8011550 <_Bfree+0x20>
 8011546:	4b09      	ldr	r3, [pc, #36]	@ (801156c <_Bfree+0x3c>)
 8011548:	4809      	ldr	r0, [pc, #36]	@ (8011570 <_Bfree+0x40>)
 801154a:	218f      	movs	r1, #143	@ 0x8f
 801154c:	f001 f904 	bl	8012758 <__assert_func>
 8011550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011554:	6006      	str	r6, [r0, #0]
 8011556:	60c6      	str	r6, [r0, #12]
 8011558:	b13c      	cbz	r4, 801156a <_Bfree+0x3a>
 801155a:	69eb      	ldr	r3, [r5, #28]
 801155c:	6862      	ldr	r2, [r4, #4]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011564:	6021      	str	r1, [r4, #0]
 8011566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801156a:	bd70      	pop	{r4, r5, r6, pc}
 801156c:	08013e13 	.word	0x08013e13
 8011570:	08013e93 	.word	0x08013e93

08011574 <__multadd>:
 8011574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011578:	690d      	ldr	r5, [r1, #16]
 801157a:	4607      	mov	r7, r0
 801157c:	460c      	mov	r4, r1
 801157e:	461e      	mov	r6, r3
 8011580:	f101 0c14 	add.w	ip, r1, #20
 8011584:	2000      	movs	r0, #0
 8011586:	f8dc 3000 	ldr.w	r3, [ip]
 801158a:	b299      	uxth	r1, r3
 801158c:	fb02 6101 	mla	r1, r2, r1, r6
 8011590:	0c1e      	lsrs	r6, r3, #16
 8011592:	0c0b      	lsrs	r3, r1, #16
 8011594:	fb02 3306 	mla	r3, r2, r6, r3
 8011598:	b289      	uxth	r1, r1
 801159a:	3001      	adds	r0, #1
 801159c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115a0:	4285      	cmp	r5, r0
 80115a2:	f84c 1b04 	str.w	r1, [ip], #4
 80115a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80115aa:	dcec      	bgt.n	8011586 <__multadd+0x12>
 80115ac:	b30e      	cbz	r6, 80115f2 <__multadd+0x7e>
 80115ae:	68a3      	ldr	r3, [r4, #8]
 80115b0:	42ab      	cmp	r3, r5
 80115b2:	dc19      	bgt.n	80115e8 <__multadd+0x74>
 80115b4:	6861      	ldr	r1, [r4, #4]
 80115b6:	4638      	mov	r0, r7
 80115b8:	3101      	adds	r1, #1
 80115ba:	f7ff ff79 	bl	80114b0 <_Balloc>
 80115be:	4680      	mov	r8, r0
 80115c0:	b928      	cbnz	r0, 80115ce <__multadd+0x5a>
 80115c2:	4602      	mov	r2, r0
 80115c4:	4b0c      	ldr	r3, [pc, #48]	@ (80115f8 <__multadd+0x84>)
 80115c6:	480d      	ldr	r0, [pc, #52]	@ (80115fc <__multadd+0x88>)
 80115c8:	21ba      	movs	r1, #186	@ 0xba
 80115ca:	f001 f8c5 	bl	8012758 <__assert_func>
 80115ce:	6922      	ldr	r2, [r4, #16]
 80115d0:	3202      	adds	r2, #2
 80115d2:	f104 010c 	add.w	r1, r4, #12
 80115d6:	0092      	lsls	r2, r2, #2
 80115d8:	300c      	adds	r0, #12
 80115da:	f7ff f8d2 	bl	8010782 <memcpy>
 80115de:	4621      	mov	r1, r4
 80115e0:	4638      	mov	r0, r7
 80115e2:	f7ff ffa5 	bl	8011530 <_Bfree>
 80115e6:	4644      	mov	r4, r8
 80115e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115ec:	3501      	adds	r5, #1
 80115ee:	615e      	str	r6, [r3, #20]
 80115f0:	6125      	str	r5, [r4, #16]
 80115f2:	4620      	mov	r0, r4
 80115f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f8:	08013e82 	.word	0x08013e82
 80115fc:	08013e93 	.word	0x08013e93

08011600 <__hi0bits>:
 8011600:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011604:	4603      	mov	r3, r0
 8011606:	bf36      	itet	cc
 8011608:	0403      	lslcc	r3, r0, #16
 801160a:	2000      	movcs	r0, #0
 801160c:	2010      	movcc	r0, #16
 801160e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011612:	bf3c      	itt	cc
 8011614:	021b      	lslcc	r3, r3, #8
 8011616:	3008      	addcc	r0, #8
 8011618:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801161c:	bf3c      	itt	cc
 801161e:	011b      	lslcc	r3, r3, #4
 8011620:	3004      	addcc	r0, #4
 8011622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011626:	bf3c      	itt	cc
 8011628:	009b      	lslcc	r3, r3, #2
 801162a:	3002      	addcc	r0, #2
 801162c:	2b00      	cmp	r3, #0
 801162e:	db05      	blt.n	801163c <__hi0bits+0x3c>
 8011630:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011634:	f100 0001 	add.w	r0, r0, #1
 8011638:	bf08      	it	eq
 801163a:	2020      	moveq	r0, #32
 801163c:	4770      	bx	lr

0801163e <__lo0bits>:
 801163e:	6803      	ldr	r3, [r0, #0]
 8011640:	4602      	mov	r2, r0
 8011642:	f013 0007 	ands.w	r0, r3, #7
 8011646:	d00b      	beq.n	8011660 <__lo0bits+0x22>
 8011648:	07d9      	lsls	r1, r3, #31
 801164a:	d421      	bmi.n	8011690 <__lo0bits+0x52>
 801164c:	0798      	lsls	r0, r3, #30
 801164e:	bf49      	itett	mi
 8011650:	085b      	lsrmi	r3, r3, #1
 8011652:	089b      	lsrpl	r3, r3, #2
 8011654:	2001      	movmi	r0, #1
 8011656:	6013      	strmi	r3, [r2, #0]
 8011658:	bf5c      	itt	pl
 801165a:	6013      	strpl	r3, [r2, #0]
 801165c:	2002      	movpl	r0, #2
 801165e:	4770      	bx	lr
 8011660:	b299      	uxth	r1, r3
 8011662:	b909      	cbnz	r1, 8011668 <__lo0bits+0x2a>
 8011664:	0c1b      	lsrs	r3, r3, #16
 8011666:	2010      	movs	r0, #16
 8011668:	b2d9      	uxtb	r1, r3
 801166a:	b909      	cbnz	r1, 8011670 <__lo0bits+0x32>
 801166c:	3008      	adds	r0, #8
 801166e:	0a1b      	lsrs	r3, r3, #8
 8011670:	0719      	lsls	r1, r3, #28
 8011672:	bf04      	itt	eq
 8011674:	091b      	lsreq	r3, r3, #4
 8011676:	3004      	addeq	r0, #4
 8011678:	0799      	lsls	r1, r3, #30
 801167a:	bf04      	itt	eq
 801167c:	089b      	lsreq	r3, r3, #2
 801167e:	3002      	addeq	r0, #2
 8011680:	07d9      	lsls	r1, r3, #31
 8011682:	d403      	bmi.n	801168c <__lo0bits+0x4e>
 8011684:	085b      	lsrs	r3, r3, #1
 8011686:	f100 0001 	add.w	r0, r0, #1
 801168a:	d003      	beq.n	8011694 <__lo0bits+0x56>
 801168c:	6013      	str	r3, [r2, #0]
 801168e:	4770      	bx	lr
 8011690:	2000      	movs	r0, #0
 8011692:	4770      	bx	lr
 8011694:	2020      	movs	r0, #32
 8011696:	4770      	bx	lr

08011698 <__i2b>:
 8011698:	b510      	push	{r4, lr}
 801169a:	460c      	mov	r4, r1
 801169c:	2101      	movs	r1, #1
 801169e:	f7ff ff07 	bl	80114b0 <_Balloc>
 80116a2:	4602      	mov	r2, r0
 80116a4:	b928      	cbnz	r0, 80116b2 <__i2b+0x1a>
 80116a6:	4b05      	ldr	r3, [pc, #20]	@ (80116bc <__i2b+0x24>)
 80116a8:	4805      	ldr	r0, [pc, #20]	@ (80116c0 <__i2b+0x28>)
 80116aa:	f240 1145 	movw	r1, #325	@ 0x145
 80116ae:	f001 f853 	bl	8012758 <__assert_func>
 80116b2:	2301      	movs	r3, #1
 80116b4:	6144      	str	r4, [r0, #20]
 80116b6:	6103      	str	r3, [r0, #16]
 80116b8:	bd10      	pop	{r4, pc}
 80116ba:	bf00      	nop
 80116bc:	08013e82 	.word	0x08013e82
 80116c0:	08013e93 	.word	0x08013e93

080116c4 <__multiply>:
 80116c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c8:	4617      	mov	r7, r2
 80116ca:	690a      	ldr	r2, [r1, #16]
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	bfa8      	it	ge
 80116d2:	463b      	movge	r3, r7
 80116d4:	4689      	mov	r9, r1
 80116d6:	bfa4      	itt	ge
 80116d8:	460f      	movge	r7, r1
 80116da:	4699      	movge	r9, r3
 80116dc:	693d      	ldr	r5, [r7, #16]
 80116de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	6879      	ldr	r1, [r7, #4]
 80116e6:	eb05 060a 	add.w	r6, r5, sl
 80116ea:	42b3      	cmp	r3, r6
 80116ec:	b085      	sub	sp, #20
 80116ee:	bfb8      	it	lt
 80116f0:	3101      	addlt	r1, #1
 80116f2:	f7ff fedd 	bl	80114b0 <_Balloc>
 80116f6:	b930      	cbnz	r0, 8011706 <__multiply+0x42>
 80116f8:	4602      	mov	r2, r0
 80116fa:	4b41      	ldr	r3, [pc, #260]	@ (8011800 <__multiply+0x13c>)
 80116fc:	4841      	ldr	r0, [pc, #260]	@ (8011804 <__multiply+0x140>)
 80116fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011702:	f001 f829 	bl	8012758 <__assert_func>
 8011706:	f100 0414 	add.w	r4, r0, #20
 801170a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801170e:	4623      	mov	r3, r4
 8011710:	2200      	movs	r2, #0
 8011712:	4573      	cmp	r3, lr
 8011714:	d320      	bcc.n	8011758 <__multiply+0x94>
 8011716:	f107 0814 	add.w	r8, r7, #20
 801171a:	f109 0114 	add.w	r1, r9, #20
 801171e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011722:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011726:	9302      	str	r3, [sp, #8]
 8011728:	1beb      	subs	r3, r5, r7
 801172a:	3b15      	subs	r3, #21
 801172c:	f023 0303 	bic.w	r3, r3, #3
 8011730:	3304      	adds	r3, #4
 8011732:	3715      	adds	r7, #21
 8011734:	42bd      	cmp	r5, r7
 8011736:	bf38      	it	cc
 8011738:	2304      	movcc	r3, #4
 801173a:	9301      	str	r3, [sp, #4]
 801173c:	9b02      	ldr	r3, [sp, #8]
 801173e:	9103      	str	r1, [sp, #12]
 8011740:	428b      	cmp	r3, r1
 8011742:	d80c      	bhi.n	801175e <__multiply+0x9a>
 8011744:	2e00      	cmp	r6, #0
 8011746:	dd03      	ble.n	8011750 <__multiply+0x8c>
 8011748:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801174c:	2b00      	cmp	r3, #0
 801174e:	d055      	beq.n	80117fc <__multiply+0x138>
 8011750:	6106      	str	r6, [r0, #16]
 8011752:	b005      	add	sp, #20
 8011754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011758:	f843 2b04 	str.w	r2, [r3], #4
 801175c:	e7d9      	b.n	8011712 <__multiply+0x4e>
 801175e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011762:	f1ba 0f00 	cmp.w	sl, #0
 8011766:	d01f      	beq.n	80117a8 <__multiply+0xe4>
 8011768:	46c4      	mov	ip, r8
 801176a:	46a1      	mov	r9, r4
 801176c:	2700      	movs	r7, #0
 801176e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011772:	f8d9 3000 	ldr.w	r3, [r9]
 8011776:	fa1f fb82 	uxth.w	fp, r2
 801177a:	b29b      	uxth	r3, r3
 801177c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011780:	443b      	add	r3, r7
 8011782:	f8d9 7000 	ldr.w	r7, [r9]
 8011786:	0c12      	lsrs	r2, r2, #16
 8011788:	0c3f      	lsrs	r7, r7, #16
 801178a:	fb0a 7202 	mla	r2, sl, r2, r7
 801178e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011792:	b29b      	uxth	r3, r3
 8011794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011798:	4565      	cmp	r5, ip
 801179a:	f849 3b04 	str.w	r3, [r9], #4
 801179e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80117a2:	d8e4      	bhi.n	801176e <__multiply+0xaa>
 80117a4:	9b01      	ldr	r3, [sp, #4]
 80117a6:	50e7      	str	r7, [r4, r3]
 80117a8:	9b03      	ldr	r3, [sp, #12]
 80117aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80117ae:	3104      	adds	r1, #4
 80117b0:	f1b9 0f00 	cmp.w	r9, #0
 80117b4:	d020      	beq.n	80117f8 <__multiply+0x134>
 80117b6:	6823      	ldr	r3, [r4, #0]
 80117b8:	4647      	mov	r7, r8
 80117ba:	46a4      	mov	ip, r4
 80117bc:	f04f 0a00 	mov.w	sl, #0
 80117c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80117c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80117c8:	fb09 220b 	mla	r2, r9, fp, r2
 80117cc:	4452      	add	r2, sl
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117d4:	f84c 3b04 	str.w	r3, [ip], #4
 80117d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80117dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80117e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80117e4:	fb09 330a 	mla	r3, r9, sl, r3
 80117e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80117ec:	42bd      	cmp	r5, r7
 80117ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80117f2:	d8e5      	bhi.n	80117c0 <__multiply+0xfc>
 80117f4:	9a01      	ldr	r2, [sp, #4]
 80117f6:	50a3      	str	r3, [r4, r2]
 80117f8:	3404      	adds	r4, #4
 80117fa:	e79f      	b.n	801173c <__multiply+0x78>
 80117fc:	3e01      	subs	r6, #1
 80117fe:	e7a1      	b.n	8011744 <__multiply+0x80>
 8011800:	08013e82 	.word	0x08013e82
 8011804:	08013e93 	.word	0x08013e93

08011808 <__pow5mult>:
 8011808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801180c:	4615      	mov	r5, r2
 801180e:	f012 0203 	ands.w	r2, r2, #3
 8011812:	4607      	mov	r7, r0
 8011814:	460e      	mov	r6, r1
 8011816:	d007      	beq.n	8011828 <__pow5mult+0x20>
 8011818:	4c25      	ldr	r4, [pc, #148]	@ (80118b0 <__pow5mult+0xa8>)
 801181a:	3a01      	subs	r2, #1
 801181c:	2300      	movs	r3, #0
 801181e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011822:	f7ff fea7 	bl	8011574 <__multadd>
 8011826:	4606      	mov	r6, r0
 8011828:	10ad      	asrs	r5, r5, #2
 801182a:	d03d      	beq.n	80118a8 <__pow5mult+0xa0>
 801182c:	69fc      	ldr	r4, [r7, #28]
 801182e:	b97c      	cbnz	r4, 8011850 <__pow5mult+0x48>
 8011830:	2010      	movs	r0, #16
 8011832:	f7fd ffdd 	bl	800f7f0 <malloc>
 8011836:	4602      	mov	r2, r0
 8011838:	61f8      	str	r0, [r7, #28]
 801183a:	b928      	cbnz	r0, 8011848 <__pow5mult+0x40>
 801183c:	4b1d      	ldr	r3, [pc, #116]	@ (80118b4 <__pow5mult+0xac>)
 801183e:	481e      	ldr	r0, [pc, #120]	@ (80118b8 <__pow5mult+0xb0>)
 8011840:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011844:	f000 ff88 	bl	8012758 <__assert_func>
 8011848:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801184c:	6004      	str	r4, [r0, #0]
 801184e:	60c4      	str	r4, [r0, #12]
 8011850:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011854:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011858:	b94c      	cbnz	r4, 801186e <__pow5mult+0x66>
 801185a:	f240 2171 	movw	r1, #625	@ 0x271
 801185e:	4638      	mov	r0, r7
 8011860:	f7ff ff1a 	bl	8011698 <__i2b>
 8011864:	2300      	movs	r3, #0
 8011866:	f8c8 0008 	str.w	r0, [r8, #8]
 801186a:	4604      	mov	r4, r0
 801186c:	6003      	str	r3, [r0, #0]
 801186e:	f04f 0900 	mov.w	r9, #0
 8011872:	07eb      	lsls	r3, r5, #31
 8011874:	d50a      	bpl.n	801188c <__pow5mult+0x84>
 8011876:	4631      	mov	r1, r6
 8011878:	4622      	mov	r2, r4
 801187a:	4638      	mov	r0, r7
 801187c:	f7ff ff22 	bl	80116c4 <__multiply>
 8011880:	4631      	mov	r1, r6
 8011882:	4680      	mov	r8, r0
 8011884:	4638      	mov	r0, r7
 8011886:	f7ff fe53 	bl	8011530 <_Bfree>
 801188a:	4646      	mov	r6, r8
 801188c:	106d      	asrs	r5, r5, #1
 801188e:	d00b      	beq.n	80118a8 <__pow5mult+0xa0>
 8011890:	6820      	ldr	r0, [r4, #0]
 8011892:	b938      	cbnz	r0, 80118a4 <__pow5mult+0x9c>
 8011894:	4622      	mov	r2, r4
 8011896:	4621      	mov	r1, r4
 8011898:	4638      	mov	r0, r7
 801189a:	f7ff ff13 	bl	80116c4 <__multiply>
 801189e:	6020      	str	r0, [r4, #0]
 80118a0:	f8c0 9000 	str.w	r9, [r0]
 80118a4:	4604      	mov	r4, r0
 80118a6:	e7e4      	b.n	8011872 <__pow5mult+0x6a>
 80118a8:	4630      	mov	r0, r6
 80118aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118ae:	bf00      	nop
 80118b0:	08013f60 	.word	0x08013f60
 80118b4:	08013e13 	.word	0x08013e13
 80118b8:	08013e93 	.word	0x08013e93

080118bc <__lshift>:
 80118bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118c0:	460c      	mov	r4, r1
 80118c2:	6849      	ldr	r1, [r1, #4]
 80118c4:	6923      	ldr	r3, [r4, #16]
 80118c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80118ca:	68a3      	ldr	r3, [r4, #8]
 80118cc:	4607      	mov	r7, r0
 80118ce:	4691      	mov	r9, r2
 80118d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80118d4:	f108 0601 	add.w	r6, r8, #1
 80118d8:	42b3      	cmp	r3, r6
 80118da:	db0b      	blt.n	80118f4 <__lshift+0x38>
 80118dc:	4638      	mov	r0, r7
 80118de:	f7ff fde7 	bl	80114b0 <_Balloc>
 80118e2:	4605      	mov	r5, r0
 80118e4:	b948      	cbnz	r0, 80118fa <__lshift+0x3e>
 80118e6:	4602      	mov	r2, r0
 80118e8:	4b28      	ldr	r3, [pc, #160]	@ (801198c <__lshift+0xd0>)
 80118ea:	4829      	ldr	r0, [pc, #164]	@ (8011990 <__lshift+0xd4>)
 80118ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80118f0:	f000 ff32 	bl	8012758 <__assert_func>
 80118f4:	3101      	adds	r1, #1
 80118f6:	005b      	lsls	r3, r3, #1
 80118f8:	e7ee      	b.n	80118d8 <__lshift+0x1c>
 80118fa:	2300      	movs	r3, #0
 80118fc:	f100 0114 	add.w	r1, r0, #20
 8011900:	f100 0210 	add.w	r2, r0, #16
 8011904:	4618      	mov	r0, r3
 8011906:	4553      	cmp	r3, sl
 8011908:	db33      	blt.n	8011972 <__lshift+0xb6>
 801190a:	6920      	ldr	r0, [r4, #16]
 801190c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011910:	f104 0314 	add.w	r3, r4, #20
 8011914:	f019 091f 	ands.w	r9, r9, #31
 8011918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801191c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011920:	d02b      	beq.n	801197a <__lshift+0xbe>
 8011922:	f1c9 0e20 	rsb	lr, r9, #32
 8011926:	468a      	mov	sl, r1
 8011928:	2200      	movs	r2, #0
 801192a:	6818      	ldr	r0, [r3, #0]
 801192c:	fa00 f009 	lsl.w	r0, r0, r9
 8011930:	4310      	orrs	r0, r2
 8011932:	f84a 0b04 	str.w	r0, [sl], #4
 8011936:	f853 2b04 	ldr.w	r2, [r3], #4
 801193a:	459c      	cmp	ip, r3
 801193c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011940:	d8f3      	bhi.n	801192a <__lshift+0x6e>
 8011942:	ebac 0304 	sub.w	r3, ip, r4
 8011946:	3b15      	subs	r3, #21
 8011948:	f023 0303 	bic.w	r3, r3, #3
 801194c:	3304      	adds	r3, #4
 801194e:	f104 0015 	add.w	r0, r4, #21
 8011952:	4560      	cmp	r0, ip
 8011954:	bf88      	it	hi
 8011956:	2304      	movhi	r3, #4
 8011958:	50ca      	str	r2, [r1, r3]
 801195a:	b10a      	cbz	r2, 8011960 <__lshift+0xa4>
 801195c:	f108 0602 	add.w	r6, r8, #2
 8011960:	3e01      	subs	r6, #1
 8011962:	4638      	mov	r0, r7
 8011964:	612e      	str	r6, [r5, #16]
 8011966:	4621      	mov	r1, r4
 8011968:	f7ff fde2 	bl	8011530 <_Bfree>
 801196c:	4628      	mov	r0, r5
 801196e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011972:	f842 0f04 	str.w	r0, [r2, #4]!
 8011976:	3301      	adds	r3, #1
 8011978:	e7c5      	b.n	8011906 <__lshift+0x4a>
 801197a:	3904      	subs	r1, #4
 801197c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011980:	f841 2f04 	str.w	r2, [r1, #4]!
 8011984:	459c      	cmp	ip, r3
 8011986:	d8f9      	bhi.n	801197c <__lshift+0xc0>
 8011988:	e7ea      	b.n	8011960 <__lshift+0xa4>
 801198a:	bf00      	nop
 801198c:	08013e82 	.word	0x08013e82
 8011990:	08013e93 	.word	0x08013e93

08011994 <__mcmp>:
 8011994:	690a      	ldr	r2, [r1, #16]
 8011996:	4603      	mov	r3, r0
 8011998:	6900      	ldr	r0, [r0, #16]
 801199a:	1a80      	subs	r0, r0, r2
 801199c:	b530      	push	{r4, r5, lr}
 801199e:	d10e      	bne.n	80119be <__mcmp+0x2a>
 80119a0:	3314      	adds	r3, #20
 80119a2:	3114      	adds	r1, #20
 80119a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80119a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80119ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80119b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80119b4:	4295      	cmp	r5, r2
 80119b6:	d003      	beq.n	80119c0 <__mcmp+0x2c>
 80119b8:	d205      	bcs.n	80119c6 <__mcmp+0x32>
 80119ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80119be:	bd30      	pop	{r4, r5, pc}
 80119c0:	42a3      	cmp	r3, r4
 80119c2:	d3f3      	bcc.n	80119ac <__mcmp+0x18>
 80119c4:	e7fb      	b.n	80119be <__mcmp+0x2a>
 80119c6:	2001      	movs	r0, #1
 80119c8:	e7f9      	b.n	80119be <__mcmp+0x2a>
	...

080119cc <__mdiff>:
 80119cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d0:	4689      	mov	r9, r1
 80119d2:	4606      	mov	r6, r0
 80119d4:	4611      	mov	r1, r2
 80119d6:	4648      	mov	r0, r9
 80119d8:	4614      	mov	r4, r2
 80119da:	f7ff ffdb 	bl	8011994 <__mcmp>
 80119de:	1e05      	subs	r5, r0, #0
 80119e0:	d112      	bne.n	8011a08 <__mdiff+0x3c>
 80119e2:	4629      	mov	r1, r5
 80119e4:	4630      	mov	r0, r6
 80119e6:	f7ff fd63 	bl	80114b0 <_Balloc>
 80119ea:	4602      	mov	r2, r0
 80119ec:	b928      	cbnz	r0, 80119fa <__mdiff+0x2e>
 80119ee:	4b3f      	ldr	r3, [pc, #252]	@ (8011aec <__mdiff+0x120>)
 80119f0:	f240 2137 	movw	r1, #567	@ 0x237
 80119f4:	483e      	ldr	r0, [pc, #248]	@ (8011af0 <__mdiff+0x124>)
 80119f6:	f000 feaf 	bl	8012758 <__assert_func>
 80119fa:	2301      	movs	r3, #1
 80119fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a00:	4610      	mov	r0, r2
 8011a02:	b003      	add	sp, #12
 8011a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a08:	bfbc      	itt	lt
 8011a0a:	464b      	movlt	r3, r9
 8011a0c:	46a1      	movlt	r9, r4
 8011a0e:	4630      	mov	r0, r6
 8011a10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011a14:	bfba      	itte	lt
 8011a16:	461c      	movlt	r4, r3
 8011a18:	2501      	movlt	r5, #1
 8011a1a:	2500      	movge	r5, #0
 8011a1c:	f7ff fd48 	bl	80114b0 <_Balloc>
 8011a20:	4602      	mov	r2, r0
 8011a22:	b918      	cbnz	r0, 8011a2c <__mdiff+0x60>
 8011a24:	4b31      	ldr	r3, [pc, #196]	@ (8011aec <__mdiff+0x120>)
 8011a26:	f240 2145 	movw	r1, #581	@ 0x245
 8011a2a:	e7e3      	b.n	80119f4 <__mdiff+0x28>
 8011a2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011a30:	6926      	ldr	r6, [r4, #16]
 8011a32:	60c5      	str	r5, [r0, #12]
 8011a34:	f109 0310 	add.w	r3, r9, #16
 8011a38:	f109 0514 	add.w	r5, r9, #20
 8011a3c:	f104 0e14 	add.w	lr, r4, #20
 8011a40:	f100 0b14 	add.w	fp, r0, #20
 8011a44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011a48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011a4c:	9301      	str	r3, [sp, #4]
 8011a4e:	46d9      	mov	r9, fp
 8011a50:	f04f 0c00 	mov.w	ip, #0
 8011a54:	9b01      	ldr	r3, [sp, #4]
 8011a56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011a5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011a5e:	9301      	str	r3, [sp, #4]
 8011a60:	fa1f f38a 	uxth.w	r3, sl
 8011a64:	4619      	mov	r1, r3
 8011a66:	b283      	uxth	r3, r0
 8011a68:	1acb      	subs	r3, r1, r3
 8011a6a:	0c00      	lsrs	r0, r0, #16
 8011a6c:	4463      	add	r3, ip
 8011a6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011a72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011a7c:	4576      	cmp	r6, lr
 8011a7e:	f849 3b04 	str.w	r3, [r9], #4
 8011a82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011a86:	d8e5      	bhi.n	8011a54 <__mdiff+0x88>
 8011a88:	1b33      	subs	r3, r6, r4
 8011a8a:	3b15      	subs	r3, #21
 8011a8c:	f023 0303 	bic.w	r3, r3, #3
 8011a90:	3415      	adds	r4, #21
 8011a92:	3304      	adds	r3, #4
 8011a94:	42a6      	cmp	r6, r4
 8011a96:	bf38      	it	cc
 8011a98:	2304      	movcc	r3, #4
 8011a9a:	441d      	add	r5, r3
 8011a9c:	445b      	add	r3, fp
 8011a9e:	461e      	mov	r6, r3
 8011aa0:	462c      	mov	r4, r5
 8011aa2:	4544      	cmp	r4, r8
 8011aa4:	d30e      	bcc.n	8011ac4 <__mdiff+0xf8>
 8011aa6:	f108 0103 	add.w	r1, r8, #3
 8011aaa:	1b49      	subs	r1, r1, r5
 8011aac:	f021 0103 	bic.w	r1, r1, #3
 8011ab0:	3d03      	subs	r5, #3
 8011ab2:	45a8      	cmp	r8, r5
 8011ab4:	bf38      	it	cc
 8011ab6:	2100      	movcc	r1, #0
 8011ab8:	440b      	add	r3, r1
 8011aba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011abe:	b191      	cbz	r1, 8011ae6 <__mdiff+0x11a>
 8011ac0:	6117      	str	r7, [r2, #16]
 8011ac2:	e79d      	b.n	8011a00 <__mdiff+0x34>
 8011ac4:	f854 1b04 	ldr.w	r1, [r4], #4
 8011ac8:	46e6      	mov	lr, ip
 8011aca:	0c08      	lsrs	r0, r1, #16
 8011acc:	fa1c fc81 	uxtah	ip, ip, r1
 8011ad0:	4471      	add	r1, lr
 8011ad2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011ad6:	b289      	uxth	r1, r1
 8011ad8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011adc:	f846 1b04 	str.w	r1, [r6], #4
 8011ae0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011ae4:	e7dd      	b.n	8011aa2 <__mdiff+0xd6>
 8011ae6:	3f01      	subs	r7, #1
 8011ae8:	e7e7      	b.n	8011aba <__mdiff+0xee>
 8011aea:	bf00      	nop
 8011aec:	08013e82 	.word	0x08013e82
 8011af0:	08013e93 	.word	0x08013e93

08011af4 <__d2b>:
 8011af4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8011af8:	2101      	movs	r1, #1
 8011afa:	9e08      	ldr	r6, [sp, #32]
 8011afc:	4690      	mov	r8, r2
 8011afe:	4699      	mov	r9, r3
 8011b00:	f7ff fcd6 	bl	80114b0 <_Balloc>
 8011b04:	4604      	mov	r4, r0
 8011b06:	b930      	cbnz	r0, 8011b16 <__d2b+0x22>
 8011b08:	4602      	mov	r2, r0
 8011b0a:	4b24      	ldr	r3, [pc, #144]	@ (8011b9c <__d2b+0xa8>)
 8011b0c:	4824      	ldr	r0, [pc, #144]	@ (8011ba0 <__d2b+0xac>)
 8011b0e:	f240 310f 	movw	r1, #783	@ 0x30f
 8011b12:	f000 fe21 	bl	8012758 <__assert_func>
 8011b16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011b1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011b1e:	b10d      	cbz	r5, 8011b24 <__d2b+0x30>
 8011b20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011b24:	9301      	str	r3, [sp, #4]
 8011b26:	f1b8 0300 	subs.w	r3, r8, #0
 8011b2a:	d024      	beq.n	8011b76 <__d2b+0x82>
 8011b2c:	4668      	mov	r0, sp
 8011b2e:	9300      	str	r3, [sp, #0]
 8011b30:	f7ff fd85 	bl	801163e <__lo0bits>
 8011b34:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011b38:	b1d8      	cbz	r0, 8011b72 <__d2b+0x7e>
 8011b3a:	f1c0 0320 	rsb	r3, r0, #32
 8011b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b42:	430b      	orrs	r3, r1
 8011b44:	40c2      	lsrs	r2, r0
 8011b46:	6163      	str	r3, [r4, #20]
 8011b48:	9201      	str	r2, [sp, #4]
 8011b4a:	9b01      	ldr	r3, [sp, #4]
 8011b4c:	61a3      	str	r3, [r4, #24]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	bf0c      	ite	eq
 8011b52:	2201      	moveq	r2, #1
 8011b54:	2202      	movne	r2, #2
 8011b56:	6122      	str	r2, [r4, #16]
 8011b58:	b1ad      	cbz	r5, 8011b86 <__d2b+0x92>
 8011b5a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011b5e:	4405      	add	r5, r0
 8011b60:	6035      	str	r5, [r6, #0]
 8011b62:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b68:	6018      	str	r0, [r3, #0]
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	b002      	add	sp, #8
 8011b6e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8011b72:	6161      	str	r1, [r4, #20]
 8011b74:	e7e9      	b.n	8011b4a <__d2b+0x56>
 8011b76:	a801      	add	r0, sp, #4
 8011b78:	f7ff fd61 	bl	801163e <__lo0bits>
 8011b7c:	9b01      	ldr	r3, [sp, #4]
 8011b7e:	6163      	str	r3, [r4, #20]
 8011b80:	3020      	adds	r0, #32
 8011b82:	2201      	movs	r2, #1
 8011b84:	e7e7      	b.n	8011b56 <__d2b+0x62>
 8011b86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011b8e:	6030      	str	r0, [r6, #0]
 8011b90:	6918      	ldr	r0, [r3, #16]
 8011b92:	f7ff fd35 	bl	8011600 <__hi0bits>
 8011b96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b9a:	e7e4      	b.n	8011b66 <__d2b+0x72>
 8011b9c:	08013e82 	.word	0x08013e82
 8011ba0:	08013e93 	.word	0x08013e93

08011ba4 <_malloc_usable_size_r>:
 8011ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ba8:	1f18      	subs	r0, r3, #4
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	bfbc      	itt	lt
 8011bae:	580b      	ldrlt	r3, [r1, r0]
 8011bb0:	18c0      	addlt	r0, r0, r3
 8011bb2:	4770      	bx	lr

08011bb4 <__ssputs_r>:
 8011bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bb8:	688e      	ldr	r6, [r1, #8]
 8011bba:	461f      	mov	r7, r3
 8011bbc:	42be      	cmp	r6, r7
 8011bbe:	680b      	ldr	r3, [r1, #0]
 8011bc0:	4682      	mov	sl, r0
 8011bc2:	460c      	mov	r4, r1
 8011bc4:	4690      	mov	r8, r2
 8011bc6:	d82d      	bhi.n	8011c24 <__ssputs_r+0x70>
 8011bc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011bcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011bd0:	d026      	beq.n	8011c20 <__ssputs_r+0x6c>
 8011bd2:	6965      	ldr	r5, [r4, #20]
 8011bd4:	6909      	ldr	r1, [r1, #16]
 8011bd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011bda:	eba3 0901 	sub.w	r9, r3, r1
 8011bde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011be2:	1c7b      	adds	r3, r7, #1
 8011be4:	444b      	add	r3, r9
 8011be6:	106d      	asrs	r5, r5, #1
 8011be8:	429d      	cmp	r5, r3
 8011bea:	bf38      	it	cc
 8011bec:	461d      	movcc	r5, r3
 8011bee:	0553      	lsls	r3, r2, #21
 8011bf0:	d527      	bpl.n	8011c42 <__ssputs_r+0x8e>
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	f7fd fe2e 	bl	800f854 <_malloc_r>
 8011bf8:	4606      	mov	r6, r0
 8011bfa:	b360      	cbz	r0, 8011c56 <__ssputs_r+0xa2>
 8011bfc:	6921      	ldr	r1, [r4, #16]
 8011bfe:	464a      	mov	r2, r9
 8011c00:	f7fe fdbf 	bl	8010782 <memcpy>
 8011c04:	89a3      	ldrh	r3, [r4, #12]
 8011c06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c0e:	81a3      	strh	r3, [r4, #12]
 8011c10:	6126      	str	r6, [r4, #16]
 8011c12:	6165      	str	r5, [r4, #20]
 8011c14:	444e      	add	r6, r9
 8011c16:	eba5 0509 	sub.w	r5, r5, r9
 8011c1a:	6026      	str	r6, [r4, #0]
 8011c1c:	60a5      	str	r5, [r4, #8]
 8011c1e:	463e      	mov	r6, r7
 8011c20:	42be      	cmp	r6, r7
 8011c22:	d900      	bls.n	8011c26 <__ssputs_r+0x72>
 8011c24:	463e      	mov	r6, r7
 8011c26:	6820      	ldr	r0, [r4, #0]
 8011c28:	4632      	mov	r2, r6
 8011c2a:	4641      	mov	r1, r8
 8011c2c:	f000 fd57 	bl	80126de <memmove>
 8011c30:	68a3      	ldr	r3, [r4, #8]
 8011c32:	1b9b      	subs	r3, r3, r6
 8011c34:	60a3      	str	r3, [r4, #8]
 8011c36:	6823      	ldr	r3, [r4, #0]
 8011c38:	4433      	add	r3, r6
 8011c3a:	6023      	str	r3, [r4, #0]
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c42:	462a      	mov	r2, r5
 8011c44:	f7fd fe9a 	bl	800f97c <_realloc_r>
 8011c48:	4606      	mov	r6, r0
 8011c4a:	2800      	cmp	r0, #0
 8011c4c:	d1e0      	bne.n	8011c10 <__ssputs_r+0x5c>
 8011c4e:	6921      	ldr	r1, [r4, #16]
 8011c50:	4650      	mov	r0, sl
 8011c52:	f7ff fbe3 	bl	801141c <_free_r>
 8011c56:	230c      	movs	r3, #12
 8011c58:	f8ca 3000 	str.w	r3, [sl]
 8011c5c:	89a3      	ldrh	r3, [r4, #12]
 8011c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c62:	81a3      	strh	r3, [r4, #12]
 8011c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c68:	e7e9      	b.n	8011c3e <__ssputs_r+0x8a>
	...

08011c6c <_svfiprintf_r>:
 8011c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c70:	4698      	mov	r8, r3
 8011c72:	898b      	ldrh	r3, [r1, #12]
 8011c74:	061b      	lsls	r3, r3, #24
 8011c76:	b09d      	sub	sp, #116	@ 0x74
 8011c78:	4607      	mov	r7, r0
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	4614      	mov	r4, r2
 8011c7e:	d510      	bpl.n	8011ca2 <_svfiprintf_r+0x36>
 8011c80:	690b      	ldr	r3, [r1, #16]
 8011c82:	b973      	cbnz	r3, 8011ca2 <_svfiprintf_r+0x36>
 8011c84:	2140      	movs	r1, #64	@ 0x40
 8011c86:	f7fd fde5 	bl	800f854 <_malloc_r>
 8011c8a:	6028      	str	r0, [r5, #0]
 8011c8c:	6128      	str	r0, [r5, #16]
 8011c8e:	b930      	cbnz	r0, 8011c9e <_svfiprintf_r+0x32>
 8011c90:	230c      	movs	r3, #12
 8011c92:	603b      	str	r3, [r7, #0]
 8011c94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c98:	b01d      	add	sp, #116	@ 0x74
 8011c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c9e:	2340      	movs	r3, #64	@ 0x40
 8011ca0:	616b      	str	r3, [r5, #20]
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ca6:	2320      	movs	r3, #32
 8011ca8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8011cb0:	2330      	movs	r3, #48	@ 0x30
 8011cb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011e50 <_svfiprintf_r+0x1e4>
 8011cb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cba:	f04f 0901 	mov.w	r9, #1
 8011cbe:	4623      	mov	r3, r4
 8011cc0:	469a      	mov	sl, r3
 8011cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cc6:	b10a      	cbz	r2, 8011ccc <_svfiprintf_r+0x60>
 8011cc8:	2a25      	cmp	r2, #37	@ 0x25
 8011cca:	d1f9      	bne.n	8011cc0 <_svfiprintf_r+0x54>
 8011ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8011cd0:	d00b      	beq.n	8011cea <_svfiprintf_r+0x7e>
 8011cd2:	465b      	mov	r3, fp
 8011cd4:	4622      	mov	r2, r4
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	4638      	mov	r0, r7
 8011cda:	f7ff ff6b 	bl	8011bb4 <__ssputs_r>
 8011cde:	3001      	adds	r0, #1
 8011ce0:	f000 80a7 	beq.w	8011e32 <_svfiprintf_r+0x1c6>
 8011ce4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ce6:	445a      	add	r2, fp
 8011ce8:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cea:	f89a 3000 	ldrb.w	r3, [sl]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	f000 809f 	beq.w	8011e32 <_svfiprintf_r+0x1c6>
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cfe:	f10a 0a01 	add.w	sl, sl, #1
 8011d02:	9304      	str	r3, [sp, #16]
 8011d04:	9307      	str	r3, [sp, #28]
 8011d06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d0c:	4654      	mov	r4, sl
 8011d0e:	2205      	movs	r2, #5
 8011d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d14:	484e      	ldr	r0, [pc, #312]	@ (8011e50 <_svfiprintf_r+0x1e4>)
 8011d16:	f7ee faa3 	bl	8000260 <memchr>
 8011d1a:	9a04      	ldr	r2, [sp, #16]
 8011d1c:	b9d8      	cbnz	r0, 8011d56 <_svfiprintf_r+0xea>
 8011d1e:	06d0      	lsls	r0, r2, #27
 8011d20:	bf44      	itt	mi
 8011d22:	2320      	movmi	r3, #32
 8011d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d28:	0711      	lsls	r1, r2, #28
 8011d2a:	bf44      	itt	mi
 8011d2c:	232b      	movmi	r3, #43	@ 0x2b
 8011d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d32:	f89a 3000 	ldrb.w	r3, [sl]
 8011d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d38:	d015      	beq.n	8011d66 <_svfiprintf_r+0xfa>
 8011d3a:	9a07      	ldr	r2, [sp, #28]
 8011d3c:	4654      	mov	r4, sl
 8011d3e:	2000      	movs	r0, #0
 8011d40:	f04f 0c0a 	mov.w	ip, #10
 8011d44:	4621      	mov	r1, r4
 8011d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d4a:	3b30      	subs	r3, #48	@ 0x30
 8011d4c:	2b09      	cmp	r3, #9
 8011d4e:	d94b      	bls.n	8011de8 <_svfiprintf_r+0x17c>
 8011d50:	b1b0      	cbz	r0, 8011d80 <_svfiprintf_r+0x114>
 8011d52:	9207      	str	r2, [sp, #28]
 8011d54:	e014      	b.n	8011d80 <_svfiprintf_r+0x114>
 8011d56:	eba0 0308 	sub.w	r3, r0, r8
 8011d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8011d5e:	4313      	orrs	r3, r2
 8011d60:	9304      	str	r3, [sp, #16]
 8011d62:	46a2      	mov	sl, r4
 8011d64:	e7d2      	b.n	8011d0c <_svfiprintf_r+0xa0>
 8011d66:	9b03      	ldr	r3, [sp, #12]
 8011d68:	1d19      	adds	r1, r3, #4
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	9103      	str	r1, [sp, #12]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	bfbb      	ittet	lt
 8011d72:	425b      	neglt	r3, r3
 8011d74:	f042 0202 	orrlt.w	r2, r2, #2
 8011d78:	9307      	strge	r3, [sp, #28]
 8011d7a:	9307      	strlt	r3, [sp, #28]
 8011d7c:	bfb8      	it	lt
 8011d7e:	9204      	strlt	r2, [sp, #16]
 8011d80:	7823      	ldrb	r3, [r4, #0]
 8011d82:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d84:	d10a      	bne.n	8011d9c <_svfiprintf_r+0x130>
 8011d86:	7863      	ldrb	r3, [r4, #1]
 8011d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d8a:	d132      	bne.n	8011df2 <_svfiprintf_r+0x186>
 8011d8c:	9b03      	ldr	r3, [sp, #12]
 8011d8e:	1d1a      	adds	r2, r3, #4
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	9203      	str	r2, [sp, #12]
 8011d94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d98:	3402      	adds	r4, #2
 8011d9a:	9305      	str	r3, [sp, #20]
 8011d9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011e60 <_svfiprintf_r+0x1f4>
 8011da0:	7821      	ldrb	r1, [r4, #0]
 8011da2:	2203      	movs	r2, #3
 8011da4:	4650      	mov	r0, sl
 8011da6:	f7ee fa5b 	bl	8000260 <memchr>
 8011daa:	b138      	cbz	r0, 8011dbc <_svfiprintf_r+0x150>
 8011dac:	9b04      	ldr	r3, [sp, #16]
 8011dae:	eba0 000a 	sub.w	r0, r0, sl
 8011db2:	2240      	movs	r2, #64	@ 0x40
 8011db4:	4082      	lsls	r2, r0
 8011db6:	4313      	orrs	r3, r2
 8011db8:	3401      	adds	r4, #1
 8011dba:	9304      	str	r3, [sp, #16]
 8011dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dc0:	4824      	ldr	r0, [pc, #144]	@ (8011e54 <_svfiprintf_r+0x1e8>)
 8011dc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011dc6:	2206      	movs	r2, #6
 8011dc8:	f7ee fa4a 	bl	8000260 <memchr>
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	d036      	beq.n	8011e3e <_svfiprintf_r+0x1d2>
 8011dd0:	4b21      	ldr	r3, [pc, #132]	@ (8011e58 <_svfiprintf_r+0x1ec>)
 8011dd2:	bb1b      	cbnz	r3, 8011e1c <_svfiprintf_r+0x1b0>
 8011dd4:	9b03      	ldr	r3, [sp, #12]
 8011dd6:	3307      	adds	r3, #7
 8011dd8:	f023 0307 	bic.w	r3, r3, #7
 8011ddc:	3308      	adds	r3, #8
 8011dde:	9303      	str	r3, [sp, #12]
 8011de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011de2:	4433      	add	r3, r6
 8011de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011de6:	e76a      	b.n	8011cbe <_svfiprintf_r+0x52>
 8011de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dec:	460c      	mov	r4, r1
 8011dee:	2001      	movs	r0, #1
 8011df0:	e7a8      	b.n	8011d44 <_svfiprintf_r+0xd8>
 8011df2:	2300      	movs	r3, #0
 8011df4:	3401      	adds	r4, #1
 8011df6:	9305      	str	r3, [sp, #20]
 8011df8:	4619      	mov	r1, r3
 8011dfa:	f04f 0c0a 	mov.w	ip, #10
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e04:	3a30      	subs	r2, #48	@ 0x30
 8011e06:	2a09      	cmp	r2, #9
 8011e08:	d903      	bls.n	8011e12 <_svfiprintf_r+0x1a6>
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d0c6      	beq.n	8011d9c <_svfiprintf_r+0x130>
 8011e0e:	9105      	str	r1, [sp, #20]
 8011e10:	e7c4      	b.n	8011d9c <_svfiprintf_r+0x130>
 8011e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e16:	4604      	mov	r4, r0
 8011e18:	2301      	movs	r3, #1
 8011e1a:	e7f0      	b.n	8011dfe <_svfiprintf_r+0x192>
 8011e1c:	ab03      	add	r3, sp, #12
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	462a      	mov	r2, r5
 8011e22:	4b0e      	ldr	r3, [pc, #56]	@ (8011e5c <_svfiprintf_r+0x1f0>)
 8011e24:	a904      	add	r1, sp, #16
 8011e26:	4638      	mov	r0, r7
 8011e28:	f7fd fe66 	bl	800faf8 <_printf_float>
 8011e2c:	1c42      	adds	r2, r0, #1
 8011e2e:	4606      	mov	r6, r0
 8011e30:	d1d6      	bne.n	8011de0 <_svfiprintf_r+0x174>
 8011e32:	89ab      	ldrh	r3, [r5, #12]
 8011e34:	065b      	lsls	r3, r3, #25
 8011e36:	f53f af2d 	bmi.w	8011c94 <_svfiprintf_r+0x28>
 8011e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e3c:	e72c      	b.n	8011c98 <_svfiprintf_r+0x2c>
 8011e3e:	ab03      	add	r3, sp, #12
 8011e40:	9300      	str	r3, [sp, #0]
 8011e42:	462a      	mov	r2, r5
 8011e44:	4b05      	ldr	r3, [pc, #20]	@ (8011e5c <_svfiprintf_r+0x1f0>)
 8011e46:	a904      	add	r1, sp, #16
 8011e48:	4638      	mov	r0, r7
 8011e4a:	f7fe f8e1 	bl	8010010 <_printf_i>
 8011e4e:	e7ed      	b.n	8011e2c <_svfiprintf_r+0x1c0>
 8011e50:	08013eec 	.word	0x08013eec
 8011e54:	08013ef6 	.word	0x08013ef6
 8011e58:	0800faf9 	.word	0x0800faf9
 8011e5c:	08011bb5 	.word	0x08011bb5
 8011e60:	08013ef2 	.word	0x08013ef2

08011e64 <_sungetc_r>:
 8011e64:	b538      	push	{r3, r4, r5, lr}
 8011e66:	1c4b      	adds	r3, r1, #1
 8011e68:	4614      	mov	r4, r2
 8011e6a:	d103      	bne.n	8011e74 <_sungetc_r+0x10>
 8011e6c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011e70:	4628      	mov	r0, r5
 8011e72:	bd38      	pop	{r3, r4, r5, pc}
 8011e74:	8993      	ldrh	r3, [r2, #12]
 8011e76:	f023 0320 	bic.w	r3, r3, #32
 8011e7a:	8193      	strh	r3, [r2, #12]
 8011e7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011e7e:	6852      	ldr	r2, [r2, #4]
 8011e80:	b2cd      	uxtb	r5, r1
 8011e82:	b18b      	cbz	r3, 8011ea8 <_sungetc_r+0x44>
 8011e84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011e86:	4293      	cmp	r3, r2
 8011e88:	dd08      	ble.n	8011e9c <_sungetc_r+0x38>
 8011e8a:	6823      	ldr	r3, [r4, #0]
 8011e8c:	1e5a      	subs	r2, r3, #1
 8011e8e:	6022      	str	r2, [r4, #0]
 8011e90:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011e94:	6863      	ldr	r3, [r4, #4]
 8011e96:	3301      	adds	r3, #1
 8011e98:	6063      	str	r3, [r4, #4]
 8011e9a:	e7e9      	b.n	8011e70 <_sungetc_r+0xc>
 8011e9c:	4621      	mov	r1, r4
 8011e9e:	f000 fbe4 	bl	801266a <__submore>
 8011ea2:	2800      	cmp	r0, #0
 8011ea4:	d0f1      	beq.n	8011e8a <_sungetc_r+0x26>
 8011ea6:	e7e1      	b.n	8011e6c <_sungetc_r+0x8>
 8011ea8:	6921      	ldr	r1, [r4, #16]
 8011eaa:	6823      	ldr	r3, [r4, #0]
 8011eac:	b151      	cbz	r1, 8011ec4 <_sungetc_r+0x60>
 8011eae:	4299      	cmp	r1, r3
 8011eb0:	d208      	bcs.n	8011ec4 <_sungetc_r+0x60>
 8011eb2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011eb6:	42a9      	cmp	r1, r5
 8011eb8:	d104      	bne.n	8011ec4 <_sungetc_r+0x60>
 8011eba:	3b01      	subs	r3, #1
 8011ebc:	3201      	adds	r2, #1
 8011ebe:	6023      	str	r3, [r4, #0]
 8011ec0:	6062      	str	r2, [r4, #4]
 8011ec2:	e7d5      	b.n	8011e70 <_sungetc_r+0xc>
 8011ec4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8011ec8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ece:	2303      	movs	r3, #3
 8011ed0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011ed2:	4623      	mov	r3, r4
 8011ed4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011ed8:	6023      	str	r3, [r4, #0]
 8011eda:	2301      	movs	r3, #1
 8011edc:	e7dc      	b.n	8011e98 <_sungetc_r+0x34>

08011ede <__ssrefill_r>:
 8011ede:	b510      	push	{r4, lr}
 8011ee0:	460c      	mov	r4, r1
 8011ee2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011ee4:	b169      	cbz	r1, 8011f02 <__ssrefill_r+0x24>
 8011ee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011eea:	4299      	cmp	r1, r3
 8011eec:	d001      	beq.n	8011ef2 <__ssrefill_r+0x14>
 8011eee:	f7ff fa95 	bl	801141c <_free_r>
 8011ef2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ef4:	6063      	str	r3, [r4, #4]
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	6360      	str	r0, [r4, #52]	@ 0x34
 8011efa:	b113      	cbz	r3, 8011f02 <__ssrefill_r+0x24>
 8011efc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011efe:	6023      	str	r3, [r4, #0]
 8011f00:	bd10      	pop	{r4, pc}
 8011f02:	6923      	ldr	r3, [r4, #16]
 8011f04:	6023      	str	r3, [r4, #0]
 8011f06:	2300      	movs	r3, #0
 8011f08:	6063      	str	r3, [r4, #4]
 8011f0a:	89a3      	ldrh	r3, [r4, #12]
 8011f0c:	f043 0320 	orr.w	r3, r3, #32
 8011f10:	81a3      	strh	r3, [r4, #12]
 8011f12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f16:	e7f3      	b.n	8011f00 <__ssrefill_r+0x22>

08011f18 <__ssvfiscanf_r>:
 8011f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f1c:	460c      	mov	r4, r1
 8011f1e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8011f22:	2100      	movs	r1, #0
 8011f24:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011f28:	49a6      	ldr	r1, [pc, #664]	@ (80121c4 <__ssvfiscanf_r+0x2ac>)
 8011f2a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011f2c:	f10d 0804 	add.w	r8, sp, #4
 8011f30:	49a5      	ldr	r1, [pc, #660]	@ (80121c8 <__ssvfiscanf_r+0x2b0>)
 8011f32:	4fa6      	ldr	r7, [pc, #664]	@ (80121cc <__ssvfiscanf_r+0x2b4>)
 8011f34:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011f38:	4606      	mov	r6, r0
 8011f3a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011f3c:	9300      	str	r3, [sp, #0]
 8011f3e:	f892 9000 	ldrb.w	r9, [r2]
 8011f42:	f1b9 0f00 	cmp.w	r9, #0
 8011f46:	f000 8158 	beq.w	80121fa <__ssvfiscanf_r+0x2e2>
 8011f4a:	f817 3009 	ldrb.w	r3, [r7, r9]
 8011f4e:	f013 0308 	ands.w	r3, r3, #8
 8011f52:	f102 0501 	add.w	r5, r2, #1
 8011f56:	d019      	beq.n	8011f8c <__ssvfiscanf_r+0x74>
 8011f58:	6863      	ldr	r3, [r4, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	dd0f      	ble.n	8011f7e <__ssvfiscanf_r+0x66>
 8011f5e:	6823      	ldr	r3, [r4, #0]
 8011f60:	781a      	ldrb	r2, [r3, #0]
 8011f62:	5cba      	ldrb	r2, [r7, r2]
 8011f64:	0712      	lsls	r2, r2, #28
 8011f66:	d401      	bmi.n	8011f6c <__ssvfiscanf_r+0x54>
 8011f68:	462a      	mov	r2, r5
 8011f6a:	e7e8      	b.n	8011f3e <__ssvfiscanf_r+0x26>
 8011f6c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011f6e:	3201      	adds	r2, #1
 8011f70:	9245      	str	r2, [sp, #276]	@ 0x114
 8011f72:	6862      	ldr	r2, [r4, #4]
 8011f74:	3301      	adds	r3, #1
 8011f76:	3a01      	subs	r2, #1
 8011f78:	6062      	str	r2, [r4, #4]
 8011f7a:	6023      	str	r3, [r4, #0]
 8011f7c:	e7ec      	b.n	8011f58 <__ssvfiscanf_r+0x40>
 8011f7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011f80:	4621      	mov	r1, r4
 8011f82:	4630      	mov	r0, r6
 8011f84:	4798      	blx	r3
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d0e9      	beq.n	8011f5e <__ssvfiscanf_r+0x46>
 8011f8a:	e7ed      	b.n	8011f68 <__ssvfiscanf_r+0x50>
 8011f8c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8011f90:	f040 8085 	bne.w	801209e <__ssvfiscanf_r+0x186>
 8011f94:	9341      	str	r3, [sp, #260]	@ 0x104
 8011f96:	9343      	str	r3, [sp, #268]	@ 0x10c
 8011f98:	7853      	ldrb	r3, [r2, #1]
 8011f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f9c:	bf02      	ittt	eq
 8011f9e:	2310      	moveq	r3, #16
 8011fa0:	1c95      	addeq	r5, r2, #2
 8011fa2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011fa4:	220a      	movs	r2, #10
 8011fa6:	46aa      	mov	sl, r5
 8011fa8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011fac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8011fb0:	2b09      	cmp	r3, #9
 8011fb2:	d91e      	bls.n	8011ff2 <__ssvfiscanf_r+0xda>
 8011fb4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80121d0 <__ssvfiscanf_r+0x2b8>
 8011fb8:	2203      	movs	r2, #3
 8011fba:	4658      	mov	r0, fp
 8011fbc:	f7ee f950 	bl	8000260 <memchr>
 8011fc0:	b138      	cbz	r0, 8011fd2 <__ssvfiscanf_r+0xba>
 8011fc2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011fc4:	eba0 000b 	sub.w	r0, r0, fp
 8011fc8:	2301      	movs	r3, #1
 8011fca:	4083      	lsls	r3, r0
 8011fcc:	4313      	orrs	r3, r2
 8011fce:	9341      	str	r3, [sp, #260]	@ 0x104
 8011fd0:	4655      	mov	r5, sl
 8011fd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011fd6:	2b78      	cmp	r3, #120	@ 0x78
 8011fd8:	d806      	bhi.n	8011fe8 <__ssvfiscanf_r+0xd0>
 8011fda:	2b57      	cmp	r3, #87	@ 0x57
 8011fdc:	d810      	bhi.n	8012000 <__ssvfiscanf_r+0xe8>
 8011fde:	2b25      	cmp	r3, #37	@ 0x25
 8011fe0:	d05d      	beq.n	801209e <__ssvfiscanf_r+0x186>
 8011fe2:	d857      	bhi.n	8012094 <__ssvfiscanf_r+0x17c>
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d075      	beq.n	80120d4 <__ssvfiscanf_r+0x1bc>
 8011fe8:	2303      	movs	r3, #3
 8011fea:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011fec:	230a      	movs	r3, #10
 8011fee:	9342      	str	r3, [sp, #264]	@ 0x108
 8011ff0:	e088      	b.n	8012104 <__ssvfiscanf_r+0x1ec>
 8011ff2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011ff4:	fb02 1103 	mla	r1, r2, r3, r1
 8011ff8:	3930      	subs	r1, #48	@ 0x30
 8011ffa:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011ffc:	4655      	mov	r5, sl
 8011ffe:	e7d2      	b.n	8011fa6 <__ssvfiscanf_r+0x8e>
 8012000:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012004:	2a20      	cmp	r2, #32
 8012006:	d8ef      	bhi.n	8011fe8 <__ssvfiscanf_r+0xd0>
 8012008:	a101      	add	r1, pc, #4	@ (adr r1, 8012010 <__ssvfiscanf_r+0xf8>)
 801200a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801200e:	bf00      	nop
 8012010:	080120e3 	.word	0x080120e3
 8012014:	08011fe9 	.word	0x08011fe9
 8012018:	08011fe9 	.word	0x08011fe9
 801201c:	0801213d 	.word	0x0801213d
 8012020:	08011fe9 	.word	0x08011fe9
 8012024:	08011fe9 	.word	0x08011fe9
 8012028:	08011fe9 	.word	0x08011fe9
 801202c:	08011fe9 	.word	0x08011fe9
 8012030:	08011fe9 	.word	0x08011fe9
 8012034:	08011fe9 	.word	0x08011fe9
 8012038:	08011fe9 	.word	0x08011fe9
 801203c:	08012153 	.word	0x08012153
 8012040:	08012139 	.word	0x08012139
 8012044:	0801209b 	.word	0x0801209b
 8012048:	0801209b 	.word	0x0801209b
 801204c:	0801209b 	.word	0x0801209b
 8012050:	08011fe9 	.word	0x08011fe9
 8012054:	080120f5 	.word	0x080120f5
 8012058:	08011fe9 	.word	0x08011fe9
 801205c:	08011fe9 	.word	0x08011fe9
 8012060:	08011fe9 	.word	0x08011fe9
 8012064:	08011fe9 	.word	0x08011fe9
 8012068:	08012163 	.word	0x08012163
 801206c:	080120fd 	.word	0x080120fd
 8012070:	080120db 	.word	0x080120db
 8012074:	08011fe9 	.word	0x08011fe9
 8012078:	08011fe9 	.word	0x08011fe9
 801207c:	0801215f 	.word	0x0801215f
 8012080:	08011fe9 	.word	0x08011fe9
 8012084:	08012139 	.word	0x08012139
 8012088:	08011fe9 	.word	0x08011fe9
 801208c:	08011fe9 	.word	0x08011fe9
 8012090:	080120e3 	.word	0x080120e3
 8012094:	3b45      	subs	r3, #69	@ 0x45
 8012096:	2b02      	cmp	r3, #2
 8012098:	d8a6      	bhi.n	8011fe8 <__ssvfiscanf_r+0xd0>
 801209a:	2305      	movs	r3, #5
 801209c:	e031      	b.n	8012102 <__ssvfiscanf_r+0x1ea>
 801209e:	6863      	ldr	r3, [r4, #4]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	dd0d      	ble.n	80120c0 <__ssvfiscanf_r+0x1a8>
 80120a4:	6823      	ldr	r3, [r4, #0]
 80120a6:	781a      	ldrb	r2, [r3, #0]
 80120a8:	454a      	cmp	r2, r9
 80120aa:	f040 80a6 	bne.w	80121fa <__ssvfiscanf_r+0x2e2>
 80120ae:	3301      	adds	r3, #1
 80120b0:	6862      	ldr	r2, [r4, #4]
 80120b2:	6023      	str	r3, [r4, #0]
 80120b4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80120b6:	3a01      	subs	r2, #1
 80120b8:	3301      	adds	r3, #1
 80120ba:	6062      	str	r2, [r4, #4]
 80120bc:	9345      	str	r3, [sp, #276]	@ 0x114
 80120be:	e753      	b.n	8011f68 <__ssvfiscanf_r+0x50>
 80120c0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80120c2:	4621      	mov	r1, r4
 80120c4:	4630      	mov	r0, r6
 80120c6:	4798      	blx	r3
 80120c8:	2800      	cmp	r0, #0
 80120ca:	d0eb      	beq.n	80120a4 <__ssvfiscanf_r+0x18c>
 80120cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80120ce:	2800      	cmp	r0, #0
 80120d0:	f040 808b 	bne.w	80121ea <__ssvfiscanf_r+0x2d2>
 80120d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120d8:	e08b      	b.n	80121f2 <__ssvfiscanf_r+0x2da>
 80120da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80120dc:	f042 0220 	orr.w	r2, r2, #32
 80120e0:	9241      	str	r2, [sp, #260]	@ 0x104
 80120e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80120e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80120e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80120ea:	2210      	movs	r2, #16
 80120ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80120ee:	9242      	str	r2, [sp, #264]	@ 0x108
 80120f0:	d902      	bls.n	80120f8 <__ssvfiscanf_r+0x1e0>
 80120f2:	e005      	b.n	8012100 <__ssvfiscanf_r+0x1e8>
 80120f4:	2300      	movs	r3, #0
 80120f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80120f8:	2303      	movs	r3, #3
 80120fa:	e002      	b.n	8012102 <__ssvfiscanf_r+0x1ea>
 80120fc:	2308      	movs	r3, #8
 80120fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8012100:	2304      	movs	r3, #4
 8012102:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012104:	6863      	ldr	r3, [r4, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	dd39      	ble.n	801217e <__ssvfiscanf_r+0x266>
 801210a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801210c:	0659      	lsls	r1, r3, #25
 801210e:	d404      	bmi.n	801211a <__ssvfiscanf_r+0x202>
 8012110:	6823      	ldr	r3, [r4, #0]
 8012112:	781a      	ldrb	r2, [r3, #0]
 8012114:	5cba      	ldrb	r2, [r7, r2]
 8012116:	0712      	lsls	r2, r2, #28
 8012118:	d438      	bmi.n	801218c <__ssvfiscanf_r+0x274>
 801211a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801211c:	2b02      	cmp	r3, #2
 801211e:	dc47      	bgt.n	80121b0 <__ssvfiscanf_r+0x298>
 8012120:	466b      	mov	r3, sp
 8012122:	4622      	mov	r2, r4
 8012124:	a941      	add	r1, sp, #260	@ 0x104
 8012126:	4630      	mov	r0, r6
 8012128:	f000 f86c 	bl	8012204 <_scanf_chars>
 801212c:	2801      	cmp	r0, #1
 801212e:	d064      	beq.n	80121fa <__ssvfiscanf_r+0x2e2>
 8012130:	2802      	cmp	r0, #2
 8012132:	f47f af19 	bne.w	8011f68 <__ssvfiscanf_r+0x50>
 8012136:	e7c9      	b.n	80120cc <__ssvfiscanf_r+0x1b4>
 8012138:	220a      	movs	r2, #10
 801213a:	e7d7      	b.n	80120ec <__ssvfiscanf_r+0x1d4>
 801213c:	4629      	mov	r1, r5
 801213e:	4640      	mov	r0, r8
 8012140:	f000 fa5a 	bl	80125f8 <__sccl>
 8012144:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801214a:	9341      	str	r3, [sp, #260]	@ 0x104
 801214c:	4605      	mov	r5, r0
 801214e:	2301      	movs	r3, #1
 8012150:	e7d7      	b.n	8012102 <__ssvfiscanf_r+0x1ea>
 8012152:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012158:	9341      	str	r3, [sp, #260]	@ 0x104
 801215a:	2300      	movs	r3, #0
 801215c:	e7d1      	b.n	8012102 <__ssvfiscanf_r+0x1ea>
 801215e:	2302      	movs	r3, #2
 8012160:	e7cf      	b.n	8012102 <__ssvfiscanf_r+0x1ea>
 8012162:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012164:	06c3      	lsls	r3, r0, #27
 8012166:	f53f aeff 	bmi.w	8011f68 <__ssvfiscanf_r+0x50>
 801216a:	9b00      	ldr	r3, [sp, #0]
 801216c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801216e:	1d19      	adds	r1, r3, #4
 8012170:	9100      	str	r1, [sp, #0]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	07c0      	lsls	r0, r0, #31
 8012176:	bf4c      	ite	mi
 8012178:	801a      	strhmi	r2, [r3, #0]
 801217a:	601a      	strpl	r2, [r3, #0]
 801217c:	e6f4      	b.n	8011f68 <__ssvfiscanf_r+0x50>
 801217e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012180:	4621      	mov	r1, r4
 8012182:	4630      	mov	r0, r6
 8012184:	4798      	blx	r3
 8012186:	2800      	cmp	r0, #0
 8012188:	d0bf      	beq.n	801210a <__ssvfiscanf_r+0x1f2>
 801218a:	e79f      	b.n	80120cc <__ssvfiscanf_r+0x1b4>
 801218c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801218e:	3201      	adds	r2, #1
 8012190:	9245      	str	r2, [sp, #276]	@ 0x114
 8012192:	6862      	ldr	r2, [r4, #4]
 8012194:	3a01      	subs	r2, #1
 8012196:	2a00      	cmp	r2, #0
 8012198:	6062      	str	r2, [r4, #4]
 801219a:	dd02      	ble.n	80121a2 <__ssvfiscanf_r+0x28a>
 801219c:	3301      	adds	r3, #1
 801219e:	6023      	str	r3, [r4, #0]
 80121a0:	e7b6      	b.n	8012110 <__ssvfiscanf_r+0x1f8>
 80121a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80121a4:	4621      	mov	r1, r4
 80121a6:	4630      	mov	r0, r6
 80121a8:	4798      	blx	r3
 80121aa:	2800      	cmp	r0, #0
 80121ac:	d0b0      	beq.n	8012110 <__ssvfiscanf_r+0x1f8>
 80121ae:	e78d      	b.n	80120cc <__ssvfiscanf_r+0x1b4>
 80121b0:	2b04      	cmp	r3, #4
 80121b2:	dc0f      	bgt.n	80121d4 <__ssvfiscanf_r+0x2bc>
 80121b4:	466b      	mov	r3, sp
 80121b6:	4622      	mov	r2, r4
 80121b8:	a941      	add	r1, sp, #260	@ 0x104
 80121ba:	4630      	mov	r0, r6
 80121bc:	f000 f87c 	bl	80122b8 <_scanf_i>
 80121c0:	e7b4      	b.n	801212c <__ssvfiscanf_r+0x214>
 80121c2:	bf00      	nop
 80121c4:	08011e65 	.word	0x08011e65
 80121c8:	08011edf 	.word	0x08011edf
 80121cc:	08014061 	.word	0x08014061
 80121d0:	08013ef2 	.word	0x08013ef2
 80121d4:	4b0a      	ldr	r3, [pc, #40]	@ (8012200 <__ssvfiscanf_r+0x2e8>)
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	f43f aec6 	beq.w	8011f68 <__ssvfiscanf_r+0x50>
 80121dc:	466b      	mov	r3, sp
 80121de:	4622      	mov	r2, r4
 80121e0:	a941      	add	r1, sp, #260	@ 0x104
 80121e2:	4630      	mov	r0, r6
 80121e4:	f3af 8000 	nop.w
 80121e8:	e7a0      	b.n	801212c <__ssvfiscanf_r+0x214>
 80121ea:	89a3      	ldrh	r3, [r4, #12]
 80121ec:	065b      	lsls	r3, r3, #25
 80121ee:	f53f af71 	bmi.w	80120d4 <__ssvfiscanf_r+0x1bc>
 80121f2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80121f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121fa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80121fc:	e7f9      	b.n	80121f2 <__ssvfiscanf_r+0x2da>
 80121fe:	bf00      	nop
 8012200:	00000000 	.word	0x00000000

08012204 <_scanf_chars>:
 8012204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012208:	4615      	mov	r5, r2
 801220a:	688a      	ldr	r2, [r1, #8]
 801220c:	4680      	mov	r8, r0
 801220e:	460c      	mov	r4, r1
 8012210:	b932      	cbnz	r2, 8012220 <_scanf_chars+0x1c>
 8012212:	698a      	ldr	r2, [r1, #24]
 8012214:	2a00      	cmp	r2, #0
 8012216:	bf14      	ite	ne
 8012218:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 801221c:	2201      	moveq	r2, #1
 801221e:	608a      	str	r2, [r1, #8]
 8012220:	6822      	ldr	r2, [r4, #0]
 8012222:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80122b4 <_scanf_chars+0xb0>
 8012226:	06d1      	lsls	r1, r2, #27
 8012228:	bf5f      	itttt	pl
 801222a:	681a      	ldrpl	r2, [r3, #0]
 801222c:	1d11      	addpl	r1, r2, #4
 801222e:	6019      	strpl	r1, [r3, #0]
 8012230:	6816      	ldrpl	r6, [r2, #0]
 8012232:	2700      	movs	r7, #0
 8012234:	69a0      	ldr	r0, [r4, #24]
 8012236:	b188      	cbz	r0, 801225c <_scanf_chars+0x58>
 8012238:	2801      	cmp	r0, #1
 801223a:	d107      	bne.n	801224c <_scanf_chars+0x48>
 801223c:	682b      	ldr	r3, [r5, #0]
 801223e:	781a      	ldrb	r2, [r3, #0]
 8012240:	6963      	ldr	r3, [r4, #20]
 8012242:	5c9b      	ldrb	r3, [r3, r2]
 8012244:	b953      	cbnz	r3, 801225c <_scanf_chars+0x58>
 8012246:	2f00      	cmp	r7, #0
 8012248:	d031      	beq.n	80122ae <_scanf_chars+0xaa>
 801224a:	e022      	b.n	8012292 <_scanf_chars+0x8e>
 801224c:	2802      	cmp	r0, #2
 801224e:	d120      	bne.n	8012292 <_scanf_chars+0x8e>
 8012250:	682b      	ldr	r3, [r5, #0]
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012258:	071b      	lsls	r3, r3, #28
 801225a:	d41a      	bmi.n	8012292 <_scanf_chars+0x8e>
 801225c:	6823      	ldr	r3, [r4, #0]
 801225e:	06da      	lsls	r2, r3, #27
 8012260:	bf5e      	ittt	pl
 8012262:	682b      	ldrpl	r3, [r5, #0]
 8012264:	781b      	ldrbpl	r3, [r3, #0]
 8012266:	f806 3b01 	strbpl.w	r3, [r6], #1
 801226a:	682a      	ldr	r2, [r5, #0]
 801226c:	686b      	ldr	r3, [r5, #4]
 801226e:	3201      	adds	r2, #1
 8012270:	602a      	str	r2, [r5, #0]
 8012272:	68a2      	ldr	r2, [r4, #8]
 8012274:	3b01      	subs	r3, #1
 8012276:	3a01      	subs	r2, #1
 8012278:	606b      	str	r3, [r5, #4]
 801227a:	3701      	adds	r7, #1
 801227c:	60a2      	str	r2, [r4, #8]
 801227e:	b142      	cbz	r2, 8012292 <_scanf_chars+0x8e>
 8012280:	2b00      	cmp	r3, #0
 8012282:	dcd7      	bgt.n	8012234 <_scanf_chars+0x30>
 8012284:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012288:	4629      	mov	r1, r5
 801228a:	4640      	mov	r0, r8
 801228c:	4798      	blx	r3
 801228e:	2800      	cmp	r0, #0
 8012290:	d0d0      	beq.n	8012234 <_scanf_chars+0x30>
 8012292:	6823      	ldr	r3, [r4, #0]
 8012294:	f013 0310 	ands.w	r3, r3, #16
 8012298:	d105      	bne.n	80122a6 <_scanf_chars+0xa2>
 801229a:	68e2      	ldr	r2, [r4, #12]
 801229c:	3201      	adds	r2, #1
 801229e:	60e2      	str	r2, [r4, #12]
 80122a0:	69a2      	ldr	r2, [r4, #24]
 80122a2:	b102      	cbz	r2, 80122a6 <_scanf_chars+0xa2>
 80122a4:	7033      	strb	r3, [r6, #0]
 80122a6:	6923      	ldr	r3, [r4, #16]
 80122a8:	443b      	add	r3, r7
 80122aa:	6123      	str	r3, [r4, #16]
 80122ac:	2000      	movs	r0, #0
 80122ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122b2:	bf00      	nop
 80122b4:	08014061 	.word	0x08014061

080122b8 <_scanf_i>:
 80122b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122bc:	4698      	mov	r8, r3
 80122be:	4b74      	ldr	r3, [pc, #464]	@ (8012490 <_scanf_i+0x1d8>)
 80122c0:	460c      	mov	r4, r1
 80122c2:	4682      	mov	sl, r0
 80122c4:	4616      	mov	r6, r2
 80122c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80122ca:	b087      	sub	sp, #28
 80122cc:	ab03      	add	r3, sp, #12
 80122ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122d2:	4b70      	ldr	r3, [pc, #448]	@ (8012494 <_scanf_i+0x1dc>)
 80122d4:	69a1      	ldr	r1, [r4, #24]
 80122d6:	4a70      	ldr	r2, [pc, #448]	@ (8012498 <_scanf_i+0x1e0>)
 80122d8:	2903      	cmp	r1, #3
 80122da:	bf08      	it	eq
 80122dc:	461a      	moveq	r2, r3
 80122de:	68a3      	ldr	r3, [r4, #8]
 80122e0:	9201      	str	r2, [sp, #4]
 80122e2:	1e5a      	subs	r2, r3, #1
 80122e4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80122e8:	bf88      	it	hi
 80122ea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80122ee:	4627      	mov	r7, r4
 80122f0:	bf82      	ittt	hi
 80122f2:	eb03 0905 	addhi.w	r9, r3, r5
 80122f6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80122fa:	60a3      	strhi	r3, [r4, #8]
 80122fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012300:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012304:	bf98      	it	ls
 8012306:	f04f 0900 	movls.w	r9, #0
 801230a:	6023      	str	r3, [r4, #0]
 801230c:	463d      	mov	r5, r7
 801230e:	f04f 0b00 	mov.w	fp, #0
 8012312:	6831      	ldr	r1, [r6, #0]
 8012314:	ab03      	add	r3, sp, #12
 8012316:	7809      	ldrb	r1, [r1, #0]
 8012318:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801231c:	2202      	movs	r2, #2
 801231e:	f7ed ff9f 	bl	8000260 <memchr>
 8012322:	b328      	cbz	r0, 8012370 <_scanf_i+0xb8>
 8012324:	f1bb 0f01 	cmp.w	fp, #1
 8012328:	d159      	bne.n	80123de <_scanf_i+0x126>
 801232a:	6862      	ldr	r2, [r4, #4]
 801232c:	b92a      	cbnz	r2, 801233a <_scanf_i+0x82>
 801232e:	6822      	ldr	r2, [r4, #0]
 8012330:	2108      	movs	r1, #8
 8012332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012336:	6061      	str	r1, [r4, #4]
 8012338:	6022      	str	r2, [r4, #0]
 801233a:	6822      	ldr	r2, [r4, #0]
 801233c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012340:	6022      	str	r2, [r4, #0]
 8012342:	68a2      	ldr	r2, [r4, #8]
 8012344:	1e51      	subs	r1, r2, #1
 8012346:	60a1      	str	r1, [r4, #8]
 8012348:	b192      	cbz	r2, 8012370 <_scanf_i+0xb8>
 801234a:	6832      	ldr	r2, [r6, #0]
 801234c:	1c51      	adds	r1, r2, #1
 801234e:	6031      	str	r1, [r6, #0]
 8012350:	7812      	ldrb	r2, [r2, #0]
 8012352:	f805 2b01 	strb.w	r2, [r5], #1
 8012356:	6872      	ldr	r2, [r6, #4]
 8012358:	3a01      	subs	r2, #1
 801235a:	2a00      	cmp	r2, #0
 801235c:	6072      	str	r2, [r6, #4]
 801235e:	dc07      	bgt.n	8012370 <_scanf_i+0xb8>
 8012360:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012364:	4631      	mov	r1, r6
 8012366:	4650      	mov	r0, sl
 8012368:	4790      	blx	r2
 801236a:	2800      	cmp	r0, #0
 801236c:	f040 8085 	bne.w	801247a <_scanf_i+0x1c2>
 8012370:	f10b 0b01 	add.w	fp, fp, #1
 8012374:	f1bb 0f03 	cmp.w	fp, #3
 8012378:	d1cb      	bne.n	8012312 <_scanf_i+0x5a>
 801237a:	6863      	ldr	r3, [r4, #4]
 801237c:	b90b      	cbnz	r3, 8012382 <_scanf_i+0xca>
 801237e:	230a      	movs	r3, #10
 8012380:	6063      	str	r3, [r4, #4]
 8012382:	6863      	ldr	r3, [r4, #4]
 8012384:	4945      	ldr	r1, [pc, #276]	@ (801249c <_scanf_i+0x1e4>)
 8012386:	6960      	ldr	r0, [r4, #20]
 8012388:	1ac9      	subs	r1, r1, r3
 801238a:	f000 f935 	bl	80125f8 <__sccl>
 801238e:	f04f 0b00 	mov.w	fp, #0
 8012392:	68a3      	ldr	r3, [r4, #8]
 8012394:	6822      	ldr	r2, [r4, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d03d      	beq.n	8012416 <_scanf_i+0x15e>
 801239a:	6831      	ldr	r1, [r6, #0]
 801239c:	6960      	ldr	r0, [r4, #20]
 801239e:	f891 c000 	ldrb.w	ip, [r1]
 80123a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80123a6:	2800      	cmp	r0, #0
 80123a8:	d035      	beq.n	8012416 <_scanf_i+0x15e>
 80123aa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80123ae:	d124      	bne.n	80123fa <_scanf_i+0x142>
 80123b0:	0510      	lsls	r0, r2, #20
 80123b2:	d522      	bpl.n	80123fa <_scanf_i+0x142>
 80123b4:	f10b 0b01 	add.w	fp, fp, #1
 80123b8:	f1b9 0f00 	cmp.w	r9, #0
 80123bc:	d003      	beq.n	80123c6 <_scanf_i+0x10e>
 80123be:	3301      	adds	r3, #1
 80123c0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80123c4:	60a3      	str	r3, [r4, #8]
 80123c6:	6873      	ldr	r3, [r6, #4]
 80123c8:	3b01      	subs	r3, #1
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	6073      	str	r3, [r6, #4]
 80123ce:	dd1b      	ble.n	8012408 <_scanf_i+0x150>
 80123d0:	6833      	ldr	r3, [r6, #0]
 80123d2:	3301      	adds	r3, #1
 80123d4:	6033      	str	r3, [r6, #0]
 80123d6:	68a3      	ldr	r3, [r4, #8]
 80123d8:	3b01      	subs	r3, #1
 80123da:	60a3      	str	r3, [r4, #8]
 80123dc:	e7d9      	b.n	8012392 <_scanf_i+0xda>
 80123de:	f1bb 0f02 	cmp.w	fp, #2
 80123e2:	d1ae      	bne.n	8012342 <_scanf_i+0x8a>
 80123e4:	6822      	ldr	r2, [r4, #0]
 80123e6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80123ea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80123ee:	d1c4      	bne.n	801237a <_scanf_i+0xc2>
 80123f0:	2110      	movs	r1, #16
 80123f2:	6061      	str	r1, [r4, #4]
 80123f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80123f8:	e7a2      	b.n	8012340 <_scanf_i+0x88>
 80123fa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80123fe:	6022      	str	r2, [r4, #0]
 8012400:	780b      	ldrb	r3, [r1, #0]
 8012402:	f805 3b01 	strb.w	r3, [r5], #1
 8012406:	e7de      	b.n	80123c6 <_scanf_i+0x10e>
 8012408:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801240c:	4631      	mov	r1, r6
 801240e:	4650      	mov	r0, sl
 8012410:	4798      	blx	r3
 8012412:	2800      	cmp	r0, #0
 8012414:	d0df      	beq.n	80123d6 <_scanf_i+0x11e>
 8012416:	6823      	ldr	r3, [r4, #0]
 8012418:	05d9      	lsls	r1, r3, #23
 801241a:	d50d      	bpl.n	8012438 <_scanf_i+0x180>
 801241c:	42bd      	cmp	r5, r7
 801241e:	d909      	bls.n	8012434 <_scanf_i+0x17c>
 8012420:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012424:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012428:	4632      	mov	r2, r6
 801242a:	4650      	mov	r0, sl
 801242c:	4798      	blx	r3
 801242e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8012432:	464d      	mov	r5, r9
 8012434:	42bd      	cmp	r5, r7
 8012436:	d028      	beq.n	801248a <_scanf_i+0x1d2>
 8012438:	6822      	ldr	r2, [r4, #0]
 801243a:	f012 0210 	ands.w	r2, r2, #16
 801243e:	d113      	bne.n	8012468 <_scanf_i+0x1b0>
 8012440:	702a      	strb	r2, [r5, #0]
 8012442:	6863      	ldr	r3, [r4, #4]
 8012444:	9e01      	ldr	r6, [sp, #4]
 8012446:	4639      	mov	r1, r7
 8012448:	4650      	mov	r0, sl
 801244a:	47b0      	blx	r6
 801244c:	f8d8 3000 	ldr.w	r3, [r8]
 8012450:	6821      	ldr	r1, [r4, #0]
 8012452:	1d1a      	adds	r2, r3, #4
 8012454:	f8c8 2000 	str.w	r2, [r8]
 8012458:	f011 0f20 	tst.w	r1, #32
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	d00f      	beq.n	8012480 <_scanf_i+0x1c8>
 8012460:	6018      	str	r0, [r3, #0]
 8012462:	68e3      	ldr	r3, [r4, #12]
 8012464:	3301      	adds	r3, #1
 8012466:	60e3      	str	r3, [r4, #12]
 8012468:	6923      	ldr	r3, [r4, #16]
 801246a:	1bed      	subs	r5, r5, r7
 801246c:	445d      	add	r5, fp
 801246e:	442b      	add	r3, r5
 8012470:	6123      	str	r3, [r4, #16]
 8012472:	2000      	movs	r0, #0
 8012474:	b007      	add	sp, #28
 8012476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801247a:	f04f 0b00 	mov.w	fp, #0
 801247e:	e7ca      	b.n	8012416 <_scanf_i+0x15e>
 8012480:	07ca      	lsls	r2, r1, #31
 8012482:	bf4c      	ite	mi
 8012484:	8018      	strhmi	r0, [r3, #0]
 8012486:	6018      	strpl	r0, [r3, #0]
 8012488:	e7eb      	b.n	8012462 <_scanf_i+0x1aa>
 801248a:	2001      	movs	r0, #1
 801248c:	e7f2      	b.n	8012474 <_scanf_i+0x1bc>
 801248e:	bf00      	nop
 8012490:	08012fb8 	.word	0x08012fb8
 8012494:	080128ad 	.word	0x080128ad
 8012498:	0801298d 	.word	0x0801298d
 801249c:	08013f0d 	.word	0x08013f0d

080124a0 <__sflush_r>:
 80124a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80124a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124a8:	0716      	lsls	r6, r2, #28
 80124aa:	4605      	mov	r5, r0
 80124ac:	460c      	mov	r4, r1
 80124ae:	d454      	bmi.n	801255a <__sflush_r+0xba>
 80124b0:	684b      	ldr	r3, [r1, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	dc02      	bgt.n	80124bc <__sflush_r+0x1c>
 80124b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	dd48      	ble.n	801254e <__sflush_r+0xae>
 80124bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80124be:	2e00      	cmp	r6, #0
 80124c0:	d045      	beq.n	801254e <__sflush_r+0xae>
 80124c2:	2300      	movs	r3, #0
 80124c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80124c8:	682f      	ldr	r7, [r5, #0]
 80124ca:	6a21      	ldr	r1, [r4, #32]
 80124cc:	602b      	str	r3, [r5, #0]
 80124ce:	d030      	beq.n	8012532 <__sflush_r+0x92>
 80124d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80124d2:	89a3      	ldrh	r3, [r4, #12]
 80124d4:	0759      	lsls	r1, r3, #29
 80124d6:	d505      	bpl.n	80124e4 <__sflush_r+0x44>
 80124d8:	6863      	ldr	r3, [r4, #4]
 80124da:	1ad2      	subs	r2, r2, r3
 80124dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80124de:	b10b      	cbz	r3, 80124e4 <__sflush_r+0x44>
 80124e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80124e2:	1ad2      	subs	r2, r2, r3
 80124e4:	2300      	movs	r3, #0
 80124e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80124e8:	6a21      	ldr	r1, [r4, #32]
 80124ea:	4628      	mov	r0, r5
 80124ec:	47b0      	blx	r6
 80124ee:	1c43      	adds	r3, r0, #1
 80124f0:	89a3      	ldrh	r3, [r4, #12]
 80124f2:	d106      	bne.n	8012502 <__sflush_r+0x62>
 80124f4:	6829      	ldr	r1, [r5, #0]
 80124f6:	291d      	cmp	r1, #29
 80124f8:	d82b      	bhi.n	8012552 <__sflush_r+0xb2>
 80124fa:	4a2a      	ldr	r2, [pc, #168]	@ (80125a4 <__sflush_r+0x104>)
 80124fc:	40ca      	lsrs	r2, r1
 80124fe:	07d6      	lsls	r6, r2, #31
 8012500:	d527      	bpl.n	8012552 <__sflush_r+0xb2>
 8012502:	2200      	movs	r2, #0
 8012504:	6062      	str	r2, [r4, #4]
 8012506:	04d9      	lsls	r1, r3, #19
 8012508:	6922      	ldr	r2, [r4, #16]
 801250a:	6022      	str	r2, [r4, #0]
 801250c:	d504      	bpl.n	8012518 <__sflush_r+0x78>
 801250e:	1c42      	adds	r2, r0, #1
 8012510:	d101      	bne.n	8012516 <__sflush_r+0x76>
 8012512:	682b      	ldr	r3, [r5, #0]
 8012514:	b903      	cbnz	r3, 8012518 <__sflush_r+0x78>
 8012516:	6560      	str	r0, [r4, #84]	@ 0x54
 8012518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801251a:	602f      	str	r7, [r5, #0]
 801251c:	b1b9      	cbz	r1, 801254e <__sflush_r+0xae>
 801251e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012522:	4299      	cmp	r1, r3
 8012524:	d002      	beq.n	801252c <__sflush_r+0x8c>
 8012526:	4628      	mov	r0, r5
 8012528:	f7fe ff78 	bl	801141c <_free_r>
 801252c:	2300      	movs	r3, #0
 801252e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012530:	e00d      	b.n	801254e <__sflush_r+0xae>
 8012532:	2301      	movs	r3, #1
 8012534:	4628      	mov	r0, r5
 8012536:	47b0      	blx	r6
 8012538:	4602      	mov	r2, r0
 801253a:	1c50      	adds	r0, r2, #1
 801253c:	d1c9      	bne.n	80124d2 <__sflush_r+0x32>
 801253e:	682b      	ldr	r3, [r5, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d0c6      	beq.n	80124d2 <__sflush_r+0x32>
 8012544:	2b1d      	cmp	r3, #29
 8012546:	d001      	beq.n	801254c <__sflush_r+0xac>
 8012548:	2b16      	cmp	r3, #22
 801254a:	d11e      	bne.n	801258a <__sflush_r+0xea>
 801254c:	602f      	str	r7, [r5, #0]
 801254e:	2000      	movs	r0, #0
 8012550:	e022      	b.n	8012598 <__sflush_r+0xf8>
 8012552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012556:	b21b      	sxth	r3, r3
 8012558:	e01b      	b.n	8012592 <__sflush_r+0xf2>
 801255a:	690f      	ldr	r7, [r1, #16]
 801255c:	2f00      	cmp	r7, #0
 801255e:	d0f6      	beq.n	801254e <__sflush_r+0xae>
 8012560:	0793      	lsls	r3, r2, #30
 8012562:	680e      	ldr	r6, [r1, #0]
 8012564:	bf08      	it	eq
 8012566:	694b      	ldreq	r3, [r1, #20]
 8012568:	600f      	str	r7, [r1, #0]
 801256a:	bf18      	it	ne
 801256c:	2300      	movne	r3, #0
 801256e:	eba6 0807 	sub.w	r8, r6, r7
 8012572:	608b      	str	r3, [r1, #8]
 8012574:	f1b8 0f00 	cmp.w	r8, #0
 8012578:	dde9      	ble.n	801254e <__sflush_r+0xae>
 801257a:	6a21      	ldr	r1, [r4, #32]
 801257c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801257e:	4643      	mov	r3, r8
 8012580:	463a      	mov	r2, r7
 8012582:	4628      	mov	r0, r5
 8012584:	47b0      	blx	r6
 8012586:	2800      	cmp	r0, #0
 8012588:	dc08      	bgt.n	801259c <__sflush_r+0xfc>
 801258a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801258e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012592:	81a3      	strh	r3, [r4, #12]
 8012594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801259c:	4407      	add	r7, r0
 801259e:	eba8 0800 	sub.w	r8, r8, r0
 80125a2:	e7e7      	b.n	8012574 <__sflush_r+0xd4>
 80125a4:	20400001 	.word	0x20400001

080125a8 <_fflush_r>:
 80125a8:	b538      	push	{r3, r4, r5, lr}
 80125aa:	690b      	ldr	r3, [r1, #16]
 80125ac:	4605      	mov	r5, r0
 80125ae:	460c      	mov	r4, r1
 80125b0:	b913      	cbnz	r3, 80125b8 <_fflush_r+0x10>
 80125b2:	2500      	movs	r5, #0
 80125b4:	4628      	mov	r0, r5
 80125b6:	bd38      	pop	{r3, r4, r5, pc}
 80125b8:	b118      	cbz	r0, 80125c2 <_fflush_r+0x1a>
 80125ba:	6a03      	ldr	r3, [r0, #32]
 80125bc:	b90b      	cbnz	r3, 80125c2 <_fflush_r+0x1a>
 80125be:	f7fd fed1 	bl	8010364 <__sinit>
 80125c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d0f3      	beq.n	80125b2 <_fflush_r+0xa>
 80125ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80125cc:	07d0      	lsls	r0, r2, #31
 80125ce:	d404      	bmi.n	80125da <_fflush_r+0x32>
 80125d0:	0599      	lsls	r1, r3, #22
 80125d2:	d402      	bmi.n	80125da <_fflush_r+0x32>
 80125d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125d6:	f7fe f8d2 	bl	801077e <__retarget_lock_acquire_recursive>
 80125da:	4628      	mov	r0, r5
 80125dc:	4621      	mov	r1, r4
 80125de:	f7ff ff5f 	bl	80124a0 <__sflush_r>
 80125e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80125e4:	07da      	lsls	r2, r3, #31
 80125e6:	4605      	mov	r5, r0
 80125e8:	d4e4      	bmi.n	80125b4 <_fflush_r+0xc>
 80125ea:	89a3      	ldrh	r3, [r4, #12]
 80125ec:	059b      	lsls	r3, r3, #22
 80125ee:	d4e1      	bmi.n	80125b4 <_fflush_r+0xc>
 80125f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125f2:	f7fe f8c5 	bl	8010780 <__retarget_lock_release_recursive>
 80125f6:	e7dd      	b.n	80125b4 <_fflush_r+0xc>

080125f8 <__sccl>:
 80125f8:	b570      	push	{r4, r5, r6, lr}
 80125fa:	780b      	ldrb	r3, [r1, #0]
 80125fc:	4604      	mov	r4, r0
 80125fe:	2b5e      	cmp	r3, #94	@ 0x5e
 8012600:	bf0b      	itete	eq
 8012602:	784b      	ldrbeq	r3, [r1, #1]
 8012604:	1c4a      	addne	r2, r1, #1
 8012606:	1c8a      	addeq	r2, r1, #2
 8012608:	2100      	movne	r1, #0
 801260a:	bf08      	it	eq
 801260c:	2101      	moveq	r1, #1
 801260e:	3801      	subs	r0, #1
 8012610:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012614:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012618:	42a8      	cmp	r0, r5
 801261a:	d1fb      	bne.n	8012614 <__sccl+0x1c>
 801261c:	b90b      	cbnz	r3, 8012622 <__sccl+0x2a>
 801261e:	1e50      	subs	r0, r2, #1
 8012620:	bd70      	pop	{r4, r5, r6, pc}
 8012622:	f081 0101 	eor.w	r1, r1, #1
 8012626:	54e1      	strb	r1, [r4, r3]
 8012628:	4610      	mov	r0, r2
 801262a:	4602      	mov	r2, r0
 801262c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012630:	2d2d      	cmp	r5, #45	@ 0x2d
 8012632:	d005      	beq.n	8012640 <__sccl+0x48>
 8012634:	2d5d      	cmp	r5, #93	@ 0x5d
 8012636:	d016      	beq.n	8012666 <__sccl+0x6e>
 8012638:	2d00      	cmp	r5, #0
 801263a:	d0f1      	beq.n	8012620 <__sccl+0x28>
 801263c:	462b      	mov	r3, r5
 801263e:	e7f2      	b.n	8012626 <__sccl+0x2e>
 8012640:	7846      	ldrb	r6, [r0, #1]
 8012642:	2e5d      	cmp	r6, #93	@ 0x5d
 8012644:	d0fa      	beq.n	801263c <__sccl+0x44>
 8012646:	42b3      	cmp	r3, r6
 8012648:	dcf8      	bgt.n	801263c <__sccl+0x44>
 801264a:	3002      	adds	r0, #2
 801264c:	461a      	mov	r2, r3
 801264e:	3201      	adds	r2, #1
 8012650:	4296      	cmp	r6, r2
 8012652:	54a1      	strb	r1, [r4, r2]
 8012654:	dcfb      	bgt.n	801264e <__sccl+0x56>
 8012656:	1af2      	subs	r2, r6, r3
 8012658:	3a01      	subs	r2, #1
 801265a:	1c5d      	adds	r5, r3, #1
 801265c:	42b3      	cmp	r3, r6
 801265e:	bfa8      	it	ge
 8012660:	2200      	movge	r2, #0
 8012662:	18ab      	adds	r3, r5, r2
 8012664:	e7e1      	b.n	801262a <__sccl+0x32>
 8012666:	4610      	mov	r0, r2
 8012668:	e7da      	b.n	8012620 <__sccl+0x28>

0801266a <__submore>:
 801266a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801266e:	460c      	mov	r4, r1
 8012670:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012676:	4299      	cmp	r1, r3
 8012678:	d11d      	bne.n	80126b6 <__submore+0x4c>
 801267a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801267e:	f7fd f8e9 	bl	800f854 <_malloc_r>
 8012682:	b918      	cbnz	r0, 801268c <__submore+0x22>
 8012684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801268c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012690:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012692:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012696:	6360      	str	r0, [r4, #52]	@ 0x34
 8012698:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801269c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80126a0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80126a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80126a8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80126ac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80126b0:	6020      	str	r0, [r4, #0]
 80126b2:	2000      	movs	r0, #0
 80126b4:	e7e8      	b.n	8012688 <__submore+0x1e>
 80126b6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80126b8:	0077      	lsls	r7, r6, #1
 80126ba:	463a      	mov	r2, r7
 80126bc:	f7fd f95e 	bl	800f97c <_realloc_r>
 80126c0:	4605      	mov	r5, r0
 80126c2:	2800      	cmp	r0, #0
 80126c4:	d0de      	beq.n	8012684 <__submore+0x1a>
 80126c6:	eb00 0806 	add.w	r8, r0, r6
 80126ca:	4601      	mov	r1, r0
 80126cc:	4632      	mov	r2, r6
 80126ce:	4640      	mov	r0, r8
 80126d0:	f7fe f857 	bl	8010782 <memcpy>
 80126d4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80126d8:	f8c4 8000 	str.w	r8, [r4]
 80126dc:	e7e9      	b.n	80126b2 <__submore+0x48>

080126de <memmove>:
 80126de:	4288      	cmp	r0, r1
 80126e0:	b510      	push	{r4, lr}
 80126e2:	eb01 0402 	add.w	r4, r1, r2
 80126e6:	d902      	bls.n	80126ee <memmove+0x10>
 80126e8:	4284      	cmp	r4, r0
 80126ea:	4623      	mov	r3, r4
 80126ec:	d807      	bhi.n	80126fe <memmove+0x20>
 80126ee:	1e43      	subs	r3, r0, #1
 80126f0:	42a1      	cmp	r1, r4
 80126f2:	d008      	beq.n	8012706 <memmove+0x28>
 80126f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80126fc:	e7f8      	b.n	80126f0 <memmove+0x12>
 80126fe:	4402      	add	r2, r0
 8012700:	4601      	mov	r1, r0
 8012702:	428a      	cmp	r2, r1
 8012704:	d100      	bne.n	8012708 <memmove+0x2a>
 8012706:	bd10      	pop	{r4, pc}
 8012708:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801270c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012710:	e7f7      	b.n	8012702 <memmove+0x24>
	...

08012714 <__fpclassifyd>:
 8012714:	460b      	mov	r3, r1
 8012716:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 801271a:	b510      	push	{r4, lr}
 801271c:	d104      	bne.n	8012728 <__fpclassifyd+0x14>
 801271e:	2800      	cmp	r0, #0
 8012720:	bf0c      	ite	eq
 8012722:	2002      	moveq	r0, #2
 8012724:	2003      	movne	r0, #3
 8012726:	bd10      	pop	{r4, pc}
 8012728:	4a09      	ldr	r2, [pc, #36]	@ (8012750 <__fpclassifyd+0x3c>)
 801272a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 801272e:	4294      	cmp	r4, r2
 8012730:	d908      	bls.n	8012744 <__fpclassifyd+0x30>
 8012732:	4a08      	ldr	r2, [pc, #32]	@ (8012754 <__fpclassifyd+0x40>)
 8012734:	4213      	tst	r3, r2
 8012736:	d007      	beq.n	8012748 <__fpclassifyd+0x34>
 8012738:	4291      	cmp	r1, r2
 801273a:	d107      	bne.n	801274c <__fpclassifyd+0x38>
 801273c:	fab0 f080 	clz	r0, r0
 8012740:	0940      	lsrs	r0, r0, #5
 8012742:	e7f0      	b.n	8012726 <__fpclassifyd+0x12>
 8012744:	2004      	movs	r0, #4
 8012746:	e7ee      	b.n	8012726 <__fpclassifyd+0x12>
 8012748:	2003      	movs	r0, #3
 801274a:	e7ec      	b.n	8012726 <__fpclassifyd+0x12>
 801274c:	2000      	movs	r0, #0
 801274e:	e7ea      	b.n	8012726 <__fpclassifyd+0x12>
 8012750:	7fdfffff 	.word	0x7fdfffff
 8012754:	7ff00000 	.word	0x7ff00000

08012758 <__assert_func>:
 8012758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801275a:	4614      	mov	r4, r2
 801275c:	461a      	mov	r2, r3
 801275e:	4b09      	ldr	r3, [pc, #36]	@ (8012784 <__assert_func+0x2c>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4605      	mov	r5, r0
 8012764:	68d8      	ldr	r0, [r3, #12]
 8012766:	b14c      	cbz	r4, 801277c <__assert_func+0x24>
 8012768:	4b07      	ldr	r3, [pc, #28]	@ (8012788 <__assert_func+0x30>)
 801276a:	9100      	str	r1, [sp, #0]
 801276c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012770:	4906      	ldr	r1, [pc, #24]	@ (801278c <__assert_func+0x34>)
 8012772:	462b      	mov	r3, r5
 8012774:	f000 f91a 	bl	80129ac <fiprintf>
 8012778:	f000 f92a 	bl	80129d0 <abort>
 801277c:	4b04      	ldr	r3, [pc, #16]	@ (8012790 <__assert_func+0x38>)
 801277e:	461c      	mov	r4, r3
 8012780:	e7f3      	b.n	801276a <__assert_func+0x12>
 8012782:	bf00      	nop
 8012784:	2000040c 	.word	0x2000040c
 8012788:	08013f22 	.word	0x08013f22
 801278c:	08013f2f 	.word	0x08013f2f
 8012790:	08013f5d 	.word	0x08013f5d

08012794 <__ascii_mbtowc>:
 8012794:	b082      	sub	sp, #8
 8012796:	b901      	cbnz	r1, 801279a <__ascii_mbtowc+0x6>
 8012798:	a901      	add	r1, sp, #4
 801279a:	b142      	cbz	r2, 80127ae <__ascii_mbtowc+0x1a>
 801279c:	b14b      	cbz	r3, 80127b2 <__ascii_mbtowc+0x1e>
 801279e:	7813      	ldrb	r3, [r2, #0]
 80127a0:	600b      	str	r3, [r1, #0]
 80127a2:	7812      	ldrb	r2, [r2, #0]
 80127a4:	1e10      	subs	r0, r2, #0
 80127a6:	bf18      	it	ne
 80127a8:	2001      	movne	r0, #1
 80127aa:	b002      	add	sp, #8
 80127ac:	4770      	bx	lr
 80127ae:	4610      	mov	r0, r2
 80127b0:	e7fb      	b.n	80127aa <__ascii_mbtowc+0x16>
 80127b2:	f06f 0001 	mvn.w	r0, #1
 80127b6:	e7f8      	b.n	80127aa <__ascii_mbtowc+0x16>

080127b8 <_strtol_l.isra.0>:
 80127b8:	2b24      	cmp	r3, #36	@ 0x24
 80127ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127be:	4686      	mov	lr, r0
 80127c0:	4690      	mov	r8, r2
 80127c2:	d801      	bhi.n	80127c8 <_strtol_l.isra.0+0x10>
 80127c4:	2b01      	cmp	r3, #1
 80127c6:	d106      	bne.n	80127d6 <_strtol_l.isra.0+0x1e>
 80127c8:	f7fd ffae 	bl	8010728 <__errno>
 80127cc:	2316      	movs	r3, #22
 80127ce:	6003      	str	r3, [r0, #0]
 80127d0:	2000      	movs	r0, #0
 80127d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127d6:	4834      	ldr	r0, [pc, #208]	@ (80128a8 <_strtol_l.isra.0+0xf0>)
 80127d8:	460d      	mov	r5, r1
 80127da:	462a      	mov	r2, r5
 80127dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80127e0:	5d06      	ldrb	r6, [r0, r4]
 80127e2:	f016 0608 	ands.w	r6, r6, #8
 80127e6:	d1f8      	bne.n	80127da <_strtol_l.isra.0+0x22>
 80127e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80127ea:	d110      	bne.n	801280e <_strtol_l.isra.0+0x56>
 80127ec:	782c      	ldrb	r4, [r5, #0]
 80127ee:	2601      	movs	r6, #1
 80127f0:	1c95      	adds	r5, r2, #2
 80127f2:	f033 0210 	bics.w	r2, r3, #16
 80127f6:	d115      	bne.n	8012824 <_strtol_l.isra.0+0x6c>
 80127f8:	2c30      	cmp	r4, #48	@ 0x30
 80127fa:	d10d      	bne.n	8012818 <_strtol_l.isra.0+0x60>
 80127fc:	782a      	ldrb	r2, [r5, #0]
 80127fe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012802:	2a58      	cmp	r2, #88	@ 0x58
 8012804:	d108      	bne.n	8012818 <_strtol_l.isra.0+0x60>
 8012806:	786c      	ldrb	r4, [r5, #1]
 8012808:	3502      	adds	r5, #2
 801280a:	2310      	movs	r3, #16
 801280c:	e00a      	b.n	8012824 <_strtol_l.isra.0+0x6c>
 801280e:	2c2b      	cmp	r4, #43	@ 0x2b
 8012810:	bf04      	itt	eq
 8012812:	782c      	ldrbeq	r4, [r5, #0]
 8012814:	1c95      	addeq	r5, r2, #2
 8012816:	e7ec      	b.n	80127f2 <_strtol_l.isra.0+0x3a>
 8012818:	2b00      	cmp	r3, #0
 801281a:	d1f6      	bne.n	801280a <_strtol_l.isra.0+0x52>
 801281c:	2c30      	cmp	r4, #48	@ 0x30
 801281e:	bf14      	ite	ne
 8012820:	230a      	movne	r3, #10
 8012822:	2308      	moveq	r3, #8
 8012824:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012828:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801282c:	2200      	movs	r2, #0
 801282e:	fbbc f9f3 	udiv	r9, ip, r3
 8012832:	4610      	mov	r0, r2
 8012834:	fb03 ca19 	mls	sl, r3, r9, ip
 8012838:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801283c:	2f09      	cmp	r7, #9
 801283e:	d80f      	bhi.n	8012860 <_strtol_l.isra.0+0xa8>
 8012840:	463c      	mov	r4, r7
 8012842:	42a3      	cmp	r3, r4
 8012844:	dd1b      	ble.n	801287e <_strtol_l.isra.0+0xc6>
 8012846:	1c57      	adds	r7, r2, #1
 8012848:	d007      	beq.n	801285a <_strtol_l.isra.0+0xa2>
 801284a:	4581      	cmp	r9, r0
 801284c:	d314      	bcc.n	8012878 <_strtol_l.isra.0+0xc0>
 801284e:	d101      	bne.n	8012854 <_strtol_l.isra.0+0x9c>
 8012850:	45a2      	cmp	sl, r4
 8012852:	db11      	blt.n	8012878 <_strtol_l.isra.0+0xc0>
 8012854:	fb00 4003 	mla	r0, r0, r3, r4
 8012858:	2201      	movs	r2, #1
 801285a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801285e:	e7eb      	b.n	8012838 <_strtol_l.isra.0+0x80>
 8012860:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012864:	2f19      	cmp	r7, #25
 8012866:	d801      	bhi.n	801286c <_strtol_l.isra.0+0xb4>
 8012868:	3c37      	subs	r4, #55	@ 0x37
 801286a:	e7ea      	b.n	8012842 <_strtol_l.isra.0+0x8a>
 801286c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012870:	2f19      	cmp	r7, #25
 8012872:	d804      	bhi.n	801287e <_strtol_l.isra.0+0xc6>
 8012874:	3c57      	subs	r4, #87	@ 0x57
 8012876:	e7e4      	b.n	8012842 <_strtol_l.isra.0+0x8a>
 8012878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801287c:	e7ed      	b.n	801285a <_strtol_l.isra.0+0xa2>
 801287e:	1c53      	adds	r3, r2, #1
 8012880:	d108      	bne.n	8012894 <_strtol_l.isra.0+0xdc>
 8012882:	2322      	movs	r3, #34	@ 0x22
 8012884:	f8ce 3000 	str.w	r3, [lr]
 8012888:	4660      	mov	r0, ip
 801288a:	f1b8 0f00 	cmp.w	r8, #0
 801288e:	d0a0      	beq.n	80127d2 <_strtol_l.isra.0+0x1a>
 8012890:	1e69      	subs	r1, r5, #1
 8012892:	e006      	b.n	80128a2 <_strtol_l.isra.0+0xea>
 8012894:	b106      	cbz	r6, 8012898 <_strtol_l.isra.0+0xe0>
 8012896:	4240      	negs	r0, r0
 8012898:	f1b8 0f00 	cmp.w	r8, #0
 801289c:	d099      	beq.n	80127d2 <_strtol_l.isra.0+0x1a>
 801289e:	2a00      	cmp	r2, #0
 80128a0:	d1f6      	bne.n	8012890 <_strtol_l.isra.0+0xd8>
 80128a2:	f8c8 1000 	str.w	r1, [r8]
 80128a6:	e794      	b.n	80127d2 <_strtol_l.isra.0+0x1a>
 80128a8:	08014061 	.word	0x08014061

080128ac <_strtol_r>:
 80128ac:	f7ff bf84 	b.w	80127b8 <_strtol_l.isra.0>

080128b0 <_strtoul_l.isra.0>:
 80128b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128b4:	4e34      	ldr	r6, [pc, #208]	@ (8012988 <_strtoul_l.isra.0+0xd8>)
 80128b6:	4686      	mov	lr, r0
 80128b8:	460d      	mov	r5, r1
 80128ba:	4628      	mov	r0, r5
 80128bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128c0:	5d37      	ldrb	r7, [r6, r4]
 80128c2:	f017 0708 	ands.w	r7, r7, #8
 80128c6:	d1f8      	bne.n	80128ba <_strtoul_l.isra.0+0xa>
 80128c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80128ca:	d110      	bne.n	80128ee <_strtoul_l.isra.0+0x3e>
 80128cc:	782c      	ldrb	r4, [r5, #0]
 80128ce:	2701      	movs	r7, #1
 80128d0:	1c85      	adds	r5, r0, #2
 80128d2:	f033 0010 	bics.w	r0, r3, #16
 80128d6:	d115      	bne.n	8012904 <_strtoul_l.isra.0+0x54>
 80128d8:	2c30      	cmp	r4, #48	@ 0x30
 80128da:	d10d      	bne.n	80128f8 <_strtoul_l.isra.0+0x48>
 80128dc:	7828      	ldrb	r0, [r5, #0]
 80128de:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80128e2:	2858      	cmp	r0, #88	@ 0x58
 80128e4:	d108      	bne.n	80128f8 <_strtoul_l.isra.0+0x48>
 80128e6:	786c      	ldrb	r4, [r5, #1]
 80128e8:	3502      	adds	r5, #2
 80128ea:	2310      	movs	r3, #16
 80128ec:	e00a      	b.n	8012904 <_strtoul_l.isra.0+0x54>
 80128ee:	2c2b      	cmp	r4, #43	@ 0x2b
 80128f0:	bf04      	itt	eq
 80128f2:	782c      	ldrbeq	r4, [r5, #0]
 80128f4:	1c85      	addeq	r5, r0, #2
 80128f6:	e7ec      	b.n	80128d2 <_strtoul_l.isra.0+0x22>
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d1f6      	bne.n	80128ea <_strtoul_l.isra.0+0x3a>
 80128fc:	2c30      	cmp	r4, #48	@ 0x30
 80128fe:	bf14      	ite	ne
 8012900:	230a      	movne	r3, #10
 8012902:	2308      	moveq	r3, #8
 8012904:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012908:	2600      	movs	r6, #0
 801290a:	fbb8 f8f3 	udiv	r8, r8, r3
 801290e:	fb03 f908 	mul.w	r9, r3, r8
 8012912:	ea6f 0909 	mvn.w	r9, r9
 8012916:	4630      	mov	r0, r6
 8012918:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801291c:	f1bc 0f09 	cmp.w	ip, #9
 8012920:	d810      	bhi.n	8012944 <_strtoul_l.isra.0+0x94>
 8012922:	4664      	mov	r4, ip
 8012924:	42a3      	cmp	r3, r4
 8012926:	dd1e      	ble.n	8012966 <_strtoul_l.isra.0+0xb6>
 8012928:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801292c:	d007      	beq.n	801293e <_strtoul_l.isra.0+0x8e>
 801292e:	4580      	cmp	r8, r0
 8012930:	d316      	bcc.n	8012960 <_strtoul_l.isra.0+0xb0>
 8012932:	d101      	bne.n	8012938 <_strtoul_l.isra.0+0x88>
 8012934:	45a1      	cmp	r9, r4
 8012936:	db13      	blt.n	8012960 <_strtoul_l.isra.0+0xb0>
 8012938:	fb00 4003 	mla	r0, r0, r3, r4
 801293c:	2601      	movs	r6, #1
 801293e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012942:	e7e9      	b.n	8012918 <_strtoul_l.isra.0+0x68>
 8012944:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012948:	f1bc 0f19 	cmp.w	ip, #25
 801294c:	d801      	bhi.n	8012952 <_strtoul_l.isra.0+0xa2>
 801294e:	3c37      	subs	r4, #55	@ 0x37
 8012950:	e7e8      	b.n	8012924 <_strtoul_l.isra.0+0x74>
 8012952:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012956:	f1bc 0f19 	cmp.w	ip, #25
 801295a:	d804      	bhi.n	8012966 <_strtoul_l.isra.0+0xb6>
 801295c:	3c57      	subs	r4, #87	@ 0x57
 801295e:	e7e1      	b.n	8012924 <_strtoul_l.isra.0+0x74>
 8012960:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8012964:	e7eb      	b.n	801293e <_strtoul_l.isra.0+0x8e>
 8012966:	1c73      	adds	r3, r6, #1
 8012968:	d106      	bne.n	8012978 <_strtoul_l.isra.0+0xc8>
 801296a:	2322      	movs	r3, #34	@ 0x22
 801296c:	f8ce 3000 	str.w	r3, [lr]
 8012970:	4630      	mov	r0, r6
 8012972:	b932      	cbnz	r2, 8012982 <_strtoul_l.isra.0+0xd2>
 8012974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012978:	b107      	cbz	r7, 801297c <_strtoul_l.isra.0+0xcc>
 801297a:	4240      	negs	r0, r0
 801297c:	2a00      	cmp	r2, #0
 801297e:	d0f9      	beq.n	8012974 <_strtoul_l.isra.0+0xc4>
 8012980:	b106      	cbz	r6, 8012984 <_strtoul_l.isra.0+0xd4>
 8012982:	1e69      	subs	r1, r5, #1
 8012984:	6011      	str	r1, [r2, #0]
 8012986:	e7f5      	b.n	8012974 <_strtoul_l.isra.0+0xc4>
 8012988:	08014061 	.word	0x08014061

0801298c <_strtoul_r>:
 801298c:	f7ff bf90 	b.w	80128b0 <_strtoul_l.isra.0>

08012990 <__ascii_wctomb>:
 8012990:	4603      	mov	r3, r0
 8012992:	4608      	mov	r0, r1
 8012994:	b141      	cbz	r1, 80129a8 <__ascii_wctomb+0x18>
 8012996:	2aff      	cmp	r2, #255	@ 0xff
 8012998:	d904      	bls.n	80129a4 <__ascii_wctomb+0x14>
 801299a:	228a      	movs	r2, #138	@ 0x8a
 801299c:	601a      	str	r2, [r3, #0]
 801299e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129a2:	4770      	bx	lr
 80129a4:	700a      	strb	r2, [r1, #0]
 80129a6:	2001      	movs	r0, #1
 80129a8:	4770      	bx	lr
	...

080129ac <fiprintf>:
 80129ac:	b40e      	push	{r1, r2, r3}
 80129ae:	b503      	push	{r0, r1, lr}
 80129b0:	4601      	mov	r1, r0
 80129b2:	ab03      	add	r3, sp, #12
 80129b4:	4805      	ldr	r0, [pc, #20]	@ (80129cc <fiprintf+0x20>)
 80129b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80129ba:	6800      	ldr	r0, [r0, #0]
 80129bc:	9301      	str	r3, [sp, #4]
 80129be:	f000 f837 	bl	8012a30 <_vfiprintf_r>
 80129c2:	b002      	add	sp, #8
 80129c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80129c8:	b003      	add	sp, #12
 80129ca:	4770      	bx	lr
 80129cc:	2000040c 	.word	0x2000040c

080129d0 <abort>:
 80129d0:	b508      	push	{r3, lr}
 80129d2:	2006      	movs	r0, #6
 80129d4:	f000 fa00 	bl	8012dd8 <raise>
 80129d8:	2001      	movs	r0, #1
 80129da:	f7fc fc21 	bl	800f220 <_exit>

080129de <__sfputc_r>:
 80129de:	6893      	ldr	r3, [r2, #8]
 80129e0:	3b01      	subs	r3, #1
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	b410      	push	{r4}
 80129e6:	6093      	str	r3, [r2, #8]
 80129e8:	da08      	bge.n	80129fc <__sfputc_r+0x1e>
 80129ea:	6994      	ldr	r4, [r2, #24]
 80129ec:	42a3      	cmp	r3, r4
 80129ee:	db01      	blt.n	80129f4 <__sfputc_r+0x16>
 80129f0:	290a      	cmp	r1, #10
 80129f2:	d103      	bne.n	80129fc <__sfputc_r+0x1e>
 80129f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129f8:	f000 b932 	b.w	8012c60 <__swbuf_r>
 80129fc:	6813      	ldr	r3, [r2, #0]
 80129fe:	1c58      	adds	r0, r3, #1
 8012a00:	6010      	str	r0, [r2, #0]
 8012a02:	7019      	strb	r1, [r3, #0]
 8012a04:	4608      	mov	r0, r1
 8012a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a0a:	4770      	bx	lr

08012a0c <__sfputs_r>:
 8012a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a0e:	4606      	mov	r6, r0
 8012a10:	460f      	mov	r7, r1
 8012a12:	4614      	mov	r4, r2
 8012a14:	18d5      	adds	r5, r2, r3
 8012a16:	42ac      	cmp	r4, r5
 8012a18:	d101      	bne.n	8012a1e <__sfputs_r+0x12>
 8012a1a:	2000      	movs	r0, #0
 8012a1c:	e007      	b.n	8012a2e <__sfputs_r+0x22>
 8012a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a22:	463a      	mov	r2, r7
 8012a24:	4630      	mov	r0, r6
 8012a26:	f7ff ffda 	bl	80129de <__sfputc_r>
 8012a2a:	1c43      	adds	r3, r0, #1
 8012a2c:	d1f3      	bne.n	8012a16 <__sfputs_r+0xa>
 8012a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a30 <_vfiprintf_r>:
 8012a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a34:	460d      	mov	r5, r1
 8012a36:	b09d      	sub	sp, #116	@ 0x74
 8012a38:	4614      	mov	r4, r2
 8012a3a:	4698      	mov	r8, r3
 8012a3c:	4606      	mov	r6, r0
 8012a3e:	b118      	cbz	r0, 8012a48 <_vfiprintf_r+0x18>
 8012a40:	6a03      	ldr	r3, [r0, #32]
 8012a42:	b90b      	cbnz	r3, 8012a48 <_vfiprintf_r+0x18>
 8012a44:	f7fd fc8e 	bl	8010364 <__sinit>
 8012a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a4a:	07d9      	lsls	r1, r3, #31
 8012a4c:	d405      	bmi.n	8012a5a <_vfiprintf_r+0x2a>
 8012a4e:	89ab      	ldrh	r3, [r5, #12]
 8012a50:	059a      	lsls	r2, r3, #22
 8012a52:	d402      	bmi.n	8012a5a <_vfiprintf_r+0x2a>
 8012a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a56:	f7fd fe92 	bl	801077e <__retarget_lock_acquire_recursive>
 8012a5a:	89ab      	ldrh	r3, [r5, #12]
 8012a5c:	071b      	lsls	r3, r3, #28
 8012a5e:	d501      	bpl.n	8012a64 <_vfiprintf_r+0x34>
 8012a60:	692b      	ldr	r3, [r5, #16]
 8012a62:	b99b      	cbnz	r3, 8012a8c <_vfiprintf_r+0x5c>
 8012a64:	4629      	mov	r1, r5
 8012a66:	4630      	mov	r0, r6
 8012a68:	f000 f938 	bl	8012cdc <__swsetup_r>
 8012a6c:	b170      	cbz	r0, 8012a8c <_vfiprintf_r+0x5c>
 8012a6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a70:	07dc      	lsls	r4, r3, #31
 8012a72:	d504      	bpl.n	8012a7e <_vfiprintf_r+0x4e>
 8012a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a78:	b01d      	add	sp, #116	@ 0x74
 8012a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a7e:	89ab      	ldrh	r3, [r5, #12]
 8012a80:	0598      	lsls	r0, r3, #22
 8012a82:	d4f7      	bmi.n	8012a74 <_vfiprintf_r+0x44>
 8012a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a86:	f7fd fe7b 	bl	8010780 <__retarget_lock_release_recursive>
 8012a8a:	e7f3      	b.n	8012a74 <_vfiprintf_r+0x44>
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a90:	2320      	movs	r3, #32
 8012a92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a9a:	2330      	movs	r3, #48	@ 0x30
 8012a9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012c4c <_vfiprintf_r+0x21c>
 8012aa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012aa4:	f04f 0901 	mov.w	r9, #1
 8012aa8:	4623      	mov	r3, r4
 8012aaa:	469a      	mov	sl, r3
 8012aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ab0:	b10a      	cbz	r2, 8012ab6 <_vfiprintf_r+0x86>
 8012ab2:	2a25      	cmp	r2, #37	@ 0x25
 8012ab4:	d1f9      	bne.n	8012aaa <_vfiprintf_r+0x7a>
 8012ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8012aba:	d00b      	beq.n	8012ad4 <_vfiprintf_r+0xa4>
 8012abc:	465b      	mov	r3, fp
 8012abe:	4622      	mov	r2, r4
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f7ff ffa2 	bl	8012a0c <__sfputs_r>
 8012ac8:	3001      	adds	r0, #1
 8012aca:	f000 80a7 	beq.w	8012c1c <_vfiprintf_r+0x1ec>
 8012ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ad0:	445a      	add	r2, fp
 8012ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 809f 	beq.w	8012c1c <_vfiprintf_r+0x1ec>
 8012ade:	2300      	movs	r3, #0
 8012ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ae8:	f10a 0a01 	add.w	sl, sl, #1
 8012aec:	9304      	str	r3, [sp, #16]
 8012aee:	9307      	str	r3, [sp, #28]
 8012af0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012af4:	931a      	str	r3, [sp, #104]	@ 0x68
 8012af6:	4654      	mov	r4, sl
 8012af8:	2205      	movs	r2, #5
 8012afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012afe:	4853      	ldr	r0, [pc, #332]	@ (8012c4c <_vfiprintf_r+0x21c>)
 8012b00:	f7ed fbae 	bl	8000260 <memchr>
 8012b04:	9a04      	ldr	r2, [sp, #16]
 8012b06:	b9d8      	cbnz	r0, 8012b40 <_vfiprintf_r+0x110>
 8012b08:	06d1      	lsls	r1, r2, #27
 8012b0a:	bf44      	itt	mi
 8012b0c:	2320      	movmi	r3, #32
 8012b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b12:	0713      	lsls	r3, r2, #28
 8012b14:	bf44      	itt	mi
 8012b16:	232b      	movmi	r3, #43	@ 0x2b
 8012b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8012b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b22:	d015      	beq.n	8012b50 <_vfiprintf_r+0x120>
 8012b24:	9a07      	ldr	r2, [sp, #28]
 8012b26:	4654      	mov	r4, sl
 8012b28:	2000      	movs	r0, #0
 8012b2a:	f04f 0c0a 	mov.w	ip, #10
 8012b2e:	4621      	mov	r1, r4
 8012b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b34:	3b30      	subs	r3, #48	@ 0x30
 8012b36:	2b09      	cmp	r3, #9
 8012b38:	d94b      	bls.n	8012bd2 <_vfiprintf_r+0x1a2>
 8012b3a:	b1b0      	cbz	r0, 8012b6a <_vfiprintf_r+0x13a>
 8012b3c:	9207      	str	r2, [sp, #28]
 8012b3e:	e014      	b.n	8012b6a <_vfiprintf_r+0x13a>
 8012b40:	eba0 0308 	sub.w	r3, r0, r8
 8012b44:	fa09 f303 	lsl.w	r3, r9, r3
 8012b48:	4313      	orrs	r3, r2
 8012b4a:	9304      	str	r3, [sp, #16]
 8012b4c:	46a2      	mov	sl, r4
 8012b4e:	e7d2      	b.n	8012af6 <_vfiprintf_r+0xc6>
 8012b50:	9b03      	ldr	r3, [sp, #12]
 8012b52:	1d19      	adds	r1, r3, #4
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	9103      	str	r1, [sp, #12]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	bfbb      	ittet	lt
 8012b5c:	425b      	neglt	r3, r3
 8012b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8012b62:	9307      	strge	r3, [sp, #28]
 8012b64:	9307      	strlt	r3, [sp, #28]
 8012b66:	bfb8      	it	lt
 8012b68:	9204      	strlt	r2, [sp, #16]
 8012b6a:	7823      	ldrb	r3, [r4, #0]
 8012b6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b6e:	d10a      	bne.n	8012b86 <_vfiprintf_r+0x156>
 8012b70:	7863      	ldrb	r3, [r4, #1]
 8012b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b74:	d132      	bne.n	8012bdc <_vfiprintf_r+0x1ac>
 8012b76:	9b03      	ldr	r3, [sp, #12]
 8012b78:	1d1a      	adds	r2, r3, #4
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	9203      	str	r2, [sp, #12]
 8012b7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012b82:	3402      	adds	r4, #2
 8012b84:	9305      	str	r3, [sp, #20]
 8012b86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012c5c <_vfiprintf_r+0x22c>
 8012b8a:	7821      	ldrb	r1, [r4, #0]
 8012b8c:	2203      	movs	r2, #3
 8012b8e:	4650      	mov	r0, sl
 8012b90:	f7ed fb66 	bl	8000260 <memchr>
 8012b94:	b138      	cbz	r0, 8012ba6 <_vfiprintf_r+0x176>
 8012b96:	9b04      	ldr	r3, [sp, #16]
 8012b98:	eba0 000a 	sub.w	r0, r0, sl
 8012b9c:	2240      	movs	r2, #64	@ 0x40
 8012b9e:	4082      	lsls	r2, r0
 8012ba0:	4313      	orrs	r3, r2
 8012ba2:	3401      	adds	r4, #1
 8012ba4:	9304      	str	r3, [sp, #16]
 8012ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012baa:	4829      	ldr	r0, [pc, #164]	@ (8012c50 <_vfiprintf_r+0x220>)
 8012bac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012bb0:	2206      	movs	r2, #6
 8012bb2:	f7ed fb55 	bl	8000260 <memchr>
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	d03f      	beq.n	8012c3a <_vfiprintf_r+0x20a>
 8012bba:	4b26      	ldr	r3, [pc, #152]	@ (8012c54 <_vfiprintf_r+0x224>)
 8012bbc:	bb1b      	cbnz	r3, 8012c06 <_vfiprintf_r+0x1d6>
 8012bbe:	9b03      	ldr	r3, [sp, #12]
 8012bc0:	3307      	adds	r3, #7
 8012bc2:	f023 0307 	bic.w	r3, r3, #7
 8012bc6:	3308      	adds	r3, #8
 8012bc8:	9303      	str	r3, [sp, #12]
 8012bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bcc:	443b      	add	r3, r7
 8012bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bd0:	e76a      	b.n	8012aa8 <_vfiprintf_r+0x78>
 8012bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8012bd6:	460c      	mov	r4, r1
 8012bd8:	2001      	movs	r0, #1
 8012bda:	e7a8      	b.n	8012b2e <_vfiprintf_r+0xfe>
 8012bdc:	2300      	movs	r3, #0
 8012bde:	3401      	adds	r4, #1
 8012be0:	9305      	str	r3, [sp, #20]
 8012be2:	4619      	mov	r1, r3
 8012be4:	f04f 0c0a 	mov.w	ip, #10
 8012be8:	4620      	mov	r0, r4
 8012bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bee:	3a30      	subs	r2, #48	@ 0x30
 8012bf0:	2a09      	cmp	r2, #9
 8012bf2:	d903      	bls.n	8012bfc <_vfiprintf_r+0x1cc>
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d0c6      	beq.n	8012b86 <_vfiprintf_r+0x156>
 8012bf8:	9105      	str	r1, [sp, #20]
 8012bfa:	e7c4      	b.n	8012b86 <_vfiprintf_r+0x156>
 8012bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c00:	4604      	mov	r4, r0
 8012c02:	2301      	movs	r3, #1
 8012c04:	e7f0      	b.n	8012be8 <_vfiprintf_r+0x1b8>
 8012c06:	ab03      	add	r3, sp, #12
 8012c08:	9300      	str	r3, [sp, #0]
 8012c0a:	462a      	mov	r2, r5
 8012c0c:	4b12      	ldr	r3, [pc, #72]	@ (8012c58 <_vfiprintf_r+0x228>)
 8012c0e:	a904      	add	r1, sp, #16
 8012c10:	4630      	mov	r0, r6
 8012c12:	f7fc ff71 	bl	800faf8 <_printf_float>
 8012c16:	4607      	mov	r7, r0
 8012c18:	1c78      	adds	r0, r7, #1
 8012c1a:	d1d6      	bne.n	8012bca <_vfiprintf_r+0x19a>
 8012c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c1e:	07d9      	lsls	r1, r3, #31
 8012c20:	d405      	bmi.n	8012c2e <_vfiprintf_r+0x1fe>
 8012c22:	89ab      	ldrh	r3, [r5, #12]
 8012c24:	059a      	lsls	r2, r3, #22
 8012c26:	d402      	bmi.n	8012c2e <_vfiprintf_r+0x1fe>
 8012c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c2a:	f7fd fda9 	bl	8010780 <__retarget_lock_release_recursive>
 8012c2e:	89ab      	ldrh	r3, [r5, #12]
 8012c30:	065b      	lsls	r3, r3, #25
 8012c32:	f53f af1f 	bmi.w	8012a74 <_vfiprintf_r+0x44>
 8012c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c38:	e71e      	b.n	8012a78 <_vfiprintf_r+0x48>
 8012c3a:	ab03      	add	r3, sp, #12
 8012c3c:	9300      	str	r3, [sp, #0]
 8012c3e:	462a      	mov	r2, r5
 8012c40:	4b05      	ldr	r3, [pc, #20]	@ (8012c58 <_vfiprintf_r+0x228>)
 8012c42:	a904      	add	r1, sp, #16
 8012c44:	4630      	mov	r0, r6
 8012c46:	f7fd f9e3 	bl	8010010 <_printf_i>
 8012c4a:	e7e4      	b.n	8012c16 <_vfiprintf_r+0x1e6>
 8012c4c:	08013eec 	.word	0x08013eec
 8012c50:	08013ef6 	.word	0x08013ef6
 8012c54:	0800faf9 	.word	0x0800faf9
 8012c58:	08012a0d 	.word	0x08012a0d
 8012c5c:	08013ef2 	.word	0x08013ef2

08012c60 <__swbuf_r>:
 8012c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c62:	460e      	mov	r6, r1
 8012c64:	4614      	mov	r4, r2
 8012c66:	4605      	mov	r5, r0
 8012c68:	b118      	cbz	r0, 8012c72 <__swbuf_r+0x12>
 8012c6a:	6a03      	ldr	r3, [r0, #32]
 8012c6c:	b90b      	cbnz	r3, 8012c72 <__swbuf_r+0x12>
 8012c6e:	f7fd fb79 	bl	8010364 <__sinit>
 8012c72:	69a3      	ldr	r3, [r4, #24]
 8012c74:	60a3      	str	r3, [r4, #8]
 8012c76:	89a3      	ldrh	r3, [r4, #12]
 8012c78:	071a      	lsls	r2, r3, #28
 8012c7a:	d501      	bpl.n	8012c80 <__swbuf_r+0x20>
 8012c7c:	6923      	ldr	r3, [r4, #16]
 8012c7e:	b943      	cbnz	r3, 8012c92 <__swbuf_r+0x32>
 8012c80:	4621      	mov	r1, r4
 8012c82:	4628      	mov	r0, r5
 8012c84:	f000 f82a 	bl	8012cdc <__swsetup_r>
 8012c88:	b118      	cbz	r0, 8012c92 <__swbuf_r+0x32>
 8012c8a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012c8e:	4638      	mov	r0, r7
 8012c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c92:	6823      	ldr	r3, [r4, #0]
 8012c94:	6922      	ldr	r2, [r4, #16]
 8012c96:	1a98      	subs	r0, r3, r2
 8012c98:	6963      	ldr	r3, [r4, #20]
 8012c9a:	b2f6      	uxtb	r6, r6
 8012c9c:	4283      	cmp	r3, r0
 8012c9e:	4637      	mov	r7, r6
 8012ca0:	dc05      	bgt.n	8012cae <__swbuf_r+0x4e>
 8012ca2:	4621      	mov	r1, r4
 8012ca4:	4628      	mov	r0, r5
 8012ca6:	f7ff fc7f 	bl	80125a8 <_fflush_r>
 8012caa:	2800      	cmp	r0, #0
 8012cac:	d1ed      	bne.n	8012c8a <__swbuf_r+0x2a>
 8012cae:	68a3      	ldr	r3, [r4, #8]
 8012cb0:	3b01      	subs	r3, #1
 8012cb2:	60a3      	str	r3, [r4, #8]
 8012cb4:	6823      	ldr	r3, [r4, #0]
 8012cb6:	1c5a      	adds	r2, r3, #1
 8012cb8:	6022      	str	r2, [r4, #0]
 8012cba:	701e      	strb	r6, [r3, #0]
 8012cbc:	6962      	ldr	r2, [r4, #20]
 8012cbe:	1c43      	adds	r3, r0, #1
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d004      	beq.n	8012cce <__swbuf_r+0x6e>
 8012cc4:	89a3      	ldrh	r3, [r4, #12]
 8012cc6:	07db      	lsls	r3, r3, #31
 8012cc8:	d5e1      	bpl.n	8012c8e <__swbuf_r+0x2e>
 8012cca:	2e0a      	cmp	r6, #10
 8012ccc:	d1df      	bne.n	8012c8e <__swbuf_r+0x2e>
 8012cce:	4621      	mov	r1, r4
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	f7ff fc69 	bl	80125a8 <_fflush_r>
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	d0d9      	beq.n	8012c8e <__swbuf_r+0x2e>
 8012cda:	e7d6      	b.n	8012c8a <__swbuf_r+0x2a>

08012cdc <__swsetup_r>:
 8012cdc:	b538      	push	{r3, r4, r5, lr}
 8012cde:	4b29      	ldr	r3, [pc, #164]	@ (8012d84 <__swsetup_r+0xa8>)
 8012ce0:	4605      	mov	r5, r0
 8012ce2:	6818      	ldr	r0, [r3, #0]
 8012ce4:	460c      	mov	r4, r1
 8012ce6:	b118      	cbz	r0, 8012cf0 <__swsetup_r+0x14>
 8012ce8:	6a03      	ldr	r3, [r0, #32]
 8012cea:	b90b      	cbnz	r3, 8012cf0 <__swsetup_r+0x14>
 8012cec:	f7fd fb3a 	bl	8010364 <__sinit>
 8012cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cf4:	0719      	lsls	r1, r3, #28
 8012cf6:	d422      	bmi.n	8012d3e <__swsetup_r+0x62>
 8012cf8:	06da      	lsls	r2, r3, #27
 8012cfa:	d407      	bmi.n	8012d0c <__swsetup_r+0x30>
 8012cfc:	2209      	movs	r2, #9
 8012cfe:	602a      	str	r2, [r5, #0]
 8012d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d04:	81a3      	strh	r3, [r4, #12]
 8012d06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d0a:	e033      	b.n	8012d74 <__swsetup_r+0x98>
 8012d0c:	0758      	lsls	r0, r3, #29
 8012d0e:	d512      	bpl.n	8012d36 <__swsetup_r+0x5a>
 8012d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012d12:	b141      	cbz	r1, 8012d26 <__swsetup_r+0x4a>
 8012d14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d18:	4299      	cmp	r1, r3
 8012d1a:	d002      	beq.n	8012d22 <__swsetup_r+0x46>
 8012d1c:	4628      	mov	r0, r5
 8012d1e:	f7fe fb7d 	bl	801141c <_free_r>
 8012d22:	2300      	movs	r3, #0
 8012d24:	6363      	str	r3, [r4, #52]	@ 0x34
 8012d26:	89a3      	ldrh	r3, [r4, #12]
 8012d28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012d2c:	81a3      	strh	r3, [r4, #12]
 8012d2e:	2300      	movs	r3, #0
 8012d30:	6063      	str	r3, [r4, #4]
 8012d32:	6923      	ldr	r3, [r4, #16]
 8012d34:	6023      	str	r3, [r4, #0]
 8012d36:	89a3      	ldrh	r3, [r4, #12]
 8012d38:	f043 0308 	orr.w	r3, r3, #8
 8012d3c:	81a3      	strh	r3, [r4, #12]
 8012d3e:	6923      	ldr	r3, [r4, #16]
 8012d40:	b94b      	cbnz	r3, 8012d56 <__swsetup_r+0x7a>
 8012d42:	89a3      	ldrh	r3, [r4, #12]
 8012d44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d4c:	d003      	beq.n	8012d56 <__swsetup_r+0x7a>
 8012d4e:	4621      	mov	r1, r4
 8012d50:	4628      	mov	r0, r5
 8012d52:	f000 f883 	bl	8012e5c <__smakebuf_r>
 8012d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d5a:	f013 0201 	ands.w	r2, r3, #1
 8012d5e:	d00a      	beq.n	8012d76 <__swsetup_r+0x9a>
 8012d60:	2200      	movs	r2, #0
 8012d62:	60a2      	str	r2, [r4, #8]
 8012d64:	6962      	ldr	r2, [r4, #20]
 8012d66:	4252      	negs	r2, r2
 8012d68:	61a2      	str	r2, [r4, #24]
 8012d6a:	6922      	ldr	r2, [r4, #16]
 8012d6c:	b942      	cbnz	r2, 8012d80 <__swsetup_r+0xa4>
 8012d6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012d72:	d1c5      	bne.n	8012d00 <__swsetup_r+0x24>
 8012d74:	bd38      	pop	{r3, r4, r5, pc}
 8012d76:	0799      	lsls	r1, r3, #30
 8012d78:	bf58      	it	pl
 8012d7a:	6962      	ldrpl	r2, [r4, #20]
 8012d7c:	60a2      	str	r2, [r4, #8]
 8012d7e:	e7f4      	b.n	8012d6a <__swsetup_r+0x8e>
 8012d80:	2000      	movs	r0, #0
 8012d82:	e7f7      	b.n	8012d74 <__swsetup_r+0x98>
 8012d84:	2000040c 	.word	0x2000040c

08012d88 <_raise_r>:
 8012d88:	291f      	cmp	r1, #31
 8012d8a:	b538      	push	{r3, r4, r5, lr}
 8012d8c:	4605      	mov	r5, r0
 8012d8e:	460c      	mov	r4, r1
 8012d90:	d904      	bls.n	8012d9c <_raise_r+0x14>
 8012d92:	2316      	movs	r3, #22
 8012d94:	6003      	str	r3, [r0, #0]
 8012d96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d9a:	bd38      	pop	{r3, r4, r5, pc}
 8012d9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012d9e:	b112      	cbz	r2, 8012da6 <_raise_r+0x1e>
 8012da0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012da4:	b94b      	cbnz	r3, 8012dba <_raise_r+0x32>
 8012da6:	4628      	mov	r0, r5
 8012da8:	f000 f830 	bl	8012e0c <_getpid_r>
 8012dac:	4622      	mov	r2, r4
 8012dae:	4601      	mov	r1, r0
 8012db0:	4628      	mov	r0, r5
 8012db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012db6:	f000 b817 	b.w	8012de8 <_kill_r>
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	d00a      	beq.n	8012dd4 <_raise_r+0x4c>
 8012dbe:	1c59      	adds	r1, r3, #1
 8012dc0:	d103      	bne.n	8012dca <_raise_r+0x42>
 8012dc2:	2316      	movs	r3, #22
 8012dc4:	6003      	str	r3, [r0, #0]
 8012dc6:	2001      	movs	r0, #1
 8012dc8:	e7e7      	b.n	8012d9a <_raise_r+0x12>
 8012dca:	2100      	movs	r1, #0
 8012dcc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	4798      	blx	r3
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	e7e0      	b.n	8012d9a <_raise_r+0x12>

08012dd8 <raise>:
 8012dd8:	4b02      	ldr	r3, [pc, #8]	@ (8012de4 <raise+0xc>)
 8012dda:	4601      	mov	r1, r0
 8012ddc:	6818      	ldr	r0, [r3, #0]
 8012dde:	f7ff bfd3 	b.w	8012d88 <_raise_r>
 8012de2:	bf00      	nop
 8012de4:	2000040c 	.word	0x2000040c

08012de8 <_kill_r>:
 8012de8:	b538      	push	{r3, r4, r5, lr}
 8012dea:	4d07      	ldr	r5, [pc, #28]	@ (8012e08 <_kill_r+0x20>)
 8012dec:	2300      	movs	r3, #0
 8012dee:	4604      	mov	r4, r0
 8012df0:	4608      	mov	r0, r1
 8012df2:	4611      	mov	r1, r2
 8012df4:	602b      	str	r3, [r5, #0]
 8012df6:	f7fc fa0b 	bl	800f210 <_kill>
 8012dfa:	1c43      	adds	r3, r0, #1
 8012dfc:	d102      	bne.n	8012e04 <_kill_r+0x1c>
 8012dfe:	682b      	ldr	r3, [r5, #0]
 8012e00:	b103      	cbz	r3, 8012e04 <_kill_r+0x1c>
 8012e02:	6023      	str	r3, [r4, #0]
 8012e04:	bd38      	pop	{r3, r4, r5, pc}
 8012e06:	bf00      	nop
 8012e08:	20017dcc 	.word	0x20017dcc

08012e0c <_getpid_r>:
 8012e0c:	f7fc b9fe 	b.w	800f20c <_getpid>

08012e10 <__swhatbuf_r>:
 8012e10:	b570      	push	{r4, r5, r6, lr}
 8012e12:	460c      	mov	r4, r1
 8012e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e18:	2900      	cmp	r1, #0
 8012e1a:	b096      	sub	sp, #88	@ 0x58
 8012e1c:	4615      	mov	r5, r2
 8012e1e:	461e      	mov	r6, r3
 8012e20:	da0d      	bge.n	8012e3e <__swhatbuf_r+0x2e>
 8012e22:	89a3      	ldrh	r3, [r4, #12]
 8012e24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012e28:	f04f 0100 	mov.w	r1, #0
 8012e2c:	bf14      	ite	ne
 8012e2e:	2340      	movne	r3, #64	@ 0x40
 8012e30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012e34:	2000      	movs	r0, #0
 8012e36:	6031      	str	r1, [r6, #0]
 8012e38:	602b      	str	r3, [r5, #0]
 8012e3a:	b016      	add	sp, #88	@ 0x58
 8012e3c:	bd70      	pop	{r4, r5, r6, pc}
 8012e3e:	466a      	mov	r2, sp
 8012e40:	f000 f848 	bl	8012ed4 <_fstat_r>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	dbec      	blt.n	8012e22 <__swhatbuf_r+0x12>
 8012e48:	9901      	ldr	r1, [sp, #4]
 8012e4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012e4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012e52:	4259      	negs	r1, r3
 8012e54:	4159      	adcs	r1, r3
 8012e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012e5a:	e7eb      	b.n	8012e34 <__swhatbuf_r+0x24>

08012e5c <__smakebuf_r>:
 8012e5c:	898b      	ldrh	r3, [r1, #12]
 8012e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e60:	079d      	lsls	r5, r3, #30
 8012e62:	4606      	mov	r6, r0
 8012e64:	460c      	mov	r4, r1
 8012e66:	d507      	bpl.n	8012e78 <__smakebuf_r+0x1c>
 8012e68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012e6c:	6023      	str	r3, [r4, #0]
 8012e6e:	6123      	str	r3, [r4, #16]
 8012e70:	2301      	movs	r3, #1
 8012e72:	6163      	str	r3, [r4, #20]
 8012e74:	b003      	add	sp, #12
 8012e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e78:	ab01      	add	r3, sp, #4
 8012e7a:	466a      	mov	r2, sp
 8012e7c:	f7ff ffc8 	bl	8012e10 <__swhatbuf_r>
 8012e80:	9f00      	ldr	r7, [sp, #0]
 8012e82:	4605      	mov	r5, r0
 8012e84:	4639      	mov	r1, r7
 8012e86:	4630      	mov	r0, r6
 8012e88:	f7fc fce4 	bl	800f854 <_malloc_r>
 8012e8c:	b948      	cbnz	r0, 8012ea2 <__smakebuf_r+0x46>
 8012e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e92:	059a      	lsls	r2, r3, #22
 8012e94:	d4ee      	bmi.n	8012e74 <__smakebuf_r+0x18>
 8012e96:	f023 0303 	bic.w	r3, r3, #3
 8012e9a:	f043 0302 	orr.w	r3, r3, #2
 8012e9e:	81a3      	strh	r3, [r4, #12]
 8012ea0:	e7e2      	b.n	8012e68 <__smakebuf_r+0xc>
 8012ea2:	89a3      	ldrh	r3, [r4, #12]
 8012ea4:	6020      	str	r0, [r4, #0]
 8012ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012eaa:	81a3      	strh	r3, [r4, #12]
 8012eac:	9b01      	ldr	r3, [sp, #4]
 8012eae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012eb2:	b15b      	cbz	r3, 8012ecc <__smakebuf_r+0x70>
 8012eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012eb8:	4630      	mov	r0, r6
 8012eba:	f000 f81d 	bl	8012ef8 <_isatty_r>
 8012ebe:	b128      	cbz	r0, 8012ecc <__smakebuf_r+0x70>
 8012ec0:	89a3      	ldrh	r3, [r4, #12]
 8012ec2:	f023 0303 	bic.w	r3, r3, #3
 8012ec6:	f043 0301 	orr.w	r3, r3, #1
 8012eca:	81a3      	strh	r3, [r4, #12]
 8012ecc:	89a3      	ldrh	r3, [r4, #12]
 8012ece:	431d      	orrs	r5, r3
 8012ed0:	81a5      	strh	r5, [r4, #12]
 8012ed2:	e7cf      	b.n	8012e74 <__smakebuf_r+0x18>

08012ed4 <_fstat_r>:
 8012ed4:	b538      	push	{r3, r4, r5, lr}
 8012ed6:	4d07      	ldr	r5, [pc, #28]	@ (8012ef4 <_fstat_r+0x20>)
 8012ed8:	2300      	movs	r3, #0
 8012eda:	4604      	mov	r4, r0
 8012edc:	4608      	mov	r0, r1
 8012ede:	4611      	mov	r1, r2
 8012ee0:	602b      	str	r3, [r5, #0]
 8012ee2:	f7fc f9c4 	bl	800f26e <_fstat>
 8012ee6:	1c43      	adds	r3, r0, #1
 8012ee8:	d102      	bne.n	8012ef0 <_fstat_r+0x1c>
 8012eea:	682b      	ldr	r3, [r5, #0]
 8012eec:	b103      	cbz	r3, 8012ef0 <_fstat_r+0x1c>
 8012eee:	6023      	str	r3, [r4, #0]
 8012ef0:	bd38      	pop	{r3, r4, r5, pc}
 8012ef2:	bf00      	nop
 8012ef4:	20017dcc 	.word	0x20017dcc

08012ef8 <_isatty_r>:
 8012ef8:	b538      	push	{r3, r4, r5, lr}
 8012efa:	4d06      	ldr	r5, [pc, #24]	@ (8012f14 <_isatty_r+0x1c>)
 8012efc:	2300      	movs	r3, #0
 8012efe:	4604      	mov	r4, r0
 8012f00:	4608      	mov	r0, r1
 8012f02:	602b      	str	r3, [r5, #0]
 8012f04:	f7fc f9b8 	bl	800f278 <_isatty>
 8012f08:	1c43      	adds	r3, r0, #1
 8012f0a:	d102      	bne.n	8012f12 <_isatty_r+0x1a>
 8012f0c:	682b      	ldr	r3, [r5, #0]
 8012f0e:	b103      	cbz	r3, 8012f12 <_isatty_r+0x1a>
 8012f10:	6023      	str	r3, [r4, #0]
 8012f12:	bd38      	pop	{r3, r4, r5, pc}
 8012f14:	20017dcc 	.word	0x20017dcc

08012f18 <_sbrk>:
 8012f18:	4a04      	ldr	r2, [pc, #16]	@ (8012f2c <_sbrk+0x14>)
 8012f1a:	6811      	ldr	r1, [r2, #0]
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	b909      	cbnz	r1, 8012f24 <_sbrk+0xc>
 8012f20:	4903      	ldr	r1, [pc, #12]	@ (8012f30 <_sbrk+0x18>)
 8012f22:	6011      	str	r1, [r2, #0]
 8012f24:	6810      	ldr	r0, [r2, #0]
 8012f26:	4403      	add	r3, r0
 8012f28:	6013      	str	r3, [r2, #0]
 8012f2a:	4770      	bx	lr
 8012f2c:	20017dd4 	.word	0x20017dd4
 8012f30:	20017dd8 	.word	0x20017dd8

08012f34 <_init>:
 8012f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f36:	bf00      	nop
 8012f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f3a:	bc08      	pop	{r3}
 8012f3c:	469e      	mov	lr, r3
 8012f3e:	4770      	bx	lr

08012f40 <_fini>:
 8012f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f42:	bf00      	nop
 8012f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f46:	bc08      	pop	{r3}
 8012f48:	469e      	mov	lr, r3
 8012f4a:	4770      	bx	lr
