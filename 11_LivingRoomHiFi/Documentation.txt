===============================================================================
Description:

Audio sources:
• 4 SPDIF inputs
• Onboard DAB radio
• Onboard FM radio
• Onboard AM radio
• Analogue (3.5 mm blue jack)
• Onboard ESP32 e.g. Bluetooth in and Internet in (via WiFi) (Requires the ESP32 to contain the appropriate firmware)

Audio ouputs:
• Speakers. Left and Right. Preferably 6R to 8R.
• HiFi headphone output (3.5 mm green jack)
• LoFi headphone output (3.5 mm green jack)
• On board ESP32 e.g. Bluetooth (SBC codec) (Requires the ESP32 to contain the appropriate firmware)

Power supply requirements:
• Connector marked "5V": 5V. Typically obtained from the high voltage supply via a DC to DC buck converter.
• Connector marked "12V": 12V to 24V. Ideally 19V for 6R speakers and 24 V for 8R speakers.

Suggested speakers:
• Wharfedale 220 (8 ohm nominal impedance).
===============================================================================
STM32 firmware:
• Tool: STM32CubeIDE 1.19.0
• Cube library: ~STM32Cube FW_F7 V1.17.4 (See *.ioc file for actual version).
• Programmer: STLink connected to JP5 of UAS PCB.
• Overview:
   • Project created in CubeMX 5.0.0.
   • Uses RTOS.
      • Tasks / semaphores etc created in CubeMX.
• Debugging:
   • Hard faults:
      • Red LED lights.
      • Use hard fault view in TrueStudio Debug perspective to debug.
===============================================================================
Bluetooth output:
• Bluetooth device: Left-hand ESP32. [13/9/2019: Change this to RH so that WiFI ESP32 is near WiFi access point in living room]
• Interface: GenSPI. This is used for control purposes and for sending I2S audio to the ESP32.
• ESP32 software: C:\JSB\Cloud\Spaceless\PJB_Radio_ESP32\05_BluetoothSource
• ESP32 programming and monitoring:
   • Protocol: RS232 (serial)
   • Baud rate: 921600
   • Board connector: JP1
   • Interface: FT4232 (Quad serial etc) Port C
   • COM port: COM8
      • This is set using "make menuconfig" but best to set connected com port to this instead of changing software.
• Setup:
   • Windows 7
   • Msys command prompt at firmware folder.
• Normal activities:
    • Build firmware: make -j all
    • Program firmware: make flash
    • Monitor: make monitor
• Debugging:
   • Monitor serial output.
   • This reports such things as the state of the buffer that connects the SPI data to the Bluetooth stack.
   • Can connect port A of FT4232 to JP2 to do JTAG debugging. See administrator KB for more information.
===============================================================================
SPDIF input:

SPDIF0:
• STM32 pin: PD7
• Use in JSB firmware: "Humax"

SPDIF1:
• STM32 pin: PD8
• Use in JSB firmware: "DVD/HDD"

SPDIF2:
• STM32 pin: PC4
• Use in JSB firmware: "Google Chromecast Audio"

SPDIF3:
• STM32 pin: PC5
• Use in JSB firmware: "Computer"

===
JSB office UAS:

SPDIF receiver:
• White: STM32 pin 75 = VDD(3V3)
• Black: STM32 pin 74 = VSS(0V)
• Yellow: STM32 pin 33 = STM32.PC5 [SPDIF3 = "Computer" on input selection menu]
===============================================================================
Cube library issues and fixes:
=====
Date: 15/11/2019
Symptom: SPDIF resampler does not synchronize.
Cause: PLL configuration bug in file stm32f7xx_hal_rcc_ex.c. Registers PeriphClkInit->PLLI2SDivQ and PeriphClkInit->PLLSAIDivQ are both set to a value that is 1 too low.
Solution: Apply JSB fix to file stm32f7xx_hal_rcc_ex.c.
Notes: Test fix presence by calling EnsureFixPresent_Fix_JSB_20191115_HAL_RCCEx_GetPeriphCLKConfig__PLLDivisionFactors() from code.
=====
Date: 15/11/2019
Symptom: SPDIF timeout issue. I don't remember the details.
Cause: SPDIFRX_TIMEOUT_VALUE in file stm32f7xx_hal_spdifrx.c.
Solution: Change SPDIFRX_TIMEOUT_VALUE to 1000. Was 0xFFFFU in V1.15, and is 0x0010U in V17.4.
How: Apply JSB fix to file stm32f7xx_hal_spdifrx.c.
Notes: Test fix presence by calling EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE() from code.
=====
Date: 15/11/2019
Symptom: SPDIF input works once but not after HAL_SPDIFRX_DMAStop() is called.
Cause: Bits 4+ of hspdif->Instance->CR register cleared incorrectly in HAL_SPDIFRX_DMAStop().
Solution: Don't clear bits 4+ of hspdif->Instance->CR register in function HAL_SPDIFRX_DMAStop() in file stm32f7xx_hal_spdifrx.c.
How: Apply JSB fix to file stm32f7xx_hal_spdifrx.c.
Notes: Test fix presence by calling EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR() from code.
=====
Date: 15/11/2019
Symptom: SPDIF input L&R channels reversed after HAL_SPDIFRX_DMAStop() is called.
Cause: Current DMA activity is not aborted before the DMA is stopped.
Solution: Abort the current DMA activity before stopping the DMA.
How: Apply JSB fix to file stm32f7xx_hal_spdifrx.c.
void EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort() {} // JSB
===============================================================================
