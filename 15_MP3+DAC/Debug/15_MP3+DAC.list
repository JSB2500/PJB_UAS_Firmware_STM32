
15_MP3+DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa84  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec0  0800ac88  0800ac88  0001ac88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .constdata    00001a48  0800bb50  0800bb50  0001bb50  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0800d598  0800d598  0001d598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800d5a0  0800d5a0  0001d5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800d5a4  0800d5a4  0001d5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000001e0  20000000  0800d5a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000009e4  200001e0  0800d788  000201e0  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20000bc4  0800d788  00020bc4  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002230d  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004406  00000000  00000000  0004251b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00013ecb  00000000  00000000  00046921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0005a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  0005be18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a731  00000000  00000000  0005d400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020f29  00000000  00000000  00087b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faca7  00000000  00000000  000a8a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000009cc  00000000  00000000  001a3701  2**0
                  CONTENTS, READONLY
 20 .arm_vfe_header 00000004  00000000  00000000  001a40d0  2**2
                  CONTENTS, READONLY
 21 .debug_frame  00005398  00000000  00000000  001a40d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ac6c 	.word	0x0800ac6c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800ac6c 	.word	0x0800ac6c

08000240 <MP3D_SPCORP_Symbol_007>:
 8000240:	6881      	ldr	r1, [r0, #8]
 8000242:	1a09      	subs	r1, r1, r0
 8000244:	6840      	ldr	r0, [r0, #4]
 8000246:	393e      	subs	r1, #62	; 0x3e
 8000248:	1049      	asrs	r1, r1, #1
 800024a:	f1c0 0010 	rsb	r0, r0, #16
 800024e:	ebc0 1001 	rsb	r0, r0, r1, lsl #4
 8000252:	4770      	bx	lr

08000254 <MP3D_SPCORP_Symbol_011>:
 8000254:	090a      	lsrs	r2, r1, #4
 8000256:	b510      	push	{r4, lr}
 8000258:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800025c:	323e      	adds	r2, #62	; 0x3e
 800025e:	6082      	str	r2, [r0, #8]
 8000260:	f832 3b02 	ldrh.w	r3, [r2], #2
 8000264:	f001 010f 	and.w	r1, r1, #15
 8000268:	ba5b      	rev16	r3, r3
 800026a:	041b      	lsls	r3, r3, #16
 800026c:	408b      	lsls	r3, r1
 800026e:	6003      	str	r3, [r0, #0]
 8000270:	6082      	str	r2, [r0, #8]
 8000272:	f832 4b02 	ldrh.w	r4, [r2], #2
 8000276:	ba64      	rev16	r4, r4
 8000278:	408c      	lsls	r4, r1
 800027a:	4323      	orrs	r3, r4
 800027c:	3910      	subs	r1, #16
 800027e:	6003      	str	r3, [r0, #0]
 8000280:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8000284:	bd10      	pop	{r4, pc}

08000286 <MP3D_SPCORP_Symbol_019>:
 8000286:	0301      	lsls	r1, r0, #12
 8000288:	d507      	bpl.n	800029a <MP3D_SPCORP_Symbol_019+0x14>
 800028a:	f3c0 4141 	ubfx	r1, r0, #17, #2
 800028e:	4afe      	ldr	r2, [pc, #1016]	; (8000688 <MP3D_SPCORP_Symbol_010+0x17e>)
 8000290:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8000294:	4411      	add	r1, r2
 8000296:	390f      	subs	r1, #15
 8000298:	e006      	b.n	80002a8 <MP3D_SPCORP_Symbol_019+0x22>
 800029a:	49fb      	ldr	r1, [pc, #1004]	; (8000688 <MP3D_SPCORP_Symbol_010+0x17e>)
 800029c:	ea6f 4250 	mvn.w	r2, r0, lsr #17
 80002a0:	312d      	adds	r1, #45	; 0x2d
 80002a2:	0792      	lsls	r2, r2, #30
 80002a4:	d100      	bne.n	80002a8 <MP3D_SPCORP_Symbol_019+0x22>
 80002a6:	310f      	adds	r1, #15
 80002a8:	b280      	uxth	r0, r0
 80002aa:	eb01 3010 	add.w	r0, r1, r0, lsr #12
 80002ae:	7800      	ldrb	r0, [r0, #0]
 80002b0:	00c0      	lsls	r0, r0, #3
 80002b2:	4770      	bx	lr

080002b4 <MP3D_SPCORP_Symbol_021>:
 80002b4:	f3c0 4141 	ubfx	r1, r0, #17, #2
 80002b8:	2901      	cmp	r1, #1
 80002ba:	d002      	beq.n	80002c2 <MP3D_SPCORP_Symbol_021+0xe>
 80002bc:	2903      	cmp	r1, #3
 80002be:	d005      	beq.n	80002cc <MP3D_SPCORP_Symbol_021+0x18>
 80002c0:	e007      	b.n	80002d2 <MP3D_SPCORP_Symbol_021+0x1e>
 80002c2:	0300      	lsls	r0, r0, #12
 80002c4:	d405      	bmi.n	80002d2 <MP3D_SPCORP_Symbol_021+0x1e>
 80002c6:	f44f 7010 	mov.w	r0, #576	; 0x240
 80002ca:	4770      	bx	lr
 80002cc:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80002d0:	4770      	bx	lr
 80002d2:	f44f 6090 	mov.w	r0, #1152	; 0x480
 80002d6:	4770      	bx	lr

080002d8 <MP3D_SPCORP_Symbol_018>:
 80002d8:	b530      	push	{r4, r5, lr}
 80002da:	4603      	mov	r3, r0
 80002dc:	4608      	mov	r0, r1
 80002de:	f413 4f70 	tst.w	r3, #61440	; 0xf000
 80002e2:	ea6f 4453 	mvn.w	r4, r3, lsr #17
 80002e6:	d01e      	beq.n	8000326 <MP3D_SPCORP_Symbol_018+0x4e>
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffe3 	bl	80002b4 <MP3D_SPCORP_Symbol_021>
 80002ee:	0945      	lsrs	r5, r0, #5
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ffc8 	bl	8000286 <MP3D_SPCORP_Symbol_019>
 80002f6:	ea4f 00d0 	mov.w	r0, r0, lsr #3
 80002fa:	4345      	muls	r5, r0
 80002fc:	48e2      	ldr	r0, [pc, #904]	; (8000688 <MP3D_SPCORP_Symbol_010+0x17e>)
 80002fe:	f3c3 2181 	ubfx	r1, r3, #10, #2
 8000302:	3058      	adds	r0, #88	; 0x58
 8000304:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8000308:	4368      	muls	r0, r5
 800030a:	ea4f 2090 	mov.w	r0, r0, lsr #10
 800030e:	02d9      	lsls	r1, r3, #11
 8000310:	d505      	bpl.n	800031e <MP3D_SPCORP_Symbol_018+0x46>
 8000312:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8000316:	0319      	lsls	r1, r3, #12
 8000318:	d501      	bpl.n	800031e <MP3D_SPCORP_Symbol_018+0x46>
 800031a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800031e:	07a1      	lsls	r1, r4, #30
 8000320:	d101      	bne.n	8000326 <MP3D_SPCORP_Symbol_018+0x4e>
 8000322:	f020 0003 	bic.w	r0, r0, #3
 8000326:	0599      	lsls	r1, r3, #22
 8000328:	d502      	bpl.n	8000330 <MP3D_SPCORP_Symbol_018+0x58>
 800032a:	07a1      	lsls	r1, r4, #30
 800032c:	d001      	beq.n	8000332 <MP3D_SPCORP_Symbol_018+0x5a>
 800032e:	1c40      	adds	r0, r0, #1
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	1d00      	adds	r0, r0, #4
 8000334:	bd30      	pop	{r4, r5, pc}

08000336 <MP3D_SPCORP_Symbol_022>:
 8000336:	4601      	mov	r1, r0
 8000338:	201e      	movs	r0, #30
 800033a:	030a      	lsls	r2, r1, #12
 800033c:	d400      	bmi.n	8000340 <MP3D_SPCORP_Symbol_022+0xa>
 800033e:	200f      	movs	r0, #15
 8000340:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8000344:	2903      	cmp	r1, #3
 8000346:	d100      	bne.n	800034a <MP3D_SPCORP_Symbol_022+0x14>
 8000348:	1040      	asrs	r0, r0, #1
 800034a:	1c80      	adds	r0, r0, #2
 800034c:	4770      	bx	lr

0800034e <MP3D_SPCORP_Symbol_023>:
 800034e:	4603      	mov	r3, r0
 8000350:	b500      	push	{lr}
 8000352:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8000356:	2801      	cmp	r0, #1
 8000358:	d901      	bls.n	800035e <MP3D_SPCORP_Symbol_023+0x10>
 800035a:	2004      	movs	r0, #4
 800035c:	e004      	b.n	8000368 <MP3D_SPCORP_Symbol_023+0x1a>
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ffe9 	bl	8000336 <MP3D_SPCORP_Symbol_022>
 8000364:	f100 0004 	add.w	r0, r0, #4
 8000368:	03d9      	lsls	r1, r3, #15
 800036a:	d400      	bmi.n	800036e <MP3D_SPCORP_Symbol_023+0x20>
 800036c:	1c80      	adds	r0, r0, #2
 800036e:	bd00      	pop	{pc}

08000370 <MP3D_SPCORP_Symbol_002>:
 8000370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000374:	4604      	mov	r4, r0
 8000376:	6900      	ldr	r0, [r0, #16]
 8000378:	000d      	movs	r5, r1
 800037a:	d023      	beq.n	80003c4 <MP3D_SPCORP_Symbol_002+0x54>
 800037c:	69e1      	ldr	r1, [r4, #28]
 800037e:	1b4f      	subs	r7, r1, r5
 8000380:	f7ff ffe5 	bl	800034e <MP3D_SPCORP_Symbol_023>
 8000384:	69e1      	ldr	r1, [r4, #28]
 8000386:	4606      	mov	r6, r0
 8000388:	180a      	adds	r2, r1, r0
 800038a:	69a0      	ldr	r0, [r4, #24]
 800038c:	1a83      	subs	r3, r0, r2
 800038e:	d002      	beq.n	8000396 <MP3D_SPCORP_Symbol_002+0x26>
 8000390:	4620      	mov	r0, r4
 8000392:	f001 f85f 	bl	8001454 <MP3D_SPCORP_Symbol_012>
 8000396:	69a0      	ldr	r0, [r4, #24]
 8000398:	1b80      	subs	r0, r0, r6
 800039a:	61a0      	str	r0, [r4, #24]
 800039c:	69e0      	ldr	r0, [r4, #28]
 800039e:	1b80      	subs	r0, r0, r6
 80003a0:	61e0      	str	r0, [r4, #28]
 80003a2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80003a6:	f7ff ff97 	bl	80002d8 <MP3D_SPCORP_Symbol_018>
 80003aa:	69e1      	ldr	r1, [r4, #28]
 80003ac:	4408      	add	r0, r1
 80003ae:	61e0      	str	r0, [r4, #28]
 80003b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	d30d      	bcc.n	80003d2 <MP3D_SPCORP_Symbol_002+0x62>
 80003b6:	00f9      	lsls	r1, r7, #3
 80003b8:	4620      	mov	r0, r4
 80003ba:	f7ff ff4b 	bl	8000254 <MP3D_SPCORP_Symbol_011>
 80003be:	2001      	movs	r0, #1
 80003c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003c4:	6961      	ldr	r1, [r4, #20]
 80003c6:	f7ff ff87 	bl	80002d8 <MP3D_SPCORP_Symbol_018>
 80003ca:	69e1      	ldr	r1, [r4, #28]
 80003cc:	4408      	add	r0, r1
 80003ce:	61e0      	str	r0, [r4, #28]
 80003d0:	e7f5      	b.n	80003be <MP3D_SPCORP_Symbol_002+0x4e>
 80003d2:	eb07 0105 	add.w	r1, r7, r5
 80003d6:	1a08      	subs	r0, r1, r0
 80003d8:	d500      	bpl.n	80003dc <MP3D_SPCORP_Symbol_002+0x6c>
 80003da:	2000      	movs	r0, #0
 80003dc:	00c1      	lsls	r1, r0, #3
 80003de:	4620      	mov	r0, r4
 80003e0:	f7ff ff38 	bl	8000254 <MP3D_SPCORP_Symbol_011>
 80003e4:	2000      	movs	r0, #0
 80003e6:	e7eb      	b.n	80003c0 <MP3D_SPCORP_Symbol_002+0x50>

080003e8 <MP3D_SPCORP_Symbol_003>:
 80003e8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80003ea:	e733      	b.n	8000254 <MP3D_SPCORP_Symbol_011>

080003ec <MP3D_SPCORP_Symbol_017>:
 80003ec:	b510      	push	{r4, lr}
 80003ee:	4604      	mov	r4, r0
 80003f0:	4ba6      	ldr	r3, [pc, #664]	; (800068c <MP3D_SPCORP_Symbol_010+0x182>)
 80003f2:	2000      	movs	r0, #0
 80003f4:	ea84 0201 	eor.w	r2, r4, r1
 80003f8:	421a      	tst	r2, r3
 80003fa:	d10c      	bne.n	8000416 <MP3D_SPCORP_Symbol_017+0x2a>
 80003fc:	2201      	movs	r2, #1
 80003fe:	4613      	mov	r3, r2
 8000400:	f414 4f70 	tst.w	r4, #61440	; 0xf000
 8000404:	d000      	beq.n	8000408 <MP3D_SPCORP_Symbol_017+0x1c>
 8000406:	2300      	movs	r3, #0
 8000408:	f411 4f70 	tst.w	r1, #61440	; 0xf000
 800040c:	d000      	beq.n	8000410 <MP3D_SPCORP_Symbol_017+0x24>
 800040e:	2200      	movs	r2, #0
 8000410:	4293      	cmp	r3, r2
 8000412:	d100      	bne.n	8000416 <MP3D_SPCORP_Symbol_017+0x2a>
 8000414:	2001      	movs	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <MP3D_SPCORP_Symbol_016>:
 8000418:	2100      	movs	r1, #0
 800041a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800041e:	ebb2 5f10 	cmp.w	r2, r0, lsr #20
 8000422:	d004      	beq.n	800042e <MP3D_SPCORP_Symbol_016+0x16>
 8000424:	f647 72f1 	movw	r2, #32753	; 0x7ff1
 8000428:	ebb2 4f50 	cmp.w	r2, r0, lsr #17
 800042c:	d10c      	bne.n	8000448 <MP3D_SPCORP_Symbol_016+0x30>
 800042e:	b282      	uxth	r2, r0
 8000430:	230f      	movs	r3, #15
 8000432:	ebb3 3f12 	cmp.w	r3, r2, lsr #12
 8000436:	d007      	beq.n	8000448 <MP3D_SPCORP_Symbol_016+0x30>
 8000438:	ea6f 2290 	mvn.w	r2, r0, lsr #10
 800043c:	0792      	lsls	r2, r2, #30
 800043e:	d003      	beq.n	8000448 <MP3D_SPCORP_Symbol_016+0x30>
 8000440:	0c40      	lsrs	r0, r0, #17
 8000442:	0780      	lsls	r0, r0, #30
 8000444:	d000      	beq.n	8000448 <MP3D_SPCORP_Symbol_016+0x30>
 8000446:	2101      	movs	r1, #1
 8000448:	4608      	mov	r0, r1
 800044a:	4770      	bx	lr

0800044c <MP3D_SPCORP_Symbol_004>:
 800044c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000450:	4688      	mov	r8, r1
 8000452:	4604      	mov	r4, r0
 8000454:	f7ff fef4 	bl	8000240 <MP3D_SPCORP_Symbol_007>
 8000458:	69a1      	ldr	r1, [r4, #24]
 800045a:	4606      	mov	r6, r0
 800045c:	ebc0 07c1 	rsb	r7, r0, r1, lsl #3
 8000460:	69e1      	ldr	r1, [r4, #28]
 8000462:	f241 2210 	movw	r2, #4624	; 0x1210
 8000466:	4440      	add	r0, r8
 8000468:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800046c:	4288      	cmp	r0, r1
 800046e:	d333      	bcc.n	80004d8 <MP3D_SPCORP_Symbol_004+0x8c>
 8000470:	f06f 0002 	mvn.w	r0, #2
 8000474:	e7a4      	b.n	80003c0 <MP3D_SPCORP_Symbol_002+0x50>
 8000476:	69e1      	ldr	r1, [r4, #28]
 8000478:	4630      	mov	r0, r6
 800047a:	ebb6 0fc1 	cmp.w	r6, r1, lsl #3
 800047e:	d300      	bcc.n	8000482 <MP3D_SPCORP_Symbol_004+0x36>
 8000480:	00c8      	lsls	r0, r1, #3
 8000482:	08c5      	lsrs	r5, r0, #3
 8000484:	69a0      	ldr	r0, [r4, #24]
 8000486:	42a8      	cmp	r0, r5
 8000488:	d800      	bhi.n	800048c <MP3D_SPCORP_Symbol_004+0x40>
 800048a:	4605      	mov	r5, r0
 800048c:	b18d      	cbz	r5, 80004b2 <MP3D_SPCORP_Symbol_004+0x66>
 800048e:	1b43      	subs	r3, r0, r5
 8000490:	d004      	beq.n	800049c <MP3D_SPCORP_Symbol_004+0x50>
 8000492:	462a      	mov	r2, r5
 8000494:	2100      	movs	r1, #0
 8000496:	4620      	mov	r0, r4
 8000498:	f000 ffdc 	bl	8001454 <MP3D_SPCORP_Symbol_012>
 800049c:	69e0      	ldr	r0, [r4, #28]
 800049e:	1b40      	subs	r0, r0, r5
 80004a0:	61e0      	str	r0, [r4, #28]
 80004a2:	69a0      	ldr	r0, [r4, #24]
 80004a4:	1b40      	subs	r0, r0, r5
 80004a6:	61a0      	str	r0, [r4, #24]
 80004a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80004aa:	4269      	negs	r1, r5
 80004ac:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80004b0:	6260      	str	r0, [r4, #36]	; 0x24
 80004b2:	4268      	negs	r0, r5
 80004b4:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 80004b8:	69a0      	ldr	r0, [r4, #24]
 80004ba:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 80004be:	f2a0 2142 	subw	r1, r0, #578	; 0x242
 80004c2:	4418      	add	r0, r3
 80004c4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80004c8:	4249      	negs	r1, r1
 80004ca:	4798      	blx	r3
 80004cc:	69a1      	ldr	r1, [r4, #24]
 80004ce:	4401      	add	r1, r0
 80004d0:	00c0      	lsls	r0, r0, #3
 80004d2:	61a1      	str	r1, [r4, #24]
 80004d4:	4407      	add	r7, r0
 80004d6:	d00a      	beq.n	80004ee <MP3D_SPCORP_Symbol_004+0xa2>
 80004d8:	4547      	cmp	r7, r8
 80004da:	dbcc      	blt.n	8000476 <MP3D_SPCORP_Symbol_004+0x2a>
 80004dc:	4631      	mov	r1, r6
 80004de:	4620      	mov	r0, r4
 80004e0:	f7ff feb8 	bl	8000254 <MP3D_SPCORP_Symbol_011>
 80004e4:	eb06 0008 	add.w	r0, r6, r8
 80004e8:	6260      	str	r0, [r4, #36]	; 0x24
 80004ea:	2000      	movs	r0, #0
 80004ec:	e768      	b.n	80003c0 <MP3D_SPCORP_Symbol_002+0x50>
 80004ee:	4631      	mov	r1, r6
 80004f0:	4620      	mov	r0, r4
 80004f2:	f7ff feaf 	bl	8000254 <MP3D_SPCORP_Symbol_011>
 80004f6:	f06f 0001 	mvn.w	r0, #1
 80004fa:	e761      	b.n	80003c0 <MP3D_SPCORP_Symbol_002+0x50>

080004fc <MP3D_SPCORP_Symbol_005>:
 80004fc:	6802      	ldr	r2, [r0, #0]
 80004fe:	408a      	lsls	r2, r1
 8000500:	6002      	str	r2, [r0, #0]
 8000502:	6842      	ldr	r2, [r0, #4]
 8000504:	4411      	add	r1, r2
 8000506:	6041      	str	r1, [r0, #4]
 8000508:	4770      	bx	lr

0800050a <MP3D_SPCORP_Symbol_010>:
 800050a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800050e:	4604      	mov	r4, r0
 8000510:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000512:	2500      	movs	r5, #0
 8000514:	f04f 0901 	mov.w	r9, #1
 8000518:	f240 77e1 	movw	r7, #2017	; 0x7e1
 800051c:	b190      	cbz	r0, 8000544 <MP3D_SPCORP_Symbol_010+0x3a>
 800051e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8000522:	4620      	mov	r0, r4
 8000524:	f7ff ff92 	bl	800044c <MP3D_SPCORP_Symbol_004>
 8000528:	2800      	cmp	r0, #0
 800052a:	d17e      	bne.n	800062a <MP3D_SPCORP_Symbol_010+0x120>
 800052c:	6961      	ldr	r1, [r4, #20]
 800052e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000530:	69e0      	ldr	r0, [r4, #28]
 8000532:	42b9      	cmp	r1, r7
 8000534:	d101      	bne.n	800053a <MP3D_SPCORP_Symbol_010+0x30>
 8000536:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000538:	4408      	add	r0, r1
 800053a:	00c1      	lsls	r1, r0, #3
 800053c:	4620      	mov	r0, r4
 800053e:	f7ff fe89 	bl	8000254 <MP3D_SPCORP_Symbol_011>
 8000542:	e03b      	b.n	80005bc <MP3D_SPCORP_Symbol_010+0xb2>
 8000544:	6860      	ldr	r0, [r4, #4]
 8000546:	4240      	negs	r0, r0
 8000548:	f000 0107 	and.w	r1, r0, #7
 800054c:	4620      	mov	r0, r4
 800054e:	f7ff ffd5 	bl	80004fc <MP3D_SPCORP_Symbol_005>
 8000552:	4620      	mov	r0, r4
 8000554:	f7ff fe74 	bl	8000240 <MP3D_SPCORP_Symbol_007>
 8000558:	69e1      	ldr	r1, [r4, #28]
 800055a:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 800055e:	d901      	bls.n	8000564 <MP3D_SPCORP_Symbol_010+0x5a>
 8000560:	08c1      	lsrs	r1, r0, #3
 8000562:	61e1      	str	r1, [r4, #28]
 8000564:	6961      	ldr	r1, [r4, #20]
 8000566:	42b9      	cmp	r1, r7
 8000568:	d00f      	beq.n	800058a <MP3D_SPCORP_Symbol_010+0x80>
 800056a:	69e1      	ldr	r1, [r4, #28]
 800056c:	ebc0 06c1 	rsb	r6, r0, r1, lsl #3
 8000570:	f640 70f8 	movw	r0, #4088	; 0xff8
 8000574:	4286      	cmp	r6, r0
 8000576:	dd06      	ble.n	8000586 <MP3D_SPCORP_Symbol_010+0x7c>
 8000578:	4606      	mov	r6, r0
 800057a:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
 800057e:	4620      	mov	r0, r4
 8000580:	f7ff fe68 	bl	8000254 <MP3D_SPCORP_Symbol_011>
 8000584:	e002      	b.n	800058c <MP3D_SPCORP_Symbol_010+0x82>
 8000586:	2e00      	cmp	r6, #0
 8000588:	da00      	bge.n	800058c <MP3D_SPCORP_Symbol_010+0x82>
 800058a:	2600      	movs	r6, #0
 800058c:	17f0      	asrs	r0, r6, #31
 800058e:	eb06 7050 	add.w	r0, r6, r0, lsr #29
 8000592:	10c0      	asrs	r0, r0, #3
 8000594:	f8c4 9020 	str.w	r9, [r4, #32]
 8000598:	6320      	str	r0, [r4, #48]	; 0x30
 800059a:	f506 7198 	add.w	r1, r6, #304	; 0x130
 800059e:	4620      	mov	r0, r4
 80005a0:	f7ff ff54 	bl	800044c <MP3D_SPCORP_Symbol_004>
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d14a      	bne.n	800063e <MP3D_SPCORP_Symbol_010+0x134>
 80005a8:	6960      	ldr	r0, [r4, #20]
 80005aa:	42b8      	cmp	r0, r7
 80005ac:	d114      	bne.n	80005d8 <MP3D_SPCORP_Symbol_010+0xce>
 80005ae:	4620      	mov	r0, r4
 80005b0:	f7ff fe46 	bl	8000240 <MP3D_SPCORP_Symbol_007>
 80005b4:	08c0      	lsrs	r0, r0, #3
 80005b6:	69e1      	ldr	r1, [r4, #28]
 80005b8:	61e0      	str	r0, [r4, #28]
 80005ba:	1a0d      	subs	r5, r1, r0
 80005bc:	2110      	movs	r1, #16
 80005be:	4620      	mov	r0, r4
 80005c0:	f000 feea 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 80005c4:	4606      	mov	r6, r0
 80005c6:	2110      	movs	r1, #16
 80005c8:	4620      	mov	r0, r4
 80005ca:	f000 fee5 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 80005ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005d2:	f04f 0800 	mov.w	r8, #0
 80005d6:	e034      	b.n	8000642 <MP3D_SPCORP_Symbol_010+0x138>
 80005d8:	69e0      	ldr	r0, [r4, #28]
 80005da:	e7ae      	b.n	800053a <MP3D_SPCORP_Symbol_010+0x30>
 80005dc:	b16d      	cbz	r5, 80005fa <MP3D_SPCORP_Symbol_010+0xf0>
 80005de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80005e0:	1e6d      	subs	r5, r5, #1
 80005e2:	1c40      	adds	r0, r0, #1
 80005e4:	6320      	str	r0, [r4, #48]	; 0x30
 80005e6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80005ea:	db02      	blt.n	80005f2 <MP3D_SPCORP_Symbol_010+0xe8>
 80005ec:	f240 10ff 	movw	r0, #511	; 0x1ff
 80005f0:	e011      	b.n	8000616 <MP3D_SPCORP_Symbol_010+0x10c>
 80005f2:	69e0      	ldr	r0, [r4, #28]
 80005f4:	1e40      	subs	r0, r0, #1
 80005f6:	61e0      	str	r0, [r4, #28]
 80005f8:	e00e      	b.n	8000618 <MP3D_SPCORP_Symbol_010+0x10e>
 80005fa:	6960      	ldr	r0, [r4, #20]
 80005fc:	42b8      	cmp	r0, r7
 80005fe:	d103      	bne.n	8000608 <MP3D_SPCORP_Symbol_010+0xfe>
 8000600:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000602:	69e0      	ldr	r0, [r4, #28]
 8000604:	4408      	add	r0, r1
 8000606:	61e0      	str	r0, [r4, #28]
 8000608:	f8c4 8014 	str.w	r8, [r4, #20]
 800060c:	6921      	ldr	r1, [r4, #16]
 800060e:	4640      	mov	r0, r8
 8000610:	b109      	cbz	r1, 8000616 <MP3D_SPCORP_Symbol_010+0x10c>
 8000612:	6220      	str	r0, [r4, #32]
 8000614:	6120      	str	r0, [r4, #16]
 8000616:	6320      	str	r0, [r4, #48]	; 0x30
 8000618:	2108      	movs	r1, #8
 800061a:	4620      	mov	r0, r4
 800061c:	f000 febc 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8000620:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
 8000624:	69e0      	ldr	r0, [r4, #28]
 8000626:	1c40      	adds	r0, r0, #1
 8000628:	e000      	b.n	800062c <MP3D_SPCORP_Symbol_010+0x122>
 800062a:	e008      	b.n	800063e <MP3D_SPCORP_Symbol_010+0x134>
 800062c:	61e0      	str	r0, [r4, #28]
 800062e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000632:	4620      	mov	r0, r4
 8000634:	f7ff ff0a 	bl	800044c <MP3D_SPCORP_Symbol_004>
 8000638:	b118      	cbz	r0, 8000642 <MP3D_SPCORP_Symbol_010+0x138>
 800063a:	e9c4 950a 	strd	r9, r5, [r4, #40]	; 0x28
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	4630      	mov	r0, r6
 8000644:	f7ff fee8 	bl	8000418 <MP3D_SPCORP_Symbol_016>
 8000648:	2800      	cmp	r0, #0
 800064a:	d0c7      	beq.n	80005dc <MP3D_SPCORP_Symbol_010+0xd2>
 800064c:	6921      	ldr	r1, [r4, #16]
 800064e:	b1d1      	cbz	r1, 8000686 <MP3D_SPCORP_Symbol_010+0x17c>
 8000650:	4630      	mov	r0, r6
 8000652:	f7ff fecb 	bl	80003ec <MP3D_SPCORP_Symbol_017>
 8000656:	2800      	cmp	r0, #0
 8000658:	d0c0      	beq.n	80005dc <MP3D_SPCORP_Symbol_010+0xd2>
 800065a:	6960      	ldr	r0, [r4, #20]
 800065c:	42b8      	cmp	r0, r7
 800065e:	d106      	bne.n	800066e <MP3D_SPCORP_Symbol_010+0x164>
 8000660:	eba0 0005 	sub.w	r0, r0, r5
 8000664:	6160      	str	r0, [r4, #20]
 8000666:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000668:	69e0      	ldr	r0, [r4, #28]
 800066a:	4408      	add	r0, r1
 800066c:	61e0      	str	r0, [r4, #28]
 800066e:	6126      	str	r6, [r4, #16]
 8000670:	03f0      	lsls	r0, r6, #15
 8000672:	d404      	bmi.n	800067e <MP3D_SPCORP_Symbol_010+0x174>
 8000674:	2110      	movs	r1, #16
 8000676:	4620      	mov	r0, r4
 8000678:	f000 fe8e 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 800067c:	87a0      	strh	r0, [r4, #60]	; 0x3c
 800067e:	2000      	movs	r0, #0
 8000680:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 8000684:	e7db      	b.n	800063e <MP3D_SPCORP_Symbol_010+0x134>
 8000686:	e003      	b.n	8000690 <MP3D_SPCORP_Symbol_010+0x186>
 8000688:	0800cc50 	.word	0x0800cc50
 800068c:	fffe0c00 	.word	0xfffe0c00
 8000690:	f416 4f70 	tst.w	r6, #61440	; 0xf000
 8000694:	d1e1      	bne.n	800065a <MP3D_SPCORP_Symbol_010+0x150>
 8000696:	6167      	str	r7, [r4, #20]
 8000698:	e7df      	b.n	800065a <MP3D_SPCORP_Symbol_010+0x150>

0800069a <MP3D_SPCORP_Symbol_008>:
 800069a:	b500      	push	{lr}
 800069c:	4602      	mov	r2, r0
 800069e:	f7ff fdcf 	bl	8000240 <MP3D_SPCORP_Symbol_007>
 80006a2:	69d1      	ldr	r1, [r2, #28]
 80006a4:	ebc0 00c1 	rsb	r0, r0, r1, lsl #3
 80006a8:	bd00      	pop	{pc}

080006aa <MP3D_SPCORP_Symbol_009>:
 80006aa:	69c1      	ldr	r1, [r0, #28]
 80006ac:	1c49      	adds	r1, r1, #1
 80006ae:	61c1      	str	r1, [r0, #28]
 80006b0:	2100      	movs	r1, #0
 80006b2:	6201      	str	r1, [r0, #32]
 80006b4:	4770      	bx	lr

080006b6 <MP3D_SPCORP_Symbol_020>:
 80006b6:	4601      	mov	r1, r0
 80006b8:	48ff      	ldr	r0, [pc, #1020]	; (8000ab8 <MP3D_SPCORP_Symbol_015+0xfe>)
 80006ba:	f3c1 2281 	ubfx	r2, r1, #10, #2
 80006be:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80006c2:	030a      	lsls	r2, r1, #12
 80006c4:	d404      	bmi.n	80006d0 <MP3D_SPCORP_Symbol_020+0x1a>
 80006c6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80006ca:	02c9      	lsls	r1, r1, #11
 80006cc:	d400      	bmi.n	80006d0 <MP3D_SPCORP_Symbol_020+0x1a>
 80006ce:	0840      	lsrs	r0, r0, #1
 80006d0:	4770      	bx	lr

080006d2 <MP3D_SPCORP_Symbol_025>:
 80006d2:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006d6:	b085      	sub	sp, #20
 80006d8:	461d      	mov	r5, r3
 80006da:	9806      	ldr	r0, [sp, #24]
 80006dc:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
 80006e0:	6900      	ldr	r0, [r0, #16]
 80006e2:	9003      	str	r0, [sp, #12]
 80006e4:	f8df a3d4 	ldr.w	sl, [pc, #980]	; 8000abc <MP3D_SPCORP_Symbol_015+0x102>
 80006e8:	7ad0      	ldrb	r0, [r2, #11]
 80006ea:	4614      	mov	r4, r2
 80006ec:	b128      	cbz	r0, 80006fa <MP3D_SPCORP_Symbol_025+0x28>
 80006ee:	7aa0      	ldrb	r0, [r4, #10]
 80006f0:	f10a 0a1c 	add.w	sl, sl, #28
 80006f4:	b108      	cbz	r0, 80006fa <MP3D_SPCORP_Symbol_025+0x28>
 80006f6:	f10a 0a1c 	add.w	sl, sl, #28
 80006fa:	9803      	ldr	r0, [sp, #12]
 80006fc:	0300      	lsls	r0, r0, #12
 80006fe:	d510      	bpl.n	8000722 <MP3D_SPCORP_Symbol_025+0x50>
 8000700:	49ee      	ldr	r1, [pc, #952]	; (8000abc <MP3D_SPCORP_Symbol_015+0x102>)
 8000702:	88a0      	ldrh	r0, [r4, #4]
 8000704:	3910      	subs	r1, #16
 8000706:	5c08      	ldrb	r0, [r1, r0]
 8000708:	ea4f 0190 	mov.w	r1, r0, lsr #2
 800070c:	f88d 1008 	strb.w	r1, [sp, #8]
 8000710:	f88d 1009 	strb.w	r1, [sp, #9]
 8000714:	f000 0003 	and.w	r0, r0, #3
 8000718:	f88d 000a 	strb.w	r0, [sp, #10]
 800071c:	f88d 000b 	strb.w	r0, [sp, #11]
 8000720:	e035      	b.n	800078e <MP3D_SPCORP_Symbol_025+0xbc>
 8000722:	9a03      	ldr	r2, [sp, #12]
 8000724:	88a3      	ldrh	r3, [r4, #4]
 8000726:	2000      	movs	r0, #0
 8000728:	06d2      	lsls	r2, r2, #27
 800072a:	d501      	bpl.n	8000730 <MP3D_SPCORP_Symbol_025+0x5e>
 800072c:	b101      	cbz	r1, 8000730 <MP3D_SPCORP_Symbol_025+0x5e>
 800072e:	2001      	movs	r0, #1
 8000730:	f04f 0900 	mov.w	r9, #0
 8000734:	b118      	cbz	r0, 800073e <MP3D_SPCORP_Symbol_025+0x6c>
 8000736:	f04f 090c 	mov.w	r9, #12
 800073a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800073e:	4fde      	ldr	r7, [pc, #888]	; (8000ab8 <MP3D_SPCORP_Symbol_015+0xfe>)
 8000740:	f10d 0e08 	add.w	lr, sp, #8
 8000744:	3f53      	subs	r7, #83	; 0x53
 8000746:	49dd      	ldr	r1, [pc, #884]	; (8000abc <MP3D_SPCORP_Symbol_015+0x102>)
 8000748:	f04f 0801 	mov.w	r8, #1
 800074c:	315e      	adds	r1, #94	; 0x5e
 800074e:	eb01 0b09 	add.w	fp, r1, r9
 8000752:	4618      	mov	r0, r3
 8000754:	f04f 0103 	mov.w	r1, #3
 8000758:	4ed7      	ldr	r6, [pc, #860]	; (8000ab8 <MP3D_SPCORP_Symbol_015+0xfe>)
 800075a:	f81b 2001 	ldrb.w	r2, [fp, r1]
 800075e:	3e5a      	subs	r6, #90	; 0x5a
 8000760:	fb08 f802 	mul.w	r8, r8, r2
 8000764:	5cb6      	ldrb	r6, [r6, r2]
 8000766:	f817 c002 	ldrb.w	ip, [r7, r2]
 800076a:	4346      	muls	r6, r0
 800076c:	fa46 f60c 	asr.w	r6, r6, ip
 8000770:	fb06 0012 	mls	r0, r6, r2, r0
 8000774:	f80e 0001 	strb.w	r0, [lr, r1]
 8000778:	4630      	mov	r0, r6
 800077a:	1e49      	subs	r1, r1, #1
 800077c:	d5ec      	bpl.n	8000758 <MP3D_SPCORP_Symbol_025+0x86>
 800077e:	f109 0904 	add.w	r9, r9, #4
 8000782:	ebb3 0308 	subs.w	r3, r3, r8
 8000786:	d5de      	bpl.n	8000746 <MP3D_SPCORP_Symbol_025+0x74>
 8000788:	44ca      	add	sl, r9
 800078a:	f06f 030f 	mvn.w	r3, #15
 800078e:	9a06      	ldr	r2, [sp, #24]
 8000790:	e9cd 2300 	strd	r2, r3, [sp]
 8000794:	4653      	mov	r3, sl
 8000796:	aa02      	add	r2, sp, #8
 8000798:	4628      	mov	r0, r5
 800079a:	9905      	ldr	r1, [sp, #20]
 800079c:	f000 fc38 	bl	8001010 <ReadScaleFactors>
 80007a0:	7d20      	ldrb	r0, [r4, #20]
 80007a2:	2302      	movs	r3, #2
 80007a4:	0781      	lsls	r1, r0, #30
 80007a6:	d400      	bmi.n	80007aa <MP3D_SPCORP_Symbol_025+0xd8>
 80007a8:	2301      	movs	r3, #1
 80007aa:	7ae1      	ldrb	r1, [r4, #11]
 80007ac:	b319      	cbz	r1, 80007f6 <MP3D_SPCORP_Symbol_025+0x124>
 80007ae:	8a60      	ldrh	r0, [r4, #18]
 80007b0:	b300      	cbz	r0, 80007f4 <MP3D_SPCORP_Symbol_025+0x122>
 80007b2:	7aa0      	ldrb	r0, [r4, #10]
 80007b4:	f1c3 0203 	rsb	r2, r3, #3
 80007b8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80007bc:	8a66      	ldrh	r6, [r4, #18]
 80007be:	6807      	ldr	r7, [r0, #0]
 80007c0:	f3c6 1682 	ubfx	r6, r6, #6, #3
 80007c4:	fa06 f602 	lsl.w	r6, r6, r2
 80007c8:	443e      	add	r6, r7
 80007ca:	6006      	str	r6, [r0, #0]
 80007cc:	8a66      	ldrh	r6, [r4, #18]
 80007ce:	6847      	ldr	r7, [r0, #4]
 80007d0:	f3c6 06c2 	ubfx	r6, r6, #3, #3
 80007d4:	fa06 f602 	lsl.w	r6, r6, r2
 80007d8:	443e      	add	r6, r7
 80007da:	6046      	str	r6, [r0, #4]
 80007dc:	8a66      	ldrh	r6, [r4, #18]
 80007de:	6887      	ldr	r7, [r0, #8]
 80007e0:	f006 0607 	and.w	r6, r6, #7
 80007e4:	fa06 f602 	lsl.w	r6, r6, r2
 80007e8:	443e      	add	r6, r7
 80007ea:	6086      	str	r6, [r0, #8]
 80007ec:	f100 000c 	add.w	r0, r0, #12
 80007f0:	1ec9      	subs	r1, r1, #3
 80007f2:	d1e3      	bne.n	80007bc <MP3D_SPCORP_Symbol_025+0xea>
 80007f4:	e00d      	b.n	8000812 <MP3D_SPCORP_Symbol_025+0x140>
 80007f6:	0740      	lsls	r0, r0, #29
 80007f8:	d50b      	bpl.n	8000812 <MP3D_SPCORP_Symbol_025+0x140>
 80007fa:	4ab0      	ldr	r2, [pc, #704]	; (8000abc <MP3D_SPCORP_Symbol_015+0x102>)
 80007fc:	2000      	movs	r0, #0
 80007fe:	3254      	adds	r2, #84	; 0x54
 8000800:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8000804:	5c17      	ldrb	r7, [r2, r0]
 8000806:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8000808:	1c40      	adds	r0, r0, #1
 800080a:	443e      	add	r6, r7
 800080c:	62ce      	str	r6, [r1, #44]	; 0x2c
 800080e:	280a      	cmp	r0, #10
 8000810:	d3f6      	bcc.n	8000800 <MP3D_SPCORP_Symbol_025+0x12e>
 8000812:	79a1      	ldrb	r1, [r4, #6]
 8000814:	9803      	ldr	r0, [sp, #12]
 8000816:	396e      	subs	r1, #110	; 0x6e
 8000818:	f3c0 1042 	ubfx	r0, r0, #5, #3
 800081c:	2803      	cmp	r0, #3
 800081e:	d100      	bne.n	8000822 <MP3D_SPCORP_Symbol_025+0x150>
 8000820:	1e89      	subs	r1, r1, #2
 8000822:	2000      	movs	r0, #0
 8000824:	e004      	b.n	8000830 <MP3D_SPCORP_Symbol_025+0x15e>
 8000826:	682a      	ldr	r2, [r5, #0]
 8000828:	409a      	lsls	r2, r3
 800082a:	1a8a      	subs	r2, r1, r2
 800082c:	c504      	stmia	r5!, {r2}
 800082e:	1c40      	adds	r0, r0, #1
 8000830:	7aa2      	ldrb	r2, [r4, #10]
 8000832:	7ae6      	ldrb	r6, [r4, #11]
 8000834:	4432      	add	r2, r6
 8000836:	4282      	cmp	r2, r0
 8000838:	dcf5      	bgt.n	8000826 <MP3D_SPCORP_Symbol_025+0x154>
 800083a:	b009      	add	sp, #36	; 0x24
 800083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000840 <MP3D_SPCORP_Symbol_026>:
 8000840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000844:	2500      	movs	r5, #0
 8000846:	2601      	movs	r6, #1
 8000848:	f3c2 1b81 	ubfx	fp, r2, #6, #2
 800084c:	b082      	sub	sp, #8
 800084e:	4682      	mov	sl, r0
 8000850:	4604      	mov	r4, r0
 8000852:	f1bb 0f03 	cmp.w	fp, #3
 8000856:	d000      	beq.n	800085a <MP3D_SPCORP_Symbol_026+0x1a>
 8000858:	2602      	movs	r6, #2
 800085a:	0310      	lsls	r0, r2, #12
 800085c:	d50d      	bpl.n	800087a <MP3D_SPCORP_Symbol_026+0x3a>
 800085e:	0076      	lsls	r6, r6, #1
 8000860:	2109      	movs	r1, #9
 8000862:	9803      	ldr	r0, [sp, #12]
 8000864:	f000 fd98 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	1df1      	adds	r1, r6, #7
 800086c:	9803      	ldr	r0, [sp, #12]
 800086e:	f000 fd93 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8000872:	4605      	mov	r5, r0
 8000874:	f240 4083 	movw	r0, #1155	; 0x483
 8000878:	e008      	b.n	800088c <MP3D_SPCORP_Symbol_026+0x4c>
 800087a:	f106 0108 	add.w	r1, r6, #8
 800087e:	9803      	ldr	r0, [sp, #12]
 8000880:	f000 fd8a 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8000884:	40f0      	lsrs	r0, r6
 8000886:	9000      	str	r0, [sp, #0]
 8000888:	f640 1062 	movw	r0, #2402	; 0x962
 800088c:	4680      	mov	r8, r0
 800088e:	f04f 0900 	mov.w	r9, #0
 8000892:	f1bb 0f03 	cmp.w	fp, #3
 8000896:	d100      	bne.n	800089a <MP3D_SPCORP_Symbol_026+0x5a>
 8000898:	012d      	lsls	r5, r5, #4
 800089a:	210c      	movs	r1, #12
 800089c:	9803      	ldr	r0, [sp, #12]
 800089e:	f000 fd7b 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 80008a2:	8020      	strh	r0, [r4, #0]
 80008a4:	2109      	movs	r1, #9
 80008a6:	9803      	ldr	r0, [sp, #12]
 80008a8:	f000 fd76 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 80008ac:	f5b0 7f90 	cmp.w	r0, #288	; 0x120
 80008b0:	dc2c      	bgt.n	800090c <MP3D_SPCORP_Symbol_026+0xcc>
 80008b2:	8060      	strh	r0, [r4, #2]
 80008b4:	2108      	movs	r1, #8
 80008b6:	9803      	ldr	r0, [sp, #12]
 80008b8:	f000 fd6e 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 80008bc:	71a0      	strb	r0, [r4, #6]
 80008be:	f3c8 2103 	ubfx	r1, r8, #8, #4
 80008c2:	9803      	ldr	r0, [sp, #12]
 80008c4:	f000 fd68 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 80008c8:	80a0      	strh	r0, [r4, #4]
 80008ca:	ebaa 0704 	sub.w	r7, sl, r4
 80008ce:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80008d2:	7260      	strb	r0, [r4, #9]
 80008d4:	2016      	movs	r0, #22
 80008d6:	72a0      	strb	r0, [r4, #10]
 80008d8:	f884 900b 	strb.w	r9, [r4, #11]
 80008dc:	2101      	movs	r1, #1
 80008de:	9803      	ldr	r0, [sp, #12]
 80008e0:	f000 fd5a 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 80008e4:	b3a0      	cbz	r0, 8000950 <MP3D_SPCORP_Symbol_026+0x110>
 80008e6:	2103      	movs	r1, #3
 80008e8:	9803      	ldr	r0, [sp, #12]
 80008ea:	f000 fd55 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 80008ee:	f000 0101 	and.w	r1, r0, #1
 80008f2:	7221      	strb	r1, [r4, #8]
 80008f4:	1040      	asrs	r0, r0, #1
 80008f6:	71e0      	strb	r0, [r4, #7]
 80008f8:	f04f 0207 	mov.w	r2, #7
 80008fc:	73e2      	strb	r2, [r4, #15]
 80008fe:	f04f 023f 	mov.w	r2, #63	; 0x3f
 8000902:	7422      	strb	r2, [r4, #16]
 8000904:	d002      	beq.n	800090c <MP3D_SPCORP_Symbol_026+0xcc>
 8000906:	2802      	cmp	r0, #2
 8000908:	d004      	beq.n	8000914 <MP3D_SPCORP_Symbol_026+0xd4>
 800090a:	e00e      	b.n	800092a <MP3D_SPCORP_Symbol_026+0xea>
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	b005      	add	sp, #20
 8000912:	e793      	b.n	800083c <MP3D_SPCORP_Symbol_025+0x16a>
 8000914:	f640 700f 	movw	r0, #3855	; 0xf0f
 8000918:	4005      	ands	r5, r0
 800091a:	b189      	cbz	r1, 8000940 <MP3D_SPCORP_Symbol_026+0x100>
 800091c:	3758      	adds	r7, #88	; 0x58
 800091e:	7267      	strb	r7, [r4, #9]
 8000920:	f3c8 1003 	ubfx	r0, r8, #4, #4
 8000924:	72a0      	strb	r0, [r4, #10]
 8000926:	201e      	movs	r0, #30
 8000928:	72e0      	strb	r0, [r4, #11]
 800092a:	210a      	movs	r1, #10
 800092c:	9803      	ldr	r0, [sp, #12]
 800092e:	f000 fd33 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8000932:	0147      	lsls	r7, r0, #5
 8000934:	2109      	movs	r1, #9
 8000936:	9803      	ldr	r0, [sp, #12]
 8000938:	f000 fd2e 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 800093c:	8260      	strh	r0, [r4, #18]
 800093e:	e01d      	b.n	800097c <MP3D_SPCORP_Symbol_026+0x13c>
 8000940:	2008      	movs	r0, #8
 8000942:	73e0      	strb	r0, [r4, #15]
 8000944:	3797      	adds	r7, #151	; 0x97
 8000946:	7267      	strb	r7, [r4, #9]
 8000948:	f884 900a 	strb.w	r9, [r4, #10]
 800094c:	2027      	movs	r0, #39	; 0x27
 800094e:	e7eb      	b.n	8000928 <MP3D_SPCORP_Symbol_026+0xe8>
 8000950:	e7ff      	b.n	8000952 <MP3D_SPCORP_Symbol_026+0x112>
 8000952:	f884 9007 	strb.w	r9, [r4, #7]
 8000956:	f884 9008 	strb.w	r9, [r4, #8]
 800095a:	210f      	movs	r1, #15
 800095c:	9803      	ldr	r0, [sp, #12]
 800095e:	f000 fd1b 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8000962:	4607      	mov	r7, r0
 8000964:	2104      	movs	r1, #4
 8000966:	9803      	ldr	r0, [sp, #12]
 8000968:	f000 fd16 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 800096c:	73e0      	strb	r0, [r4, #15]
 800096e:	2103      	movs	r1, #3
 8000970:	9803      	ldr	r0, [sp, #12]
 8000972:	f000 fd11 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8000976:	7420      	strb	r0, [r4, #16]
 8000978:	203f      	movs	r0, #63	; 0x3f
 800097a:	7460      	strb	r0, [r4, #17]
 800097c:	0ab8      	lsrs	r0, r7, #10
 800097e:	7320      	strb	r0, [r4, #12]
 8000980:	f3c7 1044 	ubfx	r0, r7, #5, #5
 8000984:	7360      	strb	r0, [r4, #13]
 8000986:	f007 001f 	and.w	r0, r7, #31
 800098a:	73a0      	strb	r0, [r4, #14]
 800098c:	88a0      	ldrh	r0, [r4, #4]
 800098e:	2704      	movs	r7, #4
 8000990:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000994:	d200      	bcs.n	8000998 <MP3D_SPCORP_Symbol_026+0x158>
 8000996:	2700      	movs	r7, #0
 8000998:	f008 010f 	and.w	r1, r8, #15
 800099c:	9803      	ldr	r0, [sp, #12]
 800099e:	f000 fcfb 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 80009a2:	4438      	add	r0, r7
 80009a4:	7520      	strb	r0, [r4, #20]
 80009a6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80009aa:	7560      	strb	r0, [r4, #21]
 80009ac:	012d      	lsls	r5, r5, #4
 80009ae:	3416      	adds	r4, #22
 80009b0:	1e76      	subs	r6, r6, #1
 80009b2:	f47f af6e 	bne.w	8000892 <MP3D_SPCORP_Symbol_026+0x52>
 80009b6:	9800      	ldr	r0, [sp, #0]
 80009b8:	e7aa      	b.n	8000910 <MP3D_SPCORP_Symbol_026+0xd0>

080009ba <MP3D_SPCORP_Symbol_015>:
 80009ba:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009be:	f500 57ef 	add.w	r7, r0, #7648	; 0x1de0
 80009c2:	4604      	mov	r4, r0
 80009c4:	f850 1bd8 	ldr.w	r1, [r0], #216
 80009c8:	46bb      	mov	fp, r7
 80009ca:	4682      	mov	sl, r0
 80009cc:	f1b1 3fff 	cmp.w	r1, #4294967295
 80009d0:	da31      	bge.n	8000a36 <MP3D_SPCORP_Symbol_015+0x7c>
 80009d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d6:	f7ff fd39 	bl	800044c <MP3D_SPCORP_Symbol_004>
 80009da:	b118      	cbz	r0, 80009e4 <MP3D_SPCORP_Symbol_015+0x2a>
 80009dc:	f06f 0001 	mvn.w	r0, #1
 80009e0:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009e4:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 80009e8:	f3c0 41c0 	ubfx	r1, r0, #19, #1
 80009ec:	f3c0 5200 	ubfx	r2, r0, #20, #1
 80009f0:	4411      	add	r1, r2
 80009f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80009f6:	f3c0 2081 	ubfx	r0, r0, #10, #2
 80009fa:	180d      	adds	r5, r1, r0
 80009fc:	f994 00d7 	ldrsb.w	r0, [r4, #215]	; 0xd7
 8000a00:	42a8      	cmp	r0, r5
 8000a02:	d006      	beq.n	8000a12 <MP3D_SPCORP_Symbol_015+0x58>
 8000a04:	4629      	mov	r1, r5
 8000a06:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8000a0a:	f000 fabf 	bl	8000f8c <mp3d_UnpackSfb>
 8000a0e:	f884 50d7 	strb.w	r5, [r4, #215]	; 0xd7
 8000a12:	4651      	mov	r1, sl
 8000a14:	f104 0018 	add.w	r0, r4, #24
 8000a18:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
 8000a1c:	f7ff ff10 	bl	8000840 <MP3D_SPCORP_Symbol_026>
 8000a20:	1e01      	subs	r1, r0, #0
 8000a22:	da02      	bge.n	8000a2a <MP3D_SPCORP_Symbol_015+0x70>
 8000a24:	f06f 0002 	mvn.w	r0, #2
 8000a28:	e7da      	b.n	80009e0 <MP3D_SPCORP_Symbol_015+0x26>
 8000a2a:	4650      	mov	r0, sl
 8000a2c:	f7ff fca0 	bl	8000370 <MP3D_SPCORP_Symbol_002>
 8000a30:	b1f0      	cbz	r0, 8000a70 <MP3D_SPCORP_Symbol_015+0xb6>
 8000a32:	2000      	movs	r0, #0
 8000a34:	6020      	str	r0, [r4, #0]
 8000a36:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8000a40:	2903      	cmp	r1, #3
 8000a42:	d000      	beq.n	8000a46 <MP3D_SPCORP_Symbol_015+0x8c>
 8000a44:	2002      	movs	r0, #2
 8000a46:	9002      	str	r0, [sp, #8]
 8000a48:	6820      	ldr	r0, [r4, #0]
 8000a4a:	ea4f 0860 	mov.w	r8, r0, asr #1
 8000a4e:	f000 0501 	and.w	r5, r0, #1
 8000a52:	9802      	ldr	r0, [sp, #8]
 8000a54:	fb08 5000 	mla	r0, r8, r0, r5
 8000a58:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000a5c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8000a60:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8000a64:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 8000a68:	3618      	adds	r6, #24
 8000a6a:	eb07 2700 	add.w	r7, r7, r0, lsl #8
 8000a6e:	e03c      	b.n	8000aea <MP3D_SPCORP_Symbol_015+0x130>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	e7b4      	b.n	80009e0 <MP3D_SPCORP_Symbol_015+0x26>
 8000a76:	7ab0      	ldrb	r0, [r6, #10]
 8000a78:	7af1      	ldrb	r1, [r6, #11]
 8000a7a:	4408      	add	r0, r1
 8000a7c:	eba7 0080 	sub.w	r0, r7, r0, lsl #2
 8000a80:	f600 09fc 	addw	r9, r0, #2300	; 0x8fc
 8000a84:	8831      	ldrh	r1, [r6, #0]
 8000a86:	4650      	mov	r0, sl
 8000a88:	f7ff fce0 	bl	800044c <MP3D_SPCORP_Symbol_004>
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	d1a7      	bne.n	80009e0 <MP3D_SPCORP_Symbol_015+0x26>
 8000a90:	7d72      	ldrb	r2, [r6, #21]
 8000a92:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8000a96:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8000a9a:	e9cd 2500 	strd	r2, r5, [sp]
 8000a9e:	4420      	add	r0, r4
 8000aa0:	f642 71e4 	movw	r1, #12260	; 0x2fe4
 8000aa4:	4408      	add	r0, r1
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	4632      	mov	r2, r6
 8000aaa:	4651      	mov	r1, sl
 8000aac:	f7ff fe11 	bl	80006d2 <MP3D_SPCORP_Symbol_025>
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	4632      	mov	r2, r6
 8000ab4:	4651      	mov	r1, sl
 8000ab6:	e003      	b.n	8000ac0 <MP3D_SPCORP_Symbol_015+0x106>
 8000ab8:	0800cc9c 	.word	0x0800cc9c
 8000abc:	0800ced6 	.word	0x0800ced6
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	f000 fedf 	bl	8001884 <MP3D_SPCORP_Symbol_027>
 8000ac6:	1bc0      	subs	r0, r0, r7
 8000ac8:	eb04 0145 	add.w	r1, r4, r5, lsl #1
 8000acc:	1080      	asrs	r0, r0, #2
 8000ace:	8208      	strh	r0, [r1, #16]
 8000ad0:	4650      	mov	r0, sl
 8000ad2:	f7ff fc89 	bl	80003e8 <MP3D_SPCORP_Symbol_003>
 8000ad6:	9802      	ldr	r0, [sp, #8]
 8000ad8:	6821      	ldr	r1, [r4, #0]
 8000ada:	f1c0 0003 	rsb	r0, r0, #3
 8000ade:	4408      	add	r0, r1
 8000ae0:	1c6d      	adds	r5, r5, #1
 8000ae2:	3616      	adds	r6, #22
 8000ae4:	f507 6710 	add.w	r7, r7, #2304	; 0x900
 8000ae8:	6020      	str	r0, [r4, #0]
 8000aea:	9802      	ldr	r0, [sp, #8]
 8000aec:	4285      	cmp	r5, r0
 8000aee:	dbc2      	blt.n	8000a76 <MP3D_SPCORP_Symbol_015+0xbc>
 8000af0:	9902      	ldr	r1, [sp, #8]
 8000af2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8000af6:	fb08 f001 	mul.w	r0, r8, r1
 8000afa:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000afe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8000b02:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8000b06:	3518      	adds	r5, #24
 8000b08:	f3c3 1081 	ubfx	r0, r3, #6, #2
 8000b0c:	2801      	cmp	r0, #1
 8000b0e:	d117      	bne.n	8000b40 <MP3D_SPCORP_Symbol_015+0x186>
 8000b10:	f013 0f30 	tst.w	r3, #48	; 0x30
 8000b14:	d014      	beq.n	8000b40 <MP3D_SPCORP_Symbol_015+0x186>
 8000b16:	8a21      	ldrh	r1, [r4, #16]
 8000b18:	8a60      	ldrh	r0, [r4, #18]
 8000b1a:	4281      	cmp	r1, r0
 8000b1c:	d800      	bhi.n	8000b20 <MP3D_SPCORP_Symbol_015+0x166>
 8000b1e:	4601      	mov	r1, r0
 8000b20:	8261      	strh	r1, [r4, #18]
 8000b22:	8221      	strh	r1, [r4, #16]
 8000b24:	b161      	cbz	r1, 8000b40 <MP3D_SPCORP_Symbol_015+0x186>
 8000b26:	06d8      	lsls	r0, r3, #27
 8000b28:	d507      	bpl.n	8000b3a <MP3D_SPCORP_Symbol_015+0x180>
 8000b2a:	f243 000b 	movw	r0, #12299	; 0x300b
 8000b2e:	1821      	adds	r1, r4, r0
 8000b30:	462a      	mov	r2, r5
 8000b32:	4658      	mov	r0, fp
 8000b34:	f001 fcfa 	bl	800252c <MP3D_SPCORP_Symbol_029>
 8000b38:	e002      	b.n	8000b40 <MP3D_SPCORP_Symbol_015+0x186>
 8000b3a:	4658      	mov	r0, fp
 8000b3c:	f001 fca8 	bl	8002490 <MP3D_SPCORP_Symbol_031>
 8000b40:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8000b44:	f04f 0900 	mov.w	r9, #0
 8000b48:	9001      	str	r0, [sp, #4]
 8000b4a:	e067      	b.n	8000c1c <MP3D_SPCORP_Symbol_015+0x262>
 8000b4c:	7a28      	ldrb	r0, [r5, #8]
 8000b4e:	2600      	movs	r6, #0
 8000b50:	b128      	cbz	r0, 8000b5e <MP3D_SPCORP_Symbol_015+0x1a4>
 8000b52:	f894 00d7 	ldrb.w	r0, [r4, #215]	; 0xd7
 8000b56:	2602      	movs	r6, #2
 8000b58:	2802      	cmp	r0, #2
 8000b5a:	d100      	bne.n	8000b5e <MP3D_SPCORP_Symbol_015+0x1a4>
 8000b5c:	2604      	movs	r6, #4
 8000b5e:	7ae8      	ldrb	r0, [r5, #11]
 8000b60:	b1c8      	cbz	r0, 8000b96 <MP3D_SPCORP_Symbol_015+0x1dc>
 8000b62:	eb04 0849 	add.w	r8, r4, r9, lsl #1
 8000b66:	4270      	negs	r0, r6
 8000b68:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8000b6c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8000b70:	eb01 0240 	add.w	r2, r1, r0, lsl #1
 8000b74:	7a68      	ldrb	r0, [r5, #9]
 8000b76:	7aa9      	ldrb	r1, [r5, #10]
 8000b78:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
 8000b7c:	4408      	add	r0, r1
 8000b7e:	1941      	adds	r1, r0, r5
 8000b80:	f1a6 0a01 	sub.w	sl, r6, #1
 8000b84:	eb0b 00c7 	add.w	r0, fp, r7, lsl #3
 8000b88:	f001 fc28 	bl	80023dc <MP3D_SPCORP_Symbol_032>
 8000b8c:	eb00 0147 	add.w	r1, r0, r7, lsl #1
 8000b90:	f8a8 1010 	strh.w	r1, [r8, #16]
 8000b94:	e001      	b.n	8000b9a <MP3D_SPCORP_Symbol_015+0x1e0>
 8000b96:	f04f 0a1f 	mov.w	sl, #31
 8000b9a:	eb04 0049 	add.w	r0, r4, r9, lsl #1
 8000b9e:	8a01      	ldrh	r1, [r0, #16]
 8000ba0:	8a82      	ldrh	r2, [r0, #20]
 8000ba2:	4291      	cmp	r1, r2
 8000ba4:	d900      	bls.n	8000ba8 <MP3D_SPCORP_Symbol_015+0x1ee>
 8000ba6:	460a      	mov	r2, r1
 8000ba8:	8281      	strh	r1, [r0, #20]
 8000baa:	3211      	adds	r2, #17
 8000bac:	f640 6039 	movw	r0, #3641	; 0xe39
 8000bb0:	4342      	muls	r2, r0
 8000bb2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000bb6:	45d0      	cmp	r8, sl
 8000bb8:	da00      	bge.n	8000bbc <MP3D_SPCORP_Symbol_015+0x202>
 8000bba:	46c2      	mov	sl, r8
 8000bbc:	9801      	ldr	r0, [sp, #4]
 8000bbe:	f8d0 7d94 	ldr.w	r7, [r0, #3476]	; 0xd94
 8000bc2:	b14f      	cbz	r7, 8000bd8 <MP3D_SPCORP_Symbol_015+0x21e>
 8000bc4:	79e8      	ldrb	r0, [r5, #7]
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8000bcc:	2802      	cmp	r0, #2
 8000bce:	d000      	beq.n	8000bd2 <MP3D_SPCORP_Symbol_015+0x218>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	464a      	mov	r2, r9
 8000bd4:	4658      	mov	r0, fp
 8000bd6:	47b8      	blx	r7
 8000bd8:	f1ba 0000 	subs.w	r0, sl, #0
 8000bdc:	dd03      	ble.n	8000be6 <MP3D_SPCORP_Symbol_015+0x22c>
 8000bde:	4601      	mov	r1, r0
 8000be0:	4658      	mov	r0, fp
 8000be2:	f000 fd5b 	bl	800169c <MP3D_SPCORP_Symbol_001>
 8000be6:	4640      	mov	r0, r8
 8000be8:	f1b8 0f20 	cmp.w	r8, #32
 8000bec:	da01      	bge.n	8000bf2 <MP3D_SPCORP_Symbol_015+0x238>
 8000bee:	1c40      	adds	r0, r0, #1
 8000bf0:	4680      	mov	r8, r0
 8000bf2:	45b0      	cmp	r8, r6
 8000bf4:	dc00      	bgt.n	8000bf8 <MP3D_SPCORP_Symbol_015+0x23e>
 8000bf6:	1c70      	adds	r0, r6, #1
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	eb09 00c9 	add.w	r0, r9, r9, lsl #3
 8000bfe:	eb04 11c0 	add.w	r1, r4, r0, lsl #7
 8000c02:	79eb      	ldrb	r3, [r5, #7]
 8000c04:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8000c08:	4632      	mov	r2, r6
 8000c0a:	f1ab 0048 	sub.w	r0, fp, #72	; 0x48
 8000c0e:	f001 fbb5 	bl	800237c <MP3D_SPCORP_Symbol_028>
 8000c12:	f109 0901 	add.w	r9, r9, #1
 8000c16:	3516      	adds	r5, #22
 8000c18:	f50b 6b10 	add.w	fp, fp, #2304	; 0x900
 8000c1c:	9902      	ldr	r1, [sp, #8]
 8000c1e:	4589      	cmp	r9, r1
 8000c20:	db94      	blt.n	8000b4c <MP3D_SPCORP_Symbol_015+0x192>
 8000c22:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000c26:	0300      	lsls	r0, r0, #12
 8000c28:	6820      	ldr	r0, [r4, #0]
 8000c2a:	d502      	bpl.n	8000c32 <MP3D_SPCORP_Symbol_015+0x278>
 8000c2c:	2804      	cmp	r0, #4
 8000c2e:	d002      	beq.n	8000c36 <MP3D_SPCORP_Symbol_015+0x27c>
 8000c30:	e004      	b.n	8000c3c <MP3D_SPCORP_Symbol_015+0x282>
 8000c32:	2802      	cmp	r0, #2
 8000c34:	d102      	bne.n	8000c3c <MP3D_SPCORP_Symbol_015+0x282>
 8000c36:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3a:	6020      	str	r0, [r4, #0]
 8000c3c:	f44f 7010 	mov.w	r0, #576	; 0x240
 8000c40:	e6ce      	b.n	80009e0 <MP3D_SPCORP_Symbol_015+0x26>

08000c42 <L12_ReadScaleInfo>:
 8000c42:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c46:	4683      	mov	fp, r0
 8000c48:	460c      	mov	r4, r1
 8000c4a:	6900      	ldr	r0, [r0, #16]
 8000c4c:	f000 fa28 	bl	80010a0 <L12_GetSubBandAllocTable>
 8000c50:	4605      	mov	r5, r0
 8000c52:	2100      	movs	r1, #0
 8000c54:	4658      	mov	r0, fp
 8000c56:	f7ff fb8b 	bl	8000370 <MP3D_SPCORP_Symbol_002>
 8000c5a:	f04f 0a00 	mov.w	sl, #0
 8000c5e:	1ce7      	adds	r7, r4, #3
 8000c60:	46d0      	mov	r8, sl
 8000c62:	4eff      	ldr	r6, [pc, #1020]	; (8001060 <ReadScaleFactors+0x50>)
 8000c64:	f894 9000 	ldrb.w	r9, [r4]
 8000c68:	f1a8 0801 	sub.w	r8, r8, #1
 8000c6c:	f1b8 0f00 	cmp.w	r8, #0
 8000c70:	dc06      	bgt.n	8000c80 <L12_ReadScaleInfo+0x3e>
 8000c72:	f895 8002 	ldrb.w	r8, [r5, #2]
 8000c76:	f895 a001 	ldrb.w	sl, [r5, #1]
 8000c7a:	f915 0b03 	ldrsb.w	r0, [r5], #3
 8000c7e:	4406      	add	r6, r0
 8000c80:	4651      	mov	r1, sl
 8000c82:	4658      	mov	r0, fp
 8000c84:	f000 fb88 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8000c88:	5c30      	ldrb	r0, [r6, r0]
 8000c8a:	f807 0b01 	strb.w	r0, [r7], #1
 8000c8e:	78a2      	ldrb	r2, [r4, #2]
 8000c90:	454a      	cmp	r2, r9
 8000c92:	da04      	bge.n	8000c9e <L12_ReadScaleInfo+0x5c>
 8000c94:	4651      	mov	r1, sl
 8000c96:	4658      	mov	r0, fp
 8000c98:	f000 fb7e 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8000c9c:	5c30      	ldrb	r0, [r6, r0]
 8000c9e:	7861      	ldrb	r1, [r4, #1]
 8000ca0:	b901      	cbnz	r1, 8000ca4 <L12_ReadScaleInfo+0x62>
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f807 0b01 	strb.w	r0, [r7], #1
 8000ca8:	f1b9 0901 	subs.w	r9, r9, #1
 8000cac:	d1dc      	bne.n	8000c68 <L12_ReadScaleInfo+0x26>
 8000cae:	7820      	ldrb	r0, [r4, #0]
 8000cb0:	f104 0543 	add.w	r5, r4, #67	; 0x43
 8000cb4:	0047      	lsls	r7, r0, #1
 8000cb6:	1ce6      	adds	r6, r4, #3
 8000cb8:	46a9      	mov	r9, r5
 8000cba:	f04f 0802 	mov.w	r8, #2
 8000cbe:	f816 1b01 	ldrb.w	r1, [r6], #1
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	b151      	cbz	r1, 8000cdc <L12_ReadScaleInfo+0x9a>
 8000cc6:	f8db 1010 	ldr.w	r1, [fp, #16]
 8000cca:	4640      	mov	r0, r8
 8000ccc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8000cd0:	0789      	lsls	r1, r1, #30
 8000cd2:	d003      	beq.n	8000cdc <L12_ReadScaleInfo+0x9a>
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4658      	mov	r0, fp
 8000cd8:	f000 fb5e 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8000cdc:	f805 0b01 	strb.w	r0, [r5], #1
 8000ce0:	1e7f      	subs	r7, r7, #1
 8000ce2:	d1ec      	bne.n	8000cbe <L12_ReadScaleInfo+0x7c>
 8000ce4:	f104 0384 	add.w	r3, r4, #132	; 0x84
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	7820      	ldrb	r0, [r4, #0]
 8000cec:	464a      	mov	r2, r9
 8000cee:	0043      	lsls	r3, r0, #1
 8000cf0:	1ce1      	adds	r1, r4, #3
 8000cf2:	4658      	mov	r0, fp
 8000cf4:	f000 fa11 	bl	800111a <L12_ReadScaleFactors>
 8000cf8:	78a1      	ldrb	r1, [r4, #2]
 8000cfa:	1ce0      	adds	r0, r4, #3
 8000cfc:	b141      	cbz	r1, 8000d10 <L12_ReadScaleInfo+0xce>
 8000cfe:	7862      	ldrb	r2, [r4, #1]
 8000d00:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8000d04:	1c40      	adds	r0, r0, #1
 8000d06:	2200      	movs	r2, #0
 8000d08:	f800 2b02 	strb.w	r2, [r0], #2
 8000d0c:	1e49      	subs	r1, r1, #1
 8000d0e:	d1fb      	bne.n	8000d08 <L12_ReadScaleInfo+0xc6>
 8000d10:	2000      	movs	r0, #0
 8000d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d16 <MP3D_SPCORP_Symbol_014>:
 8000d16:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f100 08d8 	add.w	r8, r0, #216	; 0xd8
 8000d20:	f500 7756 	add.w	r7, r0, #856	; 0x358
 8000d24:	f641 5098 	movw	r0, #7576	; 0x1d98
 8000d28:	1826      	adds	r6, r4, r0
 8000d2a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8000d2e:	2501      	movs	r5, #1
 8000d30:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8000d34:	46b1      	mov	r9, r6
 8000d36:	0780      	lsls	r0, r0, #30
 8000d38:	d000      	beq.n	8000d3c <MP3D_SPCORP_Symbol_014+0x26>
 8000d3a:	2503      	movs	r5, #3
 8000d3c:	6820      	ldr	r0, [r4, #0]
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	da11      	bge.n	8000d66 <MP3D_SPCORP_Symbol_014+0x50>
 8000d42:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000d46:	2d01      	cmp	r5, #1
 8000d48:	d001      	beq.n	8000d4e <MP3D_SPCORP_Symbol_014+0x38>
 8000d4a:	f240 517c 	movw	r1, #1404	; 0x57c
 8000d4e:	4640      	mov	r0, r8
 8000d50:	f7ff fb7c 	bl	800044c <MP3D_SPCORP_Symbol_004>
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d141      	bne.n	8000ddc <MP3D_SPCORP_Symbol_014+0xc6>
 8000d58:	4639      	mov	r1, r7
 8000d5a:	4640      	mov	r0, r8
 8000d5c:	f7ff ff71 	bl	8000c42 <L12_ReadScaleInfo>
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d13b      	bne.n	8000ddc <MP3D_SPCORP_Symbol_014+0xc6>
 8000d64:	6020      	str	r0, [r4, #0]
 8000d66:	2d01      	cmp	r5, #1
 8000d68:	d101      	bne.n	8000d6e <MP3D_SPCORP_Symbol_014+0x58>
 8000d6a:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8000d6e:	f06f 0b02 	mvn.w	fp, #2
 8000d72:	f44f 5a90 	mov.w	sl, #4608	; 0x1200
 8000d76:	4640      	mov	r0, r8
 8000d78:	f7ff fc8f 	bl	800069a <MP3D_SPCORP_Symbol_008>
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	db2c      	blt.n	8000dda <MP3D_SPCORP_Symbol_014+0xc4>
 8000d80:	4651      	mov	r1, sl
 8000d82:	4550      	cmp	r0, sl
 8000d84:	dc00      	bgt.n	8000d88 <MP3D_SPCORP_Symbol_014+0x72>
 8000d86:	4601      	mov	r1, r0
 8000d88:	4640      	mov	r0, r8
 8000d8a:	f7ff fb5f 	bl	800044c <MP3D_SPCORP_Symbol_004>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d124      	bne.n	8000ddc <MP3D_SPCORP_Symbol_014+0xc6>
 8000d92:	462b      	mov	r3, r5
 8000d94:	463a      	mov	r2, r7
 8000d96:	4641      	mov	r1, r8
 8000d98:	4630      	mov	r0, r6
 8000d9a:	f000 fa2e 	bl	80011fa <L12_DequantizeGranule>
 8000d9e:	4606      	mov	r6, r0
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	1d00      	adds	r0, r0, #4
 8000da4:	6020      	str	r0, [r4, #0]
 8000da6:	280c      	cmp	r0, #12
 8000da8:	da01      	bge.n	8000dae <MP3D_SPCORP_Symbol_014+0x98>
 8000daa:	2d01      	cmp	r5, #1
 8000dac:	d0e3      	beq.n	8000d76 <MP3D_SPCORP_Symbol_014+0x60>
 8000dae:	6821      	ldr	r1, [r4, #0]
 8000db0:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000db4:	1089      	asrs	r1, r1, #2
 8000db6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8000dba:	3908      	subs	r1, #8
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	f000 f9df 	bl	8001182 <L12_ApplyScf384>
 8000dc4:	6820      	ldr	r0, [r4, #0]
 8000dc6:	280c      	cmp	r0, #12
 8000dc8:	d102      	bne.n	8000dd0 <MP3D_SPCORP_Symbol_014+0xba>
 8000dca:	f04f 30ff 	mov.w	r0, #4294967295
 8000dce:	6020      	str	r0, [r4, #0]
 8000dd0:	4640      	mov	r0, r8
 8000dd2:	f7ff fc62 	bl	800069a <MP3D_SPCORP_Symbol_008>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	da02      	bge.n	8000de0 <MP3D_SPCORP_Symbol_014+0xca>
 8000dda:	4658      	mov	r0, fp
 8000ddc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8000de0:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8000de4:	e7fa      	b.n	8000ddc <MP3D_SPCORP_Symbol_014+0xc6>

08000de6 <MP3D_SPCORP_Symbol_034>:
 8000de6:	2200      	movs	r2, #0
 8000de8:	c004      	stmia	r0!, {r2}
 8000dea:	1e49      	subs	r1, r1, #1
 8000dec:	d1fc      	bne.n	8000de8 <MP3D_SPCORP_Symbol_034+0x2>
 8000dee:	4770      	bx	lr

08000df0 <OutputInternalPCMBuffer>:
 8000df0:	b570      	push	{r4, r5, r6, lr}
 8000df2:	4605      	mov	r5, r0
 8000df4:	6880      	ldr	r0, [r0, #8]
 8000df6:	460c      	mov	r4, r1
 8000df8:	4616      	mov	r6, r2
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	d800      	bhi.n	8000e00 <OutputInternalPCMBuffer+0x10>
 8000dfe:	4606      	mov	r6, r0
 8000e00:	1b80      	subs	r0, r0, r6
 8000e02:	60a8      	str	r0, [r5, #8]
 8000e04:	b1b6      	cbz	r6, 8000e34 <OutputInternalPCMBuffer+0x44>
 8000e06:	f641 5098 	movw	r0, #7576	; 0x1d98
 8000e0a:	4633      	mov	r3, r6
 8000e0c:	4428      	add	r0, r5
 8000e0e:	686a      	ldr	r2, [r5, #4]
 8000e10:	f000 fb76 	bl	8001500 <MP3D_SPCORP_Symbol_013>
 8000e14:	6868      	ldr	r0, [r5, #4]
 8000e16:	4430      	add	r0, r6
 8000e18:	6068      	str	r0, [r5, #4]
 8000e1a:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
 8000e1e:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8000e22:	2803      	cmp	r0, #3
 8000e24:	d106      	bne.n	8000e34 <OutputInternalPCMBuffer+0x44>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e002      	b.n	8000e30 <OutputInternalPCMBuffer+0x40>
 8000e2a:	8821      	ldrh	r1, [r4, #0]
 8000e2c:	8061      	strh	r1, [r4, #2]
 8000e2e:	1d24      	adds	r4, r4, #4
 8000e30:	1e40      	subs	r0, r0, #1
 8000e32:	d2fa      	bcs.n	8000e2a <OutputInternalPCMBuffer+0x3a>
 8000e34:	4630      	mov	r0, r6
 8000e36:	bd70      	pop	{r4, r5, r6, pc}

08000e38 <SpiritMP3DecoderInit>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	460d      	mov	r5, r1
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	4616      	mov	r6, r2
 8000e40:	f640 410e 	movw	r1, #3086	; 0xc0e
 8000e44:	f7ff ffcf 	bl	8000de6 <MP3D_SPCORP_Symbol_034>
 8000e48:	f604 4094 	addw	r0, r4, #3220	; 0xc94
 8000e4c:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8000e50:	60e0      	str	r0, [r4, #12]
 8000e52:	f504 708b 	add.w	r0, r4, #278	; 0x116
 8000e56:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
 8000e5a:	2010      	movs	r0, #16
 8000e5c:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	6020      	str	r0, [r4, #0]
 8000e66:	e9c4 5343 	strd	r5, r3, [r4, #268]	; 0x10c
 8000e6a:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
 8000e6e:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8000e72:	f8c4 6d94 	str.w	r6, [r4, #3476]	; 0xd94
 8000e76:	bd70      	pop	{r4, r5, r6, pc}

08000e78 <SpiritMP3Decode>:
 8000e78:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	f8d0 80f8 	ldr.w	r8, [r0, #248]	; 0xf8
 8000e82:	6880      	ldr	r0, [r0, #8]
 8000e84:	b081      	sub	sp, #4
 8000e86:	460f      	mov	r7, r1
 8000e88:	4692      	mov	sl, r2
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	b128      	cbz	r0, 8000e9a <SpiritMP3Decode+0x22>
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff ffae 	bl	8000df0 <OutputInternalPCMBuffer>
 8000e94:	4606      	mov	r6, r0
 8000e96:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8000e9a:	45b2      	cmp	sl, r6
 8000e9c:	d806      	bhi.n	8000eac <SpiritMP3Decode+0x34>
 8000e9e:	9804      	ldr	r0, [sp, #16]
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d06e      	beq.n	8000f82 <SpiritMP3Decode+0x10a>
 8000ea4:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d165      	bne.n	8000f78 <SpiritMP3Decode+0x100>
 8000eac:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 8000eb0:	9000      	str	r0, [sp, #0]
 8000eb2:	f641 5098 	movw	r0, #7576	; 0x1d98
 8000eb6:	f04f 3bff 	mov.w	fp, #4294967295
 8000eba:	eb04 0900 	add.w	r9, r4, r0
 8000ebe:	6820      	ldr	r0, [r4, #0]
 8000ec0:	1c40      	adds	r0, r0, #1
 8000ec2:	d106      	bne.n	8000ed2 <SpiritMP3Decode+0x5a>
 8000ec4:	9800      	ldr	r0, [sp, #0]
 8000ec6:	f7ff fb20 	bl	800050a <MP3D_SPCORP_Symbol_010>
 8000eca:	bbb0      	cbnz	r0, 8000f3a <SpiritMP3Decode+0xc2>
 8000ecc:	6820      	ldr	r0, [r4, #0]
 8000ece:	1e40      	subs	r0, r0, #1
 8000ed0:	6020      	str	r0, [r4, #0]
 8000ed2:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000ed6:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8000eda:	2801      	cmp	r0, #1
 8000edc:	4620      	mov	r0, r4
 8000ede:	d008      	beq.n	8000ef2 <SpiritMP3Decode+0x7a>
 8000ee0:	f7ff ff19 	bl	8000d16 <MP3D_SPCORP_Symbol_014>
 8000ee4:	4605      	mov	r5, r0
 8000ee6:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8000eea:	ea00 0808 	and.w	r8, r0, r8
 8000eee:	b118      	cbz	r0, 8000ef8 <SpiritMP3Decode+0x80>
 8000ef0:	e013      	b.n	8000f1a <SpiritMP3Decode+0xa2>
 8000ef2:	f7ff fd62 	bl	80009ba <MP3D_SPCORP_Symbol_015>
 8000ef6:	e7f5      	b.n	8000ee4 <SpiritMP3Decode+0x6c>
 8000ef8:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000efc:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8000f00:	2801      	cmp	r0, #1
 8000f02:	d105      	bne.n	8000f10 <SpiritMP3Decode+0x98>
 8000f04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f08:	f504 7056 	add.w	r0, r4, #856	; 0x358
 8000f0c:	f7ff ff6b 	bl	8000de6 <MP3D_SPCORP_Symbol_034>
 8000f10:	f240 4192 	movw	r1, #1170	; 0x492
 8000f14:	4648      	mov	r0, r9
 8000f16:	f7ff ff66 	bl	8000de6 <MP3D_SPCORP_Symbol_034>
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	da05      	bge.n	8000f2a <SpiritMP3Decode+0xb2>
 8000f1e:	1c68      	adds	r0, r5, #1
 8000f20:	d00c      	beq.n	8000f3c <SpiritMP3Decode+0xc4>
 8000f22:	1ca8      	adds	r0, r5, #2
 8000f24:	d026      	beq.n	8000f74 <SpiritMP3Decode+0xfc>
 8000f26:	1ce8      	adds	r0, r5, #3
 8000f28:	d00b      	beq.n	8000f42 <SpiritMP3Decode+0xca>
 8000f2a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8000f34:	2803      	cmp	r0, #3
 8000f36:	d109      	bne.n	8000f4c <SpiritMP3Decode+0xd4>
 8000f38:	e007      	b.n	8000f4a <SpiritMP3Decode+0xd2>
 8000f3a:	e01b      	b.n	8000f74 <SpiritMP3Decode+0xfc>
 8000f3c:	f8c4 b000 	str.w	fp, [r4]
 8000f40:	e016      	b.n	8000f70 <SpiritMP3Decode+0xf8>
 8000f42:	9800      	ldr	r0, [sp, #0]
 8000f44:	f7ff fbb1 	bl	80006aa <MP3D_SPCORP_Symbol_009>
 8000f48:	e7f8      	b.n	8000f3c <SpiritMP3Decode+0xc4>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	116a      	asrs	r2, r5, #5
 8000f4e:	f104 010c 	add.w	r1, r4, #12
 8000f52:	4648      	mov	r0, r9
 8000f54:	f002 fa44 	bl	80033e0 <MP3D_SPCORP_Symbol_033>
 8000f58:	2000      	movs	r0, #0
 8000f5a:	e9c4 0501 	strd	r0, r5, [r4, #4]
 8000f5e:	ebaa 0206 	sub.w	r2, sl, r6
 8000f62:	4639      	mov	r1, r7
 8000f64:	4620      	mov	r0, r4
 8000f66:	f7ff ff43 	bl	8000df0 <OutputInternalPCMBuffer>
 8000f6a:	4406      	add	r6, r0
 8000f6c:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8000f70:	45b2      	cmp	sl, r6
 8000f72:	d8a4      	bhi.n	8000ebe <SpiritMP3Decode+0x46>
 8000f74:	9804      	ldr	r0, [sp, #16]
 8000f76:	b120      	cbz	r0, 8000f82 <SpiritMP3Decode+0x10a>
 8000f78:	4642      	mov	r2, r8
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	9904      	ldr	r1, [sp, #16]
 8000f7e:	f000 f9b9 	bl	80012f4 <SpiritMP3GetLastFrameInfo>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e4c4      	b.n	8000910 <MP3D_SPCORP_Symbol_026+0xd0>

08000f86 <SpiritMP3DecoderGetPersistentSize>:
 8000f86:	f243 0038 	movw	r0, #12344	; 0x3038
 8000f8a:	4770      	bx	lr

08000f8c <mp3d_UnpackSfb>:
 8000f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <ReadScaleFactors+0x54>)
 8000f92:	4681      	mov	r9, r0
 8000f94:	f100 0266 	add.w	r2, r0, #102	; 0x66
 8000f98:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8000f9c:	2603      	movs	r6, #3
 8000f9e:	eb03 0840 	add.w	r8, r3, r0, lsl #1
 8000fa2:	f04f 0a00 	mov.w	sl, #0
 8000fa6:	f44f 7b90 	mov.w	fp, #288	; 0x120
 8000faa:	2000      	movs	r0, #0
 8000fac:	465b      	mov	r3, fp
 8000fae:	f802 a901 	strb.w	sl, [r2], #-1
 8000fb2:	f838 5b02 	ldrh.w	r5, [r8], #2
 8000fb6:	122c      	asrs	r4, r5, #8
 8000fb8:	b2ef      	uxtb	r7, r5
 8000fba:	4378      	muls	r0, r7
 8000fbc:	3080      	adds	r0, #128	; 0x80
 8000fbe:	4635      	mov	r5, r6
 8000fc0:	1200      	asrs	r0, r0, #8
 8000fc2:	b904      	cbnz	r4, 8000fc6 <mp3d_UnpackSfb+0x3a>
 8000fc4:	4638      	mov	r0, r7
 8000fc6:	f000 0cff 	and.w	ip, r0, #255	; 0xff
 8000fca:	1a1b      	subs	r3, r3, r0
 8000fcc:	f802 c901 	strb.w	ip, [r2], #-1
 8000fd0:	1e6d      	subs	r5, r5, #1
 8000fd2:	d1fa      	bne.n	8000fca <mp3d_UnpackSfb+0x3e>
 8000fd4:	1e64      	subs	r4, r4, #1
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	dcef      	bgt.n	8000fba <mp3d_UnpackSfb+0x2e>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1e9      	bne.n	8000fb2 <mp3d_UnpackSfb+0x26>
 8000fde:	1076      	asrs	r6, r6, #1
 8000fe0:	d1e3      	bne.n	8000faa <mp3d_UnpackSfb+0x1e>
 8000fe2:	2206      	movs	r2, #6
 8000fe4:	4648      	mov	r0, r9
 8000fe6:	2905      	cmp	r1, #5
 8000fe8:	dd00      	ble.n	8000fec <mp3d_UnpackSfb+0x60>
 8000fea:	2208      	movs	r2, #8
 8000fec:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8000ff0:	1e52      	subs	r2, r2, #1
 8000ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ff6:	f800 3b01 	strb.w	r3, [r0], #1
 8000ffa:	d1f9      	bne.n	8000ff0 <mp3d_UnpackSfb+0x64>
 8000ffc:	f109 0148 	add.w	r1, r9, #72	; 0x48
 8001000:	780a      	ldrb	r2, [r1, #0]
 8001002:	f800 2b01 	strb.w	r2, [r0], #1
 8001006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800100a:	2a00      	cmp	r2, #0
 800100c:	d1f8      	bne.n	8001000 <mp3d_UnpackSfb+0x74>
 800100e:	e415      	b.n	800083c <MP3D_SPCORP_Symbol_025+0x16a>

08001010 <ReadScaleFactors>:
 8001010:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8001014:	4604      	mov	r4, r0
 8001016:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8001018:	460d      	mov	r5, r1
 800101a:	4693      	mov	fp, r2
 800101c:	f04f 0900 	mov.w	r9, #0
 8001020:	9803      	ldr	r0, [sp, #12]
 8001022:	f810 6b01 	ldrb.w	r6, [r0], #1
 8001026:	9003      	str	r0, [sp, #12]
 8001028:	f81b ab01 	ldrb.w	sl, [fp], #1
 800102c:	b336      	cbz	r6, 800107c <ReadScaleFactors+0x6c>
 800102e:	0738      	lsls	r0, r7, #28
 8001030:	d505      	bpl.n	800103e <ReadScaleFactors+0x2e>
 8001032:	f915 0b01 	ldrsb.w	r0, [r5], #1
 8001036:	1e76      	subs	r6, r6, #1
 8001038:	c401      	stmia	r4!, {r0}
 800103a:	d1fa      	bne.n	8001032 <ReadScaleFactors+0x22>
 800103c:	e01e      	b.n	800107c <ReadScaleFactors+0x6c>
 800103e:	ea5f 000a 	movs.w	r0, sl
 8001042:	d027      	beq.n	8001094 <ReadScaleFactors+0x84>
 8001044:	f04f 38ff 	mov.w	r8, #4294967295
 8001048:	2f00      	cmp	r7, #0
 800104a:	da04      	bge.n	8001056 <ReadScaleFactors+0x46>
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f10a 	lsl.w	r1, r1, sl
 8001052:	f1a1 0801 	sub.w	r8, r1, #1
 8001056:	4651      	mov	r1, sl
 8001058:	980e      	ldr	r0, [sp, #56]	; 0x38
 800105a:	f000 f99d 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 800105e:	e003      	b.n	8001068 <ReadScaleFactors+0x58>
 8001060:	0800ce4c 	.word	0x0800ce4c
 8001064:	0800ccb4 	.word	0x0800ccb4
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	4540      	cmp	r0, r8
 800106e:	d000      	beq.n	8001072 <ReadScaleFactors+0x62>
 8001070:	4601      	mov	r1, r0
 8001072:	f805 1b01 	strb.w	r1, [r5], #1
 8001076:	c401      	stmia	r4!, {r0}
 8001078:	1e76      	subs	r6, r6, #1
 800107a:	d1ec      	bne.n	8001056 <ReadScaleFactors+0x46>
 800107c:	f109 0901 	add.w	r9, r9, #1
 8001080:	007f      	lsls	r7, r7, #1
 8001082:	f1b9 0f04 	cmp.w	r9, #4
 8001086:	dbcb      	blt.n	8001020 <ReadScaleFactors+0x10>
 8001088:	2000      	movs	r0, #0
 800108a:	6020      	str	r0, [r4, #0]
 800108c:	6060      	str	r0, [r4, #4]
 800108e:	60a0      	str	r0, [r4, #8]
 8001090:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8001094:	c401      	stmia	r4!, {r0}
 8001096:	f805 0b01 	strb.w	r0, [r5], #1
 800109a:	1e76      	subs	r6, r6, #1
 800109c:	d1fa      	bne.n	8001094 <ReadScaleFactors+0x84>
 800109e:	e7ed      	b.n	800107c <ReadScaleFactors+0x6c>

080010a0 <L12_GetSubBandAllocTable>:
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	460d      	mov	r5, r1
 80010a4:	4604      	mov	r4, r0
 80010a6:	4bb9      	ldr	r3, [pc, #740]	; (800138c <SpiritMP3GetLastFrameInfo+0x98>)
 80010a8:	f7ff f8ed 	bl	8000286 <MP3D_SPCORP_Symbol_019>
 80010ac:	f3c4 1181 	ubfx	r1, r4, #6, #2
 80010b0:	f3c4 2681 	ubfx	r6, r4, #10, #2
 80010b4:	2903      	cmp	r1, #3
 80010b6:	d001      	beq.n	80010bc <L12_GetSubBandAllocTable+0x1c>
 80010b8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80010bc:	ea6f 4254 	mvn.w	r2, r4, lsr #17
 80010c0:	0792      	lsls	r2, r2, #30
 80010c2:	d003      	beq.n	80010cc <L12_GetSubBandAllocTable+0x2c>
 80010c4:	0322      	lsls	r2, r4, #12
 80010c6:	d404      	bmi.n	80010d2 <L12_GetSubBandAllocTable+0x32>
 80010c8:	3312      	adds	r3, #18
 80010ca:	e011      	b.n	80010f0 <L12_GetSubBandAllocTable+0x50>
 80010cc:	331b      	adds	r3, #27
 80010ce:	2220      	movs	r2, #32
 80010d0:	e00f      	b.n	80010f2 <L12_GetSubBandAllocTable+0x52>
 80010d2:	b900      	cbnz	r0, 80010d6 <L12_GetSubBandAllocTable+0x36>
 80010d4:	20c0      	movs	r0, #192	; 0xc0
 80010d6:	221b      	movs	r2, #27
 80010d8:	2838      	cmp	r0, #56	; 0x38
 80010da:	d205      	bcs.n	80010e8 <L12_GetSubBandAllocTable+0x48>
 80010dc:	330c      	adds	r3, #12
 80010de:	220c      	movs	r2, #12
 80010e0:	2e02      	cmp	r6, #2
 80010e2:	d006      	beq.n	80010f2 <L12_GetSubBandAllocTable+0x52>
 80010e4:	2208      	movs	r2, #8
 80010e6:	e004      	b.n	80010f2 <L12_GetSubBandAllocTable+0x52>
 80010e8:	2860      	cmp	r0, #96	; 0x60
 80010ea:	d302      	bcc.n	80010f2 <L12_GetSubBandAllocTable+0x52>
 80010ec:	2e01      	cmp	r6, #1
 80010ee:	d000      	beq.n	80010f2 <L12_GetSubBandAllocTable+0x52>
 80010f0:	221e      	movs	r2, #30
 80010f2:	2020      	movs	r0, #32
 80010f4:	07ce      	lsls	r6, r1, #31
 80010f6:	d007      	beq.n	8001108 <L12_GetSubBandAllocTable+0x68>
 80010f8:	2000      	movs	r0, #0
 80010fa:	2901      	cmp	r1, #1
 80010fc:	d104      	bne.n	8001108 <L12_GetSubBandAllocTable+0x68>
 80010fe:	f3c4 1001 	ubfx	r0, r4, #4, #2
 8001102:	2104      	movs	r1, #4
 8001104:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8001108:	4290      	cmp	r0, r2
 800110a:	db00      	blt.n	800110e <L12_GetSubBandAllocTable+0x6e>
 800110c:	4610      	mov	r0, r2
 800110e:	702a      	strb	r2, [r5, #0]
 8001110:	7068      	strb	r0, [r5, #1]
 8001112:	1a10      	subs	r0, r2, r0
 8001114:	70a8      	strb	r0, [r5, #2]
 8001116:	4618      	mov	r0, r3
 8001118:	bd70      	pop	{r4, r5, r6, pc}

0800111a <L12_ReadScaleFactors>:
 800111a:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800111e:	460f      	mov	r7, r1
 8001120:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8001122:	4690      	mov	r8, r2
 8001124:	469a      	mov	sl, r3
 8001126:	f818 1b01 	ldrb.w	r1, [r8], #1
 800112a:	2013      	movs	r0, #19
 800112c:	40c8      	lsrs	r0, r1
 800112e:	f000 0603 	and.w	r6, r0, #3
 8001132:	2404      	movs	r4, #4
 8001134:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001138:	1d36      	adds	r6, r6, #4
 800113a:	b900      	cbnz	r0, 800113e <L12_ReadScaleFactors+0x24>
 800113c:	2600      	movs	r6, #0
 800113e:	2100      	movs	r1, #0
 8001140:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8001390 <SpiritMP3GetLastFrameInfo+0x9c>
 8001144:	460a      	mov	r2, r1
 8001146:	eb00 0940 	add.w	r9, r0, r0, lsl #1
 800114a:	4226      	tst	r6, r4
 800114c:	d00f      	beq.n	800116e <L12_ReadScaleFactors+0x54>
 800114e:	2106      	movs	r1, #6
 8001150:	9800      	ldr	r0, [sp, #0]
 8001152:	f000 f921 	bl	8001398 <MP3D_SPCORP_Symbol_006>
 8001156:	212b      	movs	r1, #43	; 0x2b
 8001158:	4341      	muls	r1, r0
 800115a:	11c9      	asrs	r1, r1, #7
 800115c:	1d4a      	adds	r2, r1, #5
 800115e:	4448      	add	r0, r9
 8001160:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 8001164:	4401      	add	r1, r0
 8001166:	eb0b 0081 	add.w	r0, fp, r1, lsl #2
 800116a:	f850 1c18 	ldr.w	r1, [r0, #-24]
 800116e:	4628      	mov	r0, r5
 8001170:	3508      	adds	r5, #8
 8001172:	e9c0 1200 	strd	r1, r2, [r0]
 8001176:	1064      	asrs	r4, r4, #1
 8001178:	d1e7      	bne.n	800114a <L12_ReadScaleFactors+0x30>
 800117a:	f1ba 0a01 	subs.w	sl, sl, #1
 800117e:	d1d2      	bne.n	8001126 <L12_ReadScaleFactors+0xc>
 8001180:	e786      	b.n	8001090 <ReadScaleFactors+0x80>

08001182 <L12_ApplyScf384>:
 8001182:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001186:	f04f 0e02 	mov.w	lr, #2
 800118a:	9800      	ldr	r0, [sp, #0]
 800118c:	9b00      	ldr	r3, [sp, #0]
 800118e:	f890 8000 	ldrb.w	r8, [r0]
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	f502 6010 	add.w	r0, r2, #2304	; 0x900
 8001198:	b1d3      	cbz	r3, 80011d0 <L12_ApplyScf384+0x4e>
 800119a:	e9d1 ab00 	ldrd	sl, fp, [r1]
 800119e:	f851 9f18 	ldr.w	r9, [r1, #24]!
 80011a2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80011a6:	3118      	adds	r1, #24
 80011a8:	240c      	movs	r4, #12
 80011aa:	c840      	ldmia	r0!, {r6}
 80011ac:	6815      	ldr	r5, [r2, #0]
 80011ae:	fb09 f706 	mul.w	r7, r9, r6
 80011b2:	fa47 f70c 	asr.w	r7, r7, ip
 80011b6:	fb0a f605 	mul.w	r6, sl, r5
 80011ba:	fa46 f60b 	asr.w	r6, r6, fp
 80011be:	f8c2 7900 	str.w	r7, [r2, #2304]	; 0x900
 80011c2:	c240      	stmia	r2!, {r6}
 80011c4:	1e64      	subs	r4, r4, #1
 80011c6:	d1f0      	bne.n	80011aa <L12_ApplyScf384+0x28>
 80011c8:	3218      	adds	r2, #24
 80011ca:	3018      	adds	r0, #24
 80011cc:	1e5b      	subs	r3, r3, #1
 80011ce:	e7e3      	b.n	8001198 <L12_ApplyScf384+0x16>
 80011d0:	9800      	ldr	r0, [sp, #0]
 80011d2:	f1be 0e01 	subs.w	lr, lr, #1
 80011d6:	7883      	ldrb	r3, [r0, #2]
 80011d8:	4610      	mov	r0, r2
 80011da:	d1dd      	bne.n	8001198 <L12_ApplyScf384+0x16>
 80011dc:	2100      	movs	r1, #0
 80011de:	4640      	mov	r0, r8
 80011e0:	f108 0801 	add.w	r8, r8, #1
 80011e4:	2820      	cmp	r0, #32
 80011e6:	da07      	bge.n	80011f8 <L12_ApplyScf384+0x76>
 80011e8:	200c      	movs	r0, #12
 80011ea:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
 80011ee:	c202      	stmia	r2!, {r1}
 80011f0:	1e40      	subs	r0, r0, #1
 80011f2:	d1fa      	bne.n	80011ea <L12_ApplyScf384+0x68>
 80011f4:	3218      	adds	r2, #24
 80011f6:	e7f2      	b.n	80011de <L12_ApplyScf384+0x5c>
 80011f8:	e416      	b.n	8000a28 <MP3D_SPCORP_Symbol_015+0x6e>

080011fa <L12_DequantizeGranule>:
 80011fa:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	2004      	movs	r0, #4
 8001202:	9000      	str	r0, [sp, #0]
 8001204:	9803      	ldr	r0, [sp, #12]
 8001206:	9903      	ldr	r1, [sp, #12]
 8001208:	9a03      	ldr	r2, [sp, #12]
 800120a:	6840      	ldr	r0, [r0, #4]
 800120c:	6809      	ldr	r1, [r1, #0]
 800120e:	6894      	ldr	r4, [r2, #8]
 8001210:	f44f 7910 	mov.w	r9, #576	; 0x240
 8001214:	9a04      	ldr	r2, [sp, #16]
 8001216:	f8dd c008 	ldr.w	ip, [sp, #8]
 800121a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800121e:	7812      	ldrb	r2, [r2, #0]
 8001220:	f108 0803 	add.w	r8, r8, #3
 8001224:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8001228:	9a05      	ldr	r2, [sp, #20]
 800122a:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 800122e:	9202      	str	r2, [sp, #8]
 8001230:	f818 3b01 	ldrb.w	r3, [r8], #1
 8001234:	4662      	mov	r2, ip
 8001236:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 800123a:	b1fb      	cbz	r3, 800127c <L12_DequantizeGranule+0x82>
 800123c:	9d05      	ldr	r5, [sp, #20]
 800123e:	2b11      	cmp	r3, #17
 8001240:	da1d      	bge.n	800127e <L12_DequantizeGranule+0x84>
 8001242:	f1a3 0701 	sub.w	r7, r3, #1
 8001246:	f04f 0601 	mov.w	r6, #1
 800124a:	fa06 f607 	lsl.w	r6, r6, r7
 800124e:	f1a6 0b01 	sub.w	fp, r6, #1
 8001252:	f1c3 0a20 	rsb	sl, r3, #32
 8001256:	fa21 f60a 	lsr.w	r6, r1, sl
 800125a:	fa01 f103 	lsl.w	r1, r1, r3
 800125e:	18c0      	adds	r0, r0, r3
 8001260:	d407      	bmi.n	8001272 <L12_DequantizeGranule+0x78>
 8001262:	f834 7b02 	ldrh.w	r7, [r4], #2
 8001266:	ba7f      	rev16	r7, r7
 8001268:	fa07 f700 	lsl.w	r7, r7, r0
 800126c:	4339      	orrs	r1, r7
 800126e:	f1a0 0010 	sub.w	r0, r0, #16
 8001272:	eba6 060b 	sub.w	r6, r6, fp
 8001276:	c240      	stmia	r2!, {r6}
 8001278:	1e6d      	subs	r5, r5, #1
 800127a:	d1ec      	bne.n	8001256 <L12_DequantizeGranule+0x5c>
 800127c:	e028      	b.n	80012d0 <L12_DequantizeGranule+0xd6>
 800127e:	f1a3 0311 	sub.w	r3, r3, #17
 8001282:	f04f 0701 	mov.w	r7, #1
 8001286:	4e43      	ldr	r6, [pc, #268]	; (8001394 <SpiritMP3GetLastFrameInfo+0xa0>)
 8001288:	fa07 fb03 	lsl.w	fp, r7, r3
 800128c:	eb07 0a4b 	add.w	sl, r7, fp, lsl #1
 8001290:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	ebaa 03ea 	sub.w	r3, sl, sl, asr #3
 800129a:	f103 0302 	add.w	r3, r3, #2
 800129e:	f1c3 0720 	rsb	r7, r3, #32
 80012a2:	fa21 f607 	lsr.w	r6, r1, r7
 80012a6:	fa01 f103 	lsl.w	r1, r1, r3
 80012aa:	18c0      	adds	r0, r0, r3
 80012ac:	d405      	bmi.n	80012ba <L12_DequantizeGranule+0xc0>
 80012ae:	f834 3b02 	ldrh.w	r3, [r4], #2
 80012b2:	ba5b      	rev16	r3, r3
 80012b4:	4083      	lsls	r3, r0
 80012b6:	4319      	orrs	r1, r3
 80012b8:	3810      	subs	r0, #16
 80012ba:	9b01      	ldr	r3, [sp, #4]
 80012bc:	4373      	muls	r3, r6
 80012be:	0b5b      	lsrs	r3, r3, #13
 80012c0:	fb03 671a 	mls	r7, r3, sl, r6
 80012c4:	eba7 070b 	sub.w	r7, r7, fp
 80012c8:	c280      	stmia	r2!, {r7}
 80012ca:	461e      	mov	r6, r3
 80012cc:	1e6d      	subs	r5, r5, #1
 80012ce:	d1f4      	bne.n	80012ba <L12_DequantizeGranule+0xc0>
 80012d0:	f1c9 0912 	rsb	r9, r9, #18
 80012d4:	f1be 0e01 	subs.w	lr, lr, #1
 80012d8:	d1aa      	bne.n	8001230 <L12_DequantizeGranule+0x36>
 80012da:	9a00      	ldr	r2, [sp, #0]
 80012dc:	1e52      	subs	r2, r2, #1
 80012de:	9200      	str	r2, [sp, #0]
 80012e0:	d198      	bne.n	8001214 <L12_DequantizeGranule+0x1a>
 80012e2:	9a03      	ldr	r2, [sp, #12]
 80012e4:	6011      	str	r1, [r2, #0]
 80012e6:	9903      	ldr	r1, [sp, #12]
 80012e8:	6048      	str	r0, [r1, #4]
 80012ea:	9803      	ldr	r0, [sp, #12]
 80012ec:	6084      	str	r4, [r0, #8]
 80012ee:	9802      	ldr	r0, [sp, #8]
 80012f0:	b006      	add	sp, #24
 80012f2:	e68c      	b.n	800100e <mp3d_UnpackSfb+0x82>

080012f4 <SpiritMP3GetLastFrameInfo>:
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	f8d0 60e8 	ldr.w	r6, [r0, #232]	; 0xe8
 80012fa:	4605      	mov	r5, r0
 80012fc:	4613      	mov	r3, r2
 80012fe:	460c      	mov	r4, r1
 8001300:	b3c6      	cbz	r6, 8001374 <SpiritMP3GetLastFrameInfo+0x80>
 8001302:	4630      	mov	r0, r6
 8001304:	f7fe ffbf 	bl	8000286 <MP3D_SPCORP_Symbol_019>
 8001308:	60a0      	str	r0, [r4, #8]
 800130a:	2001      	movs	r0, #1
 800130c:	f3c6 1181 	ubfx	r1, r6, #6, #2
 8001310:	2903      	cmp	r1, #3
 8001312:	d000      	beq.n	8001316 <SpiritMP3GetLastFrameInfo+0x22>
 8001314:	2002      	movs	r0, #2
 8001316:	60e0      	str	r0, [r4, #12]
 8001318:	f3c6 4041 	ubfx	r0, r6, #17, #2
 800131c:	f1c0 0004 	rsb	r0, r0, #4
 8001320:	6020      	str	r0, [r4, #0]
 8001322:	4630      	mov	r0, r6
 8001324:	f7ff f9c7 	bl	80006b6 <MP3D_SPCORP_Symbol_020>
 8001328:	6123      	str	r3, [r4, #16]
 800132a:	6060      	str	r0, [r4, #4]
 800132c:	8a28      	ldrh	r0, [r5, #16]
 800132e:	6160      	str	r0, [r4, #20]
 8001330:	8a68      	ldrh	r0, [r5, #18]
 8001332:	61a0      	str	r0, [r4, #24]
 8001334:	4630      	mov	r0, r6
 8001336:	f8d5 10ec 	ldr.w	r1, [r5, #236]	; 0xec
 800133a:	f7fe ffcd 	bl	80002d8 <MP3D_SPCORP_Symbol_018>
 800133e:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
 8001342:	4408      	add	r0, r1
 8001344:	f8d5 10f4 	ldr.w	r1, [r5, #244]	; 0xf4
 8001348:	00c0      	lsls	r0, r0, #3
 800134a:	4249      	negs	r1, r1
 800134c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8001350:	61e0      	str	r0, [r4, #28]
 8001352:	4630      	mov	r0, r6
 8001354:	f7fe ffae 	bl	80002b4 <MP3D_SPCORP_Symbol_021>
 8001358:	4602      	mov	r2, r0
 800135a:	6220      	str	r0, [r4, #32]
 800135c:	6828      	ldr	r0, [r5, #0]
 800135e:	2800      	cmp	r0, #0
 8001360:	db0d      	blt.n	800137e <SpiritMP3GetLastFrameInfo+0x8a>
 8001362:	6821      	ldr	r1, [r4, #0]
 8001364:	2903      	cmp	r1, #3
 8001366:	d006      	beq.n	8001376 <SpiritMP3GetLastFrameInfo+0x82>
 8001368:	2160      	movs	r1, #96	; 0x60
 800136a:	68ab      	ldr	r3, [r5, #8]
 800136c:	441a      	add	r2, r3
 800136e:	fb01 2010 	mls	r0, r1, r0, r2
 8001372:	e005      	b.n	8001380 <SpiritMP3GetLastFrameInfo+0x8c>
 8001374:	e006      	b.n	8001384 <SpiritMP3GetLastFrameInfo+0x90>
 8001376:	f44f 7110 	mov.w	r1, #576	; 0x240
 800137a:	1040      	asrs	r0, r0, #1
 800137c:	e7f5      	b.n	800136a <SpiritMP3GetLastFrameInfo+0x76>
 800137e:	68a8      	ldr	r0, [r5, #8]
 8001380:	6260      	str	r0, [r4, #36]	; 0x24
 8001382:	bd70      	pop	{r4, r5, r6, pc}
 8001384:	2000      	movs	r0, #0
 8001386:	6008      	str	r0, [r1, #0]
 8001388:	bd70      	pop	{r4, r5, r6, pc}
 800138a:	0000      	.short	0x0000
 800138c:	0800cea8 	.word	0x0800cea8
 8001390:	0800cd74 	.word	0x0800cd74
 8001394:	0800cc3c 	.word	0x0800cc3c

08001398 <MP3D_SPCORP_Symbol_006>:
 8001398:	e890 000c 	ldmia.w	r0, {r2, r3}
 800139c:	185b      	adds	r3, r3, r1
 800139e:	d508      	bpl.n	80013b2 <MP3D_SPCORP_Symbol_006+0x1a>
 80013a0:	f1c1 0c20 	rsb	ip, r1, #32
 80013a4:	fa02 f101 	lsl.w	r1, r2, r1
 80013a8:	e880 000a 	stmia.w	r0, {r1, r3}
 80013ac:	fa22 f00c 	lsr.w	r0, r2, ip
 80013b0:	4770      	bx	lr
 80013b2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80013b6:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80013ba:	f83c 4b02 	ldrh.w	r4, [ip], #2
 80013be:	f8c0 c008 	str.w	ip, [r0, #8]
 80013c2:	ba64      	rev16	r4, r4
 80013c4:	f1c1 0c20 	rsb	ip, r1, #32
 80013c8:	fa02 f101 	lsl.w	r1, r2, r1
 80013cc:	fa04 f403 	lsl.w	r4, r4, r3
 80013d0:	ea41 0104 	orr.w	r1, r1, r4
 80013d4:	f1a3 0310 	sub.w	r3, r3, #16
 80013d8:	e880 000a 	stmia.w	r0, {r1, r3}
 80013dc:	fa22 f00c 	lsr.w	r0, r2, ip
 80013e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	b510      	push	{r4, lr}
 80013e8:	3a20      	subs	r2, #32
 80013ea:	d30c      	bcc.n	8001406 <MP3D_SPCORP_Symbol_006+0x6e>
 80013ec:	bf21      	itttt	cs
 80013ee:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
 80013f2:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
 80013f6:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
 80013fa:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
 80013fe:	bf28      	it	cs
 8001400:	f1b2 0220 	subscs.w	r2, r2, #32
 8001404:	d2f2      	bcs.n	80013ec <MP3D_SPCORP_Symbol_006+0x54>
 8001406:	ea5f 7c02 	movs.w	ip, r2, lsl #28
 800140a:	bf24      	itt	cs
 800140c:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
 8001410:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
 8001414:	bf44      	itt	mi
 8001416:	c918      	ldmiami	r1!, {r3, r4}
 8001418:	c018      	stmiami	r0!, {r3, r4}
 800141a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800141e:	ea5f 7c82 	movs.w	ip, r2, lsl #30
 8001422:	bf24      	itt	cs
 8001424:	f851 3b04 	ldrcs.w	r3, [r1], #4
 8001428:	f840 3b04 	strcs.w	r3, [r0], #4
 800142c:	bf08      	it	eq
 800142e:	4770      	bxeq	lr
 8001430:	07d2      	lsls	r2, r2, #31
 8001432:	bf48      	it	mi
 8001434:	f811 2b01 	ldrbmi.w	r2, [r1], #1
 8001438:	bf24      	itt	cs
 800143a:	f811 3b01 	ldrbcs.w	r3, [r1], #1
 800143e:	f811 cb01 	ldrbcs.w	ip, [r1], #1
 8001442:	bf48      	it	mi
 8001444:	f800 2b01 	strbmi.w	r2, [r0], #1
 8001448:	bf24      	itt	cs
 800144a:	f800 3b01 	strbcs.w	r3, [r0], #1
 800144e:	f800 cb01 	strbcs.w	ip, [r0], #1
 8001452:	4770      	bx	lr

08001454 <MP3D_SPCORP_Symbol_012>:
 8001454:	4694      	mov	ip, r2
 8001456:	461a      	mov	r2, r3
 8001458:	eb00 030c 	add.w	r3, r0, ip
 800145c:	4408      	add	r0, r1
 800145e:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 8001462:	f100 003e 	add.w	r0, r0, #62	; 0x3e
 8001466:	2a03      	cmp	r2, #3
 8001468:	d9e2      	bls.n	8001430 <MP3D_SPCORP_Symbol_006+0x98>
 800146a:	f010 0c03 	ands.w	ip, r0, #3
 800146e:	d014      	beq.n	800149a <MP3D_SPCORP_Symbol_012+0x46>
 8001470:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001474:	f1bc 0f02 	cmp.w	ip, #2
 8001478:	4462      	add	r2, ip
 800147a:	bf98      	it	ls
 800147c:	f811 cb01 	ldrbls.w	ip, [r1], #1
 8001480:	f800 3b01 	strb.w	r3, [r0], #1
 8001484:	bf38      	it	cc
 8001486:	f811 3b01 	ldrbcc.w	r3, [r1], #1
 800148a:	f1a2 0204 	sub.w	r2, r2, #4
 800148e:	bf98      	it	ls
 8001490:	f800 cb01 	strbls.w	ip, [r0], #1
 8001494:	bf38      	it	cc
 8001496:	f800 3b01 	strbcc.w	r3, [r0], #1
 800149a:	f011 0303 	ands.w	r3, r1, #3
 800149e:	d0a2      	beq.n	80013e6 <MP3D_SPCORP_Symbol_006+0x4e>
 80014a0:	1f12      	subs	r2, r2, #4
 80014a2:	d3c5      	bcc.n	8001430 <MP3D_SPCORP_Symbol_006+0x98>
 80014a4:	eba1 0103 	sub.w	r1, r1, r3
 80014a8:	f8d1 c000 	ldr.w	ip, [r1]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d00d      	beq.n	80014cc <MP3D_SPCORP_Symbol_012+0x78>
 80014b0:	d819      	bhi.n	80014e6 <MP3D_SPCORP_Symbol_012+0x92>
 80014b2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80014b6:	f851 cf04 	ldr.w	ip, [r1, #4]!
 80014ba:	1f12      	subs	r2, r2, #4
 80014bc:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80014c0:	f840 3b04 	str.w	r3, [r0], #4
 80014c4:	d2f5      	bcs.n	80014b2 <MP3D_SPCORP_Symbol_012+0x5e>
 80014c6:	f101 0101 	add.w	r1, r1, #1
 80014ca:	e7b1      	b.n	8001430 <MP3D_SPCORP_Symbol_006+0x98>
 80014cc:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80014d0:	f851 cf04 	ldr.w	ip, [r1, #4]!
 80014d4:	1f12      	subs	r2, r2, #4
 80014d6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80014da:	f840 3b04 	str.w	r3, [r0], #4
 80014de:	d2f5      	bcs.n	80014cc <MP3D_SPCORP_Symbol_012+0x78>
 80014e0:	f101 0102 	add.w	r1, r1, #2
 80014e4:	e7a4      	b.n	8001430 <MP3D_SPCORP_Symbol_006+0x98>
 80014e6:	ea4f 631c 	mov.w	r3, ip, lsr #24
 80014ea:	f851 cf04 	ldr.w	ip, [r1, #4]!
 80014ee:	1f12      	subs	r2, r2, #4
 80014f0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80014f4:	f840 3b04 	str.w	r3, [r0], #4
 80014f8:	d2f5      	bcs.n	80014e6 <MP3D_SPCORP_Symbol_012+0x92>
 80014fa:	f101 0103 	add.w	r1, r1, #3
 80014fe:	e797      	b.n	8001430 <MP3D_SPCORP_Symbol_006+0x98>

08001500 <MP3D_SPCORP_Symbol_013>:
 8001500:	b510      	push	{r4, lr}
 8001502:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8001506:	f000 8095 	beq.w	8001634 <MP3D_SPCORP_Symbol_013+0x134>
 800150a:	ea4f 1c62 	mov.w	ip, r2, asr #5
 800150e:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001512:	f002 021f 	and.w	r2, r2, #31
 8001516:	f1c2 0c20 	rsb	ip, r2, #32
 800151a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800151e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8001522:	ebb3 030c 	subs.w	r3, r3, ip
 8001526:	bf48      	it	mi
 8001528:	449c      	addmi	ip, r3
 800152a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800152e:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 8001532:	bf28      	it	cs
 8001534:	f850 4b48 	ldrcs.w	r4, [r0], #72
 8001538:	f20f 0ed0 	addw	lr, pc, #208	; 0xd0
 800153c:	bf28      	it	cs
 800153e:	f841 4b04 	strcs.w	r4, [r1], #4
 8001542:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8001546:	ebae 0c8c 	sub.w	ip, lr, ip, lsl #2
 800154a:	46e7      	mov	pc, ip
 800154c:	f850 4b48 	ldr.w	r4, [r0], #72
 8001550:	f850 cb48 	ldr.w	ip, [r0], #72
 8001554:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001558:	f850 4b48 	ldr.w	r4, [r0], #72
 800155c:	f850 cb48 	ldr.w	ip, [r0], #72
 8001560:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001564:	f850 4b48 	ldr.w	r4, [r0], #72
 8001568:	f850 cb48 	ldr.w	ip, [r0], #72
 800156c:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001570:	f850 4b48 	ldr.w	r4, [r0], #72
 8001574:	f850 cb48 	ldr.w	ip, [r0], #72
 8001578:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 800157c:	f850 4b48 	ldr.w	r4, [r0], #72
 8001580:	f850 cb48 	ldr.w	ip, [r0], #72
 8001584:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001588:	f850 4b48 	ldr.w	r4, [r0], #72
 800158c:	f850 cb48 	ldr.w	ip, [r0], #72
 8001590:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001594:	f850 4b48 	ldr.w	r4, [r0], #72
 8001598:	f850 cb48 	ldr.w	ip, [r0], #72
 800159c:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015a0:	f850 4b48 	ldr.w	r4, [r0], #72
 80015a4:	f850 cb48 	ldr.w	ip, [r0], #72
 80015a8:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015ac:	f850 4b48 	ldr.w	r4, [r0], #72
 80015b0:	f850 cb48 	ldr.w	ip, [r0], #72
 80015b4:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015b8:	f850 4b48 	ldr.w	r4, [r0], #72
 80015bc:	f850 cb48 	ldr.w	ip, [r0], #72
 80015c0:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015c4:	f850 4b48 	ldr.w	r4, [r0], #72
 80015c8:	f850 cb48 	ldr.w	ip, [r0], #72
 80015cc:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015d0:	f850 4b48 	ldr.w	r4, [r0], #72
 80015d4:	f850 cb48 	ldr.w	ip, [r0], #72
 80015d8:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015dc:	f850 4b48 	ldr.w	r4, [r0], #72
 80015e0:	f850 cb48 	ldr.w	ip, [r0], #72
 80015e4:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015e8:	f850 4b48 	ldr.w	r4, [r0], #72
 80015ec:	f850 cb48 	ldr.w	ip, [r0], #72
 80015f0:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 80015f4:	f850 4b48 	ldr.w	r4, [r0], #72
 80015f8:	f850 cb48 	ldr.w	ip, [r0], #72
 80015fc:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 8001600:	f850 4b48 	ldr.w	r4, [r0], #72
 8001604:	f850 cb48 	ldr.w	ip, [r0], #72
 8001608:	e8a1 1010 	stmia.w	r1!, {r4, ip}
 800160c:	eba0 0002 	sub.w	r0, r0, r2
 8001610:	3b20      	subs	r3, #32
 8001612:	da9b      	bge.n	800154c <MP3D_SPCORP_Symbol_013+0x4c>
 8001614:	f113 0c20 	adds.w	ip, r3, #32
 8001618:	bfd8      	it	le
 800161a:	bd10      	pople	{r4, pc}
 800161c:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 8001620:	bf24      	itt	cs
 8001622:	f850 4b48 	ldrcs.w	r4, [r0], #72
 8001626:	f841 4b04 	strcs.w	r4, [r1], #4
 800162a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800162e:	ebae 0c8c 	sub.w	ip, lr, ip, lsl #2
 8001632:	46e7      	mov	pc, ip
 8001634:	e92d 0fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp}
 8001638:	f04f 0e20 	mov.w	lr, #32
 800163c:	e8b0 07fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
 8001640:	600a      	str	r2, [r1, #0]
 8001642:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8001646:	f8c1 4100 	str.w	r4, [r1, #256]	; 0x100
 800164a:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
 800164e:	f8c1 6200 	str.w	r6, [r1, #512]	; 0x200
 8001652:	f8c1 7280 	str.w	r7, [r1, #640]	; 0x280
 8001656:	f8c1 8300 	str.w	r8, [r1, #768]	; 0x300
 800165a:	f8c1 9380 	str.w	r9, [r1, #896]	; 0x380
 800165e:	f8c1 a400 	str.w	sl, [r1, #1024]	; 0x400
 8001662:	e8b0 07fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
 8001666:	f8c1 2480 	str.w	r2, [r1, #1152]	; 0x480
 800166a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800166e:	f8c1 4580 	str.w	r4, [r1, #1408]	; 0x580
 8001672:	f8c1 5600 	str.w	r5, [r1, #1536]	; 0x600
 8001676:	f8c1 6680 	str.w	r6, [r1, #1664]	; 0x680
 800167a:	f8c1 7700 	str.w	r7, [r1, #1792]	; 0x700
 800167e:	f8c1 8780 	str.w	r8, [r1, #1920]	; 0x780
 8001682:	f8c1 9800 	str.w	r9, [r1, #2048]	; 0x800
 8001686:	f8c1 a880 	str.w	sl, [r1, #2176]	; 0x880
 800168a:	f1be 0e01 	subs.w	lr, lr, #1
 800168e:	f101 0104 	add.w	r1, r1, #4
 8001692:	d1d3      	bne.n	800163c <MP3D_SPCORP_Symbol_013+0x13c>
 8001694:	e8bd 0fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp}
 8001698:	bd10      	pop	{r4, pc}
	...

0800169c <MP3D_SPCORP_Symbol_001>:
 800169c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a0:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8001758 <MP3D_SPCORP_Symbol_001+0xbc>
 80016a4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80016a8:	e89e 50fc 	ldmia.w	lr, {r2, r3, r4, r5, r6, r7, ip, lr}
 80016ac:	e950 ab02 	ldrd	sl, fp, [r0, #-8]
 80016b0:	e890 0300 	ldmia.w	r0, {r8, r9}
 80016b4:	fb3b 8802 	smlawb	r8, fp, r2, r8
 80016b8:	fb3a 9903 	smlawb	r9, sl, r3, r9
 80016bc:	fb38 bb12 	smlawt	fp, r8, r2, fp
 80016c0:	fb39 aa13 	smlawt	sl, r9, r3, sl
 80016c4:	44c3      	add	fp, r8
 80016c6:	fb3b 8802 	smlawb	r8, fp, r2, r8
 80016ca:	fb3a 9903 	smlawb	r9, sl, r3, r9
 80016ce:	e940 ab02 	strd	sl, fp, [r0, #-8]
 80016d2:	e8a0 0300 	stmia.w	r0!, {r8, r9}
 80016d6:	e950 ab06 	ldrd	sl, fp, [r0, #-24]
 80016da:	e890 0300 	ldmia.w	r0, {r8, r9}
 80016de:	fb3b 8804 	smlawb	r8, fp, r4, r8
 80016e2:	fb3a 9905 	smlawb	r9, sl, r5, r9
 80016e6:	fb38 bb14 	smlawt	fp, r8, r4, fp
 80016ea:	fb39 aa15 	smlawt	sl, r9, r5, sl
 80016ee:	fb3b 8804 	smlawb	r8, fp, r4, r8
 80016f2:	fb3a 9905 	smlawb	r9, sl, r5, r9
 80016f6:	e940 ab06 	strd	sl, fp, [r0, #-24]
 80016fa:	e8a0 0300 	stmia.w	r0!, {r8, r9}
 80016fe:	e950 ab0a 	ldrd	sl, fp, [r0, #-40]	; 0x28
 8001702:	e890 0300 	ldmia.w	r0, {r8, r9}
 8001706:	fb3b 8806 	smlawb	r8, fp, r6, r8
 800170a:	fb3a 9907 	smlawb	r9, sl, r7, r9
 800170e:	fb38 bb16 	smlawt	fp, r8, r6, fp
 8001712:	fb39 aa17 	smlawt	sl, r9, r7, sl
 8001716:	fb3b 8806 	smlawb	r8, fp, r6, r8
 800171a:	fb3a 9907 	smlawb	r9, sl, r7, r9
 800171e:	e940 ab0a 	strd	sl, fp, [r0, #-40]	; 0x28
 8001722:	e8a0 0300 	stmia.w	r0!, {r8, r9}
 8001726:	e950 ab0e 	ldrd	sl, fp, [r0, #-56]	; 0x38
 800172a:	e890 0300 	ldmia.w	r0, {r8, r9}
 800172e:	fb3b 880c 	smlawb	r8, fp, ip, r8
 8001732:	fb3a 990e 	smlawb	r9, sl, lr, r9
 8001736:	fb38 bb1c 	smlawt	fp, r8, ip, fp
 800173a:	fb39 aa1e 	smlawt	sl, r9, lr, sl
 800173e:	fb3b 880c 	smlawb	r8, fp, ip, r8
 8001742:	fb3a 990e 	smlawb	r9, sl, lr, r9
 8001746:	e940 ab0e 	strd	sl, fp, [r0, #-56]	; 0x38
 800174a:	e8e0 890c 	strd	r8, r9, [r0], #48	; 0x30
 800174e:	1e49      	subs	r1, r1, #1
 8001750:	d1ac      	bne.n	80016ac <MP3D_SPCORP_Symbol_001+0x10>
 8001752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001756:	0000      	.short	0x0000
 8001758:	0800cf50 	.word	0x0800cf50
 800175c:	fa25 f10b 	lsr.w	r1, r5, fp
 8001760:	4408      	add	r0, r1
 8001762:	f8df 1560 	ldr.w	r1, [pc, #1376]	; 8001cc4 <MP3D_SPCORP_Symbol_000+0x174>
 8001766:	2883      	cmp	r0, #131	; 0x83
 8001768:	bf38      	it	cc
 800176a:	f851 0020 	ldrcc.w	r0, [r1, r0, lsl #2]
 800176e:	d219      	bcs.n	80017a4 <MP3D_SPCORP_Symbol_001+0x108>
 8001770:	fba2 1000 	umull	r1, r0, r2, r0
 8001774:	f1a9 0105 	sub.w	r1, r9, #5
 8001778:	fa20 f001 	lsr.w	r0, r0, r1
 800177c:	f1cb 0121 	rsb	r1, fp, #33	; 0x21
 8001780:	408d      	lsls	r5, r1
 8001782:	bf28      	it	cs
 8001784:	4240      	negcs	r0, r0
 8001786:	1876      	adds	r6, r6, r1
 8001788:	f10e 0e12 	add.w	lr, lr, #18
 800178c:	bf48      	it	mi
 800178e:	46f7      	movmi	pc, lr
 8001790:	f837 1b02 	ldrh.w	r1, [r7], #2
 8001794:	ba49      	rev16	r1, r1
 8001796:	fa01 f106 	lsl.w	r1, r1, r6
 800179a:	ea45 0501 	orr.w	r5, r5, r1
 800179e:	f1a6 0610 	sub.w	r6, r6, #16
 80017a2:	46f7      	mov	pc, lr
 80017a4:	b430      	push	{r4, r5}
 80017a6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80017aa:	bfb8      	it	lt
 80017ac:	00c0      	lsllt	r0, r0, #3
 80017ae:	f000 053f 	and.w	r5, r0, #63	; 0x3f
 80017b2:	ea4f 1090 	mov.w	r0, r0, lsr #6
 80017b6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80017ba:	c913      	ldmia	r1, {r0, r1, r4}
 80017bc:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 80017c0:	4420      	add	r0, r4
 80017c2:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
 80017c6:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80017ca:	fb05 f000 	mul.w	r0, r5, r0
 80017ce:	eb04 10a0 	add.w	r0, r4, r0, asr #6
 80017d2:	fb00 f505 	mul.w	r5, r0, r5
 80017d6:	eb01 14e5 	add.w	r4, r1, r5, asr #7
 80017da:	fba2 5004 	umull	r5, r0, r2, r4
 80017de:	f1a9 010d 	sub.w	r1, r9, #13
 80017e2:	bfb8      	it	lt
 80017e4:	1d09      	addlt	r1, r1, #4
 80017e6:	fa20 f001 	lsr.w	r0, r0, r1
 80017ea:	bc30      	pop	{r4, r5}
 80017ec:	f1cb 0121 	rsb	r1, fp, #33	; 0x21
 80017f0:	408d      	lsls	r5, r1
 80017f2:	bf28      	it	cs
 80017f4:	4240      	negcs	r0, r0
 80017f6:	1876      	adds	r6, r6, r1
 80017f8:	f10e 0e12 	add.w	lr, lr, #18
 80017fc:	bf48      	it	mi
 80017fe:	4770      	bxmi	lr
 8001800:	f837 1b02 	ldrh.w	r1, [r7], #2
 8001804:	ba49      	rev16	r1, r1
 8001806:	fa01 f106 	lsl.w	r1, r1, r6
 800180a:	ea45 0501 	orr.w	r5, r5, r1
 800180e:	f1a6 0610 	sub.w	r6, r6, #16
 8001812:	4770      	bx	lr
 8001814:	f04f 0000 	mov.w	r0, #0
 8001818:	f04f 0100 	mov.w	r1, #0
 800181c:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8001820:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 8001824:	dcfa      	bgt.n	800181c <MP3D_SPCORP_Symbol_001+0x180>
 8001826:	e0df      	b.n	80019e8 <MP3D_SPCORP_Symbol_027+0x164>
 8001828:	80000000 	.word	0x80000000
 800182c:	98380000 	.word	0x98380000
 8001830:	b5050000 	.word	0xb5050000
 8001834:	d7450000 	.word	0xd7450000
 8001838:	f8dd a020 	ldr.w	sl, [sp, #32]
 800183c:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8001840:	f10a 0001 	add.w	r0, sl, #1
 8001844:	9008      	str	r0, [sp, #32]
 8001846:	eb0e 030a 	add.w	r3, lr, sl
 800184a:	7bd8      	ldrb	r0, [r3, #15]
 800184c:	7b1b      	ldrb	r3, [r3, #12]
 800184e:	f8df e478 	ldr.w	lr, [pc, #1144]	; 8001cc8 <MP3D_SPCORP_Symbol_000+0x178>
 8001852:	f101 0101 	add.w	r1, r1, #1
 8001856:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 800185a:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 800185e:	4401      	add	r1, r0
 8001860:	9102      	str	r1, [sp, #8]
 8001862:	f013 0b1f 	ands.w	fp, r3, #31
 8001866:	bf0c      	ite	eq
 8001868:	f20f 111a 	addweq	r1, pc, #282	; 0x11a
 800186c:	f20f 2168 	addwne	r1, pc, #616	; 0x268
 8001870:	095b      	lsrs	r3, r3, #5
 8001872:	bf0e      	itee	eq
 8001874:	f2af 0164 	subweq	r1, pc, #100	; 0x64
 8001878:	eb0e 0343 	addne.w	r3, lr, r3, lsl #1
 800187c:	f833 a01a 	ldrhne.w	sl, [r3, sl, lsl #1]
 8001880:	910a      	str	r1, [sp, #40]	; 0x28
 8001882:	e0c1      	b.n	8001a08 <MP3D_SPCORP_Symbol_027+0x184>

08001884 <MP3D_SPCORP_Symbol_027>:
 8001884:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001888:	b08c      	sub	sp, #48	; 0x30
 800188a:	4680      	mov	r8, r0
 800188c:	f04f 0000 	mov.w	r0, #0
 8001890:	9008      	str	r0, [sp, #32]
 8001892:	8851      	ldrh	r1, [r2, #2]
 8001894:	7a53      	ldrb	r3, [r2, #9]
 8001896:	9106      	str	r1, [sp, #24]
 8001898:	4413      	add	r3, r2
 800189a:	9305      	str	r3, [sp, #20]
 800189c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	e890 00e0 	ldmia.w	r0, {r5, r6, r7}
 80018a4:	e0a0      	b.n	80019e8 <MP3D_SPCORP_Symbol_027+0x164>
 80018a6:	fa05 f501 	lsl.w	r5, r5, r1
 80018aa:	f1ce 0020 	rsb	r0, lr, #32
 80018ae:	fa25 f000 	lsr.w	r0, r5, r0
 80018b2:	eb00 1a5a 	add.w	sl, r0, sl, lsr #5
 80018b6:	1876      	adds	r6, r6, r1
 80018b8:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 80018bc:	bf5f      	itttt	pl
 80018be:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 80018c2:	ba40      	rev16pl	r0, r0
 80018c4:	40b0      	lslpl	r0, r6
 80018c6:	4305      	orrpl	r5, r0
 80018c8:	bf58      	it	pl
 80018ca:	3e10      	subpl	r6, #16
 80018cc:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 80018d0:	d25c      	bcs.n	800198c <MP3D_SPCORP_Symbol_027+0x108>
 80018d2:	fa05 f50e 	lsl.w	r5, r5, lr
 80018d6:	f1c1 0020 	rsb	r0, r1, #32
 80018da:	fa25 f000 	lsr.w	r0, r5, r0
 80018de:	eb00 1a5a 	add.w	sl, r0, sl, lsr #5
 80018e2:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 80018e6:	4476      	add	r6, lr
 80018e8:	ea14 0e5a 	ands.w	lr, r4, sl, lsr #1
 80018ec:	d21c      	bcs.n	8001928 <MP3D_SPCORP_Symbol_027+0xa4>
 80018ee:	fa05 f501 	lsl.w	r5, r5, r1
 80018f2:	f1ce 0020 	rsb	r0, lr, #32
 80018f6:	fa25 f000 	lsr.w	r0, r5, r0
 80018fa:	eb00 1a5a 	add.w	sl, r0, sl, lsr #5
 80018fe:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 8001902:	440e      	add	r6, r1
 8001904:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001908:	d240      	bcs.n	800198c <MP3D_SPCORP_Symbol_027+0x108>
 800190a:	ea4f 1545 	mov.w	r5, r5, lsl #5
 800190e:	f1c1 0020 	rsb	r0, r1, #32
 8001912:	fa25 f000 	lsr.w	r0, r5, r0
 8001916:	eb00 106a 	add.w	r0, r0, sl, asr #5
 800191a:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 800191e:	f106 0605 	add.w	r6, r6, #5
 8001922:	ea14 0e5a 	ands.w	lr, r4, sl, lsr #1
 8001926:	d3be      	bcc.n	80018a6 <MP3D_SPCORP_Symbol_027+0x22>
 8001928:	eb16 060e 	adds.w	r6, r6, lr
 800192c:	fa05 f50e 	lsl.w	r5, r5, lr
 8001930:	bf5f      	itttt	pl
 8001932:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 8001936:	ba40      	rev16pl	r0, r0
 8001938:	40b0      	lslpl	r0, r6
 800193a:	4305      	orrpl	r5, r0
 800193c:	bf58      	it	pl
 800193e:	3e10      	subpl	r6, #16
 8001940:	ea14 109a 	ands.w	r0, r4, sl, lsr #6
 8001944:	bf1f      	itttt	ne
 8001946:	f85c 0020 	ldrne.w	r0, [ip, r0, lsl #2]
 800194a:	1c76      	addne	r6, r6, #1
 800194c:	fa20 f009 	lsrne.w	r0, r0, r9
 8001950:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 8001954:	bf28      	it	cs
 8001956:	f1d0 0000 	rsbscs	r0, r0, #0
 800195a:	ea14 21da 	ands.w	r1, r4, sl, lsr #11
 800195e:	bf1f      	itttt	ne
 8001960:	f85c 1021 	ldrne.w	r1, [ip, r1, lsl #2]
 8001964:	1c76      	addne	r6, r6, #1
 8001966:	fa21 f109 	lsrne.w	r1, r1, r9
 800196a:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 800196e:	bf28      	it	cs
 8001970:	f1d1 0100 	rsbscs	r1, r1, #0
 8001974:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8001978:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 800197c:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 8001980:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 8001984:	dd30      	ble.n	80019e8 <MP3D_SPCORP_Symbol_027+0x164>
 8001986:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 800198a:	d3be      	bcc.n	800190a <MP3D_SPCORP_Symbol_027+0x86>
 800198c:	1876      	adds	r6, r6, r1
 800198e:	fa05 f501 	lsl.w	r5, r5, r1
 8001992:	bf5f      	itttt	pl
 8001994:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 8001998:	ba40      	rev16pl	r0, r0
 800199a:	40b0      	lslpl	r0, r6
 800199c:	4305      	orrpl	r5, r0
 800199e:	bf58      	it	pl
 80019a0:	3e10      	subpl	r6, #16
 80019a2:	ea14 109a 	ands.w	r0, r4, sl, lsr #6
 80019a6:	bf1f      	itttt	ne
 80019a8:	f85c 0020 	ldrne.w	r0, [ip, r0, lsl #2]
 80019ac:	1c76      	addne	r6, r6, #1
 80019ae:	fa20 f009 	lsrne.w	r0, r0, r9
 80019b2:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 80019b6:	bf28      	it	cs
 80019b8:	f1d0 0000 	rsbscs	r0, r0, #0
 80019bc:	ea14 21da 	ands.w	r1, r4, sl, lsr #11
 80019c0:	bf1f      	itttt	ne
 80019c2:	f85c 1021 	ldrne.w	r1, [ip, r1, lsl #2]
 80019c6:	1c76      	addne	r6, r6, #1
 80019c8:	fa21 f109 	lsrne.w	r1, r1, r9
 80019cc:	ea5f 0545 	movsne.w	r5, r5, lsl #1
 80019d0:	bf28      	it	cs
 80019d2:	f1d1 0100 	rsbscs	r1, r1, #0
 80019d6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80019da:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 80019de:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 80019e2:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 80019e6:	dcce      	bgt.n	8001986 <MP3D_SPCORP_Symbol_027+0x102>
 80019e8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80019ec:	9905      	ldr	r1, [sp, #20]
 80019ee:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80019f2:	f1d9 0400 	rsbs	r4, r9, #0
 80019f6:	f280 80ab 	bge.w	8001b50 <MP3D_SPCORP_Symbol_000>
 80019fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019fe:	9802      	ldr	r0, [sp, #8]
 8001a00:	9105      	str	r1, [sp, #20]
 8001a02:	4281      	cmp	r1, r0
 8001a04:	f4bf af18 	bcs.w	8001838 <MP3D_SPCORP_Symbol_001+0x19c>
 8001a08:	ebb9 0904 	subs.w	r9, r9, r4
 8001a0c:	f8cd 9018 	str.w	r9, [sp, #24]
 8001a10:	bfb8      	it	lt
 8001a12:	444c      	addlt	r4, r9
 8001a14:	f1a4 0401 	sub.w	r4, r4, #1
 8001a18:	ea4f 6404 	mov.w	r4, r4, lsl #24
 8001a1c:	f104 040f 	add.w	r4, r4, #15
 8001a20:	f85c eb04 	ldr.w	lr, [ip], #4
 8001a24:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8001a28:	f04f 0119 	mov.w	r1, #25
 8001a2c:	eba1 09ae 	sub.w	r9, r1, lr, asr #2
 8001a30:	49a6      	ldr	r1, [pc, #664]	; (8001ccc <MP3D_SPCORP_Symbol_000+0x17c>)
 8001a32:	f00e 0003 	and.w	r0, lr, #3
 8001a36:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8001a3a:	eb01 1c80 	add.w	ip, r1, r0, lsl #6
 8001a3e:	46f7      	mov	pc, lr
 8001a40:	ea4f 1545 	mov.w	r5, r5, lsl #5
 8001a44:	fa25 f001 	lsr.w	r0, r5, r1
 8001a48:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001a4c:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001a50:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001a54:	1d76      	adds	r6, r6, #5
 8001a56:	f1c1 0e10 	rsb	lr, r1, #16
 8001a5a:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001a5e:	d242      	bcs.n	8001ae6 <MP3D_SPCORP_Symbol_027+0x262>
 8001a60:	fa05 f50e 	lsl.w	r5, r5, lr
 8001a64:	fa25 f001 	lsr.w	r0, r5, r1
 8001a68:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001a6c:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001a70:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001a74:	eb16 060e 	adds.w	r6, r6, lr
 8001a78:	f1c1 0e10 	rsb	lr, r1, #16
 8001a7c:	bf5f      	itttt	pl
 8001a7e:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 8001a82:	ba40      	rev16pl	r0, r0
 8001a84:	40b0      	lslpl	r0, r6
 8001a86:	4305      	orrpl	r5, r0
 8001a88:	bf58      	it	pl
 8001a8a:	3e10      	subpl	r6, #16
 8001a8c:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001a90:	d229      	bcs.n	8001ae6 <MP3D_SPCORP_Symbol_027+0x262>
 8001a92:	fa05 f50e 	lsl.w	r5, r5, lr
 8001a96:	fa25 f001 	lsr.w	r0, r5, r1
 8001a9a:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001a9e:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001aa2:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001aa6:	eb16 060e 	adds.w	r6, r6, lr
 8001aaa:	f1c1 0e10 	rsb	lr, r1, #16
 8001aae:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001ab2:	d218      	bcs.n	8001ae6 <MP3D_SPCORP_Symbol_027+0x262>
 8001ab4:	fa05 f50e 	lsl.w	r5, r5, lr
 8001ab8:	fa25 f001 	lsr.w	r0, r5, r1
 8001abc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8001ac0:	eb00 105a 	add.w	r0, r0, sl, lsr #5
 8001ac4:	f833 a010 	ldrh.w	sl, [r3, r0, lsl #1]
 8001ac8:	eb16 060e 	adds.w	r6, r6, lr
 8001acc:	f1c1 0e10 	rsb	lr, r1, #16
 8001ad0:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001ad4:	d207      	bcs.n	8001ae6 <MP3D_SPCORP_Symbol_027+0x262>
 8001ad6:	e006      	b.n	8001ae6 <MP3D_SPCORP_Symbol_027+0x262>
 8001ad8:	f2af 21b4 	subw	r1, pc, #692	; 0x2b4
 8001adc:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8001ae0:	ea14 015a 	ands.w	r1, r4, sl, lsr #1
 8001ae4:	d3ac      	bcc.n	8001a40 <MP3D_SPCORP_Symbol_027+0x1bc>
 8001ae6:	1876      	adds	r6, r6, r1
 8001ae8:	fa05 f501 	lsl.w	r5, r5, r1
 8001aec:	bf5f      	itttt	pl
 8001aee:	f837 0b02 	ldrhpl.w	r0, [r7], #2
 8001af2:	ba40      	rev16pl	r0, r0
 8001af4:	40b0      	lslpl	r0, r6
 8001af6:	4305      	orrpl	r5, r0
 8001af8:	bf58      	it	pl
 8001afa:	3e10      	subpl	r6, #16
 8001afc:	ea14 109a 	ands.w	r0, r4, sl, lsr #6
 8001b00:	d00b      	beq.n	8001b1a <MP3D_SPCORP_Symbol_027+0x296>
 8001b02:	bf28      	it	cs
 8001b04:	f7ff fe2a 	blcs	800175c <MP3D_SPCORP_Symbol_001+0xc0>
 8001b08:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8001b0c:	f106 0601 	add.w	r6, r6, #1
 8001b10:	fa20 f009 	lsr.w	r0, r0, r9
 8001b14:	006d      	lsls	r5, r5, #1
 8001b16:	bf28      	it	cs
 8001b18:	4240      	negcs	r0, r0
 8001b1a:	f848 0b04 	str.w	r0, [r8], #4
 8001b1e:	ea14 20da 	ands.w	r0, r4, sl, lsr #11
 8001b22:	d00b      	beq.n	8001b3c <MP3D_SPCORP_Symbol_027+0x2b8>
 8001b24:	bf28      	it	cs
 8001b26:	f7ff fe19 	blcs	800175c <MP3D_SPCORP_Symbol_001+0xc0>
 8001b2a:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8001b2e:	f106 0601 	add.w	r6, r6, #1
 8001b32:	fa20 f009 	lsr.w	r0, r0, r9
 8001b36:	006d      	lsls	r5, r5, #1
 8001b38:	bf28      	it	cs
 8001b3a:	4240      	negcs	r0, r0
 8001b3c:	f848 0b04 	str.w	r0, [r8], #4
 8001b40:	ea4f 6ad5 	mov.w	sl, r5, lsr #27
 8001b44:	f1b4 7480 	subs.w	r4, r4, #16777216	; 0x1000000
 8001b48:	f833 a01a 	ldrh.w	sl, [r3, sl, lsl #1]
 8001b4c:	dcc8      	bgt.n	8001ae0 <MP3D_SPCORP_Symbol_027+0x25c>
 8001b4e:	e74b      	b.n	80019e8 <MP3D_SPCORP_Symbol_027+0x164>

08001b50 <MP3D_SPCORP_Symbol_000>:
 8001b50:	bf1c      	itt	ne
 8001b52:	f20f 0e0e 	addwne	lr, pc, #14
 8001b56:	f85c 0c04 	ldrne.w	r0, [ip, #-4]
 8001b5a:	f040 8095 	bne.w	8001c88 <MP3D_SPCORP_Symbol_000+0x138>
 8001b5e:	f000 f88d 	bl	8001c7c <MP3D_SPCORP_Symbol_000+0x12c>
 8001b62:	f104 0401 	add.w	r4, r4, #1
 8001b66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001b68:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8001b6c:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 8001b70:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8001b74:	eba7 0202 	sub.w	r2, r7, r2
 8001b78:	ebab 0bc2 	sub.w	fp, fp, r2, lsl #3
 8001b7c:	f10b 0a10 	add.w	sl, fp, #16
 8001b80:	4556      	cmp	r6, sl
 8001b82:	dc5c      	bgt.n	8001c3e <MP3D_SPCORP_Symbol_000+0xee>
 8001b84:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8001b88:	f899 9014 	ldrb.w	r9, [r9, #20]
 8001b8c:	f10a 0a01 	add.w	sl, sl, #1
 8001b90:	f019 0f01 	tst.w	r9, #1
 8001b94:	bf18      	it	ne
 8001b96:	f20f 0336 	addwne	r3, pc, #54	; 0x36
 8001b9a:	d118      	bne.n	8001bce <MP3D_SPCORP_Symbol_000+0x7e>
 8001b9c:	bf08      	it	eq
 8001b9e:	f20f 0302 	addweq	r3, pc, #2
 8001ba2:	006d      	lsls	r5, r5, #1
 8001ba4:	d304      	bcc.n	8001bb0 <MP3D_SPCORP_Symbol_000+0x60>
 8001ba6:	f04f 0900 	mov.w	r9, #0
 8001baa:	1c76      	adds	r6, r6, #1
 8001bac:	d423      	bmi.n	8001bf6 <MP3D_SPCORP_Symbol_000+0xa6>
 8001bae:	e016      	b.n	8001bde <MP3D_SPCORP_Symbol_000+0x8e>
 8001bb0:	f20f 0ef0 	addw	lr, pc, #240	; 0xf0
 8001bb4:	ea4f 69d5 	mov.w	r9, r5, lsr #27
 8001bb8:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8001bbc:	086d      	lsrs	r5, r5, #1
 8001bbe:	ea4f 1e19 	mov.w	lr, r9, lsr #4
 8001bc2:	fa05 f50e 	lsl.w	r5, r5, lr
 8001bc6:	eb16 060e 	adds.w	r6, r6, lr
 8001bca:	d414      	bmi.n	8001bf6 <MP3D_SPCORP_Symbol_000+0xa6>
 8001bcc:	e007      	b.n	8001bde <MP3D_SPCORP_Symbol_000+0x8e>
 8001bce:	ea6f 7915 	mvn.w	r9, r5, lsr #28
 8001bd2:	f009 090f 	and.w	r9, r9, #15
 8001bd6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001bda:	1d36      	adds	r6, r6, #4
 8001bdc:	d40b      	bmi.n	8001bf6 <MP3D_SPCORP_Symbol_000+0xa6>
 8001bde:	f837 eb02 	ldrh.w	lr, [r7], #2
 8001be2:	fa9e fe9e 	rev16.w	lr, lr
 8001be6:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8001bea:	fa0e fe06 	lsl.w	lr, lr, r6
 8001bee:	ea45 050e 	orr.w	r5, r5, lr
 8001bf2:	f1a6 0610 	sub.w	r6, r6, #16
 8001bf6:	ebb6 4f2a 	cmp.w	r6, sl, asr #16
 8001bfa:	dc20      	bgt.n	8001c3e <MP3D_SPCORP_Symbol_000+0xee>
 8001bfc:	1e64      	subs	r4, r4, #1
 8001bfe:	bfd8      	it	le
 8001c00:	f000 f83c 	blle	8001c7c <MP3D_SPCORP_Symbol_000+0x12c>
 8001c04:	ea1a 02d9 	ands.w	r2, sl, r9, lsr #3
 8001c08:	bf18      	it	ne
 8001c0a:	f000 f82a 	blne	8001c62 <MP3D_SPCORP_Symbol_000+0x112>
 8001c0e:	ea1a 0b99 	ands.w	fp, sl, r9, lsr #2
 8001c12:	bf18      	it	ne
 8001c14:	f000 f82b 	blne	8001c6e <MP3D_SPCORP_Symbol_000+0x11e>
 8001c18:	e8a8 0804 	stmia.w	r8!, {r2, fp}
 8001c1c:	1e64      	subs	r4, r4, #1
 8001c1e:	bfd8      	it	le
 8001c20:	f000 f82c 	blle	8001c7c <MP3D_SPCORP_Symbol_000+0x12c>
 8001c24:	ea1a 0259 	ands.w	r2, sl, r9, lsr #1
 8001c28:	bf18      	it	ne
 8001c2a:	f000 f81a 	blne	8001c62 <MP3D_SPCORP_Symbol_000+0x112>
 8001c2e:	ea1a 0b09 	ands.w	fp, sl, r9
 8001c32:	bf18      	it	ne
 8001c34:	f000 f81b 	blne	8001c6e <MP3D_SPCORP_Symbol_000+0x11e>
 8001c38:	e8a8 0804 	stmia.w	r8!, {r2, fp}
 8001c3c:	469f      	mov	pc, r3
 8001c3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001c40:	b010      	add	sp, #64	; 0x40
 8001c42:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001c46:	4540      	cmp	r0, r8
 8001c48:	bf98      	it	ls
 8001c4a:	e8bd 8ff0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	e920 0006 	stmdb	r0!, {r1, r2}
 8001c5a:	4540      	cmp	r0, r8
 8001c5c:	d1fb      	bne.n	8001c56 <MP3D_SPCORP_Symbol_000+0x106>
 8001c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c62:	006d      	lsls	r5, r5, #1
 8001c64:	bf2c      	ite	cs
 8001c66:	4242      	negcs	r2, r0
 8001c68:	4602      	movcc	r2, r0
 8001c6a:	1c76      	adds	r6, r6, #1
 8001c6c:	4770      	bx	lr
 8001c6e:	006d      	lsls	r5, r5, #1
 8001c70:	bf2c      	ite	cs
 8001c72:	f1c0 0b00 	rsbcs	fp, r0, #0
 8001c76:	4683      	movcc	fp, r0
 8001c78:	1c76      	adds	r6, r6, #1
 8001c7a:	4770      	bx	lr
 8001c7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c80:	f85c 0b04 	ldr.w	r0, [ip], #4
 8001c84:	2c00      	cmp	r4, #0
 8001c86:	d0da      	beq.n	8001c3e <MP3D_SPCORP_Symbol_000+0xee>
 8001c88:	ea4f 0ba0 	mov.w	fp, r0, asr #2
 8001c8c:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <MP3D_SPCORP_Symbol_000+0x180>)
 8001c8e:	f000 0003 	and.w	r0, r0, #3
 8001c92:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8001c96:	5810      	ldr	r0, [r2, r0]
 8001c98:	f1cb 0b19 	rsb	fp, fp, #25
 8001c9c:	fa20 f00b 	lsr.w	r0, r0, fp
 8001ca0:	46f7      	mov	pc, lr
 8001ca2:	0000      	.short	0x0000
 8001ca4:	6e6d6f6b 	.word	0x6e6d6f6b
 8001ca8:	59596567 	.word	0x59596567
 8001cac:	53535656 	.word	0x53535656
 8001cb0:	5c5c5a5a 	.word	0x5c5c5a5a
 8001cb4:	42424242 	.word	0x42424242
 8001cb8:	41414141 	.word	0x41414141
 8001cbc:	44444444 	.word	0x44444444
 8001cc0:	48484848 	.word	0x48484848
 8001cc4:	0800cf34 	.word	0x0800cf34
 8001cc8:	0800bb50 	.word	0x0800bb50
 8001ccc:	0800d140 	.word	0x0800d140
 8001cd0:	0800d144 	.word	0x0800d144

08001cd4 <IMDCT12>:
 8001cd4:	c890      	ldmia	r0!, {r4, r7}
 8001cd6:	6905      	ldr	r5, [r0, #16]
 8001cd8:	6946      	ldr	r6, [r0, #20]
 8001cda:	e9d0 890a 	ldrd	r8, r9, [r0, #40]	; 0x28
 8001cde:	443d      	add	r5, r7
 8001ce0:	ebc5 0747 	rsb	r7, r5, r7, lsl #1
 8001ce4:	eba8 0806 	sub.w	r8, r8, r6
 8001ce8:	eb08 0646 	add.w	r6, r8, r6, lsl #1
 8001cec:	fb35 5302 	smlawb	r3, r5, r2, r5
 8001cf0:	eba6 0504 	sub.w	r5, r6, r4
 8001cf4:	eb04 0466 	add.w	r4, r4, r6, asr #1
 8001cf8:	eba3 0404 	sub.w	r4, r3, r4
 8001cfc:	eba4 0643 	sub.w	r6, r4, r3, lsl #1
 8001d00:	fb38 8302 	smlawb	r3, r8, r2, r8
 8001d04:	ebc9 0807 	rsb	r8, r9, r7
 8001d08:	eb09 0967 	add.w	r9, r9, r7, asr #1
 8001d0c:	eba9 0703 	sub.w	r7, r9, r3
 8001d10:	4499      	add	r9, r3
 8001d12:	fb34 990c 	smlawb	r9, r4, ip, r9
 8001d16:	fb35 880b 	smlawb	r8, r5, fp, r8
 8001d1a:	fb36 770a 	smlawb	r7, r6, sl, r7
 8001d1e:	fb39 441c 	smlawt	r4, r9, ip, r4
 8001d22:	fb38 551b 	smlawt	r5, r8, fp, r5
 8001d26:	fb37 661a 	smlawt	r6, r7, sl, r6
 8001d2a:	eba4 0409 	sub.w	r4, r4, r9
 8001d2e:	fb34 990c 	smlawb	r9, r4, ip, r9
 8001d32:	fb35 880b 	smlawb	r8, r5, fp, r8
 8001d36:	fb36 770a 	smlawb	r7, r6, sl, r7
 8001d3a:	680b      	ldr	r3, [r1, #0]
 8001d3c:	600c      	str	r4, [r1, #0]
 8001d3e:	684c      	ldr	r4, [r1, #4]
 8001d40:	604d      	str	r5, [r1, #4]
 8001d42:	688d      	ldr	r5, [r1, #8]
 8001d44:	608e      	str	r6, [r1, #8]
 8001d46:	fb33 990a 	smlawb	r9, r3, sl, r9
 8001d4a:	fb34 880b 	smlawb	r8, r4, fp, r8
 8001d4e:	fb35 770c 	smlawb	r7, r5, ip, r7
 8001d52:	fb39 331a 	smlawt	r3, r9, sl, r3
 8001d56:	fb38 441b 	smlawt	r4, r8, fp, r4
 8001d5a:	fb37 551c 	smlawt	r5, r7, ip, r5
 8001d5e:	fb33 990a 	smlawb	r9, r3, sl, r9
 8001d62:	fb34 880b 	smlawb	r8, r4, fp, r8
 8001d66:	eba5 0507 	sub.w	r5, r5, r7
 8001d6a:	fb35 770c 	smlawb	r7, r5, ip, r7
 8001d6e:	4770      	bx	lr

08001d70 <IMDCT12_TWICE>:
 8001d70:	f20f 039c 	addw	r3, pc, #156	; 0x9c
 8001d74:	e893 1c10 	ldmia.w	r3, {r4, sl, fp, ip}
 8001d78:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 8001d7c:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
 8001d80:	e8b1 03f0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9}
 8001d84:	e900 03f0 	stmdb	r0, {r4, r5, r6, r7, r8, r9}
 8001d88:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001d8c:	f7ff ffa2 	bl	8001cd4 <IMDCT12>
 8001d90:	f1a0 0e38 	sub.w	lr, r0, #56	; 0x38
 8001d94:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001d98:	f7ff ff9c 	bl	8001cd4 <IMDCT12>
 8001d9c:	f1a0 0e28 	sub.w	lr, r0, #40	; 0x28
 8001da0:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001da4:	f7ff ff96 	bl	8001cd4 <IMDCT12>
 8001da8:	e901 03b8 	stmdb	r1, {r3, r4, r5, r7, r8, r9}
 8001dac:	f101 010c 	add.w	r1, r1, #12
 8001db0:	e8b1 03f0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9}
 8001db4:	f1c5 0500 	rsb	r5, r5, #0
 8001db8:	f1c7 0700 	rsb	r7, r7, #0
 8001dbc:	f1c9 0900 	rsb	r9, r9, #0
 8001dc0:	e900 03f0 	stmdb	r0, {r4, r5, r6, r7, r8, r9}
 8001dc4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001dc8:	f7ff ff84 	bl	8001cd4 <IMDCT12>
 8001dcc:	f1a0 0e38 	sub.w	lr, r0, #56	; 0x38
 8001dd0:	f1c4 0400 	rsb	r4, r4, #0
 8001dd4:	f1c9 0900 	rsb	r9, r9, #0
 8001dd8:	f1c7 0700 	rsb	r7, r7, #0
 8001ddc:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001de0:	f7ff ff78 	bl	8001cd4 <IMDCT12>
 8001de4:	f1a0 0e28 	sub.w	lr, r0, #40	; 0x28
 8001de8:	f1c4 0400 	rsb	r4, r4, #0
 8001dec:	f1c9 0900 	rsb	r9, r9, #0
 8001df0:	f1c7 0700 	rsb	r7, r7, #0
 8001df4:	e88e 03b8 	stmia.w	lr, {r3, r4, r5, r7, r8, r9}
 8001df8:	f7ff ff6c 	bl	8001cd4 <IMDCT12>
 8001dfc:	e901 03b8 	stmdb	r1, {r3, r4, r5, r7, r8, r9}
 8001e00:	f101 010c 	add.w	r1, r1, #12
 8001e04:	f5b2 3200 	subs.w	r2, r2, #131072	; 0x20000
 8001e08:	d5ba      	bpl.n	8001d80 <IMDCT12_TWICE+0x10>
 8001e0a:	f1a0 0018 	sub.w	r0, r0, #24
 8001e0e:	e2c3      	b.n	8002398 <MP3D_SPCORP_Symbol_028+0x1c>
 8001e10:	ffffddb4 	.word	0xffffddb4
 8001e14:	de9610c7 	.word	0xde9610c7
 8001e18:	9e0832ec 	.word	0x9e0832ec
 8001e1c:	642856e6 	.word	0x642856e6

08001e20 <IMDCT36_TWICE>:
 8001e20:	f8df 454c 	ldr.w	r4, [pc, #1356]	; 8002370 <IMDCT36_TWICE+0x550>
 8001e24:	f84d ed04 	str.w	lr, [sp, #-4]!
 8001e28:	eb04 4e02 	add.w	lr, r4, r2, lsl #16
 8001e2c:	ea4e 7e83 	orr.w	lr, lr, r3, lsl #30
 8001e30:	f8df 25a0 	ldr.w	r2, [pc, #1440]	; 80023d4 <MP3D_SPCORP_Symbol_028+0x58>
 8001e34:	f100 0004 	add.w	r0, r0, #4
 8001e38:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8001e3a:	4423      	add	r3, r4
 8001e3c:	eba3 0b44 	sub.w	fp, r3, r4, lsl #1
 8001e40:	eba6 0a05 	sub.w	sl, r6, r5
 8001e44:	ebaa 0c46 	sub.w	ip, sl, r6, lsl #1
 8001e48:	f840 3c10 	str.w	r3, [r0, #-16]
 8001e4c:	f840 cc0c 	str.w	ip, [r0, #-12]
 8001e50:	e8b0 1038 	ldmia.w	r0!, {r3, r4, r5, ip}
 8001e54:	4423      	add	r3, r4
 8001e56:	eba3 0944 	sub.w	r9, r3, r4, lsl #1
 8001e5a:	ebac 0805 	sub.w	r8, ip, r5
 8001e5e:	eba8 0c4c 	sub.w	ip, r8, ip, lsl #1
 8001e62:	f840 3c18 	str.w	r3, [r0, #-24]
 8001e66:	f840 cc14 	str.w	ip, [r0, #-20]
 8001e6a:	c888      	ldmia	r0!, {r3, r7}
 8001e6c:	e8b0 1040 	ldmia.w	r0!, {r6, ip}
 8001e70:	443b      	add	r3, r7
 8001e72:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 8001e76:	ebac 0606 	sub.w	r6, ip, r6
 8001e7a:	eba6 0c4c 	sub.w	ip, r6, ip, lsl #1
 8001e7e:	f840 3c20 	str.w	r3, [r0, #-32]
 8001e82:	f840 cc1c 	str.w	ip, [r0, #-28]
 8001e86:	c828      	ldmia	r0!, {r3, r5}
 8001e88:	e8b0 1010 	ldmia.w	r0!, {r4, ip}
 8001e8c:	442b      	add	r3, r5
 8001e8e:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
 8001e92:	ebac 0404 	sub.w	r4, ip, r4
 8001e96:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001e9a:	f840 3c28 	str.w	r3, [r0, #-40]
 8001e9e:	f840 cc24 	str.w	ip, [r0, #-36]
 8001ea2:	f850 3944 	ldr.w	r3, [r0], #-68
 8001ea6:	eba4 0c08 	sub.w	ip, r4, r8
 8001eaa:	ebac 0c0a 	sub.w	ip, ip, sl
 8001eae:	44a0      	add	r8, r4
 8001eb0:	44a2      	add	sl, r4
 8001eb2:	eba3 0409 	sub.w	r4, r3, r9
 8001eb6:	eb03 0369 	add.w	r3, r3, r9, asr #1
 8001eba:	eba5 0907 	sub.w	r9, r5, r7
 8001ebe:	eba9 090b 	sub.w	r9, r9, fp
 8001ec2:	442f      	add	r7, r5
 8001ec4:	44ab      	add	fp, r5
 8001ec6:	eb04 0569 	add.w	r5, r4, r9, asr #1
 8001eca:	eba4 0409 	sub.w	r4, r4, r9
 8001ece:	f84d 4d10 	str.w	r4, [sp, #-16]!
 8001ed2:	fb3c cc0e 	smlawb	ip, ip, lr, ip
 8001ed6:	fb36 660e 	smlawb	r6, r6, lr, r6
 8001eda:	f8df 9498 	ldr.w	r9, [pc, #1176]	; 8002374 <IMDCT36_TWICE+0x554>
 8001ede:	ebac 0505 	sub.w	r5, ip, r5
 8001ee2:	eba5 0c4c 	sub.w	ip, r5, ip, lsl #1
 8001ee6:	fb37 7419 	smlawt	r4, r7, r9, r7
 8001eea:	fb3b 4409 	smlawb	r4, fp, r9, r4
 8001eee:	ebab 0b07 	sub.w	fp, fp, r7
 8001ef2:	fb3b bb19 	smlawt	fp, fp, r9, fp
 8001ef6:	fb37 f709 	smulwb	r7, r7, r9
 8001efa:	f8df 947c 	ldr.w	r9, [pc, #1148]	; 8002378 <IMDCT36_TWICE+0x558>
 8001efe:	ebab 0b07 	sub.w	fp, fp, r7
 8001f02:	eba8 070a 	sub.w	r7, r8, sl
 8001f06:	fb38 8809 	smlawb	r8, r8, r9, r8
 8001f0a:	fb3a aa19 	smlawt	sl, sl, r9, sl
 8001f0e:	fb37 aa09 	smlawb	sl, r7, r9, sl
 8001f12:	4433      	add	r3, r6
 8001f14:	44ba      	add	sl, r7
 8001f16:	fb37 7719 	smlawt	r7, r7, r9, r7
 8001f1a:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
 8001f1e:	eba8 0907 	sub.w	r9, r8, r7
 8001f22:	eb04 070b 	add.w	r7, r4, fp
 8001f26:	eba9 080a 	sub.w	r8, r9, sl
 8001f2a:	4454      	add	r4, sl
 8001f2c:	eba4 0a4a 	sub.w	sl, r4, sl, lsl #1
 8001f30:	441c      	add	r4, r3
 8001f32:	44b2      	add	sl, r6
 8001f34:	44cb      	add	fp, r9
 8001f36:	ebab 0949 	sub.w	r9, fp, r9, lsl #1
 8001f3a:	44b3      	add	fp, r6
 8001f3c:	4499      	add	r9, r3
 8001f3e:	4447      	add	r7, r8
 8001f40:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001f44:	eba7 0706 	sub.w	r7, r7, r6
 8001f48:	eba8 0803 	sub.w	r8, r8, r3
 8001f4c:	e92d 0180 	stmdb	sp!, {r7, r8}
 8001f50:	f84d 9d04 	str.w	r9, [sp, #-4]!
 8001f54:	f84d bd04 	str.w	fp, [sp, #-4]!
 8001f58:	b420      	push	{r5}
 8001f5a:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001f5e:	e92d 0410 	stmdb	sp!, {r4, sl}
 8001f62:	e890 0ff8 	ldmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001f66:	f1c3 0300 	rsb	r3, r3, #0
 8001f6a:	eba4 0c08 	sub.w	ip, r4, r8
 8001f6e:	ebac 0c0a 	sub.w	ip, ip, sl
 8001f72:	44a0      	add	r8, r4
 8001f74:	44a2      	add	sl, r4
 8001f76:	eba3 0409 	sub.w	r4, r3, r9
 8001f7a:	eb03 0369 	add.w	r3, r3, r9, asr #1
 8001f7e:	eba5 0907 	sub.w	r9, r5, r7
 8001f82:	eba9 090b 	sub.w	r9, r9, fp
 8001f86:	442f      	add	r7, r5
 8001f88:	44ab      	add	fp, r5
 8001f8a:	eb04 0569 	add.w	r5, r4, r9, asr #1
 8001f8e:	eba4 0409 	sub.w	r4, r4, r9
 8001f92:	940b      	str	r4, [sp, #44]	; 0x2c
 8001f94:	fb3c cc0e 	smlawb	ip, ip, lr, ip
 8001f98:	fb36 660e 	smlawb	r6, r6, lr, r6
 8001f9c:	f8df 93d4 	ldr.w	r9, [pc, #980]	; 8002374 <IMDCT36_TWICE+0x554>
 8001fa0:	4465      	add	r5, ip
 8001fa2:	eba5 0c4c 	sub.w	ip, r5, ip, lsl #1
 8001fa6:	fb37 7419 	smlawt	r4, r7, r9, r7
 8001faa:	fb3b 4409 	smlawb	r4, fp, r9, r4
 8001fae:	ebab 0b07 	sub.w	fp, fp, r7
 8001fb2:	fb3b bb19 	smlawt	fp, fp, r9, fp
 8001fb6:	fb37 f709 	smulwb	r7, r7, r9
 8001fba:	f8df 93bc 	ldr.w	r9, [pc, #956]	; 8002378 <IMDCT36_TWICE+0x558>
 8001fbe:	ebab 0b07 	sub.w	fp, fp, r7
 8001fc2:	eba8 070a 	sub.w	r7, r8, sl
 8001fc6:	fb38 8809 	smlawb	r8, r8, r9, r8
 8001fca:	fb3a aa19 	smlawt	sl, sl, r9, sl
 8001fce:	fb37 aa09 	smlawb	sl, r7, r9, sl
 8001fd2:	4433      	add	r3, r6
 8001fd4:	44ba      	add	sl, r7
 8001fd6:	fb37 7719 	smlawt	r7, r7, r9, r7
 8001fda:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
 8001fde:	eba8 0907 	sub.w	r9, r8, r7
 8001fe2:	eb04 070b 	add.w	r7, r4, fp
 8001fe6:	eba9 080a 	sub.w	r8, r9, sl
 8001fea:	4454      	add	r4, sl
 8001fec:	eba4 0a4a 	sub.w	sl, r4, sl, lsl #1
 8001ff0:	441c      	add	r4, r3
 8001ff2:	44b2      	add	sl, r6
 8001ff4:	44cb      	add	fp, r9
 8001ff6:	ebab 0949 	sub.w	r9, fp, r9, lsl #1
 8001ffa:	44b3      	add	fp, r6
 8001ffc:	4499      	add	r9, r3
 8001ffe:	4447      	add	r7, r8
 8002000:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002004:	eba6 0707 	sub.w	r7, r6, r7
 8002008:	eba3 0808 	sub.w	r8, r3, r8
 800200c:	9709      	str	r7, [sp, #36]	; 0x24
 800200e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8002012:	4af1      	ldr	r2, [pc, #964]	; (80023d8 <MP3D_SPCORP_Symbol_028+0x5c>)
 8002014:	f5be 0e01 	subs.w	lr, lr, #8454144	; 0x810000
 8002018:	f100 80ea 	bmi.w	80021f0 <IMDCT36_TWICE+0x3d0>
 800201c:	ea5f 284e 	movs.w	r8, lr, lsl #9
 8002020:	bc48      	pop	{r3, r6}
 8002022:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 8002026:	b500      	push	{lr}
 8002028:	fb34 3307 	smlawb	r3, r4, r7, r3
 800202c:	fb3a 6608 	smlawb	r6, sl, r8, r6
 8002030:	fb33 4417 	smlawt	r4, r3, r7, r4
 8002034:	fb36 aa18 	smlawt	sl, r6, r8, sl
 8002038:	eba4 0403 	sub.w	r4, r4, r3
 800203c:	fb34 3307 	smlawb	r3, r4, r7, r3
 8002040:	fb3a 6608 	smlawb	r6, sl, r8, r6
 8002044:	f8d1 e000 	ldr.w	lr, [r1]
 8002048:	600c      	str	r4, [r1, #0]
 800204a:	4674      	mov	r4, lr
 800204c:	f101 0120 	add.w	r1, r1, #32
 8002050:	f8d1 e000 	ldr.w	lr, [r1]
 8002054:	f8c1 a000 	str.w	sl, [r1]
 8002058:	46f2      	mov	sl, lr
 800205a:	f1a1 011c 	sub.w	r1, r1, #28
 800205e:	fb34 3308 	smlawb	r3, r4, r8, r3
 8002062:	fb3a 6607 	smlawb	r6, sl, r7, r6
 8002066:	fb33 4418 	smlawt	r4, r3, r8, r4
 800206a:	fb36 aa17 	smlawt	sl, r6, r7, sl
 800206e:	fb34 3308 	smlawb	r3, r4, r8, r3
 8002072:	ebaa 0a06 	sub.w	sl, sl, r6
 8002076:	fb3a 6607 	smlawb	r6, sl, r7, r6
 800207a:	bf3c      	itt	cc
 800207c:	425b      	negcc	r3, r3
 800207e:	4276      	negcc	r6, r6
 8002080:	f840 ac28 	str.w	sl, [r0, #-40]
 8002084:	f840 6c24 	str.w	r6, [r0, #-36]
 8002088:	f840 4c48 	str.w	r4, [r0, #-72]
 800208c:	f840 3c04 	str.w	r3, [r0, #-4]
 8002090:	f85d eb04 	ldr.w	lr, [sp], #4
 8002094:	bc48      	pop	{r3, r6}
 8002096:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 800209a:	fb35 3307 	smlawb	r3, r5, r7, r3
 800209e:	fb3c 6608 	smlawb	r6, ip, r8, r6
 80020a2:	fb33 5517 	smlawt	r5, r3, r7, r5
 80020a6:	fb36 cc18 	smlawt	ip, r6, r8, ip
 80020aa:	eba5 0503 	sub.w	r5, r5, r3
 80020ae:	fb35 3307 	smlawb	r3, r5, r7, r3
 80020b2:	fb3c 6608 	smlawb	r6, ip, r8, r6
 80020b6:	f8d1 a000 	ldr.w	sl, [r1]
 80020ba:	f841 5b18 	str.w	r5, [r1], #24
 80020be:	680d      	ldr	r5, [r1, #0]
 80020c0:	f841 c914 	str.w	ip, [r1], #-20
 80020c4:	fb3a 3308 	smlawb	r3, sl, r8, r3
 80020c8:	fb35 6607 	smlawb	r6, r5, r7, r6
 80020cc:	fb33 aa18 	smlawt	sl, r3, r8, sl
 80020d0:	fb36 5517 	smlawt	r5, r6, r7, r5
 80020d4:	fb3a 3308 	smlawb	r3, sl, r8, r3
 80020d8:	eba5 0506 	sub.w	r5, r5, r6
 80020dc:	fb35 6607 	smlawb	r6, r5, r7, r6
 80020e0:	bf3c      	itt	cc
 80020e2:	f1ca 0a00 	rsbcc	sl, sl, #0
 80020e6:	426d      	negcc	r5, r5
 80020e8:	f840 5c2c 	str.w	r5, [r0, #-44]
 80020ec:	f840 6c20 	str.w	r6, [r0, #-32]
 80020f0:	f840 ac44 	str.w	sl, [r0, #-68]
 80020f4:	f840 3c08 	str.w	r3, [r0, #-8]
 80020f8:	bc48      	pop	{r3, r6}
 80020fa:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 80020fe:	fb3b 3307 	smlawb	r3, fp, r7, r3
 8002102:	fb39 6608 	smlawb	r6, r9, r8, r6
 8002106:	fb33 bb17 	smlawt	fp, r3, r7, fp
 800210a:	fb36 9918 	smlawt	r9, r6, r8, r9
 800210e:	ebab 0b03 	sub.w	fp, fp, r3
 8002112:	fb3b 3307 	smlawb	r3, fp, r7, r3
 8002116:	fb39 6608 	smlawb	r6, r9, r8, r6
 800211a:	f8d1 a000 	ldr.w	sl, [r1]
 800211e:	f841 bb10 	str.w	fp, [r1], #16
 8002122:	f8d1 b000 	ldr.w	fp, [r1]
 8002126:	f841 990c 	str.w	r9, [r1], #-12
 800212a:	fb3a 3308 	smlawb	r3, sl, r8, r3
 800212e:	fb3b 6607 	smlawb	r6, fp, r7, r6
 8002132:	fb33 aa18 	smlawt	sl, r3, r8, sl
 8002136:	fb36 bb17 	smlawt	fp, r6, r7, fp
 800213a:	fb3a 3308 	smlawb	r3, sl, r8, r3
 800213e:	ebab 0b06 	sub.w	fp, fp, r6
 8002142:	fb3b 6607 	smlawb	r6, fp, r7, r6
 8002146:	bf3c      	itt	cc
 8002148:	425b      	negcc	r3, r3
 800214a:	4276      	negcc	r6, r6
 800214c:	f840 bc30 	str.w	fp, [r0, #-48]
 8002150:	f840 6c1c 	str.w	r6, [r0, #-28]
 8002154:	f840 ac40 	str.w	sl, [r0, #-64]
 8002158:	f840 3c0c 	str.w	r3, [r0, #-12]
 800215c:	e8b2 0118 	ldmia.w	r2!, {r3, r4, r8}
 8002160:	e8bd 1ec0 	ldmia.w	sp!, {r6, r7, r9, sl, fp, ip}
 8002164:	fb3a 6604 	smlawb	r6, sl, r4, r6
 8002168:	fb3b 7708 	smlawb	r7, fp, r8, r7
 800216c:	fb3c 9903 	smlawb	r9, ip, r3, r9
 8002170:	fb36 aa14 	smlawt	sl, r6, r4, sl
 8002174:	fb37 bb18 	smlawt	fp, r7, r8, fp
 8002178:	fb39 cc13 	smlawt	ip, r9, r3, ip
 800217c:	fb3a 6604 	smlawb	r6, sl, r4, r6
 8002180:	fb3b 7708 	smlawb	r7, fp, r8, r7
 8002184:	fb3c 9903 	smlawb	r9, ip, r3, r9
 8002188:	680d      	ldr	r5, [r1, #0]
 800218a:	f841 ab08 	str.w	sl, [r1], #8
 800218e:	f8d1 a000 	ldr.w	sl, [r1]
 8002192:	f841 b904 	str.w	fp, [r1], #-4
 8002196:	f8d1 b000 	ldr.w	fp, [r1]
 800219a:	f841 cb14 	str.w	ip, [r1], #20
 800219e:	fb35 6608 	smlawb	r6, r5, r8, r6
 80021a2:	fb3a 7704 	smlawb	r7, sl, r4, r7
 80021a6:	fb3b 9903 	smlawb	r9, fp, r3, r9
 80021aa:	fb36 5518 	smlawt	r5, r6, r8, r5
 80021ae:	fb37 aa14 	smlawt	sl, r7, r4, sl
 80021b2:	fb39 bb13 	smlawt	fp, r9, r3, fp
 80021b6:	fb35 6608 	smlawb	r6, r5, r8, r6
 80021ba:	fb3a 7704 	smlawb	r7, sl, r4, r7
 80021be:	fb3b 9903 	smlawb	r9, fp, r3, r9
 80021c2:	bf3e      	ittt	cc
 80021c4:	426d      	negcc	r5, r5
 80021c6:	f1ca 0a00 	rsbcc	sl, sl, #0
 80021ca:	f1c9 0900 	rsbcc	r9, r9, #0
 80021ce:	f840 ac34 	str.w	sl, [r0, #-52]
 80021d2:	f840 7c18 	str.w	r7, [r0, #-24]
 80021d6:	f840 5c3c 	str.w	r5, [r0, #-60]
 80021da:	f840 6c10 	str.w	r6, [r0, #-16]
 80021de:	f840 bc38 	str.w	fp, [r0, #-56]
 80021e2:	f840 9c14 	str.w	r9, [r0, #-20]
 80021e6:	f100 004c 	add.w	r0, r0, #76	; 0x4c
 80021ea:	f53f ae25 	bmi.w	8001e38 <IMDCT36_TWICE+0x18>
 80021ee:	bd00      	pop	{pc}
 80021f0:	ea5f 284e 	movs.w	r8, lr, lsl #9
 80021f4:	f1a0 0048 	sub.w	r0, r0, #72	; 0x48
 80021f8:	e8b1 01c8 	ldmia.w	r1!, {r3, r6, r7, r8}
 80021fc:	bf3c      	itt	cc
 80021fe:	4276      	negcc	r6, r6
 8002200:	f1c8 0800 	rsbcc	r8, r8, #0
 8002204:	e8a0 01c8 	stmia.w	r0!, {r3, r6, r7, r8}
 8002208:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800220c:	f851 7910 	ldr.w	r7, [r1], #-16
 8002210:	bf38      	it	cc
 8002212:	f1c8 0800 	rsbcc	r8, r8, #0
 8002216:	f8c0 8004 	str.w	r8, [r0, #4]
 800221a:	f840 7b38 	str.w	r7, [r0], #56
 800221e:	bc48      	pop	{r3, r6}
 8002220:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 8002224:	fb34 3307 	smlawb	r3, r4, r7, r3
 8002228:	fb3a 6608 	smlawb	r6, sl, r8, r6
 800222c:	fb33 4417 	smlawt	r4, r3, r7, r4
 8002230:	fb36 aa18 	smlawt	sl, r6, r8, sl
 8002234:	eba4 0403 	sub.w	r4, r4, r3
 8002238:	fb34 3307 	smlawb	r3, r4, r7, r3
 800223c:	fb3a 6608 	smlawb	r6, sl, r8, r6
 8002240:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 8002244:	f841 4b20 	str.w	r4, [r1], #32
 8002248:	680c      	ldr	r4, [r1, #0]
 800224a:	f8c1 a000 	str.w	sl, [r1]
 800224e:	46a2      	mov	sl, r4
 8002250:	bf38      	it	cc
 8002252:	425b      	negcc	r3, r3
 8002254:	fb3a 6607 	smlawb	r6, sl, r7, r6
 8002258:	f1a1 011c 	sub.w	r1, r1, #28
 800225c:	fb36 aa17 	smlawt	sl, r6, r7, sl
 8002260:	f840 3c04 	str.w	r3, [r0, #-4]
 8002264:	ebaa 0a06 	sub.w	sl, sl, r6
 8002268:	fb3a 6607 	smlawb	r6, sl, r7, r6
 800226c:	f840 ac28 	str.w	sl, [r0, #-40]
 8002270:	bf38      	it	cc
 8002272:	4276      	negcc	r6, r6
 8002274:	f840 6c24 	str.w	r6, [r0, #-36]
 8002278:	bc48      	pop	{r3, r6}
 800227a:	fb35 3307 	smlawb	r3, r5, r7, r3
 800227e:	fb3c 6608 	smlawb	r6, ip, r8, r6
 8002282:	fb33 5517 	smlawt	r5, r3, r7, r5
 8002286:	fb36 cc18 	smlawt	ip, r6, r8, ip
 800228a:	eba5 0503 	sub.w	r5, r5, r3
 800228e:	fb35 3307 	smlawb	r3, r5, r7, r3
 8002292:	fb3c 6608 	smlawb	r6, ip, r8, r6
 8002296:	6897      	ldr	r7, [r2, #8]
 8002298:	f841 5b18 	str.w	r5, [r1], #24
 800229c:	680d      	ldr	r5, [r1, #0]
 800229e:	f8c1 c000 	str.w	ip, [r1]
 80022a2:	46ac      	mov	ip, r5
 80022a4:	fb3c 6607 	smlawb	r6, ip, r7, r6
 80022a8:	f1a1 0114 	sub.w	r1, r1, #20
 80022ac:	fb36 cc17 	smlawt	ip, r6, r7, ip
 80022b0:	f840 3c08 	str.w	r3, [r0, #-8]
 80022b4:	fb3c 6607 	smlawb	r6, ip, r7, r6
 80022b8:	bf38      	it	cc
 80022ba:	f1cc 0c00 	rsbcc	ip, ip, #0
 80022be:	f840 cc2c 	str.w	ip, [r0, #-44]
 80022c2:	f840 6c20 	str.w	r6, [r0, #-32]
 80022c6:	bc48      	pop	{r3, r6}
 80022c8:	e8b2 0180 	ldmia.w	r2!, {r7, r8}
 80022cc:	fb3b 3307 	smlawb	r3, fp, r7, r3
 80022d0:	fb39 6608 	smlawb	r6, r9, r8, r6
 80022d4:	fb33 bb17 	smlawt	fp, r3, r7, fp
 80022d8:	fb36 9918 	smlawt	r9, r6, r8, r9
 80022dc:	ebab 0b03 	sub.w	fp, fp, r3
 80022e0:	fb3b 3307 	smlawb	r3, fp, r7, r3
 80022e4:	fb39 6608 	smlawb	r6, r9, r8, r6
 80022e8:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 80022ec:	f841 bb10 	str.w	fp, [r1], #16
 80022f0:	f8d1 b000 	ldr.w	fp, [r1]
 80022f4:	f8c1 9000 	str.w	r9, [r1]
 80022f8:	46d9      	mov	r9, fp
 80022fa:	bf38      	it	cc
 80022fc:	425b      	negcc	r3, r3
 80022fe:	fb39 6607 	smlawb	r6, r9, r7, r6
 8002302:	f1a1 010c 	sub.w	r1, r1, #12
 8002306:	fb36 9917 	smlawt	r9, r6, r7, r9
 800230a:	f840 3c0c 	str.w	r3, [r0, #-12]
 800230e:	fb39 6607 	smlawb	r6, r9, r7, r6
 8002312:	f840 9c30 	str.w	r9, [r0, #-48]
 8002316:	bf38      	it	cc
 8002318:	4276      	negcc	r6, r6
 800231a:	f840 6c1c 	str.w	r6, [r0, #-28]
 800231e:	e8b2 0118 	ldmia.w	r2!, {r3, r4, r8}
 8002322:	e8bd 1ec0 	ldmia.w	sp!, {r6, r7, r9, sl, fp, ip}
 8002326:	fb3a 6604 	smlawb	r6, sl, r4, r6
 800232a:	fb3b 7708 	smlawb	r7, fp, r8, r7
 800232e:	fb3c 9903 	smlawb	r9, ip, r3, r9
 8002332:	fb36 aa14 	smlawt	sl, r6, r4, sl
 8002336:	fb37 bb18 	smlawt	fp, r7, r8, fp
 800233a:	fb39 cc13 	smlawt	ip, r9, r3, ip
 800233e:	fb3a 6604 	smlawb	r6, sl, r4, r6
 8002342:	fb3b 7708 	smlawb	r7, fp, r8, r7
 8002346:	fb3c 9903 	smlawb	r9, ip, r3, r9
 800234a:	e8a1 1400 	stmia.w	r1!, {sl, ip}
 800234e:	f841 bb10 	str.w	fp, [r1], #16
 8002352:	bf38      	it	cc
 8002354:	f1c9 0900 	rsbcc	r9, r9, #0
 8002358:	f840 7c18 	str.w	r7, [r0, #-24]
 800235c:	f840 9c14 	str.w	r9, [r0, #-20]
 8002360:	f840 6c10 	str.w	r6, [r0, #-16]
 8002364:	f100 004c 	add.w	r0, r0, #76	; 0x4c
 8002368:	f53f ad66 	bmi.w	8001e38 <IMDCT36_TWICE+0x18>
 800236c:	bd00      	pop	{pc}
 800236e:	0000      	.short	0x0000
 8002370:	403fddb4 	.word	0x403fddb4
 8002374:	c41b2c74 	.word	0xc41b2c74
 8002378:	fc1ca48e 	.word	0xfc1ca48e

0800237c <MP3D_SPCORP_Symbol_028>:
 800237c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8002380:	2a00      	cmp	r2, #0
 8002382:	d117      	bne.n	80023b4 <MP3D_SPCORP_Symbol_028+0x38>
 8002384:	9a00      	ldr	r2, [sp, #0]
 8002386:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238a:	2b02      	cmp	r3, #2
 800238c:	f43f acf0 	beq.w	8001d70 <IMDCT12_TWICE>
 8002390:	f7ff fd46 	bl	8001e20 <IMDCT36_TWICE>
 8002394:	f1a0 004c 	sub.w	r0, r0, #76	; 0x4c
 8002398:	f04f 0100 	mov.w	r1, #0
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	c00e      	stmia	r0!, {r1, r2, r3}
 80023a6:	c00e      	stmia	r0!, {r1, r2, r3}
 80023a8:	c00e      	stmia	r0!, {r1, r2, r3}
 80023aa:	c00e      	stmia	r0!, {r1, r2, r3}
 80023ac:	c00e      	stmia	r0!, {r1, r2, r3}
 80023ae:	c00e      	stmia	r0!, {r1, r2, r3}
 80023b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023b4:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	f7ff fd30 	bl	8001e20 <IMDCT36_TWICE>
 80023c0:	bc0c      	pop	{r2, r3}
 80023c2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80023c6:	ebd2 020c 	rsbs	r2, r2, ip
 80023ca:	bf88      	it	hi
 80023cc:	1f00      	subhi	r0, r0, #4
 80023ce:	d8dc      	bhi.n	800238a <MP3D_SPCORP_Symbol_028+0xe>
 80023d0:	e7e0      	b.n	8002394 <MP3D_SPCORP_Symbol_028+0x18>
 80023d2:	0000      	.short	0x0000
 80023d4:	0800d264 	.word	0x0800d264
 80023d8:	0800d240 	.word	0x0800d240

080023dc <MP3D_SPCORP_Symbol_032>:
 80023dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e0:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 80023e4:	4558      	cmp	r0, fp
 80023e6:	4603      	mov	r3, r0
 80023e8:	d247      	bcs.n	800247a <MP3D_SPCORP_Symbol_032+0x9e>
 80023ea:	f811 5b03 	ldrb.w	r5, [r1], #3
 80023ee:	f8df c098 	ldr.w	ip, [pc, #152]	; 8002488 <MP3D_SPCORP_Symbol_032+0xac>
 80023f2:	f8df e098 	ldr.w	lr, [pc, #152]	; 800248c <MP3D_SPCORP_Symbol_032+0xb0>
 80023f6:	ea4f 0545 	mov.w	r5, r5, lsl #1
 80023fa:	f83c c005 	ldrh.w	ip, [ip, r5]
 80023fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002402:	f1a5 0602 	sub.w	r6, r5, #2
 8002406:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 800240a:	d030      	beq.n	800246e <MP3D_SPCORP_Symbol_032+0x92>
 800240c:	f81e af01 	ldrb.w	sl, [lr, #1]!
 8002410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002414:	d3fa      	bcc.n	800240c <MP3D_SPCORP_Symbol_032+0x30>
 8002416:	4652      	mov	r2, sl
 8002418:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800241c:	e897 0300 	ldmia.w	r7, {r8, r9}
 8002420:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002424:	ebb2 0246 	subs.w	r2, r2, r6, lsl #1
 8002428:	bf44      	itt	mi
 800242a:	eb12 0206 	addsmi.w	r2, r2, r6
 800242e:	eb12 0206 	addsmi.w	r2, r2, r6
 8002432:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8002436:	4552      	cmp	r2, sl
 8002438:	bf18      	it	ne
 800243a:	e897 0030 	ldmiane.w	r7, {r4, r5}
 800243e:	e887 0300 	stmia.w	r7, {r8, r9}
 8002442:	d011      	beq.n	8002468 <MP3D_SPCORP_Symbol_032+0x8c>
 8002444:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002448:	ebb2 0246 	subs.w	r2, r2, r6, lsl #1
 800244c:	bf44      	itt	mi
 800244e:	eb12 0206 	addsmi.w	r2, r2, r6
 8002452:	eb12 0206 	addsmi.w	r2, r2, r6
 8002456:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800245a:	4552      	cmp	r2, sl
 800245c:	bf18      	it	ne
 800245e:	e897 0300 	ldmiane.w	r7, {r8, r9}
 8002462:	e887 0030 	stmia.w	r7, {r4, r5}
 8002466:	d1db      	bne.n	8002420 <MP3D_SPCORP_Symbol_032+0x44>
 8002468:	f1bc 0f00 	cmp.w	ip, #0
 800246c:	d1ce      	bne.n	800240c <MP3D_SPCORP_Symbol_032+0x30>
 800246e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002472:	f103 0308 	add.w	r3, r3, #8
 8002476:	455b      	cmp	r3, fp
 8002478:	d3b7      	bcc.n	80023ea <MP3D_SPCORP_Symbol_032+0xe>
 800247a:	eba3 0000 	sub.w	r0, r3, r0
 800247e:	ea4f 00a0 	mov.w	r0, r0, asr #2
 8002482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002486:	0000      	.short	0x0000
 8002488:	0800d270 	.word	0x0800d270
 800248c:	0800d263 	.word	0x0800d263

08002490 <MP3D_SPCORP_Symbol_031>:
 8002490:	e92d 09f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp}
 8002494:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8002498:	f101 0102 	add.w	r1, r1, #2
 800249c:	1089      	asrs	r1, r1, #2
 800249e:	d20e      	bcs.n	80024be <MP3D_SPCORP_Symbol_031+0x2e>
 80024a0:	e890 0018 	ldmia.w	r0, {r3, r4}
 80024a4:	e892 1800 	ldmia.w	r2, {fp, ip}
 80024a8:	1e49      	subs	r1, r1, #1
 80024aa:	445b      	add	r3, fp
 80024ac:	eba3 0b4b 	sub.w	fp, r3, fp, lsl #1
 80024b0:	4464      	add	r4, ip
 80024b2:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80024b6:	c018      	stmia	r0!, {r3, r4}
 80024b8:	e8a2 1800 	stmia.w	r2!, {fp, ip}
 80024bc:	dd14      	ble.n	80024e8 <MP3D_SPCORP_Symbol_031+0x58>
 80024be:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
 80024c2:	e892 1980 	ldmia.w	r2, {r7, r8, fp, ip}
 80024c6:	1e49      	subs	r1, r1, #1
 80024c8:	443b      	add	r3, r7
 80024ca:	eba3 0747 	sub.w	r7, r3, r7, lsl #1
 80024ce:	4444      	add	r4, r8
 80024d0:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 80024d4:	445d      	add	r5, fp
 80024d6:	eba5 0b4b 	sub.w	fp, r5, fp, lsl #1
 80024da:	4466      	add	r6, ip
 80024dc:	eba6 0c4c 	sub.w	ip, r6, ip, lsl #1
 80024e0:	c078      	stmia	r0!, {r3, r4, r5, r6}
 80024e2:	e8a2 1980 	stmia.w	r2!, {r7, r8, fp, ip}
 80024e6:	dcea      	bgt.n	80024be <MP3D_SPCORP_Symbol_031+0x2e>
 80024e8:	e8bd 09f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp}
 80024ec:	4770      	bx	lr

080024ee <IStereo>:
 80024ee:	ea4f 33c3 	mov.w	r3, r3, lsl #15
 80024f2:	ea4f 32c2 	mov.w	r2, r2, lsl #15
 80024f6:	f8db c000 	ldr.w	ip, [fp]
 80024fa:	1e76      	subs	r6, r6, #1
 80024fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002500:	fb8c 0103 	smull	r0, r1, ip, r3
 8002504:	f8cb 1900 	str.w	r1, [fp, #2304]	; 0x900
 8002508:	fb8c 0102 	smull	r0, r1, ip, r2
 800250c:	f8db c004 	ldr.w	ip, [fp, #4]
 8002510:	f84b 1b04 	str.w	r1, [fp], #4
 8002514:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002518:	fb8c 0103 	smull	r0, r1, ip, r3
 800251c:	f8cb 1900 	str.w	r1, [fp, #2304]	; 0x900
 8002520:	fb8c 0102 	smull	r0, r1, ip, r2
 8002524:	f84b 1b04 	str.w	r1, [fp], #4
 8002528:	dce5      	bgt.n	80024f6 <IStereo+0x8>
 800252a:	e0bb      	b.n	80026a4 <MP3D_SPCORP_Symbol_029+0x178>

0800252c <MP3D_SPCORP_Symbol_029>:
 800252c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002530:	469a      	mov	sl, r3
 8002532:	7a93      	ldrb	r3, [r2, #10]
 8002534:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8002538:	b087      	sub	sp, #28
 800253a:	f10d 0810 	add.w	r8, sp, #16
 800253e:	eb03 070c 	add.w	r7, r3, ip
 8002542:	7a53      	ldrb	r3, [r2, #9]
 8002544:	f500 6e10 	add.w	lr, r0, #2304	; 0x900
 8002548:	f04f 0502 	mov.w	r5, #2
 800254c:	eb03 0c02 	add.w	ip, r3, r2
 8002550:	f06f 0300 	mvn.w	r3, #0
 8002554:	4666      	mov	r6, ip
 8002556:	f04f 0400 	mov.w	r4, #0
 800255a:	9304      	str	r3, [sp, #16]
 800255c:	9305      	str	r3, [sp, #20]
 800255e:	9306      	str	r3, [sp, #24]
 8002560:	e019      	b.n	8002596 <MP3D_SPCORP_Symbol_029+0x6a>
 8002562:	f816 9b01 	ldrb.w	r9, [r6], #1
 8002566:	4673      	mov	r3, lr
 8002568:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800256c:	f8d3 9000 	ldr.w	r9, [r3]
 8002570:	f1b9 0f00 	cmp.w	r9, #0
 8002574:	bf06      	itte	eq
 8002576:	f8d3 9004 	ldreq.w	r9, [r3, #4]
 800257a:	f1b9 0f00 	cmpeq.w	r9, #0
 800257e:	f848 4025 	strne.w	r4, [r8, r5, lsl #2]
 8002582:	d103      	bne.n	800258c <MP3D_SPCORP_Symbol_029+0x60>
 8002584:	f103 0308 	add.w	r3, r3, #8
 8002588:	4573      	cmp	r3, lr
 800258a:	d3ef      	bcc.n	800256c <MP3D_SPCORP_Symbol_029+0x40>
 800258c:	1e6d      	subs	r5, r5, #1
 800258e:	bf48      	it	mi
 8002590:	2502      	movmi	r5, #2
 8002592:	f104 0401 	add.w	r4, r4, #1
 8002596:	42bc      	cmp	r4, r7
 8002598:	dbe3      	blt.n	8002562 <MP3D_SPCORP_Symbol_029+0x36>
 800259a:	7a93      	ldrb	r3, [r2, #10]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00f      	beq.n	80025c0 <MP3D_SPCORP_Symbol_029+0x94>
 80025a0:	f10d 0e10 	add.w	lr, sp, #16
 80025a4:	e89e 4008 	ldmia.w	lr, {r3, lr}
 80025a8:	4573      	cmp	r3, lr
 80025aa:	bfd4      	ite	le
 80025ac:	9b05      	ldrle	r3, [sp, #20]
 80025ae:	9b04      	ldrgt	r3, [sp, #16]
 80025b0:	f8dd e018 	ldr.w	lr, [sp, #24]
 80025b4:	459e      	cmp	lr, r3
 80025b6:	bfa8      	it	ge
 80025b8:	9b06      	ldrge	r3, [sp, #24]
 80025ba:	9306      	str	r3, [sp, #24]
 80025bc:	9305      	str	r3, [sp, #20]
 80025be:	9304      	str	r3, [sp, #16]
 80025c0:	7ad3      	ldrb	r3, [r2, #11]
 80025c2:	f41a 2500 	ands.w	r5, sl, #524288	; 0x80000
 80025c6:	bf18      	it	ne
 80025c8:	2503      	movne	r5, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf0c      	ite	eq
 80025ce:	2401      	moveq	r4, #1
 80025d0:	2403      	movne	r4, #3
 80025d2:	f1a4 0e01 	sub.w	lr, r4, #1
 80025d6:	eba7 0604 	sub.w	r6, r7, r4
 80025da:	4643      	mov	r3, r8
 80025dc:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
 80025e0:	eba6 0704 	sub.w	r7, r6, r4
 80025e4:	45b9      	cmp	r9, r7
 80025e6:	bfb4      	ite	lt
 80025e8:	57cf      	ldrsblt	r7, [r1, r7]
 80025ea:	462f      	movge	r7, r5
 80025ec:	f1be 0e01 	subs.w	lr, lr, #1
 80025f0:	558f      	strb	r7, [r1, r6]
 80025f2:	f106 0601 	add.w	r6, r6, #1
 80025f6:	d5f1      	bpl.n	80025dc <MP3D_SPCORP_Symbol_029+0xb0>
 80025f8:	4683      	mov	fp, r0
 80025fa:	8b50      	ldrh	r0, [r2, #26]
 80025fc:	460f      	mov	r7, r1
 80025fe:	f04f 0502 	mov.w	r5, #2
 8002602:	f000 0201 	and.w	r2, r0, #1
 8002606:	f04f 0001 	mov.w	r0, #1
 800260a:	ea20 41da 	bic.w	r1, r0, sl, lsr #19
 800260e:	2900      	cmp	r1, #0
 8002610:	a802      	add	r0, sp, #8
 8002612:	e880 0006 	stmia.w	r0, {r1, r2}
 8002616:	bf14      	ite	ne
 8002618:	2140      	movne	r1, #64	; 0x40
 800261a:	2107      	moveq	r1, #7
 800261c:	9101      	str	r1, [sp, #4]
 800261e:	f89c 6000 	ldrb.w	r6, [ip]
 8002622:	bf0c      	ite	eq
 8002624:	f8df 4094 	ldreq.w	r4, [pc, #148]	; 80026bc <MP3D_SPCORP_Symbol_029+0x190>
 8002628:	f8df 4094 	ldrne.w	r4, [pc, #148]	; 80026c0 <MP3D_SPCORP_Symbol_029+0x194>
 800262c:	f01a 0f20 	tst.w	sl, #32
 8002630:	bf08      	it	eq
 8002632:	1d24      	addeq	r4, r4, #4
 8002634:	f10c 0901 	add.w	r9, ip, #1
 8002638:	f04f 0800 	mov.w	r8, #0
 800263c:	a904      	add	r1, sp, #16
 800263e:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8002642:	f917 0b01 	ldrsb.w	r0, [r7], #1
 8002646:	4541      	cmp	r1, r8
 8002648:	da23      	bge.n	8002692 <MP3D_SPCORP_Symbol_029+0x166>
 800264a:	9901      	ldr	r1, [sp, #4]
 800264c:	4288      	cmp	r0, r1
 800264e:	d220      	bcs.n	8002692 <MP3D_SPCORP_Symbol_029+0x166>
 8002650:	9902      	ldr	r1, [sp, #8]
 8002652:	2900      	cmp	r1, #0
 8002654:	bf02      	ittt	eq
 8002656:	eb04 00c0 	addeq.w	r0, r4, r0, lsl #3
 800265a:	8802      	ldrheq	r2, [r0, #0]
 800265c:	8843      	ldrheq	r3, [r0, #2]
 800265e:	f43f af46 	beq.w	80024ee <IStereo>
 8002662:	9a03      	ldr	r2, [sp, #12]
 8002664:	f100 0101 	add.w	r1, r0, #1
 8002668:	ea4f 0161 	mov.w	r1, r1, asr #1
 800266c:	fa01 f102 	lsl.w	r1, r1, r2
 8002670:	f001 0303 	and.w	r3, r1, #3
 8002674:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	8822      	ldrh	r2, [r4, #0]
 800267c:	ea4f 01a1 	mov.w	r1, r1, asr #2
 8002680:	f010 0f01 	tst.w	r0, #1
 8002684:	fa23 f301 	lsr.w	r3, r3, r1
 8002688:	bf1e      	ittt	ne
 800268a:	4610      	movne	r0, r2
 800268c:	461a      	movne	r2, r3
 800268e:	4603      	movne	r3, r0
 8002690:	e72d      	b.n	80024ee <IStereo>
 8002692:	f01a 0f20 	tst.w	sl, #32
 8002696:	bf1e      	ittt	ne
 8002698:	0071      	lslne	r1, r6, #1
 800269a:	4658      	movne	r0, fp
 800269c:	f7ff fef8 	blne	8002490 <MP3D_SPCORP_Symbol_031>
 80026a0:	eb0b 0bc6 	add.w	fp, fp, r6, lsl #3
 80026a4:	f819 6b01 	ldrb.w	r6, [r9], #1
 80026a8:	1e6d      	subs	r5, r5, #1
 80026aa:	bf48      	it	mi
 80026ac:	2502      	movmi	r5, #2
 80026ae:	2e00      	cmp	r6, #0
 80026b0:	f108 0801 	add.w	r8, r8, #1
 80026b4:	d1c2      	bne.n	800263c <MP3D_SPCORP_Symbol_029+0x110>
 80026b6:	b007      	add	sp, #28
 80026b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026bc:	0800d2c0 	.word	0x0800d2c0
 80026c0:	0800d2b4 	.word	0x0800d2b4

080026c4 <IDCT32PLONKAS>:
 80026c4:	ea4f 11b1 	mov.w	r1, r1, ror #6
 80026c8:	b50f      	push	{r0, r1, r2, r3, lr}
 80026ca:	f101 5280 	add.w	r2, r1, #268435456	; 0x10000000
 80026ce:	f101 0111 	add.w	r1, r1, #17
 80026d2:	ea4f 61b1 	mov.w	r1, r1, ror #26
 80026d6:	ea4f 62b2 	mov.w	r2, r2, ror #26
 80026da:	f84d 2d64 	str.w	r2, [sp, #-100]!
 80026de:	f84d 1d04 	str.w	r1, [sp, #-4]!
 80026e2:	f500 6490 	add.w	r4, r0, #1152	; 0x480
 80026e6:	f854 1948 	ldr.w	r1, [r4], #-72
 80026ea:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 80026ee:	f850 3b48 	ldr.w	r3, [r0], #72
 80026f2:	f854 5948 	ldr.w	r5, [r4], #-72
 80026f6:	f85c eb04 	ldr.w	lr, [ip], #4
 80026fa:	4413      	add	r3, r2
 80026fc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002700:	440d      	add	r5, r1
 8002702:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 8002706:	fb31 220e 	smlawb	r2, r1, lr, r2
 800270a:	442b      	add	r3, r5
 800270c:	eba3 0b45 	sub.w	fp, r3, r5, lsl #1
 8002710:	fb32 111e 	smlawt	r1, r2, lr, r1
 8002714:	9302      	str	r3, [sp, #8]
 8002716:	fb31 220e 	smlawb	r2, r1, lr, r2
 800271a:	9119      	str	r1, [sp, #100]	; 0x64
 800271c:	920a      	str	r2, [sp, #40]	; 0x28
 800271e:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 8002722:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 8002726:	f850 3b48 	ldr.w	r3, [r0], #72
 800272a:	f854 5948 	ldr.w	r5, [r4], #-72
 800272e:	f85c eb04 	ldr.w	lr, [ip], #4
 8002732:	4413      	add	r3, r2
 8002734:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002738:	440d      	add	r5, r1
 800273a:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 800273e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002742:	442b      	add	r3, r5
 8002744:	eba3 0a45 	sub.w	sl, r3, r5, lsl #1
 8002748:	fb32 111e 	smlawt	r1, r2, lr, r1
 800274c:	9303      	str	r3, [sp, #12]
 800274e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002752:	9118      	str	r1, [sp, #96]	; 0x60
 8002754:	920b      	str	r2, [sp, #44]	; 0x2c
 8002756:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 800275a:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 800275e:	f850 3b48 	ldr.w	r3, [r0], #72
 8002762:	f854 5948 	ldr.w	r5, [r4], #-72
 8002766:	f85c eb04 	ldr.w	lr, [ip], #4
 800276a:	4413      	add	r3, r2
 800276c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002770:	440d      	add	r5, r1
 8002772:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 8002776:	fb31 220e 	smlawb	r2, r1, lr, r2
 800277a:	442b      	add	r3, r5
 800277c:	eba3 0945 	sub.w	r9, r3, r5, lsl #1
 8002780:	fb32 111e 	smlawt	r1, r2, lr, r1
 8002784:	9304      	str	r3, [sp, #16]
 8002786:	fb31 220e 	smlawb	r2, r1, lr, r2
 800278a:	9117      	str	r1, [sp, #92]	; 0x5c
 800278c:	920c      	str	r2, [sp, #48]	; 0x30
 800278e:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 8002792:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 8002796:	f850 3b48 	ldr.w	r3, [r0], #72
 800279a:	f854 5948 	ldr.w	r5, [r4], #-72
 800279e:	f85c eb04 	ldr.w	lr, [ip], #4
 80027a2:	4413      	add	r3, r2
 80027a4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 80027a8:	440d      	add	r5, r1
 80027aa:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 80027ae:	fb31 220e 	smlawb	r2, r1, lr, r2
 80027b2:	442b      	add	r3, r5
 80027b4:	eba3 0845 	sub.w	r8, r3, r5, lsl #1
 80027b8:	fb32 111e 	smlawt	r1, r2, lr, r1
 80027bc:	9305      	str	r3, [sp, #20]
 80027be:	fb31 220e 	smlawb	r2, r1, lr, r2
 80027c2:	9116      	str	r1, [sp, #88]	; 0x58
 80027c4:	920d      	str	r2, [sp, #52]	; 0x34
 80027c6:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 80027ca:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 80027ce:	f850 3b48 	ldr.w	r3, [r0], #72
 80027d2:	f854 5948 	ldr.w	r5, [r4], #-72
 80027d6:	f85c eb04 	ldr.w	lr, [ip], #4
 80027da:	4413      	add	r3, r2
 80027dc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 80027e0:	440d      	add	r5, r1
 80027e2:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 80027e6:	fb31 220e 	smlawb	r2, r1, lr, r2
 80027ea:	442b      	add	r3, r5
 80027ec:	eba3 0745 	sub.w	r7, r3, r5, lsl #1
 80027f0:	fb32 111e 	smlawt	r1, r2, lr, r1
 80027f4:	9306      	str	r3, [sp, #24]
 80027f6:	fb31 220e 	smlawb	r2, r1, lr, r2
 80027fa:	9115      	str	r1, [sp, #84]	; 0x54
 80027fc:	920e      	str	r2, [sp, #56]	; 0x38
 80027fe:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 8002802:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 8002806:	f850 3b48 	ldr.w	r3, [r0], #72
 800280a:	f854 5948 	ldr.w	r5, [r4], #-72
 800280e:	f85c eb04 	ldr.w	lr, [ip], #4
 8002812:	4413      	add	r3, r2
 8002814:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002818:	440d      	add	r5, r1
 800281a:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 800281e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002822:	442b      	add	r3, r5
 8002824:	eba3 0645 	sub.w	r6, r3, r5, lsl #1
 8002828:	fb32 111e 	smlawt	r1, r2, lr, r1
 800282c:	9307      	str	r3, [sp, #28]
 800282e:	eba1 0102 	sub.w	r1, r1, r2
 8002832:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002836:	9114      	str	r1, [sp, #80]	; 0x50
 8002838:	920f      	str	r2, [sp, #60]	; 0x3c
 800283a:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 800283e:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 8002842:	f850 3b48 	ldr.w	r3, [r0], #72
 8002846:	f854 5948 	ldr.w	r5, [r4], #-72
 800284a:	f85c eb04 	ldr.w	lr, [ip], #4
 800284e:	4413      	add	r3, r2
 8002850:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002854:	440d      	add	r5, r1
 8002856:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 800285a:	fb31 220e 	smlawb	r2, r1, lr, r2
 800285e:	442b      	add	r3, r5
 8002860:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
 8002864:	fb32 111e 	smlawt	r1, r2, lr, r1
 8002868:	9308      	str	r3, [sp, #32]
 800286a:	eba1 0102 	sub.w	r1, r1, r2
 800286e:	fb31 220e 	smlawb	r2, r1, lr, r2
 8002872:	9113      	str	r1, [sp, #76]	; 0x4c
 8002874:	9210      	str	r2, [sp, #64]	; 0x40
 8002876:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
 800287a:	f8d4 2480 	ldr.w	r2, [r4, #1152]	; 0x480
 800287e:	6803      	ldr	r3, [r0, #0]
 8002880:	f2a0 10f8 	subw	r0, r0, #504	; 0x1f8
 8002884:	6824      	ldr	r4, [r4, #0]
 8002886:	f85c eb04 	ldr.w	lr, [ip], #4
 800288a:	4413      	add	r3, r2
 800288c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002890:	440c      	add	r4, r1
 8002892:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
 8002896:	fb31 220e 	smlawb	r2, r1, lr, r2
 800289a:	4423      	add	r3, r4
 800289c:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
 80028a0:	fb32 111e 	smlawt	r1, r2, lr, r1
 80028a4:	9309      	str	r3, [sp, #36]	; 0x24
 80028a6:	eba1 0102 	sub.w	r1, r1, r2
 80028aa:	fb31 220e 	smlawb	r2, r1, lr, r2
 80028ae:	9112      	str	r1, [sp, #72]	; 0x48
 80028b0:	9211      	str	r2, [sp, #68]	; 0x44
 80028b2:	e8bc 400e 	ldmia.w	ip!, {r1, r2, r3, lr}
 80028b6:	fb34 bb01 	smlawb	fp, r4, r1, fp
 80028ba:	fb35 aa02 	smlawb	sl, r5, r2, sl
 80028be:	fb3b 4411 	smlawt	r4, fp, r1, r4
 80028c2:	fb3a 5512 	smlawt	r5, sl, r2, r5
 80028c6:	fb34 bb01 	smlawb	fp, r4, r1, fp
 80028ca:	fb35 aa02 	smlawb	sl, r5, r2, sl
 80028ce:	fb36 9903 	smlawb	r9, r6, r3, r9
 80028d2:	fb37 880e 	smlawb	r8, r7, lr, r8
 80028d6:	fb39 6613 	smlawt	r6, r9, r3, r6
 80028da:	fb38 771e 	smlawt	r7, r8, lr, r7
 80028de:	fb36 9903 	smlawb	r9, r6, r3, r9
 80028e2:	eba7 0708 	sub.w	r7, r7, r8
 80028e6:	fb37 880e 	smlawb	r8, r7, lr, r8
 80028ea:	44ca      	add	sl, r9
 80028ec:	ebaa 0949 	sub.w	r9, sl, r9, lsl #1
 80028f0:	44c3      	add	fp, r8
 80028f2:	ebab 0848 	sub.w	r8, fp, r8, lsl #1
 80028f6:	eba7 0704 	sub.w	r7, r7, r4
 80028fa:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80028fe:	eba5 0606 	sub.w	r6, r5, r6
 8002902:	eba6 0545 	sub.w	r5, r6, r5, lsl #1
 8002906:	e89c 5009 	ldmia.w	ip, {r0, r3, ip, lr}
 800290a:	44d3      	add	fp, sl
 800290c:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 8002910:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 8002914:	4437      	add	r7, r6
 8002916:	eba7 0646 	sub.w	r6, r7, r6, lsl #1
 800291a:	fb36 660e 	smlawb	r6, r6, lr, r6
 800291e:	fb39 880c 	smlawb	r8, r9, ip, r8
 8002922:	fb35 440c 	smlawb	r4, r5, ip, r4
 8002926:	fb38 991c 	smlawt	r9, r8, ip, r9
 800292a:	fb34 551c 	smlawt	r5, r4, ip, r5
 800292e:	fb39 880c 	smlawb	r8, r9, ip, r8
 8002932:	fb35 440c 	smlawb	r4, r5, ip, r4
 8002936:	44b2      	add	sl, r6
 8002938:	ebaa 0646 	sub.w	r6, sl, r6, lsl #1
 800293c:	eba8 0805 	sub.w	r8, r8, r5
 8002940:	eb08 0545 	add.w	r5, r8, r5, lsl #1
 8002944:	eba4 0909 	sub.w	r9, r4, r9
 8002948:	eba9 0444 	sub.w	r4, r9, r4, lsl #1
 800294c:	bc06      	pop	{r1, r2}
 800294e:	f8c1 6080 	str.w	r6, [r1, #128]	; 0x80
 8002952:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
 8002956:	f8c1 9280 	str.w	r9, [r1, #640]	; 0x280
 800295a:	f8c1 7380 	str.w	r7, [r1, #896]	; 0x380
 800295e:	f8c2 a080 	str.w	sl, [r2, #128]	; 0x80
 8002962:	f8c2 8180 	str.w	r8, [r2, #384]	; 0x180
 8002966:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
 800296a:	f8c2 b380 	str.w	fp, [r2, #896]	; 0x380
 800296e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002972:	4447      	add	r7, r8
 8002974:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002978:	444e      	add	r6, r9
 800297a:	eba6 0949 	sub.w	r9, r6, r9, lsl #1
 800297e:	4455      	add	r5, sl
 8002980:	eba5 0a4a 	sub.w	sl, r5, sl, lsl #1
 8002984:	445c      	add	r4, fp
 8002986:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 800298a:	fb38 bb00 	smlawb	fp, r8, r0, fp
 800298e:	4435      	add	r5, r6
 8002990:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002994:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8002998:	fb3b 8810 	smlawt	r8, fp, r0, r8
 800299c:	443c      	add	r4, r7
 800299e:	fb3a 9913 	smlawt	r9, sl, r3, r9
 80029a2:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 80029a6:	fb38 bb00 	smlawb	fp, r8, r0, fp
 80029aa:	442c      	add	r4, r5
 80029ac:	eba9 090a 	sub.w	r9, r9, sl
 80029b0:	fb39 aa03 	smlawb	sl, r9, r3, sl
 80029b4:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 80029b8:	fb36 770c 	smlawb	r7, r6, ip, r7
 80029bc:	44d3      	add	fp, sl
 80029be:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 80029c2:	fb37 661c 	smlawt	r6, r7, ip, r6
 80029c6:	eba9 0908 	sub.w	r9, r9, r8
 80029ca:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 80029ce:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 80029d2:	fb38 880e 	smlawb	r8, r8, lr, r8
 80029d6:	fb36 770c 	smlawb	r7, r6, ip, r7
 80029da:	fb35 550e 	smlawb	r5, r5, lr, r5
 80029de:	44c2      	add	sl, r8
 80029e0:	ebaa 0848 	sub.w	r8, sl, r8, lsl #1
 80029e4:	f1c6 0600 	rsb	r6, r6, #0
 80029e8:	f8c2 8100 	str.w	r8, [r2, #256]	; 0x100
 80029ec:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
 80029f0:	f8c2 b300 	str.w	fp, [r2, #768]	; 0x300
 80029f4:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 80029f8:	600d      	str	r5, [r1, #0]
 80029fa:	6015      	str	r5, [r2, #0]
 80029fc:	f8c1 a100 	str.w	sl, [r1, #256]	; 0x100
 8002a00:	f8c1 6200 	str.w	r6, [r1, #512]	; 0x200
 8002a04:	f8c1 9300 	str.w	r9, [r1, #768]	; 0x300
 8002a08:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a0c:	4447      	add	r7, r8
 8002a0e:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002a12:	444e      	add	r6, r9
 8002a14:	eba6 0949 	sub.w	r9, r6, r9, lsl #1
 8002a18:	4455      	add	r5, sl
 8002a1a:	eba5 0a4a 	sub.w	sl, r5, sl, lsl #1
 8002a1e:	445c      	add	r4, fp
 8002a20:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8002a24:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002a28:	4435      	add	r5, r6
 8002a2a:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002a2e:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8002a32:	fb3b 8810 	smlawt	r8, fp, r0, r8
 8002a36:	443c      	add	r4, r7
 8002a38:	fb3a 9913 	smlawt	r9, sl, r3, r9
 8002a3c:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 8002a40:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002a44:	442c      	add	r4, r5
 8002a46:	eba9 090a 	sub.w	r9, r9, sl
 8002a4a:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002a4e:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8002a52:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002a56:	44d3      	add	fp, sl
 8002a58:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 8002a5c:	fb37 661c 	smlawt	r6, r7, ip, r6
 8002a60:	eba9 0908 	sub.w	r9, r9, r8
 8002a64:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 8002a68:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 8002a6c:	fb38 880e 	smlawb	r8, r8, lr, r8
 8002a70:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002a74:	fb35 550e 	smlawb	r5, r5, lr, r5
 8002a78:	44c2      	add	sl, r8
 8002a7a:	ebaa 0848 	sub.w	r8, sl, r8, lsl #1
 8002a7e:	f8c2 43c0 	str.w	r4, [r2, #960]	; 0x3c0
 8002a82:	e92d 0fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp}
 8002a86:	f10d 0b1c 	add.w	fp, sp, #28
 8002a8a:	e89b 0ff0 	ldmia.w	fp, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a8e:	eba8 0707 	sub.w	r7, r8, r7
 8002a92:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8002a96:	eba6 0609 	sub.w	r6, r6, r9
 8002a9a:	eb06 0949 	add.w	r9, r6, r9, lsl #1
 8002a9e:	ebaa 0505 	sub.w	r5, sl, r5
 8002aa2:	eba5 0a4a 	sub.w	sl, r5, sl, lsl #1
 8002aa6:	eba4 040b 	sub.w	r4, r4, fp
 8002aaa:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8002aae:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002ab2:	4435      	add	r5, r6
 8002ab4:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002ab8:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8002abc:	fb3b 8810 	smlawt	r8, fp, r0, r8
 8002ac0:	443c      	add	r4, r7
 8002ac2:	fb3a 9913 	smlawt	r9, sl, r3, r9
 8002ac6:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 8002aca:	fb38 bb00 	smlawb	fp, r8, r0, fp
 8002ace:	442c      	add	r4, r5
 8002ad0:	eba9 090a 	sub.w	r9, r9, sl
 8002ad4:	fb39 aa03 	smlawb	sl, r9, r3, sl
 8002ad8:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8002adc:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002ae0:	44d3      	add	fp, sl
 8002ae2:	ebab 0a4a 	sub.w	sl, fp, sl, lsl #1
 8002ae6:	fb37 661c 	smlawt	r6, r7, ip, r6
 8002aea:	eba9 0908 	sub.w	r9, r9, r8
 8002aee:	eb09 0848 	add.w	r8, r9, r8, lsl #1
 8002af2:	fb3a aa0e 	smlawb	sl, sl, lr, sl
 8002af6:	fb38 880e 	smlawb	r8, r8, lr, r8
 8002afa:	fb36 770c 	smlawb	r7, r6, ip, r7
 8002afe:	fb35 550e 	smlawb	r5, r5, lr, r5
 8002b02:	44c2      	add	sl, r8
 8002b04:	ebaa 0848 	sub.w	r8, sl, r8, lsl #1
 8002b08:	f8c1 43c0 	str.w	r4, [r1, #960]	; 0x3c0
 8002b0c:	e8bd 5018 	ldmia.w	sp!, {r3, r4, ip, lr}
 8002b10:	441d      	add	r5, r3
 8002b12:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 8002b16:	6415      	str	r5, [r2, #64]	; 0x40
 8002b18:	640b      	str	r3, [r1, #64]	; 0x40
 8002b1a:	eba7 0404 	sub.w	r4, r7, r4
 8002b1e:	eba4 0747 	sub.w	r7, r4, r7, lsl #1
 8002b22:	f8c1 41c0 	str.w	r4, [r1, #448]	; 0x1c0
 8002b26:	f8c1 7240 	str.w	r7, [r1, #576]	; 0x240
 8002b2a:	44b4      	add	ip, r6
 8002b2c:	ebac 0646 	sub.w	r6, ip, r6, lsl #1
 8002b30:	f8c2 6240 	str.w	r6, [r2, #576]	; 0x240
 8002b34:	f8c2 c1c0 	str.w	ip, [r2, #448]	; 0x1c0
 8002b38:	e8bd 1018 	ldmia.w	sp!, {r3, r4, ip}
 8002b3c:	44d6      	add	lr, sl
 8002b3e:	ebae 0a4a 	sub.w	sl, lr, sl, lsl #1
 8002b42:	f8c2 e0c0 	str.w	lr, [r2, #192]	; 0xc0
 8002b46:	f8c2 a140 	str.w	sl, [r2, #320]	; 0x140
 8002b4a:	445b      	add	r3, fp
 8002b4c:	eba3 0b4b 	sub.w	fp, r3, fp, lsl #1
 8002b50:	f8c1 3340 	str.w	r3, [r1, #832]	; 0x340
 8002b54:	f8c1 b2c0 	str.w	fp, [r1, #704]	; 0x2c0
 8002b58:	4444      	add	r4, r8
 8002b5a:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8002b5e:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
 8002b62:	f8c1 80c0 	str.w	r8, [r1, #192]	; 0xc0
 8002b66:	44cc      	add	ip, r9
 8002b68:	ebac 0949 	sub.w	r9, ip, r9, lsl #1
 8002b6c:	f8c2 c2c0 	str.w	ip, [r2, #704]	; 0x2c0
 8002b70:	f8c2 9340 	str.w	r9, [r2, #832]	; 0x340
 8002b74:	b008      	add	sp, #32
 8002b76:	9803      	ldr	r0, [sp, #12]
 8002b78:	ea4f 11b1 	mov.w	r1, r1, ror #6
 8002b7c:	f001 4270 	and.w	r2, r1, #4026531840	; 0xf0000000
 8002b80:	f8df c890 	ldr.w	ip, [pc, #2192]	; 8003414 <MP3D_SPCORP_Symbol_033+0x34>
 8002b84:	ea4f 1181 	mov.w	r1, r1, lsl #6
 8002b88:	ebac 6cd2 	sub.w	ip, ip, r2, lsr #27
 8002b8c:	f102 43e0 	add.w	r3, r2, #1879048192	; 0x70000000
 8002b90:	eb01 6793 	add.w	r7, r1, r3, lsr #26
 8002b94:	683f      	ldr	r7, [r7, #0]
 8002b96:	f103 5880 	add.w	r8, r3, #268435456	; 0x10000000
 8002b9a:	eb01 6898 	add.w	r8, r1, r8, lsr #26
 8002b9e:	e898 0120 	ldmia.w	r8, {r5, r8}
 8002ba2:	442f      	add	r7, r5
 8002ba4:	eba7 0708 	sub.w	r7, r7, r8
 8002ba8:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002bac:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002bb0:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002bb4:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002bb8:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002bbc:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002bc0:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002bc4:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002bc8:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002bcc:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002bd0:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002bd4:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002bd8:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002bdc:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002be0:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002be4:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002be8:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002bec:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002bf0:	e8bc 4010 	ldmia.w	ip!, {r4, lr}
 8002bf4:	e8b1 0f00 	ldmia.w	r1!, {r8, r9, sl, fp}
 8002bf8:	fb38 7704 	smlawb	r7, r8, r4, r7
 8002bfc:	fb39 7714 	smlawt	r7, r9, r4, r7
 8002c00:	fb3a 770e 	smlawb	r7, sl, lr, r7
 8002c04:	fb3b 771e 	smlawt	r7, fp, lr, r7
 8002c08:	f10c 0c20 	add.w	ip, ip, #32
 8002c0c:	f501 7471 	add.w	r4, r1, #964	; 0x3c4
 8002c10:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c14:	f854 bb08 	ldr.w	fp, [r4], #8
 8002c18:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c1c:	fb3a f615 	smulwt	r6, sl, r5
 8002c20:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c24:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c28:	f854 bb08 	ldr.w	fp, [r4], #8
 8002c2c:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c30:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002c34:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c38:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c3c:	f854 bb08 	ldr.w	fp, [r4], #8
 8002c40:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c44:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002c48:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c4c:	f854 ab08 	ldr.w	sl, [r4], #8
 8002c50:	f854 b93c 	ldr.w	fp, [r4], #-60
 8002c54:	e8bc 4020 	ldmia.w	ip!, {r5, lr}
 8002c58:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002c5c:	fb3b 661e 	smlawt	r6, fp, lr, r6
 8002c60:	eb04 6a93 	add.w	sl, r4, r3, lsr #26
 8002c64:	f8da a000 	ldr.w	sl, [sl]
 8002c68:	eb01 6492 	add.w	r4, r1, r2, lsr #26
 8002c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c70:	ebaa 0606 	sub.w	r6, sl, r6
 8002c74:	f506 7600 	add.w	r6, r6, #512	; 0x200
 8002c78:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c7c:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002c80:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002c84:	f820 7b48 	strh.w	r7, [r0], #72
 8002c88:	f500 6390 	add.w	r3, r0, #1152	; 0x480
 8002c8c:	f823 6c48 	strh.w	r6, [r3, #-72]
 8002c90:	f500 6307 	add.w	r3, r0, #2160	; 0x870
 8002c94:	f8df c780 	ldr.w	ip, [pc, #1920]	; 8003418 <MP3D_SPCORP_Symbol_033+0x38>
 8002c98:	f1a4 0408 	sub.w	r4, r4, #8
 8002c9c:	f20f 080c 	addw	r8, pc, #12
 8002ca0:	eb08 68d2 	add.w	r8, r8, r2, lsr #27
 8002ca4:	f8d8 8000 	ldr.w	r8, [r8]
 8002ca8:	46c7      	mov	pc, r8
 8002caa:	0000      	.short	0x0000
 8002cac:	08002ccd 	.word	0x08002ccd
 8002cb0:	08002daf 	.word	0x08002daf
 8002cb4:	08002e89 	.word	0x08002e89
 8002cb8:	08002f63 	.word	0x08002f63
 8002cbc:	0800303d 	.word	0x0800303d
 8002cc0:	08003117 	.word	0x08003117
 8002cc4:	080031f1 	.word	0x080031f1
 8002cc8:	080032cb 	.word	0x080032cb

08002ccc <offset_0>:
 8002ccc:	f104 0408 	add.w	r4, r4, #8
 8002cd0:	e8f4 8902 	ldrd	r8, r9, [r4], #8
 8002cd4:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002cd8:	e9d4 ab0c 	ldrd	sl, fp, [r4, #48]	; 0x30
 8002cdc:	fb38 1602 	smlawb	r6, r8, r2, r1
 8002ce0:	fb3b fe12 	smulwt	lr, fp, r2
 8002ce4:	fb38 1712 	smlawt	r7, r8, r2, r1
 8002ce8:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002cec:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002cf0:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002cf4:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002cf8:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002cfc:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002d00:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002d04:	e9d4 ab08 	ldrd	sl, fp, [r4, #32]
 8002d08:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002d0c:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002d10:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002d14:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d18:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d1c:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002d20:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002d24:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002d28:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002d2c:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002d30:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8002d34:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002d38:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002d3c:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002d40:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d44:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d48:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002d4c:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002d50:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002d54:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002d58:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002d5c:	f104 0428 	add.w	r4, r4, #40	; 0x28
 8002d60:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002d64:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002d68:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002d6c:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002d70:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8002d74:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8002d78:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002d7c:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002d80:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002d84:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002d88:	ebae 0e09 	sub.w	lr, lr, r9
 8002d8c:	4456      	add	r6, sl
 8002d8e:	eba7 070a 	sub.w	r7, r7, sl
 8002d92:	eba6 060e 	sub.w	r6, r6, lr
 8002d96:	444f      	add	r7, r9
 8002d98:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002d9c:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002da0:	f820 6b48 	strh.w	r6, [r0], #72
 8002da4:	f823 7948 	strh.w	r7, [r3], #-72
 8002da8:	4298      	cmp	r0, r3
 8002daa:	d191      	bne.n	8002cd0 <offset_0+0x4>
 8002dac:	e2fc      	b.n	80033a8 <offset_14+0xde>

08002dae <offset_2>:
 8002dae:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8002db2:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002db6:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8002dba:	fb39 fe12 	smulwt	lr, r9, r2
 8002dbe:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8002dc2:	fb39 7702 	smlawb	r7, r9, r2, r7
 8002dc6:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8002dca:	fb38 6615 	smlawt	r6, r8, r5, r6
 8002dce:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8002dd2:	fb38 7705 	smlawb	r7, r8, r5, r7
 8002dd6:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002dda:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002dde:	e9d4 ab08 	ldrd	sl, fp, [r4, #32]
 8002de2:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002de6:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002dea:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002dee:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002df2:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002df6:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002dfa:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002dfe:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002e02:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002e06:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002e0a:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8002e0e:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002e12:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002e16:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002e1a:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002e1e:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002e22:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002e26:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002e2a:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002e2e:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002e32:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002e36:	f104 0420 	add.w	r4, r4, #32
 8002e3a:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002e3e:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002e42:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002e46:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002e4a:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8002e4e:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8002e52:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002e56:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002e5a:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002e5e:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002e62:	ebae 0e09 	sub.w	lr, lr, r9
 8002e66:	4456      	add	r6, sl
 8002e68:	eba7 070a 	sub.w	r7, r7, sl
 8002e6c:	eba6 060e 	sub.w	r6, r6, lr
 8002e70:	444f      	add	r7, r9
 8002e72:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002e76:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002e7a:	f820 6b48 	strh.w	r6, [r0], #72
 8002e7e:	f823 7948 	strh.w	r7, [r3], #-72
 8002e82:	4298      	cmp	r0, r3
 8002e84:	d193      	bne.n	8002dae <offset_2>
 8002e86:	e28f      	b.n	80033a8 <offset_14+0xde>

08002e88 <offset_4>:
 8002e88:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8002e8c:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002e90:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8002e94:	fb39 fe12 	smulwt	lr, r9, r2
 8002e98:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8002e9c:	fb39 7702 	smlawb	r7, r9, r2, r7
 8002ea0:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8002ea4:	fb38 6615 	smlawt	r6, r8, r5, r6
 8002ea8:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8002eac:	fb38 7705 	smlawb	r7, r8, r5, r7
 8002eb0:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002eb4:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002eb8:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 8002ebc:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002ec0:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002ec4:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002ec8:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002ecc:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002ed0:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002ed4:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002ed8:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002edc:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002ee0:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002ee4:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8002ee8:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002eec:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002ef0:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002ef4:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002ef8:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002efc:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002f00:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002f04:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002f08:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002f0c:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002f10:	f104 0420 	add.w	r4, r4, #32
 8002f14:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002f18:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002f1c:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002f20:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002f24:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8002f28:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8002f2c:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002f30:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002f34:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002f38:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002f3c:	ebae 0e09 	sub.w	lr, lr, r9
 8002f40:	4456      	add	r6, sl
 8002f42:	eba7 070a 	sub.w	r7, r7, sl
 8002f46:	eba6 060e 	sub.w	r6, r6, lr
 8002f4a:	444f      	add	r7, r9
 8002f4c:	f326 268f 	ssat	r6, #16, r6, asr #10
 8002f50:	f327 278f 	ssat	r7, #16, r7, asr #10
 8002f54:	f820 6b48 	strh.w	r6, [r0], #72
 8002f58:	f823 7948 	strh.w	r7, [r3], #-72
 8002f5c:	4298      	cmp	r0, r3
 8002f5e:	d193      	bne.n	8002e88 <offset_4>
 8002f60:	e222      	b.n	80033a8 <offset_14+0xde>

08002f62 <offset_6>:
 8002f62:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8002f66:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002f6a:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8002f6e:	fb39 fe12 	smulwt	lr, r9, r2
 8002f72:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8002f76:	fb39 7702 	smlawb	r7, r9, r2, r7
 8002f7a:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8002f7e:	fb38 6615 	smlawt	r6, r8, r5, r6
 8002f82:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8002f86:	fb38 7705 	smlawb	r7, r8, r5, r7
 8002f8a:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002f8e:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002f92:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 8002f96:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002f9a:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002f9e:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002fa2:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002fa6:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002faa:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002fae:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002fb2:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002fb6:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8002fba:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002fbe:	e954 ab0c 	ldrd	sl, fp, [r4, #-48]	; 0x30
 8002fc2:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002fc6:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002fca:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002fce:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002fd2:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8002fd6:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8002fda:	fb39 7715 	smlawt	r7, r9, r5, r7
 8002fde:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8002fe2:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8002fe6:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8002fea:	f104 0420 	add.w	r4, r4, #32
 8002fee:	fb38 7712 	smlawt	r7, r8, r2, r7
 8002ff2:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8002ff6:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8002ffa:	fb38 6602 	smlawb	r6, r8, r2, r6
 8002ffe:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8003002:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8003006:	fb39 ee05 	smlawb	lr, r9, r5, lr
 800300a:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800300e:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003012:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003016:	ebae 0e09 	sub.w	lr, lr, r9
 800301a:	4456      	add	r6, sl
 800301c:	eba7 070a 	sub.w	r7, r7, sl
 8003020:	eba6 060e 	sub.w	r6, r6, lr
 8003024:	444f      	add	r7, r9
 8003026:	f326 268f 	ssat	r6, #16, r6, asr #10
 800302a:	f327 278f 	ssat	r7, #16, r7, asr #10
 800302e:	f820 6b48 	strh.w	r6, [r0], #72
 8003032:	f823 7948 	strh.w	r7, [r3], #-72
 8003036:	4298      	cmp	r0, r3
 8003038:	d193      	bne.n	8002f62 <offset_6>
 800303a:	e1b5      	b.n	80033a8 <offset_14+0xde>

0800303c <offset_8>:
 800303c:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 8003040:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003044:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8003048:	fb39 fe12 	smulwt	lr, r9, r2
 800304c:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8003050:	fb39 7702 	smlawb	r7, r9, r2, r7
 8003054:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8003058:	fb38 6615 	smlawt	r6, r8, r5, r6
 800305c:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8003060:	fb38 7705 	smlawb	r7, r8, r5, r7
 8003064:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003068:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800306c:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 8003070:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003074:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003078:	fb38 7712 	smlawt	r7, r8, r2, r7
 800307c:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003080:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003084:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003088:	fb39 7715 	smlawt	r7, r9, r5, r7
 800308c:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003090:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003094:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003098:	e954 ab0c 	ldrd	sl, fp, [r4, #-48]	; 0x30
 800309c:	fb38 6602 	smlawb	r6, r8, r2, r6
 80030a0:	fb3b ee12 	smlawt	lr, fp, r2, lr
 80030a4:	fb38 7712 	smlawt	r7, r8, r2, r7
 80030a8:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80030ac:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80030b0:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80030b4:	fb39 7715 	smlawt	r7, r9, r5, r7
 80030b8:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80030bc:	e874 890e 	ldrd	r8, r9, [r4], #-56	; 0x38
 80030c0:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80030c4:	e8f4 ab16 	ldrd	sl, fp, [r4], #88	; 0x58
 80030c8:	fb38 7712 	smlawt	r7, r8, r2, r7
 80030cc:	fb3b ee12 	smlawt	lr, fp, r2, lr
 80030d0:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80030d4:	fb38 6602 	smlawb	r6, r8, r2, r6
 80030d8:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 80030dc:	eb07 0768 	add.w	r7, r7, r8, asr #1
 80030e0:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80030e4:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80030e8:	fb39 7715 	smlawt	r7, r9, r5, r7
 80030ec:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80030f0:	ebae 0e09 	sub.w	lr, lr, r9
 80030f4:	4456      	add	r6, sl
 80030f6:	eba7 070a 	sub.w	r7, r7, sl
 80030fa:	eba6 060e 	sub.w	r6, r6, lr
 80030fe:	444f      	add	r7, r9
 8003100:	f326 268f 	ssat	r6, #16, r6, asr #10
 8003104:	f327 278f 	ssat	r7, #16, r7, asr #10
 8003108:	f820 6b48 	strh.w	r6, [r0], #72
 800310c:	f823 7948 	strh.w	r7, [r3], #-72
 8003110:	4298      	cmp	r0, r3
 8003112:	d193      	bne.n	800303c <offset_8>
 8003114:	e148      	b.n	80033a8 <offset_14+0xde>

08003116 <offset_10>:
 8003116:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 800311a:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800311e:	fb3a 1602 	smlawb	r6, sl, r2, r1
 8003122:	fb39 fe12 	smulwt	lr, r9, r2
 8003126:	fb3a 1712 	smlawt	r7, sl, r2, r1
 800312a:	fb39 7702 	smlawb	r7, r9, r2, r7
 800312e:	fb3b ee05 	smlawb	lr, fp, r5, lr
 8003132:	fb38 6615 	smlawt	r6, r8, r5, r6
 8003136:	fb3b 7715 	smlawt	r7, fp, r5, r7
 800313a:	fb38 7705 	smlawb	r7, r8, r5, r7
 800313e:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003142:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003146:	e954 ab08 	ldrd	sl, fp, [r4, #-32]
 800314a:	fb38 6602 	smlawb	r6, r8, r2, r6
 800314e:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003152:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003156:	fb3b 7702 	smlawb	r7, fp, r2, r7
 800315a:	fb39 ee05 	smlawb	lr, r9, r5, lr
 800315e:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003162:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003166:	fb3a 7705 	smlawb	r7, sl, r5, r7
 800316a:	e874 890a 	ldrd	r8, r9, [r4], #-40	; 0x28
 800316e:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003172:	e874 ab04 	ldrd	sl, fp, [r4], #-16
 8003176:	fb38 6602 	smlawb	r6, r8, r2, r6
 800317a:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800317e:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003182:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003186:	fb39 ee05 	smlawb	lr, r9, r5, lr
 800318a:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800318e:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003192:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003196:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 800319a:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800319e:	f104 0460 	add.w	r4, r4, #96	; 0x60
 80031a2:	fb38 7712 	smlawt	r7, r8, r2, r7
 80031a6:	fb3b ee12 	smlawt	lr, fp, r2, lr
 80031aa:	fb3b 7702 	smlawb	r7, fp, r2, r7
 80031ae:	fb38 6602 	smlawb	r6, r8, r2, r6
 80031b2:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 80031b6:	eb07 0768 	add.w	r7, r7, r8, asr #1
 80031ba:	fb39 ee05 	smlawb	lr, r9, r5, lr
 80031be:	fb3a 6615 	smlawt	r6, sl, r5, r6
 80031c2:	fb39 7715 	smlawt	r7, r9, r5, r7
 80031c6:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80031ca:	ebae 0e09 	sub.w	lr, lr, r9
 80031ce:	4456      	add	r6, sl
 80031d0:	eba7 070a 	sub.w	r7, r7, sl
 80031d4:	eba6 060e 	sub.w	r6, r6, lr
 80031d8:	444f      	add	r7, r9
 80031da:	f326 268f 	ssat	r6, #16, r6, asr #10
 80031de:	f327 278f 	ssat	r7, #16, r7, asr #10
 80031e2:	f820 6b48 	strh.w	r6, [r0], #72
 80031e6:	f823 7948 	strh.w	r7, [r3], #-72
 80031ea:	4298      	cmp	r0, r3
 80031ec:	d193      	bne.n	8003116 <offset_10>
 80031ee:	e0db      	b.n	80033a8 <offset_14+0xde>

080031f0 <offset_12>:
 80031f0:	e8b4 0f00 	ldmia.w	r4!, {r8, r9, sl, fp}
 80031f4:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80031f8:	fb3a 1602 	smlawb	r6, sl, r2, r1
 80031fc:	fb39 fe12 	smulwt	lr, r9, r2
 8003200:	fb3a 1712 	smlawt	r7, sl, r2, r1
 8003204:	fb39 7702 	smlawb	r7, r9, r2, r7
 8003208:	fb3b ee05 	smlawb	lr, fp, r5, lr
 800320c:	fb38 6615 	smlawt	r6, r8, r5, r6
 8003210:	fb3b 7715 	smlawt	r7, fp, r5, r7
 8003214:	fb38 7705 	smlawb	r7, r8, r5, r7
 8003218:	e874 8906 	ldrd	r8, r9, [r4], #-24
 800321c:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003220:	e874 ab08 	ldrd	sl, fp, [r4], #-32
 8003224:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003228:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800322c:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003230:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003234:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003238:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800323c:	fb39 7715 	smlawt	r7, r9, r5, r7
 8003240:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003244:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003248:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800324c:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 8003250:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003254:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003258:	fb38 7712 	smlawt	r7, r8, r2, r7
 800325c:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003260:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003264:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003268:	fb39 7715 	smlawt	r7, r9, r5, r7
 800326c:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003270:	e894 0f00 	ldmia.w	r4, {r8, r9, sl, fp}
 8003274:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003278:	f104 0460 	add.w	r4, r4, #96	; 0x60
 800327c:	fb38 7712 	smlawt	r7, r8, r2, r7
 8003280:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003284:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003288:	fb38 6602 	smlawb	r6, r8, r2, r6
 800328c:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 8003290:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8003294:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003298:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800329c:	fb39 7715 	smlawt	r7, r9, r5, r7
 80032a0:	fb3a 7705 	smlawb	r7, sl, r5, r7
 80032a4:	ebae 0e09 	sub.w	lr, lr, r9
 80032a8:	4456      	add	r6, sl
 80032aa:	eba7 070a 	sub.w	r7, r7, sl
 80032ae:	eba6 060e 	sub.w	r6, r6, lr
 80032b2:	444f      	add	r7, r9
 80032b4:	f326 268f 	ssat	r6, #16, r6, asr #10
 80032b8:	f327 278f 	ssat	r7, #16, r7, asr #10
 80032bc:	f820 6b48 	strh.w	r6, [r0], #72
 80032c0:	f823 7948 	strh.w	r7, [r3], #-72
 80032c4:	4298      	cmp	r0, r3
 80032c6:	d193      	bne.n	80031f0 <offset_12>
 80032c8:	e06e      	b.n	80033a8 <offset_14+0xde>

080032ca <offset_14>:
 80032ca:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 80032ce:	e874 ab0e 	ldrd	sl, fp, [r4], #-56	; 0x38
 80032d2:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80032d6:	fb3a 1602 	smlawb	r6, sl, r2, r1
 80032da:	fb39 fe12 	smulwt	lr, r9, r2
 80032de:	fb3a 1712 	smlawt	r7, sl, r2, r1
 80032e2:	fb39 7702 	smlawb	r7, r9, r2, r7
 80032e6:	fb3b ee05 	smlawb	lr, fp, r5, lr
 80032ea:	fb38 6615 	smlawt	r6, r8, r5, r6
 80032ee:	fb3b 7715 	smlawt	r7, fp, r5, r7
 80032f2:	fb38 7705 	smlawb	r7, r8, r5, r7
 80032f6:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 80032fa:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 80032fe:	e9d4 ab08 	ldrd	sl, fp, [r4, #32]
 8003302:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003306:	fb3b ee12 	smlawt	lr, fp, r2, lr
 800330a:	fb38 7712 	smlawt	r7, r8, r2, r7
 800330e:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003312:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003316:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800331a:	fb39 7715 	smlawt	r7, r9, r5, r7
 800331e:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003322:	e8b4 0300 	ldmia.w	r4!, {r8, r9}
 8003326:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 800332a:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
 800332e:	fb38 6602 	smlawb	r6, r8, r2, r6
 8003332:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003336:	fb38 7712 	smlawt	r7, r8, r2, r7
 800333a:	fb3b 7702 	smlawb	r7, fp, r2, r7
 800333e:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003342:	fb3a 6615 	smlawt	r6, sl, r5, r6
 8003346:	fb39 7715 	smlawt	r7, r9, r5, r7
 800334a:	fb3a 7705 	smlawb	r7, sl, r5, r7
 800334e:	e8f4 8902 	ldrd	r8, r9, [r4], #8
 8003352:	e8bc 0024 	ldmia.w	ip!, {r2, r5}
 8003356:	e8f4 ab16 	ldrd	sl, fp, [r4], #88	; 0x58
 800335a:	fb38 7712 	smlawt	r7, r8, r2, r7
 800335e:	fb3b ee12 	smlawt	lr, fp, r2, lr
 8003362:	fb3b 7702 	smlawb	r7, fp, r2, r7
 8003366:	fb38 6602 	smlawb	r6, r8, r2, r6
 800336a:	eb0e 0e6b 	add.w	lr, lr, fp, asr #1
 800336e:	eb07 0768 	add.w	r7, r7, r8, asr #1
 8003372:	fb39 ee05 	smlawb	lr, r9, r5, lr
 8003376:	fb3a 6615 	smlawt	r6, sl, r5, r6
 800337a:	fb39 7715 	smlawt	r7, r9, r5, r7
 800337e:	fb3a 7705 	smlawb	r7, sl, r5, r7
 8003382:	ebae 0e09 	sub.w	lr, lr, r9
 8003386:	4456      	add	r6, sl
 8003388:	eba7 070a 	sub.w	r7, r7, sl
 800338c:	eba6 060e 	sub.w	r6, r6, lr
 8003390:	444f      	add	r7, r9
 8003392:	f326 268f 	ssat	r6, #16, r6, asr #10
 8003396:	f327 278f 	ssat	r7, #16, r7, asr #10
 800339a:	f820 6b48 	strh.w	r6, [r0], #72
 800339e:	f823 7948 	strh.w	r7, [r3], #-72
 80033a2:	4298      	cmp	r0, r3
 80033a4:	d191      	bne.n	80032ca <offset_14>
 80033a6:	e7ff      	b.n	80033a8 <offset_14+0xde>
 80033a8:	bc0f      	pop	{r0, r1, r2, r3}
 80033aa:	f100 0004 	add.w	r0, r0, #4
 80033ae:	f103 0304 	add.w	r3, r3, #4
 80033b2:	f012 0f01 	tst.w	r2, #1
 80033b6:	d006      	beq.n	80033c6 <offset_14+0xfc>
 80033b8:	1e52      	subs	r2, r2, #1
 80033ba:	f1a1 5100 	sub.w	r1, r1, #536870912	; 0x20000000
 80033be:	dd0b      	ble.n	80033d8 <offset_14+0x10e>
 80033c0:	b40f      	push	{r0, r1, r2, r3}
 80033c2:	f7ff b982 	b.w	80026ca <IDCT32PLONKAS+0x6>
 80033c6:	f1a2 0201 	sub.w	r2, r2, #1
 80033ca:	b40f      	push	{r0, r1, r2, r3}
 80033cc:	f1a1 5280 	sub.w	r2, r1, #268435456	; 0x10000000
 80033d0:	f102 0211 	add.w	r2, r2, #17
 80033d4:	f7ff b97d 	b.w	80026d2 <IDCT32PLONKAS+0xe>
 80033d8:	ea4f 64b1 	mov.w	r4, r1, ror #26
 80033dc:	f85d fb04 	ldr.w	pc, [sp], #4

080033e0 <MP3D_SPCORP_Symbol_033>:
 80033e0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e4:	6809      	ldr	r1, [r1, #0]
 80033e6:	4603      	mov	r3, r0
 80033e8:	f8df c030 	ldr.w	ip, [pc, #48]	; 800341c <MP3D_SPCORP_Symbol_033+0x3c>
 80033ec:	f7ff f96a 	bl	80026c4 <IDCT32PLONKAS>
 80033f0:	bc0f      	pop	{r0, r1, r2, r3}
 80033f2:	680d      	ldr	r5, [r1, #0]
 80033f4:	600c      	str	r4, [r1, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf08      	it	eq
 80033fa:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033fe:	f505 6108 	add.w	r1, r5, #2176	; 0x880
 8003402:	f100 0302 	add.w	r3, r0, #2
 8003406:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800340a:	f7ff f95b 	bl	80026c4 <IDCT32PLONKAS>
 800340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003412:	0000      	.short	0x0000
 8003414:	0800d318 	.word	0x0800d318
 8003418:	0800d378 	.word	0x0800d378
 800341c:	0800d558 	.word	0x0800d558

08003420 <strlen>:
 8003420:	4603      	mov	r3, r0
 8003422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003426:	2a00      	cmp	r2, #0
 8003428:	d1fb      	bne.n	8003422 <strlen+0x2>
 800342a:	1a18      	subs	r0, r3, r0
 800342c:	3801      	subs	r0, #1
 800342e:	4770      	bx	lr

08003430 <memchr>:
 8003430:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003434:	2a10      	cmp	r2, #16
 8003436:	db2b      	blt.n	8003490 <memchr+0x60>
 8003438:	f010 0f07 	tst.w	r0, #7
 800343c:	d008      	beq.n	8003450 <memchr+0x20>
 800343e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003442:	3a01      	subs	r2, #1
 8003444:	428b      	cmp	r3, r1
 8003446:	d02d      	beq.n	80034a4 <memchr+0x74>
 8003448:	f010 0f07 	tst.w	r0, #7
 800344c:	b342      	cbz	r2, 80034a0 <memchr+0x70>
 800344e:	d1f6      	bne.n	800343e <memchr+0xe>
 8003450:	b4f0      	push	{r4, r5, r6, r7}
 8003452:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003456:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800345a:	f022 0407 	bic.w	r4, r2, #7
 800345e:	f07f 0700 	mvns.w	r7, #0
 8003462:	2300      	movs	r3, #0
 8003464:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003468:	3c08      	subs	r4, #8
 800346a:	ea85 0501 	eor.w	r5, r5, r1
 800346e:	ea86 0601 	eor.w	r6, r6, r1
 8003472:	fa85 f547 	uadd8	r5, r5, r7
 8003476:	faa3 f587 	sel	r5, r3, r7
 800347a:	fa86 f647 	uadd8	r6, r6, r7
 800347e:	faa5 f687 	sel	r6, r5, r7
 8003482:	b98e      	cbnz	r6, 80034a8 <memchr+0x78>
 8003484:	d1ee      	bne.n	8003464 <memchr+0x34>
 8003486:	bcf0      	pop	{r4, r5, r6, r7}
 8003488:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800348c:	f002 0207 	and.w	r2, r2, #7
 8003490:	b132      	cbz	r2, 80034a0 <memchr+0x70>
 8003492:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003496:	3a01      	subs	r2, #1
 8003498:	ea83 0301 	eor.w	r3, r3, r1
 800349c:	b113      	cbz	r3, 80034a4 <memchr+0x74>
 800349e:	d1f8      	bne.n	8003492 <memchr+0x62>
 80034a0:	2000      	movs	r0, #0
 80034a2:	4770      	bx	lr
 80034a4:	3801      	subs	r0, #1
 80034a6:	4770      	bx	lr
 80034a8:	2d00      	cmp	r5, #0
 80034aa:	bf06      	itte	eq
 80034ac:	4635      	moveq	r5, r6
 80034ae:	3803      	subeq	r0, #3
 80034b0:	3807      	subne	r0, #7
 80034b2:	f015 0f01 	tst.w	r5, #1
 80034b6:	d107      	bne.n	80034c8 <memchr+0x98>
 80034b8:	3001      	adds	r0, #1
 80034ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80034be:	bf02      	ittt	eq
 80034c0:	3001      	addeq	r0, #1
 80034c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80034c6:	3001      	addeq	r0, #1
 80034c8:	bcf0      	pop	{r4, r5, r6, r7}
 80034ca:	3801      	subs	r0, #1
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop

080034d0 <__aeabi_uldivmod>:
 80034d0:	b953      	cbnz	r3, 80034e8 <__aeabi_uldivmod+0x18>
 80034d2:	b94a      	cbnz	r2, 80034e8 <__aeabi_uldivmod+0x18>
 80034d4:	2900      	cmp	r1, #0
 80034d6:	bf08      	it	eq
 80034d8:	2800      	cmpeq	r0, #0
 80034da:	bf1c      	itt	ne
 80034dc:	f04f 31ff 	movne.w	r1, #4294967295
 80034e0:	f04f 30ff 	movne.w	r0, #4294967295
 80034e4:	f000 b974 	b.w	80037d0 <__aeabi_idiv0>
 80034e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80034ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80034f0:	f000 f806 	bl	8003500 <__udivmoddi4>
 80034f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80034f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034fc:	b004      	add	sp, #16
 80034fe:	4770      	bx	lr

08003500 <__udivmoddi4>:
 8003500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	9d08      	ldr	r5, [sp, #32]
 8003506:	4604      	mov	r4, r0
 8003508:	468e      	mov	lr, r1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d14d      	bne.n	80035aa <__udivmoddi4+0xaa>
 800350e:	428a      	cmp	r2, r1
 8003510:	4694      	mov	ip, r2
 8003512:	d969      	bls.n	80035e8 <__udivmoddi4+0xe8>
 8003514:	fab2 f282 	clz	r2, r2
 8003518:	b152      	cbz	r2, 8003530 <__udivmoddi4+0x30>
 800351a:	fa01 f302 	lsl.w	r3, r1, r2
 800351e:	f1c2 0120 	rsb	r1, r2, #32
 8003522:	fa20 f101 	lsr.w	r1, r0, r1
 8003526:	fa0c fc02 	lsl.w	ip, ip, r2
 800352a:	ea41 0e03 	orr.w	lr, r1, r3
 800352e:	4094      	lsls	r4, r2
 8003530:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8003534:	0c21      	lsrs	r1, r4, #16
 8003536:	fbbe f6f8 	udiv	r6, lr, r8
 800353a:	fa1f f78c 	uxth.w	r7, ip
 800353e:	fb08 e316 	mls	r3, r8, r6, lr
 8003542:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003546:	fb06 f107 	mul.w	r1, r6, r7
 800354a:	4299      	cmp	r1, r3
 800354c:	d90a      	bls.n	8003564 <__udivmoddi4+0x64>
 800354e:	eb1c 0303 	adds.w	r3, ip, r3
 8003552:	f106 30ff 	add.w	r0, r6, #4294967295
 8003556:	f080 811f 	bcs.w	8003798 <__udivmoddi4+0x298>
 800355a:	4299      	cmp	r1, r3
 800355c:	f240 811c 	bls.w	8003798 <__udivmoddi4+0x298>
 8003560:	3e02      	subs	r6, #2
 8003562:	4463      	add	r3, ip
 8003564:	1a5b      	subs	r3, r3, r1
 8003566:	b2a4      	uxth	r4, r4
 8003568:	fbb3 f0f8 	udiv	r0, r3, r8
 800356c:	fb08 3310 	mls	r3, r8, r0, r3
 8003570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003574:	fb00 f707 	mul.w	r7, r0, r7
 8003578:	42a7      	cmp	r7, r4
 800357a:	d90a      	bls.n	8003592 <__udivmoddi4+0x92>
 800357c:	eb1c 0404 	adds.w	r4, ip, r4
 8003580:	f100 33ff 	add.w	r3, r0, #4294967295
 8003584:	f080 810a 	bcs.w	800379c <__udivmoddi4+0x29c>
 8003588:	42a7      	cmp	r7, r4
 800358a:	f240 8107 	bls.w	800379c <__udivmoddi4+0x29c>
 800358e:	4464      	add	r4, ip
 8003590:	3802      	subs	r0, #2
 8003592:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003596:	1be4      	subs	r4, r4, r7
 8003598:	2600      	movs	r6, #0
 800359a:	b11d      	cbz	r5, 80035a4 <__udivmoddi4+0xa4>
 800359c:	40d4      	lsrs	r4, r2
 800359e:	2300      	movs	r3, #0
 80035a0:	e9c5 4300 	strd	r4, r3, [r5]
 80035a4:	4631      	mov	r1, r6
 80035a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035aa:	428b      	cmp	r3, r1
 80035ac:	d909      	bls.n	80035c2 <__udivmoddi4+0xc2>
 80035ae:	2d00      	cmp	r5, #0
 80035b0:	f000 80ef 	beq.w	8003792 <__udivmoddi4+0x292>
 80035b4:	2600      	movs	r6, #0
 80035b6:	e9c5 0100 	strd	r0, r1, [r5]
 80035ba:	4630      	mov	r0, r6
 80035bc:	4631      	mov	r1, r6
 80035be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c2:	fab3 f683 	clz	r6, r3
 80035c6:	2e00      	cmp	r6, #0
 80035c8:	d14a      	bne.n	8003660 <__udivmoddi4+0x160>
 80035ca:	428b      	cmp	r3, r1
 80035cc:	d302      	bcc.n	80035d4 <__udivmoddi4+0xd4>
 80035ce:	4282      	cmp	r2, r0
 80035d0:	f200 80f9 	bhi.w	80037c6 <__udivmoddi4+0x2c6>
 80035d4:	1a84      	subs	r4, r0, r2
 80035d6:	eb61 0303 	sbc.w	r3, r1, r3
 80035da:	2001      	movs	r0, #1
 80035dc:	469e      	mov	lr, r3
 80035de:	2d00      	cmp	r5, #0
 80035e0:	d0e0      	beq.n	80035a4 <__udivmoddi4+0xa4>
 80035e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80035e6:	e7dd      	b.n	80035a4 <__udivmoddi4+0xa4>
 80035e8:	b902      	cbnz	r2, 80035ec <__udivmoddi4+0xec>
 80035ea:	deff      	udf	#255	; 0xff
 80035ec:	fab2 f282 	clz	r2, r2
 80035f0:	2a00      	cmp	r2, #0
 80035f2:	f040 8092 	bne.w	800371a <__udivmoddi4+0x21a>
 80035f6:	eba1 010c 	sub.w	r1, r1, ip
 80035fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80035fe:	fa1f fe8c 	uxth.w	lr, ip
 8003602:	2601      	movs	r6, #1
 8003604:	0c20      	lsrs	r0, r4, #16
 8003606:	fbb1 f3f7 	udiv	r3, r1, r7
 800360a:	fb07 1113 	mls	r1, r7, r3, r1
 800360e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8003612:	fb0e f003 	mul.w	r0, lr, r3
 8003616:	4288      	cmp	r0, r1
 8003618:	d908      	bls.n	800362c <__udivmoddi4+0x12c>
 800361a:	eb1c 0101 	adds.w	r1, ip, r1
 800361e:	f103 38ff 	add.w	r8, r3, #4294967295
 8003622:	d202      	bcs.n	800362a <__udivmoddi4+0x12a>
 8003624:	4288      	cmp	r0, r1
 8003626:	f200 80cb 	bhi.w	80037c0 <__udivmoddi4+0x2c0>
 800362a:	4643      	mov	r3, r8
 800362c:	1a09      	subs	r1, r1, r0
 800362e:	b2a4      	uxth	r4, r4
 8003630:	fbb1 f0f7 	udiv	r0, r1, r7
 8003634:	fb07 1110 	mls	r1, r7, r0, r1
 8003638:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800363c:	fb0e fe00 	mul.w	lr, lr, r0
 8003640:	45a6      	cmp	lr, r4
 8003642:	d908      	bls.n	8003656 <__udivmoddi4+0x156>
 8003644:	eb1c 0404 	adds.w	r4, ip, r4
 8003648:	f100 31ff 	add.w	r1, r0, #4294967295
 800364c:	d202      	bcs.n	8003654 <__udivmoddi4+0x154>
 800364e:	45a6      	cmp	lr, r4
 8003650:	f200 80bb 	bhi.w	80037ca <__udivmoddi4+0x2ca>
 8003654:	4608      	mov	r0, r1
 8003656:	eba4 040e 	sub.w	r4, r4, lr
 800365a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800365e:	e79c      	b.n	800359a <__udivmoddi4+0x9a>
 8003660:	f1c6 0720 	rsb	r7, r6, #32
 8003664:	40b3      	lsls	r3, r6
 8003666:	fa22 fc07 	lsr.w	ip, r2, r7
 800366a:	ea4c 0c03 	orr.w	ip, ip, r3
 800366e:	fa20 f407 	lsr.w	r4, r0, r7
 8003672:	fa01 f306 	lsl.w	r3, r1, r6
 8003676:	431c      	orrs	r4, r3
 8003678:	40f9      	lsrs	r1, r7
 800367a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800367e:	fa00 f306 	lsl.w	r3, r0, r6
 8003682:	fbb1 f8f9 	udiv	r8, r1, r9
 8003686:	0c20      	lsrs	r0, r4, #16
 8003688:	fa1f fe8c 	uxth.w	lr, ip
 800368c:	fb09 1118 	mls	r1, r9, r8, r1
 8003690:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8003694:	fb08 f00e 	mul.w	r0, r8, lr
 8003698:	4288      	cmp	r0, r1
 800369a:	fa02 f206 	lsl.w	r2, r2, r6
 800369e:	d90b      	bls.n	80036b8 <__udivmoddi4+0x1b8>
 80036a0:	eb1c 0101 	adds.w	r1, ip, r1
 80036a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80036a8:	f080 8088 	bcs.w	80037bc <__udivmoddi4+0x2bc>
 80036ac:	4288      	cmp	r0, r1
 80036ae:	f240 8085 	bls.w	80037bc <__udivmoddi4+0x2bc>
 80036b2:	f1a8 0802 	sub.w	r8, r8, #2
 80036b6:	4461      	add	r1, ip
 80036b8:	1a09      	subs	r1, r1, r0
 80036ba:	b2a4      	uxth	r4, r4
 80036bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80036c0:	fb09 1110 	mls	r1, r9, r0, r1
 80036c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80036c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80036cc:	458e      	cmp	lr, r1
 80036ce:	d908      	bls.n	80036e2 <__udivmoddi4+0x1e2>
 80036d0:	eb1c 0101 	adds.w	r1, ip, r1
 80036d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80036d8:	d26c      	bcs.n	80037b4 <__udivmoddi4+0x2b4>
 80036da:	458e      	cmp	lr, r1
 80036dc:	d96a      	bls.n	80037b4 <__udivmoddi4+0x2b4>
 80036de:	3802      	subs	r0, #2
 80036e0:	4461      	add	r1, ip
 80036e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80036e6:	fba0 9402 	umull	r9, r4, r0, r2
 80036ea:	eba1 010e 	sub.w	r1, r1, lr
 80036ee:	42a1      	cmp	r1, r4
 80036f0:	46c8      	mov	r8, r9
 80036f2:	46a6      	mov	lr, r4
 80036f4:	d356      	bcc.n	80037a4 <__udivmoddi4+0x2a4>
 80036f6:	d053      	beq.n	80037a0 <__udivmoddi4+0x2a0>
 80036f8:	b15d      	cbz	r5, 8003712 <__udivmoddi4+0x212>
 80036fa:	ebb3 0208 	subs.w	r2, r3, r8
 80036fe:	eb61 010e 	sbc.w	r1, r1, lr
 8003702:	fa01 f707 	lsl.w	r7, r1, r7
 8003706:	fa22 f306 	lsr.w	r3, r2, r6
 800370a:	40f1      	lsrs	r1, r6
 800370c:	431f      	orrs	r7, r3
 800370e:	e9c5 7100 	strd	r7, r1, [r5]
 8003712:	2600      	movs	r6, #0
 8003714:	4631      	mov	r1, r6
 8003716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371a:	f1c2 0320 	rsb	r3, r2, #32
 800371e:	40d8      	lsrs	r0, r3
 8003720:	fa0c fc02 	lsl.w	ip, ip, r2
 8003724:	fa21 f303 	lsr.w	r3, r1, r3
 8003728:	4091      	lsls	r1, r2
 800372a:	4301      	orrs	r1, r0
 800372c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003730:	fa1f fe8c 	uxth.w	lr, ip
 8003734:	fbb3 f0f7 	udiv	r0, r3, r7
 8003738:	fb07 3610 	mls	r6, r7, r0, r3
 800373c:	0c0b      	lsrs	r3, r1, #16
 800373e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003742:	fb00 f60e 	mul.w	r6, r0, lr
 8003746:	429e      	cmp	r6, r3
 8003748:	fa04 f402 	lsl.w	r4, r4, r2
 800374c:	d908      	bls.n	8003760 <__udivmoddi4+0x260>
 800374e:	eb1c 0303 	adds.w	r3, ip, r3
 8003752:	f100 38ff 	add.w	r8, r0, #4294967295
 8003756:	d22f      	bcs.n	80037b8 <__udivmoddi4+0x2b8>
 8003758:	429e      	cmp	r6, r3
 800375a:	d92d      	bls.n	80037b8 <__udivmoddi4+0x2b8>
 800375c:	3802      	subs	r0, #2
 800375e:	4463      	add	r3, ip
 8003760:	1b9b      	subs	r3, r3, r6
 8003762:	b289      	uxth	r1, r1
 8003764:	fbb3 f6f7 	udiv	r6, r3, r7
 8003768:	fb07 3316 	mls	r3, r7, r6, r3
 800376c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003770:	fb06 f30e 	mul.w	r3, r6, lr
 8003774:	428b      	cmp	r3, r1
 8003776:	d908      	bls.n	800378a <__udivmoddi4+0x28a>
 8003778:	eb1c 0101 	adds.w	r1, ip, r1
 800377c:	f106 38ff 	add.w	r8, r6, #4294967295
 8003780:	d216      	bcs.n	80037b0 <__udivmoddi4+0x2b0>
 8003782:	428b      	cmp	r3, r1
 8003784:	d914      	bls.n	80037b0 <__udivmoddi4+0x2b0>
 8003786:	3e02      	subs	r6, #2
 8003788:	4461      	add	r1, ip
 800378a:	1ac9      	subs	r1, r1, r3
 800378c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8003790:	e738      	b.n	8003604 <__udivmoddi4+0x104>
 8003792:	462e      	mov	r6, r5
 8003794:	4628      	mov	r0, r5
 8003796:	e705      	b.n	80035a4 <__udivmoddi4+0xa4>
 8003798:	4606      	mov	r6, r0
 800379a:	e6e3      	b.n	8003564 <__udivmoddi4+0x64>
 800379c:	4618      	mov	r0, r3
 800379e:	e6f8      	b.n	8003592 <__udivmoddi4+0x92>
 80037a0:	454b      	cmp	r3, r9
 80037a2:	d2a9      	bcs.n	80036f8 <__udivmoddi4+0x1f8>
 80037a4:	ebb9 0802 	subs.w	r8, r9, r2
 80037a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80037ac:	3801      	subs	r0, #1
 80037ae:	e7a3      	b.n	80036f8 <__udivmoddi4+0x1f8>
 80037b0:	4646      	mov	r6, r8
 80037b2:	e7ea      	b.n	800378a <__udivmoddi4+0x28a>
 80037b4:	4620      	mov	r0, r4
 80037b6:	e794      	b.n	80036e2 <__udivmoddi4+0x1e2>
 80037b8:	4640      	mov	r0, r8
 80037ba:	e7d1      	b.n	8003760 <__udivmoddi4+0x260>
 80037bc:	46d0      	mov	r8, sl
 80037be:	e77b      	b.n	80036b8 <__udivmoddi4+0x1b8>
 80037c0:	3b02      	subs	r3, #2
 80037c2:	4461      	add	r1, ip
 80037c4:	e732      	b.n	800362c <__udivmoddi4+0x12c>
 80037c6:	4630      	mov	r0, r6
 80037c8:	e709      	b.n	80035de <__udivmoddi4+0xde>
 80037ca:	4464      	add	r4, ip
 80037cc:	3802      	subs	r0, #2
 80037ce:	e742      	b.n	8003656 <__udivmoddi4+0x156>

080037d0 <__aeabi_idiv0>:
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop

080037d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d4:	b510      	push	{r4, lr}
 80037d6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_InitTick+0x40>)
 80037da:	7818      	ldrb	r0, [r3, #0]
 80037dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e0:	fbb3 f3f0 	udiv	r3, r3, r0
 80037e4:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <HAL_InitTick+0x44>)
 80037e6:	6810      	ldr	r0, [r2, #0]
 80037e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80037ec:	f000 f8a0 	bl	8003930 <HAL_SYSTICK_Config>
 80037f0:	b968      	cbnz	r0, 800380e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037f2:	2c0f      	cmp	r4, #15
 80037f4:	d901      	bls.n	80037fa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80037f6:	2001      	movs	r0, #1
 80037f8:	e00a      	b.n	8003810 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037fa:	2200      	movs	r2, #0
 80037fc:	4621      	mov	r1, r4
 80037fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003802:	f000 f851 	bl	80038a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_InitTick+0x48>)
 8003808:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800380a:	2000      	movs	r0, #0
 800380c:	e000      	b.n	8003810 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800380e:	2001      	movs	r0, #1
}
 8003810:	bd10      	pop	{r4, pc}
 8003812:	bf00      	nop
 8003814:	20000000 	.word	0x20000000
 8003818:	2000000c 	.word	0x2000000c
 800381c:	20000004 	.word	0x20000004

08003820 <HAL_Init>:
{
 8003820:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003822:	2003      	movs	r0, #3
 8003824:	f000 f82e 	bl	8003884 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003828:	2000      	movs	r0, #0
 800382a:	f7ff ffd3 	bl	80037d4 <HAL_InitTick>
  HAL_MspInit();
 800382e:	f004 fb81 	bl	8007f34 <HAL_MspInit>
}
 8003832:	2000      	movs	r0, #0
 8003834:	bd08      	pop	{r3, pc}
	...

08003838 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003838:	4a03      	ldr	r2, [pc, #12]	; (8003848 <HAL_IncTick+0x10>)
 800383a:	6811      	ldr	r1, [r2, #0]
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_IncTick+0x14>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	440b      	add	r3, r1
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	200001fc 	.word	0x200001fc
 800384c:	20000000 	.word	0x20000000

08003850 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003850:	4b01      	ldr	r3, [pc, #4]	; (8003858 <HAL_GetTick+0x8>)
 8003852:	6818      	ldr	r0, [r3, #0]
}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	200001fc 	.word	0x200001fc

0800385c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff fff6 	bl	8003850 <HAL_GetTick>
 8003864:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003866:	f1b4 3fff 	cmp.w	r4, #4294967295
 800386a:	d002      	beq.n	8003872 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <HAL_Delay+0x24>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003872:	f7ff ffed 	bl	8003850 <HAL_GetTick>
 8003876:	1b40      	subs	r0, r0, r5
 8003878:	42a0      	cmp	r0, r4
 800387a:	d3fa      	bcc.n	8003872 <HAL_Delay+0x16>
  {
  }
}
 800387c:	bd38      	pop	{r3, r4, r5, pc}
 800387e:	bf00      	nop
 8003880:	20000000 	.word	0x20000000

08003884 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003884:	4906      	ldr	r1, [pc, #24]	; (80038a0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003886:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003888:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003890:	0200      	lsls	r0, r0, #8
 8003892:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003896:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003898:	4a02      	ldr	r2, [pc, #8]	; (80038a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800389a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800389c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800389e:	4770      	bx	lr
 80038a0:	e000ed00 	.word	0xe000ed00
 80038a4:	05fa0000 	.word	0x05fa0000

080038a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <HAL_NVIC_SetPriority+0x60>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b2:	f1c3 0c07 	rsb	ip, r3, #7
 80038b6:	f1bc 0f04 	cmp.w	ip, #4
 80038ba:	bf28      	it	cs
 80038bc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c0:	f103 0e04 	add.w	lr, r3, #4
 80038c4:	f1be 0f06 	cmp.w	lr, #6
 80038c8:	d914      	bls.n	80038f4 <HAL_NVIC_SetPriority+0x4c>
 80038ca:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 3eff 	mov.w	lr, #4294967295
 80038d0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80038d4:	ea21 010c 	bic.w	r1, r1, ip
 80038d8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038da:	fa0e f303 	lsl.w	r3, lr, r3
 80038de:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80038e4:	2800      	cmp	r0, #0
 80038e6:	db07      	blt.n	80038f8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	0109      	lsls	r1, r1, #4
 80038ea:	b2c9      	uxtb	r1, r1
 80038ec:	4b07      	ldr	r3, [pc, #28]	; (800390c <HAL_NVIC_SetPriority+0x64>)
 80038ee:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80038f0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f4:	2300      	movs	r3, #0
 80038f6:	e7e9      	b.n	80038cc <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f8:	f000 000f 	and.w	r0, r0, #15
 80038fc:	0109      	lsls	r1, r1, #4
 80038fe:	b2c9      	uxtb	r1, r1
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_NVIC_SetPriority+0x68>)
 8003902:	5419      	strb	r1, [r3, r0]
 8003904:	e7f4      	b.n	80038f0 <HAL_NVIC_SetPriority+0x48>
 8003906:	bf00      	nop
 8003908:	e000ed00 	.word	0xe000ed00
 800390c:	e000e400 	.word	0xe000e400
 8003910:	e000ed14 	.word	0xe000ed14

08003914 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003914:	2800      	cmp	r0, #0
 8003916:	db07      	blt.n	8003928 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003918:	f000 021f 	and.w	r2, r0, #31
 800391c:	0940      	lsrs	r0, r0, #5
 800391e:	2301      	movs	r3, #1
 8003920:	4093      	lsls	r3, r2
 8003922:	4a02      	ldr	r2, [pc, #8]	; (800392c <HAL_NVIC_EnableIRQ+0x18>)
 8003924:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000e100 	.word	0xe000e100

08003930 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003930:	3801      	subs	r0, #1
 8003932:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003936:	d20b      	bcs.n	8003950 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003938:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800393c:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <HAL_SYSTICK_Config+0x24>)
 8003940:	21f0      	movs	r1, #240	; 0xf0
 8003942:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003946:	2000      	movs	r0, #0
 8003948:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394a:	2207      	movs	r2, #7
 800394c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800394e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003950:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003958:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800395a:	6805      	ldr	r5, [r0, #0]
 800395c:	682c      	ldr	r4, [r5, #0]
 800395e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003962:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003964:	6804      	ldr	r4, [r0, #0]
 8003966:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003968:	6883      	ldr	r3, [r0, #8]
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d005      	beq.n	800397a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800396e:	6803      	ldr	r3, [r0, #0]
 8003970:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8003972:	6803      	ldr	r3, [r0, #0]
 8003974:	60da      	str	r2, [r3, #12]
  }
}
 8003976:	bc30      	pop	{r4, r5}
 8003978:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800397a:	6803      	ldr	r3, [r0, #0]
 800397c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800397e:	6803      	ldr	r3, [r0, #0]
 8003980:	60d9      	str	r1, [r3, #12]
 8003982:	e7f8      	b.n	8003976 <DMA_SetConfig+0x1e>

08003984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003984:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003986:	6801      	ldr	r1, [r0, #0]
 8003988:	b2ca      	uxtb	r2, r1
 800398a:	3a10      	subs	r2, #16
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <DMA_CalcBaseAndBitshift+0x34>)
 800398e:	fba3 4302 	umull	r4, r3, r3, r2
 8003992:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003994:	4c09      	ldr	r4, [pc, #36]	; (80039bc <DMA_CalcBaseAndBitshift+0x38>)
 8003996:	5ce3      	ldrb	r3, [r4, r3]
 8003998:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800399a:	2a5f      	cmp	r2, #95	; 0x5f
 800399c:	d907      	bls.n	80039ae <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <DMA_CalcBaseAndBitshift+0x3c>)
 80039a0:	400b      	ands	r3, r1
 80039a2:	3304      	adds	r3, #4
 80039a4:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80039a6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80039a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039ac:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ae:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <DMA_CalcBaseAndBitshift+0x3c>)
 80039b0:	400b      	ands	r3, r1
 80039b2:	6583      	str	r3, [r0, #88]	; 0x58
 80039b4:	e7f7      	b.n	80039a6 <DMA_CalcBaseAndBitshift+0x22>
 80039b6:	bf00      	nop
 80039b8:	aaaaaaab 	.word	0xaaaaaaab
 80039bc:	0800ac88 	.word	0x0800ac88
 80039c0:	fffffc00 	.word	0xfffffc00

080039c4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039c6:	6982      	ldr	r2, [r0, #24]
 80039c8:	b992      	cbnz	r2, 80039f0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d00a      	beq.n	80039e4 <DMA_CheckFifoParam+0x20>
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d002      	beq.n	80039d8 <DMA_CheckFifoParam+0x14>
 80039d2:	b10b      	cbz	r3, 80039d8 <DMA_CheckFifoParam+0x14>
 80039d4:	2000      	movs	r0, #0
 80039d6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80039da:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80039de:	d128      	bne.n	8003a32 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80039e0:	2000      	movs	r0, #0
 80039e2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80039e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039ea:	d024      	beq.n	8003a36 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2000      	movs	r0, #0
 80039ee:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039f0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80039f4:	d009      	beq.n	8003a0a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d925      	bls.n	8003a46 <DMA_CheckFifoParam+0x82>
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d125      	bne.n	8003a4a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003a04:	d123      	bne.n	8003a4e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2000      	movs	r0, #0
 8003a08:	4770      	bx	lr
    switch (tmp)
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d803      	bhi.n	8003a16 <DMA_CheckFifoParam+0x52>
 8003a0e:	e8df f003 	tbb	[pc, r3]
 8003a12:	0414      	.short	0x0414
 8003a14:	0a14      	.short	0x0a14
 8003a16:	2000      	movs	r0, #0
 8003a18:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003a20:	d10d      	bne.n	8003a3e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2000      	movs	r0, #0
 8003a24:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a2c:	d009      	beq.n	8003a42 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8003a2e:	2000      	movs	r0, #0
 8003a30:	4770      	bx	lr
        status = HAL_ERROR;
 8003a32:	2001      	movs	r0, #1
 8003a34:	4770      	bx	lr
        status = HAL_ERROR;
 8003a36:	2001      	movs	r0, #1
 8003a38:	4770      	bx	lr
      status = HAL_ERROR;
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	4770      	bx	lr
        status = HAL_ERROR;
 8003a3e:	2001      	movs	r0, #1
 8003a40:	4770      	bx	lr
        status = HAL_ERROR;
 8003a42:	2001      	movs	r0, #1
 8003a44:	4770      	bx	lr
      status = HAL_ERROR;
 8003a46:	2001      	movs	r0, #1
 8003a48:	4770      	bx	lr
    switch (tmp)
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8003a4e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_DMA_Init>:
{
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7ff fefa 	bl	8003850 <HAL_GetTick>
  if(hdma == NULL)
 8003a5c:	2c00      	cmp	r4, #0
 8003a5e:	d05b      	beq.n	8003b18 <HAL_DMA_Init+0xc4>
 8003a60:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8003a62:	2300      	movs	r3, #0
 8003a64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003a6e:	6822      	ldr	r2, [r4, #0]
 8003a70:	6813      	ldr	r3, [r2, #0]
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	f012 0f01 	tst.w	r2, #1
 8003a80:	d00a      	beq.n	8003a98 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a82:	f7ff fee5 	bl	8003850 <HAL_GetTick>
 8003a86:	1b43      	subs	r3, r0, r5
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d9f5      	bls.n	8003a78 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a90:	2003      	movs	r0, #3
 8003a92:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8003a98:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a9a:	4820      	ldr	r0, [pc, #128]	; (8003b1c <HAL_DMA_Init+0xc8>)
 8003a9c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a9e:	6861      	ldr	r1, [r4, #4]
 8003aa0:	68a2      	ldr	r2, [r4, #8]
 8003aa2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aa6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa8:	6921      	ldr	r1, [r4, #16]
 8003aaa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aac:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aae:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab0:	69a1      	ldr	r1, [r4, #24]
 8003ab2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab8:	6a21      	ldr	r1, [r4, #32]
 8003aba:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003abc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003abe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ac0:	2904      	cmp	r1, #4
 8003ac2:	d01e      	beq.n	8003b02 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8003ac4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003ac6:	6826      	ldr	r6, [r4, #0]
 8003ac8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003aca:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8003ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ad0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d107      	bne.n	8003ae6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8003ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ad8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ada:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003adc:	b11b      	cbz	r3, 8003ae6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7ff ff70 	bl	80039c4 <DMA_CheckFifoParam>
 8003ae4:	b990      	cbnz	r0, 8003b0c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8003ae6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f7ff ff4b 	bl	8003984 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003af0:	233f      	movs	r3, #63	; 0x3f
 8003af2:	4093      	lsls	r3, r2
 8003af4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af6:	2000      	movs	r0, #0
 8003af8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003b00:	e7c9      	b.n	8003a96 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b04:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003b06:	4301      	orrs	r1, r0
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	e7db      	b.n	8003ac4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b0c:	2340      	movs	r3, #64	; 0x40
 8003b0e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003b10:	2001      	movs	r0, #1
 8003b12:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8003b16:	e7be      	b.n	8003a96 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8003b18:	2001      	movs	r0, #1
 8003b1a:	e7bc      	b.n	8003a96 <HAL_DMA_Init+0x42>
 8003b1c:	e010803f 	.word	0xe010803f

08003b20 <HAL_DMA_Start_IT>:
{
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b24:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003b26:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003b2a:	2801      	cmp	r0, #1
 8003b2c:	d030      	beq.n	8003b90 <HAL_DMA_Start_IT+0x70>
 8003b2e:	2001      	movs	r0, #1
 8003b30:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b34:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8003b38:	b2c0      	uxtb	r0, r0
 8003b3a:	2801      	cmp	r0, #1
 8003b3c:	d004      	beq.n	8003b48 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8003b44:	2002      	movs	r0, #2
}
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b48:	2002      	movs	r0, #2
 8003b4a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b4e:	2000      	movs	r0, #0
 8003b50:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff ff00 	bl	8003958 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b5a:	233f      	movs	r3, #63	; 0x3f
 8003b5c:	4093      	lsls	r3, r2
 8003b5e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b60:	6822      	ldr	r2, [r4, #0]
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	f043 0316 	orr.w	r3, r3, #22
 8003b68:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	6953      	ldr	r3, [r2, #20]
 8003b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b72:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8003b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b76:	b123      	cbz	r3, 8003b82 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b78:	6822      	ldr	r2, [r4, #0]
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	f043 0308 	orr.w	r3, r3, #8
 8003b80:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	6813      	ldr	r3, [r2, #0]
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	e7da      	b.n	8003b46 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8003b90:	2002      	movs	r0, #2
 8003b92:	e7d8      	b.n	8003b46 <HAL_DMA_Start_IT+0x26>

08003b94 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b94:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d003      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003bac:	6802      	ldr	r2, [r0, #0]
 8003bae:	6813      	ldr	r3, [r2, #0]
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003bb6:	2000      	movs	r0, #0
}
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_DMA_IRQHandler>:
{
 8003bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8003bc6:	4b72      	ldr	r3, [pc, #456]	; (8003d90 <HAL_DMA_IRQHandler+0x1d4>)
 8003bc8:	681d      	ldr	r5, [r3, #0]
 8003bca:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <HAL_DMA_IRQHandler+0x1d8>)
 8003bcc:	fba3 3505 	umull	r3, r5, r3, r5
 8003bd0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8003bd4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003bd8:	2308      	movs	r3, #8
 8003bda:	4093      	lsls	r3, r2
 8003bdc:	4233      	tst	r3, r6
 8003bde:	d010      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003be0:	6803      	ldr	r3, [r0, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	f012 0f04 	tst.w	r2, #4
 8003be8:	d00b      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	f022 0204 	bic.w	r2, r2, #4
 8003bf0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bf2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	4093      	lsls	r3, r2
 8003bf8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bfa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c02:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c04:	2301      	movs	r3, #1
 8003c06:	4093      	lsls	r3, r2
 8003c08:	4233      	tst	r3, r6
 8003c0a:	d009      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c0c:	6822      	ldr	r2, [r4, #0]
 8003c0e:	6952      	ldr	r2, [r2, #20]
 8003c10:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c14:	d004      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c16:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c22:	2304      	movs	r3, #4
 8003c24:	4093      	lsls	r3, r2
 8003c26:	4233      	tst	r3, r6
 8003c28:	d009      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	f012 0f02 	tst.w	r2, #2
 8003c32:	d004      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c34:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c38:	f043 0304 	orr.w	r3, r3, #4
 8003c3c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c40:	2310      	movs	r3, #16
 8003c42:	4093      	lsls	r3, r2
 8003c44:	4233      	tst	r3, r6
 8003c46:	d024      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c48:	6822      	ldr	r2, [r4, #0]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	f012 0f08 	tst.w	r2, #8
 8003c50:	d01f      	beq.n	8003c92 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c52:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003c5c:	d00d      	beq.n	8003c7a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003c64:	d104      	bne.n	8003c70 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8003c66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c68:	b19b      	cbz	r3, 8003c92 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	4798      	blx	r3
 8003c6e:	e010      	b.n	8003c92 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c72:	b173      	cbz	r3, 8003c92 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8003c74:	4620      	mov	r0, r4
 8003c76:	4798      	blx	r3
 8003c78:	e00b      	b.n	8003c92 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003c80:	d103      	bne.n	8003c8a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	f022 0208 	bic.w	r2, r2, #8
 8003c88:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003c8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c8c:	b10b      	cbz	r3, 8003c92 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8003c8e:	4620      	mov	r0, r4
 8003c90:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c94:	2320      	movs	r3, #32
 8003c96:	4093      	lsls	r3, r2
 8003c98:	4233      	tst	r3, r6
 8003c9a:	d055      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c9c:	6822      	ldr	r2, [r4, #0]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	f012 0f10 	tst.w	r2, #16
 8003ca4:	d050      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ca6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ca8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003cba:	d033      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003cc2:	d12a      	bne.n	8003d1a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8003cc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d03e      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8003cca:	4620      	mov	r0, r4
 8003ccc:	4798      	blx	r3
 8003cce:	e03b      	b.n	8003d48 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cd0:	6822      	ldr	r2, [r4, #0]
 8003cd2:	6813      	ldr	r3, [r2, #0]
 8003cd4:	f023 0316 	bic.w	r3, r3, #22
 8003cd8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	6953      	ldr	r3, [r2, #20]
 8003cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ce6:	b1a3      	cbz	r3, 8003d12 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	f023 0308 	bic.w	r3, r3, #8
 8003cf0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cf2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003cf4:	233f      	movs	r3, #63	; 0x3f
 8003cf6:	4093      	lsls	r3, r2
 8003cf8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8003d06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d03f      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4798      	blx	r3
        return;
 8003d10:	e03c      	b.n	8003d8c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e7      	bne.n	8003ce8 <HAL_DMA_IRQHandler+0x12c>
 8003d18:	e7eb      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8003d1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d1c:	b1a3      	cbz	r3, 8003d48 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8003d1e:	4620      	mov	r0, r4
 8003d20:	4798      	blx	r3
 8003d22:	e011      	b.n	8003d48 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003d2a:	d109      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	f022 0210 	bic.w	r2, r2, #16
 8003d32:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8003d34:	2300      	movs	r3, #0
 8003d36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8003d40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d42:	b10b      	cbz	r3, 8003d48 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8003d44:	4620      	mov	r0, r4
 8003d46:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d4a:	b1fb      	cbz	r3, 8003d8c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d4e:	f013 0f01 	tst.w	r3, #1
 8003d52:	d017      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d54:	2305      	movs	r3, #5
 8003d56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	6813      	ldr	r3, [r2, #0]
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003d64:	9b01      	ldr	r3, [sp, #4]
 8003d66:	3301      	adds	r3, #1
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	42ab      	cmp	r3, r5
 8003d6c:	d804      	bhi.n	8003d78 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f013 0f01 	tst.w	r3, #1
 8003d76:	d1f5      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003d84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d86:	b10b      	cbz	r3, 8003d8c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003d88:	4620      	mov	r0, r4
 8003d8a:	4798      	blx	r3
}
 8003d8c:	b003      	add	sp, #12
 8003d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d90:	2000000c 	.word	0x2000000c
 8003d94:	1b4e81b5 	.word	0x1b4e81b5

08003d98 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	f200 80e2 	bhi.w	8003f64 <HAL_GPIO_Init+0x1cc>
{
 8003da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da2:	b083      	sub	sp, #12
 8003da4:	e03a      	b.n	8003e1c <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003da6:	2209      	movs	r2, #9
 8003da8:	e000      	b.n	8003dac <HAL_GPIO_Init+0x14>
 8003daa:	2200      	movs	r2, #0
 8003dac:	40aa      	lsls	r2, r5
 8003dae:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8003db0:	3402      	adds	r4, #2
 8003db2:	4d6d      	ldr	r5, [pc, #436]	; (8003f68 <HAL_GPIO_Init+0x1d0>)
 8003db4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db8:	4a6c      	ldr	r2, [pc, #432]	; (8003f6c <HAL_GPIO_Init+0x1d4>)
 8003dba:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003dbc:	ea6f 020c 	mvn.w	r2, ip
 8003dc0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dc4:	684e      	ldr	r6, [r1, #4]
 8003dc6:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8003dca:	d001      	beq.n	8003dd0 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8003dcc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8003dd0:	4c66      	ldr	r4, [pc, #408]	; (8003f6c <HAL_GPIO_Init+0x1d4>)
 8003dd2:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8003dd4:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003dd6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dda:	684e      	ldr	r6, [r1, #4]
 8003ddc:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003de0:	d001      	beq.n	8003de6 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8003de2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8003de6:	4c61      	ldr	r4, [pc, #388]	; (8003f6c <HAL_GPIO_Init+0x1d4>)
 8003de8:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dea:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003dec:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003df0:	684e      	ldr	r6, [r1, #4]
 8003df2:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8003df6:	d001      	beq.n	8003dfc <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8003df8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8003dfc:	4c5b      	ldr	r4, [pc, #364]	; (8003f6c <HAL_GPIO_Init+0x1d4>)
 8003dfe:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8003e00:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003e02:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e04:	684d      	ldr	r5, [r1, #4]
 8003e06:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8003e0a:	d001      	beq.n	8003e10 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8003e0c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8003e10:	4c56      	ldr	r4, [pc, #344]	; (8003f6c <HAL_GPIO_Init+0x1d4>)
 8003e12:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e14:	3301      	adds	r3, #1
 8003e16:	2b0f      	cmp	r3, #15
 8003e18:	f200 80a2 	bhi.w	8003f60 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e20:	680c      	ldr	r4, [r1, #0]
 8003e22:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8003e26:	ea32 0404 	bics.w	r4, r2, r4
 8003e2a:	d1f3      	bne.n	8003e14 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e2c:	684c      	ldr	r4, [r1, #4]
 8003e2e:	2c12      	cmp	r4, #18
 8003e30:	bf18      	it	ne
 8003e32:	2c02      	cmpne	r4, #2
 8003e34:	d110      	bne.n	8003e58 <HAL_GPIO_Init+0xc0>
        temp = GPIOx->AFR[position >> 3];
 8003e36:	08dd      	lsrs	r5, r3, #3
 8003e38:	3508      	adds	r5, #8
 8003e3a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e3e:	f003 0407 	and.w	r4, r3, #7
 8003e42:	00a6      	lsls	r6, r4, #2
 8003e44:	240f      	movs	r4, #15
 8003e46:	40b4      	lsls	r4, r6
 8003e48:	ea27 0e04 	bic.w	lr, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e4c:	690c      	ldr	r4, [r1, #16]
 8003e4e:	40b4      	lsls	r4, r6
 8003e50:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8003e54:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8003e58:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e5a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003e5e:	2403      	movs	r4, #3
 8003e60:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e64:	43e5      	mvns	r5, r4
 8003e66:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e6a:	684c      	ldr	r4, [r1, #4]
 8003e6c:	f004 0403 	and.w	r4, r4, #3
 8003e70:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e74:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8003e76:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e78:	684c      	ldr	r4, [r1, #4]
 8003e7a:	1e66      	subs	r6, r4, #1
 8003e7c:	2c11      	cmp	r4, #17
 8003e7e:	bf18      	it	ne
 8003e80:	2e01      	cmpne	r6, #1
 8003e82:	d901      	bls.n	8003e88 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e84:	2c12      	cmp	r4, #18
 8003e86:	d10f      	bne.n	8003ea8 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8003e88:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e8a:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e8c:	68cc      	ldr	r4, [r1, #12]
 8003e8e:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e92:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8003e94:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003e96:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e98:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003e9c:	684c      	ldr	r4, [r1, #4]
 8003e9e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003ea2:	409c      	lsls	r4, r3
 8003ea4:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8003ea6:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003ea8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003eaa:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003eac:	688a      	ldr	r2, [r1, #8]
 8003eae:	fa02 f20e 	lsl.w	r2, r2, lr
 8003eb2:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8003eb4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb6:	684a      	ldr	r2, [r1, #4]
 8003eb8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003ebc:	d0aa      	beq.n	8003e14 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ebe:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <HAL_GPIO_Init+0x1d8>)
 8003ec0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003ec2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003ec6:	6454      	str	r4, [r2, #68]	; 0x44
 8003ec8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003eca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003ece:	9201      	str	r2, [sp, #4]
 8003ed0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003ed2:	089c      	lsrs	r4, r3, #2
 8003ed4:	1ca5      	adds	r5, r4, #2
 8003ed6:	4a24      	ldr	r2, [pc, #144]	; (8003f68 <HAL_GPIO_Init+0x1d0>)
 8003ed8:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003edc:	f003 0203 	and.w	r2, r3, #3
 8003ee0:	0095      	lsls	r5, r2, #2
 8003ee2:	220f      	movs	r2, #15
 8003ee4:	40aa      	lsls	r2, r5
 8003ee6:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003eea:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_GPIO_Init+0x1dc>)
 8003eec:	4290      	cmp	r0, r2
 8003eee:	f43f af5c 	beq.w	8003daa <HAL_GPIO_Init+0x12>
 8003ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ef6:	4290      	cmp	r0, r2
 8003ef8:	d022      	beq.n	8003f40 <HAL_GPIO_Init+0x1a8>
 8003efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003efe:	4290      	cmp	r0, r2
 8003f00:	d020      	beq.n	8003f44 <HAL_GPIO_Init+0x1ac>
 8003f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f06:	4290      	cmp	r0, r2
 8003f08:	d01e      	beq.n	8003f48 <HAL_GPIO_Init+0x1b0>
 8003f0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f0e:	4290      	cmp	r0, r2
 8003f10:	d01c      	beq.n	8003f4c <HAL_GPIO_Init+0x1b4>
 8003f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f16:	4290      	cmp	r0, r2
 8003f18:	d01a      	beq.n	8003f50 <HAL_GPIO_Init+0x1b8>
 8003f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f1e:	4290      	cmp	r0, r2
 8003f20:	d018      	beq.n	8003f54 <HAL_GPIO_Init+0x1bc>
 8003f22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f26:	4290      	cmp	r0, r2
 8003f28:	d016      	beq.n	8003f58 <HAL_GPIO_Init+0x1c0>
 8003f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f2e:	4290      	cmp	r0, r2
 8003f30:	d014      	beq.n	8003f5c <HAL_GPIO_Init+0x1c4>
 8003f32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f36:	4290      	cmp	r0, r2
 8003f38:	f43f af35 	beq.w	8003da6 <HAL_GPIO_Init+0xe>
 8003f3c:	220a      	movs	r2, #10
 8003f3e:	e735      	b.n	8003dac <HAL_GPIO_Init+0x14>
 8003f40:	2201      	movs	r2, #1
 8003f42:	e733      	b.n	8003dac <HAL_GPIO_Init+0x14>
 8003f44:	2202      	movs	r2, #2
 8003f46:	e731      	b.n	8003dac <HAL_GPIO_Init+0x14>
 8003f48:	2203      	movs	r2, #3
 8003f4a:	e72f      	b.n	8003dac <HAL_GPIO_Init+0x14>
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	e72d      	b.n	8003dac <HAL_GPIO_Init+0x14>
 8003f50:	2205      	movs	r2, #5
 8003f52:	e72b      	b.n	8003dac <HAL_GPIO_Init+0x14>
 8003f54:	2206      	movs	r2, #6
 8003f56:	e729      	b.n	8003dac <HAL_GPIO_Init+0x14>
 8003f58:	2207      	movs	r2, #7
 8003f5a:	e727      	b.n	8003dac <HAL_GPIO_Init+0x14>
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	e725      	b.n	8003dac <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003f60:	b003      	add	sp, #12
 8003f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40013800 	.word	0x40013800
 8003f6c:	40013c00 	.word	0x40013c00
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020000 	.word	0x40020000

08003f78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f78:	b10a      	cbz	r2, 8003f7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f7a:	6181      	str	r1, [r0, #24]
 8003f7c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f7e:	0409      	lsls	r1, r1, #16
 8003f80:	6181      	str	r1, [r0, #24]
  }
}
 8003f82:	4770      	bx	lr

08003f84 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003f84:	6943      	ldr	r3, [r0, #20]
 8003f86:	ea31 0303 	bics.w	r3, r1, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f8c:	6181      	str	r1, [r0, #24]
  }
}
 8003f8e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f90:	0409      	lsls	r1, r1, #16
 8003f92:	6181      	str	r1, [r0, #24]
 8003f94:	4770      	bx	lr

08003f96 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f96:	4770      	bx	lr

08003f98 <HAL_GPIO_EXTI_IRQHandler>:
{
 8003f98:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4203      	tst	r3, r0
 8003fa0:	d100      	bne.n	8003fa4 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8003fa2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fa4:	4b02      	ldr	r3, [pc, #8]	; (8003fb0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003fa6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fa8:	f7ff fff5 	bl	8003f96 <HAL_GPIO_EXTI_Callback>
}
 8003fac:	e7f9      	b.n	8003fa2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003fae:	bf00      	nop
 8003fb0:	40013c00 	.word	0x40013c00

08003fb4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fb4:	6803      	ldr	r3, [r0, #0]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	f012 0f02 	tst.w	r2, #2
 8003fbc:	d001      	beq.n	8003fc2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc2:	6803      	ldr	r3, [r0, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	f012 0f01 	tst.w	r2, #1
 8003fca:	d103      	bne.n	8003fd4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	619a      	str	r2, [r3, #24]
  }
}
 8003fd4:	4770      	bx	lr

08003fd6 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003fd6:	f011 0f01 	tst.w	r1, #1
 8003fda:	d009      	beq.n	8003ff0 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fdc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003fe0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fe4:	2b28      	cmp	r3, #40	; 0x28
 8003fe6:	d001      	beq.n	8003fec <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fe8:	23f2      	movs	r3, #242	; 0xf2
 8003fea:	e002      	b.n	8003ff2 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003fec:	2342      	movs	r3, #66	; 0x42
 8003fee:	e000      	b.n	8003ff2 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8003ff0:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ff2:	f011 0f02 	tst.w	r1, #2
 8003ff6:	d009      	beq.n	800400c <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ff8:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ffc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004000:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004004:	2a28      	cmp	r2, #40	; 0x28
 8004006:	d016      	beq.n	8004036 <I2C_Disable_IRQ+0x60>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004008:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800400c:	f011 0f04 	tst.w	r1, #4
 8004010:	d001      	beq.n	8004016 <I2C_Disable_IRQ+0x40>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004012:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004016:	f001 0211 	and.w	r2, r1, #17
 800401a:	2a11      	cmp	r2, #17
 800401c:	d00d      	beq.n	800403a <I2C_Disable_IRQ+0x64>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800401e:	f001 0112 	and.w	r1, r1, #18
 8004022:	2912      	cmp	r1, #18
 8004024:	d00c      	beq.n	8004040 <I2C_Disable_IRQ+0x6a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004026:	2912      	cmp	r1, #18
 8004028:	d00d      	beq.n	8004046 <I2C_Disable_IRQ+0x70>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800402a:	6801      	ldr	r1, [r0, #0]
 800402c:	680a      	ldr	r2, [r1, #0]
 800402e:	ea22 0303 	bic.w	r3, r2, r3
 8004032:	600b      	str	r3, [r1, #0]
}
 8004034:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004036:	4663      	mov	r3, ip
 8004038:	e7e8      	b.n	800400c <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800403a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800403e:	e7ee      	b.n	800401e <I2C_Disable_IRQ+0x48>
    tmpisr |= I2C_IT_STOPI;
 8004040:	f043 0320 	orr.w	r3, r3, #32
 8004044:	e7ef      	b.n	8004026 <I2C_Disable_IRQ+0x50>
    tmpisr |= I2C_IT_TCI;
 8004046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800404a:	e7ee      	b.n	800402a <I2C_Disable_IRQ+0x54>

0800404c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800404c:	2800      	cmp	r0, #0
 800404e:	d057      	beq.n	8004100 <HAL_I2C_Init+0xb4>
{
 8004050:	b510      	push	{r4, lr}
 8004052:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004054:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004058:	2b00      	cmp	r3, #0
 800405a:	d041      	beq.n	80040e0 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800405c:	2324      	movs	r3, #36	; 0x24
 800405e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004062:	6822      	ldr	r2, [r4, #0]
 8004064:	6813      	ldr	r3, [r2, #0]
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800406c:	6863      	ldr	r3, [r4, #4]
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004074:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	6893      	ldr	r3, [r2, #8]
 800407a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800407e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004080:	68e3      	ldr	r3, [r4, #12]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d031      	beq.n	80040ea <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004086:	68a3      	ldr	r3, [r4, #8]
 8004088:	6822      	ldr	r2, [r4, #0]
 800408a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800408e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004090:	68e3      	ldr	r3, [r4, #12]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d02f      	beq.n	80040f6 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004096:	6822      	ldr	r2, [r4, #0]
 8004098:	6851      	ldr	r1, [r2, #4]
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <HAL_I2C_Init+0xb8>)
 800409c:	430b      	orrs	r3, r1
 800409e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040a0:	6822      	ldr	r2, [r4, #0]
 80040a2:	68d3      	ldr	r3, [r2, #12]
 80040a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040a8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80040aa:	6923      	ldr	r3, [r4, #16]
 80040ac:	6962      	ldr	r2, [r4, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	69a1      	ldr	r1, [r4, #24]
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80040b8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040ba:	69e3      	ldr	r3, [r4, #28]
 80040bc:	6a21      	ldr	r1, [r4, #32]
 80040be:	6822      	ldr	r2, [r4, #0]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80040c4:	6822      	ldr	r2, [r4, #0]
 80040c6:	6813      	ldr	r3, [r2, #0]
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ce:	2000      	movs	r0, #0
 80040d0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	2320      	movs	r3, #32
 80040d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040da:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80040de:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80040e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80040e4:	f003 fbba 	bl	800785c <HAL_I2C_MspInit>
 80040e8:	e7b8      	b.n	800405c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ea:	68a3      	ldr	r3, [r4, #8]
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f2:	6093      	str	r3, [r2, #8]
 80040f4:	e7cc      	b.n	8004090 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	e7ca      	b.n	8004096 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004100:	2001      	movs	r0, #1
}
 8004102:	4770      	bx	lr
 8004104:	02008000 	.word	0x02008000

08004108 <HAL_I2C_EV_IRQHandler>:
{
 8004108:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800410a:	6803      	ldr	r3, [r0, #0]
 800410c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800410e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004110:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004112:	b103      	cbz	r3, 8004116 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004114:	4798      	blx	r3
}
 8004116:	bd08      	pop	{r3, pc}

08004118 <HAL_I2C_SlaveTxCpltCallback>:
}
 8004118:	4770      	bx	lr

0800411a <HAL_I2C_SlaveRxCpltCallback>:
}
 800411a:	4770      	bx	lr

0800411c <I2C_ITSlaveSeqCplt>:
{
 800411c:	b510      	push	{r4, lr}
 800411e:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	2300      	movs	r3, #0
 8004122:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004126:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b29      	cmp	r3, #41	; 0x29
 800412e:	d005      	beq.n	800413c <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004130:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b2a      	cmp	r3, #42	; 0x2a
 8004138:	d00f      	beq.n	800415a <I2C_ITSlaveSeqCplt+0x3e>
}
 800413a:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800413c:	2328      	movs	r3, #40	; 0x28
 800413e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004142:	2321      	movs	r3, #33	; 0x21
 8004144:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004146:	2101      	movs	r1, #1
 8004148:	f7ff ff45 	bl	8003fd6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800414c:	2300      	movs	r3, #0
 800414e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004152:	4620      	mov	r0, r4
 8004154:	f7ff ffe0 	bl	8004118 <HAL_I2C_SlaveTxCpltCallback>
 8004158:	e7ef      	b.n	800413a <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800415a:	2328      	movs	r3, #40	; 0x28
 800415c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004160:	2322      	movs	r3, #34	; 0x22
 8004162:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004164:	2102      	movs	r1, #2
 8004166:	f7ff ff36 	bl	8003fd6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800416a:	2300      	movs	r3, #0
 800416c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004170:	4620      	mov	r0, r4
 8004172:	f7ff ffd2 	bl	800411a <HAL_I2C_SlaveRxCpltCallback>
}
 8004176:	e7e0      	b.n	800413a <I2C_ITSlaveSeqCplt+0x1e>

08004178 <HAL_I2C_AddrCallback>:
}
 8004178:	4770      	bx	lr

0800417a <I2C_ITAddrCplt>:
{
 800417a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417c:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800417e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004182:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004186:	2b28      	cmp	r3, #40	; 0x28
 8004188:	d006      	beq.n	8004198 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800418a:	6803      	ldr	r3, [r0, #0]
 800418c:	2208      	movs	r2, #8
 800418e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004190:	2300      	movs	r3, #0
 8004192:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8004198:	6803      	ldr	r3, [r0, #0]
 800419a:	699e      	ldr	r6, [r3, #24]
 800419c:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	0c12      	lsrs	r2, r2, #16
 80041a4:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80041ae:	68df      	ldr	r7, [r3, #12]
 80041b0:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041b4:	68c1      	ldr	r1, [r0, #12]
 80041b6:	2902      	cmp	r1, #2
 80041b8:	d121      	bne.n	80041fe <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80041ba:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80041be:	f015 0f06 	tst.w	r5, #6
 80041c2:	d110      	bne.n	80041e6 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 80041c4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80041c6:	3101      	adds	r1, #1
 80041c8:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80041ca:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80041cc:	2902      	cmp	r1, #2
 80041ce:	d1e2      	bne.n	8004196 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 80041d0:	2100      	movs	r1, #0
 80041d2:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041d4:	2008      	movs	r0, #8
 80041d6:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80041d8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041dc:	4631      	mov	r1, r6
 80041de:	4620      	mov	r0, r4
 80041e0:	f7ff ffca 	bl	8004178 <HAL_I2C_AddrCallback>
 80041e4:	e7d7      	b.n	8004196 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041e6:	2104      	movs	r1, #4
 80041e8:	f7ff fef5 	bl	8003fd6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80041ec:	2300      	movs	r3, #0
 80041ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041f2:	463a      	mov	r2, r7
 80041f4:	4631      	mov	r1, r6
 80041f6:	4620      	mov	r0, r4
 80041f8:	f7ff ffbe 	bl	8004178 <HAL_I2C_AddrCallback>
 80041fc:	e7cb      	b.n	8004196 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041fe:	2104      	movs	r1, #4
 8004200:	f7ff fee9 	bl	8003fd6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004204:	2300      	movs	r3, #0
 8004206:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800420a:	462a      	mov	r2, r5
 800420c:	4631      	mov	r1, r6
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff ffb2 	bl	8004178 <HAL_I2C_AddrCallback>
 8004214:	e7bf      	b.n	8004196 <I2C_ITAddrCplt+0x1c>

08004216 <HAL_I2C_ListenCpltCallback>:
}
 8004216:	4770      	bx	lr

08004218 <I2C_ITListenCplt>:
{
 8004218:	b510      	push	{r4, lr}
 800421a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <I2C_ITListenCplt+0x64>)
 800421e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004220:	2300      	movs	r3, #0
 8004222:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004224:	2220      	movs	r2, #32
 8004226:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800422e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004230:	f011 0f04 	tst.w	r1, #4
 8004234:	d013      	beq.n	800425e <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004236:	6803      	ldr	r3, [r0, #0]
 8004238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800423a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800423c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800423e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004240:	3301      	adds	r3, #1
 8004242:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004244:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004246:	b153      	cbz	r3, 800425e <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8004248:	3b01      	subs	r3, #1
 800424a:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 800424c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004256:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800425e:	2107      	movs	r1, #7
 8004260:	4620      	mov	r0, r4
 8004262:	f7ff feb8 	bl	8003fd6 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	2210      	movs	r2, #16
 800426a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800426c:	2300      	movs	r3, #0
 800426e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004272:	4620      	mov	r0, r4
 8004274:	f7ff ffcf 	bl	8004216 <HAL_I2C_ListenCpltCallback>
}
 8004278:	bd10      	pop	{r4, pc}
 800427a:	bf00      	nop
 800427c:	ffff0000 	.word	0xffff0000

08004280 <HAL_I2C_ErrorCallback>:
}
 8004280:	4770      	bx	lr

08004282 <HAL_I2C_AbortCpltCallback>:
}
 8004282:	4770      	bx	lr

08004284 <I2C_ITError>:
{
 8004284:	b510      	push	{r4, lr}
 8004286:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004288:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800428c:	2000      	movs	r0, #0
 800428e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004292:	4a36      	ldr	r2, [pc, #216]	; (800436c <I2C_ITError+0xe8>)
 8004294:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004296:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8004298:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800429a:	430a      	orrs	r2, r1
 800429c:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800429e:	3b28      	subs	r3, #40	; 0x28
 80042a0:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d824      	bhi.n	80042f0 <I2C_ITError+0x6c>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042a6:	2103      	movs	r1, #3
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7ff fe94 	bl	8003fd6 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042ae:	2328      	movs	r3, #40	; 0x28
 80042b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042b4:	2300      	movs	r3, #0
 80042b6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80042b8:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <I2C_ITError+0xec>)
 80042ba:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80042c4:	d024      	beq.n	8004310 <I2C_ITError+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042cc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80042ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d03f      	beq.n	8004354 <I2C_ITError+0xd0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042d4:	4a27      	ldr	r2, [pc, #156]	; (8004374 <I2C_ITError+0xf0>)
 80042d6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80042d8:	2300      	movs	r3, #0
 80042da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80042e0:	f7ff fc58 	bl	8003b94 <HAL_DMA_Abort_IT>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	d035      	beq.n	8004354 <I2C_ITError+0xd0>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80042ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80042ec:	4798      	blx	r3
 80042ee:	e031      	b.n	8004354 <I2C_ITError+0xd0>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042f0:	2107      	movs	r1, #7
 80042f2:	4620      	mov	r0, r4
 80042f4:	f7ff fe6f 	bl	8003fd6 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80042f8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b60      	cmp	r3, #96	; 0x60
 8004300:	d002      	beq.n	8004308 <I2C_ITError+0x84>
      hi2c->State         = HAL_I2C_STATE_READY;
 8004302:	2320      	movs	r3, #32
 8004304:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004308:	2300      	movs	r3, #0
 800430a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800430c:	6363      	str	r3, [r4, #52]	; 0x34
 800430e:	e7d5      	b.n	80042bc <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004316:	d012      	beq.n	800433e <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800431e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004320:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004322:	b1bb      	cbz	r3, 8004354 <I2C_ITError+0xd0>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004324:	4a13      	ldr	r2, [pc, #76]	; (8004374 <I2C_ITError+0xf0>)
 8004326:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8004328:	2300      	movs	r3, #0
 800432a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800432e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004330:	f7ff fc30 	bl	8003b94 <HAL_DMA_Abort_IT>
 8004334:	b170      	cbz	r0, 8004354 <I2C_ITError+0xd0>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004336:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004338:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800433a:	4798      	blx	r3
 800433c:	e00a      	b.n	8004354 <I2C_ITError+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800433e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b60      	cmp	r3, #96	; 0x60
 8004346:	d006      	beq.n	8004356 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8004348:	2300      	movs	r3, #0
 800434a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800434e:	4620      	mov	r0, r4
 8004350:	f7ff ff96 	bl	8004280 <HAL_I2C_ErrorCallback>
}
 8004354:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004356:	2320      	movs	r3, #32
 8004358:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800435c:	2300      	movs	r3, #0
 800435e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004362:	4620      	mov	r0, r4
 8004364:	f7ff ff8d 	bl	8004282 <HAL_I2C_AbortCpltCallback>
 8004368:	e7f4      	b.n	8004354 <I2C_ITError+0xd0>
 800436a:	bf00      	nop
 800436c:	ffff0000 	.word	0xffff0000
 8004370:	08004499 	.word	0x08004499
 8004374:	08004655 	.word	0x08004655

08004378 <I2C_ITSlaveCplt>:
{
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	4604      	mov	r4, r0
 800437c:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800437e:	6803      	ldr	r3, [r0, #0]
 8004380:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004382:	2220      	movs	r2, #32
 8004384:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004386:	2107      	movs	r1, #7
 8004388:	f7ff fe25 	bl	8003fd6 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	6853      	ldr	r3, [r2, #4]
 8004390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004394:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8004396:	6822      	ldr	r2, [r4, #0]
 8004398:	6853      	ldr	r3, [r2, #4]
 800439a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800439e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80043a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7ff fe01 	bl	8003fb4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043b2:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80043b6:	d03b      	beq.n	8004430 <I2C_ITSlaveCplt+0xb8>
    if (hi2c->hdmatx != NULL)
 80043b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043ba:	b11b      	cbz	r3, 80043c4 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80043c4:	f015 0f04 	tst.w	r5, #4
 80043c8:	d011      	beq.n	80043ee <I2C_ITSlaveCplt+0x76>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80043ca:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d8:	3301      	adds	r3, #1
 80043da:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80043dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80043de:	b133      	cbz	r3, 80043ee <I2C_ITSlaveCplt+0x76>
      hi2c->XferSize--;
 80043e0:	3b01      	subs	r3, #1
 80043e2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80043e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80043ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	b11b      	cbz	r3, 80043fc <I2C_ITSlaveCplt+0x84>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043f6:	f043 0304 	orr.w	r3, r3, #4
 80043fa:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004404:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004406:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004408:	b9eb      	cbnz	r3, 8004446 <I2C_ITSlaveCplt+0xce>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800440a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800440c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004410:	d127      	bne.n	8004462 <I2C_ITSlaveCplt+0xea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004412:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b22      	cmp	r3, #34	; 0x22
 800441a:	d031      	beq.n	8004480 <I2C_ITSlaveCplt+0x108>
    hi2c->State = HAL_I2C_STATE_READY;
 800441c:	2320      	movs	r3, #32
 800441e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004428:	4620      	mov	r0, r4
 800442a:	f7ff fe75 	bl	8004118 <HAL_I2C_SlaveTxCpltCallback>
}
 800442e:	e026      	b.n	800447e <I2C_ITSlaveCplt+0x106>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004430:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8004434:	d0c6      	beq.n	80043c4 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8004436:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0c3      	beq.n	80043c4 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	b29b      	uxth	r3, r3
 8004442:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004444:	e7be      	b.n	80043c4 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004446:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff ff1b 	bl	8004284 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800444e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b28      	cmp	r3, #40	; 0x28
 8004456:	d112      	bne.n	800447e <I2C_ITSlaveCplt+0x106>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004458:	4629      	mov	r1, r5
 800445a:	4620      	mov	r0, r4
 800445c:	f7ff fedc 	bl	8004218 <I2C_ITListenCplt>
 8004460:	e00d      	b.n	800447e <I2C_ITSlaveCplt+0x106>
    I2C_ITSlaveSeqCplt(hi2c);
 8004462:	4620      	mov	r0, r4
 8004464:	f7ff fe5a 	bl	800411c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <I2C_ITSlaveCplt+0x11c>)
 800446a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800446c:	2320      	movs	r3, #32
 800446e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004472:	2300      	movs	r3, #0
 8004474:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004478:	4620      	mov	r0, r4
 800447a:	f7ff fecc 	bl	8004216 <HAL_I2C_ListenCpltCallback>
}
 800447e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004480:	2320      	movs	r3, #32
 8004482:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004486:	2300      	movs	r3, #0
 8004488:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800448c:	4620      	mov	r0, r4
 800448e:	f7ff fe44 	bl	800411a <HAL_I2C_SlaveRxCpltCallback>
 8004492:	e7f4      	b.n	800447e <I2C_ITSlaveCplt+0x106>
 8004494:	ffff0000 	.word	0xffff0000

08004498 <I2C_Slave_ISR_IT>:
{
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4616      	mov	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 800449c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800449e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	f000 809f 	beq.w	80045e6 <I2C_Slave_ISR_IT+0x14e>
 80044a8:	4604      	mov	r4, r0
 80044aa:	460d      	mov	r5, r1
 80044ac:	2301      	movs	r3, #1
 80044ae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044b2:	f011 0f10 	tst.w	r1, #16
 80044b6:	d03f      	beq.n	8004538 <I2C_Slave_ISR_IT+0xa0>
 80044b8:	f016 0f10 	tst.w	r6, #16
 80044bc:	d03c      	beq.n	8004538 <I2C_Slave_ISR_IT+0xa0>
    if (hi2c->XferCount == 0U)
 80044be:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	bb4b      	cbnz	r3, 8004518 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80044c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b28      	cmp	r3, #40	; 0x28
 80044cc:	d011      	beq.n	80044f2 <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044ce:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b29      	cmp	r3, #41	; 0x29
 80044d6:	d012      	beq.n	80044fe <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	2210      	movs	r2, #16
 80044dc:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044de:	f015 0f20 	tst.w	r5, #32
 80044e2:	d002      	beq.n	80044ea <I2C_Slave_ISR_IT+0x52>
 80044e4:	f016 0f20 	tst.w	r6, #32
 80044e8:	d178      	bne.n	80045dc <I2C_Slave_ISR_IT+0x144>
  __HAL_UNLOCK(hi2c);
 80044ea:	2000      	movs	r0, #0
 80044ec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80044f0:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80044f2:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80044f6:	d1ea      	bne.n	80044ce <I2C_Slave_ISR_IT+0x36>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80044f8:	f7ff fe8e 	bl	8004218 <I2C_ITListenCplt>
 80044fc:	e7ef      	b.n	80044de <I2C_Slave_ISR_IT+0x46>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044fe:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8004502:	d0e9      	beq.n	80044d8 <I2C_Slave_ISR_IT+0x40>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	2210      	movs	r2, #16
 8004508:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800450a:	4620      	mov	r0, r4
 800450c:	f7ff fd52 	bl	8003fb4 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8004510:	4620      	mov	r0, r4
 8004512:	f7ff fe03 	bl	800411c <I2C_ITSlaveSeqCplt>
 8004516:	e7e2      	b.n	80044de <I2C_Slave_ISR_IT+0x46>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004518:	6803      	ldr	r3, [r0, #0]
 800451a:	2110      	movs	r1, #16
 800451c:	61d9      	str	r1, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800451e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004526:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800452a:	bf18      	it	ne
 800452c:	2a00      	cmpne	r2, #0
 800452e:	d1d6      	bne.n	80044de <I2C_Slave_ISR_IT+0x46>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004530:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004532:	f7ff fea7 	bl	8004284 <I2C_ITError>
 8004536:	e7d2      	b.n	80044de <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004538:	f015 0f04 	tst.w	r5, #4
 800453c:	d021      	beq.n	8004582 <I2C_Slave_ISR_IT+0xea>
 800453e:	f016 0f04 	tst.w	r6, #4
 8004542:	d01e      	beq.n	8004582 <I2C_Slave_ISR_IT+0xea>
    if (hi2c->XferCount > 0U)
 8004544:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	b183      	cbz	r3, 800456c <I2C_Slave_ISR_IT+0xd4>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800454a:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004554:	7019      	strb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8004556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004558:	3301      	adds	r3, #1
 800455a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800455c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800455e:	3b01      	subs	r3, #1
 8004560:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004562:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29b      	uxth	r3, r3
 800456a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800456c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1b4      	bne.n	80044de <I2C_Slave_ISR_IT+0x46>
 8004574:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8004578:	d0b1      	beq.n	80044de <I2C_Slave_ISR_IT+0x46>
      I2C_ITSlaveSeqCplt(hi2c);
 800457a:	4620      	mov	r0, r4
 800457c:	f7ff fdce 	bl	800411c <I2C_ITSlaveSeqCplt>
 8004580:	e7ad      	b.n	80044de <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004582:	f015 0f08 	tst.w	r5, #8
 8004586:	d002      	beq.n	800458e <I2C_Slave_ISR_IT+0xf6>
 8004588:	f016 0f08 	tst.w	r6, #8
 800458c:	d118      	bne.n	80045c0 <I2C_Slave_ISR_IT+0x128>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800458e:	f015 0f02 	tst.w	r5, #2
 8004592:	d0a4      	beq.n	80044de <I2C_Slave_ISR_IT+0x46>
 8004594:	f016 0f02 	tst.w	r6, #2
 8004598:	d0a1      	beq.n	80044de <I2C_Slave_ISR_IT+0x46>
    if (hi2c->XferCount > 0U)
 800459a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	b1a3      	cbz	r3, 80045ca <I2C_Slave_ISR_IT+0x132>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80045a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045aa:	3301      	adds	r3, #1
 80045ac:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80045ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80045b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045ba:	3b01      	subs	r3, #1
 80045bc:	8523      	strh	r3, [r4, #40]	; 0x28
 80045be:	e78e      	b.n	80044de <I2C_Slave_ISR_IT+0x46>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80045c0:	4629      	mov	r1, r5
 80045c2:	4620      	mov	r0, r4
 80045c4:	f7ff fdd9 	bl	800417a <I2C_ITAddrCplt>
 80045c8:	e789      	b.n	80044de <I2C_Slave_ISR_IT+0x46>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	bf18      	it	ne
 80045ce:	f1b2 7f80 	cmpne.w	r2, #16777216	; 0x1000000
 80045d2:	d184      	bne.n	80044de <I2C_Slave_ISR_IT+0x46>
        I2C_ITSlaveSeqCplt(hi2c);
 80045d4:	4620      	mov	r0, r4
 80045d6:	f7ff fda1 	bl	800411c <I2C_ITSlaveSeqCplt>
 80045da:	e780      	b.n	80044de <I2C_Slave_ISR_IT+0x46>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80045dc:	4629      	mov	r1, r5
 80045de:	4620      	mov	r0, r4
 80045e0:	f7ff feca 	bl	8004378 <I2C_ITSlaveCplt>
 80045e4:	e781      	b.n	80044ea <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80045e6:	2002      	movs	r0, #2
 80045e8:	e782      	b.n	80044f0 <I2C_Slave_ISR_IT+0x58>

080045ea <HAL_I2C_ER_IRQHandler>:
{
 80045ea:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80045ec:	6802      	ldr	r2, [r0, #0]
 80045ee:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80045f0:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045f6:	d009      	beq.n	800460c <HAL_I2C_ER_IRQHandler+0x22>
 80045f8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80045fc:	d006      	beq.n	800460c <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80045fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004600:	f044 0401 	orr.w	r4, r4, #1
 8004604:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004606:	f44f 7480 	mov.w	r4, #256	; 0x100
 800460a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800460c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004610:	d00a      	beq.n	8004628 <HAL_I2C_ER_IRQHandler+0x3e>
 8004612:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004616:	d007      	beq.n	8004628 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004618:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800461a:	f042 0208 	orr.w	r2, r2, #8
 800461e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004620:	6802      	ldr	r2, [r0, #0]
 8004622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004626:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004628:	f413 7f00 	tst.w	r3, #512	; 0x200
 800462c:	d00a      	beq.n	8004644 <HAL_I2C_ER_IRQHandler+0x5a>
 800462e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004632:	d007      	beq.n	8004644 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004634:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004636:	f043 0302 	orr.w	r3, r3, #2
 800463a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800463c:	6803      	ldr	r3, [r0, #0]
 800463e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004642:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8004644:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004646:	f011 0f0b 	tst.w	r1, #11
 800464a:	d100      	bne.n	800464e <HAL_I2C_ER_IRQHandler+0x64>
}
 800464c:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800464e:	f7ff fe19 	bl	8004284 <I2C_ITError>
}
 8004652:	e7fb      	b.n	800464c <HAL_I2C_ER_IRQHandler+0x62>

08004654 <I2C_DMAAbort>:
{
 8004654:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004656:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004658:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800465a:	2300      	movs	r3, #0
 800465c:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800465e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004660:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004662:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b60      	cmp	r3, #96	; 0x60
 800466a:	d002      	beq.n	8004672 <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 800466c:	f7ff fe08 	bl	8004280 <HAL_I2C_ErrorCallback>
}
 8004670:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004672:	2320      	movs	r3, #32
 8004674:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8004678:	f7ff fe03 	bl	8004282 <HAL_I2C_AbortCpltCallback>
 800467c:	e7f8      	b.n	8004670 <I2C_DMAAbort+0x1c>

0800467e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b20      	cmp	r3, #32
 8004686:	d124      	bne.n	80046d2 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004688:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800468c:	2b01      	cmp	r3, #1
 800468e:	d022      	beq.n	80046d6 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004690:	2301      	movs	r3, #1
 8004692:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004696:	2324      	movs	r3, #36	; 0x24
 8004698:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800469c:	6802      	ldr	r2, [r0, #0]
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046a6:	6802      	ldr	r2, [r0, #0]
 80046a8:	6813      	ldr	r3, [r2, #0]
 80046aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ae:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046b0:	6802      	ldr	r2, [r0, #0]
 80046b2:	6813      	ldr	r3, [r2, #0]
 80046b4:	4319      	orrs	r1, r3
 80046b6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046b8:	6802      	ldr	r2, [r0, #0]
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c2:	2320      	movs	r3, #32
 80046c4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c8:	2300      	movs	r3, #0
 80046ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80046ce:	4618      	mov	r0, r3
 80046d0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80046d2:	2002      	movs	r0, #2
 80046d4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80046d6:	2002      	movs	r0, #2
  }
}
 80046d8:	4770      	bx	lr

080046da <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d122      	bne.n	800472a <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d020      	beq.n	800472e <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80046ec:	2301      	movs	r3, #1
 80046ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046f2:	2324      	movs	r3, #36	; 0x24
 80046f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046f8:	6802      	ldr	r2, [r0, #0]
 80046fa:	6813      	ldr	r3, [r2, #0]
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004702:	6802      	ldr	r2, [r0, #0]
 8004704:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004706:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800470a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800470e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004710:	6802      	ldr	r2, [r0, #0]
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471a:	2320      	movs	r3, #32
 800471c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004720:	2300      	movs	r3, #0
 8004722:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004726:	4618      	mov	r0, r3
 8004728:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800472a:	2002      	movs	r0, #2
 800472c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800472e:	2002      	movs	r0, #2
  }
}
 8004730:	4770      	bx	lr
	...

08004734 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004734:	b510      	push	{r4, lr}
 8004736:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_PWREx_EnableOverDrive+0x74>)
 800473a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800474c:	4a17      	ldr	r2, [pc, #92]	; (80047ac <HAL_PWREx_EnableOverDrive+0x78>)
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004754:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004756:	f7ff f87b 	bl	8003850 <HAL_GetTick>
 800475a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_PWREx_EnableOverDrive+0x78>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004764:	d108      	bne.n	8004778 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004766:	f7ff f873 	bl	8003850 <HAL_GetTick>
 800476a:	1b00      	subs	r0, r0, r4
 800476c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004770:	d9f4      	bls.n	800475c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8004772:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8004774:	b002      	add	sp, #8
 8004776:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004778:	4a0c      	ldr	r2, [pc, #48]	; (80047ac <HAL_PWREx_EnableOverDrive+0x78>)
 800477a:	6813      	ldr	r3, [r2, #0]
 800477c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004780:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004782:	f7ff f865 	bl	8003850 <HAL_GetTick>
 8004786:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004788:	4b08      	ldr	r3, [pc, #32]	; (80047ac <HAL_PWREx_EnableOverDrive+0x78>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004790:	d107      	bne.n	80047a2 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004792:	f7ff f85d 	bl	8003850 <HAL_GetTick>
 8004796:	1b00      	subs	r0, r0, r4
 8004798:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800479c:	d9f4      	bls.n	8004788 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800479e:	2003      	movs	r0, #3
 80047a0:	e7e8      	b.n	8004774 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80047a2:	2000      	movs	r0, #0
 80047a4:	e7e6      	b.n	8004774 <HAL_PWREx_EnableOverDrive+0x40>
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40007000 	.word	0x40007000

080047b0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b0:	2800      	cmp	r0, #0
 80047b2:	f000 81da 	beq.w	8004b6a <HAL_RCC_OscConfig+0x3ba>
{
 80047b6:	b570      	push	{r4, r5, r6, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047bc:	6803      	ldr	r3, [r0, #0]
 80047be:	f013 0f01 	tst.w	r3, #1
 80047c2:	d029      	beq.n	8004818 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047c4:	4b95      	ldr	r3, [pc, #596]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d01a      	beq.n	8004806 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d0:	4b92      	ldr	r3, [pc, #584]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d00f      	beq.n	80047fc <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e2:	d040      	beq.n	8004866 <HAL_RCC_OscConfig+0xb6>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d154      	bne.n	8004892 <HAL_RCC_OscConfig+0xe2>
 80047e8:	4b8c      	ldr	r3, [pc, #560]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e039      	b.n	8004870 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047fc:	4b87      	ldr	r3, [pc, #540]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004804:	d0ea      	beq.n	80047dc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004806:	4b85      	ldr	r3, [pc, #532]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800480e:	d003      	beq.n	8004818 <HAL_RCC_OscConfig+0x68>
 8004810:	6863      	ldr	r3, [r4, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 81ab 	beq.w	8004b6e <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	f013 0f02 	tst.w	r3, #2
 800481e:	d074      	beq.n	800490a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004820:	4b7e      	ldr	r3, [pc, #504]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f013 0f0c 	tst.w	r3, #12
 8004828:	d05e      	beq.n	80048e8 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482a:	4b7c      	ldr	r3, [pc, #496]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b08      	cmp	r3, #8
 8004834:	d053      	beq.n	80048de <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8089 	beq.w	8004950 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483e:	4a77      	ldr	r2, [pc, #476]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7ff f802 	bl	8003850 <HAL_GetTick>
 800484c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484e:	4b73      	ldr	r3, [pc, #460]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f013 0f02 	tst.w	r3, #2
 8004856:	d172      	bne.n	800493e <HAL_RCC_OscConfig+0x18e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004858:	f7fe fffa 	bl	8003850 <HAL_GetTick>
 800485c:	1b40      	subs	r0, r0, r5
 800485e:	2802      	cmp	r0, #2
 8004860:	d9f5      	bls.n	800484e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8004862:	2003      	movs	r0, #3
 8004864:	e188      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004866:	4a6d      	ldr	r2, [pc, #436]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004868:	6813      	ldr	r3, [r2, #0]
 800486a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004870:	6863      	ldr	r3, [r4, #4]
 8004872:	b32b      	cbz	r3, 80048c0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8004874:	f7fe ffec 	bl	8003850 <HAL_GetTick>
 8004878:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004882:	d1c9      	bne.n	8004818 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004884:	f7fe ffe4 	bl	8003850 <HAL_GetTick>
 8004888:	1b40      	subs	r0, r0, r5
 800488a:	2864      	cmp	r0, #100	; 0x64
 800488c:	d9f5      	bls.n	800487a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800488e:	2003      	movs	r0, #3
 8004890:	e172      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004896:	d009      	beq.n	80048ac <HAL_RCC_OscConfig+0xfc>
 8004898:	4b60      	ldr	r3, [pc, #384]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	e7e1      	b.n	8004870 <HAL_RCC_OscConfig+0xc0>
 80048ac:	4b5b      	ldr	r3, [pc, #364]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e7d7      	b.n	8004870 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80048c0:	f7fe ffc6 	bl	8003850 <HAL_GetTick>
 80048c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c6:	4b55      	ldr	r3, [pc, #340]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80048ce:	d0a3      	beq.n	8004818 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048d0:	f7fe ffbe 	bl	8003850 <HAL_GetTick>
 80048d4:	1b40      	subs	r0, r0, r5
 80048d6:	2864      	cmp	r0, #100	; 0x64
 80048d8:	d9f5      	bls.n	80048c6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80048da:	2003      	movs	r0, #3
 80048dc:	e14c      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b4f      	ldr	r3, [pc, #316]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80048e6:	d1a6      	bne.n	8004836 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e8:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f013 0f02 	tst.w	r3, #2
 80048f0:	d003      	beq.n	80048fa <HAL_RCC_OscConfig+0x14a>
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	f040 813c 	bne.w	8004b72 <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fa:	4a48      	ldr	r2, [pc, #288]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048fc:	6813      	ldr	r3, [r2, #0]
 80048fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004902:	6921      	ldr	r1, [r4, #16]
 8004904:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004908:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	f013 0f08 	tst.w	r3, #8
 8004910:	d046      	beq.n	80049a0 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004912:	6963      	ldr	r3, [r4, #20]
 8004914:	b383      	cbz	r3, 8004978 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004916:	4a41      	ldr	r2, [pc, #260]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004918:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fe ff96 	bl	8003850 <HAL_GetTick>
 8004924:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492a:	f013 0f02 	tst.w	r3, #2
 800492e:	d137      	bne.n	80049a0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004930:	f7fe ff8e 	bl	8003850 <HAL_GetTick>
 8004934:	1b40      	subs	r0, r0, r5
 8004936:	2802      	cmp	r0, #2
 8004938:	d9f5      	bls.n	8004926 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800493a:	2003      	movs	r0, #3
 800493c:	e11c      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493e:	4a37      	ldr	r2, [pc, #220]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004940:	6813      	ldr	r3, [r2, #0]
 8004942:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004946:	6921      	ldr	r1, [r4, #16]
 8004948:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e7dc      	b.n	800490a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8004950:	4a32      	ldr	r2, [pc, #200]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004952:	6813      	ldr	r3, [r2, #0]
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800495a:	f7fe ff79 	bl	8003850 <HAL_GetTick>
 800495e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004960:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f013 0f02 	tst.w	r3, #2
 8004968:	d0cf      	beq.n	800490a <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800496a:	f7fe ff71 	bl	8003850 <HAL_GetTick>
 800496e:	1b40      	subs	r0, r0, r5
 8004970:	2802      	cmp	r0, #2
 8004972:	d9f5      	bls.n	8004960 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8004974:	2003      	movs	r0, #3
 8004976:	e0ff      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004978:	4a28      	ldr	r2, [pc, #160]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800497a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004982:	f7fe ff65 	bl	8003850 <HAL_GetTick>
 8004986:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004988:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800498a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498c:	f013 0f02 	tst.w	r3, #2
 8004990:	d006      	beq.n	80049a0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004992:	f7fe ff5d 	bl	8003850 <HAL_GetTick>
 8004996:	1b40      	subs	r0, r0, r5
 8004998:	2802      	cmp	r0, #2
 800499a:	d9f5      	bls.n	8004988 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 800499c:	2003      	movs	r0, #3
 800499e:	e0eb      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	f013 0f04 	tst.w	r3, #4
 80049a6:	d07d      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a8:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80049b0:	d11e      	bne.n	80049f0 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80049b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80049c6:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <HAL_RCC_OscConfig+0x270>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049d0:	d010      	beq.n	80049f4 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d2:	68a3      	ldr	r3, [r4, #8]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d025      	beq.n	8004a24 <HAL_RCC_OscConfig+0x274>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d13b      	bne.n	8004a54 <HAL_RCC_OscConfig+0x2a4>
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80049de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049e0:	f022 0201 	bic.w	r2, r2, #1
 80049e4:	671a      	str	r2, [r3, #112]	; 0x70
 80049e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049e8:	f022 0204 	bic.w	r2, r2, #4
 80049ec:	671a      	str	r2, [r3, #112]	; 0x70
 80049ee:	e01e      	b.n	8004a2e <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 80049f0:	2500      	movs	r5, #0
 80049f2:	e7e9      	b.n	80049c8 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 80049f4:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <HAL_RCC_OscConfig+0x270>)
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80049fe:	f7fe ff27 	bl	8003850 <HAL_GetTick>
 8004a02:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_RCC_OscConfig+0x270>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a0c:	d1e1      	bne.n	80049d2 <HAL_RCC_OscConfig+0x222>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a0e:	f7fe ff1f 	bl	8003850 <HAL_GetTick>
 8004a12:	1b80      	subs	r0, r0, r6
 8004a14:	2864      	cmp	r0, #100	; 0x64
 8004a16:	d9f5      	bls.n	8004a04 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8004a18:	2003      	movs	r0, #3
 8004a1a:	e0ad      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a24:	4a56      	ldr	r2, [pc, #344]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004a26:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a2e:	68a3      	ldr	r3, [r4, #8]
 8004a30:	b333      	cbz	r3, 8004a80 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a32:	f7fe ff0d 	bl	8003850 <HAL_GetTick>
 8004a36:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a38:	4b51      	ldr	r3, [pc, #324]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3c:	f013 0f02 	tst.w	r3, #2
 8004a40:	d12f      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fe ff05 	bl	8003850 <HAL_GetTick>
 8004a46:	1b80      	subs	r0, r0, r6
 8004a48:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a4c:	4298      	cmp	r0, r3
 8004a4e:	d9f3      	bls.n	8004a38 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004a50:	2003      	movs	r0, #3
 8004a52:	e091      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	d009      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2bc>
 8004a58:	4b49      	ldr	r3, [pc, #292]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004a5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	671a      	str	r2, [r3, #112]	; 0x70
 8004a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a64:	f022 0204 	bic.w	r2, r2, #4
 8004a68:	671a      	str	r2, [r3, #112]	; 0x70
 8004a6a:	e7e0      	b.n	8004a2e <HAL_RCC_OscConfig+0x27e>
 8004a6c:	4b44      	ldr	r3, [pc, #272]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a70:	f042 0204 	orr.w	r2, r2, #4
 8004a74:	671a      	str	r2, [r3, #112]	; 0x70
 8004a76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	671a      	str	r2, [r3, #112]	; 0x70
 8004a7e:	e7d6      	b.n	8004a2e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a80:	f7fe fee6 	bl	8003850 <HAL_GetTick>
 8004a84:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a86:	4b3e      	ldr	r3, [pc, #248]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	f013 0f02 	tst.w	r3, #2
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a90:	f7fe fede 	bl	8003850 <HAL_GetTick>
 8004a94:	1b80      	subs	r0, r0, r6
 8004a96:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a9a:	4298      	cmp	r0, r3
 8004a9c:	d9f3      	bls.n	8004a86 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8004a9e:	2003      	movs	r0, #3
 8004aa0:	e06a      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa2:	b9f5      	cbnz	r5, 8004ae2 <HAL_RCC_OscConfig+0x332>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa4:	69a3      	ldr	r3, [r4, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d065      	beq.n	8004b76 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aaa:	4a35      	ldr	r2, [pc, #212]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004aac:	6892      	ldr	r2, [r2, #8]
 8004aae:	f002 020c 	and.w	r2, r2, #12
 8004ab2:	2a08      	cmp	r2, #8
 8004ab4:	d062      	beq.n	8004b7c <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d019      	beq.n	8004aee <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aba:	4a31      	ldr	r2, [pc, #196]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004abc:	6813      	ldr	r3, [r2, #0]
 8004abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fe fec4 	bl	8003850 <HAL_GetTick>
 8004ac8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aca:	4b2d      	ldr	r3, [pc, #180]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004ad2:	d048      	beq.n	8004b66 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fe febc 	bl	8003850 <HAL_GetTick>
 8004ad8:	1b00      	subs	r0, r0, r4
 8004ada:	2802      	cmp	r0, #2
 8004adc:	d9f5      	bls.n	8004aca <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8004ade:	2003      	movs	r0, #3
 8004ae0:	e04a      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae2:	4a27      	ldr	r2, [pc, #156]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004ae4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aea:	6413      	str	r3, [r2, #64]	; 0x40
 8004aec:	e7da      	b.n	8004aa4 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8004aee:	4a24      	ldr	r2, [pc, #144]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004af0:	6813      	ldr	r3, [r2, #0]
 8004af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004af8:	f7fe feaa 	bl	8003850 <HAL_GetTick>
 8004afc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b06:	d006      	beq.n	8004b16 <HAL_RCC_OscConfig+0x366>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fe fea2 	bl	8003850 <HAL_GetTick>
 8004b0c:	1b40      	subs	r0, r0, r5
 8004b0e:	2802      	cmp	r0, #2
 8004b10:	d9f5      	bls.n	8004afe <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8004b12:	2003      	movs	r0, #3
 8004b14:	e030      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b16:	69e3      	ldr	r3, [r4, #28]
 8004b18:	6a22      	ldr	r2, [r4, #32]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004b1e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004b22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004b24:	0852      	lsrs	r2, r2, #1
 8004b26:	3a01      	subs	r2, #1
 8004b28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b34:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004b38:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004b3a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b42:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b44:	f7fe fe84 	bl	8003850 <HAL_GetTick>
 8004b48:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <HAL_RCC_OscConfig+0x3d0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b52:	d106      	bne.n	8004b62 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fe fe7c 	bl	8003850 <HAL_GetTick>
 8004b58:	1b00      	subs	r0, r0, r4
 8004b5a:	2802      	cmp	r0, #2
 8004b5c:	d9f5      	bls.n	8004b4a <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 8004b5e:	2003      	movs	r0, #3
 8004b60:	e00a      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004b62:	2000      	movs	r0, #0
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
 8004b66:	2000      	movs	r0, #0
 8004b68:	e006      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8004b6a:	2001      	movs	r0, #1
}
 8004b6c:	4770      	bx	lr
        return HAL_ERROR;
 8004b6e:	2001      	movs	r0, #1
 8004b70:	e002      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 8004b72:	2001      	movs	r0, #1
 8004b74:	e000      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8004b76:	2000      	movs	r0, #0
}
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	e7fb      	b.n	8004b78 <HAL_RCC_OscConfig+0x3c8>
 8004b80:	40023800 	.word	0x40023800

08004b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b84:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b86:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d03f      	beq.n	8004c12 <HAL_RCC_GetSysClockFreq+0x8e>
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d13f      	bne.n	8004c16 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b96:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004ba4:	d012      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ba8:	6859      	ldr	r1, [r3, #4]
 8004baa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004bae:	481c      	ldr	r0, [pc, #112]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	fba1 0100 	umull	r0, r1, r1, r0
 8004bb6:	f7fe fc8b 	bl	80034d0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004bba:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004bc6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004bca:	e025      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bcc:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8004bd4:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8004bd8:	ebb1 000c 	subs.w	r0, r1, ip
 8004bdc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8004be0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8004be4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004be8:	0181      	lsls	r1, r0, #6
 8004bea:	1a09      	subs	r1, r1, r0
 8004bec:	eb63 030e 	sbc.w	r3, r3, lr
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf6:	00c9      	lsls	r1, r1, #3
 8004bf8:	eb11 0c0c 	adds.w	ip, r1, ip
 8004bfc:	f143 0300 	adc.w	r3, r3, #0
 8004c00:	0299      	lsls	r1, r3, #10
 8004c02:	2300      	movs	r3, #0
 8004c04:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8004c08:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8004c0c:	f7fe fc60 	bl	80034d0 <__aeabi_uldivmod>
 8004c10:	e7d3      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8004c12:	4803      	ldr	r0, [pc, #12]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c14:	e000      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c16:	4803      	ldr	r0, [pc, #12]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004c18:	bd08      	pop	{r3, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	017d7840 	.word	0x017d7840
 8004c24:	00f42400 	.word	0x00f42400

08004c28 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f000 809f 	beq.w	8004d6c <HAL_RCC_ClockConfig+0x144>
{
 8004c2e:	b570      	push	{r4, r5, r6, lr}
 8004c30:	460d      	mov	r5, r1
 8004c32:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c34:	4b51      	ldr	r3, [pc, #324]	; (8004d7c <HAL_RCC_ClockConfig+0x154>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	428b      	cmp	r3, r1
 8004c3e:	d20b      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c40:	4a4e      	ldr	r2, [pc, #312]	; (8004d7c <HAL_RCC_ClockConfig+0x154>)
 8004c42:	6813      	ldr	r3, [r2, #0]
 8004c44:	f023 030f 	bic.w	r3, r3, #15
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	428b      	cmp	r3, r1
 8004c54:	f040 808c 	bne.w	8004d70 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	f013 0f02 	tst.w	r3, #2
 8004c5e:	d017      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	f013 0f04 	tst.w	r3, #4
 8004c64:	d004      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c66:	4a46      	ldr	r2, [pc, #280]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004c68:	6893      	ldr	r3, [r2, #8]
 8004c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	f013 0f08 	tst.w	r3, #8
 8004c76:	d004      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4a41      	ldr	r2, [pc, #260]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004c7a:	6893      	ldr	r3, [r2, #8]
 8004c7c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c80:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c82:	4a3f      	ldr	r2, [pc, #252]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004c84:	6893      	ldr	r3, [r2, #8]
 8004c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c8a:	68a1      	ldr	r1, [r4, #8]
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	f013 0f01 	tst.w	r3, #1
 8004c96:	d031      	beq.n	8004cfc <HAL_RCC_ClockConfig+0xd4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c98:	6863      	ldr	r3, [r4, #4]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d020      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d025      	beq.n	8004cee <HAL_RCC_ClockConfig+0xc6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca2:	4a37      	ldr	r2, [pc, #220]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	f012 0f02 	tst.w	r2, #2
 8004caa:	d063      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x14c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cac:	4934      	ldr	r1, [pc, #208]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004cae:	688a      	ldr	r2, [r1, #8]
 8004cb0:	f022 0203 	bic.w	r2, r2, #3
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004cb8:	f7fe fdca 	bl	8003850 <HAL_GetTick>
 8004cbc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	6862      	ldr	r2, [r4, #4]
 8004cc8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004ccc:	d016      	beq.n	8004cfc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cce:	f7fe fdbf 	bl	8003850 <HAL_GetTick>
 8004cd2:	1b80      	subs	r0, r0, r6
 8004cd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cd8:	4298      	cmp	r0, r3
 8004cda:	d9f0      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8004cdc:	2003      	movs	r0, #3
 8004cde:	e044      	b.n	8004d6a <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce0:	4a27      	ldr	r2, [pc, #156]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004ce8:	d1e0      	bne.n	8004cac <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004cea:	2001      	movs	r0, #1
 8004cec:	e03d      	b.n	8004d6a <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4a24      	ldr	r2, [pc, #144]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004cf6:	d1d9      	bne.n	8004cac <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	e036      	b.n	8004d6a <HAL_RCC_ClockConfig+0x142>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfc:	4b1f      	ldr	r3, [pc, #124]	; (8004d7c <HAL_RCC_ClockConfig+0x154>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	42ab      	cmp	r3, r5
 8004d06:	d90a      	bls.n	8004d1e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <HAL_RCC_ClockConfig+0x154>)
 8004d0a:	6813      	ldr	r3, [r2, #0]
 8004d0c:	f023 030f 	bic.w	r3, r3, #15
 8004d10:	432b      	orrs	r3, r5
 8004d12:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	42ab      	cmp	r3, r5
 8004d1c:	d12c      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	f013 0f04 	tst.w	r3, #4
 8004d24:	d006      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d26:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004d28:	6893      	ldr	r3, [r2, #8]
 8004d2a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004d2e:	68e1      	ldr	r1, [r4, #12]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	f013 0f08 	tst.w	r3, #8
 8004d3a:	d007      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d3c:	4a10      	ldr	r2, [pc, #64]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004d3e:	6893      	ldr	r3, [r2, #8]
 8004d40:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004d44:	6921      	ldr	r1, [r4, #16]
 8004d46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d4c:	f7ff ff1a 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_ClockConfig+0x158>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d58:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <HAL_RCC_ClockConfig+0x15c>)
 8004d5a:	5cd3      	ldrb	r3, [r2, r3]
 8004d5c:	40d8      	lsrs	r0, r3
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <HAL_RCC_ClockConfig+0x160>)
 8004d60:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004d62:	2000      	movs	r0, #0
 8004d64:	f7fe fd36 	bl	80037d4 <HAL_InitTick>
  return HAL_OK;
 8004d68:	2000      	movs	r0, #0
}
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004d6c:	2001      	movs	r0, #1
}
 8004d6e:	4770      	bx	lr
      return HAL_ERROR;
 8004d70:	2001      	movs	r0, #1
 8004d72:	e7fa      	b.n	8004d6a <HAL_RCC_ClockConfig+0x142>
        return HAL_ERROR;
 8004d74:	2001      	movs	r0, #1
 8004d76:	e7f8      	b.n	8004d6a <HAL_RCC_ClockConfig+0x142>
      return HAL_ERROR;
 8004d78:	2001      	movs	r0, #1
 8004d7a:	e7f6      	b.n	8004d6a <HAL_RCC_ClockConfig+0x142>
 8004d7c:	40023c00 	.word	0x40023c00
 8004d80:	40023800 	.word	0x40023800
 8004d84:	0800b758 	.word	0x0800b758
 8004d88:	2000000c 	.word	0x2000000c

08004d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d92:	6806      	ldr	r6, [r0, #0]
 8004d94:	f016 0601 	ands.w	r6, r6, #1
 8004d98:	d00d      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d9a:	4bb5      	ldr	r3, [pc, #724]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004da2:	609a      	str	r2, [r3, #8]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004da8:	430a      	orrs	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8155 	beq.w	800505e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 8004db4:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004db6:	6825      	ldr	r5, [r4, #0]
 8004db8:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8004dbc:	d011      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dbe:	4aac      	ldr	r2, [pc, #688]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004dc0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004dc4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004dc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004dd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd6:	f000 8144 	beq.w	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8143 	beq.w	8005066 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 8004de0:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004de8:	d00f      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dea:	4aa1      	ldr	r2, [pc, #644]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004dec:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004df0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004df4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004df6:	430b      	orrs	r3, r1
 8004df8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e02:	f000 8132 	beq.w	800506a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e06:	b903      	cbnz	r3, 8004e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8004e08:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004e10:	d000      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8004e12:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e14:	f013 0f20 	tst.w	r3, #32
 8004e18:	f040 812c 	bne.w	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	f013 0f10 	tst.w	r3, #16
 8004e22:	d00c      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e24:	4b92      	ldr	r3, [pc, #584]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e26:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e2a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004e32:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004e44:	d008      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e46:	4a8a      	ldr	r2, [pc, #552]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e48:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e4c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004e52:	430b      	orrs	r3, r1
 8004e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e60:	4a83      	ldr	r2, [pc, #524]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e66:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004e6a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004e78:	d008      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e7a:	4a7d      	ldr	r2, [pc, #500]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e7c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004e84:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8004e86:	430b      	orrs	r3, r1
 8004e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e94:	4a76      	ldr	r2, [pc, #472]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e96:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e9a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004e9e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004eac:	d008      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eae:	4a70      	ldr	r2, [pc, #448]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004eb0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004eb4:	f023 0303 	bic.w	r3, r3, #3
 8004eb8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ec6:	d008      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec8:	4a69      	ldr	r2, [pc, #420]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004eca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ece:	f023 030c 	bic.w	r3, r3, #12
 8004ed2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ee0:	d008      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee2:	4a63      	ldr	r2, [pc, #396]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ee4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ee8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004eec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004efa:	d008      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004efc:	4a5c      	ldr	r2, [pc, #368]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004efe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f06:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004f14:	d008      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f16:	4a56      	ldr	r2, [pc, #344]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f18:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f20:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004f22:	430b      	orrs	r3, r1
 8004f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f30:	4a4f      	ldr	r2, [pc, #316]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f36:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004f48:	d008      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f4a:	4a49      	ldr	r2, [pc, #292]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f4c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f56:	430b      	orrs	r3, r1
 8004f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004f62:	d008      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f64:	4a42      	ldr	r2, [pc, #264]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f66:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004f6e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004f70:	430b      	orrs	r3, r1
 8004f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004f7c:	d008      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f7e:	4a3c      	ldr	r2, [pc, #240]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f80:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f88:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004f96:	d00d      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f98:	4a35      	ldr	r2, [pc, #212]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f9e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004fa2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004faa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb0:	f000 80c6 	beq.w	8005140 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	f013 0f08 	tst.w	r3, #8
 8004fba:	d000      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8004fbc:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fbe:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004fc2:	d008      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004fc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004fca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004fce:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004fdc:	d009      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fde:	4a24      	ldr	r2, [pc, #144]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004fe0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004fec:	430b      	orrs	r3, r1
 8004fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8004ff8:	d009      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ffa:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ffc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005000:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005004:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005008:	430b      	orrs	r3, r1
 800500a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005014:	d009      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005016:	4a16      	ldr	r2, [pc, #88]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005018:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800501c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005020:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005024:	430b      	orrs	r3, r1
 8005026:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005030:	d009      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005032:	4a0f      	ldr	r2, [pc, #60]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005034:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005038:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800503c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005040:	430b      	orrs	r3, r1
 8005042:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005046:	2e00      	cmp	r6, #0
 8005048:	d17c      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005050:	d078      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005052:	2d01      	cmp	r5, #1
 8005054:	f000 8109 	beq.w	800526a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005058:	2000      	movs	r0, #0
}
 800505a:	b003      	add	sp, #12
 800505c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1;
 800505e:	2601      	movs	r6, #1
 8005060:	e6a9      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8005062:	2601      	movs	r6, #1
 8005064:	e6b9      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8005066:	2501      	movs	r5, #1
 8005068:	e6bb      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 800506a:	2601      	movs	r6, #1
 800506c:	e6cb      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8005074:	4b87      	ldr	r3, [pc, #540]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005078:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8005088:	4a83      	ldr	r2, [pc, #524]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800508a:	6813      	ldr	r3, [r2, #0]
 800508c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005090:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005092:	f7fe fbdd 	bl	8003850 <HAL_GetTick>
 8005096:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005098:	4b7f      	ldr	r3, [pc, #508]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80050a0:	d106      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a2:	f7fe fbd5 	bl	8003850 <HAL_GetTick>
 80050a6:	1bc0      	subs	r0, r0, r7
 80050a8:	2864      	cmp	r0, #100	; 0x64
 80050aa:	d9f5      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 80050ac:	2003      	movs	r0, #3
 80050ae:	e7d4      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050b0:	4b78      	ldr	r3, [pc, #480]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050b4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80050b8:	d015      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80050ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80050bc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d010      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050c4:	4b73      	ldr	r3, [pc, #460]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80050c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80050cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80050ce:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80050d2:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80050d6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80050da:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80050dc:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	f013 0f01 	tst.w	r3, #1
 80050e4:	d112      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050e8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80050ec:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80050f0:	d01d      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80050f2:	4a68      	ldr	r2, [pc, #416]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80050f4:	6893      	ldr	r3, [r2, #8]
 80050f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050fa:	6093      	str	r3, [r2, #8]
 80050fc:	4965      	ldr	r1, [pc, #404]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80050fe:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005100:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005102:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005106:	4313      	orrs	r3, r2
 8005108:	670b      	str	r3, [r1, #112]	; 0x70
 800510a:	e687      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 800510c:	f7fe fba0 	bl	8003850 <HAL_GetTick>
 8005110:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005112:	4b60      	ldr	r3, [pc, #384]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	f013 0f02 	tst.w	r3, #2
 800511a:	d1e4      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fe fb98 	bl	8003850 <HAL_GetTick>
 8005120:	1bc0      	subs	r0, r0, r7
 8005122:	f241 3388 	movw	r3, #5000	; 0x1388
 8005126:	4298      	cmp	r0, r3
 8005128:	d9f3      	bls.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 800512a:	2003      	movs	r0, #3
 800512c:	e795      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800512e:	4859      	ldr	r0, [pc, #356]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005130:	6882      	ldr	r2, [r0, #8]
 8005132:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005136:	4959      	ldr	r1, [pc, #356]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005138:	4019      	ands	r1, r3
 800513a:	430a      	orrs	r2, r1
 800513c:	6082      	str	r2, [r0, #8]
 800513e:	e7dd      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1;
 8005140:	2501      	movs	r5, #1
 8005142:	e737      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();
 8005144:	4a53      	ldr	r2, [pc, #332]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005146:	6813      	ldr	r3, [r2, #0]
 8005148:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800514c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800514e:	f7fe fb7f 	bl	8003850 <HAL_GetTick>
 8005152:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005154:	4b4f      	ldr	r3, [pc, #316]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800515c:	d006      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800515e:	f7fe fb77 	bl	8003850 <HAL_GetTick>
 8005162:	1b80      	subs	r0, r0, r6
 8005164:	2864      	cmp	r0, #100	; 0x64
 8005166:	d9f5      	bls.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8005168:	2003      	movs	r0, #3
 800516a:	e776      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	f013 0f01 	tst.w	r3, #1
 8005172:	d013      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005176:	b98b      	cbnz	r3, 800519c <HAL_RCCEx_PeriphCLKConfig+0x410>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005178:	4a46      	ldr	r2, [pc, #280]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800517a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800517e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005182:	6860      	ldr	r0, [r4, #4]
 8005184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005188:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800518c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005190:	430b      	orrs	r3, r1
 8005192:	68a1      	ldr	r1, [r4, #8]
 8005194:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005198:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80051a2:	d003      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x420>
 80051a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80051a6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80051aa:	d006      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80051ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80051b0:	d01e      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x464>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b8:	d11a      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x464>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051ba:	4a36      	ldr	r2, [pc, #216]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80051bc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051c0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051c4:	6860      	ldr	r0, [r4, #4]
 80051c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80051ce:	68e0      	ldr	r0, [r4, #12]
 80051d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80051d4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80051d8:	430b      	orrs	r3, r1
 80051da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051de:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80051e2:	f023 031f 	bic.w	r3, r3, #31
 80051e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80051e8:	3901      	subs	r1, #1
 80051ea:	430b      	orrs	r3, r1
 80051ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80051f6:	d011      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x490>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051f8:	4a26      	ldr	r2, [pc, #152]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80051fa:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051fe:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005202:	6866      	ldr	r6, [r4, #4]
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800520c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005210:	4303      	orrs	r3, r0
 8005212:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005216:	430b      	orrs	r3, r1
 8005218:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005222:	d00d      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005224:	6862      	ldr	r2, [r4, #4]
 8005226:	6923      	ldr	r3, [r4, #16]
 8005228:	041b      	lsls	r3, r3, #16
 800522a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800522e:	68e2      	ldr	r2, [r4, #12]
 8005230:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005234:	68a2      	ldr	r2, [r4, #8]
 8005236:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800523a:	4a16      	ldr	r2, [pc, #88]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800523c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005240:	4a14      	ldr	r2, [pc, #80]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005248:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800524a:	f7fe fb01 	bl	8003850 <HAL_GetTick>
 800524e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005250:	4b10      	ldr	r3, [pc, #64]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005258:	f47f aefb 	bne.w	8005052 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800525c:	f7fe faf8 	bl	8003850 <HAL_GetTick>
 8005260:	1b80      	subs	r0, r0, r6
 8005262:	2864      	cmp	r0, #100	; 0x64
 8005264:	d9f4      	bls.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        return HAL_TIMEOUT;
 8005266:	2003      	movs	r0, #3
 8005268:	e6f7      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_PLLSAI_DISABLE();
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800526c:	6813      	ldr	r3, [r2, #0]
 800526e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005272:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005274:	f7fe faec 	bl	8003850 <HAL_GetTick>
 8005278:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005282:	d00d      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005284:	f7fe fae4 	bl	8003850 <HAL_GetTick>
 8005288:	1b40      	subs	r0, r0, r5
 800528a:	2864      	cmp	r0, #100	; 0x64
 800528c:	d9f5      	bls.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
        return HAL_TIMEOUT;
 800528e:	2003      	movs	r0, #3
 8005290:	e6e3      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800
 8005298:	40007000 	.word	0x40007000
 800529c:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80052a6:	d001      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x520>
 80052a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80052aa:	b122      	cbz	r2, 80052b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80052ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80052b0:	d01d      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x562>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052b4:	b9db      	cbnz	r3, 80052ee <HAL_RCCEx_PeriphCLKConfig+0x562>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052b6:	4a35      	ldr	r2, [pc, #212]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80052b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052bc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052c0:	6960      	ldr	r0, [r4, #20]
 80052c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052c6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80052ca:	69a0      	ldr	r0, [r4, #24]
 80052cc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80052d0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80052d4:	430b      	orrs	r3, r1
 80052d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052da:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80052de:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80052e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80052e4:	3901      	subs	r1, #1
 80052e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80052ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80052f4:	d003      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x572>
 80052f6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80052f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052fc:	d031      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f013 0f08 	tst.w	r3, #8
 8005304:	d019      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005306:	4a21      	ldr	r2, [pc, #132]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8005308:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800530c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005310:	6960      	ldr	r0, [r4, #20]
 8005312:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005316:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800531a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800531e:	430b      	orrs	r3, r1
 8005320:	69e1      	ldr	r1, [r4, #28]
 8005322:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005326:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800532a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800532e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005332:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005334:	430b      	orrs	r3, r1
 8005336:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800533a:	4a14      	ldr	r2, [pc, #80]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 800533c:	6813      	ldr	r3, [r2, #0]
 800533e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005342:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005344:	f7fe fa84 	bl	8003850 <HAL_GetTick>
 8005348:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800534a:	4b10      	ldr	r3, [pc, #64]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005352:	d119      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005354:	f7fe fa7c 	bl	8003850 <HAL_GetTick>
 8005358:	1b00      	subs	r0, r0, r4
 800535a:	2864      	cmp	r0, #100	; 0x64
 800535c:	d9f5      	bls.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x5be>
        return HAL_TIMEOUT;
 800535e:	2003      	movs	r0, #3
 8005360:	e67b      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005362:	4a0a      	ldr	r2, [pc, #40]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8005364:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005368:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800536c:	6965      	ldr	r5, [r4, #20]
 800536e:	6a23      	ldr	r3, [r4, #32]
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005376:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800537a:	4303      	orrs	r3, r0
 800537c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005380:	430b      	orrs	r3, r1
 8005382:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005386:	e7ba      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x572>
  return HAL_OK;
 8005388:	2000      	movs	r0, #0
 800538a:	e666      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800538c:	40023800 	.word	0x40023800

08005390 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005390:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005392:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8005396:	d004      	beq.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
  uint32_t frequency = 0;
 8005398:	2000      	movs	r0, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800539a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800539e:	d071      	beq.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      }
    }
  }

  return frequency;
}
 80053a0:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 80053a2:	4a70      	ldr	r2, [pc, #448]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80053a4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80053a8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 80053ac:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80053b0:	d064      	beq.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80053b2:	d826      	bhi.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80053b4:	b38a      	cbz	r2, 800541a <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 80053b6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80053ba:	d120      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80053bc:	4a69      	ldr	r2, [pc, #420]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80053be:	6852      	ldr	r2, [r2, #4]
 80053c0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80053c4:	d152      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053c6:	4a67      	ldr	r2, [pc, #412]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80053c8:	6850      	ldr	r0, [r2, #4]
 80053ca:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 80053ce:	4866      	ldr	r0, [pc, #408]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80053d0:	fbb0 fcfc 	udiv	ip, r0, ip
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80053d4:	4a63      	ldr	r2, [pc, #396]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80053d6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 80053da:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80053de:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80053e2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80053e6:	fb0c f000 	mul.w	r0, ip, r0
 80053ea:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80053ee:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80053f2:	f002 021f 	and.w	r2, r2, #31
 80053f6:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 80053f8:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 80053fc:	e7cd      	b.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 80053fe:	2000      	movs	r0, #0
 8005400:	e7cb      	b.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0xa>
 8005402:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8005406:	d106      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005408:	4a56      	ldr	r2, [pc, #344]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800540a:	6852      	ldr	r2, [r2, #4]
 800540c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8005410:	d136      	bne.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
          frequency = HSI_VALUE;
 8005412:	4855      	ldr	r0, [pc, #340]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8005414:	e7c1      	b.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 8005416:	2000      	movs	r0, #0
 8005418:	e7bf      	b.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800541a:	4a52      	ldr	r2, [pc, #328]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800541c:	6852      	ldr	r2, [r2, #4]
 800541e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8005422:	d11b      	bne.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005424:	4a4f      	ldr	r2, [pc, #316]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8005426:	6850      	ldr	r0, [r2, #4]
 8005428:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 800542c:	484e      	ldr	r0, [pc, #312]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800542e:	fbb0 fcfc 	udiv	ip, r0, ip
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005432:	4a4c      	ldr	r2, [pc, #304]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8005434:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005438:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800543c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8005440:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005444:	fb0c f000 	mul.w	r0, ip, r0
 8005448:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800544c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8005450:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8005454:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 8005456:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 800545a:	e79e      	b.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800545c:	4a41      	ldr	r2, [pc, #260]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800545e:	6850      	ldr	r0, [r2, #4]
 8005460:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 8005464:	4841      	ldr	r0, [pc, #260]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8005466:	fbb0 fcfc 	udiv	ip, r0, ip
 800546a:	e7e2      	b.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800546c:	4a3d      	ldr	r2, [pc, #244]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800546e:	6850      	ldr	r0, [r2, #4]
 8005470:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 8005474:	483d      	ldr	r0, [pc, #244]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8005476:	fbb0 fcfc 	udiv	ip, r0, ip
 800547a:	e7ab      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        frequency = EXTERNAL_CLOCK_VALUE;
 800547c:	483c      	ldr	r0, [pc, #240]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800547e:	e78c      	b.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          frequency = HSE_VALUE;
 8005480:	483a      	ldr	r0, [pc, #232]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8005482:	e78a      	b.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 8005484:	4b37      	ldr	r3, [pc, #220]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8005486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800548a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 800548e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005492:	d062      	beq.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8005494:	d825      	bhi.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005496:	b37b      	cbz	r3, 80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549c:	d120      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800549e:	4b31      	ldr	r3, [pc, #196]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80054a6:	d150      	bne.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054a8:	4b2e      	ldr	r3, [pc, #184]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80054aa:	6859      	ldr	r1, [r3, #4]
 80054ac:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80054b0:	482d      	ldr	r0, [pc, #180]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80054b2:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80054b6:	4b2b      	ldr	r3, [pc, #172]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80054b8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80054bc:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80054c0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80054c4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80054c8:	fb01 f000 	mul.w	r0, r1, r0
 80054cc:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80054d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80054da:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80054de:	4770      	bx	lr
 80054e0:	4770      	bx	lr
    switch (saiclocksource)
 80054e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054e6:	d106      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80054f0:	d135      	bne.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
          frequency = HSI_VALUE;
 80054f2:	481d      	ldr	r0, [pc, #116]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80054f4:	4770      	bx	lr
 80054f6:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054f8:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005500:	d11b      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005502:	4b18      	ldr	r3, [pc, #96]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8005504:	6859      	ldr	r1, [r3, #4]
 8005506:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800550a:	4817      	ldr	r0, [pc, #92]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800550c:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005510:	4b14      	ldr	r3, [pc, #80]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8005512:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005516:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800551a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800551e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005522:	fb01 f000 	mul.w	r0, r1, r0
 8005526:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800552a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800552e:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8005532:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8005534:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8005538:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800553a:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800553c:	6859      	ldr	r1, [r3, #4]
 800553e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005542:	480a      	ldr	r0, [pc, #40]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8005544:	fbb0 f1f1 	udiv	r1, r0, r1
 8005548:	e7e2      	b.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800554c:	6859      	ldr	r1, [r3, #4]
 800554e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005552:	4806      	ldr	r0, [pc, #24]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8005554:	fbb0 f1f1 	udiv	r1, r0, r1
 8005558:	e7ad      	b.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
        frequency = EXTERNAL_CLOCK_VALUE;
 800555a:	4805      	ldr	r0, [pc, #20]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800555c:	4770      	bx	lr
          frequency = HSE_VALUE;
 800555e:	4803      	ldr	r0, [pc, #12]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
  return frequency;
 8005560:	e71e      	b.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8005562:	bf00      	nop
 8005564:	40023800 	.word	0x40023800
 8005568:	00f42400 	.word	0x00f42400
 800556c:	017d7840 	.word	0x017d7840
 8005570:	01770000 	.word	0x01770000

08005574 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005574:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005576:	2400      	movs	r4, #0
 8005578:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800557a:	6384      	str	r4, [r0, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800557c:	6844      	ldr	r4, [r0, #4]
 800557e:	2c02      	cmp	r4, #2
 8005580:	bf18      	it	ne
 8005582:	2c00      	cmpne	r4, #0
 8005584:	d117      	bne.n	80055b6 <SAI_InitI2S+0x42>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005586:	2400      	movs	r4, #0
 8005588:	63c4      	str	r4, [r0, #60]	; 0x3c
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800558a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800558e:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005590:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005594:	6604      	str	r4, [r0, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005596:	2400      	movs	r4, #0
 8005598:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800559a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if((nbslot & 0x1) != 0 )
 800559c:	f013 0f01 	tst.w	r3, #1
 80055a0:	d14e      	bne.n	8005640 <SAI_InitI2S+0xcc>
  {
    return HAL_ERROR;
  }

  switch(protocol)
 80055a2:	b159      	cbz	r1, 80055bc <SAI_InitI2S+0x48>
 80055a4:	1e4c      	subs	r4, r1, #1
 80055a6:	2c01      	cmp	r4, #1
 80055a8:	d84d      	bhi.n	8005646 <SAI_InitI2S+0xd2>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
    break;
  case SAI_I2S_MSBJUSTIFIED :
  case SAI_I2S_LSBJUSTIFIED :
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80055aa:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 80055ae:	64c4      	str	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80055b0:	2400      	movs	r4, #0
 80055b2:	6504      	str	r4, [r0, #80]	; 0x50
    break;
 80055b4:	e007      	b.n	80055c6 <SAI_InitI2S+0x52>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80055b6:	2401      	movs	r4, #1
 80055b8:	63c4      	str	r4, [r0, #60]	; 0x3c
 80055ba:	e7e6      	b.n	800558a <SAI_InitI2S+0x16>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80055bc:	2400      	movs	r4, #0
 80055be:	64c4      	str	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80055c0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80055c4:	6504      	str	r4, [r0, #80]	; 0x50
  default :
    return HAL_ERROR;
  }

  /* Frame definition */
  switch(datasize)
 80055c6:	2a03      	cmp	r2, #3
 80055c8:	d83f      	bhi.n	800564a <SAI_InitI2S+0xd6>
 80055ca:	e8df f002 	tbb	[pc, r2]
 80055ce:	0f02      	.short	0x0f02
 80055d0:	2218      	.short	0x2218
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80055d2:	2480      	movs	r4, #128	; 0x80
 80055d4:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	015c      	lsls	r4, r3, #5
 80055da:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80055e0:	2340      	movs	r3, #64	; 0x40
 80055e2:	6583      	str	r3, [r0, #88]	; 0x58
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
    break;
  default :
    return HAL_ERROR;
  }
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 80055e4:	2902      	cmp	r1, #2
 80055e6:	d01e      	beq.n	8005626 <SAI_InitI2S+0xb2>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return HAL_OK;
 80055e8:	2000      	movs	r0, #0
 80055ea:	e02a      	b.n	8005642 <SAI_InitI2S+0xce>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80055ec:	2480      	movs	r4, #128	; 0x80
 80055ee:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	019d      	lsls	r5, r3, #6
 80055f4:	6405      	str	r5, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80055f6:	015b      	lsls	r3, r3, #5
 80055f8:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055fa:	6584      	str	r4, [r0, #88]	; 0x58
    break;
 80055fc:	e7f2      	b.n	80055e4 <SAI_InitI2S+0x70>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 80055fe:	24c0      	movs	r4, #192	; 0xc0
 8005600:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	019c      	lsls	r4, r3, #6
 8005606:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8005608:	015b      	lsls	r3, r3, #5
 800560a:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	6583      	str	r3, [r0, #88]	; 0x58
    break;
 8005610:	e7e8      	b.n	80055e4 <SAI_InitI2S+0x70>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8005612:	24e0      	movs	r4, #224	; 0xe0
 8005614:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	019c      	lsls	r4, r3, #6
 800561a:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800561c:	015b      	lsls	r3, r3, #5
 800561e:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	6583      	str	r3, [r0, #88]	; 0x58
    break;
 8005624:	e7de      	b.n	80055e4 <SAI_InitI2S+0x70>
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005626:	2a01      	cmp	r2, #1
 8005628:	d003      	beq.n	8005632 <SAI_InitI2S+0xbe>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800562a:	2a02      	cmp	r2, #2
 800562c:	d004      	beq.n	8005638 <SAI_InitI2S+0xc4>
  return HAL_OK;
 800562e:	2000      	movs	r0, #0
 8005630:	e007      	b.n	8005642 <SAI_InitI2S+0xce>
      hsai->SlotInit.FirstBitOffset = 16;
 8005632:	2310      	movs	r3, #16
 8005634:	6543      	str	r3, [r0, #84]	; 0x54
 8005636:	e7f8      	b.n	800562a <SAI_InitI2S+0xb6>
      hsai->SlotInit.FirstBitOffset = 8;
 8005638:	2308      	movs	r3, #8
 800563a:	6543      	str	r3, [r0, #84]	; 0x54
  return HAL_OK;
 800563c:	2000      	movs	r0, #0
 800563e:	e000      	b.n	8005642 <SAI_InitI2S+0xce>
    return HAL_ERROR;
 8005640:	2001      	movs	r0, #1
}
 8005642:	bc30      	pop	{r4, r5}
 8005644:	4770      	bx	lr
  switch(protocol)
 8005646:	2001      	movs	r0, #1
 8005648:	e7fb      	b.n	8005642 <SAI_InitI2S+0xce>
  switch(datasize)
 800564a:	2001      	movs	r0, #1
 800564c:	e7f9      	b.n	8005642 <SAI_InitI2S+0xce>

0800564e <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800564e:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005650:	2400      	movs	r4, #0
 8005652:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005654:	6384      	str	r4, [r0, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005656:	6844      	ldr	r4, [r0, #4]
 8005658:	2c02      	cmp	r4, #2
 800565a:	bf18      	it	ne
 800565c:	2c00      	cmpne	r4, #0
 800565e:	d11a      	bne.n	8005696 <SAI_InitPCM+0x48>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005660:	2401      	movs	r4, #1
 8005662:	63c4      	str	r4, [r0, #60]	; 0x3c
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005664:	2400      	movs	r4, #0
 8005666:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005668:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800566c:	64c5      	str	r5, [r0, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800566e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8005672:	6505      	str	r5, [r0, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005674:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005676:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005678:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800567c:	6604      	str	r4, [r0, #96]	; 0x60

  switch(protocol)
 800567e:	2903      	cmp	r1, #3
 8005680:	d00c      	beq.n	800569c <SAI_InitPCM+0x4e>
 8005682:	2904      	cmp	r1, #4
 8005684:	d12c      	bne.n	80056e0 <SAI_InitPCM+0x92>
  {
  case SAI_PCM_SHORT :
    hsai->FrameInit.ActiveFrameLength = 1;
 8005686:	2101      	movs	r1, #1
 8005688:	6441      	str	r1, [r0, #68]	; 0x44
    break;
  default :
    return HAL_ERROR;
  }

  switch(datasize)
 800568a:	2a03      	cmp	r2, #3
 800568c:	d82b      	bhi.n	80056e6 <SAI_InitPCM+0x98>
 800568e:	e8df f002 	tbb	[pc, r2]
 8005692:	1008      	.short	0x1008
 8005694:	1f17      	.short	0x1f17
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005696:	2400      	movs	r4, #0
 8005698:	63c4      	str	r4, [r0, #60]	; 0x3c
 800569a:	e7e3      	b.n	8005664 <SAI_InitPCM+0x16>
    hsai->FrameInit.ActiveFrameLength = 13;
 800569c:	210d      	movs	r1, #13
 800569e:	6441      	str	r1, [r0, #68]	; 0x44
    break;
 80056a0:	e7f3      	b.n	800568a <SAI_InitPCM+0x3c>
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80056a2:	2280      	movs	r2, #128	; 0x80
 80056a4:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80056aa:	2340      	movs	r3, #64	; 0x40
 80056ac:	6583      	str	r3, [r0, #88]	; 0x58
    break;
  default :
    return HAL_ERROR;
  }

  return HAL_OK;
 80056ae:	2000      	movs	r0, #0
    break;
 80056b0:	e017      	b.n	80056e2 <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80056b2:	2280      	movs	r2, #128	; 0x80
 80056b4:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 80056b6:	015b      	lsls	r3, r3, #5
 80056b8:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056ba:	6582      	str	r2, [r0, #88]	; 0x58
  return HAL_OK;
 80056bc:	2000      	movs	r0, #0
    break;
 80056be:	e010      	b.n	80056e2 <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 80056c0:	22c0      	movs	r2, #192	; 0xc0
 80056c2:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 80056c4:	015b      	lsls	r3, r3, #5
 80056c6:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 80056cc:	2000      	movs	r0, #0
    break;
 80056ce:	e008      	b.n	80056e2 <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 80056d0:	22e0      	movs	r2, #224	; 0xe0
 80056d2:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 80056d4:	015b      	lsls	r3, r3, #5
 80056d6:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056d8:	2380      	movs	r3, #128	; 0x80
 80056da:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 80056dc:	2000      	movs	r0, #0
    break;
 80056de:	e000      	b.n	80056e2 <SAI_InitPCM+0x94>
  switch(protocol)
 80056e0:	2001      	movs	r0, #1
}
 80056e2:	bc30      	pop	{r4, r5}
 80056e4:	4770      	bx	lr
  switch(datasize)
 80056e6:	2001      	movs	r0, #1
 80056e8:	e7fb      	b.n	80056e2 <SAI_InitPCM+0x94>

080056ea <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
 80056ea:	2901      	cmp	r1, #1
 80056ec:	d00a      	beq.n	8005704 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80056ee:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80056f0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80056f2:	2a08      	cmp	r2, #8
 80056f4:	d008      	beq.n	8005708 <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80056f6:	6842      	ldr	r2, [r0, #4]
 80056f8:	3a02      	subs	r2, #2
 80056fa:	2a01      	cmp	r2, #1
 80056fc:	d90c      	bls.n	8005718 <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80056fe:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8005702:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 8005704:	2309      	movs	r3, #9
 8005706:	e7f3      	b.n	80056f0 <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005708:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800570a:	2a01      	cmp	r2, #1
 800570c:	bf18      	it	ne
 800570e:	2a03      	cmpne	r2, #3
 8005710:	d1f1      	bne.n	80056f6 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 8005712:	f043 0310 	orr.w	r3, r3, #16
 8005716:	e7ee      	b.n	80056f6 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005718:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 800571c:	4770      	bx	lr
	...

08005720 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005720:	4b0e      	ldr	r3, [pc, #56]	; (800575c <SAI_Disable+0x3c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a0e      	ldr	r2, [pc, #56]	; (8005760 <SAI_Disable+0x40>)
 8005726:	fba2 2303 	umull	r2, r3, r2, r3
 800572a:	0b1b      	lsrs	r3, r3, #12
 800572c:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800572e:	6801      	ldr	r1, [r0, #0]
 8005730:	680a      	ldr	r2, [r1, #0]
 8005732:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005736:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005738:	461a      	mov	r2, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b132      	cbz	r2, 800574c <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800573e:	6802      	ldr	r2, [r0, #0]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005746:	d1f7      	bne.n	8005738 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005748:	2000      	movs	r0, #0

  return status;
}
 800574a:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800574c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005754:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005758:	2003      	movs	r0, #3
      break;
 800575a:	4770      	bx	lr
 800575c:	2000000c 	.word	0x2000000c
 8005760:	95cbec1b 	.word	0x95cbec1b

08005764 <HAL_SAI_Init>:
  if(hsai == NULL)
 8005764:	2800      	cmp	r0, #0
 8005766:	f000 80eb 	beq.w	8005940 <HAL_SAI_Init+0x1dc>
{
 800576a:	b538      	push	{r3, r4, r5, lr}
 800576c:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 800576e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80b6 	beq.w	80058e4 <HAL_SAI_Init+0x180>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005778:	2302      	movs	r3, #2
 800577a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 800577e:	4620      	mov	r0, r4
 8005780:	f7ff ffce 	bl	8005720 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8005784:	68e3      	ldr	r3, [r4, #12]
 8005786:	2b01      	cmp	r3, #1
 8005788:	f000 80b1 	beq.w	80058ee <HAL_SAI_Init+0x18a>
 800578c:	2b02      	cmp	r3, #2
 800578e:	f040 80b0 	bne.w	80058f2 <HAL_SAI_Init+0x18e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005792:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 8005794:	68a3      	ldr	r3, [r4, #8]
 8005796:	2b02      	cmp	r3, #2
 8005798:	f000 80b5 	beq.w	8005906 <HAL_SAI_Init+0x1a2>
 800579c:	2b03      	cmp	r3, #3
 800579e:	f000 80ad 	beq.w	80058fc <HAL_SAI_Init+0x198>
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	f000 80a7 	beq.w	80058f6 <HAL_SAI_Init+0x192>
 80057a8:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	4865      	ldr	r0, [pc, #404]	; (8005944 <HAL_SAI_Init+0x1e0>)
 80057ae:	4966      	ldr	r1, [pc, #408]	; (8005948 <HAL_SAI_Init+0x1e4>)
 80057b0:	428b      	cmp	r3, r1
 80057b2:	bf18      	it	ne
 80057b4:	4283      	cmpne	r3, r0
 80057b6:	f040 80a9 	bne.w	800590c <HAL_SAI_Init+0x1a8>
    SAI1->GCR = tmpregisterGCR;
 80057ba:	4b64      	ldr	r3, [pc, #400]	; (800594c <HAL_SAI_Init+0x1e8>)
 80057bc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80057c0:	69e3      	ldr	r3, [r4, #28]
 80057c2:	b323      	cbz	r3, 800580e <HAL_SAI_Init+0xaa>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	495f      	ldr	r1, [pc, #380]	; (8005944 <HAL_SAI_Init+0x1e0>)
 80057c8:	4a5f      	ldr	r2, [pc, #380]	; (8005948 <HAL_SAI_Init+0x1e4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	bf18      	it	ne
 80057ce:	428b      	cmpne	r3, r1
 80057d0:	f000 80a0 	beq.w	8005914 <HAL_SAI_Init+0x1b0>
    uint32_t freq = 0;
 80057d4:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	495d      	ldr	r1, [pc, #372]	; (8005950 <HAL_SAI_Init+0x1ec>)
 80057da:	4a5e      	ldr	r2, [pc, #376]	; (8005954 <HAL_SAI_Init+0x1f0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	bf18      	it	ne
 80057e0:	428b      	cmpne	r3, r1
 80057e2:	f000 809c 	beq.w	800591e <HAL_SAI_Init+0x1ba>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80057e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057ea:	0040      	lsls	r0, r0, #1
 80057ec:	69e3      	ldr	r3, [r4, #28]
 80057ee:	025b      	lsls	r3, r3, #9
 80057f0:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 80057f4:	4b58      	ldr	r3, [pc, #352]	; (8005958 <HAL_SAI_Init+0x1f4>)
 80057f6:	fba3 2300 	umull	r2, r3, r3, r0
 80057fa:	08db      	lsrs	r3, r3, #3
 80057fc:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 80057fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005802:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8005806:	2808      	cmp	r0, #8
 8005808:	d901      	bls.n	800580e <HAL_SAI_Init+0xaa>
      hsai->Init.Mckdiv+= 1;
 800580a:	3301      	adds	r3, #1
 800580c:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800580e:	6863      	ldr	r3, [r4, #4]
 8005810:	2b02      	cmp	r3, #2
 8005812:	bf18      	it	ne
 8005814:	2b00      	cmpne	r3, #0
 8005816:	f040 808a 	bne.w	800592e <HAL_SAI_Init+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800581a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	f000 8083 	beq.w	8005928 <HAL_SAI_Init+0x1c4>
 8005822:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005826:	6821      	ldr	r1, [r4, #0]
 8005828:	680b      	ldr	r3, [r1, #0]
 800582a:	4a4c      	ldr	r2, [pc, #304]	; (800595c <HAL_SAI_Init+0x1f8>)
 800582c:	401a      	ands	r2, r3
 800582e:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	6811      	ldr	r1, [r2, #0]
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005838:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800583a:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800583c:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800583e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005840:	4303      	orrs	r3, r0
 8005842:	ea43 030c 	orr.w	r3, r3, ip
                        ckstr_bits | syncen_bits |                               \
 8005846:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005848:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800584a:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800584c:	6920      	ldr	r0, [r4, #16]
 800584e:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005850:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005852:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005854:	6a20      	ldr	r0, [r4, #32]
 8005856:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800585a:	430b      	orrs	r3, r1
 800585c:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	6851      	ldr	r1, [r2, #4]
 8005862:	4b3f      	ldr	r3, [pc, #252]	; (8005960 <HAL_SAI_Init+0x1fc>)
 8005864:	400b      	ands	r3, r1
 8005866:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005868:	6821      	ldr	r1, [r4, #0]
 800586a:	684a      	ldr	r2, [r1, #4]
 800586c:	69a3      	ldr	r3, [r4, #24]
 800586e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005870:	4303      	orrs	r3, r0
 8005872:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005874:	4303      	orrs	r3, r0
 8005876:	4313      	orrs	r3, r2
 8005878:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800587a:	6822      	ldr	r2, [r4, #0]
 800587c:	6891      	ldr	r1, [r2, #8]
 800587e:	4b39      	ldr	r3, [pc, #228]	; (8005964 <HAL_SAI_Init+0x200>)
 8005880:	400b      	ands	r3, r1
 8005882:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005884:	6820      	ldr	r0, [r4, #0]
 8005886:	6882      	ldr	r2, [r0, #8]
 8005888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800588a:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 800588c:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800588e:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 8005890:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8005892:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8005894:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8005896:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005898:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800589a:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 800589c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80058a0:	4313      	orrs	r3, r2
 80058a2:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	68d3      	ldr	r3, [r2, #12]
 80058a8:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80058ac:	f023 030f 	bic.w	r3, r3, #15
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	0c1b      	lsrs	r3, r3, #16
 80058b4:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80058b6:	6820      	ldr	r0, [r4, #0]
 80058b8:	68c2      	ldr	r2, [r0, #12]
 80058ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058bc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80058be:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80058c0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80058c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80058c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80058c8:	3901      	subs	r1, #1
 80058ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80058d2:	2000      	movs	r0, #0
 80058d4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 80058d8:	2301      	movs	r3, #1
 80058da:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80058de:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
    hsai->Lock = HAL_UNLOCKED;
 80058e4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80058e8:	f002 f958 	bl	8007b9c <HAL_SAI_MspInit>
 80058ec:	e744      	b.n	8005778 <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80058ee:	2210      	movs	r2, #16
 80058f0:	e750      	b.n	8005794 <HAL_SAI_Init+0x30>
  switch(hsai->Init.SynchroExt)
 80058f2:	2200      	movs	r2, #0
 80058f4:	e74e      	b.n	8005794 <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80058f6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80058fa:	e756      	b.n	80057aa <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80058fc:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005900:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8005904:	e751      	b.n	80057aa <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005906:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800590a:	e74e      	b.n	80057aa <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <HAL_SAI_Init+0x1e8>)
 800590e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005912:	e755      	b.n	80057c0 <HAL_SAI_Init+0x5c>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005914:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005918:	f7ff fd3a 	bl	8005390 <HAL_RCCEx_GetPeriphCLKFreq>
 800591c:	e75b      	b.n	80057d6 <HAL_SAI_Init+0x72>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800591e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005922:	f7ff fd35 	bl	8005390 <HAL_RCCEx_GetPeriphCLKFreq>
 8005926:	e75e      	b.n	80057e6 <HAL_SAI_Init+0x82>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005928:	f04f 0c00 	mov.w	ip, #0
 800592c:	e77b      	b.n	8005826 <HAL_SAI_Init+0xc2>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800592e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d002      	beq.n	800593a <HAL_SAI_Init+0x1d6>
 8005934:	f04f 0c00 	mov.w	ip, #0
 8005938:	e775      	b.n	8005826 <HAL_SAI_Init+0xc2>
 800593a:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800593e:	e772      	b.n	8005826 <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 8005940:	2001      	movs	r0, #1
}
 8005942:	4770      	bx	lr
 8005944:	40015804 	.word	0x40015804
 8005948:	40015824 	.word	0x40015824
 800594c:	40015000 	.word	0x40015000
 8005950:	40015c04 	.word	0x40015c04
 8005954:	40015c24 	.word	0x40015c24
 8005958:	cccccccd 	.word	0xcccccccd
 800595c:	ff05c010 	.word	0xff05c010
 8005960:	ffff1ff0 	.word	0xffff1ff0
 8005964:	fff88000 	.word	0xfff88000

08005968 <HAL_SAI_InitProtocol>:
{
 8005968:	b510      	push	{r4, lr}
 800596a:	4604      	mov	r4, r0
  switch(protocol)
 800596c:	2902      	cmp	r1, #2
 800596e:	d906      	bls.n	800597e <HAL_SAI_InitProtocol+0x16>
 8005970:	1ec8      	subs	r0, r1, #3
 8005972:	2801      	cmp	r0, #1
 8005974:	d80b      	bhi.n	800598e <HAL_SAI_InitProtocol+0x26>
    status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005976:	4620      	mov	r0, r4
 8005978:	f7ff fe69 	bl	800564e <SAI_InitPCM>
    break;
 800597c:	e001      	b.n	8005982 <HAL_SAI_InitProtocol+0x1a>
    status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800597e:	f7ff fdf9 	bl	8005574 <SAI_InitI2S>
  if(status == HAL_OK)
 8005982:	b100      	cbz	r0, 8005986 <HAL_SAI_InitProtocol+0x1e>
}
 8005984:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 8005986:	4620      	mov	r0, r4
 8005988:	f7ff feec 	bl	8005764 <HAL_SAI_Init>
 800598c:	e7fa      	b.n	8005984 <HAL_SAI_InitProtocol+0x1c>
  switch(protocol)
 800598e:	2001      	movs	r0, #1
 8005990:	e7f8      	b.n	8005984 <HAL_SAI_InitProtocol+0x1c>
	...

08005994 <HAL_SAI_Transmit_DMA>:
{
 8005994:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 8005996:	2a00      	cmp	r2, #0
 8005998:	bf18      	it	ne
 800599a:	2900      	cmpne	r1, #0
 800599c:	d04c      	beq.n	8005a38 <HAL_SAI_Transmit_DMA+0xa4>
 800599e:	4604      	mov	r4, r0
 80059a0:	4613      	mov	r3, r2
  if(hsai->State == HAL_SAI_STATE_READY)
 80059a2:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 80059a6:	b2ed      	uxtb	r5, r5
 80059a8:	2d01      	cmp	r5, #1
 80059aa:	d148      	bne.n	8005a3e <HAL_SAI_Transmit_DMA+0xaa>
    __HAL_LOCK(hsai);
 80059ac:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 80059b0:	2a01      	cmp	r2, #1
 80059b2:	d046      	beq.n	8005a42 <HAL_SAI_Transmit_DMA+0xae>
 80059b4:	2201      	movs	r2, #1
 80059b6:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 80059ba:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 80059bc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 80059c0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80059ca:	2212      	movs	r2, #18
 80059cc:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80059d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80059d2:	491d      	ldr	r1, [pc, #116]	; (8005a48 <HAL_SAI_Transmit_DMA+0xb4>)
 80059d4:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80059d6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80059d8:	491c      	ldr	r1, [pc, #112]	; (8005a4c <HAL_SAI_Transmit_DMA+0xb8>)
 80059da:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80059dc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80059de:	491c      	ldr	r1, [pc, #112]	; (8005a50 <HAL_SAI_Transmit_DMA+0xbc>)
 80059e0:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80059e2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80059e4:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80059ec:	321c      	adds	r2, #28
 80059ee:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80059f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80059f2:	f7fe f895 	bl	8003b20 <HAL_DMA_Start_IT>
 80059f6:	4606      	mov	r6, r0
 80059f8:	b118      	cbz	r0, 8005a02 <HAL_SAI_Transmit_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 80059fa:	2300      	movs	r3, #0
 80059fc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8005a00:	e01b      	b.n	8005a3a <HAL_SAI_Transmit_DMA+0xa6>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005a0a:	d103      	bne.n	8005a14 <HAL_SAI_Transmit_DMA+0x80>
      __HAL_SAI_ENABLE(hsai);
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a12:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005a14:	2100      	movs	r1, #0
 8005a16:	4620      	mov	r0, r4
 8005a18:	f7ff fe67 	bl	80056ea <SAI_InterruptFlag>
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	6913      	ldr	r3, [r2, #16]
 8005a20:	4303      	orrs	r3, r0
 8005a22:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005a24:	6822      	ldr	r2, [r4, #0]
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a2c:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8005a34:	4635      	mov	r5, r6
 8005a36:	e000      	b.n	8005a3a <HAL_SAI_Transmit_DMA+0xa6>
    return  HAL_ERROR;
 8005a38:	2501      	movs	r5, #1
}
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8005a3e:	2502      	movs	r5, #2
 8005a40:	e7fb      	b.n	8005a3a <HAL_SAI_Transmit_DMA+0xa6>
    __HAL_LOCK(hsai);
 8005a42:	2502      	movs	r5, #2
 8005a44:	e7f9      	b.n	8005a3a <HAL_SAI_Transmit_DMA+0xa6>
 8005a46:	bf00      	nop
 8005a48:	08005a91 	.word	0x08005a91
 8005a4c:	08005a55 	.word	0x08005a55
 8005a50:	08005a9d 	.word	0x08005a9d

08005a54 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005a54:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8005a56:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8005a58:	6803      	ldr	r3, [r0, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005a60:	d112      	bne.n	8005a88 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 8005a62:	2100      	movs	r1, #0
 8005a64:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	6813      	ldr	r3, [r2, #0]
 8005a6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a70:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005a72:	4620      	mov	r0, r4
 8005a74:	f7ff fe39 	bl	80056ea <SAI_InterruptFlag>
 8005a78:	6822      	ldr	r2, [r4, #0]
 8005a7a:	6913      	ldr	r3, [r2, #16]
 8005a7c:	ea23 0300 	bic.w	r3, r3, r0
 8005a80:	6113      	str	r3, [r2, #16]

    hsai->State= HAL_SAI_STATE_READY;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f001 fd0b 	bl	80074a4 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005a8e:	bd10      	pop	{r4, pc}

08005a90 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a90:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005a92:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005a94:	f001 fcfa 	bl	800748c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005a98:	bd08      	pop	{r3, pc}

08005a9a <HAL_SAI_ErrorCallback>:
}
 8005a9a:	4770      	bx	lr

08005a9c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a9e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005aa0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005aac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d007      	beq.n	8005ac4 <SAI_DMAError+0x28>
 8005ab4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d003      	beq.n	8005ac4 <SAI_DMAError+0x28>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005abc:	4620      	mov	r0, r4
 8005abe:	f7ff ffec 	bl	8005a9a <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005ac2:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005ac4:	6822      	ldr	r2, [r4, #0]
 8005ac6:	6813      	ldr	r3, [r2, #0]
 8005ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005acc:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f7ff fe26 	bl	8005720 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8005ae0:	e7ec      	b.n	8005abc <SAI_DMAError+0x20>

08005ae2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	4688      	mov	r8, r1
 8005aea:	4617      	mov	r7, r2
 8005aec:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aee:	6834      	ldr	r4, [r6, #0]
 8005af0:	68a4      	ldr	r4, [r4, #8]
 8005af2:	ea38 0304 	bics.w	r3, r8, r4
 8005af6:	bf0c      	ite	eq
 8005af8:	f04f 0c01 	moveq.w	ip, #1
 8005afc:	f04f 0c00 	movne.w	ip, #0
 8005b00:	45bc      	cmp	ip, r7
 8005b02:	d037      	beq.n	8005b74 <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b04:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005b08:	d0f1      	beq.n	8005aee <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005b0a:	f7fd fea1 	bl	8003850 <HAL_GetTick>
 8005b0e:	9b06      	ldr	r3, [sp, #24]
 8005b10:	1ac0      	subs	r0, r0, r3
 8005b12:	42a8      	cmp	r0, r5
 8005b14:	d201      	bcs.n	8005b1a <SPI_WaitFlagStateUntilTimeout+0x38>
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	d1e9      	bne.n	8005aee <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b1a:	6832      	ldr	r2, [r6, #0]
 8005b1c:	6853      	ldr	r3, [r2, #4]
 8005b1e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005b22:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b24:	6873      	ldr	r3, [r6, #4]
 8005b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b2a:	d00b      	beq.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x62>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b2c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b32:	d014      	beq.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0x7c>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b40:	2003      	movs	r0, #3
 8005b42:	e018      	b.n	8005b76 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b44:	68b3      	ldr	r3, [r6, #8]
 8005b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4a:	bf18      	it	ne
 8005b4c:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8005b50:	d1ec      	bne.n	8005b2c <SPI_WaitFlagStateUntilTimeout+0x4a>
          __HAL_SPI_DISABLE(hspi);
 8005b52:	6832      	ldr	r2, [r6, #0]
 8005b54:	6813      	ldr	r3, [r2, #0]
 8005b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	e7e6      	b.n	8005b2c <SPI_WaitFlagStateUntilTimeout+0x4a>
          SPI_RESET_CRC(hspi);
 8005b5e:	6832      	ldr	r2, [r6, #0]
 8005b60:	6813      	ldr	r3, [r2, #0]
 8005b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	6832      	ldr	r2, [r6, #0]
 8005b6a:	6813      	ldr	r3, [r2, #0]
 8005b6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	e7df      	b.n	8005b34 <SPI_WaitFlagStateUntilTimeout+0x52>
      }
    }
  }

  return HAL_OK;
 8005b74:	2000      	movs	r0, #0
}
 8005b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b7a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b7e:	4681      	mov	r9, r0
 8005b80:	460f      	mov	r7, r1
 8005b82:	4616      	mov	r6, r2
 8005b84:	4698      	mov	r8, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8005b86:	e002      	b.n	8005b8e <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b88:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005b8c:	d10d      	bne.n	8005baa <SPI_WaitFifoStateUntilTimeout+0x30>
  while ((hspi->Instance->SR & Fifo) != State)
 8005b8e:	f8d9 5000 	ldr.w	r5, [r9]
 8005b92:	68ac      	ldr	r4, [r5, #8]
 8005b94:	ea04 0c07 	and.w	ip, r4, r7
 8005b98:	45b4      	cmp	ip, r6
 8005b9a:	d043      	beq.n	8005c24 <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b9c:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 8005ba0:	bf08      	it	eq
 8005ba2:	2e00      	cmpeq	r6, #0
 8005ba4:	d1f0      	bne.n	8005b88 <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005ba6:	7b2b      	ldrb	r3, [r5, #12]
 8005ba8:	e7ee      	b.n	8005b88 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005baa:	f7fd fe51 	bl	8003850 <HAL_GetTick>
 8005bae:	9b08      	ldr	r3, [sp, #32]
 8005bb0:	1ac0      	subs	r0, r0, r3
 8005bb2:	4540      	cmp	r0, r8
 8005bb4:	d202      	bcs.n	8005bbc <SPI_WaitFifoStateUntilTimeout+0x42>
 8005bb6:	f1b8 0f00 	cmp.w	r8, #0
 8005bba:	d1e8      	bne.n	8005b8e <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8005bc0:	6853      	ldr	r3, [r2, #4]
 8005bc2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005bc6:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd0:	d00c      	beq.n	8005bec <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd2:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8005bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bda:	d016      	beq.n	8005c0a <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005be2:	2300      	movs	r3, #0
 8005be4:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005be8:	2003      	movs	r0, #3
 8005bea:	e01c      	b.n	8005c26 <SPI_WaitFifoStateUntilTimeout+0xac>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf4:	bf18      	it	ne
 8005bf6:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8005bfa:	d1ea      	bne.n	8005bd2 <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 8005bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8005c00:	6813      	ldr	r3, [r2, #0]
 8005c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	e7e3      	b.n	8005bd2 <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 8005c0a:	f8d9 2000 	ldr.w	r2, [r9]
 8005c0e:	6813      	ldr	r3, [r2, #0]
 8005c10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	f8d9 2000 	ldr.w	r2, [r9]
 8005c1a:	6813      	ldr	r3, [r2, #0]
 8005c1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e7db      	b.n	8005bdc <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 8005c24:	2000      	movs	r0, #0
}
 8005c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005c2a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c2a:	b570      	push	{r4, r5, r6, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	4604      	mov	r4, r0
 8005c30:	460d      	mov	r5, r1
 8005c32:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c34:	9200      	str	r2, [sp, #0]
 8005c36:	460b      	mov	r3, r1
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c3e:	f7ff ff9c 	bl	8005b7a <SPI_WaitFifoStateUntilTimeout>
 8005c42:	b9b0      	cbnz	r0, 8005c72 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c44:	9600      	str	r6, [sp, #0]
 8005c46:	462b      	mov	r3, r5
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2180      	movs	r1, #128	; 0x80
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f7ff ff48 	bl	8005ae2 <SPI_WaitFlagStateUntilTimeout>
 8005c52:	b9a8      	cbnz	r0, 8005c80 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c54:	9600      	str	r6, [sp, #0]
 8005c56:	462b      	mov	r3, r5
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7ff ff8b 	bl	8005b7a <SPI_WaitFifoStateUntilTimeout>
 8005c64:	b150      	cbz	r0, 8005c7c <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c66:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005c68:	f043 0320 	orr.w	r3, r3, #32
 8005c6c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c6e:	2003      	movs	r0, #3
 8005c70:	e004      	b.n	8005c7c <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c72:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005c74:	f043 0320 	orr.w	r3, r3, #32
 8005c78:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c7a:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8005c7c:	b002      	add	sp, #8
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c80:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005c82:	f043 0320 	orr.w	r3, r3, #32
 8005c86:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c88:	2003      	movs	r0, #3
 8005c8a:	e7f7      	b.n	8005c7c <SPI_EndRxTxTransaction+0x52>

08005c8c <HAL_SPI_Init>:
  if (hspi == NULL)
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d058      	beq.n	8005d42 <HAL_SPI_Init+0xb6>
{
 8005c90:	b510      	push	{r4, lr}
 8005c92:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c98:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d045      	beq.n	8005d2c <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	6813      	ldr	r3, [r2, #0]
 8005caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cae:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cb0:	68e3      	ldr	r3, [r4, #12]
 8005cb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cb6:	d93e      	bls.n	8005d36 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cb8:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cbe:	bf18      	it	ne
 8005cc0:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8005cc4:	d001      	beq.n	8005cca <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005cca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005ccc:	b921      	cbnz	r1, 8005cd8 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd2:	d933      	bls.n	8005d3c <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005cd8:	6863      	ldr	r3, [r4, #4]
 8005cda:	68a1      	ldr	r1, [r4, #8]
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	6921      	ldr	r1, [r4, #16]
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6961      	ldr	r1, [r4, #20]
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	69a1      	ldr	r1, [r4, #24]
 8005ce8:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8005cec:	430b      	orrs	r3, r1
 8005cee:	69e1      	ldr	r1, [r4, #28]
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6a21      	ldr	r1, [r4, #32]
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005cf8:	6821      	ldr	r1, [r4, #0]
 8005cfa:	4303      	orrs	r3, r0
 8005cfc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005cfe:	8b63      	ldrh	r3, [r4, #26]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d06:	430b      	orrs	r3, r1
 8005d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	68e1      	ldr	r1, [r4, #12]
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	6821      	ldr	r1, [r4, #0]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	69d3      	ldr	r3, [r2, #28]
 8005d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d1e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d20:	2000      	movs	r0, #0
 8005d22:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8005d2a:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005d2c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005d30:	f002 f856 	bl	8007de0 <HAL_SPI_MspInit>
 8005d34:	e7b4      	b.n	8005ca0 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d3a:	e7be      	b.n	8005cba <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d40:	e7ca      	b.n	8005cd8 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8005d42:	2001      	movs	r0, #1
}
 8005d44:	4770      	bx	lr

08005d46 <HAL_SPI_TransmitReceive>:
{
 8005d46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d4a:	461f      	mov	r7, r3
 8005d4c:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8005d4e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	f000 8161 	beq.w	800601a <HAL_SPI_TransmitReceive+0x2d4>
 8005d58:	4604      	mov	r4, r0
 8005d5a:	4688      	mov	r8, r1
 8005d5c:	4691      	mov	r9, r2
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005d64:	f7fd fd74 	bl	8003850 <HAL_GetTick>
 8005d68:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8005d6a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005d6e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8005d70:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d00a      	beq.n	8005d8c <HAL_SPI_TransmitReceive+0x46>
 8005d76:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005d7a:	f040 8137 	bne.w	8005fec <HAL_SPI_TransmitReceive+0x2a6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d7e:	68a2      	ldr	r2, [r4, #8]
 8005d80:	2a00      	cmp	r2, #0
 8005d82:	f040 813c 	bne.w	8005ffe <HAL_SPI_TransmitReceive+0x2b8>
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	f040 813b 	bne.w	8006002 <HAL_SPI_TransmitReceive+0x2bc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d8c:	f1b9 0f00 	cmp.w	r9, #0
 8005d90:	bf18      	it	ne
 8005d92:	f1b8 0f00 	cmpne.w	r8, #0
 8005d96:	f000 8136 	beq.w	8006006 <HAL_SPI_TransmitReceive+0x2c0>
 8005d9a:	2f00      	cmp	r7, #0
 8005d9c:	f000 8135 	beq.w	800600a <HAL_SPI_TransmitReceive+0x2c4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005da0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d002      	beq.n	8005db0 <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005daa:	2305      	movs	r3, #5
 8005dac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005db4:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005db8:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005dbc:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dc0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005dc4:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005dc6:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8005dc8:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005dca:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005dcc:	68e3      	ldr	r3, [r4, #12]
 8005dce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dd2:	d801      	bhi.n	8005dd8 <HAL_SPI_TransmitReceive+0x92>
 8005dd4:	2f01      	cmp	r7, #1
 8005dd6:	d923      	bls.n	8005e20 <HAL_SPI_TransmitReceive+0xda>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	6853      	ldr	r3, [r2, #4]
 8005ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005de0:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005dea:	d103      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0xae>
    __HAL_SPI_ENABLE(hspi);
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005df4:	68e3      	ldr	r3, [r4, #12]
 8005df6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dfa:	d958      	bls.n	8005eae <HAL_SPI_TransmitReceive+0x168>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dfc:	6863      	ldr	r3, [r4, #4]
 8005dfe:	b10b      	cbz	r3, 8005e04 <HAL_SPI_TransmitReceive+0xbe>
 8005e00:	2f01      	cmp	r7, #1
 8005e02:	d10b      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	8812      	ldrh	r2, [r2, #0]
 8005e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e0e:	3302      	adds	r3, #2
 8005e10:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005e12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005e1c:	2701      	movs	r7, #1
 8005e1e:	e031      	b.n	8005e84 <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e20:	6822      	ldr	r2, [r4, #0]
 8005e22:	6853      	ldr	r3, [r2, #4]
 8005e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e28:	6053      	str	r3, [r2, #4]
 8005e2a:	e7da      	b.n	8005de2 <HAL_SPI_TransmitReceive+0x9c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e2e:	8812      	ldrh	r2, [r2, #0]
 8005e30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e34:	3302      	adds	r3, #2
 8005e36:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005e38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005e42:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	f012 0f01 	tst.w	r2, #1
 8005e4c:	d011      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x12c>
 8005e4e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005e52:	b292      	uxth	r2, r2
 8005e54:	b16a      	cbz	r2, 8005e72 <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e5e:	3302      	adds	r3, #2
 8005e60:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005e62:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005e70:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e72:	f7fd fced 	bl	8003850 <HAL_GetTick>
 8005e76:	1b83      	subs	r3, r0, r6
 8005e78:	42ab      	cmp	r3, r5
 8005e7a:	d303      	bcc.n	8005e84 <HAL_SPI_TransmitReceive+0x13e>
 8005e7c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005e80:	f040 80c5 	bne.w	800600e <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	b92b      	cbnz	r3, 8005e96 <HAL_SPI_TransmitReceive+0x150>
 8005e8a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80a1 	beq.w	8005fd8 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	f012 0f02 	tst.w	r2, #2
 8005e9e:	d0d1      	beq.n	8005e44 <HAL_SPI_TransmitReceive+0xfe>
 8005ea0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005ea2:	b292      	uxth	r2, r2
 8005ea4:	2a00      	cmp	r2, #0
 8005ea6:	d0cd      	beq.n	8005e44 <HAL_SPI_TransmitReceive+0xfe>
 8005ea8:	2f00      	cmp	r7, #0
 8005eaa:	d0cb      	beq.n	8005e44 <HAL_SPI_TransmitReceive+0xfe>
 8005eac:	e7be      	b.n	8005e2c <HAL_SPI_TransmitReceive+0xe6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eae:	6863      	ldr	r3, [r4, #4]
 8005eb0:	b10b      	cbz	r3, 8005eb6 <HAL_SPI_TransmitReceive+0x170>
 8005eb2:	2f01      	cmp	r7, #1
 8005eb4:	d10f      	bne.n	8005ed6 <HAL_SPI_TransmitReceive+0x190>
      if (hspi->TxXferCount > 1U)
 8005eb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d90d      	bls.n	8005eda <HAL_SPI_TransmitReceive+0x194>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ebe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	8812      	ldrh	r2, [r2, #0]
 8005ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ec8:	3302      	adds	r3, #2
 8005eca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005ecc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b02      	subs	r3, #2
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005ed6:	2701      	movs	r7, #1
 8005ed8:	e049      	b.n	8005f6e <HAL_SPI_TransmitReceive+0x228>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005eda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	7812      	ldrb	r2, [r2, #0]
 8005ee0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005ee2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005ee8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005ef2:	e7f0      	b.n	8005ed6 <HAL_SPI_TransmitReceive+0x190>
        if (hspi->TxXferCount > 1U)
 8005ef4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005ef6:	b292      	uxth	r2, r2
 8005ef8:	2a01      	cmp	r2, #1
 8005efa:	d90c      	bls.n	8005f16 <HAL_SPI_TransmitReceive+0x1d0>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005efe:	8812      	ldrh	r2, [r2, #0]
 8005f00:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f04:	3302      	adds	r3, #2
 8005f06:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b02      	subs	r3, #2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005f12:	2700      	movs	r7, #0
 8005f14:	e03d      	b.n	8005f92 <HAL_SPI_TransmitReceive+0x24c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8005f1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f1e:	3301      	adds	r3, #1
 8005f20:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005f22:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005f2c:	2700      	movs	r7, #0
 8005f2e:	e030      	b.n	8005f92 <HAL_SPI_TransmitReceive+0x24c>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	6853      	ldr	r3, [r2, #4]
 8005f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f38:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005f3a:	2701      	movs	r7, #1
 8005f3c:	e00d      	b.n	8005f5a <HAL_SPI_TransmitReceive+0x214>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f40:	7b1b      	ldrb	r3, [r3, #12]
 8005f42:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8005f44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f46:	3301      	adds	r3, #1
 8005f48:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005f4a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005f58:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f5a:	f7fd fc79 	bl	8003850 <HAL_GetTick>
 8005f5e:	1b80      	subs	r0, r0, r6
 8005f60:	42a8      	cmp	r0, r5
 8005f62:	d302      	bcc.n	8005f6a <HAL_SPI_TransmitReceive+0x224>
 8005f64:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005f68:	d153      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x2cc>
 8005f6a:	2d00      	cmp	r5, #0
 8005f6c:	d053      	beq.n	8006016 <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	b923      	cbnz	r3, 8005f7e <HAL_SPI_TransmitReceive+0x238>
 8005f74:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d02c      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	f012 0f02 	tst.w	r2, #2
 8005f86:	d004      	beq.n	8005f92 <HAL_SPI_TransmitReceive+0x24c>
 8005f88:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005f8a:	b292      	uxth	r2, r2
 8005f8c:	b10a      	cbz	r2, 8005f92 <HAL_SPI_TransmitReceive+0x24c>
 8005f8e:	2f00      	cmp	r7, #0
 8005f90:	d1b0      	bne.n	8005ef4 <HAL_SPI_TransmitReceive+0x1ae>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	f012 0f01 	tst.w	r2, #1
 8005f9a:	d0de      	beq.n	8005f5a <HAL_SPI_TransmitReceive+0x214>
 8005f9c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005fa0:	b292      	uxth	r2, r2
 8005fa2:	2a00      	cmp	r2, #0
 8005fa4:	d0d9      	beq.n	8005f5a <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 8005fa6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005faa:	b292      	uxth	r2, r2
 8005fac:	2a01      	cmp	r2, #1
 8005fae:	d9c6      	bls.n	8005f3e <HAL_SPI_TransmitReceive+0x1f8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fb4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fb8:	3302      	adds	r3, #2
 8005fba:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005fbc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b02      	subs	r3, #2
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005fca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d9ad      	bls.n	8005f30 <HAL_SPI_TransmitReceive+0x1ea>
        txallowed = 1U;
 8005fd4:	2701      	movs	r7, #1
 8005fd6:	e7c0      	b.n	8005f5a <HAL_SPI_TransmitReceive+0x214>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fd8:	4632      	mov	r2, r6
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f7ff fe24 	bl	8005c2a <SPI_EndRxTxTransaction>
 8005fe2:	b120      	cbz	r0, 8005fee <HAL_SPI_TransmitReceive+0x2a8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005fe8:	2001      	movs	r0, #1
 8005fea:	e000      	b.n	8005fee <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_BUSY;
 8005fec:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8005ffe:	2002      	movs	r0, #2
 8006000:	e7f5      	b.n	8005fee <HAL_SPI_TransmitReceive+0x2a8>
 8006002:	2002      	movs	r0, #2
 8006004:	e7f3      	b.n	8005fee <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
 8006006:	2001      	movs	r0, #1
 8006008:	e7f1      	b.n	8005fee <HAL_SPI_TransmitReceive+0x2a8>
 800600a:	2001      	movs	r0, #1
 800600c:	e7ef      	b.n	8005fee <HAL_SPI_TransmitReceive+0x2a8>
        errorcode = HAL_TIMEOUT;
 800600e:	2003      	movs	r0, #3
 8006010:	e7ed      	b.n	8005fee <HAL_SPI_TransmitReceive+0x2a8>
        errorcode = HAL_TIMEOUT;
 8006012:	2003      	movs	r0, #3
 8006014:	e7eb      	b.n	8005fee <HAL_SPI_TransmitReceive+0x2a8>
 8006016:	2003      	movs	r0, #3
 8006018:	e7e9      	b.n	8005fee <HAL_SPI_TransmitReceive+0x2a8>
  __HAL_LOCK(hspi);
 800601a:	2002      	movs	r0, #2
 800601c:	e7ed      	b.n	8005ffa <HAL_SPI_TransmitReceive+0x2b4>
	...

08006020 <HAL_SPI_Transmit_DMA>:
{
 8006020:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8006022:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006026:	2b01      	cmp	r3, #1
 8006028:	f000 8087 	beq.w	800613a <HAL_SPI_Transmit_DMA+0x11a>
 800602c:	4604      	mov	r4, r0
 800602e:	2301      	movs	r3, #1
 8006030:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8006034:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
 8006038:	b2ed      	uxtb	r5, r5
 800603a:	429d      	cmp	r5, r3
 800603c:	d177      	bne.n	800612e <HAL_SPI_Transmit_DMA+0x10e>
  if ((pData == NULL) || (Size == 0U))
 800603e:	2a00      	cmp	r2, #0
 8006040:	bf18      	it	ne
 8006042:	2900      	cmpne	r1, #0
 8006044:	d074      	beq.n	8006130 <HAL_SPI_Transmit_DMA+0x110>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006046:	2303      	movs	r3, #3
 8006048:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800604c:	2300      	movs	r3, #0
 800604e:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006050:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006052:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006054:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006056:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006058:	6503      	str	r3, [r0, #80]	; 0x50
  hspi->RxISR       = NULL;
 800605a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800605c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006060:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006064:	6883      	ldr	r3, [r0, #8]
 8006066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800606a:	d039      	beq.n	80060e0 <HAL_SPI_Transmit_DMA+0xc0>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800606c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800606e:	4a34      	ldr	r2, [pc, #208]	; (8006140 <HAL_SPI_Transmit_DMA+0x120>)
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006072:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006074:	4a33      	ldr	r2, [pc, #204]	; (8006144 <HAL_SPI_Transmit_DMA+0x124>)
 8006076:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006078:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800607a:	4a33      	ldr	r2, [pc, #204]	; (8006148 <HAL_SPI_Transmit_DMA+0x128>)
 800607c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800607e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006080:	2200      	movs	r2, #0
 8006082:	651a      	str	r2, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	6853      	ldr	r3, [r2, #4]
 8006088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800608c:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006094:	d804      	bhi.n	80060a0 <HAL_SPI_Transmit_DMA+0x80>
 8006096:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800609e:	d025      	beq.n	80060ec <HAL_SPI_Transmit_DMA+0xcc>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80060a0:	6822      	ldr	r2, [r4, #0]
 80060a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	320c      	adds	r2, #12
 80060a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80060aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060ac:	f7fd fd38 	bl	8003b20 <HAL_DMA_Start_IT>
 80060b0:	4601      	mov	r1, r0
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d133      	bne.n	800611e <HAL_SPI_Transmit_DMA+0xfe>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	f012 0f40 	tst.w	r2, #64	; 0x40
 80060be:	d103      	bne.n	80060c8 <HAL_SPI_Transmit_DMA+0xa8>
    __HAL_SPI_ENABLE(hspi);
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060c6:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80060c8:	6822      	ldr	r2, [r4, #0]
 80060ca:	6853      	ldr	r3, [r2, #4]
 80060cc:	f043 0320 	orr.w	r3, r3, #32
 80060d0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80060d2:	6822      	ldr	r2, [r4, #0]
 80060d4:	6853      	ldr	r3, [r2, #4]
 80060d6:	f043 0302 	orr.w	r3, r3, #2
 80060da:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060dc:	460d      	mov	r5, r1
 80060de:	e027      	b.n	8006130 <HAL_SPI_Transmit_DMA+0x110>
    SPI_1LINE_TX(hspi);
 80060e0:	6802      	ldr	r2, [r0, #0]
 80060e2:	6813      	ldr	r3, [r2, #0]
 80060e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	e7bf      	b.n	800606c <HAL_SPI_Transmit_DMA+0x4c>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80060ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80060ee:	f013 0f01 	tst.w	r3, #1
 80060f2:	d109      	bne.n	8006108 <HAL_SPI_Transmit_DMA+0xe8>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	6853      	ldr	r3, [r2, #4]
 80060f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060fc:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80060fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006100:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8006104:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006106:	e7cb      	b.n	80060a0 <HAL_SPI_Transmit_DMA+0x80>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	6853      	ldr	r3, [r2, #4]
 800610c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006110:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006112:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006114:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8006118:	3301      	adds	r3, #1
 800611a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800611c:	e7c0      	b.n	80060a0 <HAL_SPI_Transmit_DMA+0x80>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800611e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006120:	f043 0310 	orr.w	r3, r3, #16
 8006124:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8006126:	2301      	movs	r3, #1
 8006128:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 800612c:	e000      	b.n	8006130 <HAL_SPI_Transmit_DMA+0x110>
    errorcode = HAL_BUSY;
 800612e:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8006130:	2300      	movs	r3, #0
 8006132:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8006136:	4628      	mov	r0, r5
 8006138:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 800613a:	2502      	movs	r5, #2
 800613c:	e7fb      	b.n	8006136 <HAL_SPI_Transmit_DMA+0x116>
 800613e:	bf00      	nop
 8006140:	08006151 	.word	0x08006151
 8006144:	0800617f 	.word	0x0800617f
 8006148:	0800615d 	.word	0x0800615d

0800614c <HAL_SPI_TxCpltCallback>:
}
 800614c:	4770      	bx	lr

0800614e <HAL_SPI_TxHalfCpltCallback>:
}
 800614e:	4770      	bx	lr

08006150 <SPI_DMAHalfTransmitCplt>:
{
 8006150:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006152:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006154:	f7ff fffb 	bl	800614e <HAL_SPI_TxHalfCpltCallback>
}
 8006158:	bd08      	pop	{r3, pc}

0800615a <HAL_SPI_ErrorCallback>:
}
 800615a:	4770      	bx	lr

0800615c <SPI_DMAError>:
{
 800615c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800615e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006160:	6802      	ldr	r2, [r0, #0]
 8006162:	6853      	ldr	r3, [r2, #4]
 8006164:	f023 0303 	bic.w	r3, r3, #3
 8006168:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800616a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800616c:	f043 0310 	orr.w	r3, r3, #16
 8006170:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006172:	2301      	movs	r3, #1
 8006174:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8006178:	f7ff ffef 	bl	800615a <HAL_SPI_ErrorCallback>
}
 800617c:	bd08      	pop	{r3, pc}

0800617e <SPI_DMATransmitCplt>:
{
 800617e:	b530      	push	{r4, r5, lr}
 8006180:	b083      	sub	sp, #12
 8006182:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006184:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8006186:	f7fd fb63 	bl	8003850 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800618a:	682b      	ldr	r3, [r5, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006192:	d123      	bne.n	80061dc <SPI_DMATransmitCplt+0x5e>
 8006194:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006196:	6821      	ldr	r1, [r4, #0]
 8006198:	684b      	ldr	r3, [r1, #4]
 800619a:	f023 0320 	bic.w	r3, r3, #32
 800619e:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061a0:	6821      	ldr	r1, [r4, #0]
 80061a2:	684b      	ldr	r3, [r1, #4]
 80061a4:	f023 0302 	bic.w	r3, r3, #2
 80061a8:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80061aa:	2164      	movs	r1, #100	; 0x64
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7ff fd3c 	bl	8005c2a <SPI_EndRxTxTransaction>
 80061b2:	b118      	cbz	r0, 80061bc <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80061b6:	f043 0320 	orr.w	r3, r3, #32
 80061ba:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061bc:	68a3      	ldr	r3, [r4, #8]
 80061be:	b933      	cbnz	r3, 80061ce <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	9201      	str	r2, [sp, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80061da:	b923      	cbnz	r3, 80061e6 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 80061dc:	4620      	mov	r0, r4
 80061de:	f7ff ffb5 	bl	800614c <HAL_SPI_TxCpltCallback>
}
 80061e2:	b003      	add	sp, #12
 80061e4:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7ff ffb7 	bl	800615a <HAL_SPI_ErrorCallback>
      return;
 80061ec:	e7f9      	b.n	80061e2 <SPI_DMATransmitCplt+0x64>
	...

080061f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061f0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061f2:	6a03      	ldr	r3, [r0, #32]
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fe:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006200:	4c12      	ldr	r4, [pc, #72]	; (800624c <TIM_OC1_SetConfig+0x5c>)
 8006202:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006204:	680d      	ldr	r5, [r1, #0]
 8006206:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006208:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800620c:	688b      	ldr	r3, [r1, #8]
 800620e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006210:	4c0f      	ldr	r4, [pc, #60]	; (8006250 <TIM_OC1_SetConfig+0x60>)
 8006212:	4e10      	ldr	r6, [pc, #64]	; (8006254 <TIM_OC1_SetConfig+0x64>)
 8006214:	42b0      	cmp	r0, r6
 8006216:	bf18      	it	ne
 8006218:	42a0      	cmpne	r0, r4
 800621a:	bf0c      	ite	eq
 800621c:	2401      	moveq	r4, #1
 800621e:	2400      	movne	r4, #0
 8006220:	d105      	bne.n	800622e <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006222:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006226:	68ce      	ldr	r6, [r1, #12]
 8006228:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800622a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800622e:	b12c      	cbz	r4, 800623c <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006230:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006234:	694c      	ldr	r4, [r1, #20]
 8006236:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006238:	698a      	ldr	r2, [r1, #24]
 800623a:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800623e:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006240:	684a      	ldr	r2, [r1, #4]
 8006242:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006244:	6203      	str	r3, [r0, #32]
}
 8006246:	bc70      	pop	{r4, r5, r6}
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	fffeff8c 	.word	0xfffeff8c
 8006250:	40010000 	.word	0x40010000
 8006254:	40010400 	.word	0x40010400

08006258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006258:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800625a:	6a03      	ldr	r3, [r0, #32]
 800625c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006260:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006262:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006264:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006266:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006268:	4c14      	ldr	r4, [pc, #80]	; (80062bc <TIM_OC3_SetConfig+0x64>)
 800626a:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800626c:	680e      	ldr	r6, [r1, #0]
 800626e:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006274:	688c      	ldr	r4, [r1, #8]
 8006276:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800627a:	4c11      	ldr	r4, [pc, #68]	; (80062c0 <TIM_OC3_SetConfig+0x68>)
 800627c:	4d11      	ldr	r5, [pc, #68]	; (80062c4 <TIM_OC3_SetConfig+0x6c>)
 800627e:	42a8      	cmp	r0, r5
 8006280:	bf18      	it	ne
 8006282:	42a0      	cmpne	r0, r4
 8006284:	bf0c      	ite	eq
 8006286:	2401      	moveq	r4, #1
 8006288:	2400      	movne	r4, #0
 800628a:	d106      	bne.n	800629a <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800628c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006290:	68cd      	ldr	r5, [r1, #12]
 8006292:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629a:	b13c      	cbz	r4, 80062ac <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800629c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062a0:	694c      	ldr	r4, [r1, #20]
 80062a2:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062a6:	698c      	ldr	r4, [r1, #24]
 80062a8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ac:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ae:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062b0:	684a      	ldr	r2, [r1, #4]
 80062b2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b4:	6203      	str	r3, [r0, #32]
}
 80062b6:	bc70      	pop	{r4, r5, r6}
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	fffeff8c 	.word	0xfffeff8c
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40010400 	.word	0x40010400

080062c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ca:	6a03      	ldr	r3, [r0, #32]
 80062cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d6:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062d8:	4a0d      	ldr	r2, [pc, #52]	; (8006310 <TIM_OC4_SetConfig+0x48>)
 80062da:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062dc:	680d      	ldr	r5, [r1, #0]
 80062de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062e6:	688d      	ldr	r5, [r1, #8]
 80062e8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ec:	4e09      	ldr	r6, [pc, #36]	; (8006314 <TIM_OC4_SetConfig+0x4c>)
 80062ee:	4d0a      	ldr	r5, [pc, #40]	; (8006318 <TIM_OC4_SetConfig+0x50>)
 80062f0:	42a8      	cmp	r0, r5
 80062f2:	bf18      	it	ne
 80062f4:	42b0      	cmpne	r0, r6
 80062f6:	d104      	bne.n	8006302 <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062f8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062fc:	694d      	ldr	r5, [r1, #20]
 80062fe:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006302:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006304:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006306:	684a      	ldr	r2, [r1, #4]
 8006308:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630a:	6203      	str	r3, [r0, #32]
}
 800630c:	bc70      	pop	{r4, r5, r6}
 800630e:	4770      	bx	lr
 8006310:	feff8cff 	.word	0xfeff8cff
 8006314:	40010000 	.word	0x40010000
 8006318:	40010400 	.word	0x40010400

0800631c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800631e:	6a03      	ldr	r3, [r0, #32]
 8006320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006324:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006326:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006328:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800632a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800632c:	4d0d      	ldr	r5, [pc, #52]	; (8006364 <TIM_OC5_SetConfig+0x48>)
 800632e:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006330:	680a      	ldr	r2, [r1, #0]
 8006332:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006334:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006338:	688d      	ldr	r5, [r1, #8]
 800633a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633e:	4e0a      	ldr	r6, [pc, #40]	; (8006368 <TIM_OC5_SetConfig+0x4c>)
 8006340:	4d0a      	ldr	r5, [pc, #40]	; (800636c <TIM_OC5_SetConfig+0x50>)
 8006342:	42a8      	cmp	r0, r5
 8006344:	bf18      	it	ne
 8006346:	42b0      	cmpne	r0, r6
 8006348:	d104      	bne.n	8006354 <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800634a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800634e:	694d      	ldr	r5, [r1, #20]
 8006350:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006356:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006358:	684a      	ldr	r2, [r1, #4]
 800635a:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635c:	6203      	str	r3, [r0, #32]
}
 800635e:	bc70      	pop	{r4, r5, r6}
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	fffeff8f 	.word	0xfffeff8f
 8006368:	40010000 	.word	0x40010000
 800636c:	40010400 	.word	0x40010400

08006370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006370:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006372:	6a03      	ldr	r3, [r0, #32]
 8006374:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006378:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800637e:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006380:	4a0d      	ldr	r2, [pc, #52]	; (80063b8 <TIM_OC6_SetConfig+0x48>)
 8006382:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006384:	680d      	ldr	r5, [r1, #0]
 8006386:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800638a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800638e:	688d      	ldr	r5, [r1, #8]
 8006390:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006394:	4e09      	ldr	r6, [pc, #36]	; (80063bc <TIM_OC6_SetConfig+0x4c>)
 8006396:	4d0a      	ldr	r5, [pc, #40]	; (80063c0 <TIM_OC6_SetConfig+0x50>)
 8006398:	42a8      	cmp	r0, r5
 800639a:	bf18      	it	ne
 800639c:	42b0      	cmpne	r0, r6
 800639e:	d104      	bne.n	80063aa <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063a0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063a4:	694d      	ldr	r5, [r1, #20]
 80063a6:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063ac:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063ae:	684a      	ldr	r2, [r1, #4]
 80063b0:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b2:	6203      	str	r3, [r0, #32]
}
 80063b4:	bc70      	pop	{r4, r5, r6}
 80063b6:	4770      	bx	lr
 80063b8:	feff8fff 	.word	0xfeff8fff
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400

080063c4 <TIM_Base_SetConfig>:
{
 80063c4:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 80063c6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c8:	4a3b      	ldr	r2, [pc, #236]	; (80064b8 <TIM_Base_SetConfig+0xf4>)
 80063ca:	4290      	cmp	r0, r2
 80063cc:	bf14      	ite	ne
 80063ce:	f04f 0e00 	movne.w	lr, #0
 80063d2:	f04f 0e01 	moveq.w	lr, #1
 80063d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80063da:	bf14      	ite	ne
 80063dc:	4672      	movne	r2, lr
 80063de:	f04e 0201 	orreq.w	r2, lr, #1
 80063e2:	b9aa      	cbnz	r2, 8006410 <TIM_Base_SetConfig+0x4c>
 80063e4:	4c35      	ldr	r4, [pc, #212]	; (80064bc <TIM_Base_SetConfig+0xf8>)
 80063e6:	42a0      	cmp	r0, r4
 80063e8:	bf14      	ite	ne
 80063ea:	2400      	movne	r4, #0
 80063ec:	2401      	moveq	r4, #1
 80063ee:	4d34      	ldr	r5, [pc, #208]	; (80064c0 <TIM_Base_SetConfig+0xfc>)
 80063f0:	42a8      	cmp	r0, r5
 80063f2:	d00d      	beq.n	8006410 <TIM_Base_SetConfig+0x4c>
 80063f4:	b964      	cbnz	r4, 8006410 <TIM_Base_SetConfig+0x4c>
 80063f6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80063fa:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 80063fe:	42a0      	cmp	r0, r4
 8006400:	bf14      	ite	ne
 8006402:	2400      	movne	r4, #0
 8006404:	2401      	moveq	r4, #1
 8006406:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800640a:	42a8      	cmp	r0, r5
 800640c:	d000      	beq.n	8006410 <TIM_Base_SetConfig+0x4c>
 800640e:	b11c      	cbz	r4, 8006418 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006414:	684c      	ldr	r4, [r1, #4]
 8006416:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006418:	2a00      	cmp	r2, #0
 800641a:	d133      	bne.n	8006484 <TIM_Base_SetConfig+0xc0>
 800641c:	4a27      	ldr	r2, [pc, #156]	; (80064bc <TIM_Base_SetConfig+0xf8>)
 800641e:	4290      	cmp	r0, r2
 8006420:	bf14      	ite	ne
 8006422:	2200      	movne	r2, #0
 8006424:	2201      	moveq	r2, #1
 8006426:	4c26      	ldr	r4, [pc, #152]	; (80064c0 <TIM_Base_SetConfig+0xfc>)
 8006428:	42a0      	cmp	r0, r4
 800642a:	d02b      	beq.n	8006484 <TIM_Base_SetConfig+0xc0>
 800642c:	bb52      	cbnz	r2, 8006484 <TIM_Base_SetConfig+0xc0>
 800642e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006432:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8006436:	4290      	cmp	r0, r2
 8006438:	bf14      	ite	ne
 800643a:	2200      	movne	r2, #0
 800643c:	2201      	moveq	r2, #1
 800643e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006442:	42a0      	cmp	r0, r4
 8006444:	d01e      	beq.n	8006484 <TIM_Base_SetConfig+0xc0>
 8006446:	b9ea      	cbnz	r2, 8006484 <TIM_Base_SetConfig+0xc0>
 8006448:	4a1e      	ldr	r2, [pc, #120]	; (80064c4 <TIM_Base_SetConfig+0x100>)
 800644a:	4290      	cmp	r0, r2
 800644c:	bf14      	ite	ne
 800644e:	2200      	movne	r2, #0
 8006450:	2201      	moveq	r2, #1
 8006452:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8006456:	42a0      	cmp	r0, r4
 8006458:	d014      	beq.n	8006484 <TIM_Base_SetConfig+0xc0>
 800645a:	b99a      	cbnz	r2, 8006484 <TIM_Base_SetConfig+0xc0>
 800645c:	4a1a      	ldr	r2, [pc, #104]	; (80064c8 <TIM_Base_SetConfig+0x104>)
 800645e:	4290      	cmp	r0, r2
 8006460:	bf14      	ite	ne
 8006462:	2200      	movne	r2, #0
 8006464:	2201      	moveq	r2, #1
 8006466:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800646a:	42a0      	cmp	r0, r4
 800646c:	d00a      	beq.n	8006484 <TIM_Base_SetConfig+0xc0>
 800646e:	b94a      	cbnz	r2, 8006484 <TIM_Base_SetConfig+0xc0>
 8006470:	4a16      	ldr	r2, [pc, #88]	; (80064cc <TIM_Base_SetConfig+0x108>)
 8006472:	4290      	cmp	r0, r2
 8006474:	bf14      	ite	ne
 8006476:	2200      	movne	r2, #0
 8006478:	2201      	moveq	r2, #1
 800647a:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 800647e:	42a0      	cmp	r0, r4
 8006480:	d000      	beq.n	8006484 <TIM_Base_SetConfig+0xc0>
 8006482:	b122      	cbz	r2, 800648e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006484:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006488:	68cb      	ldr	r3, [r1, #12]
 800648a:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800648e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006492:	694a      	ldr	r2, [r1, #20]
 8006494:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006496:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006498:	688a      	ldr	r2, [r1, #8]
 800649a:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800649c:	680a      	ldr	r2, [r1, #0]
 800649e:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064a0:	4a0b      	ldr	r2, [pc, #44]	; (80064d0 <TIM_Base_SetConfig+0x10c>)
 80064a2:	4290      	cmp	r0, r2
 80064a4:	bf14      	ite	ne
 80064a6:	4673      	movne	r3, lr
 80064a8:	f04e 0301 	orreq.w	r3, lr, #1
 80064ac:	b10b      	cbz	r3, 80064b2 <TIM_Base_SetConfig+0xee>
    TIMx->RCR = Structure->RepetitionCounter;
 80064ae:	690b      	ldr	r3, [r1, #16]
 80064b0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80064b2:	2301      	movs	r3, #1
 80064b4:	6143      	str	r3, [r0, #20]
}
 80064b6:	bd30      	pop	{r4, r5, pc}
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40014400 	.word	0x40014400
 80064c8:	40001800 	.word	0x40001800
 80064cc:	40002000 	.word	0x40002000
 80064d0:	40010400 	.word	0x40010400

080064d4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80064d4:	b1b0      	cbz	r0, 8006504 <HAL_TIM_PWM_Init+0x30>
{
 80064d6:	b510      	push	{r4, lr}
 80064d8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80064da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80064de:	b163      	cbz	r3, 80064fa <HAL_TIM_PWM_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	2302      	movs	r3, #2
 80064e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e6:	4621      	mov	r1, r4
 80064e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80064ec:	f7ff ff6a 	bl	80063c4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80064f6:	2000      	movs	r0, #0
}
 80064f8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80064fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80064fe:	f001 fe09 	bl	8008114 <HAL_TIM_PWM_MspInit>
 8006502:	e7ed      	b.n	80064e0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006504:	2001      	movs	r0, #1
}
 8006506:	4770      	bx	lr

08006508 <TIM_OC2_SetConfig>:
{
 8006508:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800650a:	6a03      	ldr	r3, [r0, #32]
 800650c:	f023 0310 	bic.w	r3, r3, #16
 8006510:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006512:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006514:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006516:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006518:	4c14      	ldr	r4, [pc, #80]	; (800656c <TIM_OC2_SetConfig+0x64>)
 800651a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800651c:	680d      	ldr	r5, [r1, #0]
 800651e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006522:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006526:	688c      	ldr	r4, [r1, #8]
 8006528:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800652c:	4c10      	ldr	r4, [pc, #64]	; (8006570 <TIM_OC2_SetConfig+0x68>)
 800652e:	4e11      	ldr	r6, [pc, #68]	; (8006574 <TIM_OC2_SetConfig+0x6c>)
 8006530:	42b0      	cmp	r0, r6
 8006532:	bf18      	it	ne
 8006534:	42a0      	cmpne	r0, r4
 8006536:	bf0c      	ite	eq
 8006538:	2401      	moveq	r4, #1
 800653a:	2400      	movne	r4, #0
 800653c:	d106      	bne.n	800654c <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800653e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006542:	68ce      	ldr	r6, [r1, #12]
 8006544:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654c:	b13c      	cbz	r4, 800655e <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800654e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006552:	694c      	ldr	r4, [r1, #20]
 8006554:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006558:	698c      	ldr	r4, [r1, #24]
 800655a:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800655e:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006560:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006562:	684a      	ldr	r2, [r1, #4]
 8006564:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006566:	6203      	str	r3, [r0, #32]
}
 8006568:	bc70      	pop	{r4, r5, r6}
 800656a:	4770      	bx	lr
 800656c:	feff8cff 	.word	0xfeff8cff
 8006570:	40010000 	.word	0x40010000
 8006574:	40010400 	.word	0x40010400

08006578 <HAL_TIM_PWM_ConfigChannel>:
{
 8006578:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800657a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800657e:	2b01      	cmp	r3, #1
 8006580:	f000 8092 	beq.w	80066a8 <HAL_TIM_PWM_ConfigChannel+0x130>
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	2301      	movs	r3, #1
 800658a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800658e:	2302      	movs	r3, #2
 8006590:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8006594:	2a14      	cmp	r2, #20
 8006596:	d81e      	bhi.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8006598:	e8df f002 	tbb	[pc, r2]
 800659c:	1d1d1d0b 	.word	0x1d1d1d0b
 80065a0:	1d1d1d24 	.word	0x1d1d1d24
 80065a4:	1d1d1d38 	.word	0x1d1d1d38
 80065a8:	1d1d1d4b 	.word	0x1d1d1d4b
 80065ac:	1d1d1d5f 	.word	0x1d1d1d5f
 80065b0:	72          	.byte	0x72
 80065b1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065b2:	6800      	ldr	r0, [r0, #0]
 80065b4:	f7ff fe1c 	bl	80061f0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065b8:	6822      	ldr	r2, [r4, #0]
 80065ba:	6993      	ldr	r3, [r2, #24]
 80065bc:	f043 0308 	orr.w	r3, r3, #8
 80065c0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	6993      	ldr	r3, [r2, #24]
 80065c6:	f023 0304 	bic.w	r3, r3, #4
 80065ca:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	6993      	ldr	r3, [r2, #24]
 80065d0:	6929      	ldr	r1, [r5, #16]
 80065d2:	430b      	orrs	r3, r1
 80065d4:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80065dc:	2000      	movs	r0, #0
 80065de:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e4:	6800      	ldr	r0, [r0, #0]
 80065e6:	f7ff ff8f 	bl	8006508 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	6993      	ldr	r3, [r2, #24]
 80065ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065f2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065f4:	6822      	ldr	r2, [r4, #0]
 80065f6:	6993      	ldr	r3, [r2, #24]
 80065f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065fc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065fe:	6822      	ldr	r2, [r4, #0]
 8006600:	6993      	ldr	r3, [r2, #24]
 8006602:	6929      	ldr	r1, [r5, #16]
 8006604:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006608:	6193      	str	r3, [r2, #24]
      break;
 800660a:	e7e4      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800660c:	6800      	ldr	r0, [r0, #0]
 800660e:	f7ff fe23 	bl	8006258 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006612:	6822      	ldr	r2, [r4, #0]
 8006614:	69d3      	ldr	r3, [r2, #28]
 8006616:	f043 0308 	orr.w	r3, r3, #8
 800661a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800661c:	6822      	ldr	r2, [r4, #0]
 800661e:	69d3      	ldr	r3, [r2, #28]
 8006620:	f023 0304 	bic.w	r3, r3, #4
 8006624:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006626:	6822      	ldr	r2, [r4, #0]
 8006628:	69d3      	ldr	r3, [r2, #28]
 800662a:	6929      	ldr	r1, [r5, #16]
 800662c:	430b      	orrs	r3, r1
 800662e:	61d3      	str	r3, [r2, #28]
      break;
 8006630:	e7d1      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006632:	6800      	ldr	r0, [r0, #0]
 8006634:	f7ff fe48 	bl	80062c8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	69d3      	ldr	r3, [r2, #28]
 800663c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006640:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	69d3      	ldr	r3, [r2, #28]
 8006646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800664a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	69d3      	ldr	r3, [r2, #28]
 8006650:	6929      	ldr	r1, [r5, #16]
 8006652:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006656:	61d3      	str	r3, [r2, #28]
      break;
 8006658:	e7bd      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	f7ff fe5e 	bl	800631c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006660:	6822      	ldr	r2, [r4, #0]
 8006662:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006664:	f043 0308 	orr.w	r3, r3, #8
 8006668:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800666e:	f023 0304 	bic.w	r3, r3, #4
 8006672:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006674:	6822      	ldr	r2, [r4, #0]
 8006676:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006678:	6929      	ldr	r1, [r5, #16]
 800667a:	430b      	orrs	r3, r1
 800667c:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800667e:	e7aa      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006680:	6800      	ldr	r0, [r0, #0]
 8006682:	f7ff fe75 	bl	8006370 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006686:	6822      	ldr	r2, [r4, #0]
 8006688:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800668a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800668e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006690:	6822      	ldr	r2, [r4, #0]
 8006692:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006694:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006698:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800669e:	6929      	ldr	r1, [r5, #16]
 80066a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80066a4:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80066a6:	e796      	b.n	80065d6 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 80066a8:	2002      	movs	r0, #2
 80066aa:	e79a      	b.n	80065e2 <HAL_TIM_PWM_ConfigChannel+0x6a>

080066ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d028      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 80066b4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80066b6:	2301      	movs	r3, #1
 80066b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066bc:	2302      	movs	r3, #2
 80066be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066c2:	6803      	ldr	r3, [r0, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c6:	689c      	ldr	r4, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066c8:	4e10      	ldr	r6, [pc, #64]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80066ca:	4d11      	ldr	r5, [pc, #68]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80066cc:	42ab      	cmp	r3, r5
 80066ce:	bf18      	it	ne
 80066d0:	42b3      	cmpne	r3, r6
 80066d2:	d103      	bne.n	80066dc <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066d8:	684d      	ldr	r5, [r1, #4]
 80066da:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066e0:	680d      	ldr	r5, [r1, #0]
 80066e2:	432a      	orrs	r2, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80066e4:	f024 0c80 	bic.w	ip, r4, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066e8:	6889      	ldr	r1, [r1, #8]
 80066ea:	ea41 010c 	orr.w	r1, r1, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ee:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066f0:	6803      	ldr	r3, [r0, #0]
 80066f2:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066fa:	2300      	movs	r3, #0
 80066fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006700:	4618      	mov	r0, r3
}
 8006702:	bc70      	pop	{r4, r5, r6}
 8006704:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006706:	2002      	movs	r0, #2
}
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40010000 	.word	0x40010000
 8006710:	40010400 	.word	0x40010400

08006714 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006714:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d03c      	beq.n	8006796 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 800671c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800671e:	2301      	movs	r3, #1
 8006720:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006724:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800672a:	688a      	ldr	r2, [r1, #8]
 800672c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800672e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006732:	684a      	ldr	r2, [r1, #4]
 8006734:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800673a:	680a      	ldr	r2, [r1, #0]
 800673c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800673e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006742:	690a      	ldr	r2, [r1, #16]
 8006744:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800674a:	694a      	ldr	r2, [r1, #20]
 800674c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800674e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006752:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006754:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006756:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800675a:	698a      	ldr	r2, [r1, #24]
 800675c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006760:	6802      	ldr	r2, [r0, #0]
 8006762:	4d0e      	ldr	r5, [pc, #56]	; (800679c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8006764:	4c0e      	ldr	r4, [pc, #56]	; (80067a0 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8006766:	42a2      	cmp	r2, r4
 8006768:	bf18      	it	ne
 800676a:	42aa      	cmpne	r2, r5
 800676c:	d10c      	bne.n	8006788 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800676e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006772:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006774:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800677c:	69cc      	ldr	r4, [r1, #28]
 800677e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006780:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006784:	6a09      	ldr	r1, [r1, #32]
 8006786:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006788:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800678a:	2300      	movs	r3, #0
 800678c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006790:	4618      	mov	r0, r3
}
 8006792:	bc30      	pop	{r4, r5}
 8006794:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006796:	2002      	movs	r0, #2
}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40010000 	.word	0x40010000
 80067a0:	40010400 	.word	0x40010400

080067a4 <SwapBytes>:
///////////////////////////////////////////////////////////////////////////////
// Uncategorized:

uint16_t SwapBytes(uint16_t Value)
{
  return (Value >> 8) | ((Value & 0xFF) << 8);
 80067a4:	0a03      	lsrs	r3, r0, #8
 80067a6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80067aa:	b280      	uxth	r0, r0
 80067ac:	4770      	bx	lr

080067ae <Clamp_uint16>:

///////////////////////////////////////////////////////////////////////////////
// Clamp:

uint16_t Clamp_uint16(uint16_t Value, uint16_t MinValue , uint16_t MaxValue)
{
 80067ae:	4603      	mov	r3, r0
 80067b0:	4610      	mov	r0, r2
  if (Value < MinValue)
 80067b2:	428b      	cmp	r3, r1
 80067b4:	d300      	bcc.n	80067b8 <Clamp_uint16+0xa>
 80067b6:	4619      	mov	r1, r3
    Value = MinValue;
  if (Value > MaxValue)
 80067b8:	4281      	cmp	r1, r0
 80067ba:	d800      	bhi.n	80067be <Clamp_uint16+0x10>
 80067bc:	4608      	mov	r0, r1
    Value = MaxValue;
  return Value;
}
 80067be:	4770      	bx	lr

080067c0 <ILI9341_DrawPixel_ToBackBuffer>:
    ILI9341_CSX_Low();
}

static void ILI9341_DrawPixel_ToBackBuffer(int16_t X, int16_t Y, uint16_t Color)
{
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 80067c0:	fa1f fc80 	uxth.w	ip, r0
 80067c4:	0fcb      	lsrs	r3, r1, #31
 80067c6:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
 80067ca:	bf88      	it	hi
 80067cc:	f043 0301 	orrhi.w	r3, r3, #1
 80067d0:	b953      	cbnz	r3, 80067e8 <ILI9341_DrawPixel_ToBackBuffer+0x28>
 80067d2:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 80067d6:	da07      	bge.n	80067e8 <ILI9341_DrawPixel_ToBackBuffer+0x28>
    return;

  pBackBuffer[X + Y * ILI9341_Width] = Color;
 80067d8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80067dc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80067e0:	4b02      	ldr	r3, [pc, #8]	; (80067ec <ILI9341_DrawPixel_ToBackBuffer+0x2c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	20000484 	.word	0x20000484

080067f0 <IsNonPrintingChar>:
  return pFont->yAdvance;
}

static uint8_t IsNonPrintingChar(uint8_t Ch)
{
  return ((Ch < pFont->first) || (Ch > pFont->last));
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <IsNonPrintingChar+0x1c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	7a1a      	ldrb	r2, [r3, #8]
 80067f6:	4282      	cmp	r2, r0
 80067f8:	d804      	bhi.n	8006804 <IsNonPrintingChar+0x14>
 80067fa:	7a5b      	ldrb	r3, [r3, #9]
 80067fc:	4283      	cmp	r3, r0
 80067fe:	d203      	bcs.n	8006808 <IsNonPrintingChar+0x18>
 8006800:	2001      	movs	r0, #1
 8006802:	4770      	bx	lr
 8006804:	2001      	movs	r0, #1
 8006806:	4770      	bx	lr
 8006808:	2000      	movs	r0, #0
}
 800680a:	4770      	bx	lr
 800680c:	20000488 	.word	0x20000488

08006810 <ILI9341_Write8>:
{
 8006810:	b500      	push	{lr}
 8006812:	b087      	sub	sp, #28
 8006814:	f88d 000f 	strb.w	r0, [sp, #15]
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8006818:	2364      	movs	r3, #100	; 0x64
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	2301      	movs	r3, #1
 800681e:	f10d 0217 	add.w	r2, sp, #23
 8006822:	f10d 010f 	add.w	r1, sp, #15
 8006826:	4805      	ldr	r0, [pc, #20]	; (800683c <ILI9341_Write8+0x2c>)
 8006828:	6800      	ldr	r0, [r0, #0]
 800682a:	f7ff fa8c 	bl	8005d46 <HAL_SPI_TransmitReceive>
 800682e:	b910      	cbnz	r0, 8006836 <ILI9341_Write8+0x26>
}
 8006830:	b007      	add	sp, #28
 8006832:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006836:	f001 f89b 	bl	8007970 <Error_Handler>
}
 800683a:	e7f9      	b.n	8006830 <ILI9341_Write8+0x20>
 800683c:	2000048c 	.word	0x2000048c

08006840 <ILI9341_Write16>:
{
 8006840:	b510      	push	{r4, lr}
 8006842:	4604      	mov	r4, r0
  ILI9341_Write8(Value >> 8);
 8006844:	0a00      	lsrs	r0, r0, #8
 8006846:	f7ff ffe3 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(Value);
 800684a:	b2e0      	uxtb	r0, r4
 800684c:	f7ff ffe0 	bl	8006810 <ILI9341_Write8>
}
 8006850:	bd10      	pop	{r4, pc}

08006852 <ILI9341_Write32>:
{
 8006852:	b510      	push	{r4, lr}
 8006854:	4604      	mov	r4, r0
  ILI9341_Write16(Value >> 16);
 8006856:	0c00      	lsrs	r0, r0, #16
 8006858:	f7ff fff2 	bl	8006840 <ILI9341_Write16>
  ILI9341_Write16(Value);
 800685c:	b2a0      	uxth	r0, r4
 800685e:	f7ff ffef 	bl	8006840 <ILI9341_Write16>
}
 8006862:	bd10      	pop	{r4, pc}

08006864 <ILI9341_WriteCommand>:
{
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4604      	mov	r4, r0
  ILI9341_DC_Low();
 8006868:	4d07      	ldr	r5, [pc, #28]	; (8006888 <ILI9341_WriteCommand+0x24>)
 800686a:	2200      	movs	r2, #0
 800686c:	2104      	movs	r1, #4
 800686e:	4628      	mov	r0, r5
 8006870:	f7fd fb82 	bl	8003f78 <HAL_GPIO_WritePin>
  ILI9341_Write8(Value);
 8006874:	b2e0      	uxtb	r0, r4
 8006876:	f7ff ffcb 	bl	8006810 <ILI9341_Write8>
  ILI9341_DC_High();
 800687a:	2201      	movs	r2, #1
 800687c:	2104      	movs	r1, #4
 800687e:	4628      	mov	r0, r5
 8006880:	f7fd fb7a 	bl	8003f78 <HAL_GPIO_WritePin>
}
 8006884:	bd38      	pop	{r3, r4, r5, pc}
 8006886:	bf00      	nop
 8006888:	40020800 	.word	0x40020800

0800688c <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>:
{
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	b083      	sub	sp, #12
 8006892:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  if ((i_Width == 0) || (i_Height == 0))
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	bf18      	it	ne
 800689a:	2a00      	cmpne	r2, #0
 800689c:	d102      	bne.n	80068a4 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x18>
}
 800689e:	b003      	add	sp, #12
 80068a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a4:	4607      	mov	r7, r0
 80068a6:	468b      	mov	fp, r1
 80068a8:	4690      	mov	r8, r2
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80068aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80068ae:	2100      	movs	r1, #0
 80068b0:	4658      	mov	r0, fp
 80068b2:	f7ff ff7c 	bl	80067ae <Clamp_uint16>
 80068b6:	4682      	mov	sl, r0
 80068b8:	e011      	b.n	80068de <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x52>
      pLine[X] = *pPixel++;
 80068ba:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 80068be:	f834 2b02 	ldrh.w	r2, [r4], #2
 80068c2:	f829 2003 	strh.w	r2, [r9, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80068c6:	3501      	adds	r5, #1
 80068c8:	eb08 0007 	add.w	r0, r8, r7
 80068cc:	22f0      	movs	r2, #240	; 0xf0
 80068ce:	2100      	movs	r1, #0
 80068d0:	b280      	uxth	r0, r0
 80068d2:	f7ff ff6c 	bl	80067ae <Clamp_uint16>
 80068d6:	42a8      	cmp	r0, r5
 80068d8:	d8ef      	bhi.n	80068ba <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x2e>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80068da:	f10a 0a01 	add.w	sl, sl, #1
 80068de:	9b01      	ldr	r3, [sp, #4]
 80068e0:	eb03 000b 	add.w	r0, r3, fp
 80068e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80068e8:	2100      	movs	r1, #0
 80068ea:	b280      	uxth	r0, r0
 80068ec:	f7ff ff5f 	bl	80067ae <Clamp_uint16>
 80068f0:	4550      	cmp	r0, sl
 80068f2:	d9d4      	bls.n	800689e <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x12>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 80068f4:	4b06      	ldr	r3, [pc, #24]	; (8006910 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x84>)
 80068f6:	f8d3 9000 	ldr.w	r9, [r3]
 80068fa:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 80068fe:	0176      	lsls	r6, r6, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8006900:	22f0      	movs	r2, #240	; 0xf0
 8006902:	2100      	movs	r1, #0
 8006904:	4638      	mov	r0, r7
 8006906:	f7ff ff52 	bl	80067ae <Clamp_uint16>
 800690a:	4605      	mov	r5, r0
 800690c:	e7dc      	b.n	80068c8 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x3c>
 800690e:	bf00      	nop
 8006910:	20000484 	.word	0x20000484

08006914 <ILI9341_DrawPixels_MSBFirst_ToDisplay>:
{
 8006914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006918:	9d06      	ldr	r5, [sp, #24]
  if ((Width == 0) || (Height == 0))
 800691a:	2b00      	cmp	r3, #0
 800691c:	bf18      	it	ne
 800691e:	2a00      	cmpne	r2, #0
 8006920:	d101      	bne.n	8006926 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x12>
}
 8006922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006926:	4680      	mov	r8, r0
 8006928:	460c      	mov	r4, r1
 800692a:	4616      	mov	r6, r2
 800692c:	461f      	mov	r7, r3
  ILI9341_CSX_Low();
 800692e:	2200      	movs	r2, #0
 8006930:	2102      	movs	r1, #2
 8006932:	4829      	ldr	r0, [pc, #164]	; (80069d8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8006934:	f7fd fb20 	bl	8003f78 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8006938:	202a      	movs	r0, #42	; 0x2a
 800693a:	f7ff ff93 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 800693e:	4640      	mov	r0, r8
 8006940:	f7ff ff7e 	bl	8006840 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8006944:	eb06 0008 	add.w	r0, r6, r8
 8006948:	b280      	uxth	r0, r0
 800694a:	3801      	subs	r0, #1
 800694c:	b280      	uxth	r0, r0
 800694e:	f7ff ff77 	bl	8006840 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8006952:	202b      	movs	r0, #43	; 0x2b
 8006954:	f7ff ff86 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8006958:	4620      	mov	r0, r4
 800695a:	f7ff ff71 	bl	8006840 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 800695e:	1938      	adds	r0, r7, r4
 8006960:	b280      	uxth	r0, r0
 8006962:	3801      	subs	r0, #1
 8006964:	b280      	uxth	r0, r0
 8006966:	f7ff ff6b 	bl	8006840 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2C); // Memory write.
 800696a:	202c      	movs	r0, #44	; 0x2c
 800696c:	f7ff ff7a 	bl	8006864 <ILI9341_WriteCommand>
  uint32_t NumBytes = Width * Height * sizeof(uint16_t);
 8006970:	fb07 f306 	mul.w	r3, r7, r6
 8006974:	005b      	lsls	r3, r3, #1
    uint32_t op_addr = (uint32_t) addr;
 8006976:	462a      	mov	r2, r5
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006978:	f3bf 8f4f 	dsb	sy
}
 800697c:	e004      	b.n	8006988 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x74>
      SCB->DCCMVAC = op_addr;
 800697e:	4917      	ldr	r1, [pc, #92]	; (80069dc <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc8>)
 8006980:	f8c1 2268 	str.w	r2, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8006984:	3220      	adds	r2, #32
      op_size -=           linesize;
 8006986:	3b20      	subs	r3, #32
    while (op_size > 0) {
 8006988:	2b00      	cmp	r3, #0
 800698a:	dcf8      	bgt.n	800697e <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x6a>
  __ASM volatile ("dsb 0xF":::"memory");
 800698c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006990:	f3bf 8f6f 	isb	sy
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8006994:	2400      	movs	r4, #0
 8006996:	e00b      	b.n	80069b0 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x9c>
    pPixels += Width;
 8006998:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 800699c:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d0f7      	beq.n	800699c <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x88>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 80069ac:	3401      	adds	r4, #1
 80069ae:	b224      	sxth	r4, r4
 80069b0:	42a7      	cmp	r7, r4
 80069b2:	dd0b      	ble.n	80069cc <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xb8>
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 80069b4:	0072      	lsls	r2, r6, #1
 80069b6:	b292      	uxth	r2, r2
 80069b8:	4629      	mov	r1, r5
 80069ba:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	f7ff fb2f 	bl	8006020 <HAL_SPI_Transmit_DMA>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d0e8      	beq.n	8006998 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
      Error_Handler();
 80069c6:	f000 ffd3 	bl	8007970 <Error_Handler>
 80069ca:	e7e5      	b.n	8006998 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
  ILI9341_CSX_High();
 80069cc:	2201      	movs	r2, #1
 80069ce:	2102      	movs	r1, #2
 80069d0:	4801      	ldr	r0, [pc, #4]	; (80069d8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 80069d2:	f7fd fad1 	bl	8003f78 <HAL_GPIO_WritePin>
 80069d6:	e7a4      	b.n	8006922 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xe>
 80069d8:	40020800 	.word	0x40020800
 80069dc:	e000ed00 	.word	0xe000ed00
 80069e0:	2000048c 	.word	0x2000048c

080069e4 <ILI9341_DrawBar_ToDisplay>:
  if ((Width == 0) || (Height == 0))
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bf18      	it	ne
 80069e8:	2a00      	cmpne	r2, #0
 80069ea:	d100      	bne.n	80069ee <ILI9341_DrawBar_ToDisplay+0xa>
 80069ec:	4770      	bx	lr
{
 80069ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f0:	4607      	mov	r7, r0
 80069f2:	460c      	mov	r4, r1
 80069f4:	4615      	mov	r5, r2
 80069f6:	461e      	mov	r6, r3
  ILI9341_CSX_Low();
 80069f8:	2200      	movs	r2, #0
 80069fa:	2102      	movs	r1, #2
 80069fc:	482c      	ldr	r0, [pc, #176]	; (8006ab0 <ILI9341_DrawBar_ToDisplay+0xcc>)
 80069fe:	f7fd fabb 	bl	8003f78 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8006a02:	202a      	movs	r0, #42	; 0x2a
 8006a04:	f7ff ff2e 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8006a08:	4638      	mov	r0, r7
 8006a0a:	f7ff ff19 	bl	8006840 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8006a0e:	19e8      	adds	r0, r5, r7
 8006a10:	b280      	uxth	r0, r0
 8006a12:	3801      	subs	r0, #1
 8006a14:	b280      	uxth	r0, r0
 8006a16:	f7ff ff13 	bl	8006840 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8006a1a:	202b      	movs	r0, #43	; 0x2b
 8006a1c:	f7ff ff22 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8006a20:	4620      	mov	r0, r4
 8006a22:	f7ff ff0d 	bl	8006840 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8006a26:	1930      	adds	r0, r6, r4
 8006a28:	b280      	uxth	r0, r0
 8006a2a:	3801      	subs	r0, #1
 8006a2c:	b280      	uxth	r0, r0
 8006a2e:	f7ff ff07 	bl	8006840 <ILI9341_Write16>
  uint16_t Color_MSBFirst = SwapBytes(Color);
 8006a32:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8006a36:	f7ff feb5 	bl	80067a4 <SwapBytes>
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e004      	b.n	8006a48 <ILI9341_DrawBar_ToDisplay+0x64>
    ColumnColors[ColumnIndex] = Color_MSBFirst;
 8006a3e:	4a1d      	ldr	r2, [pc, #116]	; (8006ab4 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8006a40:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8006a44:	3301      	adds	r3, #1
 8006a46:	b21b      	sxth	r3, r3
 8006a48:	42ab      	cmp	r3, r5
 8006a4a:	dbf8      	blt.n	8006a3e <ILI9341_DrawBar_ToDisplay+0x5a>
  ILI9341_WriteCommand(0x2C); // Memory write.
 8006a4c:	202c      	movs	r0, #44	; 0x2c
 8006a4e:	f7ff ff09 	bl	8006864 <ILI9341_WriteCommand>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8006a52:	2400      	movs	r4, #0
 8006a54:	e01b      	b.n	8006a8e <ILI9341_DrawBar_ToDisplay+0xaa>
      SCB->DCCMVAC = op_addr;
 8006a56:	4818      	ldr	r0, [pc, #96]	; (8006ab8 <ILI9341_DrawBar_ToDisplay+0xd4>)
 8006a58:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8006a5c:	3120      	adds	r1, #32
      op_size -=           linesize;
 8006a5e:	3b20      	subs	r3, #32
    while (op_size > 0) {
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	dcf8      	bgt.n	8006a56 <ILI9341_DrawBar_ToDisplay+0x72>
  __ASM volatile ("dsb 0xF":::"memory");
 8006a64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006a68:	f3bf 8f6f 	isb	sy
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 8006a6c:	b292      	uxth	r2, r2
 8006a6e:	4911      	ldr	r1, [pc, #68]	; (8006ab4 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8006a70:	4b12      	ldr	r3, [pc, #72]	; (8006abc <ILI9341_DrawBar_ToDisplay+0xd8>)
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	f7ff fad4 	bl	8006020 <HAL_SPI_Transmit_DMA>
 8006a78:	b988      	cbnz	r0, 8006a9e <ILI9341_DrawBar_ToDisplay+0xba>
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8006a7a:	4b10      	ldr	r3, [pc, #64]	; (8006abc <ILI9341_DrawBar_ToDisplay+0xd8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d0f7      	beq.n	8006a7a <ILI9341_DrawBar_ToDisplay+0x96>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8006a8a:	3401      	adds	r4, #1
 8006a8c:	b224      	sxth	r4, r4
 8006a8e:	42b4      	cmp	r4, r6
 8006a90:	da08      	bge.n	8006aa4 <ILI9341_DrawBar_ToDisplay+0xc0>
    uint32_t NumBytes = Width * 2;
 8006a92:	006a      	lsls	r2, r5, #1
    uint32_t op_addr = (uint32_t) addr;
 8006a94:	4907      	ldr	r1, [pc, #28]	; (8006ab4 <ILI9341_DrawBar_ToDisplay+0xd0>)
  __ASM volatile ("dsb 0xF":::"memory");
 8006a96:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 8006a9a:	4613      	mov	r3, r2
}
 8006a9c:	e7e0      	b.n	8006a60 <ILI9341_DrawBar_ToDisplay+0x7c>
      Error_Handler();
 8006a9e:	f000 ff67 	bl	8007970 <Error_Handler>
 8006aa2:	e7ea      	b.n	8006a7a <ILI9341_DrawBar_ToDisplay+0x96>
  ILI9341_CSX_High();
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <ILI9341_DrawBar_ToDisplay+0xcc>)
 8006aaa:	f7fd fa65 	bl	8003f78 <HAL_GPIO_WritePin>
}
 8006aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab0:	40020800 	.word	0x40020800
 8006ab4:	20000200 	.word	0x20000200
 8006ab8:	e000ed00 	.word	0xe000ed00
 8006abc:	2000048c 	.word	0x2000048c

08006ac0 <ILI9341_SetDefaultState>:
  TextColor = TextColor_Default;
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <ILI9341_SetDefaultState+0x18>)
 8006ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ac6:	801a      	strh	r2, [r3, #0]
  TextBackgroundColor = TextBackgroundColor_Default;
 8006ac8:	4b04      	ldr	r3, [pc, #16]	; (8006adc <ILI9341_SetDefaultState+0x1c>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	801a      	strh	r2, [r3, #0]
  TextDrawMode = TextDrawMode_Default;
 8006ace:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <ILI9341_SetDefaultState+0x20>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	701a      	strb	r2, [r3, #0]
}
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	20000008 	.word	0x20000008
 8006adc:	20000480 	.word	0x20000480
 8006ae0:	2000000a 	.word	0x2000000a

08006ae4 <ILI9341_Initialize>:
{
 8006ae4:	b510      	push	{r4, lr}
  phspi = i_phspi;
 8006ae6:	4ba7      	ldr	r3, [pc, #668]	; (8006d84 <ILI9341_Initialize+0x2a0>)
 8006ae8:	6018      	str	r0, [r3, #0]
  UseBackBuffer = i_UseBackBuffer;
 8006aea:	b2c9      	uxtb	r1, r1
 8006aec:	4ba6      	ldr	r3, [pc, #664]	; (8006d88 <ILI9341_Initialize+0x2a4>)
 8006aee:	7019      	strb	r1, [r3, #0]
  if (UseBackBuffer)
 8006af0:	2900      	cmp	r1, #0
 8006af2:	f040 8139 	bne.w	8006d68 <ILI9341_Initialize+0x284>
  ILI9341_SetDefaultState();
 8006af6:	f7ff ffe3 	bl	8006ac0 <ILI9341_SetDefaultState>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_RESET);
 8006afa:	4ca4      	ldr	r4, [pc, #656]	; (8006d8c <ILI9341_Initialize+0x2a8>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	2101      	movs	r1, #1
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7fd fa39 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8006b06:	2001      	movs	r0, #1
 8006b08:	f7fc fea8 	bl	800385c <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_SET);
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7fd fa31 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8006b16:	2005      	movs	r0, #5
 8006b18:	f7fc fea0 	bl	800385c <HAL_Delay>
  ILI9341_CSX_Low();
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2102      	movs	r1, #2
 8006b20:	4620      	mov	r0, r4
 8006b22:	f7fd fa29 	bl	8003f78 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0xEF);
 8006b26:	f06f 0010 	mvn.w	r0, #16
 8006b2a:	f7ff fe9b 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x03);
 8006b2e:	2003      	movs	r0, #3
 8006b30:	f7ff fe6e 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x80);
 8006b34:	2080      	movs	r0, #128	; 0x80
 8006b36:	f7ff fe6b 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8006b3a:	2002      	movs	r0, #2
 8006b3c:	f7ff fe68 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERB);
 8006b40:	f06f 0030 	mvn.w	r0, #48	; 0x30
 8006b44:	f7ff fe8e 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f7ff fe61 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0XC1);
 8006b4e:	20c1      	movs	r0, #193	; 0xc1
 8006b50:	f7ff fe5e 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0X30);
 8006b54:	2030      	movs	r0, #48	; 0x30
 8006b56:	f7ff fe5b 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWER_SEQ);
 8006b5a:	f06f 0012 	mvn.w	r0, #18
 8006b5e:	f7ff fe81 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x64);
 8006b62:	2064      	movs	r0, #100	; 0x64
 8006b64:	f7ff fe54 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8006b68:	2003      	movs	r0, #3
 8006b6a:	f7ff fe51 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0X12);
 8006b6e:	2012      	movs	r0, #18
 8006b70:	f7ff fe4e 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0X81);
 8006b74:	2081      	movs	r0, #129	; 0x81
 8006b76:	f7ff fe4b 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCA);
 8006b7a:	f06f 0017 	mvn.w	r0, #23
 8006b7e:	f7ff fe71 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x85);
 8006b82:	2085      	movs	r0, #133	; 0x85
 8006b84:	f7ff fe44 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8006b88:	2000      	movs	r0, #0
 8006b8a:	f7ff fe41 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x78);
 8006b8e:	2078      	movs	r0, #120	; 0x78
 8006b90:	f7ff fe3e 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERA);
 8006b94:	f06f 0034 	mvn.w	r0, #52	; 0x34
 8006b98:	f7ff fe64 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x39);
 8006b9c:	2039      	movs	r0, #57	; 0x39
 8006b9e:	f7ff fe37 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x2C);
 8006ba2:	202c      	movs	r0, #44	; 0x2c
 8006ba4:	f7ff fe34 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8006ba8:	2000      	movs	r0, #0
 8006baa:	f7ff fe31 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x34);
 8006bae:	2034      	movs	r0, #52	; 0x34
 8006bb0:	f7ff fe2e 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8006bb4:	2002      	movs	r0, #2
 8006bb6:	f7ff fe2b 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_PRC);
 8006bba:	f06f 0008 	mvn.w	r0, #8
 8006bbe:	f7ff fe51 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x20);
 8006bc2:	2020      	movs	r0, #32
 8006bc4:	f7ff fe24 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCB);
 8006bc8:	f06f 0015 	mvn.w	r0, #21
 8006bcc:	f7ff fe4a 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f7ff fe1d 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	f7ff fe1a 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR1); // Power control
 8006bdc:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 8006be0:	f7ff fe40 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x23); // VRH=[5:0]
 8006be4:	2023      	movs	r0, #35	; 0x23
 8006be6:	f7ff fe13 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR2); // Power control
 8006bea:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 8006bee:	f7ff fe39 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x10); // BT=[3:0]
 8006bf2:	2010      	movs	r0, #16
 8006bf4:	f7ff fe0c 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR1); // VCOM control
 8006bf8:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 8006bfc:	f7ff fe32 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x3e); // VMH=[6:0]
 8006c00:	203e      	movs	r0, #62	; 0x3e
 8006c02:	f7ff fe05 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x28); // VML=[6:0]
 8006c06:	2028      	movs	r0, #40	; 0x28
 8006c08:	f7ff fe02 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR2); // VCOM control 2
 8006c0c:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8006c10:	f7ff fe28 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x86); // VMF=[6:0]
 8006c14:	2086      	movs	r0, #134	; 0x86
 8006c16:	f7ff fdfb 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_MADCTL); // Memory Access Control
 8006c1a:	2036      	movs	r0, #54	; 0x36
 8006c1c:	f7ff fe22 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x48);
 8006c20:	2048      	movs	r0, #72	; 0x48
 8006c22:	f7ff fdf5 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VSCRSADD); // Vertical scroll
 8006c26:	2037      	movs	r0, #55	; 0x37
 8006c28:	f7ff fe1c 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write16(0); // Zero
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	f7ff fe07 	bl	8006840 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PIXFMT);
 8006c32:	203a      	movs	r0, #58	; 0x3a
 8006c34:	f7ff fe16 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x55); // DPI=[6:4] DBI=[2:0]
 8006c38:	2055      	movs	r0, #85	; 0x55
 8006c3a:	f7ff fde9 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_FRMCTR1);
 8006c3e:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 8006c42:	f7ff fe0f 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8006c46:	2000      	movs	r0, #0
 8006c48:	f7ff fde2 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x18);
 8006c4c:	2018      	movs	r0, #24
 8006c4e:	f7ff fddf 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_DFUNCTR); // Display Function Control
 8006c52:	f06f 0049 	mvn.w	r0, #73	; 0x49
 8006c56:	f7ff fe05 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x08);
 8006c5a:	2008      	movs	r0, #8
 8006c5c:	f7ff fdd8 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x82);
 8006c60:	2082      	movs	r0, #130	; 0x82
 8006c62:	f7ff fdd5 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x27);
 8006c66:	2027      	movs	r0, #39	; 0x27
 8006c68:	f7ff fdd2 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(0xF2); // 3Gamma
 8006c6c:	f06f 000d 	mvn.w	r0, #13
 8006c70:	f7ff fdf8 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00); // Disable
 8006c74:	2000      	movs	r0, #0
 8006c76:	f7ff fdcb 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GAMMASET); // Gamma curve selected
 8006c7a:	2026      	movs	r0, #38	; 0x26
 8006c7c:	f7ff fdf2 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x01);
 8006c80:	2001      	movs	r0, #1
 8006c82:	f7ff fdc5 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRP1); // Set Gamma
 8006c86:	f06f 001f 	mvn.w	r0, #31
 8006c8a:	f7ff fdeb 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x0F);
 8006c8e:	200f      	movs	r0, #15
 8006c90:	f7ff fdbe 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8006c94:	2031      	movs	r0, #49	; 0x31
 8006c96:	f7ff fdbb 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x2B);
 8006c9a:	202b      	movs	r0, #43	; 0x2b
 8006c9c:	f7ff fdb8 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8006ca0:	200c      	movs	r0, #12
 8006ca2:	f7ff fdb5 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8006ca6:	200e      	movs	r0, #14
 8006ca8:	f7ff fdb2 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8006cac:	2008      	movs	r0, #8
 8006cae:	f7ff fdaf 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x4E);
 8006cb2:	204e      	movs	r0, #78	; 0x4e
 8006cb4:	f7ff fdac 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0xF1);
 8006cb8:	20f1      	movs	r0, #241	; 0xf1
 8006cba:	f7ff fda9 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x37);
 8006cbe:	2037      	movs	r0, #55	; 0x37
 8006cc0:	f7ff fda6 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8006cc4:	2007      	movs	r0, #7
 8006cc6:	f7ff fda3 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x10);
 8006cca:	2010      	movs	r0, #16
 8006ccc:	f7ff fda0 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8006cd0:	2003      	movs	r0, #3
 8006cd2:	f7ff fd9d 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8006cd6:	200e      	movs	r0, #14
 8006cd8:	f7ff fd9a 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x09);
 8006cdc:	2009      	movs	r0, #9
 8006cde:	f7ff fd97 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	f7ff fd94 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRN1); // Set Gamma
 8006ce8:	f06f 001e 	mvn.w	r0, #30
 8006cec:	f7ff fdba 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	f7ff fd8d 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8006cf6:	200e      	movs	r0, #14
 8006cf8:	f7ff fd8a 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x14);
 8006cfc:	2014      	movs	r0, #20
 8006cfe:	f7ff fd87 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8006d02:	2003      	movs	r0, #3
 8006d04:	f7ff fd84 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x11);
 8006d08:	2011      	movs	r0, #17
 8006d0a:	f7ff fd81 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8006d0e:	2007      	movs	r0, #7
 8006d10:	f7ff fd7e 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8006d14:	2031      	movs	r0, #49	; 0x31
 8006d16:	f7ff fd7b 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0xC1);
 8006d1a:	20c1      	movs	r0, #193	; 0xc1
 8006d1c:	f7ff fd78 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x48);
 8006d20:	2048      	movs	r0, #72	; 0x48
 8006d22:	f7ff fd75 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8006d26:	2008      	movs	r0, #8
 8006d28:	f7ff fd72 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8006d2c:	200f      	movs	r0, #15
 8006d2e:	f7ff fd6f 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8006d32:	200c      	movs	r0, #12
 8006d34:	f7ff fd6c 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8006d38:	2031      	movs	r0, #49	; 0x31
 8006d3a:	f7ff fd69 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x36);
 8006d3e:	2036      	movs	r0, #54	; 0x36
 8006d40:	f7ff fd66 	bl	8006810 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8006d44:	200f      	movs	r0, #15
 8006d46:	f7ff fd63 	bl	8006810 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_SLPOUT); // Exit sleep
 8006d4a:	2011      	movs	r0, #17
 8006d4c:	f7ff fd8a 	bl	8006864 <ILI9341_WriteCommand>
  HAL_Delay(120);
 8006d50:	2078      	movs	r0, #120	; 0x78
 8006d52:	f7fc fd83 	bl	800385c <HAL_Delay>
  ILI9341_WriteCommand(ILI9341_DISPON); // Display on
 8006d56:	2029      	movs	r0, #41	; 0x29
 8006d58:	f7ff fd84 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_CSX_High();
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	2102      	movs	r1, #2
 8006d60:	4620      	mov	r0, r4
 8006d62:	f7fd f909 	bl	8003f78 <HAL_GPIO_WritePin>
}
 8006d66:	bd10      	pop	{r4, pc}
    pBackBuffer = calloc(1, ILI9341_Width * ILI9341_Height * sizeof(uint16_t));
 8006d68:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	f001 facd 	bl	800830c <calloc>
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <ILI9341_Initialize+0x2ac>)
 8006d74:	6018      	str	r0, [r3, #0]
    if (!pBackBuffer)
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f47f aebd 	bne.w	8006af6 <ILI9341_Initialize+0x12>
      Error_Handler();
 8006d7c:	f000 fdf8 	bl	8007970 <Error_Handler>
 8006d80:	e6b9      	b.n	8006af6 <ILI9341_Initialize+0x12>
 8006d82:	bf00      	nop
 8006d84:	2000048c 	.word	0x2000048c
 8006d88:	20000482 	.word	0x20000482
 8006d8c:	40020800 	.word	0x40020800
 8006d90:	20000484 	.word	0x20000484

08006d94 <ILI9341_SetAddrWindow>:
{
 8006d94:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 8006d98:	4681      	mov	r9, r0
 8006d9a:	460f      	mov	r7, r1
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	461c      	mov	r4, r3
 8006da0:	f99d 8018 	ldrsb.w	r8, [sp, #24]
  if (UseCS)
 8006da4:	f1b8 0f00 	cmp.w	r8, #0
 8006da8:	d11b      	bne.n	8006de2 <ILI9341_SetAddrWindow+0x4e>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 8006daa:	444e      	add	r6, r9
 8006dac:	3e01      	subs	r6, #1
 8006dae:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 8006db2:	443c      	add	r4, r7
 8006db4:	3c01      	subs	r4, #1
 8006db6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 8006dba:	202a      	movs	r0, #42	; 0x2a
 8006dbc:	f7ff fd52 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write32(xa);
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff fd46 	bl	8006852 <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_PASET); // Row addr set
 8006dc6:	202b      	movs	r0, #43	; 0x2b
 8006dc8:	f7ff fd4c 	bl	8006864 <ILI9341_WriteCommand>
  ILI9341_Write32(ya);
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f7ff fd40 	bl	8006852 <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_RAMWR); // Write to RAM
 8006dd2:	202c      	movs	r0, #44	; 0x2c
 8006dd4:	f7ff fd46 	bl	8006864 <ILI9341_WriteCommand>
  if (UseCS)
 8006dd8:	f1b8 0f00 	cmp.w	r8, #0
 8006ddc:	d107      	bne.n	8006dee <ILI9341_SetAddrWindow+0x5a>
}
 8006dde:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    ILI9341_CSX_Low();
 8006de2:	2200      	movs	r2, #0
 8006de4:	2102      	movs	r1, #2
 8006de6:	4805      	ldr	r0, [pc, #20]	; (8006dfc <ILI9341_SetAddrWindow+0x68>)
 8006de8:	f7fd f8c6 	bl	8003f78 <HAL_GPIO_WritePin>
 8006dec:	e7dd      	b.n	8006daa <ILI9341_SetAddrWindow+0x16>
    ILI9341_CSX_High();
 8006dee:	2201      	movs	r2, #1
 8006df0:	2102      	movs	r1, #2
 8006df2:	4802      	ldr	r0, [pc, #8]	; (8006dfc <ILI9341_SetAddrWindow+0x68>)
 8006df4:	f7fd f8c0 	bl	8003f78 <HAL_GPIO_WritePin>
}
 8006df8:	e7f1      	b.n	8006dde <ILI9341_SetAddrWindow+0x4a>
 8006dfa:	bf00      	nop
 8006dfc:	40020800 	.word	0x40020800

08006e00 <ILI9341_DrawPixel_ToDisplay>:
{
 8006e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e02:	b083      	sub	sp, #12
 8006e04:	4604      	mov	r4, r0
 8006e06:	460d      	mov	r5, r1
 8006e08:	4616      	mov	r6, r2
  if (UseCS)
 8006e0a:	461f      	mov	r7, r3
 8006e0c:	b95b      	cbnz	r3, 8006e26 <ILI9341_DrawPixel_ToDisplay+0x26>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8006e0e:	b2a0      	uxth	r0, r4
 8006e10:	0feb      	lsrs	r3, r5, #31
 8006e12:	28ef      	cmp	r0, #239	; 0xef
 8006e14:	bf88      	it	hi
 8006e16:	f043 0301 	orrhi.w	r3, r3, #1
 8006e1a:	b913      	cbnz	r3, 8006e22 <ILI9341_DrawPixel_ToDisplay+0x22>
 8006e1c:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 8006e20:	db07      	blt.n	8006e32 <ILI9341_DrawPixel_ToDisplay+0x32>
}
 8006e22:	b003      	add	sp, #12
 8006e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ILI9341_CSX_Low();
 8006e26:	2200      	movs	r2, #0
 8006e28:	2102      	movs	r1, #2
 8006e2a:	480a      	ldr	r0, [pc, #40]	; (8006e54 <ILI9341_DrawPixel_ToDisplay+0x54>)
 8006e2c:	f7fd f8a4 	bl	8003f78 <HAL_GPIO_WritePin>
 8006e30:	e7ed      	b.n	8006e0e <ILI9341_DrawPixel_ToDisplay+0xe>
  ILI9341_SetAddrWindow(X, Y, 1, 1, 0);
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	2301      	movs	r3, #1
 8006e36:	461a      	mov	r2, r3
 8006e38:	b2a9      	uxth	r1, r5
 8006e3a:	f7ff ffab 	bl	8006d94 <ILI9341_SetAddrWindow>
  ILI9341_Write16(Color);
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f7ff fcfe 	bl	8006840 <ILI9341_Write16>
  if (UseCS)
 8006e44:	2f00      	cmp	r7, #0
 8006e46:	d0ec      	beq.n	8006e22 <ILI9341_DrawPixel_ToDisplay+0x22>
    ILI9341_CSX_Low();
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2102      	movs	r1, #2
 8006e4c:	4801      	ldr	r0, [pc, #4]	; (8006e54 <ILI9341_DrawPixel_ToDisplay+0x54>)
 8006e4e:	f7fd f893 	bl	8003f78 <HAL_GPIO_WritePin>
 8006e52:	e7e6      	b.n	8006e22 <ILI9341_DrawPixel_ToDisplay+0x22>
 8006e54:	40020800 	.word	0x40020800

08006e58 <ILI9341_DrawPixel>:
{
 8006e58:	b510      	push	{r4, lr}
  if (UseBackBuffer)
 8006e5a:	4c04      	ldr	r4, [pc, #16]	; (8006e6c <ILI9341_DrawPixel+0x14>)
 8006e5c:	7824      	ldrb	r4, [r4, #0]
 8006e5e:	b114      	cbz	r4, 8006e66 <ILI9341_DrawPixel+0xe>
    ILI9341_DrawPixel_ToBackBuffer(X, Y, Color);
 8006e60:	f7ff fcae 	bl	80067c0 <ILI9341_DrawPixel_ToBackBuffer>
}
 8006e64:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixel_ToDisplay(X, Y, Color, UseCS);
 8006e66:	f7ff ffcb 	bl	8006e00 <ILI9341_DrawPixel_ToDisplay>
}
 8006e6a:	e7fb      	b.n	8006e64 <ILI9341_DrawPixel+0xc>
 8006e6c:	20000482 	.word	0x20000482

08006e70 <ILI9341_DrawPixels_MSBFirst>:
{
 8006e70:	b510      	push	{r4, lr}
 8006e72:	b082      	sub	sp, #8
  if (UseBackBuffer)
 8006e74:	4c06      	ldr	r4, [pc, #24]	; (8006e90 <ILI9341_DrawPixels_MSBFirst+0x20>)
 8006e76:	7824      	ldrb	r4, [r4, #0]
 8006e78:	b12c      	cbz	r4, 8006e86 <ILI9341_DrawPixels_MSBFirst+0x16>
    ILI9341_DrawPixels_MSBFirst_ToBackBuffer(X, Y, Width, Height, pPixels);
 8006e7a:	9c04      	ldr	r4, [sp, #16]
 8006e7c:	9400      	str	r4, [sp, #0]
 8006e7e:	f7ff fd05 	bl	800688c <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>
}
 8006e82:	b002      	add	sp, #8
 8006e84:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixels_MSBFirst_ToDisplay(X, Y, Width, Height, pPixels);
 8006e86:	9c04      	ldr	r4, [sp, #16]
 8006e88:	9400      	str	r4, [sp, #0]
 8006e8a:	f7ff fd43 	bl	8006914 <ILI9341_DrawPixels_MSBFirst_ToDisplay>
}
 8006e8e:	e7f8      	b.n	8006e82 <ILI9341_DrawPixels_MSBFirst+0x12>
 8006e90:	20000482 	.word	0x20000482

08006e94 <ILI9341_DrawBar_ToBackBuffer>:
{
 8006e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	468b      	mov	fp, r1
 8006e9e:	4617      	mov	r7, r2
 8006ea0:	9301      	str	r3, [sp, #4]
  Color_MSBFirst = SwapBytes(i_Color);
 8006ea2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8006ea6:	f7ff fc7d 	bl	80067a4 <SwapBytes>
 8006eaa:	4681      	mov	r9, r0
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8006eac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4658      	mov	r0, fp
 8006eb4:	f7ff fc7b 	bl	80067ae <Clamp_uint16>
 8006eb8:	4682      	mov	sl, r0
 8006eba:	e00e      	b.n	8006eda <ILI9341_DrawBar_ToBackBuffer+0x46>
      pLine[X] = Color_MSBFirst;
 8006ebc:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8006ec0:	f828 9003 	strh.w	r9, [r8, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8006ec4:	3401      	adds	r4, #1
 8006ec6:	19f0      	adds	r0, r6, r7
 8006ec8:	22f0      	movs	r2, #240	; 0xf0
 8006eca:	2100      	movs	r1, #0
 8006ecc:	b280      	uxth	r0, r0
 8006ece:	f7ff fc6e 	bl	80067ae <Clamp_uint16>
 8006ed2:	42a0      	cmp	r0, r4
 8006ed4:	d8f2      	bhi.n	8006ebc <ILI9341_DrawBar_ToBackBuffer+0x28>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8006ed6:	f10a 0a01 	add.w	sl, sl, #1
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	eb0b 0003 	add.w	r0, fp, r3
 8006ee0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	b280      	uxth	r0, r0
 8006ee8:	f7ff fc61 	bl	80067ae <Clamp_uint16>
 8006eec:	4550      	cmp	r0, sl
 8006eee:	d90c      	bls.n	8006f0a <ILI9341_DrawBar_ToBackBuffer+0x76>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <ILI9341_DrawBar_ToBackBuffer+0x7c>)
 8006ef2:	f8d3 8000 	ldr.w	r8, [r3]
 8006ef6:	ebca 150a 	rsb	r5, sl, sl, lsl #4
 8006efa:	016d      	lsls	r5, r5, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8006efc:	22f0      	movs	r2, #240	; 0xf0
 8006efe:	2100      	movs	r1, #0
 8006f00:	4630      	mov	r0, r6
 8006f02:	f7ff fc54 	bl	80067ae <Clamp_uint16>
 8006f06:	4604      	mov	r4, r0
 8006f08:	e7dd      	b.n	8006ec6 <ILI9341_DrawBar_ToBackBuffer+0x32>
}
 8006f0a:	b003      	add	sp, #12
 8006f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f10:	20000484 	.word	0x20000484

08006f14 <ILI9341_DrawBar>:
{
 8006f14:	b530      	push	{r4, r5, lr}
 8006f16:	b083      	sub	sp, #12
 8006f18:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  if (UseBackBuffer)
 8006f1c:	4d05      	ldr	r5, [pc, #20]	; (8006f34 <ILI9341_DrawBar+0x20>)
 8006f1e:	782d      	ldrb	r5, [r5, #0]
 8006f20:	b125      	cbz	r5, 8006f2c <ILI9341_DrawBar+0x18>
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 8006f22:	9400      	str	r4, [sp, #0]
 8006f24:	f7ff ffb6 	bl	8006e94 <ILI9341_DrawBar_ToBackBuffer>
}
 8006f28:	b003      	add	sp, #12
 8006f2a:	bd30      	pop	{r4, r5, pc}
    ILI9341_DrawBar_ToDisplay(X, Y, Width, Height, Color);
 8006f2c:	9400      	str	r4, [sp, #0]
 8006f2e:	f7ff fd59 	bl	80069e4 <ILI9341_DrawBar_ToDisplay>
}
 8006f32:	e7f9      	b.n	8006f28 <ILI9341_DrawBar+0x14>
 8006f34:	20000482 	.word	0x20000482

08006f38 <ILI9341_Clear>:
{
 8006f38:	b500      	push	{lr}
 8006f3a:	b083      	sub	sp, #12
  ILI9341_DrawBar(0, 0, ILI9341_Width, ILI9341_Height, Color);
 8006f3c:	9000      	str	r0, [sp, #0]
 8006f3e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006f42:	22f0      	movs	r2, #240	; 0xf0
 8006f44:	2100      	movs	r1, #0
 8006f46:	4608      	mov	r0, r1
 8006f48:	f7ff ffe4 	bl	8006f14 <ILI9341_DrawBar>
}
 8006f4c:	b003      	add	sp, #12
 8006f4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006f54 <ILI9341_SetFont>:
  Result = pFont;
 8006f54:	4b02      	ldr	r3, [pc, #8]	; (8006f60 <ILI9341_SetFont+0xc>)
 8006f56:	681a      	ldr	r2, [r3, #0]
  pFont = i_pFont;
 8006f58:	6018      	str	r0, [r3, #0]
}
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20000488 	.word	0x20000488

08006f64 <ILI9341_GetFontYSpacing>:
  return pFont->yAdvance;
 8006f64:	4b01      	ldr	r3, [pc, #4]	; (8006f6c <ILI9341_GetFontYSpacing+0x8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
}
 8006f68:	7a98      	ldrb	r0, [r3, #10]
 8006f6a:	4770      	bx	lr
 8006f6c:	20000488 	.word	0x20000488

08006f70 <GetCharWidth>:

uint16_t GetCharWidth(uint8_t Ch)
{
 8006f70:	b510      	push	{r4, lr}
 8006f72:	4604      	mov	r4, r0
  if (IsNonPrintingChar(Ch))
 8006f74:	f7ff fc3c 	bl	80067f0 <IsNonPrintingChar>
 8006f78:	b980      	cbnz	r0, 8006f9c <GetCharWidth+0x2c>
    return 0;

  Ch -= pFont->first;
 8006f7a:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <GetCharWidth+0x30>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	7a18      	ldrb	r0, [r3, #8]
 8006f80:	1a20      	subs	r0, r4, r0
 8006f82:	b2c0      	uxtb	r0, r0
  GFXglyph *pGlyph = &pFont->pGlyph[Ch];
 8006f84:	685c      	ldr	r4, [r3, #4]
 8006f86:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  uint8_t w = pGlyph->width;
 8006f8a:	7882      	ldrb	r2, [r0, #2]
  int8_t xo = pGlyph->xOffset;
 8006f8c:	f990 3005 	ldrsb.w	r3, [r0, #5]

  if (w == 0)
 8006f90:	b112      	cbz	r2, 8006f98 <GetCharWidth+0x28>
    return pGlyph->xAdvance;

  return xo + w;
 8006f92:	1898      	adds	r0, r3, r2
 8006f94:	b280      	uxth	r0, r0
}
 8006f96:	bd10      	pop	{r4, pc}
    return pGlyph->xAdvance;
 8006f98:	7900      	ldrb	r0, [r0, #4]
 8006f9a:	e7fc      	b.n	8006f96 <GetCharWidth+0x26>
    return 0;
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	e7fa      	b.n	8006f96 <GetCharWidth+0x26>
 8006fa0:	20000488 	.word	0x20000488

08006fa4 <ILI9341_GetTextWidth>:

uint16_t ILI9341_GetTextWidth(const char *Text)
{
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	4604      	mov	r4, r0
  uint16_t TotalWidth, NumChars;
  const char *pText;

  NumChars = strlen(Text);
 8006fa8:	f7fc fa3a 	bl	8003420 <strlen>
 8006fac:	b287      	uxth	r7, r0

  pText = Text;

  TotalWidth=0;

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8006fae:	2500      	movs	r5, #0
  TotalWidth=0;
 8006fb0:	462e      	mov	r6, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8006fb2:	e007      	b.n	8006fc4 <ILI9341_GetTextWidth+0x20>
    TotalWidth += GetCharWidth(*pText++);
 8006fb4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006fb8:	f7ff ffda 	bl	8006f70 <GetCharWidth>
 8006fbc:	4406      	add	r6, r0
 8006fbe:	b2b6      	uxth	r6, r6
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	b2ad      	uxth	r5, r5
 8006fc4:	42bd      	cmp	r5, r7
 8006fc6:	d3f5      	bcc.n	8006fb4 <ILI9341_GetTextWidth+0x10>

  return TotalWidth;
}
 8006fc8:	4630      	mov	r0, r6
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fcc <ILI9341_DrawCharAtXY>:
uint8_t ILI9341_DrawCharAtXY(uint8_t Ch, uint16_t X, uint16_t Y, uint16_t Color)
// X: X position of left edge of char.
// Y: Y position of line on which the char sits. The char may go below this line (e.g. g j p q y).
// Returns required X advance.
// Based on Adafruit_GFX.cpp.
{
 8006fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd0:	b08d      	sub	sp, #52	; 0x34
 8006fd2:	9105      	str	r1, [sp, #20]
 8006fd4:	9208      	str	r2, [sp, #32]
 8006fd6:	9306      	str	r3, [sp, #24]
  uint8_t *pBitmap;
  uint16_t Color_MSBFirst, TextBackgroundColor_MSBFirst;
  uint16_t *pMemChar, *pMemCharPixel;
  uint8_t CharWidth, CharHeight;

  if (!pFont)
 8006fd8:	4b9a      	ldr	r3, [pc, #616]	; (8007244 <ILI9341_DrawCharAtXY+0x278>)
 8006fda:	681c      	ldr	r4, [r3, #0]
 8006fdc:	2c00      	cmp	r4, #0
 8006fde:	f000 812d 	beq.w	800723c <ILI9341_DrawCharAtXY+0x270>
 8006fe2:	4605      	mov	r5, r0
    return 0;
  if (IsNonPrintingChar(Ch))
 8006fe4:	f7ff fc04 	bl	80067f0 <IsNonPrintingChar>
 8006fe8:	9003      	str	r0, [sp, #12]
 8006fea:	2800      	cmp	r0, #0
 8006fec:	f040 8128 	bne.w	8007240 <ILI9341_DrawCharAtXY+0x274>
    return 0;

  Ch -= pFont->first;
 8006ff0:	7a23      	ldrb	r3, [r4, #8]
 8006ff2:	1aed      	subs	r5, r5, r3
 8006ff4:	b2ed      	uxtb	r5, r5
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 8006ff6:	4b94      	ldr	r3, [pc, #592]	; (8007248 <ILI9341_DrawCharAtXY+0x27c>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d029      	beq.n	8007052 <ILI9341_DrawCharAtXY+0x86>
    Y -= (pFont->yOffsetMin / 2);

  pGlyph = &pFont->pGlyph[Ch];
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8007004:	920a      	str	r2, [sp, #40]	; 0x28
  pBitmap = pFont->pBitmap;
 8007006:	f8d4 9000 	ldr.w	r9, [r4]

  bo = pGlyph->bitmapOffset;
 800700a:	f833 6035 	ldrh.w	r6, [r3, r5, lsl #3]
  w = pGlyph->width;
 800700e:	4613      	mov	r3, r2
 8007010:	f892 8002 	ldrb.w	r8, [r2, #2]
  h = pGlyph->height;
 8007014:	f892 b003 	ldrb.w	fp, [r2, #3]
  xo = pGlyph->xOffset;
 8007018:	f992 2005 	ldrsb.w	r2, [r2, #5]
 800701c:	9204      	str	r2, [sp, #16]
  yo = pGlyph->yOffset;
 800701e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007022:	9307      	str	r3, [sp, #28]
  bits = 0;
  bit = 0;
  yo_min = pFont->yOffsetMin;
 8007024:	f994 a00b 	ldrsb.w	sl, [r4, #11]
  yo_max = pFont->yOffsetMax;
 8007028:	f994 500c 	ldrsb.w	r5, [r4, #12]

  switch(TextDrawMode)
 800702c:	4b87      	ldr	r3, [pc, #540]	; (800724c <ILI9341_DrawCharAtXY+0x280>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d061      	beq.n	80070f8 <ILI9341_DrawCharAtXY+0x12c>
 8007034:	2b03      	cmp	r3, #3
 8007036:	f000 80bc 	beq.w	80071b2 <ILI9341_DrawCharAtXY+0x1e6>
 800703a:	2b01      	cmp	r3, #1
 800703c:	d015      	beq.n	800706a <ILI9341_DrawCharAtXY+0x9e>
      }
      ILI9341_CSX_High();
      break;
  }

  if (w == 0)
 800703e:	f1b8 0f00 	cmp.w	r8, #0
 8007042:	f000 80f8 	beq.w	8007236 <ILI9341_DrawCharAtXY+0x26a>
    return pGlyph->xAdvance;
  return xo + w;
 8007046:	9804      	ldr	r0, [sp, #16]
 8007048:	4440      	add	r0, r8
 800704a:	b2c0      	uxtb	r0, r0
}
 800704c:	b00d      	add	sp, #52	; 0x34
 800704e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Y -= (pFont->yOffsetMin / 2);
 8007052:	f994 300b 	ldrsb.w	r3, [r4, #11]
 8007056:	2b00      	cmp	r3, #0
 8007058:	db05      	blt.n	8007066 <ILI9341_DrawCharAtXY+0x9a>
 800705a:	9a08      	ldr	r2, [sp, #32]
 800705c:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 8007060:	b29b      	uxth	r3, r3
 8007062:	9308      	str	r3, [sp, #32]
 8007064:	e7cb      	b.n	8006ffe <ILI9341_DrawCharAtXY+0x32>
 8007066:	3301      	adds	r3, #1
 8007068:	e7f7      	b.n	800705a <ILI9341_DrawCharAtXY+0x8e>
      Color_MSBFirst = SwapBytes(Color);
 800706a:	9806      	ldr	r0, [sp, #24]
 800706c:	f7ff fb9a 	bl	80067a4 <SwapBytes>
 8007070:	4605      	mov	r5, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8007072:	4b77      	ldr	r3, [pc, #476]	; (8007250 <ILI9341_DrawCharAtXY+0x284>)
 8007074:	8818      	ldrh	r0, [r3, #0]
 8007076:	f7ff fb95 	bl	80067a4 <SwapBytes>
 800707a:	4604      	mov	r4, r0
      pMemChar = (uint16_t *)malloc(w * h * 2);
 800707c:	fb0b f008 	mul.w	r0, fp, r8
 8007080:	0040      	lsls	r0, r0, #1
 8007082:	f001 f975 	bl	8008370 <malloc>
 8007086:	4607      	mov	r7, r0
      pMemCharPixel = pMemChar;
 8007088:	4684      	mov	ip, r0
  bit = 0;
 800708a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800708e:	4670      	mov	r0, lr
  bits = 0;
 8007090:	4673      	mov	r3, lr
      for (yy = 0; yy < h; ++yy)
 8007092:	e01c      	b.n	80070ce <ILI9341_DrawCharAtXY+0x102>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 8007094:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007098:	d113      	bne.n	80070c2 <ILI9341_DrawCharAtXY+0xf6>
 800709a:	4620      	mov	r0, r4
 800709c:	f82c 0b02 	strh.w	r0, [ip], #2
          bits <<= 1;
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 80070a4:	3201      	adds	r2, #1
 80070a6:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 80070a8:	4608      	mov	r0, r1
        for (xx = 0; xx < w; ++xx)
 80070aa:	4542      	cmp	r2, r8
 80070ac:	d20b      	bcs.n	80070c6 <ILI9341_DrawCharAtXY+0xfa>
          if (!(bit++ & 7))
 80070ae:	1c41      	adds	r1, r0, #1
 80070b0:	b2c9      	uxtb	r1, r1
 80070b2:	f010 0f07 	tst.w	r0, #7
 80070b6:	d1ed      	bne.n	8007094 <ILI9341_DrawCharAtXY+0xc8>
            bits = pBitmap[bo++];
 80070b8:	1c70      	adds	r0, r6, #1
 80070ba:	f819 3006 	ldrb.w	r3, [r9, r6]
 80070be:	b286      	uxth	r6, r0
 80070c0:	e7e8      	b.n	8007094 <ILI9341_DrawCharAtXY+0xc8>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80070c2:	4628      	mov	r0, r5
 80070c4:	e7ea      	b.n	800709c <ILI9341_DrawCharAtXY+0xd0>
      for (yy = 0; yy < h; ++yy)
 80070c6:	f10e 0e01 	add.w	lr, lr, #1
 80070ca:	fa5f fe8e 	uxtb.w	lr, lr
 80070ce:	45de      	cmp	lr, fp
 80070d0:	d201      	bcs.n	80070d6 <ILI9341_DrawCharAtXY+0x10a>
        for (xx = 0; xx < w; ++xx)
 80070d2:	9a03      	ldr	r2, [sp, #12]
 80070d4:	e7e9      	b.n	80070aa <ILI9341_DrawCharAtXY+0xde>
      ILI9341_DrawPixels_MSBFirst(X + xo, Y + yo, w, h, pMemChar);
 80070d6:	9908      	ldr	r1, [sp, #32]
 80070d8:	9b07      	ldr	r3, [sp, #28]
 80070da:	4419      	add	r1, r3
 80070dc:	9805      	ldr	r0, [sp, #20]
 80070de:	9b04      	ldr	r3, [sp, #16]
 80070e0:	4418      	add	r0, r3
 80070e2:	9700      	str	r7, [sp, #0]
 80070e4:	465b      	mov	r3, fp
 80070e6:	4642      	mov	r2, r8
 80070e8:	b289      	uxth	r1, r1
 80070ea:	b280      	uxth	r0, r0
 80070ec:	f7ff fec0 	bl	8006e70 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 80070f0:	4638      	mov	r0, r7
 80070f2:	f001 f945 	bl	8008380 <free>
      break;
 80070f6:	e7a2      	b.n	800703e <ILI9341_DrawCharAtXY+0x72>
      Color_MSBFirst = SwapBytes(Color);
 80070f8:	9806      	ldr	r0, [sp, #24]
 80070fa:	f7ff fb53 	bl	80067a4 <SwapBytes>
 80070fe:	4604      	mov	r4, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8007100:	4b53      	ldr	r3, [pc, #332]	; (8007250 <ILI9341_DrawCharAtXY+0x284>)
 8007102:	8818      	ldrh	r0, [r3, #0]
 8007104:	f7ff fb4e 	bl	80067a4 <SwapBytes>
 8007108:	4607      	mov	r7, r0
      CharWidth = pGlyph->xAdvance;
 800710a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710c:	791a      	ldrb	r2, [r3, #4]
 800710e:	9206      	str	r2, [sp, #24]
      CharHeight = yo_max - yo_min + 1;
 8007110:	eba5 030a 	sub.w	r3, r5, sl
 8007114:	b2db      	uxtb	r3, r3
 8007116:	3301      	adds	r3, #1
 8007118:	b2db      	uxtb	r3, r3
 800711a:	930b      	str	r3, [sp, #44]	; 0x2c
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 800711c:	fb02 f503 	mul.w	r5, r2, r3
 8007120:	0068      	lsls	r0, r5, #1
 8007122:	f001 f925 	bl	8008370 <malloc>
 8007126:	4603      	mov	r3, r0
 8007128:	9009      	str	r0, [sp, #36]	; 0x24
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800712a:	2200      	movs	r2, #0
 800712c:	e003      	b.n	8007136 <ILI9341_DrawCharAtXY+0x16a>
        *pMemCharPixel++ = TextBackgroundColor_MSBFirst;
 800712e:	f823 7b02 	strh.w	r7, [r3], #2
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8007132:	3201      	adds	r2, #1
 8007134:	b292      	uxth	r2, r2
 8007136:	4295      	cmp	r5, r2
 8007138:	dcf9      	bgt.n	800712e <ILI9341_DrawCharAtXY+0x162>
  bit = 0;
 800713a:	9f03      	ldr	r7, [sp, #12]
 800713c:	463d      	mov	r5, r7
  bits = 0;
 800713e:	463b      	mov	r3, r7
 8007140:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007144:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8007148:	e018      	b.n	800717c <ILI9341_DrawCharAtXY+0x1b0>
          if (bits & 0x80)
 800714a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800714e:	d111      	bne.n	8007174 <ILI9341_DrawCharAtXY+0x1a8>
          ++pMemCharPixel;
 8007150:	3002      	adds	r0, #2
          bits <<= 1;
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 8007156:	3201      	adds	r2, #1
 8007158:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 800715a:	460d      	mov	r5, r1
        for (xx = 0; xx < w; ++xx)
 800715c:	4542      	cmp	r2, r8
 800715e:	d20b      	bcs.n	8007178 <ILI9341_DrawCharAtXY+0x1ac>
          if (!(bit++ & 7))
 8007160:	1c69      	adds	r1, r5, #1
 8007162:	b2c9      	uxtb	r1, r1
 8007164:	f015 0f07 	tst.w	r5, #7
 8007168:	d1ef      	bne.n	800714a <ILI9341_DrawCharAtXY+0x17e>
            bits = pBitmap[bo++];
 800716a:	1c75      	adds	r5, r6, #1
 800716c:	f819 3006 	ldrb.w	r3, [r9, r6]
 8007170:	b2ae      	uxth	r6, r5
 8007172:	e7ea      	b.n	800714a <ILI9341_DrawCharAtXY+0x17e>
            *pMemCharPixel = Color_MSBFirst;
 8007174:	8004      	strh	r4, [r0, #0]
 8007176:	e7eb      	b.n	8007150 <ILI9341_DrawCharAtXY+0x184>
      for (yy = 0; yy < h; ++yy)
 8007178:	3701      	adds	r7, #1
 800717a:	b2ff      	uxtb	r7, r7
 800717c:	455f      	cmp	r7, fp
 800717e:	d20a      	bcs.n	8007196 <ILI9341_DrawCharAtXY+0x1ca>
        pMemCharPixel = &pMemChar[(- yo_min + yo + yy) * CharWidth + xo];
 8007180:	ebac 000a 	sub.w	r0, ip, sl
 8007184:	4438      	add	r0, r7
 8007186:	9a04      	ldr	r2, [sp, #16]
 8007188:	9906      	ldr	r1, [sp, #24]
 800718a:	fb00 2001 	mla	r0, r0, r1, r2
 800718e:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
        for (xx = 0; xx < w; ++xx)
 8007192:	9a03      	ldr	r2, [sp, #12]
 8007194:	e7e2      	b.n	800715c <ILI9341_DrawCharAtXY+0x190>
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
 8007196:	9908      	ldr	r1, [sp, #32]
 8007198:	4451      	add	r1, sl
 800719a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800719c:	9400      	str	r4, [sp, #0]
 800719e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071a0:	9a06      	ldr	r2, [sp, #24]
 80071a2:	b289      	uxth	r1, r1
 80071a4:	9805      	ldr	r0, [sp, #20]
 80071a6:	f7ff fe63 	bl	8006e70 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 80071aa:	4620      	mov	r0, r4
 80071ac:	f001 f8e8 	bl	8008380 <free>
      break;
 80071b0:	e745      	b.n	800703e <ILI9341_DrawCharAtXY+0x72>
      ILI9341_CSX_Low();
 80071b2:	2200      	movs	r2, #0
 80071b4:	2102      	movs	r1, #2
 80071b6:	4827      	ldr	r0, [pc, #156]	; (8007254 <ILI9341_DrawCharAtXY+0x288>)
 80071b8:	f7fc fede 	bl	8003f78 <HAL_GPIO_WritePin>
  bit = 0;
 80071bc:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80071c0:	4653      	mov	r3, sl
  bits = 0;
 80071c2:	4654      	mov	r4, sl
 80071c4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80071c8:	f8dd b020 	ldr.w	fp, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 80071cc:	e028      	b.n	8007220 <ILI9341_DrawCharAtXY+0x254>
          if (bits & 0x80)
 80071ce:	f014 0f80 	tst.w	r4, #128	; 0x80
 80071d2:	d110      	bne.n	80071f6 <ILI9341_DrawCharAtXY+0x22a>
          bits <<= 1;
 80071d4:	0064      	lsls	r4, r4, #1
 80071d6:	b2e4      	uxtb	r4, r4
        for (xx = 0; xx < w; ++xx)
 80071d8:	3501      	adds	r5, #1
 80071da:	b2ed      	uxtb	r5, r5
          if (!(bit++ & 7))
 80071dc:	463b      	mov	r3, r7
        for (xx = 0; xx < w; ++xx)
 80071de:	4545      	cmp	r5, r8
 80071e0:	d21a      	bcs.n	8007218 <ILI9341_DrawCharAtXY+0x24c>
          if (!(bit++ & 7))
 80071e2:	1c5f      	adds	r7, r3, #1
 80071e4:	b2ff      	uxtb	r7, r7
 80071e6:	f013 0f07 	tst.w	r3, #7
 80071ea:	d1f0      	bne.n	80071ce <ILI9341_DrawCharAtXY+0x202>
            bits = pBitmap[bo++];
 80071ec:	1c73      	adds	r3, r6, #1
 80071ee:	f819 4006 	ldrb.w	r4, [r9, r6]
 80071f2:	b29e      	uxth	r6, r3
 80071f4:	e7eb      	b.n	80071ce <ILI9341_DrawCharAtXY+0x202>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80071f6:	9b05      	ldr	r3, [sp, #20]
 80071f8:	9a04      	ldr	r2, [sp, #16]
 80071fa:	1898      	adds	r0, r3, r2
 80071fc:	fa15 f080 	uxtah	r0, r5, r0
 8007200:	9b07      	ldr	r3, [sp, #28]
 8007202:	eb0b 0103 	add.w	r1, fp, r3
 8007206:	fa1a f181 	uxtah	r1, sl, r1
 800720a:	2300      	movs	r3, #0
 800720c:	9a06      	ldr	r2, [sp, #24]
 800720e:	b209      	sxth	r1, r1
 8007210:	b200      	sxth	r0, r0
 8007212:	f7ff fe21 	bl	8006e58 <ILI9341_DrawPixel>
 8007216:	e7dd      	b.n	80071d4 <ILI9341_DrawCharAtXY+0x208>
      for (yy = 0; yy < h; ++yy)
 8007218:	f10a 0a01 	add.w	sl, sl, #1
 800721c:	fa5f fa8a 	uxtb.w	sl, sl
 8007220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007222:	4592      	cmp	sl, r2
 8007224:	d201      	bcs.n	800722a <ILI9341_DrawCharAtXY+0x25e>
        for (xx = 0; xx < w; ++xx)
 8007226:	9d03      	ldr	r5, [sp, #12]
 8007228:	e7d9      	b.n	80071de <ILI9341_DrawCharAtXY+0x212>
      ILI9341_CSX_High();
 800722a:	2201      	movs	r2, #1
 800722c:	2102      	movs	r1, #2
 800722e:	4809      	ldr	r0, [pc, #36]	; (8007254 <ILI9341_DrawCharAtXY+0x288>)
 8007230:	f7fc fea2 	bl	8003f78 <HAL_GPIO_WritePin>
      break;
 8007234:	e703      	b.n	800703e <ILI9341_DrawCharAtXY+0x72>
    return pGlyph->xAdvance;
 8007236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007238:	7918      	ldrb	r0, [r3, #4]
 800723a:	e707      	b.n	800704c <ILI9341_DrawCharAtXY+0x80>
    return 0;
 800723c:	2000      	movs	r0, #0
 800723e:	e705      	b.n	800704c <ILI9341_DrawCharAtXY+0x80>
    return 0;
 8007240:	2000      	movs	r0, #0
 8007242:	e703      	b.n	800704c <ILI9341_DrawCharAtXY+0x80>
 8007244:	20000488 	.word	0x20000488
 8007248:	2000000b 	.word	0x2000000b
 800724c:	2000000a 	.word	0x2000000a
 8007250:	20000480 	.word	0x20000480
 8007254:	40020800 	.word	0x40020800

08007258 <ILI9341_SetTextColor>:

uint16_t ILI9341_SetTextColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextColor;
 8007258:	4b02      	ldr	r3, [pc, #8]	; (8007264 <ILI9341_SetTextColor+0xc>)
 800725a:	881a      	ldrh	r2, [r3, #0]
  TextColor = Value;
 800725c:	8018      	strh	r0, [r3, #0]
  return Result;
}
 800725e:	4610      	mov	r0, r2
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20000008 	.word	0x20000008

08007268 <ILI9341_SetTextBackgroundColor>:

uint16_t ILI9341_SetTextBackgroundColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextBackgroundColor;
 8007268:	4b02      	ldr	r3, [pc, #8]	; (8007274 <ILI9341_SetTextBackgroundColor+0xc>)
 800726a:	881a      	ldrh	r2, [r3, #0]
  TextBackgroundColor = Value;
 800726c:	8018      	strh	r0, [r3, #0]
  return Result;
}
 800726e:	4610      	mov	r0, r2
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20000480 	.word	0x20000480

08007278 <ILI9341_SetTextDrawMode>:

TextDrawMode_t ILI9341_SetTextDrawMode(TextDrawMode_t Value)
{
  TextDrawMode_t Result;

  Result = TextDrawMode;
 8007278:	4b02      	ldr	r3, [pc, #8]	; (8007284 <ILI9341_SetTextDrawMode+0xc>)
 800727a:	781a      	ldrb	r2, [r3, #0]
  TextDrawMode = Value;
 800727c:	7018      	strb	r0, [r3, #0]
  return Result;
}
 800727e:	4610      	mov	r0, r2
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	2000000a 	.word	0x2000000a

08007288 <ILI9341_DrawTextAtXY>:
  uint16_t NumChars;
  uint8_t DX;
  
  pText = (uint8_t *) Text;

  if (!pText)
 8007288:	b360      	cbz	r0, 80072e4 <ILI9341_DrawTextAtXY+0x5c>
{
 800728a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728e:	460d      	mov	r5, r1
 8007290:	4690      	mov	r8, r2
 8007292:	461c      	mov	r4, r3
 8007294:	4606      	mov	r6, r0
    return;

  NumChars = strlen(Text);
 8007296:	f7fc f8c3 	bl	8003420 <strlen>
 800729a:	b287      	uxth	r7, r0

  switch (TextPosition)
 800729c:	2c02      	cmp	r4, #2
 800729e:	d003      	beq.n	80072a8 <ILI9341_DrawTextAtXY+0x20>
 80072a0:	2c03      	cmp	r4, #3
 80072a2:	d009      	beq.n	80072b8 <ILI9341_DrawTextAtXY+0x30>
{
 80072a4:	2400      	movs	r4, #0
 80072a6:	e019      	b.n	80072dc <ILI9341_DrawTextAtXY+0x54>
  {
    case tpCentre:
      X -= ILI9341_GetTextWidth(Text) / 2;
 80072a8:	4630      	mov	r0, r6
 80072aa:	f7ff fe7b 	bl	8006fa4 <ILI9341_GetTextWidth>
 80072ae:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80072b2:	1a28      	subs	r0, r5, r0
 80072b4:	b285      	uxth	r5, r0
      break;
 80072b6:	e7f5      	b.n	80072a4 <ILI9341_DrawTextAtXY+0x1c>
    case tpRight:
      X -= ILI9341_GetTextWidth(Text);
 80072b8:	4630      	mov	r0, r6
 80072ba:	f7ff fe73 	bl	8006fa4 <ILI9341_GetTextWidth>
 80072be:	1a28      	subs	r0, r5, r0
 80072c0:	b285      	uxth	r5, r0
      break;
 80072c2:	e7ef      	b.n	80072a4 <ILI9341_DrawTextAtXY+0x1c>
  }

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
  {
    Ch = *pText;
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 80072c4:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <ILI9341_DrawTextAtXY+0x60>)
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	4642      	mov	r2, r8
 80072ca:	4629      	mov	r1, r5
 80072cc:	f816 0b01 	ldrb.w	r0, [r6], #1
 80072d0:	f7ff fe7c 	bl	8006fcc <ILI9341_DrawCharAtXY>
    ++pText;
    X += DX;
 80072d4:	4428      	add	r0, r5
 80072d6:	b285      	uxth	r5, r0
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80072d8:	3401      	adds	r4, #1
 80072da:	b2a4      	uxth	r4, r4
 80072dc:	42bc      	cmp	r4, r7
 80072de:	d3f1      	bcc.n	80072c4 <ILI9341_DrawTextAtXY+0x3c>
  }
}
 80072e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20000008 	.word	0x20000008

080072ec <XPT2046_Initialize>:

///////////////////////////////////////////////////////////////////////////////

void XPT2046_Initialize(SPI_HandleTypeDef *i_phspi)
{
  phspi = i_phspi;
 80072ec:	4b01      	ldr	r3, [pc, #4]	; (80072f4 <XPT2046_Initialize+0x8>)
 80072ee:	6018      	str	r0, [r3, #0]
}
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20000490 	.word	0x20000490

080072f8 <ToggleLED>:
      break;
  }
}

void ToggleLED(LED_t LED)
{
 80072f8:	b508      	push	{r3, lr}
  switch(LED)
 80072fa:	2802      	cmp	r0, #2
 80072fc:	d00b      	beq.n	8007316 <ToggleLED+0x1e>
 80072fe:	2803      	cmp	r0, #3
 8007300:	d00e      	beq.n	8007320 <ToggleLED+0x28>
 8007302:	2801      	cmp	r0, #1
 8007304:	d002      	beq.n	800730c <ToggleLED+0x14>
      break;
    case LED_Blue:
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
      break;
    default:
      Error_Handler();
 8007306:	f000 fb33 	bl	8007970 <Error_Handler>
      break;
  }
}
 800730a:	e003      	b.n	8007314 <ToggleLED+0x1c>
      HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 800730c:	2102      	movs	r1, #2
 800730e:	4807      	ldr	r0, [pc, #28]	; (800732c <ToggleLED+0x34>)
 8007310:	f7fc fe38 	bl	8003f84 <HAL_GPIO_TogglePin>
}
 8007314:	bd08      	pop	{r3, pc}
      HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8007316:	2104      	movs	r1, #4
 8007318:	4804      	ldr	r0, [pc, #16]	; (800732c <ToggleLED+0x34>)
 800731a:	f7fc fe33 	bl	8003f84 <HAL_GPIO_TogglePin>
      break;
 800731e:	e7f9      	b.n	8007314 <ToggleLED+0x1c>
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8007320:	2108      	movs	r1, #8
 8007322:	4802      	ldr	r0, [pc, #8]	; (800732c <ToggleLED+0x34>)
 8007324:	f7fc fe2e 	bl	8003f84 <HAL_GPIO_TogglePin>
      break;
 8007328:	e7f4      	b.n	8007314 <ToggleLED+0x1c>
 800732a:	bf00      	nop
 800732c:	40020000 	.word	0x40020000

08007330 <DAC_Mute>:
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
  DAC_Mute(1);
}

void DAC_Mute(uint8_t Value)
{
 8007330:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, Value ? 0 : 1);
 8007332:	fab0 f280 	clz	r2, r0
 8007336:	0952      	lsrs	r2, r2, #5
 8007338:	2140      	movs	r1, #64	; 0x40
 800733a:	4802      	ldr	r0, [pc, #8]	; (8007344 <DAC_Mute+0x14>)
 800733c:	f7fc fe1c 	bl	8003f78 <HAL_GPIO_WritePin>
}
 8007340:	bd08      	pop	{r3, pc}
 8007342:	bf00      	nop
 8007344:	40020c00 	.word	0x40020c00

08007348 <DAC_Initialize>:
{
 8007348:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, 0); // Latency.
 800734a:	4c07      	ldr	r4, [pc, #28]	; (8007368 <DAC_Initialize+0x20>)
 800734c:	2200      	movs	r2, #0
 800734e:	2110      	movs	r1, #16
 8007350:	4620      	mov	r0, r4
 8007352:	f7fc fe11 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
 8007356:	2200      	movs	r2, #0
 8007358:	2120      	movs	r1, #32
 800735a:	4620      	mov	r0, r4
 800735c:	f7fc fe0c 	bl	8003f78 <HAL_GPIO_WritePin>
  DAC_Mute(1);
 8007360:	2001      	movs	r0, #1
 8007362:	f7ff ffe5 	bl	8007330 <DAC_Mute>
}
 8007366:	bd10      	pop	{r4, pc}
 8007368:	40020c00 	.word	0x40020c00

0800736c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800736c:	b500      	push	{lr}
 800736e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007370:	4b22      	ldr	r3, [pc, #136]	; (80073fc <MX_DMA_Init+0x90>)
 8007372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007374:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8007378:	631a      	str	r2, [r3, #48]	; 0x30
 800737a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800737c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007380:	9200      	str	r2, [sp, #0]
 8007382:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007386:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800738a:	631a      	str	r2, [r3, #48]	; 0x30
 800738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8007396:	2200      	movs	r2, #0
 8007398:	4611      	mov	r1, r2
 800739a:	2010      	movs	r0, #16
 800739c:	f7fc fa84 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80073a0:	2010      	movs	r0, #16
 80073a2:	f7fc fab7 	bl	8003914 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80073a6:	2200      	movs	r2, #0
 80073a8:	4611      	mov	r1, r2
 80073aa:	2011      	movs	r0, #17
 80073ac:	f7fc fa7c 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80073b0:	2011      	movs	r0, #17
 80073b2:	f7fc faaf 	bl	8003914 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80073b6:	2200      	movs	r2, #0
 80073b8:	4611      	mov	r1, r2
 80073ba:	2039      	movs	r0, #57	; 0x39
 80073bc:	f7fc fa74 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80073c0:	2039      	movs	r0, #57	; 0x39
 80073c2:	f7fc faa7 	bl	8003914 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80073c6:	2200      	movs	r2, #0
 80073c8:	4611      	mov	r1, r2
 80073ca:	203a      	movs	r0, #58	; 0x3a
 80073cc:	f7fc fa6c 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80073d0:	203a      	movs	r0, #58	; 0x3a
 80073d2:	f7fc fa9f 	bl	8003914 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80073d6:	2200      	movs	r2, #0
 80073d8:	4611      	mov	r1, r2
 80073da:	203b      	movs	r0, #59	; 0x3b
 80073dc:	f7fc fa64 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80073e0:	203b      	movs	r0, #59	; 0x3b
 80073e2:	f7fc fa97 	bl	8003914 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80073e6:	2200      	movs	r2, #0
 80073e8:	4611      	mov	r1, r2
 80073ea:	2044      	movs	r0, #68	; 0x44
 80073ec:	f7fc fa5c 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80073f0:	2044      	movs	r0, #68	; 0x44
 80073f2:	f7fc fa8f 	bl	8003914 <HAL_NVIC_EnableIRQ>

}
 80073f6:	b003      	add	sp, #12
 80073f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80073fc:	40023800 	.word	0x40023800

08007400 <AudioDMA_FillBufferWithSamplesFromMP3Decoder>:

  return NumBytesSupplied;
}

static void AudioDMA_FillBufferWithSamplesFromMP3Decoder(uint32_t DestinationBufferOffset, uint32_t NumSamples)
{
 8007400:	b5b0      	push	{r4, r5, r7, lr}
 8007402:	af00      	add	r7, sp, #0
 8007404:	4604      	mov	r4, r0
 8007406:	460a      	mov	r2, r1
  short MP3Decoder_pOutputSamples[2 * NumSamples * sizeof(short)];
 8007408:	466b      	mov	r3, sp
 800740a:	eba3 03c1 	sub.w	r3, r3, r1, lsl #3
 800740e:	469d      	mov	sp, r3
 8007410:	466d      	mov	r5, sp

  //!!! Warning! Doesn't check for success!
  uint32_t NumSamplesDecoded = SpiritMP3Decode(MP3Decoder_pInstance, (short *)MP3Decoder_pOutputSamples, NumSamples, NULL);
 8007412:	2300      	movs	r3, #0
 8007414:	4629      	mov	r1, r5
 8007416:	480d      	ldr	r0, [pc, #52]	; (800744c <AudioDMA_FillBufferWithSamplesFromMP3Decoder+0x4c>)
 8007418:	6800      	ldr	r0, [r0, #0]
 800741a:	f7f9 fd2d 	bl	8000e78 <SpiritMP3Decode>

  short *pMP3OutputSamples = MP3Decoder_pOutputSamples;
  AudioData_Sample_t *pDestination = &AudioDMA_CircularBuffer_Samples[DestinationBufferOffset];
 800741e:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <AudioDMA_FillBufferWithSamplesFromMP3Decoder+0x50>)
 8007420:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  for (uint32_t SampleIndex = 0; SampleIndex < NumSamplesDecoded; ++SampleIndex)
 8007424:	f04f 0c00 	mov.w	ip, #0
 8007428:	e00c      	b.n	8007444 <AudioDMA_FillBufferWithSamplesFromMP3Decoder+0x44>
  {
    short Left16 = *pMP3OutputSamples++;
 800742a:	462a      	mov	r2, r5
 800742c:	f932 4b04 	ldrsh.w	r4, [r2], #4
    short Right16 = *pMP3OutputSamples++;
 8007430:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    pDestination->Left = Left16 << 16;
 8007434:	0424      	lsls	r4, r4, #16
 8007436:	601c      	str	r4, [r3, #0]
    pDestination->Right = Right16 << 16;
 8007438:	0409      	lsls	r1, r1, #16
 800743a:	6059      	str	r1, [r3, #4]
    ++pDestination;
 800743c:	3308      	adds	r3, #8
  for (uint32_t SampleIndex = 0; SampleIndex < NumSamplesDecoded; ++SampleIndex)
 800743e:	f10c 0c01 	add.w	ip, ip, #1
    short Right16 = *pMP3OutputSamples++;
 8007442:	4615      	mov	r5, r2
  for (uint32_t SampleIndex = 0; SampleIndex < NumSamplesDecoded; ++SampleIndex)
 8007444:	4584      	cmp	ip, r0
 8007446:	d3f0      	bcc.n	800742a <AudioDMA_FillBufferWithSamplesFromMP3Decoder+0x2a>
  }
}
 8007448:	46bd      	mov	sp, r7
 800744a:	bdb0      	pop	{r4, r5, r7, pc}
 800744c:	20000694 	.word	0x20000694
 8007450:	20000494 	.word	0x20000494

08007454 <MP3Decoder_GetDataCallback>:
{
 8007454:	b538      	push	{r3, r4, r5, lr}
  uint32_t NumBytesRemaining = (MP3Source_NumBytes - (MP3Source_pCurrent - MP3Source_pStart));
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <MP3Decoder_GetDataCallback+0x2c>)
 8007458:	681c      	ldr	r4, [r3, #0]
 800745a:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <MP3Decoder_GetDataCallback+0x30>)
 800745c:	681d      	ldr	r5, [r3, #0]
 800745e:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <MP3Decoder_GetDataCallback+0x34>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	1aeb      	subs	r3, r5, r3
 8007464:	1ae4      	subs	r4, r4, r3
  if (NumBytesToGet > NumBytesRemaining)
 8007466:	428c      	cmp	r4, r1
 8007468:	d300      	bcc.n	800746c <MP3Decoder_GetDataCallback+0x18>
  NumBytesToGet = NumBytesWanted;
 800746a:	460c      	mov	r4, r1
  memcpy(pData, MP3Source_pCurrent, NumBytesToGet);
 800746c:	4622      	mov	r2, r4
 800746e:	4629      	mov	r1, r5
 8007470:	f000 ff8e 	bl	8008390 <memcpy>
  MP3Source_pCurrent += NumBytesSupplied;
 8007474:	4425      	add	r5, r4
 8007476:	4b03      	ldr	r3, [pc, #12]	; (8007484 <MP3Decoder_GetDataCallback+0x30>)
 8007478:	601d      	str	r5, [r3, #0]
}
 800747a:	4620      	mov	r0, r4
 800747c:	bd38      	pop	{r3, r4, r5, pc}
 800747e:	bf00      	nop
 8007480:	2000069c 	.word	0x2000069c
 8007484:	200006a0 	.word	0x200006a0
 8007488:	200006a8 	.word	0x200006a8

0800748c <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800748c:	b508      	push	{r3, lr}
  if (hsai == &hsai_BlockA2)
 800748e:	4b04      	ldr	r3, [pc, #16]	; (80074a0 <HAL_SAI_TxHalfCpltCallback+0x14>)
 8007490:	4283      	cmp	r3, r0
 8007492:	d000      	beq.n	8007496 <HAL_SAI_TxHalfCpltCallback+0xa>
  {
    AudioDMA_FillBufferWithSamplesFromMP3Decoder(0, AudioDMA_CircularBuffer_NumSamplesPerHalf);
  }
}
 8007494:	bd08      	pop	{r3, pc}
    AudioDMA_FillBufferWithSamplesFromMP3Decoder(0, AudioDMA_CircularBuffer_NumSamplesPerHalf);
 8007496:	2120      	movs	r1, #32
 8007498:	2000      	movs	r0, #0
 800749a:	f7ff ffb1 	bl	8007400 <AudioDMA_FillBufferWithSamplesFromMP3Decoder>
}
 800749e:	e7f9      	b.n	8007494 <HAL_SAI_TxHalfCpltCallback+0x8>
 80074a0:	2000087c 	.word	0x2000087c

080074a4 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80074a4:	b508      	push	{r3, lr}
  if (hsai == &hsai_BlockA2)
 80074a6:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <HAL_SAI_TxCpltCallback+0x14>)
 80074a8:	4283      	cmp	r3, r0
 80074aa:	d000      	beq.n	80074ae <HAL_SAI_TxCpltCallback+0xa>
  {
    AudioDMA_FillBufferWithSamplesFromMP3Decoder(AudioDMA_CircularBuffer_NumSamplesPerHalf, AudioDMA_CircularBuffer_NumSamplesPerHalf);
  }
}
 80074ac:	bd08      	pop	{r3, pc}
    AudioDMA_FillBufferWithSamplesFromMP3Decoder(AudioDMA_CircularBuffer_NumSamplesPerHalf, AudioDMA_CircularBuffer_NumSamplesPerHalf);
 80074ae:	2120      	movs	r1, #32
 80074b0:	4608      	mov	r0, r1
 80074b2:	f7ff ffa5 	bl	8007400 <AudioDMA_FillBufferWithSamplesFromMP3Decoder>
}
 80074b6:	e7f9      	b.n	80074ac <HAL_SAI_TxCpltCallback+0x8>
 80074b8:	2000087c 	.word	0x2000087c

080074bc <Go>:

void Go()
{
 80074bc:	b538      	push	{r3, r4, r5, lr}
  uint16_t Y = 0;
  
  ILI9341_SetFont(&FreeSans12pt7b);
 80074be:	4846      	ldr	r0, [pc, #280]	; (80075d8 <Go+0x11c>)
 80074c0:	f7ff fd48 	bl	8006f54 <ILI9341_SetFont>
  ILI9341_SetTextColor(ILI9341_COLOR_WHITE);
 80074c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80074c8:	f7ff fec6 	bl	8007258 <ILI9341_SetTextColor>
  ILI9341_SetTextBackgroundColor(ILI9341_COLOR_BLACK);
 80074cc:	2000      	movs	r0, #0
 80074ce:	f7ff fecb 	bl	8007268 <ILI9341_SetTextBackgroundColor>
  ILI9341_SetTextDrawMode(tdmAnyCharBar); // Slower but enables flicker free update.
 80074d2:	2002      	movs	r0, #2
 80074d4:	f7ff fed0 	bl	8007278 <ILI9341_SetTextDrawMode>

  ILI9341_Clear(0x0000);
 80074d8:	2000      	movs	r0, #0
 80074da:	f7ff fd2d 	bl	8006f38 <ILI9341_Clear>

  Y = 0;

  Y += ILI9341_GetFontYSpacing();
 80074de:	f7ff fd41 	bl	8006f64 <ILI9341_GetFontYSpacing>
  ILI9341_DrawTextAtXY("MP3=>DAC", 0, Y, tpLeft);
 80074e2:	2301      	movs	r3, #1
 80074e4:	b282      	uxth	r2, r0
 80074e6:	2100      	movs	r1, #0
 80074e8:	483c      	ldr	r0, [pc, #240]	; (80075dc <Go+0x120>)
 80074ea:	f7ff fecd 	bl	8007288 <ILI9341_DrawTextAtXY>

  DAC_Initialize();
 80074ee:	f7ff ff2b 	bl	8007348 <DAC_Initialize>

  // Get MP3 source info:
  MP3Source_NumBytes = *(uint32_t *)0x8100000;
 80074f2:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	4b39      	ldr	r3, [pc, #228]	; (80075e0 <Go+0x124>)
 80074fa:	601a      	str	r2, [r3, #0]
  MP3Source_pStart = (uint32_t *)0x8100004;
 80074fc:	4b39      	ldr	r3, [pc, #228]	; (80075e4 <Go+0x128>)
 80074fe:	4a3a      	ldr	r2, [pc, #232]	; (80075e8 <Go+0x12c>)
 8007500:	6013      	str	r3, [r2, #0]
  MP3Source_pCurrent = MP3Source_pStart;
 8007502:	4a3a      	ldr	r2, [pc, #232]	; (80075ec <Go+0x130>)
 8007504:	6013      	str	r3, [r2, #0]

  // Initialize MP3 decoder:
  MP3Decoder_pInstance = (TSpiritMP3Decoder*)malloc(sizeof(TSpiritMP3Decoder)); /* 0x3038 bytes */
 8007506:	f243 0038 	movw	r0, #12344	; 0x3038
 800750a:	f000 ff31 	bl	8008370 <malloc>
 800750e:	4b38      	ldr	r3, [pc, #224]	; (80075f0 <Go+0x134>)
 8007510:	6018      	str	r0, [r3, #0]
  if (!MP3Decoder_pInstance)
 8007512:	2800      	cmp	r0, #0
 8007514:	d03b      	beq.n	800758e <Go+0xd2>
    Error_Handler();
  MP3Decoder_pMP3Info = (TSpiritMP3Info*)malloc(sizeof(TSpiritMP3Info));
 8007516:	2028      	movs	r0, #40	; 0x28
 8007518:	f000 ff2a 	bl	8008370 <malloc>
 800751c:	4b35      	ldr	r3, [pc, #212]	; (80075f4 <Go+0x138>)
 800751e:	6018      	str	r0, [r3, #0]
  if (!MP3Decoder_pMP3Info)
 8007520:	2800      	cmp	r0, #0
 8007522:	d037      	beq.n	8007594 <Go+0xd8>
    Error_Handler();
  short *MP3Decoder_pOutputSamples = (short*)malloc(2 * 1152 * sizeof(short));
 8007524:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8007528:	f000 ff22 	bl	8008370 <malloc>
  if (!MP3Decoder_pOutputSamples)
 800752c:	4605      	mov	r5, r0
 800752e:	2800      	cmp	r0, #0
 8007530:	d033      	beq.n	800759a <Go+0xde>
    Error_Handler();
  //
  SpiritMP3DecoderInit(MP3Decoder_pInstance, &MP3Decoder_GetDataCallback, NULL, NULL);
 8007532:	2300      	movs	r3, #0
 8007534:	461a      	mov	r2, r3
 8007536:	4930      	ldr	r1, [pc, #192]	; (80075f8 <Go+0x13c>)
 8007538:	482d      	ldr	r0, [pc, #180]	; (80075f0 <Go+0x134>)
 800753a:	6800      	ldr	r0, [r0, #0]
 800753c:	f7f9 fc7c 	bl	8000e38 <SpiritMP3DecoderInit>
  do
  {
    MP3Source_pFirstGoodStreamFrame = MP3Source_pCurrent;
 8007540:	4b2a      	ldr	r3, [pc, #168]	; (80075ec <Go+0x130>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b2d      	ldr	r3, [pc, #180]	; (80075fc <Go+0x140>)
 8007546:	601a      	str	r2, [r3, #0]
    SpiritMP3Decode(MP3Decoder_pInstance, (short *)MP3Decoder_pOutputSamples, 1152, MP3Decoder_pMP3Info);
 8007548:	4c2a      	ldr	r4, [pc, #168]	; (80075f4 <Go+0x138>)
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8007550:	4629      	mov	r1, r5
 8007552:	4827      	ldr	r0, [pc, #156]	; (80075f0 <Go+0x134>)
 8007554:	6800      	ldr	r0, [r0, #0]
 8007556:	f7f9 fc8f 	bl	8000e78 <SpiritMP3Decode>
  } while (!((MP3Decoder_pMP3Info->IsGoodStream) && (MP3Decoder_pMP3Info->nBitrateKbps) && (MP3Decoder_pMP3Info->nSampleRateHz)));
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	691a      	ldr	r2, [r3, #16]
 800755e:	2a00      	cmp	r2, #0
 8007560:	d0ee      	beq.n	8007540 <Go+0x84>
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	2a00      	cmp	r2, #0
 8007566:	d0eb      	beq.n	8007540 <Go+0x84>
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0e8      	beq.n	8007540 <Go+0x84>

  MP3Source_pCurrent = MP3Source_pFirstGoodStreamFrame;
 800756e:	4b23      	ldr	r3, [pc, #140]	; (80075fc <Go+0x140>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4b1e      	ldr	r3, [pc, #120]	; (80075ec <Go+0x130>)
 8007574:	601a      	str	r2, [r3, #0]

  DAC_Mute(0);
 8007576:	2000      	movs	r0, #0
 8007578:	f7ff feda 	bl	8007330 <DAC_Mute>

  HAL_SAI_TxHalfCpltCallback(&hsai_BlockA2); // Prime DMA buffer.
 800757c:	4820      	ldr	r0, [pc, #128]	; (8007600 <Go+0x144>)
 800757e:	f7ff ff85 	bl	800748c <HAL_SAI_TxHalfCpltCallback>
    uint32_t op_addr = (uint32_t) addr;
 8007582:	4a20      	ldr	r2, [pc, #128]	; (8007604 <Go+0x148>)
  __ASM volatile ("dsb 0xF":::"memory");
 8007584:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 8007588:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 800758c:	e00d      	b.n	80075aa <Go+0xee>
    Error_Handler();
 800758e:	f000 f9ef 	bl	8007970 <Error_Handler>
 8007592:	e7c0      	b.n	8007516 <Go+0x5a>
    Error_Handler();
 8007594:	f000 f9ec 	bl	8007970 <Error_Handler>
 8007598:	e7c4      	b.n	8007524 <Go+0x68>
    Error_Handler();
 800759a:	f000 f9e9 	bl	8007970 <Error_Handler>
 800759e:	e7c8      	b.n	8007532 <Go+0x76>
      SCB->DCCMVAC = op_addr;
 80075a0:	4919      	ldr	r1, [pc, #100]	; (8007608 <Go+0x14c>)
 80075a2:	f8c1 2268 	str.w	r2, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 80075a6:	3220      	adds	r2, #32
      op_size -=           linesize;
 80075a8:	3b20      	subs	r3, #32
    while (op_size > 0) {
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dcf8      	bgt.n	80075a0 <Go+0xe4>
  __ASM volatile ("dsb 0xF":::"memory");
 80075ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80075b2:	f3bf 8f6f 	isb	sy

  SCB_CleanDCache_by_Addr((uint32_t *)AudioDMA_CircularBuffer_Samples, AudioDMA_CircularBuffer_NumSamplesInTotal * sizeof(AudioData_Sample_t));
  HAL_StatusTypeDef HAL_Result = HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)&AudioDMA_CircularBuffer_Samples, (uint16_t)((sizeof(AudioData_Sample_t) / sizeof(int32_t)) * AudioDMA_CircularBuffer_NumSamplesInTotal)); // Each DMA item is 32 bits (set in CubeMX).
 80075b6:	2280      	movs	r2, #128	; 0x80
 80075b8:	4912      	ldr	r1, [pc, #72]	; (8007604 <Go+0x148>)
 80075ba:	4811      	ldr	r0, [pc, #68]	; (8007600 <Go+0x144>)
 80075bc:	f7fe f9ea 	bl	8005994 <HAL_SAI_Transmit_DMA>
  if (HAL_Result != HAL_OK)
 80075c0:	b938      	cbnz	r0, 80075d2 <Go+0x116>
    Error_Handler();

  while(1)
  {
    // Indicate playing.
    ToggleLED(LED_Green);
 80075c2:	2002      	movs	r0, #2
 80075c4:	f7ff fe98 	bl	80072f8 <ToggleLED>
    HAL_Delay(500);
 80075c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80075cc:	f7fc f946 	bl	800385c <HAL_Delay>
  while(1)
 80075d0:	e7f7      	b.n	80075c2 <Go+0x106>
    Error_Handler();
 80075d2:	f000 f9cd 	bl	8007970 <Error_Handler>
 80075d6:	e7f4      	b.n	80075c2 <Go+0x106>
 80075d8:	0800ac9c 	.word	0x0800ac9c
 80075dc:	0800ac90 	.word	0x0800ac90
 80075e0:	2000069c 	.word	0x2000069c
 80075e4:	08100004 	.word	0x08100004
 80075e8:	200006a8 	.word	0x200006a8
 80075ec:	200006a0 	.word	0x200006a0
 80075f0:	20000694 	.word	0x20000694
 80075f4:	20000698 	.word	0x20000698
 80075f8:	08007455 	.word	0x08007455
 80075fc:	200006a4 	.word	0x200006a4
 8007600:	2000087c 	.word	0x2000087c
 8007604:	20000494 	.word	0x20000494
 8007608:	e000ed00 	.word	0xe000ed00

0800760c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007612:	2400      	movs	r4, #0
 8007614:	9407      	str	r4, [sp, #28]
 8007616:	9408      	str	r4, [sp, #32]
 8007618:	9409      	str	r4, [sp, #36]	; 0x24
 800761a:	940a      	str	r4, [sp, #40]	; 0x28
 800761c:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800761e:	4b72      	ldr	r3, [pc, #456]	; (80077e8 <MX_GPIO_Init+0x1dc>)
 8007620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007622:	f042 0210 	orr.w	r2, r2, #16
 8007626:	631a      	str	r2, [r3, #48]	; 0x30
 8007628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800762a:	f002 0210 	and.w	r2, r2, #16
 800762e:	9201      	str	r2, [sp, #4]
 8007630:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007634:	f042 0204 	orr.w	r2, r2, #4
 8007638:	631a      	str	r2, [r3, #48]	; 0x30
 800763a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800763c:	f002 0204 	and.w	r2, r2, #4
 8007640:	9202      	str	r2, [sp, #8]
 8007642:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800764a:	631a      	str	r2, [r3, #48]	; 0x30
 800764c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800764e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007652:	9203      	str	r2, [sp, #12]
 8007654:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007658:	f042 0201 	orr.w	r2, r2, #1
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
 800765e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007660:	f002 0201 	and.w	r2, r2, #1
 8007664:	9204      	str	r2, [sp, #16]
 8007666:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800766a:	f042 0202 	orr.w	r2, r2, #2
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
 8007670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007672:	f002 0202 	and.w	r2, r2, #2
 8007676:	9205      	str	r2, [sp, #20]
 8007678:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800767a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800767c:	f042 0208 	orr.w	r2, r2, #8
 8007680:	631a      	str	r2, [r3, #48]	; 0x30
 8007682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	9306      	str	r3, [sp, #24]
 800768a:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 800768c:	4f57      	ldr	r7, [pc, #348]	; (80077ec <MX_GPIO_Init+0x1e0>)
 800768e:	2201      	movs	r2, #1
 8007690:	2124      	movs	r1, #36	; 0x24
 8007692:	4638      	mov	r0, r7
 8007694:	f7fc fc70 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 8007698:	4622      	mov	r2, r4
 800769a:	2112      	movs	r1, #18
 800769c:	4638      	mov	r0, r7
 800769e:	f7fc fc6b 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 80076a2:	4e53      	ldr	r6, [pc, #332]	; (80077f0 <MX_GPIO_Init+0x1e4>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7fc fc64 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 80076b0:	4622      	mov	r2, r4
 80076b2:	210f      	movs	r1, #15
 80076b4:	4630      	mov	r0, r6
 80076b6:	f7fc fc5f 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 80076ba:	f8df b13c 	ldr.w	fp, [pc, #316]	; 80077f8 <MX_GPIO_Init+0x1ec>
 80076be:	4622      	mov	r2, r4
 80076c0:	210e      	movs	r1, #14
 80076c2:	4658      	mov	r0, fp
 80076c4:	f7fc fc58 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TestPoint_Pin|TS_NSS_Pin|SI_NRST_Pin, GPIO_PIN_RESET);
 80076c8:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80077fc <MX_GPIO_Init+0x1f0>
 80076cc:	4622      	mov	r2, r4
 80076ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80076d2:	4640      	mov	r0, r8
 80076d4:	f7fc fc50 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 80076d8:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007800 <MX_GPIO_Init+0x1f4>
 80076dc:	4622      	mov	r2, r4
 80076de:	217f      	movs	r1, #127	; 0x7f
 80076e0:	4650      	mov	r0, sl
 80076e2:	f7fc fc49 	bl	8003f78 <HAL_GPIO_WritePin>
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_NSS_Pin;
 80076e6:	2324      	movs	r3, #36	; 0x24
 80076e8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076ea:	2501      	movs	r5, #1
 80076ec:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ee:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80076f0:	f04f 0902 	mov.w	r9, #2
 80076f4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80076f8:	a907      	add	r1, sp, #28
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7fc fb4c 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 8007700:	2348      	movs	r3, #72	; 0x48
 8007702:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007704:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007706:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007708:	a907      	add	r1, sp, #28
 800770a:	4638      	mov	r0, r7
 800770c:	f7fc fb44 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_B_EN_Pin|ESP32_A_EN_Pin;
 8007710:	2312      	movs	r3, #18
 8007712:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007714:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007716:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007718:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800771a:	a907      	add	r1, sp, #28
 800771c:	4638      	mov	r0, r7
 800771e:	f7fc fb3b 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
 8007722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007726:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007728:	4f32      	ldr	r7, [pc, #200]	; (80077f4 <MX_GPIO_Init+0x1e8>)
 800772a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800772c:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 800772e:	a907      	add	r1, sp, #28
 8007730:	4630      	mov	r0, r6
 8007732:	f7fc fb31 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin|LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin 
 8007736:	f248 030f 	movw	r3, #32783	; 0x800f
 800773a:	9307      	str	r3, [sp, #28]
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800773c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800773e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007740:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007742:	a907      	add	r1, sp, #28
 8007744:	4630      	mov	r0, r6
 8007746:	f7fc fb27 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 800774a:	230e      	movs	r3, #14
 800774c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800774e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007750:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007752:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007754:	a907      	add	r1, sp, #28
 8007756:	4658      	mov	r0, fp
 8007758:	f7fc fb1e 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TestPoint_Pin;
 800775c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007760:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007762:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007764:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007766:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(TestPoint_GPIO_Port, &GPIO_InitStruct);
 800776a:	a907      	add	r1, sp, #28
 800776c:	4640      	mov	r0, r8
 800776e:	f7fc fb13 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 8007772:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8007776:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007778:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800777a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800777c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800777e:	a907      	add	r1, sp, #28
 8007780:	4640      	mov	r0, r8
 8007782:	f7fc fb09 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800778a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800778c:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007790:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007792:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007794:	2305      	movs	r3, #5
 8007796:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007798:	a907      	add	r1, sp, #28
 800779a:	4630      	mov	r0, r6
 800779c:	f7fc fafc 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 80077a0:	237f      	movs	r3, #127	; 0x7f
 80077a2:	9307      	str	r3, [sp, #28]
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077a4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077a8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077aa:	a907      	add	r1, sp, #28
 80077ac:	4650      	mov	r0, sl
 80077ae:	f7fc faf3 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
 80077b2:	2320      	movs	r3, #32
 80077b4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80077b6:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 80077ba:	a907      	add	r1, sp, #28
 80077bc:	4640      	mov	r0, r8
 80077be:	f7fc faeb 	bl	8003d98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80077c2:	4622      	mov	r2, r4
 80077c4:	4621      	mov	r1, r4
 80077c6:	2017      	movs	r0, #23
 80077c8:	f7fc f86e 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80077cc:	2017      	movs	r0, #23
 80077ce:	f7fc f8a1 	bl	8003914 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80077d2:	4622      	mov	r2, r4
 80077d4:	4621      	mov	r1, r4
 80077d6:	2028      	movs	r0, #40	; 0x28
 80077d8:	f7fc f866 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80077dc:	2028      	movs	r0, #40	; 0x28
 80077de:	f7fc f899 	bl	8003914 <HAL_NVIC_EnableIRQ>

}
 80077e2:	b00d      	add	sp, #52	; 0x34
 80077e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e8:	40023800 	.word	0x40023800
 80077ec:	40021000 	.word	0x40021000
 80077f0:	40020800 	.word	0x40020800
 80077f4:	10210000 	.word	0x10210000
 80077f8:	40020000 	.word	0x40020000
 80077fc:	40020400 	.word	0x40020400
 8007800:	40020c00 	.word	0x40020c00

08007804 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007804:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8007806:	4812      	ldr	r0, [pc, #72]	; (8007850 <MX_I2C1_Init+0x4c>)
 8007808:	4b12      	ldr	r3, [pc, #72]	; (8007854 <MX_I2C1_Init+0x50>)
 800780a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800780c:	4b12      	ldr	r3, [pc, #72]	; (8007858 <MX_I2C1_Init+0x54>)
 800780e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007814:	2201      	movs	r2, #1
 8007816:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007818:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800781a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800781c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800781e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007820:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007822:	f7fc fc13 	bl	800404c <HAL_I2C_Init>
 8007826:	b950      	cbnz	r0, 800783e <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007828:	2100      	movs	r1, #0
 800782a:	4809      	ldr	r0, [pc, #36]	; (8007850 <MX_I2C1_Init+0x4c>)
 800782c:	f7fc ff27 	bl	800467e <HAL_I2CEx_ConfigAnalogFilter>
 8007830:	b940      	cbnz	r0, 8007844 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007832:	2100      	movs	r1, #0
 8007834:	4806      	ldr	r0, [pc, #24]	; (8007850 <MX_I2C1_Init+0x4c>)
 8007836:	f7fc ff50 	bl	80046da <HAL_I2CEx_ConfigDigitalFilter>
 800783a:	b930      	cbnz	r0, 800784a <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 800783c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800783e:	f000 f897 	bl	8007970 <Error_Handler>
 8007842:	e7f1      	b.n	8007828 <MX_I2C1_Init+0x24>
    Error_Handler();
 8007844:	f000 f894 	bl	8007970 <Error_Handler>
 8007848:	e7f3      	b.n	8007832 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800784a:	f000 f891 	bl	8007970 <Error_Handler>
}
 800784e:	e7f5      	b.n	800783c <MX_I2C1_Init+0x38>
 8007850:	2000076c 	.word	0x2000076c
 8007854:	40005400 	.word	0x40005400
 8007858:	6000030d 	.word	0x6000030d

0800785c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800785c:	b530      	push	{r4, r5, lr}
 800785e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007860:	2300      	movs	r3, #0
 8007862:	9303      	str	r3, [sp, #12]
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	9305      	str	r3, [sp, #20]
 8007868:	9306      	str	r3, [sp, #24]
 800786a:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 800786c:	6802      	ldr	r2, [r0, #0]
 800786e:	4b39      	ldr	r3, [pc, #228]	; (8007954 <HAL_I2C_MspInit+0xf8>)
 8007870:	429a      	cmp	r2, r3
 8007872:	d001      	beq.n	8007878 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007874:	b009      	add	sp, #36	; 0x24
 8007876:	bd30      	pop	{r4, r5, pc}
 8007878:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800787a:	4d37      	ldr	r5, [pc, #220]	; (8007958 <HAL_I2C_MspInit+0xfc>)
 800787c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800787e:	f043 0302 	orr.w	r3, r3, #2
 8007882:	632b      	str	r3, [r5, #48]	; 0x30
 8007884:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800788e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007892:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007894:	2312      	movs	r3, #18
 8007896:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007898:	2301      	movs	r3, #1
 800789a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800789c:	2303      	movs	r3, #3
 800789e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80078a0:	2304      	movs	r3, #4
 80078a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078a4:	a903      	add	r1, sp, #12
 80078a6:	482d      	ldr	r0, [pc, #180]	; (800795c <HAL_I2C_MspInit+0x100>)
 80078a8:	f7fc fa76 	bl	8003d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80078ac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80078ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078b2:	642b      	str	r3, [r5, #64]	; 0x40
 80078b4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80078b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078ba:	9302      	str	r3, [sp, #8]
 80078bc:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80078be:	4828      	ldr	r0, [pc, #160]	; (8007960 <HAL_I2C_MspInit+0x104>)
 80078c0:	4b28      	ldr	r3, [pc, #160]	; (8007964 <HAL_I2C_MspInit+0x108>)
 80078c2:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80078c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078c8:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80078ca:	2340      	movs	r3, #64	; 0x40
 80078cc:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80078d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078d6:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078d8:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078da:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80078dc:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80078de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80078e2:	6202      	str	r2, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80078e4:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80078e6:	f7fc f8b5 	bl	8003a54 <HAL_DMA_Init>
 80078ea:	bb60      	cbnz	r0, 8007946 <HAL_I2C_MspInit+0xea>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80078ec:	4b1c      	ldr	r3, [pc, #112]	; (8007960 <HAL_I2C_MspInit+0x104>)
 80078ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80078f0:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80078f2:	481d      	ldr	r0, [pc, #116]	; (8007968 <HAL_I2C_MspInit+0x10c>)
 80078f4:	4b1d      	ldr	r3, [pc, #116]	; (800796c <HAL_I2C_MspInit+0x110>)
 80078f6:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80078f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078fc:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078fe:	2300      	movs	r3, #0
 8007900:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007902:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007908:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800790a:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800790c:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800790e:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007910:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007914:	6202      	str	r2, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007916:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007918:	f7fc f89c 	bl	8003a54 <HAL_DMA_Init>
 800791c:	b9b0      	cbnz	r0, 800794c <HAL_I2C_MspInit+0xf0>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800791e:	4b12      	ldr	r3, [pc, #72]	; (8007968 <HAL_I2C_MspInit+0x10c>)
 8007920:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007922:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007924:	2200      	movs	r2, #0
 8007926:	4611      	mov	r1, r2
 8007928:	201f      	movs	r0, #31
 800792a:	f7fb ffbd 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800792e:	201f      	movs	r0, #31
 8007930:	f7fb fff0 	bl	8003914 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8007934:	2200      	movs	r2, #0
 8007936:	4611      	mov	r1, r2
 8007938:	2020      	movs	r0, #32
 800793a:	f7fb ffb5 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800793e:	2020      	movs	r0, #32
 8007940:	f7fb ffe8 	bl	8003914 <HAL_NVIC_EnableIRQ>
}
 8007944:	e796      	b.n	8007874 <HAL_I2C_MspInit+0x18>
      Error_Handler();
 8007946:	f000 f813 	bl	8007970 <Error_Handler>
 800794a:	e7cf      	b.n	80078ec <HAL_I2C_MspInit+0x90>
      Error_Handler();
 800794c:	f000 f810 	bl	8007970 <Error_Handler>
 8007950:	e7e5      	b.n	800791e <HAL_I2C_MspInit+0xc2>
 8007952:	bf00      	nop
 8007954:	40005400 	.word	0x40005400
 8007958:	40023800 	.word	0x40023800
 800795c:	40020400 	.word	0x40020400
 8007960:	2000070c 	.word	0x2000070c
 8007964:	400260a0 	.word	0x400260a0
 8007968:	200006ac 	.word	0x200006ac
 800796c:	40026088 	.word	0x40026088

08007970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007970:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
    ToggleLED(LED_Red);
 8007972:	2001      	movs	r0, #1
 8007974:	f7ff fcc0 	bl	80072f8 <ToggleLED>
    HAL_Delay(50);
 8007978:	2032      	movs	r0, #50	; 0x32
 800797a:	f7fb ff6f 	bl	800385c <HAL_Delay>
    ToggleLED(LED_Red);
 800797e:	2001      	movs	r0, #1
 8007980:	f7ff fcba 	bl	80072f8 <ToggleLED>
    HAL_Delay(50);
 8007984:	2032      	movs	r0, #50	; 0x32
 8007986:	f7fb ff69 	bl	800385c <HAL_Delay>
  while(1) 
 800798a:	e7f2      	b.n	8007972 <Error_Handler+0x2>

0800798c <SystemClock_Config>:
{
 800798c:	b500      	push	{lr}
 800798e:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007990:	2234      	movs	r2, #52	; 0x34
 8007992:	2100      	movs	r1, #0
 8007994:	a82b      	add	r0, sp, #172	; 0xac
 8007996:	f000 fd09 	bl	80083ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800799a:	2100      	movs	r1, #0
 800799c:	9126      	str	r1, [sp, #152]	; 0x98
 800799e:	9127      	str	r1, [sp, #156]	; 0x9c
 80079a0:	9128      	str	r1, [sp, #160]	; 0xa0
 80079a2:	9129      	str	r1, [sp, #164]	; 0xa4
 80079a4:	912a      	str	r1, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80079a6:	2290      	movs	r2, #144	; 0x90
 80079a8:	a802      	add	r0, sp, #8
 80079aa:	f000 fcff 	bl	80083ac <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80079ae:	4b2a      	ldr	r3, [pc, #168]	; (8007a58 <SystemClock_Config+0xcc>)
 80079b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80079b6:	641a      	str	r2, [r3, #64]	; 0x40
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80079c2:	4b26      	ldr	r3, [pc, #152]	; (8007a5c <SystemClock_Config+0xd0>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80079d6:	2301      	movs	r3, #1
 80079d8:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80079da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80079de:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80079e0:	2302      	movs	r3, #2
 80079e2:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80079e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80079e8:	9232      	str	r2, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80079ea:	2219      	movs	r2, #25
 80079ec:	9233      	str	r2, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80079ee:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80079f2:	9234      	str	r2, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80079f4:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80079f6:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80079f8:	a82b      	add	r0, sp, #172	; 0xac
 80079fa:	f7fc fed9 	bl	80047b0 <HAL_RCC_OscConfig>
 80079fe:	bb10      	cbnz	r0, 8007a46 <SystemClock_Config+0xba>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007a00:	f7fc fe98 	bl	8004734 <HAL_PWREx_EnableOverDrive>
 8007a04:	bb08      	cbnz	r0, 8007a4a <SystemClock_Config+0xbe>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a06:	230f      	movs	r3, #15
 8007a08:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007a12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007a16:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a1c:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8007a1e:	2107      	movs	r1, #7
 8007a20:	a826      	add	r0, sp, #152	; 0x98
 8007a22:	f7fd f901 	bl	8004c28 <HAL_RCC_ClockConfig>
 8007a26:	b990      	cbnz	r0, 8007a4e <SystemClock_Config+0xc2>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1;
 8007a28:	f44f 1382 	mov.w	r3, #1064960	; 0x104000
 8007a2c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PIN;
 8007a2e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007a32:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007a34:	2300      	movs	r3, #0
 8007a36:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a38:	a802      	add	r0, sp, #8
 8007a3a:	f7fd f9a7 	bl	8004d8c <HAL_RCCEx_PeriphCLKConfig>
 8007a3e:	b940      	cbnz	r0, 8007a52 <SystemClock_Config+0xc6>
}
 8007a40:	b039      	add	sp, #228	; 0xe4
 8007a42:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007a46:	f7ff ff93 	bl	8007970 <Error_Handler>
    Error_Handler();
 8007a4a:	f7ff ff91 	bl	8007970 <Error_Handler>
    Error_Handler();
 8007a4e:	f7ff ff8f 	bl	8007970 <Error_Handler>
    Error_Handler();
 8007a52:	f7ff ff8d 	bl	8007970 <Error_Handler>
 8007a56:	bf00      	nop
 8007a58:	40023800 	.word	0x40023800
 8007a5c:	40007000 	.word	0x40007000

08007a60 <main>:
{
 8007a60:	b508      	push	{r3, lr}
  __ASM volatile ("dsb 0xF":::"memory");
 8007a62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007a66:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007a6a:	4b2c      	ldr	r3, [pc, #176]	; (8007b1c <main+0xbc>)
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007a72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007a76:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007a7a:	695a      	ldr	r2, [r3, #20]
 8007a7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007a80:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007a82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007a86:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8007a8a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007a8e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8007a92:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007a96:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8007a9a:	e000      	b.n	8007a9e <main+0x3e>
    } while(sets-- != 0U);
 8007a9c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007a9e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007aa2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007aa6:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8007aaa:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8007aae:	491b      	ldr	r1, [pc, #108]	; (8007b1c <main+0xbc>)
 8007ab0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	3a01      	subs	r2, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1f2      	bne.n	8007aa2 <main+0x42>
    } while(sets-- != 0U);
 8007abc:	1e43      	subs	r3, r0, #1
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d1ec      	bne.n	8007a9c <main+0x3c>
 8007ac2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007ac6:	694b      	ldr	r3, [r1, #20]
 8007ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007acc:	614b      	str	r3, [r1, #20]
 8007ace:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007ad2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8007ad6:	f7fb fea3 	bl	8003820 <HAL_Init>
  SystemClock_Config();
 8007ada:	f7ff ff57 	bl	800798c <SystemClock_Config>
  MX_GPIO_Init();
 8007ade:	f7ff fd95 	bl	800760c <MX_GPIO_Init>
  MX_DMA_Init();
 8007ae2:	f7ff fc43 	bl	800736c <MX_DMA_Init>
  MX_I2C1_Init();
 8007ae6:	f7ff fe8d 	bl	8007804 <MX_I2C1_Init>
  MX_SAI2_Init();
 8007aea:	f000 f81f 	bl	8007b2c <MX_SAI2_Init>
  MX_SPI1_Init();
 8007aee:	f000 f905 	bl	8007cfc <MX_SPI1_Init>
  MX_SPI2_Init();
 8007af2:	f000 f929 	bl	8007d48 <MX_SPI2_Init>
  MX_SPI3_Init();
 8007af6:	f000 f94d 	bl	8007d94 <MX_SPI3_Init>
  MX_TIM1_Init();
 8007afa:	f000 fb79 	bl	80081f0 <MX_TIM1_Init>
  ILI9341_Initialize(&hspi1, 0);
 8007afe:	2100      	movs	r1, #0
 8007b00:	4807      	ldr	r0, [pc, #28]	; (8007b20 <main+0xc0>)
 8007b02:	f7fe ffef 	bl	8006ae4 <ILI9341_Initialize>
  HAL_GPIO_WritePin(LCD_NBACKLIGHT_GPIO_Port, LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET); // Backlight on.
 8007b06:	2200      	movs	r2, #0
 8007b08:	2108      	movs	r1, #8
 8007b0a:	4806      	ldr	r0, [pc, #24]	; (8007b24 <main+0xc4>)
 8007b0c:	f7fc fa34 	bl	8003f78 <HAL_GPIO_WritePin>
  XPT2046_Initialize(&hspi2);
 8007b10:	4805      	ldr	r0, [pc, #20]	; (8007b28 <main+0xc8>)
 8007b12:	f7ff fbeb 	bl	80072ec <XPT2046_Initialize>
  Go();
 8007b16:	f7ff fcd1 	bl	80074bc <Go>
  while (1)
 8007b1a:	e7fe      	b.n	8007b1a <main+0xba>
 8007b1c:	e000ed00 	.word	0xe000ed00
 8007b20:	200009e4 	.word	0x200009e4
 8007b24:	40020800 	.word	0x40020800
 8007b28:	20000a48 	.word	0x20000a48

08007b2c <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8007b2c:	b508      	push	{r3, lr}

  hsai_BlockA2.Instance = SAI2_Block_A;
 8007b2e:	4817      	ldr	r0, [pc, #92]	; (8007b8c <MX_SAI2_Init+0x60>)
 8007b30:	4b17      	ldr	r3, [pc, #92]	; (8007b90 <MX_SAI2_Init+0x64>)
 8007b32:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8007b34:	2100      	movs	r1, #0
 8007b36:	6041      	str	r1, [r0, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8007b38:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007b3a:	6101      	str	r1, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8007b3c:	6141      	str	r1, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007b3e:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8007b40:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007b44:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8007b46:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8007b48:	6241      	str	r1, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8007b4a:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007b4c:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8007b4e:	2302      	movs	r3, #2
 8007b50:	2203      	movs	r2, #3
 8007b52:	f7fd ff09 	bl	8005968 <HAL_SAI_InitProtocol>
 8007b56:	b990      	cbnz	r0, 8007b7e <MX_SAI2_Init+0x52>
  {
    Error_Handler();
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8007b58:	480e      	ldr	r0, [pc, #56]	; (8007b94 <MX_SAI2_Init+0x68>)
 8007b5a:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <MX_SAI2_Init+0x6c>)
 8007b5c:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8007b5e:	2203      	movs	r2, #3
 8007b60:	6042      	str	r2, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8007b62:	2301      	movs	r3, #1
 8007b64:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007b66:	2100      	movs	r1, #0
 8007b68:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007b6a:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8007b6c:	60c1      	str	r1, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8007b6e:	6241      	str	r1, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8007b70:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007b72:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8007b74:	2302      	movs	r3, #2
 8007b76:	f7fd fef7 	bl	8005968 <HAL_SAI_InitProtocol>
 8007b7a:	b918      	cbnz	r0, 8007b84 <MX_SAI2_Init+0x58>
  {
    Error_Handler();
  }

}
 8007b7c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007b7e:	f7ff fef7 	bl	8007970 <Error_Handler>
 8007b82:	e7e9      	b.n	8007b58 <MX_SAI2_Init+0x2c>
    Error_Handler();
 8007b84:	f7ff fef4 	bl	8007970 <Error_Handler>
}
 8007b88:	e7f8      	b.n	8007b7c <MX_SAI2_Init+0x50>
 8007b8a:	bf00      	nop
 8007b8c:	2000087c 	.word	0x2000087c
 8007b90:	40015c04 	.word	0x40015c04
 8007b94:	20000900 	.word	0x20000900
 8007b98:	40015c24 	.word	0x40015c24

08007b9c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8007b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9e:	b089      	sub	sp, #36	; 0x24
 8007ba0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8007ba2:	6802      	ldr	r2, [r0, #0]
 8007ba4:	4b4a      	ldr	r3, [pc, #296]	; (8007cd0 <HAL_SAI_MspInit+0x134>)
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d005      	beq.n	8007bb6 <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
    }
    if(hsai->Instance==SAI2_Block_B)
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	4b49      	ldr	r3, [pc, #292]	; (8007cd4 <HAL_SAI_MspInit+0x138>)
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d04d      	beq.n	8007c4e <HAL_SAI_MspInit+0xb2>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
    }
}
 8007bb2:	b009      	add	sp, #36	; 0x24
 8007bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI2_client == 0)
 8007bb6:	4b48      	ldr	r3, [pc, #288]	; (8007cd8 <HAL_SAI_MspInit+0x13c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	b94b      	cbnz	r3, 8007bd0 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8007bbc:	4a47      	ldr	r2, [pc, #284]	; (8007cdc <HAL_SAI_MspInit+0x140>)
 8007bbe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007bc0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007bc4:	6451      	str	r1, [r2, #68]	; 0x44
 8007bc6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007bc8:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8007bcc:	9201      	str	r2, [sp, #4]
 8007bce:	9a01      	ldr	r2, [sp, #4]
    SAI2_client ++;
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	4a41      	ldr	r2, [pc, #260]	; (8007cd8 <HAL_SAI_MspInit+0x13c>)
 8007bd4:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
 8007bd6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007bda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bdc:	2702      	movs	r7, #2
 8007bde:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be0:	2500      	movs	r5, #0
 8007be2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007be4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8007be6:	260a      	movs	r6, #10
 8007be8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007bea:	a903      	add	r1, sp, #12
 8007bec:	483c      	ldr	r0, [pc, #240]	; (8007ce0 <HAL_SAI_MspInit+0x144>)
 8007bee:	f7fc f8d3 	bl	8003d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bfa:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8007bfc:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 8007bfe:	a903      	add	r1, sp, #12
 8007c00:	4838      	ldr	r0, [pc, #224]	; (8007ce4 <HAL_SAI_MspInit+0x148>)
 8007c02:	f7fc f8c9 	bl	8003d98 <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA2_Stream2;
 8007c06:	4838      	ldr	r0, [pc, #224]	; (8007ce8 <HAL_SAI_MspInit+0x14c>)
 8007c08:	4b38      	ldr	r3, [pc, #224]	; (8007cec <HAL_SAI_MspInit+0x150>)
 8007c0a:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 8007c0c:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 8007c10:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c12:	2340      	movs	r3, #64	; 0x40
 8007c14:	6083      	str	r3, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c16:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8007c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c1c:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c22:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007c24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c28:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8007c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c2e:	61c3      	str	r3, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8007c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c34:	6203      	str	r3, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c36:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8007c38:	f7fb ff0c 	bl	8003a54 <HAL_DMA_Init>
 8007c3c:	b920      	cbnz	r0, 8007c48 <HAL_SAI_MspInit+0xac>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8007c3e:	4b2a      	ldr	r3, [pc, #168]	; (8007ce8 <HAL_SAI_MspInit+0x14c>)
 8007c40:	6723      	str	r3, [r4, #112]	; 0x70
 8007c42:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8007c44:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007c46:	e7b0      	b.n	8007baa <HAL_SAI_MspInit+0xe>
      Error_Handler();
 8007c48:	f7ff fe92 	bl	8007970 <Error_Handler>
 8007c4c:	e7f7      	b.n	8007c3e <HAL_SAI_MspInit+0xa2>
      if (SAI2_client == 0)
 8007c4e:	4b22      	ldr	r3, [pc, #136]	; (8007cd8 <HAL_SAI_MspInit+0x13c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	b94b      	cbnz	r3, 8007c68 <HAL_SAI_MspInit+0xcc>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8007c54:	4a21      	ldr	r2, [pc, #132]	; (8007cdc <HAL_SAI_MspInit+0x140>)
 8007c56:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007c58:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007c5c:	6451      	str	r1, [r2, #68]	; 0x44
 8007c5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007c60:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8007c64:	9202      	str	r2, [sp, #8]
 8007c66:	9a02      	ldr	r2, [sp, #8]
    SAI2_client ++;
 8007c68:	3301      	adds	r3, #1
 8007c6a:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <HAL_SAI_MspInit+0x13c>)
 8007c6c:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c72:	2302      	movs	r3, #2
 8007c74:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c76:	2500      	movs	r5, #0
 8007c78:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c7a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8007c7c:	230a      	movs	r3, #10
 8007c7e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8007c80:	a903      	add	r1, sp, #12
 8007c82:	481b      	ldr	r0, [pc, #108]	; (8007cf0 <HAL_SAI_MspInit+0x154>)
 8007c84:	f7fc f888 	bl	8003d98 <HAL_GPIO_Init>
    hdma_sai2_b.Instance = DMA2_Stream1;
 8007c88:	481a      	ldr	r0, [pc, #104]	; (8007cf4 <HAL_SAI_MspInit+0x158>)
 8007c8a:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <HAL_SAI_MspInit+0x15c>)
 8007c8c:	6003      	str	r3, [r0, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8007c8e:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 8007c92:	6043      	str	r3, [r0, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c94:	6085      	str	r5, [r0, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c96:	60c5      	str	r5, [r0, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8007c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c9c:	6103      	str	r3, [r0, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ca2:	6143      	str	r3, [r0, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ca8:	6183      	str	r3, [r0, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8007caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cae:	61c3      	str	r3, [r0, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8007cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007cb4:	6203      	str	r3, [r0, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007cb6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8007cb8:	f7fb fecc 	bl	8003a54 <HAL_DMA_Init>
 8007cbc:	b920      	cbnz	r0, 8007cc8 <HAL_SAI_MspInit+0x12c>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <HAL_SAI_MspInit+0x158>)
 8007cc0:	6723      	str	r3, [r4, #112]	; 0x70
 8007cc2:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8007cc4:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8007cc6:	e774      	b.n	8007bb2 <HAL_SAI_MspInit+0x16>
      Error_Handler();
 8007cc8:	f7ff fe52 	bl	8007970 <Error_Handler>
 8007ccc:	e7f7      	b.n	8007cbe <HAL_SAI_MspInit+0x122>
 8007cce:	bf00      	nop
 8007cd0:	40015c04 	.word	0x40015c04
 8007cd4:	40015c24 	.word	0x40015c24
 8007cd8:	200007b8 	.word	0x200007b8
 8007cdc:	40023800 	.word	0x40023800
 8007ce0:	40020c00 	.word	0x40020c00
 8007ce4:	40021000 	.word	0x40021000
 8007ce8:	200007bc 	.word	0x200007bc
 8007cec:	40026440 	.word	0x40026440
 8007cf0:	40020000 	.word	0x40020000
 8007cf4:	2000081c 	.word	0x2000081c
 8007cf8:	40026428 	.word	0x40026428

08007cfc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007cfc:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8007cfe:	4810      	ldr	r0, [pc, #64]	; (8007d40 <MX_SPI1_Init+0x44>)
 8007d00:	4b10      	ldr	r3, [pc, #64]	; (8007d44 <MX_SPI1_Init+0x48>)
 8007d02:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007d04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007d08:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007d12:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d14:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007d16:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d1c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d1e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d20:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007d22:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d24:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007d26:	2207      	movs	r2, #7
 8007d28:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007d2a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007d2c:	2308      	movs	r3, #8
 8007d2e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007d30:	f7fd ffac 	bl	8005c8c <HAL_SPI_Init>
 8007d34:	b900      	cbnz	r0, 8007d38 <MX_SPI1_Init+0x3c>
  {
    Error_Handler();
  }

}
 8007d36:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007d38:	f7ff fe1a 	bl	8007970 <Error_Handler>
}
 8007d3c:	e7fb      	b.n	8007d36 <MX_SPI1_Init+0x3a>
 8007d3e:	bf00      	nop
 8007d40:	200009e4 	.word	0x200009e4
 8007d44:	40013000 	.word	0x40013000

08007d48 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007d48:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8007d4a:	4810      	ldr	r0, [pc, #64]	; (8007d8c <MX_SPI2_Init+0x44>)
 8007d4c:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <MX_SPI2_Init+0x48>)
 8007d4e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007d50:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007d54:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007d56:	2300      	movs	r3, #0
 8007d58:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007d5e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d60:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007d62:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d68:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d6e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007d70:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d72:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8007d74:	2207      	movs	r2, #7
 8007d76:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007d78:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007d7a:	2308      	movs	r3, #8
 8007d7c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007d7e:	f7fd ff85 	bl	8005c8c <HAL_SPI_Init>
 8007d82:	b900      	cbnz	r0, 8007d86 <MX_SPI2_Init+0x3e>
  {
    Error_Handler();
  }

}
 8007d84:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007d86:	f7ff fdf3 	bl	8007970 <Error_Handler>
}
 8007d8a:	e7fb      	b.n	8007d84 <MX_SPI2_Init+0x3c>
 8007d8c:	20000a48 	.word	0x20000a48
 8007d90:	40003800 	.word	0x40003800

08007d94 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007d94:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8007d96:	4810      	ldr	r0, [pc, #64]	; (8007dd8 <MX_SPI3_Init+0x44>)
 8007d98:	4b10      	ldr	r3, [pc, #64]	; (8007ddc <MX_SPI3_Init+0x48>)
 8007d9a:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007d9c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007da0:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007da2:	2300      	movs	r3, #0
 8007da4:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007da6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007daa:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007dac:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007dae:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db4:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007db6:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007db8:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007dba:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dbc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007dbe:	2207      	movs	r2, #7
 8007dc0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007dc2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007dc8:	f7fd ff60 	bl	8005c8c <HAL_SPI_Init>
 8007dcc:	b900      	cbnz	r0, 8007dd0 <MX_SPI3_Init+0x3c>
  {
    Error_Handler();
  }

}
 8007dce:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007dd0:	f7ff fdce 	bl	8007970 <Error_Handler>
}
 8007dd4:	e7fb      	b.n	8007dce <MX_SPI3_Init+0x3a>
 8007dd6:	bf00      	nop
 8007dd8:	20000aac 	.word	0x20000aac
 8007ddc:	40003c00 	.word	0x40003c00

08007de0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007de0:	b530      	push	{r4, r5, lr}
 8007de2:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007de4:	2300      	movs	r3, #0
 8007de6:	9307      	str	r3, [sp, #28]
 8007de8:	9308      	str	r3, [sp, #32]
 8007dea:	9309      	str	r3, [sp, #36]	; 0x24
 8007dec:	930a      	str	r3, [sp, #40]	; 0x28
 8007dee:	930b      	str	r3, [sp, #44]	; 0x2c
  if(spiHandle->Instance==SPI1)
 8007df0:	6803      	ldr	r3, [r0, #0]
 8007df2:	4a47      	ldr	r2, [pc, #284]	; (8007f10 <HAL_SPI_MspInit+0x130>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d007      	beq.n	8007e08 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8007df8:	4a46      	ldr	r2, [pc, #280]	; (8007f14 <HAL_SPI_MspInit+0x134>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d046      	beq.n	8007e8c <HAL_SPI_MspInit+0xac>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8007dfe:	4a46      	ldr	r2, [pc, #280]	; (8007f18 <HAL_SPI_MspInit+0x138>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d064      	beq.n	8007ece <HAL_SPI_MspInit+0xee>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007e04:	b00d      	add	sp, #52	; 0x34
 8007e06:	bd30      	pop	{r4, r5, pc}
 8007e08:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007e0a:	4b44      	ldr	r3, [pc, #272]	; (8007f1c <HAL_SPI_MspInit+0x13c>)
 8007e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e12:	645a      	str	r2, [r3, #68]	; 0x44
 8007e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e16:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007e1a:	9201      	str	r2, [sp, #4]
 8007e1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e20:	f042 0201 	orr.w	r2, r2, #1
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30
 8007e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	9302      	str	r3, [sp, #8]
 8007e2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8007e30:	23e0      	movs	r3, #224	; 0xe0
 8007e32:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e34:	2302      	movs	r3, #2
 8007e36:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e38:	2503      	movs	r5, #3
 8007e3a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007e3c:	2305      	movs	r3, #5
 8007e3e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e40:	a907      	add	r1, sp, #28
 8007e42:	4837      	ldr	r0, [pc, #220]	; (8007f20 <HAL_SPI_MspInit+0x140>)
 8007e44:	f7fb ffa8 	bl	8003d98 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8007e48:	4836      	ldr	r0, [pc, #216]	; (8007f24 <HAL_SPI_MspInit+0x144>)
 8007e4a:	4b37      	ldr	r3, [pc, #220]	; (8007f28 <HAL_SPI_MspInit+0x148>)
 8007e4c:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8007e4e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8007e52:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e54:	2340      	movs	r3, #64	; 0x40
 8007e56:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e60:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e62:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e64:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8007e66:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007e68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e6c:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007e6e:	2204      	movs	r2, #4
 8007e70:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007e72:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007e74:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007e76:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007e78:	f7fb fdec 	bl	8003a54 <HAL_DMA_Init>
 8007e7c:	b918      	cbnz	r0, 8007e86 <HAL_SPI_MspInit+0xa6>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8007e7e:	4b29      	ldr	r3, [pc, #164]	; (8007f24 <HAL_SPI_MspInit+0x144>)
 8007e80:	6563      	str	r3, [r4, #84]	; 0x54
 8007e82:	639c      	str	r4, [r3, #56]	; 0x38
 8007e84:	e7be      	b.n	8007e04 <HAL_SPI_MspInit+0x24>
      Error_Handler();
 8007e86:	f7ff fd73 	bl	8007970 <Error_Handler>
 8007e8a:	e7f8      	b.n	8007e7e <HAL_SPI_MspInit+0x9e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007e8c:	4b23      	ldr	r3, [pc, #140]	; (8007f1c <HAL_SPI_MspInit+0x13c>)
 8007e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e94:	641a      	str	r2, [r3, #64]	; 0x40
 8007e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e98:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007e9c:	9203      	str	r2, [sp, #12]
 8007e9e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea2:	f042 0202 	orr.w	r2, r2, #2
 8007ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	9304      	str	r3, [sp, #16]
 8007eb0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 8007eb2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007eb6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007ec0:	2305      	movs	r3, #5
 8007ec2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ec4:	a907      	add	r1, sp, #28
 8007ec6:	4819      	ldr	r0, [pc, #100]	; (8007f2c <HAL_SPI_MspInit+0x14c>)
 8007ec8:	f7fb ff66 	bl	8003d98 <HAL_GPIO_Init>
 8007ecc:	e79a      	b.n	8007e04 <HAL_SPI_MspInit+0x24>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007ece:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <HAL_SPI_MspInit+0x13c>)
 8007ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8007ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eda:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8007ede:	9205      	str	r2, [sp, #20]
 8007ee0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ee4:	f042 0204 	orr.w	r2, r2, #4
 8007ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8007eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	9306      	str	r3, [sp, #24]
 8007ef2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GENSPI_SCK_Pin|GENSPI_MISO_Pin|GENSPI_MOSI_Pin;
 8007ef4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ef8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007efa:	2302      	movs	r3, #2
 8007efc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007efe:	2303      	movs	r3, #3
 8007f00:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007f02:	2306      	movs	r3, #6
 8007f04:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f06:	a907      	add	r1, sp, #28
 8007f08:	4809      	ldr	r0, [pc, #36]	; (8007f30 <HAL_SPI_MspInit+0x150>)
 8007f0a:	f7fb ff45 	bl	8003d98 <HAL_GPIO_Init>
}
 8007f0e:	e779      	b.n	8007e04 <HAL_SPI_MspInit+0x24>
 8007f10:	40013000 	.word	0x40013000
 8007f14:	40003800 	.word	0x40003800
 8007f18:	40003c00 	.word	0x40003c00
 8007f1c:	40023800 	.word	0x40023800
 8007f20:	40020000 	.word	0x40020000
 8007f24:	20000984 	.word	0x20000984
 8007f28:	40026488 	.word	0x40026488
 8007f2c:	40020400 	.word	0x40020400
 8007f30:	40020800 	.word	0x40020800

08007f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f34:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <HAL_MspInit+0x2c>)
 8007f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8007f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f42:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8007f46:	9200      	str	r2, [sp, #0]
 8007f48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f50:	645a      	str	r2, [r3, #68]	; 0x44
 8007f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f5c:	b002      	add	sp, #8
 8007f5e:	4770      	bx	lr
 8007f60:	40023800 	.word	0x40023800

08007f64 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007f64:	4770      	bx	lr

08007f66 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f66:	e7fe      	b.n	8007f66 <HardFault_Handler>

08007f68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f68:	e7fe      	b.n	8007f68 <MemManage_Handler>

08007f6a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f6a:	e7fe      	b.n	8007f6a <BusFault_Handler>

08007f6c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f6c:	e7fe      	b.n	8007f6c <UsageFault_Handler>

08007f6e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007f6e:	4770      	bx	lr

08007f70 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f70:	4770      	bx	lr

08007f72 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f72:	4770      	bx	lr

08007f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f76:	f7fb fc5f 	bl	8003838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f7a:	bd08      	pop	{r3, pc}

08007f7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007f7e:	4802      	ldr	r0, [pc, #8]	; (8007f88 <DMA1_Stream5_IRQHandler+0xc>)
 8007f80:	f7fb fe1c 	bl	8003bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007f84:	bd08      	pop	{r3, pc}
 8007f86:	bf00      	nop
 8007f88:	200006ac 	.word	0x200006ac

08007f8c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007f8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007f8e:	4802      	ldr	r0, [pc, #8]	; (8007f98 <DMA1_Stream6_IRQHandler+0xc>)
 8007f90:	f7fb fe14 	bl	8003bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007f94:	bd08      	pop	{r3, pc}
 8007f96:	bf00      	nop
 8007f98:	2000070c 	.word	0x2000070c

08007f9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007f9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007f9e:	2020      	movs	r0, #32
 8007fa0:	f7fb fffa 	bl	8003f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007fa4:	bd08      	pop	{r3, pc}
	...

08007fa8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007fa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007faa:	4802      	ldr	r0, [pc, #8]	; (8007fb4 <I2C1_EV_IRQHandler+0xc>)
 8007fac:	f7fc f8ac 	bl	8004108 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007fb0:	bd08      	pop	{r3, pc}
 8007fb2:	bf00      	nop
 8007fb4:	2000076c 	.word	0x2000076c

08007fb8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8007fb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007fba:	4802      	ldr	r0, [pc, #8]	; (8007fc4 <I2C1_ER_IRQHandler+0xc>)
 8007fbc:	f7fc fb15 	bl	80045ea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007fc0:	bd08      	pop	{r3, pc}
 8007fc2:	bf00      	nop
 8007fc4:	2000076c 	.word	0x2000076c

08007fc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007fc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007fca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007fce:	f7fb ffe3 	bl	8003f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007fd2:	bd08      	pop	{r3, pc}

08007fd4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007fd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8007fd6:	4802      	ldr	r0, [pc, #8]	; (8007fe0 <DMA2_Stream1_IRQHandler+0xc>)
 8007fd8:	f7fb fdf0 	bl	8003bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007fdc:	bd08      	pop	{r3, pc}
 8007fde:	bf00      	nop
 8007fe0:	2000081c 	.word	0x2000081c

08007fe4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007fe4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8007fe6:	4802      	ldr	r0, [pc, #8]	; (8007ff0 <DMA2_Stream2_IRQHandler+0xc>)
 8007fe8:	f7fb fde8 	bl	8003bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007fec:	bd08      	pop	{r3, pc}
 8007fee:	bf00      	nop
 8007ff0:	200007bc 	.word	0x200007bc

08007ff4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007ff4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8007ff6:	4802      	ldr	r0, [pc, #8]	; (8008000 <DMA2_Stream3_IRQHandler+0xc>)
 8007ff8:	f7fb fde0 	bl	8003bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007ffc:	bd08      	pop	{r3, pc}
 8007ffe:	bf00      	nop
 8008000:	20000b14 	.word	0x20000b14

08008004 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8008004:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8008006:	4802      	ldr	r0, [pc, #8]	; (8008010 <DMA2_Stream5_IRQHandler+0xc>)
 8008008:	f7fb fdd8 	bl	8003bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800800c:	bd08      	pop	{r3, pc}
 800800e:	bf00      	nop
 8008010:	20000984 	.word	0x20000984

08008014 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8008014:	2001      	movs	r0, #1
 8008016:	4770      	bx	lr

08008018 <_kill>:

int _kill(int pid, int sig)
{
 8008018:	b508      	push	{r3, lr}
	errno = EINVAL;
 800801a:	f000 f97f 	bl	800831c <__errno>
 800801e:	2316      	movs	r3, #22
 8008020:	6003      	str	r3, [r0, #0]
	return -1;
}
 8008022:	f04f 30ff 	mov.w	r0, #4294967295
 8008026:	bd08      	pop	{r3, pc}

08008028 <_exit>:

void _exit (int status)
{
 8008028:	b508      	push	{r3, lr}
	_kill(status, -1);
 800802a:	f04f 31ff 	mov.w	r1, #4294967295
 800802e:	f7ff fff3 	bl	8008018 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008032:	e7fe      	b.n	8008032 <_exit+0xa>

08008034 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	460c      	mov	r4, r1
 8008038:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800803a:	2500      	movs	r5, #0
 800803c:	e006      	b.n	800804c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800803e:	f3af 8000 	nop.w
 8008042:	4621      	mov	r1, r4
 8008044:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008048:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800804a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800804c:	42b5      	cmp	r5, r6
 800804e:	dbf6      	blt.n	800803e <_read+0xa>
	}

return len;
}
 8008050:	4630      	mov	r0, r6
 8008052:	bd70      	pop	{r4, r5, r6, pc}

08008054 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	460c      	mov	r4, r1
 8008058:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800805a:	2500      	movs	r5, #0
 800805c:	e004      	b.n	8008068 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800805e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008062:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008066:	3501      	adds	r5, #1
 8008068:	42b5      	cmp	r5, r6
 800806a:	dbf8      	blt.n	800805e <_write+0xa>
	}
	return len;
}
 800806c:	4630      	mov	r0, r6
 800806e:	bd70      	pop	{r4, r5, r6, pc}

08008070 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8008070:	b508      	push	{r3, lr}
 8008072:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008074:	4a0b      	ldr	r2, [pc, #44]	; (80080a4 <_sbrk+0x34>)
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	b142      	cbz	r2, 800808c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800807a:	4a0a      	ldr	r2, [pc, #40]	; (80080a4 <_sbrk+0x34>)
 800807c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800807e:	4403      	add	r3, r0
 8008080:	466a      	mov	r2, sp
 8008082:	4293      	cmp	r3, r2
 8008084:	d806      	bhi.n	8008094 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8008086:	4a07      	ldr	r2, [pc, #28]	; (80080a4 <_sbrk+0x34>)
 8008088:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800808a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800808c:	4a05      	ldr	r2, [pc, #20]	; (80080a4 <_sbrk+0x34>)
 800808e:	4906      	ldr	r1, [pc, #24]	; (80080a8 <_sbrk+0x38>)
 8008090:	6011      	str	r1, [r2, #0]
 8008092:	e7f2      	b.n	800807a <_sbrk+0xa>
		errno = ENOMEM;
 8008094:	f000 f942 	bl	800831c <__errno>
 8008098:	230c      	movs	r3, #12
 800809a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	e7f3      	b.n	800808a <_sbrk+0x1a>
 80080a2:	bf00      	nop
 80080a4:	20000b10 	.word	0x20000b10
 80080a8:	20000bc4 	.word	0x20000bc4

080080ac <_close>:

int _close(int file)
{
	return -1;
}
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	4770      	bx	lr

080080b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80080b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080b6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80080b8:	2000      	movs	r0, #0
 80080ba:	4770      	bx	lr

080080bc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80080bc:	2001      	movs	r0, #1
 80080be:	4770      	bx	lr

080080c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr

080080c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80080c4:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80080c6:	4a0f      	ldr	r2, [pc, #60]	; (8008104 <SystemInit+0x40>)
 80080c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80080cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <SystemInit+0x44>)
 80080d6:	6819      	ldr	r1, [r3, #0]
 80080d8:	f041 0101 	orr.w	r1, r1, #1
 80080dc:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80080de:	2000      	movs	r0, #0
 80080e0:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80080e2:	681c      	ldr	r4, [r3, #0]
 80080e4:	4909      	ldr	r1, [pc, #36]	; (800810c <SystemInit+0x48>)
 80080e6:	4021      	ands	r1, r4
 80080e8:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80080ea:	4909      	ldr	r1, [pc, #36]	; (8008110 <SystemInit+0x4c>)
 80080ec:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80080ee:	6819      	ldr	r1, [r3, #0]
 80080f0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80080f4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80080f6:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80080f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080fc:	6093      	str	r3, [r2, #8]
#endif
}
 80080fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	e000ed00 	.word	0xe000ed00
 8008108:	40023800 	.word	0x40023800
 800810c:	fef6ffff 	.word	0xfef6ffff
 8008110:	24003010 	.word	0x24003010

08008114 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8008114:	6802      	ldr	r2, [r0, #0]
 8008116:	4b1d      	ldr	r3, [pc, #116]	; (800818c <HAL_TIM_PWM_MspInit+0x78>)
 8008118:	429a      	cmp	r2, r3
 800811a:	d000      	beq.n	800811e <HAL_TIM_PWM_MspInit+0xa>
 800811c:	4770      	bx	lr
{
 800811e:	b510      	push	{r4, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008124:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8008128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	645a      	str	r2, [r3, #68]	; 0x44
 8008130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	9b01      	ldr	r3, [sp, #4]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 800813a:	4815      	ldr	r0, [pc, #84]	; (8008190 <HAL_TIM_PWM_MspInit+0x7c>)
 800813c:	4b15      	ldr	r3, [pc, #84]	; (8008194 <HAL_TIM_PWM_MspInit+0x80>)
 800813e:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8008140:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8008144:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008146:	2340      	movs	r3, #64	; 0x40
 8008148:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800814a:	2300      	movs	r3, #0
 800814c:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800814e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008152:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008158:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800815a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800815e:	6182      	str	r2, [r0, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8008160:	61c3      	str	r3, [r0, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008162:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008166:	6202      	str	r2, [r0, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008168:	2204      	movs	r2, #4
 800816a:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800816c:	2203      	movs	r2, #3
 800816e:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8008170:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008172:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8008174:	f7fb fc6e 	bl	8003a54 <HAL_DMA_Init>
 8008178:	b920      	cbnz	r0, 8008184 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <HAL_TIM_PWM_MspInit+0x7c>)
 800817c:	6263      	str	r3, [r4, #36]	; 0x24
 800817e:	639c      	str	r4, [r3, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008180:	b002      	add	sp, #8
 8008182:	bd10      	pop	{r4, pc}
      Error_Handler();
 8008184:	f7ff fbf4 	bl	8007970 <Error_Handler>
 8008188:	e7f7      	b.n	800817a <HAL_TIM_PWM_MspInit+0x66>
 800818a:	bf00      	nop
 800818c:	40010000 	.word	0x40010000
 8008190:	20000b14 	.word	0x20000b14
 8008194:	40026458 	.word	0x40026458

08008198 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008198:	b500      	push	{lr}
 800819a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800819c:	2300      	movs	r3, #0
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	9302      	str	r3, [sp, #8]
 80081a2:	9303      	str	r3, [sp, #12]
 80081a4:	9304      	str	r3, [sp, #16]
 80081a6:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 80081a8:	6802      	ldr	r2, [r0, #0]
 80081aa:	4b0f      	ldr	r3, [pc, #60]	; (80081e8 <HAL_TIM_MspPostInit+0x50>)
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d002      	beq.n	80081b6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80081b0:	b007      	add	sp, #28
 80081b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80081b6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80081ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081bc:	f042 0210 	orr.w	r2, r2, #16
 80081c0:	631a      	str	r2, [r3, #48]	; 0x30
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	f003 0310 	and.w	r3, r3, #16
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
 80081cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081d0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081d2:	2302      	movs	r3, #2
 80081d4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80081d8:	2301      	movs	r3, #1
 80081da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 80081dc:	a901      	add	r1, sp, #4
 80081de:	4803      	ldr	r0, [pc, #12]	; (80081ec <HAL_TIM_MspPostInit+0x54>)
 80081e0:	f7fb fdda 	bl	8003d98 <HAL_GPIO_Init>
}
 80081e4:	e7e4      	b.n	80081b0 <HAL_TIM_MspPostInit+0x18>
 80081e6:	bf00      	nop
 80081e8:	40010000 	.word	0x40010000
 80081ec:	40021000 	.word	0x40021000

080081f0 <MX_TIM1_Init>:
{
 80081f0:	b510      	push	{r4, lr}
 80081f2:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081f4:	2400      	movs	r4, #0
 80081f6:	9413      	str	r4, [sp, #76]	; 0x4c
 80081f8:	9414      	str	r4, [sp, #80]	; 0x50
 80081fa:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80081fc:	940c      	str	r4, [sp, #48]	; 0x30
 80081fe:	940d      	str	r4, [sp, #52]	; 0x34
 8008200:	940e      	str	r4, [sp, #56]	; 0x38
 8008202:	940f      	str	r4, [sp, #60]	; 0x3c
 8008204:	9410      	str	r4, [sp, #64]	; 0x40
 8008206:	9411      	str	r4, [sp, #68]	; 0x44
 8008208:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800820a:	222c      	movs	r2, #44	; 0x2c
 800820c:	4621      	mov	r1, r4
 800820e:	a801      	add	r0, sp, #4
 8008210:	f000 f8cc 	bl	80083ac <memset>
  htim1.Instance = TIM1;
 8008214:	4826      	ldr	r0, [pc, #152]	; (80082b0 <MX_TIM1_Init+0xc0>)
 8008216:	4b27      	ldr	r3, [pc, #156]	; (80082b4 <MX_TIM1_Init+0xc4>)
 8008218:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800821a:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800821c:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 269;
 800821e:	f240 130d 	movw	r3, #269	; 0x10d
 8008222:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008224:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8008226:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008228:	2380      	movs	r3, #128	; 0x80
 800822a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800822c:	f7fe f952 	bl	80064d4 <HAL_TIM_PWM_Init>
 8008230:	2800      	cmp	r0, #0
 8008232:	d131      	bne.n	8008298 <MX_TIM1_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008234:	2300      	movs	r3, #0
 8008236:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008238:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800823a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800823c:	a913      	add	r1, sp, #76	; 0x4c
 800823e:	481c      	ldr	r0, [pc, #112]	; (80082b0 <MX_TIM1_Init+0xc0>)
 8008240:	f7fe fa34 	bl	80066ac <HAL_TIMEx_MasterConfigSynchronization>
 8008244:	2800      	cmp	r0, #0
 8008246:	d12a      	bne.n	800829e <MX_TIM1_Init+0xae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008248:	2360      	movs	r3, #96	; 0x60
 800824a:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800824c:	2200      	movs	r2, #0
 800824e:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008250:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008252:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008254:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008256:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008258:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800825a:	a90c      	add	r1, sp, #48	; 0x30
 800825c:	4814      	ldr	r0, [pc, #80]	; (80082b0 <MX_TIM1_Init+0xc0>)
 800825e:	f7fe f98b 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8008262:	b9f8      	cbnz	r0, 80082a4 <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008264:	2300      	movs	r3, #0
 8008266:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008268:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800826a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800826c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800826e:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008274:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008276:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008278:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800827a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800827e:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008280:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008282:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008284:	a901      	add	r1, sp, #4
 8008286:	480a      	ldr	r0, [pc, #40]	; (80082b0 <MX_TIM1_Init+0xc0>)
 8008288:	f7fe fa44 	bl	8006714 <HAL_TIMEx_ConfigBreakDeadTime>
 800828c:	b968      	cbnz	r0, 80082aa <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 800828e:	4808      	ldr	r0, [pc, #32]	; (80082b0 <MX_TIM1_Init+0xc0>)
 8008290:	f7ff ff82 	bl	8008198 <HAL_TIM_MspPostInit>
}
 8008294:	b016      	add	sp, #88	; 0x58
 8008296:	bd10      	pop	{r4, pc}
    Error_Handler();
 8008298:	f7ff fb6a 	bl	8007970 <Error_Handler>
 800829c:	e7ca      	b.n	8008234 <MX_TIM1_Init+0x44>
    Error_Handler();
 800829e:	f7ff fb67 	bl	8007970 <Error_Handler>
 80082a2:	e7d1      	b.n	8008248 <MX_TIM1_Init+0x58>
    Error_Handler();
 80082a4:	f7ff fb64 	bl	8007970 <Error_Handler>
 80082a8:	e7dc      	b.n	8008264 <MX_TIM1_Init+0x74>
    Error_Handler();
 80082aa:	f7ff fb61 	bl	8007970 <Error_Handler>
 80082ae:	e7ee      	b.n	800828e <MX_TIM1_Init+0x9e>
 80082b0:	20000b74 	.word	0x20000b74
 80082b4:	40010000 	.word	0x40010000

080082b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80082b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80082f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80082bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80082be:	e003      	b.n	80082c8 <LoopCopyDataInit>

080082c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80082c0:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80082c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80082c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80082c6:	3104      	adds	r1, #4

080082c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80082c8:	480b      	ldr	r0, [pc, #44]	; (80082f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80082ca:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80082cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80082ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80082d0:	d3f6      	bcc.n	80082c0 <CopyDataInit>
  ldr  r2, =_sbss
 80082d2:	4a0b      	ldr	r2, [pc, #44]	; (8008300 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80082d4:	e002      	b.n	80082dc <LoopFillZerobss>

080082d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80082d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80082d8:	f842 3b04 	str.w	r3, [r2], #4

080082dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80082dc:	4b09      	ldr	r3, [pc, #36]	; (8008304 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80082de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80082e0:	d3f9      	bcc.n	80082d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80082e2:	f7ff feef 	bl	80080c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80082e6:	f000 f81f 	bl	8008328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80082ea:	f7ff fbb9 	bl	8007a60 <main>
  bx  lr    
 80082ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80082f0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80082f4:	0800d5a8 	.word	0x0800d5a8
  ldr  r0, =_sdata
 80082f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80082fc:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8008300:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008304:	20000bc4 	.word	0x20000bc4

08008308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008308:	e7fe      	b.n	8008308 <ADC_IRQHandler>
	...

0800830c <calloc>:
 800830c:	4b02      	ldr	r3, [pc, #8]	; (8008318 <calloc+0xc>)
 800830e:	460a      	mov	r2, r1
 8008310:	4601      	mov	r1, r0
 8008312:	6818      	ldr	r0, [r3, #0]
 8008314:	f000 b852 	b.w	80083bc <_calloc_r>
 8008318:	20000010 	.word	0x20000010

0800831c <__errno>:
 800831c:	4b01      	ldr	r3, [pc, #4]	; (8008324 <__errno+0x8>)
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	20000010 	.word	0x20000010

08008328 <__libc_init_array>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	4d0d      	ldr	r5, [pc, #52]	; (8008360 <__libc_init_array+0x38>)
 800832c:	4c0d      	ldr	r4, [pc, #52]	; (8008364 <__libc_init_array+0x3c>)
 800832e:	1b64      	subs	r4, r4, r5
 8008330:	10a4      	asrs	r4, r4, #2
 8008332:	2600      	movs	r6, #0
 8008334:	42a6      	cmp	r6, r4
 8008336:	d109      	bne.n	800834c <__libc_init_array+0x24>
 8008338:	4d0b      	ldr	r5, [pc, #44]	; (8008368 <__libc_init_array+0x40>)
 800833a:	4c0c      	ldr	r4, [pc, #48]	; (800836c <__libc_init_array+0x44>)
 800833c:	f002 fc96 	bl	800ac6c <_init>
 8008340:	1b64      	subs	r4, r4, r5
 8008342:	10a4      	asrs	r4, r4, #2
 8008344:	2600      	movs	r6, #0
 8008346:	42a6      	cmp	r6, r4
 8008348:	d105      	bne.n	8008356 <__libc_init_array+0x2e>
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008350:	4798      	blx	r3
 8008352:	3601      	adds	r6, #1
 8008354:	e7ee      	b.n	8008334 <__libc_init_array+0xc>
 8008356:	f855 3b04 	ldr.w	r3, [r5], #4
 800835a:	4798      	blx	r3
 800835c:	3601      	adds	r6, #1
 800835e:	e7f2      	b.n	8008346 <__libc_init_array+0x1e>
 8008360:	0800d5a0 	.word	0x0800d5a0
 8008364:	0800d5a0 	.word	0x0800d5a0
 8008368:	0800d5a0 	.word	0x0800d5a0
 800836c:	0800d5a4 	.word	0x0800d5a4

08008370 <malloc>:
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <malloc+0xc>)
 8008372:	4601      	mov	r1, r0
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	f000 b8a3 	b.w	80084c0 <_malloc_r>
 800837a:	bf00      	nop
 800837c:	20000010 	.word	0x20000010

08008380 <free>:
 8008380:	4b02      	ldr	r3, [pc, #8]	; (800838c <free+0xc>)
 8008382:	4601      	mov	r1, r0
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	f000 b82f 	b.w	80083e8 <_free_r>
 800838a:	bf00      	nop
 800838c:	20000010 	.word	0x20000010

08008390 <memcpy>:
 8008390:	440a      	add	r2, r1
 8008392:	4291      	cmp	r1, r2
 8008394:	f100 33ff 	add.w	r3, r0, #4294967295
 8008398:	d100      	bne.n	800839c <memcpy+0xc>
 800839a:	4770      	bx	lr
 800839c:	b510      	push	{r4, lr}
 800839e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a6:	4291      	cmp	r1, r2
 80083a8:	d1f9      	bne.n	800839e <memcpy+0xe>
 80083aa:	bd10      	pop	{r4, pc}

080083ac <memset>:
 80083ac:	4402      	add	r2, r0
 80083ae:	4603      	mov	r3, r0
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d100      	bne.n	80083b6 <memset+0xa>
 80083b4:	4770      	bx	lr
 80083b6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ba:	e7f9      	b.n	80083b0 <memset+0x4>

080083bc <_calloc_r>:
 80083bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083be:	fba1 2402 	umull	r2, r4, r1, r2
 80083c2:	b94c      	cbnz	r4, 80083d8 <_calloc_r+0x1c>
 80083c4:	4611      	mov	r1, r2
 80083c6:	9201      	str	r2, [sp, #4]
 80083c8:	f000 f87a 	bl	80084c0 <_malloc_r>
 80083cc:	9a01      	ldr	r2, [sp, #4]
 80083ce:	4605      	mov	r5, r0
 80083d0:	b930      	cbnz	r0, 80083e0 <_calloc_r+0x24>
 80083d2:	4628      	mov	r0, r5
 80083d4:	b003      	add	sp, #12
 80083d6:	bd30      	pop	{r4, r5, pc}
 80083d8:	220c      	movs	r2, #12
 80083da:	6002      	str	r2, [r0, #0]
 80083dc:	2500      	movs	r5, #0
 80083de:	e7f8      	b.n	80083d2 <_calloc_r+0x16>
 80083e0:	4621      	mov	r1, r4
 80083e2:	f7ff ffe3 	bl	80083ac <memset>
 80083e6:	e7f4      	b.n	80083d2 <_calloc_r+0x16>

080083e8 <_free_r>:
 80083e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ea:	2900      	cmp	r1, #0
 80083ec:	d044      	beq.n	8008478 <_free_r+0x90>
 80083ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f2:	9001      	str	r0, [sp, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f1a1 0404 	sub.w	r4, r1, #4
 80083fa:	bfb8      	it	lt
 80083fc:	18e4      	addlt	r4, r4, r3
 80083fe:	f001 fb9f 	bl	8009b40 <__malloc_lock>
 8008402:	4a1e      	ldr	r2, [pc, #120]	; (800847c <_free_r+0x94>)
 8008404:	9801      	ldr	r0, [sp, #4]
 8008406:	6813      	ldr	r3, [r2, #0]
 8008408:	b933      	cbnz	r3, 8008418 <_free_r+0x30>
 800840a:	6063      	str	r3, [r4, #4]
 800840c:	6014      	str	r4, [r2, #0]
 800840e:	b003      	add	sp, #12
 8008410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008414:	f001 bb9a 	b.w	8009b4c <__malloc_unlock>
 8008418:	42a3      	cmp	r3, r4
 800841a:	d908      	bls.n	800842e <_free_r+0x46>
 800841c:	6825      	ldr	r5, [r4, #0]
 800841e:	1961      	adds	r1, r4, r5
 8008420:	428b      	cmp	r3, r1
 8008422:	bf01      	itttt	eq
 8008424:	6819      	ldreq	r1, [r3, #0]
 8008426:	685b      	ldreq	r3, [r3, #4]
 8008428:	1949      	addeq	r1, r1, r5
 800842a:	6021      	streq	r1, [r4, #0]
 800842c:	e7ed      	b.n	800840a <_free_r+0x22>
 800842e:	461a      	mov	r2, r3
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	b10b      	cbz	r3, 8008438 <_free_r+0x50>
 8008434:	42a3      	cmp	r3, r4
 8008436:	d9fa      	bls.n	800842e <_free_r+0x46>
 8008438:	6811      	ldr	r1, [r2, #0]
 800843a:	1855      	adds	r5, r2, r1
 800843c:	42a5      	cmp	r5, r4
 800843e:	d10b      	bne.n	8008458 <_free_r+0x70>
 8008440:	6824      	ldr	r4, [r4, #0]
 8008442:	4421      	add	r1, r4
 8008444:	1854      	adds	r4, r2, r1
 8008446:	42a3      	cmp	r3, r4
 8008448:	6011      	str	r1, [r2, #0]
 800844a:	d1e0      	bne.n	800840e <_free_r+0x26>
 800844c:	681c      	ldr	r4, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	6053      	str	r3, [r2, #4]
 8008452:	4421      	add	r1, r4
 8008454:	6011      	str	r1, [r2, #0]
 8008456:	e7da      	b.n	800840e <_free_r+0x26>
 8008458:	d902      	bls.n	8008460 <_free_r+0x78>
 800845a:	230c      	movs	r3, #12
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	e7d6      	b.n	800840e <_free_r+0x26>
 8008460:	6825      	ldr	r5, [r4, #0]
 8008462:	1961      	adds	r1, r4, r5
 8008464:	428b      	cmp	r3, r1
 8008466:	bf04      	itt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	bf04      	itt	eq
 8008470:	1949      	addeq	r1, r1, r5
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	6054      	str	r4, [r2, #4]
 8008476:	e7ca      	b.n	800840e <_free_r+0x26>
 8008478:	b003      	add	sp, #12
 800847a:	bd30      	pop	{r4, r5, pc}
 800847c:	20000bb4 	.word	0x20000bb4

08008480 <sbrk_aligned>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	4e0e      	ldr	r6, [pc, #56]	; (80084bc <sbrk_aligned+0x3c>)
 8008484:	460c      	mov	r4, r1
 8008486:	6831      	ldr	r1, [r6, #0]
 8008488:	4605      	mov	r5, r0
 800848a:	b911      	cbnz	r1, 8008492 <sbrk_aligned+0x12>
 800848c:	f000 fcd6 	bl	8008e3c <_sbrk_r>
 8008490:	6030      	str	r0, [r6, #0]
 8008492:	4621      	mov	r1, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f000 fcd1 	bl	8008e3c <_sbrk_r>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d00a      	beq.n	80084b4 <sbrk_aligned+0x34>
 800849e:	1cc4      	adds	r4, r0, #3
 80084a0:	f024 0403 	bic.w	r4, r4, #3
 80084a4:	42a0      	cmp	r0, r4
 80084a6:	d007      	beq.n	80084b8 <sbrk_aligned+0x38>
 80084a8:	1a21      	subs	r1, r4, r0
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 fcc6 	bl	8008e3c <_sbrk_r>
 80084b0:	3001      	adds	r0, #1
 80084b2:	d101      	bne.n	80084b8 <sbrk_aligned+0x38>
 80084b4:	f04f 34ff 	mov.w	r4, #4294967295
 80084b8:	4620      	mov	r0, r4
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	20000bb8 	.word	0x20000bb8

080084c0 <_malloc_r>:
 80084c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c4:	1ccd      	adds	r5, r1, #3
 80084c6:	f025 0503 	bic.w	r5, r5, #3
 80084ca:	3508      	adds	r5, #8
 80084cc:	2d0c      	cmp	r5, #12
 80084ce:	bf38      	it	cc
 80084d0:	250c      	movcc	r5, #12
 80084d2:	2d00      	cmp	r5, #0
 80084d4:	4607      	mov	r7, r0
 80084d6:	db01      	blt.n	80084dc <_malloc_r+0x1c>
 80084d8:	42a9      	cmp	r1, r5
 80084da:	d905      	bls.n	80084e8 <_malloc_r+0x28>
 80084dc:	230c      	movs	r3, #12
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	2600      	movs	r6, #0
 80084e2:	4630      	mov	r0, r6
 80084e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e8:	4e2e      	ldr	r6, [pc, #184]	; (80085a4 <_malloc_r+0xe4>)
 80084ea:	f001 fb29 	bl	8009b40 <__malloc_lock>
 80084ee:	6833      	ldr	r3, [r6, #0]
 80084f0:	461c      	mov	r4, r3
 80084f2:	bb34      	cbnz	r4, 8008542 <_malloc_r+0x82>
 80084f4:	4629      	mov	r1, r5
 80084f6:	4638      	mov	r0, r7
 80084f8:	f7ff ffc2 	bl	8008480 <sbrk_aligned>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	4604      	mov	r4, r0
 8008500:	d14d      	bne.n	800859e <_malloc_r+0xde>
 8008502:	6834      	ldr	r4, [r6, #0]
 8008504:	4626      	mov	r6, r4
 8008506:	2e00      	cmp	r6, #0
 8008508:	d140      	bne.n	800858c <_malloc_r+0xcc>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	4631      	mov	r1, r6
 800850e:	4638      	mov	r0, r7
 8008510:	eb04 0803 	add.w	r8, r4, r3
 8008514:	f000 fc92 	bl	8008e3c <_sbrk_r>
 8008518:	4580      	cmp	r8, r0
 800851a:	d13a      	bne.n	8008592 <_malloc_r+0xd2>
 800851c:	6821      	ldr	r1, [r4, #0]
 800851e:	3503      	adds	r5, #3
 8008520:	1a6d      	subs	r5, r5, r1
 8008522:	f025 0503 	bic.w	r5, r5, #3
 8008526:	3508      	adds	r5, #8
 8008528:	2d0c      	cmp	r5, #12
 800852a:	bf38      	it	cc
 800852c:	250c      	movcc	r5, #12
 800852e:	4629      	mov	r1, r5
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ffa5 	bl	8008480 <sbrk_aligned>
 8008536:	3001      	adds	r0, #1
 8008538:	d02b      	beq.n	8008592 <_malloc_r+0xd2>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	442b      	add	r3, r5
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	e00e      	b.n	8008560 <_malloc_r+0xa0>
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	1b52      	subs	r2, r2, r5
 8008546:	d41e      	bmi.n	8008586 <_malloc_r+0xc6>
 8008548:	2a0b      	cmp	r2, #11
 800854a:	d916      	bls.n	800857a <_malloc_r+0xba>
 800854c:	1961      	adds	r1, r4, r5
 800854e:	42a3      	cmp	r3, r4
 8008550:	6025      	str	r5, [r4, #0]
 8008552:	bf18      	it	ne
 8008554:	6059      	strne	r1, [r3, #4]
 8008556:	6863      	ldr	r3, [r4, #4]
 8008558:	bf08      	it	eq
 800855a:	6031      	streq	r1, [r6, #0]
 800855c:	5162      	str	r2, [r4, r5]
 800855e:	604b      	str	r3, [r1, #4]
 8008560:	4638      	mov	r0, r7
 8008562:	f104 060b 	add.w	r6, r4, #11
 8008566:	f001 faf1 	bl	8009b4c <__malloc_unlock>
 800856a:	f026 0607 	bic.w	r6, r6, #7
 800856e:	1d23      	adds	r3, r4, #4
 8008570:	1af2      	subs	r2, r6, r3
 8008572:	d0b6      	beq.n	80084e2 <_malloc_r+0x22>
 8008574:	1b9b      	subs	r3, r3, r6
 8008576:	50a3      	str	r3, [r4, r2]
 8008578:	e7b3      	b.n	80084e2 <_malloc_r+0x22>
 800857a:	6862      	ldr	r2, [r4, #4]
 800857c:	42a3      	cmp	r3, r4
 800857e:	bf0c      	ite	eq
 8008580:	6032      	streq	r2, [r6, #0]
 8008582:	605a      	strne	r2, [r3, #4]
 8008584:	e7ec      	b.n	8008560 <_malloc_r+0xa0>
 8008586:	4623      	mov	r3, r4
 8008588:	6864      	ldr	r4, [r4, #4]
 800858a:	e7b2      	b.n	80084f2 <_malloc_r+0x32>
 800858c:	4634      	mov	r4, r6
 800858e:	6876      	ldr	r6, [r6, #4]
 8008590:	e7b9      	b.n	8008506 <_malloc_r+0x46>
 8008592:	230c      	movs	r3, #12
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	4638      	mov	r0, r7
 8008598:	f001 fad8 	bl	8009b4c <__malloc_unlock>
 800859c:	e7a1      	b.n	80084e2 <_malloc_r+0x22>
 800859e:	6025      	str	r5, [r4, #0]
 80085a0:	e7de      	b.n	8008560 <_malloc_r+0xa0>
 80085a2:	bf00      	nop
 80085a4:	20000bb4 	.word	0x20000bb4

080085a8 <__cvt>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	ed2d 8b02 	vpush	{d8}
 80085ae:	ec43 2b18 	vmov	d8, r2, r3
 80085b2:	b088      	sub	sp, #32
 80085b4:	ee18 3a90 	vmov	r3, s17
 80085b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80085ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80085be:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f025 0520 	bic.w	r5, r5, #32
 80085c6:	bfb6      	itet	lt
 80085c8:	232d      	movlt	r3, #45	; 0x2d
 80085ca:	2300      	movge	r3, #0
 80085cc:	eeb1 8b48 	vneglt.f64	d8, d8
 80085d0:	2d46      	cmp	r5, #70	; 0x46
 80085d2:	7013      	strb	r3, [r2, #0]
 80085d4:	d004      	beq.n	80085e0 <__cvt+0x38>
 80085d6:	2d45      	cmp	r5, #69	; 0x45
 80085d8:	d100      	bne.n	80085dc <__cvt+0x34>
 80085da:	3401      	adds	r4, #1
 80085dc:	2302      	movs	r3, #2
 80085de:	e000      	b.n	80085e2 <__cvt+0x3a>
 80085e0:	2303      	movs	r3, #3
 80085e2:	aa07      	add	r2, sp, #28
 80085e4:	9204      	str	r2, [sp, #16]
 80085e6:	aa06      	add	r2, sp, #24
 80085e8:	e9cd 6202 	strd	r6, r2, [sp, #8]
 80085ec:	e9cd 3400 	strd	r3, r4, [sp]
 80085f0:	ec53 2b18 	vmov	r2, r3, d8
 80085f4:	f000 fd24 	bl	8009040 <_dtoa_r>
 80085f8:	2d47      	cmp	r5, #71	; 0x47
 80085fa:	d102      	bne.n	8008602 <__cvt+0x5a>
 80085fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085fe:	07db      	lsls	r3, r3, #31
 8008600:	d51a      	bpl.n	8008638 <__cvt+0x90>
 8008602:	2d46      	cmp	r5, #70	; 0x46
 8008604:	eb00 0304 	add.w	r3, r0, r4
 8008608:	d10c      	bne.n	8008624 <__cvt+0x7c>
 800860a:	7802      	ldrb	r2, [r0, #0]
 800860c:	2a30      	cmp	r2, #48	; 0x30
 800860e:	d107      	bne.n	8008620 <__cvt+0x78>
 8008610:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008618:	bf1c      	itt	ne
 800861a:	f1c4 0401 	rsbne	r4, r4, #1
 800861e:	6034      	strne	r4, [r6, #0]
 8008620:	6832      	ldr	r2, [r6, #0]
 8008622:	4413      	add	r3, r2
 8008624:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862c:	bf08      	it	eq
 800862e:	9307      	streq	r3, [sp, #28]
 8008630:	2130      	movs	r1, #48	; 0x30
 8008632:	9a07      	ldr	r2, [sp, #28]
 8008634:	429a      	cmp	r2, r3
 8008636:	d307      	bcc.n	8008648 <__cvt+0xa0>
 8008638:	9b07      	ldr	r3, [sp, #28]
 800863a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800863c:	1a1b      	subs	r3, r3, r0
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	b008      	add	sp, #32
 8008642:	ecbd 8b02 	vpop	{d8}
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	1c54      	adds	r4, r2, #1
 800864a:	9407      	str	r4, [sp, #28]
 800864c:	7011      	strb	r1, [r2, #0]
 800864e:	e7f0      	b.n	8008632 <__cvt+0x8a>

08008650 <__exponent>:
 8008650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008652:	4603      	mov	r3, r0
 8008654:	2900      	cmp	r1, #0
 8008656:	bfb8      	it	lt
 8008658:	4249      	neglt	r1, r1
 800865a:	f803 2b02 	strb.w	r2, [r3], #2
 800865e:	bfb4      	ite	lt
 8008660:	222d      	movlt	r2, #45	; 0x2d
 8008662:	222b      	movge	r2, #43	; 0x2b
 8008664:	2909      	cmp	r1, #9
 8008666:	7042      	strb	r2, [r0, #1]
 8008668:	dd2a      	ble.n	80086c0 <__exponent+0x70>
 800866a:	f10d 0407 	add.w	r4, sp, #7
 800866e:	46a4      	mov	ip, r4
 8008670:	270a      	movs	r7, #10
 8008672:	46a6      	mov	lr, r4
 8008674:	460a      	mov	r2, r1
 8008676:	fb91 f6f7 	sdiv	r6, r1, r7
 800867a:	fb07 1516 	mls	r5, r7, r6, r1
 800867e:	3530      	adds	r5, #48	; 0x30
 8008680:	2a63      	cmp	r2, #99	; 0x63
 8008682:	f104 34ff 	add.w	r4, r4, #4294967295
 8008686:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800868a:	4631      	mov	r1, r6
 800868c:	dcf1      	bgt.n	8008672 <__exponent+0x22>
 800868e:	3130      	adds	r1, #48	; 0x30
 8008690:	f1ae 0502 	sub.w	r5, lr, #2
 8008694:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008698:	1c44      	adds	r4, r0, #1
 800869a:	4629      	mov	r1, r5
 800869c:	4561      	cmp	r1, ip
 800869e:	d30a      	bcc.n	80086b6 <__exponent+0x66>
 80086a0:	f10d 0209 	add.w	r2, sp, #9
 80086a4:	eba2 020e 	sub.w	r2, r2, lr
 80086a8:	4565      	cmp	r5, ip
 80086aa:	bf88      	it	hi
 80086ac:	2200      	movhi	r2, #0
 80086ae:	4413      	add	r3, r2
 80086b0:	1a18      	subs	r0, r3, r0
 80086b2:	b003      	add	sp, #12
 80086b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086be:	e7ed      	b.n	800869c <__exponent+0x4c>
 80086c0:	2330      	movs	r3, #48	; 0x30
 80086c2:	3130      	adds	r1, #48	; 0x30
 80086c4:	7083      	strb	r3, [r0, #2]
 80086c6:	70c1      	strb	r1, [r0, #3]
 80086c8:	1d03      	adds	r3, r0, #4
 80086ca:	e7f1      	b.n	80086b0 <__exponent+0x60>
 80086cc:	0000      	movs	r0, r0
	...

080086d0 <_printf_float>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	b08f      	sub	sp, #60	; 0x3c
 80086d6:	460c      	mov	r4, r1
 80086d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086dc:	4616      	mov	r6, r2
 80086de:	461f      	mov	r7, r3
 80086e0:	4605      	mov	r5, r0
 80086e2:	f001 fa17 	bl	8009b14 <_localeconv_r>
 80086e6:	f8d0 b000 	ldr.w	fp, [r0]
 80086ea:	4658      	mov	r0, fp
 80086ec:	f7fa fe98 	bl	8003420 <strlen>
 80086f0:	2300      	movs	r3, #0
 80086f2:	930c      	str	r3, [sp, #48]	; 0x30
 80086f4:	f8d8 3000 	ldr.w	r3, [r8]
 80086f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80086fc:	6822      	ldr	r2, [r4, #0]
 80086fe:	3307      	adds	r3, #7
 8008700:	f023 0307 	bic.w	r3, r3, #7
 8008704:	f103 0108 	add.w	r1, r3, #8
 8008708:	f8c8 1000 	str.w	r1, [r8]
 800870c:	4682      	mov	sl, r0
 800870e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008712:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008716:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8008980 <_printf_float+0x2b0>
 800871a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800871e:	eeb0 5bc7 	vabs.f64	d5, d7
 8008722:	eeb4 5b46 	vcmp.f64	d5, d6
 8008726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872a:	dd24      	ble.n	8008776 <_printf_float+0xa6>
 800872c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008734:	d502      	bpl.n	800873c <_printf_float+0x6c>
 8008736:	232d      	movs	r3, #45	; 0x2d
 8008738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800873c:	4b92      	ldr	r3, [pc, #584]	; (8008988 <_printf_float+0x2b8>)
 800873e:	4893      	ldr	r0, [pc, #588]	; (800898c <_printf_float+0x2bc>)
 8008740:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008744:	bf94      	ite	ls
 8008746:	4698      	movls	r8, r3
 8008748:	4680      	movhi	r8, r0
 800874a:	2303      	movs	r3, #3
 800874c:	6123      	str	r3, [r4, #16]
 800874e:	f022 0204 	bic.w	r2, r2, #4
 8008752:	2300      	movs	r3, #0
 8008754:	6022      	str	r2, [r4, #0]
 8008756:	9308      	str	r3, [sp, #32]
 8008758:	9700      	str	r7, [sp, #0]
 800875a:	4633      	mov	r3, r6
 800875c:	aa0d      	add	r2, sp, #52	; 0x34
 800875e:	4621      	mov	r1, r4
 8008760:	4628      	mov	r0, r5
 8008762:	f000 f9d7 	bl	8008b14 <_printf_common>
 8008766:	3001      	adds	r0, #1
 8008768:	f040 808e 	bne.w	8008888 <_printf_float+0x1b8>
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	b00f      	add	sp, #60	; 0x3c
 8008772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008776:	eeb4 7b47 	vcmp.f64	d7, d7
 800877a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877e:	d709      	bvc.n	8008794 <_printf_float+0xc4>
 8008780:	ee17 3a90 	vmov	r3, s15
 8008784:	2b00      	cmp	r3, #0
 8008786:	bfbc      	itt	lt
 8008788:	232d      	movlt	r3, #45	; 0x2d
 800878a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800878e:	4880      	ldr	r0, [pc, #512]	; (8008990 <_printf_float+0x2c0>)
 8008790:	4b80      	ldr	r3, [pc, #512]	; (8008994 <_printf_float+0x2c4>)
 8008792:	e7d5      	b.n	8008740 <_printf_float+0x70>
 8008794:	6863      	ldr	r3, [r4, #4]
 8008796:	1c58      	adds	r0, r3, #1
 8008798:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800879c:	d142      	bne.n	8008824 <_printf_float+0x154>
 800879e:	2306      	movs	r3, #6
 80087a0:	6063      	str	r3, [r4, #4]
 80087a2:	2300      	movs	r3, #0
 80087a4:	9306      	str	r3, [sp, #24]
 80087a6:	ab0c      	add	r3, sp, #48	; 0x30
 80087a8:	e9cd 9304 	strd	r9, r3, [sp, #16]
 80087ac:	ab0b      	add	r3, sp, #44	; 0x2c
 80087ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087b2:	9303      	str	r3, [sp, #12]
 80087b4:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 80087b8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80087bc:	6863      	ldr	r3, [r4, #4]
 80087be:	6022      	str	r2, [r4, #0]
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	4628      	mov	r0, r5
 80087c4:	ec53 2b17 	vmov	r2, r3, d7
 80087c8:	9108      	str	r1, [sp, #32]
 80087ca:	f7ff feed 	bl	80085a8 <__cvt>
 80087ce:	9908      	ldr	r1, [sp, #32]
 80087d0:	2947      	cmp	r1, #71	; 0x47
 80087d2:	4680      	mov	r8, r0
 80087d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087d6:	d108      	bne.n	80087ea <_printf_float+0x11a>
 80087d8:	1cc8      	adds	r0, r1, #3
 80087da:	db02      	blt.n	80087e2 <_printf_float+0x112>
 80087dc:	6863      	ldr	r3, [r4, #4]
 80087de:	4299      	cmp	r1, r3
 80087e0:	dd40      	ble.n	8008864 <_printf_float+0x194>
 80087e2:	f1a9 0902 	sub.w	r9, r9, #2
 80087e6:	fa5f f989 	uxtb.w	r9, r9
 80087ea:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80087ee:	d81f      	bhi.n	8008830 <_printf_float+0x160>
 80087f0:	3901      	subs	r1, #1
 80087f2:	464a      	mov	r2, r9
 80087f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80087fa:	f7ff ff29 	bl	8008650 <__exponent>
 80087fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008800:	9008      	str	r0, [sp, #32]
 8008802:	1813      	adds	r3, r2, r0
 8008804:	2a01      	cmp	r2, #1
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	dc02      	bgt.n	8008810 <_printf_float+0x140>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	07d2      	lsls	r2, r2, #31
 800880e:	d501      	bpl.n	8008814 <_printf_float+0x144>
 8008810:	3301      	adds	r3, #1
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8008818:	2b00      	cmp	r3, #0
 800881a:	d09d      	beq.n	8008758 <_printf_float+0x88>
 800881c:	232d      	movs	r3, #45	; 0x2d
 800881e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008822:	e799      	b.n	8008758 <_printf_float+0x88>
 8008824:	2947      	cmp	r1, #71	; 0x47
 8008826:	d1bc      	bne.n	80087a2 <_printf_float+0xd2>
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1ba      	bne.n	80087a2 <_printf_float+0xd2>
 800882c:	2301      	movs	r3, #1
 800882e:	e7b7      	b.n	80087a0 <_printf_float+0xd0>
 8008830:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008834:	d118      	bne.n	8008868 <_printf_float+0x198>
 8008836:	2900      	cmp	r1, #0
 8008838:	6863      	ldr	r3, [r4, #4]
 800883a:	dd0b      	ble.n	8008854 <_printf_float+0x184>
 800883c:	6121      	str	r1, [r4, #16]
 800883e:	b913      	cbnz	r3, 8008846 <_printf_float+0x176>
 8008840:	6822      	ldr	r2, [r4, #0]
 8008842:	07d0      	lsls	r0, r2, #31
 8008844:	d502      	bpl.n	800884c <_printf_float+0x17c>
 8008846:	3301      	adds	r3, #1
 8008848:	440b      	add	r3, r1
 800884a:	6123      	str	r3, [r4, #16]
 800884c:	2300      	movs	r3, #0
 800884e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008850:	9308      	str	r3, [sp, #32]
 8008852:	e7df      	b.n	8008814 <_printf_float+0x144>
 8008854:	b913      	cbnz	r3, 800885c <_printf_float+0x18c>
 8008856:	6822      	ldr	r2, [r4, #0]
 8008858:	07d2      	lsls	r2, r2, #31
 800885a:	d501      	bpl.n	8008860 <_printf_float+0x190>
 800885c:	3302      	adds	r3, #2
 800885e:	e7f4      	b.n	800884a <_printf_float+0x17a>
 8008860:	2301      	movs	r3, #1
 8008862:	e7f2      	b.n	800884a <_printf_float+0x17a>
 8008864:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800886a:	4299      	cmp	r1, r3
 800886c:	db05      	blt.n	800887a <_printf_float+0x1aa>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	6121      	str	r1, [r4, #16]
 8008872:	07d8      	lsls	r0, r3, #31
 8008874:	d5ea      	bpl.n	800884c <_printf_float+0x17c>
 8008876:	1c4b      	adds	r3, r1, #1
 8008878:	e7e7      	b.n	800884a <_printf_float+0x17a>
 800887a:	2900      	cmp	r1, #0
 800887c:	bfd4      	ite	le
 800887e:	f1c1 0202 	rsble	r2, r1, #2
 8008882:	2201      	movgt	r2, #1
 8008884:	4413      	add	r3, r2
 8008886:	e7e0      	b.n	800884a <_printf_float+0x17a>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	055a      	lsls	r2, r3, #21
 800888c:	d407      	bmi.n	800889e <_printf_float+0x1ce>
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	4642      	mov	r2, r8
 8008892:	4631      	mov	r1, r6
 8008894:	4628      	mov	r0, r5
 8008896:	47b8      	blx	r7
 8008898:	3001      	adds	r0, #1
 800889a:	d12a      	bne.n	80088f2 <_printf_float+0x222>
 800889c:	e766      	b.n	800876c <_printf_float+0x9c>
 800889e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80088a2:	f240 80e2 	bls.w	8008a6a <_printf_float+0x39a>
 80088a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80088aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b2:	d133      	bne.n	800891c <_printf_float+0x24c>
 80088b4:	4a38      	ldr	r2, [pc, #224]	; (8008998 <_printf_float+0x2c8>)
 80088b6:	2301      	movs	r3, #1
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	f43f af54 	beq.w	800876c <_printf_float+0x9c>
 80088c4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80088c8:	429a      	cmp	r2, r3
 80088ca:	db02      	blt.n	80088d2 <_printf_float+0x202>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	07d8      	lsls	r0, r3, #31
 80088d0:	d50f      	bpl.n	80088f2 <_printf_float+0x222>
 80088d2:	4653      	mov	r3, sl
 80088d4:	465a      	mov	r2, fp
 80088d6:	4631      	mov	r1, r6
 80088d8:	4628      	mov	r0, r5
 80088da:	47b8      	blx	r7
 80088dc:	3001      	adds	r0, #1
 80088de:	f43f af45 	beq.w	800876c <_printf_float+0x9c>
 80088e2:	f04f 0800 	mov.w	r8, #0
 80088e6:	f104 091a 	add.w	r9, r4, #26
 80088ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ec:	3b01      	subs	r3, #1
 80088ee:	4543      	cmp	r3, r8
 80088f0:	dc09      	bgt.n	8008906 <_printf_float+0x236>
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	079b      	lsls	r3, r3, #30
 80088f6:	f100 8108 	bmi.w	8008b0a <_printf_float+0x43a>
 80088fa:	68e0      	ldr	r0, [r4, #12]
 80088fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088fe:	4298      	cmp	r0, r3
 8008900:	bfb8      	it	lt
 8008902:	4618      	movlt	r0, r3
 8008904:	e734      	b.n	8008770 <_printf_float+0xa0>
 8008906:	2301      	movs	r3, #1
 8008908:	464a      	mov	r2, r9
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	f43f af2b 	beq.w	800876c <_printf_float+0x9c>
 8008916:	f108 0801 	add.w	r8, r8, #1
 800891a:	e7e6      	b.n	80088ea <_printf_float+0x21a>
 800891c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800891e:	2b00      	cmp	r3, #0
 8008920:	dc3c      	bgt.n	800899c <_printf_float+0x2cc>
 8008922:	4a1d      	ldr	r2, [pc, #116]	; (8008998 <_printf_float+0x2c8>)
 8008924:	2301      	movs	r3, #1
 8008926:	4631      	mov	r1, r6
 8008928:	4628      	mov	r0, r5
 800892a:	47b8      	blx	r7
 800892c:	3001      	adds	r0, #1
 800892e:	f43f af1d 	beq.w	800876c <_printf_float+0x9c>
 8008932:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8008936:	4313      	orrs	r3, r2
 8008938:	d102      	bne.n	8008940 <_printf_float+0x270>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	07d9      	lsls	r1, r3, #31
 800893e:	d5d8      	bpl.n	80088f2 <_printf_float+0x222>
 8008940:	4653      	mov	r3, sl
 8008942:	465a      	mov	r2, fp
 8008944:	4631      	mov	r1, r6
 8008946:	4628      	mov	r0, r5
 8008948:	47b8      	blx	r7
 800894a:	3001      	adds	r0, #1
 800894c:	f43f af0e 	beq.w	800876c <_printf_float+0x9c>
 8008950:	f04f 0900 	mov.w	r9, #0
 8008954:	f104 0a1a 	add.w	sl, r4, #26
 8008958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800895a:	425b      	negs	r3, r3
 800895c:	454b      	cmp	r3, r9
 800895e:	dc01      	bgt.n	8008964 <_printf_float+0x294>
 8008960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008962:	e795      	b.n	8008890 <_printf_float+0x1c0>
 8008964:	2301      	movs	r3, #1
 8008966:	4652      	mov	r2, sl
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	f43f aefc 	beq.w	800876c <_printf_float+0x9c>
 8008974:	f109 0901 	add.w	r9, r9, #1
 8008978:	e7ee      	b.n	8008958 <_printf_float+0x288>
 800897a:	bf00      	nop
 800897c:	f3af 8000 	nop.w
 8008980:	ffffffff 	.word	0xffffffff
 8008984:	7fefffff 	.word	0x7fefffff
 8008988:	0800b76c 	.word	0x0800b76c
 800898c:	0800b770 	.word	0x0800b770
 8008990:	0800b778 	.word	0x0800b778
 8008994:	0800b774 	.word	0x0800b774
 8008998:	0800b77c 	.word	0x0800b77c
 800899c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800899e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089a0:	429a      	cmp	r2, r3
 80089a2:	bfa8      	it	ge
 80089a4:	461a      	movge	r2, r3
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	4691      	mov	r9, r2
 80089aa:	dc38      	bgt.n	8008a1e <_printf_float+0x34e>
 80089ac:	2300      	movs	r3, #0
 80089ae:	9309      	str	r3, [sp, #36]	; 0x24
 80089b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089b4:	f104 021a 	add.w	r2, r4, #26
 80089b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089bc:	9308      	str	r3, [sp, #32]
 80089be:	eba3 0309 	sub.w	r3, r3, r9
 80089c2:	428b      	cmp	r3, r1
 80089c4:	dc33      	bgt.n	8008a2e <_printf_float+0x35e>
 80089c6:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80089ca:	429a      	cmp	r2, r3
 80089cc:	db3c      	blt.n	8008a48 <_printf_float+0x378>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	07da      	lsls	r2, r3, #31
 80089d2:	d439      	bmi.n	8008a48 <_printf_float+0x378>
 80089d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089d6:	9a08      	ldr	r2, [sp, #32]
 80089d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089da:	1a9a      	subs	r2, r3, r2
 80089dc:	eba3 0901 	sub.w	r9, r3, r1
 80089e0:	4591      	cmp	r9, r2
 80089e2:	bfa8      	it	ge
 80089e4:	4691      	movge	r9, r2
 80089e6:	f1b9 0f00 	cmp.w	r9, #0
 80089ea:	dc35      	bgt.n	8008a58 <_printf_float+0x388>
 80089ec:	f04f 0800 	mov.w	r8, #0
 80089f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089f4:	f104 0a1a 	add.w	sl, r4, #26
 80089f8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80089fc:	1a9b      	subs	r3, r3, r2
 80089fe:	eba3 0309 	sub.w	r3, r3, r9
 8008a02:	4543      	cmp	r3, r8
 8008a04:	f77f af75 	ble.w	80088f2 <_printf_float+0x222>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	4652      	mov	r2, sl
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b8      	blx	r7
 8008a12:	3001      	adds	r0, #1
 8008a14:	f43f aeaa 	beq.w	800876c <_printf_float+0x9c>
 8008a18:	f108 0801 	add.w	r8, r8, #1
 8008a1c:	e7ec      	b.n	80089f8 <_printf_float+0x328>
 8008a1e:	4613      	mov	r3, r2
 8008a20:	4631      	mov	r1, r6
 8008a22:	4642      	mov	r2, r8
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d1bf      	bne.n	80089ac <_printf_float+0x2dc>
 8008a2c:	e69e      	b.n	800876c <_printf_float+0x9c>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4631      	mov	r1, r6
 8008a32:	4628      	mov	r0, r5
 8008a34:	9208      	str	r2, [sp, #32]
 8008a36:	47b8      	blx	r7
 8008a38:	3001      	adds	r0, #1
 8008a3a:	f43f ae97 	beq.w	800876c <_printf_float+0x9c>
 8008a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a40:	9a08      	ldr	r2, [sp, #32]
 8008a42:	3301      	adds	r3, #1
 8008a44:	9309      	str	r3, [sp, #36]	; 0x24
 8008a46:	e7b7      	b.n	80089b8 <_printf_float+0x2e8>
 8008a48:	4653      	mov	r3, sl
 8008a4a:	465a      	mov	r2, fp
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	d1be      	bne.n	80089d4 <_printf_float+0x304>
 8008a56:	e689      	b.n	800876c <_printf_float+0x9c>
 8008a58:	9a08      	ldr	r2, [sp, #32]
 8008a5a:	464b      	mov	r3, r9
 8008a5c:	4442      	add	r2, r8
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	d1c1      	bne.n	80089ec <_printf_float+0x31c>
 8008a68:	e680      	b.n	800876c <_printf_float+0x9c>
 8008a6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a6c:	2a01      	cmp	r2, #1
 8008a6e:	dc01      	bgt.n	8008a74 <_printf_float+0x3a4>
 8008a70:	07db      	lsls	r3, r3, #31
 8008a72:	d537      	bpl.n	8008ae4 <_printf_float+0x414>
 8008a74:	2301      	movs	r3, #1
 8008a76:	4642      	mov	r2, r8
 8008a78:	4631      	mov	r1, r6
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	47b8      	blx	r7
 8008a7e:	3001      	adds	r0, #1
 8008a80:	f43f ae74 	beq.w	800876c <_printf_float+0x9c>
 8008a84:	4653      	mov	r3, sl
 8008a86:	465a      	mov	r2, fp
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	47b8      	blx	r7
 8008a8e:	3001      	adds	r0, #1
 8008a90:	f43f ae6c 	beq.w	800876c <_printf_float+0x9c>
 8008a94:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008a98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa0:	d01b      	beq.n	8008ada <_printf_float+0x40a>
 8008aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aa4:	f108 0201 	add.w	r2, r8, #1
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d10e      	bne.n	8008ad2 <_printf_float+0x402>
 8008ab4:	e65a      	b.n	800876c <_printf_float+0x9c>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	464a      	mov	r2, r9
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	f43f ae53 	beq.w	800876c <_printf_float+0x9c>
 8008ac6:	f108 0801 	add.w	r8, r8, #1
 8008aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008acc:	3b01      	subs	r3, #1
 8008ace:	4543      	cmp	r3, r8
 8008ad0:	dcf1      	bgt.n	8008ab6 <_printf_float+0x3e6>
 8008ad2:	9b08      	ldr	r3, [sp, #32]
 8008ad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ad8:	e6db      	b.n	8008892 <_printf_float+0x1c2>
 8008ada:	f04f 0800 	mov.w	r8, #0
 8008ade:	f104 091a 	add.w	r9, r4, #26
 8008ae2:	e7f2      	b.n	8008aca <_printf_float+0x3fa>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	4642      	mov	r2, r8
 8008ae8:	e7df      	b.n	8008aaa <_printf_float+0x3da>
 8008aea:	2301      	movs	r3, #1
 8008aec:	464a      	mov	r2, r9
 8008aee:	4631      	mov	r1, r6
 8008af0:	4628      	mov	r0, r5
 8008af2:	47b8      	blx	r7
 8008af4:	3001      	adds	r0, #1
 8008af6:	f43f ae39 	beq.w	800876c <_printf_float+0x9c>
 8008afa:	f108 0801 	add.w	r8, r8, #1
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b02:	1a5b      	subs	r3, r3, r1
 8008b04:	4543      	cmp	r3, r8
 8008b06:	dcf0      	bgt.n	8008aea <_printf_float+0x41a>
 8008b08:	e6f7      	b.n	80088fa <_printf_float+0x22a>
 8008b0a:	f04f 0800 	mov.w	r8, #0
 8008b0e:	f104 0919 	add.w	r9, r4, #25
 8008b12:	e7f4      	b.n	8008afe <_printf_float+0x42e>

08008b14 <_printf_common>:
 8008b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b18:	4616      	mov	r6, r2
 8008b1a:	4699      	mov	r9, r3
 8008b1c:	688a      	ldr	r2, [r1, #8]
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bfb8      	it	lt
 8008b28:	4613      	movlt	r3, r2
 8008b2a:	6033      	str	r3, [r6, #0]
 8008b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b30:	4607      	mov	r7, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b10a      	cbz	r2, 8008b3a <_printf_common+0x26>
 8008b36:	3301      	adds	r3, #1
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	0699      	lsls	r1, r3, #26
 8008b3e:	bf42      	ittt	mi
 8008b40:	6833      	ldrmi	r3, [r6, #0]
 8008b42:	3302      	addmi	r3, #2
 8008b44:	6033      	strmi	r3, [r6, #0]
 8008b46:	6825      	ldr	r5, [r4, #0]
 8008b48:	f015 0506 	ands.w	r5, r5, #6
 8008b4c:	d106      	bne.n	8008b5c <_printf_common+0x48>
 8008b4e:	f104 0a19 	add.w	sl, r4, #25
 8008b52:	68e3      	ldr	r3, [r4, #12]
 8008b54:	6832      	ldr	r2, [r6, #0]
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	42ab      	cmp	r3, r5
 8008b5a:	dc26      	bgt.n	8008baa <_printf_common+0x96>
 8008b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b60:	1e13      	subs	r3, r2, #0
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	bf18      	it	ne
 8008b66:	2301      	movne	r3, #1
 8008b68:	0692      	lsls	r2, r2, #26
 8008b6a:	d42b      	bmi.n	8008bc4 <_printf_common+0xb0>
 8008b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b70:	4649      	mov	r1, r9
 8008b72:	4638      	mov	r0, r7
 8008b74:	47c0      	blx	r8
 8008b76:	3001      	adds	r0, #1
 8008b78:	d01e      	beq.n	8008bb8 <_printf_common+0xa4>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	68e5      	ldr	r5, [r4, #12]
 8008b7e:	6832      	ldr	r2, [r6, #0]
 8008b80:	f003 0306 	and.w	r3, r3, #6
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	bf08      	it	eq
 8008b88:	1aad      	subeq	r5, r5, r2
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	6922      	ldr	r2, [r4, #16]
 8008b8e:	bf0c      	ite	eq
 8008b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b94:	2500      	movne	r5, #0
 8008b96:	4293      	cmp	r3, r2
 8008b98:	bfc4      	itt	gt
 8008b9a:	1a9b      	subgt	r3, r3, r2
 8008b9c:	18ed      	addgt	r5, r5, r3
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	341a      	adds	r4, #26
 8008ba2:	42b5      	cmp	r5, r6
 8008ba4:	d11a      	bne.n	8008bdc <_printf_common+0xc8>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e008      	b.n	8008bbc <_printf_common+0xa8>
 8008baa:	2301      	movs	r3, #1
 8008bac:	4652      	mov	r2, sl
 8008bae:	4649      	mov	r1, r9
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	47c0      	blx	r8
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d103      	bne.n	8008bc0 <_printf_common+0xac>
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc0:	3501      	adds	r5, #1
 8008bc2:	e7c6      	b.n	8008b52 <_printf_common+0x3e>
 8008bc4:	18e1      	adds	r1, r4, r3
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	2030      	movs	r0, #48	; 0x30
 8008bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bce:	4422      	add	r2, r4
 8008bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bd8:	3302      	adds	r3, #2
 8008bda:	e7c7      	b.n	8008b6c <_printf_common+0x58>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4622      	mov	r2, r4
 8008be0:	4649      	mov	r1, r9
 8008be2:	4638      	mov	r0, r7
 8008be4:	47c0      	blx	r8
 8008be6:	3001      	adds	r0, #1
 8008be8:	d0e6      	beq.n	8008bb8 <_printf_common+0xa4>
 8008bea:	3601      	adds	r6, #1
 8008bec:	e7d9      	b.n	8008ba2 <_printf_common+0x8e>
	...

08008bf0 <_printf_i>:
 8008bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	7e0f      	ldrb	r7, [r1, #24]
 8008bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bf8:	2f78      	cmp	r7, #120	; 0x78
 8008bfa:	4691      	mov	r9, r2
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	469a      	mov	sl, r3
 8008c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c06:	d807      	bhi.n	8008c18 <_printf_i+0x28>
 8008c08:	2f62      	cmp	r7, #98	; 0x62
 8008c0a:	d80a      	bhi.n	8008c22 <_printf_i+0x32>
 8008c0c:	2f00      	cmp	r7, #0
 8008c0e:	f000 80d8 	beq.w	8008dc2 <_printf_i+0x1d2>
 8008c12:	2f58      	cmp	r7, #88	; 0x58
 8008c14:	f000 80a3 	beq.w	8008d5e <_printf_i+0x16e>
 8008c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c20:	e03a      	b.n	8008c98 <_printf_i+0xa8>
 8008c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c26:	2b15      	cmp	r3, #21
 8008c28:	d8f6      	bhi.n	8008c18 <_printf_i+0x28>
 8008c2a:	a101      	add	r1, pc, #4	; (adr r1, 8008c30 <_printf_i+0x40>)
 8008c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c30:	08008c89 	.word	0x08008c89
 8008c34:	08008c9d 	.word	0x08008c9d
 8008c38:	08008c19 	.word	0x08008c19
 8008c3c:	08008c19 	.word	0x08008c19
 8008c40:	08008c19 	.word	0x08008c19
 8008c44:	08008c19 	.word	0x08008c19
 8008c48:	08008c9d 	.word	0x08008c9d
 8008c4c:	08008c19 	.word	0x08008c19
 8008c50:	08008c19 	.word	0x08008c19
 8008c54:	08008c19 	.word	0x08008c19
 8008c58:	08008c19 	.word	0x08008c19
 8008c5c:	08008da9 	.word	0x08008da9
 8008c60:	08008ccd 	.word	0x08008ccd
 8008c64:	08008d8b 	.word	0x08008d8b
 8008c68:	08008c19 	.word	0x08008c19
 8008c6c:	08008c19 	.word	0x08008c19
 8008c70:	08008dcb 	.word	0x08008dcb
 8008c74:	08008c19 	.word	0x08008c19
 8008c78:	08008ccd 	.word	0x08008ccd
 8008c7c:	08008c19 	.word	0x08008c19
 8008c80:	08008c19 	.word	0x08008c19
 8008c84:	08008d93 	.word	0x08008d93
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	1d1a      	adds	r2, r3, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0a3      	b.n	8008de4 <_printf_i+0x1f4>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	6829      	ldr	r1, [r5, #0]
 8008ca0:	0606      	lsls	r6, r0, #24
 8008ca2:	f101 0304 	add.w	r3, r1, #4
 8008ca6:	d50a      	bpl.n	8008cbe <_printf_i+0xce>
 8008ca8:	680e      	ldr	r6, [r1, #0]
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	2e00      	cmp	r6, #0
 8008cae:	da03      	bge.n	8008cb8 <_printf_i+0xc8>
 8008cb0:	232d      	movs	r3, #45	; 0x2d
 8008cb2:	4276      	negs	r6, r6
 8008cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb8:	485e      	ldr	r0, [pc, #376]	; (8008e34 <_printf_i+0x244>)
 8008cba:	230a      	movs	r3, #10
 8008cbc:	e019      	b.n	8008cf2 <_printf_i+0x102>
 8008cbe:	680e      	ldr	r6, [r1, #0]
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cc6:	bf18      	it	ne
 8008cc8:	b236      	sxthne	r6, r6
 8008cca:	e7ef      	b.n	8008cac <_printf_i+0xbc>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	1d19      	adds	r1, r3, #4
 8008cd2:	6029      	str	r1, [r5, #0]
 8008cd4:	0601      	lsls	r1, r0, #24
 8008cd6:	d501      	bpl.n	8008cdc <_printf_i+0xec>
 8008cd8:	681e      	ldr	r6, [r3, #0]
 8008cda:	e002      	b.n	8008ce2 <_printf_i+0xf2>
 8008cdc:	0646      	lsls	r6, r0, #25
 8008cde:	d5fb      	bpl.n	8008cd8 <_printf_i+0xe8>
 8008ce0:	881e      	ldrh	r6, [r3, #0]
 8008ce2:	4854      	ldr	r0, [pc, #336]	; (8008e34 <_printf_i+0x244>)
 8008ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2308      	moveq	r3, #8
 8008cea:	230a      	movne	r3, #10
 8008cec:	2100      	movs	r1, #0
 8008cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf2:	6865      	ldr	r5, [r4, #4]
 8008cf4:	60a5      	str	r5, [r4, #8]
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	bfa2      	ittt	ge
 8008cfa:	6821      	ldrge	r1, [r4, #0]
 8008cfc:	f021 0104 	bicge.w	r1, r1, #4
 8008d00:	6021      	strge	r1, [r4, #0]
 8008d02:	b90e      	cbnz	r6, 8008d08 <_printf_i+0x118>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	d04d      	beq.n	8008da4 <_printf_i+0x1b4>
 8008d08:	4615      	mov	r5, r2
 8008d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d12:	5dc7      	ldrb	r7, [r0, r7]
 8008d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d18:	4637      	mov	r7, r6
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	460e      	mov	r6, r1
 8008d1e:	d9f4      	bls.n	8008d0a <_printf_i+0x11a>
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d10b      	bne.n	8008d3c <_printf_i+0x14c>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	07de      	lsls	r6, r3, #31
 8008d28:	d508      	bpl.n	8008d3c <_printf_i+0x14c>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	bfde      	ittt	le
 8008d32:	2330      	movle	r3, #48	; 0x30
 8008d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d3c:	1b52      	subs	r2, r2, r5
 8008d3e:	6122      	str	r2, [r4, #16]
 8008d40:	f8cd a000 	str.w	sl, [sp]
 8008d44:	464b      	mov	r3, r9
 8008d46:	aa03      	add	r2, sp, #12
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7ff fee2 	bl	8008b14 <_printf_common>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d14c      	bne.n	8008dee <_printf_i+0x1fe>
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	b004      	add	sp, #16
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	4835      	ldr	r0, [pc, #212]	; (8008e34 <_printf_i+0x244>)
 8008d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d64:	6829      	ldr	r1, [r5, #0]
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d6c:	6029      	str	r1, [r5, #0]
 8008d6e:	061d      	lsls	r5, r3, #24
 8008d70:	d514      	bpl.n	8008d9c <_printf_i+0x1ac>
 8008d72:	07df      	lsls	r7, r3, #31
 8008d74:	bf44      	itt	mi
 8008d76:	f043 0320 	orrmi.w	r3, r3, #32
 8008d7a:	6023      	strmi	r3, [r4, #0]
 8008d7c:	b91e      	cbnz	r6, 8008d86 <_printf_i+0x196>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	f023 0320 	bic.w	r3, r3, #32
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	2310      	movs	r3, #16
 8008d88:	e7b0      	b.n	8008cec <_printf_i+0xfc>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f043 0320 	orr.w	r3, r3, #32
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	2378      	movs	r3, #120	; 0x78
 8008d94:	4828      	ldr	r0, [pc, #160]	; (8008e38 <_printf_i+0x248>)
 8008d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d9a:	e7e3      	b.n	8008d64 <_printf_i+0x174>
 8008d9c:	0659      	lsls	r1, r3, #25
 8008d9e:	bf48      	it	mi
 8008da0:	b2b6      	uxthmi	r6, r6
 8008da2:	e7e6      	b.n	8008d72 <_printf_i+0x182>
 8008da4:	4615      	mov	r5, r2
 8008da6:	e7bb      	b.n	8008d20 <_printf_i+0x130>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	6826      	ldr	r6, [r4, #0]
 8008dac:	6961      	ldr	r1, [r4, #20]
 8008dae:	1d18      	adds	r0, r3, #4
 8008db0:	6028      	str	r0, [r5, #0]
 8008db2:	0635      	lsls	r5, r6, #24
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	d501      	bpl.n	8008dbc <_printf_i+0x1cc>
 8008db8:	6019      	str	r1, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <_printf_i+0x1d2>
 8008dbc:	0670      	lsls	r0, r6, #25
 8008dbe:	d5fb      	bpl.n	8008db8 <_printf_i+0x1c8>
 8008dc0:	8019      	strh	r1, [r3, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	e7ba      	b.n	8008d40 <_printf_i+0x150>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	602a      	str	r2, [r5, #0]
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7fa fb2a 	bl	8003430 <memchr>
 8008ddc:	b108      	cbz	r0, 8008de2 <_printf_i+0x1f2>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	6060      	str	r0, [r4, #4]
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	2300      	movs	r3, #0
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	e7a8      	b.n	8008d40 <_printf_i+0x150>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	462a      	mov	r2, r5
 8008df2:	4649      	mov	r1, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	47d0      	blx	sl
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d0ab      	beq.n	8008d54 <_printf_i+0x164>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	079b      	lsls	r3, r3, #30
 8008e00:	d413      	bmi.n	8008e2a <_printf_i+0x23a>
 8008e02:	68e0      	ldr	r0, [r4, #12]
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	4298      	cmp	r0, r3
 8008e08:	bfb8      	it	lt
 8008e0a:	4618      	movlt	r0, r3
 8008e0c:	e7a4      	b.n	8008d58 <_printf_i+0x168>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4632      	mov	r2, r6
 8008e12:	4649      	mov	r1, r9
 8008e14:	4640      	mov	r0, r8
 8008e16:	47d0      	blx	sl
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d09b      	beq.n	8008d54 <_printf_i+0x164>
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	9903      	ldr	r1, [sp, #12]
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	42ab      	cmp	r3, r5
 8008e26:	dcf2      	bgt.n	8008e0e <_printf_i+0x21e>
 8008e28:	e7eb      	b.n	8008e02 <_printf_i+0x212>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	f104 0619 	add.w	r6, r4, #25
 8008e30:	e7f5      	b.n	8008e1e <_printf_i+0x22e>
 8008e32:	bf00      	nop
 8008e34:	0800b77e 	.word	0x0800b77e
 8008e38:	0800b78f 	.word	0x0800b78f

08008e3c <_sbrk_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d06      	ldr	r5, [pc, #24]	; (8008e58 <_sbrk_r+0x1c>)
 8008e40:	2300      	movs	r3, #0
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	602b      	str	r3, [r5, #0]
 8008e48:	f7ff f912 	bl	8008070 <_sbrk>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_sbrk_r+0x1a>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_sbrk_r+0x1a>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	20000bbc 	.word	0x20000bbc

08008e5c <__sread>:
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	460c      	mov	r4, r1
 8008e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e64:	f001 f9fa 	bl	800a25c <_read_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	bfab      	itete	ge
 8008e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008e70:	181b      	addge	r3, r3, r0
 8008e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e76:	bfac      	ite	ge
 8008e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e7a:	81a3      	strhlt	r3, [r4, #12]
 8008e7c:	bd10      	pop	{r4, pc}

08008e7e <__swrite>:
 8008e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e82:	461f      	mov	r7, r3
 8008e84:	898b      	ldrh	r3, [r1, #12]
 8008e86:	05db      	lsls	r3, r3, #23
 8008e88:	4605      	mov	r5, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4616      	mov	r6, r2
 8008e8e:	d505      	bpl.n	8008e9c <__swrite+0x1e>
 8008e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e94:	2302      	movs	r3, #2
 8008e96:	2200      	movs	r2, #0
 8008e98:	f000 fe40 	bl	8009b1c <_lseek_r>
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	463b      	mov	r3, r7
 8008eac:	4628      	mov	r0, r5
 8008eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb2:	f000 b817 	b.w	8008ee4 <_write_r>

08008eb6 <__sseek>:
 8008eb6:	b510      	push	{r4, lr}
 8008eb8:	460c      	mov	r4, r1
 8008eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ebe:	f000 fe2d 	bl	8009b1c <_lseek_r>
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	bf15      	itete	ne
 8008ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ed2:	81a3      	strheq	r3, [r4, #12]
 8008ed4:	bf18      	it	ne
 8008ed6:	81a3      	strhne	r3, [r4, #12]
 8008ed8:	bd10      	pop	{r4, pc}

08008eda <__sclose>:
 8008eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ede:	f000 b813 	b.w	8008f08 <_close_r>
	...

08008ee4 <_write_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4d07      	ldr	r5, [pc, #28]	; (8008f04 <_write_r+0x20>)
 8008ee8:	4604      	mov	r4, r0
 8008eea:	4608      	mov	r0, r1
 8008eec:	4611      	mov	r1, r2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	602a      	str	r2, [r5, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f7ff f8ae 	bl	8008054 <_write>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_write_r+0x1e>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_write_r+0x1e>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	20000bbc 	.word	0x20000bbc

08008f08 <_close_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d06      	ldr	r5, [pc, #24]	; (8008f24 <_close_r+0x1c>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	f7ff f8ca 	bl	80080ac <_close>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_close_r+0x1a>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_close_r+0x1a>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	20000bbc 	.word	0x20000bbc

08008f28 <quorem>:
 8008f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	6903      	ldr	r3, [r0, #16]
 8008f2e:	690c      	ldr	r4, [r1, #16]
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	4607      	mov	r7, r0
 8008f34:	f2c0 8081 	blt.w	800903a <quorem+0x112>
 8008f38:	3c01      	subs	r4, #1
 8008f3a:	f101 0814 	add.w	r8, r1, #20
 8008f3e:	f100 0514 	add.w	r5, r0, #20
 8008f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f50:	3301      	adds	r3, #1
 8008f52:	429a      	cmp	r2, r3
 8008f54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f60:	d331      	bcc.n	8008fc6 <quorem+0x9e>
 8008f62:	f04f 0e00 	mov.w	lr, #0
 8008f66:	4640      	mov	r0, r8
 8008f68:	46ac      	mov	ip, r5
 8008f6a:	46f2      	mov	sl, lr
 8008f6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f70:	b293      	uxth	r3, r2
 8008f72:	fb06 e303 	mla	r3, r6, r3, lr
 8008f76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f80:	f8dc a000 	ldr.w	sl, [ip]
 8008f84:	0c12      	lsrs	r2, r2, #16
 8008f86:	fa13 f38a 	uxtah	r3, r3, sl
 8008f8a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	9b00      	ldr	r3, [sp, #0]
 8008f92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f96:	b292      	uxth	r2, r2
 8008f98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fa0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008fa4:	4581      	cmp	r9, r0
 8008fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008faa:	f84c 3b04 	str.w	r3, [ip], #4
 8008fae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008fb2:	d2db      	bcs.n	8008f6c <quorem+0x44>
 8008fb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008fb8:	b92b      	cbnz	r3, 8008fc6 <quorem+0x9e>
 8008fba:	9b01      	ldr	r3, [sp, #4]
 8008fbc:	3b04      	subs	r3, #4
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	d32e      	bcc.n	8009022 <quorem+0xfa>
 8008fc4:	613c      	str	r4, [r7, #16]
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f001 f848 	bl	800a05c <__mcmp>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	db24      	blt.n	800901a <quorem+0xf2>
 8008fd0:	3601      	adds	r6, #1
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f04f 0c00 	mov.w	ip, #0
 8008fd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fdc:	f8d0 e000 	ldr.w	lr, [r0]
 8008fe0:	b293      	uxth	r3, r2
 8008fe2:	ebac 0303 	sub.w	r3, ip, r3
 8008fe6:	0c12      	lsrs	r2, r2, #16
 8008fe8:	fa13 f38e 	uxtah	r3, r3, lr
 8008fec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ff0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ffa:	45c1      	cmp	r9, r8
 8008ffc:	f840 3b04 	str.w	r3, [r0], #4
 8009000:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009004:	d2e8      	bcs.n	8008fd8 <quorem+0xb0>
 8009006:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800900a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800900e:	b922      	cbnz	r2, 800901a <quorem+0xf2>
 8009010:	3b04      	subs	r3, #4
 8009012:	429d      	cmp	r5, r3
 8009014:	461a      	mov	r2, r3
 8009016:	d30a      	bcc.n	800902e <quorem+0x106>
 8009018:	613c      	str	r4, [r7, #16]
 800901a:	4630      	mov	r0, r6
 800901c:	b003      	add	sp, #12
 800901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009022:	6812      	ldr	r2, [r2, #0]
 8009024:	3b04      	subs	r3, #4
 8009026:	2a00      	cmp	r2, #0
 8009028:	d1cc      	bne.n	8008fc4 <quorem+0x9c>
 800902a:	3c01      	subs	r4, #1
 800902c:	e7c7      	b.n	8008fbe <quorem+0x96>
 800902e:	6812      	ldr	r2, [r2, #0]
 8009030:	3b04      	subs	r3, #4
 8009032:	2a00      	cmp	r2, #0
 8009034:	d1f0      	bne.n	8009018 <quorem+0xf0>
 8009036:	3c01      	subs	r4, #1
 8009038:	e7eb      	b.n	8009012 <quorem+0xea>
 800903a:	2000      	movs	r0, #0
 800903c:	e7ee      	b.n	800901c <quorem+0xf4>
	...

08009040 <_dtoa_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	ed2d 8b02 	vpush	{d8}
 8009048:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800904a:	b08f      	sub	sp, #60	; 0x3c
 800904c:	4690      	mov	r8, r2
 800904e:	4699      	mov	r9, r3
 8009050:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009054:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8009056:	4606      	mov	r6, r0
 8009058:	b975      	cbnz	r5, 8009078 <_dtoa_r+0x38>
 800905a:	2010      	movs	r0, #16
 800905c:	f7ff f988 	bl	8008370 <malloc>
 8009060:	4602      	mov	r2, r0
 8009062:	6270      	str	r0, [r6, #36]	; 0x24
 8009064:	b920      	cbnz	r0, 8009070 <_dtoa_r+0x30>
 8009066:	4baa      	ldr	r3, [pc, #680]	; (8009310 <_dtoa_r+0x2d0>)
 8009068:	21ea      	movs	r1, #234	; 0xea
 800906a:	48aa      	ldr	r0, [pc, #680]	; (8009314 <_dtoa_r+0x2d4>)
 800906c:	f001 f908 	bl	800a280 <__assert_func>
 8009070:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009074:	6005      	str	r5, [r0, #0]
 8009076:	60c5      	str	r5, [r0, #12]
 8009078:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800907a:	6819      	ldr	r1, [r3, #0]
 800907c:	b151      	cbz	r1, 8009094 <_dtoa_r+0x54>
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	604a      	str	r2, [r1, #4]
 8009082:	2301      	movs	r3, #1
 8009084:	4093      	lsls	r3, r2
 8009086:	608b      	str	r3, [r1, #8]
 8009088:	4630      	mov	r0, r6
 800908a:	f000 fda5 	bl	8009bd8 <_Bfree>
 800908e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	f1b9 0300 	subs.w	r3, r9, #0
 8009098:	bfbb      	ittet	lt
 800909a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800909e:	9303      	strlt	r3, [sp, #12]
 80090a0:	2300      	movge	r3, #0
 80090a2:	2201      	movlt	r2, #1
 80090a4:	bfac      	ite	ge
 80090a6:	6023      	strge	r3, [r4, #0]
 80090a8:	6022      	strlt	r2, [r4, #0]
 80090aa:	4b9b      	ldr	r3, [pc, #620]	; (8009318 <_dtoa_r+0x2d8>)
 80090ac:	9c03      	ldr	r4, [sp, #12]
 80090ae:	43a3      	bics	r3, r4
 80090b0:	d11c      	bne.n	80090ec <_dtoa_r+0xac>
 80090b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80090b4:	f242 730f 	movw	r3, #9999	; 0x270f
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80090be:	ea53 0308 	orrs.w	r3, r3, r8
 80090c2:	f000 84fc 	beq.w	8009abe <_dtoa_r+0xa7e>
 80090c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80090c8:	b963      	cbnz	r3, 80090e4 <_dtoa_r+0xa4>
 80090ca:	4b94      	ldr	r3, [pc, #592]	; (800931c <_dtoa_r+0x2dc>)
 80090cc:	e01f      	b.n	800910e <_dtoa_r+0xce>
 80090ce:	4b94      	ldr	r3, [pc, #592]	; (8009320 <_dtoa_r+0x2e0>)
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	3308      	adds	r3, #8
 80090d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	9804      	ldr	r0, [sp, #16]
 80090da:	b00f      	add	sp, #60	; 0x3c
 80090dc:	ecbd 8b02 	vpop	{d8}
 80090e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e4:	4b8d      	ldr	r3, [pc, #564]	; (800931c <_dtoa_r+0x2dc>)
 80090e6:	9304      	str	r3, [sp, #16]
 80090e8:	3303      	adds	r3, #3
 80090ea:	e7f3      	b.n	80090d4 <_dtoa_r+0x94>
 80090ec:	ed9d 8b02 	vldr	d8, [sp, #8]
 80090f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80090f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f8:	d10b      	bne.n	8009112 <_dtoa_r+0xd2>
 80090fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80090fc:	2301      	movs	r3, #1
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 84d8 	beq.w	8009ab8 <_dtoa_r+0xa78>
 8009108:	4886      	ldr	r0, [pc, #536]	; (8009324 <_dtoa_r+0x2e4>)
 800910a:	6018      	str	r0, [r3, #0]
 800910c:	1e43      	subs	r3, r0, #1
 800910e:	9304      	str	r3, [sp, #16]
 8009110:	e7e2      	b.n	80090d8 <_dtoa_r+0x98>
 8009112:	ab0c      	add	r3, sp, #48	; 0x30
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	ab0d      	add	r3, sp, #52	; 0x34
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	4630      	mov	r0, r6
 800911c:	ec53 2b18 	vmov	r2, r3, d8
 8009120:	f001 f842 	bl	800a1a8 <__d2b>
 8009124:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009128:	4605      	mov	r5, r0
 800912a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800912c:	2900      	cmp	r1, #0
 800912e:	d046      	beq.n	80091be <_dtoa_r+0x17e>
 8009130:	ee18 4a90 	vmov	r4, s17
 8009134:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009138:	ec53 2b18 	vmov	r2, r3, d8
 800913c:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009140:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009144:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009148:	2400      	movs	r4, #0
 800914a:	ec43 2b16 	vmov	d6, r2, r3
 800914e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009152:	ed9f 5b69 	vldr	d5, [pc, #420]	; 80092f8 <_dtoa_r+0x2b8>
 8009156:	ee36 7b47 	vsub.f64	d7, d6, d7
 800915a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009300 <_dtoa_r+0x2c0>
 800915e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009162:	ed9f 5b69 	vldr	d5, [pc, #420]	; 8009308 <_dtoa_r+0x2c8>
 8009166:	ee07 1a90 	vmov	s15, r1
 800916a:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800916e:	eeb0 7b46 	vmov.f64	d7, d6
 8009172:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009176:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800917a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800917e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009182:	ee16 ba90 	vmov	fp, s13
 8009186:	9409      	str	r4, [sp, #36]	; 0x24
 8009188:	d508      	bpl.n	800919c <_dtoa_r+0x15c>
 800918a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800918e:	eeb4 6b47 	vcmp.f64	d6, d7
 8009192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009196:	bf18      	it	ne
 8009198:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800919c:	f1bb 0f16 	cmp.w	fp, #22
 80091a0:	d82f      	bhi.n	8009202 <_dtoa_r+0x1c2>
 80091a2:	4b61      	ldr	r3, [pc, #388]	; (8009328 <_dtoa_r+0x2e8>)
 80091a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80091a8:	ed93 7b00 	vldr	d7, [r3]
 80091ac:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80091b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b4:	d501      	bpl.n	80091ba <_dtoa_r+0x17a>
 80091b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091ba:	2300      	movs	r3, #0
 80091bc:	e022      	b.n	8009204 <_dtoa_r+0x1c4>
 80091be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80091c0:	4401      	add	r1, r0
 80091c2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	bfc1      	itttt	gt
 80091ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091ce:	fa04 f303 	lslgt.w	r3, r4, r3
 80091d2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80091d6:	fa28 f804 	lsrgt.w	r8, r8, r4
 80091da:	bfd6      	itet	le
 80091dc:	f1c3 0320 	rsble	r3, r3, #32
 80091e0:	ea43 0808 	orrgt.w	r8, r3, r8
 80091e4:	fa08 f803 	lslle.w	r8, r8, r3
 80091e8:	ee07 8a90 	vmov	s15, r8
 80091ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80091f0:	3901      	subs	r1, #1
 80091f2:	ee17 4a90 	vmov	r4, s15
 80091f6:	ec53 2b17 	vmov	r2, r3, d7
 80091fa:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80091fe:	2401      	movs	r4, #1
 8009200:	e7a3      	b.n	800914a <_dtoa_r+0x10a>
 8009202:	2301      	movs	r3, #1
 8009204:	930a      	str	r3, [sp, #40]	; 0x28
 8009206:	1a43      	subs	r3, r0, r1
 8009208:	1e5a      	subs	r2, r3, #1
 800920a:	bf45      	ittet	mi
 800920c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009210:	9305      	strmi	r3, [sp, #20]
 8009212:	2300      	movpl	r3, #0
 8009214:	2300      	movmi	r3, #0
 8009216:	9206      	str	r2, [sp, #24]
 8009218:	bf54      	ite	pl
 800921a:	9305      	strpl	r3, [sp, #20]
 800921c:	9306      	strmi	r3, [sp, #24]
 800921e:	f1bb 0f00 	cmp.w	fp, #0
 8009222:	db18      	blt.n	8009256 <_dtoa_r+0x216>
 8009224:	9b06      	ldr	r3, [sp, #24]
 8009226:	f8cd b020 	str.w	fp, [sp, #32]
 800922a:	445b      	add	r3, fp
 800922c:	9306      	str	r3, [sp, #24]
 800922e:	2300      	movs	r3, #0
 8009230:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009232:	2a09      	cmp	r2, #9
 8009234:	d849      	bhi.n	80092ca <_dtoa_r+0x28a>
 8009236:	2a05      	cmp	r2, #5
 8009238:	bfc4      	itt	gt
 800923a:	3a04      	subgt	r2, #4
 800923c:	921a      	strgt	r2, [sp, #104]	; 0x68
 800923e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009240:	f1a2 0202 	sub.w	r2, r2, #2
 8009244:	bfcc      	ite	gt
 8009246:	2400      	movgt	r4, #0
 8009248:	2401      	movle	r4, #1
 800924a:	2a03      	cmp	r2, #3
 800924c:	d848      	bhi.n	80092e0 <_dtoa_r+0x2a0>
 800924e:	e8df f002 	tbb	[pc, r2]
 8009252:	2e0b      	.short	0x2e0b
 8009254:	3a2c      	.short	0x3a2c
 8009256:	9b05      	ldr	r3, [sp, #20]
 8009258:	2200      	movs	r2, #0
 800925a:	eba3 030b 	sub.w	r3, r3, fp
 800925e:	9305      	str	r3, [sp, #20]
 8009260:	9208      	str	r2, [sp, #32]
 8009262:	f1cb 0300 	rsb	r3, fp, #0
 8009266:	e7e3      	b.n	8009230 <_dtoa_r+0x1f0>
 8009268:	2200      	movs	r2, #0
 800926a:	9207      	str	r2, [sp, #28]
 800926c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800926e:	2a00      	cmp	r2, #0
 8009270:	dc39      	bgt.n	80092e6 <_dtoa_r+0x2a6>
 8009272:	f04f 0a01 	mov.w	sl, #1
 8009276:	46d1      	mov	r9, sl
 8009278:	4652      	mov	r2, sl
 800927a:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
 800927e:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009280:	2100      	movs	r1, #0
 8009282:	6079      	str	r1, [r7, #4]
 8009284:	2004      	movs	r0, #4
 8009286:	f100 0c14 	add.w	ip, r0, #20
 800928a:	4594      	cmp	ip, r2
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	d92f      	bls.n	80092f0 <_dtoa_r+0x2b0>
 8009290:	4630      	mov	r0, r6
 8009292:	930b      	str	r3, [sp, #44]	; 0x2c
 8009294:	f000 fc60 	bl	8009b58 <_Balloc>
 8009298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800929a:	9004      	str	r0, [sp, #16]
 800929c:	4602      	mov	r2, r0
 800929e:	2800      	cmp	r0, #0
 80092a0:	d146      	bne.n	8009330 <_dtoa_r+0x2f0>
 80092a2:	4b22      	ldr	r3, [pc, #136]	; (800932c <_dtoa_r+0x2ec>)
 80092a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092a8:	e6df      	b.n	800906a <_dtoa_r+0x2a>
 80092aa:	2201      	movs	r2, #1
 80092ac:	e7dd      	b.n	800926a <_dtoa_r+0x22a>
 80092ae:	2200      	movs	r2, #0
 80092b0:	9207      	str	r2, [sp, #28]
 80092b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80092b4:	eb0b 0a02 	add.w	sl, fp, r2
 80092b8:	f10a 0901 	add.w	r9, sl, #1
 80092bc:	464a      	mov	r2, r9
 80092be:	2a01      	cmp	r2, #1
 80092c0:	bfb8      	it	lt
 80092c2:	2201      	movlt	r2, #1
 80092c4:	e7db      	b.n	800927e <_dtoa_r+0x23e>
 80092c6:	2201      	movs	r2, #1
 80092c8:	e7f2      	b.n	80092b0 <_dtoa_r+0x270>
 80092ca:	2401      	movs	r4, #1
 80092cc:	2200      	movs	r2, #0
 80092ce:	921a      	str	r2, [sp, #104]	; 0x68
 80092d0:	9407      	str	r4, [sp, #28]
 80092d2:	f04f 3aff 	mov.w	sl, #4294967295
 80092d6:	2100      	movs	r1, #0
 80092d8:	46d1      	mov	r9, sl
 80092da:	2212      	movs	r2, #18
 80092dc:	911b      	str	r1, [sp, #108]	; 0x6c
 80092de:	e7ce      	b.n	800927e <_dtoa_r+0x23e>
 80092e0:	2201      	movs	r2, #1
 80092e2:	9207      	str	r2, [sp, #28]
 80092e4:	e7f5      	b.n	80092d2 <_dtoa_r+0x292>
 80092e6:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 80092ea:	46d1      	mov	r9, sl
 80092ec:	4652      	mov	r2, sl
 80092ee:	e7c6      	b.n	800927e <_dtoa_r+0x23e>
 80092f0:	3101      	adds	r1, #1
 80092f2:	6079      	str	r1, [r7, #4]
 80092f4:	0040      	lsls	r0, r0, #1
 80092f6:	e7c6      	b.n	8009286 <_dtoa_r+0x246>
 80092f8:	636f4361 	.word	0x636f4361
 80092fc:	3fd287a7 	.word	0x3fd287a7
 8009300:	8b60c8b3 	.word	0x8b60c8b3
 8009304:	3fc68a28 	.word	0x3fc68a28
 8009308:	509f79fb 	.word	0x509f79fb
 800930c:	3fd34413 	.word	0x3fd34413
 8009310:	0800b7ad 	.word	0x0800b7ad
 8009314:	0800b7c4 	.word	0x0800b7c4
 8009318:	7ff00000 	.word	0x7ff00000
 800931c:	0800b7a9 	.word	0x0800b7a9
 8009320:	0800b7a0 	.word	0x0800b7a0
 8009324:	0800b77d 	.word	0x0800b77d
 8009328:	0800b8b8 	.word	0x0800b8b8
 800932c:	0800b81f 	.word	0x0800b81f
 8009330:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009332:	9904      	ldr	r1, [sp, #16]
 8009334:	6011      	str	r1, [r2, #0]
 8009336:	f1b9 0f0e 	cmp.w	r9, #14
 800933a:	d86c      	bhi.n	8009416 <_dtoa_r+0x3d6>
 800933c:	2c00      	cmp	r4, #0
 800933e:	d06a      	beq.n	8009416 <_dtoa_r+0x3d6>
 8009340:	f1bb 0f00 	cmp.w	fp, #0
 8009344:	f340 80a0 	ble.w	8009488 <_dtoa_r+0x448>
 8009348:	49c1      	ldr	r1, [pc, #772]	; (8009650 <_dtoa_r+0x610>)
 800934a:	f00b 020f 	and.w	r2, fp, #15
 800934e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009352:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009356:	ed92 7b00 	vldr	d7, [r2]
 800935a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800935e:	f000 8087 	beq.w	8009470 <_dtoa_r+0x430>
 8009362:	4abc      	ldr	r2, [pc, #752]	; (8009654 <_dtoa_r+0x614>)
 8009364:	ed92 6b08 	vldr	d6, [r2, #32]
 8009368:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800936c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009370:	f001 010f 	and.w	r1, r1, #15
 8009374:	2203      	movs	r2, #3
 8009376:	48b7      	ldr	r0, [pc, #732]	; (8009654 <_dtoa_r+0x614>)
 8009378:	2900      	cmp	r1, #0
 800937a:	d17b      	bne.n	8009474 <_dtoa_r+0x434>
 800937c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009380:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009384:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009388:	990a      	ldr	r1, [sp, #40]	; 0x28
 800938a:	2900      	cmp	r1, #0
 800938c:	f000 80a2 	beq.w	80094d4 <_dtoa_r+0x494>
 8009390:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009394:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009398:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800939c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a0:	f140 8098 	bpl.w	80094d4 <_dtoa_r+0x494>
 80093a4:	f1b9 0f00 	cmp.w	r9, #0
 80093a8:	f000 8094 	beq.w	80094d4 <_dtoa_r+0x494>
 80093ac:	f1ba 0f00 	cmp.w	sl, #0
 80093b0:	dd2f      	ble.n	8009412 <_dtoa_r+0x3d2>
 80093b2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80093b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80093ba:	ed8d 7b02 	vstr	d7, [sp, #8]
 80093be:	f10b 37ff 	add.w	r7, fp, #4294967295
 80093c2:	3201      	adds	r2, #1
 80093c4:	4650      	mov	r0, sl
 80093c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80093ca:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80093ce:	ee07 2a90 	vmov	s15, r2
 80093d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80093d6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80093da:	ee15 4a90 	vmov	r4, s11
 80093de:	ec52 1b15 	vmov	r1, r2, d5
 80093e2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d177      	bne.n	80094da <_dtoa_r+0x49a>
 80093ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80093ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80093f2:	ec42 1b17 	vmov	d7, r1, r2
 80093f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80093fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093fe:	f300 8263 	bgt.w	80098c8 <_dtoa_r+0x888>
 8009402:	eeb1 7b47 	vneg.f64	d7, d7
 8009406:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800940a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940e:	f100 8258 	bmi.w	80098c2 <_dtoa_r+0x882>
 8009412:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009418:	2a00      	cmp	r2, #0
 800941a:	f2c0 811d 	blt.w	8009658 <_dtoa_r+0x618>
 800941e:	f1bb 0f0e 	cmp.w	fp, #14
 8009422:	f300 8119 	bgt.w	8009658 <_dtoa_r+0x618>
 8009426:	4b8a      	ldr	r3, [pc, #552]	; (8009650 <_dtoa_r+0x610>)
 8009428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800942c:	ed93 6b00 	vldr	d6, [r3]
 8009430:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009432:	2b00      	cmp	r3, #0
 8009434:	f280 80b7 	bge.w	80095a6 <_dtoa_r+0x566>
 8009438:	f1b9 0f00 	cmp.w	r9, #0
 800943c:	f300 80b3 	bgt.w	80095a6 <_dtoa_r+0x566>
 8009440:	f040 823f 	bne.w	80098c2 <_dtoa_r+0x882>
 8009444:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009448:	ee26 6b07 	vmul.f64	d6, d6, d7
 800944c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009450:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009458:	464c      	mov	r4, r9
 800945a:	464f      	mov	r7, r9
 800945c:	f280 8215 	bge.w	800988a <_dtoa_r+0x84a>
 8009460:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009464:	2331      	movs	r3, #49	; 0x31
 8009466:	f808 3b01 	strb.w	r3, [r8], #1
 800946a:	f10b 0b01 	add.w	fp, fp, #1
 800946e:	e211      	b.n	8009894 <_dtoa_r+0x854>
 8009470:	2202      	movs	r2, #2
 8009472:	e780      	b.n	8009376 <_dtoa_r+0x336>
 8009474:	07cc      	lsls	r4, r1, #31
 8009476:	d504      	bpl.n	8009482 <_dtoa_r+0x442>
 8009478:	ed90 6b00 	vldr	d6, [r0]
 800947c:	3201      	adds	r2, #1
 800947e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009482:	1049      	asrs	r1, r1, #1
 8009484:	3008      	adds	r0, #8
 8009486:	e777      	b.n	8009378 <_dtoa_r+0x338>
 8009488:	d022      	beq.n	80094d0 <_dtoa_r+0x490>
 800948a:	f1cb 0100 	rsb	r1, fp, #0
 800948e:	4a70      	ldr	r2, [pc, #448]	; (8009650 <_dtoa_r+0x610>)
 8009490:	f001 000f 	and.w	r0, r1, #15
 8009494:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009498:	ed92 7b00 	vldr	d7, [r2]
 800949c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80094a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80094a4:	486b      	ldr	r0, [pc, #428]	; (8009654 <_dtoa_r+0x614>)
 80094a6:	1109      	asrs	r1, r1, #4
 80094a8:	2400      	movs	r4, #0
 80094aa:	2202      	movs	r2, #2
 80094ac:	b929      	cbnz	r1, 80094ba <_dtoa_r+0x47a>
 80094ae:	2c00      	cmp	r4, #0
 80094b0:	f43f af6a 	beq.w	8009388 <_dtoa_r+0x348>
 80094b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80094b8:	e766      	b.n	8009388 <_dtoa_r+0x348>
 80094ba:	07cf      	lsls	r7, r1, #31
 80094bc:	d505      	bpl.n	80094ca <_dtoa_r+0x48a>
 80094be:	ed90 6b00 	vldr	d6, [r0]
 80094c2:	3201      	adds	r2, #1
 80094c4:	2401      	movs	r4, #1
 80094c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094ca:	1049      	asrs	r1, r1, #1
 80094cc:	3008      	adds	r0, #8
 80094ce:	e7ed      	b.n	80094ac <_dtoa_r+0x46c>
 80094d0:	2202      	movs	r2, #2
 80094d2:	e759      	b.n	8009388 <_dtoa_r+0x348>
 80094d4:	465f      	mov	r7, fp
 80094d6:	4648      	mov	r0, r9
 80094d8:	e775      	b.n	80093c6 <_dtoa_r+0x386>
 80094da:	ec42 1b17 	vmov	d7, r1, r2
 80094de:	4a5c      	ldr	r2, [pc, #368]	; (8009650 <_dtoa_r+0x610>)
 80094e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80094e4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80094e8:	9a04      	ldr	r2, [sp, #16]
 80094ea:	1814      	adds	r4, r2, r0
 80094ec:	9a07      	ldr	r2, [sp, #28]
 80094ee:	b352      	cbz	r2, 8009546 <_dtoa_r+0x506>
 80094f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80094f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80094f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80094fc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009500:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009504:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009508:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800950c:	ee14 2a90 	vmov	r2, s9
 8009510:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009514:	3230      	adds	r2, #48	; 0x30
 8009516:	ee36 6b45 	vsub.f64	d6, d6, d5
 800951a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800951e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009522:	f808 2b01 	strb.w	r2, [r8], #1
 8009526:	d439      	bmi.n	800959c <_dtoa_r+0x55c>
 8009528:	ee32 5b46 	vsub.f64	d5, d2, d6
 800952c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009534:	d472      	bmi.n	800961c <_dtoa_r+0x5dc>
 8009536:	45a0      	cmp	r8, r4
 8009538:	f43f af6b 	beq.w	8009412 <_dtoa_r+0x3d2>
 800953c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009540:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009544:	e7e0      	b.n	8009508 <_dtoa_r+0x4c8>
 8009546:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800954a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800954e:	4621      	mov	r1, r4
 8009550:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009554:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009558:	ee14 2a90 	vmov	r2, s9
 800955c:	3230      	adds	r2, #48	; 0x30
 800955e:	f808 2b01 	strb.w	r2, [r8], #1
 8009562:	45a0      	cmp	r8, r4
 8009564:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009568:	ee36 6b45 	vsub.f64	d6, d6, d5
 800956c:	d118      	bne.n	80095a0 <_dtoa_r+0x560>
 800956e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009572:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009576:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800957a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957e:	dc4d      	bgt.n	800961c <_dtoa_r+0x5dc>
 8009580:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009584:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958c:	f57f af41 	bpl.w	8009412 <_dtoa_r+0x3d2>
 8009590:	4688      	mov	r8, r1
 8009592:	3901      	subs	r1, #1
 8009594:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009598:	2b30      	cmp	r3, #48	; 0x30
 800959a:	d0f9      	beq.n	8009590 <_dtoa_r+0x550>
 800959c:	46bb      	mov	fp, r7
 800959e:	e02a      	b.n	80095f6 <_dtoa_r+0x5b6>
 80095a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80095a4:	e7d6      	b.n	8009554 <_dtoa_r+0x514>
 80095a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095aa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80095ae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80095b2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80095b6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80095ba:	ee15 3a10 	vmov	r3, s10
 80095be:	3330      	adds	r3, #48	; 0x30
 80095c0:	f808 3b01 	strb.w	r3, [r8], #1
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	eba8 0303 	sub.w	r3, r8, r3
 80095ca:	4599      	cmp	r9, r3
 80095cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80095d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80095d4:	d133      	bne.n	800963e <_dtoa_r+0x5fe>
 80095d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80095da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80095de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e2:	dc1a      	bgt.n	800961a <_dtoa_r+0x5da>
 80095e4:	eeb4 7b46 	vcmp.f64	d7, d6
 80095e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ec:	d103      	bne.n	80095f6 <_dtoa_r+0x5b6>
 80095ee:	ee15 3a10 	vmov	r3, s10
 80095f2:	07d9      	lsls	r1, r3, #31
 80095f4:	d411      	bmi.n	800961a <_dtoa_r+0x5da>
 80095f6:	4629      	mov	r1, r5
 80095f8:	4630      	mov	r0, r6
 80095fa:	f000 faed 	bl	8009bd8 <_Bfree>
 80095fe:	2300      	movs	r3, #0
 8009600:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009602:	f888 3000 	strb.w	r3, [r8]
 8009606:	f10b 0301 	add.w	r3, fp, #1
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800960e:	2b00      	cmp	r3, #0
 8009610:	f43f ad62 	beq.w	80090d8 <_dtoa_r+0x98>
 8009614:	f8c3 8000 	str.w	r8, [r3]
 8009618:	e55e      	b.n	80090d8 <_dtoa_r+0x98>
 800961a:	465f      	mov	r7, fp
 800961c:	4643      	mov	r3, r8
 800961e:	4698      	mov	r8, r3
 8009620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009624:	2a39      	cmp	r2, #57	; 0x39
 8009626:	d106      	bne.n	8009636 <_dtoa_r+0x5f6>
 8009628:	9a04      	ldr	r2, [sp, #16]
 800962a:	429a      	cmp	r2, r3
 800962c:	d1f7      	bne.n	800961e <_dtoa_r+0x5de>
 800962e:	9904      	ldr	r1, [sp, #16]
 8009630:	2230      	movs	r2, #48	; 0x30
 8009632:	3701      	adds	r7, #1
 8009634:	700a      	strb	r2, [r1, #0]
 8009636:	781a      	ldrb	r2, [r3, #0]
 8009638:	3201      	adds	r2, #1
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	e7ae      	b.n	800959c <_dtoa_r+0x55c>
 800963e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009642:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800964a:	d1b2      	bne.n	80095b2 <_dtoa_r+0x572>
 800964c:	e7d3      	b.n	80095f6 <_dtoa_r+0x5b6>
 800964e:	bf00      	nop
 8009650:	0800b8b8 	.word	0x0800b8b8
 8009654:	0800b890 	.word	0x0800b890
 8009658:	9907      	ldr	r1, [sp, #28]
 800965a:	2900      	cmp	r1, #0
 800965c:	f000 80d0 	beq.w	8009800 <_dtoa_r+0x7c0>
 8009660:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009662:	2901      	cmp	r1, #1
 8009664:	f300 80b4 	bgt.w	80097d0 <_dtoa_r+0x790>
 8009668:	9909      	ldr	r1, [sp, #36]	; 0x24
 800966a:	2900      	cmp	r1, #0
 800966c:	f000 80ac 	beq.w	80097c8 <_dtoa_r+0x788>
 8009670:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009674:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009678:	461c      	mov	r4, r3
 800967a:	9309      	str	r3, [sp, #36]	; 0x24
 800967c:	9b05      	ldr	r3, [sp, #20]
 800967e:	4413      	add	r3, r2
 8009680:	9305      	str	r3, [sp, #20]
 8009682:	9b06      	ldr	r3, [sp, #24]
 8009684:	2101      	movs	r1, #1
 8009686:	4413      	add	r3, r2
 8009688:	4630      	mov	r0, r6
 800968a:	9306      	str	r3, [sp, #24]
 800968c:	f000 fb5c 	bl	8009d48 <__i2b>
 8009690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009692:	4607      	mov	r7, r0
 8009694:	f1b8 0f00 	cmp.w	r8, #0
 8009698:	dd0d      	ble.n	80096b6 <_dtoa_r+0x676>
 800969a:	9a06      	ldr	r2, [sp, #24]
 800969c:	2a00      	cmp	r2, #0
 800969e:	dd0a      	ble.n	80096b6 <_dtoa_r+0x676>
 80096a0:	4542      	cmp	r2, r8
 80096a2:	9905      	ldr	r1, [sp, #20]
 80096a4:	bfa8      	it	ge
 80096a6:	4642      	movge	r2, r8
 80096a8:	1a89      	subs	r1, r1, r2
 80096aa:	9105      	str	r1, [sp, #20]
 80096ac:	9906      	ldr	r1, [sp, #24]
 80096ae:	eba8 0802 	sub.w	r8, r8, r2
 80096b2:	1a8a      	subs	r2, r1, r2
 80096b4:	9206      	str	r2, [sp, #24]
 80096b6:	b303      	cbz	r3, 80096fa <_dtoa_r+0x6ba>
 80096b8:	9a07      	ldr	r2, [sp, #28]
 80096ba:	2a00      	cmp	r2, #0
 80096bc:	f000 80a5 	beq.w	800980a <_dtoa_r+0x7ca>
 80096c0:	2c00      	cmp	r4, #0
 80096c2:	dd13      	ble.n	80096ec <_dtoa_r+0x6ac>
 80096c4:	4639      	mov	r1, r7
 80096c6:	4622      	mov	r2, r4
 80096c8:	4630      	mov	r0, r6
 80096ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80096cc:	f000 fbfc 	bl	8009ec8 <__pow5mult>
 80096d0:	462a      	mov	r2, r5
 80096d2:	4601      	mov	r1, r0
 80096d4:	4607      	mov	r7, r0
 80096d6:	4630      	mov	r0, r6
 80096d8:	f000 fb4c 	bl	8009d74 <__multiply>
 80096dc:	4629      	mov	r1, r5
 80096de:	9009      	str	r0, [sp, #36]	; 0x24
 80096e0:	4630      	mov	r0, r6
 80096e2:	f000 fa79 	bl	8009bd8 <_Bfree>
 80096e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ea:	4615      	mov	r5, r2
 80096ec:	1b1a      	subs	r2, r3, r4
 80096ee:	d004      	beq.n	80096fa <_dtoa_r+0x6ba>
 80096f0:	4629      	mov	r1, r5
 80096f2:	4630      	mov	r0, r6
 80096f4:	f000 fbe8 	bl	8009ec8 <__pow5mult>
 80096f8:	4605      	mov	r5, r0
 80096fa:	2101      	movs	r1, #1
 80096fc:	4630      	mov	r0, r6
 80096fe:	f000 fb23 	bl	8009d48 <__i2b>
 8009702:	9b08      	ldr	r3, [sp, #32]
 8009704:	2b00      	cmp	r3, #0
 8009706:	4604      	mov	r4, r0
 8009708:	f340 8081 	ble.w	800980e <_dtoa_r+0x7ce>
 800970c:	461a      	mov	r2, r3
 800970e:	4601      	mov	r1, r0
 8009710:	4630      	mov	r0, r6
 8009712:	f000 fbd9 	bl	8009ec8 <__pow5mult>
 8009716:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009718:	2b01      	cmp	r3, #1
 800971a:	4604      	mov	r4, r0
 800971c:	dd7a      	ble.n	8009814 <_dtoa_r+0x7d4>
 800971e:	2300      	movs	r3, #0
 8009720:	9309      	str	r3, [sp, #36]	; 0x24
 8009722:	6922      	ldr	r2, [r4, #16]
 8009724:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009728:	6910      	ldr	r0, [r2, #16]
 800972a:	f000 fabd 	bl	8009ca8 <__hi0bits>
 800972e:	f1c0 0020 	rsb	r0, r0, #32
 8009732:	9b06      	ldr	r3, [sp, #24]
 8009734:	4418      	add	r0, r3
 8009736:	f010 001f 	ands.w	r0, r0, #31
 800973a:	f000 808c 	beq.w	8009856 <_dtoa_r+0x816>
 800973e:	f1c0 0220 	rsb	r2, r0, #32
 8009742:	2a04      	cmp	r2, #4
 8009744:	f340 8085 	ble.w	8009852 <_dtoa_r+0x812>
 8009748:	f1c0 001c 	rsb	r0, r0, #28
 800974c:	9b05      	ldr	r3, [sp, #20]
 800974e:	4403      	add	r3, r0
 8009750:	9305      	str	r3, [sp, #20]
 8009752:	9b06      	ldr	r3, [sp, #24]
 8009754:	4403      	add	r3, r0
 8009756:	4480      	add	r8, r0
 8009758:	9306      	str	r3, [sp, #24]
 800975a:	9b05      	ldr	r3, [sp, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	dd05      	ble.n	800976c <_dtoa_r+0x72c>
 8009760:	4629      	mov	r1, r5
 8009762:	461a      	mov	r2, r3
 8009764:	4630      	mov	r0, r6
 8009766:	f000 fc09 	bl	8009f7c <__lshift>
 800976a:	4605      	mov	r5, r0
 800976c:	9b06      	ldr	r3, [sp, #24]
 800976e:	2b00      	cmp	r3, #0
 8009770:	dd05      	ble.n	800977e <_dtoa_r+0x73e>
 8009772:	4621      	mov	r1, r4
 8009774:	461a      	mov	r2, r3
 8009776:	4630      	mov	r0, r6
 8009778:	f000 fc00 	bl	8009f7c <__lshift>
 800977c:	4604      	mov	r4, r0
 800977e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009780:	2b00      	cmp	r3, #0
 8009782:	d06a      	beq.n	800985a <_dtoa_r+0x81a>
 8009784:	4621      	mov	r1, r4
 8009786:	4628      	mov	r0, r5
 8009788:	f000 fc68 	bl	800a05c <__mcmp>
 800978c:	2800      	cmp	r0, #0
 800978e:	da64      	bge.n	800985a <_dtoa_r+0x81a>
 8009790:	2300      	movs	r3, #0
 8009792:	4629      	mov	r1, r5
 8009794:	220a      	movs	r2, #10
 8009796:	4630      	mov	r0, r6
 8009798:	f000 fa40 	bl	8009c1c <__multadd>
 800979c:	9b07      	ldr	r3, [sp, #28]
 800979e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097a2:	4605      	mov	r5, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8191 	beq.w	8009acc <_dtoa_r+0xa8c>
 80097aa:	4639      	mov	r1, r7
 80097ac:	2300      	movs	r3, #0
 80097ae:	220a      	movs	r2, #10
 80097b0:	4630      	mov	r0, r6
 80097b2:	f000 fa33 	bl	8009c1c <__multadd>
 80097b6:	f1ba 0f00 	cmp.w	sl, #0
 80097ba:	4607      	mov	r7, r0
 80097bc:	f300 808d 	bgt.w	80098da <_dtoa_r+0x89a>
 80097c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	dc50      	bgt.n	8009868 <_dtoa_r+0x828>
 80097c6:	e088      	b.n	80098da <_dtoa_r+0x89a>
 80097c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80097ce:	e751      	b.n	8009674 <_dtoa_r+0x634>
 80097d0:	f109 34ff 	add.w	r4, r9, #4294967295
 80097d4:	42a3      	cmp	r3, r4
 80097d6:	bfbf      	itttt	lt
 80097d8:	9a08      	ldrlt	r2, [sp, #32]
 80097da:	1ae3      	sublt	r3, r4, r3
 80097dc:	18d2      	addlt	r2, r2, r3
 80097de:	9208      	strlt	r2, [sp, #32]
 80097e0:	bfb6      	itet	lt
 80097e2:	4623      	movlt	r3, r4
 80097e4:	1b1c      	subge	r4, r3, r4
 80097e6:	2400      	movlt	r4, #0
 80097e8:	f1b9 0f00 	cmp.w	r9, #0
 80097ec:	bfb5      	itete	lt
 80097ee:	9a05      	ldrlt	r2, [sp, #20]
 80097f0:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80097f4:	eba2 0809 	sublt.w	r8, r2, r9
 80097f8:	464a      	movge	r2, r9
 80097fa:	bfb8      	it	lt
 80097fc:	2200      	movlt	r2, #0
 80097fe:	e73c      	b.n	800967a <_dtoa_r+0x63a>
 8009800:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009804:	9f07      	ldr	r7, [sp, #28]
 8009806:	461c      	mov	r4, r3
 8009808:	e744      	b.n	8009694 <_dtoa_r+0x654>
 800980a:	461a      	mov	r2, r3
 800980c:	e770      	b.n	80096f0 <_dtoa_r+0x6b0>
 800980e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009810:	2b01      	cmp	r3, #1
 8009812:	dc18      	bgt.n	8009846 <_dtoa_r+0x806>
 8009814:	9b02      	ldr	r3, [sp, #8]
 8009816:	b9b3      	cbnz	r3, 8009846 <_dtoa_r+0x806>
 8009818:	9b03      	ldr	r3, [sp, #12]
 800981a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800981e:	b9a2      	cbnz	r2, 800984a <_dtoa_r+0x80a>
 8009820:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009824:	0d12      	lsrs	r2, r2, #20
 8009826:	0512      	lsls	r2, r2, #20
 8009828:	b18a      	cbz	r2, 800984e <_dtoa_r+0x80e>
 800982a:	9b05      	ldr	r3, [sp, #20]
 800982c:	3301      	adds	r3, #1
 800982e:	9305      	str	r3, [sp, #20]
 8009830:	9b06      	ldr	r3, [sp, #24]
 8009832:	3301      	adds	r3, #1
 8009834:	9306      	str	r3, [sp, #24]
 8009836:	2301      	movs	r3, #1
 8009838:	9309      	str	r3, [sp, #36]	; 0x24
 800983a:	9b08      	ldr	r3, [sp, #32]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f47f af70 	bne.w	8009722 <_dtoa_r+0x6e2>
 8009842:	2001      	movs	r0, #1
 8009844:	e775      	b.n	8009732 <_dtoa_r+0x6f2>
 8009846:	2300      	movs	r3, #0
 8009848:	e7f6      	b.n	8009838 <_dtoa_r+0x7f8>
 800984a:	9b02      	ldr	r3, [sp, #8]
 800984c:	e7f4      	b.n	8009838 <_dtoa_r+0x7f8>
 800984e:	9209      	str	r2, [sp, #36]	; 0x24
 8009850:	e7f3      	b.n	800983a <_dtoa_r+0x7fa>
 8009852:	d082      	beq.n	800975a <_dtoa_r+0x71a>
 8009854:	4610      	mov	r0, r2
 8009856:	301c      	adds	r0, #28
 8009858:	e778      	b.n	800974c <_dtoa_r+0x70c>
 800985a:	f1b9 0f00 	cmp.w	r9, #0
 800985e:	dc37      	bgt.n	80098d0 <_dtoa_r+0x890>
 8009860:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009862:	2b02      	cmp	r3, #2
 8009864:	dd34      	ble.n	80098d0 <_dtoa_r+0x890>
 8009866:	46ca      	mov	sl, r9
 8009868:	f1ba 0f00 	cmp.w	sl, #0
 800986c:	d10d      	bne.n	800988a <_dtoa_r+0x84a>
 800986e:	4621      	mov	r1, r4
 8009870:	4653      	mov	r3, sl
 8009872:	2205      	movs	r2, #5
 8009874:	4630      	mov	r0, r6
 8009876:	f000 f9d1 	bl	8009c1c <__multadd>
 800987a:	4601      	mov	r1, r0
 800987c:	4604      	mov	r4, r0
 800987e:	4628      	mov	r0, r5
 8009880:	f000 fbec 	bl	800a05c <__mcmp>
 8009884:	2800      	cmp	r0, #0
 8009886:	f73f adeb 	bgt.w	8009460 <_dtoa_r+0x420>
 800988a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800988c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009890:	ea6f 0b03 	mvn.w	fp, r3
 8009894:	f04f 0900 	mov.w	r9, #0
 8009898:	4621      	mov	r1, r4
 800989a:	4630      	mov	r0, r6
 800989c:	f000 f99c 	bl	8009bd8 <_Bfree>
 80098a0:	2f00      	cmp	r7, #0
 80098a2:	f43f aea8 	beq.w	80095f6 <_dtoa_r+0x5b6>
 80098a6:	f1b9 0f00 	cmp.w	r9, #0
 80098aa:	d005      	beq.n	80098b8 <_dtoa_r+0x878>
 80098ac:	45b9      	cmp	r9, r7
 80098ae:	d003      	beq.n	80098b8 <_dtoa_r+0x878>
 80098b0:	4649      	mov	r1, r9
 80098b2:	4630      	mov	r0, r6
 80098b4:	f000 f990 	bl	8009bd8 <_Bfree>
 80098b8:	4639      	mov	r1, r7
 80098ba:	4630      	mov	r0, r6
 80098bc:	f000 f98c 	bl	8009bd8 <_Bfree>
 80098c0:	e699      	b.n	80095f6 <_dtoa_r+0x5b6>
 80098c2:	2400      	movs	r4, #0
 80098c4:	4627      	mov	r7, r4
 80098c6:	e7e0      	b.n	800988a <_dtoa_r+0x84a>
 80098c8:	46bb      	mov	fp, r7
 80098ca:	4604      	mov	r4, r0
 80098cc:	4607      	mov	r7, r0
 80098ce:	e5c7      	b.n	8009460 <_dtoa_r+0x420>
 80098d0:	9b07      	ldr	r3, [sp, #28]
 80098d2:	46ca      	mov	sl, r9
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 8100 	beq.w	8009ada <_dtoa_r+0xa9a>
 80098da:	f1b8 0f00 	cmp.w	r8, #0
 80098de:	dd05      	ble.n	80098ec <_dtoa_r+0x8ac>
 80098e0:	4639      	mov	r1, r7
 80098e2:	4642      	mov	r2, r8
 80098e4:	4630      	mov	r0, r6
 80098e6:	f000 fb49 	bl	8009f7c <__lshift>
 80098ea:	4607      	mov	r7, r0
 80098ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d05d      	beq.n	80099ae <_dtoa_r+0x96e>
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	4630      	mov	r0, r6
 80098f6:	f000 f92f 	bl	8009b58 <_Balloc>
 80098fa:	4680      	mov	r8, r0
 80098fc:	b928      	cbnz	r0, 800990a <_dtoa_r+0x8ca>
 80098fe:	4b82      	ldr	r3, [pc, #520]	; (8009b08 <_dtoa_r+0xac8>)
 8009900:	4602      	mov	r2, r0
 8009902:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009906:	f7ff bbb0 	b.w	800906a <_dtoa_r+0x2a>
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	3202      	adds	r2, #2
 800990e:	0092      	lsls	r2, r2, #2
 8009910:	f107 010c 	add.w	r1, r7, #12
 8009914:	300c      	adds	r0, #12
 8009916:	f7fe fd3b 	bl	8008390 <memcpy>
 800991a:	2201      	movs	r2, #1
 800991c:	4641      	mov	r1, r8
 800991e:	4630      	mov	r0, r6
 8009920:	f000 fb2c 	bl	8009f7c <__lshift>
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	3301      	adds	r3, #1
 8009928:	9305      	str	r3, [sp, #20]
 800992a:	9b04      	ldr	r3, [sp, #16]
 800992c:	4453      	add	r3, sl
 800992e:	9308      	str	r3, [sp, #32]
 8009930:	9b02      	ldr	r3, [sp, #8]
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	46b9      	mov	r9, r7
 8009938:	9307      	str	r3, [sp, #28]
 800993a:	4607      	mov	r7, r0
 800993c:	9b05      	ldr	r3, [sp, #20]
 800993e:	4621      	mov	r1, r4
 8009940:	3b01      	subs	r3, #1
 8009942:	4628      	mov	r0, r5
 8009944:	9302      	str	r3, [sp, #8]
 8009946:	f7ff faef 	bl	8008f28 <quorem>
 800994a:	4603      	mov	r3, r0
 800994c:	3330      	adds	r3, #48	; 0x30
 800994e:	9006      	str	r0, [sp, #24]
 8009950:	4649      	mov	r1, r9
 8009952:	4628      	mov	r0, r5
 8009954:	9309      	str	r3, [sp, #36]	; 0x24
 8009956:	f000 fb81 	bl	800a05c <__mcmp>
 800995a:	463a      	mov	r2, r7
 800995c:	4682      	mov	sl, r0
 800995e:	4621      	mov	r1, r4
 8009960:	4630      	mov	r0, r6
 8009962:	f000 fb97 	bl	800a094 <__mdiff>
 8009966:	68c2      	ldr	r2, [r0, #12]
 8009968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996a:	4680      	mov	r8, r0
 800996c:	bb0a      	cbnz	r2, 80099b2 <_dtoa_r+0x972>
 800996e:	4601      	mov	r1, r0
 8009970:	4628      	mov	r0, r5
 8009972:	f000 fb73 	bl	800a05c <__mcmp>
 8009976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009978:	4602      	mov	r2, r0
 800997a:	4641      	mov	r1, r8
 800997c:	4630      	mov	r0, r6
 800997e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009982:	f000 f929 	bl	8009bd8 <_Bfree>
 8009986:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800998a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800998e:	ea43 0102 	orr.w	r1, r3, r2
 8009992:	9b07      	ldr	r3, [sp, #28]
 8009994:	430b      	orrs	r3, r1
 8009996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009998:	d10d      	bne.n	80099b6 <_dtoa_r+0x976>
 800999a:	2b39      	cmp	r3, #57	; 0x39
 800999c:	d029      	beq.n	80099f2 <_dtoa_r+0x9b2>
 800999e:	f1ba 0f00 	cmp.w	sl, #0
 80099a2:	dd01      	ble.n	80099a8 <_dtoa_r+0x968>
 80099a4:	9b06      	ldr	r3, [sp, #24]
 80099a6:	3331      	adds	r3, #49	; 0x31
 80099a8:	9a02      	ldr	r2, [sp, #8]
 80099aa:	7013      	strb	r3, [r2, #0]
 80099ac:	e774      	b.n	8009898 <_dtoa_r+0x858>
 80099ae:	4638      	mov	r0, r7
 80099b0:	e7b8      	b.n	8009924 <_dtoa_r+0x8e4>
 80099b2:	2201      	movs	r2, #1
 80099b4:	e7e1      	b.n	800997a <_dtoa_r+0x93a>
 80099b6:	f1ba 0f00 	cmp.w	sl, #0
 80099ba:	db06      	blt.n	80099ca <_dtoa_r+0x98a>
 80099bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80099be:	ea41 0a0a 	orr.w	sl, r1, sl
 80099c2:	9907      	ldr	r1, [sp, #28]
 80099c4:	ea5a 0101 	orrs.w	r1, sl, r1
 80099c8:	d120      	bne.n	8009a0c <_dtoa_r+0x9cc>
 80099ca:	2a00      	cmp	r2, #0
 80099cc:	ddec      	ble.n	80099a8 <_dtoa_r+0x968>
 80099ce:	4629      	mov	r1, r5
 80099d0:	2201      	movs	r2, #1
 80099d2:	4630      	mov	r0, r6
 80099d4:	9305      	str	r3, [sp, #20]
 80099d6:	f000 fad1 	bl	8009f7c <__lshift>
 80099da:	4621      	mov	r1, r4
 80099dc:	4605      	mov	r5, r0
 80099de:	f000 fb3d 	bl	800a05c <__mcmp>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	9b05      	ldr	r3, [sp, #20]
 80099e6:	dc02      	bgt.n	80099ee <_dtoa_r+0x9ae>
 80099e8:	d1de      	bne.n	80099a8 <_dtoa_r+0x968>
 80099ea:	07da      	lsls	r2, r3, #31
 80099ec:	d5dc      	bpl.n	80099a8 <_dtoa_r+0x968>
 80099ee:	2b39      	cmp	r3, #57	; 0x39
 80099f0:	d1d8      	bne.n	80099a4 <_dtoa_r+0x964>
 80099f2:	9a02      	ldr	r2, [sp, #8]
 80099f4:	2339      	movs	r3, #57	; 0x39
 80099f6:	7013      	strb	r3, [r2, #0]
 80099f8:	4643      	mov	r3, r8
 80099fa:	4698      	mov	r8, r3
 80099fc:	3b01      	subs	r3, #1
 80099fe:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009a02:	2a39      	cmp	r2, #57	; 0x39
 8009a04:	d051      	beq.n	8009aaa <_dtoa_r+0xa6a>
 8009a06:	3201      	adds	r2, #1
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	e745      	b.n	8009898 <_dtoa_r+0x858>
 8009a0c:	2a00      	cmp	r2, #0
 8009a0e:	dd03      	ble.n	8009a18 <_dtoa_r+0x9d8>
 8009a10:	2b39      	cmp	r3, #57	; 0x39
 8009a12:	d0ee      	beq.n	80099f2 <_dtoa_r+0x9b2>
 8009a14:	3301      	adds	r3, #1
 8009a16:	e7c7      	b.n	80099a8 <_dtoa_r+0x968>
 8009a18:	9a05      	ldr	r2, [sp, #20]
 8009a1a:	9908      	ldr	r1, [sp, #32]
 8009a1c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a20:	428a      	cmp	r2, r1
 8009a22:	d02b      	beq.n	8009a7c <_dtoa_r+0xa3c>
 8009a24:	4629      	mov	r1, r5
 8009a26:	2300      	movs	r3, #0
 8009a28:	220a      	movs	r2, #10
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f000 f8f6 	bl	8009c1c <__multadd>
 8009a30:	45b9      	cmp	r9, r7
 8009a32:	4605      	mov	r5, r0
 8009a34:	f04f 0300 	mov.w	r3, #0
 8009a38:	f04f 020a 	mov.w	r2, #10
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	4630      	mov	r0, r6
 8009a40:	d107      	bne.n	8009a52 <_dtoa_r+0xa12>
 8009a42:	f000 f8eb 	bl	8009c1c <__multadd>
 8009a46:	4681      	mov	r9, r0
 8009a48:	4607      	mov	r7, r0
 8009a4a:	9b05      	ldr	r3, [sp, #20]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	9305      	str	r3, [sp, #20]
 8009a50:	e774      	b.n	800993c <_dtoa_r+0x8fc>
 8009a52:	f000 f8e3 	bl	8009c1c <__multadd>
 8009a56:	4639      	mov	r1, r7
 8009a58:	4681      	mov	r9, r0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	220a      	movs	r2, #10
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f000 f8dc 	bl	8009c1c <__multadd>
 8009a64:	4607      	mov	r7, r0
 8009a66:	e7f0      	b.n	8009a4a <_dtoa_r+0xa0a>
 8009a68:	f1ba 0f00 	cmp.w	sl, #0
 8009a6c:	9a04      	ldr	r2, [sp, #16]
 8009a6e:	bfcc      	ite	gt
 8009a70:	46d0      	movgt	r8, sl
 8009a72:	f04f 0801 	movle.w	r8, #1
 8009a76:	4490      	add	r8, r2
 8009a78:	f04f 0900 	mov.w	r9, #0
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	2201      	movs	r2, #1
 8009a80:	4630      	mov	r0, r6
 8009a82:	9302      	str	r3, [sp, #8]
 8009a84:	f000 fa7a 	bl	8009f7c <__lshift>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	f000 fae6 	bl	800a05c <__mcmp>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	dcb1      	bgt.n	80099f8 <_dtoa_r+0x9b8>
 8009a94:	d102      	bne.n	8009a9c <_dtoa_r+0xa5c>
 8009a96:	9b02      	ldr	r3, [sp, #8]
 8009a98:	07db      	lsls	r3, r3, #31
 8009a9a:	d4ad      	bmi.n	80099f8 <_dtoa_r+0x9b8>
 8009a9c:	4643      	mov	r3, r8
 8009a9e:	4698      	mov	r8, r3
 8009aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009aa4:	2a30      	cmp	r2, #48	; 0x30
 8009aa6:	d0fa      	beq.n	8009a9e <_dtoa_r+0xa5e>
 8009aa8:	e6f6      	b.n	8009898 <_dtoa_r+0x858>
 8009aaa:	9a04      	ldr	r2, [sp, #16]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d1a4      	bne.n	80099fa <_dtoa_r+0x9ba>
 8009ab0:	f10b 0b01 	add.w	fp, fp, #1
 8009ab4:	2331      	movs	r3, #49	; 0x31
 8009ab6:	e778      	b.n	80099aa <_dtoa_r+0x96a>
 8009ab8:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <_dtoa_r+0xacc>)
 8009aba:	f7ff bb28 	b.w	800910e <_dtoa_r+0xce>
 8009abe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f47f ab04 	bne.w	80090ce <_dtoa_r+0x8e>
 8009ac6:	4b12      	ldr	r3, [pc, #72]	; (8009b10 <_dtoa_r+0xad0>)
 8009ac8:	f7ff bb21 	b.w	800910e <_dtoa_r+0xce>
 8009acc:	f1ba 0f00 	cmp.w	sl, #0
 8009ad0:	dc03      	bgt.n	8009ada <_dtoa_r+0xa9a>
 8009ad2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	f73f aec7 	bgt.w	8009868 <_dtoa_r+0x828>
 8009ada:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f7ff fa21 	bl	8008f28 <quorem>
 8009ae6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009aea:	f808 3b01 	strb.w	r3, [r8], #1
 8009aee:	9a04      	ldr	r2, [sp, #16]
 8009af0:	eba8 0202 	sub.w	r2, r8, r2
 8009af4:	4592      	cmp	sl, r2
 8009af6:	ddb7      	ble.n	8009a68 <_dtoa_r+0xa28>
 8009af8:	4629      	mov	r1, r5
 8009afa:	2300      	movs	r3, #0
 8009afc:	220a      	movs	r2, #10
 8009afe:	4630      	mov	r0, r6
 8009b00:	f000 f88c 	bl	8009c1c <__multadd>
 8009b04:	4605      	mov	r5, r0
 8009b06:	e7ea      	b.n	8009ade <_dtoa_r+0xa9e>
 8009b08:	0800b81f 	.word	0x0800b81f
 8009b0c:	0800b77c 	.word	0x0800b77c
 8009b10:	0800b7a0 	.word	0x0800b7a0

08009b14 <_localeconv_r>:
 8009b14:	4800      	ldr	r0, [pc, #0]	; (8009b18 <_localeconv_r+0x4>)
 8009b16:	4770      	bx	lr
 8009b18:	20000164 	.word	0x20000164

08009b1c <_lseek_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d07      	ldr	r5, [pc, #28]	; (8009b3c <_lseek_r+0x20>)
 8009b20:	4604      	mov	r4, r0
 8009b22:	4608      	mov	r0, r1
 8009b24:	4611      	mov	r1, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	602a      	str	r2, [r5, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f7fe fac8 	bl	80080c0 <_lseek>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_lseek_r+0x1e>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_lseek_r+0x1e>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20000bbc 	.word	0x20000bbc

08009b40 <__malloc_lock>:
 8009b40:	4801      	ldr	r0, [pc, #4]	; (8009b48 <__malloc_lock+0x8>)
 8009b42:	f000 bd85 	b.w	800a650 <__retarget_lock_acquire_recursive>
 8009b46:	bf00      	nop
 8009b48:	20000bc0 	.word	0x20000bc0

08009b4c <__malloc_unlock>:
 8009b4c:	4801      	ldr	r0, [pc, #4]	; (8009b54 <__malloc_unlock+0x8>)
 8009b4e:	f000 bd80 	b.w	800a652 <__retarget_lock_release_recursive>
 8009b52:	bf00      	nop
 8009b54:	20000bc0 	.word	0x20000bc0

08009b58 <_Balloc>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	460d      	mov	r5, r1
 8009b60:	b976      	cbnz	r6, 8009b80 <_Balloc+0x28>
 8009b62:	2010      	movs	r0, #16
 8009b64:	f7fe fc04 	bl	8008370 <malloc>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6260      	str	r0, [r4, #36]	; 0x24
 8009b6c:	b920      	cbnz	r0, 8009b78 <_Balloc+0x20>
 8009b6e:	4b18      	ldr	r3, [pc, #96]	; (8009bd0 <_Balloc+0x78>)
 8009b70:	4818      	ldr	r0, [pc, #96]	; (8009bd4 <_Balloc+0x7c>)
 8009b72:	2166      	movs	r1, #102	; 0x66
 8009b74:	f000 fb84 	bl	800a280 <__assert_func>
 8009b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b7c:	6006      	str	r6, [r0, #0]
 8009b7e:	60c6      	str	r6, [r0, #12]
 8009b80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b82:	68f3      	ldr	r3, [r6, #12]
 8009b84:	b183      	cbz	r3, 8009ba8 <_Balloc+0x50>
 8009b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b8e:	b9b8      	cbnz	r0, 8009bc0 <_Balloc+0x68>
 8009b90:	2101      	movs	r1, #1
 8009b92:	fa01 f605 	lsl.w	r6, r1, r5
 8009b96:	1d72      	adds	r2, r6, #5
 8009b98:	0092      	lsls	r2, r2, #2
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7fe fc0e 	bl	80083bc <_calloc_r>
 8009ba0:	b160      	cbz	r0, 8009bbc <_Balloc+0x64>
 8009ba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ba6:	e00e      	b.n	8009bc6 <_Balloc+0x6e>
 8009ba8:	2221      	movs	r2, #33	; 0x21
 8009baa:	2104      	movs	r1, #4
 8009bac:	4620      	mov	r0, r4
 8009bae:	f7fe fc05 	bl	80083bc <_calloc_r>
 8009bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bb4:	60f0      	str	r0, [r6, #12]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e4      	bne.n	8009b86 <_Balloc+0x2e>
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
 8009bc0:	6802      	ldr	r2, [r0, #0]
 8009bc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bcc:	e7f7      	b.n	8009bbe <_Balloc+0x66>
 8009bce:	bf00      	nop
 8009bd0:	0800b7ad 	.word	0x0800b7ad
 8009bd4:	0800b830 	.word	0x0800b830

08009bd8 <_Bfree>:
 8009bd8:	b570      	push	{r4, r5, r6, lr}
 8009bda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bdc:	4605      	mov	r5, r0
 8009bde:	460c      	mov	r4, r1
 8009be0:	b976      	cbnz	r6, 8009c00 <_Bfree+0x28>
 8009be2:	2010      	movs	r0, #16
 8009be4:	f7fe fbc4 	bl	8008370 <malloc>
 8009be8:	4602      	mov	r2, r0
 8009bea:	6268      	str	r0, [r5, #36]	; 0x24
 8009bec:	b920      	cbnz	r0, 8009bf8 <_Bfree+0x20>
 8009bee:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <_Bfree+0x3c>)
 8009bf0:	4809      	ldr	r0, [pc, #36]	; (8009c18 <_Bfree+0x40>)
 8009bf2:	218a      	movs	r1, #138	; 0x8a
 8009bf4:	f000 fb44 	bl	800a280 <__assert_func>
 8009bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bfc:	6006      	str	r6, [r0, #0]
 8009bfe:	60c6      	str	r6, [r0, #12]
 8009c00:	b13c      	cbz	r4, 8009c12 <_Bfree+0x3a>
 8009c02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c04:	6862      	ldr	r2, [r4, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c0c:	6021      	str	r1, [r4, #0]
 8009c0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	0800b7ad 	.word	0x0800b7ad
 8009c18:	0800b830 	.word	0x0800b830

08009c1c <__multadd>:
 8009c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c20:	690d      	ldr	r5, [r1, #16]
 8009c22:	4607      	mov	r7, r0
 8009c24:	460c      	mov	r4, r1
 8009c26:	461e      	mov	r6, r3
 8009c28:	f101 0c14 	add.w	ip, r1, #20
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f8dc 3000 	ldr.w	r3, [ip]
 8009c32:	b299      	uxth	r1, r3
 8009c34:	fb02 6101 	mla	r1, r2, r1, r6
 8009c38:	0c1e      	lsrs	r6, r3, #16
 8009c3a:	0c0b      	lsrs	r3, r1, #16
 8009c3c:	fb02 3306 	mla	r3, r2, r6, r3
 8009c40:	b289      	uxth	r1, r1
 8009c42:	3001      	adds	r0, #1
 8009c44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c48:	4285      	cmp	r5, r0
 8009c4a:	f84c 1b04 	str.w	r1, [ip], #4
 8009c4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c52:	dcec      	bgt.n	8009c2e <__multadd+0x12>
 8009c54:	b30e      	cbz	r6, 8009c9a <__multadd+0x7e>
 8009c56:	68a3      	ldr	r3, [r4, #8]
 8009c58:	42ab      	cmp	r3, r5
 8009c5a:	dc19      	bgt.n	8009c90 <__multadd+0x74>
 8009c5c:	6861      	ldr	r1, [r4, #4]
 8009c5e:	4638      	mov	r0, r7
 8009c60:	3101      	adds	r1, #1
 8009c62:	f7ff ff79 	bl	8009b58 <_Balloc>
 8009c66:	4680      	mov	r8, r0
 8009c68:	b928      	cbnz	r0, 8009c76 <__multadd+0x5a>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <__multadd+0x84>)
 8009c6e:	480d      	ldr	r0, [pc, #52]	; (8009ca4 <__multadd+0x88>)
 8009c70:	21b5      	movs	r1, #181	; 0xb5
 8009c72:	f000 fb05 	bl	800a280 <__assert_func>
 8009c76:	6922      	ldr	r2, [r4, #16]
 8009c78:	3202      	adds	r2, #2
 8009c7a:	f104 010c 	add.w	r1, r4, #12
 8009c7e:	0092      	lsls	r2, r2, #2
 8009c80:	300c      	adds	r0, #12
 8009c82:	f7fe fb85 	bl	8008390 <memcpy>
 8009c86:	4621      	mov	r1, r4
 8009c88:	4638      	mov	r0, r7
 8009c8a:	f7ff ffa5 	bl	8009bd8 <_Bfree>
 8009c8e:	4644      	mov	r4, r8
 8009c90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c94:	3501      	adds	r5, #1
 8009c96:	615e      	str	r6, [r3, #20]
 8009c98:	6125      	str	r5, [r4, #16]
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca0:	0800b81f 	.word	0x0800b81f
 8009ca4:	0800b830 	.word	0x0800b830

08009ca8 <__hi0bits>:
 8009ca8:	0c03      	lsrs	r3, r0, #16
 8009caa:	041b      	lsls	r3, r3, #16
 8009cac:	b9d3      	cbnz	r3, 8009ce4 <__hi0bits+0x3c>
 8009cae:	0400      	lsls	r0, r0, #16
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cb6:	bf04      	itt	eq
 8009cb8:	0200      	lsleq	r0, r0, #8
 8009cba:	3308      	addeq	r3, #8
 8009cbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009cc0:	bf04      	itt	eq
 8009cc2:	0100      	lsleq	r0, r0, #4
 8009cc4:	3304      	addeq	r3, #4
 8009cc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009cca:	bf04      	itt	eq
 8009ccc:	0080      	lsleq	r0, r0, #2
 8009cce:	3302      	addeq	r3, #2
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	db05      	blt.n	8009ce0 <__hi0bits+0x38>
 8009cd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009cd8:	f103 0301 	add.w	r3, r3, #1
 8009cdc:	bf08      	it	eq
 8009cde:	2320      	moveq	r3, #32
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	4770      	bx	lr
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	e7e4      	b.n	8009cb2 <__hi0bits+0xa>

08009ce8 <__lo0bits>:
 8009ce8:	6803      	ldr	r3, [r0, #0]
 8009cea:	f013 0207 	ands.w	r2, r3, #7
 8009cee:	4601      	mov	r1, r0
 8009cf0:	d00b      	beq.n	8009d0a <__lo0bits+0x22>
 8009cf2:	07da      	lsls	r2, r3, #31
 8009cf4:	d423      	bmi.n	8009d3e <__lo0bits+0x56>
 8009cf6:	0798      	lsls	r0, r3, #30
 8009cf8:	bf49      	itett	mi
 8009cfa:	085b      	lsrmi	r3, r3, #1
 8009cfc:	089b      	lsrpl	r3, r3, #2
 8009cfe:	2001      	movmi	r0, #1
 8009d00:	600b      	strmi	r3, [r1, #0]
 8009d02:	bf5c      	itt	pl
 8009d04:	600b      	strpl	r3, [r1, #0]
 8009d06:	2002      	movpl	r0, #2
 8009d08:	4770      	bx	lr
 8009d0a:	b298      	uxth	r0, r3
 8009d0c:	b9a8      	cbnz	r0, 8009d3a <__lo0bits+0x52>
 8009d0e:	0c1b      	lsrs	r3, r3, #16
 8009d10:	2010      	movs	r0, #16
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	b90a      	cbnz	r2, 8009d1a <__lo0bits+0x32>
 8009d16:	3008      	adds	r0, #8
 8009d18:	0a1b      	lsrs	r3, r3, #8
 8009d1a:	071a      	lsls	r2, r3, #28
 8009d1c:	bf04      	itt	eq
 8009d1e:	091b      	lsreq	r3, r3, #4
 8009d20:	3004      	addeq	r0, #4
 8009d22:	079a      	lsls	r2, r3, #30
 8009d24:	bf04      	itt	eq
 8009d26:	089b      	lsreq	r3, r3, #2
 8009d28:	3002      	addeq	r0, #2
 8009d2a:	07da      	lsls	r2, r3, #31
 8009d2c:	d403      	bmi.n	8009d36 <__lo0bits+0x4e>
 8009d2e:	085b      	lsrs	r3, r3, #1
 8009d30:	f100 0001 	add.w	r0, r0, #1
 8009d34:	d005      	beq.n	8009d42 <__lo0bits+0x5a>
 8009d36:	600b      	str	r3, [r1, #0]
 8009d38:	4770      	bx	lr
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	e7e9      	b.n	8009d12 <__lo0bits+0x2a>
 8009d3e:	2000      	movs	r0, #0
 8009d40:	4770      	bx	lr
 8009d42:	2020      	movs	r0, #32
 8009d44:	4770      	bx	lr
	...

08009d48 <__i2b>:
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	f7ff ff03 	bl	8009b58 <_Balloc>
 8009d52:	4602      	mov	r2, r0
 8009d54:	b928      	cbnz	r0, 8009d62 <__i2b+0x1a>
 8009d56:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <__i2b+0x24>)
 8009d58:	4805      	ldr	r0, [pc, #20]	; (8009d70 <__i2b+0x28>)
 8009d5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d5e:	f000 fa8f 	bl	800a280 <__assert_func>
 8009d62:	2301      	movs	r3, #1
 8009d64:	6144      	str	r4, [r0, #20]
 8009d66:	6103      	str	r3, [r0, #16]
 8009d68:	bd10      	pop	{r4, pc}
 8009d6a:	bf00      	nop
 8009d6c:	0800b81f 	.word	0x0800b81f
 8009d70:	0800b830 	.word	0x0800b830

08009d74 <__multiply>:
 8009d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	4691      	mov	r9, r2
 8009d7a:	690a      	ldr	r2, [r1, #16]
 8009d7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	bfb8      	it	lt
 8009d84:	460b      	movlt	r3, r1
 8009d86:	460c      	mov	r4, r1
 8009d88:	bfbc      	itt	lt
 8009d8a:	464c      	movlt	r4, r9
 8009d8c:	4699      	movlt	r9, r3
 8009d8e:	6927      	ldr	r7, [r4, #16]
 8009d90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d94:	68a3      	ldr	r3, [r4, #8]
 8009d96:	6861      	ldr	r1, [r4, #4]
 8009d98:	eb07 060a 	add.w	r6, r7, sl
 8009d9c:	42b3      	cmp	r3, r6
 8009d9e:	b085      	sub	sp, #20
 8009da0:	bfb8      	it	lt
 8009da2:	3101      	addlt	r1, #1
 8009da4:	f7ff fed8 	bl	8009b58 <_Balloc>
 8009da8:	b930      	cbnz	r0, 8009db8 <__multiply+0x44>
 8009daa:	4602      	mov	r2, r0
 8009dac:	4b44      	ldr	r3, [pc, #272]	; (8009ec0 <__multiply+0x14c>)
 8009dae:	4845      	ldr	r0, [pc, #276]	; (8009ec4 <__multiply+0x150>)
 8009db0:	f240 115d 	movw	r1, #349	; 0x15d
 8009db4:	f000 fa64 	bl	800a280 <__assert_func>
 8009db8:	f100 0514 	add.w	r5, r0, #20
 8009dbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009dc0:	462b      	mov	r3, r5
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	4543      	cmp	r3, r8
 8009dc6:	d321      	bcc.n	8009e0c <__multiply+0x98>
 8009dc8:	f104 0314 	add.w	r3, r4, #20
 8009dcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009dd0:	f109 0314 	add.w	r3, r9, #20
 8009dd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009dd8:	9202      	str	r2, [sp, #8]
 8009dda:	1b3a      	subs	r2, r7, r4
 8009ddc:	3a15      	subs	r2, #21
 8009dde:	f022 0203 	bic.w	r2, r2, #3
 8009de2:	3204      	adds	r2, #4
 8009de4:	f104 0115 	add.w	r1, r4, #21
 8009de8:	428f      	cmp	r7, r1
 8009dea:	bf38      	it	cc
 8009dec:	2204      	movcc	r2, #4
 8009dee:	9201      	str	r2, [sp, #4]
 8009df0:	9a02      	ldr	r2, [sp, #8]
 8009df2:	9303      	str	r3, [sp, #12]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d80c      	bhi.n	8009e12 <__multiply+0x9e>
 8009df8:	2e00      	cmp	r6, #0
 8009dfa:	dd03      	ble.n	8009e04 <__multiply+0x90>
 8009dfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d05a      	beq.n	8009eba <__multiply+0x146>
 8009e04:	6106      	str	r6, [r0, #16]
 8009e06:	b005      	add	sp, #20
 8009e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0c:	f843 2b04 	str.w	r2, [r3], #4
 8009e10:	e7d8      	b.n	8009dc4 <__multiply+0x50>
 8009e12:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e16:	f1ba 0f00 	cmp.w	sl, #0
 8009e1a:	d024      	beq.n	8009e66 <__multiply+0xf2>
 8009e1c:	f104 0e14 	add.w	lr, r4, #20
 8009e20:	46a9      	mov	r9, r5
 8009e22:	f04f 0c00 	mov.w	ip, #0
 8009e26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e2a:	f8d9 1000 	ldr.w	r1, [r9]
 8009e2e:	fa1f fb82 	uxth.w	fp, r2
 8009e32:	b289      	uxth	r1, r1
 8009e34:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e40:	4461      	add	r1, ip
 8009e42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e46:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e4e:	b289      	uxth	r1, r1
 8009e50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e54:	4577      	cmp	r7, lr
 8009e56:	f849 1b04 	str.w	r1, [r9], #4
 8009e5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e5e:	d8e2      	bhi.n	8009e26 <__multiply+0xb2>
 8009e60:	9a01      	ldr	r2, [sp, #4]
 8009e62:	f845 c002 	str.w	ip, [r5, r2]
 8009e66:	9a03      	ldr	r2, [sp, #12]
 8009e68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	f1b9 0f00 	cmp.w	r9, #0
 8009e72:	d020      	beq.n	8009eb6 <__multiply+0x142>
 8009e74:	6829      	ldr	r1, [r5, #0]
 8009e76:	f104 0c14 	add.w	ip, r4, #20
 8009e7a:	46ae      	mov	lr, r5
 8009e7c:	f04f 0a00 	mov.w	sl, #0
 8009e80:	f8bc b000 	ldrh.w	fp, [ip]
 8009e84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e88:	fb09 220b 	mla	r2, r9, fp, r2
 8009e8c:	4492      	add	sl, r2
 8009e8e:	b289      	uxth	r1, r1
 8009e90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e94:	f84e 1b04 	str.w	r1, [lr], #4
 8009e98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e9c:	f8be 1000 	ldrh.w	r1, [lr]
 8009ea0:	0c12      	lsrs	r2, r2, #16
 8009ea2:	fb09 1102 	mla	r1, r9, r2, r1
 8009ea6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009eaa:	4567      	cmp	r7, ip
 8009eac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009eb0:	d8e6      	bhi.n	8009e80 <__multiply+0x10c>
 8009eb2:	9a01      	ldr	r2, [sp, #4]
 8009eb4:	50a9      	str	r1, [r5, r2]
 8009eb6:	3504      	adds	r5, #4
 8009eb8:	e79a      	b.n	8009df0 <__multiply+0x7c>
 8009eba:	3e01      	subs	r6, #1
 8009ebc:	e79c      	b.n	8009df8 <__multiply+0x84>
 8009ebe:	bf00      	nop
 8009ec0:	0800b81f 	.word	0x0800b81f
 8009ec4:	0800b830 	.word	0x0800b830

08009ec8 <__pow5mult>:
 8009ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ecc:	4615      	mov	r5, r2
 8009ece:	f012 0203 	ands.w	r2, r2, #3
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	460f      	mov	r7, r1
 8009ed6:	d007      	beq.n	8009ee8 <__pow5mult+0x20>
 8009ed8:	4c25      	ldr	r4, [pc, #148]	; (8009f70 <__pow5mult+0xa8>)
 8009eda:	3a01      	subs	r2, #1
 8009edc:	2300      	movs	r3, #0
 8009ede:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ee2:	f7ff fe9b 	bl	8009c1c <__multadd>
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	10ad      	asrs	r5, r5, #2
 8009eea:	d03d      	beq.n	8009f68 <__pow5mult+0xa0>
 8009eec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009eee:	b97c      	cbnz	r4, 8009f10 <__pow5mult+0x48>
 8009ef0:	2010      	movs	r0, #16
 8009ef2:	f7fe fa3d 	bl	8008370 <malloc>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	6270      	str	r0, [r6, #36]	; 0x24
 8009efa:	b928      	cbnz	r0, 8009f08 <__pow5mult+0x40>
 8009efc:	4b1d      	ldr	r3, [pc, #116]	; (8009f74 <__pow5mult+0xac>)
 8009efe:	481e      	ldr	r0, [pc, #120]	; (8009f78 <__pow5mult+0xb0>)
 8009f00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f04:	f000 f9bc 	bl	800a280 <__assert_func>
 8009f08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f0c:	6004      	str	r4, [r0, #0]
 8009f0e:	60c4      	str	r4, [r0, #12]
 8009f10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f18:	b94c      	cbnz	r4, 8009f2e <__pow5mult+0x66>
 8009f1a:	f240 2171 	movw	r1, #625	; 0x271
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f7ff ff12 	bl	8009d48 <__i2b>
 8009f24:	2300      	movs	r3, #0
 8009f26:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	6003      	str	r3, [r0, #0]
 8009f2e:	f04f 0900 	mov.w	r9, #0
 8009f32:	07eb      	lsls	r3, r5, #31
 8009f34:	d50a      	bpl.n	8009f4c <__pow5mult+0x84>
 8009f36:	4639      	mov	r1, r7
 8009f38:	4622      	mov	r2, r4
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f7ff ff1a 	bl	8009d74 <__multiply>
 8009f40:	4639      	mov	r1, r7
 8009f42:	4680      	mov	r8, r0
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff fe47 	bl	8009bd8 <_Bfree>
 8009f4a:	4647      	mov	r7, r8
 8009f4c:	106d      	asrs	r5, r5, #1
 8009f4e:	d00b      	beq.n	8009f68 <__pow5mult+0xa0>
 8009f50:	6820      	ldr	r0, [r4, #0]
 8009f52:	b938      	cbnz	r0, 8009f64 <__pow5mult+0x9c>
 8009f54:	4622      	mov	r2, r4
 8009f56:	4621      	mov	r1, r4
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7ff ff0b 	bl	8009d74 <__multiply>
 8009f5e:	6020      	str	r0, [r4, #0]
 8009f60:	f8c0 9000 	str.w	r9, [r0]
 8009f64:	4604      	mov	r4, r0
 8009f66:	e7e4      	b.n	8009f32 <__pow5mult+0x6a>
 8009f68:	4638      	mov	r0, r7
 8009f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f6e:	bf00      	nop
 8009f70:	0800b980 	.word	0x0800b980
 8009f74:	0800b7ad 	.word	0x0800b7ad
 8009f78:	0800b830 	.word	0x0800b830

08009f7c <__lshift>:
 8009f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f80:	460c      	mov	r4, r1
 8009f82:	6849      	ldr	r1, [r1, #4]
 8009f84:	6923      	ldr	r3, [r4, #16]
 8009f86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f8a:	68a3      	ldr	r3, [r4, #8]
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	4691      	mov	r9, r2
 8009f90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f94:	f108 0601 	add.w	r6, r8, #1
 8009f98:	42b3      	cmp	r3, r6
 8009f9a:	db0b      	blt.n	8009fb4 <__lshift+0x38>
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f7ff fddb 	bl	8009b58 <_Balloc>
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	b948      	cbnz	r0, 8009fba <__lshift+0x3e>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	4b2a      	ldr	r3, [pc, #168]	; (800a054 <__lshift+0xd8>)
 8009faa:	482b      	ldr	r0, [pc, #172]	; (800a058 <__lshift+0xdc>)
 8009fac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009fb0:	f000 f966 	bl	800a280 <__assert_func>
 8009fb4:	3101      	adds	r1, #1
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	e7ee      	b.n	8009f98 <__lshift+0x1c>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f100 0114 	add.w	r1, r0, #20
 8009fc0:	f100 0210 	add.w	r2, r0, #16
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	4553      	cmp	r3, sl
 8009fc8:	db37      	blt.n	800a03a <__lshift+0xbe>
 8009fca:	6920      	ldr	r0, [r4, #16]
 8009fcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fd0:	f104 0314 	add.w	r3, r4, #20
 8009fd4:	f019 091f 	ands.w	r9, r9, #31
 8009fd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fdc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fe0:	d02f      	beq.n	800a042 <__lshift+0xc6>
 8009fe2:	f1c9 0e20 	rsb	lr, r9, #32
 8009fe6:	468a      	mov	sl, r1
 8009fe8:	f04f 0c00 	mov.w	ip, #0
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	fa02 f209 	lsl.w	r2, r2, r9
 8009ff2:	ea42 020c 	orr.w	r2, r2, ip
 8009ff6:	f84a 2b04 	str.w	r2, [sl], #4
 8009ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffe:	4298      	cmp	r0, r3
 800a000:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a004:	d8f2      	bhi.n	8009fec <__lshift+0x70>
 800a006:	1b03      	subs	r3, r0, r4
 800a008:	3b15      	subs	r3, #21
 800a00a:	f023 0303 	bic.w	r3, r3, #3
 800a00e:	3304      	adds	r3, #4
 800a010:	f104 0215 	add.w	r2, r4, #21
 800a014:	4290      	cmp	r0, r2
 800a016:	bf38      	it	cc
 800a018:	2304      	movcc	r3, #4
 800a01a:	f841 c003 	str.w	ip, [r1, r3]
 800a01e:	f1bc 0f00 	cmp.w	ip, #0
 800a022:	d001      	beq.n	800a028 <__lshift+0xac>
 800a024:	f108 0602 	add.w	r6, r8, #2
 800a028:	3e01      	subs	r6, #1
 800a02a:	4638      	mov	r0, r7
 800a02c:	612e      	str	r6, [r5, #16]
 800a02e:	4621      	mov	r1, r4
 800a030:	f7ff fdd2 	bl	8009bd8 <_Bfree>
 800a034:	4628      	mov	r0, r5
 800a036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a03e:	3301      	adds	r3, #1
 800a040:	e7c1      	b.n	8009fc6 <__lshift+0x4a>
 800a042:	3904      	subs	r1, #4
 800a044:	f853 2b04 	ldr.w	r2, [r3], #4
 800a048:	f841 2f04 	str.w	r2, [r1, #4]!
 800a04c:	4298      	cmp	r0, r3
 800a04e:	d8f9      	bhi.n	800a044 <__lshift+0xc8>
 800a050:	e7ea      	b.n	800a028 <__lshift+0xac>
 800a052:	bf00      	nop
 800a054:	0800b81f 	.word	0x0800b81f
 800a058:	0800b830 	.word	0x0800b830

0800a05c <__mcmp>:
 800a05c:	b530      	push	{r4, r5, lr}
 800a05e:	6902      	ldr	r2, [r0, #16]
 800a060:	690c      	ldr	r4, [r1, #16]
 800a062:	1b12      	subs	r2, r2, r4
 800a064:	d10e      	bne.n	800a084 <__mcmp+0x28>
 800a066:	f100 0314 	add.w	r3, r0, #20
 800a06a:	3114      	adds	r1, #20
 800a06c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a070:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a074:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a078:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a07c:	42a5      	cmp	r5, r4
 800a07e:	d003      	beq.n	800a088 <__mcmp+0x2c>
 800a080:	d305      	bcc.n	800a08e <__mcmp+0x32>
 800a082:	2201      	movs	r2, #1
 800a084:	4610      	mov	r0, r2
 800a086:	bd30      	pop	{r4, r5, pc}
 800a088:	4283      	cmp	r3, r0
 800a08a:	d3f3      	bcc.n	800a074 <__mcmp+0x18>
 800a08c:	e7fa      	b.n	800a084 <__mcmp+0x28>
 800a08e:	f04f 32ff 	mov.w	r2, #4294967295
 800a092:	e7f7      	b.n	800a084 <__mcmp+0x28>

0800a094 <__mdiff>:
 800a094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	460c      	mov	r4, r1
 800a09a:	4606      	mov	r6, r0
 800a09c:	4611      	mov	r1, r2
 800a09e:	4620      	mov	r0, r4
 800a0a0:	4690      	mov	r8, r2
 800a0a2:	f7ff ffdb 	bl	800a05c <__mcmp>
 800a0a6:	1e05      	subs	r5, r0, #0
 800a0a8:	d110      	bne.n	800a0cc <__mdiff+0x38>
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7ff fd53 	bl	8009b58 <_Balloc>
 800a0b2:	b930      	cbnz	r0, 800a0c2 <__mdiff+0x2e>
 800a0b4:	4b3a      	ldr	r3, [pc, #232]	; (800a1a0 <__mdiff+0x10c>)
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	f240 2132 	movw	r1, #562	; 0x232
 800a0bc:	4839      	ldr	r0, [pc, #228]	; (800a1a4 <__mdiff+0x110>)
 800a0be:	f000 f8df 	bl	800a280 <__assert_func>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0cc:	bfa4      	itt	ge
 800a0ce:	4643      	movge	r3, r8
 800a0d0:	46a0      	movge	r8, r4
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a0d8:	bfa6      	itte	ge
 800a0da:	461c      	movge	r4, r3
 800a0dc:	2500      	movge	r5, #0
 800a0de:	2501      	movlt	r5, #1
 800a0e0:	f7ff fd3a 	bl	8009b58 <_Balloc>
 800a0e4:	b920      	cbnz	r0, 800a0f0 <__mdiff+0x5c>
 800a0e6:	4b2e      	ldr	r3, [pc, #184]	; (800a1a0 <__mdiff+0x10c>)
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a0ee:	e7e5      	b.n	800a0bc <__mdiff+0x28>
 800a0f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0f4:	6926      	ldr	r6, [r4, #16]
 800a0f6:	60c5      	str	r5, [r0, #12]
 800a0f8:	f104 0914 	add.w	r9, r4, #20
 800a0fc:	f108 0514 	add.w	r5, r8, #20
 800a100:	f100 0e14 	add.w	lr, r0, #20
 800a104:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a108:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a10c:	f108 0210 	add.w	r2, r8, #16
 800a110:	46f2      	mov	sl, lr
 800a112:	2100      	movs	r1, #0
 800a114:	f859 3b04 	ldr.w	r3, [r9], #4
 800a118:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a11c:	fa1f f883 	uxth.w	r8, r3
 800a120:	fa11 f18b 	uxtah	r1, r1, fp
 800a124:	0c1b      	lsrs	r3, r3, #16
 800a126:	eba1 0808 	sub.w	r8, r1, r8
 800a12a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a12e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a132:	fa1f f888 	uxth.w	r8, r8
 800a136:	1419      	asrs	r1, r3, #16
 800a138:	454e      	cmp	r6, r9
 800a13a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a13e:	f84a 3b04 	str.w	r3, [sl], #4
 800a142:	d8e7      	bhi.n	800a114 <__mdiff+0x80>
 800a144:	1b33      	subs	r3, r6, r4
 800a146:	3b15      	subs	r3, #21
 800a148:	f023 0303 	bic.w	r3, r3, #3
 800a14c:	3304      	adds	r3, #4
 800a14e:	3415      	adds	r4, #21
 800a150:	42a6      	cmp	r6, r4
 800a152:	bf38      	it	cc
 800a154:	2304      	movcc	r3, #4
 800a156:	441d      	add	r5, r3
 800a158:	4473      	add	r3, lr
 800a15a:	469e      	mov	lr, r3
 800a15c:	462e      	mov	r6, r5
 800a15e:	4566      	cmp	r6, ip
 800a160:	d30e      	bcc.n	800a180 <__mdiff+0xec>
 800a162:	f10c 0203 	add.w	r2, ip, #3
 800a166:	1b52      	subs	r2, r2, r5
 800a168:	f022 0203 	bic.w	r2, r2, #3
 800a16c:	3d03      	subs	r5, #3
 800a16e:	45ac      	cmp	ip, r5
 800a170:	bf38      	it	cc
 800a172:	2200      	movcc	r2, #0
 800a174:	441a      	add	r2, r3
 800a176:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a17a:	b17b      	cbz	r3, 800a19c <__mdiff+0x108>
 800a17c:	6107      	str	r7, [r0, #16]
 800a17e:	e7a3      	b.n	800a0c8 <__mdiff+0x34>
 800a180:	f856 8b04 	ldr.w	r8, [r6], #4
 800a184:	fa11 f288 	uxtah	r2, r1, r8
 800a188:	1414      	asrs	r4, r2, #16
 800a18a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a18e:	b292      	uxth	r2, r2
 800a190:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a194:	f84e 2b04 	str.w	r2, [lr], #4
 800a198:	1421      	asrs	r1, r4, #16
 800a19a:	e7e0      	b.n	800a15e <__mdiff+0xca>
 800a19c:	3f01      	subs	r7, #1
 800a19e:	e7ea      	b.n	800a176 <__mdiff+0xe2>
 800a1a0:	0800b81f 	.word	0x0800b81f
 800a1a4:	0800b830 	.word	0x0800b830

0800a1a8 <__d2b>:
 800a1a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 800a1b2:	4690      	mov	r8, r2
 800a1b4:	4699      	mov	r9, r3
 800a1b6:	f7ff fccf 	bl	8009b58 <_Balloc>
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	b930      	cbnz	r0, 800a1cc <__d2b+0x24>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	4b24      	ldr	r3, [pc, #144]	; (800a254 <__d2b+0xac>)
 800a1c2:	4825      	ldr	r0, [pc, #148]	; (800a258 <__d2b+0xb0>)
 800a1c4:	f240 310a 	movw	r1, #778	; 0x30a
 800a1c8:	f000 f85a 	bl	800a280 <__assert_func>
 800a1cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1d4:	bb2d      	cbnz	r5, 800a222 <__d2b+0x7a>
 800a1d6:	f1b8 0200 	subs.w	r2, r8, #0
 800a1da:	9301      	str	r3, [sp, #4]
 800a1dc:	d026      	beq.n	800a22c <__d2b+0x84>
 800a1de:	4668      	mov	r0, sp
 800a1e0:	9200      	str	r2, [sp, #0]
 800a1e2:	f7ff fd81 	bl	8009ce8 <__lo0bits>
 800a1e6:	9900      	ldr	r1, [sp, #0]
 800a1e8:	b1f0      	cbz	r0, 800a228 <__d2b+0x80>
 800a1ea:	9a01      	ldr	r2, [sp, #4]
 800a1ec:	f1c0 0320 	rsb	r3, r0, #32
 800a1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f4:	430b      	orrs	r3, r1
 800a1f6:	40c2      	lsrs	r2, r0
 800a1f8:	6163      	str	r3, [r4, #20]
 800a1fa:	9201      	str	r2, [sp, #4]
 800a1fc:	9b01      	ldr	r3, [sp, #4]
 800a1fe:	61a3      	str	r3, [r4, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	bf14      	ite	ne
 800a204:	2202      	movne	r2, #2
 800a206:	2201      	moveq	r2, #1
 800a208:	6122      	str	r2, [r4, #16]
 800a20a:	b1c5      	cbz	r5, 800a23e <__d2b+0x96>
 800a20c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a210:	4405      	add	r5, r0
 800a212:	603d      	str	r5, [r7, #0]
 800a214:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a218:	6030      	str	r0, [r6, #0]
 800a21a:	4620      	mov	r0, r4
 800a21c:	b003      	add	sp, #12
 800a21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a226:	e7d6      	b.n	800a1d6 <__d2b+0x2e>
 800a228:	6161      	str	r1, [r4, #20]
 800a22a:	e7e7      	b.n	800a1fc <__d2b+0x54>
 800a22c:	a801      	add	r0, sp, #4
 800a22e:	f7ff fd5b 	bl	8009ce8 <__lo0bits>
 800a232:	9b01      	ldr	r3, [sp, #4]
 800a234:	6163      	str	r3, [r4, #20]
 800a236:	2201      	movs	r2, #1
 800a238:	6122      	str	r2, [r4, #16]
 800a23a:	3020      	adds	r0, #32
 800a23c:	e7e5      	b.n	800a20a <__d2b+0x62>
 800a23e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a242:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a246:	6038      	str	r0, [r7, #0]
 800a248:	6918      	ldr	r0, [r3, #16]
 800a24a:	f7ff fd2d 	bl	8009ca8 <__hi0bits>
 800a24e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a252:	e7e1      	b.n	800a218 <__d2b+0x70>
 800a254:	0800b81f 	.word	0x0800b81f
 800a258:	0800b830 	.word	0x0800b830

0800a25c <_read_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d07      	ldr	r5, [pc, #28]	; (800a27c <_read_r+0x20>)
 800a260:	4604      	mov	r4, r0
 800a262:	4608      	mov	r0, r1
 800a264:	4611      	mov	r1, r2
 800a266:	2200      	movs	r2, #0
 800a268:	602a      	str	r2, [r5, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f7fd fee2 	bl	8008034 <_read>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_read_r+0x1e>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_read_r+0x1e>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	20000bbc 	.word	0x20000bbc

0800a280 <__assert_func>:
 800a280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a282:	4614      	mov	r4, r2
 800a284:	461a      	mov	r2, r3
 800a286:	4b09      	ldr	r3, [pc, #36]	; (800a2ac <__assert_func+0x2c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4605      	mov	r5, r0
 800a28c:	68d8      	ldr	r0, [r3, #12]
 800a28e:	b14c      	cbz	r4, 800a2a4 <__assert_func+0x24>
 800a290:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <__assert_func+0x30>)
 800a292:	9100      	str	r1, [sp, #0]
 800a294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a298:	4906      	ldr	r1, [pc, #24]	; (800a2b4 <__assert_func+0x34>)
 800a29a:	462b      	mov	r3, r5
 800a29c:	f000 f9a6 	bl	800a5ec <fiprintf>
 800a2a0:	f000 fc12 	bl	800aac8 <abort>
 800a2a4:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <__assert_func+0x38>)
 800a2a6:	461c      	mov	r4, r3
 800a2a8:	e7f3      	b.n	800a292 <__assert_func+0x12>
 800a2aa:	bf00      	nop
 800a2ac:	20000010 	.word	0x20000010
 800a2b0:	0800b98c 	.word	0x0800b98c
 800a2b4:	0800b999 	.word	0x0800b999
 800a2b8:	0800b9c7 	.word	0x0800b9c7

0800a2bc <__sflush_r>:
 800a2bc:	898a      	ldrh	r2, [r1, #12]
 800a2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	0710      	lsls	r0, r2, #28
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	d458      	bmi.n	800a37c <__sflush_r+0xc0>
 800a2ca:	684b      	ldr	r3, [r1, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	dc05      	bgt.n	800a2dc <__sflush_r+0x20>
 800a2d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	dc02      	bgt.n	800a2dc <__sflush_r+0x20>
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2de:	2e00      	cmp	r6, #0
 800a2e0:	d0f9      	beq.n	800a2d6 <__sflush_r+0x1a>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2e8:	682f      	ldr	r7, [r5, #0]
 800a2ea:	602b      	str	r3, [r5, #0]
 800a2ec:	d032      	beq.n	800a354 <__sflush_r+0x98>
 800a2ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	075a      	lsls	r2, r3, #29
 800a2f4:	d505      	bpl.n	800a302 <__sflush_r+0x46>
 800a2f6:	6863      	ldr	r3, [r4, #4]
 800a2f8:	1ac0      	subs	r0, r0, r3
 800a2fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2fc:	b10b      	cbz	r3, 800a302 <__sflush_r+0x46>
 800a2fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a300:	1ac0      	subs	r0, r0, r3
 800a302:	2300      	movs	r3, #0
 800a304:	4602      	mov	r2, r0
 800a306:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a308:	6a21      	ldr	r1, [r4, #32]
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b0      	blx	r6
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	d106      	bne.n	800a322 <__sflush_r+0x66>
 800a314:	6829      	ldr	r1, [r5, #0]
 800a316:	291d      	cmp	r1, #29
 800a318:	d82c      	bhi.n	800a374 <__sflush_r+0xb8>
 800a31a:	4a2a      	ldr	r2, [pc, #168]	; (800a3c4 <__sflush_r+0x108>)
 800a31c:	40ca      	lsrs	r2, r1
 800a31e:	07d6      	lsls	r6, r2, #31
 800a320:	d528      	bpl.n	800a374 <__sflush_r+0xb8>
 800a322:	2200      	movs	r2, #0
 800a324:	6062      	str	r2, [r4, #4]
 800a326:	04d9      	lsls	r1, r3, #19
 800a328:	6922      	ldr	r2, [r4, #16]
 800a32a:	6022      	str	r2, [r4, #0]
 800a32c:	d504      	bpl.n	800a338 <__sflush_r+0x7c>
 800a32e:	1c42      	adds	r2, r0, #1
 800a330:	d101      	bne.n	800a336 <__sflush_r+0x7a>
 800a332:	682b      	ldr	r3, [r5, #0]
 800a334:	b903      	cbnz	r3, 800a338 <__sflush_r+0x7c>
 800a336:	6560      	str	r0, [r4, #84]	; 0x54
 800a338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a33a:	602f      	str	r7, [r5, #0]
 800a33c:	2900      	cmp	r1, #0
 800a33e:	d0ca      	beq.n	800a2d6 <__sflush_r+0x1a>
 800a340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a344:	4299      	cmp	r1, r3
 800a346:	d002      	beq.n	800a34e <__sflush_r+0x92>
 800a348:	4628      	mov	r0, r5
 800a34a:	f7fe f84d 	bl	80083e8 <_free_r>
 800a34e:	2000      	movs	r0, #0
 800a350:	6360      	str	r0, [r4, #52]	; 0x34
 800a352:	e7c1      	b.n	800a2d8 <__sflush_r+0x1c>
 800a354:	6a21      	ldr	r1, [r4, #32]
 800a356:	2301      	movs	r3, #1
 800a358:	4628      	mov	r0, r5
 800a35a:	47b0      	blx	r6
 800a35c:	1c41      	adds	r1, r0, #1
 800a35e:	d1c7      	bne.n	800a2f0 <__sflush_r+0x34>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0c4      	beq.n	800a2f0 <__sflush_r+0x34>
 800a366:	2b1d      	cmp	r3, #29
 800a368:	d001      	beq.n	800a36e <__sflush_r+0xb2>
 800a36a:	2b16      	cmp	r3, #22
 800a36c:	d101      	bne.n	800a372 <__sflush_r+0xb6>
 800a36e:	602f      	str	r7, [r5, #0]
 800a370:	e7b1      	b.n	800a2d6 <__sflush_r+0x1a>
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	e7ad      	b.n	800a2d8 <__sflush_r+0x1c>
 800a37c:	690f      	ldr	r7, [r1, #16]
 800a37e:	2f00      	cmp	r7, #0
 800a380:	d0a9      	beq.n	800a2d6 <__sflush_r+0x1a>
 800a382:	0793      	lsls	r3, r2, #30
 800a384:	680e      	ldr	r6, [r1, #0]
 800a386:	bf08      	it	eq
 800a388:	694b      	ldreq	r3, [r1, #20]
 800a38a:	600f      	str	r7, [r1, #0]
 800a38c:	bf18      	it	ne
 800a38e:	2300      	movne	r3, #0
 800a390:	eba6 0807 	sub.w	r8, r6, r7
 800a394:	608b      	str	r3, [r1, #8]
 800a396:	f1b8 0f00 	cmp.w	r8, #0
 800a39a:	dd9c      	ble.n	800a2d6 <__sflush_r+0x1a>
 800a39c:	6a21      	ldr	r1, [r4, #32]
 800a39e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3a0:	4643      	mov	r3, r8
 800a3a2:	463a      	mov	r2, r7
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	47b0      	blx	r6
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	dc06      	bgt.n	800a3ba <__sflush_r+0xfe>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b8:	e78e      	b.n	800a2d8 <__sflush_r+0x1c>
 800a3ba:	4407      	add	r7, r0
 800a3bc:	eba8 0800 	sub.w	r8, r8, r0
 800a3c0:	e7e9      	b.n	800a396 <__sflush_r+0xda>
 800a3c2:	bf00      	nop
 800a3c4:	20400001 	.word	0x20400001

0800a3c8 <_fflush_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	690b      	ldr	r3, [r1, #16]
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	b913      	cbnz	r3, 800a3d8 <_fflush_r+0x10>
 800a3d2:	2500      	movs	r5, #0
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	b118      	cbz	r0, 800a3e2 <_fflush_r+0x1a>
 800a3da:	6983      	ldr	r3, [r0, #24]
 800a3dc:	b90b      	cbnz	r3, 800a3e2 <_fflush_r+0x1a>
 800a3de:	f000 f887 	bl	800a4f0 <__sinit>
 800a3e2:	4b14      	ldr	r3, [pc, #80]	; (800a434 <_fflush_r+0x6c>)
 800a3e4:	429c      	cmp	r4, r3
 800a3e6:	d11b      	bne.n	800a420 <_fflush_r+0x58>
 800a3e8:	686c      	ldr	r4, [r5, #4]
 800a3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0ef      	beq.n	800a3d2 <_fflush_r+0xa>
 800a3f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3f4:	07d0      	lsls	r0, r2, #31
 800a3f6:	d404      	bmi.n	800a402 <_fflush_r+0x3a>
 800a3f8:	0599      	lsls	r1, r3, #22
 800a3fa:	d402      	bmi.n	800a402 <_fflush_r+0x3a>
 800a3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3fe:	f000 f927 	bl	800a650 <__retarget_lock_acquire_recursive>
 800a402:	4628      	mov	r0, r5
 800a404:	4621      	mov	r1, r4
 800a406:	f7ff ff59 	bl	800a2bc <__sflush_r>
 800a40a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a40c:	07da      	lsls	r2, r3, #31
 800a40e:	4605      	mov	r5, r0
 800a410:	d4e0      	bmi.n	800a3d4 <_fflush_r+0xc>
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	059b      	lsls	r3, r3, #22
 800a416:	d4dd      	bmi.n	800a3d4 <_fflush_r+0xc>
 800a418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a41a:	f000 f91a 	bl	800a652 <__retarget_lock_release_recursive>
 800a41e:	e7d9      	b.n	800a3d4 <_fflush_r+0xc>
 800a420:	4b05      	ldr	r3, [pc, #20]	; (800a438 <_fflush_r+0x70>)
 800a422:	429c      	cmp	r4, r3
 800a424:	d101      	bne.n	800a42a <_fflush_r+0x62>
 800a426:	68ac      	ldr	r4, [r5, #8]
 800a428:	e7df      	b.n	800a3ea <_fflush_r+0x22>
 800a42a:	4b04      	ldr	r3, [pc, #16]	; (800a43c <_fflush_r+0x74>)
 800a42c:	429c      	cmp	r4, r3
 800a42e:	bf08      	it	eq
 800a430:	68ec      	ldreq	r4, [r5, #12]
 800a432:	e7da      	b.n	800a3ea <_fflush_r+0x22>
 800a434:	0800baec 	.word	0x0800baec
 800a438:	0800bb0c 	.word	0x0800bb0c
 800a43c:	0800bacc 	.word	0x0800bacc

0800a440 <std>:
 800a440:	2300      	movs	r3, #0
 800a442:	b510      	push	{r4, lr}
 800a444:	4604      	mov	r4, r0
 800a446:	e9c0 3300 	strd	r3, r3, [r0]
 800a44a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a44e:	6083      	str	r3, [r0, #8]
 800a450:	8181      	strh	r1, [r0, #12]
 800a452:	6643      	str	r3, [r0, #100]	; 0x64
 800a454:	81c2      	strh	r2, [r0, #14]
 800a456:	6183      	str	r3, [r0, #24]
 800a458:	4619      	mov	r1, r3
 800a45a:	2208      	movs	r2, #8
 800a45c:	305c      	adds	r0, #92	; 0x5c
 800a45e:	f7fd ffa5 	bl	80083ac <memset>
 800a462:	4b05      	ldr	r3, [pc, #20]	; (800a478 <std+0x38>)
 800a464:	6263      	str	r3, [r4, #36]	; 0x24
 800a466:	4b05      	ldr	r3, [pc, #20]	; (800a47c <std+0x3c>)
 800a468:	62a3      	str	r3, [r4, #40]	; 0x28
 800a46a:	4b05      	ldr	r3, [pc, #20]	; (800a480 <std+0x40>)
 800a46c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a46e:	4b05      	ldr	r3, [pc, #20]	; (800a484 <std+0x44>)
 800a470:	6224      	str	r4, [r4, #32]
 800a472:	6323      	str	r3, [r4, #48]	; 0x30
 800a474:	bd10      	pop	{r4, pc}
 800a476:	bf00      	nop
 800a478:	08008e5d 	.word	0x08008e5d
 800a47c:	08008e7f 	.word	0x08008e7f
 800a480:	08008eb7 	.word	0x08008eb7
 800a484:	08008edb 	.word	0x08008edb

0800a488 <_cleanup_r>:
 800a488:	4901      	ldr	r1, [pc, #4]	; (800a490 <_cleanup_r+0x8>)
 800a48a:	f000 b8c1 	b.w	800a610 <_fwalk_reent>
 800a48e:	bf00      	nop
 800a490:	0800a3c9 	.word	0x0800a3c9

0800a494 <__sfmoreglue>:
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	2268      	movs	r2, #104	; 0x68
 800a498:	1e4d      	subs	r5, r1, #1
 800a49a:	4355      	muls	r5, r2
 800a49c:	460e      	mov	r6, r1
 800a49e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4a2:	f7fe f80d 	bl	80084c0 <_malloc_r>
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	b140      	cbz	r0, 800a4bc <__sfmoreglue+0x28>
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	e9c0 1600 	strd	r1, r6, [r0]
 800a4b0:	300c      	adds	r0, #12
 800a4b2:	60a0      	str	r0, [r4, #8]
 800a4b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4b8:	f7fd ff78 	bl	80083ac <memset>
 800a4bc:	4620      	mov	r0, r4
 800a4be:	bd70      	pop	{r4, r5, r6, pc}

0800a4c0 <__sfp_lock_acquire>:
 800a4c0:	4801      	ldr	r0, [pc, #4]	; (800a4c8 <__sfp_lock_acquire+0x8>)
 800a4c2:	f000 b8c5 	b.w	800a650 <__retarget_lock_acquire_recursive>
 800a4c6:	bf00      	nop
 800a4c8:	20000bc1 	.word	0x20000bc1

0800a4cc <__sfp_lock_release>:
 800a4cc:	4801      	ldr	r0, [pc, #4]	; (800a4d4 <__sfp_lock_release+0x8>)
 800a4ce:	f000 b8c0 	b.w	800a652 <__retarget_lock_release_recursive>
 800a4d2:	bf00      	nop
 800a4d4:	20000bc1 	.word	0x20000bc1

0800a4d8 <__sinit_lock_acquire>:
 800a4d8:	4801      	ldr	r0, [pc, #4]	; (800a4e0 <__sinit_lock_acquire+0x8>)
 800a4da:	f000 b8b9 	b.w	800a650 <__retarget_lock_acquire_recursive>
 800a4de:	bf00      	nop
 800a4e0:	20000bc2 	.word	0x20000bc2

0800a4e4 <__sinit_lock_release>:
 800a4e4:	4801      	ldr	r0, [pc, #4]	; (800a4ec <__sinit_lock_release+0x8>)
 800a4e6:	f000 b8b4 	b.w	800a652 <__retarget_lock_release_recursive>
 800a4ea:	bf00      	nop
 800a4ec:	20000bc2 	.word	0x20000bc2

0800a4f0 <__sinit>:
 800a4f0:	b510      	push	{r4, lr}
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	f7ff fff0 	bl	800a4d8 <__sinit_lock_acquire>
 800a4f8:	69a3      	ldr	r3, [r4, #24]
 800a4fa:	b11b      	cbz	r3, 800a504 <__sinit+0x14>
 800a4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a500:	f7ff bff0 	b.w	800a4e4 <__sinit_lock_release>
 800a504:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a508:	6523      	str	r3, [r4, #80]	; 0x50
 800a50a:	4b13      	ldr	r3, [pc, #76]	; (800a558 <__sinit+0x68>)
 800a50c:	4a13      	ldr	r2, [pc, #76]	; (800a55c <__sinit+0x6c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	62a2      	str	r2, [r4, #40]	; 0x28
 800a512:	42a3      	cmp	r3, r4
 800a514:	bf04      	itt	eq
 800a516:	2301      	moveq	r3, #1
 800a518:	61a3      	streq	r3, [r4, #24]
 800a51a:	4620      	mov	r0, r4
 800a51c:	f000 f820 	bl	800a560 <__sfp>
 800a520:	6060      	str	r0, [r4, #4]
 800a522:	4620      	mov	r0, r4
 800a524:	f000 f81c 	bl	800a560 <__sfp>
 800a528:	60a0      	str	r0, [r4, #8]
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 f818 	bl	800a560 <__sfp>
 800a530:	2200      	movs	r2, #0
 800a532:	60e0      	str	r0, [r4, #12]
 800a534:	2104      	movs	r1, #4
 800a536:	6860      	ldr	r0, [r4, #4]
 800a538:	f7ff ff82 	bl	800a440 <std>
 800a53c:	68a0      	ldr	r0, [r4, #8]
 800a53e:	2201      	movs	r2, #1
 800a540:	2109      	movs	r1, #9
 800a542:	f7ff ff7d 	bl	800a440 <std>
 800a546:	68e0      	ldr	r0, [r4, #12]
 800a548:	2202      	movs	r2, #2
 800a54a:	2112      	movs	r1, #18
 800a54c:	f7ff ff78 	bl	800a440 <std>
 800a550:	2301      	movs	r3, #1
 800a552:	61a3      	str	r3, [r4, #24]
 800a554:	e7d2      	b.n	800a4fc <__sinit+0xc>
 800a556:	bf00      	nop
 800a558:	0800b768 	.word	0x0800b768
 800a55c:	0800a489 	.word	0x0800a489

0800a560 <__sfp>:
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a562:	4607      	mov	r7, r0
 800a564:	f7ff ffac 	bl	800a4c0 <__sfp_lock_acquire>
 800a568:	4b1e      	ldr	r3, [pc, #120]	; (800a5e4 <__sfp+0x84>)
 800a56a:	681e      	ldr	r6, [r3, #0]
 800a56c:	69b3      	ldr	r3, [r6, #24]
 800a56e:	b913      	cbnz	r3, 800a576 <__sfp+0x16>
 800a570:	4630      	mov	r0, r6
 800a572:	f7ff ffbd 	bl	800a4f0 <__sinit>
 800a576:	3648      	adds	r6, #72	; 0x48
 800a578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a57c:	3b01      	subs	r3, #1
 800a57e:	d503      	bpl.n	800a588 <__sfp+0x28>
 800a580:	6833      	ldr	r3, [r6, #0]
 800a582:	b30b      	cbz	r3, 800a5c8 <__sfp+0x68>
 800a584:	6836      	ldr	r6, [r6, #0]
 800a586:	e7f7      	b.n	800a578 <__sfp+0x18>
 800a588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a58c:	b9d5      	cbnz	r5, 800a5c4 <__sfp+0x64>
 800a58e:	4b16      	ldr	r3, [pc, #88]	; (800a5e8 <__sfp+0x88>)
 800a590:	60e3      	str	r3, [r4, #12]
 800a592:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a596:	6665      	str	r5, [r4, #100]	; 0x64
 800a598:	f000 f859 	bl	800a64e <__retarget_lock_init_recursive>
 800a59c:	f7ff ff96 	bl	800a4cc <__sfp_lock_release>
 800a5a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5a8:	6025      	str	r5, [r4, #0]
 800a5aa:	61a5      	str	r5, [r4, #24]
 800a5ac:	2208      	movs	r2, #8
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5b4:	f7fd fefa 	bl	80083ac <memset>
 800a5b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c4:	3468      	adds	r4, #104	; 0x68
 800a5c6:	e7d9      	b.n	800a57c <__sfp+0x1c>
 800a5c8:	2104      	movs	r1, #4
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	f7ff ff62 	bl	800a494 <__sfmoreglue>
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	6030      	str	r0, [r6, #0]
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d1d5      	bne.n	800a584 <__sfp+0x24>
 800a5d8:	f7ff ff78 	bl	800a4cc <__sfp_lock_release>
 800a5dc:	230c      	movs	r3, #12
 800a5de:	603b      	str	r3, [r7, #0]
 800a5e0:	e7ee      	b.n	800a5c0 <__sfp+0x60>
 800a5e2:	bf00      	nop
 800a5e4:	0800b768 	.word	0x0800b768
 800a5e8:	ffff0001 	.word	0xffff0001

0800a5ec <fiprintf>:
 800a5ec:	b40e      	push	{r1, r2, r3}
 800a5ee:	b503      	push	{r0, r1, lr}
 800a5f0:	4601      	mov	r1, r0
 800a5f2:	ab03      	add	r3, sp, #12
 800a5f4:	4805      	ldr	r0, [pc, #20]	; (800a60c <fiprintf+0x20>)
 800a5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fa:	6800      	ldr	r0, [r0, #0]
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	f000 f865 	bl	800a6cc <_vfiprintf_r>
 800a602:	b002      	add	sp, #8
 800a604:	f85d eb04 	ldr.w	lr, [sp], #4
 800a608:	b003      	add	sp, #12
 800a60a:	4770      	bx	lr
 800a60c:	20000010 	.word	0x20000010

0800a610 <_fwalk_reent>:
 800a610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a614:	4606      	mov	r6, r0
 800a616:	4688      	mov	r8, r1
 800a618:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a61c:	2700      	movs	r7, #0
 800a61e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a622:	f1b9 0901 	subs.w	r9, r9, #1
 800a626:	d505      	bpl.n	800a634 <_fwalk_reent+0x24>
 800a628:	6824      	ldr	r4, [r4, #0]
 800a62a:	2c00      	cmp	r4, #0
 800a62c:	d1f7      	bne.n	800a61e <_fwalk_reent+0xe>
 800a62e:	4638      	mov	r0, r7
 800a630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a634:	89ab      	ldrh	r3, [r5, #12]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d907      	bls.n	800a64a <_fwalk_reent+0x3a>
 800a63a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a63e:	3301      	adds	r3, #1
 800a640:	d003      	beq.n	800a64a <_fwalk_reent+0x3a>
 800a642:	4629      	mov	r1, r5
 800a644:	4630      	mov	r0, r6
 800a646:	47c0      	blx	r8
 800a648:	4307      	orrs	r7, r0
 800a64a:	3568      	adds	r5, #104	; 0x68
 800a64c:	e7e9      	b.n	800a622 <_fwalk_reent+0x12>

0800a64e <__retarget_lock_init_recursive>:
 800a64e:	4770      	bx	lr

0800a650 <__retarget_lock_acquire_recursive>:
 800a650:	4770      	bx	lr

0800a652 <__retarget_lock_release_recursive>:
 800a652:	4770      	bx	lr

0800a654 <__ascii_mbtowc>:
 800a654:	b082      	sub	sp, #8
 800a656:	b901      	cbnz	r1, 800a65a <__ascii_mbtowc+0x6>
 800a658:	a901      	add	r1, sp, #4
 800a65a:	b142      	cbz	r2, 800a66e <__ascii_mbtowc+0x1a>
 800a65c:	b14b      	cbz	r3, 800a672 <__ascii_mbtowc+0x1e>
 800a65e:	7813      	ldrb	r3, [r2, #0]
 800a660:	600b      	str	r3, [r1, #0]
 800a662:	7812      	ldrb	r2, [r2, #0]
 800a664:	1e10      	subs	r0, r2, #0
 800a666:	bf18      	it	ne
 800a668:	2001      	movne	r0, #1
 800a66a:	b002      	add	sp, #8
 800a66c:	4770      	bx	lr
 800a66e:	4610      	mov	r0, r2
 800a670:	e7fb      	b.n	800a66a <__ascii_mbtowc+0x16>
 800a672:	f06f 0001 	mvn.w	r0, #1
 800a676:	e7f8      	b.n	800a66a <__ascii_mbtowc+0x16>

0800a678 <__sfputc_r>:
 800a678:	6893      	ldr	r3, [r2, #8]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	b410      	push	{r4}
 800a680:	6093      	str	r3, [r2, #8]
 800a682:	da08      	bge.n	800a696 <__sfputc_r+0x1e>
 800a684:	6994      	ldr	r4, [r2, #24]
 800a686:	42a3      	cmp	r3, r4
 800a688:	db01      	blt.n	800a68e <__sfputc_r+0x16>
 800a68a:	290a      	cmp	r1, #10
 800a68c:	d103      	bne.n	800a696 <__sfputc_r+0x1e>
 800a68e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a692:	f000 b94b 	b.w	800a92c <__swbuf_r>
 800a696:	6813      	ldr	r3, [r2, #0]
 800a698:	1c58      	adds	r0, r3, #1
 800a69a:	6010      	str	r0, [r2, #0]
 800a69c:	7019      	strb	r1, [r3, #0]
 800a69e:	4608      	mov	r0, r1
 800a6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <__sfputs_r>:
 800a6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	460f      	mov	r7, r1
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	18d5      	adds	r5, r2, r3
 800a6b0:	42ac      	cmp	r4, r5
 800a6b2:	d101      	bne.n	800a6b8 <__sfputs_r+0x12>
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e007      	b.n	800a6c8 <__sfputs_r+0x22>
 800a6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6bc:	463a      	mov	r2, r7
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7ff ffda 	bl	800a678 <__sfputc_r>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d1f3      	bne.n	800a6b0 <__sfputs_r+0xa>
 800a6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6cc <_vfiprintf_r>:
 800a6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d0:	460d      	mov	r5, r1
 800a6d2:	b09d      	sub	sp, #116	; 0x74
 800a6d4:	4614      	mov	r4, r2
 800a6d6:	4698      	mov	r8, r3
 800a6d8:	4606      	mov	r6, r0
 800a6da:	b118      	cbz	r0, 800a6e4 <_vfiprintf_r+0x18>
 800a6dc:	6983      	ldr	r3, [r0, #24]
 800a6de:	b90b      	cbnz	r3, 800a6e4 <_vfiprintf_r+0x18>
 800a6e0:	f7ff ff06 	bl	800a4f0 <__sinit>
 800a6e4:	4b89      	ldr	r3, [pc, #548]	; (800a90c <_vfiprintf_r+0x240>)
 800a6e6:	429d      	cmp	r5, r3
 800a6e8:	d11b      	bne.n	800a722 <_vfiprintf_r+0x56>
 800a6ea:	6875      	ldr	r5, [r6, #4]
 800a6ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ee:	07d9      	lsls	r1, r3, #31
 800a6f0:	d405      	bmi.n	800a6fe <_vfiprintf_r+0x32>
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	059a      	lsls	r2, r3, #22
 800a6f6:	d402      	bmi.n	800a6fe <_vfiprintf_r+0x32>
 800a6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6fa:	f7ff ffa9 	bl	800a650 <__retarget_lock_acquire_recursive>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	071b      	lsls	r3, r3, #28
 800a702:	d501      	bpl.n	800a708 <_vfiprintf_r+0x3c>
 800a704:	692b      	ldr	r3, [r5, #16]
 800a706:	b9eb      	cbnz	r3, 800a744 <_vfiprintf_r+0x78>
 800a708:	4629      	mov	r1, r5
 800a70a:	4630      	mov	r0, r6
 800a70c:	f000 f96e 	bl	800a9ec <__swsetup_r>
 800a710:	b1c0      	cbz	r0, 800a744 <_vfiprintf_r+0x78>
 800a712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a714:	07dc      	lsls	r4, r3, #31
 800a716:	d50e      	bpl.n	800a736 <_vfiprintf_r+0x6a>
 800a718:	f04f 30ff 	mov.w	r0, #4294967295
 800a71c:	b01d      	add	sp, #116	; 0x74
 800a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a722:	4b7b      	ldr	r3, [pc, #492]	; (800a910 <_vfiprintf_r+0x244>)
 800a724:	429d      	cmp	r5, r3
 800a726:	d101      	bne.n	800a72c <_vfiprintf_r+0x60>
 800a728:	68b5      	ldr	r5, [r6, #8]
 800a72a:	e7df      	b.n	800a6ec <_vfiprintf_r+0x20>
 800a72c:	4b79      	ldr	r3, [pc, #484]	; (800a914 <_vfiprintf_r+0x248>)
 800a72e:	429d      	cmp	r5, r3
 800a730:	bf08      	it	eq
 800a732:	68f5      	ldreq	r5, [r6, #12]
 800a734:	e7da      	b.n	800a6ec <_vfiprintf_r+0x20>
 800a736:	89ab      	ldrh	r3, [r5, #12]
 800a738:	0598      	lsls	r0, r3, #22
 800a73a:	d4ed      	bmi.n	800a718 <_vfiprintf_r+0x4c>
 800a73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a73e:	f7ff ff88 	bl	800a652 <__retarget_lock_release_recursive>
 800a742:	e7e9      	b.n	800a718 <_vfiprintf_r+0x4c>
 800a744:	2300      	movs	r3, #0
 800a746:	9309      	str	r3, [sp, #36]	; 0x24
 800a748:	2320      	movs	r3, #32
 800a74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a752:	2330      	movs	r3, #48	; 0x30
 800a754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a918 <_vfiprintf_r+0x24c>
 800a758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a75c:	f04f 0901 	mov.w	r9, #1
 800a760:	4623      	mov	r3, r4
 800a762:	469a      	mov	sl, r3
 800a764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a768:	b10a      	cbz	r2, 800a76e <_vfiprintf_r+0xa2>
 800a76a:	2a25      	cmp	r2, #37	; 0x25
 800a76c:	d1f9      	bne.n	800a762 <_vfiprintf_r+0x96>
 800a76e:	ebba 0b04 	subs.w	fp, sl, r4
 800a772:	d00b      	beq.n	800a78c <_vfiprintf_r+0xc0>
 800a774:	465b      	mov	r3, fp
 800a776:	4622      	mov	r2, r4
 800a778:	4629      	mov	r1, r5
 800a77a:	4630      	mov	r0, r6
 800a77c:	f7ff ff93 	bl	800a6a6 <__sfputs_r>
 800a780:	3001      	adds	r0, #1
 800a782:	f000 80aa 	beq.w	800a8da <_vfiprintf_r+0x20e>
 800a786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a788:	445a      	add	r2, fp
 800a78a:	9209      	str	r2, [sp, #36]	; 0x24
 800a78c:	f89a 3000 	ldrb.w	r3, [sl]
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 80a2 	beq.w	800a8da <_vfiprintf_r+0x20e>
 800a796:	2300      	movs	r3, #0
 800a798:	f04f 32ff 	mov.w	r2, #4294967295
 800a79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7a0:	f10a 0a01 	add.w	sl, sl, #1
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	9307      	str	r3, [sp, #28]
 800a7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a7ae:	4654      	mov	r4, sl
 800a7b0:	2205      	movs	r2, #5
 800a7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b6:	4858      	ldr	r0, [pc, #352]	; (800a918 <_vfiprintf_r+0x24c>)
 800a7b8:	f7f8 fe3a 	bl	8003430 <memchr>
 800a7bc:	9a04      	ldr	r2, [sp, #16]
 800a7be:	b9d8      	cbnz	r0, 800a7f8 <_vfiprintf_r+0x12c>
 800a7c0:	06d1      	lsls	r1, r2, #27
 800a7c2:	bf44      	itt	mi
 800a7c4:	2320      	movmi	r3, #32
 800a7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ca:	0713      	lsls	r3, r2, #28
 800a7cc:	bf44      	itt	mi
 800a7ce:	232b      	movmi	r3, #43	; 0x2b
 800a7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7da:	d015      	beq.n	800a808 <_vfiprintf_r+0x13c>
 800a7dc:	9a07      	ldr	r2, [sp, #28]
 800a7de:	4654      	mov	r4, sl
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	f04f 0c0a 	mov.w	ip, #10
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ec:	3b30      	subs	r3, #48	; 0x30
 800a7ee:	2b09      	cmp	r3, #9
 800a7f0:	d94e      	bls.n	800a890 <_vfiprintf_r+0x1c4>
 800a7f2:	b1b0      	cbz	r0, 800a822 <_vfiprintf_r+0x156>
 800a7f4:	9207      	str	r2, [sp, #28]
 800a7f6:	e014      	b.n	800a822 <_vfiprintf_r+0x156>
 800a7f8:	eba0 0308 	sub.w	r3, r0, r8
 800a7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a800:	4313      	orrs	r3, r2
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	46a2      	mov	sl, r4
 800a806:	e7d2      	b.n	800a7ae <_vfiprintf_r+0xe2>
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	1d19      	adds	r1, r3, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	9103      	str	r1, [sp, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	bfbb      	ittet	lt
 800a814:	425b      	neglt	r3, r3
 800a816:	f042 0202 	orrlt.w	r2, r2, #2
 800a81a:	9307      	strge	r3, [sp, #28]
 800a81c:	9307      	strlt	r3, [sp, #28]
 800a81e:	bfb8      	it	lt
 800a820:	9204      	strlt	r2, [sp, #16]
 800a822:	7823      	ldrb	r3, [r4, #0]
 800a824:	2b2e      	cmp	r3, #46	; 0x2e
 800a826:	d10c      	bne.n	800a842 <_vfiprintf_r+0x176>
 800a828:	7863      	ldrb	r3, [r4, #1]
 800a82a:	2b2a      	cmp	r3, #42	; 0x2a
 800a82c:	d135      	bne.n	800a89a <_vfiprintf_r+0x1ce>
 800a82e:	9b03      	ldr	r3, [sp, #12]
 800a830:	1d1a      	adds	r2, r3, #4
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	9203      	str	r2, [sp, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	bfb8      	it	lt
 800a83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a83e:	3402      	adds	r4, #2
 800a840:	9305      	str	r3, [sp, #20]
 800a842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a928 <_vfiprintf_r+0x25c>
 800a846:	7821      	ldrb	r1, [r4, #0]
 800a848:	2203      	movs	r2, #3
 800a84a:	4650      	mov	r0, sl
 800a84c:	f7f8 fdf0 	bl	8003430 <memchr>
 800a850:	b140      	cbz	r0, 800a864 <_vfiprintf_r+0x198>
 800a852:	2340      	movs	r3, #64	; 0x40
 800a854:	eba0 000a 	sub.w	r0, r0, sl
 800a858:	fa03 f000 	lsl.w	r0, r3, r0
 800a85c:	9b04      	ldr	r3, [sp, #16]
 800a85e:	4303      	orrs	r3, r0
 800a860:	3401      	adds	r4, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a868:	482c      	ldr	r0, [pc, #176]	; (800a91c <_vfiprintf_r+0x250>)
 800a86a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a86e:	2206      	movs	r2, #6
 800a870:	f7f8 fdde 	bl	8003430 <memchr>
 800a874:	2800      	cmp	r0, #0
 800a876:	d03f      	beq.n	800a8f8 <_vfiprintf_r+0x22c>
 800a878:	4b29      	ldr	r3, [pc, #164]	; (800a920 <_vfiprintf_r+0x254>)
 800a87a:	bb1b      	cbnz	r3, 800a8c4 <_vfiprintf_r+0x1f8>
 800a87c:	9b03      	ldr	r3, [sp, #12]
 800a87e:	3307      	adds	r3, #7
 800a880:	f023 0307 	bic.w	r3, r3, #7
 800a884:	3308      	adds	r3, #8
 800a886:	9303      	str	r3, [sp, #12]
 800a888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88a:	443b      	add	r3, r7
 800a88c:	9309      	str	r3, [sp, #36]	; 0x24
 800a88e:	e767      	b.n	800a760 <_vfiprintf_r+0x94>
 800a890:	fb0c 3202 	mla	r2, ip, r2, r3
 800a894:	460c      	mov	r4, r1
 800a896:	2001      	movs	r0, #1
 800a898:	e7a5      	b.n	800a7e6 <_vfiprintf_r+0x11a>
 800a89a:	2300      	movs	r3, #0
 800a89c:	3401      	adds	r4, #1
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f04f 0c0a 	mov.w	ip, #10
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ac:	3a30      	subs	r2, #48	; 0x30
 800a8ae:	2a09      	cmp	r2, #9
 800a8b0:	d903      	bls.n	800a8ba <_vfiprintf_r+0x1ee>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0c5      	beq.n	800a842 <_vfiprintf_r+0x176>
 800a8b6:	9105      	str	r1, [sp, #20]
 800a8b8:	e7c3      	b.n	800a842 <_vfiprintf_r+0x176>
 800a8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8be:	4604      	mov	r4, r0
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e7f0      	b.n	800a8a6 <_vfiprintf_r+0x1da>
 800a8c4:	ab03      	add	r3, sp, #12
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4b16      	ldr	r3, [pc, #88]	; (800a924 <_vfiprintf_r+0x258>)
 800a8cc:	a904      	add	r1, sp, #16
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f7fd fefe 	bl	80086d0 <_printf_float>
 800a8d4:	4607      	mov	r7, r0
 800a8d6:	1c78      	adds	r0, r7, #1
 800a8d8:	d1d6      	bne.n	800a888 <_vfiprintf_r+0x1bc>
 800a8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8dc:	07d9      	lsls	r1, r3, #31
 800a8de:	d405      	bmi.n	800a8ec <_vfiprintf_r+0x220>
 800a8e0:	89ab      	ldrh	r3, [r5, #12]
 800a8e2:	059a      	lsls	r2, r3, #22
 800a8e4:	d402      	bmi.n	800a8ec <_vfiprintf_r+0x220>
 800a8e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8e8:	f7ff feb3 	bl	800a652 <__retarget_lock_release_recursive>
 800a8ec:	89ab      	ldrh	r3, [r5, #12]
 800a8ee:	065b      	lsls	r3, r3, #25
 800a8f0:	f53f af12 	bmi.w	800a718 <_vfiprintf_r+0x4c>
 800a8f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8f6:	e711      	b.n	800a71c <_vfiprintf_r+0x50>
 800a8f8:	ab03      	add	r3, sp, #12
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4b09      	ldr	r3, [pc, #36]	; (800a924 <_vfiprintf_r+0x258>)
 800a900:	a904      	add	r1, sp, #16
 800a902:	4630      	mov	r0, r6
 800a904:	f7fe f974 	bl	8008bf0 <_printf_i>
 800a908:	e7e4      	b.n	800a8d4 <_vfiprintf_r+0x208>
 800a90a:	bf00      	nop
 800a90c:	0800baec 	.word	0x0800baec
 800a910:	0800bb0c 	.word	0x0800bb0c
 800a914:	0800bacc 	.word	0x0800bacc
 800a918:	0800bb36 	.word	0x0800bb36
 800a91c:	0800bb40 	.word	0x0800bb40
 800a920:	080086d1 	.word	0x080086d1
 800a924:	0800a6a7 	.word	0x0800a6a7
 800a928:	0800bb3c 	.word	0x0800bb3c

0800a92c <__swbuf_r>:
 800a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92e:	460e      	mov	r6, r1
 800a930:	4614      	mov	r4, r2
 800a932:	4605      	mov	r5, r0
 800a934:	b118      	cbz	r0, 800a93e <__swbuf_r+0x12>
 800a936:	6983      	ldr	r3, [r0, #24]
 800a938:	b90b      	cbnz	r3, 800a93e <__swbuf_r+0x12>
 800a93a:	f7ff fdd9 	bl	800a4f0 <__sinit>
 800a93e:	4b21      	ldr	r3, [pc, #132]	; (800a9c4 <__swbuf_r+0x98>)
 800a940:	429c      	cmp	r4, r3
 800a942:	d12b      	bne.n	800a99c <__swbuf_r+0x70>
 800a944:	686c      	ldr	r4, [r5, #4]
 800a946:	69a3      	ldr	r3, [r4, #24]
 800a948:	60a3      	str	r3, [r4, #8]
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	071a      	lsls	r2, r3, #28
 800a94e:	d52f      	bpl.n	800a9b0 <__swbuf_r+0x84>
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	b36b      	cbz	r3, 800a9b0 <__swbuf_r+0x84>
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	6820      	ldr	r0, [r4, #0]
 800a958:	1ac0      	subs	r0, r0, r3
 800a95a:	6963      	ldr	r3, [r4, #20]
 800a95c:	b2f6      	uxtb	r6, r6
 800a95e:	4283      	cmp	r3, r0
 800a960:	4637      	mov	r7, r6
 800a962:	dc04      	bgt.n	800a96e <__swbuf_r+0x42>
 800a964:	4621      	mov	r1, r4
 800a966:	4628      	mov	r0, r5
 800a968:	f7ff fd2e 	bl	800a3c8 <_fflush_r>
 800a96c:	bb30      	cbnz	r0, 800a9bc <__swbuf_r+0x90>
 800a96e:	68a3      	ldr	r3, [r4, #8]
 800a970:	3b01      	subs	r3, #1
 800a972:	60a3      	str	r3, [r4, #8]
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	1c5a      	adds	r2, r3, #1
 800a978:	6022      	str	r2, [r4, #0]
 800a97a:	701e      	strb	r6, [r3, #0]
 800a97c:	6963      	ldr	r3, [r4, #20]
 800a97e:	3001      	adds	r0, #1
 800a980:	4283      	cmp	r3, r0
 800a982:	d004      	beq.n	800a98e <__swbuf_r+0x62>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	07db      	lsls	r3, r3, #31
 800a988:	d506      	bpl.n	800a998 <__swbuf_r+0x6c>
 800a98a:	2e0a      	cmp	r6, #10
 800a98c:	d104      	bne.n	800a998 <__swbuf_r+0x6c>
 800a98e:	4621      	mov	r1, r4
 800a990:	4628      	mov	r0, r5
 800a992:	f7ff fd19 	bl	800a3c8 <_fflush_r>
 800a996:	b988      	cbnz	r0, 800a9bc <__swbuf_r+0x90>
 800a998:	4638      	mov	r0, r7
 800a99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a99c:	4b0a      	ldr	r3, [pc, #40]	; (800a9c8 <__swbuf_r+0x9c>)
 800a99e:	429c      	cmp	r4, r3
 800a9a0:	d101      	bne.n	800a9a6 <__swbuf_r+0x7a>
 800a9a2:	68ac      	ldr	r4, [r5, #8]
 800a9a4:	e7cf      	b.n	800a946 <__swbuf_r+0x1a>
 800a9a6:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <__swbuf_r+0xa0>)
 800a9a8:	429c      	cmp	r4, r3
 800a9aa:	bf08      	it	eq
 800a9ac:	68ec      	ldreq	r4, [r5, #12]
 800a9ae:	e7ca      	b.n	800a946 <__swbuf_r+0x1a>
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f000 f81a 	bl	800a9ec <__swsetup_r>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d0cb      	beq.n	800a954 <__swbuf_r+0x28>
 800a9bc:	f04f 37ff 	mov.w	r7, #4294967295
 800a9c0:	e7ea      	b.n	800a998 <__swbuf_r+0x6c>
 800a9c2:	bf00      	nop
 800a9c4:	0800baec 	.word	0x0800baec
 800a9c8:	0800bb0c 	.word	0x0800bb0c
 800a9cc:	0800bacc 	.word	0x0800bacc

0800a9d0 <__ascii_wctomb>:
 800a9d0:	b149      	cbz	r1, 800a9e6 <__ascii_wctomb+0x16>
 800a9d2:	2aff      	cmp	r2, #255	; 0xff
 800a9d4:	bf85      	ittet	hi
 800a9d6:	238a      	movhi	r3, #138	; 0x8a
 800a9d8:	6003      	strhi	r3, [r0, #0]
 800a9da:	700a      	strbls	r2, [r1, #0]
 800a9dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9e0:	bf98      	it	ls
 800a9e2:	2001      	movls	r0, #1
 800a9e4:	4770      	bx	lr
 800a9e6:	4608      	mov	r0, r1
 800a9e8:	4770      	bx	lr
	...

0800a9ec <__swsetup_r>:
 800a9ec:	4b32      	ldr	r3, [pc, #200]	; (800aab8 <__swsetup_r+0xcc>)
 800a9ee:	b570      	push	{r4, r5, r6, lr}
 800a9f0:	681d      	ldr	r5, [r3, #0]
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	b125      	cbz	r5, 800aa02 <__swsetup_r+0x16>
 800a9f8:	69ab      	ldr	r3, [r5, #24]
 800a9fa:	b913      	cbnz	r3, 800aa02 <__swsetup_r+0x16>
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	f7ff fd77 	bl	800a4f0 <__sinit>
 800aa02:	4b2e      	ldr	r3, [pc, #184]	; (800aabc <__swsetup_r+0xd0>)
 800aa04:	429c      	cmp	r4, r3
 800aa06:	d10f      	bne.n	800aa28 <__swsetup_r+0x3c>
 800aa08:	686c      	ldr	r4, [r5, #4]
 800aa0a:	89a3      	ldrh	r3, [r4, #12]
 800aa0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa10:	0719      	lsls	r1, r3, #28
 800aa12:	d42c      	bmi.n	800aa6e <__swsetup_r+0x82>
 800aa14:	06dd      	lsls	r5, r3, #27
 800aa16:	d411      	bmi.n	800aa3c <__swsetup_r+0x50>
 800aa18:	2309      	movs	r3, #9
 800aa1a:	6033      	str	r3, [r6, #0]
 800aa1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	f04f 30ff 	mov.w	r0, #4294967295
 800aa26:	e03e      	b.n	800aaa6 <__swsetup_r+0xba>
 800aa28:	4b25      	ldr	r3, [pc, #148]	; (800aac0 <__swsetup_r+0xd4>)
 800aa2a:	429c      	cmp	r4, r3
 800aa2c:	d101      	bne.n	800aa32 <__swsetup_r+0x46>
 800aa2e:	68ac      	ldr	r4, [r5, #8]
 800aa30:	e7eb      	b.n	800aa0a <__swsetup_r+0x1e>
 800aa32:	4b24      	ldr	r3, [pc, #144]	; (800aac4 <__swsetup_r+0xd8>)
 800aa34:	429c      	cmp	r4, r3
 800aa36:	bf08      	it	eq
 800aa38:	68ec      	ldreq	r4, [r5, #12]
 800aa3a:	e7e6      	b.n	800aa0a <__swsetup_r+0x1e>
 800aa3c:	0758      	lsls	r0, r3, #29
 800aa3e:	d512      	bpl.n	800aa66 <__swsetup_r+0x7a>
 800aa40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa42:	b141      	cbz	r1, 800aa56 <__swsetup_r+0x6a>
 800aa44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa48:	4299      	cmp	r1, r3
 800aa4a:	d002      	beq.n	800aa52 <__swsetup_r+0x66>
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	f7fd fccb 	bl	80083e8 <_free_r>
 800aa52:	2300      	movs	r3, #0
 800aa54:	6363      	str	r3, [r4, #52]	; 0x34
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa5c:	81a3      	strh	r3, [r4, #12]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	6063      	str	r3, [r4, #4]
 800aa62:	6923      	ldr	r3, [r4, #16]
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	f043 0308 	orr.w	r3, r3, #8
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	6923      	ldr	r3, [r4, #16]
 800aa70:	b94b      	cbnz	r3, 800aa86 <__swsetup_r+0x9a>
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa7c:	d003      	beq.n	800aa86 <__swsetup_r+0x9a>
 800aa7e:	4621      	mov	r1, r4
 800aa80:	4630      	mov	r0, r6
 800aa82:	f000 f84d 	bl	800ab20 <__smakebuf_r>
 800aa86:	89a0      	ldrh	r0, [r4, #12]
 800aa88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa8c:	f010 0301 	ands.w	r3, r0, #1
 800aa90:	d00a      	beq.n	800aaa8 <__swsetup_r+0xbc>
 800aa92:	2300      	movs	r3, #0
 800aa94:	60a3      	str	r3, [r4, #8]
 800aa96:	6963      	ldr	r3, [r4, #20]
 800aa98:	425b      	negs	r3, r3
 800aa9a:	61a3      	str	r3, [r4, #24]
 800aa9c:	6923      	ldr	r3, [r4, #16]
 800aa9e:	b943      	cbnz	r3, 800aab2 <__swsetup_r+0xc6>
 800aaa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aaa4:	d1ba      	bne.n	800aa1c <__swsetup_r+0x30>
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}
 800aaa8:	0781      	lsls	r1, r0, #30
 800aaaa:	bf58      	it	pl
 800aaac:	6963      	ldrpl	r3, [r4, #20]
 800aaae:	60a3      	str	r3, [r4, #8]
 800aab0:	e7f4      	b.n	800aa9c <__swsetup_r+0xb0>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e7f7      	b.n	800aaa6 <__swsetup_r+0xba>
 800aab6:	bf00      	nop
 800aab8:	20000010 	.word	0x20000010
 800aabc:	0800baec 	.word	0x0800baec
 800aac0:	0800bb0c 	.word	0x0800bb0c
 800aac4:	0800bacc 	.word	0x0800bacc

0800aac8 <abort>:
 800aac8:	b508      	push	{r3, lr}
 800aaca:	2006      	movs	r0, #6
 800aacc:	f000 f890 	bl	800abf0 <raise>
 800aad0:	2001      	movs	r0, #1
 800aad2:	f7fd faa9 	bl	8008028 <_exit>

0800aad6 <__swhatbuf_r>:
 800aad6:	b570      	push	{r4, r5, r6, lr}
 800aad8:	460e      	mov	r6, r1
 800aada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aade:	2900      	cmp	r1, #0
 800aae0:	b096      	sub	sp, #88	; 0x58
 800aae2:	4614      	mov	r4, r2
 800aae4:	461d      	mov	r5, r3
 800aae6:	da08      	bge.n	800aafa <__swhatbuf_r+0x24>
 800aae8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	602a      	str	r2, [r5, #0]
 800aaf0:	061a      	lsls	r2, r3, #24
 800aaf2:	d410      	bmi.n	800ab16 <__swhatbuf_r+0x40>
 800aaf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf8:	e00e      	b.n	800ab18 <__swhatbuf_r+0x42>
 800aafa:	466a      	mov	r2, sp
 800aafc:	f000 f894 	bl	800ac28 <_fstat_r>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	dbf1      	blt.n	800aae8 <__swhatbuf_r+0x12>
 800ab04:	9a01      	ldr	r2, [sp, #4]
 800ab06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab0e:	425a      	negs	r2, r3
 800ab10:	415a      	adcs	r2, r3
 800ab12:	602a      	str	r2, [r5, #0]
 800ab14:	e7ee      	b.n	800aaf4 <__swhatbuf_r+0x1e>
 800ab16:	2340      	movs	r3, #64	; 0x40
 800ab18:	2000      	movs	r0, #0
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	b016      	add	sp, #88	; 0x58
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}

0800ab20 <__smakebuf_r>:
 800ab20:	898b      	ldrh	r3, [r1, #12]
 800ab22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab24:	079d      	lsls	r5, r3, #30
 800ab26:	4606      	mov	r6, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	d507      	bpl.n	800ab3c <__smakebuf_r+0x1c>
 800ab2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	6123      	str	r3, [r4, #16]
 800ab34:	2301      	movs	r3, #1
 800ab36:	6163      	str	r3, [r4, #20]
 800ab38:	b002      	add	sp, #8
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	ab01      	add	r3, sp, #4
 800ab3e:	466a      	mov	r2, sp
 800ab40:	f7ff ffc9 	bl	800aad6 <__swhatbuf_r>
 800ab44:	9900      	ldr	r1, [sp, #0]
 800ab46:	4605      	mov	r5, r0
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7fd fcb9 	bl	80084c0 <_malloc_r>
 800ab4e:	b948      	cbnz	r0, 800ab64 <__smakebuf_r+0x44>
 800ab50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab54:	059a      	lsls	r2, r3, #22
 800ab56:	d4ef      	bmi.n	800ab38 <__smakebuf_r+0x18>
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	f043 0302 	orr.w	r3, r3, #2
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	e7e3      	b.n	800ab2c <__smakebuf_r+0xc>
 800ab64:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <__smakebuf_r+0x7c>)
 800ab66:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	6020      	str	r0, [r4, #0]
 800ab6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	9b00      	ldr	r3, [sp, #0]
 800ab74:	6163      	str	r3, [r4, #20]
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	6120      	str	r0, [r4, #16]
 800ab7a:	b15b      	cbz	r3, 800ab94 <__smakebuf_r+0x74>
 800ab7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab80:	4630      	mov	r0, r6
 800ab82:	f000 f863 	bl	800ac4c <_isatty_r>
 800ab86:	b128      	cbz	r0, 800ab94 <__smakebuf_r+0x74>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	f023 0303 	bic.w	r3, r3, #3
 800ab8e:	f043 0301 	orr.w	r3, r3, #1
 800ab92:	81a3      	strh	r3, [r4, #12]
 800ab94:	89a0      	ldrh	r0, [r4, #12]
 800ab96:	4305      	orrs	r5, r0
 800ab98:	81a5      	strh	r5, [r4, #12]
 800ab9a:	e7cd      	b.n	800ab38 <__smakebuf_r+0x18>
 800ab9c:	0800a489 	.word	0x0800a489

0800aba0 <_raise_r>:
 800aba0:	291f      	cmp	r1, #31
 800aba2:	b538      	push	{r3, r4, r5, lr}
 800aba4:	4604      	mov	r4, r0
 800aba6:	460d      	mov	r5, r1
 800aba8:	d904      	bls.n	800abb4 <_raise_r+0x14>
 800abaa:	2316      	movs	r3, #22
 800abac:	6003      	str	r3, [r0, #0]
 800abae:	f04f 30ff 	mov.w	r0, #4294967295
 800abb2:	bd38      	pop	{r3, r4, r5, pc}
 800abb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abb6:	b112      	cbz	r2, 800abbe <_raise_r+0x1e>
 800abb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abbc:	b94b      	cbnz	r3, 800abd2 <_raise_r+0x32>
 800abbe:	4620      	mov	r0, r4
 800abc0:	f000 f830 	bl	800ac24 <_getpid_r>
 800abc4:	462a      	mov	r2, r5
 800abc6:	4601      	mov	r1, r0
 800abc8:	4620      	mov	r0, r4
 800abca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abce:	f000 b817 	b.w	800ac00 <_kill_r>
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d00a      	beq.n	800abec <_raise_r+0x4c>
 800abd6:	1c59      	adds	r1, r3, #1
 800abd8:	d103      	bne.n	800abe2 <_raise_r+0x42>
 800abda:	2316      	movs	r3, #22
 800abdc:	6003      	str	r3, [r0, #0]
 800abde:	2001      	movs	r0, #1
 800abe0:	e7e7      	b.n	800abb2 <_raise_r+0x12>
 800abe2:	2400      	movs	r4, #0
 800abe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abe8:	4628      	mov	r0, r5
 800abea:	4798      	blx	r3
 800abec:	2000      	movs	r0, #0
 800abee:	e7e0      	b.n	800abb2 <_raise_r+0x12>

0800abf0 <raise>:
 800abf0:	4b02      	ldr	r3, [pc, #8]	; (800abfc <raise+0xc>)
 800abf2:	4601      	mov	r1, r0
 800abf4:	6818      	ldr	r0, [r3, #0]
 800abf6:	f7ff bfd3 	b.w	800aba0 <_raise_r>
 800abfa:	bf00      	nop
 800abfc:	20000010 	.word	0x20000010

0800ac00 <_kill_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4d07      	ldr	r5, [pc, #28]	; (800ac20 <_kill_r+0x20>)
 800ac04:	2300      	movs	r3, #0
 800ac06:	4604      	mov	r4, r0
 800ac08:	4608      	mov	r0, r1
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	602b      	str	r3, [r5, #0]
 800ac0e:	f7fd fa03 	bl	8008018 <_kill>
 800ac12:	1c43      	adds	r3, r0, #1
 800ac14:	d102      	bne.n	800ac1c <_kill_r+0x1c>
 800ac16:	682b      	ldr	r3, [r5, #0]
 800ac18:	b103      	cbz	r3, 800ac1c <_kill_r+0x1c>
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	bd38      	pop	{r3, r4, r5, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000bbc 	.word	0x20000bbc

0800ac24 <_getpid_r>:
 800ac24:	f7fd b9f6 	b.w	8008014 <_getpid>

0800ac28 <_fstat_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d07      	ldr	r5, [pc, #28]	; (800ac48 <_fstat_r+0x20>)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4608      	mov	r0, r1
 800ac32:	4611      	mov	r1, r2
 800ac34:	602b      	str	r3, [r5, #0]
 800ac36:	f7fd fa3c 	bl	80080b2 <_fstat>
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	d102      	bne.n	800ac44 <_fstat_r+0x1c>
 800ac3e:	682b      	ldr	r3, [r5, #0]
 800ac40:	b103      	cbz	r3, 800ac44 <_fstat_r+0x1c>
 800ac42:	6023      	str	r3, [r4, #0]
 800ac44:	bd38      	pop	{r3, r4, r5, pc}
 800ac46:	bf00      	nop
 800ac48:	20000bbc 	.word	0x20000bbc

0800ac4c <_isatty_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d06      	ldr	r5, [pc, #24]	; (800ac68 <_isatty_r+0x1c>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7fd fa30 	bl	80080bc <_isatty>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_isatty_r+0x1a>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_isatty_r+0x1a>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	20000bbc 	.word	0x20000bbc

0800ac6c <_init>:
 800ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6e:	bf00      	nop
 800ac70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac72:	bc08      	pop	{r3}
 800ac74:	469e      	mov	lr, r3
 800ac76:	4770      	bx	lr

0800ac78 <_fini>:
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7a:	bf00      	nop
 800ac7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7e:	bc08      	pop	{r3}
 800ac80:	469e      	mov	lr, r3
 800ac82:	4770      	bx	lr
