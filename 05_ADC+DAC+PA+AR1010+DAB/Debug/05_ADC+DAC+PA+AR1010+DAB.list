
05_ADC+DAC+PA+AR1010+DAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bd0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d08  08009dd0  08009dd0  00019dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aae0  0800aae0  0001aae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aae4  0800aae4  0001aae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005c8  20000000  0800aae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000aa0  200005c8  0800b0b0  000205c8  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20001068  0800b0b0  00021068  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000205c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027ce7  00000000  00000000  000205f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000059e3  00000000  00000000  000482dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00014439  00000000  00000000  0004dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001578  00000000  00000000  00062100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002018  00000000  00000000  00063678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002aa4e  00000000  00000000  00065690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023f87  00000000  00000000  000900de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fa551  00000000  00000000  000b4065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001ae5b6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005268  00000000  00000000  001ae608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001b3870  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001b393c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200005c8 	.word	0x200005c8
 800021c:	00000000 	.word	0x00000000
 8000220:	08009db8 	.word	0x08009db8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200005cc 	.word	0x200005cc
 800023c:	08009db8 	.word	0x08009db8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_InitTick+0x3c>)
{
 80005f8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_InitTick+0x40>)
 80005fc:	7818      	ldrb	r0, [r3, #0]
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f0 	udiv	r3, r3, r0
 8000606:	6810      	ldr	r0, [r2, #0]
 8000608:	fbb0 f0f3 	udiv	r0, r0, r3
 800060c:	f000 f898 	bl	8000740 <HAL_SYSTICK_Config>
 8000610:	4604      	mov	r4, r0
 8000612:	b958      	cbnz	r0, 800062c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000614:	2d0f      	cmp	r5, #15
 8000616:	d809      	bhi.n	800062c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	4602      	mov	r2, r0
 800061a:	4629      	mov	r1, r5
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f84e 	bl	80006c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HAL_InitTick+0x44>)
 8000626:	4620      	mov	r0, r4
 8000628:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800062c:	2001      	movs	r0, #1
 800062e:	e7fc      	b.n	800062a <HAL_InitTick+0x36>
 8000630:	20000000 	.word	0x20000000
 8000634:	200003f4 	.word	0x200003f4
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_Init>:
{
 800063c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f82c 	bl	800069c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ffd5 	bl	80005f4 <HAL_InitTick>
  HAL_MspInit();
 800064a:	f006 fb4f 	bl	8006cec <HAL_MspInit>
}
 800064e:	2000      	movs	r0, #0
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x10>)
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_IncTick+0x14>)
 8000658:	6811      	ldr	r1, [r2, #0]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	440b      	add	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200005e4 	.word	0x200005e4
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <HAL_GetTick+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	200005e4 	.word	0x200005e4

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff6 	bl	800066c <HAL_GetTick>
 8000680:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000684:	bf1e      	ittt	ne
 8000686:	4b04      	ldrne	r3, [pc, #16]	; (8000698 <HAL_Delay+0x20>)
 8000688:	781b      	ldrbne	r3, [r3, #0]
 800068a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	1b43      	subs	r3, r0, r5
 8000692:	42a3      	cmp	r3, r4
 8000694:	d3fa      	bcc.n	800068c <HAL_Delay+0x14>
  {
  }
}
 8000696:	bd38      	pop	{r3, r4, r5, pc}
 8000698:	20000000 	.word	0x20000000

0800069c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006aa:	0412      	lsls	r2, r2, #16
 80006ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	68dc      	ldr	r4, [r3, #12]
 80006c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ca:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	2d04      	cmp	r5, #4
 80006d2:	bf28      	it	cs
 80006d4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006dc:	bf8c      	ite	hi
 80006de:	3c03      	subhi	r4, #3
 80006e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80006e6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	fa01 f104 	lsl.w	r1, r1, r4
 80006f8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000700:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000702:	db06      	blt.n	8000712 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000708:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800070c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000710:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	f000 000f 	and.w	r0, r0, #15
 8000716:	4a02      	ldr	r2, [pc, #8]	; (8000720 <HAL_NVIC_SetPriority+0x60>)
 8000718:	5413      	strb	r3, [r2, r0]
 800071a:	e7f9      	b.n	8000710 <HAL_NVIC_SetPriority+0x50>
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	e000ed14 	.word	0xe000ed14

08000724 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000724:	2800      	cmp	r0, #0
 8000726:	db08      	blt.n	800073a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000728:	0942      	lsrs	r2, r0, #5
 800072a:	2301      	movs	r3, #1
 800072c:	f000 001f 	and.w	r0, r0, #31
 8000730:	fa03 f000 	lsl.w	r0, r3, r0
 8000734:	4b01      	ldr	r3, [pc, #4]	; (800073c <HAL_NVIC_EnableIRQ+0x18>)
 8000736:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	3801      	subs	r0, #1
 8000742:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000746:	d20b      	bcs.n	8000760 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <HAL_SYSTICK_Config+0x24>)
 800074e:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000752:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000758:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000760:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000768:	6803      	ldr	r3, [r0, #0]
{
 800076a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800076c:	2018      	movs	r0, #24
 800076e:	b2d9      	uxtb	r1, r3
 8000770:	3910      	subs	r1, #16
 8000772:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8000776:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000778:	4c05      	ldr	r4, [pc, #20]	; (8000790 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800077a:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800077c:	5c20      	ldrb	r0, [r4, r0]
 800077e:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000780:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8000784:	f020 0003 	bic.w	r0, r0, #3
 8000788:	bf88      	it	hi
 800078a:	3004      	addhi	r0, #4
 800078c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	08009df0 	.word	0x08009df0

08000794 <HAL_DMA_Init>:
{
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000798:	f7ff ff68 	bl	800066c <HAL_GetTick>
 800079c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800079e:	2c00      	cmp	r4, #0
 80007a0:	d073      	beq.n	800088a <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 80007a2:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80007a4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80007a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80007b0:	6813      	ldr	r3, [r2, #0]
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007b8:	6821      	ldr	r1, [r4, #0]
 80007ba:	680b      	ldr	r3, [r1, #0]
 80007bc:	07d8      	lsls	r0, r3, #31
 80007be:	d42f      	bmi.n	8000820 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80007c0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c2:	4d33      	ldr	r5, [pc, #204]	; (8000890 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007c4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	68e2      	ldr	r2, [r4, #12]
 80007d0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007d2:	6922      	ldr	r2, [r4, #16]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	6962      	ldr	r2, [r4, #20]
 80007d8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007da:	69e2      	ldr	r2, [r4, #28]
 80007dc:	4303      	orrs	r3, r0
 80007de:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007e0:	6a22      	ldr	r2, [r4, #32]
 80007e2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007e8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007ec:	bf02      	ittt	eq
 80007ee:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80007f2:	4335      	orreq	r5, r6
 80007f4:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007f6:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80007f8:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007fa:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007fc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000800:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000804:	d133      	bne.n	800086e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8000806:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000808:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800080a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800080c:	b37d      	cbz	r5, 800086e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800080e:	b990      	cbnz	r0, 8000836 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8000810:	2a01      	cmp	r2, #1
 8000812:	d021      	beq.n	8000858 <HAL_DMA_Init+0xc4>
 8000814:	f032 0202 	bics.w	r2, r2, #2
 8000818:	d129      	bne.n	800086e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800081a:	01ea      	lsls	r2, r5, #7
 800081c:	d527      	bpl.n	800086e <HAL_DMA_Init+0xda>
 800081e:	e01e      	b.n	800085e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000820:	f7ff ff24 	bl	800066c <HAL_GetTick>
 8000824:	1b40      	subs	r0, r0, r5
 8000826:	2805      	cmp	r0, #5
 8000828:	d9c6      	bls.n	80007b8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082a:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800082c:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000830:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000834:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000836:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800083a:	d114      	bne.n	8000866 <HAL_DMA_Init+0xd2>
    switch (tmp)
 800083c:	2a03      	cmp	r2, #3
 800083e:	d816      	bhi.n	800086e <HAL_DMA_Init+0xda>
 8000840:	a001      	add	r0, pc, #4	; (adr r0, 8000848 <HAL_DMA_Init+0xb4>)
 8000842:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000846:	bf00      	nop
 8000848:	0800085f 	.word	0x0800085f
 800084c:	0800081b 	.word	0x0800081b
 8000850:	0800085f 	.word	0x0800085f
 8000854:	08000859 	.word	0x08000859
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000858:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800085c:	d107      	bne.n	800086e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800085e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000860:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000862:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000864:	e7e4      	b.n	8000830 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8000866:	2a02      	cmp	r2, #2
 8000868:	d9f9      	bls.n	800085e <HAL_DMA_Init+0xca>
 800086a:	2a03      	cmp	r2, #3
 800086c:	d0d5      	beq.n	800081a <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800086e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000870:	4620      	mov	r0, r4
 8000872:	f7ff ff79 	bl	8000768 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000876:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000878:	233f      	movs	r3, #63	; 0x3f
 800087a:	4093      	lsls	r3, r2
 800087c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800087e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000880:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000882:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000884:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000888:	e7d4      	b.n	8000834 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800088a:	2001      	movs	r0, #1
 800088c:	e7d2      	b.n	8000834 <HAL_DMA_Init+0xa0>
 800088e:	bf00      	nop
 8000890:	e010803f 	.word	0xe010803f

08000894 <HAL_DMA_Start_IT>:
{
 8000894:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000896:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800089a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800089c:	2c01      	cmp	r4, #1
 800089e:	d034      	beq.n	800090a <HAL_DMA_Start_IT+0x76>
 80008a0:	2401      	movs	r4, #1
 80008a2:	2500      	movs	r5, #0
 80008a4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80008a8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	f04f 0402 	mov.w	r4, #2
 80008b2:	d128      	bne.n	8000906 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80008b4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008b8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008ba:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008bc:	6825      	ldr	r5, [r4, #0]
 80008be:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80008c2:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80008c4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008c6:	6883      	ldr	r3, [r0, #8]
 80008c8:	2b40      	cmp	r3, #64	; 0x40
 80008ca:	d119      	bne.n	8000900 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 80008cc:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80008ce:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008d0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	4093      	lsls	r3, r2
 80008d6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	f043 0316 	orr.w	r3, r3, #22
 80008de:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80008e0:	6963      	ldr	r3, [r4, #20]
 80008e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80008e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008ea:	b11b      	cbz	r3, 80008f4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008f4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008f6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6023      	str	r3, [r4, #0]
}
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000900:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000902:	60e2      	str	r2, [r4, #12]
 8000904:	e7e4      	b.n	80008d0 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000906:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800090a:	2002      	movs	r0, #2
 800090c:	e7f7      	b.n	80008fe <HAL_DMA_Start_IT+0x6a>

0800090e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800090e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000912:	2b02      	cmp	r3, #2
 8000914:	d003      	beq.n	800091e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800091a:	2001      	movs	r0, #1
 800091c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800091e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000920:	2305      	movs	r3, #5
 8000922:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000926:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000928:	6813      	ldr	r3, [r2, #0]
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	4770      	bx	lr
	...

08000934 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000934:	2300      	movs	r3, #0
{
 8000936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000938:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800093a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800093c:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <HAL_DMA_IRQHandler+0x178>)
{
 800093e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000940:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000942:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000944:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000946:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000948:	409a      	lsls	r2, r3
 800094a:	4232      	tst	r2, r6
 800094c:	d00c      	beq.n	8000968 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800094e:	6801      	ldr	r1, [r0, #0]
 8000950:	6808      	ldr	r0, [r1, #0]
 8000952:	0740      	lsls	r0, r0, #29
 8000954:	d508      	bpl.n	8000968 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000956:	6808      	ldr	r0, [r1, #0]
 8000958:	f020 0004 	bic.w	r0, r0, #4
 800095c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800095e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000960:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000962:	f042 0201 	orr.w	r2, r2, #1
 8000966:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000968:	2201      	movs	r2, #1
 800096a:	409a      	lsls	r2, r3
 800096c:	4232      	tst	r2, r6
 800096e:	d008      	beq.n	8000982 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000970:	6821      	ldr	r1, [r4, #0]
 8000972:	6949      	ldr	r1, [r1, #20]
 8000974:	0609      	lsls	r1, r1, #24
 8000976:	d504      	bpl.n	8000982 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000978:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800097a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800097c:	f042 0202 	orr.w	r2, r2, #2
 8000980:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000982:	2204      	movs	r2, #4
 8000984:	409a      	lsls	r2, r3
 8000986:	4232      	tst	r2, r6
 8000988:	d008      	beq.n	800099c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800098a:	6821      	ldr	r1, [r4, #0]
 800098c:	6809      	ldr	r1, [r1, #0]
 800098e:	0788      	lsls	r0, r1, #30
 8000990:	d504      	bpl.n	800099c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000992:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000994:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000996:	f042 0204 	orr.w	r2, r2, #4
 800099a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800099c:	2210      	movs	r2, #16
 800099e:	409a      	lsls	r2, r3
 80009a0:	4232      	tst	r2, r6
 80009a2:	d010      	beq.n	80009c6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	6819      	ldr	r1, [r3, #0]
 80009a8:	0709      	lsls	r1, r1, #28
 80009aa:	d50c      	bpl.n	80009c6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80009ac:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	0350      	lsls	r0, r2, #13
 80009b2:	d537      	bpl.n	8000a24 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	0319      	lsls	r1, r3, #12
 80009b8:	d401      	bmi.n	80009be <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80009ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009bc:	e000      	b.n	80009c0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80009be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80009c0:	b10b      	cbz	r3, 80009c6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80009c2:	4620      	mov	r0, r4
 80009c4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80009c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80009c8:	2220      	movs	r2, #32
 80009ca:	408a      	lsls	r2, r1
 80009cc:	4232      	tst	r2, r6
 80009ce:	d03a      	beq.n	8000a46 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	06c6      	lsls	r6, r0, #27
 80009d6:	d536      	bpl.n	8000a46 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80009d8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009da:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80009de:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009e0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009e2:	d127      	bne.n	8000a34 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009e4:	f022 0216 	bic.w	r2, r2, #22
 80009e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009f0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009f4:	b90a      	cbnz	r2, 80009fa <HAL_DMA_IRQHandler+0xc6>
 80009f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009f8:	b11a      	cbz	r2, 8000a02 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	f022 0208 	bic.w	r2, r2, #8
 8000a00:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a02:	233f      	movs	r3, #63	; 0x3f
 8000a04:	408b      	lsls	r3, r1
 8000a06:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000a14:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d045      	beq.n	8000aa6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8000a1a:	4620      	mov	r0, r4
}
 8000a1c:	b003      	add	sp, #12
 8000a1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000a22:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	05d2      	lsls	r2, r2, #23
 8000a28:	d4c7      	bmi.n	80009ba <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	f022 0208 	bic.w	r2, r2, #8
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	e7c2      	b.n	80009ba <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a34:	0350      	lsls	r0, r2, #13
 8000a36:	d527      	bpl.n	8000a88 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	0319      	lsls	r1, r3, #12
 8000a3c:	d431      	bmi.n	8000aa2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8000a3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000a40:	b10b      	cbz	r3, 8000a46 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8000a42:	4620      	mov	r0, r4
 8000a44:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a48:	b36b      	cbz	r3, 8000aa6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a4c:	07da      	lsls	r2, r3, #31
 8000a4e:	d519      	bpl.n	8000a84 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8000a50:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8000a54:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000a56:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a60:	6813      	ldr	r3, [r2, #0]
 8000a62:	f023 0301 	bic.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000a68:	9b01      	ldr	r3, [sp, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	42bb      	cmp	r3, r7
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	d802      	bhi.n	8000a78 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a72:	6813      	ldr	r3, [r2, #0]
 8000a74:	07db      	lsls	r3, r3, #31
 8000a76:	d4f7      	bmi.n	8000a68 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000a84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a86:	e7c6      	b.n	8000a16 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a8e:	d108      	bne.n	8000aa2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	f021 0110 	bic.w	r1, r1, #16
 8000a96:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a98:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000a9a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000aa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000aa4:	e7cc      	b.n	8000a40 <HAL_DMA_IRQHandler+0x10c>
}
 8000aa6:	b003      	add	sp, #12
 8000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200003f4 	.word	0x200003f4

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ab4:	2300      	movs	r3, #0
{
 8000ab6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab8:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000c8c <HAL_GPIO_Init+0x1dc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000abc:	4a71      	ldr	r2, [pc, #452]	; (8000c84 <HAL_GPIO_Init+0x1d4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000abe:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000c90 <HAL_GPIO_Init+0x1e0>
    ioposition = ((uint32_t)0x01) << position;
 8000ac2:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac4:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000ac6:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac8:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000acc:	ea37 0404 	bics.w	r4, r7, r4
 8000ad0:	f040 80be 	bne.w	8000c50 <HAL_GPIO_Init+0x1a0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad4:	684c      	ldr	r4, [r1, #4]
 8000ad6:	f024 0a10 	bic.w	sl, r4, #16
 8000ada:	f1ba 0f02 	cmp.w	sl, #2
 8000ade:	d116      	bne.n	8000b0e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 8000ae0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ae4:	f003 0b07 	and.w	fp, r3, #7
 8000ae8:	f04f 0c0f 	mov.w	ip, #15
 8000aec:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8000af0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000af4:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000af8:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000afc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b00:	690e      	ldr	r6, [r1, #16]
 8000b02:	fa06 f60b 	lsl.w	r6, r6, fp
 8000b06:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000b0a:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8000b0e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b12:	f04f 0c03 	mov.w	ip, #3
      temp = GPIOx->MODER;
 8000b16:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b1e:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b22:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b26:	ea6f 060c 	mvn.w	r6, ip
 8000b2a:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b2e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b32:	9601      	str	r6, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b34:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000b38:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000b3c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b40:	d815      	bhi.n	8000b6e <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 8000b42:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b46:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b4a:	68ce      	ldr	r6, [r1, #12]
 8000b4c:	fa06 fa0e 	lsl.w	sl, r6, lr
 8000b50:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8000b54:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b58:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5c:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b60:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000b64:	fa0c fc03 	lsl.w	ip, ip, r3
 8000b68:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8000b6c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b6e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b70:	9e01      	ldr	r6, [sp, #4]
 8000b72:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b74:	688e      	ldr	r6, [r1, #8]
 8000b76:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b7a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000b7c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7e:	00e6      	lsls	r6, r4, #3
 8000b80:	d566      	bpl.n	8000c50 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000b86:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b8a:	f003 0c03 	and.w	ip, r3, #3
 8000b8e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b96:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b9a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000ba2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000ba6:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000baa:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000bae:	9603      	str	r6, [sp, #12]
 8000bb0:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bb2:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8000bb6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bba:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bbe:	4e32      	ldr	r6, [pc, #200]	; (8000c88 <HAL_GPIO_Init+0x1d8>)
 8000bc0:	42b0      	cmp	r0, r6
 8000bc2:	d04c      	beq.n	8000c5e <HAL_GPIO_Init+0x1ae>
 8000bc4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bc8:	42b0      	cmp	r0, r6
 8000bca:	d04a      	beq.n	8000c62 <HAL_GPIO_Init+0x1b2>
 8000bcc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bd0:	42b0      	cmp	r0, r6
 8000bd2:	d048      	beq.n	8000c66 <HAL_GPIO_Init+0x1b6>
 8000bd4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bd8:	42b0      	cmp	r0, r6
 8000bda:	d046      	beq.n	8000c6a <HAL_GPIO_Init+0x1ba>
 8000bdc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000be0:	42b0      	cmp	r0, r6
 8000be2:	d044      	beq.n	8000c6e <HAL_GPIO_Init+0x1be>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d044      	beq.n	8000c72 <HAL_GPIO_Init+0x1c2>
 8000be8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000bec:	42b0      	cmp	r0, r6
 8000bee:	d042      	beq.n	8000c76 <HAL_GPIO_Init+0x1c6>
 8000bf0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bf4:	42b0      	cmp	r0, r6
 8000bf6:	d040      	beq.n	8000c7a <HAL_GPIO_Init+0x1ca>
 8000bf8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bfc:	42b0      	cmp	r0, r6
 8000bfe:	d03e      	beq.n	8000c7e <HAL_GPIO_Init+0x1ce>
 8000c00:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c04:	42b0      	cmp	r0, r6
 8000c06:	bf0c      	ite	eq
 8000c08:	2609      	moveq	r6, #9
 8000c0a:	260a      	movne	r6, #10
 8000c0c:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c10:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c14:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c18:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c1a:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000c1e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c20:	bf0c      	ite	eq
 8000c22:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c24:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c26:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000c2a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000c2c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c2e:	bf0c      	ite	eq
 8000c30:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c32:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c34:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000c38:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000c3a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	bf0c      	ite	eq
 8000c3e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c40:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c42:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000c44:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000c46:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c48:	bf54      	ite	pl
 8000c4a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000c4c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000c4e:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c50:	3301      	adds	r3, #1
 8000c52:	2b10      	cmp	r3, #16
 8000c54:	f47f af35 	bne.w	8000ac2 <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 8000c58:	b005      	add	sp, #20
 8000c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c5e:	2600      	movs	r6, #0
 8000c60:	e7d4      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c62:	2601      	movs	r6, #1
 8000c64:	e7d2      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c66:	2602      	movs	r6, #2
 8000c68:	e7d0      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c6a:	2603      	movs	r6, #3
 8000c6c:	e7ce      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c6e:	2604      	movs	r6, #4
 8000c70:	e7cc      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c72:	2605      	movs	r6, #5
 8000c74:	e7ca      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c76:	2606      	movs	r6, #6
 8000c78:	e7c8      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c7a:	2607      	movs	r6, #7
 8000c7c:	e7c6      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c7e:	2608      	movs	r6, #8
 8000c80:	e7c4      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c82:	bf00      	nop
 8000c84:	40013c00 	.word	0x40013c00
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40021400 	.word	0x40021400

08000c94 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c94:	6903      	ldr	r3, [r0, #16]
 8000c96:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c98:	bf14      	ite	ne
 8000c9a:	2001      	movne	r0, #1
 8000c9c:	2000      	moveq	r0, #0
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca0:	b10a      	cbz	r2, 8000ca6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ca2:	6181      	str	r1, [r0, #24]
  }
}
 8000ca4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ca6:	0409      	lsls	r1, r1, #16
 8000ca8:	e7fb      	b.n	8000ca2 <HAL_GPIO_WritePin+0x2>

08000caa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000caa:	6943      	ldr	r3, [r0, #20]
 8000cac:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cb0:	bf08      	it	eq
 8000cb2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb4:	6181      	str	r1, [r0, #24]
  }
}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000cba:	6951      	ldr	r1, [r2, #20]
 8000cbc:	4201      	tst	r1, r0
{
 8000cbe:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000cc0:	d002      	beq.n	8000cc8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cc2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cc4:	f005 f92e 	bl	8005f24 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cc8:	bd08      	pop	{r3, pc}
 8000cca:	bf00      	nop
 8000ccc:	40013c00 	.word	0x40013c00

08000cd0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000cd0:	6803      	ldr	r3, [r0, #0]
 8000cd2:	699a      	ldr	r2, [r3, #24]
 8000cd4:	0791      	lsls	r1, r2, #30
 8000cd6:	d501      	bpl.n	8000cdc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	07d2      	lsls	r2, r2, #31
 8000ce0:	d403      	bmi.n	8000cea <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ce2:	699a      	ldr	r2, [r3, #24]
 8000ce4:	f042 0201 	orr.w	r2, r2, #1
 8000ce8:	619a      	str	r2, [r3, #24]
  }
}
 8000cea:	4770      	bx	lr

08000cec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000cec:	b530      	push	{r4, r5, lr}
 8000cee:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000cf0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000cf4:	6804      	ldr	r4, [r0, #0]
 8000cf6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8000cfa:	6860      	ldr	r0, [r4, #4]
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <I2C_TransferConfig+0x24>)
 8000d00:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8000d04:	430a      	orrs	r2, r1
 8000d06:	ea20 0003 	bic.w	r0, r0, r3
 8000d0a:	4302      	orrs	r2, r0
 8000d0c:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000d0e:	bd30      	pop	{r4, r5, pc}
 8000d10:	03ff63ff 	.word	0x03ff63ff

08000d14 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000d14:	f011 0301 	ands.w	r3, r1, #1
 8000d18:	d007      	beq.n	8000d2a <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000d1a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000d22:	2b28      	cmp	r3, #40	; 0x28
 8000d24:	bf0c      	ite	eq
 8000d26:	2342      	moveq	r3, #66	; 0x42
 8000d28:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000d2a:	078a      	lsls	r2, r1, #30
 8000d2c:	d509      	bpl.n	8000d42 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000d2e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000d32:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000d36:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000d38:	bf0c      	ite	eq
 8000d3a:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000d3e:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000d42:	074a      	lsls	r2, r1, #29
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000d44:	6801      	ldr	r1, [r0, #0]
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000d46:	bf48      	it	mi
 8000d48:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000d4c:	680a      	ldr	r2, [r1, #0]
 8000d4e:	ea22 0303 	bic.w	r3, r2, r3
 8000d52:	600b      	str	r3, [r1, #0]
}
 8000d54:	4770      	bx	lr

08000d56 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d56:	6803      	ldr	r3, [r0, #0]
{
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d5c:	6998      	ldr	r0, [r3, #24]
{
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d62:	f010 0010 	ands.w	r0, r0, #16
 8000d66:	d116      	bne.n	8000d96 <I2C_IsAcknowledgeFailed+0x40>
}
 8000d68:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000d6a:	1c69      	adds	r1, r5, #1
 8000d6c:	d014      	beq.n	8000d98 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d6e:	f7ff fc7d 	bl	800066c <HAL_GetTick>
 8000d72:	1b80      	subs	r0, r0, r6
 8000d74:	4285      	cmp	r5, r0
 8000d76:	d300      	bcc.n	8000d7a <I2C_IsAcknowledgeFailed+0x24>
 8000d78:	b96d      	cbnz	r5, 8000d96 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d7c:	f043 0320 	orr.w	r3, r3, #32
 8000d80:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000d82:	2320      	movs	r3, #32
 8000d84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000d8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000d92:	2001      	movs	r0, #1
 8000d94:	e7e8      	b.n	8000d68 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	699a      	ldr	r2, [r3, #24]
 8000d9a:	0692      	lsls	r2, r2, #26
 8000d9c:	d5e5      	bpl.n	8000d6a <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d9e:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000da0:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8000da2:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000da4:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000da6:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000da8:	f7ff ff92 	bl	8000cd0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000dac:	6822      	ldr	r2, [r4, #0]
 8000dae:	6853      	ldr	r3, [r2, #4]
 8000db0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000db4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000db8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000dbc:	f023 0301 	bic.w	r3, r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000dc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000dcc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000dd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000dd8:	e7db      	b.n	8000d92 <I2C_IsAcknowledgeFailed+0x3c>

08000dda <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000dda:	b570      	push	{r4, r5, r6, lr}
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460d      	mov	r5, r1
 8000de0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	079b      	lsls	r3, r3, #30
 8000de8:	d501      	bpl.n	8000dee <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000dea:	2000      	movs	r0, #0
}
 8000dec:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dee:	4632      	mov	r2, r6
 8000df0:	4629      	mov	r1, r5
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff ffaf 	bl	8000d56 <I2C_IsAcknowledgeFailed>
 8000df8:	b9a0      	cbnz	r0, 8000e24 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000dfa:	1c6a      	adds	r2, r5, #1
 8000dfc:	d0f1      	beq.n	8000de2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dfe:	f7ff fc35 	bl	800066c <HAL_GetTick>
 8000e02:	1b80      	subs	r0, r0, r6
 8000e04:	42a8      	cmp	r0, r5
 8000e06:	d801      	bhi.n	8000e0c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d1ea      	bne.n	8000de2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e14:	2320      	movs	r3, #32
 8000e16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000e20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
 8000e26:	e7e1      	b.n	8000dec <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08000e28 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	460d      	mov	r5, r1
 8000e2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	075b      	lsls	r3, r3, #29
 8000e36:	d40e      	bmi.n	8000e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e38:	4632      	mov	r2, r6
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff ff8a 	bl	8000d56 <I2C_IsAcknowledgeFailed>
 8000e42:	b9f0      	cbnz	r0, 8000e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	699a      	ldr	r2, [r3, #24]
 8000e48:	0691      	lsls	r1, r2, #26
 8000e4a:	d51c      	bpl.n	8000e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000e4c:	699a      	ldr	r2, [r3, #24]
 8000e4e:	0752      	lsls	r2, r2, #29
 8000e50:	d503      	bpl.n	8000e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8000e52:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000e54:	b10a      	cbz	r2, 8000e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8000e56:	2000      	movs	r0, #0
}
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000e64:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000e68:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000e6c:	f022 0201 	bic.w	r2, r2, #1
 8000e70:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e76:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000e7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000e82:	2001      	movs	r0, #1
 8000e84:	e7e8      	b.n	8000e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e86:	f7ff fbf1 	bl	800066c <HAL_GetTick>
 8000e8a:	1b80      	subs	r0, r0, r6
 8000e8c:	42a8      	cmp	r0, r5
 8000e8e:	d801      	bhi.n	8000e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d1cd      	bne.n	8000e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e96:	f043 0320 	orr.w	r3, r3, #32
 8000e9a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e7eb      	b.n	8000e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08000ea6 <I2C_WaitOnFlagUntilTimeout>:
{
 8000ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eaa:	9f06      	ldr	r7, [sp, #24]
 8000eac:	4604      	mov	r4, r0
 8000eae:	4688      	mov	r8, r1
 8000eb0:	4616      	mov	r6, r2
 8000eb2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000eb4:	6822      	ldr	r2, [r4, #0]
 8000eb6:	6993      	ldr	r3, [r2, #24]
 8000eb8:	ea38 0303 	bics.w	r3, r8, r3
 8000ebc:	bf0c      	ite	eq
 8000ebe:	2301      	moveq	r3, #1
 8000ec0:	2300      	movne	r3, #0
 8000ec2:	42b3      	cmp	r3, r6
 8000ec4:	d001      	beq.n	8000eca <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	e015      	b.n	8000ef6 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000eca:	1c6b      	adds	r3, r5, #1
 8000ecc:	d0f3      	beq.n	8000eb6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ece:	f7ff fbcd 	bl	800066c <HAL_GetTick>
 8000ed2:	1bc0      	subs	r0, r0, r7
 8000ed4:	42a8      	cmp	r0, r5
 8000ed6:	d801      	bhi.n	8000edc <I2C_WaitOnFlagUntilTimeout+0x36>
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d1eb      	bne.n	8000eb4 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000edc:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000ede:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000ef2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8000ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000efc <I2C_RequestMemoryWrite>:
{
 8000efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000f00:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <I2C_RequestMemoryWrite+0x68>)
{
 8000f04:	4605      	mov	r5, r0
 8000f06:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	b2f2      	uxtb	r2, r6
 8000f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8000f10:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f14:	f7ff feea 	bl	8000cec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f18:	4628      	mov	r0, r5
 8000f1a:	4642      	mov	r2, r8
 8000f1c:	4639      	mov	r1, r7
 8000f1e:	f7ff ff5c 	bl	8000dda <I2C_WaitOnTXISFlagUntilTimeout>
 8000f22:	b118      	cbz	r0, 8000f2c <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8000f24:	2001      	movs	r0, #1
}
 8000f26:	b002      	add	sp, #8
 8000f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f2c:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f2e:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f30:	d10d      	bne.n	8000f4e <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f32:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000f34:	2200      	movs	r2, #0
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f3a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	f8cd 8000 	str.w	r8, [sp]
 8000f42:	f7ff ffb0 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000f46:	3800      	subs	r0, #0
 8000f48:	bf18      	it	ne
 8000f4a:	2001      	movne	r0, #1
 8000f4c:	e7eb      	b.n	8000f26 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000f4e:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f50:	4639      	mov	r1, r7
 8000f52:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f56:	4642      	mov	r2, r8
 8000f58:	f7ff ff3f 	bl	8000dda <I2C_WaitOnTXISFlagUntilTimeout>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d1e1      	bne.n	8000f24 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	e7e6      	b.n	8000f32 <I2C_RequestMemoryWrite+0x36>
 8000f64:	80002000 	.word	0x80002000

08000f68 <I2C_RequestMemoryRead>:
{
 8000f68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000f6c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <I2C_RequestMemoryRead+0x68>)
{
 8000f70:	4605      	mov	r5, r0
 8000f72:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	b2f2      	uxtb	r2, r6
 8000f78:	2300      	movs	r3, #0
{
 8000f7a:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f7e:	f7ff feb5 	bl	8000cec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f82:	4628      	mov	r0, r5
 8000f84:	4642      	mov	r2, r8
 8000f86:	4639      	mov	r1, r7
 8000f88:	f7ff ff27 	bl	8000dda <I2C_WaitOnTXISFlagUntilTimeout>
 8000f8c:	b118      	cbz	r0, 8000f96 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
}
 8000f90:	b002      	add	sp, #8
 8000f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f96:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f98:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f9a:	d10d      	bne.n	8000fb8 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f9c:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2140      	movs	r1, #64	; 0x40
 8000fa2:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fa4:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	f8cd 8000 	str.w	r8, [sp]
 8000fac:	f7ff ff7b 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000fb0:	3800      	subs	r0, #0
 8000fb2:	bf18      	it	ne
 8000fb4:	2001      	movne	r0, #1
 8000fb6:	e7eb      	b.n	8000f90 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000fb8:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fba:	4639      	mov	r1, r7
 8000fbc:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	f7ff ff0a 	bl	8000dda <I2C_WaitOnTXISFlagUntilTimeout>
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	d1e1      	bne.n	8000f8e <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fca:	682b      	ldr	r3, [r5, #0]
 8000fcc:	e7e6      	b.n	8000f9c <I2C_RequestMemoryRead+0x34>
 8000fce:	bf00      	nop
 8000fd0:	80002000 	.word	0x80002000

08000fd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000fd4:	b570      	push	{r4, r5, r6, lr}
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	460d      	mov	r5, r1
 8000fda:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	069b      	lsls	r3, r3, #26
 8000fe2:	d501      	bpl.n	8000fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000fe4:	2000      	movs	r0, #0
}
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fe8:	4632      	mov	r2, r6
 8000fea:	4629      	mov	r1, r5
 8000fec:	4620      	mov	r0, r4
 8000fee:	f7ff feb2 	bl	8000d56 <I2C_IsAcknowledgeFailed>
 8000ff2:	b990      	cbnz	r0, 800101a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ff4:	f7ff fb3a 	bl	800066c <HAL_GetTick>
 8000ff8:	1b80      	subs	r0, r0, r6
 8000ffa:	42a8      	cmp	r0, r5
 8000ffc:	d801      	bhi.n	8001002 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000ffe:	2d00      	cmp	r5, #0
 8001000:	d1ec      	bne.n	8000fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001002:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001004:	f043 0320 	orr.w	r3, r3, #32
 8001008:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800100a:	2320      	movs	r3, #32
 800100c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001010:	2300      	movs	r3, #0
 8001012:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001016:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800101a:	2001      	movs	r0, #1
 800101c:	e7e3      	b.n	8000fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800101e <HAL_I2C_Init>:
{
 800101e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001020:	4604      	mov	r4, r0
 8001022:	2800      	cmp	r0, #0
 8001024:	d04a      	beq.n	80010bc <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001026:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800102a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800102e:	b91b      	cbnz	r3, 8001038 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001030:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001034:	f005 fae8 	bl	8006608 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001038:	2324      	movs	r3, #36	; 0x24
 800103a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001048:	6862      	ldr	r2, [r4, #4]
 800104a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800104e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001056:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001058:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800105c:	2901      	cmp	r1, #1
 800105e:	d124      	bne.n	80010aa <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001064:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001066:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001068:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800106a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800106e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001072:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800107a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800107c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001080:	430a      	orrs	r2, r1
 8001082:	69a1      	ldr	r1, [r4, #24]
 8001084:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001088:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800108a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800109a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800109c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800109e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010a2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80010a8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010ae:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010b0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010b2:	d1d8      	bne.n	8001066 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	e7d4      	b.n	8001066 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80010bc:	2001      	movs	r0, #1
 80010be:	e7f3      	b.n	80010a8 <HAL_I2C_Init+0x8a>

080010c0 <HAL_I2C_Master_Transmit>:
{
 80010c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80010c4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80010ca:	4604      	mov	r4, r0
 80010cc:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ce:	2b20      	cmp	r3, #32
{
 80010d0:	4691      	mov	r9, r2
 80010d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010d4:	f040 8086 	bne.w	80011e4 <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 80010d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f000 8081 	beq.w	80011e4 <HAL_I2C_Master_Transmit+0x124>
 80010e2:	f04f 0a01 	mov.w	sl, #1
 80010e6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80010ea:	f7ff fabf 	bl	800066c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010ee:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80010f0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010f2:	9000      	str	r0, [sp, #0]
 80010f4:	4652      	mov	r2, sl
 80010f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fa:	4620      	mov	r0, r4
 80010fc:	f7ff fed3 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
 8001100:	b118      	cbz	r0, 800110a <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8001102:	2001      	movs	r0, #1
}
 8001104:	b002      	add	sp, #8
 8001106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800110a:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800110c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001110:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001112:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001116:	2310      	movs	r3, #16
 8001118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800111c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800111e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001122:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001124:	b29b      	uxth	r3, r3
 8001126:	2bff      	cmp	r3, #255	; 0xff
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_I2C_Master_Transmit+0x128>)
 800112a:	d926      	bls.n	800117a <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800112c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800112e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001130:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001132:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001136:	4631      	mov	r1, r6
 8001138:	4620      	mov	r0, r4
 800113a:	f7ff fdd7 	bl	8000cec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800113e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001140:	462a      	mov	r2, r5
 8001142:	4639      	mov	r1, r7
 8001144:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001146:	b29b      	uxth	r3, r3
 8001148:	b9fb      	cbnz	r3, 800118a <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800114a:	f7ff ff43 	bl	8000fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800114e:	2800      	cmp	r0, #0
 8001150:	d1d7      	bne.n	8001102 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	2120      	movs	r1, #32
 8001156:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800115e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001162:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800116c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001170:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001174:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001178:	e7c4      	b.n	8001104 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800117a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800117c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800117e:	b292      	uxth	r2, r2
 8001180:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	e7d5      	b.n	8001136 <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800118a:	f7ff fe26 	bl	8000dda <I2C_WaitOnTXISFlagUntilTimeout>
 800118e:	2800      	cmp	r0, #0
 8001190:	d1b7      	bne.n	8001102 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001194:	6822      	ldr	r2, [r4, #0]
 8001196:	f813 1b01 	ldrb.w	r1, [r3], #1
 800119a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800119c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800119e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011a0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80011a2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80011a4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80011a6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80011a8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80011aa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011ae:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0c3      	beq.n	800113e <HAL_I2C_Master_Transmit+0x7e>
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d1c1      	bne.n	800113e <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	4620      	mov	r0, r4
 80011c0:	9500      	str	r5, [sp, #0]
 80011c2:	f7ff fe70 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d19b      	bne.n	8001102 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2bff      	cmp	r3, #255	; 0xff
 80011d0:	d903      	bls.n	80011da <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011d2:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011d4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011d6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011d8:	e7ab      	b.n	8001132 <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 80011da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011dc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80011de:	b292      	uxth	r2, r2
 80011e0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011e2:	e7ce      	b.n	8001182 <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 80011e4:	2002      	movs	r0, #2
 80011e6:	e78d      	b.n	8001104 <HAL_I2C_Master_Transmit+0x44>
 80011e8:	80002000 	.word	0x80002000

080011ec <HAL_I2C_Master_Receive>:
{
 80011ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80011f0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80011f6:	4604      	mov	r4, r0
 80011f8:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fa:	2b20      	cmp	r3, #32
{
 80011fc:	4691      	mov	r9, r2
 80011fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001200:	f040 8087 	bne.w	8001312 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8001204:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001208:	2b01      	cmp	r3, #1
 800120a:	f000 8082 	beq.w	8001312 <HAL_I2C_Master_Receive+0x126>
 800120e:	f04f 0a01 	mov.w	sl, #1
 8001212:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001216:	f7ff fa29 	bl	800066c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800121a:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800121c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800121e:	9000      	str	r0, [sp, #0]
 8001220:	4652      	mov	r2, sl
 8001222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001226:	4620      	mov	r0, r4
 8001228:	f7ff fe3d 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
 800122c:	b118      	cbz	r0, 8001236 <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 800122e:	2001      	movs	r0, #1
}
 8001230:	b002      	add	sp, #8
 8001232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001236:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8001238:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800123c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800123e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001242:	2310      	movs	r3, #16
 8001244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001248:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800124a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800124e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001250:	b29b      	uxth	r3, r3
 8001252:	2bff      	cmp	r3, #255	; 0xff
 8001254:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_I2C_Master_Receive+0x12c>)
 8001256:	d926      	bls.n	80012a6 <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001258:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800125a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800125c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800125e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001262:	4631      	mov	r1, r6
 8001264:	4620      	mov	r0, r4
 8001266:	f7ff fd41 	bl	8000cec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800126a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800126c:	462a      	mov	r2, r5
 800126e:	4639      	mov	r1, r7
 8001270:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001272:	b29b      	uxth	r3, r3
 8001274:	b9fb      	cbnz	r3, 80012b6 <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001276:	f7ff fead 	bl	8000fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800127a:	2800      	cmp	r0, #0
 800127c:	d1d7      	bne.n	800122e <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	2120      	movs	r1, #32
 8001282:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800128a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800128e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001298:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800129c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012a0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80012a4:	e7c4      	b.n	8001230 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80012a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012a8:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80012aa:	b292      	uxth	r2, r2
 80012ac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	e7d5      	b.n	8001262 <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012b6:	f7ff fdb7 	bl	8000e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d1b7      	bne.n	800122e <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012c4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80012c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80012c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80012ca:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80012cc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80012ce:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80012d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80012d2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80012d4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80012d6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80012d8:	b29b      	uxth	r3, r3
 80012da:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012de:	b29b      	uxth	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0c2      	beq.n	800126a <HAL_I2C_Master_Receive+0x7e>
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d1c0      	bne.n	800126a <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	4620      	mov	r0, r4
 80012ee:	9500      	str	r5, [sp, #0]
 80012f0:	f7ff fdd9 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d19a      	bne.n	800122e <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2bff      	cmp	r3, #255	; 0xff
 80012fe:	d903      	bls.n	8001308 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001300:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001302:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001304:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001306:	e7aa      	b.n	800125e <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8001308:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800130a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800130c:	b292      	uxth	r2, r2
 800130e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001310:	e7cd      	b.n	80012ae <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 8001312:	2002      	movs	r0, #2
 8001314:	e78c      	b.n	8001230 <HAL_I2C_Master_Receive+0x44>
 8001316:	bf00      	nop
 8001318:	80002400 	.word	0x80002400

0800131c <HAL_I2C_Mem_Write>:
{
 800131c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001320:	b085      	sub	sp, #20
 8001322:	469b      	mov	fp, r3
 8001324:	4604      	mov	r4, r0
 8001326:	460f      	mov	r7, r1
 8001328:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800132c:	4692      	mov	sl, r2
 800132e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8001332:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001334:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001338:	2b20      	cmp	r3, #32
 800133a:	f040 80a3 	bne.w	8001484 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800133e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001340:	b10b      	cbz	r3, 8001346 <HAL_I2C_Mem_Write+0x2a>
 8001342:	9b03      	ldr	r3, [sp, #12]
 8001344:	b933      	cbnz	r3, 8001354 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800134a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800134c:	2001      	movs	r0, #1
}
 800134e:	b005      	add	sp, #20
 8001350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001354:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001358:	2b01      	cmp	r3, #1
 800135a:	f000 8093 	beq.w	8001484 <HAL_I2C_Mem_Write+0x168>
 800135e:	2501      	movs	r5, #1
 8001360:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001364:	f7ff f982 	bl	800066c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001368:	2319      	movs	r3, #25
 800136a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800136c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800136e:	462a      	mov	r2, r5
 8001370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff fd96 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
 800137a:	4680      	mov	r8, r0
 800137c:	2800      	cmp	r0, #0
 800137e:	d1e5      	bne.n	800134c <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001380:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8001382:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001384:	4652      	mov	r2, sl
 8001386:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001388:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800138c:	2340      	movs	r3, #64	; 0x40
 800138e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001394:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001396:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8001398:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800139a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800139c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80013a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013a2:	465b      	mov	r3, fp
 80013a4:	f7ff fdaa 	bl	8000efc <I2C_RequestMemoryWrite>
 80013a8:	b110      	cbz	r0, 80013b0 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 80013aa:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80013ae:	e7cd      	b.n	800134c <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	2bff      	cmp	r3, #255	; 0xff
 80013b6:	d955      	bls.n	8001464 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013b8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013be:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013c2:	4639      	mov	r1, r7
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff fc91 	bl	8000cec <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ca:	4632      	mov	r2, r6
 80013cc:	4649      	mov	r1, r9
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff fd03 	bl	8000dda <I2C_WaitOnTXISFlagUntilTimeout>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d1b9      	bne.n	800134c <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013da:	6822      	ldr	r2, [r4, #0]
 80013dc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80013e0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80013e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80013e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80013e8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80013ea:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80013ec:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80013ee:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80013f0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013f4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b1ab      	cbz	r3, 8001426 <HAL_I2C_Mem_Write+0x10a>
 80013fa:	b9a2      	cbnz	r2, 8001426 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013fc:	464b      	mov	r3, r9
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	4620      	mov	r0, r4
 8001402:	9600      	str	r6, [sp, #0]
 8001404:	f7ff fd4f 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
 8001408:	2800      	cmp	r0, #0
 800140a:	d19f      	bne.n	800134c <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800140c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800140e:	b29b      	uxth	r3, r3
 8001410:	2bff      	cmp	r3, #255	; 0xff
 8001412:	d92f      	bls.n	8001474 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001414:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800141a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800141c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800141e:	4639      	mov	r1, r7
 8001420:	4620      	mov	r0, r4
 8001422:	f7ff fc63 	bl	8000cec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001426:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001428:	b29b      	uxth	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1cd      	bne.n	80013ca <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800142e:	4632      	mov	r2, r6
 8001430:	4649      	mov	r1, r9
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff fdce 	bl	8000fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001438:	2800      	cmp	r0, #0
 800143a:	d187      	bne.n	800134c <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	2120      	movs	r1, #32
 8001440:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001448:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800144c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001456:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800145a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800145e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001462:	e774      	b.n	800134e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001464:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800146a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800146c:	b292      	uxth	r2, r2
 800146e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	e7a6      	b.n	80013c2 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8001474:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800147a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800147c:	b292      	uxth	r2, r2
 800147e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	e7cc      	b.n	800141e <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8001484:	2002      	movs	r0, #2
 8001486:	e762      	b.n	800134e <HAL_I2C_Mem_Write+0x32>

08001488 <HAL_I2C_Mem_Read>:
{
 8001488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800148c:	b085      	sub	sp, #20
 800148e:	469b      	mov	fp, r3
 8001490:	4604      	mov	r4, r0
 8001492:	460f      	mov	r7, r1
 8001494:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001498:	4692      	mov	sl, r2
 800149a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800149e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014a4:	2b20      	cmp	r3, #32
 80014a6:	f040 80a7 	bne.w	80015f8 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 80014aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80014ac:	b10b      	cbz	r3, 80014b2 <HAL_I2C_Mem_Read+0x2a>
 80014ae:	9b03      	ldr	r3, [sp, #12]
 80014b0:	b933      	cbnz	r3, 80014c0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80014b8:	2001      	movs	r0, #1
}
 80014ba:	b005      	add	sp, #20
 80014bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80014c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	f000 8097 	beq.w	80015f8 <HAL_I2C_Mem_Read+0x170>
 80014ca:	2501      	movs	r5, #1
 80014cc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80014d0:	f7ff f8cc 	bl	800066c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014d4:	2319      	movs	r3, #25
 80014d6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80014d8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014da:	462a      	mov	r2, r5
 80014dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff fce0 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
 80014e6:	4680      	mov	r8, r0
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d1e5      	bne.n	80014b8 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014ec:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80014ee:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014f0:	4652      	mov	r2, sl
 80014f2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014f8:	2340      	movs	r3, #64	; 0x40
 80014fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80014fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001500:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001502:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8001504:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001506:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001508:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 800150c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800150e:	465b      	mov	r3, fp
 8001510:	f7ff fd2a 	bl	8000f68 <I2C_RequestMemoryRead>
 8001514:	b110      	cbz	r0, 800151c <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8001516:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800151a:	e7cd      	b.n	80014b8 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800151c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800151e:	b29b      	uxth	r3, r3
 8001520:	2bff      	cmp	r3, #255	; 0xff
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_I2C_Mem_Read+0x174>)
 8001524:	d958      	bls.n	80015d8 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001526:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800152e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001530:	4639      	mov	r1, r7
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff fbda 	bl	8000cec <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001538:	464b      	mov	r3, r9
 800153a:	2200      	movs	r2, #0
 800153c:	2104      	movs	r1, #4
 800153e:	4620      	mov	r0, r4
 8001540:	9600      	str	r6, [sp, #0]
 8001542:	f7ff fcb0 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
 8001546:	2800      	cmp	r0, #0
 8001548:	d1b6      	bne.n	80014b8 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001550:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001552:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001554:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001556:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8001558:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800155a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800155c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800155e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001560:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001562:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001564:	b29b      	uxth	r3, r3
 8001566:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001568:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800156a:	b29b      	uxth	r3, r3
 800156c:	b1ab      	cbz	r3, 800159a <HAL_I2C_Mem_Read+0x112>
 800156e:	b9a2      	cbnz	r2, 800159a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001570:	464b      	mov	r3, r9
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	4620      	mov	r0, r4
 8001576:	9600      	str	r6, [sp, #0]
 8001578:	f7ff fc95 	bl	8000ea6 <I2C_WaitOnFlagUntilTimeout>
 800157c:	2800      	cmp	r0, #0
 800157e:	d19b      	bne.n	80014b8 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001580:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001582:	b29b      	uxth	r3, r3
 8001584:	2bff      	cmp	r3, #255	; 0xff
 8001586:	d92f      	bls.n	80015e8 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001588:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800158a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800158e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001590:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001592:	4639      	mov	r1, r7
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff fba9 	bl	8000cec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800159a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800159c:	b29b      	uxth	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1ca      	bne.n	8001538 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a2:	4632      	mov	r2, r6
 80015a4:	4649      	mov	r1, r9
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff fd14 	bl	8000fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d183      	bne.n	80014b8 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	2120      	movs	r1, #32
 80015b4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80015bc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80015c0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80015ca:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80015ce:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015d2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80015d6:	e770      	b.n	80014ba <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80015d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80015e0:	b292      	uxth	r2, r2
 80015e2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	e7a3      	b.n	8001530 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80015e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ee:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80015f0:	b292      	uxth	r2, r2
 80015f2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	e7cc      	b.n	8001592 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80015f8:	2002      	movs	r0, #2
 80015fa:	e75e      	b.n	80014ba <HAL_I2C_Mem_Read+0x32>
 80015fc:	80002400 	.word	0x80002400

08001600 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001600:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8001602:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001604:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001606:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8001608:	b103      	cbz	r3, 800160c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800160a:	4718      	bx	r3
}
 800160c:	4770      	bx	lr

0800160e <HAL_I2C_SlaveTxCpltCallback>:
 800160e:	4770      	bx	lr

08001610 <HAL_I2C_SlaveRxCpltCallback>:
 8001610:	4770      	bx	lr

08001612 <I2C_ITSlaveSeqCplt>:
{
 8001612:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001614:	2500      	movs	r5, #0
 8001616:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800161a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800161e:	2b29      	cmp	r3, #41	; 0x29
 8001620:	d10c      	bne.n	800163c <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001622:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001624:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001626:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800162a:	2321      	movs	r3, #33	; 0x21
 800162c:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800162e:	f7ff fb71 	bl	8000d14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001632:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001636:	f7ff ffea 	bl	800160e <HAL_I2C_SlaveTxCpltCallback>
}
 800163a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800163c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001640:	2b2a      	cmp	r3, #42	; 0x2a
 8001642:	d1fa      	bne.n	800163a <I2C_ITSlaveSeqCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001644:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001646:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001648:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800164c:	2322      	movs	r3, #34	; 0x22
 800164e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001650:	f7ff fb60 	bl	8000d14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001654:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001658:	f7ff ffda 	bl	8001610 <HAL_I2C_SlaveRxCpltCallback>
}
 800165c:	e7ed      	b.n	800163a <I2C_ITSlaveSeqCplt+0x28>

0800165e <HAL_I2C_AddrCallback>:
}
 800165e:	4770      	bx	lr

08001660 <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001660:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001664:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001668:	2a28      	cmp	r2, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800166a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800166c:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800166e:	d133      	bne.n	80016d8 <I2C_ITAddrCplt.constprop.0+0x78>
    transferdirection = I2C_GET_DIR(hi2c);
 8001670:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001672:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001674:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 8001676:	f3c6 4600 	ubfx	r6, r6, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800167a:	2a02      	cmp	r2, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800167c:	6899      	ldr	r1, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800167e:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001682:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001684:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001688:	d11e      	bne.n	80016c8 <I2C_ITAddrCplt.constprop.0+0x68>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800168a:	ea85 15d1 	eor.w	r5, r5, r1, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800168e:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001692:	f015 0506 	ands.w	r5, r5, #6
 8001696:	d10e      	bne.n	80016b6 <I2C_ITAddrCplt.constprop.0+0x56>
        hi2c->AddrEventCount++;
 8001698:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800169a:	3101      	adds	r1, #1
 800169c:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800169e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80016a0:	2902      	cmp	r1, #2
 80016a2:	d107      	bne.n	80016b4 <I2C_ITAddrCplt.constprop.0+0x54>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016a4:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 80016a6:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016a8:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80016aa:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016ae:	4631      	mov	r1, r6
 80016b0:	f7ff ffd5 	bl	800165e <HAL_I2C_AddrCallback>
}
 80016b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80016b6:	2104      	movs	r1, #4
 80016b8:	f7ff fb2c 	bl	8000d14 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80016bc:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016be:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 80016c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016c6:	e7f2      	b.n	80016ae <I2C_ITAddrCplt.constprop.0+0x4e>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80016c8:	2104      	movs	r1, #4
 80016ca:	f7ff fb23 	bl	8000d14 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80016ce:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016d0:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 80016d2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016d6:	e7ea      	b.n	80016ae <I2C_ITAddrCplt.constprop.0+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016d8:	2208      	movs	r2, #8
 80016da:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80016dc:	2300      	movs	r3, #0
 80016de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 80016e2:	e7e7      	b.n	80016b4 <I2C_ITAddrCplt.constprop.0+0x54>

080016e4 <HAL_I2C_ListenCpltCallback>:
 80016e4:	4770      	bx	lr
	...

080016e8 <I2C_ITListenCplt>:
{
 80016e8:	b508      	push	{r3, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <I2C_ITListenCplt+0x58>)
  hi2c->State = HAL_I2C_STATE_READY;
 80016ec:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 80016f4:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fa:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80016fe:	074b      	lsls	r3, r1, #29
 8001700:	d512      	bpl.n	8001728 <I2C_ITListenCplt+0x40>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001702:	6803      	ldr	r3, [r0, #0]
 8001704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001706:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001708:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800170a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001710:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001712:	b14b      	cbz	r3, 8001728 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 8001714:	3b01      	subs	r3, #1
 8001716:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8001718:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800171a:	3b01      	subs	r3, #1
 800171c:	b29b      	uxth	r3, r3
 800171e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001720:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001728:	2107      	movs	r1, #7
 800172a:	f7ff faf3 	bl	8000d14 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800172e:	6803      	ldr	r3, [r0, #0]
 8001730:	2210      	movs	r2, #16
 8001732:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001734:	2300      	movs	r3, #0
 8001736:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800173a:	f7ff ffd3 	bl	80016e4 <HAL_I2C_ListenCpltCallback>
}
 800173e:	bd08      	pop	{r3, pc}
 8001740:	ffff0000 	.word	0xffff0000

08001744 <HAL_I2C_ErrorCallback>:
 8001744:	4770      	bx	lr

08001746 <HAL_I2C_AbortCpltCallback>:
 8001746:	4770      	bx	lr

08001748 <I2C_ITError>:
{
 8001748:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800174a:	4a32      	ldr	r2, [pc, #200]	; (8001814 <I2C_ITError+0xcc>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800174c:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800174e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001752:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001754:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001758:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800175a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800175c:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800175e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001760:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8001762:	ea41 0102 	orr.w	r1, r1, r2
 8001766:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001768:	d821      	bhi.n	80017ae <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800176a:	2103      	movs	r1, #3
 800176c:	f7ff fad2 	bl	8000d14 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001770:	2328      	movs	r3, #40	; 0x28
 8001772:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8001778:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800177a:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001780:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001782:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8001786:	d01f      	beq.n	80017c8 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001788:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    if (hi2c->hdmatx != NULL)
 800178c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800178e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8001790:	2800      	cmp	r0, #0
 8001792:	d037      	beq.n	8001804 <I2C_ITError+0xbc>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <I2C_ITError+0xd4>)
 8001796:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8001798:	2300      	movs	r3, #0
 800179a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800179e:	f7ff f8b6 	bl	800090e <HAL_DMA_Abort_IT>
 80017a2:	b378      	cbz	r0, 8001804 <I2C_ITError+0xbc>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80017a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80017a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 80017a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80017ac:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80017ae:	2107      	movs	r1, #7
 80017b0:	f7ff fab0 	bl	8000d14 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80017b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80017b8:	2b60      	cmp	r3, #96	; 0x60
 80017ba:	d002      	beq.n	80017c2 <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 80017bc:	2320      	movs	r3, #32
 80017be:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	6323      	str	r3, [r4, #48]	; 0x30
 80017c6:	e7d8      	b.n	800177a <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80017c8:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 80017cc:	d00e      	beq.n	80017ec <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80017ce:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80017d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80017d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d6:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80017d8:	b1a0      	cbz	r0, 8001804 <I2C_ITError+0xbc>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <I2C_ITError+0xd4>)
 80017dc:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80017de:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80017e2:	f7ff f894 	bl	800090e <HAL_DMA_Abort_IT>
 80017e6:	b168      	cbz	r0, 8001804 <I2C_ITError+0xbc>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80017e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017ea:	e7dc      	b.n	80017a6 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80017ec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80017f0:	2b60      	cmp	r3, #96	; 0x60
 80017f2:	d108      	bne.n	8001806 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	2320      	movs	r3, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 80017f6:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80017f8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001800:	f7ff ffa1 	bl	8001746 <HAL_I2C_AbortCpltCallback>
}
 8001804:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8001806:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8001808:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800180c:	f7ff ff9a 	bl	8001744 <HAL_I2C_ErrorCallback>
}
 8001810:	e7f8      	b.n	8001804 <I2C_ITError+0xbc>
 8001812:	bf00      	nop
 8001814:	ffff0000 	.word	0xffff0000
 8001818:	08001919 	.word	0x08001919
 800181c:	08001a8d 	.word	0x08001a8d

08001820 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001820:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001822:	2220      	movs	r2, #32
{
 8001824:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001826:	681e      	ldr	r6, [r3, #0]
{
 8001828:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800182a:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800182c:	2107      	movs	r1, #7
 800182e:	f7ff fa71 	bl	8000d14 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001832:	6803      	ldr	r3, [r0, #0]
{
 8001834:	4604      	mov	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800183c:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001844:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001848:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8001852:	f7ff fa3d 	bl	8000cd0 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001856:	0471      	lsls	r1, r6, #17
 8001858:	d534      	bpl.n	80018c4 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 800185a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 800185c:	b11b      	cbz	r3, 8001866 <I2C_ITSlaveCplt+0x46>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	b29b      	uxth	r3, r3
 8001864:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001866:	076b      	lsls	r3, r5, #29
 8001868:	d510      	bpl.n	800188c <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800186a:	6823      	ldr	r3, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800186c:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001874:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001878:	3301      	adds	r3, #1
 800187a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800187c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800187e:	b12b      	cbz	r3, 800188c <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8001880:	3b01      	subs	r3, #1
 8001882:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001884:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001886:	3b01      	subs	r3, #1
 8001888:	b29b      	uxth	r3, r3
 800188a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800188c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	b11b      	cbz	r3, 800189a <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001892:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800189a:	2300      	movs	r3, #0
 800189c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800189e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018a2:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80018a4:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018a6:	b18e      	cbz	r6, 80018cc <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80018a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff ff4c 	bl	8001748 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80018b0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80018b4:	2b28      	cmp	r3, #40	; 0x28
 80018b6:	d11a      	bne.n	80018ee <I2C_ITSlaveCplt+0xce>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80018b8:	4629      	mov	r1, r5
 80018ba:	4620      	mov	r0, r4
}
 80018bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80018c0:	f7ff bf12 	b.w	80016e8 <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80018c4:	0432      	lsls	r2, r6, #16
 80018c6:	d5ce      	bpl.n	8001866 <I2C_ITSlaveCplt+0x46>
    if (hi2c->hdmarx != NULL)
 80018c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80018ca:	e7c7      	b.n	800185c <I2C_ITSlaveCplt+0x3c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80018cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018d2:	d00d      	beq.n	80018f0 <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff fe9c 	bl	8001612 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <I2C_ITSlaveCplt+0xf4>)
    HAL_I2C_ListenCpltCallback(hi2c);
 80018dc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80018de:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80018e4:	2320      	movs	r3, #32
 80018e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 80018ea:	f7ff fefb 	bl	80016e4 <HAL_I2C_ListenCpltCallback>
}
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80018f4:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80018f6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018fa:	2b22      	cmp	r3, #34	; 0x22
 80018fc:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8001900:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001904:	d102      	bne.n	800190c <I2C_ITSlaveCplt+0xec>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001906:	f7ff fe83 	bl	8001610 <HAL_I2C_SlaveRxCpltCallback>
 800190a:	e7f0      	b.n	80018ee <I2C_ITSlaveCplt+0xce>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800190c:	f7ff fe7f 	bl	800160e <HAL_I2C_SlaveTxCpltCallback>
}
 8001910:	e7ed      	b.n	80018ee <I2C_ITSlaveCplt+0xce>
 8001912:	bf00      	nop
 8001914:	ffff0000 	.word	0xffff0000

08001918 <I2C_Slave_ISR_IT>:
{
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 800191c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
{
 8001920:	4604      	mov	r4, r0
 8001922:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8001924:	2a01      	cmp	r2, #1
  uint32_t tmpoptions = hi2c->XferOptions;
 8001926:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8001928:	d07e      	beq.n	8001a28 <I2C_Slave_ISR_IT+0x110>
 800192a:	2201      	movs	r2, #1
 800192c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001930:	06ca      	lsls	r2, r1, #27
 8001932:	d538      	bpl.n	80019a6 <I2C_Slave_ISR_IT+0x8e>
 8001934:	06f2      	lsls	r2, r6, #27
 8001936:	d536      	bpl.n	80019a6 <I2C_Slave_ISR_IT+0x8e>
    if (hi2c->XferCount == 0U)
 8001938:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800193a:	b292      	uxth	r2, r2
 800193c:	bb2a      	cbnz	r2, 800198a <I2C_Slave_ISR_IT+0x72>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800193e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001942:	2a28      	cmp	r2, #40	; 0x28
 8001944:	d110      	bne.n	8001968 <I2C_Slave_ISR_IT+0x50>
 8001946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800194a:	d10d      	bne.n	8001968 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800194c:	f7ff fecc 	bl	80016e8 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001950:	06aa      	lsls	r2, r5, #26
 8001952:	d505      	bpl.n	8001960 <I2C_Slave_ISR_IT+0x48>
 8001954:	06b3      	lsls	r3, r6, #26
 8001956:	d503      	bpl.n	8001960 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001958:	4629      	mov	r1, r5
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff ff60 	bl	8001820 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8001960:	2000      	movs	r0, #0
 8001962:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001966:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001968:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800196c:	6822      	ldr	r2, [r4, #0]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800196e:	2929      	cmp	r1, #41	; 0x29
 8001970:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001974:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001976:	d1eb      	bne.n	8001950 <I2C_Slave_ISR_IT+0x38>
 8001978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800197c:	d0e8      	beq.n	8001950 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 800197e:	4620      	mov	r0, r4
 8001980:	f7ff f9a6 	bl	8000cd0 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8001984:	f7ff fe45 	bl	8001612 <I2C_ITSlaveSeqCplt>
 8001988:	e7e2      	b.n	8001950 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800198a:	6802      	ldr	r2, [r0, #0]
 800198c:	2110      	movs	r1, #16
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800198e:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001992:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001994:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001996:	f042 0204 	orr.w	r2, r2, #4
 800199a:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800199c:	d1d8      	bne.n	8001950 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800199e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80019a0:	f7ff fed2 	bl	8001748 <I2C_ITError>
 80019a4:	e7d4      	b.n	8001950 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80019a6:	076a      	lsls	r2, r5, #29
 80019a8:	d51d      	bpl.n	80019e6 <I2C_Slave_ISR_IT+0xce>
 80019aa:	0770      	lsls	r0, r6, #29
 80019ac:	d51b      	bpl.n	80019e6 <I2C_Slave_ISR_IT+0xce>
    if (hi2c->XferCount > 0U)
 80019ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80019b0:	b292      	uxth	r2, r2
 80019b2:	b17a      	cbz	r2, 80019d4 <I2C_Slave_ISR_IT+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019b4:	6822      	ldr	r2, [r4, #0]
      tmpITFlags &= ~I2C_FLAG_RXNE;
 80019b6:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019ba:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80019bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019be:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 80019c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019c2:	3201      	adds	r2, #1
 80019c4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80019c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80019c8:	3a01      	subs	r2, #1
 80019ca:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80019cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80019ce:	3a01      	subs	r2, #1
 80019d0:	b292      	uxth	r2, r2
 80019d2:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80019d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80019d6:	b292      	uxth	r2, r2
 80019d8:	2a00      	cmp	r2, #0
 80019da:	d1b9      	bne.n	8001950 <I2C_Slave_ISR_IT+0x38>
 80019dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019e0:	d0b6      	beq.n	8001950 <I2C_Slave_ISR_IT+0x38>
        I2C_ITSlaveSeqCplt(hi2c);
 80019e2:	4620      	mov	r0, r4
 80019e4:	e7ce      	b.n	8001984 <I2C_Slave_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80019e6:	0729      	lsls	r1, r5, #28
 80019e8:	d505      	bpl.n	80019f6 <I2C_Slave_ISR_IT+0xde>
 80019ea:	0732      	lsls	r2, r6, #28
 80019ec:	d503      	bpl.n	80019f6 <I2C_Slave_ISR_IT+0xde>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff fe36 	bl	8001660 <I2C_ITAddrCplt.constprop.0>
 80019f4:	e7ac      	b.n	8001950 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80019f6:	07a8      	lsls	r0, r5, #30
 80019f8:	d5aa      	bpl.n	8001950 <I2C_Slave_ISR_IT+0x38>
 80019fa:	07b1      	lsls	r1, r6, #30
 80019fc:	d5a8      	bpl.n	8001950 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 80019fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001a00:	b292      	uxth	r2, r2
 8001a02:	b16a      	cbz	r2, 8001a20 <I2C_Slave_ISR_IT+0x108>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a06:	6822      	ldr	r2, [r4, #0]
 8001a08:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001a0c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001a0e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001a10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001a18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	8523      	strh	r3, [r4, #40]	; 0x28
 8001a1e:	e797      	b.n	8001950 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001a20:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8001a24:	d194      	bne.n	8001950 <I2C_Slave_ISR_IT+0x38>
 8001a26:	e7dc      	b.n	80019e2 <I2C_Slave_ISR_IT+0xca>
  __HAL_LOCK(hi2c);
 8001a28:	2002      	movs	r0, #2
 8001a2a:	e79c      	b.n	8001966 <I2C_Slave_ISR_IT+0x4e>

08001a2c <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a2c:	6803      	ldr	r3, [r0, #0]
 8001a2e:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a30:	681a      	ldr	r2, [r3, #0]
{
 8001a32:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a34:	05cc      	lsls	r4, r1, #23
 8001a36:	d508      	bpl.n	8001a4a <HAL_I2C_ER_IRQHandler+0x1e>
 8001a38:	0614      	lsls	r4, r2, #24
 8001a3a:	d506      	bpl.n	8001a4a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001a3c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a3e:	f044 0401 	orr.w	r4, r4, #1
 8001a42:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a44:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001a48:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a4a:	054c      	lsls	r4, r1, #21
 8001a4c:	d508      	bpl.n	8001a60 <HAL_I2C_ER_IRQHandler+0x34>
 8001a4e:	0614      	lsls	r4, r2, #24
 8001a50:	d506      	bpl.n	8001a60 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001a52:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a54:	f044 0408 	orr.w	r4, r4, #8
 8001a58:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001a5e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a60:	0589      	lsls	r1, r1, #22
 8001a62:	d508      	bpl.n	8001a76 <HAL_I2C_ER_IRQHandler+0x4a>
 8001a64:	0612      	lsls	r2, r2, #24
 8001a66:	d506      	bpl.n	8001a76 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001a68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001a6a:	f042 0202 	orr.w	r2, r2, #2
 8001a6e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a74:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001a76:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001a78:	f011 0f0b 	tst.w	r1, #11
 8001a7c:	d003      	beq.n	8001a86 <HAL_I2C_ER_IRQHandler+0x5a>
}
 8001a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8001a82:	f7ff be61 	b.w	8001748 <I2C_ITError>
}
 8001a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001a8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001a8e:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001a90:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001a92:	2300      	movs	r3, #0
 8001a94:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001a96:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001a98:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001a9e:	2b60      	cmp	r3, #96	; 0x60
 8001aa0:	d105      	bne.n	8001aae <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001aa8:	f7ff fe4d 	bl	8001746 <HAL_I2C_AbortCpltCallback>
}
 8001aac:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8001aae:	f7ff fe49 	bl	8001744 <HAL_I2C_ErrorCallback>
}
 8001ab2:	e7fb      	b.n	8001aac <I2C_DMAAbort+0x20>

08001ab4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ab4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	b2dc      	uxtb	r4, r3
 8001abe:	d11d      	bne.n	8001afc <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d019      	beq.n	8001afc <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac8:	2324      	movs	r3, #36	; 0x24
 8001aca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ace:	6803      	ldr	r3, [r0, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ade:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4311      	orrs	r1, r2
 8001ae4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aee:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001af0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001af4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001af8:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001afa:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001afc:	2002      	movs	r0, #2
 8001afe:	e7fc      	b.n	8001afa <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001b00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b00:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b02:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	b2dc      	uxtb	r4, r3
 8001b0a:	d11c      	bne.n	8001b46 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d018      	beq.n	8001b46 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b14:	2324      	movs	r3, #36	; 0x24
 8001b16:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b1a:	6803      	ldr	r3, [r0, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b24:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b26:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b2a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b2e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b38:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001b3a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001b3e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001b42:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001b44:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001b46:	2002      	movs	r0, #2
 8001b48:	e7fc      	b.n	8001b44 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08001b4c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001b4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b52:	4c19      	ldr	r4, [pc, #100]	; (8001bb8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6c:	f7fe fd7e 	bl	800066c <HAL_GetTick>
 8001b70:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b72:	6863      	ldr	r3, [r4, #4]
 8001b74:	03da      	lsls	r2, r3, #15
 8001b76:	d50c      	bpl.n	8001b92 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b78:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b7a:	4d0f      	ldr	r5, [pc, #60]	; (8001bb8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001b82:	f7fe fd73 	bl	800066c <HAL_GetTick>
 8001b86:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b88:	686b      	ldr	r3, [r5, #4]
 8001b8a:	039b      	lsls	r3, r3, #14
 8001b8c:	d50a      	bpl.n	8001ba4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e006      	b.n	8001ba0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b92:	f7fe fd6b 	bl	800066c <HAL_GetTick>
 8001b96:	1b40      	subs	r0, r0, r5
 8001b98:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b9c:	d9e9      	bls.n	8001b72 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001b9e:	2003      	movs	r0, #3
}
 8001ba0:	b003      	add	sp, #12
 8001ba2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ba4:	f7fe fd62 	bl	800066c <HAL_GetTick>
 8001ba8:	1b00      	subs	r0, r0, r4
 8001baa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001bae:	d9eb      	bls.n	8001b88 <HAL_PWREx_EnableOverDrive+0x3c>
 8001bb0:	e7f5      	b.n	8001b9e <HAL_PWREx_EnableOverDrive+0x52>
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40007000 	.word	0x40007000

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	b918      	cbnz	r0, 8001bcc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001bc4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001bc6:	b002      	add	sp, #8
 8001bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bcc:	6803      	ldr	r3, [r0, #0]
 8001bce:	07db      	lsls	r3, r3, #31
 8001bd0:	d410      	bmi.n	8001bf4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	079f      	lsls	r7, r3, #30
 8001bd6:	d461      	bmi.n	8001c9c <HAL_RCC_OscConfig+0xe0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	0719      	lsls	r1, r3, #28
 8001bdc:	f100 80a8 	bmi.w	8001d30 <HAL_RCC_OscConfig+0x174>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	075a      	lsls	r2, r3, #29
 8001be4:	f100 80c9 	bmi.w	8001d7a <HAL_RCC_OscConfig+0x1be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be8:	69a2      	ldr	r2, [r4, #24]
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	f040 8132 	bne.w	8001e54 <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	e7e8      	b.n	8001bc6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf4:	4b95      	ldr	r3, [pc, #596]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	f002 020c 	and.w	r2, r2, #12
 8001bfc:	2a04      	cmp	r2, #4
 8001bfe:	d007      	beq.n	8001c10 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	f002 020c 	and.w	r2, r2, #12
 8001c06:	2a08      	cmp	r2, #8
 8001c08:	d10a      	bne.n	8001c20 <HAL_RCC_OscConfig+0x64>
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	0256      	lsls	r6, r2, #9
 8001c0e:	d507      	bpl.n	8001c20 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	4b8e      	ldr	r3, [pc, #568]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	039d      	lsls	r5, r3, #14
 8001c16:	d5dc      	bpl.n	8001bd2 <HAL_RCC_OscConfig+0x16>
 8001c18:	6863      	ldr	r3, [r4, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1d9      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x16>
 8001c1e:	e7d1      	b.n	8001bc4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c20:	6862      	ldr	r2, [r4, #4]
 8001c22:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001c26:	d111      	bne.n	8001c4c <HAL_RCC_OscConfig+0x90>
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c30:	f7fe fd1c 	bl	800066c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c34:	4e85      	ldr	r6, [pc, #532]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8001c36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	6833      	ldr	r3, [r6, #0]
 8001c3a:	0398      	lsls	r0, r3, #14
 8001c3c:	d4c9      	bmi.n	8001bd2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3e:	f7fe fd15 	bl	800066c <HAL_GetTick>
 8001c42:	1b40      	subs	r0, r0, r5
 8001c44:	2864      	cmp	r0, #100	; 0x64
 8001c46:	d9f7      	bls.n	8001c38 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8001c48:	2003      	movs	r0, #3
 8001c4a:	e7bc      	b.n	8001bc6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	4d7f      	ldr	r5, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	b992      	cbnz	r2, 8001c78 <HAL_RCC_OscConfig+0xbc>
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c56:	602b      	str	r3, [r5, #0]
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c60:	f7fe fd04 	bl	800066c <HAL_GetTick>
 8001c64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	682b      	ldr	r3, [r5, #0]
 8001c68:	0399      	lsls	r1, r3, #14
 8001c6a:	d5b2      	bpl.n	8001bd2 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7fe fcfe 	bl	800066c <HAL_GetTick>
 8001c70:	1b80      	subs	r0, r0, r6
 8001c72:	2864      	cmp	r0, #100	; 0x64
 8001c74:	d9f7      	bls.n	8001c66 <HAL_RCC_OscConfig+0xaa>
 8001c76:	e7e7      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c78:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_OscConfig+0xd2>
 8001c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c82:	602b      	str	r3, [r5, #0]
 8001c84:	682b      	ldr	r3, [r5, #0]
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	602b      	str	r3, [r5, #0]
 8001c8c:	e7d0      	b.n	8001c30 <HAL_RCC_OscConfig+0x74>
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	602b      	str	r3, [r5, #0]
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9a:	e7f6      	b.n	8001c8a <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9c:	4b6b      	ldr	r3, [pc, #428]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	f012 0f0c 	tst.w	r2, #12
 8001ca4:	d007      	beq.n	8001cb6 <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	f002 020c 	and.w	r2, r2, #12
 8001cac:	2a08      	cmp	r2, #8
 8001cae:	d112      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x11a>
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	0252      	lsls	r2, r2, #9
 8001cb4:	d40f      	bmi.n	8001cd6 <HAL_RCC_OscConfig+0x11a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	4a65      	ldr	r2, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	079b      	lsls	r3, r3, #30
 8001cbc:	d503      	bpl.n	8001cc6 <HAL_RCC_OscConfig+0x10a>
 8001cbe:	68e3      	ldr	r3, [r4, #12]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	f47f af7f 	bne.w	8001bc4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	6921      	ldr	r1, [r4, #16]
 8001cca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cd2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd4:	e780      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd6:	68e2      	ldr	r2, [r4, #12]
 8001cd8:	b1c2      	cbz	r2, 8001d0c <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_HSI_ENABLE();
 8001cda:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	4d5b      	ldr	r5, [pc, #364]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fcc2 	bl	800066c <HAL_GetTick>
 8001ce8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	079f      	lsls	r7, r3, #30
 8001cee:	d507      	bpl.n	8001d00 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	682b      	ldr	r3, [r5, #0]
 8001cf2:	6922      	ldr	r2, [r4, #16]
 8001cf4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cf8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cfc:	602b      	str	r3, [r5, #0]
 8001cfe:	e76b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d00:	f7fe fcb4 	bl	800066c <HAL_GetTick>
 8001d04:	1b80      	subs	r0, r0, r6
 8001d06:	2802      	cmp	r0, #2
 8001d08:	d9ef      	bls.n	8001cea <HAL_RCC_OscConfig+0x12e>
 8001d0a:	e79d      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8001d0c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	4e4f      	ldr	r6, [pc, #316]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_DISABLE();
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d16:	f7fe fca9 	bl	800066c <HAL_GetTick>
 8001d1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1c:	6833      	ldr	r3, [r6, #0]
 8001d1e:	0798      	lsls	r0, r3, #30
 8001d20:	f57f af5a 	bpl.w	8001bd8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d24:	f7fe fca2 	bl	800066c <HAL_GetTick>
 8001d28:	1b40      	subs	r0, r0, r5
 8001d2a:	2802      	cmp	r0, #2
 8001d2c:	d9f6      	bls.n	8001d1c <HAL_RCC_OscConfig+0x160>
 8001d2e:	e78b      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d30:	6963      	ldr	r3, [r4, #20]
 8001d32:	4d46      	ldr	r5, [pc, #280]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
 8001d34:	b183      	cbz	r3, 8001d58 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_LSI_ENABLE();
 8001d36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001d3e:	f7fe fc95 	bl	800066c <HAL_GetTick>
 8001d42:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d44:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d46:	079b      	lsls	r3, r3, #30
 8001d48:	f53f af4a 	bmi.w	8001be0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7fe fc8e 	bl	800066c <HAL_GetTick>
 8001d50:	1b80      	subs	r0, r0, r6
 8001d52:	2802      	cmp	r0, #2
 8001d54:	d9f6      	bls.n	8001d44 <HAL_RCC_OscConfig+0x188>
 8001d56:	e777      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8001d58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001d60:	f7fe fc84 	bl	800066c <HAL_GetTick>
 8001d64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d66:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d68:	079f      	lsls	r7, r3, #30
 8001d6a:	f57f af39 	bpl.w	8001be0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7fe fc7d 	bl	800066c <HAL_GetTick>
 8001d72:	1b80      	subs	r0, r0, r6
 8001d74:	2802      	cmp	r0, #2
 8001d76:	d9f6      	bls.n	8001d66 <HAL_RCC_OscConfig+0x1aa>
 8001d78:	e766      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
 8001d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d7e:	00d0      	lsls	r0, r2, #3
 8001d80:	d427      	bmi.n	8001dd2 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001d84:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d96:	4d2e      	ldr	r5, [pc, #184]	; (8001e50 <HAL_RCC_OscConfig+0x294>)
 8001d98:	682b      	ldr	r3, [r5, #0]
 8001d9a:	05d9      	lsls	r1, r3, #23
 8001d9c:	d51b      	bpl.n	8001dd6 <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9e:	68a3      	ldr	r3, [r4, #8]
 8001da0:	4d2a      	ldr	r5, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d127      	bne.n	8001df6 <HAL_RCC_OscConfig+0x23a>
 8001da6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001db2:	f7fe fc5b 	bl	800066c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db6:	4e25      	ldr	r6, [pc, #148]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001db8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dba:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001dbc:	079b      	lsls	r3, r3, #30
 8001dbe:	d53f      	bpl.n	8001e40 <HAL_RCC_OscConfig+0x284>
    if(pwrclkchanged == SET)
 8001dc0:	2f00      	cmp	r7, #0
 8001dc2:	f43f af11 	beq.w	8001be8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <HAL_RCC_OscConfig+0x290>)
 8001dc8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	e70a      	b.n	8001be8 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001dd2:	2700      	movs	r7, #0
 8001dd4:	e7df      	b.n	8001d96 <HAL_RCC_OscConfig+0x1da>
      PWR->CR1 |= PWR_CR1_DBP;
 8001dd6:	682b      	ldr	r3, [r5, #0]
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001dde:	f7fe fc45 	bl	800066c <HAL_GetTick>
 8001de2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de4:	682b      	ldr	r3, [r5, #0]
 8001de6:	05da      	lsls	r2, r3, #23
 8001de8:	d4d9      	bmi.n	8001d9e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7fe fc3f 	bl	800066c <HAL_GetTick>
 8001dee:	1b80      	subs	r0, r0, r6
 8001df0:	2864      	cmp	r0, #100	; 0x64
 8001df2:	d9f7      	bls.n	8001de4 <HAL_RCC_OscConfig+0x228>
 8001df4:	e728      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df6:	b9ab      	cbnz	r3, 8001e24 <HAL_RCC_OscConfig+0x268>
 8001df8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	672b      	str	r3, [r5, #112]	; 0x70
 8001e04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e06:	f023 0304 	bic.w	r3, r3, #4
 8001e0a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001e0c:	f7fe fc2e 	bl	800066c <HAL_GetTick>
 8001e10:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e12:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e14:	0798      	lsls	r0, r3, #30
 8001e16:	d5d3      	bpl.n	8001dc0 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e18:	f7fe fc28 	bl	800066c <HAL_GetTick>
 8001e1c:	1b80      	subs	r0, r0, r6
 8001e1e:	4540      	cmp	r0, r8
 8001e20:	d9f7      	bls.n	8001e12 <HAL_RCC_OscConfig+0x256>
 8001e22:	e711      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e28:	d103      	bne.n	8001e32 <HAL_RCC_OscConfig+0x276>
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	672b      	str	r3, [r5, #112]	; 0x70
 8001e30:	e7b9      	b.n	8001da6 <HAL_RCC_OscConfig+0x1ea>
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	672b      	str	r3, [r5, #112]	; 0x70
 8001e38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e3a:	f023 0304 	bic.w	r3, r3, #4
 8001e3e:	e7b5      	b.n	8001dac <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7fe fc14 	bl	800066c <HAL_GetTick>
 8001e44:	1b40      	subs	r0, r0, r5
 8001e46:	4540      	cmp	r0, r8
 8001e48:	d9b7      	bls.n	8001dba <HAL_RCC_OscConfig+0x1fe>
 8001e4a:	e6fd      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	4d24      	ldr	r5, [pc, #144]	; (8001ee8 <HAL_RCC_OscConfig+0x32c>)
 8001e56:	68ab      	ldr	r3, [r5, #8]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	f43f aeb1 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001e62:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e64:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6c:	d12f      	bne.n	8001ece <HAL_RCC_OscConfig+0x312>
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fbfd 	bl	800066c <HAL_GetTick>
 8001e72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e74:	682b      	ldr	r3, [r5, #0]
 8001e76:	0199      	lsls	r1, r3, #6
 8001e78:	d423      	bmi.n	8001ec2 <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e82:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e8e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001e92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e94:	0852      	lsrs	r2, r2, #1
 8001e96:	3a01      	subs	r2, #1
 8001e98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e9c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e9e:	682b      	ldr	r3, [r5, #0]
 8001ea0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fbe1 	bl	800066c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	4d0f      	ldr	r5, [pc, #60]	; (8001ee8 <HAL_RCC_OscConfig+0x32c>)
        tickstart = HAL_GetTick();
 8001eac:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	019a      	lsls	r2, r3, #6
 8001eb2:	f53f ae9d 	bmi.w	8001bf0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe fbd9 	bl	800066c <HAL_GetTick>
 8001eba:	1b00      	subs	r0, r0, r4
 8001ebc:	2802      	cmp	r0, #2
 8001ebe:	d9f6      	bls.n	8001eae <HAL_RCC_OscConfig+0x2f2>
 8001ec0:	e6c2      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7fe fbd3 	bl	800066c <HAL_GetTick>
 8001ec6:	1b80      	subs	r0, r0, r6
 8001ec8:	2802      	cmp	r0, #2
 8001eca:	d9d3      	bls.n	8001e74 <HAL_RCC_OscConfig+0x2b8>
 8001ecc:	e6bc      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001ece:	f7fe fbcd 	bl	800066c <HAL_GetTick>
 8001ed2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed4:	682b      	ldr	r3, [r5, #0]
 8001ed6:	019b      	lsls	r3, r3, #6
 8001ed8:	f57f ae8a 	bpl.w	8001bf0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe fbc6 	bl	800066c <HAL_GetTick>
 8001ee0:	1b00      	subs	r0, r0, r4
 8001ee2:	2802      	cmp	r0, #2
 8001ee4:	d9f6      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x318>
 8001ee6:	e6af      	b.n	8001c48 <HAL_RCC_OscConfig+0x8c>
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eec:	4913      	ldr	r1, [pc, #76]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001eee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef0:	688b      	ldr	r3, [r1, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d01b      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x46>
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d11b      	bne.n	8001f36 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001efe:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f00:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f02:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f08:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f10:	bf1a      	itte	ne
 8001f12:	480b      	ldrne	r0, [pc, #44]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x54>)
 8001f14:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f16:	480b      	ldreq	r0, [pc, #44]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x58>)
 8001f18:	fba1 0100 	umull	r0, r1, r1, r0
 8001f1c:	f7fe f9e8 	bl	80002f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x50>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f28:	3301      	adds	r3, #1
 8001f2a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001f2c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f30:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f32:	4803      	ldr	r0, [pc, #12]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x54>)
 8001f34:	e7fc      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001f36:	4803      	ldr	r0, [pc, #12]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001f38:	e7fa      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x44>
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	017d7840 	.word	0x017d7840
 8001f44:	00f42400 	.word	0x00f42400

08001f48 <HAL_RCC_ClockConfig>:
{
 8001f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001f4e:	4604      	mov	r4, r0
 8001f50:	b910      	cbnz	r0, 8001f58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f52:	2001      	movs	r0, #1
}
 8001f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4a45      	ldr	r2, [pc, #276]	; (8002070 <HAL_RCC_ClockConfig+0x128>)
 8001f5a:	6813      	ldr	r3, [r2, #0]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	428b      	cmp	r3, r1
 8001f62:	d327      	bcc.n	8001fb4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	6822      	ldr	r2, [r4, #0]
 8001f66:	0797      	lsls	r7, r2, #30
 8001f68:	d42f      	bmi.n	8001fca <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6a:	07d0      	lsls	r0, r2, #31
 8001f6c:	d443      	bmi.n	8001ff6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6e:	4a40      	ldr	r2, [pc, #256]	; (8002070 <HAL_RCC_ClockConfig+0x128>)
 8001f70:	6813      	ldr	r3, [r2, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	42ab      	cmp	r3, r5
 8001f78:	d866      	bhi.n	8002048 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	0751      	lsls	r1, r2, #29
 8001f7e:	d46f      	bmi.n	8002060 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	0713      	lsls	r3, r2, #28
 8001f82:	d507      	bpl.n	8001f94 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f84:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <HAL_RCC_ClockConfig+0x12c>)
 8001f86:	6921      	ldr	r1, [r4, #16]
 8001f88:	6893      	ldr	r3, [r2, #8]
 8001f8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f94:	f7ff ffaa 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001f98:	4b36      	ldr	r3, [pc, #216]	; (8002074 <HAL_RCC_ClockConfig+0x12c>)
 8001f9a:	4a37      	ldr	r2, [pc, #220]	; (8002078 <HAL_RCC_ClockConfig+0x130>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	40d8      	lsrs	r0, r3
 8001fa6:	4b35      	ldr	r3, [pc, #212]	; (800207c <HAL_RCC_ClockConfig+0x134>)
 8001fa8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7fe fb22 	bl	80005f4 <HAL_InitTick>
  return HAL_OK;
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	e7cf      	b.n	8001f54 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb4:	6813      	ldr	r3, [r2, #0]
 8001fb6:	f023 030f 	bic.w	r3, r3, #15
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	6813      	ldr	r3, [r2, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d1c4      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xa>
 8001fc8:	e7cc      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fca:	f012 0f04 	tst.w	r2, #4
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_RCC_ClockConfig+0x12c>)
 8001fd0:	d003      	beq.n	8001fda <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd2:	6899      	ldr	r1, [r3, #8]
 8001fd4:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8001fd8:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	0716      	lsls	r6, r2, #28
 8001fdc:	d503      	bpl.n	8001fe6 <HAL_RCC_ClockConfig+0x9e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fde:	6899      	ldr	r1, [r3, #8]
 8001fe0:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8001fe4:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe6:	4923      	ldr	r1, [pc, #140]	; (8002074 <HAL_RCC_ClockConfig+0x12c>)
 8001fe8:	68a0      	ldr	r0, [r4, #8]
 8001fea:	688b      	ldr	r3, [r1, #8]
 8001fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff0:	4303      	orrs	r3, r0
 8001ff2:	608b      	str	r3, [r1, #8]
 8001ff4:	e7b9      	b.n	8001f6a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	6861      	ldr	r1, [r4, #4]
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_ClockConfig+0x12c>)
 8001ffa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffc:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	d11b      	bne.n	8002038 <HAL_RCC_ClockConfig+0xf0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002000:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	d0a5      	beq.n	8001f52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002008:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200c:	4f19      	ldr	r7, [pc, #100]	; (8002074 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200e:	f022 0203 	bic.w	r2, r2, #3
 8002012:	430a      	orrs	r2, r1
 8002014:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002016:	f7fe fb29 	bl	800066c <HAL_GetTick>
 800201a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	6862      	ldr	r2, [r4, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002028:	d0a1      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202a:	f7fe fb1f 	bl	800066c <HAL_GetTick>
 800202e:	1b80      	subs	r0, r0, r6
 8002030:	4540      	cmp	r0, r8
 8002032:	d9f3      	bls.n	800201c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002034:	2003      	movs	r0, #3
 8002036:	e78d      	b.n	8001f54 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002038:	2902      	cmp	r1, #2
 800203a:	d102      	bne.n	8002042 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002040:	e7e0      	b.n	8002004 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	f012 0f02 	tst.w	r2, #2
 8002046:	e7dd      	b.n	8002004 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	f023 030f 	bic.w	r3, r3, #15
 800204e:	432b      	orrs	r3, r5
 8002050:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	6813      	ldr	r3, [r2, #0]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	42ab      	cmp	r3, r5
 800205a:	f47f af7a 	bne.w	8001f52 <HAL_RCC_ClockConfig+0xa>
 800205e:	e78c      	b.n	8001f7a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4904      	ldr	r1, [pc, #16]	; (8002074 <HAL_RCC_ClockConfig+0x12c>)
 8002062:	68e0      	ldr	r0, [r4, #12]
 8002064:	688b      	ldr	r3, [r1, #8]
 8002066:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800206a:	4303      	orrs	r3, r0
 800206c:	608b      	str	r3, [r1, #8]
 800206e:	e787      	b.n	8001f80 <HAL_RCC_ClockConfig+0x38>
 8002070:	40023c00 	.word	0x40023c00
 8002074:	40023800 	.word	0x40023800
 8002078:	0800a6ea 	.word	0x0800a6ea
 800207c:	200003f4 	.word	0x200003f4

08002080 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002080:	6803      	ldr	r3, [r0, #0]
{
 8002082:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002086:	f013 0601 	ands.w	r6, r3, #1
{
 800208a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800208c:	d00b      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800208e:	4ab3      	ldr	r2, [pc, #716]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002090:	6891      	ldr	r1, [r2, #8]
 8002092:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002096:	6091      	str	r1, [r2, #8]
 8002098:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800209a:	6891      	ldr	r1, [r2, #8]
 800209c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800209e:	fab6 f686 	clz	r6, r6
 80020a2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020a4:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020a6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80020aa:	d012      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020ac:	49ab      	ldr	r1, [pc, #684]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80020ae:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80020b0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020b4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80020bc:	bf08      	it	eq
 80020be:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020c0:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020c4:	bf16      	itet	ne
 80020c6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80020ca:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020cc:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020ce:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020d2:	02df      	lsls	r7, r3, #11
 80020d4:	d510      	bpl.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020d6:	48a1      	ldr	r0, [pc, #644]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80020d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80020da:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020de:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020e2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80020e6:	ea42 0201 	orr.w	r2, r2, r1
 80020ea:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020ee:	f000 81a7 	beq.w	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80020f2:	2900      	cmp	r1, #0
 80020f4:	bf08      	it	eq
 80020f6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80020f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80020fc:	bf18      	it	ne
 80020fe:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002100:	0698      	lsls	r0, r3, #26
 8002102:	d531      	bpl.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b95      	ldr	r3, [pc, #596]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002106:	4f96      	ldr	r7, [pc, #600]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002122:	f7fe faa3 	bl	800066c <HAL_GetTick>
 8002126:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	05d9      	lsls	r1, r3, #23
 800212c:	f140 818a 	bpl.w	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002130:	4f8a      	ldr	r7, [pc, #552]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002132:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002134:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002138:	f040 818f 	bne.w	800245a <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800213e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002142:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002146:	4a85      	ldr	r2, [pc, #532]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002148:	f040 81ad 	bne.w	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800214c:	6891      	ldr	r1, [r2, #8]
 800214e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002152:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002156:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800215a:	4301      	orrs	r1, r0
 800215c:	6091      	str	r1, [r2, #8]
 800215e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002162:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002164:	430b      	orrs	r3, r1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	06df      	lsls	r7, r3, #27
 800216c:	d50c      	bpl.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800216e:	4a7b      	ldr	r2, [pc, #492]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002170:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002174:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002178:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800217c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002180:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002182:	4301      	orrs	r1, r0
 8002184:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002188:	0458      	lsls	r0, r3, #17
 800218a:	d508      	bpl.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800218c:	4973      	ldr	r1, [pc, #460]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800218e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002190:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002194:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002198:	4302      	orrs	r2, r0
 800219a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800219e:	0419      	lsls	r1, r3, #16
 80021a0:	d508      	bpl.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a2:	496e      	ldr	r1, [pc, #440]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021a4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80021a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021aa:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80021ae:	4302      	orrs	r2, r0
 80021b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b4:	03da      	lsls	r2, r3, #15
 80021b6:	d508      	bpl.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021b8:	4968      	ldr	r1, [pc, #416]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80021bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021c0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80021c4:	4302      	orrs	r2, r0
 80021c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021ca:	039f      	lsls	r7, r3, #14
 80021cc:	d508      	bpl.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021ce:	4963      	ldr	r1, [pc, #396]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021d0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80021d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021d6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80021da:	4302      	orrs	r2, r0
 80021dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e0:	0658      	lsls	r0, r3, #25
 80021e2:	d508      	bpl.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e4:	495d      	ldr	r1, [pc, #372]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80021e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80021ec:	f022 0203 	bic.w	r2, r2, #3
 80021f0:	4302      	orrs	r2, r0
 80021f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f6:	0619      	lsls	r1, r3, #24
 80021f8:	d508      	bpl.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021fa:	4958      	ldr	r1, [pc, #352]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80021fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80021fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002202:	f022 020c 	bic.w	r2, r2, #12
 8002206:	4302      	orrs	r2, r0
 8002208:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800220c:	05da      	lsls	r2, r3, #23
 800220e:	d508      	bpl.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002210:	4952      	ldr	r1, [pc, #328]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002212:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002214:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002218:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800221c:	4302      	orrs	r2, r0
 800221e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002222:	059f      	lsls	r7, r3, #22
 8002224:	d508      	bpl.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002226:	494d      	ldr	r1, [pc, #308]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002228:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800222a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800222e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002232:	4302      	orrs	r2, r0
 8002234:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002238:	0558      	lsls	r0, r3, #21
 800223a:	d508      	bpl.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800223c:	4947      	ldr	r1, [pc, #284]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800223e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002240:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002244:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002248:	4302      	orrs	r2, r0
 800224a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800224e:	0519      	lsls	r1, r3, #20
 8002250:	d508      	bpl.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002252:	4942      	ldr	r1, [pc, #264]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002256:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800225a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800225e:	4302      	orrs	r2, r0
 8002260:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002264:	04da      	lsls	r2, r3, #19
 8002266:	d508      	bpl.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002268:	493c      	ldr	r1, [pc, #240]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800226a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800226c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002270:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002274:	4302      	orrs	r2, r0
 8002276:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800227a:	049f      	lsls	r7, r3, #18
 800227c:	d508      	bpl.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800227e:	4937      	ldr	r1, [pc, #220]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002280:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002282:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002286:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800228a:	4302      	orrs	r2, r0
 800228c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002290:	0258      	lsls	r0, r3, #9
 8002292:	d508      	bpl.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002294:	4931      	ldr	r1, [pc, #196]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002296:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002298:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800229c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80022a0:	4302      	orrs	r2, r0
 80022a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022a6:	0299      	lsls	r1, r3, #10
 80022a8:	d50c      	bpl.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022aa:	482c      	ldr	r0, [pc, #176]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80022ac:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80022ae:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80022b2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022b6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80022ba:	bf08      	it	eq
 80022bc:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022be:	430a      	orrs	r2, r1
 80022c0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80022c4:	f013 0f08 	tst.w	r3, #8
 80022c8:	bf18      	it	ne
 80022ca:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022cc:	035a      	lsls	r2, r3, #13
 80022ce:	d508      	bpl.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022d0:	4922      	ldr	r1, [pc, #136]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80022d2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80022d4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80022d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022dc:	4302      	orrs	r2, r0
 80022de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022e2:	021f      	lsls	r7, r3, #8
 80022e4:	d509      	bpl.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022e6:	491d      	ldr	r1, [pc, #116]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80022e8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80022ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80022f0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80022f4:	4302      	orrs	r2, r0
 80022f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80022fa:	0158      	lsls	r0, r3, #5
 80022fc:	d509      	bpl.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80022fe:	4917      	ldr	r1, [pc, #92]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002300:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8002304:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002308:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800230c:	4302      	orrs	r2, r0
 800230e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002312:	0119      	lsls	r1, r3, #4
 8002314:	d509      	bpl.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002316:	4911      	ldr	r1, [pc, #68]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002318:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800231c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002320:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002324:	4302      	orrs	r2, r0
 8002326:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800232a:	00da      	lsls	r2, r3, #3
 800232c:	f140 813d 	bpl.w	80025aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002332:	2e01      	cmp	r6, #1
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002334:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002338:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800233c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002340:	ea43 0301 	orr.w	r3, r3, r1
 8002344:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002348:	f000 80b1 	beq.w	80024ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800234c:	2d01      	cmp	r5, #1
 800234e:	d175      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002350:	4d02      	ldr	r5, [pc, #8]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002352:	682b      	ldr	r3, [r5, #0]
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002358:	e004      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40007000 	.word	0x40007000
 8002364:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002366:	f7fe f981 	bl	800066c <HAL_GetTick>
 800236a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	009f      	lsls	r7, r3, #2
 8002370:	f100 8128 	bmi.w	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x544>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002374:	6822      	ldr	r2, [r4, #0]
 8002376:	0316      	lsls	r6, r2, #12
 8002378:	d501      	bpl.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800237a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800237c:	b11b      	cbz	r3, 8002386 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800237e:	02d0      	lsls	r0, r2, #11
 8002380:	d51c      	bpl.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002384:	b9d3      	cbnz	r3, 80023bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002386:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800238a:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800238e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002392:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002396:	430b      	orrs	r3, r1
 8002398:	6961      	ldr	r1, [r4, #20]
 800239a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800239e:	69a1      	ldr	r1, [r4, #24]
 80023a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80023a4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023a8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80023ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80023ae:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80023b2:	3901      	subs	r1, #1
 80023b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023b8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023bc:	0291      	lsls	r1, r2, #10
 80023be:	d515      	bpl.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80023c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80023c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c6:	d111      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023c8:	4985      	ldr	r1, [pc, #532]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80023ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023ce:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023d2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80023d6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80023da:	4303      	orrs	r3, r0
 80023dc:	6960      	ldr	r0, [r4, #20]
 80023de:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80023e2:	6a20      	ldr	r0, [r4, #32]
 80023e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80023e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023ec:	0712      	lsls	r2, r2, #28
 80023ee:	d519      	bpl.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023f0:	4a7b      	ldr	r2, [pc, #492]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80023f2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023fa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80023fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002402:	430b      	orrs	r3, r1
 8002404:	6961      	ldr	r1, [r4, #20]
 8002406:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800240a:	69e1      	ldr	r1, [r4, #28]
 800240c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002414:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002418:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800241a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800241e:	430b      	orrs	r3, r1
 8002420:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002424:	4c6e      	ldr	r4, [pc, #440]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800242e:	f7fe f91d 	bl	800066c <HAL_GetTick>
 8002432:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	f140 80cb 	bpl.w	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x552>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800243c:	2000      	movs	r0, #0
 800243e:	e009      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 8002440:	2601      	movs	r6, #1
 8002442:	e659      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002444:	f7fe f912 	bl	800066c <HAL_GetTick>
 8002448:	eba0 0008 	sub.w	r0, r0, r8
 800244c:	2864      	cmp	r0, #100	; 0x64
 800244e:	f67f ae6b 	bls.w	8002128 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002452:	2003      	movs	r0, #3
}
 8002454:	b003      	add	sp, #12
 8002456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800245a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800245c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002460:	429a      	cmp	r2, r3
 8002462:	f43f ae6b 	beq.w	800213c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002468:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800246a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800246e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002472:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002474:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002476:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800247a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800247c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800247e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002480:	07da      	lsls	r2, r3, #31
 8002482:	f57f ae5b 	bpl.w	800213c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002486:	f7fe f8f1 	bl	800066c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800248e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002492:	079b      	lsls	r3, r3, #30
 8002494:	f53f ae52 	bmi.w	800213c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002498:	f7fe f8e8 	bl	800066c <HAL_GetTick>
 800249c:	eba0 0008 	sub.w	r0, r0, r8
 80024a0:	4548      	cmp	r0, r9
 80024a2:	d9f5      	bls.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80024a4:	e7d5      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a6:	6891      	ldr	r1, [r2, #8]
 80024a8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80024ac:	e656      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80024ae:	4e4c      	ldr	r6, [pc, #304]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80024b0:	6833      	ldr	r3, [r6, #0]
 80024b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024b6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80024b8:	f7fe f8d8 	bl	800066c <HAL_GetTick>
 80024bc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024be:	6833      	ldr	r3, [r6, #0]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	d478      	bmi.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024c4:	6822      	ldr	r2, [r4, #0]
 80024c6:	07d7      	lsls	r7, r2, #31
 80024c8:	d512      	bpl.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80024ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024cc:	b983      	cbnz	r3, 80024f0 <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024ce:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024d2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024da:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80024de:	430b      	orrs	r3, r1
 80024e0:	6861      	ldr	r1, [r4, #4]
 80024e2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80024e6:	68a1      	ldr	r1, [r4, #8]
 80024e8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80024ec:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024f0:	0316      	lsls	r6, r2, #12
 80024f2:	d503      	bpl.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80024f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fa:	d005      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80024fc:	02d0      	lsls	r0, r2, #11
 80024fe:	d51e      	bpl.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002500:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002506:	d11a      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002508:	4935      	ldr	r1, [pc, #212]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800250a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800250e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002512:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002516:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800251a:	4303      	orrs	r3, r0
 800251c:	6860      	ldr	r0, [r4, #4]
 800251e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002522:	68e0      	ldr	r0, [r4, #12]
 8002524:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002528:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800252c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002532:	f020 001f 	bic.w	r0, r0, #31
 8002536:	3b01      	subs	r3, #1
 8002538:	4303      	orrs	r3, r0
 800253a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800253e:	01d1      	lsls	r1, r2, #7
 8002540:	d511      	bpl.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002542:	4927      	ldr	r1, [pc, #156]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002544:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002548:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800254c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002550:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002554:	4303      	orrs	r3, r0
 8002556:	6860      	ldr	r0, [r4, #4]
 8002558:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800255c:	6920      	ldr	r0, [r4, #16]
 800255e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002562:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002566:	0192      	lsls	r2, r2, #6
 8002568:	d50d      	bpl.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800256a:	6923      	ldr	r3, [r4, #16]
 800256c:	6862      	ldr	r2, [r4, #4]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002574:	68e2      	ldr	r2, [r4, #12]
 8002576:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800257a:	68a2      	ldr	r2, [r4, #8]
 800257c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002580:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002582:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002586:	4e16      	ldr	r6, [pc, #88]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002588:	6833      	ldr	r3, [r6, #0]
 800258a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800258e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002590:	f7fe f86c 	bl	800066c <HAL_GetTick>
 8002594:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002596:	6833      	ldr	r3, [r6, #0]
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	f53f aed7 	bmi.w	800234c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800259e:	f7fe f865 	bl	800066c <HAL_GetTick>
 80025a2:	1bc0      	subs	r0, r0, r7
 80025a4:	2864      	cmp	r0, #100	; 0x64
 80025a6:	d9f6      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80025a8:	e753      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80025aa:	2e01      	cmp	r6, #1
 80025ac:	f43f af7f 	beq.w	80024ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80025b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025b4:	e6c8      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025b6:	f7fe f859 	bl	800066c <HAL_GetTick>
 80025ba:	1bc0      	subs	r0, r0, r7
 80025bc:	2864      	cmp	r0, #100	; 0x64
 80025be:	f67f af7e 	bls.w	80024be <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80025c2:	e746      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025c4:	f7fe f852 	bl	800066c <HAL_GetTick>
 80025c8:	1b80      	subs	r0, r0, r6
 80025ca:	2864      	cmp	r0, #100	; 0x64
 80025cc:	f67f aece 	bls.w	800236c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 80025d0:	e73f      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025d2:	f7fe f84b 	bl	800066c <HAL_GetTick>
 80025d6:	1b40      	subs	r0, r0, r5
 80025d8:	2864      	cmp	r0, #100	; 0x64
 80025da:	f67f af2b 	bls.w	8002434 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80025de:	e738      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80025e0:	40023800 	.word	0x40023800

080025e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80025e4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80025e8:	d131      	bne.n	800264e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80025ea:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80025ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80025f0:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 80025f4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80025f8:	d05f      	beq.n	80026ba <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80025fa:	d806      	bhi.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80025fc:	2a00      	cmp	r2, #0
 80025fe:	d039      	beq.n	8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8002600:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8002604:	d051      	beq.n	80026aa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    default :
      {
        break;
      }
    }
  }
 8002606:	2000      	movs	r0, #0
 8002608:	4770      	bx	lr
    switch (saiclocksource)
 800260a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
    switch (saiclocksource)
 800260e:	d1fa      	bne.n	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002610:	685b      	ldr	r3, [r3, #4]
          frequency = HSI_VALUE;
 8002612:	482c      	ldr	r0, [pc, #176]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002614:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002618:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 800261a:	bf08      	it	eq
 800261c:	4618      	moveq	r0, r3
 800261e:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002620:	4828      	ldr	r0, [pc, #160]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002622:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002624:	fbb0 f3f3 	udiv	r3, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002628:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800262c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8002630:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002634:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002636:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800263a:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800263e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8002648:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800264c:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800264e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8002652:	d1d8      	bne.n	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    saiclocksource = RCC->DCKCFGR1;
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8002656:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800265a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 800265e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002662:	d02a      	beq.n	80026ba <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002664:	d803      	bhi.n	800266e <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 8002666:	b12a      	cbz	r2, 8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8002668:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800266c:	e7ca      	b.n	8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 800266e:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002672:	e7cc      	b.n	800260e <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002674:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002676:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002678:	0251      	lsls	r1, r2, #9
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800267a:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800267c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002680:	bf54      	ite	pl
 8002682:	4811      	ldrpl	r0, [pc, #68]	; (80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002684:	480f      	ldrmi	r0, [pc, #60]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002686:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800268a:	fbb0 f3f3 	udiv	r3, r0, r3
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800268e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8002692:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002696:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002698:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800269c:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80026a0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80026a4:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80026a8:	e7cd      	b.n	8002646 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80026aa:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80026ac:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80026ae:	0252      	lsls	r2, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80026b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80026b4:	d4b4      	bmi.n	8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80026b6:	4804      	ldr	r0, [pc, #16]	; (80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80026b8:	e7b3      	b.n	8002622 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        frequency = EXTERNAL_CLOCK_VALUE;
 80026ba:	4804      	ldr	r0, [pc, #16]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)

  return frequency;
}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	017d7840 	.word	0x017d7840
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	01770000 	.word	0x01770000

080026d0 <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
 80026d0:	2901      	cmp	r1, #1
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80026d2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80026d4:	6842      	ldr	r2, [r0, #4]
    tmpIT|= SAI_IT_FREQ;
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2309      	moveq	r3, #9
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80026dc:	2908      	cmp	r1, #8
 80026de:	d105      	bne.n	80026ec <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80026e0:	f022 0102 	bic.w	r1, r2, #2
 80026e4:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 80026e6:	bf08      	it	eq
 80026e8:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80026ec:	3a02      	subs	r2, #2
 80026ee:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80026f0:	bf94      	ite	ls
 80026f2:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80026f6:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 80026fa:	4770      	bx	lr

080026fc <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <SAI_Disable.isra.0+0x34>)
 80026fe:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8002708:	6802      	ldr	r2, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800270a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800270c:	6811      	ldr	r1, [r2, #0]
 800270e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002712:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8002714:	3b01      	subs	r3, #1
 8002716:	d206      	bcs.n	8002726 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002718:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800271c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002720:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
 8002724:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8002726:	6811      	ldr	r1, [r2, #0]
 8002728:	03c9      	lsls	r1, r1, #15
 800272a:	d4f3      	bmi.n	8002714 <SAI_Disable.isra.0+0x18>

  return status;
}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	200003f4 	.word	0x200003f4

08002734 <HAL_SAI_Init>:
{
 8002734:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 8002736:	4604      	mov	r4, r0
 8002738:	2800      	cmp	r0, #0
 800273a:	f000 80c6 	beq.w	80028ca <HAL_SAI_Init+0x196>
  if(hsai->State == HAL_SAI_STATE_RESET)
 800273e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8002742:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002746:	b91b      	cbnz	r3, 8002750 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8002748:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 800274c:	f004 f906 	bl	800695c <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8002750:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8002752:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8002754:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8002758:	f7ff ffd0 	bl	80026fc <SAI_Disable.isra.0>
  switch(hsai->Init.SynchroExt)
 800275c:	68e3      	ldr	r3, [r4, #12]
 800275e:	2b01      	cmp	r3, #1
 8002760:	f000 80a1 	beq.w	80028a6 <HAL_SAI_Init+0x172>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8002764:	2b02      	cmp	r3, #2
 8002766:	bf14      	ite	ne
 8002768:	2300      	movne	r3, #0
 800276a:	2320      	moveq	r3, #32
  switch(hsai->Init.Synchro)
 800276c:	68a2      	ldr	r2, [r4, #8]
 800276e:	2a02      	cmp	r2, #2
 8002770:	f000 809d 	beq.w	80028ae <HAL_SAI_Init+0x17a>
 8002774:	2a03      	cmp	r2, #3
 8002776:	f000 8098 	beq.w	80028aa <HAL_SAI_Init+0x176>
 800277a:	2a01      	cmp	r2, #1
 800277c:	bf14      	ite	ne
 800277e:	2500      	movne	r5, #0
 8002780:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8002784:	6822      	ldr	r2, [r4, #0]
 8002786:	4952      	ldr	r1, [pc, #328]	; (80028d0 <HAL_SAI_Init+0x19c>)
 8002788:	4852      	ldr	r0, [pc, #328]	; (80028d4 <HAL_SAI_Init+0x1a0>)
 800278a:	428a      	cmp	r2, r1
 800278c:	d003      	beq.n	8002796 <HAL_SAI_Init+0x62>
 800278e:	4e52      	ldr	r6, [pc, #328]	; (80028d8 <HAL_SAI_Init+0x1a4>)
 8002790:	42b2      	cmp	r2, r6
 8002792:	f040 808f 	bne.w	80028b4 <HAL_SAI_Init+0x180>
    SAI1->GCR = tmpregisterGCR;
 8002796:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800279a:	69e3      	ldr	r3, [r4, #28]
 800279c:	b313      	cbz	r3, 80027e4 <HAL_SAI_Init+0xb0>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800279e:	428a      	cmp	r2, r1
 80027a0:	d003      	beq.n	80027aa <HAL_SAI_Init+0x76>
 80027a2:	4b4d      	ldr	r3, [pc, #308]	; (80028d8 <HAL_SAI_Init+0x1a4>)
 80027a4:	429a      	cmp	r2, r3
 80027a6:	f040 8088 	bne.w	80028ba <HAL_SAI_Init+0x186>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80027aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027ae:	f7ff ff19 	bl	80025e4 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	4a49      	ldr	r2, [pc, #292]	; (80028dc <HAL_SAI_Init+0x1a8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d002      	beq.n	80027c0 <HAL_SAI_Init+0x8c>
 80027ba:	3220      	adds	r2, #32
 80027bc:	4293      	cmp	r3, r2
 80027be:	d103      	bne.n	80027c8 <HAL_SAI_Init+0x94>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80027c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027c4:	f7ff ff0e 	bl	80025e4 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80027c8:	220a      	movs	r2, #10
 80027ca:	69e3      	ldr	r3, [r4, #28]
 80027cc:	4350      	muls	r0, r2
 80027ce:	025b      	lsls	r3, r3, #9
 80027d0:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 80027d4:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 80027d8:	fb02 0013 	mls	r0, r2, r3, r0
 80027dc:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 80027de:	bf08      	it	eq
 80027e0:	3301      	addeq	r3, #1
 80027e2:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80027e4:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80027e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80027e8:	f033 0102 	bics.w	r1, r3, #2
 80027ec:	d167      	bne.n	80028be <HAL_SAI_Init+0x18a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80027ee:	2a01      	cmp	r2, #1
 80027f0:	bf18      	it	ne
 80027f2:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80027f6:	6822      	ldr	r2, [r4, #0]
 80027f8:	4839      	ldr	r0, [pc, #228]	; (80028e0 <HAL_SAI_Init+0x1ac>)
 80027fa:	6816      	ldr	r6, [r2, #0]
 80027fc:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80027fe:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002800:	4333      	orrs	r3, r6
 8002802:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002804:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002806:	4333      	orrs	r3, r6
 8002808:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800280a:	6810      	ldr	r0, [r2, #0]
 800280c:	4333      	orrs	r3, r6
 800280e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002810:	4333      	orrs	r3, r6
 8002812:	6926      	ldr	r6, [r4, #16]
 8002814:	4333      	orrs	r3, r6
 8002816:	6966      	ldr	r6, [r4, #20]
 8002818:	4333      	orrs	r3, r6
 800281a:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800281c:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800281e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002822:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002824:	432b      	orrs	r3, r5
 8002826:	430b      	orrs	r3, r1
 8002828:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800282a:	6853      	ldr	r3, [r2, #4]
 800282c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002830:	f023 030f 	bic.w	r3, r3, #15
 8002834:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002836:	69a3      	ldr	r3, [r4, #24]
 8002838:	6851      	ldr	r1, [r2, #4]
 800283a:	4303      	orrs	r3, r0
 800283c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800283e:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002840:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002842:	430b      	orrs	r3, r1
 8002844:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_SAI_Init+0x1b0>)
 8002848:	6891      	ldr	r1, [r2, #8]
 800284a:	400b      	ands	r3, r1
 800284c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800284e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002850:	6891      	ldr	r1, [r2, #8]
 8002852:	4303      	orrs	r3, r0
 8002854:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002856:	4303      	orrs	r3, r0
 8002858:	430b      	orrs	r3, r1
 800285a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800285c:	3901      	subs	r1, #1
 800285e:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8002860:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002862:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002864:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002868:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800286a:	68d3      	ldr	r3, [r2, #12]
 800286c:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8002870:	f023 030f 	bic.w	r3, r3, #15
 8002874:	041b      	lsls	r3, r3, #16
 8002876:	0c1b      	lsrs	r3, r3, #16
 8002878:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800287a:	68d1      	ldr	r1, [r2, #12]
 800287c:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8002880:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002882:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002884:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002886:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002888:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800288c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800288e:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002890:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002894:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8002896:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002898:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 800289c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 80028a0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
  switch(hsai->Init.SynchroExt)
 80028a6:	2310      	movs	r3, #16
 80028a8:	e760      	b.n	800276c <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80028aa:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80028ae:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80028b2:	e767      	b.n	8002784 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 80028b4:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
 80028b8:	e76f      	b.n	800279a <HAL_SAI_Init+0x66>
    uint32_t freq = 0;
 80028ba:	2000      	movs	r0, #0
 80028bc:	e779      	b.n	80027b2 <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80028be:	2a01      	cmp	r2, #1
 80028c0:	bf14      	ite	ne
 80028c2:	2100      	movne	r1, #0
 80028c4:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80028c8:	e795      	b.n	80027f6 <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
 80028cc:	e7ea      	b.n	80028a4 <HAL_SAI_Init+0x170>
 80028ce:	bf00      	nop
 80028d0:	40015804 	.word	0x40015804
 80028d4:	40015000 	.word	0x40015000
 80028d8:	40015824 	.word	0x40015824
 80028dc:	40015c04 	.word	0x40015c04
 80028e0:	ff05c010 	.word	0xff05c010
 80028e4:	fff88000 	.word	0xfff88000

080028e8 <HAL_SAI_InitProtocol>:
  switch(protocol)
 80028e8:	2902      	cmp	r1, #2
{
 80028ea:	b430      	push	{r4, r5}
  switch(protocol)
 80028ec:	d905      	bls.n	80028fa <HAL_SAI_InitProtocol+0x12>
 80028ee:	1ecc      	subs	r4, r1, #3
 80028f0:	2c01      	cmp	r4, #1
 80028f2:	d95b      	bls.n	80029ac <HAL_SAI_InitProtocol+0xc4>
}
 80028f4:	2001      	movs	r0, #1
 80028f6:	bc30      	pop	{r4, r5}
 80028f8:	4770      	bx	lr
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80028fa:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80028fc:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 80028fe:	65c3      	str	r3, [r0, #92]	; 0x5c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002900:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002904:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8002906:	6384      	str	r4, [r0, #56]	; 0x38
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002908:	bf14      	ite	ne
 800290a:	2501      	movne	r5, #1
 800290c:	4625      	moveq	r5, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 800290e:	6544      	str	r4, [r0, #84]	; 0x54
  if((nbslot & 0x1) != 0 )
 8002910:	f013 0401 	ands.w	r4, r3, #1
 8002914:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8002916:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800291a:	6485      	str	r5, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800291c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002920:	6605      	str	r5, [r0, #96]	; 0x60
  if((nbslot & 0x1) != 0 )
 8002922:	d1e7      	bne.n	80028f4 <HAL_SAI_InitProtocol+0xc>
  switch(protocol)
 8002924:	1e4d      	subs	r5, r1, #1
 8002926:	2d01      	cmp	r5, #1
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8002928:	bf93      	iteet	ls
 800292a:	f44f 3500 	movls.w	r5, #131072	; 0x20000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800292e:	64c4      	strhi	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8002930:	f44f 2480 	movhi.w	r4, #262144	; 0x40000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8002934:	64c5      	strls	r5, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8002936:	6504      	str	r4, [r0, #80]	; 0x50
  switch(datasize)
 8002938:	2a03      	cmp	r2, #3
 800293a:	d8db      	bhi.n	80028f4 <HAL_SAI_InitProtocol+0xc>
 800293c:	e8df f002 	tbb	[pc, r2]
 8002940:	2d1d0c02 	.word	0x2d1d0c02
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002944:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 8002946:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002948:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 800294a:	015a      	lsls	r2, r3, #5
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 800294c:	011b      	lsls	r3, r3, #4
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 800294e:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 8002950:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8002952:	2340      	movs	r3, #64	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002954:	6583      	str	r3, [r0, #88]	; 0x58
  if(status == HAL_OK)
 8002956:	e00d      	b.n	8002974 <HAL_SAI_InitProtocol+0x8c>
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002958:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800295a:	2280      	movs	r2, #128	; 0x80
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 800295c:	2902      	cmp	r1, #2
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800295e:	ea4f 1483 	mov.w	r4, r3, lsl #6
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002962:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002964:	ea4f 1343 	mov.w	r3, r3, lsl #5
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002968:	6582      	str	r2, [r0, #88]	; 0x58
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800296a:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800296c:	6443      	str	r3, [r0, #68]	; 0x44
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 800296e:	d101      	bne.n	8002974 <HAL_SAI_InitProtocol+0x8c>
      hsai->SlotInit.FirstBitOffset = 16;
 8002970:	2310      	movs	r3, #16
      hsai->SlotInit.FirstBitOffset = 8;
 8002972:	6543      	str	r3, [r0, #84]	; 0x54
}
 8002974:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 8002976:	f7ff bedd 	b.w	8002734 <HAL_SAI_Init>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 800297a:	22c0      	movs	r2, #192	; 0xc0
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800297c:	085b      	lsrs	r3, r3, #1
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 800297e:	2902      	cmp	r1, #2
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002980:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002982:	ea4f 1283 	mov.w	r2, r3, lsl #6
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002986:	ea4f 1343 	mov.w	r3, r3, lsl #5
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800298a:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800298c:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800298e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002992:	6583      	str	r3, [r0, #88]	; 0x58
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 8002994:	d1ee      	bne.n	8002974 <HAL_SAI_InitProtocol+0x8c>
      hsai->SlotInit.FirstBitOffset = 8;
 8002996:	2308      	movs	r3, #8
 8002998:	e7eb      	b.n	8002972 <HAL_SAI_InitProtocol+0x8a>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800299a:	22e0      	movs	r2, #224	; 0xe0
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800299c:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800299e:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80029a0:	019a      	lsls	r2, r3, #6
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80029a2:	015b      	lsls	r3, r3, #5
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80029a4:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80029a6:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	e7d3      	b.n	8002954 <HAL_SAI_InitProtocol+0x6c>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80029ac:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80029ae:	2400      	movs	r4, #0
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80029b0:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
  hsai->SlotInit.SlotNumber      = nbslot;
 80029b4:	65c3      	str	r3, [r0, #92]	; 0x5c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80029b6:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80029ba:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80029bc:	6384      	str	r4, [r0, #56]	; 0x38
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80029be:	bf14      	ite	ne
 80029c0:	4625      	movne	r5, r4
 80029c2:	2501      	moveq	r5, #1
    hsai->FrameInit.ActiveFrameLength = 13;
 80029c4:	2904      	cmp	r1, #4
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80029c6:	6484      	str	r4, [r0, #72]	; 0x48
 80029c8:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80029ca:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    hsai->FrameInit.ActiveFrameLength = 13;
 80029ce:	bf0c      	ite	eq
 80029d0:	2101      	moveq	r1, #1
 80029d2:	210d      	movne	r1, #13
  hsai->SlotInit.FirstBitOffset  = 0;
 80029d4:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80029d6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80029da:	6441      	str	r1, [r0, #68]	; 0x44
 80029dc:	6604      	str	r4, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80029de:	e9c0 c513 	strd	ip, r5, [r0, #76]	; 0x4c
  switch(datasize)
 80029e2:	2a03      	cmp	r2, #3
 80029e4:	d886      	bhi.n	80028f4 <HAL_SAI_InitProtocol+0xc>
 80029e6:	e8df f002 	tbb	[pc, r2]
 80029ea:	0702      	.short	0x0702
 80029ec:	120d      	.short	0x120d
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80029ee:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 16 * nbslot;
 80029f0:	011b      	lsls	r3, r3, #4
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80029f2:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 80029f4:	6403      	str	r3, [r0, #64]	; 0x40
 80029f6:	e7ac      	b.n	8002952 <HAL_SAI_InitProtocol+0x6a>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80029f8:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 32 * nbslot;
 80029fa:	015b      	lsls	r3, r3, #5
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80029fc:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 80029fe:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002a00:	6582      	str	r2, [r0, #88]	; 0x58
  if(status == HAL_OK)
 8002a02:	e7b7      	b.n	8002974 <HAL_SAI_InitProtocol+0x8c>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002a04:	22c0      	movs	r2, #192	; 0xc0
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002a06:	015b      	lsls	r3, r3, #5
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002a08:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002a0a:	6403      	str	r3, [r0, #64]	; 0x40
 8002a0c:	e7cc      	b.n	80029a8 <HAL_SAI_InitProtocol+0xc0>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002a0e:	22e0      	movs	r2, #224	; 0xe0
 8002a10:	e7f9      	b.n	8002a06 <HAL_SAI_InitProtocol+0x11e>
	...

08002a14 <HAL_SAI_Transmit_DMA>:
{
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	4613      	mov	r3, r2
 8002a18:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
 8002a1a:	2900      	cmp	r1, #0
 8002a1c:	d03f      	beq.n	8002a9e <HAL_SAI_Transmit_DMA+0x8a>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d03d      	beq.n	8002a9e <HAL_SAI_Transmit_DMA+0x8a>
  if(hsai->State == HAL_SAI_STATE_READY)
 8002a22:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
 8002a26:	2801      	cmp	r0, #1
 8002a28:	b2c5      	uxtb	r5, r0
 8002a2a:	d13a      	bne.n	8002aa2 <HAL_SAI_Transmit_DMA+0x8e>
    __HAL_LOCK(hsai);
 8002a2c:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
 8002a30:	2801      	cmp	r0, #1
 8002a32:	d036      	beq.n	8002aa2 <HAL_SAI_Transmit_DMA+0x8e>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002a34:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8002a36:	2212      	movs	r2, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002a38:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002a3a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8002a3e:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002a42:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <HAL_SAI_Transmit_DMA+0x94>)
    __HAL_LOCK(hsai);
 8002a44:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8002a48:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8002a4a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8002a4e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002a52:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8002a54:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_SAI_Transmit_DMA+0x98>)
 8002a56:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8002a58:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <HAL_SAI_Transmit_DMA+0x9c>)
    hsai->hdmatx->XferAbortCallback = NULL;
 8002a5a:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	321c      	adds	r2, #28
 8002a62:	f7fd ff17 	bl	8000894 <HAL_DMA_Start_IT>
 8002a66:	b118      	cbz	r0, 8002a70 <HAL_SAI_Transmit_DMA+0x5c>
      __HAL_UNLOCK(hsai);
 8002a68:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8002a70:	6825      	ldr	r5, [r4, #0]
 8002a72:	682b      	ldr	r3, [r5, #0]
 8002a74:	03db      	lsls	r3, r3, #15
 8002a76:	d403      	bmi.n	8002a80 <HAL_SAI_Transmit_DMA+0x6c>
      __HAL_SAI_ENABLE(hsai);
 8002a78:	682b      	ldr	r3, [r5, #0]
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002a80:	2100      	movs	r1, #0
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff fe24 	bl	80026d0 <SAI_InterruptFlag>
 8002a88:	692b      	ldr	r3, [r5, #16]
 8002a8a:	4318      	orrs	r0, r3
 8002a8c:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8002a8e:	682b      	ldr	r3, [r5, #0]
 8002a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a94:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
 8002a96:	2500      	movs	r5, #0
 8002a98:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
 8002a9c:	e7e6      	b.n	8002a6c <HAL_SAI_Transmit_DMA+0x58>
    return  HAL_ERROR;
 8002a9e:	2501      	movs	r5, #1
 8002aa0:	e7e4      	b.n	8002a6c <HAL_SAI_Transmit_DMA+0x58>
    return HAL_BUSY;
 8002aa2:	2502      	movs	r5, #2
 8002aa4:	e7e2      	b.n	8002a6c <HAL_SAI_Transmit_DMA+0x58>
 8002aa6:	bf00      	nop
 8002aa8:	08002b8d 	.word	0x08002b8d
 8002aac:	08002b55 	.word	0x08002b55
 8002ab0:	08002bdb 	.word	0x08002bdb

08002ab4 <HAL_SAI_Receive_DMA>:
{
 8002ab4:	4613      	mov	r3, r2
  if((pData == NULL) || (Size == 0))
 8002ab6:	460a      	mov	r2, r1
{
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
 8002abc:	2900      	cmp	r1, #0
 8002abe:	d03f      	beq.n	8002b40 <HAL_SAI_Receive_DMA+0x8c>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d03d      	beq.n	8002b40 <HAL_SAI_Receive_DMA+0x8c>
  if(hsai->State == HAL_SAI_STATE_READY)
 8002ac4:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
 8002ac8:	2901      	cmp	r1, #1
 8002aca:	b2cd      	uxtb	r5, r1
 8002acc:	d13a      	bne.n	8002b44 <HAL_SAI_Receive_DMA+0x90>
    __HAL_LOCK(hsai);
 8002ace:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 8002ad2:	2901      	cmp	r1, #1
 8002ad4:	d036      	beq.n	8002b44 <HAL_SAI_Receive_DMA+0x90>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002ad6:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8002ad8:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
 8002ada:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002ade:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
 8002ae2:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8002ae4:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    hsai->XferSize = Size;
 8002ae8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8002aec:	4916      	ldr	r1, [pc, #88]	; (8002b48 <HAL_SAI_Receive_DMA+0x94>)
    hsai->XferCount = Size;
 8002aee:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8002af2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8002af4:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8002af6:	4915      	ldr	r1, [pc, #84]	; (8002b4c <HAL_SAI_Receive_DMA+0x98>)
 8002af8:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8002afa:	4915      	ldr	r1, [pc, #84]	; (8002b50 <HAL_SAI_Receive_DMA+0x9c>)
    hsai->hdmarx->XferAbortCallback = NULL;
 8002afc:	e9c0 1613 	strd	r1, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8002b00:	6821      	ldr	r1, [r4, #0]
 8002b02:	311c      	adds	r1, #28
 8002b04:	f7fd fec6 	bl	8000894 <HAL_DMA_Start_IT>
 8002b08:	b118      	cbz	r0, 8002b12 <HAL_SAI_Receive_DMA+0x5e>
      __HAL_UNLOCK(hsai);
 8002b0a:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 8002b0e:	4628      	mov	r0, r5
 8002b10:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8002b12:	6825      	ldr	r5, [r4, #0]
 8002b14:	682b      	ldr	r3, [r5, #0]
 8002b16:	03db      	lsls	r3, r3, #15
 8002b18:	d403      	bmi.n	8002b22 <HAL_SAI_Receive_DMA+0x6e>
      __HAL_SAI_ENABLE(hsai);
 8002b1a:	682b      	ldr	r3, [r5, #0]
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002b22:	2100      	movs	r1, #0
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff fdd3 	bl	80026d0 <SAI_InterruptFlag>
 8002b2a:	692b      	ldr	r3, [r5, #16]
 8002b2c:	4318      	orrs	r0, r3
 8002b2e:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8002b30:	682b      	ldr	r3, [r5, #0]
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b36:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
 8002b38:	2500      	movs	r5, #0
 8002b3a:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
 8002b3e:	e7e6      	b.n	8002b0e <HAL_SAI_Receive_DMA+0x5a>
    return  HAL_ERROR;
 8002b40:	2501      	movs	r5, #1
 8002b42:	e7e4      	b.n	8002b0e <HAL_SAI_Receive_DMA+0x5a>
    return HAL_BUSY;
 8002b44:	2502      	movs	r5, #2
 8002b46:	e7e2      	b.n	8002b0e <HAL_SAI_Receive_DMA+0x5a>
 8002b48:	08002bcf 	.word	0x08002bcf
 8002b4c:	08002b97 	.word	0x08002b97
 8002b50:	08002bdb 	.word	0x08002bdb

08002b54 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002b54:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002b56:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8002b58:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 8002b60:	d110      	bne.n	8002b84 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002b62:	6825      	ldr	r5, [r4, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002b64:	4620      	mov	r0, r4
    hsai->XferCount = 0;
 8002b66:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b70:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002b72:	f7ff fdad 	bl	80026d0 <SAI_InterruptFlag>
 8002b76:	692b      	ldr	r3, [r5, #16]
 8002b78:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State= HAL_SAI_STATE_READY;
 8002b7c:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002b7e:	6128      	str	r0, [r5, #16]
    hsai->State= HAL_SAI_STATE_READY;
 8002b80:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8002b84:	4620      	mov	r0, r4
 8002b86:	f003 fa53 	bl	8006030 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002b8a:	bd38      	pop	{r3, r4, r5, pc}

08002b8c <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8002b8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002b8e:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8002b90:	f003 fa46 	bl	8006020 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002b94:	bd08      	pop	{r3, pc}

08002b96 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002b96:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

 if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002b98:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b9a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 8002ba2:	d110      	bne.n	8002bc6 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002ba4:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002ba6:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002ba8:	682b      	ldr	r3, [r5, #0]
 8002baa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002bae:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 8002bb0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002bb4:	f7ff fd8c 	bl	80026d0 <SAI_InterruptFlag>
 8002bb8:	692b      	ldr	r3, [r5, #16]
 8002bba:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
 8002bbe:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002bc0:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8002bc2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f003 fa1c 	bl	8006004 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002bcc:	bd38      	pop	{r3, r4, r5, pc}

08002bce <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8002bce:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002bd0:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 8002bd2:	f003 fa09 	bl	8005fe8 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002bd6:	bd08      	pop	{r3, pc}

08002bd8 <HAL_SAI_ErrorCallback>:
 8002bd8:	4770      	bx	lr

08002bda <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bda:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002bdc:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8002bde:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8002bea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d003      	beq.n	8002bfa <SAI_DMAError+0x20>
 8002bf2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10c      	bne.n	8002c14 <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8002bfa:	6802      	ldr	r2, [r0, #0]
 8002bfc:	6813      	ldr	r3, [r2, #0]
 8002bfe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c02:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8002c04:	f7ff fd7a 	bl	80026fc <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8002c14:	f7ff ffe0 	bl	8002bd8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002c18:	bd08      	pop	{r3, pc}

08002c1a <SPI_WaitFifoStateUntilTimeout.part.0>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c1a:	6803      	ldr	r3, [r0, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c24:	6842      	ldr	r2, [r0, #4]
 8002c26:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002c2a:	d10a      	bne.n	8002c42 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
 8002c2c:	6882      	ldr	r2, [r0, #8]
 8002c2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002c32:	d002      	beq.n	8002c3a <SPI_WaitFifoStateUntilTimeout.part.0+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c34:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002c38:	d103      	bne.n	8002c42 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c42:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002c44:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002c48:	d107      	bne.n	8002c5a <SPI_WaitFifoStateUntilTimeout.part.0+0x40>
        {
          SPI_RESET_CRC(hspi);
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c60:	2300      	movs	r3, #0
 8002c62:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8002c66:	2003      	movs	r0, #3
 8002c68:	4770      	bx	lr

08002c6a <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	4616      	mov	r6, r2
 8002c72:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	6898      	ldr	r0, [r3, #8]
 8002c78:	4020      	ands	r0, r4
 8002c7a:	d100      	bne.n	8002c7e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x14>
      }
    }
  }

  return HAL_OK;
}
 8002c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c7e:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002c82:	d100      	bne.n	8002c86 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002c84:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	1c72      	adds	r2, r6, #1
 8002c88:	d0f5      	beq.n	8002c76 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002c8a:	f7fd fcef 	bl	800066c <HAL_GetTick>
 8002c8e:	1bc0      	subs	r0, r0, r7
 8002c90:	4286      	cmp	r6, r0
 8002c92:	d8ef      	bhi.n	8002c74 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa>
 8002c94:	4628      	mov	r0, r5
}
 8002c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c9a:	f7ff bfbe 	b.w	8002c1a <SPI_WaitFifoStateUntilTimeout.part.0>

08002c9e <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002c9e:	b570      	push	{r4, r5, r6, lr}
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	460d      	mov	r5, r1
 8002ca4:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ca6:	6822      	ldr	r2, [r4, #0]
 8002ca8:	6890      	ldr	r0, [r2, #8]
 8002caa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cae:	d100      	bne.n	8002cb2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x14>
}
 8002cb0:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	1c6b      	adds	r3, r5, #1
 8002cb4:	d0f8      	beq.n	8002ca8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cb6:	f7fd fcd9 	bl	800066c <HAL_GetTick>
 8002cba:	1b80      	subs	r0, r0, r6
 8002cbc:	4285      	cmp	r5, r0
 8002cbe:	d8f2      	bhi.n	8002ca6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8>
 8002cc0:	4620      	mov	r0, r4
}
 8002cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002cc6:	f7ff bfa8 	b.w	8002c1a <SPI_WaitFifoStateUntilTimeout.part.0>

08002cca <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cca:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ccc:	6842      	ldr	r2, [r0, #4]
 8002cce:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8002cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	460e      	mov	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd8:	d10b      	bne.n	8002cf2 <SPI_EndRxTransaction+0x28>
 8002cda:	6882      	ldr	r2, [r0, #8]
 8002cdc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002ce0:	d002      	beq.n	8002ce8 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ce2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002ce6:	d104      	bne.n	8002cf2 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ce8:	6820      	ldr	r0, [r4, #0]
 8002cea:	6802      	ldr	r2, [r0, #0]
 8002cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf0:	6002      	str	r2, [r0, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4631      	mov	r1, r6
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	f7ff ffd0 	bl	8002c9e <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002cfe:	9b01      	ldr	r3, [sp, #4]
 8002d00:	4605      	mov	r5, r0
 8002d02:	b128      	cbz	r0, 8002d10 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d04:	6e23      	ldr	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002d06:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d08:	f043 0320 	orr.w	r3, r3, #32
 8002d0c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002d0e:	e012      	b.n	8002d36 <SPI_EndRxTransaction+0x6c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d10:	6862      	ldr	r2, [r4, #4]
 8002d12:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002d16:	d10e      	bne.n	8002d36 <SPI_EndRxTransaction+0x6c>
 8002d18:	68a2      	ldr	r2, [r4, #8]
 8002d1a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002d1e:	d002      	beq.n	8002d26 <SPI_EndRxTransaction+0x5c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d20:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002d24:	d107      	bne.n	8002d36 <SPI_EndRxTransaction+0x6c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d26:	4632      	mov	r2, r6
 8002d28:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f7ff ff9c 	bl	8002c6a <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d1e6      	bne.n	8002d04 <SPI_EndRxTransaction+0x3a>
    }
  }
  return HAL_OK;
}
 8002d36:	4628      	mov	r0, r5
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}

08002d3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d3e:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d40:	9201      	str	r2, [sp, #4]
{
 8002d42:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d44:	460a      	mov	r2, r1
 8002d46:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8002d4a:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d4c:	f7ff ff8d 	bl	8002c6a <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002d50:	9b01      	ldr	r3, [sp, #4]
 8002d52:	b128      	cbz	r0, 8002d60 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d54:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d56:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d58:	f043 0320 	orr.w	r3, r3, #32
 8002d5c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d5e:	e010      	b.n	8002d82 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d60:	461a      	mov	r2, r3
 8002d62:	4629      	mov	r1, r5
 8002d64:	4620      	mov	r0, r4
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	f7ff ff99 	bl	8002c9e <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002d6c:	9b01      	ldr	r3, [sp, #4]
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	d1f0      	bne.n	8002d54 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d72:	462a      	mov	r2, r5
 8002d74:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7ff ff76 	bl	8002c6a <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	d1e8      	bne.n	8002d54 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8002d82:	b003      	add	sp, #12
 8002d84:	bd30      	pop	{r4, r5, pc}

08002d86 <HAL_SPI_Init>:
{
 8002d86:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002d88:	4604      	mov	r4, r0
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	d04a      	beq.n	8002e24 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d92:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002d96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d9a:	b91b      	cbnz	r3, 8002da4 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002d9c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002da0:	f003 fefc 	bl	8006b9c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002da4:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002da6:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002da8:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002daa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002dae:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002db0:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	d833      	bhi.n	8002e28 <HAL_SPI_Init+0xa2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dc4:	d000      	beq.n	8002dc8 <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002dc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dca:	b92b      	cbnz	r3, 8002dd8 <HAL_SPI_Init+0x52>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dcc:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002dd0:	bf8c      	ite	hi
 8002dd2:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002dd4:	2301      	movls	r3, #1
 8002dd6:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002dd8:	69a0      	ldr	r0, [r4, #24]
 8002dda:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8002dde:	4333      	orrs	r3, r6
 8002de0:	6926      	ldr	r6, [r4, #16]
 8002de2:	4333      	orrs	r3, r6
 8002de4:	6966      	ldr	r6, [r4, #20]
 8002de6:	4333      	orrs	r3, r6
 8002de8:	69e6      	ldr	r6, [r4, #28]
 8002dea:	4333      	orrs	r3, r6
 8002dec:	6a26      	ldr	r6, [r4, #32]
 8002dee:	4333      	orrs	r3, r6
 8002df0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002df2:	4333      	orrs	r3, r6
 8002df4:	f400 7600 	and.w	r6, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002df8:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002dfa:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002dfc:	f000 0004 	and.w	r0, r0, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002e00:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e04:	432b      	orrs	r3, r5
 8002e06:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002e08:	432b      	orrs	r3, r5
 8002e0a:	4303      	orrs	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e0c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e12:	69d3      	ldr	r3, [r2, #28]
 8002e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e18:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002e1a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e1c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e1e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e24:	2001      	movs	r0, #1
 8002e26:	e7fc      	b.n	8002e22 <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e28:	4619      	mov	r1, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e2a:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 8002e2e:	e7c9      	b.n	8002dc4 <HAL_SPI_Init+0x3e>

08002e30 <HAL_SPI_Transmit>:
{
 8002e30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e34:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002e36:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8002e3e:	2b01      	cmp	r3, #1
{
 8002e40:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8002e42:	f000 80b4 	beq.w	8002fae <HAL_SPI_Transmit+0x17e>
 8002e46:	2301      	movs	r3, #1
 8002e48:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002e4c:	f7fd fc0e 	bl	800066c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002e50:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 8002e54:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	b2d8      	uxtb	r0, r3
 8002e5a:	f040 80a6 	bne.w	8002faa <HAL_SPI_Transmit+0x17a>
  if ((pData == NULL) || (Size == 0U))
 8002e5e:	2d00      	cmp	r5, #0
 8002e60:	d05c      	beq.n	8002f1c <HAL_SPI_Transmit+0xec>
 8002e62:	2f00      	cmp	r7, #0
 8002e64:	d05a      	beq.n	8002f1c <HAL_SPI_Transmit+0xec>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e66:	2303      	movs	r3, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e68:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e6a:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e6c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e70:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e74:	f04f 0300 	mov.w	r3, #0
  hspi->TxXferSize  = Size;
 8002e78:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e7a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e7c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002e7e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8002e80:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002e84:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002e88:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    SPI_1LINE_TX(hspi);
 8002e8c:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e8e:	d103      	bne.n	8002e98 <HAL_SPI_Transmit+0x68>
    SPI_1LINE_TX(hspi);
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e96:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	0652      	lsls	r2, r2, #25
 8002e9c:	d403      	bmi.n	8002ea6 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_ENABLE(hspi);
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ea6:	68e1      	ldr	r1, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea8:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002eae:	d941      	bls.n	8002f34 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb0:	b10a      	cbz	r2, 8002eb6 <HAL_SPI_Transmit+0x86>
 8002eb2:	2f01      	cmp	r7, #1
 8002eb4:	d107      	bne.n	8002ec6 <HAL_SPI_Transmit+0x96>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002eba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ebc:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002ebe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002ec6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	b9a3      	cbnz	r3, 8002ef6 <HAL_SPI_Transmit+0xc6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ecc:	4642      	mov	r2, r8
 8002ece:	4631      	mov	r1, r6
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7ff ff33 	bl	8002d3c <SPI_EndRxTxTransaction>
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d164      	bne.n	8002fa4 <HAL_SPI_Transmit+0x174>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eda:	68a3      	ldr	r3, [r4, #8]
 8002edc:	b933      	cbnz	r3, 8002eec <HAL_SPI_Transmit+0xbc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	9201      	str	r2, [sp, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eec:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8002eee:	3800      	subs	r0, #0
 8002ef0:	bf18      	it	ne
 8002ef2:	2001      	movne	r0, #1
error:
 8002ef4:	e012      	b.n	8002f1c <HAL_SPI_Transmit+0xec>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ef6:	6822      	ldr	r2, [r4, #0]
 8002ef8:	6893      	ldr	r3, [r2, #8]
 8002efa:	079d      	lsls	r5, r3, #30
 8002efc:	d505      	bpl.n	8002f0a <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f00:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002f04:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f06:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f08:	e7d9      	b.n	8002ebe <HAL_SPI_Transmit+0x8e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f0a:	f7fd fbaf 	bl	800066c <HAL_GetTick>
 8002f0e:	eba0 0008 	sub.w	r0, r0, r8
 8002f12:	42b0      	cmp	r0, r6
 8002f14:	d30b      	bcc.n	8002f2e <HAL_SPI_Transmit+0xfe>
 8002f16:	1c70      	adds	r0, r6, #1
 8002f18:	d0d5      	beq.n	8002ec6 <HAL_SPI_Transmit+0x96>
          errorcode = HAL_TIMEOUT;
 8002f1a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f22:	2300      	movs	r3, #0
 8002f24:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002f28:	b002      	add	sp, #8
 8002f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f2e:	2e00      	cmp	r6, #0
 8002f30:	d1c9      	bne.n	8002ec6 <HAL_SPI_Transmit+0x96>
 8002f32:	e7f2      	b.n	8002f1a <HAL_SPI_Transmit+0xea>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f34:	b10a      	cbz	r2, 8002f3a <HAL_SPI_Transmit+0x10a>
 8002f36:	2f01      	cmp	r7, #1
 8002f38:	d113      	bne.n	8002f62 <HAL_SPI_Transmit+0x132>
      if (hspi->TxXferCount > 1U)
 8002f3a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002f3c:	b292      	uxth	r2, r2
 8002f3e:	2a01      	cmp	r2, #1
 8002f40:	d906      	bls.n	8002f50 <HAL_SPI_Transmit+0x120>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f42:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002f46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f48:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f4c:	3b02      	subs	r3, #2
 8002f4e:	e006      	b.n	8002f5e <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f50:	782a      	ldrb	r2, [r5, #0]
 8002f52:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8002f54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f56:	3301      	adds	r3, #1
 8002f58:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002f5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002f62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0b0      	beq.n	8002ecc <HAL_SPI_Transmit+0x9c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f6a:	6822      	ldr	r2, [r4, #0]
 8002f6c:	6893      	ldr	r3, [r2, #8]
 8002f6e:	0799      	lsls	r1, r3, #30
 8002f70:	d50c      	bpl.n	8002f8c <HAL_SPI_Transmit+0x15c>
        if (hspi->TxXferCount > 1U)
 8002f72:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8002f76:	b289      	uxth	r1, r1
 8002f78:	2901      	cmp	r1, #1
 8002f7a:	d904      	bls.n	8002f86 <HAL_SPI_Transmit+0x156>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f7c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002f80:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f82:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f84:	e7e1      	b.n	8002f4a <HAL_SPI_Transmit+0x11a>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002f8a:	e7e3      	b.n	8002f54 <HAL_SPI_Transmit+0x124>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f8c:	f7fd fb6e 	bl	800066c <HAL_GetTick>
 8002f90:	eba0 0008 	sub.w	r0, r0, r8
 8002f94:	42b0      	cmp	r0, r6
 8002f96:	d302      	bcc.n	8002f9e <HAL_SPI_Transmit+0x16e>
 8002f98:	1c73      	adds	r3, r6, #1
 8002f9a:	d0e2      	beq.n	8002f62 <HAL_SPI_Transmit+0x132>
 8002f9c:	e7bd      	b.n	8002f1a <HAL_SPI_Transmit+0xea>
 8002f9e:	2e00      	cmp	r6, #0
 8002fa0:	d1df      	bne.n	8002f62 <HAL_SPI_Transmit+0x132>
 8002fa2:	e7ba      	b.n	8002f1a <HAL_SPI_Transmit+0xea>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	6623      	str	r3, [r4, #96]	; 0x60
 8002fa8:	e797      	b.n	8002eda <HAL_SPI_Transmit+0xaa>
    errorcode = HAL_BUSY;
 8002faa:	2002      	movs	r0, #2
 8002fac:	e7b6      	b.n	8002f1c <HAL_SPI_Transmit+0xec>
  __HAL_LOCK(hspi);
 8002fae:	2002      	movs	r0, #2
 8002fb0:	e7ba      	b.n	8002f28 <HAL_SPI_Transmit+0xf8>

08002fb2 <HAL_SPI_TransmitReceive>:
{
 8002fb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fb6:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002fb8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8002fc0:	2b01      	cmp	r3, #1
{
 8002fc2:	4616      	mov	r6, r2
 8002fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002fc8:	f000 811d 	beq.w	8003206 <HAL_SPI_TransmitReceive+0x254>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002fd2:	f7fd fb4b 	bl	800066c <HAL_GetTick>
  tmp_state           = hspi->State;
 8002fd6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 8002fda:	4681      	mov	r9, r0
  tmp_mode            = hspi->Init.Mode;
 8002fdc:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fde:	2a01      	cmp	r2, #1
  tmp_state           = hspi->State;
 8002fe0:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fe2:	d00a      	beq.n	8002ffa <HAL_SPI_TransmitReceive+0x48>
 8002fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe8:	f040 810b 	bne.w	8003202 <HAL_SPI_TransmitReceive+0x250>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fec:	68a2      	ldr	r2, [r4, #8]
 8002fee:	2a00      	cmp	r2, #0
 8002ff0:	f040 8107 	bne.w	8003202 <HAL_SPI_TransmitReceive+0x250>
 8002ff4:	2904      	cmp	r1, #4
 8002ff6:	f040 8104 	bne.w	8003202 <HAL_SPI_TransmitReceive+0x250>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ffa:	2d00      	cmp	r5, #0
 8002ffc:	d047      	beq.n	800308e <HAL_SPI_TransmitReceive+0xdc>
 8002ffe:	2e00      	cmp	r6, #0
 8003000:	d045      	beq.n	800308e <HAL_SPI_TransmitReceive+0xdc>
 8003002:	2f00      	cmp	r7, #0
 8003004:	d043      	beq.n	800308e <HAL_SPI_TransmitReceive+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003006:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800300a:	2a04      	cmp	r2, #4
 800300c:	d002      	beq.n	8003014 <HAL_SPI_TransmitReceive+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800300e:	2205      	movs	r2, #5
 8003010:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003014:	68e1      	ldr	r1, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003016:	2200      	movs	r2, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003018:	6426      	str	r6, [r4, #64]	; 0x40
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800301a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800301e:	6826      	ldr	r6, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003020:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->RxXferSize  = Size;
 8003022:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003026:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800302a:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800302c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800302e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8003030:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003034:	6872      	ldr	r2, [r6, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003036:	d801      	bhi.n	800303c <HAL_SPI_TransmitReceive+0x8a>
 8003038:	2f01      	cmp	r7, #1
 800303a:	d02a      	beq.n	8003092 <HAL_SPI_TransmitReceive+0xe0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800303c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003040:	6072      	str	r2, [r6, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003042:	6832      	ldr	r2, [r6, #0]
 8003044:	0650      	lsls	r0, r2, #25
 8003046:	d403      	bmi.n	8003050 <HAL_SPI_TransmitReceive+0x9e>
    __HAL_SPI_ENABLE(hspi);
 8003048:	6832      	ldr	r2, [r6, #0]
 800304a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304e:	6032      	str	r2, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003050:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003054:	d958      	bls.n	8003108 <HAL_SPI_TransmitReceive+0x156>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003056:	b10b      	cbz	r3, 800305c <HAL_SPI_TransmitReceive+0xaa>
 8003058:	2f01      	cmp	r7, #1
 800305a:	d107      	bne.n	800306c <HAL_SPI_TransmitReceive+0xba>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800305c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003060:	60f3      	str	r3, [r6, #12]
      hspi->TxXferCount--;
 8003062:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003064:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003066:	3b01      	subs	r3, #1
 8003068:	b29b      	uxth	r3, r3
 800306a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800306c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003070:	b29b      	uxth	r3, r3
 8003072:	b98b      	cbnz	r3, 8003098 <HAL_SPI_TransmitReceive+0xe6>
 8003074:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003078:	b29b      	uxth	r3, r3
 800307a:	b96b      	cbnz	r3, 8003098 <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800307c:	464a      	mov	r2, r9
 800307e:	4641      	mov	r1, r8
 8003080:	4620      	mov	r0, r4
 8003082:	f7ff fe5b 	bl	8002d3c <SPI_EndRxTxTransaction>
 8003086:	2800      	cmp	r0, #0
 8003088:	d036      	beq.n	80030f8 <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800308a:	2320      	movs	r3, #32
 800308c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800308e:	2001      	movs	r0, #1
 8003090:	e032      	b.n	80030f8 <HAL_SPI_TransmitReceive+0x146>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003092:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003096:	e7d3      	b.n	8003040 <HAL_SPI_TransmitReceive+0x8e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003098:	6821      	ldr	r1, [r4, #0]
 800309a:	688b      	ldr	r3, [r1, #8]
 800309c:	079a      	lsls	r2, r3, #30
 800309e:	d50d      	bpl.n	80030bc <HAL_SPI_TransmitReceive+0x10a>
 80030a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	b153      	cbz	r3, 80030bc <HAL_SPI_TransmitReceive+0x10a>
 80030a6:	b14d      	cbz	r5, 80030bc <HAL_SPI_TransmitReceive+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        txallowed = 0U;
 80030aa:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ac:	f833 2b02 	ldrh.w	r2, [r3], #2
 80030b0:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80030b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030bc:	688a      	ldr	r2, [r1, #8]
 80030be:	f012 0201 	ands.w	r2, r2, #1
 80030c2:	d00f      	beq.n	80030e4 <HAL_SPI_TransmitReceive+0x132>
 80030c4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	b15b      	cbz	r3, 80030e4 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030cc:	68c9      	ldr	r1, [r1, #12]
        txallowed = 1U;
 80030ce:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030d2:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030d6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80030d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030e4:	f7fd fac2 	bl	800066c <HAL_GetTick>
 80030e8:	eba0 0009 	sub.w	r0, r0, r9
 80030ec:	4540      	cmp	r0, r8
 80030ee:	d3be      	bcc.n	800306e <HAL_SPI_TransmitReceive+0xbc>
 80030f0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80030f4:	d0bb      	beq.n	800306e <HAL_SPI_TransmitReceive+0xbc>
        errorcode = HAL_TIMEOUT;
 80030f6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80030fe:	2300      	movs	r3, #0
 8003100:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003108:	b10b      	cbz	r3, 800310e <HAL_SPI_TransmitReceive+0x15c>
 800310a:	2f01      	cmp	r7, #1
 800310c:	d10b      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x174>
      if (hspi->TxXferCount > 1U)
 800310e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d909      	bls.n	800312a <HAL_SPI_TransmitReceive+0x178>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003116:	f835 3b02 	ldrh.w	r3, [r5], #2
 800311a:	60f3      	str	r3, [r6, #12]
        hspi->TxXferCount -= 2U;
 800311c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800311e:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003120:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8003122:	b29b      	uxth	r3, r3
 8003124:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003126:	2501      	movs	r5, #1
 8003128:	e049      	b.n	80031be <HAL_SPI_TransmitReceive+0x20c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800312a:	782b      	ldrb	r3, [r5, #0]
 800312c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr++;
 800312e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003130:	3301      	adds	r3, #1
 8003132:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003134:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003136:	3b01      	subs	r3, #1
 8003138:	e7f3      	b.n	8003122 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	6893      	ldr	r3, [r2, #8]
 800313e:	079b      	lsls	r3, r3, #30
 8003140:	d511      	bpl.n	8003166 <HAL_SPI_TransmitReceive+0x1b4>
 8003142:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	b173      	cbz	r3, 8003166 <HAL_SPI_TransmitReceive+0x1b4>
 8003148:	b16d      	cbz	r5, 8003166 <HAL_SPI_TransmitReceive+0x1b4>
        if (hspi->TxXferCount > 1U)
 800314a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800314c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800314e:	b289      	uxth	r1, r1
 8003150:	2901      	cmp	r1, #1
 8003152:	d93e      	bls.n	80031d2 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003154:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003158:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800315a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800315c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800315e:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8003160:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8003162:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8003164:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003166:	6822      	ldr	r2, [r4, #0]
 8003168:	6893      	ldr	r3, [r2, #8]
 800316a:	f013 0301 	ands.w	r3, r3, #1
 800316e:	d01d      	beq.n	80031ac <HAL_SPI_TransmitReceive+0x1fa>
 8003170:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003174:	b289      	uxth	r1, r1
 8003176:	b1c9      	cbz	r1, 80031ac <HAL_SPI_TransmitReceive+0x1fa>
        if (hspi->RxXferCount > 1U)
 8003178:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800317c:	6c21      	ldr	r1, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 800317e:	b280      	uxth	r0, r0
 8003180:	2801      	cmp	r0, #1
 8003182:	d92e      	bls.n	80031e2 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003184:	68d0      	ldr	r0, [r2, #12]
 8003186:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800318a:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800318c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003190:	3902      	subs	r1, #2
 8003192:	b289      	uxth	r1, r1
 8003194:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003198:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800319c:	b289      	uxth	r1, r1
 800319e:	2901      	cmp	r1, #1
 80031a0:	d803      	bhi.n	80031aa <HAL_SPI_TransmitReceive+0x1f8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031a2:	6851      	ldr	r1, [r2, #4]
 80031a4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80031a8:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 80031aa:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031ac:	f7fd fa5e 	bl	800066c <HAL_GetTick>
 80031b0:	eba0 0009 	sub.w	r0, r0, r9
 80031b4:	4540      	cmp	r0, r8
 80031b6:	d320      	bcc.n	80031fa <HAL_SPI_TransmitReceive+0x248>
 80031b8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80031bc:	d19b      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x144>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1b9      	bne.n	800313a <HAL_SPI_TransmitReceive+0x188>
 80031c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1b4      	bne.n	800313a <HAL_SPI_TransmitReceive+0x188>
 80031d0:	e754      	b.n	800307c <HAL_SPI_TransmitReceive+0xca>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80031d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031d8:	3301      	adds	r3, #1
 80031da:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80031dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031de:	3b01      	subs	r3, #1
 80031e0:	e7be      	b.n	8003160 <HAL_SPI_TransmitReceive+0x1ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031e2:	7b12      	ldrb	r2, [r2, #12]
 80031e4:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 80031e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80031e8:	3201      	adds	r2, #1
 80031ea:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80031ec:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80031f0:	3a01      	subs	r2, #1
 80031f2:	b292      	uxth	r2, r2
 80031f4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 80031f8:	e7d7      	b.n	80031aa <HAL_SPI_TransmitReceive+0x1f8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031fa:	f1b8 0f00 	cmp.w	r8, #0
 80031fe:	d1de      	bne.n	80031be <HAL_SPI_TransmitReceive+0x20c>
 8003200:	e779      	b.n	80030f6 <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_BUSY;
 8003202:	2002      	movs	r0, #2
 8003204:	e778      	b.n	80030f8 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8003206:	2002      	movs	r0, #2
 8003208:	e77c      	b.n	8003104 <HAL_SPI_TransmitReceive+0x152>

0800320a <HAL_SPI_Receive>:
{
 800320a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800320e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003210:	6843      	ldr	r3, [r0, #4]
{
 8003212:	4604      	mov	r4, r0
 8003214:	4689      	mov	r9, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800321a:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800321c:	d10c      	bne.n	8003238 <HAL_SPI_Receive+0x2e>
 800321e:	6883      	ldr	r3, [r0, #8]
 8003220:	b953      	cbnz	r3, 8003238 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003222:	2304      	movs	r3, #4
 8003224:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003228:	4613      	mov	r3, r2
 800322a:	9500      	str	r5, [sp, #0]
 800322c:	460a      	mov	r2, r1
 800322e:	f7ff fec0 	bl	8002fb2 <HAL_SPI_TransmitReceive>
}
 8003232:	b003      	add	sp, #12
 8003234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8003238:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800323c:	2b01      	cmp	r3, #1
 800323e:	f000 8096 	beq.w	800336e <HAL_SPI_Receive+0x164>
 8003242:	2301      	movs	r3, #1
 8003244:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003248:	f7fd fa10 	bl	800066c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800324c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 8003250:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003252:	2b01      	cmp	r3, #1
 8003254:	b2d8      	uxtb	r0, r3
 8003256:	f040 8088 	bne.w	800336a <HAL_SPI_Receive+0x160>
  if ((pData == NULL) || (Size == 0U))
 800325a:	f1b9 0f00 	cmp.w	r9, #0
 800325e:	d06b      	beq.n	8003338 <HAL_SPI_Receive+0x12e>
 8003260:	2f00      	cmp	r7, #0
 8003262:	d069      	beq.n	8003338 <HAL_SPI_Receive+0x12e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003264:	2304      	movs	r3, #4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003266:	2600      	movs	r6, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003268:	68e1      	ldr	r1, [r4, #12]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800326a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800326e:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003270:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003274:	6626      	str	r6, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8003276:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800327a:	87e6      	strh	r6, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800327c:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800327e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003282:	bf8c      	ite	hi
 8003284:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003288:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
  hspi->RxXferSize  = Size;
 800328c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003290:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003292:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8003294:	e9c4 6613 	strd	r6, r6, [r4, #76]	; 0x4c
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003298:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800329a:	68a2      	ldr	r2, [r4, #8]
 800329c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80032a0:	d103      	bne.n	80032aa <HAL_SPI_Receive+0xa0>
    SPI_1LINE_RX(hspi);
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032a8:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	0656      	lsls	r6, r2, #25
 80032ae:	d403      	bmi.n	80032b8 <HAL_SPI_Receive+0xae>
    __HAL_SPI_ENABLE(hspi);
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80032b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80032bc:	d923      	bls.n	8003306 <HAL_SPI_Receive+0xfc>
    while (hspi->RxXferCount > 0U)
 80032be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	b323      	cbz	r3, 8003310 <HAL_SPI_Receive+0x106>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	07d2      	lsls	r2, r2, #31
 80032cc:	d53e      	bpl.n	800334c <HAL_SPI_Receive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032d2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032d6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80032d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80032e4:	e7eb      	b.n	80032be <HAL_SPI_Receive+0xb4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	07d0      	lsls	r0, r2, #31
 80032ec:	d51b      	bpl.n	8003326 <HAL_SPI_Receive+0x11c>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032ee:	7b1b      	ldrb	r3, [r3, #12]
 80032f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032f2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032f6:	3301      	adds	r3, #1
 80032f8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80032fa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29b      	uxth	r3, r3
 8003302:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8003306:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ea      	bne.n	80032e6 <HAL_SPI_Receive+0xdc>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003310:	4642      	mov	r2, r8
 8003312:	4629      	mov	r1, r5
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff fcd8 	bl	8002cca <SPI_EndRxTransaction>
 800331a:	bb18      	cbnz	r0, 8003364 <HAL_SPI_Receive+0x15a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800331c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800331e:	3800      	subs	r0, #0
 8003320:	bf18      	it	ne
 8003322:	2001      	movne	r0, #1
error :
 8003324:	e008      	b.n	8003338 <HAL_SPI_Receive+0x12e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003326:	f7fd f9a1 	bl	800066c <HAL_GetTick>
 800332a:	eba0 0008 	sub.w	r0, r0, r8
 800332e:	42a8      	cmp	r0, r5
 8003330:	d309      	bcc.n	8003346 <HAL_SPI_Receive+0x13c>
 8003332:	1c69      	adds	r1, r5, #1
 8003334:	d0e7      	beq.n	8003306 <HAL_SPI_Receive+0xfc>
          errorcode = HAL_TIMEOUT;
 8003336:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003338:	2301      	movs	r3, #1
 800333a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800333e:	2300      	movs	r3, #0
 8003340:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8003344:	e775      	b.n	8003232 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003346:	2d00      	cmp	r5, #0
 8003348:	d1dd      	bne.n	8003306 <HAL_SPI_Receive+0xfc>
 800334a:	e7f4      	b.n	8003336 <HAL_SPI_Receive+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800334c:	f7fd f98e 	bl	800066c <HAL_GetTick>
 8003350:	eba0 0008 	sub.w	r0, r0, r8
 8003354:	42a8      	cmp	r0, r5
 8003356:	d302      	bcc.n	800335e <HAL_SPI_Receive+0x154>
 8003358:	1c6b      	adds	r3, r5, #1
 800335a:	d0b0      	beq.n	80032be <HAL_SPI_Receive+0xb4>
 800335c:	e7eb      	b.n	8003336 <HAL_SPI_Receive+0x12c>
 800335e:	2d00      	cmp	r5, #0
 8003360:	d1ad      	bne.n	80032be <HAL_SPI_Receive+0xb4>
 8003362:	e7e8      	b.n	8003336 <HAL_SPI_Receive+0x12c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003364:	2320      	movs	r3, #32
 8003366:	6623      	str	r3, [r4, #96]	; 0x60
 8003368:	e7d8      	b.n	800331c <HAL_SPI_Receive+0x112>
    errorcode = HAL_BUSY;
 800336a:	2002      	movs	r0, #2
 800336c:	e7e4      	b.n	8003338 <HAL_SPI_Receive+0x12e>
  __HAL_LOCK(hspi);
 800336e:	2002      	movs	r0, #2
 8003370:	e75f      	b.n	8003232 <HAL_SPI_Receive+0x28>
	...

08003374 <HAL_SPI_Transmit_DMA>:
{
 8003374:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8003376:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800337a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800337c:	2b01      	cmp	r3, #1
 800337e:	d072      	beq.n	8003466 <HAL_SPI_Transmit_DMA+0xf2>
 8003380:	2301      	movs	r3, #1
 8003382:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8003386:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800338a:	2b01      	cmp	r3, #1
 800338c:	b2dd      	uxtb	r5, r3
 800338e:	d168      	bne.n	8003462 <HAL_SPI_Transmit_DMA+0xee>
  if ((pData == NULL) || (Size == 0U))
 8003390:	2900      	cmp	r1, #0
 8003392:	d047      	beq.n	8003424 <HAL_SPI_Transmit_DMA+0xb0>
 8003394:	2a00      	cmp	r2, #0
 8003396:	d045      	beq.n	8003424 <HAL_SPI_Transmit_DMA+0xb0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003398:	2303      	movs	r3, #3
  hspi->TxXferSize  = Size;
 800339a:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800339c:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800339e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033a6:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxXferCount = Size;
 80033a8:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 80033aa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80033ae:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    SPI_1LINE_TX(hspi);
 80033b2:	6802      	ldr	r2, [r0, #0]
  hspi->RxISR       = NULL;
 80033b4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b8:	6883      	ldr	r3, [r0, #8]
 80033ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033be:	d103      	bne.n	80033c8 <HAL_SPI_Transmit_DMA+0x54>
    SPI_1LINE_TX(hspi);
 80033c0:	6813      	ldr	r3, [r2, #0]
 80033c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c6:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80033c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033ca:	4b28      	ldr	r3, [pc, #160]	; (800346c <HAL_SPI_Transmit_DMA+0xf8>)
 80033cc:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80033ce:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_SPI_Transmit_DMA+0xfc>)
 80033d0:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80033d2:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_SPI_Transmit_DMA+0x100>)
 80033d4:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	6503      	str	r3, [r0, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80033da:	6853      	ldr	r3, [r2, #4]
 80033dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e0:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80033e2:	68e3      	ldr	r3, [r4, #12]
 80033e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033e8:	d80f      	bhi.n	800340a <HAL_SPI_Transmit_DMA+0x96>
 80033ea:	6983      	ldr	r3, [r0, #24]
 80033ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f0:	d10b      	bne.n	800340a <HAL_SPI_Transmit_DMA+0x96>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80033f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033f4:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80033f8:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80033fa:	d118      	bne.n	800342e <HAL_SPI_Transmit_DMA+0xba>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80033fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003400:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003402:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003404:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003408:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800340a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800340c:	320c      	adds	r2, #12
 800340e:	b29b      	uxth	r3, r3
 8003410:	f7fd fa40 	bl	8000894 <HAL_DMA_Start_IT>
 8003414:	b198      	cbz	r0, 800343e <HAL_SPI_Transmit_DMA+0xca>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003416:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003418:	f043 0310 	orr.w	r3, r3, #16
 800341c:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800341e:	2301      	movs	r3, #1
 8003420:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003424:	2300      	movs	r3, #0
 8003426:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800342a:	4628      	mov	r0, r5
 800342c:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800342e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003432:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003434:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003436:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800343a:	3301      	adds	r3, #1
 800343c:	e7e4      	b.n	8003408 <HAL_SPI_Transmit_DMA+0x94>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	0652      	lsls	r2, r2, #25
 8003444:	d403      	bmi.n	800344e <HAL_SPI_Transmit_DMA+0xda>
    __HAL_SPI_ENABLE(hspi);
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800344c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800344e:	685a      	ldr	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003450:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003452:	f042 0220 	orr.w	r2, r2, #32
 8003456:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	f042 0202 	orr.w	r2, r2, #2
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	e7e0      	b.n	8003424 <HAL_SPI_Transmit_DMA+0xb0>
    errorcode = HAL_BUSY;
 8003462:	2502      	movs	r5, #2
 8003464:	e7de      	b.n	8003424 <HAL_SPI_Transmit_DMA+0xb0>
  __HAL_LOCK(hspi);
 8003466:	2502      	movs	r5, #2
 8003468:	e7df      	b.n	800342a <HAL_SPI_Transmit_DMA+0xb6>
 800346a:	bf00      	nop
 800346c:	0800347d 	.word	0x0800347d
 8003470:	080034ab 	.word	0x080034ab
 8003474:	08003489 	.word	0x08003489

08003478 <HAL_SPI_TxCpltCallback>:
 8003478:	4770      	bx	lr

0800347a <HAL_SPI_TxHalfCpltCallback>:
 800347a:	4770      	bx	lr

0800347c <SPI_DMAHalfTransmitCplt>:
  HAL_SPI_TxHalfCpltCallback(hspi);
 800347c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800347e:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003480:	f7ff fffb 	bl	800347a <HAL_SPI_TxHalfCpltCallback>
}
 8003484:	bd08      	pop	{r3, pc}

08003486 <HAL_SPI_ErrorCallback>:
 8003486:	4770      	bx	lr

08003488 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003488:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800348a:	6802      	ldr	r2, [r0, #0]
{
 800348c:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800348e:	6853      	ldr	r3, [r2, #4]
 8003490:	f023 0303 	bic.w	r3, r3, #3
 8003494:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003496:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003498:	f043 0310 	orr.w	r3, r3, #16
 800349c:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800349e:	2301      	movs	r3, #1
 80034a0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80034a4:	f7ff ffef 	bl	8003486 <HAL_SPI_ErrorCallback>
}
 80034a8:	bd08      	pop	{r3, pc}

080034aa <SPI_DMATransmitCplt>:
{
 80034aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034ac:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034ae:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 80034b0:	f7fd f8dc 	bl	800066c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80034b6:	682b      	ldr	r3, [r5, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	05db      	lsls	r3, r3, #23
 80034bc:	d426      	bmi.n	800350c <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80034be:	6823      	ldr	r3, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80034c0:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	f021 0120 	bic.w	r1, r1, #32
 80034c8:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	f021 0102 	bic.w	r1, r1, #2
 80034d0:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80034d2:	2164      	movs	r1, #100	; 0x64
 80034d4:	f7ff fc32 	bl	8002d3c <SPI_EndRxTxTransaction>
 80034d8:	b118      	cbz	r0, 80034e2 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80034dc:	f043 0320 	orr.w	r3, r3, #32
 80034e0:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e2:	68a3      	ldr	r3, [r4, #8]
 80034e4:	b933      	cbnz	r3, 80034f4 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	9201      	str	r2, [sp, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003500:	b123      	cbz	r3, 800350c <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8003502:	4620      	mov	r0, r4
 8003504:	f7ff ffbf 	bl	8003486 <HAL_SPI_ErrorCallback>
}
 8003508:	b003      	add	sp, #12
 800350a:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 800350c:	4620      	mov	r0, r4
 800350e:	f7ff ffb3 	bl	8003478 <HAL_SPI_TxCpltCallback>
 8003512:	e7f9      	b.n	8003508 <SPI_DMATransmitCplt+0x5e>

08003514 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003514:	6a03      	ldr	r3, [r0, #32]
 8003516:	f023 0301 	bic.w	r3, r3, #1
{
 800351a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003522:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003524:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8003528:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800352a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800352e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003532:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003534:	688d      	ldr	r5, [r1, #8]
 8003536:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003538:	4d0e      	ldr	r5, [pc, #56]	; (8003574 <TIM_OC1_SetConfig+0x60>)
 800353a:	42a8      	cmp	r0, r5
 800353c:	d002      	beq.n	8003544 <TIM_OC1_SetConfig+0x30>
 800353e:	4e0e      	ldr	r6, [pc, #56]	; (8003578 <TIM_OC1_SetConfig+0x64>)
 8003540:	42b0      	cmp	r0, r6
 8003542:	d111      	bne.n	8003568 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003544:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003548:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354a:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800354c:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003550:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003554:	d002      	beq.n	800355c <TIM_OC1_SetConfig+0x48>
 8003556:	4d08      	ldr	r5, [pc, #32]	; (8003578 <TIM_OC1_SetConfig+0x64>)
 8003558:	42a8      	cmp	r0, r5
 800355a:	d105      	bne.n	8003568 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800355c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003560:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003564:	4335      	orrs	r5, r6
 8003566:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003568:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800356a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800356c:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800356e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003570:	6203      	str	r3, [r0, #32]
}
 8003572:	bd70      	pop	{r4, r5, r6, pc}
 8003574:	40010000 	.word	0x40010000
 8003578:	40010400 	.word	0x40010400

0800357c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800357c:	6a03      	ldr	r3, [r0, #32]
 800357e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8003582:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003584:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003586:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800358a:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800358c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8003590:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003592:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003596:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800359a:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800359c:	688d      	ldr	r5, [r1, #8]
 800359e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035a2:	4d11      	ldr	r5, [pc, #68]	; (80035e8 <TIM_OC3_SetConfig+0x6c>)
 80035a4:	42a8      	cmp	r0, r5
 80035a6:	d003      	beq.n	80035b0 <TIM_OC3_SetConfig+0x34>
 80035a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035ac:	42a8      	cmp	r0, r5
 80035ae:	d114      	bne.n	80035da <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035b0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80035b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ba:	4d0b      	ldr	r5, [pc, #44]	; (80035e8 <TIM_OC3_SetConfig+0x6c>)
 80035bc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80035be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c2:	d003      	beq.n	80035cc <TIM_OC3_SetConfig+0x50>
 80035c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035c8:	42a8      	cmp	r0, r5
 80035ca:	d106      	bne.n	80035da <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035d0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80035d4:	4335      	orrs	r5, r6
 80035d6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035da:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035dc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80035de:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80035e0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e2:	6203      	str	r3, [r0, #32]
}
 80035e4:	bd70      	pop	{r4, r5, r6, pc}
 80035e6:	bf00      	nop
 80035e8:	40010000 	.word	0x40010000

080035ec <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ec:	6a03      	ldr	r3, [r0, #32]
 80035ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80035f2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035fa:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003600:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003606:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800360a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800360e:	688d      	ldr	r5, [r1, #8]
 8003610:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003614:	4d08      	ldr	r5, [pc, #32]	; (8003638 <TIM_OC4_SetConfig+0x4c>)
 8003616:	42a8      	cmp	r0, r5
 8003618:	d003      	beq.n	8003622 <TIM_OC4_SetConfig+0x36>
 800361a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800361e:	42a8      	cmp	r0, r5
 8003620:	d104      	bne.n	800362c <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003622:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003626:	694d      	ldr	r5, [r1, #20]
 8003628:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800362e:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003630:	684b      	ldr	r3, [r1, #4]
 8003632:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003634:	6202      	str	r2, [r0, #32]
}
 8003636:	bd30      	pop	{r4, r5, pc}
 8003638:	40010000 	.word	0x40010000

0800363c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800363c:	6a03      	ldr	r3, [r0, #32]
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8003642:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003644:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003646:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003648:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800364a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800364c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8003650:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800365a:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800365c:	688d      	ldr	r5, [r1, #8]
 800365e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003662:	4d09      	ldr	r5, [pc, #36]	; (8003688 <TIM_OC5_SetConfig+0x4c>)
 8003664:	42a8      	cmp	r0, r5
 8003666:	d003      	beq.n	8003670 <TIM_OC5_SetConfig+0x34>
 8003668:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800366c:	42a8      	cmp	r0, r5
 800366e:	d104      	bne.n	800367a <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003670:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003674:	694d      	ldr	r5, [r1, #20]
 8003676:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800367c:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800367e:	684b      	ldr	r3, [r1, #4]
 8003680:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003682:	6202      	str	r2, [r0, #32]
}
 8003684:	bd30      	pop	{r4, r5, pc}
 8003686:	bf00      	nop
 8003688:	40010000 	.word	0x40010000

0800368c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800368c:	6a03      	ldr	r3, [r0, #32]
 800368e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8003692:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003694:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003698:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800369a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800369c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036ae:	688d      	ldr	r5, [r1, #8]
 80036b0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b4:	4d08      	ldr	r5, [pc, #32]	; (80036d8 <TIM_OC6_SetConfig+0x4c>)
 80036b6:	42a8      	cmp	r0, r5
 80036b8:	d003      	beq.n	80036c2 <TIM_OC6_SetConfig+0x36>
 80036ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80036be:	42a8      	cmp	r0, r5
 80036c0:	d104      	bne.n	80036cc <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80036c2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80036c6:	694d      	ldr	r5, [r1, #20]
 80036c8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036cc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036ce:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036d0:	684b      	ldr	r3, [r1, #4]
 80036d2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d4:	6202      	str	r2, [r0, #32]
}
 80036d6:	bd30      	pop	{r4, r5, pc}
 80036d8:	40010000 	.word	0x40010000

080036dc <HAL_TIM_OC_Start_DMA>:
{
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	460d      	mov	r5, r1
 80036e0:	4611      	mov	r1, r2
  if ((htim->State == HAL_TIM_STATE_BUSY))
 80036e2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80036e6:	4604      	mov	r4, r0
  if ((htim->State == HAL_TIM_STATE_BUSY))
 80036e8:	2a02      	cmp	r2, #2
 80036ea:	b2d0      	uxtb	r0, r2
 80036ec:	d006      	beq.n	80036fc <HAL_TIM_OC_Start_DMA+0x20>
  else if ((htim->State == HAL_TIM_STATE_READY))
 80036ee:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80036f2:	2a01      	cmp	r2, #1
 80036f4:	d106      	bne.n	8003704 <HAL_TIM_OC_Start_DMA+0x28>
    if ((pData == NULL) && (Length > 0U))
 80036f6:	b911      	cbnz	r1, 80036fe <HAL_TIM_OC_Start_DMA+0x22>
 80036f8:	b10b      	cbz	r3, 80036fe <HAL_TIM_OC_Start_DMA+0x22>
      return HAL_ERROR;
 80036fa:	2001      	movs	r0, #1
}
 80036fc:	bd70      	pop	{r4, r5, r6, pc}
      htim->State = HAL_TIM_STATE_BUSY;
 80036fe:	2202      	movs	r2, #2
 8003700:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  switch (Channel)
 8003704:	2d08      	cmp	r5, #8
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003706:	6822      	ldr	r2, [r4, #0]
  switch (Channel)
 8003708:	d05c      	beq.n	80037c4 <HAL_TIM_OC_Start_DMA+0xe8>
 800370a:	d825      	bhi.n	8003758 <HAL_TIM_OC_Start_DMA+0x7c>
 800370c:	2d00      	cmp	r5, #0
 800370e:	d036      	beq.n	800377e <HAL_TIM_OC_Start_DMA+0xa2>
 8003710:	2d04      	cmp	r5, #4
 8003712:	d046      	beq.n	80037a2 <HAL_TIM_OC_Start_DMA+0xc6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003714:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  // JSB fix. 20191115. Prevents CCxE bit getting reset momentarily, which would be a problem if any current flows into the output e.g. from a resistor.
  // Original version:
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003716:	f005 051f 	and.w	r5, r5, #31
 800371a:	2101      	movs	r1, #1
  //
  //  /* Set or reset the CCxE Bit */
  //  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
  // JSB version: !!! Not tested! !!!
  if (ChannelState)
    TIMx->CCER |= tmp;
 800371c:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800371e:	fa01 f505 	lsl.w	r5, r1, r5
    TIMx->CCER |= tmp;
 8003722:	4315      	orrs	r5, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003724:	4a30      	ldr	r2, [pc, #192]	; (80037e8 <HAL_TIM_OC_Start_DMA+0x10c>)
 8003726:	4293      	cmp	r3, r2
    TIMx->CCER |= tmp;
 8003728:	621d      	str	r5, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800372a:	d003      	beq.n	8003734 <HAL_TIM_OC_Start_DMA+0x58>
 800372c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003730:	4293      	cmp	r3, r2
 8003732:	d103      	bne.n	800373c <HAL_TIM_OC_Start_DMA+0x60>
    __HAL_TIM_MOE_ENABLE(htim);
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373a:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800373c:	6899      	ldr	r1, [r3, #8]
 800373e:	4a2b      	ldr	r2, [pc, #172]	; (80037ec <HAL_TIM_OC_Start_DMA+0x110>)
 8003740:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	2a06      	cmp	r2, #6
 8003744:	d006      	beq.n	8003754 <HAL_TIM_OC_Start_DMA+0x78>
 8003746:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800374a:	d003      	beq.n	8003754 <HAL_TIM_OC_Start_DMA+0x78>
    __HAL_TIM_ENABLE(htim);
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003754:	2000      	movs	r0, #0
 8003756:	e7d1      	b.n	80036fc <HAL_TIM_OC_Start_DMA+0x20>
  switch (Channel)
 8003758:	2d0c      	cmp	r5, #12
 800375a:	d1db      	bne.n	8003714 <HAL_TIM_OC_Start_DMA+0x38>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800375c:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800375e:	3240      	adds	r2, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003760:	4e23      	ldr	r6, [pc, #140]	; (80037f0 <HAL_TIM_OC_Start_DMA+0x114>)
 8003762:	63c6      	str	r6, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003764:	4e23      	ldr	r6, [pc, #140]	; (80037f4 <HAL_TIM_OC_Start_DMA+0x118>)
 8003766:	6406      	str	r6, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003768:	4e23      	ldr	r6, [pc, #140]	; (80037f8 <HAL_TIM_OC_Start_DMA+0x11c>)
 800376a:	64c6      	str	r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800376c:	f7fd f892 	bl	8000894 <HAL_DMA_Start_IT>
 8003770:	2800      	cmp	r0, #0
 8003772:	d1c2      	bne.n	80036fa <HAL_TIM_OC_Start_DMA+0x1e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003774:	6822      	ldr	r2, [r4, #0]
 8003776:	68d3      	ldr	r3, [r2, #12]
 8003778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800377c:	e00f      	b.n	800379e <HAL_TIM_OC_Start_DMA+0xc2>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800377e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003780:	3234      	adds	r2, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003782:	4e1b      	ldr	r6, [pc, #108]	; (80037f0 <HAL_TIM_OC_Start_DMA+0x114>)
 8003784:	63c6      	str	r6, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003786:	4e1b      	ldr	r6, [pc, #108]	; (80037f4 <HAL_TIM_OC_Start_DMA+0x118>)
 8003788:	6406      	str	r6, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800378a:	4e1b      	ldr	r6, [pc, #108]	; (80037f8 <HAL_TIM_OC_Start_DMA+0x11c>)
 800378c:	64c6      	str	r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800378e:	f7fd f881 	bl	8000894 <HAL_DMA_Start_IT>
 8003792:	2800      	cmp	r0, #0
 8003794:	d1b1      	bne.n	80036fa <HAL_TIM_OC_Start_DMA+0x1e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003796:	6822      	ldr	r2, [r4, #0]
 8003798:	68d3      	ldr	r3, [r2, #12]
 800379a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800379e:	60d3      	str	r3, [r2, #12]
      break;
 80037a0:	e7b8      	b.n	8003714 <HAL_TIM_OC_Start_DMA+0x38>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80037a4:	3238      	adds	r2, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037a6:	4e12      	ldr	r6, [pc, #72]	; (80037f0 <HAL_TIM_OC_Start_DMA+0x114>)
 80037a8:	63c6      	str	r6, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037aa:	4e12      	ldr	r6, [pc, #72]	; (80037f4 <HAL_TIM_OC_Start_DMA+0x118>)
 80037ac:	6406      	str	r6, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80037ae:	4e12      	ldr	r6, [pc, #72]	; (80037f8 <HAL_TIM_OC_Start_DMA+0x11c>)
 80037b0:	64c6      	str	r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80037b2:	f7fd f86f 	bl	8000894 <HAL_DMA_Start_IT>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d19f      	bne.n	80036fa <HAL_TIM_OC_Start_DMA+0x1e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	68d3      	ldr	r3, [r2, #12]
 80037be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c2:	e7ec      	b.n	800379e <HAL_TIM_OC_Start_DMA+0xc2>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80037c6:	323c      	adds	r2, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037c8:	4e09      	ldr	r6, [pc, #36]	; (80037f0 <HAL_TIM_OC_Start_DMA+0x114>)
 80037ca:	63c6      	str	r6, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037cc:	4e09      	ldr	r6, [pc, #36]	; (80037f4 <HAL_TIM_OC_Start_DMA+0x118>)
 80037ce:	6406      	str	r6, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80037d0:	4e09      	ldr	r6, [pc, #36]	; (80037f8 <HAL_TIM_OC_Start_DMA+0x11c>)
 80037d2:	64c6      	str	r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80037d4:	f7fd f85e 	bl	8000894 <HAL_DMA_Start_IT>
 80037d8:	2800      	cmp	r0, #0
 80037da:	d18e      	bne.n	80036fa <HAL_TIM_OC_Start_DMA+0x1e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80037dc:	6822      	ldr	r2, [r4, #0]
 80037de:	68d3      	ldr	r3, [r2, #12]
 80037e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037e4:	e7db      	b.n	800379e <HAL_TIM_OC_Start_DMA+0xc2>
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	00010007 	.word	0x00010007
 80037f0:	08003803 	.word	0x08003803
 80037f4:	08003841 	.word	0x08003841
 80037f8:	0800387f 	.word	0x0800387f

080037fc <HAL_TIM_PWM_Start_DMA>:
 80037fc:	f7ff bf6e 	b.w	80036dc <HAL_TIM_OC_Start_DMA>

08003800 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003800:	4770      	bx	lr

08003802 <TIM_DMADelayPulseCplt>:
{
 8003802:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003804:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8003806:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003808:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800380a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800380e:	4282      	cmp	r2, r0
 8003810:	d106      	bne.n	8003820 <TIM_DMADelayPulseCplt+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003812:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	4620      	mov	r0, r4
 8003816:	f7ff fff3 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	2300      	movs	r3, #0
 800381c:	7723      	strb	r3, [r4, #28]
}
 800381e:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003820:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003822:	4283      	cmp	r3, r0
 8003824:	d101      	bne.n	800382a <TIM_DMADelayPulseCplt+0x28>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003826:	2302      	movs	r3, #2
 8003828:	e7f3      	b.n	8003812 <TIM_DMADelayPulseCplt+0x10>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800382a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800382c:	4283      	cmp	r3, r0
 800382e:	d101      	bne.n	8003834 <TIM_DMADelayPulseCplt+0x32>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003830:	2304      	movs	r3, #4
 8003832:	e7ee      	b.n	8003812 <TIM_DMADelayPulseCplt+0x10>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003834:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003836:	4283      	cmp	r3, r0
 8003838:	d1ec      	bne.n	8003814 <TIM_DMADelayPulseCplt+0x12>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383a:	2308      	movs	r3, #8
 800383c:	e7e9      	b.n	8003812 <TIM_DMADelayPulseCplt+0x10>

0800383e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 800383e:	4770      	bx	lr

08003840 <TIM_DMADelayPulseHalfCplt>:
{
 8003840:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003842:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8003844:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003846:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 8003848:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800384c:	4282      	cmp	r2, r0
 800384e:	d106      	bne.n	800385e <TIM_DMADelayPulseHalfCplt+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003850:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003852:	4620      	mov	r0, r4
 8003854:	f7ff fff3 	bl	800383e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003858:	2300      	movs	r3, #0
 800385a:	7723      	strb	r3, [r4, #28]
}
 800385c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800385e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003860:	4283      	cmp	r3, r0
 8003862:	d101      	bne.n	8003868 <TIM_DMADelayPulseHalfCplt+0x28>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003864:	2302      	movs	r3, #2
 8003866:	e7f3      	b.n	8003850 <TIM_DMADelayPulseHalfCplt+0x10>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003868:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800386a:	4283      	cmp	r3, r0
 800386c:	d101      	bne.n	8003872 <TIM_DMADelayPulseHalfCplt+0x32>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800386e:	2304      	movs	r3, #4
 8003870:	e7ee      	b.n	8003850 <TIM_DMADelayPulseHalfCplt+0x10>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003872:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003874:	4283      	cmp	r3, r0
 8003876:	d1ec      	bne.n	8003852 <TIM_DMADelayPulseHalfCplt+0x12>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003878:	2308      	movs	r3, #8
 800387a:	e7e9      	b.n	8003850 <TIM_DMADelayPulseHalfCplt+0x10>

0800387c <HAL_TIM_ErrorCallback>:
 800387c:	4770      	bx	lr

0800387e <TIM_DMAError>:
{
 800387e:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003880:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8003882:	2301      	movs	r3, #1
 8003884:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8003888:	f7ff fff8 	bl	800387c <HAL_TIM_ErrorCallback>
}
 800388c:	bd08      	pop	{r3, pc}
	...

08003890 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003890:	4a30      	ldr	r2, [pc, #192]	; (8003954 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003892:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003894:	4290      	cmp	r0, r2
 8003896:	d012      	beq.n	80038be <TIM_Base_SetConfig+0x2e>
 8003898:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800389c:	d00f      	beq.n	80038be <TIM_Base_SetConfig+0x2e>
 800389e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80038a2:	4290      	cmp	r0, r2
 80038a4:	d00b      	beq.n	80038be <TIM_Base_SetConfig+0x2e>
 80038a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038aa:	4290      	cmp	r0, r2
 80038ac:	d007      	beq.n	80038be <TIM_Base_SetConfig+0x2e>
 80038ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038b2:	4290      	cmp	r0, r2
 80038b4:	d003      	beq.n	80038be <TIM_Base_SetConfig+0x2e>
 80038b6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80038ba:	4290      	cmp	r0, r2
 80038bc:	d119      	bne.n	80038f2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80038be:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038c4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c6:	4a23      	ldr	r2, [pc, #140]	; (8003954 <TIM_Base_SetConfig+0xc4>)
 80038c8:	4290      	cmp	r0, r2
 80038ca:	d029      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 80038cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038d0:	d026      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 80038d2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80038d6:	4290      	cmp	r0, r2
 80038d8:	d022      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 80038da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038de:	4290      	cmp	r0, r2
 80038e0:	d01e      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 80038e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038e6:	4290      	cmp	r0, r2
 80038e8:	d01a      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 80038ea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80038ee:	4290      	cmp	r0, r2
 80038f0:	d016      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 80038f2:	4a19      	ldr	r2, [pc, #100]	; (8003958 <TIM_Base_SetConfig+0xc8>)
 80038f4:	4290      	cmp	r0, r2
 80038f6:	d013      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 80038f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038fc:	4290      	cmp	r0, r2
 80038fe:	d00f      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 8003900:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003904:	4290      	cmp	r0, r2
 8003906:	d00b      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 8003908:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800390c:	4290      	cmp	r0, r2
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 8003910:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003914:	4290      	cmp	r0, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0x90>
 8003918:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800391c:	4290      	cmp	r0, r2
 800391e:	d103      	bne.n	8003928 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003924:	68ca      	ldr	r2, [r1, #12]
 8003926:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003928:	694a      	ldr	r2, [r1, #20]
 800392a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003930:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003932:	688b      	ldr	r3, [r1, #8]
 8003934:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003936:	680b      	ldr	r3, [r1, #0]
 8003938:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <TIM_Base_SetConfig+0xc4>)
 800393c:	4298      	cmp	r0, r3
 800393e:	d003      	beq.n	8003948 <TIM_Base_SetConfig+0xb8>
 8003940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003944:	4298      	cmp	r0, r3
 8003946:	d101      	bne.n	800394c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003948:	690b      	ldr	r3, [r1, #16]
 800394a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800394c:	2301      	movs	r3, #1
 800394e:	6143      	str	r3, [r0, #20]
}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40010000 	.word	0x40010000
 8003958:	40014000 	.word	0x40014000

0800395c <HAL_TIM_PWM_Init>:
{
 800395c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800395e:	4604      	mov	r4, r0
 8003960:	b1a0      	cbz	r0, 800398c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003962:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003966:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800396a:	b91b      	cbnz	r3, 8003974 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800396c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003970:	f003 fa3c 	bl	8006dec <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003976:	6820      	ldr	r0, [r4, #0]
 8003978:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800397a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800397e:	f7ff ff87 	bl	8003890 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003982:	2301      	movs	r3, #1
  return HAL_OK;
 8003984:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800398a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800398c:	2001      	movs	r0, #1
 800398e:	e7fc      	b.n	800398a <HAL_TIM_PWM_Init+0x2e>

08003990 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003990:	6a03      	ldr	r3, [r0, #32]
 8003992:	f023 0310 	bic.w	r3, r3, #16
{
 8003996:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003998:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800399a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800399c:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800399e:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80039a0:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039a6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80039aa:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ae:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039b2:	688d      	ldr	r5, [r1, #8]
 80039b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039b8:	4d10      	ldr	r5, [pc, #64]	; (80039fc <TIM_OC2_SetConfig+0x6c>)
 80039ba:	42a8      	cmp	r0, r5
 80039bc:	d003      	beq.n	80039c6 <TIM_OC2_SetConfig+0x36>
 80039be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80039c2:	42a8      	cmp	r0, r5
 80039c4:	d114      	bne.n	80039f0 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039c6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80039c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d0:	4d0a      	ldr	r5, [pc, #40]	; (80039fc <TIM_OC2_SetConfig+0x6c>)
 80039d2:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80039d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d8:	d003      	beq.n	80039e2 <TIM_OC2_SetConfig+0x52>
 80039da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80039de:	42a8      	cmp	r0, r5
 80039e0:	d106      	bne.n	80039f0 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80039ea:	4335      	orrs	r5, r6
 80039ec:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80039f0:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80039f2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80039f4:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80039f6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80039f8:	6203      	str	r3, [r0, #32]
}
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	40010000 	.word	0x40010000

08003a00 <HAL_TIM_PWM_ConfigChannel>:
{
 8003a00:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003a02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003a06:	4604      	mov	r4, r0
 8003a08:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d012      	beq.n	8003a34 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003a0e:	2301      	movs	r3, #1
  switch (Channel)
 8003a10:	2a0c      	cmp	r2, #12
  htim->State = HAL_TIM_STATE_BUSY;
 8003a12:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003a16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003a1a:	d054      	beq.n	8003ac6 <HAL_TIM_PWM_ConfigChannel+0xc6>
 8003a1c:	d80b      	bhi.n	8003a36 <HAL_TIM_PWM_ConfigChannel+0x36>
 8003a1e:	2a04      	cmp	r2, #4
 8003a20:	d02f      	beq.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003a22:	2a08      	cmp	r2, #8
 8003a24:	d03e      	beq.n	8003aa4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8003a26:	b1da      	cbz	r2, 8003a60 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003a2a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a30:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003a34:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003a36:	2a10      	cmp	r2, #16
 8003a38:	d056      	beq.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0xe8>
 8003a3a:	2a14      	cmp	r2, #20
 8003a3c:	d1f4      	bne.n	8003a28 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a3e:	6820      	ldr	r0, [r4, #0]
 8003a40:	f7ff fe24 	bl	800368c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a44:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a46:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a5a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a5e:	e052      	b.n	8003b06 <HAL_TIM_PWM_ConfigChannel+0x106>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	f7ff fd57 	bl	8003514 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a66:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a68:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	f042 0208 	orr.w	r2, r2, #8
 8003a70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	f022 0204 	bic.w	r2, r2, #4
 8003a78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a7e:	619a      	str	r2, [r3, #24]
      break;
 8003a80:	e7d2      	b.n	8003a28 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	f7ff ff84 	bl	8003990 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a88:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a8a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003aa2:	e7ec      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aa4:	6820      	ldr	r0, [r4, #0]
 8003aa6:	f7ff fd69 	bl	800357c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aaa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aac:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	f042 0208 	orr.w	r2, r2, #8
 8003ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	f022 0204 	bic.w	r2, r2, #4
 8003abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ac2:	61da      	str	r2, [r3, #28]
      break;
 8003ac4:	e7b0      	b.n	8003a28 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ac6:	6820      	ldr	r0, [r4, #0]
 8003ac8:	f7ff fd90 	bl	80035ec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003acc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ace:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ad0:	69da      	ldr	r2, [r3, #28]
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ae6:	e7ec      	b.n	8003ac2 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ae8:	6820      	ldr	r0, [r4, #0]
 8003aea:	f7ff fda7 	bl	800363c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003aee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003af0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003af2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003af4:	f042 0208 	orr.w	r2, r2, #8
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003afa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003afc:	f022 0204 	bic.w	r2, r2, #4
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b04:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b08:	e78e      	b.n	8003a28 <HAL_TIM_PWM_ConfigChannel+0x28>
	...

08003b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b0c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b0e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	f04f 0302 	mov.w	r3, #2
 8003b18:	d01f      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b1a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b1c:	4d10      	ldr	r5, [pc, #64]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b22:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8003b24:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003b26:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b28:	d003      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8003b2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b2e:	42aa      	cmp	r2, r5
 8003b30:	d103      	bne.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b36:	684d      	ldr	r5, [r1, #4]
 8003b38:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b3a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b40:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003b42:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b46:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b48:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b4a:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8003b4e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b54:	2300      	movs	r3, #0
 8003b56:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003b5a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003b5c:	bd30      	pop	{r4, r5, pc}
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000

08003b64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b64:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d038      	beq.n	8003be0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b6e:	68cb      	ldr	r3, [r1, #12]
 8003b70:	688a      	ldr	r2, [r1, #8]
 8003b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b76:	4c1b      	ldr	r4, [pc, #108]	; (8003be4 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b7a:	684a      	ldr	r2, [r1, #4]
 8003b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b82:	680a      	ldr	r2, [r1, #0]
 8003b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b8a:	690a      	ldr	r2, [r1, #16]
 8003b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b90:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b92:	694a      	ldr	r2, [r1, #20]
 8003b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b9a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ba0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ba2:	698a      	ldr	r2, [r1, #24]
 8003ba4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003ba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003bac:	6802      	ldr	r2, [r0, #0]
 8003bae:	42a2      	cmp	r2, r4
 8003bb0:	d003      	beq.n	8003bba <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8003bb2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003bb6:	42a2      	cmp	r2, r4
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003bba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003bbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bc0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003bc4:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003bc6:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bcc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003bce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bd4:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003bdc:	4618      	mov	r0, r3
}
 8003bde:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003be0:	2002      	movs	r0, #2
 8003be2:	e7fc      	b.n	8003bde <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 8003be4:	40010000 	.word	0x40010000

08003be8 <reg_read>:
	HAL_Delay(10);
	return 0;
}

static uint16_t reg_read(uint8_t memAddr)
{
 8003be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	I2C_write(AR1010_ADDRESS, &memAddr, 1);
 8003bea:	2201      	movs	r2, #1
 8003bec:	f10d 0107 	add.w	r1, sp, #7
{
 8003bf0:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_write(AR1010_ADDRESS, &memAddr, 1);
 8003bf4:	2010      	movs	r0, #16
 8003bf6:	f001 f8cf 	bl	8004d98 <I2C_write>
	uint8_t read[2];
	I2C_read(AR1010_ADDRESS, read, 2);
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	a903      	add	r1, sp, #12
 8003bfe:	2010      	movs	r0, #16
 8003c00:	f001 f8e0 	bl	8004dc4 <I2C_read>
	uint8_t upper = read[0];
	uint8_t lower = read[1];
	uint16_t outputWord = (upper << 8) + lower;
 8003c04:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003c08:	f89d 400d 	ldrb.w	r4, [sp, #13]
	HAL_Delay(10);
 8003c0c:	200a      	movs	r0, #10
	uint16_t outputWord = (upper << 8) + lower;
 8003c0e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
	HAL_Delay(10);
 8003c12:	f7fc fd31 	bl	8000678 <HAL_Delay>
	uint16_t outputWord = (upper << 8) + lower;
 8003c16:	b2a4      	uxth	r4, r4
	return outputWord;
}
 8003c18:	4620      	mov	r0, r4
 8003c1a:	b004      	add	sp, #16
 8003c1c:	bd10      	pop	{r4, pc}

08003c1e <reg_write.isra.0>:
	uint8_t upper = (inputWord & 0xFF00) >> 8;
 8003c1e:	0a0b      	lsrs	r3, r1, #8
static uint8_t reg_write(uint8_t memAddr, uint16_t inputWord)
 8003c20:	b507      	push	{r0, r1, r2, lr}
	I2C_write(AR1010_ADDRESS, data, 3);
 8003c22:	2203      	movs	r2, #3
	data[0] = memAddr;
 8003c24:	f88d 0004 	strb.w	r0, [sp, #4]
	uint8_t lower = (inputWord & 0x00FF);
 8003c28:	f88d 1006 	strb.w	r1, [sp, #6]
	I2C_write(AR1010_ADDRESS, data, 3);
 8003c2c:	2010      	movs	r0, #16
 8003c2e:	a901      	add	r1, sp, #4
	uint8_t upper = (inputWord & 0xFF00) >> 8;
 8003c30:	f88d 3005 	strb.w	r3, [sp, #5]
	I2C_write(AR1010_ADDRESS, data, 3);
 8003c34:	f001 f8b0 	bl	8004d98 <I2C_write>
	HAL_Delay(10);
 8003c38:	200a      	movs	r0, #10
 8003c3a:	f7fc fd1d 	bl	8000678 <HAL_Delay>
}
 8003c3e:	b003      	add	sp, #12
 8003c40:	f85d fb04 	ldr.w	pc, [sp], #4

08003c44 <mem_low.isra.0>:
static uint8_t mem_high(uint8_t memAddr, uint16_t mask)
{
	return mem_OR(memAddr, mask);
}

static uint8_t mem_low(uint8_t memAddr, uint16_t mask)
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	460d      	mov	r5, r1
 8003c48:	4604      	mov	r4, r0
	uint16_t opWord = reg_read(memAddr);
 8003c4a:	f7ff ffcd 	bl	8003be8 <reg_read>
	opWord = opWord & mask;
 8003c4e:	ea20 0005 	bic.w	r0, r0, r5
	return reg_write(memAddr, opWord);
 8003c52:	b281      	uxth	r1, r0
 8003c54:	4620      	mov	r0, r4
{
	return mem_AND(memAddr, ~mask);
}
 8003c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return reg_write(memAddr, opWord);
 8003c5a:	f7ff bfe0 	b.w	8003c1e <reg_write.isra.0>

08003c5e <mem_high.isra.0>:
static uint8_t mem_high(uint8_t memAddr, uint16_t mask)
 8003c5e:	b538      	push	{r3, r4, r5, lr}
 8003c60:	460c      	mov	r4, r1
 8003c62:	4605      	mov	r5, r0
	uint16_t opWord = reg_read(memAddr);
 8003c64:	f7ff ffc0 	bl	8003be8 <reg_read>
	opWord |= mask;
 8003c68:	ea44 0100 	orr.w	r1, r4, r0
	return reg_write(memAddr, opWord);
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	b289      	uxth	r1, r1
}
 8003c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return reg_write(memAddr, opWord);
 8003c74:	f7ff bfd3 	b.w	8003c1e <reg_write.isra.0>

08003c78 <mem_sub_write.isra.0>:
{
	uint16_t opWord = reg_read(memAddr);
	return opWord & mask;
}

static uint8_t mem_sub_write(uint8_t memAddr, uint16_t inputWord, uint16_t mask)
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	460e      	mov	r6, r1
 8003c7e:	4605      	mov	r5, r0
{
	uint16_t opWord = reg_read(memAddr);
 8003c80:	f7ff ffb2 	bl	8003be8 <reg_read>
	opWord = opWord & ~mask;
 8003c84:	ea20 0304 	bic.w	r3, r0, r4
	inputWord = inputWord & mask;
 8003c88:	4034      	ands	r4, r6
	uint16_t outputWord = opWord | inputWord;
	return reg_write(memAddr, outputWord);
 8003c8a:	4628      	mov	r0, r5
	uint16_t outputWord = opWord | inputWord;
 8003c8c:	b299      	uxth	r1, r3
	return reg_write(memAddr, outputWord);
 8003c8e:	4321      	orrs	r1, r4
}
 8003c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return reg_write(memAddr, outputWord);
 8003c94:	f7ff bfc3 	b.w	8003c1e <reg_write.isra.0>

08003c98 <AR1010_init>:
{
 8003c98:	b538      	push	{r3, r4, r5, lr}
	uint16_t opWord = reg_read(memAddr);
 8003c9a:	201c      	movs	r0, #28
 8003c9c:	f7ff ffa4 	bl	8003be8 <reg_read>
	if (chip_no != 0x1010)
 8003ca0:	f241 0310 	movw	r3, #4112	; 0x1010
 8003ca4:	4298      	cmp	r0, r3
 8003ca6:	d001      	beq.n	8003cac <AR1010_init+0x14>
		Error_Handler();
 8003ca8:	f002 fd36 	bl	8006718 <Error_Handler>
{
 8003cac:	2401      	movs	r4, #1
		reg_write(i, initialRegisters[i]);
 8003cae:	4d0f      	ldr	r5, [pc, #60]	; (8003cec <AR1010_init+0x54>)
 8003cb0:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8003cb4:	b2e0      	uxtb	r0, r4
	for (uint8_t i = 1; i < 18; i++)
 8003cb6:	3401      	adds	r4, #1
		reg_write(i, initialRegisters[i]);
 8003cb8:	f7ff ffb1 	bl	8003c1e <reg_write.isra.0>
	for (uint8_t i = 1; i < 18; i++)
 8003cbc:	2c12      	cmp	r4, #18
 8003cbe:	d1f7      	bne.n	8003cb0 <AR1010_init+0x18>
	reg_write(0x00, initialRegisters[0]);
 8003cc0:	8829      	ldrh	r1, [r5, #0]
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	f7ff ffab 	bl	8003c1e <reg_write.isra.0>
	mem_low(0x01, 0x000E); //disable HMUTE and SMUTE
 8003cc8:	210e      	movs	r1, #14
 8003cca:	2001      	movs	r0, #1
 8003ccc:	f7ff ffba 	bl	8003c44 <mem_low.isra.0>
	mem_sub_write(0x03, 0B11 << 3, 0B11 << 3); //Setup Band and Space
 8003cd0:	2218      	movs	r2, #24
 8003cd2:	2003      	movs	r0, #3
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	f7ff ffcf 	bl	8003c78 <mem_sub_write.isra.0>
	mem_sub_write(0x03, 0B1000 << 7, 0B1111 << 7); //Set Volume
 8003cda:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8003cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ce2:	2003      	movs	r0, #3
}
 8003ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mem_sub_write(0x03, 0B1000 << 7, 0B1111 << 7); //Set Volume
 8003ce8:	f7ff bfc6 	b.w	8003c78 <mem_sub_write.isra.0>
 8003cec:	20000008 	.word	0x20000008

08003cf0 <AR1010_auto_tune>:
		;     //Wait STC
	mem_low(0x01, 0x0002);                 //Clear mute
}

void AR1010_auto_tune(float freq, uint8_t convert)
{ //freq in MHz as float
 8003cf0:	b510      	push	{r4, lr}
	uint16_t chan;
	if (convert)
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d064      	beq.n	8003dc0 <AR1010_auto_tune+0xd0>
		chan = (uint16_t) (freq * 10 - 690);
 8003cf6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cfa:	eddf 7a34 	vldr	s15, [pc, #208]	; 8003dcc <AR1010_auto_tune+0xdc>
 8003cfe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d06:	ee17 3a90 	vmov	r3, s15
	else
		chan = (uint16_t) freq;

	mem_high(0x01, 0x0002);										//Set mute
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	2001      	movs	r0, #1
		chan = (uint16_t) freq;
 8003d0e:	b29c      	uxth	r4, r3
	mem_high(0x01, 0x0002);										//Set mute
 8003d10:	f7ff ffa5 	bl	8003c5e <mem_high.isra.0>
	mem_low(0x02, 0x0200);										//Clear TUNE
 8003d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d18:	2002      	movs	r0, #2
 8003d1a:	f7ff ff93 	bl	8003c44 <mem_low.isra.0>
	mem_low(0x03, 0x4000);										//Clear SEEK
 8003d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d22:	2003      	movs	r0, #3
 8003d24:	f7ff ff8e 	bl	8003c44 <mem_low.isra.0>
	mem_sub_write(0x02, chan, 0x01FF);							//Set CHAN
 8003d28:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f7ff ffa2 	bl	8003c78 <mem_sub_write.isra.0>
														//Read Low-side LO injection
	mem_sub_write(0x0B, 0x0000, 0x8005);							//Set R11 (Clear D15, Clear D0/D2)
 8003d34:	2100      	movs	r1, #0
 8003d36:	200b      	movs	r0, #11
 8003d38:	f248 0205 	movw	r2, #32773	; 0x8005
 8003d3c:	f7ff ff9c 	bl	8003c78 <mem_sub_write.isra.0>
	mem_high(0x02, 0x0200);										//Enable TUNE
 8003d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d44:	2002      	movs	r0, #2
 8003d46:	f7ff ff8a 	bl	8003c5e <mem_high.isra.0>
	uint16_t opWord = reg_read(memAddr);
 8003d4a:	2013      	movs	r0, #19
 8003d4c:	f7ff ff4c 	bl	8003be8 <reg_read>
	while (!mem_sub_read(0x13, 0x0020))
 8003d50:	0681      	lsls	r1, r0, #26
 8003d52:	d5fa      	bpl.n	8003d4a <AR1010_auto_tune+0x5a>
	uint16_t opWord = reg_read(memAddr);
 8003d54:	2012      	movs	r0, #18
 8003d56:	f7ff ff47 	bl	8003be8 <reg_read>
		;                   //Wait for STC flag
	uint8_t RSSI1 = mem_sub_read(0x12, 0xFE00);					//Get RSSI1
	mem_low(0x02, 0x0200);										//Clear TUNE
 8003d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d5e:	2002      	movs	r0, #2
 8003d60:	f7ff ff70 	bl	8003c44 <mem_low.isra.0>
														//Read High-side LO injection
	mem_sub_write(0x0B, 0x8005, 0x8005);							//Set R11 (Set D15, Set D0/D2)
 8003d64:	f248 0205 	movw	r2, #32773	; 0x8005
 8003d68:	200b      	movs	r0, #11
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	f7ff ff84 	bl	8003c78 <mem_sub_write.isra.0>
	mem_high(0x02, 0x0200);										//Enable TUNE
 8003d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d74:	2002      	movs	r0, #2
 8003d76:	f7ff ff72 	bl	8003c5e <mem_high.isra.0>
	uint16_t opWord = reg_read(memAddr);
 8003d7a:	2013      	movs	r0, #19
 8003d7c:	f7ff ff34 	bl	8003be8 <reg_read>
	while (!mem_sub_read(0x13, 0x0020))
 8003d80:	0682      	lsls	r2, r0, #26
 8003d82:	d5fa      	bpl.n	8003d7a <AR1010_auto_tune+0x8a>
	uint16_t opWord = reg_read(memAddr);
 8003d84:	2012      	movs	r0, #18
 8003d86:	f7ff ff2f 	bl	8003be8 <reg_read>
		;                   //Wait for STC flag
	uint8_t RSSI2 = mem_sub_read(0x12, 0xFE00);					//Get RSSI2
	mem_low(0x02, 0x0200);										//Clear TUNE
 8003d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d8e:	2002      	movs	r0, #2
 8003d90:	f7ff ff58 	bl	8003c44 <mem_low.isra.0>
														//Compare Hi-Lo strength
	if (RSSI1 > RSSI2)
		mem_sub_write(0x0B, 0x0005, 0x8005);						//(RSSI1>RSSI2)?R11(Clear D15, Set D0/D2)
	else
		mem_sub_write(0x0B, 0x0000, 0x8000);						//:R11(Set D11, Clear D0/D2)
 8003d94:	2100      	movs	r1, #0
 8003d96:	200b      	movs	r0, #11
 8003d98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d9c:	f7ff ff6c 	bl	8003c78 <mem_sub_write.isra.0>
	mem_high(0x02, 0x0200);										//Enable TUNE
 8003da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003da4:	2002      	movs	r0, #2
 8003da6:	f7ff ff5a 	bl	8003c5e <mem_high.isra.0>
	uint16_t opWord = reg_read(memAddr);
 8003daa:	2013      	movs	r0, #19
 8003dac:	f7ff ff1c 	bl	8003be8 <reg_read>
	while (!mem_sub_read(0x13, 0x0020));							//Wait STC
 8003db0:	0683      	lsls	r3, r0, #26
 8003db2:	d5fa      	bpl.n	8003daa <AR1010_auto_tune+0xba>
	mem_low(0x01, 0x0002);										//Clear mute
 8003db4:	2102      	movs	r1, #2
 8003db6:	2001      	movs	r0, #1
}
 8003db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_low(0x01, 0x0002);										//Clear mute
 8003dbc:	f7ff bf42 	b.w	8003c44 <mem_low.isra.0>
		chan = (uint16_t) freq;
 8003dc0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8003dc4:	ee10 3a10 	vmov	r3, s0
 8003dc8:	e79f      	b.n	8003d0a <AR1010_auto_tune+0x1a>
 8003dca:	bf00      	nop
 8003dcc:	c42c8000 	.word	0xc42c8000

08003dd0 <AR1010_set_volume>:

void AR1010_set_volume(uint8_t volume)
{
	if (volume > 18)
		volume = 18;
	int write1 = volume1_conv[volume];
 8003dd0:	2812      	cmp	r0, #18
	int write2 = volume2_conv[volume];
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <AR1010_set_volume+0x30>)
	mem_sub_write(0x03, write1 << 7, 0B1111 << 7);
 8003dd4:	f44f 62f0 	mov.w	r2, #1920	; 0x780
	int write1 = volume1_conv[volume];
 8003dd8:	bf28      	it	cs
 8003dda:	2012      	movcs	r0, #18
{
 8003ddc:	b510      	push	{r4, lr}
	int write2 = volume2_conv[volume];
 8003dde:	5c1c      	ldrb	r4, [r3, r0]
	int write1 = volume1_conv[volume];
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <AR1010_set_volume+0x34>)
	mem_sub_write(0x03, write1 << 7, 0B1111 << 7);
 8003de2:	5c19      	ldrb	r1, [r3, r0]
 8003de4:	2003      	movs	r0, #3
 8003de6:	01c9      	lsls	r1, r1, #7
 8003de8:	f7ff ff46 	bl	8003c78 <mem_sub_write.isra.0>
	mem_sub_write(0x0E, write2 << 12, 0B1111 << 12);
 8003dec:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8003df0:	0321      	lsls	r1, r4, #12
 8003df2:	200e      	movs	r0, #14
 8003df4:	4011      	ands	r1, r2
}
 8003df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_sub_write(0x0E, write2 << 12, 0B1111 << 12);
 8003dfa:	f7ff bf3d 	b.w	8003c78 <mem_sub_write.isra.0>
 8003dfe:	bf00      	nop
 8003e00:	08009e0b 	.word	0x08009e0b
 8003e04:	08009df8 	.word	0x08009df8

08003e08 <SwapBytes>:
///////////////////////////////////////////////////////////////////////////////
// Uncategorized:

uint16_t SwapBytes(uint16_t Value)
{
  return (Value >> 8) | ((Value & 0xFF) << 8);
 8003e08:	ba40      	rev16	r0, r0
}
 8003e0a:	b280      	uxth	r0, r0
 8003e0c:	4770      	bx	lr

08003e0e <Clamp_uint16>:
///////////////////////////////////////////////////////////////////////////////
// Clamp:

uint16_t Clamp_uint16(uint16_t Value, uint16_t MinValue , uint16_t MaxValue)
{
  if (Value < MinValue)
 8003e0e:	4288      	cmp	r0, r1
 8003e10:	bf38      	it	cc
 8003e12:	4608      	movcc	r0, r1
    Value = MinValue;
  if (Value > MaxValue)
    Value = MaxValue;
  return Value;
}
 8003e14:	4290      	cmp	r0, r2
 8003e16:	bf28      	it	cs
 8003e18:	4610      	movcs	r0, r2
 8003e1a:	4770      	bx	lr

08003e1c <Clamp_float>:
  return Value;
}

float Clamp_float(float Value, float MinValue, float MaxValue)
{
  if (Value < MinValue)
 8003e1c:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e24:	d405      	bmi.n	8003e32 <Clamp_float+0x16>
    Value = MinValue;
  else if (Value > MaxValue)
 8003e26:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8003e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2e:	fe71 0a00 	vselgt.f32	s1, s2, s0
    Value = MaxValue;

  return Value;
}
 8003e32:	eeb0 0a60 	vmov.f32	s0, s1
 8003e36:	4770      	bx	lr

08003e38 <ILI9341_Write8>:
//
//  return readvalue;
//}

static void ILI9341_Write8(uint8_t Value)
{
 8003e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t ReadData;

  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8003e3a:	2364      	movs	r3, #100	; 0x64
{
 8003e3c:	f88d 000f 	strb.w	r0, [sp, #15]
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8003e40:	4807      	ldr	r0, [pc, #28]	; (8003e60 <ILI9341_Write8+0x28>)
 8003e42:	f10d 0217 	add.w	r2, sp, #23
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	f10d 010f 	add.w	r1, sp, #15
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	6800      	ldr	r0, [r0, #0]
 8003e50:	f7ff f8af 	bl	8002fb2 <HAL_SPI_TransmitReceive>
 8003e54:	b108      	cbz	r0, 8003e5a <ILI9341_Write8+0x22>
    Error_Handler();
 8003e56:	f002 fc5f 	bl	8006718 <Error_Handler>
}
 8003e5a:	b007      	add	sp, #28
 8003e5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e60:	20000874 	.word	0x20000874

08003e64 <ILI9341_Write16>:
//  phspi->Init.DataSize = SPI_DATASIZE_8BIT;
//}

static void ILI9341_Write16(uint16_t Value)
// MSB first.
{
 8003e64:	b510      	push	{r4, lr}
 8003e66:	4604      	mov	r4, r0
  ILI9341_Write8(Value >> 8);
 8003e68:	0a00      	lsrs	r0, r0, #8
 8003e6a:	f7ff ffe5 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(Value);
 8003e6e:	b2e0      	uxtb	r0, r4
}
 8003e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ILI9341_Write8(Value);
 8003e74:	f7ff bfe0 	b.w	8003e38 <ILI9341_Write8>

08003e78 <ILI9341_WriteCommand>:
  ILI9341_Write16(Value >> 16);
  ILI9341_Write16(Value);
}

static void ILI9341_WriteCommand(int8_t Value)
{
 8003e78:	b538      	push	{r3, r4, r5, lr}
  ILI9341_DC_Low();
 8003e7a:	4d08      	ldr	r5, [pc, #32]	; (8003e9c <ILI9341_WriteCommand+0x24>)
{
 8003e7c:	4604      	mov	r4, r0
  ILI9341_DC_Low();
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2104      	movs	r1, #4
 8003e82:	4628      	mov	r0, r5
 8003e84:	f7fc ff0c 	bl	8000ca0 <HAL_GPIO_WritePin>
  ILI9341_Write8(Value);
 8003e88:	b2e0      	uxtb	r0, r4
 8003e8a:	f7ff ffd5 	bl	8003e38 <ILI9341_Write8>
  ILI9341_DC_High();
 8003e8e:	4628      	mov	r0, r5
 8003e90:	2201      	movs	r2, #1
 8003e92:	2104      	movs	r1, #4
}
 8003e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ILI9341_DC_High();
 8003e98:	f7fc bf02 	b.w	8000ca0 <HAL_GPIO_WritePin>
 8003e9c:	40020800 	.word	0x40020800

08003ea0 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0>:
    ILI9341_DrawPixel_ToBackBuffer(X, Y, Color);
  else
    ILI9341_DrawPixel_ToDisplay(X, Y, Color, UseCS);
}

static void ILI9341_DrawPixels_MSBFirst_ToDisplay(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
 8003ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	460d      	mov	r5, r1
 8003ea8:	4614      	mov	r4, r2
// Supplied pixel data must be byte swapped i.e. MSB first.
{
  if ((Width == 0) || (Height == 0))
    return;

  ILI9341_CSX_Low();
 8003eaa:	2102      	movs	r1, #2
 8003eac:	2200      	movs	r2, #0
 8003eae:	4829      	ldr	r0, [pc, #164]	; (8003f54 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb4>)
static void ILI9341_DrawPixels_MSBFirst_ToDisplay(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
 8003eb0:	461f      	mov	r7, r3
 8003eb2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  ILI9341_CSX_Low();
 8003eb6:	f7fc fef3 	bl	8000ca0 <HAL_GPIO_WritePin>

  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8003eba:	202a      	movs	r0, #42	; 0x2a
 8003ebc:	f7ff ffdc 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f7ff ffcf 	bl	8003e64 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8003ec6:	1e60      	subs	r0, r4, #1
 8003ec8:	4430      	add	r0, r6
 8003eca:	b280      	uxth	r0, r0
 8003ecc:	f7ff ffca 	bl	8003e64 <ILI9341_Write16>

  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8003ed0:	202b      	movs	r0, #43	; 0x2b
 8003ed2:	f7ff ffd1 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f7ff ffc4 	bl	8003e64 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8003edc:	1e78      	subs	r0, r7, #1
 8003ede:	4428      	add	r0, r5
 8003ee0:	b280      	uxth	r0, r0
 8003ee2:	f7ff ffbf 	bl	8003e64 <ILI9341_Write16>

  ILI9341_WriteCommand(0x2C); // Memory write.
 8003ee6:	202c      	movs	r0, #44	; 0x2c
 8003ee8:	f7ff ffc6 	bl	8003e78 <ILI9341_WriteCommand>
  uint32_t NumBytes = Width * Height * sizeof(uint16_t);
 8003eec:	fb07 f204 	mul.w	r2, r7, r4
 8003ef0:	0052      	lsls	r2, r2, #1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ef2:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 8003ef6:	4818      	ldr	r0, [pc, #96]	; (8003f58 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb8>)
 8003ef8:	eb08 0102 	add.w	r1, r8, r2
    while (op_size > 0) {
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	eba1 0302 	sub.w	r3, r1, r2
 8003f02:	dc22      	bgt.n	8003f4a <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xaa>
 8003f04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f08:	f3bf 8f6f 	isb	sy
#if __CORTEX_M >= 7
    SCB_CleanDCache_by_Addr((uint32_t *)pPixels, NumBytes);
#endif
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
  {
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8003f0c:	0064      	lsls	r4, r4, #1
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003f0e:	2500      	movs	r5, #0
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8003f10:	4e12      	ldr	r6, [pc, #72]	; (8003f5c <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xbc>)
 8003f12:	fa1f f984 	uxth.w	r9, r4
 8003f16:	464a      	mov	r2, r9
 8003f18:	4641      	mov	r1, r8
 8003f1a:	6830      	ldr	r0, [r6, #0]
 8003f1c:	f7ff fa2a 	bl	8003374 <HAL_SPI_Transmit_DMA>
 8003f20:	b108      	cbz	r0, 8003f26 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x86>
      Error_Handler();
 8003f22:	f002 fbf9 	bl	8006718 <Error_Handler>
    // Alternative:   if (HAL_SPI_Transmit(phspi, (uint8_t*) pPixels, Width * sizeof(uint16_t)), 1000) != HAL_OK)
    pPixels += Width;
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8003f26:	6833      	ldr	r3, [r6, #0]
    pPixels += Width;
 8003f28:	44a0      	add	r8, r4
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8003f2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d0fb      	beq.n	8003f2c <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x8c>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003f34:	3501      	adds	r5, #1
 8003f36:	b22d      	sxth	r5, r5
 8003f38:	42af      	cmp	r7, r5
 8003f3a:	dcec      	bgt.n	8003f16 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x76>
  }

  ILI9341_CSX_High();
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4804      	ldr	r0, [pc, #16]	; (8003f54 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb4>)
}
 8003f42:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ILI9341_CSX_High();
 8003f46:	f7fc beab 	b.w	8000ca0 <HAL_GPIO_WritePin>
      op_size -=           linesize;
 8003f4a:	3a20      	subs	r2, #32
      SCB->DCCMVAC = op_addr;
 8003f4c:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
      op_size -=           linesize;
 8003f50:	e7d4      	b.n	8003efc <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x5c>
 8003f52:	bf00      	nop
 8003f54:	40020800 	.word	0x40020800
 8003f58:	e000ed00 	.word	0xe000ed00
 8003f5c:	20000874 	.word	0x20000874

08003f60 <ILI9341_SetDefaultState>:
  TextColor = TextColor_Default;
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <ILI9341_SetDefaultState+0x18>)
 8003f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f66:	801a      	strh	r2, [r3, #0]
  TextBackgroundColor = TextBackgroundColor_Default;
 8003f68:	2200      	movs	r2, #0
 8003f6a:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <ILI9341_SetDefaultState+0x1c>)
 8003f6c:	801a      	strh	r2, [r3, #0]
  TextDrawMode = TextDrawMode_Default;
 8003f6e:	2201      	movs	r2, #1
 8003f70:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <ILI9341_SetDefaultState+0x20>)
 8003f72:	701a      	strb	r2, [r3, #0]
}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	2000002c 	.word	0x2000002c
 8003f7c:	20000868 	.word	0x20000868
 8003f80:	2000002e 	.word	0x2000002e

08003f84 <ILI9341_Initialize>:
{
 8003f84:	b508      	push	{r3, lr}
  phspi = i_phspi;
 8003f86:	4ba4      	ldr	r3, [pc, #656]	; (8004218 <ILI9341_Initialize+0x294>)
  UseBackBuffer = i_UseBackBuffer;
 8003f88:	b2c9      	uxtb	r1, r1
  phspi = i_phspi;
 8003f8a:	6018      	str	r0, [r3, #0]
  UseBackBuffer = i_UseBackBuffer;
 8003f8c:	4ba3      	ldr	r3, [pc, #652]	; (800421c <ILI9341_Initialize+0x298>)
 8003f8e:	7019      	strb	r1, [r3, #0]
  if (UseBackBuffer)
 8003f90:	b149      	cbz	r1, 8003fa6 <ILI9341_Initialize+0x22>
    pBackBuffer = calloc(1, ILI9341_Width * ILI9341_Height * sizeof(uint16_t));
 8003f92:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8003f96:	2001      	movs	r0, #1
 8003f98:	f003 f81a 	bl	8006fd0 <calloc>
 8003f9c:	4ba0      	ldr	r3, [pc, #640]	; (8004220 <ILI9341_Initialize+0x29c>)
 8003f9e:	6018      	str	r0, [r3, #0]
    if (!pBackBuffer)
 8003fa0:	b908      	cbnz	r0, 8003fa6 <ILI9341_Initialize+0x22>
      Error_Handler();
 8003fa2:	f002 fbb9 	bl	8006718 <Error_Handler>
  ILI9341_SetDefaultState();
 8003fa6:	f7ff ffdb 	bl	8003f60 <ILI9341_SetDefaultState>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_RESET);
 8003faa:	2101      	movs	r1, #1
 8003fac:	2200      	movs	r2, #0
 8003fae:	489d      	ldr	r0, [pc, #628]	; (8004224 <ILI9341_Initialize+0x2a0>)
 8003fb0:	f7fc fe76 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	f7fc fb5f 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_SET);
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4899      	ldr	r0, [pc, #612]	; (8004224 <ILI9341_Initialize+0x2a0>)
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	f7fc fe6e 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003fc4:	2005      	movs	r0, #5
 8003fc6:	f7fc fb57 	bl	8000678 <HAL_Delay>
  ILI9341_CSX_Low();
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2102      	movs	r1, #2
 8003fce:	4895      	ldr	r0, [pc, #596]	; (8004224 <ILI9341_Initialize+0x2a0>)
 8003fd0:	f7fc fe66 	bl	8000ca0 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0xEF);
 8003fd4:	f06f 0010 	mvn.w	r0, #16
 8003fd8:	f7ff ff4e 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x03);
 8003fdc:	2003      	movs	r0, #3
 8003fde:	f7ff ff2b 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x80);
 8003fe2:	2080      	movs	r0, #128	; 0x80
 8003fe4:	f7ff ff28 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8003fe8:	2002      	movs	r0, #2
 8003fea:	f7ff ff25 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERB);
 8003fee:	f06f 0030 	mvn.w	r0, #48	; 0x30
 8003ff2:	f7ff ff41 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f7ff ff1e 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0XC1);
 8003ffc:	20c1      	movs	r0, #193	; 0xc1
 8003ffe:	f7ff ff1b 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0X30);
 8004002:	2030      	movs	r0, #48	; 0x30
 8004004:	f7ff ff18 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWER_SEQ);
 8004008:	f06f 0012 	mvn.w	r0, #18
 800400c:	f7ff ff34 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x64);
 8004010:	2064      	movs	r0, #100	; 0x64
 8004012:	f7ff ff11 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8004016:	2003      	movs	r0, #3
 8004018:	f7ff ff0e 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0X12);
 800401c:	2012      	movs	r0, #18
 800401e:	f7ff ff0b 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0X81);
 8004022:	2081      	movs	r0, #129	; 0x81
 8004024:	f7ff ff08 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCA);
 8004028:	f06f 0017 	mvn.w	r0, #23
 800402c:	f7ff ff24 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x85);
 8004030:	2085      	movs	r0, #133	; 0x85
 8004032:	f7ff ff01 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8004036:	2000      	movs	r0, #0
 8004038:	f7ff fefe 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x78);
 800403c:	2078      	movs	r0, #120	; 0x78
 800403e:	f7ff fefb 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERA);
 8004042:	f06f 0034 	mvn.w	r0, #52	; 0x34
 8004046:	f7ff ff17 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x39);
 800404a:	2039      	movs	r0, #57	; 0x39
 800404c:	f7ff fef4 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x2C);
 8004050:	202c      	movs	r0, #44	; 0x2c
 8004052:	f7ff fef1 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8004056:	2000      	movs	r0, #0
 8004058:	f7ff feee 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x34);
 800405c:	2034      	movs	r0, #52	; 0x34
 800405e:	f7ff feeb 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8004062:	2002      	movs	r0, #2
 8004064:	f7ff fee8 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_PRC);
 8004068:	f06f 0008 	mvn.w	r0, #8
 800406c:	f7ff ff04 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x20);
 8004070:	2020      	movs	r0, #32
 8004072:	f7ff fee1 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCB);
 8004076:	f06f 0015 	mvn.w	r0, #21
 800407a:	f7ff fefd 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 800407e:	2000      	movs	r0, #0
 8004080:	f7ff feda 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8004084:	2000      	movs	r0, #0
 8004086:	f7ff fed7 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR1); // Power control
 800408a:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 800408e:	f7ff fef3 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x23); // VRH=[5:0]
 8004092:	2023      	movs	r0, #35	; 0x23
 8004094:	f7ff fed0 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR2); // Power control
 8004098:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 800409c:	f7ff feec 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x10); // BT=[3:0]
 80040a0:	2010      	movs	r0, #16
 80040a2:	f7ff fec9 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR1); // VCOM control
 80040a6:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 80040aa:	f7ff fee5 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x3e); // VMH=[6:0]
 80040ae:	203e      	movs	r0, #62	; 0x3e
 80040b0:	f7ff fec2 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x28); // VML=[6:0]
 80040b4:	2028      	movs	r0, #40	; 0x28
 80040b6:	f7ff febf 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR2); // VCOM control 2
 80040ba:	f06f 0038 	mvn.w	r0, #56	; 0x38
 80040be:	f7ff fedb 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x86); // VMF=[6:0]
 80040c2:	2086      	movs	r0, #134	; 0x86
 80040c4:	f7ff feb8 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_MADCTL); // Memory Access Control
 80040c8:	2036      	movs	r0, #54	; 0x36
 80040ca:	f7ff fed5 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x48);
 80040ce:	2048      	movs	r0, #72	; 0x48
 80040d0:	f7ff feb2 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VSCRSADD); // Vertical scroll
 80040d4:	2037      	movs	r0, #55	; 0x37
 80040d6:	f7ff fecf 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write16(0); // Zero
 80040da:	2000      	movs	r0, #0
 80040dc:	f7ff fec2 	bl	8003e64 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PIXFMT);
 80040e0:	203a      	movs	r0, #58	; 0x3a
 80040e2:	f7ff fec9 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x55); // DPI=[6:4] DBI=[2:0]
 80040e6:	2055      	movs	r0, #85	; 0x55
 80040e8:	f7ff fea6 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_FRMCTR1);
 80040ec:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 80040f0:	f7ff fec2 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7ff fe9f 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x18);
 80040fa:	2018      	movs	r0, #24
 80040fc:	f7ff fe9c 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_DFUNCTR); // Display Function Control
 8004100:	f06f 0049 	mvn.w	r0, #73	; 0x49
 8004104:	f7ff feb8 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x08);
 8004108:	2008      	movs	r0, #8
 800410a:	f7ff fe95 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x82);
 800410e:	2082      	movs	r0, #130	; 0x82
 8004110:	f7ff fe92 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x27);
 8004114:	2027      	movs	r0, #39	; 0x27
 8004116:	f7ff fe8f 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(0xF2); // 3Gamma
 800411a:	f06f 000d 	mvn.w	r0, #13
 800411e:	f7ff feab 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00); // Disable
 8004122:	2000      	movs	r0, #0
 8004124:	f7ff fe88 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GAMMASET); // Gamma curve selected
 8004128:	2026      	movs	r0, #38	; 0x26
 800412a:	f7ff fea5 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x01);
 800412e:	2001      	movs	r0, #1
 8004130:	f7ff fe82 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRP1); // Set Gamma
 8004134:	f06f 001f 	mvn.w	r0, #31
 8004138:	f7ff fe9e 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x0F);
 800413c:	200f      	movs	r0, #15
 800413e:	f7ff fe7b 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8004142:	2031      	movs	r0, #49	; 0x31
 8004144:	f7ff fe78 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x2B);
 8004148:	202b      	movs	r0, #43	; 0x2b
 800414a:	f7ff fe75 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 800414e:	200c      	movs	r0, #12
 8004150:	f7ff fe72 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8004154:	200e      	movs	r0, #14
 8004156:	f7ff fe6f 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 800415a:	2008      	movs	r0, #8
 800415c:	f7ff fe6c 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x4E);
 8004160:	204e      	movs	r0, #78	; 0x4e
 8004162:	f7ff fe69 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0xF1);
 8004166:	20f1      	movs	r0, #241	; 0xf1
 8004168:	f7ff fe66 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x37);
 800416c:	2037      	movs	r0, #55	; 0x37
 800416e:	f7ff fe63 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8004172:	2007      	movs	r0, #7
 8004174:	f7ff fe60 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x10);
 8004178:	2010      	movs	r0, #16
 800417a:	f7ff fe5d 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 800417e:	2003      	movs	r0, #3
 8004180:	f7ff fe5a 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8004184:	200e      	movs	r0, #14
 8004186:	f7ff fe57 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x09);
 800418a:	2009      	movs	r0, #9
 800418c:	f7ff fe54 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8004190:	2000      	movs	r0, #0
 8004192:	f7ff fe51 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRN1); // Set Gamma
 8004196:	f06f 001e 	mvn.w	r0, #30
 800419a:	f7ff fe6d 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 800419e:	2000      	movs	r0, #0
 80041a0:	f7ff fe4a 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80041a4:	200e      	movs	r0, #14
 80041a6:	f7ff fe47 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x14);
 80041aa:	2014      	movs	r0, #20
 80041ac:	f7ff fe44 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 80041b0:	2003      	movs	r0, #3
 80041b2:	f7ff fe41 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x11);
 80041b6:	2011      	movs	r0, #17
 80041b8:	f7ff fe3e 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 80041bc:	2007      	movs	r0, #7
 80041be:	f7ff fe3b 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 80041c2:	2031      	movs	r0, #49	; 0x31
 80041c4:	f7ff fe38 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0xC1);
 80041c8:	20c1      	movs	r0, #193	; 0xc1
 80041ca:	f7ff fe35 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x48);
 80041ce:	2048      	movs	r0, #72	; 0x48
 80041d0:	f7ff fe32 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 80041d4:	2008      	movs	r0, #8
 80041d6:	f7ff fe2f 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 80041da:	200f      	movs	r0, #15
 80041dc:	f7ff fe2c 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 80041e0:	200c      	movs	r0, #12
 80041e2:	f7ff fe29 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 80041e6:	2031      	movs	r0, #49	; 0x31
 80041e8:	f7ff fe26 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x36);
 80041ec:	2036      	movs	r0, #54	; 0x36
 80041ee:	f7ff fe23 	bl	8003e38 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 80041f2:	200f      	movs	r0, #15
 80041f4:	f7ff fe20 	bl	8003e38 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_SLPOUT); // Exit sleep
 80041f8:	2011      	movs	r0, #17
 80041fa:	f7ff fe3d 	bl	8003e78 <ILI9341_WriteCommand>
  HAL_Delay(120);
 80041fe:	2078      	movs	r0, #120	; 0x78
 8004200:	f7fc fa3a 	bl	8000678 <HAL_Delay>
  ILI9341_WriteCommand(ILI9341_DISPON); // Display on
 8004204:	2029      	movs	r0, #41	; 0x29
 8004206:	f7ff fe37 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_CSX_High();
 800420a:	2201      	movs	r2, #1
 800420c:	2102      	movs	r1, #2
 800420e:	4805      	ldr	r0, [pc, #20]	; (8004224 <ILI9341_Initialize+0x2a0>)
}
 8004210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ILI9341_CSX_High();
 8004214:	f7fc bd44 	b.w	8000ca0 <HAL_GPIO_WritePin>
 8004218:	20000874 	.word	0x20000874
 800421c:	2000086a 	.word	0x2000086a
 8004220:	2000086c 	.word	0x2000086c
 8004224:	40020800 	.word	0x40020800

08004228 <ILI9341_SetAddrWindow>:
{
 8004228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800422c:	f99d 8018 	ldrsb.w	r8, [sp, #24]
 8004230:	4606      	mov	r6, r0
 8004232:	460c      	mov	r4, r1
 8004234:	4617      	mov	r7, r2
 8004236:	461d      	mov	r5, r3
  if (UseCS)
 8004238:	f1b8 0f00 	cmp.w	r8, #0
 800423c:	d004      	beq.n	8004248 <ILI9341_SetAddrWindow+0x20>
    ILI9341_CSX_Low();
 800423e:	2200      	movs	r2, #0
 8004240:	2102      	movs	r1, #2
 8004242:	4816      	ldr	r0, [pc, #88]	; (800429c <ILI9341_SetAddrWindow+0x74>)
 8004244:	f7fc fd2c 	bl	8000ca0 <HAL_GPIO_WritePin>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 8004248:	4437      	add	r7, r6
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 800424a:	4425      	add	r5, r4
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 800424c:	202a      	movs	r0, #42	; 0x2a
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 800424e:	3f01      	subs	r7, #1
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 8004250:	3d01      	subs	r5, #1
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 8004252:	f7ff fe11 	bl	8003e78 <ILI9341_WriteCommand>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 8004256:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 800425a:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
  ILI9341_Write16(Value >> 16);
 800425e:	0c30      	lsrs	r0, r6, #16
 8004260:	f7ff fe00 	bl	8003e64 <ILI9341_Write16>
  ILI9341_Write16(Value);
 8004264:	b2b0      	uxth	r0, r6
 8004266:	f7ff fdfd 	bl	8003e64 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PASET); // Row addr set
 800426a:	202b      	movs	r0, #43	; 0x2b
 800426c:	f7ff fe04 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write16(Value >> 16);
 8004270:	0c20      	lsrs	r0, r4, #16
 8004272:	f7ff fdf7 	bl	8003e64 <ILI9341_Write16>
  ILI9341_Write16(Value);
 8004276:	b2a0      	uxth	r0, r4
 8004278:	f7ff fdf4 	bl	8003e64 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_RAMWR); // Write to RAM
 800427c:	202c      	movs	r0, #44	; 0x2c
 800427e:	f7ff fdfb 	bl	8003e78 <ILI9341_WriteCommand>
  if (UseCS)
 8004282:	f1b8 0f00 	cmp.w	r8, #0
 8004286:	d006      	beq.n	8004296 <ILI9341_SetAddrWindow+0x6e>
    ILI9341_CSX_High();
 8004288:	2201      	movs	r2, #1
 800428a:	2102      	movs	r1, #2
 800428c:	4803      	ldr	r0, [pc, #12]	; (800429c <ILI9341_SetAddrWindow+0x74>)
}
 800428e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ILI9341_CSX_High();
 8004292:	f7fc bd05 	b.w	8000ca0 <HAL_GPIO_WritePin>
}
 8004296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800429a:	bf00      	nop
 800429c:	40020800 	.word	0x40020800

080042a0 <ILI9341_DrawPixel>:
{
 80042a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042a2:	461d      	mov	r5, r3
  if (UseBackBuffer)
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <ILI9341_DrawPixel+0x6c>)
{
 80042a6:	4616      	mov	r6, r2
 80042a8:	460c      	mov	r4, r1
  if (UseBackBuffer)
 80042aa:	781a      	ldrb	r2, [r3, #0]
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 80042ac:	b287      	uxth	r7, r0
  if (UseBackBuffer)
 80042ae:	b172      	cbz	r2, 80042ce <ILI9341_DrawPixel+0x2e>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 80042b0:	2fef      	cmp	r7, #239	; 0xef
 80042b2:	d80a      	bhi.n	80042ca <ILI9341_DrawPixel+0x2a>
 80042b4:	b28b      	uxth	r3, r1
 80042b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042ba:	d206      	bcs.n	80042ca <ILI9341_DrawPixel+0x2a>
  pBackBuffer[X + Y * ILI9341_Width] = Color;
 80042bc:	21f0      	movs	r1, #240	; 0xf0
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <ILI9341_DrawPixel+0x70>)
 80042c0:	fb14 0001 	smlabb	r0, r4, r1, r0
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
}
 80042ca:	b003      	add	sp, #12
 80042cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (UseCS)
 80042ce:	b11d      	cbz	r5, 80042d8 <ILI9341_DrawPixel+0x38>
    ILI9341_CSX_Low();
 80042d0:	2102      	movs	r1, #2
 80042d2:	4810      	ldr	r0, [pc, #64]	; (8004314 <ILI9341_DrawPixel+0x74>)
 80042d4:	f7fc fce4 	bl	8000ca0 <HAL_GPIO_WritePin>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 80042d8:	2fef      	cmp	r7, #239	; 0xef
 80042da:	d8f6      	bhi.n	80042ca <ILI9341_DrawPixel+0x2a>
 80042dc:	b2a1      	uxth	r1, r4
 80042de:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 80042e2:	d2f2      	bcs.n	80042ca <ILI9341_DrawPixel+0x2a>
  ILI9341_SetAddrWindow(X, Y, 1, 1, 0);
 80042e4:	2301      	movs	r3, #1
 80042e6:	2400      	movs	r4, #0
 80042e8:	4638      	mov	r0, r7
 80042ea:	461a      	mov	r2, r3
 80042ec:	9400      	str	r4, [sp, #0]
 80042ee:	f7ff ff9b 	bl	8004228 <ILI9341_SetAddrWindow>
  ILI9341_Write16(Color);
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7ff fdb6 	bl	8003e64 <ILI9341_Write16>
  if (UseCS)
 80042f8:	2d00      	cmp	r5, #0
 80042fa:	d0e6      	beq.n	80042ca <ILI9341_DrawPixel+0x2a>
    ILI9341_CSX_Low();
 80042fc:	4622      	mov	r2, r4
 80042fe:	2102      	movs	r1, #2
 8004300:	4804      	ldr	r0, [pc, #16]	; (8004314 <ILI9341_DrawPixel+0x74>)
}
 8004302:	b003      	add	sp, #12
 8004304:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ILI9341_CSX_Low();
 8004308:	f7fc bcca 	b.w	8000ca0 <HAL_GPIO_WritePin>
 800430c:	2000086a 	.word	0x2000086a
 8004310:	2000086c 	.word	0x2000086c
 8004314:	40020800 	.word	0x40020800

08004318 <ILI9341_DrawPixels_MSBFirst>:
  }
}

void ILI9341_DrawPixels_MSBFirst(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
// Supplied pixel data must be byte swapped i.e. MSB first.
{
 8004318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (UseBackBuffer)
 800431c:	4d26      	ldr	r5, [pc, #152]	; (80043b8 <ILI9341_DrawPixels_MSBFirst+0xa0>)
{
 800431e:	4680      	mov	r8, r0
 8004320:	460e      	mov	r6, r1
 8004322:	4617      	mov	r7, r2
  if (UseBackBuffer)
 8004324:	782d      	ldrb	r5, [r5, #0]
{
 8004326:	461c      	mov	r4, r3
 8004328:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (UseBackBuffer)
 800432c:	b3c5      	cbz	r5, 80043a0 <ILI9341_DrawPixels_MSBFirst+0x88>
  if ((i_Width == 0) || (i_Height == 0))
 800432e:	b18a      	cbz	r2, 8004354 <ILI9341_DrawPixels_MSBFirst+0x3c>
 8004330:	b183      	cbz	r3, 8004354 <ILI9341_DrawPixels_MSBFirst+0x3c>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8004332:	4434      	add	r4, r6
 8004334:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004338:	2100      	movs	r1, #0
 800433a:	4630      	mov	r0, r6
 800433c:	f7ff fd67 	bl	8003e0e <Clamp_uint16>
 8004340:	4605      	mov	r5, r0
 8004342:	b2a4      	uxth	r4, r4
 8004344:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004348:	2100      	movs	r1, #0
 800434a:	4620      	mov	r0, r4
 800434c:	f7ff fd5f 	bl	8003e0e <Clamp_uint16>
 8004350:	4285      	cmp	r5, r0
 8004352:	d302      	bcc.n	800435a <ILI9341_DrawPixels_MSBFirst+0x42>
    ILI9341_DrawPixels_MSBFirst_ToBackBuffer(X, Y, Width, Height, pPixels);
  else
    ILI9341_DrawPixels_MSBFirst_ToDisplay(X, Y, Width, Height, pPixels);
}
 8004354:	b003      	add	sp, #12
 8004356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pLine = &pBackBuffer[Y * ILI9341_Width];
 800435a:	4b18      	ldr	r3, [pc, #96]	; (80043bc <ILI9341_DrawPixels_MSBFirst+0xa4>)
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 800435c:	22f0      	movs	r2, #240	; 0xf0
 800435e:	2100      	movs	r1, #0
 8004360:	4640      	mov	r0, r8
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f44f 7af0 	mov.w	sl, #480	; 0x1e0
 8004368:	9301      	str	r3, [sp, #4]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 800436a:	f7ff fd50 	bl	8003e0e <Clamp_uint16>
 800436e:	eb08 0307 	add.w	r3, r8, r7
 8004372:	fb0a fa05 	mul.w	sl, sl, r5
 8004376:	4606      	mov	r6, r0
 8004378:	fa1f fb83 	uxth.w	fp, r3
 800437c:	22f0      	movs	r2, #240	; 0xf0
 800437e:	2100      	movs	r1, #0
 8004380:	4658      	mov	r0, fp
 8004382:	f7ff fd44 	bl	8003e0e <Clamp_uint16>
 8004386:	4286      	cmp	r6, r0
 8004388:	d301      	bcc.n	800438e <ILI9341_DrawPixels_MSBFirst+0x76>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 800438a:	3501      	adds	r5, #1
 800438c:	e7da      	b.n	8004344 <ILI9341_DrawPixels_MSBFirst+0x2c>
      pLine[X] = *pPixel++;
 800438e:	9b01      	ldr	r3, [sp, #4]
 8004390:	f839 1b02 	ldrh.w	r1, [r9], #2
 8004394:	eb03 020a 	add.w	r2, r3, sl
 8004398:	f822 1016 	strh.w	r1, [r2, r6, lsl #1]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 800439c:	3601      	adds	r6, #1
 800439e:	e7ed      	b.n	800437c <ILI9341_DrawPixels_MSBFirst+0x64>
  if ((Width == 0) || (Height == 0))
 80043a0:	2a00      	cmp	r2, #0
 80043a2:	d0d7      	beq.n	8004354 <ILI9341_DrawPixels_MSBFirst+0x3c>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0d5      	beq.n	8004354 <ILI9341_DrawPixels_MSBFirst+0x3c>
 80043a8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
}
 80043ac:	b003      	add	sp, #12
 80043ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b2:	f7ff bd75 	b.w	8003ea0 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0>
 80043b6:	bf00      	nop
 80043b8:	2000086a 	.word	0x2000086a
 80043bc:	2000086c 	.word	0x2000086c

080043c0 <ILI9341_DrawBar_ToBackBuffer>:

  ILI9341_CSX_High();
}

void ILI9341_DrawBar_ToBackBuffer(uint16_t i_X, uint16_t i_Y, uint16_t i_Width, uint16_t i_Height, uint16_t i_Color)
{
 80043c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	460e      	mov	r6, r1
 80043c6:	461c      	mov	r4, r3
 80043c8:	4607      	mov	r7, r0
  uint16_t *pLine;
  uint16_t Color_MSBFirst;

  Color_MSBFirst = SwapBytes(i_Color);
 80043ca:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30

  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80043ce:	4434      	add	r4, r6
{
 80043d0:	4690      	mov	r8, r2
  Color_MSBFirst = SwapBytes(i_Color);
 80043d2:	f7ff fd19 	bl	8003e08 <SwapBytes>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80043d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
  Color_MSBFirst = SwapBytes(i_Color);
 80043da:	4682      	mov	sl, r0
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80043dc:	2100      	movs	r1, #0
 80043de:	4630      	mov	r0, r6
 80043e0:	b2a4      	uxth	r4, r4
 80043e2:	f7ff fd14 	bl	8003e0e <Clamp_uint16>
 80043e6:	4605      	mov	r5, r0
 80043e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80043ec:	2100      	movs	r1, #0
 80043ee:	4620      	mov	r0, r4
 80043f0:	f7ff fd0d 	bl	8003e0e <Clamp_uint16>
 80043f4:	42a8      	cmp	r0, r5
 80043f6:	d802      	bhi.n	80043fe <ILI9341_DrawBar_ToBackBuffer+0x3e>
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
    {
      pLine[X] = Color_MSBFirst;
    }
  }
}
 80043f8:	b003      	add	sp, #12
 80043fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pLine = &pBackBuffer[Y * ILI9341_Width];
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <ILI9341_DrawBar_ToBackBuffer+0x80>)
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8004400:	22f0      	movs	r2, #240	; 0xf0
 8004402:	2100      	movs	r1, #0
 8004404:	4638      	mov	r0, r7
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
 800440c:	9301      	str	r3, [sp, #4]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 800440e:	f7ff fcfe 	bl	8003e0e <Clamp_uint16>
 8004412:	eb07 0308 	add.w	r3, r7, r8
 8004416:	fb09 f905 	mul.w	r9, r9, r5
 800441a:	4606      	mov	r6, r0
 800441c:	fa1f fb83 	uxth.w	fp, r3
 8004420:	22f0      	movs	r2, #240	; 0xf0
 8004422:	2100      	movs	r1, #0
 8004424:	4658      	mov	r0, fp
 8004426:	f7ff fcf2 	bl	8003e0e <Clamp_uint16>
 800442a:	42b0      	cmp	r0, r6
 800442c:	d801      	bhi.n	8004432 <ILI9341_DrawBar_ToBackBuffer+0x72>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 800442e:	3501      	adds	r5, #1
 8004430:	e7da      	b.n	80043e8 <ILI9341_DrawBar_ToBackBuffer+0x28>
      pLine[X] = Color_MSBFirst;
 8004432:	9b01      	ldr	r3, [sp, #4]
 8004434:	eb03 0209 	add.w	r2, r3, r9
 8004438:	f822 a016 	strh.w	sl, [r2, r6, lsl #1]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 800443c:	3601      	adds	r6, #1
 800443e:	e7ef      	b.n	8004420 <ILI9341_DrawBar_ToBackBuffer+0x60>
 8004440:	2000086c 	.word	0x2000086c

08004444 <ILI9341_DrawBar>:

void ILI9341_DrawBar(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Color)
{
 8004444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (UseBackBuffer)
 8004448:	4d35      	ldr	r5, [pc, #212]	; (8004520 <ILI9341_DrawBar+0xdc>)
{
 800444a:	4607      	mov	r7, r0
 800444c:	460e      	mov	r6, r1
 800444e:	4614      	mov	r4, r2
  if (UseBackBuffer)
 8004450:	782d      	ldrb	r5, [r5, #0]
{
 8004452:	4698      	mov	r8, r3
 8004454:	f8bd 9020 	ldrh.w	r9, [sp, #32]
  if (UseBackBuffer)
 8004458:	b12d      	cbz	r5, 8004466 <ILI9341_DrawBar+0x22>
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 800445a:	f8cd 9020 	str.w	r9, [sp, #32]
  else
    ILI9341_DrawBar_ToDisplay(X, Y, Width, Height, Color);
}
 800445e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 8004462:	f7ff bfad 	b.w	80043c0 <ILI9341_DrawBar_ToBackBuffer>
  if ((Width == 0) || (Height == 0))
 8004466:	2a00      	cmp	r2, #0
 8004468:	d058      	beq.n	800451c <ILI9341_DrawBar+0xd8>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d056      	beq.n	800451c <ILI9341_DrawBar+0xd8>
  ILI9341_CSX_Low();
 800446e:	462a      	mov	r2, r5
 8004470:	2102      	movs	r1, #2
 8004472:	482c      	ldr	r0, [pc, #176]	; (8004524 <ILI9341_DrawBar+0xe0>)
 8004474:	f7fc fc14 	bl	8000ca0 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8004478:	202a      	movs	r0, #42	; 0x2a
 800447a:	f7ff fcfd 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 800447e:	4638      	mov	r0, r7
 8004480:	f7ff fcf0 	bl	8003e64 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8004484:	1e60      	subs	r0, r4, #1
 8004486:	4438      	add	r0, r7
 8004488:	b280      	uxth	r0, r0
 800448a:	f7ff fceb 	bl	8003e64 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 800448e:	202b      	movs	r0, #43	; 0x2b
 8004490:	f7ff fcf2 	bl	8003e78 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8004494:	4630      	mov	r0, r6
 8004496:	f7ff fce5 	bl	8003e64 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 800449a:	f108 30ff 	add.w	r0, r8, #4294967295
 800449e:	4430      	add	r0, r6
 80044a0:	b280      	uxth	r0, r0
 80044a2:	f7ff fcdf 	bl	8003e64 <ILI9341_Write16>
  uint16_t Color_MSBFirst = SwapBytes(Color);
 80044a6:	4648      	mov	r0, r9
 80044a8:	f7ff fcae 	bl	8003e08 <SwapBytes>
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 80044ac:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <ILI9341_DrawBar+0xe4>)
 80044ae:	b22b      	sxth	r3, r5
 80044b0:	3501      	adds	r5, #1
 80044b2:	42a3      	cmp	r3, r4
 80044b4:	db2f      	blt.n	8004516 <ILI9341_DrawBar+0xd2>
    uint32_t NumBytes = Width * 2;
 80044b6:	0064      	lsls	r4, r4, #1
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 80044b8:	2500      	movs	r5, #0
      SCB->DCCMVAC = op_addr;
 80044ba:	4f1c      	ldr	r7, [pc, #112]	; (800452c <ILI9341_DrawBar+0xe8>)
  ILI9341_WriteCommand(0x2C); // Memory write.
 80044bc:	202c      	movs	r0, #44	; 0x2c
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 80044be:	fa1f f984 	uxth.w	r9, r4
 80044c2:	4e1b      	ldr	r6, [pc, #108]	; (8004530 <ILI9341_DrawBar+0xec>)
  ILI9341_WriteCommand(0x2C); // Memory write.
 80044c4:	f7ff fcd8 	bl	8003e78 <ILI9341_WriteCommand>
    uint32_t op_addr = (uint32_t) addr;
 80044c8:	4917      	ldr	r1, [pc, #92]	; (8004528 <ILI9341_DrawBar+0xe4>)
  __ASM volatile ("dsb 0xF":::"memory");
 80044ca:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 80044ce:	4623      	mov	r3, r4
      op_size -=           linesize;
 80044d0:	3b20      	subs	r3, #32
      SCB->DCCMVAC = op_addr;
 80044d2:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 80044d6:	3120      	adds	r1, #32
    while (op_size > 0) {
 80044d8:	2b00      	cmp	r3, #0
 80044da:	dcf9      	bgt.n	80044d0 <ILI9341_DrawBar+0x8c>
 80044dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80044e0:	f3bf 8f6f 	isb	sy
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 80044e4:	4910      	ldr	r1, [pc, #64]	; (8004528 <ILI9341_DrawBar+0xe4>)
 80044e6:	464a      	mov	r2, r9
 80044e8:	6830      	ldr	r0, [r6, #0]
 80044ea:	f7fe ff43 	bl	8003374 <HAL_SPI_Transmit_DMA>
 80044ee:	b108      	cbz	r0, 80044f4 <ILI9341_DrawBar+0xb0>
      Error_Handler();
 80044f0:	f002 f912 	bl	8006718 <Error_Handler>
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 80044f4:	6833      	ldr	r3, [r6, #0]
 80044f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044f8:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d0fb      	beq.n	80044f8 <ILI9341_DrawBar+0xb4>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8004500:	3501      	adds	r5, #1
 8004502:	b22d      	sxth	r5, r5
 8004504:	4545      	cmp	r5, r8
 8004506:	dbdf      	blt.n	80044c8 <ILI9341_DrawBar+0x84>
  ILI9341_CSX_High();
 8004508:	2201      	movs	r2, #1
 800450a:	2102      	movs	r1, #2
 800450c:	4805      	ldr	r0, [pc, #20]	; (8004524 <ILI9341_DrawBar+0xe0>)
}
 800450e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ILI9341_CSX_High();
 8004512:	f7fc bbc5 	b.w	8000ca0 <HAL_GPIO_WritePin>
    ColumnColors[ColumnIndex] = Color_MSBFirst;
 8004516:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 800451a:	e7c8      	b.n	80044ae <ILI9341_DrawBar+0x6a>
}
 800451c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004520:	2000086a 	.word	0x2000086a
 8004524:	40020800 	.word	0x40020800
 8004528:	200005e8 	.word	0x200005e8
 800452c:	e000ed00 	.word	0xe000ed00
 8004530:	20000874 	.word	0x20000874

08004534 <ILI9341_Clear>:

void ILI9341_Clear(uint16_t Color)
{
 8004534:	b507      	push	{r0, r1, r2, lr}
  ILI9341_DrawBar(0, 0, ILI9341_Width, ILI9341_Height, Color);
 8004536:	2100      	movs	r1, #0
 8004538:	9000      	str	r0, [sp, #0]
 800453a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800453e:	22f0      	movs	r2, #240	; 0xf0
 8004540:	4608      	mov	r0, r1
 8004542:	f7ff ff7f 	bl	8004444 <ILI9341_DrawBar>
}
 8004546:	b003      	add	sp, #12
 8004548:	f85d fb04 	ldr.w	pc, [sp], #4

0800454c <ILI9341_SetFont>:

const GFXfont *ILI9341_SetFont(const GFXfont *i_pFont)
{
  const GFXfont *Result;

  Result = pFont;
 800454c:	4b02      	ldr	r3, [pc, #8]	; (8004558 <ILI9341_SetFont+0xc>)
 800454e:	681a      	ldr	r2, [r3, #0]
  pFont = i_pFont;
 8004550:	6018      	str	r0, [r3, #0]
  return Result;
}
 8004552:	4610      	mov	r0, r2
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000870 	.word	0x20000870

0800455c <ILI9341_GetFontYSpacing>:

uint8_t ILI9341_GetFontYSpacing()
{
  return pFont->yAdvance;
 800455c:	4b01      	ldr	r3, [pc, #4]	; (8004564 <ILI9341_GetFontYSpacing+0x8>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	7a98      	ldrb	r0, [r3, #10]
 8004562:	4770      	bx	lr
 8004564:	20000870 	.word	0x20000870

08004568 <GetCharWidth>:

static uint8_t IsNonPrintingChar(uint8_t Ch)
{
  return ((Ch < pFont->first) || (Ch > pFont->last));
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <GetCharWidth+0x30>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	7a1a      	ldrb	r2, [r3, #8]
 800456e:	4290      	cmp	r0, r2
 8004570:	d310      	bcc.n	8004594 <GetCharWidth+0x2c>
}

uint16_t GetCharWidth(uint8_t Ch)
{
  if (IsNonPrintingChar(Ch))
 8004572:	7a59      	ldrb	r1, [r3, #9]
 8004574:	4281      	cmp	r1, r0
 8004576:	d30d      	bcc.n	8004594 <GetCharWidth+0x2c>
    return 0;

  Ch -= pFont->first;
 8004578:	1a80      	subs	r0, r0, r2
  GFXglyph *pGlyph = &pFont->pGlyph[Ch];
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	b2c0      	uxtb	r0, r0
 800457e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  uint8_t w = pGlyph->width;
 8004582:	789a      	ldrb	r2, [r3, #2]
  int8_t xo = pGlyph->xOffset;
 8004584:	f993 0005 	ldrsb.w	r0, [r3, #5]

  if (w == 0)
 8004588:	b90a      	cbnz	r2, 800458e <GetCharWidth+0x26>
    return pGlyph->xAdvance;
 800458a:	7918      	ldrb	r0, [r3, #4]
 800458c:	4770      	bx	lr

  return xo + w;
 800458e:	4410      	add	r0, r2
 8004590:	b280      	uxth	r0, r0
 8004592:	4770      	bx	lr
    return 0;
 8004594:	2000      	movs	r0, #0
}
 8004596:	4770      	bx	lr
 8004598:	20000870 	.word	0x20000870

0800459c <ILI9341_GetTextWidth>:

uint16_t ILI9341_GetTextWidth(const char *Text)
{
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4604      	mov	r4, r0

  NumChars = strlen(Text);

  pText = Text;

  TotalWidth=0;
 80045a0:	2500      	movs	r5, #0
  NumChars = strlen(Text);
 80045a2:	f7fb fe4d 	bl	8000240 <strlen>

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80045a6:	fa14 f680 	uxtah	r6, r4, r0
 80045aa:	42b4      	cmp	r4, r6
 80045ac:	d101      	bne.n	80045b2 <ILI9341_GetTextWidth+0x16>
    TotalWidth += GetCharWidth(*pText++);

  return TotalWidth;
}
 80045ae:	4628      	mov	r0, r5
 80045b0:	bd70      	pop	{r4, r5, r6, pc}
    TotalWidth += GetCharWidth(*pText++);
 80045b2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80045b6:	f7ff ffd7 	bl	8004568 <GetCharWidth>
 80045ba:	4405      	add	r5, r0
 80045bc:	b2ad      	uxth	r5, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80045be:	e7f4      	b.n	80045aa <ILI9341_GetTextWidth+0xe>

080045c0 <ILI9341_DrawCharAtXY>:
uint8_t ILI9341_DrawCharAtXY(uint8_t Ch, uint16_t X, uint16_t Y, uint16_t Color)
// X: X position of left edge of char.
// Y: Y position of line on which the char sits. The char may go below this line (e.g. g j p q y).
// Returns required X advance.
// Based on Adafruit_GFX.cpp.
{
 80045c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c4:	4699      	mov	r9, r3
  uint8_t *pBitmap;
  uint16_t Color_MSBFirst, TextBackgroundColor_MSBFirst;
  uint16_t *pMemChar, *pMemCharPixel;
  uint8_t CharWidth, CharHeight;

  if (!pFont)
 80045c6:	4b9f      	ldr	r3, [pc, #636]	; (8004844 <ILI9341_DrawCharAtXY+0x284>)
{
 80045c8:	b08d      	sub	sp, #52	; 0x34
 80045ca:	4693      	mov	fp, r2
  if (!pFont)
 80045cc:	681b      	ldr	r3, [r3, #0]
{
 80045ce:	9107      	str	r1, [sp, #28]
  if (!pFont)
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8134 	beq.w	800483e <ILI9341_DrawCharAtXY+0x27e>
  return ((Ch < pFont->first) || (Ch > pFont->last));
 80045d6:	7a1a      	ldrb	r2, [r3, #8]
 80045d8:	4290      	cmp	r0, r2
 80045da:	f0c0 8130 	bcc.w	800483e <ILI9341_DrawCharAtXY+0x27e>
    return 0;
  if (IsNonPrintingChar(Ch))
 80045de:	7a59      	ldrb	r1, [r3, #9]
 80045e0:	4281      	cmp	r1, r0
 80045e2:	f0c0 812c 	bcc.w	800483e <ILI9341_DrawCharAtXY+0x27e>
    return 0;

  Ch -= pFont->first;
 80045e6:	1a80      	subs	r0, r0, r2
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 80045e8:	4a97      	ldr	r2, [pc, #604]	; (8004848 <ILI9341_DrawCharAtXY+0x288>)
    Y -= (pFont->yOffsetMin / 2);
 80045ea:	f993 700b 	ldrsb.w	r7, [r3, #11]
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 80045ee:	7812      	ldrb	r2, [r2, #0]
  Ch -= pFont->first;
 80045f0:	b2c0      	uxtb	r0, r0
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 80045f2:	2a02      	cmp	r2, #2

  pGlyph = &pFont->pGlyph[Ch];
 80045f4:	685a      	ldr	r2, [r3, #4]
    Y -= (pFont->yOffsetMin / 2);
 80045f6:	bf08      	it	eq
 80045f8:	eb07 71d7 	addeq.w	r1, r7, r7, lsr #31
  pBitmap = pFont->pBitmap;

  bo = pGlyph->bitmapOffset;
 80045fc:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
    Y -= (pFont->yOffsetMin / 2);
 8004600:	bf08      	it	eq
 8004602:	ebab 0b61 	subeq.w	fp, fp, r1, asr #1
  pGlyph = &pFont->pGlyph[Ch];
 8004606:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    Y -= (pFont->yOffsetMin / 2);
 800460a:	bf08      	it	eq
 800460c:	fa1f fb8b 	uxtheq.w	fp, fp
  pGlyph = &pFont->pGlyph[Ch];
 8004610:	9103      	str	r1, [sp, #12]
  w = pGlyph->width;
 8004612:	9a03      	ldr	r2, [sp, #12]
  pBitmap = pFont->pBitmap;
 8004614:	6819      	ldr	r1, [r3, #0]
  w = pGlyph->width;
 8004616:	7894      	ldrb	r4, [r2, #2]
  h = pGlyph->height;
 8004618:	78d2      	ldrb	r2, [r2, #3]
  pBitmap = pFont->pBitmap;
 800461a:	9106      	str	r1, [sp, #24]
  h = pGlyph->height;
 800461c:	9204      	str	r2, [sp, #16]
  xo = pGlyph->xOffset;
 800461e:	9a03      	ldr	r2, [sp, #12]
 8004620:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8004624:	9205      	str	r2, [sp, #20]
  yo = pGlyph->yOffset;
 8004626:	9a03      	ldr	r2, [sp, #12]
 8004628:	f992 8006 	ldrsb.w	r8, [r2, #6]
  bits = 0;
  bit = 0;
  yo_min = pFont->yOffsetMin;
  yo_max = pFont->yOffsetMax;

  switch(TextDrawMode)
 800462c:	4a87      	ldr	r2, [pc, #540]	; (800484c <ILI9341_DrawCharAtXY+0x28c>)
 800462e:	7812      	ldrb	r2, [r2, #0]
 8004630:	2a02      	cmp	r2, #2
 8004632:	d058      	beq.n	80046e6 <ILI9341_DrawCharAtXY+0x126>
 8004634:	2a03      	cmp	r2, #3
 8004636:	f000 80b9 	beq.w	80047ac <ILI9341_DrawCharAtXY+0x1ec>
 800463a:	2a01      	cmp	r2, #1
 800463c:	d128      	bne.n	8004690 <ILI9341_DrawCharAtXY+0xd0>
  {
    case tdmNone:
      break;

    case tdmThisCharBar:
      Color_MSBFirst = SwapBytes(Color);
 800463e:	4648      	mov	r0, r9
 8004640:	f7ff fbe2 	bl	8003e08 <SwapBytes>
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8004644:	4b82      	ldr	r3, [pc, #520]	; (8004850 <ILI9341_DrawCharAtXY+0x290>)
      Color_MSBFirst = SwapBytes(Color);
 8004646:	4682      	mov	sl, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8004648:	8818      	ldrh	r0, [r3, #0]
 800464a:	f7ff fbdd 	bl	8003e08 <SwapBytes>
      pMemChar = (uint16_t *)malloc(w * h * 2);
 800464e:	9b04      	ldr	r3, [sp, #16]
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8004650:	4681      	mov	r9, r0
      pMemChar = (uint16_t *)malloc(w * h * 2);
 8004652:	fb14 f003 	smulbb	r0, r4, r3
 8004656:	0040      	lsls	r0, r0, #1
 8004658:	f002 fce6 	bl	8007028 <malloc>
      pMemCharPixel = pMemChar;

      for (yy = 0; yy < h; ++yy)
 800465c:	2100      	movs	r1, #0
 800465e:	0063      	lsls	r3, r4, #1
      pMemChar = (uint16_t *)malloc(w * h * 2);
 8004660:	4606      	mov	r6, r0
      pMemCharPixel = pMemChar;
 8004662:	4607      	mov	r7, r0
  bit = 0;
 8004664:	468c      	mov	ip, r1
  bits = 0;
 8004666:	460a      	mov	r2, r1
 8004668:	9308      	str	r3, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 800466a:	b2c8      	uxtb	r0, r1
 800466c:	9b04      	ldr	r3, [sp, #16]
 800466e:	4283      	cmp	r3, r0
 8004670:	d834      	bhi.n	80046dc <ILI9341_DrawCharAtXY+0x11c>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
          ++pMemCharPixel;
          bits <<= 1;
        }
      }
      ILI9341_DrawPixels_MSBFirst(X + xo, Y + yo, w, h, pMemChar);
 8004672:	9b05      	ldr	r3, [sp, #20]
 8004674:	eb0b 0108 	add.w	r1, fp, r8
 8004678:	9807      	ldr	r0, [sp, #28]
 800467a:	4622      	mov	r2, r4
 800467c:	b289      	uxth	r1, r1
 800467e:	9600      	str	r6, [sp, #0]
 8004680:	4418      	add	r0, r3
 8004682:	9b04      	ldr	r3, [sp, #16]
 8004684:	b280      	uxth	r0, r0
 8004686:	f7ff fe47 	bl	8004318 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 800468a:	4630      	mov	r0, r6
          ++pMemCharPixel;
          bits <<= 1;
        }
      }
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
      free(pMemChar);
 800468c:	f002 fcd4 	bl	8007038 <free>
      }
      ILI9341_CSX_High();
      break;
  }

  if (w == 0)
 8004690:	2c00      	cmp	r4, #0
 8004692:	f040 80d0 	bne.w	8004836 <ILI9341_DrawCharAtXY+0x276>
    return pGlyph->xAdvance;
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	7918      	ldrb	r0, [r3, #4]
  return xo + w;
}
 800469a:	b00d      	add	sp, #52	; 0x34
 800469c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (!(bit++ & 7))
 80046a0:	f013 0f07 	tst.w	r3, #7
 80046a4:	f103 0c01 	add.w	ip, r3, #1
            bits = pBitmap[bo++];
 80046a8:	bf04      	itt	eq
 80046aa:	9a06      	ldreq	r2, [sp, #24]
 80046ac:	1c6b      	addeq	r3, r5, #1
          if (!(bit++ & 7))
 80046ae:	fa5f fc8c 	uxtb.w	ip, ip
            bits = pBitmap[bo++];
 80046b2:	bf04      	itt	eq
 80046b4:	5d52      	ldrbeq	r2, [r2, r5]
 80046b6:	b29d      	uxtheq	r5, r3
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80046b8:	f012 0f80 	tst.w	r2, #128	; 0x80
          bits <<= 1;
 80046bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80046c0:	bf14      	ite	ne
 80046c2:	4653      	movne	r3, sl
 80046c4:	464b      	moveq	r3, r9
          bits <<= 1;
 80046c6:	b2d2      	uxtb	r2, r2
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80046c8:	f82e 3b02 	strh.w	r3, [lr], #2
          if (!(bit++ & 7))
 80046cc:	4663      	mov	r3, ip
        for (xx = 0; xx < w; ++xx)
 80046ce:	4298      	cmp	r0, r3
 80046d0:	d1e6      	bne.n	80046a0 <ILI9341_DrawCharAtXY+0xe0>
 80046d2:	9b08      	ldr	r3, [sp, #32]
 80046d4:	3101      	adds	r1, #1
 80046d6:	4684      	mov	ip, r0
 80046d8:	441f      	add	r7, r3
      for (yy = 0; yy < h; ++yy)
 80046da:	e7c6      	b.n	800466a <ILI9341_DrawCharAtXY+0xaa>
 80046dc:	4663      	mov	r3, ip
 80046de:	46be      	mov	lr, r7
        for (xx = 0; xx < w; ++xx)
 80046e0:	1918      	adds	r0, r3, r4
 80046e2:	b2c0      	uxtb	r0, r0
 80046e4:	e7f3      	b.n	80046ce <ILI9341_DrawCharAtXY+0x10e>
  yo_max = pFont->yOffsetMax;
 80046e6:	f993 600c 	ldrsb.w	r6, [r3, #12]
      Color_MSBFirst = SwapBytes(Color);
 80046ea:	4648      	mov	r0, r9
 80046ec:	f7ff fb8c 	bl	8003e08 <SwapBytes>
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 80046f0:	4b57      	ldr	r3, [pc, #348]	; (8004850 <ILI9341_DrawCharAtXY+0x290>)
      CharHeight = yo_max - yo_min + 1;
 80046f2:	3601      	adds	r6, #1
      Color_MSBFirst = SwapBytes(Color);
 80046f4:	9009      	str	r0, [sp, #36]	; 0x24
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 80046f6:	8818      	ldrh	r0, [r3, #0]
 80046f8:	f7ff fb86 	bl	8003e08 <SwapBytes>
      CharHeight = yo_max - yo_min + 1;
 80046fc:	1bf6      	subs	r6, r6, r7
      CharWidth = pGlyph->xAdvance;
 80046fe:	9b03      	ldr	r3, [sp, #12]
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8004700:	900b      	str	r0, [sp, #44]	; 0x2c
      CharWidth = pGlyph->xAdvance;
 8004702:	f893 a004 	ldrb.w	sl, [r3, #4]
      CharHeight = yo_max - yo_min + 1;
 8004706:	b2f3      	uxtb	r3, r6
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 8004708:	fb1a f203 	smulbb	r2, sl, r3
      CharHeight = yo_max - yo_min + 1;
 800470c:	9308      	str	r3, [sp, #32]
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 800470e:	0050      	lsls	r0, r2, #1
 8004710:	920a      	str	r2, [sp, #40]	; 0x28
 8004712:	f002 fc89 	bl	8007028 <malloc>
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8004716:	2100      	movs	r1, #0
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 8004718:	4681      	mov	r9, r0
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800471a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800471e:	b288      	uxth	r0, r1
 8004720:	4282      	cmp	r2, r0
 8004722:	dc1c      	bgt.n	800475e <ILI9341_DrawCharAtXY+0x19e>
 8004724:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8004728:	eba8 0807 	sub.w	r8, r8, r7
 800472c:	2200      	movs	r2, #0
 800472e:	930a      	str	r3, [sp, #40]	; 0x28
 8004730:	9b05      	ldr	r3, [sp, #20]
  bit = 0;
 8004732:	4611      	mov	r1, r2
 8004734:	fb0a 3808 	mla	r8, sl, r8, r3
  bits = 0;
 8004738:	4613      	mov	r3, r2
 800473a:	eb09 0848 	add.w	r8, r9, r8, lsl #1
      for (yy = 0; yy < h; ++yy)
 800473e:	b2d0      	uxtb	r0, r2
 8004740:	9e04      	ldr	r6, [sp, #16]
 8004742:	4286      	cmp	r6, r0
 8004744:	d80f      	bhi.n	8004766 <ILI9341_DrawCharAtXY+0x1a6>
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
 8004746:	eb0b 0107 	add.w	r1, fp, r7
 800474a:	9807      	ldr	r0, [sp, #28]
 800474c:	9b08      	ldr	r3, [sp, #32]
 800474e:	4652      	mov	r2, sl
 8004750:	b289      	uxth	r1, r1
 8004752:	f8cd 9000 	str.w	r9, [sp]
 8004756:	f7ff fddf 	bl	8004318 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 800475a:	4648      	mov	r0, r9
 800475c:	e796      	b.n	800468c <ILI9341_DrawCharAtXY+0xcc>
        *pMemCharPixel++ = TextBackgroundColor_MSBFirst;
 800475e:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8004762:	3101      	adds	r1, #1
 8004764:	e7db      	b.n	800471e <ILI9341_DrawCharAtXY+0x15e>
        for (xx = 0; xx < w; ++xx)
 8004766:	2000      	movs	r0, #0
 8004768:	fa5f fc80 	uxtb.w	ip, r0
 800476c:	fa51 fe80 	uxtab	lr, r1, r0
 8004770:	4564      	cmp	r4, ip
 8004772:	fa5f fe8e 	uxtb.w	lr, lr
 8004776:	d805      	bhi.n	8004784 <ILI9341_DrawCharAtXY+0x1c4>
 8004778:	4421      	add	r1, r4
 800477a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800477c:	3201      	adds	r2, #1
 800477e:	b2c9      	uxtb	r1, r1
      for (yy = 0; yy < h; ++yy)
 8004780:	4480      	add	r8, r0
 8004782:	e7dc      	b.n	800473e <ILI9341_DrawCharAtXY+0x17e>
          if (!(bit++ & 7))
 8004784:	f01e 0f07 	tst.w	lr, #7
            bits = pBitmap[bo++];
 8004788:	bf01      	itttt	eq
 800478a:	9b06      	ldreq	r3, [sp, #24]
 800478c:	f105 0c01 	addeq.w	ip, r5, #1
 8004790:	5d5b      	ldrbeq	r3, [r3, r5]
 8004792:	fa1f f58c 	uxtheq.w	r5, ip
          if (bits & 0x80)
 8004796:	061e      	lsls	r6, r3, #24
          bits <<= 1;
 8004798:	ea4f 0343 	mov.w	r3, r3, lsl #1
            *pMemCharPixel = Color_MSBFirst;
 800479c:	bf48      	it	mi
 800479e:	9e09      	ldrmi	r6, [sp, #36]	; 0x24
          bits <<= 1;
 80047a0:	b2db      	uxtb	r3, r3
            *pMemCharPixel = Color_MSBFirst;
 80047a2:	bf48      	it	mi
 80047a4:	f828 6010 	strhmi.w	r6, [r8, r0, lsl #1]
        for (xx = 0; xx < w; ++xx)
 80047a8:	3001      	adds	r0, #1
 80047aa:	e7dd      	b.n	8004768 <ILI9341_DrawCharAtXY+0x1a8>
      ILI9341_CSX_Low();
 80047ac:	2102      	movs	r1, #2
 80047ae:	2200      	movs	r2, #0
 80047b0:	4828      	ldr	r0, [pc, #160]	; (8004854 <ILI9341_DrawCharAtXY+0x294>)
      for (yy = 0; yy < h; ++yy)
 80047b2:	2600      	movs	r6, #0
      ILI9341_CSX_Low();
 80047b4:	f7fc fa74 	bl	8000ca0 <HAL_GPIO_WritePin>
      for (yy = 0; yy < h; ++yy)
 80047b8:	9907      	ldr	r1, [sp, #28]
 80047ba:	9b05      	ldr	r3, [sp, #20]
  bit = 0;
 80047bc:	46b2      	mov	sl, r6
  bits = 0;
 80047be:	4637      	mov	r7, r6
 80047c0:	4419      	add	r1, r3
 80047c2:	b28b      	uxth	r3, r1
 80047c4:	9307      	str	r3, [sp, #28]
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80047c6:	eb0b 0308 	add.w	r3, fp, r8
 80047ca:	9308      	str	r3, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 80047cc:	b2f3      	uxtb	r3, r6
 80047ce:	9a04      	ldr	r2, [sp, #16]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d92a      	bls.n	800482a <ILI9341_DrawCharAtXY+0x26a>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80047d4:	9a08      	ldr	r2, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 80047d6:	4653      	mov	r3, sl
 80047d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80047dc:	1991      	adds	r1, r2, r6
 80047de:	b209      	sxth	r1, r1
 80047e0:	e01b      	b.n	800481a <ILI9341_DrawCharAtXY+0x25a>
          if (!(bit++ & 7))
 80047e2:	075a      	lsls	r2, r3, #29
 80047e4:	f103 0b01 	add.w	fp, r3, #1
            bits = pBitmap[bo++];
 80047e8:	bf04      	itt	eq
 80047ea:	9a06      	ldreq	r2, [sp, #24]
 80047ec:	1c6b      	addeq	r3, r5, #1
          if (!(bit++ & 7))
 80047ee:	fa5f fb8b 	uxtb.w	fp, fp
            bits = pBitmap[bo++];
 80047f2:	bf04      	itt	eq
 80047f4:	5d57      	ldrbeq	r7, [r2, r5]
 80047f6:	b29d      	uxtheq	r5, r3
          if (bits & 0x80)
 80047f8:	063b      	lsls	r3, r7, #24
 80047fa:	d507      	bpl.n	800480c <ILI9341_DrawCharAtXY+0x24c>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80047fc:	2300      	movs	r3, #0
 80047fe:	464a      	mov	r2, r9
 8004800:	fa0f f088 	sxth.w	r0, r8
 8004804:	9109      	str	r1, [sp, #36]	; 0x24
 8004806:	f7ff fd4b 	bl	80042a0 <ILI9341_DrawPixel>
 800480a:	9909      	ldr	r1, [sp, #36]	; 0x24
          bits <<= 1;
 800480c:	007f      	lsls	r7, r7, #1
 800480e:	f108 0801 	add.w	r8, r8, #1
          if (!(bit++ & 7))
 8004812:	465b      	mov	r3, fp
          bits <<= 1;
 8004814:	b2ff      	uxtb	r7, r7
        for (xx = 0; xx < w; ++xx)
 8004816:	fa1f f888 	uxth.w	r8, r8
 800481a:	eb0a 0204 	add.w	r2, sl, r4
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	4293      	cmp	r3, r2
 8004822:	d1de      	bne.n	80047e2 <ILI9341_DrawCharAtXY+0x222>
      for (yy = 0; yy < h; ++yy)
 8004824:	3601      	adds	r6, #1
        for (xx = 0; xx < w; ++xx)
 8004826:	469a      	mov	sl, r3
 8004828:	e7d0      	b.n	80047cc <ILI9341_DrawCharAtXY+0x20c>
      ILI9341_CSX_High();
 800482a:	2201      	movs	r2, #1
 800482c:	2102      	movs	r1, #2
 800482e:	4809      	ldr	r0, [pc, #36]	; (8004854 <ILI9341_DrawCharAtXY+0x294>)
 8004830:	f7fc fa36 	bl	8000ca0 <HAL_GPIO_WritePin>
      break;
 8004834:	e72c      	b.n	8004690 <ILI9341_DrawCharAtXY+0xd0>
  return xo + w;
 8004836:	9805      	ldr	r0, [sp, #20]
 8004838:	4420      	add	r0, r4
 800483a:	b2c0      	uxtb	r0, r0
 800483c:	e72d      	b.n	800469a <ILI9341_DrawCharAtXY+0xda>
    return 0;
 800483e:	2000      	movs	r0, #0
 8004840:	e72b      	b.n	800469a <ILI9341_DrawCharAtXY+0xda>
 8004842:	bf00      	nop
 8004844:	20000870 	.word	0x20000870
 8004848:	2000002f 	.word	0x2000002f
 800484c:	2000002e 	.word	0x2000002e
 8004850:	20000868 	.word	0x20000868
 8004854:	40020800 	.word	0x40020800

08004858 <ILI9341_SetTextColor>:

uint16_t ILI9341_SetTextColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextColor;
 8004858:	4b02      	ldr	r3, [pc, #8]	; (8004864 <ILI9341_SetTextColor+0xc>)
 800485a:	881a      	ldrh	r2, [r3, #0]
  TextColor = Value;
 800485c:	8018      	strh	r0, [r3, #0]
  return Result;
}
 800485e:	4610      	mov	r0, r2
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	2000002c 	.word	0x2000002c

08004868 <ILI9341_SetTextBackgroundColor>:

uint16_t ILI9341_SetTextBackgroundColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextBackgroundColor;
 8004868:	4b02      	ldr	r3, [pc, #8]	; (8004874 <ILI9341_SetTextBackgroundColor+0xc>)
 800486a:	881a      	ldrh	r2, [r3, #0]
  TextBackgroundColor = Value;
 800486c:	8018      	strh	r0, [r3, #0]
  return Result;
}
 800486e:	4610      	mov	r0, r2
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000868 	.word	0x20000868

08004878 <ILI9341_SetTextDrawMode>:

TextDrawMode_t ILI9341_SetTextDrawMode(TextDrawMode_t Value)
{
 8004878:	4602      	mov	r2, r0
  TextDrawMode_t Result;

  Result = TextDrawMode;
 800487a:	4b02      	ldr	r3, [pc, #8]	; (8004884 <ILI9341_SetTextDrawMode+0xc>)
 800487c:	7818      	ldrb	r0, [r3, #0]
  TextDrawMode = Value;
 800487e:	701a      	strb	r2, [r3, #0]
  return Result;
}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	2000002e 	.word	0x2000002e

08004888 <ILI9341_DrawTextAtXY>:
  TextVerticalOrigin = Value;
  return Result;
}

void ILI9341_DrawTextAtXY(const char *Text, uint16_t X, uint16_t Y, TextPosition_t TextPosition)
{
 8004888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488c:	460d      	mov	r5, r1
 800488e:	4690      	mov	r8, r2
 8004890:	461f      	mov	r7, r3
  uint16_t NumChars;
  uint8_t DX;
  
  pText = (uint8_t *) Text;

  if (!pText)
 8004892:	4604      	mov	r4, r0
 8004894:	b158      	cbz	r0, 80048ae <ILI9341_DrawTextAtXY+0x26>
    return;

  NumChars = strlen(Text);
 8004896:	f7fb fcd3 	bl	8000240 <strlen>

  switch (TextPosition)
 800489a:	2f02      	cmp	r7, #2
  NumChars = strlen(Text);
 800489c:	4606      	mov	r6, r0
  switch (TextPosition)
 800489e:	d008      	beq.n	80048b2 <ILI9341_DrawTextAtXY+0x2a>
 80048a0:	2f03      	cmp	r7, #3
 80048a2:	d00d      	beq.n	80048c0 <ILI9341_DrawTextAtXY+0x38>
 80048a4:	fa14 f686 	uxtah	r6, r4, r6
  }

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
  {
    Ch = *pText;
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 80048a8:	4f0d      	ldr	r7, [pc, #52]	; (80048e0 <ILI9341_DrawTextAtXY+0x58>)
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80048aa:	42b4      	cmp	r4, r6
 80048ac:	d10d      	bne.n	80048ca <ILI9341_DrawTextAtXY+0x42>
    ++pText;
    X += DX;
  }
}
 80048ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      X -= ILI9341_GetTextWidth(Text) / 2;
 80048b2:	4620      	mov	r0, r4
 80048b4:	f7ff fe72 	bl	800459c <ILI9341_GetTextWidth>
 80048b8:	eba5 0550 	sub.w	r5, r5, r0, lsr #1
      X -= ILI9341_GetTextWidth(Text);
 80048bc:	b2ad      	uxth	r5, r5
      break;
 80048be:	e7f1      	b.n	80048a4 <ILI9341_DrawTextAtXY+0x1c>
      X -= ILI9341_GetTextWidth(Text);
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7ff fe6b 	bl	800459c <ILI9341_GetTextWidth>
 80048c6:	1a2d      	subs	r5, r5, r0
 80048c8:	e7f8      	b.n	80048bc <ILI9341_DrawTextAtXY+0x34>
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 80048ca:	4629      	mov	r1, r5
 80048cc:	883b      	ldrh	r3, [r7, #0]
 80048ce:	4642      	mov	r2, r8
 80048d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80048d4:	f7ff fe74 	bl	80045c0 <ILI9341_DrawCharAtXY>
    X += DX;
 80048d8:	4405      	add	r5, r0
 80048da:	b2ad      	uxth	r5, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80048dc:	e7e5      	b.n	80048aa <ILI9341_DrawTextAtXY+0x22>
 80048de:	bf00      	nop
 80048e0:	2000002c 	.word	0x2000002c

080048e4 <GetBest>:
{
  int16_t DeltaAB, DeltaCA, DeltaBC;
  int16_t Result = 0;

  if (A > B)
    DeltaAB = A - B;
 80048e4:	b283      	uxth	r3, r0
  if (A > B)
 80048e6:	4288      	cmp	r0, r1
{
 80048e8:	b570      	push	{r4, r5, r6, lr}
    DeltaAB = A - B;
 80048ea:	b28c      	uxth	r4, r1
  else
    DeltaAB = B - A;

  if (A > C)
    DeltaCA = A - C;
 80048ec:	b296      	uxth	r6, r2
    DeltaAB = A - B;
 80048ee:	bfcc      	ite	gt
 80048f0:	1b1d      	subgt	r5, r3, r4
    DeltaAB = B - A;
 80048f2:	1ae5      	suble	r5, r4, r3
  if (A > C)
 80048f4:	4290      	cmp	r0, r2
    DeltaAB = B - A;
 80048f6:	b22d      	sxth	r5, r5
    DeltaCA = A - C;
 80048f8:	bfcc      	ite	gt
 80048fa:	1b9b      	subgt	r3, r3, r6
  else
    DeltaCA = C - A;
 80048fc:	1af3      	suble	r3, r6, r3

  if (C > B)
 80048fe:	4291      	cmp	r1, r2
    DeltaCA = C - A;
 8004900:	b21b      	sxth	r3, r3
    DeltaBC = C - B;
 8004902:	bfb4      	ite	lt
 8004904:	1b34      	sublt	r4, r6, r4
  else
    DeltaBC = B - C;
 8004906:	1ba4      	subge	r4, r4, r6

  if ((DeltaAB <= DeltaCA) && (DeltaAB <= DeltaBC))
 8004908:	429d      	cmp	r5, r3
    DeltaBC = B - C;
 800490a:	b224      	sxth	r4, r4
  if ((DeltaAB <= DeltaCA) && (DeltaAB <= DeltaBC))
 800490c:	dc04      	bgt.n	8004918 <GetBest+0x34>
 800490e:	42a5      	cmp	r5, r4
 8004910:	dc07      	bgt.n	8004922 <GetBest+0x3e>
    Result = (A + B) >> 1;
 8004912:	4401      	add	r1, r0
  else if ((DeltaCA <= DeltaAB) && (DeltaCA <= DeltaBC))
    Result = (A + C) >> 1;
  else
    Result = (B + C) >> 1;
 8004914:	1048      	asrs	r0, r1, #1
 8004916:	e003      	b.n	8004920 <GetBest+0x3c>
  else if ((DeltaCA <= DeltaAB) && (DeltaCA <= DeltaBC))
 8004918:	42a3      	cmp	r3, r4
 800491a:	dc02      	bgt.n	8004922 <GetBest+0x3e>
    Result = (A + C) >> 1;
 800491c:	4410      	add	r0, r2
 800491e:	1040      	asrs	r0, r0, #1

  return Result;
}
 8004920:	bd70      	pop	{r4, r5, r6, pc}
    Result = (B + C) >> 1;
 8004922:	4411      	add	r1, r2
 8004924:	e7f6      	b.n	8004914 <GetBest+0x30>

08004926 <GetUnsigned12bitValue>:
  0xB1, 0x00, 0xC1, 0x00, 0xD1, 0x00, 0xD1, 0x00, 0x91, 0x00, 0xD1, 0x00, 0x91, 0x00, 0xD1, 0x00, 0x90, 0x00, 0x00
};

inline static uint16_t GetUnsigned12bitValue(uint8_t *pData)
{
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8004926:	7803      	ldrb	r3, [r0, #0]
 8004928:	7840      	ldrb	r0, [r0, #1]
 800492a:	08c0      	lsrs	r0, r0, #3
 800492c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
}
 8004930:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004934:	4770      	bx	lr
	...

08004938 <XPT2046_Initialize>:
  phspi = i_phspi;
 8004938:	4b01      	ldr	r3, [pc, #4]	; (8004940 <XPT2046_Initialize+0x8>)
 800493a:	6018      	str	r0, [r3, #0]
}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000878 	.word	0x20000878

08004944 <XPT2046_Sample>:

uint8_t XPT2046_Sample(int16_t *pRawX, int16_t *pRawY, int16_t *pRawZ)
// Returns 1 if touched.
// The origin is bottom left (XL, YD). This is the natural origin of the XPT2046.
// None of the touch screens I've encountered so far are correctly wired. Use compiler defines to reverse the coordinates as required.
{
 8004944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004948:	4617      	mov	r7, r2
  int16_t x, y, z;

  *pRawX = 0;
 800494a:	2200      	movs	r2, #0
{
 800494c:	b089      	sub	sp, #36	; 0x24
 800494e:	4606      	mov	r6, r0
  *pRawX = 0;
 8004950:	8002      	strh	r2, [r0, #0]
{
 8004952:	460d      	mov	r5, r1
  *pRawY = 0;
 8004954:	800a      	strh	r2, [r1, #0]

  uint8_t RxData[19];
  int16_t X_Positions[3];
  int16_t Y_Positions[3];

  XPT2046_CSX_Low();
 8004956:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800495a:	4831      	ldr	r0, [pc, #196]	; (8004a20 <XPT2046_Sample+0xdc>)
  *pRawZ = 0;
 800495c:	803a      	strh	r2, [r7, #0]
  XPT2046_CSX_Low();
 800495e:	f7fc f99f 	bl	8000ca0 <HAL_GPIO_WritePin>
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &SampleCommand, (uint8_t*) &RxData, 19, 100) != HAL_OK)
 8004962:	2364      	movs	r3, #100	; 0x64
 8004964:	482f      	ldr	r0, [pc, #188]	; (8004a24 <XPT2046_Sample+0xe0>)
 8004966:	aa03      	add	r2, sp, #12
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	2313      	movs	r3, #19
 800496c:	492e      	ldr	r1, [pc, #184]	; (8004a28 <XPT2046_Sample+0xe4>)
 800496e:	6800      	ldr	r0, [r0, #0]
 8004970:	f7fe fb1f 	bl	8002fb2 <HAL_SPI_TransmitReceive>
 8004974:	b108      	cbz	r0, 800497a <XPT2046_Sample+0x36>
    Error_Handler();
 8004976:	f001 fecf 	bl	8006718 <Error_Handler>
  XPT2046_CSX_High();
 800497a:	4829      	ldr	r0, [pc, #164]	; (8004a20 <XPT2046_Sample+0xdc>)
 800497c:	2201      	movs	r2, #1
 800497e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004982:	f7fc f98d 	bl	8000ca0 <HAL_GPIO_WritePin>

  int16_t z1 = GetUnsigned12bitValue(&RxData[1]);
 8004986:	f10d 000d 	add.w	r0, sp, #13
 800498a:	f7ff ffcc 	bl	8004926 <GetUnsigned12bitValue>
 800498e:	b204      	sxth	r4, r0
  int16_t z2 = GetUnsigned12bitValue(&RxData[3]);
 8004990:	f10d 000f 	add.w	r0, sp, #15
 8004994:	f7ff ffc7 	bl	8004926 <GetUnsigned12bitValue>

  // Neutralize occasional z1 = 4095 values (which are possibly due to comms errors, as x and y values of 4095 often appear with the z value of 4095).
  if (z1 >= 2048)
    z1 = 0;

  z = 4095 + z1 - z2;
 8004998:	f5c0 637f 	rsb	r3, r0, #4080	; 0xff0
    z1 = 0;
 800499c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
  z = 4095 + z1 - z2;
 80049a0:	f103 030f 	add.w	r3, r3, #15
    z1 = 0;
 80049a4:	bfa8      	it	ge
 80049a6:	2400      	movge	r4, #0
  z = 4095 + z1 - z2;
 80049a8:	4423      	add	r3, r4
 80049aa:	b21c      	sxth	r4, r3

  if (z < ZThreshold)
 80049ac:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 80049b0:	db33      	blt.n	8004a1a <XPT2046_Sample+0xd6>
  X_Positions[0] = GetUnsigned12bitValue(&RxData[7]);
 80049b2:	f10d 0013 	add.w	r0, sp, #19
 80049b6:	f7ff ffb6 	bl	8004926 <GetUnsigned12bitValue>
 80049ba:	4683      	mov	fp, r0
  X_Positions[1] = GetUnsigned12bitValue(&RxData[11]);
 80049bc:	f10d 0017 	add.w	r0, sp, #23
 80049c0:	f7ff ffb1 	bl	8004926 <GetUnsigned12bitValue>
 80049c4:	4601      	mov	r1, r0
  X_Positions[2] = GetUnsigned12bitValue(&RxData[15]);
 80049c6:	f10d 001b 	add.w	r0, sp, #27
 80049ca:	f7ff ffac 	bl	8004926 <GetUnsigned12bitValue>
 80049ce:	4602      	mov	r2, r0
  Y_Positions[0] = GetUnsigned12bitValue(&RxData[10]);
 80049d0:	f10d 0016 	add.w	r0, sp, #22
    return 0;

  *pRawZ = z;

  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 80049d4:	b209      	sxth	r1, r1
  Y_Positions[0] = GetUnsigned12bitValue(&RxData[10]);
 80049d6:	f7ff ffa6 	bl	8004926 <GetUnsigned12bitValue>
 80049da:	4680      	mov	r8, r0
  Y_Positions[1] = GetUnsigned12bitValue(&RxData[13]);
 80049dc:	f10d 0019 	add.w	r0, sp, #25
  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 80049e0:	b212      	sxth	r2, r2
  Y_Positions[1] = GetUnsigned12bitValue(&RxData[13]);
 80049e2:	f7ff ffa0 	bl	8004926 <GetUnsigned12bitValue>
 80049e6:	4681      	mov	r9, r0
  Y_Positions[2] = GetUnsigned12bitValue(&RxData[17]);
 80049e8:	f10d 001d 	add.w	r0, sp, #29
 80049ec:	f7ff ff9b 	bl	8004926 <GetUnsigned12bitValue>
  *pRawZ = z;
 80049f0:	803c      	strh	r4, [r7, #0]
  Y_Positions[2] = GetUnsigned12bitValue(&RxData[17]);
 80049f2:	4682      	mov	sl, r0
  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 80049f4:	fa0f f08b 	sxth.w	r0, fp
 80049f8:	f7ff ff74 	bl	80048e4 <GetBest>
 80049fc:	4604      	mov	r4, r0
  y = GetBest(Y_Positions[0], Y_Positions[1], Y_Positions[2]);
 80049fe:	fa0f f28a 	sxth.w	r2, sl
 8004a02:	fa0f f189 	sxth.w	r1, r9
 8004a06:	fa0f f088 	sxth.w	r0, r8
 8004a0a:	f7ff ff6b 	bl	80048e4 <GetBest>

#if XPT2046_Swap_YD_and_YU
  y = 4095 - y;
#endif

  *pRawX = x;
 8004a0e:	8034      	strh	r4, [r6, #0]
  *pRawY = y;
 8004a10:	8028      	strh	r0, [r5, #0]

  return 1;
 8004a12:	2001      	movs	r0, #1
}
 8004a14:	b009      	add	sp, #36	; 0x24
 8004a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	e7fa      	b.n	8004a14 <XPT2046_Sample+0xd0>
 8004a1e:	bf00      	nop
 8004a20:	40020400 	.word	0x40020400
 8004a24:	20000878 	.word	0x20000878
 8004a28:	08009e1e 	.word	0x08009e1e

08004a2c <XPT2046_ConvertRawToScreen>:

void XPT2046_ConvertRawToScreen(int16_t RawX, int16_t RawY, int16_t *pX, int16_t *pY)
// Assumes portrait mode.
// The origin of the result is top-left.
{
 8004a2c:	b510      	push	{r4, lr}
  float K;

  K = ((float)(RawX - XPT2046_RawX_Min) / (float)(XPT2046_RawX_Max - XPT2046_RawX_Min));
 8004a2e:	4c19      	ldr	r4, [pc, #100]	; (8004a94 <XPT2046_ConvertRawToScreen+0x68>)
 8004a30:	6824      	ldr	r4, [r4, #0]
 8004a32:	1b00      	subs	r0, r0, r4
 8004a34:	ee07 0a90 	vmov	s15, r0
 8004a38:	4817      	ldr	r0, [pc, #92]	; (8004a98 <XPT2046_ConvertRawToScreen+0x6c>)
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a40:	1b00      	subs	r0, r0, r4
 8004a42:	ee07 0a90 	vmov	s15, r0
 8004a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pX = K * XPT2046_Width;
 8004a4e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8004a9c <XPT2046_ConvertRawToScreen+0x70>
 8004a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a5a:	ee17 0a90 	vmov	r0, s15
 8004a5e:	8010      	strh	r0, [r2, #0]

  K = ((float)(RawY - XPT2046_RawY_Min) / (float)(XPT2046_RawY_Max - XPT2046_RawY_Min));
 8004a60:	4a0f      	ldr	r2, [pc, #60]	; (8004aa0 <XPT2046_ConvertRawToScreen+0x74>)
 8004a62:	6810      	ldr	r0, [r2, #0]
 8004a64:	4a0f      	ldr	r2, [pc, #60]	; (8004aa4 <XPT2046_ConvertRawToScreen+0x78>)
 8004a66:	1a09      	subs	r1, r1, r0
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	ee07 1a90 	vmov	s15, r1
 8004a6e:	1a12      	subs	r2, r2, r0
 8004a70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a74:	ee07 2a90 	vmov	s15, r2
 8004a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pY = K * XPT2046_Height;
 8004a80:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004aa8 <XPT2046_ConvertRawToScreen+0x7c>
 8004a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a8c:	ee17 2a90 	vmov	r2, s15
 8004a90:	801a      	strh	r2, [r3, #0]
}
 8004a92:	bd10      	pop	{r4, pc}
 8004a94:	20000034 	.word	0x20000034
 8004a98:	20000030 	.word	0x20000030
 8004a9c:	43700000 	.word	0x43700000
 8004aa0:	2000003c 	.word	0x2000003c
 8004aa4:	20000038 	.word	0x20000038
 8004aa8:	43a00000 	.word	0x43a00000

08004aac <SST25_Start>:
	SST25_SPI_ReadBlock(pBlock, NumBytes);
	SST25_End();
}

static inline void SST25_Start()
{
 8004aac:	b508      	push	{r3, lr}
  SST25_SPI_Begin();
 8004aae:	f000 f9c9 	bl	8004e44 <SST25_SPI_Begin>
static inline void SST25_Delay()
// Warning: Requires CPU_CYCLES to be enabled!
{
  uint32_t End_NumCycles;

  End_NumCycles = CPU_CYCLES + 10; // !!! Hardwired!
 8004ab2:	4a03      	ldr	r2, [pc, #12]	; (8004ac0 <SST25_Start+0x14>)
 8004ab4:	6853      	ldr	r3, [r2, #4]
 8004ab6:	330a      	adds	r3, #10
  do {} while (CPU_CYCLES < End_NumCycles);
 8004ab8:	6851      	ldr	r1, [r2, #4]
 8004aba:	428b      	cmp	r3, r1
 8004abc:	d8fc      	bhi.n	8004ab8 <SST25_Start+0xc>
}
 8004abe:	bd08      	pop	{r3, pc}
 8004ac0:	e0001000 	.word	0xe0001000

08004ac4 <SST25_End>:
{
 8004ac4:	b508      	push	{r3, lr}
  SST25_SPI_End();
 8004ac6:	f000 f9cf 	bl	8004e68 <SST25_SPI_End>
  End_NumCycles = CPU_CYCLES + 10; // !!! Hardwired!
 8004aca:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <SST25_End+0x14>)
 8004acc:	6853      	ldr	r3, [r2, #4]
 8004ace:	330a      	adds	r3, #10
  do {} while (CPU_CYCLES < End_NumCycles);
 8004ad0:	6851      	ldr	r1, [r2, #4]
 8004ad2:	428b      	cmp	r3, r1
 8004ad4:	d8fc      	bhi.n	8004ad0 <SST25_End+0xc>
}
 8004ad6:	bd08      	pop	{r3, pc}
 8004ad8:	e0001000 	.word	0xe0001000

08004adc <SST25_WriteEnable>:
{
 8004adc:	b508      	push	{r3, lr}
	SST25_Start();
 8004ade:	f7ff ffe5 	bl	8004aac <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_WRITE_ENABLE);
 8004ae2:	2006      	movs	r0, #6
 8004ae4:	f000 f998 	bl	8004e18 <SST25_SPI_ReadWriteByte>
}
 8004ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SST25_End();
 8004aec:	f7ff bfea 	b.w	8004ac4 <SST25_End>

08004af0 <SST25_ReadStatus>:
{
 8004af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	SST25_Start();
 8004af2:	f7ff ffdb 	bl	8004aac <SST25_Start>
	uint8_t Command[] = {FLASH_READ_STATUS, 0x00};
 8004af6:	2305      	movs	r3, #5
	if ((HAL_Result = HAL_SPI_TransmitReceive(&hspi3, Command, Received, 2, 1000)) != HAL_OK)
 8004af8:	aa03      	add	r2, sp, #12
 8004afa:	a902      	add	r1, sp, #8
	uint8_t Command[] = {FLASH_READ_STATUS, 0x00};
 8004afc:	f8ad 3008 	strh.w	r3, [sp, #8]
	if ((HAL_Result = HAL_SPI_TransmitReceive(&hspi3, Command, Received, 2, 1000)) != HAL_OK)
 8004b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b04:	4807      	ldr	r0, [pc, #28]	; (8004b24 <SST25_ReadStatus+0x34>)
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	2302      	movs	r3, #2
 8004b0a:	f7fe fa52 	bl	8002fb2 <HAL_SPI_TransmitReceive>
 8004b0e:	b108      	cbz	r0, 8004b14 <SST25_ReadStatus+0x24>
		Error_Handler();
 8004b10:	f001 fe02 	bl	8006718 <Error_Handler>
	SST25_End();
 8004b14:	f7ff ffd6 	bl	8004ac4 <SST25_End>
}
 8004b18:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8004b1c:	b005      	add	sp, #20
 8004b1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b22:	bf00      	nop
 8004b24:	20000f50 	.word	0x20000f50

08004b28 <SST25_EraseSector_4K>:
{
 8004b28:	b513      	push	{r0, r1, r4, lr}
	Address &= 0xFFFFFF;
 8004b2a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
	SST25_Start();
 8004b2e:	f7ff ffbd 	bl	8004aac <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_ENABLE_WRITE_STATUS);
 8004b32:	2050      	movs	r0, #80	; 0x50
 8004b34:	f000 f970 	bl	8004e18 <SST25_SPI_ReadWriteByte>
	SST25_End();
 8004b38:	f7ff ffc4 	bl	8004ac4 <SST25_End>
	SST25_Start();
 8004b3c:	f7ff ffb6 	bl	8004aac <SST25_Start>
	uint8_t cmd[] = {FLASH_WRITE_STATUS, Status};
 8004b40:	2301      	movs	r3, #1
	SST25_SPI_WriteBlock(cmd, 2);
 8004b42:	2102      	movs	r1, #2
 8004b44:	a801      	add	r0, sp, #4
	uint8_t cmd[] = {FLASH_WRITE_STATUS, Status};
 8004b46:	f88d 3004 	strb.w	r3, [sp, #4]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f88d 3005 	strb.w	r3, [sp, #5]
	SST25_SPI_WriteBlock(cmd, 2);
 8004b50:	f000 f94e 	bl	8004df0 <SST25_SPI_WriteBlock>
	SST25_End();
 8004b54:	f7ff ffb6 	bl	8004ac4 <SST25_End>
	SST25_WriteEnable();
 8004b58:	f7ff ffc0 	bl	8004adc <SST25_WriteEnable>
	SST25_Start();
 8004b5c:	f7ff ffa6 	bl	8004aac <SST25_Start>
	uint8_t cmd[] =
 8004b60:	2320      	movs	r3, #32
	SST25_SPI_WriteBlock(cmd, 4);
 8004b62:	2104      	movs	r1, #4
	uint8_t cmd[] =
 8004b64:	f88d 4007 	strb.w	r4, [sp, #7]
 8004b68:	f88d 3004 	strb.w	r3, [sp, #4]
			(Address >> 16) & 0xFF,
 8004b6c:	0c23      	lsrs	r3, r4, #16
	SST25_SPI_WriteBlock(cmd, 4);
 8004b6e:	eb0d 0001 	add.w	r0, sp, r1
	uint8_t cmd[] =
 8004b72:	f88d 3005 	strb.w	r3, [sp, #5]
			(Address >> 8) & 0xFF,
 8004b76:	0a23      	lsrs	r3, r4, #8
	uint8_t cmd[] =
 8004b78:	f88d 3006 	strb.w	r3, [sp, #6]
	SST25_SPI_WriteBlock(cmd, 4);
 8004b7c:	f000 f938 	bl	8004df0 <SST25_SPI_WriteBlock>
	SST25_End();
 8004b80:	f7ff ffa0 	bl	8004ac4 <SST25_End>
	while (SST25_ReadStatus() & FLASH_SBIT_BUSY);
 8004b84:	f7ff ffb4 	bl	8004af0 <SST25_ReadStatus>
 8004b88:	07c3      	lsls	r3, r0, #31
 8004b8a:	d4fb      	bmi.n	8004b84 <SST25_EraseSector_4K+0x5c>
}
 8004b8c:	b002      	add	sp, #8
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <SST25_WriteByte>:
{
 8004b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b92:	4604      	mov	r4, r0
 8004b94:	460d      	mov	r5, r1
	if (!(SST25_ReadStatus() & FLASH_SBIT_WRITE_ENABLE))
 8004b96:	f7ff ffab 	bl	8004af0 <SST25_ReadStatus>
 8004b9a:	07c3      	lsls	r3, r0, #31
 8004b9c:	d401      	bmi.n	8004ba2 <SST25_WriteByte+0x12>
		SST25_WriteEnable();
 8004b9e:	f7ff ff9d 	bl	8004adc <SST25_WriteEnable>
	SST25_Start();
 8004ba2:	f7ff ff83 	bl	8004aac <SST25_Start>
	Address &= 0xFFFFFF;
 8004ba6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint8_t cmd[] =
 8004baa:	2302      	movs	r3, #2
	SST25_SPI_WriteBlock(cmd, 5);
 8004bac:	2105      	movs	r1, #5
 8004bae:	4668      	mov	r0, sp
	uint8_t cmd[] =
 8004bb0:	f88d 4003 	strb.w	r4, [sp, #3]
 8004bb4:	f88d 3000 	strb.w	r3, [sp]
			(Address >> 16) & 0xFF,
 8004bb8:	0c23      	lsrs	r3, r4, #16
	uint8_t cmd[] =
 8004bba:	f88d 5004 	strb.w	r5, [sp, #4]
 8004bbe:	f88d 3001 	strb.w	r3, [sp, #1]
			(Address >> 8) & 0xFF,
 8004bc2:	0a23      	lsrs	r3, r4, #8
	uint8_t cmd[] =
 8004bc4:	f88d 3002 	strb.w	r3, [sp, #2]
	SST25_SPI_WriteBlock(cmd, 5);
 8004bc8:	f000 f912 	bl	8004df0 <SST25_SPI_WriteBlock>
	SST25_End();
 8004bcc:	f7ff ff7a 	bl	8004ac4 <SST25_End>
}
 8004bd0:	b003      	add	sp, #12
 8004bd2:	bd30      	pop	{r4, r5, pc}

08004bd4 <SST25_WriteBlock>:
{
 8004bd4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	4604      	mov	r4, r0
 8004bda:	460e      	mov	r6, r1
 8004bdc:	4615      	mov	r5, r2
	if (!(SST25_ReadStatus() & FLASH_SBIT_WRITE_ENABLE))
 8004bde:	f7ff ff87 	bl	8004af0 <SST25_ReadStatus>
 8004be2:	07c3      	lsls	r3, r0, #31
 8004be4:	d401      	bmi.n	8004bea <SST25_WriteBlock+0x16>
		SST25_WriteEnable();
 8004be6:	f7ff ff79 	bl	8004adc <SST25_WriteEnable>
	SST25_Start();
 8004bea:	f7ff ff5f 	bl	8004aac <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_ENABLE_SO);
 8004bee:	2070      	movs	r0, #112	; 0x70
 8004bf0:	f000 f912 	bl	8004e18 <SST25_SPI_ReadWriteByte>
	Address &= 0xFFFFFF;
 8004bf4:	f024 477f 	bic.w	r7, r4, #4278190080	; 0xff000000
	SST25_End();
 8004bf8:	f7ff ff64 	bl	8004ac4 <SST25_End>
	uint8_t Address_cmd[] =
 8004bfc:	23ad      	movs	r3, #173	; 0xad
 8004bfe:	f025 0901 	bic.w	r9, r5, #1
 8004c02:	46b0      	mov	r8, r6
 8004c04:	f88d 3004 	strb.w	r3, [sp, #4]
			(Address >> 16) & 0xFF,
 8004c08:	f3c4 4307 	ubfx	r3, r4, #16, #8
			(Address >> 8) & 0xFF,
 8004c0c:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8004c10:	fa1f f989 	uxth.w	r9, r9
	uint8_t Address_cmd[] =
 8004c14:	f88d 3005 	strb.w	r3, [sp, #5]
	uint8_t DataCommand[3] = {FLASH_AAI, 0x00, 0x00};
 8004c18:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <SST25_WriteBlock+0xf4>)
	uint8_t Address_cmd[] =
 8004c1a:	f88d 4006 	strb.w	r4, [sp, #6]
	uint16_t NumBytesWritten = 0;
 8004c1e:	2400      	movs	r4, #0
	uint8_t DataCommand[3] = {FLASH_AAI, 0x00, 0x00};
 8004c20:	881a      	ldrh	r2, [r3, #0]
		while (!HAL_GPIO_ReadPin(GENSPI_MISO_GPIO_Port, GENSPI_MISO_Pin));
 8004c22:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8004ccc <SST25_WriteBlock+0xf8>
	uint8_t DataCommand[3] = {FLASH_AAI, 0x00, 0x00};
 8004c26:	789b      	ldrb	r3, [r3, #2]
	uint8_t Address_cmd[] =
 8004c28:	f88d 7007 	strb.w	r7, [sp, #7]
	uint8_t DataCommand[3] = {FLASH_AAI, 0x00, 0x00};
 8004c2c:	f8ad 2000 	strh.w	r2, [sp]
 8004c30:	f88d 3002 	strb.w	r3, [sp, #2]
	while ((NumBytesRemaining = NumBytes - NumBytesWritten) > 1)
 8004c34:	454c      	cmp	r4, r9
 8004c36:	d11b      	bne.n	8004c70 <SST25_WriteBlock+0x9c>
 8004c38:	086a      	lsrs	r2, r5, #1
 8004c3a:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 8004c3e:	eb05 0542 	add.w	r5, r5, r2, lsl #1
	SST25_Start();
 8004c42:	f7ff ff33 	bl	8004aac <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_WRITE_DISABLE);
 8004c46:	2004      	movs	r0, #4
	while ((NumBytesRemaining = NumBytes - NumBytesWritten) > 1)
 8004c48:	b2ad      	uxth	r5, r5
	SST25_SPI_ReadWriteByte(FLASH_WRITE_DISABLE);
 8004c4a:	f000 f8e5 	bl	8004e18 <SST25_SPI_ReadWriteByte>
	SST25_End();
 8004c4e:	f7ff ff39 	bl	8004ac4 <SST25_End>
	SST25_Start();
 8004c52:	f7ff ff2b 	bl	8004aac <SST25_Start>
	SST25_SPI_ReadWriteByte(FLASH_DISABLE_SO);
 8004c56:	2080      	movs	r0, #128	; 0x80
 8004c58:	f000 f8de 	bl	8004e18 <SST25_SPI_ReadWriteByte>
	SST25_End();
 8004c5c:	f7ff ff32 	bl	8004ac4 <SST25_End>
	if (NumBytesRemaining)
 8004c60:	b11d      	cbz	r5, 8004c6a <SST25_WriteBlock+0x96>
		SST25_WriteByte(Address + NumBytesWritten, pBlock[NumBytesWritten]);
 8004c62:	5d31      	ldrb	r1, [r6, r4]
 8004c64:	19e0      	adds	r0, r4, r7
 8004c66:	f7ff ff93 	bl	8004b90 <SST25_WriteByte>
}
 8004c6a:	b002      	add	sp, #8
 8004c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		SST25_Start();
 8004c70:	f7ff ff1c 	bl	8004aac <SST25_Start>
		if (!NumBytesWritten)
 8004c74:	b924      	cbnz	r4, 8004c80 <SST25_WriteBlock+0xac>
			SST25_SPI_WriteBlock(Address_cmd, 4);
 8004c76:	2104      	movs	r1, #4
 8004c78:	eb0d 0001 	add.w	r0, sp, r1
 8004c7c:	f000 f8b8 	bl	8004df0 <SST25_SPI_WriteBlock>
		DataCommand[2] = pBlock[NumBytesWritten++];
 8004c80:	3402      	adds	r4, #2
		DataCommand[1] = pBlock[NumBytesWritten++];
 8004c82:	f898 3000 	ldrb.w	r3, [r8]
		DataCommand[2] = pBlock[NumBytesWritten++];
 8004c86:	b2a4      	uxth	r4, r4
		DataCommand[1] = pBlock[NumBytesWritten++];
 8004c88:	f88d 3001 	strb.w	r3, [sp, #1]
		DataCommand[2] = pBlock[NumBytesWritten++];
 8004c8c:	f898 3001 	ldrb.w	r3, [r8, #1]
		if (NumBytesWritten <= 2)
 8004c90:	2c02      	cmp	r4, #2
		DataCommand[2] = pBlock[NumBytesWritten++];
 8004c92:	f88d 3002 	strb.w	r3, [sp, #2]
			SST25_SPI_WriteBlock(DataCommand + 1, 2);
 8004c96:	bf99      	ittee	ls
 8004c98:	2102      	movls	r1, #2
 8004c9a:	f10d 0001 	addls.w	r0, sp, #1
			SST25_SPI_WriteBlock(DataCommand, 3);
 8004c9e:	2103      	movhi	r1, #3
 8004ca0:	4668      	movhi	r0, sp
 8004ca2:	f000 f8a5 	bl	8004df0 <SST25_SPI_WriteBlock>
		SST25_End();
 8004ca6:	f7ff ff0d 	bl	8004ac4 <SST25_End>
		SST25_Start();
 8004caa:	f7ff feff 	bl	8004aac <SST25_Start>
		while (!HAL_GPIO_ReadPin(GENSPI_MISO_GPIO_Port, GENSPI_MISO_Pin));
 8004cae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	f7fb ffee 	bl	8000c94 <HAL_GPIO_ReadPin>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d0f8      	beq.n	8004cae <SST25_WriteBlock+0xda>
		SST25_End();
 8004cbc:	f108 0802 	add.w	r8, r8, #2
 8004cc0:	f7ff ff00 	bl	8004ac4 <SST25_End>
 8004cc4:	e7b6      	b.n	8004c34 <SST25_WriteBlock+0x60>
 8004cc6:	bf00      	nop
 8004cc8:	08009dd0 	.word	0x08009dd0
 8004ccc:	40020800 	.word	0x40020800

08004cd0 <SST25_ReadBlock>:
{
 8004cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cd2:	4616      	mov	r6, r2
	Address &= 0xFFFFFF;
 8004cd4:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
{
 8004cd8:	460d      	mov	r5, r1
	SST25_Start();
 8004cda:	f7ff fee7 	bl	8004aac <SST25_Start>
	uint8_t Command[] =
 8004cde:	230b      	movs	r3, #11
	SST25_SPI_WriteBlock(Command, 5);
 8004ce0:	4668      	mov	r0, sp
 8004ce2:	2105      	movs	r1, #5
	uint8_t Command[] =
 8004ce4:	f88d 4003 	strb.w	r4, [sp, #3]
 8004ce8:	f88d 3000 	strb.w	r3, [sp]
			(Address >> 16) & 0xFF,
 8004cec:	0c23      	lsrs	r3, r4, #16
	uint8_t Command[] =
 8004cee:	f88d 3001 	strb.w	r3, [sp, #1]
			(Address >> 8) & 0xFF,
 8004cf2:	0a23      	lsrs	r3, r4, #8
	uint8_t Command[] =
 8004cf4:	f88d 3002 	strb.w	r3, [sp, #2]
 8004cf8:	23ff      	movs	r3, #255	; 0xff
 8004cfa:	f88d 3004 	strb.w	r3, [sp, #4]
	SST25_SPI_WriteBlock(Command, 5);
 8004cfe:	f000 f877 	bl	8004df0 <SST25_SPI_WriteBlock>
	SST25_SPI_ReadBlock(pBlock, NumBytes);
 8004d02:	4631      	mov	r1, r6
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 f87d 	bl	8004e04 <SST25_SPI_ReadBlock>
	SST25_End();
 8004d0a:	f7ff fedb 	bl	8004ac4 <SST25_End>
}
 8004d0e:	b002      	add	sp, #8
 8004d10:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d14 <HandleHALResult.part.0>:
{
  if (Value != HAL_OK)
  {
//    LCD_UsrLog("HAL error: %s\n", pText);
//    Error_Handler();
    HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); // !!!
 8004d14:	2102      	movs	r1, #2
 8004d16:	4801      	ldr	r0, [pc, #4]	; (8004d1c <HandleHALResult.part.0+0x8>)
 8004d18:	f7fb bfc7 	b.w	8000caa <HAL_GPIO_TogglePin>
 8004d1c:	40020000 	.word	0x40020000

08004d20 <ToggleLED.part.0>:
void ToggleLED(LED_t LED)
{
  switch(LED)
  {
    case LED_Red:
      HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8004d20:	2102      	movs	r1, #2
 8004d22:	4801      	ldr	r0, [pc, #4]	; (8004d28 <ToggleLED.part.0+0x8>)
 8004d24:	f7fb bfc1 	b.w	8000caa <HAL_GPIO_TogglePin>
 8004d28:	40020000 	.word	0x40020000

08004d2c <RGB_AppendColourComponent>:
    RGB_pData[RGB_DataIndex++] = 0;
  }
}

static void RGB_AppendColourComponent(uint8_t ColorComponent)
{
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	2508      	movs	r5, #8
  uint8_t Remainder;

  Remainder = ColorComponent;
  for (uint8_t BitIndex=0; BitIndex<8;++BitIndex)
  {
    if (RGB_DataIndex == RGB_Number)
 8004d32:	4e13      	ldr	r6, [pc, #76]	; (8004d80 <RGB_AppendColourComponent+0x54>)
 8004d34:	4f13      	ldr	r7, [pc, #76]	; (8004d84 <RGB_AppendColourComponent+0x58>)
 8004d36:	8833      	ldrh	r3, [r6, #0]
 8004d38:	883a      	ldrh	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d103      	bne.n	8004d46 <RGB_AppendColourComponent+0x1a>
      Error_Handler(); // Prevent memory corruption caused by writing outside the array.

    RGB_pData[RGB_DataIndex++] = Remainder & 0x80? RGB_NumClockCycles_High : RGB_NumClockCycles_Low;
    Remainder = Remainder << 1;
  }
}
 8004d3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d42:	f7ff bfed 	b.w	8004d20 <ToggleLED.part.0>
    if (RGB_DataIndex >= RGB_pData_NumItems)
 8004d46:	4a10      	ldr	r2, [pc, #64]	; (8004d88 <RGB_AppendColourComponent+0x5c>)
 8004d48:	8812      	ldrh	r2, [r2, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d801      	bhi.n	8004d52 <RGB_AppendColourComponent+0x26>
      Error_Handler(); // Prevent memory corruption caused by writing outside the array.
 8004d4e:	f001 fce3 	bl	8006718 <Error_Handler>
    RGB_pData[RGB_DataIndex++] = Remainder & 0x80? RGB_NumClockCycles_High : RGB_NumClockCycles_Low;
 8004d52:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <RGB_AppendColourComponent+0x60>)
 8004d54:	f014 0f80 	tst.w	r4, #128	; 0x80
  for (uint8_t BitIndex=0; BitIndex<8;++BitIndex)
 8004d58:	f105 35ff 	add.w	r5, r5, #4294967295
    Remainder = Remainder << 1;
 8004d5c:	ea4f 0444 	mov.w	r4, r4, lsl #1
    RGB_pData[RGB_DataIndex++] = Remainder & 0x80? RGB_NumClockCycles_High : RGB_NumClockCycles_Low;
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	bf18      	it	ne
 8004d64:	2182      	movne	r1, #130	; 0x82
 8004d66:	8833      	ldrh	r3, [r6, #0]
 8004d68:	bf08      	it	eq
 8004d6a:	2141      	moveq	r1, #65	; 0x41
  for (uint8_t BitIndex=0; BitIndex<8;++BitIndex)
 8004d6c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    Remainder = Remainder << 1;
 8004d70:	b2e4      	uxtb	r4, r4
    RGB_pData[RGB_DataIndex++] = Remainder & 0x80? RGB_NumClockCycles_High : RGB_NumClockCycles_Low;
 8004d72:	f103 0001 	add.w	r0, r3, #1
 8004d76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004d7a:	8030      	strh	r0, [r6, #0]
  for (uint8_t BitIndex=0; BitIndex<8;++BitIndex)
 8004d7c:	d1db      	bne.n	8004d36 <RGB_AppendColourComponent+0xa>
}
 8004d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d80:	2000087c 	.word	0x2000087c
 8004d84:	2000087e 	.word	0x2000087e
 8004d88:	20000884 	.word	0x20000884
 8004d8c:	20000880 	.word	0x20000880

08004d90 <HandleHALResult>:
  if (Value != HAL_OK)
 8004d90:	b108      	cbz	r0, 8004d96 <HandleHALResult+0x6>
 8004d92:	f7ff bfbf 	b.w	8004d14 <HandleHALResult.part.0>
}
 8004d96:	4770      	bx	lr

08004d98 <I2C_write>:
{
 8004d98:	b507      	push	{r0, r1, r2, lr}
 8004d9a:	4613      	mov	r3, r2
  HandleHALResult(HAL_I2C_Master_Transmit(&hi2c1, Address << 1, pData, NumBytes, 1000), "HAL_I2C_Master_Transmit");
 8004d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004da0:	9200      	str	r2, [sp, #0]
 8004da2:	460a      	mov	r2, r1
 8004da4:	0041      	lsls	r1, r0, #1
 8004da6:	4806      	ldr	r0, [pc, #24]	; (8004dc0 <I2C_write+0x28>)
 8004da8:	f7fc f98a 	bl	80010c0 <HAL_I2C_Master_Transmit>
  if (Value != HAL_OK)
 8004dac:	b120      	cbz	r0, 8004db8 <I2C_write+0x20>
}
 8004dae:	b003      	add	sp, #12
 8004db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db4:	f7ff bfae 	b.w	8004d14 <HandleHALResult.part.0>
 8004db8:	b003      	add	sp, #12
 8004dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dbe:	bf00      	nop
 8004dc0:	20000c10 	.word	0x20000c10

08004dc4 <I2C_read>:
{
 8004dc4:	b507      	push	{r0, r1, r2, lr}
 8004dc6:	4613      	mov	r3, r2
  HandleHALResult(HAL_I2C_Master_Receive(&hi2c1, Address << 1, pData, NumBytes, 1000), "HAL_I2C_Master_Receive");
 8004dc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dcc:	9200      	str	r2, [sp, #0]
 8004dce:	460a      	mov	r2, r1
 8004dd0:	0041      	lsls	r1, r0, #1
 8004dd2:	4806      	ldr	r0, [pc, #24]	; (8004dec <I2C_read+0x28>)
 8004dd4:	f7fc fa0a 	bl	80011ec <HAL_I2C_Master_Receive>
  if (Value != HAL_OK)
 8004dd8:	b120      	cbz	r0, 8004de4 <I2C_read+0x20>
}
 8004dda:	b003      	add	sp, #12
 8004ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004de0:	f7ff bf98 	b.w	8004d14 <HandleHALResult.part.0>
 8004de4:	b003      	add	sp, #12
 8004de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dea:	bf00      	nop
 8004dec:	20000c10 	.word	0x20000c10

08004df0 <SST25_SPI_WriteBlock>:
{
 8004df0:	460a      	mov	r2, r1
  HAL_SPI_Transmit(&hspi3, pBlock, NumBytes, 1000);
 8004df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004df6:	4601      	mov	r1, r0
 8004df8:	4801      	ldr	r0, [pc, #4]	; (8004e00 <SST25_SPI_WriteBlock+0x10>)
 8004dfa:	f7fe b819 	b.w	8002e30 <HAL_SPI_Transmit>
 8004dfe:	bf00      	nop
 8004e00:	20000f50 	.word	0x20000f50

08004e04 <SST25_SPI_ReadBlock>:
{
 8004e04:	460a      	mov	r2, r1
  HAL_SPI_Receive(&hspi3, pBlock, NumBytes, 1000);
 8004e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e0a:	4601      	mov	r1, r0
 8004e0c:	4801      	ldr	r0, [pc, #4]	; (8004e14 <SST25_SPI_ReadBlock+0x10>)
 8004e0e:	f7fe b9fc 	b.w	800320a <HAL_SPI_Receive>
 8004e12:	bf00      	nop
 8004e14:	20000f50 	.word	0x20000f50

08004e18 <SST25_SPI_ReadWriteByte>:
{
 8004e18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_SPI_TransmitReceive(&hspi3, &Value, &Received, 1, 1000);
 8004e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8004e1e:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi3, &Value, &Received, 1, 1000);
 8004e22:	f10d 0217 	add.w	r2, sp, #23
 8004e26:	f10d 010f 	add.w	r1, sp, #15
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4804      	ldr	r0, [pc, #16]	; (8004e40 <SST25_SPI_ReadWriteByte+0x28>)
 8004e30:	f7fe f8bf 	bl	8002fb2 <HAL_SPI_TransmitReceive>
}
 8004e34:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004e38:	b007      	add	sp, #28
 8004e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e3e:	bf00      	nop
 8004e40:	20000f50 	.word	0x20000f50

08004e44 <SST25_SPI_Begin>:
{
 8004e44:	b508      	push	{r3, lr}
  if (pGenSPI_Begin)
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <SST25_SPI_Begin+0x1c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <SST25_SPI_Begin+0xa>
    (*pGenSPI_Begin)();
 8004e4c:	4798      	blx	r3
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, 0);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e54:	4803      	ldr	r0, [pc, #12]	; (8004e64 <SST25_SPI_Begin+0x20>)
}
 8004e56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, 0);
 8004e5a:	f7fb bf21 	b.w	8000ca0 <HAL_GPIO_WritePin>
 8004e5e:	bf00      	nop
 8004e60:	20000888 	.word	0x20000888
 8004e64:	40020800 	.word	0x40020800

08004e68 <SST25_SPI_End>:
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, 1);
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e6e:	4805      	ldr	r0, [pc, #20]	; (8004e84 <SST25_SPI_End+0x1c>)
{
 8004e70:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, 1);
 8004e72:	f7fb ff15 	bl	8000ca0 <HAL_GPIO_WritePin>
  if (pGenSPI_End)
 8004e76:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <SST25_SPI_End+0x20>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b113      	cbz	r3, 8004e82 <SST25_SPI_End+0x1a>
}
 8004e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*pGenSPI_End)();
 8004e80:	4718      	bx	r3
}
 8004e82:	bd10      	pop	{r4, pc}
 8004e84:	40020800 	.word	0x40020800
 8004e88:	2000088c 	.word	0x2000088c

08004e8c <ToggleLED>:
  switch(LED)
 8004e8c:	2802      	cmp	r0, #2
 8004e8e:	d005      	beq.n	8004e9c <ToggleLED+0x10>
 8004e90:	2803      	cmp	r0, #3
 8004e92:	d007      	beq.n	8004ea4 <ToggleLED+0x18>
 8004e94:	2801      	cmp	r0, #1
 8004e96:	d107      	bne.n	8004ea8 <ToggleLED+0x1c>
 8004e98:	f7ff bf42 	b.w	8004d20 <ToggleLED.part.0>
      HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8004e9c:	2104      	movs	r1, #4
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8004e9e:	4803      	ldr	r0, [pc, #12]	; (8004eac <ToggleLED+0x20>)
 8004ea0:	f7fb bf03 	b.w	8000caa <HAL_GPIO_TogglePin>
 8004ea4:	2108      	movs	r1, #8
 8004ea6:	e7fa      	b.n	8004e9e <ToggleLED+0x12>
      Error_Handler();
 8004ea8:	f001 bc36 	b.w	8006718 <Error_Handler>
 8004eac:	40020000 	.word	0x40020000

08004eb0 <IsUserButtonPressed>:
  return !HAL_GPIO_ReadPin(NUserButton_GPIO_Port, NUserButton_Pin);
 8004eb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004eb4:	4803      	ldr	r0, [pc, #12]	; (8004ec4 <IsUserButtonPressed+0x14>)
{
 8004eb6:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(NUserButton_GPIO_Port, NUserButton_Pin);
 8004eb8:	f7fb feec 	bl	8000c94 <HAL_GPIO_ReadPin>
}
 8004ebc:	fab0 f080 	clz	r0, r0
 8004ec0:	0940      	lsrs	r0, r0, #5
 8004ec2:	bd08      	pop	{r3, pc}
 8004ec4:	40020800 	.word	0x40020800

08004ec8 <I2S_SelectSource>:
{
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(MUX_S0_GPIO_Port, MUX_S0_Pin, Source & 0x01);
 8004ecc:	2104      	movs	r1, #4
 8004ece:	4806      	ldr	r0, [pc, #24]	; (8004ee8 <I2S_SelectSource+0x20>)
 8004ed0:	f004 0201 	and.w	r2, r4, #1
 8004ed4:	f7fb fee4 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_S1_GPIO_Port, MUX_S1_Pin, Source & 0x02);
 8004ed8:	f004 0202 	and.w	r2, r4, #2
 8004edc:	2108      	movs	r1, #8
 8004ede:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <I2S_SelectSource+0x20>)
}
 8004ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(MUX_S1_GPIO_Port, MUX_S1_Pin, Source & 0x02);
 8004ee4:	f7fb bedc 	b.w	8000ca0 <HAL_GPIO_WritePin>
 8004ee8:	40020c00 	.word	0x40020c00

08004eec <ADC_RegisterRead>:
{
 8004eec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Result = HAL_I2C_Mem_Read(&hi2c1, ADC_I2C_Address << 1, Index, 1, &Result, 1, 1000);
 8004eee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ef2:	2301      	movs	r3, #1
{
 8004ef4:	4602      	mov	r2, r0
  HAL_Result = HAL_I2C_Mem_Read(&hi2c1, ADC_I2C_Address << 1, Index, 1, &Result, 1, 1000);
 8004ef6:	4808      	ldr	r0, [pc, #32]	; (8004f18 <ADC_RegisterRead+0x2c>)
 8004ef8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8004efc:	f10d 0117 	add.w	r1, sp, #23
 8004f00:	9100      	str	r1, [sp, #0]
 8004f02:	2194      	movs	r1, #148	; 0x94
 8004f04:	f7fc fac0 	bl	8001488 <HAL_I2C_Mem_Read>
  if (HAL_Result != HAL_OK)
 8004f08:	b108      	cbz	r0, 8004f0e <ADC_RegisterRead+0x22>
  switch(LED)
 8004f0a:	f7ff ff09 	bl	8004d20 <ToggleLED.part.0>
}
 8004f0e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004f12:	b007      	add	sp, #28
 8004f14:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f18:	20000c10 	.word	0x20000c10

08004f1c <ADC_RegisterWrite>:
{
 8004f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_Result = HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_Address << 1, Data, 2, 1000);
 8004f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  Data[0] = Index;
 8004f22:	f88d 000c 	strb.w	r0, [sp, #12]
  Data[1] = Value;
 8004f26:	f88d 100d 	strb.w	r1, [sp, #13]
  HAL_Result = HAL_I2C_Master_Transmit(&hi2c1, ADC_I2C_Address << 1, Data, 2, 1000);
 8004f2a:	aa03      	add	r2, sp, #12
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2194      	movs	r1, #148	; 0x94
 8004f30:	2302      	movs	r3, #2
 8004f32:	4804      	ldr	r0, [pc, #16]	; (8004f44 <ADC_RegisterWrite+0x28>)
 8004f34:	f7fc f8c4 	bl	80010c0 <HAL_I2C_Master_Transmit>
  if (HAL_Result != HAL_OK)
 8004f38:	b108      	cbz	r0, 8004f3e <ADC_RegisterWrite+0x22>
  switch(LED)
 8004f3a:	f7ff fef1 	bl	8004d20 <ToggleLED.part.0>
}
 8004f3e:	b005      	add	sp, #20
 8004f40:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f44:	20000c10 	.word	0x20000c10

08004f48 <ADC_CheckPowerSupplies>:
  Value = ADC_RegisterRead(0x78);
 8004f48:	2078      	movs	r0, #120	; 0x78
 8004f4a:	f7ff bfcf 	b.w	8004eec <ADC_RegisterRead>

08004f4e <ADC_SelectSource>:
  switch(Source)
 8004f4e:	2801      	cmp	r0, #1
{
 8004f50:	b507      	push	{r0, r1, r2, lr}
  switch(Source)
 8004f52:	d00e      	beq.n	8004f72 <ADC_SelectSource+0x24>
 8004f54:	2802      	cmp	r0, #2
 8004f56:	bf14      	ite	ne
 8004f58:	2140      	movne	r1, #64	; 0x40
 8004f5a:	2142      	moveq	r1, #66	; 0x42
  ADC_RegisterWrite(0x06, WriteValue);
 8004f5c:	2006      	movs	r0, #6
 8004f5e:	9101      	str	r1, [sp, #4]
 8004f60:	f7ff ffdc 	bl	8004f1c <ADC_RegisterWrite>
  ADC_RegisterWrite(0x07, WriteValue);
 8004f64:	9901      	ldr	r1, [sp, #4]
 8004f66:	2007      	movs	r0, #7
}
 8004f68:	b003      	add	sp, #12
 8004f6a:	f85d eb04 	ldr.w	lr, [sp], #4
  ADC_RegisterWrite(0x07, WriteValue);
 8004f6e:	f7ff bfd5 	b.w	8004f1c <ADC_RegisterWrite>
      WriteValue = 0x41;
 8004f72:	2141      	movs	r1, #65	; 0x41
 8004f74:	e7f2      	b.n	8004f5c <ADC_SelectSource+0xe>
	...

08004f78 <ADC_SetGain>:
  if ((Value < -12.0f) || (Value > 32.0f))
 8004f78:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 8004f7c:	b500      	push	{lr}
  if ((Value < -12.0f) || (Value > 32.0f))
 8004f7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
{
 8004f82:	ed2d 8b02 	vpush	{d8}
  if ((Value < -12.0f) || (Value > 32.0f))
 8004f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	eeb0 8a40 	vmov.f32	s16, s0
  if ((Value < -12.0f) || (Value > 32.0f))
 8004f90:	d406      	bmi.n	8004fa0 <ADC_SetGain+0x28>
 8004f92:	eddf 7a11 	vldr	s15, [pc, #68]	; 8004fd8 <ADC_SetGain+0x60>
 8004f96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9e:	dd01      	ble.n	8004fa4 <ADC_SetGain+0x2c>
    Error_Handler();
 8004fa0:	f001 fbba 	bl	8006718 <Error_Handler>
  RegisterValue = (int)round(2.0f * Value);
 8004fa4:	ee38 7a08 	vadd.f32	s14, s16, s16
  ADC_RegisterWrite(0x01, RegisterValue);
 8004fa8:	2001      	movs	r0, #1
  RegisterValue = (int)round(2.0f * Value);
 8004faa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004fae:	feb8 7b47 	vrinta.f64	d7, d7
 8004fb2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004fb6:	edcd 7a01 	vstr	s15, [sp, #4]
 8004fba:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ADC_RegisterWrite(0x01, RegisterValue);
 8004fbe:	9101      	str	r1, [sp, #4]
 8004fc0:	f7ff ffac 	bl	8004f1c <ADC_RegisterWrite>
  ADC_RegisterWrite(0x02, RegisterValue);
 8004fc4:	9901      	ldr	r1, [sp, #4]
 8004fc6:	2002      	movs	r0, #2
}
 8004fc8:	b003      	add	sp, #12
 8004fca:	ecbd 8b02 	vpop	{d8}
 8004fce:	f85d eb04 	ldr.w	lr, [sp], #4
  ADC_RegisterWrite(0x02, RegisterValue);
 8004fd2:	f7ff bfa3 	b.w	8004f1c <ADC_RegisterWrite>
 8004fd6:	bf00      	nop
 8004fd8:	42000000 	.word	0x42000000

08004fdc <ADC_Initialize>:
  ADC_RegisterWrite(0x00, 0x00); // Default to bank 0.
 8004fdc:	2100      	movs	r1, #0
{
 8004fde:	b508      	push	{r3, lr}
  ADC_RegisterWrite(0x00, 0x00); // Default to bank 0.
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	f7ff ff9b 	bl	8004f1c <ADC_RegisterWrite>
  ADC_CheckPowerSupplies();
 8004fe6:	f7ff ffaf 	bl	8004f48 <ADC_CheckPowerSupplies>
  ADC_SelectSource(ADC_Source_None);
 8004fea:	2000      	movs	r0, #0
 8004fec:	f7ff ffaf 	bl	8004f4e <ADC_SelectSource>
  ADC_SetGain(0);
 8004ff0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800501c <ADC_Initialize+0x40>
 8004ff4:	f7ff ffc0 	bl	8004f78 <ADC_SetGain>
  ADC_RegisterWrite(0x10, 0x00); // Set GPIO 1 and 0 to GPIO.
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	2010      	movs	r0, #16
 8004ffc:	f7ff ff8e 	bl	8004f1c <ADC_RegisterWrite>
  ADC_RegisterWrite(0x11, 0x00); // Set GPIO 3 and 2 to GPIO.
 8005000:	2100      	movs	r1, #0
 8005002:	2011      	movs	r0, #17
 8005004:	f7ff ff8a 	bl	8004f1c <ADC_RegisterWrite>
  ADC_RegisterWrite(0x12, 0x44); // Set GPIO 1 and 0 to be outputs.
 8005008:	2144      	movs	r1, #68	; 0x44
 800500a:	2012      	movs	r0, #18
 800500c:	f7ff ff86 	bl	8004f1c <ADC_RegisterWrite>
  ADC_RegisterWrite(0x13, 0x44); // Set GPIO 3 and 2 to be outputs.
 8005010:	2144      	movs	r1, #68	; 0x44
 8005012:	2013      	movs	r0, #19
}
 8005014:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ADC_RegisterWrite(0x13, 0x44); // Set GPIO 3 and 2 to be outputs.
 8005018:	f7ff bf80 	b.w	8004f1c <ADC_RegisterWrite>
 800501c:	00000000 	.word	0x00000000

08005020 <DAC_Mute>:
  HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, Value ? 0 : 1);
 8005020:	fab0 f280 	clz	r2, r0
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	4802      	ldr	r0, [pc, #8]	; (8005030 <DAC_Mute+0x10>)
 8005028:	0952      	lsrs	r2, r2, #5
 800502a:	f7fb be39 	b.w	8000ca0 <HAL_GPIO_WritePin>
 800502e:	bf00      	nop
 8005030:	40020c00 	.word	0x40020c00

08005034 <DAC_Initialize>:
{
 8005034:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, 0); // Latency.
 8005036:	4807      	ldr	r0, [pc, #28]	; (8005054 <DAC_Initialize+0x20>)
 8005038:	2200      	movs	r2, #0
 800503a:	2110      	movs	r1, #16
 800503c:	f7fb fe30 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
 8005040:	4804      	ldr	r0, [pc, #16]	; (8005054 <DAC_Initialize+0x20>)
 8005042:	2200      	movs	r2, #0
 8005044:	2120      	movs	r1, #32
 8005046:	f7fb fe2b 	bl	8000ca0 <HAL_GPIO_WritePin>
  DAC_Mute(1);
 800504a:	2001      	movs	r0, #1
}
 800504c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DAC_Mute(1);
 8005050:	f7ff bfe6 	b.w	8005020 <DAC_Mute>
 8005054:	40020c00 	.word	0x40020c00

08005058 <PA_RegisterWrite8>:
{
 8005058:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 800505a:	2301      	movs	r3, #1
{
 800505c:	f88d 1017 	strb.w	r1, [sp, #23]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 8005060:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 8005064:	4602      	mov	r2, r0
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 8005066:	4807      	ldr	r0, [pc, #28]	; (8005084 <PA_RegisterWrite8+0x2c>)
 8005068:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800506c:	f10d 0117 	add.w	r1, sp, #23
 8005070:	9100      	str	r1, [sp, #0]
 8005072:	2154      	movs	r1, #84	; 0x54
 8005074:	f7fc f952 	bl	800131c <HAL_I2C_Mem_Write>
  if (Value != HAL_OK)
 8005078:	b108      	cbz	r0, 800507e <PA_RegisterWrite8+0x26>
 800507a:	f7ff fe4b 	bl	8004d14 <HandleHALResult.part.0>
}
 800507e:	b007      	add	sp, #28
 8005080:	f85d fb04 	ldr.w	pc, [sp], #4
 8005084:	20000c10 	.word	0x20000c10

08005088 <PA_RegisterWrite16>:
{
 8005088:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Data[0] = (uint8_t)(Value >> 8);
 800508a:	0a0b      	lsrs	r3, r1, #8
  Data[1] = (uint8_t)(Value);
 800508c:	f88d 1015 	strb.w	r1, [sp, #21]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 2, 1000), "HAL_I2C_Mem_Write");
 8005090:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 8005094:	4602      	mov	r2, r0
  Data[0] = (uint8_t)(Value >> 8);
 8005096:	f88d 3014 	strb.w	r3, [sp, #20]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 2, 1000), "HAL_I2C_Mem_Write");
 800509a:	2302      	movs	r3, #2
 800509c:	4807      	ldr	r0, [pc, #28]	; (80050bc <PA_RegisterWrite16+0x34>)
 800509e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80050a2:	ab05      	add	r3, sp, #20
 80050a4:	2154      	movs	r1, #84	; 0x54
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2301      	movs	r3, #1
 80050aa:	f7fc f937 	bl	800131c <HAL_I2C_Mem_Write>
  if (Value != HAL_OK)
 80050ae:	b108      	cbz	r0, 80050b4 <PA_RegisterWrite16+0x2c>
 80050b0:	f7ff fe30 	bl	8004d14 <HandleHALResult.part.0>
}
 80050b4:	b007      	add	sp, #28
 80050b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80050ba:	bf00      	nop
 80050bc:	20000c10 	.word	0x20000c10

080050c0 <PA_RegisterWrite32>:
{
 80050c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Data[0] = (uint8_t)(Value >> 24);
 80050c2:	0e0b      	lsrs	r3, r1, #24
  Data[3] = (uint8_t)(Value);
 80050c4:	f88d 1017 	strb.w	r1, [sp, #23]
{
 80050c8:	4602      	mov	r2, r0
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 80050ca:	480d      	ldr	r0, [pc, #52]	; (8005100 <PA_RegisterWrite32+0x40>)
  Data[0] = (uint8_t)(Value >> 24);
 80050cc:	f88d 3014 	strb.w	r3, [sp, #20]
  Data[1] = (uint8_t)(Value >> 16);
 80050d0:	0c0b      	lsrs	r3, r1, #16
 80050d2:	f88d 3015 	strb.w	r3, [sp, #21]
  Data[2] = (uint8_t)(Value >> 8);
 80050d6:	0a0b      	lsrs	r3, r1, #8
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 80050d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  Data[2] = (uint8_t)(Value >> 8);
 80050dc:	f88d 3016 	strb.w	r3, [sp, #22]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 80050e0:	2304      	movs	r3, #4
 80050e2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80050e6:	ab05      	add	r3, sp, #20
 80050e8:	2154      	movs	r1, #84	; 0x54
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	2301      	movs	r3, #1
 80050ee:	f7fc f915 	bl	800131c <HAL_I2C_Mem_Write>
  if (Value != HAL_OK)
 80050f2:	b108      	cbz	r0, 80050f8 <PA_RegisterWrite32+0x38>
 80050f4:	f7ff fe0e 	bl	8004d14 <HandleHALResult.part.0>
}
 80050f8:	b007      	add	sp, #28
 80050fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80050fe:	bf00      	nop
 8005100:	20000c10 	.word	0x20000c10

08005104 <PA_SetMasterVolume>:
  if (Volume_dB > 24)
 8005104:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8005108:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800510c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005110:	dc16      	bgt.n	8005140 <PA_SetMasterVolume+0x3c>
  if (Volume_dB < -103.75)
 8005112:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005148 <PA_SetMasterVolume+0x44>
    Volume_dB = -103.75;
 8005116:	eeb4 0a47 	vcmp.f32	s0, s14
 800511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511e:	bf48      	it	mi
 8005120:	eeb0 0a47 	vmovmi.f32	s0, s14
  RegisterValue = 8 * (24 - Volume_dB);
 8005124:	ee77 7ac0 	vsub.f32	s15, s15, s0
  PA_RegisterWrite16(0x07, RegisterValue);
 8005128:	2007      	movs	r0, #7
  RegisterValue = 8 * (24 - Volume_dB);
 800512a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800512e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  PA_RegisterWrite16(0x07, RegisterValue);
 8005136:	ee17 3a90 	vmov	r3, s15
 800513a:	b299      	uxth	r1, r3
 800513c:	f7ff bfa4 	b.w	8005088 <PA_RegisterWrite16>
    Volume_dB = 24;
 8005140:	eeb0 0a67 	vmov.f32	s0, s15
 8005144:	e7ee      	b.n	8005124 <PA_SetMasterVolume+0x20>
 8005146:	bf00      	nop
 8005148:	c2cf8000 	.word	0xc2cf8000

0800514c <PA_Mute>:
  PA_RegisterWrite16(0x07, 0x03FF);
 800514c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005150:	2007      	movs	r0, #7
 8005152:	f7ff bf99 	b.w	8005088 <PA_RegisterWrite16>
	...

08005158 <PA_Initialize>:
{
 8005158:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 0);
 800515a:	2200      	movs	r2, #0
{
 800515c:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 0);
 800515e:	2101      	movs	r1, #1
 8005160:	481a      	ldr	r0, [pc, #104]	; (80051cc <PA_Initialize+0x74>)
 8005162:	f7fb fd9d 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 0);
 8005166:	2200      	movs	r2, #0
 8005168:	2102      	movs	r1, #2
 800516a:	4818      	ldr	r0, [pc, #96]	; (80051cc <PA_Initialize+0x74>)
 800516c:	f7fb fd98 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005170:	2001      	movs	r0, #1
 8005172:	f7fb fa81 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 1);
 8005176:	2201      	movs	r2, #1
 8005178:	4814      	ldr	r0, [pc, #80]	; (80051cc <PA_Initialize+0x74>)
 800517a:	4611      	mov	r1, r2
 800517c:	f7fb fd90 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005180:	2001      	movs	r0, #1
 8005182:	f7fb fa79 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 1);
 8005186:	2201      	movs	r2, #1
 8005188:	2102      	movs	r1, #2
 800518a:	4810      	ldr	r0, [pc, #64]	; (80051cc <PA_Initialize+0x74>)
 800518c:	f7fb fd88 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_Delay(10); // ???
 8005190:	200a      	movs	r0, #10
 8005192:	f7fb fa71 	bl	8000678 <HAL_Delay>
  PA_RegisterWrite32(0x4F, 0x00000007);
 8005196:	2107      	movs	r1, #7
 8005198:	204f      	movs	r0, #79	; 0x4f
 800519a:	f7ff ff91 	bl	80050c0 <PA_RegisterWrite32>
  PA_RegisterWrite8(0x1B, 0x00);
 800519e:	2100      	movs	r1, #0
 80051a0:	201b      	movs	r0, #27
 80051a2:	f7ff ff59 	bl	8005058 <PA_RegisterWrite8>
  PA_RegisterWrite8(0x00, 0x6C);
 80051a6:	216c      	movs	r1, #108	; 0x6c
 80051a8:	2000      	movs	r0, #0
 80051aa:	f7ff ff55 	bl	8005058 <PA_RegisterWrite8>
  if (HeadphoneMode)
 80051ae:	b15c      	cbz	r4, 80051c8 <PA_Initialize+0x70>
    PA_RegisterWrite8(0x05, 0x01); // !!! Is this necessary?
 80051b0:	2101      	movs	r1, #1
 80051b2:	2005      	movs	r0, #5
 80051b4:	f7ff ff50 	bl	8005058 <PA_RegisterWrite8>
    PA_RegisterWrite8(0x05, 0x13); // 0x13 or 0x1B. But 0x1B gives background noise and distortion.
 80051b8:	2113      	movs	r1, #19
    PA_RegisterWrite8(0x05, 0x00);
 80051ba:	2005      	movs	r0, #5
 80051bc:	f7ff ff4c 	bl	8005058 <PA_RegisterWrite8>
}
 80051c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PA_Mute();
 80051c4:	f7ff bfc2 	b.w	800514c <PA_Mute>
    PA_RegisterWrite8(0x05, 0x00);
 80051c8:	4621      	mov	r1, r4
 80051ca:	e7f6      	b.n	80051ba <PA_Initialize+0x62>
 80051cc:	40020c00 	.word	0x40020c00

080051d0 <PA_ReadPWMLevelMeter>:
{
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	b086      	sub	sp, #24
  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, 0x6B, 1, (uint8_t *)&Value_ByteReversed, 4, 1000), "HAL_I2C_Mem_Read");
 80051d4:	2304      	movs	r3, #4
{
 80051d6:	460c      	mov	r4, r1
  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, 0x6B, 1, (uint8_t *)&Value_ByteReversed, 4, 1000), "HAL_I2C_Mem_Read");
 80051d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051dc:	ae05      	add	r6, sp, #20
{
 80051de:	4605      	mov	r5, r0
  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, 0x6B, 1, (uint8_t *)&Value_ByteReversed, 4, 1000), "HAL_I2C_Mem_Read");
 80051e0:	226b      	movs	r2, #107	; 0x6b
 80051e2:	4811      	ldr	r0, [pc, #68]	; (8005228 <PA_ReadPWMLevelMeter+0x58>)
 80051e4:	9600      	str	r6, [sp, #0]
 80051e6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80051ea:	2301      	movs	r3, #1
 80051ec:	2154      	movs	r1, #84	; 0x54
 80051ee:	f7fc f94b 	bl	8001488 <HAL_I2C_Mem_Read>
  if (Value != HAL_OK)
 80051f2:	b108      	cbz	r0, 80051f8 <PA_ReadPWMLevelMeter+0x28>
 80051f4:	f7ff fd8e 	bl	8004d14 <HandleHALResult.part.0>
  *pLeft = ReverseBytes(Value_ByteReversed);
 80051f8:	9b05      	ldr	r3, [sp, #20]
  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, 0x6C, 1, (uint8_t *)&Value_ByteReversed, 4, 1000), "HAL_I2C_Mem_Read");
 80051fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051fe:	2154      	movs	r1, #84	; 0x54
 8005200:	4809      	ldr	r0, [pc, #36]	; (8005228 <PA_ReadPWMLevelMeter+0x58>)
 8005202:	ba1b      	rev	r3, r3
 8005204:	9600      	str	r6, [sp, #0]
  *pLeft = ReverseBytes(Value_ByteReversed);
 8005206:	602b      	str	r3, [r5, #0]
  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, 0x6C, 1, (uint8_t *)&Value_ByteReversed, 4, 1000), "HAL_I2C_Mem_Read");
 8005208:	2304      	movs	r3, #4
 800520a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800520e:	2301      	movs	r3, #1
 8005210:	226c      	movs	r2, #108	; 0x6c
 8005212:	f7fc f939 	bl	8001488 <HAL_I2C_Mem_Read>
  if (Value != HAL_OK)
 8005216:	b108      	cbz	r0, 800521c <PA_ReadPWMLevelMeter+0x4c>
 8005218:	f7ff fd7c 	bl	8004d14 <HandleHALResult.part.0>
  *pRight = ReverseBytes(Value_ByteReversed);
 800521c:	9b05      	ldr	r3, [sp, #20]
 800521e:	ba1b      	rev	r3, r3
 8005220:	6023      	str	r3, [r4, #0]
}
 8005222:	b006      	add	sp, #24
 8005224:	bd70      	pop	{r4, r5, r6, pc}
 8005226:	bf00      	nop
 8005228:	20000c10 	.word	0x20000c10

0800522c <RGB_SetNumber>:
{
 800522c:	b570      	push	{r4, r5, r6, lr}
  if (RGB_pData)
 800522e:	4d0c      	ldr	r5, [pc, #48]	; (8005260 <RGB_SetNumber+0x34>)
{
 8005230:	4604      	mov	r4, r0
  if (RGB_pData)
 8005232:	6828      	ldr	r0, [r5, #0]
 8005234:	b128      	cbz	r0, 8005242 <RGB_SetNumber+0x16>
    free(RGB_pData);
 8005236:	f001 feff 	bl	8007038 <free>
    RGB_pData = NULL;
 800523a:	2300      	movs	r3, #0
    RGB_Number = 0;
 800523c:	4a09      	ldr	r2, [pc, #36]	; (8005264 <RGB_SetNumber+0x38>)
    RGB_pData = NULL;
 800523e:	602b      	str	r3, [r5, #0]
    RGB_Number = 0;
 8005240:	8013      	strh	r3, [r2, #0]
  if (Value)
 8005242:	b164      	cbz	r4, 800525e <RGB_SetNumber+0x32>
    NumPWMCycles = RGB_NumPWMCyclesForReset + 3 * 8 * Value + 1;
 8005244:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    RGB_pData_NumItems = NumPWMCycles;
 8005248:	4b07      	ldr	r3, [pc, #28]	; (8005268 <RGB_SetNumber+0x3c>)
    RGB_pData = calloc(RGB_pData_NumItems, 2);
 800524a:	2102      	movs	r1, #2
    NumPWMCycles = RGB_NumPWMCyclesForReset + 3 * 8 * Value + 1;
 800524c:	b2a6      	uxth	r6, r4
 800524e:	00c0      	lsls	r0, r0, #3
 8005250:	3029      	adds	r0, #41	; 0x29
    RGB_pData_NumItems = NumPWMCycles;
 8005252:	8018      	strh	r0, [r3, #0]
    RGB_pData = calloc(RGB_pData_NumItems, 2);
 8005254:	f001 febc 	bl	8006fd0 <calloc>
    RGB_Number = Value;
 8005258:	4b02      	ldr	r3, [pc, #8]	; (8005264 <RGB_SetNumber+0x38>)
    RGB_pData = calloc(RGB_pData_NumItems, 2);
 800525a:	6028      	str	r0, [r5, #0]
    RGB_Number = Value;
 800525c:	801e      	strh	r6, [r3, #0]
}
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	20000880 	.word	0x20000880
 8005264:	2000087e 	.word	0x2000087e
 8005268:	20000884 	.word	0x20000884

0800526c <RGB_Begin>:
{
 800526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RGB_DataIndex = 0;
 8005270:	4d0c      	ldr	r5, [pc, #48]	; (80052a4 <RGB_Begin+0x38>)
 8005272:	2600      	movs	r6, #0
 8005274:	2428      	movs	r4, #40	; 0x28
    if (RGB_DataIndex >= RGB_pData_NumItems)
 8005276:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80052ac <RGB_Begin+0x40>
    RGB_pData[RGB_DataIndex++] = 0;
 800527a:	4f0b      	ldr	r7, [pc, #44]	; (80052a8 <RGB_Begin+0x3c>)
  RGB_DataIndex = 0;
 800527c:	802e      	strh	r6, [r5, #0]
    if (RGB_DataIndex >= RGB_pData_NumItems)
 800527e:	882a      	ldrh	r2, [r5, #0]
 8005280:	f8b8 3000 	ldrh.w	r3, [r8]
 8005284:	429a      	cmp	r2, r3
 8005286:	d301      	bcc.n	800528c <RGB_Begin+0x20>
      Error_Handler();
 8005288:	f001 fa46 	bl	8006718 <Error_Handler>
    RGB_pData[RGB_DataIndex++] = 0;
 800528c:	882b      	ldrh	r3, [r5, #0]
  for (Index = 0; Index < RGB_NumPWMCyclesForReset; ++Index)
 800528e:	3c01      	subs	r4, #1
    RGB_pData[RGB_DataIndex++] = 0;
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	1c59      	adds	r1, r3, #1
  for (Index = 0; Index < RGB_NumPWMCyclesForReset; ++Index)
 8005294:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    RGB_pData[RGB_DataIndex++] = 0;
 8005298:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
 800529c:	8029      	strh	r1, [r5, #0]
  for (Index = 0; Index < RGB_NumPWMCyclesForReset; ++Index)
 800529e:	d1ee      	bne.n	800527e <RGB_Begin+0x12>
}
 80052a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a4:	2000087c 	.word	0x2000087c
 80052a8:	20000880 	.word	0x20000880
 80052ac:	20000884 	.word	0x20000884

080052b0 <RGB_AppendColour>:

void RGB_AppendColour(uint32_t Color)
{
 80052b0:	b510      	push	{r4, lr}
 80052b2:	4604      	mov	r4, r0
  RGB_AppendColourComponent(Color >> 8);
 80052b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80052b8:	f7ff fd38 	bl	8004d2c <RGB_AppendColourComponent>
  RGB_AppendColourComponent(Color);
 80052bc:	b2e0      	uxtb	r0, r4
 80052be:	f7ff fd35 	bl	8004d2c <RGB_AppendColourComponent>
  RGB_AppendColourComponent(Color >> 16);
 80052c2:	f3c4 4007 	ubfx	r0, r4, #16, #8
}
 80052c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  RGB_AppendColourComponent(Color >> 16);
 80052ca:	f7ff bd2f 	b.w	8004d2c <RGB_AppendColourComponent>
	...

080052d0 <RGB_End>:

void RGB_End()
{
 80052d0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef HALStatus;

  RGB_pData[RGB_DataIndex++] = 0;
 80052d2:	4c10      	ldr	r4, [pc, #64]	; (8005314 <RGB_End+0x44>)
 80052d4:	2000      	movs	r0, #0
 80052d6:	4d10      	ldr	r5, [pc, #64]	; (8005318 <RGB_End+0x48>)
 80052d8:	8822      	ldrh	r2, [r4, #0]
 80052da:	6829      	ldr	r1, [r5, #0]
 80052dc:	1c53      	adds	r3, r2, #1
 80052de:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
  // It might be better to leave the line high, to reduce power dissipation in the BS170 / 1K voltage level shifter.
  // However, it doesn't work reliably...
  //RGBData[RGBDataIndex++] = 270;

  if (RGB_DataIndex != RGB_pData_NumItems) // Check that the array was the correct size.
 80052e2:	4a0e      	ldr	r2, [pc, #56]	; (800531c <RGB_End+0x4c>)
  RGB_pData[RGB_DataIndex++] = 0;
 80052e4:	b29b      	uxth	r3, r3
  if (RGB_DataIndex != RGB_pData_NumItems) // Check that the array was the correct size.
 80052e6:	8812      	ldrh	r2, [r2, #0]
  RGB_pData[RGB_DataIndex++] = 0;
 80052e8:	8023      	strh	r3, [r4, #0]
  if (RGB_DataIndex != RGB_pData_NumItems) // Check that the array was the correct size.
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d001      	beq.n	80052f2 <RGB_End+0x22>
    Error_Handler();
 80052ee:	f001 fa13 	bl	8006718 <Error_Handler>

  HALStatus = HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)RGB_pData, RGB_DataIndex);
 80052f2:	8823      	ldrh	r3, [r4, #0]
 80052f4:	2100      	movs	r1, #0
 80052f6:	682a      	ldr	r2, [r5, #0]
 80052f8:	4809      	ldr	r0, [pc, #36]	; (8005320 <RGB_End+0x50>)
 80052fa:	f7fe fa7f 	bl	80037fc <HAL_TIM_PWM_Start_DMA>
  if (HALStatus != HAL_OK)
 80052fe:	b108      	cbz	r0, 8005304 <RGB_End+0x34>
    Error_Handler();
 8005300:	f001 fa0a 	bl	8006718 <Error_Handler>

  do {} while (htim1.hdma[TIM_DMA_ID_CC1]->State == HAL_DMA_STATE_BUSY);
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <RGB_End+0x50>)
 8005306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005308:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800530c:	2b02      	cmp	r3, #2
 800530e:	d0fb      	beq.n	8005308 <RGB_End+0x38>
}
 8005310:	bd38      	pop	{r3, r4, r5, pc}
 8005312:	bf00      	nop
 8005314:	2000087c 	.word	0x2000087c
 8005318:	20000880 	.word	0x20000880
 800531c:	20000884 	.word	0x20000884
 8005320:	20001014 	.word	0x20001014

08005324 <stream_create>:
#include "PJB_StreamUtils.h"

static void ensure_space(Stream *stream, uint16_t required_space);

Stream *stream_create()
{
 8005324:	b508      	push	{r3, lr}
	Stream *stream = malloc(sizeof(Stream));
 8005326:	208c      	movs	r0, #140	; 0x8c
 8005328:	f001 fe7e 	bl	8007028 <malloc>
	stream->temp_size = 0;
 800532c:	2200      	movs	r2, #0
 800532e:	f8a0 2080 	strh.w	r2, [r0, #128]	; 0x80
	stream->data_size = 2;
	stream->data = NULL;
 8005332:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	stream->data_size = 2;
 8005336:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800533a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
	stream->read_address = 2;
	return stream;
}
 800533e:	bd08      	pop	{r3, pc}

08005340 <stream_load>:

Stream *stream_load(uint8_t *data, uint16_t size)
{
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4604      	mov	r4, r0
	Stream *stream = malloc(sizeof(Stream));
 8005344:	208c      	movs	r0, #140	; 0x8c
{
 8005346:	460d      	mov	r5, r1
	Stream *stream = malloc(sizeof(Stream));
 8005348:	f001 fe6e 	bl	8007028 <malloc>
	stream->temp_size = 0;
 800534c:	2200      	movs	r2, #0
	stream->data_size = size;
	stream->data = data;
 800534e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
	stream->data_size = size;
 8005352:	f8a0 5088 	strh.w	r5, [r0, #136]	; 0x88
	stream->temp_size = 0;
 8005356:	f8a0 2080 	strh.w	r2, [r0, #128]	; 0x80
	stream->read_address = 2;
 800535a:	2202      	movs	r2, #2
 800535c:	f8a0 208a 	strh.w	r2, [r0, #138]	; 0x8a
	return stream;
}
 8005360:	bd38      	pop	{r3, r4, r5, pc}

08005362 <stream_free>:

void stream_free(Stream *stream)
{
 8005362:	b510      	push	{r4, lr}
	if (!stream)
 8005364:	4604      	mov	r4, r0
 8005366:	b148      	cbz	r0, 800537c <stream_free+0x1a>
		return;

	if (stream->data)
 8005368:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800536c:	b108      	cbz	r0, 8005372 <stream_free+0x10>
		free(stream->data);
 800536e:	f001 fe63 	bl	8007038 <free>

	free(stream);
 8005372:	4620      	mov	r0, r4
}
 8005374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free(stream);
 8005378:	f001 be5e 	b.w	8007038 <free>
}
 800537c:	bd10      	pop	{r4, pc}

0800537e <stream_read_uint8>:
	stream->temp_size += size;
}

uint8_t stream_read_uint8(Stream *stream)
{
	return stream->data[stream->read_address++];
 800537e:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
 8005382:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8005386:	1c59      	adds	r1, r3, #1
 8005388:	f8a0 108a 	strh.w	r1, [r0, #138]	; 0x8a
}
 800538c:	5cd0      	ldrb	r0, [r2, r3]
 800538e:	4770      	bx	lr

08005390 <stream_read_uint32>:
}

uint32_t stream_read_uint32(Stream *stream)
{
	uint32_t value = 0;
	value |= stream->data[stream->read_address++];
 8005390:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
{
 8005394:	b5f0      	push	{r4, r5, r6, r7, lr}
	value |= stream->data[stream->read_address++];
 8005396:	1c51      	adds	r1, r2, #1
	value |= (uint32_t) stream->data[stream->read_address++] << 8;
 8005398:	1c95      	adds	r5, r2, #2
	value |= stream->data[stream->read_address++];
 800539a:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800539e:	b289      	uxth	r1, r1
	value |= (uint32_t) stream->data[stream->read_address++] << 8;
 80053a0:	b2ad      	uxth	r5, r5
	value |= stream->data[stream->read_address++];
 80053a2:	f8a0 108a 	strh.w	r1, [r0, #138]	; 0x8a
 80053a6:	5ca6      	ldrb	r6, [r4, r2]
	value |= (uint32_t) stream->data[stream->read_address++] << 8;
 80053a8:	f8a0 508a 	strh.w	r5, [r0, #138]	; 0x8a
 80053ac:	5c67      	ldrb	r7, [r4, r1]
	value |= (uint32_t) stream->data[stream->read_address++] << 16;
 80053ae:	1cd1      	adds	r1, r2, #3
	value |= (uint32_t) stream->data[stream->read_address++] << 24;
 80053b0:	3204      	adds	r2, #4
	value |= (uint32_t) stream->data[stream->read_address++] << 16;
 80053b2:	b289      	uxth	r1, r1
 80053b4:	f8a0 108a 	strh.w	r1, [r0, #138]	; 0x8a
 80053b8:	5d63      	ldrb	r3, [r4, r5]
	value |= (uint32_t) stream->data[stream->read_address++] << 24;
 80053ba:	f8a0 208a 	strh.w	r2, [r0, #138]	; 0x8a
	value |= (uint32_t) stream->data[stream->read_address++] << 16;
 80053be:	041b      	lsls	r3, r3, #16
	value |= (uint32_t) stream->data[stream->read_address++] << 24;
 80053c0:	5c60      	ldrb	r0, [r4, r1]
	value |= (uint32_t) stream->data[stream->read_address++] << 16;
 80053c2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80053c6:	4333      	orrs	r3, r6
	return value;
}
 80053c8:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80053cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053ce <stream_read_bytes>:

void stream_read_bytes(Stream *stream, uint8_t *data, uint16_t size)
{
 80053ce:	b538      	push	{r3, r4, r5, lr}
 80053d0:	4604      	mov	r4, r0
 80053d2:	4608      	mov	r0, r1
 80053d4:	4615      	mov	r5, r2
	memcpy(data, stream->data + stream->read_address, size);
 80053d6:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 80053da:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80053de:	4419      	add	r1, r3
 80053e0:	f001 fe32 	bl	8007048 <memcpy>
	stream->read_address += size;
 80053e4:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 80053e8:	4415      	add	r5, r2
 80053ea:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
}
 80053ee:	bd38      	pop	{r3, r4, r5, pc}

080053f0 <stream_flush>:
	stream_flush(stream);
}

void stream_flush(Stream *stream)
{
	stream->data = realloc(stream->data, stream->data_size + stream->temp_size);
 80053f0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80053f4:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
{
 80053f8:	b510      	push	{r4, lr}
 80053fa:	4604      	mov	r4, r0
	stream->data = realloc(stream->data, stream->data_size + stream->temp_size);
 80053fc:	4419      	add	r1, r3
 80053fe:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8005402:	f002 fb6f 	bl	8007ae4 <realloc>
	memcpy(stream->data + stream->data_size, stream->temp, stream->temp_size);
 8005406:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 800540a:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800540e:	4621      	mov	r1, r4
	stream->data = realloc(stream->data, stream->data_size + stream->temp_size);
 8005410:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	memcpy(stream->data + stream->data_size, stream->temp, stream->temp_size);
 8005414:	4418      	add	r0, r3
 8005416:	f001 fe17 	bl	8007048 <memcpy>
	stream->data_size += stream->temp_size;
 800541a:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800541e:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 8005422:	4413      	add	r3, r2
	stream->temp_size = 0;
 8005424:	2200      	movs	r2, #0
	stream->data_size += stream->temp_size;
 8005426:	b29b      	uxth	r3, r3
	stream->temp_size = 0;
 8005428:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80

	stream->data[0] = stream->data_size & 0xFF;
 800542c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	stream->data_size += stream->temp_size;
 8005430:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
	stream->data[0] = stream->data_size & 0xFF;
 8005434:	7013      	strb	r3, [r2, #0]
	stream->data[1] = stream->data_size >> 8;
 8005436:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 800543a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800543e:	0a1b      	lsrs	r3, r3, #8
 8005440:	7053      	strb	r3, [r2, #1]
}
 8005442:	bd10      	pop	{r4, pc}

08005444 <ensure_space>:
	if (stream->temp_size + required_space <= BUFFER_SIZE)
 8005444:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8005448:	4419      	add	r1, r3
 800544a:	2980      	cmp	r1, #128	; 0x80
 800544c:	dd01      	ble.n	8005452 <ensure_space+0xe>
	stream_flush(stream);
 800544e:	f7ff bfcf 	b.w	80053f0 <stream_flush>
}
 8005452:	4770      	bx	lr

08005454 <stream_write_uint8>:
{
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4604      	mov	r4, r0
 8005458:	460d      	mov	r5, r1
	ensure_space(stream, 1);
 800545a:	2101      	movs	r1, #1
 800545c:	f7ff fff2 	bl	8005444 <ensure_space>
	stream->temp[stream->temp_size++] = value;
 8005460:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 800546a:	54e5      	strb	r5, [r4, r3]
}
 800546c:	bd38      	pop	{r3, r4, r5, pc}

0800546e <stream_write_uint32>:
{
 800546e:	b538      	push	{r3, r4, r5, lr}
 8005470:	4604      	mov	r4, r0
 8005472:	460d      	mov	r5, r1
	ensure_space(stream, 4);
 8005474:	2104      	movs	r1, #4
 8005476:	f7ff ffe5 	bl	8005444 <ensure_space>
	stream->temp[stream->temp_size++] = value & 0xFF;
 800547a:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
	stream->temp[stream->temp_size++] = (value >> 8) & 0xFF;
 800547e:	0a29      	lsrs	r1, r5, #8
	stream->temp[stream->temp_size++] = value & 0xFF;
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	54e5      	strb	r5, [r4, r3]
	stream->temp[stream->temp_size++] = (value >> 8) & 0xFF;
 8005484:	b292      	uxth	r2, r2
 8005486:	54a1      	strb	r1, [r4, r2]
 8005488:	1c9a      	adds	r2, r3, #2
	stream->temp[stream->temp_size++] = (value >> 16) & 0xFF;
 800548a:	0c29      	lsrs	r1, r5, #16
 800548c:	b292      	uxth	r2, r2
	stream->temp[stream->temp_size++] = value >> 24;
 800548e:	0e2d      	lsrs	r5, r5, #24
	stream->temp[stream->temp_size++] = (value >> 16) & 0xFF;
 8005490:	54a1      	strb	r1, [r4, r2]
	stream->temp[stream->temp_size++] = value >> 24;
 8005492:	1d1a      	adds	r2, r3, #4
	stream->temp[stream->temp_size++] = (value >> 16) & 0xFF;
 8005494:	3303      	adds	r3, #3
	stream->temp[stream->temp_size++] = value >> 24;
 8005496:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 800549a:	b29b      	uxth	r3, r3
 800549c:	54e5      	strb	r5, [r4, r3]
}
 800549e:	bd38      	pop	{r3, r4, r5, pc}

080054a0 <stream_write_bytes>:
	if (size > BUFFER_SIZE)
 80054a0:	2a80      	cmp	r2, #128	; 0x80
{
 80054a2:	b570      	push	{r4, r5, r6, lr}
 80054a4:	4605      	mov	r5, r0
 80054a6:	460e      	mov	r6, r1
 80054a8:	4614      	mov	r4, r2
	if (size > BUFFER_SIZE)
 80054aa:	d80e      	bhi.n	80054ca <stream_write_bytes+0x2a>
	ensure_space(stream, size);
 80054ac:	4611      	mov	r1, r2
 80054ae:	f7ff ffc9 	bl	8005444 <ensure_space>
	memcpy(stream->temp + stream->temp_size, data, size);
 80054b2:	f8b5 0080 	ldrh.w	r0, [r5, #128]	; 0x80
 80054b6:	4622      	mov	r2, r4
 80054b8:	4631      	mov	r1, r6
 80054ba:	4428      	add	r0, r5
 80054bc:	f001 fdc4 	bl	8007048 <memcpy>
	stream->temp_size += size;
 80054c0:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
 80054c4:	4414      	add	r4, r2
 80054c6:	f8a5 4080 	strh.w	r4, [r5, #128]	; 0x80
}
 80054ca:	bd70      	pop	{r4, r5, r6, pc}

080054cc <si468x_reset>:

Interrupt_Status_t Interrupt_Status;

void si468x_reset(uint8_t Value)
{
	HAL_GPIO_WritePin(SI_NRST_GPIO_Port, SI_NRST_Pin, Value ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80054cc:	fab0 f280 	clz	r2, r0
 80054d0:	2140      	movs	r1, #64	; 0x40
 80054d2:	4802      	ldr	r0, [pc, #8]	; (80054dc <si468x_reset+0x10>)
 80054d4:	0952      	lsrs	r2, r2, #5
 80054d6:	f7fb bbe3 	b.w	8000ca0 <HAL_GPIO_WritePin>
 80054da:	bf00      	nop
 80054dc:	40020400 	.word	0x40020400

080054e0 <si468x_interrupt>:
//      {
//        if (GPIO_Pin == SI_INT_Pin)
//          si468x_interrupt();
//      }
{
	update_interrupts = 1;
 80054e0:	4b01      	ldr	r3, [pc, #4]	; (80054e8 <si468x_interrupt+0x8>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	701a      	strb	r2, [r3, #0]
}
 80054e6:	4770      	bx	lr
 80054e8:	20000897 	.word	0x20000897

080054ec <si468x_read_response>:
	uint8_t error = si468x_read_response(read_buffer, 4);
	return error;
}

uint8_t si468x_read_response(uint8_t *response_buffer, uint16_t response_size)
{
 80054ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t command = RD_REPLY;
 80054ee:	2300      	movs	r3, #0
{
 80054f0:	4604      	mov	r4, r0
 80054f2:	460d      	mov	r5, r1
	I2C_write(Si4684_ADDRESS, &command, 1);
 80054f4:	2201      	movs	r2, #1
 80054f6:	f10d 0107 	add.w	r1, sp, #7
 80054fa:	2064      	movs	r0, #100	; 0x64
	uint8_t command = RD_REPLY;
 80054fc:	f88d 3007 	strb.w	r3, [sp, #7]
	I2C_write(Si4684_ADDRESS, &command, 1);
 8005500:	f7ff fc4a 	bl	8004d98 <I2C_write>
	I2C_read(Si4684_ADDRESS, response_buffer, response_size);
 8005504:	462a      	mov	r2, r5
 8005506:	4621      	mov	r1, r4
 8005508:	2064      	movs	r0, #100	; 0x64
 800550a:	f7ff fc5b 	bl	8004dc4 <I2C_read>
	return response_buffer[0] & 0x40 ? 1 : 0;
 800550e:	7820      	ldrb	r0, [r4, #0]
}
 8005510:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8005514:	b003      	add	sp, #12
 8005516:	bd30      	pop	{r4, r5, pc}

08005518 <si468x_update_interrupts>:
{
 8005518:	b507      	push	{r0, r1, r2, lr}
		si468x_read_response(&status_byte, 1); // !!!
 800551a:	2101      	movs	r1, #1
 800551c:	f10d 0007 	add.w	r0, sp, #7
 8005520:	f7ff ffe4 	bl	80054ec <si468x_read_response>
	while (status_byte == 0x00)
 8005524:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f6      	beq.n	800551a <si468x_update_interrupts+0x2>
	Interrupt_Status.interrupt_register = status_byte;
 800552c:	4a03      	ldr	r2, [pc, #12]	; (800553c <si468x_update_interrupts+0x24>)
 800552e:	7013      	strb	r3, [r2, #0]
	update_interrupts = 0;
 8005530:	2200      	movs	r2, #0
 8005532:	4b03      	ldr	r3, [pc, #12]	; (8005540 <si468x_update_interrupts+0x28>)
 8005534:	701a      	strb	r2, [r3, #0]
}
 8005536:	b003      	add	sp, #12
 8005538:	f85d fb04 	ldr.w	pc, [sp], #4
 800553c:	20000890 	.word	0x20000890
 8005540:	20000897 	.word	0x20000897

08005544 <si468x_wait_for_interrupt>:
{
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	4604      	mov	r4, r0
		if (update_interrupts)
 8005548:	4d09      	ldr	r5, [pc, #36]	; (8005570 <si468x_wait_for_interrupt+0x2c>)
		status = (Interrupt_Status.interrupt_register >> interrupt) & 0x01;
 800554a:	4e0a      	ldr	r6, [pc, #40]	; (8005574 <si468x_wait_for_interrupt+0x30>)
		if (update_interrupts)
 800554c:	782b      	ldrb	r3, [r5, #0]
 800554e:	b10b      	cbz	r3, 8005554 <si468x_wait_for_interrupt+0x10>
			si468x_update_interrupts();
 8005550:	f7ff ffe2 	bl	8005518 <si468x_update_interrupts>
		status = (Interrupt_Status.interrupt_register >> interrupt) & 0x01;
 8005554:	7832      	ldrb	r2, [r6, #0]
		if (interrupt == CTS)
 8005556:	2c07      	cmp	r4, #7
		status = (Interrupt_Status.interrupt_register >> interrupt) & 0x01;
 8005558:	fa42 f304 	asr.w	r3, r2, r4
			status |= (Interrupt_Status.interrupt_register >> ERR_CMD) & 0x01; //!!!
 800555c:	bf08      	it	eq
 800555e:	f3c2 1280 	ubfxeq	r2, r2, #6, #1
		status = (Interrupt_Status.interrupt_register >> interrupt) & 0x01;
 8005562:	f003 0301 	and.w	r3, r3, #1
			status |= (Interrupt_Status.interrupt_register >> ERR_CMD) & 0x01; //!!!
 8005566:	bf08      	it	eq
 8005568:	4313      	orreq	r3, r2
	} while (!status);
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0ee      	beq.n	800554c <si468x_wait_for_interrupt+0x8>
}
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	20000897 	.word	0x20000897
 8005574:	20000890 	.word	0x20000890

08005578 <si468x_execute_ext>:
{
 8005578:	b510      	push	{r4, lr}
	if (use_interrupt)
 800557a:	460c      	mov	r4, r1
 800557c:	b121      	cbz	r1, 8005588 <si468x_execute_ext+0x10>
		Interrupt_Status.CTS = 0;
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <si468x_execute_ext+0x30>)
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	f36f 12c7 	bfc	r2, #7, #1
 8005586:	701a      	strb	r2, [r3, #0]
	I2C_write(Si4684_ADDRESS, command->data, command->size);
 8005588:	8802      	ldrh	r2, [r0, #0]
 800558a:	6841      	ldr	r1, [r0, #4]
 800558c:	2064      	movs	r0, #100	; 0x64
 800558e:	f7ff fc03 	bl	8004d98 <I2C_write>
	if (use_interrupt)
 8005592:	b114      	cbz	r4, 800559a <si468x_execute_ext+0x22>
		si468x_wait_for_interrupt(CTS);
 8005594:	2007      	movs	r0, #7
 8005596:	f7ff ffd5 	bl	8005544 <si468x_wait_for_interrupt>
	uint8_t error = si468x_read_response(read_buffer, 4);
 800559a:	2104      	movs	r1, #4
 800559c:	4803      	ldr	r0, [pc, #12]	; (80055ac <si468x_execute_ext+0x34>)
}
 800559e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uint8_t error = si468x_read_response(read_buffer, 4);
 80055a2:	f7ff bfa3 	b.w	80054ec <si468x_read_response>
 80055a6:	bf00      	nop
 80055a8:	20000890 	.word	0x20000890
 80055ac:	20000893 	.word	0x20000893

080055b0 <si468x_execute>:
	return si468x_execute_ext(command, patched);
 80055b0:	4b01      	ldr	r3, [pc, #4]	; (80055b8 <si468x_execute+0x8>)
 80055b2:	7819      	ldrb	r1, [r3, #0]
 80055b4:	f7ff bfe0 	b.w	8005578 <si468x_execute_ext>
 80055b8:	20000892 	.word	0x20000892

080055bc <si468x_build_command_ext>:
{
	return si468x_build_command_ext(command_id, args, num_args, 0, 0);
}

Si468x_Command *si468x_build_command_ext(uint8_t command_id, uint8_t *args, uint16_t num_args, uint8_t *data, uint16_t data_size)
{
 80055bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055c0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 80055c4:	4680      	mov	r8, r0
	Si468x_Command *command = (Si468x_Command *) malloc(sizeof(Si468x_Command));
 80055c6:	2008      	movs	r0, #8
{
 80055c8:	461e      	mov	r6, r3
 80055ca:	4614      	mov	r4, r2
 80055cc:	9101      	str	r1, [sp, #4]
	Si468x_Command *command = (Si468x_Command *) malloc(sizeof(Si468x_Command));
 80055ce:	f001 fd2b 	bl	8007028 <malloc>
	command->size = 1 + num_args + data_size;
 80055d2:	1c7a      	adds	r2, r7, #1
	Si468x_Command *command = (Si468x_Command *) malloc(sizeof(Si468x_Command));
 80055d4:	4605      	mov	r5, r0
	command->size = 1 + num_args + data_size;
 80055d6:	4422      	add	r2, r4
 80055d8:	b290      	uxth	r0, r2
 80055da:	8028      	strh	r0, [r5, #0]
	command->data = (uint8_t *) malloc(command->size);
 80055dc:	f001 fd24 	bl	8007028 <malloc>
	command->data[0] = command_id;
	memcpy(command->data + 1, args, num_args);
 80055e0:	4622      	mov	r2, r4
	command->data = (uint8_t *) malloc(command->size);
 80055e2:	4681      	mov	r9, r0
	memcpy(command->data + 1 + num_args, data, data_size);
 80055e4:	3401      	adds	r4, #1
	memcpy(command->data + 1, args, num_args);
 80055e6:	9901      	ldr	r1, [sp, #4]
	command->data = (uint8_t *) malloc(command->size);
 80055e8:	6068      	str	r0, [r5, #4]
	command->data[0] = command_id;
 80055ea:	f800 8b01 	strb.w	r8, [r0], #1
	memcpy(command->data + 1, args, num_args);
 80055ee:	f001 fd2b 	bl	8007048 <memcpy>
	memcpy(command->data + 1 + num_args, data, data_size);
 80055f2:	463a      	mov	r2, r7
 80055f4:	4631      	mov	r1, r6
 80055f6:	eb09 0004 	add.w	r0, r9, r4
 80055fa:	f001 fd25 	bl	8007048 <memcpy>
	return command;
}
 80055fe:	4628      	mov	r0, r5
 8005600:	b003      	add	sp, #12
 8005602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005606 <si468x_build_command>:
	return si468x_build_command_ext(command_id, args, num_args, 0, 0);
 8005606:	2300      	movs	r3, #0
{
 8005608:	b507      	push	{r0, r1, r2, lr}
	return si468x_build_command_ext(command_id, args, num_args, 0, 0);
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	f7ff ffd6 	bl	80055bc <si468x_build_command_ext>
}
 8005610:	b003      	add	sp, #12
 8005612:	f85d fb04 	ldr.w	pc, [sp], #4

08005616 <si468x_free_command>:

void si468x_free_command(Si468x_Command *command)
{
 8005616:	b510      	push	{r4, lr}
	if (!command)
 8005618:	4604      	mov	r4, r0
 800561a:	b140      	cbz	r0, 800562e <si468x_free_command+0x18>
		return;
	if (command->data)
 800561c:	6840      	ldr	r0, [r0, #4]
 800561e:	b108      	cbz	r0, 8005624 <si468x_free_command+0xe>
	{
		free(command->data);
 8005620:	f001 fd0a 	bl	8007038 <free>
		command->data = NULL;
	}
	free(command);
 8005624:	4620      	mov	r0, r4
	command = NULL;
}
 8005626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free(command);
 800562a:	f001 bd05 	b.w	8007038 <free>
}
 800562e:	bd10      	pop	{r4, pc}

08005630 <si468x_flash_set_property>:
	uint8_t args[] = {0x10, 0x00, 0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 8005630:	2310      	movs	r3, #16
	Si468x_Command *command = si468x_build_command(FLASH_SET_PROP_LIST, args, 7);
 8005632:	2207      	movs	r2, #7
{
 8005634:	b513      	push	{r0, r1, r4, lr}
	uint8_t args[] = {0x10, 0x00, 0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 8005636:	f88d 0003 	strb.w	r0, [sp, #3]
 800563a:	0a00      	lsrs	r0, r0, #8
 800563c:	f88d 1005 	strb.w	r1, [sp, #5]
 8005640:	0a09      	lsrs	r1, r1, #8
 8005642:	f88d 3000 	strb.w	r3, [sp]
 8005646:	2300      	movs	r3, #0
 8005648:	f88d 0004 	strb.w	r0, [sp, #4]
	Si468x_Command *command = si468x_build_command(FLASH_SET_PROP_LIST, args, 7);
 800564c:	2005      	movs	r0, #5
	uint8_t args[] = {0x10, 0x00, 0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 800564e:	f88d 1006 	strb.w	r1, [sp, #6]
	Si468x_Command *command = si468x_build_command(FLASH_SET_PROP_LIST, args, 7);
 8005652:	4669      	mov	r1, sp
	uint8_t args[] = {0x10, 0x00, 0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 8005654:	f88d 3001 	strb.w	r3, [sp, #1]
 8005658:	f88d 3002 	strb.w	r3, [sp, #2]
	Si468x_Command *command = si468x_build_command(FLASH_SET_PROP_LIST, args, 7);
 800565c:	f7ff ffd3 	bl	8005606 <si468x_build_command>
 8005660:	4604      	mov	r4, r0
	si468x_execute(command);
 8005662:	f7ff ffa5 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 8005666:	4620      	mov	r0, r4
 8005668:	f7ff ffd5 	bl	8005616 <si468x_free_command>
}
 800566c:	b002      	add	sp, #8
 800566e:	bd10      	pop	{r4, pc}

08005670 <si468x_load_init>:
	uint8_t args[] = {0x00};
 8005670:	2300      	movs	r3, #0
	Si468x_Command *command = si468x_build_command(LOAD_INIT, args, 1);
 8005672:	2201      	movs	r2, #1
{
 8005674:	b513      	push	{r0, r1, r4, lr}
	Si468x_Command *command = si468x_build_command(LOAD_INIT, args, 1);
 8005676:	2006      	movs	r0, #6
 8005678:	a901      	add	r1, sp, #4
	uint8_t args[] = {0x00};
 800567a:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(LOAD_INIT, args, 1);
 800567e:	f7ff ffc2 	bl	8005606 <si468x_build_command>
 8005682:	4604      	mov	r4, r0
	si468x_execute(command);
 8005684:	f7ff ff94 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 8005688:	4620      	mov	r0, r4
 800568a:	f7ff ffc4 	bl	8005616 <si468x_free_command>
}
 800568e:	b002      	add	sp, #8
 8005690:	bd10      	pop	{r4, pc}

08005692 <si468x_set_property>:
{
 8005692:	b513      	push	{r0, r1, r4, lr}
	uint8_t args[] = {0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 8005694:	f88d 0001 	strb.w	r0, [sp, #1]
 8005698:	0a00      	lsrs	r0, r0, #8
 800569a:	f88d 1003 	strb.w	r1, [sp, #3]
 800569e:	0a09      	lsrs	r1, r1, #8
 80056a0:	2300      	movs	r3, #0
	Si468x_Command *command = si468x_build_command(SET_PROPERTY, args, 5);
 80056a2:	2205      	movs	r2, #5
	uint8_t args[] = {0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 80056a4:	f88d 0002 	strb.w	r0, [sp, #2]
	Si468x_Command *command = si468x_build_command(SET_PROPERTY, args, 5);
 80056a8:	2013      	movs	r0, #19
	uint8_t args[] = {0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 80056aa:	f88d 1004 	strb.w	r1, [sp, #4]
	Si468x_Command *command = si468x_build_command(SET_PROPERTY, args, 5);
 80056ae:	4669      	mov	r1, sp
	uint8_t args[] = {0x00, property & 0xFF, property >> 8, value & 0xFF, value >> 8};
 80056b0:	f88d 3000 	strb.w	r3, [sp]
	Si468x_Command *command = si468x_build_command(SET_PROPERTY, args, 5);
 80056b4:	f7ff ffa7 	bl	8005606 <si468x_build_command>
 80056b8:	4604      	mov	r4, r0
	si468x_execute(command);
 80056ba:	f7ff ff79 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 80056be:	4620      	mov	r0, r4
 80056c0:	f7ff ffa9 	bl	8005616 <si468x_free_command>
}
 80056c4:	b002      	add	sp, #8
 80056c6:	bd10      	pop	{r4, pc}

080056c8 <si468x_init>:
	current_mode = mode;
 80056c8:	4b7c      	ldr	r3, [pc, #496]	; (80058bc <si468x_init+0x1f4>)
{
 80056ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056ce:	4604      	mov	r4, r0
 80056d0:	b087      	sub	sp, #28
	current_mode = mode;
 80056d2:	7018      	strb	r0, [r3, #0]
	if (mode == Si468x_MODE_None) // JSB added.
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f000 80ee 	beq.w	80058b6 <si468x_init+0x1ee>
	si468x_reset(1);
 80056da:	2001      	movs	r0, #1
	patched = 0; // JSB Added.
 80056dc:	4f78      	ldr	r7, [pc, #480]	; (80058c0 <si468x_init+0x1f8>)
	si468x_reset(1);
 80056de:	f7ff fef5 	bl	80054cc <si468x_reset>
	HAL_Delay(10);
 80056e2:	200a      	movs	r0, #10
 80056e4:	f7fa ffc8 	bl	8000678 <HAL_Delay>
  si468x_reset(0);
 80056e8:	2000      	movs	r0, #0
 80056ea:	f7ff feef 	bl	80054cc <si468x_reset>
	HAL_Delay(10);
 80056ee:	200a      	movs	r0, #10
 80056f0:	f7fa ffc2 	bl	8000678 <HAL_Delay>
	patched = 0; // JSB Added.
 80056f4:	2300      	movs	r3, #0
	uint8_t args[] =
 80056f6:	aa02      	add	r2, sp, #8
	patched = 0; // JSB Added.
 80056f8:	703b      	strb	r3, [r7, #0]
	uint8_t args[] =
 80056fa:	4b72      	ldr	r3, [pc, #456]	; (80058c4 <si468x_init+0x1fc>)
 80056fc:	4615      	mov	r5, r2
 80056fe:	f103 0c08 	add.w	ip, r3, #8
 8005702:	4698      	mov	r8, r3
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	3308      	adds	r3, #8
 8005708:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800570c:	4616      	mov	r6, r2
 800570e:	4563      	cmp	r3, ip
 8005710:	c603      	stmia	r6!, {r0, r1}
 8005712:	4632      	mov	r2, r6
 8005714:	d1f6      	bne.n	8005704 <si468x_init+0x3c>
 8005716:	6818      	ldr	r0, [r3, #0]
	Si468x_Command *command = si468x_build_command(POWER_UP, args, 15);
 8005718:	220f      	movs	r2, #15
	uint8_t args[] =
 800571a:	8899      	ldrh	r1, [r3, #4]
 800571c:	799b      	ldrb	r3, [r3, #6]
 800571e:	6030      	str	r0, [r6, #0]
	Si468x_Command *command = si468x_build_command(POWER_UP, args, 15);
 8005720:	2001      	movs	r0, #1
	uint8_t args[] =
 8005722:	71b3      	strb	r3, [r6, #6]
 8005724:	80b1      	strh	r1, [r6, #4]
	Si468x_Command *command = si468x_build_command(POWER_UP, args, 15);
 8005726:	4629      	mov	r1, r5
 8005728:	f7ff ff6d 	bl	8005606 <si468x_build_command>
 800572c:	4606      	mov	r6, r0
	si468x_execute(command);
 800572e:	f7ff ff3f 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 8005732:	4630      	mov	r0, r6
	uint8_t args[] = {0x00, 0x00, 0x00};
 8005734:	4e64      	ldr	r6, [pc, #400]	; (80058c8 <si468x_init+0x200>)
	si468x_free_command(command);
 8005736:	f7ff ff6e 	bl	8005616 <si468x_free_command>
	HAL_Delay(10);
 800573a:	200a      	movs	r0, #10
 800573c:	f7fa ff9c 	bl	8000678 <HAL_Delay>
	si468x_load_init();
 8005740:	f7ff ff96 	bl	8005670 <si468x_load_init>
	uint8_t args[] = {0x00, 0x00, 0x00};
 8005744:	78b3      	ldrb	r3, [r6, #2]
 8005746:	f8b8 200f 	ldrh.w	r2, [r8, #15]
	Si468x_Command *command = si468x_build_command_ext(HOST_LOAD, args, 3, minipatch_data, minipatch_size);
 800574a:	4629      	mov	r1, r5
 800574c:	2004      	movs	r0, #4
	uint8_t args[] = {0x00, 0x00, 0x00};
 800574e:	f8ad 2008 	strh.w	r2, [sp, #8]
	Si468x_Command *command = si468x_build_command_ext(HOST_LOAD, args, 3, minipatch_data, minipatch_size);
 8005752:	2203      	movs	r2, #3
	uint8_t args[] = {0x00, 0x00, 0x00};
 8005754:	70ab      	strb	r3, [r5, #2]
	Si468x_Command *command = si468x_build_command_ext(HOST_LOAD, args, 3, minipatch_data, minipatch_size);
 8005756:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	4b5b      	ldr	r3, [pc, #364]	; (80058cc <si468x_init+0x204>)
 800575e:	f7ff ff2d 	bl	80055bc <si468x_build_command_ext>
 8005762:	4681      	mov	r9, r0
	si468x_execute(command);
 8005764:	f7ff ff24 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 8005768:	4648      	mov	r0, r9
 800576a:	f7ff ff54 	bl	8005616 <si468x_free_command>
	HAL_Delay(10);
 800576e:	200a      	movs	r0, #10
 8005770:	f7fa ff82 	bl	8000678 <HAL_Delay>
	si468x_load_init();
 8005774:	f7ff ff7c 	bl	8005670 <si468x_load_init>
	uint8_t args[] = {0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005778:	f8d6 1007 	ldr.w	r1, [r6, #7]
 800577c:	f8d8 0012 	ldr.w	r0, [r8, #18]
 8005780:	462b      	mov	r3, r5
 8005782:	7b72      	ldrb	r2, [r6, #13]
 8005784:	c303      	stmia	r3!, {r0, r1}
 8005786:	f8b6 100b 	ldrh.w	r1, [r6, #11]
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 800578a:	2005      	movs	r0, #5
	uint8_t args[] = {0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800578c:	709a      	strb	r2, [r3, #2]
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 800578e:	220b      	movs	r2, #11
	uint8_t args[] = {0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005790:	8019      	strh	r1, [r3, #0]
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 8005792:	4629      	mov	r1, r5
 8005794:	f7ff ff37 	bl	8005606 <si468x_build_command>
 8005798:	4606      	mov	r6, r0
	si468x_execute(command);
 800579a:	f7ff ff09 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 800579e:	4630      	mov	r0, r6
	patched = 1;
 80057a0:	2601      	movs	r6, #1
	si468x_free_command(command);
 80057a2:	f7ff ff38 	bl	8005616 <si468x_free_command>
	HAL_Delay(15);
 80057a6:	200f      	movs	r0, #15
	patched = 1;
 80057a8:	703e      	strb	r6, [r7, #0]
	HAL_Delay(15);
 80057aa:	f7fa ff65 	bl	8000678 <HAL_Delay>
	si468x_flash_set_property(PROP_FLASH_SPI_CLOCK_FREQ_KHZ, 0x9C40); // Set flash speed to 40MHz
 80057ae:	f649 4140 	movw	r1, #40000	; 0x9c40
 80057b2:	4630      	mov	r0, r6
 80057b4:	f7ff ff3c 	bl	8005630 <si468x_flash_set_property>
	si468x_flash_set_property(PROP_HIGH_SPEED_READ_MAX_FREQ_MHZ, 0x00FF); // Set flash high speed read speed to 127MHz
 80057b8:	21ff      	movs	r1, #255	; 0xff
 80057ba:	f240 1003 	movw	r0, #259	; 0x103
 80057be:	f7ff ff37 	bl	8005630 <si468x_flash_set_property>
	si468x_load_init();
 80057c2:	f7ff ff55 	bl	8005670 <si468x_load_init>
  switch(mode)
 80057c6:	42b4      	cmp	r4, r6
 80057c8:	d04b      	beq.n	8005862 <si468x_init+0x19a>
 80057ca:	2c02      	cmp	r4, #2
 80057cc:	d070      	beq.n	80058b0 <si468x_init+0x1e8>
      Error_Handler();
 80057ce:	f000 ffa3 	bl	8006718 <Error_Handler>
	uint8_t args[] = {0x00};
 80057d2:	2600      	movs	r6, #0
	Si468x_Command *command = si468x_build_command(BOOT, args, 1);
 80057d4:	2201      	movs	r2, #1
 80057d6:	4629      	mov	r1, r5
 80057d8:	2007      	movs	r0, #7
	uint8_t args[] = {0x00};
 80057da:	f88d 6008 	strb.w	r6, [sp, #8]
	Si468x_Command *command = si468x_build_command(BOOT, args, 1);
 80057de:	f7ff ff12 	bl	8005606 <si468x_build_command>
 80057e2:	4605      	mov	r5, r0
	si468x_execute(command);
 80057e4:	f7ff fee4 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 80057e8:	4628      	mov	r0, r5
 80057ea:	f7ff ff14 	bl	8005616 <si468x_free_command>
	si468x_set_property(PROP_INT_CTL_ENABLE, 0x00D1); // Enable CTS, ERR_CMD, STC and DSRV interrupts
 80057ee:	21d1      	movs	r1, #209	; 0xd1
 80057f0:	4630      	mov	r0, r6
 80057f2:	f7ff ff4e 	bl	8005692 <si468x_set_property>
	si468x_set_property(PROP_INT_CTL_REPEAT, 0x0001); // Enable STC interrupt repeat
 80057f6:	2101      	movs	r1, #1
 80057f8:	4608      	mov	r0, r1
 80057fa:	f7ff ff4a 	bl	8005692 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_IO_OUTPUT_SELECT, 0x0000); // I2S set slave (0x8000 for master)
 80057fe:	4631      	mov	r1, r6
 8005800:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005804:	f7ff ff45 	bl	8005692 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_IO_OUTPUT_SAMPLE_RATE, 0xBB80); // I2S set sample rate 48kHz
 8005808:	f64b 3180 	movw	r1, #48000	; 0xbb80
 800580c:	f240 2001 	movw	r0, #513	; 0x201
 8005810:	f7ff ff3f 	bl	8005692 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_IO_OUTPUT_FORMAT, 0x1870); // Set sample size to 24-bit, slot size to 32-bit, and format to I2S
 8005814:	f641 0170 	movw	r1, #6256	; 0x1870
 8005818:	f240 2002 	movw	r0, #514	; 0x202
 800581c:	f7ff ff39 	bl	8005692 <si468x_set_property>
	si468x_set_property(PROP_PIN_CONFIG_ENABLE, 0x8002); // I2S enable
 8005820:	f248 0102 	movw	r1, #32770	; 0x8002
 8005824:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005828:	f7ff ff33 	bl	8005692 <si468x_set_property>
	si468x_set_property(PROP_DAB_TUNE_FE_CFG, 0x0001); // VHFSW
 800582c:	2101      	movs	r1, #1
 800582e:	f241 7012 	movw	r0, #5906	; 0x1712
 8005832:	f7ff ff2e 	bl	8005692 <si468x_set_property>
	si468x_set_property(PROP_FM_RDS_CONFIG, 0x0001); // Enable RDS processor
 8005836:	2101      	movs	r1, #1
 8005838:	f643 4002 	movw	r0, #15362	; 0x3c02
 800583c:	f7ff ff29 	bl	8005692 <si468x_set_property>
	si468x_set_property(PROP_DAB_XPAD_ENABLE, 0x0003); // Enable full PAD and XPAD
 8005840:	2103      	movs	r1, #3
 8005842:	f44f 4034 	mov.w	r0, #46080	; 0xb400
 8005846:	f7ff ff24 	bl	8005692 <si468x_set_property>
	si468x_set_property(PROP_DIGITAL_SERVICE_INT_SOURCE, 0x0001); // Enable DSRVPCKTINT
 800584a:	2101      	movs	r1, #1
 800584c:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8005850:	f7ff ff1f 	bl	8005692 <si468x_set_property>
	if (mode == Si468x_MODE_DAB)
 8005854:	2c02      	cmp	r4, #2
 8005856:	d12e      	bne.n	80058b6 <si468x_init+0x1ee>
}
 8005858:	b007      	add	sp, #28
 800585a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		si468x_DAB_set_freq_list();
 800585e:	f000 b897 	b.w	8005990 <si468x_DAB_set_freq_list>
  switch(mode)
 8005862:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
			(StartAddress >> 8) & 0xFF,
 8005866:	0a11      	lsrs	r1, r2, #8
	uint8_t args[] =
 8005868:	2300      	movs	r3, #0
			(StartAddress >> 16) & 0xFF,
 800586a:	0c12      	lsrs	r2, r2, #16
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 800586c:	2005      	movs	r0, #5
	uint8_t args[] =
 800586e:	f88d 100c 	strb.w	r1, [sp, #12]
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 8005872:	4629      	mov	r1, r5
	uint8_t args[] =
 8005874:	f88d 200d 	strb.w	r2, [sp, #13]
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 8005878:	220b      	movs	r2, #11
	uint8_t args[] =
 800587a:	f88d 3008 	strb.w	r3, [sp, #8]
 800587e:	f88d 3009 	strb.w	r3, [sp, #9]
 8005882:	f88d 300a 	strb.w	r3, [sp, #10]
 8005886:	f88d 300b 	strb.w	r3, [sp, #11]
 800588a:	f88d 300e 	strb.w	r3, [sp, #14]
 800588e:	f88d 300f 	strb.w	r3, [sp, #15]
 8005892:	f88d 3010 	strb.w	r3, [sp, #16]
 8005896:	f88d 3011 	strb.w	r3, [sp, #17]
 800589a:	f88d 3012 	strb.w	r3, [sp, #18]
	Si468x_Command *command = si468x_build_command(FLASH_LOAD, args, 11);
 800589e:	f7ff feb2 	bl	8005606 <si468x_build_command>
 80058a2:	4606      	mov	r6, r0
	si468x_execute(command);
 80058a4:	f7ff fe84 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 80058a8:	4630      	mov	r0, r6
 80058aa:	f7ff feb4 	bl	8005616 <si468x_free_command>
 80058ae:	e790      	b.n	80057d2 <si468x_init+0x10a>
      StartAddress = 0x00092000; // JSB: Hardwired.
 80058b0:	f44f 2212 	mov.w	r2, #598016	; 0x92000
 80058b4:	e7d7      	b.n	8005866 <si468x_init+0x19e>
}
 80058b6:	b007      	add	sp, #28
 80058b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058bc:	20000891 	.word	0x20000891
 80058c0:	20000892 	.word	0x20000892
 80058c4:	08009dd3 	.word	0x08009dd3
 80058c8:	08009de2 	.word	0x08009de2
 80058cc:	20000040 	.word	0x20000040

080058d0 <JSB_si468x_get_current_mode>:

enum Si468x_MODE JSB_si468x_get_current_mode()
{
  return current_mode;
}
 80058d0:	4b01      	ldr	r3, [pc, #4]	; (80058d8 <JSB_si468x_get_current_mode+0x8>)
 80058d2:	7818      	ldrb	r0, [r3, #0]
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000891 	.word	0x20000891

080058dc <si468x_load_service_from_flash>:
}

static DAB_Service *si468x_load_service_from_flash(uint16_t memory_index)
{
	uint16_t stream_size;
	SST25_ReadBlock(4096 * (memory_index + 2), (uint8_t *) &stream_size, 2);
 80058dc:	3002      	adds	r0, #2
 80058de:	2202      	movs	r2, #2
{
 80058e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	SST25_ReadBlock(4096 * (memory_index + 2), (uint8_t *) &stream_size, 2);
 80058e2:	0304      	lsls	r4, r0, #12
{
 80058e4:	b085      	sub	sp, #20
	service->service_id = stream_read_uint32(stream);
	service->service_info_1 = stream_read_uint8(stream);
	service->service_info_2 = stream_read_uint8(stream);
	stream_read_bytes(stream, (uint8_t *) service->name, 16);
	service->components = (DAB_Component**) malloc(service->num_comp * sizeof(DAB_Component*));
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 80058e6:	2700      	movs	r7, #0
	SST25_ReadBlock(4096 * (memory_index + 2), (uint8_t *) &stream_size, 2);
 80058e8:	f10d 010e 	add.w	r1, sp, #14
 80058ec:	4620      	mov	r0, r4
 80058ee:	f7ff f9ef 	bl	8004cd0 <SST25_ReadBlock>
	uint8_t *data = malloc(stream_size);
 80058f2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80058f6:	4610      	mov	r0, r2
 80058f8:	9201      	str	r2, [sp, #4]
 80058fa:	f001 fb95 	bl	8007028 <malloc>
 80058fe:	4605      	mov	r5, r0
	SST25_ReadBlock(4096 * (memory_index + 2), data, stream_size);
 8005900:	9a01      	ldr	r2, [sp, #4]
 8005902:	4601      	mov	r1, r0
 8005904:	4620      	mov	r0, r4
 8005906:	f7ff f9e3 	bl	8004cd0 <SST25_ReadBlock>
	Stream *stream = stream_load(data, stream_size);
 800590a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800590e:	4628      	mov	r0, r5
 8005910:	f7ff fd16 	bl	8005340 <stream_load>
 8005914:	4605      	mov	r5, r0
	DAB_Service *service = malloc(sizeof(DAB_Service));
 8005916:	2020      	movs	r0, #32
 8005918:	f001 fb86 	bl	8007028 <malloc>
 800591c:	4604      	mov	r4, r0
	service->freq_index = stream_read_uint8(stream);
 800591e:	4628      	mov	r0, r5
 8005920:	f7ff fd2d 	bl	800537e <stream_read_uint8>
 8005924:	7020      	strb	r0, [r4, #0]
	service->service_id = stream_read_uint32(stream);
 8005926:	4628      	mov	r0, r5
 8005928:	f7ff fd32 	bl	8005390 <stream_read_uint32>
 800592c:	6060      	str	r0, [r4, #4]
	service->service_info_1 = stream_read_uint8(stream);
 800592e:	4628      	mov	r0, r5
 8005930:	f7ff fd25 	bl	800537e <stream_read_uint8>
 8005934:	7220      	strb	r0, [r4, #8]
	service->service_info_2 = stream_read_uint8(stream);
 8005936:	4628      	mov	r0, r5
 8005938:	f7ff fd21 	bl	800537e <stream_read_uint8>
	stream_read_bytes(stream, (uint8_t *) service->name, 16);
 800593c:	2210      	movs	r2, #16
	service->service_info_2 = stream_read_uint8(stream);
 800593e:	7260      	strb	r0, [r4, #9]
	stream_read_bytes(stream, (uint8_t *) service->name, 16);
 8005940:	4628      	mov	r0, r5
 8005942:	18a1      	adds	r1, r4, r2
 8005944:	f7ff fd43 	bl	80053ce <stream_read_bytes>
	service->components = (DAB_Component**) malloc(service->num_comp * sizeof(DAB_Component*));
 8005948:	7a60      	ldrb	r0, [r4, #9]
 800594a:	f000 000f 	and.w	r0, r0, #15
 800594e:	0080      	lsls	r0, r0, #2
 8005950:	f001 fb6a 	bl	8007028 <malloc>
 8005954:	60e0      	str	r0, [r4, #12]
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 8005956:	7a63      	ldrb	r3, [r4, #9]
 8005958:	b2fa      	uxtb	r2, r7
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	4293      	cmp	r3, r2
 8005960:	d805      	bhi.n	800596e <si468x_load_service_from_flash+0x92>
		DAB_Component *component = malloc(sizeof(DAB_Component));
		component->component_id = stream_read_uint32(stream);
		component->component_info = stream_read_uint8(stream);
		service->components[component_index] = component;
	}
	stream_free(stream);
 8005962:	4628      	mov	r0, r5
 8005964:	f7ff fcfd 	bl	8005362 <stream_free>
	return service;
}
 8005968:	4620      	mov	r0, r4
 800596a:	b005      	add	sp, #20
 800596c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		DAB_Component *component = malloc(sizeof(DAB_Component));
 800596e:	2008      	movs	r0, #8
 8005970:	f001 fb5a 	bl	8007028 <malloc>
 8005974:	4606      	mov	r6, r0
		component->component_id = stream_read_uint32(stream);
 8005976:	4628      	mov	r0, r5
 8005978:	f7ff fd0a 	bl	8005390 <stream_read_uint32>
 800597c:	6030      	str	r0, [r6, #0]
		component->component_info = stream_read_uint8(stream);
 800597e:	4628      	mov	r0, r5
 8005980:	f7ff fcfd 	bl	800537e <stream_read_uint8>
		service->components[component_index] = component;
 8005984:	68e3      	ldr	r3, [r4, #12]
		component->component_info = stream_read_uint8(stream);
 8005986:	7130      	strb	r0, [r6, #4]
		service->components[component_index] = component;
 8005988:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 800598c:	3701      	adds	r7, #1
 800598e:	e7e2      	b.n	8005956 <si468x_load_service_from_flash+0x7a>

08005990 <si468x_DAB_set_freq_list>:
{
 8005990:	b538      	push	{r3, r4, r5, lr}
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 8005992:	f7ff ff9d 	bl	80058d0 <JSB_si468x_get_current_mode>
 8005996:	2802      	cmp	r0, #2
 8005998:	d127      	bne.n	80059ea <si468x_DAB_set_freq_list+0x5a>
	uint8_t *args = (uint8_t *) malloc(args_size);
 800599a:	209c      	movs	r0, #156	; 0x9c
 800599c:	f001 fb44 	bl	8007028 <malloc>
	args[0] = number_of_frequencies;
 80059a0:	2326      	movs	r3, #38	; 0x26
	uint8_t *args = (uint8_t *) malloc(args_size);
 80059a2:	4604      	mov	r4, r0
	args[2] = 0x00;
 80059a4:	4911      	ldr	r1, [pc, #68]	; (80059ec <si468x_DAB_set_freq_list+0x5c>)
	args[0] = number_of_frequencies;
 80059a6:	8003      	strh	r3, [r0, #0]
	args[2] = 0x00;
 80059a8:	2300      	movs	r3, #0
 80059aa:	7083      	strb	r3, [r0, #2]
	for (int i = 0; i < number_of_frequencies; i++)
 80059ac:	4603      	mov	r3, r0
 80059ae:	3098      	adds	r0, #152	; 0x98
		args[3 + 4 * i] = dab_freq_list[i] & 0xFF;
 80059b0:	f851 2b04 	ldr.w	r2, [r1], #4
	for (int i = 0; i < number_of_frequencies; i++)
 80059b4:	3304      	adds	r3, #4
		args[4 + 4 * i] = (dab_freq_list[i] >> 8) & 0xFF;
 80059b6:	0a15      	lsrs	r5, r2, #8
		args[3 + 4 * i] = dab_freq_list[i] & 0xFF;
 80059b8:	f803 2c01 	strb.w	r2, [r3, #-1]
		args[4 + 4 * i] = (dab_freq_list[i] >> 8) & 0xFF;
 80059bc:	701d      	strb	r5, [r3, #0]
		args[5 + 4 * i] = (dab_freq_list[i] >> 16) & 0xFF;
 80059be:	0c15      	lsrs	r5, r2, #16
		args[6 + 4 * i] = dab_freq_list[i] >> 24;
 80059c0:	0e12      	lsrs	r2, r2, #24
		args[5 + 4 * i] = (dab_freq_list[i] >> 16) & 0xFF;
 80059c2:	705d      	strb	r5, [r3, #1]
		args[6 + 4 * i] = dab_freq_list[i] >> 24;
 80059c4:	709a      	strb	r2, [r3, #2]
	for (int i = 0; i < number_of_frequencies; i++)
 80059c6:	4283      	cmp	r3, r0
 80059c8:	d1f2      	bne.n	80059b0 <si468x_DAB_set_freq_list+0x20>
	Si468x_Command *command = si468x_build_command(DAB_SET_FREQ_LIST, args, args_size);
 80059ca:	4621      	mov	r1, r4
 80059cc:	229c      	movs	r2, #156	; 0x9c
 80059ce:	20b8      	movs	r0, #184	; 0xb8
 80059d0:	f7ff fe19 	bl	8005606 <si468x_build_command>
 80059d4:	4605      	mov	r5, r0
	si468x_execute(command);
 80059d6:	f7ff fdeb 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 80059da:	4628      	mov	r0, r5
 80059dc:	f7ff fe1b 	bl	8005616 <si468x_free_command>
	free(args);
 80059e0:	4620      	mov	r0, r4
}
 80059e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free(args);
 80059e6:	f001 bb27 	b.w	8007038 <free>
}
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	08009e34 	.word	0x08009e34

080059f0 <si468x_DAB_tune>:
{
 80059f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059f2:	4605      	mov	r5, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 80059f4:	f7ff ff6c 	bl	80058d0 <JSB_si468x_get_current_mode>
 80059f8:	2802      	cmp	r0, #2
 80059fa:	d11d      	bne.n	8005a38 <si468x_DAB_tune+0x48>
	uint8_t args[] = {0x00, freq_index, 0x00, 0x00, 0x00};
 80059fc:	2400      	movs	r4, #0
	Si468x_Command *command = si468x_build_command(DAB_TUNE_FREQ, args, 5);
 80059fe:	4669      	mov	r1, sp
 8005a00:	2205      	movs	r2, #5
 8005a02:	20b0      	movs	r0, #176	; 0xb0
	uint8_t args[] = {0x00, freq_index, 0x00, 0x00, 0x00};
 8005a04:	f88d 5001 	strb.w	r5, [sp, #1]
 8005a08:	f88d 4000 	strb.w	r4, [sp]
 8005a0c:	f88d 4002 	strb.w	r4, [sp, #2]
 8005a10:	f88d 4003 	strb.w	r4, [sp, #3]
 8005a14:	f88d 4004 	strb.w	r4, [sp, #4]
	Si468x_Command *command = si468x_build_command(DAB_TUNE_FREQ, args, 5);
 8005a18:	f7ff fdf5 	bl	8005606 <si468x_build_command>
	Interrupt_Status.STCINT = 0;
 8005a1c:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <si468x_DAB_tune+0x4c>)
	Si468x_Command *command = si468x_build_command(DAB_TUNE_FREQ, args, 5);
 8005a1e:	4605      	mov	r5, r0
	Interrupt_Status.STCINT = 0;
 8005a20:	781a      	ldrb	r2, [r3, #0]
 8005a22:	f364 0200 	bfi	r2, r4, #0, #1
 8005a26:	701a      	strb	r2, [r3, #0]
	si468x_execute(command);
 8005a28:	f7ff fdc2 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f7ff fdf2 	bl	8005616 <si468x_free_command>
	si468x_wait_for_interrupt(STCINT);
 8005a32:	4620      	mov	r0, r4
 8005a34:	f7ff fd86 	bl	8005544 <si468x_wait_for_interrupt>
}
 8005a38:	b003      	add	sp, #12
 8005a3a:	bd30      	pop	{r4, r5, pc}
 8005a3c:	20000890 	.word	0x20000890

08005a40 <si468x_DAB_get_digrad_status>:
{
 8005a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a42:	4604      	mov	r4, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 8005a44:	f7ff ff44 	bl	80058d0 <JSB_si468x_get_current_mode>
 8005a48:	2802      	cmp	r0, #2
 8005a4a:	d11f      	bne.n	8005a8c <si468x_DAB_get_digrad_status+0x4c>
	uint8_t args[] = {0x00};
 8005a4c:	2300      	movs	r3, #0
	Si468x_Command *command = si468x_build_command(DAB_DIGRAD_STATUS, args, 1);
 8005a4e:	2201      	movs	r2, #1
 8005a50:	a901      	add	r1, sp, #4
 8005a52:	20b2      	movs	r0, #178	; 0xb2
	uint8_t args[] = {0x00};
 8005a54:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(DAB_DIGRAD_STATUS, args, 1);
 8005a58:	f7ff fdd5 	bl	8005606 <si468x_build_command>
 8005a5c:	4605      	mov	r5, r0
	si468x_execute(command);
 8005a5e:	f7ff fda7 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7ff fdd7 	bl	8005616 <si468x_free_command>
	si468x_read_response(read_buffer, 23);
 8005a68:	2117      	movs	r1, #23
 8005a6a:	4809      	ldr	r0, [pc, #36]	; (8005a90 <si468x_DAB_get_digrad_status+0x50>)
 8005a6c:	f7ff fd3e 	bl	80054ec <si468x_read_response>
	memcpy(status->data, read_buffer + 4, 19);
 8005a70:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <si468x_DAB_get_digrad_status+0x54>)
 8005a72:	4620      	mov	r0, r4
 8005a74:	f103 0210 	add.w	r2, r3, #16
 8005a78:	f853 1b04 	ldr.w	r1, [r3], #4
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	f840 1b04 	str.w	r1, [r0], #4
 8005a82:	d1f9      	bne.n	8005a78 <si468x_DAB_get_digrad_status+0x38>
 8005a84:	881a      	ldrh	r2, [r3, #0]
 8005a86:	8002      	strh	r2, [r0, #0]
 8005a88:	789b      	ldrb	r3, [r3, #2]
 8005a8a:	7083      	strb	r3, [r0, #2]
}
 8005a8c:	b003      	add	sp, #12
 8005a8e:	bd30      	pop	{r4, r5, pc}
 8005a90:	20000898 	.word	0x20000898
 8005a94:	2000089c 	.word	0x2000089c

08005a98 <si468x_DAB_get_event_status>:
{
 8005a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a9a:	4604      	mov	r4, r0
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 8005a9c:	f7ff ff18 	bl	80058d0 <JSB_si468x_get_current_mode>
 8005aa0:	2802      	cmp	r0, #2
 8005aa2:	d114      	bne.n	8005ace <si468x_DAB_get_event_status+0x36>
	uint8_t args[] = {0x00};
 8005aa4:	2300      	movs	r3, #0
	Si468x_Command *command = si468x_build_command(DAB_GET_EVENT_STATUS, args, 1);
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	a901      	add	r1, sp, #4
 8005aaa:	20b3      	movs	r0, #179	; 0xb3
	uint8_t args[] = {0x00};
 8005aac:	f88d 3004 	strb.w	r3, [sp, #4]
	Si468x_Command *command = si468x_build_command(DAB_GET_EVENT_STATUS, args, 1);
 8005ab0:	f7ff fda9 	bl	8005606 <si468x_build_command>
 8005ab4:	4605      	mov	r5, r0
	si468x_execute(command);
 8005ab6:	f7ff fd7b 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 8005aba:	4628      	mov	r0, r5
	si468x_read_response(read_buffer, 8);
 8005abc:	4d05      	ldr	r5, [pc, #20]	; (8005ad4 <si468x_DAB_get_event_status+0x3c>)
	si468x_free_command(command);
 8005abe:	f7ff fdaa 	bl	8005616 <si468x_free_command>
	si468x_read_response(read_buffer, 8);
 8005ac2:	2108      	movs	r1, #8
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f7ff fd11 	bl	80054ec <si468x_read_response>
	memcpy(status->data, read_buffer + 4, 4);
 8005aca:	686b      	ldr	r3, [r5, #4]
 8005acc:	6023      	str	r3, [r4, #0]
}
 8005ace:	b003      	add	sp, #12
 8005ad0:	bd30      	pop	{r4, r5, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000898 	.word	0x20000898

08005ad8 <si468x_DAB_band_scan>:
{
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t total_services = 0;
 8005adc:	f04f 0800 	mov.w	r8, #0
{
 8005ae0:	b08f      	sub	sp, #60	; 0x3c
	uint16_t total_services = 0;
 8005ae2:	f8ad 801e 	strh.w	r8, [sp, #30]
	uint16_t service_mem_id = 0;
 8005ae6:	f8cd 8004 	str.w	r8, [sp, #4]
		si468x_DAB_tune(freq_index);
 8005aea:	fa5f f388 	uxtb.w	r3, r8
 8005aee:	4618      	mov	r0, r3
 8005af0:	9304      	str	r3, [sp, #16]
 8005af2:	f7ff ff7d 	bl	80059f0 <si468x_DAB_tune>
		si468x_DAB_get_digrad_status(&digrad_status);
 8005af6:	a809      	add	r0, sp, #36	; 0x24
 8005af8:	f7ff ffa2 	bl	8005a40 <si468x_DAB_get_digrad_status>
		if (digrad_status.VALID)
 8005afc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8005b00:	07d8      	lsls	r0, r3, #31
 8005b02:	d570      	bpl.n	8005be6 <si468x_DAB_band_scan+0x10e>
			event_status.SVRLIST = 0;
 8005b04:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8005b08:	f36f 0300 	bfc	r3, #0, #1
 8005b0c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			while (!event_status.SVRLIST)
 8005b10:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8005b14:	07d9      	lsls	r1, r3, #31
 8005b16:	d57a      	bpl.n	8005c0e <si468x_DAB_band_scan+0x136>
			HAL_Delay(500); //JSB: Temp. Could wait until event_status meets certain requirements.
 8005b18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b1c:	f7fa fdac 	bl	8000678 <HAL_Delay>
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 8005b20:	f7ff fed6 	bl	80058d0 <JSB_si468x_get_current_mode>
 8005b24:	2802      	cmp	r0, #2
 8005b26:	f040 8137 	bne.w	8005d98 <si468x_DAB_band_scan+0x2c0>
	uint8_t args[] = {0x00};
 8005b2a:	f04f 0900 	mov.w	r9, #0
	Si468x_Command *command = si468x_build_command(GET_DIGITAL_SERVICE_LIST, args, 1);
 8005b2e:	2201      	movs	r2, #1
 8005b30:	a907      	add	r1, sp, #28
 8005b32:	2080      	movs	r0, #128	; 0x80
	uint8_t args[] = {0x00};
 8005b34:	f88d 901c 	strb.w	r9, [sp, #28]
	Si468x_Command *command = si468x_build_command(GET_DIGITAL_SERVICE_LIST, args, 1);
 8005b38:	f7ff fd65 	bl	8005606 <si468x_build_command>
 8005b3c:	4604      	mov	r4, r0
	si468x_execute(command);
 8005b3e:	f7ff fd37 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 8005b42:	4620      	mov	r0, r4
 8005b44:	f7ff fd67 	bl	8005616 <si468x_free_command>
	si468x_read_response(read_buffer, 6);
 8005b48:	2106      	movs	r1, #6
 8005b4a:	4895      	ldr	r0, [pc, #596]	; (8005da0 <si468x_DAB_band_scan+0x2c8>)
 8005b4c:	f7ff fcce 	bl	80054ec <si468x_read_response>
	uint16_t service_list_size = read_buffer[4] + (((uint16_t) read_buffer[5]) << 8);
 8005b50:	4b93      	ldr	r3, [pc, #588]	; (8005da0 <si468x_DAB_band_scan+0x2c8>)
 8005b52:	7959      	ldrb	r1, [r3, #5]
 8005b54:	791c      	ldrb	r4, [r3, #4]
 8005b56:	eb04 2401 	add.w	r4, r4, r1, lsl #8
 8005b5a:	b2a4      	uxth	r4, r4
	uint8_t *service_list_data = (uint8_t *) malloc(service_list_size + 4);
 8005b5c:	3404      	adds	r4, #4
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f001 fa62 	bl	8007028 <malloc>
	if (!service_list_data)
 8005b64:	4683      	mov	fp, r0
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f000 8116 	beq.w	8005d98 <si468x_DAB_band_scan+0x2c0>
	si468x_read_response(service_list_data, service_list_size + 4);
 8005b6c:	b2a1      	uxth	r1, r4
 8005b6e:	f7ff fcbd 	bl	80054ec <si468x_read_response>
	if (JSB_si468x_get_current_mode() != Si468x_MODE_DAB)
 8005b72:	f7ff fead 	bl	80058d0 <JSB_si468x_get_current_mode>
 8005b76:	2802      	cmp	r0, #2
 8005b78:	f040 80ad 	bne.w	8005cd6 <si468x_DAB_band_scan+0x1fe>
	DAB_Service_List *service_list = malloc(sizeof(DAB_Service_List));
 8005b7c:	2008      	movs	r0, #8
	DAB_Service_List *service_list = si468x_DAB_decode_digital_service_list(service_list_data + 4, freq_index);
 8005b7e:	f10b 0a04 	add.w	sl, fp, #4
	DAB_Service_List *service_list = malloc(sizeof(DAB_Service_List));
 8005b82:	f001 fa51 	bl	8007028 <malloc>
	uint8_t number_of_services = service_list_data[data_pointer];
 8005b86:	f89b 3008 	ldrb.w	r3, [fp, #8]
	DAB_Service_List *service_list = malloc(sizeof(DAB_Service_List));
 8005b8a:	4606      	mov	r6, r0
	data_pointer += 4;
 8005b8c:	2408      	movs	r4, #8
	service_list->size = number_of_services;
 8005b8e:	7003      	strb	r3, [r0, #0]
	service_list->services = (DAB_Service**) malloc(service_list->size * sizeof(DAB_Service*));
 8005b90:	0098      	lsls	r0, r3, #2
	uint8_t number_of_services = service_list_data[data_pointer];
 8005b92:	9302      	str	r3, [sp, #8]
	service_list->services = (DAB_Service**) malloc(service_list->size * sizeof(DAB_Service*));
 8005b94:	f001 fa48 	bl	8007028 <malloc>
 8005b98:	9003      	str	r0, [sp, #12]
 8005b9a:	6070      	str	r0, [r6, #4]
	for (int i = 0; i < service_list->size; i++)
 8005b9c:	9b02      	ldr	r3, [sp, #8]
 8005b9e:	4599      	cmp	r9, r3
 8005ba0:	db39      	blt.n	8005c16 <si468x_DAB_band_scan+0x13e>
	free(service_list_data);
 8005ba2:	4658      	mov	r0, fp
			for (uint8_t service_index = 0; service_index < service_list->size; service_index++)
 8005ba4:	f04f 0900 	mov.w	r9, #0
	free(service_list_data);
 8005ba8:	f001 fa46 	bl	8007038 <free>
			total_services += service_list->size;
 8005bac:	f896 b000 	ldrb.w	fp, [r6]
 8005bb0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005bb4:	46da      	mov	sl, fp
 8005bb6:	445b      	add	r3, fp
 8005bb8:	f8ad 301e 	strh.w	r3, [sp, #30]
			for (uint8_t service_index = 0; service_index < service_list->size; service_index++)
 8005bbc:	9b01      	ldr	r3, [sp, #4]
 8005bbe:	eb03 0509 	add.w	r5, r3, r9
 8005bc2:	fa5f f389 	uxtb.w	r3, r9
 8005bc6:	459b      	cmp	fp, r3
 8005bc8:	b2ad      	uxth	r5, r5
 8005bca:	f200 8086 	bhi.w	8005cda <si468x_DAB_band_scan+0x202>
 8005bce:	9b01      	ldr	r3, [sp, #4]
	for (int i = 0; i < service_list->size; i++)
 8005bd0:	2400      	movs	r4, #0
 8005bd2:	449a      	add	sl, r3
 8005bd4:	fa1f f38a 	uxth.w	r3, sl
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	455c      	cmp	r4, fp
 8005bdc:	f2c0 80c5 	blt.w	8005d6a <si468x_DAB_band_scan+0x292>
	free(service_list);
 8005be0:	4630      	mov	r0, r6
 8005be2:	f001 fa29 	bl	8007038 <free>
	for (int freq_index = 0; freq_index < sizeof(dab_freq_list) / sizeof(uint32_t); freq_index++)
 8005be6:	f108 0801 	add.w	r8, r8, #1
 8005bea:	f1b8 0f26 	cmp.w	r8, #38	; 0x26
 8005bee:	f47f af7c 	bne.w	8005aea <si468x_DAB_band_scan+0x12>
	SST25_EraseSector_4K(4096);
 8005bf2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005bf6:	f7fe ff97 	bl	8004b28 <SST25_EraseSector_4K>
	SST25_WriteBlock(4096, (uint8_t *) &total_services, 2);
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f10d 011e 	add.w	r1, sp, #30
 8005c00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005c04:	f7fe ffe6 	bl	8004bd4 <SST25_WriteBlock>
}
 8005c08:	b00f      	add	sp, #60	; 0x3c
 8005c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				si468x_DAB_get_event_status(&event_status);
 8005c0e:	a808      	add	r0, sp, #32
 8005c10:	f7ff ff42 	bl	8005a98 <si468x_DAB_get_event_status>
 8005c14:	e77c      	b.n	8005b10 <si468x_DAB_band_scan+0x38>
		DAB_Service *service = (DAB_Service*) malloc(sizeof(DAB_Service));
 8005c16:	2020      	movs	r0, #32
 8005c18:	f001 fa06 	bl	8007028 <malloc>
		service_list->services[i] = service;
 8005c1c:	9b03      	ldr	r3, [sp, #12]
		uint32_t service_id = service_list_data[data_pointer];
 8005c1e:	f81a 2004 	ldrb.w	r2, [sl, r4]
		DAB_Service *service = (DAB_Service*) malloc(sizeof(DAB_Service));
 8005c22:	4605      	mov	r5, r0
		service_list->services[i] = service;
 8005c24:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
		service_id += ((uint32_t) service_list_data[data_pointer + 1]) << 8;
 8005c28:	eb0a 0304 	add.w	r3, sl, r4
		memcpy(service->name, service_list_data + data_pointer, 16);
 8005c2c:	f100 0e10 	add.w	lr, r0, #16
		service_id += ((uint32_t) service_list_data[data_pointer + 2]) << 16;
 8005c30:	789f      	ldrb	r7, [r3, #2]
		service_id += ((uint32_t) service_list_data[data_pointer + 1]) << 8;
 8005c32:	7859      	ldrb	r1, [r3, #1]
		service_id += ((uint32_t) service_list_data[data_pointer + 2]) << 16;
 8005c34:	043f      	lsls	r7, r7, #16
		service_id += ((uint32_t) service_list_data[data_pointer + 3]) << 24;
 8005c36:	78db      	ldrb	r3, [r3, #3]
		service_id += ((uint32_t) service_list_data[data_pointer + 2]) << 16;
 8005c38:	eb07 2701 	add.w	r7, r7, r1, lsl #8
 8005c3c:	4417      	add	r7, r2
		service_id += ((uint32_t) service_list_data[data_pointer + 3]) << 24;
 8005c3e:	eb07 6703 	add.w	r7, r7, r3, lsl #24
		data_pointer += 4;
 8005c42:	1d23      	adds	r3, r4, #4
		service->service_info_1 = service_list_data[data_pointer];
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8005c4a:	7203      	strb	r3, [r0, #8]
		data_pointer += 1;
 8005c4c:	1d63      	adds	r3, r4, #5
		service->service_info_2 = service_list_data[data_pointer];
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f81a c003 	ldrb.w	ip, [sl, r3]
		data_pointer += 3;
 8005c54:	f104 0308 	add.w	r3, r4, #8
		data_pointer += 16;
 8005c58:	3418      	adds	r4, #24
		memcpy(service->name, service_list_data + data_pointer, 16);
 8005c5a:	fa1a f383 	uxtah	r3, sl, r3
		service->service_info_2 = service_list_data[data_pointer];
 8005c5e:	f880 c009 	strb.w	ip, [r0, #9]
		data_pointer += 16;
 8005c62:	b2a4      	uxth	r4, r4
		memcpy(service->name, service_list_data + data_pointer, 16);
 8005c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c66:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		service->freq_index = freq_index;
 8005c6a:	9b04      	ldr	r3, [sp, #16]
		service->components = (DAB_Component**) malloc(service->num_comp * sizeof(DAB_Component*));
 8005c6c:	f00c 000f 	and.w	r0, ip, #15
		service->service_id = service_id;
 8005c70:	606f      	str	r7, [r5, #4]
		service->freq_index = freq_index;
 8005c72:	702b      	strb	r3, [r5, #0]
		service->components = (DAB_Component**) malloc(service->num_comp * sizeof(DAB_Component*));
 8005c74:	0080      	lsls	r0, r0, #2
 8005c76:	f001 f9d7 	bl	8007028 <malloc>
		for (int j = 0; j < service->num_comp; j++)
 8005c7a:	2300      	movs	r3, #0
		service->components = (DAB_Component**) malloc(service->num_comp * sizeof(DAB_Component*));
 8005c7c:	60e8      	str	r0, [r5, #12]
		for (int j = 0; j < service->num_comp; j++)
 8005c7e:	7a6a      	ldrb	r2, [r5, #9]
 8005c80:	f002 020f 	and.w	r2, r2, #15
 8005c84:	4293      	cmp	r3, r2
 8005c86:	db02      	blt.n	8005c8e <si468x_DAB_band_scan+0x1b6>
	for (int i = 0; i < service_list->size; i++)
 8005c88:	f109 0901 	add.w	r9, r9, #1
 8005c8c:	e786      	b.n	8005b9c <si468x_DAB_band_scan+0xc4>
			component_id += ((uint32_t) service_list_data[data_pointer + 1]) << 8;
 8005c8e:	eb0a 0204 	add.w	r2, sl, r4
			uint32_t component_id = service_list_data[data_pointer];
 8005c92:	f81a 1004 	ldrb.w	r1, [sl, r4]
			component_id += ((uint32_t) service_list_data[data_pointer + 2]) << 16;
 8005c96:	7897      	ldrb	r7, [r2, #2]
			component_id += ((uint32_t) service_list_data[data_pointer + 1]) << 8;
 8005c98:	7850      	ldrb	r0, [r2, #1]
			component_id += ((uint32_t) service_list_data[data_pointer + 2]) << 16;
 8005c9a:	043f      	lsls	r7, r7, #16
			component_id += ((uint32_t) service_list_data[data_pointer + 3]) << 24; //!!! Component ID only 16 bits long...
 8005c9c:	78d2      	ldrb	r2, [r2, #3]
			component_id += ((uint32_t) service_list_data[data_pointer + 2]) << 16;
 8005c9e:	eb07 2700 	add.w	r7, r7, r0, lsl #8
 8005ca2:	440f      	add	r7, r1
			component_id += ((uint32_t) service_list_data[data_pointer + 3]) << 24; //!!! Component ID only 16 bits long...
 8005ca4:	eb07 6702 	add.w	r7, r7, r2, lsl #24
			if (user_application_valid)
 8005ca8:	07d2      	lsls	r2, r2, #31
 8005caa:	d504      	bpl.n	8005cb6 <si468x_DAB_band_scan+0x1de>
				HAL_Delay(1);
 8005cac:	2001      	movs	r0, #1
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	f7fa fce2 	bl	8000678 <HAL_Delay>
 8005cb4:	9b05      	ldr	r3, [sp, #20]
			data_pointer += 1;
 8005cb6:	3404      	adds	r4, #4
			DAB_Component *component = (DAB_Component*) malloc(sizeof(DAB_Component));
 8005cb8:	2008      	movs	r0, #8
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	f001 f9b4 	bl	8007028 <malloc>
			data_pointer += 1;
 8005cc0:	b2a4      	uxth	r4, r4
			service->components[j] = component;
 8005cc2:	9b05      	ldr	r3, [sp, #20]
			component->component_id = component_id;
 8005cc4:	6007      	str	r7, [r0, #0]
			component->component_info = service_list_data[data_pointer];
 8005cc6:	f81a 2004 	ldrb.w	r2, [sl, r4]
 8005cca:	7102      	strb	r2, [r0, #4]
			service->components[j] = component;
 8005ccc:	68ea      	ldr	r2, [r5, #12]
 8005cce:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
		for (int j = 0; j < service->num_comp; j++)
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	e7d3      	b.n	8005c7e <si468x_DAB_band_scan+0x1a6>
		return NULL;
 8005cd6:	464e      	mov	r6, r9
 8005cd8:	e763      	b.n	8005ba2 <si468x_DAB_band_scan+0xca>
	uint32_t memory_address = 4096 * (memory_index + 2); // Keep first 8192 bytes free for control data.
 8005cda:	3502      	adds	r5, #2
				si468x_DAB_save_service_to_flash(service_list->services[service_index], service_mem_id++);
 8005cdc:	6873      	ldr	r3, [r6, #4]
	uint32_t memory_address = 4096 * (memory_index + 2); // Keep first 8192 bytes free for control data.
 8005cde:	032d      	lsls	r5, r5, #12
				si468x_DAB_save_service_to_flash(service_list->services[service_index], service_mem_id++);
 8005ce0:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
	Stream *stream = stream_create();
 8005ce4:	f7ff fb1e 	bl	8005324 <stream_create>
 8005ce8:	4604      	mov	r4, r0
	SST25_EraseSector_4K(memory_address);
 8005cea:	4628      	mov	r0, r5
 8005cec:	f7fe ff1c 	bl	8004b28 <SST25_EraseSector_4K>
	stream_write_uint8(stream, service->freq_index);
 8005cf0:	7839      	ldrb	r1, [r7, #0]
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f7ff fbae 	bl	8005454 <stream_write_uint8>
	stream_write_uint32(stream, service->service_id);
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f7ff fbb7 	bl	800546e <stream_write_uint32>
	stream_write_uint8(stream, service->service_info_1);
 8005d00:	7a39      	ldrb	r1, [r7, #8]
 8005d02:	4620      	mov	r0, r4
 8005d04:	f7ff fba6 	bl	8005454 <stream_write_uint8>
	stream_write_uint8(stream, service->service_info_2);
 8005d08:	7a79      	ldrb	r1, [r7, #9]
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f7ff fba2 	bl	8005454 <stream_write_uint8>
	stream_write_bytes(stream, (uint8_t *) service->name, 16);
 8005d10:	2210      	movs	r2, #16
 8005d12:	4620      	mov	r0, r4
 8005d14:	18b9      	adds	r1, r7, r2
 8005d16:	f7ff fbc3 	bl	80054a0 <stream_write_bytes>
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	7a7a      	ldrb	r2, [r7, #9]
 8005d1e:	b2d9      	uxtb	r1, r3
 8005d20:	f002 020f 	and.w	r2, r2, #15
 8005d24:	428a      	cmp	r2, r1
 8005d26:	d80f      	bhi.n	8005d48 <si468x_DAB_band_scan+0x270>
	stream_flush(stream);
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f109 0901 	add.w	r9, r9, #1
 8005d2e:	f7ff fb5f 	bl	80053f0 <stream_flush>
	SST25_WriteBlock(memory_address, stream->data, stream->data_size);
 8005d32:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
 8005d36:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7fe ff4a 	bl	8004bd4 <SST25_WriteBlock>
	stream_free(stream);
 8005d40:	4620      	mov	r0, r4
 8005d42:	f7ff fb0e 	bl	8005362 <stream_free>
			for (uint8_t service_index = 0; service_index < service_list->size; service_index++)
 8005d46:	e739      	b.n	8005bbc <si468x_DAB_band_scan+0xe4>
		DAB_Component *component = service->components[component_index];
 8005d48:	68fa      	ldr	r2, [r7, #12]
		stream_write_uint32(stream, component->component_id);
 8005d4a:	4620      	mov	r0, r4
		DAB_Component *component = service->components[component_index];
 8005d4c:	9303      	str	r3, [sp, #12]
 8005d4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
		stream_write_uint32(stream, component->component_id);
 8005d52:	6811      	ldr	r1, [r2, #0]
 8005d54:	9202      	str	r2, [sp, #8]
 8005d56:	f7ff fb8a 	bl	800546e <stream_write_uint32>
		stream_write_uint8(stream, component->component_info);
 8005d5a:	9a02      	ldr	r2, [sp, #8]
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	7911      	ldrb	r1, [r2, #4]
 8005d60:	f7ff fb78 	bl	8005454 <stream_write_uint8>
	for (uint8_t component_index = 0; component_index < service->num_comp; component_index++)
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	e7d8      	b.n	8005d1c <si468x_DAB_band_scan+0x244>
		DAB_Service *service = service_list->services[i];
 8005d6a:	6873      	ldr	r3, [r6, #4]
		for (int j = 0; j < service->num_comp; j++)
 8005d6c:	2500      	movs	r5, #0
		DAB_Service *service = service_list->services[i];
 8005d6e:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
		for (int j = 0; j < service->num_comp; j++)
 8005d72:	7a7b      	ldrb	r3, [r7, #9]
			free(service->components[j]);
 8005d74:	68f8      	ldr	r0, [r7, #12]
		for (int j = 0; j < service->num_comp; j++)
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	429d      	cmp	r5, r3
 8005d7c:	db06      	blt.n	8005d8c <si468x_DAB_band_scan+0x2b4>
		free(service->components);
 8005d7e:	f001 f95b 	bl	8007038 <free>
		free(service);
 8005d82:	4638      	mov	r0, r7
	for (int i = 0; i < service_list->size; i++)
 8005d84:	3401      	adds	r4, #1
		free(service);
 8005d86:	f001 f957 	bl	8007038 <free>
	for (int i = 0; i < service_list->size; i++)
 8005d8a:	e726      	b.n	8005bda <si468x_DAB_band_scan+0x102>
			free(service->components[j]);
 8005d8c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
		for (int j = 0; j < service->num_comp; j++)
 8005d90:	3501      	adds	r5, #1
			free(service->components[j]);
 8005d92:	f001 f951 	bl	8007038 <free>
		for (int j = 0; j < service->num_comp; j++)
 8005d96:	e7ec      	b.n	8005d72 <si468x_DAB_band_scan+0x29a>
			total_services += service_list->size;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	deff      	udf	#255	; 0xff
 8005d9e:	bf00      	nop
 8005da0:	20000898 	.word	0x20000898

08005da4 <si468x_DAB_start_digital_service>:
{
 8005da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t args[] = {
 8005da6:	2300      	movs	r3, #0
 8005da8:	f88d 0007 	strb.w	r0, [sp, #7]
 8005dac:	f88d 100b 	strb.w	r1, [sp, #11]
 8005db0:	f88d 3005 	strb.w	r3, [sp, #5]
 8005db4:	f88d 3006 	strb.w	r3, [sp, #6]
			(service_id >> 8) & 0xFF,
 8005db8:	0a03      	lsrs	r3, r0, #8
	uint8_t args[] = {
 8005dba:	f88d 2004 	strb.w	r2, [sp, #4]
	Si468x_Command *command = si468x_build_command(START_DIGITAL_SERVICE, args, 11);
 8005dbe:	220b      	movs	r2, #11
	uint8_t args[] = {
 8005dc0:	f88d 3008 	strb.w	r3, [sp, #8]
			(service_id >> 16) & 0xFF,
 8005dc4:	0c03      	lsrs	r3, r0, #16
			service_id >> 24,
 8005dc6:	0e00      	lsrs	r0, r0, #24
	uint8_t args[] = {
 8005dc8:	f88d 3009 	strb.w	r3, [sp, #9]
			(component_id >> 8) & 0xFF,
 8005dcc:	0a0b      	lsrs	r3, r1, #8
	uint8_t args[] = {
 8005dce:	f88d 000a 	strb.w	r0, [sp, #10]
	Si468x_Command *command = si468x_build_command(START_DIGITAL_SERVICE, args, 11);
 8005dd2:	2081      	movs	r0, #129	; 0x81
	uint8_t args[] = {
 8005dd4:	f88d 300c 	strb.w	r3, [sp, #12]
			(component_id >> 16) & 0xFF,
 8005dd8:	0c0b      	lsrs	r3, r1, #16
			component_id >> 24
 8005dda:	0e09      	lsrs	r1, r1, #24
	uint8_t args[] = {
 8005ddc:	f88d 300d 	strb.w	r3, [sp, #13]
 8005de0:	f88d 100e 	strb.w	r1, [sp, #14]
	Si468x_Command *command = si468x_build_command(START_DIGITAL_SERVICE, args, 11);
 8005de4:	a901      	add	r1, sp, #4
 8005de6:	f7ff fc0e 	bl	8005606 <si468x_build_command>
 8005dea:	4604      	mov	r4, r0
	si468x_execute(command);
 8005dec:	f7ff fbe0 	bl	80055b0 <si468x_execute>
	si468x_free_command(command);
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7ff fc10 	bl	8005616 <si468x_free_command>
}
 8005df6:	b004      	add	sp, #16
 8005df8:	bd10      	pop	{r4, pc}

08005dfa <si468x_DAB_tune_service>:
{
 8005dfa:	b510      	push	{r4, lr}
  DAB_Service *service = si468x_load_service_from_flash(service_mem_id);
 8005dfc:	f7ff fd6e 	bl	80058dc <si468x_load_service_from_flash>
 8005e00:	4604      	mov	r4, r0
  si468x_DAB_tune(service->freq_index);
 8005e02:	7800      	ldrb	r0, [r0, #0]
 8005e04:	f7ff fdf4 	bl	80059f0 <si468x_DAB_tune>
  si468x_DAB_start_digital_service(service->service_id, service->components[0]->component_id, SER_AUDIO);
 8005e08:	68e3      	ldr	r3, [r4, #12]
 8005e0a:	6860      	ldr	r0, [r4, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	681b      	ldr	r3, [r3, #0]
}
 8005e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  si468x_DAB_start_digital_service(service->service_id, service->components[0]->component_id, SER_AUDIO);
 8005e14:	6819      	ldr	r1, [r3, #0]
 8005e16:	f7ff bfc5 	b.w	8005da4 <si468x_DAB_start_digital_service>

08005e1a <JSB_si468x_load_service_name_from_flash>:
  strncpy(pServiceName, pService->name, Min_uint32(ServiceName_MaxLength, 16));
  TrimRight(pServiceName, ' ');
}

void JSB_si468x_load_service_name_from_flash(uint16_t ServiceID, char *pServiceName, int16_t ServiceName_MaxLength)
{
 8005e1a:	b538      	push	{r3, r4, r5, lr}
 8005e1c:	4615      	mov	r5, r2
 8005e1e:	460c      	mov	r4, r1
  DAB_Service *pService = si468x_load_service_from_flash(ServiceID);
 8005e20:	f7ff fd5c 	bl	80058dc <si468x_load_service_from_flash>
  strncpy(pServiceName, pService->name, Min_uint32(ServiceName_MaxLength, 16));
 8005e24:	f100 0110 	add.w	r1, r0, #16
 8005e28:	2d10      	cmp	r5, #16
 8005e2a:	462a      	mov	r2, r5
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	bf28      	it	cs
 8005e30:	2210      	movcs	r2, #16
 8005e32:	f001 fee6 	bl	8007c02 <strncpy>
  char *pChar = pString + strlen(pString); // Point to terminator.
 8005e36:	4620      	mov	r0, r4
 8005e38:	f7fa fa02 	bl	8000240 <strlen>
    *pChar = 0;
 8005e3c:	2300      	movs	r3, #0
  char *pChar = pString + strlen(pString); // Point to terminator.
 8005e3e:	4420      	add	r0, r4
    if (pChar == pString)
 8005e40:	42a0      	cmp	r0, r4
 8005e42:	d006      	beq.n	8005e52 <JSB_si468x_load_service_name_from_flash+0x38>
    if (*pChar != UnwantedChar)
 8005e44:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8005e48:	2a20      	cmp	r2, #32
 8005e4a:	d102      	bne.n	8005e52 <JSB_si468x_load_service_name_from_flash+0x38>
    *pChar = 0;
 8005e4c:	f800 3d01 	strb.w	r3, [r0, #-1]!
    if (pChar == pString)
 8005e50:	e7f6      	b.n	8005e40 <JSB_si468x_load_service_name_from_flash+0x26>
  JSB_si468x_get_service_name(pService, pServiceName, ServiceName_MaxLength);
}
 8005e52:	bd38      	pop	{r3, r4, r5, pc}

08005e54 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005e54:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <MX_DMA_Init+0x90>)
{
 8005e56:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005e5a:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005e5c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005e60:	631a      	str	r2, [r3, #48]	; 0x30
 8005e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e68:	9200      	str	r2, [sp, #0]
 8005e6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e6e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005e74:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005e78:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005e82:	f7fa fc1d 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005e86:	2010      	movs	r0, #16
 8005e88:	f7fa fc4c 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2011      	movs	r0, #17
 8005e90:	4611      	mov	r1, r2
 8005e92:	f7fa fc15 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005e96:	2011      	movs	r0, #17
 8005e98:	f7fa fc44 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2039      	movs	r0, #57	; 0x39
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	f7fa fc0d 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005ea6:	2039      	movs	r0, #57	; 0x39
 8005ea8:	f7fa fc3c 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005eac:	2200      	movs	r2, #0
 8005eae:	203a      	movs	r0, #58	; 0x3a
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	f7fa fc05 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005eb6:	203a      	movs	r0, #58	; 0x3a
 8005eb8:	f7fa fc34 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	203b      	movs	r0, #59	; 0x3b
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	f7fa fbfd 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005ec6:	203b      	movs	r0, #59	; 0x3b
 8005ec8:	f7fa fc2c 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2044      	movs	r0, #68	; 0x44
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	f7fa fbf5 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8005ed6:	2044      	movs	r0, #68	; 0x44

}
 8005ed8:	b003      	add	sp, #12
 8005eda:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8005ede:	f7fa bc21 	b.w	8000724 <HAL_NVIC_EnableIRQ>
 8005ee2:	bf00      	nop
 8005ee4:	40023800 	.word	0x40023800

08005ee8 <SetColor>:

  return S;
}

void SetColor(uint32_t Color)
{
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4604      	mov	r4, r0
  RGB_Begin();
  RGB_AppendColour(Color);
  RGB_AppendColour(0x010101);
 8005eec:	4d0c      	ldr	r5, [pc, #48]	; (8005f20 <SetColor+0x38>)
  RGB_Begin();
 8005eee:	f7ff f9bd 	bl	800526c <RGB_Begin>
  RGB_AppendColour(Color);
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f7ff f9dc 	bl	80052b0 <RGB_AppendColour>
  RGB_AppendColour(0x010101);
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f7ff f9d9 	bl	80052b0 <RGB_AppendColour>
  RGB_AppendColour(Color);
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7ff f9d6 	bl	80052b0 <RGB_AppendColour>
  RGB_AppendColour(Color);
 8005f04:	4620      	mov	r0, r4
 8005f06:	f7ff f9d3 	bl	80052b0 <RGB_AppendColour>
  RGB_AppendColour(0x010101);
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f7ff f9d0 	bl	80052b0 <RGB_AppendColour>
  RGB_AppendColour(Color);
 8005f10:	4620      	mov	r0, r4
 8005f12:	f7ff f9cd 	bl	80052b0 <RGB_AppendColour>
  RGB_End();
}
 8005f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  RGB_End();
 8005f1a:	f7ff b9d9 	b.w	80052d0 <RGB_End>
 8005f1e:	bf00      	nop
 8005f20:	00010101 	.word	0x00010101

08005f24 <HAL_GPIO_EXTI_Callback>:
#define DAB_ServiceNameMaxLength 128
char DAB_ServiceName[DAB_ServiceNameMaxLength] = "";

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == SI_INT_Pin)
 8005f24:	2820      	cmp	r0, #32
 8005f26:	d101      	bne.n	8005f2c <HAL_GPIO_EXTI_Callback+0x8>
    si468x_interrupt();
 8005f28:	f7ff bada 	b.w	80054e0 <si468x_interrupt>
  if (GPIO_Pin == NUserButton_Pin)
 8005f2c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    ChangeService = 1;
 8005f30:	bf02      	ittt	eq
 8005f32:	4b02      	ldreq	r3, [pc, #8]	; (8005f3c <HAL_GPIO_EXTI_Callback+0x18>)
 8005f34:	2201      	moveq	r2, #1
 8005f36:	701a      	strbeq	r2, [r3, #0]
}
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20000acc 	.word	0x20000acc

08005f40 <I2S_24bitToNormalizedFloat>:

///////////////////////////////////////////////////////////////////////////////

float I2S_24bitToNormalizedFloat(int32_t Value)
{
  if (Value & 0x00800000)
 8005f40:	0203      	lsls	r3, r0, #8
    Value |= 0xFF000000;
 8005f42:	bf48      	it	mi
 8005f44:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000

  return Value / 16777216.0f;
}
 8005f48:	ee00 0a10 	vmov	s0, r0
 8005f4c:	eeba 0ac4 	vcvt.f32.s32	s0, s0, #24
 8005f50:	4770      	bx	lr
	...

08005f54 <I2S_NormalizedFloatTo24bit>:

int32_t I2S_NormalizedFloatTo24bit(float Value)
{
  return round(16777216.0f * Value);
 8005f54:	eddf 7a06 	vldr	s15, [pc, #24]	; 8005f70 <I2S_NormalizedFloatTo24bit+0x1c>
 8005f58:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005f5c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8005f60:	feb8 0b40 	vrinta.f64	d0, d0
}
 8005f64:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8005f68:	ee17 0a90 	vmov	r0, s15
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	4b800000 	.word	0x4b800000

08005f74 <AudioBuffer_TransferFromInputBufferToOutputBuffer>:
  uint16_t FirstSampleIndex, SampleIndex;
  float Audio_Left, Audio_Right;
  AudioData_Sample_t *pInputSample, *pOutputSample;

  FirstSampleIndex = 0;
  switch (AudioBufferHalf)
 8005f74:	2801      	cmp	r0, #1
{
 8005f76:	b510      	push	{r4, lr}
  switch (AudioBufferHalf)
 8005f78:	d004      	beq.n	8005f84 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x10>
 8005f7a:	2802      	cmp	r0, #2
 8005f7c:	d013      	beq.n	8005fa6 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x32>
  {
    case abhFirstHalf: FirstSampleIndex = 0; break;
    case abhSecondHalf: FirstSampleIndex = AudioBuffer_NumSamplesPerHalf; break;
    default: ToggleLED(LED_Red); //!!!
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f7fe ff84 	bl	8004e8c <ToggleLED>
    case abhFirstHalf: FirstSampleIndex = 0; break;
 8005f84:	2300      	movs	r3, #0
    pOutputSample = &AudioOutputBuffer[SampleIndex];

    Audio_Left = I2S_24bitToNormalizedFloat(pInputSample->Left);
    Audio_Right = I2S_24bitToNormalizedFloat(pInputSample->Right);

    Audio_Left *= AudioTransferGain;
 8005f86:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x68>)
 8005f88:	2411      	movs	r4, #17
 8005f8a:	4915      	ldr	r1, [pc, #84]	; (8005fe0 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x6c>)
 8005f8c:	edd2 6a00 	vldr	s13, [r2]
 8005f90:	4a14      	ldr	r2, [pc, #80]	; (8005fe4 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x70>)
 8005f92:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  for(SampleIndex = FirstSampleIndex; SampleIndex < FirstSampleIndex + AudioBuffer_NumSamplesPerHalf; ++SampleIndex)
 8005f9a:	3c01      	subs	r4, #1
 8005f9c:	3108      	adds	r1, #8
 8005f9e:	3208      	adds	r2, #8
 8005fa0:	b2a4      	uxth	r4, r4
 8005fa2:	b914      	cbnz	r4, 8005faa <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x36>
    Audio_Right *= AudioTransferGain;

    pOutputSample-> Left = I2S_NormalizedFloatTo24bit(Audio_Left);
    pOutputSample-> Right = I2S_NormalizedFloatTo24bit(Audio_Right);
  }
}
 8005fa4:	bd10      	pop	{r4, pc}
  switch (AudioBufferHalf)
 8005fa6:	2310      	movs	r3, #16
 8005fa8:	e7ed      	b.n	8005f86 <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x12>
    Audio_Left = I2S_24bitToNormalizedFloat(pInputSample->Left);
 8005faa:	f851 0c08 	ldr.w	r0, [r1, #-8]
 8005fae:	f7ff ffc7 	bl	8005f40 <I2S_24bitToNormalizedFloat>
    Audio_Right = I2S_24bitToNormalizedFloat(pInputSample->Right);
 8005fb2:	f851 0c04 	ldr.w	r0, [r1, #-4]
    Audio_Left = I2S_24bitToNormalizedFloat(pInputSample->Left);
 8005fb6:	eef0 7a40 	vmov.f32	s15, s0
    Audio_Right = I2S_24bitToNormalizedFloat(pInputSample->Right);
 8005fba:	f7ff ffc1 	bl	8005f40 <I2S_24bitToNormalizedFloat>
    Audio_Right *= AudioTransferGain;
 8005fbe:	ee26 7a80 	vmul.f32	s14, s13, s0
    pOutputSample-> Left = I2S_NormalizedFloatTo24bit(Audio_Left);
 8005fc2:	ee26 0aa7 	vmul.f32	s0, s13, s15
 8005fc6:	f7ff ffc5 	bl	8005f54 <I2S_NormalizedFloatTo24bit>
    pOutputSample-> Right = I2S_NormalizedFloatTo24bit(Audio_Right);
 8005fca:	eeb0 0a47 	vmov.f32	s0, s14
    pOutputSample-> Left = I2S_NormalizedFloatTo24bit(Audio_Left);
 8005fce:	f842 0c08 	str.w	r0, [r2, #-8]
    pOutputSample-> Right = I2S_NormalizedFloatTo24bit(Audio_Right);
 8005fd2:	f7ff ffbf 	bl	8005f54 <I2S_NormalizedFloatTo24bit>
 8005fd6:	f842 0c04 	str.w	r0, [r2, #-4]
  for(SampleIndex = FirstSampleIndex; SampleIndex < FirstSampleIndex + AudioBuffer_NumSamplesPerHalf; ++SampleIndex)
 8005fda:	e7de      	b.n	8005f9a <AudioBuffer_TransferFromInputBufferToOutputBuffer+0x26>
 8005fdc:	200003ec 	.word	0x200003ec
 8005fe0:	200008cc 	.word	0x200008cc
 8005fe4:	200009cc 	.word	0x200009cc

08005fe8 <HAL_SAI_RxHalfCpltCallback>:
{
  if (UseSingleBuffer)
    return;

  // For debugging Rx/Tx timing.
  HAL_GPIO_WritePin(SAI_RxDMA_GPIO_Port, SAI_RxDMA_Pin, 1);
 8005fe8:	2201      	movs	r2, #1
 8005fea:	4805      	ldr	r0, [pc, #20]	; (8006000 <HAL_SAI_RxHalfCpltCallback+0x18>)
{
 8005fec:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SAI_RxDMA_GPIO_Port, SAI_RxDMA_Pin, 1);
 8005fee:	4611      	mov	r1, r2
 8005ff0:	f7fa fe56 	bl	8000ca0 <HAL_GPIO_WritePin>

  AudioBuffer_TransferFromInputBufferToOutputBuffer(abhFirstHalf);
 8005ff4:	2001      	movs	r0, #1
}
 8005ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AudioBuffer_TransferFromInputBufferToOutputBuffer(abhFirstHalf);
 8005ffa:	f7ff bfbb 	b.w	8005f74 <AudioBuffer_TransferFromInputBufferToOutputBuffer>
 8005ffe:	bf00      	nop
 8006000:	40020400 	.word	0x40020400

08006004 <HAL_SAI_RxCpltCallback>:
{
  if (UseSingleBuffer)
    return;

  // For debugging Rx/Tx timing.
  HAL_GPIO_WritePin(SAI_RxDMA_GPIO_Port, SAI_RxDMA_Pin, 0);
 8006004:	4805      	ldr	r0, [pc, #20]	; (800601c <HAL_SAI_RxCpltCallback+0x18>)
 8006006:	2200      	movs	r2, #0
 8006008:	2101      	movs	r1, #1
{
 800600a:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SAI_RxDMA_GPIO_Port, SAI_RxDMA_Pin, 0);
 800600c:	f7fa fe48 	bl	8000ca0 <HAL_GPIO_WritePin>

  AudioBuffer_TransferFromInputBufferToOutputBuffer(abhSecondHalf);
 8006010:	2002      	movs	r0, #2
}
 8006012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AudioBuffer_TransferFromInputBufferToOutputBuffer(abhSecondHalf);
 8006016:	f7ff bfad 	b.w	8005f74 <AudioBuffer_TransferFromInputBufferToOutputBuffer>
 800601a:	bf00      	nop
 800601c:	40020400 	.word	0x40020400

08006020 <HAL_SAI_TxHalfCpltCallback>:
{
  if (UseSingleBuffer)
    return;

  // For debugging Rx/Tx timing.
  HAL_GPIO_WritePin(SAI_TxDMA_GPIO_Port, SAI_TxDMA_Pin, 1);
 8006020:	2201      	movs	r2, #1
 8006022:	2102      	movs	r1, #2
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <HAL_SAI_TxHalfCpltCallback+0xc>)
 8006026:	f7fa be3b 	b.w	8000ca0 <HAL_GPIO_WritePin>
 800602a:	bf00      	nop
 800602c:	40020400 	.word	0x40020400

08006030 <HAL_SAI_TxCpltCallback>:
{
  if (UseSingleBuffer)
    return;

  // For debugging Rx/Tx timing.
  HAL_GPIO_WritePin(SAI_TxDMA_GPIO_Port, SAI_TxDMA_Pin, 0);
 8006030:	2200      	movs	r2, #0
 8006032:	2102      	movs	r1, #2
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <HAL_SAI_TxCpltCallback+0xc>)
 8006036:	f7fa be33 	b.w	8000ca0 <HAL_GPIO_WritePin>
 800603a:	bf00      	nop
 800603c:	40020400 	.word	0x40020400

08006040 <Go>:
}

///////////////////////////////////////////////////////////////////////////////

void Go()
{
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t Touch_RawX, Touch_RawY, Touch_RawZ;
  int16_t Touch_ScreenX, Touch_ScreenY;
  //!!! DAB_DigRad_Status DAB_Status;
  char S[256];

  RGB_SetNumber(6);
 8006044:	2006      	movs	r0, #6
{
 8006046:	ed2d 8b02 	vpush	{d8}
 800604a:	b0d3      	sub	sp, #332	; 0x14c
  RGB_SetNumber(6);
 800604c:	f7ff f8ee 	bl	800522c <RGB_SetNumber>
  SetColor(clBlue);
 8006050:	2003      	movs	r0, #3
 8006052:	f7ff ff49 	bl	8005ee8 <SetColor>
  
  HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, 1);
 8006056:	2201      	movs	r2, #1
 8006058:	2140      	movs	r1, #64	; 0x40
 800605a:	48be      	ldr	r0, [pc, #760]	; (8006354 <Go+0x314>)
 800605c:	f7fa fe20 	bl	8000ca0 <HAL_GPIO_WritePin>
  ILI9341_SetFont(&FreeSans9pt7b);
 8006060:	48bd      	ldr	r0, [pc, #756]	; (8006358 <Go+0x318>)
 8006062:	f7fe fa73 	bl	800454c <ILI9341_SetFont>
  ILI9341_SetTextColor(ILI9341_COLOR_WHITE);
 8006066:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800606a:	f7fe fbf5 	bl	8004858 <ILI9341_SetTextColor>
  ILI9341_SetTextBackgroundColor(ILI9341_COLOR_BLACK);
 800606e:	2000      	movs	r0, #0
 8006070:	f7fe fbfa 	bl	8004868 <ILI9341_SetTextBackgroundColor>
  ILI9341_SetTextDrawMode(tdmAnyCharBar); // Slower but enables flicker free update.
 8006074:	2002      	movs	r0, #2
 8006076:	f7fe fbff 	bl	8004878 <ILI9341_SetTextDrawMode>

  ILI9341_Clear(0x0000);
 800607a:	2000      	movs	r0, #0
 800607c:	f7fe fa5a 	bl	8004534 <ILI9341_Clear>

  uint8_t UserButtonPressed = 0;

  Y += ILI9341_GetFontYSpacing();
 8006080:	f7fe fa6c 	bl	800455c <ILI9341_GetFontYSpacing>
  ILI9341_DrawTextAtXY("ADC+DAC+PA+AR1010+DAB", 0, Y, tpLeft);
 8006084:	2301      	movs	r3, #1
  Y += ILI9341_GetFontYSpacing();
 8006086:	b286      	uxth	r6, r0
  ILI9341_DrawTextAtXY("ADC+DAC+PA+AR1010+DAB", 0, Y, tpLeft);
 8006088:	2100      	movs	r1, #0
 800608a:	48b4      	ldr	r0, [pc, #720]	; (800635c <Go+0x31c>)
 800608c:	4632      	mov	r2, r6
 800608e:	f7fe fbfb 	bl	8004888 <ILI9341_DrawTextAtXY>

  Y += ILI9341_GetFontYSpacing();
 8006092:	f7fe fa63 	bl	800455c <ILI9341_GetFontYSpacing>
 8006096:	4430      	add	r0, r6
  if (UseSingleBuffer)
    ILI9341_DrawTextAtXY("Using single buffer", 0, Y, tpLeft);
  else
    ILI9341_DrawTextAtXY("Using I&O buffers", 0, Y, tpLeft);
 8006098:	2301      	movs	r3, #1
 800609a:	2100      	movs	r1, #0
  Y += ILI9341_GetFontYSpacing();
 800609c:	b285      	uxth	r5, r0
    ILI9341_DrawTextAtXY("Using I&O buffers", 0, Y, tpLeft);
 800609e:	48b0      	ldr	r0, [pc, #704]	; (8006360 <Go+0x320>)
 80060a0:	462a      	mov	r2, r5
 80060a2:	f7fe fbf1 	bl	8004888 <ILI9341_DrawTextAtXY>

  ADC_Initialize();
 80060a6:	f7fe ff99 	bl	8004fdc <ADC_Initialize>
  //
  DAC_Initialize();
 80060aa:	f7fe ffc3 	bl	8005034 <DAC_Initialize>
  //
  AR1010_init();
 80060ae:	f7fd fdf3 	bl	8003c98 <AR1010_init>
  AR1010_set_volume(18);
 80060b2:	2012      	movs	r0, #18
 80060b4:	f7fd fe8c 	bl	8003dd0 <AR1010_set_volume>
  //
  si468x_init(Si468x_MODE_DAB);
 80060b8:	2002      	movs	r0, #2
 80060ba:	f7ff fb05 	bl	80056c8 <si468x_init>
  Y += ILI9341_GetFontYSpacing();
 80060be:	f7fe fa4d 	bl	800455c <ILI9341_GetFontYSpacing>
 80060c2:	4428      	add	r0, r5
  ILI9341_DrawTextAtXY("Si4684 booted", 0, Y, tpLeft);
 80060c4:	2301      	movs	r3, #1
 80060c6:	2100      	movs	r1, #0
  Y += ILI9341_GetFontYSpacing();
 80060c8:	b287      	uxth	r7, r0
  ILI9341_DrawTextAtXY("Si4684 booted", 0, Y, tpLeft);
 80060ca:	48a6      	ldr	r0, [pc, #664]	; (8006364 <Go+0x324>)
 80060cc:	463a      	mov	r2, r7
 80060ce:	f7fe fbdb 	bl	8004888 <ILI9341_DrawTextAtXY>

  uint8_t *current_uuid = (uint8_t *) "8f74f7d6-eba6-4a72-bd43-16f123bbc3e6";

  uint8_t read_uuid[36];
  SST25_ReadBlock(0, read_uuid, 36);
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	2000      	movs	r0, #0
 80060d6:	eb0d 0102 	add.w	r1, sp, r2
 80060da:	f7fe fdf9 	bl	8004cd0 <SST25_ReadBlock>

  if (IsUserButtonPressed() || strncmp((char *) current_uuid, (char *) read_uuid, 36)) // If flash data either not written or wrong version
 80060de:	f7fe fee7 	bl	8004eb0 <IsUserButtonPressed>
 80060e2:	b938      	cbnz	r0, 80060f4 <Go+0xb4>
 80060e4:	2224      	movs	r2, #36	; 0x24
 80060e6:	48a0      	ldr	r0, [pc, #640]	; (8006368 <Go+0x328>)
 80060e8:	eb0d 0102 	add.w	r1, sp, r2
 80060ec:	f001 fd75 	bl	8007bda <strncmp>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d05e      	beq.n	80061b2 <Go+0x172>
  {
    SST25_EraseSector_4K(0);
 80060f4:	2000      	movs	r0, #0
 80060f6:	f7fe fd17 	bl	8004b28 <SST25_EraseSector_4K>
    SST25_WriteBlock(0, current_uuid, 36);
 80060fa:	2224      	movs	r2, #36	; 0x24
 80060fc:	499a      	ldr	r1, [pc, #616]	; (8006368 <Go+0x328>)
 80060fe:	2000      	movs	r0, #0
 8006100:	f7fe fd68 	bl	8004bd4 <SST25_WriteBlock>

    si468x_DAB_band_scan();
 8006104:	f7ff fce8 	bl	8005ad8 <si468x_DAB_band_scan>
  else
    HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, 1);
  //
  PA_Initialize(0);
  //PA_Initialize(1); // Headphones.
  PA_SetMasterVolume(PA_MasterVolume_dB);
 8006108:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 80063b0 <Go+0x370>
  PA_Initialize(0);
 800610c:	2000      	movs	r0, #0
 800610e:	f7ff f823 	bl	8005158 <PA_Initialize>
    HandleHALResult(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)AudioOutputBuffer, (uint16_t)(AudioData_NumChannels * AudioBuffer_NumSamplesTotal)), "HAL_SAI_Transmit_DMA");
  }

  DAC_Mute(0);

  uint16_t num_services = 0, current_service_id = 0;
 8006112:	2600      	movs	r6, #0
  PA_SetMasterVolume(PA_MasterVolume_dB);
 8006114:	ed9b 0a00 	vldr	s0, [fp]
  SST25_ReadBlock(4096, (uint8_t *) &num_services, 2);
  ChangeService = 1;
 8006118:	2501      	movs	r5, #1
  PA_SetMasterVolume(PA_MasterVolume_dB);
 800611a:	f7fe fff3 	bl	8005104 <PA_SetMasterVolume>
    HandleHALResult(HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)AudioInputBuffer, (uint16_t)(AudioData_NumChannels * AudioBuffer_NumSamplesTotal)), "HAL_SAI_Receive_DMA");
 800611e:	2240      	movs	r2, #64	; 0x40
 8006120:	4992      	ldr	r1, [pc, #584]	; (800636c <Go+0x32c>)
  uint8_t UserButtonPressed = 0;
 8006122:	46b1      	mov	r9, r6
    HandleHALResult(HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)AudioInputBuffer, (uint16_t)(AudioData_NumChannels * AudioBuffer_NumSamplesTotal)), "HAL_SAI_Receive_DMA");
 8006124:	4892      	ldr	r0, [pc, #584]	; (8006370 <Go+0x330>)
 8006126:	f7fc fcc5 	bl	8002ab4 <HAL_SAI_Receive_DMA>
 800612a:	4992      	ldr	r1, [pc, #584]	; (8006374 <Go+0x334>)
 800612c:	f7fe fe30 	bl	8004d90 <HandleHALResult>
    HandleHALResult(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)AudioOutputBuffer, (uint16_t)(AudioData_NumChannels * AudioBuffer_NumSamplesTotal)), "HAL_SAI_Transmit_DMA");
 8006130:	2240      	movs	r2, #64	; 0x40
 8006132:	4991      	ldr	r1, [pc, #580]	; (8006378 <Go+0x338>)
 8006134:	4891      	ldr	r0, [pc, #580]	; (800637c <Go+0x33c>)
 8006136:	f7fc fc6d 	bl	8002a14 <HAL_SAI_Transmit_DMA>
 800613a:	4991      	ldr	r1, [pc, #580]	; (8006380 <Go+0x340>)
 800613c:	f7fe fe28 	bl	8004d90 <HandleHALResult>
  DAC_Mute(0);
 8006140:	2000      	movs	r0, #0
 8006142:	f7fe ff6d 	bl	8005020 <DAC_Mute>
  SST25_ReadBlock(4096, (uint8_t *) &num_services, 2);
 8006146:	2202      	movs	r2, #2
 8006148:	f10d 011a 	add.w	r1, sp, #26
 800614c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  ChangeService = 1;
 8006150:	f8df a260 	ldr.w	sl, [pc, #608]	; 80063b4 <Go+0x374>

  Mode = mdDAB;
 8006154:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80063b8 <Go+0x378>
  uint16_t num_services = 0, current_service_id = 0;
 8006158:	f8ad 601a 	strh.w	r6, [sp, #26]
  SST25_ReadBlock(4096, (uint8_t *) &num_services, 2);
 800615c:	f7fe fdb8 	bl	8004cd0 <SST25_ReadBlock>
  Mode = mdDAB;
 8006160:	2303      	movs	r3, #3
  ChangeService = 1;
 8006162:	f88a 5000 	strb.w	r5, [sl]
      UserButtonPressed = 0;

    if (XPT2046_Sample(&Touch_RawX, &Touch_RawY, &Touch_RawZ))
    {
      XPT2046_ConvertRawToScreen(Touch_RawX, Touch_RawY, &Touch_ScreenX, &Touch_ScreenY);
      AudioTransferGain = Clamp_float((float)Touch_ScreenY / 320.0f, 0.0f, 1.0f);
 8006166:	ed9f 8a87 	vldr	s16, [pc, #540]	; 8006384 <Go+0x344>
  Mode = mdDAB;
 800616a:	f888 3000 	strb.w	r3, [r8]
  uint16_t Y_Loop  = Y + ILI9341_GetFontYSpacing();
 800616e:	f7fe f9f5 	bl	800455c <ILI9341_GetFontYSpacing>
 8006172:	4438      	add	r0, r7
  AR1010_auto_tune(AR1010_Frequency, 1);
 8006174:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8006388 <Go+0x348>
  uint16_t Y_Loop  = Y + ILI9341_GetFontYSpacing();
 8006178:	b284      	uxth	r4, r0
  AR1010_auto_tune(AR1010_Frequency, 1);
 800617a:	4628      	mov	r0, r5
 800617c:	f7fd fdb8 	bl	8003cf0 <AR1010_auto_tune>
      ILI9341_DrawBar(0, Y_Loop, 240, 430 - Y_Loop, ILI9341_COLOR_BLACK);
 8006180:	f5c4 73d7 	rsb	r3, r4, #430	; 0x1ae
 8006184:	b29b      	uxth	r3, r3
 8006186:	ee08 3a90 	vmov	s17, r3
    if (ModeChanged)
 800618a:	b1f5      	cbz	r5, 80061ca <Go+0x18a>
      ILI9341_DrawBar(0, Y_Loop, 240, 430 - Y_Loop, ILI9341_COLOR_BLACK);
 800618c:	2000      	movs	r0, #0
 800618e:	ee18 3a90 	vmov	r3, s17
 8006192:	22f0      	movs	r2, #240	; 0xf0
 8006194:	4621      	mov	r1, r4
 8006196:	9000      	str	r0, [sp, #0]
 8006198:	f7fe f954 	bl	8004444 <ILI9341_DrawBar>
      switch(Mode)
 800619c:	f898 3000 	ldrb.w	r3, [r8]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d00c      	beq.n	80061be <Go+0x17e>
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	f000 80d0 	beq.w	800634a <Go+0x30a>
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d10d      	bne.n	80061ca <Go+0x18a>
          ADC_SelectSource(ADC_Source_BlueJack);
 80061ae:	2002      	movs	r0, #2
 80061b0:	e006      	b.n	80061c0 <Go+0x180>
    HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, 1);
 80061b2:	2201      	movs	r2, #1
 80061b4:	2108      	movs	r1, #8
 80061b6:	4875      	ldr	r0, [pc, #468]	; (800638c <Go+0x34c>)
 80061b8:	f7fa fd72 	bl	8000ca0 <HAL_GPIO_WritePin>
 80061bc:	e7a4      	b.n	8006108 <Go+0xc8>
          ADC_SelectSource(ADC_Source_AR1010);
 80061be:	2001      	movs	r0, #1
          ADC_SelectSource(ADC_Source_BlueJack);
 80061c0:	f7fe fec5 	bl	8004f4e <ADC_SelectSource>
          I2S_SelectSource(I2S_Source_ADC);
 80061c4:	2003      	movs	r0, #3
          I2S_SelectSource(I2S_Source_Si4684);
 80061c6:	f7fe fe7f 	bl	8004ec8 <I2S_SelectSource>
    if (ChangeService)
 80061ca:	f89a 3000 	ldrb.w	r3, [sl]
 80061ce:	b1ab      	cbz	r3, 80061fc <Go+0x1bc>
      switch (Mode)
 80061d0:	f898 3000 	ldrb.w	r3, [r8]
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d10e      	bne.n	80061f6 <Go+0x1b6>
          si468x_DAB_tune_service(current_service_id);
 80061d8:	4630      	mov	r0, r6
 80061da:	f7ff fe0e 	bl	8005dfa <si468x_DAB_tune_service>
          JSB_si468x_load_service_name_from_flash(current_service_id, DAB_ServiceName, DAB_ServiceNameMaxLength);
 80061de:	4630      	mov	r0, r6
          ++current_service_id;
 80061e0:	3601      	adds	r6, #1
          JSB_si468x_load_service_name_from_flash(current_service_id, DAB_ServiceName, DAB_ServiceNameMaxLength);
 80061e2:	2280      	movs	r2, #128	; 0x80
 80061e4:	496a      	ldr	r1, [pc, #424]	; (8006390 <Go+0x350>)
          ++current_service_id;
 80061e6:	b2b6      	uxth	r6, r6
          JSB_si468x_load_service_name_from_flash(current_service_id, DAB_ServiceName, DAB_ServiceNameMaxLength);
 80061e8:	f7ff fe17 	bl	8005e1a <JSB_si468x_load_service_name_from_flash>
          if (current_service_id >= num_services)
 80061ec:	f8bd 301a 	ldrh.w	r3, [sp, #26]
            current_service_id = 0;
 80061f0:	42b3      	cmp	r3, r6
 80061f2:	bf98      	it	ls
 80061f4:	2600      	movls	r6, #0
      ChangeService = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	f88a 3000 	strb.w	r3, [sl]
    if (IsUserButtonPressed())
 80061fc:	f7fe fe58 	bl	8004eb0 <IsUserButtonPressed>
 8006200:	4607      	mov	r7, r0
 8006202:	2800      	cmp	r0, #0
 8006204:	f000 80a4 	beq.w	8006350 <Go+0x310>
      if (!UserButtonPressed)
 8006208:	f1b9 0f00 	cmp.w	r9, #0
 800620c:	f040 809f 	bne.w	800634e <Go+0x30e>
        Mode = Mode + 1;
 8006210:	f898 3000 	ldrb.w	r3, [r8]
 8006214:	2501      	movs	r5, #1
 8006216:	3301      	adds	r3, #1
        UserButtonPressed = 1;
 8006218:	462f      	mov	r7, r5
        Mode = Mode + 1;
 800621a:	b2db      	uxtb	r3, r3
        if (Mode == mdNumModes)
 800621c:	2b04      	cmp	r3, #4
        Mode = Mode + 1;
 800621e:	bf14      	ite	ne
 8006220:	f888 3000 	strbne.w	r3, [r8]
          Mode =1;
 8006224:	f888 5000 	strbeq.w	r5, [r8]
    if (XPT2046_Sample(&Touch_RawX, &Touch_RawY, &Touch_RawZ))
 8006228:	aa05      	add	r2, sp, #20
 800622a:	f10d 0112 	add.w	r1, sp, #18
 800622e:	a804      	add	r0, sp, #16
 8006230:	f7fe fb88 	bl	8004944 <XPT2046_Sample>
 8006234:	b398      	cbz	r0, 800629e <Go+0x25e>
      XPT2046_ConvertRawToScreen(Touch_RawX, Touch_RawY, &Touch_ScreenX, &Touch_ScreenY);
 8006236:	ab06      	add	r3, sp, #24
 8006238:	f10d 0216 	add.w	r2, sp, #22
 800623c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8006240:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8006244:	f7fe fbf2 	bl	8004a2c <XPT2046_ConvertRawToScreen>
      AudioTransferGain = Clamp_float((float)Touch_ScreenY / 320.0f, 0.0f, 1.0f);
 8006248:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800624c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8006394 <Go+0x354>
 8006250:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef0 0a48 	vmov.f32	s1, s16
 800625c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006260:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006264:	f7fd fdda 	bl	8003e1c <Clamp_float>
 8006268:	4b4b      	ldr	r3, [pc, #300]	; (8006398 <Go+0x358>)

      PA_MasterVolume_dB = 20.0f - 80.0f * (1.0f - ((float)Touch_ScreenX / 240.0f));
 800626a:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800639c <Go+0x35c>
      AudioTransferGain = Clamp_float((float)Touch_ScreenY / 320.0f, 0.0f, 1.0f);
 800626e:	ed83 0a00 	vstr	s0, [r3]
      PA_MasterVolume_dB = 20.0f - 80.0f * (1.0f - ((float)Touch_ScreenX / 240.0f));
 8006272:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8006276:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800627a:	ee07 3a10 	vmov	s14, r3
 800627e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006282:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006286:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80063a0 <Go+0x360>
 800628a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800628e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006292:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006296:	ed8b 0a00 	vstr	s0, [fp]
      PA_SetMasterVolume(PA_MasterVolume_dB);
 800629a:	f7fe ff33 	bl	8005104 <PA_SetMasterVolume>
//      sprintf(S, "Frequency: %0.1f    ", AR1010_Frequency);
//      Y += ILI9341_GetFontYSpacing();
//      ILI9341_DrawTextAtXY(S, 0, Y, tpLeft);
//    }
//
    if (Mode == mdDAB)
 800629e:	f898 3000 	ldrb.w	r3, [r8]
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d10d      	bne.n	80062c2 <Go+0x282>
    {
      sprintf(S, "Name: %s         ", DAB_ServiceName);
 80062a6:	4a3a      	ldr	r2, [pc, #232]	; (8006390 <Go+0x350>)
 80062a8:	a812      	add	r0, sp, #72	; 0x48
 80062aa:	493e      	ldr	r1, [pc, #248]	; (80063a4 <Go+0x364>)
 80062ac:	f001 fc32 	bl	8007b14 <siprintf>
      Y += ILI9341_GetFontYSpacing();
 80062b0:	f7fe f954 	bl	800455c <ILI9341_GetFontYSpacing>
 80062b4:	4420      	add	r0, r4
      ILI9341_DrawTextAtXY(S, 0, Y, tpLeft);
 80062b6:	2301      	movs	r3, #1
 80062b8:	2100      	movs	r1, #0
 80062ba:	b282      	uxth	r2, r0
 80062bc:	a812      	add	r0, sp, #72	; 0x48
 80062be:	f7fe fae3 	bl	8004888 <ILI9341_DrawTextAtXY>
//      Y += ILI9341_GetFontYSpacing();
//      ILI9341_DrawTextAtXY(S, 0, Y, tpLeft);
    }

    uint32_t PA_LeftMagnitude, PA_RightMagnitude;
    PA_ReadPWMLevelMeter(&PA_LeftMagnitude, &PA_RightMagnitude);
 80062c2:	a908      	add	r1, sp, #32
 80062c4:	a807      	add	r0, sp, #28
 80062c6:	f7fe ff83 	bl	80051d0 <PA_ReadPWMLevelMeter>
    float Brightness1 = Clamp_float((float)PA_LeftMagnitude / 10000000.0f, 0.0f, 1.0f);
 80062ca:	eddd 7a07 	vldr	s15, [sp, #28]
 80062ce:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80063a8 <Go+0x368>
 80062d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80062d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
  {
 80062da:	46b9      	mov	r9, r7
    float Brightness1 = Clamp_float((float)PA_LeftMagnitude / 10000000.0f, 0.0f, 1.0f);
 80062dc:	eef0 0a48 	vmov.f32	s1, s16
 80062e0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80062e4:	f7fd fd9a 	bl	8003e1c <Clamp_float>
    float Brightness2 = Brightness1 * Brightness1;
    float Brightness3 = Brightness1 * Brightness2;
    uint32_t Color = ((uint8_t) round(255 * Brightness2)) << 16 | ((uint8_t) round(255 * Brightness3)) << 8 | ((uint8_t)round(255 * Brightness1));
 80062e8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80063ac <Go+0x36c>
    float Brightness2 = Brightness1 * Brightness1;
 80062ec:	ee20 6a00 	vmul.f32	s12, s0, s0
    uint32_t Color = ((uint8_t) round(255 * Brightness2)) << 16 | ((uint8_t) round(255 * Brightness3)) << 8 | ((uint8_t)round(255 * Brightness1));
 80062f0:	ee26 5a07 	vmul.f32	s10, s12, s14
    float Brightness3 = Brightness1 * Brightness2;
 80062f4:	ee20 6a06 	vmul.f32	s12, s0, s12
    uint32_t Color = ((uint8_t) round(255 * Brightness2)) << 16 | ((uint8_t) round(255 * Brightness3)) << 8 | ((uint8_t)round(255 * Brightness1));
 80062f8:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80062fc:	ee26 6a07 	vmul.f32	s12, s12, s14
 8006300:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006304:	feb8 5b45 	vrinta.f64	d5, d5
 8006308:	eefc 5bc5 	vcvt.u32.f64	s11, d5
 800630c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8006310:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8006314:	edcd 5a03 	vstr	s11, [sp, #12]
 8006318:	feb8 6b46 	vrinta.f64	d6, d6
 800631c:	eefc 6bc6 	vcvt.u32.f64	s13, d6
 8006320:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8006324:	feb8 7b47 	vrinta.f64	d7, d7
 8006328:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800632c:	edcd 6a03 	vstr	s13, [sp, #12]
 8006330:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006334:	edcd 7a03 	vstr	s15, [sp, #12]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800633e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    SetColor(Color);
 8006342:	4318      	orrs	r0, r3
 8006344:	f7ff fdd0 	bl	8005ee8 <SetColor>
  {
 8006348:	e71f      	b.n	800618a <Go+0x14a>
          I2S_SelectSource(I2S_Source_Si4684);
 800634a:	2002      	movs	r0, #2
 800634c:	e73b      	b.n	80061c6 <Go+0x186>
 800634e:	464f      	mov	r7, r9
 8006350:	2500      	movs	r5, #0
 8006352:	e769      	b.n	8006228 <Go+0x1e8>
 8006354:	40020c00 	.word	0x40020c00
 8006358:	08009f64 	.word	0x08009f64
 800635c:	08009ecc 	.word	0x08009ecc
 8006360:	08009ee2 	.word	0x08009ee2
 8006364:	08009ef4 	.word	0x08009ef4
 8006368:	08009f02 	.word	0x08009f02
 800636c:	200008cc 	.word	0x200008cc
 8006370:	20000da4 	.word	0x20000da4
 8006374:	08009f27 	.word	0x08009f27
 8006378:	200009cc 	.word	0x200009cc
 800637c:	20000d20 	.word	0x20000d20
 8006380:	08009f3b 	.word	0x08009f3b
 8006384:	00000000 	.word	0x00000000
 8006388:	42cb6666 	.word	0x42cb6666
 800638c:	40020000 	.word	0x40020000
 8006390:	20000acd 	.word	0x20000acd
 8006394:	43a00000 	.word	0x43a00000
 8006398:	200003ec 	.word	0x200003ec
 800639c:	43700000 	.word	0x43700000
 80063a0:	42a00000 	.word	0x42a00000
 80063a4:	08009f50 	.word	0x08009f50
 80063a8:	4b189680 	.word	0x4b189680
 80063ac:	437f0000 	.word	0x437f0000
 80063b0:	200003f0 	.word	0x200003f0
 80063b4:	20000acc 	.word	0x20000acc
 80063b8:	20000b4d 	.word	0x20000b4d

080063bc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 80063bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063c2:	2214      	movs	r2, #20
 80063c4:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 80063c6:	4f73      	ldr	r7, [pc, #460]	; (8006594 <MX_GPIO_Init+0x1d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063c8:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 80063ca:	4e73      	ldr	r6, [pc, #460]	; (8006598 <MX_GPIO_Init+0x1dc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063cc:	f000 fe4a 	bl	8007064 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80063d0:	4b72      	ldr	r3, [pc, #456]	; (800659c <MX_GPIO_Init+0x1e0>)
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 80063d2:	4638      	mov	r0, r7
 80063d4:	2124      	movs	r1, #36	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80063d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063d8:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 80063da:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 80065a4 <MX_GPIO_Init+0x1e8>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063de:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80063e0:	f042 0210 	orr.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin 
 80063e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80065a8 <MX_GPIO_Init+0x1ec>
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 80063e8:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 80065ac <MX_GPIO_Init+0x1f0>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063ec:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
 80063f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f4:	f002 0210 	and.w	r2, r2, #16
 80063f8:	9201      	str	r2, [sp, #4]
 80063fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80063fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063fe:	f042 0204 	orr.w	r2, r2, #4
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
 8006404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006406:	f002 0204 	and.w	r2, r2, #4
 800640a:	9202      	str	r2, [sp, #8]
 800640c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800640e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006410:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006414:	631a      	str	r2, [r3, #48]	; 0x30
 8006416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006418:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800641c:	9203      	str	r2, [sp, #12]
 800641e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
 8006428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800642a:	f002 0201 	and.w	r2, r2, #1
 800642e:	9204      	str	r2, [sp, #16]
 8006430:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006434:	f042 0202 	orr.w	r2, r2, #2
 8006438:	631a      	str	r2, [r3, #48]	; 0x30
 800643a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643c:	f002 0202 	and.w	r2, r2, #2
 8006440:	9205      	str	r2, [sp, #20]
 8006442:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006446:	f042 0208 	orr.w	r2, r2, #8
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 800644c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	9306      	str	r3, [sp, #24]
 8006456:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 8006458:	f7fa fc22 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 800645c:	4638      	mov	r0, r7
 800645e:	2200      	movs	r2, #0
 8006460:	2112      	movs	r1, #18
 8006462:	f7fa fc1d 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8006466:	4630      	mov	r0, r6
 8006468:	2201      	movs	r2, #1
 800646a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800646e:	f7fa fc17 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 8006472:	4630      	mov	r0, r6
 8006474:	2200      	movs	r2, #0
 8006476:	210f      	movs	r1, #15
 8006478:	f7fa fc12 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 800647c:	4658      	mov	r0, fp
 800647e:	2200      	movs	r2, #0
 8006480:	210e      	movs	r1, #14
 8006482:	f7fa fc0d 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin 
 8006486:	4640      	mov	r0, r8
 8006488:	2200      	movs	r2, #0
 800648a:	f641 0143 	movw	r1, #6211	; 0x1843
 800648e:	f7fa fc07 	bl	8000ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8006492:	2200      	movs	r2, #0
 8006494:	4650      	mov	r0, sl
 8006496:	217f      	movs	r1, #127	; 0x7f
 8006498:	f7fa fc02 	bl	8000ca0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800649c:	2324      	movs	r3, #36	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800649e:	a907      	add	r1, sp, #28
 80064a0:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064a2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80064a6:	e9cd 4909 	strd	r4, r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064aa:	f7fa fb01 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 80064ae:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064b0:	a907      	add	r1, sp, #28
 80064b2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064b6:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064ba:	f7fa faf9 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_B_EN_Pin|ESP32_A_EN_Pin;
 80064be:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064c0:	a907      	add	r1, sp, #28
 80064c2:	4638      	mov	r0, r7

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80064c4:	4f36      	ldr	r7, [pc, #216]	; (80065a0 <MX_GPIO_Init+0x1e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064c6:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ca:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80064ce:	f7fa faef 	bl	8000ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80064d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 80064d6:	a907      	add	r1, sp, #28
 80064d8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064da:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80064dc:	e9cd 3707 	strd	r3, r7, [sp, #28]
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 80064e0:	f7fa fae6 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin|LCD_RST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin 
 80064e4:	f248 030f 	movw	r3, #32783	; 0x800f
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064e8:	a907      	add	r1, sp, #28
 80064ea:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064ec:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064f0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064f4:	f7fa fadc 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 80064f8:	230e      	movs	r3, #14
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064fa:	a907      	add	r1, sp, #28
 80064fc:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064fe:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006502:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006506:	f7fa fad3 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin;
 800650a:	f640 0303 	movw	r3, #2051	; 0x803
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800650e:	a907      	add	r1, sp, #28
 8006510:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006512:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006516:	e9cd 4909 	strd	r4, r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800651a:	f7fa fac9 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 800651e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006522:	a907      	add	r1, sp, #28
 8006524:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006526:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800652a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800652e:	f7fa fabf 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006532:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006536:	a907      	add	r1, sp, #28
 8006538:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800653a:	e9cd 3907 	strd	r3, r9, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800653e:	2305      	movs	r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006540:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006544:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006546:	f7fa fab3 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 800654a:	237f      	movs	r3, #127	; 0x7f
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800654c:	a907      	add	r1, sp, #28
 800654e:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006550:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006554:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006558:	f7fa faaa 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
 800655c:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 800655e:	a907      	add	r1, sp, #28
 8006560:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006562:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006564:	e9cd 3707 	strd	r3, r7, [sp, #28]
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 8006568:	f7fa faa2 	bl	8000ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800656c:	4622      	mov	r2, r4
 800656e:	4621      	mov	r1, r4
 8006570:	2017      	movs	r0, #23
 8006572:	f7fa f8a5 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006576:	2017      	movs	r0, #23
 8006578:	f7fa f8d4 	bl	8000724 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800657c:	4622      	mov	r2, r4
 800657e:	4621      	mov	r1, r4
 8006580:	2028      	movs	r0, #40	; 0x28
 8006582:	f7fa f89d 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006586:	2028      	movs	r0, #40	; 0x28
 8006588:	f7fa f8cc 	bl	8000724 <HAL_NVIC_EnableIRQ>

}
 800658c:	b00d      	add	sp, #52	; 0x34
 800658e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006592:	bf00      	nop
 8006594:	40021000 	.word	0x40021000
 8006598:	40020800 	.word	0x40020800
 800659c:	40023800 	.word	0x40023800
 80065a0:	10210000 	.word	0x10210000
 80065a4:	40020000 	.word	0x40020000
 80065a8:	40020400 	.word	0x40020400
 80065ac:	40020c00 	.word	0x40020c00

080065b0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80065b0:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80065b2:	4812      	ldr	r0, [pc, #72]	; (80065fc <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x6000030D;
 80065b4:	4a12      	ldr	r2, [pc, #72]	; (8006600 <MX_I2C1_Init+0x50>)
 80065b6:	4b13      	ldr	r3, [pc, #76]	; (8006604 <MX_I2C1_Init+0x54>)
 80065b8:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80065bc:	2300      	movs	r3, #0
 80065be:	2201      	movs	r2, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 80065c0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80065c4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80065c8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80065cc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80065ce:	f7fa fd26 	bl	800101e <HAL_I2C_Init>
 80065d2:	b108      	cbz	r0, 80065d8 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 80065d4:	f000 f8a0 	bl	8006718 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80065d8:	2100      	movs	r1, #0
 80065da:	4808      	ldr	r0, [pc, #32]	; (80065fc <MX_I2C1_Init+0x4c>)
 80065dc:	f7fb fa6a 	bl	8001ab4 <HAL_I2CEx_ConfigAnalogFilter>
 80065e0:	b108      	cbz	r0, 80065e6 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 80065e2:	f000 f899 	bl	8006718 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80065e6:	2100      	movs	r1, #0
 80065e8:	4804      	ldr	r0, [pc, #16]	; (80065fc <MX_I2C1_Init+0x4c>)
 80065ea:	f7fb fa89 	bl	8001b00 <HAL_I2CEx_ConfigDigitalFilter>
 80065ee:	b118      	cbz	r0, 80065f8 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 80065f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80065f4:	f000 b890 	b.w	8006718 <Error_Handler>
}
 80065f8:	bd08      	pop	{r3, pc}
 80065fa:	bf00      	nop
 80065fc:	20000c10 	.word	0x20000c10
 8006600:	40005400 	.word	0x40005400
 8006604:	6000030d 	.word	0x6000030d

08006608 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006608:	b530      	push	{r4, r5, lr}
 800660a:	b089      	sub	sp, #36	; 0x24
 800660c:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800660e:	2214      	movs	r2, #20
 8006610:	2100      	movs	r1, #0
 8006612:	a803      	add	r0, sp, #12
 8006614:	f000 fd26 	bl	8007064 <memset>
  if(i2cHandle->Instance==I2C1)
 8006618:	682a      	ldr	r2, [r5, #0]
 800661a:	4b38      	ldr	r3, [pc, #224]	; (80066fc <HAL_I2C_MspInit+0xf4>)
 800661c:	429a      	cmp	r2, r3
 800661e:	d16a      	bne.n	80066f6 <HAL_I2C_MspInit+0xee>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006620:	4c37      	ldr	r4, [pc, #220]	; (8006700 <HAL_I2C_MspInit+0xf8>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006622:	f44f 7140 	mov.w	r1, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006626:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006628:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800662a:	f043 0302 	orr.w	r3, r3, #2
 800662e:	6323      	str	r3, [r4, #48]	; 0x30
 8006630:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800663a:	2312      	movs	r3, #18
 800663c:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006640:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006642:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006644:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006648:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800664a:	482e      	ldr	r0, [pc, #184]	; (8006704 <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800664c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800664e:	f7fa fa2f 	bl	8000ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006652:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006654:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8006658:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8006714 <HAL_I2C_MspInit+0x10c>
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800665c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006664:	6423      	str	r3, [r4, #64]	; 0x40
 8006666:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8006668:	4c27      	ldr	r4, [pc, #156]	; (8006708 <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 800666a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800666e:	4620      	mov	r0, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006670:	9302      	str	r3, [sp, #8]
 8006672:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8006674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006678:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800667c:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800667e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006686:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800668a:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800668e:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006692:	f7fa f87f 	bl	8000794 <HAL_DMA_Init>
 8006696:	b108      	cbz	r0, 800669c <HAL_I2C_MspInit+0x94>
    {
      Error_Handler();
 8006698:	f000 f83e 	bl	8006718 <Error_Handler>

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800669c:	4a1b      	ldr	r2, [pc, #108]	; (800670c <HAL_I2C_MspInit+0x104>)
 800669e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80066a2:	63ac      	str	r4, [r5, #56]	; 0x38
 80066a4:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80066a6:	4c1a      	ldr	r4, [pc, #104]	; (8006710 <HAL_I2C_MspInit+0x108>)
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80066a8:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066ac:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80066b2:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066b4:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80066b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066bc:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80066c0:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066c4:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80066c8:	f7fa f864 	bl	8000794 <HAL_DMA_Init>
 80066cc:	b108      	cbz	r0, 80066d2 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80066ce:	f000 f823 	bl	8006718 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80066d2:	2200      	movs	r2, #0
 80066d4:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80066d6:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80066d8:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80066da:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80066dc:	f7f9 fff0 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80066e0:	201f      	movs	r0, #31
 80066e2:	f7fa f81f 	bl	8000724 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80066e6:	2200      	movs	r2, #0
 80066e8:	2020      	movs	r0, #32
 80066ea:	4611      	mov	r1, r2
 80066ec:	f7f9 ffe8 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80066f0:	2020      	movs	r0, #32
 80066f2:	f7fa f817 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80066f6:	b009      	add	sp, #36	; 0x24
 80066f8:	bd30      	pop	{r4, r5, pc}
 80066fa:	bf00      	nop
 80066fc:	40005400 	.word	0x40005400
 8006700:	40023800 	.word	0x40023800
 8006704:	40020400 	.word	0x40020400
 8006708:	20000bb0 	.word	0x20000bb0
 800670c:	40026088 	.word	0x40026088
 8006710:	20000b50 	.word	0x20000b50
 8006714:	400260a0 	.word	0x400260a0

08006718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006718:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
    ToggleLED(LED_Red);
 800671a:	2001      	movs	r0, #1
 800671c:	f7fe fbb6 	bl	8004e8c <ToggleLED>
    HAL_Delay(50);
 8006720:	2032      	movs	r0, #50	; 0x32
 8006722:	f7f9 ffa9 	bl	8000678 <HAL_Delay>
    ToggleLED(LED_Red);
 8006726:	2001      	movs	r0, #1
 8006728:	f7fe fbb0 	bl	8004e8c <ToggleLED>
    HAL_Delay(50);
 800672c:	2032      	movs	r0, #50	; 0x32
 800672e:	f7f9 ffa3 	bl	8000678 <HAL_Delay>
  while(1) 
 8006732:	e7f2      	b.n	800671a <Error_Handler+0x2>

08006734 <SystemClock_Config>:
{
 8006734:	b510      	push	{r4, lr}
 8006736:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006738:	222c      	movs	r2, #44	; 0x2c
 800673a:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800673c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800673e:	a809      	add	r0, sp, #36	; 0x24
 8006740:	f000 fc90 	bl	8007064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006744:	2214      	movs	r2, #20
 8006746:	2100      	movs	r1, #0
 8006748:	a802      	add	r0, sp, #8
 800674a:	f000 fc8b 	bl	8007064 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800674e:	2290      	movs	r2, #144	; 0x90
 8006750:	2100      	movs	r1, #0
 8006752:	a814      	add	r0, sp, #80	; 0x50
 8006754:	f000 fc86 	bl	8007064 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8006758:	4b26      	ldr	r3, [pc, #152]	; (80067f4 <SystemClock_Config+0xc0>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800675a:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLN = 432;
 800675c:	f04f 0c19 	mov.w	ip, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8006760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006762:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006766:	641a      	str	r2, [r3, #64]	; 0x40
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006772:	4b21      	ldr	r3, [pc, #132]	; (80067f8 <SystemClock_Config+0xc4>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006786:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800678a:	e9cd 0307 	strd	r0, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800678e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006792:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006794:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
 8006798:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800679c:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 432;
 80067a0:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067a4:	f7fb fa0a 	bl	8001bbc <HAL_RCC_OscConfig>
 80067a8:	b108      	cbz	r0, 80067ae <SystemClock_Config+0x7a>
    Error_Handler();
 80067aa:	f7ff ffb5 	bl	8006718 <Error_Handler>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80067ae:	f7fb f9cd 	bl	8001b4c <HAL_PWREx_EnableOverDrive>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d1f9      	bne.n	80067aa <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067b6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80067b8:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067bc:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80067be:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80067c0:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80067c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067c8:	e9cd 1305 	strd	r1, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80067cc:	2107      	movs	r1, #7
 80067ce:	f7fb fbbb 	bl	8001f48 <HAL_RCC_ClockConfig>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d1e9      	bne.n	80067aa <SystemClock_Config+0x76>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1;
 80067d6:	f44f 1382 	mov.w	r3, #1064960	; 0x104000
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80067da:	902d      	str	r0, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067dc:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1;
 80067de:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PIN;
 80067e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80067e4:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067e6:	f7fb fc4b 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d1dd      	bne.n	80067aa <SystemClock_Config+0x76>
}
 80067ee:	b038      	add	sp, #224	; 0xe0
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	bf00      	nop
 80067f4:	40023800 	.word	0x40023800
 80067f8:	40007000 	.word	0x40007000

080067fc <main>:
{
 80067fc:	b508      	push	{r3, lr}
  __ASM volatile ("dsb 0xF":::"memory");
 80067fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006802:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006806:	4c33      	ldr	r4, [pc, #204]	; (80068d4 <main+0xd8>)
 8006808:	2200      	movs	r2, #0
 800680a:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800680e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006812:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006816:	6963      	ldr	r3, [r4, #20]
 8006818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800681c:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800681e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006822:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8006826:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800682a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800682e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006832:	f643 70e0 	movw	r0, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006836:	f3c3 01c9 	ubfx	r1, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800683a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800683e:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006840:	ea03 0600 	and.w	r6, r3, r0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006844:	460a      	mov	r2, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006846:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 800684a:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800684c:	f8c4 5260 	str.w	r5, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 8006850:	d2f9      	bcs.n	8006846 <main+0x4a>
    } while(sets-- != 0U);
 8006852:	3b20      	subs	r3, #32
 8006854:	f113 0f20 	cmn.w	r3, #32
 8006858:	d1f2      	bne.n	8006840 <main+0x44>
 800685a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800685e:	6963      	ldr	r3, [r4, #20]
 8006860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006864:	6163      	str	r3, [r4, #20]
 8006866:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800686a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800686e:	f7f9 fee5 	bl	800063c <HAL_Init>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT.
 8006872:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
  DWT->LAR = 0xC5ACCE55; // Unlock register access.
 8006876:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <main+0xdc>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT.
 8006878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800687c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
  *DWT_CYCCNT = 0;
 8006880:	2400      	movs	r4, #0
  DWT->LAR = 0xC5ACCE55; // Unlock register access.
 8006882:	4b16      	ldr	r3, [pc, #88]	; (80068dc <main+0xe0>)
 8006884:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  *DWT_CYCCNT = 0;
 8006888:	605c      	str	r4, [r3, #4]
  DWT_CTRL |= CYCCNTENA; // Enable CPU_CYCLES.
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	f042 0201 	orr.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]
  SystemClock_Config();
 8006892:	f7ff ff4f 	bl	8006734 <SystemClock_Config>
  MX_GPIO_Init();
 8006896:	f7ff fd91 	bl	80063bc <MX_GPIO_Init>
  MX_DMA_Init();
 800689a:	f7ff fadb 	bl	8005e54 <MX_DMA_Init>
  MX_I2C1_Init();
 800689e:	f7ff fe87 	bl	80065b0 <MX_I2C1_Init>
  MX_SAI2_Init();
 80068a2:	f000 f823 	bl	80068ec <MX_SAI2_Init>
  MX_SPI1_Init();
 80068a6:	f000 f903 	bl	8006ab0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80068aa:	f000 f927 	bl	8006afc <MX_SPI2_Init>
  MX_SPI3_Init();
 80068ae:	f000 f94d 	bl	8006b4c <MX_SPI3_Init>
  MX_TIM1_Init();
 80068b2:	f000 fb03 	bl	8006ebc <MX_TIM1_Init>
  ILI9341_Initialize(&hspi1, 0);
 80068b6:	4621      	mov	r1, r4
 80068b8:	4809      	ldr	r0, [pc, #36]	; (80068e0 <main+0xe4>)
 80068ba:	f7fd fb63 	bl	8003f84 <ILI9341_Initialize>
  HAL_GPIO_WritePin(LCD_NBACKLIGHT_GPIO_Port, LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET); // Backlight on.
 80068be:	4622      	mov	r2, r4
 80068c0:	2108      	movs	r1, #8
 80068c2:	4808      	ldr	r0, [pc, #32]	; (80068e4 <main+0xe8>)
 80068c4:	f7fa f9ec 	bl	8000ca0 <HAL_GPIO_WritePin>
  XPT2046_Initialize(&hspi2);
 80068c8:	4807      	ldr	r0, [pc, #28]	; (80068e8 <main+0xec>)
 80068ca:	f7fe f835 	bl	8004938 <XPT2046_Initialize>
  Go();
 80068ce:	f7ff fbb7 	bl	8006040 <Go>
  while (1)
 80068d2:	e7fe      	b.n	80068d2 <main+0xd6>
 80068d4:	e000ed00 	.word	0xe000ed00
 80068d8:	c5acce55 	.word	0xc5acce55
 80068dc:	e0001000 	.word	0xe0001000
 80068e0:	20000e88 	.word	0x20000e88
 80068e4:	40020800 	.word	0x40020800
 80068e8:	20000eec 	.word	0x20000eec

080068ec <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80068ec:	b508      	push	{r3, lr}

  hsai_BlockA2.Instance = SAI2_Block_A;
 80068ee:	4817      	ldr	r0, [pc, #92]	; (800694c <MX_SAI2_Init+0x60>)
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80068f0:	2100      	movs	r1, #0
 80068f2:	4b17      	ldr	r3, [pc, #92]	; (8006950 <MX_SAI2_Init+0x64>)
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80068f4:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80068f6:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80068f8:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80068fa:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80068fc:	e9c0 3100 	strd	r3, r1, [r0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006900:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006904:	61c3      	str	r3, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006906:	2302      	movs	r3, #2
 8006908:	461a      	mov	r2, r3
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800690a:	e9c0 1104 	strd	r1, r1, [r0, #16]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800690e:	e9c0 1109 	strd	r1, r1, [r0, #36]	; 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006912:	f7fb ffe9 	bl	80028e8 <HAL_SAI_InitProtocol>
 8006916:	b108      	cbz	r0, 800691c <MX_SAI2_Init+0x30>
  {
    Error_Handler();
 8006918:	f7ff fefe 	bl	8006718 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 800691c:	480d      	ldr	r0, [pc, #52]	; (8006954 <MX_SAI2_Init+0x68>)
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800691e:	2303      	movs	r3, #3
 8006920:	4a0d      	ldr	r2, [pc, #52]	; (8006958 <MX_SAI2_Init+0x6c>)
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006922:	2100      	movs	r1, #0
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8006924:	e9c0 2300 	strd	r2, r3, [r0]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8006928:	2301      	movs	r3, #1
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800692a:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800692c:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800692e:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006930:	2302      	movs	r3, #2
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006932:	60c1      	str	r1, [r0, #12]
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006934:	461a      	mov	r2, r3
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006936:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8006938:	e9c0 1109 	strd	r1, r1, [r0, #36]	; 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800693c:	f7fb ffd4 	bl	80028e8 <HAL_SAI_InitProtocol>
 8006940:	b118      	cbz	r0, 800694a <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
  }

}
 8006942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006946:	f7ff bee7 	b.w	8006718 <Error_Handler>
}
 800694a:	bd08      	pop	{r3, pc}
 800694c:	20000d20 	.word	0x20000d20
 8006950:	40015c04 	.word	0x40015c04
 8006954:	20000da4 	.word	0x20000da4
 8006958:	40015c24 	.word	0x40015c24

0800695c <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800695c:	6802      	ldr	r2, [r0, #0]
 800695e:	4b49      	ldr	r3, [pc, #292]	; (8006a84 <HAL_SAI_MspInit+0x128>)
 8006960:	429a      	cmp	r2, r3
{
 8006962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006964:	4605      	mov	r5, r0
 8006966:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI2_Block_A)
 8006968:	d149      	bne.n	80069fe <HAL_SAI_MspInit+0xa2>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 800696a:	4847      	ldr	r0, [pc, #284]	; (8006a88 <HAL_SAI_MspInit+0x12c>)
 800696c:	6803      	ldr	r3, [r0, #0]
 800696e:	b94b      	cbnz	r3, 8006984 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8006970:	4a46      	ldr	r2, [pc, #280]	; (8006a8c <HAL_SAI_MspInit+0x130>)
 8006972:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006974:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006978:	6451      	str	r1, [r2, #68]	; 0x44
 800697a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800697c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8006980:	9201      	str	r2, [sp, #4]
 8006982:	9a01      	ldr	r2, [sp, #4]
    }
    SAI2_client ++;
 8006984:	3301      	adds	r3, #1
    PD13     ------> SAI2_SCK_A
    PE0     ------> SAI2_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006986:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8006988:	240a      	movs	r4, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800698a:	2702      	movs	r7, #2
    SAI2_client ++;
 800698c:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800698e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006992:	a903      	add	r1, sp, #12
 8006994:	483e      	ldr	r0, [pc, #248]	; (8006a90 <HAL_SAI_MspInit+0x134>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8006996:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006998:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800699c:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069a0:	f7fa f886 	bl	8000ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 80069a4:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 80069a6:	483b      	ldr	r0, [pc, #236]	; (8006a94 <HAL_SAI_MspInit+0x138>)
 80069a8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80069aa:	9407      	str	r4, [sp, #28]

    /* Peripheral DMA init*/
    
    hdma_sai2_a.Instance = DMA2_Stream2;
 80069ac:	4c3a      	ldr	r4, [pc, #232]	; (8006a98 <HAL_SAI_MspInit+0x13c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ae:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069b2:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 80069b6:	f7fa f87b 	bl	8000ab0 <HAL_GPIO_Init>
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 80069ba:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 80069be:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8006aac <HAL_SAI_MspInit+0x150>
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069c2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80069c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80069ca:	4620      	mov	r0, r4
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 80069cc:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069d0:	2340      	movs	r3, #64	; 0x40
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80069d2:	e9c4 3602 	strd	r3, r6, [r4, #8]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069da:	e9c4 e304 	strd	lr, r3, [r4, #16]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80069de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e2:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069e6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069ea:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80069ee:	f7f9 fed1 	bl	8000794 <HAL_DMA_Init>
 80069f2:	b108      	cbz	r0, 80069f8 <HAL_SAI_MspInit+0x9c>
    {
      Error_Handler();
 80069f4:	f7ff fe90 	bl	8006718 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80069f8:	672c      	str	r4, [r5, #112]	; 0x70
 80069fa:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80069fc:	66ec      	str	r4, [r5, #108]	; 0x6c
    }
    if(hsai->Instance==SAI2_Block_B)
 80069fe:	682a      	ldr	r2, [r5, #0]
 8006a00:	4b26      	ldr	r3, [pc, #152]	; (8006a9c <HAL_SAI_MspInit+0x140>)
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d13c      	bne.n	8006a80 <HAL_SAI_MspInit+0x124>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8006a06:	4820      	ldr	r0, [pc, #128]	; (8006a88 <HAL_SAI_MspInit+0x12c>)
 8006a08:	6803      	ldr	r3, [r0, #0]
 8006a0a:	b94b      	cbnz	r3, 8006a20 <HAL_SAI_MspInit+0xc4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8006a0c:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <HAL_SAI_MspInit+0x130>)
 8006a0e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006a10:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006a14:	6451      	str	r1, [r2, #68]	; 0x44
 8006a16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a18:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8006a1c:	9202      	str	r2, [sp, #8]
 8006a1e:	9a02      	ldr	r2, [sp, #8]
      }
    SAI2_client ++;
 8006a20:	3301      	adds	r3, #1
    
    /**SAI2_B_Block_B GPIO Configuration    
    PA0/WKUP     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a22:	2201      	movs	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a24:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8006a26:	a903      	add	r1, sp, #12
    SAI2_client ++;
 8006a28:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a2a:	2302      	movs	r3, #2
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8006a2c:	481c      	ldr	r0, [pc, #112]	; (8006aa0 <HAL_SAI_MspInit+0x144>)
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8006a2e:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai2_b.Instance = DMA2_Stream1;
 8006a32:	4c1c      	ldr	r4, [pc, #112]	; (8006aa4 <HAL_SAI_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a34:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8006a38:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a3a:	e9cd 6605 	strd	r6, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8006a3e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8006a40:	f7fa f836 	bl	8000ab0 <HAL_GPIO_Init>
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8006a44:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 8006a48:	4917      	ldr	r1, [pc, #92]	; (8006aa8 <HAL_SAI_MspInit+0x14c>)
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a4a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8006a4e:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a56:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8006a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8006a5e:	4620      	mov	r0, r4
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8006a60:	e9c4 7306 	strd	r7, r3, [r4, #24]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006a64:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a68:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a6c:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8006a70:	f7f9 fe90 	bl	8000794 <HAL_DMA_Init>
 8006a74:	b108      	cbz	r0, 8006a7a <HAL_SAI_MspInit+0x11e>
    {
      Error_Handler();
 8006a76:	f7ff fe4f 	bl	8006718 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8006a7a:	672c      	str	r4, [r5, #112]	; 0x70
 8006a7c:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8006a7e:	66ec      	str	r4, [r5, #108]	; 0x6c
    }
}
 8006a80:	b009      	add	sp, #36	; 0x24
 8006a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a84:	40015c04 	.word	0x40015c04
 8006a88:	20000c5c 	.word	0x20000c5c
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	40020c00 	.word	0x40020c00
 8006a94:	40021000 	.word	0x40021000
 8006a98:	20000c60 	.word	0x20000c60
 8006a9c:	40015c24 	.word	0x40015c24
 8006aa0:	40020000 	.word	0x40020000
 8006aa4:	20000cc0 	.word	0x20000cc0
 8006aa8:	40026428 	.word	0x40026428
 8006aac:	40026440 	.word	0x40026440

08006ab0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006ab0:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8006ab2:	4810      	ldr	r0, [pc, #64]	; (8006af4 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006ab4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006ab8:	4a0f      	ldr	r2, [pc, #60]	; (8006af8 <MX_SPI1_Init+0x48>)
 8006aba:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006ac4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006acc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ace:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8006ad2:	2207      	movs	r2, #7
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ad4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ad8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006adc:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006ae4:	f7fc f94f 	bl	8002d86 <HAL_SPI_Init>
 8006ae8:	b118      	cbz	r0, 8006af2 <MX_SPI1_Init+0x42>
  {
    Error_Handler();
  }

}
 8006aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006aee:	f7ff be13 	b.w	8006718 <Error_Handler>
}
 8006af2:	bd08      	pop	{r3, pc}
 8006af4:	20000e88 	.word	0x20000e88
 8006af8:	40013000 	.word	0x40013000

08006afc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006afc:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8006afe:	4811      	ldr	r0, [pc, #68]	; (8006b44 <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006b00:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006b04:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <MX_SPI2_Init+0x4c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006b06:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006b0a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006b14:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006b18:	2220      	movs	r2, #32
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b1a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006b1c:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8006b20:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b26:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006b2a:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006b2e:	2308      	movs	r3, #8
 8006b30:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006b32:	f7fc f928 	bl	8002d86 <HAL_SPI_Init>
 8006b36:	b118      	cbz	r0, 8006b40 <MX_SPI2_Init+0x44>
  {
    Error_Handler();
  }

}
 8006b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006b3c:	f7ff bdec 	b.w	8006718 <Error_Handler>
}
 8006b40:	bd08      	pop	{r3, pc}
 8006b42:	bf00      	nop
 8006b44:	20000eec 	.word	0x20000eec
 8006b48:	40003800 	.word	0x40003800

08006b4c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006b4c:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8006b4e:	4811      	ldr	r0, [pc, #68]	; (8006b94 <MX_SPI3_Init+0x48>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006b50:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006b54:	4a10      	ldr	r2, [pc, #64]	; (8006b98 <MX_SPI3_Init+0x4c>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006b56:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006b5a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006b64:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006b68:	2210      	movs	r2, #16
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b6a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006b6c:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8006b70:	2207      	movs	r2, #7
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b76:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006b7a:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006b7e:	2308      	movs	r3, #8
 8006b80:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006b82:	f7fc f900 	bl	8002d86 <HAL_SPI_Init>
 8006b86:	b118      	cbz	r0, 8006b90 <MX_SPI3_Init+0x44>
  {
    Error_Handler();
  }

}
 8006b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006b8c:	f7ff bdc4 	b.w	8006718 <Error_Handler>
}
 8006b90:	bd08      	pop	{r3, pc}
 8006b92:	bf00      	nop
 8006b94:	20000f50 	.word	0x20000f50
 8006b98:	40003c00 	.word	0x40003c00

08006b9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	b08c      	sub	sp, #48	; 0x30
 8006ba0:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ba2:	2214      	movs	r2, #20
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	a807      	add	r0, sp, #28
 8006ba8:	f000 fa5c 	bl	8007064 <memset>
  if(spiHandle->Instance==SPI1)
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	4a46      	ldr	r2, [pc, #280]	; (8006cc8 <HAL_SPI_MspInit+0x12c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d142      	bne.n	8006c3a <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006bb4:	4b45      	ldr	r3, [pc, #276]	; (8006ccc <HAL_SPI_MspInit+0x130>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb6:	26e0      	movs	r6, #224	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb8:	a907      	add	r1, sp, #28
 8006bba:	4845      	ldr	r0, [pc, #276]	; (8006cd0 <HAL_SPI_MspInit+0x134>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8006bbe:	4c45      	ldr	r4, [pc, #276]	; (8006cd4 <HAL_SPI_MspInit+0x138>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bc4:	645a      	str	r2, [r3, #68]	; 0x44
 8006bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bc8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006bcc:	9201      	str	r2, [sp, #4]
 8006bce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	9302      	str	r3, [sp, #8]
 8006be0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006be2:	2302      	movs	r3, #2
 8006be4:	e9cd 6307 	strd	r6, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006be8:	2305      	movs	r3, #5
 8006bea:	2603      	movs	r6, #3
 8006bec:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bf0:	f7f9 ff5e 	bl	8000ab0 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8006bf4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8006bf8:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8006ce8 <HAL_SPI_MspInit+0x14c>
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c00:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006c04:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006c08:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8006c0a:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c0e:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c10:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006c14:	2204      	movs	r2, #4
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006c16:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c18:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006c1c:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006c20:	e9c4 1208 	strd	r1, r2, [r4, #32]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006c24:	e9c4 630a 	strd	r6, r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006c28:	f7f9 fdb4 	bl	8000794 <HAL_DMA_Init>
 8006c2c:	b108      	cbz	r0, 8006c32 <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 8006c2e:	f7ff fd73 	bl	8006718 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8006c32:	656c      	str	r4, [r5, #84]	; 0x54
 8006c34:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006c36:	b00c      	add	sp, #48	; 0x30
 8006c38:	bd70      	pop	{r4, r5, r6, pc}
  else if(spiHandle->Instance==SPI2)
 8006c3a:	4a27      	ldr	r2, [pc, #156]	; (8006cd8 <HAL_SPI_MspInit+0x13c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d120      	bne.n	8006c82 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006c40:	4b22      	ldr	r3, [pc, #136]	; (8006ccc <HAL_SPI_MspInit+0x130>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c42:	f44f 4060 	mov.w	r0, #57344	; 0xe000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006c46:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c48:	a907      	add	r1, sp, #28
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c50:	641a      	str	r2, [r3, #64]	; 0x40
 8006c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006c58:	9203      	str	r2, [sp, #12]
 8006c5a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5e:	f042 0202 	orr.w	r2, r2, #2
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	9304      	str	r3, [sp, #16]
 8006c6c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006c74:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c76:	4819      	ldr	r0, [pc, #100]	; (8006cdc <HAL_SPI_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006c78:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c7c:	f7f9 ff18 	bl	8000ab0 <HAL_GPIO_Init>
}
 8006c80:	e7d9      	b.n	8006c36 <HAL_SPI_MspInit+0x9a>
  else if(spiHandle->Instance==SPI3)
 8006c82:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <HAL_SPI_MspInit+0x144>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d1d6      	bne.n	8006c36 <HAL_SPI_MspInit+0x9a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006c88:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <HAL_SPI_MspInit+0x130>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006c8a:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c8c:	4815      	ldr	r0, [pc, #84]	; (8006ce4 <HAL_SPI_MspInit+0x148>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40
 8006c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c98:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8006c9c:	9205      	str	r2, [sp, #20]
 8006c9e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca2:	f042 0204 	orr.w	r2, r2, #4
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	f003 0304 	and.w	r3, r3, #4
 8006cb2:	9306      	str	r3, [sp, #24]
 8006cb4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006cbc:	2306      	movs	r3, #6
 8006cbe:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cc2:	a907      	add	r1, sp, #28
 8006cc4:	e7da      	b.n	8006c7c <HAL_SPI_MspInit+0xe0>
 8006cc6:	bf00      	nop
 8006cc8:	40013000 	.word	0x40013000
 8006ccc:	40023800 	.word	0x40023800
 8006cd0:	40020000 	.word	0x40020000
 8006cd4:	20000e28 	.word	0x20000e28
 8006cd8:	40003800 	.word	0x40003800
 8006cdc:	40020400 	.word	0x40020400
 8006ce0:	40003c00 	.word	0x40003c00
 8006ce4:	40020800 	.word	0x40020800
 8006ce8:	40026488 	.word	0x40026488

08006cec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <HAL_MspInit+0x2c>)
{
 8006cee:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8006cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cf2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40
 8006cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cfa:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006cfe:	9200      	str	r2, [sp, #0]
 8006d00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44
 8006d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d10:	9301      	str	r3, [sp, #4]
 8006d12:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d14:	b002      	add	sp, #8
 8006d16:	4770      	bx	lr
 8006d18:	40023800 	.word	0x40023800

08006d1c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d1c:	4770      	bx	lr

08006d1e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d1e:	e7fe      	b.n	8006d1e <HardFault_Handler>

08006d20 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d20:	e7fe      	b.n	8006d20 <MemManage_Handler>

08006d22 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d22:	e7fe      	b.n	8006d22 <BusFault_Handler>

08006d24 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d24:	e7fe      	b.n	8006d24 <UsageFault_Handler>

08006d26 <SVC_Handler>:
 8006d26:	4770      	bx	lr

08006d28 <DebugMon_Handler>:
 8006d28:	4770      	bx	lr

08006d2a <PendSV_Handler>:
 8006d2a:	4770      	bx	lr

08006d2c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d2c:	f7f9 bc92 	b.w	8000654 <HAL_IncTick>

08006d30 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006d30:	4801      	ldr	r0, [pc, #4]	; (8006d38 <DMA1_Stream5_IRQHandler+0x8>)
 8006d32:	f7f9 bdff 	b.w	8000934 <HAL_DMA_IRQHandler>
 8006d36:	bf00      	nop
 8006d38:	20000b50 	.word	0x20000b50

08006d3c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <DMA1_Stream6_IRQHandler+0x8>)
 8006d3e:	f7f9 bdf9 	b.w	8000934 <HAL_DMA_IRQHandler>
 8006d42:	bf00      	nop
 8006d44:	20000bb0 	.word	0x20000bb0

08006d48 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006d48:	2020      	movs	r0, #32
 8006d4a:	f7f9 bfb5 	b.w	8000cb8 <HAL_GPIO_EXTI_IRQHandler>
	...

08006d50 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <I2C1_EV_IRQHandler+0x8>)
 8006d52:	f7fa bc55 	b.w	8001600 <HAL_I2C_EV_IRQHandler>
 8006d56:	bf00      	nop
 8006d58:	20000c10 	.word	0x20000c10

08006d5c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <I2C1_ER_IRQHandler+0x8>)
 8006d5e:	f7fa be65 	b.w	8001a2c <HAL_I2C_ER_IRQHandler>
 8006d62:	bf00      	nop
 8006d64:	20000c10 	.word	0x20000c10

08006d68 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006d6c:	f7f9 bfa4 	b.w	8000cb8 <HAL_GPIO_EXTI_IRQHandler>

08006d70 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <DMA2_Stream1_IRQHandler+0x8>)
 8006d72:	f7f9 bddf 	b.w	8000934 <HAL_DMA_IRQHandler>
 8006d76:	bf00      	nop
 8006d78:	20000cc0 	.word	0x20000cc0

08006d7c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8006d7c:	4801      	ldr	r0, [pc, #4]	; (8006d84 <DMA2_Stream2_IRQHandler+0x8>)
 8006d7e:	f7f9 bdd9 	b.w	8000934 <HAL_DMA_IRQHandler>
 8006d82:	bf00      	nop
 8006d84:	20000c60 	.word	0x20000c60

08006d88 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <DMA2_Stream3_IRQHandler+0x8>)
 8006d8a:	f7f9 bdd3 	b.w	8000934 <HAL_DMA_IRQHandler>
 8006d8e:	bf00      	nop
 8006d90:	20000fb4 	.word	0x20000fb4

08006d94 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <DMA2_Stream5_IRQHandler+0x8>)
 8006d96:	f7f9 bdcd 	b.w	8000934 <HAL_DMA_IRQHandler>
 8006d9a:	bf00      	nop
 8006d9c:	20000e28 	.word	0x20000e28

08006da0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006da0:	490f      	ldr	r1, [pc, #60]	; (8006de0 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006da2:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006da4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8006db0:	4b0c      	ldr	r3, [pc, #48]	; (8006de4 <SystemInit+0x44>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	f042 0201 	orr.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006dba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006dc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006dc6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006dc8:	4a07      	ldr	r2, [pc, #28]	; (8006de8 <SystemInit+0x48>)
 8006dca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006dd4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dda:	608b      	str	r3, [r1, #8]
#endif
}
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	e000ed00 	.word	0xe000ed00
 8006de4:	40023800 	.word	0x40023800
 8006de8:	24003010 	.word	0x24003010

08006dec <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim1);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006dec:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(tim_pwmHandle->Instance==TIM1)
 8006dee:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <HAL_TIM_PWM_MspInit+0x70>)
{
 8006df0:	4605      	mov	r5, r0
  if(tim_pwmHandle->Instance==TIM1)
 8006df2:	6802      	ldr	r2, [r0, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d12f      	bne.n	8006e58 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006df8:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 8006dfc:	4c18      	ldr	r4, [pc, #96]	; (8006e60 <HAL_TIM_PWM_MspInit+0x74>)
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006dfe:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e02:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e08:	2140      	movs	r1, #64	; 0x40
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	645a      	str	r2, [r3, #68]	; 0x44
 8006e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8006e12:	4a14      	ldr	r2, [pc, #80]	; (8006e64 <HAL_TIM_PWM_MspInit+0x78>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	9b01      	ldr	r3, [sp, #4]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8006e1c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8006e20:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e28:	2300      	movs	r3, #0
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006e2a:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8006e32:	4620      	mov	r0, r4
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006e34:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8006e36:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	e9c4 c208 	strd	ip, r2, [r4, #32]
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e40:	2203      	movs	r2, #3
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e42:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8006e46:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8006e4a:	f7f9 fca3 	bl	8000794 <HAL_DMA_Init>
 8006e4e:	b108      	cbz	r0, 8006e54 <HAL_TIM_PWM_MspInit+0x68>
    {
      Error_Handler();
 8006e50:	f7ff fc62 	bl	8006718 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8006e54:	626c      	str	r4, [r5, #36]	; 0x24
 8006e56:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006e58:	b003      	add	sp, #12
 8006e5a:	bd30      	pop	{r4, r5, pc}
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	20000fb4 	.word	0x20000fb4
 8006e64:	40026458 	.word	0x40026458

08006e68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e6e:	2214      	movs	r2, #20
 8006e70:	2100      	movs	r1, #0
 8006e72:	a801      	add	r0, sp, #4
 8006e74:	f000 f8f6 	bl	8007064 <memset>
  if(timHandle->Instance==TIM1)
 8006e78:	6822      	ldr	r2, [r4, #0]
 8006e7a:	4b0e      	ldr	r3, [pc, #56]	; (8006eb4 <HAL_TIM_MspPostInit+0x4c>)
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d116      	bne.n	8006eae <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e80:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 8006e84:	a901      	add	r1, sp, #4
 8006e86:	480c      	ldr	r0, [pc, #48]	; (8006eb8 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e8a:	f042 0210 	orr.w	r2, r2, #16
 8006e8e:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e90:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ea4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 8006eaa:	f7f9 fe01 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006eae:	b006      	add	sp, #24
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	bf00      	nop
 8006eb4:	40010000 	.word	0x40010000
 8006eb8:	40021000 	.word	0x40021000

08006ebc <MX_TIM1_Init>:
{
 8006ebc:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ebe:	2400      	movs	r4, #0
{
 8006ec0:	b096      	sub	sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ec2:	221c      	movs	r2, #28
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ec8:	9403      	str	r4, [sp, #12]
 8006eca:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ece:	f000 f8c9 	bl	8007064 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006ed2:	222c      	movs	r2, #44	; 0x2c
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	eb0d 0002 	add.w	r0, sp, r2
 8006eda:	f000 f8c3 	bl	8007064 <memset>
  htim1.Instance = TIM1;
 8006ede:	4825      	ldr	r0, [pc, #148]	; (8006f74 <MX_TIM1_Init+0xb8>)
 8006ee0:	4b25      	ldr	r3, [pc, #148]	; (8006f78 <MX_TIM1_Init+0xbc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ee2:	6084      	str	r4, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8006ee4:	6144      	str	r4, [r0, #20]
  htim1.Init.Prescaler = 0;
 8006ee6:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 269;
 8006eea:	f240 130d 	movw	r3, #269	; 0x10d
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006eee:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006ef2:	2380      	movs	r3, #128	; 0x80
 8006ef4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006ef6:	f7fc fd31 	bl	800395c <HAL_TIM_PWM_Init>
 8006efa:	b108      	cbz	r0, 8006f00 <MX_TIM1_Init+0x44>
    Error_Handler();
 8006efc:	f7ff fc0c 	bl	8006718 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006f00:	a901      	add	r1, sp, #4
 8006f02:	481c      	ldr	r0, [pc, #112]	; (8006f74 <MX_TIM1_Init+0xb8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f04:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006f06:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006f0a:	f7fc fdff 	bl	8003b0c <HAL_TIMEx_MasterConfigSynchronization>
 8006f0e:	b108      	cbz	r0, 8006f14 <MX_TIM1_Init+0x58>
    Error_Handler();
 8006f10:	f7ff fc02 	bl	8006718 <Error_Handler>
  sConfigOC.Pulse = 130;
 8006f14:	2260      	movs	r2, #96	; 0x60
 8006f16:	2382      	movs	r3, #130	; 0x82
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f18:	2400      	movs	r4, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f1a:	a904      	add	r1, sp, #16
 8006f1c:	4815      	ldr	r0, [pc, #84]	; (8006f74 <MX_TIM1_Init+0xb8>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f1e:	9408      	str	r4, [sp, #32]
  sConfigOC.Pulse = 130;
 8006f20:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8006f24:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f28:	4622      	mov	r2, r4
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006f2a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006f2e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006f32:	f7fc fd65 	bl	8003a00 <HAL_TIM_PWM_ConfigChannel>
 8006f36:	b108      	cbz	r0, 8006f3c <MX_TIM1_Init+0x80>
    Error_Handler();
 8006f38:	f7ff fbee 	bl	8006718 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006f40:	a90b      	add	r1, sp, #44	; 0x2c
 8006f42:	480c      	ldr	r0, [pc, #48]	; (8006f74 <MX_TIM1_Init+0xb8>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006f44:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006f46:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006f48:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006f4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006f52:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8006f56:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006f5a:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006f5e:	f7fc fe01 	bl	8003b64 <HAL_TIMEx_ConfigBreakDeadTime>
 8006f62:	b108      	cbz	r0, 8006f68 <MX_TIM1_Init+0xac>
    Error_Handler();
 8006f64:	f7ff fbd8 	bl	8006718 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8006f68:	4802      	ldr	r0, [pc, #8]	; (8006f74 <MX_TIM1_Init+0xb8>)
 8006f6a:	f7ff ff7d 	bl	8006e68 <HAL_TIM_MspPostInit>
}
 8006f6e:	b016      	add	sp, #88	; 0x58
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	bf00      	nop
 8006f74:	20001014 	.word	0x20001014
 8006f78:	40010000 	.word	0x40010000

08006f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006f82:	e003      	b.n	8006f8c <LoopCopyDataInit>

08006f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006f8a:	3104      	adds	r1, #4

08006f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006f8c:	480b      	ldr	r0, [pc, #44]	; (8006fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006f8e:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006f94:	d3f6      	bcc.n	8006f84 <CopyDataInit>
  ldr  r2, =_sbss
 8006f96:	4a0b      	ldr	r2, [pc, #44]	; (8006fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006f98:	e002      	b.n	8006fa0 <LoopFillZerobss>

08006f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006f9c:	f842 3b04 	str.w	r3, [r2], #4

08006fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006fa0:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006fa4:	d3f9      	bcc.n	8006f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006fa6:	f7ff fefb 	bl	8006da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006faa:	f000 f819 	bl	8006fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006fae:	f7ff fc25 	bl	80067fc <main>
  bx  lr    
 8006fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006fb4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8006fb8:	0800aae8 	.word	0x0800aae8
  ldr  r0, =_sdata
 8006fbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006fc0:	200005c8 	.word	0x200005c8
  ldr  r2, =_sbss
 8006fc4:	200005c8 	.word	0x200005c8
  ldr  r3, = _ebss
 8006fc8:	20001068 	.word	0x20001068

08006fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006fcc:	e7fe      	b.n	8006fcc <ADC_IRQHandler>
	...

08006fd0 <calloc>:
 8006fd0:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <calloc+0xc>)
 8006fd2:	460a      	mov	r2, r1
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	f000 b84c 	b.w	8007074 <_calloc_r>
 8006fdc:	200003f8 	.word	0x200003f8

08006fe0 <__libc_init_array>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	4d0d      	ldr	r5, [pc, #52]	; (8007018 <__libc_init_array+0x38>)
 8006fe4:	4c0d      	ldr	r4, [pc, #52]	; (800701c <__libc_init_array+0x3c>)
 8006fe6:	1b64      	subs	r4, r4, r5
 8006fe8:	10a4      	asrs	r4, r4, #2
 8006fea:	2600      	movs	r6, #0
 8006fec:	42a6      	cmp	r6, r4
 8006fee:	d109      	bne.n	8007004 <__libc_init_array+0x24>
 8006ff0:	4d0b      	ldr	r5, [pc, #44]	; (8007020 <__libc_init_array+0x40>)
 8006ff2:	4c0c      	ldr	r4, [pc, #48]	; (8007024 <__libc_init_array+0x44>)
 8006ff4:	f002 fee0 	bl	8009db8 <_init>
 8006ff8:	1b64      	subs	r4, r4, r5
 8006ffa:	10a4      	asrs	r4, r4, #2
 8006ffc:	2600      	movs	r6, #0
 8006ffe:	42a6      	cmp	r6, r4
 8007000:	d105      	bne.n	800700e <__libc_init_array+0x2e>
 8007002:	bd70      	pop	{r4, r5, r6, pc}
 8007004:	f855 3b04 	ldr.w	r3, [r5], #4
 8007008:	4798      	blx	r3
 800700a:	3601      	adds	r6, #1
 800700c:	e7ee      	b.n	8006fec <__libc_init_array+0xc>
 800700e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007012:	4798      	blx	r3
 8007014:	3601      	adds	r6, #1
 8007016:	e7f2      	b.n	8006ffe <__libc_init_array+0x1e>
 8007018:	0800aae0 	.word	0x0800aae0
 800701c:	0800aae0 	.word	0x0800aae0
 8007020:	0800aae0 	.word	0x0800aae0
 8007024:	0800aae4 	.word	0x0800aae4

08007028 <malloc>:
 8007028:	4b02      	ldr	r3, [pc, #8]	; (8007034 <malloc+0xc>)
 800702a:	4601      	mov	r1, r0
 800702c:	6818      	ldr	r0, [r3, #0]
 800702e:	f000 b8a3 	b.w	8007178 <_malloc_r>
 8007032:	bf00      	nop
 8007034:	200003f8 	.word	0x200003f8

08007038 <free>:
 8007038:	4b02      	ldr	r3, [pc, #8]	; (8007044 <free+0xc>)
 800703a:	4601      	mov	r1, r0
 800703c:	6818      	ldr	r0, [r3, #0]
 800703e:	f000 b82f 	b.w	80070a0 <_free_r>
 8007042:	bf00      	nop
 8007044:	200003f8 	.word	0x200003f8

08007048 <memcpy>:
 8007048:	440a      	add	r2, r1
 800704a:	4291      	cmp	r1, r2
 800704c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007050:	d100      	bne.n	8007054 <memcpy+0xc>
 8007052:	4770      	bx	lr
 8007054:	b510      	push	{r4, lr}
 8007056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800705a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800705e:	4291      	cmp	r1, r2
 8007060:	d1f9      	bne.n	8007056 <memcpy+0xe>
 8007062:	bd10      	pop	{r4, pc}

08007064 <memset>:
 8007064:	4402      	add	r2, r0
 8007066:	4603      	mov	r3, r0
 8007068:	4293      	cmp	r3, r2
 800706a:	d100      	bne.n	800706e <memset+0xa>
 800706c:	4770      	bx	lr
 800706e:	f803 1b01 	strb.w	r1, [r3], #1
 8007072:	e7f9      	b.n	8007068 <memset+0x4>

08007074 <_calloc_r>:
 8007074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007076:	fba1 2402 	umull	r2, r4, r1, r2
 800707a:	b94c      	cbnz	r4, 8007090 <_calloc_r+0x1c>
 800707c:	4611      	mov	r1, r2
 800707e:	9201      	str	r2, [sp, #4]
 8007080:	f000 f87a 	bl	8007178 <_malloc_r>
 8007084:	9a01      	ldr	r2, [sp, #4]
 8007086:	4605      	mov	r5, r0
 8007088:	b930      	cbnz	r0, 8007098 <_calloc_r+0x24>
 800708a:	4628      	mov	r0, r5
 800708c:	b003      	add	sp, #12
 800708e:	bd30      	pop	{r4, r5, pc}
 8007090:	220c      	movs	r2, #12
 8007092:	6002      	str	r2, [r0, #0]
 8007094:	2500      	movs	r5, #0
 8007096:	e7f8      	b.n	800708a <_calloc_r+0x16>
 8007098:	4621      	mov	r1, r4
 800709a:	f7ff ffe3 	bl	8007064 <memset>
 800709e:	e7f4      	b.n	800708a <_calloc_r+0x16>

080070a0 <_free_r>:
 80070a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070a2:	2900      	cmp	r1, #0
 80070a4:	d044      	beq.n	8007130 <_free_r+0x90>
 80070a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070aa:	9001      	str	r0, [sp, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f1a1 0404 	sub.w	r4, r1, #4
 80070b2:	bfb8      	it	lt
 80070b4:	18e4      	addlt	r4, r4, r3
 80070b6:	f001 fbeb 	bl	8008890 <__malloc_lock>
 80070ba:	4a1e      	ldr	r2, [pc, #120]	; (8007134 <_free_r+0x94>)
 80070bc:	9801      	ldr	r0, [sp, #4]
 80070be:	6813      	ldr	r3, [r2, #0]
 80070c0:	b933      	cbnz	r3, 80070d0 <_free_r+0x30>
 80070c2:	6063      	str	r3, [r4, #4]
 80070c4:	6014      	str	r4, [r2, #0]
 80070c6:	b003      	add	sp, #12
 80070c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070cc:	f001 bbe6 	b.w	800889c <__malloc_unlock>
 80070d0:	42a3      	cmp	r3, r4
 80070d2:	d908      	bls.n	80070e6 <_free_r+0x46>
 80070d4:	6825      	ldr	r5, [r4, #0]
 80070d6:	1961      	adds	r1, r4, r5
 80070d8:	428b      	cmp	r3, r1
 80070da:	bf01      	itttt	eq
 80070dc:	6819      	ldreq	r1, [r3, #0]
 80070de:	685b      	ldreq	r3, [r3, #4]
 80070e0:	1949      	addeq	r1, r1, r5
 80070e2:	6021      	streq	r1, [r4, #0]
 80070e4:	e7ed      	b.n	80070c2 <_free_r+0x22>
 80070e6:	461a      	mov	r2, r3
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	b10b      	cbz	r3, 80070f0 <_free_r+0x50>
 80070ec:	42a3      	cmp	r3, r4
 80070ee:	d9fa      	bls.n	80070e6 <_free_r+0x46>
 80070f0:	6811      	ldr	r1, [r2, #0]
 80070f2:	1855      	adds	r5, r2, r1
 80070f4:	42a5      	cmp	r5, r4
 80070f6:	d10b      	bne.n	8007110 <_free_r+0x70>
 80070f8:	6824      	ldr	r4, [r4, #0]
 80070fa:	4421      	add	r1, r4
 80070fc:	1854      	adds	r4, r2, r1
 80070fe:	42a3      	cmp	r3, r4
 8007100:	6011      	str	r1, [r2, #0]
 8007102:	d1e0      	bne.n	80070c6 <_free_r+0x26>
 8007104:	681c      	ldr	r4, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	6053      	str	r3, [r2, #4]
 800710a:	4421      	add	r1, r4
 800710c:	6011      	str	r1, [r2, #0]
 800710e:	e7da      	b.n	80070c6 <_free_r+0x26>
 8007110:	d902      	bls.n	8007118 <_free_r+0x78>
 8007112:	230c      	movs	r3, #12
 8007114:	6003      	str	r3, [r0, #0]
 8007116:	e7d6      	b.n	80070c6 <_free_r+0x26>
 8007118:	6825      	ldr	r5, [r4, #0]
 800711a:	1961      	adds	r1, r4, r5
 800711c:	428b      	cmp	r3, r1
 800711e:	bf04      	itt	eq
 8007120:	6819      	ldreq	r1, [r3, #0]
 8007122:	685b      	ldreq	r3, [r3, #4]
 8007124:	6063      	str	r3, [r4, #4]
 8007126:	bf04      	itt	eq
 8007128:	1949      	addeq	r1, r1, r5
 800712a:	6021      	streq	r1, [r4, #0]
 800712c:	6054      	str	r4, [r2, #4]
 800712e:	e7ca      	b.n	80070c6 <_free_r+0x26>
 8007130:	b003      	add	sp, #12
 8007132:	bd30      	pop	{r4, r5, pc}
 8007134:	20001054 	.word	0x20001054

08007138 <sbrk_aligned>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4e0e      	ldr	r6, [pc, #56]	; (8007174 <sbrk_aligned+0x3c>)
 800713c:	460c      	mov	r4, r1
 800713e:	6831      	ldr	r1, [r6, #0]
 8007140:	4605      	mov	r5, r0
 8007142:	b911      	cbnz	r1, 800714a <sbrk_aligned+0x12>
 8007144:	f000 fcd6 	bl	8007af4 <_sbrk_r>
 8007148:	6030      	str	r0, [r6, #0]
 800714a:	4621      	mov	r1, r4
 800714c:	4628      	mov	r0, r5
 800714e:	f000 fcd1 	bl	8007af4 <_sbrk_r>
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	d00a      	beq.n	800716c <sbrk_aligned+0x34>
 8007156:	1cc4      	adds	r4, r0, #3
 8007158:	f024 0403 	bic.w	r4, r4, #3
 800715c:	42a0      	cmp	r0, r4
 800715e:	d007      	beq.n	8007170 <sbrk_aligned+0x38>
 8007160:	1a21      	subs	r1, r4, r0
 8007162:	4628      	mov	r0, r5
 8007164:	f000 fcc6 	bl	8007af4 <_sbrk_r>
 8007168:	3001      	adds	r0, #1
 800716a:	d101      	bne.n	8007170 <sbrk_aligned+0x38>
 800716c:	f04f 34ff 	mov.w	r4, #4294967295
 8007170:	4620      	mov	r0, r4
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	20001058 	.word	0x20001058

08007178 <_malloc_r>:
 8007178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800717c:	1ccd      	adds	r5, r1, #3
 800717e:	f025 0503 	bic.w	r5, r5, #3
 8007182:	3508      	adds	r5, #8
 8007184:	2d0c      	cmp	r5, #12
 8007186:	bf38      	it	cc
 8007188:	250c      	movcc	r5, #12
 800718a:	2d00      	cmp	r5, #0
 800718c:	4607      	mov	r7, r0
 800718e:	db01      	blt.n	8007194 <_malloc_r+0x1c>
 8007190:	42a9      	cmp	r1, r5
 8007192:	d905      	bls.n	80071a0 <_malloc_r+0x28>
 8007194:	230c      	movs	r3, #12
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	2600      	movs	r6, #0
 800719a:	4630      	mov	r0, r6
 800719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a0:	4e2e      	ldr	r6, [pc, #184]	; (800725c <_malloc_r+0xe4>)
 80071a2:	f001 fb75 	bl	8008890 <__malloc_lock>
 80071a6:	6833      	ldr	r3, [r6, #0]
 80071a8:	461c      	mov	r4, r3
 80071aa:	bb34      	cbnz	r4, 80071fa <_malloc_r+0x82>
 80071ac:	4629      	mov	r1, r5
 80071ae:	4638      	mov	r0, r7
 80071b0:	f7ff ffc2 	bl	8007138 <sbrk_aligned>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	4604      	mov	r4, r0
 80071b8:	d14d      	bne.n	8007256 <_malloc_r+0xde>
 80071ba:	6834      	ldr	r4, [r6, #0]
 80071bc:	4626      	mov	r6, r4
 80071be:	2e00      	cmp	r6, #0
 80071c0:	d140      	bne.n	8007244 <_malloc_r+0xcc>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	4631      	mov	r1, r6
 80071c6:	4638      	mov	r0, r7
 80071c8:	eb04 0803 	add.w	r8, r4, r3
 80071cc:	f000 fc92 	bl	8007af4 <_sbrk_r>
 80071d0:	4580      	cmp	r8, r0
 80071d2:	d13a      	bne.n	800724a <_malloc_r+0xd2>
 80071d4:	6821      	ldr	r1, [r4, #0]
 80071d6:	3503      	adds	r5, #3
 80071d8:	1a6d      	subs	r5, r5, r1
 80071da:	f025 0503 	bic.w	r5, r5, #3
 80071de:	3508      	adds	r5, #8
 80071e0:	2d0c      	cmp	r5, #12
 80071e2:	bf38      	it	cc
 80071e4:	250c      	movcc	r5, #12
 80071e6:	4629      	mov	r1, r5
 80071e8:	4638      	mov	r0, r7
 80071ea:	f7ff ffa5 	bl	8007138 <sbrk_aligned>
 80071ee:	3001      	adds	r0, #1
 80071f0:	d02b      	beq.n	800724a <_malloc_r+0xd2>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	442b      	add	r3, r5
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	e00e      	b.n	8007218 <_malloc_r+0xa0>
 80071fa:	6822      	ldr	r2, [r4, #0]
 80071fc:	1b52      	subs	r2, r2, r5
 80071fe:	d41e      	bmi.n	800723e <_malloc_r+0xc6>
 8007200:	2a0b      	cmp	r2, #11
 8007202:	d916      	bls.n	8007232 <_malloc_r+0xba>
 8007204:	1961      	adds	r1, r4, r5
 8007206:	42a3      	cmp	r3, r4
 8007208:	6025      	str	r5, [r4, #0]
 800720a:	bf18      	it	ne
 800720c:	6059      	strne	r1, [r3, #4]
 800720e:	6863      	ldr	r3, [r4, #4]
 8007210:	bf08      	it	eq
 8007212:	6031      	streq	r1, [r6, #0]
 8007214:	5162      	str	r2, [r4, r5]
 8007216:	604b      	str	r3, [r1, #4]
 8007218:	4638      	mov	r0, r7
 800721a:	f104 060b 	add.w	r6, r4, #11
 800721e:	f001 fb3d 	bl	800889c <__malloc_unlock>
 8007222:	f026 0607 	bic.w	r6, r6, #7
 8007226:	1d23      	adds	r3, r4, #4
 8007228:	1af2      	subs	r2, r6, r3
 800722a:	d0b6      	beq.n	800719a <_malloc_r+0x22>
 800722c:	1b9b      	subs	r3, r3, r6
 800722e:	50a3      	str	r3, [r4, r2]
 8007230:	e7b3      	b.n	800719a <_malloc_r+0x22>
 8007232:	6862      	ldr	r2, [r4, #4]
 8007234:	42a3      	cmp	r3, r4
 8007236:	bf0c      	ite	eq
 8007238:	6032      	streq	r2, [r6, #0]
 800723a:	605a      	strne	r2, [r3, #4]
 800723c:	e7ec      	b.n	8007218 <_malloc_r+0xa0>
 800723e:	4623      	mov	r3, r4
 8007240:	6864      	ldr	r4, [r4, #4]
 8007242:	e7b2      	b.n	80071aa <_malloc_r+0x32>
 8007244:	4634      	mov	r4, r6
 8007246:	6876      	ldr	r6, [r6, #4]
 8007248:	e7b9      	b.n	80071be <_malloc_r+0x46>
 800724a:	230c      	movs	r3, #12
 800724c:	603b      	str	r3, [r7, #0]
 800724e:	4638      	mov	r0, r7
 8007250:	f001 fb24 	bl	800889c <__malloc_unlock>
 8007254:	e7a1      	b.n	800719a <_malloc_r+0x22>
 8007256:	6025      	str	r5, [r4, #0]
 8007258:	e7de      	b.n	8007218 <_malloc_r+0xa0>
 800725a:	bf00      	nop
 800725c:	20001054 	.word	0x20001054

08007260 <__cvt>:
 8007260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007262:	ed2d 8b02 	vpush	{d8}
 8007266:	eeb0 8b40 	vmov.f64	d8, d0
 800726a:	b085      	sub	sp, #20
 800726c:	4617      	mov	r7, r2
 800726e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007270:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007272:	ee18 2a90 	vmov	r2, s17
 8007276:	f025 0520 	bic.w	r5, r5, #32
 800727a:	2a00      	cmp	r2, #0
 800727c:	bfb6      	itet	lt
 800727e:	222d      	movlt	r2, #45	; 0x2d
 8007280:	2200      	movge	r2, #0
 8007282:	eeb1 8b40 	vneglt.f64	d8, d0
 8007286:	2d46      	cmp	r5, #70	; 0x46
 8007288:	460c      	mov	r4, r1
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	d004      	beq.n	8007298 <__cvt+0x38>
 800728e:	2d45      	cmp	r5, #69	; 0x45
 8007290:	d100      	bne.n	8007294 <__cvt+0x34>
 8007292:	3401      	adds	r4, #1
 8007294:	2102      	movs	r1, #2
 8007296:	e000      	b.n	800729a <__cvt+0x3a>
 8007298:	2103      	movs	r1, #3
 800729a:	ab03      	add	r3, sp, #12
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	ab02      	add	r3, sp, #8
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4622      	mov	r2, r4
 80072a4:	4633      	mov	r3, r6
 80072a6:	eeb0 0b48 	vmov.f64	d0, d8
 80072aa:	f000 fd6d 	bl	8007d88 <_dtoa_r>
 80072ae:	2d47      	cmp	r5, #71	; 0x47
 80072b0:	d101      	bne.n	80072b6 <__cvt+0x56>
 80072b2:	07fb      	lsls	r3, r7, #31
 80072b4:	d51a      	bpl.n	80072ec <__cvt+0x8c>
 80072b6:	2d46      	cmp	r5, #70	; 0x46
 80072b8:	eb00 0204 	add.w	r2, r0, r4
 80072bc:	d10c      	bne.n	80072d8 <__cvt+0x78>
 80072be:	7803      	ldrb	r3, [r0, #0]
 80072c0:	2b30      	cmp	r3, #48	; 0x30
 80072c2:	d107      	bne.n	80072d4 <__cvt+0x74>
 80072c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072cc:	bf1c      	itt	ne
 80072ce:	f1c4 0401 	rsbne	r4, r4, #1
 80072d2:	6034      	strne	r4, [r6, #0]
 80072d4:	6833      	ldr	r3, [r6, #0]
 80072d6:	441a      	add	r2, r3
 80072d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e0:	bf08      	it	eq
 80072e2:	9203      	streq	r2, [sp, #12]
 80072e4:	2130      	movs	r1, #48	; 0x30
 80072e6:	9b03      	ldr	r3, [sp, #12]
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d307      	bcc.n	80072fc <__cvt+0x9c>
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072f0:	1a1b      	subs	r3, r3, r0
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	b005      	add	sp, #20
 80072f6:	ecbd 8b02 	vpop	{d8}
 80072fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fc:	1c5c      	adds	r4, r3, #1
 80072fe:	9403      	str	r4, [sp, #12]
 8007300:	7019      	strb	r1, [r3, #0]
 8007302:	e7f0      	b.n	80072e6 <__cvt+0x86>

08007304 <__exponent>:
 8007304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007306:	4603      	mov	r3, r0
 8007308:	2900      	cmp	r1, #0
 800730a:	bfb8      	it	lt
 800730c:	4249      	neglt	r1, r1
 800730e:	f803 2b02 	strb.w	r2, [r3], #2
 8007312:	bfb4      	ite	lt
 8007314:	222d      	movlt	r2, #45	; 0x2d
 8007316:	222b      	movge	r2, #43	; 0x2b
 8007318:	2909      	cmp	r1, #9
 800731a:	7042      	strb	r2, [r0, #1]
 800731c:	dd2a      	ble.n	8007374 <__exponent+0x70>
 800731e:	f10d 0407 	add.w	r4, sp, #7
 8007322:	46a4      	mov	ip, r4
 8007324:	270a      	movs	r7, #10
 8007326:	46a6      	mov	lr, r4
 8007328:	460a      	mov	r2, r1
 800732a:	fb91 f6f7 	sdiv	r6, r1, r7
 800732e:	fb07 1516 	mls	r5, r7, r6, r1
 8007332:	3530      	adds	r5, #48	; 0x30
 8007334:	2a63      	cmp	r2, #99	; 0x63
 8007336:	f104 34ff 	add.w	r4, r4, #4294967295
 800733a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800733e:	4631      	mov	r1, r6
 8007340:	dcf1      	bgt.n	8007326 <__exponent+0x22>
 8007342:	3130      	adds	r1, #48	; 0x30
 8007344:	f1ae 0502 	sub.w	r5, lr, #2
 8007348:	f804 1c01 	strb.w	r1, [r4, #-1]
 800734c:	1c44      	adds	r4, r0, #1
 800734e:	4629      	mov	r1, r5
 8007350:	4561      	cmp	r1, ip
 8007352:	d30a      	bcc.n	800736a <__exponent+0x66>
 8007354:	f10d 0209 	add.w	r2, sp, #9
 8007358:	eba2 020e 	sub.w	r2, r2, lr
 800735c:	4565      	cmp	r5, ip
 800735e:	bf88      	it	hi
 8007360:	2200      	movhi	r2, #0
 8007362:	4413      	add	r3, r2
 8007364:	1a18      	subs	r0, r3, r0
 8007366:	b003      	add	sp, #12
 8007368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800736a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800736e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007372:	e7ed      	b.n	8007350 <__exponent+0x4c>
 8007374:	2330      	movs	r3, #48	; 0x30
 8007376:	3130      	adds	r1, #48	; 0x30
 8007378:	7083      	strb	r3, [r0, #2]
 800737a:	70c1      	strb	r1, [r0, #3]
 800737c:	1d03      	adds	r3, r0, #4
 800737e:	e7f1      	b.n	8007364 <__exponent+0x60>

08007380 <_printf_float>:
 8007380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	b08b      	sub	sp, #44	; 0x2c
 8007386:	460c      	mov	r4, r1
 8007388:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800738c:	4616      	mov	r6, r2
 800738e:	461f      	mov	r7, r3
 8007390:	4605      	mov	r5, r0
 8007392:	f001 fa67 	bl	8008864 <_localeconv_r>
 8007396:	f8d0 b000 	ldr.w	fp, [r0]
 800739a:	4658      	mov	r0, fp
 800739c:	f7f8 ff50 	bl	8000240 <strlen>
 80073a0:	2300      	movs	r3, #0
 80073a2:	9308      	str	r3, [sp, #32]
 80073a4:	f8d8 3000 	ldr.w	r3, [r8]
 80073a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	3307      	adds	r3, #7
 80073b0:	f023 0307 	bic.w	r3, r3, #7
 80073b4:	f103 0108 	add.w	r1, r3, #8
 80073b8:	f8c8 1000 	str.w	r1, [r8]
 80073bc:	4682      	mov	sl, r0
 80073be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80073c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007628 <_printf_float+0x2a8>
 80073ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80073ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80073d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80073d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073da:	dd24      	ble.n	8007426 <_printf_float+0xa6>
 80073dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80073e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e4:	d502      	bpl.n	80073ec <_printf_float+0x6c>
 80073e6:	232d      	movs	r3, #45	; 0x2d
 80073e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ec:	4b90      	ldr	r3, [pc, #576]	; (8007630 <_printf_float+0x2b0>)
 80073ee:	4891      	ldr	r0, [pc, #580]	; (8007634 <_printf_float+0x2b4>)
 80073f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80073f4:	bf94      	ite	ls
 80073f6:	4698      	movls	r8, r3
 80073f8:	4680      	movhi	r8, r0
 80073fa:	2303      	movs	r3, #3
 80073fc:	6123      	str	r3, [r4, #16]
 80073fe:	f022 0204 	bic.w	r2, r2, #4
 8007402:	2300      	movs	r3, #0
 8007404:	6022      	str	r2, [r4, #0]
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	9700      	str	r7, [sp, #0]
 800740a:	4633      	mov	r3, r6
 800740c:	aa09      	add	r2, sp, #36	; 0x24
 800740e:	4621      	mov	r1, r4
 8007410:	4628      	mov	r0, r5
 8007412:	f000 f9d3 	bl	80077bc <_printf_common>
 8007416:	3001      	adds	r0, #1
 8007418:	f040 808a 	bne.w	8007530 <_printf_float+0x1b0>
 800741c:	f04f 30ff 	mov.w	r0, #4294967295
 8007420:	b00b      	add	sp, #44	; 0x2c
 8007422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007426:	eeb4 0b40 	vcmp.f64	d0, d0
 800742a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742e:	d709      	bvc.n	8007444 <_printf_float+0xc4>
 8007430:	ee10 3a90 	vmov	r3, s1
 8007434:	2b00      	cmp	r3, #0
 8007436:	bfbc      	itt	lt
 8007438:	232d      	movlt	r3, #45	; 0x2d
 800743a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800743e:	487e      	ldr	r0, [pc, #504]	; (8007638 <_printf_float+0x2b8>)
 8007440:	4b7e      	ldr	r3, [pc, #504]	; (800763c <_printf_float+0x2bc>)
 8007442:	e7d5      	b.n	80073f0 <_printf_float+0x70>
 8007444:	6863      	ldr	r3, [r4, #4]
 8007446:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800744a:	9104      	str	r1, [sp, #16]
 800744c:	1c59      	adds	r1, r3, #1
 800744e:	d13c      	bne.n	80074ca <_printf_float+0x14a>
 8007450:	2306      	movs	r3, #6
 8007452:	6063      	str	r3, [r4, #4]
 8007454:	2300      	movs	r3, #0
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	ab08      	add	r3, sp, #32
 800745a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800745e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007462:	ab07      	add	r3, sp, #28
 8007464:	6861      	ldr	r1, [r4, #4]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	6022      	str	r2, [r4, #0]
 800746a:	f10d 031b 	add.w	r3, sp, #27
 800746e:	4628      	mov	r0, r5
 8007470:	f7ff fef6 	bl	8007260 <__cvt>
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	9907      	ldr	r1, [sp, #28]
 8007478:	2b47      	cmp	r3, #71	; 0x47
 800747a:	4680      	mov	r8, r0
 800747c:	d108      	bne.n	8007490 <_printf_float+0x110>
 800747e:	1cc8      	adds	r0, r1, #3
 8007480:	db02      	blt.n	8007488 <_printf_float+0x108>
 8007482:	6863      	ldr	r3, [r4, #4]
 8007484:	4299      	cmp	r1, r3
 8007486:	dd41      	ble.n	800750c <_printf_float+0x18c>
 8007488:	f1a9 0902 	sub.w	r9, r9, #2
 800748c:	fa5f f989 	uxtb.w	r9, r9
 8007490:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007494:	d820      	bhi.n	80074d8 <_printf_float+0x158>
 8007496:	3901      	subs	r1, #1
 8007498:	464a      	mov	r2, r9
 800749a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800749e:	9107      	str	r1, [sp, #28]
 80074a0:	f7ff ff30 	bl	8007304 <__exponent>
 80074a4:	9a08      	ldr	r2, [sp, #32]
 80074a6:	9004      	str	r0, [sp, #16]
 80074a8:	1813      	adds	r3, r2, r0
 80074aa:	2a01      	cmp	r2, #1
 80074ac:	6123      	str	r3, [r4, #16]
 80074ae:	dc02      	bgt.n	80074b6 <_printf_float+0x136>
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	07d2      	lsls	r2, r2, #31
 80074b4:	d501      	bpl.n	80074ba <_printf_float+0x13a>
 80074b6:	3301      	adds	r3, #1
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0a2      	beq.n	8007408 <_printf_float+0x88>
 80074c2:	232d      	movs	r3, #45	; 0x2d
 80074c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c8:	e79e      	b.n	8007408 <_printf_float+0x88>
 80074ca:	9904      	ldr	r1, [sp, #16]
 80074cc:	2947      	cmp	r1, #71	; 0x47
 80074ce:	d1c1      	bne.n	8007454 <_printf_float+0xd4>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1bf      	bne.n	8007454 <_printf_float+0xd4>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e7bc      	b.n	8007452 <_printf_float+0xd2>
 80074d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80074dc:	d118      	bne.n	8007510 <_printf_float+0x190>
 80074de:	2900      	cmp	r1, #0
 80074e0:	6863      	ldr	r3, [r4, #4]
 80074e2:	dd0b      	ble.n	80074fc <_printf_float+0x17c>
 80074e4:	6121      	str	r1, [r4, #16]
 80074e6:	b913      	cbnz	r3, 80074ee <_printf_float+0x16e>
 80074e8:	6822      	ldr	r2, [r4, #0]
 80074ea:	07d0      	lsls	r0, r2, #31
 80074ec:	d502      	bpl.n	80074f4 <_printf_float+0x174>
 80074ee:	3301      	adds	r3, #1
 80074f0:	440b      	add	r3, r1
 80074f2:	6123      	str	r3, [r4, #16]
 80074f4:	2300      	movs	r3, #0
 80074f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	e7de      	b.n	80074ba <_printf_float+0x13a>
 80074fc:	b913      	cbnz	r3, 8007504 <_printf_float+0x184>
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	07d2      	lsls	r2, r2, #31
 8007502:	d501      	bpl.n	8007508 <_printf_float+0x188>
 8007504:	3302      	adds	r3, #2
 8007506:	e7f4      	b.n	80074f2 <_printf_float+0x172>
 8007508:	2301      	movs	r3, #1
 800750a:	e7f2      	b.n	80074f2 <_printf_float+0x172>
 800750c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007510:	9b08      	ldr	r3, [sp, #32]
 8007512:	4299      	cmp	r1, r3
 8007514:	db05      	blt.n	8007522 <_printf_float+0x1a2>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	6121      	str	r1, [r4, #16]
 800751a:	07d8      	lsls	r0, r3, #31
 800751c:	d5ea      	bpl.n	80074f4 <_printf_float+0x174>
 800751e:	1c4b      	adds	r3, r1, #1
 8007520:	e7e7      	b.n	80074f2 <_printf_float+0x172>
 8007522:	2900      	cmp	r1, #0
 8007524:	bfd4      	ite	le
 8007526:	f1c1 0202 	rsble	r2, r1, #2
 800752a:	2201      	movgt	r2, #1
 800752c:	4413      	add	r3, r2
 800752e:	e7e0      	b.n	80074f2 <_printf_float+0x172>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	055a      	lsls	r2, r3, #21
 8007534:	d407      	bmi.n	8007546 <_printf_float+0x1c6>
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	4642      	mov	r2, r8
 800753a:	4631      	mov	r1, r6
 800753c:	4628      	mov	r0, r5
 800753e:	47b8      	blx	r7
 8007540:	3001      	adds	r0, #1
 8007542:	d12a      	bne.n	800759a <_printf_float+0x21a>
 8007544:	e76a      	b.n	800741c <_printf_float+0x9c>
 8007546:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800754a:	f240 80e2 	bls.w	8007712 <_printf_float+0x392>
 800754e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007552:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755a:	d133      	bne.n	80075c4 <_printf_float+0x244>
 800755c:	4a38      	ldr	r2, [pc, #224]	; (8007640 <_printf_float+0x2c0>)
 800755e:	2301      	movs	r3, #1
 8007560:	4631      	mov	r1, r6
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	f43f af58 	beq.w	800741c <_printf_float+0x9c>
 800756c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007570:	429a      	cmp	r2, r3
 8007572:	db02      	blt.n	800757a <_printf_float+0x1fa>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	07d8      	lsls	r0, r3, #31
 8007578:	d50f      	bpl.n	800759a <_printf_float+0x21a>
 800757a:	4653      	mov	r3, sl
 800757c:	465a      	mov	r2, fp
 800757e:	4631      	mov	r1, r6
 8007580:	4628      	mov	r0, r5
 8007582:	47b8      	blx	r7
 8007584:	3001      	adds	r0, #1
 8007586:	f43f af49 	beq.w	800741c <_printf_float+0x9c>
 800758a:	f04f 0800 	mov.w	r8, #0
 800758e:	f104 091a 	add.w	r9, r4, #26
 8007592:	9b08      	ldr	r3, [sp, #32]
 8007594:	3b01      	subs	r3, #1
 8007596:	4543      	cmp	r3, r8
 8007598:	dc09      	bgt.n	80075ae <_printf_float+0x22e>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	079b      	lsls	r3, r3, #30
 800759e:	f100 8108 	bmi.w	80077b2 <_printf_float+0x432>
 80075a2:	68e0      	ldr	r0, [r4, #12]
 80075a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a6:	4298      	cmp	r0, r3
 80075a8:	bfb8      	it	lt
 80075aa:	4618      	movlt	r0, r3
 80075ac:	e738      	b.n	8007420 <_printf_float+0xa0>
 80075ae:	2301      	movs	r3, #1
 80075b0:	464a      	mov	r2, r9
 80075b2:	4631      	mov	r1, r6
 80075b4:	4628      	mov	r0, r5
 80075b6:	47b8      	blx	r7
 80075b8:	3001      	adds	r0, #1
 80075ba:	f43f af2f 	beq.w	800741c <_printf_float+0x9c>
 80075be:	f108 0801 	add.w	r8, r8, #1
 80075c2:	e7e6      	b.n	8007592 <_printf_float+0x212>
 80075c4:	9b07      	ldr	r3, [sp, #28]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	dc3c      	bgt.n	8007644 <_printf_float+0x2c4>
 80075ca:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <_printf_float+0x2c0>)
 80075cc:	2301      	movs	r3, #1
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	f43f af21 	beq.w	800741c <_printf_float+0x9c>
 80075da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80075de:	4313      	orrs	r3, r2
 80075e0:	d102      	bne.n	80075e8 <_printf_float+0x268>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	07d9      	lsls	r1, r3, #31
 80075e6:	d5d8      	bpl.n	800759a <_printf_float+0x21a>
 80075e8:	4653      	mov	r3, sl
 80075ea:	465a      	mov	r2, fp
 80075ec:	4631      	mov	r1, r6
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b8      	blx	r7
 80075f2:	3001      	adds	r0, #1
 80075f4:	f43f af12 	beq.w	800741c <_printf_float+0x9c>
 80075f8:	f04f 0900 	mov.w	r9, #0
 80075fc:	f104 0a1a 	add.w	sl, r4, #26
 8007600:	9b07      	ldr	r3, [sp, #28]
 8007602:	425b      	negs	r3, r3
 8007604:	454b      	cmp	r3, r9
 8007606:	dc01      	bgt.n	800760c <_printf_float+0x28c>
 8007608:	9b08      	ldr	r3, [sp, #32]
 800760a:	e795      	b.n	8007538 <_printf_float+0x1b8>
 800760c:	2301      	movs	r3, #1
 800760e:	4652      	mov	r2, sl
 8007610:	4631      	mov	r1, r6
 8007612:	4628      	mov	r0, r5
 8007614:	47b8      	blx	r7
 8007616:	3001      	adds	r0, #1
 8007618:	f43f af00 	beq.w	800741c <_printf_float+0x9c>
 800761c:	f109 0901 	add.w	r9, r9, #1
 8007620:	e7ee      	b.n	8007600 <_printf_float+0x280>
 8007622:	bf00      	nop
 8007624:	f3af 8000 	nop.w
 8007628:	ffffffff 	.word	0xffffffff
 800762c:	7fefffff 	.word	0x7fefffff
 8007630:	0800a700 	.word	0x0800a700
 8007634:	0800a704 	.word	0x0800a704
 8007638:	0800a70c 	.word	0x0800a70c
 800763c:	0800a708 	.word	0x0800a708
 8007640:	0800a710 	.word	0x0800a710
 8007644:	9a08      	ldr	r2, [sp, #32]
 8007646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007648:	429a      	cmp	r2, r3
 800764a:	bfa8      	it	ge
 800764c:	461a      	movge	r2, r3
 800764e:	2a00      	cmp	r2, #0
 8007650:	4691      	mov	r9, r2
 8007652:	dc38      	bgt.n	80076c6 <_printf_float+0x346>
 8007654:	2300      	movs	r3, #0
 8007656:	9305      	str	r3, [sp, #20]
 8007658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800765c:	f104 021a 	add.w	r2, r4, #26
 8007660:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007662:	9905      	ldr	r1, [sp, #20]
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	eba3 0309 	sub.w	r3, r3, r9
 800766a:	428b      	cmp	r3, r1
 800766c:	dc33      	bgt.n	80076d6 <_printf_float+0x356>
 800766e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007672:	429a      	cmp	r2, r3
 8007674:	db3c      	blt.n	80076f0 <_printf_float+0x370>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	07da      	lsls	r2, r3, #31
 800767a:	d439      	bmi.n	80076f0 <_printf_float+0x370>
 800767c:	9b08      	ldr	r3, [sp, #32]
 800767e:	9a04      	ldr	r2, [sp, #16]
 8007680:	9907      	ldr	r1, [sp, #28]
 8007682:	1a9a      	subs	r2, r3, r2
 8007684:	eba3 0901 	sub.w	r9, r3, r1
 8007688:	4591      	cmp	r9, r2
 800768a:	bfa8      	it	ge
 800768c:	4691      	movge	r9, r2
 800768e:	f1b9 0f00 	cmp.w	r9, #0
 8007692:	dc35      	bgt.n	8007700 <_printf_float+0x380>
 8007694:	f04f 0800 	mov.w	r8, #0
 8007698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800769c:	f104 0a1a 	add.w	sl, r4, #26
 80076a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	eba3 0309 	sub.w	r3, r3, r9
 80076aa:	4543      	cmp	r3, r8
 80076ac:	f77f af75 	ble.w	800759a <_printf_float+0x21a>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4652      	mov	r2, sl
 80076b4:	4631      	mov	r1, r6
 80076b6:	4628      	mov	r0, r5
 80076b8:	47b8      	blx	r7
 80076ba:	3001      	adds	r0, #1
 80076bc:	f43f aeae 	beq.w	800741c <_printf_float+0x9c>
 80076c0:	f108 0801 	add.w	r8, r8, #1
 80076c4:	e7ec      	b.n	80076a0 <_printf_float+0x320>
 80076c6:	4613      	mov	r3, r2
 80076c8:	4631      	mov	r1, r6
 80076ca:	4642      	mov	r2, r8
 80076cc:	4628      	mov	r0, r5
 80076ce:	47b8      	blx	r7
 80076d0:	3001      	adds	r0, #1
 80076d2:	d1bf      	bne.n	8007654 <_printf_float+0x2d4>
 80076d4:	e6a2      	b.n	800741c <_printf_float+0x9c>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4631      	mov	r1, r6
 80076da:	4628      	mov	r0, r5
 80076dc:	9204      	str	r2, [sp, #16]
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f ae9b 	beq.w	800741c <_printf_float+0x9c>
 80076e6:	9b05      	ldr	r3, [sp, #20]
 80076e8:	9a04      	ldr	r2, [sp, #16]
 80076ea:	3301      	adds	r3, #1
 80076ec:	9305      	str	r3, [sp, #20]
 80076ee:	e7b7      	b.n	8007660 <_printf_float+0x2e0>
 80076f0:	4653      	mov	r3, sl
 80076f2:	465a      	mov	r2, fp
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	d1be      	bne.n	800767c <_printf_float+0x2fc>
 80076fe:	e68d      	b.n	800741c <_printf_float+0x9c>
 8007700:	9a04      	ldr	r2, [sp, #16]
 8007702:	464b      	mov	r3, r9
 8007704:	4442      	add	r2, r8
 8007706:	4631      	mov	r1, r6
 8007708:	4628      	mov	r0, r5
 800770a:	47b8      	blx	r7
 800770c:	3001      	adds	r0, #1
 800770e:	d1c1      	bne.n	8007694 <_printf_float+0x314>
 8007710:	e684      	b.n	800741c <_printf_float+0x9c>
 8007712:	9a08      	ldr	r2, [sp, #32]
 8007714:	2a01      	cmp	r2, #1
 8007716:	dc01      	bgt.n	800771c <_printf_float+0x39c>
 8007718:	07db      	lsls	r3, r3, #31
 800771a:	d537      	bpl.n	800778c <_printf_float+0x40c>
 800771c:	2301      	movs	r3, #1
 800771e:	4642      	mov	r2, r8
 8007720:	4631      	mov	r1, r6
 8007722:	4628      	mov	r0, r5
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	f43f ae78 	beq.w	800741c <_printf_float+0x9c>
 800772c:	4653      	mov	r3, sl
 800772e:	465a      	mov	r2, fp
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	47b8      	blx	r7
 8007736:	3001      	adds	r0, #1
 8007738:	f43f ae70 	beq.w	800741c <_printf_float+0x9c>
 800773c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007740:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007748:	d01b      	beq.n	8007782 <_printf_float+0x402>
 800774a:	9b08      	ldr	r3, [sp, #32]
 800774c:	f108 0201 	add.w	r2, r8, #1
 8007750:	3b01      	subs	r3, #1
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	d10e      	bne.n	800777a <_printf_float+0x3fa>
 800775c:	e65e      	b.n	800741c <_printf_float+0x9c>
 800775e:	2301      	movs	r3, #1
 8007760:	464a      	mov	r2, r9
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f ae57 	beq.w	800741c <_printf_float+0x9c>
 800776e:	f108 0801 	add.w	r8, r8, #1
 8007772:	9b08      	ldr	r3, [sp, #32]
 8007774:	3b01      	subs	r3, #1
 8007776:	4543      	cmp	r3, r8
 8007778:	dcf1      	bgt.n	800775e <_printf_float+0x3de>
 800777a:	9b04      	ldr	r3, [sp, #16]
 800777c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007780:	e6db      	b.n	800753a <_printf_float+0x1ba>
 8007782:	f04f 0800 	mov.w	r8, #0
 8007786:	f104 091a 	add.w	r9, r4, #26
 800778a:	e7f2      	b.n	8007772 <_printf_float+0x3f2>
 800778c:	2301      	movs	r3, #1
 800778e:	4642      	mov	r2, r8
 8007790:	e7df      	b.n	8007752 <_printf_float+0x3d2>
 8007792:	2301      	movs	r3, #1
 8007794:	464a      	mov	r2, r9
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	f43f ae3d 	beq.w	800741c <_printf_float+0x9c>
 80077a2:	f108 0801 	add.w	r8, r8, #1
 80077a6:	68e3      	ldr	r3, [r4, #12]
 80077a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077aa:	1a5b      	subs	r3, r3, r1
 80077ac:	4543      	cmp	r3, r8
 80077ae:	dcf0      	bgt.n	8007792 <_printf_float+0x412>
 80077b0:	e6f7      	b.n	80075a2 <_printf_float+0x222>
 80077b2:	f04f 0800 	mov.w	r8, #0
 80077b6:	f104 0919 	add.w	r9, r4, #25
 80077ba:	e7f4      	b.n	80077a6 <_printf_float+0x426>

080077bc <_printf_common>:
 80077bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	4616      	mov	r6, r2
 80077c2:	4699      	mov	r9, r3
 80077c4:	688a      	ldr	r2, [r1, #8]
 80077c6:	690b      	ldr	r3, [r1, #16]
 80077c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077cc:	4293      	cmp	r3, r2
 80077ce:	bfb8      	it	lt
 80077d0:	4613      	movlt	r3, r2
 80077d2:	6033      	str	r3, [r6, #0]
 80077d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077d8:	4607      	mov	r7, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	b10a      	cbz	r2, 80077e2 <_printf_common+0x26>
 80077de:	3301      	adds	r3, #1
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	0699      	lsls	r1, r3, #26
 80077e6:	bf42      	ittt	mi
 80077e8:	6833      	ldrmi	r3, [r6, #0]
 80077ea:	3302      	addmi	r3, #2
 80077ec:	6033      	strmi	r3, [r6, #0]
 80077ee:	6825      	ldr	r5, [r4, #0]
 80077f0:	f015 0506 	ands.w	r5, r5, #6
 80077f4:	d106      	bne.n	8007804 <_printf_common+0x48>
 80077f6:	f104 0a19 	add.w	sl, r4, #25
 80077fa:	68e3      	ldr	r3, [r4, #12]
 80077fc:	6832      	ldr	r2, [r6, #0]
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	42ab      	cmp	r3, r5
 8007802:	dc26      	bgt.n	8007852 <_printf_common+0x96>
 8007804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007808:	1e13      	subs	r3, r2, #0
 800780a:	6822      	ldr	r2, [r4, #0]
 800780c:	bf18      	it	ne
 800780e:	2301      	movne	r3, #1
 8007810:	0692      	lsls	r2, r2, #26
 8007812:	d42b      	bmi.n	800786c <_printf_common+0xb0>
 8007814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007818:	4649      	mov	r1, r9
 800781a:	4638      	mov	r0, r7
 800781c:	47c0      	blx	r8
 800781e:	3001      	adds	r0, #1
 8007820:	d01e      	beq.n	8007860 <_printf_common+0xa4>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	68e5      	ldr	r5, [r4, #12]
 8007826:	6832      	ldr	r2, [r6, #0]
 8007828:	f003 0306 	and.w	r3, r3, #6
 800782c:	2b04      	cmp	r3, #4
 800782e:	bf08      	it	eq
 8007830:	1aad      	subeq	r5, r5, r2
 8007832:	68a3      	ldr	r3, [r4, #8]
 8007834:	6922      	ldr	r2, [r4, #16]
 8007836:	bf0c      	ite	eq
 8007838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800783c:	2500      	movne	r5, #0
 800783e:	4293      	cmp	r3, r2
 8007840:	bfc4      	itt	gt
 8007842:	1a9b      	subgt	r3, r3, r2
 8007844:	18ed      	addgt	r5, r5, r3
 8007846:	2600      	movs	r6, #0
 8007848:	341a      	adds	r4, #26
 800784a:	42b5      	cmp	r5, r6
 800784c:	d11a      	bne.n	8007884 <_printf_common+0xc8>
 800784e:	2000      	movs	r0, #0
 8007850:	e008      	b.n	8007864 <_printf_common+0xa8>
 8007852:	2301      	movs	r3, #1
 8007854:	4652      	mov	r2, sl
 8007856:	4649      	mov	r1, r9
 8007858:	4638      	mov	r0, r7
 800785a:	47c0      	blx	r8
 800785c:	3001      	adds	r0, #1
 800785e:	d103      	bne.n	8007868 <_printf_common+0xac>
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007868:	3501      	adds	r5, #1
 800786a:	e7c6      	b.n	80077fa <_printf_common+0x3e>
 800786c:	18e1      	adds	r1, r4, r3
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	2030      	movs	r0, #48	; 0x30
 8007872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007876:	4422      	add	r2, r4
 8007878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800787c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007880:	3302      	adds	r3, #2
 8007882:	e7c7      	b.n	8007814 <_printf_common+0x58>
 8007884:	2301      	movs	r3, #1
 8007886:	4622      	mov	r2, r4
 8007888:	4649      	mov	r1, r9
 800788a:	4638      	mov	r0, r7
 800788c:	47c0      	blx	r8
 800788e:	3001      	adds	r0, #1
 8007890:	d0e6      	beq.n	8007860 <_printf_common+0xa4>
 8007892:	3601      	adds	r6, #1
 8007894:	e7d9      	b.n	800784a <_printf_common+0x8e>
	...

08007898 <_printf_i>:
 8007898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	7e0f      	ldrb	r7, [r1, #24]
 800789e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078a0:	2f78      	cmp	r7, #120	; 0x78
 80078a2:	4691      	mov	r9, r2
 80078a4:	4680      	mov	r8, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	469a      	mov	sl, r3
 80078aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078ae:	d807      	bhi.n	80078c0 <_printf_i+0x28>
 80078b0:	2f62      	cmp	r7, #98	; 0x62
 80078b2:	d80a      	bhi.n	80078ca <_printf_i+0x32>
 80078b4:	2f00      	cmp	r7, #0
 80078b6:	f000 80d8 	beq.w	8007a6a <_printf_i+0x1d2>
 80078ba:	2f58      	cmp	r7, #88	; 0x58
 80078bc:	f000 80a3 	beq.w	8007a06 <_printf_i+0x16e>
 80078c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078c8:	e03a      	b.n	8007940 <_printf_i+0xa8>
 80078ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078ce:	2b15      	cmp	r3, #21
 80078d0:	d8f6      	bhi.n	80078c0 <_printf_i+0x28>
 80078d2:	a101      	add	r1, pc, #4	; (adr r1, 80078d8 <_printf_i+0x40>)
 80078d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078d8:	08007931 	.word	0x08007931
 80078dc:	08007945 	.word	0x08007945
 80078e0:	080078c1 	.word	0x080078c1
 80078e4:	080078c1 	.word	0x080078c1
 80078e8:	080078c1 	.word	0x080078c1
 80078ec:	080078c1 	.word	0x080078c1
 80078f0:	08007945 	.word	0x08007945
 80078f4:	080078c1 	.word	0x080078c1
 80078f8:	080078c1 	.word	0x080078c1
 80078fc:	080078c1 	.word	0x080078c1
 8007900:	080078c1 	.word	0x080078c1
 8007904:	08007a51 	.word	0x08007a51
 8007908:	08007975 	.word	0x08007975
 800790c:	08007a33 	.word	0x08007a33
 8007910:	080078c1 	.word	0x080078c1
 8007914:	080078c1 	.word	0x080078c1
 8007918:	08007a73 	.word	0x08007a73
 800791c:	080078c1 	.word	0x080078c1
 8007920:	08007975 	.word	0x08007975
 8007924:	080078c1 	.word	0x080078c1
 8007928:	080078c1 	.word	0x080078c1
 800792c:	08007a3b 	.word	0x08007a3b
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	1d1a      	adds	r2, r3, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	602a      	str	r2, [r5, #0]
 8007938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800793c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007940:	2301      	movs	r3, #1
 8007942:	e0a3      	b.n	8007a8c <_printf_i+0x1f4>
 8007944:	6820      	ldr	r0, [r4, #0]
 8007946:	6829      	ldr	r1, [r5, #0]
 8007948:	0606      	lsls	r6, r0, #24
 800794a:	f101 0304 	add.w	r3, r1, #4
 800794e:	d50a      	bpl.n	8007966 <_printf_i+0xce>
 8007950:	680e      	ldr	r6, [r1, #0]
 8007952:	602b      	str	r3, [r5, #0]
 8007954:	2e00      	cmp	r6, #0
 8007956:	da03      	bge.n	8007960 <_printf_i+0xc8>
 8007958:	232d      	movs	r3, #45	; 0x2d
 800795a:	4276      	negs	r6, r6
 800795c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007960:	485e      	ldr	r0, [pc, #376]	; (8007adc <_printf_i+0x244>)
 8007962:	230a      	movs	r3, #10
 8007964:	e019      	b.n	800799a <_printf_i+0x102>
 8007966:	680e      	ldr	r6, [r1, #0]
 8007968:	602b      	str	r3, [r5, #0]
 800796a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800796e:	bf18      	it	ne
 8007970:	b236      	sxthne	r6, r6
 8007972:	e7ef      	b.n	8007954 <_printf_i+0xbc>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	6820      	ldr	r0, [r4, #0]
 8007978:	1d19      	adds	r1, r3, #4
 800797a:	6029      	str	r1, [r5, #0]
 800797c:	0601      	lsls	r1, r0, #24
 800797e:	d501      	bpl.n	8007984 <_printf_i+0xec>
 8007980:	681e      	ldr	r6, [r3, #0]
 8007982:	e002      	b.n	800798a <_printf_i+0xf2>
 8007984:	0646      	lsls	r6, r0, #25
 8007986:	d5fb      	bpl.n	8007980 <_printf_i+0xe8>
 8007988:	881e      	ldrh	r6, [r3, #0]
 800798a:	4854      	ldr	r0, [pc, #336]	; (8007adc <_printf_i+0x244>)
 800798c:	2f6f      	cmp	r7, #111	; 0x6f
 800798e:	bf0c      	ite	eq
 8007990:	2308      	moveq	r3, #8
 8007992:	230a      	movne	r3, #10
 8007994:	2100      	movs	r1, #0
 8007996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800799a:	6865      	ldr	r5, [r4, #4]
 800799c:	60a5      	str	r5, [r4, #8]
 800799e:	2d00      	cmp	r5, #0
 80079a0:	bfa2      	ittt	ge
 80079a2:	6821      	ldrge	r1, [r4, #0]
 80079a4:	f021 0104 	bicge.w	r1, r1, #4
 80079a8:	6021      	strge	r1, [r4, #0]
 80079aa:	b90e      	cbnz	r6, 80079b0 <_printf_i+0x118>
 80079ac:	2d00      	cmp	r5, #0
 80079ae:	d04d      	beq.n	8007a4c <_printf_i+0x1b4>
 80079b0:	4615      	mov	r5, r2
 80079b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80079b6:	fb03 6711 	mls	r7, r3, r1, r6
 80079ba:	5dc7      	ldrb	r7, [r0, r7]
 80079bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079c0:	4637      	mov	r7, r6
 80079c2:	42bb      	cmp	r3, r7
 80079c4:	460e      	mov	r6, r1
 80079c6:	d9f4      	bls.n	80079b2 <_printf_i+0x11a>
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d10b      	bne.n	80079e4 <_printf_i+0x14c>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	07de      	lsls	r6, r3, #31
 80079d0:	d508      	bpl.n	80079e4 <_printf_i+0x14c>
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6861      	ldr	r1, [r4, #4]
 80079d6:	4299      	cmp	r1, r3
 80079d8:	bfde      	ittt	le
 80079da:	2330      	movle	r3, #48	; 0x30
 80079dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079e4:	1b52      	subs	r2, r2, r5
 80079e6:	6122      	str	r2, [r4, #16]
 80079e8:	f8cd a000 	str.w	sl, [sp]
 80079ec:	464b      	mov	r3, r9
 80079ee:	aa03      	add	r2, sp, #12
 80079f0:	4621      	mov	r1, r4
 80079f2:	4640      	mov	r0, r8
 80079f4:	f7ff fee2 	bl	80077bc <_printf_common>
 80079f8:	3001      	adds	r0, #1
 80079fa:	d14c      	bne.n	8007a96 <_printf_i+0x1fe>
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007a00:	b004      	add	sp, #16
 8007a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a06:	4835      	ldr	r0, [pc, #212]	; (8007adc <_printf_i+0x244>)
 8007a08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a0c:	6829      	ldr	r1, [r5, #0]
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a14:	6029      	str	r1, [r5, #0]
 8007a16:	061d      	lsls	r5, r3, #24
 8007a18:	d514      	bpl.n	8007a44 <_printf_i+0x1ac>
 8007a1a:	07df      	lsls	r7, r3, #31
 8007a1c:	bf44      	itt	mi
 8007a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a22:	6023      	strmi	r3, [r4, #0]
 8007a24:	b91e      	cbnz	r6, 8007a2e <_printf_i+0x196>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	f023 0320 	bic.w	r3, r3, #32
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	2310      	movs	r3, #16
 8007a30:	e7b0      	b.n	8007994 <_printf_i+0xfc>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	f043 0320 	orr.w	r3, r3, #32
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	2378      	movs	r3, #120	; 0x78
 8007a3c:	4828      	ldr	r0, [pc, #160]	; (8007ae0 <_printf_i+0x248>)
 8007a3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a42:	e7e3      	b.n	8007a0c <_printf_i+0x174>
 8007a44:	0659      	lsls	r1, r3, #25
 8007a46:	bf48      	it	mi
 8007a48:	b2b6      	uxthmi	r6, r6
 8007a4a:	e7e6      	b.n	8007a1a <_printf_i+0x182>
 8007a4c:	4615      	mov	r5, r2
 8007a4e:	e7bb      	b.n	80079c8 <_printf_i+0x130>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	6826      	ldr	r6, [r4, #0]
 8007a54:	6961      	ldr	r1, [r4, #20]
 8007a56:	1d18      	adds	r0, r3, #4
 8007a58:	6028      	str	r0, [r5, #0]
 8007a5a:	0635      	lsls	r5, r6, #24
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	d501      	bpl.n	8007a64 <_printf_i+0x1cc>
 8007a60:	6019      	str	r1, [r3, #0]
 8007a62:	e002      	b.n	8007a6a <_printf_i+0x1d2>
 8007a64:	0670      	lsls	r0, r6, #25
 8007a66:	d5fb      	bpl.n	8007a60 <_printf_i+0x1c8>
 8007a68:	8019      	strh	r1, [r3, #0]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6123      	str	r3, [r4, #16]
 8007a6e:	4615      	mov	r5, r2
 8007a70:	e7ba      	b.n	80079e8 <_printf_i+0x150>
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	1d1a      	adds	r2, r3, #4
 8007a76:	602a      	str	r2, [r5, #0]
 8007a78:	681d      	ldr	r5, [r3, #0]
 8007a7a:	6862      	ldr	r2, [r4, #4]
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f7f8 fbe6 	bl	8000250 <memchr>
 8007a84:	b108      	cbz	r0, 8007a8a <_printf_i+0x1f2>
 8007a86:	1b40      	subs	r0, r0, r5
 8007a88:	6060      	str	r0, [r4, #4]
 8007a8a:	6863      	ldr	r3, [r4, #4]
 8007a8c:	6123      	str	r3, [r4, #16]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a94:	e7a8      	b.n	80079e8 <_printf_i+0x150>
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	462a      	mov	r2, r5
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	47d0      	blx	sl
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d0ab      	beq.n	80079fc <_printf_i+0x164>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	079b      	lsls	r3, r3, #30
 8007aa8:	d413      	bmi.n	8007ad2 <_printf_i+0x23a>
 8007aaa:	68e0      	ldr	r0, [r4, #12]
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	4298      	cmp	r0, r3
 8007ab0:	bfb8      	it	lt
 8007ab2:	4618      	movlt	r0, r3
 8007ab4:	e7a4      	b.n	8007a00 <_printf_i+0x168>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4632      	mov	r2, r6
 8007aba:	4649      	mov	r1, r9
 8007abc:	4640      	mov	r0, r8
 8007abe:	47d0      	blx	sl
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d09b      	beq.n	80079fc <_printf_i+0x164>
 8007ac4:	3501      	adds	r5, #1
 8007ac6:	68e3      	ldr	r3, [r4, #12]
 8007ac8:	9903      	ldr	r1, [sp, #12]
 8007aca:	1a5b      	subs	r3, r3, r1
 8007acc:	42ab      	cmp	r3, r5
 8007ace:	dcf2      	bgt.n	8007ab6 <_printf_i+0x21e>
 8007ad0:	e7eb      	b.n	8007aaa <_printf_i+0x212>
 8007ad2:	2500      	movs	r5, #0
 8007ad4:	f104 0619 	add.w	r6, r4, #25
 8007ad8:	e7f5      	b.n	8007ac6 <_printf_i+0x22e>
 8007ada:	bf00      	nop
 8007adc:	0800a712 	.word	0x0800a712
 8007ae0:	0800a723 	.word	0x0800a723

08007ae4 <realloc>:
 8007ae4:	4b02      	ldr	r3, [pc, #8]	; (8007af0 <realloc+0xc>)
 8007ae6:	460a      	mov	r2, r1
 8007ae8:	4601      	mov	r1, r0
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	f001 ba60 	b.w	8008fb0 <_realloc_r>
 8007af0:	200003f8 	.word	0x200003f8

08007af4 <_sbrk_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4d06      	ldr	r5, [pc, #24]	; (8007b10 <_sbrk_r+0x1c>)
 8007af8:	2300      	movs	r3, #0
 8007afa:	4604      	mov	r4, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	602b      	str	r3, [r5, #0]
 8007b00:	f002 f942 	bl	8009d88 <_sbrk>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_sbrk_r+0x1a>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_sbrk_r+0x1a>
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	2000105c 	.word	0x2000105c

08007b14 <siprintf>:
 8007b14:	b40e      	push	{r1, r2, r3}
 8007b16:	b500      	push	{lr}
 8007b18:	b09c      	sub	sp, #112	; 0x70
 8007b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8007b1c:	9002      	str	r0, [sp, #8]
 8007b1e:	9006      	str	r0, [sp, #24]
 8007b20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b24:	4809      	ldr	r0, [pc, #36]	; (8007b4c <siprintf+0x38>)
 8007b26:	9107      	str	r1, [sp, #28]
 8007b28:	9104      	str	r1, [sp, #16]
 8007b2a:	4909      	ldr	r1, [pc, #36]	; (8007b50 <siprintf+0x3c>)
 8007b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b30:	9105      	str	r1, [sp, #20]
 8007b32:	6800      	ldr	r0, [r0, #0]
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	a902      	add	r1, sp, #8
 8007b38:	f001 fac4 	bl	80090c4 <_svfiprintf_r>
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	b01c      	add	sp, #112	; 0x70
 8007b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b48:	b003      	add	sp, #12
 8007b4a:	4770      	bx	lr
 8007b4c:	200003f8 	.word	0x200003f8
 8007b50:	ffff0208 	.word	0xffff0208

08007b54 <__sread>:
 8007b54:	b510      	push	{r4, lr}
 8007b56:	460c      	mov	r4, r1
 8007b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5c:	f001 fbb2 	bl	80092c4 <_read_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	bfab      	itete	ge
 8007b64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b66:	89a3      	ldrhlt	r3, [r4, #12]
 8007b68:	181b      	addge	r3, r3, r0
 8007b6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b6e:	bfac      	ite	ge
 8007b70:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b72:	81a3      	strhlt	r3, [r4, #12]
 8007b74:	bd10      	pop	{r4, pc}

08007b76 <__swrite>:
 8007b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7a:	461f      	mov	r7, r3
 8007b7c:	898b      	ldrh	r3, [r1, #12]
 8007b7e:	05db      	lsls	r3, r3, #23
 8007b80:	4605      	mov	r5, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	4616      	mov	r6, r2
 8007b86:	d505      	bpl.n	8007b94 <__swrite+0x1e>
 8007b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f000 fe6c 	bl	800886c <_lseek_r>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b9e:	81a3      	strh	r3, [r4, #12]
 8007ba0:	4632      	mov	r2, r6
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007baa:	f000 b83d 	b.w	8007c28 <_write_r>

08007bae <__sseek>:
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb6:	f000 fe59 	bl	800886c <_lseek_r>
 8007bba:	1c43      	adds	r3, r0, #1
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	bf15      	itete	ne
 8007bc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bca:	81a3      	strheq	r3, [r4, #12]
 8007bcc:	bf18      	it	ne
 8007bce:	81a3      	strhne	r3, [r4, #12]
 8007bd0:	bd10      	pop	{r4, pc}

08007bd2 <__sclose>:
 8007bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd6:	f000 b839 	b.w	8007c4c <_close_r>

08007bda <strncmp>:
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	b17a      	cbz	r2, 8007bfe <strncmp+0x24>
 8007bde:	4603      	mov	r3, r0
 8007be0:	3901      	subs	r1, #1
 8007be2:	1884      	adds	r4, r0, r2
 8007be4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007be8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007bec:	4290      	cmp	r0, r2
 8007bee:	d101      	bne.n	8007bf4 <strncmp+0x1a>
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	d101      	bne.n	8007bf8 <strncmp+0x1e>
 8007bf4:	1a80      	subs	r0, r0, r2
 8007bf6:	bd10      	pop	{r4, pc}
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d1f3      	bne.n	8007be4 <strncmp+0xa>
 8007bfc:	e7fa      	b.n	8007bf4 <strncmp+0x1a>
 8007bfe:	4610      	mov	r0, r2
 8007c00:	e7f9      	b.n	8007bf6 <strncmp+0x1c>

08007c02 <strncpy>:
 8007c02:	b510      	push	{r4, lr}
 8007c04:	3901      	subs	r1, #1
 8007c06:	4603      	mov	r3, r0
 8007c08:	b132      	cbz	r2, 8007c18 <strncpy+0x16>
 8007c0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c0e:	f803 4b01 	strb.w	r4, [r3], #1
 8007c12:	3a01      	subs	r2, #1
 8007c14:	2c00      	cmp	r4, #0
 8007c16:	d1f7      	bne.n	8007c08 <strncpy+0x6>
 8007c18:	441a      	add	r2, r3
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d100      	bne.n	8007c22 <strncpy+0x20>
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	f803 1b01 	strb.w	r1, [r3], #1
 8007c26:	e7f9      	b.n	8007c1c <strncpy+0x1a>

08007c28 <_write_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4d07      	ldr	r5, [pc, #28]	; (8007c48 <_write_r+0x20>)
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	4608      	mov	r0, r1
 8007c30:	4611      	mov	r1, r2
 8007c32:	2200      	movs	r2, #0
 8007c34:	602a      	str	r2, [r5, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f002 f8b4 	bl	8009da4 <_write>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_write_r+0x1e>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_write_r+0x1e>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	2000105c 	.word	0x2000105c

08007c4c <_close_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4d06      	ldr	r5, [pc, #24]	; (8007c68 <_close_r+0x1c>)
 8007c50:	2300      	movs	r3, #0
 8007c52:	4604      	mov	r4, r0
 8007c54:	4608      	mov	r0, r1
 8007c56:	602b      	str	r3, [r5, #0]
 8007c58:	f002 f85e 	bl	8009d18 <_close>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_close_r+0x1a>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_close_r+0x1a>
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	2000105c 	.word	0x2000105c

08007c6c <quorem>:
 8007c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c70:	6903      	ldr	r3, [r0, #16]
 8007c72:	690c      	ldr	r4, [r1, #16]
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	4607      	mov	r7, r0
 8007c78:	f2c0 8081 	blt.w	8007d7e <quorem+0x112>
 8007c7c:	3c01      	subs	r4, #1
 8007c7e:	f101 0814 	add.w	r8, r1, #20
 8007c82:	f100 0514 	add.w	r5, r0, #20
 8007c86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c94:	3301      	adds	r3, #1
 8007c96:	429a      	cmp	r2, r3
 8007c98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ca0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ca4:	d331      	bcc.n	8007d0a <quorem+0x9e>
 8007ca6:	f04f 0e00 	mov.w	lr, #0
 8007caa:	4640      	mov	r0, r8
 8007cac:	46ac      	mov	ip, r5
 8007cae:	46f2      	mov	sl, lr
 8007cb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cb4:	b293      	uxth	r3, r2
 8007cb6:	fb06 e303 	mla	r3, r6, r3, lr
 8007cba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	ebaa 0303 	sub.w	r3, sl, r3
 8007cc4:	f8dc a000 	ldr.w	sl, [ip]
 8007cc8:	0c12      	lsrs	r2, r2, #16
 8007cca:	fa13 f38a 	uxtah	r3, r3, sl
 8007cce:	fb06 e202 	mla	r2, r6, r2, lr
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	9b00      	ldr	r3, [sp, #0]
 8007cd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cda:	b292      	uxth	r2, r2
 8007cdc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ce4:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ce8:	4581      	cmp	r9, r0
 8007cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cee:	f84c 3b04 	str.w	r3, [ip], #4
 8007cf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cf6:	d2db      	bcs.n	8007cb0 <quorem+0x44>
 8007cf8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cfc:	b92b      	cbnz	r3, 8007d0a <quorem+0x9e>
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	3b04      	subs	r3, #4
 8007d02:	429d      	cmp	r5, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	d32e      	bcc.n	8007d66 <quorem+0xfa>
 8007d08:	613c      	str	r4, [r7, #16]
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f001 f84e 	bl	8008dac <__mcmp>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	db24      	blt.n	8007d5e <quorem+0xf2>
 8007d14:	3601      	adds	r6, #1
 8007d16:	4628      	mov	r0, r5
 8007d18:	f04f 0c00 	mov.w	ip, #0
 8007d1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d20:	f8d0 e000 	ldr.w	lr, [r0]
 8007d24:	b293      	uxth	r3, r2
 8007d26:	ebac 0303 	sub.w	r3, ip, r3
 8007d2a:	0c12      	lsrs	r2, r2, #16
 8007d2c:	fa13 f38e 	uxtah	r3, r3, lr
 8007d30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d3e:	45c1      	cmp	r9, r8
 8007d40:	f840 3b04 	str.w	r3, [r0], #4
 8007d44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d48:	d2e8      	bcs.n	8007d1c <quorem+0xb0>
 8007d4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d52:	b922      	cbnz	r2, 8007d5e <quorem+0xf2>
 8007d54:	3b04      	subs	r3, #4
 8007d56:	429d      	cmp	r5, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	d30a      	bcc.n	8007d72 <quorem+0x106>
 8007d5c:	613c      	str	r4, [r7, #16]
 8007d5e:	4630      	mov	r0, r6
 8007d60:	b003      	add	sp, #12
 8007d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	6812      	ldr	r2, [r2, #0]
 8007d68:	3b04      	subs	r3, #4
 8007d6a:	2a00      	cmp	r2, #0
 8007d6c:	d1cc      	bne.n	8007d08 <quorem+0x9c>
 8007d6e:	3c01      	subs	r4, #1
 8007d70:	e7c7      	b.n	8007d02 <quorem+0x96>
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	3b04      	subs	r3, #4
 8007d76:	2a00      	cmp	r2, #0
 8007d78:	d1f0      	bne.n	8007d5c <quorem+0xf0>
 8007d7a:	3c01      	subs	r4, #1
 8007d7c:	e7eb      	b.n	8007d56 <quorem+0xea>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e7ee      	b.n	8007d60 <quorem+0xf4>
 8007d82:	0000      	movs	r0, r0
 8007d84:	0000      	movs	r0, r0
	...

08007d88 <_dtoa_r>:
 8007d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	ed2d 8b02 	vpush	{d8}
 8007d90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d92:	b091      	sub	sp, #68	; 0x44
 8007d94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d98:	ec59 8b10 	vmov	r8, r9, d0
 8007d9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007d9e:	9106      	str	r1, [sp, #24]
 8007da0:	4606      	mov	r6, r0
 8007da2:	9208      	str	r2, [sp, #32]
 8007da4:	930c      	str	r3, [sp, #48]	; 0x30
 8007da6:	b975      	cbnz	r5, 8007dc6 <_dtoa_r+0x3e>
 8007da8:	2010      	movs	r0, #16
 8007daa:	f7ff f93d 	bl	8007028 <malloc>
 8007dae:	4602      	mov	r2, r0
 8007db0:	6270      	str	r0, [r6, #36]	; 0x24
 8007db2:	b920      	cbnz	r0, 8007dbe <_dtoa_r+0x36>
 8007db4:	4baa      	ldr	r3, [pc, #680]	; (8008060 <_dtoa_r+0x2d8>)
 8007db6:	21ea      	movs	r1, #234	; 0xea
 8007db8:	48aa      	ldr	r0, [pc, #680]	; (8008064 <_dtoa_r+0x2dc>)
 8007dba:	f001 fa95 	bl	80092e8 <__assert_func>
 8007dbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dc2:	6005      	str	r5, [r0, #0]
 8007dc4:	60c5      	str	r5, [r0, #12]
 8007dc6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007dc8:	6819      	ldr	r1, [r3, #0]
 8007dca:	b151      	cbz	r1, 8007de2 <_dtoa_r+0x5a>
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	604a      	str	r2, [r1, #4]
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	4093      	lsls	r3, r2
 8007dd4:	608b      	str	r3, [r1, #8]
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f000 fda6 	bl	8008928 <_Bfree>
 8007ddc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	f1b9 0300 	subs.w	r3, r9, #0
 8007de6:	bfbb      	ittet	lt
 8007de8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007dec:	9303      	strlt	r3, [sp, #12]
 8007dee:	2300      	movge	r3, #0
 8007df0:	2201      	movlt	r2, #1
 8007df2:	bfac      	ite	ge
 8007df4:	6023      	strge	r3, [r4, #0]
 8007df6:	6022      	strlt	r2, [r4, #0]
 8007df8:	4b9b      	ldr	r3, [pc, #620]	; (8008068 <_dtoa_r+0x2e0>)
 8007dfa:	9c03      	ldr	r4, [sp, #12]
 8007dfc:	43a3      	bics	r3, r4
 8007dfe:	d11c      	bne.n	8007e3a <_dtoa_r+0xb2>
 8007e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e02:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007e0c:	ea53 0308 	orrs.w	r3, r3, r8
 8007e10:	f000 84fd 	beq.w	800880e <_dtoa_r+0xa86>
 8007e14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e16:	b963      	cbnz	r3, 8007e32 <_dtoa_r+0xaa>
 8007e18:	4b94      	ldr	r3, [pc, #592]	; (800806c <_dtoa_r+0x2e4>)
 8007e1a:	e01f      	b.n	8007e5c <_dtoa_r+0xd4>
 8007e1c:	4b94      	ldr	r3, [pc, #592]	; (8008070 <_dtoa_r+0x2e8>)
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	3308      	adds	r3, #8
 8007e22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	9801      	ldr	r0, [sp, #4]
 8007e28:	b011      	add	sp, #68	; 0x44
 8007e2a:	ecbd 8b02 	vpop	{d8}
 8007e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e32:	4b8e      	ldr	r3, [pc, #568]	; (800806c <_dtoa_r+0x2e4>)
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	3303      	adds	r3, #3
 8007e38:	e7f3      	b.n	8007e22 <_dtoa_r+0x9a>
 8007e3a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007e3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e46:	d10b      	bne.n	8007e60 <_dtoa_r+0xd8>
 8007e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 84d9 	beq.w	8008808 <_dtoa_r+0xa80>
 8007e56:	4887      	ldr	r0, [pc, #540]	; (8008074 <_dtoa_r+0x2ec>)
 8007e58:	6018      	str	r0, [r3, #0]
 8007e5a:	1e43      	subs	r3, r0, #1
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	e7e2      	b.n	8007e26 <_dtoa_r+0x9e>
 8007e60:	a90f      	add	r1, sp, #60	; 0x3c
 8007e62:	aa0e      	add	r2, sp, #56	; 0x38
 8007e64:	4630      	mov	r0, r6
 8007e66:	eeb0 0b48 	vmov.f64	d0, d8
 8007e6a:	f001 f845 	bl	8008ef8 <__d2b>
 8007e6e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007e72:	4605      	mov	r5, r0
 8007e74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007e76:	2900      	cmp	r1, #0
 8007e78:	d046      	beq.n	8007f08 <_dtoa_r+0x180>
 8007e7a:	ee18 4a90 	vmov	r4, s17
 8007e7e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007e82:	ec53 2b18 	vmov	r2, r3, d8
 8007e86:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007e8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007e92:	2400      	movs	r4, #0
 8007e94:	ec43 2b16 	vmov	d6, r2, r3
 8007e98:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007e9c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008048 <_dtoa_r+0x2c0>
 8007ea0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007ea4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008050 <_dtoa_r+0x2c8>
 8007ea8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007eac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008058 <_dtoa_r+0x2d0>
 8007eb0:	ee07 1a90 	vmov	s15, r1
 8007eb4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007eb8:	eeb0 7b46 	vmov.f64	d7, d6
 8007ebc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007ec0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007ec4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ecc:	ee16 ba90 	vmov	fp, s13
 8007ed0:	940a      	str	r4, [sp, #40]	; 0x28
 8007ed2:	d508      	bpl.n	8007ee6 <_dtoa_r+0x15e>
 8007ed4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007ed8:	eeb4 6b47 	vcmp.f64	d6, d7
 8007edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee0:	bf18      	it	ne
 8007ee2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007ee6:	f1bb 0f16 	cmp.w	fp, #22
 8007eea:	d82f      	bhi.n	8007f4c <_dtoa_r+0x1c4>
 8007eec:	4b62      	ldr	r3, [pc, #392]	; (8008078 <_dtoa_r+0x2f0>)
 8007eee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ef2:	ed93 7b00 	vldr	d7, [r3]
 8007ef6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efe:	d501      	bpl.n	8007f04 <_dtoa_r+0x17c>
 8007f00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f04:	2300      	movs	r3, #0
 8007f06:	e022      	b.n	8007f4e <_dtoa_r+0x1c6>
 8007f08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f0a:	4401      	add	r1, r0
 8007f0c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	bfc1      	itttt	gt
 8007f14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f18:	fa04 f303 	lslgt.w	r3, r4, r3
 8007f1c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007f20:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007f24:	bfd6      	itet	le
 8007f26:	f1c3 0320 	rsble	r3, r3, #32
 8007f2a:	ea43 0808 	orrgt.w	r8, r3, r8
 8007f2e:	fa08 f803 	lslle.w	r8, r8, r3
 8007f32:	ee07 8a90 	vmov	s15, r8
 8007f36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f3a:	3901      	subs	r1, #1
 8007f3c:	ee17 4a90 	vmov	r4, s15
 8007f40:	ec53 2b17 	vmov	r2, r3, d7
 8007f44:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007f48:	2401      	movs	r4, #1
 8007f4a:	e7a3      	b.n	8007e94 <_dtoa_r+0x10c>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f50:	1a43      	subs	r3, r0, r1
 8007f52:	1e5a      	subs	r2, r3, #1
 8007f54:	bf45      	ittet	mi
 8007f56:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f5a:	9304      	strmi	r3, [sp, #16]
 8007f5c:	2300      	movpl	r3, #0
 8007f5e:	2300      	movmi	r3, #0
 8007f60:	9205      	str	r2, [sp, #20]
 8007f62:	bf54      	ite	pl
 8007f64:	9304      	strpl	r3, [sp, #16]
 8007f66:	9305      	strmi	r3, [sp, #20]
 8007f68:	f1bb 0f00 	cmp.w	fp, #0
 8007f6c:	db18      	blt.n	8007fa0 <_dtoa_r+0x218>
 8007f6e:	9b05      	ldr	r3, [sp, #20]
 8007f70:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007f74:	445b      	add	r3, fp
 8007f76:	9305      	str	r3, [sp, #20]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9a06      	ldr	r2, [sp, #24]
 8007f7c:	2a09      	cmp	r2, #9
 8007f7e:	d849      	bhi.n	8008014 <_dtoa_r+0x28c>
 8007f80:	2a05      	cmp	r2, #5
 8007f82:	bfc4      	itt	gt
 8007f84:	3a04      	subgt	r2, #4
 8007f86:	9206      	strgt	r2, [sp, #24]
 8007f88:	9a06      	ldr	r2, [sp, #24]
 8007f8a:	f1a2 0202 	sub.w	r2, r2, #2
 8007f8e:	bfcc      	ite	gt
 8007f90:	2400      	movgt	r4, #0
 8007f92:	2401      	movle	r4, #1
 8007f94:	2a03      	cmp	r2, #3
 8007f96:	d848      	bhi.n	800802a <_dtoa_r+0x2a2>
 8007f98:	e8df f002 	tbb	[pc, r2]
 8007f9c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007fa0:	9b04      	ldr	r3, [sp, #16]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	eba3 030b 	sub.w	r3, r3, fp
 8007fa8:	9304      	str	r3, [sp, #16]
 8007faa:	9209      	str	r2, [sp, #36]	; 0x24
 8007fac:	f1cb 0300 	rsb	r3, fp, #0
 8007fb0:	e7e3      	b.n	8007f7a <_dtoa_r+0x1f2>
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	9207      	str	r2, [sp, #28]
 8007fb6:	9a08      	ldr	r2, [sp, #32]
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	dc39      	bgt.n	8008030 <_dtoa_r+0x2a8>
 8007fbc:	f04f 0a01 	mov.w	sl, #1
 8007fc0:	46d1      	mov	r9, sl
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	f8cd a020 	str.w	sl, [sp, #32]
 8007fc8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007fca:	2100      	movs	r1, #0
 8007fcc:	6079      	str	r1, [r7, #4]
 8007fce:	2004      	movs	r0, #4
 8007fd0:	f100 0c14 	add.w	ip, r0, #20
 8007fd4:	4594      	cmp	ip, r2
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	d92f      	bls.n	800803a <_dtoa_r+0x2b2>
 8007fda:	4630      	mov	r0, r6
 8007fdc:	930d      	str	r3, [sp, #52]	; 0x34
 8007fde:	f000 fc63 	bl	80088a8 <_Balloc>
 8007fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fe4:	9001      	str	r0, [sp, #4]
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d149      	bne.n	8008080 <_dtoa_r+0x2f8>
 8007fec:	4b23      	ldr	r3, [pc, #140]	; (800807c <_dtoa_r+0x2f4>)
 8007fee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ff2:	e6e1      	b.n	8007db8 <_dtoa_r+0x30>
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	e7dd      	b.n	8007fb4 <_dtoa_r+0x22c>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	9207      	str	r2, [sp, #28]
 8007ffc:	9a08      	ldr	r2, [sp, #32]
 8007ffe:	eb0b 0a02 	add.w	sl, fp, r2
 8008002:	f10a 0901 	add.w	r9, sl, #1
 8008006:	464a      	mov	r2, r9
 8008008:	2a01      	cmp	r2, #1
 800800a:	bfb8      	it	lt
 800800c:	2201      	movlt	r2, #1
 800800e:	e7db      	b.n	8007fc8 <_dtoa_r+0x240>
 8008010:	2201      	movs	r2, #1
 8008012:	e7f2      	b.n	8007ffa <_dtoa_r+0x272>
 8008014:	2401      	movs	r4, #1
 8008016:	2200      	movs	r2, #0
 8008018:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800801c:	f04f 3aff 	mov.w	sl, #4294967295
 8008020:	2100      	movs	r1, #0
 8008022:	46d1      	mov	r9, sl
 8008024:	2212      	movs	r2, #18
 8008026:	9108      	str	r1, [sp, #32]
 8008028:	e7ce      	b.n	8007fc8 <_dtoa_r+0x240>
 800802a:	2201      	movs	r2, #1
 800802c:	9207      	str	r2, [sp, #28]
 800802e:	e7f5      	b.n	800801c <_dtoa_r+0x294>
 8008030:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008034:	46d1      	mov	r9, sl
 8008036:	4652      	mov	r2, sl
 8008038:	e7c6      	b.n	8007fc8 <_dtoa_r+0x240>
 800803a:	3101      	adds	r1, #1
 800803c:	6079      	str	r1, [r7, #4]
 800803e:	0040      	lsls	r0, r0, #1
 8008040:	e7c6      	b.n	8007fd0 <_dtoa_r+0x248>
 8008042:	bf00      	nop
 8008044:	f3af 8000 	nop.w
 8008048:	636f4361 	.word	0x636f4361
 800804c:	3fd287a7 	.word	0x3fd287a7
 8008050:	8b60c8b3 	.word	0x8b60c8b3
 8008054:	3fc68a28 	.word	0x3fc68a28
 8008058:	509f79fb 	.word	0x509f79fb
 800805c:	3fd34413 	.word	0x3fd34413
 8008060:	0800a741 	.word	0x0800a741
 8008064:	0800a758 	.word	0x0800a758
 8008068:	7ff00000 	.word	0x7ff00000
 800806c:	0800a73d 	.word	0x0800a73d
 8008070:	0800a734 	.word	0x0800a734
 8008074:	0800a711 	.word	0x0800a711
 8008078:	0800a848 	.word	0x0800a848
 800807c:	0800a7b3 	.word	0x0800a7b3
 8008080:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008082:	9901      	ldr	r1, [sp, #4]
 8008084:	6011      	str	r1, [r2, #0]
 8008086:	f1b9 0f0e 	cmp.w	r9, #14
 800808a:	d86c      	bhi.n	8008166 <_dtoa_r+0x3de>
 800808c:	2c00      	cmp	r4, #0
 800808e:	d06a      	beq.n	8008166 <_dtoa_r+0x3de>
 8008090:	f1bb 0f00 	cmp.w	fp, #0
 8008094:	f340 80a0 	ble.w	80081d8 <_dtoa_r+0x450>
 8008098:	49c1      	ldr	r1, [pc, #772]	; (80083a0 <_dtoa_r+0x618>)
 800809a:	f00b 020f 	and.w	r2, fp, #15
 800809e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80080a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80080a6:	ed92 7b00 	vldr	d7, [r2]
 80080aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80080ae:	f000 8087 	beq.w	80081c0 <_dtoa_r+0x438>
 80080b2:	4abc      	ldr	r2, [pc, #752]	; (80083a4 <_dtoa_r+0x61c>)
 80080b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80080b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80080bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80080c0:	f001 010f 	and.w	r1, r1, #15
 80080c4:	2203      	movs	r2, #3
 80080c6:	48b7      	ldr	r0, [pc, #732]	; (80083a4 <_dtoa_r+0x61c>)
 80080c8:	2900      	cmp	r1, #0
 80080ca:	d17b      	bne.n	80081c4 <_dtoa_r+0x43c>
 80080cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80080d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80080d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080da:	2900      	cmp	r1, #0
 80080dc:	f000 80a2 	beq.w	8008224 <_dtoa_r+0x49c>
 80080e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80080e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f0:	f140 8098 	bpl.w	8008224 <_dtoa_r+0x49c>
 80080f4:	f1b9 0f00 	cmp.w	r9, #0
 80080f8:	f000 8094 	beq.w	8008224 <_dtoa_r+0x49c>
 80080fc:	f1ba 0f00 	cmp.w	sl, #0
 8008100:	dd2f      	ble.n	8008162 <_dtoa_r+0x3da>
 8008102:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008106:	ee27 7b06 	vmul.f64	d7, d7, d6
 800810a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800810e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008112:	3201      	adds	r2, #1
 8008114:	4650      	mov	r0, sl
 8008116:	ed9d 6b02 	vldr	d6, [sp, #8]
 800811a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800811e:	ee07 2a90 	vmov	s15, r2
 8008122:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008126:	eea7 5b06 	vfma.f64	d5, d7, d6
 800812a:	ee15 4a90 	vmov	r4, s11
 800812e:	ec52 1b15 	vmov	r1, r2, d5
 8008132:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008136:	2800      	cmp	r0, #0
 8008138:	d177      	bne.n	800822a <_dtoa_r+0x4a2>
 800813a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800813e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008142:	ec42 1b17 	vmov	d7, r1, r2
 8008146:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800814a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814e:	f300 8263 	bgt.w	8008618 <_dtoa_r+0x890>
 8008152:	eeb1 7b47 	vneg.f64	d7, d7
 8008156:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800815a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815e:	f100 8258 	bmi.w	8008612 <_dtoa_r+0x88a>
 8008162:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008168:	2a00      	cmp	r2, #0
 800816a:	f2c0 811d 	blt.w	80083a8 <_dtoa_r+0x620>
 800816e:	f1bb 0f0e 	cmp.w	fp, #14
 8008172:	f300 8119 	bgt.w	80083a8 <_dtoa_r+0x620>
 8008176:	4b8a      	ldr	r3, [pc, #552]	; (80083a0 <_dtoa_r+0x618>)
 8008178:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800817c:	ed93 6b00 	vldr	d6, [r3]
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	2b00      	cmp	r3, #0
 8008184:	f280 80b7 	bge.w	80082f6 <_dtoa_r+0x56e>
 8008188:	f1b9 0f00 	cmp.w	r9, #0
 800818c:	f300 80b3 	bgt.w	80082f6 <_dtoa_r+0x56e>
 8008190:	f040 823f 	bne.w	8008612 <_dtoa_r+0x88a>
 8008194:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008198:	ee26 6b07 	vmul.f64	d6, d6, d7
 800819c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a8:	464c      	mov	r4, r9
 80081aa:	464f      	mov	r7, r9
 80081ac:	f280 8215 	bge.w	80085da <_dtoa_r+0x852>
 80081b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80081b4:	2331      	movs	r3, #49	; 0x31
 80081b6:	f808 3b01 	strb.w	r3, [r8], #1
 80081ba:	f10b 0b01 	add.w	fp, fp, #1
 80081be:	e211      	b.n	80085e4 <_dtoa_r+0x85c>
 80081c0:	2202      	movs	r2, #2
 80081c2:	e780      	b.n	80080c6 <_dtoa_r+0x33e>
 80081c4:	07cc      	lsls	r4, r1, #31
 80081c6:	d504      	bpl.n	80081d2 <_dtoa_r+0x44a>
 80081c8:	ed90 6b00 	vldr	d6, [r0]
 80081cc:	3201      	adds	r2, #1
 80081ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081d2:	1049      	asrs	r1, r1, #1
 80081d4:	3008      	adds	r0, #8
 80081d6:	e777      	b.n	80080c8 <_dtoa_r+0x340>
 80081d8:	d022      	beq.n	8008220 <_dtoa_r+0x498>
 80081da:	f1cb 0100 	rsb	r1, fp, #0
 80081de:	4a70      	ldr	r2, [pc, #448]	; (80083a0 <_dtoa_r+0x618>)
 80081e0:	f001 000f 	and.w	r0, r1, #15
 80081e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80081e8:	ed92 7b00 	vldr	d7, [r2]
 80081ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80081f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081f4:	486b      	ldr	r0, [pc, #428]	; (80083a4 <_dtoa_r+0x61c>)
 80081f6:	1109      	asrs	r1, r1, #4
 80081f8:	2400      	movs	r4, #0
 80081fa:	2202      	movs	r2, #2
 80081fc:	b929      	cbnz	r1, 800820a <_dtoa_r+0x482>
 80081fe:	2c00      	cmp	r4, #0
 8008200:	f43f af6a 	beq.w	80080d8 <_dtoa_r+0x350>
 8008204:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008208:	e766      	b.n	80080d8 <_dtoa_r+0x350>
 800820a:	07cf      	lsls	r7, r1, #31
 800820c:	d505      	bpl.n	800821a <_dtoa_r+0x492>
 800820e:	ed90 6b00 	vldr	d6, [r0]
 8008212:	3201      	adds	r2, #1
 8008214:	2401      	movs	r4, #1
 8008216:	ee27 7b06 	vmul.f64	d7, d7, d6
 800821a:	1049      	asrs	r1, r1, #1
 800821c:	3008      	adds	r0, #8
 800821e:	e7ed      	b.n	80081fc <_dtoa_r+0x474>
 8008220:	2202      	movs	r2, #2
 8008222:	e759      	b.n	80080d8 <_dtoa_r+0x350>
 8008224:	465f      	mov	r7, fp
 8008226:	4648      	mov	r0, r9
 8008228:	e775      	b.n	8008116 <_dtoa_r+0x38e>
 800822a:	ec42 1b17 	vmov	d7, r1, r2
 800822e:	4a5c      	ldr	r2, [pc, #368]	; (80083a0 <_dtoa_r+0x618>)
 8008230:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008234:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008238:	9a01      	ldr	r2, [sp, #4]
 800823a:	1814      	adds	r4, r2, r0
 800823c:	9a07      	ldr	r2, [sp, #28]
 800823e:	b352      	cbz	r2, 8008296 <_dtoa_r+0x50e>
 8008240:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008244:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008248:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800824c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008250:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008254:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008258:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800825c:	ee14 2a90 	vmov	r2, s9
 8008260:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008264:	3230      	adds	r2, #48	; 0x30
 8008266:	ee36 6b45 	vsub.f64	d6, d6, d5
 800826a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800826e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008272:	f808 2b01 	strb.w	r2, [r8], #1
 8008276:	d439      	bmi.n	80082ec <_dtoa_r+0x564>
 8008278:	ee32 5b46 	vsub.f64	d5, d2, d6
 800827c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008284:	d472      	bmi.n	800836c <_dtoa_r+0x5e4>
 8008286:	45a0      	cmp	r8, r4
 8008288:	f43f af6b 	beq.w	8008162 <_dtoa_r+0x3da>
 800828c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008290:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008294:	e7e0      	b.n	8008258 <_dtoa_r+0x4d0>
 8008296:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800829a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800829e:	4621      	mov	r1, r4
 80082a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80082a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80082a8:	ee14 2a90 	vmov	r2, s9
 80082ac:	3230      	adds	r2, #48	; 0x30
 80082ae:	f808 2b01 	strb.w	r2, [r8], #1
 80082b2:	45a0      	cmp	r8, r4
 80082b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80082b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80082bc:	d118      	bne.n	80082f0 <_dtoa_r+0x568>
 80082be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80082c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80082c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80082ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ce:	dc4d      	bgt.n	800836c <_dtoa_r+0x5e4>
 80082d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80082d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082dc:	f57f af41 	bpl.w	8008162 <_dtoa_r+0x3da>
 80082e0:	4688      	mov	r8, r1
 80082e2:	3901      	subs	r1, #1
 80082e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80082e8:	2b30      	cmp	r3, #48	; 0x30
 80082ea:	d0f9      	beq.n	80082e0 <_dtoa_r+0x558>
 80082ec:	46bb      	mov	fp, r7
 80082ee:	e02a      	b.n	8008346 <_dtoa_r+0x5be>
 80082f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80082f4:	e7d6      	b.n	80082a4 <_dtoa_r+0x51c>
 80082f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80082fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008302:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008306:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800830a:	ee15 3a10 	vmov	r3, s10
 800830e:	3330      	adds	r3, #48	; 0x30
 8008310:	f808 3b01 	strb.w	r3, [r8], #1
 8008314:	9b01      	ldr	r3, [sp, #4]
 8008316:	eba8 0303 	sub.w	r3, r8, r3
 800831a:	4599      	cmp	r9, r3
 800831c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008320:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008324:	d133      	bne.n	800838e <_dtoa_r+0x606>
 8008326:	ee37 7b07 	vadd.f64	d7, d7, d7
 800832a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800832e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008332:	dc1a      	bgt.n	800836a <_dtoa_r+0x5e2>
 8008334:	eeb4 7b46 	vcmp.f64	d7, d6
 8008338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800833c:	d103      	bne.n	8008346 <_dtoa_r+0x5be>
 800833e:	ee15 3a10 	vmov	r3, s10
 8008342:	07d9      	lsls	r1, r3, #31
 8008344:	d411      	bmi.n	800836a <_dtoa_r+0x5e2>
 8008346:	4629      	mov	r1, r5
 8008348:	4630      	mov	r0, r6
 800834a:	f000 faed 	bl	8008928 <_Bfree>
 800834e:	2300      	movs	r3, #0
 8008350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008352:	f888 3000 	strb.w	r3, [r8]
 8008356:	f10b 0301 	add.w	r3, fp, #1
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800835e:	2b00      	cmp	r3, #0
 8008360:	f43f ad61 	beq.w	8007e26 <_dtoa_r+0x9e>
 8008364:	f8c3 8000 	str.w	r8, [r3]
 8008368:	e55d      	b.n	8007e26 <_dtoa_r+0x9e>
 800836a:	465f      	mov	r7, fp
 800836c:	4643      	mov	r3, r8
 800836e:	4698      	mov	r8, r3
 8008370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008374:	2a39      	cmp	r2, #57	; 0x39
 8008376:	d106      	bne.n	8008386 <_dtoa_r+0x5fe>
 8008378:	9a01      	ldr	r2, [sp, #4]
 800837a:	429a      	cmp	r2, r3
 800837c:	d1f7      	bne.n	800836e <_dtoa_r+0x5e6>
 800837e:	9901      	ldr	r1, [sp, #4]
 8008380:	2230      	movs	r2, #48	; 0x30
 8008382:	3701      	adds	r7, #1
 8008384:	700a      	strb	r2, [r1, #0]
 8008386:	781a      	ldrb	r2, [r3, #0]
 8008388:	3201      	adds	r2, #1
 800838a:	701a      	strb	r2, [r3, #0]
 800838c:	e7ae      	b.n	80082ec <_dtoa_r+0x564>
 800838e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008392:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800839a:	d1b2      	bne.n	8008302 <_dtoa_r+0x57a>
 800839c:	e7d3      	b.n	8008346 <_dtoa_r+0x5be>
 800839e:	bf00      	nop
 80083a0:	0800a848 	.word	0x0800a848
 80083a4:	0800a820 	.word	0x0800a820
 80083a8:	9907      	ldr	r1, [sp, #28]
 80083aa:	2900      	cmp	r1, #0
 80083ac:	f000 80d0 	beq.w	8008550 <_dtoa_r+0x7c8>
 80083b0:	9906      	ldr	r1, [sp, #24]
 80083b2:	2901      	cmp	r1, #1
 80083b4:	f300 80b4 	bgt.w	8008520 <_dtoa_r+0x798>
 80083b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083ba:	2900      	cmp	r1, #0
 80083bc:	f000 80ac 	beq.w	8008518 <_dtoa_r+0x790>
 80083c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80083c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80083c8:	461c      	mov	r4, r3
 80083ca:	930a      	str	r3, [sp, #40]	; 0x28
 80083cc:	9b04      	ldr	r3, [sp, #16]
 80083ce:	4413      	add	r3, r2
 80083d0:	9304      	str	r3, [sp, #16]
 80083d2:	9b05      	ldr	r3, [sp, #20]
 80083d4:	2101      	movs	r1, #1
 80083d6:	4413      	add	r3, r2
 80083d8:	4630      	mov	r0, r6
 80083da:	9305      	str	r3, [sp, #20]
 80083dc:	f000 fb5c 	bl	8008a98 <__i2b>
 80083e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e2:	4607      	mov	r7, r0
 80083e4:	f1b8 0f00 	cmp.w	r8, #0
 80083e8:	dd0d      	ble.n	8008406 <_dtoa_r+0x67e>
 80083ea:	9a05      	ldr	r2, [sp, #20]
 80083ec:	2a00      	cmp	r2, #0
 80083ee:	dd0a      	ble.n	8008406 <_dtoa_r+0x67e>
 80083f0:	4542      	cmp	r2, r8
 80083f2:	9904      	ldr	r1, [sp, #16]
 80083f4:	bfa8      	it	ge
 80083f6:	4642      	movge	r2, r8
 80083f8:	1a89      	subs	r1, r1, r2
 80083fa:	9104      	str	r1, [sp, #16]
 80083fc:	9905      	ldr	r1, [sp, #20]
 80083fe:	eba8 0802 	sub.w	r8, r8, r2
 8008402:	1a8a      	subs	r2, r1, r2
 8008404:	9205      	str	r2, [sp, #20]
 8008406:	b303      	cbz	r3, 800844a <_dtoa_r+0x6c2>
 8008408:	9a07      	ldr	r2, [sp, #28]
 800840a:	2a00      	cmp	r2, #0
 800840c:	f000 80a5 	beq.w	800855a <_dtoa_r+0x7d2>
 8008410:	2c00      	cmp	r4, #0
 8008412:	dd13      	ble.n	800843c <_dtoa_r+0x6b4>
 8008414:	4639      	mov	r1, r7
 8008416:	4622      	mov	r2, r4
 8008418:	4630      	mov	r0, r6
 800841a:	930d      	str	r3, [sp, #52]	; 0x34
 800841c:	f000 fbfc 	bl	8008c18 <__pow5mult>
 8008420:	462a      	mov	r2, r5
 8008422:	4601      	mov	r1, r0
 8008424:	4607      	mov	r7, r0
 8008426:	4630      	mov	r0, r6
 8008428:	f000 fb4c 	bl	8008ac4 <__multiply>
 800842c:	4629      	mov	r1, r5
 800842e:	900a      	str	r0, [sp, #40]	; 0x28
 8008430:	4630      	mov	r0, r6
 8008432:	f000 fa79 	bl	8008928 <_Bfree>
 8008436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800843a:	4615      	mov	r5, r2
 800843c:	1b1a      	subs	r2, r3, r4
 800843e:	d004      	beq.n	800844a <_dtoa_r+0x6c2>
 8008440:	4629      	mov	r1, r5
 8008442:	4630      	mov	r0, r6
 8008444:	f000 fbe8 	bl	8008c18 <__pow5mult>
 8008448:	4605      	mov	r5, r0
 800844a:	2101      	movs	r1, #1
 800844c:	4630      	mov	r0, r6
 800844e:	f000 fb23 	bl	8008a98 <__i2b>
 8008452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	4604      	mov	r4, r0
 8008458:	f340 8081 	ble.w	800855e <_dtoa_r+0x7d6>
 800845c:	461a      	mov	r2, r3
 800845e:	4601      	mov	r1, r0
 8008460:	4630      	mov	r0, r6
 8008462:	f000 fbd9 	bl	8008c18 <__pow5mult>
 8008466:	9b06      	ldr	r3, [sp, #24]
 8008468:	2b01      	cmp	r3, #1
 800846a:	4604      	mov	r4, r0
 800846c:	dd7a      	ble.n	8008564 <_dtoa_r+0x7dc>
 800846e:	2300      	movs	r3, #0
 8008470:	930a      	str	r3, [sp, #40]	; 0x28
 8008472:	6922      	ldr	r2, [r4, #16]
 8008474:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008478:	6910      	ldr	r0, [r2, #16]
 800847a:	f000 fabd 	bl	80089f8 <__hi0bits>
 800847e:	f1c0 0020 	rsb	r0, r0, #32
 8008482:	9b05      	ldr	r3, [sp, #20]
 8008484:	4418      	add	r0, r3
 8008486:	f010 001f 	ands.w	r0, r0, #31
 800848a:	f000 808c 	beq.w	80085a6 <_dtoa_r+0x81e>
 800848e:	f1c0 0220 	rsb	r2, r0, #32
 8008492:	2a04      	cmp	r2, #4
 8008494:	f340 8085 	ble.w	80085a2 <_dtoa_r+0x81a>
 8008498:	f1c0 001c 	rsb	r0, r0, #28
 800849c:	9b04      	ldr	r3, [sp, #16]
 800849e:	4403      	add	r3, r0
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	9b05      	ldr	r3, [sp, #20]
 80084a4:	4403      	add	r3, r0
 80084a6:	4480      	add	r8, r0
 80084a8:	9305      	str	r3, [sp, #20]
 80084aa:	9b04      	ldr	r3, [sp, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	dd05      	ble.n	80084bc <_dtoa_r+0x734>
 80084b0:	4629      	mov	r1, r5
 80084b2:	461a      	mov	r2, r3
 80084b4:	4630      	mov	r0, r6
 80084b6:	f000 fc09 	bl	8008ccc <__lshift>
 80084ba:	4605      	mov	r5, r0
 80084bc:	9b05      	ldr	r3, [sp, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	dd05      	ble.n	80084ce <_dtoa_r+0x746>
 80084c2:	4621      	mov	r1, r4
 80084c4:	461a      	mov	r2, r3
 80084c6:	4630      	mov	r0, r6
 80084c8:	f000 fc00 	bl	8008ccc <__lshift>
 80084cc:	4604      	mov	r4, r0
 80084ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d06a      	beq.n	80085aa <_dtoa_r+0x822>
 80084d4:	4621      	mov	r1, r4
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 fc68 	bl	8008dac <__mcmp>
 80084dc:	2800      	cmp	r0, #0
 80084de:	da64      	bge.n	80085aa <_dtoa_r+0x822>
 80084e0:	2300      	movs	r3, #0
 80084e2:	4629      	mov	r1, r5
 80084e4:	220a      	movs	r2, #10
 80084e6:	4630      	mov	r0, r6
 80084e8:	f000 fa40 	bl	800896c <__multadd>
 80084ec:	9b07      	ldr	r3, [sp, #28]
 80084ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084f2:	4605      	mov	r5, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 8191 	beq.w	800881c <_dtoa_r+0xa94>
 80084fa:	4639      	mov	r1, r7
 80084fc:	2300      	movs	r3, #0
 80084fe:	220a      	movs	r2, #10
 8008500:	4630      	mov	r0, r6
 8008502:	f000 fa33 	bl	800896c <__multadd>
 8008506:	f1ba 0f00 	cmp.w	sl, #0
 800850a:	4607      	mov	r7, r0
 800850c:	f300 808d 	bgt.w	800862a <_dtoa_r+0x8a2>
 8008510:	9b06      	ldr	r3, [sp, #24]
 8008512:	2b02      	cmp	r3, #2
 8008514:	dc50      	bgt.n	80085b8 <_dtoa_r+0x830>
 8008516:	e088      	b.n	800862a <_dtoa_r+0x8a2>
 8008518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800851a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800851e:	e751      	b.n	80083c4 <_dtoa_r+0x63c>
 8008520:	f109 34ff 	add.w	r4, r9, #4294967295
 8008524:	42a3      	cmp	r3, r4
 8008526:	bfbf      	itttt	lt
 8008528:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800852a:	1ae3      	sublt	r3, r4, r3
 800852c:	18d2      	addlt	r2, r2, r3
 800852e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008530:	bfb6      	itet	lt
 8008532:	4623      	movlt	r3, r4
 8008534:	1b1c      	subge	r4, r3, r4
 8008536:	2400      	movlt	r4, #0
 8008538:	f1b9 0f00 	cmp.w	r9, #0
 800853c:	bfb5      	itete	lt
 800853e:	9a04      	ldrlt	r2, [sp, #16]
 8008540:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008544:	eba2 0809 	sublt.w	r8, r2, r9
 8008548:	464a      	movge	r2, r9
 800854a:	bfb8      	it	lt
 800854c:	2200      	movlt	r2, #0
 800854e:	e73c      	b.n	80083ca <_dtoa_r+0x642>
 8008550:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008554:	9f07      	ldr	r7, [sp, #28]
 8008556:	461c      	mov	r4, r3
 8008558:	e744      	b.n	80083e4 <_dtoa_r+0x65c>
 800855a:	461a      	mov	r2, r3
 800855c:	e770      	b.n	8008440 <_dtoa_r+0x6b8>
 800855e:	9b06      	ldr	r3, [sp, #24]
 8008560:	2b01      	cmp	r3, #1
 8008562:	dc18      	bgt.n	8008596 <_dtoa_r+0x80e>
 8008564:	9b02      	ldr	r3, [sp, #8]
 8008566:	b9b3      	cbnz	r3, 8008596 <_dtoa_r+0x80e>
 8008568:	9b03      	ldr	r3, [sp, #12]
 800856a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800856e:	b9a2      	cbnz	r2, 800859a <_dtoa_r+0x812>
 8008570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008574:	0d12      	lsrs	r2, r2, #20
 8008576:	0512      	lsls	r2, r2, #20
 8008578:	b18a      	cbz	r2, 800859e <_dtoa_r+0x816>
 800857a:	9b04      	ldr	r3, [sp, #16]
 800857c:	3301      	adds	r3, #1
 800857e:	9304      	str	r3, [sp, #16]
 8008580:	9b05      	ldr	r3, [sp, #20]
 8008582:	3301      	adds	r3, #1
 8008584:	9305      	str	r3, [sp, #20]
 8008586:	2301      	movs	r3, #1
 8008588:	930a      	str	r3, [sp, #40]	; 0x28
 800858a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	f47f af70 	bne.w	8008472 <_dtoa_r+0x6ea>
 8008592:	2001      	movs	r0, #1
 8008594:	e775      	b.n	8008482 <_dtoa_r+0x6fa>
 8008596:	2300      	movs	r3, #0
 8008598:	e7f6      	b.n	8008588 <_dtoa_r+0x800>
 800859a:	9b02      	ldr	r3, [sp, #8]
 800859c:	e7f4      	b.n	8008588 <_dtoa_r+0x800>
 800859e:	920a      	str	r2, [sp, #40]	; 0x28
 80085a0:	e7f3      	b.n	800858a <_dtoa_r+0x802>
 80085a2:	d082      	beq.n	80084aa <_dtoa_r+0x722>
 80085a4:	4610      	mov	r0, r2
 80085a6:	301c      	adds	r0, #28
 80085a8:	e778      	b.n	800849c <_dtoa_r+0x714>
 80085aa:	f1b9 0f00 	cmp.w	r9, #0
 80085ae:	dc37      	bgt.n	8008620 <_dtoa_r+0x898>
 80085b0:	9b06      	ldr	r3, [sp, #24]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	dd34      	ble.n	8008620 <_dtoa_r+0x898>
 80085b6:	46ca      	mov	sl, r9
 80085b8:	f1ba 0f00 	cmp.w	sl, #0
 80085bc:	d10d      	bne.n	80085da <_dtoa_r+0x852>
 80085be:	4621      	mov	r1, r4
 80085c0:	4653      	mov	r3, sl
 80085c2:	2205      	movs	r2, #5
 80085c4:	4630      	mov	r0, r6
 80085c6:	f000 f9d1 	bl	800896c <__multadd>
 80085ca:	4601      	mov	r1, r0
 80085cc:	4604      	mov	r4, r0
 80085ce:	4628      	mov	r0, r5
 80085d0:	f000 fbec 	bl	8008dac <__mcmp>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	f73f adeb 	bgt.w	80081b0 <_dtoa_r+0x428>
 80085da:	9b08      	ldr	r3, [sp, #32]
 80085dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80085e0:	ea6f 0b03 	mvn.w	fp, r3
 80085e4:	f04f 0900 	mov.w	r9, #0
 80085e8:	4621      	mov	r1, r4
 80085ea:	4630      	mov	r0, r6
 80085ec:	f000 f99c 	bl	8008928 <_Bfree>
 80085f0:	2f00      	cmp	r7, #0
 80085f2:	f43f aea8 	beq.w	8008346 <_dtoa_r+0x5be>
 80085f6:	f1b9 0f00 	cmp.w	r9, #0
 80085fa:	d005      	beq.n	8008608 <_dtoa_r+0x880>
 80085fc:	45b9      	cmp	r9, r7
 80085fe:	d003      	beq.n	8008608 <_dtoa_r+0x880>
 8008600:	4649      	mov	r1, r9
 8008602:	4630      	mov	r0, r6
 8008604:	f000 f990 	bl	8008928 <_Bfree>
 8008608:	4639      	mov	r1, r7
 800860a:	4630      	mov	r0, r6
 800860c:	f000 f98c 	bl	8008928 <_Bfree>
 8008610:	e699      	b.n	8008346 <_dtoa_r+0x5be>
 8008612:	2400      	movs	r4, #0
 8008614:	4627      	mov	r7, r4
 8008616:	e7e0      	b.n	80085da <_dtoa_r+0x852>
 8008618:	46bb      	mov	fp, r7
 800861a:	4604      	mov	r4, r0
 800861c:	4607      	mov	r7, r0
 800861e:	e5c7      	b.n	80081b0 <_dtoa_r+0x428>
 8008620:	9b07      	ldr	r3, [sp, #28]
 8008622:	46ca      	mov	sl, r9
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 8100 	beq.w	800882a <_dtoa_r+0xaa2>
 800862a:	f1b8 0f00 	cmp.w	r8, #0
 800862e:	dd05      	ble.n	800863c <_dtoa_r+0x8b4>
 8008630:	4639      	mov	r1, r7
 8008632:	4642      	mov	r2, r8
 8008634:	4630      	mov	r0, r6
 8008636:	f000 fb49 	bl	8008ccc <__lshift>
 800863a:	4607      	mov	r7, r0
 800863c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800863e:	2b00      	cmp	r3, #0
 8008640:	d05d      	beq.n	80086fe <_dtoa_r+0x976>
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4630      	mov	r0, r6
 8008646:	f000 f92f 	bl	80088a8 <_Balloc>
 800864a:	4680      	mov	r8, r0
 800864c:	b928      	cbnz	r0, 800865a <_dtoa_r+0x8d2>
 800864e:	4b82      	ldr	r3, [pc, #520]	; (8008858 <_dtoa_r+0xad0>)
 8008650:	4602      	mov	r2, r0
 8008652:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008656:	f7ff bbaf 	b.w	8007db8 <_dtoa_r+0x30>
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	3202      	adds	r2, #2
 800865e:	0092      	lsls	r2, r2, #2
 8008660:	f107 010c 	add.w	r1, r7, #12
 8008664:	300c      	adds	r0, #12
 8008666:	f7fe fcef 	bl	8007048 <memcpy>
 800866a:	2201      	movs	r2, #1
 800866c:	4641      	mov	r1, r8
 800866e:	4630      	mov	r0, r6
 8008670:	f000 fb2c 	bl	8008ccc <__lshift>
 8008674:	9b01      	ldr	r3, [sp, #4]
 8008676:	3301      	adds	r3, #1
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	9b01      	ldr	r3, [sp, #4]
 800867c:	4453      	add	r3, sl
 800867e:	9308      	str	r3, [sp, #32]
 8008680:	9b02      	ldr	r3, [sp, #8]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	46b9      	mov	r9, r7
 8008688:	9307      	str	r3, [sp, #28]
 800868a:	4607      	mov	r7, r0
 800868c:	9b04      	ldr	r3, [sp, #16]
 800868e:	4621      	mov	r1, r4
 8008690:	3b01      	subs	r3, #1
 8008692:	4628      	mov	r0, r5
 8008694:	9302      	str	r3, [sp, #8]
 8008696:	f7ff fae9 	bl	8007c6c <quorem>
 800869a:	4603      	mov	r3, r0
 800869c:	3330      	adds	r3, #48	; 0x30
 800869e:	9005      	str	r0, [sp, #20]
 80086a0:	4649      	mov	r1, r9
 80086a2:	4628      	mov	r0, r5
 80086a4:	9309      	str	r3, [sp, #36]	; 0x24
 80086a6:	f000 fb81 	bl	8008dac <__mcmp>
 80086aa:	463a      	mov	r2, r7
 80086ac:	4682      	mov	sl, r0
 80086ae:	4621      	mov	r1, r4
 80086b0:	4630      	mov	r0, r6
 80086b2:	f000 fb97 	bl	8008de4 <__mdiff>
 80086b6:	68c2      	ldr	r2, [r0, #12]
 80086b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ba:	4680      	mov	r8, r0
 80086bc:	bb0a      	cbnz	r2, 8008702 <_dtoa_r+0x97a>
 80086be:	4601      	mov	r1, r0
 80086c0:	4628      	mov	r0, r5
 80086c2:	f000 fb73 	bl	8008dac <__mcmp>
 80086c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c8:	4602      	mov	r2, r0
 80086ca:	4641      	mov	r1, r8
 80086cc:	4630      	mov	r0, r6
 80086ce:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80086d2:	f000 f929 	bl	8008928 <_Bfree>
 80086d6:	9b06      	ldr	r3, [sp, #24]
 80086d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80086de:	ea43 0102 	orr.w	r1, r3, r2
 80086e2:	9b07      	ldr	r3, [sp, #28]
 80086e4:	430b      	orrs	r3, r1
 80086e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e8:	d10d      	bne.n	8008706 <_dtoa_r+0x97e>
 80086ea:	2b39      	cmp	r3, #57	; 0x39
 80086ec:	d029      	beq.n	8008742 <_dtoa_r+0x9ba>
 80086ee:	f1ba 0f00 	cmp.w	sl, #0
 80086f2:	dd01      	ble.n	80086f8 <_dtoa_r+0x970>
 80086f4:	9b05      	ldr	r3, [sp, #20]
 80086f6:	3331      	adds	r3, #49	; 0x31
 80086f8:	9a02      	ldr	r2, [sp, #8]
 80086fa:	7013      	strb	r3, [r2, #0]
 80086fc:	e774      	b.n	80085e8 <_dtoa_r+0x860>
 80086fe:	4638      	mov	r0, r7
 8008700:	e7b8      	b.n	8008674 <_dtoa_r+0x8ec>
 8008702:	2201      	movs	r2, #1
 8008704:	e7e1      	b.n	80086ca <_dtoa_r+0x942>
 8008706:	f1ba 0f00 	cmp.w	sl, #0
 800870a:	db06      	blt.n	800871a <_dtoa_r+0x992>
 800870c:	9906      	ldr	r1, [sp, #24]
 800870e:	ea41 0a0a 	orr.w	sl, r1, sl
 8008712:	9907      	ldr	r1, [sp, #28]
 8008714:	ea5a 0101 	orrs.w	r1, sl, r1
 8008718:	d120      	bne.n	800875c <_dtoa_r+0x9d4>
 800871a:	2a00      	cmp	r2, #0
 800871c:	ddec      	ble.n	80086f8 <_dtoa_r+0x970>
 800871e:	4629      	mov	r1, r5
 8008720:	2201      	movs	r2, #1
 8008722:	4630      	mov	r0, r6
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	f000 fad1 	bl	8008ccc <__lshift>
 800872a:	4621      	mov	r1, r4
 800872c:	4605      	mov	r5, r0
 800872e:	f000 fb3d 	bl	8008dac <__mcmp>
 8008732:	2800      	cmp	r0, #0
 8008734:	9b04      	ldr	r3, [sp, #16]
 8008736:	dc02      	bgt.n	800873e <_dtoa_r+0x9b6>
 8008738:	d1de      	bne.n	80086f8 <_dtoa_r+0x970>
 800873a:	07da      	lsls	r2, r3, #31
 800873c:	d5dc      	bpl.n	80086f8 <_dtoa_r+0x970>
 800873e:	2b39      	cmp	r3, #57	; 0x39
 8008740:	d1d8      	bne.n	80086f4 <_dtoa_r+0x96c>
 8008742:	9a02      	ldr	r2, [sp, #8]
 8008744:	2339      	movs	r3, #57	; 0x39
 8008746:	7013      	strb	r3, [r2, #0]
 8008748:	4643      	mov	r3, r8
 800874a:	4698      	mov	r8, r3
 800874c:	3b01      	subs	r3, #1
 800874e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008752:	2a39      	cmp	r2, #57	; 0x39
 8008754:	d051      	beq.n	80087fa <_dtoa_r+0xa72>
 8008756:	3201      	adds	r2, #1
 8008758:	701a      	strb	r2, [r3, #0]
 800875a:	e745      	b.n	80085e8 <_dtoa_r+0x860>
 800875c:	2a00      	cmp	r2, #0
 800875e:	dd03      	ble.n	8008768 <_dtoa_r+0x9e0>
 8008760:	2b39      	cmp	r3, #57	; 0x39
 8008762:	d0ee      	beq.n	8008742 <_dtoa_r+0x9ba>
 8008764:	3301      	adds	r3, #1
 8008766:	e7c7      	b.n	80086f8 <_dtoa_r+0x970>
 8008768:	9a04      	ldr	r2, [sp, #16]
 800876a:	9908      	ldr	r1, [sp, #32]
 800876c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008770:	428a      	cmp	r2, r1
 8008772:	d02b      	beq.n	80087cc <_dtoa_r+0xa44>
 8008774:	4629      	mov	r1, r5
 8008776:	2300      	movs	r3, #0
 8008778:	220a      	movs	r2, #10
 800877a:	4630      	mov	r0, r6
 800877c:	f000 f8f6 	bl	800896c <__multadd>
 8008780:	45b9      	cmp	r9, r7
 8008782:	4605      	mov	r5, r0
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	f04f 020a 	mov.w	r2, #10
 800878c:	4649      	mov	r1, r9
 800878e:	4630      	mov	r0, r6
 8008790:	d107      	bne.n	80087a2 <_dtoa_r+0xa1a>
 8008792:	f000 f8eb 	bl	800896c <__multadd>
 8008796:	4681      	mov	r9, r0
 8008798:	4607      	mov	r7, r0
 800879a:	9b04      	ldr	r3, [sp, #16]
 800879c:	3301      	adds	r3, #1
 800879e:	9304      	str	r3, [sp, #16]
 80087a0:	e774      	b.n	800868c <_dtoa_r+0x904>
 80087a2:	f000 f8e3 	bl	800896c <__multadd>
 80087a6:	4639      	mov	r1, r7
 80087a8:	4681      	mov	r9, r0
 80087aa:	2300      	movs	r3, #0
 80087ac:	220a      	movs	r2, #10
 80087ae:	4630      	mov	r0, r6
 80087b0:	f000 f8dc 	bl	800896c <__multadd>
 80087b4:	4607      	mov	r7, r0
 80087b6:	e7f0      	b.n	800879a <_dtoa_r+0xa12>
 80087b8:	f1ba 0f00 	cmp.w	sl, #0
 80087bc:	9a01      	ldr	r2, [sp, #4]
 80087be:	bfcc      	ite	gt
 80087c0:	46d0      	movgt	r8, sl
 80087c2:	f04f 0801 	movle.w	r8, #1
 80087c6:	4490      	add	r8, r2
 80087c8:	f04f 0900 	mov.w	r9, #0
 80087cc:	4629      	mov	r1, r5
 80087ce:	2201      	movs	r2, #1
 80087d0:	4630      	mov	r0, r6
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	f000 fa7a 	bl	8008ccc <__lshift>
 80087d8:	4621      	mov	r1, r4
 80087da:	4605      	mov	r5, r0
 80087dc:	f000 fae6 	bl	8008dac <__mcmp>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	dcb1      	bgt.n	8008748 <_dtoa_r+0x9c0>
 80087e4:	d102      	bne.n	80087ec <_dtoa_r+0xa64>
 80087e6:	9b02      	ldr	r3, [sp, #8]
 80087e8:	07db      	lsls	r3, r3, #31
 80087ea:	d4ad      	bmi.n	8008748 <_dtoa_r+0x9c0>
 80087ec:	4643      	mov	r3, r8
 80087ee:	4698      	mov	r8, r3
 80087f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087f4:	2a30      	cmp	r2, #48	; 0x30
 80087f6:	d0fa      	beq.n	80087ee <_dtoa_r+0xa66>
 80087f8:	e6f6      	b.n	80085e8 <_dtoa_r+0x860>
 80087fa:	9a01      	ldr	r2, [sp, #4]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d1a4      	bne.n	800874a <_dtoa_r+0x9c2>
 8008800:	f10b 0b01 	add.w	fp, fp, #1
 8008804:	2331      	movs	r3, #49	; 0x31
 8008806:	e778      	b.n	80086fa <_dtoa_r+0x972>
 8008808:	4b14      	ldr	r3, [pc, #80]	; (800885c <_dtoa_r+0xad4>)
 800880a:	f7ff bb27 	b.w	8007e5c <_dtoa_r+0xd4>
 800880e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008810:	2b00      	cmp	r3, #0
 8008812:	f47f ab03 	bne.w	8007e1c <_dtoa_r+0x94>
 8008816:	4b12      	ldr	r3, [pc, #72]	; (8008860 <_dtoa_r+0xad8>)
 8008818:	f7ff bb20 	b.w	8007e5c <_dtoa_r+0xd4>
 800881c:	f1ba 0f00 	cmp.w	sl, #0
 8008820:	dc03      	bgt.n	800882a <_dtoa_r+0xaa2>
 8008822:	9b06      	ldr	r3, [sp, #24]
 8008824:	2b02      	cmp	r3, #2
 8008826:	f73f aec7 	bgt.w	80085b8 <_dtoa_r+0x830>
 800882a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	f7ff fa1b 	bl	8007c6c <quorem>
 8008836:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800883a:	f808 3b01 	strb.w	r3, [r8], #1
 800883e:	9a01      	ldr	r2, [sp, #4]
 8008840:	eba8 0202 	sub.w	r2, r8, r2
 8008844:	4592      	cmp	sl, r2
 8008846:	ddb7      	ble.n	80087b8 <_dtoa_r+0xa30>
 8008848:	4629      	mov	r1, r5
 800884a:	2300      	movs	r3, #0
 800884c:	220a      	movs	r2, #10
 800884e:	4630      	mov	r0, r6
 8008850:	f000 f88c 	bl	800896c <__multadd>
 8008854:	4605      	mov	r5, r0
 8008856:	e7ea      	b.n	800882e <_dtoa_r+0xaa6>
 8008858:	0800a7b3 	.word	0x0800a7b3
 800885c:	0800a710 	.word	0x0800a710
 8008860:	0800a734 	.word	0x0800a734

08008864 <_localeconv_r>:
 8008864:	4800      	ldr	r0, [pc, #0]	; (8008868 <_localeconv_r+0x4>)
 8008866:	4770      	bx	lr
 8008868:	2000054c 	.word	0x2000054c

0800886c <_lseek_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4d07      	ldr	r5, [pc, #28]	; (800888c <_lseek_r+0x20>)
 8008870:	4604      	mov	r4, r0
 8008872:	4608      	mov	r0, r1
 8008874:	4611      	mov	r1, r2
 8008876:	2200      	movs	r2, #0
 8008878:	602a      	str	r2, [r5, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	f001 fa74 	bl	8009d68 <_lseek>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_lseek_r+0x1e>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_lseek_r+0x1e>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	2000105c 	.word	0x2000105c

08008890 <__malloc_lock>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__malloc_lock+0x8>)
 8008892:	f000 bf11 	b.w	80096b8 <__retarget_lock_acquire_recursive>
 8008896:	bf00      	nop
 8008898:	20001060 	.word	0x20001060

0800889c <__malloc_unlock>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__malloc_unlock+0x8>)
 800889e:	f000 bf0c 	b.w	80096ba <__retarget_lock_release_recursive>
 80088a2:	bf00      	nop
 80088a4:	20001060 	.word	0x20001060

080088a8 <_Balloc>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088ac:	4604      	mov	r4, r0
 80088ae:	460d      	mov	r5, r1
 80088b0:	b976      	cbnz	r6, 80088d0 <_Balloc+0x28>
 80088b2:	2010      	movs	r0, #16
 80088b4:	f7fe fbb8 	bl	8007028 <malloc>
 80088b8:	4602      	mov	r2, r0
 80088ba:	6260      	str	r0, [r4, #36]	; 0x24
 80088bc:	b920      	cbnz	r0, 80088c8 <_Balloc+0x20>
 80088be:	4b18      	ldr	r3, [pc, #96]	; (8008920 <_Balloc+0x78>)
 80088c0:	4818      	ldr	r0, [pc, #96]	; (8008924 <_Balloc+0x7c>)
 80088c2:	2166      	movs	r1, #102	; 0x66
 80088c4:	f000 fd10 	bl	80092e8 <__assert_func>
 80088c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088cc:	6006      	str	r6, [r0, #0]
 80088ce:	60c6      	str	r6, [r0, #12]
 80088d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088d2:	68f3      	ldr	r3, [r6, #12]
 80088d4:	b183      	cbz	r3, 80088f8 <_Balloc+0x50>
 80088d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088de:	b9b8      	cbnz	r0, 8008910 <_Balloc+0x68>
 80088e0:	2101      	movs	r1, #1
 80088e2:	fa01 f605 	lsl.w	r6, r1, r5
 80088e6:	1d72      	adds	r2, r6, #5
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	4620      	mov	r0, r4
 80088ec:	f7fe fbc2 	bl	8007074 <_calloc_r>
 80088f0:	b160      	cbz	r0, 800890c <_Balloc+0x64>
 80088f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088f6:	e00e      	b.n	8008916 <_Balloc+0x6e>
 80088f8:	2221      	movs	r2, #33	; 0x21
 80088fa:	2104      	movs	r1, #4
 80088fc:	4620      	mov	r0, r4
 80088fe:	f7fe fbb9 	bl	8007074 <_calloc_r>
 8008902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008904:	60f0      	str	r0, [r6, #12]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e4      	bne.n	80088d6 <_Balloc+0x2e>
 800890c:	2000      	movs	r0, #0
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	6802      	ldr	r2, [r0, #0]
 8008912:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008916:	2300      	movs	r3, #0
 8008918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800891c:	e7f7      	b.n	800890e <_Balloc+0x66>
 800891e:	bf00      	nop
 8008920:	0800a741 	.word	0x0800a741
 8008924:	0800a7c4 	.word	0x0800a7c4

08008928 <_Bfree>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800892c:	4605      	mov	r5, r0
 800892e:	460c      	mov	r4, r1
 8008930:	b976      	cbnz	r6, 8008950 <_Bfree+0x28>
 8008932:	2010      	movs	r0, #16
 8008934:	f7fe fb78 	bl	8007028 <malloc>
 8008938:	4602      	mov	r2, r0
 800893a:	6268      	str	r0, [r5, #36]	; 0x24
 800893c:	b920      	cbnz	r0, 8008948 <_Bfree+0x20>
 800893e:	4b09      	ldr	r3, [pc, #36]	; (8008964 <_Bfree+0x3c>)
 8008940:	4809      	ldr	r0, [pc, #36]	; (8008968 <_Bfree+0x40>)
 8008942:	218a      	movs	r1, #138	; 0x8a
 8008944:	f000 fcd0 	bl	80092e8 <__assert_func>
 8008948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800894c:	6006      	str	r6, [r0, #0]
 800894e:	60c6      	str	r6, [r0, #12]
 8008950:	b13c      	cbz	r4, 8008962 <_Bfree+0x3a>
 8008952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008954:	6862      	ldr	r2, [r4, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800895c:	6021      	str	r1, [r4, #0]
 800895e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	0800a741 	.word	0x0800a741
 8008968:	0800a7c4 	.word	0x0800a7c4

0800896c <__multadd>:
 800896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008970:	690d      	ldr	r5, [r1, #16]
 8008972:	4607      	mov	r7, r0
 8008974:	460c      	mov	r4, r1
 8008976:	461e      	mov	r6, r3
 8008978:	f101 0c14 	add.w	ip, r1, #20
 800897c:	2000      	movs	r0, #0
 800897e:	f8dc 3000 	ldr.w	r3, [ip]
 8008982:	b299      	uxth	r1, r3
 8008984:	fb02 6101 	mla	r1, r2, r1, r6
 8008988:	0c1e      	lsrs	r6, r3, #16
 800898a:	0c0b      	lsrs	r3, r1, #16
 800898c:	fb02 3306 	mla	r3, r2, r6, r3
 8008990:	b289      	uxth	r1, r1
 8008992:	3001      	adds	r0, #1
 8008994:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008998:	4285      	cmp	r5, r0
 800899a:	f84c 1b04 	str.w	r1, [ip], #4
 800899e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089a2:	dcec      	bgt.n	800897e <__multadd+0x12>
 80089a4:	b30e      	cbz	r6, 80089ea <__multadd+0x7e>
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dc19      	bgt.n	80089e0 <__multadd+0x74>
 80089ac:	6861      	ldr	r1, [r4, #4]
 80089ae:	4638      	mov	r0, r7
 80089b0:	3101      	adds	r1, #1
 80089b2:	f7ff ff79 	bl	80088a8 <_Balloc>
 80089b6:	4680      	mov	r8, r0
 80089b8:	b928      	cbnz	r0, 80089c6 <__multadd+0x5a>
 80089ba:	4602      	mov	r2, r0
 80089bc:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <__multadd+0x84>)
 80089be:	480d      	ldr	r0, [pc, #52]	; (80089f4 <__multadd+0x88>)
 80089c0:	21b5      	movs	r1, #181	; 0xb5
 80089c2:	f000 fc91 	bl	80092e8 <__assert_func>
 80089c6:	6922      	ldr	r2, [r4, #16]
 80089c8:	3202      	adds	r2, #2
 80089ca:	f104 010c 	add.w	r1, r4, #12
 80089ce:	0092      	lsls	r2, r2, #2
 80089d0:	300c      	adds	r0, #12
 80089d2:	f7fe fb39 	bl	8007048 <memcpy>
 80089d6:	4621      	mov	r1, r4
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff ffa5 	bl	8008928 <_Bfree>
 80089de:	4644      	mov	r4, r8
 80089e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089e4:	3501      	adds	r5, #1
 80089e6:	615e      	str	r6, [r3, #20]
 80089e8:	6125      	str	r5, [r4, #16]
 80089ea:	4620      	mov	r0, r4
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	0800a7b3 	.word	0x0800a7b3
 80089f4:	0800a7c4 	.word	0x0800a7c4

080089f8 <__hi0bits>:
 80089f8:	0c03      	lsrs	r3, r0, #16
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	b9d3      	cbnz	r3, 8008a34 <__hi0bits+0x3c>
 80089fe:	0400      	lsls	r0, r0, #16
 8008a00:	2310      	movs	r3, #16
 8008a02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a06:	bf04      	itt	eq
 8008a08:	0200      	lsleq	r0, r0, #8
 8008a0a:	3308      	addeq	r3, #8
 8008a0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a10:	bf04      	itt	eq
 8008a12:	0100      	lsleq	r0, r0, #4
 8008a14:	3304      	addeq	r3, #4
 8008a16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a1a:	bf04      	itt	eq
 8008a1c:	0080      	lsleq	r0, r0, #2
 8008a1e:	3302      	addeq	r3, #2
 8008a20:	2800      	cmp	r0, #0
 8008a22:	db05      	blt.n	8008a30 <__hi0bits+0x38>
 8008a24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a28:	f103 0301 	add.w	r3, r3, #1
 8008a2c:	bf08      	it	eq
 8008a2e:	2320      	moveq	r3, #32
 8008a30:	4618      	mov	r0, r3
 8008a32:	4770      	bx	lr
 8008a34:	2300      	movs	r3, #0
 8008a36:	e7e4      	b.n	8008a02 <__hi0bits+0xa>

08008a38 <__lo0bits>:
 8008a38:	6803      	ldr	r3, [r0, #0]
 8008a3a:	f013 0207 	ands.w	r2, r3, #7
 8008a3e:	4601      	mov	r1, r0
 8008a40:	d00b      	beq.n	8008a5a <__lo0bits+0x22>
 8008a42:	07da      	lsls	r2, r3, #31
 8008a44:	d423      	bmi.n	8008a8e <__lo0bits+0x56>
 8008a46:	0798      	lsls	r0, r3, #30
 8008a48:	bf49      	itett	mi
 8008a4a:	085b      	lsrmi	r3, r3, #1
 8008a4c:	089b      	lsrpl	r3, r3, #2
 8008a4e:	2001      	movmi	r0, #1
 8008a50:	600b      	strmi	r3, [r1, #0]
 8008a52:	bf5c      	itt	pl
 8008a54:	600b      	strpl	r3, [r1, #0]
 8008a56:	2002      	movpl	r0, #2
 8008a58:	4770      	bx	lr
 8008a5a:	b298      	uxth	r0, r3
 8008a5c:	b9a8      	cbnz	r0, 8008a8a <__lo0bits+0x52>
 8008a5e:	0c1b      	lsrs	r3, r3, #16
 8008a60:	2010      	movs	r0, #16
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	b90a      	cbnz	r2, 8008a6a <__lo0bits+0x32>
 8008a66:	3008      	adds	r0, #8
 8008a68:	0a1b      	lsrs	r3, r3, #8
 8008a6a:	071a      	lsls	r2, r3, #28
 8008a6c:	bf04      	itt	eq
 8008a6e:	091b      	lsreq	r3, r3, #4
 8008a70:	3004      	addeq	r0, #4
 8008a72:	079a      	lsls	r2, r3, #30
 8008a74:	bf04      	itt	eq
 8008a76:	089b      	lsreq	r3, r3, #2
 8008a78:	3002      	addeq	r0, #2
 8008a7a:	07da      	lsls	r2, r3, #31
 8008a7c:	d403      	bmi.n	8008a86 <__lo0bits+0x4e>
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	f100 0001 	add.w	r0, r0, #1
 8008a84:	d005      	beq.n	8008a92 <__lo0bits+0x5a>
 8008a86:	600b      	str	r3, [r1, #0]
 8008a88:	4770      	bx	lr
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	e7e9      	b.n	8008a62 <__lo0bits+0x2a>
 8008a8e:	2000      	movs	r0, #0
 8008a90:	4770      	bx	lr
 8008a92:	2020      	movs	r0, #32
 8008a94:	4770      	bx	lr
	...

08008a98 <__i2b>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	f7ff ff03 	bl	80088a8 <_Balloc>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	b928      	cbnz	r0, 8008ab2 <__i2b+0x1a>
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <__i2b+0x24>)
 8008aa8:	4805      	ldr	r0, [pc, #20]	; (8008ac0 <__i2b+0x28>)
 8008aaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008aae:	f000 fc1b 	bl	80092e8 <__assert_func>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	6144      	str	r4, [r0, #20]
 8008ab6:	6103      	str	r3, [r0, #16]
 8008ab8:	bd10      	pop	{r4, pc}
 8008aba:	bf00      	nop
 8008abc:	0800a7b3 	.word	0x0800a7b3
 8008ac0:	0800a7c4 	.word	0x0800a7c4

08008ac4 <__multiply>:
 8008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	4691      	mov	r9, r2
 8008aca:	690a      	ldr	r2, [r1, #16]
 8008acc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	bfb8      	it	lt
 8008ad4:	460b      	movlt	r3, r1
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	bfbc      	itt	lt
 8008ada:	464c      	movlt	r4, r9
 8008adc:	4699      	movlt	r9, r3
 8008ade:	6927      	ldr	r7, [r4, #16]
 8008ae0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ae4:	68a3      	ldr	r3, [r4, #8]
 8008ae6:	6861      	ldr	r1, [r4, #4]
 8008ae8:	eb07 060a 	add.w	r6, r7, sl
 8008aec:	42b3      	cmp	r3, r6
 8008aee:	b085      	sub	sp, #20
 8008af0:	bfb8      	it	lt
 8008af2:	3101      	addlt	r1, #1
 8008af4:	f7ff fed8 	bl	80088a8 <_Balloc>
 8008af8:	b930      	cbnz	r0, 8008b08 <__multiply+0x44>
 8008afa:	4602      	mov	r2, r0
 8008afc:	4b44      	ldr	r3, [pc, #272]	; (8008c10 <__multiply+0x14c>)
 8008afe:	4845      	ldr	r0, [pc, #276]	; (8008c14 <__multiply+0x150>)
 8008b00:	f240 115d 	movw	r1, #349	; 0x15d
 8008b04:	f000 fbf0 	bl	80092e8 <__assert_func>
 8008b08:	f100 0514 	add.w	r5, r0, #20
 8008b0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b10:	462b      	mov	r3, r5
 8008b12:	2200      	movs	r2, #0
 8008b14:	4543      	cmp	r3, r8
 8008b16:	d321      	bcc.n	8008b5c <__multiply+0x98>
 8008b18:	f104 0314 	add.w	r3, r4, #20
 8008b1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b20:	f109 0314 	add.w	r3, r9, #20
 8008b24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b28:	9202      	str	r2, [sp, #8]
 8008b2a:	1b3a      	subs	r2, r7, r4
 8008b2c:	3a15      	subs	r2, #21
 8008b2e:	f022 0203 	bic.w	r2, r2, #3
 8008b32:	3204      	adds	r2, #4
 8008b34:	f104 0115 	add.w	r1, r4, #21
 8008b38:	428f      	cmp	r7, r1
 8008b3a:	bf38      	it	cc
 8008b3c:	2204      	movcc	r2, #4
 8008b3e:	9201      	str	r2, [sp, #4]
 8008b40:	9a02      	ldr	r2, [sp, #8]
 8008b42:	9303      	str	r3, [sp, #12]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d80c      	bhi.n	8008b62 <__multiply+0x9e>
 8008b48:	2e00      	cmp	r6, #0
 8008b4a:	dd03      	ble.n	8008b54 <__multiply+0x90>
 8008b4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d05a      	beq.n	8008c0a <__multiply+0x146>
 8008b54:	6106      	str	r6, [r0, #16]
 8008b56:	b005      	add	sp, #20
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5c:	f843 2b04 	str.w	r2, [r3], #4
 8008b60:	e7d8      	b.n	8008b14 <__multiply+0x50>
 8008b62:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b66:	f1ba 0f00 	cmp.w	sl, #0
 8008b6a:	d024      	beq.n	8008bb6 <__multiply+0xf2>
 8008b6c:	f104 0e14 	add.w	lr, r4, #20
 8008b70:	46a9      	mov	r9, r5
 8008b72:	f04f 0c00 	mov.w	ip, #0
 8008b76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b7a:	f8d9 1000 	ldr.w	r1, [r9]
 8008b7e:	fa1f fb82 	uxth.w	fp, r2
 8008b82:	b289      	uxth	r1, r1
 8008b84:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b90:	4461      	add	r1, ip
 8008b92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b96:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b9e:	b289      	uxth	r1, r1
 8008ba0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ba4:	4577      	cmp	r7, lr
 8008ba6:	f849 1b04 	str.w	r1, [r9], #4
 8008baa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bae:	d8e2      	bhi.n	8008b76 <__multiply+0xb2>
 8008bb0:	9a01      	ldr	r2, [sp, #4]
 8008bb2:	f845 c002 	str.w	ip, [r5, r2]
 8008bb6:	9a03      	ldr	r2, [sp, #12]
 8008bb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	f1b9 0f00 	cmp.w	r9, #0
 8008bc2:	d020      	beq.n	8008c06 <__multiply+0x142>
 8008bc4:	6829      	ldr	r1, [r5, #0]
 8008bc6:	f104 0c14 	add.w	ip, r4, #20
 8008bca:	46ae      	mov	lr, r5
 8008bcc:	f04f 0a00 	mov.w	sl, #0
 8008bd0:	f8bc b000 	ldrh.w	fp, [ip]
 8008bd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bd8:	fb09 220b 	mla	r2, r9, fp, r2
 8008bdc:	4492      	add	sl, r2
 8008bde:	b289      	uxth	r1, r1
 8008be0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008be4:	f84e 1b04 	str.w	r1, [lr], #4
 8008be8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008bec:	f8be 1000 	ldrh.w	r1, [lr]
 8008bf0:	0c12      	lsrs	r2, r2, #16
 8008bf2:	fb09 1102 	mla	r1, r9, r2, r1
 8008bf6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008bfa:	4567      	cmp	r7, ip
 8008bfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c00:	d8e6      	bhi.n	8008bd0 <__multiply+0x10c>
 8008c02:	9a01      	ldr	r2, [sp, #4]
 8008c04:	50a9      	str	r1, [r5, r2]
 8008c06:	3504      	adds	r5, #4
 8008c08:	e79a      	b.n	8008b40 <__multiply+0x7c>
 8008c0a:	3e01      	subs	r6, #1
 8008c0c:	e79c      	b.n	8008b48 <__multiply+0x84>
 8008c0e:	bf00      	nop
 8008c10:	0800a7b3 	.word	0x0800a7b3
 8008c14:	0800a7c4 	.word	0x0800a7c4

08008c18 <__pow5mult>:
 8008c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c1c:	4615      	mov	r5, r2
 8008c1e:	f012 0203 	ands.w	r2, r2, #3
 8008c22:	4606      	mov	r6, r0
 8008c24:	460f      	mov	r7, r1
 8008c26:	d007      	beq.n	8008c38 <__pow5mult+0x20>
 8008c28:	4c25      	ldr	r4, [pc, #148]	; (8008cc0 <__pow5mult+0xa8>)
 8008c2a:	3a01      	subs	r2, #1
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c32:	f7ff fe9b 	bl	800896c <__multadd>
 8008c36:	4607      	mov	r7, r0
 8008c38:	10ad      	asrs	r5, r5, #2
 8008c3a:	d03d      	beq.n	8008cb8 <__pow5mult+0xa0>
 8008c3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c3e:	b97c      	cbnz	r4, 8008c60 <__pow5mult+0x48>
 8008c40:	2010      	movs	r0, #16
 8008c42:	f7fe f9f1 	bl	8007028 <malloc>
 8008c46:	4602      	mov	r2, r0
 8008c48:	6270      	str	r0, [r6, #36]	; 0x24
 8008c4a:	b928      	cbnz	r0, 8008c58 <__pow5mult+0x40>
 8008c4c:	4b1d      	ldr	r3, [pc, #116]	; (8008cc4 <__pow5mult+0xac>)
 8008c4e:	481e      	ldr	r0, [pc, #120]	; (8008cc8 <__pow5mult+0xb0>)
 8008c50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c54:	f000 fb48 	bl	80092e8 <__assert_func>
 8008c58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c5c:	6004      	str	r4, [r0, #0]
 8008c5e:	60c4      	str	r4, [r0, #12]
 8008c60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c68:	b94c      	cbnz	r4, 8008c7e <__pow5mult+0x66>
 8008c6a:	f240 2171 	movw	r1, #625	; 0x271
 8008c6e:	4630      	mov	r0, r6
 8008c70:	f7ff ff12 	bl	8008a98 <__i2b>
 8008c74:	2300      	movs	r3, #0
 8008c76:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	6003      	str	r3, [r0, #0]
 8008c7e:	f04f 0900 	mov.w	r9, #0
 8008c82:	07eb      	lsls	r3, r5, #31
 8008c84:	d50a      	bpl.n	8008c9c <__pow5mult+0x84>
 8008c86:	4639      	mov	r1, r7
 8008c88:	4622      	mov	r2, r4
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7ff ff1a 	bl	8008ac4 <__multiply>
 8008c90:	4639      	mov	r1, r7
 8008c92:	4680      	mov	r8, r0
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7ff fe47 	bl	8008928 <_Bfree>
 8008c9a:	4647      	mov	r7, r8
 8008c9c:	106d      	asrs	r5, r5, #1
 8008c9e:	d00b      	beq.n	8008cb8 <__pow5mult+0xa0>
 8008ca0:	6820      	ldr	r0, [r4, #0]
 8008ca2:	b938      	cbnz	r0, 8008cb4 <__pow5mult+0x9c>
 8008ca4:	4622      	mov	r2, r4
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f7ff ff0b 	bl	8008ac4 <__multiply>
 8008cae:	6020      	str	r0, [r4, #0]
 8008cb0:	f8c0 9000 	str.w	r9, [r0]
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	e7e4      	b.n	8008c82 <__pow5mult+0x6a>
 8008cb8:	4638      	mov	r0, r7
 8008cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cbe:	bf00      	nop
 8008cc0:	0800a910 	.word	0x0800a910
 8008cc4:	0800a741 	.word	0x0800a741
 8008cc8:	0800a7c4 	.word	0x0800a7c4

08008ccc <__lshift>:
 8008ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	6849      	ldr	r1, [r1, #4]
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cda:	68a3      	ldr	r3, [r4, #8]
 8008cdc:	4607      	mov	r7, r0
 8008cde:	4691      	mov	r9, r2
 8008ce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ce4:	f108 0601 	add.w	r6, r8, #1
 8008ce8:	42b3      	cmp	r3, r6
 8008cea:	db0b      	blt.n	8008d04 <__lshift+0x38>
 8008cec:	4638      	mov	r0, r7
 8008cee:	f7ff fddb 	bl	80088a8 <_Balloc>
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	b948      	cbnz	r0, 8008d0a <__lshift+0x3e>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	4b2a      	ldr	r3, [pc, #168]	; (8008da4 <__lshift+0xd8>)
 8008cfa:	482b      	ldr	r0, [pc, #172]	; (8008da8 <__lshift+0xdc>)
 8008cfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d00:	f000 faf2 	bl	80092e8 <__assert_func>
 8008d04:	3101      	adds	r1, #1
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	e7ee      	b.n	8008ce8 <__lshift+0x1c>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f100 0114 	add.w	r1, r0, #20
 8008d10:	f100 0210 	add.w	r2, r0, #16
 8008d14:	4618      	mov	r0, r3
 8008d16:	4553      	cmp	r3, sl
 8008d18:	db37      	blt.n	8008d8a <__lshift+0xbe>
 8008d1a:	6920      	ldr	r0, [r4, #16]
 8008d1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d20:	f104 0314 	add.w	r3, r4, #20
 8008d24:	f019 091f 	ands.w	r9, r9, #31
 8008d28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008d30:	d02f      	beq.n	8008d92 <__lshift+0xc6>
 8008d32:	f1c9 0e20 	rsb	lr, r9, #32
 8008d36:	468a      	mov	sl, r1
 8008d38:	f04f 0c00 	mov.w	ip, #0
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	fa02 f209 	lsl.w	r2, r2, r9
 8008d42:	ea42 020c 	orr.w	r2, r2, ip
 8008d46:	f84a 2b04 	str.w	r2, [sl], #4
 8008d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d4e:	4298      	cmp	r0, r3
 8008d50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008d54:	d8f2      	bhi.n	8008d3c <__lshift+0x70>
 8008d56:	1b03      	subs	r3, r0, r4
 8008d58:	3b15      	subs	r3, #21
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	3304      	adds	r3, #4
 8008d60:	f104 0215 	add.w	r2, r4, #21
 8008d64:	4290      	cmp	r0, r2
 8008d66:	bf38      	it	cc
 8008d68:	2304      	movcc	r3, #4
 8008d6a:	f841 c003 	str.w	ip, [r1, r3]
 8008d6e:	f1bc 0f00 	cmp.w	ip, #0
 8008d72:	d001      	beq.n	8008d78 <__lshift+0xac>
 8008d74:	f108 0602 	add.w	r6, r8, #2
 8008d78:	3e01      	subs	r6, #1
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	612e      	str	r6, [r5, #16]
 8008d7e:	4621      	mov	r1, r4
 8008d80:	f7ff fdd2 	bl	8008928 <_Bfree>
 8008d84:	4628      	mov	r0, r5
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d8e:	3301      	adds	r3, #1
 8008d90:	e7c1      	b.n	8008d16 <__lshift+0x4a>
 8008d92:	3904      	subs	r1, #4
 8008d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d98:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d9c:	4298      	cmp	r0, r3
 8008d9e:	d8f9      	bhi.n	8008d94 <__lshift+0xc8>
 8008da0:	e7ea      	b.n	8008d78 <__lshift+0xac>
 8008da2:	bf00      	nop
 8008da4:	0800a7b3 	.word	0x0800a7b3
 8008da8:	0800a7c4 	.word	0x0800a7c4

08008dac <__mcmp>:
 8008dac:	b530      	push	{r4, r5, lr}
 8008dae:	6902      	ldr	r2, [r0, #16]
 8008db0:	690c      	ldr	r4, [r1, #16]
 8008db2:	1b12      	subs	r2, r2, r4
 8008db4:	d10e      	bne.n	8008dd4 <__mcmp+0x28>
 8008db6:	f100 0314 	add.w	r3, r0, #20
 8008dba:	3114      	adds	r1, #20
 8008dbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008dc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008dc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008dc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008dcc:	42a5      	cmp	r5, r4
 8008dce:	d003      	beq.n	8008dd8 <__mcmp+0x2c>
 8008dd0:	d305      	bcc.n	8008dde <__mcmp+0x32>
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	bd30      	pop	{r4, r5, pc}
 8008dd8:	4283      	cmp	r3, r0
 8008dda:	d3f3      	bcc.n	8008dc4 <__mcmp+0x18>
 8008ddc:	e7fa      	b.n	8008dd4 <__mcmp+0x28>
 8008dde:	f04f 32ff 	mov.w	r2, #4294967295
 8008de2:	e7f7      	b.n	8008dd4 <__mcmp+0x28>

08008de4 <__mdiff>:
 8008de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	460c      	mov	r4, r1
 8008dea:	4606      	mov	r6, r0
 8008dec:	4611      	mov	r1, r2
 8008dee:	4620      	mov	r0, r4
 8008df0:	4690      	mov	r8, r2
 8008df2:	f7ff ffdb 	bl	8008dac <__mcmp>
 8008df6:	1e05      	subs	r5, r0, #0
 8008df8:	d110      	bne.n	8008e1c <__mdiff+0x38>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff fd53 	bl	80088a8 <_Balloc>
 8008e02:	b930      	cbnz	r0, 8008e12 <__mdiff+0x2e>
 8008e04:	4b3a      	ldr	r3, [pc, #232]	; (8008ef0 <__mdiff+0x10c>)
 8008e06:	4602      	mov	r2, r0
 8008e08:	f240 2132 	movw	r1, #562	; 0x232
 8008e0c:	4839      	ldr	r0, [pc, #228]	; (8008ef4 <__mdiff+0x110>)
 8008e0e:	f000 fa6b 	bl	80092e8 <__assert_func>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1c:	bfa4      	itt	ge
 8008e1e:	4643      	movge	r3, r8
 8008e20:	46a0      	movge	r8, r4
 8008e22:	4630      	mov	r0, r6
 8008e24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e28:	bfa6      	itte	ge
 8008e2a:	461c      	movge	r4, r3
 8008e2c:	2500      	movge	r5, #0
 8008e2e:	2501      	movlt	r5, #1
 8008e30:	f7ff fd3a 	bl	80088a8 <_Balloc>
 8008e34:	b920      	cbnz	r0, 8008e40 <__mdiff+0x5c>
 8008e36:	4b2e      	ldr	r3, [pc, #184]	; (8008ef0 <__mdiff+0x10c>)
 8008e38:	4602      	mov	r2, r0
 8008e3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e3e:	e7e5      	b.n	8008e0c <__mdiff+0x28>
 8008e40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e44:	6926      	ldr	r6, [r4, #16]
 8008e46:	60c5      	str	r5, [r0, #12]
 8008e48:	f104 0914 	add.w	r9, r4, #20
 8008e4c:	f108 0514 	add.w	r5, r8, #20
 8008e50:	f100 0e14 	add.w	lr, r0, #20
 8008e54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e5c:	f108 0210 	add.w	r2, r8, #16
 8008e60:	46f2      	mov	sl, lr
 8008e62:	2100      	movs	r1, #0
 8008e64:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e6c:	fa1f f883 	uxth.w	r8, r3
 8008e70:	fa11 f18b 	uxtah	r1, r1, fp
 8008e74:	0c1b      	lsrs	r3, r3, #16
 8008e76:	eba1 0808 	sub.w	r8, r1, r8
 8008e7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e82:	fa1f f888 	uxth.w	r8, r8
 8008e86:	1419      	asrs	r1, r3, #16
 8008e88:	454e      	cmp	r6, r9
 8008e8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e8e:	f84a 3b04 	str.w	r3, [sl], #4
 8008e92:	d8e7      	bhi.n	8008e64 <__mdiff+0x80>
 8008e94:	1b33      	subs	r3, r6, r4
 8008e96:	3b15      	subs	r3, #21
 8008e98:	f023 0303 	bic.w	r3, r3, #3
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	3415      	adds	r4, #21
 8008ea0:	42a6      	cmp	r6, r4
 8008ea2:	bf38      	it	cc
 8008ea4:	2304      	movcc	r3, #4
 8008ea6:	441d      	add	r5, r3
 8008ea8:	4473      	add	r3, lr
 8008eaa:	469e      	mov	lr, r3
 8008eac:	462e      	mov	r6, r5
 8008eae:	4566      	cmp	r6, ip
 8008eb0:	d30e      	bcc.n	8008ed0 <__mdiff+0xec>
 8008eb2:	f10c 0203 	add.w	r2, ip, #3
 8008eb6:	1b52      	subs	r2, r2, r5
 8008eb8:	f022 0203 	bic.w	r2, r2, #3
 8008ebc:	3d03      	subs	r5, #3
 8008ebe:	45ac      	cmp	ip, r5
 8008ec0:	bf38      	it	cc
 8008ec2:	2200      	movcc	r2, #0
 8008ec4:	441a      	add	r2, r3
 8008ec6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008eca:	b17b      	cbz	r3, 8008eec <__mdiff+0x108>
 8008ecc:	6107      	str	r7, [r0, #16]
 8008ece:	e7a3      	b.n	8008e18 <__mdiff+0x34>
 8008ed0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ed4:	fa11 f288 	uxtah	r2, r1, r8
 8008ed8:	1414      	asrs	r4, r2, #16
 8008eda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ede:	b292      	uxth	r2, r2
 8008ee0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ee4:	f84e 2b04 	str.w	r2, [lr], #4
 8008ee8:	1421      	asrs	r1, r4, #16
 8008eea:	e7e0      	b.n	8008eae <__mdiff+0xca>
 8008eec:	3f01      	subs	r7, #1
 8008eee:	e7ea      	b.n	8008ec6 <__mdiff+0xe2>
 8008ef0:	0800a7b3 	.word	0x0800a7b3
 8008ef4:	0800a7c4 	.word	0x0800a7c4

08008ef8 <__d2b>:
 8008ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008efc:	4689      	mov	r9, r1
 8008efe:	2101      	movs	r1, #1
 8008f00:	ec57 6b10 	vmov	r6, r7, d0
 8008f04:	4690      	mov	r8, r2
 8008f06:	f7ff fccf 	bl	80088a8 <_Balloc>
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	b930      	cbnz	r0, 8008f1c <__d2b+0x24>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	4b25      	ldr	r3, [pc, #148]	; (8008fa8 <__d2b+0xb0>)
 8008f12:	4826      	ldr	r0, [pc, #152]	; (8008fac <__d2b+0xb4>)
 8008f14:	f240 310a 	movw	r1, #778	; 0x30a
 8008f18:	f000 f9e6 	bl	80092e8 <__assert_func>
 8008f1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f24:	bb35      	cbnz	r5, 8008f74 <__d2b+0x7c>
 8008f26:	2e00      	cmp	r6, #0
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	d028      	beq.n	8008f7e <__d2b+0x86>
 8008f2c:	4668      	mov	r0, sp
 8008f2e:	9600      	str	r6, [sp, #0]
 8008f30:	f7ff fd82 	bl	8008a38 <__lo0bits>
 8008f34:	9900      	ldr	r1, [sp, #0]
 8008f36:	b300      	cbz	r0, 8008f7a <__d2b+0x82>
 8008f38:	9a01      	ldr	r2, [sp, #4]
 8008f3a:	f1c0 0320 	rsb	r3, r0, #32
 8008f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f42:	430b      	orrs	r3, r1
 8008f44:	40c2      	lsrs	r2, r0
 8008f46:	6163      	str	r3, [r4, #20]
 8008f48:	9201      	str	r2, [sp, #4]
 8008f4a:	9b01      	ldr	r3, [sp, #4]
 8008f4c:	61a3      	str	r3, [r4, #24]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	bf14      	ite	ne
 8008f52:	2202      	movne	r2, #2
 8008f54:	2201      	moveq	r2, #1
 8008f56:	6122      	str	r2, [r4, #16]
 8008f58:	b1d5      	cbz	r5, 8008f90 <__d2b+0x98>
 8008f5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f5e:	4405      	add	r5, r0
 8008f60:	f8c9 5000 	str.w	r5, [r9]
 8008f64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f68:	f8c8 0000 	str.w	r0, [r8]
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	b003      	add	sp, #12
 8008f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f78:	e7d5      	b.n	8008f26 <__d2b+0x2e>
 8008f7a:	6161      	str	r1, [r4, #20]
 8008f7c:	e7e5      	b.n	8008f4a <__d2b+0x52>
 8008f7e:	a801      	add	r0, sp, #4
 8008f80:	f7ff fd5a 	bl	8008a38 <__lo0bits>
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	6163      	str	r3, [r4, #20]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	6122      	str	r2, [r4, #16]
 8008f8c:	3020      	adds	r0, #32
 8008f8e:	e7e3      	b.n	8008f58 <__d2b+0x60>
 8008f90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f98:	f8c9 0000 	str.w	r0, [r9]
 8008f9c:	6918      	ldr	r0, [r3, #16]
 8008f9e:	f7ff fd2b 	bl	80089f8 <__hi0bits>
 8008fa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fa6:	e7df      	b.n	8008f68 <__d2b+0x70>
 8008fa8:	0800a7b3 	.word	0x0800a7b3
 8008fac:	0800a7c4 	.word	0x0800a7c4

08008fb0 <_realloc_r>:
 8008fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	4614      	mov	r4, r2
 8008fb8:	460e      	mov	r6, r1
 8008fba:	b921      	cbnz	r1, 8008fc6 <_realloc_r+0x16>
 8008fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	f7fe b8d9 	b.w	8007178 <_malloc_r>
 8008fc6:	b92a      	cbnz	r2, 8008fd4 <_realloc_r+0x24>
 8008fc8:	f7fe f86a 	bl	80070a0 <_free_r>
 8008fcc:	4625      	mov	r5, r4
 8008fce:	4628      	mov	r0, r5
 8008fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd4:	f000 fb9e 	bl	8009714 <_malloc_usable_size_r>
 8008fd8:	4284      	cmp	r4, r0
 8008fda:	4607      	mov	r7, r0
 8008fdc:	d802      	bhi.n	8008fe4 <_realloc_r+0x34>
 8008fde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fe2:	d812      	bhi.n	800900a <_realloc_r+0x5a>
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	f7fe f8c6 	bl	8007178 <_malloc_r>
 8008fec:	4605      	mov	r5, r0
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d0ed      	beq.n	8008fce <_realloc_r+0x1e>
 8008ff2:	42bc      	cmp	r4, r7
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	bf28      	it	cs
 8008ffa:	463a      	movcs	r2, r7
 8008ffc:	f7fe f824 	bl	8007048 <memcpy>
 8009000:	4631      	mov	r1, r6
 8009002:	4640      	mov	r0, r8
 8009004:	f7fe f84c 	bl	80070a0 <_free_r>
 8009008:	e7e1      	b.n	8008fce <_realloc_r+0x1e>
 800900a:	4635      	mov	r5, r6
 800900c:	e7df      	b.n	8008fce <_realloc_r+0x1e>

0800900e <__ssputs_r>:
 800900e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009012:	688e      	ldr	r6, [r1, #8]
 8009014:	429e      	cmp	r6, r3
 8009016:	4682      	mov	sl, r0
 8009018:	460c      	mov	r4, r1
 800901a:	4690      	mov	r8, r2
 800901c:	461f      	mov	r7, r3
 800901e:	d838      	bhi.n	8009092 <__ssputs_r+0x84>
 8009020:	898a      	ldrh	r2, [r1, #12]
 8009022:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009026:	d032      	beq.n	800908e <__ssputs_r+0x80>
 8009028:	6825      	ldr	r5, [r4, #0]
 800902a:	6909      	ldr	r1, [r1, #16]
 800902c:	eba5 0901 	sub.w	r9, r5, r1
 8009030:	6965      	ldr	r5, [r4, #20]
 8009032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009036:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800903a:	3301      	adds	r3, #1
 800903c:	444b      	add	r3, r9
 800903e:	106d      	asrs	r5, r5, #1
 8009040:	429d      	cmp	r5, r3
 8009042:	bf38      	it	cc
 8009044:	461d      	movcc	r5, r3
 8009046:	0553      	lsls	r3, r2, #21
 8009048:	d531      	bpl.n	80090ae <__ssputs_r+0xa0>
 800904a:	4629      	mov	r1, r5
 800904c:	f7fe f894 	bl	8007178 <_malloc_r>
 8009050:	4606      	mov	r6, r0
 8009052:	b950      	cbnz	r0, 800906a <__ssputs_r+0x5c>
 8009054:	230c      	movs	r3, #12
 8009056:	f8ca 3000 	str.w	r3, [sl]
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	f04f 30ff 	mov.w	r0, #4294967295
 8009066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906a:	6921      	ldr	r1, [r4, #16]
 800906c:	464a      	mov	r2, r9
 800906e:	f7fd ffeb 	bl	8007048 <memcpy>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	6126      	str	r6, [r4, #16]
 8009080:	6165      	str	r5, [r4, #20]
 8009082:	444e      	add	r6, r9
 8009084:	eba5 0509 	sub.w	r5, r5, r9
 8009088:	6026      	str	r6, [r4, #0]
 800908a:	60a5      	str	r5, [r4, #8]
 800908c:	463e      	mov	r6, r7
 800908e:	42be      	cmp	r6, r7
 8009090:	d900      	bls.n	8009094 <__ssputs_r+0x86>
 8009092:	463e      	mov	r6, r7
 8009094:	6820      	ldr	r0, [r4, #0]
 8009096:	4632      	mov	r2, r6
 8009098:	4641      	mov	r1, r8
 800909a:	f000 fb21 	bl	80096e0 <memmove>
 800909e:	68a3      	ldr	r3, [r4, #8]
 80090a0:	1b9b      	subs	r3, r3, r6
 80090a2:	60a3      	str	r3, [r4, #8]
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	4433      	add	r3, r6
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	2000      	movs	r0, #0
 80090ac:	e7db      	b.n	8009066 <__ssputs_r+0x58>
 80090ae:	462a      	mov	r2, r5
 80090b0:	f7ff ff7e 	bl	8008fb0 <_realloc_r>
 80090b4:	4606      	mov	r6, r0
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d1e1      	bne.n	800907e <__ssputs_r+0x70>
 80090ba:	6921      	ldr	r1, [r4, #16]
 80090bc:	4650      	mov	r0, sl
 80090be:	f7fd ffef 	bl	80070a0 <_free_r>
 80090c2:	e7c7      	b.n	8009054 <__ssputs_r+0x46>

080090c4 <_svfiprintf_r>:
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	4698      	mov	r8, r3
 80090ca:	898b      	ldrh	r3, [r1, #12]
 80090cc:	061b      	lsls	r3, r3, #24
 80090ce:	b09d      	sub	sp, #116	; 0x74
 80090d0:	4607      	mov	r7, r0
 80090d2:	460d      	mov	r5, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	d50e      	bpl.n	80090f6 <_svfiprintf_r+0x32>
 80090d8:	690b      	ldr	r3, [r1, #16]
 80090da:	b963      	cbnz	r3, 80090f6 <_svfiprintf_r+0x32>
 80090dc:	2140      	movs	r1, #64	; 0x40
 80090de:	f7fe f84b 	bl	8007178 <_malloc_r>
 80090e2:	6028      	str	r0, [r5, #0]
 80090e4:	6128      	str	r0, [r5, #16]
 80090e6:	b920      	cbnz	r0, 80090f2 <_svfiprintf_r+0x2e>
 80090e8:	230c      	movs	r3, #12
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e0d1      	b.n	8009296 <_svfiprintf_r+0x1d2>
 80090f2:	2340      	movs	r3, #64	; 0x40
 80090f4:	616b      	str	r3, [r5, #20]
 80090f6:	2300      	movs	r3, #0
 80090f8:	9309      	str	r3, [sp, #36]	; 0x24
 80090fa:	2320      	movs	r3, #32
 80090fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009100:	f8cd 800c 	str.w	r8, [sp, #12]
 8009104:	2330      	movs	r3, #48	; 0x30
 8009106:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80092b0 <_svfiprintf_r+0x1ec>
 800910a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800910e:	f04f 0901 	mov.w	r9, #1
 8009112:	4623      	mov	r3, r4
 8009114:	469a      	mov	sl, r3
 8009116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800911a:	b10a      	cbz	r2, 8009120 <_svfiprintf_r+0x5c>
 800911c:	2a25      	cmp	r2, #37	; 0x25
 800911e:	d1f9      	bne.n	8009114 <_svfiprintf_r+0x50>
 8009120:	ebba 0b04 	subs.w	fp, sl, r4
 8009124:	d00b      	beq.n	800913e <_svfiprintf_r+0x7a>
 8009126:	465b      	mov	r3, fp
 8009128:	4622      	mov	r2, r4
 800912a:	4629      	mov	r1, r5
 800912c:	4638      	mov	r0, r7
 800912e:	f7ff ff6e 	bl	800900e <__ssputs_r>
 8009132:	3001      	adds	r0, #1
 8009134:	f000 80aa 	beq.w	800928c <_svfiprintf_r+0x1c8>
 8009138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800913a:	445a      	add	r2, fp
 800913c:	9209      	str	r2, [sp, #36]	; 0x24
 800913e:	f89a 3000 	ldrb.w	r3, [sl]
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 80a2 	beq.w	800928c <_svfiprintf_r+0x1c8>
 8009148:	2300      	movs	r3, #0
 800914a:	f04f 32ff 	mov.w	r2, #4294967295
 800914e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009152:	f10a 0a01 	add.w	sl, sl, #1
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	9307      	str	r3, [sp, #28]
 800915a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800915e:	931a      	str	r3, [sp, #104]	; 0x68
 8009160:	4654      	mov	r4, sl
 8009162:	2205      	movs	r2, #5
 8009164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009168:	4851      	ldr	r0, [pc, #324]	; (80092b0 <_svfiprintf_r+0x1ec>)
 800916a:	f7f7 f871 	bl	8000250 <memchr>
 800916e:	9a04      	ldr	r2, [sp, #16]
 8009170:	b9d8      	cbnz	r0, 80091aa <_svfiprintf_r+0xe6>
 8009172:	06d0      	lsls	r0, r2, #27
 8009174:	bf44      	itt	mi
 8009176:	2320      	movmi	r3, #32
 8009178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800917c:	0711      	lsls	r1, r2, #28
 800917e:	bf44      	itt	mi
 8009180:	232b      	movmi	r3, #43	; 0x2b
 8009182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009186:	f89a 3000 	ldrb.w	r3, [sl]
 800918a:	2b2a      	cmp	r3, #42	; 0x2a
 800918c:	d015      	beq.n	80091ba <_svfiprintf_r+0xf6>
 800918e:	9a07      	ldr	r2, [sp, #28]
 8009190:	4654      	mov	r4, sl
 8009192:	2000      	movs	r0, #0
 8009194:	f04f 0c0a 	mov.w	ip, #10
 8009198:	4621      	mov	r1, r4
 800919a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800919e:	3b30      	subs	r3, #48	; 0x30
 80091a0:	2b09      	cmp	r3, #9
 80091a2:	d94e      	bls.n	8009242 <_svfiprintf_r+0x17e>
 80091a4:	b1b0      	cbz	r0, 80091d4 <_svfiprintf_r+0x110>
 80091a6:	9207      	str	r2, [sp, #28]
 80091a8:	e014      	b.n	80091d4 <_svfiprintf_r+0x110>
 80091aa:	eba0 0308 	sub.w	r3, r0, r8
 80091ae:	fa09 f303 	lsl.w	r3, r9, r3
 80091b2:	4313      	orrs	r3, r2
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	46a2      	mov	sl, r4
 80091b8:	e7d2      	b.n	8009160 <_svfiprintf_r+0x9c>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	1d19      	adds	r1, r3, #4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	9103      	str	r1, [sp, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfbb      	ittet	lt
 80091c6:	425b      	neglt	r3, r3
 80091c8:	f042 0202 	orrlt.w	r2, r2, #2
 80091cc:	9307      	strge	r3, [sp, #28]
 80091ce:	9307      	strlt	r3, [sp, #28]
 80091d0:	bfb8      	it	lt
 80091d2:	9204      	strlt	r2, [sp, #16]
 80091d4:	7823      	ldrb	r3, [r4, #0]
 80091d6:	2b2e      	cmp	r3, #46	; 0x2e
 80091d8:	d10c      	bne.n	80091f4 <_svfiprintf_r+0x130>
 80091da:	7863      	ldrb	r3, [r4, #1]
 80091dc:	2b2a      	cmp	r3, #42	; 0x2a
 80091de:	d135      	bne.n	800924c <_svfiprintf_r+0x188>
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	9203      	str	r2, [sp, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfb8      	it	lt
 80091ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80091f0:	3402      	adds	r4, #2
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092c0 <_svfiprintf_r+0x1fc>
 80091f8:	7821      	ldrb	r1, [r4, #0]
 80091fa:	2203      	movs	r2, #3
 80091fc:	4650      	mov	r0, sl
 80091fe:	f7f7 f827 	bl	8000250 <memchr>
 8009202:	b140      	cbz	r0, 8009216 <_svfiprintf_r+0x152>
 8009204:	2340      	movs	r3, #64	; 0x40
 8009206:	eba0 000a 	sub.w	r0, r0, sl
 800920a:	fa03 f000 	lsl.w	r0, r3, r0
 800920e:	9b04      	ldr	r3, [sp, #16]
 8009210:	4303      	orrs	r3, r0
 8009212:	3401      	adds	r4, #1
 8009214:	9304      	str	r3, [sp, #16]
 8009216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921a:	4826      	ldr	r0, [pc, #152]	; (80092b4 <_svfiprintf_r+0x1f0>)
 800921c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009220:	2206      	movs	r2, #6
 8009222:	f7f7 f815 	bl	8000250 <memchr>
 8009226:	2800      	cmp	r0, #0
 8009228:	d038      	beq.n	800929c <_svfiprintf_r+0x1d8>
 800922a:	4b23      	ldr	r3, [pc, #140]	; (80092b8 <_svfiprintf_r+0x1f4>)
 800922c:	bb1b      	cbnz	r3, 8009276 <_svfiprintf_r+0x1b2>
 800922e:	9b03      	ldr	r3, [sp, #12]
 8009230:	3307      	adds	r3, #7
 8009232:	f023 0307 	bic.w	r3, r3, #7
 8009236:	3308      	adds	r3, #8
 8009238:	9303      	str	r3, [sp, #12]
 800923a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923c:	4433      	add	r3, r6
 800923e:	9309      	str	r3, [sp, #36]	; 0x24
 8009240:	e767      	b.n	8009112 <_svfiprintf_r+0x4e>
 8009242:	fb0c 3202 	mla	r2, ip, r2, r3
 8009246:	460c      	mov	r4, r1
 8009248:	2001      	movs	r0, #1
 800924a:	e7a5      	b.n	8009198 <_svfiprintf_r+0xd4>
 800924c:	2300      	movs	r3, #0
 800924e:	3401      	adds	r4, #1
 8009250:	9305      	str	r3, [sp, #20]
 8009252:	4619      	mov	r1, r3
 8009254:	f04f 0c0a 	mov.w	ip, #10
 8009258:	4620      	mov	r0, r4
 800925a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800925e:	3a30      	subs	r2, #48	; 0x30
 8009260:	2a09      	cmp	r2, #9
 8009262:	d903      	bls.n	800926c <_svfiprintf_r+0x1a8>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0c5      	beq.n	80091f4 <_svfiprintf_r+0x130>
 8009268:	9105      	str	r1, [sp, #20]
 800926a:	e7c3      	b.n	80091f4 <_svfiprintf_r+0x130>
 800926c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009270:	4604      	mov	r4, r0
 8009272:	2301      	movs	r3, #1
 8009274:	e7f0      	b.n	8009258 <_svfiprintf_r+0x194>
 8009276:	ab03      	add	r3, sp, #12
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	462a      	mov	r2, r5
 800927c:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <_svfiprintf_r+0x1f8>)
 800927e:	a904      	add	r1, sp, #16
 8009280:	4638      	mov	r0, r7
 8009282:	f7fe f87d 	bl	8007380 <_printf_float>
 8009286:	1c42      	adds	r2, r0, #1
 8009288:	4606      	mov	r6, r0
 800928a:	d1d6      	bne.n	800923a <_svfiprintf_r+0x176>
 800928c:	89ab      	ldrh	r3, [r5, #12]
 800928e:	065b      	lsls	r3, r3, #25
 8009290:	f53f af2c 	bmi.w	80090ec <_svfiprintf_r+0x28>
 8009294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009296:	b01d      	add	sp, #116	; 0x74
 8009298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	ab03      	add	r3, sp, #12
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	462a      	mov	r2, r5
 80092a2:	4b06      	ldr	r3, [pc, #24]	; (80092bc <_svfiprintf_r+0x1f8>)
 80092a4:	a904      	add	r1, sp, #16
 80092a6:	4638      	mov	r0, r7
 80092a8:	f7fe faf6 	bl	8007898 <_printf_i>
 80092ac:	e7eb      	b.n	8009286 <_svfiprintf_r+0x1c2>
 80092ae:	bf00      	nop
 80092b0:	0800a91c 	.word	0x0800a91c
 80092b4:	0800a926 	.word	0x0800a926
 80092b8:	08007381 	.word	0x08007381
 80092bc:	0800900f 	.word	0x0800900f
 80092c0:	0800a922 	.word	0x0800a922

080092c4 <_read_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d07      	ldr	r5, [pc, #28]	; (80092e4 <_read_r+0x20>)
 80092c8:	4604      	mov	r4, r0
 80092ca:	4608      	mov	r0, r1
 80092cc:	4611      	mov	r1, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	602a      	str	r2, [r5, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f000 fd50 	bl	8009d78 <_read>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_read_r+0x1e>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_read_r+0x1e>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	2000105c 	.word	0x2000105c

080092e8 <__assert_func>:
 80092e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092ea:	4614      	mov	r4, r2
 80092ec:	461a      	mov	r2, r3
 80092ee:	4b09      	ldr	r3, [pc, #36]	; (8009314 <__assert_func+0x2c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4605      	mov	r5, r0
 80092f4:	68d8      	ldr	r0, [r3, #12]
 80092f6:	b14c      	cbz	r4, 800930c <__assert_func+0x24>
 80092f8:	4b07      	ldr	r3, [pc, #28]	; (8009318 <__assert_func+0x30>)
 80092fa:	9100      	str	r1, [sp, #0]
 80092fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009300:	4906      	ldr	r1, [pc, #24]	; (800931c <__assert_func+0x34>)
 8009302:	462b      	mov	r3, r5
 8009304:	f000 f9a6 	bl	8009654 <fiprintf>
 8009308:	f000 fc34 	bl	8009b74 <abort>
 800930c:	4b04      	ldr	r3, [pc, #16]	; (8009320 <__assert_func+0x38>)
 800930e:	461c      	mov	r4, r3
 8009310:	e7f3      	b.n	80092fa <__assert_func+0x12>
 8009312:	bf00      	nop
 8009314:	200003f8 	.word	0x200003f8
 8009318:	0800a92d 	.word	0x0800a92d
 800931c:	0800a93a 	.word	0x0800a93a
 8009320:	0800a968 	.word	0x0800a968

08009324 <__sflush_r>:
 8009324:	898a      	ldrh	r2, [r1, #12]
 8009326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932a:	4605      	mov	r5, r0
 800932c:	0710      	lsls	r0, r2, #28
 800932e:	460c      	mov	r4, r1
 8009330:	d458      	bmi.n	80093e4 <__sflush_r+0xc0>
 8009332:	684b      	ldr	r3, [r1, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	dc05      	bgt.n	8009344 <__sflush_r+0x20>
 8009338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800933a:	2b00      	cmp	r3, #0
 800933c:	dc02      	bgt.n	8009344 <__sflush_r+0x20>
 800933e:	2000      	movs	r0, #0
 8009340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009346:	2e00      	cmp	r6, #0
 8009348:	d0f9      	beq.n	800933e <__sflush_r+0x1a>
 800934a:	2300      	movs	r3, #0
 800934c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009350:	682f      	ldr	r7, [r5, #0]
 8009352:	602b      	str	r3, [r5, #0]
 8009354:	d032      	beq.n	80093bc <__sflush_r+0x98>
 8009356:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	075a      	lsls	r2, r3, #29
 800935c:	d505      	bpl.n	800936a <__sflush_r+0x46>
 800935e:	6863      	ldr	r3, [r4, #4]
 8009360:	1ac0      	subs	r0, r0, r3
 8009362:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009364:	b10b      	cbz	r3, 800936a <__sflush_r+0x46>
 8009366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009368:	1ac0      	subs	r0, r0, r3
 800936a:	2300      	movs	r3, #0
 800936c:	4602      	mov	r2, r0
 800936e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009370:	6a21      	ldr	r1, [r4, #32]
 8009372:	4628      	mov	r0, r5
 8009374:	47b0      	blx	r6
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	d106      	bne.n	800938a <__sflush_r+0x66>
 800937c:	6829      	ldr	r1, [r5, #0]
 800937e:	291d      	cmp	r1, #29
 8009380:	d82c      	bhi.n	80093dc <__sflush_r+0xb8>
 8009382:	4a2a      	ldr	r2, [pc, #168]	; (800942c <__sflush_r+0x108>)
 8009384:	40ca      	lsrs	r2, r1
 8009386:	07d6      	lsls	r6, r2, #31
 8009388:	d528      	bpl.n	80093dc <__sflush_r+0xb8>
 800938a:	2200      	movs	r2, #0
 800938c:	6062      	str	r2, [r4, #4]
 800938e:	04d9      	lsls	r1, r3, #19
 8009390:	6922      	ldr	r2, [r4, #16]
 8009392:	6022      	str	r2, [r4, #0]
 8009394:	d504      	bpl.n	80093a0 <__sflush_r+0x7c>
 8009396:	1c42      	adds	r2, r0, #1
 8009398:	d101      	bne.n	800939e <__sflush_r+0x7a>
 800939a:	682b      	ldr	r3, [r5, #0]
 800939c:	b903      	cbnz	r3, 80093a0 <__sflush_r+0x7c>
 800939e:	6560      	str	r0, [r4, #84]	; 0x54
 80093a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a2:	602f      	str	r7, [r5, #0]
 80093a4:	2900      	cmp	r1, #0
 80093a6:	d0ca      	beq.n	800933e <__sflush_r+0x1a>
 80093a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ac:	4299      	cmp	r1, r3
 80093ae:	d002      	beq.n	80093b6 <__sflush_r+0x92>
 80093b0:	4628      	mov	r0, r5
 80093b2:	f7fd fe75 	bl	80070a0 <_free_r>
 80093b6:	2000      	movs	r0, #0
 80093b8:	6360      	str	r0, [r4, #52]	; 0x34
 80093ba:	e7c1      	b.n	8009340 <__sflush_r+0x1c>
 80093bc:	6a21      	ldr	r1, [r4, #32]
 80093be:	2301      	movs	r3, #1
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b0      	blx	r6
 80093c4:	1c41      	adds	r1, r0, #1
 80093c6:	d1c7      	bne.n	8009358 <__sflush_r+0x34>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0c4      	beq.n	8009358 <__sflush_r+0x34>
 80093ce:	2b1d      	cmp	r3, #29
 80093d0:	d001      	beq.n	80093d6 <__sflush_r+0xb2>
 80093d2:	2b16      	cmp	r3, #22
 80093d4:	d101      	bne.n	80093da <__sflush_r+0xb6>
 80093d6:	602f      	str	r7, [r5, #0]
 80093d8:	e7b1      	b.n	800933e <__sflush_r+0x1a>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	e7ad      	b.n	8009340 <__sflush_r+0x1c>
 80093e4:	690f      	ldr	r7, [r1, #16]
 80093e6:	2f00      	cmp	r7, #0
 80093e8:	d0a9      	beq.n	800933e <__sflush_r+0x1a>
 80093ea:	0793      	lsls	r3, r2, #30
 80093ec:	680e      	ldr	r6, [r1, #0]
 80093ee:	bf08      	it	eq
 80093f0:	694b      	ldreq	r3, [r1, #20]
 80093f2:	600f      	str	r7, [r1, #0]
 80093f4:	bf18      	it	ne
 80093f6:	2300      	movne	r3, #0
 80093f8:	eba6 0807 	sub.w	r8, r6, r7
 80093fc:	608b      	str	r3, [r1, #8]
 80093fe:	f1b8 0f00 	cmp.w	r8, #0
 8009402:	dd9c      	ble.n	800933e <__sflush_r+0x1a>
 8009404:	6a21      	ldr	r1, [r4, #32]
 8009406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009408:	4643      	mov	r3, r8
 800940a:	463a      	mov	r2, r7
 800940c:	4628      	mov	r0, r5
 800940e:	47b0      	blx	r6
 8009410:	2800      	cmp	r0, #0
 8009412:	dc06      	bgt.n	8009422 <__sflush_r+0xfe>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800941a:	81a3      	strh	r3, [r4, #12]
 800941c:	f04f 30ff 	mov.w	r0, #4294967295
 8009420:	e78e      	b.n	8009340 <__sflush_r+0x1c>
 8009422:	4407      	add	r7, r0
 8009424:	eba8 0800 	sub.w	r8, r8, r0
 8009428:	e7e9      	b.n	80093fe <__sflush_r+0xda>
 800942a:	bf00      	nop
 800942c:	20400001 	.word	0x20400001

08009430 <_fflush_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	690b      	ldr	r3, [r1, #16]
 8009434:	4605      	mov	r5, r0
 8009436:	460c      	mov	r4, r1
 8009438:	b913      	cbnz	r3, 8009440 <_fflush_r+0x10>
 800943a:	2500      	movs	r5, #0
 800943c:	4628      	mov	r0, r5
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	b118      	cbz	r0, 800944a <_fflush_r+0x1a>
 8009442:	6983      	ldr	r3, [r0, #24]
 8009444:	b90b      	cbnz	r3, 800944a <_fflush_r+0x1a>
 8009446:	f000 f887 	bl	8009558 <__sinit>
 800944a:	4b14      	ldr	r3, [pc, #80]	; (800949c <_fflush_r+0x6c>)
 800944c:	429c      	cmp	r4, r3
 800944e:	d11b      	bne.n	8009488 <_fflush_r+0x58>
 8009450:	686c      	ldr	r4, [r5, #4]
 8009452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d0ef      	beq.n	800943a <_fflush_r+0xa>
 800945a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800945c:	07d0      	lsls	r0, r2, #31
 800945e:	d404      	bmi.n	800946a <_fflush_r+0x3a>
 8009460:	0599      	lsls	r1, r3, #22
 8009462:	d402      	bmi.n	800946a <_fflush_r+0x3a>
 8009464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009466:	f000 f927 	bl	80096b8 <__retarget_lock_acquire_recursive>
 800946a:	4628      	mov	r0, r5
 800946c:	4621      	mov	r1, r4
 800946e:	f7ff ff59 	bl	8009324 <__sflush_r>
 8009472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009474:	07da      	lsls	r2, r3, #31
 8009476:	4605      	mov	r5, r0
 8009478:	d4e0      	bmi.n	800943c <_fflush_r+0xc>
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	059b      	lsls	r3, r3, #22
 800947e:	d4dd      	bmi.n	800943c <_fflush_r+0xc>
 8009480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009482:	f000 f91a 	bl	80096ba <__retarget_lock_release_recursive>
 8009486:	e7d9      	b.n	800943c <_fflush_r+0xc>
 8009488:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <_fflush_r+0x70>)
 800948a:	429c      	cmp	r4, r3
 800948c:	d101      	bne.n	8009492 <_fflush_r+0x62>
 800948e:	68ac      	ldr	r4, [r5, #8]
 8009490:	e7df      	b.n	8009452 <_fflush_r+0x22>
 8009492:	4b04      	ldr	r3, [pc, #16]	; (80094a4 <_fflush_r+0x74>)
 8009494:	429c      	cmp	r4, r3
 8009496:	bf08      	it	eq
 8009498:	68ec      	ldreq	r4, [r5, #12]
 800949a:	e7da      	b.n	8009452 <_fflush_r+0x22>
 800949c:	0800aa8c 	.word	0x0800aa8c
 80094a0:	0800aaac 	.word	0x0800aaac
 80094a4:	0800aa6c 	.word	0x0800aa6c

080094a8 <std>:
 80094a8:	2300      	movs	r3, #0
 80094aa:	b510      	push	{r4, lr}
 80094ac:	4604      	mov	r4, r0
 80094ae:	e9c0 3300 	strd	r3, r3, [r0]
 80094b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094b6:	6083      	str	r3, [r0, #8]
 80094b8:	8181      	strh	r1, [r0, #12]
 80094ba:	6643      	str	r3, [r0, #100]	; 0x64
 80094bc:	81c2      	strh	r2, [r0, #14]
 80094be:	6183      	str	r3, [r0, #24]
 80094c0:	4619      	mov	r1, r3
 80094c2:	2208      	movs	r2, #8
 80094c4:	305c      	adds	r0, #92	; 0x5c
 80094c6:	f7fd fdcd 	bl	8007064 <memset>
 80094ca:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <std+0x38>)
 80094cc:	6263      	str	r3, [r4, #36]	; 0x24
 80094ce:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <std+0x3c>)
 80094d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80094d2:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <std+0x40>)
 80094d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094d6:	4b05      	ldr	r3, [pc, #20]	; (80094ec <std+0x44>)
 80094d8:	6224      	str	r4, [r4, #32]
 80094da:	6323      	str	r3, [r4, #48]	; 0x30
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	bf00      	nop
 80094e0:	08007b55 	.word	0x08007b55
 80094e4:	08007b77 	.word	0x08007b77
 80094e8:	08007baf 	.word	0x08007baf
 80094ec:	08007bd3 	.word	0x08007bd3

080094f0 <_cleanup_r>:
 80094f0:	4901      	ldr	r1, [pc, #4]	; (80094f8 <_cleanup_r+0x8>)
 80094f2:	f000 b8c1 	b.w	8009678 <_fwalk_reent>
 80094f6:	bf00      	nop
 80094f8:	08009431 	.word	0x08009431

080094fc <__sfmoreglue>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	2268      	movs	r2, #104	; 0x68
 8009500:	1e4d      	subs	r5, r1, #1
 8009502:	4355      	muls	r5, r2
 8009504:	460e      	mov	r6, r1
 8009506:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800950a:	f7fd fe35 	bl	8007178 <_malloc_r>
 800950e:	4604      	mov	r4, r0
 8009510:	b140      	cbz	r0, 8009524 <__sfmoreglue+0x28>
 8009512:	2100      	movs	r1, #0
 8009514:	e9c0 1600 	strd	r1, r6, [r0]
 8009518:	300c      	adds	r0, #12
 800951a:	60a0      	str	r0, [r4, #8]
 800951c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009520:	f7fd fda0 	bl	8007064 <memset>
 8009524:	4620      	mov	r0, r4
 8009526:	bd70      	pop	{r4, r5, r6, pc}

08009528 <__sfp_lock_acquire>:
 8009528:	4801      	ldr	r0, [pc, #4]	; (8009530 <__sfp_lock_acquire+0x8>)
 800952a:	f000 b8c5 	b.w	80096b8 <__retarget_lock_acquire_recursive>
 800952e:	bf00      	nop
 8009530:	20001061 	.word	0x20001061

08009534 <__sfp_lock_release>:
 8009534:	4801      	ldr	r0, [pc, #4]	; (800953c <__sfp_lock_release+0x8>)
 8009536:	f000 b8c0 	b.w	80096ba <__retarget_lock_release_recursive>
 800953a:	bf00      	nop
 800953c:	20001061 	.word	0x20001061

08009540 <__sinit_lock_acquire>:
 8009540:	4801      	ldr	r0, [pc, #4]	; (8009548 <__sinit_lock_acquire+0x8>)
 8009542:	f000 b8b9 	b.w	80096b8 <__retarget_lock_acquire_recursive>
 8009546:	bf00      	nop
 8009548:	20001062 	.word	0x20001062

0800954c <__sinit_lock_release>:
 800954c:	4801      	ldr	r0, [pc, #4]	; (8009554 <__sinit_lock_release+0x8>)
 800954e:	f000 b8b4 	b.w	80096ba <__retarget_lock_release_recursive>
 8009552:	bf00      	nop
 8009554:	20001062 	.word	0x20001062

08009558 <__sinit>:
 8009558:	b510      	push	{r4, lr}
 800955a:	4604      	mov	r4, r0
 800955c:	f7ff fff0 	bl	8009540 <__sinit_lock_acquire>
 8009560:	69a3      	ldr	r3, [r4, #24]
 8009562:	b11b      	cbz	r3, 800956c <__sinit+0x14>
 8009564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009568:	f7ff bff0 	b.w	800954c <__sinit_lock_release>
 800956c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009570:	6523      	str	r3, [r4, #80]	; 0x50
 8009572:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <__sinit+0x68>)
 8009574:	4a13      	ldr	r2, [pc, #76]	; (80095c4 <__sinit+0x6c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	62a2      	str	r2, [r4, #40]	; 0x28
 800957a:	42a3      	cmp	r3, r4
 800957c:	bf04      	itt	eq
 800957e:	2301      	moveq	r3, #1
 8009580:	61a3      	streq	r3, [r4, #24]
 8009582:	4620      	mov	r0, r4
 8009584:	f000 f820 	bl	80095c8 <__sfp>
 8009588:	6060      	str	r0, [r4, #4]
 800958a:	4620      	mov	r0, r4
 800958c:	f000 f81c 	bl	80095c8 <__sfp>
 8009590:	60a0      	str	r0, [r4, #8]
 8009592:	4620      	mov	r0, r4
 8009594:	f000 f818 	bl	80095c8 <__sfp>
 8009598:	2200      	movs	r2, #0
 800959a:	60e0      	str	r0, [r4, #12]
 800959c:	2104      	movs	r1, #4
 800959e:	6860      	ldr	r0, [r4, #4]
 80095a0:	f7ff ff82 	bl	80094a8 <std>
 80095a4:	68a0      	ldr	r0, [r4, #8]
 80095a6:	2201      	movs	r2, #1
 80095a8:	2109      	movs	r1, #9
 80095aa:	f7ff ff7d 	bl	80094a8 <std>
 80095ae:	68e0      	ldr	r0, [r4, #12]
 80095b0:	2202      	movs	r2, #2
 80095b2:	2112      	movs	r1, #18
 80095b4:	f7ff ff78 	bl	80094a8 <std>
 80095b8:	2301      	movs	r3, #1
 80095ba:	61a3      	str	r3, [r4, #24]
 80095bc:	e7d2      	b.n	8009564 <__sinit+0xc>
 80095be:	bf00      	nop
 80095c0:	0800a6fc 	.word	0x0800a6fc
 80095c4:	080094f1 	.word	0x080094f1

080095c8 <__sfp>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	4607      	mov	r7, r0
 80095cc:	f7ff ffac 	bl	8009528 <__sfp_lock_acquire>
 80095d0:	4b1e      	ldr	r3, [pc, #120]	; (800964c <__sfp+0x84>)
 80095d2:	681e      	ldr	r6, [r3, #0]
 80095d4:	69b3      	ldr	r3, [r6, #24]
 80095d6:	b913      	cbnz	r3, 80095de <__sfp+0x16>
 80095d8:	4630      	mov	r0, r6
 80095da:	f7ff ffbd 	bl	8009558 <__sinit>
 80095de:	3648      	adds	r6, #72	; 0x48
 80095e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	d503      	bpl.n	80095f0 <__sfp+0x28>
 80095e8:	6833      	ldr	r3, [r6, #0]
 80095ea:	b30b      	cbz	r3, 8009630 <__sfp+0x68>
 80095ec:	6836      	ldr	r6, [r6, #0]
 80095ee:	e7f7      	b.n	80095e0 <__sfp+0x18>
 80095f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095f4:	b9d5      	cbnz	r5, 800962c <__sfp+0x64>
 80095f6:	4b16      	ldr	r3, [pc, #88]	; (8009650 <__sfp+0x88>)
 80095f8:	60e3      	str	r3, [r4, #12]
 80095fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095fe:	6665      	str	r5, [r4, #100]	; 0x64
 8009600:	f000 f859 	bl	80096b6 <__retarget_lock_init_recursive>
 8009604:	f7ff ff96 	bl	8009534 <__sfp_lock_release>
 8009608:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800960c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009610:	6025      	str	r5, [r4, #0]
 8009612:	61a5      	str	r5, [r4, #24]
 8009614:	2208      	movs	r2, #8
 8009616:	4629      	mov	r1, r5
 8009618:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800961c:	f7fd fd22 	bl	8007064 <memset>
 8009620:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009624:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009628:	4620      	mov	r0, r4
 800962a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800962c:	3468      	adds	r4, #104	; 0x68
 800962e:	e7d9      	b.n	80095e4 <__sfp+0x1c>
 8009630:	2104      	movs	r1, #4
 8009632:	4638      	mov	r0, r7
 8009634:	f7ff ff62 	bl	80094fc <__sfmoreglue>
 8009638:	4604      	mov	r4, r0
 800963a:	6030      	str	r0, [r6, #0]
 800963c:	2800      	cmp	r0, #0
 800963e:	d1d5      	bne.n	80095ec <__sfp+0x24>
 8009640:	f7ff ff78 	bl	8009534 <__sfp_lock_release>
 8009644:	230c      	movs	r3, #12
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	e7ee      	b.n	8009628 <__sfp+0x60>
 800964a:	bf00      	nop
 800964c:	0800a6fc 	.word	0x0800a6fc
 8009650:	ffff0001 	.word	0xffff0001

08009654 <fiprintf>:
 8009654:	b40e      	push	{r1, r2, r3}
 8009656:	b503      	push	{r0, r1, lr}
 8009658:	4601      	mov	r1, r0
 800965a:	ab03      	add	r3, sp, #12
 800965c:	4805      	ldr	r0, [pc, #20]	; (8009674 <fiprintf+0x20>)
 800965e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009662:	6800      	ldr	r0, [r0, #0]
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	f000 f887 	bl	8009778 <_vfiprintf_r>
 800966a:	b002      	add	sp, #8
 800966c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009670:	b003      	add	sp, #12
 8009672:	4770      	bx	lr
 8009674:	200003f8 	.word	0x200003f8

08009678 <_fwalk_reent>:
 8009678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800967c:	4606      	mov	r6, r0
 800967e:	4688      	mov	r8, r1
 8009680:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009684:	2700      	movs	r7, #0
 8009686:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800968a:	f1b9 0901 	subs.w	r9, r9, #1
 800968e:	d505      	bpl.n	800969c <_fwalk_reent+0x24>
 8009690:	6824      	ldr	r4, [r4, #0]
 8009692:	2c00      	cmp	r4, #0
 8009694:	d1f7      	bne.n	8009686 <_fwalk_reent+0xe>
 8009696:	4638      	mov	r0, r7
 8009698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800969c:	89ab      	ldrh	r3, [r5, #12]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d907      	bls.n	80096b2 <_fwalk_reent+0x3a>
 80096a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096a6:	3301      	adds	r3, #1
 80096a8:	d003      	beq.n	80096b2 <_fwalk_reent+0x3a>
 80096aa:	4629      	mov	r1, r5
 80096ac:	4630      	mov	r0, r6
 80096ae:	47c0      	blx	r8
 80096b0:	4307      	orrs	r7, r0
 80096b2:	3568      	adds	r5, #104	; 0x68
 80096b4:	e7e9      	b.n	800968a <_fwalk_reent+0x12>

080096b6 <__retarget_lock_init_recursive>:
 80096b6:	4770      	bx	lr

080096b8 <__retarget_lock_acquire_recursive>:
 80096b8:	4770      	bx	lr

080096ba <__retarget_lock_release_recursive>:
 80096ba:	4770      	bx	lr

080096bc <__ascii_mbtowc>:
 80096bc:	b082      	sub	sp, #8
 80096be:	b901      	cbnz	r1, 80096c2 <__ascii_mbtowc+0x6>
 80096c0:	a901      	add	r1, sp, #4
 80096c2:	b142      	cbz	r2, 80096d6 <__ascii_mbtowc+0x1a>
 80096c4:	b14b      	cbz	r3, 80096da <__ascii_mbtowc+0x1e>
 80096c6:	7813      	ldrb	r3, [r2, #0]
 80096c8:	600b      	str	r3, [r1, #0]
 80096ca:	7812      	ldrb	r2, [r2, #0]
 80096cc:	1e10      	subs	r0, r2, #0
 80096ce:	bf18      	it	ne
 80096d0:	2001      	movne	r0, #1
 80096d2:	b002      	add	sp, #8
 80096d4:	4770      	bx	lr
 80096d6:	4610      	mov	r0, r2
 80096d8:	e7fb      	b.n	80096d2 <__ascii_mbtowc+0x16>
 80096da:	f06f 0001 	mvn.w	r0, #1
 80096de:	e7f8      	b.n	80096d2 <__ascii_mbtowc+0x16>

080096e0 <memmove>:
 80096e0:	4288      	cmp	r0, r1
 80096e2:	b510      	push	{r4, lr}
 80096e4:	eb01 0402 	add.w	r4, r1, r2
 80096e8:	d902      	bls.n	80096f0 <memmove+0x10>
 80096ea:	4284      	cmp	r4, r0
 80096ec:	4623      	mov	r3, r4
 80096ee:	d807      	bhi.n	8009700 <memmove+0x20>
 80096f0:	1e43      	subs	r3, r0, #1
 80096f2:	42a1      	cmp	r1, r4
 80096f4:	d008      	beq.n	8009708 <memmove+0x28>
 80096f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096fe:	e7f8      	b.n	80096f2 <memmove+0x12>
 8009700:	4402      	add	r2, r0
 8009702:	4601      	mov	r1, r0
 8009704:	428a      	cmp	r2, r1
 8009706:	d100      	bne.n	800970a <memmove+0x2a>
 8009708:	bd10      	pop	{r4, pc}
 800970a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800970e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009712:	e7f7      	b.n	8009704 <memmove+0x24>

08009714 <_malloc_usable_size_r>:
 8009714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009718:	1f18      	subs	r0, r3, #4
 800971a:	2b00      	cmp	r3, #0
 800971c:	bfbc      	itt	lt
 800971e:	580b      	ldrlt	r3, [r1, r0]
 8009720:	18c0      	addlt	r0, r0, r3
 8009722:	4770      	bx	lr

08009724 <__sfputc_r>:
 8009724:	6893      	ldr	r3, [r2, #8]
 8009726:	3b01      	subs	r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	b410      	push	{r4}
 800972c:	6093      	str	r3, [r2, #8]
 800972e:	da08      	bge.n	8009742 <__sfputc_r+0x1e>
 8009730:	6994      	ldr	r4, [r2, #24]
 8009732:	42a3      	cmp	r3, r4
 8009734:	db01      	blt.n	800973a <__sfputc_r+0x16>
 8009736:	290a      	cmp	r1, #10
 8009738:	d103      	bne.n	8009742 <__sfputc_r+0x1e>
 800973a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800973e:	f000 b94b 	b.w	80099d8 <__swbuf_r>
 8009742:	6813      	ldr	r3, [r2, #0]
 8009744:	1c58      	adds	r0, r3, #1
 8009746:	6010      	str	r0, [r2, #0]
 8009748:	7019      	strb	r1, [r3, #0]
 800974a:	4608      	mov	r0, r1
 800974c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009750:	4770      	bx	lr

08009752 <__sfputs_r>:
 8009752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009754:	4606      	mov	r6, r0
 8009756:	460f      	mov	r7, r1
 8009758:	4614      	mov	r4, r2
 800975a:	18d5      	adds	r5, r2, r3
 800975c:	42ac      	cmp	r4, r5
 800975e:	d101      	bne.n	8009764 <__sfputs_r+0x12>
 8009760:	2000      	movs	r0, #0
 8009762:	e007      	b.n	8009774 <__sfputs_r+0x22>
 8009764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009768:	463a      	mov	r2, r7
 800976a:	4630      	mov	r0, r6
 800976c:	f7ff ffda 	bl	8009724 <__sfputc_r>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d1f3      	bne.n	800975c <__sfputs_r+0xa>
 8009774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009778 <_vfiprintf_r>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	460d      	mov	r5, r1
 800977e:	b09d      	sub	sp, #116	; 0x74
 8009780:	4614      	mov	r4, r2
 8009782:	4698      	mov	r8, r3
 8009784:	4606      	mov	r6, r0
 8009786:	b118      	cbz	r0, 8009790 <_vfiprintf_r+0x18>
 8009788:	6983      	ldr	r3, [r0, #24]
 800978a:	b90b      	cbnz	r3, 8009790 <_vfiprintf_r+0x18>
 800978c:	f7ff fee4 	bl	8009558 <__sinit>
 8009790:	4b89      	ldr	r3, [pc, #548]	; (80099b8 <_vfiprintf_r+0x240>)
 8009792:	429d      	cmp	r5, r3
 8009794:	d11b      	bne.n	80097ce <_vfiprintf_r+0x56>
 8009796:	6875      	ldr	r5, [r6, #4]
 8009798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800979a:	07d9      	lsls	r1, r3, #31
 800979c:	d405      	bmi.n	80097aa <_vfiprintf_r+0x32>
 800979e:	89ab      	ldrh	r3, [r5, #12]
 80097a0:	059a      	lsls	r2, r3, #22
 80097a2:	d402      	bmi.n	80097aa <_vfiprintf_r+0x32>
 80097a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097a6:	f7ff ff87 	bl	80096b8 <__retarget_lock_acquire_recursive>
 80097aa:	89ab      	ldrh	r3, [r5, #12]
 80097ac:	071b      	lsls	r3, r3, #28
 80097ae:	d501      	bpl.n	80097b4 <_vfiprintf_r+0x3c>
 80097b0:	692b      	ldr	r3, [r5, #16]
 80097b2:	b9eb      	cbnz	r3, 80097f0 <_vfiprintf_r+0x78>
 80097b4:	4629      	mov	r1, r5
 80097b6:	4630      	mov	r0, r6
 80097b8:	f000 f96e 	bl	8009a98 <__swsetup_r>
 80097bc:	b1c0      	cbz	r0, 80097f0 <_vfiprintf_r+0x78>
 80097be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097c0:	07dc      	lsls	r4, r3, #31
 80097c2:	d50e      	bpl.n	80097e2 <_vfiprintf_r+0x6a>
 80097c4:	f04f 30ff 	mov.w	r0, #4294967295
 80097c8:	b01d      	add	sp, #116	; 0x74
 80097ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ce:	4b7b      	ldr	r3, [pc, #492]	; (80099bc <_vfiprintf_r+0x244>)
 80097d0:	429d      	cmp	r5, r3
 80097d2:	d101      	bne.n	80097d8 <_vfiprintf_r+0x60>
 80097d4:	68b5      	ldr	r5, [r6, #8]
 80097d6:	e7df      	b.n	8009798 <_vfiprintf_r+0x20>
 80097d8:	4b79      	ldr	r3, [pc, #484]	; (80099c0 <_vfiprintf_r+0x248>)
 80097da:	429d      	cmp	r5, r3
 80097dc:	bf08      	it	eq
 80097de:	68f5      	ldreq	r5, [r6, #12]
 80097e0:	e7da      	b.n	8009798 <_vfiprintf_r+0x20>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	0598      	lsls	r0, r3, #22
 80097e6:	d4ed      	bmi.n	80097c4 <_vfiprintf_r+0x4c>
 80097e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ea:	f7ff ff66 	bl	80096ba <__retarget_lock_release_recursive>
 80097ee:	e7e9      	b.n	80097c4 <_vfiprintf_r+0x4c>
 80097f0:	2300      	movs	r3, #0
 80097f2:	9309      	str	r3, [sp, #36]	; 0x24
 80097f4:	2320      	movs	r3, #32
 80097f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80097fe:	2330      	movs	r3, #48	; 0x30
 8009800:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099c4 <_vfiprintf_r+0x24c>
 8009804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009808:	f04f 0901 	mov.w	r9, #1
 800980c:	4623      	mov	r3, r4
 800980e:	469a      	mov	sl, r3
 8009810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009814:	b10a      	cbz	r2, 800981a <_vfiprintf_r+0xa2>
 8009816:	2a25      	cmp	r2, #37	; 0x25
 8009818:	d1f9      	bne.n	800980e <_vfiprintf_r+0x96>
 800981a:	ebba 0b04 	subs.w	fp, sl, r4
 800981e:	d00b      	beq.n	8009838 <_vfiprintf_r+0xc0>
 8009820:	465b      	mov	r3, fp
 8009822:	4622      	mov	r2, r4
 8009824:	4629      	mov	r1, r5
 8009826:	4630      	mov	r0, r6
 8009828:	f7ff ff93 	bl	8009752 <__sfputs_r>
 800982c:	3001      	adds	r0, #1
 800982e:	f000 80aa 	beq.w	8009986 <_vfiprintf_r+0x20e>
 8009832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009834:	445a      	add	r2, fp
 8009836:	9209      	str	r2, [sp, #36]	; 0x24
 8009838:	f89a 3000 	ldrb.w	r3, [sl]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 80a2 	beq.w	8009986 <_vfiprintf_r+0x20e>
 8009842:	2300      	movs	r3, #0
 8009844:	f04f 32ff 	mov.w	r2, #4294967295
 8009848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800984c:	f10a 0a01 	add.w	sl, sl, #1
 8009850:	9304      	str	r3, [sp, #16]
 8009852:	9307      	str	r3, [sp, #28]
 8009854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009858:	931a      	str	r3, [sp, #104]	; 0x68
 800985a:	4654      	mov	r4, sl
 800985c:	2205      	movs	r2, #5
 800985e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009862:	4858      	ldr	r0, [pc, #352]	; (80099c4 <_vfiprintf_r+0x24c>)
 8009864:	f7f6 fcf4 	bl	8000250 <memchr>
 8009868:	9a04      	ldr	r2, [sp, #16]
 800986a:	b9d8      	cbnz	r0, 80098a4 <_vfiprintf_r+0x12c>
 800986c:	06d1      	lsls	r1, r2, #27
 800986e:	bf44      	itt	mi
 8009870:	2320      	movmi	r3, #32
 8009872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009876:	0713      	lsls	r3, r2, #28
 8009878:	bf44      	itt	mi
 800987a:	232b      	movmi	r3, #43	; 0x2b
 800987c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009880:	f89a 3000 	ldrb.w	r3, [sl]
 8009884:	2b2a      	cmp	r3, #42	; 0x2a
 8009886:	d015      	beq.n	80098b4 <_vfiprintf_r+0x13c>
 8009888:	9a07      	ldr	r2, [sp, #28]
 800988a:	4654      	mov	r4, sl
 800988c:	2000      	movs	r0, #0
 800988e:	f04f 0c0a 	mov.w	ip, #10
 8009892:	4621      	mov	r1, r4
 8009894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009898:	3b30      	subs	r3, #48	; 0x30
 800989a:	2b09      	cmp	r3, #9
 800989c:	d94e      	bls.n	800993c <_vfiprintf_r+0x1c4>
 800989e:	b1b0      	cbz	r0, 80098ce <_vfiprintf_r+0x156>
 80098a0:	9207      	str	r2, [sp, #28]
 80098a2:	e014      	b.n	80098ce <_vfiprintf_r+0x156>
 80098a4:	eba0 0308 	sub.w	r3, r0, r8
 80098a8:	fa09 f303 	lsl.w	r3, r9, r3
 80098ac:	4313      	orrs	r3, r2
 80098ae:	9304      	str	r3, [sp, #16]
 80098b0:	46a2      	mov	sl, r4
 80098b2:	e7d2      	b.n	800985a <_vfiprintf_r+0xe2>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	1d19      	adds	r1, r3, #4
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	9103      	str	r1, [sp, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bfbb      	ittet	lt
 80098c0:	425b      	neglt	r3, r3
 80098c2:	f042 0202 	orrlt.w	r2, r2, #2
 80098c6:	9307      	strge	r3, [sp, #28]
 80098c8:	9307      	strlt	r3, [sp, #28]
 80098ca:	bfb8      	it	lt
 80098cc:	9204      	strlt	r2, [sp, #16]
 80098ce:	7823      	ldrb	r3, [r4, #0]
 80098d0:	2b2e      	cmp	r3, #46	; 0x2e
 80098d2:	d10c      	bne.n	80098ee <_vfiprintf_r+0x176>
 80098d4:	7863      	ldrb	r3, [r4, #1]
 80098d6:	2b2a      	cmp	r3, #42	; 0x2a
 80098d8:	d135      	bne.n	8009946 <_vfiprintf_r+0x1ce>
 80098da:	9b03      	ldr	r3, [sp, #12]
 80098dc:	1d1a      	adds	r2, r3, #4
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	9203      	str	r2, [sp, #12]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bfb8      	it	lt
 80098e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80098ea:	3402      	adds	r4, #2
 80098ec:	9305      	str	r3, [sp, #20]
 80098ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099d4 <_vfiprintf_r+0x25c>
 80098f2:	7821      	ldrb	r1, [r4, #0]
 80098f4:	2203      	movs	r2, #3
 80098f6:	4650      	mov	r0, sl
 80098f8:	f7f6 fcaa 	bl	8000250 <memchr>
 80098fc:	b140      	cbz	r0, 8009910 <_vfiprintf_r+0x198>
 80098fe:	2340      	movs	r3, #64	; 0x40
 8009900:	eba0 000a 	sub.w	r0, r0, sl
 8009904:	fa03 f000 	lsl.w	r0, r3, r0
 8009908:	9b04      	ldr	r3, [sp, #16]
 800990a:	4303      	orrs	r3, r0
 800990c:	3401      	adds	r4, #1
 800990e:	9304      	str	r3, [sp, #16]
 8009910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009914:	482c      	ldr	r0, [pc, #176]	; (80099c8 <_vfiprintf_r+0x250>)
 8009916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800991a:	2206      	movs	r2, #6
 800991c:	f7f6 fc98 	bl	8000250 <memchr>
 8009920:	2800      	cmp	r0, #0
 8009922:	d03f      	beq.n	80099a4 <_vfiprintf_r+0x22c>
 8009924:	4b29      	ldr	r3, [pc, #164]	; (80099cc <_vfiprintf_r+0x254>)
 8009926:	bb1b      	cbnz	r3, 8009970 <_vfiprintf_r+0x1f8>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	3307      	adds	r3, #7
 800992c:	f023 0307 	bic.w	r3, r3, #7
 8009930:	3308      	adds	r3, #8
 8009932:	9303      	str	r3, [sp, #12]
 8009934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009936:	443b      	add	r3, r7
 8009938:	9309      	str	r3, [sp, #36]	; 0x24
 800993a:	e767      	b.n	800980c <_vfiprintf_r+0x94>
 800993c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009940:	460c      	mov	r4, r1
 8009942:	2001      	movs	r0, #1
 8009944:	e7a5      	b.n	8009892 <_vfiprintf_r+0x11a>
 8009946:	2300      	movs	r3, #0
 8009948:	3401      	adds	r4, #1
 800994a:	9305      	str	r3, [sp, #20]
 800994c:	4619      	mov	r1, r3
 800994e:	f04f 0c0a 	mov.w	ip, #10
 8009952:	4620      	mov	r0, r4
 8009954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009958:	3a30      	subs	r2, #48	; 0x30
 800995a:	2a09      	cmp	r2, #9
 800995c:	d903      	bls.n	8009966 <_vfiprintf_r+0x1ee>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0c5      	beq.n	80098ee <_vfiprintf_r+0x176>
 8009962:	9105      	str	r1, [sp, #20]
 8009964:	e7c3      	b.n	80098ee <_vfiprintf_r+0x176>
 8009966:	fb0c 2101 	mla	r1, ip, r1, r2
 800996a:	4604      	mov	r4, r0
 800996c:	2301      	movs	r3, #1
 800996e:	e7f0      	b.n	8009952 <_vfiprintf_r+0x1da>
 8009970:	ab03      	add	r3, sp, #12
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	462a      	mov	r2, r5
 8009976:	4b16      	ldr	r3, [pc, #88]	; (80099d0 <_vfiprintf_r+0x258>)
 8009978:	a904      	add	r1, sp, #16
 800997a:	4630      	mov	r0, r6
 800997c:	f7fd fd00 	bl	8007380 <_printf_float>
 8009980:	4607      	mov	r7, r0
 8009982:	1c78      	adds	r0, r7, #1
 8009984:	d1d6      	bne.n	8009934 <_vfiprintf_r+0x1bc>
 8009986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009988:	07d9      	lsls	r1, r3, #31
 800998a:	d405      	bmi.n	8009998 <_vfiprintf_r+0x220>
 800998c:	89ab      	ldrh	r3, [r5, #12]
 800998e:	059a      	lsls	r2, r3, #22
 8009990:	d402      	bmi.n	8009998 <_vfiprintf_r+0x220>
 8009992:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009994:	f7ff fe91 	bl	80096ba <__retarget_lock_release_recursive>
 8009998:	89ab      	ldrh	r3, [r5, #12]
 800999a:	065b      	lsls	r3, r3, #25
 800999c:	f53f af12 	bmi.w	80097c4 <_vfiprintf_r+0x4c>
 80099a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099a2:	e711      	b.n	80097c8 <_vfiprintf_r+0x50>
 80099a4:	ab03      	add	r3, sp, #12
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	462a      	mov	r2, r5
 80099aa:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <_vfiprintf_r+0x258>)
 80099ac:	a904      	add	r1, sp, #16
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7fd ff72 	bl	8007898 <_printf_i>
 80099b4:	e7e4      	b.n	8009980 <_vfiprintf_r+0x208>
 80099b6:	bf00      	nop
 80099b8:	0800aa8c 	.word	0x0800aa8c
 80099bc:	0800aaac 	.word	0x0800aaac
 80099c0:	0800aa6c 	.word	0x0800aa6c
 80099c4:	0800a91c 	.word	0x0800a91c
 80099c8:	0800a926 	.word	0x0800a926
 80099cc:	08007381 	.word	0x08007381
 80099d0:	08009753 	.word	0x08009753
 80099d4:	0800a922 	.word	0x0800a922

080099d8 <__swbuf_r>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	460e      	mov	r6, r1
 80099dc:	4614      	mov	r4, r2
 80099de:	4605      	mov	r5, r0
 80099e0:	b118      	cbz	r0, 80099ea <__swbuf_r+0x12>
 80099e2:	6983      	ldr	r3, [r0, #24]
 80099e4:	b90b      	cbnz	r3, 80099ea <__swbuf_r+0x12>
 80099e6:	f7ff fdb7 	bl	8009558 <__sinit>
 80099ea:	4b21      	ldr	r3, [pc, #132]	; (8009a70 <__swbuf_r+0x98>)
 80099ec:	429c      	cmp	r4, r3
 80099ee:	d12b      	bne.n	8009a48 <__swbuf_r+0x70>
 80099f0:	686c      	ldr	r4, [r5, #4]
 80099f2:	69a3      	ldr	r3, [r4, #24]
 80099f4:	60a3      	str	r3, [r4, #8]
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	071a      	lsls	r2, r3, #28
 80099fa:	d52f      	bpl.n	8009a5c <__swbuf_r+0x84>
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	b36b      	cbz	r3, 8009a5c <__swbuf_r+0x84>
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	6820      	ldr	r0, [r4, #0]
 8009a04:	1ac0      	subs	r0, r0, r3
 8009a06:	6963      	ldr	r3, [r4, #20]
 8009a08:	b2f6      	uxtb	r6, r6
 8009a0a:	4283      	cmp	r3, r0
 8009a0c:	4637      	mov	r7, r6
 8009a0e:	dc04      	bgt.n	8009a1a <__swbuf_r+0x42>
 8009a10:	4621      	mov	r1, r4
 8009a12:	4628      	mov	r0, r5
 8009a14:	f7ff fd0c 	bl	8009430 <_fflush_r>
 8009a18:	bb30      	cbnz	r0, 8009a68 <__swbuf_r+0x90>
 8009a1a:	68a3      	ldr	r3, [r4, #8]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	60a3      	str	r3, [r4, #8]
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	6022      	str	r2, [r4, #0]
 8009a26:	701e      	strb	r6, [r3, #0]
 8009a28:	6963      	ldr	r3, [r4, #20]
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	4283      	cmp	r3, r0
 8009a2e:	d004      	beq.n	8009a3a <__swbuf_r+0x62>
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	07db      	lsls	r3, r3, #31
 8009a34:	d506      	bpl.n	8009a44 <__swbuf_r+0x6c>
 8009a36:	2e0a      	cmp	r6, #10
 8009a38:	d104      	bne.n	8009a44 <__swbuf_r+0x6c>
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f7ff fcf7 	bl	8009430 <_fflush_r>
 8009a42:	b988      	cbnz	r0, 8009a68 <__swbuf_r+0x90>
 8009a44:	4638      	mov	r0, r7
 8009a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <__swbuf_r+0x9c>)
 8009a4a:	429c      	cmp	r4, r3
 8009a4c:	d101      	bne.n	8009a52 <__swbuf_r+0x7a>
 8009a4e:	68ac      	ldr	r4, [r5, #8]
 8009a50:	e7cf      	b.n	80099f2 <__swbuf_r+0x1a>
 8009a52:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <__swbuf_r+0xa0>)
 8009a54:	429c      	cmp	r4, r3
 8009a56:	bf08      	it	eq
 8009a58:	68ec      	ldreq	r4, [r5, #12]
 8009a5a:	e7ca      	b.n	80099f2 <__swbuf_r+0x1a>
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 f81a 	bl	8009a98 <__swsetup_r>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d0cb      	beq.n	8009a00 <__swbuf_r+0x28>
 8009a68:	f04f 37ff 	mov.w	r7, #4294967295
 8009a6c:	e7ea      	b.n	8009a44 <__swbuf_r+0x6c>
 8009a6e:	bf00      	nop
 8009a70:	0800aa8c 	.word	0x0800aa8c
 8009a74:	0800aaac 	.word	0x0800aaac
 8009a78:	0800aa6c 	.word	0x0800aa6c

08009a7c <__ascii_wctomb>:
 8009a7c:	b149      	cbz	r1, 8009a92 <__ascii_wctomb+0x16>
 8009a7e:	2aff      	cmp	r2, #255	; 0xff
 8009a80:	bf85      	ittet	hi
 8009a82:	238a      	movhi	r3, #138	; 0x8a
 8009a84:	6003      	strhi	r3, [r0, #0]
 8009a86:	700a      	strbls	r2, [r1, #0]
 8009a88:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a8c:	bf98      	it	ls
 8009a8e:	2001      	movls	r0, #1
 8009a90:	4770      	bx	lr
 8009a92:	4608      	mov	r0, r1
 8009a94:	4770      	bx	lr
	...

08009a98 <__swsetup_r>:
 8009a98:	4b32      	ldr	r3, [pc, #200]	; (8009b64 <__swsetup_r+0xcc>)
 8009a9a:	b570      	push	{r4, r5, r6, lr}
 8009a9c:	681d      	ldr	r5, [r3, #0]
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	b125      	cbz	r5, 8009aae <__swsetup_r+0x16>
 8009aa4:	69ab      	ldr	r3, [r5, #24]
 8009aa6:	b913      	cbnz	r3, 8009aae <__swsetup_r+0x16>
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f7ff fd55 	bl	8009558 <__sinit>
 8009aae:	4b2e      	ldr	r3, [pc, #184]	; (8009b68 <__swsetup_r+0xd0>)
 8009ab0:	429c      	cmp	r4, r3
 8009ab2:	d10f      	bne.n	8009ad4 <__swsetup_r+0x3c>
 8009ab4:	686c      	ldr	r4, [r5, #4]
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009abc:	0719      	lsls	r1, r3, #28
 8009abe:	d42c      	bmi.n	8009b1a <__swsetup_r+0x82>
 8009ac0:	06dd      	lsls	r5, r3, #27
 8009ac2:	d411      	bmi.n	8009ae8 <__swsetup_r+0x50>
 8009ac4:	2309      	movs	r3, #9
 8009ac6:	6033      	str	r3, [r6, #0]
 8009ac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009acc:	81a3      	strh	r3, [r4, #12]
 8009ace:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad2:	e03e      	b.n	8009b52 <__swsetup_r+0xba>
 8009ad4:	4b25      	ldr	r3, [pc, #148]	; (8009b6c <__swsetup_r+0xd4>)
 8009ad6:	429c      	cmp	r4, r3
 8009ad8:	d101      	bne.n	8009ade <__swsetup_r+0x46>
 8009ada:	68ac      	ldr	r4, [r5, #8]
 8009adc:	e7eb      	b.n	8009ab6 <__swsetup_r+0x1e>
 8009ade:	4b24      	ldr	r3, [pc, #144]	; (8009b70 <__swsetup_r+0xd8>)
 8009ae0:	429c      	cmp	r4, r3
 8009ae2:	bf08      	it	eq
 8009ae4:	68ec      	ldreq	r4, [r5, #12]
 8009ae6:	e7e6      	b.n	8009ab6 <__swsetup_r+0x1e>
 8009ae8:	0758      	lsls	r0, r3, #29
 8009aea:	d512      	bpl.n	8009b12 <__swsetup_r+0x7a>
 8009aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aee:	b141      	cbz	r1, 8009b02 <__swsetup_r+0x6a>
 8009af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009af4:	4299      	cmp	r1, r3
 8009af6:	d002      	beq.n	8009afe <__swsetup_r+0x66>
 8009af8:	4630      	mov	r0, r6
 8009afa:	f7fd fad1 	bl	80070a0 <_free_r>
 8009afe:	2300      	movs	r3, #0
 8009b00:	6363      	str	r3, [r4, #52]	; 0x34
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b08:	81a3      	strh	r3, [r4, #12]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	6063      	str	r3, [r4, #4]
 8009b0e:	6923      	ldr	r3, [r4, #16]
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	f043 0308 	orr.w	r3, r3, #8
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	6923      	ldr	r3, [r4, #16]
 8009b1c:	b94b      	cbnz	r3, 8009b32 <__swsetup_r+0x9a>
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b28:	d003      	beq.n	8009b32 <__swsetup_r+0x9a>
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f000 f84d 	bl	8009bcc <__smakebuf_r>
 8009b32:	89a0      	ldrh	r0, [r4, #12]
 8009b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b38:	f010 0301 	ands.w	r3, r0, #1
 8009b3c:	d00a      	beq.n	8009b54 <__swsetup_r+0xbc>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60a3      	str	r3, [r4, #8]
 8009b42:	6963      	ldr	r3, [r4, #20]
 8009b44:	425b      	negs	r3, r3
 8009b46:	61a3      	str	r3, [r4, #24]
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	b943      	cbnz	r3, 8009b5e <__swsetup_r+0xc6>
 8009b4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b50:	d1ba      	bne.n	8009ac8 <__swsetup_r+0x30>
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	0781      	lsls	r1, r0, #30
 8009b56:	bf58      	it	pl
 8009b58:	6963      	ldrpl	r3, [r4, #20]
 8009b5a:	60a3      	str	r3, [r4, #8]
 8009b5c:	e7f4      	b.n	8009b48 <__swsetup_r+0xb0>
 8009b5e:	2000      	movs	r0, #0
 8009b60:	e7f7      	b.n	8009b52 <__swsetup_r+0xba>
 8009b62:	bf00      	nop
 8009b64:	200003f8 	.word	0x200003f8
 8009b68:	0800aa8c 	.word	0x0800aa8c
 8009b6c:	0800aaac 	.word	0x0800aaac
 8009b70:	0800aa6c 	.word	0x0800aa6c

08009b74 <abort>:
 8009b74:	b508      	push	{r3, lr}
 8009b76:	2006      	movs	r0, #6
 8009b78:	f000 f890 	bl	8009c9c <raise>
 8009b7c:	2001      	movs	r0, #1
 8009b7e:	f000 f919 	bl	8009db4 <_exit>

08009b82 <__swhatbuf_r>:
 8009b82:	b570      	push	{r4, r5, r6, lr}
 8009b84:	460e      	mov	r6, r1
 8009b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8a:	2900      	cmp	r1, #0
 8009b8c:	b096      	sub	sp, #88	; 0x58
 8009b8e:	4614      	mov	r4, r2
 8009b90:	461d      	mov	r5, r3
 8009b92:	da08      	bge.n	8009ba6 <__swhatbuf_r+0x24>
 8009b94:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	602a      	str	r2, [r5, #0]
 8009b9c:	061a      	lsls	r2, r3, #24
 8009b9e:	d410      	bmi.n	8009bc2 <__swhatbuf_r+0x40>
 8009ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ba4:	e00e      	b.n	8009bc4 <__swhatbuf_r+0x42>
 8009ba6:	466a      	mov	r2, sp
 8009ba8:	f000 f894 	bl	8009cd4 <_fstat_r>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	dbf1      	blt.n	8009b94 <__swhatbuf_r+0x12>
 8009bb0:	9a01      	ldr	r2, [sp, #4]
 8009bb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bba:	425a      	negs	r2, r3
 8009bbc:	415a      	adcs	r2, r3
 8009bbe:	602a      	str	r2, [r5, #0]
 8009bc0:	e7ee      	b.n	8009ba0 <__swhatbuf_r+0x1e>
 8009bc2:	2340      	movs	r3, #64	; 0x40
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	6023      	str	r3, [r4, #0]
 8009bc8:	b016      	add	sp, #88	; 0x58
 8009bca:	bd70      	pop	{r4, r5, r6, pc}

08009bcc <__smakebuf_r>:
 8009bcc:	898b      	ldrh	r3, [r1, #12]
 8009bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bd0:	079d      	lsls	r5, r3, #30
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	d507      	bpl.n	8009be8 <__smakebuf_r+0x1c>
 8009bd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	6123      	str	r3, [r4, #16]
 8009be0:	2301      	movs	r3, #1
 8009be2:	6163      	str	r3, [r4, #20]
 8009be4:	b002      	add	sp, #8
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	ab01      	add	r3, sp, #4
 8009bea:	466a      	mov	r2, sp
 8009bec:	f7ff ffc9 	bl	8009b82 <__swhatbuf_r>
 8009bf0:	9900      	ldr	r1, [sp, #0]
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7fd fabf 	bl	8007178 <_malloc_r>
 8009bfa:	b948      	cbnz	r0, 8009c10 <__smakebuf_r+0x44>
 8009bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c00:	059a      	lsls	r2, r3, #22
 8009c02:	d4ef      	bmi.n	8009be4 <__smakebuf_r+0x18>
 8009c04:	f023 0303 	bic.w	r3, r3, #3
 8009c08:	f043 0302 	orr.w	r3, r3, #2
 8009c0c:	81a3      	strh	r3, [r4, #12]
 8009c0e:	e7e3      	b.n	8009bd8 <__smakebuf_r+0xc>
 8009c10:	4b0d      	ldr	r3, [pc, #52]	; (8009c48 <__smakebuf_r+0x7c>)
 8009c12:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	6020      	str	r0, [r4, #0]
 8009c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	9b00      	ldr	r3, [sp, #0]
 8009c20:	6163      	str	r3, [r4, #20]
 8009c22:	9b01      	ldr	r3, [sp, #4]
 8009c24:	6120      	str	r0, [r4, #16]
 8009c26:	b15b      	cbz	r3, 8009c40 <__smakebuf_r+0x74>
 8009c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f000 f863 	bl	8009cf8 <_isatty_r>
 8009c32:	b128      	cbz	r0, 8009c40 <__smakebuf_r+0x74>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f023 0303 	bic.w	r3, r3, #3
 8009c3a:	f043 0301 	orr.w	r3, r3, #1
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	89a0      	ldrh	r0, [r4, #12]
 8009c42:	4305      	orrs	r5, r0
 8009c44:	81a5      	strh	r5, [r4, #12]
 8009c46:	e7cd      	b.n	8009be4 <__smakebuf_r+0x18>
 8009c48:	080094f1 	.word	0x080094f1

08009c4c <_raise_r>:
 8009c4c:	291f      	cmp	r1, #31
 8009c4e:	b538      	push	{r3, r4, r5, lr}
 8009c50:	4604      	mov	r4, r0
 8009c52:	460d      	mov	r5, r1
 8009c54:	d904      	bls.n	8009c60 <_raise_r+0x14>
 8009c56:	2316      	movs	r3, #22
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c62:	b112      	cbz	r2, 8009c6a <_raise_r+0x1e>
 8009c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c68:	b94b      	cbnz	r3, 8009c7e <_raise_r+0x32>
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 f830 	bl	8009cd0 <_getpid_r>
 8009c70:	462a      	mov	r2, r5
 8009c72:	4601      	mov	r1, r0
 8009c74:	4620      	mov	r0, r4
 8009c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c7a:	f000 b817 	b.w	8009cac <_kill_r>
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d00a      	beq.n	8009c98 <_raise_r+0x4c>
 8009c82:	1c59      	adds	r1, r3, #1
 8009c84:	d103      	bne.n	8009c8e <_raise_r+0x42>
 8009c86:	2316      	movs	r3, #22
 8009c88:	6003      	str	r3, [r0, #0]
 8009c8a:	2001      	movs	r0, #1
 8009c8c:	e7e7      	b.n	8009c5e <_raise_r+0x12>
 8009c8e:	2400      	movs	r4, #0
 8009c90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c94:	4628      	mov	r0, r5
 8009c96:	4798      	blx	r3
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e7e0      	b.n	8009c5e <_raise_r+0x12>

08009c9c <raise>:
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <raise+0xc>)
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	f7ff bfd3 	b.w	8009c4c <_raise_r>
 8009ca6:	bf00      	nop
 8009ca8:	200003f8 	.word	0x200003f8

08009cac <_kill_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4d07      	ldr	r5, [pc, #28]	; (8009ccc <_kill_r+0x20>)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	602b      	str	r3, [r5, #0]
 8009cba:	f000 f84d 	bl	8009d58 <_kill>
 8009cbe:	1c43      	adds	r3, r0, #1
 8009cc0:	d102      	bne.n	8009cc8 <_kill_r+0x1c>
 8009cc2:	682b      	ldr	r3, [r5, #0]
 8009cc4:	b103      	cbz	r3, 8009cc8 <_kill_r+0x1c>
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	bd38      	pop	{r3, r4, r5, pc}
 8009cca:	bf00      	nop
 8009ccc:	2000105c 	.word	0x2000105c

08009cd0 <_getpid_r>:
 8009cd0:	f000 b832 	b.w	8009d38 <_getpid>

08009cd4 <_fstat_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4d07      	ldr	r5, [pc, #28]	; (8009cf4 <_fstat_r+0x20>)
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4604      	mov	r4, r0
 8009cdc:	4608      	mov	r0, r1
 8009cde:	4611      	mov	r1, r2
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	f000 f821 	bl	8009d28 <_fstat>
 8009ce6:	1c43      	adds	r3, r0, #1
 8009ce8:	d102      	bne.n	8009cf0 <_fstat_r+0x1c>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	b103      	cbz	r3, 8009cf0 <_fstat_r+0x1c>
 8009cee:	6023      	str	r3, [r4, #0]
 8009cf0:	bd38      	pop	{r3, r4, r5, pc}
 8009cf2:	bf00      	nop
 8009cf4:	2000105c 	.word	0x2000105c

08009cf8 <_isatty_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4d06      	ldr	r5, [pc, #24]	; (8009d14 <_isatty_r+0x1c>)
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	f000 f820 	bl	8009d48 <_isatty>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_isatty_r+0x1a>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_isatty_r+0x1a>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	2000105c 	.word	0x2000105c

08009d18 <_close>:
 8009d18:	4b02      	ldr	r3, [pc, #8]	; (8009d24 <_close+0xc>)
 8009d1a:	2258      	movs	r2, #88	; 0x58
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d22:	4770      	bx	lr
 8009d24:	2000105c 	.word	0x2000105c

08009d28 <_fstat>:
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <_fstat+0xc>)
 8009d2a:	2258      	movs	r2, #88	; 0x58
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d32:	4770      	bx	lr
 8009d34:	2000105c 	.word	0x2000105c

08009d38 <_getpid>:
 8009d38:	4b02      	ldr	r3, [pc, #8]	; (8009d44 <_getpid+0xc>)
 8009d3a:	2258      	movs	r2, #88	; 0x58
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d42:	4770      	bx	lr
 8009d44:	2000105c 	.word	0x2000105c

08009d48 <_isatty>:
 8009d48:	4b02      	ldr	r3, [pc, #8]	; (8009d54 <_isatty+0xc>)
 8009d4a:	2258      	movs	r2, #88	; 0x58
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	2000      	movs	r0, #0
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	2000105c 	.word	0x2000105c

08009d58 <_kill>:
 8009d58:	4b02      	ldr	r3, [pc, #8]	; (8009d64 <_kill+0xc>)
 8009d5a:	2258      	movs	r2, #88	; 0x58
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d62:	4770      	bx	lr
 8009d64:	2000105c 	.word	0x2000105c

08009d68 <_lseek>:
 8009d68:	4b02      	ldr	r3, [pc, #8]	; (8009d74 <_lseek+0xc>)
 8009d6a:	2258      	movs	r2, #88	; 0x58
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d72:	4770      	bx	lr
 8009d74:	2000105c 	.word	0x2000105c

08009d78 <_read>:
 8009d78:	4b02      	ldr	r3, [pc, #8]	; (8009d84 <_read+0xc>)
 8009d7a:	2258      	movs	r2, #88	; 0x58
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d82:	4770      	bx	lr
 8009d84:	2000105c 	.word	0x2000105c

08009d88 <_sbrk>:
 8009d88:	4a04      	ldr	r2, [pc, #16]	; (8009d9c <_sbrk+0x14>)
 8009d8a:	6811      	ldr	r1, [r2, #0]
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	b909      	cbnz	r1, 8009d94 <_sbrk+0xc>
 8009d90:	4903      	ldr	r1, [pc, #12]	; (8009da0 <_sbrk+0x18>)
 8009d92:	6011      	str	r1, [r2, #0]
 8009d94:	6810      	ldr	r0, [r2, #0]
 8009d96:	4403      	add	r3, r0
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	4770      	bx	lr
 8009d9c:	20001064 	.word	0x20001064
 8009da0:	20001068 	.word	0x20001068

08009da4 <_write>:
 8009da4:	4b02      	ldr	r3, [pc, #8]	; (8009db0 <_write+0xc>)
 8009da6:	2258      	movs	r2, #88	; 0x58
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dae:	4770      	bx	lr
 8009db0:	2000105c 	.word	0x2000105c

08009db4 <_exit>:
 8009db4:	e7fe      	b.n	8009db4 <_exit>
	...

08009db8 <_init>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	bf00      	nop
 8009dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dbe:	bc08      	pop	{r3}
 8009dc0:	469e      	mov	lr, r3
 8009dc2:	4770      	bx	lr

08009dc4 <_fini>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	bf00      	nop
 8009dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dca:	bc08      	pop	{r3}
 8009dcc:	469e      	mov	lr, r3
 8009dce:	4770      	bx	lr
