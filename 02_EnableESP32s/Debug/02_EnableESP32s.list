
02_EnableESP32s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  08006dd8  08006dd8  00016dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007970  08007970  00017970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007974  08007974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  08007978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007cc  200001e0  08007b58  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  200009ac  08007b58  000209ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000213fc  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047d5  00000000  00000000  0004160a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001201e  00000000  00000000  00045ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000012b8  00000000  00000000  00057e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001af0  00000000  00000000  000590b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029c57  00000000  00000000  0005aba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f9b5  00000000  00000000  000847ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f8d42  00000000  00000000  000a41b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0019cef6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004818  00000000  00000000  0019cf48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001a1760  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001a182c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08006dbc 	.word	0x08006dbc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	08006dbc 	.word	0x08006dbc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_InitTick+0x3c>)
{
 80005f8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_InitTick+0x40>)
 80005fc:	7818      	ldrb	r0, [r3, #0]
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f0 	udiv	r3, r3, r0
 8000606:	6810      	ldr	r0, [r2, #0]
 8000608:	fbb0 f0f3 	udiv	r0, r0, r3
 800060c:	f000 f898 	bl	8000740 <HAL_SYSTICK_Config>
 8000610:	4604      	mov	r4, r0
 8000612:	b958      	cbnz	r0, 800062c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000614:	2d0f      	cmp	r5, #15
 8000616:	d809      	bhi.n	800062c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	4602      	mov	r2, r0
 800061a:	4629      	mov	r1, r5
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f84e 	bl	80006c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HAL_InitTick+0x44>)
 8000626:	4620      	mov	r0, r4
 8000628:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800062c:	2001      	movs	r0, #1
 800062e:	e7fc      	b.n	800062a <HAL_InitTick+0x36>
 8000630:	20000000 	.word	0x20000000
 8000634:	2000000c 	.word	0x2000000c
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_Init>:
{
 800063c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f82c 	bl	800069c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ffd5 	bl	80005f4 <HAL_InitTick>
  HAL_MspInit();
 800064a:	f003 fd51 	bl	80040f0 <HAL_MspInit>
}
 800064e:	2000      	movs	r0, #0
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x10>)
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_IncTick+0x14>)
 8000658:	6811      	ldr	r1, [r2, #0]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	440b      	add	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200001fc 	.word	0x200001fc
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <HAL_GetTick+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	200001fc 	.word	0x200001fc

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff6 	bl	800066c <HAL_GetTick>
 8000680:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000684:	bf1e      	ittt	ne
 8000686:	4b04      	ldrne	r3, [pc, #16]	; (8000698 <HAL_Delay+0x20>)
 8000688:	781b      	ldrbne	r3, [r3, #0]
 800068a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	1b43      	subs	r3, r0, r5
 8000692:	42a3      	cmp	r3, r4
 8000694:	d3fa      	bcc.n	800068c <HAL_Delay+0x14>
  {
  }
}
 8000696:	bd38      	pop	{r3, r4, r5, pc}
 8000698:	20000000 	.word	0x20000000

0800069c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006aa:	0412      	lsls	r2, r2, #16
 80006ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	68dc      	ldr	r4, [r3, #12]
 80006c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ca:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	2d04      	cmp	r5, #4
 80006d2:	bf28      	it	cs
 80006d4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006dc:	bf8c      	ite	hi
 80006de:	3c03      	subhi	r4, #3
 80006e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80006e6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	fa01 f104 	lsl.w	r1, r1, r4
 80006f8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000700:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000702:	db06      	blt.n	8000712 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000708:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800070c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000710:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	f000 000f 	and.w	r0, r0, #15
 8000716:	4a02      	ldr	r2, [pc, #8]	; (8000720 <HAL_NVIC_SetPriority+0x60>)
 8000718:	5413      	strb	r3, [r2, r0]
 800071a:	e7f9      	b.n	8000710 <HAL_NVIC_SetPriority+0x50>
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	e000ed14 	.word	0xe000ed14

08000724 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000724:	2800      	cmp	r0, #0
 8000726:	db08      	blt.n	800073a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000728:	0942      	lsrs	r2, r0, #5
 800072a:	2301      	movs	r3, #1
 800072c:	f000 001f 	and.w	r0, r0, #31
 8000730:	fa03 f000 	lsl.w	r0, r3, r0
 8000734:	4b01      	ldr	r3, [pc, #4]	; (800073c <HAL_NVIC_EnableIRQ+0x18>)
 8000736:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	3801      	subs	r0, #1
 8000742:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000746:	d20b      	bcs.n	8000760 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <HAL_SYSTICK_Config+0x24>)
 800074e:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000752:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000758:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000760:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000768:	6803      	ldr	r3, [r0, #0]
{
 800076a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800076c:	2018      	movs	r0, #24
 800076e:	b2d9      	uxtb	r1, r3
 8000770:	3910      	subs	r1, #16
 8000772:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8000776:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000778:	4c05      	ldr	r4, [pc, #20]	; (8000790 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800077a:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800077c:	5c20      	ldrb	r0, [r4, r0]
 800077e:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000780:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8000784:	f020 0003 	bic.w	r0, r0, #3
 8000788:	bf88      	it	hi
 800078a:	3004      	addhi	r0, #4
 800078c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	08006dd8 	.word	0x08006dd8

08000794 <HAL_DMA_Init>:
{
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000798:	f7ff ff68 	bl	800066c <HAL_GetTick>
 800079c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800079e:	2c00      	cmp	r4, #0
 80007a0:	d073      	beq.n	800088a <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 80007a2:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80007a4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80007a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80007b0:	6813      	ldr	r3, [r2, #0]
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007b8:	6821      	ldr	r1, [r4, #0]
 80007ba:	680b      	ldr	r3, [r1, #0]
 80007bc:	07d8      	lsls	r0, r3, #31
 80007be:	d42f      	bmi.n	8000820 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80007c0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c2:	4d33      	ldr	r5, [pc, #204]	; (8000890 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007c4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	68e2      	ldr	r2, [r4, #12]
 80007d0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007d2:	6922      	ldr	r2, [r4, #16]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	6962      	ldr	r2, [r4, #20]
 80007d8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007da:	69e2      	ldr	r2, [r4, #28]
 80007dc:	4303      	orrs	r3, r0
 80007de:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007e0:	6a22      	ldr	r2, [r4, #32]
 80007e2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007e8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007ec:	bf02      	ittt	eq
 80007ee:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80007f2:	4335      	orreq	r5, r6
 80007f4:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007f6:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80007f8:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007fa:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007fc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000800:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000804:	d133      	bne.n	800086e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8000806:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000808:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800080a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800080c:	b37d      	cbz	r5, 800086e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800080e:	b990      	cbnz	r0, 8000836 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8000810:	2a01      	cmp	r2, #1
 8000812:	d021      	beq.n	8000858 <HAL_DMA_Init+0xc4>
 8000814:	f032 0202 	bics.w	r2, r2, #2
 8000818:	d129      	bne.n	800086e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800081a:	01ea      	lsls	r2, r5, #7
 800081c:	d527      	bpl.n	800086e <HAL_DMA_Init+0xda>
 800081e:	e01e      	b.n	800085e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000820:	f7ff ff24 	bl	800066c <HAL_GetTick>
 8000824:	1b40      	subs	r0, r0, r5
 8000826:	2805      	cmp	r0, #5
 8000828:	d9c6      	bls.n	80007b8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082a:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800082c:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000830:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000834:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000836:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800083a:	d114      	bne.n	8000866 <HAL_DMA_Init+0xd2>
    switch (tmp)
 800083c:	2a03      	cmp	r2, #3
 800083e:	d816      	bhi.n	800086e <HAL_DMA_Init+0xda>
 8000840:	a001      	add	r0, pc, #4	; (adr r0, 8000848 <HAL_DMA_Init+0xb4>)
 8000842:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000846:	bf00      	nop
 8000848:	0800085f 	.word	0x0800085f
 800084c:	0800081b 	.word	0x0800081b
 8000850:	0800085f 	.word	0x0800085f
 8000854:	08000859 	.word	0x08000859
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000858:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800085c:	d107      	bne.n	800086e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800085e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000860:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000862:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000864:	e7e4      	b.n	8000830 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8000866:	2a02      	cmp	r2, #2
 8000868:	d9f9      	bls.n	800085e <HAL_DMA_Init+0xca>
 800086a:	2a03      	cmp	r2, #3
 800086c:	d0d5      	beq.n	800081a <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800086e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000870:	4620      	mov	r0, r4
 8000872:	f7ff ff79 	bl	8000768 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000876:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000878:	233f      	movs	r3, #63	; 0x3f
 800087a:	4093      	lsls	r3, r2
 800087c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800087e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000880:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000882:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000884:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000888:	e7d4      	b.n	8000834 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800088a:	2001      	movs	r0, #1
 800088c:	e7d2      	b.n	8000834 <HAL_DMA_Init+0xa0>
 800088e:	bf00      	nop
 8000890:	e010803f 	.word	0xe010803f

08000894 <HAL_DMA_Start_IT>:
{
 8000894:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000896:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800089a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800089c:	2c01      	cmp	r4, #1
 800089e:	d034      	beq.n	800090a <HAL_DMA_Start_IT+0x76>
 80008a0:	2401      	movs	r4, #1
 80008a2:	2500      	movs	r5, #0
 80008a4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80008a8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	f04f 0402 	mov.w	r4, #2
 80008b2:	d128      	bne.n	8000906 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80008b4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008b8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008ba:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008bc:	6825      	ldr	r5, [r4, #0]
 80008be:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80008c2:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80008c4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008c6:	6883      	ldr	r3, [r0, #8]
 80008c8:	2b40      	cmp	r3, #64	; 0x40
 80008ca:	d119      	bne.n	8000900 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 80008cc:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80008ce:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008d0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	4093      	lsls	r3, r2
 80008d6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	f043 0316 	orr.w	r3, r3, #22
 80008de:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80008e0:	6963      	ldr	r3, [r4, #20]
 80008e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80008e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008ea:	b11b      	cbz	r3, 80008f4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008f4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008f6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6023      	str	r3, [r4, #0]
}
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000900:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000902:	60e2      	str	r2, [r4, #12]
 8000904:	e7e4      	b.n	80008d0 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000906:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800090a:	2002      	movs	r0, #2
 800090c:	e7f7      	b.n	80008fe <HAL_DMA_Start_IT+0x6a>

0800090e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800090e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000912:	2b02      	cmp	r3, #2
 8000914:	d003      	beq.n	800091e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800091a:	2001      	movs	r0, #1
 800091c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800091e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000920:	2305      	movs	r3, #5
 8000922:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000926:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000928:	6813      	ldr	r3, [r2, #0]
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	4770      	bx	lr
	...

08000934 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000934:	2300      	movs	r3, #0
{
 8000936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000938:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800093a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800093c:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <HAL_DMA_IRQHandler+0x178>)
{
 800093e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000940:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000942:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000944:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000946:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000948:	409a      	lsls	r2, r3
 800094a:	4232      	tst	r2, r6
 800094c:	d00c      	beq.n	8000968 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800094e:	6801      	ldr	r1, [r0, #0]
 8000950:	6808      	ldr	r0, [r1, #0]
 8000952:	0740      	lsls	r0, r0, #29
 8000954:	d508      	bpl.n	8000968 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000956:	6808      	ldr	r0, [r1, #0]
 8000958:	f020 0004 	bic.w	r0, r0, #4
 800095c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800095e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000960:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000962:	f042 0201 	orr.w	r2, r2, #1
 8000966:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000968:	2201      	movs	r2, #1
 800096a:	409a      	lsls	r2, r3
 800096c:	4232      	tst	r2, r6
 800096e:	d008      	beq.n	8000982 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000970:	6821      	ldr	r1, [r4, #0]
 8000972:	6949      	ldr	r1, [r1, #20]
 8000974:	0609      	lsls	r1, r1, #24
 8000976:	d504      	bpl.n	8000982 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000978:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800097a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800097c:	f042 0202 	orr.w	r2, r2, #2
 8000980:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000982:	2204      	movs	r2, #4
 8000984:	409a      	lsls	r2, r3
 8000986:	4232      	tst	r2, r6
 8000988:	d008      	beq.n	800099c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800098a:	6821      	ldr	r1, [r4, #0]
 800098c:	6809      	ldr	r1, [r1, #0]
 800098e:	0788      	lsls	r0, r1, #30
 8000990:	d504      	bpl.n	800099c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000992:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000994:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000996:	f042 0204 	orr.w	r2, r2, #4
 800099a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800099c:	2210      	movs	r2, #16
 800099e:	409a      	lsls	r2, r3
 80009a0:	4232      	tst	r2, r6
 80009a2:	d010      	beq.n	80009c6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	6819      	ldr	r1, [r3, #0]
 80009a8:	0709      	lsls	r1, r1, #28
 80009aa:	d50c      	bpl.n	80009c6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80009ac:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	0350      	lsls	r0, r2, #13
 80009b2:	d537      	bpl.n	8000a24 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	0319      	lsls	r1, r3, #12
 80009b8:	d401      	bmi.n	80009be <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80009ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009bc:	e000      	b.n	80009c0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80009be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80009c0:	b10b      	cbz	r3, 80009c6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80009c2:	4620      	mov	r0, r4
 80009c4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80009c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80009c8:	2220      	movs	r2, #32
 80009ca:	408a      	lsls	r2, r1
 80009cc:	4232      	tst	r2, r6
 80009ce:	d03a      	beq.n	8000a46 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	06c6      	lsls	r6, r0, #27
 80009d6:	d536      	bpl.n	8000a46 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80009d8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009da:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80009de:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009e0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009e2:	d127      	bne.n	8000a34 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009e4:	f022 0216 	bic.w	r2, r2, #22
 80009e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009f0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009f4:	b90a      	cbnz	r2, 80009fa <HAL_DMA_IRQHandler+0xc6>
 80009f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009f8:	b11a      	cbz	r2, 8000a02 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	f022 0208 	bic.w	r2, r2, #8
 8000a00:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a02:	233f      	movs	r3, #63	; 0x3f
 8000a04:	408b      	lsls	r3, r1
 8000a06:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000a14:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d045      	beq.n	8000aa6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8000a1a:	4620      	mov	r0, r4
}
 8000a1c:	b003      	add	sp, #12
 8000a1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000a22:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	05d2      	lsls	r2, r2, #23
 8000a28:	d4c7      	bmi.n	80009ba <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	f022 0208 	bic.w	r2, r2, #8
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	e7c2      	b.n	80009ba <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a34:	0350      	lsls	r0, r2, #13
 8000a36:	d527      	bpl.n	8000a88 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	0319      	lsls	r1, r3, #12
 8000a3c:	d431      	bmi.n	8000aa2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8000a3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000a40:	b10b      	cbz	r3, 8000a46 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8000a42:	4620      	mov	r0, r4
 8000a44:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a48:	b36b      	cbz	r3, 8000aa6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a4c:	07da      	lsls	r2, r3, #31
 8000a4e:	d519      	bpl.n	8000a84 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8000a50:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8000a54:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000a56:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a60:	6813      	ldr	r3, [r2, #0]
 8000a62:	f023 0301 	bic.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000a68:	9b01      	ldr	r3, [sp, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	42bb      	cmp	r3, r7
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	d802      	bhi.n	8000a78 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a72:	6813      	ldr	r3, [r2, #0]
 8000a74:	07db      	lsls	r3, r3, #31
 8000a76:	d4f7      	bmi.n	8000a68 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000a84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a86:	e7c6      	b.n	8000a16 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a8e:	d108      	bne.n	8000aa2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	f021 0110 	bic.w	r1, r1, #16
 8000a96:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a98:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000a9a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000aa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000aa4:	e7cc      	b.n	8000a40 <HAL_DMA_IRQHandler+0x10c>
}
 8000aa6:	b003      	add	sp, #12
 8000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000000c 	.word	0x2000000c

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ab4:	2300      	movs	r3, #0
{
 8000ab6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab8:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000c8c <HAL_GPIO_Init+0x1dc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000abc:	4a71      	ldr	r2, [pc, #452]	; (8000c84 <HAL_GPIO_Init+0x1d4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000abe:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000c90 <HAL_GPIO_Init+0x1e0>
    ioposition = ((uint32_t)0x01) << position;
 8000ac2:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac4:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000ac6:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac8:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000acc:	ea37 0404 	bics.w	r4, r7, r4
 8000ad0:	f040 80be 	bne.w	8000c50 <HAL_GPIO_Init+0x1a0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad4:	684c      	ldr	r4, [r1, #4]
 8000ad6:	f024 0a10 	bic.w	sl, r4, #16
 8000ada:	f1ba 0f02 	cmp.w	sl, #2
 8000ade:	d116      	bne.n	8000b0e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 8000ae0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ae4:	f003 0b07 	and.w	fp, r3, #7
 8000ae8:	f04f 0c0f 	mov.w	ip, #15
 8000aec:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8000af0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000af4:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000af8:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000afc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b00:	690e      	ldr	r6, [r1, #16]
 8000b02:	fa06 f60b 	lsl.w	r6, r6, fp
 8000b06:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000b0a:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8000b0e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b12:	f04f 0c03 	mov.w	ip, #3
      temp = GPIOx->MODER;
 8000b16:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b1e:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b22:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b26:	ea6f 060c 	mvn.w	r6, ip
 8000b2a:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b2e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b32:	9601      	str	r6, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b34:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000b38:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000b3c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b40:	d815      	bhi.n	8000b6e <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 8000b42:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b46:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b4a:	68ce      	ldr	r6, [r1, #12]
 8000b4c:	fa06 fa0e 	lsl.w	sl, r6, lr
 8000b50:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8000b54:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b58:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5c:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b60:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000b64:	fa0c fc03 	lsl.w	ip, ip, r3
 8000b68:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8000b6c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b6e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b70:	9e01      	ldr	r6, [sp, #4]
 8000b72:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b74:	688e      	ldr	r6, [r1, #8]
 8000b76:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b7a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000b7c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7e:	00e6      	lsls	r6, r4, #3
 8000b80:	d566      	bpl.n	8000c50 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000b86:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b8a:	f003 0c03 	and.w	ip, r3, #3
 8000b8e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b96:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b9a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000ba2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000ba6:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000baa:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000bae:	9603      	str	r6, [sp, #12]
 8000bb0:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bb2:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8000bb6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bba:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bbe:	4e32      	ldr	r6, [pc, #200]	; (8000c88 <HAL_GPIO_Init+0x1d8>)
 8000bc0:	42b0      	cmp	r0, r6
 8000bc2:	d04c      	beq.n	8000c5e <HAL_GPIO_Init+0x1ae>
 8000bc4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bc8:	42b0      	cmp	r0, r6
 8000bca:	d04a      	beq.n	8000c62 <HAL_GPIO_Init+0x1b2>
 8000bcc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bd0:	42b0      	cmp	r0, r6
 8000bd2:	d048      	beq.n	8000c66 <HAL_GPIO_Init+0x1b6>
 8000bd4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bd8:	42b0      	cmp	r0, r6
 8000bda:	d046      	beq.n	8000c6a <HAL_GPIO_Init+0x1ba>
 8000bdc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000be0:	42b0      	cmp	r0, r6
 8000be2:	d044      	beq.n	8000c6e <HAL_GPIO_Init+0x1be>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d044      	beq.n	8000c72 <HAL_GPIO_Init+0x1c2>
 8000be8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000bec:	42b0      	cmp	r0, r6
 8000bee:	d042      	beq.n	8000c76 <HAL_GPIO_Init+0x1c6>
 8000bf0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bf4:	42b0      	cmp	r0, r6
 8000bf6:	d040      	beq.n	8000c7a <HAL_GPIO_Init+0x1ca>
 8000bf8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bfc:	42b0      	cmp	r0, r6
 8000bfe:	d03e      	beq.n	8000c7e <HAL_GPIO_Init+0x1ce>
 8000c00:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c04:	42b0      	cmp	r0, r6
 8000c06:	bf0c      	ite	eq
 8000c08:	2609      	moveq	r6, #9
 8000c0a:	260a      	movne	r6, #10
 8000c0c:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c10:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c14:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c18:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c1a:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000c1e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c20:	bf0c      	ite	eq
 8000c22:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c24:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c26:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000c2a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000c2c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c2e:	bf0c      	ite	eq
 8000c30:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c32:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c34:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000c38:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000c3a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	bf0c      	ite	eq
 8000c3e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c40:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c42:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000c44:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000c46:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c48:	bf54      	ite	pl
 8000c4a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000c4c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000c4e:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c50:	3301      	adds	r3, #1
 8000c52:	2b10      	cmp	r3, #16
 8000c54:	f47f af35 	bne.w	8000ac2 <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 8000c58:	b005      	add	sp, #20
 8000c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c5e:	2600      	movs	r6, #0
 8000c60:	e7d4      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c62:	2601      	movs	r6, #1
 8000c64:	e7d2      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c66:	2602      	movs	r6, #2
 8000c68:	e7d0      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c6a:	2603      	movs	r6, #3
 8000c6c:	e7ce      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c6e:	2604      	movs	r6, #4
 8000c70:	e7cc      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c72:	2605      	movs	r6, #5
 8000c74:	e7ca      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c76:	2606      	movs	r6, #6
 8000c78:	e7c8      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c7a:	2607      	movs	r6, #7
 8000c7c:	e7c6      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c7e:	2608      	movs	r6, #8
 8000c80:	e7c4      	b.n	8000c0c <HAL_GPIO_Init+0x15c>
 8000c82:	bf00      	nop
 8000c84:	40013c00 	.word	0x40013c00
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40021400 	.word	0x40021400

08000c94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c94:	b10a      	cbz	r2, 8000c9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c96:	6181      	str	r1, [r0, #24]
  }
}
 8000c98:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c9a:	0409      	lsls	r1, r1, #16
 8000c9c:	e7fb      	b.n	8000c96 <HAL_GPIO_WritePin+0x2>

08000c9e <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000ca2:	6951      	ldr	r1, [r2, #20]
 8000ca4:	4201      	tst	r1, r0
{
 8000ca6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ca8:	d002      	beq.n	8000cb0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000caa:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cac:	f7ff fff7 	bl	8000c9e <HAL_GPIO_EXTI_Callback>
}
 8000cb0:	bd08      	pop	{r3, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40013c00 	.word	0x40013c00

08000cb8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000cb8:	6803      	ldr	r3, [r0, #0]
 8000cba:	699a      	ldr	r2, [r3, #24]
 8000cbc:	0791      	lsls	r1, r2, #30
 8000cbe:	d501      	bpl.n	8000cc4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000cc4:	699a      	ldr	r2, [r3, #24]
 8000cc6:	07d2      	lsls	r2, r2, #31
 8000cc8:	d403      	bmi.n	8000cd2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000cca:	699a      	ldr	r2, [r3, #24]
 8000ccc:	f042 0201 	orr.w	r2, r2, #1
 8000cd0:	619a      	str	r2, [r3, #24]
  }
}
 8000cd2:	4770      	bx	lr

08000cd4 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000cd4:	f011 0301 	ands.w	r3, r1, #1
 8000cd8:	d007      	beq.n	8000cea <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000cda:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000cde:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000ce2:	2b28      	cmp	r3, #40	; 0x28
 8000ce4:	bf0c      	ite	eq
 8000ce6:	2342      	moveq	r3, #66	; 0x42
 8000ce8:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000cea:	078a      	lsls	r2, r1, #30
 8000cec:	d509      	bpl.n	8000d02 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000cee:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000cf2:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000cf6:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000cf8:	bf0c      	ite	eq
 8000cfa:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000cfe:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000d02:	074a      	lsls	r2, r1, #29
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000d04:	6801      	ldr	r1, [r0, #0]
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000d06:	bf48      	it	mi
 8000d08:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000d0c:	680a      	ldr	r2, [r1, #0]
 8000d0e:	ea22 0303 	bic.w	r3, r2, r3
 8000d12:	600b      	str	r3, [r1, #0]
}
 8000d14:	4770      	bx	lr

08000d16 <HAL_I2C_Init>:
{
 8000d16:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000d18:	4604      	mov	r4, r0
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d04a      	beq.n	8000db4 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d1e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d26:	b91b      	cbnz	r3, 8000d30 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000d28:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000d2c:	f002 fe98 	bl	8003a60 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d30:	2324      	movs	r3, #36	; 0x24
 8000d32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d40:	6862      	ldr	r2, [r4, #4]
 8000d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d46:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d4e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d50:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d54:	2901      	cmp	r1, #1
 8000d56:	d124      	bne.n	8000da2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d5c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d5e:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d60:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d62:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d6a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d72:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d74:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	69a1      	ldr	r1, [r4, #24]
 8000d7c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d80:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d82:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	f042 0201 	orr.w	r2, r2, #1
 8000d90:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000d92:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d94:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d9a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d9c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8000da0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000da2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000da6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000da8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000daa:	d1d8      	bne.n	8000d5e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	e7d4      	b.n	8000d5e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000db4:	2001      	movs	r0, #1
 8000db6:	e7f3      	b.n	8000da0 <HAL_I2C_Init+0x8a>

08000db8 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000db8:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8000dba:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000dbc:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000dbe:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8000dc0:	b103      	cbz	r3, 8000dc4 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000dc2:	4718      	bx	r3
}
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_I2C_SlaveTxCpltCallback>:
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_I2C_SlaveRxCpltCallback>:
 8000dc8:	4770      	bx	lr

08000dca <I2C_ITSlaveSeqCplt>:
{
 8000dca:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dcc:	2500      	movs	r5, #0
 8000dce:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000dd2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000dd6:	2b29      	cmp	r3, #41	; 0x29
 8000dd8:	d10c      	bne.n	8000df4 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000dda:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000ddc:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000dde:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000de2:	2321      	movs	r3, #33	; 0x21
 8000de4:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000de6:	f7ff ff75 	bl	8000cd4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000dea:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000dee:	f7ff ffea 	bl	8000dc6 <HAL_I2C_SlaveTxCpltCallback>
}
 8000df2:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000df4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000df8:	2b2a      	cmp	r3, #42	; 0x2a
 8000dfa:	d1fa      	bne.n	8000df2 <I2C_ITSlaveSeqCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000dfc:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000dfe:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000e00:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000e04:	2322      	movs	r3, #34	; 0x22
 8000e06:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000e08:	f7ff ff64 	bl	8000cd4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000e0c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000e10:	f7ff ffda 	bl	8000dc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8000e14:	e7ed      	b.n	8000df2 <I2C_ITSlaveSeqCplt+0x28>

08000e16 <HAL_I2C_AddrCallback>:
}
 8000e16:	4770      	bx	lr

08000e18 <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000e18:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000e1c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000e20:	2a28      	cmp	r2, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8000e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8000e24:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000e26:	d133      	bne.n	8000e90 <I2C_ITAddrCplt.constprop.0+0x78>
    transferdirection = I2C_GET_DIR(hi2c);
 8000e28:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e2a:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000e2c:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 8000e2e:	f3c6 4600 	ubfx	r6, r6, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e32:	2a02      	cmp	r2, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000e34:	6899      	ldr	r1, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000e36:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000e3a:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000e3c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e40:	d11e      	bne.n	8000e80 <I2C_ITAddrCplt.constprop.0+0x68>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000e42:	ea85 15d1 	eor.w	r5, r5, r1, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000e46:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000e4a:	f015 0506 	ands.w	r5, r5, #6
 8000e4e:	d10e      	bne.n	8000e6e <I2C_ITAddrCplt.constprop.0+0x56>
        hi2c->AddrEventCount++;
 8000e50:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000e52:	3101      	adds	r1, #1
 8000e54:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8000e56:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000e58:	2902      	cmp	r1, #2
 8000e5a:	d107      	bne.n	8000e6c <I2C_ITAddrCplt.constprop.0+0x54>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000e5c:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8000e5e:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000e60:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8000e62:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000e66:	4631      	mov	r1, r6
 8000e68:	f7ff ffd5 	bl	8000e16 <HAL_I2C_AddrCallback>
}
 8000e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000e6e:	2104      	movs	r1, #4
 8000e70:	f7ff ff30 	bl	8000cd4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8000e74:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000e76:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8000e7a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000e7e:	e7f2      	b.n	8000e66 <I2C_ITAddrCplt.constprop.0+0x4e>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8000e80:	2104      	movs	r1, #4
 8000e82:	f7ff ff27 	bl	8000cd4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8000e86:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000e88:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 8000e8a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000e8e:	e7ea      	b.n	8000e66 <I2C_ITAddrCplt.constprop.0+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000e90:	2208      	movs	r2, #8
 8000e92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8000e94:	2300      	movs	r3, #0
 8000e96:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8000e9a:	e7e7      	b.n	8000e6c <I2C_ITAddrCplt.constprop.0+0x54>

08000e9c <HAL_I2C_ListenCpltCallback>:
 8000e9c:	4770      	bx	lr
	...

08000ea0 <I2C_ITListenCplt>:
{
 8000ea0:	b508      	push	{r3, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <I2C_ITListenCplt+0x58>)
  hi2c->State = HAL_I2C_STATE_READY;
 8000ea4:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ea6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8000eac:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8000eae:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eb2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8000eb6:	074b      	lsls	r3, r1, #29
 8000eb8:	d512      	bpl.n	8000ee0 <I2C_ITListenCplt+0x40>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000eba:	6803      	ldr	r3, [r0, #0]
 8000ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ebe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ec0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8000ec2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8000ec8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8000eca:	b14b      	cbz	r3, 8000ee0 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8000ed0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000ed8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	f7ff fef7 	bl	8000cd4 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ee6:	6803      	ldr	r3, [r0, #0]
 8000ee8:	2210      	movs	r2, #16
 8000eea:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8000eec:	2300      	movs	r3, #0
 8000eee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8000ef2:	f7ff ffd3 	bl	8000e9c <HAL_I2C_ListenCpltCallback>
}
 8000ef6:	bd08      	pop	{r3, pc}
 8000ef8:	ffff0000 	.word	0xffff0000

08000efc <HAL_I2C_ErrorCallback>:
 8000efc:	4770      	bx	lr

08000efe <HAL_I2C_AbortCpltCallback>:
 8000efe:	4770      	bx	lr

08000f00 <I2C_ITError>:
{
 8000f00:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000f02:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <I2C_ITError+0xcc>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000f04:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8000f06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000f0a:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000f0c:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000f10:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8000f12:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8000f14:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8000f16:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000f18:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8000f1a:	ea41 0102 	orr.w	r1, r1, r2
 8000f1e:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8000f20:	d821      	bhi.n	8000f66 <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000f22:	2103      	movs	r1, #3
 8000f24:	f7ff fed6 	bl	8000cd4 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000f28:	2328      	movs	r3, #40	; 0x28
 8000f2a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8000f30:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8000f32:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000f38:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8000f3a:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8000f3e:	d01f      	beq.n	8000f80 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000f40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    if (hi2c->hdmatx != NULL)
 8000f44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8000f46:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d037      	beq.n	8000fbc <I2C_ITError+0xbc>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <I2C_ITError+0xd4>)
 8000f4e:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8000f50:	2300      	movs	r3, #0
 8000f52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000f56:	f7ff fcda 	bl	800090e <HAL_DMA_Abort_IT>
 8000f5a:	b378      	cbz	r0, 8000fbc <I2C_ITError+0xbc>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000f5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000f5e:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8000f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000f64:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8000f66:	2107      	movs	r1, #7
 8000f68:	f7ff feb4 	bl	8000cd4 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8000f6c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f70:	2b60      	cmp	r3, #96	; 0x60
 8000f72:	d002      	beq.n	8000f7a <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 8000f74:	2320      	movs	r3, #32
 8000f76:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	6323      	str	r3, [r4, #48]	; 0x30
 8000f7e:	e7d8      	b.n	8000f32 <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8000f80:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8000f84:	d00e      	beq.n	8000fa4 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000f86:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8000f88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8000f8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f8e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8000f90:	b1a0      	cbz	r0, 8000fbc <I2C_ITError+0xbc>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <I2C_ITError+0xd4>)
 8000f94:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8000f96:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000f9a:	f7ff fcb8 	bl	800090e <HAL_DMA_Abort_IT>
 8000f9e:	b168      	cbz	r0, 8000fbc <I2C_ITError+0xbc>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000fa0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000fa2:	e7dc      	b.n	8000f5e <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8000fa4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000fa8:	2b60      	cmp	r3, #96	; 0x60
 8000faa:	d108      	bne.n	8000fbe <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8000fac:	2320      	movs	r3, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8000fae:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8000fb0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000fb4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8000fb8:	f7ff ffa1 	bl	8000efe <HAL_I2C_AbortCpltCallback>
}
 8000fbc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8000fbe:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8000fc0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8000fc4:	f7ff ff9a 	bl	8000efc <HAL_I2C_ErrorCallback>
}
 8000fc8:	e7f8      	b.n	8000fbc <I2C_ITError+0xbc>
 8000fca:	bf00      	nop
 8000fcc:	ffff0000 	.word	0xffff0000
 8000fd0:	080010d1 	.word	0x080010d1
 8000fd4:	08001245 	.word	0x08001245

08000fd8 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8000fd8:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fda:	2220      	movs	r2, #32
{
 8000fdc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8000fde:	681e      	ldr	r6, [r3, #0]
{
 8000fe0:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fe2:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8000fe4:	2107      	movs	r1, #7
 8000fe6:	f7ff fe75 	bl	8000cd4 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000fea:	6803      	ldr	r3, [r0, #0]
{
 8000fec:	4604      	mov	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ff4:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000ffc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001000:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001004:	f022 0201 	bic.w	r2, r2, #1
 8001008:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800100a:	f7ff fe55 	bl	8000cb8 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800100e:	0471      	lsls	r1, r6, #17
 8001010:	d534      	bpl.n	800107c <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8001012:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8001014:	b11b      	cbz	r3, 800101e <I2C_ITSlaveCplt+0x46>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	b29b      	uxth	r3, r3
 800101c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800101e:	076b      	lsls	r3, r5, #29
 8001020:	d510      	bpl.n	8001044 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001022:	6823      	ldr	r3, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001024:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800102a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800102c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800102e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001034:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001036:	b12b      	cbz	r3, 8001044 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8001038:	3b01      	subs	r3, #1
 800103a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800103c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800103e:	3b01      	subs	r3, #1
 8001040:	b29b      	uxth	r3, r3
 8001042:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8001044:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001046:	b29b      	uxth	r3, r3
 8001048:	b11b      	cbz	r3, 8001052 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800104a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8001052:	2300      	movs	r3, #0
 8001054:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001056:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800105a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800105c:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800105e:	b18e      	cbz	r6, 8001084 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001060:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001062:	4620      	mov	r0, r4
 8001064:	f7ff ff4c 	bl	8000f00 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001068:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800106c:	2b28      	cmp	r3, #40	; 0x28
 800106e:	d11a      	bne.n	80010a6 <I2C_ITSlaveCplt+0xce>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001070:	4629      	mov	r1, r5
 8001072:	4620      	mov	r0, r4
}
 8001074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001078:	f7ff bf12 	b.w	8000ea0 <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800107c:	0432      	lsls	r2, r6, #16
 800107e:	d5ce      	bpl.n	800101e <I2C_ITSlaveCplt+0x46>
    if (hi2c->hdmarx != NULL)
 8001080:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001082:	e7c7      	b.n	8001014 <I2C_ITSlaveCplt+0x3c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001086:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800108a:	d00d      	beq.n	80010a8 <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 800108c:	4620      	mov	r0, r4
 800108e:	f7ff fe9c 	bl	8000dca <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <I2C_ITSlaveCplt+0xf4>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8001094:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8001096:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800109a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800109c:	2320      	movs	r3, #32
 800109e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 80010a2:	f7ff fefb 	bl	8000e9c <HAL_I2C_ListenCpltCallback>
}
 80010a6:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80010a8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80010ac:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80010ae:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80010b2:	2b22      	cmp	r3, #34	; 0x22
 80010b4:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 80010b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80010bc:	d102      	bne.n	80010c4 <I2C_ITSlaveCplt+0xec>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80010be:	f7ff fe83 	bl	8000dc8 <HAL_I2C_SlaveRxCpltCallback>
 80010c2:	e7f0      	b.n	80010a6 <I2C_ITSlaveCplt+0xce>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80010c4:	f7ff fe7f 	bl	8000dc6 <HAL_I2C_SlaveTxCpltCallback>
}
 80010c8:	e7ed      	b.n	80010a6 <I2C_ITSlaveCplt+0xce>
 80010ca:	bf00      	nop
 80010cc:	ffff0000 	.word	0xffff0000

080010d0 <I2C_Slave_ISR_IT>:
{
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 80010d4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
{
 80010d8:	4604      	mov	r4, r0
 80010da:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 80010dc:	2a01      	cmp	r2, #1
  uint32_t tmpoptions = hi2c->XferOptions;
 80010de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80010e0:	d07e      	beq.n	80011e0 <I2C_Slave_ISR_IT+0x110>
 80010e2:	2201      	movs	r2, #1
 80010e4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80010e8:	06ca      	lsls	r2, r1, #27
 80010ea:	d538      	bpl.n	800115e <I2C_Slave_ISR_IT+0x8e>
 80010ec:	06f2      	lsls	r2, r6, #27
 80010ee:	d536      	bpl.n	800115e <I2C_Slave_ISR_IT+0x8e>
    if (hi2c->XferCount == 0U)
 80010f0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80010f2:	b292      	uxth	r2, r2
 80010f4:	bb2a      	cbnz	r2, 8001142 <I2C_Slave_ISR_IT+0x72>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80010f6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80010fa:	2a28      	cmp	r2, #40	; 0x28
 80010fc:	d110      	bne.n	8001120 <I2C_Slave_ISR_IT+0x50>
 80010fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001102:	d10d      	bne.n	8001120 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001104:	f7ff fecc 	bl	8000ea0 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001108:	06aa      	lsls	r2, r5, #26
 800110a:	d505      	bpl.n	8001118 <I2C_Slave_ISR_IT+0x48>
 800110c:	06b3      	lsls	r3, r6, #26
 800110e:	d503      	bpl.n	8001118 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001110:	4629      	mov	r1, r5
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff ff60 	bl	8000fd8 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8001118:	2000      	movs	r0, #0
 800111a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800111e:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001120:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001124:	6822      	ldr	r2, [r4, #0]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001126:	2929      	cmp	r1, #41	; 0x29
 8001128:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800112c:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800112e:	d1eb      	bne.n	8001108 <I2C_Slave_ISR_IT+0x38>
 8001130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001134:	d0e8      	beq.n	8001108 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8001136:	4620      	mov	r0, r4
 8001138:	f7ff fdbe 	bl	8000cb8 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800113c:	f7ff fe45 	bl	8000dca <I2C_ITSlaveSeqCplt>
 8001140:	e7e2      	b.n	8001108 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001142:	6802      	ldr	r2, [r0, #0]
 8001144:	2110      	movs	r1, #16
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001146:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800114a:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800114c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800114e:	f042 0204 	orr.w	r2, r2, #4
 8001152:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001154:	d1d8      	bne.n	8001108 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001156:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001158:	f7ff fed2 	bl	8000f00 <I2C_ITError>
 800115c:	e7d4      	b.n	8001108 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800115e:	076a      	lsls	r2, r5, #29
 8001160:	d51d      	bpl.n	800119e <I2C_Slave_ISR_IT+0xce>
 8001162:	0770      	lsls	r0, r6, #29
 8001164:	d51b      	bpl.n	800119e <I2C_Slave_ISR_IT+0xce>
    if (hi2c->XferCount > 0U)
 8001166:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001168:	b292      	uxth	r2, r2
 800116a:	b17a      	cbz	r2, 800118c <I2C_Slave_ISR_IT+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800116c:	6822      	ldr	r2, [r4, #0]
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800116e:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001172:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001174:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001176:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8001178:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800117a:	3201      	adds	r2, #1
 800117c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800117e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001180:	3a01      	subs	r2, #1
 8001182:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001184:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001186:	3a01      	subs	r2, #1
 8001188:	b292      	uxth	r2, r2
 800118a:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800118c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800118e:	b292      	uxth	r2, r2
 8001190:	2a00      	cmp	r2, #0
 8001192:	d1b9      	bne.n	8001108 <I2C_Slave_ISR_IT+0x38>
 8001194:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001198:	d0b6      	beq.n	8001108 <I2C_Slave_ISR_IT+0x38>
        I2C_ITSlaveSeqCplt(hi2c);
 800119a:	4620      	mov	r0, r4
 800119c:	e7ce      	b.n	800113c <I2C_Slave_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800119e:	0729      	lsls	r1, r5, #28
 80011a0:	d505      	bpl.n	80011ae <I2C_Slave_ISR_IT+0xde>
 80011a2:	0732      	lsls	r2, r6, #28
 80011a4:	d503      	bpl.n	80011ae <I2C_Slave_ISR_IT+0xde>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80011a6:	4620      	mov	r0, r4
 80011a8:	f7ff fe36 	bl	8000e18 <I2C_ITAddrCplt.constprop.0>
 80011ac:	e7ac      	b.n	8001108 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80011ae:	07a8      	lsls	r0, r5, #30
 80011b0:	d5aa      	bpl.n	8001108 <I2C_Slave_ISR_IT+0x38>
 80011b2:	07b1      	lsls	r1, r6, #30
 80011b4:	d5a8      	bpl.n	8001108 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 80011b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80011b8:	b292      	uxth	r2, r2
 80011ba:	b16a      	cbz	r2, 80011d8 <I2C_Slave_ISR_IT+0x108>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011be:	6822      	ldr	r2, [r4, #0]
 80011c0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80011c4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80011c6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80011c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011ca:	3b01      	subs	r3, #1
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011d2:	3b01      	subs	r3, #1
 80011d4:	8523      	strh	r3, [r4, #40]	; 0x28
 80011d6:	e797      	b.n	8001108 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80011d8:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 80011dc:	d194      	bne.n	8001108 <I2C_Slave_ISR_IT+0x38>
 80011de:	e7dc      	b.n	800119a <I2C_Slave_ISR_IT+0xca>
  __HAL_LOCK(hi2c);
 80011e0:	2002      	movs	r0, #2
 80011e2:	e79c      	b.n	800111e <I2C_Slave_ISR_IT+0x4e>

080011e4 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80011e4:	6803      	ldr	r3, [r0, #0]
 80011e6:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80011e8:	681a      	ldr	r2, [r3, #0]
{
 80011ea:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80011ec:	05cc      	lsls	r4, r1, #23
 80011ee:	d508      	bpl.n	8001202 <HAL_I2C_ER_IRQHandler+0x1e>
 80011f0:	0614      	lsls	r4, r2, #24
 80011f2:	d506      	bpl.n	8001202 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80011f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80011f6:	f044 0401 	orr.w	r4, r4, #1
 80011fa:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80011fc:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001200:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001202:	054c      	lsls	r4, r1, #21
 8001204:	d508      	bpl.n	8001218 <HAL_I2C_ER_IRQHandler+0x34>
 8001206:	0614      	lsls	r4, r2, #24
 8001208:	d506      	bpl.n	8001218 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800120a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800120c:	f044 0408 	orr.w	r4, r4, #8
 8001210:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001212:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001216:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001218:	0589      	lsls	r1, r1, #22
 800121a:	d508      	bpl.n	800122e <HAL_I2C_ER_IRQHandler+0x4a>
 800121c:	0612      	lsls	r2, r2, #24
 800121e:	d506      	bpl.n	800122e <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001220:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001222:	f042 0202 	orr.w	r2, r2, #2
 8001226:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122c:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800122e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001230:	f011 0f0b 	tst.w	r1, #11
 8001234:	d003      	beq.n	800123e <HAL_I2C_ER_IRQHandler+0x5a>
}
 8001236:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 800123a:	f7ff be61 	b.w	8000f00 <I2C_ITError>
}
 800123e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001242:	4770      	bx	lr

08001244 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001244:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001246:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001248:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800124a:	2300      	movs	r3, #0
 800124c:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800124e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001250:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001252:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001256:	2b60      	cmp	r3, #96	; 0x60
 8001258:	d105      	bne.n	8001266 <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 800125a:	2320      	movs	r3, #32
 800125c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001260:	f7ff fe4d 	bl	8000efe <HAL_I2C_AbortCpltCallback>
}
 8001264:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8001266:	f7ff fe49 	bl	8000efc <HAL_I2C_ErrorCallback>
}
 800126a:	e7fb      	b.n	8001264 <I2C_DMAAbort+0x20>

0800126c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800126c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001272:	2b20      	cmp	r3, #32
 8001274:	b2dc      	uxtb	r4, r3
 8001276:	d11d      	bne.n	80012b4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001278:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800127c:	2b01      	cmp	r3, #1
 800127e:	d019      	beq.n	80012b4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001280:	2324      	movs	r3, #36	; 0x24
 8001282:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001286:	6803      	ldr	r3, [r0, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001296:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4311      	orrs	r1, r2
 800129c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	f042 0201 	orr.w	r2, r2, #1
 80012a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012a6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80012a8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012ac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80012b0:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80012b2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80012b4:	2002      	movs	r0, #2
 80012b6:	e7fc      	b.n	80012b2 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080012b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012b8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80012be:	2b20      	cmp	r3, #32
 80012c0:	b2dc      	uxtb	r4, r3
 80012c2:	d11c      	bne.n	80012fe <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d018      	beq.n	80012fe <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012cc:	2324      	movs	r3, #36	; 0x24
 80012ce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012d2:	6803      	ldr	r3, [r0, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012dc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012de:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012e2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012e6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012f0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80012f2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012f6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80012fa:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80012fc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80012fe:	2002      	movs	r0, #2
 8001300:	e7fc      	b.n	80012fc <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08001304 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001306:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800130a:	4c19      	ldr	r4, [pc, #100]	; (8001370 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001322:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001324:	f7ff f9a2 	bl	800066c <HAL_GetTick>
 8001328:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	03da      	lsls	r2, r3, #15
 800132e:	d50c      	bpl.n	800134a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001330:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001332:	4d0f      	ldr	r5, [pc, #60]	; (8001370 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800133a:	f7ff f997 	bl	800066c <HAL_GetTick>
 800133e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001340:	686b      	ldr	r3, [r5, #4]
 8001342:	039b      	lsls	r3, r3, #14
 8001344:	d50a      	bpl.n	800135c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001346:	2000      	movs	r0, #0
 8001348:	e006      	b.n	8001358 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800134a:	f7ff f98f 	bl	800066c <HAL_GetTick>
 800134e:	1b40      	subs	r0, r0, r5
 8001350:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001354:	d9e9      	bls.n	800132a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001356:	2003      	movs	r0, #3
}
 8001358:	b003      	add	sp, #12
 800135a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800135c:	f7ff f986 	bl	800066c <HAL_GetTick>
 8001360:	1b00      	subs	r0, r0, r4
 8001362:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001366:	d9eb      	bls.n	8001340 <HAL_PWREx_EnableOverDrive+0x3c>
 8001368:	e7f5      	b.n	8001356 <HAL_PWREx_EnableOverDrive+0x52>
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000

08001374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001378:	4604      	mov	r4, r0
 800137a:	b918      	cbnz	r0, 8001384 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800137c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800137e:	b002      	add	sp, #8
 8001380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001384:	6803      	ldr	r3, [r0, #0]
 8001386:	07db      	lsls	r3, r3, #31
 8001388:	d410      	bmi.n	80013ac <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	079f      	lsls	r7, r3, #30
 800138e:	d461      	bmi.n	8001454 <HAL_RCC_OscConfig+0xe0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	0719      	lsls	r1, r3, #28
 8001394:	f100 80a8 	bmi.w	80014e8 <HAL_RCC_OscConfig+0x174>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	075a      	lsls	r2, r3, #29
 800139c:	f100 80c9 	bmi.w	8001532 <HAL_RCC_OscConfig+0x1be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a0:	69a2      	ldr	r2, [r4, #24]
 80013a2:	2a00      	cmp	r2, #0
 80013a4:	f040 8132 	bne.w	800160c <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 80013a8:	2000      	movs	r0, #0
 80013aa:	e7e8      	b.n	800137e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ac:	4b95      	ldr	r3, [pc, #596]	; (8001604 <HAL_RCC_OscConfig+0x290>)
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	f002 020c 	and.w	r2, r2, #12
 80013b4:	2a04      	cmp	r2, #4
 80013b6:	d007      	beq.n	80013c8 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	f002 020c 	and.w	r2, r2, #12
 80013be:	2a08      	cmp	r2, #8
 80013c0:	d10a      	bne.n	80013d8 <HAL_RCC_OscConfig+0x64>
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	0256      	lsls	r6, r2, #9
 80013c6:	d507      	bpl.n	80013d8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	4b8e      	ldr	r3, [pc, #568]	; (8001604 <HAL_RCC_OscConfig+0x290>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	039d      	lsls	r5, r3, #14
 80013ce:	d5dc      	bpl.n	800138a <HAL_RCC_OscConfig+0x16>
 80013d0:	6863      	ldr	r3, [r4, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1d9      	bne.n	800138a <HAL_RCC_OscConfig+0x16>
 80013d6:	e7d1      	b.n	800137c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d8:	6862      	ldr	r2, [r4, #4]
 80013da:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80013de:	d111      	bne.n	8001404 <HAL_RCC_OscConfig+0x90>
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013e8:	f7ff f940 	bl	800066c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ec:	4e85      	ldr	r6, [pc, #532]	; (8001604 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80013ee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f0:	6833      	ldr	r3, [r6, #0]
 80013f2:	0398      	lsls	r0, r3, #14
 80013f4:	d4c9      	bmi.n	800138a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f6:	f7ff f939 	bl	800066c <HAL_GetTick>
 80013fa:	1b40      	subs	r0, r0, r5
 80013fc:	2864      	cmp	r0, #100	; 0x64
 80013fe:	d9f7      	bls.n	80013f0 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8001400:	2003      	movs	r0, #3
 8001402:	e7bc      	b.n	800137e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	4d7f      	ldr	r5, [pc, #508]	; (8001604 <HAL_RCC_OscConfig+0x290>)
 8001406:	682b      	ldr	r3, [r5, #0]
 8001408:	b992      	cbnz	r2, 8001430 <HAL_RCC_OscConfig+0xbc>
 800140a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140e:	602b      	str	r3, [r5, #0]
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001418:	f7ff f928 	bl	800066c <HAL_GetTick>
 800141c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141e:	682b      	ldr	r3, [r5, #0]
 8001420:	0399      	lsls	r1, r3, #14
 8001422:	d5b2      	bpl.n	800138a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff f922 	bl	800066c <HAL_GetTick>
 8001428:	1b80      	subs	r0, r0, r6
 800142a:	2864      	cmp	r0, #100	; 0x64
 800142c:	d9f7      	bls.n	800141e <HAL_RCC_OscConfig+0xaa>
 800142e:	e7e7      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001430:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001434:	d107      	bne.n	8001446 <HAL_RCC_OscConfig+0xd2>
 8001436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143a:	602b      	str	r3, [r5, #0]
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001442:	602b      	str	r3, [r5, #0]
 8001444:	e7d0      	b.n	80013e8 <HAL_RCC_OscConfig+0x74>
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	602b      	str	r3, [r5, #0]
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	e7f6      	b.n	8001442 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001454:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <HAL_RCC_OscConfig+0x290>)
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	f012 0f0c 	tst.w	r2, #12
 800145c:	d007      	beq.n	800146e <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	f002 020c 	and.w	r2, r2, #12
 8001464:	2a08      	cmp	r2, #8
 8001466:	d112      	bne.n	800148e <HAL_RCC_OscConfig+0x11a>
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	0252      	lsls	r2, r2, #9
 800146c:	d40f      	bmi.n	800148e <HAL_RCC_OscConfig+0x11a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	4a65      	ldr	r2, [pc, #404]	; (8001604 <HAL_RCC_OscConfig+0x290>)
 8001470:	6813      	ldr	r3, [r2, #0]
 8001472:	079b      	lsls	r3, r3, #30
 8001474:	d503      	bpl.n	800147e <HAL_RCC_OscConfig+0x10a>
 8001476:	68e3      	ldr	r3, [r4, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	f47f af7f 	bne.w	800137c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147e:	6813      	ldr	r3, [r2, #0]
 8001480:	6921      	ldr	r1, [r4, #16]
 8001482:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001486:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800148a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148c:	e780      	b.n	8001390 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800148e:	68e2      	ldr	r2, [r4, #12]
 8001490:	b1c2      	cbz	r2, 80014c4 <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_HSI_ENABLE();
 8001492:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4d5b      	ldr	r5, [pc, #364]	; (8001604 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800149c:	f7ff f8e6 	bl	800066c <HAL_GetTick>
 80014a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	682b      	ldr	r3, [r5, #0]
 80014a4:	079f      	lsls	r7, r3, #30
 80014a6:	d507      	bpl.n	80014b8 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	682b      	ldr	r3, [r5, #0]
 80014aa:	6922      	ldr	r2, [r4, #16]
 80014ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014b4:	602b      	str	r3, [r5, #0]
 80014b6:	e76b      	b.n	8001390 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff f8d8 	bl	800066c <HAL_GetTick>
 80014bc:	1b80      	subs	r0, r0, r6
 80014be:	2802      	cmp	r0, #2
 80014c0:	d9ef      	bls.n	80014a2 <HAL_RCC_OscConfig+0x12e>
 80014c2:	e79d      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 80014c4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4e4f      	ldr	r6, [pc, #316]	; (8001604 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_DISABLE();
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014ce:	f7ff f8cd 	bl	800066c <HAL_GetTick>
 80014d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d4:	6833      	ldr	r3, [r6, #0]
 80014d6:	0798      	lsls	r0, r3, #30
 80014d8:	f57f af5a 	bpl.w	8001390 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff f8c6 	bl	800066c <HAL_GetTick>
 80014e0:	1b40      	subs	r0, r0, r5
 80014e2:	2802      	cmp	r0, #2
 80014e4:	d9f6      	bls.n	80014d4 <HAL_RCC_OscConfig+0x160>
 80014e6:	e78b      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014e8:	6963      	ldr	r3, [r4, #20]
 80014ea:	4d46      	ldr	r5, [pc, #280]	; (8001604 <HAL_RCC_OscConfig+0x290>)
 80014ec:	b183      	cbz	r3, 8001510 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_LSI_ENABLE();
 80014ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80014f6:	f7ff f8b9 	bl	800066c <HAL_GetTick>
 80014fa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80014fe:	079b      	lsls	r3, r3, #30
 8001500:	f53f af4a 	bmi.w	8001398 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff f8b2 	bl	800066c <HAL_GetTick>
 8001508:	1b80      	subs	r0, r0, r6
 800150a:	2802      	cmp	r0, #2
 800150c:	d9f6      	bls.n	80014fc <HAL_RCC_OscConfig+0x188>
 800150e:	e777      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8001510:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001518:	f7ff f8a8 	bl	800066c <HAL_GetTick>
 800151c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001520:	079f      	lsls	r7, r3, #30
 8001522:	f57f af39 	bpl.w	8001398 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001526:	f7ff f8a1 	bl	800066c <HAL_GetTick>
 800152a:	1b80      	subs	r0, r0, r6
 800152c:	2802      	cmp	r0, #2
 800152e:	d9f6      	bls.n	800151e <HAL_RCC_OscConfig+0x1aa>
 8001530:	e766      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b34      	ldr	r3, [pc, #208]	; (8001604 <HAL_RCC_OscConfig+0x290>)
 8001534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001536:	00d0      	lsls	r0, r2, #3
 8001538:	d427      	bmi.n	800158a <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800153c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154e:	4d2e      	ldr	r5, [pc, #184]	; (8001608 <HAL_RCC_OscConfig+0x294>)
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	05d9      	lsls	r1, r3, #23
 8001554:	d51b      	bpl.n	800158e <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001556:	68a3      	ldr	r3, [r4, #8]
 8001558:	4d2a      	ldr	r5, [pc, #168]	; (8001604 <HAL_RCC_OscConfig+0x290>)
 800155a:	2b01      	cmp	r3, #1
 800155c:	d127      	bne.n	80015ae <HAL_RCC_OscConfig+0x23a>
 800155e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800156a:	f7ff f87f 	bl	800066c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	4e25      	ldr	r6, [pc, #148]	; (8001604 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001570:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001574:	079b      	lsls	r3, r3, #30
 8001576:	d53f      	bpl.n	80015f8 <HAL_RCC_OscConfig+0x284>
    if(pwrclkchanged == SET)
 8001578:	2f00      	cmp	r7, #0
 800157a:	f43f af11 	beq.w	80013a0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800157e:	4a21      	ldr	r2, [pc, #132]	; (8001604 <HAL_RCC_OscConfig+0x290>)
 8001580:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
 8001588:	e70a      	b.n	80013a0 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800158a:	2700      	movs	r7, #0
 800158c:	e7df      	b.n	800154e <HAL_RCC_OscConfig+0x1da>
      PWR->CR1 |= PWR_CR1_DBP;
 800158e:	682b      	ldr	r3, [r5, #0]
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001596:	f7ff f869 	bl	800066c <HAL_GetTick>
 800159a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159c:	682b      	ldr	r3, [r5, #0]
 800159e:	05da      	lsls	r2, r3, #23
 80015a0:	d4d9      	bmi.n	8001556 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff f863 	bl	800066c <HAL_GetTick>
 80015a6:	1b80      	subs	r0, r0, r6
 80015a8:	2864      	cmp	r0, #100	; 0x64
 80015aa:	d9f7      	bls.n	800159c <HAL_RCC_OscConfig+0x228>
 80015ac:	e728      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ae:	b9ab      	cbnz	r3, 80015dc <HAL_RCC_OscConfig+0x268>
 80015b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	672b      	str	r3, [r5, #112]	; 0x70
 80015bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015be:	f023 0304 	bic.w	r3, r3, #4
 80015c2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80015c4:	f7ff f852 	bl	800066c <HAL_GetTick>
 80015c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015cc:	0798      	lsls	r0, r3, #30
 80015ce:	d5d3      	bpl.n	8001578 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff f84c 	bl	800066c <HAL_GetTick>
 80015d4:	1b80      	subs	r0, r0, r6
 80015d6:	4540      	cmp	r0, r8
 80015d8:	d9f7      	bls.n	80015ca <HAL_RCC_OscConfig+0x256>
 80015da:	e711      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	2b05      	cmp	r3, #5
 80015de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015e0:	d103      	bne.n	80015ea <HAL_RCC_OscConfig+0x276>
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	672b      	str	r3, [r5, #112]	; 0x70
 80015e8:	e7b9      	b.n	800155e <HAL_RCC_OscConfig+0x1ea>
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	672b      	str	r3, [r5, #112]	; 0x70
 80015f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015f2:	f023 0304 	bic.w	r3, r3, #4
 80015f6:	e7b5      	b.n	8001564 <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff f838 	bl	800066c <HAL_GetTick>
 80015fc:	1b40      	subs	r0, r0, r5
 80015fe:	4540      	cmp	r0, r8
 8001600:	d9b7      	bls.n	8001572 <HAL_RCC_OscConfig+0x1fe>
 8001602:	e6fd      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800160c:	4d24      	ldr	r5, [pc, #144]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
 800160e:	68ab      	ldr	r3, [r5, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	f43f aeb1 	beq.w	800137c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800161a:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800161e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001622:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001624:	d12f      	bne.n	8001686 <HAL_RCC_OscConfig+0x312>
        tickstart = HAL_GetTick();
 8001626:	f7ff f821 	bl	800066c <HAL_GetTick>
 800162a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	0199      	lsls	r1, r3, #6
 8001630:	d423      	bmi.n	800167a <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001632:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001636:	4313      	orrs	r3, r2
 8001638:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800163a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800163e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001640:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001644:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001646:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800164a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800164c:	0852      	lsrs	r2, r2, #1
 800164e:	3a01      	subs	r2, #1
 8001650:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001654:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001656:	682b      	ldr	r3, [r5, #0]
 8001658:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800165e:	f7ff f805 	bl	800066c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4d0f      	ldr	r5, [pc, #60]	; (80016a0 <HAL_RCC_OscConfig+0x32c>)
        tickstart = HAL_GetTick();
 8001664:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	019a      	lsls	r2, r3, #6
 800166a:	f53f ae9d 	bmi.w	80013a8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166e:	f7fe fffd 	bl	800066c <HAL_GetTick>
 8001672:	1b00      	subs	r0, r0, r4
 8001674:	2802      	cmp	r0, #2
 8001676:	d9f6      	bls.n	8001666 <HAL_RCC_OscConfig+0x2f2>
 8001678:	e6c2      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167a:	f7fe fff7 	bl	800066c <HAL_GetTick>
 800167e:	1b80      	subs	r0, r0, r6
 8001680:	2802      	cmp	r0, #2
 8001682:	d9d3      	bls.n	800162c <HAL_RCC_OscConfig+0x2b8>
 8001684:	e6bc      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001686:	f7fe fff1 	bl	800066c <HAL_GetTick>
 800168a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	019b      	lsls	r3, r3, #6
 8001690:	f57f ae8a 	bpl.w	80013a8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001694:	f7fe ffea 	bl	800066c <HAL_GetTick>
 8001698:	1b00      	subs	r0, r0, r4
 800169a:	2802      	cmp	r0, #2
 800169c:	d9f6      	bls.n	800168c <HAL_RCC_OscConfig+0x318>
 800169e:	e6af      	b.n	8001400 <HAL_RCC_OscConfig+0x8c>
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a4:	4913      	ldr	r1, [pc, #76]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80016a6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a8:	688b      	ldr	r3, [r1, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d01b      	beq.n	80016ea <HAL_RCC_GetSysClockFreq+0x46>
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d11b      	bne.n	80016ee <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80016b8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ba:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80016c0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80016c8:	bf1a      	itte	ne
 80016ca:	480b      	ldrne	r0, [pc, #44]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80016cc:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ce:	480b      	ldreq	r0, [pc, #44]	; (80016fc <HAL_RCC_GetSysClockFreq+0x58>)
 80016d0:	fba1 0100 	umull	r0, r1, r1, r0
 80016d4:	f7fe fe0c 	bl	80002f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80016e0:	3301      	adds	r3, #1
 80016e2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80016e4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80016e8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ea:	4803      	ldr	r0, [pc, #12]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80016ec:	e7fc      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80016f0:	e7fa      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x44>
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	017d7840 	.word	0x017d7840
 80016fc:	00f42400 	.word	0x00f42400

08001700 <HAL_RCC_ClockConfig>:
{
 8001700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001704:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001706:	4604      	mov	r4, r0
 8001708:	b910      	cbnz	r0, 8001710 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800170a:	2001      	movs	r0, #1
}
 800170c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001710:	4a45      	ldr	r2, [pc, #276]	; (8001828 <HAL_RCC_ClockConfig+0x128>)
 8001712:	6813      	ldr	r3, [r2, #0]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	428b      	cmp	r3, r1
 800171a:	d327      	bcc.n	800176c <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	6822      	ldr	r2, [r4, #0]
 800171e:	0797      	lsls	r7, r2, #30
 8001720:	d42f      	bmi.n	8001782 <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	07d0      	lsls	r0, r2, #31
 8001724:	d443      	bmi.n	80017ae <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001726:	4a40      	ldr	r2, [pc, #256]	; (8001828 <HAL_RCC_ClockConfig+0x128>)
 8001728:	6813      	ldr	r3, [r2, #0]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	42ab      	cmp	r3, r5
 8001730:	d866      	bhi.n	8001800 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001732:	6822      	ldr	r2, [r4, #0]
 8001734:	0751      	lsls	r1, r2, #29
 8001736:	d46f      	bmi.n	8001818 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001738:	0713      	lsls	r3, r2, #28
 800173a:	d507      	bpl.n	800174c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800173c:	4a3b      	ldr	r2, [pc, #236]	; (800182c <HAL_RCC_ClockConfig+0x12c>)
 800173e:	6921      	ldr	r1, [r4, #16]
 8001740:	6893      	ldr	r3, [r2, #8]
 8001742:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001746:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800174a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800174c:	f7ff ffaa 	bl	80016a4 <HAL_RCC_GetSysClockFreq>
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_RCC_ClockConfig+0x12c>)
 8001752:	4a37      	ldr	r2, [pc, #220]	; (8001830 <HAL_RCC_ClockConfig+0x130>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	40d8      	lsrs	r0, r3
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <HAL_RCC_ClockConfig+0x134>)
 8001760:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001762:	2000      	movs	r0, #0
 8001764:	f7fe ff46 	bl	80005f4 <HAL_InitTick>
  return HAL_OK;
 8001768:	2000      	movs	r0, #0
 800176a:	e7cf      	b.n	800170c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176c:	6813      	ldr	r3, [r2, #0]
 800176e:	f023 030f 	bic.w	r3, r3, #15
 8001772:	430b      	orrs	r3, r1
 8001774:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	6813      	ldr	r3, [r2, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	428b      	cmp	r3, r1
 800177e:	d1c4      	bne.n	800170a <HAL_RCC_ClockConfig+0xa>
 8001780:	e7cc      	b.n	800171c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001782:	f012 0f04 	tst.w	r2, #4
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <HAL_RCC_ClockConfig+0x12c>)
 8001788:	d003      	beq.n	8001792 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8001790:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001792:	0716      	lsls	r6, r2, #28
 8001794:	d503      	bpl.n	800179e <HAL_RCC_ClockConfig+0x9e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001796:	6899      	ldr	r1, [r3, #8]
 8001798:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800179c:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179e:	4923      	ldr	r1, [pc, #140]	; (800182c <HAL_RCC_ClockConfig+0x12c>)
 80017a0:	68a0      	ldr	r0, [r4, #8]
 80017a2:	688b      	ldr	r3, [r1, #8]
 80017a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017a8:	4303      	orrs	r3, r0
 80017aa:	608b      	str	r3, [r1, #8]
 80017ac:	e7b9      	b.n	8001722 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	6861      	ldr	r1, [r4, #4]
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_RCC_ClockConfig+0x12c>)
 80017b2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b4:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	d11b      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	d0a5      	beq.n	800170a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c4:	4f19      	ldr	r7, [pc, #100]	; (800182c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	f022 0203 	bic.w	r2, r2, #3
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80017ce:	f7fe ff4d 	bl	800066c <HAL_GetTick>
 80017d2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	6862      	ldr	r2, [r4, #4]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017e0:	d0a1      	beq.n	8001726 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e2:	f7fe ff43 	bl	800066c <HAL_GetTick>
 80017e6:	1b80      	subs	r0, r0, r6
 80017e8:	4540      	cmp	r0, r8
 80017ea:	d9f3      	bls.n	80017d4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80017ec:	2003      	movs	r0, #3
 80017ee:	e78d      	b.n	800170c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f0:	2902      	cmp	r1, #2
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017f8:	e7e0      	b.n	80017bc <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	f012 0f02 	tst.w	r2, #2
 80017fe:	e7dd      	b.n	80017bc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001800:	6813      	ldr	r3, [r2, #0]
 8001802:	f023 030f 	bic.w	r3, r3, #15
 8001806:	432b      	orrs	r3, r5
 8001808:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	6813      	ldr	r3, [r2, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	42ab      	cmp	r3, r5
 8001812:	f47f af7a 	bne.w	800170a <HAL_RCC_ClockConfig+0xa>
 8001816:	e78c      	b.n	8001732 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4904      	ldr	r1, [pc, #16]	; (800182c <HAL_RCC_ClockConfig+0x12c>)
 800181a:	68e0      	ldr	r0, [r4, #12]
 800181c:	688b      	ldr	r3, [r1, #8]
 800181e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001822:	4303      	orrs	r3, r0
 8001824:	608b      	str	r3, [r1, #8]
 8001826:	e787      	b.n	8001738 <HAL_RCC_ClockConfig+0x38>
 8001828:	40023c00 	.word	0x40023c00
 800182c:	40023800 	.word	0x40023800
 8001830:	08007576 	.word	0x08007576
 8001834:	2000000c 	.word	0x2000000c

08001838 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001838:	6803      	ldr	r3, [r0, #0]
{
 800183a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800183e:	f013 0601 	ands.w	r6, r3, #1
{
 8001842:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001844:	d00b      	beq.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001846:	4ab3      	ldr	r2, [pc, #716]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001848:	6891      	ldr	r1, [r2, #8]
 800184a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800184e:	6091      	str	r1, [r2, #8]
 8001850:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001852:	6891      	ldr	r1, [r2, #8]
 8001854:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001856:	fab6 f686 	clz	r6, r6
 800185a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800185c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800185e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001862:	d012      	beq.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001864:	49ab      	ldr	r1, [pc, #684]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001866:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001868:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800186c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001870:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001874:	bf08      	it	eq
 8001876:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001878:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800187c:	bf16      	itet	ne
 800187e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001882:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001884:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001886:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800188a:	02df      	lsls	r7, r3, #11
 800188c:	d510      	bpl.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800188e:	48a1      	ldr	r0, [pc, #644]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001890:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001892:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001896:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800189a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800189e:	ea42 0201 	orr.w	r2, r2, r1
 80018a2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018a6:	f000 81a7 	beq.w	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80018aa:	2900      	cmp	r1, #0
 80018ac:	bf08      	it	eq
 80018ae:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80018b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80018b4:	bf18      	it	ne
 80018b6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018b8:	0698      	lsls	r0, r3, #26
 80018ba:	d531      	bpl.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	4b95      	ldr	r3, [pc, #596]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018be:	4f96      	ldr	r7, [pc, #600]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018da:	f7fe fec7 	bl	800066c <HAL_GetTick>
 80018de:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	05d9      	lsls	r1, r3, #23
 80018e4:	f140 818a 	bpl.w	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018e8:	4f8a      	ldr	r7, [pc, #552]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80018ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018ec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018f0:	f040 818f 	bne.w	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018f6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80018fa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80018fe:	4a85      	ldr	r2, [pc, #532]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001900:	f040 81ad 	bne.w	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8001904:	6891      	ldr	r1, [r2, #8]
 8001906:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800190a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800190e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001912:	4301      	orrs	r1, r0
 8001914:	6091      	str	r1, [r2, #8]
 8001916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800191c:	430b      	orrs	r3, r1
 800191e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	06df      	lsls	r7, r3, #27
 8001924:	d50c      	bpl.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001926:	4a7b      	ldr	r2, [pc, #492]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001928:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800192c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001930:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001934:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001938:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800193a:	4301      	orrs	r1, r0
 800193c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001940:	0458      	lsls	r0, r3, #17
 8001942:	d508      	bpl.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001944:	4973      	ldr	r1, [pc, #460]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001946:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001948:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800194c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001950:	4302      	orrs	r2, r0
 8001952:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001956:	0419      	lsls	r1, r3, #16
 8001958:	d508      	bpl.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800195a:	496e      	ldr	r1, [pc, #440]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800195c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800195e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001962:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001966:	4302      	orrs	r2, r0
 8001968:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800196c:	03da      	lsls	r2, r3, #15
 800196e:	d508      	bpl.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001970:	4968      	ldr	r1, [pc, #416]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001972:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001974:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001978:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800197c:	4302      	orrs	r2, r0
 800197e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001982:	039f      	lsls	r7, r3, #14
 8001984:	d508      	bpl.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001986:	4963      	ldr	r1, [pc, #396]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001988:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800198a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800198e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001992:	4302      	orrs	r2, r0
 8001994:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001998:	0658      	lsls	r0, r3, #25
 800199a:	d508      	bpl.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800199c:	495d      	ldr	r1, [pc, #372]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800199e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80019a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019a4:	f022 0203 	bic.w	r2, r2, #3
 80019a8:	4302      	orrs	r2, r0
 80019aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019ae:	0619      	lsls	r1, r3, #24
 80019b0:	d508      	bpl.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019b2:	4958      	ldr	r1, [pc, #352]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80019b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80019b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019ba:	f022 020c 	bic.w	r2, r2, #12
 80019be:	4302      	orrs	r2, r0
 80019c0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019c4:	05da      	lsls	r2, r3, #23
 80019c6:	d508      	bpl.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019c8:	4952      	ldr	r1, [pc, #328]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80019ca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80019cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019d0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80019d4:	4302      	orrs	r2, r0
 80019d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019da:	059f      	lsls	r7, r3, #22
 80019dc:	d508      	bpl.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80019de:	494d      	ldr	r1, [pc, #308]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80019e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80019e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80019ea:	4302      	orrs	r2, r0
 80019ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80019f0:	0558      	lsls	r0, r3, #21
 80019f2:	d508      	bpl.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80019f4:	4947      	ldr	r1, [pc, #284]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80019f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80019fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a00:	4302      	orrs	r2, r0
 8001a02:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001a06:	0519      	lsls	r1, r3, #20
 8001a08:	d508      	bpl.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001a0a:	4942      	ldr	r1, [pc, #264]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a0e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001a16:	4302      	orrs	r2, r0
 8001a18:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001a1c:	04da      	lsls	r2, r3, #19
 8001a1e:	d508      	bpl.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001a20:	493c      	ldr	r1, [pc, #240]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a22:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001a24:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a28:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a2c:	4302      	orrs	r2, r0
 8001a2e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001a32:	049f      	lsls	r7, r3, #18
 8001a34:	d508      	bpl.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001a36:	4937      	ldr	r1, [pc, #220]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a38:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001a3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a3e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a42:	4302      	orrs	r2, r0
 8001a44:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a48:	0258      	lsls	r0, r3, #9
 8001a4a:	d508      	bpl.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a4c:	4931      	ldr	r1, [pc, #196]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a4e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001a50:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a54:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001a58:	4302      	orrs	r2, r0
 8001a5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a5e:	0299      	lsls	r1, r3, #10
 8001a60:	d50c      	bpl.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a62:	482c      	ldr	r0, [pc, #176]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a64:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001a66:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001a6a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a6e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001a72:	bf08      	it	eq
 8001a74:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a76:	430a      	orrs	r2, r1
 8001a78:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001a7c:	f013 0f08 	tst.w	r3, #8
 8001a80:	bf18      	it	ne
 8001a82:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a84:	035a      	lsls	r2, r3, #13
 8001a86:	d508      	bpl.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a88:	4922      	ldr	r1, [pc, #136]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001a8a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001a8c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001a90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a94:	4302      	orrs	r2, r0
 8001a96:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001a9a:	021f      	lsls	r7, r3, #8
 8001a9c:	d509      	bpl.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a9e:	491d      	ldr	r1, [pc, #116]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001aa0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001aa4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001aa8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001aac:	4302      	orrs	r2, r0
 8001aae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ab2:	0158      	lsls	r0, r3, #5
 8001ab4:	d509      	bpl.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001ab6:	4917      	ldr	r1, [pc, #92]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001ab8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001abc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ac0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001ac4:	4302      	orrs	r2, r0
 8001ac6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001aca:	0119      	lsls	r1, r3, #4
 8001acc:	d509      	bpl.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001ad0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001ad4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001ad8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001adc:	4302      	orrs	r2, r0
 8001ade:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001ae2:	00da      	lsls	r2, r3, #3
 8001ae4:	f140 813d 	bpl.w	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001aea:	2e01      	cmp	r6, #1
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001aec:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001af0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001af4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001af8:	ea43 0301 	orr.w	r3, r3, r1
 8001afc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b00:	f000 80b1 	beq.w	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001b04:	2d01      	cmp	r5, #1
 8001b06:	d175      	bne.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b08:	4d02      	ldr	r5, [pc, #8]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b10:	e004      	b.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b1e:	f7fe fda5 	bl	800066c <HAL_GetTick>
 8001b22:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	009f      	lsls	r7, r3, #2
 8001b28:	f100 8128 	bmi.w	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x544>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001b2c:	6822      	ldr	r2, [r4, #0]
 8001b2e:	0316      	lsls	r6, r2, #12
 8001b30:	d501      	bpl.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8001b32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b34:	b11b      	cbz	r3, 8001b3e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8001b36:	02d0      	lsls	r0, r2, #11
 8001b38:	d51c      	bpl.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b3c:	b9d3      	cbnz	r3, 8001b74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b3e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b42:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b4a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	6961      	ldr	r1, [r4, #20]
 8001b52:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001b56:	69a1      	ldr	r1, [r4, #24]
 8001b58:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001b5c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001b60:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001b64:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b66:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001b6a:	3901      	subs	r1, #1
 8001b6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b70:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001b74:	0291      	lsls	r1, r2, #10
 8001b76:	d515      	bpl.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8001b78:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b7e:	d111      	bne.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b80:	4985      	ldr	r1, [pc, #532]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001b82:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b86:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001b8a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b8e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b92:	4303      	orrs	r3, r0
 8001b94:	6960      	ldr	r0, [r4, #20]
 8001b96:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b9a:	6a20      	ldr	r0, [r4, #32]
 8001b9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ba4:	0712      	lsls	r2, r2, #28
 8001ba6:	d519      	bpl.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ba8:	4a7b      	ldr	r2, [pc, #492]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001baa:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001bae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001bb2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	6961      	ldr	r1, [r4, #20]
 8001bbe:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001bc2:	69e1      	ldr	r1, [r4, #28]
 8001bc4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001bcc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001bd0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bd2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001bdc:	4c6e      	ldr	r4, [pc, #440]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be6:	f7fe fd41 	bl	800066c <HAL_GetTick>
 8001bea:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	f140 80cb 	bpl.w	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x552>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	e009      	b.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 8001bf8:	2601      	movs	r6, #1
 8001bfa:	e659      	b.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfc:	f7fe fd36 	bl	800066c <HAL_GetTick>
 8001c00:	eba0 0008 	sub.w	r0, r0, r8
 8001c04:	2864      	cmp	r0, #100	; 0x64
 8001c06:	f67f ae6b 	bls.w	80018e0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001c0a:	2003      	movs	r0, #3
}
 8001c0c:	b003      	add	sp, #12
 8001c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c14:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f43f ae6b 	beq.w	80018f4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c2a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c32:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001c34:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c38:	07da      	lsls	r2, r3, #31
 8001c3a:	f57f ae5b 	bpl.w	80018f4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001c3e:	f7fe fd15 	bl	800066c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c46:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c4a:	079b      	lsls	r3, r3, #30
 8001c4c:	f53f ae52 	bmi.w	80018f4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7fe fd0c 	bl	800066c <HAL_GetTick>
 8001c54:	eba0 0008 	sub.w	r0, r0, r8
 8001c58:	4548      	cmp	r0, r9
 8001c5a:	d9f5      	bls.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8001c5c:	e7d5      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c5e:	6891      	ldr	r1, [r2, #8]
 8001c60:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c64:	e656      	b.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001c66:	4e4c      	ldr	r6, [pc, #304]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001c68:	6833      	ldr	r3, [r6, #0]
 8001c6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c6e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001c70:	f7fe fcfc 	bl	800066c <HAL_GetTick>
 8001c74:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c76:	6833      	ldr	r3, [r6, #0]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	d478      	bmi.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001c7c:	6822      	ldr	r2, [r4, #0]
 8001c7e:	07d7      	lsls	r7, r2, #31
 8001c80:	d512      	bpl.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8001c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c84:	b983      	cbnz	r3, 8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c86:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c8a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c92:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001c96:	430b      	orrs	r3, r1
 8001c98:	6861      	ldr	r1, [r4, #4]
 8001c9a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001c9e:	68a1      	ldr	r1, [r4, #8]
 8001ca0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001ca4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ca8:	0316      	lsls	r6, r2, #12
 8001caa:	d503      	bpl.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001cac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8001cb4:	02d0      	lsls	r0, r2, #11
 8001cb6:	d51e      	bpl.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cbe:	d11a      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001cc0:	4935      	ldr	r1, [pc, #212]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001cc2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cc6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cce:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001cd2:	4303      	orrs	r3, r0
 8001cd4:	6860      	ldr	r0, [r4, #4]
 8001cd6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001cda:	68e0      	ldr	r0, [r4, #12]
 8001cdc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001ce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ce4:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cea:	f020 001f 	bic.w	r0, r0, #31
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	4303      	orrs	r3, r0
 8001cf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cf6:	01d1      	lsls	r1, r2, #7
 8001cf8:	d511      	bpl.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cfa:	4927      	ldr	r1, [pc, #156]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001cfc:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d00:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d04:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001d08:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001d0c:	4303      	orrs	r3, r0
 8001d0e:	6860      	ldr	r0, [r4, #4]
 8001d10:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d14:	6920      	ldr	r0, [r4, #16]
 8001d16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001d1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d1e:	0192      	lsls	r2, r2, #6
 8001d20:	d50d      	bpl.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d22:	6923      	ldr	r3, [r4, #16]
 8001d24:	6862      	ldr	r2, [r4, #4]
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d2c:	68e2      	ldr	r2, [r4, #12]
 8001d2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d32:	68a2      	ldr	r2, [r4, #8]
 8001d34:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001d3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001d3e:	4e16      	ldr	r6, [pc, #88]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001d40:	6833      	ldr	r3, [r6, #0]
 8001d42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d46:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001d48:	f7fe fc90 	bl	800066c <HAL_GetTick>
 8001d4c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d4e:	6833      	ldr	r3, [r6, #0]
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	f53f aed7 	bmi.w	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d56:	f7fe fc89 	bl	800066c <HAL_GetTick>
 8001d5a:	1bc0      	subs	r0, r0, r7
 8001d5c:	2864      	cmp	r0, #100	; 0x64
 8001d5e:	d9f6      	bls.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001d60:	e753      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001d62:	2e01      	cmp	r6, #1
 8001d64:	f43f af7f 	beq.w	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d6c:	e6c8      	b.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d6e:	f7fe fc7d 	bl	800066c <HAL_GetTick>
 8001d72:	1bc0      	subs	r0, r0, r7
 8001d74:	2864      	cmp	r0, #100	; 0x64
 8001d76:	f67f af7e 	bls.w	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8001d7a:	e746      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d7c:	f7fe fc76 	bl	800066c <HAL_GetTick>
 8001d80:	1b80      	subs	r0, r0, r6
 8001d82:	2864      	cmp	r0, #100	; 0x64
 8001d84:	f67f aece 	bls.w	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8001d88:	e73f      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d8a:	f7fe fc6f 	bl	800066c <HAL_GetTick>
 8001d8e:	1b40      	subs	r0, r0, r5
 8001d90:	2864      	cmp	r0, #100	; 0x64
 8001d92:	f67f af2b 	bls.w	8001bec <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8001d96:	e738      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8001d9c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8001da0:	d131      	bne.n	8001e06 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8001da2:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001da4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8001da8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8001dac:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001db0:	d05f      	beq.n	8001e72 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001db2:	d806      	bhi.n	8001dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8001db4:	2a00      	cmp	r2, #0
 8001db6:	d039      	beq.n	8001e2c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8001db8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8001dbc:	d051      	beq.n	8001e62 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    default :
      {
        break;
      }
    }
  }
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	4770      	bx	lr
    switch (saiclocksource)
 8001dc2:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
    switch (saiclocksource)
 8001dc6:	d1fa      	bne.n	8001dbe <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001dc8:	685b      	ldr	r3, [r3, #4]
          frequency = HSI_VALUE;
 8001dca:	482c      	ldr	r0, [pc, #176]	; (8001e7c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001dcc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8001dd2:	bf08      	it	eq
 8001dd4:	4618      	moveq	r0, r3
 8001dd6:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001dd8:	4828      	ldr	r0, [pc, #160]	; (8001e7c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8001dda:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001ddc:	fbb0 f3f3 	udiv	r3, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8001de0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8001de4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8001de8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001dec:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8001dee:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8001df2:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8001df6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8001e00:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8001e04:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8001e06:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8001e0a:	d1d8      	bne.n	8001dbe <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    saiclocksource = RCC->DCKCFGR1;
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001e0e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8001e12:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8001e16:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8001e1a:	d02a      	beq.n	8001e72 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001e1c:	d803      	bhi.n	8001e26 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 8001e1e:	b12a      	cbz	r2, 8001e2c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8001e20:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001e24:	e7ca      	b.n	8001dbc <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 8001e26:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001e2a:	e7cc      	b.n	8001dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001e2c:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001e2e:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001e30:	0251      	lsls	r1, r2, #9
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e38:	bf54      	ite	pl
 8001e3a:	4811      	ldrpl	r0, [pc, #68]	; (8001e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001e3c:	480f      	ldrmi	r0, [pc, #60]	; (8001e7c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8001e3e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8001e42:	fbb0 f3f3 	udiv	r3, r0, r3
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8001e46:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8001e4a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001e4e:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8001e50:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8001e54:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8001e58:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e5c:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8001e60:	e7cd      	b.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001e62:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001e64:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001e66:	0252      	lsls	r2, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8001e6c:	d4b4      	bmi.n	8001dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001e6e:	4804      	ldr	r0, [pc, #16]	; (8001e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8001e70:	e7b3      	b.n	8001dda <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8001e72:	4804      	ldr	r0, [pc, #16]	; (8001e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)

  return frequency;
}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	017d7840 	.word	0x017d7840
 8001e80:	00f42400 	.word	0x00f42400
 8001e84:	01770000 	.word	0x01770000

08001e88 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <SAI_Disable.isra.0+0x34>)
 8001e8a:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8001e94:	6802      	ldr	r2, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8001e96:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8001e98:	6811      	ldr	r1, [r2, #0]
 8001e9a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001e9e:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	d206      	bcs.n	8001eb2 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8001ea4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8001ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eac:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
 8001eb0:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8001eb2:	6811      	ldr	r1, [r2, #0]
 8001eb4:	03c9      	lsls	r1, r1, #15
 8001eb6:	d4f3      	bmi.n	8001ea0 <SAI_Disable.isra.0+0x18>

  return status;
}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	2000000c 	.word	0x2000000c

08001ec0 <HAL_SAI_Init>:
{
 8001ec0:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	f000 80c6 	beq.w	8002056 <HAL_SAI_Init+0x196>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8001eca:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8001ece:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ed2:	b91b      	cbnz	r3, 8001edc <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8001ed4:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8001ed8:	f001 ff44 	bl	8003d64 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8001edc:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8001ede:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8001ee0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8001ee4:	f7ff ffd0 	bl	8001e88 <SAI_Disable.isra.0>
  switch(hsai->Init.SynchroExt)
 8001ee8:	68e3      	ldr	r3, [r4, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f000 80a1 	beq.w	8002032 <HAL_SAI_Init+0x172>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	bf14      	ite	ne
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	2320      	moveq	r3, #32
  switch(hsai->Init.Synchro)
 8001ef8:	68a2      	ldr	r2, [r4, #8]
 8001efa:	2a02      	cmp	r2, #2
 8001efc:	f000 809d 	beq.w	800203a <HAL_SAI_Init+0x17a>
 8001f00:	2a03      	cmp	r2, #3
 8001f02:	f000 8098 	beq.w	8002036 <HAL_SAI_Init+0x176>
 8001f06:	2a01      	cmp	r2, #1
 8001f08:	bf14      	ite	ne
 8001f0a:	2500      	movne	r5, #0
 8001f0c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8001f10:	6822      	ldr	r2, [r4, #0]
 8001f12:	4952      	ldr	r1, [pc, #328]	; (800205c <HAL_SAI_Init+0x19c>)
 8001f14:	4852      	ldr	r0, [pc, #328]	; (8002060 <HAL_SAI_Init+0x1a0>)
 8001f16:	428a      	cmp	r2, r1
 8001f18:	d003      	beq.n	8001f22 <HAL_SAI_Init+0x62>
 8001f1a:	4e52      	ldr	r6, [pc, #328]	; (8002064 <HAL_SAI_Init+0x1a4>)
 8001f1c:	42b2      	cmp	r2, r6
 8001f1e:	f040 808f 	bne.w	8002040 <HAL_SAI_Init+0x180>
    SAI1->GCR = tmpregisterGCR;
 8001f22:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8001f26:	69e3      	ldr	r3, [r4, #28]
 8001f28:	b313      	cbz	r3, 8001f70 <HAL_SAI_Init+0xb0>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8001f2a:	428a      	cmp	r2, r1
 8001f2c:	d003      	beq.n	8001f36 <HAL_SAI_Init+0x76>
 8001f2e:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_SAI_Init+0x1a4>)
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 8088 	bne.w	8002046 <HAL_SAI_Init+0x186>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8001f36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f3a:	f7ff ff2f 	bl	8001d9c <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	4a49      	ldr	r2, [pc, #292]	; (8002068 <HAL_SAI_Init+0x1a8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d002      	beq.n	8001f4c <HAL_SAI_Init+0x8c>
 8001f46:	3220      	adds	r2, #32
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d103      	bne.n	8001f54 <HAL_SAI_Init+0x94>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8001f4c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f50:	f7ff ff24 	bl	8001d9c <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8001f54:	220a      	movs	r2, #10
 8001f56:	69e3      	ldr	r3, [r4, #28]
 8001f58:	4350      	muls	r0, r2
 8001f5a:	025b      	lsls	r3, r3, #9
 8001f5c:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8001f60:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8001f64:	fb02 0013 	mls	r0, r2, r3, r0
 8001f68:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 8001f6a:	bf08      	it	eq
 8001f6c:	3301      	addeq	r3, #1
 8001f6e:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8001f70:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8001f72:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8001f74:	f033 0102 	bics.w	r1, r3, #2
 8001f78:	d167      	bne.n	800204a <HAL_SAI_Init+0x18a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8001f7a:	2a01      	cmp	r2, #1
 8001f7c:	bf18      	it	ne
 8001f7e:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	4839      	ldr	r0, [pc, #228]	; (800206c <HAL_SAI_Init+0x1ac>)
 8001f86:	6816      	ldr	r6, [r2, #0]
 8001f88:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8001f8a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001f8c:	4333      	orrs	r3, r6
 8001f8e:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8001f90:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8001f92:	4333      	orrs	r3, r6
 8001f94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001f96:	6810      	ldr	r0, [r2, #0]
 8001f98:	4333      	orrs	r3, r6
 8001f9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001f9c:	4333      	orrs	r3, r6
 8001f9e:	6926      	ldr	r6, [r4, #16]
 8001fa0:	4333      	orrs	r3, r6
 8001fa2:	6966      	ldr	r6, [r4, #20]
 8001fa4:	4333      	orrs	r3, r6
 8001fa6:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8001fa8:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8001faa:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8001fae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8001fb0:	432b      	orrs	r3, r5
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8001fb6:	6853      	ldr	r3, [r2, #4]
 8001fb8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001fbc:	f023 030f 	bic.w	r3, r3, #15
 8001fc0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8001fc2:	69a3      	ldr	r3, [r4, #24]
 8001fc4:	6851      	ldr	r1, [r2, #4]
 8001fc6:	4303      	orrs	r3, r0
 8001fc8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001fca:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8001fcc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_SAI_Init+0x1b0>)
 8001fd4:	6891      	ldr	r1, [r2, #8]
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8001fda:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001fdc:	6891      	ldr	r1, [r2, #8]
 8001fde:	4303      	orrs	r3, r0
 8001fe0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001fe8:	3901      	subs	r1, #1
 8001fea:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8001fec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001fee:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8001ff0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ff4:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8001ff6:	68d3      	ldr	r3, [r2, #12]
 8001ff8:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8001ffc:	f023 030f 	bic.w	r3, r3, #15
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	0c1b      	lsrs	r3, r3, #16
 8002004:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002006:	68d1      	ldr	r1, [r2, #12]
 8002008:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 800200c:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800200e:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002010:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002012:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002014:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002018:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800201a:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800201c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002020:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8002022:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002024:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8002028:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 800202c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8002030:	bd70      	pop	{r4, r5, r6, pc}
  switch(hsai->Init.SynchroExt)
 8002032:	2310      	movs	r3, #16
 8002034:	e760      	b.n	8001ef8 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8002036:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800203a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800203e:	e767      	b.n	8001f10 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8002040:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
 8002044:	e76f      	b.n	8001f26 <HAL_SAI_Init+0x66>
    uint32_t freq = 0;
 8002046:	2000      	movs	r0, #0
 8002048:	e779      	b.n	8001f3e <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800204a:	2a01      	cmp	r2, #1
 800204c:	bf14      	ite	ne
 800204e:	2100      	movne	r1, #0
 8002050:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8002054:	e795      	b.n	8001f82 <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 8002056:	2001      	movs	r0, #1
 8002058:	e7ea      	b.n	8002030 <HAL_SAI_Init+0x170>
 800205a:	bf00      	nop
 800205c:	40015804 	.word	0x40015804
 8002060:	40015000 	.word	0x40015000
 8002064:	40015824 	.word	0x40015824
 8002068:	40015c04 	.word	0x40015c04
 800206c:	ff05c010 	.word	0xff05c010
 8002070:	fff88000 	.word	0xfff88000

08002074 <HAL_SAI_InitProtocol>:
  switch(protocol)
 8002074:	2902      	cmp	r1, #2
{
 8002076:	b430      	push	{r4, r5}
  switch(protocol)
 8002078:	d905      	bls.n	8002086 <HAL_SAI_InitProtocol+0x12>
 800207a:	1ecc      	subs	r4, r1, #3
 800207c:	2c01      	cmp	r4, #1
 800207e:	d95b      	bls.n	8002138 <HAL_SAI_InitProtocol+0xc4>
}
 8002080:	2001      	movs	r0, #1
 8002082:	bc30      	pop	{r4, r5}
 8002084:	4770      	bx	lr
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002086:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002088:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800208a:	65c3      	str	r3, [r0, #92]	; 0x5c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800208c:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002090:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8002092:	6384      	str	r4, [r0, #56]	; 0x38
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002094:	bf14      	ite	ne
 8002096:	2501      	movne	r5, #1
 8002098:	4625      	moveq	r5, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 800209a:	6544      	str	r4, [r0, #84]	; 0x54
  if((nbslot & 0x1) != 0 )
 800209c:	f013 0401 	ands.w	r4, r3, #1
 80020a0:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80020a2:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80020a6:	6485      	str	r5, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80020a8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80020ac:	6605      	str	r5, [r0, #96]	; 0x60
  if((nbslot & 0x1) != 0 )
 80020ae:	d1e7      	bne.n	8002080 <HAL_SAI_InitProtocol+0xc>
  switch(protocol)
 80020b0:	1e4d      	subs	r5, r1, #1
 80020b2:	2d01      	cmp	r5, #1
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80020b4:	bf93      	iteet	ls
 80020b6:	f44f 3500 	movls.w	r5, #131072	; 0x20000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80020ba:	64c4      	strhi	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80020bc:	f44f 2480 	movhi.w	r4, #262144	; 0x40000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80020c0:	64c5      	strls	r5, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80020c2:	6504      	str	r4, [r0, #80]	; 0x50
  switch(datasize)
 80020c4:	2a03      	cmp	r2, #3
 80020c6:	d8db      	bhi.n	8002080 <HAL_SAI_InitProtocol+0xc>
 80020c8:	e8df f002 	tbb	[pc, r2]
 80020cc:	2d1d0c02 	.word	0x2d1d0c02
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80020d0:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 80020d2:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80020d4:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 80020d6:	015a      	lsls	r2, r3, #5
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 80020d8:	011b      	lsls	r3, r3, #4
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 80020da:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 80020dc:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80020de:	2340      	movs	r3, #64	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80020e0:	6583      	str	r3, [r0, #88]	; 0x58
  if(status == HAL_OK)
 80020e2:	e00d      	b.n	8002100 <HAL_SAI_InitProtocol+0x8c>
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80020e4:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80020e6:	2280      	movs	r2, #128	; 0x80
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 80020e8:	2902      	cmp	r1, #2
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80020ea:	ea4f 1483 	mov.w	r4, r3, lsl #6
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80020ee:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80020f0:	ea4f 1343 	mov.w	r3, r3, lsl #5
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80020f4:	6582      	str	r2, [r0, #88]	; 0x58
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80020f6:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80020f8:	6443      	str	r3, [r0, #68]	; 0x44
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 80020fa:	d101      	bne.n	8002100 <HAL_SAI_InitProtocol+0x8c>
      hsai->SlotInit.FirstBitOffset = 16;
 80020fc:	2310      	movs	r3, #16
      hsai->SlotInit.FirstBitOffset = 8;
 80020fe:	6543      	str	r3, [r0, #84]	; 0x54
}
 8002100:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 8002102:	f7ff bedd 	b.w	8001ec0 <HAL_SAI_Init>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002106:	22c0      	movs	r2, #192	; 0xc0
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002108:	085b      	lsrs	r3, r3, #1
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 800210a:	2902      	cmp	r1, #2
    hsai->Init.DataSize = SAI_DATASIZE_24;
 800210c:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800210e:	ea4f 1283 	mov.w	r2, r3, lsl #6
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002112:	ea4f 1343 	mov.w	r3, r3, lsl #5
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002116:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002118:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800211a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800211e:	6583      	str	r3, [r0, #88]	; 0x58
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 8002120:	d1ee      	bne.n	8002100 <HAL_SAI_InitProtocol+0x8c>
      hsai->SlotInit.FirstBitOffset = 8;
 8002122:	2308      	movs	r3, #8
 8002124:	e7eb      	b.n	80020fe <HAL_SAI_InitProtocol+0x8a>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002126:	22e0      	movs	r2, #224	; 0xe0
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002128:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800212a:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800212c:	019a      	lsls	r2, r3, #6
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800212e:	015b      	lsls	r3, r3, #5
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002130:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002132:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	e7d3      	b.n	80020e0 <HAL_SAI_InitProtocol+0x6c>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002138:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800213a:	2400      	movs	r4, #0
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800213c:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
  hsai->SlotInit.SlotNumber      = nbslot;
 8002140:	65c3      	str	r3, [r0, #92]	; 0x5c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002142:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002146:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8002148:	6384      	str	r4, [r0, #56]	; 0x38
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800214a:	bf14      	ite	ne
 800214c:	4625      	movne	r5, r4
 800214e:	2501      	moveq	r5, #1
    hsai->FrameInit.ActiveFrameLength = 13;
 8002150:	2904      	cmp	r1, #4
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8002152:	6484      	str	r4, [r0, #72]	; 0x48
 8002154:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8002156:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    hsai->FrameInit.ActiveFrameLength = 13;
 800215a:	bf0c      	ite	eq
 800215c:	2101      	moveq	r1, #1
 800215e:	210d      	movne	r1, #13
  hsai->SlotInit.FirstBitOffset  = 0;
 8002160:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8002162:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002166:	6441      	str	r1, [r0, #68]	; 0x44
 8002168:	6604      	str	r4, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800216a:	e9c0 c513 	strd	ip, r5, [r0, #76]	; 0x4c
  switch(datasize)
 800216e:	2a03      	cmp	r2, #3
 8002170:	d886      	bhi.n	8002080 <HAL_SAI_InitProtocol+0xc>
 8002172:	e8df f002 	tbb	[pc, r2]
 8002176:	0702      	.short	0x0702
 8002178:	120d      	.short	0x120d
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800217a:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 16 * nbslot;
 800217c:	011b      	lsls	r3, r3, #4
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800217e:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 8002180:	6403      	str	r3, [r0, #64]	; 0x40
 8002182:	e7ac      	b.n	80020de <HAL_SAI_InitProtocol+0x6a>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002184:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002186:	015b      	lsls	r3, r3, #5
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002188:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800218a:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800218c:	6582      	str	r2, [r0, #88]	; 0x58
  if(status == HAL_OK)
 800218e:	e7b7      	b.n	8002100 <HAL_SAI_InitProtocol+0x8c>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002190:	22c0      	movs	r2, #192	; 0xc0
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002192:	015b      	lsls	r3, r3, #5
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002194:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002196:	6403      	str	r3, [r0, #64]	; 0x40
 8002198:	e7cc      	b.n	8002134 <HAL_SAI_InitProtocol+0xc0>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800219a:	22e0      	movs	r2, #224	; 0xe0
 800219c:	e7f9      	b.n	8002192 <HAL_SAI_InitProtocol+0x11e>

0800219e <SPI_WaitFifoStateUntilTimeout.part.0>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800219e:	6803      	ldr	r3, [r0, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a8:	6842      	ldr	r2, [r0, #4]
 80021aa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80021ae:	d10a      	bne.n	80021c6 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
 80021b0:	6882      	ldr	r2, [r0, #8]
 80021b2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80021b6:	d002      	beq.n	80021be <SPI_WaitFifoStateUntilTimeout.part.0+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80021bc:	d103      	bne.n	80021c6 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80021c8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80021cc:	d107      	bne.n	80021de <SPI_WaitFifoStateUntilTimeout.part.0+0x40>
        {
          SPI_RESET_CRC(hspi);
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021de:	2301      	movs	r3, #1
 80021e0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021e4:	2300      	movs	r3, #0
 80021e6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80021ea:	2003      	movs	r0, #3
 80021ec:	4770      	bx	lr

080021ee <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80021ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f0:	4605      	mov	r5, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	4616      	mov	r6, r2
 80021f6:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 80021f8:	682b      	ldr	r3, [r5, #0]
 80021fa:	6898      	ldr	r0, [r3, #8]
 80021fc:	4020      	ands	r0, r4
 80021fe:	d100      	bne.n	8002202 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x14>
      }
    }
  }

  return HAL_OK;
}
 8002200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002202:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002206:	d100      	bne.n	800220a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002208:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 800220a:	1c72      	adds	r2, r6, #1
 800220c:	d0f5      	beq.n	80021fa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800220e:	f7fe fa2d 	bl	800066c <HAL_GetTick>
 8002212:	1bc0      	subs	r0, r0, r7
 8002214:	4286      	cmp	r6, r0
 8002216:	d8ef      	bhi.n	80021f8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa>
 8002218:	4628      	mov	r0, r5
}
 800221a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800221e:	f7ff bfbe 	b.w	800219e <SPI_WaitFifoStateUntilTimeout.part.0>

08002222 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002222:	b570      	push	{r4, r5, r6, lr}
 8002224:	4604      	mov	r4, r0
 8002226:	460d      	mov	r5, r1
 8002228:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	6890      	ldr	r0, [r2, #8]
 800222e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002232:	d100      	bne.n	8002236 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x14>
}
 8002234:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002236:	1c6b      	adds	r3, r5, #1
 8002238:	d0f8      	beq.n	800222c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800223a:	f7fe fa17 	bl	800066c <HAL_GetTick>
 800223e:	1b80      	subs	r0, r0, r6
 8002240:	4285      	cmp	r5, r0
 8002242:	d8f2      	bhi.n	800222a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8>
 8002244:	4620      	mov	r0, r4
}
 8002246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800224a:	f7ff bfa8 	b.w	800219e <SPI_WaitFifoStateUntilTimeout.part.0>

0800224e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800224e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002250:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002252:	9201      	str	r2, [sp, #4]
{
 8002254:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002256:	460a      	mov	r2, r1
 8002258:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800225c:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800225e:	f7ff ffc6 	bl	80021ee <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002262:	9b01      	ldr	r3, [sp, #4]
 8002264:	b128      	cbz	r0, 8002272 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002266:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002268:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800226a:	f043 0320 	orr.w	r3, r3, #32
 800226e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002270:	e010      	b.n	8002294 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002272:	461a      	mov	r2, r3
 8002274:	4629      	mov	r1, r5
 8002276:	4620      	mov	r0, r4
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	f7ff ffd2 	bl	8002222 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800227e:	9b01      	ldr	r3, [sp, #4]
 8002280:	2800      	cmp	r0, #0
 8002282:	d1f0      	bne.n	8002266 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002284:	462a      	mov	r2, r5
 8002286:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff ffaf 	bl	80021ee <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002290:	2800      	cmp	r0, #0
 8002292:	d1e8      	bne.n	8002266 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8002294:	b003      	add	sp, #12
 8002296:	bd30      	pop	{r4, r5, pc}

08002298 <HAL_SPI_Init>:
{
 8002298:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800229a:	4604      	mov	r4, r0
 800229c:	2800      	cmp	r0, #0
 800229e:	d04a      	beq.n	8002336 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80022a4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80022a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022ac:	b91b      	cbnz	r3, 80022b6 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80022ae:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80022b2:	f001 fe75 	bl	8003fa0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80022b6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80022b8:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022ba:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80022bc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80022c0:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022c2:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80022c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ca:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	d833      	bhi.n	800233a <HAL_SPI_Init+0xa2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80022d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022d6:	d000      	beq.n	80022da <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80022da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022dc:	b92b      	cbnz	r3, 80022ea <HAL_SPI_Init+0x52>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022de:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80022e2:	bf8c      	ite	hi
 80022e4:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80022e6:	2301      	movls	r3, #1
 80022e8:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80022ea:	69a0      	ldr	r0, [r4, #24]
 80022ec:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 80022f0:	4333      	orrs	r3, r6
 80022f2:	6926      	ldr	r6, [r4, #16]
 80022f4:	4333      	orrs	r3, r6
 80022f6:	6966      	ldr	r6, [r4, #20]
 80022f8:	4333      	orrs	r3, r6
 80022fa:	69e6      	ldr	r6, [r4, #28]
 80022fc:	4333      	orrs	r3, r6
 80022fe:	6a26      	ldr	r6, [r4, #32]
 8002300:	4333      	orrs	r3, r6
 8002302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002304:	4333      	orrs	r3, r6
 8002306:	f400 7600 	and.w	r6, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800230a:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800230c:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800230e:	f000 0004 	and.w	r0, r0, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002312:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002316:	432b      	orrs	r3, r5
 8002318:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800231a:	432b      	orrs	r3, r5
 800231c:	4303      	orrs	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800231e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002320:	430b      	orrs	r3, r1
 8002322:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002324:	69d3      	ldr	r3, [r2, #28]
 8002326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800232a:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800232c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800232e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002330:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002334:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002336:	2001      	movs	r0, #1
 8002338:	e7fc      	b.n	8002334 <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800233a:	4619      	mov	r1, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800233c:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 8002340:	e7c9      	b.n	80022d6 <HAL_SPI_Init+0x3e>

08002342 <HAL_SPI_TransmitReceive>:
{
 8002342:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002346:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002348:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800234c:	4604      	mov	r4, r0
 800234e:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8002350:	2b01      	cmp	r3, #1
{
 8002352:	4616      	mov	r6, r2
 8002354:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002358:	f000 811d 	beq.w	8002596 <HAL_SPI_TransmitReceive+0x254>
 800235c:	2301      	movs	r3, #1
 800235e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002362:	f7fe f983 	bl	800066c <HAL_GetTick>
  tmp_state           = hspi->State;
 8002366:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800236a:	4681      	mov	r9, r0
  tmp_mode            = hspi->Init.Mode;
 800236c:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800236e:	2a01      	cmp	r2, #1
  tmp_state           = hspi->State;
 8002370:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002372:	d00a      	beq.n	800238a <HAL_SPI_TransmitReceive+0x48>
 8002374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002378:	f040 810b 	bne.w	8002592 <HAL_SPI_TransmitReceive+0x250>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800237c:	68a2      	ldr	r2, [r4, #8]
 800237e:	2a00      	cmp	r2, #0
 8002380:	f040 8107 	bne.w	8002592 <HAL_SPI_TransmitReceive+0x250>
 8002384:	2904      	cmp	r1, #4
 8002386:	f040 8104 	bne.w	8002592 <HAL_SPI_TransmitReceive+0x250>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800238a:	2d00      	cmp	r5, #0
 800238c:	d047      	beq.n	800241e <HAL_SPI_TransmitReceive+0xdc>
 800238e:	2e00      	cmp	r6, #0
 8002390:	d045      	beq.n	800241e <HAL_SPI_TransmitReceive+0xdc>
 8002392:	2f00      	cmp	r7, #0
 8002394:	d043      	beq.n	800241e <HAL_SPI_TransmitReceive+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002396:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800239a:	2a04      	cmp	r2, #4
 800239c:	d002      	beq.n	80023a4 <HAL_SPI_TransmitReceive+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800239e:	2205      	movs	r2, #5
 80023a0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80023a4:	68e1      	ldr	r1, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a6:	2200      	movs	r2, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023a8:	6426      	str	r6, [r4, #64]	; 0x40
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80023aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023ae:	6826      	ldr	r6, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b0:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->RxXferSize  = Size;
 80023b2:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80023b6:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023ba:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80023bc:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80023be:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 80023c0:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023c4:	6872      	ldr	r2, [r6, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80023c6:	d801      	bhi.n	80023cc <HAL_SPI_TransmitReceive+0x8a>
 80023c8:	2f01      	cmp	r7, #1
 80023ca:	d02a      	beq.n	8002422 <HAL_SPI_TransmitReceive+0xe0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023d0:	6072      	str	r2, [r6, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023d2:	6832      	ldr	r2, [r6, #0]
 80023d4:	0650      	lsls	r0, r2, #25
 80023d6:	d403      	bmi.n	80023e0 <HAL_SPI_TransmitReceive+0x9e>
    __HAL_SPI_ENABLE(hspi);
 80023d8:	6832      	ldr	r2, [r6, #0]
 80023da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023de:	6032      	str	r2, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80023e4:	d958      	bls.n	8002498 <HAL_SPI_TransmitReceive+0x156>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023e6:	b10b      	cbz	r3, 80023ec <HAL_SPI_TransmitReceive+0xaa>
 80023e8:	2f01      	cmp	r7, #1
 80023ea:	d107      	bne.n	80023fc <HAL_SPI_TransmitReceive+0xba>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ec:	f835 3b02 	ldrh.w	r3, [r5], #2
 80023f0:	60f3      	str	r3, [r6, #12]
      hspi->TxXferCount--;
 80023f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f4:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80023fc:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002400:	b29b      	uxth	r3, r3
 8002402:	b98b      	cbnz	r3, 8002428 <HAL_SPI_TransmitReceive+0xe6>
 8002404:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002408:	b29b      	uxth	r3, r3
 800240a:	b96b      	cbnz	r3, 8002428 <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800240c:	464a      	mov	r2, r9
 800240e:	4641      	mov	r1, r8
 8002410:	4620      	mov	r0, r4
 8002412:	f7ff ff1c 	bl	800224e <SPI_EndRxTxTransaction>
 8002416:	2800      	cmp	r0, #0
 8002418:	d036      	beq.n	8002488 <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800241a:	2320      	movs	r3, #32
 800241c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800241e:	2001      	movs	r0, #1
 8002420:	e032      	b.n	8002488 <HAL_SPI_TransmitReceive+0x146>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002422:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002426:	e7d3      	b.n	80023d0 <HAL_SPI_TransmitReceive+0x8e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002428:	6821      	ldr	r1, [r4, #0]
 800242a:	688b      	ldr	r3, [r1, #8]
 800242c:	079a      	lsls	r2, r3, #30
 800242e:	d50d      	bpl.n	800244c <HAL_SPI_TransmitReceive+0x10a>
 8002430:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002432:	b29b      	uxth	r3, r3
 8002434:	b153      	cbz	r3, 800244c <HAL_SPI_TransmitReceive+0x10a>
 8002436:	b14d      	cbz	r5, 800244c <HAL_SPI_TransmitReceive+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        txallowed = 0U;
 800243a:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800243c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002440:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002442:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002444:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002446:	3b01      	subs	r3, #1
 8002448:	b29b      	uxth	r3, r3
 800244a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800244c:	688a      	ldr	r2, [r1, #8]
 800244e:	f012 0201 	ands.w	r2, r2, #1
 8002452:	d00f      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x132>
 8002454:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002458:	b29b      	uxth	r3, r3
 800245a:	b15b      	cbz	r3, 8002474 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800245c:	68c9      	ldr	r1, [r1, #12]
        txallowed = 1U;
 800245e:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002460:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002462:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002466:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002468:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800246c:	3b01      	subs	r3, #1
 800246e:	b29b      	uxth	r3, r3
 8002470:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002474:	f7fe f8fa 	bl	800066c <HAL_GetTick>
 8002478:	eba0 0009 	sub.w	r0, r0, r9
 800247c:	4540      	cmp	r0, r8
 800247e:	d3be      	bcc.n	80023fe <HAL_SPI_TransmitReceive+0xbc>
 8002480:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002484:	d0bb      	beq.n	80023fe <HAL_SPI_TransmitReceive+0xbc>
        errorcode = HAL_TIMEOUT;
 8002486:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002488:	2301      	movs	r3, #1
 800248a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800248e:	2300      	movs	r3, #0
 8002490:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002498:	b10b      	cbz	r3, 800249e <HAL_SPI_TransmitReceive+0x15c>
 800249a:	2f01      	cmp	r7, #1
 800249c:	d10b      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x174>
      if (hspi->TxXferCount > 1U)
 800249e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d909      	bls.n	80024ba <HAL_SPI_TransmitReceive+0x178>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a6:	f835 3b02 	ldrh.w	r3, [r5], #2
 80024aa:	60f3      	str	r3, [r6, #12]
        hspi->TxXferCount -= 2U;
 80024ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ae:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80024b0:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80024b6:	2501      	movs	r5, #1
 80024b8:	e049      	b.n	800254e <HAL_SPI_TransmitReceive+0x20c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024ba:	782b      	ldrb	r3, [r5, #0]
 80024bc:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr++;
 80024be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024c0:	3301      	adds	r3, #1
 80024c2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80024c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024c6:	3b01      	subs	r3, #1
 80024c8:	e7f3      	b.n	80024b2 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	6893      	ldr	r3, [r2, #8]
 80024ce:	079b      	lsls	r3, r3, #30
 80024d0:	d511      	bpl.n	80024f6 <HAL_SPI_TransmitReceive+0x1b4>
 80024d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	b173      	cbz	r3, 80024f6 <HAL_SPI_TransmitReceive+0x1b4>
 80024d8:	b16d      	cbz	r5, 80024f6 <HAL_SPI_TransmitReceive+0x1b4>
        if (hspi->TxXferCount > 1U)
 80024da:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80024de:	b289      	uxth	r1, r1
 80024e0:	2901      	cmp	r1, #1
 80024e2:	d93e      	bls.n	8002562 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024e4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80024e8:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ea:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80024ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024ee:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80024f0:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80024f2:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 80024f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024f6:	6822      	ldr	r2, [r4, #0]
 80024f8:	6893      	ldr	r3, [r2, #8]
 80024fa:	f013 0301 	ands.w	r3, r3, #1
 80024fe:	d01d      	beq.n	800253c <HAL_SPI_TransmitReceive+0x1fa>
 8002500:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002504:	b289      	uxth	r1, r1
 8002506:	b1c9      	cbz	r1, 800253c <HAL_SPI_TransmitReceive+0x1fa>
        if (hspi->RxXferCount > 1U)
 8002508:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800250c:	6c21      	ldr	r1, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 800250e:	b280      	uxth	r0, r0
 8002510:	2801      	cmp	r0, #1
 8002512:	d92e      	bls.n	8002572 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002514:	68d0      	ldr	r0, [r2, #12]
 8002516:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800251a:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800251c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002520:	3902      	subs	r1, #2
 8002522:	b289      	uxth	r1, r1
 8002524:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002528:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800252c:	b289      	uxth	r1, r1
 800252e:	2901      	cmp	r1, #1
 8002530:	d803      	bhi.n	800253a <HAL_SPI_TransmitReceive+0x1f8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002532:	6851      	ldr	r1, [r2, #4]
 8002534:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8002538:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 800253a:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800253c:	f7fe f896 	bl	800066c <HAL_GetTick>
 8002540:	eba0 0009 	sub.w	r0, r0, r9
 8002544:	4540      	cmp	r0, r8
 8002546:	d320      	bcc.n	800258a <HAL_SPI_TransmitReceive+0x248>
 8002548:	f1b8 3fff 	cmp.w	r8, #4294967295
 800254c:	d19b      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x144>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800254e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1b9      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x188>
 8002556:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1b4      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x188>
 8002560:	e754      	b.n	800240c <HAL_SPI_TransmitReceive+0xca>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002568:	3301      	adds	r3, #1
 800256a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800256c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800256e:	3b01      	subs	r3, #1
 8002570:	e7be      	b.n	80024f0 <HAL_SPI_TransmitReceive+0x1ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002572:	7b12      	ldrb	r2, [r2, #12]
 8002574:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8002576:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002578:	3201      	adds	r2, #1
 800257a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800257c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002580:	3a01      	subs	r2, #1
 8002582:	b292      	uxth	r2, r2
 8002584:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8002588:	e7d7      	b.n	800253a <HAL_SPI_TransmitReceive+0x1f8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800258a:	f1b8 0f00 	cmp.w	r8, #0
 800258e:	d1de      	bne.n	800254e <HAL_SPI_TransmitReceive+0x20c>
 8002590:	e779      	b.n	8002486 <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_BUSY;
 8002592:	2002      	movs	r0, #2
 8002594:	e778      	b.n	8002488 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8002596:	2002      	movs	r0, #2
 8002598:	e77c      	b.n	8002494 <HAL_SPI_TransmitReceive+0x152>
	...

0800259c <HAL_SPI_Transmit_DMA>:
{
 800259c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800259e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80025a2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d072      	beq.n	800268e <HAL_SPI_Transmit_DMA+0xf2>
 80025a8:	2301      	movs	r3, #1
 80025aa:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 80025ae:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	b2dd      	uxtb	r5, r3
 80025b6:	d168      	bne.n	800268a <HAL_SPI_Transmit_DMA+0xee>
  if ((pData == NULL) || (Size == 0U))
 80025b8:	2900      	cmp	r1, #0
 80025ba:	d047      	beq.n	800264c <HAL_SPI_Transmit_DMA+0xb0>
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d045      	beq.n	800264c <HAL_SPI_Transmit_DMA+0xb0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025c0:	2303      	movs	r3, #3
  hspi->TxXferSize  = Size;
 80025c2:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025c4:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025c6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025ce:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxXferCount = Size;
 80025d0:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 80025d2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80025d6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    SPI_1LINE_TX(hspi);
 80025da:	6802      	ldr	r2, [r0, #0]
  hspi->RxISR       = NULL;
 80025dc:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e0:	6883      	ldr	r3, [r0, #8]
 80025e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e6:	d103      	bne.n	80025f0 <HAL_SPI_Transmit_DMA+0x54>
    SPI_1LINE_TX(hspi);
 80025e8:	6813      	ldr	r3, [r2, #0]
 80025ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ee:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80025f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_SPI_Transmit_DMA+0xf8>)
 80025f4:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80025f6:	4b28      	ldr	r3, [pc, #160]	; (8002698 <HAL_SPI_Transmit_DMA+0xfc>)
 80025f8:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80025fa:	4b28      	ldr	r3, [pc, #160]	; (800269c <HAL_SPI_Transmit_DMA+0x100>)
 80025fc:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	6503      	str	r3, [r0, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002602:	6853      	ldr	r3, [r2, #4]
 8002604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002608:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800260a:	68e3      	ldr	r3, [r4, #12]
 800260c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002610:	d80f      	bhi.n	8002632 <HAL_SPI_Transmit_DMA+0x96>
 8002612:	6983      	ldr	r3, [r0, #24]
 8002614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002618:	d10b      	bne.n	8002632 <HAL_SPI_Transmit_DMA+0x96>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800261a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800261c:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002620:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002622:	d118      	bne.n	8002656 <HAL_SPI_Transmit_DMA+0xba>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002628:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800262a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800262c:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002630:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8002632:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002634:	320c      	adds	r2, #12
 8002636:	b29b      	uxth	r3, r3
 8002638:	f7fe f92c 	bl	8000894 <HAL_DMA_Start_IT>
 800263c:	b198      	cbz	r0, 8002666 <HAL_SPI_Transmit_DMA+0xca>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800263e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002640:	f043 0310 	orr.w	r3, r3, #16
 8002644:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8002646:	2301      	movs	r3, #1
 8002648:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800264c:	2300      	movs	r3, #0
 800264e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002652:	4628      	mov	r0, r5
 8002654:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265a:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800265c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800265e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002662:	3301      	adds	r3, #1
 8002664:	e7e4      	b.n	8002630 <HAL_SPI_Transmit_DMA+0x94>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	0652      	lsls	r2, r2, #25
 800266c:	d403      	bmi.n	8002676 <HAL_SPI_Transmit_DMA+0xda>
    __HAL_SPI_ENABLE(hspi);
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002674:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002676:	685a      	ldr	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002678:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800267a:	f042 0220 	orr.w	r2, r2, #32
 800267e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	f042 0202 	orr.w	r2, r2, #2
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	e7e0      	b.n	800264c <HAL_SPI_Transmit_DMA+0xb0>
    errorcode = HAL_BUSY;
 800268a:	2502      	movs	r5, #2
 800268c:	e7de      	b.n	800264c <HAL_SPI_Transmit_DMA+0xb0>
  __HAL_LOCK(hspi);
 800268e:	2502      	movs	r5, #2
 8002690:	e7df      	b.n	8002652 <HAL_SPI_Transmit_DMA+0xb6>
 8002692:	bf00      	nop
 8002694:	080026a5 	.word	0x080026a5
 8002698:	080026d3 	.word	0x080026d3
 800269c:	080026b1 	.word	0x080026b1

080026a0 <HAL_SPI_TxCpltCallback>:
 80026a0:	4770      	bx	lr

080026a2 <HAL_SPI_TxHalfCpltCallback>:
 80026a2:	4770      	bx	lr

080026a4 <SPI_DMAHalfTransmitCplt>:
  HAL_SPI_TxHalfCpltCallback(hspi);
 80026a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80026a6:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80026a8:	f7ff fffb 	bl	80026a2 <HAL_SPI_TxHalfCpltCallback>
}
 80026ac:	bd08      	pop	{r3, pc}

080026ae <HAL_SPI_ErrorCallback>:
 80026ae:	4770      	bx	lr

080026b0 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80026b2:	6802      	ldr	r2, [r0, #0]
{
 80026b4:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80026b6:	6853      	ldr	r3, [r2, #4]
 80026b8:	f023 0303 	bic.w	r3, r3, #3
 80026bc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80026be:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80026c0:	f043 0310 	orr.w	r3, r3, #16
 80026c4:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80026cc:	f7ff ffef 	bl	80026ae <HAL_SPI_ErrorCallback>
}
 80026d0:	bd08      	pop	{r3, pc}

080026d2 <SPI_DMATransmitCplt>:
{
 80026d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026d4:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026d6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 80026d8:	f7fd ffc8 	bl	800066c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80026de:	682b      	ldr	r3, [r5, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	05db      	lsls	r3, r3, #23
 80026e4:	d426      	bmi.n	8002734 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80026e6:	6823      	ldr	r3, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80026e8:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	f021 0120 	bic.w	r1, r1, #32
 80026f0:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	f021 0102 	bic.w	r1, r1, #2
 80026f8:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80026fa:	2164      	movs	r1, #100	; 0x64
 80026fc:	f7ff fda7 	bl	800224e <SPI_EndRxTxTransaction>
 8002700:	b118      	cbz	r0, 800270a <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002702:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002704:	f043 0320 	orr.w	r3, r3, #32
 8002708:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800270a:	68a3      	ldr	r3, [r4, #8]
 800270c:	b933      	cbnz	r3, 800271c <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	9201      	str	r2, [sp, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002720:	2301      	movs	r3, #1
 8002722:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002726:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002728:	b123      	cbz	r3, 8002734 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 800272a:	4620      	mov	r0, r4
 800272c:	f7ff ffbf 	bl	80026ae <HAL_SPI_ErrorCallback>
}
 8002730:	b003      	add	sp, #12
 8002732:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8002734:	4620      	mov	r0, r4
 8002736:	f7ff ffb3 	bl	80026a0 <HAL_SPI_TxCpltCallback>
 800273a:	e7f9      	b.n	8002730 <SPI_DMATransmitCplt+0x5e>

0800273c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800273c:	6a03      	ldr	r3, [r0, #32]
 800273e:	f023 0301 	bic.w	r3, r3, #1
{
 8002742:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002744:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002746:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002748:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800274c:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8002750:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002752:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002756:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800275a:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800275c:	688d      	ldr	r5, [r1, #8]
 800275e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002760:	4d0e      	ldr	r5, [pc, #56]	; (800279c <TIM_OC1_SetConfig+0x60>)
 8002762:	42a8      	cmp	r0, r5
 8002764:	d002      	beq.n	800276c <TIM_OC1_SetConfig+0x30>
 8002766:	4e0e      	ldr	r6, [pc, #56]	; (80027a0 <TIM_OC1_SetConfig+0x64>)
 8002768:	42b0      	cmp	r0, r6
 800276a:	d111      	bne.n	8002790 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800276c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002770:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002772:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8002774:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002778:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800277c:	d002      	beq.n	8002784 <TIM_OC1_SetConfig+0x48>
 800277e:	4d08      	ldr	r5, [pc, #32]	; (80027a0 <TIM_OC1_SetConfig+0x64>)
 8002780:	42a8      	cmp	r0, r5
 8002782:	d105      	bne.n	8002790 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002784:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002788:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800278c:	4335      	orrs	r5, r6
 800278e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002790:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002792:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002794:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002796:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002798:	6203      	str	r3, [r0, #32]
}
 800279a:	bd70      	pop	{r4, r5, r6, pc}
 800279c:	40010000 	.word	0x40010000
 80027a0:	40010400 	.word	0x40010400

080027a4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027a4:	6a03      	ldr	r3, [r0, #32]
 80027a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 80027aa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027b2:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 80027b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027ba:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80027be:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80027c2:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027c4:	688d      	ldr	r5, [r1, #8]
 80027c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027ca:	4d11      	ldr	r5, [pc, #68]	; (8002810 <TIM_OC3_SetConfig+0x6c>)
 80027cc:	42a8      	cmp	r0, r5
 80027ce:	d003      	beq.n	80027d8 <TIM_OC3_SetConfig+0x34>
 80027d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027d4:	42a8      	cmp	r0, r5
 80027d6:	d114      	bne.n	8002802 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027d8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80027da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e2:	4d0b      	ldr	r5, [pc, #44]	; (8002810 <TIM_OC3_SetConfig+0x6c>)
 80027e4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80027e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ea:	d003      	beq.n	80027f4 <TIM_OC3_SetConfig+0x50>
 80027ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027f0:	42a8      	cmp	r0, r5
 80027f2:	d106      	bne.n	8002802 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027f4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027f8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80027fc:	4335      	orrs	r5, r6
 80027fe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002802:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002804:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002806:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002808:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800280a:	6203      	str	r3, [r0, #32]
}
 800280c:	bd70      	pop	{r4, r5, r6, pc}
 800280e:	bf00      	nop
 8002810:	40010000 	.word	0x40010000

08002814 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002814:	6a03      	ldr	r3, [r0, #32]
 8002816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800281a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800281c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002822:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002828:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800282a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002832:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002836:	688d      	ldr	r5, [r1, #8]
 8002838:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283c:	4d08      	ldr	r5, [pc, #32]	; (8002860 <TIM_OC4_SetConfig+0x4c>)
 800283e:	42a8      	cmp	r0, r5
 8002840:	d003      	beq.n	800284a <TIM_OC4_SetConfig+0x36>
 8002842:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002846:	42a8      	cmp	r0, r5
 8002848:	d104      	bne.n	8002854 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800284a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800284e:	694d      	ldr	r5, [r1, #20]
 8002850:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002854:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002856:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002858:	684b      	ldr	r3, [r1, #4]
 800285a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285c:	6202      	str	r2, [r0, #32]
}
 800285e:	bd30      	pop	{r4, r5, pc}
 8002860:	40010000 	.word	0x40010000

08002864 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002864:	6a03      	ldr	r3, [r0, #32]
 8002866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800286a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800286c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800286e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002870:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002872:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002874:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8002878:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800287a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002882:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002884:	688d      	ldr	r5, [r1, #8]
 8002886:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288a:	4d09      	ldr	r5, [pc, #36]	; (80028b0 <TIM_OC5_SetConfig+0x4c>)
 800288c:	42a8      	cmp	r0, r5
 800288e:	d003      	beq.n	8002898 <TIM_OC5_SetConfig+0x34>
 8002890:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002894:	42a8      	cmp	r0, r5
 8002896:	d104      	bne.n	80028a2 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002898:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800289c:	694d      	ldr	r5, [r1, #20]
 800289e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028a4:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028a6:	684b      	ldr	r3, [r1, #4]
 80028a8:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028aa:	6202      	str	r2, [r0, #32]
}
 80028ac:	bd30      	pop	{r4, r5, pc}
 80028ae:	bf00      	nop
 80028b0:	40010000 	.word	0x40010000

080028b4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028b4:	6a03      	ldr	r3, [r0, #32]
 80028b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 80028ba:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028be:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80028c4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80028ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80028d6:	688d      	ldr	r5, [r1, #8]
 80028d8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028dc:	4d08      	ldr	r5, [pc, #32]	; (8002900 <TIM_OC6_SetConfig+0x4c>)
 80028de:	42a8      	cmp	r0, r5
 80028e0:	d003      	beq.n	80028ea <TIM_OC6_SetConfig+0x36>
 80028e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028e6:	42a8      	cmp	r0, r5
 80028e8:	d104      	bne.n	80028f4 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80028ea:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80028ee:	694d      	ldr	r5, [r1, #20]
 80028f0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028f6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80028f8:	684b      	ldr	r3, [r1, #4]
 80028fa:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fc:	6202      	str	r2, [r0, #32]
}
 80028fe:	bd30      	pop	{r4, r5, pc}
 8002900:	40010000 	.word	0x40010000

08002904 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002904:	4a30      	ldr	r2, [pc, #192]	; (80029c8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002906:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002908:	4290      	cmp	r0, r2
 800290a:	d012      	beq.n	8002932 <TIM_Base_SetConfig+0x2e>
 800290c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002910:	d00f      	beq.n	8002932 <TIM_Base_SetConfig+0x2e>
 8002912:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002916:	4290      	cmp	r0, r2
 8002918:	d00b      	beq.n	8002932 <TIM_Base_SetConfig+0x2e>
 800291a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800291e:	4290      	cmp	r0, r2
 8002920:	d007      	beq.n	8002932 <TIM_Base_SetConfig+0x2e>
 8002922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002926:	4290      	cmp	r0, r2
 8002928:	d003      	beq.n	8002932 <TIM_Base_SetConfig+0x2e>
 800292a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800292e:	4290      	cmp	r0, r2
 8002930:	d119      	bne.n	8002966 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8002932:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002938:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293a:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <TIM_Base_SetConfig+0xc4>)
 800293c:	4290      	cmp	r0, r2
 800293e:	d029      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 8002940:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002944:	d026      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 8002946:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800294a:	4290      	cmp	r0, r2
 800294c:	d022      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 800294e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002952:	4290      	cmp	r0, r2
 8002954:	d01e      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 8002956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800295a:	4290      	cmp	r0, r2
 800295c:	d01a      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 800295e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002962:	4290      	cmp	r0, r2
 8002964:	d016      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 8002966:	4a19      	ldr	r2, [pc, #100]	; (80029cc <TIM_Base_SetConfig+0xc8>)
 8002968:	4290      	cmp	r0, r2
 800296a:	d013      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 800296c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002970:	4290      	cmp	r0, r2
 8002972:	d00f      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 8002974:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002978:	4290      	cmp	r0, r2
 800297a:	d00b      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 800297c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002980:	4290      	cmp	r0, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 8002984:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002988:	4290      	cmp	r0, r2
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0x90>
 800298c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002990:	4290      	cmp	r0, r2
 8002992:	d103      	bne.n	800299c <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002998:	68ca      	ldr	r2, [r1, #12]
 800299a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800299c:	694a      	ldr	r2, [r1, #20]
 800299e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029a4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a6:	688b      	ldr	r3, [r1, #8]
 80029a8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029aa:	680b      	ldr	r3, [r1, #0]
 80029ac:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <TIM_Base_SetConfig+0xc4>)
 80029b0:	4298      	cmp	r0, r3
 80029b2:	d003      	beq.n	80029bc <TIM_Base_SetConfig+0xb8>
 80029b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029b8:	4298      	cmp	r0, r3
 80029ba:	d101      	bne.n	80029c0 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80029bc:	690b      	ldr	r3, [r1, #16]
 80029be:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80029c0:	2301      	movs	r3, #1
 80029c2:	6143      	str	r3, [r0, #20]
}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40014000 	.word	0x40014000

080029d0 <HAL_TIM_PWM_Init>:
{
 80029d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80029d2:	4604      	mov	r4, r0
 80029d4:	b1a0      	cbz	r0, 8002a00 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80029d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029de:	b91b      	cbnz	r3, 80029e8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80029e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80029e4:	f001 fc04 	bl	80041f0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ea:	6820      	ldr	r0, [r4, #0]
 80029ec:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80029ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f2:	f7ff ff87 	bl	8002904 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80029f6:	2301      	movs	r3, #1
  return HAL_OK;
 80029f8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80029fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80029fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a00:	2001      	movs	r0, #1
 8002a02:	e7fc      	b.n	80029fe <HAL_TIM_PWM_Init+0x2e>

08002a04 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a04:	6a03      	ldr	r3, [r0, #32]
 8002a06:	f023 0310 	bic.w	r3, r3, #16
{
 8002a0a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a0c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002a0e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002a10:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002a12:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002a14:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a1a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8002a1e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a22:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a26:	688d      	ldr	r5, [r1, #8]
 8002a28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a2c:	4d10      	ldr	r5, [pc, #64]	; (8002a70 <TIM_OC2_SetConfig+0x6c>)
 8002a2e:	42a8      	cmp	r0, r5
 8002a30:	d003      	beq.n	8002a3a <TIM_OC2_SetConfig+0x36>
 8002a32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a36:	42a8      	cmp	r0, r5
 8002a38:	d114      	bne.n	8002a64 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a3a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a40:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a44:	4d0a      	ldr	r5, [pc, #40]	; (8002a70 <TIM_OC2_SetConfig+0x6c>)
 8002a46:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a4c:	d003      	beq.n	8002a56 <TIM_OC2_SetConfig+0x52>
 8002a4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a52:	42a8      	cmp	r0, r5
 8002a54:	d106      	bne.n	8002a64 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a5a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002a5e:	4335      	orrs	r5, r6
 8002a60:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002a64:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002a66:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002a68:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002a6a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002a6c:	6203      	str	r3, [r0, #32]
}
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	40010000 	.word	0x40010000

08002a74 <HAL_TIM_PWM_ConfigChannel>:
{
 8002a74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002a76:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d012      	beq.n	8002aa8 <HAL_TIM_PWM_ConfigChannel+0x34>
 8002a82:	2301      	movs	r3, #1
  switch (Channel)
 8002a84:	2a0c      	cmp	r2, #12
  htim->State = HAL_TIM_STATE_BUSY;
 8002a86:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002a8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002a8e:	d054      	beq.n	8002b3a <HAL_TIM_PWM_ConfigChannel+0xc6>
 8002a90:	d80b      	bhi.n	8002aaa <HAL_TIM_PWM_ConfigChannel+0x36>
 8002a92:	2a04      	cmp	r2, #4
 8002a94:	d02f      	beq.n	8002af6 <HAL_TIM_PWM_ConfigChannel+0x82>
 8002a96:	2a08      	cmp	r2, #8
 8002a98:	d03e      	beq.n	8002b18 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8002a9a:	b1da      	cbz	r2, 8002ad4 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_READY;
 8002a9c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002a9e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002aa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002aa4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002aa8:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002aaa:	2a10      	cmp	r2, #16
 8002aac:	d056      	beq.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0xe8>
 8002aae:	2a14      	cmp	r2, #20
 8002ab0:	d1f4      	bne.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ab2:	6820      	ldr	r0, [r4, #0]
 8002ab4:	f7ff fefe 	bl	80028b4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ab8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002aba:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ace:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ad2:	e052      	b.n	8002b7a <HAL_TIM_PWM_ConfigChannel+0x106>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ad4:	6820      	ldr	r0, [r4, #0]
 8002ad6:	f7ff fe31 	bl	800273c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ada:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002adc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	f042 0208 	orr.w	r2, r2, #8
 8002ae4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	f022 0204 	bic.w	r2, r2, #4
 8002aec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002af2:	619a      	str	r2, [r3, #24]
      break;
 8002af4:	e7d2      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002af6:	6820      	ldr	r0, [r4, #0]
 8002af8:	f7ff ff84 	bl	8002a04 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002afc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002afe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b16:	e7ec      	b.n	8002af2 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b18:	6820      	ldr	r0, [r4, #0]
 8002b1a:	f7ff fe43 	bl	80027a4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b1e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b20:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	f042 0208 	orr.w	r2, r2, #8
 8002b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	f022 0204 	bic.w	r2, r2, #4
 8002b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b36:	61da      	str	r2, [r3, #28]
      break;
 8002b38:	e7b0      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	f7ff fe6a 	bl	8002814 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b40:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b42:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b5a:	e7ec      	b.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b5c:	6820      	ldr	r0, [r4, #0]
 8002b5e:	f7ff fe81 	bl	8002864 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b62:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b64:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b68:	f042 0208 	orr.w	r2, r2, #8
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b70:	f022 0204 	bic.w	r2, r2, #4
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b78:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b7c:	e78e      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x28>
	...

08002b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b80:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b82:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	f04f 0302 	mov.w	r3, #2
 8002b8c:	d01f      	beq.n	8002bce <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b8e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b90:	4d10      	ldr	r5, [pc, #64]	; (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002b92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b96:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002b98:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002b9a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002b9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ba2:	42aa      	cmp	r2, r5
 8002ba4:	d103      	bne.n	8002bae <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ba6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002baa:	684d      	ldr	r5, [r1, #4]
 8002bac:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bae:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bb4:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bba:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbc:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bbe:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8002bc2:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002bce:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002bd0:	bd30      	pop	{r4, r5, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40010000 	.word	0x40010000

08002bd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002bd8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bda:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d038      	beq.n	8002c54 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002be2:	68cb      	ldr	r3, [r1, #12]
 8002be4:	688a      	ldr	r2, [r1, #8]
 8002be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002bea:	4c1b      	ldr	r4, [pc, #108]	; (8002c58 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002bec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bee:	684a      	ldr	r2, [r1, #4]
 8002bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bf4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002bf6:	680a      	ldr	r2, [r1, #0]
 8002bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bfc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002bfe:	690a      	ldr	r2, [r1, #16]
 8002c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c06:	694a      	ldr	r2, [r1, #20]
 8002c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c0e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002c10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002c16:	698a      	ldr	r2, [r1, #24]
 8002c18:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002c1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002c20:	6802      	ldr	r2, [r0, #0]
 8002c22:	42a2      	cmp	r2, r4
 8002c24:	d003      	beq.n	8002c2e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8002c26:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c2a:	42a2      	cmp	r2, r4
 8002c2c:	d10c      	bne.n	8002c48 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002c2e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002c30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c34:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002c38:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002c3a:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c40:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002c42:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002c46:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c48:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002c50:	4618      	mov	r0, r3
}
 8002c52:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002c54:	2002      	movs	r0, #2
 8002c56:	e7fc      	b.n	8002c52 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 8002c58:	40010000 	.word	0x40010000

08002c5c <SwapBytes>:
///////////////////////////////////////////////////////////////////////////////
// Uncategorized:

uint16_t SwapBytes(uint16_t Value)
{
  return (Value >> 8) | ((Value & 0xFF) << 8);
 8002c5c:	ba40      	rev16	r0, r0
}
 8002c5e:	b280      	uxth	r0, r0
 8002c60:	4770      	bx	lr

08002c62 <Clamp_uint16>:
///////////////////////////////////////////////////////////////////////////////
// Clamp:

uint16_t Clamp_uint16(uint16_t Value, uint16_t MinValue , uint16_t MaxValue)
{
  if (Value < MinValue)
 8002c62:	4288      	cmp	r0, r1
 8002c64:	bf38      	it	cc
 8002c66:	4608      	movcc	r0, r1
    Value = MinValue;
  if (Value > MaxValue)
    Value = MaxValue;
  return Value;
}
 8002c68:	4290      	cmp	r0, r2
 8002c6a:	bf28      	it	cs
 8002c6c:	4610      	movcs	r0, r2
 8002c6e:	4770      	bx	lr

08002c70 <ILI9341_Write8>:
//
//  return readvalue;
//}

static void ILI9341_Write8(uint8_t Value)
{
 8002c70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t ReadData;

  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8002c72:	2364      	movs	r3, #100	; 0x64
{
 8002c74:	f88d 000f 	strb.w	r0, [sp, #15]
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8002c78:	4807      	ldr	r0, [pc, #28]	; (8002c98 <ILI9341_Write8+0x28>)
 8002c7a:	f10d 0217 	add.w	r2, sp, #23
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f10d 010f 	add.w	r1, sp, #15
 8002c84:	2301      	movs	r3, #1
 8002c86:	6800      	ldr	r0, [r0, #0]
 8002c88:	f7ff fb5b 	bl	8002342 <HAL_SPI_TransmitReceive>
 8002c8c:	b108      	cbz	r0, 8002c92 <ILI9341_Write8+0x22>
    Error_Handler();
 8002c8e:	f001 f82f 	bl	8003cf0 <Error_Handler>
}
 8002c92:	b007      	add	sp, #28
 8002c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c98:	2000048c 	.word	0x2000048c

08002c9c <ILI9341_Write16>:
//  phspi->Init.DataSize = SPI_DATASIZE_8BIT;
//}

static void ILI9341_Write16(uint16_t Value)
// MSB first.
{
 8002c9c:	b510      	push	{r4, lr}
 8002c9e:	4604      	mov	r4, r0
  ILI9341_Write8(Value >> 8);
 8002ca0:	0a00      	lsrs	r0, r0, #8
 8002ca2:	f7ff ffe5 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(Value);
 8002ca6:	b2e0      	uxtb	r0, r4
}
 8002ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ILI9341_Write8(Value);
 8002cac:	f7ff bfe0 	b.w	8002c70 <ILI9341_Write8>

08002cb0 <ILI9341_WriteCommand>:
  ILI9341_Write16(Value >> 16);
  ILI9341_Write16(Value);
}

static void ILI9341_WriteCommand(int8_t Value)
{
 8002cb0:	b538      	push	{r3, r4, r5, lr}
  ILI9341_DC_Low();
 8002cb2:	4d08      	ldr	r5, [pc, #32]	; (8002cd4 <ILI9341_WriteCommand+0x24>)
{
 8002cb4:	4604      	mov	r4, r0
  ILI9341_DC_Low();
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2104      	movs	r1, #4
 8002cba:	4628      	mov	r0, r5
 8002cbc:	f7fd ffea 	bl	8000c94 <HAL_GPIO_WritePin>
  ILI9341_Write8(Value);
 8002cc0:	b2e0      	uxtb	r0, r4
 8002cc2:	f7ff ffd5 	bl	8002c70 <ILI9341_Write8>
  ILI9341_DC_High();
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2104      	movs	r1, #4
}
 8002ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ILI9341_DC_High();
 8002cd0:	f7fd bfe0 	b.w	8000c94 <HAL_GPIO_WritePin>
 8002cd4:	40020800 	.word	0x40020800

08002cd8 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0>:
    ILI9341_DrawPixel_ToBackBuffer(X, Y, Color);
  else
    ILI9341_DrawPixel_ToDisplay(X, Y, Color, UseCS);
}

static void ILI9341_DrawPixels_MSBFirst_ToDisplay(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
 8002cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cdc:	4606      	mov	r6, r0
 8002cde:	460d      	mov	r5, r1
 8002ce0:	4614      	mov	r4, r2
// Supplied pixel data must be byte swapped i.e. MSB first.
{
  if ((Width == 0) || (Height == 0))
    return;

  ILI9341_CSX_Low();
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4829      	ldr	r0, [pc, #164]	; (8002d8c <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb4>)
static void ILI9341_DrawPixels_MSBFirst_ToDisplay(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
 8002ce8:	461f      	mov	r7, r3
 8002cea:	f8dd 8020 	ldr.w	r8, [sp, #32]
  ILI9341_CSX_Low();
 8002cee:	f7fd ffd1 	bl	8000c94 <HAL_GPIO_WritePin>

  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8002cf2:	202a      	movs	r0, #42	; 0x2a
 8002cf4:	f7ff ffdc 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8002cf8:	4630      	mov	r0, r6
 8002cfa:	f7ff ffcf 	bl	8002c9c <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8002cfe:	1e60      	subs	r0, r4, #1
 8002d00:	4430      	add	r0, r6
 8002d02:	b280      	uxth	r0, r0
 8002d04:	f7ff ffca 	bl	8002c9c <ILI9341_Write16>

  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8002d08:	202b      	movs	r0, #43	; 0x2b
 8002d0a:	f7ff ffd1 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f7ff ffc4 	bl	8002c9c <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8002d14:	1e78      	subs	r0, r7, #1
 8002d16:	4428      	add	r0, r5
 8002d18:	b280      	uxth	r0, r0
 8002d1a:	f7ff ffbf 	bl	8002c9c <ILI9341_Write16>

  ILI9341_WriteCommand(0x2C); // Memory write.
 8002d1e:	202c      	movs	r0, #44	; 0x2c
 8002d20:	f7ff ffc6 	bl	8002cb0 <ILI9341_WriteCommand>
  uint32_t NumBytes = Width * Height * sizeof(uint16_t);
 8002d24:	fb07 f204 	mul.w	r2, r7, r4
 8002d28:	0052      	lsls	r2, r2, #1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d2a:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 8002d2e:	4818      	ldr	r0, [pc, #96]	; (8002d90 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb8>)
 8002d30:	eb08 0102 	add.w	r1, r8, r2
    while (op_size > 0) {
 8002d34:	2a00      	cmp	r2, #0
 8002d36:	eba1 0302 	sub.w	r3, r1, r2
 8002d3a:	dc22      	bgt.n	8002d82 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xaa>
 8002d3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d40:	f3bf 8f6f 	isb	sy
#if __CORTEX_M >= 7
    SCB_CleanDCache_by_Addr((uint32_t *)pPixels, NumBytes);
#endif
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
  {
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8002d44:	0064      	lsls	r4, r4, #1
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8002d46:	2500      	movs	r5, #0
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8002d48:	4e12      	ldr	r6, [pc, #72]	; (8002d94 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xbc>)
 8002d4a:	fa1f f984 	uxth.w	r9, r4
 8002d4e:	464a      	mov	r2, r9
 8002d50:	4641      	mov	r1, r8
 8002d52:	6830      	ldr	r0, [r6, #0]
 8002d54:	f7ff fc22 	bl	800259c <HAL_SPI_Transmit_DMA>
 8002d58:	b108      	cbz	r0, 8002d5e <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x86>
      Error_Handler();
 8002d5a:	f000 ffc9 	bl	8003cf0 <Error_Handler>
    // Alternative:   if (HAL_SPI_Transmit(phspi, (uint8_t*) pPixels, Width * sizeof(uint16_t)), 1000) != HAL_OK)
    pPixels += Width;
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8002d5e:	6833      	ldr	r3, [r6, #0]
    pPixels += Width;
 8002d60:	44a0      	add	r8, r4
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8002d62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d64:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d0fb      	beq.n	8002d64 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x8c>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8002d6c:	3501      	adds	r5, #1
 8002d6e:	b22d      	sxth	r5, r5
 8002d70:	42af      	cmp	r7, r5
 8002d72:	dcec      	bgt.n	8002d4e <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x76>
  }

  ILI9341_CSX_High();
 8002d74:	2201      	movs	r2, #1
 8002d76:	2102      	movs	r1, #2
 8002d78:	4804      	ldr	r0, [pc, #16]	; (8002d8c <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb4>)
}
 8002d7a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ILI9341_CSX_High();
 8002d7e:	f7fd bf89 	b.w	8000c94 <HAL_GPIO_WritePin>
      op_size -=           linesize;
 8002d82:	3a20      	subs	r2, #32
      SCB->DCCMVAC = op_addr;
 8002d84:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
      op_size -=           linesize;
 8002d88:	e7d4      	b.n	8002d34 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x5c>
 8002d8a:	bf00      	nop
 8002d8c:	40020800 	.word	0x40020800
 8002d90:	e000ed00 	.word	0xe000ed00
 8002d94:	2000048c 	.word	0x2000048c

08002d98 <ILI9341_SetDefaultState>:
  TextColor = TextColor_Default;
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <ILI9341_SetDefaultState+0x18>)
 8002d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d9e:	801a      	strh	r2, [r3, #0]
  TextBackgroundColor = TextBackgroundColor_Default;
 8002da0:	2200      	movs	r2, #0
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <ILI9341_SetDefaultState+0x1c>)
 8002da4:	801a      	strh	r2, [r3, #0]
  TextDrawMode = TextDrawMode_Default;
 8002da6:	2201      	movs	r2, #1
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <ILI9341_SetDefaultState+0x20>)
 8002daa:	701a      	strb	r2, [r3, #0]
}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000008 	.word	0x20000008
 8002db4:	20000480 	.word	0x20000480
 8002db8:	2000000a 	.word	0x2000000a

08002dbc <ILI9341_Initialize>:
{
 8002dbc:	b508      	push	{r3, lr}
  phspi = i_phspi;
 8002dbe:	4ba4      	ldr	r3, [pc, #656]	; (8003050 <ILI9341_Initialize+0x294>)
  UseBackBuffer = i_UseBackBuffer;
 8002dc0:	b2c9      	uxtb	r1, r1
  phspi = i_phspi;
 8002dc2:	6018      	str	r0, [r3, #0]
  UseBackBuffer = i_UseBackBuffer;
 8002dc4:	4ba3      	ldr	r3, [pc, #652]	; (8003054 <ILI9341_Initialize+0x298>)
 8002dc6:	7019      	strb	r1, [r3, #0]
  if (UseBackBuffer)
 8002dc8:	b149      	cbz	r1, 8002dde <ILI9341_Initialize+0x22>
    pBackBuffer = calloc(1, ILI9341_Width * ILI9341_Height * sizeof(uint16_t));
 8002dca:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f001 fafc 	bl	80043cc <calloc>
 8002dd4:	4ba0      	ldr	r3, [pc, #640]	; (8003058 <ILI9341_Initialize+0x29c>)
 8002dd6:	6018      	str	r0, [r3, #0]
    if (!pBackBuffer)
 8002dd8:	b908      	cbnz	r0, 8002dde <ILI9341_Initialize+0x22>
      Error_Handler();
 8002dda:	f000 ff89 	bl	8003cf0 <Error_Handler>
  ILI9341_SetDefaultState();
 8002dde:	f7ff ffdb 	bl	8002d98 <ILI9341_SetDefaultState>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_RESET);
 8002de2:	2101      	movs	r1, #1
 8002de4:	2200      	movs	r2, #0
 8002de6:	489d      	ldr	r0, [pc, #628]	; (800305c <ILI9341_Initialize+0x2a0>)
 8002de8:	f7fd ff54 	bl	8000c94 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002dec:	2001      	movs	r0, #1
 8002dee:	f7fd fc43 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_SET);
 8002df2:	2201      	movs	r2, #1
 8002df4:	4899      	ldr	r0, [pc, #612]	; (800305c <ILI9341_Initialize+0x2a0>)
 8002df6:	4611      	mov	r1, r2
 8002df8:	f7fd ff4c 	bl	8000c94 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002dfc:	2005      	movs	r0, #5
 8002dfe:	f7fd fc3b 	bl	8000678 <HAL_Delay>
  ILI9341_CSX_Low();
 8002e02:	2200      	movs	r2, #0
 8002e04:	2102      	movs	r1, #2
 8002e06:	4895      	ldr	r0, [pc, #596]	; (800305c <ILI9341_Initialize+0x2a0>)
 8002e08:	f7fd ff44 	bl	8000c94 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0xEF);
 8002e0c:	f06f 0010 	mvn.w	r0, #16
 8002e10:	f7ff ff4e 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x03);
 8002e14:	2003      	movs	r0, #3
 8002e16:	f7ff ff2b 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x80);
 8002e1a:	2080      	movs	r0, #128	; 0x80
 8002e1c:	f7ff ff28 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8002e20:	2002      	movs	r0, #2
 8002e22:	f7ff ff25 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERB);
 8002e26:	f06f 0030 	mvn.w	r0, #48	; 0x30
 8002e2a:	f7ff ff41 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7ff ff1e 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0XC1);
 8002e34:	20c1      	movs	r0, #193	; 0xc1
 8002e36:	f7ff ff1b 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0X30);
 8002e3a:	2030      	movs	r0, #48	; 0x30
 8002e3c:	f7ff ff18 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWER_SEQ);
 8002e40:	f06f 0012 	mvn.w	r0, #18
 8002e44:	f7ff ff34 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x64);
 8002e48:	2064      	movs	r0, #100	; 0x64
 8002e4a:	f7ff ff11 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8002e4e:	2003      	movs	r0, #3
 8002e50:	f7ff ff0e 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0X12);
 8002e54:	2012      	movs	r0, #18
 8002e56:	f7ff ff0b 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0X81);
 8002e5a:	2081      	movs	r0, #129	; 0x81
 8002e5c:	f7ff ff08 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCA);
 8002e60:	f06f 0017 	mvn.w	r0, #23
 8002e64:	f7ff ff24 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x85);
 8002e68:	2085      	movs	r0, #133	; 0x85
 8002e6a:	f7ff ff01 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7ff fefe 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x78);
 8002e74:	2078      	movs	r0, #120	; 0x78
 8002e76:	f7ff fefb 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERA);
 8002e7a:	f06f 0034 	mvn.w	r0, #52	; 0x34
 8002e7e:	f7ff ff17 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x39);
 8002e82:	2039      	movs	r0, #57	; 0x39
 8002e84:	f7ff fef4 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x2C);
 8002e88:	202c      	movs	r0, #44	; 0x2c
 8002e8a:	f7ff fef1 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7ff feee 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x34);
 8002e94:	2034      	movs	r0, #52	; 0x34
 8002e96:	f7ff feeb 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8002e9a:	2002      	movs	r0, #2
 8002e9c:	f7ff fee8 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_PRC);
 8002ea0:	f06f 0008 	mvn.w	r0, #8
 8002ea4:	f7ff ff04 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x20);
 8002ea8:	2020      	movs	r0, #32
 8002eaa:	f7ff fee1 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCB);
 8002eae:	f06f 0015 	mvn.w	r0, #21
 8002eb2:	f7ff fefd 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7ff feda 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff fed7 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR1); // Power control
 8002ec2:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 8002ec6:	f7ff fef3 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x23); // VRH=[5:0]
 8002eca:	2023      	movs	r0, #35	; 0x23
 8002ecc:	f7ff fed0 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR2); // Power control
 8002ed0:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 8002ed4:	f7ff feec 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x10); // BT=[3:0]
 8002ed8:	2010      	movs	r0, #16
 8002eda:	f7ff fec9 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR1); // VCOM control
 8002ede:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 8002ee2:	f7ff fee5 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x3e); // VMH=[6:0]
 8002ee6:	203e      	movs	r0, #62	; 0x3e
 8002ee8:	f7ff fec2 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x28); // VML=[6:0]
 8002eec:	2028      	movs	r0, #40	; 0x28
 8002eee:	f7ff febf 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR2); // VCOM control 2
 8002ef2:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8002ef6:	f7ff fedb 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x86); // VMF=[6:0]
 8002efa:	2086      	movs	r0, #134	; 0x86
 8002efc:	f7ff feb8 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_MADCTL); // Memory Access Control
 8002f00:	2036      	movs	r0, #54	; 0x36
 8002f02:	f7ff fed5 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x48);
 8002f06:	2048      	movs	r0, #72	; 0x48
 8002f08:	f7ff feb2 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VSCRSADD); // Vertical scroll
 8002f0c:	2037      	movs	r0, #55	; 0x37
 8002f0e:	f7ff fecf 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write16(0); // Zero
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7ff fec2 	bl	8002c9c <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PIXFMT);
 8002f18:	203a      	movs	r0, #58	; 0x3a
 8002f1a:	f7ff fec9 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x55); // DPI=[6:4] DBI=[2:0]
 8002f1e:	2055      	movs	r0, #85	; 0x55
 8002f20:	f7ff fea6 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_FRMCTR1);
 8002f24:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 8002f28:	f7ff fec2 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7ff fe9f 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x18);
 8002f32:	2018      	movs	r0, #24
 8002f34:	f7ff fe9c 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_DFUNCTR); // Display Function Control
 8002f38:	f06f 0049 	mvn.w	r0, #73	; 0x49
 8002f3c:	f7ff feb8 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x08);
 8002f40:	2008      	movs	r0, #8
 8002f42:	f7ff fe95 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x82);
 8002f46:	2082      	movs	r0, #130	; 0x82
 8002f48:	f7ff fe92 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x27);
 8002f4c:	2027      	movs	r0, #39	; 0x27
 8002f4e:	f7ff fe8f 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(0xF2); // 3Gamma
 8002f52:	f06f 000d 	mvn.w	r0, #13
 8002f56:	f7ff feab 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00); // Disable
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7ff fe88 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GAMMASET); // Gamma curve selected
 8002f60:	2026      	movs	r0, #38	; 0x26
 8002f62:	f7ff fea5 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x01);
 8002f66:	2001      	movs	r0, #1
 8002f68:	f7ff fe82 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRP1); // Set Gamma
 8002f6c:	f06f 001f 	mvn.w	r0, #31
 8002f70:	f7ff fe9e 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x0F);
 8002f74:	200f      	movs	r0, #15
 8002f76:	f7ff fe7b 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8002f7a:	2031      	movs	r0, #49	; 0x31
 8002f7c:	f7ff fe78 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x2B);
 8002f80:	202b      	movs	r0, #43	; 0x2b
 8002f82:	f7ff fe75 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8002f86:	200c      	movs	r0, #12
 8002f88:	f7ff fe72 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8002f8c:	200e      	movs	r0, #14
 8002f8e:	f7ff fe6f 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8002f92:	2008      	movs	r0, #8
 8002f94:	f7ff fe6c 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x4E);
 8002f98:	204e      	movs	r0, #78	; 0x4e
 8002f9a:	f7ff fe69 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0xF1);
 8002f9e:	20f1      	movs	r0, #241	; 0xf1
 8002fa0:	f7ff fe66 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x37);
 8002fa4:	2037      	movs	r0, #55	; 0x37
 8002fa6:	f7ff fe63 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8002faa:	2007      	movs	r0, #7
 8002fac:	f7ff fe60 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x10);
 8002fb0:	2010      	movs	r0, #16
 8002fb2:	f7ff fe5d 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8002fb6:	2003      	movs	r0, #3
 8002fb8:	f7ff fe5a 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8002fbc:	200e      	movs	r0, #14
 8002fbe:	f7ff fe57 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x09);
 8002fc2:	2009      	movs	r0, #9
 8002fc4:	f7ff fe54 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7ff fe51 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRN1); // Set Gamma
 8002fce:	f06f 001e 	mvn.w	r0, #30
 8002fd2:	f7ff fe6d 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff fe4a 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8002fdc:	200e      	movs	r0, #14
 8002fde:	f7ff fe47 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x14);
 8002fe2:	2014      	movs	r0, #20
 8002fe4:	f7ff fe44 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8002fe8:	2003      	movs	r0, #3
 8002fea:	f7ff fe41 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x11);
 8002fee:	2011      	movs	r0, #17
 8002ff0:	f7ff fe3e 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8002ff4:	2007      	movs	r0, #7
 8002ff6:	f7ff fe3b 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8002ffa:	2031      	movs	r0, #49	; 0x31
 8002ffc:	f7ff fe38 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0xC1);
 8003000:	20c1      	movs	r0, #193	; 0xc1
 8003002:	f7ff fe35 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x48);
 8003006:	2048      	movs	r0, #72	; 0x48
 8003008:	f7ff fe32 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 800300c:	2008      	movs	r0, #8
 800300e:	f7ff fe2f 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8003012:	200f      	movs	r0, #15
 8003014:	f7ff fe2c 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8003018:	200c      	movs	r0, #12
 800301a:	f7ff fe29 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 800301e:	2031      	movs	r0, #49	; 0x31
 8003020:	f7ff fe26 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x36);
 8003024:	2036      	movs	r0, #54	; 0x36
 8003026:	f7ff fe23 	bl	8002c70 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 800302a:	200f      	movs	r0, #15
 800302c:	f7ff fe20 	bl	8002c70 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_SLPOUT); // Exit sleep
 8003030:	2011      	movs	r0, #17
 8003032:	f7ff fe3d 	bl	8002cb0 <ILI9341_WriteCommand>
  HAL_Delay(120);
 8003036:	2078      	movs	r0, #120	; 0x78
 8003038:	f7fd fb1e 	bl	8000678 <HAL_Delay>
  ILI9341_WriteCommand(ILI9341_DISPON); // Display on
 800303c:	2029      	movs	r0, #41	; 0x29
 800303e:	f7ff fe37 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_CSX_High();
 8003042:	2201      	movs	r2, #1
 8003044:	2102      	movs	r1, #2
 8003046:	4805      	ldr	r0, [pc, #20]	; (800305c <ILI9341_Initialize+0x2a0>)
}
 8003048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ILI9341_CSX_High();
 800304c:	f7fd be22 	b.w	8000c94 <HAL_GPIO_WritePin>
 8003050:	2000048c 	.word	0x2000048c
 8003054:	20000482 	.word	0x20000482
 8003058:	20000484 	.word	0x20000484
 800305c:	40020800 	.word	0x40020800

08003060 <ILI9341_SetAddrWindow>:
{
 8003060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003064:	f99d 8018 	ldrsb.w	r8, [sp, #24]
 8003068:	4606      	mov	r6, r0
 800306a:	460c      	mov	r4, r1
 800306c:	4617      	mov	r7, r2
 800306e:	461d      	mov	r5, r3
  if (UseCS)
 8003070:	f1b8 0f00 	cmp.w	r8, #0
 8003074:	d004      	beq.n	8003080 <ILI9341_SetAddrWindow+0x20>
    ILI9341_CSX_Low();
 8003076:	2200      	movs	r2, #0
 8003078:	2102      	movs	r1, #2
 800307a:	4816      	ldr	r0, [pc, #88]	; (80030d4 <ILI9341_SetAddrWindow+0x74>)
 800307c:	f7fd fe0a 	bl	8000c94 <HAL_GPIO_WritePin>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 8003080:	4437      	add	r7, r6
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 8003082:	4425      	add	r5, r4
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 8003084:	202a      	movs	r0, #42	; 0x2a
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 8003086:	3f01      	subs	r7, #1
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 8003088:	3d01      	subs	r5, #1
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 800308a:	f7ff fe11 	bl	8002cb0 <ILI9341_WriteCommand>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 800308e:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 8003092:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
  ILI9341_Write16(Value >> 16);
 8003096:	0c30      	lsrs	r0, r6, #16
 8003098:	f7ff fe00 	bl	8002c9c <ILI9341_Write16>
  ILI9341_Write16(Value);
 800309c:	b2b0      	uxth	r0, r6
 800309e:	f7ff fdfd 	bl	8002c9c <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PASET); // Row addr set
 80030a2:	202b      	movs	r0, #43	; 0x2b
 80030a4:	f7ff fe04 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write16(Value >> 16);
 80030a8:	0c20      	lsrs	r0, r4, #16
 80030aa:	f7ff fdf7 	bl	8002c9c <ILI9341_Write16>
  ILI9341_Write16(Value);
 80030ae:	b2a0      	uxth	r0, r4
 80030b0:	f7ff fdf4 	bl	8002c9c <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_RAMWR); // Write to RAM
 80030b4:	202c      	movs	r0, #44	; 0x2c
 80030b6:	f7ff fdfb 	bl	8002cb0 <ILI9341_WriteCommand>
  if (UseCS)
 80030ba:	f1b8 0f00 	cmp.w	r8, #0
 80030be:	d006      	beq.n	80030ce <ILI9341_SetAddrWindow+0x6e>
    ILI9341_CSX_High();
 80030c0:	2201      	movs	r2, #1
 80030c2:	2102      	movs	r1, #2
 80030c4:	4803      	ldr	r0, [pc, #12]	; (80030d4 <ILI9341_SetAddrWindow+0x74>)
}
 80030c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ILI9341_CSX_High();
 80030ca:	f7fd bde3 	b.w	8000c94 <HAL_GPIO_WritePin>
}
 80030ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030d2:	bf00      	nop
 80030d4:	40020800 	.word	0x40020800

080030d8 <ILI9341_DrawPixel>:
{
 80030d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030da:	461d      	mov	r5, r3
  if (UseBackBuffer)
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <ILI9341_DrawPixel+0x6c>)
{
 80030de:	4616      	mov	r6, r2
 80030e0:	460c      	mov	r4, r1
  if (UseBackBuffer)
 80030e2:	781a      	ldrb	r2, [r3, #0]
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 80030e4:	b287      	uxth	r7, r0
  if (UseBackBuffer)
 80030e6:	b172      	cbz	r2, 8003106 <ILI9341_DrawPixel+0x2e>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 80030e8:	2fef      	cmp	r7, #239	; 0xef
 80030ea:	d80a      	bhi.n	8003102 <ILI9341_DrawPixel+0x2a>
 80030ec:	b28b      	uxth	r3, r1
 80030ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80030f2:	d206      	bcs.n	8003102 <ILI9341_DrawPixel+0x2a>
  pBackBuffer[X + Y * ILI9341_Width] = Color;
 80030f4:	21f0      	movs	r1, #240	; 0xf0
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <ILI9341_DrawPixel+0x70>)
 80030f8:	fb14 0001 	smlabb	r0, r4, r1, r0
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
}
 8003102:	b003      	add	sp, #12
 8003104:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (UseCS)
 8003106:	b11d      	cbz	r5, 8003110 <ILI9341_DrawPixel+0x38>
    ILI9341_CSX_Low();
 8003108:	2102      	movs	r1, #2
 800310a:	4810      	ldr	r0, [pc, #64]	; (800314c <ILI9341_DrawPixel+0x74>)
 800310c:	f7fd fdc2 	bl	8000c94 <HAL_GPIO_WritePin>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8003110:	2fef      	cmp	r7, #239	; 0xef
 8003112:	d8f6      	bhi.n	8003102 <ILI9341_DrawPixel+0x2a>
 8003114:	b2a1      	uxth	r1, r4
 8003116:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 800311a:	d2f2      	bcs.n	8003102 <ILI9341_DrawPixel+0x2a>
  ILI9341_SetAddrWindow(X, Y, 1, 1, 0);
 800311c:	2301      	movs	r3, #1
 800311e:	2400      	movs	r4, #0
 8003120:	4638      	mov	r0, r7
 8003122:	461a      	mov	r2, r3
 8003124:	9400      	str	r4, [sp, #0]
 8003126:	f7ff ff9b 	bl	8003060 <ILI9341_SetAddrWindow>
  ILI9341_Write16(Color);
 800312a:	4630      	mov	r0, r6
 800312c:	f7ff fdb6 	bl	8002c9c <ILI9341_Write16>
  if (UseCS)
 8003130:	2d00      	cmp	r5, #0
 8003132:	d0e6      	beq.n	8003102 <ILI9341_DrawPixel+0x2a>
    ILI9341_CSX_Low();
 8003134:	4622      	mov	r2, r4
 8003136:	2102      	movs	r1, #2
 8003138:	4804      	ldr	r0, [pc, #16]	; (800314c <ILI9341_DrawPixel+0x74>)
}
 800313a:	b003      	add	sp, #12
 800313c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ILI9341_CSX_Low();
 8003140:	f7fd bda8 	b.w	8000c94 <HAL_GPIO_WritePin>
 8003144:	20000482 	.word	0x20000482
 8003148:	20000484 	.word	0x20000484
 800314c:	40020800 	.word	0x40020800

08003150 <ILI9341_DrawPixels_MSBFirst>:
  }
}

void ILI9341_DrawPixels_MSBFirst(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
// Supplied pixel data must be byte swapped i.e. MSB first.
{
 8003150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (UseBackBuffer)
 8003154:	4d26      	ldr	r5, [pc, #152]	; (80031f0 <ILI9341_DrawPixels_MSBFirst+0xa0>)
{
 8003156:	4680      	mov	r8, r0
 8003158:	460e      	mov	r6, r1
 800315a:	4617      	mov	r7, r2
  if (UseBackBuffer)
 800315c:	782d      	ldrb	r5, [r5, #0]
{
 800315e:	461c      	mov	r4, r3
 8003160:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (UseBackBuffer)
 8003164:	b3c5      	cbz	r5, 80031d8 <ILI9341_DrawPixels_MSBFirst+0x88>
  if ((i_Width == 0) || (i_Height == 0))
 8003166:	b18a      	cbz	r2, 800318c <ILI9341_DrawPixels_MSBFirst+0x3c>
 8003168:	b183      	cbz	r3, 800318c <ILI9341_DrawPixels_MSBFirst+0x3c>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 800316a:	4434      	add	r4, r6
 800316c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003170:	2100      	movs	r1, #0
 8003172:	4630      	mov	r0, r6
 8003174:	f7ff fd75 	bl	8002c62 <Clamp_uint16>
 8003178:	4605      	mov	r5, r0
 800317a:	b2a4      	uxth	r4, r4
 800317c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003180:	2100      	movs	r1, #0
 8003182:	4620      	mov	r0, r4
 8003184:	f7ff fd6d 	bl	8002c62 <Clamp_uint16>
 8003188:	4285      	cmp	r5, r0
 800318a:	d302      	bcc.n	8003192 <ILI9341_DrawPixels_MSBFirst+0x42>
    ILI9341_DrawPixels_MSBFirst_ToBackBuffer(X, Y, Width, Height, pPixels);
  else
    ILI9341_DrawPixels_MSBFirst_ToDisplay(X, Y, Width, Height, pPixels);
}
 800318c:	b003      	add	sp, #12
 800318e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <ILI9341_DrawPixels_MSBFirst+0xa4>)
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003194:	22f0      	movs	r2, #240	; 0xf0
 8003196:	2100      	movs	r1, #0
 8003198:	4640      	mov	r0, r8
    pLine = &pBackBuffer[Y * ILI9341_Width];
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f44f 7af0 	mov.w	sl, #480	; 0x1e0
 80031a0:	9301      	str	r3, [sp, #4]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80031a2:	f7ff fd5e 	bl	8002c62 <Clamp_uint16>
 80031a6:	eb08 0307 	add.w	r3, r8, r7
 80031aa:	fb0a fa05 	mul.w	sl, sl, r5
 80031ae:	4606      	mov	r6, r0
 80031b0:	fa1f fb83 	uxth.w	fp, r3
 80031b4:	22f0      	movs	r2, #240	; 0xf0
 80031b6:	2100      	movs	r1, #0
 80031b8:	4658      	mov	r0, fp
 80031ba:	f7ff fd52 	bl	8002c62 <Clamp_uint16>
 80031be:	4286      	cmp	r6, r0
 80031c0:	d301      	bcc.n	80031c6 <ILI9341_DrawPixels_MSBFirst+0x76>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80031c2:	3501      	adds	r5, #1
 80031c4:	e7da      	b.n	800317c <ILI9341_DrawPixels_MSBFirst+0x2c>
      pLine[X] = *pPixel++;
 80031c6:	9b01      	ldr	r3, [sp, #4]
 80031c8:	f839 1b02 	ldrh.w	r1, [r9], #2
 80031cc:	eb03 020a 	add.w	r2, r3, sl
 80031d0:	f822 1016 	strh.w	r1, [r2, r6, lsl #1]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80031d4:	3601      	adds	r6, #1
 80031d6:	e7ed      	b.n	80031b4 <ILI9341_DrawPixels_MSBFirst+0x64>
  if ((Width == 0) || (Height == 0))
 80031d8:	2a00      	cmp	r2, #0
 80031da:	d0d7      	beq.n	800318c <ILI9341_DrawPixels_MSBFirst+0x3c>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0d5      	beq.n	800318c <ILI9341_DrawPixels_MSBFirst+0x3c>
 80031e0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
}
 80031e4:	b003      	add	sp, #12
 80031e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ea:	f7ff bd75 	b.w	8002cd8 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0>
 80031ee:	bf00      	nop
 80031f0:	20000482 	.word	0x20000482
 80031f4:	20000484 	.word	0x20000484

080031f8 <ILI9341_DrawBar_ToBackBuffer>:

  ILI9341_CSX_High();
}

void ILI9341_DrawBar_ToBackBuffer(uint16_t i_X, uint16_t i_Y, uint16_t i_Width, uint16_t i_Height, uint16_t i_Color)
{
 80031f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fc:	460e      	mov	r6, r1
 80031fe:	461c      	mov	r4, r3
 8003200:	4607      	mov	r7, r0
  uint16_t *pLine;
  uint16_t Color_MSBFirst;

  Color_MSBFirst = SwapBytes(i_Color);
 8003202:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30

  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003206:	4434      	add	r4, r6
{
 8003208:	4690      	mov	r8, r2
  Color_MSBFirst = SwapBytes(i_Color);
 800320a:	f7ff fd27 	bl	8002c5c <SwapBytes>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 800320e:	f44f 72a0 	mov.w	r2, #320	; 0x140
  Color_MSBFirst = SwapBytes(i_Color);
 8003212:	4682      	mov	sl, r0
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003214:	2100      	movs	r1, #0
 8003216:	4630      	mov	r0, r6
 8003218:	b2a4      	uxth	r4, r4
 800321a:	f7ff fd22 	bl	8002c62 <Clamp_uint16>
 800321e:	4605      	mov	r5, r0
 8003220:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003224:	2100      	movs	r1, #0
 8003226:	4620      	mov	r0, r4
 8003228:	f7ff fd1b 	bl	8002c62 <Clamp_uint16>
 800322c:	42a8      	cmp	r0, r5
 800322e:	d802      	bhi.n	8003236 <ILI9341_DrawBar_ToBackBuffer+0x3e>
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
    {
      pLine[X] = Color_MSBFirst;
    }
  }
}
 8003230:	b003      	add	sp, #12
 8003232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8003236:	4b10      	ldr	r3, [pc, #64]	; (8003278 <ILI9341_DrawBar_ToBackBuffer+0x80>)
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003238:	22f0      	movs	r2, #240	; 0xf0
 800323a:	2100      	movs	r1, #0
 800323c:	4638      	mov	r0, r7
    pLine = &pBackBuffer[Y * ILI9341_Width];
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
 8003244:	9301      	str	r3, [sp, #4]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003246:	f7ff fd0c 	bl	8002c62 <Clamp_uint16>
 800324a:	eb07 0308 	add.w	r3, r7, r8
 800324e:	fb09 f905 	mul.w	r9, r9, r5
 8003252:	4606      	mov	r6, r0
 8003254:	fa1f fb83 	uxth.w	fp, r3
 8003258:	22f0      	movs	r2, #240	; 0xf0
 800325a:	2100      	movs	r1, #0
 800325c:	4658      	mov	r0, fp
 800325e:	f7ff fd00 	bl	8002c62 <Clamp_uint16>
 8003262:	42b0      	cmp	r0, r6
 8003264:	d801      	bhi.n	800326a <ILI9341_DrawBar_ToBackBuffer+0x72>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003266:	3501      	adds	r5, #1
 8003268:	e7da      	b.n	8003220 <ILI9341_DrawBar_ToBackBuffer+0x28>
      pLine[X] = Color_MSBFirst;
 800326a:	9b01      	ldr	r3, [sp, #4]
 800326c:	eb03 0209 	add.w	r2, r3, r9
 8003270:	f822 a016 	strh.w	sl, [r2, r6, lsl #1]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003274:	3601      	adds	r6, #1
 8003276:	e7ef      	b.n	8003258 <ILI9341_DrawBar_ToBackBuffer+0x60>
 8003278:	20000484 	.word	0x20000484

0800327c <ILI9341_DrawBar>:

void ILI9341_DrawBar(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Color)
{
 800327c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (UseBackBuffer)
 8003280:	4d35      	ldr	r5, [pc, #212]	; (8003358 <ILI9341_DrawBar+0xdc>)
{
 8003282:	4607      	mov	r7, r0
 8003284:	460e      	mov	r6, r1
 8003286:	4614      	mov	r4, r2
  if (UseBackBuffer)
 8003288:	782d      	ldrb	r5, [r5, #0]
{
 800328a:	4698      	mov	r8, r3
 800328c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
  if (UseBackBuffer)
 8003290:	b12d      	cbz	r5, 800329e <ILI9341_DrawBar+0x22>
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 8003292:	f8cd 9020 	str.w	r9, [sp, #32]
  else
    ILI9341_DrawBar_ToDisplay(X, Y, Width, Height, Color);
}
 8003296:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 800329a:	f7ff bfad 	b.w	80031f8 <ILI9341_DrawBar_ToBackBuffer>
  if ((Width == 0) || (Height == 0))
 800329e:	2a00      	cmp	r2, #0
 80032a0:	d058      	beq.n	8003354 <ILI9341_DrawBar+0xd8>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d056      	beq.n	8003354 <ILI9341_DrawBar+0xd8>
  ILI9341_CSX_Low();
 80032a6:	462a      	mov	r2, r5
 80032a8:	2102      	movs	r1, #2
 80032aa:	482c      	ldr	r0, [pc, #176]	; (800335c <ILI9341_DrawBar+0xe0>)
 80032ac:	f7fd fcf2 	bl	8000c94 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 80032b0:	202a      	movs	r0, #42	; 0x2a
 80032b2:	f7ff fcfd 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 80032b6:	4638      	mov	r0, r7
 80032b8:	f7ff fcf0 	bl	8002c9c <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 80032bc:	1e60      	subs	r0, r4, #1
 80032be:	4438      	add	r0, r7
 80032c0:	b280      	uxth	r0, r0
 80032c2:	f7ff fceb 	bl	8002c9c <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 80032c6:	202b      	movs	r0, #43	; 0x2b
 80032c8:	f7ff fcf2 	bl	8002cb0 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 80032cc:	4630      	mov	r0, r6
 80032ce:	f7ff fce5 	bl	8002c9c <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 80032d2:	f108 30ff 	add.w	r0, r8, #4294967295
 80032d6:	4430      	add	r0, r6
 80032d8:	b280      	uxth	r0, r0
 80032da:	f7ff fcdf 	bl	8002c9c <ILI9341_Write16>
  uint16_t Color_MSBFirst = SwapBytes(Color);
 80032de:	4648      	mov	r0, r9
 80032e0:	f7ff fcbc 	bl	8002c5c <SwapBytes>
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 80032e4:	4a1e      	ldr	r2, [pc, #120]	; (8003360 <ILI9341_DrawBar+0xe4>)
 80032e6:	b22b      	sxth	r3, r5
 80032e8:	3501      	adds	r5, #1
 80032ea:	42a3      	cmp	r3, r4
 80032ec:	db2f      	blt.n	800334e <ILI9341_DrawBar+0xd2>
    uint32_t NumBytes = Width * 2;
 80032ee:	0064      	lsls	r4, r4, #1
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 80032f0:	2500      	movs	r5, #0
      SCB->DCCMVAC = op_addr;
 80032f2:	4f1c      	ldr	r7, [pc, #112]	; (8003364 <ILI9341_DrawBar+0xe8>)
  ILI9341_WriteCommand(0x2C); // Memory write.
 80032f4:	202c      	movs	r0, #44	; 0x2c
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 80032f6:	fa1f f984 	uxth.w	r9, r4
 80032fa:	4e1b      	ldr	r6, [pc, #108]	; (8003368 <ILI9341_DrawBar+0xec>)
  ILI9341_WriteCommand(0x2C); // Memory write.
 80032fc:	f7ff fcd8 	bl	8002cb0 <ILI9341_WriteCommand>
    uint32_t op_addr = (uint32_t) addr;
 8003300:	4917      	ldr	r1, [pc, #92]	; (8003360 <ILI9341_DrawBar+0xe4>)
  __ASM volatile ("dsb 0xF":::"memory");
 8003302:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 8003306:	4623      	mov	r3, r4
      op_size -=           linesize;
 8003308:	3b20      	subs	r3, #32
      SCB->DCCMVAC = op_addr;
 800330a:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800330e:	3120      	adds	r1, #32
    while (op_size > 0) {
 8003310:	2b00      	cmp	r3, #0
 8003312:	dcf9      	bgt.n	8003308 <ILI9341_DrawBar+0x8c>
 8003314:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003318:	f3bf 8f6f 	isb	sy
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 800331c:	4910      	ldr	r1, [pc, #64]	; (8003360 <ILI9341_DrawBar+0xe4>)
 800331e:	464a      	mov	r2, r9
 8003320:	6830      	ldr	r0, [r6, #0]
 8003322:	f7ff f93b 	bl	800259c <HAL_SPI_Transmit_DMA>
 8003326:	b108      	cbz	r0, 800332c <ILI9341_DrawBar+0xb0>
      Error_Handler();
 8003328:	f000 fce2 	bl	8003cf0 <Error_Handler>
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 800332c:	6833      	ldr	r3, [r6, #0]
 800332e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003330:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8003334:	2b02      	cmp	r3, #2
 8003336:	d0fb      	beq.n	8003330 <ILI9341_DrawBar+0xb4>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003338:	3501      	adds	r5, #1
 800333a:	b22d      	sxth	r5, r5
 800333c:	4545      	cmp	r5, r8
 800333e:	dbdf      	blt.n	8003300 <ILI9341_DrawBar+0x84>
  ILI9341_CSX_High();
 8003340:	2201      	movs	r2, #1
 8003342:	2102      	movs	r1, #2
 8003344:	4805      	ldr	r0, [pc, #20]	; (800335c <ILI9341_DrawBar+0xe0>)
}
 8003346:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ILI9341_CSX_High();
 800334a:	f7fd bca3 	b.w	8000c94 <HAL_GPIO_WritePin>
    ColumnColors[ColumnIndex] = Color_MSBFirst;
 800334e:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8003352:	e7c8      	b.n	80032e6 <ILI9341_DrawBar+0x6a>
}
 8003354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003358:	20000482 	.word	0x20000482
 800335c:	40020800 	.word	0x40020800
 8003360:	20000200 	.word	0x20000200
 8003364:	e000ed00 	.word	0xe000ed00
 8003368:	2000048c 	.word	0x2000048c

0800336c <ILI9341_Clear>:

void ILI9341_Clear(uint16_t Color)
{
 800336c:	b507      	push	{r0, r1, r2, lr}
  ILI9341_DrawBar(0, 0, ILI9341_Width, ILI9341_Height, Color);
 800336e:	2100      	movs	r1, #0
 8003370:	9000      	str	r0, [sp, #0]
 8003372:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003376:	22f0      	movs	r2, #240	; 0xf0
 8003378:	4608      	mov	r0, r1
 800337a:	f7ff ff7f 	bl	800327c <ILI9341_DrawBar>
}
 800337e:	b003      	add	sp, #12
 8003380:	f85d fb04 	ldr.w	pc, [sp], #4

08003384 <ILI9341_SetFont>:

const GFXfont *ILI9341_SetFont(const GFXfont *i_pFont)
{
  const GFXfont *Result;

  Result = pFont;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <ILI9341_SetFont+0xc>)
 8003386:	681a      	ldr	r2, [r3, #0]
  pFont = i_pFont;
 8003388:	6018      	str	r0, [r3, #0]
  return Result;
}
 800338a:	4610      	mov	r0, r2
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000488 	.word	0x20000488

08003394 <ILI9341_GetFontYSpacing>:

uint8_t ILI9341_GetFontYSpacing()
{
  return pFont->yAdvance;
 8003394:	4b01      	ldr	r3, [pc, #4]	; (800339c <ILI9341_GetFontYSpacing+0x8>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	7a98      	ldrb	r0, [r3, #10]
 800339a:	4770      	bx	lr
 800339c:	20000488 	.word	0x20000488

080033a0 <GetCharWidth>:

static uint8_t IsNonPrintingChar(uint8_t Ch)
{
  return ((Ch < pFont->first) || (Ch > pFont->last));
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <GetCharWidth+0x30>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	7a1a      	ldrb	r2, [r3, #8]
 80033a6:	4290      	cmp	r0, r2
 80033a8:	d310      	bcc.n	80033cc <GetCharWidth+0x2c>
}

uint16_t GetCharWidth(uint8_t Ch)
{
  if (IsNonPrintingChar(Ch))
 80033aa:	7a59      	ldrb	r1, [r3, #9]
 80033ac:	4281      	cmp	r1, r0
 80033ae:	d30d      	bcc.n	80033cc <GetCharWidth+0x2c>
    return 0;

  Ch -= pFont->first;
 80033b0:	1a80      	subs	r0, r0, r2
  GFXglyph *pGlyph = &pFont->pGlyph[Ch];
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	b2c0      	uxtb	r0, r0
 80033b6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  uint8_t w = pGlyph->width;
 80033ba:	789a      	ldrb	r2, [r3, #2]
  int8_t xo = pGlyph->xOffset;
 80033bc:	f993 0005 	ldrsb.w	r0, [r3, #5]

  if (w == 0)
 80033c0:	b90a      	cbnz	r2, 80033c6 <GetCharWidth+0x26>
    return pGlyph->xAdvance;
 80033c2:	7918      	ldrb	r0, [r3, #4]
 80033c4:	4770      	bx	lr

  return xo + w;
 80033c6:	4410      	add	r0, r2
 80033c8:	b280      	uxth	r0, r0
 80033ca:	4770      	bx	lr
    return 0;
 80033cc:	2000      	movs	r0, #0
}
 80033ce:	4770      	bx	lr
 80033d0:	20000488 	.word	0x20000488

080033d4 <ILI9341_GetTextWidth>:

uint16_t ILI9341_GetTextWidth(const char *Text)
{
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	4604      	mov	r4, r0

  NumChars = strlen(Text);

  pText = Text;

  TotalWidth=0;
 80033d8:	2500      	movs	r5, #0
  NumChars = strlen(Text);
 80033da:	f7fc ff31 	bl	8000240 <strlen>

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80033de:	fa14 f680 	uxtah	r6, r4, r0
 80033e2:	42b4      	cmp	r4, r6
 80033e4:	d101      	bne.n	80033ea <ILI9341_GetTextWidth+0x16>
    TotalWidth += GetCharWidth(*pText++);

  return TotalWidth;
}
 80033e6:	4628      	mov	r0, r5
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
    TotalWidth += GetCharWidth(*pText++);
 80033ea:	f814 0b01 	ldrb.w	r0, [r4], #1
 80033ee:	f7ff ffd7 	bl	80033a0 <GetCharWidth>
 80033f2:	4405      	add	r5, r0
 80033f4:	b2ad      	uxth	r5, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80033f6:	e7f4      	b.n	80033e2 <ILI9341_GetTextWidth+0xe>

080033f8 <ILI9341_DrawCharAtXY>:
uint8_t ILI9341_DrawCharAtXY(uint8_t Ch, uint16_t X, uint16_t Y, uint16_t Color)
// X: X position of left edge of char.
// Y: Y position of line on which the char sits. The char may go below this line (e.g. g j p q y).
// Returns required X advance.
// Based on Adafruit_GFX.cpp.
{
 80033f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fc:	4699      	mov	r9, r3
  uint8_t *pBitmap;
  uint16_t Color_MSBFirst, TextBackgroundColor_MSBFirst;
  uint16_t *pMemChar, *pMemCharPixel;
  uint8_t CharWidth, CharHeight;

  if (!pFont)
 80033fe:	4b9f      	ldr	r3, [pc, #636]	; (800367c <ILI9341_DrawCharAtXY+0x284>)
{
 8003400:	b08d      	sub	sp, #52	; 0x34
 8003402:	4693      	mov	fp, r2
  if (!pFont)
 8003404:	681b      	ldr	r3, [r3, #0]
{
 8003406:	9107      	str	r1, [sp, #28]
  if (!pFont)
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8134 	beq.w	8003676 <ILI9341_DrawCharAtXY+0x27e>
  return ((Ch < pFont->first) || (Ch > pFont->last));
 800340e:	7a1a      	ldrb	r2, [r3, #8]
 8003410:	4290      	cmp	r0, r2
 8003412:	f0c0 8130 	bcc.w	8003676 <ILI9341_DrawCharAtXY+0x27e>
    return 0;
  if (IsNonPrintingChar(Ch))
 8003416:	7a59      	ldrb	r1, [r3, #9]
 8003418:	4281      	cmp	r1, r0
 800341a:	f0c0 812c 	bcc.w	8003676 <ILI9341_DrawCharAtXY+0x27e>
    return 0;

  Ch -= pFont->first;
 800341e:	1a80      	subs	r0, r0, r2
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 8003420:	4a97      	ldr	r2, [pc, #604]	; (8003680 <ILI9341_DrawCharAtXY+0x288>)
    Y -= (pFont->yOffsetMin / 2);
 8003422:	f993 700b 	ldrsb.w	r7, [r3, #11]
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 8003426:	7812      	ldrb	r2, [r2, #0]
  Ch -= pFont->first;
 8003428:	b2c0      	uxtb	r0, r0
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 800342a:	2a02      	cmp	r2, #2

  pGlyph = &pFont->pGlyph[Ch];
 800342c:	685a      	ldr	r2, [r3, #4]
    Y -= (pFont->yOffsetMin / 2);
 800342e:	bf08      	it	eq
 8003430:	eb07 71d7 	addeq.w	r1, r7, r7, lsr #31
  pBitmap = pFont->pBitmap;

  bo = pGlyph->bitmapOffset;
 8003434:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
    Y -= (pFont->yOffsetMin / 2);
 8003438:	bf08      	it	eq
 800343a:	ebab 0b61 	subeq.w	fp, fp, r1, asr #1
  pGlyph = &pFont->pGlyph[Ch];
 800343e:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    Y -= (pFont->yOffsetMin / 2);
 8003442:	bf08      	it	eq
 8003444:	fa1f fb8b 	uxtheq.w	fp, fp
  pGlyph = &pFont->pGlyph[Ch];
 8003448:	9103      	str	r1, [sp, #12]
  w = pGlyph->width;
 800344a:	9a03      	ldr	r2, [sp, #12]
  pBitmap = pFont->pBitmap;
 800344c:	6819      	ldr	r1, [r3, #0]
  w = pGlyph->width;
 800344e:	7894      	ldrb	r4, [r2, #2]
  h = pGlyph->height;
 8003450:	78d2      	ldrb	r2, [r2, #3]
  pBitmap = pFont->pBitmap;
 8003452:	9106      	str	r1, [sp, #24]
  h = pGlyph->height;
 8003454:	9204      	str	r2, [sp, #16]
  xo = pGlyph->xOffset;
 8003456:	9a03      	ldr	r2, [sp, #12]
 8003458:	f992 2005 	ldrsb.w	r2, [r2, #5]
 800345c:	9205      	str	r2, [sp, #20]
  yo = pGlyph->yOffset;
 800345e:	9a03      	ldr	r2, [sp, #12]
 8003460:	f992 8006 	ldrsb.w	r8, [r2, #6]
  bits = 0;
  bit = 0;
  yo_min = pFont->yOffsetMin;
  yo_max = pFont->yOffsetMax;

  switch(TextDrawMode)
 8003464:	4a87      	ldr	r2, [pc, #540]	; (8003684 <ILI9341_DrawCharAtXY+0x28c>)
 8003466:	7812      	ldrb	r2, [r2, #0]
 8003468:	2a02      	cmp	r2, #2
 800346a:	d058      	beq.n	800351e <ILI9341_DrawCharAtXY+0x126>
 800346c:	2a03      	cmp	r2, #3
 800346e:	f000 80b9 	beq.w	80035e4 <ILI9341_DrawCharAtXY+0x1ec>
 8003472:	2a01      	cmp	r2, #1
 8003474:	d128      	bne.n	80034c8 <ILI9341_DrawCharAtXY+0xd0>
  {
    case tdmNone:
      break;

    case tdmThisCharBar:
      Color_MSBFirst = SwapBytes(Color);
 8003476:	4648      	mov	r0, r9
 8003478:	f7ff fbf0 	bl	8002c5c <SwapBytes>
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 800347c:	4b82      	ldr	r3, [pc, #520]	; (8003688 <ILI9341_DrawCharAtXY+0x290>)
      Color_MSBFirst = SwapBytes(Color);
 800347e:	4682      	mov	sl, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8003480:	8818      	ldrh	r0, [r3, #0]
 8003482:	f7ff fbeb 	bl	8002c5c <SwapBytes>
      pMemChar = (uint16_t *)malloc(w * h * 2);
 8003486:	9b04      	ldr	r3, [sp, #16]
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8003488:	4681      	mov	r9, r0
      pMemChar = (uint16_t *)malloc(w * h * 2);
 800348a:	fb14 f003 	smulbb	r0, r4, r3
 800348e:	0040      	lsls	r0, r0, #1
 8003490:	f000 ffc8 	bl	8004424 <malloc>
      pMemCharPixel = pMemChar;

      for (yy = 0; yy < h; ++yy)
 8003494:	2100      	movs	r1, #0
 8003496:	0063      	lsls	r3, r4, #1
      pMemChar = (uint16_t *)malloc(w * h * 2);
 8003498:	4606      	mov	r6, r0
      pMemCharPixel = pMemChar;
 800349a:	4607      	mov	r7, r0
  bit = 0;
 800349c:	468c      	mov	ip, r1
  bits = 0;
 800349e:	460a      	mov	r2, r1
 80034a0:	9308      	str	r3, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 80034a2:	b2c8      	uxtb	r0, r1
 80034a4:	9b04      	ldr	r3, [sp, #16]
 80034a6:	4283      	cmp	r3, r0
 80034a8:	d834      	bhi.n	8003514 <ILI9341_DrawCharAtXY+0x11c>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
          ++pMemCharPixel;
          bits <<= 1;
        }
      }
      ILI9341_DrawPixels_MSBFirst(X + xo, Y + yo, w, h, pMemChar);
 80034aa:	9b05      	ldr	r3, [sp, #20]
 80034ac:	eb0b 0108 	add.w	r1, fp, r8
 80034b0:	9807      	ldr	r0, [sp, #28]
 80034b2:	4622      	mov	r2, r4
 80034b4:	b289      	uxth	r1, r1
 80034b6:	9600      	str	r6, [sp, #0]
 80034b8:	4418      	add	r0, r3
 80034ba:	9b04      	ldr	r3, [sp, #16]
 80034bc:	b280      	uxth	r0, r0
 80034be:	f7ff fe47 	bl	8003150 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 80034c2:	4630      	mov	r0, r6
          ++pMemCharPixel;
          bits <<= 1;
        }
      }
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
      free(pMemChar);
 80034c4:	f000 ffb6 	bl	8004434 <free>
      }
      ILI9341_CSX_High();
      break;
  }

  if (w == 0)
 80034c8:	2c00      	cmp	r4, #0
 80034ca:	f040 80d0 	bne.w	800366e <ILI9341_DrawCharAtXY+0x276>
    return pGlyph->xAdvance;
 80034ce:	9b03      	ldr	r3, [sp, #12]
 80034d0:	7918      	ldrb	r0, [r3, #4]
  return xo + w;
}
 80034d2:	b00d      	add	sp, #52	; 0x34
 80034d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (!(bit++ & 7))
 80034d8:	f013 0f07 	tst.w	r3, #7
 80034dc:	f103 0c01 	add.w	ip, r3, #1
            bits = pBitmap[bo++];
 80034e0:	bf04      	itt	eq
 80034e2:	9a06      	ldreq	r2, [sp, #24]
 80034e4:	1c6b      	addeq	r3, r5, #1
          if (!(bit++ & 7))
 80034e6:	fa5f fc8c 	uxtb.w	ip, ip
            bits = pBitmap[bo++];
 80034ea:	bf04      	itt	eq
 80034ec:	5d52      	ldrbeq	r2, [r2, r5]
 80034ee:	b29d      	uxtheq	r5, r3
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80034f0:	f012 0f80 	tst.w	r2, #128	; 0x80
          bits <<= 1;
 80034f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80034f8:	bf14      	ite	ne
 80034fa:	4653      	movne	r3, sl
 80034fc:	464b      	moveq	r3, r9
          bits <<= 1;
 80034fe:	b2d2      	uxtb	r2, r2
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 8003500:	f82e 3b02 	strh.w	r3, [lr], #2
          if (!(bit++ & 7))
 8003504:	4663      	mov	r3, ip
        for (xx = 0; xx < w; ++xx)
 8003506:	4298      	cmp	r0, r3
 8003508:	d1e6      	bne.n	80034d8 <ILI9341_DrawCharAtXY+0xe0>
 800350a:	9b08      	ldr	r3, [sp, #32]
 800350c:	3101      	adds	r1, #1
 800350e:	4684      	mov	ip, r0
 8003510:	441f      	add	r7, r3
      for (yy = 0; yy < h; ++yy)
 8003512:	e7c6      	b.n	80034a2 <ILI9341_DrawCharAtXY+0xaa>
 8003514:	4663      	mov	r3, ip
 8003516:	46be      	mov	lr, r7
        for (xx = 0; xx < w; ++xx)
 8003518:	1918      	adds	r0, r3, r4
 800351a:	b2c0      	uxtb	r0, r0
 800351c:	e7f3      	b.n	8003506 <ILI9341_DrawCharAtXY+0x10e>
  yo_max = pFont->yOffsetMax;
 800351e:	f993 600c 	ldrsb.w	r6, [r3, #12]
      Color_MSBFirst = SwapBytes(Color);
 8003522:	4648      	mov	r0, r9
 8003524:	f7ff fb9a 	bl	8002c5c <SwapBytes>
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8003528:	4b57      	ldr	r3, [pc, #348]	; (8003688 <ILI9341_DrawCharAtXY+0x290>)
      CharHeight = yo_max - yo_min + 1;
 800352a:	3601      	adds	r6, #1
      Color_MSBFirst = SwapBytes(Color);
 800352c:	9009      	str	r0, [sp, #36]	; 0x24
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 800352e:	8818      	ldrh	r0, [r3, #0]
 8003530:	f7ff fb94 	bl	8002c5c <SwapBytes>
      CharHeight = yo_max - yo_min + 1;
 8003534:	1bf6      	subs	r6, r6, r7
      CharWidth = pGlyph->xAdvance;
 8003536:	9b03      	ldr	r3, [sp, #12]
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8003538:	900b      	str	r0, [sp, #44]	; 0x2c
      CharWidth = pGlyph->xAdvance;
 800353a:	f893 a004 	ldrb.w	sl, [r3, #4]
      CharHeight = yo_max - yo_min + 1;
 800353e:	b2f3      	uxtb	r3, r6
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 8003540:	fb1a f203 	smulbb	r2, sl, r3
      CharHeight = yo_max - yo_min + 1;
 8003544:	9308      	str	r3, [sp, #32]
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 8003546:	0050      	lsls	r0, r2, #1
 8003548:	920a      	str	r2, [sp, #40]	; 0x28
 800354a:	f000 ff6b 	bl	8004424 <malloc>
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800354e:	2100      	movs	r1, #0
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 8003550:	4681      	mov	r9, r0
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8003552:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003556:	b288      	uxth	r0, r1
 8003558:	4282      	cmp	r2, r0
 800355a:	dc1c      	bgt.n	8003596 <ILI9341_DrawCharAtXY+0x19e>
 800355c:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8003560:	eba8 0807 	sub.w	r8, r8, r7
 8003564:	2200      	movs	r2, #0
 8003566:	930a      	str	r3, [sp, #40]	; 0x28
 8003568:	9b05      	ldr	r3, [sp, #20]
  bit = 0;
 800356a:	4611      	mov	r1, r2
 800356c:	fb0a 3808 	mla	r8, sl, r8, r3
  bits = 0;
 8003570:	4613      	mov	r3, r2
 8003572:	eb09 0848 	add.w	r8, r9, r8, lsl #1
      for (yy = 0; yy < h; ++yy)
 8003576:	b2d0      	uxtb	r0, r2
 8003578:	9e04      	ldr	r6, [sp, #16]
 800357a:	4286      	cmp	r6, r0
 800357c:	d80f      	bhi.n	800359e <ILI9341_DrawCharAtXY+0x1a6>
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
 800357e:	eb0b 0107 	add.w	r1, fp, r7
 8003582:	9807      	ldr	r0, [sp, #28]
 8003584:	9b08      	ldr	r3, [sp, #32]
 8003586:	4652      	mov	r2, sl
 8003588:	b289      	uxth	r1, r1
 800358a:	f8cd 9000 	str.w	r9, [sp]
 800358e:	f7ff fddf 	bl	8003150 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 8003592:	4648      	mov	r0, r9
 8003594:	e796      	b.n	80034c4 <ILI9341_DrawCharAtXY+0xcc>
        *pMemCharPixel++ = TextBackgroundColor_MSBFirst;
 8003596:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800359a:	3101      	adds	r1, #1
 800359c:	e7db      	b.n	8003556 <ILI9341_DrawCharAtXY+0x15e>
        for (xx = 0; xx < w; ++xx)
 800359e:	2000      	movs	r0, #0
 80035a0:	fa5f fc80 	uxtb.w	ip, r0
 80035a4:	fa51 fe80 	uxtab	lr, r1, r0
 80035a8:	4564      	cmp	r4, ip
 80035aa:	fa5f fe8e 	uxtb.w	lr, lr
 80035ae:	d805      	bhi.n	80035bc <ILI9341_DrawCharAtXY+0x1c4>
 80035b0:	4421      	add	r1, r4
 80035b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80035b4:	3201      	adds	r2, #1
 80035b6:	b2c9      	uxtb	r1, r1
      for (yy = 0; yy < h; ++yy)
 80035b8:	4480      	add	r8, r0
 80035ba:	e7dc      	b.n	8003576 <ILI9341_DrawCharAtXY+0x17e>
          if (!(bit++ & 7))
 80035bc:	f01e 0f07 	tst.w	lr, #7
            bits = pBitmap[bo++];
 80035c0:	bf01      	itttt	eq
 80035c2:	9b06      	ldreq	r3, [sp, #24]
 80035c4:	f105 0c01 	addeq.w	ip, r5, #1
 80035c8:	5d5b      	ldrbeq	r3, [r3, r5]
 80035ca:	fa1f f58c 	uxtheq.w	r5, ip
          if (bits & 0x80)
 80035ce:	061e      	lsls	r6, r3, #24
          bits <<= 1;
 80035d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
            *pMemCharPixel = Color_MSBFirst;
 80035d4:	bf48      	it	mi
 80035d6:	9e09      	ldrmi	r6, [sp, #36]	; 0x24
          bits <<= 1;
 80035d8:	b2db      	uxtb	r3, r3
            *pMemCharPixel = Color_MSBFirst;
 80035da:	bf48      	it	mi
 80035dc:	f828 6010 	strhmi.w	r6, [r8, r0, lsl #1]
        for (xx = 0; xx < w; ++xx)
 80035e0:	3001      	adds	r0, #1
 80035e2:	e7dd      	b.n	80035a0 <ILI9341_DrawCharAtXY+0x1a8>
      ILI9341_CSX_Low();
 80035e4:	2102      	movs	r1, #2
 80035e6:	2200      	movs	r2, #0
 80035e8:	4828      	ldr	r0, [pc, #160]	; (800368c <ILI9341_DrawCharAtXY+0x294>)
      for (yy = 0; yy < h; ++yy)
 80035ea:	2600      	movs	r6, #0
      ILI9341_CSX_Low();
 80035ec:	f7fd fb52 	bl	8000c94 <HAL_GPIO_WritePin>
      for (yy = 0; yy < h; ++yy)
 80035f0:	9907      	ldr	r1, [sp, #28]
 80035f2:	9b05      	ldr	r3, [sp, #20]
  bit = 0;
 80035f4:	46b2      	mov	sl, r6
  bits = 0;
 80035f6:	4637      	mov	r7, r6
 80035f8:	4419      	add	r1, r3
 80035fa:	b28b      	uxth	r3, r1
 80035fc:	9307      	str	r3, [sp, #28]
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80035fe:	eb0b 0308 	add.w	r3, fp, r8
 8003602:	9308      	str	r3, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 8003604:	b2f3      	uxtb	r3, r6
 8003606:	9a04      	ldr	r2, [sp, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d92a      	bls.n	8003662 <ILI9341_DrawCharAtXY+0x26a>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 800360c:	9a08      	ldr	r2, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 800360e:	4653      	mov	r3, sl
 8003610:	f8dd 801c 	ldr.w	r8, [sp, #28]
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 8003614:	1991      	adds	r1, r2, r6
 8003616:	b209      	sxth	r1, r1
 8003618:	e01b      	b.n	8003652 <ILI9341_DrawCharAtXY+0x25a>
          if (!(bit++ & 7))
 800361a:	075a      	lsls	r2, r3, #29
 800361c:	f103 0b01 	add.w	fp, r3, #1
            bits = pBitmap[bo++];
 8003620:	bf04      	itt	eq
 8003622:	9a06      	ldreq	r2, [sp, #24]
 8003624:	1c6b      	addeq	r3, r5, #1
          if (!(bit++ & 7))
 8003626:	fa5f fb8b 	uxtb.w	fp, fp
            bits = pBitmap[bo++];
 800362a:	bf04      	itt	eq
 800362c:	5d57      	ldrbeq	r7, [r2, r5]
 800362e:	b29d      	uxtheq	r5, r3
          if (bits & 0x80)
 8003630:	063b      	lsls	r3, r7, #24
 8003632:	d507      	bpl.n	8003644 <ILI9341_DrawCharAtXY+0x24c>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 8003634:	2300      	movs	r3, #0
 8003636:	464a      	mov	r2, r9
 8003638:	fa0f f088 	sxth.w	r0, r8
 800363c:	9109      	str	r1, [sp, #36]	; 0x24
 800363e:	f7ff fd4b 	bl	80030d8 <ILI9341_DrawPixel>
 8003642:	9909      	ldr	r1, [sp, #36]	; 0x24
          bits <<= 1;
 8003644:	007f      	lsls	r7, r7, #1
 8003646:	f108 0801 	add.w	r8, r8, #1
          if (!(bit++ & 7))
 800364a:	465b      	mov	r3, fp
          bits <<= 1;
 800364c:	b2ff      	uxtb	r7, r7
        for (xx = 0; xx < w; ++xx)
 800364e:	fa1f f888 	uxth.w	r8, r8
 8003652:	eb0a 0204 	add.w	r2, sl, r4
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	4293      	cmp	r3, r2
 800365a:	d1de      	bne.n	800361a <ILI9341_DrawCharAtXY+0x222>
      for (yy = 0; yy < h; ++yy)
 800365c:	3601      	adds	r6, #1
        for (xx = 0; xx < w; ++xx)
 800365e:	469a      	mov	sl, r3
 8003660:	e7d0      	b.n	8003604 <ILI9341_DrawCharAtXY+0x20c>
      ILI9341_CSX_High();
 8003662:	2201      	movs	r2, #1
 8003664:	2102      	movs	r1, #2
 8003666:	4809      	ldr	r0, [pc, #36]	; (800368c <ILI9341_DrawCharAtXY+0x294>)
 8003668:	f7fd fb14 	bl	8000c94 <HAL_GPIO_WritePin>
      break;
 800366c:	e72c      	b.n	80034c8 <ILI9341_DrawCharAtXY+0xd0>
  return xo + w;
 800366e:	9805      	ldr	r0, [sp, #20]
 8003670:	4420      	add	r0, r4
 8003672:	b2c0      	uxtb	r0, r0
 8003674:	e72d      	b.n	80034d2 <ILI9341_DrawCharAtXY+0xda>
    return 0;
 8003676:	2000      	movs	r0, #0
 8003678:	e72b      	b.n	80034d2 <ILI9341_DrawCharAtXY+0xda>
 800367a:	bf00      	nop
 800367c:	20000488 	.word	0x20000488
 8003680:	2000000b 	.word	0x2000000b
 8003684:	2000000a 	.word	0x2000000a
 8003688:	20000480 	.word	0x20000480
 800368c:	40020800 	.word	0x40020800

08003690 <ILI9341_SetTextColor>:

uint16_t ILI9341_SetTextColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextColor;
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <ILI9341_SetTextColor+0xc>)
 8003692:	881a      	ldrh	r2, [r3, #0]
  TextColor = Value;
 8003694:	8018      	strh	r0, [r3, #0]
  return Result;
}
 8003696:	4610      	mov	r0, r2
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000008 	.word	0x20000008

080036a0 <ILI9341_SetTextBackgroundColor>:

uint16_t ILI9341_SetTextBackgroundColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextBackgroundColor;
 80036a0:	4b02      	ldr	r3, [pc, #8]	; (80036ac <ILI9341_SetTextBackgroundColor+0xc>)
 80036a2:	881a      	ldrh	r2, [r3, #0]
  TextBackgroundColor = Value;
 80036a4:	8018      	strh	r0, [r3, #0]
  return Result;
}
 80036a6:	4610      	mov	r0, r2
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000480 	.word	0x20000480

080036b0 <ILI9341_SetTextDrawMode>:

TextDrawMode_t ILI9341_SetTextDrawMode(TextDrawMode_t Value)
{
 80036b0:	4602      	mov	r2, r0
  TextDrawMode_t Result;

  Result = TextDrawMode;
 80036b2:	4b02      	ldr	r3, [pc, #8]	; (80036bc <ILI9341_SetTextDrawMode+0xc>)
 80036b4:	7818      	ldrb	r0, [r3, #0]
  TextDrawMode = Value;
 80036b6:	701a      	strb	r2, [r3, #0]
  return Result;
}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	2000000a 	.word	0x2000000a

080036c0 <ILI9341_DrawTextAtXY>:
  TextVerticalOrigin = Value;
  return Result;
}

void ILI9341_DrawTextAtXY(const char *Text, uint16_t X, uint16_t Y, TextPosition_t TextPosition)
{
 80036c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036c4:	460d      	mov	r5, r1
 80036c6:	4690      	mov	r8, r2
 80036c8:	461f      	mov	r7, r3
  uint16_t NumChars;
  uint8_t DX;
  
  pText = (uint8_t *) Text;

  if (!pText)
 80036ca:	4604      	mov	r4, r0
 80036cc:	b158      	cbz	r0, 80036e6 <ILI9341_DrawTextAtXY+0x26>
    return;

  NumChars = strlen(Text);
 80036ce:	f7fc fdb7 	bl	8000240 <strlen>

  switch (TextPosition)
 80036d2:	2f02      	cmp	r7, #2
  NumChars = strlen(Text);
 80036d4:	4606      	mov	r6, r0
  switch (TextPosition)
 80036d6:	d008      	beq.n	80036ea <ILI9341_DrawTextAtXY+0x2a>
 80036d8:	2f03      	cmp	r7, #3
 80036da:	d00d      	beq.n	80036f8 <ILI9341_DrawTextAtXY+0x38>
 80036dc:	fa14 f686 	uxtah	r6, r4, r6
  }

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
  {
    Ch = *pText;
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 80036e0:	4f0d      	ldr	r7, [pc, #52]	; (8003718 <ILI9341_DrawTextAtXY+0x58>)
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80036e2:	42b4      	cmp	r4, r6
 80036e4:	d10d      	bne.n	8003702 <ILI9341_DrawTextAtXY+0x42>
    ++pText;
    X += DX;
  }
}
 80036e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      X -= ILI9341_GetTextWidth(Text) / 2;
 80036ea:	4620      	mov	r0, r4
 80036ec:	f7ff fe72 	bl	80033d4 <ILI9341_GetTextWidth>
 80036f0:	eba5 0550 	sub.w	r5, r5, r0, lsr #1
      X -= ILI9341_GetTextWidth(Text);
 80036f4:	b2ad      	uxth	r5, r5
      break;
 80036f6:	e7f1      	b.n	80036dc <ILI9341_DrawTextAtXY+0x1c>
      X -= ILI9341_GetTextWidth(Text);
 80036f8:	4620      	mov	r0, r4
 80036fa:	f7ff fe6b 	bl	80033d4 <ILI9341_GetTextWidth>
 80036fe:	1a2d      	subs	r5, r5, r0
 8003700:	e7f8      	b.n	80036f4 <ILI9341_DrawTextAtXY+0x34>
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 8003702:	4629      	mov	r1, r5
 8003704:	883b      	ldrh	r3, [r7, #0]
 8003706:	4642      	mov	r2, r8
 8003708:	f814 0b01 	ldrb.w	r0, [r4], #1
 800370c:	f7ff fe74 	bl	80033f8 <ILI9341_DrawCharAtXY>
    X += DX;
 8003710:	4405      	add	r5, r0
 8003712:	b2ad      	uxth	r5, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8003714:	e7e5      	b.n	80036e2 <ILI9341_DrawTextAtXY+0x22>
 8003716:	bf00      	nop
 8003718:	20000008 	.word	0x20000008

0800371c <XPT2046_Initialize>:

///////////////////////////////////////////////////////////////////////////////

void XPT2046_Initialize(SPI_HandleTypeDef *i_phspi)
{
  phspi = i_phspi;
 800371c:	4b01      	ldr	r3, [pc, #4]	; (8003724 <XPT2046_Initialize+0x8>)
 800371e:	6018      	str	r0, [r3, #0]
}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000490 	.word	0x20000490

08003728 <ESP32_A_Enable>:

///////////////////////////////////////////////////////////////////////////////
// ESP32s:

void ESP32_A_Enable(uint8_t Value)
{
 8003728:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(ESP32_A_EN_GPIO_Port, ESP32_A_EN_Pin, Value);
 800372a:	2102      	movs	r1, #2
 800372c:	4801      	ldr	r0, [pc, #4]	; (8003734 <ESP32_A_Enable+0xc>)
 800372e:	f7fd bab1 	b.w	8000c94 <HAL_GPIO_WritePin>
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000

08003738 <ESP32_B_Enable>:
}

void ESP32_B_Enable(uint8_t Value)
{
 8003738:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(ESP32_B_EN_GPIO_Port, ESP32_B_EN_Pin, Value);
 800373a:	2110      	movs	r1, #16
 800373c:	4801      	ldr	r0, [pc, #4]	; (8003744 <ESP32_B_Enable+0xc>)
 800373e:	f7fd baa9 	b.w	8000c94 <HAL_GPIO_WritePin>
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000

08003748 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003748:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <MX_DMA_Init+0x90>)
{
 800374a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800374c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800374e:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003750:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
 8003756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003758:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800375c:	9200      	str	r2, [sp, #0]
 800375e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003762:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003768:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800376c:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003776:	f7fc ffa3 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800377a:	2010      	movs	r0, #16
 800377c:	f7fc ffd2 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003780:	2200      	movs	r2, #0
 8003782:	2011      	movs	r0, #17
 8003784:	4611      	mov	r1, r2
 8003786:	f7fc ff9b 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800378a:	2011      	movs	r0, #17
 800378c:	f7fc ffca 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003790:	2200      	movs	r2, #0
 8003792:	2039      	movs	r0, #57	; 0x39
 8003794:	4611      	mov	r1, r2
 8003796:	f7fc ff93 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800379a:	2039      	movs	r0, #57	; 0x39
 800379c:	f7fc ffc2 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80037a0:	2200      	movs	r2, #0
 80037a2:	203a      	movs	r0, #58	; 0x3a
 80037a4:	4611      	mov	r1, r2
 80037a6:	f7fc ff8b 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80037aa:	203a      	movs	r0, #58	; 0x3a
 80037ac:	f7fc ffba 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	203b      	movs	r0, #59	; 0x3b
 80037b4:	4611      	mov	r1, r2
 80037b6:	f7fc ff83 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80037ba:	203b      	movs	r0, #59	; 0x3b
 80037bc:	f7fc ffb2 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2044      	movs	r0, #68	; 0x44
 80037c4:	4611      	mov	r1, r2
 80037c6:	f7fc ff7b 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80037ca:	2044      	movs	r0, #68	; 0x44

}
 80037cc:	b003      	add	sp, #12
 80037ce:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80037d2:	f7fc bfa7 	b.w	8000724 <HAL_NVIC_EnableIRQ>
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800

080037dc <Go>:
#include "FreeSans9pt7b.h"
#include "FreeSans12pt7b.h"
#include "go.h"

void Go()
{
 80037dc:	b508      	push	{r3, lr}
  uint16_t Y = 0;

  ILI9341_SetFont(&FreeSans9pt7b);
 80037de:	4811      	ldr	r0, [pc, #68]	; (8003824 <Go+0x48>)
 80037e0:	f7ff fdd0 	bl	8003384 <ILI9341_SetFont>
  ILI9341_SetTextColor(ILI9341_COLOR_WHITE);
 80037e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80037e8:	f7ff ff52 	bl	8003690 <ILI9341_SetTextColor>
  ILI9341_SetTextBackgroundColor(ILI9341_COLOR_BLACK);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f7ff ff57 	bl	80036a0 <ILI9341_SetTextBackgroundColor>
  ILI9341_SetTextDrawMode(tdmAnyCharBar); // Slower but enables flicker free update.
 80037f2:	2002      	movs	r0, #2
 80037f4:	f7ff ff5c 	bl	80036b0 <ILI9341_SetTextDrawMode>

  ILI9341_Clear(0x0000);
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7ff fdb7 	bl	800336c <ILI9341_Clear>

  ESP32_A_Enable(1);
 80037fe:	2001      	movs	r0, #1
 8003800:	f7ff ff92 	bl	8003728 <ESP32_A_Enable>
  ESP32_B_Enable(1);
 8003804:	2001      	movs	r0, #1
 8003806:	f7ff ff97 	bl	8003738 <ESP32_B_Enable>

  Y += ILI9341_GetFontYSpacing();
 800380a:	f7ff fdc3 	bl	8003394 <ILI9341_GetFontYSpacing>
  ILI9341_DrawTextAtXY("ESP32s enabled", 0, Y, tpLeft);
 800380e:	2301      	movs	r3, #1
 8003810:	b282      	uxth	r2, r0
 8003812:	2100      	movs	r1, #0
 8003814:	4804      	ldr	r0, [pc, #16]	; (8003828 <Go+0x4c>)
 8003816:	f7ff ff53 	bl	80036c0 <ILI9341_DrawTextAtXY>

  while(1)
  {
    HAL_Delay(100);
 800381a:	2064      	movs	r0, #100	; 0x64
 800381c:	f7fc ff2c 	bl	8000678 <HAL_Delay>
  while(1)
 8003820:	e7fb      	b.n	800381a <Go+0x3e>
 8003822:	bf00      	nop
 8003824:	08006df0 	.word	0x08006df0
 8003828:	08006de0 	.word	0x08006de0

0800382c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 800382c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003832:	2214      	movs	r2, #20
 8003834:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_EN_Pin|ESP32_B_NSS_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 8003836:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80039f8 <MX_GPIO_Init+0x1cc>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383a:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 800383c:	4e6b      	ldr	r6, [pc, #428]	; (80039ec <MX_GPIO_Init+0x1c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383e:	f000 fe01 	bl	8004444 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003842:	4b6b      	ldr	r3, [pc, #428]	; (80039f0 <MX_GPIO_Init+0x1c4>)
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_EN_Pin|ESP32_B_NSS_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 8003844:	4640      	mov	r0, r8
 8003846:	2136      	movs	r1, #54	; 0x36
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_EN_Pin|ESP32_B_NSS_Pin|ESP32_A_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384a:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 800384c:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80039fc <MX_GPIO_Init+0x1d0>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003850:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003852:	f042 0210 	orr.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin 
 8003856:	4f67      	ldr	r7, [pc, #412]	; (80039f4 <MX_GPIO_Init+0x1c8>)
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8003858:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8003a00 <MX_GPIO_Init+0x1d4>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
 800385e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003860:	f002 0210 	and.w	r2, r2, #16
 8003864:	9201      	str	r2, [sp, #4]
 8003866:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386a:	f042 0204 	orr.w	r2, r2, #4
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
 8003870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003872:	f002 0204 	and.w	r2, r2, #4
 8003876:	9202      	str	r2, [sp, #8]
 8003878:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800387a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
 8003882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003884:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003888:	9203      	str	r2, [sp, #12]
 800388a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800388c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
 8003894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003896:	f002 0201 	and.w	r2, r2, #1
 800389a:	9204      	str	r2, [sp, #16]
 800389c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800389e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a0:	f042 0202 	orr.w	r2, r2, #2
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
 80038a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a8:	f002 0202 	and.w	r2, r2, #2
 80038ac:	9205      	str	r2, [sp, #20]
 80038ae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b2:	f042 0208 	orr.w	r2, r2, #8
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_EN_Pin|ESP32_B_NSS_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 80038b8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	9306      	str	r3, [sp, #24]
 80038c2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_EN_Pin|ESP32_B_NSS_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 80038c4:	f7fd f9e6 	bl	8000c94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 80038c8:	4630      	mov	r0, r6
 80038ca:	2201      	movs	r2, #1
 80038cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d0:	f7fd f9e0 	bl	8000c94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 80038d4:	4630      	mov	r0, r6
 80038d6:	2200      	movs	r2, #0
 80038d8:	210f      	movs	r1, #15
 80038da:	f7fd f9db 	bl	8000c94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 80038de:	4650      	mov	r0, sl
 80038e0:	2200      	movs	r2, #0
 80038e2:	210e      	movs	r1, #14
 80038e4:	f7fd f9d6 	bl	8000c94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin 
 80038e8:	4638      	mov	r0, r7
 80038ea:	2200      	movs	r2, #0
 80038ec:	f641 0143 	movw	r1, #6211	; 0x1843
 80038f0:	f7fd f9d0 	bl	8000c94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 80038f4:	2200      	movs	r2, #0
 80038f6:	4648      	mov	r0, r9
 80038f8:	217f      	movs	r1, #127	; 0x7f
 80038fa:	f7fd f9cb 	bl	8000c94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038fe:	2336      	movs	r3, #54	; 0x36
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003900:	a907      	add	r1, sp, #28
 8003902:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003904:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003908:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800390c:	f7fd f8d0 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 8003910:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003912:	a907      	add	r1, sp, #28
 8003914:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	9409      	str	r4, [sp, #36]	; 0x24

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003918:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003a04 <MX_GPIO_Init+0x1d8>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800391c:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003920:	f7fd f8c6 	bl	8000ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 8003928:	a907      	add	r1, sp, #28
 800392a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800392e:	e9cd 3807 	strd	r3, r8, [sp, #28]
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 8003932:	f7fd f8bd 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin|LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin 
 8003936:	f248 030f 	movw	r3, #32783	; 0x800f
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393a:	a907      	add	r1, sp, #28
 800393c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800393e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003942:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003946:	f7fd f8b3 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 800394a:	230e      	movs	r3, #14
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394c:	a907      	add	r1, sp, #28
 800394e:	4650      	mov	r0, sl

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003950:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003954:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003958:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395c:	f7fd f8a8 	bl	8000ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin;
 8003960:	f640 0303 	movw	r3, #2051	; 0x803
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003964:	a907      	add	r1, sp, #28
 8003966:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800396a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800396e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003972:	f7fd f89d 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 8003976:	f44f 5382 	mov.w	r3, #4160	; 0x1040
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397a:	a907      	add	r1, sp, #28
 800397c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800397e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003982:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003986:	f7fd f893 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800398a:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398e:	a907      	add	r1, sp, #28
 8003990:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	e9cd 3a07 	strd	r3, sl, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003996:	2305      	movs	r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003998:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800399c:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800399e:	f7fd f887 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 80039a2:	237f      	movs	r3, #127	; 0x7f
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039a4:	a907      	add	r1, sp, #28
 80039a6:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a8:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ac:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039b0:	f7fd f87e 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
 80039b4:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 80039b6:	a907      	add	r1, sp, #28
 80039b8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039bc:	e9cd 3807 	strd	r3, r8, [sp, #28]
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 80039c0:	f7fd f876 	bl	8000ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80039c4:	4622      	mov	r2, r4
 80039c6:	4621      	mov	r1, r4
 80039c8:	2017      	movs	r0, #23
 80039ca:	f7fc fe79 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039ce:	2017      	movs	r0, #23
 80039d0:	f7fc fea8 	bl	8000724 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80039d4:	4622      	mov	r2, r4
 80039d6:	4621      	mov	r1, r4
 80039d8:	2028      	movs	r0, #40	; 0x28
 80039da:	f7fc fe71 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039de:	2028      	movs	r0, #40	; 0x28
 80039e0:	f7fc fea0 	bl	8000724 <HAL_NVIC_EnableIRQ>

}
 80039e4:	b00c      	add	sp, #48	; 0x30
 80039e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ea:	bf00      	nop
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40020000 	.word	0x40020000
 8003a00:	40020c00 	.word	0x40020c00
 8003a04:	10210000 	.word	0x10210000

08003a08 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a08:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003a0a:	4812      	ldr	r0, [pc, #72]	; (8003a54 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x6000030D;
 8003a0c:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <MX_I2C1_Init+0x50>)
 8003a0e:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <MX_I2C1_Init+0x54>)
 8003a10:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a14:	2300      	movs	r3, #0
 8003a16:	2201      	movs	r2, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8003a18:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a1c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a20:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a24:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a26:	f7fd f976 	bl	8000d16 <HAL_I2C_Init>
 8003a2a:	b108      	cbz	r0, 8003a30 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8003a2c:	f000 f960 	bl	8003cf0 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a30:	2100      	movs	r1, #0
 8003a32:	4808      	ldr	r0, [pc, #32]	; (8003a54 <MX_I2C1_Init+0x4c>)
 8003a34:	f7fd fc1a 	bl	800126c <HAL_I2CEx_ConfigAnalogFilter>
 8003a38:	b108      	cbz	r0, 8003a3e <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8003a3a:	f000 f959 	bl	8003cf0 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4804      	ldr	r0, [pc, #16]	; (8003a54 <MX_I2C1_Init+0x4c>)
 8003a42:	f7fd fc39 	bl	80012b8 <HAL_I2CEx_ConfigDigitalFilter>
 8003a46:	b118      	cbz	r0, 8003a50 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8003a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003a4c:	f000 b950 	b.w	8003cf0 <Error_Handler>
}
 8003a50:	bd08      	pop	{r3, pc}
 8003a52:	bf00      	nop
 8003a54:	20000554 	.word	0x20000554
 8003a58:	40005400 	.word	0x40005400
 8003a5c:	6000030d 	.word	0x6000030d

08003a60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a60:	b530      	push	{r4, r5, lr}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a66:	2214      	movs	r2, #20
 8003a68:	2100      	movs	r1, #0
 8003a6a:	a803      	add	r0, sp, #12
 8003a6c:	f000 fcea 	bl	8004444 <memset>
  if(i2cHandle->Instance==I2C1)
 8003a70:	682a      	ldr	r2, [r5, #0]
 8003a72:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <HAL_I2C_MspInit+0xf4>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d16a      	bne.n	8003b4e <HAL_I2C_MspInit+0xee>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a78:	4c37      	ldr	r4, [pc, #220]	; (8003b58 <HAL_I2C_MspInit+0xf8>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a7a:	f44f 7140 	mov.w	r1, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7e:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a82:	f043 0302 	orr.w	r3, r3, #2
 8003a86:	6323      	str	r3, [r4, #48]	; 0x30
 8003a88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a92:	2312      	movs	r3, #18
 8003a94:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a98:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9c:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003aa0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aa2:	482e      	ldr	r0, [pc, #184]	; (8003b5c <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003aa4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aa6:	f7fd f803 	bl	8000ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003ab0:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8003b6c <HAL_I2C_MspInit+0x10c>
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ab4:	f04f 0e40 	mov.w	lr, #64	; 0x40
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003abc:	6423      	str	r3, [r4, #64]	; 0x40
 8003abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003ac0:	4c27      	ldr	r4, [pc, #156]	; (8003b60 <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003ac6:	4620      	mov	r0, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ac8:	9302      	str	r3, [sp, #8]
 8003aca:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ad0:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ad4:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ad6:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ade:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003ae2:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ae6:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003aea:	f7fc fe53 	bl	8000794 <HAL_DMA_Init>
 8003aee:	b108      	cbz	r0, 8003af4 <HAL_I2C_MspInit+0x94>
    {
      Error_Handler();
 8003af0:	f000 f8fe 	bl	8003cf0 <Error_Handler>

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003af4:	4a1b      	ldr	r2, [pc, #108]	; (8003b64 <HAL_I2C_MspInit+0x104>)
 8003af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003afa:	63ac      	str	r4, [r5, #56]	; 0x38
 8003afc:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8003afe:	4c1a      	ldr	r4, [pc, #104]	; (8003b68 <HAL_I2C_MspInit+0x108>)
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003b00:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b04:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003b0a:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b0c:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003b10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b14:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003b18:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b1c:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003b20:	f7fc fe38 	bl	8000794 <HAL_DMA_Init>
 8003b24:	b108      	cbz	r0, 8003b2a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8003b26:	f000 f8e3 	bl	8003cf0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003b2e:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b30:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003b32:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b34:	f7fc fdc4 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b38:	201f      	movs	r0, #31
 8003b3a:	f7fc fdf3 	bl	8000724 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2020      	movs	r0, #32
 8003b42:	4611      	mov	r1, r2
 8003b44:	f7fc fdbc 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b48:	2020      	movs	r0, #32
 8003b4a:	f7fc fdeb 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b4e:	b009      	add	sp, #36	; 0x24
 8003b50:	bd30      	pop	{r4, r5, pc}
 8003b52:	bf00      	nop
 8003b54:	40005400 	.word	0x40005400
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40020400 	.word	0x40020400
 8003b60:	200004f4 	.word	0x200004f4
 8003b64:	40026088 	.word	0x40026088
 8003b68:	20000494 	.word	0x20000494
 8003b6c:	400260a0 	.word	0x400260a0

08003b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b70:	b510      	push	{r4, lr}
 8003b72:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b74:	222c      	movs	r2, #44	; 0x2c
 8003b76:	2100      	movs	r1, #0
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b78:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b7a:	a809      	add	r0, sp, #36	; 0x24
 8003b7c:	f000 fc62 	bl	8004444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b80:	2214      	movs	r2, #20
 8003b82:	2100      	movs	r1, #0
 8003b84:	a802      	add	r0, sp, #8
 8003b86:	f000 fc5d 	bl	8004444 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b8a:	2290      	movs	r2, #144	; 0x90
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	a814      	add	r0, sp, #80	; 0x50
 8003b90:	f000 fc58 	bl	8004444 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <SystemClock_Config+0xbc>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003b96:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003b98:	f04f 0c19 	mov.w	ip, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <SystemClock_Config+0xc0>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003bc2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003bc6:	e9cd 0307 	strd	r0, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bce:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bd0:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003bd4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003bd8:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003bdc:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003be0:	f7fd fbc8 	bl	8001374 <HAL_RCC_OscConfig>
 8003be4:	b100      	cbz	r0, 8003be8 <SystemClock_Config+0x78>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8003be6:	e7fe      	b.n	8003be6 <SystemClock_Config+0x76>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003be8:	f7fd fb8c 	bl	8001304 <HAL_PWREx_EnableOverDrive>
 8003bec:	b100      	cbz	r0, 8003bf0 <SystemClock_Config+0x80>
  while(1) 
 8003bee:	e7fe      	b.n	8003bee <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bf0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bf2:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bf6:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003bf8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bfa:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c02:	e9cd 1305 	strd	r1, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003c06:	2107      	movs	r1, #7
 8003c08:	f7fd fd7a 	bl	8001700 <HAL_RCC_ClockConfig>
 8003c0c:	b100      	cbz	r0, 8003c10 <SystemClock_Config+0xa0>
  while(1) 
 8003c0e:	e7fe      	b.n	8003c0e <SystemClock_Config+0x9e>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1;
 8003c10:	f44f 1382 	mov.w	r3, #1064960	; 0x104000
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c14:	902d      	str	r0, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c16:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1;
 8003c18:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PIN;
 8003c1a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003c1e:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c20:	f7fd fe0a 	bl	8001838 <HAL_RCCEx_PeriphCLKConfig>
 8003c24:	b100      	cbz	r0, 8003c28 <SystemClock_Config+0xb8>
  while(1) 
 8003c26:	e7fe      	b.n	8003c26 <SystemClock_Config+0xb6>
}
 8003c28:	b038      	add	sp, #224	; 0xe0
 8003c2a:	bd10      	pop	{r4, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40007000 	.word	0x40007000

08003c34 <main>:
{
 8003c34:	b508      	push	{r3, lr}
  __ASM volatile ("dsb 0xF":::"memory");
 8003c36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c3a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003c3e:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <main+0xb0>)
 8003c40:	2100      	movs	r1, #0
 8003c42:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003c46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c4a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003c4e:	6953      	ldr	r3, [r2, #20]
 8003c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c54:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c5a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003c5e:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003c62:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003c66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003c6a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003c6e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003c72:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003c76:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003c78:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003c7c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003c7e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003c82:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003c84:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8003c88:	d2f9      	bcs.n	8003c7e <main+0x4a>
    } while(sets-- != 0U);
 8003c8a:	3b20      	subs	r3, #32
 8003c8c:	f113 0f20 	cmn.w	r3, #32
 8003c90:	d1f2      	bne.n	8003c78 <main+0x44>
 8003c92:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003c96:	6953      	ldr	r3, [r2, #20]
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6153      	str	r3, [r2, #20]
 8003c9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ca2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8003ca6:	f7fc fcc9 	bl	800063c <HAL_Init>
  SystemClock_Config();
 8003caa:	f7ff ff61 	bl	8003b70 <SystemClock_Config>
  MX_GPIO_Init();
 8003cae:	f7ff fdbd 	bl	800382c <MX_GPIO_Init>
  MX_DMA_Init();
 8003cb2:	f7ff fd49 	bl	8003748 <MX_DMA_Init>
  MX_I2C1_Init();
 8003cb6:	f7ff fea7 	bl	8003a08 <MX_I2C1_Init>
  MX_SAI2_Init();
 8003cba:	f000 f81b 	bl	8003cf4 <MX_SAI2_Init>
  MX_SPI1_Init();
 8003cbe:	f000 f8fb 	bl	8003eb8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003cc2:	f000 f91f 	bl	8003f04 <MX_SPI2_Init>
  MX_SPI3_Init();
 8003cc6:	f000 f945 	bl	8003f54 <MX_SPI3_Init>
  MX_TIM1_Init();
 8003cca:	f000 faf9 	bl	80042c0 <MX_TIM1_Init>
  ILI9341_Initialize(&hspi1, 0);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4805      	ldr	r0, [pc, #20]	; (8003ce8 <main+0xb4>)
 8003cd2:	f7ff f873 	bl	8002dbc <ILI9341_Initialize>
  XPT2046_Initialize(&hspi2);
 8003cd6:	4805      	ldr	r0, [pc, #20]	; (8003cec <main+0xb8>)
 8003cd8:	f7ff fd20 	bl	800371c <XPT2046_Initialize>
  Go();
 8003cdc:	f7ff fd7e 	bl	80037dc <Go>
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <main+0xac>
 8003ce2:	bf00      	nop
 8003ce4:	e000ed00 	.word	0xe000ed00
 8003ce8:	200007cc 	.word	0x200007cc
 8003cec:	20000830 	.word	0x20000830

08003cf0 <Error_Handler>:
  while(1) 
 8003cf0:	e7fe      	b.n	8003cf0 <Error_Handler>
	...

08003cf4 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8003cf4:	b508      	push	{r3, lr}

  hsai_BlockA2.Instance = SAI2_Block_A;
 8003cf6:	4817      	ldr	r0, [pc, #92]	; (8003d54 <MX_SAI2_Init+0x60>)
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <MX_SAI2_Init+0x64>)
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003cfc:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003cfe:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003d00:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003d02:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8003d04:	e9c0 3100 	strd	r3, r1, [r0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8003d08:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003d0c:	61c3      	str	r3, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003d0e:	2302      	movs	r3, #2
 8003d10:	461a      	mov	r2, r3
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003d12:	e9c0 1104 	strd	r1, r1, [r0, #16]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003d16:	e9c0 1109 	strd	r1, r1, [r0, #36]	; 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003d1a:	f7fe f9ab 	bl	8002074 <HAL_SAI_InitProtocol>
 8003d1e:	b108      	cbz	r0, 8003d24 <MX_SAI2_Init+0x30>
  {
    Error_Handler();
 8003d20:	f7ff ffe6 	bl	8003cf0 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8003d24:	480d      	ldr	r0, [pc, #52]	; (8003d5c <MX_SAI2_Init+0x68>)
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8003d26:	2303      	movs	r3, #3
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <MX_SAI2_Init+0x6c>)
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003d2a:	2100      	movs	r1, #0
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8003d2c:	e9c0 2300 	strd	r2, r3, [r0]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8003d30:	2301      	movs	r3, #1
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003d32:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003d34:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8003d36:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003d38:	2302      	movs	r3, #2
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003d3a:	60c1      	str	r1, [r0, #12]
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003d3c:	461a      	mov	r2, r3
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003d3e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003d40:	e9c0 1109 	strd	r1, r1, [r0, #36]	; 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003d44:	f7fe f996 	bl	8002074 <HAL_SAI_InitProtocol>
 8003d48:	b118      	cbz	r0, 8003d52 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
  }

}
 8003d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003d4e:	f7ff bfcf 	b.w	8003cf0 <Error_Handler>
}
 8003d52:	bd08      	pop	{r3, pc}
 8003d54:	20000664 	.word	0x20000664
 8003d58:	40015c04 	.word	0x40015c04
 8003d5c:	200006e8 	.word	0x200006e8
 8003d60:	40015c24 	.word	0x40015c24

08003d64 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003d64:	6802      	ldr	r2, [r0, #0]
 8003d66:	4b49      	ldr	r3, [pc, #292]	; (8003e8c <HAL_SAI_MspInit+0x128>)
 8003d68:	429a      	cmp	r2, r3
{
 8003d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI2_Block_A)
 8003d70:	d149      	bne.n	8003e06 <HAL_SAI_MspInit+0xa2>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8003d72:	4847      	ldr	r0, [pc, #284]	; (8003e90 <HAL_SAI_MspInit+0x12c>)
 8003d74:	6803      	ldr	r3, [r0, #0]
 8003d76:	b94b      	cbnz	r3, 8003d8c <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003d78:	4a46      	ldr	r2, [pc, #280]	; (8003e94 <HAL_SAI_MspInit+0x130>)
 8003d7a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003d7c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003d80:	6451      	str	r1, [r2, #68]	; 0x44
 8003d82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d84:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8003d88:	9201      	str	r2, [sp, #4]
 8003d8a:	9a01      	ldr	r2, [sp, #4]
    }
    SAI2_client ++;
 8003d8c:	3301      	adds	r3, #1
    PD13     ------> SAI2_SCK_A
    PE0     ------> SAI2_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003d90:	240a      	movs	r4, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d92:	2702      	movs	r7, #2
    SAI2_client ++;
 8003d94:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d9a:	a903      	add	r1, sp, #12
 8003d9c:	483e      	ldr	r0, [pc, #248]	; (8003e98 <HAL_SAI_MspInit+0x134>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003d9e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da0:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da4:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003da8:	f7fc fe82 	bl	8000ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 8003dac:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 8003dae:	483b      	ldr	r0, [pc, #236]	; (8003e9c <HAL_SAI_MspInit+0x138>)
 8003db0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003db2:	9407      	str	r4, [sp, #28]

    /* Peripheral DMA init*/
    
    hdma_sai2_a.Instance = DMA2_Stream2;
 8003db4:	4c3a      	ldr	r4, [pc, #232]	; (8003ea0 <HAL_SAI_MspInit+0x13c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db6:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dba:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 8003dbe:	f7fc fe77 	bl	8000ab0 <HAL_GPIO_Init>
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 8003dc2:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 8003dc6:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8003eb4 <HAL_SAI_MspInit+0x150>
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003dca:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003dd2:	4620      	mov	r0, r4
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 8003dd4:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dd8:	2340      	movs	r3, #64	; 0x40
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dda:	e9c4 3602 	strd	r3, r6, [r4, #8]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de2:	e9c4 e304 	strd	lr, r3, [r4, #16]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8003de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dea:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003dee:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003df2:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8003df6:	f7fc fccd 	bl	8000794 <HAL_DMA_Init>
 8003dfa:	b108      	cbz	r0, 8003e00 <HAL_SAI_MspInit+0x9c>
    {
      Error_Handler();
 8003dfc:	f7ff ff78 	bl	8003cf0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8003e00:	672c      	str	r4, [r5, #112]	; 0x70
 8003e02:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8003e04:	66ec      	str	r4, [r5, #108]	; 0x6c
    }
    if(hsai->Instance==SAI2_Block_B)
 8003e06:	682a      	ldr	r2, [r5, #0]
 8003e08:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <HAL_SAI_MspInit+0x140>)
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d13c      	bne.n	8003e88 <HAL_SAI_MspInit+0x124>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8003e0e:	4820      	ldr	r0, [pc, #128]	; (8003e90 <HAL_SAI_MspInit+0x12c>)
 8003e10:	6803      	ldr	r3, [r0, #0]
 8003e12:	b94b      	cbnz	r3, 8003e28 <HAL_SAI_MspInit+0xc4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003e14:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <HAL_SAI_MspInit+0x130>)
 8003e16:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003e18:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003e1c:	6451      	str	r1, [r2, #68]	; 0x44
 8003e1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e20:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8003e24:	9202      	str	r2, [sp, #8]
 8003e26:	9a02      	ldr	r2, [sp, #8]
      }
    SAI2_client ++;
 8003e28:	3301      	adds	r3, #1
    
    /**SAI2_B_Block_B GPIO Configuration    
    PA0/WKUP     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	2201      	movs	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8003e2e:	a903      	add	r1, sp, #12
    SAI2_client ++;
 8003e30:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e32:	2302      	movs	r3, #2
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8003e34:	481c      	ldr	r0, [pc, #112]	; (8003ea8 <HAL_SAI_MspInit+0x144>)
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003e36:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai2_b.Instance = DMA2_Stream1;
 8003e3a:	4c1c      	ldr	r4, [pc, #112]	; (8003eac <HAL_SAI_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003e40:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e42:	e9cd 6605 	strd	r6, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003e46:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8003e48:	f7fc fe32 	bl	8000ab0 <HAL_GPIO_Init>
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8003e4c:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 8003e50:	4917      	ldr	r1, [pc, #92]	; (8003eb0 <HAL_SAI_MspInit+0x14c>)
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e52:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8003e56:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e5e:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003e62:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003e66:	4620      	mov	r0, r4
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8003e68:	e9c4 7306 	strd	r7, r3, [r4, #24]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e6c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e70:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e74:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003e78:	f7fc fc8c 	bl	8000794 <HAL_DMA_Init>
 8003e7c:	b108      	cbz	r0, 8003e82 <HAL_SAI_MspInit+0x11e>
    {
      Error_Handler();
 8003e7e:	f7ff ff37 	bl	8003cf0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8003e82:	672c      	str	r4, [r5, #112]	; 0x70
 8003e84:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8003e86:	66ec      	str	r4, [r5, #108]	; 0x6c
    }
}
 8003e88:	b009      	add	sp, #36	; 0x24
 8003e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e8c:	40015c04 	.word	0x40015c04
 8003e90:	200005a0 	.word	0x200005a0
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40020c00 	.word	0x40020c00
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	200005a4 	.word	0x200005a4
 8003ea4:	40015c24 	.word	0x40015c24
 8003ea8:	40020000 	.word	0x40020000
 8003eac:	20000604 	.word	0x20000604
 8003eb0:	40026428 	.word	0x40026428
 8003eb4:	40026440 	.word	0x40026440

08003eb8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003eb8:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8003eba:	4810      	ldr	r0, [pc, #64]	; (8003efc <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ebc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003ec0:	4a0f      	ldr	r2, [pc, #60]	; (8003f00 <MX_SPI1_Init+0x48>)
 8003ec2:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ecc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ed6:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8003eda:	2207      	movs	r2, #7
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003edc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ee0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ee4:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ee8:	2308      	movs	r3, #8
 8003eea:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003eec:	f7fe f9d4 	bl	8002298 <HAL_SPI_Init>
 8003ef0:	b118      	cbz	r0, 8003efa <MX_SPI1_Init+0x42>
  {
    Error_Handler();
  }

}
 8003ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003ef6:	f7ff befb 	b.w	8003cf0 <Error_Handler>
}
 8003efa:	bd08      	pop	{r3, pc}
 8003efc:	200007cc 	.word	0x200007cc
 8003f00:	40013000 	.word	0x40013000

08003f04 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003f04:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8003f06:	4811      	ldr	r0, [pc, #68]	; (8003f4c <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f08:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003f0c:	4a10      	ldr	r2, [pc, #64]	; (8003f50 <MX_SPI2_Init+0x4c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f12:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f1c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f20:	2220      	movs	r2, #32
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f22:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f24:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8003f28:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f2e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f32:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f36:	2308      	movs	r3, #8
 8003f38:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f3a:	f7fe f9ad 	bl	8002298 <HAL_SPI_Init>
 8003f3e:	b118      	cbz	r0, 8003f48 <MX_SPI2_Init+0x44>
  {
    Error_Handler();
  }

}
 8003f40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003f44:	f7ff bed4 	b.w	8003cf0 <Error_Handler>
}
 8003f48:	bd08      	pop	{r3, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000830 	.word	0x20000830
 8003f50:	40003800 	.word	0x40003800

08003f54 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003f54:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8003f56:	4810      	ldr	r0, [pc, #64]	; (8003f98 <MX_SPI3_Init+0x44>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003f58:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003f5c:	4a0f      	ldr	r2, [pc, #60]	; (8003f9c <MX_SPI3_Init+0x48>)
 8003f5e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f68:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f70:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f72:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8003f76:	2207      	movs	r2, #7
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f78:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f7c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f80:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f84:	2308      	movs	r3, #8
 8003f86:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003f88:	f7fe f986 	bl	8002298 <HAL_SPI_Init>
 8003f8c:	b118      	cbz	r0, 8003f96 <MX_SPI3_Init+0x42>
  {
    Error_Handler();
  }

}
 8003f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003f92:	f7ff bead 	b.w	8003cf0 <Error_Handler>
}
 8003f96:	bd08      	pop	{r3, pc}
 8003f98:	20000894 	.word	0x20000894
 8003f9c:	40003c00 	.word	0x40003c00

08003fa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	b08c      	sub	sp, #48	; 0x30
 8003fa4:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa6:	2214      	movs	r2, #20
 8003fa8:	2100      	movs	r1, #0
 8003faa:	a807      	add	r0, sp, #28
 8003fac:	f000 fa4a 	bl	8004444 <memset>
  if(spiHandle->Instance==SPI1)
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	4a46      	ldr	r2, [pc, #280]	; (80040cc <HAL_SPI_MspInit+0x12c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d142      	bne.n	800403e <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fb8:	4b45      	ldr	r3, [pc, #276]	; (80040d0 <HAL_SPI_MspInit+0x130>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fba:	26e0      	movs	r6, #224	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbc:	a907      	add	r1, sp, #28
 8003fbe:	4845      	ldr	r0, [pc, #276]	; (80040d4 <HAL_SPI_MspInit+0x134>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8003fc2:	4c45      	ldr	r4, [pc, #276]	; (80040d8 <HAL_SPI_MspInit+0x138>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fc8:	645a      	str	r2, [r3, #68]	; 0x44
 8003fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fcc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fd0:	9201      	str	r2, [sp, #4]
 8003fd2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	9302      	str	r3, [sp, #8]
 8003fe4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e9cd 6307 	strd	r6, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fec:	2305      	movs	r3, #5
 8003fee:	2603      	movs	r6, #3
 8003ff0:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff4:	f7fc fd5c 	bl	8000ab0 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003ff8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003ffc:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 80040ec <HAL_SPI_MspInit+0x14c>
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004000:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004004:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004008:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800400c:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800400e:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004012:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004014:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004018:	2204      	movs	r2, #4
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800401a:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800401c:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004020:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004024:	e9c4 1208 	strd	r1, r2, [r4, #32]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004028:	e9c4 630a 	strd	r6, r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800402c:	f7fc fbb2 	bl	8000794 <HAL_DMA_Init>
 8004030:	b108      	cbz	r0, 8004036 <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 8004032:	f7ff fe5d 	bl	8003cf0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8004036:	656c      	str	r4, [r5, #84]	; 0x54
 8004038:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800403a:	b00c      	add	sp, #48	; 0x30
 800403c:	bd70      	pop	{r4, r5, r6, pc}
  else if(spiHandle->Instance==SPI2)
 800403e:	4a27      	ldr	r2, [pc, #156]	; (80040dc <HAL_SPI_MspInit+0x13c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d120      	bne.n	8004086 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004044:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_SPI_MspInit+0x130>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004046:	f44f 4060 	mov.w	r0, #57344	; 0xe000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800404a:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404c:	a907      	add	r1, sp, #28
    __HAL_RCC_SPI2_CLK_ENABLE();
 800404e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
 8004056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004058:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800405c:	9203      	str	r2, [sp, #12]
 800405e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004062:	f042 0202 	orr.w	r2, r2, #2
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	9304      	str	r3, [sp, #16]
 8004070:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004072:	2302      	movs	r3, #2
 8004074:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004078:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407a:	4819      	ldr	r0, [pc, #100]	; (80040e0 <HAL_SPI_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800407c:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004080:	f7fc fd16 	bl	8000ab0 <HAL_GPIO_Init>
}
 8004084:	e7d9      	b.n	800403a <HAL_SPI_MspInit+0x9a>
  else if(spiHandle->Instance==SPI3)
 8004086:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <HAL_SPI_MspInit+0x144>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d1d6      	bne.n	800403a <HAL_SPI_MspInit+0x9a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800408c:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <HAL_SPI_MspInit+0x130>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800408e:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004090:	4815      	ldr	r0, [pc, #84]	; (80040e8 <HAL_SPI_MspInit+0x148>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
 800409a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80040a0:	9205      	str	r2, [sp, #20]
 80040a2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a6:	f042 0204 	orr.w	r2, r2, #4
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	9306      	str	r3, [sp, #24]
 80040b8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ba:	2302      	movs	r3, #2
 80040bc:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80040c0:	2306      	movs	r3, #6
 80040c2:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c6:	a907      	add	r1, sp, #28
 80040c8:	e7da      	b.n	8004080 <HAL_SPI_MspInit+0xe0>
 80040ca:	bf00      	nop
 80040cc:	40013000 	.word	0x40013000
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40020000 	.word	0x40020000
 80040d8:	2000076c 	.word	0x2000076c
 80040dc:	40003800 	.word	0x40003800
 80040e0:	40020400 	.word	0x40020400
 80040e4:	40003c00 	.word	0x40003c00
 80040e8:	40020800 	.word	0x40020800
 80040ec:	40026488 	.word	0x40026488

080040f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <HAL_MspInit+0x2c>)
{
 80040f2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80040f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
 80040fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040fe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004102:	9200      	str	r2, [sp, #0]
 8004104:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004108:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800410c:	645a      	str	r2, [r3, #68]	; 0x44
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004118:	b002      	add	sp, #8
 800411a:	4770      	bx	lr
 800411c:	40023800 	.word	0x40023800

08004120 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004120:	4770      	bx	lr

08004122 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004122:	e7fe      	b.n	8004122 <HardFault_Handler>

08004124 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004124:	e7fe      	b.n	8004124 <MemManage_Handler>

08004126 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004126:	e7fe      	b.n	8004126 <BusFault_Handler>

08004128 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004128:	e7fe      	b.n	8004128 <UsageFault_Handler>

0800412a <SVC_Handler>:
 800412a:	4770      	bx	lr

0800412c <DebugMon_Handler>:
 800412c:	4770      	bx	lr

0800412e <PendSV_Handler>:
 800412e:	4770      	bx	lr

08004130 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004130:	f7fc ba90 	b.w	8000654 <HAL_IncTick>

08004134 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004134:	4801      	ldr	r0, [pc, #4]	; (800413c <DMA1_Stream5_IRQHandler+0x8>)
 8004136:	f7fc bbfd 	b.w	8000934 <HAL_DMA_IRQHandler>
 800413a:	bf00      	nop
 800413c:	20000494 	.word	0x20000494

08004140 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004140:	4801      	ldr	r0, [pc, #4]	; (8004148 <DMA1_Stream6_IRQHandler+0x8>)
 8004142:	f7fc bbf7 	b.w	8000934 <HAL_DMA_IRQHandler>
 8004146:	bf00      	nop
 8004148:	200004f4 	.word	0x200004f4

0800414c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800414c:	2020      	movs	r0, #32
 800414e:	f7fc bda7 	b.w	8000ca0 <HAL_GPIO_EXTI_IRQHandler>
	...

08004154 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004154:	4801      	ldr	r0, [pc, #4]	; (800415c <I2C1_EV_IRQHandler+0x8>)
 8004156:	f7fc be2f 	b.w	8000db8 <HAL_I2C_EV_IRQHandler>
 800415a:	bf00      	nop
 800415c:	20000554 	.word	0x20000554

08004160 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004160:	4801      	ldr	r0, [pc, #4]	; (8004168 <I2C1_ER_IRQHandler+0x8>)
 8004162:	f7fd b83f 	b.w	80011e4 <HAL_I2C_ER_IRQHandler>
 8004166:	bf00      	nop
 8004168:	20000554 	.word	0x20000554

0800416c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800416c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004170:	f7fc bd96 	b.w	8000ca0 <HAL_GPIO_EXTI_IRQHandler>

08004174 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8004174:	4801      	ldr	r0, [pc, #4]	; (800417c <DMA2_Stream1_IRQHandler+0x8>)
 8004176:	f7fc bbdd 	b.w	8000934 <HAL_DMA_IRQHandler>
 800417a:	bf00      	nop
 800417c:	20000604 	.word	0x20000604

08004180 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8004180:	4801      	ldr	r0, [pc, #4]	; (8004188 <DMA2_Stream2_IRQHandler+0x8>)
 8004182:	f7fc bbd7 	b.w	8000934 <HAL_DMA_IRQHandler>
 8004186:	bf00      	nop
 8004188:	200005a4 	.word	0x200005a4

0800418c <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800418c:	4801      	ldr	r0, [pc, #4]	; (8004194 <DMA2_Stream3_IRQHandler+0x8>)
 800418e:	f7fc bbd1 	b.w	8000934 <HAL_DMA_IRQHandler>
 8004192:	bf00      	nop
 8004194:	200008f8 	.word	0x200008f8

08004198 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004198:	4801      	ldr	r0, [pc, #4]	; (80041a0 <DMA2_Stream5_IRQHandler+0x8>)
 800419a:	f7fc bbcb 	b.w	8000934 <HAL_DMA_IRQHandler>
 800419e:	bf00      	nop
 80041a0:	2000076c 	.word	0x2000076c

080041a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041a4:	490f      	ldr	r1, [pc, #60]	; (80041e4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041a6:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041a8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80041ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <SystemInit+0x44>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80041be:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80041c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80041cc:	4a07      	ldr	r2, [pc, #28]	; (80041ec <SystemInit+0x48>)
 80041ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80041d8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041de:	608b      	str	r3, [r1, #8]
#endif
}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000ed00 	.word	0xe000ed00
 80041e8:	40023800 	.word	0x40023800
 80041ec:	24003010 	.word	0x24003010

080041f0 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim1);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80041f0:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(tim_pwmHandle->Instance==TIM1)
 80041f2:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <HAL_TIM_PWM_MspInit+0x70>)
{
 80041f4:	4605      	mov	r5, r0
  if(tim_pwmHandle->Instance==TIM1)
 80041f6:	6802      	ldr	r2, [r0, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d12f      	bne.n	800425c <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041fc:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 8004200:	4c18      	ldr	r4, [pc, #96]	; (8004264 <HAL_TIM_PWM_MspInit+0x74>)
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004202:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004206:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    __HAL_RCC_TIM1_CLK_ENABLE();
 800420a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800420c:	2140      	movs	r1, #64	; 0x40
    __HAL_RCC_TIM1_CLK_ENABLE();
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	645a      	str	r2, [r3, #68]	; 0x44
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8004216:	4a14      	ldr	r2, [pc, #80]	; (8004268 <HAL_TIM_PWM_MspInit+0x78>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	9b01      	ldr	r3, [sp, #4]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8004220:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8004224:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004228:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800422c:	2300      	movs	r3, #0
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800422e:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004236:	4620      	mov	r0, r4
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004238:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800423a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800423e:	2204      	movs	r2, #4
 8004240:	e9c4 c208 	strd	ip, r2, [r4, #32]
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004244:	2203      	movs	r2, #3
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004246:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 800424a:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800424e:	f7fc faa1 	bl	8000794 <HAL_DMA_Init>
 8004252:	b108      	cbz	r0, 8004258 <HAL_TIM_PWM_MspInit+0x68>
    {
      Error_Handler();
 8004254:	f7ff fd4c 	bl	8003cf0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004258:	626c      	str	r4, [r5, #36]	; 0x24
 800425a:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800425c:	b003      	add	sp, #12
 800425e:	bd30      	pop	{r4, r5, pc}
 8004260:	40010000 	.word	0x40010000
 8004264:	200008f8 	.word	0x200008f8
 8004268:	40026458 	.word	0x40026458

0800426c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800426c:	b510      	push	{r4, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004272:	2214      	movs	r2, #20
 8004274:	2100      	movs	r1, #0
 8004276:	a801      	add	r0, sp, #4
 8004278:	f000 f8e4 	bl	8004444 <memset>
  if(timHandle->Instance==TIM1)
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_TIM_MspPostInit+0x4c>)
 8004280:	429a      	cmp	r2, r3
 8004282:	d116      	bne.n	80042b2 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004284:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 8004288:	a901      	add	r1, sp, #4
 800428a:	480c      	ldr	r0, [pc, #48]	; (80042bc <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800428c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428e:	f042 0210 	orr.w	r2, r2, #16
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004294:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a2:	2302      	movs	r3, #2
 80042a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042a8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 80042ae:	f7fc fbff 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80042b2:	b006      	add	sp, #24
 80042b4:	bd10      	pop	{r4, pc}
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40021000 	.word	0x40021000

080042c0 <MX_TIM1_Init>:
{
 80042c0:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c2:	2400      	movs	r4, #0
{
 80042c4:	b096      	sub	sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042c6:	221c      	movs	r2, #28
 80042c8:	4621      	mov	r1, r4
 80042ca:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042cc:	9403      	str	r4, [sp, #12]
 80042ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d2:	f000 f8b7 	bl	8004444 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042d6:	222c      	movs	r2, #44	; 0x2c
 80042d8:	4621      	mov	r1, r4
 80042da:	eb0d 0002 	add.w	r0, sp, r2
 80042de:	f000 f8b1 	bl	8004444 <memset>
  htim1.Instance = TIM1;
 80042e2:	4823      	ldr	r0, [pc, #140]	; (8004370 <MX_TIM1_Init+0xb0>)
 80042e4:	4b23      	ldr	r3, [pc, #140]	; (8004374 <MX_TIM1_Init+0xb4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e6:	6084      	str	r4, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 80042e8:	6144      	str	r4, [r0, #20]
  htim1.Init.Prescaler = 0;
 80042ea:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 269;
 80042ee:	f240 130d 	movw	r3, #269	; 0x10d
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042f2:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80042fa:	f7fe fb69 	bl	80029d0 <HAL_TIM_PWM_Init>
 80042fe:	b108      	cbz	r0, 8004304 <MX_TIM1_Init+0x44>
    Error_Handler();
 8004300:	f7ff fcf6 	bl	8003cf0 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004304:	a901      	add	r1, sp, #4
 8004306:	481a      	ldr	r0, [pc, #104]	; (8004370 <MX_TIM1_Init+0xb0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004308:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800430a:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800430e:	f7fe fc37 	bl	8002b80 <HAL_TIMEx_MasterConfigSynchronization>
 8004312:	b108      	cbz	r0, 8004318 <MX_TIM1_Init+0x58>
    Error_Handler();
 8004314:	f7ff fcec 	bl	8003cf0 <Error_Handler>
  sConfigOC.Pulse = 0;
 8004318:	2400      	movs	r4, #0
 800431a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800431c:	a904      	add	r1, sp, #16
 800431e:	4814      	ldr	r0, [pc, #80]	; (8004370 <MX_TIM1_Init+0xb0>)
 8004320:	4622      	mov	r2, r4
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004322:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 8004324:	e9cd 3404 	strd	r3, r4, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004328:	e9cd 4406 	strd	r4, r4, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800432c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004330:	f7fe fba0 	bl	8002a74 <HAL_TIM_PWM_ConfigChannel>
 8004334:	b108      	cbz	r0, 800433a <MX_TIM1_Init+0x7a>
    Error_Handler();
 8004336:	f7ff fcdb 	bl	8003cf0 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800433a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800433e:	a90b      	add	r1, sp, #44	; 0x2c
 8004340:	480b      	ldr	r0, [pc, #44]	; (8004370 <MX_TIM1_Init+0xb0>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004342:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004344:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004346:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004348:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800434c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004350:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8004354:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004358:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800435c:	f7fe fc3c 	bl	8002bd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004360:	b108      	cbz	r0, 8004366 <MX_TIM1_Init+0xa6>
    Error_Handler();
 8004362:	f7ff fcc5 	bl	8003cf0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8004366:	4802      	ldr	r0, [pc, #8]	; (8004370 <MX_TIM1_Init+0xb0>)
 8004368:	f7ff ff80 	bl	800426c <HAL_TIM_MspPostInit>
}
 800436c:	b016      	add	sp, #88	; 0x58
 800436e:	bd10      	pop	{r4, pc}
 8004370:	20000958 	.word	0x20000958
 8004374:	40010000 	.word	0x40010000

08004378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800437c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800437e:	e003      	b.n	8004388 <LoopCopyDataInit>

08004380 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004382:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004384:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004386:	3104      	adds	r1, #4

08004388 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004388:	480b      	ldr	r0, [pc, #44]	; (80043b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800438c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800438e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004390:	d3f6      	bcc.n	8004380 <CopyDataInit>
  ldr  r2, =_sbss
 8004392:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004394:	e002      	b.n	800439c <LoopFillZerobss>

08004396 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004396:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004398:	f842 3b04 	str.w	r3, [r2], #4

0800439c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800439e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043a0:	d3f9      	bcc.n	8004396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043a2:	f7ff feff 	bl	80041a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043a6:	f000 f819 	bl	80043dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043aa:	f7ff fc43 	bl	8003c34 <main>
  bx  lr    
 80043ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043b0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80043b4:	08007978 	.word	0x08007978
  ldr  r0, =_sdata
 80043b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043bc:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80043c0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80043c4:	200009ac 	.word	0x200009ac

080043c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043c8:	e7fe      	b.n	80043c8 <ADC_IRQHandler>
	...

080043cc <calloc>:
 80043cc:	4b02      	ldr	r3, [pc, #8]	; (80043d8 <calloc+0xc>)
 80043ce:	460a      	mov	r2, r1
 80043d0:	4601      	mov	r1, r0
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	f000 b83e 	b.w	8004454 <_calloc_r>
 80043d8:	20000010 	.word	0x20000010

080043dc <__libc_init_array>:
 80043dc:	b570      	push	{r4, r5, r6, lr}
 80043de:	4d0d      	ldr	r5, [pc, #52]	; (8004414 <__libc_init_array+0x38>)
 80043e0:	4c0d      	ldr	r4, [pc, #52]	; (8004418 <__libc_init_array+0x3c>)
 80043e2:	1b64      	subs	r4, r4, r5
 80043e4:	10a4      	asrs	r4, r4, #2
 80043e6:	2600      	movs	r6, #0
 80043e8:	42a6      	cmp	r6, r4
 80043ea:	d109      	bne.n	8004400 <__libc_init_array+0x24>
 80043ec:	4d0b      	ldr	r5, [pc, #44]	; (800441c <__libc_init_array+0x40>)
 80043ee:	4c0c      	ldr	r4, [pc, #48]	; (8004420 <__libc_init_array+0x44>)
 80043f0:	f002 fce4 	bl	8006dbc <_init>
 80043f4:	1b64      	subs	r4, r4, r5
 80043f6:	10a4      	asrs	r4, r4, #2
 80043f8:	2600      	movs	r6, #0
 80043fa:	42a6      	cmp	r6, r4
 80043fc:	d105      	bne.n	800440a <__libc_init_array+0x2e>
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	f855 3b04 	ldr.w	r3, [r5], #4
 8004404:	4798      	blx	r3
 8004406:	3601      	adds	r6, #1
 8004408:	e7ee      	b.n	80043e8 <__libc_init_array+0xc>
 800440a:	f855 3b04 	ldr.w	r3, [r5], #4
 800440e:	4798      	blx	r3
 8004410:	3601      	adds	r6, #1
 8004412:	e7f2      	b.n	80043fa <__libc_init_array+0x1e>
 8004414:	08007970 	.word	0x08007970
 8004418:	08007970 	.word	0x08007970
 800441c:	08007970 	.word	0x08007970
 8004420:	08007974 	.word	0x08007974

08004424 <malloc>:
 8004424:	4b02      	ldr	r3, [pc, #8]	; (8004430 <malloc+0xc>)
 8004426:	4601      	mov	r1, r0
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	f000 b895 	b.w	8004558 <_malloc_r>
 800442e:	bf00      	nop
 8004430:	20000010 	.word	0x20000010

08004434 <free>:
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <free+0xc>)
 8004436:	4601      	mov	r1, r0
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	f000 b821 	b.w	8004480 <_free_r>
 800443e:	bf00      	nop
 8004440:	20000010 	.word	0x20000010

08004444 <memset>:
 8004444:	4402      	add	r2, r0
 8004446:	4603      	mov	r3, r0
 8004448:	4293      	cmp	r3, r2
 800444a:	d100      	bne.n	800444e <memset+0xa>
 800444c:	4770      	bx	lr
 800444e:	f803 1b01 	strb.w	r1, [r3], #1
 8004452:	e7f9      	b.n	8004448 <memset+0x4>

08004454 <_calloc_r>:
 8004454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004456:	fba1 2402 	umull	r2, r4, r1, r2
 800445a:	b94c      	cbnz	r4, 8004470 <_calloc_r+0x1c>
 800445c:	4611      	mov	r1, r2
 800445e:	9201      	str	r2, [sp, #4]
 8004460:	f000 f87a 	bl	8004558 <_malloc_r>
 8004464:	9a01      	ldr	r2, [sp, #4]
 8004466:	4605      	mov	r5, r0
 8004468:	b930      	cbnz	r0, 8004478 <_calloc_r+0x24>
 800446a:	4628      	mov	r0, r5
 800446c:	b003      	add	sp, #12
 800446e:	bd30      	pop	{r4, r5, pc}
 8004470:	220c      	movs	r2, #12
 8004472:	6002      	str	r2, [r0, #0]
 8004474:	2500      	movs	r5, #0
 8004476:	e7f8      	b.n	800446a <_calloc_r+0x16>
 8004478:	4621      	mov	r1, r4
 800447a:	f7ff ffe3 	bl	8004444 <memset>
 800447e:	e7f4      	b.n	800446a <_calloc_r+0x16>

08004480 <_free_r>:
 8004480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004482:	2900      	cmp	r1, #0
 8004484:	d044      	beq.n	8004510 <_free_r+0x90>
 8004486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800448a:	9001      	str	r0, [sp, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f1a1 0404 	sub.w	r4, r1, #4
 8004492:	bfb8      	it	lt
 8004494:	18e4      	addlt	r4, r4, r3
 8004496:	f001 fba9 	bl	8005bec <__malloc_lock>
 800449a:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <_free_r+0x94>)
 800449c:	9801      	ldr	r0, [sp, #4]
 800449e:	6813      	ldr	r3, [r2, #0]
 80044a0:	b933      	cbnz	r3, 80044b0 <_free_r+0x30>
 80044a2:	6063      	str	r3, [r4, #4]
 80044a4:	6014      	str	r4, [r2, #0]
 80044a6:	b003      	add	sp, #12
 80044a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044ac:	f001 bba4 	b.w	8005bf8 <__malloc_unlock>
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	d908      	bls.n	80044c6 <_free_r+0x46>
 80044b4:	6825      	ldr	r5, [r4, #0]
 80044b6:	1961      	adds	r1, r4, r5
 80044b8:	428b      	cmp	r3, r1
 80044ba:	bf01      	itttt	eq
 80044bc:	6819      	ldreq	r1, [r3, #0]
 80044be:	685b      	ldreq	r3, [r3, #4]
 80044c0:	1949      	addeq	r1, r1, r5
 80044c2:	6021      	streq	r1, [r4, #0]
 80044c4:	e7ed      	b.n	80044a2 <_free_r+0x22>
 80044c6:	461a      	mov	r2, r3
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	b10b      	cbz	r3, 80044d0 <_free_r+0x50>
 80044cc:	42a3      	cmp	r3, r4
 80044ce:	d9fa      	bls.n	80044c6 <_free_r+0x46>
 80044d0:	6811      	ldr	r1, [r2, #0]
 80044d2:	1855      	adds	r5, r2, r1
 80044d4:	42a5      	cmp	r5, r4
 80044d6:	d10b      	bne.n	80044f0 <_free_r+0x70>
 80044d8:	6824      	ldr	r4, [r4, #0]
 80044da:	4421      	add	r1, r4
 80044dc:	1854      	adds	r4, r2, r1
 80044de:	42a3      	cmp	r3, r4
 80044e0:	6011      	str	r1, [r2, #0]
 80044e2:	d1e0      	bne.n	80044a6 <_free_r+0x26>
 80044e4:	681c      	ldr	r4, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	6053      	str	r3, [r2, #4]
 80044ea:	4421      	add	r1, r4
 80044ec:	6011      	str	r1, [r2, #0]
 80044ee:	e7da      	b.n	80044a6 <_free_r+0x26>
 80044f0:	d902      	bls.n	80044f8 <_free_r+0x78>
 80044f2:	230c      	movs	r3, #12
 80044f4:	6003      	str	r3, [r0, #0]
 80044f6:	e7d6      	b.n	80044a6 <_free_r+0x26>
 80044f8:	6825      	ldr	r5, [r4, #0]
 80044fa:	1961      	adds	r1, r4, r5
 80044fc:	428b      	cmp	r3, r1
 80044fe:	bf04      	itt	eq
 8004500:	6819      	ldreq	r1, [r3, #0]
 8004502:	685b      	ldreq	r3, [r3, #4]
 8004504:	6063      	str	r3, [r4, #4]
 8004506:	bf04      	itt	eq
 8004508:	1949      	addeq	r1, r1, r5
 800450a:	6021      	streq	r1, [r4, #0]
 800450c:	6054      	str	r4, [r2, #4]
 800450e:	e7ca      	b.n	80044a6 <_free_r+0x26>
 8004510:	b003      	add	sp, #12
 8004512:	bd30      	pop	{r4, r5, pc}
 8004514:	20000998 	.word	0x20000998

08004518 <sbrk_aligned>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	4e0e      	ldr	r6, [pc, #56]	; (8004554 <sbrk_aligned+0x3c>)
 800451c:	460c      	mov	r4, r1
 800451e:	6831      	ldr	r1, [r6, #0]
 8004520:	4605      	mov	r5, r0
 8004522:	b911      	cbnz	r1, 800452a <sbrk_aligned+0x12>
 8004524:	f000 fcce 	bl	8004ec4 <_sbrk_r>
 8004528:	6030      	str	r0, [r6, #0]
 800452a:	4621      	mov	r1, r4
 800452c:	4628      	mov	r0, r5
 800452e:	f000 fcc9 	bl	8004ec4 <_sbrk_r>
 8004532:	1c43      	adds	r3, r0, #1
 8004534:	d00a      	beq.n	800454c <sbrk_aligned+0x34>
 8004536:	1cc4      	adds	r4, r0, #3
 8004538:	f024 0403 	bic.w	r4, r4, #3
 800453c:	42a0      	cmp	r0, r4
 800453e:	d007      	beq.n	8004550 <sbrk_aligned+0x38>
 8004540:	1a21      	subs	r1, r4, r0
 8004542:	4628      	mov	r0, r5
 8004544:	f000 fcbe 	bl	8004ec4 <_sbrk_r>
 8004548:	3001      	adds	r0, #1
 800454a:	d101      	bne.n	8004550 <sbrk_aligned+0x38>
 800454c:	f04f 34ff 	mov.w	r4, #4294967295
 8004550:	4620      	mov	r0, r4
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	2000099c 	.word	0x2000099c

08004558 <_malloc_r>:
 8004558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800455c:	1ccd      	adds	r5, r1, #3
 800455e:	f025 0503 	bic.w	r5, r5, #3
 8004562:	3508      	adds	r5, #8
 8004564:	2d0c      	cmp	r5, #12
 8004566:	bf38      	it	cc
 8004568:	250c      	movcc	r5, #12
 800456a:	2d00      	cmp	r5, #0
 800456c:	4607      	mov	r7, r0
 800456e:	db01      	blt.n	8004574 <_malloc_r+0x1c>
 8004570:	42a9      	cmp	r1, r5
 8004572:	d905      	bls.n	8004580 <_malloc_r+0x28>
 8004574:	230c      	movs	r3, #12
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	2600      	movs	r6, #0
 800457a:	4630      	mov	r0, r6
 800457c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004580:	4e2e      	ldr	r6, [pc, #184]	; (800463c <_malloc_r+0xe4>)
 8004582:	f001 fb33 	bl	8005bec <__malloc_lock>
 8004586:	6833      	ldr	r3, [r6, #0]
 8004588:	461c      	mov	r4, r3
 800458a:	bb34      	cbnz	r4, 80045da <_malloc_r+0x82>
 800458c:	4629      	mov	r1, r5
 800458e:	4638      	mov	r0, r7
 8004590:	f7ff ffc2 	bl	8004518 <sbrk_aligned>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	4604      	mov	r4, r0
 8004598:	d14d      	bne.n	8004636 <_malloc_r+0xde>
 800459a:	6834      	ldr	r4, [r6, #0]
 800459c:	4626      	mov	r6, r4
 800459e:	2e00      	cmp	r6, #0
 80045a0:	d140      	bne.n	8004624 <_malloc_r+0xcc>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	4631      	mov	r1, r6
 80045a6:	4638      	mov	r0, r7
 80045a8:	eb04 0803 	add.w	r8, r4, r3
 80045ac:	f000 fc8a 	bl	8004ec4 <_sbrk_r>
 80045b0:	4580      	cmp	r8, r0
 80045b2:	d13a      	bne.n	800462a <_malloc_r+0xd2>
 80045b4:	6821      	ldr	r1, [r4, #0]
 80045b6:	3503      	adds	r5, #3
 80045b8:	1a6d      	subs	r5, r5, r1
 80045ba:	f025 0503 	bic.w	r5, r5, #3
 80045be:	3508      	adds	r5, #8
 80045c0:	2d0c      	cmp	r5, #12
 80045c2:	bf38      	it	cc
 80045c4:	250c      	movcc	r5, #12
 80045c6:	4629      	mov	r1, r5
 80045c8:	4638      	mov	r0, r7
 80045ca:	f7ff ffa5 	bl	8004518 <sbrk_aligned>
 80045ce:	3001      	adds	r0, #1
 80045d0:	d02b      	beq.n	800462a <_malloc_r+0xd2>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	442b      	add	r3, r5
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	e00e      	b.n	80045f8 <_malloc_r+0xa0>
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	1b52      	subs	r2, r2, r5
 80045de:	d41e      	bmi.n	800461e <_malloc_r+0xc6>
 80045e0:	2a0b      	cmp	r2, #11
 80045e2:	d916      	bls.n	8004612 <_malloc_r+0xba>
 80045e4:	1961      	adds	r1, r4, r5
 80045e6:	42a3      	cmp	r3, r4
 80045e8:	6025      	str	r5, [r4, #0]
 80045ea:	bf18      	it	ne
 80045ec:	6059      	strne	r1, [r3, #4]
 80045ee:	6863      	ldr	r3, [r4, #4]
 80045f0:	bf08      	it	eq
 80045f2:	6031      	streq	r1, [r6, #0]
 80045f4:	5162      	str	r2, [r4, r5]
 80045f6:	604b      	str	r3, [r1, #4]
 80045f8:	4638      	mov	r0, r7
 80045fa:	f104 060b 	add.w	r6, r4, #11
 80045fe:	f001 fafb 	bl	8005bf8 <__malloc_unlock>
 8004602:	f026 0607 	bic.w	r6, r6, #7
 8004606:	1d23      	adds	r3, r4, #4
 8004608:	1af2      	subs	r2, r6, r3
 800460a:	d0b6      	beq.n	800457a <_malloc_r+0x22>
 800460c:	1b9b      	subs	r3, r3, r6
 800460e:	50a3      	str	r3, [r4, r2]
 8004610:	e7b3      	b.n	800457a <_malloc_r+0x22>
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	42a3      	cmp	r3, r4
 8004616:	bf0c      	ite	eq
 8004618:	6032      	streq	r2, [r6, #0]
 800461a:	605a      	strne	r2, [r3, #4]
 800461c:	e7ec      	b.n	80045f8 <_malloc_r+0xa0>
 800461e:	4623      	mov	r3, r4
 8004620:	6864      	ldr	r4, [r4, #4]
 8004622:	e7b2      	b.n	800458a <_malloc_r+0x32>
 8004624:	4634      	mov	r4, r6
 8004626:	6876      	ldr	r6, [r6, #4]
 8004628:	e7b9      	b.n	800459e <_malloc_r+0x46>
 800462a:	230c      	movs	r3, #12
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	4638      	mov	r0, r7
 8004630:	f001 fae2 	bl	8005bf8 <__malloc_unlock>
 8004634:	e7a1      	b.n	800457a <_malloc_r+0x22>
 8004636:	6025      	str	r5, [r4, #0]
 8004638:	e7de      	b.n	80045f8 <_malloc_r+0xa0>
 800463a:	bf00      	nop
 800463c:	20000998 	.word	0x20000998

08004640 <__cvt>:
 8004640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004642:	ed2d 8b02 	vpush	{d8}
 8004646:	eeb0 8b40 	vmov.f64	d8, d0
 800464a:	b085      	sub	sp, #20
 800464c:	4617      	mov	r7, r2
 800464e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004650:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004652:	ee18 2a90 	vmov	r2, s17
 8004656:	f025 0520 	bic.w	r5, r5, #32
 800465a:	2a00      	cmp	r2, #0
 800465c:	bfb6      	itet	lt
 800465e:	222d      	movlt	r2, #45	; 0x2d
 8004660:	2200      	movge	r2, #0
 8004662:	eeb1 8b40 	vneglt.f64	d8, d0
 8004666:	2d46      	cmp	r5, #70	; 0x46
 8004668:	460c      	mov	r4, r1
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	d004      	beq.n	8004678 <__cvt+0x38>
 800466e:	2d45      	cmp	r5, #69	; 0x45
 8004670:	d100      	bne.n	8004674 <__cvt+0x34>
 8004672:	3401      	adds	r4, #1
 8004674:	2102      	movs	r1, #2
 8004676:	e000      	b.n	800467a <__cvt+0x3a>
 8004678:	2103      	movs	r1, #3
 800467a:	ab03      	add	r3, sp, #12
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	ab02      	add	r3, sp, #8
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	4622      	mov	r2, r4
 8004684:	4633      	mov	r3, r6
 8004686:	eeb0 0b48 	vmov.f64	d0, d8
 800468a:	f000 fd1d 	bl	80050c8 <_dtoa_r>
 800468e:	2d47      	cmp	r5, #71	; 0x47
 8004690:	d101      	bne.n	8004696 <__cvt+0x56>
 8004692:	07fb      	lsls	r3, r7, #31
 8004694:	d51a      	bpl.n	80046cc <__cvt+0x8c>
 8004696:	2d46      	cmp	r5, #70	; 0x46
 8004698:	eb00 0204 	add.w	r2, r0, r4
 800469c:	d10c      	bne.n	80046b8 <__cvt+0x78>
 800469e:	7803      	ldrb	r3, [r0, #0]
 80046a0:	2b30      	cmp	r3, #48	; 0x30
 80046a2:	d107      	bne.n	80046b4 <__cvt+0x74>
 80046a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	bf1c      	itt	ne
 80046ae:	f1c4 0401 	rsbne	r4, r4, #1
 80046b2:	6034      	strne	r4, [r6, #0]
 80046b4:	6833      	ldr	r3, [r6, #0]
 80046b6:	441a      	add	r2, r3
 80046b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80046bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c0:	bf08      	it	eq
 80046c2:	9203      	streq	r2, [sp, #12]
 80046c4:	2130      	movs	r1, #48	; 0x30
 80046c6:	9b03      	ldr	r3, [sp, #12]
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d307      	bcc.n	80046dc <__cvt+0x9c>
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046d0:	1a1b      	subs	r3, r3, r0
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	b005      	add	sp, #20
 80046d6:	ecbd 8b02 	vpop	{d8}
 80046da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046dc:	1c5c      	adds	r4, r3, #1
 80046de:	9403      	str	r4, [sp, #12]
 80046e0:	7019      	strb	r1, [r3, #0]
 80046e2:	e7f0      	b.n	80046c6 <__cvt+0x86>

080046e4 <__exponent>:
 80046e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046e6:	4603      	mov	r3, r0
 80046e8:	2900      	cmp	r1, #0
 80046ea:	bfb8      	it	lt
 80046ec:	4249      	neglt	r1, r1
 80046ee:	f803 2b02 	strb.w	r2, [r3], #2
 80046f2:	bfb4      	ite	lt
 80046f4:	222d      	movlt	r2, #45	; 0x2d
 80046f6:	222b      	movge	r2, #43	; 0x2b
 80046f8:	2909      	cmp	r1, #9
 80046fa:	7042      	strb	r2, [r0, #1]
 80046fc:	dd2a      	ble.n	8004754 <__exponent+0x70>
 80046fe:	f10d 0407 	add.w	r4, sp, #7
 8004702:	46a4      	mov	ip, r4
 8004704:	270a      	movs	r7, #10
 8004706:	46a6      	mov	lr, r4
 8004708:	460a      	mov	r2, r1
 800470a:	fb91 f6f7 	sdiv	r6, r1, r7
 800470e:	fb07 1516 	mls	r5, r7, r6, r1
 8004712:	3530      	adds	r5, #48	; 0x30
 8004714:	2a63      	cmp	r2, #99	; 0x63
 8004716:	f104 34ff 	add.w	r4, r4, #4294967295
 800471a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800471e:	4631      	mov	r1, r6
 8004720:	dcf1      	bgt.n	8004706 <__exponent+0x22>
 8004722:	3130      	adds	r1, #48	; 0x30
 8004724:	f1ae 0502 	sub.w	r5, lr, #2
 8004728:	f804 1c01 	strb.w	r1, [r4, #-1]
 800472c:	1c44      	adds	r4, r0, #1
 800472e:	4629      	mov	r1, r5
 8004730:	4561      	cmp	r1, ip
 8004732:	d30a      	bcc.n	800474a <__exponent+0x66>
 8004734:	f10d 0209 	add.w	r2, sp, #9
 8004738:	eba2 020e 	sub.w	r2, r2, lr
 800473c:	4565      	cmp	r5, ip
 800473e:	bf88      	it	hi
 8004740:	2200      	movhi	r2, #0
 8004742:	4413      	add	r3, r2
 8004744:	1a18      	subs	r0, r3, r0
 8004746:	b003      	add	sp, #12
 8004748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800474a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800474e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004752:	e7ed      	b.n	8004730 <__exponent+0x4c>
 8004754:	2330      	movs	r3, #48	; 0x30
 8004756:	3130      	adds	r1, #48	; 0x30
 8004758:	7083      	strb	r3, [r0, #2]
 800475a:	70c1      	strb	r1, [r0, #3]
 800475c:	1d03      	adds	r3, r0, #4
 800475e:	e7f1      	b.n	8004744 <__exponent+0x60>

08004760 <_printf_float>:
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	b08b      	sub	sp, #44	; 0x2c
 8004766:	460c      	mov	r4, r1
 8004768:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800476c:	4616      	mov	r6, r2
 800476e:	461f      	mov	r7, r3
 8004770:	4605      	mov	r5, r0
 8004772:	f001 fa17 	bl	8005ba4 <_localeconv_r>
 8004776:	f8d0 b000 	ldr.w	fp, [r0]
 800477a:	4658      	mov	r0, fp
 800477c:	f7fb fd60 	bl	8000240 <strlen>
 8004780:	2300      	movs	r3, #0
 8004782:	9308      	str	r3, [sp, #32]
 8004784:	f8d8 3000 	ldr.w	r3, [r8]
 8004788:	f894 9018 	ldrb.w	r9, [r4, #24]
 800478c:	6822      	ldr	r2, [r4, #0]
 800478e:	3307      	adds	r3, #7
 8004790:	f023 0307 	bic.w	r3, r3, #7
 8004794:	f103 0108 	add.w	r1, r3, #8
 8004798:	f8c8 1000 	str.w	r1, [r8]
 800479c:	4682      	mov	sl, r0
 800479e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80047a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004a08 <_printf_float+0x2a8>
 80047aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80047ae:	eeb0 6bc0 	vabs.f64	d6, d0
 80047b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80047b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ba:	dd24      	ble.n	8004806 <_printf_float+0xa6>
 80047bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80047c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c4:	d502      	bpl.n	80047cc <_printf_float+0x6c>
 80047c6:	232d      	movs	r3, #45	; 0x2d
 80047c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047cc:	4b90      	ldr	r3, [pc, #576]	; (8004a10 <_printf_float+0x2b0>)
 80047ce:	4891      	ldr	r0, [pc, #580]	; (8004a14 <_printf_float+0x2b4>)
 80047d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80047d4:	bf94      	ite	ls
 80047d6:	4698      	movls	r8, r3
 80047d8:	4680      	movhi	r8, r0
 80047da:	2303      	movs	r3, #3
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	f022 0204 	bic.w	r2, r2, #4
 80047e2:	2300      	movs	r3, #0
 80047e4:	6022      	str	r2, [r4, #0]
 80047e6:	9304      	str	r3, [sp, #16]
 80047e8:	9700      	str	r7, [sp, #0]
 80047ea:	4633      	mov	r3, r6
 80047ec:	aa09      	add	r2, sp, #36	; 0x24
 80047ee:	4621      	mov	r1, r4
 80047f0:	4628      	mov	r0, r5
 80047f2:	f000 f9d3 	bl	8004b9c <_printf_common>
 80047f6:	3001      	adds	r0, #1
 80047f8:	f040 808a 	bne.w	8004910 <_printf_float+0x1b0>
 80047fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004800:	b00b      	add	sp, #44	; 0x2c
 8004802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004806:	eeb4 0b40 	vcmp.f64	d0, d0
 800480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480e:	d709      	bvc.n	8004824 <_printf_float+0xc4>
 8004810:	ee10 3a90 	vmov	r3, s1
 8004814:	2b00      	cmp	r3, #0
 8004816:	bfbc      	itt	lt
 8004818:	232d      	movlt	r3, #45	; 0x2d
 800481a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800481e:	487e      	ldr	r0, [pc, #504]	; (8004a18 <_printf_float+0x2b8>)
 8004820:	4b7e      	ldr	r3, [pc, #504]	; (8004a1c <_printf_float+0x2bc>)
 8004822:	e7d5      	b.n	80047d0 <_printf_float+0x70>
 8004824:	6863      	ldr	r3, [r4, #4]
 8004826:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800482a:	9104      	str	r1, [sp, #16]
 800482c:	1c59      	adds	r1, r3, #1
 800482e:	d13c      	bne.n	80048aa <_printf_float+0x14a>
 8004830:	2306      	movs	r3, #6
 8004832:	6063      	str	r3, [r4, #4]
 8004834:	2300      	movs	r3, #0
 8004836:	9303      	str	r3, [sp, #12]
 8004838:	ab08      	add	r3, sp, #32
 800483a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800483e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004842:	ab07      	add	r3, sp, #28
 8004844:	6861      	ldr	r1, [r4, #4]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	6022      	str	r2, [r4, #0]
 800484a:	f10d 031b 	add.w	r3, sp, #27
 800484e:	4628      	mov	r0, r5
 8004850:	f7ff fef6 	bl	8004640 <__cvt>
 8004854:	9b04      	ldr	r3, [sp, #16]
 8004856:	9907      	ldr	r1, [sp, #28]
 8004858:	2b47      	cmp	r3, #71	; 0x47
 800485a:	4680      	mov	r8, r0
 800485c:	d108      	bne.n	8004870 <_printf_float+0x110>
 800485e:	1cc8      	adds	r0, r1, #3
 8004860:	db02      	blt.n	8004868 <_printf_float+0x108>
 8004862:	6863      	ldr	r3, [r4, #4]
 8004864:	4299      	cmp	r1, r3
 8004866:	dd41      	ble.n	80048ec <_printf_float+0x18c>
 8004868:	f1a9 0902 	sub.w	r9, r9, #2
 800486c:	fa5f f989 	uxtb.w	r9, r9
 8004870:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004874:	d820      	bhi.n	80048b8 <_printf_float+0x158>
 8004876:	3901      	subs	r1, #1
 8004878:	464a      	mov	r2, r9
 800487a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800487e:	9107      	str	r1, [sp, #28]
 8004880:	f7ff ff30 	bl	80046e4 <__exponent>
 8004884:	9a08      	ldr	r2, [sp, #32]
 8004886:	9004      	str	r0, [sp, #16]
 8004888:	1813      	adds	r3, r2, r0
 800488a:	2a01      	cmp	r2, #1
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	dc02      	bgt.n	8004896 <_printf_float+0x136>
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	07d2      	lsls	r2, r2, #31
 8004894:	d501      	bpl.n	800489a <_printf_float+0x13a>
 8004896:	3301      	adds	r3, #1
 8004898:	6123      	str	r3, [r4, #16]
 800489a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0a2      	beq.n	80047e8 <_printf_float+0x88>
 80048a2:	232d      	movs	r3, #45	; 0x2d
 80048a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a8:	e79e      	b.n	80047e8 <_printf_float+0x88>
 80048aa:	9904      	ldr	r1, [sp, #16]
 80048ac:	2947      	cmp	r1, #71	; 0x47
 80048ae:	d1c1      	bne.n	8004834 <_printf_float+0xd4>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1bf      	bne.n	8004834 <_printf_float+0xd4>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e7bc      	b.n	8004832 <_printf_float+0xd2>
 80048b8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80048bc:	d118      	bne.n	80048f0 <_printf_float+0x190>
 80048be:	2900      	cmp	r1, #0
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	dd0b      	ble.n	80048dc <_printf_float+0x17c>
 80048c4:	6121      	str	r1, [r4, #16]
 80048c6:	b913      	cbnz	r3, 80048ce <_printf_float+0x16e>
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	07d0      	lsls	r0, r2, #31
 80048cc:	d502      	bpl.n	80048d4 <_printf_float+0x174>
 80048ce:	3301      	adds	r3, #1
 80048d0:	440b      	add	r3, r1
 80048d2:	6123      	str	r3, [r4, #16]
 80048d4:	2300      	movs	r3, #0
 80048d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80048d8:	9304      	str	r3, [sp, #16]
 80048da:	e7de      	b.n	800489a <_printf_float+0x13a>
 80048dc:	b913      	cbnz	r3, 80048e4 <_printf_float+0x184>
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	07d2      	lsls	r2, r2, #31
 80048e2:	d501      	bpl.n	80048e8 <_printf_float+0x188>
 80048e4:	3302      	adds	r3, #2
 80048e6:	e7f4      	b.n	80048d2 <_printf_float+0x172>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e7f2      	b.n	80048d2 <_printf_float+0x172>
 80048ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 80048f0:	9b08      	ldr	r3, [sp, #32]
 80048f2:	4299      	cmp	r1, r3
 80048f4:	db05      	blt.n	8004902 <_printf_float+0x1a2>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	6121      	str	r1, [r4, #16]
 80048fa:	07d8      	lsls	r0, r3, #31
 80048fc:	d5ea      	bpl.n	80048d4 <_printf_float+0x174>
 80048fe:	1c4b      	adds	r3, r1, #1
 8004900:	e7e7      	b.n	80048d2 <_printf_float+0x172>
 8004902:	2900      	cmp	r1, #0
 8004904:	bfd4      	ite	le
 8004906:	f1c1 0202 	rsble	r2, r1, #2
 800490a:	2201      	movgt	r2, #1
 800490c:	4413      	add	r3, r2
 800490e:	e7e0      	b.n	80048d2 <_printf_float+0x172>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	055a      	lsls	r2, r3, #21
 8004914:	d407      	bmi.n	8004926 <_printf_float+0x1c6>
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	4642      	mov	r2, r8
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	d12a      	bne.n	800497a <_printf_float+0x21a>
 8004924:	e76a      	b.n	80047fc <_printf_float+0x9c>
 8004926:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800492a:	f240 80e2 	bls.w	8004af2 <_printf_float+0x392>
 800492e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004932:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493a:	d133      	bne.n	80049a4 <_printf_float+0x244>
 800493c:	4a38      	ldr	r2, [pc, #224]	; (8004a20 <_printf_float+0x2c0>)
 800493e:	2301      	movs	r3, #1
 8004940:	4631      	mov	r1, r6
 8004942:	4628      	mov	r0, r5
 8004944:	47b8      	blx	r7
 8004946:	3001      	adds	r0, #1
 8004948:	f43f af58 	beq.w	80047fc <_printf_float+0x9c>
 800494c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004950:	429a      	cmp	r2, r3
 8004952:	db02      	blt.n	800495a <_printf_float+0x1fa>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	07d8      	lsls	r0, r3, #31
 8004958:	d50f      	bpl.n	800497a <_printf_float+0x21a>
 800495a:	4653      	mov	r3, sl
 800495c:	465a      	mov	r2, fp
 800495e:	4631      	mov	r1, r6
 8004960:	4628      	mov	r0, r5
 8004962:	47b8      	blx	r7
 8004964:	3001      	adds	r0, #1
 8004966:	f43f af49 	beq.w	80047fc <_printf_float+0x9c>
 800496a:	f04f 0800 	mov.w	r8, #0
 800496e:	f104 091a 	add.w	r9, r4, #26
 8004972:	9b08      	ldr	r3, [sp, #32]
 8004974:	3b01      	subs	r3, #1
 8004976:	4543      	cmp	r3, r8
 8004978:	dc09      	bgt.n	800498e <_printf_float+0x22e>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	079b      	lsls	r3, r3, #30
 800497e:	f100 8108 	bmi.w	8004b92 <_printf_float+0x432>
 8004982:	68e0      	ldr	r0, [r4, #12]
 8004984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004986:	4298      	cmp	r0, r3
 8004988:	bfb8      	it	lt
 800498a:	4618      	movlt	r0, r3
 800498c:	e738      	b.n	8004800 <_printf_float+0xa0>
 800498e:	2301      	movs	r3, #1
 8004990:	464a      	mov	r2, r9
 8004992:	4631      	mov	r1, r6
 8004994:	4628      	mov	r0, r5
 8004996:	47b8      	blx	r7
 8004998:	3001      	adds	r0, #1
 800499a:	f43f af2f 	beq.w	80047fc <_printf_float+0x9c>
 800499e:	f108 0801 	add.w	r8, r8, #1
 80049a2:	e7e6      	b.n	8004972 <_printf_float+0x212>
 80049a4:	9b07      	ldr	r3, [sp, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	dc3c      	bgt.n	8004a24 <_printf_float+0x2c4>
 80049aa:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <_printf_float+0x2c0>)
 80049ac:	2301      	movs	r3, #1
 80049ae:	4631      	mov	r1, r6
 80049b0:	4628      	mov	r0, r5
 80049b2:	47b8      	blx	r7
 80049b4:	3001      	adds	r0, #1
 80049b6:	f43f af21 	beq.w	80047fc <_printf_float+0x9c>
 80049ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80049be:	4313      	orrs	r3, r2
 80049c0:	d102      	bne.n	80049c8 <_printf_float+0x268>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	07d9      	lsls	r1, r3, #31
 80049c6:	d5d8      	bpl.n	800497a <_printf_float+0x21a>
 80049c8:	4653      	mov	r3, sl
 80049ca:	465a      	mov	r2, fp
 80049cc:	4631      	mov	r1, r6
 80049ce:	4628      	mov	r0, r5
 80049d0:	47b8      	blx	r7
 80049d2:	3001      	adds	r0, #1
 80049d4:	f43f af12 	beq.w	80047fc <_printf_float+0x9c>
 80049d8:	f04f 0900 	mov.w	r9, #0
 80049dc:	f104 0a1a 	add.w	sl, r4, #26
 80049e0:	9b07      	ldr	r3, [sp, #28]
 80049e2:	425b      	negs	r3, r3
 80049e4:	454b      	cmp	r3, r9
 80049e6:	dc01      	bgt.n	80049ec <_printf_float+0x28c>
 80049e8:	9b08      	ldr	r3, [sp, #32]
 80049ea:	e795      	b.n	8004918 <_printf_float+0x1b8>
 80049ec:	2301      	movs	r3, #1
 80049ee:	4652      	mov	r2, sl
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	f43f af00 	beq.w	80047fc <_printf_float+0x9c>
 80049fc:	f109 0901 	add.w	r9, r9, #1
 8004a00:	e7ee      	b.n	80049e0 <_printf_float+0x280>
 8004a02:	bf00      	nop
 8004a04:	f3af 8000 	nop.w
 8004a08:	ffffffff 	.word	0xffffffff
 8004a0c:	7fefffff 	.word	0x7fefffff
 8004a10:	0800758c 	.word	0x0800758c
 8004a14:	08007590 	.word	0x08007590
 8004a18:	08007598 	.word	0x08007598
 8004a1c:	08007594 	.word	0x08007594
 8004a20:	0800759c 	.word	0x0800759c
 8004a24:	9a08      	ldr	r2, [sp, #32]
 8004a26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	bfa8      	it	ge
 8004a2c:	461a      	movge	r2, r3
 8004a2e:	2a00      	cmp	r2, #0
 8004a30:	4691      	mov	r9, r2
 8004a32:	dc38      	bgt.n	8004aa6 <_printf_float+0x346>
 8004a34:	2300      	movs	r3, #0
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a3c:	f104 021a 	add.w	r2, r4, #26
 8004a40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a42:	9905      	ldr	r1, [sp, #20]
 8004a44:	9304      	str	r3, [sp, #16]
 8004a46:	eba3 0309 	sub.w	r3, r3, r9
 8004a4a:	428b      	cmp	r3, r1
 8004a4c:	dc33      	bgt.n	8004ab6 <_printf_float+0x356>
 8004a4e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	db3c      	blt.n	8004ad0 <_printf_float+0x370>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	07da      	lsls	r2, r3, #31
 8004a5a:	d439      	bmi.n	8004ad0 <_printf_float+0x370>
 8004a5c:	9b08      	ldr	r3, [sp, #32]
 8004a5e:	9a04      	ldr	r2, [sp, #16]
 8004a60:	9907      	ldr	r1, [sp, #28]
 8004a62:	1a9a      	subs	r2, r3, r2
 8004a64:	eba3 0901 	sub.w	r9, r3, r1
 8004a68:	4591      	cmp	r9, r2
 8004a6a:	bfa8      	it	ge
 8004a6c:	4691      	movge	r9, r2
 8004a6e:	f1b9 0f00 	cmp.w	r9, #0
 8004a72:	dc35      	bgt.n	8004ae0 <_printf_float+0x380>
 8004a74:	f04f 0800 	mov.w	r8, #0
 8004a78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a7c:	f104 0a1a 	add.w	sl, r4, #26
 8004a80:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	eba3 0309 	sub.w	r3, r3, r9
 8004a8a:	4543      	cmp	r3, r8
 8004a8c:	f77f af75 	ble.w	800497a <_printf_float+0x21a>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4652      	mov	r2, sl
 8004a94:	4631      	mov	r1, r6
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b8      	blx	r7
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f43f aeae 	beq.w	80047fc <_printf_float+0x9c>
 8004aa0:	f108 0801 	add.w	r8, r8, #1
 8004aa4:	e7ec      	b.n	8004a80 <_printf_float+0x320>
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4642      	mov	r2, r8
 8004aac:	4628      	mov	r0, r5
 8004aae:	47b8      	blx	r7
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d1bf      	bne.n	8004a34 <_printf_float+0x2d4>
 8004ab4:	e6a2      	b.n	80047fc <_printf_float+0x9c>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4628      	mov	r0, r5
 8004abc:	9204      	str	r2, [sp, #16]
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f ae9b 	beq.w	80047fc <_printf_float+0x9c>
 8004ac6:	9b05      	ldr	r3, [sp, #20]
 8004ac8:	9a04      	ldr	r2, [sp, #16]
 8004aca:	3301      	adds	r3, #1
 8004acc:	9305      	str	r3, [sp, #20]
 8004ace:	e7b7      	b.n	8004a40 <_printf_float+0x2e0>
 8004ad0:	4653      	mov	r3, sl
 8004ad2:	465a      	mov	r2, fp
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	47b8      	blx	r7
 8004ada:	3001      	adds	r0, #1
 8004adc:	d1be      	bne.n	8004a5c <_printf_float+0x2fc>
 8004ade:	e68d      	b.n	80047fc <_printf_float+0x9c>
 8004ae0:	9a04      	ldr	r2, [sp, #16]
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	4442      	add	r2, r8
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	d1c1      	bne.n	8004a74 <_printf_float+0x314>
 8004af0:	e684      	b.n	80047fc <_printf_float+0x9c>
 8004af2:	9a08      	ldr	r2, [sp, #32]
 8004af4:	2a01      	cmp	r2, #1
 8004af6:	dc01      	bgt.n	8004afc <_printf_float+0x39c>
 8004af8:	07db      	lsls	r3, r3, #31
 8004afa:	d537      	bpl.n	8004b6c <_printf_float+0x40c>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4642      	mov	r2, r8
 8004b00:	4631      	mov	r1, r6
 8004b02:	4628      	mov	r0, r5
 8004b04:	47b8      	blx	r7
 8004b06:	3001      	adds	r0, #1
 8004b08:	f43f ae78 	beq.w	80047fc <_printf_float+0x9c>
 8004b0c:	4653      	mov	r3, sl
 8004b0e:	465a      	mov	r2, fp
 8004b10:	4631      	mov	r1, r6
 8004b12:	4628      	mov	r0, r5
 8004b14:	47b8      	blx	r7
 8004b16:	3001      	adds	r0, #1
 8004b18:	f43f ae70 	beq.w	80047fc <_printf_float+0x9c>
 8004b1c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004b20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b28:	d01b      	beq.n	8004b62 <_printf_float+0x402>
 8004b2a:	9b08      	ldr	r3, [sp, #32]
 8004b2c:	f108 0201 	add.w	r2, r8, #1
 8004b30:	3b01      	subs	r3, #1
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d10e      	bne.n	8004b5a <_printf_float+0x3fa>
 8004b3c:	e65e      	b.n	80047fc <_printf_float+0x9c>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	464a      	mov	r2, r9
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	f43f ae57 	beq.w	80047fc <_printf_float+0x9c>
 8004b4e:	f108 0801 	add.w	r8, r8, #1
 8004b52:	9b08      	ldr	r3, [sp, #32]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	4543      	cmp	r3, r8
 8004b58:	dcf1      	bgt.n	8004b3e <_printf_float+0x3de>
 8004b5a:	9b04      	ldr	r3, [sp, #16]
 8004b5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b60:	e6db      	b.n	800491a <_printf_float+0x1ba>
 8004b62:	f04f 0800 	mov.w	r8, #0
 8004b66:	f104 091a 	add.w	r9, r4, #26
 8004b6a:	e7f2      	b.n	8004b52 <_printf_float+0x3f2>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4642      	mov	r2, r8
 8004b70:	e7df      	b.n	8004b32 <_printf_float+0x3d2>
 8004b72:	2301      	movs	r3, #1
 8004b74:	464a      	mov	r2, r9
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f ae3d 	beq.w	80047fc <_printf_float+0x9c>
 8004b82:	f108 0801 	add.w	r8, r8, #1
 8004b86:	68e3      	ldr	r3, [r4, #12]
 8004b88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b8a:	1a5b      	subs	r3, r3, r1
 8004b8c:	4543      	cmp	r3, r8
 8004b8e:	dcf0      	bgt.n	8004b72 <_printf_float+0x412>
 8004b90:	e6f7      	b.n	8004982 <_printf_float+0x222>
 8004b92:	f04f 0800 	mov.w	r8, #0
 8004b96:	f104 0919 	add.w	r9, r4, #25
 8004b9a:	e7f4      	b.n	8004b86 <_printf_float+0x426>

08004b9c <_printf_common>:
 8004b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	4616      	mov	r6, r2
 8004ba2:	4699      	mov	r9, r3
 8004ba4:	688a      	ldr	r2, [r1, #8]
 8004ba6:	690b      	ldr	r3, [r1, #16]
 8004ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bac:	4293      	cmp	r3, r2
 8004bae:	bfb8      	it	lt
 8004bb0:	4613      	movlt	r3, r2
 8004bb2:	6033      	str	r3, [r6, #0]
 8004bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bb8:	4607      	mov	r7, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	b10a      	cbz	r2, 8004bc2 <_printf_common+0x26>
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	6033      	str	r3, [r6, #0]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	0699      	lsls	r1, r3, #26
 8004bc6:	bf42      	ittt	mi
 8004bc8:	6833      	ldrmi	r3, [r6, #0]
 8004bca:	3302      	addmi	r3, #2
 8004bcc:	6033      	strmi	r3, [r6, #0]
 8004bce:	6825      	ldr	r5, [r4, #0]
 8004bd0:	f015 0506 	ands.w	r5, r5, #6
 8004bd4:	d106      	bne.n	8004be4 <_printf_common+0x48>
 8004bd6:	f104 0a19 	add.w	sl, r4, #25
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	6832      	ldr	r2, [r6, #0]
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	42ab      	cmp	r3, r5
 8004be2:	dc26      	bgt.n	8004c32 <_printf_common+0x96>
 8004be4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004be8:	1e13      	subs	r3, r2, #0
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	bf18      	it	ne
 8004bee:	2301      	movne	r3, #1
 8004bf0:	0692      	lsls	r2, r2, #26
 8004bf2:	d42b      	bmi.n	8004c4c <_printf_common+0xb0>
 8004bf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	47c0      	blx	r8
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d01e      	beq.n	8004c40 <_printf_common+0xa4>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	68e5      	ldr	r5, [r4, #12]
 8004c06:	6832      	ldr	r2, [r6, #0]
 8004c08:	f003 0306 	and.w	r3, r3, #6
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	bf08      	it	eq
 8004c10:	1aad      	subeq	r5, r5, r2
 8004c12:	68a3      	ldr	r3, [r4, #8]
 8004c14:	6922      	ldr	r2, [r4, #16]
 8004c16:	bf0c      	ite	eq
 8004c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c1c:	2500      	movne	r5, #0
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	bfc4      	itt	gt
 8004c22:	1a9b      	subgt	r3, r3, r2
 8004c24:	18ed      	addgt	r5, r5, r3
 8004c26:	2600      	movs	r6, #0
 8004c28:	341a      	adds	r4, #26
 8004c2a:	42b5      	cmp	r5, r6
 8004c2c:	d11a      	bne.n	8004c64 <_printf_common+0xc8>
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e008      	b.n	8004c44 <_printf_common+0xa8>
 8004c32:	2301      	movs	r3, #1
 8004c34:	4652      	mov	r2, sl
 8004c36:	4649      	mov	r1, r9
 8004c38:	4638      	mov	r0, r7
 8004c3a:	47c0      	blx	r8
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d103      	bne.n	8004c48 <_printf_common+0xac>
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c48:	3501      	adds	r5, #1
 8004c4a:	e7c6      	b.n	8004bda <_printf_common+0x3e>
 8004c4c:	18e1      	adds	r1, r4, r3
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	2030      	movs	r0, #48	; 0x30
 8004c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c56:	4422      	add	r2, r4
 8004c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c60:	3302      	adds	r3, #2
 8004c62:	e7c7      	b.n	8004bf4 <_printf_common+0x58>
 8004c64:	2301      	movs	r3, #1
 8004c66:	4622      	mov	r2, r4
 8004c68:	4649      	mov	r1, r9
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	47c0      	blx	r8
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d0e6      	beq.n	8004c40 <_printf_common+0xa4>
 8004c72:	3601      	adds	r6, #1
 8004c74:	e7d9      	b.n	8004c2a <_printf_common+0x8e>
	...

08004c78 <_printf_i>:
 8004c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	7e0f      	ldrb	r7, [r1, #24]
 8004c7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c80:	2f78      	cmp	r7, #120	; 0x78
 8004c82:	4691      	mov	r9, r2
 8004c84:	4680      	mov	r8, r0
 8004c86:	460c      	mov	r4, r1
 8004c88:	469a      	mov	sl, r3
 8004c8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c8e:	d807      	bhi.n	8004ca0 <_printf_i+0x28>
 8004c90:	2f62      	cmp	r7, #98	; 0x62
 8004c92:	d80a      	bhi.n	8004caa <_printf_i+0x32>
 8004c94:	2f00      	cmp	r7, #0
 8004c96:	f000 80d8 	beq.w	8004e4a <_printf_i+0x1d2>
 8004c9a:	2f58      	cmp	r7, #88	; 0x58
 8004c9c:	f000 80a3 	beq.w	8004de6 <_printf_i+0x16e>
 8004ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ca8:	e03a      	b.n	8004d20 <_printf_i+0xa8>
 8004caa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cae:	2b15      	cmp	r3, #21
 8004cb0:	d8f6      	bhi.n	8004ca0 <_printf_i+0x28>
 8004cb2:	a101      	add	r1, pc, #4	; (adr r1, 8004cb8 <_printf_i+0x40>)
 8004cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cb8:	08004d11 	.word	0x08004d11
 8004cbc:	08004d25 	.word	0x08004d25
 8004cc0:	08004ca1 	.word	0x08004ca1
 8004cc4:	08004ca1 	.word	0x08004ca1
 8004cc8:	08004ca1 	.word	0x08004ca1
 8004ccc:	08004ca1 	.word	0x08004ca1
 8004cd0:	08004d25 	.word	0x08004d25
 8004cd4:	08004ca1 	.word	0x08004ca1
 8004cd8:	08004ca1 	.word	0x08004ca1
 8004cdc:	08004ca1 	.word	0x08004ca1
 8004ce0:	08004ca1 	.word	0x08004ca1
 8004ce4:	08004e31 	.word	0x08004e31
 8004ce8:	08004d55 	.word	0x08004d55
 8004cec:	08004e13 	.word	0x08004e13
 8004cf0:	08004ca1 	.word	0x08004ca1
 8004cf4:	08004ca1 	.word	0x08004ca1
 8004cf8:	08004e53 	.word	0x08004e53
 8004cfc:	08004ca1 	.word	0x08004ca1
 8004d00:	08004d55 	.word	0x08004d55
 8004d04:	08004ca1 	.word	0x08004ca1
 8004d08:	08004ca1 	.word	0x08004ca1
 8004d0c:	08004e1b 	.word	0x08004e1b
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	1d1a      	adds	r2, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	602a      	str	r2, [r5, #0]
 8004d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0a3      	b.n	8004e6c <_printf_i+0x1f4>
 8004d24:	6820      	ldr	r0, [r4, #0]
 8004d26:	6829      	ldr	r1, [r5, #0]
 8004d28:	0606      	lsls	r6, r0, #24
 8004d2a:	f101 0304 	add.w	r3, r1, #4
 8004d2e:	d50a      	bpl.n	8004d46 <_printf_i+0xce>
 8004d30:	680e      	ldr	r6, [r1, #0]
 8004d32:	602b      	str	r3, [r5, #0]
 8004d34:	2e00      	cmp	r6, #0
 8004d36:	da03      	bge.n	8004d40 <_printf_i+0xc8>
 8004d38:	232d      	movs	r3, #45	; 0x2d
 8004d3a:	4276      	negs	r6, r6
 8004d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d40:	485e      	ldr	r0, [pc, #376]	; (8004ebc <_printf_i+0x244>)
 8004d42:	230a      	movs	r3, #10
 8004d44:	e019      	b.n	8004d7a <_printf_i+0x102>
 8004d46:	680e      	ldr	r6, [r1, #0]
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d4e:	bf18      	it	ne
 8004d50:	b236      	sxthne	r6, r6
 8004d52:	e7ef      	b.n	8004d34 <_printf_i+0xbc>
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	6820      	ldr	r0, [r4, #0]
 8004d58:	1d19      	adds	r1, r3, #4
 8004d5a:	6029      	str	r1, [r5, #0]
 8004d5c:	0601      	lsls	r1, r0, #24
 8004d5e:	d501      	bpl.n	8004d64 <_printf_i+0xec>
 8004d60:	681e      	ldr	r6, [r3, #0]
 8004d62:	e002      	b.n	8004d6a <_printf_i+0xf2>
 8004d64:	0646      	lsls	r6, r0, #25
 8004d66:	d5fb      	bpl.n	8004d60 <_printf_i+0xe8>
 8004d68:	881e      	ldrh	r6, [r3, #0]
 8004d6a:	4854      	ldr	r0, [pc, #336]	; (8004ebc <_printf_i+0x244>)
 8004d6c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d6e:	bf0c      	ite	eq
 8004d70:	2308      	moveq	r3, #8
 8004d72:	230a      	movne	r3, #10
 8004d74:	2100      	movs	r1, #0
 8004d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d7a:	6865      	ldr	r5, [r4, #4]
 8004d7c:	60a5      	str	r5, [r4, #8]
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	bfa2      	ittt	ge
 8004d82:	6821      	ldrge	r1, [r4, #0]
 8004d84:	f021 0104 	bicge.w	r1, r1, #4
 8004d88:	6021      	strge	r1, [r4, #0]
 8004d8a:	b90e      	cbnz	r6, 8004d90 <_printf_i+0x118>
 8004d8c:	2d00      	cmp	r5, #0
 8004d8e:	d04d      	beq.n	8004e2c <_printf_i+0x1b4>
 8004d90:	4615      	mov	r5, r2
 8004d92:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d96:	fb03 6711 	mls	r7, r3, r1, r6
 8004d9a:	5dc7      	ldrb	r7, [r0, r7]
 8004d9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004da0:	4637      	mov	r7, r6
 8004da2:	42bb      	cmp	r3, r7
 8004da4:	460e      	mov	r6, r1
 8004da6:	d9f4      	bls.n	8004d92 <_printf_i+0x11a>
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d10b      	bne.n	8004dc4 <_printf_i+0x14c>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	07de      	lsls	r6, r3, #31
 8004db0:	d508      	bpl.n	8004dc4 <_printf_i+0x14c>
 8004db2:	6923      	ldr	r3, [r4, #16]
 8004db4:	6861      	ldr	r1, [r4, #4]
 8004db6:	4299      	cmp	r1, r3
 8004db8:	bfde      	ittt	le
 8004dba:	2330      	movle	r3, #48	; 0x30
 8004dbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dc4:	1b52      	subs	r2, r2, r5
 8004dc6:	6122      	str	r2, [r4, #16]
 8004dc8:	f8cd a000 	str.w	sl, [sp]
 8004dcc:	464b      	mov	r3, r9
 8004dce:	aa03      	add	r2, sp, #12
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	f7ff fee2 	bl	8004b9c <_printf_common>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d14c      	bne.n	8004e76 <_printf_i+0x1fe>
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8004de0:	b004      	add	sp, #16
 8004de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de6:	4835      	ldr	r0, [pc, #212]	; (8004ebc <_printf_i+0x244>)
 8004de8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004dec:	6829      	ldr	r1, [r5, #0]
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004df4:	6029      	str	r1, [r5, #0]
 8004df6:	061d      	lsls	r5, r3, #24
 8004df8:	d514      	bpl.n	8004e24 <_printf_i+0x1ac>
 8004dfa:	07df      	lsls	r7, r3, #31
 8004dfc:	bf44      	itt	mi
 8004dfe:	f043 0320 	orrmi.w	r3, r3, #32
 8004e02:	6023      	strmi	r3, [r4, #0]
 8004e04:	b91e      	cbnz	r6, 8004e0e <_printf_i+0x196>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	f023 0320 	bic.w	r3, r3, #32
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	2310      	movs	r3, #16
 8004e10:	e7b0      	b.n	8004d74 <_printf_i+0xfc>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	f043 0320 	orr.w	r3, r3, #32
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	2378      	movs	r3, #120	; 0x78
 8004e1c:	4828      	ldr	r0, [pc, #160]	; (8004ec0 <_printf_i+0x248>)
 8004e1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e22:	e7e3      	b.n	8004dec <_printf_i+0x174>
 8004e24:	0659      	lsls	r1, r3, #25
 8004e26:	bf48      	it	mi
 8004e28:	b2b6      	uxthmi	r6, r6
 8004e2a:	e7e6      	b.n	8004dfa <_printf_i+0x182>
 8004e2c:	4615      	mov	r5, r2
 8004e2e:	e7bb      	b.n	8004da8 <_printf_i+0x130>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	6826      	ldr	r6, [r4, #0]
 8004e34:	6961      	ldr	r1, [r4, #20]
 8004e36:	1d18      	adds	r0, r3, #4
 8004e38:	6028      	str	r0, [r5, #0]
 8004e3a:	0635      	lsls	r5, r6, #24
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	d501      	bpl.n	8004e44 <_printf_i+0x1cc>
 8004e40:	6019      	str	r1, [r3, #0]
 8004e42:	e002      	b.n	8004e4a <_printf_i+0x1d2>
 8004e44:	0670      	lsls	r0, r6, #25
 8004e46:	d5fb      	bpl.n	8004e40 <_printf_i+0x1c8>
 8004e48:	8019      	strh	r1, [r3, #0]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6123      	str	r3, [r4, #16]
 8004e4e:	4615      	mov	r5, r2
 8004e50:	e7ba      	b.n	8004dc8 <_printf_i+0x150>
 8004e52:	682b      	ldr	r3, [r5, #0]
 8004e54:	1d1a      	adds	r2, r3, #4
 8004e56:	602a      	str	r2, [r5, #0]
 8004e58:	681d      	ldr	r5, [r3, #0]
 8004e5a:	6862      	ldr	r2, [r4, #4]
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f7fb f9f6 	bl	8000250 <memchr>
 8004e64:	b108      	cbz	r0, 8004e6a <_printf_i+0x1f2>
 8004e66:	1b40      	subs	r0, r0, r5
 8004e68:	6060      	str	r0, [r4, #4]
 8004e6a:	6863      	ldr	r3, [r4, #4]
 8004e6c:	6123      	str	r3, [r4, #16]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e74:	e7a8      	b.n	8004dc8 <_printf_i+0x150>
 8004e76:	6923      	ldr	r3, [r4, #16]
 8004e78:	462a      	mov	r2, r5
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	4640      	mov	r0, r8
 8004e7e:	47d0      	blx	sl
 8004e80:	3001      	adds	r0, #1
 8004e82:	d0ab      	beq.n	8004ddc <_printf_i+0x164>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	079b      	lsls	r3, r3, #30
 8004e88:	d413      	bmi.n	8004eb2 <_printf_i+0x23a>
 8004e8a:	68e0      	ldr	r0, [r4, #12]
 8004e8c:	9b03      	ldr	r3, [sp, #12]
 8004e8e:	4298      	cmp	r0, r3
 8004e90:	bfb8      	it	lt
 8004e92:	4618      	movlt	r0, r3
 8004e94:	e7a4      	b.n	8004de0 <_printf_i+0x168>
 8004e96:	2301      	movs	r3, #1
 8004e98:	4632      	mov	r2, r6
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	4640      	mov	r0, r8
 8004e9e:	47d0      	blx	sl
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d09b      	beq.n	8004ddc <_printf_i+0x164>
 8004ea4:	3501      	adds	r5, #1
 8004ea6:	68e3      	ldr	r3, [r4, #12]
 8004ea8:	9903      	ldr	r1, [sp, #12]
 8004eaa:	1a5b      	subs	r3, r3, r1
 8004eac:	42ab      	cmp	r3, r5
 8004eae:	dcf2      	bgt.n	8004e96 <_printf_i+0x21e>
 8004eb0:	e7eb      	b.n	8004e8a <_printf_i+0x212>
 8004eb2:	2500      	movs	r5, #0
 8004eb4:	f104 0619 	add.w	r6, r4, #25
 8004eb8:	e7f5      	b.n	8004ea6 <_printf_i+0x22e>
 8004eba:	bf00      	nop
 8004ebc:	0800759e 	.word	0x0800759e
 8004ec0:	080075af 	.word	0x080075af

08004ec4 <_sbrk_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4d06      	ldr	r5, [pc, #24]	; (8004ee0 <_sbrk_r+0x1c>)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4604      	mov	r4, r0
 8004ecc:	4608      	mov	r0, r1
 8004ece:	602b      	str	r3, [r5, #0]
 8004ed0:	f001 ff5c 	bl	8006d8c <_sbrk>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d102      	bne.n	8004ede <_sbrk_r+0x1a>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	b103      	cbz	r3, 8004ede <_sbrk_r+0x1a>
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	200009a0 	.word	0x200009a0

08004ee4 <__sread>:
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eec:	f001 fa0e 	bl	800630c <_read_r>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	bfab      	itete	ge
 8004ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ef8:	181b      	addge	r3, r3, r0
 8004efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004efe:	bfac      	ite	ge
 8004f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f02:	81a3      	strhlt	r3, [r4, #12]
 8004f04:	bd10      	pop	{r4, pc}

08004f06 <__swrite>:
 8004f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0a:	461f      	mov	r7, r3
 8004f0c:	898b      	ldrh	r3, [r1, #12]
 8004f0e:	05db      	lsls	r3, r3, #23
 8004f10:	4605      	mov	r5, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	4616      	mov	r6, r2
 8004f16:	d505      	bpl.n	8004f24 <__swrite+0x1e>
 8004f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f000 fe44 	bl	8005bac <_lseek_r>
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f2e:	81a3      	strh	r3, [r4, #12]
 8004f30:	4632      	mov	r2, r6
 8004f32:	463b      	mov	r3, r7
 8004f34:	4628      	mov	r0, r5
 8004f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3a:	f000 b817 	b.w	8004f6c <_write_r>

08004f3e <__sseek>:
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	460c      	mov	r4, r1
 8004f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f46:	f000 fe31 	bl	8005bac <_lseek_r>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	bf15      	itete	ne
 8004f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f5a:	81a3      	strheq	r3, [r4, #12]
 8004f5c:	bf18      	it	ne
 8004f5e:	81a3      	strhne	r3, [r4, #12]
 8004f60:	bd10      	pop	{r4, pc}

08004f62 <__sclose>:
 8004f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f66:	f000 b813 	b.w	8004f90 <_close_r>
	...

08004f6c <_write_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4d07      	ldr	r5, [pc, #28]	; (8004f8c <_write_r+0x20>)
 8004f70:	4604      	mov	r4, r0
 8004f72:	4608      	mov	r0, r1
 8004f74:	4611      	mov	r1, r2
 8004f76:	2200      	movs	r2, #0
 8004f78:	602a      	str	r2, [r5, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f001 ff14 	bl	8006da8 <_write>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_write_r+0x1e>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_write_r+0x1e>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	200009a0 	.word	0x200009a0

08004f90 <_close_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d06      	ldr	r5, [pc, #24]	; (8004fac <_close_r+0x1c>)
 8004f94:	2300      	movs	r3, #0
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	f001 febe 	bl	8006d1c <_close>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_close_r+0x1a>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_close_r+0x1a>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	200009a0 	.word	0x200009a0

08004fb0 <quorem>:
 8004fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	6903      	ldr	r3, [r0, #16]
 8004fb6:	690c      	ldr	r4, [r1, #16]
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	4607      	mov	r7, r0
 8004fbc:	f2c0 8081 	blt.w	80050c2 <quorem+0x112>
 8004fc0:	3c01      	subs	r4, #1
 8004fc2:	f101 0814 	add.w	r8, r1, #20
 8004fc6:	f100 0514 	add.w	r5, r0, #20
 8004fca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004fe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004fe4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fe8:	d331      	bcc.n	800504e <quorem+0x9e>
 8004fea:	f04f 0e00 	mov.w	lr, #0
 8004fee:	4640      	mov	r0, r8
 8004ff0:	46ac      	mov	ip, r5
 8004ff2:	46f2      	mov	sl, lr
 8004ff4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ff8:	b293      	uxth	r3, r2
 8004ffa:	fb06 e303 	mla	r3, r6, r3, lr
 8004ffe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005002:	b29b      	uxth	r3, r3
 8005004:	ebaa 0303 	sub.w	r3, sl, r3
 8005008:	f8dc a000 	ldr.w	sl, [ip]
 800500c:	0c12      	lsrs	r2, r2, #16
 800500e:	fa13 f38a 	uxtah	r3, r3, sl
 8005012:	fb06 e202 	mla	r2, r6, r2, lr
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	9b00      	ldr	r3, [sp, #0]
 800501a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800501e:	b292      	uxth	r2, r2
 8005020:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005024:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005028:	f8bd 3000 	ldrh.w	r3, [sp]
 800502c:	4581      	cmp	r9, r0
 800502e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005032:	f84c 3b04 	str.w	r3, [ip], #4
 8005036:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800503a:	d2db      	bcs.n	8004ff4 <quorem+0x44>
 800503c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005040:	b92b      	cbnz	r3, 800504e <quorem+0x9e>
 8005042:	9b01      	ldr	r3, [sp, #4]
 8005044:	3b04      	subs	r3, #4
 8005046:	429d      	cmp	r5, r3
 8005048:	461a      	mov	r2, r3
 800504a:	d32e      	bcc.n	80050aa <quorem+0xfa>
 800504c:	613c      	str	r4, [r7, #16]
 800504e:	4638      	mov	r0, r7
 8005050:	f001 f85a 	bl	8006108 <__mcmp>
 8005054:	2800      	cmp	r0, #0
 8005056:	db24      	blt.n	80050a2 <quorem+0xf2>
 8005058:	3601      	adds	r6, #1
 800505a:	4628      	mov	r0, r5
 800505c:	f04f 0c00 	mov.w	ip, #0
 8005060:	f858 2b04 	ldr.w	r2, [r8], #4
 8005064:	f8d0 e000 	ldr.w	lr, [r0]
 8005068:	b293      	uxth	r3, r2
 800506a:	ebac 0303 	sub.w	r3, ip, r3
 800506e:	0c12      	lsrs	r2, r2, #16
 8005070:	fa13 f38e 	uxtah	r3, r3, lr
 8005074:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005078:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800507c:	b29b      	uxth	r3, r3
 800507e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005082:	45c1      	cmp	r9, r8
 8005084:	f840 3b04 	str.w	r3, [r0], #4
 8005088:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800508c:	d2e8      	bcs.n	8005060 <quorem+0xb0>
 800508e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005096:	b922      	cbnz	r2, 80050a2 <quorem+0xf2>
 8005098:	3b04      	subs	r3, #4
 800509a:	429d      	cmp	r5, r3
 800509c:	461a      	mov	r2, r3
 800509e:	d30a      	bcc.n	80050b6 <quorem+0x106>
 80050a0:	613c      	str	r4, [r7, #16]
 80050a2:	4630      	mov	r0, r6
 80050a4:	b003      	add	sp, #12
 80050a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	3b04      	subs	r3, #4
 80050ae:	2a00      	cmp	r2, #0
 80050b0:	d1cc      	bne.n	800504c <quorem+0x9c>
 80050b2:	3c01      	subs	r4, #1
 80050b4:	e7c7      	b.n	8005046 <quorem+0x96>
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	3b04      	subs	r3, #4
 80050ba:	2a00      	cmp	r2, #0
 80050bc:	d1f0      	bne.n	80050a0 <quorem+0xf0>
 80050be:	3c01      	subs	r4, #1
 80050c0:	e7eb      	b.n	800509a <quorem+0xea>
 80050c2:	2000      	movs	r0, #0
 80050c4:	e7ee      	b.n	80050a4 <quorem+0xf4>
	...

080050c8 <_dtoa_r>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	ed2d 8b02 	vpush	{d8}
 80050d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050d2:	b091      	sub	sp, #68	; 0x44
 80050d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80050d8:	ec59 8b10 	vmov	r8, r9, d0
 80050dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80050de:	9106      	str	r1, [sp, #24]
 80050e0:	4606      	mov	r6, r0
 80050e2:	9208      	str	r2, [sp, #32]
 80050e4:	930c      	str	r3, [sp, #48]	; 0x30
 80050e6:	b975      	cbnz	r5, 8005106 <_dtoa_r+0x3e>
 80050e8:	2010      	movs	r0, #16
 80050ea:	f7ff f99b 	bl	8004424 <malloc>
 80050ee:	4602      	mov	r2, r0
 80050f0:	6270      	str	r0, [r6, #36]	; 0x24
 80050f2:	b920      	cbnz	r0, 80050fe <_dtoa_r+0x36>
 80050f4:	4baa      	ldr	r3, [pc, #680]	; (80053a0 <_dtoa_r+0x2d8>)
 80050f6:	21ea      	movs	r1, #234	; 0xea
 80050f8:	48aa      	ldr	r0, [pc, #680]	; (80053a4 <_dtoa_r+0x2dc>)
 80050fa:	f001 f919 	bl	8006330 <__assert_func>
 80050fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005102:	6005      	str	r5, [r0, #0]
 8005104:	60c5      	str	r5, [r0, #12]
 8005106:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	b151      	cbz	r1, 8005122 <_dtoa_r+0x5a>
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	604a      	str	r2, [r1, #4]
 8005110:	2301      	movs	r3, #1
 8005112:	4093      	lsls	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
 8005116:	4630      	mov	r0, r6
 8005118:	f000 fdb4 	bl	8005c84 <_Bfree>
 800511c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	f1b9 0300 	subs.w	r3, r9, #0
 8005126:	bfbb      	ittet	lt
 8005128:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800512c:	9303      	strlt	r3, [sp, #12]
 800512e:	2300      	movge	r3, #0
 8005130:	2201      	movlt	r2, #1
 8005132:	bfac      	ite	ge
 8005134:	6023      	strge	r3, [r4, #0]
 8005136:	6022      	strlt	r2, [r4, #0]
 8005138:	4b9b      	ldr	r3, [pc, #620]	; (80053a8 <_dtoa_r+0x2e0>)
 800513a:	9c03      	ldr	r4, [sp, #12]
 800513c:	43a3      	bics	r3, r4
 800513e:	d11c      	bne.n	800517a <_dtoa_r+0xb2>
 8005140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005142:	f242 730f 	movw	r3, #9999	; 0x270f
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800514c:	ea53 0308 	orrs.w	r3, r3, r8
 8005150:	f000 84fd 	beq.w	8005b4e <_dtoa_r+0xa86>
 8005154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005156:	b963      	cbnz	r3, 8005172 <_dtoa_r+0xaa>
 8005158:	4b94      	ldr	r3, [pc, #592]	; (80053ac <_dtoa_r+0x2e4>)
 800515a:	e01f      	b.n	800519c <_dtoa_r+0xd4>
 800515c:	4b94      	ldr	r3, [pc, #592]	; (80053b0 <_dtoa_r+0x2e8>)
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	3308      	adds	r3, #8
 8005162:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	9801      	ldr	r0, [sp, #4]
 8005168:	b011      	add	sp, #68	; 0x44
 800516a:	ecbd 8b02 	vpop	{d8}
 800516e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005172:	4b8e      	ldr	r3, [pc, #568]	; (80053ac <_dtoa_r+0x2e4>)
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	3303      	adds	r3, #3
 8005178:	e7f3      	b.n	8005162 <_dtoa_r+0x9a>
 800517a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800517e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005186:	d10b      	bne.n	80051a0 <_dtoa_r+0xd8>
 8005188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800518a:	2301      	movs	r3, #1
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 84d9 	beq.w	8005b48 <_dtoa_r+0xa80>
 8005196:	4887      	ldr	r0, [pc, #540]	; (80053b4 <_dtoa_r+0x2ec>)
 8005198:	6018      	str	r0, [r3, #0]
 800519a:	1e43      	subs	r3, r0, #1
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	e7e2      	b.n	8005166 <_dtoa_r+0x9e>
 80051a0:	a90f      	add	r1, sp, #60	; 0x3c
 80051a2:	aa0e      	add	r2, sp, #56	; 0x38
 80051a4:	4630      	mov	r0, r6
 80051a6:	eeb0 0b48 	vmov.f64	d0, d8
 80051aa:	f001 f853 	bl	8006254 <__d2b>
 80051ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80051b2:	4605      	mov	r5, r0
 80051b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80051b6:	2900      	cmp	r1, #0
 80051b8:	d046      	beq.n	8005248 <_dtoa_r+0x180>
 80051ba:	ee18 4a90 	vmov	r4, s17
 80051be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80051c2:	ec53 2b18 	vmov	r2, r3, d8
 80051c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80051ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80051ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80051d2:	2400      	movs	r4, #0
 80051d4:	ec43 2b16 	vmov	d6, r2, r3
 80051d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80051dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005388 <_dtoa_r+0x2c0>
 80051e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80051e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8005390 <_dtoa_r+0x2c8>
 80051e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80051ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005398 <_dtoa_r+0x2d0>
 80051f0:	ee07 1a90 	vmov	s15, r1
 80051f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80051f8:	eeb0 7b46 	vmov.f64	d7, d6
 80051fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005200:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005204:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	ee16 ba90 	vmov	fp, s13
 8005210:	940a      	str	r4, [sp, #40]	; 0x28
 8005212:	d508      	bpl.n	8005226 <_dtoa_r+0x15e>
 8005214:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005218:	eeb4 6b47 	vcmp.f64	d6, d7
 800521c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005220:	bf18      	it	ne
 8005222:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005226:	f1bb 0f16 	cmp.w	fp, #22
 800522a:	d82f      	bhi.n	800528c <_dtoa_r+0x1c4>
 800522c:	4b62      	ldr	r3, [pc, #392]	; (80053b8 <_dtoa_r+0x2f0>)
 800522e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005232:	ed93 7b00 	vldr	d7, [r3]
 8005236:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800523a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523e:	d501      	bpl.n	8005244 <_dtoa_r+0x17c>
 8005240:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005244:	2300      	movs	r3, #0
 8005246:	e022      	b.n	800528e <_dtoa_r+0x1c6>
 8005248:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800524a:	4401      	add	r1, r0
 800524c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005250:	2b20      	cmp	r3, #32
 8005252:	bfc1      	itttt	gt
 8005254:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005258:	fa04 f303 	lslgt.w	r3, r4, r3
 800525c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005260:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005264:	bfd6      	itet	le
 8005266:	f1c3 0320 	rsble	r3, r3, #32
 800526a:	ea43 0808 	orrgt.w	r8, r3, r8
 800526e:	fa08 f803 	lslle.w	r8, r8, r3
 8005272:	ee07 8a90 	vmov	s15, r8
 8005276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800527a:	3901      	subs	r1, #1
 800527c:	ee17 4a90 	vmov	r4, s15
 8005280:	ec53 2b17 	vmov	r2, r3, d7
 8005284:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005288:	2401      	movs	r4, #1
 800528a:	e7a3      	b.n	80051d4 <_dtoa_r+0x10c>
 800528c:	2301      	movs	r3, #1
 800528e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005290:	1a43      	subs	r3, r0, r1
 8005292:	1e5a      	subs	r2, r3, #1
 8005294:	bf45      	ittet	mi
 8005296:	f1c3 0301 	rsbmi	r3, r3, #1
 800529a:	9304      	strmi	r3, [sp, #16]
 800529c:	2300      	movpl	r3, #0
 800529e:	2300      	movmi	r3, #0
 80052a0:	9205      	str	r2, [sp, #20]
 80052a2:	bf54      	ite	pl
 80052a4:	9304      	strpl	r3, [sp, #16]
 80052a6:	9305      	strmi	r3, [sp, #20]
 80052a8:	f1bb 0f00 	cmp.w	fp, #0
 80052ac:	db18      	blt.n	80052e0 <_dtoa_r+0x218>
 80052ae:	9b05      	ldr	r3, [sp, #20]
 80052b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80052b4:	445b      	add	r3, fp
 80052b6:	9305      	str	r3, [sp, #20]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9a06      	ldr	r2, [sp, #24]
 80052bc:	2a09      	cmp	r2, #9
 80052be:	d849      	bhi.n	8005354 <_dtoa_r+0x28c>
 80052c0:	2a05      	cmp	r2, #5
 80052c2:	bfc4      	itt	gt
 80052c4:	3a04      	subgt	r2, #4
 80052c6:	9206      	strgt	r2, [sp, #24]
 80052c8:	9a06      	ldr	r2, [sp, #24]
 80052ca:	f1a2 0202 	sub.w	r2, r2, #2
 80052ce:	bfcc      	ite	gt
 80052d0:	2400      	movgt	r4, #0
 80052d2:	2401      	movle	r4, #1
 80052d4:	2a03      	cmp	r2, #3
 80052d6:	d848      	bhi.n	800536a <_dtoa_r+0x2a2>
 80052d8:	e8df f002 	tbb	[pc, r2]
 80052dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80052e0:	9b04      	ldr	r3, [sp, #16]
 80052e2:	2200      	movs	r2, #0
 80052e4:	eba3 030b 	sub.w	r3, r3, fp
 80052e8:	9304      	str	r3, [sp, #16]
 80052ea:	9209      	str	r2, [sp, #36]	; 0x24
 80052ec:	f1cb 0300 	rsb	r3, fp, #0
 80052f0:	e7e3      	b.n	80052ba <_dtoa_r+0x1f2>
 80052f2:	2200      	movs	r2, #0
 80052f4:	9207      	str	r2, [sp, #28]
 80052f6:	9a08      	ldr	r2, [sp, #32]
 80052f8:	2a00      	cmp	r2, #0
 80052fa:	dc39      	bgt.n	8005370 <_dtoa_r+0x2a8>
 80052fc:	f04f 0a01 	mov.w	sl, #1
 8005300:	46d1      	mov	r9, sl
 8005302:	4652      	mov	r2, sl
 8005304:	f8cd a020 	str.w	sl, [sp, #32]
 8005308:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800530a:	2100      	movs	r1, #0
 800530c:	6079      	str	r1, [r7, #4]
 800530e:	2004      	movs	r0, #4
 8005310:	f100 0c14 	add.w	ip, r0, #20
 8005314:	4594      	cmp	ip, r2
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	d92f      	bls.n	800537a <_dtoa_r+0x2b2>
 800531a:	4630      	mov	r0, r6
 800531c:	930d      	str	r3, [sp, #52]	; 0x34
 800531e:	f000 fc71 	bl	8005c04 <_Balloc>
 8005322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005324:	9001      	str	r0, [sp, #4]
 8005326:	4602      	mov	r2, r0
 8005328:	2800      	cmp	r0, #0
 800532a:	d149      	bne.n	80053c0 <_dtoa_r+0x2f8>
 800532c:	4b23      	ldr	r3, [pc, #140]	; (80053bc <_dtoa_r+0x2f4>)
 800532e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005332:	e6e1      	b.n	80050f8 <_dtoa_r+0x30>
 8005334:	2201      	movs	r2, #1
 8005336:	e7dd      	b.n	80052f4 <_dtoa_r+0x22c>
 8005338:	2200      	movs	r2, #0
 800533a:	9207      	str	r2, [sp, #28]
 800533c:	9a08      	ldr	r2, [sp, #32]
 800533e:	eb0b 0a02 	add.w	sl, fp, r2
 8005342:	f10a 0901 	add.w	r9, sl, #1
 8005346:	464a      	mov	r2, r9
 8005348:	2a01      	cmp	r2, #1
 800534a:	bfb8      	it	lt
 800534c:	2201      	movlt	r2, #1
 800534e:	e7db      	b.n	8005308 <_dtoa_r+0x240>
 8005350:	2201      	movs	r2, #1
 8005352:	e7f2      	b.n	800533a <_dtoa_r+0x272>
 8005354:	2401      	movs	r4, #1
 8005356:	2200      	movs	r2, #0
 8005358:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800535c:	f04f 3aff 	mov.w	sl, #4294967295
 8005360:	2100      	movs	r1, #0
 8005362:	46d1      	mov	r9, sl
 8005364:	2212      	movs	r2, #18
 8005366:	9108      	str	r1, [sp, #32]
 8005368:	e7ce      	b.n	8005308 <_dtoa_r+0x240>
 800536a:	2201      	movs	r2, #1
 800536c:	9207      	str	r2, [sp, #28]
 800536e:	e7f5      	b.n	800535c <_dtoa_r+0x294>
 8005370:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005374:	46d1      	mov	r9, sl
 8005376:	4652      	mov	r2, sl
 8005378:	e7c6      	b.n	8005308 <_dtoa_r+0x240>
 800537a:	3101      	adds	r1, #1
 800537c:	6079      	str	r1, [r7, #4]
 800537e:	0040      	lsls	r0, r0, #1
 8005380:	e7c6      	b.n	8005310 <_dtoa_r+0x248>
 8005382:	bf00      	nop
 8005384:	f3af 8000 	nop.w
 8005388:	636f4361 	.word	0x636f4361
 800538c:	3fd287a7 	.word	0x3fd287a7
 8005390:	8b60c8b3 	.word	0x8b60c8b3
 8005394:	3fc68a28 	.word	0x3fc68a28
 8005398:	509f79fb 	.word	0x509f79fb
 800539c:	3fd34413 	.word	0x3fd34413
 80053a0:	080075cd 	.word	0x080075cd
 80053a4:	080075e4 	.word	0x080075e4
 80053a8:	7ff00000 	.word	0x7ff00000
 80053ac:	080075c9 	.word	0x080075c9
 80053b0:	080075c0 	.word	0x080075c0
 80053b4:	0800759d 	.word	0x0800759d
 80053b8:	080076d8 	.word	0x080076d8
 80053bc:	0800763f 	.word	0x0800763f
 80053c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80053c2:	9901      	ldr	r1, [sp, #4]
 80053c4:	6011      	str	r1, [r2, #0]
 80053c6:	f1b9 0f0e 	cmp.w	r9, #14
 80053ca:	d86c      	bhi.n	80054a6 <_dtoa_r+0x3de>
 80053cc:	2c00      	cmp	r4, #0
 80053ce:	d06a      	beq.n	80054a6 <_dtoa_r+0x3de>
 80053d0:	f1bb 0f00 	cmp.w	fp, #0
 80053d4:	f340 80a0 	ble.w	8005518 <_dtoa_r+0x450>
 80053d8:	49c1      	ldr	r1, [pc, #772]	; (80056e0 <_dtoa_r+0x618>)
 80053da:	f00b 020f 	and.w	r2, fp, #15
 80053de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80053e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80053e6:	ed92 7b00 	vldr	d7, [r2]
 80053ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80053ee:	f000 8087 	beq.w	8005500 <_dtoa_r+0x438>
 80053f2:	4abc      	ldr	r2, [pc, #752]	; (80056e4 <_dtoa_r+0x61c>)
 80053f4:	ed92 6b08 	vldr	d6, [r2, #32]
 80053f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80053fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005400:	f001 010f 	and.w	r1, r1, #15
 8005404:	2203      	movs	r2, #3
 8005406:	48b7      	ldr	r0, [pc, #732]	; (80056e4 <_dtoa_r+0x61c>)
 8005408:	2900      	cmp	r1, #0
 800540a:	d17b      	bne.n	8005504 <_dtoa_r+0x43c>
 800540c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005410:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005414:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005418:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800541a:	2900      	cmp	r1, #0
 800541c:	f000 80a2 	beq.w	8005564 <_dtoa_r+0x49c>
 8005420:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005424:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005428:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005430:	f140 8098 	bpl.w	8005564 <_dtoa_r+0x49c>
 8005434:	f1b9 0f00 	cmp.w	r9, #0
 8005438:	f000 8094 	beq.w	8005564 <_dtoa_r+0x49c>
 800543c:	f1ba 0f00 	cmp.w	sl, #0
 8005440:	dd2f      	ble.n	80054a2 <_dtoa_r+0x3da>
 8005442:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005446:	ee27 7b06 	vmul.f64	d7, d7, d6
 800544a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800544e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005452:	3201      	adds	r2, #1
 8005454:	4650      	mov	r0, sl
 8005456:	ed9d 6b02 	vldr	d6, [sp, #8]
 800545a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800545e:	ee07 2a90 	vmov	s15, r2
 8005462:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005466:	eea7 5b06 	vfma.f64	d5, d7, d6
 800546a:	ee15 4a90 	vmov	r4, s11
 800546e:	ec52 1b15 	vmov	r1, r2, d5
 8005472:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8005476:	2800      	cmp	r0, #0
 8005478:	d177      	bne.n	800556a <_dtoa_r+0x4a2>
 800547a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800547e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005482:	ec42 1b17 	vmov	d7, r1, r2
 8005486:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	f300 8263 	bgt.w	8005958 <_dtoa_r+0x890>
 8005492:	eeb1 7b47 	vneg.f64	d7, d7
 8005496:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800549a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549e:	f100 8258 	bmi.w	8005952 <_dtoa_r+0x88a>
 80054a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80054a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054a8:	2a00      	cmp	r2, #0
 80054aa:	f2c0 811d 	blt.w	80056e8 <_dtoa_r+0x620>
 80054ae:	f1bb 0f0e 	cmp.w	fp, #14
 80054b2:	f300 8119 	bgt.w	80056e8 <_dtoa_r+0x620>
 80054b6:	4b8a      	ldr	r3, [pc, #552]	; (80056e0 <_dtoa_r+0x618>)
 80054b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80054bc:	ed93 6b00 	vldr	d6, [r3]
 80054c0:	9b08      	ldr	r3, [sp, #32]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f280 80b7 	bge.w	8005636 <_dtoa_r+0x56e>
 80054c8:	f1b9 0f00 	cmp.w	r9, #0
 80054cc:	f300 80b3 	bgt.w	8005636 <_dtoa_r+0x56e>
 80054d0:	f040 823f 	bne.w	8005952 <_dtoa_r+0x88a>
 80054d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80054d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80054dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e8:	464c      	mov	r4, r9
 80054ea:	464f      	mov	r7, r9
 80054ec:	f280 8215 	bge.w	800591a <_dtoa_r+0x852>
 80054f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80054f4:	2331      	movs	r3, #49	; 0x31
 80054f6:	f808 3b01 	strb.w	r3, [r8], #1
 80054fa:	f10b 0b01 	add.w	fp, fp, #1
 80054fe:	e211      	b.n	8005924 <_dtoa_r+0x85c>
 8005500:	2202      	movs	r2, #2
 8005502:	e780      	b.n	8005406 <_dtoa_r+0x33e>
 8005504:	07cc      	lsls	r4, r1, #31
 8005506:	d504      	bpl.n	8005512 <_dtoa_r+0x44a>
 8005508:	ed90 6b00 	vldr	d6, [r0]
 800550c:	3201      	adds	r2, #1
 800550e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005512:	1049      	asrs	r1, r1, #1
 8005514:	3008      	adds	r0, #8
 8005516:	e777      	b.n	8005408 <_dtoa_r+0x340>
 8005518:	d022      	beq.n	8005560 <_dtoa_r+0x498>
 800551a:	f1cb 0100 	rsb	r1, fp, #0
 800551e:	4a70      	ldr	r2, [pc, #448]	; (80056e0 <_dtoa_r+0x618>)
 8005520:	f001 000f 	and.w	r0, r1, #15
 8005524:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005528:	ed92 7b00 	vldr	d7, [r2]
 800552c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005530:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005534:	486b      	ldr	r0, [pc, #428]	; (80056e4 <_dtoa_r+0x61c>)
 8005536:	1109      	asrs	r1, r1, #4
 8005538:	2400      	movs	r4, #0
 800553a:	2202      	movs	r2, #2
 800553c:	b929      	cbnz	r1, 800554a <_dtoa_r+0x482>
 800553e:	2c00      	cmp	r4, #0
 8005540:	f43f af6a 	beq.w	8005418 <_dtoa_r+0x350>
 8005544:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005548:	e766      	b.n	8005418 <_dtoa_r+0x350>
 800554a:	07cf      	lsls	r7, r1, #31
 800554c:	d505      	bpl.n	800555a <_dtoa_r+0x492>
 800554e:	ed90 6b00 	vldr	d6, [r0]
 8005552:	3201      	adds	r2, #1
 8005554:	2401      	movs	r4, #1
 8005556:	ee27 7b06 	vmul.f64	d7, d7, d6
 800555a:	1049      	asrs	r1, r1, #1
 800555c:	3008      	adds	r0, #8
 800555e:	e7ed      	b.n	800553c <_dtoa_r+0x474>
 8005560:	2202      	movs	r2, #2
 8005562:	e759      	b.n	8005418 <_dtoa_r+0x350>
 8005564:	465f      	mov	r7, fp
 8005566:	4648      	mov	r0, r9
 8005568:	e775      	b.n	8005456 <_dtoa_r+0x38e>
 800556a:	ec42 1b17 	vmov	d7, r1, r2
 800556e:	4a5c      	ldr	r2, [pc, #368]	; (80056e0 <_dtoa_r+0x618>)
 8005570:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005574:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005578:	9a01      	ldr	r2, [sp, #4]
 800557a:	1814      	adds	r4, r2, r0
 800557c:	9a07      	ldr	r2, [sp, #28]
 800557e:	b352      	cbz	r2, 80055d6 <_dtoa_r+0x50e>
 8005580:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005584:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005588:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800558c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005590:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005594:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005598:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800559c:	ee14 2a90 	vmov	r2, s9
 80055a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80055a4:	3230      	adds	r2, #48	; 0x30
 80055a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80055aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80055ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b2:	f808 2b01 	strb.w	r2, [r8], #1
 80055b6:	d439      	bmi.n	800562c <_dtoa_r+0x564>
 80055b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80055bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80055c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c4:	d472      	bmi.n	80056ac <_dtoa_r+0x5e4>
 80055c6:	45a0      	cmp	r8, r4
 80055c8:	f43f af6b 	beq.w	80054a2 <_dtoa_r+0x3da>
 80055cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80055d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80055d4:	e7e0      	b.n	8005598 <_dtoa_r+0x4d0>
 80055d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80055da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80055de:	4621      	mov	r1, r4
 80055e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80055e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80055e8:	ee14 2a90 	vmov	r2, s9
 80055ec:	3230      	adds	r2, #48	; 0x30
 80055ee:	f808 2b01 	strb.w	r2, [r8], #1
 80055f2:	45a0      	cmp	r8, r4
 80055f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80055f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80055fc:	d118      	bne.n	8005630 <_dtoa_r+0x568>
 80055fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005602:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005606:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560e:	dc4d      	bgt.n	80056ac <_dtoa_r+0x5e4>
 8005610:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005614:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561c:	f57f af41 	bpl.w	80054a2 <_dtoa_r+0x3da>
 8005620:	4688      	mov	r8, r1
 8005622:	3901      	subs	r1, #1
 8005624:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005628:	2b30      	cmp	r3, #48	; 0x30
 800562a:	d0f9      	beq.n	8005620 <_dtoa_r+0x558>
 800562c:	46bb      	mov	fp, r7
 800562e:	e02a      	b.n	8005686 <_dtoa_r+0x5be>
 8005630:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005634:	e7d6      	b.n	80055e4 <_dtoa_r+0x51c>
 8005636:	ed9d 7b02 	vldr	d7, [sp, #8]
 800563a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800563e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005642:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005646:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800564a:	ee15 3a10 	vmov	r3, s10
 800564e:	3330      	adds	r3, #48	; 0x30
 8005650:	f808 3b01 	strb.w	r3, [r8], #1
 8005654:	9b01      	ldr	r3, [sp, #4]
 8005656:	eba8 0303 	sub.w	r3, r8, r3
 800565a:	4599      	cmp	r9, r3
 800565c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005660:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005664:	d133      	bne.n	80056ce <_dtoa_r+0x606>
 8005666:	ee37 7b07 	vadd.f64	d7, d7, d7
 800566a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800566e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005672:	dc1a      	bgt.n	80056aa <_dtoa_r+0x5e2>
 8005674:	eeb4 7b46 	vcmp.f64	d7, d6
 8005678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567c:	d103      	bne.n	8005686 <_dtoa_r+0x5be>
 800567e:	ee15 3a10 	vmov	r3, s10
 8005682:	07d9      	lsls	r1, r3, #31
 8005684:	d411      	bmi.n	80056aa <_dtoa_r+0x5e2>
 8005686:	4629      	mov	r1, r5
 8005688:	4630      	mov	r0, r6
 800568a:	f000 fafb 	bl	8005c84 <_Bfree>
 800568e:	2300      	movs	r3, #0
 8005690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005692:	f888 3000 	strb.w	r3, [r8]
 8005696:	f10b 0301 	add.w	r3, fp, #1
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f43f ad61 	beq.w	8005166 <_dtoa_r+0x9e>
 80056a4:	f8c3 8000 	str.w	r8, [r3]
 80056a8:	e55d      	b.n	8005166 <_dtoa_r+0x9e>
 80056aa:	465f      	mov	r7, fp
 80056ac:	4643      	mov	r3, r8
 80056ae:	4698      	mov	r8, r3
 80056b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056b4:	2a39      	cmp	r2, #57	; 0x39
 80056b6:	d106      	bne.n	80056c6 <_dtoa_r+0x5fe>
 80056b8:	9a01      	ldr	r2, [sp, #4]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d1f7      	bne.n	80056ae <_dtoa_r+0x5e6>
 80056be:	9901      	ldr	r1, [sp, #4]
 80056c0:	2230      	movs	r2, #48	; 0x30
 80056c2:	3701      	adds	r7, #1
 80056c4:	700a      	strb	r2, [r1, #0]
 80056c6:	781a      	ldrb	r2, [r3, #0]
 80056c8:	3201      	adds	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e7ae      	b.n	800562c <_dtoa_r+0x564>
 80056ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80056d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80056d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056da:	d1b2      	bne.n	8005642 <_dtoa_r+0x57a>
 80056dc:	e7d3      	b.n	8005686 <_dtoa_r+0x5be>
 80056de:	bf00      	nop
 80056e0:	080076d8 	.word	0x080076d8
 80056e4:	080076b0 	.word	0x080076b0
 80056e8:	9907      	ldr	r1, [sp, #28]
 80056ea:	2900      	cmp	r1, #0
 80056ec:	f000 80d0 	beq.w	8005890 <_dtoa_r+0x7c8>
 80056f0:	9906      	ldr	r1, [sp, #24]
 80056f2:	2901      	cmp	r1, #1
 80056f4:	f300 80b4 	bgt.w	8005860 <_dtoa_r+0x798>
 80056f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056fa:	2900      	cmp	r1, #0
 80056fc:	f000 80ac 	beq.w	8005858 <_dtoa_r+0x790>
 8005700:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005704:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005708:	461c      	mov	r4, r3
 800570a:	930a      	str	r3, [sp, #40]	; 0x28
 800570c:	9b04      	ldr	r3, [sp, #16]
 800570e:	4413      	add	r3, r2
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	9b05      	ldr	r3, [sp, #20]
 8005714:	2101      	movs	r1, #1
 8005716:	4413      	add	r3, r2
 8005718:	4630      	mov	r0, r6
 800571a:	9305      	str	r3, [sp, #20]
 800571c:	f000 fb6a 	bl	8005df4 <__i2b>
 8005720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005722:	4607      	mov	r7, r0
 8005724:	f1b8 0f00 	cmp.w	r8, #0
 8005728:	dd0d      	ble.n	8005746 <_dtoa_r+0x67e>
 800572a:	9a05      	ldr	r2, [sp, #20]
 800572c:	2a00      	cmp	r2, #0
 800572e:	dd0a      	ble.n	8005746 <_dtoa_r+0x67e>
 8005730:	4542      	cmp	r2, r8
 8005732:	9904      	ldr	r1, [sp, #16]
 8005734:	bfa8      	it	ge
 8005736:	4642      	movge	r2, r8
 8005738:	1a89      	subs	r1, r1, r2
 800573a:	9104      	str	r1, [sp, #16]
 800573c:	9905      	ldr	r1, [sp, #20]
 800573e:	eba8 0802 	sub.w	r8, r8, r2
 8005742:	1a8a      	subs	r2, r1, r2
 8005744:	9205      	str	r2, [sp, #20]
 8005746:	b303      	cbz	r3, 800578a <_dtoa_r+0x6c2>
 8005748:	9a07      	ldr	r2, [sp, #28]
 800574a:	2a00      	cmp	r2, #0
 800574c:	f000 80a5 	beq.w	800589a <_dtoa_r+0x7d2>
 8005750:	2c00      	cmp	r4, #0
 8005752:	dd13      	ble.n	800577c <_dtoa_r+0x6b4>
 8005754:	4639      	mov	r1, r7
 8005756:	4622      	mov	r2, r4
 8005758:	4630      	mov	r0, r6
 800575a:	930d      	str	r3, [sp, #52]	; 0x34
 800575c:	f000 fc0a 	bl	8005f74 <__pow5mult>
 8005760:	462a      	mov	r2, r5
 8005762:	4601      	mov	r1, r0
 8005764:	4607      	mov	r7, r0
 8005766:	4630      	mov	r0, r6
 8005768:	f000 fb5a 	bl	8005e20 <__multiply>
 800576c:	4629      	mov	r1, r5
 800576e:	900a      	str	r0, [sp, #40]	; 0x28
 8005770:	4630      	mov	r0, r6
 8005772:	f000 fa87 	bl	8005c84 <_Bfree>
 8005776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800577a:	4615      	mov	r5, r2
 800577c:	1b1a      	subs	r2, r3, r4
 800577e:	d004      	beq.n	800578a <_dtoa_r+0x6c2>
 8005780:	4629      	mov	r1, r5
 8005782:	4630      	mov	r0, r6
 8005784:	f000 fbf6 	bl	8005f74 <__pow5mult>
 8005788:	4605      	mov	r5, r0
 800578a:	2101      	movs	r1, #1
 800578c:	4630      	mov	r0, r6
 800578e:	f000 fb31 	bl	8005df4 <__i2b>
 8005792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	4604      	mov	r4, r0
 8005798:	f340 8081 	ble.w	800589e <_dtoa_r+0x7d6>
 800579c:	461a      	mov	r2, r3
 800579e:	4601      	mov	r1, r0
 80057a0:	4630      	mov	r0, r6
 80057a2:	f000 fbe7 	bl	8005f74 <__pow5mult>
 80057a6:	9b06      	ldr	r3, [sp, #24]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	4604      	mov	r4, r0
 80057ac:	dd7a      	ble.n	80058a4 <_dtoa_r+0x7dc>
 80057ae:	2300      	movs	r3, #0
 80057b0:	930a      	str	r3, [sp, #40]	; 0x28
 80057b2:	6922      	ldr	r2, [r4, #16]
 80057b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80057b8:	6910      	ldr	r0, [r2, #16]
 80057ba:	f000 facb 	bl	8005d54 <__hi0bits>
 80057be:	f1c0 0020 	rsb	r0, r0, #32
 80057c2:	9b05      	ldr	r3, [sp, #20]
 80057c4:	4418      	add	r0, r3
 80057c6:	f010 001f 	ands.w	r0, r0, #31
 80057ca:	f000 808c 	beq.w	80058e6 <_dtoa_r+0x81e>
 80057ce:	f1c0 0220 	rsb	r2, r0, #32
 80057d2:	2a04      	cmp	r2, #4
 80057d4:	f340 8085 	ble.w	80058e2 <_dtoa_r+0x81a>
 80057d8:	f1c0 001c 	rsb	r0, r0, #28
 80057dc:	9b04      	ldr	r3, [sp, #16]
 80057de:	4403      	add	r3, r0
 80057e0:	9304      	str	r3, [sp, #16]
 80057e2:	9b05      	ldr	r3, [sp, #20]
 80057e4:	4403      	add	r3, r0
 80057e6:	4480      	add	r8, r0
 80057e8:	9305      	str	r3, [sp, #20]
 80057ea:	9b04      	ldr	r3, [sp, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	dd05      	ble.n	80057fc <_dtoa_r+0x734>
 80057f0:	4629      	mov	r1, r5
 80057f2:	461a      	mov	r2, r3
 80057f4:	4630      	mov	r0, r6
 80057f6:	f000 fc17 	bl	8006028 <__lshift>
 80057fa:	4605      	mov	r5, r0
 80057fc:	9b05      	ldr	r3, [sp, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	dd05      	ble.n	800580e <_dtoa_r+0x746>
 8005802:	4621      	mov	r1, r4
 8005804:	461a      	mov	r2, r3
 8005806:	4630      	mov	r0, r6
 8005808:	f000 fc0e 	bl	8006028 <__lshift>
 800580c:	4604      	mov	r4, r0
 800580e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d06a      	beq.n	80058ea <_dtoa_r+0x822>
 8005814:	4621      	mov	r1, r4
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fc76 	bl	8006108 <__mcmp>
 800581c:	2800      	cmp	r0, #0
 800581e:	da64      	bge.n	80058ea <_dtoa_r+0x822>
 8005820:	2300      	movs	r3, #0
 8005822:	4629      	mov	r1, r5
 8005824:	220a      	movs	r2, #10
 8005826:	4630      	mov	r0, r6
 8005828:	f000 fa4e 	bl	8005cc8 <__multadd>
 800582c:	9b07      	ldr	r3, [sp, #28]
 800582e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005832:	4605      	mov	r5, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8191 	beq.w	8005b5c <_dtoa_r+0xa94>
 800583a:	4639      	mov	r1, r7
 800583c:	2300      	movs	r3, #0
 800583e:	220a      	movs	r2, #10
 8005840:	4630      	mov	r0, r6
 8005842:	f000 fa41 	bl	8005cc8 <__multadd>
 8005846:	f1ba 0f00 	cmp.w	sl, #0
 800584a:	4607      	mov	r7, r0
 800584c:	f300 808d 	bgt.w	800596a <_dtoa_r+0x8a2>
 8005850:	9b06      	ldr	r3, [sp, #24]
 8005852:	2b02      	cmp	r3, #2
 8005854:	dc50      	bgt.n	80058f8 <_dtoa_r+0x830>
 8005856:	e088      	b.n	800596a <_dtoa_r+0x8a2>
 8005858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800585a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800585e:	e751      	b.n	8005704 <_dtoa_r+0x63c>
 8005860:	f109 34ff 	add.w	r4, r9, #4294967295
 8005864:	42a3      	cmp	r3, r4
 8005866:	bfbf      	itttt	lt
 8005868:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800586a:	1ae3      	sublt	r3, r4, r3
 800586c:	18d2      	addlt	r2, r2, r3
 800586e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8005870:	bfb6      	itet	lt
 8005872:	4623      	movlt	r3, r4
 8005874:	1b1c      	subge	r4, r3, r4
 8005876:	2400      	movlt	r4, #0
 8005878:	f1b9 0f00 	cmp.w	r9, #0
 800587c:	bfb5      	itete	lt
 800587e:	9a04      	ldrlt	r2, [sp, #16]
 8005880:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005884:	eba2 0809 	sublt.w	r8, r2, r9
 8005888:	464a      	movge	r2, r9
 800588a:	bfb8      	it	lt
 800588c:	2200      	movlt	r2, #0
 800588e:	e73c      	b.n	800570a <_dtoa_r+0x642>
 8005890:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005894:	9f07      	ldr	r7, [sp, #28]
 8005896:	461c      	mov	r4, r3
 8005898:	e744      	b.n	8005724 <_dtoa_r+0x65c>
 800589a:	461a      	mov	r2, r3
 800589c:	e770      	b.n	8005780 <_dtoa_r+0x6b8>
 800589e:	9b06      	ldr	r3, [sp, #24]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	dc18      	bgt.n	80058d6 <_dtoa_r+0x80e>
 80058a4:	9b02      	ldr	r3, [sp, #8]
 80058a6:	b9b3      	cbnz	r3, 80058d6 <_dtoa_r+0x80e>
 80058a8:	9b03      	ldr	r3, [sp, #12]
 80058aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80058ae:	b9a2      	cbnz	r2, 80058da <_dtoa_r+0x812>
 80058b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058b4:	0d12      	lsrs	r2, r2, #20
 80058b6:	0512      	lsls	r2, r2, #20
 80058b8:	b18a      	cbz	r2, 80058de <_dtoa_r+0x816>
 80058ba:	9b04      	ldr	r3, [sp, #16]
 80058bc:	3301      	adds	r3, #1
 80058be:	9304      	str	r3, [sp, #16]
 80058c0:	9b05      	ldr	r3, [sp, #20]
 80058c2:	3301      	adds	r3, #1
 80058c4:	9305      	str	r3, [sp, #20]
 80058c6:	2301      	movs	r3, #1
 80058c8:	930a      	str	r3, [sp, #40]	; 0x28
 80058ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f af70 	bne.w	80057b2 <_dtoa_r+0x6ea>
 80058d2:	2001      	movs	r0, #1
 80058d4:	e775      	b.n	80057c2 <_dtoa_r+0x6fa>
 80058d6:	2300      	movs	r3, #0
 80058d8:	e7f6      	b.n	80058c8 <_dtoa_r+0x800>
 80058da:	9b02      	ldr	r3, [sp, #8]
 80058dc:	e7f4      	b.n	80058c8 <_dtoa_r+0x800>
 80058de:	920a      	str	r2, [sp, #40]	; 0x28
 80058e0:	e7f3      	b.n	80058ca <_dtoa_r+0x802>
 80058e2:	d082      	beq.n	80057ea <_dtoa_r+0x722>
 80058e4:	4610      	mov	r0, r2
 80058e6:	301c      	adds	r0, #28
 80058e8:	e778      	b.n	80057dc <_dtoa_r+0x714>
 80058ea:	f1b9 0f00 	cmp.w	r9, #0
 80058ee:	dc37      	bgt.n	8005960 <_dtoa_r+0x898>
 80058f0:	9b06      	ldr	r3, [sp, #24]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	dd34      	ble.n	8005960 <_dtoa_r+0x898>
 80058f6:	46ca      	mov	sl, r9
 80058f8:	f1ba 0f00 	cmp.w	sl, #0
 80058fc:	d10d      	bne.n	800591a <_dtoa_r+0x852>
 80058fe:	4621      	mov	r1, r4
 8005900:	4653      	mov	r3, sl
 8005902:	2205      	movs	r2, #5
 8005904:	4630      	mov	r0, r6
 8005906:	f000 f9df 	bl	8005cc8 <__multadd>
 800590a:	4601      	mov	r1, r0
 800590c:	4604      	mov	r4, r0
 800590e:	4628      	mov	r0, r5
 8005910:	f000 fbfa 	bl	8006108 <__mcmp>
 8005914:	2800      	cmp	r0, #0
 8005916:	f73f adeb 	bgt.w	80054f0 <_dtoa_r+0x428>
 800591a:	9b08      	ldr	r3, [sp, #32]
 800591c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005920:	ea6f 0b03 	mvn.w	fp, r3
 8005924:	f04f 0900 	mov.w	r9, #0
 8005928:	4621      	mov	r1, r4
 800592a:	4630      	mov	r0, r6
 800592c:	f000 f9aa 	bl	8005c84 <_Bfree>
 8005930:	2f00      	cmp	r7, #0
 8005932:	f43f aea8 	beq.w	8005686 <_dtoa_r+0x5be>
 8005936:	f1b9 0f00 	cmp.w	r9, #0
 800593a:	d005      	beq.n	8005948 <_dtoa_r+0x880>
 800593c:	45b9      	cmp	r9, r7
 800593e:	d003      	beq.n	8005948 <_dtoa_r+0x880>
 8005940:	4649      	mov	r1, r9
 8005942:	4630      	mov	r0, r6
 8005944:	f000 f99e 	bl	8005c84 <_Bfree>
 8005948:	4639      	mov	r1, r7
 800594a:	4630      	mov	r0, r6
 800594c:	f000 f99a 	bl	8005c84 <_Bfree>
 8005950:	e699      	b.n	8005686 <_dtoa_r+0x5be>
 8005952:	2400      	movs	r4, #0
 8005954:	4627      	mov	r7, r4
 8005956:	e7e0      	b.n	800591a <_dtoa_r+0x852>
 8005958:	46bb      	mov	fp, r7
 800595a:	4604      	mov	r4, r0
 800595c:	4607      	mov	r7, r0
 800595e:	e5c7      	b.n	80054f0 <_dtoa_r+0x428>
 8005960:	9b07      	ldr	r3, [sp, #28]
 8005962:	46ca      	mov	sl, r9
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8100 	beq.w	8005b6a <_dtoa_r+0xaa2>
 800596a:	f1b8 0f00 	cmp.w	r8, #0
 800596e:	dd05      	ble.n	800597c <_dtoa_r+0x8b4>
 8005970:	4639      	mov	r1, r7
 8005972:	4642      	mov	r2, r8
 8005974:	4630      	mov	r0, r6
 8005976:	f000 fb57 	bl	8006028 <__lshift>
 800597a:	4607      	mov	r7, r0
 800597c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800597e:	2b00      	cmp	r3, #0
 8005980:	d05d      	beq.n	8005a3e <_dtoa_r+0x976>
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4630      	mov	r0, r6
 8005986:	f000 f93d 	bl	8005c04 <_Balloc>
 800598a:	4680      	mov	r8, r0
 800598c:	b928      	cbnz	r0, 800599a <_dtoa_r+0x8d2>
 800598e:	4b82      	ldr	r3, [pc, #520]	; (8005b98 <_dtoa_r+0xad0>)
 8005990:	4602      	mov	r2, r0
 8005992:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005996:	f7ff bbaf 	b.w	80050f8 <_dtoa_r+0x30>
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	3202      	adds	r2, #2
 800599e:	0092      	lsls	r2, r2, #2
 80059a0:	f107 010c 	add.w	r1, r7, #12
 80059a4:	300c      	adds	r0, #12
 80059a6:	f000 f913 	bl	8005bd0 <memcpy>
 80059aa:	2201      	movs	r2, #1
 80059ac:	4641      	mov	r1, r8
 80059ae:	4630      	mov	r0, r6
 80059b0:	f000 fb3a 	bl	8006028 <__lshift>
 80059b4:	9b01      	ldr	r3, [sp, #4]
 80059b6:	3301      	adds	r3, #1
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	9b01      	ldr	r3, [sp, #4]
 80059bc:	4453      	add	r3, sl
 80059be:	9308      	str	r3, [sp, #32]
 80059c0:	9b02      	ldr	r3, [sp, #8]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	46b9      	mov	r9, r7
 80059c8:	9307      	str	r3, [sp, #28]
 80059ca:	4607      	mov	r7, r0
 80059cc:	9b04      	ldr	r3, [sp, #16]
 80059ce:	4621      	mov	r1, r4
 80059d0:	3b01      	subs	r3, #1
 80059d2:	4628      	mov	r0, r5
 80059d4:	9302      	str	r3, [sp, #8]
 80059d6:	f7ff faeb 	bl	8004fb0 <quorem>
 80059da:	4603      	mov	r3, r0
 80059dc:	3330      	adds	r3, #48	; 0x30
 80059de:	9005      	str	r0, [sp, #20]
 80059e0:	4649      	mov	r1, r9
 80059e2:	4628      	mov	r0, r5
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	f000 fb8f 	bl	8006108 <__mcmp>
 80059ea:	463a      	mov	r2, r7
 80059ec:	4682      	mov	sl, r0
 80059ee:	4621      	mov	r1, r4
 80059f0:	4630      	mov	r0, r6
 80059f2:	f000 fba5 	bl	8006140 <__mdiff>
 80059f6:	68c2      	ldr	r2, [r0, #12]
 80059f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fa:	4680      	mov	r8, r0
 80059fc:	bb0a      	cbnz	r2, 8005a42 <_dtoa_r+0x97a>
 80059fe:	4601      	mov	r1, r0
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 fb81 	bl	8006108 <__mcmp>
 8005a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a08:	4602      	mov	r2, r0
 8005a0a:	4641      	mov	r1, r8
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005a12:	f000 f937 	bl	8005c84 <_Bfree>
 8005a16:	9b06      	ldr	r3, [sp, #24]
 8005a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a1a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005a1e:	ea43 0102 	orr.w	r1, r3, r2
 8005a22:	9b07      	ldr	r3, [sp, #28]
 8005a24:	430b      	orrs	r3, r1
 8005a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a28:	d10d      	bne.n	8005a46 <_dtoa_r+0x97e>
 8005a2a:	2b39      	cmp	r3, #57	; 0x39
 8005a2c:	d029      	beq.n	8005a82 <_dtoa_r+0x9ba>
 8005a2e:	f1ba 0f00 	cmp.w	sl, #0
 8005a32:	dd01      	ble.n	8005a38 <_dtoa_r+0x970>
 8005a34:	9b05      	ldr	r3, [sp, #20]
 8005a36:	3331      	adds	r3, #49	; 0x31
 8005a38:	9a02      	ldr	r2, [sp, #8]
 8005a3a:	7013      	strb	r3, [r2, #0]
 8005a3c:	e774      	b.n	8005928 <_dtoa_r+0x860>
 8005a3e:	4638      	mov	r0, r7
 8005a40:	e7b8      	b.n	80059b4 <_dtoa_r+0x8ec>
 8005a42:	2201      	movs	r2, #1
 8005a44:	e7e1      	b.n	8005a0a <_dtoa_r+0x942>
 8005a46:	f1ba 0f00 	cmp.w	sl, #0
 8005a4a:	db06      	blt.n	8005a5a <_dtoa_r+0x992>
 8005a4c:	9906      	ldr	r1, [sp, #24]
 8005a4e:	ea41 0a0a 	orr.w	sl, r1, sl
 8005a52:	9907      	ldr	r1, [sp, #28]
 8005a54:	ea5a 0101 	orrs.w	r1, sl, r1
 8005a58:	d120      	bne.n	8005a9c <_dtoa_r+0x9d4>
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	ddec      	ble.n	8005a38 <_dtoa_r+0x970>
 8005a5e:	4629      	mov	r1, r5
 8005a60:	2201      	movs	r2, #1
 8005a62:	4630      	mov	r0, r6
 8005a64:	9304      	str	r3, [sp, #16]
 8005a66:	f000 fadf 	bl	8006028 <__lshift>
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	f000 fb4b 	bl	8006108 <__mcmp>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	9b04      	ldr	r3, [sp, #16]
 8005a76:	dc02      	bgt.n	8005a7e <_dtoa_r+0x9b6>
 8005a78:	d1de      	bne.n	8005a38 <_dtoa_r+0x970>
 8005a7a:	07da      	lsls	r2, r3, #31
 8005a7c:	d5dc      	bpl.n	8005a38 <_dtoa_r+0x970>
 8005a7e:	2b39      	cmp	r3, #57	; 0x39
 8005a80:	d1d8      	bne.n	8005a34 <_dtoa_r+0x96c>
 8005a82:	9a02      	ldr	r2, [sp, #8]
 8005a84:	2339      	movs	r3, #57	; 0x39
 8005a86:	7013      	strb	r3, [r2, #0]
 8005a88:	4643      	mov	r3, r8
 8005a8a:	4698      	mov	r8, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005a92:	2a39      	cmp	r2, #57	; 0x39
 8005a94:	d051      	beq.n	8005b3a <_dtoa_r+0xa72>
 8005a96:	3201      	adds	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e745      	b.n	8005928 <_dtoa_r+0x860>
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	dd03      	ble.n	8005aa8 <_dtoa_r+0x9e0>
 8005aa0:	2b39      	cmp	r3, #57	; 0x39
 8005aa2:	d0ee      	beq.n	8005a82 <_dtoa_r+0x9ba>
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	e7c7      	b.n	8005a38 <_dtoa_r+0x970>
 8005aa8:	9a04      	ldr	r2, [sp, #16]
 8005aaa:	9908      	ldr	r1, [sp, #32]
 8005aac:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ab0:	428a      	cmp	r2, r1
 8005ab2:	d02b      	beq.n	8005b0c <_dtoa_r+0xa44>
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	220a      	movs	r2, #10
 8005aba:	4630      	mov	r0, r6
 8005abc:	f000 f904 	bl	8005cc8 <__multadd>
 8005ac0:	45b9      	cmp	r9, r7
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	f04f 020a 	mov.w	r2, #10
 8005acc:	4649      	mov	r1, r9
 8005ace:	4630      	mov	r0, r6
 8005ad0:	d107      	bne.n	8005ae2 <_dtoa_r+0xa1a>
 8005ad2:	f000 f8f9 	bl	8005cc8 <__multadd>
 8005ad6:	4681      	mov	r9, r0
 8005ad8:	4607      	mov	r7, r0
 8005ada:	9b04      	ldr	r3, [sp, #16]
 8005adc:	3301      	adds	r3, #1
 8005ade:	9304      	str	r3, [sp, #16]
 8005ae0:	e774      	b.n	80059cc <_dtoa_r+0x904>
 8005ae2:	f000 f8f1 	bl	8005cc8 <__multadd>
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	4681      	mov	r9, r0
 8005aea:	2300      	movs	r3, #0
 8005aec:	220a      	movs	r2, #10
 8005aee:	4630      	mov	r0, r6
 8005af0:	f000 f8ea 	bl	8005cc8 <__multadd>
 8005af4:	4607      	mov	r7, r0
 8005af6:	e7f0      	b.n	8005ada <_dtoa_r+0xa12>
 8005af8:	f1ba 0f00 	cmp.w	sl, #0
 8005afc:	9a01      	ldr	r2, [sp, #4]
 8005afe:	bfcc      	ite	gt
 8005b00:	46d0      	movgt	r8, sl
 8005b02:	f04f 0801 	movle.w	r8, #1
 8005b06:	4490      	add	r8, r2
 8005b08:	f04f 0900 	mov.w	r9, #0
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	2201      	movs	r2, #1
 8005b10:	4630      	mov	r0, r6
 8005b12:	9302      	str	r3, [sp, #8]
 8005b14:	f000 fa88 	bl	8006028 <__lshift>
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	f000 faf4 	bl	8006108 <__mcmp>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	dcb1      	bgt.n	8005a88 <_dtoa_r+0x9c0>
 8005b24:	d102      	bne.n	8005b2c <_dtoa_r+0xa64>
 8005b26:	9b02      	ldr	r3, [sp, #8]
 8005b28:	07db      	lsls	r3, r3, #31
 8005b2a:	d4ad      	bmi.n	8005a88 <_dtoa_r+0x9c0>
 8005b2c:	4643      	mov	r3, r8
 8005b2e:	4698      	mov	r8, r3
 8005b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b34:	2a30      	cmp	r2, #48	; 0x30
 8005b36:	d0fa      	beq.n	8005b2e <_dtoa_r+0xa66>
 8005b38:	e6f6      	b.n	8005928 <_dtoa_r+0x860>
 8005b3a:	9a01      	ldr	r2, [sp, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d1a4      	bne.n	8005a8a <_dtoa_r+0x9c2>
 8005b40:	f10b 0b01 	add.w	fp, fp, #1
 8005b44:	2331      	movs	r3, #49	; 0x31
 8005b46:	e778      	b.n	8005a3a <_dtoa_r+0x972>
 8005b48:	4b14      	ldr	r3, [pc, #80]	; (8005b9c <_dtoa_r+0xad4>)
 8005b4a:	f7ff bb27 	b.w	800519c <_dtoa_r+0xd4>
 8005b4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f47f ab03 	bne.w	800515c <_dtoa_r+0x94>
 8005b56:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <_dtoa_r+0xad8>)
 8005b58:	f7ff bb20 	b.w	800519c <_dtoa_r+0xd4>
 8005b5c:	f1ba 0f00 	cmp.w	sl, #0
 8005b60:	dc03      	bgt.n	8005b6a <_dtoa_r+0xaa2>
 8005b62:	9b06      	ldr	r3, [sp, #24]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	f73f aec7 	bgt.w	80058f8 <_dtoa_r+0x830>
 8005b6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005b6e:	4621      	mov	r1, r4
 8005b70:	4628      	mov	r0, r5
 8005b72:	f7ff fa1d 	bl	8004fb0 <quorem>
 8005b76:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005b7a:	f808 3b01 	strb.w	r3, [r8], #1
 8005b7e:	9a01      	ldr	r2, [sp, #4]
 8005b80:	eba8 0202 	sub.w	r2, r8, r2
 8005b84:	4592      	cmp	sl, r2
 8005b86:	ddb7      	ble.n	8005af8 <_dtoa_r+0xa30>
 8005b88:	4629      	mov	r1, r5
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	220a      	movs	r2, #10
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f000 f89a 	bl	8005cc8 <__multadd>
 8005b94:	4605      	mov	r5, r0
 8005b96:	e7ea      	b.n	8005b6e <_dtoa_r+0xaa6>
 8005b98:	0800763f 	.word	0x0800763f
 8005b9c:	0800759c 	.word	0x0800759c
 8005ba0:	080075c0 	.word	0x080075c0

08005ba4 <_localeconv_r>:
 8005ba4:	4800      	ldr	r0, [pc, #0]	; (8005ba8 <_localeconv_r+0x4>)
 8005ba6:	4770      	bx	lr
 8005ba8:	20000164 	.word	0x20000164

08005bac <_lseek_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4d07      	ldr	r5, [pc, #28]	; (8005bcc <_lseek_r+0x20>)
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	602a      	str	r2, [r5, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f001 f8d6 	bl	8006d6c <_lseek>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_lseek_r+0x1e>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_lseek_r+0x1e>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	200009a0 	.word	0x200009a0

08005bd0 <memcpy>:
 8005bd0:	440a      	add	r2, r1
 8005bd2:	4291      	cmp	r1, r2
 8005bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bd8:	d100      	bne.n	8005bdc <memcpy+0xc>
 8005bda:	4770      	bx	lr
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005be6:	4291      	cmp	r1, r2
 8005be8:	d1f9      	bne.n	8005bde <memcpy+0xe>
 8005bea:	bd10      	pop	{r4, pc}

08005bec <__malloc_lock>:
 8005bec:	4801      	ldr	r0, [pc, #4]	; (8005bf4 <__malloc_lock+0x8>)
 8005bee:	f000 bd87 	b.w	8006700 <__retarget_lock_acquire_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	200009a4 	.word	0x200009a4

08005bf8 <__malloc_unlock>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	; (8005c00 <__malloc_unlock+0x8>)
 8005bfa:	f000 bd82 	b.w	8006702 <__retarget_lock_release_recursive>
 8005bfe:	bf00      	nop
 8005c00:	200009a4 	.word	0x200009a4

08005c04 <_Balloc>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c08:	4604      	mov	r4, r0
 8005c0a:	460d      	mov	r5, r1
 8005c0c:	b976      	cbnz	r6, 8005c2c <_Balloc+0x28>
 8005c0e:	2010      	movs	r0, #16
 8005c10:	f7fe fc08 	bl	8004424 <malloc>
 8005c14:	4602      	mov	r2, r0
 8005c16:	6260      	str	r0, [r4, #36]	; 0x24
 8005c18:	b920      	cbnz	r0, 8005c24 <_Balloc+0x20>
 8005c1a:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <_Balloc+0x78>)
 8005c1c:	4818      	ldr	r0, [pc, #96]	; (8005c80 <_Balloc+0x7c>)
 8005c1e:	2166      	movs	r1, #102	; 0x66
 8005c20:	f000 fb86 	bl	8006330 <__assert_func>
 8005c24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c28:	6006      	str	r6, [r0, #0]
 8005c2a:	60c6      	str	r6, [r0, #12]
 8005c2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c2e:	68f3      	ldr	r3, [r6, #12]
 8005c30:	b183      	cbz	r3, 8005c54 <_Balloc+0x50>
 8005c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c3a:	b9b8      	cbnz	r0, 8005c6c <_Balloc+0x68>
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f605 	lsl.w	r6, r1, r5
 8005c42:	1d72      	adds	r2, r6, #5
 8005c44:	0092      	lsls	r2, r2, #2
 8005c46:	4620      	mov	r0, r4
 8005c48:	f7fe fc04 	bl	8004454 <_calloc_r>
 8005c4c:	b160      	cbz	r0, 8005c68 <_Balloc+0x64>
 8005c4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c52:	e00e      	b.n	8005c72 <_Balloc+0x6e>
 8005c54:	2221      	movs	r2, #33	; 0x21
 8005c56:	2104      	movs	r1, #4
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f7fe fbfb 	bl	8004454 <_calloc_r>
 8005c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c60:	60f0      	str	r0, [r6, #12]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e4      	bne.n	8005c32 <_Balloc+0x2e>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	6802      	ldr	r2, [r0, #0]
 8005c6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c72:	2300      	movs	r3, #0
 8005c74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c78:	e7f7      	b.n	8005c6a <_Balloc+0x66>
 8005c7a:	bf00      	nop
 8005c7c:	080075cd 	.word	0x080075cd
 8005c80:	08007650 	.word	0x08007650

08005c84 <_Bfree>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c88:	4605      	mov	r5, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	b976      	cbnz	r6, 8005cac <_Bfree+0x28>
 8005c8e:	2010      	movs	r0, #16
 8005c90:	f7fe fbc8 	bl	8004424 <malloc>
 8005c94:	4602      	mov	r2, r0
 8005c96:	6268      	str	r0, [r5, #36]	; 0x24
 8005c98:	b920      	cbnz	r0, 8005ca4 <_Bfree+0x20>
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <_Bfree+0x3c>)
 8005c9c:	4809      	ldr	r0, [pc, #36]	; (8005cc4 <_Bfree+0x40>)
 8005c9e:	218a      	movs	r1, #138	; 0x8a
 8005ca0:	f000 fb46 	bl	8006330 <__assert_func>
 8005ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ca8:	6006      	str	r6, [r0, #0]
 8005caa:	60c6      	str	r6, [r0, #12]
 8005cac:	b13c      	cbz	r4, 8005cbe <_Bfree+0x3a>
 8005cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005cb0:	6862      	ldr	r2, [r4, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cb8:	6021      	str	r1, [r4, #0]
 8005cba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	080075cd 	.word	0x080075cd
 8005cc4:	08007650 	.word	0x08007650

08005cc8 <__multadd>:
 8005cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ccc:	690d      	ldr	r5, [r1, #16]
 8005cce:	4607      	mov	r7, r0
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	461e      	mov	r6, r3
 8005cd4:	f101 0c14 	add.w	ip, r1, #20
 8005cd8:	2000      	movs	r0, #0
 8005cda:	f8dc 3000 	ldr.w	r3, [ip]
 8005cde:	b299      	uxth	r1, r3
 8005ce0:	fb02 6101 	mla	r1, r2, r1, r6
 8005ce4:	0c1e      	lsrs	r6, r3, #16
 8005ce6:	0c0b      	lsrs	r3, r1, #16
 8005ce8:	fb02 3306 	mla	r3, r2, r6, r3
 8005cec:	b289      	uxth	r1, r1
 8005cee:	3001      	adds	r0, #1
 8005cf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cf4:	4285      	cmp	r5, r0
 8005cf6:	f84c 1b04 	str.w	r1, [ip], #4
 8005cfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cfe:	dcec      	bgt.n	8005cda <__multadd+0x12>
 8005d00:	b30e      	cbz	r6, 8005d46 <__multadd+0x7e>
 8005d02:	68a3      	ldr	r3, [r4, #8]
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dc19      	bgt.n	8005d3c <__multadd+0x74>
 8005d08:	6861      	ldr	r1, [r4, #4]
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	3101      	adds	r1, #1
 8005d0e:	f7ff ff79 	bl	8005c04 <_Balloc>
 8005d12:	4680      	mov	r8, r0
 8005d14:	b928      	cbnz	r0, 8005d22 <__multadd+0x5a>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <__multadd+0x84>)
 8005d1a:	480d      	ldr	r0, [pc, #52]	; (8005d50 <__multadd+0x88>)
 8005d1c:	21b5      	movs	r1, #181	; 0xb5
 8005d1e:	f000 fb07 	bl	8006330 <__assert_func>
 8005d22:	6922      	ldr	r2, [r4, #16]
 8005d24:	3202      	adds	r2, #2
 8005d26:	f104 010c 	add.w	r1, r4, #12
 8005d2a:	0092      	lsls	r2, r2, #2
 8005d2c:	300c      	adds	r0, #12
 8005d2e:	f7ff ff4f 	bl	8005bd0 <memcpy>
 8005d32:	4621      	mov	r1, r4
 8005d34:	4638      	mov	r0, r7
 8005d36:	f7ff ffa5 	bl	8005c84 <_Bfree>
 8005d3a:	4644      	mov	r4, r8
 8005d3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d40:	3501      	adds	r5, #1
 8005d42:	615e      	str	r6, [r3, #20]
 8005d44:	6125      	str	r5, [r4, #16]
 8005d46:	4620      	mov	r0, r4
 8005d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d4c:	0800763f 	.word	0x0800763f
 8005d50:	08007650 	.word	0x08007650

08005d54 <__hi0bits>:
 8005d54:	0c03      	lsrs	r3, r0, #16
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	b9d3      	cbnz	r3, 8005d90 <__hi0bits+0x3c>
 8005d5a:	0400      	lsls	r0, r0, #16
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d62:	bf04      	itt	eq
 8005d64:	0200      	lsleq	r0, r0, #8
 8005d66:	3308      	addeq	r3, #8
 8005d68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d6c:	bf04      	itt	eq
 8005d6e:	0100      	lsleq	r0, r0, #4
 8005d70:	3304      	addeq	r3, #4
 8005d72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d76:	bf04      	itt	eq
 8005d78:	0080      	lsleq	r0, r0, #2
 8005d7a:	3302      	addeq	r3, #2
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	db05      	blt.n	8005d8c <__hi0bits+0x38>
 8005d80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d84:	f103 0301 	add.w	r3, r3, #1
 8005d88:	bf08      	it	eq
 8005d8a:	2320      	moveq	r3, #32
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	4770      	bx	lr
 8005d90:	2300      	movs	r3, #0
 8005d92:	e7e4      	b.n	8005d5e <__hi0bits+0xa>

08005d94 <__lo0bits>:
 8005d94:	6803      	ldr	r3, [r0, #0]
 8005d96:	f013 0207 	ands.w	r2, r3, #7
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	d00b      	beq.n	8005db6 <__lo0bits+0x22>
 8005d9e:	07da      	lsls	r2, r3, #31
 8005da0:	d423      	bmi.n	8005dea <__lo0bits+0x56>
 8005da2:	0798      	lsls	r0, r3, #30
 8005da4:	bf49      	itett	mi
 8005da6:	085b      	lsrmi	r3, r3, #1
 8005da8:	089b      	lsrpl	r3, r3, #2
 8005daa:	2001      	movmi	r0, #1
 8005dac:	600b      	strmi	r3, [r1, #0]
 8005dae:	bf5c      	itt	pl
 8005db0:	600b      	strpl	r3, [r1, #0]
 8005db2:	2002      	movpl	r0, #2
 8005db4:	4770      	bx	lr
 8005db6:	b298      	uxth	r0, r3
 8005db8:	b9a8      	cbnz	r0, 8005de6 <__lo0bits+0x52>
 8005dba:	0c1b      	lsrs	r3, r3, #16
 8005dbc:	2010      	movs	r0, #16
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	b90a      	cbnz	r2, 8005dc6 <__lo0bits+0x32>
 8005dc2:	3008      	adds	r0, #8
 8005dc4:	0a1b      	lsrs	r3, r3, #8
 8005dc6:	071a      	lsls	r2, r3, #28
 8005dc8:	bf04      	itt	eq
 8005dca:	091b      	lsreq	r3, r3, #4
 8005dcc:	3004      	addeq	r0, #4
 8005dce:	079a      	lsls	r2, r3, #30
 8005dd0:	bf04      	itt	eq
 8005dd2:	089b      	lsreq	r3, r3, #2
 8005dd4:	3002      	addeq	r0, #2
 8005dd6:	07da      	lsls	r2, r3, #31
 8005dd8:	d403      	bmi.n	8005de2 <__lo0bits+0x4e>
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	f100 0001 	add.w	r0, r0, #1
 8005de0:	d005      	beq.n	8005dee <__lo0bits+0x5a>
 8005de2:	600b      	str	r3, [r1, #0]
 8005de4:	4770      	bx	lr
 8005de6:	4610      	mov	r0, r2
 8005de8:	e7e9      	b.n	8005dbe <__lo0bits+0x2a>
 8005dea:	2000      	movs	r0, #0
 8005dec:	4770      	bx	lr
 8005dee:	2020      	movs	r0, #32
 8005df0:	4770      	bx	lr
	...

08005df4 <__i2b>:
 8005df4:	b510      	push	{r4, lr}
 8005df6:	460c      	mov	r4, r1
 8005df8:	2101      	movs	r1, #1
 8005dfa:	f7ff ff03 	bl	8005c04 <_Balloc>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	b928      	cbnz	r0, 8005e0e <__i2b+0x1a>
 8005e02:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <__i2b+0x24>)
 8005e04:	4805      	ldr	r0, [pc, #20]	; (8005e1c <__i2b+0x28>)
 8005e06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e0a:	f000 fa91 	bl	8006330 <__assert_func>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	6144      	str	r4, [r0, #20]
 8005e12:	6103      	str	r3, [r0, #16]
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	bf00      	nop
 8005e18:	0800763f 	.word	0x0800763f
 8005e1c:	08007650 	.word	0x08007650

08005e20 <__multiply>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	4691      	mov	r9, r2
 8005e26:	690a      	ldr	r2, [r1, #16]
 8005e28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	bfb8      	it	lt
 8005e30:	460b      	movlt	r3, r1
 8005e32:	460c      	mov	r4, r1
 8005e34:	bfbc      	itt	lt
 8005e36:	464c      	movlt	r4, r9
 8005e38:	4699      	movlt	r9, r3
 8005e3a:	6927      	ldr	r7, [r4, #16]
 8005e3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e40:	68a3      	ldr	r3, [r4, #8]
 8005e42:	6861      	ldr	r1, [r4, #4]
 8005e44:	eb07 060a 	add.w	r6, r7, sl
 8005e48:	42b3      	cmp	r3, r6
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	bfb8      	it	lt
 8005e4e:	3101      	addlt	r1, #1
 8005e50:	f7ff fed8 	bl	8005c04 <_Balloc>
 8005e54:	b930      	cbnz	r0, 8005e64 <__multiply+0x44>
 8005e56:	4602      	mov	r2, r0
 8005e58:	4b44      	ldr	r3, [pc, #272]	; (8005f6c <__multiply+0x14c>)
 8005e5a:	4845      	ldr	r0, [pc, #276]	; (8005f70 <__multiply+0x150>)
 8005e5c:	f240 115d 	movw	r1, #349	; 0x15d
 8005e60:	f000 fa66 	bl	8006330 <__assert_func>
 8005e64:	f100 0514 	add.w	r5, r0, #20
 8005e68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	2200      	movs	r2, #0
 8005e70:	4543      	cmp	r3, r8
 8005e72:	d321      	bcc.n	8005eb8 <__multiply+0x98>
 8005e74:	f104 0314 	add.w	r3, r4, #20
 8005e78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e7c:	f109 0314 	add.w	r3, r9, #20
 8005e80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e84:	9202      	str	r2, [sp, #8]
 8005e86:	1b3a      	subs	r2, r7, r4
 8005e88:	3a15      	subs	r2, #21
 8005e8a:	f022 0203 	bic.w	r2, r2, #3
 8005e8e:	3204      	adds	r2, #4
 8005e90:	f104 0115 	add.w	r1, r4, #21
 8005e94:	428f      	cmp	r7, r1
 8005e96:	bf38      	it	cc
 8005e98:	2204      	movcc	r2, #4
 8005e9a:	9201      	str	r2, [sp, #4]
 8005e9c:	9a02      	ldr	r2, [sp, #8]
 8005e9e:	9303      	str	r3, [sp, #12]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d80c      	bhi.n	8005ebe <__multiply+0x9e>
 8005ea4:	2e00      	cmp	r6, #0
 8005ea6:	dd03      	ble.n	8005eb0 <__multiply+0x90>
 8005ea8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d05a      	beq.n	8005f66 <__multiply+0x146>
 8005eb0:	6106      	str	r6, [r0, #16]
 8005eb2:	b005      	add	sp, #20
 8005eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb8:	f843 2b04 	str.w	r2, [r3], #4
 8005ebc:	e7d8      	b.n	8005e70 <__multiply+0x50>
 8005ebe:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ec2:	f1ba 0f00 	cmp.w	sl, #0
 8005ec6:	d024      	beq.n	8005f12 <__multiply+0xf2>
 8005ec8:	f104 0e14 	add.w	lr, r4, #20
 8005ecc:	46a9      	mov	r9, r5
 8005ece:	f04f 0c00 	mov.w	ip, #0
 8005ed2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005ed6:	f8d9 1000 	ldr.w	r1, [r9]
 8005eda:	fa1f fb82 	uxth.w	fp, r2
 8005ede:	b289      	uxth	r1, r1
 8005ee0:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ee4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005ee8:	f8d9 2000 	ldr.w	r2, [r9]
 8005eec:	4461      	add	r1, ip
 8005eee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ef2:	fb0a c20b 	mla	r2, sl, fp, ip
 8005ef6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005efa:	b289      	uxth	r1, r1
 8005efc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f00:	4577      	cmp	r7, lr
 8005f02:	f849 1b04 	str.w	r1, [r9], #4
 8005f06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f0a:	d8e2      	bhi.n	8005ed2 <__multiply+0xb2>
 8005f0c:	9a01      	ldr	r2, [sp, #4]
 8005f0e:	f845 c002 	str.w	ip, [r5, r2]
 8005f12:	9a03      	ldr	r2, [sp, #12]
 8005f14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	f1b9 0f00 	cmp.w	r9, #0
 8005f1e:	d020      	beq.n	8005f62 <__multiply+0x142>
 8005f20:	6829      	ldr	r1, [r5, #0]
 8005f22:	f104 0c14 	add.w	ip, r4, #20
 8005f26:	46ae      	mov	lr, r5
 8005f28:	f04f 0a00 	mov.w	sl, #0
 8005f2c:	f8bc b000 	ldrh.w	fp, [ip]
 8005f30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f34:	fb09 220b 	mla	r2, r9, fp, r2
 8005f38:	4492      	add	sl, r2
 8005f3a:	b289      	uxth	r1, r1
 8005f3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005f40:	f84e 1b04 	str.w	r1, [lr], #4
 8005f44:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f48:	f8be 1000 	ldrh.w	r1, [lr]
 8005f4c:	0c12      	lsrs	r2, r2, #16
 8005f4e:	fb09 1102 	mla	r1, r9, r2, r1
 8005f52:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005f56:	4567      	cmp	r7, ip
 8005f58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f5c:	d8e6      	bhi.n	8005f2c <__multiply+0x10c>
 8005f5e:	9a01      	ldr	r2, [sp, #4]
 8005f60:	50a9      	str	r1, [r5, r2]
 8005f62:	3504      	adds	r5, #4
 8005f64:	e79a      	b.n	8005e9c <__multiply+0x7c>
 8005f66:	3e01      	subs	r6, #1
 8005f68:	e79c      	b.n	8005ea4 <__multiply+0x84>
 8005f6a:	bf00      	nop
 8005f6c:	0800763f 	.word	0x0800763f
 8005f70:	08007650 	.word	0x08007650

08005f74 <__pow5mult>:
 8005f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f78:	4615      	mov	r5, r2
 8005f7a:	f012 0203 	ands.w	r2, r2, #3
 8005f7e:	4606      	mov	r6, r0
 8005f80:	460f      	mov	r7, r1
 8005f82:	d007      	beq.n	8005f94 <__pow5mult+0x20>
 8005f84:	4c25      	ldr	r4, [pc, #148]	; (800601c <__pow5mult+0xa8>)
 8005f86:	3a01      	subs	r2, #1
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f8e:	f7ff fe9b 	bl	8005cc8 <__multadd>
 8005f92:	4607      	mov	r7, r0
 8005f94:	10ad      	asrs	r5, r5, #2
 8005f96:	d03d      	beq.n	8006014 <__pow5mult+0xa0>
 8005f98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f9a:	b97c      	cbnz	r4, 8005fbc <__pow5mult+0x48>
 8005f9c:	2010      	movs	r0, #16
 8005f9e:	f7fe fa41 	bl	8004424 <malloc>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	6270      	str	r0, [r6, #36]	; 0x24
 8005fa6:	b928      	cbnz	r0, 8005fb4 <__pow5mult+0x40>
 8005fa8:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <__pow5mult+0xac>)
 8005faa:	481e      	ldr	r0, [pc, #120]	; (8006024 <__pow5mult+0xb0>)
 8005fac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005fb0:	f000 f9be 	bl	8006330 <__assert_func>
 8005fb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fb8:	6004      	str	r4, [r0, #0]
 8005fba:	60c4      	str	r4, [r0, #12]
 8005fbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fc4:	b94c      	cbnz	r4, 8005fda <__pow5mult+0x66>
 8005fc6:	f240 2171 	movw	r1, #625	; 0x271
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff ff12 	bl	8005df4 <__i2b>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	6003      	str	r3, [r0, #0]
 8005fda:	f04f 0900 	mov.w	r9, #0
 8005fde:	07eb      	lsls	r3, r5, #31
 8005fe0:	d50a      	bpl.n	8005ff8 <__pow5mult+0x84>
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7ff ff1a 	bl	8005e20 <__multiply>
 8005fec:	4639      	mov	r1, r7
 8005fee:	4680      	mov	r8, r0
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f7ff fe47 	bl	8005c84 <_Bfree>
 8005ff6:	4647      	mov	r7, r8
 8005ff8:	106d      	asrs	r5, r5, #1
 8005ffa:	d00b      	beq.n	8006014 <__pow5mult+0xa0>
 8005ffc:	6820      	ldr	r0, [r4, #0]
 8005ffe:	b938      	cbnz	r0, 8006010 <__pow5mult+0x9c>
 8006000:	4622      	mov	r2, r4
 8006002:	4621      	mov	r1, r4
 8006004:	4630      	mov	r0, r6
 8006006:	f7ff ff0b 	bl	8005e20 <__multiply>
 800600a:	6020      	str	r0, [r4, #0]
 800600c:	f8c0 9000 	str.w	r9, [r0]
 8006010:	4604      	mov	r4, r0
 8006012:	e7e4      	b.n	8005fde <__pow5mult+0x6a>
 8006014:	4638      	mov	r0, r7
 8006016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800601a:	bf00      	nop
 800601c:	080077a0 	.word	0x080077a0
 8006020:	080075cd 	.word	0x080075cd
 8006024:	08007650 	.word	0x08007650

08006028 <__lshift>:
 8006028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	460c      	mov	r4, r1
 800602e:	6849      	ldr	r1, [r1, #4]
 8006030:	6923      	ldr	r3, [r4, #16]
 8006032:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	4607      	mov	r7, r0
 800603a:	4691      	mov	r9, r2
 800603c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006040:	f108 0601 	add.w	r6, r8, #1
 8006044:	42b3      	cmp	r3, r6
 8006046:	db0b      	blt.n	8006060 <__lshift+0x38>
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff fddb 	bl	8005c04 <_Balloc>
 800604e:	4605      	mov	r5, r0
 8006050:	b948      	cbnz	r0, 8006066 <__lshift+0x3e>
 8006052:	4602      	mov	r2, r0
 8006054:	4b2a      	ldr	r3, [pc, #168]	; (8006100 <__lshift+0xd8>)
 8006056:	482b      	ldr	r0, [pc, #172]	; (8006104 <__lshift+0xdc>)
 8006058:	f240 11d9 	movw	r1, #473	; 0x1d9
 800605c:	f000 f968 	bl	8006330 <__assert_func>
 8006060:	3101      	adds	r1, #1
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	e7ee      	b.n	8006044 <__lshift+0x1c>
 8006066:	2300      	movs	r3, #0
 8006068:	f100 0114 	add.w	r1, r0, #20
 800606c:	f100 0210 	add.w	r2, r0, #16
 8006070:	4618      	mov	r0, r3
 8006072:	4553      	cmp	r3, sl
 8006074:	db37      	blt.n	80060e6 <__lshift+0xbe>
 8006076:	6920      	ldr	r0, [r4, #16]
 8006078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800607c:	f104 0314 	add.w	r3, r4, #20
 8006080:	f019 091f 	ands.w	r9, r9, #31
 8006084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006088:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800608c:	d02f      	beq.n	80060ee <__lshift+0xc6>
 800608e:	f1c9 0e20 	rsb	lr, r9, #32
 8006092:	468a      	mov	sl, r1
 8006094:	f04f 0c00 	mov.w	ip, #0
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	fa02 f209 	lsl.w	r2, r2, r9
 800609e:	ea42 020c 	orr.w	r2, r2, ip
 80060a2:	f84a 2b04 	str.w	r2, [sl], #4
 80060a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060aa:	4298      	cmp	r0, r3
 80060ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80060b0:	d8f2      	bhi.n	8006098 <__lshift+0x70>
 80060b2:	1b03      	subs	r3, r0, r4
 80060b4:	3b15      	subs	r3, #21
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	3304      	adds	r3, #4
 80060bc:	f104 0215 	add.w	r2, r4, #21
 80060c0:	4290      	cmp	r0, r2
 80060c2:	bf38      	it	cc
 80060c4:	2304      	movcc	r3, #4
 80060c6:	f841 c003 	str.w	ip, [r1, r3]
 80060ca:	f1bc 0f00 	cmp.w	ip, #0
 80060ce:	d001      	beq.n	80060d4 <__lshift+0xac>
 80060d0:	f108 0602 	add.w	r6, r8, #2
 80060d4:	3e01      	subs	r6, #1
 80060d6:	4638      	mov	r0, r7
 80060d8:	612e      	str	r6, [r5, #16]
 80060da:	4621      	mov	r1, r4
 80060dc:	f7ff fdd2 	bl	8005c84 <_Bfree>
 80060e0:	4628      	mov	r0, r5
 80060e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80060ea:	3301      	adds	r3, #1
 80060ec:	e7c1      	b.n	8006072 <__lshift+0x4a>
 80060ee:	3904      	subs	r1, #4
 80060f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80060f8:	4298      	cmp	r0, r3
 80060fa:	d8f9      	bhi.n	80060f0 <__lshift+0xc8>
 80060fc:	e7ea      	b.n	80060d4 <__lshift+0xac>
 80060fe:	bf00      	nop
 8006100:	0800763f 	.word	0x0800763f
 8006104:	08007650 	.word	0x08007650

08006108 <__mcmp>:
 8006108:	b530      	push	{r4, r5, lr}
 800610a:	6902      	ldr	r2, [r0, #16]
 800610c:	690c      	ldr	r4, [r1, #16]
 800610e:	1b12      	subs	r2, r2, r4
 8006110:	d10e      	bne.n	8006130 <__mcmp+0x28>
 8006112:	f100 0314 	add.w	r3, r0, #20
 8006116:	3114      	adds	r1, #20
 8006118:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800611c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006120:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006124:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006128:	42a5      	cmp	r5, r4
 800612a:	d003      	beq.n	8006134 <__mcmp+0x2c>
 800612c:	d305      	bcc.n	800613a <__mcmp+0x32>
 800612e:	2201      	movs	r2, #1
 8006130:	4610      	mov	r0, r2
 8006132:	bd30      	pop	{r4, r5, pc}
 8006134:	4283      	cmp	r3, r0
 8006136:	d3f3      	bcc.n	8006120 <__mcmp+0x18>
 8006138:	e7fa      	b.n	8006130 <__mcmp+0x28>
 800613a:	f04f 32ff 	mov.w	r2, #4294967295
 800613e:	e7f7      	b.n	8006130 <__mcmp+0x28>

08006140 <__mdiff>:
 8006140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	460c      	mov	r4, r1
 8006146:	4606      	mov	r6, r0
 8006148:	4611      	mov	r1, r2
 800614a:	4620      	mov	r0, r4
 800614c:	4690      	mov	r8, r2
 800614e:	f7ff ffdb 	bl	8006108 <__mcmp>
 8006152:	1e05      	subs	r5, r0, #0
 8006154:	d110      	bne.n	8006178 <__mdiff+0x38>
 8006156:	4629      	mov	r1, r5
 8006158:	4630      	mov	r0, r6
 800615a:	f7ff fd53 	bl	8005c04 <_Balloc>
 800615e:	b930      	cbnz	r0, 800616e <__mdiff+0x2e>
 8006160:	4b3a      	ldr	r3, [pc, #232]	; (800624c <__mdiff+0x10c>)
 8006162:	4602      	mov	r2, r0
 8006164:	f240 2132 	movw	r1, #562	; 0x232
 8006168:	4839      	ldr	r0, [pc, #228]	; (8006250 <__mdiff+0x110>)
 800616a:	f000 f8e1 	bl	8006330 <__assert_func>
 800616e:	2301      	movs	r3, #1
 8006170:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006178:	bfa4      	itt	ge
 800617a:	4643      	movge	r3, r8
 800617c:	46a0      	movge	r8, r4
 800617e:	4630      	mov	r0, r6
 8006180:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006184:	bfa6      	itte	ge
 8006186:	461c      	movge	r4, r3
 8006188:	2500      	movge	r5, #0
 800618a:	2501      	movlt	r5, #1
 800618c:	f7ff fd3a 	bl	8005c04 <_Balloc>
 8006190:	b920      	cbnz	r0, 800619c <__mdiff+0x5c>
 8006192:	4b2e      	ldr	r3, [pc, #184]	; (800624c <__mdiff+0x10c>)
 8006194:	4602      	mov	r2, r0
 8006196:	f44f 7110 	mov.w	r1, #576	; 0x240
 800619a:	e7e5      	b.n	8006168 <__mdiff+0x28>
 800619c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80061a0:	6926      	ldr	r6, [r4, #16]
 80061a2:	60c5      	str	r5, [r0, #12]
 80061a4:	f104 0914 	add.w	r9, r4, #20
 80061a8:	f108 0514 	add.w	r5, r8, #20
 80061ac:	f100 0e14 	add.w	lr, r0, #20
 80061b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80061b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80061b8:	f108 0210 	add.w	r2, r8, #16
 80061bc:	46f2      	mov	sl, lr
 80061be:	2100      	movs	r1, #0
 80061c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80061c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061c8:	fa1f f883 	uxth.w	r8, r3
 80061cc:	fa11 f18b 	uxtah	r1, r1, fp
 80061d0:	0c1b      	lsrs	r3, r3, #16
 80061d2:	eba1 0808 	sub.w	r8, r1, r8
 80061d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80061de:	fa1f f888 	uxth.w	r8, r8
 80061e2:	1419      	asrs	r1, r3, #16
 80061e4:	454e      	cmp	r6, r9
 80061e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80061ea:	f84a 3b04 	str.w	r3, [sl], #4
 80061ee:	d8e7      	bhi.n	80061c0 <__mdiff+0x80>
 80061f0:	1b33      	subs	r3, r6, r4
 80061f2:	3b15      	subs	r3, #21
 80061f4:	f023 0303 	bic.w	r3, r3, #3
 80061f8:	3304      	adds	r3, #4
 80061fa:	3415      	adds	r4, #21
 80061fc:	42a6      	cmp	r6, r4
 80061fe:	bf38      	it	cc
 8006200:	2304      	movcc	r3, #4
 8006202:	441d      	add	r5, r3
 8006204:	4473      	add	r3, lr
 8006206:	469e      	mov	lr, r3
 8006208:	462e      	mov	r6, r5
 800620a:	4566      	cmp	r6, ip
 800620c:	d30e      	bcc.n	800622c <__mdiff+0xec>
 800620e:	f10c 0203 	add.w	r2, ip, #3
 8006212:	1b52      	subs	r2, r2, r5
 8006214:	f022 0203 	bic.w	r2, r2, #3
 8006218:	3d03      	subs	r5, #3
 800621a:	45ac      	cmp	ip, r5
 800621c:	bf38      	it	cc
 800621e:	2200      	movcc	r2, #0
 8006220:	441a      	add	r2, r3
 8006222:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006226:	b17b      	cbz	r3, 8006248 <__mdiff+0x108>
 8006228:	6107      	str	r7, [r0, #16]
 800622a:	e7a3      	b.n	8006174 <__mdiff+0x34>
 800622c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006230:	fa11 f288 	uxtah	r2, r1, r8
 8006234:	1414      	asrs	r4, r2, #16
 8006236:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800623a:	b292      	uxth	r2, r2
 800623c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006240:	f84e 2b04 	str.w	r2, [lr], #4
 8006244:	1421      	asrs	r1, r4, #16
 8006246:	e7e0      	b.n	800620a <__mdiff+0xca>
 8006248:	3f01      	subs	r7, #1
 800624a:	e7ea      	b.n	8006222 <__mdiff+0xe2>
 800624c:	0800763f 	.word	0x0800763f
 8006250:	08007650 	.word	0x08007650

08006254 <__d2b>:
 8006254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006258:	4689      	mov	r9, r1
 800625a:	2101      	movs	r1, #1
 800625c:	ec57 6b10 	vmov	r6, r7, d0
 8006260:	4690      	mov	r8, r2
 8006262:	f7ff fccf 	bl	8005c04 <_Balloc>
 8006266:	4604      	mov	r4, r0
 8006268:	b930      	cbnz	r0, 8006278 <__d2b+0x24>
 800626a:	4602      	mov	r2, r0
 800626c:	4b25      	ldr	r3, [pc, #148]	; (8006304 <__d2b+0xb0>)
 800626e:	4826      	ldr	r0, [pc, #152]	; (8006308 <__d2b+0xb4>)
 8006270:	f240 310a 	movw	r1, #778	; 0x30a
 8006274:	f000 f85c 	bl	8006330 <__assert_func>
 8006278:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800627c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006280:	bb35      	cbnz	r5, 80062d0 <__d2b+0x7c>
 8006282:	2e00      	cmp	r6, #0
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	d028      	beq.n	80062da <__d2b+0x86>
 8006288:	4668      	mov	r0, sp
 800628a:	9600      	str	r6, [sp, #0]
 800628c:	f7ff fd82 	bl	8005d94 <__lo0bits>
 8006290:	9900      	ldr	r1, [sp, #0]
 8006292:	b300      	cbz	r0, 80062d6 <__d2b+0x82>
 8006294:	9a01      	ldr	r2, [sp, #4]
 8006296:	f1c0 0320 	rsb	r3, r0, #32
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	430b      	orrs	r3, r1
 80062a0:	40c2      	lsrs	r2, r0
 80062a2:	6163      	str	r3, [r4, #20]
 80062a4:	9201      	str	r2, [sp, #4]
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	61a3      	str	r3, [r4, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bf14      	ite	ne
 80062ae:	2202      	movne	r2, #2
 80062b0:	2201      	moveq	r2, #1
 80062b2:	6122      	str	r2, [r4, #16]
 80062b4:	b1d5      	cbz	r5, 80062ec <__d2b+0x98>
 80062b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062ba:	4405      	add	r5, r0
 80062bc:	f8c9 5000 	str.w	r5, [r9]
 80062c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062c4:	f8c8 0000 	str.w	r0, [r8]
 80062c8:	4620      	mov	r0, r4
 80062ca:	b003      	add	sp, #12
 80062cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062d4:	e7d5      	b.n	8006282 <__d2b+0x2e>
 80062d6:	6161      	str	r1, [r4, #20]
 80062d8:	e7e5      	b.n	80062a6 <__d2b+0x52>
 80062da:	a801      	add	r0, sp, #4
 80062dc:	f7ff fd5a 	bl	8005d94 <__lo0bits>
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	6163      	str	r3, [r4, #20]
 80062e4:	2201      	movs	r2, #1
 80062e6:	6122      	str	r2, [r4, #16]
 80062e8:	3020      	adds	r0, #32
 80062ea:	e7e3      	b.n	80062b4 <__d2b+0x60>
 80062ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062f4:	f8c9 0000 	str.w	r0, [r9]
 80062f8:	6918      	ldr	r0, [r3, #16]
 80062fa:	f7ff fd2b 	bl	8005d54 <__hi0bits>
 80062fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006302:	e7df      	b.n	80062c4 <__d2b+0x70>
 8006304:	0800763f 	.word	0x0800763f
 8006308:	08007650 	.word	0x08007650

0800630c <_read_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4d07      	ldr	r5, [pc, #28]	; (800632c <_read_r+0x20>)
 8006310:	4604      	mov	r4, r0
 8006312:	4608      	mov	r0, r1
 8006314:	4611      	mov	r1, r2
 8006316:	2200      	movs	r2, #0
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f000 fd2e 	bl	8006d7c <_read>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_read_r+0x1e>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_read_r+0x1e>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	200009a0 	.word	0x200009a0

08006330 <__assert_func>:
 8006330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006332:	4614      	mov	r4, r2
 8006334:	461a      	mov	r2, r3
 8006336:	4b09      	ldr	r3, [pc, #36]	; (800635c <__assert_func+0x2c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4605      	mov	r5, r0
 800633c:	68d8      	ldr	r0, [r3, #12]
 800633e:	b14c      	cbz	r4, 8006354 <__assert_func+0x24>
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <__assert_func+0x30>)
 8006342:	9100      	str	r1, [sp, #0]
 8006344:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006348:	4906      	ldr	r1, [pc, #24]	; (8006364 <__assert_func+0x34>)
 800634a:	462b      	mov	r3, r5
 800634c:	f000 f9a6 	bl	800669c <fiprintf>
 8006350:	f000 fc12 	bl	8006b78 <abort>
 8006354:	4b04      	ldr	r3, [pc, #16]	; (8006368 <__assert_func+0x38>)
 8006356:	461c      	mov	r4, r3
 8006358:	e7f3      	b.n	8006342 <__assert_func+0x12>
 800635a:	bf00      	nop
 800635c:	20000010 	.word	0x20000010
 8006360:	080077ac 	.word	0x080077ac
 8006364:	080077b9 	.word	0x080077b9
 8006368:	080077e7 	.word	0x080077e7

0800636c <__sflush_r>:
 800636c:	898a      	ldrh	r2, [r1, #12]
 800636e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006372:	4605      	mov	r5, r0
 8006374:	0710      	lsls	r0, r2, #28
 8006376:	460c      	mov	r4, r1
 8006378:	d458      	bmi.n	800642c <__sflush_r+0xc0>
 800637a:	684b      	ldr	r3, [r1, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	dc05      	bgt.n	800638c <__sflush_r+0x20>
 8006380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	dc02      	bgt.n	800638c <__sflush_r+0x20>
 8006386:	2000      	movs	r0, #0
 8006388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800638c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800638e:	2e00      	cmp	r6, #0
 8006390:	d0f9      	beq.n	8006386 <__sflush_r+0x1a>
 8006392:	2300      	movs	r3, #0
 8006394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006398:	682f      	ldr	r7, [r5, #0]
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	d032      	beq.n	8006404 <__sflush_r+0x98>
 800639e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	075a      	lsls	r2, r3, #29
 80063a4:	d505      	bpl.n	80063b2 <__sflush_r+0x46>
 80063a6:	6863      	ldr	r3, [r4, #4]
 80063a8:	1ac0      	subs	r0, r0, r3
 80063aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063ac:	b10b      	cbz	r3, 80063b2 <__sflush_r+0x46>
 80063ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063b0:	1ac0      	subs	r0, r0, r3
 80063b2:	2300      	movs	r3, #0
 80063b4:	4602      	mov	r2, r0
 80063b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063b8:	6a21      	ldr	r1, [r4, #32]
 80063ba:	4628      	mov	r0, r5
 80063bc:	47b0      	blx	r6
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	d106      	bne.n	80063d2 <__sflush_r+0x66>
 80063c4:	6829      	ldr	r1, [r5, #0]
 80063c6:	291d      	cmp	r1, #29
 80063c8:	d82c      	bhi.n	8006424 <__sflush_r+0xb8>
 80063ca:	4a2a      	ldr	r2, [pc, #168]	; (8006474 <__sflush_r+0x108>)
 80063cc:	40ca      	lsrs	r2, r1
 80063ce:	07d6      	lsls	r6, r2, #31
 80063d0:	d528      	bpl.n	8006424 <__sflush_r+0xb8>
 80063d2:	2200      	movs	r2, #0
 80063d4:	6062      	str	r2, [r4, #4]
 80063d6:	04d9      	lsls	r1, r3, #19
 80063d8:	6922      	ldr	r2, [r4, #16]
 80063da:	6022      	str	r2, [r4, #0]
 80063dc:	d504      	bpl.n	80063e8 <__sflush_r+0x7c>
 80063de:	1c42      	adds	r2, r0, #1
 80063e0:	d101      	bne.n	80063e6 <__sflush_r+0x7a>
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	b903      	cbnz	r3, 80063e8 <__sflush_r+0x7c>
 80063e6:	6560      	str	r0, [r4, #84]	; 0x54
 80063e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ea:	602f      	str	r7, [r5, #0]
 80063ec:	2900      	cmp	r1, #0
 80063ee:	d0ca      	beq.n	8006386 <__sflush_r+0x1a>
 80063f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063f4:	4299      	cmp	r1, r3
 80063f6:	d002      	beq.n	80063fe <__sflush_r+0x92>
 80063f8:	4628      	mov	r0, r5
 80063fa:	f7fe f841 	bl	8004480 <_free_r>
 80063fe:	2000      	movs	r0, #0
 8006400:	6360      	str	r0, [r4, #52]	; 0x34
 8006402:	e7c1      	b.n	8006388 <__sflush_r+0x1c>
 8006404:	6a21      	ldr	r1, [r4, #32]
 8006406:	2301      	movs	r3, #1
 8006408:	4628      	mov	r0, r5
 800640a:	47b0      	blx	r6
 800640c:	1c41      	adds	r1, r0, #1
 800640e:	d1c7      	bne.n	80063a0 <__sflush_r+0x34>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0c4      	beq.n	80063a0 <__sflush_r+0x34>
 8006416:	2b1d      	cmp	r3, #29
 8006418:	d001      	beq.n	800641e <__sflush_r+0xb2>
 800641a:	2b16      	cmp	r3, #22
 800641c:	d101      	bne.n	8006422 <__sflush_r+0xb6>
 800641e:	602f      	str	r7, [r5, #0]
 8006420:	e7b1      	b.n	8006386 <__sflush_r+0x1a>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	e7ad      	b.n	8006388 <__sflush_r+0x1c>
 800642c:	690f      	ldr	r7, [r1, #16]
 800642e:	2f00      	cmp	r7, #0
 8006430:	d0a9      	beq.n	8006386 <__sflush_r+0x1a>
 8006432:	0793      	lsls	r3, r2, #30
 8006434:	680e      	ldr	r6, [r1, #0]
 8006436:	bf08      	it	eq
 8006438:	694b      	ldreq	r3, [r1, #20]
 800643a:	600f      	str	r7, [r1, #0]
 800643c:	bf18      	it	ne
 800643e:	2300      	movne	r3, #0
 8006440:	eba6 0807 	sub.w	r8, r6, r7
 8006444:	608b      	str	r3, [r1, #8]
 8006446:	f1b8 0f00 	cmp.w	r8, #0
 800644a:	dd9c      	ble.n	8006386 <__sflush_r+0x1a>
 800644c:	6a21      	ldr	r1, [r4, #32]
 800644e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006450:	4643      	mov	r3, r8
 8006452:	463a      	mov	r2, r7
 8006454:	4628      	mov	r0, r5
 8006456:	47b0      	blx	r6
 8006458:	2800      	cmp	r0, #0
 800645a:	dc06      	bgt.n	800646a <__sflush_r+0xfe>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006462:	81a3      	strh	r3, [r4, #12]
 8006464:	f04f 30ff 	mov.w	r0, #4294967295
 8006468:	e78e      	b.n	8006388 <__sflush_r+0x1c>
 800646a:	4407      	add	r7, r0
 800646c:	eba8 0800 	sub.w	r8, r8, r0
 8006470:	e7e9      	b.n	8006446 <__sflush_r+0xda>
 8006472:	bf00      	nop
 8006474:	20400001 	.word	0x20400001

08006478 <_fflush_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	690b      	ldr	r3, [r1, #16]
 800647c:	4605      	mov	r5, r0
 800647e:	460c      	mov	r4, r1
 8006480:	b913      	cbnz	r3, 8006488 <_fflush_r+0x10>
 8006482:	2500      	movs	r5, #0
 8006484:	4628      	mov	r0, r5
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	b118      	cbz	r0, 8006492 <_fflush_r+0x1a>
 800648a:	6983      	ldr	r3, [r0, #24]
 800648c:	b90b      	cbnz	r3, 8006492 <_fflush_r+0x1a>
 800648e:	f000 f887 	bl	80065a0 <__sinit>
 8006492:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <_fflush_r+0x6c>)
 8006494:	429c      	cmp	r4, r3
 8006496:	d11b      	bne.n	80064d0 <_fflush_r+0x58>
 8006498:	686c      	ldr	r4, [r5, #4]
 800649a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0ef      	beq.n	8006482 <_fflush_r+0xa>
 80064a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064a4:	07d0      	lsls	r0, r2, #31
 80064a6:	d404      	bmi.n	80064b2 <_fflush_r+0x3a>
 80064a8:	0599      	lsls	r1, r3, #22
 80064aa:	d402      	bmi.n	80064b2 <_fflush_r+0x3a>
 80064ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ae:	f000 f927 	bl	8006700 <__retarget_lock_acquire_recursive>
 80064b2:	4628      	mov	r0, r5
 80064b4:	4621      	mov	r1, r4
 80064b6:	f7ff ff59 	bl	800636c <__sflush_r>
 80064ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064bc:	07da      	lsls	r2, r3, #31
 80064be:	4605      	mov	r5, r0
 80064c0:	d4e0      	bmi.n	8006484 <_fflush_r+0xc>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	059b      	lsls	r3, r3, #22
 80064c6:	d4dd      	bmi.n	8006484 <_fflush_r+0xc>
 80064c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ca:	f000 f91a 	bl	8006702 <__retarget_lock_release_recursive>
 80064ce:	e7d9      	b.n	8006484 <_fflush_r+0xc>
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <_fflush_r+0x70>)
 80064d2:	429c      	cmp	r4, r3
 80064d4:	d101      	bne.n	80064da <_fflush_r+0x62>
 80064d6:	68ac      	ldr	r4, [r5, #8]
 80064d8:	e7df      	b.n	800649a <_fflush_r+0x22>
 80064da:	4b04      	ldr	r3, [pc, #16]	; (80064ec <_fflush_r+0x74>)
 80064dc:	429c      	cmp	r4, r3
 80064de:	bf08      	it	eq
 80064e0:	68ec      	ldreq	r4, [r5, #12]
 80064e2:	e7da      	b.n	800649a <_fflush_r+0x22>
 80064e4:	0800790c 	.word	0x0800790c
 80064e8:	0800792c 	.word	0x0800792c
 80064ec:	080078ec 	.word	0x080078ec

080064f0 <std>:
 80064f0:	2300      	movs	r3, #0
 80064f2:	b510      	push	{r4, lr}
 80064f4:	4604      	mov	r4, r0
 80064f6:	e9c0 3300 	strd	r3, r3, [r0]
 80064fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064fe:	6083      	str	r3, [r0, #8]
 8006500:	8181      	strh	r1, [r0, #12]
 8006502:	6643      	str	r3, [r0, #100]	; 0x64
 8006504:	81c2      	strh	r2, [r0, #14]
 8006506:	6183      	str	r3, [r0, #24]
 8006508:	4619      	mov	r1, r3
 800650a:	2208      	movs	r2, #8
 800650c:	305c      	adds	r0, #92	; 0x5c
 800650e:	f7fd ff99 	bl	8004444 <memset>
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <std+0x38>)
 8006514:	6263      	str	r3, [r4, #36]	; 0x24
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <std+0x3c>)
 8006518:	62a3      	str	r3, [r4, #40]	; 0x28
 800651a:	4b05      	ldr	r3, [pc, #20]	; (8006530 <std+0x40>)
 800651c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800651e:	4b05      	ldr	r3, [pc, #20]	; (8006534 <std+0x44>)
 8006520:	6224      	str	r4, [r4, #32]
 8006522:	6323      	str	r3, [r4, #48]	; 0x30
 8006524:	bd10      	pop	{r4, pc}
 8006526:	bf00      	nop
 8006528:	08004ee5 	.word	0x08004ee5
 800652c:	08004f07 	.word	0x08004f07
 8006530:	08004f3f 	.word	0x08004f3f
 8006534:	08004f63 	.word	0x08004f63

08006538 <_cleanup_r>:
 8006538:	4901      	ldr	r1, [pc, #4]	; (8006540 <_cleanup_r+0x8>)
 800653a:	f000 b8c1 	b.w	80066c0 <_fwalk_reent>
 800653e:	bf00      	nop
 8006540:	08006479 	.word	0x08006479

08006544 <__sfmoreglue>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	2268      	movs	r2, #104	; 0x68
 8006548:	1e4d      	subs	r5, r1, #1
 800654a:	4355      	muls	r5, r2
 800654c:	460e      	mov	r6, r1
 800654e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006552:	f7fe f801 	bl	8004558 <_malloc_r>
 8006556:	4604      	mov	r4, r0
 8006558:	b140      	cbz	r0, 800656c <__sfmoreglue+0x28>
 800655a:	2100      	movs	r1, #0
 800655c:	e9c0 1600 	strd	r1, r6, [r0]
 8006560:	300c      	adds	r0, #12
 8006562:	60a0      	str	r0, [r4, #8]
 8006564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006568:	f7fd ff6c 	bl	8004444 <memset>
 800656c:	4620      	mov	r0, r4
 800656e:	bd70      	pop	{r4, r5, r6, pc}

08006570 <__sfp_lock_acquire>:
 8006570:	4801      	ldr	r0, [pc, #4]	; (8006578 <__sfp_lock_acquire+0x8>)
 8006572:	f000 b8c5 	b.w	8006700 <__retarget_lock_acquire_recursive>
 8006576:	bf00      	nop
 8006578:	200009a5 	.word	0x200009a5

0800657c <__sfp_lock_release>:
 800657c:	4801      	ldr	r0, [pc, #4]	; (8006584 <__sfp_lock_release+0x8>)
 800657e:	f000 b8c0 	b.w	8006702 <__retarget_lock_release_recursive>
 8006582:	bf00      	nop
 8006584:	200009a5 	.word	0x200009a5

08006588 <__sinit_lock_acquire>:
 8006588:	4801      	ldr	r0, [pc, #4]	; (8006590 <__sinit_lock_acquire+0x8>)
 800658a:	f000 b8b9 	b.w	8006700 <__retarget_lock_acquire_recursive>
 800658e:	bf00      	nop
 8006590:	200009a6 	.word	0x200009a6

08006594 <__sinit_lock_release>:
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__sinit_lock_release+0x8>)
 8006596:	f000 b8b4 	b.w	8006702 <__retarget_lock_release_recursive>
 800659a:	bf00      	nop
 800659c:	200009a6 	.word	0x200009a6

080065a0 <__sinit>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	4604      	mov	r4, r0
 80065a4:	f7ff fff0 	bl	8006588 <__sinit_lock_acquire>
 80065a8:	69a3      	ldr	r3, [r4, #24]
 80065aa:	b11b      	cbz	r3, 80065b4 <__sinit+0x14>
 80065ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b0:	f7ff bff0 	b.w	8006594 <__sinit_lock_release>
 80065b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065b8:	6523      	str	r3, [r4, #80]	; 0x50
 80065ba:	4b13      	ldr	r3, [pc, #76]	; (8006608 <__sinit+0x68>)
 80065bc:	4a13      	ldr	r2, [pc, #76]	; (800660c <__sinit+0x6c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80065c2:	42a3      	cmp	r3, r4
 80065c4:	bf04      	itt	eq
 80065c6:	2301      	moveq	r3, #1
 80065c8:	61a3      	streq	r3, [r4, #24]
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 f820 	bl	8006610 <__sfp>
 80065d0:	6060      	str	r0, [r4, #4]
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 f81c 	bl	8006610 <__sfp>
 80065d8:	60a0      	str	r0, [r4, #8]
 80065da:	4620      	mov	r0, r4
 80065dc:	f000 f818 	bl	8006610 <__sfp>
 80065e0:	2200      	movs	r2, #0
 80065e2:	60e0      	str	r0, [r4, #12]
 80065e4:	2104      	movs	r1, #4
 80065e6:	6860      	ldr	r0, [r4, #4]
 80065e8:	f7ff ff82 	bl	80064f0 <std>
 80065ec:	68a0      	ldr	r0, [r4, #8]
 80065ee:	2201      	movs	r2, #1
 80065f0:	2109      	movs	r1, #9
 80065f2:	f7ff ff7d 	bl	80064f0 <std>
 80065f6:	68e0      	ldr	r0, [r4, #12]
 80065f8:	2202      	movs	r2, #2
 80065fa:	2112      	movs	r1, #18
 80065fc:	f7ff ff78 	bl	80064f0 <std>
 8006600:	2301      	movs	r3, #1
 8006602:	61a3      	str	r3, [r4, #24]
 8006604:	e7d2      	b.n	80065ac <__sinit+0xc>
 8006606:	bf00      	nop
 8006608:	08007588 	.word	0x08007588
 800660c:	08006539 	.word	0x08006539

08006610 <__sfp>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	4607      	mov	r7, r0
 8006614:	f7ff ffac 	bl	8006570 <__sfp_lock_acquire>
 8006618:	4b1e      	ldr	r3, [pc, #120]	; (8006694 <__sfp+0x84>)
 800661a:	681e      	ldr	r6, [r3, #0]
 800661c:	69b3      	ldr	r3, [r6, #24]
 800661e:	b913      	cbnz	r3, 8006626 <__sfp+0x16>
 8006620:	4630      	mov	r0, r6
 8006622:	f7ff ffbd 	bl	80065a0 <__sinit>
 8006626:	3648      	adds	r6, #72	; 0x48
 8006628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800662c:	3b01      	subs	r3, #1
 800662e:	d503      	bpl.n	8006638 <__sfp+0x28>
 8006630:	6833      	ldr	r3, [r6, #0]
 8006632:	b30b      	cbz	r3, 8006678 <__sfp+0x68>
 8006634:	6836      	ldr	r6, [r6, #0]
 8006636:	e7f7      	b.n	8006628 <__sfp+0x18>
 8006638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800663c:	b9d5      	cbnz	r5, 8006674 <__sfp+0x64>
 800663e:	4b16      	ldr	r3, [pc, #88]	; (8006698 <__sfp+0x88>)
 8006640:	60e3      	str	r3, [r4, #12]
 8006642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006646:	6665      	str	r5, [r4, #100]	; 0x64
 8006648:	f000 f859 	bl	80066fe <__retarget_lock_init_recursive>
 800664c:	f7ff ff96 	bl	800657c <__sfp_lock_release>
 8006650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006658:	6025      	str	r5, [r4, #0]
 800665a:	61a5      	str	r5, [r4, #24]
 800665c:	2208      	movs	r2, #8
 800665e:	4629      	mov	r1, r5
 8006660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006664:	f7fd feee 	bl	8004444 <memset>
 8006668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800666c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006670:	4620      	mov	r0, r4
 8006672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006674:	3468      	adds	r4, #104	; 0x68
 8006676:	e7d9      	b.n	800662c <__sfp+0x1c>
 8006678:	2104      	movs	r1, #4
 800667a:	4638      	mov	r0, r7
 800667c:	f7ff ff62 	bl	8006544 <__sfmoreglue>
 8006680:	4604      	mov	r4, r0
 8006682:	6030      	str	r0, [r6, #0]
 8006684:	2800      	cmp	r0, #0
 8006686:	d1d5      	bne.n	8006634 <__sfp+0x24>
 8006688:	f7ff ff78 	bl	800657c <__sfp_lock_release>
 800668c:	230c      	movs	r3, #12
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	e7ee      	b.n	8006670 <__sfp+0x60>
 8006692:	bf00      	nop
 8006694:	08007588 	.word	0x08007588
 8006698:	ffff0001 	.word	0xffff0001

0800669c <fiprintf>:
 800669c:	b40e      	push	{r1, r2, r3}
 800669e:	b503      	push	{r0, r1, lr}
 80066a0:	4601      	mov	r1, r0
 80066a2:	ab03      	add	r3, sp, #12
 80066a4:	4805      	ldr	r0, [pc, #20]	; (80066bc <fiprintf+0x20>)
 80066a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	f000 f865 	bl	800677c <_vfiprintf_r>
 80066b2:	b002      	add	sp, #8
 80066b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066b8:	b003      	add	sp, #12
 80066ba:	4770      	bx	lr
 80066bc:	20000010 	.word	0x20000010

080066c0 <_fwalk_reent>:
 80066c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c4:	4606      	mov	r6, r0
 80066c6:	4688      	mov	r8, r1
 80066c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066cc:	2700      	movs	r7, #0
 80066ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066d2:	f1b9 0901 	subs.w	r9, r9, #1
 80066d6:	d505      	bpl.n	80066e4 <_fwalk_reent+0x24>
 80066d8:	6824      	ldr	r4, [r4, #0]
 80066da:	2c00      	cmp	r4, #0
 80066dc:	d1f7      	bne.n	80066ce <_fwalk_reent+0xe>
 80066de:	4638      	mov	r0, r7
 80066e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e4:	89ab      	ldrh	r3, [r5, #12]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d907      	bls.n	80066fa <_fwalk_reent+0x3a>
 80066ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066ee:	3301      	adds	r3, #1
 80066f0:	d003      	beq.n	80066fa <_fwalk_reent+0x3a>
 80066f2:	4629      	mov	r1, r5
 80066f4:	4630      	mov	r0, r6
 80066f6:	47c0      	blx	r8
 80066f8:	4307      	orrs	r7, r0
 80066fa:	3568      	adds	r5, #104	; 0x68
 80066fc:	e7e9      	b.n	80066d2 <_fwalk_reent+0x12>

080066fe <__retarget_lock_init_recursive>:
 80066fe:	4770      	bx	lr

08006700 <__retarget_lock_acquire_recursive>:
 8006700:	4770      	bx	lr

08006702 <__retarget_lock_release_recursive>:
 8006702:	4770      	bx	lr

08006704 <__ascii_mbtowc>:
 8006704:	b082      	sub	sp, #8
 8006706:	b901      	cbnz	r1, 800670a <__ascii_mbtowc+0x6>
 8006708:	a901      	add	r1, sp, #4
 800670a:	b142      	cbz	r2, 800671e <__ascii_mbtowc+0x1a>
 800670c:	b14b      	cbz	r3, 8006722 <__ascii_mbtowc+0x1e>
 800670e:	7813      	ldrb	r3, [r2, #0]
 8006710:	600b      	str	r3, [r1, #0]
 8006712:	7812      	ldrb	r2, [r2, #0]
 8006714:	1e10      	subs	r0, r2, #0
 8006716:	bf18      	it	ne
 8006718:	2001      	movne	r0, #1
 800671a:	b002      	add	sp, #8
 800671c:	4770      	bx	lr
 800671e:	4610      	mov	r0, r2
 8006720:	e7fb      	b.n	800671a <__ascii_mbtowc+0x16>
 8006722:	f06f 0001 	mvn.w	r0, #1
 8006726:	e7f8      	b.n	800671a <__ascii_mbtowc+0x16>

08006728 <__sfputc_r>:
 8006728:	6893      	ldr	r3, [r2, #8]
 800672a:	3b01      	subs	r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	b410      	push	{r4}
 8006730:	6093      	str	r3, [r2, #8]
 8006732:	da08      	bge.n	8006746 <__sfputc_r+0x1e>
 8006734:	6994      	ldr	r4, [r2, #24]
 8006736:	42a3      	cmp	r3, r4
 8006738:	db01      	blt.n	800673e <__sfputc_r+0x16>
 800673a:	290a      	cmp	r1, #10
 800673c:	d103      	bne.n	8006746 <__sfputc_r+0x1e>
 800673e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006742:	f000 b94b 	b.w	80069dc <__swbuf_r>
 8006746:	6813      	ldr	r3, [r2, #0]
 8006748:	1c58      	adds	r0, r3, #1
 800674a:	6010      	str	r0, [r2, #0]
 800674c:	7019      	strb	r1, [r3, #0]
 800674e:	4608      	mov	r0, r1
 8006750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006754:	4770      	bx	lr

08006756 <__sfputs_r>:
 8006756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006758:	4606      	mov	r6, r0
 800675a:	460f      	mov	r7, r1
 800675c:	4614      	mov	r4, r2
 800675e:	18d5      	adds	r5, r2, r3
 8006760:	42ac      	cmp	r4, r5
 8006762:	d101      	bne.n	8006768 <__sfputs_r+0x12>
 8006764:	2000      	movs	r0, #0
 8006766:	e007      	b.n	8006778 <__sfputs_r+0x22>
 8006768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676c:	463a      	mov	r2, r7
 800676e:	4630      	mov	r0, r6
 8006770:	f7ff ffda 	bl	8006728 <__sfputc_r>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d1f3      	bne.n	8006760 <__sfputs_r+0xa>
 8006778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800677c <_vfiprintf_r>:
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	460d      	mov	r5, r1
 8006782:	b09d      	sub	sp, #116	; 0x74
 8006784:	4614      	mov	r4, r2
 8006786:	4698      	mov	r8, r3
 8006788:	4606      	mov	r6, r0
 800678a:	b118      	cbz	r0, 8006794 <_vfiprintf_r+0x18>
 800678c:	6983      	ldr	r3, [r0, #24]
 800678e:	b90b      	cbnz	r3, 8006794 <_vfiprintf_r+0x18>
 8006790:	f7ff ff06 	bl	80065a0 <__sinit>
 8006794:	4b89      	ldr	r3, [pc, #548]	; (80069bc <_vfiprintf_r+0x240>)
 8006796:	429d      	cmp	r5, r3
 8006798:	d11b      	bne.n	80067d2 <_vfiprintf_r+0x56>
 800679a:	6875      	ldr	r5, [r6, #4]
 800679c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800679e:	07d9      	lsls	r1, r3, #31
 80067a0:	d405      	bmi.n	80067ae <_vfiprintf_r+0x32>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	059a      	lsls	r2, r3, #22
 80067a6:	d402      	bmi.n	80067ae <_vfiprintf_r+0x32>
 80067a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067aa:	f7ff ffa9 	bl	8006700 <__retarget_lock_acquire_recursive>
 80067ae:	89ab      	ldrh	r3, [r5, #12]
 80067b0:	071b      	lsls	r3, r3, #28
 80067b2:	d501      	bpl.n	80067b8 <_vfiprintf_r+0x3c>
 80067b4:	692b      	ldr	r3, [r5, #16]
 80067b6:	b9eb      	cbnz	r3, 80067f4 <_vfiprintf_r+0x78>
 80067b8:	4629      	mov	r1, r5
 80067ba:	4630      	mov	r0, r6
 80067bc:	f000 f96e 	bl	8006a9c <__swsetup_r>
 80067c0:	b1c0      	cbz	r0, 80067f4 <_vfiprintf_r+0x78>
 80067c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067c4:	07dc      	lsls	r4, r3, #31
 80067c6:	d50e      	bpl.n	80067e6 <_vfiprintf_r+0x6a>
 80067c8:	f04f 30ff 	mov.w	r0, #4294967295
 80067cc:	b01d      	add	sp, #116	; 0x74
 80067ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d2:	4b7b      	ldr	r3, [pc, #492]	; (80069c0 <_vfiprintf_r+0x244>)
 80067d4:	429d      	cmp	r5, r3
 80067d6:	d101      	bne.n	80067dc <_vfiprintf_r+0x60>
 80067d8:	68b5      	ldr	r5, [r6, #8]
 80067da:	e7df      	b.n	800679c <_vfiprintf_r+0x20>
 80067dc:	4b79      	ldr	r3, [pc, #484]	; (80069c4 <_vfiprintf_r+0x248>)
 80067de:	429d      	cmp	r5, r3
 80067e0:	bf08      	it	eq
 80067e2:	68f5      	ldreq	r5, [r6, #12]
 80067e4:	e7da      	b.n	800679c <_vfiprintf_r+0x20>
 80067e6:	89ab      	ldrh	r3, [r5, #12]
 80067e8:	0598      	lsls	r0, r3, #22
 80067ea:	d4ed      	bmi.n	80067c8 <_vfiprintf_r+0x4c>
 80067ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ee:	f7ff ff88 	bl	8006702 <__retarget_lock_release_recursive>
 80067f2:	e7e9      	b.n	80067c8 <_vfiprintf_r+0x4c>
 80067f4:	2300      	movs	r3, #0
 80067f6:	9309      	str	r3, [sp, #36]	; 0x24
 80067f8:	2320      	movs	r3, #32
 80067fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006802:	2330      	movs	r3, #48	; 0x30
 8006804:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069c8 <_vfiprintf_r+0x24c>
 8006808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800680c:	f04f 0901 	mov.w	r9, #1
 8006810:	4623      	mov	r3, r4
 8006812:	469a      	mov	sl, r3
 8006814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006818:	b10a      	cbz	r2, 800681e <_vfiprintf_r+0xa2>
 800681a:	2a25      	cmp	r2, #37	; 0x25
 800681c:	d1f9      	bne.n	8006812 <_vfiprintf_r+0x96>
 800681e:	ebba 0b04 	subs.w	fp, sl, r4
 8006822:	d00b      	beq.n	800683c <_vfiprintf_r+0xc0>
 8006824:	465b      	mov	r3, fp
 8006826:	4622      	mov	r2, r4
 8006828:	4629      	mov	r1, r5
 800682a:	4630      	mov	r0, r6
 800682c:	f7ff ff93 	bl	8006756 <__sfputs_r>
 8006830:	3001      	adds	r0, #1
 8006832:	f000 80aa 	beq.w	800698a <_vfiprintf_r+0x20e>
 8006836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006838:	445a      	add	r2, fp
 800683a:	9209      	str	r2, [sp, #36]	; 0x24
 800683c:	f89a 3000 	ldrb.w	r3, [sl]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80a2 	beq.w	800698a <_vfiprintf_r+0x20e>
 8006846:	2300      	movs	r3, #0
 8006848:	f04f 32ff 	mov.w	r2, #4294967295
 800684c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006850:	f10a 0a01 	add.w	sl, sl, #1
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	9307      	str	r3, [sp, #28]
 8006858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800685c:	931a      	str	r3, [sp, #104]	; 0x68
 800685e:	4654      	mov	r4, sl
 8006860:	2205      	movs	r2, #5
 8006862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006866:	4858      	ldr	r0, [pc, #352]	; (80069c8 <_vfiprintf_r+0x24c>)
 8006868:	f7f9 fcf2 	bl	8000250 <memchr>
 800686c:	9a04      	ldr	r2, [sp, #16]
 800686e:	b9d8      	cbnz	r0, 80068a8 <_vfiprintf_r+0x12c>
 8006870:	06d1      	lsls	r1, r2, #27
 8006872:	bf44      	itt	mi
 8006874:	2320      	movmi	r3, #32
 8006876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800687a:	0713      	lsls	r3, r2, #28
 800687c:	bf44      	itt	mi
 800687e:	232b      	movmi	r3, #43	; 0x2b
 8006880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006884:	f89a 3000 	ldrb.w	r3, [sl]
 8006888:	2b2a      	cmp	r3, #42	; 0x2a
 800688a:	d015      	beq.n	80068b8 <_vfiprintf_r+0x13c>
 800688c:	9a07      	ldr	r2, [sp, #28]
 800688e:	4654      	mov	r4, sl
 8006890:	2000      	movs	r0, #0
 8006892:	f04f 0c0a 	mov.w	ip, #10
 8006896:	4621      	mov	r1, r4
 8006898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800689c:	3b30      	subs	r3, #48	; 0x30
 800689e:	2b09      	cmp	r3, #9
 80068a0:	d94e      	bls.n	8006940 <_vfiprintf_r+0x1c4>
 80068a2:	b1b0      	cbz	r0, 80068d2 <_vfiprintf_r+0x156>
 80068a4:	9207      	str	r2, [sp, #28]
 80068a6:	e014      	b.n	80068d2 <_vfiprintf_r+0x156>
 80068a8:	eba0 0308 	sub.w	r3, r0, r8
 80068ac:	fa09 f303 	lsl.w	r3, r9, r3
 80068b0:	4313      	orrs	r3, r2
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	46a2      	mov	sl, r4
 80068b6:	e7d2      	b.n	800685e <_vfiprintf_r+0xe2>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	1d19      	adds	r1, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	9103      	str	r1, [sp, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfbb      	ittet	lt
 80068c4:	425b      	neglt	r3, r3
 80068c6:	f042 0202 	orrlt.w	r2, r2, #2
 80068ca:	9307      	strge	r3, [sp, #28]
 80068cc:	9307      	strlt	r3, [sp, #28]
 80068ce:	bfb8      	it	lt
 80068d0:	9204      	strlt	r2, [sp, #16]
 80068d2:	7823      	ldrb	r3, [r4, #0]
 80068d4:	2b2e      	cmp	r3, #46	; 0x2e
 80068d6:	d10c      	bne.n	80068f2 <_vfiprintf_r+0x176>
 80068d8:	7863      	ldrb	r3, [r4, #1]
 80068da:	2b2a      	cmp	r3, #42	; 0x2a
 80068dc:	d135      	bne.n	800694a <_vfiprintf_r+0x1ce>
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	1d1a      	adds	r2, r3, #4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	9203      	str	r2, [sp, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bfb8      	it	lt
 80068ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80068ee:	3402      	adds	r4, #2
 80068f0:	9305      	str	r3, [sp, #20]
 80068f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069d8 <_vfiprintf_r+0x25c>
 80068f6:	7821      	ldrb	r1, [r4, #0]
 80068f8:	2203      	movs	r2, #3
 80068fa:	4650      	mov	r0, sl
 80068fc:	f7f9 fca8 	bl	8000250 <memchr>
 8006900:	b140      	cbz	r0, 8006914 <_vfiprintf_r+0x198>
 8006902:	2340      	movs	r3, #64	; 0x40
 8006904:	eba0 000a 	sub.w	r0, r0, sl
 8006908:	fa03 f000 	lsl.w	r0, r3, r0
 800690c:	9b04      	ldr	r3, [sp, #16]
 800690e:	4303      	orrs	r3, r0
 8006910:	3401      	adds	r4, #1
 8006912:	9304      	str	r3, [sp, #16]
 8006914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006918:	482c      	ldr	r0, [pc, #176]	; (80069cc <_vfiprintf_r+0x250>)
 800691a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800691e:	2206      	movs	r2, #6
 8006920:	f7f9 fc96 	bl	8000250 <memchr>
 8006924:	2800      	cmp	r0, #0
 8006926:	d03f      	beq.n	80069a8 <_vfiprintf_r+0x22c>
 8006928:	4b29      	ldr	r3, [pc, #164]	; (80069d0 <_vfiprintf_r+0x254>)
 800692a:	bb1b      	cbnz	r3, 8006974 <_vfiprintf_r+0x1f8>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	3307      	adds	r3, #7
 8006930:	f023 0307 	bic.w	r3, r3, #7
 8006934:	3308      	adds	r3, #8
 8006936:	9303      	str	r3, [sp, #12]
 8006938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693a:	443b      	add	r3, r7
 800693c:	9309      	str	r3, [sp, #36]	; 0x24
 800693e:	e767      	b.n	8006810 <_vfiprintf_r+0x94>
 8006940:	fb0c 3202 	mla	r2, ip, r2, r3
 8006944:	460c      	mov	r4, r1
 8006946:	2001      	movs	r0, #1
 8006948:	e7a5      	b.n	8006896 <_vfiprintf_r+0x11a>
 800694a:	2300      	movs	r3, #0
 800694c:	3401      	adds	r4, #1
 800694e:	9305      	str	r3, [sp, #20]
 8006950:	4619      	mov	r1, r3
 8006952:	f04f 0c0a 	mov.w	ip, #10
 8006956:	4620      	mov	r0, r4
 8006958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800695c:	3a30      	subs	r2, #48	; 0x30
 800695e:	2a09      	cmp	r2, #9
 8006960:	d903      	bls.n	800696a <_vfiprintf_r+0x1ee>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0c5      	beq.n	80068f2 <_vfiprintf_r+0x176>
 8006966:	9105      	str	r1, [sp, #20]
 8006968:	e7c3      	b.n	80068f2 <_vfiprintf_r+0x176>
 800696a:	fb0c 2101 	mla	r1, ip, r1, r2
 800696e:	4604      	mov	r4, r0
 8006970:	2301      	movs	r3, #1
 8006972:	e7f0      	b.n	8006956 <_vfiprintf_r+0x1da>
 8006974:	ab03      	add	r3, sp, #12
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	462a      	mov	r2, r5
 800697a:	4b16      	ldr	r3, [pc, #88]	; (80069d4 <_vfiprintf_r+0x258>)
 800697c:	a904      	add	r1, sp, #16
 800697e:	4630      	mov	r0, r6
 8006980:	f7fd feee 	bl	8004760 <_printf_float>
 8006984:	4607      	mov	r7, r0
 8006986:	1c78      	adds	r0, r7, #1
 8006988:	d1d6      	bne.n	8006938 <_vfiprintf_r+0x1bc>
 800698a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800698c:	07d9      	lsls	r1, r3, #31
 800698e:	d405      	bmi.n	800699c <_vfiprintf_r+0x220>
 8006990:	89ab      	ldrh	r3, [r5, #12]
 8006992:	059a      	lsls	r2, r3, #22
 8006994:	d402      	bmi.n	800699c <_vfiprintf_r+0x220>
 8006996:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006998:	f7ff feb3 	bl	8006702 <__retarget_lock_release_recursive>
 800699c:	89ab      	ldrh	r3, [r5, #12]
 800699e:	065b      	lsls	r3, r3, #25
 80069a0:	f53f af12 	bmi.w	80067c8 <_vfiprintf_r+0x4c>
 80069a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069a6:	e711      	b.n	80067cc <_vfiprintf_r+0x50>
 80069a8:	ab03      	add	r3, sp, #12
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	462a      	mov	r2, r5
 80069ae:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <_vfiprintf_r+0x258>)
 80069b0:	a904      	add	r1, sp, #16
 80069b2:	4630      	mov	r0, r6
 80069b4:	f7fe f960 	bl	8004c78 <_printf_i>
 80069b8:	e7e4      	b.n	8006984 <_vfiprintf_r+0x208>
 80069ba:	bf00      	nop
 80069bc:	0800790c 	.word	0x0800790c
 80069c0:	0800792c 	.word	0x0800792c
 80069c4:	080078ec 	.word	0x080078ec
 80069c8:	08007956 	.word	0x08007956
 80069cc:	08007960 	.word	0x08007960
 80069d0:	08004761 	.word	0x08004761
 80069d4:	08006757 	.word	0x08006757
 80069d8:	0800795c 	.word	0x0800795c

080069dc <__swbuf_r>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	460e      	mov	r6, r1
 80069e0:	4614      	mov	r4, r2
 80069e2:	4605      	mov	r5, r0
 80069e4:	b118      	cbz	r0, 80069ee <__swbuf_r+0x12>
 80069e6:	6983      	ldr	r3, [r0, #24]
 80069e8:	b90b      	cbnz	r3, 80069ee <__swbuf_r+0x12>
 80069ea:	f7ff fdd9 	bl	80065a0 <__sinit>
 80069ee:	4b21      	ldr	r3, [pc, #132]	; (8006a74 <__swbuf_r+0x98>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	d12b      	bne.n	8006a4c <__swbuf_r+0x70>
 80069f4:	686c      	ldr	r4, [r5, #4]
 80069f6:	69a3      	ldr	r3, [r4, #24]
 80069f8:	60a3      	str	r3, [r4, #8]
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	071a      	lsls	r2, r3, #28
 80069fe:	d52f      	bpl.n	8006a60 <__swbuf_r+0x84>
 8006a00:	6923      	ldr	r3, [r4, #16]
 8006a02:	b36b      	cbz	r3, 8006a60 <__swbuf_r+0x84>
 8006a04:	6923      	ldr	r3, [r4, #16]
 8006a06:	6820      	ldr	r0, [r4, #0]
 8006a08:	1ac0      	subs	r0, r0, r3
 8006a0a:	6963      	ldr	r3, [r4, #20]
 8006a0c:	b2f6      	uxtb	r6, r6
 8006a0e:	4283      	cmp	r3, r0
 8006a10:	4637      	mov	r7, r6
 8006a12:	dc04      	bgt.n	8006a1e <__swbuf_r+0x42>
 8006a14:	4621      	mov	r1, r4
 8006a16:	4628      	mov	r0, r5
 8006a18:	f7ff fd2e 	bl	8006478 <_fflush_r>
 8006a1c:	bb30      	cbnz	r0, 8006a6c <__swbuf_r+0x90>
 8006a1e:	68a3      	ldr	r3, [r4, #8]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	60a3      	str	r3, [r4, #8]
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	6022      	str	r2, [r4, #0]
 8006a2a:	701e      	strb	r6, [r3, #0]
 8006a2c:	6963      	ldr	r3, [r4, #20]
 8006a2e:	3001      	adds	r0, #1
 8006a30:	4283      	cmp	r3, r0
 8006a32:	d004      	beq.n	8006a3e <__swbuf_r+0x62>
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	07db      	lsls	r3, r3, #31
 8006a38:	d506      	bpl.n	8006a48 <__swbuf_r+0x6c>
 8006a3a:	2e0a      	cmp	r6, #10
 8006a3c:	d104      	bne.n	8006a48 <__swbuf_r+0x6c>
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4628      	mov	r0, r5
 8006a42:	f7ff fd19 	bl	8006478 <_fflush_r>
 8006a46:	b988      	cbnz	r0, 8006a6c <__swbuf_r+0x90>
 8006a48:	4638      	mov	r0, r7
 8006a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <__swbuf_r+0x9c>)
 8006a4e:	429c      	cmp	r4, r3
 8006a50:	d101      	bne.n	8006a56 <__swbuf_r+0x7a>
 8006a52:	68ac      	ldr	r4, [r5, #8]
 8006a54:	e7cf      	b.n	80069f6 <__swbuf_r+0x1a>
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <__swbuf_r+0xa0>)
 8006a58:	429c      	cmp	r4, r3
 8006a5a:	bf08      	it	eq
 8006a5c:	68ec      	ldreq	r4, [r5, #12]
 8006a5e:	e7ca      	b.n	80069f6 <__swbuf_r+0x1a>
 8006a60:	4621      	mov	r1, r4
 8006a62:	4628      	mov	r0, r5
 8006a64:	f000 f81a 	bl	8006a9c <__swsetup_r>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d0cb      	beq.n	8006a04 <__swbuf_r+0x28>
 8006a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8006a70:	e7ea      	b.n	8006a48 <__swbuf_r+0x6c>
 8006a72:	bf00      	nop
 8006a74:	0800790c 	.word	0x0800790c
 8006a78:	0800792c 	.word	0x0800792c
 8006a7c:	080078ec 	.word	0x080078ec

08006a80 <__ascii_wctomb>:
 8006a80:	b149      	cbz	r1, 8006a96 <__ascii_wctomb+0x16>
 8006a82:	2aff      	cmp	r2, #255	; 0xff
 8006a84:	bf85      	ittet	hi
 8006a86:	238a      	movhi	r3, #138	; 0x8a
 8006a88:	6003      	strhi	r3, [r0, #0]
 8006a8a:	700a      	strbls	r2, [r1, #0]
 8006a8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a90:	bf98      	it	ls
 8006a92:	2001      	movls	r0, #1
 8006a94:	4770      	bx	lr
 8006a96:	4608      	mov	r0, r1
 8006a98:	4770      	bx	lr
	...

08006a9c <__swsetup_r>:
 8006a9c:	4b32      	ldr	r3, [pc, #200]	; (8006b68 <__swsetup_r+0xcc>)
 8006a9e:	b570      	push	{r4, r5, r6, lr}
 8006aa0:	681d      	ldr	r5, [r3, #0]
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	b125      	cbz	r5, 8006ab2 <__swsetup_r+0x16>
 8006aa8:	69ab      	ldr	r3, [r5, #24]
 8006aaa:	b913      	cbnz	r3, 8006ab2 <__swsetup_r+0x16>
 8006aac:	4628      	mov	r0, r5
 8006aae:	f7ff fd77 	bl	80065a0 <__sinit>
 8006ab2:	4b2e      	ldr	r3, [pc, #184]	; (8006b6c <__swsetup_r+0xd0>)
 8006ab4:	429c      	cmp	r4, r3
 8006ab6:	d10f      	bne.n	8006ad8 <__swsetup_r+0x3c>
 8006ab8:	686c      	ldr	r4, [r5, #4]
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ac0:	0719      	lsls	r1, r3, #28
 8006ac2:	d42c      	bmi.n	8006b1e <__swsetup_r+0x82>
 8006ac4:	06dd      	lsls	r5, r3, #27
 8006ac6:	d411      	bmi.n	8006aec <__swsetup_r+0x50>
 8006ac8:	2309      	movs	r3, #9
 8006aca:	6033      	str	r3, [r6, #0]
 8006acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ad0:	81a3      	strh	r3, [r4, #12]
 8006ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad6:	e03e      	b.n	8006b56 <__swsetup_r+0xba>
 8006ad8:	4b25      	ldr	r3, [pc, #148]	; (8006b70 <__swsetup_r+0xd4>)
 8006ada:	429c      	cmp	r4, r3
 8006adc:	d101      	bne.n	8006ae2 <__swsetup_r+0x46>
 8006ade:	68ac      	ldr	r4, [r5, #8]
 8006ae0:	e7eb      	b.n	8006aba <__swsetup_r+0x1e>
 8006ae2:	4b24      	ldr	r3, [pc, #144]	; (8006b74 <__swsetup_r+0xd8>)
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	bf08      	it	eq
 8006ae8:	68ec      	ldreq	r4, [r5, #12]
 8006aea:	e7e6      	b.n	8006aba <__swsetup_r+0x1e>
 8006aec:	0758      	lsls	r0, r3, #29
 8006aee:	d512      	bpl.n	8006b16 <__swsetup_r+0x7a>
 8006af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006af2:	b141      	cbz	r1, 8006b06 <__swsetup_r+0x6a>
 8006af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006af8:	4299      	cmp	r1, r3
 8006afa:	d002      	beq.n	8006b02 <__swsetup_r+0x66>
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7fd fcbf 	bl	8004480 <_free_r>
 8006b02:	2300      	movs	r3, #0
 8006b04:	6363      	str	r3, [r4, #52]	; 0x34
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b0c:	81a3      	strh	r3, [r4, #12]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	6063      	str	r3, [r4, #4]
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f043 0308 	orr.w	r3, r3, #8
 8006b1c:	81a3      	strh	r3, [r4, #12]
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	b94b      	cbnz	r3, 8006b36 <__swsetup_r+0x9a>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2c:	d003      	beq.n	8006b36 <__swsetup_r+0x9a>
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4630      	mov	r0, r6
 8006b32:	f000 f84d 	bl	8006bd0 <__smakebuf_r>
 8006b36:	89a0      	ldrh	r0, [r4, #12]
 8006b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b3c:	f010 0301 	ands.w	r3, r0, #1
 8006b40:	d00a      	beq.n	8006b58 <__swsetup_r+0xbc>
 8006b42:	2300      	movs	r3, #0
 8006b44:	60a3      	str	r3, [r4, #8]
 8006b46:	6963      	ldr	r3, [r4, #20]
 8006b48:	425b      	negs	r3, r3
 8006b4a:	61a3      	str	r3, [r4, #24]
 8006b4c:	6923      	ldr	r3, [r4, #16]
 8006b4e:	b943      	cbnz	r3, 8006b62 <__swsetup_r+0xc6>
 8006b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b54:	d1ba      	bne.n	8006acc <__swsetup_r+0x30>
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
 8006b58:	0781      	lsls	r1, r0, #30
 8006b5a:	bf58      	it	pl
 8006b5c:	6963      	ldrpl	r3, [r4, #20]
 8006b5e:	60a3      	str	r3, [r4, #8]
 8006b60:	e7f4      	b.n	8006b4c <__swsetup_r+0xb0>
 8006b62:	2000      	movs	r0, #0
 8006b64:	e7f7      	b.n	8006b56 <__swsetup_r+0xba>
 8006b66:	bf00      	nop
 8006b68:	20000010 	.word	0x20000010
 8006b6c:	0800790c 	.word	0x0800790c
 8006b70:	0800792c 	.word	0x0800792c
 8006b74:	080078ec 	.word	0x080078ec

08006b78 <abort>:
 8006b78:	b508      	push	{r3, lr}
 8006b7a:	2006      	movs	r0, #6
 8006b7c:	f000 f890 	bl	8006ca0 <raise>
 8006b80:	2001      	movs	r0, #1
 8006b82:	f000 f919 	bl	8006db8 <_exit>

08006b86 <__swhatbuf_r>:
 8006b86:	b570      	push	{r4, r5, r6, lr}
 8006b88:	460e      	mov	r6, r1
 8006b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b8e:	2900      	cmp	r1, #0
 8006b90:	b096      	sub	sp, #88	; 0x58
 8006b92:	4614      	mov	r4, r2
 8006b94:	461d      	mov	r5, r3
 8006b96:	da08      	bge.n	8006baa <__swhatbuf_r+0x24>
 8006b98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	602a      	str	r2, [r5, #0]
 8006ba0:	061a      	lsls	r2, r3, #24
 8006ba2:	d410      	bmi.n	8006bc6 <__swhatbuf_r+0x40>
 8006ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba8:	e00e      	b.n	8006bc8 <__swhatbuf_r+0x42>
 8006baa:	466a      	mov	r2, sp
 8006bac:	f000 f894 	bl	8006cd8 <_fstat_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	dbf1      	blt.n	8006b98 <__swhatbuf_r+0x12>
 8006bb4:	9a01      	ldr	r2, [sp, #4]
 8006bb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bbe:	425a      	negs	r2, r3
 8006bc0:	415a      	adcs	r2, r3
 8006bc2:	602a      	str	r2, [r5, #0]
 8006bc4:	e7ee      	b.n	8006ba4 <__swhatbuf_r+0x1e>
 8006bc6:	2340      	movs	r3, #64	; 0x40
 8006bc8:	2000      	movs	r0, #0
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	b016      	add	sp, #88	; 0x58
 8006bce:	bd70      	pop	{r4, r5, r6, pc}

08006bd0 <__smakebuf_r>:
 8006bd0:	898b      	ldrh	r3, [r1, #12]
 8006bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bd4:	079d      	lsls	r5, r3, #30
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	d507      	bpl.n	8006bec <__smakebuf_r+0x1c>
 8006bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	6123      	str	r3, [r4, #16]
 8006be4:	2301      	movs	r3, #1
 8006be6:	6163      	str	r3, [r4, #20]
 8006be8:	b002      	add	sp, #8
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	ab01      	add	r3, sp, #4
 8006bee:	466a      	mov	r2, sp
 8006bf0:	f7ff ffc9 	bl	8006b86 <__swhatbuf_r>
 8006bf4:	9900      	ldr	r1, [sp, #0]
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f7fd fcad 	bl	8004558 <_malloc_r>
 8006bfe:	b948      	cbnz	r0, 8006c14 <__smakebuf_r+0x44>
 8006c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c04:	059a      	lsls	r2, r3, #22
 8006c06:	d4ef      	bmi.n	8006be8 <__smakebuf_r+0x18>
 8006c08:	f023 0303 	bic.w	r3, r3, #3
 8006c0c:	f043 0302 	orr.w	r3, r3, #2
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	e7e3      	b.n	8006bdc <__smakebuf_r+0xc>
 8006c14:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <__smakebuf_r+0x7c>)
 8006c16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	6020      	str	r0, [r4, #0]
 8006c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	6163      	str	r3, [r4, #20]
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	6120      	str	r0, [r4, #16]
 8006c2a:	b15b      	cbz	r3, 8006c44 <__smakebuf_r+0x74>
 8006c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 f863 	bl	8006cfc <_isatty_r>
 8006c36:	b128      	cbz	r0, 8006c44 <__smakebuf_r+0x74>
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	89a0      	ldrh	r0, [r4, #12]
 8006c46:	4305      	orrs	r5, r0
 8006c48:	81a5      	strh	r5, [r4, #12]
 8006c4a:	e7cd      	b.n	8006be8 <__smakebuf_r+0x18>
 8006c4c:	08006539 	.word	0x08006539

08006c50 <_raise_r>:
 8006c50:	291f      	cmp	r1, #31
 8006c52:	b538      	push	{r3, r4, r5, lr}
 8006c54:	4604      	mov	r4, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	d904      	bls.n	8006c64 <_raise_r+0x14>
 8006c5a:	2316      	movs	r3, #22
 8006c5c:	6003      	str	r3, [r0, #0]
 8006c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c66:	b112      	cbz	r2, 8006c6e <_raise_r+0x1e>
 8006c68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c6c:	b94b      	cbnz	r3, 8006c82 <_raise_r+0x32>
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 f830 	bl	8006cd4 <_getpid_r>
 8006c74:	462a      	mov	r2, r5
 8006c76:	4601      	mov	r1, r0
 8006c78:	4620      	mov	r0, r4
 8006c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c7e:	f000 b817 	b.w	8006cb0 <_kill_r>
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d00a      	beq.n	8006c9c <_raise_r+0x4c>
 8006c86:	1c59      	adds	r1, r3, #1
 8006c88:	d103      	bne.n	8006c92 <_raise_r+0x42>
 8006c8a:	2316      	movs	r3, #22
 8006c8c:	6003      	str	r3, [r0, #0]
 8006c8e:	2001      	movs	r0, #1
 8006c90:	e7e7      	b.n	8006c62 <_raise_r+0x12>
 8006c92:	2400      	movs	r4, #0
 8006c94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c98:	4628      	mov	r0, r5
 8006c9a:	4798      	blx	r3
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	e7e0      	b.n	8006c62 <_raise_r+0x12>

08006ca0 <raise>:
 8006ca0:	4b02      	ldr	r3, [pc, #8]	; (8006cac <raise+0xc>)
 8006ca2:	4601      	mov	r1, r0
 8006ca4:	6818      	ldr	r0, [r3, #0]
 8006ca6:	f7ff bfd3 	b.w	8006c50 <_raise_r>
 8006caa:	bf00      	nop
 8006cac:	20000010 	.word	0x20000010

08006cb0 <_kill_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d07      	ldr	r5, [pc, #28]	; (8006cd0 <_kill_r+0x20>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	f000 f84d 	bl	8006d5c <_kill>
 8006cc2:	1c43      	adds	r3, r0, #1
 8006cc4:	d102      	bne.n	8006ccc <_kill_r+0x1c>
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	b103      	cbz	r3, 8006ccc <_kill_r+0x1c>
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	bd38      	pop	{r3, r4, r5, pc}
 8006cce:	bf00      	nop
 8006cd0:	200009a0 	.word	0x200009a0

08006cd4 <_getpid_r>:
 8006cd4:	f000 b832 	b.w	8006d3c <_getpid>

08006cd8 <_fstat_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4d07      	ldr	r5, [pc, #28]	; (8006cf8 <_fstat_r+0x20>)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	602b      	str	r3, [r5, #0]
 8006ce6:	f000 f821 	bl	8006d2c <_fstat>
 8006cea:	1c43      	adds	r3, r0, #1
 8006cec:	d102      	bne.n	8006cf4 <_fstat_r+0x1c>
 8006cee:	682b      	ldr	r3, [r5, #0]
 8006cf0:	b103      	cbz	r3, 8006cf4 <_fstat_r+0x1c>
 8006cf2:	6023      	str	r3, [r4, #0]
 8006cf4:	bd38      	pop	{r3, r4, r5, pc}
 8006cf6:	bf00      	nop
 8006cf8:	200009a0 	.word	0x200009a0

08006cfc <_isatty_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d06      	ldr	r5, [pc, #24]	; (8006d18 <_isatty_r+0x1c>)
 8006d00:	2300      	movs	r3, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	4608      	mov	r0, r1
 8006d06:	602b      	str	r3, [r5, #0]
 8006d08:	f000 f820 	bl	8006d4c <_isatty>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_isatty_r+0x1a>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_isatty_r+0x1a>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	200009a0 	.word	0x200009a0

08006d1c <_close>:
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <_close+0xc>)
 8006d1e:	2258      	movs	r2, #88	; 0x58
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	f04f 30ff 	mov.w	r0, #4294967295
 8006d26:	4770      	bx	lr
 8006d28:	200009a0 	.word	0x200009a0

08006d2c <_fstat>:
 8006d2c:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <_fstat+0xc>)
 8006d2e:	2258      	movs	r2, #88	; 0x58
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	f04f 30ff 	mov.w	r0, #4294967295
 8006d36:	4770      	bx	lr
 8006d38:	200009a0 	.word	0x200009a0

08006d3c <_getpid>:
 8006d3c:	4b02      	ldr	r3, [pc, #8]	; (8006d48 <_getpid+0xc>)
 8006d3e:	2258      	movs	r2, #88	; 0x58
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	4770      	bx	lr
 8006d48:	200009a0 	.word	0x200009a0

08006d4c <_isatty>:
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <_isatty+0xc>)
 8006d4e:	2258      	movs	r2, #88	; 0x58
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	2000      	movs	r0, #0
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	200009a0 	.word	0x200009a0

08006d5c <_kill>:
 8006d5c:	4b02      	ldr	r3, [pc, #8]	; (8006d68 <_kill+0xc>)
 8006d5e:	2258      	movs	r2, #88	; 0x58
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295
 8006d66:	4770      	bx	lr
 8006d68:	200009a0 	.word	0x200009a0

08006d6c <_lseek>:
 8006d6c:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <_lseek+0xc>)
 8006d6e:	2258      	movs	r2, #88	; 0x58
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	f04f 30ff 	mov.w	r0, #4294967295
 8006d76:	4770      	bx	lr
 8006d78:	200009a0 	.word	0x200009a0

08006d7c <_read>:
 8006d7c:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <_read+0xc>)
 8006d7e:	2258      	movs	r2, #88	; 0x58
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	f04f 30ff 	mov.w	r0, #4294967295
 8006d86:	4770      	bx	lr
 8006d88:	200009a0 	.word	0x200009a0

08006d8c <_sbrk>:
 8006d8c:	4a04      	ldr	r2, [pc, #16]	; (8006da0 <_sbrk+0x14>)
 8006d8e:	6811      	ldr	r1, [r2, #0]
 8006d90:	4603      	mov	r3, r0
 8006d92:	b909      	cbnz	r1, 8006d98 <_sbrk+0xc>
 8006d94:	4903      	ldr	r1, [pc, #12]	; (8006da4 <_sbrk+0x18>)
 8006d96:	6011      	str	r1, [r2, #0]
 8006d98:	6810      	ldr	r0, [r2, #0]
 8006d9a:	4403      	add	r3, r0
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	4770      	bx	lr
 8006da0:	200009a8 	.word	0x200009a8
 8006da4:	200009ac 	.word	0x200009ac

08006da8 <_write>:
 8006da8:	4b02      	ldr	r3, [pc, #8]	; (8006db4 <_write+0xc>)
 8006daa:	2258      	movs	r2, #88	; 0x58
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	f04f 30ff 	mov.w	r0, #4294967295
 8006db2:	4770      	bx	lr
 8006db4:	200009a0 	.word	0x200009a0

08006db8 <_exit>:
 8006db8:	e7fe      	b.n	8006db8 <_exit>
	...

08006dbc <_init>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_fini>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr
