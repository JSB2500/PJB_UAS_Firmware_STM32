
10_SPDIF_to_DAC+PA+GEN_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b054  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000186c  0800b258  0800b258  0001b258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cac4  0800cac4  0001cac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cacc  0800cacc  0001cacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cad0  0800cad0  0001cad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  20000000  0800cad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004b9c  200001f8  0800cccc  000201f8  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20004d94  0800cccc  00024d94  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026b2a  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b57  00000000  00000000  00046d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00015184  00000000  00000000  0004b8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001810  00000000  00000000  00060a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001798  00000000  00000000  00062240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a7fe  00000000  00000000  000639d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024296  00000000  00000000  0008e1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fb744  00000000  00000000  000b246c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001adbb0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000057bc  00000000  00000000  001adc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001b33bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001b3488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b23c 	.word	0x0800b23c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800b23c 	.word	0x0800b23c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b510      	push	{r4, lr}
 80005f6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <HAL_InitTick+0x40>)
 80005fa:	7818      	ldrb	r0, [r3, #0]
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	fbb3 f3f0 	udiv	r3, r3, r0
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <HAL_InitTick+0x44>)
 8000606:	6810      	ldr	r0, [r2, #0]
 8000608:	fbb0 f0f3 	udiv	r0, r0, r3
 800060c:	f000 f8a0 	bl	8000750 <HAL_SYSTICK_Config>
 8000610:	b968      	cbnz	r0, 800062e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	2c0f      	cmp	r4, #15
 8000614:	d901      	bls.n	800061a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000616:	2001      	movs	r0, #1
 8000618:	e00a      	b.n	8000630 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800061a:	2200      	movs	r2, #0
 800061c:	4621      	mov	r1, r4
 800061e:	f04f 30ff 	mov.w	r0, #4294967295
 8000622:	f000 f851 	bl	80006c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_InitTick+0x48>)
 8000628:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2000      	movs	r0, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800062e:	2001      	movs	r0, #1
}
 8000630:	bd10      	pop	{r4, pc}
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000
 8000638:	20000024 	.word	0x20000024
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_Init>:
{
 8000640:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000642:	2003      	movs	r0, #3
 8000644:	f000 f82e 	bl	80006a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ffd3 	bl	80005f4 <HAL_InitTick>
  HAL_MspInit();
 800064e:	f006 ffc7 	bl	80075e0 <HAL_MspInit>
}
 8000652:	2000      	movs	r0, #0
 8000654:	bd08      	pop	{r3, pc}
	...

08000658 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <HAL_IncTick+0x10>)
 800065a:	6811      	ldr	r1, [r2, #0]
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_IncTick+0x14>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	440b      	add	r3, r1
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000214 	.word	0x20000214
 800066c:	20000000 	.word	0x20000000

08000670 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <HAL_GetTick+0x8>)
 8000672:	6818      	ldr	r0, [r3, #0]
}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000214 	.word	0x20000214

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b538      	push	{r3, r4, r5, lr}
 800067e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000680:	f7ff fff6 	bl	8000670 <HAL_GetTick>
 8000684:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	f1b4 3fff 	cmp.w	r4, #4294967295
 800068a:	d002      	beq.n	8000692 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <HAL_Delay+0x24>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	f7ff ffed 	bl	8000670 <HAL_GetTick>
 8000696:	1b40      	subs	r0, r0, r5
 8000698:	42a0      	cmp	r0, r4
 800069a:	d3fa      	bcc.n	8000692 <HAL_Delay+0x16>
  {
  }
}
 800069c:	bd38      	pop	{r3, r4, r5, pc}
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000

080006a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	4906      	ldr	r1, [pc, #24]	; (80006c0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80006a6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006ac:	041b      	lsls	r3, r3, #16
 80006ae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b0:	0200      	lsls	r0, r0, #8
 80006b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80006b8:	4a02      	ldr	r2, [pc, #8]	; (80006c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006ba:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80006bc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	05fa0000 	.word	0x05fa0000

080006c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <HAL_NVIC_SetPriority+0x60>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d2:	f1c3 0c07 	rsb	ip, r3, #7
 80006d6:	f1bc 0f04 	cmp.w	ip, #4
 80006da:	bf28      	it	cs
 80006dc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e0:	f103 0e04 	add.w	lr, r3, #4
 80006e4:	f1be 0f06 	cmp.w	lr, #6
 80006e8:	d914      	bls.n	8000714 <HAL_NVIC_SetPriority+0x4c>
 80006ea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 3eff 	mov.w	lr, #4294967295
 80006f0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80006f4:	ea21 010c 	bic.w	r1, r1, ip
 80006f8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fa:	fa0e f303 	lsl.w	r3, lr, r3
 80006fe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000702:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000704:	2800      	cmp	r0, #0
 8000706:	db07      	blt.n	8000718 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	0109      	lsls	r1, r1, #4
 800070a:	b2c9      	uxtb	r1, r1
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <HAL_NVIC_SetPriority+0x64>)
 800070e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000710:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000714:	2300      	movs	r3, #0
 8000716:	e7e9      	b.n	80006ec <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	f000 000f 	and.w	r0, r0, #15
 800071c:	0109      	lsls	r1, r1, #4
 800071e:	b2c9      	uxtb	r1, r1
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <HAL_NVIC_SetPriority+0x68>)
 8000722:	5419      	strb	r1, [r3, r0]
 8000724:	e7f4      	b.n	8000710 <HAL_NVIC_SetPriority+0x48>
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00
 800072c:	e000e400 	.word	0xe000e400
 8000730:	e000ed14 	.word	0xe000ed14

08000734 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000734:	2800      	cmp	r0, #0
 8000736:	db07      	blt.n	8000748 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000738:	f000 021f 	and.w	r2, r0, #31
 800073c:	0940      	lsrs	r0, r0, #5
 800073e:	2301      	movs	r3, #1
 8000740:	4093      	lsls	r3, r2
 8000742:	4a02      	ldr	r2, [pc, #8]	; (800074c <HAL_NVIC_EnableIRQ+0x18>)
 8000744:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100

08000750 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	3801      	subs	r0, #1
 8000752:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000756:	d20b      	bcs.n	8000770 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000758:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800075c:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <HAL_SYSTICK_Config+0x24>)
 8000760:	21f0      	movs	r1, #240	; 0xf0
 8000762:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000766:	2000      	movs	r0, #0
 8000768:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	2207      	movs	r2, #7
 800076c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000770:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000778:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800077a:	6805      	ldr	r5, [r0, #0]
 800077c:	682c      	ldr	r4, [r5, #0]
 800077e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000782:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000784:	6804      	ldr	r4, [r0, #0]
 8000786:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000788:	6883      	ldr	r3, [r0, #8]
 800078a:	2b40      	cmp	r3, #64	; 0x40
 800078c:	d005      	beq.n	800079a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800078e:	6803      	ldr	r3, [r0, #0]
 8000790:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000792:	6803      	ldr	r3, [r0, #0]
 8000794:	60da      	str	r2, [r3, #12]
  }
}
 8000796:	bc30      	pop	{r4, r5}
 8000798:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800079a:	6803      	ldr	r3, [r0, #0]
 800079c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800079e:	6803      	ldr	r3, [r0, #0]
 80007a0:	60d9      	str	r1, [r3, #12]
 80007a2:	e7f8      	b.n	8000796 <DMA_SetConfig+0x1e>

080007a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80007a4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80007a6:	6801      	ldr	r1, [r0, #0]
 80007a8:	b2ca      	uxtb	r2, r1
 80007aa:	3a10      	subs	r2, #16
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <DMA_CalcBaseAndBitshift+0x34>)
 80007ae:	fba3 4302 	umull	r4, r3, r3, r2
 80007b2:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007b4:	4c09      	ldr	r4, [pc, #36]	; (80007dc <DMA_CalcBaseAndBitshift+0x38>)
 80007b6:	5ce3      	ldrb	r3, [r4, r3]
 80007b8:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80007ba:	2a5f      	cmp	r2, #95	; 0x5f
 80007bc:	d907      	bls.n	80007ce <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80007c0:	400b      	ands	r3, r1
 80007c2:	3304      	adds	r3, #4
 80007c4:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80007c6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80007c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007cc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80007d0:	400b      	ands	r3, r1
 80007d2:	6583      	str	r3, [r0, #88]	; 0x58
 80007d4:	e7f7      	b.n	80007c6 <DMA_CalcBaseAndBitshift+0x22>
 80007d6:	bf00      	nop
 80007d8:	aaaaaaab 	.word	0xaaaaaaab
 80007dc:	0800b264 	.word	0x0800b264
 80007e0:	fffffc00 	.word	0xfffffc00

080007e4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80007e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007e6:	6982      	ldr	r2, [r0, #24]
 80007e8:	b992      	cbnz	r2, 8000810 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d00a      	beq.n	8000804 <DMA_CheckFifoParam+0x20>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d002      	beq.n	80007f8 <DMA_CheckFifoParam+0x14>
 80007f2:	b10b      	cbz	r3, 80007f8 <DMA_CheckFifoParam+0x14>
 80007f4:	2000      	movs	r0, #0
 80007f6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80007fe:	d128      	bne.n	8000852 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000800:	2000      	movs	r0, #0
 8000802:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000804:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800080a:	d024      	beq.n	8000856 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800080c:	2000      	movs	r0, #0
 800080e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000810:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000814:	d009      	beq.n	800082a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000816:	2b02      	cmp	r3, #2
 8000818:	d925      	bls.n	8000866 <DMA_CheckFifoParam+0x82>
 800081a:	2b03      	cmp	r3, #3
 800081c:	d125      	bne.n	800086a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800081e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000820:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000824:	d123      	bne.n	800086e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000826:	2000      	movs	r0, #0
 8000828:	4770      	bx	lr
    switch (tmp)
 800082a:	2b03      	cmp	r3, #3
 800082c:	d803      	bhi.n	8000836 <DMA_CheckFifoParam+0x52>
 800082e:	e8df f003 	tbb	[pc, r3]
 8000832:	0414      	.short	0x0414
 8000834:	0a14      	.short	0x0a14
 8000836:	2000      	movs	r0, #0
 8000838:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800083a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800083c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000840:	d10d      	bne.n	800085e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000842:	2000      	movs	r0, #0
 8000844:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000846:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000848:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800084c:	d009      	beq.n	8000862 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800084e:	2000      	movs	r0, #0
 8000850:	4770      	bx	lr
        status = HAL_ERROR;
 8000852:	2001      	movs	r0, #1
 8000854:	4770      	bx	lr
        status = HAL_ERROR;
 8000856:	2001      	movs	r0, #1
 8000858:	4770      	bx	lr
      status = HAL_ERROR;
 800085a:	2001      	movs	r0, #1
 800085c:	4770      	bx	lr
        status = HAL_ERROR;
 800085e:	2001      	movs	r0, #1
 8000860:	4770      	bx	lr
        status = HAL_ERROR;
 8000862:	2001      	movs	r0, #1
 8000864:	4770      	bx	lr
      status = HAL_ERROR;
 8000866:	2001      	movs	r0, #1
 8000868:	4770      	bx	lr
    switch (tmp)
 800086a:	2000      	movs	r0, #0
 800086c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800086e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000870:	4770      	bx	lr
	...

08000874 <HAL_DMA_Init>:
{
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff fefa 	bl	8000670 <HAL_GetTick>
  if(hdma == NULL)
 800087c:	2c00      	cmp	r4, #0
 800087e:	d05b      	beq.n	8000938 <HAL_DMA_Init+0xc4>
 8000880:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8000882:	2300      	movs	r3, #0
 8000884:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000888:	2302      	movs	r3, #2
 800088a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800088e:	6822      	ldr	r2, [r4, #0]
 8000890:	6813      	ldr	r3, [r2, #0]
 8000892:	f023 0301 	bic.w	r3, r3, #1
 8000896:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	f012 0f01 	tst.w	r2, #1
 80008a0:	d00a      	beq.n	80008b8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008a2:	f7ff fee5 	bl	8000670 <HAL_GetTick>
 80008a6:	1b43      	subs	r3, r0, r5
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	d9f5      	bls.n	8000898 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008ac:	2320      	movs	r3, #32
 80008ae:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008b0:	2003      	movs	r0, #3
 80008b2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80008b8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008ba:	4820      	ldr	r0, [pc, #128]	; (800093c <HAL_DMA_Init+0xc8>)
 80008bc:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008be:	6861      	ldr	r1, [r4, #4]
 80008c0:	68a2      	ldr	r2, [r4, #8]
 80008c2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008c6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c8:	6921      	ldr	r1, [r4, #16]
 80008ca:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008cc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ce:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d0:	69a1      	ldr	r1, [r4, #24]
 80008d2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d8:	6a21      	ldr	r1, [r4, #32]
 80008da:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008dc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80008e0:	2904      	cmp	r1, #4
 80008e2:	d01e      	beq.n	8000922 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80008e4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80008e6:	6826      	ldr	r6, [r4, #0]
 80008e8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008ea:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80008ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008f0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d107      	bne.n	8000906 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80008f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008f8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008fc:	b11b      	cbz	r3, 8000906 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008fe:	4620      	mov	r0, r4
 8000900:	f7ff ff70 	bl	80007e4 <DMA_CheckFifoParam>
 8000904:	b990      	cbnz	r0, 800092c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000906:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000908:	4620      	mov	r0, r4
 800090a:	f7ff ff4b 	bl	80007a4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800090e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000910:	233f      	movs	r3, #63	; 0x3f
 8000912:	4093      	lsls	r3, r2
 8000914:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000916:	2000      	movs	r0, #0
 8000918:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800091a:	2301      	movs	r3, #1
 800091c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000920:	e7c9      	b.n	80008b6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000922:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000924:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000926:	4301      	orrs	r1, r0
 8000928:	430a      	orrs	r2, r1
 800092a:	e7db      	b.n	80008e4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000930:	2001      	movs	r0, #1
 8000932:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000936:	e7be      	b.n	80008b6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000938:	2001      	movs	r0, #1
 800093a:	e7bc      	b.n	80008b6 <HAL_DMA_Init+0x42>
 800093c:	e010803f 	.word	0xe010803f

08000940 <HAL_DMA_Start_IT>:
{
 8000940:	b538      	push	{r3, r4, r5, lr}
 8000942:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000944:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000946:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800094a:	2801      	cmp	r0, #1
 800094c:	d030      	beq.n	80009b0 <HAL_DMA_Start_IT+0x70>
 800094e:	2001      	movs	r0, #1
 8000950:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000954:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000958:	b2c0      	uxtb	r0, r0
 800095a:	2801      	cmp	r0, #1
 800095c:	d004      	beq.n	8000968 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800095e:	2300      	movs	r3, #0
 8000960:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8000964:	2002      	movs	r0, #2
}
 8000966:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000968:	2002      	movs	r0, #2
 800096a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800096e:	2000      	movs	r0, #0
 8000970:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000972:	4620      	mov	r0, r4
 8000974:	f7ff ff00 	bl	8000778 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000978:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800097a:	233f      	movs	r3, #63	; 0x3f
 800097c:	4093      	lsls	r3, r2
 800097e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000980:	6822      	ldr	r2, [r4, #0]
 8000982:	6813      	ldr	r3, [r2, #0]
 8000984:	f043 0316 	orr.w	r3, r3, #22
 8000988:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	6953      	ldr	r3, [r2, #20]
 800098e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000992:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000996:	b123      	cbz	r3, 80009a2 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000998:	6822      	ldr	r2, [r4, #0]
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80009a2:	6822      	ldr	r2, [r4, #0]
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009ac:	2000      	movs	r0, #0
 80009ae:	e7da      	b.n	8000966 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80009b0:	2002      	movs	r0, #2
 80009b2:	e7d8      	b.n	8000966 <HAL_DMA_Start_IT+0x26>

080009b4 <HAL_DMA_Abort>:
{
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009b8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80009ba:	f7ff fe59 	bl	8000670 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009be:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d006      	beq.n	80009d6 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80009cc:	2300      	movs	r3, #0
 80009ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80009d2:	2001      	movs	r0, #1
}
 80009d4:	bd70      	pop	{r4, r5, r6, pc}
 80009d6:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009d8:	6822      	ldr	r2, [r4, #0]
 80009da:	6813      	ldr	r3, [r2, #0]
 80009dc:	f023 0316 	bic.w	r3, r3, #22
 80009e0:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009e2:	6822      	ldr	r2, [r4, #0]
 80009e4:	6953      	ldr	r3, [r2, #20]
 80009e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009ea:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009ee:	b1e3      	cbz	r3, 8000a2a <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009f0:	6822      	ldr	r2, [r4, #0]
 80009f2:	6813      	ldr	r3, [r2, #0]
 80009f4:	f023 0308 	bic.w	r3, r3, #8
 80009f8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80009fa:	6822      	ldr	r2, [r4, #0]
 80009fc:	6813      	ldr	r3, [r2, #0]
 80009fe:	f023 0301 	bic.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000a04:	6823      	ldr	r3, [r4, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f013 0f01 	tst.w	r3, #1
 8000a0c:	d011      	beq.n	8000a32 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000a0e:	f7ff fe2f 	bl	8000670 <HAL_GetTick>
 8000a12:	1b43      	subs	r3, r0, r5
 8000a14:	2b05      	cmp	r3, #5
 8000a16:	d9f5      	bls.n	8000a04 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000a22:	2003      	movs	r0, #3
 8000a24:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8000a28:	e7d4      	b.n	80009d4 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000a2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1df      	bne.n	80009f0 <HAL_DMA_Abort+0x3c>
 8000a30:	e7e3      	b.n	80009fa <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a34:	233f      	movs	r3, #63	; 0x3f
 8000a36:	4093      	lsls	r3, r2
 8000a38:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8000a40:	2301      	movs	r3, #1
 8000a42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000a46:	e7c5      	b.n	80009d4 <HAL_DMA_Abort+0x20>

08000a48 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a48:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d003      	beq.n	8000a5a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000a56:	2001      	movs	r0, #1
 8000a58:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000a60:	6802      	ldr	r2, [r0, #0]
 8000a62:	6813      	ldr	r3, [r2, #0]
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000a6a:	2000      	movs	r0, #0
}
 8000a6c:	4770      	bx	lr
	...

08000a70 <HAL_DMA_IRQHandler>:
{
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a72:	b083      	sub	sp, #12
 8000a74:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 8000a7a:	4b72      	ldr	r3, [pc, #456]	; (8000c44 <HAL_DMA_IRQHandler+0x1d4>)
 8000a7c:	681d      	ldr	r5, [r3, #0]
 8000a7e:	4b72      	ldr	r3, [pc, #456]	; (8000c48 <HAL_DMA_IRQHandler+0x1d8>)
 8000a80:	fba3 3505 	umull	r3, r5, r3, r5
 8000a84:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a86:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000a88:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	4093      	lsls	r3, r2
 8000a90:	4233      	tst	r3, r6
 8000a92:	d010      	beq.n	8000ab6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a94:	6803      	ldr	r3, [r0, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	f012 0f04 	tst.w	r2, #4
 8000a9c:	d00b      	beq.n	8000ab6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	f022 0204 	bic.w	r2, r2, #4
 8000aa4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000aa6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	4093      	lsls	r3, r2
 8000aac:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000aae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ab6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ab8:	2301      	movs	r3, #1
 8000aba:	4093      	lsls	r3, r2
 8000abc:	4233      	tst	r3, r6
 8000abe:	d009      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ac0:	6822      	ldr	r2, [r4, #0]
 8000ac2:	6952      	ldr	r2, [r2, #20]
 8000ac4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000ac8:	d004      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000aca:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000acc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	4093      	lsls	r3, r2
 8000ada:	4233      	tst	r3, r6
 8000adc:	d009      	beq.n	8000af2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ade:	6822      	ldr	r2, [r4, #0]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	f012 0f02 	tst.w	r2, #2
 8000ae6:	d004      	beq.n	8000af2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ae8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000aea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000af2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000af4:	2310      	movs	r3, #16
 8000af6:	4093      	lsls	r3, r2
 8000af8:	4233      	tst	r3, r6
 8000afa:	d024      	beq.n	8000b46 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000afc:	6822      	ldr	r2, [r4, #0]
 8000afe:	6812      	ldr	r2, [r2, #0]
 8000b00:	f012 0f08 	tst.w	r2, #8
 8000b04:	d01f      	beq.n	8000b46 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b06:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000b10:	d00d      	beq.n	8000b2e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000b18:	d104      	bne.n	8000b24 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b1c:	b19b      	cbz	r3, 8000b46 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000b1e:	4620      	mov	r0, r4
 8000b20:	4798      	blx	r3
 8000b22:	e010      	b.n	8000b46 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b26:	b173      	cbz	r3, 8000b46 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000b28:	4620      	mov	r0, r4
 8000b2a:	4798      	blx	r3
 8000b2c:	e00b      	b.n	8000b46 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000b34:	d103      	bne.n	8000b3e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	f022 0208 	bic.w	r2, r2, #8
 8000b3c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b40:	b10b      	cbz	r3, 8000b46 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000b42:	4620      	mov	r0, r4
 8000b44:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b46:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b48:	2320      	movs	r3, #32
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	4233      	tst	r3, r6
 8000b4e:	d055      	beq.n	8000bfc <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b50:	6822      	ldr	r2, [r4, #0]
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	f012 0f10 	tst.w	r2, #16
 8000b58:	d050      	beq.n	8000bfc <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b5a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b5c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b05      	cmp	r3, #5
 8000b64:	d00e      	beq.n	8000b84 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000b6e:	d033      	beq.n	8000bd8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000b76:	d12a      	bne.n	8000bce <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000b78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d03e      	beq.n	8000bfc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000b7e:	4620      	mov	r0, r4
 8000b80:	4798      	blx	r3
 8000b82:	e03b      	b.n	8000bfc <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b84:	6822      	ldr	r2, [r4, #0]
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	f023 0316 	bic.w	r3, r3, #22
 8000b8c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b8e:	6822      	ldr	r2, [r4, #0]
 8000b90:	6953      	ldr	r3, [r2, #20]
 8000b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b96:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b9a:	b1a3      	cbz	r3, 8000bc6 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b9c:	6822      	ldr	r2, [r4, #0]
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	f023 0308 	bic.w	r3, r3, #8
 8000ba4:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ba6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ba8:	233f      	movs	r3, #63	; 0x3f
 8000baa:	4093      	lsls	r3, r2
 8000bac:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000bba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d03f      	beq.n	8000c40 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	4798      	blx	r3
        return;
 8000bc4:	e03c      	b.n	8000c40 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1e7      	bne.n	8000b9c <HAL_DMA_IRQHandler+0x12c>
 8000bcc:	e7eb      	b.n	8000ba6 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000bce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000bd0:	b1a3      	cbz	r3, 8000bfc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	4798      	blx	r3
 8000bd6:	e011      	b.n	8000bfc <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000bde:	d109      	bne.n	8000bf4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	f022 0210 	bic.w	r2, r2, #16
 8000be6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8000be8:	2300      	movs	r3, #0
 8000bea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000bf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000bf6:	b10b      	cbz	r3, 8000bfc <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000bfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bfe:	b1fb      	cbz	r3, 8000c40 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c02:	f013 0f01 	tst.w	r3, #1
 8000c06:	d017      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000c0e:	6822      	ldr	r2, [r4, #0]
 8000c10:	6813      	ldr	r3, [r2, #0]
 8000c12:	f023 0301 	bic.w	r3, r3, #1
 8000c16:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000c18:	9b01      	ldr	r3, [sp, #4]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	42ab      	cmp	r3, r5
 8000c20:	d804      	bhi.n	8000c2c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f013 0f01 	tst.w	r3, #1
 8000c2a:	d1f5      	bne.n	8000c18 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000c38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c3a:	b10b      	cbz	r3, 8000c40 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	4798      	blx	r3
}
 8000c40:	b003      	add	sp, #12
 8000c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c44:	20000024 	.word	0x20000024
 8000c48:	1b4e81b5 	.word	0x1b4e81b5

08000c4c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	f200 80e2 	bhi.w	8000e18 <HAL_GPIO_Init+0x1cc>
{
 8000c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	e03a      	b.n	8000cd0 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c5a:	2209      	movs	r2, #9
 8000c5c:	e000      	b.n	8000c60 <HAL_GPIO_Init+0x14>
 8000c5e:	2200      	movs	r2, #0
 8000c60:	40aa      	lsls	r2, r5
 8000c62:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c64:	3402      	adds	r4, #2
 8000c66:	4d6d      	ldr	r5, [pc, #436]	; (8000e1c <HAL_GPIO_Init+0x1d0>)
 8000c68:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c6c:	4a6c      	ldr	r2, [pc, #432]	; (8000e20 <HAL_GPIO_Init+0x1d4>)
 8000c6e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c70:	ea6f 020c 	mvn.w	r2, ip
 8000c74:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c78:	684e      	ldr	r6, [r1, #4]
 8000c7a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000c7e:	d001      	beq.n	8000c84 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000c80:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8000c84:	4c66      	ldr	r4, [pc, #408]	; (8000e20 <HAL_GPIO_Init+0x1d4>)
 8000c86:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000c88:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c8a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c8e:	684e      	ldr	r6, [r1, #4]
 8000c90:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000c94:	d001      	beq.n	8000c9a <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8000c96:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000c9a:	4c61      	ldr	r4, [pc, #388]	; (8000e20 <HAL_GPIO_Init+0x1d4>)
 8000c9c:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c9e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ca0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca4:	684e      	ldr	r6, [r1, #4]
 8000ca6:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000caa:	d001      	beq.n	8000cb0 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8000cac:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000cb0:	4c5b      	ldr	r4, [pc, #364]	; (8000e20 <HAL_GPIO_Init+0x1d4>)
 8000cb2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000cb4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cb6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb8:	684d      	ldr	r5, [r1, #4]
 8000cba:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8000cbe:	d001      	beq.n	8000cc4 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000cc0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8000cc4:	4c56      	ldr	r4, [pc, #344]	; (8000e20 <HAL_GPIO_Init+0x1d4>)
 8000cc6:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cc8:	3301      	adds	r3, #1
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	f200 80a2 	bhi.w	8000e14 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd4:	680c      	ldr	r4, [r1, #0]
 8000cd6:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000cda:	ea32 0404 	bics.w	r4, r2, r4
 8000cde:	d1f3      	bne.n	8000cc8 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce0:	684c      	ldr	r4, [r1, #4]
 8000ce2:	2c12      	cmp	r4, #18
 8000ce4:	bf18      	it	ne
 8000ce6:	2c02      	cmpne	r4, #2
 8000ce8:	d110      	bne.n	8000d0c <HAL_GPIO_Init+0xc0>
        temp = GPIOx->AFR[position >> 3];
 8000cea:	08dd      	lsrs	r5, r3, #3
 8000cec:	3508      	adds	r5, #8
 8000cee:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cf2:	f003 0407 	and.w	r4, r3, #7
 8000cf6:	00a6      	lsls	r6, r4, #2
 8000cf8:	240f      	movs	r4, #15
 8000cfa:	40b4      	lsls	r4, r6
 8000cfc:	ea27 0e04 	bic.w	lr, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d00:	690c      	ldr	r4, [r1, #16]
 8000d02:	40b4      	lsls	r4, r6
 8000d04:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000d08:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000d0c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d0e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000d12:	2403      	movs	r4, #3
 8000d14:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d18:	43e5      	mvns	r5, r4
 8000d1a:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d1e:	684c      	ldr	r4, [r1, #4]
 8000d20:	f004 0403 	and.w	r4, r4, #3
 8000d24:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d28:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8000d2a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2c:	684c      	ldr	r4, [r1, #4]
 8000d2e:	1e66      	subs	r6, r4, #1
 8000d30:	2c11      	cmp	r4, #17
 8000d32:	bf18      	it	ne
 8000d34:	2e01      	cmpne	r6, #1
 8000d36:	d901      	bls.n	8000d3c <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d38:	2c12      	cmp	r4, #18
 8000d3a:	d10f      	bne.n	8000d5c <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000d3c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d3e:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d40:	68cc      	ldr	r4, [r1, #12]
 8000d42:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d46:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000d48:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d4a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4c:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d50:	684c      	ldr	r4, [r1, #4]
 8000d52:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000d56:	409c      	lsls	r4, r3
 8000d58:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000d5a:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d5c:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d5e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d60:	688a      	ldr	r2, [r1, #8]
 8000d62:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d66:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000d68:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6a:	684a      	ldr	r2, [r1, #4]
 8000d6c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000d70:	d0aa      	beq.n	8000cc8 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4a2c      	ldr	r2, [pc, #176]	; (8000e24 <HAL_GPIO_Init+0x1d8>)
 8000d74:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000d76:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000d7a:	6454      	str	r4, [r2, #68]	; 0x44
 8000d7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000d7e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d82:	9201      	str	r2, [sp, #4]
 8000d84:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d86:	089c      	lsrs	r4, r3, #2
 8000d88:	1ca5      	adds	r5, r4, #2
 8000d8a:	4a24      	ldr	r2, [pc, #144]	; (8000e1c <HAL_GPIO_Init+0x1d0>)
 8000d8c:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d90:	f003 0203 	and.w	r2, r3, #3
 8000d94:	0095      	lsls	r5, r2, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	40aa      	lsls	r2, r5
 8000d9a:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d9e:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <HAL_GPIO_Init+0x1dc>)
 8000da0:	4290      	cmp	r0, r2
 8000da2:	f43f af5c 	beq.w	8000c5e <HAL_GPIO_Init+0x12>
 8000da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000daa:	4290      	cmp	r0, r2
 8000dac:	d022      	beq.n	8000df4 <HAL_GPIO_Init+0x1a8>
 8000dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000db2:	4290      	cmp	r0, r2
 8000db4:	d020      	beq.n	8000df8 <HAL_GPIO_Init+0x1ac>
 8000db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dba:	4290      	cmp	r0, r2
 8000dbc:	d01e      	beq.n	8000dfc <HAL_GPIO_Init+0x1b0>
 8000dbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dc2:	4290      	cmp	r0, r2
 8000dc4:	d01c      	beq.n	8000e00 <HAL_GPIO_Init+0x1b4>
 8000dc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dca:	4290      	cmp	r0, r2
 8000dcc:	d01a      	beq.n	8000e04 <HAL_GPIO_Init+0x1b8>
 8000dce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dd2:	4290      	cmp	r0, r2
 8000dd4:	d018      	beq.n	8000e08 <HAL_GPIO_Init+0x1bc>
 8000dd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	d016      	beq.n	8000e0c <HAL_GPIO_Init+0x1c0>
 8000dde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d014      	beq.n	8000e10 <HAL_GPIO_Init+0x1c4>
 8000de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f43f af35 	beq.w	8000c5a <HAL_GPIO_Init+0xe>
 8000df0:	220a      	movs	r2, #10
 8000df2:	e735      	b.n	8000c60 <HAL_GPIO_Init+0x14>
 8000df4:	2201      	movs	r2, #1
 8000df6:	e733      	b.n	8000c60 <HAL_GPIO_Init+0x14>
 8000df8:	2202      	movs	r2, #2
 8000dfa:	e731      	b.n	8000c60 <HAL_GPIO_Init+0x14>
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	e72f      	b.n	8000c60 <HAL_GPIO_Init+0x14>
 8000e00:	2204      	movs	r2, #4
 8000e02:	e72d      	b.n	8000c60 <HAL_GPIO_Init+0x14>
 8000e04:	2205      	movs	r2, #5
 8000e06:	e72b      	b.n	8000c60 <HAL_GPIO_Init+0x14>
 8000e08:	2206      	movs	r2, #6
 8000e0a:	e729      	b.n	8000c60 <HAL_GPIO_Init+0x14>
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	e727      	b.n	8000c60 <HAL_GPIO_Init+0x14>
 8000e10:	2208      	movs	r2, #8
 8000e12:	e725      	b.n	8000c60 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000e14:	b003      	add	sp, #12
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40013800 	.word	0x40013800
 8000e20:	40013c00 	.word	0x40013c00
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e2c:	6903      	ldr	r3, [r0, #16]
 8000e2e:	4219      	tst	r1, r3
 8000e30:	d001      	beq.n	8000e36 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000e32:	2001      	movs	r0, #1
 8000e34:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e36:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000e38:	4770      	bx	lr

08000e3a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e3a:	b10a      	cbz	r2, 8000e40 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e3c:	6181      	str	r1, [r0, #24]
 8000e3e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e40:	0409      	lsls	r1, r1, #16
 8000e42:	6181      	str	r1, [r0, #24]
  }
}
 8000e44:	4770      	bx	lr

08000e46 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000e46:	6943      	ldr	r3, [r0, #20]
 8000e48:	ea31 0303 	bics.w	r3, r1, r3
 8000e4c:	d001      	beq.n	8000e52 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e4e:	6181      	str	r1, [r0, #24]
  }
}
 8000e50:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e52:	0409      	lsls	r1, r1, #16
 8000e54:	6181      	str	r1, [r0, #24]
 8000e56:	4770      	bx	lr

08000e58 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e58:	4770      	bx	lr
	...

08000e5c <HAL_GPIO_EXTI_IRQHandler>:
{
 8000e5c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4203      	tst	r3, r0
 8000e64:	d100      	bne.n	8000e68 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8000e66:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e68:	4b02      	ldr	r3, [pc, #8]	; (8000e74 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e6a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e6c:	f7ff fff4 	bl	8000e58 <HAL_GPIO_EXTI_Callback>
}
 8000e70:	e7f9      	b.n	8000e66 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000e72:	bf00      	nop
 8000e74:	40013c00 	.word	0x40013c00

08000e78 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e78:	6803      	ldr	r3, [r0, #0]
 8000e7a:	699a      	ldr	r2, [r3, #24]
 8000e7c:	f012 0f02 	tst.w	r2, #2
 8000e80:	d001      	beq.n	8000e86 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000e82:	2200      	movs	r2, #0
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e86:	6803      	ldr	r3, [r0, #0]
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	f012 0f01 	tst.w	r2, #1
 8000e8e:	d103      	bne.n	8000e98 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	f042 0201 	orr.w	r2, r2, #1
 8000e96:	619a      	str	r2, [r3, #24]
  }
}
 8000e98:	4770      	bx	lr

08000e9a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000e9a:	b430      	push	{r4, r5}
 8000e9c:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000e9e:	6804      	ldr	r4, [r0, #0]
 8000ea0:	6860      	ldr	r0, [r4, #4]
 8000ea2:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 8000ea6:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 8000eaa:	f04c 7c7f 	orr.w	ip, ip, #66846720	; 0x3fc0000
 8000eae:	f44c 3c58 	orr.w	ip, ip, #221184	; 0x36000
 8000eb2:	f44c 7c7f 	orr.w	ip, ip, #1020	; 0x3fc
 8000eb6:	f04c 0c03 	orr.w	ip, ip, #3
 8000eba:	ea20 000c 	bic.w	r0, r0, ip
 8000ebe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000ec2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000ec6:	4319      	orrs	r1, r3
 8000ec8:	4329      	orrs	r1, r5
 8000eca:	4301      	orrs	r1, r0
 8000ecc:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000ece:	bc30      	pop	{r4, r5}
 8000ed0:	4770      	bx	lr

08000ed2 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000ed2:	f011 0f01 	tst.w	r1, #1
 8000ed6:	d009      	beq.n	8000eec <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000ed8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000edc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000ee0:	2b28      	cmp	r3, #40	; 0x28
 8000ee2:	d001      	beq.n	8000ee8 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000ee4:	23f2      	movs	r3, #242	; 0xf2
 8000ee6:	e002      	b.n	8000eee <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8000ee8:	2342      	movs	r3, #66	; 0x42
 8000eea:	e000      	b.n	8000eee <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8000eec:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000eee:	f011 0f02 	tst.w	r1, #2
 8000ef2:	d009      	beq.n	8000f08 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000ef4:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000ef8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000efc:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000f00:	2a28      	cmp	r2, #40	; 0x28
 8000f02:	d016      	beq.n	8000f32 <I2C_Disable_IRQ+0x60>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000f04:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000f08:	f011 0f04 	tst.w	r1, #4
 8000f0c:	d001      	beq.n	8000f12 <I2C_Disable_IRQ+0x40>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000f0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000f12:	f001 0211 	and.w	r2, r1, #17
 8000f16:	2a11      	cmp	r2, #17
 8000f18:	d00d      	beq.n	8000f36 <I2C_Disable_IRQ+0x64>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000f1a:	f001 0112 	and.w	r1, r1, #18
 8000f1e:	2912      	cmp	r1, #18
 8000f20:	d00c      	beq.n	8000f3c <I2C_Disable_IRQ+0x6a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8000f22:	2912      	cmp	r1, #18
 8000f24:	d00d      	beq.n	8000f42 <I2C_Disable_IRQ+0x70>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000f26:	6801      	ldr	r1, [r0, #0]
 8000f28:	680a      	ldr	r2, [r1, #0]
 8000f2a:	ea22 0303 	bic.w	r3, r2, r3
 8000f2e:	600b      	str	r3, [r1, #0]
}
 8000f30:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000f32:	4663      	mov	r3, ip
 8000f34:	e7e8      	b.n	8000f08 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000f36:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000f3a:	e7ee      	b.n	8000f1a <I2C_Disable_IRQ+0x48>
    tmpisr |= I2C_IT_STOPI;
 8000f3c:	f043 0320 	orr.w	r3, r3, #32
 8000f40:	e7ef      	b.n	8000f22 <I2C_Disable_IRQ+0x50>
    tmpisr |= I2C_IT_TCI;
 8000f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f46:	e7ee      	b.n	8000f26 <I2C_Disable_IRQ+0x54>

08000f48 <I2C_IsAcknowledgeFailed>:
{
 8000f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4a:	4605      	mov	r5, r0
 8000f4c:	460e      	mov	r6, r1
 8000f4e:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f50:	6803      	ldr	r3, [r0, #0]
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f013 0f10 	tst.w	r3, #16
 8000f58:	d101      	bne.n	8000f5e <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8000f5a:	2000      	movs	r0, #0
}
 8000f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000f5e:	682b      	ldr	r3, [r5, #0]
 8000f60:	699c      	ldr	r4, [r3, #24]
 8000f62:	f014 0f20 	tst.w	r4, #32
 8000f66:	d117      	bne.n	8000f98 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8000f68:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000f6c:	d0f7      	beq.n	8000f5e <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f6e:	f7ff fb7f 	bl	8000670 <HAL_GetTick>
 8000f72:	1bc0      	subs	r0, r0, r7
 8000f74:	42b0      	cmp	r0, r6
 8000f76:	d801      	bhi.n	8000f7c <I2C_IsAcknowledgeFailed+0x34>
 8000f78:	2e00      	cmp	r6, #0
 8000f7a:	d1f0      	bne.n	8000f5e <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f7c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000f7e:	f043 0320 	orr.w	r3, r3, #32
 8000f82:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000f84:	2320      	movs	r3, #32
 8000f86:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000f90:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8000f94:	2001      	movs	r0, #1
 8000f96:	e7e1      	b.n	8000f5c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f98:	2210      	movs	r2, #16
 8000f9a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f9c:	682b      	ldr	r3, [r5, #0]
 8000f9e:	2420      	movs	r4, #32
 8000fa0:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	f7ff ff68 	bl	8000e78 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000fa8:	682a      	ldr	r2, [r5, #0]
 8000faa:	6853      	ldr	r3, [r2, #4]
 8000fac:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000fb0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000fb4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000fb8:	f023 0301 	bic.w	r3, r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000fbe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000fc6:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000fd0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	e7c1      	b.n	8000f5c <I2C_IsAcknowledgeFailed+0x14>

08000fd8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
 8000fde:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f013 0f02 	tst.w	r3, #2
 8000fe8:	d11d      	bne.n	8001026 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fea:	4632      	mov	r2, r6
 8000fec:	4629      	mov	r1, r5
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f7ff ffaa 	bl	8000f48 <I2C_IsAcknowledgeFailed>
 8000ff4:	b9c8      	cbnz	r0, 800102a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8000ff6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000ffa:	d0f1      	beq.n	8000fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ffc:	f7ff fb38 	bl	8000670 <HAL_GetTick>
 8001000:	1b80      	subs	r0, r0, r6
 8001002:	42a8      	cmp	r0, r5
 8001004:	d801      	bhi.n	800100a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001006:	2d00      	cmp	r5, #0
 8001008:	d1ea      	bne.n	8000fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800100a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800100c:	f043 0320 	orr.w	r3, r3, #32
 8001010:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001012:	2320      	movs	r3, #32
 8001014:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001018:	2300      	movs	r3, #0
 800101a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800101e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001022:	2001      	movs	r0, #1
 8001024:	e000      	b.n	8001028 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001026:	2000      	movs	r0, #0
}
 8001028:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800102a:	2001      	movs	r0, #1
 800102c:	e7fc      	b.n	8001028 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800102e <I2C_WaitOnFlagUntilTimeout>:
{
 800102e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001032:	4606      	mov	r6, r0
 8001034:	4688      	mov	r8, r1
 8001036:	4617      	mov	r7, r2
 8001038:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800103a:	6834      	ldr	r4, [r6, #0]
 800103c:	69a4      	ldr	r4, [r4, #24]
 800103e:	ea38 0304 	bics.w	r3, r8, r4
 8001042:	bf0c      	ite	eq
 8001044:	f04f 0c01 	moveq.w	ip, #1
 8001048:	f04f 0c00 	movne.w	ip, #0
 800104c:	45bc      	cmp	ip, r7
 800104e:	d118      	bne.n	8001082 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8001050:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001054:	d0f1      	beq.n	800103a <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001056:	f7ff fb0b 	bl	8000670 <HAL_GetTick>
 800105a:	9b06      	ldr	r3, [sp, #24]
 800105c:	1ac0      	subs	r0, r0, r3
 800105e:	42a8      	cmp	r0, r5
 8001060:	d801      	bhi.n	8001066 <I2C_WaitOnFlagUntilTimeout+0x38>
 8001062:	2d00      	cmp	r5, #0
 8001064:	d1e9      	bne.n	800103a <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001066:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800106e:	2320      	movs	r3, #32
 8001070:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001074:	2300      	movs	r3, #0
 8001076:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800107a:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800107e:	2001      	movs	r0, #1
 8001080:	e000      	b.n	8001084 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8001082:	2000      	movs	r0, #0
}
 8001084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001088 <I2C_RequestMemoryWrite>:
{
 8001088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	4604      	mov	r4, r0
 8001090:	4690      	mov	r8, r2
 8001092:	461d      	mov	r5, r3
 8001094:	9e08      	ldr	r6, [sp, #32]
 8001096:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <I2C_RequestMemoryWrite+0x78>)
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a0:	b2ea      	uxtb	r2, r5
 80010a2:	f7ff fefa 	bl	8000e9a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010a6:	463a      	mov	r2, r7
 80010a8:	4631      	mov	r1, r6
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff ff94 	bl	8000fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80010b0:	b9f8      	cbnz	r0, 80010f2 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80010b2:	2d01      	cmp	r5, #1
 80010b4:	d10e      	bne.n	80010d4 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	fa5f f288 	uxtb.w	r2, r8
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80010be:	9700      	str	r7, [sp, #0]
 80010c0:	4633      	mov	r3, r6
 80010c2:	2200      	movs	r2, #0
 80010c4:	2180      	movs	r1, #128	; 0x80
 80010c6:	4620      	mov	r0, r4
 80010c8:	f7ff ffb1 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 80010cc:	b9a8      	cbnz	r0, 80010fa <I2C_RequestMemoryWrite+0x72>
}
 80010ce:	b002      	add	sp, #8
 80010d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010dc:	463a      	mov	r2, r7
 80010de:	4631      	mov	r1, r6
 80010e0:	4620      	mov	r0, r4
 80010e2:	f7ff ff79 	bl	8000fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80010e6:	b930      	cbnz	r0, 80010f6 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	fa5f f288 	uxtb.w	r2, r8
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
 80010f0:	e7e5      	b.n	80010be <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
 80010f4:	e7eb      	b.n	80010ce <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80010f6:	2001      	movs	r0, #1
 80010f8:	e7e9      	b.n	80010ce <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80010fa:	2001      	movs	r0, #1
 80010fc:	e7e7      	b.n	80010ce <I2C_RequestMemoryWrite+0x46>
 80010fe:	bf00      	nop
 8001100:	80002000 	.word	0x80002000

08001104 <I2C_RequestMemoryRead>:
{
 8001104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	4604      	mov	r4, r0
 800110c:	4690      	mov	r8, r2
 800110e:	461d      	mov	r5, r3
 8001110:	9e08      	ldr	r6, [sp, #32]
 8001112:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <I2C_RequestMemoryRead+0x74>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2300      	movs	r3, #0
 800111a:	b2ea      	uxtb	r2, r5
 800111c:	f7ff febd 	bl	8000e9a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001120:	463a      	mov	r2, r7
 8001122:	4631      	mov	r1, r6
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff ff57 	bl	8000fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 800112a:	b9f8      	cbnz	r0, 800116c <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800112c:	2d01      	cmp	r5, #1
 800112e:	d10e      	bne.n	800114e <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	fa5f f288 	uxtb.w	r2, r8
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001138:	9700      	str	r7, [sp, #0]
 800113a:	4633      	mov	r3, r6
 800113c:	2200      	movs	r2, #0
 800113e:	2140      	movs	r1, #64	; 0x40
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff ff74 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 8001146:	b9a8      	cbnz	r0, 8001174 <I2C_RequestMemoryRead+0x70>
}
 8001148:	b002      	add	sp, #8
 800114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001156:	463a      	mov	r2, r7
 8001158:	4631      	mov	r1, r6
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff ff3c 	bl	8000fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001160:	b930      	cbnz	r0, 8001170 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	fa5f f288 	uxtb.w	r2, r8
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
 800116a:	e7e5      	b.n	8001138 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 800116c:	2001      	movs	r0, #1
 800116e:	e7eb      	b.n	8001148 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8001170:	2001      	movs	r0, #1
 8001172:	e7e9      	b.n	8001148 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8001174:	2001      	movs	r0, #1
 8001176:	e7e7      	b.n	8001148 <I2C_RequestMemoryRead+0x44>
 8001178:	80002000 	.word	0x80002000

0800117c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800117c:	b570      	push	{r4, r5, r6, lr}
 800117e:	4605      	mov	r5, r0
 8001180:	460c      	mov	r4, r1
 8001182:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f013 0f20 	tst.w	r3, #32
 800118c:	d11a      	bne.n	80011c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800118e:	4632      	mov	r2, r6
 8001190:	4621      	mov	r1, r4
 8001192:	4628      	mov	r0, r5
 8001194:	f7ff fed8 	bl	8000f48 <I2C_IsAcknowledgeFailed>
 8001198:	b9b0      	cbnz	r0, 80011c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800119a:	f7ff fa69 	bl	8000670 <HAL_GetTick>
 800119e:	1b80      	subs	r0, r0, r6
 80011a0:	42a0      	cmp	r0, r4
 80011a2:	d801      	bhi.n	80011a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80011a4:	2c00      	cmp	r4, #0
 80011a6:	d1ed      	bne.n	8001184 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011a8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011b0:	2320      	movs	r3, #32
 80011b2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80011bc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
}
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80011c4:	2000      	movs	r0, #0
 80011c6:	e7fc      	b.n	80011c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
 80011ca:	e7fa      	b.n	80011c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080011cc <HAL_I2C_Init>:
  if (hi2c == NULL)
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d057      	beq.n	8001280 <HAL_I2C_Init+0xb4>
{
 80011d0:	b510      	push	{r4, lr}
 80011d2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d041      	beq.n	8001260 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80011dc:	2324      	movs	r3, #36	; 0x24
 80011de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80011e2:	6822      	ldr	r2, [r4, #0]
 80011e4:	6813      	ldr	r3, [r2, #0]
 80011e6:	f023 0301 	bic.w	r3, r3, #1
 80011ea:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011ec:	6863      	ldr	r3, [r4, #4]
 80011ee:	6822      	ldr	r2, [r4, #0]
 80011f0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80011f4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011f6:	6822      	ldr	r2, [r4, #0]
 80011f8:	6893      	ldr	r3, [r2, #8]
 80011fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80011fe:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001200:	68e3      	ldr	r3, [r4, #12]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d031      	beq.n	800126a <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001206:	68a3      	ldr	r3, [r4, #8]
 8001208:	6822      	ldr	r2, [r4, #0]
 800120a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800120e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001210:	68e3      	ldr	r3, [r4, #12]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d02f      	beq.n	8001276 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001216:	6822      	ldr	r2, [r4, #0]
 8001218:	6851      	ldr	r1, [r2, #4]
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_I2C_Init+0xb8>)
 800121c:	430b      	orrs	r3, r1
 800121e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001220:	6822      	ldr	r2, [r4, #0]
 8001222:	68d3      	ldr	r3, [r2, #12]
 8001224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001228:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800122a:	6923      	ldr	r3, [r4, #16]
 800122c:	6962      	ldr	r2, [r4, #20]
 800122e:	4313      	orrs	r3, r2
 8001230:	69a1      	ldr	r1, [r4, #24]
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001238:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800123a:	69e3      	ldr	r3, [r4, #28]
 800123c:	6a21      	ldr	r1, [r4, #32]
 800123e:	6822      	ldr	r2, [r4, #0]
 8001240:	430b      	orrs	r3, r1
 8001242:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001244:	6822      	ldr	r2, [r4, #0]
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800124e:	2000      	movs	r0, #0
 8001250:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001252:	2320      	movs	r3, #32
 8001254:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001258:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800125a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800125e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001260:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001264:	f005 fd64 	bl	8006d30 <HAL_I2C_MspInit>
 8001268:	e7b8      	b.n	80011dc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800126a:	68a3      	ldr	r3, [r4, #8]
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001272:	6093      	str	r3, [r2, #8]
 8001274:	e7cc      	b.n	8001210 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	e7ca      	b.n	8001216 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001280:	2001      	movs	r0, #1
}
 8001282:	4770      	bx	lr
 8001284:	02008000 	.word	0x02008000

08001288 <HAL_I2C_Mem_Write>:
{
 8001288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800128c:	b083      	sub	sp, #12
 800128e:	460d      	mov	r5, r1
 8001290:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001294:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001296:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800129a:	b2c9      	uxtb	r1, r1
 800129c:	2920      	cmp	r1, #32
 800129e:	f040 80bc 	bne.w	800141a <HAL_I2C_Mem_Write+0x192>
 80012a2:	4604      	mov	r4, r0
 80012a4:	4690      	mov	r8, r2
 80012a6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80012a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80012aa:	f1ba 0f00 	cmp.w	sl, #0
 80012ae:	bf18      	it	ne
 80012b0:	2b00      	cmpne	r3, #0
 80012b2:	d016      	beq.n	80012e2 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 80012b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	f000 80b2 	beq.w	8001422 <HAL_I2C_Mem_Write+0x19a>
 80012be:	f04f 0b01 	mov.w	fp, #1
 80012c2:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80012c6:	f7ff f9d3 	bl	8000670 <HAL_GetTick>
 80012ca:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012cc:	9000      	str	r0, [sp, #0]
 80012ce:	2319      	movs	r3, #25
 80012d0:	465a      	mov	r2, fp
 80012d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d6:	4620      	mov	r0, r4
 80012d8:	f7ff fea9 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 80012dc:	b130      	cbz	r0, 80012ec <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80012de:	2001      	movs	r0, #1
 80012e0:	e09c      	b.n	800141c <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e6:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	e097      	b.n	800141c <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012ec:	2321      	movs	r3, #33	; 0x21
 80012ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80012fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80012fe:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001300:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001304:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001306:	9601      	str	r6, [sp, #4]
 8001308:	9700      	str	r7, [sp, #0]
 800130a:	464b      	mov	r3, r9
 800130c:	4642      	mov	r2, r8
 800130e:	4629      	mov	r1, r5
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff feb9 	bl	8001088 <I2C_RequestMemoryWrite>
 8001316:	b970      	cbnz	r0, 8001336 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001318:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800131a:	b29b      	uxth	r3, r3
 800131c:	2bff      	cmp	r3, #255	; 0xff
 800131e:	d90f      	bls.n	8001340 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001320:	22ff      	movs	r2, #255	; 0xff
 8001322:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001324:	2300      	movs	r3, #0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800132c:	4629      	mov	r1, r5
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff fdb3 	bl	8000e9a <I2C_TransferConfig>
 8001334:	e021      	b.n	800137a <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8001336:	2300      	movs	r3, #0
 8001338:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800133c:	4658      	mov	r0, fp
 800133e:	e06d      	b.n	800141c <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8001340:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001342:	b292      	uxth	r2, r2
 8001344:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001346:	2300      	movs	r3, #0
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	4629      	mov	r1, r5
 8001352:	4620      	mov	r0, r4
 8001354:	f7ff fda1 	bl	8000e9a <I2C_TransferConfig>
 8001358:	e00f      	b.n	800137a <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800135a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800135c:	b292      	uxth	r2, r2
 800135e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	4629      	mov	r1, r5
 800136c:	4620      	mov	r0, r4
 800136e:	f7ff fd94 	bl	8000e9a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001372:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001374:	b29b      	uxth	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d033      	beq.n	80013e2 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800137a:	4632      	mov	r2, r6
 800137c:	4639      	mov	r1, r7
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff fe2a 	bl	8000fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001384:	2800      	cmp	r0, #0
 8001386:	d14e      	bne.n	8001426 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001388:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001392:	3301      	adds	r3, #1
 8001394:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001396:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001398:	b29b      	uxth	r3, r3
 800139a:	3b01      	subs	r3, #1
 800139c:	b29b      	uxth	r3, r3
 800139e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013a2:	3b01      	subs	r3, #1
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80013aa:	b292      	uxth	r2, r2
 80013ac:	2a00      	cmp	r2, #0
 80013ae:	d0e0      	beq.n	8001372 <HAL_I2C_Mem_Write+0xea>
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1de      	bne.n	8001372 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013b4:	9600      	str	r6, [sp, #0]
 80013b6:	463b      	mov	r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff fe36 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 80013c2:	bb90      	cbnz	r0, 800142a <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	2bff      	cmp	r3, #255	; 0xff
 80013ca:	d9c6      	bls.n	800135a <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013cc:	22ff      	movs	r2, #255	; 0xff
 80013ce:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013d0:	2300      	movs	r3, #0
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d8:	4629      	mov	r1, r5
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff fd5d 	bl	8000e9a <I2C_TransferConfig>
 80013e0:	e7c7      	b.n	8001372 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013e2:	4632      	mov	r2, r6
 80013e4:	4639      	mov	r1, r7
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fec8 	bl	800117c <I2C_WaitOnSTOPFlagUntilTimeout>
 80013ec:	b9f8      	cbnz	r0, 800142e <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	2220      	movs	r2, #32
 80013f2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80013f4:	6821      	ldr	r1, [r4, #0]
 80013f6:	684b      	ldr	r3, [r1, #4]
 80013f8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80013fc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001400:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800140a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001414:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001418:	e000      	b.n	800141c <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800141a:	2002      	movs	r0, #2
}
 800141c:	b003      	add	sp, #12
 800141e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001422:	2002      	movs	r0, #2
 8001424:	e7fa      	b.n	800141c <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8001426:	2001      	movs	r0, #1
 8001428:	e7f8      	b.n	800141c <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
 800142c:	e7f6      	b.n	800141c <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800142e:	2001      	movs	r0, #1
 8001430:	e7f4      	b.n	800141c <HAL_I2C_Mem_Write+0x194>
	...

08001434 <HAL_I2C_Mem_Read>:
{
 8001434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001438:	b083      	sub	sp, #12
 800143a:	460d      	mov	r5, r1
 800143c:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001440:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001442:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001446:	b2c9      	uxtb	r1, r1
 8001448:	2920      	cmp	r1, #32
 800144a:	f040 80bd 	bne.w	80015c8 <HAL_I2C_Mem_Read+0x194>
 800144e:	4604      	mov	r4, r0
 8001450:	4690      	mov	r8, r2
 8001452:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8001454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001456:	f1ba 0f00 	cmp.w	sl, #0
 800145a:	bf18      	it	ne
 800145c:	2b00      	cmpne	r3, #0
 800145e:	d016      	beq.n	800148e <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8001460:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001464:	2b01      	cmp	r3, #1
 8001466:	f000 80b3 	beq.w	80015d0 <HAL_I2C_Mem_Read+0x19c>
 800146a:	f04f 0b01 	mov.w	fp, #1
 800146e:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001472:	f7ff f8fd 	bl	8000670 <HAL_GetTick>
 8001476:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001478:	9000      	str	r0, [sp, #0]
 800147a:	2319      	movs	r3, #25
 800147c:	465a      	mov	r2, fp
 800147e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001482:	4620      	mov	r0, r4
 8001484:	f7ff fdd3 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 8001488:	b130      	cbz	r0, 8001498 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 800148a:	2001      	movs	r0, #1
 800148c:	e09d      	b.n	80015ca <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800148e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001492:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8001494:	2001      	movs	r0, #1
 8001496:	e098      	b.n	80015ca <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001498:	2322      	movs	r3, #34	; 0x22
 800149a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800149e:	2340      	movs	r3, #64	; 0x40
 80014a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80014a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80014aa:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80014ac:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014b0:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014b2:	9601      	str	r6, [sp, #4]
 80014b4:	9700      	str	r7, [sp, #0]
 80014b6:	464b      	mov	r3, r9
 80014b8:	4642      	mov	r2, r8
 80014ba:	4629      	mov	r1, r5
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff fe21 	bl	8001104 <I2C_RequestMemoryRead>
 80014c2:	b970      	cbnz	r0, 80014e2 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2bff      	cmp	r3, #255	; 0xff
 80014ca:	d90f      	bls.n	80014ec <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014cc:	22ff      	movs	r2, #255	; 0xff
 80014ce:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80014d0:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <HAL_I2C_Mem_Read+0x1ac>)
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d8:	4629      	mov	r1, r5
 80014da:	4620      	mov	r0, r4
 80014dc:	f7ff fcdd 	bl	8000e9a <I2C_TransferConfig>
 80014e0:	e021      	b.n	8001526 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 80014e2:	2300      	movs	r3, #0
 80014e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80014e8:	4658      	mov	r0, fp
 80014ea:	e06e      	b.n	80015ca <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 80014ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014ee:	b292      	uxth	r2, r2
 80014f0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_I2C_Mem_Read+0x1ac>)
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	4629      	mov	r1, r5
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff fccb 	bl	8000e9a <I2C_TransferConfig>
 8001504:	e00f      	b.n	8001526 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8001506:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001508:	b292      	uxth	r2, r2
 800150a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800150c:	2300      	movs	r3, #0
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	4629      	mov	r1, r5
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff fcbe 	bl	8000e9a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800151e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d034      	beq.n	8001590 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001526:	9600      	str	r6, [sp, #0]
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	2104      	movs	r1, #4
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff fd7d 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 8001534:	2800      	cmp	r0, #0
 8001536:	d14d      	bne.n	80015d4 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800153e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001542:	3301      	adds	r3, #1
 8001544:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001546:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001548:	3a01      	subs	r2, #1
 800154a:	b292      	uxth	r2, r2
 800154c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800154e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b01      	subs	r3, #1
 8001554:	b29b      	uxth	r3, r3
 8001556:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001558:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0de      	beq.n	800151e <HAL_I2C_Mem_Read+0xea>
 8001560:	2a00      	cmp	r2, #0
 8001562:	d1dc      	bne.n	800151e <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001564:	9600      	str	r6, [sp, #0]
 8001566:	463b      	mov	r3, r7
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff fd5f 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 8001570:	bb90      	cbnz	r0, 80015d8 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001572:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001574:	b29b      	uxth	r3, r3
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d9c5      	bls.n	8001506 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800157a:	22ff      	movs	r2, #255	; 0xff
 800157c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800157e:	2300      	movs	r3, #0
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001586:	4629      	mov	r1, r5
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff fc86 	bl	8000e9a <I2C_TransferConfig>
 800158e:	e7c6      	b.n	800151e <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001590:	4632      	mov	r2, r6
 8001592:	4639      	mov	r1, r7
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff fdf1 	bl	800117c <I2C_WaitOnSTOPFlagUntilTimeout>
 800159a:	b9f8      	cbnz	r0, 80015dc <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	2220      	movs	r2, #32
 80015a0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80015a2:	6821      	ldr	r1, [r4, #0]
 80015a4:	684b      	ldr	r3, [r1, #4]
 80015a6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80015aa:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80015ae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80015b8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015bc:	2300      	movs	r3, #0
 80015be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80015c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80015c6:	e000      	b.n	80015ca <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 80015c8:	2002      	movs	r0, #2
}
 80015ca:	b003      	add	sp, #12
 80015cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80015d0:	2002      	movs	r0, #2
 80015d2:	e7fa      	b.n	80015ca <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 80015d4:	2001      	movs	r0, #1
 80015d6:	e7f8      	b.n	80015ca <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 80015d8:	2001      	movs	r0, #1
 80015da:	e7f6      	b.n	80015ca <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 80015dc:	2001      	movs	r0, #1
 80015de:	e7f4      	b.n	80015ca <HAL_I2C_Mem_Read+0x196>
 80015e0:	80002400 	.word	0x80002400

080015e4 <HAL_I2C_EV_IRQHandler>:
{
 80015e4:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80015e6:	6803      	ldr	r3, [r0, #0]
 80015e8:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80015ea:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80015ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015ee:	b103      	cbz	r3, 80015f2 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 80015f0:	4798      	blx	r3
}
 80015f2:	bd08      	pop	{r3, pc}

080015f4 <HAL_I2C_SlaveTxCpltCallback>:
}
 80015f4:	4770      	bx	lr

080015f6 <HAL_I2C_SlaveRxCpltCallback>:
}
 80015f6:	4770      	bx	lr

080015f8 <I2C_ITSlaveSeqCplt>:
{
 80015f8:	b510      	push	{r4, lr}
 80015fa:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001602:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b29      	cmp	r3, #41	; 0x29
 800160a:	d005      	beq.n	8001618 <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800160c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b2a      	cmp	r3, #42	; 0x2a
 8001614:	d00f      	beq.n	8001636 <I2C_ITSlaveSeqCplt+0x3e>
}
 8001616:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001618:	2328      	movs	r3, #40	; 0x28
 800161a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800161e:	2321      	movs	r3, #33	; 0x21
 8001620:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001622:	2101      	movs	r1, #1
 8001624:	f7ff fc55 	bl	8000ed2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001628:	2300      	movs	r3, #0
 800162a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff ffe0 	bl	80015f4 <HAL_I2C_SlaveTxCpltCallback>
 8001634:	e7ef      	b.n	8001616 <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001636:	2328      	movs	r3, #40	; 0x28
 8001638:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800163c:	2322      	movs	r3, #34	; 0x22
 800163e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001640:	2102      	movs	r1, #2
 8001642:	f7ff fc46 	bl	8000ed2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001646:	2300      	movs	r3, #0
 8001648:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff ffd2 	bl	80015f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8001652:	e7e0      	b.n	8001616 <I2C_ITSlaveSeqCplt+0x1e>

08001654 <HAL_I2C_AddrCallback>:
}
 8001654:	4770      	bx	lr

08001656 <I2C_ITAddrCplt>:
{
 8001656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001658:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800165a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800165e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001662:	2b28      	cmp	r3, #40	; 0x28
 8001664:	d006      	beq.n	8001674 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001666:	6803      	ldr	r3, [r0, #0]
 8001668:	2208      	movs	r2, #8
 800166a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800166c:	2300      	movs	r3, #0
 800166e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8001672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8001674:	6803      	ldr	r3, [r0, #0]
 8001676:	699e      	ldr	r6, [r3, #24]
 8001678:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800167c:	699a      	ldr	r2, [r3, #24]
 800167e:	0c12      	lsrs	r2, r2, #16
 8001680:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800168a:	68df      	ldr	r7, [r3, #12]
 800168c:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001690:	68c1      	ldr	r1, [r0, #12]
 8001692:	2902      	cmp	r1, #2
 8001694:	d121      	bne.n	80016da <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001696:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 800169a:	f015 0f06 	tst.w	r5, #6
 800169e:	d110      	bne.n	80016c2 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 80016a0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80016a2:	3101      	adds	r1, #1
 80016a4:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80016a6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80016a8:	2902      	cmp	r1, #2
 80016aa:	d1e2      	bne.n	8001672 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 80016ac:	2100      	movs	r1, #0
 80016ae:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016b0:	2008      	movs	r0, #8
 80016b2:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80016b4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016b8:	4631      	mov	r1, r6
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff ffca 	bl	8001654 <HAL_I2C_AddrCallback>
 80016c0:	e7d7      	b.n	8001672 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80016c2:	2104      	movs	r1, #4
 80016c4:	f7ff fc05 	bl	8000ed2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80016c8:	2300      	movs	r3, #0
 80016ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016ce:	463a      	mov	r2, r7
 80016d0:	4631      	mov	r1, r6
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff ffbe 	bl	8001654 <HAL_I2C_AddrCallback>
 80016d8:	e7cb      	b.n	8001672 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80016da:	2104      	movs	r1, #4
 80016dc:	f7ff fbf9 	bl	8000ed2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80016e0:	2300      	movs	r3, #0
 80016e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016e6:	462a      	mov	r2, r5
 80016e8:	4631      	mov	r1, r6
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff ffb2 	bl	8001654 <HAL_I2C_AddrCallback>
 80016f0:	e7bf      	b.n	8001672 <I2C_ITAddrCplt+0x1c>

080016f2 <HAL_I2C_ListenCpltCallback>:
}
 80016f2:	4770      	bx	lr

080016f4 <I2C_ITListenCplt>:
{
 80016f4:	b510      	push	{r4, lr}
 80016f6:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <I2C_ITListenCplt+0x64>)
 80016fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001700:	2220      	movs	r2, #32
 8001702:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001706:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800170a:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800170c:	f011 0f04 	tst.w	r1, #4
 8001710:	d013      	beq.n	800173a <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001712:	6803      	ldr	r3, [r0, #0]
 8001714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001716:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001718:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800171a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800171c:	3301      	adds	r3, #1
 800171e:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001720:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001722:	b153      	cbz	r3, 800173a <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8001724:	3b01      	subs	r3, #1
 8001726:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8001728:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	3b01      	subs	r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001732:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800173a:	2107      	movs	r1, #7
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff fbc8 	bl	8000ed2 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	2210      	movs	r2, #16
 8001746:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001748:	2300      	movs	r3, #0
 800174a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff ffcf 	bl	80016f2 <HAL_I2C_ListenCpltCallback>
}
 8001754:	bd10      	pop	{r4, pc}
 8001756:	bf00      	nop
 8001758:	ffff0000 	.word	0xffff0000

0800175c <HAL_I2C_ErrorCallback>:
}
 800175c:	4770      	bx	lr

0800175e <HAL_I2C_AbortCpltCallback>:
}
 800175e:	4770      	bx	lr

08001760 <I2C_ITError>:
{
 8001760:	b510      	push	{r4, lr}
 8001762:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001764:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001768:	2000      	movs	r0, #0
 800176a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800176e:	4a36      	ldr	r2, [pc, #216]	; (8001848 <I2C_ITError+0xe8>)
 8001770:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001772:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001774:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001776:	430a      	orrs	r2, r1
 8001778:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800177a:	3b28      	subs	r3, #40	; 0x28
 800177c:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800177e:	2b02      	cmp	r3, #2
 8001780:	d824      	bhi.n	80017cc <I2C_ITError+0x6c>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001782:	2103      	movs	r1, #3
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fba4 	bl	8000ed2 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800178a:	2328      	movs	r3, #40	; 0x28
 800178c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001790:	2300      	movs	r3, #0
 8001792:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <I2C_ITError+0xec>)
 8001796:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80017a0:	d024      	beq.n	80017ec <I2C_ITError+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017a8:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80017aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d03f      	beq.n	8001830 <I2C_ITError+0xd0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <I2C_ITError+0xf0>)
 80017b2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80017b4:	2300      	movs	r3, #0
 80017b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80017ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017bc:	f7ff f944 	bl	8000a48 <HAL_DMA_Abort_IT>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d035      	beq.n	8001830 <I2C_ITError+0xd0>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80017c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017c6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80017c8:	4798      	blx	r3
 80017ca:	e031      	b.n	8001830 <I2C_ITError+0xd0>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80017cc:	2107      	movs	r1, #7
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff fb7f 	bl	8000ed2 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80017d4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b60      	cmp	r3, #96	; 0x60
 80017dc:	d002      	beq.n	80017e4 <I2C_ITError+0x84>
      hi2c->State         = HAL_I2C_STATE_READY;
 80017de:	2320      	movs	r3, #32
 80017e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80017e8:	6363      	str	r3, [r4, #52]	; 0x34
 80017ea:	e7d5      	b.n	8001798 <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80017f2:	d012      	beq.n	800181a <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017fa:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80017fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017fe:	b1bb      	cbz	r3, 8001830 <I2C_ITError+0xd0>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001800:	4a13      	ldr	r2, [pc, #76]	; (8001850 <I2C_ITError+0xf0>)
 8001802:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8001804:	2300      	movs	r3, #0
 8001806:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800180a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800180c:	f7ff f91c 	bl	8000a48 <HAL_DMA_Abort_IT>
 8001810:	b170      	cbz	r0, 8001830 <I2C_ITError+0xd0>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001812:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001814:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001816:	4798      	blx	r3
 8001818:	e00a      	b.n	8001830 <I2C_ITError+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800181a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b60      	cmp	r3, #96	; 0x60
 8001822:	d006      	beq.n	8001832 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8001824:	2300      	movs	r3, #0
 8001826:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800182a:	4620      	mov	r0, r4
 800182c:	f7ff ff96 	bl	800175c <HAL_I2C_ErrorCallback>
}
 8001830:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001832:	2320      	movs	r3, #32
 8001834:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001838:	2300      	movs	r3, #0
 800183a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff ff8d 	bl	800175e <HAL_I2C_AbortCpltCallback>
 8001844:	e7f4      	b.n	8001830 <I2C_ITError+0xd0>
 8001846:	bf00      	nop
 8001848:	ffff0000 	.word	0xffff0000
 800184c:	08001975 	.word	0x08001975
 8001850:	08001b31 	.word	0x08001b31

08001854 <I2C_ITSlaveCplt>:
{
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	4604      	mov	r4, r0
 8001858:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800185a:	6803      	ldr	r3, [r0, #0]
 800185c:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185e:	2220      	movs	r2, #32
 8001860:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001862:	2107      	movs	r1, #7
 8001864:	f7ff fb35 	bl	8000ed2 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001868:	6822      	ldr	r2, [r4, #0]
 800186a:	6853      	ldr	r3, [r2, #4]
 800186c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001870:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8001872:	6822      	ldr	r2, [r4, #0]
 8001874:	6853      	ldr	r3, [r2, #4]
 8001876:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800187a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800187e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff faf5 	bl	8000e78 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800188e:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8001892:	d03b      	beq.n	800190c <I2C_ITSlaveCplt+0xb8>
    if (hi2c->hdmatx != NULL)
 8001894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001896:	b11b      	cbz	r3, 80018a0 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	b29b      	uxth	r3, r3
 800189e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80018a0:	f015 0f04 	tst.w	r5, #4
 80018a4:	d011      	beq.n	80018ca <I2C_ITSlaveCplt+0x76>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80018a6:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80018b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018b4:	3301      	adds	r3, #1
 80018b6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80018b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018ba:	b133      	cbz	r3, 80018ca <I2C_ITSlaveCplt+0x76>
      hi2c->XferSize--;
 80018bc:	3b01      	subs	r3, #1
 80018be:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80018c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80018ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b11b      	cbz	r3, 80018d8 <I2C_ITSlaveCplt+0x84>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d8:	2300      	movs	r3, #0
 80018da:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80018e0:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018e4:	b9eb      	cbnz	r3, 8001922 <I2C_ITSlaveCplt+0xce>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80018e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018ec:	d127      	bne.n	800193e <I2C_ITSlaveCplt+0xea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018ee:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b22      	cmp	r3, #34	; 0x22
 80018f6:	d031      	beq.n	800195c <I2C_ITSlaveCplt+0x108>
    hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	2320      	movs	r3, #32
 80018fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80018fe:	2300      	movs	r3, #0
 8001900:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001904:	4620      	mov	r0, r4
 8001906:	f7ff fe75 	bl	80015f4 <HAL_I2C_SlaveTxCpltCallback>
}
 800190a:	e026      	b.n	800195a <I2C_ITSlaveCplt+0x106>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800190c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8001910:	d0c6      	beq.n	80018a0 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8001912:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0c3      	beq.n	80018a0 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	b29b      	uxth	r3, r3
 800191e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001920:	e7be      	b.n	80018a0 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001922:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001924:	4620      	mov	r0, r4
 8001926:	f7ff ff1b 	bl	8001760 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800192a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b28      	cmp	r3, #40	; 0x28
 8001932:	d112      	bne.n	800195a <I2C_ITSlaveCplt+0x106>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001934:	4629      	mov	r1, r5
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff fedc 	bl	80016f4 <I2C_ITListenCplt>
 800193c:	e00d      	b.n	800195a <I2C_ITSlaveCplt+0x106>
    I2C_ITSlaveSeqCplt(hi2c);
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff fe5a 	bl	80015f8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <I2C_ITSlaveCplt+0x11c>)
 8001946:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001948:	2320      	movs	r3, #32
 800194a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800194e:	2300      	movs	r3, #0
 8001950:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fecc 	bl	80016f2 <HAL_I2C_ListenCpltCallback>
}
 800195a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800195c:	2320      	movs	r3, #32
 800195e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001962:	2300      	movs	r3, #0
 8001964:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff fe44 	bl	80015f6 <HAL_I2C_SlaveRxCpltCallback>
 800196e:	e7f4      	b.n	800195a <I2C_ITSlaveCplt+0x106>
 8001970:	ffff0000 	.word	0xffff0000

08001974 <I2C_Slave_ISR_IT>:
{
 8001974:	b570      	push	{r4, r5, r6, lr}
 8001976:	4616      	mov	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 8001978:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800197a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800197e:	2b01      	cmp	r3, #1
 8001980:	f000 809f 	beq.w	8001ac2 <I2C_Slave_ISR_IT+0x14e>
 8001984:	4604      	mov	r4, r0
 8001986:	460d      	mov	r5, r1
 8001988:	2301      	movs	r3, #1
 800198a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800198e:	f011 0f10 	tst.w	r1, #16
 8001992:	d03f      	beq.n	8001a14 <I2C_Slave_ISR_IT+0xa0>
 8001994:	f016 0f10 	tst.w	r6, #16
 8001998:	d03c      	beq.n	8001a14 <I2C_Slave_ISR_IT+0xa0>
    if (hi2c->XferCount == 0U)
 800199a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800199c:	b29b      	uxth	r3, r3
 800199e:	bb4b      	cbnz	r3, 80019f4 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80019a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b28      	cmp	r3, #40	; 0x28
 80019a8:	d011      	beq.n	80019ce <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80019aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b29      	cmp	r3, #41	; 0x29
 80019b2:	d012      	beq.n	80019da <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	2210      	movs	r2, #16
 80019b8:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80019ba:	f015 0f20 	tst.w	r5, #32
 80019be:	d002      	beq.n	80019c6 <I2C_Slave_ISR_IT+0x52>
 80019c0:	f016 0f20 	tst.w	r6, #32
 80019c4:	d178      	bne.n	8001ab8 <I2C_Slave_ISR_IT+0x144>
  __HAL_UNLOCK(hi2c);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80019cc:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80019ce:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80019d2:	d1ea      	bne.n	80019aa <I2C_Slave_ISR_IT+0x36>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80019d4:	f7ff fe8e 	bl	80016f4 <I2C_ITListenCplt>
 80019d8:	e7ef      	b.n	80019ba <I2C_Slave_ISR_IT+0x46>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80019da:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80019de:	d0e9      	beq.n	80019b4 <I2C_Slave_ISR_IT+0x40>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	2210      	movs	r2, #16
 80019e4:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 80019e6:	4620      	mov	r0, r4
 80019e8:	f7ff fa46 	bl	8000e78 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff fe03 	bl	80015f8 <I2C_ITSlaveSeqCplt>
 80019f2:	e7e2      	b.n	80019ba <I2C_Slave_ISR_IT+0x46>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f4:	6803      	ldr	r3, [r0, #0]
 80019f6:	2110      	movs	r1, #16
 80019f8:	61d9      	str	r1, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a02:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8001a06:	bf18      	it	ne
 8001a08:	2a00      	cmpne	r2, #0
 8001a0a:	d1d6      	bne.n	80019ba <I2C_Slave_ISR_IT+0x46>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a0c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001a0e:	f7ff fea7 	bl	8001760 <I2C_ITError>
 8001a12:	e7d2      	b.n	80019ba <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001a14:	f015 0f04 	tst.w	r5, #4
 8001a18:	d021      	beq.n	8001a5e <I2C_Slave_ISR_IT+0xea>
 8001a1a:	f016 0f04 	tst.w	r6, #4
 8001a1e:	d01e      	beq.n	8001a5e <I2C_Slave_ISR_IT+0xea>
    if (hi2c->XferCount > 0U)
 8001a20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b183      	cbz	r3, 8001a48 <I2C_Slave_ISR_IT+0xd4>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8001a26:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a30:	7019      	strb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001a38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001a3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001a48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1b4      	bne.n	80019ba <I2C_Slave_ISR_IT+0x46>
 8001a50:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001a54:	d0b1      	beq.n	80019ba <I2C_Slave_ISR_IT+0x46>
      I2C_ITSlaveSeqCplt(hi2c);
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff fdce 	bl	80015f8 <I2C_ITSlaveSeqCplt>
 8001a5c:	e7ad      	b.n	80019ba <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001a5e:	f015 0f08 	tst.w	r5, #8
 8001a62:	d002      	beq.n	8001a6a <I2C_Slave_ISR_IT+0xf6>
 8001a64:	f016 0f08 	tst.w	r6, #8
 8001a68:	d118      	bne.n	8001a9c <I2C_Slave_ISR_IT+0x128>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001a6a:	f015 0f02 	tst.w	r5, #2
 8001a6e:	d0a4      	beq.n	80019ba <I2C_Slave_ISR_IT+0x46>
 8001a70:	f016 0f02 	tst.w	r6, #2
 8001a74:	d0a1      	beq.n	80019ba <I2C_Slave_ISR_IT+0x46>
    if (hi2c->XferCount > 0U)
 8001a76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b1a3      	cbz	r3, 8001aa6 <I2C_Slave_ISR_IT+0x132>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	7812      	ldrb	r2, [r2, #0]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a86:	3301      	adds	r3, #1
 8001a88:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001a8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001a94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a96:	3b01      	subs	r3, #1
 8001a98:	8523      	strh	r3, [r4, #40]	; 0x28
 8001a9a:	e78e      	b.n	80019ba <I2C_Slave_ISR_IT+0x46>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff fdd9 	bl	8001656 <I2C_ITAddrCplt>
 8001aa4:	e789      	b.n	80019ba <I2C_Slave_ISR_IT+0x46>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	bf18      	it	ne
 8001aaa:	f1b2 7f80 	cmpne.w	r2, #16777216	; 0x1000000
 8001aae:	d184      	bne.n	80019ba <I2C_Slave_ISR_IT+0x46>
        I2C_ITSlaveSeqCplt(hi2c);
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7ff fda1 	bl	80015f8 <I2C_ITSlaveSeqCplt>
 8001ab6:	e780      	b.n	80019ba <I2C_Slave_ISR_IT+0x46>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff feca 	bl	8001854 <I2C_ITSlaveCplt>
 8001ac0:	e781      	b.n	80019c6 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	e782      	b.n	80019cc <I2C_Slave_ISR_IT+0x58>

08001ac6 <HAL_I2C_ER_IRQHandler>:
{
 8001ac6:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ac8:	6802      	ldr	r2, [r0, #0]
 8001aca:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001acc:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ace:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ad2:	d009      	beq.n	8001ae8 <HAL_I2C_ER_IRQHandler+0x22>
 8001ad4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ad8:	d006      	beq.n	8001ae8 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001ada:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001adc:	f044 0401 	orr.w	r4, r4, #1
 8001ae0:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ae2:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001ae6:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ae8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001aec:	d00a      	beq.n	8001b04 <HAL_I2C_ER_IRQHandler+0x3e>
 8001aee:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001af2:	d007      	beq.n	8001b04 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001af4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001af6:	f042 0208 	orr.w	r2, r2, #8
 8001afa:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001afc:	6802      	ldr	r2, [r0, #0]
 8001afe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001b02:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b04:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001b08:	d00a      	beq.n	8001b20 <HAL_I2C_ER_IRQHandler+0x5a>
 8001b0a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b0e:	d007      	beq.n	8001b20 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001b10:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001b12:	f043 0302 	orr.w	r3, r3, #2
 8001b16:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b18:	6803      	ldr	r3, [r0, #0]
 8001b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1e:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001b20:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001b22:	f011 0f0b 	tst.w	r1, #11
 8001b26:	d100      	bne.n	8001b2a <HAL_I2C_ER_IRQHandler+0x64>
}
 8001b28:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8001b2a:	f7ff fe19 	bl	8001760 <I2C_ITError>
}
 8001b2e:	e7fb      	b.n	8001b28 <HAL_I2C_ER_IRQHandler+0x62>

08001b30 <I2C_DMAAbort>:
{
 8001b30:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001b32:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001b34:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001b36:	2300      	movs	r3, #0
 8001b38:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001b3a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001b3c:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001b3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b60      	cmp	r3, #96	; 0x60
 8001b46:	d002      	beq.n	8001b4e <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 8001b48:	f7ff fe08 	bl	800175c <HAL_I2C_ErrorCallback>
}
 8001b4c:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001b54:	f7ff fe03 	bl	800175e <HAL_I2C_AbortCpltCallback>
 8001b58:	e7f8      	b.n	8001b4c <I2C_DMAAbort+0x1c>

08001b5a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d124      	bne.n	8001bae <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d022      	beq.n	8001bb2 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b72:	2324      	movs	r3, #36	; 0x24
 8001b74:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b78:	6802      	ldr	r2, [r0, #0]
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b82:	6802      	ldr	r2, [r0, #0]
 8001b84:	6813      	ldr	r3, [r2, #0]
 8001b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b8a:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b8c:	6802      	ldr	r2, [r0, #0]
 8001b8e:	6813      	ldr	r3, [r2, #0]
 8001b90:	4319      	orrs	r1, r3
 8001b92:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b94:	6802      	ldr	r2, [r0, #0]
 8001b96:	6813      	ldr	r3, [r2, #0]
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001baa:	4618      	mov	r0, r3
 8001bac:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001bae:	2002      	movs	r0, #2
 8001bb0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001bb2:	2002      	movs	r0, #2
  }
}
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d122      	bne.n	8001c06 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d020      	beq.n	8001c0a <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bce:	2324      	movs	r3, #36	; 0x24
 8001bd0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd4:	6802      	ldr	r2, [r0, #0]
 8001bd6:	6813      	ldr	r3, [r2, #0]
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bde:	6802      	ldr	r2, [r0, #0]
 8001be0:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001be2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001be6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bea:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bec:	6802      	ldr	r2, [r0, #0]
 8001bee:	6813      	ldr	r3, [r2, #0]
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001c02:	4618      	mov	r0, r3
 8001c04:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001c06:	2002      	movs	r0, #2
 8001c08:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001c0a:	2002      	movs	r0, #2
  }
}
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c10:	b510      	push	{r4, lr}
 8001c12:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_PWREx_EnableOverDrive+0x74>)
 8001c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_PWREx_EnableOverDrive+0x78>)
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c32:	f7fe fd1d 	bl	8000670 <HAL_GetTick>
 8001c36:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_PWREx_EnableOverDrive+0x78>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c40:	d108      	bne.n	8001c54 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c42:	f7fe fd15 	bl	8000670 <HAL_GetTick>
 8001c46:	1b00      	subs	r0, r0, r4
 8001c48:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c4c:	d9f4      	bls.n	8001c38 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001c4e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001c50:	b002      	add	sp, #8
 8001c52:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c54:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <HAL_PWREx_EnableOverDrive+0x78>)
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001c5e:	f7fe fd07 	bl	8000670 <HAL_GetTick>
 8001c62:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_PWREx_EnableOverDrive+0x78>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c6c:	d107      	bne.n	8001c7e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c6e:	f7fe fcff 	bl	8000670 <HAL_GetTick>
 8001c72:	1b00      	subs	r0, r0, r4
 8001c74:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c78:	d9f4      	bls.n	8001c64 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	e7e8      	b.n	8001c50 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001c7e:	2000      	movs	r0, #0
 8001c80:	e7e6      	b.n	8001c50 <HAL_PWREx_EnableOverDrive+0x40>
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000

08001c8c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	f000 81da 	beq.w	8002046 <HAL_RCC_OscConfig+0x3ba>
{
 8001c92:	b570      	push	{r4, r5, r6, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c98:	6803      	ldr	r3, [r0, #0]
 8001c9a:	f013 0f01 	tst.w	r3, #1
 8001c9e:	d029      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca0:	4b95      	ldr	r3, [pc, #596]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d01a      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cac:	4b92      	ldr	r3, [pc, #584]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d00f      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb8:	6863      	ldr	r3, [r4, #4]
 8001cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbe:	d040      	beq.n	8001d42 <HAL_RCC_OscConfig+0xb6>
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d154      	bne.n	8001d6e <HAL_RCC_OscConfig+0xe2>
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e039      	b.n	8001d4c <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd8:	4b87      	ldr	r3, [pc, #540]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ce0:	d0ea      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce2:	4b85      	ldr	r3, [pc, #532]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001cea:	d003      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x68>
 8001cec:	6863      	ldr	r3, [r4, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 81ab 	beq.w	800204a <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	f013 0f02 	tst.w	r3, #2
 8001cfa:	d074      	beq.n	8001de6 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfc:	4b7e      	ldr	r3, [pc, #504]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f013 0f0c 	tst.w	r3, #12
 8001d04:	d05e      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d053      	beq.n	8001dba <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d12:	68e3      	ldr	r3, [r4, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8089 	beq.w	8001e2c <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d1a:	4a77      	ldr	r2, [pc, #476]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7fe fca4 	bl	8000670 <HAL_GetTick>
 8001d28:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	4b73      	ldr	r3, [pc, #460]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f013 0f02 	tst.w	r3, #2
 8001d32:	d172      	bne.n	8001e1a <HAL_RCC_OscConfig+0x18e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d34:	f7fe fc9c 	bl	8000670 <HAL_GetTick>
 8001d38:	1b40      	subs	r0, r0, r5
 8001d3a:	2802      	cmp	r0, #2
 8001d3c:	d9f5      	bls.n	8001d2a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001d3e:	2003      	movs	r0, #3
 8001d40:	e188      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d42:	4a6d      	ldr	r2, [pc, #436]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4c:	6863      	ldr	r3, [r4, #4]
 8001d4e:	b32b      	cbz	r3, 8001d9c <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001d50:	f7fe fc8e 	bl	8000670 <HAL_GetTick>
 8001d54:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d5e:	d1c9      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d60:	f7fe fc86 	bl	8000670 <HAL_GetTick>
 8001d64:	1b40      	subs	r0, r0, r5
 8001d66:	2864      	cmp	r0, #100	; 0x64
 8001d68:	d9f5      	bls.n	8001d56 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001d6a:	2003      	movs	r0, #3
 8001d6c:	e172      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d72:	d009      	beq.n	8001d88 <HAL_RCC_OscConfig+0xfc>
 8001d74:	4b60      	ldr	r3, [pc, #384]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e7e1      	b.n	8001d4c <HAL_RCC_OscConfig+0xc0>
 8001d88:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e7d7      	b.n	8001d4c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8001d9c:	f7fe fc68 	bl	8000670 <HAL_GetTick>
 8001da0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	4b55      	ldr	r3, [pc, #340]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001daa:	d0a3      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f7fe fc60 	bl	8000670 <HAL_GetTick>
 8001db0:	1b40      	subs	r0, r0, r5
 8001db2:	2864      	cmp	r0, #100	; 0x64
 8001db4:	d9f5      	bls.n	8001da2 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8001db6:	2003      	movs	r0, #3
 8001db8:	e14c      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dba:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dc2:	d1a6      	bne.n	8001d12 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f013 0f02 	tst.w	r3, #2
 8001dcc:	d003      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x14a>
 8001dce:	68e3      	ldr	r3, [r4, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	f040 813c 	bne.w	800204e <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4a48      	ldr	r2, [pc, #288]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	6813      	ldr	r3, [r2, #0]
 8001dda:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001dde:	6921      	ldr	r1, [r4, #16]
 8001de0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001de4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	f013 0f08 	tst.w	r3, #8
 8001dec:	d046      	beq.n	8001e7c <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dee:	6963      	ldr	r3, [r4, #20]
 8001df0:	b383      	cbz	r3, 8001e54 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4a41      	ldr	r2, [pc, #260]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7fe fc38 	bl	8000670 <HAL_GetTick>
 8001e00:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e06:	f013 0f02 	tst.w	r3, #2
 8001e0a:	d137      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7fe fc30 	bl	8000670 <HAL_GetTick>
 8001e10:	1b40      	subs	r0, r0, r5
 8001e12:	2802      	cmp	r0, #2
 8001e14:	d9f5      	bls.n	8001e02 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8001e16:	2003      	movs	r0, #3
 8001e18:	e11c      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4a37      	ldr	r2, [pc, #220]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e22:	6921      	ldr	r1, [r4, #16]
 8001e24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e7dc      	b.n	8001de6 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8001e2c:	4a32      	ldr	r2, [pc, #200]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	6813      	ldr	r3, [r2, #0]
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e36:	f7fe fc1b 	bl	8000670 <HAL_GetTick>
 8001e3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f013 0f02 	tst.w	r3, #2
 8001e44:	d0cf      	beq.n	8001de6 <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e46:	f7fe fc13 	bl	8000670 <HAL_GetTick>
 8001e4a:	1b40      	subs	r0, r0, r5
 8001e4c:	2802      	cmp	r0, #2
 8001e4e:	d9f5      	bls.n	8001e3c <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8001e50:	2003      	movs	r0, #3
 8001e52:	e0ff      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e54:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5e:	f7fe fc07 	bl	8000670 <HAL_GetTick>
 8001e62:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e68:	f013 0f02 	tst.w	r3, #2
 8001e6c:	d006      	beq.n	8001e7c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7fe fbff 	bl	8000670 <HAL_GetTick>
 8001e72:	1b40      	subs	r0, r0, r5
 8001e74:	2802      	cmp	r0, #2
 8001e76:	d9f5      	bls.n	8001e64 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8001e78:	2003      	movs	r0, #3
 8001e7a:	e0eb      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	f013 0f04 	tst.w	r3, #4
 8001e82:	d07d      	beq.n	8001f80 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e8c:	d11e      	bne.n	8001ecc <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ea2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_RCC_OscConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001eac:	d010      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eae:	68a3      	ldr	r3, [r4, #8]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d025      	beq.n	8001f00 <HAL_RCC_OscConfig+0x274>
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d13b      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2a4>
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	671a      	str	r2, [r3, #112]	; 0x70
 8001ec2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ec4:	f022 0204 	bic.w	r2, r2, #4
 8001ec8:	671a      	str	r2, [r3, #112]	; 0x70
 8001eca:	e01e      	b.n	8001f0a <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8001ecc:	2500      	movs	r5, #0
 8001ece:	e7e9      	b.n	8001ea4 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <HAL_RCC_OscConfig+0x270>)
 8001ed2:	6813      	ldr	r3, [r2, #0]
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001eda:	f7fe fbc9 	bl	8000670 <HAL_GetTick>
 8001ede:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_OscConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ee8:	d1e1      	bne.n	8001eae <HAL_RCC_OscConfig+0x222>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001eea:	f7fe fbc1 	bl	8000670 <HAL_GetTick>
 8001eee:	1b80      	subs	r0, r0, r6
 8001ef0:	2864      	cmp	r0, #100	; 0x64
 8001ef2:	d9f5      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	e0ad      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	4a56      	ldr	r2, [pc, #344]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001f02:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f0a:	68a3      	ldr	r3, [r4, #8]
 8001f0c:	b333      	cbz	r3, 8001f5c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fbaf 	bl	8000670 <HAL_GetTick>
 8001f12:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b51      	ldr	r3, [pc, #324]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	f013 0f02 	tst.w	r3, #2
 8001f1c:	d12f      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe fba7 	bl	8000670 <HAL_GetTick>
 8001f22:	1b80      	subs	r0, r0, r6
 8001f24:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f28:	4298      	cmp	r0, r3
 8001f2a:	d9f3      	bls.n	8001f14 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	e091      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f30:	2b05      	cmp	r3, #5
 8001f32:	d009      	beq.n	8001f48 <HAL_RCC_OscConfig+0x2bc>
 8001f34:	4b49      	ldr	r3, [pc, #292]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001f36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	671a      	str	r2, [r3, #112]	; 0x70
 8001f3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f40:	f022 0204 	bic.w	r2, r2, #4
 8001f44:	671a      	str	r2, [r3, #112]	; 0x70
 8001f46:	e7e0      	b.n	8001f0a <HAL_RCC_OscConfig+0x27e>
 8001f48:	4b44      	ldr	r3, [pc, #272]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f4c:	f042 0204 	orr.w	r2, r2, #4
 8001f50:	671a      	str	r2, [r3, #112]	; 0x70
 8001f52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	671a      	str	r2, [r3, #112]	; 0x70
 8001f5a:	e7d6      	b.n	8001f0a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fb88 	bl	8000670 <HAL_GetTick>
 8001f60:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f62:	4b3e      	ldr	r3, [pc, #248]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f66:	f013 0f02 	tst.w	r3, #2
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6c:	f7fe fb80 	bl	8000670 <HAL_GetTick>
 8001f70:	1b80      	subs	r0, r0, r6
 8001f72:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f76:	4298      	cmp	r0, r3
 8001f78:	d9f3      	bls.n	8001f62 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	e06a      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f7e:	b9f5      	cbnz	r5, 8001fbe <HAL_RCC_OscConfig+0x332>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f80:	69a3      	ldr	r3, [r4, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d065      	beq.n	8002052 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f86:	4a35      	ldr	r2, [pc, #212]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001f88:	6892      	ldr	r2, [r2, #8]
 8001f8a:	f002 020c 	and.w	r2, r2, #12
 8001f8e:	2a08      	cmp	r2, #8
 8001f90:	d062      	beq.n	8002058 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d019      	beq.n	8001fca <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4a31      	ldr	r2, [pc, #196]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fb66 	bl	8000670 <HAL_GetTick>
 8001fa4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001fae:	d048      	beq.n	8002042 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe fb5e 	bl	8000670 <HAL_GetTick>
 8001fb4:	1b00      	subs	r0, r0, r4
 8001fb6:	2802      	cmp	r0, #2
 8001fb8:	d9f5      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001fba:	2003      	movs	r0, #3
 8001fbc:	e04a      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbe:	4a27      	ldr	r2, [pc, #156]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001fc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc8:	e7da      	b.n	8001f80 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4a24      	ldr	r2, [pc, #144]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fb4c 	bl	8000670 <HAL_GetTick>
 8001fd8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001fe2:	d006      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x366>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7fe fb44 	bl	8000670 <HAL_GetTick>
 8001fe8:	1b40      	subs	r0, r0, r5
 8001fea:	2802      	cmp	r0, #2
 8001fec:	d9f5      	bls.n	8001fda <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8001fee:	2003      	movs	r0, #3
 8001ff0:	e030      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff2:	69e3      	ldr	r3, [r4, #28]
 8001ff4:	6a22      	ldr	r2, [r4, #32]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ffa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ffe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002000:	0852      	lsrs	r2, r2, #1
 8002002:	3a01      	subs	r2, #1
 8002004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002008:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800200a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800200e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002010:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002014:	4a11      	ldr	r2, [pc, #68]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8002016:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002018:	6813      	ldr	r3, [r2, #0]
 800201a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002020:	f7fe fb26 	bl	8000670 <HAL_GetTick>
 8002024:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_RCC_OscConfig+0x3d0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe fb1e 	bl	8000670 <HAL_GetTick>
 8002034:	1b00      	subs	r0, r0, r4
 8002036:	2802      	cmp	r0, #2
 8002038:	d9f5      	bls.n	8002026 <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 800203a:	2003      	movs	r0, #3
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800203e:	2000      	movs	r0, #0
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
 8002042:	2000      	movs	r0, #0
 8002044:	e006      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8002046:	2001      	movs	r0, #1
}
 8002048:	4770      	bx	lr
        return HAL_ERROR;
 800204a:	2001      	movs	r0, #1
 800204c:	e002      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 800204e:	2001      	movs	r0, #1
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8002052:	2000      	movs	r0, #0
}
 8002054:	b002      	add	sp, #8
 8002056:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002058:	2001      	movs	r0, #1
 800205a:	e7fb      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
 800205c:	40023800 	.word	0x40023800

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d03f      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x8e>
 800206e:	2b08      	cmp	r3, #8
 8002070:	d13f      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002080:	d012      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002084:	6859      	ldr	r1, [r3, #4]
 8002086:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800208a:	481c      	ldr	r0, [pc, #112]	; (80020fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800208c:	2300      	movs	r3, #0
 800208e:	fba1 0100 	umull	r0, r1, r1, r0
 8002092:	f7fe f92d 	bl	80002f0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80020a2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80020a6:	e025      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80020b0:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80020b4:	ebb1 000c 	subs.w	r0, r1, ip
 80020b8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80020bc:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80020c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020c4:	0181      	lsls	r1, r0, #6
 80020c6:	1a09      	subs	r1, r1, r0
 80020c8:	eb63 030e 	sbc.w	r3, r3, lr
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020d2:	00c9      	lsls	r1, r1, #3
 80020d4:	eb11 0c0c 	adds.w	ip, r1, ip
 80020d8:	f143 0300 	adc.w	r3, r3, #0
 80020dc:	0299      	lsls	r1, r3, #10
 80020de:	2300      	movs	r3, #0
 80020e0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80020e4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80020e8:	f7fe f902 	bl	80002f0 <__aeabi_uldivmod>
 80020ec:	e7d3      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f2:	4803      	ldr	r0, [pc, #12]	; (8002100 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020f4:	bd08      	pop	{r3, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	017d7840 	.word	0x017d7840
 8002100:	00f42400 	.word	0x00f42400

08002104 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002104:	2800      	cmp	r0, #0
 8002106:	f000 809f 	beq.w	8002248 <HAL_RCC_ClockConfig+0x144>
{
 800210a:	b570      	push	{r4, r5, r6, lr}
 800210c:	460d      	mov	r5, r1
 800210e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002110:	4b51      	ldr	r3, [pc, #324]	; (8002258 <HAL_RCC_ClockConfig+0x154>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	428b      	cmp	r3, r1
 800211a:	d20b      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211c:	4a4e      	ldr	r2, [pc, #312]	; (8002258 <HAL_RCC_ClockConfig+0x154>)
 800211e:	6813      	ldr	r3, [r2, #0]
 8002120:	f023 030f 	bic.w	r3, r3, #15
 8002124:	430b      	orrs	r3, r1
 8002126:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002128:	6813      	ldr	r3, [r2, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	428b      	cmp	r3, r1
 8002130:	f040 808c 	bne.w	800224c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	f013 0f02 	tst.w	r3, #2
 800213a:	d017      	beq.n	800216c <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	f013 0f04 	tst.w	r3, #4
 8002140:	d004      	beq.n	800214c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002142:	4a46      	ldr	r2, [pc, #280]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 8002144:	6893      	ldr	r3, [r2, #8]
 8002146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800214a:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	f013 0f08 	tst.w	r3, #8
 8002152:	d004      	beq.n	800215e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002154:	4a41      	ldr	r2, [pc, #260]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 8002156:	6893      	ldr	r3, [r2, #8]
 8002158:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800215c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215e:	4a3f      	ldr	r2, [pc, #252]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 8002160:	6893      	ldr	r3, [r2, #8]
 8002162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002166:	68a1      	ldr	r1, [r4, #8]
 8002168:	430b      	orrs	r3, r1
 800216a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	f013 0f01 	tst.w	r3, #1
 8002172:	d031      	beq.n	80021d8 <HAL_RCC_ClockConfig+0xd4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002174:	6863      	ldr	r3, [r4, #4]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d020      	beq.n	80021bc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217a:	2b02      	cmp	r3, #2
 800217c:	d025      	beq.n	80021ca <HAL_RCC_ClockConfig+0xc6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217e:	4a37      	ldr	r2, [pc, #220]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	f012 0f02 	tst.w	r2, #2
 8002186:	d063      	beq.n	8002250 <HAL_RCC_ClockConfig+0x14c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002188:	4934      	ldr	r1, [pc, #208]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 800218a:	688a      	ldr	r2, [r1, #8]
 800218c:	f022 0203 	bic.w	r2, r2, #3
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002194:	f7fe fa6c 	bl	8000670 <HAL_GetTick>
 8002198:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	6862      	ldr	r2, [r4, #4]
 80021a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021a8:	d016      	beq.n	80021d8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021aa:	f7fe fa61 	bl	8000670 <HAL_GetTick>
 80021ae:	1b80      	subs	r0, r0, r6
 80021b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80021b4:	4298      	cmp	r0, r3
 80021b6:	d9f0      	bls.n	800219a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80021b8:	2003      	movs	r0, #3
 80021ba:	e044      	b.n	8002246 <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80021c4:	d1e0      	bne.n	8002188 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80021c6:	2001      	movs	r0, #1
 80021c8:	e03d      	b.n	8002246 <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4a24      	ldr	r2, [pc, #144]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80021d2:	d1d9      	bne.n	8002188 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80021d4:	2001      	movs	r0, #1
 80021d6:	e036      	b.n	8002246 <HAL_RCC_ClockConfig+0x142>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_RCC_ClockConfig+0x154>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	42ab      	cmp	r3, r5
 80021e2:	d90a      	bls.n	80021fa <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e4:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_RCC_ClockConfig+0x154>)
 80021e6:	6813      	ldr	r3, [r2, #0]
 80021e8:	f023 030f 	bic.w	r3, r3, #15
 80021ec:	432b      	orrs	r3, r5
 80021ee:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f0:	6813      	ldr	r3, [r2, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	42ab      	cmp	r3, r5
 80021f8:	d12c      	bne.n	8002254 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	f013 0f04 	tst.w	r3, #4
 8002200:	d006      	beq.n	8002210 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002202:	4a16      	ldr	r2, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 8002204:	6893      	ldr	r3, [r2, #8]
 8002206:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800220a:	68e1      	ldr	r1, [r4, #12]
 800220c:	430b      	orrs	r3, r1
 800220e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	f013 0f08 	tst.w	r3, #8
 8002216:	d007      	beq.n	8002228 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002218:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 800221a:	6893      	ldr	r3, [r2, #8]
 800221c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002220:	6921      	ldr	r1, [r4, #16]
 8002222:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002226:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002228:	f7ff ff1a 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x15c>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	40d8      	lsrs	r0, r3
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_ClockConfig+0x160>)
 800223c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800223e:	2000      	movs	r0, #0
 8002240:	f7fe f9d8 	bl	80005f4 <HAL_InitTick>
  return HAL_OK;
 8002244:	2000      	movs	r0, #0
}
 8002246:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002248:	2001      	movs	r0, #1
}
 800224a:	4770      	bx	lr
      return HAL_ERROR;
 800224c:	2001      	movs	r0, #1
 800224e:	e7fa      	b.n	8002246 <HAL_RCC_ClockConfig+0x142>
        return HAL_ERROR;
 8002250:	2001      	movs	r0, #1
 8002252:	e7f8      	b.n	8002246 <HAL_RCC_ClockConfig+0x142>
      return HAL_ERROR;
 8002254:	2001      	movs	r0, #1
 8002256:	e7f6      	b.n	8002246 <HAL_RCC_ClockConfig+0x142>
 8002258:	40023c00 	.word	0x40023c00
 800225c:	40023800 	.word	0x40023800
 8002260:	0800c6b8 	.word	0x0800c6b8
 8002264:	20000024 	.word	0x20000024

08002268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	b083      	sub	sp, #12
 800226c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800226e:	6806      	ldr	r6, [r0, #0]
 8002270:	f016 0601 	ands.w	r6, r6, #1
 8002274:	d00d      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002276:	4bb5      	ldr	r3, [pc, #724]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002284:	430a      	orrs	r2, r1
 8002286:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002288:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8155 	beq.w	800253a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 8002290:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002292:	6825      	ldr	r5, [r4, #0]
 8002294:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8002298:	d011      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800229a:	4aac      	ldr	r2, [pc, #688]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800229c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80022a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80022a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80022a6:	430b      	orrs	r3, r1
 80022a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b2:	f000 8144 	beq.w	800253e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8143 	beq.w	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 80022bc:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80022c4:	d00f      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022c6:	4aa1      	ldr	r2, [pc, #644]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022c8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80022cc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80022d2:	430b      	orrs	r3, r1
 80022d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022de:	f000 8132 	beq.w	8002546 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022e2:	b903      	cbnz	r3, 80022e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 80022e4:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80022ec:	d000      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 80022ee:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022f0:	f013 0f20 	tst.w	r3, #32
 80022f4:	f040 812c 	bne.w	8002550 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	f013 0f10 	tst.w	r3, #16
 80022fe:	d00c      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002300:	4b92      	ldr	r3, [pc, #584]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002302:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002306:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800230a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800230e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002312:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002314:	430a      	orrs	r2, r1
 8002316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002320:	d008      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002322:	4a8a      	ldr	r2, [pc, #552]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002324:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002328:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800232c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800232e:	430b      	orrs	r3, r1
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800233a:	d008      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800233c:	4a83      	ldr	r2, [pc, #524]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800233e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002342:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002346:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002348:	430b      	orrs	r3, r1
 800234a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002354:	d008      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002356:	4a7d      	ldr	r2, [pc, #500]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002358:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800235c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002360:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002362:	430b      	orrs	r3, r1
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800236e:	d008      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002370:	4a76      	ldr	r2, [pc, #472]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002372:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002376:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800237a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800237c:	430b      	orrs	r3, r1
 800237e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800238c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002390:	f023 0303 	bic.w	r3, r3, #3
 8002394:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002396:	430b      	orrs	r3, r1
 8002398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	f013 0f80 	tst.w	r3, #128	; 0x80
 80023a2:	d008      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023a4:	4a69      	ldr	r2, [pc, #420]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80023aa:	f023 030c 	bic.w	r3, r3, #12
 80023ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80023b0:	430b      	orrs	r3, r1
 80023b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023bc:	d008      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023be:	4a63      	ldr	r2, [pc, #396]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023c0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80023c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023c8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80023ca:	430b      	orrs	r3, r1
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80023d6:	d008      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023d8:	4a5c      	ldr	r2, [pc, #368]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80023de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023e2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80023e4:	430b      	orrs	r3, r1
 80023e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80023f0:	d008      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023f2:	4a56      	ldr	r2, [pc, #344]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80023f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80023fe:	430b      	orrs	r3, r1
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800240a:	d008      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800240c:	4a4f      	ldr	r2, [pc, #316]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800240e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002412:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002416:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002418:	430b      	orrs	r3, r1
 800241a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002424:	d008      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002426:	4a49      	ldr	r2, [pc, #292]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002428:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800242c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002430:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002432:	430b      	orrs	r3, r1
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800243e:	d008      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002442:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002446:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800244a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800244c:	430b      	orrs	r3, r1
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002458:	d008      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800245a:	4a3c      	ldr	r2, [pc, #240]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800245c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002460:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002464:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002466:	430b      	orrs	r3, r1
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002472:	d00d      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002474:	4a35      	ldr	r2, [pc, #212]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002476:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800247a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800247e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002480:	430b      	orrs	r3, r1
 8002482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002486:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248c:	f000 80c6 	beq.w	800261c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	f013 0f08 	tst.w	r3, #8
 8002496:	d000      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8002498:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800249a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800249e:	d008      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024a0:	4a2a      	ldr	r2, [pc, #168]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024a6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80024aa:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80024ac:	430b      	orrs	r3, r1
 80024ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80024b8:	d009      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80024c8:	430b      	orrs	r3, r1
 80024ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80024d4:	d009      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80024e0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80024e4:	430b      	orrs	r3, r1
 80024e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80024f0:	d009      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024f2:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024f4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80024f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80024fc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8002500:	430b      	orrs	r3, r1
 8002502:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800250c:	d009      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002510:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002514:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002518:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800251c:	430b      	orrs	r3, r1
 800251e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002522:	2e00      	cmp	r6, #0
 8002524:	d17c      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800252c:	d078      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800252e:	2d01      	cmp	r5, #1
 8002530:	f000 8109 	beq.w	8002746 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002534:	2000      	movs	r0, #0
}
 8002536:	b003      	add	sp, #12
 8002538:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1;
 800253a:	2601      	movs	r6, #1
 800253c:	e6a9      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 800253e:	2601      	movs	r6, #1
 8002540:	e6b9      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8002542:	2501      	movs	r5, #1
 8002544:	e6bb      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8002546:	2601      	movs	r6, #1
 8002548:	e6cb      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	4b87      	ldr	r3, [pc, #540]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002554:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002564:	4a83      	ldr	r2, [pc, #524]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002566:	6813      	ldr	r3, [r2, #0]
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800256e:	f7fe f87f 	bl	8000670 <HAL_GetTick>
 8002572:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002574:	4b7f      	ldr	r3, [pc, #508]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f413 7f80 	tst.w	r3, #256	; 0x100
 800257c:	d106      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7fe f877 	bl	8000670 <HAL_GetTick>
 8002582:	1bc0      	subs	r0, r0, r7
 8002584:	2864      	cmp	r0, #100	; 0x64
 8002586:	d9f5      	bls.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8002588:	2003      	movs	r0, #3
 800258a:	e7d4      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800258c:	4b78      	ldr	r3, [pc, #480]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002590:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002594:	d015      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002596:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002598:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800259c:	429a      	cmp	r2, r3
 800259e:	d010      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025a0:	4b73      	ldr	r3, [pc, #460]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80025a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80025a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80025aa:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80025ae:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80025b2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80025b6:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80025b8:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	f013 0f01 	tst.w	r3, #1
 80025c0:	d112      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025c4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80025c8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80025cc:	d01d      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80025ce:	4a68      	ldr	r2, [pc, #416]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80025d0:	6893      	ldr	r3, [r2, #8]
 80025d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025d6:	6093      	str	r3, [r2, #8]
 80025d8:	4965      	ldr	r1, [pc, #404]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80025da:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80025dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80025de:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80025e2:	4313      	orrs	r3, r2
 80025e4:	670b      	str	r3, [r1, #112]	; 0x70
 80025e6:	e687      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 80025e8:	f7fe f842 	bl	8000670 <HAL_GetTick>
 80025ec:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	4b60      	ldr	r3, [pc, #384]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	f013 0f02 	tst.w	r3, #2
 80025f6:	d1e4      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7fe f83a 	bl	8000670 <HAL_GetTick>
 80025fc:	1bc0      	subs	r0, r0, r7
 80025fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002602:	4298      	cmp	r0, r3
 8002604:	d9f3      	bls.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8002606:	2003      	movs	r0, #3
 8002608:	e795      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800260a:	4859      	ldr	r0, [pc, #356]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800260c:	6882      	ldr	r2, [r0, #8]
 800260e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002612:	4959      	ldr	r1, [pc, #356]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002614:	4019      	ands	r1, r3
 8002616:	430a      	orrs	r2, r1
 8002618:	6082      	str	r2, [r0, #8]
 800261a:	e7dd      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1;
 800261c:	2501      	movs	r5, #1
 800261e:	e737      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();
 8002620:	4a53      	ldr	r2, [pc, #332]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002628:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800262a:	f7fe f821 	bl	8000670 <HAL_GetTick>
 800262e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002630:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002638:	d006      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800263a:	f7fe f819 	bl	8000670 <HAL_GetTick>
 800263e:	1b80      	subs	r0, r0, r6
 8002640:	2864      	cmp	r0, #100	; 0x64
 8002642:	d9f5      	bls.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8002644:	2003      	movs	r0, #3
 8002646:	e776      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	f013 0f01 	tst.w	r3, #1
 800264e:	d013      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002652:	b98b      	cbnz	r3, 8002678 <HAL_RCCEx_PeriphCLKConfig+0x410>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002654:	4a46      	ldr	r2, [pc, #280]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002656:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800265a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800265e:	6860      	ldr	r0, [r4, #4]
 8002660:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002664:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002668:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800266c:	430b      	orrs	r3, r1
 800266e:	68a1      	ldr	r1, [r4, #8]
 8002670:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002674:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800267e:	d003      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002680:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002682:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002686:	d006      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800268c:	d01e      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x464>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800268e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002694:	d11a      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x464>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002696:	4a36      	ldr	r2, [pc, #216]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002698:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800269c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026a0:	6860      	ldr	r0, [r4, #4]
 80026a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80026aa:	68e0      	ldr	r0, [r4, #12]
 80026ac:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80026b0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80026b4:	430b      	orrs	r3, r1
 80026b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026ba:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80026be:	f023 031f 	bic.w	r3, r3, #31
 80026c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026c4:	3901      	subs	r1, #1
 80026c6:	430b      	orrs	r3, r1
 80026c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80026d2:	d011      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x490>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026d4:	4a26      	ldr	r2, [pc, #152]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80026d6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026da:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026de:	6866      	ldr	r6, [r4, #4]
 80026e0:	6923      	ldr	r3, [r4, #16]
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80026e8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80026ec:	4303      	orrs	r3, r0
 80026ee:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80026f2:	430b      	orrs	r3, r1
 80026f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80026fe:	d00d      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002700:	6862      	ldr	r2, [r4, #4]
 8002702:	6923      	ldr	r3, [r4, #16]
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800270a:	68e2      	ldr	r2, [r4, #12]
 800270c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002710:	68a2      	ldr	r2, [r4, #8]
 8002712:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002716:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002718:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800271e:	6813      	ldr	r3, [r2, #0]
 8002720:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002724:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002726:	f7fd ffa3 	bl	8000670 <HAL_GetTick>
 800272a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002734:	f47f aefb 	bne.w	800252e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002738:	f7fd ff9a 	bl	8000670 <HAL_GetTick>
 800273c:	1b80      	subs	r0, r0, r6
 800273e:	2864      	cmp	r0, #100	; 0x64
 8002740:	d9f4      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        return HAL_TIMEOUT;
 8002742:	2003      	movs	r0, #3
 8002744:	e6f7      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_PLLSAI_DISABLE();
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002748:	6813      	ldr	r3, [r2, #0]
 800274a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002750:	f7fd ff8e 	bl	8000670 <HAL_GetTick>
 8002754:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800275e:	d00d      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x514>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002760:	f7fd ff86 	bl	8000670 <HAL_GetTick>
 8002764:	1b40      	subs	r0, r0, r5
 8002766:	2864      	cmp	r0, #100	; 0x64
 8002768:	d9f5      	bls.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
        return HAL_TIMEOUT;
 800276a:	2003      	movs	r0, #3
 800276c:	e6e3      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40007000 	.word	0x40007000
 8002778:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002782:	d001      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002784:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002786:	b122      	cbz	r2, 8002792 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800278c:	d01d      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x562>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800278e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002790:	b9db      	cbnz	r3, 80027ca <HAL_RCCEx_PeriphCLKConfig+0x562>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002792:	4a35      	ldr	r2, [pc, #212]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002794:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002798:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800279c:	6960      	ldr	r0, [r4, #20]
 800279e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80027a6:	69a0      	ldr	r0, [r4, #24]
 80027a8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80027ac:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80027b0:	430b      	orrs	r3, r1
 80027b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027b6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80027ba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80027be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80027c0:	3901      	subs	r1, #1
 80027c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80027d0:	d003      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x572>
 80027d2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80027d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027d8:	d031      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f013 0f08 	tst.w	r3, #8
 80027e0:	d019      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027e2:	4a21      	ldr	r2, [pc, #132]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80027e4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80027ec:	6960      	ldr	r0, [r4, #20]
 80027ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80027f6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80027fa:	430b      	orrs	r3, r1
 80027fc:	69e1      	ldr	r1, [r4, #28]
 80027fe:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002802:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002806:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800280a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800280e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002810:	430b      	orrs	r3, r1
 8002812:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002818:	6813      	ldr	r3, [r2, #0]
 800281a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002820:	f7fd ff26 	bl	8000670 <HAL_GetTick>
 8002824:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800282e:	d119      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002830:	f7fd ff1e 	bl	8000670 <HAL_GetTick>
 8002834:	1b00      	subs	r0, r0, r4
 8002836:	2864      	cmp	r0, #100	; 0x64
 8002838:	d9f5      	bls.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x5be>
        return HAL_TIMEOUT;
 800283a:	2003      	movs	r0, #3
 800283c:	e67b      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002840:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002844:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002848:	6965      	ldr	r5, [r4, #20]
 800284a:	6a23      	ldr	r3, [r4, #32]
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002852:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002856:	4303      	orrs	r3, r0
 8002858:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800285c:	430b      	orrs	r3, r1
 800285e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002862:	e7ba      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x572>
  return HAL_OK;
 8002864:	2000      	movs	r0, #0
 8002866:	e666      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002868:	40023800 	.word	0x40023800

0800286c <HAL_RCCEx_GetPeriphCLKConfig>:
{
  uint32_t tempreg = 0;

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800286c:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <HAL_RCCEx_GetPeriphCLKConfig+0x184>)
 800286e:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8002870:	4b60      	ldr	r3, [pc, #384]	; (80029f4 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8002872:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002876:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800287a:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800287c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002880:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8002884:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002886:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800288a:	f3c2 6203 	ubfx	r2, r2, #24, #4
 800288e:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002890:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002894:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8002898:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800289a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800289e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80028a2:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028a8:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80028ac:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028b2:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80028b6:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028bc:	f3c2 7202 	ubfx	r2, r2, #28, #3
 80028c0:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos) + 1; // *** JSB: Cube fix: + 1 ***
 80028c2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028c6:	f002 021f 	and.w	r2, r2, #31
 80028ca:	3201      	adds	r2, #1
 80028cc:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos) + 1; // *** JSB: Cube fix: + 1 ***
 80028ce:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028d2:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80028d6:	3201      	adds	r2, #1
 80028d8:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80028da:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028de:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80028e2:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80028e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028e8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80028ec:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80028ee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028f2:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80028f6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80028fe:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8002900:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002904:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002908:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800290a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800290e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002912:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8002914:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002918:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800291c:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800291e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002922:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002926:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8002928:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800292c:	f002 0203 	and.w	r2, r2, #3
 8002930:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8002932:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002936:	f002 020c 	and.w	r2, r2, #12
 800293a:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800293c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002940:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002944:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8002946:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800294a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800294e:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8002950:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002954:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002958:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800295a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800295e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002962:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8002964:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002968:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800296c:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800296e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002972:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002976:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002978:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800297c:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8002980:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8002982:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002986:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800298a:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800298c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002990:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002994:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8002996:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800299a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800299e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 80029a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80029a6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80029aa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 80029ae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80029b2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80029b6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80029ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80029be:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80029c2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80029c6:	6899      	ldr	r1, [r3, #8]
 80029c8:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80029cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029ce:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80029d2:	430a      	orrs	r2, r1
 80029d4:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80029d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029da:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80029de:	d102      	bne.n	80029e6 <HAL_RCCEx_GetPeriphCLKConfig+0x17a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80029e0:	2300      	movs	r3, #0
 80029e2:	6383      	str	r3, [r0, #56]	; 0x38
 80029e4:	4770      	bx	lr
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80029e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ea:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	1cfffff1 	.word	0x1cfffff1
 80029f4:	40023800 	.word	0x40023800

080029f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029f8:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80029fa:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80029fe:	d004      	beq.n	8002a0a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
  uint32_t frequency = 0;
 8002a00:	2000      	movs	r0, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8002a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a06:	d071      	beq.n	8002aec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      }
    }
  }

  return frequency;
}
 8002a08:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 8002a0a:	4a70      	ldr	r2, [pc, #448]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002a0c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8002a10:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8002a14:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002a18:	d064      	beq.n	8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8002a1a:	d826      	bhi.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8002a1c:	b38a      	cbz	r2, 8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 8002a1e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002a22:	d120      	bne.n	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002a24:	4a69      	ldr	r2, [pc, #420]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002a26:	6852      	ldr	r2, [r2, #4]
 8002a28:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002a2c:	d152      	bne.n	8002ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a2e:	4a67      	ldr	r2, [pc, #412]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002a30:	6850      	ldr	r0, [r2, #4]
 8002a32:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 8002a36:	4866      	ldr	r0, [pc, #408]	; (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002a38:	fbb0 fcfc 	udiv	ip, r0, ip
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002a3c:	4a63      	ldr	r2, [pc, #396]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002a3e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8002a42:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002a46:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8002a4a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002a4e:	fb0c f000 	mul.w	r0, ip, r0
 8002a52:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8002a56:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8002a5a:	f002 021f 	and.w	r2, r2, #31
 8002a5e:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 8002a60:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 8002a64:	e7cd      	b.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 8002a66:	2000      	movs	r0, #0
 8002a68:	e7cb      	b.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
 8002a6a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002a70:	4a56      	ldr	r2, [pc, #344]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002a72:	6852      	ldr	r2, [r2, #4]
 8002a74:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002a78:	d136      	bne.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
          frequency = HSI_VALUE;
 8002a7a:	4855      	ldr	r0, [pc, #340]	; (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002a7c:	e7c1      	b.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e7bf      	b.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002a82:	4a52      	ldr	r2, [pc, #328]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002a84:	6852      	ldr	r2, [r2, #4]
 8002a86:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a8c:	4a4f      	ldr	r2, [pc, #316]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002a8e:	6850      	ldr	r0, [r2, #4]
 8002a90:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 8002a94:	484e      	ldr	r0, [pc, #312]	; (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002a96:	fbb0 fcfc 	udiv	ip, r0, ip
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002a9a:	4a4c      	ldr	r2, [pc, #304]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002a9c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8002aa0:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002aa4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8002aa8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002aac:	fb0c f000 	mul.w	r0, ip, r0
 8002ab0:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8002ab4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8002ab8:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8002abc:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 8002abe:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 8002ac2:	e79e      	b.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002ac4:	4a41      	ldr	r2, [pc, #260]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002ac6:	6850      	ldr	r0, [r2, #4]
 8002ac8:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 8002acc:	4841      	ldr	r0, [pc, #260]	; (8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002ace:	fbb0 fcfc 	udiv	ip, r0, ip
 8002ad2:	e7e2      	b.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002ad4:	4a3d      	ldr	r2, [pc, #244]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002ad6:	6850      	ldr	r0, [r2, #4]
 8002ad8:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 8002adc:	483d      	ldr	r0, [pc, #244]	; (8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002ade:	fbb0 fcfc 	udiv	ip, r0, ip
 8002ae2:	e7ab      	b.n	8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        frequency = EXTERNAL_CLOCK_VALUE;
 8002ae4:	483c      	ldr	r0, [pc, #240]	; (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8002ae6:	e78c      	b.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          frequency = HSE_VALUE;
 8002ae8:	483a      	ldr	r0, [pc, #232]	; (8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002aea:	e78a      	b.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 8002aec:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8002af2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 8002af6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002afa:	d062      	beq.n	8002bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8002afc:	d825      	bhi.n	8002b4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8002afe:	b37b      	cbz	r3, 8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8002b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b04:	d120      	bne.n	8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002b06:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b0e:	d150      	bne.n	8002bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b10:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002b18:	482d      	ldr	r0, [pc, #180]	; (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002b1a:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002b20:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002b24:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002b28:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8002b2c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002b30:	fb01 f000 	mul.w	r0, r1, r0
 8002b34:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8002b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8002b42:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002b46:	4770      	bx	lr
 8002b48:	4770      	bx	lr
    switch (saiclocksource)
 8002b4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002b50:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b58:	d135      	bne.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
          frequency = HSI_VALUE;
 8002b5a:	481d      	ldr	r0, [pc, #116]	; (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002b5c:	4770      	bx	lr
 8002b5e:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b68:	d11b      	bne.n	8002ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002b72:	4817      	ldr	r0, [pc, #92]	; (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002b74:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002b7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b7e:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002b82:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002b86:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002b8a:	fb01 f000 	mul.w	r0, r1, r0
 8002b8e:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8002b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b96:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8002b9a:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8002b9c:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002ba0:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002baa:	480a      	ldr	r0, [pc, #40]	; (8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002bac:	fbb0 f1f1 	udiv	r1, r0, r1
 8002bb0:	e7e2      	b.n	8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002bba:	4806      	ldr	r0, [pc, #24]	; (8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002bbc:	fbb0 f1f1 	udiv	r1, r0, r1
 8002bc0:	e7ad      	b.n	8002b1e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
        frequency = EXTERNAL_CLOCK_VALUE;
 8002bc2:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8002bc4:	4770      	bx	lr
          frequency = HSE_VALUE;
 8002bc6:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
  return frequency;
 8002bc8:	e71e      	b.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	00f42400 	.word	0x00f42400
 8002bd4:	017d7840 	.word	0x017d7840
 8002bd8:	00ac4400 	.word	0x00ac4400

08002bdc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8002bdc:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002bde:	2400      	movs	r4, #0
 8002be0:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8002be2:	6384      	str	r4, [r0, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002be4:	6844      	ldr	r4, [r0, #4]
 8002be6:	2c02      	cmp	r4, #2
 8002be8:	bf18      	it	ne
 8002bea:	2c00      	cmpne	r4, #0
 8002bec:	d117      	bne.n	8002c1e <SAI_InitI2S+0x42>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002bee:	2400      	movs	r4, #0
 8002bf0:	63c4      	str	r4, [r0, #60]	; 0x3c
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8002bf2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8002bf6:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8002bf8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002bfc:	6604      	str	r4, [r0, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8002bfe:	2400      	movs	r4, #0
 8002c00:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8002c02:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if((nbslot & 0x1) != 0 )
 8002c04:	f013 0f01 	tst.w	r3, #1
 8002c08:	d14e      	bne.n	8002ca8 <SAI_InitI2S+0xcc>
  {
    return HAL_ERROR;
  }

  switch(protocol)
 8002c0a:	b159      	cbz	r1, 8002c24 <SAI_InitI2S+0x48>
 8002c0c:	1e4c      	subs	r4, r1, #1
 8002c0e:	2c01      	cmp	r4, #1
 8002c10:	d84d      	bhi.n	8002cae <SAI_InitI2S+0xd2>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
    break;
  case SAI_I2S_MSBJUSTIFIED :
  case SAI_I2S_LSBJUSTIFIED :
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8002c12:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8002c16:	64c4      	str	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8002c18:	2400      	movs	r4, #0
 8002c1a:	6504      	str	r4, [r0, #80]	; 0x50
    break;
 8002c1c:	e007      	b.n	8002c2e <SAI_InitI2S+0x52>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8002c1e:	2401      	movs	r4, #1
 8002c20:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002c22:	e7e6      	b.n	8002bf2 <SAI_InitI2S+0x16>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002c24:	2400      	movs	r4, #0
 8002c26:	64c4      	str	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8002c28:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8002c2c:	6504      	str	r4, [r0, #80]	; 0x50
  default :
    return HAL_ERROR;
  }

  /* Frame definition */
  switch(datasize)
 8002c2e:	2a03      	cmp	r2, #3
 8002c30:	d83f      	bhi.n	8002cb2 <SAI_InitI2S+0xd6>
 8002c32:	e8df f002 	tbb	[pc, r2]
 8002c36:	0f02      	.short	0x0f02
 8002c38:	2218      	.short	0x2218
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002c3a:	2480      	movs	r4, #128	; 0x80
 8002c3c:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	015c      	lsls	r4, r3, #5
 8002c42:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8002c48:	2340      	movs	r3, #64	; 0x40
 8002c4a:	6583      	str	r3, [r0, #88]	; 0x58
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
    break;
  default :
    return HAL_ERROR;
  }
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 8002c4c:	2902      	cmp	r1, #2
 8002c4e:	d01e      	beq.n	8002c8e <SAI_InitI2S+0xb2>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return HAL_OK;
 8002c50:	2000      	movs	r0, #0
 8002c52:	e02a      	b.n	8002caa <SAI_InitI2S+0xce>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002c54:	2480      	movs	r4, #128	; 0x80
 8002c56:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	019d      	lsls	r5, r3, #6
 8002c5c:	6405      	str	r5, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002c5e:	015b      	lsls	r3, r3, #5
 8002c60:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002c62:	6584      	str	r4, [r0, #88]	; 0x58
    break;
 8002c64:	e7f2      	b.n	8002c4c <SAI_InitI2S+0x70>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002c66:	24c0      	movs	r4, #192	; 0xc0
 8002c68:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	019c      	lsls	r4, r3, #6
 8002c6e:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002c70:	015b      	lsls	r3, r3, #5
 8002c72:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	6583      	str	r3, [r0, #88]	; 0x58
    break;
 8002c78:	e7e8      	b.n	8002c4c <SAI_InitI2S+0x70>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002c7a:	24e0      	movs	r4, #224	; 0xe0
 8002c7c:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	019c      	lsls	r4, r3, #6
 8002c82:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002c84:	015b      	lsls	r3, r3, #5
 8002c86:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	6583      	str	r3, [r0, #88]	; 0x58
    break;
 8002c8c:	e7de      	b.n	8002c4c <SAI_InitI2S+0x70>
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8002c8e:	2a01      	cmp	r2, #1
 8002c90:	d003      	beq.n	8002c9a <SAI_InitI2S+0xbe>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8002c92:	2a02      	cmp	r2, #2
 8002c94:	d004      	beq.n	8002ca0 <SAI_InitI2S+0xc4>
  return HAL_OK;
 8002c96:	2000      	movs	r0, #0
 8002c98:	e007      	b.n	8002caa <SAI_InitI2S+0xce>
      hsai->SlotInit.FirstBitOffset = 16;
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	6543      	str	r3, [r0, #84]	; 0x54
 8002c9e:	e7f8      	b.n	8002c92 <SAI_InitI2S+0xb6>
      hsai->SlotInit.FirstBitOffset = 8;
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	6543      	str	r3, [r0, #84]	; 0x54
  return HAL_OK;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	e000      	b.n	8002caa <SAI_InitI2S+0xce>
    return HAL_ERROR;
 8002ca8:	2001      	movs	r0, #1
}
 8002caa:	bc30      	pop	{r4, r5}
 8002cac:	4770      	bx	lr
  switch(protocol)
 8002cae:	2001      	movs	r0, #1
 8002cb0:	e7fb      	b.n	8002caa <SAI_InitI2S+0xce>
  switch(datasize)
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	e7f9      	b.n	8002caa <SAI_InitI2S+0xce>

08002cb6 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8002cb6:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002cb8:	2400      	movs	r4, #0
 8002cba:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8002cbc:	6384      	str	r4, [r0, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002cbe:	6844      	ldr	r4, [r0, #4]
 8002cc0:	2c02      	cmp	r4, #2
 8002cc2:	bf18      	it	ne
 8002cc4:	2c00      	cmpne	r4, #0
 8002cc6:	d11a      	bne.n	8002cfe <SAI_InitPCM+0x48>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8002cc8:	2401      	movs	r4, #1
 8002cca:	63c4      	str	r4, [r0, #60]	; 0x3c
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8002ccc:	2400      	movs	r4, #0
 8002cce:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8002cd0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8002cd4:	64c5      	str	r5, [r0, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8002cd6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8002cda:	6505      	str	r5, [r0, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8002cdc:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8002cde:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8002ce0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002ce4:	6604      	str	r4, [r0, #96]	; 0x60

  switch(protocol)
 8002ce6:	2903      	cmp	r1, #3
 8002ce8:	d00c      	beq.n	8002d04 <SAI_InitPCM+0x4e>
 8002cea:	2904      	cmp	r1, #4
 8002cec:	d12c      	bne.n	8002d48 <SAI_InitPCM+0x92>
  {
  case SAI_PCM_SHORT :
    hsai->FrameInit.ActiveFrameLength = 1;
 8002cee:	2101      	movs	r1, #1
 8002cf0:	6441      	str	r1, [r0, #68]	; 0x44
    break;
  default :
    return HAL_ERROR;
  }

  switch(datasize)
 8002cf2:	2a03      	cmp	r2, #3
 8002cf4:	d82b      	bhi.n	8002d4e <SAI_InitPCM+0x98>
 8002cf6:	e8df f002 	tbb	[pc, r2]
 8002cfa:	1008      	.short	0x1008
 8002cfc:	1f17      	.short	0x1f17
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002cfe:	2400      	movs	r4, #0
 8002d00:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002d02:	e7e3      	b.n	8002ccc <SAI_InitPCM+0x16>
    hsai->FrameInit.ActiveFrameLength = 13;
 8002d04:	210d      	movs	r1, #13
 8002d06:	6441      	str	r1, [r0, #68]	; 0x44
    break;
 8002d08:	e7f3      	b.n	8002cf2 <SAI_InitPCM+0x3c>
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8002d12:	2340      	movs	r3, #64	; 0x40
 8002d14:	6583      	str	r3, [r0, #88]	; 0x58
    break;
  default :
    return HAL_ERROR;
  }

  return HAL_OK;
 8002d16:	2000      	movs	r0, #0
    break;
 8002d18:	e017      	b.n	8002d4a <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002d1a:	2280      	movs	r2, #128	; 0x80
 8002d1c:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002d1e:	015b      	lsls	r3, r3, #5
 8002d20:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002d22:	6582      	str	r2, [r0, #88]	; 0x58
  return HAL_OK;
 8002d24:	2000      	movs	r0, #0
    break;
 8002d26:	e010      	b.n	8002d4a <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002d28:	22c0      	movs	r2, #192	; 0xc0
 8002d2a:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002d2c:	015b      	lsls	r3, r3, #5
 8002d2e:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 8002d34:	2000      	movs	r0, #0
    break;
 8002d36:	e008      	b.n	8002d4a <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002d38:	22e0      	movs	r2, #224	; 0xe0
 8002d3a:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002d3c:	015b      	lsls	r3, r3, #5
 8002d3e:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 8002d44:	2000      	movs	r0, #0
    break;
 8002d46:	e000      	b.n	8002d4a <SAI_InitPCM+0x94>
  switch(protocol)
 8002d48:	2001      	movs	r0, #1
}
 8002d4a:	bc30      	pop	{r4, r5}
 8002d4c:	4770      	bx	lr
  switch(datasize)
 8002d4e:	2001      	movs	r0, #1
 8002d50:	e7fb      	b.n	8002d4a <SAI_InitPCM+0x94>

08002d52 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
 8002d52:	2901      	cmp	r1, #1
 8002d54:	d00a      	beq.n	8002d6c <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8002d56:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8002d58:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002d5a:	2a08      	cmp	r2, #8
 8002d5c:	d008      	beq.n	8002d70 <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002d5e:	6842      	ldr	r2, [r0, #4]
 8002d60:	3a02      	subs	r2, #2
 8002d62:	2a01      	cmp	r2, #1
 8002d64:	d90c      	bls.n	8002d80 <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8002d66:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8002d6a:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 8002d6c:	2309      	movs	r3, #9
 8002d6e:	e7f3      	b.n	8002d58 <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8002d70:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8002d72:	2a01      	cmp	r2, #1
 8002d74:	bf18      	it	ne
 8002d76:	2a03      	cmpne	r2, #3
 8002d78:	d1f1      	bne.n	8002d5e <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 8002d7a:	f043 0310 	orr.w	r3, r3, #16
 8002d7e:	e7ee      	b.n	8002d5e <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8002d80:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8002d84:	4770      	bx	lr
	...

08002d88 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <SAI_Disable+0x3c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <SAI_Disable+0x40>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0b1b      	lsrs	r3, r3, #12
 8002d94:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8002d96:	6801      	ldr	r1, [r0, #0]
 8002d98:	680a      	ldr	r2, [r1, #0]
 8002d9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d9e:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8002da0:	461a      	mov	r2, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b132      	cbz	r2, 8002db4 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8002da6:	6802      	ldr	r2, [r0, #0]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002dae:	d1f7      	bne.n	8002da0 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8002db0:	2000      	movs	r0, #0

  return status;
}
 8002db2:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002db4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8002dc0:	2003      	movs	r0, #3
      break;
 8002dc2:	4770      	bx	lr
 8002dc4:	20000024 	.word	0x20000024
 8002dc8:	95cbec1b 	.word	0x95cbec1b

08002dcc <HAL_SAI_Init>:
  if(hsai == NULL)
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	f000 80eb 	beq.w	8002fa8 <HAL_SAI_Init+0x1dc>
{
 8002dd2:	b538      	push	{r3, r4, r5, lr}
 8002dd4:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 8002dd6:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80b6 	beq.w	8002f4c <HAL_SAI_Init+0x180>
  hsai->State = HAL_SAI_STATE_BUSY;
 8002de0:	2302      	movs	r3, #2
 8002de2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8002de6:	4620      	mov	r0, r4
 8002de8:	f7ff ffce 	bl	8002d88 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8002dec:	68e3      	ldr	r3, [r4, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	f000 80b1 	beq.w	8002f56 <HAL_SAI_Init+0x18a>
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	f040 80b0 	bne.w	8002f5a <HAL_SAI_Init+0x18e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8002dfa:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 8002dfc:	68a3      	ldr	r3, [r4, #8]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	f000 80b5 	beq.w	8002f6e <HAL_SAI_Init+0x1a2>
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	f000 80ad 	beq.w	8002f64 <HAL_SAI_Init+0x198>
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	f000 80a7 	beq.w	8002f5e <HAL_SAI_Init+0x192>
 8002e10:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	4865      	ldr	r0, [pc, #404]	; (8002fac <HAL_SAI_Init+0x1e0>)
 8002e16:	4966      	ldr	r1, [pc, #408]	; (8002fb0 <HAL_SAI_Init+0x1e4>)
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	bf18      	it	ne
 8002e1c:	4283      	cmpne	r3, r0
 8002e1e:	f040 80a9 	bne.w	8002f74 <HAL_SAI_Init+0x1a8>
    SAI1->GCR = tmpregisterGCR;
 8002e22:	4b64      	ldr	r3, [pc, #400]	; (8002fb4 <HAL_SAI_Init+0x1e8>)
 8002e24:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8002e28:	69e3      	ldr	r3, [r4, #28]
 8002e2a:	b323      	cbz	r3, 8002e76 <HAL_SAI_Init+0xaa>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	495f      	ldr	r1, [pc, #380]	; (8002fac <HAL_SAI_Init+0x1e0>)
 8002e30:	4a5f      	ldr	r2, [pc, #380]	; (8002fb0 <HAL_SAI_Init+0x1e4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	bf18      	it	ne
 8002e36:	428b      	cmpne	r3, r1
 8002e38:	f000 80a0 	beq.w	8002f7c <HAL_SAI_Init+0x1b0>
    uint32_t freq = 0;
 8002e3c:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	495d      	ldr	r1, [pc, #372]	; (8002fb8 <HAL_SAI_Init+0x1ec>)
 8002e42:	4a5e      	ldr	r2, [pc, #376]	; (8002fbc <HAL_SAI_Init+0x1f0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	bf18      	it	ne
 8002e48:	428b      	cmpne	r3, r1
 8002e4a:	f000 809c 	beq.w	8002f86 <HAL_SAI_Init+0x1ba>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8002e4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e52:	0040      	lsls	r0, r0, #1
 8002e54:	69e3      	ldr	r3, [r4, #28]
 8002e56:	025b      	lsls	r3, r3, #9
 8002e58:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8002e5c:	4b58      	ldr	r3, [pc, #352]	; (8002fc0 <HAL_SAI_Init+0x1f4>)
 8002e5e:	fba3 2300 	umull	r2, r3, r3, r0
 8002e62:	08db      	lsrs	r3, r3, #3
 8002e64:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 8002e66:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002e6a:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8002e6e:	2808      	cmp	r0, #8
 8002e70:	d901      	bls.n	8002e76 <HAL_SAI_Init+0xaa>
      hsai->Init.Mckdiv+= 1;
 8002e72:	3301      	adds	r3, #1
 8002e74:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002e76:	6863      	ldr	r3, [r4, #4]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	bf18      	it	ne
 8002e7c:	2b00      	cmpne	r3, #0
 8002e7e:	f040 808a 	bne.w	8002f96 <HAL_SAI_Init+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8002e82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	f000 8083 	beq.w	8002f90 <HAL_SAI_Init+0x1c4>
 8002e8a:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002e8e:	6821      	ldr	r1, [r4, #0]
 8002e90:	680b      	ldr	r3, [r1, #0]
 8002e92:	4a4c      	ldr	r2, [pc, #304]	; (8002fc4 <HAL_SAI_Init+0x1f8>)
 8002e94:	401a      	ands	r2, r3
 8002e96:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	6811      	ldr	r1, [r2, #0]
 8002e9c:	6863      	ldr	r3, [r4, #4]
 8002e9e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002ea0:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8002ea2:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002ea4:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8002ea6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002ea8:	4303      	orrs	r3, r0
 8002eaa:	ea43 030c 	orr.w	r3, r3, ip
                        ckstr_bits | syncen_bits |                               \
 8002eae:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8002eb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8002eb2:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8002eb4:	6920      	ldr	r0, [r4, #16]
 8002eb6:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8002eb8:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8002eba:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8002ebc:	6a20      	ldr	r0, [r4, #32]
 8002ebe:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002ec6:	6822      	ldr	r2, [r4, #0]
 8002ec8:	6851      	ldr	r1, [r2, #4]
 8002eca:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_SAI_Init+0x1fc>)
 8002ecc:	400b      	ands	r3, r1
 8002ece:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002ed0:	6821      	ldr	r1, [r4, #0]
 8002ed2:	684a      	ldr	r2, [r1, #4]
 8002ed4:	69a3      	ldr	r3, [r4, #24]
 8002ed6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002ed8:	4303      	orrs	r3, r0
 8002eda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002edc:	4303      	orrs	r3, r0
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002ee2:	6822      	ldr	r2, [r4, #0]
 8002ee4:	6891      	ldr	r1, [r2, #8]
 8002ee6:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <HAL_SAI_Init+0x200>)
 8002ee8:	400b      	ands	r3, r1
 8002eea:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002eec:	6820      	ldr	r0, [r4, #0]
 8002eee:	6882      	ldr	r2, [r0, #8]
 8002ef0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ef2:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8002ef4:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002ef6:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 8002ef8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8002efa:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8002efc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8002efe:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8002f00:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002f02:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8002f04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8002f0c:	6822      	ldr	r2, [r4, #0]
 8002f0e:	68d3      	ldr	r3, [r2, #12]
 8002f10:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8002f14:	f023 030f 	bic.w	r3, r3, #15
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	0c1b      	lsrs	r3, r3, #16
 8002f1c:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002f1e:	6820      	ldr	r0, [r4, #0]
 8002f20:	68c2      	ldr	r2, [r0, #12]
 8002f22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f24:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002f26:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002f28:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002f2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002f2e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002f30:	3901      	subs	r1, #1
 8002f32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8002f46:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
    hsai->Lock = HAL_UNLOCKED;
 8002f4c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8002f50:	f004 f89c 	bl	800708c <HAL_SAI_MspInit>
 8002f54:	e744      	b.n	8002de0 <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8002f56:	2210      	movs	r2, #16
 8002f58:	e750      	b.n	8002dfc <HAL_SAI_Init+0x30>
  switch(hsai->Init.SynchroExt)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	e74e      	b.n	8002dfc <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8002f5e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002f62:	e756      	b.n	8002e12 <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8002f64:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8002f68:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8002f6c:	e751      	b.n	8002e12 <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8002f6e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002f72:	e74e      	b.n	8002e12 <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <HAL_SAI_Init+0x1e8>)
 8002f76:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8002f7a:	e755      	b.n	8002e28 <HAL_SAI_Init+0x5c>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8002f7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f80:	f7ff fd3a 	bl	80029f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f84:	e75b      	b.n	8002e3e <HAL_SAI_Init+0x72>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8002f86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002f8a:	f7ff fd35 	bl	80029f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f8e:	e75e      	b.n	8002e4e <HAL_SAI_Init+0x82>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8002f90:	f04f 0c00 	mov.w	ip, #0
 8002f94:	e77b      	b.n	8002e8e <HAL_SAI_Init+0xc2>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8002f96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d002      	beq.n	8002fa2 <HAL_SAI_Init+0x1d6>
 8002f9c:	f04f 0c00 	mov.w	ip, #0
 8002fa0:	e775      	b.n	8002e8e <HAL_SAI_Init+0xc2>
 8002fa2:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8002fa6:	e772      	b.n	8002e8e <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 8002fa8:	2001      	movs	r0, #1
}
 8002faa:	4770      	bx	lr
 8002fac:	40015804 	.word	0x40015804
 8002fb0:	40015824 	.word	0x40015824
 8002fb4:	40015000 	.word	0x40015000
 8002fb8:	40015c04 	.word	0x40015c04
 8002fbc:	40015c24 	.word	0x40015c24
 8002fc0:	cccccccd 	.word	0xcccccccd
 8002fc4:	ff05c010 	.word	0xff05c010
 8002fc8:	ffff1ff0 	.word	0xffff1ff0
 8002fcc:	fff88000 	.word	0xfff88000

08002fd0 <HAL_SAI_InitProtocol>:
{
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	4604      	mov	r4, r0
  switch(protocol)
 8002fd4:	2902      	cmp	r1, #2
 8002fd6:	d906      	bls.n	8002fe6 <HAL_SAI_InitProtocol+0x16>
 8002fd8:	1ec8      	subs	r0, r1, #3
 8002fda:	2801      	cmp	r0, #1
 8002fdc:	d80b      	bhi.n	8002ff6 <HAL_SAI_InitProtocol+0x26>
    status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f7ff fe69 	bl	8002cb6 <SAI_InitPCM>
    break;
 8002fe4:	e001      	b.n	8002fea <HAL_SAI_InitProtocol+0x1a>
    status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8002fe6:	f7ff fdf9 	bl	8002bdc <SAI_InitI2S>
  if(status == HAL_OK)
 8002fea:	b100      	cbz	r0, 8002fee <HAL_SAI_InitProtocol+0x1e>
}
 8002fec:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff feec 	bl	8002dcc <HAL_SAI_Init>
 8002ff4:	e7fa      	b.n	8002fec <HAL_SAI_InitProtocol+0x1c>
  switch(protocol)
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	e7f8      	b.n	8002fec <HAL_SAI_InitProtocol+0x1c>

08002ffa <HAL_SAI_DMAStop>:
{
 8002ffa:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8002ffc:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d04c      	beq.n	800309e <HAL_SAI_DMAStop+0xa4>
 8003004:	4604      	mov	r4, r0
 8003006:	2301      	movs	r3, #1
 8003008:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800300c:	6802      	ldr	r2, [r0, #0]
 800300e:	6813      	ldr	r3, [r2, #0]
 8003010:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003014:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8003016:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8003018:	b368      	cbz	r0, 8003076 <HAL_SAI_DMAStop+0x7c>
 800301a:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b12      	cmp	r3, #18
 8003022:	d017      	beq.n	8003054 <HAL_SAI_DMAStop+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8003024:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8003026:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003028:	b120      	cbz	r0, 8003034 <HAL_SAI_DMAStop+0x3a>
 800302a:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b22      	cmp	r3, #34	; 0x22
 8003032:	d024      	beq.n	800307e <HAL_SAI_DMAStop+0x84>
  SAI_Disable(hsai);
 8003034:	4620      	mov	r0, r4
 8003036:	f7ff fea7 	bl	8002d88 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800303a:	6822      	ldr	r2, [r4, #0]
 800303c:	6853      	ldr	r3, [r2, #4]
 800303e:	f043 0308 	orr.w	r3, r3, #8
 8003042:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8003044:	2301      	movs	r3, #1
 8003046:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 800304a:	2300      	movs	r3, #0
 800304c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8003050:	4628      	mov	r0, r5
 8003052:	bd38      	pop	{r3, r4, r5, pc}
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8003054:	f7fd fcae 	bl	80009b4 <HAL_DMA_Abort>
 8003058:	4605      	mov	r5, r0
 800305a:	2800      	cmp	r0, #0
 800305c:	d0e3      	beq.n	8003026 <HAL_SAI_DMAStop+0x2c>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800305e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	2b80      	cmp	r3, #128	; 0x80
 8003064:	d009      	beq.n	800307a <HAL_SAI_DMAStop+0x80>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003066:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800306a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8003072:	2501      	movs	r5, #1
 8003074:	e7d7      	b.n	8003026 <HAL_SAI_DMAStop+0x2c>
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2500      	movs	r5, #0
 8003078:	e7d5      	b.n	8003026 <HAL_SAI_DMAStop+0x2c>
 800307a:	2500      	movs	r5, #0
 800307c:	e7d3      	b.n	8003026 <HAL_SAI_DMAStop+0x2c>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800307e:	f7fd fc99 	bl	80009b4 <HAL_DMA_Abort>
 8003082:	2800      	cmp	r0, #0
 8003084:	d0d6      	beq.n	8003034 <HAL_SAI_DMAStop+0x3a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8003086:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	2b80      	cmp	r3, #128	; 0x80
 800308c:	d0d2      	beq.n	8003034 <HAL_SAI_DMAStop+0x3a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800308e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003096:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 800309a:	2501      	movs	r5, #1
 800309c:	e7ca      	b.n	8003034 <HAL_SAI_DMAStop+0x3a>
  __HAL_LOCK(hsai);
 800309e:	2502      	movs	r5, #2
 80030a0:	e7d6      	b.n	8003050 <HAL_SAI_DMAStop+0x56>
	...

080030a4 <HAL_SAI_Transmit_DMA>:
{
 80030a4:	b570      	push	{r4, r5, r6, lr}
  if((pData == NULL) || (Size == 0))
 80030a6:	2a00      	cmp	r2, #0
 80030a8:	bf18      	it	ne
 80030aa:	2900      	cmpne	r1, #0
 80030ac:	d04c      	beq.n	8003148 <HAL_SAI_Transmit_DMA+0xa4>
 80030ae:	4604      	mov	r4, r0
 80030b0:	4613      	mov	r3, r2
  if(hsai->State == HAL_SAI_STATE_READY)
 80030b2:	f894 507d 	ldrb.w	r5, [r4, #125]	; 0x7d
 80030b6:	b2ed      	uxtb	r5, r5
 80030b8:	2d01      	cmp	r5, #1
 80030ba:	d148      	bne.n	800314e <HAL_SAI_Transmit_DMA+0xaa>
    __HAL_LOCK(hsai);
 80030bc:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 80030c0:	2a01      	cmp	r2, #1
 80030c2:	d046      	beq.n	8003152 <HAL_SAI_Transmit_DMA+0xae>
 80030c4:	2201      	movs	r2, #1
 80030c6:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 80030ca:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 80030cc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 80030d0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80030da:	2212      	movs	r2, #18
 80030dc:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80030e0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80030e2:	491d      	ldr	r1, [pc, #116]	; (8003158 <HAL_SAI_Transmit_DMA+0xb4>)
 80030e4:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80030e6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80030e8:	491c      	ldr	r1, [pc, #112]	; (800315c <HAL_SAI_Transmit_DMA+0xb8>)
 80030ea:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80030ec:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80030ee:	491c      	ldr	r1, [pc, #112]	; (8003160 <HAL_SAI_Transmit_DMA+0xbc>)
 80030f0:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80030f2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80030f4:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80030f6:	6822      	ldr	r2, [r4, #0]
 80030f8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80030fc:	321c      	adds	r2, #28
 80030fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003100:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003102:	f7fd fc1d 	bl	8000940 <HAL_DMA_Start_IT>
 8003106:	4606      	mov	r6, r0
 8003108:	b118      	cbz	r0, 8003112 <HAL_SAI_Transmit_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 800310a:	2300      	movs	r3, #0
 800310c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8003110:	e01b      	b.n	800314a <HAL_SAI_Transmit_DMA+0xa6>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800311a:	d103      	bne.n	8003124 <HAL_SAI_Transmit_DMA+0x80>
      __HAL_SAI_ENABLE(hsai);
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003122:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003124:	2100      	movs	r1, #0
 8003126:	4620      	mov	r0, r4
 8003128:	f7ff fe13 	bl	8002d52 <SAI_InterruptFlag>
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	6913      	ldr	r3, [r2, #16]
 8003130:	4303      	orrs	r3, r0
 8003132:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003134:	6822      	ldr	r2, [r4, #0]
 8003136:	6813      	ldr	r3, [r2, #0]
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800313e:	2300      	movs	r3, #0
 8003140:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8003144:	4635      	mov	r5, r6
 8003146:	e000      	b.n	800314a <HAL_SAI_Transmit_DMA+0xa6>
    return  HAL_ERROR;
 8003148:	2501      	movs	r5, #1
}
 800314a:	4628      	mov	r0, r5
 800314c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800314e:	2502      	movs	r5, #2
 8003150:	e7fb      	b.n	800314a <HAL_SAI_Transmit_DMA+0xa6>
    __HAL_LOCK(hsai);
 8003152:	2502      	movs	r5, #2
 8003154:	e7f9      	b.n	800314a <HAL_SAI_Transmit_DMA+0xa6>
 8003156:	bf00      	nop
 8003158:	080031a1 	.word	0x080031a1
 800315c:	08003165 	.word	0x08003165
 8003160:	080031ad 	.word	0x080031ad

08003164 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003164:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8003166:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8003168:	6803      	ldr	r3, [r0, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003170:	d112      	bne.n	8003198 <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 8003172:	2100      	movs	r1, #0
 8003174:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003178:	6822      	ldr	r2, [r4, #0]
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003180:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003182:	4620      	mov	r0, r4
 8003184:	f7ff fde5 	bl	8002d52 <SAI_InterruptFlag>
 8003188:	6822      	ldr	r2, [r4, #0]
 800318a:	6913      	ldr	r3, [r2, #16]
 800318c:	ea23 0300 	bic.w	r3, r3, r0
 8003190:	6113      	str	r3, [r2, #16]

    hsai->State= HAL_SAI_STATE_READY;
 8003192:	2301      	movs	r3, #1
 8003194:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8003198:	4620      	mov	r0, r4
 800319a:	f003 fa4b 	bl	8006634 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800319e:	bd10      	pop	{r4, pc}

080031a0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031a0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80031a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80031a4:	f003 fa36 	bl	8006614 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80031a8:	bd08      	pop	{r3, pc}

080031aa <HAL_SAI_ErrorCallback>:
}
 80031aa:	4770      	bx	lr

080031ac <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ac:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031ae:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80031b0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80031b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80031bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d007      	beq.n	80031d4 <SAI_DMAError+0x28>
 80031c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d003      	beq.n	80031d4 <SAI_DMAError+0x28>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7ff ffec 	bl	80031aa <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80031d2:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80031d4:	6822      	ldr	r2, [r4, #0]
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80031dc:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 80031de:	4620      	mov	r0, r4
 80031e0:	f7ff fdd2 	bl	8002d88 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80031f0:	e7ec      	b.n	80031cc <SAI_DMAError+0x20>

080031f2 <EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE>:
#ifdef HAL_SPDIFRX_MODULE_ENABLED
#if defined (SPDIFRX)

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
void EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE() {} // JSB
 80031f2:	4770      	bx	lr

080031f4 <HAL_SPDIFRX_Init>:
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d030      	beq.n	800325a <HAL_SPDIFRX_Init+0x66>
{
 80031f8:	b510      	push	{r4, lr}
 80031fa:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80031fc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003200:	b333      	cbz	r3, 8003250 <HAL_SPDIFRX_Init+0x5c>
    HAL_SPDIFRX_MspInit(hspdif);
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	f023 0303 	bic.w	r3, r3, #3
 8003210:	6013      	str	r3, [r2, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8003212:	6821      	ldr	r1, [r4, #0]
 8003214:	680b      	ldr	r3, [r1, #0]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <HAL_SPDIFRX_Init+0x6c>)
 8003218:	401a      	ands	r2, r3
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800321a:	69a3      	ldr	r3, [r4, #24]
             hspdif->Init.InputSelection |
 800321c:	6860      	ldr	r0, [r4, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800321e:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8003220:	68a0      	ldr	r0, [r4, #8]
             hspdif->Init.InputSelection |
 8003222:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 8003224:	68e0      	ldr	r0, [r4, #12]
             hspdif->Init.Retries |
 8003226:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 8003228:	6920      	ldr	r0, [r4, #16]
             hspdif->Init.WaitForActivity |
 800322a:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 800322c:	6960      	ldr	r0, [r4, #20]
             hspdif->Init.ChannelSelection |
 800322e:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 8003230:	69e0      	ldr	r0, [r4, #28]
             hspdif->Init.DataFormat |
 8003232:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 8003234:	6a20      	ldr	r0, [r4, #32]
             hspdif->Init.PreambleTypeMask |
 8003236:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 8003238:	6a60      	ldr	r0, [r4, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800323a:	4303      	orrs	r3, r0
             hspdif->Init.ParityErrorMask
 800323c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800323e:	4303      	orrs	r3, r0
  tmpreg |= (hspdif->Init.StereoMode |
 8003240:	4313      	orrs	r3, r2
             );


  hspdif->Instance->CR = tmpreg;
 8003242:	600b      	str	r3, [r1, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8003244:	2000      	movs	r0, #0
 8003246:	64a0      	str	r0, [r4, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003248:	2301      	movs	r3, #1
 800324a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
}
 800324e:	bd10      	pop	{r4, pc}
    hspdif->Lock = HAL_UNLOCKED;
 8003250:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    HAL_SPDIFRX_MspInit(hspdif);
 8003254:	f003 fff0 	bl	8007238 <HAL_SPDIFRX_MspInit>
 8003258:	e7d3      	b.n	8003202 <HAL_SPDIFRX_Init+0xe>
    return HAL_ERROR;
 800325a:	2001      	movs	r0, #1
}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	fff88407 	.word	0xfff88407

08003264 <HAL_SPDIFRX_ReceiveDataFlow_DMA>:
  * @param pData a 32-bit pointer to the Receive data buffer.
  * @param Size number of data sample to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_ReceiveDataFlow_DMA(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData, uint16_t Size)
{
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	4604      	mov	r4, r0
  register uint32_t count = SPDIFRX_TIMEOUT_VALUE * (SystemCoreClock / 24U / 1000U);
 8003268:	4b50      	ldr	r3, [pc, #320]	; (80033ac <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x148>)
 800326a:	681d      	ldr	r5, [r3, #0]
 800326c:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x14c>)
 800326e:	fba3 3505 	umull	r3, r5, r3, r5
 8003272:	0a6d      	lsrs	r5, r5, #9
 8003274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003278:	fb03 f505 	mul.w	r5, r3, r5

  const HAL_SPDIFRX_StateTypeDef tempState = hspdif->State;
 800327c:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45

  if((pData == NULL) || (Size == 0U))
 8003280:	2a00      	cmp	r2, #0
 8003282:	bf18      	it	ne
 8003284:	2900      	cmpne	r1, #0
 8003286:	f000 808b 	beq.w	80033a0 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13c>
 800328a:	b2c0      	uxtb	r0, r0
 800328c:	4613      	mov	r3, r2
  {
    return  HAL_ERROR;
  }

  if((tempState == HAL_SPDIFRX_STATE_READY) || (tempState == HAL_SPDIFRX_STATE_BUSY_CX))
 800328e:	2804      	cmp	r0, #4
 8003290:	bf18      	it	ne
 8003292:	2801      	cmpne	r0, #1
 8003294:	f040 8086 	bne.w	80033a4 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x140>
  {
    /* Process Locked */
    __HAL_LOCK(hspdif);
 8003298:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	2a01      	cmp	r2, #1
 80032a0:	f000 8082 	beq.w	80033a8 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x144>
 80032a4:	2201      	movs	r2, #1
 80032a6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44

    hspdif->pRxBuffPtr = pData;
 80032aa:	62e1      	str	r1, [r4, #44]	; 0x2c
    hspdif->RxXferSize = Size;
 80032ac:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspdif->RxXferCount = Size;
 80032ae:	86e3      	strh	r3, [r4, #54]	; 0x36

    hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80032b0:	2200      	movs	r2, #0
 80032b2:	64a2      	str	r2, [r4, #72]	; 0x48
    hspdif->State = HAL_SPDIFRX_STATE_BUSY_RX;
 80032b4:	2203      	movs	r2, #3
 80032b6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45

    /* Set the SPDIFRX Rx DMA Half transfer complete callback */
    hspdif->hdmaDrRx->XferHalfCpltCallback = SPDIFRX_DMARxHalfCplt;
 80032ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032bc:	493d      	ldr	r1, [pc, #244]	; (80033b4 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x150>)
 80032be:	6411      	str	r1, [r2, #64]	; 0x40

    /* Set the SPDIFRX Rx DMA transfer complete callback */
    hspdif->hdmaDrRx->XferCpltCallback = SPDIFRX_DMARxCplt;
 80032c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032c2:	493d      	ldr	r1, [pc, #244]	; (80033b8 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x154>)
 80032c4:	63d1      	str	r1, [r2, #60]	; 0x3c

    /* Set the DMA error callback */
    hspdif->hdmaDrRx->XferErrorCallback = SPDIFRX_DMAError;
 80032c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032c8:	493c      	ldr	r1, [pc, #240]	; (80033bc <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x158>)
 80032ca:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Enable the DMA request */
    if(HAL_DMA_Start_IT(hspdif->hdmaDrRx, (uint32_t)&hspdif->Instance->DR, (uint32_t)hspdif->pRxBuffPtr, Size) != HAL_OK)
 80032cc:	6821      	ldr	r1, [r4, #0]
 80032ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032d0:	3110      	adds	r1, #16
 80032d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80032d4:	f7fd fb34 	bl	8000940 <HAL_DMA_Start_IT>
 80032d8:	b9f8      	cbnz	r0, 800331a <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xb6>

      return HAL_ERROR;
    }

    /* Enable RXDMAEN bit in SPDIFRX CR register for data flow reception*/
    hspdif->Instance->CR |= SPDIFRX_CR_RXDMAEN;
 80032da:	6822      	ldr	r2, [r4, #0]
 80032dc:	6813      	ldr	r3, [r2, #0]
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6013      	str	r3, [r2, #0]

    if((SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != SPDIFRX_STATE_RCV)
 80032e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d00f      	beq.n	8003312 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xae>
    {
      /* Start synchronization */
      __HAL_SPDIFRX_SYNC(hspdif);
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	6813      	ldr	r3, [r2, #0]
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6013      	str	r3, [r2, #0]

      /* Wait until SYNCD flag is set */
      do
      {
        if (count == 0U)
 80032fc:	b1bd      	cbz	r5, 800332e <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xca>
          /* Process Unlocked */
          __HAL_UNLOCK(hspdif);

          return HAL_TIMEOUT;
        }
        count--;
 80032fe:	3d01      	subs	r5, #1
      } while (__HAL_SPDIFRX_GET_FLAG(hspdif, SPDIFRX_FLAG_SYNCD) == RESET);
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	f012 0f20 	tst.w	r2, #32
 8003308:	d0f8      	beq.n	80032fc <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x98>

      /* Start reception */
      __HAL_SPDIFRX_RCV(hspdif);
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f042 0203 	orr.w	r2, r2, #3
 8003310:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 8003312:	2300      	movs	r3, #0
 8003314:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44

    return HAL_OK;
 8003318:	e043      	b.n	80033a2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
      hspdif->ErrorCode = HAL_SPDIFRX_ERROR_DMA;
 800331a:	2308      	movs	r3, #8
 800331c:	64a3      	str	r3, [r4, #72]	; 0x48
      hspdif->State = HAL_SPDIFRX_STATE_ERROR;
 800331e:	2307      	movs	r3, #7
 8003320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      __HAL_UNLOCK(hspdif);
 8003324:	2300      	movs	r3, #0
 8003326:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800332a:	2001      	movs	r0, #1
 800332c:	e039      	b.n	80033a2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_RXNE);
 800332e:	6822      	ldr	r2, [r4, #0]
 8003330:	6853      	ldr	r3, [r2, #4]
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 800333c:	6822      	ldr	r2, [r4, #0]
 800333e:	6853      	ldr	r3, [r2, #4]
 8003340:	f023 0302 	bic.w	r3, r3, #2
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_PERRIE);
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	6853      	ldr	r3, [r2, #4]
 800334e:	f023 0304 	bic.w	r3, r3, #4
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE);
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	6853      	ldr	r3, [r2, #4]
 800335c:	f023 0308 	bic.w	r3, r3, #8
 8003360:	041b      	lsls	r3, r3, #16
 8003362:	0c1b      	lsrs	r3, r3, #16
 8003364:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SBLKIE);
 8003366:	6822      	ldr	r2, [r4, #0]
 8003368:	6853      	ldr	r3, [r2, #4]
 800336a:	f023 0310 	bic.w	r3, r3, #16
 800336e:	041b      	lsls	r3, r3, #16
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SYNCDIE);
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	6853      	ldr	r3, [r2, #4]
 8003378:	f023 0320 	bic.w	r3, r3, #32
 800337c:	041b      	lsls	r3, r3, #16
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	6053      	str	r3, [r2, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_IFEIE);
 8003382:	6822      	ldr	r2, [r4, #0]
 8003384:	6853      	ldr	r3, [r2, #4]
 8003386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	6053      	str	r3, [r2, #4]
          hspdif->State= HAL_SPDIFRX_STATE_READY;
 8003390:	2301      	movs	r3, #1
 8003392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
          __HAL_UNLOCK(hspdif);
 8003396:	2300      	movs	r3, #0
 8003398:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
          return HAL_TIMEOUT;
 800339c:	2003      	movs	r0, #3
 800339e:	e000      	b.n	80033a2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
    return  HAL_ERROR;
 80033a0:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80033a4:	2002      	movs	r0, #2
 80033a6:	e7fc      	b.n	80033a2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
    __HAL_LOCK(hspdif);
 80033a8:	2002      	movs	r0, #2
 80033aa:	e7fa      	b.n	80033a2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x13e>
 80033ac:	20000024 	.word	0x20000024
 80033b0:	057619f1 	.word	0x057619f1
 80033b4:	0800342d 	.word	0x0800342d
 80033b8:	08003439 	.word	0x08003439
 80033bc:	080034eb 	.word	0x080034eb

080033c0 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort>:
  {
    return HAL_BUSY;
  }
}

void EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort() {} // JSB
 80033c0:	4770      	bx	lr

080033c2 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR>:
void EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR() {} // JSB
 80033c2:	4770      	bx	lr

080033c4 <HAL_SPDIFRX_DMAStop>:
  * @brief stop the audio stream receive from the Media.
  * @param hspdif SPDIFRX handle
  * @retval None
  */
HAL_StatusTypeDef HAL_SPDIFRX_DMAStop(SPDIFRX_HandleTypeDef *hspdif)
{
 80033c4:	b538      	push	{r3, r4, r5, lr}
  /* Process Locked */
  __HAL_LOCK(hspdif);
 80033c6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d02a      	beq.n	8003426 <HAL_SPDIFRX_DMAStop+0x62>
 80033d0:	4604      	mov	r4, r0
 80033d2:	2501      	movs	r5, #1
 80033d4:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44

  // JSB fix. 20191115. Otherwise the L&R channels can become reversed if the signal is interrupted.
  HAL_DMA_Abort(hspdif->hdmaDrRx); // JSB added!!!
 80033d8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80033da:	f7fd faeb 	bl	80009b4 <HAL_DMA_Abort>
  HAL_DMA_Abort(hspdif->hdmaCsRx); // JSB added!!!
 80033de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80033e0:	f7fd fae8 	bl	80009b4 <HAL_DMA_Abort>

  /* Disable the SPDIFRX DMA requests */
  // hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN); // *** JSB: Cube bug!!! This unintentionally clears bits 4+ of CR. ***
  hspdif->Instance->CR &= (uint32_t)(~SPDIFRX_CR_RXDMAEN); // *** JSB: Cube bug fix!!! ***
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	6013      	str	r3, [r2, #0]
  // hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_CBDMAEN); // *** JSB: Cube bug!!! This unintentionally clears bits 4+ of CR. ***
  hspdif->Instance->CR &= (uint32_t)(~SPDIFRX_CR_CBDMAEN); // *** JSB: Cube bug fix!!! ***
 80033ee:	6822      	ldr	r2, [r4, #0]
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f6:	6013      	str	r3, [r2, #0]

  /* Disable the SPDIFRX DMA channel */
  __HAL_DMA_DISABLE(hspdif->hdmaDrRx);
 80033f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	6813      	ldr	r3, [r2, #0]
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6013      	str	r3, [r2, #0]
  __HAL_DMA_DISABLE(hspdif->hdmaCsRx);
 8003404:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	6813      	ldr	r3, [r2, #0]
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	6013      	str	r3, [r2, #0]

  /* Disable SPDIFRX peripheral */
  __HAL_SPDIFRX_IDLE(hspdif);
 8003410:	6822      	ldr	r2, [r4, #0]
 8003412:	6813      	ldr	r3, [r2, #0]
 8003414:	f023 0303 	bic.w	r3, r3, #3
 8003418:	6013      	str	r3, [r2, #0]

  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800341a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45

  /* Process Unlocked */
  __HAL_UNLOCK(hspdif);
 800341e:	2000      	movs	r0, #0
 8003420:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44

  return HAL_OK;
}
 8003424:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspdif);
 8003426:	2002      	movs	r0, #2
 8003428:	e7fc      	b.n	8003424 <HAL_SPDIFRX_DMAStop+0x60>

0800342a <HAL_SPDIFRX_RxHalfCpltCallback>:
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 800342a:	4770      	bx	lr

0800342c <SPDIFRX_DMARxHalfCplt>:
  * @brief DMA SPDIFRX receive process (Data flow) half complete callback
  * @param hdma DMA handle
  * @retval None
  */
static void SPDIFRX_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800342c:	b508      	push	{r3, lr}
  SPDIFRX_HandleTypeDef* hspdif = (SPDIFRX_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
  hspdif->RxHalfCpltCallback(hspdif);
#else
  HAL_SPDIFRX_RxHalfCpltCallback(hspdif);
 800342e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003430:	f7ff fffb 	bl	800342a <HAL_SPDIFRX_RxHalfCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
}
 8003434:	bd08      	pop	{r3, pc}

08003436 <HAL_SPDIFRX_RxCpltCallback>:
}
 8003436:	4770      	bx	lr

08003438 <SPDIFRX_DMARxCplt>:
{
 8003438:	b508      	push	{r3, lr}
 800343a:	4603      	mov	r3, r0
  SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800343c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if(hdma->Init.Mode != DMA_CIRCULAR)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003444:	d00b      	beq.n	800345e <SPDIFRX_DMARxCplt+0x26>
    hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN);
 8003446:	6802      	ldr	r2, [r0, #0]
 8003448:	6813      	ldr	r3, [r2, #0]
 800344a:	f023 0304 	bic.w	r3, r3, #4
 800344e:	041b      	lsls	r3, r3, #16
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	6013      	str	r3, [r2, #0]
    hspdif->RxXferCount = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	86c3      	strh	r3, [r0, #54]	; 0x36
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003458:	2301      	movs	r3, #1
 800345a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  HAL_SPDIFRX_RxCpltCallback(hspdif);
 800345e:	f7ff ffea 	bl	8003436 <HAL_SPDIFRX_RxCpltCallback>
}
 8003462:	bd08      	pop	{r3, pc}

08003464 <SPDIFRX_ReceiveDataFlow_IT>:
  * @brief Receive an amount of data (Data Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 8003464:	b508      	push	{r3, lr}
  /* Receive data */
  (*hspdif->pRxBuffPtr) = hspdif->Instance->DR;
 8003466:	6802      	ldr	r2, [r0, #0]
 8003468:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800346a:	6912      	ldr	r2, [r2, #16]
 800346c:	601a      	str	r2, [r3, #0]
  hspdif->pRxBuffPtr++;
 800346e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003470:	3304      	adds	r3, #4
 8003472:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspdif->RxXferCount--;
 8003474:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29b      	uxth	r3, r3
 800347c:	86c3      	strh	r3, [r0, #54]	; 0x36

  if(hspdif->RxXferCount == 0U)
 800347e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003480:	b29b      	uxth	r3, r3
 8003482:	b103      	cbz	r3, 8003486 <SPDIFRX_ReceiveDataFlow_IT+0x22>
  hspdif->RxCpltCallback(hspdif);
#else
  HAL_SPDIFRX_RxCpltCallback(hspdif);
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 8003484:	bd08      	pop	{r3, pc}
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE | SPDIFRX_IT_PERRIE | SPDIFRX_IT_RXNE);
 8003486:	6802      	ldr	r2, [r0, #0]
 8003488:	6853      	ldr	r3, [r2, #4]
 800348a:	f023 030d 	bic.w	r3, r3, #13
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	6053      	str	r3, [r2, #4]
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003494:	2301      	movs	r3, #1
 8003496:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    __HAL_UNLOCK(hspdif);
 800349a:	2300      	movs	r3, #0
 800349c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  HAL_SPDIFRX_RxCpltCallback(hspdif);
 80034a0:	f7ff ffc9 	bl	8003436 <HAL_SPDIFRX_RxCpltCallback>
}
 80034a4:	e7ee      	b.n	8003484 <SPDIFRX_ReceiveDataFlow_IT+0x20>

080034a6 <HAL_SPDIFRX_CxCpltCallback>:
}
 80034a6:	4770      	bx	lr

080034a8 <SPDIFRX_ReceiveControlFlow_IT>:
  * @brief Receive an amount of data (Control Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 80034a8:	b508      	push	{r3, lr}
  /* Receive data */
  (*hspdif->pCsBuffPtr) = hspdif->Instance->CSR;
 80034aa:	6802      	ldr	r2, [r0, #0]
 80034ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80034ae:	6952      	ldr	r2, [r2, #20]
 80034b0:	601a      	str	r2, [r3, #0]
  hspdif->pCsBuffPtr++;
 80034b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80034b4:	3304      	adds	r3, #4
 80034b6:	6303      	str	r3, [r0, #48]	; 0x30
  hspdif->CsXferCount--;
 80034b8:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29b      	uxth	r3, r3
 80034c0:	8743      	strh	r3, [r0, #58]	; 0x3a

  if(hspdif->CsXferCount == 0U)
 80034c2:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b103      	cbz	r3, 80034ca <SPDIFRX_ReceiveControlFlow_IT+0x22>
  hspdif->CxCpltCallback(hspdif);
#else
  HAL_SPDIFRX_CxCpltCallback(hspdif);
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 80034c8:	bd08      	pop	{r3, pc}
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 80034ca:	6802      	ldr	r2, [r0, #0]
 80034cc:	6853      	ldr	r3, [r2, #4]
 80034ce:	f023 0302 	bic.w	r3, r3, #2
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	6053      	str	r3, [r2, #4]
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 80034d8:	2301      	movs	r3, #1
 80034da:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    __HAL_UNLOCK(hspdif);
 80034de:	2300      	movs	r3, #0
 80034e0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  HAL_SPDIFRX_CxCpltCallback(hspdif);
 80034e4:	f7ff ffdf 	bl	80034a6 <HAL_SPDIFRX_CxCpltCallback>
}
 80034e8:	e7ee      	b.n	80034c8 <SPDIFRX_ReceiveControlFlow_IT+0x20>

080034ea <SPDIFRX_DMAError>:
{
 80034ea:	b508      	push	{r3, lr}
  SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspdif->Instance->CR &= (uint16_t)(~(SPDIFRX_CR_RXDMAEN | SPDIFRX_CR_CBDMAEN));
 80034ee:	6802      	ldr	r2, [r0, #0]
 80034f0:	6813      	ldr	r3, [r2, #0]
 80034f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f6:	f023 0304 	bic.w	r3, r3, #4
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	6013      	str	r3, [r2, #0]
  hspdif->RxXferCount = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	86c3      	strh	r3, [r0, #54]	; 0x36
  hspdif->State= HAL_SPDIFRX_STATE_READY;
 8003504:	2301      	movs	r3, #1
 8003506:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_DMA;
 800350a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800350c:	f043 0308 	orr.w	r3, r3, #8
 8003510:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_SPDIFRX_ErrorCallback(hspdif);
 8003512:	f002 fa63 	bl	80059dc <HAL_SPDIFRX_ErrorCallback>
}
 8003516:	bd08      	pop	{r3, pc}

08003518 <HAL_SPDIFRX_IRQHandler>:
{
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	4604      	mov	r4, r0
  uint32_t itFlag   = hspdif->Instance->SR;
 800351c:	6803      	ldr	r3, [r0, #0]
 800351e:	689d      	ldr	r5, [r3, #8]
  uint32_t itSource = hspdif->Instance->IMR;
 8003520:	685e      	ldr	r6, [r3, #4]
  if(((itFlag & SPDIFRX_FLAG_RXNE) == SPDIFRX_FLAG_RXNE) && ((itSource &  SPDIFRX_IT_RXNE) == SPDIFRX_IT_RXNE))
 8003522:	f015 0f01 	tst.w	r5, #1
 8003526:	d002      	beq.n	800352e <HAL_SPDIFRX_IRQHandler+0x16>
 8003528:	f016 0f01 	tst.w	r6, #1
 800352c:	d112      	bne.n	8003554 <HAL_SPDIFRX_IRQHandler+0x3c>
  if(((itFlag & SPDIFRX_FLAG_CSRNE) == SPDIFRX_FLAG_CSRNE) && ((itSource &  SPDIFRX_IT_CSRNE) == SPDIFRX_IT_CSRNE))
 800352e:	f015 0f02 	tst.w	r5, #2
 8003532:	d002      	beq.n	800353a <HAL_SPDIFRX_IRQHandler+0x22>
 8003534:	f016 0f02 	tst.w	r6, #2
 8003538:	d111      	bne.n	800355e <HAL_SPDIFRX_IRQHandler+0x46>
  if(((itFlag & SPDIFRX_FLAG_OVR) == SPDIFRX_FLAG_OVR) && ((itSource &  SPDIFRX_IT_OVRIE) == SPDIFRX_IT_OVRIE))
 800353a:	f015 0f08 	tst.w	r5, #8
 800353e:	d002      	beq.n	8003546 <HAL_SPDIFRX_IRQHandler+0x2e>
 8003540:	f016 0f08 	tst.w	r6, #8
 8003544:	d112      	bne.n	800356c <HAL_SPDIFRX_IRQHandler+0x54>
  if(((itFlag & SPDIFRX_FLAG_PERR) == SPDIFRX_FLAG_PERR) && ((itSource &  SPDIFRX_IT_PERRIE) == SPDIFRX_IT_PERRIE))
 8003546:	f015 0f04 	tst.w	r5, #4
 800354a:	d002      	beq.n	8003552 <HAL_SPDIFRX_IRQHandler+0x3a>
 800354c:	f016 0f04 	tst.w	r6, #4
 8003550:	d117      	bne.n	8003582 <HAL_SPDIFRX_IRQHandler+0x6a>
}
 8003552:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 8003554:	2201      	movs	r2, #1
 8003556:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveDataFlow_IT(hspdif);
 8003558:	f7ff ff84 	bl	8003464 <SPDIFRX_ReceiveDataFlow_IT>
 800355c:	e7e7      	b.n	800352e <HAL_SPDIFRX_IRQHandler+0x16>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_CSRNE);
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	2202      	movs	r2, #2
 8003562:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveControlFlow_IT(hspdif);
 8003564:	4620      	mov	r0, r4
 8003566:	f7ff ff9f 	bl	80034a8 <SPDIFRX_ReceiveControlFlow_IT>
 800356a:	e7e6      	b.n	800353a <HAL_SPDIFRX_IRQHandler+0x22>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_OVRIE);
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	2208      	movs	r2, #8
 8003570:	60da      	str	r2, [r3, #12]
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
 8003572:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_SPDIFRX_ErrorCallback(hspdif);
 800357a:	4620      	mov	r0, r4
 800357c:	f002 fa2e 	bl	80059dc <HAL_SPDIFRX_ErrorCallback>
 8003580:	e7e1      	b.n	8003546 <HAL_SPDIFRX_IRQHandler+0x2e>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_PERRIE);
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	2204      	movs	r2, #4
 8003586:	60da      	str	r2, [r3, #12]
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
 8003588:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800358a:	4313      	orrs	r3, r2
 800358c:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_SPDIFRX_ErrorCallback(hspdif);
 800358e:	4620      	mov	r0, r4
 8003590:	f002 fa24 	bl	80059dc <HAL_SPDIFRX_ErrorCallback>
}
 8003594:	e7dd      	b.n	8003552 <HAL_SPDIFRX_IRQHandler+0x3a>

08003596 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359a:	4606      	mov	r6, r0
 800359c:	4688      	mov	r8, r1
 800359e:	4617      	mov	r7, r2
 80035a0:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035a2:	6834      	ldr	r4, [r6, #0]
 80035a4:	68a4      	ldr	r4, [r4, #8]
 80035a6:	ea38 0304 	bics.w	r3, r8, r4
 80035aa:	bf0c      	ite	eq
 80035ac:	f04f 0c01 	moveq.w	ip, #1
 80035b0:	f04f 0c00 	movne.w	ip, #0
 80035b4:	45bc      	cmp	ip, r7
 80035b6:	d037      	beq.n	8003628 <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80035bc:	d0f1      	beq.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035be:	f7fd f857 	bl	8000670 <HAL_GetTick>
 80035c2:	9b06      	ldr	r3, [sp, #24]
 80035c4:	1ac0      	subs	r0, r0, r3
 80035c6:	42a8      	cmp	r0, r5
 80035c8:	d201      	bcs.n	80035ce <SPI_WaitFlagStateUntilTimeout+0x38>
 80035ca:	2d00      	cmp	r5, #0
 80035cc:	d1e9      	bne.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ce:	6832      	ldr	r2, [r6, #0]
 80035d0:	6853      	ldr	r3, [r2, #4]
 80035d2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80035d6:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d8:	6873      	ldr	r3, [r6, #4]
 80035da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035de:	d00b      	beq.n	80035f8 <SPI_WaitFlagStateUntilTimeout+0x62>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035e0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80035e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e6:	d014      	beq.n	8003612 <SPI_WaitFlagStateUntilTimeout+0x7c>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ee:	2300      	movs	r3, #0
 80035f0:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035f4:	2003      	movs	r0, #3
 80035f6:	e018      	b.n	800362a <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f8:	68b3      	ldr	r3, [r6, #8]
 80035fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fe:	bf18      	it	ne
 8003600:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8003604:	d1ec      	bne.n	80035e0 <SPI_WaitFlagStateUntilTimeout+0x4a>
          __HAL_SPI_DISABLE(hspi);
 8003606:	6832      	ldr	r2, [r6, #0]
 8003608:	6813      	ldr	r3, [r2, #0]
 800360a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	e7e6      	b.n	80035e0 <SPI_WaitFlagStateUntilTimeout+0x4a>
          SPI_RESET_CRC(hspi);
 8003612:	6832      	ldr	r2, [r6, #0]
 8003614:	6813      	ldr	r3, [r2, #0]
 8003616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	6832      	ldr	r2, [r6, #0]
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e7df      	b.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0x52>
      }
    }
  }

  return HAL_OK;
 8003628:	2000      	movs	r0, #0
}
 800362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800362e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800362e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003632:	4681      	mov	r9, r0
 8003634:	460f      	mov	r7, r1
 8003636:	4616      	mov	r6, r2
 8003638:	4698      	mov	r8, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800363a:	e002      	b.n	8003642 <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 800363c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003640:	d10d      	bne.n	800365e <SPI_WaitFifoStateUntilTimeout+0x30>
  while ((hspi->Instance->SR & Fifo) != State)
 8003642:	f8d9 5000 	ldr.w	r5, [r9]
 8003646:	68ac      	ldr	r4, [r5, #8]
 8003648:	ea04 0c07 	and.w	ip, r4, r7
 800364c:	45b4      	cmp	ip, r6
 800364e:	d043      	beq.n	80036d8 <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003650:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 8003654:	bf08      	it	eq
 8003656:	2e00      	cmpeq	r6, #0
 8003658:	d1f0      	bne.n	800363c <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800365a:	7b2b      	ldrb	r3, [r5, #12]
 800365c:	e7ee      	b.n	800363c <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800365e:	f7fd f807 	bl	8000670 <HAL_GetTick>
 8003662:	9b08      	ldr	r3, [sp, #32]
 8003664:	1ac0      	subs	r0, r0, r3
 8003666:	4540      	cmp	r0, r8
 8003668:	d202      	bcs.n	8003670 <SPI_WaitFifoStateUntilTimeout+0x42>
 800366a:	f1b8 0f00 	cmp.w	r8, #0
 800366e:	d1e8      	bne.n	8003642 <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003670:	f8d9 2000 	ldr.w	r2, [r9]
 8003674:	6853      	ldr	r3, [r2, #4]
 8003676:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800367a:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003680:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003684:	d00c      	beq.n	80036a0 <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003686:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800368a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368e:	d016      	beq.n	80036be <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003690:	2301      	movs	r3, #1
 8003692:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003696:	2300      	movs	r3, #0
 8003698:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c

        return HAL_TIMEOUT;
 800369c:	2003      	movs	r0, #3
 800369e:	e01c      	b.n	80036da <SPI_WaitFifoStateUntilTimeout+0xac>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80036a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a8:	bf18      	it	ne
 80036aa:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 80036ae:	d1ea      	bne.n	8003686 <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 80036b0:	f8d9 2000 	ldr.w	r2, [r9]
 80036b4:	6813      	ldr	r3, [r2, #0]
 80036b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e7e3      	b.n	8003686 <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 80036be:	f8d9 2000 	ldr.w	r2, [r9]
 80036c2:	6813      	ldr	r3, [r2, #0]
 80036c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	f8d9 2000 	ldr.w	r2, [r9]
 80036ce:	6813      	ldr	r3, [r2, #0]
 80036d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e7db      	b.n	8003690 <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 80036d8:	2000      	movs	r0, #0
}
 80036da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080036de <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036de:	b570      	push	{r4, r5, r6, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	4604      	mov	r4, r0
 80036e4:	460d      	mov	r5, r1
 80036e6:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036e8:	9200      	str	r2, [sp, #0]
 80036ea:	460b      	mov	r3, r1
 80036ec:	2200      	movs	r2, #0
 80036ee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80036f2:	f7ff ff9c 	bl	800362e <SPI_WaitFifoStateUntilTimeout>
 80036f6:	b9b0      	cbnz	r0, 8003726 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036f8:	9600      	str	r6, [sp, #0]
 80036fa:	462b      	mov	r3, r5
 80036fc:	2200      	movs	r2, #0
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff ff48 	bl	8003596 <SPI_WaitFlagStateUntilTimeout>
 8003706:	b9a8      	cbnz	r0, 8003734 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003708:	9600      	str	r6, [sp, #0]
 800370a:	462b      	mov	r3, r5
 800370c:	2200      	movs	r2, #0
 800370e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003712:	4620      	mov	r0, r4
 8003714:	f7ff ff8b 	bl	800362e <SPI_WaitFifoStateUntilTimeout>
 8003718:	b150      	cbz	r0, 8003730 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800371a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800371c:	f043 0320 	orr.w	r3, r3, #32
 8003720:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003722:	2003      	movs	r0, #3
 8003724:	e004      	b.n	8003730 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003726:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003728:	f043 0320 	orr.w	r3, r3, #32
 800372c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800372e:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003730:	b002      	add	sp, #8
 8003732:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003734:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003736:	f043 0320 	orr.w	r3, r3, #32
 800373a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800373c:	2003      	movs	r0, #3
 800373e:	e7f7      	b.n	8003730 <SPI_EndRxTxTransaction+0x52>

08003740 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003740:	2800      	cmp	r0, #0
 8003742:	d058      	beq.n	80037f6 <HAL_SPI_Init+0xb6>
{
 8003744:	b510      	push	{r4, lr}
 8003746:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800374c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003750:	2b00      	cmp	r3, #0
 8003752:	d045      	beq.n	80037e0 <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	6813      	ldr	r3, [r2, #0]
 800375e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003762:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003764:	68e3      	ldr	r3, [r4, #12]
 8003766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800376a:	d93e      	bls.n	80037ea <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800376c:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800376e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003772:	bf18      	it	ne
 8003774:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8003778:	d001      	beq.n	800377e <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800377a:	2100      	movs	r1, #0
 800377c:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800377e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003780:	b921      	cbnz	r1, 800378c <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003782:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003786:	d933      	bls.n	80037f0 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003788:	2302      	movs	r3, #2
 800378a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	68a1      	ldr	r1, [r4, #8]
 8003790:	430b      	orrs	r3, r1
 8003792:	6921      	ldr	r1, [r4, #16]
 8003794:	430b      	orrs	r3, r1
 8003796:	6961      	ldr	r1, [r4, #20]
 8003798:	430b      	orrs	r3, r1
 800379a:	69a1      	ldr	r1, [r4, #24]
 800379c:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80037a0:	430b      	orrs	r3, r1
 80037a2:	69e1      	ldr	r1, [r4, #28]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6a21      	ldr	r1, [r4, #32]
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80037ac:	6821      	ldr	r1, [r4, #0]
 80037ae:	4303      	orrs	r3, r0
 80037b0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80037b2:	8b63      	ldrh	r3, [r4, #26]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80037ba:	430b      	orrs	r3, r1
 80037bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037be:	430b      	orrs	r3, r1
 80037c0:	68e1      	ldr	r1, [r4, #12]
 80037c2:	430b      	orrs	r3, r1
 80037c4:	6821      	ldr	r1, [r4, #0]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ca:	6822      	ldr	r2, [r4, #0]
 80037cc:	69d3      	ldr	r3, [r2, #28]
 80037ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d2:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037d4:	2000      	movs	r0, #0
 80037d6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037d8:	2301      	movs	r3, #1
 80037da:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80037de:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80037e0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80037e4:	f003 fe2e 	bl	8007444 <HAL_SPI_MspInit>
 80037e8:	e7b4      	b.n	8003754 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ee:	e7be      	b.n	800376e <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80037f0:	2301      	movs	r3, #1
 80037f2:	6323      	str	r3, [r4, #48]	; 0x30
 80037f4:	e7ca      	b.n	800378c <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80037f6:	2001      	movs	r0, #1
}
 80037f8:	4770      	bx	lr

080037fa <HAL_SPI_Transmit>:
{
 80037fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037fe:	b083      	sub	sp, #12
 8003800:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003802:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003806:	2b01      	cmp	r3, #1
 8003808:	f000 80f0 	beq.w	80039ec <HAL_SPI_Transmit+0x1f2>
 800380c:	4604      	mov	r4, r0
 800380e:	4689      	mov	r9, r1
 8003810:	4690      	mov	r8, r2
 8003812:	2301      	movs	r3, #1
 8003814:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003818:	f7fc ff2a 	bl	8000670 <HAL_GetTick>
 800381c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800381e:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003822:	b2f6      	uxtb	r6, r6
 8003824:	2e01      	cmp	r6, #1
 8003826:	f040 80ce 	bne.w	80039c6 <HAL_SPI_Transmit+0x1cc>
  if ((pData == NULL) || (Size == 0U))
 800382a:	f1b8 0f00 	cmp.w	r8, #0
 800382e:	bf18      	it	ne
 8003830:	f1b9 0f00 	cmpne.w	r9, #0
 8003834:	f000 80c8 	beq.w	80039c8 <HAL_SPI_Transmit+0x1ce>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003838:	2303      	movs	r3, #3
 800383a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800383e:	2300      	movs	r3, #0
 8003840:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003842:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003846:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800384a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800384e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003850:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003854:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003858:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800385a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800385c:	68a3      	ldr	r3, [r4, #8]
 800385e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003862:	d01e      	beq.n	80038a2 <HAL_SPI_Transmit+0xa8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	f012 0f40 	tst.w	r2, #64	; 0x40
 800386c:	d103      	bne.n	8003876 <HAL_SPI_Transmit+0x7c>
    __HAL_SPI_ENABLE(hspi);
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003874:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003876:	68e3      	ldr	r3, [r4, #12]
 8003878:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800387c:	d93d      	bls.n	80038fa <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387e:	6863      	ldr	r3, [r4, #4]
 8003880:	b113      	cbz	r3, 8003888 <HAL_SPI_Transmit+0x8e>
 8003882:	f1b8 0f01 	cmp.w	r8, #1
 8003886:	d11e      	bne.n	80038c6 <HAL_SPI_Transmit+0xcc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003888:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	8812      	ldrh	r2, [r2, #0]
 800388e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003890:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003892:	3302      	adds	r3, #2
 8003894:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003896:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29b      	uxth	r3, r3
 800389e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80038a0:	e011      	b.n	80038c6 <HAL_SPI_Transmit+0xcc>
    SPI_1LINE_TX(hspi);
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e7da      	b.n	8003864 <HAL_SPI_Transmit+0x6a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ae:	f7fc fedf 	bl	8000670 <HAL_GetTick>
 80038b2:	1bc0      	subs	r0, r0, r7
 80038b4:	42a8      	cmp	r0, r5
 80038b6:	d303      	bcc.n	80038c0 <HAL_SPI_Transmit+0xc6>
 80038b8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80038bc:	f040 808e 	bne.w	80039dc <HAL_SPI_Transmit+0x1e2>
 80038c0:	2d00      	cmp	r5, #0
 80038c2:	f000 808d 	beq.w	80039e0 <HAL_SPI_Transmit+0x1e6>
    while (hspi->TxXferCount > 0U)
 80038c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d066      	beq.n	800399c <HAL_SPI_Transmit+0x1a2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	f012 0f02 	tst.w	r2, #2
 80038d6:	d0ea      	beq.n	80038ae <HAL_SPI_Transmit+0xb4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80038da:	8812      	ldrh	r2, [r2, #0]
 80038dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038e0:	3302      	adds	r3, #2
 80038e2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80038e4:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 80038e8:	fa1f fc8c 	uxth.w	ip, ip
 80038ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80038f0:	fa1f fc8c 	uxth.w	ip, ip
 80038f4:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 80038f8:	e7e5      	b.n	80038c6 <HAL_SPI_Transmit+0xcc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fa:	6863      	ldr	r3, [r4, #4]
 80038fc:	b113      	cbz	r3, 8003904 <HAL_SPI_Transmit+0x10a>
 80038fe:	f1b8 0f01 	cmp.w	r8, #1
 8003902:	d133      	bne.n	800396c <HAL_SPI_Transmit+0x172>
      if (hspi->TxXferCount > 1U)
 8003904:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d90c      	bls.n	8003926 <HAL_SPI_Transmit+0x12c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003914:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003916:	3302      	adds	r3, #2
 8003918:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800391a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b02      	subs	r3, #2
 8003920:	b29b      	uxth	r3, r3
 8003922:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003924:	e022      	b.n	800396c <HAL_SPI_Transmit+0x172>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003926:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	7812      	ldrb	r2, [r2, #0]
 800392c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800392e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003930:	3301      	adds	r3, #1
 8003932:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003934:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29b      	uxth	r3, r3
 800393c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800393e:	e015      	b.n	800396c <HAL_SPI_Transmit+0x172>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003946:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003948:	3301      	adds	r3, #1
 800394a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800394c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29b      	uxth	r3, r3
 8003954:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003956:	e009      	b.n	800396c <HAL_SPI_Transmit+0x172>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003958:	f7fc fe8a 	bl	8000670 <HAL_GetTick>
 800395c:	1bc0      	subs	r0, r0, r7
 800395e:	42a8      	cmp	r0, r5
 8003960:	d302      	bcc.n	8003968 <HAL_SPI_Transmit+0x16e>
 8003962:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003966:	d13d      	bne.n	80039e4 <HAL_SPI_Transmit+0x1ea>
 8003968:	2d00      	cmp	r5, #0
 800396a:	d03d      	beq.n	80039e8 <HAL_SPI_Transmit+0x1ee>
    while (hspi->TxXferCount > 0U)
 800396c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	b1a3      	cbz	r3, 800399c <HAL_SPI_Transmit+0x1a2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003972:	6822      	ldr	r2, [r4, #0]
 8003974:	6893      	ldr	r3, [r2, #8]
 8003976:	f013 0f02 	tst.w	r3, #2
 800397a:	d0ed      	beq.n	8003958 <HAL_SPI_Transmit+0x15e>
        if (hspi->TxXferCount > 1U)
 800397c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d9dd      	bls.n	8003940 <HAL_SPI_Transmit+0x146>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800398a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800398c:	3302      	adds	r3, #2
 800398e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003990:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b02      	subs	r3, #2
 8003996:	b29b      	uxth	r3, r3
 8003998:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800399a:	e7e7      	b.n	800396c <HAL_SPI_Transmit+0x172>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800399c:	463a      	mov	r2, r7
 800399e:	4629      	mov	r1, r5
 80039a0:	4620      	mov	r0, r4
 80039a2:	f7ff fe9c 	bl	80036de <SPI_EndRxTxTransaction>
 80039a6:	b108      	cbz	r0, 80039ac <HAL_SPI_Transmit+0x1b2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a8:	2320      	movs	r3, #32
 80039aa:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039ac:	68a3      	ldr	r3, [r4, #8]
 80039ae:	b933      	cbnz	r3, 80039be <HAL_SPI_Transmit+0x1c4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	9201      	str	r2, [sp, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80039c0:	b913      	cbnz	r3, 80039c8 <HAL_SPI_Transmit+0x1ce>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039c2:	2600      	movs	r6, #0
 80039c4:	e000      	b.n	80039c8 <HAL_SPI_Transmit+0x1ce>
    errorcode = HAL_BUSY;
 80039c6:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039ce:	2300      	movs	r3, #0
 80039d0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80039d4:	4630      	mov	r0, r6
 80039d6:	b003      	add	sp, #12
 80039d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80039dc:	2603      	movs	r6, #3
 80039de:	e7f3      	b.n	80039c8 <HAL_SPI_Transmit+0x1ce>
 80039e0:	2603      	movs	r6, #3
 80039e2:	e7f1      	b.n	80039c8 <HAL_SPI_Transmit+0x1ce>
          errorcode = HAL_TIMEOUT;
 80039e4:	2603      	movs	r6, #3
 80039e6:	e7ef      	b.n	80039c8 <HAL_SPI_Transmit+0x1ce>
 80039e8:	2603      	movs	r6, #3
 80039ea:	e7ed      	b.n	80039c8 <HAL_SPI_Transmit+0x1ce>
  __HAL_LOCK(hspi);
 80039ec:	2602      	movs	r6, #2
 80039ee:	e7f1      	b.n	80039d4 <HAL_SPI_Transmit+0x1da>

080039f0 <HAL_SPI_TransmitReceive>:
{
 80039f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f4:	461f      	mov	r7, r3
 80039f6:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80039f8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	f000 8161 	beq.w	8003cc4 <HAL_SPI_TransmitReceive+0x2d4>
 8003a02:	4604      	mov	r4, r0
 8003a04:	4688      	mov	r8, r1
 8003a06:	4691      	mov	r9, r2
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003a0e:	f7fc fe2f 	bl	8000670 <HAL_GetTick>
 8003a12:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003a14:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003a18:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003a1a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d00a      	beq.n	8003a36 <HAL_SPI_TransmitReceive+0x46>
 8003a20:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003a24:	f040 8137 	bne.w	8003c96 <HAL_SPI_TransmitReceive+0x2a6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a28:	68a2      	ldr	r2, [r4, #8]
 8003a2a:	2a00      	cmp	r2, #0
 8003a2c:	f040 813c 	bne.w	8003ca8 <HAL_SPI_TransmitReceive+0x2b8>
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	f040 813b 	bne.w	8003cac <HAL_SPI_TransmitReceive+0x2bc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a36:	f1b9 0f00 	cmp.w	r9, #0
 8003a3a:	bf18      	it	ne
 8003a3c:	f1b8 0f00 	cmpne.w	r8, #0
 8003a40:	f000 8136 	beq.w	8003cb0 <HAL_SPI_TransmitReceive+0x2c0>
 8003a44:	2f00      	cmp	r7, #0
 8003a46:	f000 8135 	beq.w	8003cb4 <HAL_SPI_TransmitReceive+0x2c4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a4a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d002      	beq.n	8003a5a <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a54:	2305      	movs	r3, #5
 8003a56:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a5e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003a62:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003a66:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a6a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003a6e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003a70:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8003a72:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a74:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a76:	68e3      	ldr	r3, [r4, #12]
 8003a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a7c:	d801      	bhi.n	8003a82 <HAL_SPI_TransmitReceive+0x92>
 8003a7e:	2f01      	cmp	r7, #1
 8003a80:	d923      	bls.n	8003aca <HAL_SPI_TransmitReceive+0xda>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	6853      	ldr	r3, [r2, #4]
 8003a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a8a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a94:	d103      	bne.n	8003a9e <HAL_SPI_TransmitReceive+0xae>
    __HAL_SPI_ENABLE(hspi);
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a9e:	68e3      	ldr	r3, [r4, #12]
 8003aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aa4:	d958      	bls.n	8003b58 <HAL_SPI_TransmitReceive+0x168>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa6:	6863      	ldr	r3, [r4, #4]
 8003aa8:	b10b      	cbz	r3, 8003aae <HAL_SPI_TransmitReceive+0xbe>
 8003aaa:	2f01      	cmp	r7, #1
 8003aac:	d10b      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	8812      	ldrh	r2, [r2, #0]
 8003ab4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ab8:	3302      	adds	r3, #2
 8003aba:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003abc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003ac6:	2701      	movs	r7, #1
 8003ac8:	e031      	b.n	8003b2e <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	6853      	ldr	r3, [r2, #4]
 8003ace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ad2:	6053      	str	r3, [r2, #4]
 8003ad4:	e7da      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x9c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ad8:	8812      	ldrh	r2, [r2, #0]
 8003ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003adc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ade:	3302      	adds	r3, #2
 8003ae0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003ae2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003aec:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	f012 0f01 	tst.w	r2, #1
 8003af6:	d011      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x12c>
 8003af8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003afc:	b292      	uxth	r2, r2
 8003afe:	b16a      	cbz	r2, 8003b1c <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b08:	3302      	adds	r3, #2
 8003b0a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003b0c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003b1a:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b1c:	f7fc fda8 	bl	8000670 <HAL_GetTick>
 8003b20:	1b83      	subs	r3, r0, r6
 8003b22:	42ab      	cmp	r3, r5
 8003b24:	d303      	bcc.n	8003b2e <HAL_SPI_TransmitReceive+0x13e>
 8003b26:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b2a:	f040 80c5 	bne.w	8003cb8 <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	b92b      	cbnz	r3, 8003b40 <HAL_SPI_TransmitReceive+0x150>
 8003b34:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80a1 	beq.w	8003c82 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	f012 0f02 	tst.w	r2, #2
 8003b48:	d0d1      	beq.n	8003aee <HAL_SPI_TransmitReceive+0xfe>
 8003b4a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003b4c:	b292      	uxth	r2, r2
 8003b4e:	2a00      	cmp	r2, #0
 8003b50:	d0cd      	beq.n	8003aee <HAL_SPI_TransmitReceive+0xfe>
 8003b52:	2f00      	cmp	r7, #0
 8003b54:	d0cb      	beq.n	8003aee <HAL_SPI_TransmitReceive+0xfe>
 8003b56:	e7be      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0xe6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b58:	6863      	ldr	r3, [r4, #4]
 8003b5a:	b10b      	cbz	r3, 8003b60 <HAL_SPI_TransmitReceive+0x170>
 8003b5c:	2f01      	cmp	r7, #1
 8003b5e:	d10f      	bne.n	8003b80 <HAL_SPI_TransmitReceive+0x190>
      if (hspi->TxXferCount > 1U)
 8003b60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d90d      	bls.n	8003b84 <HAL_SPI_TransmitReceive+0x194>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	8812      	ldrh	r2, [r2, #0]
 8003b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b72:	3302      	adds	r3, #2
 8003b74:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b02      	subs	r3, #2
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003b80:	2701      	movs	r7, #1
 8003b82:	e049      	b.n	8003c18 <HAL_SPI_TransmitReceive+0x228>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003b8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b8e:	3301      	adds	r3, #1
 8003b90:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003b92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003b9c:	e7f0      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x190>
        if (hspi->TxXferCount > 1U)
 8003b9e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	2a01      	cmp	r2, #1
 8003ba4:	d90c      	bls.n	8003bc0 <HAL_SPI_TransmitReceive+0x1d0>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ba8:	8812      	ldrh	r2, [r2, #0]
 8003baa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bae:	3302      	adds	r3, #2
 8003bb0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003bb2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b02      	subs	r3, #2
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003bbc:	2700      	movs	r7, #0
 8003bbe:	e03d      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x24c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bc2:	7812      	ldrb	r2, [r2, #0]
 8003bc4:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003bc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bc8:	3301      	adds	r3, #1
 8003bca:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003bcc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003bd6:	2700      	movs	r7, #0
 8003bd8:	e030      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x24c>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	6853      	ldr	r3, [r2, #4]
 8003bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003be2:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8003be4:	2701      	movs	r7, #1
 8003be6:	e00d      	b.n	8003c04 <HAL_SPI_TransmitReceive+0x214>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003be8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003bea:	7b1b      	ldrb	r3, [r3, #12]
 8003bec:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003bf4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003c02:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c04:	f7fc fd34 	bl	8000670 <HAL_GetTick>
 8003c08:	1b80      	subs	r0, r0, r6
 8003c0a:	42a8      	cmp	r0, r5
 8003c0c:	d302      	bcc.n	8003c14 <HAL_SPI_TransmitReceive+0x224>
 8003c0e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c12:	d153      	bne.n	8003cbc <HAL_SPI_TransmitReceive+0x2cc>
 8003c14:	2d00      	cmp	r5, #0
 8003c16:	d053      	beq.n	8003cc0 <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	b923      	cbnz	r3, 8003c28 <HAL_SPI_TransmitReceive+0x238>
 8003c1e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d02c      	beq.n	8003c82 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	f012 0f02 	tst.w	r2, #2
 8003c30:	d004      	beq.n	8003c3c <HAL_SPI_TransmitReceive+0x24c>
 8003c32:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003c34:	b292      	uxth	r2, r2
 8003c36:	b10a      	cbz	r2, 8003c3c <HAL_SPI_TransmitReceive+0x24c>
 8003c38:	2f00      	cmp	r7, #0
 8003c3a:	d1b0      	bne.n	8003b9e <HAL_SPI_TransmitReceive+0x1ae>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	f012 0f01 	tst.w	r2, #1
 8003c44:	d0de      	beq.n	8003c04 <HAL_SPI_TransmitReceive+0x214>
 8003c46:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003c4a:	b292      	uxth	r2, r2
 8003c4c:	2a00      	cmp	r2, #0
 8003c4e:	d0d9      	beq.n	8003c04 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 8003c50:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003c54:	b292      	uxth	r2, r2
 8003c56:	2a01      	cmp	r2, #1
 8003c58:	d9c6      	bls.n	8003be8 <HAL_SPI_TransmitReceive+0x1f8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c5e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c62:	3302      	adds	r3, #2
 8003c64:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003c66:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b02      	subs	r3, #2
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003c74:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d9ad      	bls.n	8003bda <HAL_SPI_TransmitReceive+0x1ea>
        txallowed = 1U;
 8003c7e:	2701      	movs	r7, #1
 8003c80:	e7c0      	b.n	8003c04 <HAL_SPI_TransmitReceive+0x214>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c82:	4632      	mov	r2, r6
 8003c84:	4629      	mov	r1, r5
 8003c86:	4620      	mov	r0, r4
 8003c88:	f7ff fd29 	bl	80036de <SPI_EndRxTxTransaction>
 8003c8c:	b120      	cbz	r0, 8003c98 <HAL_SPI_TransmitReceive+0x2a8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c8e:	2320      	movs	r3, #32
 8003c90:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003c92:	2001      	movs	r0, #1
 8003c94:	e000      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_BUSY;
 8003c96:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003ca8:	2002      	movs	r0, #2
 8003caa:	e7f5      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x2a8>
 8003cac:	2002      	movs	r0, #2
 8003cae:	e7f3      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	e7f1      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x2a8>
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	e7ef      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x2a8>
        errorcode = HAL_TIMEOUT;
 8003cb8:	2003      	movs	r0, #3
 8003cba:	e7ed      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x2a8>
        errorcode = HAL_TIMEOUT;
 8003cbc:	2003      	movs	r0, #3
 8003cbe:	e7eb      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x2a8>
 8003cc0:	2003      	movs	r0, #3
 8003cc2:	e7e9      	b.n	8003c98 <HAL_SPI_TransmitReceive+0x2a8>
  __HAL_LOCK(hspi);
 8003cc4:	2002      	movs	r0, #2
 8003cc6:	e7ed      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x2b4>

08003cc8 <HAL_SPI_Transmit_DMA>:
{
 8003cc8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8003cca:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	f000 8087 	beq.w	8003de2 <HAL_SPI_Transmit_DMA+0x11a>
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8003cdc:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
 8003ce0:	b2ed      	uxtb	r5, r5
 8003ce2:	429d      	cmp	r5, r3
 8003ce4:	d177      	bne.n	8003dd6 <HAL_SPI_Transmit_DMA+0x10e>
  if ((pData == NULL) || (Size == 0U))
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	bf18      	it	ne
 8003cea:	2900      	cmpne	r1, #0
 8003cec:	d074      	beq.n	8003dd8 <HAL_SPI_Transmit_DMA+0x110>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cf8:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cfa:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cfc:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cfe:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d00:	6503      	str	r3, [r0, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d02:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003d04:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d08:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d0c:	6883      	ldr	r3, [r0, #8]
 8003d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d12:	d039      	beq.n	8003d88 <HAL_SPI_Transmit_DMA+0xc0>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003d14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d16:	4a34      	ldr	r2, [pc, #208]	; (8003de8 <HAL_SPI_Transmit_DMA+0x120>)
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003d1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d1c:	4a33      	ldr	r2, [pc, #204]	; (8003dec <HAL_SPI_Transmit_DMA+0x124>)
 8003d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003d20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d22:	4a33      	ldr	r2, [pc, #204]	; (8003df0 <HAL_SPI_Transmit_DMA+0x128>)
 8003d24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8003d26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d28:	2200      	movs	r2, #0
 8003d2a:	651a      	str	r2, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003d2c:	6822      	ldr	r2, [r4, #0]
 8003d2e:	6853      	ldr	r3, [r2, #4]
 8003d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d34:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003d36:	68e3      	ldr	r3, [r4, #12]
 8003d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d3c:	d804      	bhi.n	8003d48 <HAL_SPI_Transmit_DMA+0x80>
 8003d3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d46:	d025      	beq.n	8003d94 <HAL_SPI_Transmit_DMA+0xcc>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	320c      	adds	r2, #12
 8003d50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d54:	f7fc fdf4 	bl	8000940 <HAL_DMA_Start_IT>
 8003d58:	4601      	mov	r1, r0
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d133      	bne.n	8003dc6 <HAL_SPI_Transmit_DMA+0xfe>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d66:	d103      	bne.n	8003d70 <HAL_SPI_Transmit_DMA+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d70:	6822      	ldr	r2, [r4, #0]
 8003d72:	6853      	ldr	r3, [r2, #4]
 8003d74:	f043 0320 	orr.w	r3, r3, #32
 8003d78:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	6853      	ldr	r3, [r2, #4]
 8003d7e:	f043 0302 	orr.w	r3, r3, #2
 8003d82:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d84:	460d      	mov	r5, r1
 8003d86:	e027      	b.n	8003dd8 <HAL_SPI_Transmit_DMA+0x110>
    SPI_1LINE_TX(hspi);
 8003d88:	6802      	ldr	r2, [r0, #0]
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e7bf      	b.n	8003d14 <HAL_SPI_Transmit_DMA+0x4c>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003d94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d96:	f013 0f01 	tst.w	r3, #1
 8003d9a:	d109      	bne.n	8003db0 <HAL_SPI_Transmit_DMA+0xe8>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003d9c:	6822      	ldr	r2, [r4, #0]
 8003d9e:	6853      	ldr	r3, [r2, #4]
 8003da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da4:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003da6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003da8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8003dac:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003dae:	e7cb      	b.n	8003d48 <HAL_SPI_Transmit_DMA+0x80>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003db0:	6822      	ldr	r2, [r4, #0]
 8003db2:	6853      	ldr	r3, [r2, #4]
 8003db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db8:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003dba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003dbc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003dc4:	e7c0      	b.n	8003d48 <HAL_SPI_Transmit_DMA+0x80>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003dc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003dc8:	f043 0310 	orr.w	r3, r3, #16
 8003dcc:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 8003dd4:	e000      	b.n	8003dd8 <HAL_SPI_Transmit_DMA+0x110>
    errorcode = HAL_BUSY;
 8003dd6:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003dde:	4628      	mov	r0, r5
 8003de0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 8003de2:	2502      	movs	r5, #2
 8003de4:	e7fb      	b.n	8003dde <HAL_SPI_Transmit_DMA+0x116>
 8003de6:	bf00      	nop
 8003de8:	08003df7 	.word	0x08003df7
 8003dec:	08003e25 	.word	0x08003e25
 8003df0:	08003e03 	.word	0x08003e03

08003df4 <HAL_SPI_TxHalfCpltCallback>:
}
 8003df4:	4770      	bx	lr

08003df6 <SPI_DMAHalfTransmitCplt>:
{
 8003df6:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003df8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003dfa:	f7ff fffb 	bl	8003df4 <HAL_SPI_TxHalfCpltCallback>
}
 8003dfe:	bd08      	pop	{r3, pc}

08003e00 <HAL_SPI_ErrorCallback>:
}
 8003e00:	4770      	bx	lr

08003e02 <SPI_DMAError>:
{
 8003e02:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e04:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e06:	6802      	ldr	r2, [r0, #0]
 8003e08:	6853      	ldr	r3, [r2, #4]
 8003e0a:	f023 0303 	bic.w	r3, r3, #3
 8003e0e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e10:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003e12:	f043 0310 	orr.w	r3, r3, #16
 8003e16:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8003e1e:	f7ff ffef 	bl	8003e00 <HAL_SPI_ErrorCallback>
}
 8003e22:	bd08      	pop	{r3, pc}

08003e24 <SPI_DMATransmitCplt>:
{
 8003e24:	b530      	push	{r4, r5, lr}
 8003e26:	b083      	sub	sp, #12
 8003e28:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e2a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8003e2c:	f7fc fc20 	bl	8000670 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e38:	d123      	bne.n	8003e82 <SPI_DMATransmitCplt+0x5e>
 8003e3a:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e3c:	6821      	ldr	r1, [r4, #0]
 8003e3e:	684b      	ldr	r3, [r1, #4]
 8003e40:	f023 0320 	bic.w	r3, r3, #32
 8003e44:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e46:	6821      	ldr	r1, [r4, #0]
 8003e48:	684b      	ldr	r3, [r1, #4]
 8003e4a:	f023 0302 	bic.w	r3, r3, #2
 8003e4e:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e50:	2164      	movs	r1, #100	; 0x64
 8003e52:	4620      	mov	r0, r4
 8003e54:	f7ff fc43 	bl	80036de <SPI_EndRxTxTransaction>
 8003e58:	b118      	cbz	r0, 8003e62 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e5c:	f043 0320 	orr.w	r3, r3, #32
 8003e60:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e62:	68a3      	ldr	r3, [r4, #8]
 8003e64:	b933      	cbnz	r3, 8003e74 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	9201      	str	r2, [sp, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e80:	b923      	cbnz	r3, 8003e8c <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8003e82:	4620      	mov	r0, r4
 8003e84:	f002 fb6e 	bl	8006564 <HAL_SPI_TxCpltCallback>
}
 8003e88:	b003      	add	sp, #12
 8003e8a:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7ff ffb7 	bl	8003e00 <HAL_SPI_ErrorCallback>
      return;
 8003e92:	e7f9      	b.n	8003e88 <SPI_DMATransmitCplt+0x64>

08003e94 <HAL_TIM_IC_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e94:	4770      	bx	lr

08003e96 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003e98:	4770      	bx	lr

08003e9a <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_TriggerHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_ErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003ea8:	4770      	bx	lr
	...

08003eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eae:	6a03      	ldr	r3, [r0, #32]
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eba:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ebc:	4c12      	ldr	r4, [pc, #72]	; (8003f08 <TIM_OC1_SetConfig+0x5c>)
 8003ebe:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec0:	680d      	ldr	r5, [r1, #0]
 8003ec2:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ec4:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ec8:	688b      	ldr	r3, [r1, #8]
 8003eca:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ecc:	4c0f      	ldr	r4, [pc, #60]	; (8003f0c <TIM_OC1_SetConfig+0x60>)
 8003ece:	4e10      	ldr	r6, [pc, #64]	; (8003f10 <TIM_OC1_SetConfig+0x64>)
 8003ed0:	42b0      	cmp	r0, r6
 8003ed2:	bf18      	it	ne
 8003ed4:	42a0      	cmpne	r0, r4
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2401      	moveq	r4, #1
 8003eda:	2400      	movne	r4, #0
 8003edc:	d105      	bne.n	8003eea <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ede:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ee2:	68ce      	ldr	r6, [r1, #12]
 8003ee4:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ee6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eea:	b12c      	cbz	r4, 8003ef8 <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ef0:	694c      	ldr	r4, [r1, #20]
 8003ef2:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ef4:	698a      	ldr	r2, [r1, #24]
 8003ef6:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003efa:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003efc:	684a      	ldr	r2, [r1, #4]
 8003efe:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f00:	6203      	str	r3, [r0, #32]
}
 8003f02:	bc70      	pop	{r4, r5, r6}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	fffeff8c 	.word	0xfffeff8c
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40010400 	.word	0x40010400

08003f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f16:	6a03      	ldr	r3, [r0, #32]
 8003f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f22:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f24:	4c14      	ldr	r4, [pc, #80]	; (8003f78 <TIM_OC3_SetConfig+0x64>)
 8003f26:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f28:	680e      	ldr	r6, [r1, #0]
 8003f2a:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f30:	688c      	ldr	r4, [r1, #8]
 8003f32:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f36:	4c11      	ldr	r4, [pc, #68]	; (8003f7c <TIM_OC3_SetConfig+0x68>)
 8003f38:	4d11      	ldr	r5, [pc, #68]	; (8003f80 <TIM_OC3_SetConfig+0x6c>)
 8003f3a:	42a8      	cmp	r0, r5
 8003f3c:	bf18      	it	ne
 8003f3e:	42a0      	cmpne	r0, r4
 8003f40:	bf0c      	ite	eq
 8003f42:	2401      	moveq	r4, #1
 8003f44:	2400      	movne	r4, #0
 8003f46:	d106      	bne.n	8003f56 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f4c:	68cd      	ldr	r5, [r1, #12]
 8003f4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f56:	b13c      	cbz	r4, 8003f68 <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f5c:	694c      	ldr	r4, [r1, #20]
 8003f5e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f62:	698c      	ldr	r4, [r1, #24]
 8003f64:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f68:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f6a:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f6c:	684a      	ldr	r2, [r1, #4]
 8003f6e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f70:	6203      	str	r3, [r0, #32]
}
 8003f72:	bc70      	pop	{r4, r5, r6}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	fffeff8c 	.word	0xfffeff8c
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	40010400 	.word	0x40010400

08003f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f86:	6a03      	ldr	r3, [r0, #32]
 8003f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f92:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <TIM_OC4_SetConfig+0x48>)
 8003f96:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f98:	680d      	ldr	r5, [r1, #0]
 8003f9a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fa2:	688d      	ldr	r5, [r1, #8]
 8003fa4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa8:	4e09      	ldr	r6, [pc, #36]	; (8003fd0 <TIM_OC4_SetConfig+0x4c>)
 8003faa:	4d0a      	ldr	r5, [pc, #40]	; (8003fd4 <TIM_OC4_SetConfig+0x50>)
 8003fac:	42a8      	cmp	r0, r5
 8003fae:	bf18      	it	ne
 8003fb0:	42b0      	cmpne	r0, r6
 8003fb2:	d104      	bne.n	8003fbe <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fb4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fb8:	694d      	ldr	r5, [r1, #20]
 8003fba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc2:	684a      	ldr	r2, [r1, #4]
 8003fc4:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc6:	6203      	str	r3, [r0, #32]
}
 8003fc8:	bc70      	pop	{r4, r5, r6}
 8003fca:	4770      	bx	lr
 8003fcc:	feff8cff 	.word	0xfeff8cff
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40010400 	.word	0x40010400

08003fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fd8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fda:	6a03      	ldr	r3, [r0, #32]
 8003fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fe6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fe8:	4d0d      	ldr	r5, [pc, #52]	; (8004020 <TIM_OC5_SetConfig+0x48>)
 8003fea:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fec:	680a      	ldr	r2, [r1, #0]
 8003fee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ff0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ff4:	688d      	ldr	r5, [r1, #8]
 8003ff6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffa:	4e0a      	ldr	r6, [pc, #40]	; (8004024 <TIM_OC5_SetConfig+0x4c>)
 8003ffc:	4d0a      	ldr	r5, [pc, #40]	; (8004028 <TIM_OC5_SetConfig+0x50>)
 8003ffe:	42a8      	cmp	r0, r5
 8004000:	bf18      	it	ne
 8004002:	42b0      	cmpne	r0, r6
 8004004:	d104      	bne.n	8004010 <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004006:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800400a:	694d      	ldr	r5, [r1, #20]
 800400c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004010:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004012:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004014:	684a      	ldr	r2, [r1, #4]
 8004016:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004018:	6203      	str	r3, [r0, #32]
}
 800401a:	bc70      	pop	{r4, r5, r6}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	fffeff8f 	.word	0xfffeff8f
 8004024:	40010000 	.word	0x40010000
 8004028:	40010400 	.word	0x40010400

0800402c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800402e:	6a03      	ldr	r3, [r0, #32]
 8004030:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004034:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004038:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800403a:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <TIM_OC6_SetConfig+0x48>)
 800403e:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004040:	680d      	ldr	r5, [r1, #0]
 8004042:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800404a:	688d      	ldr	r5, [r1, #8]
 800404c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004050:	4e09      	ldr	r6, [pc, #36]	; (8004078 <TIM_OC6_SetConfig+0x4c>)
 8004052:	4d0a      	ldr	r5, [pc, #40]	; (800407c <TIM_OC6_SetConfig+0x50>)
 8004054:	42a8      	cmp	r0, r5
 8004056:	bf18      	it	ne
 8004058:	42b0      	cmpne	r0, r6
 800405a:	d104      	bne.n	8004066 <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800405c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004060:	694d      	ldr	r5, [r1, #20]
 8004062:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004068:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800406a:	684a      	ldr	r2, [r1, #4]
 800406c:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406e:	6203      	str	r3, [r0, #32]
}
 8004070:	bc70      	pop	{r4, r5, r6}
 8004072:	4770      	bx	lr
 8004074:	feff8fff 	.word	0xfeff8fff
 8004078:	40010000 	.word	0x40010000
 800407c:	40010400 	.word	0x40010400

08004080 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004080:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004082:	6a04      	ldr	r4, [r0, #32]
 8004084:	f024 0410 	bic.w	r4, r4, #16
 8004088:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800408c:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800408e:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004092:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004096:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800409a:	031b      	lsls	r3, r3, #12
 800409c:	b29b      	uxth	r3, r3
 800409e:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a2:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040a6:	0109      	lsls	r1, r1, #4
 80040a8:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 80040ac:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ae:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80040b0:	6201      	str	r1, [r0, #32]
}
 80040b2:	bc30      	pop	{r4, r5}
 80040b4:	4770      	bx	lr

080040b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040b6:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040b8:	6a04      	ldr	r4, [r0, #32]
 80040ba:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80040be:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040c0:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80040c2:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040c4:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80040c8:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040cc:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80040d8:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80040dc:	0209      	lsls	r1, r1, #8
 80040de:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 80040e2:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040e4:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 80040e6:	6201      	str	r1, [r0, #32]
}
 80040e8:	bc30      	pop	{r4, r5}
 80040ea:	4770      	bx	lr

080040ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040ec:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ee:	6a04      	ldr	r4, [r0, #32]
 80040f0:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80040f4:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040f6:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80040f8:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80040fa:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80040fe:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004102:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004106:	031b      	lsls	r3, r3, #12
 8004108:	b29b      	uxth	r3, r3
 800410a:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800410e:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004112:	0309      	lsls	r1, r1, #12
 8004114:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8004118:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800411a:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800411c:	6201      	str	r1, [r0, #32]
}
 800411e:	bc30      	pop	{r4, r5}
 8004120:	4770      	bx	lr

08004122 <HAL_TIM_IRQHandler>:
{
 8004122:	b510      	push	{r4, lr}
 8004124:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004126:	6803      	ldr	r3, [r0, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	f012 0f02 	tst.w	r2, #2
 800412e:	d013      	beq.n	8004158 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	f012 0f02 	tst.w	r2, #2
 8004136:	d00f      	beq.n	8004158 <HAL_TIM_IRQHandler+0x36>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004138:	f06f 0202 	mvn.w	r2, #2
 800413c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413e:	2301      	movs	r3, #1
 8004140:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004142:	6803      	ldr	r3, [r0, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f013 0f03 	tst.w	r3, #3
 800414a:	f000 80a1 	beq.w	8004290 <HAL_TIM_IRQHandler+0x16e>
          htim->IC_CaptureCallback(htim);
 800414e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004152:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004154:	2300      	movs	r3, #0
 8004156:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	f012 0f04 	tst.w	r2, #4
 8004160:	d014      	beq.n	800418c <HAL_TIM_IRQHandler+0x6a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	f012 0f04 	tst.w	r2, #4
 8004168:	d010      	beq.n	800418c <HAL_TIM_IRQHandler+0x6a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416a:	f06f 0204 	mvn.w	r2, #4
 800416e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004170:	2302      	movs	r3, #2
 8004172:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f413 7f40 	tst.w	r3, #768	; 0x300
 800417c:	f000 8090 	beq.w	80042a0 <HAL_TIM_IRQHandler+0x17e>
        htim->IC_CaptureCallback(htim);
 8004180:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004184:	4620      	mov	r0, r4
 8004186:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004188:	2300      	movs	r3, #0
 800418a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	f012 0f08 	tst.w	r2, #8
 8004194:	d013      	beq.n	80041be <HAL_TIM_IRQHandler+0x9c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	f012 0f08 	tst.w	r2, #8
 800419c:	d00f      	beq.n	80041be <HAL_TIM_IRQHandler+0x9c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800419e:	f06f 0208 	mvn.w	r2, #8
 80041a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a4:	2304      	movs	r3, #4
 80041a6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	f013 0f03 	tst.w	r3, #3
 80041b0:	d07f      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x190>
        htim->IC_CaptureCallback(htim);
 80041b2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80041b6:	4620      	mov	r0, r4
 80041b8:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	2300      	movs	r3, #0
 80041bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	f012 0f10 	tst.w	r2, #16
 80041c6:	d013      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	f012 0f10 	tst.w	r2, #16
 80041ce:	d00f      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041d0:	f06f 0210 	mvn.w	r2, #16
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d6:	2308      	movs	r3, #8
 80041d8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80041e2:	d06f      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x1a2>
        htim->IC_CaptureCallback(htim);
 80041e4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80041e8:	4620      	mov	r0, r4
 80041ea:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ec:	2300      	movs	r3, #0
 80041ee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	f012 0f01 	tst.w	r2, #1
 80041f8:	d009      	beq.n	800420e <HAL_TIM_IRQHandler+0xec>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	f012 0f01 	tst.w	r2, #1
 8004200:	d005      	beq.n	800420e <HAL_TIM_IRQHandler+0xec>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004202:	f06f 0201 	mvn.w	r2, #1
 8004206:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 8004208:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800420a:	4620      	mov	r0, r4
 800420c:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004216:	d00a      	beq.n	800422e <HAL_TIM_IRQHandler+0x10c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800421e:	d006      	beq.n	800422e <HAL_TIM_IRQHandler+0x10c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004224:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 8004226:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800422a:	4620      	mov	r0, r4
 800422c:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004236:	d00a      	beq.n	800424e <HAL_TIM_IRQHandler+0x12c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800423e:	d006      	beq.n	800424e <HAL_TIM_IRQHandler+0x12c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004240:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004244:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 8004246:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800424a:	4620      	mov	r0, r4
 800424c:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004256:	d00a      	beq.n	800426e <HAL_TIM_IRQHandler+0x14c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800425e:	d006      	beq.n	800426e <HAL_TIM_IRQHandler+0x14c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004260:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004264:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8004266:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800426a:	4620      	mov	r0, r4
 800426c:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	f012 0f20 	tst.w	r2, #32
 8004276:	d00a      	beq.n	800428e <HAL_TIM_IRQHandler+0x16c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	f012 0f20 	tst.w	r2, #32
 800427e:	d006      	beq.n	800428e <HAL_TIM_IRQHandler+0x16c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004280:	f06f 0220 	mvn.w	r2, #32
 8004284:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 8004286:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800428a:	4620      	mov	r0, r4
 800428c:	4798      	blx	r3
}
 800428e:	bd10      	pop	{r4, pc}
          htim->OC_DelayElapsedCallback(htim);
 8004290:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8004294:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004296:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800429a:	4620      	mov	r0, r4
 800429c:	4798      	blx	r3
 800429e:	e759      	b.n	8004154 <HAL_TIM_IRQHandler+0x32>
        htim->OC_DelayElapsedCallback(htim);
 80042a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042a4:	4620      	mov	r0, r4
 80042a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80042a8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80042ac:	4620      	mov	r0, r4
 80042ae:	4798      	blx	r3
 80042b0:	e76a      	b.n	8004188 <HAL_TIM_IRQHandler+0x66>
        htim->OC_DelayElapsedCallback(htim);
 80042b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042b6:	4620      	mov	r0, r4
 80042b8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80042ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80042be:	4620      	mov	r0, r4
 80042c0:	4798      	blx	r3
 80042c2:	e77a      	b.n	80041ba <HAL_TIM_IRQHandler+0x98>
        htim->OC_DelayElapsedCallback(htim);
 80042c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042c8:	4620      	mov	r0, r4
 80042ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80042cc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80042d0:	4620      	mov	r0, r4
 80042d2:	4798      	blx	r3
 80042d4:	e78a      	b.n	80041ec <HAL_TIM_IRQHandler+0xca>

080042d6 <HAL_TIM_RegisterCallback>:
  if (pCallback == NULL)
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	f000 80bc 	beq.w	8004454 <HAL_TIM_RegisterCallback+0x17e>
{
 80042dc:	b410      	push	{r4}
 80042de:	4603      	mov	r3, r0
 80042e0:	4614      	mov	r4, r2
  __HAL_LOCK(htim);
 80042e2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80042e6:	2a01      	cmp	r2, #1
 80042e8:	f000 80b6 	beq.w	8004458 <HAL_TIM_RegisterCallback+0x182>
 80042ec:	2201      	movs	r2, #1
 80042ee:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (htim->State == HAL_TIM_STATE_READY)
 80042f2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80042f6:	b2c0      	uxtb	r0, r0
 80042f8:	4290      	cmp	r0, r2
 80042fa:	d012      	beq.n	8004322 <HAL_TIM_RegisterCallback+0x4c>
  else if (htim->State == HAL_TIM_STATE_RESET)
 80042fc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8004300:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8004304:	2a00      	cmp	r2, #0
 8004306:	f040 809c 	bne.w	8004442 <HAL_TIM_RegisterCallback+0x16c>
    switch (CallbackID)
 800430a:	290d      	cmp	r1, #13
 800430c:	f200 80a0 	bhi.w	8004450 <HAL_TIM_RegisterCallback+0x17a>
 8004310:	e8df f001 	tbb	[pc, r1]
 8004314:	817f7d7a 	.word	0x817f7d7a
 8004318:	89878583 	.word	0x89878583
 800431c:	918f8d8b 	.word	0x918f8d8b
 8004320:	9593      	.short	0x9593
    switch (CallbackID)
 8004322:	291b      	cmp	r1, #27
 8004324:	f200 808e 	bhi.w	8004444 <HAL_TIM_RegisterCallback+0x16e>
 8004328:	e8df f001 	tbb	[pc, r1]
 800432c:	1714110e 	.word	0x1714110e
 8004330:	23201d1a 	.word	0x23201d1a
 8004334:	2f2c2926 	.word	0x2f2c2926
 8004338:	3b383532 	.word	0x3b383532
 800433c:	4a46423e 	.word	0x4a46423e
 8004340:	5a56524e 	.word	0x5a56524e
 8004344:	6a66625e 	.word	0x6a66625e
        htim->Base_MspInitCallback                 = pCallback;
 8004348:	641c      	str	r4, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 800434a:	4608      	mov	r0, r1
        break;
 800434c:	e07a      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->Base_MspDeInitCallback               = pCallback;
 800434e:	645c      	str	r4, [r3, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8004350:	2000      	movs	r0, #0
        break;
 8004352:	e077      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_MspInitCallback                   = pCallback;
 8004354:	649c      	str	r4, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	2000      	movs	r0, #0
        break;
 8004358:	e074      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_MspDeInitCallback                 = pCallback;
 800435a:	64dc      	str	r4, [r3, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	2000      	movs	r0, #0
        break;
 800435e:	e071      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->OC_MspInitCallback                   = pCallback;
 8004360:	651c      	str	r4, [r3, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2000      	movs	r0, #0
        break;
 8004364:	e06e      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->OC_MspDeInitCallback                 = pCallback;
 8004366:	655c      	str	r4, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	2000      	movs	r0, #0
        break;
 800436a:	e06b      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_MspInitCallback                  = pCallback;
 800436c:	659c      	str	r4, [r3, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2000      	movs	r0, #0
        break;
 8004370:	e068      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_MspDeInitCallback                = pCallback;
 8004372:	65dc      	str	r4, [r3, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8004374:	2000      	movs	r0, #0
        break;
 8004376:	e065      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->OnePulse_MspInitCallback             = pCallback;
 8004378:	661c      	str	r4, [r3, #96]	; 0x60
  HAL_StatusTypeDef status = HAL_OK;
 800437a:	2000      	movs	r0, #0
        break;
 800437c:	e062      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800437e:	665c      	str	r4, [r3, #100]	; 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2000      	movs	r0, #0
        break;
 8004382:	e05f      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->Encoder_MspInitCallback              = pCallback;
 8004384:	669c      	str	r4, [r3, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2000      	movs	r0, #0
        break;
 8004388:	e05c      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->Encoder_MspDeInitCallback            = pCallback;
 800438a:	66dc      	str	r4, [r3, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800438c:	2000      	movs	r0, #0
        break;
 800438e:	e059      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->HallSensor_MspInitCallback           = pCallback;
 8004390:	671c      	str	r4, [r3, #112]	; 0x70
  HAL_StatusTypeDef status = HAL_OK;
 8004392:	2000      	movs	r0, #0
        break;
 8004394:	e056      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004396:	675c      	str	r4, [r3, #116]	; 0x74
  HAL_StatusTypeDef status = HAL_OK;
 8004398:	2000      	movs	r0, #0
        break;
 800439a:	e053      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->PeriodElapsedCallback                = pCallback;
 800439c:	679c      	str	r4, [r3, #120]	; 0x78
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2000      	movs	r0, #0
        break;
 80043a0:	e050      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80043a2:	67dc      	str	r4, [r3, #124]	; 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2000      	movs	r0, #0
        break;
 80043a6:	e04d      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->TriggerCallback                      = pCallback;
 80043a8:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	2000      	movs	r0, #0
        break;
 80043ae:	e049      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->TriggerHalfCpltCallback              = pCallback;
 80043b0:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2000      	movs	r0, #0
        break;
 80043b6:	e045      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_CaptureCallback                   = pCallback;
 80043b8:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;
 80043bc:	2000      	movs	r0, #0
        break;
 80043be:	e041      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80043c0:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2000      	movs	r0, #0
        break;
 80043c6:	e03d      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->OC_DelayElapsedCallback              = pCallback;
 80043c8:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;
 80043cc:	2000      	movs	r0, #0
        break;
 80043ce:	e039      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_PulseFinishedCallback            = pCallback;
 80043d0:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	2000      	movs	r0, #0
        break;
 80043d6:	e035      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80043d8:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
  HAL_StatusTypeDef status = HAL_OK;
 80043dc:	2000      	movs	r0, #0
        break;
 80043de:	e031      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->ErrorCallback                        = pCallback;
 80043e0:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 80043e4:	2000      	movs	r0, #0
        break;
 80043e6:	e02d      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->CommutationCallback                  = pCallback;
 80043e8:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 80043ec:	2000      	movs	r0, #0
        break;
 80043ee:	e029      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->CommutationHalfCpltCallback          = pCallback;
 80043f0:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 80043f4:	2000      	movs	r0, #0
        break;
 80043f6:	e025      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->BreakCallback                        = pCallback;
 80043f8:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 80043fc:	2000      	movs	r0, #0
        break;
 80043fe:	e021      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->Break2Callback                       = pCallback;
 8004400:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  HAL_StatusTypeDef status = HAL_OK;
 8004404:	2000      	movs	r0, #0
        break;
 8004406:	e01d      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->Base_MspInitCallback         = pCallback;
 8004408:	641c      	str	r4, [r3, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 800440a:	4608      	mov	r0, r1
        break;
 800440c:	e01a      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->Base_MspDeInitCallback       = pCallback;
 800440e:	645c      	str	r4, [r3, #68]	; 0x44
        break;
 8004410:	e018      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_MspInitCallback           = pCallback;
 8004412:	649c      	str	r4, [r3, #72]	; 0x48
        break;
 8004414:	e016      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->IC_MspDeInitCallback         = pCallback;
 8004416:	64dc      	str	r4, [r3, #76]	; 0x4c
        break;
 8004418:	e014      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->OC_MspInitCallback           = pCallback;
 800441a:	651c      	str	r4, [r3, #80]	; 0x50
        break;
 800441c:	e012      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->OC_MspDeInitCallback         = pCallback;
 800441e:	655c      	str	r4, [r3, #84]	; 0x54
        break;
 8004420:	e010      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_MspInitCallback          = pCallback;
 8004422:	659c      	str	r4, [r3, #88]	; 0x58
        break;
 8004424:	e00e      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->PWM_MspDeInitCallback        = pCallback;
 8004426:	65dc      	str	r4, [r3, #92]	; 0x5c
        break;
 8004428:	e00c      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->OnePulse_MspInitCallback     = pCallback;
 800442a:	661c      	str	r4, [r3, #96]	; 0x60
        break;
 800442c:	e00a      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800442e:	665c      	str	r4, [r3, #100]	; 0x64
        break;
 8004430:	e008      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->Encoder_MspInitCallback      = pCallback;
 8004432:	669c      	str	r4, [r3, #104]	; 0x68
        break;
 8004434:	e006      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004436:	66dc      	str	r4, [r3, #108]	; 0x6c
        break;
 8004438:	e004      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->HallSensor_MspInitCallback   = pCallback;
 800443a:	671c      	str	r4, [r3, #112]	; 0x70
        break;
 800443c:	e002      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
        htim->HallSensor_MspDeInitCallback = pCallback;
 800443e:	675c      	str	r4, [r3, #116]	; 0x74
        break;
 8004440:	e000      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
    status =  HAL_ERROR;
 8004442:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800444a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800444e:	4770      	bx	lr
    switch (CallbackID)
 8004450:	2001      	movs	r0, #1
 8004452:	e7f7      	b.n	8004444 <HAL_TIM_RegisterCallback+0x16e>
    return HAL_ERROR;
 8004454:	2001      	movs	r0, #1
}
 8004456:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004458:	2002      	movs	r0, #2
 800445a:	e7f6      	b.n	800444a <HAL_TIM_RegisterCallback+0x174>

0800445c <TIM_Base_SetConfig>:
{
 800445c:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800445e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004460:	4a3b      	ldr	r2, [pc, #236]	; (8004550 <TIM_Base_SetConfig+0xf4>)
 8004462:	4290      	cmp	r0, r2
 8004464:	bf14      	ite	ne
 8004466:	f04f 0e00 	movne.w	lr, #0
 800446a:	f04f 0e01 	moveq.w	lr, #1
 800446e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004472:	bf14      	ite	ne
 8004474:	4672      	movne	r2, lr
 8004476:	f04e 0201 	orreq.w	r2, lr, #1
 800447a:	b9aa      	cbnz	r2, 80044a8 <TIM_Base_SetConfig+0x4c>
 800447c:	4c35      	ldr	r4, [pc, #212]	; (8004554 <TIM_Base_SetConfig+0xf8>)
 800447e:	42a0      	cmp	r0, r4
 8004480:	bf14      	ite	ne
 8004482:	2400      	movne	r4, #0
 8004484:	2401      	moveq	r4, #1
 8004486:	4d34      	ldr	r5, [pc, #208]	; (8004558 <TIM_Base_SetConfig+0xfc>)
 8004488:	42a8      	cmp	r0, r5
 800448a:	d00d      	beq.n	80044a8 <TIM_Base_SetConfig+0x4c>
 800448c:	b964      	cbnz	r4, 80044a8 <TIM_Base_SetConfig+0x4c>
 800448e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004492:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8004496:	42a0      	cmp	r0, r4
 8004498:	bf14      	ite	ne
 800449a:	2400      	movne	r4, #0
 800449c:	2401      	moveq	r4, #1
 800449e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80044a2:	42a8      	cmp	r0, r5
 80044a4:	d000      	beq.n	80044a8 <TIM_Base_SetConfig+0x4c>
 80044a6:	b11c      	cbz	r4, 80044b0 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044ac:	684c      	ldr	r4, [r1, #4]
 80044ae:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b0:	2a00      	cmp	r2, #0
 80044b2:	d133      	bne.n	800451c <TIM_Base_SetConfig+0xc0>
 80044b4:	4a27      	ldr	r2, [pc, #156]	; (8004554 <TIM_Base_SetConfig+0xf8>)
 80044b6:	4290      	cmp	r0, r2
 80044b8:	bf14      	ite	ne
 80044ba:	2200      	movne	r2, #0
 80044bc:	2201      	moveq	r2, #1
 80044be:	4c26      	ldr	r4, [pc, #152]	; (8004558 <TIM_Base_SetConfig+0xfc>)
 80044c0:	42a0      	cmp	r0, r4
 80044c2:	d02b      	beq.n	800451c <TIM_Base_SetConfig+0xc0>
 80044c4:	bb52      	cbnz	r2, 800451c <TIM_Base_SetConfig+0xc0>
 80044c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80044ca:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 80044ce:	4290      	cmp	r0, r2
 80044d0:	bf14      	ite	ne
 80044d2:	2200      	movne	r2, #0
 80044d4:	2201      	moveq	r2, #1
 80044d6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80044da:	42a0      	cmp	r0, r4
 80044dc:	d01e      	beq.n	800451c <TIM_Base_SetConfig+0xc0>
 80044de:	b9ea      	cbnz	r2, 800451c <TIM_Base_SetConfig+0xc0>
 80044e0:	4a1e      	ldr	r2, [pc, #120]	; (800455c <TIM_Base_SetConfig+0x100>)
 80044e2:	4290      	cmp	r0, r2
 80044e4:	bf14      	ite	ne
 80044e6:	2200      	movne	r2, #0
 80044e8:	2201      	moveq	r2, #1
 80044ea:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80044ee:	42a0      	cmp	r0, r4
 80044f0:	d014      	beq.n	800451c <TIM_Base_SetConfig+0xc0>
 80044f2:	b99a      	cbnz	r2, 800451c <TIM_Base_SetConfig+0xc0>
 80044f4:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <TIM_Base_SetConfig+0x104>)
 80044f6:	4290      	cmp	r0, r2
 80044f8:	bf14      	ite	ne
 80044fa:	2200      	movne	r2, #0
 80044fc:	2201      	moveq	r2, #1
 80044fe:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004502:	42a0      	cmp	r0, r4
 8004504:	d00a      	beq.n	800451c <TIM_Base_SetConfig+0xc0>
 8004506:	b94a      	cbnz	r2, 800451c <TIM_Base_SetConfig+0xc0>
 8004508:	4a16      	ldr	r2, [pc, #88]	; (8004564 <TIM_Base_SetConfig+0x108>)
 800450a:	4290      	cmp	r0, r2
 800450c:	bf14      	ite	ne
 800450e:	2200      	movne	r2, #0
 8004510:	2201      	moveq	r2, #1
 8004512:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8004516:	42a0      	cmp	r0, r4
 8004518:	d000      	beq.n	800451c <TIM_Base_SetConfig+0xc0>
 800451a:	b122      	cbz	r2, 8004526 <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 800451c:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004520:	68cb      	ldr	r3, [r1, #12]
 8004522:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452a:	694a      	ldr	r2, [r1, #20]
 800452c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800452e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004530:	688a      	ldr	r2, [r1, #8]
 8004532:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004534:	680a      	ldr	r2, [r1, #0]
 8004536:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004538:	4a0b      	ldr	r2, [pc, #44]	; (8004568 <TIM_Base_SetConfig+0x10c>)
 800453a:	4290      	cmp	r0, r2
 800453c:	bf14      	ite	ne
 800453e:	4673      	movne	r3, lr
 8004540:	f04e 0301 	orreq.w	r3, lr, #1
 8004544:	b10b      	cbz	r3, 800454a <TIM_Base_SetConfig+0xee>
    TIMx->RCR = Structure->RepetitionCounter;
 8004546:	690b      	ldr	r3, [r1, #16]
 8004548:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800454a:	2301      	movs	r3, #1
 800454c:	6143      	str	r3, [r0, #20]
}
 800454e:	bd30      	pop	{r4, r5, pc}
 8004550:	40010000 	.word	0x40010000
 8004554:	40000800 	.word	0x40000800
 8004558:	40000400 	.word	0x40000400
 800455c:	40014400 	.word	0x40014400
 8004560:	40001800 	.word	0x40001800
 8004564:	40002000 	.word	0x40002000
 8004568:	40010400 	.word	0x40010400

0800456c <TIM_OC2_SetConfig>:
{
 800456c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800456e:	6a03      	ldr	r3, [r0, #32]
 8004570:	f023 0310 	bic.w	r3, r3, #16
 8004574:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004576:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004578:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800457a:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800457c:	4c14      	ldr	r4, [pc, #80]	; (80045d0 <TIM_OC2_SetConfig+0x64>)
 800457e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004580:	680d      	ldr	r5, [r1, #0]
 8004582:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004586:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800458a:	688c      	ldr	r4, [r1, #8]
 800458c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004590:	4c10      	ldr	r4, [pc, #64]	; (80045d4 <TIM_OC2_SetConfig+0x68>)
 8004592:	4e11      	ldr	r6, [pc, #68]	; (80045d8 <TIM_OC2_SetConfig+0x6c>)
 8004594:	42b0      	cmp	r0, r6
 8004596:	bf18      	it	ne
 8004598:	42a0      	cmpne	r0, r4
 800459a:	bf0c      	ite	eq
 800459c:	2401      	moveq	r4, #1
 800459e:	2400      	movne	r4, #0
 80045a0:	d106      	bne.n	80045b0 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 80045a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045a6:	68ce      	ldr	r6, [r1, #12]
 80045a8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80045ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b0:	b13c      	cbz	r4, 80045c2 <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045b6:	694c      	ldr	r4, [r1, #20]
 80045b8:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045bc:	698c      	ldr	r4, [r1, #24]
 80045be:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80045c2:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80045c4:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80045c6:	684a      	ldr	r2, [r1, #4]
 80045c8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80045ca:	6203      	str	r3, [r0, #32]
}
 80045cc:	bc70      	pop	{r4, r5, r6}
 80045ce:	4770      	bx	lr
 80045d0:	feff8cff 	.word	0xfeff8cff
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40010400 	.word	0x40010400

080045dc <HAL_TIM_PWM_ConfigChannel>:
{
 80045dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80045de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	f000 8092 	beq.w	800470c <HAL_TIM_PWM_ConfigChannel+0x130>
 80045e8:	4604      	mov	r4, r0
 80045ea:	460d      	mov	r5, r1
 80045ec:	2301      	movs	r3, #1
 80045ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80045f2:	2302      	movs	r3, #2
 80045f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80045f8:	2a14      	cmp	r2, #20
 80045fa:	d81e      	bhi.n	800463a <HAL_TIM_PWM_ConfigChannel+0x5e>
 80045fc:	e8df f002 	tbb	[pc, r2]
 8004600:	1d1d1d0b 	.word	0x1d1d1d0b
 8004604:	1d1d1d24 	.word	0x1d1d1d24
 8004608:	1d1d1d38 	.word	0x1d1d1d38
 800460c:	1d1d1d4b 	.word	0x1d1d1d4b
 8004610:	1d1d1d5f 	.word	0x1d1d1d5f
 8004614:	72          	.byte	0x72
 8004615:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004616:	6800      	ldr	r0, [r0, #0]
 8004618:	f7ff fc48 	bl	8003eac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	6993      	ldr	r3, [r2, #24]
 8004620:	f043 0308 	orr.w	r3, r3, #8
 8004624:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	6993      	ldr	r3, [r2, #24]
 800462a:	f023 0304 	bic.w	r3, r3, #4
 800462e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004630:	6822      	ldr	r2, [r4, #0]
 8004632:	6993      	ldr	r3, [r2, #24]
 8004634:	6929      	ldr	r1, [r5, #16]
 8004636:	430b      	orrs	r3, r1
 8004638:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800463a:	2301      	movs	r3, #1
 800463c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004640:	2000      	movs	r0, #0
 8004642:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004646:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004648:	6800      	ldr	r0, [r0, #0]
 800464a:	f7ff ff8f 	bl	800456c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	6993      	ldr	r3, [r2, #24]
 8004652:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004656:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004658:	6822      	ldr	r2, [r4, #0]
 800465a:	6993      	ldr	r3, [r2, #24]
 800465c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004660:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	6993      	ldr	r3, [r2, #24]
 8004666:	6929      	ldr	r1, [r5, #16]
 8004668:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800466c:	6193      	str	r3, [r2, #24]
      break;
 800466e:	e7e4      	b.n	800463a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004670:	6800      	ldr	r0, [r0, #0]
 8004672:	f7ff fc4f 	bl	8003f14 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	69d3      	ldr	r3, [r2, #28]
 800467a:	f043 0308 	orr.w	r3, r3, #8
 800467e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004680:	6822      	ldr	r2, [r4, #0]
 8004682:	69d3      	ldr	r3, [r2, #28]
 8004684:	f023 0304 	bic.w	r3, r3, #4
 8004688:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800468a:	6822      	ldr	r2, [r4, #0]
 800468c:	69d3      	ldr	r3, [r2, #28]
 800468e:	6929      	ldr	r1, [r5, #16]
 8004690:	430b      	orrs	r3, r1
 8004692:	61d3      	str	r3, [r2, #28]
      break;
 8004694:	e7d1      	b.n	800463a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004696:	6800      	ldr	r0, [r0, #0]
 8004698:	f7ff fc74 	bl	8003f84 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	69d3      	ldr	r3, [r2, #28]
 80046a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046a4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	69d3      	ldr	r3, [r2, #28]
 80046aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046b0:	6822      	ldr	r2, [r4, #0]
 80046b2:	69d3      	ldr	r3, [r2, #28]
 80046b4:	6929      	ldr	r1, [r5, #16]
 80046b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80046ba:	61d3      	str	r3, [r2, #28]
      break;
 80046bc:	e7bd      	b.n	800463a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046be:	6800      	ldr	r0, [r0, #0]
 80046c0:	f7ff fc8a 	bl	8003fd8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80046c8:	f043 0308 	orr.w	r3, r3, #8
 80046cc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80046d2:	f023 0304 	bic.w	r3, r3, #4
 80046d6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80046dc:	6929      	ldr	r1, [r5, #16]
 80046de:	430b      	orrs	r3, r1
 80046e0:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80046e2:	e7aa      	b.n	800463a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046e4:	6800      	ldr	r0, [r0, #0]
 80046e6:	f7ff fca1 	bl	800402c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046ea:	6822      	ldr	r2, [r4, #0]
 80046ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80046ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046f2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046f4:	6822      	ldr	r2, [r4, #0]
 80046f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80046f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046fc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046fe:	6822      	ldr	r2, [r4, #0]
 8004700:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004702:	6929      	ldr	r1, [r5, #16]
 8004704:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004708:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800470a:	e796      	b.n	800463a <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 800470c:	2002      	movs	r0, #2
 800470e:	e79a      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x6a>

08004710 <TIM_TI1_SetConfig>:
{
 8004710:	b470      	push	{r4, r5, r6}
 8004712:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004714:	6a04      	ldr	r4, [r0, #32]
 8004716:	f024 0401 	bic.w	r4, r4, #1
 800471a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800471c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800471e:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004720:	4d1d      	ldr	r5, [pc, #116]	; (8004798 <TIM_TI1_SetConfig+0x88>)
 8004722:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004726:	bf18      	it	ne
 8004728:	42a8      	cmpne	r0, r5
 800472a:	d023      	beq.n	8004774 <TIM_TI1_SetConfig+0x64>
 800472c:	4a1b      	ldr	r2, [pc, #108]	; (800479c <TIM_TI1_SetConfig+0x8c>)
 800472e:	4290      	cmp	r0, r2
 8004730:	bf14      	ite	ne
 8004732:	2200      	movne	r2, #0
 8004734:	2201      	moveq	r2, #1
 8004736:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 800473a:	42a8      	cmp	r0, r5
 800473c:	d01a      	beq.n	8004774 <TIM_TI1_SetConfig+0x64>
 800473e:	b9ca      	cbnz	r2, 8004774 <TIM_TI1_SetConfig+0x64>
 8004740:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004744:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8004748:	4290      	cmp	r0, r2
 800474a:	bf14      	ite	ne
 800474c:	2200      	movne	r2, #0
 800474e:	2201      	moveq	r2, #1
 8004750:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004754:	42a8      	cmp	r0, r5
 8004756:	d00d      	beq.n	8004774 <TIM_TI1_SetConfig+0x64>
 8004758:	b962      	cbnz	r2, 8004774 <TIM_TI1_SetConfig+0x64>
 800475a:	4a11      	ldr	r2, [pc, #68]	; (80047a0 <TIM_TI1_SetConfig+0x90>)
 800475c:	4290      	cmp	r0, r2
 800475e:	bf14      	ite	ne
 8004760:	2200      	movne	r2, #0
 8004762:	2201      	moveq	r2, #1
 8004764:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8004768:	42a8      	cmp	r0, r5
 800476a:	d003      	beq.n	8004774 <TIM_TI1_SetConfig+0x64>
 800476c:	b912      	cbnz	r2, 8004774 <TIM_TI1_SetConfig+0x64>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800476e:	f044 0201 	orr.w	r2, r4, #1
 8004772:	e003      	b.n	800477c <TIM_TI1_SetConfig+0x6c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004774:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004778:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800477c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	b2db      	uxtb	r3, r3
 8004784:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004786:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800478a:	f001 010a 	and.w	r1, r1, #10
 800478e:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8004790:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004792:	6201      	str	r1, [r0, #32]
}
 8004794:	bc70      	pop	{r4, r5, r6}
 8004796:	4770      	bx	lr
 8004798:	40010000 	.word	0x40010000
 800479c:	40000800 	.word	0x40000800
 80047a0:	40001800 	.word	0x40001800

080047a4 <HAL_TIM_IC_ConfigChannel>:
{
 80047a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80047a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d058      	beq.n	8004860 <HAL_TIM_IC_ConfigChannel+0xbc>
 80047ae:	4604      	mov	r4, r0
 80047b0:	460d      	mov	r5, r1
 80047b2:	2301      	movs	r3, #1
 80047b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	2302      	movs	r3, #2
 80047ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 80047be:	b1da      	cbz	r2, 80047f8 <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 80047c0:	2a04      	cmp	r2, #4
 80047c2:	d02a      	beq.n	800481a <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 80047c4:	2a08      	cmp	r2, #8
 80047c6:	d03a      	beq.n	800483e <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance,
 80047c8:	68cb      	ldr	r3, [r1, #12]
 80047ca:	684a      	ldr	r2, [r1, #4]
 80047cc:	6809      	ldr	r1, [r1, #0]
 80047ce:	6800      	ldr	r0, [r0, #0]
 80047d0:	f7ff fc8c 	bl	80040ec <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047d4:	6822      	ldr	r2, [r4, #0]
 80047d6:	69d3      	ldr	r3, [r2, #28]
 80047d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80047dc:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047de:	6822      	ldr	r2, [r4, #0]
 80047e0:	69d3      	ldr	r3, [r2, #28]
 80047e2:	68a9      	ldr	r1, [r5, #8]
 80047e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047e8:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80047f0:	2000      	movs	r0, #0
 80047f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80047f8:	68cb      	ldr	r3, [r1, #12]
 80047fa:	684a      	ldr	r2, [r1, #4]
 80047fc:	6809      	ldr	r1, [r1, #0]
 80047fe:	6800      	ldr	r0, [r0, #0]
 8004800:	f7ff ff86 	bl	8004710 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	6993      	ldr	r3, [r2, #24]
 8004808:	f023 030c 	bic.w	r3, r3, #12
 800480c:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800480e:	6822      	ldr	r2, [r4, #0]
 8004810:	6993      	ldr	r3, [r2, #24]
 8004812:	68a9      	ldr	r1, [r5, #8]
 8004814:	430b      	orrs	r3, r1
 8004816:	6193      	str	r3, [r2, #24]
 8004818:	e7e7      	b.n	80047ea <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance,
 800481a:	68cb      	ldr	r3, [r1, #12]
 800481c:	684a      	ldr	r2, [r1, #4]
 800481e:	6809      	ldr	r1, [r1, #0]
 8004820:	6800      	ldr	r0, [r0, #0]
 8004822:	f7ff fc2d 	bl	8004080 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	6993      	ldr	r3, [r2, #24]
 800482a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800482e:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004830:	6822      	ldr	r2, [r4, #0]
 8004832:	6993      	ldr	r3, [r2, #24]
 8004834:	68a9      	ldr	r1, [r5, #8]
 8004836:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800483a:	6193      	str	r3, [r2, #24]
 800483c:	e7d5      	b.n	80047ea <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,
 800483e:	68cb      	ldr	r3, [r1, #12]
 8004840:	684a      	ldr	r2, [r1, #4]
 8004842:	6809      	ldr	r1, [r1, #0]
 8004844:	6800      	ldr	r0, [r0, #0]
 8004846:	f7ff fc36 	bl	80040b6 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	69d3      	ldr	r3, [r2, #28]
 800484e:	f023 030c 	bic.w	r3, r3, #12
 8004852:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004854:	6822      	ldr	r2, [r4, #0]
 8004856:	69d3      	ldr	r3, [r2, #28]
 8004858:	68a9      	ldr	r1, [r5, #8]
 800485a:	430b      	orrs	r3, r1
 800485c:	61d3      	str	r3, [r2, #28]
 800485e:	e7c4      	b.n	80047ea <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 8004860:	2002      	movs	r0, #2
 8004862:	e7c8      	b.n	80047f6 <HAL_TIM_IC_ConfigChannel+0x52>

08004864 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  // JSB fix. 20191115. Prevents CCxE bit getting reset momentarily, which would be a problem if any current flows into the output e.g. from a resistor.
  // Original version:
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004864:	f001 031f 	and.w	r3, r1, #31
 8004868:	2101      	movs	r1, #1
 800486a:	4099      	lsls	r1, r3
  //  TIMx->CCER &= ~tmp;
  //
  //  /* Set or reset the CCxE Bit */
  //  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
  // JSB version: !!! Not tested! !!!
  if (ChannelState)
 800486c:	b11a      	cbz	r2, 8004876 <TIM_CCxChannelCmd+0x12>
    TIMx->CCER |= tmp;
 800486e:	6a03      	ldr	r3, [r0, #32]
 8004870:	4319      	orrs	r1, r3
 8004872:	6201      	str	r1, [r0, #32]
 8004874:	4770      	bx	lr
  else
    TIMx->CCER &= ~tmp;
 8004876:	6a03      	ldr	r3, [r0, #32]
 8004878:	ea23 0101 	bic.w	r1, r3, r1
 800487c:	6201      	str	r1, [r0, #32]
}
 800487e:	4770      	bx	lr

08004880 <HAL_TIM_IC_Start_IT>:
{
 8004880:	b510      	push	{r4, lr}
 8004882:	4604      	mov	r4, r0
  switch (Channel)
 8004884:	290c      	cmp	r1, #12
 8004886:	d80d      	bhi.n	80048a4 <HAL_TIM_IC_Start_IT+0x24>
 8004888:	e8df f001 	tbb	[pc, r1]
 800488c:	0c0c0c07 	.word	0x0c0c0c07
 8004890:	0c0c0c1f 	.word	0x0c0c0c1f
 8004894:	0c0c0c25 	.word	0x0c0c0c25
 8004898:	2b          	.byte	0x2b
 8004899:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800489a:	6802      	ldr	r2, [r0, #0]
 800489c:	68d3      	ldr	r3, [r2, #12]
 800489e:	f043 0302 	orr.w	r3, r3, #2
 80048a2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a4:	2201      	movs	r2, #1
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	f7ff ffdc 	bl	8004864 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	6891      	ldr	r1, [r2, #8]
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <HAL_TIM_IC_Start_IT+0x70>)
 80048b2:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	2b06      	cmp	r3, #6
 80048b6:	bf18      	it	ne
 80048b8:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80048bc:	d003      	beq.n	80048c6 <HAL_TIM_IC_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 80048be:	6813      	ldr	r3, [r2, #0]
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	6013      	str	r3, [r2, #0]
}
 80048c6:	2000      	movs	r0, #0
 80048c8:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048ca:	6802      	ldr	r2, [r0, #0]
 80048cc:	68d3      	ldr	r3, [r2, #12]
 80048ce:	f043 0304 	orr.w	r3, r3, #4
 80048d2:	60d3      	str	r3, [r2, #12]
      break;
 80048d4:	e7e6      	b.n	80048a4 <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048d6:	6802      	ldr	r2, [r0, #0]
 80048d8:	68d3      	ldr	r3, [r2, #12]
 80048da:	f043 0308 	orr.w	r3, r3, #8
 80048de:	60d3      	str	r3, [r2, #12]
      break;
 80048e0:	e7e0      	b.n	80048a4 <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048e2:	6802      	ldr	r2, [r0, #0]
 80048e4:	68d3      	ldr	r3, [r2, #12]
 80048e6:	f043 0310 	orr.w	r3, r3, #16
 80048ea:	60d3      	str	r3, [r2, #12]
      break;
 80048ec:	e7da      	b.n	80048a4 <HAL_TIM_IC_Start_IT+0x24>
 80048ee:	bf00      	nop
 80048f0:	00010007 	.word	0x00010007

080048f4 <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <TIM_ResetCallback+0x54>)
 80048f6:	6783      	str	r3, [r0, #120]	; 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 80048f8:	4b14      	ldr	r3, [pc, #80]	; (800494c <TIM_ResetCallback+0x58>)
 80048fa:	67c3      	str	r3, [r0, #124]	; 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 80048fc:	4b14      	ldr	r3, [pc, #80]	; (8004950 <TIM_ResetCallback+0x5c>)
 80048fe:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8004902:	4b14      	ldr	r3, [pc, #80]	; (8004954 <TIM_ResetCallback+0x60>)
 8004904:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <TIM_ResetCallback+0x64>)
 800490a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <TIM_ResetCallback+0x68>)
 8004910:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 8004914:	4b12      	ldr	r3, [pc, #72]	; (8004960 <TIM_ResetCallback+0x6c>)
 8004916:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <TIM_ResetCallback+0x70>)
 800491c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 8004920:	4b11      	ldr	r3, [pc, #68]	; (8004968 <TIM_ResetCallback+0x74>)
 8004922:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <TIM_ResetCallback+0x78>)
 8004928:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <TIM_ResetCallback+0x7c>)
 800492e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <TIM_ResetCallback+0x80>)
 8004934:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <TIM_ResetCallback+0x84>)
 800493a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <TIM_ResetCallback+0x88>)
 8004940:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	08003e97 	.word	0x08003e97
 800494c:	08003e99 	.word	0x08003e99
 8004950:	08003ea5 	.word	0x08003ea5
 8004954:	08003ea7 	.word	0x08003ea7
 8004958:	08003e9d 	.word	0x08003e9d
 800495c:	08003e9f 	.word	0x08003e9f
 8004960:	08003e9b 	.word	0x08003e9b
 8004964:	08003ea1 	.word	0x08003ea1
 8004968:	08003ea3 	.word	0x08003ea3
 800496c:	08003ea9 	.word	0x08003ea9
 8004970:	08004b75 	.word	0x08004b75
 8004974:	08004b77 	.word	0x08004b77
 8004978:	08004b79 	.word	0x08004b79
 800497c:	08004b7b 	.word	0x08004b7b

08004980 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004980:	b1f0      	cbz	r0, 80049c0 <HAL_TIM_Base_Init+0x40>
{
 8004982:	b510      	push	{r4, lr}
 8004984:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004986:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800498a:	b163      	cbz	r3, 80049a6 <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	2302      	movs	r3, #2
 800498e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004992:	4621      	mov	r1, r4
 8004994:	f851 0b04 	ldr.w	r0, [r1], #4
 8004998:	f7ff fd60 	bl	800445c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800499c:	2301      	movs	r3, #1
 800499e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80049a2:	2000      	movs	r0, #0
}
 80049a4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80049a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 80049aa:	f7ff ffa3 	bl	80048f4 <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 80049ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049b0:	b11b      	cbz	r3, 80049ba <HAL_TIM_Base_Init+0x3a>
    htim->Base_MspInitCallback(htim);
 80049b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049b4:	4620      	mov	r0, r4
 80049b6:	4798      	blx	r3
 80049b8:	e7e8      	b.n	800498c <HAL_TIM_Base_Init+0xc>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80049ba:	4b02      	ldr	r3, [pc, #8]	; (80049c4 <HAL_TIM_Base_Init+0x44>)
 80049bc:	6423      	str	r3, [r4, #64]	; 0x40
 80049be:	e7f8      	b.n	80049b2 <HAL_TIM_Base_Init+0x32>
    return HAL_ERROR;
 80049c0:	2001      	movs	r0, #1
}
 80049c2:	4770      	bx	lr
 80049c4:	08007875 	.word	0x08007875

080049c8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80049c8:	b1f0      	cbz	r0, 8004a08 <HAL_TIM_PWM_Init+0x40>
{
 80049ca:	b510      	push	{r4, lr}
 80049cc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80049ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049d2:	b163      	cbz	r3, 80049ee <HAL_TIM_PWM_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	2302      	movs	r3, #2
 80049d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049da:	4621      	mov	r1, r4
 80049dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80049e0:	f7ff fd3c 	bl	800445c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80049ea:	2000      	movs	r0, #0
}
 80049ec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80049ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 80049f2:	f7ff ff7f 	bl	80048f4 <TIM_ResetCallback>
    if (htim->PWM_MspInitCallback == NULL)
 80049f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049f8:	b11b      	cbz	r3, 8004a02 <HAL_TIM_PWM_Init+0x3a>
    htim->PWM_MspInitCallback(htim);
 80049fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049fc:	4620      	mov	r0, r4
 80049fe:	4798      	blx	r3
 8004a00:	e7e8      	b.n	80049d4 <HAL_TIM_PWM_Init+0xc>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004a02:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <HAL_TIM_PWM_Init+0x44>)
 8004a04:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a06:	e7f8      	b.n	80049fa <HAL_TIM_PWM_Init+0x32>
    return HAL_ERROR;
 8004a08:	2001      	movs	r0, #1
}
 8004a0a:	4770      	bx	lr
 8004a0c:	080077e1 	.word	0x080077e1

08004a10 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8004a10:	b1f0      	cbz	r0, 8004a50 <HAL_TIM_IC_Init+0x40>
{
 8004a12:	b510      	push	{r4, lr}
 8004a14:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a1a:	b163      	cbz	r3, 8004a36 <HAL_TIM_IC_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a22:	4621      	mov	r1, r4
 8004a24:	f851 0b04 	ldr.w	r0, [r1], #4
 8004a28:	f7ff fd18 	bl	800445c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004a32:	2000      	movs	r0, #0
}
 8004a34:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004a36:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 8004a3a:	f7ff ff5b 	bl	80048f4 <TIM_ResetCallback>
    if (htim->IC_MspInitCallback == NULL)
 8004a3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004a40:	b11b      	cbz	r3, 8004a4a <HAL_TIM_IC_Init+0x3a>
    htim->IC_MspInitCallback(htim);
 8004a42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004a44:	4620      	mov	r0, r4
 8004a46:	4798      	blx	r3
 8004a48:	e7e8      	b.n	8004a1c <HAL_TIM_IC_Init+0xc>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8004a4a:	4b02      	ldr	r3, [pc, #8]	; (8004a54 <HAL_TIM_IC_Init+0x44>)
 8004a4c:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a4e:	e7f8      	b.n	8004a42 <HAL_TIM_IC_Init+0x32>
    return HAL_ERROR;
 8004a50:	2001      	movs	r0, #1
}
 8004a52:	4770      	bx	lr
 8004a54:	08003e95 	.word	0x08003e95

08004a58 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d028      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 8004a60:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8004a62:	2301      	movs	r3, #1
 8004a64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a6e:	6803      	ldr	r3, [r0, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a72:	689c      	ldr	r4, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a74:	4e10      	ldr	r6, [pc, #64]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004a76:	4d11      	ldr	r5, [pc, #68]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004a78:	42ab      	cmp	r3, r5
 8004a7a:	bf18      	it	ne
 8004a7c:	42b3      	cmpne	r3, r6
 8004a7e:	d103      	bne.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a84:	684d      	ldr	r5, [r1, #4]
 8004a86:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a8c:	680d      	ldr	r5, [r1, #0]
 8004a8e:	432a      	orrs	r2, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004a90:	f024 0c80 	bic.w	ip, r4, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a94:	6889      	ldr	r1, [r1, #8]
 8004a96:	ea41 010c 	orr.w	r1, r1, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a9a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a9c:	6803      	ldr	r3, [r0, #0]
 8004a9e:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004aac:	4618      	mov	r0, r3
}
 8004aae:	bc70      	pop	{r4, r5, r6}
 8004ab0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004ab2:	2002      	movs	r0, #2
}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40010400 	.word	0x40010400

08004ac0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d03c      	beq.n	8004b42 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 8004ac8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004aca:	2301      	movs	r3, #1
 8004acc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ad0:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad6:	688a      	ldr	r2, [r1, #8]
 8004ad8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ade:	684a      	ldr	r2, [r1, #4]
 8004ae0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ae6:	680a      	ldr	r2, [r1, #0]
 8004ae8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aee:	690a      	ldr	r2, [r1, #16]
 8004af0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004af6:	694a      	ldr	r2, [r1, #20]
 8004af8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004afe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004b00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b02:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004b06:	698a      	ldr	r2, [r1, #24]
 8004b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b0c:	6802      	ldr	r2, [r0, #0]
 8004b0e:	4d0e      	ldr	r5, [pc, #56]	; (8004b48 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8004b10:	4c0e      	ldr	r4, [pc, #56]	; (8004b4c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8004b12:	42a2      	cmp	r2, r4
 8004b14:	bf18      	it	ne
 8004b16:	42aa      	cmpne	r2, r5
 8004b18:	d10c      	bne.n	8004b34 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b1e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004b20:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b28:	69cc      	ldr	r4, [r1, #28]
 8004b2a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b2c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004b30:	6a09      	ldr	r1, [r1, #32]
 8004b32:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b34:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b36:	2300      	movs	r3, #0
 8004b38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004b3c:	4618      	mov	r0, r3
}
 8004b3e:	bc30      	pop	{r4, r5}
 8004b40:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b42:	2002      	movs	r0, #2
}
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40010400 	.word	0x40010400

08004b50 <HAL_TIMEx_RemapConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
  __HAL_LOCK(htim);
 8004b50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d00b      	beq.n	8004b70 <HAL_TIMEx_RemapConfig+0x20>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
 8004b5e:	6802      	ldr	r2, [r0, #0]
 8004b60:	6511      	str	r1, [r2, #80]	; 0x50

  htim->State = HAL_TIM_STATE_READY;
 8004b62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b66:	2300      	movs	r3, #0
 8004b68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004b70:	2002      	movs	r0, #2
}
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b74:	4770      	bx	lr

08004b76 <HAL_TIMEx_CommutHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004b76:	4770      	bx	lr

08004b78 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b7a:	4770      	bx	lr

08004b7c <SwapBytes>:
///////////////////////////////////////////////////////////////////////////////
// Uncategorized:

uint16_t SwapBytes(uint16_t Value)
{
  return (Value >> 8) | ((Value & 0xFF) << 8);
 8004b7c:	0a03      	lsrs	r3, r0, #8
 8004b7e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8004b82:	b280      	uxth	r0, r0
 8004b84:	4770      	bx	lr

08004b86 <Min_int32>:
}

int32_t Min_int32(int32_t A, int32_t B)
{
    return A < B ? A : B;
}
 8004b86:	4288      	cmp	r0, r1
 8004b88:	bfa8      	it	ge
 8004b8a:	4608      	movge	r0, r1
 8004b8c:	4770      	bx	lr

08004b8e <Clamp_uint16>:

///////////////////////////////////////////////////////////////////////////////
// Clamp:

uint16_t Clamp_uint16(uint16_t Value, uint16_t MinValue , uint16_t MaxValue)
{
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4610      	mov	r0, r2
  if (Value < MinValue)
 8004b92:	428b      	cmp	r3, r1
 8004b94:	d300      	bcc.n	8004b98 <Clamp_uint16+0xa>
 8004b96:	4619      	mov	r1, r3
    Value = MinValue;
  if (Value > MaxValue)
 8004b98:	4281      	cmp	r1, r0
 8004b9a:	d800      	bhi.n	8004b9e <Clamp_uint16+0x10>
 8004b9c:	4608      	mov	r0, r1
    Value = MaxValue;
  return Value;
}
 8004b9e:	4770      	bx	lr

08004ba0 <Clamp_float>:

  return Value;
}

float Clamp_float(float Value, float MinValue, float MaxValue)
{
 8004ba0:	eef0 7a40 	vmov.f32	s15, s0
 8004ba4:	eeb0 0a60 	vmov.f32	s0, s1
  if (Value < MinValue)
 8004ba8:	eef4 7ae0 	vcmpe.f32	s15, s1
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	d409      	bmi.n	8004bc6 <Clamp_float+0x26>
    Value = MinValue;
  else if (Value > MaxValue)
 8004bb2:	eef4 7ac1 	vcmpe.f32	s15, s2
 8004bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bba:	dc02      	bgt.n	8004bc2 <Clamp_float+0x22>
 8004bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc0:	4770      	bx	lr
    Value = MaxValue;
 8004bc2:	eeb0 0a41 	vmov.f32	s0, s2

  return Value;
}
 8004bc6:	4770      	bx	lr

08004bc8 <Wrap_int>:
///////////////////////////////////////////////////////////////////////////////
// Wrap:

int Wrap_int(int Value, int Size)
{
  if (Value < 0)
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	db03      	blt.n	8004bd4 <Wrap_int+0xc>
    Value += Size;
  else if (Value >= Size)
 8004bcc:	4288      	cmp	r0, r1
 8004bce:	db00      	blt.n	8004bd2 <Wrap_int+0xa>
    Value -= Size;
 8004bd0:	1a40      	subs	r0, r0, r1

  return Value;
}
 8004bd2:	4770      	bx	lr
    Value += Size;
 8004bd4:	4408      	add	r0, r1
 8004bd6:	4770      	bx	lr

08004bd8 <Sqr>:
// Maths:

double Sqr(double Value)
{
  return Value * Value;
}
 8004bd8:	ee20 0b00 	vmul.f64	d0, d0, d0
 8004bdc:	4770      	bx	lr

08004bde <Cube>:

double Cube(double Value)
{
  return Value * Value * Value;
 8004bde:	ee20 7b00 	vmul.f64	d7, d0, d0
}
 8004be2:	ee27 0b00 	vmul.f64	d0, d7, d0
 8004be6:	4770      	bx	lr

08004be8 <CubicInterpolate>:
{
  return (1.0 - InterpolationParameter) * Value0 + InterpolationParameter * Value1;
}

double CubicInterpolate(double Value0, double Value1, double Value2, double Value3, double InterpolationParameter)
{
 8004be8:	b508      	push	{r3, lr}
 8004bea:	ed2d 8b0a 	vpush	{d8-d12}
 8004bee:	eeb0 ab40 	vmov.f64	d10, d0
  double C0, C1, C2, C3;
  double InterpolationCoefficient;

  C3 = (((Value3 - Value0) - 3.0 * (Value1 - Value0)) - 3.0 * ((Value2 - Value0) - 2.0 * (Value1-Value0))) / 6.0;
 8004bf2:	ee33 3b40 	vsub.f64	d3, d3, d0
 8004bf6:	ee31 1b40 	vsub.f64	d1, d1, d0
 8004bfa:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 8004bfe:	ee01 3b47 	vmls.f64	d3, d1, d7
 8004c02:	ee32 2b40 	vsub.f64	d2, d2, d0
 8004c06:	ee31 8b01 	vadd.f64	d8, d1, d1
 8004c0a:	ee32 8b48 	vsub.f64	d8, d2, d8
 8004c0e:	ee08 3b47 	vmls.f64	d3, d8, d7
 8004c12:	eeb1 7b08 	vmov.f64	d7, #24	; 0x40c00000  6.0
 8004c16:	ee83 bb07 	vdiv.f64	d11, d3, d7
  C2 = ((Value2 - Value0) - 2.0 * (Value1 - Value0) - 6.0 * C3) / 2.0;
 8004c1a:	ee0b 8b47 	vmls.f64	d8, d11, d7
 8004c1e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8004c22:	ee28 8b07 	vmul.f64	d8, d8, d7
  C1 = Value1 - Value0 - C3 - C2;
 8004c26:	ee31 1b4b 	vsub.f64	d1, d1, d11
 8004c2a:	ee31 9b48 	vsub.f64	d9, d1, d8
  C0 = Value0;

  InterpolationCoefficient = 1 + InterpolationParameter; // Interpolate the second of the three segments.
 8004c2e:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8004c32:	ee34 cb0c 	vadd.f64	d12, d4, d12

  return C3 * Cube(InterpolationCoefficient) + C2 * Sqr(InterpolationCoefficient) + C1 * InterpolationCoefficient + C0;
 8004c36:	eeb0 0b4c 	vmov.f64	d0, d12
 8004c3a:	f7ff ffd0 	bl	8004bde <Cube>
 8004c3e:	ee20 bb0b 	vmul.f64	d11, d0, d11
 8004c42:	eeb0 0b4c 	vmov.f64	d0, d12
 8004c46:	f7ff ffc7 	bl	8004bd8 <Sqr>
 8004c4a:	ee00 bb08 	vmla.f64	d11, d0, d8
 8004c4e:	ee09 bb0c 	vmla.f64	d11, d9, d12
}
 8004c52:	ee3b 0b0a 	vadd.f64	d0, d11, d10
 8004c56:	ecbd 8b0a 	vpop	{d8-d12}
 8004c5a:	bd08      	pop	{r3, pc}

08004c5c <StringToGUID>:

///////////////////////////////////////////////////////////////////////////////
// GUIDs:

uint8_t StringToGUID(char *Value, GUID_t *o_pGUID)
{
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	b09a      	sub	sp, #104	; 0x68
 8004c60:	460c      	mov	r4, r1
  GUID_t Result;
  unsigned int X[11];
  int NumFields, NumChars;

  // STM32 sscanf bug (20181012): %08X (rather than %08x) assumes result is signed. Hence 0x9000000 => 0x7FFFFFF!!!
  NumFields = sscanf(Value, "{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}%n",
 8004c62:	ab0a      	add	r3, sp, #40	; 0x28
 8004c64:	9309      	str	r3, [sp, #36]	; 0x24
 8004c66:	ab15      	add	r3, sp, #84	; 0x54
 8004c68:	9308      	str	r3, [sp, #32]
 8004c6a:	ab14      	add	r3, sp, #80	; 0x50
 8004c6c:	9307      	str	r3, [sp, #28]
 8004c6e:	ab13      	add	r3, sp, #76	; 0x4c
 8004c70:	9306      	str	r3, [sp, #24]
 8004c72:	ab12      	add	r3, sp, #72	; 0x48
 8004c74:	9305      	str	r3, [sp, #20]
 8004c76:	ab11      	add	r3, sp, #68	; 0x44
 8004c78:	9304      	str	r3, [sp, #16]
 8004c7a:	ab10      	add	r3, sp, #64	; 0x40
 8004c7c:	9303      	str	r3, [sp, #12]
 8004c7e:	ab0f      	add	r3, sp, #60	; 0x3c
 8004c80:	9302      	str	r3, [sp, #8]
 8004c82:	ab0e      	add	r3, sp, #56	; 0x38
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	ab0d      	add	r3, sp, #52	; 0x34
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	ab0c      	add	r3, sp, #48	; 0x30
 8004c8c:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c8e:	491a      	ldr	r1, [pc, #104]	; (8004cf8 <StringToGUID+0x9c>)
 8004c90:	f003 fcde 	bl	8008650 <siscanf>
      &X[0], &X[1], &X[2], &X[3], &X[4], &X[5], &X[6], &X[7], &X[8], &X[9], &X[10], &NumChars);

  if ((NumFields != 11) || (NumChars != 38))
 8004c94:	280b      	cmp	r0, #11
 8004c96:	d129      	bne.n	8004cec <StringToGUID+0x90>
 8004c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c9a:	2b26      	cmp	r3, #38	; 0x26
 8004c9c:	d129      	bne.n	8004cf2 <StringToGUID+0x96>
    return 0;

  Result.Field0 = X[0];
 8004c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ca0:	9316      	str	r3, [sp, #88]	; 0x58
  Result.Field1 = X[1];
 8004ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ca4:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
  Result.Field2 = X[2];
 8004ca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004caa:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  Result.Field3[0] = X[3];
 8004cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cb0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  Result.Field3[1] = X[4];
 8004cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cb6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
  Result.Field3[2] = X[5];
 8004cba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cbc:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
  Result.Field3[3] = X[6];
 8004cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cc2:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
  Result.Field3[4] = X[7];
 8004cc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cc8:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
  Result.Field3[5] = X[8];
 8004ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cce:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
  Result.Field3[6] = X[9];
 8004cd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004cd4:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
  Result.Field3[7] = X[10];
 8004cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cda:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67

  *o_pGUID = Result;
 8004cde:	ab1a      	add	r3, sp, #104	; 0x68
 8004ce0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8004ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return 1;
 8004ce8:	2001      	movs	r0, #1
 8004cea:	e000      	b.n	8004cee <StringToGUID+0x92>
    return 0;
 8004cec:	2000      	movs	r0, #0
}
 8004cee:	b01a      	add	sp, #104	; 0x68
 8004cf0:	bd10      	pop	{r4, pc}
    return 0;
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	e7fb      	b.n	8004cee <StringToGUID+0x92>
 8004cf6:	bf00      	nop
 8004cf8:	0800b26c 	.word	0x0800b26c

08004cfc <ILI9341_DrawPixel_ToBackBuffer>:
    ILI9341_CSX_Low();
}

static void ILI9341_DrawPixel_ToBackBuffer(int16_t X, int16_t Y, uint16_t Color)
{
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8004cfc:	fa1f fc80 	uxth.w	ip, r0
 8004d00:	0fcb      	lsrs	r3, r1, #31
 8004d02:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
 8004d06:	bf88      	it	hi
 8004d08:	f043 0301 	orrhi.w	r3, r3, #1
 8004d0c:	b953      	cbnz	r3, 8004d24 <ILI9341_DrawPixel_ToBackBuffer+0x28>
 8004d0e:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 8004d12:	da07      	bge.n	8004d24 <ILI9341_DrawPixel_ToBackBuffer+0x28>
    return;

  pBackBuffer[X + Y * ILI9341_Width] = Color;
 8004d14:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8004d18:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004d1c:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <ILI9341_DrawPixel_ToBackBuffer+0x2c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	2000049c 	.word	0x2000049c

08004d2c <IsNonPrintingChar>:
  return pFont->yAdvance;
}

static uint8_t IsNonPrintingChar(uint8_t Ch)
{
  return ((Ch < pFont->first) || (Ch > pFont->last));
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <IsNonPrintingChar+0x1c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	7a1a      	ldrb	r2, [r3, #8]
 8004d32:	4282      	cmp	r2, r0
 8004d34:	d804      	bhi.n	8004d40 <IsNonPrintingChar+0x14>
 8004d36:	7a5b      	ldrb	r3, [r3, #9]
 8004d38:	4283      	cmp	r3, r0
 8004d3a:	d203      	bcs.n	8004d44 <IsNonPrintingChar+0x18>
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	4770      	bx	lr
 8004d40:	2001      	movs	r0, #1
 8004d42:	4770      	bx	lr
 8004d44:	2000      	movs	r0, #0
}
 8004d46:	4770      	bx	lr
 8004d48:	200004a0 	.word	0x200004a0

08004d4c <ILI9341_Write8>:
{
 8004d4c:	b500      	push	{lr}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	f88d 000f 	strb.w	r0, [sp, #15]
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8004d54:	2364      	movs	r3, #100	; 0x64
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f10d 0217 	add.w	r2, sp, #23
 8004d5e:	f10d 010f 	add.w	r1, sp, #15
 8004d62:	4805      	ldr	r0, [pc, #20]	; (8004d78 <ILI9341_Write8+0x2c>)
 8004d64:	6800      	ldr	r0, [r0, #0]
 8004d66:	f7fe fe43 	bl	80039f0 <HAL_SPI_TransmitReceive>
 8004d6a:	b910      	cbnz	r0, 8004d72 <ILI9341_Write8+0x26>
}
 8004d6c:	b007      	add	sp, #28
 8004d6e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004d72:	f002 f867 	bl	8006e44 <Error_Handler>
}
 8004d76:	e7f9      	b.n	8004d6c <ILI9341_Write8+0x20>
 8004d78:	200004a4 	.word	0x200004a4

08004d7c <ILI9341_Write16>:
{
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4604      	mov	r4, r0
  ILI9341_Write8(Value >> 8);
 8004d80:	0a00      	lsrs	r0, r0, #8
 8004d82:	f7ff ffe3 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(Value);
 8004d86:	b2e0      	uxtb	r0, r4
 8004d88:	f7ff ffe0 	bl	8004d4c <ILI9341_Write8>
}
 8004d8c:	bd10      	pop	{r4, pc}

08004d8e <ILI9341_Write32>:
{
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	4604      	mov	r4, r0
  ILI9341_Write16(Value >> 16);
 8004d92:	0c00      	lsrs	r0, r0, #16
 8004d94:	f7ff fff2 	bl	8004d7c <ILI9341_Write16>
  ILI9341_Write16(Value);
 8004d98:	b2a0      	uxth	r0, r4
 8004d9a:	f7ff ffef 	bl	8004d7c <ILI9341_Write16>
}
 8004d9e:	bd10      	pop	{r4, pc}

08004da0 <ILI9341_WriteCommand>:
{
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4604      	mov	r4, r0
  ILI9341_DC_Low();
 8004da4:	4d07      	ldr	r5, [pc, #28]	; (8004dc4 <ILI9341_WriteCommand+0x24>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	2104      	movs	r1, #4
 8004daa:	4628      	mov	r0, r5
 8004dac:	f7fc f845 	bl	8000e3a <HAL_GPIO_WritePin>
  ILI9341_Write8(Value);
 8004db0:	b2e0      	uxtb	r0, r4
 8004db2:	f7ff ffcb 	bl	8004d4c <ILI9341_Write8>
  ILI9341_DC_High();
 8004db6:	2201      	movs	r2, #1
 8004db8:	2104      	movs	r1, #4
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f7fc f83d 	bl	8000e3a <HAL_GPIO_WritePin>
}
 8004dc0:	bd38      	pop	{r3, r4, r5, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40020800 	.word	0x40020800

08004dc8 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>:
{
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  if ((i_Width == 0) || (i_Height == 0))
 8004dd0:	9301      	str	r3, [sp, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf18      	it	ne
 8004dd6:	2a00      	cmpne	r2, #0
 8004dd8:	d102      	bne.n	8004de0 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x18>
}
 8004dda:	b003      	add	sp, #12
 8004ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de0:	4607      	mov	r7, r0
 8004de2:	468b      	mov	fp, r1
 8004de4:	4690      	mov	r8, r2
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8004de6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004dea:	2100      	movs	r1, #0
 8004dec:	4658      	mov	r0, fp
 8004dee:	f7ff fece 	bl	8004b8e <Clamp_uint16>
 8004df2:	4682      	mov	sl, r0
 8004df4:	e011      	b.n	8004e1a <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x52>
      pLine[X] = *pPixel++;
 8004df6:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 8004dfa:	f834 2b02 	ldrh.w	r2, [r4], #2
 8004dfe:	f829 2003 	strh.w	r2, [r9, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8004e02:	3501      	adds	r5, #1
 8004e04:	eb08 0007 	add.w	r0, r8, r7
 8004e08:	22f0      	movs	r2, #240	; 0xf0
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	b280      	uxth	r0, r0
 8004e0e:	f7ff febe 	bl	8004b8e <Clamp_uint16>
 8004e12:	42a8      	cmp	r0, r5
 8004e14:	d8ef      	bhi.n	8004df6 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x2e>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8004e16:	f10a 0a01 	add.w	sl, sl, #1
 8004e1a:	9b01      	ldr	r3, [sp, #4]
 8004e1c:	eb03 000b 	add.w	r0, r3, fp
 8004e20:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e24:	2100      	movs	r1, #0
 8004e26:	b280      	uxth	r0, r0
 8004e28:	f7ff feb1 	bl	8004b8e <Clamp_uint16>
 8004e2c:	4550      	cmp	r0, sl
 8004e2e:	d9d4      	bls.n	8004dda <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x12>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x84>)
 8004e32:	f8d3 9000 	ldr.w	r9, [r3]
 8004e36:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8004e3a:	0176      	lsls	r6, r6, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8004e3c:	22f0      	movs	r2, #240	; 0xf0
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4638      	mov	r0, r7
 8004e42:	f7ff fea4 	bl	8004b8e <Clamp_uint16>
 8004e46:	4605      	mov	r5, r0
 8004e48:	e7dc      	b.n	8004e04 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x3c>
 8004e4a:	bf00      	nop
 8004e4c:	2000049c 	.word	0x2000049c

08004e50 <ILI9341_DrawPixels_MSBFirst_ToDisplay>:
{
 8004e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e54:	9d06      	ldr	r5, [sp, #24]
  if ((Width == 0) || (Height == 0))
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bf18      	it	ne
 8004e5a:	2a00      	cmpne	r2, #0
 8004e5c:	d101      	bne.n	8004e62 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x12>
}
 8004e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e62:	4680      	mov	r8, r0
 8004e64:	460c      	mov	r4, r1
 8004e66:	4616      	mov	r6, r2
 8004e68:	461f      	mov	r7, r3
  ILI9341_CSX_Low();
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2102      	movs	r1, #2
 8004e6e:	4829      	ldr	r0, [pc, #164]	; (8004f14 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8004e70:	f7fb ffe3 	bl	8000e3a <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8004e74:	202a      	movs	r0, #42	; 0x2a
 8004e76:	f7ff ff93 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	f7ff ff7e 	bl	8004d7c <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8004e80:	eb06 0008 	add.w	r0, r6, r8
 8004e84:	b280      	uxth	r0, r0
 8004e86:	3801      	subs	r0, #1
 8004e88:	b280      	uxth	r0, r0
 8004e8a:	f7ff ff77 	bl	8004d7c <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8004e8e:	202b      	movs	r0, #43	; 0x2b
 8004e90:	f7ff ff86 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7ff ff71 	bl	8004d7c <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8004e9a:	1938      	adds	r0, r7, r4
 8004e9c:	b280      	uxth	r0, r0
 8004e9e:	3801      	subs	r0, #1
 8004ea0:	b280      	uxth	r0, r0
 8004ea2:	f7ff ff6b 	bl	8004d7c <ILI9341_Write16>
  ILI9341_WriteCommand(0x2C); // Memory write.
 8004ea6:	202c      	movs	r0, #44	; 0x2c
 8004ea8:	f7ff ff7a 	bl	8004da0 <ILI9341_WriteCommand>
  uint32_t NumBytes = Width * Height * sizeof(uint16_t);
 8004eac:	fb07 f306 	mul.w	r3, r7, r6
 8004eb0:	005b      	lsls	r3, r3, #1
    uint32_t op_addr = (uint32_t) addr;
 8004eb2:	462a      	mov	r2, r5
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004eb4:	f3bf 8f4f 	dsb	sy
}
 8004eb8:	e004      	b.n	8004ec4 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x74>
      SCB->DCCMVAC = op_addr;
 8004eba:	4917      	ldr	r1, [pc, #92]	; (8004f18 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc8>)
 8004ebc:	f8c1 2268 	str.w	r2, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8004ec0:	3220      	adds	r2, #32
      op_size -=           linesize;
 8004ec2:	3b20      	subs	r3, #32
    while (op_size > 0) {
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dcf8      	bgt.n	8004eba <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x6a>
  __ASM volatile ("dsb 0xF":::"memory");
 8004ec8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ecc:	f3bf 8f6f 	isb	sy
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8004ed0:	2400      	movs	r4, #0
 8004ed2:	e00b      	b.n	8004eec <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x9c>
    pPixels += Width;
 8004ed4:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8004ed8:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d0f7      	beq.n	8004ed8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x88>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8004ee8:	3401      	adds	r4, #1
 8004eea:	b224      	sxth	r4, r4
 8004eec:	42a7      	cmp	r7, r4
 8004eee:	dd0b      	ble.n	8004f08 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xb8>
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8004ef0:	0072      	lsls	r2, r6, #1
 8004ef2:	b292      	uxth	r2, r2
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	f7fe fee5 	bl	8003cc8 <HAL_SPI_Transmit_DMA>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d0e8      	beq.n	8004ed4 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
      Error_Handler();
 8004f02:	f001 ff9f 	bl	8006e44 <Error_Handler>
 8004f06:	e7e5      	b.n	8004ed4 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
  ILI9341_CSX_High();
 8004f08:	2201      	movs	r2, #1
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	4801      	ldr	r0, [pc, #4]	; (8004f14 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8004f0e:	f7fb ff94 	bl	8000e3a <HAL_GPIO_WritePin>
 8004f12:	e7a4      	b.n	8004e5e <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xe>
 8004f14:	40020800 	.word	0x40020800
 8004f18:	e000ed00 	.word	0xe000ed00
 8004f1c:	200004a4 	.word	0x200004a4

08004f20 <ILI9341_DrawBar_ToDisplay>:
  if ((Width == 0) || (Height == 0))
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf18      	it	ne
 8004f24:	2a00      	cmpne	r2, #0
 8004f26:	d100      	bne.n	8004f2a <ILI9341_DrawBar_ToDisplay+0xa>
 8004f28:	4770      	bx	lr
{
 8004f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4615      	mov	r5, r2
 8004f32:	461e      	mov	r6, r3
  ILI9341_CSX_Low();
 8004f34:	2200      	movs	r2, #0
 8004f36:	2102      	movs	r1, #2
 8004f38:	482c      	ldr	r0, [pc, #176]	; (8004fec <ILI9341_DrawBar_ToDisplay+0xcc>)
 8004f3a:	f7fb ff7e 	bl	8000e3a <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8004f3e:	202a      	movs	r0, #42	; 0x2a
 8004f40:	f7ff ff2e 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8004f44:	4638      	mov	r0, r7
 8004f46:	f7ff ff19 	bl	8004d7c <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8004f4a:	19e8      	adds	r0, r5, r7
 8004f4c:	b280      	uxth	r0, r0
 8004f4e:	3801      	subs	r0, #1
 8004f50:	b280      	uxth	r0, r0
 8004f52:	f7ff ff13 	bl	8004d7c <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8004f56:	202b      	movs	r0, #43	; 0x2b
 8004f58:	f7ff ff22 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f7ff ff0d 	bl	8004d7c <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8004f62:	1930      	adds	r0, r6, r4
 8004f64:	b280      	uxth	r0, r0
 8004f66:	3801      	subs	r0, #1
 8004f68:	b280      	uxth	r0, r0
 8004f6a:	f7ff ff07 	bl	8004d7c <ILI9341_Write16>
  uint16_t Color_MSBFirst = SwapBytes(Color);
 8004f6e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8004f72:	f7ff fe03 	bl	8004b7c <SwapBytes>
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8004f76:	2300      	movs	r3, #0
 8004f78:	e004      	b.n	8004f84 <ILI9341_DrawBar_ToDisplay+0x64>
    ColumnColors[ColumnIndex] = Color_MSBFirst;
 8004f7a:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8004f7c:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8004f80:	3301      	adds	r3, #1
 8004f82:	b21b      	sxth	r3, r3
 8004f84:	42ab      	cmp	r3, r5
 8004f86:	dbf8      	blt.n	8004f7a <ILI9341_DrawBar_ToDisplay+0x5a>
  ILI9341_WriteCommand(0x2C); // Memory write.
 8004f88:	202c      	movs	r0, #44	; 0x2c
 8004f8a:	f7ff ff09 	bl	8004da0 <ILI9341_WriteCommand>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8004f8e:	2400      	movs	r4, #0
 8004f90:	e01b      	b.n	8004fca <ILI9341_DrawBar_ToDisplay+0xaa>
      SCB->DCCMVAC = op_addr;
 8004f92:	4818      	ldr	r0, [pc, #96]	; (8004ff4 <ILI9341_DrawBar_ToDisplay+0xd4>)
 8004f94:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8004f98:	3120      	adds	r1, #32
      op_size -=           linesize;
 8004f9a:	3b20      	subs	r3, #32
    while (op_size > 0) {
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dcf8      	bgt.n	8004f92 <ILI9341_DrawBar_ToDisplay+0x72>
  __ASM volatile ("dsb 0xF":::"memory");
 8004fa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004fa4:	f3bf 8f6f 	isb	sy
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 8004fa8:	b292      	uxth	r2, r2
 8004faa:	4911      	ldr	r1, [pc, #68]	; (8004ff0 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8004fac:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <ILI9341_DrawBar_ToDisplay+0xd8>)
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	f7fe fe8a 	bl	8003cc8 <HAL_SPI_Transmit_DMA>
 8004fb4:	b988      	cbnz	r0, 8004fda <ILI9341_DrawBar_ToDisplay+0xba>
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <ILI9341_DrawBar_ToDisplay+0xd8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d0f7      	beq.n	8004fb6 <ILI9341_DrawBar_ToDisplay+0x96>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8004fc6:	3401      	adds	r4, #1
 8004fc8:	b224      	sxth	r4, r4
 8004fca:	42b4      	cmp	r4, r6
 8004fcc:	da08      	bge.n	8004fe0 <ILI9341_DrawBar_ToDisplay+0xc0>
    uint32_t NumBytes = Width * 2;
 8004fce:	006a      	lsls	r2, r5, #1
    uint32_t op_addr = (uint32_t) addr;
 8004fd0:	4907      	ldr	r1, [pc, #28]	; (8004ff0 <ILI9341_DrawBar_ToDisplay+0xd0>)
  __ASM volatile ("dsb 0xF":::"memory");
 8004fd2:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 8004fd6:	4613      	mov	r3, r2
}
 8004fd8:	e7e0      	b.n	8004f9c <ILI9341_DrawBar_ToDisplay+0x7c>
      Error_Handler();
 8004fda:	f001 ff33 	bl	8006e44 <Error_Handler>
 8004fde:	e7ea      	b.n	8004fb6 <ILI9341_DrawBar_ToDisplay+0x96>
  ILI9341_CSX_High();
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	4801      	ldr	r0, [pc, #4]	; (8004fec <ILI9341_DrawBar_ToDisplay+0xcc>)
 8004fe6:	f7fb ff28 	bl	8000e3a <HAL_GPIO_WritePin>
}
 8004fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fec:	40020800 	.word	0x40020800
 8004ff0:	20000218 	.word	0x20000218
 8004ff4:	e000ed00 	.word	0xe000ed00
 8004ff8:	200004a4 	.word	0x200004a4

08004ffc <ILI9341_SetDefaultState>:
  TextColor = TextColor_Default;
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <ILI9341_SetDefaultState+0x18>)
 8004ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005002:	801a      	strh	r2, [r3, #0]
  TextBackgroundColor = TextBackgroundColor_Default;
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <ILI9341_SetDefaultState+0x1c>)
 8005006:	2200      	movs	r2, #0
 8005008:	801a      	strh	r2, [r3, #0]
  TextDrawMode = TextDrawMode_Default;
 800500a:	4b04      	ldr	r3, [pc, #16]	; (800501c <ILI9341_SetDefaultState+0x20>)
 800500c:	2201      	movs	r2, #1
 800500e:	701a      	strb	r2, [r3, #0]
}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000008 	.word	0x20000008
 8005018:	20000498 	.word	0x20000498
 800501c:	2000000a 	.word	0x2000000a

08005020 <ILI9341_Initialize>:
{
 8005020:	b510      	push	{r4, lr}
  phspi = i_phspi;
 8005022:	4ba7      	ldr	r3, [pc, #668]	; (80052c0 <ILI9341_Initialize+0x2a0>)
 8005024:	6018      	str	r0, [r3, #0]
  UseBackBuffer = i_UseBackBuffer;
 8005026:	b2c9      	uxtb	r1, r1
 8005028:	4ba6      	ldr	r3, [pc, #664]	; (80052c4 <ILI9341_Initialize+0x2a4>)
 800502a:	7019      	strb	r1, [r3, #0]
  if (UseBackBuffer)
 800502c:	2900      	cmp	r1, #0
 800502e:	f040 8139 	bne.w	80052a4 <ILI9341_Initialize+0x284>
  ILI9341_SetDefaultState();
 8005032:	f7ff ffe3 	bl	8004ffc <ILI9341_SetDefaultState>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_RESET);
 8005036:	4ca4      	ldr	r4, [pc, #656]	; (80052c8 <ILI9341_Initialize+0x2a8>)
 8005038:	2200      	movs	r2, #0
 800503a:	2101      	movs	r1, #1
 800503c:	4620      	mov	r0, r4
 800503e:	f7fb fefc 	bl	8000e3a <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005042:	2001      	movs	r0, #1
 8005044:	f7fb fb1a 	bl	800067c <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_SET);
 8005048:	2201      	movs	r2, #1
 800504a:	4611      	mov	r1, r2
 800504c:	4620      	mov	r0, r4
 800504e:	f7fb fef4 	bl	8000e3a <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8005052:	2005      	movs	r0, #5
 8005054:	f7fb fb12 	bl	800067c <HAL_Delay>
  ILI9341_CSX_Low();
 8005058:	2200      	movs	r2, #0
 800505a:	2102      	movs	r1, #2
 800505c:	4620      	mov	r0, r4
 800505e:	f7fb feec 	bl	8000e3a <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0xEF);
 8005062:	f06f 0010 	mvn.w	r0, #16
 8005066:	f7ff fe9b 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x03);
 800506a:	2003      	movs	r0, #3
 800506c:	f7ff fe6e 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x80);
 8005070:	2080      	movs	r0, #128	; 0x80
 8005072:	f7ff fe6b 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8005076:	2002      	movs	r0, #2
 8005078:	f7ff fe68 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERB);
 800507c:	f06f 0030 	mvn.w	r0, #48	; 0x30
 8005080:	f7ff fe8e 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8005084:	2000      	movs	r0, #0
 8005086:	f7ff fe61 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0XC1);
 800508a:	20c1      	movs	r0, #193	; 0xc1
 800508c:	f7ff fe5e 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0X30);
 8005090:	2030      	movs	r0, #48	; 0x30
 8005092:	f7ff fe5b 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWER_SEQ);
 8005096:	f06f 0012 	mvn.w	r0, #18
 800509a:	f7ff fe81 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x64);
 800509e:	2064      	movs	r0, #100	; 0x64
 80050a0:	f7ff fe54 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x03);
 80050a4:	2003      	movs	r0, #3
 80050a6:	f7ff fe51 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0X12);
 80050aa:	2012      	movs	r0, #18
 80050ac:	f7ff fe4e 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0X81);
 80050b0:	2081      	movs	r0, #129	; 0x81
 80050b2:	f7ff fe4b 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCA);
 80050b6:	f06f 0017 	mvn.w	r0, #23
 80050ba:	f7ff fe71 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x85);
 80050be:	2085      	movs	r0, #133	; 0x85
 80050c0:	f7ff fe44 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80050c4:	2000      	movs	r0, #0
 80050c6:	f7ff fe41 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x78);
 80050ca:	2078      	movs	r0, #120	; 0x78
 80050cc:	f7ff fe3e 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERA);
 80050d0:	f06f 0034 	mvn.w	r0, #52	; 0x34
 80050d4:	f7ff fe64 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x39);
 80050d8:	2039      	movs	r0, #57	; 0x39
 80050da:	f7ff fe37 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x2C);
 80050de:	202c      	movs	r0, #44	; 0x2c
 80050e0:	f7ff fe34 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80050e4:	2000      	movs	r0, #0
 80050e6:	f7ff fe31 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x34);
 80050ea:	2034      	movs	r0, #52	; 0x34
 80050ec:	f7ff fe2e 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x02);
 80050f0:	2002      	movs	r0, #2
 80050f2:	f7ff fe2b 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_PRC);
 80050f6:	f06f 0008 	mvn.w	r0, #8
 80050fa:	f7ff fe51 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x20);
 80050fe:	2020      	movs	r0, #32
 8005100:	f7ff fe24 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCB);
 8005104:	f06f 0015 	mvn.w	r0, #21
 8005108:	f7ff fe4a 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 800510c:	2000      	movs	r0, #0
 800510e:	f7ff fe1d 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8005112:	2000      	movs	r0, #0
 8005114:	f7ff fe1a 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR1); // Power control
 8005118:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 800511c:	f7ff fe40 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x23); // VRH=[5:0]
 8005120:	2023      	movs	r0, #35	; 0x23
 8005122:	f7ff fe13 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR2); // Power control
 8005126:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 800512a:	f7ff fe39 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x10); // BT=[3:0]
 800512e:	2010      	movs	r0, #16
 8005130:	f7ff fe0c 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR1); // VCOM control
 8005134:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 8005138:	f7ff fe32 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x3e); // VMH=[6:0]
 800513c:	203e      	movs	r0, #62	; 0x3e
 800513e:	f7ff fe05 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x28); // VML=[6:0]
 8005142:	2028      	movs	r0, #40	; 0x28
 8005144:	f7ff fe02 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR2); // VCOM control 2
 8005148:	f06f 0038 	mvn.w	r0, #56	; 0x38
 800514c:	f7ff fe28 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x86); // VMF=[6:0]
 8005150:	2086      	movs	r0, #134	; 0x86
 8005152:	f7ff fdfb 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_MADCTL); // Memory Access Control
 8005156:	2036      	movs	r0, #54	; 0x36
 8005158:	f7ff fe22 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x48);
 800515c:	2048      	movs	r0, #72	; 0x48
 800515e:	f7ff fdf5 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VSCRSADD); // Vertical scroll
 8005162:	2037      	movs	r0, #55	; 0x37
 8005164:	f7ff fe1c 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write16(0); // Zero
 8005168:	2000      	movs	r0, #0
 800516a:	f7ff fe07 	bl	8004d7c <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PIXFMT);
 800516e:	203a      	movs	r0, #58	; 0x3a
 8005170:	f7ff fe16 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x55); // DPI=[6:4] DBI=[2:0]
 8005174:	2055      	movs	r0, #85	; 0x55
 8005176:	f7ff fde9 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_FRMCTR1);
 800517a:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 800517e:	f7ff fe0f 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8005182:	2000      	movs	r0, #0
 8005184:	f7ff fde2 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x18);
 8005188:	2018      	movs	r0, #24
 800518a:	f7ff fddf 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_DFUNCTR); // Display Function Control
 800518e:	f06f 0049 	mvn.w	r0, #73	; 0x49
 8005192:	f7ff fe05 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x08);
 8005196:	2008      	movs	r0, #8
 8005198:	f7ff fdd8 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x82);
 800519c:	2082      	movs	r0, #130	; 0x82
 800519e:	f7ff fdd5 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x27);
 80051a2:	2027      	movs	r0, #39	; 0x27
 80051a4:	f7ff fdd2 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(0xF2); // 3Gamma
 80051a8:	f06f 000d 	mvn.w	r0, #13
 80051ac:	f7ff fdf8 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00); // Disable
 80051b0:	2000      	movs	r0, #0
 80051b2:	f7ff fdcb 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GAMMASET); // Gamma curve selected
 80051b6:	2026      	movs	r0, #38	; 0x26
 80051b8:	f7ff fdf2 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x01);
 80051bc:	2001      	movs	r0, #1
 80051be:	f7ff fdc5 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRP1); // Set Gamma
 80051c2:	f06f 001f 	mvn.w	r0, #31
 80051c6:	f7ff fdeb 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x0F);
 80051ca:	200f      	movs	r0, #15
 80051cc:	f7ff fdbe 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x31);
 80051d0:	2031      	movs	r0, #49	; 0x31
 80051d2:	f7ff fdbb 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x2B);
 80051d6:	202b      	movs	r0, #43	; 0x2b
 80051d8:	f7ff fdb8 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 80051dc:	200c      	movs	r0, #12
 80051de:	f7ff fdb5 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80051e2:	200e      	movs	r0, #14
 80051e4:	f7ff fdb2 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x08);
 80051e8:	2008      	movs	r0, #8
 80051ea:	f7ff fdaf 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x4E);
 80051ee:	204e      	movs	r0, #78	; 0x4e
 80051f0:	f7ff fdac 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0xF1);
 80051f4:	20f1      	movs	r0, #241	; 0xf1
 80051f6:	f7ff fda9 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x37);
 80051fa:	2037      	movs	r0, #55	; 0x37
 80051fc:	f7ff fda6 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8005200:	2007      	movs	r0, #7
 8005202:	f7ff fda3 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x10);
 8005206:	2010      	movs	r0, #16
 8005208:	f7ff fda0 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x03);
 800520c:	2003      	movs	r0, #3
 800520e:	f7ff fd9d 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8005212:	200e      	movs	r0, #14
 8005214:	f7ff fd9a 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x09);
 8005218:	2009      	movs	r0, #9
 800521a:	f7ff fd97 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 800521e:	2000      	movs	r0, #0
 8005220:	f7ff fd94 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRN1); // Set Gamma
 8005224:	f06f 001e 	mvn.w	r0, #30
 8005228:	f7ff fdba 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 800522c:	2000      	movs	r0, #0
 800522e:	f7ff fd8d 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8005232:	200e      	movs	r0, #14
 8005234:	f7ff fd8a 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x14);
 8005238:	2014      	movs	r0, #20
 800523a:	f7ff fd87 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x03);
 800523e:	2003      	movs	r0, #3
 8005240:	f7ff fd84 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x11);
 8005244:	2011      	movs	r0, #17
 8005246:	f7ff fd81 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x07);
 800524a:	2007      	movs	r0, #7
 800524c:	f7ff fd7e 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8005250:	2031      	movs	r0, #49	; 0x31
 8005252:	f7ff fd7b 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0xC1);
 8005256:	20c1      	movs	r0, #193	; 0xc1
 8005258:	f7ff fd78 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x48);
 800525c:	2048      	movs	r0, #72	; 0x48
 800525e:	f7ff fd75 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8005262:	2008      	movs	r0, #8
 8005264:	f7ff fd72 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8005268:	200f      	movs	r0, #15
 800526a:	f7ff fd6f 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 800526e:	200c      	movs	r0, #12
 8005270:	f7ff fd6c 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8005274:	2031      	movs	r0, #49	; 0x31
 8005276:	f7ff fd69 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x36);
 800527a:	2036      	movs	r0, #54	; 0x36
 800527c:	f7ff fd66 	bl	8004d4c <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8005280:	200f      	movs	r0, #15
 8005282:	f7ff fd63 	bl	8004d4c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_SLPOUT); // Exit sleep
 8005286:	2011      	movs	r0, #17
 8005288:	f7ff fd8a 	bl	8004da0 <ILI9341_WriteCommand>
  HAL_Delay(120);
 800528c:	2078      	movs	r0, #120	; 0x78
 800528e:	f7fb f9f5 	bl	800067c <HAL_Delay>
  ILI9341_WriteCommand(ILI9341_DISPON); // Display on
 8005292:	2029      	movs	r0, #41	; 0x29
 8005294:	f7ff fd84 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_CSX_High();
 8005298:	2201      	movs	r2, #1
 800529a:	2102      	movs	r1, #2
 800529c:	4620      	mov	r0, r4
 800529e:	f7fb fdcc 	bl	8000e3a <HAL_GPIO_WritePin>
}
 80052a2:	bd10      	pop	{r4, pc}
    pBackBuffer = calloc(1, ILI9341_Width * ILI9341_Height * sizeof(uint16_t));
 80052a4:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 80052a8:	2001      	movs	r0, #1
 80052aa:	f002 fbbd 	bl	8007a28 <calloc>
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <ILI9341_Initialize+0x2ac>)
 80052b0:	6018      	str	r0, [r3, #0]
    if (!pBackBuffer)
 80052b2:	2800      	cmp	r0, #0
 80052b4:	f47f aebd 	bne.w	8005032 <ILI9341_Initialize+0x12>
      Error_Handler();
 80052b8:	f001 fdc4 	bl	8006e44 <Error_Handler>
 80052bc:	e6b9      	b.n	8005032 <ILI9341_Initialize+0x12>
 80052be:	bf00      	nop
 80052c0:	200004a4 	.word	0x200004a4
 80052c4:	2000049a 	.word	0x2000049a
 80052c8:	40020800 	.word	0x40020800
 80052cc:	2000049c 	.word	0x2000049c

080052d0 <ILI9341_SetAddrWindow>:
{
 80052d0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 80052d4:	4681      	mov	r9, r0
 80052d6:	460f      	mov	r7, r1
 80052d8:	4616      	mov	r6, r2
 80052da:	461c      	mov	r4, r3
 80052dc:	f99d 8018 	ldrsb.w	r8, [sp, #24]
  if (UseCS)
 80052e0:	f1b8 0f00 	cmp.w	r8, #0
 80052e4:	d11b      	bne.n	800531e <ILI9341_SetAddrWindow+0x4e>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 80052e6:	444e      	add	r6, r9
 80052e8:	3e01      	subs	r6, #1
 80052ea:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 80052ee:	443c      	add	r4, r7
 80052f0:	3c01      	subs	r4, #1
 80052f2:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 80052f6:	202a      	movs	r0, #42	; 0x2a
 80052f8:	f7ff fd52 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write32(xa);
 80052fc:	4630      	mov	r0, r6
 80052fe:	f7ff fd46 	bl	8004d8e <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_PASET); // Row addr set
 8005302:	202b      	movs	r0, #43	; 0x2b
 8005304:	f7ff fd4c 	bl	8004da0 <ILI9341_WriteCommand>
  ILI9341_Write32(ya);
 8005308:	4620      	mov	r0, r4
 800530a:	f7ff fd40 	bl	8004d8e <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_RAMWR); // Write to RAM
 800530e:	202c      	movs	r0, #44	; 0x2c
 8005310:	f7ff fd46 	bl	8004da0 <ILI9341_WriteCommand>
  if (UseCS)
 8005314:	f1b8 0f00 	cmp.w	r8, #0
 8005318:	d107      	bne.n	800532a <ILI9341_SetAddrWindow+0x5a>
}
 800531a:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    ILI9341_CSX_Low();
 800531e:	2200      	movs	r2, #0
 8005320:	2102      	movs	r1, #2
 8005322:	4805      	ldr	r0, [pc, #20]	; (8005338 <ILI9341_SetAddrWindow+0x68>)
 8005324:	f7fb fd89 	bl	8000e3a <HAL_GPIO_WritePin>
 8005328:	e7dd      	b.n	80052e6 <ILI9341_SetAddrWindow+0x16>
    ILI9341_CSX_High();
 800532a:	2201      	movs	r2, #1
 800532c:	2102      	movs	r1, #2
 800532e:	4802      	ldr	r0, [pc, #8]	; (8005338 <ILI9341_SetAddrWindow+0x68>)
 8005330:	f7fb fd83 	bl	8000e3a <HAL_GPIO_WritePin>
}
 8005334:	e7f1      	b.n	800531a <ILI9341_SetAddrWindow+0x4a>
 8005336:	bf00      	nop
 8005338:	40020800 	.word	0x40020800

0800533c <ILI9341_DrawPixel_ToDisplay>:
{
 800533c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533e:	b083      	sub	sp, #12
 8005340:	4604      	mov	r4, r0
 8005342:	460d      	mov	r5, r1
 8005344:	4616      	mov	r6, r2
  if (UseCS)
 8005346:	461f      	mov	r7, r3
 8005348:	b95b      	cbnz	r3, 8005362 <ILI9341_DrawPixel_ToDisplay+0x26>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 800534a:	b2a0      	uxth	r0, r4
 800534c:	0feb      	lsrs	r3, r5, #31
 800534e:	28ef      	cmp	r0, #239	; 0xef
 8005350:	bf88      	it	hi
 8005352:	f043 0301 	orrhi.w	r3, r3, #1
 8005356:	b913      	cbnz	r3, 800535e <ILI9341_DrawPixel_ToDisplay+0x22>
 8005358:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 800535c:	db07      	blt.n	800536e <ILI9341_DrawPixel_ToDisplay+0x32>
}
 800535e:	b003      	add	sp, #12
 8005360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ILI9341_CSX_Low();
 8005362:	2200      	movs	r2, #0
 8005364:	2102      	movs	r1, #2
 8005366:	480a      	ldr	r0, [pc, #40]	; (8005390 <ILI9341_DrawPixel_ToDisplay+0x54>)
 8005368:	f7fb fd67 	bl	8000e3a <HAL_GPIO_WritePin>
 800536c:	e7ed      	b.n	800534a <ILI9341_DrawPixel_ToDisplay+0xe>
  ILI9341_SetAddrWindow(X, Y, 1, 1, 0);
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2301      	movs	r3, #1
 8005372:	461a      	mov	r2, r3
 8005374:	b2a9      	uxth	r1, r5
 8005376:	f7ff ffab 	bl	80052d0 <ILI9341_SetAddrWindow>
  ILI9341_Write16(Color);
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff fcfe 	bl	8004d7c <ILI9341_Write16>
  if (UseCS)
 8005380:	2f00      	cmp	r7, #0
 8005382:	d0ec      	beq.n	800535e <ILI9341_DrawPixel_ToDisplay+0x22>
    ILI9341_CSX_Low();
 8005384:	2200      	movs	r2, #0
 8005386:	2102      	movs	r1, #2
 8005388:	4801      	ldr	r0, [pc, #4]	; (8005390 <ILI9341_DrawPixel_ToDisplay+0x54>)
 800538a:	f7fb fd56 	bl	8000e3a <HAL_GPIO_WritePin>
 800538e:	e7e6      	b.n	800535e <ILI9341_DrawPixel_ToDisplay+0x22>
 8005390:	40020800 	.word	0x40020800

08005394 <ILI9341_DrawPixel>:
{
 8005394:	b510      	push	{r4, lr}
  if (UseBackBuffer)
 8005396:	4c04      	ldr	r4, [pc, #16]	; (80053a8 <ILI9341_DrawPixel+0x14>)
 8005398:	7824      	ldrb	r4, [r4, #0]
 800539a:	b114      	cbz	r4, 80053a2 <ILI9341_DrawPixel+0xe>
    ILI9341_DrawPixel_ToBackBuffer(X, Y, Color);
 800539c:	f7ff fcae 	bl	8004cfc <ILI9341_DrawPixel_ToBackBuffer>
}
 80053a0:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixel_ToDisplay(X, Y, Color, UseCS);
 80053a2:	f7ff ffcb 	bl	800533c <ILI9341_DrawPixel_ToDisplay>
}
 80053a6:	e7fb      	b.n	80053a0 <ILI9341_DrawPixel+0xc>
 80053a8:	2000049a 	.word	0x2000049a

080053ac <ILI9341_DrawPixels_MSBFirst>:
{
 80053ac:	b510      	push	{r4, lr}
 80053ae:	b082      	sub	sp, #8
  if (UseBackBuffer)
 80053b0:	4c06      	ldr	r4, [pc, #24]	; (80053cc <ILI9341_DrawPixels_MSBFirst+0x20>)
 80053b2:	7824      	ldrb	r4, [r4, #0]
 80053b4:	b12c      	cbz	r4, 80053c2 <ILI9341_DrawPixels_MSBFirst+0x16>
    ILI9341_DrawPixels_MSBFirst_ToBackBuffer(X, Y, Width, Height, pPixels);
 80053b6:	9c04      	ldr	r4, [sp, #16]
 80053b8:	9400      	str	r4, [sp, #0]
 80053ba:	f7ff fd05 	bl	8004dc8 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>
}
 80053be:	b002      	add	sp, #8
 80053c0:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixels_MSBFirst_ToDisplay(X, Y, Width, Height, pPixels);
 80053c2:	9c04      	ldr	r4, [sp, #16]
 80053c4:	9400      	str	r4, [sp, #0]
 80053c6:	f7ff fd43 	bl	8004e50 <ILI9341_DrawPixels_MSBFirst_ToDisplay>
}
 80053ca:	e7f8      	b.n	80053be <ILI9341_DrawPixels_MSBFirst+0x12>
 80053cc:	2000049a 	.word	0x2000049a

080053d0 <ILI9341_DrawBar_ToBackBuffer>:
{
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	b083      	sub	sp, #12
 80053d6:	4606      	mov	r6, r0
 80053d8:	468b      	mov	fp, r1
 80053da:	4617      	mov	r7, r2
 80053dc:	9301      	str	r3, [sp, #4]
  Color_MSBFirst = SwapBytes(i_Color);
 80053de:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 80053e2:	f7ff fbcb 	bl	8004b7c <SwapBytes>
 80053e6:	4681      	mov	r9, r0
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80053e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80053ec:	2100      	movs	r1, #0
 80053ee:	4658      	mov	r0, fp
 80053f0:	f7ff fbcd 	bl	8004b8e <Clamp_uint16>
 80053f4:	4682      	mov	sl, r0
 80053f6:	e00e      	b.n	8005416 <ILI9341_DrawBar_ToBackBuffer+0x46>
      pLine[X] = Color_MSBFirst;
 80053f8:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 80053fc:	f828 9003 	strh.w	r9, [r8, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8005400:	3401      	adds	r4, #1
 8005402:	19f0      	adds	r0, r6, r7
 8005404:	22f0      	movs	r2, #240	; 0xf0
 8005406:	2100      	movs	r1, #0
 8005408:	b280      	uxth	r0, r0
 800540a:	f7ff fbc0 	bl	8004b8e <Clamp_uint16>
 800540e:	42a0      	cmp	r0, r4
 8005410:	d8f2      	bhi.n	80053f8 <ILI9341_DrawBar_ToBackBuffer+0x28>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8005412:	f10a 0a01 	add.w	sl, sl, #1
 8005416:	9b01      	ldr	r3, [sp, #4]
 8005418:	eb0b 0003 	add.w	r0, fp, r3
 800541c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005420:	2100      	movs	r1, #0
 8005422:	b280      	uxth	r0, r0
 8005424:	f7ff fbb3 	bl	8004b8e <Clamp_uint16>
 8005428:	4550      	cmp	r0, sl
 800542a:	d90c      	bls.n	8005446 <ILI9341_DrawBar_ToBackBuffer+0x76>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <ILI9341_DrawBar_ToBackBuffer+0x7c>)
 800542e:	f8d3 8000 	ldr.w	r8, [r3]
 8005432:	ebca 150a 	rsb	r5, sl, sl, lsl #4
 8005436:	016d      	lsls	r5, r5, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8005438:	22f0      	movs	r2, #240	; 0xf0
 800543a:	2100      	movs	r1, #0
 800543c:	4630      	mov	r0, r6
 800543e:	f7ff fba6 	bl	8004b8e <Clamp_uint16>
 8005442:	4604      	mov	r4, r0
 8005444:	e7dd      	b.n	8005402 <ILI9341_DrawBar_ToBackBuffer+0x32>
}
 8005446:	b003      	add	sp, #12
 8005448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544c:	2000049c 	.word	0x2000049c

08005450 <ILI9341_DrawBar>:
{
 8005450:	b530      	push	{r4, r5, lr}
 8005452:	b083      	sub	sp, #12
 8005454:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  if (UseBackBuffer)
 8005458:	4d05      	ldr	r5, [pc, #20]	; (8005470 <ILI9341_DrawBar+0x20>)
 800545a:	782d      	ldrb	r5, [r5, #0]
 800545c:	b125      	cbz	r5, 8005468 <ILI9341_DrawBar+0x18>
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 800545e:	9400      	str	r4, [sp, #0]
 8005460:	f7ff ffb6 	bl	80053d0 <ILI9341_DrawBar_ToBackBuffer>
}
 8005464:	b003      	add	sp, #12
 8005466:	bd30      	pop	{r4, r5, pc}
    ILI9341_DrawBar_ToDisplay(X, Y, Width, Height, Color);
 8005468:	9400      	str	r4, [sp, #0]
 800546a:	f7ff fd59 	bl	8004f20 <ILI9341_DrawBar_ToDisplay>
}
 800546e:	e7f9      	b.n	8005464 <ILI9341_DrawBar+0x14>
 8005470:	2000049a 	.word	0x2000049a

08005474 <ILI9341_Clear>:
{
 8005474:	b500      	push	{lr}
 8005476:	b083      	sub	sp, #12
  ILI9341_DrawBar(0, 0, ILI9341_Width, ILI9341_Height, Color);
 8005478:	9000      	str	r0, [sp, #0]
 800547a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800547e:	22f0      	movs	r2, #240	; 0xf0
 8005480:	2100      	movs	r1, #0
 8005482:	4608      	mov	r0, r1
 8005484:	f7ff ffe4 	bl	8005450 <ILI9341_DrawBar>
}
 8005488:	b003      	add	sp, #12
 800548a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005490 <ILI9341_SetFont>:
  Result = pFont;
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <ILI9341_SetFont+0xc>)
 8005492:	681a      	ldr	r2, [r3, #0]
  pFont = i_pFont;
 8005494:	6018      	str	r0, [r3, #0]
}
 8005496:	4610      	mov	r0, r2
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	200004a0 	.word	0x200004a0

080054a0 <ILI9341_GetFontYSpacing>:
  return pFont->yAdvance;
 80054a0:	4b01      	ldr	r3, [pc, #4]	; (80054a8 <ILI9341_GetFontYSpacing+0x8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
}
 80054a4:	7a98      	ldrb	r0, [r3, #10]
 80054a6:	4770      	bx	lr
 80054a8:	200004a0 	.word	0x200004a0

080054ac <GetCharWidth>:

uint16_t GetCharWidth(uint8_t Ch)
{
 80054ac:	b510      	push	{r4, lr}
 80054ae:	4604      	mov	r4, r0
  if (IsNonPrintingChar(Ch))
 80054b0:	f7ff fc3c 	bl	8004d2c <IsNonPrintingChar>
 80054b4:	b980      	cbnz	r0, 80054d8 <GetCharWidth+0x2c>
    return 0;

  Ch -= pFont->first;
 80054b6:	4b09      	ldr	r3, [pc, #36]	; (80054dc <GetCharWidth+0x30>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	7a18      	ldrb	r0, [r3, #8]
 80054bc:	1a20      	subs	r0, r4, r0
 80054be:	b2c0      	uxtb	r0, r0
  GFXglyph *pGlyph = &pFont->pGlyph[Ch];
 80054c0:	685c      	ldr	r4, [r3, #4]
 80054c2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  uint8_t w = pGlyph->width;
 80054c6:	7882      	ldrb	r2, [r0, #2]
  int8_t xo = pGlyph->xOffset;
 80054c8:	f990 3005 	ldrsb.w	r3, [r0, #5]

  if (w == 0)
 80054cc:	b112      	cbz	r2, 80054d4 <GetCharWidth+0x28>
    return pGlyph->xAdvance;

  return xo + w;
 80054ce:	1898      	adds	r0, r3, r2
 80054d0:	b280      	uxth	r0, r0
}
 80054d2:	bd10      	pop	{r4, pc}
    return pGlyph->xAdvance;
 80054d4:	7900      	ldrb	r0, [r0, #4]
 80054d6:	e7fc      	b.n	80054d2 <GetCharWidth+0x26>
    return 0;
 80054d8:	2000      	movs	r0, #0
 80054da:	e7fa      	b.n	80054d2 <GetCharWidth+0x26>
 80054dc:	200004a0 	.word	0x200004a0

080054e0 <ILI9341_GetTextWidth>:

uint16_t ILI9341_GetTextWidth(const char *Text)
{
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	4604      	mov	r4, r0
  uint16_t TotalWidth, NumChars;
  const char *pText;

  NumChars = strlen(Text);
 80054e4:	f7fa feac 	bl	8000240 <strlen>
 80054e8:	b287      	uxth	r7, r0

  pText = Text;

  TotalWidth=0;

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80054ea:	2500      	movs	r5, #0
  TotalWidth=0;
 80054ec:	462e      	mov	r6, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80054ee:	e007      	b.n	8005500 <ILI9341_GetTextWidth+0x20>
    TotalWidth += GetCharWidth(*pText++);
 80054f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80054f4:	f7ff ffda 	bl	80054ac <GetCharWidth>
 80054f8:	4406      	add	r6, r0
 80054fa:	b2b6      	uxth	r6, r6
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80054fc:	3501      	adds	r5, #1
 80054fe:	b2ad      	uxth	r5, r5
 8005500:	42bd      	cmp	r5, r7
 8005502:	d3f5      	bcc.n	80054f0 <ILI9341_GetTextWidth+0x10>

  return TotalWidth;
}
 8005504:	4630      	mov	r0, r6
 8005506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005508 <ILI9341_DrawCharAtXY>:
uint8_t ILI9341_DrawCharAtXY(uint8_t Ch, uint16_t X, uint16_t Y, uint16_t Color)
// X: X position of left edge of char.
// Y: Y position of line on which the char sits. The char may go below this line (e.g. g j p q y).
// Returns required X advance.
// Based on Adafruit_GFX.cpp.
{
 8005508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	b08d      	sub	sp, #52	; 0x34
 800550e:	9105      	str	r1, [sp, #20]
 8005510:	9208      	str	r2, [sp, #32]
 8005512:	9306      	str	r3, [sp, #24]
  uint8_t *pBitmap;
  uint16_t Color_MSBFirst, TextBackgroundColor_MSBFirst;
  uint16_t *pMemChar, *pMemCharPixel;
  uint8_t CharWidth, CharHeight;

  if (!pFont)
 8005514:	4b9a      	ldr	r3, [pc, #616]	; (8005780 <ILI9341_DrawCharAtXY+0x278>)
 8005516:	681c      	ldr	r4, [r3, #0]
 8005518:	2c00      	cmp	r4, #0
 800551a:	f000 812d 	beq.w	8005778 <ILI9341_DrawCharAtXY+0x270>
 800551e:	4605      	mov	r5, r0
    return 0;
  if (IsNonPrintingChar(Ch))
 8005520:	f7ff fc04 	bl	8004d2c <IsNonPrintingChar>
 8005524:	9003      	str	r0, [sp, #12]
 8005526:	2800      	cmp	r0, #0
 8005528:	f040 8128 	bne.w	800577c <ILI9341_DrawCharAtXY+0x274>
    return 0;

  Ch -= pFont->first;
 800552c:	7a23      	ldrb	r3, [r4, #8]
 800552e:	1aed      	subs	r5, r5, r3
 8005530:	b2ed      	uxtb	r5, r5
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 8005532:	4b94      	ldr	r3, [pc, #592]	; (8005784 <ILI9341_DrawCharAtXY+0x27c>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d029      	beq.n	800558e <ILI9341_DrawCharAtXY+0x86>
    Y -= (pFont->yOffsetMin / 2);

  pGlyph = &pFont->pGlyph[Ch];
 800553a:	6863      	ldr	r3, [r4, #4]
 800553c:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8005540:	920a      	str	r2, [sp, #40]	; 0x28
  pBitmap = pFont->pBitmap;
 8005542:	f8d4 9000 	ldr.w	r9, [r4]

  bo = pGlyph->bitmapOffset;
 8005546:	f833 6035 	ldrh.w	r6, [r3, r5, lsl #3]
  w = pGlyph->width;
 800554a:	4613      	mov	r3, r2
 800554c:	f892 8002 	ldrb.w	r8, [r2, #2]
  h = pGlyph->height;
 8005550:	f892 b003 	ldrb.w	fp, [r2, #3]
  xo = pGlyph->xOffset;
 8005554:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8005558:	9204      	str	r2, [sp, #16]
  yo = pGlyph->yOffset;
 800555a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800555e:	9307      	str	r3, [sp, #28]
  bits = 0;
  bit = 0;
  yo_min = pFont->yOffsetMin;
 8005560:	f994 a00b 	ldrsb.w	sl, [r4, #11]
  yo_max = pFont->yOffsetMax;
 8005564:	f994 500c 	ldrsb.w	r5, [r4, #12]

  switch(TextDrawMode)
 8005568:	4b87      	ldr	r3, [pc, #540]	; (8005788 <ILI9341_DrawCharAtXY+0x280>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b02      	cmp	r3, #2
 800556e:	d061      	beq.n	8005634 <ILI9341_DrawCharAtXY+0x12c>
 8005570:	2b03      	cmp	r3, #3
 8005572:	f000 80bc 	beq.w	80056ee <ILI9341_DrawCharAtXY+0x1e6>
 8005576:	2b01      	cmp	r3, #1
 8005578:	d015      	beq.n	80055a6 <ILI9341_DrawCharAtXY+0x9e>
      }
      ILI9341_CSX_High();
      break;
  }

  if (w == 0)
 800557a:	f1b8 0f00 	cmp.w	r8, #0
 800557e:	f000 80f8 	beq.w	8005772 <ILI9341_DrawCharAtXY+0x26a>
    return pGlyph->xAdvance;
  return xo + w;
 8005582:	9804      	ldr	r0, [sp, #16]
 8005584:	4440      	add	r0, r8
 8005586:	b2c0      	uxtb	r0, r0
}
 8005588:	b00d      	add	sp, #52	; 0x34
 800558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Y -= (pFont->yOffsetMin / 2);
 800558e:	f994 300b 	ldrsb.w	r3, [r4, #11]
 8005592:	2b00      	cmp	r3, #0
 8005594:	db05      	blt.n	80055a2 <ILI9341_DrawCharAtXY+0x9a>
 8005596:	9a08      	ldr	r2, [sp, #32]
 8005598:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 800559c:	b29b      	uxth	r3, r3
 800559e:	9308      	str	r3, [sp, #32]
 80055a0:	e7cb      	b.n	800553a <ILI9341_DrawCharAtXY+0x32>
 80055a2:	3301      	adds	r3, #1
 80055a4:	e7f7      	b.n	8005596 <ILI9341_DrawCharAtXY+0x8e>
      Color_MSBFirst = SwapBytes(Color);
 80055a6:	9806      	ldr	r0, [sp, #24]
 80055a8:	f7ff fae8 	bl	8004b7c <SwapBytes>
 80055ac:	4605      	mov	r5, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 80055ae:	4b77      	ldr	r3, [pc, #476]	; (800578c <ILI9341_DrawCharAtXY+0x284>)
 80055b0:	8818      	ldrh	r0, [r3, #0]
 80055b2:	f7ff fae3 	bl	8004b7c <SwapBytes>
 80055b6:	4604      	mov	r4, r0
      pMemChar = (uint16_t *)malloc(w * h * 2);
 80055b8:	fb0b f008 	mul.w	r0, fp, r8
 80055bc:	0040      	lsls	r0, r0, #1
 80055be:	f002 fa5f 	bl	8007a80 <malloc>
 80055c2:	4607      	mov	r7, r0
      pMemCharPixel = pMemChar;
 80055c4:	4684      	mov	ip, r0
  bit = 0;
 80055c6:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80055ca:	4670      	mov	r0, lr
  bits = 0;
 80055cc:	4673      	mov	r3, lr
      for (yy = 0; yy < h; ++yy)
 80055ce:	e01c      	b.n	800560a <ILI9341_DrawCharAtXY+0x102>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80055d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055d4:	d113      	bne.n	80055fe <ILI9341_DrawCharAtXY+0xf6>
 80055d6:	4620      	mov	r0, r4
 80055d8:	f82c 0b02 	strh.w	r0, [ip], #2
          bits <<= 1;
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 80055e0:	3201      	adds	r2, #1
 80055e2:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 80055e4:	4608      	mov	r0, r1
        for (xx = 0; xx < w; ++xx)
 80055e6:	4542      	cmp	r2, r8
 80055e8:	d20b      	bcs.n	8005602 <ILI9341_DrawCharAtXY+0xfa>
          if (!(bit++ & 7))
 80055ea:	1c41      	adds	r1, r0, #1
 80055ec:	b2c9      	uxtb	r1, r1
 80055ee:	f010 0f07 	tst.w	r0, #7
 80055f2:	d1ed      	bne.n	80055d0 <ILI9341_DrawCharAtXY+0xc8>
            bits = pBitmap[bo++];
 80055f4:	1c70      	adds	r0, r6, #1
 80055f6:	f819 3006 	ldrb.w	r3, [r9, r6]
 80055fa:	b286      	uxth	r6, r0
 80055fc:	e7e8      	b.n	80055d0 <ILI9341_DrawCharAtXY+0xc8>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80055fe:	4628      	mov	r0, r5
 8005600:	e7ea      	b.n	80055d8 <ILI9341_DrawCharAtXY+0xd0>
      for (yy = 0; yy < h; ++yy)
 8005602:	f10e 0e01 	add.w	lr, lr, #1
 8005606:	fa5f fe8e 	uxtb.w	lr, lr
 800560a:	45de      	cmp	lr, fp
 800560c:	d201      	bcs.n	8005612 <ILI9341_DrawCharAtXY+0x10a>
        for (xx = 0; xx < w; ++xx)
 800560e:	9a03      	ldr	r2, [sp, #12]
 8005610:	e7e9      	b.n	80055e6 <ILI9341_DrawCharAtXY+0xde>
      ILI9341_DrawPixels_MSBFirst(X + xo, Y + yo, w, h, pMemChar);
 8005612:	9908      	ldr	r1, [sp, #32]
 8005614:	9b07      	ldr	r3, [sp, #28]
 8005616:	4419      	add	r1, r3
 8005618:	9805      	ldr	r0, [sp, #20]
 800561a:	9b04      	ldr	r3, [sp, #16]
 800561c:	4418      	add	r0, r3
 800561e:	9700      	str	r7, [sp, #0]
 8005620:	465b      	mov	r3, fp
 8005622:	4642      	mov	r2, r8
 8005624:	b289      	uxth	r1, r1
 8005626:	b280      	uxth	r0, r0
 8005628:	f7ff fec0 	bl	80053ac <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 800562c:	4638      	mov	r0, r7
 800562e:	f002 fa2f 	bl	8007a90 <free>
      break;
 8005632:	e7a2      	b.n	800557a <ILI9341_DrawCharAtXY+0x72>
      Color_MSBFirst = SwapBytes(Color);
 8005634:	9806      	ldr	r0, [sp, #24]
 8005636:	f7ff faa1 	bl	8004b7c <SwapBytes>
 800563a:	4604      	mov	r4, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 800563c:	4b53      	ldr	r3, [pc, #332]	; (800578c <ILI9341_DrawCharAtXY+0x284>)
 800563e:	8818      	ldrh	r0, [r3, #0]
 8005640:	f7ff fa9c 	bl	8004b7c <SwapBytes>
 8005644:	4607      	mov	r7, r0
      CharWidth = pGlyph->xAdvance;
 8005646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005648:	791a      	ldrb	r2, [r3, #4]
 800564a:	9206      	str	r2, [sp, #24]
      CharHeight = yo_max - yo_min + 1;
 800564c:	eba5 030a 	sub.w	r3, r5, sl
 8005650:	b2db      	uxtb	r3, r3
 8005652:	3301      	adds	r3, #1
 8005654:	b2db      	uxtb	r3, r3
 8005656:	930b      	str	r3, [sp, #44]	; 0x2c
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 8005658:	fb02 f503 	mul.w	r5, r2, r3
 800565c:	0068      	lsls	r0, r5, #1
 800565e:	f002 fa0f 	bl	8007a80 <malloc>
 8005662:	4603      	mov	r3, r0
 8005664:	9009      	str	r0, [sp, #36]	; 0x24
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8005666:	2200      	movs	r2, #0
 8005668:	e003      	b.n	8005672 <ILI9341_DrawCharAtXY+0x16a>
        *pMemCharPixel++ = TextBackgroundColor_MSBFirst;
 800566a:	f823 7b02 	strh.w	r7, [r3], #2
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800566e:	3201      	adds	r2, #1
 8005670:	b292      	uxth	r2, r2
 8005672:	4295      	cmp	r5, r2
 8005674:	dcf9      	bgt.n	800566a <ILI9341_DrawCharAtXY+0x162>
  bit = 0;
 8005676:	9f03      	ldr	r7, [sp, #12]
 8005678:	463d      	mov	r5, r7
  bits = 0;
 800567a:	463b      	mov	r3, r7
 800567c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005680:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8005684:	e018      	b.n	80056b8 <ILI9341_DrawCharAtXY+0x1b0>
          if (bits & 0x80)
 8005686:	f013 0f80 	tst.w	r3, #128	; 0x80
 800568a:	d111      	bne.n	80056b0 <ILI9341_DrawCharAtXY+0x1a8>
          ++pMemCharPixel;
 800568c:	3002      	adds	r0, #2
          bits <<= 1;
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 8005692:	3201      	adds	r2, #1
 8005694:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 8005696:	460d      	mov	r5, r1
        for (xx = 0; xx < w; ++xx)
 8005698:	4542      	cmp	r2, r8
 800569a:	d20b      	bcs.n	80056b4 <ILI9341_DrawCharAtXY+0x1ac>
          if (!(bit++ & 7))
 800569c:	1c69      	adds	r1, r5, #1
 800569e:	b2c9      	uxtb	r1, r1
 80056a0:	f015 0f07 	tst.w	r5, #7
 80056a4:	d1ef      	bne.n	8005686 <ILI9341_DrawCharAtXY+0x17e>
            bits = pBitmap[bo++];
 80056a6:	1c75      	adds	r5, r6, #1
 80056a8:	f819 3006 	ldrb.w	r3, [r9, r6]
 80056ac:	b2ae      	uxth	r6, r5
 80056ae:	e7ea      	b.n	8005686 <ILI9341_DrawCharAtXY+0x17e>
            *pMemCharPixel = Color_MSBFirst;
 80056b0:	8004      	strh	r4, [r0, #0]
 80056b2:	e7eb      	b.n	800568c <ILI9341_DrawCharAtXY+0x184>
      for (yy = 0; yy < h; ++yy)
 80056b4:	3701      	adds	r7, #1
 80056b6:	b2ff      	uxtb	r7, r7
 80056b8:	455f      	cmp	r7, fp
 80056ba:	d20a      	bcs.n	80056d2 <ILI9341_DrawCharAtXY+0x1ca>
        pMemCharPixel = &pMemChar[(- yo_min + yo + yy) * CharWidth + xo];
 80056bc:	ebac 000a 	sub.w	r0, ip, sl
 80056c0:	4438      	add	r0, r7
 80056c2:	9a04      	ldr	r2, [sp, #16]
 80056c4:	9906      	ldr	r1, [sp, #24]
 80056c6:	fb00 2001 	mla	r0, r0, r1, r2
 80056ca:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
        for (xx = 0; xx < w; ++xx)
 80056ce:	9a03      	ldr	r2, [sp, #12]
 80056d0:	e7e2      	b.n	8005698 <ILI9341_DrawCharAtXY+0x190>
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
 80056d2:	9908      	ldr	r1, [sp, #32]
 80056d4:	4451      	add	r1, sl
 80056d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80056d8:	9400      	str	r4, [sp, #0]
 80056da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056dc:	9a06      	ldr	r2, [sp, #24]
 80056de:	b289      	uxth	r1, r1
 80056e0:	9805      	ldr	r0, [sp, #20]
 80056e2:	f7ff fe63 	bl	80053ac <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 80056e6:	4620      	mov	r0, r4
 80056e8:	f002 f9d2 	bl	8007a90 <free>
      break;
 80056ec:	e745      	b.n	800557a <ILI9341_DrawCharAtXY+0x72>
      ILI9341_CSX_Low();
 80056ee:	2200      	movs	r2, #0
 80056f0:	2102      	movs	r1, #2
 80056f2:	4827      	ldr	r0, [pc, #156]	; (8005790 <ILI9341_DrawCharAtXY+0x288>)
 80056f4:	f7fb fba1 	bl	8000e3a <HAL_GPIO_WritePin>
  bit = 0;
 80056f8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80056fc:	4653      	mov	r3, sl
  bits = 0;
 80056fe:	4654      	mov	r4, sl
 8005700:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005704:	f8dd b020 	ldr.w	fp, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 8005708:	e028      	b.n	800575c <ILI9341_DrawCharAtXY+0x254>
          if (bits & 0x80)
 800570a:	f014 0f80 	tst.w	r4, #128	; 0x80
 800570e:	d110      	bne.n	8005732 <ILI9341_DrawCharAtXY+0x22a>
          bits <<= 1;
 8005710:	0064      	lsls	r4, r4, #1
 8005712:	b2e4      	uxtb	r4, r4
        for (xx = 0; xx < w; ++xx)
 8005714:	3501      	adds	r5, #1
 8005716:	b2ed      	uxtb	r5, r5
          if (!(bit++ & 7))
 8005718:	463b      	mov	r3, r7
        for (xx = 0; xx < w; ++xx)
 800571a:	4545      	cmp	r5, r8
 800571c:	d21a      	bcs.n	8005754 <ILI9341_DrawCharAtXY+0x24c>
          if (!(bit++ & 7))
 800571e:	1c5f      	adds	r7, r3, #1
 8005720:	b2ff      	uxtb	r7, r7
 8005722:	f013 0f07 	tst.w	r3, #7
 8005726:	d1f0      	bne.n	800570a <ILI9341_DrawCharAtXY+0x202>
            bits = pBitmap[bo++];
 8005728:	1c73      	adds	r3, r6, #1
 800572a:	f819 4006 	ldrb.w	r4, [r9, r6]
 800572e:	b29e      	uxth	r6, r3
 8005730:	e7eb      	b.n	800570a <ILI9341_DrawCharAtXY+0x202>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 8005732:	9b05      	ldr	r3, [sp, #20]
 8005734:	9a04      	ldr	r2, [sp, #16]
 8005736:	1898      	adds	r0, r3, r2
 8005738:	fa15 f080 	uxtah	r0, r5, r0
 800573c:	9b07      	ldr	r3, [sp, #28]
 800573e:	eb0b 0103 	add.w	r1, fp, r3
 8005742:	fa1a f181 	uxtah	r1, sl, r1
 8005746:	2300      	movs	r3, #0
 8005748:	9a06      	ldr	r2, [sp, #24]
 800574a:	b209      	sxth	r1, r1
 800574c:	b200      	sxth	r0, r0
 800574e:	f7ff fe21 	bl	8005394 <ILI9341_DrawPixel>
 8005752:	e7dd      	b.n	8005710 <ILI9341_DrawCharAtXY+0x208>
      for (yy = 0; yy < h; ++yy)
 8005754:	f10a 0a01 	add.w	sl, sl, #1
 8005758:	fa5f fa8a 	uxtb.w	sl, sl
 800575c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800575e:	4592      	cmp	sl, r2
 8005760:	d201      	bcs.n	8005766 <ILI9341_DrawCharAtXY+0x25e>
        for (xx = 0; xx < w; ++xx)
 8005762:	9d03      	ldr	r5, [sp, #12]
 8005764:	e7d9      	b.n	800571a <ILI9341_DrawCharAtXY+0x212>
      ILI9341_CSX_High();
 8005766:	2201      	movs	r2, #1
 8005768:	2102      	movs	r1, #2
 800576a:	4809      	ldr	r0, [pc, #36]	; (8005790 <ILI9341_DrawCharAtXY+0x288>)
 800576c:	f7fb fb65 	bl	8000e3a <HAL_GPIO_WritePin>
      break;
 8005770:	e703      	b.n	800557a <ILI9341_DrawCharAtXY+0x72>
    return pGlyph->xAdvance;
 8005772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005774:	7918      	ldrb	r0, [r3, #4]
 8005776:	e707      	b.n	8005588 <ILI9341_DrawCharAtXY+0x80>
    return 0;
 8005778:	2000      	movs	r0, #0
 800577a:	e705      	b.n	8005588 <ILI9341_DrawCharAtXY+0x80>
    return 0;
 800577c:	2000      	movs	r0, #0
 800577e:	e703      	b.n	8005588 <ILI9341_DrawCharAtXY+0x80>
 8005780:	200004a0 	.word	0x200004a0
 8005784:	2000000b 	.word	0x2000000b
 8005788:	2000000a 	.word	0x2000000a
 800578c:	20000498 	.word	0x20000498
 8005790:	40020800 	.word	0x40020800

08005794 <ILI9341_SetTextColor>:

uint16_t ILI9341_SetTextColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextColor;
 8005794:	4b02      	ldr	r3, [pc, #8]	; (80057a0 <ILI9341_SetTextColor+0xc>)
 8005796:	881a      	ldrh	r2, [r3, #0]
  TextColor = Value;
 8005798:	8018      	strh	r0, [r3, #0]
  return Result;
}
 800579a:	4610      	mov	r0, r2
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000008 	.word	0x20000008

080057a4 <ILI9341_SetTextBackgroundColor>:

uint16_t ILI9341_SetTextBackgroundColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextBackgroundColor;
 80057a4:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <ILI9341_SetTextBackgroundColor+0xc>)
 80057a6:	881a      	ldrh	r2, [r3, #0]
  TextBackgroundColor = Value;
 80057a8:	8018      	strh	r0, [r3, #0]
  return Result;
}
 80057aa:	4610      	mov	r0, r2
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000498 	.word	0x20000498

080057b4 <ILI9341_SetTextDrawMode>:

TextDrawMode_t ILI9341_SetTextDrawMode(TextDrawMode_t Value)
{
  TextDrawMode_t Result;

  Result = TextDrawMode;
 80057b4:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <ILI9341_SetTextDrawMode+0xc>)
 80057b6:	781a      	ldrb	r2, [r3, #0]
  TextDrawMode = Value;
 80057b8:	7018      	strb	r0, [r3, #0]
  return Result;
}
 80057ba:	4610      	mov	r0, r2
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	2000000a 	.word	0x2000000a

080057c4 <ILI9341_DrawTextAtXY>:
  uint16_t NumChars;
  uint8_t DX;
  
  pText = (uint8_t *) Text;

  if (!pText)
 80057c4:	b360      	cbz	r0, 8005820 <ILI9341_DrawTextAtXY+0x5c>
{
 80057c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	460d      	mov	r5, r1
 80057cc:	4690      	mov	r8, r2
 80057ce:	461c      	mov	r4, r3
 80057d0:	4606      	mov	r6, r0
    return;

  NumChars = strlen(Text);
 80057d2:	f7fa fd35 	bl	8000240 <strlen>
 80057d6:	b287      	uxth	r7, r0

  switch (TextPosition)
 80057d8:	2c02      	cmp	r4, #2
 80057da:	d003      	beq.n	80057e4 <ILI9341_DrawTextAtXY+0x20>
 80057dc:	2c03      	cmp	r4, #3
 80057de:	d009      	beq.n	80057f4 <ILI9341_DrawTextAtXY+0x30>
{
 80057e0:	2400      	movs	r4, #0
 80057e2:	e019      	b.n	8005818 <ILI9341_DrawTextAtXY+0x54>
  {
    case tpCentre:
      X -= ILI9341_GetTextWidth(Text) / 2;
 80057e4:	4630      	mov	r0, r6
 80057e6:	f7ff fe7b 	bl	80054e0 <ILI9341_GetTextWidth>
 80057ea:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80057ee:	1a28      	subs	r0, r5, r0
 80057f0:	b285      	uxth	r5, r0
      break;
 80057f2:	e7f5      	b.n	80057e0 <ILI9341_DrawTextAtXY+0x1c>
    case tpRight:
      X -= ILI9341_GetTextWidth(Text);
 80057f4:	4630      	mov	r0, r6
 80057f6:	f7ff fe73 	bl	80054e0 <ILI9341_GetTextWidth>
 80057fa:	1a28      	subs	r0, r5, r0
 80057fc:	b285      	uxth	r5, r0
      break;
 80057fe:	e7ef      	b.n	80057e0 <ILI9341_DrawTextAtXY+0x1c>
  }

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
  {
    Ch = *pText;
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 8005800:	4b08      	ldr	r3, [pc, #32]	; (8005824 <ILI9341_DrawTextAtXY+0x60>)
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	4642      	mov	r2, r8
 8005806:	4629      	mov	r1, r5
 8005808:	f816 0b01 	ldrb.w	r0, [r6], #1
 800580c:	f7ff fe7c 	bl	8005508 <ILI9341_DrawCharAtXY>
    ++pText;
    X += DX;
 8005810:	4428      	add	r0, r5
 8005812:	b285      	uxth	r5, r0
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8005814:	3401      	adds	r4, #1
 8005816:	b2a4      	uxth	r4, r4
 8005818:	42bc      	cmp	r4, r7
 800581a:	d3f1      	bcc.n	8005800 <ILI9341_DrawTextAtXY+0x3c>
  }
}
 800581c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20000008 	.word	0x20000008

08005828 <CaptureCallback>:
// static uint16_t AudioInput_MeasuredSampleRate_DeltaCount = 0;
static uint32_t AudioInput_MeasuredSampleRate_FrameCounter = 0;

static void CaptureCallback(TIM_HandleTypeDef *htim)
{
  ++AudioInput_MeasuredSampleRate_FrameCounter;
 8005828:	4a02      	ldr	r2, [pc, #8]	; (8005834 <CaptureCallback+0xc>)
 800582a:	6813      	ldr	r3, [r2, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	6013      	str	r3, [r2, #0]

//  uint16_t AudioInput_MeasuredSampleRate_Count;
//  AudioInput_MeasuredSampleRate_Count = __HAL_TIM_GetCounter(htim);
//  AudioInput_MeasuredSampleRate_DeltaCount = AudioInput_MeasuredSampleRate_Count - AudioInput_MeasuredSampleRate_PreviousCount;
//  AudioInput_MeasuredSampleRate_PreviousCount = AudioInput_MeasuredSampleRate_Count;
}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	200004ac 	.word	0x200004ac

08005838 <InitializeResamplingVariables>:
  return fabs((SampleRateInQuestion / ReferenceSampleRate) - 1.0f) <= (InputSampleFrequencyCaptureHalfRangePPM / 1E6);
}

static void InitializeResamplingVariables()
{
  BufferReadPositionInitialized = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	4a08      	ldr	r2, [pc, #32]	; (800585c <InitializeResamplingVariables+0x24>)
 800583c:	7013      	strb	r3, [r2, #0]
  BufferReadPosition = 0.0f;
 800583e:	2200      	movs	r2, #0
 8005840:	4907      	ldr	r1, [pc, #28]	; (8005860 <InitializeResamplingVariables+0x28>)
 8005842:	600a      	str	r2, [r1, #0]
  IntegralOfNormalizedError = 0.0f;
 8005844:	4907      	ldr	r1, [pc, #28]	; (8005864 <InitializeResamplingVariables+0x2c>)
 8005846:	600a      	str	r2, [r1, #0]
  PreviousNormalizedError = 0.0f;
 8005848:	4907      	ldr	r1, [pc, #28]	; (8005868 <InitializeResamplingVariables+0x30>)
 800584a:	600a      	str	r2, [r1, #0]
  InputSampleRateHistory_NumValues = 0;
 800584c:	4a07      	ldr	r2, [pc, #28]	; (800586c <InitializeResamplingVariables+0x34>)
 800584e:	6013      	str	r3, [r2, #0]
  NumConsecutiveInputBufferReadPointerInRange = 0;
 8005850:	4a07      	ldr	r2, [pc, #28]	; (8005870 <InitializeResamplingVariables+0x38>)
 8005852:	6013      	str	r3, [r2, #0]
  WasLocked = 0;
 8005854:	4a07      	ldr	r2, [pc, #28]	; (8005874 <InitializeResamplingVariables+0x3c>)
 8005856:	7013      	strb	r3, [r2, #0]
}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	200004b4 	.word	0x200004b4
 8005860:	200004b0 	.word	0x200004b0
 8005864:	200004c0 	.word	0x200004c0
 8005868:	200004cc 	.word	0x200004cc
 800586c:	200004bc 	.word	0x200004bc
 8005870:	200004c4 	.word	0x200004c4
 8005874:	20002ce1 	.word	0x20002ce1

08005878 <Calculate_SPDIFRX_BufferSampleStepSize>:
{
 8005878:	b510      	push	{r4, lr}
 800587a:	ed2d 8b02 	vpush	{d8}
 800587e:	4604      	mov	r4, r0
  SPDIFRX_BufferWriteIndex = SPDIFRX_Buffer_NumSamples - 0.5f * hspdif.hdmaDrRx->Instance->NDTR; // NB: DMA counts in channel samples not LR samples. It also counts backward. It also starts at the maximum value, not one less. However, it is zero before it becomes active [PJB].
 8005880:	4b4b      	ldr	r3, [pc, #300]	; (80059b0 <Calculate_SPDIFRX_BufferSampleStepSize+0x138>)
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	ed93 8a01 	vldr	s16, [r3, #4]
 800588a:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800588e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005892:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005896:	eddf 7a47 	vldr	s15, [pc, #284]	; 80059b4 <Calculate_SPDIFRX_BufferSampleStepSize+0x13c>
 800589a:	ee37 8ac8 	vsub.f32	s16, s15, s16
  if (!BufferReadPositionInitialized)
 800589e:	4b46      	ldr	r3, [pc, #280]	; (80059b8 <Calculate_SPDIFRX_BufferSampleStepSize+0x140>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d059      	beq.n	800595a <Calculate_SPDIFRX_BufferSampleStepSize+0xe2>
  NumSamplesReadIsBehindWrite = SPDIFRX_BufferWriteIndex - BufferReadPosition;
 80058a6:	4b45      	ldr	r3, [pc, #276]	; (80059bc <Calculate_SPDIFRX_BufferSampleStepSize+0x144>)
 80058a8:	edd3 7a00 	vldr	s15, [r3]
 80058ac:	ee78 7a67 	vsub.f32	s15, s16, s15
  if (NumSamplesReadIsBehindWrite < 0) NumSamplesReadIsBehindWrite += SPDIFRX_Buffer_NumSamples;
 80058b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80058b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b8:	d466      	bmi.n	8005988 <Calculate_SPDIFRX_BufferSampleStepSize+0x110>
  ActualReadLagProportion = (float)NumSamplesReadIsBehindWrite / (float)SPDIFRX_Buffer_NumSamples;
 80058ba:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80059b4 <Calculate_SPDIFRX_BufferSampleStepSize+0x13c>
 80058be:	ee87 8a87 	vdiv.f32	s16, s15, s14
  float UnclampedNormalizedError = (1.0f / (1.0f - TargetReadLagProportion)) * (ActualReadLagProportion - TargetReadLagProportion);
 80058c2:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
 80058c6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80058ca:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80058ce:	ee28 8a27 	vmul.f32	s16, s16, s15
  float ClampedNormalizedError = Clamp_float(UnclampedNormalizedError, -1.0f, 1.0f);
 80058d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80058d6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80058da:	eeb0 0a48 	vmov.f32	s0, s16
 80058de:	f7ff f95f 	bl	8004ba0 <Clamp_float>
  *o_InputBufferReadPointerInRange = ((UnclampedNormalizedError >= -1.0f) || (UnclampedNormalizedError <= 1.0f));
 80058e2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80058e6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80058ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ee:	db50      	blt.n	8005992 <Calculate_SPDIFRX_BufferSampleStepSize+0x11a>
 80058f0:	2301      	movs	r3, #1
 80058f2:	7023      	strb	r3, [r4, #0]
  IntegralOfNormalizedError = 0.95f * IntegralOfNormalizedError + ClampedNormalizedError;
 80058f4:	4b32      	ldr	r3, [pc, #200]	; (80059c0 <Calculate_SPDIFRX_BufferSampleStepSize+0x148>)
 80058f6:	ed93 6a00 	vldr	s12, [r3]
 80058fa:	eddf 7a32 	vldr	s15, [pc, #200]	; 80059c4 <Calculate_SPDIFRX_BufferSampleStepSize+0x14c>
 80058fe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005902:	ee36 6a00 	vadd.f32	s12, s12, s0
 8005906:	ed83 6a00 	vstr	s12, [r3]
  SPDIFRX_BufferSampleStepSize = ((float)InputSampleRate / (float)OutputSampleRate) * (1.0f + Kp * ClampedNormalizedError + 2E-4 * IntegralOfNormalizedError);
 800590a:	4b2f      	ldr	r3, [pc, #188]	; (80059c8 <Calculate_SPDIFRX_BufferSampleStepSize+0x150>)
 800590c:	edd3 6a00 	vldr	s13, [r3]
 8005910:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005914:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <Calculate_SPDIFRX_BufferSampleStepSize+0x154>)
 8005916:	edd3 7a00 	vldr	s15, [r3]
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005922:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005926:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80059d0 <Calculate_SPDIFRX_BufferSampleStepSize+0x158>
 800592a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800592e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005932:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005936:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800593a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800593e:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 80059a8 <Calculate_SPDIFRX_BufferSampleStepSize+0x130>
 8005942:	ee06 0b05 	vmla.f64	d0, d6, d5
 8005946:	ee27 0b00 	vmul.f64	d0, d7, d0
 800594a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800594e:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <Calculate_SPDIFRX_BufferSampleStepSize+0x15c>)
 8005950:	ed83 0a00 	vstr	s0, [r3]
}
 8005954:	ecbd 8b02 	vpop	{d8}
 8005958:	bd10      	pop	{r4, pc}
    BufferReadPosition = Wrap_int(SPDIFRX_BufferWriteIndex - TargetReadLagProportion * SPDIFRX_Buffer_NumSamples, SPDIFRX_Buffer_NumSamples);
 800595a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80059d8 <Calculate_SPDIFRX_BufferSampleStepSize+0x160>
 800595e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005962:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800596a:	ee17 0a90 	vmov	r0, s15
 800596e:	f7ff f92b 	bl	8004bc8 <Wrap_int>
 8005972:	ee07 0a90 	vmov	s15, r0
 8005976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <Calculate_SPDIFRX_BufferSampleStepSize+0x144>)
 800597c:	edc3 7a00 	vstr	s15, [r3]
    BufferReadPositionInitialized = 1;
 8005980:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <Calculate_SPDIFRX_BufferSampleStepSize+0x140>)
 8005982:	2201      	movs	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	e78e      	b.n	80058a6 <Calculate_SPDIFRX_BufferSampleStepSize+0x2e>
  if (NumSamplesReadIsBehindWrite < 0) NumSamplesReadIsBehindWrite += SPDIFRX_Buffer_NumSamples;
 8005988:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80059b4 <Calculate_SPDIFRX_BufferSampleStepSize+0x13c>
 800598c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005990:	e793      	b.n	80058ba <Calculate_SPDIFRX_BufferSampleStepSize+0x42>
  *o_InputBufferReadPointerInRange = ((UnclampedNormalizedError >= -1.0f) || (UnclampedNormalizedError <= 1.0f));
 8005992:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005996:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800599a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599e:	d901      	bls.n	80059a4 <Calculate_SPDIFRX_BufferSampleStepSize+0x12c>
 80059a0:	2300      	movs	r3, #0
 80059a2:	e7a6      	b.n	80058f2 <Calculate_SPDIFRX_BufferSampleStepSize+0x7a>
 80059a4:	2301      	movs	r3, #1
 80059a6:	e7a4      	b.n	80058f2 <Calculate_SPDIFRX_BufferSampleStepSize+0x7a>
 80059a8:	eb1c432d 	.word	0xeb1c432d
 80059ac:	3f2a36e2 	.word	0x3f2a36e2
 80059b0:	20004988 	.word	0x20004988
 80059b4:	44200000 	.word	0x44200000
 80059b8:	200004b4 	.word	0x200004b4
 80059bc:	200004b0 	.word	0x200004b0
 80059c0:	200004c0 	.word	0x200004c0
 80059c4:	3f733333 	.word	0x3f733333
 80059c8:	200004b8 	.word	0x200004b8
 80059cc:	200004c8 	.word	0x200004c8
 80059d0:	3a83126f 	.word	0x3a83126f
 80059d4:	200004d4 	.word	0x200004d4
 80059d8:	43f00000 	.word	0x43f00000

080059dc <HAL_SPDIFRX_ErrorCallback>:
  SPDIFRX_ErrorCallbackCalled = 1;
 80059dc:	4b01      	ldr	r3, [pc, #4]	; (80059e4 <HAL_SPDIFRX_ErrorCallback+0x8>)
 80059de:	2201      	movs	r2, #1
 80059e0:	701a      	strb	r2, [r3, #0]
}
 80059e2:	4770      	bx	lr
 80059e4:	200004d8 	.word	0x200004d8

080059e8 <SPDIFRX_GetNumErrors>:
  *pNumTransitionErrors = SPDIFRX_NumTransitionErrors;
 80059e8:	4b04      	ldr	r3, [pc, #16]	; (80059fc <SPDIFRX_GetNumErrors+0x14>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	7003      	strb	r3, [r0, #0]
  *pNumSyncErrors = SPDIFRX_NumSyncErrors;
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <SPDIFRX_GetNumErrors+0x18>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	700b      	strb	r3, [r1, #0]
  *pNumFrameErrors = SPDIFRX_NumFrameErrors;
 80059f4:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <SPDIFRX_GetNumErrors+0x1c>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	7013      	strb	r3, [r2, #0]
}
 80059fa:	4770      	bx	lr
 80059fc:	200018de 	.word	0x200018de
 8005a00:	200018dd 	.word	0x200018dd
 8005a04:	200018dc 	.word	0x200018dc

08005a08 <SPDIFRX_CopySamplesToGivenBuffer>:
  if (DisableInterruptHandler)
 8005a08:	4ba9      	ldr	r3, [pc, #676]	; (8005cb0 <SPDIFRX_CopySamplesToGivenBuffer+0x2a8>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f040 814e 	bne.w	8005cae <SPDIFRX_CopySamplesToGivenBuffer+0x2a6>
{
 8005a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a16:	ed2d 8b04 	vpush	{d8-d9}
 8005a1a:	b08e      	sub	sp, #56	; 0x38
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	460e      	mov	r6, r1
  uint8_t SPDIFRX_State = hspdif.Instance->CR & 0x03;
 8005a20:	4ba4      	ldr	r3, [pc, #656]	; (8005cb4 <SPDIFRX_CopySamplesToGivenBuffer+0x2ac>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	f002 0203 	and.w	r2, r2, #3
  if ((SPDIFRX_State != 0x03) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_TERR) != RESET) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_SERR) != RESET) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_FERR) != RESET))
 8005a2a:	2a03      	cmp	r2, #3
 8005a2c:	d10b      	bne.n	8005a46 <SPDIFRX_CopySamplesToGivenBuffer+0x3e>
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005a34:	d107      	bne.n	8005a46 <SPDIFRX_CopySamplesToGivenBuffer+0x3e>
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a3c:	d103      	bne.n	8005a46 <SPDIFRX_CopySamplesToGivenBuffer+0x3e>
 8005a3e:	689c      	ldr	r4, [r3, #8]
 8005a40:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8005a44:	d02d      	beq.n	8005aa2 <SPDIFRX_CopySamplesToGivenBuffer+0x9a>
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_TERR))
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005a4c:	d003      	beq.n	8005a56 <SPDIFRX_CopySamplesToGivenBuffer+0x4e>
      ++SPDIFRX_NumTransitionErrors;
 8005a4e:	499a      	ldr	r1, [pc, #616]	; (8005cb8 <SPDIFRX_CopySamplesToGivenBuffer+0x2b0>)
 8005a50:	780a      	ldrb	r2, [r1, #0]
 8005a52:	3201      	adds	r2, #1
 8005a54:	700a      	strb	r2, [r1, #0]
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_SERR))
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a5c:	d003      	beq.n	8005a66 <SPDIFRX_CopySamplesToGivenBuffer+0x5e>
      ++SPDIFRX_NumSyncErrors;
 8005a5e:	4997      	ldr	r1, [pc, #604]	; (8005cbc <SPDIFRX_CopySamplesToGivenBuffer+0x2b4>)
 8005a60:	780a      	ldrb	r2, [r1, #0]
 8005a62:	3201      	adds	r2, #1
 8005a64:	700a      	strb	r2, [r1, #0]
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_FERR))
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a6c:	d003      	beq.n	8005a76 <SPDIFRX_CopySamplesToGivenBuffer+0x6e>
      ++SPDIFRX_NumFrameErrors;
 8005a6e:	4994      	ldr	r1, [pc, #592]	; (8005cc0 <SPDIFRX_CopySamplesToGivenBuffer+0x2b8>)
 8005a70:	780a      	ldrb	r2, [r1, #0]
 8005a72:	3201      	adds	r2, #1
 8005a74:	700a      	strb	r2, [r1, #0]
    ReceiveErrorOccurred = 1;
 8005a76:	2001      	movs	r0, #1
 8005a78:	4a92      	ldr	r2, [pc, #584]	; (8005cc4 <SPDIFRX_CopySamplesToGivenBuffer+0x2bc>)
 8005a7a:	7010      	strb	r0, [r2, #0]
    DisableInterruptHandler = 1;
 8005a7c:	4a8c      	ldr	r2, [pc, #560]	; (8005cb0 <SPDIFRX_CopySamplesToGivenBuffer+0x2a8>)
 8005a7e:	7010      	strb	r0, [r2, #0]
    __HAL_SPDIFRX_IDLE(&hspdif);
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	f022 0203 	bic.w	r2, r2, #3
 8005a86:	601a      	str	r2, [r3, #0]
    SPDIFRX_MuteOutput_Callback(1); //!!! May need to sort out Tick priorities and being called on main thread and in interrupt etc.
 8005a88:	f000 fe0e 	bl	80066a8 <SPDIFRX_MuteOutput_Callback>
    SPDIFRX_Locked_Callback(0);
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	f000 fd31 	bl	80064f4 <SPDIFRX_Locked_Callback>
    WasLocked = 0;
 8005a92:	4b8d      	ldr	r3, [pc, #564]	; (8005cc8 <SPDIFRX_CopySamplesToGivenBuffer+0x2c0>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
}
 8005a98:	b00e      	add	sp, #56	; 0x38
 8005a9a:	ecbd 8b04 	vpop	{d8-d9}
 8005a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  memcpy(SPDIFRX_SamplesSnapShot, SPDIFRX_IncomingSamples, sizeof(SPDIFRX_SamplesSnapShot));
 8005aa2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8005aa6:	4989      	ldr	r1, [pc, #548]	; (8005ccc <SPDIFRX_CopySamplesToGivenBuffer+0x2c4>)
 8005aa8:	4889      	ldr	r0, [pc, #548]	; (8005cd0 <SPDIFRX_CopySamplesToGivenBuffer+0x2c8>)
 8005aaa:	f001 fff9 	bl	8007aa0 <memcpy>
  SPDIFRX_BufferSampleStepSize = Calculate_SPDIFRX_BufferSampleStepSize(&InputBufferReadPointerInRange);
 8005aae:	f10d 0037 	add.w	r0, sp, #55	; 0x37
 8005ab2:	f7ff fee1 	bl	8005878 <Calculate_SPDIFRX_BufferSampleStepSize>
 8005ab6:	4b87      	ldr	r3, [pc, #540]	; (8005cd4 <SPDIFRX_CopySamplesToGivenBuffer+0x2cc>)
 8005ab8:	ed83 0a00 	vstr	s0, [r3]
  if (InputBufferReadPointerInRange)
 8005abc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8005ac0:	b9ab      	cbnz	r3, 8005aee <SPDIFRX_CopySamplesToGivenBuffer+0xe6>
    NumConsecutiveInputBufferReadPointerInRange = 0;
 8005ac2:	4b85      	ldr	r3, [pc, #532]	; (8005cd8 <SPDIFRX_CopySamplesToGivenBuffer+0x2d0>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
  IsLocked = NumConsecutiveInputBufferReadPointerInRange >= 20; //!!! Hardwired.
 8005ac8:	4b83      	ldr	r3, [pc, #524]	; (8005cd8 <SPDIFRX_CopySamplesToGivenBuffer+0x2d0>)
 8005aca:	f8d3 8000 	ldr.w	r8, [r3]
 8005ace:	f1b8 0f13 	cmp.w	r8, #19
 8005ad2:	bf94      	ite	ls
 8005ad4:	2700      	movls	r7, #0
 8005ad6:	2701      	movhi	r7, #1
  SPDIFRX_Locked_Callback(IsLocked);
 8005ad8:	4638      	mov	r0, r7
 8005ada:	f000 fd0b 	bl	80064f4 <SPDIFRX_Locked_Callback>
  if (IsLocked != WasLocked)
 8005ade:	4b7a      	ldr	r3, [pc, #488]	; (8005cc8 <SPDIFRX_CopySamplesToGivenBuffer+0x2c0>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	42bb      	cmp	r3, r7
 8005ae4:	d10b      	bne.n	8005afe <SPDIFRX_CopySamplesToGivenBuffer+0xf6>
  if (AudioBufferHalf == abhSecondHalf)
 8005ae6:	2e02      	cmp	r6, #2
 8005ae8:	d013      	beq.n	8005b12 <SPDIFRX_CopySamplesToGivenBuffer+0x10a>
    SampleOffsetIndex = 0;
 8005aea:	4626      	mov	r6, r4
  for(LocalSampleIndex = 0; LocalSampleIndex < SPDIFRX_Buffer_NumSamples / 2; ++LocalSampleIndex)
 8005aec:	e02c      	b.n	8005b48 <SPDIFRX_CopySamplesToGivenBuffer+0x140>
    NumConsecutiveInputBufferReadPointerInRange = Min_int32(NumConsecutiveInputBufferReadPointerInRange + 1, 1000000);
 8005aee:	4f7a      	ldr	r7, [pc, #488]	; (8005cd8 <SPDIFRX_CopySamplesToGivenBuffer+0x2d0>)
 8005af0:	6838      	ldr	r0, [r7, #0]
 8005af2:	497a      	ldr	r1, [pc, #488]	; (8005cdc <SPDIFRX_CopySamplesToGivenBuffer+0x2d4>)
 8005af4:	3001      	adds	r0, #1
 8005af6:	f7ff f846 	bl	8004b86 <Min_int32>
 8005afa:	6038      	str	r0, [r7, #0]
 8005afc:	e7e4      	b.n	8005ac8 <SPDIFRX_CopySamplesToGivenBuffer+0xc0>
    SPDIFRX_MuteOutput_Callback(!IsLocked);
 8005afe:	f1b8 0f13 	cmp.w	r8, #19
 8005b02:	bf8c      	ite	hi
 8005b04:	2000      	movhi	r0, #0
 8005b06:	2001      	movls	r0, #1
 8005b08:	f000 fdce 	bl	80066a8 <SPDIFRX_MuteOutput_Callback>
    WasLocked = IsLocked;
 8005b0c:	4b6e      	ldr	r3, [pc, #440]	; (8005cc8 <SPDIFRX_CopySamplesToGivenBuffer+0x2c0>)
 8005b0e:	701f      	strb	r7, [r3, #0]
 8005b10:	e7e9      	b.n	8005ae6 <SPDIFRX_CopySamplesToGivenBuffer+0xde>
    SampleOffsetIndex = SPDIFRX_Buffer_NumSamples / 2;
 8005b12:	f44f 76a0 	mov.w	r6, #320	; 0x140
 8005b16:	e017      	b.n	8005b48 <SPDIFRX_CopySamplesToGivenBuffer+0x140>
    TargetSample.Left = TargetSample.Left / 256;
 8005b18:	f102 01ff 	add.w	r1, r2, #255	; 0xff
 8005b1c:	e0ad      	b.n	8005c7a <SPDIFRX_CopySamplesToGivenBuffer+0x272>
    TargetSample.Right = TargetSample.Right / 256;
 8005b1e:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8005b22:	e0b0      	b.n	8005c86 <SPDIFRX_CopySamplesToGivenBuffer+0x27e>
      BufferReadPosition -= SPDIFRX_Buffer_NumSamples;
 8005b24:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8005ce0 <SPDIFRX_CopySamplesToGivenBuffer+0x2d8>
 8005b28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b2c:	4b6d      	ldr	r3, [pc, #436]	; (8005ce4 <SPDIFRX_CopySamplesToGivenBuffer+0x2dc>)
 8005b2e:	edc3 7a00 	vstr	s15, [r3]
    while (BufferReadPosition >= SPDIFRX_Buffer_NumSamples)
 8005b32:	4b6c      	ldr	r3, [pc, #432]	; (8005ce4 <SPDIFRX_CopySamplesToGivenBuffer+0x2dc>)
 8005b34:	edd3 7a00 	vldr	s15, [r3]
 8005b38:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8005ce0 <SPDIFRX_CopySamplesToGivenBuffer+0x2d8>
 8005b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b44:	daee      	bge.n	8005b24 <SPDIFRX_CopySamplesToGivenBuffer+0x11c>
  for(LocalSampleIndex = 0; LocalSampleIndex < SPDIFRX_Buffer_NumSamples / 2; ++LocalSampleIndex)
 8005b46:	3401      	adds	r4, #1
 8005b48:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8005b4c:	d2a4      	bcs.n	8005a98 <SPDIFRX_CopySamplesToGivenBuffer+0x90>
    GlobalSampleIndex = SampleOffsetIndex + LocalSampleIndex;
 8005b4e:	1937      	adds	r7, r6, r4
    BufferReadPosition_Fractional = modf(BufferReadPosition, &BufferReadPosition_Integral);
 8005b50:	4b64      	ldr	r3, [pc, #400]	; (8005ce4 <SPDIFRX_CopySamplesToGivenBuffer+0x2dc>)
 8005b52:	ed93 0a00 	vldr	s0, [r3]
 8005b56:	4668      	mov	r0, sp
 8005b58:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8005b5c:	f002 fcee 	bl	800853c <modf>
 8005b60:	eeb0 9b40 	vmov.f64	d9, d0
    SourceSampleIndex0 = Wrap_int((int)(BufferReadPosition_Integral) - 1, SPDIFRX_Buffer_NumSamples);
 8005b64:	ed9d 7b00 	vldr	d7, [sp]
 8005b68:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005b6c:	ee17 0a90 	vmov	r0, s15
 8005b70:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005b74:	3801      	subs	r0, #1
 8005b76:	f7ff f827 	bl	8004bc8 <Wrap_int>
 8005b7a:	4682      	mov	sl, r0
    SourceSampleIndex1 = Wrap_int(SourceSampleIndex0 + 1, SPDIFRX_Buffer_NumSamples);
 8005b7c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005b80:	3001      	adds	r0, #1
 8005b82:	f7ff f821 	bl	8004bc8 <Wrap_int>
 8005b86:	4681      	mov	r9, r0
    SourceSampleIndex2 = Wrap_int(SourceSampleIndex1 + 1, SPDIFRX_Buffer_NumSamples);
 8005b88:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	f7ff f81b 	bl	8004bc8 <Wrap_int>
 8005b92:	4680      	mov	r8, r0
    SourceSampleIndex3 = Wrap_int(SourceSampleIndex2 + 1, SPDIFRX_Buffer_NumSamples);
 8005b94:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f7ff f815 	bl	8004bc8 <Wrap_int>
 8005b9e:	4602      	mov	r2, r0
    SourceSample0 = SPDIFRX_SamplesSnapShot[SourceSampleIndex0];
 8005ba0:	4b4b      	ldr	r3, [pc, #300]	; (8005cd0 <SPDIFRX_CopySamplesToGivenBuffer+0x2c8>)
 8005ba2:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8005ba6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005baa:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8005bae:	e88c 0003 	stmia.w	ip, {r0, r1}
    SourceSample1 = SPDIFRX_SamplesSnapShot[SourceSampleIndex1];
 8005bb2:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8005bb6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005bba:	e899 0003 	ldmia.w	r9, {r0, r1}
 8005bbe:	e88c 0003 	stmia.w	ip, {r0, r1}
    SourceSample2 = SPDIFRX_SamplesSnapShot[SourceSampleIndex2];
 8005bc2:	f10d 0c1c 	add.w	ip, sp, #28
 8005bc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005bca:	e898 0003 	ldmia.w	r8, {r0, r1}
 8005bce:	e88c 0003 	stmia.w	ip, {r0, r1}
    SourceSample3 = SPDIFRX_SamplesSnapShot[SourceSampleIndex3];
 8005bd2:	f10d 0c14 	add.w	ip, sp, #20
 8005bd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005bde:	e88c 0003 	stmia.w	ip, {r0, r1}
    TargetSample.Left = CubicInterpolate(SourceSample0.Left, SourceSample1.Left, SourceSample2.Left, SourceSample3.Left, BufferReadPosition_Fractional);
 8005be2:	eeb0 4b49 	vmov.f64	d4, d9
 8005be6:	ee07 0a90 	vmov	s15, r0
 8005bea:	eeb8 3be7 	vcvt.f64.s32	d3, s15
 8005bee:	eddd 7a07 	vldr	s15, [sp, #28]
 8005bf2:	eeb8 2be7 	vcvt.f64.s32	d2, s15
 8005bf6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8005bfa:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8005bfe:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8005c02:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8005c06:	f7fe ffef 	bl	8004be8 <CubicInterpolate>
 8005c0a:	eebd 8bc0 	vcvt.s32.f64	s16, d0
 8005c0e:	ed8d 8a03 	vstr	s16, [sp, #12]
    TargetSample.Right = CubicInterpolate(SourceSample0.Right, SourceSample1.Right, SourceSample2.Right, SourceSample3.Right, BufferReadPosition_Fractional);
 8005c12:	eeb0 4b49 	vmov.f64	d4, d9
 8005c16:	eddd 7a06 	vldr	s15, [sp, #24]
 8005c1a:	eeb8 3be7 	vcvt.f64.s32	d3, s15
 8005c1e:	eddd 7a08 	vldr	s15, [sp, #32]
 8005c22:	eeb8 2be7 	vcvt.f64.s32	d2, s15
 8005c26:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8005c2a:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8005c2e:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8005c32:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8005c36:	f7fe ffd7 	bl	8004be8 <CubicInterpolate>
 8005c3a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8005c3e:	ed8d 0a04 	vstr	s0, [sp, #16]
    TargetSample.Left *= SPDIFRX_TransferGain;
 8005c42:	4b29      	ldr	r3, [pc, #164]	; (8005ce8 <SPDIFRX_CopySamplesToGivenBuffer+0x2e0>)
 8005c44:	edd3 7a00 	vldr	s15, [r3]
 8005c48:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8005c4c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005c50:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 8005c54:	ee17 2a10 	vmov	r2, s14
 8005c58:	ed8d 7a03 	vstr	s14, [sp, #12]
    TargetSample.Right *= SPDIFRX_TransferGain;
 8005c5c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8005c60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005c64:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005c68:	ee17 3a90 	vmov	r3, s15
 8005c6c:	edcd 7a04 	vstr	s15, [sp, #16]
    TargetSample.Left = TargetSample.Left / 256;
 8005c70:	ee17 1a10 	vmov	r1, s14
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	f6ff af4f 	blt.w	8005b18 <SPDIFRX_CopySamplesToGivenBuffer+0x110>
 8005c7a:	1209      	asrs	r1, r1, #8
 8005c7c:	9103      	str	r1, [sp, #12]
    TargetSample.Right = TargetSample.Right / 256;
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f6ff af4c 	blt.w	8005b1e <SPDIFRX_CopySamplesToGivenBuffer+0x116>
 8005c86:	1212      	asrs	r2, r2, #8
 8005c88:	9204      	str	r2, [sp, #16]
    pOutputBuffer[GlobalSampleIndex] = TargetSample;
 8005c8a:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8005c8e:	ab03      	add	r3, sp, #12
 8005c90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c94:	e887 0003 	stmia.w	r7, {r0, r1}
    BufferReadPosition += SPDIFRX_BufferSampleStepSize;
 8005c98:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <SPDIFRX_CopySamplesToGivenBuffer+0x2dc>)
 8005c9a:	edd3 7a00 	vldr	s15, [r3]
 8005c9e:	4a0d      	ldr	r2, [pc, #52]	; (8005cd4 <SPDIFRX_CopySamplesToGivenBuffer+0x2cc>)
 8005ca0:	ed92 7a00 	vldr	s14, [r2]
 8005ca4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ca8:	edc3 7a00 	vstr	s15, [r3]
    while (BufferReadPosition >= SPDIFRX_Buffer_NumSamples)
 8005cac:	e741      	b.n	8005b32 <SPDIFRX_CopySamplesToGivenBuffer+0x12a>
 8005cae:	4770      	bx	lr
 8005cb0:	200004b5 	.word	0x200004b5
 8005cb4:	20004988 	.word	0x20004988
 8005cb8:	200018de 	.word	0x200018de
 8005cbc:	200018dd 	.word	0x200018dd
 8005cc0:	200018dc 	.word	0x200018dc
 8005cc4:	200004d0 	.word	0x200004d0
 8005cc8:	20002ce1 	.word	0x20002ce1
 8005ccc:	200004dc 	.word	0x200004dc
 8005cd0:	200018e0 	.word	0x200018e0
 8005cd4:	200004d4 	.word	0x200004d4
 8005cd8:	200004c4 	.word	0x200004c4
 8005cdc:	000f4240 	.word	0x000f4240
 8005ce0:	44200000 	.word	0x44200000
 8005ce4:	200004b0 	.word	0x200004b0
 8005ce8:	2000000c 	.word	0x2000000c

08005cec <MeasureInputSampleRate>:
{
 8005cec:	b538      	push	{r3, r4, r5, lr}
  AudioInput_MeasuredSampleRate_FrameCounter = 0;
 8005cee:	4d0d      	ldr	r5, [pc, #52]	; (8005d24 <MeasureInputSampleRate+0x38>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	602b      	str	r3, [r5, #0]
  uint32_t StartTick = HAL_GetTick();
 8005cf4:	f7fa fcbc 	bl	8000670 <HAL_GetTick>
 8005cf8:	4604      	mov	r4, r0
  HAL_Delay(50);
 8005cfa:	2032      	movs	r0, #50	; 0x32
 8005cfc:	f7fa fcbe 	bl	800067c <HAL_Delay>
  uint32_t EndTick = HAL_GetTick();
 8005d00:	f7fa fcb6 	bl	8000670 <HAL_GetTick>
  return 1000.0f * AudioInput_MeasuredSampleRate_FrameCounter / (EndTick - StartTick);
 8005d04:	ed95 0a00 	vldr	s0, [r5]
 8005d08:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005d0c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8005d28 <MeasureInputSampleRate+0x3c>
 8005d10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d14:	1b00      	subs	r0, r0, r4
 8005d16:	ee07 0a90 	vmov	s15, r0
 8005d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8005d1e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	200004ac 	.word	0x200004ac
 8005d28:	447a0000 	.word	0x447a0000
 8005d2c:	00000000 	.word	0x00000000

08005d30 <IsSampleRateInRange>:
  return fabs((SampleRateInQuestion / ReferenceSampleRate) - 1.0f) <= (InputSampleFrequencyCaptureHalfRangePPM / 1E6);
 8005d30:	ee80 7a20 	vdiv.f32	s14, s0, s1
 8005d34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005d38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d3c:	eeb0 7ac7 	vabs.f32	s14, s14
 8005d40:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8005d44:	ed9f 6b04 	vldr	d6, [pc, #16]	; 8005d58 <IsSampleRateInRange+0x28>
 8005d48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8005d50:	bf94      	ite	ls
 8005d52:	2001      	movls	r0, #1
 8005d54:	2000      	movhi	r0, #0
 8005d56:	4770      	bx	lr
 8005d58:	d2f1a9fc 	.word	0xd2f1a9fc
 8005d5c:	3f50624d 	.word	0x3f50624d

08005d60 <ClearBuffer>:

void ClearBuffer()
{
 8005d60:	b082      	sub	sp, #8
  AudioSample24_t ZeroSample={0,0};
 8005d62:	2200      	movs	r2, #0
 8005d64:	9200      	str	r2, [sp, #0]
 8005d66:	9201      	str	r2, [sp, #4]
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 8005d68:	e008      	b.n	8005d7c <ClearBuffer+0x1c>
    SPDIFRX_IncomingSamples[SampleIndex] = ZeroSample;
 8005d6a:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <ClearBuffer+0x28>)
 8005d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d70:	a902      	add	r1, sp, #8
 8005d72:	e911 0003 	ldmdb	r1, {r0, r1}
 8005d76:	e883 0003 	stmia.w	r3, {r0, r1}
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 8005d7a:	3201      	adds	r2, #1
 8005d7c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8005d80:	d3f3      	bcc.n	8005d6a <ClearBuffer+0xa>
}
 8005d82:	b002      	add	sp, #8
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	200004dc 	.word	0x200004dc

08005d8c <SPDIFRX_SelectInput>:

void SPDIFRX_SelectInput(uint32_t Value)
{
 8005d8c:	b508      	push	{r3, lr}
  uint32_t InputSelection = 0;

  switch(Value)
 8005d8e:	2803      	cmp	r0, #3
 8005d90:	d809      	bhi.n	8005da6 <SPDIFRX_SelectInput+0x1a>
 8005d92:	e8df f000 	tbb	[pc, r0]
 8005d96:	0c0e      	.short	0x0c0e
 8005d98:	0502      	.short	0x0502
  {
    case 0: InputSelection = SPDIFRX_INPUT_IN0; break;
    case 1: InputSelection = SPDIFRX_INPUT_IN1; break;
    case 2: InputSelection = SPDIFRX_INPUT_IN2; break;
 8005d9a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005d9e:	e008      	b.n	8005db2 <SPDIFRX_SelectInput+0x26>
    case 3: InputSelection = SPDIFRX_INPUT_IN3; break;
 8005da0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8005da4:	e005      	b.n	8005db2 <SPDIFRX_SelectInput+0x26>

    default: Error_Handler();
 8005da6:	f001 f84d 	bl	8006e44 <Error_Handler>
  uint32_t InputSelection = 0;
 8005daa:	2000      	movs	r0, #0
 8005dac:	e001      	b.n	8005db2 <SPDIFRX_SelectInput+0x26>
    case 1: InputSelection = SPDIFRX_INPUT_IN1; break;
 8005dae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  }

  hspdif.Instance->CR = (hspdif.Instance->CR & ~SPDIFRX_INPUT_IN3) | InputSelection;
 8005db2:	4b04      	ldr	r3, [pc, #16]	; (8005dc4 <SPDIFRX_SelectInput+0x38>)
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	6813      	ldr	r3, [r2, #0]
 8005db8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005dbc:	4318      	orrs	r0, r3
 8005dbe:	6010      	str	r0, [r2, #0]
}
 8005dc0:	bd08      	pop	{r3, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20004988 	.word	0x20004988

08005dc8 <SPDIFRX_Stop>:

  return 1;
}

void SPDIFRX_Stop()
{
 8005dc8:	b510      	push	{r4, lr}
  Started = 0;
 8005dca:	2000      	movs	r0, #0
 8005dcc:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <SPDIFRX_Stop+0x38>)
 8005dce:	7018      	strb	r0, [r3, #0]

  DisableInterruptHandler = 1;
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <SPDIFRX_Stop+0x3c>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	701a      	strb	r2, [r3, #0]
  SPDIFRX_Locked_Callback(0);
 8005dd6:	f000 fb8d 	bl	80064f4 <SPDIFRX_Locked_Callback>
  SPDIFRX_ClearOutputBuffer();
 8005dda:	f000 fc51 	bl	8006680 <SPDIFRX_ClearOutputBuffer>
  __HAL_SPDIFRX_IDLE(&hspdif);
 8005dde:	4c0a      	ldr	r4, [pc, #40]	; (8005e08 <SPDIFRX_Stop+0x40>)
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	6813      	ldr	r3, [r2, #0]
 8005de4:	f023 0303 	bic.w	r3, r3, #3
 8005de8:	6013      	str	r3, [r2, #0]
  ClearBuffer();
 8005dea:	f7ff ffb9 	bl	8005d60 <ClearBuffer>

  // SPDIFRX_MuteOutput_Callback(1); !!!Clashes with call from interrupt handler:

  // Reset SPDIFRX.
  EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort();
 8005dee:	f7fd fae7 	bl	80033c0 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort>
  EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR();
 8005df2:	f7fd fae6 	bl	80033c2 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR>
  HAL_SPDIFRX_DMAStop(&hspdif);
 8005df6:	4620      	mov	r0, r4
 8005df8:	f7fd fae4 	bl	80033c4 <HAL_SPDIFRX_DMAStop>
}
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	bf00      	nop
 8005e00:	20002ce0 	.word	0x20002ce0
 8005e04:	200004b5 	.word	0x200004b5
 8005e08:	20004988 	.word	0x20004988

08005e0c <SPDIFRX_Start>:
{
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	ed2d 8b02 	vpush	{d8}
 8005e12:	4604      	mov	r4, r0
 8005e14:	460d      	mov	r5, r1
 8005e16:	4616      	mov	r6, r2
  EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE();
 8005e18:	f7fd f9eb 	bl	80031f2 <EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE>
  SPDIFRX_Stop(); // Get the receiver into a known state e.g. after a failed (timed out) start because there was no input.
 8005e1c:	f7ff ffd4 	bl	8005dc8 <SPDIFRX_Stop>
  InitializeResamplingVariables();
 8005e20:	f7ff fd0a 	bl	8005838 <InitializeResamplingVariables>
  if (hspdif.State != HAL_SPDIFRX_STATE_READY)
 8005e24:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <SPDIFRX_Start+0x108>)
 8005e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d14c      	bne.n	8005eca <SPDIFRX_Start+0xbe>
  HAL_TIM_RegisterCallback(&htim11, HAL_TIM_IC_CAPTURE_CB_ID, &CaptureCallback);
 8005e30:	4f39      	ldr	r7, [pc, #228]	; (8005f18 <SPDIFRX_Start+0x10c>)
 8005e32:	4a3a      	ldr	r2, [pc, #232]	; (8005f1c <SPDIFRX_Start+0x110>)
 8005e34:	2112      	movs	r1, #18
 8005e36:	4638      	mov	r0, r7
 8005e38:	f7fe fa4d 	bl	80042d6 <HAL_TIM_RegisterCallback>
  if (HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1))
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4638      	mov	r0, r7
 8005e40:	f7fe fd1e 	bl	8004880 <HAL_TIM_IC_Start_IT>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d14b      	bne.n	8005ee0 <SPDIFRX_Start+0xd4>
  SPDIFRX_SelectInput(InputChannel);
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f7ff ff9f 	bl	8005d8c <SPDIFRX_SelectInput>
  SPDIFRX_ErrorCallbackCalled = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	4a33      	ldr	r2, [pc, #204]	; (8005f20 <SPDIFRX_Start+0x114>)
 8005e52:	7013      	strb	r3, [r2, #0]
  DisableInterruptHandler = 1;
 8005e54:	4a33      	ldr	r2, [pc, #204]	; (8005f24 <SPDIFRX_Start+0x118>)
 8005e56:	2101      	movs	r1, #1
 8005e58:	7011      	strb	r1, [r2, #0]
  ReceiveErrorOccurred = 0;
 8005e5a:	4a33      	ldr	r2, [pc, #204]	; (8005f28 <SPDIFRX_Start+0x11c>)
 8005e5c:	7013      	strb	r3, [r2, #0]
  HALResult = HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, (uint32_t *)SPDIFRX_IncomingSamples, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples);
 8005e5e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8005e62:	4932      	ldr	r1, [pc, #200]	; (8005f2c <SPDIFRX_Start+0x120>)
 8005e64:	482b      	ldr	r0, [pc, #172]	; (8005f14 <SPDIFRX_Start+0x108>)
 8005e66:	f7fd f9fd 	bl	8003264 <HAL_SPDIFRX_ReceiveDataFlow_DMA>
  if (HALResult == HAL_TIMEOUT)
 8005e6a:	2803      	cmp	r0, #3
 8005e6c:	d04d      	beq.n	8005f0a <SPDIFRX_Start+0xfe>
  HAL_Delay(50); // Wait for receiver to settle.
 8005e6e:	2032      	movs	r0, #50	; 0x32
 8005e70:	f7fa fc04 	bl	800067c <HAL_Delay>
  AudioInput_MeasuredSampleRate =  MeasureInputSampleRate();
 8005e74:	f7ff ff3a 	bl	8005cec <MeasureInputSampleRate>
 8005e78:	eeb0 8a40 	vmov.f32	s16, s0
 8005e7c:	4b2c      	ldr	r3, [pc, #176]	; (8005f30 <SPDIFRX_Start+0x124>)
 8005e7e:	ed83 0a00 	vstr	s0, [r3]
  if (IsSampleRateInRange(AudioInput_MeasuredSampleRate, SAI_AUDIO_FREQUENCY_44K))
 8005e82:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8005f34 <SPDIFRX_Start+0x128>
 8005e86:	f7ff ff53 	bl	8005d30 <IsSampleRateInRange>
 8005e8a:	b360      	cbz	r0, 8005ee6 <SPDIFRX_Start+0xda>
    InputSampleRate = SAI_AUDIO_FREQUENCY_44K;
 8005e8c:	4b2a      	ldr	r3, [pc, #168]	; (8005f38 <SPDIFRX_Start+0x12c>)
 8005e8e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005e92:	601a      	str	r2, [r3, #0]
  if (ForceOutputSampleRate)
 8005e94:	2d00      	cmp	r5, #0
 8005e96:	d033      	beq.n	8005f00 <SPDIFRX_Start+0xf4>
    OutputSampleRate = ForcedOutputSampleRate;
 8005e98:	4b28      	ldr	r3, [pc, #160]	; (8005f3c <SPDIFRX_Start+0x130>)
 8005e9a:	601e      	str	r6, [r3, #0]
  SPDIFRX_SetOutputSampleRate_Callback(OutputSampleRate);
 8005e9c:	4b27      	ldr	r3, [pc, #156]	; (8005f3c <SPDIFRX_Start+0x130>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	f000 fc96 	bl	80067d0 <SPDIFRX_SetOutputSampleRate_Callback>
  SPDIFRX_Stop(); // Get the receiver into a known state e.g. after a failed (timed out) start because there was no input.
 8005ea4:	f7ff ff90 	bl	8005dc8 <SPDIFRX_Stop>
  HALResult = HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, (uint32_t *)SPDIFRX_IncomingSamples, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples);
 8005ea8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8005eac:	491f      	ldr	r1, [pc, #124]	; (8005f2c <SPDIFRX_Start+0x120>)
 8005eae:	4819      	ldr	r0, [pc, #100]	; (8005f14 <SPDIFRX_Start+0x108>)
 8005eb0:	f7fd f9d8 	bl	8003264 <HAL_SPDIFRX_ReceiveDataFlow_DMA>
  if (HALResult == HAL_TIMEOUT)
 8005eb4:	2803      	cmp	r0, #3
 8005eb6:	d02a      	beq.n	8005f0e <SPDIFRX_Start+0x102>
  DisableInterruptHandler = 0;
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <SPDIFRX_Start+0x118>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
  Started = 1;
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	4b1f      	ldr	r3, [pc, #124]	; (8005f40 <SPDIFRX_Start+0x134>)
 8005ec2:	7018      	strb	r0, [r3, #0]
}
 8005ec4:	ecbd 8b02 	vpop	{d8}
 8005ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_DMA_Abort(hspdif.hdmaDrRx); // *** JSB Cube bug fix!!! ***
 8005eca:	4f12      	ldr	r7, [pc, #72]	; (8005f14 <SPDIFRX_Start+0x108>)
 8005ecc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005ece:	f7fa fd71 	bl	80009b4 <HAL_DMA_Abort>
    HAL_DMA_Abort(hspdif.hdmaCsRx); // *** JSB Cube bug fix!!! ***
 8005ed2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005ed4:	f7fa fd6e 	bl	80009b4 <HAL_DMA_Abort>
    HAL_SPDIFRX_DMAStop(&hspdif);
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f7fd fa73 	bl	80033c4 <HAL_SPDIFRX_DMAStop>
 8005ede:	e7a7      	b.n	8005e30 <SPDIFRX_Start+0x24>
    Error_Handler();
 8005ee0:	f000 ffb0 	bl	8006e44 <Error_Handler>
 8005ee4:	e7b0      	b.n	8005e48 <SPDIFRX_Start+0x3c>
  else if (IsSampleRateInRange(AudioInput_MeasuredSampleRate, SAI_AUDIO_FREQUENCY_48K))
 8005ee6:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005f44 <SPDIFRX_Start+0x138>
 8005eea:	eeb0 0a48 	vmov.f32	s0, s16
 8005eee:	f7ff ff1f 	bl	8005d30 <IsSampleRateInRange>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d0e6      	beq.n	8005ec4 <SPDIFRX_Start+0xb8>
    InputSampleRate = SAI_AUDIO_FREQUENCY_48K;
 8005ef6:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <SPDIFRX_Start+0x12c>)
 8005ef8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e7c9      	b.n	8005e94 <SPDIFRX_Start+0x88>
    OutputSampleRate = InputSampleRate;
 8005f00:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <SPDIFRX_Start+0x12c>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <SPDIFRX_Start+0x130>)
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	e7c8      	b.n	8005e9c <SPDIFRX_Start+0x90>
    return 0;
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e7da      	b.n	8005ec4 <SPDIFRX_Start+0xb8>
    return 0;
 8005f0e:	2000      	movs	r0, #0
 8005f10:	e7d8      	b.n	8005ec4 <SPDIFRX_Start+0xb8>
 8005f12:	bf00      	nop
 8005f14:	20004988 	.word	0x20004988
 8005f18:	20004cd0 	.word	0x20004cd0
 8005f1c:	08005829 	.word	0x08005829
 8005f20:	200004d8 	.word	0x200004d8
 8005f24:	200004b5 	.word	0x200004b5
 8005f28:	200004d0 	.word	0x200004d0
 8005f2c:	200004dc 	.word	0x200004dc
 8005f30:	200004a8 	.word	0x200004a8
 8005f34:	472c4400 	.word	0x472c4400
 8005f38:	200004b8 	.word	0x200004b8
 8005f3c:	200004c8 	.word	0x200004c8
 8005f40:	20002ce0 	.word	0x20002ce0
 8005f44:	473b8000 	.word	0x473b8000

08005f48 <SPDIFRX_HasReceiveErrorOccurred>:

uint8_t SPDIFRX_HasReceiveErrorOccurred()
{
  return ReceiveErrorOccurred;
}
 8005f48:	4b01      	ldr	r3, [pc, #4]	; (8005f50 <SPDIFRX_HasReceiveErrorOccurred+0x8>)
 8005f4a:	7818      	ldrb	r0, [r3, #0]
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	200004d0 	.word	0x200004d0

08005f54 <SPDIFRX_IsReceiving>:

uint8_t SPDIFRX_IsReceiving()
{
  return DisableInterruptHandler ? 0 : 1;
 8005f54:	4b02      	ldr	r3, [pc, #8]	; (8005f60 <SPDIFRX_IsReceiving+0xc>)
 8005f56:	7818      	ldrb	r0, [r3, #0]
}
 8005f58:	fab0 f080 	clz	r0, r0
 8005f5c:	0940      	lsrs	r0, r0, #5
 8005f5e:	4770      	bx	lr
 8005f60:	200004b5 	.word	0x200004b5

08005f64 <GetBest>:

static int16_t GetBest(int16_t A, int16_t B, int16_t C)
// From Adafruit Arduino library.
// JSB: I think it returns the average of the two closest values.
// JSB: I renamed the identifiers.
{
 8005f64:	b510      	push	{r4, lr}
  int16_t DeltaAB, DeltaCA, DeltaBC;
  int16_t Result = 0;

  if (A > B)
 8005f66:	4288      	cmp	r0, r1
 8005f68:	dd16      	ble.n	8005f98 <GetBest+0x34>
    DeltaAB = A - B;
 8005f6a:	1a43      	subs	r3, r0, r1
 8005f6c:	b21b      	sxth	r3, r3
  else
    DeltaAB = B - A;

  if (A > C)
 8005f6e:	4290      	cmp	r0, r2
 8005f70:	dd15      	ble.n	8005f9e <GetBest+0x3a>
    DeltaCA = A - C;
 8005f72:	eba0 0c02 	sub.w	ip, r0, r2
 8005f76:	fa0f fc8c 	sxth.w	ip, ip
  else
    DeltaCA = C - A;

  if (C > B)
 8005f7a:	4291      	cmp	r1, r2
 8005f7c:	da14      	bge.n	8005fa8 <GetBest+0x44>
    DeltaBC = C - B;
 8005f7e:	eba2 0e01 	sub.w	lr, r2, r1
 8005f82:	fa0f fe8e 	sxth.w	lr, lr
  else
    DeltaBC = B - C;

  if ((DeltaAB <= DeltaCA) && (DeltaAB <= DeltaBC))
 8005f86:	4664      	mov	r4, ip
 8005f88:	45f4      	cmp	ip, lr
 8005f8a:	bfa8      	it	ge
 8005f8c:	4674      	movge	r4, lr
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	dc0f      	bgt.n	8005fb2 <GetBest+0x4e>
    Result = (A + B) >> 1;
 8005f92:	4401      	add	r1, r0
 8005f94:	1048      	asrs	r0, r1, #1
    Result = (A + C) >> 1;
  else
    Result = (B + C) >> 1;

  return Result;
}
 8005f96:	bd10      	pop	{r4, pc}
    DeltaAB = B - A;
 8005f98:	1a0b      	subs	r3, r1, r0
 8005f9a:	b21b      	sxth	r3, r3
 8005f9c:	e7e7      	b.n	8005f6e <GetBest+0xa>
    DeltaCA = C - A;
 8005f9e:	eba2 0c00 	sub.w	ip, r2, r0
 8005fa2:	fa0f fc8c 	sxth.w	ip, ip
 8005fa6:	e7e8      	b.n	8005f7a <GetBest+0x16>
    DeltaBC = B - C;
 8005fa8:	eba1 0e02 	sub.w	lr, r1, r2
 8005fac:	fa0f fe8e 	sxth.w	lr, lr
 8005fb0:	e7e9      	b.n	8005f86 <GetBest+0x22>
  else if ((DeltaCA <= DeltaAB) && (DeltaCA <= DeltaBC))
 8005fb2:	4573      	cmp	r3, lr
 8005fb4:	bfa8      	it	ge
 8005fb6:	4673      	movge	r3, lr
 8005fb8:	459c      	cmp	ip, r3
 8005fba:	dc02      	bgt.n	8005fc2 <GetBest+0x5e>
    Result = (A + C) >> 1;
 8005fbc:	4410      	add	r0, r2
 8005fbe:	1040      	asrs	r0, r0, #1
 8005fc0:	e7e9      	b.n	8005f96 <GetBest+0x32>
    Result = (B + C) >> 1;
 8005fc2:	4411      	add	r1, r2
 8005fc4:	1048      	asrs	r0, r1, #1
 8005fc6:	e7e6      	b.n	8005f96 <GetBest+0x32>

08005fc8 <XPT2046_Initialize>:
  phspi = i_phspi;
 8005fc8:	4b01      	ldr	r3, [pc, #4]	; (8005fd0 <XPT2046_Initialize+0x8>)
 8005fca:	6018      	str	r0, [r3, #0]
}
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20002ce4 	.word	0x20002ce4

08005fd4 <XPT2046_Sample>:

uint8_t XPT2046_Sample(int16_t *pRawX, int16_t *pRawY, int16_t *pRawZ)
// Returns 1 if touched.
// The origin is bottom left (XL, YD). This is the natural origin of the XPT2046.
// None of the touch screens I've encountered so far are correctly wired. Use compiler defines to reverse the coordinates as required.
{
 8005fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fd8:	b08d      	sub	sp, #52	; 0x34
 8005fda:	4680      	mov	r8, r0
 8005fdc:	460f      	mov	r7, r1
 8005fde:	4691      	mov	r9, r2
  int16_t x, y, z;

  *pRawX = 0;
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	8002      	strh	r2, [r0, #0]
  *pRawY = 0;
 8005fe4:	800a      	strh	r2, [r1, #0]
  *pRawZ = 0;
 8005fe6:	f8a9 2000 	strh.w	r2, [r9]

  uint8_t RxData[19];
  int16_t X_Positions[3];
  int16_t Y_Positions[3];

  XPT2046_CSX_Low();
 8005fea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fee:	4844      	ldr	r0, [pc, #272]	; (8006100 <XPT2046_Sample+0x12c>)
 8005ff0:	f7fa ff23 	bl	8000e3a <HAL_GPIO_WritePin>
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &SampleCommand, (uint8_t*) &RxData, 19, 100) != HAL_OK)
 8005ff4:	2364      	movs	r3, #100	; 0x64
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	2313      	movs	r3, #19
 8005ffa:	aa07      	add	r2, sp, #28
 8005ffc:	4941      	ldr	r1, [pc, #260]	; (8006104 <XPT2046_Sample+0x130>)
 8005ffe:	4842      	ldr	r0, [pc, #264]	; (8006108 <XPT2046_Sample+0x134>)
 8006000:	6800      	ldr	r0, [r0, #0]
 8006002:	f7fd fcf5 	bl	80039f0 <HAL_SPI_TransmitReceive>
 8006006:	2800      	cmp	r0, #0
 8006008:	d175      	bne.n	80060f6 <XPT2046_Sample+0x122>
    Error_Handler();
  XPT2046_CSX_High();
 800600a:	2201      	movs	r2, #1
 800600c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006010:	483b      	ldr	r0, [pc, #236]	; (8006100 <XPT2046_Sample+0x12c>)
 8006012:	f7fa ff12 	bl	8000e3a <HAL_GPIO_WritePin>
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8006016:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800601a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800601e:	08db      	lsrs	r3, r3, #3
 8006020:	ea43 1342 	orr.w	r3, r3, r2, lsl #5

  int16_t z1 = GetUnsigned12bitValue(&RxData[1]);
 8006024:	f3c3 030b 	ubfx	r3, r3, #0, #12
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8006028:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800602c:	f89d c020 	ldrb.w	ip, [sp, #32]
 8006030:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8006034:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
 8006038:	f3cc 0c0b 	ubfx	ip, ip, #0, #12
 800603c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8006040:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8006044:	08c0      	lsrs	r0, r0, #3
 8006046:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
  int16_t z2 = GetUnsigned12bitValue(&RxData[3]);

  // Result from dummy measurement ignored.

  X_Positions[0] = GetUnsigned12bitValue(&RxData[7]);
 800604a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800604e:	f8ad 0014 	strh.w	r0, [sp, #20]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8006052:	f89d 5027 	ldrb.w	r5, [sp, #39]	; 0x27
 8006056:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 800605a:	08c9      	lsrs	r1, r1, #3
 800605c:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  X_Positions[1] = GetUnsigned12bitValue(&RxData[11]);
 8006060:	f3c1 010b 	ubfx	r1, r1, #0, #12
 8006064:	f8ad 1016 	strh.w	r1, [sp, #22]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8006068:	f89d 402b 	ldrb.w	r4, [sp, #43]	; 0x2b
 800606c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8006070:	08d2      	lsrs	r2, r2, #3
 8006072:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
  X_Positions[2] = GetUnsigned12bitValue(&RxData[15]);
 8006076:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800607a:	f8ad 2018 	strh.w	r2, [sp, #24]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 800607e:	f89d 6026 	ldrb.w	r6, [sp, #38]	; 0x26
 8006082:	08ec      	lsrs	r4, r5, #3
 8006084:	ea44 1446 	orr.w	r4, r4, r6, lsl #5

  Y_Positions[0] = GetUnsigned12bitValue(&RxData[10]);
 8006088:	f3c4 040b 	ubfx	r4, r4, #0, #12
 800608c:	f8ad 400c 	strh.w	r4, [sp, #12]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 8006090:	f89d 6029 	ldrb.w	r6, [sp, #41]	; 0x29
 8006094:	f89d 502a 	ldrb.w	r5, [sp, #42]	; 0x2a
 8006098:	08ed      	lsrs	r5, r5, #3
 800609a:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
  Y_Positions[1] = GetUnsigned12bitValue(&RxData[13]);
 800609e:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80060a2:	f8ad 500e 	strh.w	r5, [sp, #14]
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 80060a6:	f89d e02d 	ldrb.w	lr, [sp, #45]	; 0x2d
 80060aa:	f89d 602e 	ldrb.w	r6, [sp, #46]	; 0x2e
 80060ae:	08f6      	lsrs	r6, r6, #3
 80060b0:	ea46 164e 	orr.w	r6, r6, lr, lsl #5
  Y_Positions[2] = GetUnsigned12bitValue(&RxData[17]);
 80060b4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80060b8:	f8ad 6010 	strh.w	r6, [sp, #16]

  // Neutralize occasional z1 = 4095 values (which are possibly due to comms errors, as x and y values of 4095 often appear with the z value of 4095).
  if (z1 >= 2048)
 80060bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c0:	db00      	blt.n	80060c4 <XPT2046_Sample+0xf0>
    z1 = 0;
 80060c2:	2300      	movs	r3, #0

  z = 4095 + z1 - z2;
 80060c4:	eba3 030c 	sub.w	r3, r3, ip
 80060c8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80060cc:	b21b      	sxth	r3, r3

  if (z < ZThreshold)
 80060ce:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80060d2:	db13      	blt.n	80060fc <XPT2046_Sample+0x128>
    return 0;

  *pRawZ = z;
 80060d4:	f8a9 3000 	strh.w	r3, [r9]

  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 80060d8:	f7ff ff44 	bl	8005f64 <GetBest>
 80060dc:	4681      	mov	r9, r0
  y = GetBest(Y_Positions[0], Y_Positions[1], Y_Positions[2]);
 80060de:	4632      	mov	r2, r6
 80060e0:	4629      	mov	r1, r5
 80060e2:	4620      	mov	r0, r4
 80060e4:	f7ff ff3e 	bl	8005f64 <GetBest>

#if XPT2046_Swap_YD_and_YU
  y = 4095 - y;
#endif

  *pRawX = x;
 80060e8:	f8a8 9000 	strh.w	r9, [r8]
  *pRawY = y;
 80060ec:	8038      	strh	r0, [r7, #0]

  return 1;
 80060ee:	2001      	movs	r0, #1
}
 80060f0:	b00d      	add	sp, #52	; 0x34
 80060f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 80060f6:	f000 fea5 	bl	8006e44 <Error_Handler>
 80060fa:	e786      	b.n	800600a <XPT2046_Sample+0x36>
    return 0;
 80060fc:	2000      	movs	r0, #0
 80060fe:	e7f7      	b.n	80060f0 <XPT2046_Sample+0x11c>
 8006100:	40020400 	.word	0x40020400
 8006104:	0800b2a4 	.word	0x0800b2a4
 8006108:	20002ce4 	.word	0x20002ce4

0800610c <XPT2046_ConvertRawToScreen>:

void XPT2046_ConvertRawToScreen(int16_t RawX, int16_t RawY, int16_t *pX, int16_t *pY)
// Assumes portrait mode.
// The origin of the result is top-left.
{
 800610c:	b410      	push	{r4}
  float K;

  K = ((float)(RawX - XPT2046_RawX_Min) / (float)(XPT2046_RawX_Max - XPT2046_RawX_Min));
 800610e:	4c1a      	ldr	r4, [pc, #104]	; (8006178 <XPT2046_ConvertRawToScreen+0x6c>)
 8006110:	6824      	ldr	r4, [r4, #0]
 8006112:	1b00      	subs	r0, r0, r4
 8006114:	ee07 0a90 	vmov	s15, r0
 8006118:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800611c:	4817      	ldr	r0, [pc, #92]	; (800617c <XPT2046_ConvertRawToScreen+0x70>)
 800611e:	6800      	ldr	r0, [r0, #0]
 8006120:	1b00      	subs	r0, r0, r4
 8006122:	ee07 0a90 	vmov	s15, r0
 8006126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800612a:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pX = K * XPT2046_Width;
 800612e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006180 <XPT2046_ConvertRawToScreen+0x74>
 8006132:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800613a:	ee17 0a90 	vmov	r0, s15
 800613e:	8010      	strh	r0, [r2, #0]

  K = ((float)(RawY - XPT2046_RawY_Min) / (float)(XPT2046_RawY_Max - XPT2046_RawY_Min));
 8006140:	4a10      	ldr	r2, [pc, #64]	; (8006184 <XPT2046_ConvertRawToScreen+0x78>)
 8006142:	6810      	ldr	r0, [r2, #0]
 8006144:	1a09      	subs	r1, r1, r0
 8006146:	ee07 1a90 	vmov	s15, r1
 800614a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800614e:	4a0e      	ldr	r2, [pc, #56]	; (8006188 <XPT2046_ConvertRawToScreen+0x7c>)
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	1a12      	subs	r2, r2, r0
 8006154:	ee07 2a90 	vmov	s15, r2
 8006158:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800615c:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pY = K * XPT2046_Height;
 8006160:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800618c <XPT2046_ConvertRawToScreen+0x80>
 8006164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800616c:	ee17 2a90 	vmov	r2, s15
 8006170:	801a      	strh	r2, [r3, #0]
}
 8006172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	20000014 	.word	0x20000014
 800617c:	20000010 	.word	0x20000010
 8006180:	43700000 	.word	0x43700000
 8006184:	2000001c 	.word	0x2000001c
 8006188:	20000018 	.word	0x20000018
 800618c:	43a00000 	.word	0x43a00000

08006190 <HandleHALResult>:

///////////////////////////////////////////////////////////////////////////////

void HandleHALResult(HAL_StatusTypeDef Value, char *pText)
{
  if (Value != HAL_OK)
 8006190:	b900      	cbnz	r0, 8006194 <HandleHALResult+0x4>
 8006192:	4770      	bx	lr
{
 8006194:	b508      	push	{r3, lr}
  {
//    LCD_UsrLog("HAL error: %s\n", pText);
//    Error_Handler();
    HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); // !!!
 8006196:	2102      	movs	r1, #2
 8006198:	4801      	ldr	r0, [pc, #4]	; (80061a0 <HandleHALResult+0x10>)
 800619a:	f7fa fe54 	bl	8000e46 <HAL_GPIO_TogglePin>
  }
}
 800619e:	bd08      	pop	{r3, pc}
 80061a0:	40020000 	.word	0x40020000

080061a4 <ToggleLED>:
      break;
  }
}

void ToggleLED(LED_t LED)
{
 80061a4:	b508      	push	{r3, lr}
  switch(LED)
 80061a6:	2802      	cmp	r0, #2
 80061a8:	d00b      	beq.n	80061c2 <ToggleLED+0x1e>
 80061aa:	2803      	cmp	r0, #3
 80061ac:	d00e      	beq.n	80061cc <ToggleLED+0x28>
 80061ae:	2801      	cmp	r0, #1
 80061b0:	d002      	beq.n	80061b8 <ToggleLED+0x14>
      break;
    case LED_Blue:
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
      break;
    default:
      Error_Handler();
 80061b2:	f000 fe47 	bl	8006e44 <Error_Handler>
      break;
  }
}
 80061b6:	e003      	b.n	80061c0 <ToggleLED+0x1c>
      HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 80061b8:	2102      	movs	r1, #2
 80061ba:	4807      	ldr	r0, [pc, #28]	; (80061d8 <ToggleLED+0x34>)
 80061bc:	f7fa fe43 	bl	8000e46 <HAL_GPIO_TogglePin>
}
 80061c0:	bd08      	pop	{r3, pc}
      HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 80061c2:	2104      	movs	r1, #4
 80061c4:	4804      	ldr	r0, [pc, #16]	; (80061d8 <ToggleLED+0x34>)
 80061c6:	f7fa fe3e 	bl	8000e46 <HAL_GPIO_TogglePin>
      break;
 80061ca:	e7f9      	b.n	80061c0 <ToggleLED+0x1c>
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 80061cc:	2108      	movs	r1, #8
 80061ce:	4802      	ldr	r0, [pc, #8]	; (80061d8 <ToggleLED+0x34>)
 80061d0:	f7fa fe39 	bl	8000e46 <HAL_GPIO_TogglePin>
      break;
 80061d4:	e7f4      	b.n	80061c0 <ToggleLED+0x1c>
 80061d6:	bf00      	nop
 80061d8:	40020000 	.word	0x40020000

080061dc <IsUserButtonPressed>:

///////////////////////////////////////////////////////////////////////////////
// User button:

uint8_t IsUserButtonPressed()
{
 80061dc:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(NUserButton_GPIO_Port, NUserButton_Pin);
 80061de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061e2:	4803      	ldr	r0, [pc, #12]	; (80061f0 <IsUserButtonPressed+0x14>)
 80061e4:	f7fa fe22 	bl	8000e2c <HAL_GPIO_ReadPin>
}
 80061e8:	fab0 f080 	clz	r0, r0
 80061ec:	0940      	lsrs	r0, r0, #5
 80061ee:	bd08      	pop	{r3, pc}
 80061f0:	40020800 	.word	0x40020800

080061f4 <DAC_Mute>:
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
  DAC_Mute(1);
}

void DAC_Mute(uint8_t Value)
{
 80061f4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, Value ? 0 : 1);
 80061f6:	fab0 f280 	clz	r2, r0
 80061fa:	0952      	lsrs	r2, r2, #5
 80061fc:	2140      	movs	r1, #64	; 0x40
 80061fe:	4802      	ldr	r0, [pc, #8]	; (8006208 <DAC_Mute+0x14>)
 8006200:	f7fa fe1b 	bl	8000e3a <HAL_GPIO_WritePin>
}
 8006204:	bd08      	pop	{r3, pc}
 8006206:	bf00      	nop
 8006208:	40020c00 	.word	0x40020c00

0800620c <DAC_Initialize>:
{
 800620c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, 0); // Latency.
 800620e:	4c07      	ldr	r4, [pc, #28]	; (800622c <DAC_Initialize+0x20>)
 8006210:	2200      	movs	r2, #0
 8006212:	2110      	movs	r1, #16
 8006214:	4620      	mov	r0, r4
 8006216:	f7fa fe10 	bl	8000e3a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
 800621a:	2200      	movs	r2, #0
 800621c:	2120      	movs	r1, #32
 800621e:	4620      	mov	r0, r4
 8006220:	f7fa fe0b 	bl	8000e3a <HAL_GPIO_WritePin>
  DAC_Mute(1);
 8006224:	2001      	movs	r0, #1
 8006226:	f7ff ffe5 	bl	80061f4 <DAC_Mute>
}
 800622a:	bd10      	pop	{r4, pc}
 800622c:	40020c00 	.word	0x40020c00

08006230 <PA_RegisterWrite8>:
// PA (TAS5719):

#define PA_I2C_Address 0x2A

void PA_RegisterWrite8(uint8_t Index, uint8_t Value)
{
 8006230:	b500      	push	{lr}
 8006232:	b087      	sub	sp, #28
 8006234:	4602      	mov	r2, r0
 8006236:	f88d 1017 	strb.w	r1, [sp, #23]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 800623a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800623e:	9302      	str	r3, [sp, #8]
 8006240:	2301      	movs	r3, #1
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	f10d 0117 	add.w	r1, sp, #23
 8006248:	9100      	str	r1, [sp, #0]
 800624a:	2154      	movs	r1, #84	; 0x54
 800624c:	4804      	ldr	r0, [pc, #16]	; (8006260 <PA_RegisterWrite8+0x30>)
 800624e:	f7fb f81b 	bl	8001288 <HAL_I2C_Mem_Write>
 8006252:	4904      	ldr	r1, [pc, #16]	; (8006264 <PA_RegisterWrite8+0x34>)
 8006254:	f7ff ff9c 	bl	8006190 <HandleHALResult>
}
 8006258:	b007      	add	sp, #28
 800625a:	f85d fb04 	ldr.w	pc, [sp], #4
 800625e:	bf00      	nop
 8006260:	200046b0 	.word	0x200046b0
 8006264:	0800b2b8 	.word	0x0800b2b8

08006268 <PA_RegisterRead8>:

uint8_t PA_RegisterRead8(uint8_t Index)
{
 8006268:	b500      	push	{lr}
 800626a:	b087      	sub	sp, #28
 800626c:	4602      	mov	r2, r0
  uint8_t Result;

  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, Index, 1, &Result, 1, 1000), "HAL_I2C_Mem_Read");
 800626e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006272:	9302      	str	r3, [sp, #8]
 8006274:	2301      	movs	r3, #1
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	f10d 0117 	add.w	r1, sp, #23
 800627c:	9100      	str	r1, [sp, #0]
 800627e:	2154      	movs	r1, #84	; 0x54
 8006280:	4805      	ldr	r0, [pc, #20]	; (8006298 <PA_RegisterRead8+0x30>)
 8006282:	f7fb f8d7 	bl	8001434 <HAL_I2C_Mem_Read>
 8006286:	4905      	ldr	r1, [pc, #20]	; (800629c <PA_RegisterRead8+0x34>)
 8006288:	f7ff ff82 	bl	8006190 <HandleHALResult>

  return Result;
}
 800628c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8006290:	b007      	add	sp, #28
 8006292:	f85d fb04 	ldr.w	pc, [sp], #4
 8006296:	bf00      	nop
 8006298:	200046b0 	.word	0x200046b0
 800629c:	0800b2cc 	.word	0x0800b2cc

080062a0 <PA_RegisterWrite16>:

void PA_RegisterWrite16(uint8_t Index, uint16_t Value)
{
 80062a0:	b500      	push	{lr}
 80062a2:	b087      	sub	sp, #28
 80062a4:	4602      	mov	r2, r0
  uint8_t Data[2];

  Data[0] = (uint8_t)(Value >> 8);
 80062a6:	0a0b      	lsrs	r3, r1, #8
 80062a8:	f88d 3014 	strb.w	r3, [sp, #20]
  Data[1] = (uint8_t)(Value);
 80062ac:	f88d 1015 	strb.w	r1, [sp, #21]

  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 2, 1000), "HAL_I2C_Mem_Write");
 80062b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062b4:	9302      	str	r3, [sp, #8]
 80062b6:	2302      	movs	r3, #2
 80062b8:	9301      	str	r3, [sp, #4]
 80062ba:	ab05      	add	r3, sp, #20
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	2301      	movs	r3, #1
 80062c0:	2154      	movs	r1, #84	; 0x54
 80062c2:	4804      	ldr	r0, [pc, #16]	; (80062d4 <PA_RegisterWrite16+0x34>)
 80062c4:	f7fa ffe0 	bl	8001288 <HAL_I2C_Mem_Write>
 80062c8:	4903      	ldr	r1, [pc, #12]	; (80062d8 <PA_RegisterWrite16+0x38>)
 80062ca:	f7ff ff61 	bl	8006190 <HandleHALResult>
}
 80062ce:	b007      	add	sp, #28
 80062d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80062d4:	200046b0 	.word	0x200046b0
 80062d8:	0800b2b8 	.word	0x0800b2b8

080062dc <PA_RegisterWrite32>:

void PA_RegisterWrite32(uint8_t Index, uint32_t Value)
{
 80062dc:	b500      	push	{lr}
 80062de:	b087      	sub	sp, #28
 80062e0:	4602      	mov	r2, r0
  uint8_t Data[4];

  Data[0] = (uint8_t)(Value >> 24);
 80062e2:	0e0b      	lsrs	r3, r1, #24
 80062e4:	f88d 3014 	strb.w	r3, [sp, #20]
  Data[1] = (uint8_t)(Value >> 16);
 80062e8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80062ec:	f88d 3015 	strb.w	r3, [sp, #21]
  Data[2] = (uint8_t)(Value >> 8);
 80062f0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80062f4:	f88d 3016 	strb.w	r3, [sp, #22]
  Data[3] = (uint8_t)(Value);
 80062f8:	f88d 1017 	strb.w	r1, [sp, #23]

  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 80062fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006300:	9302      	str	r3, [sp, #8]
 8006302:	2304      	movs	r3, #4
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	ab05      	add	r3, sp, #20
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	2301      	movs	r3, #1
 800630c:	2154      	movs	r1, #84	; 0x54
 800630e:	4804      	ldr	r0, [pc, #16]	; (8006320 <PA_RegisterWrite32+0x44>)
 8006310:	f7fa ffba 	bl	8001288 <HAL_I2C_Mem_Write>
 8006314:	4903      	ldr	r1, [pc, #12]	; (8006324 <PA_RegisterWrite32+0x48>)
 8006316:	f7ff ff3b 	bl	8006190 <HandleHALResult>
}
 800631a:	b007      	add	sp, #28
 800631c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006320:	200046b0 	.word	0x200046b0
 8006324:	0800b2b8 	.word	0x0800b2b8

08006328 <PA_GetErrorStatus>:

  PA_Mute();
}

uint8_t PA_GetErrorStatus()
{
 8006328:	b508      	push	{r3, lr}
  return PA_RegisterRead8(0x02);
 800632a:	2002      	movs	r0, #2
 800632c:	f7ff ff9c 	bl	8006268 <PA_RegisterRead8>
}
 8006330:	bd08      	pop	{r3, pc}

08006332 <PA_ClearErrorStatus>:

void PA_ClearErrorStatus()
{
 8006332:	b508      	push	{r3, lr}
  PA_RegisterWrite8(0x02, 0x00);
 8006334:	2100      	movs	r1, #0
 8006336:	2002      	movs	r0, #2
 8006338:	f7ff ff7a 	bl	8006230 <PA_RegisterWrite8>
}
 800633c:	bd08      	pop	{r3, pc}
	...

08006340 <PA_SetMasterVolume>:

void PA_SetMasterVolume(float Volume_dB)
{
 8006340:	b508      	push	{r3, lr}
  uint16_t RegisterValue;

  if (Volume_dB > 24)
 8006342:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8006346:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800634a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634e:	dd01      	ble.n	8006354 <PA_SetMasterVolume+0x14>
    Volume_dB = 24;
 8006350:	eeb0 0a67 	vmov.f32	s0, s15
  if (Volume_dB < -103.75)
 8006354:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8006388 <PA_SetMasterVolume+0x48>
 8006358:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006360:	d501      	bpl.n	8006366 <PA_SetMasterVolume+0x26>
    Volume_dB = -103.75;
 8006362:	eeb0 0a67 	vmov.f32	s0, s15

  RegisterValue = 8 * (24 - Volume_dB);
 8006366:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 800636a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800636e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8006372:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006376:	eefc 7ae7 	vcvt.u32.f32	s15, s15

  PA_RegisterWrite16(0x07, RegisterValue);
 800637a:	ee17 3a90 	vmov	r3, s15
 800637e:	b299      	uxth	r1, r3
 8006380:	2007      	movs	r0, #7
 8006382:	f7ff ff8d 	bl	80062a0 <PA_RegisterWrite16>
}
 8006386:	bd08      	pop	{r3, pc}
 8006388:	c2cf8000 	.word	0xc2cf8000

0800638c <PA_Mute>:

void PA_Mute()
{
 800638c:	b508      	push	{r3, lr}
  PA_RegisterWrite16(0x07, 0x03FF);
 800638e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006392:	2007      	movs	r0, #7
 8006394:	f7ff ff84 	bl	80062a0 <PA_RegisterWrite16>
}
 8006398:	bd08      	pop	{r3, pc}
	...

0800639c <PA_Initialize>:
{
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4605      	mov	r5, r0
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 0);
 80063a0:	4c1d      	ldr	r4, [pc, #116]	; (8006418 <PA_Initialize+0x7c>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	2101      	movs	r1, #1
 80063a6:	4620      	mov	r0, r4
 80063a8:	f7fa fd47 	bl	8000e3a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 0);
 80063ac:	2200      	movs	r2, #0
 80063ae:	2102      	movs	r1, #2
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7fa fd42 	bl	8000e3a <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80063b6:	2001      	movs	r0, #1
 80063b8:	f7fa f960 	bl	800067c <HAL_Delay>
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 1);
 80063bc:	2201      	movs	r2, #1
 80063be:	4611      	mov	r1, r2
 80063c0:	4620      	mov	r0, r4
 80063c2:	f7fa fd3a 	bl	8000e3a <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80063c6:	2001      	movs	r0, #1
 80063c8:	f7fa f958 	bl	800067c <HAL_Delay>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 1);
 80063cc:	2201      	movs	r2, #1
 80063ce:	2102      	movs	r1, #2
 80063d0:	4620      	mov	r0, r4
 80063d2:	f7fa fd32 	bl	8000e3a <HAL_GPIO_WritePin>
  HAL_Delay(10); // ???
 80063d6:	200a      	movs	r0, #10
 80063d8:	f7fa f950 	bl	800067c <HAL_Delay>
  PA_RegisterWrite32(0x4F, 0x00000007);
 80063dc:	2107      	movs	r1, #7
 80063de:	204f      	movs	r0, #79	; 0x4f
 80063e0:	f7ff ff7c 	bl	80062dc <PA_RegisterWrite32>
  PA_RegisterWrite8(0x1B, 0x00);
 80063e4:	2100      	movs	r1, #0
 80063e6:	201b      	movs	r0, #27
 80063e8:	f7ff ff22 	bl	8006230 <PA_RegisterWrite8>
  PA_RegisterWrite8(0x00, 0x6C);
 80063ec:	216c      	movs	r1, #108	; 0x6c
 80063ee:	2000      	movs	r0, #0
 80063f0:	f7ff ff1e 	bl	8006230 <PA_RegisterWrite8>
  if (HeadphoneMode)
 80063f4:	b155      	cbz	r5, 800640c <PA_Initialize+0x70>
    PA_RegisterWrite8(0x05, 0x01); // !!! Is this necessary?
 80063f6:	2101      	movs	r1, #1
 80063f8:	2005      	movs	r0, #5
 80063fa:	f7ff ff19 	bl	8006230 <PA_RegisterWrite8>
    PA_RegisterWrite8(0x05, 0x13); // 0x13 or 0x1B. But 0x1B gives background noise and distortion.
 80063fe:	2113      	movs	r1, #19
 8006400:	2005      	movs	r0, #5
 8006402:	f7ff ff15 	bl	8006230 <PA_RegisterWrite8>
  PA_Mute();
 8006406:	f7ff ffc1 	bl	800638c <PA_Mute>
}
 800640a:	bd38      	pop	{r3, r4, r5, pc}
    PA_RegisterWrite8(0x05, 0x00);
 800640c:	2100      	movs	r1, #0
 800640e:	2005      	movs	r0, #5
 8006410:	f7ff ff0e 	bl	8006230 <PA_RegisterWrite8>
 8006414:	e7f7      	b.n	8006406 <PA_Initialize+0x6a>
 8006416:	bf00      	nop
 8006418:	40020c00 	.word	0x40020c00

0800641c <ESP32_A_Enable>:

///////////////////////////////////////////////////////////////////////////////
// ESP32s:

void ESP32_A_Enable(uint8_t Value)
{
 800641c:	b508      	push	{r3, lr}
 800641e:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(ESP32_A_EN_GPIO_Port, ESP32_A_EN_Pin, Value);
 8006420:	2102      	movs	r1, #2
 8006422:	4802      	ldr	r0, [pc, #8]	; (800642c <ESP32_A_Enable+0x10>)
 8006424:	f7fa fd09 	bl	8000e3a <HAL_GPIO_WritePin>
}
 8006428:	bd08      	pop	{r3, pc}
 800642a:	bf00      	nop
 800642c:	40021000 	.word	0x40021000

08006430 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006430:	b500      	push	{lr}
 8006432:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006434:	4b2e      	ldr	r3, [pc, #184]	; (80064f0 <MX_DMA_Init+0xc0>)
 8006436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006438:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
 800643e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006440:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006444:	9200      	str	r2, [sp, #0]
 8006446:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800644e:	631a      	str	r2, [r3, #48]	; 0x30
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800645a:	2200      	movs	r2, #0
 800645c:	4611      	mov	r1, r2
 800645e:	200b      	movs	r0, #11
 8006460:	f7fa f932 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006464:	200b      	movs	r0, #11
 8006466:	f7fa f965 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800646a:	2200      	movs	r2, #0
 800646c:	4611      	mov	r1, r2
 800646e:	200c      	movs	r0, #12
 8006470:	f7fa f92a 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006474:	200c      	movs	r0, #12
 8006476:	f7fa f95d 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800647a:	2200      	movs	r2, #0
 800647c:	4611      	mov	r1, r2
 800647e:	2010      	movs	r0, #16
 8006480:	f7fa f922 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006484:	2010      	movs	r0, #16
 8006486:	f7fa f955 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800648a:	2200      	movs	r2, #0
 800648c:	4611      	mov	r1, r2
 800648e:	2011      	movs	r0, #17
 8006490:	f7fa f91a 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8006494:	2011      	movs	r0, #17
 8006496:	f7fa f94d 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800649a:	2200      	movs	r2, #0
 800649c:	4611      	mov	r1, r2
 800649e:	202f      	movs	r0, #47	; 0x2f
 80064a0:	f7fa f912 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80064a4:	202f      	movs	r0, #47	; 0x2f
 80064a6:	f7fa f945 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80064aa:	2200      	movs	r2, #0
 80064ac:	4611      	mov	r1, r2
 80064ae:	2039      	movs	r0, #57	; 0x39
 80064b0:	f7fa f90a 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80064b4:	2039      	movs	r0, #57	; 0x39
 80064b6:	f7fa f93d 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80064ba:	2200      	movs	r2, #0
 80064bc:	4611      	mov	r1, r2
 80064be:	203a      	movs	r0, #58	; 0x3a
 80064c0:	f7fa f902 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80064c4:	203a      	movs	r0, #58	; 0x3a
 80064c6:	f7fa f935 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80064ca:	2200      	movs	r2, #0
 80064cc:	4611      	mov	r1, r2
 80064ce:	203b      	movs	r0, #59	; 0x3b
 80064d0:	f7fa f8fa 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80064d4:	203b      	movs	r0, #59	; 0x3b
 80064d6:	f7fa f92d 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80064da:	2200      	movs	r2, #0
 80064dc:	4611      	mov	r1, r2
 80064de:	2045      	movs	r0, #69	; 0x45
 80064e0:	f7fa f8f2 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80064e4:	2045      	movs	r0, #69	; 0x45
 80064e6:	f7fa f925 	bl	8000734 <HAL_NVIC_EnableIRQ>

}
 80064ea:	b003      	add	sp, #12
 80064ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80064f0:	40023800 	.word	0x40023800

080064f4 <SPDIFRX_Locked_Callback>:

///////////////////////////////////////////////////////////////////////////////
// Overrides:

void SPDIFRX_Locked_Callback(uint8_t Value)
{
 80064f4:	b508      	push	{r3, lr}
 80064f6:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, Value);
 80064f8:	2104      	movs	r1, #4
 80064fa:	4802      	ldr	r0, [pc, #8]	; (8006504 <SPDIFRX_Locked_Callback+0x10>)
 80064fc:	f7fa fc9d 	bl	8000e3a <HAL_GPIO_WritePin>
}
 8006500:	bd08      	pop	{r3, pc}
 8006502:	bf00      	nop
 8006504:	40020000 	.word	0x40020000

08006508 <ESP32_SendCommmandToBeBluetoothSource>:
  uint16_t NumBitsPerSampleChannel;
  uint32_t NumSamplesPerBlock;
} ESP32Command_BeBluetoothSource_t;

void ESP32_SendCommmandToBeBluetoothSource()
{
 8006508:	b510      	push	{r4, lr}
 800650a:	b088      	sub	sp, #32
  ESP32Command_BeBluetoothSource_t Command;

  StringToGUID("{6B44D75A-86B2-4A89-8E04-D1ABCF16E78F}", &Command.Format); // ESP32_BeBluetoothSource_CommandFormat0
 800650c:	a901      	add	r1, sp, #4
 800650e:	4811      	ldr	r0, [pc, #68]	; (8006554 <ESP32_SendCommmandToBeBluetoothSource+0x4c>)
 8006510:	f7fe fba4 	bl	8004c5c <StringToGUID>
  Command.SampleRate = DACSampleRate;
 8006514:	4b10      	ldr	r3, [pc, #64]	; (8006558 <ESP32_SendCommmandToBeBluetoothSource+0x50>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	9305      	str	r3, [sp, #20]
  Command.NumChannels = 2;
 800651a:	2302      	movs	r3, #2
 800651c:	f8ad 3018 	strh.w	r3, [sp, #24]
  Command.NumBitsPerSampleChannel = 16;
 8006520:	2310      	movs	r3, #16
 8006522:	f8ad 301a 	strh.w	r3, [sp, #26]
  Command.NumSamplesPerBlock = ESP_Samples_NumSamples;
 8006526:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800652a:	9307      	str	r3, [sp, #28]

  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 0);
 800652c:	4c0b      	ldr	r4, [pc, #44]	; (800655c <ESP32_SendCommmandToBeBluetoothSource+0x54>)
 800652e:	2200      	movs	r2, #0
 8006530:	2104      	movs	r1, #4
 8006532:	4620      	mov	r0, r4
 8006534:	f7fa fc81 	bl	8000e3a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&Command, sizeof(Command), HAL_MAX_DELAY);
 8006538:	f04f 33ff 	mov.w	r3, #4294967295
 800653c:	221c      	movs	r2, #28
 800653e:	a901      	add	r1, sp, #4
 8006540:	4807      	ldr	r0, [pc, #28]	; (8006560 <ESP32_SendCommmandToBeBluetoothSource+0x58>)
 8006542:	f7fd f95a 	bl	80037fa <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
 8006546:	2201      	movs	r2, #1
 8006548:	2104      	movs	r1, #4
 800654a:	4620      	mov	r0, r4
 800654c:	f7fa fc75 	bl	8000e3a <HAL_GPIO_WritePin>
}
 8006550:	b008      	add	sp, #32
 8006552:	bd10      	pop	{r4, pc}
 8006554:	0800b2e0 	.word	0x0800b2e0
 8006558:	200040e8 	.word	0x200040e8
 800655c:	40021000 	.word	0x40021000
 8006560:	20004b5c 	.word	0x20004b5c

08006564 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006564:	b508      	push	{r3, lr}
  if (hspi == &hspi3)
 8006566:	4b05      	ldr	r3, [pc, #20]	; (800657c <HAL_SPI_TxCpltCallback+0x18>)
 8006568:	4283      	cmp	r3, r0
 800656a:	d000      	beq.n	800656e <HAL_SPI_TxCpltCallback+0xa>
  {
    HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
  }
}
 800656c:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 1);
 800656e:	2201      	movs	r2, #1
 8006570:	2104      	movs	r1, #4
 8006572:	4803      	ldr	r0, [pc, #12]	; (8006580 <HAL_SPI_TxCpltCallback+0x1c>)
 8006574:	f7fa fc61 	bl	8000e3a <HAL_GPIO_WritePin>
}
 8006578:	e7f8      	b.n	800656c <HAL_SPI_TxCpltCallback+0x8>
 800657a:	bf00      	nop
 800657c:	20004b5c 	.word	0x20004b5c
 8006580:	40021000 	.word	0x40021000

08006584 <ESP32_SendSamplesFromAudioOutputBufferToESP32>:

void ESP32_SendSamplesFromAudioOutputBufferToESP32(uint8_t SecondHalf)
{
 8006584:	b510      	push	{r4, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	4604      	mov	r4, r0
  int32_t AudioOutputBufferStartIndex, SampleIndex;
  AudioSample16_t ESPSample;
  AudioSample24_t AudioOutputBufferSample;
  GUID_t Format;

  StringToGUID("{4839C500-E431-42D3-9508-83009C1E31D4}", &Format); // ESP32_BeBluetoothSource_DataFormat0
 800658a:	a901      	add	r1, sp, #4
 800658c:	481c      	ldr	r0, [pc, #112]	; (8006600 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x7c>)
 800658e:	f7fe fb65 	bl	8004c5c <StringToGUID>

  if (SecondHalf)
 8006592:	b11c      	cbz	r4, 800659c <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x18>
    AudioOutputBufferStartIndex = SPDIFRX_Buffer_NumSamples / 2;
 8006594:	f44f 7ea0 	mov.w	lr, #320	; 0x140
  else
    AudioOutputBufferStartIndex = 0;

  for (SampleIndex = 0; SampleIndex < ESP_Samples_NumSamples; ++SampleIndex)
 8006598:	2300      	movs	r3, #0
 800659a:	e018      	b.n	80065ce <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x4a>
    AudioOutputBufferStartIndex = 0;
 800659c:	f04f 0e00 	mov.w	lr, #0
 80065a0:	e7fa      	b.n	8006598 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x14>
  {
    AudioOutputBufferSample = AudioOutputBuffer[AudioOutputBufferStartIndex + SampleIndex];
 80065a2:	eb0e 0103 	add.w	r1, lr, r3
 80065a6:	f10d 0c14 	add.w	ip, sp, #20
 80065aa:	4a16      	ldr	r2, [pc, #88]	; (8006604 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x80>)
 80065ac:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80065b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065b4:	e88c 0003 	stmia.w	ip, {r0, r1}

    ESPSample.Left = AudioOutputBufferSample.Left >> 8;
 80065b8:	1202      	asrs	r2, r0, #8
 80065ba:	f8ad 201c 	strh.w	r2, [sp, #28]
    ESPSample.Right = AudioOutputBufferSample.Right >> 8;
 80065be:	120a      	asrs	r2, r1, #8
 80065c0:	f8ad 201e 	strh.w	r2, [sp, #30]

    ESP_Samples[SampleIndex] = ESPSample;
 80065c4:	4a10      	ldr	r2, [pc, #64]	; (8006608 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x84>)
 80065c6:	9907      	ldr	r1, [sp, #28]
 80065c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (SampleIndex = 0; SampleIndex < ESP_Samples_NumSamples; ++SampleIndex)
 80065cc:	3301      	adds	r3, #1
 80065ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80065d2:	dbe6      	blt.n	80065a2 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x1e>
  }

  HAL_GPIO_WritePin(ESP32_A_NSS_GPIO_Port, ESP32_A_NSS_Pin, 0);
 80065d4:	2200      	movs	r2, #0
 80065d6:	2104      	movs	r1, #4
 80065d8:	480c      	ldr	r0, [pc, #48]	; (800660c <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x88>)
 80065da:	f7fa fc2e 	bl	8000e3a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, (uint8_t *)&Format, sizeof(Format), HAL_MAX_DELAY);
 80065de:	4c0c      	ldr	r4, [pc, #48]	; (8006610 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x8c>)
 80065e0:	f04f 33ff 	mov.w	r3, #4294967295
 80065e4:	2210      	movs	r2, #16
 80065e6:	a901      	add	r1, sp, #4
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7fd f906 	bl	80037fa <HAL_SPI_Transmit>
  HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *)ESP_Samples, 4 * ESP_Samples_NumSamples); // One DMA item is 8 bits.
 80065ee:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80065f2:	4905      	ldr	r1, [pc, #20]	; (8006608 <ESP32_SendSamplesFromAudioOutputBufferToESP32+0x84>)
 80065f4:	4620      	mov	r0, r4
 80065f6:	f7fd fb67 	bl	8003cc8 <HAL_SPI_Transmit_DMA>
}
 80065fa:	b008      	add	sp, #32
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	bf00      	nop
 8006600:	0800b308 	.word	0x0800b308
 8006604:	20002ce8 	.word	0x20002ce8
 8006608:	200040ec 	.word	0x200040ec
 800660c:	40021000 	.word	0x40021000
 8006610:	20004b5c 	.word	0x20004b5c

08006614 <HAL_SAI_TxHalfCpltCallback>:

///////////////////////////////////////////////////////////////////////////////

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006614:	b508      	push	{r3, lr}
  // Get samples to first half of buffer:
  SPDIFRX_CopySamplesToGivenBuffer(AudioOutputBuffer, 0);
 8006616:	2100      	movs	r1, #0
 8006618:	4805      	ldr	r0, [pc, #20]	; (8006630 <HAL_SAI_TxHalfCpltCallback+0x1c>)
 800661a:	f7ff f9f5 	bl	8005a08 <SPDIFRX_CopySamplesToGivenBuffer>

  // Send first half of buffer to ESP32:
  if (SPDIFRX_IsReceiving()) // Disable during sample rate measurement as otherwise the measurement result is too small e.g. 43kHz instead of 44.1kHz.
 800661e:	f7ff fc99 	bl	8005f54 <SPDIFRX_IsReceiving>
 8006622:	b900      	cbnz	r0, 8006626 <HAL_SAI_TxHalfCpltCallback+0x12>
    ESP32_SendSamplesFromAudioOutputBufferToESP32(0);
}
 8006624:	bd08      	pop	{r3, pc}
    ESP32_SendSamplesFromAudioOutputBufferToESP32(0);
 8006626:	2000      	movs	r0, #0
 8006628:	f7ff ffac 	bl	8006584 <ESP32_SendSamplesFromAudioOutputBufferToESP32>
}
 800662c:	e7fa      	b.n	8006624 <HAL_SAI_TxHalfCpltCallback+0x10>
 800662e:	bf00      	nop
 8006630:	20002ce8 	.word	0x20002ce8

08006634 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006634:	b508      	push	{r3, lr}
  // Get samples to second half of buffer:
  SPDIFRX_CopySamplesToGivenBuffer(AudioOutputBuffer, 1);
 8006636:	2101      	movs	r1, #1
 8006638:	4805      	ldr	r0, [pc, #20]	; (8006650 <HAL_SAI_TxCpltCallback+0x1c>)
 800663a:	f7ff f9e5 	bl	8005a08 <SPDIFRX_CopySamplesToGivenBuffer>

  // Send first half of buffer to ESP32:
  if (SPDIFRX_IsReceiving()) // Disable during sample rate measurement as otherwise the measurement result is too small e.g. 43kHz instead of 44.1kHz.
 800663e:	f7ff fc89 	bl	8005f54 <SPDIFRX_IsReceiving>
 8006642:	b900      	cbnz	r0, 8006646 <HAL_SAI_TxCpltCallback+0x12>
    ESP32_SendSamplesFromAudioOutputBufferToESP32(1);
}
 8006644:	bd08      	pop	{r3, pc}
    ESP32_SendSamplesFromAudioOutputBufferToESP32(1);
 8006646:	2001      	movs	r0, #1
 8006648:	f7ff ff9c 	bl	8006584 <ESP32_SendSamplesFromAudioOutputBufferToESP32>
}
 800664c:	e7fa      	b.n	8006644 <HAL_SAI_TxCpltCallback+0x10>
 800664e:	bf00      	nop
 8006650:	20002ce8 	.word	0x20002ce8

08006654 <ClearOutputBuffer>:

///////////////////////////////////////////////////////////////////////////////

void ClearOutputBuffer()
{
 8006654:	b082      	sub	sp, #8
  AudioSample24_t ZeroSample={0,0};
 8006656:	2200      	movs	r2, #0
 8006658:	9200      	str	r2, [sp, #0]
 800665a:	9201      	str	r2, [sp, #4]
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 800665c:	e008      	b.n	8006670 <ClearOutputBuffer+0x1c>
    AudioOutputBuffer[SampleIndex] = ZeroSample;
 800665e:	4b07      	ldr	r3, [pc, #28]	; (800667c <ClearOutputBuffer+0x28>)
 8006660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006664:	a902      	add	r1, sp, #8
 8006666:	e911 0003 	ldmdb	r1, {r0, r1}
 800666a:	e883 0003 	stmia.w	r3, {r0, r1}
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 800666e:	3201      	adds	r2, #1
 8006670:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8006674:	d3f3      	bcc.n	800665e <ClearOutputBuffer+0xa>
}
 8006676:	b002      	add	sp, #8
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20002ce8 	.word	0x20002ce8

08006680 <SPDIFRX_ClearOutputBuffer>:
{
 8006680:	b508      	push	{r3, lr}
  ClearOutputBuffer();
 8006682:	f7ff ffe7 	bl	8006654 <ClearOutputBuffer>
}
 8006686:	bd08      	pop	{r3, pc}

08006688 <Mute>:

void Mute(uint8_t Value)
{
 8006688:	b510      	push	{r4, lr}
 800668a:	4604      	mov	r4, r0
  DAC_Mute(Value);
 800668c:	f7ff fdb2 	bl	80061f4 <DAC_Mute>

  if (Value)
 8006690:	b114      	cbz	r4, 8006698 <Mute+0x10>
    PA_Mute();
 8006692:	f7ff fe7b 	bl	800638c <PA_Mute>
  else
    PA_SetMasterVolume(PA_MasterVolume_dB);
}
 8006696:	bd10      	pop	{r4, pc}
    PA_SetMasterVolume(PA_MasterVolume_dB);
 8006698:	4b02      	ldr	r3, [pc, #8]	; (80066a4 <Mute+0x1c>)
 800669a:	ed93 0a00 	vldr	s0, [r3]
 800669e:	f7ff fe4f 	bl	8006340 <PA_SetMasterVolume>
}
 80066a2:	e7f8      	b.n	8006696 <Mute+0xe>
 80066a4:	200045ec 	.word	0x200045ec

080066a8 <SPDIFRX_MuteOutput_Callback>:
{
 80066a8:	b508      	push	{r3, lr}
  Mute(Value);
 80066aa:	f7ff ffed 	bl	8006688 <Mute>
}
 80066ae:	bd08      	pop	{r3, pc}

080066b0 <SetDACSampleRate_44100>:

void SetDACSampleRate_44100()
{
  if (DACSampleRate == SAI_AUDIO_FREQUENCY_44K)
 80066b0:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <SetDACSampleRate_44100+0x78>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	f64a 4344 	movw	r3, #44100	; 0xac44
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d034      	beq.n	8006726 <SetDACSampleRate_44100+0x76>
{
 80066bc:	b510      	push	{r4, lr}
 80066be:	b0a4      	sub	sp, #144	; 0x90
    return;

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInitStruct);
 80066c0:	4668      	mov	r0, sp
 80066c2:	f7fc f8d3 	bl	800286c <HAL_RCCEx_GetPeriphCLKConfig>

  PeriphClkInitStruct.PLLI2S.PLLI2SN = 429;
 80066c6:	f240 13ad 	movw	r3, #429	; 0x1ad
 80066ca:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV4;
 80066cc:	2301      	movs	r3, #1
 80066ce:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80066d0:	2302      	movs	r3, #2
 80066d2:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 19;
 80066d4:	2313      	movs	r3, #19
 80066d6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066d8:	4668      	mov	r0, sp
 80066da:	f7fb fdc5 	bl	8002268 <HAL_RCCEx_PeriphCLKConfig>
 80066de:	b9f8      	cbnz	r0, 8006720 <SetDACSampleRate_44100+0x70>
    Error_Handler();

  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 80066e0:	4c12      	ldr	r4, [pc, #72]	; (800672c <SetDACSampleRate_44100+0x7c>)
 80066e2:	f64a 4344 	movw	r3, #44100	; 0xac44
 80066e6:	61e3      	str	r3, [r4, #28]
  DACSampleRate = 44100;
 80066e8:	4a0f      	ldr	r2, [pc, #60]	; (8006728 <SetDACSampleRate_44100+0x78>)
 80066ea:	6013      	str	r3, [r2, #0]

  HandleHALResult(HAL_SAI_DMAStop(&hsai_BlockA2), "HAL_SAI_DMAStop");
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7fc fc84 	bl	8002ffa <HAL_SAI_DMAStop>
 80066f2:	490f      	ldr	r1, [pc, #60]	; (8006730 <SetDACSampleRate_44100+0x80>)
 80066f4:	f7ff fd4c 	bl	8006190 <HandleHALResult>
  HandleHALResult(HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2), "HAL_SAI_InitProtocol");
 80066f8:	2302      	movs	r3, #2
 80066fa:	461a      	mov	r2, r3
 80066fc:	2100      	movs	r1, #0
 80066fe:	4620      	mov	r0, r4
 8006700:	f7fc fc66 	bl	8002fd0 <HAL_SAI_InitProtocol>
 8006704:	490b      	ldr	r1, [pc, #44]	; (8006734 <SetDACSampleRate_44100+0x84>)
 8006706:	f7ff fd43 	bl	8006190 <HandleHALResult>
  HandleHALResult(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)AudioOutputBuffer, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples), "HAL_SAI_Transmit_DMA");
 800670a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800670e:	490a      	ldr	r1, [pc, #40]	; (8006738 <SetDACSampleRate_44100+0x88>)
 8006710:	4620      	mov	r0, r4
 8006712:	f7fc fcc7 	bl	80030a4 <HAL_SAI_Transmit_DMA>
 8006716:	4909      	ldr	r1, [pc, #36]	; (800673c <SetDACSampleRate_44100+0x8c>)
 8006718:	f7ff fd3a 	bl	8006190 <HandleHALResult>
}
 800671c:	b024      	add	sp, #144	; 0x90
 800671e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006720:	f000 fb90 	bl	8006e44 <Error_Handler>
 8006724:	e7dc      	b.n	80066e0 <SetDACSampleRate_44100+0x30>
 8006726:	4770      	bx	lr
 8006728:	200040e8 	.word	0x200040e8
 800672c:	200047c0 	.word	0x200047c0
 8006730:	0800b330 	.word	0x0800b330
 8006734:	0800b340 	.word	0x0800b340
 8006738:	20002ce8 	.word	0x20002ce8
 800673c:	0800b358 	.word	0x0800b358

08006740 <SetDACSampleRate_48000>:

void SetDACSampleRate_48000()
{
  if (DACSampleRate == SAI_AUDIO_FREQUENCY_48K)
 8006740:	4b1d      	ldr	r3, [pc, #116]	; (80067b8 <SetDACSampleRate_48000+0x78>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006748:	429a      	cmp	r2, r3
 800674a:	d033      	beq.n	80067b4 <SetDACSampleRate_48000+0x74>
{
 800674c:	b510      	push	{r4, lr}
 800674e:	b0a4      	sub	sp, #144	; 0x90
    return;

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInitStruct);
 8006750:	4668      	mov	r0, sp
 8006752:	f7fc f88b 	bl	800286c <HAL_RCCEx_GetPeriphCLKConfig>

  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8006756:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800675a:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV4;
 800675c:	2301      	movs	r3, #1
 800675e:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 14;
 8006760:	220e      	movs	r2, #14
 8006762:	9203      	str	r2, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8006764:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006766:	4668      	mov	r0, sp
 8006768:	f7fb fd7e 	bl	8002268 <HAL_RCCEx_PeriphCLKConfig>
 800676c:	b9f8      	cbnz	r0, 80067ae <SetDACSampleRate_48000+0x6e>
    Error_Handler();

  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800676e:	4c13      	ldr	r4, [pc, #76]	; (80067bc <SetDACSampleRate_48000+0x7c>)
 8006770:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006774:	61e3      	str	r3, [r4, #28]
  DACSampleRate = SAI_AUDIO_FREQUENCY_48K;
 8006776:	4a10      	ldr	r2, [pc, #64]	; (80067b8 <SetDACSampleRate_48000+0x78>)
 8006778:	6013      	str	r3, [r2, #0]

  HandleHALResult(HAL_SAI_DMAStop(&hsai_BlockA2), "HAL_SAI_DMAStop");
 800677a:	4620      	mov	r0, r4
 800677c:	f7fc fc3d 	bl	8002ffa <HAL_SAI_DMAStop>
 8006780:	490f      	ldr	r1, [pc, #60]	; (80067c0 <SetDACSampleRate_48000+0x80>)
 8006782:	f7ff fd05 	bl	8006190 <HandleHALResult>
  HandleHALResult(HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2), "HAL_SAI_InitProtocol");
 8006786:	2302      	movs	r3, #2
 8006788:	461a      	mov	r2, r3
 800678a:	2100      	movs	r1, #0
 800678c:	4620      	mov	r0, r4
 800678e:	f7fc fc1f 	bl	8002fd0 <HAL_SAI_InitProtocol>
 8006792:	490c      	ldr	r1, [pc, #48]	; (80067c4 <SetDACSampleRate_48000+0x84>)
 8006794:	f7ff fcfc 	bl	8006190 <HandleHALResult>
  HandleHALResult(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)AudioOutputBuffer, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples), "HAL_SAI_Transmit_DMA");
 8006798:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800679c:	490a      	ldr	r1, [pc, #40]	; (80067c8 <SetDACSampleRate_48000+0x88>)
 800679e:	4620      	mov	r0, r4
 80067a0:	f7fc fc80 	bl	80030a4 <HAL_SAI_Transmit_DMA>
 80067a4:	4909      	ldr	r1, [pc, #36]	; (80067cc <SetDACSampleRate_48000+0x8c>)
 80067a6:	f7ff fcf3 	bl	8006190 <HandleHALResult>
}
 80067aa:	b024      	add	sp, #144	; 0x90
 80067ac:	bd10      	pop	{r4, pc}
    Error_Handler();
 80067ae:	f000 fb49 	bl	8006e44 <Error_Handler>
 80067b2:	e7dc      	b.n	800676e <SetDACSampleRate_48000+0x2e>
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	200040e8 	.word	0x200040e8
 80067bc:	200047c0 	.word	0x200047c0
 80067c0:	0800b330 	.word	0x0800b330
 80067c4:	0800b340 	.word	0x0800b340
 80067c8:	20002ce8 	.word	0x20002ce8
 80067cc:	0800b358 	.word	0x0800b358

080067d0 <SPDIFRX_SetOutputSampleRate_Callback>:
{
 80067d0:	b508      	push	{r3, lr}
  if (Value == 44100)
 80067d2:	f64a 4344 	movw	r3, #44100	; 0xac44
 80067d6:	4298      	cmp	r0, r3
 80067d8:	d007      	beq.n	80067ea <SPDIFRX_SetOutputSampleRate_Callback+0x1a>
  else if (Value == 48000)
 80067da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80067de:	4298      	cmp	r0, r3
 80067e0:	d006      	beq.n	80067f0 <SPDIFRX_SetOutputSampleRate_Callback+0x20>
    DACSampleRate = 0;
 80067e2:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <SPDIFRX_SetOutputSampleRate_Callback+0x28>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
}
 80067e8:	bd08      	pop	{r3, pc}
    SetDACSampleRate_44100();
 80067ea:	f7ff ff61 	bl	80066b0 <SetDACSampleRate_44100>
 80067ee:	e7fb      	b.n	80067e8 <SPDIFRX_SetOutputSampleRate_Callback+0x18>
    SetDACSampleRate_48000();
 80067f0:	f7ff ffa6 	bl	8006740 <SetDACSampleRate_48000>
 80067f4:	e7f8      	b.n	80067e8 <SPDIFRX_SetOutputSampleRate_Callback+0x18>
 80067f6:	bf00      	nop
 80067f8:	200040e8 	.word	0x200040e8

080067fc <Go>:

///////////////////////////////////////////////////////////////////////////////

void Go()
{
 80067fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067fe:	b0a5      	sub	sp, #148	; 0x94
  uint8_t UserButtonPressedAlreadyPressed = 0;
  uint8_t RestartRequired = 0;
  uint8_t NumTransitionErrors, NumSyncErrors, NumFrameErrors;
  char S[128];

  ESP32_A_Enable(1);
 8006800:	2001      	movs	r0, #1
 8006802:	f7ff fe0b 	bl	800641c <ESP32_A_Enable>

  ILI9341_SetFont(&FreeSans12pt7b);
 8006806:	48a2      	ldr	r0, [pc, #648]	; (8006a90 <Go+0x294>)
 8006808:	f7fe fe42 	bl	8005490 <ILI9341_SetFont>
  ILI9341_SetTextColor(ILI9341_COLOR_WHITE);
 800680c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006810:	f7fe ffc0 	bl	8005794 <ILI9341_SetTextColor>
  ILI9341_SetTextBackgroundColor(ILI9341_COLOR_BLACK);
 8006814:	2000      	movs	r0, #0
 8006816:	f7fe ffc5 	bl	80057a4 <ILI9341_SetTextBackgroundColor>
  ILI9341_SetTextDrawMode(tdmAnyCharBar); // Slower but enables flicker free update.
 800681a:	2002      	movs	r0, #2
 800681c:	f7fe ffca 	bl	80057b4 <ILI9341_SetTextDrawMode>
  ILI9341_SetFont(&FreeSans9pt7b);
 8006820:	489c      	ldr	r0, [pc, #624]	; (8006a94 <Go+0x298>)
 8006822:	f7fe fe35 	bl	8005490 <ILI9341_SetFont>

  ILI9341_Clear(0x0000);
 8006826:	2000      	movs	r0, #0
 8006828:	f7fe fe24 	bl	8005474 <ILI9341_Clear>

  DAC_Initialize();
 800682c:	f7ff fcee 	bl	800620c <DAC_Initialize>
  //
  PA_Initialize(0);
 8006830:	2000      	movs	r0, #0
 8006832:	f7ff fdb3 	bl	800639c <PA_Initialize>
  //PA_Initialize(1); // Headphones.

  Y += ILI9341_GetFontYSpacing();
 8006836:	f7fe fe33 	bl	80054a0 <ILI9341_GetFontYSpacing>
  ILI9341_DrawTextAtXY("S/P-DIF=>DAC+PA", 0, Y, tpLeft);
 800683a:	2301      	movs	r3, #1
 800683c:	b282      	uxth	r2, r0
 800683e:	2100      	movs	r1, #0
 8006840:	4895      	ldr	r0, [pc, #596]	; (8006a98 <Go+0x29c>)
 8006842:	f7fe ffbf 	bl	80057c4 <ILI9341_DrawTextAtXY>

  Mute(0);
 8006846:	2000      	movs	r0, #0
 8006848:	f7ff ff1e 	bl	8006688 <Mute>
  uint8_t RestartRequired = 0;
 800684c:	2700      	movs	r7, #0
  uint8_t UserButtonPressedAlreadyPressed = 0;
 800684e:	463e      	mov	r6, r7
  uint8_t SPDIF_InputChannel = 2;
 8006850:	2502      	movs	r5, #2
  uint8_t SPDIFRX_Started = 0;
 8006852:	463c      	mov	r4, r7
 8006854:	e0de      	b.n	8006a14 <Go+0x218>
          case 2: SPDIF_InputChannel = 3; break;
          case 3: SPDIF_InputChannel = 1; break;
          default: break;
        }

        RestartRequired = 1;
 8006856:	462f      	mov	r7, r5
        UserButtonPressedAlreadyPressed = 1;
 8006858:	462e      	mov	r6, r5
          case 1: SPDIF_InputChannel = 2; break;
 800685a:	2502      	movs	r5, #2
 800685c:	e000      	b.n	8006860 <Go+0x64>
      }
    }
    else
      UserButtonPressedAlreadyPressed = 0;
 800685e:	4606      	mov	r6, r0

    if (!SPDIFRX_Started)
 8006860:	2c00      	cmp	r4, #0
 8006862:	f000 80f1 	beq.w	8006a48 <Go+0x24c>
      PA_ClearErrorStatus();
      if (SPDIFRX_Started)
        ESP32_SendCommmandToBeBluetoothSource();
    }

    if (SPDIFRX_Started)
 8006866:	2c00      	cmp	r4, #0
 8006868:	f040 8101 	bne.w	8006a6e <Go+0x272>
        DACSampleRate = 0;
        SPDIFRX_Started = 0;
      }
    }

    if (XPT2046_Sample(&Touch_RawX, &Touch_RawY, &Touch_RawZ))
 800686c:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8006870:	a923      	add	r1, sp, #140	; 0x8c
 8006872:	f10d 008e 	add.w	r0, sp, #142	; 0x8e
 8006876:	f7ff fbad 	bl	8005fd4 <XPT2046_Sample>
 800687a:	b3d0      	cbz	r0, 80068f2 <Go+0xf6>
    {
      XPT2046_ConvertRawToScreen(Touch_RawX, Touch_RawY, &Touch_ScreenX, &Touch_ScreenY);
 800687c:	f10d 0386 	add.w	r3, sp, #134	; 0x86
 8006880:	aa22      	add	r2, sp, #136	; 0x88
 8006882:	f9bd 108c 	ldrsh.w	r1, [sp, #140]	; 0x8c
 8006886:	f9bd 008e 	ldrsh.w	r0, [sp, #142]	; 0x8e
 800688a:	f7ff fc3f 	bl	800610c <XPT2046_ConvertRawToScreen>
      AudioTransferGain = Clamp_float((float)Touch_ScreenY / 320.0f, 0.0f, 1.0f);
 800688e:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800689a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800689e:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8006a9c <Go+0x2a0>
 80068a2:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8006aa0 <Go+0x2a4>
 80068a6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80068aa:	f7fe f979 	bl	8004ba0 <Clamp_float>
 80068ae:	4b7d      	ldr	r3, [pc, #500]	; (8006aa4 <Go+0x2a8>)
 80068b0:	ed83 0a00 	vstr	s0, [r3]
      SPDIFRX_TransferGain = AudioTransferGain;
 80068b4:	4b7c      	ldr	r3, [pc, #496]	; (8006aa8 <Go+0x2ac>)
 80068b6:	ed83 0a00 	vstr	s0, [r3]

      PA_MasterVolume_dB = 20.0f - 80.0f * (1.0f - ((float)Touch_ScreenX / 240.0f));
 80068ba:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068c6:	eddf 6a79 	vldr	s13, [pc, #484]	; 8006aac <Go+0x2b0>
 80068ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80068ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80068d2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80068d6:	eddf 7a76 	vldr	s15, [pc, #472]	; 8006ab0 <Go+0x2b4>
 80068da:	ee20 0a27 	vmul.f32	s0, s0, s15
 80068de:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80068e2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80068e6:	4b73      	ldr	r3, [pc, #460]	; (8006ab4 <Go+0x2b8>)
 80068e8:	ed83 0a00 	vstr	s0, [r3]
      if (SPDIFRX_Started) // Don't override mute. Would be better if PA had a mute function that is independent of the set volume.
 80068ec:	b10c      	cbz	r4, 80068f2 <Go+0xf6>
        PA_SetMasterVolume(PA_MasterVolume_dB);
 80068ee:	f7ff fd27 	bl	8006340 <PA_SetMasterVolume>
    }

    int LineIndex = 3;

    sprintf(S, "SPDIF input channel: %d     ", SPDIF_InputChannel);
 80068f2:	462a      	mov	r2, r5
 80068f4:	4970      	ldr	r1, [pc, #448]	; (8006ab8 <Go+0x2bc>)
 80068f6:	4668      	mov	r0, sp
 80068f8:	f001 fe8a 	bl	8008610 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 80068fc:	f7fe fdd0 	bl	80054a0 <ILI9341_GetFontYSpacing>
 8006900:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006904:	2301      	movs	r3, #1
 8006906:	b282      	uxth	r2, r0
 8006908:	2100      	movs	r1, #0
 800690a:	4668      	mov	r0, sp
 800690c:	f7fe ff5a 	bl	80057c4 <ILI9341_DrawTextAtXY>

    sprintf(S, "Transfer gain: %0.2f     ", AudioTransferGain);
 8006910:	4b64      	ldr	r3, [pc, #400]	; (8006aa4 <Go+0x2a8>)
 8006912:	edd3 7a00 	vldr	s15, [r3]
 8006916:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800691a:	ec53 2b17 	vmov	r2, r3, d7
 800691e:	4967      	ldr	r1, [pc, #412]	; (8006abc <Go+0x2c0>)
 8006920:	4668      	mov	r0, sp
 8006922:	f001 fe75 	bl	8008610 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 8006926:	f7fe fdbb 	bl	80054a0 <ILI9341_GetFontYSpacing>
 800692a:	0082      	lsls	r2, r0, #2
 800692c:	b292      	uxth	r2, r2
 800692e:	2301      	movs	r3, #1
 8006930:	2100      	movs	r1, #0
 8006932:	4668      	mov	r0, sp
 8006934:	f7fe ff46 	bl	80057c4 <ILI9341_DrawTextAtXY>

    sprintf(S, "PA master vol: %0.1f     ", PA_MasterVolume_dB);
 8006938:	4b5e      	ldr	r3, [pc, #376]	; (8006ab4 <Go+0x2b8>)
 800693a:	edd3 7a00 	vldr	s15, [r3]
 800693e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006942:	ec53 2b17 	vmov	r2, r3, d7
 8006946:	495e      	ldr	r1, [pc, #376]	; (8006ac0 <Go+0x2c4>)
 8006948:	4668      	mov	r0, sp
 800694a:	f001 fe61 	bl	8008610 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800694e:	f7fe fda7 	bl	80054a0 <ILI9341_GetFontYSpacing>
 8006952:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006956:	2301      	movs	r3, #1
 8006958:	b282      	uxth	r2, r0
 800695a:	2100      	movs	r1, #0
 800695c:	4668      	mov	r0, sp
 800695e:	f7fe ff31 	bl	80057c4 <ILI9341_DrawTextAtXY>

    PA_ErrorStatus = PA_GetErrorStatus();
 8006962:	f7ff fce1 	bl	8006328 <PA_GetErrorStatus>
 8006966:	4602      	mov	r2, r0
    sprintf(S, "PA error status: %2X", PA_ErrorStatus);
 8006968:	4956      	ldr	r1, [pc, #344]	; (8006ac4 <Go+0x2c8>)
 800696a:	4668      	mov	r0, sp
 800696c:	f001 fe50 	bl	8008610 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 8006970:	f7fe fd96 	bl	80054a0 <ILI9341_GetFontYSpacing>
 8006974:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006978:	0042      	lsls	r2, r0, #1
 800697a:	b292      	uxth	r2, r2
 800697c:	2301      	movs	r3, #1
 800697e:	2100      	movs	r1, #0
 8006980:	4668      	mov	r0, sp
 8006982:	f7fe ff1f 	bl	80057c4 <ILI9341_DrawTextAtXY>

    sprintf(S, "DAC sample rate: %lu          ", DACSampleRate);
 8006986:	4b50      	ldr	r3, [pc, #320]	; (8006ac8 <Go+0x2cc>)
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	4950      	ldr	r1, [pc, #320]	; (8006acc <Go+0x2d0>)
 800698c:	4668      	mov	r0, sp
 800698e:	f001 fe3f 	bl	8008610 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 8006992:	f7fe fd85 	bl	80054a0 <ILI9341_GetFontYSpacing>
 8006996:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800699a:	2301      	movs	r3, #1
 800699c:	b282      	uxth	r2, r0
 800699e:	2100      	movs	r1, #0
 80069a0:	4668      	mov	r0, sp
 80069a2:	f7fe ff0f 	bl	80057c4 <ILI9341_DrawTextAtXY>

    SPDIFRX_GetNumErrors(&NumTransitionErrors, &NumSyncErrors, &NumFrameErrors);
 80069a6:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 80069aa:	a921      	add	r1, sp, #132	; 0x84
 80069ac:	f10d 0085 	add.w	r0, sp, #133	; 0x85
 80069b0:	f7ff f81a 	bl	80059e8 <SPDIFRX_GetNumErrors>

    sprintf(S, "Num transition errors: %d          ", NumTransitionErrors);
 80069b4:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 80069b8:	4945      	ldr	r1, [pc, #276]	; (8006ad0 <Go+0x2d4>)
 80069ba:	4668      	mov	r0, sp
 80069bc:	f001 fe28 	bl	8008610 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 80069c0:	f7fe fd6e 	bl	80054a0 <ILI9341_GetFontYSpacing>
 80069c4:	00c2      	lsls	r2, r0, #3
 80069c6:	b292      	uxth	r2, r2
 80069c8:	2301      	movs	r3, #1
 80069ca:	2100      	movs	r1, #0
 80069cc:	4668      	mov	r0, sp
 80069ce:	f7fe fef9 	bl	80057c4 <ILI9341_DrawTextAtXY>

    sprintf(S, "Num sync errors: %d          ", NumSyncErrors);
 80069d2:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 80069d6:	493f      	ldr	r1, [pc, #252]	; (8006ad4 <Go+0x2d8>)
 80069d8:	4668      	mov	r0, sp
 80069da:	f001 fe19 	bl	8008610 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 80069de:	f7fe fd5f 	bl	80054a0 <ILI9341_GetFontYSpacing>
 80069e2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80069e6:	2301      	movs	r3, #1
 80069e8:	b282      	uxth	r2, r0
 80069ea:	2100      	movs	r1, #0
 80069ec:	4668      	mov	r0, sp
 80069ee:	f7fe fee9 	bl	80057c4 <ILI9341_DrawTextAtXY>

    sprintf(S, "Num frame errors: %d          ", NumFrameErrors);
 80069f2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 80069f6:	4938      	ldr	r1, [pc, #224]	; (8006ad8 <Go+0x2dc>)
 80069f8:	4668      	mov	r0, sp
 80069fa:	f001 fe09 	bl	8008610 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 80069fe:	f7fe fd4f 	bl	80054a0 <ILI9341_GetFontYSpacing>
 8006a02:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8006a06:	0052      	lsls	r2, r2, #1
 8006a08:	b292      	uxth	r2, r2
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4668      	mov	r0, sp
 8006a10:	f7fe fed8 	bl	80057c4 <ILI9341_DrawTextAtXY>
    if (IsUserButtonPressed())
 8006a14:	f7ff fbe2 	bl	80061dc <IsUserButtonPressed>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	f43f af20 	beq.w	800685e <Go+0x62>
      if (!UserButtonPressedAlreadyPressed)
 8006a1e:	2e00      	cmp	r6, #0
 8006a20:	f47f af1e 	bne.w	8006860 <Go+0x64>
        switch(SPDIF_InputChannel)
 8006a24:	2d02      	cmp	r5, #2
 8006a26:	d007      	beq.n	8006a38 <Go+0x23c>
 8006a28:	2d03      	cmp	r5, #3
 8006a2a:	d009      	beq.n	8006a40 <Go+0x244>
 8006a2c:	2d01      	cmp	r5, #1
 8006a2e:	f43f af12 	beq.w	8006856 <Go+0x5a>
 8006a32:	2701      	movs	r7, #1
 8006a34:	463e      	mov	r6, r7
 8006a36:	e713      	b.n	8006860 <Go+0x64>
        RestartRequired = 1;
 8006a38:	2701      	movs	r7, #1
        UserButtonPressedAlreadyPressed = 1;
 8006a3a:	463e      	mov	r6, r7
          case 2: SPDIF_InputChannel = 3; break;
 8006a3c:	2503      	movs	r5, #3
 8006a3e:	e70f      	b.n	8006860 <Go+0x64>
        RestartRequired = 1;
 8006a40:	2701      	movs	r7, #1
        UserButtonPressedAlreadyPressed = 1;
 8006a42:	463e      	mov	r6, r7
          case 3: SPDIF_InputChannel = 1; break;
 8006a44:	463d      	mov	r5, r7
 8006a46:	e70b      	b.n	8006860 <Go+0x64>
      SPDIFRX_Started = SPDIFRX_Start(hsai_BlockA2.Init.AudioFrequency, SPDIF_InputChannel, 0, 0);
 8006a48:	4b24      	ldr	r3, [pc, #144]	; (8006adc <Go+0x2e0>)
 8006a4a:	ed93 0a07 	vldr	s0, [r3, #28]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	4611      	mov	r1, r2
 8006a52:	4628      	mov	r0, r5
 8006a54:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8006a58:	f7ff f9d8 	bl	8005e0c <SPDIFRX_Start>
 8006a5c:	4604      	mov	r4, r0
      PA_ClearErrorStatus();
 8006a5e:	f7ff fc68 	bl	8006332 <PA_ClearErrorStatus>
      if (SPDIFRX_Started)
 8006a62:	2c00      	cmp	r4, #0
 8006a64:	f43f aeff 	beq.w	8006866 <Go+0x6a>
        ESP32_SendCommmandToBeBluetoothSource();
 8006a68:	f7ff fd4e 	bl	8006508 <ESP32_SendCommmandToBeBluetoothSource>
 8006a6c:	e6fb      	b.n	8006866 <Go+0x6a>
      if (IsUserButtonPressed() || SPDIFRX_HasReceiveErrorOccurred() || RestartRequired) // IsUserButtonPressed is temporary: for testing ESP32 SPI slave!!!
 8006a6e:	f7ff fbb5 	bl	80061dc <IsUserButtonPressed>
 8006a72:	b928      	cbnz	r0, 8006a80 <Go+0x284>
 8006a74:	f7ff fa68 	bl	8005f48 <SPDIFRX_HasReceiveErrorOccurred>
 8006a78:	b910      	cbnz	r0, 8006a80 <Go+0x284>
 8006a7a:	2f00      	cmp	r7, #0
 8006a7c:	f43f aef6 	beq.w	800686c <Go+0x70>
        SPDIFRX_Stop();
 8006a80:	f7ff f9a2 	bl	8005dc8 <SPDIFRX_Stop>
        DACSampleRate = 0;
 8006a84:	2400      	movs	r4, #0
 8006a86:	4b10      	ldr	r3, [pc, #64]	; (8006ac8 <Go+0x2cc>)
 8006a88:	601c      	str	r4, [r3, #0]
        RestartRequired = 0;
 8006a8a:	4627      	mov	r7, r4
 8006a8c:	e6ee      	b.n	800686c <Go+0x70>
 8006a8e:	bf00      	nop
 8006a90:	0800b474 	.word	0x0800b474
 8006a94:	0800bf30 	.word	0x0800bf30
 8006a98:	0800b370 	.word	0x0800b370
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	43a00000 	.word	0x43a00000
 8006aa4:	20000020 	.word	0x20000020
 8006aa8:	2000000c 	.word	0x2000000c
 8006aac:	43700000 	.word	0x43700000
 8006ab0:	42a00000 	.word	0x42a00000
 8006ab4:	200045ec 	.word	0x200045ec
 8006ab8:	0800b380 	.word	0x0800b380
 8006abc:	0800b3a0 	.word	0x0800b3a0
 8006ac0:	0800b3bc 	.word	0x0800b3bc
 8006ac4:	0800b3d8 	.word	0x0800b3d8
 8006ac8:	200040e8 	.word	0x200040e8
 8006acc:	0800b3f0 	.word	0x0800b3f0
 8006ad0:	0800b410 	.word	0x0800b410
 8006ad4:	0800b434 	.word	0x0800b434
 8006ad8:	0800b454 	.word	0x0800b454
 8006adc:	200047c0 	.word	0x200047c0

08006ae0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ae6:	2400      	movs	r4, #0
 8006ae8:	9407      	str	r4, [sp, #28]
 8006aea:	9408      	str	r4, [sp, #32]
 8006aec:	9409      	str	r4, [sp, #36]	; 0x24
 8006aee:	940a      	str	r4, [sp, #40]	; 0x28
 8006af0:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006af2:	4b72      	ldr	r3, [pc, #456]	; (8006cbc <MX_GPIO_Init+0x1dc>)
 8006af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006af6:	f042 0210 	orr.w	r2, r2, #16
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30
 8006afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006afe:	f002 0210 	and.w	r2, r2, #16
 8006b02:	9201      	str	r2, [sp, #4]
 8006b04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b08:	f042 0204 	orr.w	r2, r2, #4
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8006b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b10:	f002 0204 	and.w	r2, r2, #4
 8006b14:	9202      	str	r2, [sp, #8]
 8006b16:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8006b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b22:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006b26:	9203      	str	r2, [sp, #12]
 8006b28:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2c:	f042 0201 	orr.w	r2, r2, #1
 8006b30:	631a      	str	r2, [r3, #48]	; 0x30
 8006b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b34:	f002 0201 	and.w	r2, r2, #1
 8006b38:	9204      	str	r2, [sp, #16]
 8006b3a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b3e:	f042 0202 	orr.w	r2, r2, #2
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30
 8006b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b46:	f002 0202 	and.w	r2, r2, #2
 8006b4a:	9205      	str	r2, [sp, #20]
 8006b4c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b50:	f042 0208 	orr.w	r2, r2, #8
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
 8006b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b58:	f003 0308 	and.w	r3, r3, #8
 8006b5c:	9306      	str	r3, [sp, #24]
 8006b5e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 8006b60:	4f57      	ldr	r7, [pc, #348]	; (8006cc0 <MX_GPIO_Init+0x1e0>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	2124      	movs	r1, #36	; 0x24
 8006b66:	4638      	mov	r0, r7
 8006b68:	f7fa f967 	bl	8000e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	2112      	movs	r1, #18
 8006b70:	4638      	mov	r0, r7
 8006b72:	f7fa f962 	bl	8000e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8006b76:	4e53      	ldr	r6, [pc, #332]	; (8006cc4 <MX_GPIO_Init+0x1e4>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7fa f95b 	bl	8000e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 8006b84:	4622      	mov	r2, r4
 8006b86:	210f      	movs	r1, #15
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f7fa f956 	bl	8000e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8006b8e:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8006ccc <MX_GPIO_Init+0x1ec>
 8006b92:	4622      	mov	r2, r4
 8006b94:	210e      	movs	r1, #14
 8006b96:	4658      	mov	r0, fp
 8006b98:	f7fa f94f 	bl	8000e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin 
 8006b9c:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8006cd0 <MX_GPIO_Init+0x1f0>
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	f641 0143 	movw	r1, #6211	; 0x1843
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	f7fa f947 	bl	8000e3a <HAL_GPIO_WritePin>
                          |SI_NRST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8006bac:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006cd4 <MX_GPIO_Init+0x1f4>
 8006bb0:	4622      	mov	r2, r4
 8006bb2:	217f      	movs	r1, #127	; 0x7f
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	f7fa f940 	bl	8000e3a <HAL_GPIO_WritePin>
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_NSS_Pin;
 8006bba:	2324      	movs	r3, #36	; 0x24
 8006bbc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bbe:	2501      	movs	r5, #1
 8006bc0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bc4:	f04f 0902 	mov.w	r9, #2
 8006bc8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bcc:	a907      	add	r1, sp, #28
 8006bce:	4638      	mov	r0, r7
 8006bd0:	f7fa f83c 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 8006bd4:	2348      	movs	r3, #72	; 0x48
 8006bd6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bd8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bda:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bdc:	a907      	add	r1, sp, #28
 8006bde:	4638      	mov	r0, r7
 8006be0:	f7fa f834 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_B_EN_Pin|ESP32_A_EN_Pin;
 8006be4:	2312      	movs	r3, #18
 8006be6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006be8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bea:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bec:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bee:	a907      	add	r1, sp, #28
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	f7fa f82b 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
 8006bf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bfa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006bfc:	4f32      	ldr	r7, [pc, #200]	; (8006cc8 <MX_GPIO_Init+0x1e8>)
 8006bfe:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c00:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 8006c02:	a907      	add	r1, sp, #28
 8006c04:	4630      	mov	r0, r6
 8006c06:	f7fa f821 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin|LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin 
 8006c0a:	f248 030f 	movw	r3, #32783	; 0x800f
 8006c0e:	9307      	str	r3, [sp, #28]
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c10:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c12:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c14:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c16:	a907      	add	r1, sp, #28
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7fa f817 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 8006c1e:	230e      	movs	r3, #14
 8006c20:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c22:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c24:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c26:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c28:	a907      	add	r1, sp, #28
 8006c2a:	4658      	mov	r0, fp
 8006c2c:	f7fa f80e 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin;
 8006c30:	f640 0303 	movw	r3, #2051	; 0x803
 8006c34:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c36:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c38:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c3a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c3e:	a907      	add	r1, sp, #28
 8006c40:	4640      	mov	r0, r8
 8006c42:	f7fa f803 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 8006c46:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8006c4a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c4c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c50:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c52:	a907      	add	r1, sp, #28
 8006c54:	4640      	mov	r0, r8
 8006c56:	f7f9 fff9 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c5e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c60:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c64:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c66:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006c68:	2305      	movs	r3, #5
 8006c6a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c6c:	a907      	add	r1, sp, #28
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7f9 ffec 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8006c74:	237f      	movs	r3, #127	; 0x7f
 8006c76:	9307      	str	r3, [sp, #28]
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c78:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c7c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c7e:	a907      	add	r1, sp, #28
 8006c80:	4650      	mov	r0, sl
 8006c82:	f7f9 ffe3 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
 8006c86:	2320      	movs	r3, #32
 8006c88:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c8a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c8c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 8006c8e:	a907      	add	r1, sp, #28
 8006c90:	4640      	mov	r0, r8
 8006c92:	f7f9 ffdb 	bl	8000c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006c96:	4622      	mov	r2, r4
 8006c98:	4621      	mov	r1, r4
 8006c9a:	2017      	movs	r0, #23
 8006c9c:	f7f9 fd14 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006ca0:	2017      	movs	r0, #23
 8006ca2:	f7f9 fd47 	bl	8000734 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006ca6:	4622      	mov	r2, r4
 8006ca8:	4621      	mov	r1, r4
 8006caa:	2028      	movs	r0, #40	; 0x28
 8006cac:	f7f9 fd0c 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006cb0:	2028      	movs	r0, #40	; 0x28
 8006cb2:	f7f9 fd3f 	bl	8000734 <HAL_NVIC_EnableIRQ>

}
 8006cb6:	b00d      	add	sp, #52	; 0x34
 8006cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40020800 	.word	0x40020800
 8006cc8:	10210000 	.word	0x10210000
 8006ccc:	40020000 	.word	0x40020000
 8006cd0:	40020400 	.word	0x40020400
 8006cd4:	40020c00 	.word	0x40020c00

08006cd8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006cd8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8006cda:	4812      	ldr	r0, [pc, #72]	; (8006d24 <MX_I2C1_Init+0x4c>)
 8006cdc:	4b12      	ldr	r3, [pc, #72]	; (8006d28 <MX_I2C1_Init+0x50>)
 8006cde:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8006ce0:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <MX_I2C1_Init+0x54>)
 8006ce2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ce8:	2201      	movs	r2, #1
 8006cea:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006cec:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006cee:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006cf0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006cf2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006cf4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006cf6:	f7fa fa69 	bl	80011cc <HAL_I2C_Init>
 8006cfa:	b950      	cbnz	r0, 8006d12 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4809      	ldr	r0, [pc, #36]	; (8006d24 <MX_I2C1_Init+0x4c>)
 8006d00:	f7fa ff2b 	bl	8001b5a <HAL_I2CEx_ConfigAnalogFilter>
 8006d04:	b940      	cbnz	r0, 8006d18 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006d06:	2100      	movs	r1, #0
 8006d08:	4806      	ldr	r0, [pc, #24]	; (8006d24 <MX_I2C1_Init+0x4c>)
 8006d0a:	f7fa ff54 	bl	8001bb6 <HAL_I2CEx_ConfigDigitalFilter>
 8006d0e:	b930      	cbnz	r0, 8006d1e <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 8006d10:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006d12:	f000 f897 	bl	8006e44 <Error_Handler>
 8006d16:	e7f1      	b.n	8006cfc <MX_I2C1_Init+0x24>
    Error_Handler();
 8006d18:	f000 f894 	bl	8006e44 <Error_Handler>
 8006d1c:	e7f3      	b.n	8006d06 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8006d1e:	f000 f891 	bl	8006e44 <Error_Handler>
}
 8006d22:	e7f5      	b.n	8006d10 <MX_I2C1_Init+0x38>
 8006d24:	200046b0 	.word	0x200046b0
 8006d28:	40005400 	.word	0x40005400
 8006d2c:	6000030d 	.word	0x6000030d

08006d30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006d30:	b530      	push	{r4, r5, lr}
 8006d32:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d34:	2300      	movs	r3, #0
 8006d36:	9303      	str	r3, [sp, #12]
 8006d38:	9304      	str	r3, [sp, #16]
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	9306      	str	r3, [sp, #24]
 8006d3e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8006d40:	6802      	ldr	r2, [r0, #0]
 8006d42:	4b39      	ldr	r3, [pc, #228]	; (8006e28 <HAL_I2C_MspInit+0xf8>)
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d001      	beq.n	8006d4c <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006d48:	b009      	add	sp, #36	; 0x24
 8006d4a:	bd30      	pop	{r4, r5, pc}
 8006d4c:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d4e:	4d37      	ldr	r5, [pc, #220]	; (8006e2c <HAL_I2C_MspInit+0xfc>)
 8006d50:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006d52:	f043 0302 	orr.w	r3, r3, #2
 8006d56:	632b      	str	r3, [r5, #48]	; 0x30
 8006d58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006d62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006d66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d68:	2312      	movs	r3, #18
 8006d6a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d70:	2303      	movs	r3, #3
 8006d72:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006d74:	2304      	movs	r3, #4
 8006d76:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d78:	a903      	add	r1, sp, #12
 8006d7a:	482d      	ldr	r0, [pc, #180]	; (8006e30 <HAL_I2C_MspInit+0x100>)
 8006d7c:	f7f9 ff66 	bl	8000c4c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006d80:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d86:	642b      	str	r3, [r5, #64]	; 0x40
 8006d88:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d8e:	9302      	str	r3, [sp, #8]
 8006d90:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8006d92:	4828      	ldr	r0, [pc, #160]	; (8006e34 <HAL_I2C_MspInit+0x104>)
 8006d94:	4b28      	ldr	r3, [pc, #160]	; (8006e38 <HAL_I2C_MspInit+0x108>)
 8006d96:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8006d98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d9c:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d9e:	2340      	movs	r3, #64	; 0x40
 8006da0:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006daa:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006dac:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dae:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006db0:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006db6:	6202      	str	r2, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006db8:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006dba:	f7f9 fd5b 	bl	8000874 <HAL_DMA_Init>
 8006dbe:	bb60      	cbnz	r0, 8006e1a <HAL_I2C_MspInit+0xea>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006dc0:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <HAL_I2C_MspInit+0x104>)
 8006dc2:	63a3      	str	r3, [r4, #56]	; 0x38
 8006dc4:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8006dc6:	481d      	ldr	r0, [pc, #116]	; (8006e3c <HAL_I2C_MspInit+0x10c>)
 8006dc8:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <HAL_I2C_MspInit+0x110>)
 8006dca:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8006dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dd0:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dd6:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ddc:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006dde:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006de0:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006de2:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006de4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006de8:	6202      	str	r2, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006dea:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006dec:	f7f9 fd42 	bl	8000874 <HAL_DMA_Init>
 8006df0:	b9b0      	cbnz	r0, 8006e20 <HAL_I2C_MspInit+0xf0>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006df2:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <HAL_I2C_MspInit+0x10c>)
 8006df4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006df6:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	201f      	movs	r0, #31
 8006dfe:	f7f9 fc63 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006e02:	201f      	movs	r0, #31
 8006e04:	f7f9 fc96 	bl	8000734 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006e08:	2200      	movs	r2, #0
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	2020      	movs	r0, #32
 8006e0e:	f7f9 fc5b 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006e12:	2020      	movs	r0, #32
 8006e14:	f7f9 fc8e 	bl	8000734 <HAL_NVIC_EnableIRQ>
}
 8006e18:	e796      	b.n	8006d48 <HAL_I2C_MspInit+0x18>
      Error_Handler();
 8006e1a:	f000 f813 	bl	8006e44 <Error_Handler>
 8006e1e:	e7cf      	b.n	8006dc0 <HAL_I2C_MspInit+0x90>
      Error_Handler();
 8006e20:	f000 f810 	bl	8006e44 <Error_Handler>
 8006e24:	e7e5      	b.n	8006df2 <HAL_I2C_MspInit+0xc2>
 8006e26:	bf00      	nop
 8006e28:	40005400 	.word	0x40005400
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	40020400 	.word	0x40020400
 8006e34:	20004650 	.word	0x20004650
 8006e38:	400260b8 	.word	0x400260b8
 8006e3c:	200045f0 	.word	0x200045f0
 8006e40:	40026010 	.word	0x40026010

08006e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    ToggleLED(LED_Red);
 8006e46:	2001      	movs	r0, #1
 8006e48:	f7ff f9ac 	bl	80061a4 <ToggleLED>
    HAL_Delay(50);
 8006e4c:	2032      	movs	r0, #50	; 0x32
 8006e4e:	f7f9 fc15 	bl	800067c <HAL_Delay>
    ToggleLED(LED_Red);
 8006e52:	2001      	movs	r0, #1
 8006e54:	f7ff f9a6 	bl	80061a4 <ToggleLED>
    HAL_Delay(50);
 8006e58:	2032      	movs	r0, #50	; 0x32
 8006e5a:	f7f9 fc0f 	bl	800067c <HAL_Delay>
  while(1)
 8006e5e:	e7f2      	b.n	8006e46 <Error_Handler+0x2>

08006e60 <SystemClock_Config>:
{
 8006e60:	b500      	push	{lr}
 8006e62:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e64:	2234      	movs	r2, #52	; 0x34
 8006e66:	2100      	movs	r1, #0
 8006e68:	a82b      	add	r0, sp, #172	; 0xac
 8006e6a:	f000 fe27 	bl	8007abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e6e:	2100      	movs	r1, #0
 8006e70:	9126      	str	r1, [sp, #152]	; 0x98
 8006e72:	9127      	str	r1, [sp, #156]	; 0x9c
 8006e74:	9128      	str	r1, [sp, #160]	; 0xa0
 8006e76:	9129      	str	r1, [sp, #164]	; 0xa4
 8006e78:	912a      	str	r1, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006e7a:	2290      	movs	r2, #144	; 0x90
 8006e7c:	a802      	add	r0, sp, #8
 8006e7e:	f000 fe1d 	bl	8007abc <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e82:	4b2e      	ldr	r3, [pc, #184]	; (8006f3c <SystemClock_Config+0xdc>)
 8006e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006e8a:	641a      	str	r2, [r3, #64]	; 0x40
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e96:	4b2a      	ldr	r3, [pc, #168]	; (8006f40 <SystemClock_Config+0xe0>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006eae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006eb2:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006eb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006ebc:	9232      	str	r2, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8006ebe:	2219      	movs	r2, #25
 8006ec0:	9233      	str	r2, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8006ec2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8006ec6:	9234      	str	r2, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ec8:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006eca:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ecc:	a82b      	add	r0, sp, #172	; 0xac
 8006ece:	f7fa fedd 	bl	8001c8c <HAL_RCC_OscConfig>
 8006ed2:	bb58      	cbnz	r0, 8006f2c <SystemClock_Config+0xcc>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006ed4:	f7fa fe9c 	bl	8001c10 <HAL_PWREx_EnableOverDrive>
 8006ed8:	bb50      	cbnz	r0, 8006f30 <SystemClock_Config+0xd0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006eda:	230f      	movs	r3, #15
 8006edc:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ede:	2302      	movs	r3, #2
 8006ee0:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006ee6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006eea:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ef0:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8006ef2:	2107      	movs	r1, #7
 8006ef4:	a826      	add	r0, sp, #152	; 0x98
 8006ef6:	f7fb f905 	bl	8002104 <HAL_RCC_ClockConfig>
 8006efa:	b9d8      	cbnz	r0, 8006f34 <SystemClock_Config+0xd4>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_SAI2
 8006efc:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <SystemClock_Config+0xe4>)
 8006efe:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8006f00:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8006f04:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8006f06:	2302      	movs	r3, #2
 8006f08:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8006f0a:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 14;
 8006f0c:	230e      	movs	r3, #14
 8006f0e:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8006f10:	2301      	movs	r3, #1
 8006f12:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8006f14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f18:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f1e:	a802      	add	r0, sp, #8
 8006f20:	f7fb f9a2 	bl	8002268 <HAL_RCCEx_PeriphCLKConfig>
 8006f24:	b940      	cbnz	r0, 8006f38 <SystemClock_Config+0xd8>
}
 8006f26:	b039      	add	sp, #228	; 0xe4
 8006f28:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8006f2c:	f7ff ff8a 	bl	8006e44 <Error_Handler>
    Error_Handler();
 8006f30:	f7ff ff88 	bl	8006e44 <Error_Handler>
    Error_Handler();
 8006f34:	f7ff ff86 	bl	8006e44 <Error_Handler>
    Error_Handler();
 8006f38:	f7ff ff84 	bl	8006e44 <Error_Handler>
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	40007000 	.word	0x40007000
 8006f44:	01104000 	.word	0x01104000

08006f48 <main>:
{
 8006f48:	b508      	push	{r3, lr}
  __ASM volatile ("dsb 0xF":::"memory");
 8006f4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f4e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006f52:	4b2e      	ldr	r3, [pc, #184]	; (800700c <main+0xc4>)
 8006f54:	2100      	movs	r1, #0
 8006f56:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006f5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f5e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8006f62:	695a      	ldr	r2, [r3, #20]
 8006f64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006f68:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006f6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f6e:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8006f72:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006f76:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8006f7a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006f7e:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8006f82:	e000      	b.n	8006f86 <main+0x3e>
    } while(sets-- != 0U);
 8006f84:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006f86:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006f8a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8006f8e:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8006f92:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8006f96:	491d      	ldr	r1, [pc, #116]	; (800700c <main+0xc4>)
 8006f98:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	3a01      	subs	r2, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1f2      	bne.n	8006f8a <main+0x42>
    } while(sets-- != 0U);
 8006fa4:	1e43      	subs	r3, r0, #1
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d1ec      	bne.n	8006f84 <main+0x3c>
 8006faa:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006fae:	694b      	ldr	r3, [r1, #20]
 8006fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb4:	614b      	str	r3, [r1, #20]
 8006fb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006fba:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8006fbe:	f7f9 fb3f 	bl	8000640 <HAL_Init>
  SystemClock_Config();
 8006fc2:	f7ff ff4d 	bl	8006e60 <SystemClock_Config>
  MX_GPIO_Init();
 8006fc6:	f7ff fd8b 	bl	8006ae0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006fca:	f7ff fa31 	bl	8006430 <MX_DMA_Init>
  MX_I2C1_Init();
 8006fce:	f7ff fe83 	bl	8006cd8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8006fd2:	f000 f9c5 	bl	8007360 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006fd6:	f000 f9e9 	bl	80073ac <MX_SPI2_Init>
  MX_SPI3_Init();
 8006fda:	f000 fa0d 	bl	80073f8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8006fde:	f000 fc95 	bl	800790c <MX_TIM1_Init>
  MX_SAI2_Init();
 8006fe2:	f000 f81b 	bl	800701c <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8006fe6:	f000 f901 	bl	80071ec <MX_SPDIFRX_Init>
  MX_TIM11_Init();
 8006fea:	f000 fbbd 	bl	8007768 <MX_TIM11_Init>
  ILI9341_Initialize(&hspi1, 0);
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4807      	ldr	r0, [pc, #28]	; (8007010 <main+0xc8>)
 8006ff2:	f7fe f815 	bl	8005020 <ILI9341_Initialize>
  HAL_GPIO_WritePin(LCD_NBACKLIGHT_GPIO_Port, LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET); // Backlight on.
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2108      	movs	r1, #8
 8006ffa:	4806      	ldr	r0, [pc, #24]	; (8007014 <main+0xcc>)
 8006ffc:	f7f9 ff1d 	bl	8000e3a <HAL_GPIO_WritePin>
  XPT2046_Initialize(&hspi2);
 8007000:	4805      	ldr	r0, [pc, #20]	; (8007018 <main+0xd0>)
 8007002:	f7fe ffe1 	bl	8005fc8 <XPT2046_Initialize>
  Go();
 8007006:	f7ff fbf9 	bl	80067fc <Go>
  while (1)
 800700a:	e7fe      	b.n	800700a <main+0xc2>
 800700c:	e000ed00 	.word	0xe000ed00
 8007010:	20004a94 	.word	0x20004a94
 8007014:	40020800 	.word	0x40020800
 8007018:	20004af8 	.word	0x20004af8

0800701c <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 800701c:	b508      	push	{r3, lr}

  hsai_BlockA2.Instance = SAI2_Block_A;
 800701e:	4817      	ldr	r0, [pc, #92]	; (800707c <MX_SAI2_Init+0x60>)
 8007020:	4b17      	ldr	r3, [pc, #92]	; (8007080 <MX_SAI2_Init+0x64>)
 8007022:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8007024:	2100      	movs	r1, #0
 8007026:	6041      	str	r1, [r0, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8007028:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800702a:	6101      	str	r1, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800702c:	6141      	str	r1, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800702e:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8007030:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007034:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8007036:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8007038:	6241      	str	r1, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800703a:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800703c:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800703e:	2302      	movs	r3, #2
 8007040:	461a      	mov	r2, r3
 8007042:	f7fb ffc5 	bl	8002fd0 <HAL_SAI_InitProtocol>
 8007046:	b998      	cbnz	r0, 8007070 <MX_SAI2_Init+0x54>
  {
    Error_Handler();
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8007048:	480e      	ldr	r0, [pc, #56]	; (8007084 <MX_SAI2_Init+0x68>)
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <MX_SAI2_Init+0x6c>)
 800704c:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800704e:	2303      	movs	r3, #3
 8007050:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8007052:	2301      	movs	r3, #1
 8007054:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007056:	2100      	movs	r1, #0
 8007058:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800705a:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800705c:	60c1      	str	r1, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800705e:	6241      	str	r1, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8007060:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007062:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8007064:	2302      	movs	r3, #2
 8007066:	461a      	mov	r2, r3
 8007068:	f7fb ffb2 	bl	8002fd0 <HAL_SAI_InitProtocol>
 800706c:	b918      	cbnz	r0, 8007076 <MX_SAI2_Init+0x5a>
  {
    Error_Handler();
  }

}
 800706e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007070:	f7ff fee8 	bl	8006e44 <Error_Handler>
 8007074:	e7e8      	b.n	8007048 <MX_SAI2_Init+0x2c>
    Error_Handler();
 8007076:	f7ff fee5 	bl	8006e44 <Error_Handler>
}
 800707a:	e7f8      	b.n	800706e <MX_SAI2_Init+0x52>
 800707c:	200047c0 	.word	0x200047c0
 8007080:	40015c04 	.word	0x40015c04
 8007084:	20004844 	.word	0x20004844
 8007088:	40015c24 	.word	0x40015c24

0800708c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800708c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800708e:	b089      	sub	sp, #36	; 0x24
 8007090:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8007092:	6802      	ldr	r2, [r0, #0]
 8007094:	4b4a      	ldr	r3, [pc, #296]	; (80071c0 <HAL_SAI_MspInit+0x134>)
 8007096:	429a      	cmp	r2, r3
 8007098:	d005      	beq.n	80070a6 <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
    }
    if(hsai->Instance==SAI2_Block_B)
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	4b49      	ldr	r3, [pc, #292]	; (80071c4 <HAL_SAI_MspInit+0x138>)
 800709e:	429a      	cmp	r2, r3
 80070a0:	d04d      	beq.n	800713e <HAL_SAI_MspInit+0xb2>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
    }
}
 80070a2:	b009      	add	sp, #36	; 0x24
 80070a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI2_client == 0)
 80070a6:	4b48      	ldr	r3, [pc, #288]	; (80071c8 <HAL_SAI_MspInit+0x13c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	b94b      	cbnz	r3, 80070c0 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI2_CLK_ENABLE();
 80070ac:	4a47      	ldr	r2, [pc, #284]	; (80071cc <HAL_SAI_MspInit+0x140>)
 80070ae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80070b0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80070b4:	6451      	str	r1, [r2, #68]	; 0x44
 80070b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070b8:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80070bc:	9201      	str	r2, [sp, #4]
 80070be:	9a01      	ldr	r2, [sp, #4]
    SAI2_client ++;
 80070c0:	3301      	adds	r3, #1
 80070c2:	4a41      	ldr	r2, [pc, #260]	; (80071c8 <HAL_SAI_MspInit+0x13c>)
 80070c4:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
 80070c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80070ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070cc:	2702      	movs	r7, #2
 80070ce:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d0:	2500      	movs	r5, #0
 80070d2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070d4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80070d6:	260a      	movs	r6, #10
 80070d8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070da:	a903      	add	r1, sp, #12
 80070dc:	483c      	ldr	r0, [pc, #240]	; (80071d0 <HAL_SAI_MspInit+0x144>)
 80070de:	f7f9 fdb5 	bl	8000c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 80070e2:	2301      	movs	r3, #1
 80070e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ea:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80070ec:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 80070ee:	a903      	add	r1, sp, #12
 80070f0:	4838      	ldr	r0, [pc, #224]	; (80071d4 <HAL_SAI_MspInit+0x148>)
 80070f2:	f7f9 fdab 	bl	8000c4c <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA2_Stream2;
 80070f6:	4838      	ldr	r0, [pc, #224]	; (80071d8 <HAL_SAI_MspInit+0x14c>)
 80070f8:	4b38      	ldr	r3, [pc, #224]	; (80071dc <HAL_SAI_MspInit+0x150>)
 80070fa:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 80070fc:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 8007100:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007102:	2340      	movs	r3, #64	; 0x40
 8007104:	6083      	str	r3, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8007106:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8007108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800710c:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800710e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007112:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007114:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007118:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800711a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800711e:	61c3      	str	r3, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8007120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007124:	6203      	str	r3, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007126:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8007128:	f7f9 fba4 	bl	8000874 <HAL_DMA_Init>
 800712c:	b920      	cbnz	r0, 8007138 <HAL_SAI_MspInit+0xac>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 800712e:	4b2a      	ldr	r3, [pc, #168]	; (80071d8 <HAL_SAI_MspInit+0x14c>)
 8007130:	6723      	str	r3, [r4, #112]	; 0x70
 8007132:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8007134:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007136:	e7b0      	b.n	800709a <HAL_SAI_MspInit+0xe>
      Error_Handler();
 8007138:	f7ff fe84 	bl	8006e44 <Error_Handler>
 800713c:	e7f7      	b.n	800712e <HAL_SAI_MspInit+0xa2>
      if (SAI2_client == 0)
 800713e:	4b22      	ldr	r3, [pc, #136]	; (80071c8 <HAL_SAI_MspInit+0x13c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	b94b      	cbnz	r3, 8007158 <HAL_SAI_MspInit+0xcc>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8007144:	4a21      	ldr	r2, [pc, #132]	; (80071cc <HAL_SAI_MspInit+0x140>)
 8007146:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007148:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800714c:	6451      	str	r1, [r2, #68]	; 0x44
 800714e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007150:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8007154:	9202      	str	r2, [sp, #8]
 8007156:	9a02      	ldr	r2, [sp, #8]
    SAI2_client ++;
 8007158:	3301      	adds	r3, #1
 800715a:	4a1b      	ldr	r2, [pc, #108]	; (80071c8 <HAL_SAI_MspInit+0x13c>)
 800715c:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
 800715e:	2301      	movs	r3, #1
 8007160:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007162:	2302      	movs	r3, #2
 8007164:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007166:	2500      	movs	r5, #0
 8007168:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800716a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800716c:	230a      	movs	r3, #10
 800716e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8007170:	a903      	add	r1, sp, #12
 8007172:	481b      	ldr	r0, [pc, #108]	; (80071e0 <HAL_SAI_MspInit+0x154>)
 8007174:	f7f9 fd6a 	bl	8000c4c <HAL_GPIO_Init>
    hdma_sai2_b.Instance = DMA2_Stream6;
 8007178:	481a      	ldr	r0, [pc, #104]	; (80071e4 <HAL_SAI_MspInit+0x158>)
 800717a:	4b1b      	ldr	r3, [pc, #108]	; (80071e8 <HAL_SAI_MspInit+0x15c>)
 800717c:	6003      	str	r3, [r0, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 800717e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8007182:	6043      	str	r3, [r0, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007184:	6085      	str	r5, [r0, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8007186:	60c5      	str	r5, [r0, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8007188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800718c:	6103      	str	r3, [r0, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800718e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007192:	6143      	str	r3, [r0, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007194:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007198:	6183      	str	r3, [r0, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800719a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800719e:	61c3      	str	r3, [r0, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80071a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071a4:	6203      	str	r3, [r0, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80071a6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80071a8:	f7f9 fb64 	bl	8000874 <HAL_DMA_Init>
 80071ac:	b920      	cbnz	r0, 80071b8 <HAL_SAI_MspInit+0x12c>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80071ae:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <HAL_SAI_MspInit+0x158>)
 80071b0:	6723      	str	r3, [r4, #112]	; 0x70
 80071b2:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80071b4:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80071b6:	e774      	b.n	80070a2 <HAL_SAI_MspInit+0x16>
      Error_Handler();
 80071b8:	f7ff fe44 	bl	8006e44 <Error_Handler>
 80071bc:	e7f7      	b.n	80071ae <HAL_SAI_MspInit+0x122>
 80071be:	bf00      	nop
 80071c0:	40015c04 	.word	0x40015c04
 80071c4:	40015c24 	.word	0x40015c24
 80071c8:	200046fc 	.word	0x200046fc
 80071cc:	40023800 	.word	0x40023800
 80071d0:	40020c00 	.word	0x40020c00
 80071d4:	40021000 	.word	0x40021000
 80071d8:	20004700 	.word	0x20004700
 80071dc:	40026440 	.word	0x40026440
 80071e0:	40020000 	.word	0x40020000
 80071e4:	20004760 	.word	0x20004760
 80071e8:	400264a0 	.word	0x400264a0

080071ec <MX_SPDIFRX_Init>:
DMA_HandleTypeDef hdma_spdif_rx_dt;
DMA_HandleTypeDef hdma_spdif_rx_cs;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 80071ec:	b508      	push	{r3, lr}

  hspdif.Instance = SPDIFRX;
 80071ee:	4811      	ldr	r0, [pc, #68]	; (8007234 <MX_SPDIFRX_Init+0x48>)
 80071f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071f4:	6003      	str	r3, [r0, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	6043      	str	r3, [r0, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_15;
 80071fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80071fe:	6082      	str	r2, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_ON;
 8007200:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007204:	60c2      	str	r2, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8007206:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_MSB;
 8007208:	2310      	movs	r3, #16
 800720a:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_ENABLE;
 800720c:	2308      	movs	r3, #8
 800720e:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_ON;
 8007210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007214:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_ON;
 8007216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800721a:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_ON;
 800721c:	2380      	movs	r3, #128	; 0x80
 800721e:	6243      	str	r3, [r0, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_ON;
 8007220:	2340      	movs	r3, #64	; 0x40
 8007222:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8007224:	f7fb ffe6 	bl	80031f4 <HAL_SPDIFRX_Init>
 8007228:	b900      	cbnz	r0, 800722c <MX_SPDIFRX_Init+0x40>
  {
    Error_Handler();
  }

}
 800722a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800722c:	f7ff fe0a 	bl	8006e44 <Error_Handler>
}
 8007230:	e7fb      	b.n	800722a <MX_SPDIFRX_Init+0x3e>
 8007232:	bf00      	nop
 8007234:	20004988 	.word	0x20004988

08007238 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800723c:	2300      	movs	r3, #0
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	9306      	str	r3, [sp, #24]
 8007246:	9307      	str	r3, [sp, #28]
  if(spdifrxHandle->Instance==SPDIFRX)
 8007248:	6803      	ldr	r3, [r0, #0]
 800724a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800724e:	d001      	beq.n	8007254 <HAL_SPDIFRX_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8007250:	b008      	add	sp, #32
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	4604      	mov	r4, r0
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8007256:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 800725a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800725c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
 8007262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007264:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8007268:	9200      	str	r2, [sp, #0]
 800726a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800726c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800726e:	f042 0204 	orr.w	r2, r2, #4
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
 8007274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007276:	f002 0204 	and.w	r2, r2, #4
 800727a:	9201      	str	r2, [sp, #4]
 800727c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800727e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007280:	f042 0208 	orr.w	r2, r2, #8
 8007284:	631a      	str	r2, [r3, #48]	; 0x30
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007290:	2330      	movs	r3, #48	; 0x30
 8007292:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007294:	2502      	movs	r5, #2
 8007296:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8007298:	2608      	movs	r6, #8
 800729a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800729c:	a903      	add	r1, sp, #12
 800729e:	482a      	ldr	r0, [pc, #168]	; (8007348 <HAL_SPDIFRX_MspInit+0x110>)
 80072a0:	f7f9 fcd4 	bl	8000c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80072a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80072a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072aa:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ac:	2500      	movs	r5, #0
 80072ae:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072b0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80072b2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072b4:	a903      	add	r1, sp, #12
 80072b6:	4825      	ldr	r0, [pc, #148]	; (800734c <HAL_SPDIFRX_MspInit+0x114>)
 80072b8:	f7f9 fcc8 	bl	8000c4c <HAL_GPIO_Init>
    hdma_spdif_rx_dt.Instance = DMA1_Stream1;
 80072bc:	4824      	ldr	r0, [pc, #144]	; (8007350 <HAL_SPDIFRX_MspInit+0x118>)
 80072be:	4b25      	ldr	r3, [pc, #148]	; (8007354 <HAL_SPDIFRX_MspInit+0x11c>)
 80072c0:	6003      	str	r3, [r0, #0]
    hdma_spdif_rx_dt.Init.Channel = DMA_CHANNEL_0;
 80072c2:	6045      	str	r5, [r0, #4]
    hdma_spdif_rx_dt.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072c4:	6085      	str	r5, [r0, #8]
    hdma_spdif_rx_dt.Init.PeriphInc = DMA_PINC_DISABLE;
 80072c6:	60c5      	str	r5, [r0, #12]
    hdma_spdif_rx_dt.Init.MemInc = DMA_MINC_ENABLE;
 80072c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072cc:	6103      	str	r3, [r0, #16]
    hdma_spdif_rx_dt.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80072ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072d2:	6143      	str	r3, [r0, #20]
    hdma_spdif_rx_dt.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80072d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072d8:	6183      	str	r3, [r0, #24]
    hdma_spdif_rx_dt.Init.Mode = DMA_CIRCULAR;
 80072da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072de:	61c3      	str	r3, [r0, #28]
    hdma_spdif_rx_dt.Init.Priority = DMA_PRIORITY_HIGH;
 80072e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072e4:	6203      	str	r3, [r0, #32]
    hdma_spdif_rx_dt.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80072e6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spdif_rx_dt) != HAL_OK)
 80072e8:	f7f9 fac4 	bl	8000874 <HAL_DMA_Init>
 80072ec:	bb30      	cbnz	r0, 800733c <HAL_SPDIFRX_MspInit+0x104>
    __HAL_LINKDMA(spdifrxHandle,hdmaDrRx,hdma_spdif_rx_dt);
 80072ee:	4b18      	ldr	r3, [pc, #96]	; (8007350 <HAL_SPDIFRX_MspInit+0x118>)
 80072f0:	6423      	str	r3, [r4, #64]	; 0x40
 80072f2:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spdif_rx_cs.Instance = DMA1_Stream6;
 80072f4:	4818      	ldr	r0, [pc, #96]	; (8007358 <HAL_SPDIFRX_MspInit+0x120>)
 80072f6:	4b19      	ldr	r3, [pc, #100]	; (800735c <HAL_SPDIFRX_MspInit+0x124>)
 80072f8:	6003      	str	r3, [r0, #0]
    hdma_spdif_rx_cs.Init.Channel = DMA_CHANNEL_0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	6043      	str	r3, [r0, #4]
    hdma_spdif_rx_cs.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072fe:	6083      	str	r3, [r0, #8]
    hdma_spdif_rx_cs.Init.PeriphInc = DMA_PINC_DISABLE;
 8007300:	60c3      	str	r3, [r0, #12]
    hdma_spdif_rx_cs.Init.MemInc = DMA_MINC_ENABLE;
 8007302:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007306:	6102      	str	r2, [r0, #16]
    hdma_spdif_rx_cs.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800730c:	6142      	str	r2, [r0, #20]
    hdma_spdif_rx_cs.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800730e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007312:	6182      	str	r2, [r0, #24]
    hdma_spdif_rx_cs.Init.Mode = DMA_CIRCULAR;
 8007314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007318:	61c2      	str	r2, [r0, #28]
    hdma_spdif_rx_cs.Init.Priority = DMA_PRIORITY_LOW;
 800731a:	6203      	str	r3, [r0, #32]
    hdma_spdif_rx_cs.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800731c:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spdif_rx_cs) != HAL_OK)
 800731e:	f7f9 faa9 	bl	8000874 <HAL_DMA_Init>
 8007322:	b970      	cbnz	r0, 8007342 <HAL_SPDIFRX_MspInit+0x10a>
    __HAL_LINKDMA(spdifrxHandle,hdmaCsRx,hdma_spdif_rx_cs);
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <HAL_SPDIFRX_MspInit+0x120>)
 8007326:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007328:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 0, 0);
 800732a:	2200      	movs	r2, #0
 800732c:	4611      	mov	r1, r2
 800732e:	2061      	movs	r0, #97	; 0x61
 8007330:	f7f9 f9ca 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
 8007334:	2061      	movs	r0, #97	; 0x61
 8007336:	f7f9 f9fd 	bl	8000734 <HAL_NVIC_EnableIRQ>
}
 800733a:	e789      	b.n	8007250 <HAL_SPDIFRX_MspInit+0x18>
      Error_Handler();
 800733c:	f7ff fd82 	bl	8006e44 <Error_Handler>
 8007340:	e7d5      	b.n	80072ee <HAL_SPDIFRX_MspInit+0xb6>
      Error_Handler();
 8007342:	f7ff fd7f 	bl	8006e44 <Error_Handler>
 8007346:	e7ed      	b.n	8007324 <HAL_SPDIFRX_MspInit+0xec>
 8007348:	40020800 	.word	0x40020800
 800734c:	40020c00 	.word	0x40020c00
 8007350:	20004928 	.word	0x20004928
 8007354:	40026028 	.word	0x40026028
 8007358:	200048c8 	.word	0x200048c8
 800735c:	400260a0 	.word	0x400260a0

08007360 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007360:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 8007362:	4810      	ldr	r0, [pc, #64]	; (80073a4 <MX_SPI1_Init+0x44>)
 8007364:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <MX_SPI1_Init+0x48>)
 8007366:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007368:	f44f 7382 	mov.w	r3, #260	; 0x104
 800736c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800736e:	2300      	movs	r3, #0
 8007370:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007372:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007376:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007378:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800737a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800737c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007380:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007382:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007384:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007386:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007388:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800738a:	2207      	movs	r2, #7
 800738c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800738e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007390:	2308      	movs	r3, #8
 8007392:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007394:	f7fc f9d4 	bl	8003740 <HAL_SPI_Init>
 8007398:	b900      	cbnz	r0, 800739c <MX_SPI1_Init+0x3c>
  {
    Error_Handler();
  }

}
 800739a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800739c:	f7ff fd52 	bl	8006e44 <Error_Handler>
}
 80073a0:	e7fb      	b.n	800739a <MX_SPI1_Init+0x3a>
 80073a2:	bf00      	nop
 80073a4:	20004a94 	.word	0x20004a94
 80073a8:	40013000 	.word	0x40013000

080073ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80073ac:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 80073ae:	4810      	ldr	r0, [pc, #64]	; (80073f0 <MX_SPI2_Init+0x44>)
 80073b0:	4b10      	ldr	r3, [pc, #64]	; (80073f4 <MX_SPI2_Init+0x48>)
 80073b2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80073b4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80073b8:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80073ba:	2300      	movs	r3, #0
 80073bc:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80073be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80073c2:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80073c4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80073c6:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80073c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073cc:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80073ce:	2220      	movs	r2, #32
 80073d0:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80073d2:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80073d4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073d6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80073d8:	2207      	movs	r2, #7
 80073da:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80073dc:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80073de:	2308      	movs	r3, #8
 80073e0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80073e2:	f7fc f9ad 	bl	8003740 <HAL_SPI_Init>
 80073e6:	b900      	cbnz	r0, 80073ea <MX_SPI2_Init+0x3e>
  {
    Error_Handler();
  }

}
 80073e8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80073ea:	f7ff fd2b 	bl	8006e44 <Error_Handler>
}
 80073ee:	e7fb      	b.n	80073e8 <MX_SPI2_Init+0x3c>
 80073f0:	20004af8 	.word	0x20004af8
 80073f4:	40003800 	.word	0x40003800

080073f8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80073f8:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 80073fa:	4810      	ldr	r0, [pc, #64]	; (800743c <MX_SPI3_Init+0x44>)
 80073fc:	4b10      	ldr	r3, [pc, #64]	; (8007440 <MX_SPI3_Init+0x48>)
 80073fe:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007400:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007404:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007406:	2300      	movs	r3, #0
 8007408:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800740a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800740e:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007410:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007412:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007418:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800741a:	2210      	movs	r2, #16
 800741c:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800741e:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007420:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007422:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007424:	2207      	movs	r2, #7
 8007426:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007428:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800742a:	2308      	movs	r3, #8
 800742c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800742e:	f7fc f987 	bl	8003740 <HAL_SPI_Init>
 8007432:	b900      	cbnz	r0, 8007436 <MX_SPI3_Init+0x3e>
  {
    Error_Handler();
  }

}
 8007434:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007436:	f7ff fd05 	bl	8006e44 <Error_Handler>
}
 800743a:	e7fb      	b.n	8007434 <MX_SPI3_Init+0x3c>
 800743c:	20004b5c 	.word	0x20004b5c
 8007440:	40003c00 	.word	0x40003c00

08007444 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007444:	b530      	push	{r4, r5, lr}
 8007446:	b08d      	sub	sp, #52	; 0x34
 8007448:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800744a:	2300      	movs	r3, #0
 800744c:	9307      	str	r3, [sp, #28]
 800744e:	9308      	str	r3, [sp, #32]
 8007450:	9309      	str	r3, [sp, #36]	; 0x24
 8007452:	930a      	str	r3, [sp, #40]	; 0x28
 8007454:	930b      	str	r3, [sp, #44]	; 0x2c
  if(spiHandle->Instance==SPI1)
 8007456:	6803      	ldr	r3, [r0, #0]
 8007458:	4a56      	ldr	r2, [pc, #344]	; (80075b4 <HAL_SPI_MspInit+0x170>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d007      	beq.n	800746e <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 800745e:	4a56      	ldr	r2, [pc, #344]	; (80075b8 <HAL_SPI_MspInit+0x174>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d045      	beq.n	80074f0 <HAL_SPI_MspInit+0xac>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8007464:	4a55      	ldr	r2, [pc, #340]	; (80075bc <HAL_SPI_MspInit+0x178>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d063      	beq.n	8007532 <HAL_SPI_MspInit+0xee>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800746a:	b00d      	add	sp, #52	; 0x34
 800746c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800746e:	4b54      	ldr	r3, [pc, #336]	; (80075c0 <HAL_SPI_MspInit+0x17c>)
 8007470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007472:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007476:	645a      	str	r2, [r3, #68]	; 0x44
 8007478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800747a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800747e:	9201      	str	r2, [sp, #4]
 8007480:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007484:	f042 0201 	orr.w	r2, r2, #1
 8007488:	631a      	str	r2, [r3, #48]	; 0x30
 800748a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	9302      	str	r3, [sp, #8]
 8007492:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8007494:	23e0      	movs	r3, #224	; 0xe0
 8007496:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007498:	2302      	movs	r3, #2
 800749a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800749c:	2503      	movs	r5, #3
 800749e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80074a0:	2305      	movs	r3, #5
 80074a2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a4:	a907      	add	r1, sp, #28
 80074a6:	4847      	ldr	r0, [pc, #284]	; (80075c4 <HAL_SPI_MspInit+0x180>)
 80074a8:	f7f9 fbd0 	bl	8000c4c <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80074ac:	4846      	ldr	r0, [pc, #280]	; (80075c8 <HAL_SPI_MspInit+0x184>)
 80074ae:	4b47      	ldr	r3, [pc, #284]	; (80075cc <HAL_SPI_MspInit+0x188>)
 80074b0:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80074b2:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80074b6:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80074b8:	2340      	movs	r3, #64	; 0x40
 80074ba:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80074bc:	2300      	movs	r3, #0
 80074be:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80074c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074c4:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80074c6:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80074c8:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80074ca:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80074cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80074d0:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80074d2:	2204      	movs	r2, #4
 80074d4:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80074d6:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80074d8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80074da:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80074dc:	f7f9 f9ca 	bl	8000874 <HAL_DMA_Init>
 80074e0:	b918      	cbnz	r0, 80074ea <HAL_SPI_MspInit+0xa6>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80074e2:	4b39      	ldr	r3, [pc, #228]	; (80075c8 <HAL_SPI_MspInit+0x184>)
 80074e4:	6563      	str	r3, [r4, #84]	; 0x54
 80074e6:	639c      	str	r4, [r3, #56]	; 0x38
 80074e8:	e7bf      	b.n	800746a <HAL_SPI_MspInit+0x26>
      Error_Handler();
 80074ea:	f7ff fcab 	bl	8006e44 <Error_Handler>
 80074ee:	e7f8      	b.n	80074e2 <HAL_SPI_MspInit+0x9e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80074f0:	4b33      	ldr	r3, [pc, #204]	; (80075c0 <HAL_SPI_MspInit+0x17c>)
 80074f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074f8:	641a      	str	r2, [r3, #64]	; 0x40
 80074fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007500:	9203      	str	r2, [sp, #12]
 8007502:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007506:	f042 0202 	orr.w	r2, r2, #2
 800750a:	631a      	str	r2, [r3, #48]	; 0x30
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	9304      	str	r3, [sp, #16]
 8007514:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 8007516:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800751a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800751c:	2302      	movs	r3, #2
 800751e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007520:	2303      	movs	r3, #3
 8007522:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007524:	2305      	movs	r3, #5
 8007526:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007528:	a907      	add	r1, sp, #28
 800752a:	4829      	ldr	r0, [pc, #164]	; (80075d0 <HAL_SPI_MspInit+0x18c>)
 800752c:	f7f9 fb8e 	bl	8000c4c <HAL_GPIO_Init>
 8007530:	e79b      	b.n	800746a <HAL_SPI_MspInit+0x26>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007532:	4b23      	ldr	r3, [pc, #140]	; (80075c0 <HAL_SPI_MspInit+0x17c>)
 8007534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800753a:	641a      	str	r2, [r3, #64]	; 0x40
 800753c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800753e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8007542:	9205      	str	r2, [sp, #20]
 8007544:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007548:	f042 0204 	orr.w	r2, r2, #4
 800754c:	631a      	str	r2, [r3, #48]	; 0x30
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	9306      	str	r3, [sp, #24]
 8007556:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GENSPI_SCK_Pin|GENSPI_MISO_Pin|GENSPI_MOSI_Pin;
 8007558:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800755c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800755e:	2302      	movs	r3, #2
 8007560:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007562:	2503      	movs	r5, #3
 8007564:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007566:	2306      	movs	r3, #6
 8007568:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800756a:	a907      	add	r1, sp, #28
 800756c:	4819      	ldr	r0, [pc, #100]	; (80075d4 <HAL_SPI_MspInit+0x190>)
 800756e:	f7f9 fb6d 	bl	8000c4c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8007572:	4819      	ldr	r0, [pc, #100]	; (80075d8 <HAL_SPI_MspInit+0x194>)
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <HAL_SPI_MspInit+0x198>)
 8007576:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8007578:	2300      	movs	r3, #0
 800757a:	6043      	str	r3, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800757c:	2240      	movs	r2, #64	; 0x40
 800757e:	6082      	str	r2, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007580:	60c3      	str	r3, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007586:	6102      	str	r2, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007588:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800758a:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800758c:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800758e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007592:	6202      	str	r2, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007594:	2204      	movs	r2, #4
 8007596:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007598:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800759a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800759c:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800759e:	f7f9 f969 	bl	8000874 <HAL_DMA_Init>
 80075a2:	b918      	cbnz	r0, 80075ac <HAL_SPI_MspInit+0x168>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <HAL_SPI_MspInit+0x194>)
 80075a6:	6563      	str	r3, [r4, #84]	; 0x54
 80075a8:	639c      	str	r4, [r3, #56]	; 0x38
}
 80075aa:	e75e      	b.n	800746a <HAL_SPI_MspInit+0x26>
      Error_Handler();
 80075ac:	f7ff fc4a 	bl	8006e44 <Error_Handler>
 80075b0:	e7f8      	b.n	80075a4 <HAL_SPI_MspInit+0x160>
 80075b2:	bf00      	nop
 80075b4:	40013000 	.word	0x40013000
 80075b8:	40003800 	.word	0x40003800
 80075bc:	40003c00 	.word	0x40003c00
 80075c0:	40023800 	.word	0x40023800
 80075c4:	40020000 	.word	0x40020000
 80075c8:	200049d4 	.word	0x200049d4
 80075cc:	40026458 	.word	0x40026458
 80075d0:	40020400 	.word	0x40020400
 80075d4:	40020800 	.word	0x40020800
 80075d8:	20004a34 	.word	0x20004a34
 80075dc:	40026088 	.word	0x40026088

080075e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80075e0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80075e2:	4b0a      	ldr	r3, [pc, #40]	; (800760c <HAL_MspInit+0x2c>)
 80075e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80075ea:	641a      	str	r2, [r3, #64]	; 0x40
 80075ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ee:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80075f2:	9200      	str	r2, [sp, #0]
 80075f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075fc:	645a      	str	r2, [r3, #68]	; 0x44
 80075fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007608:	b002      	add	sp, #8
 800760a:	4770      	bx	lr
 800760c:	40023800 	.word	0x40023800

08007610 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007610:	4770      	bx	lr

08007612 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007612:	e7fe      	b.n	8007612 <HardFault_Handler>

08007614 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007614:	e7fe      	b.n	8007614 <MemManage_Handler>

08007616 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007616:	e7fe      	b.n	8007616 <BusFault_Handler>

08007618 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007618:	e7fe      	b.n	8007618 <UsageFault_Handler>

0800761a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800761a:	4770      	bx	lr

0800761c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800761c:	4770      	bx	lr

0800761e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800761e:	4770      	bx	lr

08007620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007620:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007622:	f7f9 f819 	bl	8000658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007626:	bd08      	pop	{r3, pc}

08007628 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007628:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800762a:	4802      	ldr	r0, [pc, #8]	; (8007634 <DMA1_Stream0_IRQHandler+0xc>)
 800762c:	f7f9 fa20 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007630:	bd08      	pop	{r3, pc}
 8007632:	bf00      	nop
 8007634:	200045f0 	.word	0x200045f0

08007638 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007638:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spdif_rx_dt);
 800763a:	4802      	ldr	r0, [pc, #8]	; (8007644 <DMA1_Stream1_IRQHandler+0xc>)
 800763c:	f7f9 fa18 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007640:	bd08      	pop	{r3, pc}
 8007642:	bf00      	nop
 8007644:	20004928 	.word	0x20004928

08007648 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007648:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800764a:	4802      	ldr	r0, [pc, #8]	; (8007654 <DMA1_Stream5_IRQHandler+0xc>)
 800764c:	f7f9 fa10 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007650:	bd08      	pop	{r3, pc}
 8007652:	bf00      	nop
 8007654:	20004a34 	.word	0x20004a34

08007658 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007658:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spdif_rx_cs);
 800765a:	4802      	ldr	r0, [pc, #8]	; (8007664 <DMA1_Stream6_IRQHandler+0xc>)
 800765c:	f7f9 fa08 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007660:	bd08      	pop	{r3, pc}
 8007662:	bf00      	nop
 8007664:	200048c8 	.word	0x200048c8

08007668 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007668:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800766a:	2020      	movs	r0, #32
 800766c:	f7f9 fbf6 	bl	8000e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007670:	bd08      	pop	{r3, pc}
	...

08007674 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8007674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007676:	4803      	ldr	r0, [pc, #12]	; (8007684 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8007678:	f7fc fd53 	bl	8004122 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800767c:	4802      	ldr	r0, [pc, #8]	; (8007688 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800767e:	f7fc fd50 	bl	8004122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8007682:	bd08      	pop	{r3, pc}
 8007684:	20004c20 	.word	0x20004c20
 8007688:	20004cd0 	.word	0x20004cd0

0800768c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800768c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800768e:	4802      	ldr	r0, [pc, #8]	; (8007698 <I2C1_EV_IRQHandler+0xc>)
 8007690:	f7f9 ffa8 	bl	80015e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007694:	bd08      	pop	{r3, pc}
 8007696:	bf00      	nop
 8007698:	200046b0 	.word	0x200046b0

0800769c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800769c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800769e:	4802      	ldr	r0, [pc, #8]	; (80076a8 <I2C1_ER_IRQHandler+0xc>)
 80076a0:	f7fa fa11 	bl	8001ac6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80076a4:	bd08      	pop	{r3, pc}
 80076a6:	bf00      	nop
 80076a8:	200046b0 	.word	0x200046b0

080076ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80076ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80076ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80076b2:	f7f9 fbd3 	bl	8000e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80076b6:	bd08      	pop	{r3, pc}

080076b8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80076b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80076ba:	4802      	ldr	r0, [pc, #8]	; (80076c4 <DMA1_Stream7_IRQHandler+0xc>)
 80076bc:	f7f9 f9d8 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80076c0:	bd08      	pop	{r3, pc}
 80076c2:	bf00      	nop
 80076c4:	20004650 	.word	0x20004650

080076c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80076c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80076ca:	4802      	ldr	r0, [pc, #8]	; (80076d4 <DMA2_Stream1_IRQHandler+0xc>)
 80076cc:	f7f9 f9d0 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80076d0:	bd08      	pop	{r3, pc}
 80076d2:	bf00      	nop
 80076d4:	20004bc0 	.word	0x20004bc0

080076d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80076d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80076da:	4802      	ldr	r0, [pc, #8]	; (80076e4 <DMA2_Stream2_IRQHandler+0xc>)
 80076dc:	f7f9 f9c8 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80076e0:	bd08      	pop	{r3, pc}
 80076e2:	bf00      	nop
 80076e4:	20004700 	.word	0x20004700

080076e8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80076e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80076ea:	4802      	ldr	r0, [pc, #8]	; (80076f4 <DMA2_Stream3_IRQHandler+0xc>)
 80076ec:	f7f9 f9c0 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80076f0:	bd08      	pop	{r3, pc}
 80076f2:	bf00      	nop
 80076f4:	200049d4 	.word	0x200049d4

080076f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80076f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80076fa:	4802      	ldr	r0, [pc, #8]	; (8007704 <DMA2_Stream6_IRQHandler+0xc>)
 80076fc:	f7f9 f9b8 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007700:	bd08      	pop	{r3, pc}
 8007702:	bf00      	nop
 8007704:	20004760 	.word	0x20004760

08007708 <SPDIF_RX_IRQHandler>:

/**
  * @brief This function handles SPDIF-RX global interrupt.
  */
void SPDIF_RX_IRQHandler(void)
{
 8007708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPDIF_RX_IRQn 0 */

  /* USER CODE END SPDIF_RX_IRQn 0 */
  HAL_SPDIFRX_IRQHandler(&hspdif);
 800770a:	4802      	ldr	r0, [pc, #8]	; (8007714 <SPDIF_RX_IRQHandler+0xc>)
 800770c:	f7fb ff04 	bl	8003518 <HAL_SPDIFRX_IRQHandler>
  /* USER CODE BEGIN SPDIF_RX_IRQn 1 */

  /* USER CODE END SPDIF_RX_IRQn 1 */
}
 8007710:	bd08      	pop	{r3, pc}
 8007712:	bf00      	nop
 8007714:	20004988 	.word	0x20004988

08007718 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007718:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800771a:	4a0f      	ldr	r2, [pc, #60]	; (8007758 <SystemInit+0x40>)
 800771c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007728:	4b0c      	ldr	r3, [pc, #48]	; (800775c <SystemInit+0x44>)
 800772a:	6819      	ldr	r1, [r3, #0]
 800772c:	f041 0101 	orr.w	r1, r1, #1
 8007730:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007732:	2000      	movs	r0, #0
 8007734:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007736:	681c      	ldr	r4, [r3, #0]
 8007738:	4909      	ldr	r1, [pc, #36]	; (8007760 <SystemInit+0x48>)
 800773a:	4021      	ands	r1, r4
 800773c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800773e:	4909      	ldr	r1, [pc, #36]	; (8007764 <SystemInit+0x4c>)
 8007740:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8007748:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800774a:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800774c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007750:	6093      	str	r3, [r2, #8]
#endif
}
 8007752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	e000ed00 	.word	0xe000ed00
 800775c:	40023800 	.word	0x40023800
 8007760:	fef6ffff 	.word	0xfef6ffff
 8007764:	24003010 	.word	0x24003010

08007768 <MX_TIM11_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8007768:	b500      	push	{lr}
 800776a:	b085      	sub	sp, #20
  TIM_IC_InitTypeDef sConfigIC = {0};
 800776c:	2300      	movs	r3, #0
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	9302      	str	r3, [sp, #8]
 8007774:	9303      	str	r3, [sp, #12]

  htim11.Instance = TIM11;
 8007776:	4818      	ldr	r0, [pc, #96]	; (80077d8 <MX_TIM11_Init+0x70>)
 8007778:	4a18      	ldr	r2, [pc, #96]	; (80077dc <MX_TIM11_Init+0x74>)
 800777a:	6002      	str	r2, [r0, #0]
  htim11.Init.Prescaler = 0;
 800777c:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800777e:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 0xFFFF;
 8007780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007784:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007786:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007788:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800778a:	f7fd f8f9 	bl	8004980 <HAL_TIM_Base_Init>
 800778e:	b9b0      	cbnz	r0, 80077be <MX_TIM11_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8007790:	4811      	ldr	r0, [pc, #68]	; (80077d8 <MX_TIM11_Init+0x70>)
 8007792:	f7fd f93d 	bl	8004a10 <HAL_TIM_IC_Init>
 8007796:	b9a8      	cbnz	r0, 80077c4 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007798:	2200      	movs	r2, #0
 800779a:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800779c:	2301      	movs	r3, #1
 800779e:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80077a0:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 80077a2:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80077a4:	4669      	mov	r1, sp
 80077a6:	480c      	ldr	r0, [pc, #48]	; (80077d8 <MX_TIM11_Init+0x70>)
 80077a8:	f7fc fffc 	bl	80047a4 <HAL_TIM_IC_ConfigChannel>
 80077ac:	b968      	cbnz	r0, 80077ca <MX_TIM11_Init+0x62>
  {
    Error_Handler();
  }
  if (HAL_TIMEx_RemapConfig(&htim11, TIM_TIM11_SPDIFRX) != HAL_OK)
 80077ae:	2101      	movs	r1, #1
 80077b0:	4809      	ldr	r0, [pc, #36]	; (80077d8 <MX_TIM11_Init+0x70>)
 80077b2:	f7fd f9cd 	bl	8004b50 <HAL_TIMEx_RemapConfig>
 80077b6:	b958      	cbnz	r0, 80077d0 <MX_TIM11_Init+0x68>
  {
    Error_Handler();
  }

}
 80077b8:	b005      	add	sp, #20
 80077ba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80077be:	f7ff fb41 	bl	8006e44 <Error_Handler>
 80077c2:	e7e5      	b.n	8007790 <MX_TIM11_Init+0x28>
    Error_Handler();
 80077c4:	f7ff fb3e 	bl	8006e44 <Error_Handler>
 80077c8:	e7e6      	b.n	8007798 <MX_TIM11_Init+0x30>
    Error_Handler();
 80077ca:	f7ff fb3b 	bl	8006e44 <Error_Handler>
 80077ce:	e7ee      	b.n	80077ae <MX_TIM11_Init+0x46>
    Error_Handler();
 80077d0:	f7ff fb38 	bl	8006e44 <Error_Handler>
}
 80077d4:	e7f0      	b.n	80077b8 <MX_TIM11_Init+0x50>
 80077d6:	bf00      	nop
 80077d8:	20004cd0 	.word	0x20004cd0
 80077dc:	40014800 	.word	0x40014800

080077e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 80077e0:	6802      	ldr	r2, [r0, #0]
 80077e2:	4b21      	ldr	r3, [pc, #132]	; (8007868 <HAL_TIM_PWM_MspInit+0x88>)
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d000      	beq.n	80077ea <HAL_TIM_PWM_MspInit+0xa>
 80077e8:	4770      	bx	lr
{
 80077ea:	b510      	push	{r4, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80077f0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80077f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077f6:	f042 0201 	orr.w	r2, r2, #1
 80077fa:	645a      	str	r2, [r3, #68]	; 0x44
 80077fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	9b01      	ldr	r3, [sp, #4]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8007806:	4819      	ldr	r0, [pc, #100]	; (800786c <HAL_TIM_PWM_MspInit+0x8c>)
 8007808:	4b19      	ldr	r3, [pc, #100]	; (8007870 <HAL_TIM_PWM_MspInit+0x90>)
 800780a:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800780c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8007810:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007812:	2340      	movs	r3, #64	; 0x40
 8007814:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007816:	2300      	movs	r3, #0
 8007818:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800781a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800781e:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007824:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800782a:	6182      	str	r2, [r0, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800782c:	61c3      	str	r3, [r0, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800782e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007832:	6202      	str	r2, [r0, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007834:	2204      	movs	r2, #4
 8007836:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007838:	2203      	movs	r2, #3
 800783a:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 800783c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800783e:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8007840:	f7f9 f818 	bl	8000874 <HAL_DMA_Init>
 8007844:	b960      	cbnz	r0, 8007860 <HAL_TIM_PWM_MspInit+0x80>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8007846:	4b09      	ldr	r3, [pc, #36]	; (800786c <HAL_TIM_PWM_MspInit+0x8c>)
 8007848:	6263      	str	r3, [r4, #36]	; 0x24
 800784a:	639c      	str	r4, [r3, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800784c:	2200      	movs	r2, #0
 800784e:	4611      	mov	r1, r2
 8007850:	201a      	movs	r0, #26
 8007852:	f7f8 ff39 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007856:	201a      	movs	r0, #26
 8007858:	f7f8 ff6c 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800785c:	b002      	add	sp, #8
 800785e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8007860:	f7ff faf0 	bl	8006e44 <Error_Handler>
 8007864:	e7ef      	b.n	8007846 <HAL_TIM_PWM_MspInit+0x66>
 8007866:	bf00      	nop
 8007868:	40010000 	.word	0x40010000
 800786c:	20004bc0 	.word	0x20004bc0
 8007870:	40026428 	.word	0x40026428

08007874 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM11)
 8007874:	6802      	ldr	r2, [r0, #0]
 8007876:	4b0e      	ldr	r3, [pc, #56]	; (80078b0 <HAL_TIM_Base_MspInit+0x3c>)
 8007878:	429a      	cmp	r2, r3
 800787a:	d000      	beq.n	800787e <HAL_TIM_Base_MspInit+0xa>
 800787c:	4770      	bx	lr
{
 800787e:	b500      	push	{lr}
 8007880:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007882:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8007886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007888:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800788c:	645a      	str	r2, [r3, #68]	; 0x44
 800788e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	9b01      	ldr	r3, [sp, #4]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8007898:	2200      	movs	r2, #0
 800789a:	4611      	mov	r1, r2
 800789c:	201a      	movs	r0, #26
 800789e:	f7f8 ff13 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80078a2:	201a      	movs	r0, #26
 80078a4:	f7f8 ff46 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80078a8:	b003      	add	sp, #12
 80078aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80078ae:	bf00      	nop
 80078b0:	40014800 	.word	0x40014800

080078b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80078b4:	b500      	push	{lr}
 80078b6:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078b8:	2300      	movs	r3, #0
 80078ba:	9301      	str	r3, [sp, #4]
 80078bc:	9302      	str	r3, [sp, #8]
 80078be:	9303      	str	r3, [sp, #12]
 80078c0:	9304      	str	r3, [sp, #16]
 80078c2:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 80078c4:	6802      	ldr	r2, [r0, #0]
 80078c6:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <HAL_TIM_MspPostInit+0x50>)
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d002      	beq.n	80078d2 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80078cc:	b007      	add	sp, #28
 80078ce:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80078d2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80078d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078d8:	f042 0210 	orr.w	r2, r2, #16
 80078dc:	631a      	str	r2, [r3, #48]	; 0x30
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
 80078e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ee:	2302      	movs	r3, #2
 80078f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80078f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80078f4:	2301      	movs	r3, #1
 80078f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 80078f8:	a901      	add	r1, sp, #4
 80078fa:	4803      	ldr	r0, [pc, #12]	; (8007908 <HAL_TIM_MspPostInit+0x54>)
 80078fc:	f7f9 f9a6 	bl	8000c4c <HAL_GPIO_Init>
}
 8007900:	e7e4      	b.n	80078cc <HAL_TIM_MspPostInit+0x18>
 8007902:	bf00      	nop
 8007904:	40010000 	.word	0x40010000
 8007908:	40021000 	.word	0x40021000

0800790c <MX_TIM1_Init>:
{
 800790c:	b510      	push	{r4, lr}
 800790e:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007910:	2400      	movs	r4, #0
 8007912:	9413      	str	r4, [sp, #76]	; 0x4c
 8007914:	9414      	str	r4, [sp, #80]	; 0x50
 8007916:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007918:	940c      	str	r4, [sp, #48]	; 0x30
 800791a:	940d      	str	r4, [sp, #52]	; 0x34
 800791c:	940e      	str	r4, [sp, #56]	; 0x38
 800791e:	940f      	str	r4, [sp, #60]	; 0x3c
 8007920:	9410      	str	r4, [sp, #64]	; 0x40
 8007922:	9411      	str	r4, [sp, #68]	; 0x44
 8007924:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007926:	222c      	movs	r2, #44	; 0x2c
 8007928:	4621      	mov	r1, r4
 800792a:	a801      	add	r0, sp, #4
 800792c:	f000 f8c6 	bl	8007abc <memset>
  htim1.Instance = TIM1;
 8007930:	4826      	ldr	r0, [pc, #152]	; (80079cc <MX_TIM1_Init+0xc0>)
 8007932:	4b27      	ldr	r3, [pc, #156]	; (80079d0 <MX_TIM1_Init+0xc4>)
 8007934:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8007936:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007938:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 269;
 800793a:	f240 130d 	movw	r3, #269	; 0x10d
 800793e:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007940:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8007942:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007944:	2380      	movs	r3, #128	; 0x80
 8007946:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007948:	f7fd f83e 	bl	80049c8 <HAL_TIM_PWM_Init>
 800794c:	2800      	cmp	r0, #0
 800794e:	d131      	bne.n	80079b4 <MX_TIM1_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007950:	2300      	movs	r3, #0
 8007952:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007954:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007956:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007958:	a913      	add	r1, sp, #76	; 0x4c
 800795a:	481c      	ldr	r0, [pc, #112]	; (80079cc <MX_TIM1_Init+0xc0>)
 800795c:	f7fd f87c 	bl	8004a58 <HAL_TIMEx_MasterConfigSynchronization>
 8007960:	2800      	cmp	r0, #0
 8007962:	d12a      	bne.n	80079ba <MX_TIM1_Init+0xae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007964:	2360      	movs	r3, #96	; 0x60
 8007966:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8007968:	2200      	movs	r2, #0
 800796a:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800796c:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800796e:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007970:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007972:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007974:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007976:	a90c      	add	r1, sp, #48	; 0x30
 8007978:	4814      	ldr	r0, [pc, #80]	; (80079cc <MX_TIM1_Init+0xc0>)
 800797a:	f7fc fe2f 	bl	80045dc <HAL_TIM_PWM_ConfigChannel>
 800797e:	b9f8      	cbnz	r0, 80079c0 <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007980:	2300      	movs	r3, #0
 8007982:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007984:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007986:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007988:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800798a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800798c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007990:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007992:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007994:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800799a:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800799c:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800799e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80079a0:	a901      	add	r1, sp, #4
 80079a2:	480a      	ldr	r0, [pc, #40]	; (80079cc <MX_TIM1_Init+0xc0>)
 80079a4:	f7fd f88c 	bl	8004ac0 <HAL_TIMEx_ConfigBreakDeadTime>
 80079a8:	b968      	cbnz	r0, 80079c6 <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 80079aa:	4808      	ldr	r0, [pc, #32]	; (80079cc <MX_TIM1_Init+0xc0>)
 80079ac:	f7ff ff82 	bl	80078b4 <HAL_TIM_MspPostInit>
}
 80079b0:	b016      	add	sp, #88	; 0x58
 80079b2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80079b4:	f7ff fa46 	bl	8006e44 <Error_Handler>
 80079b8:	e7ca      	b.n	8007950 <MX_TIM1_Init+0x44>
    Error_Handler();
 80079ba:	f7ff fa43 	bl	8006e44 <Error_Handler>
 80079be:	e7d1      	b.n	8007964 <MX_TIM1_Init+0x58>
    Error_Handler();
 80079c0:	f7ff fa40 	bl	8006e44 <Error_Handler>
 80079c4:	e7dc      	b.n	8007980 <MX_TIM1_Init+0x74>
    Error_Handler();
 80079c6:	f7ff fa3d 	bl	8006e44 <Error_Handler>
 80079ca:	e7ee      	b.n	80079aa <MX_TIM1_Init+0x9e>
 80079cc:	20004c20 	.word	0x20004c20
 80079d0:	40010000 	.word	0x40010000

080079d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80079d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80079d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80079da:	e003      	b.n	80079e4 <LoopCopyDataInit>

080079dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80079de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80079e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80079e2:	3104      	adds	r1, #4

080079e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80079e4:	480b      	ldr	r0, [pc, #44]	; (8007a14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80079e6:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80079e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80079ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80079ec:	d3f6      	bcc.n	80079dc <CopyDataInit>
  ldr  r2, =_sbss
 80079ee:	4a0b      	ldr	r2, [pc, #44]	; (8007a1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80079f0:	e002      	b.n	80079f8 <LoopFillZerobss>

080079f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80079f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80079f4:	f842 3b04 	str.w	r3, [r2], #4

080079f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80079f8:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80079fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80079fc:	d3f9      	bcc.n	80079f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80079fe:	f7ff fe8b 	bl	8007718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a02:	f000 f819 	bl	8007a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007a06:	f7ff fa9f 	bl	8006f48 <main>
  bx  lr    
 8007a0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007a0c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007a10:	0800cad4 	.word	0x0800cad4
  ldr  r0, =_sdata
 8007a14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007a18:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8007a1c:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8007a20:	20004d94 	.word	0x20004d94

08007a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a24:	e7fe      	b.n	8007a24 <ADC_IRQHandler>
	...

08007a28 <calloc>:
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <calloc+0xc>)
 8007a2a:	460a      	mov	r2, r1
 8007a2c:	4601      	mov	r1, r0
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	f000 b84c 	b.w	8007acc <_calloc_r>
 8007a34:	20000028 	.word	0x20000028

08007a38 <__libc_init_array>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	4d0d      	ldr	r5, [pc, #52]	; (8007a70 <__libc_init_array+0x38>)
 8007a3c:	4c0d      	ldr	r4, [pc, #52]	; (8007a74 <__libc_init_array+0x3c>)
 8007a3e:	1b64      	subs	r4, r4, r5
 8007a40:	10a4      	asrs	r4, r4, #2
 8007a42:	2600      	movs	r6, #0
 8007a44:	42a6      	cmp	r6, r4
 8007a46:	d109      	bne.n	8007a5c <__libc_init_array+0x24>
 8007a48:	4d0b      	ldr	r5, [pc, #44]	; (8007a78 <__libc_init_array+0x40>)
 8007a4a:	4c0c      	ldr	r4, [pc, #48]	; (8007a7c <__libc_init_array+0x44>)
 8007a4c:	f003 fbf6 	bl	800b23c <_init>
 8007a50:	1b64      	subs	r4, r4, r5
 8007a52:	10a4      	asrs	r4, r4, #2
 8007a54:	2600      	movs	r6, #0
 8007a56:	42a6      	cmp	r6, r4
 8007a58:	d105      	bne.n	8007a66 <__libc_init_array+0x2e>
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a60:	4798      	blx	r3
 8007a62:	3601      	adds	r6, #1
 8007a64:	e7ee      	b.n	8007a44 <__libc_init_array+0xc>
 8007a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6a:	4798      	blx	r3
 8007a6c:	3601      	adds	r6, #1
 8007a6e:	e7f2      	b.n	8007a56 <__libc_init_array+0x1e>
 8007a70:	0800cacc 	.word	0x0800cacc
 8007a74:	0800cacc 	.word	0x0800cacc
 8007a78:	0800cacc 	.word	0x0800cacc
 8007a7c:	0800cad0 	.word	0x0800cad0

08007a80 <malloc>:
 8007a80:	4b02      	ldr	r3, [pc, #8]	; (8007a8c <malloc+0xc>)
 8007a82:	4601      	mov	r1, r0
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f000 b8a3 	b.w	8007bd0 <_malloc_r>
 8007a8a:	bf00      	nop
 8007a8c:	20000028 	.word	0x20000028

08007a90 <free>:
 8007a90:	4b02      	ldr	r3, [pc, #8]	; (8007a9c <free+0xc>)
 8007a92:	4601      	mov	r1, r0
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	f000 b82f 	b.w	8007af8 <_free_r>
 8007a9a:	bf00      	nop
 8007a9c:	20000028 	.word	0x20000028

08007aa0 <memcpy>:
 8007aa0:	440a      	add	r2, r1
 8007aa2:	4291      	cmp	r1, r2
 8007aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aa8:	d100      	bne.n	8007aac <memcpy+0xc>
 8007aaa:	4770      	bx	lr
 8007aac:	b510      	push	{r4, lr}
 8007aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ab6:	4291      	cmp	r1, r2
 8007ab8:	d1f9      	bne.n	8007aae <memcpy+0xe>
 8007aba:	bd10      	pop	{r4, pc}

08007abc <memset>:
 8007abc:	4402      	add	r2, r0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d100      	bne.n	8007ac6 <memset+0xa>
 8007ac4:	4770      	bx	lr
 8007ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aca:	e7f9      	b.n	8007ac0 <memset+0x4>

08007acc <_calloc_r>:
 8007acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ace:	fba1 2402 	umull	r2, r4, r1, r2
 8007ad2:	b94c      	cbnz	r4, 8007ae8 <_calloc_r+0x1c>
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	9201      	str	r2, [sp, #4]
 8007ad8:	f000 f87a 	bl	8007bd0 <_malloc_r>
 8007adc:	9a01      	ldr	r2, [sp, #4]
 8007ade:	4605      	mov	r5, r0
 8007ae0:	b930      	cbnz	r0, 8007af0 <_calloc_r+0x24>
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	b003      	add	sp, #12
 8007ae6:	bd30      	pop	{r4, r5, pc}
 8007ae8:	220c      	movs	r2, #12
 8007aea:	6002      	str	r2, [r0, #0]
 8007aec:	2500      	movs	r5, #0
 8007aee:	e7f8      	b.n	8007ae2 <_calloc_r+0x16>
 8007af0:	4621      	mov	r1, r4
 8007af2:	f7ff ffe3 	bl	8007abc <memset>
 8007af6:	e7f4      	b.n	8007ae2 <_calloc_r+0x16>

08007af8 <_free_r>:
 8007af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007afa:	2900      	cmp	r1, #0
 8007afc:	d044      	beq.n	8007b88 <_free_r+0x90>
 8007afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b02:	9001      	str	r0, [sp, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f1a1 0404 	sub.w	r4, r1, #4
 8007b0a:	bfb8      	it	lt
 8007b0c:	18e4      	addlt	r4, r4, r3
 8007b0e:	f001 fc43 	bl	8009398 <__malloc_lock>
 8007b12:	4a1e      	ldr	r2, [pc, #120]	; (8007b8c <_free_r+0x94>)
 8007b14:	9801      	ldr	r0, [sp, #4]
 8007b16:	6813      	ldr	r3, [r2, #0]
 8007b18:	b933      	cbnz	r3, 8007b28 <_free_r+0x30>
 8007b1a:	6063      	str	r3, [r4, #4]
 8007b1c:	6014      	str	r4, [r2, #0]
 8007b1e:	b003      	add	sp, #12
 8007b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b24:	f001 bc3e 	b.w	80093a4 <__malloc_unlock>
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d908      	bls.n	8007b3e <_free_r+0x46>
 8007b2c:	6825      	ldr	r5, [r4, #0]
 8007b2e:	1961      	adds	r1, r4, r5
 8007b30:	428b      	cmp	r3, r1
 8007b32:	bf01      	itttt	eq
 8007b34:	6819      	ldreq	r1, [r3, #0]
 8007b36:	685b      	ldreq	r3, [r3, #4]
 8007b38:	1949      	addeq	r1, r1, r5
 8007b3a:	6021      	streq	r1, [r4, #0]
 8007b3c:	e7ed      	b.n	8007b1a <_free_r+0x22>
 8007b3e:	461a      	mov	r2, r3
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	b10b      	cbz	r3, 8007b48 <_free_r+0x50>
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	d9fa      	bls.n	8007b3e <_free_r+0x46>
 8007b48:	6811      	ldr	r1, [r2, #0]
 8007b4a:	1855      	adds	r5, r2, r1
 8007b4c:	42a5      	cmp	r5, r4
 8007b4e:	d10b      	bne.n	8007b68 <_free_r+0x70>
 8007b50:	6824      	ldr	r4, [r4, #0]
 8007b52:	4421      	add	r1, r4
 8007b54:	1854      	adds	r4, r2, r1
 8007b56:	42a3      	cmp	r3, r4
 8007b58:	6011      	str	r1, [r2, #0]
 8007b5a:	d1e0      	bne.n	8007b1e <_free_r+0x26>
 8007b5c:	681c      	ldr	r4, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	6053      	str	r3, [r2, #4]
 8007b62:	4421      	add	r1, r4
 8007b64:	6011      	str	r1, [r2, #0]
 8007b66:	e7da      	b.n	8007b1e <_free_r+0x26>
 8007b68:	d902      	bls.n	8007b70 <_free_r+0x78>
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	6003      	str	r3, [r0, #0]
 8007b6e:	e7d6      	b.n	8007b1e <_free_r+0x26>
 8007b70:	6825      	ldr	r5, [r4, #0]
 8007b72:	1961      	adds	r1, r4, r5
 8007b74:	428b      	cmp	r3, r1
 8007b76:	bf04      	itt	eq
 8007b78:	6819      	ldreq	r1, [r3, #0]
 8007b7a:	685b      	ldreq	r3, [r3, #4]
 8007b7c:	6063      	str	r3, [r4, #4]
 8007b7e:	bf04      	itt	eq
 8007b80:	1949      	addeq	r1, r1, r5
 8007b82:	6021      	streq	r1, [r4, #0]
 8007b84:	6054      	str	r4, [r2, #4]
 8007b86:	e7ca      	b.n	8007b1e <_free_r+0x26>
 8007b88:	b003      	add	sp, #12
 8007b8a:	bd30      	pop	{r4, r5, pc}
 8007b8c:	20004d80 	.word	0x20004d80

08007b90 <sbrk_aligned>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	4e0e      	ldr	r6, [pc, #56]	; (8007bcc <sbrk_aligned+0x3c>)
 8007b94:	460c      	mov	r4, r1
 8007b96:	6831      	ldr	r1, [r6, #0]
 8007b98:	4605      	mov	r5, r0
 8007b9a:	b911      	cbnz	r1, 8007ba2 <sbrk_aligned+0x12>
 8007b9c:	f000 fd28 	bl	80085f0 <_sbrk_r>
 8007ba0:	6030      	str	r0, [r6, #0]
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 fd23 	bl	80085f0 <_sbrk_r>
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	d00a      	beq.n	8007bc4 <sbrk_aligned+0x34>
 8007bae:	1cc4      	adds	r4, r0, #3
 8007bb0:	f024 0403 	bic.w	r4, r4, #3
 8007bb4:	42a0      	cmp	r0, r4
 8007bb6:	d007      	beq.n	8007bc8 <sbrk_aligned+0x38>
 8007bb8:	1a21      	subs	r1, r4, r0
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f000 fd18 	bl	80085f0 <_sbrk_r>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d101      	bne.n	8007bc8 <sbrk_aligned+0x38>
 8007bc4:	f04f 34ff 	mov.w	r4, #4294967295
 8007bc8:	4620      	mov	r0, r4
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	20004d84 	.word	0x20004d84

08007bd0 <_malloc_r>:
 8007bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd4:	1ccd      	adds	r5, r1, #3
 8007bd6:	f025 0503 	bic.w	r5, r5, #3
 8007bda:	3508      	adds	r5, #8
 8007bdc:	2d0c      	cmp	r5, #12
 8007bde:	bf38      	it	cc
 8007be0:	250c      	movcc	r5, #12
 8007be2:	2d00      	cmp	r5, #0
 8007be4:	4607      	mov	r7, r0
 8007be6:	db01      	blt.n	8007bec <_malloc_r+0x1c>
 8007be8:	42a9      	cmp	r1, r5
 8007bea:	d905      	bls.n	8007bf8 <_malloc_r+0x28>
 8007bec:	230c      	movs	r3, #12
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	2600      	movs	r6, #0
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf8:	4e2e      	ldr	r6, [pc, #184]	; (8007cb4 <_malloc_r+0xe4>)
 8007bfa:	f001 fbcd 	bl	8009398 <__malloc_lock>
 8007bfe:	6833      	ldr	r3, [r6, #0]
 8007c00:	461c      	mov	r4, r3
 8007c02:	bb34      	cbnz	r4, 8007c52 <_malloc_r+0x82>
 8007c04:	4629      	mov	r1, r5
 8007c06:	4638      	mov	r0, r7
 8007c08:	f7ff ffc2 	bl	8007b90 <sbrk_aligned>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	4604      	mov	r4, r0
 8007c10:	d14d      	bne.n	8007cae <_malloc_r+0xde>
 8007c12:	6834      	ldr	r4, [r6, #0]
 8007c14:	4626      	mov	r6, r4
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	d140      	bne.n	8007c9c <_malloc_r+0xcc>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4638      	mov	r0, r7
 8007c20:	eb04 0803 	add.w	r8, r4, r3
 8007c24:	f000 fce4 	bl	80085f0 <_sbrk_r>
 8007c28:	4580      	cmp	r8, r0
 8007c2a:	d13a      	bne.n	8007ca2 <_malloc_r+0xd2>
 8007c2c:	6821      	ldr	r1, [r4, #0]
 8007c2e:	3503      	adds	r5, #3
 8007c30:	1a6d      	subs	r5, r5, r1
 8007c32:	f025 0503 	bic.w	r5, r5, #3
 8007c36:	3508      	adds	r5, #8
 8007c38:	2d0c      	cmp	r5, #12
 8007c3a:	bf38      	it	cc
 8007c3c:	250c      	movcc	r5, #12
 8007c3e:	4629      	mov	r1, r5
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7ff ffa5 	bl	8007b90 <sbrk_aligned>
 8007c46:	3001      	adds	r0, #1
 8007c48:	d02b      	beq.n	8007ca2 <_malloc_r+0xd2>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	442b      	add	r3, r5
 8007c4e:	6023      	str	r3, [r4, #0]
 8007c50:	e00e      	b.n	8007c70 <_malloc_r+0xa0>
 8007c52:	6822      	ldr	r2, [r4, #0]
 8007c54:	1b52      	subs	r2, r2, r5
 8007c56:	d41e      	bmi.n	8007c96 <_malloc_r+0xc6>
 8007c58:	2a0b      	cmp	r2, #11
 8007c5a:	d916      	bls.n	8007c8a <_malloc_r+0xba>
 8007c5c:	1961      	adds	r1, r4, r5
 8007c5e:	42a3      	cmp	r3, r4
 8007c60:	6025      	str	r5, [r4, #0]
 8007c62:	bf18      	it	ne
 8007c64:	6059      	strne	r1, [r3, #4]
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	bf08      	it	eq
 8007c6a:	6031      	streq	r1, [r6, #0]
 8007c6c:	5162      	str	r2, [r4, r5]
 8007c6e:	604b      	str	r3, [r1, #4]
 8007c70:	4638      	mov	r0, r7
 8007c72:	f104 060b 	add.w	r6, r4, #11
 8007c76:	f001 fb95 	bl	80093a4 <__malloc_unlock>
 8007c7a:	f026 0607 	bic.w	r6, r6, #7
 8007c7e:	1d23      	adds	r3, r4, #4
 8007c80:	1af2      	subs	r2, r6, r3
 8007c82:	d0b6      	beq.n	8007bf2 <_malloc_r+0x22>
 8007c84:	1b9b      	subs	r3, r3, r6
 8007c86:	50a3      	str	r3, [r4, r2]
 8007c88:	e7b3      	b.n	8007bf2 <_malloc_r+0x22>
 8007c8a:	6862      	ldr	r2, [r4, #4]
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	bf0c      	ite	eq
 8007c90:	6032      	streq	r2, [r6, #0]
 8007c92:	605a      	strne	r2, [r3, #4]
 8007c94:	e7ec      	b.n	8007c70 <_malloc_r+0xa0>
 8007c96:	4623      	mov	r3, r4
 8007c98:	6864      	ldr	r4, [r4, #4]
 8007c9a:	e7b2      	b.n	8007c02 <_malloc_r+0x32>
 8007c9c:	4634      	mov	r4, r6
 8007c9e:	6876      	ldr	r6, [r6, #4]
 8007ca0:	e7b9      	b.n	8007c16 <_malloc_r+0x46>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	603b      	str	r3, [r7, #0]
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	f001 fb7c 	bl	80093a4 <__malloc_unlock>
 8007cac:	e7a1      	b.n	8007bf2 <_malloc_r+0x22>
 8007cae:	6025      	str	r5, [r4, #0]
 8007cb0:	e7de      	b.n	8007c70 <_malloc_r+0xa0>
 8007cb2:	bf00      	nop
 8007cb4:	20004d80 	.word	0x20004d80

08007cb8 <__cvt>:
 8007cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cba:	ed2d 8b02 	vpush	{d8}
 8007cbe:	eeb0 8b40 	vmov.f64	d8, d0
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	4617      	mov	r7, r2
 8007cc6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007cc8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007cca:	ee18 2a90 	vmov	r2, s17
 8007cce:	f025 0520 	bic.w	r5, r5, #32
 8007cd2:	2a00      	cmp	r2, #0
 8007cd4:	bfb6      	itet	lt
 8007cd6:	222d      	movlt	r2, #45	; 0x2d
 8007cd8:	2200      	movge	r2, #0
 8007cda:	eeb1 8b40 	vneglt.f64	d8, d0
 8007cde:	2d46      	cmp	r5, #70	; 0x46
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	701a      	strb	r2, [r3, #0]
 8007ce4:	d004      	beq.n	8007cf0 <__cvt+0x38>
 8007ce6:	2d45      	cmp	r5, #69	; 0x45
 8007ce8:	d100      	bne.n	8007cec <__cvt+0x34>
 8007cea:	3401      	adds	r4, #1
 8007cec:	2102      	movs	r1, #2
 8007cee:	e000      	b.n	8007cf2 <__cvt+0x3a>
 8007cf0:	2103      	movs	r1, #3
 8007cf2:	ab03      	add	r3, sp, #12
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	ab02      	add	r3, sp, #8
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	4633      	mov	r3, r6
 8007cfe:	eeb0 0b48 	vmov.f64	d0, d8
 8007d02:	f000 fdc5 	bl	8008890 <_dtoa_r>
 8007d06:	2d47      	cmp	r5, #71	; 0x47
 8007d08:	d101      	bne.n	8007d0e <__cvt+0x56>
 8007d0a:	07fb      	lsls	r3, r7, #31
 8007d0c:	d51a      	bpl.n	8007d44 <__cvt+0x8c>
 8007d0e:	2d46      	cmp	r5, #70	; 0x46
 8007d10:	eb00 0204 	add.w	r2, r0, r4
 8007d14:	d10c      	bne.n	8007d30 <__cvt+0x78>
 8007d16:	7803      	ldrb	r3, [r0, #0]
 8007d18:	2b30      	cmp	r3, #48	; 0x30
 8007d1a:	d107      	bne.n	8007d2c <__cvt+0x74>
 8007d1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d24:	bf1c      	itt	ne
 8007d26:	f1c4 0401 	rsbne	r4, r4, #1
 8007d2a:	6034      	strne	r4, [r6, #0]
 8007d2c:	6833      	ldr	r3, [r6, #0]
 8007d2e:	441a      	add	r2, r3
 8007d30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d38:	bf08      	it	eq
 8007d3a:	9203      	streq	r2, [sp, #12]
 8007d3c:	2130      	movs	r1, #48	; 0x30
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d307      	bcc.n	8007d54 <__cvt+0x9c>
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d48:	1a1b      	subs	r3, r3, r0
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	b005      	add	sp, #20
 8007d4e:	ecbd 8b02 	vpop	{d8}
 8007d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d54:	1c5c      	adds	r4, r3, #1
 8007d56:	9403      	str	r4, [sp, #12]
 8007d58:	7019      	strb	r1, [r3, #0]
 8007d5a:	e7f0      	b.n	8007d3e <__cvt+0x86>

08007d5c <__exponent>:
 8007d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2900      	cmp	r1, #0
 8007d62:	bfb8      	it	lt
 8007d64:	4249      	neglt	r1, r1
 8007d66:	f803 2b02 	strb.w	r2, [r3], #2
 8007d6a:	bfb4      	ite	lt
 8007d6c:	222d      	movlt	r2, #45	; 0x2d
 8007d6e:	222b      	movge	r2, #43	; 0x2b
 8007d70:	2909      	cmp	r1, #9
 8007d72:	7042      	strb	r2, [r0, #1]
 8007d74:	dd2a      	ble.n	8007dcc <__exponent+0x70>
 8007d76:	f10d 0407 	add.w	r4, sp, #7
 8007d7a:	46a4      	mov	ip, r4
 8007d7c:	270a      	movs	r7, #10
 8007d7e:	46a6      	mov	lr, r4
 8007d80:	460a      	mov	r2, r1
 8007d82:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d86:	fb07 1516 	mls	r5, r7, r6, r1
 8007d8a:	3530      	adds	r5, #48	; 0x30
 8007d8c:	2a63      	cmp	r2, #99	; 0x63
 8007d8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d96:	4631      	mov	r1, r6
 8007d98:	dcf1      	bgt.n	8007d7e <__exponent+0x22>
 8007d9a:	3130      	adds	r1, #48	; 0x30
 8007d9c:	f1ae 0502 	sub.w	r5, lr, #2
 8007da0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007da4:	1c44      	adds	r4, r0, #1
 8007da6:	4629      	mov	r1, r5
 8007da8:	4561      	cmp	r1, ip
 8007daa:	d30a      	bcc.n	8007dc2 <__exponent+0x66>
 8007dac:	f10d 0209 	add.w	r2, sp, #9
 8007db0:	eba2 020e 	sub.w	r2, r2, lr
 8007db4:	4565      	cmp	r5, ip
 8007db6:	bf88      	it	hi
 8007db8:	2200      	movhi	r2, #0
 8007dba:	4413      	add	r3, r2
 8007dbc:	1a18      	subs	r0, r3, r0
 8007dbe:	b003      	add	sp, #12
 8007dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007dca:	e7ed      	b.n	8007da8 <__exponent+0x4c>
 8007dcc:	2330      	movs	r3, #48	; 0x30
 8007dce:	3130      	adds	r1, #48	; 0x30
 8007dd0:	7083      	strb	r3, [r0, #2]
 8007dd2:	70c1      	strb	r1, [r0, #3]
 8007dd4:	1d03      	adds	r3, r0, #4
 8007dd6:	e7f1      	b.n	8007dbc <__exponent+0x60>

08007dd8 <_printf_float>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	b08b      	sub	sp, #44	; 0x2c
 8007dde:	460c      	mov	r4, r1
 8007de0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007de4:	4616      	mov	r6, r2
 8007de6:	461f      	mov	r7, r3
 8007de8:	4605      	mov	r5, r0
 8007dea:	f001 fabf 	bl	800936c <_localeconv_r>
 8007dee:	f8d0 b000 	ldr.w	fp, [r0]
 8007df2:	4658      	mov	r0, fp
 8007df4:	f7f8 fa24 	bl	8000240 <strlen>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9308      	str	r3, [sp, #32]
 8007dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8007e00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007e04:	6822      	ldr	r2, [r4, #0]
 8007e06:	3307      	adds	r3, #7
 8007e08:	f023 0307 	bic.w	r3, r3, #7
 8007e0c:	f103 0108 	add.w	r1, r3, #8
 8007e10:	f8c8 1000 	str.w	r1, [r8]
 8007e14:	4682      	mov	sl, r0
 8007e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e1a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007e1e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008080 <_printf_float+0x2a8>
 8007e22:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007e26:	eeb0 6bc0 	vabs.f64	d6, d0
 8007e2a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e32:	dd24      	ble.n	8007e7e <_printf_float+0xa6>
 8007e34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3c:	d502      	bpl.n	8007e44 <_printf_float+0x6c>
 8007e3e:	232d      	movs	r3, #45	; 0x2d
 8007e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e44:	4b90      	ldr	r3, [pc, #576]	; (8008088 <_printf_float+0x2b0>)
 8007e46:	4891      	ldr	r0, [pc, #580]	; (800808c <_printf_float+0x2b4>)
 8007e48:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007e4c:	bf94      	ite	ls
 8007e4e:	4698      	movls	r8, r3
 8007e50:	4680      	movhi	r8, r0
 8007e52:	2303      	movs	r3, #3
 8007e54:	6123      	str	r3, [r4, #16]
 8007e56:	f022 0204 	bic.w	r2, r2, #4
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	6022      	str	r2, [r4, #0]
 8007e5e:	9304      	str	r3, [sp, #16]
 8007e60:	9700      	str	r7, [sp, #0]
 8007e62:	4633      	mov	r3, r6
 8007e64:	aa09      	add	r2, sp, #36	; 0x24
 8007e66:	4621      	mov	r1, r4
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f000 f9d3 	bl	8008214 <_printf_common>
 8007e6e:	3001      	adds	r0, #1
 8007e70:	f040 808a 	bne.w	8007f88 <_printf_float+0x1b0>
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
 8007e78:	b00b      	add	sp, #44	; 0x2c
 8007e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e86:	d709      	bvc.n	8007e9c <_printf_float+0xc4>
 8007e88:	ee10 3a90 	vmov	r3, s1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	bfbc      	itt	lt
 8007e90:	232d      	movlt	r3, #45	; 0x2d
 8007e92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e96:	487e      	ldr	r0, [pc, #504]	; (8008090 <_printf_float+0x2b8>)
 8007e98:	4b7e      	ldr	r3, [pc, #504]	; (8008094 <_printf_float+0x2bc>)
 8007e9a:	e7d5      	b.n	8007e48 <_printf_float+0x70>
 8007e9c:	6863      	ldr	r3, [r4, #4]
 8007e9e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007ea2:	9104      	str	r1, [sp, #16]
 8007ea4:	1c59      	adds	r1, r3, #1
 8007ea6:	d13c      	bne.n	8007f22 <_printf_float+0x14a>
 8007ea8:	2306      	movs	r3, #6
 8007eaa:	6063      	str	r3, [r4, #4]
 8007eac:	2300      	movs	r3, #0
 8007eae:	9303      	str	r3, [sp, #12]
 8007eb0:	ab08      	add	r3, sp, #32
 8007eb2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007eba:	ab07      	add	r3, sp, #28
 8007ebc:	6861      	ldr	r1, [r4, #4]
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	6022      	str	r2, [r4, #0]
 8007ec2:	f10d 031b 	add.w	r3, sp, #27
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f7ff fef6 	bl	8007cb8 <__cvt>
 8007ecc:	9b04      	ldr	r3, [sp, #16]
 8007ece:	9907      	ldr	r1, [sp, #28]
 8007ed0:	2b47      	cmp	r3, #71	; 0x47
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	d108      	bne.n	8007ee8 <_printf_float+0x110>
 8007ed6:	1cc8      	adds	r0, r1, #3
 8007ed8:	db02      	blt.n	8007ee0 <_printf_float+0x108>
 8007eda:	6863      	ldr	r3, [r4, #4]
 8007edc:	4299      	cmp	r1, r3
 8007ede:	dd41      	ble.n	8007f64 <_printf_float+0x18c>
 8007ee0:	f1a9 0902 	sub.w	r9, r9, #2
 8007ee4:	fa5f f989 	uxtb.w	r9, r9
 8007ee8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007eec:	d820      	bhi.n	8007f30 <_printf_float+0x158>
 8007eee:	3901      	subs	r1, #1
 8007ef0:	464a      	mov	r2, r9
 8007ef2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ef6:	9107      	str	r1, [sp, #28]
 8007ef8:	f7ff ff30 	bl	8007d5c <__exponent>
 8007efc:	9a08      	ldr	r2, [sp, #32]
 8007efe:	9004      	str	r0, [sp, #16]
 8007f00:	1813      	adds	r3, r2, r0
 8007f02:	2a01      	cmp	r2, #1
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	dc02      	bgt.n	8007f0e <_printf_float+0x136>
 8007f08:	6822      	ldr	r2, [r4, #0]
 8007f0a:	07d2      	lsls	r2, r2, #31
 8007f0c:	d501      	bpl.n	8007f12 <_printf_float+0x13a>
 8007f0e:	3301      	adds	r3, #1
 8007f10:	6123      	str	r3, [r4, #16]
 8007f12:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0a2      	beq.n	8007e60 <_printf_float+0x88>
 8007f1a:	232d      	movs	r3, #45	; 0x2d
 8007f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f20:	e79e      	b.n	8007e60 <_printf_float+0x88>
 8007f22:	9904      	ldr	r1, [sp, #16]
 8007f24:	2947      	cmp	r1, #71	; 0x47
 8007f26:	d1c1      	bne.n	8007eac <_printf_float+0xd4>
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1bf      	bne.n	8007eac <_printf_float+0xd4>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e7bc      	b.n	8007eaa <_printf_float+0xd2>
 8007f30:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007f34:	d118      	bne.n	8007f68 <_printf_float+0x190>
 8007f36:	2900      	cmp	r1, #0
 8007f38:	6863      	ldr	r3, [r4, #4]
 8007f3a:	dd0b      	ble.n	8007f54 <_printf_float+0x17c>
 8007f3c:	6121      	str	r1, [r4, #16]
 8007f3e:	b913      	cbnz	r3, 8007f46 <_printf_float+0x16e>
 8007f40:	6822      	ldr	r2, [r4, #0]
 8007f42:	07d0      	lsls	r0, r2, #31
 8007f44:	d502      	bpl.n	8007f4c <_printf_float+0x174>
 8007f46:	3301      	adds	r3, #1
 8007f48:	440b      	add	r3, r1
 8007f4a:	6123      	str	r3, [r4, #16]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	e7de      	b.n	8007f12 <_printf_float+0x13a>
 8007f54:	b913      	cbnz	r3, 8007f5c <_printf_float+0x184>
 8007f56:	6822      	ldr	r2, [r4, #0]
 8007f58:	07d2      	lsls	r2, r2, #31
 8007f5a:	d501      	bpl.n	8007f60 <_printf_float+0x188>
 8007f5c:	3302      	adds	r3, #2
 8007f5e:	e7f4      	b.n	8007f4a <_printf_float+0x172>
 8007f60:	2301      	movs	r3, #1
 8007f62:	e7f2      	b.n	8007f4a <_printf_float+0x172>
 8007f64:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	4299      	cmp	r1, r3
 8007f6c:	db05      	blt.n	8007f7a <_printf_float+0x1a2>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	6121      	str	r1, [r4, #16]
 8007f72:	07d8      	lsls	r0, r3, #31
 8007f74:	d5ea      	bpl.n	8007f4c <_printf_float+0x174>
 8007f76:	1c4b      	adds	r3, r1, #1
 8007f78:	e7e7      	b.n	8007f4a <_printf_float+0x172>
 8007f7a:	2900      	cmp	r1, #0
 8007f7c:	bfd4      	ite	le
 8007f7e:	f1c1 0202 	rsble	r2, r1, #2
 8007f82:	2201      	movgt	r2, #1
 8007f84:	4413      	add	r3, r2
 8007f86:	e7e0      	b.n	8007f4a <_printf_float+0x172>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	055a      	lsls	r2, r3, #21
 8007f8c:	d407      	bmi.n	8007f9e <_printf_float+0x1c6>
 8007f8e:	6923      	ldr	r3, [r4, #16]
 8007f90:	4642      	mov	r2, r8
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d12a      	bne.n	8007ff2 <_printf_float+0x21a>
 8007f9c:	e76a      	b.n	8007e74 <_printf_float+0x9c>
 8007f9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007fa2:	f240 80e2 	bls.w	800816a <_printf_float+0x392>
 8007fa6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007faa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb2:	d133      	bne.n	800801c <_printf_float+0x244>
 8007fb4:	4a38      	ldr	r2, [pc, #224]	; (8008098 <_printf_float+0x2c0>)
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f af58 	beq.w	8007e74 <_printf_float+0x9c>
 8007fc4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	db02      	blt.n	8007fd2 <_printf_float+0x1fa>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	07d8      	lsls	r0, r3, #31
 8007fd0:	d50f      	bpl.n	8007ff2 <_printf_float+0x21a>
 8007fd2:	4653      	mov	r3, sl
 8007fd4:	465a      	mov	r2, fp
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4628      	mov	r0, r5
 8007fda:	47b8      	blx	r7
 8007fdc:	3001      	adds	r0, #1
 8007fde:	f43f af49 	beq.w	8007e74 <_printf_float+0x9c>
 8007fe2:	f04f 0800 	mov.w	r8, #0
 8007fe6:	f104 091a 	add.w	r9, r4, #26
 8007fea:	9b08      	ldr	r3, [sp, #32]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	4543      	cmp	r3, r8
 8007ff0:	dc09      	bgt.n	8008006 <_printf_float+0x22e>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	079b      	lsls	r3, r3, #30
 8007ff6:	f100 8108 	bmi.w	800820a <_printf_float+0x432>
 8007ffa:	68e0      	ldr	r0, [r4, #12]
 8007ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffe:	4298      	cmp	r0, r3
 8008000:	bfb8      	it	lt
 8008002:	4618      	movlt	r0, r3
 8008004:	e738      	b.n	8007e78 <_printf_float+0xa0>
 8008006:	2301      	movs	r3, #1
 8008008:	464a      	mov	r2, r9
 800800a:	4631      	mov	r1, r6
 800800c:	4628      	mov	r0, r5
 800800e:	47b8      	blx	r7
 8008010:	3001      	adds	r0, #1
 8008012:	f43f af2f 	beq.w	8007e74 <_printf_float+0x9c>
 8008016:	f108 0801 	add.w	r8, r8, #1
 800801a:	e7e6      	b.n	8007fea <_printf_float+0x212>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	2b00      	cmp	r3, #0
 8008020:	dc3c      	bgt.n	800809c <_printf_float+0x2c4>
 8008022:	4a1d      	ldr	r2, [pc, #116]	; (8008098 <_printf_float+0x2c0>)
 8008024:	2301      	movs	r3, #1
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	f43f af21 	beq.w	8007e74 <_printf_float+0x9c>
 8008032:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008036:	4313      	orrs	r3, r2
 8008038:	d102      	bne.n	8008040 <_printf_float+0x268>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	07d9      	lsls	r1, r3, #31
 800803e:	d5d8      	bpl.n	8007ff2 <_printf_float+0x21a>
 8008040:	4653      	mov	r3, sl
 8008042:	465a      	mov	r2, fp
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	47b8      	blx	r7
 800804a:	3001      	adds	r0, #1
 800804c:	f43f af12 	beq.w	8007e74 <_printf_float+0x9c>
 8008050:	f04f 0900 	mov.w	r9, #0
 8008054:	f104 0a1a 	add.w	sl, r4, #26
 8008058:	9b07      	ldr	r3, [sp, #28]
 800805a:	425b      	negs	r3, r3
 800805c:	454b      	cmp	r3, r9
 800805e:	dc01      	bgt.n	8008064 <_printf_float+0x28c>
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	e795      	b.n	8007f90 <_printf_float+0x1b8>
 8008064:	2301      	movs	r3, #1
 8008066:	4652      	mov	r2, sl
 8008068:	4631      	mov	r1, r6
 800806a:	4628      	mov	r0, r5
 800806c:	47b8      	blx	r7
 800806e:	3001      	adds	r0, #1
 8008070:	f43f af00 	beq.w	8007e74 <_printf_float+0x9c>
 8008074:	f109 0901 	add.w	r9, r9, #1
 8008078:	e7ee      	b.n	8008058 <_printf_float+0x280>
 800807a:	bf00      	nop
 800807c:	f3af 8000 	nop.w
 8008080:	ffffffff 	.word	0xffffffff
 8008084:	7fefffff 	.word	0x7fefffff
 8008088:	0800c6cc 	.word	0x0800c6cc
 800808c:	0800c6d0 	.word	0x0800c6d0
 8008090:	0800c6d8 	.word	0x0800c6d8
 8008094:	0800c6d4 	.word	0x0800c6d4
 8008098:	0800c901 	.word	0x0800c901
 800809c:	9a08      	ldr	r2, [sp, #32]
 800809e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080a0:	429a      	cmp	r2, r3
 80080a2:	bfa8      	it	ge
 80080a4:	461a      	movge	r2, r3
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	4691      	mov	r9, r2
 80080aa:	dc38      	bgt.n	800811e <_printf_float+0x346>
 80080ac:	2300      	movs	r3, #0
 80080ae:	9305      	str	r3, [sp, #20]
 80080b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080b4:	f104 021a 	add.w	r2, r4, #26
 80080b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080ba:	9905      	ldr	r1, [sp, #20]
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	eba3 0309 	sub.w	r3, r3, r9
 80080c2:	428b      	cmp	r3, r1
 80080c4:	dc33      	bgt.n	800812e <_printf_float+0x356>
 80080c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	db3c      	blt.n	8008148 <_printf_float+0x370>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	07da      	lsls	r2, r3, #31
 80080d2:	d439      	bmi.n	8008148 <_printf_float+0x370>
 80080d4:	9b08      	ldr	r3, [sp, #32]
 80080d6:	9a04      	ldr	r2, [sp, #16]
 80080d8:	9907      	ldr	r1, [sp, #28]
 80080da:	1a9a      	subs	r2, r3, r2
 80080dc:	eba3 0901 	sub.w	r9, r3, r1
 80080e0:	4591      	cmp	r9, r2
 80080e2:	bfa8      	it	ge
 80080e4:	4691      	movge	r9, r2
 80080e6:	f1b9 0f00 	cmp.w	r9, #0
 80080ea:	dc35      	bgt.n	8008158 <_printf_float+0x380>
 80080ec:	f04f 0800 	mov.w	r8, #0
 80080f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080f4:	f104 0a1a 	add.w	sl, r4, #26
 80080f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80080fc:	1a9b      	subs	r3, r3, r2
 80080fe:	eba3 0309 	sub.w	r3, r3, r9
 8008102:	4543      	cmp	r3, r8
 8008104:	f77f af75 	ble.w	8007ff2 <_printf_float+0x21a>
 8008108:	2301      	movs	r3, #1
 800810a:	4652      	mov	r2, sl
 800810c:	4631      	mov	r1, r6
 800810e:	4628      	mov	r0, r5
 8008110:	47b8      	blx	r7
 8008112:	3001      	adds	r0, #1
 8008114:	f43f aeae 	beq.w	8007e74 <_printf_float+0x9c>
 8008118:	f108 0801 	add.w	r8, r8, #1
 800811c:	e7ec      	b.n	80080f8 <_printf_float+0x320>
 800811e:	4613      	mov	r3, r2
 8008120:	4631      	mov	r1, r6
 8008122:	4642      	mov	r2, r8
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	d1bf      	bne.n	80080ac <_printf_float+0x2d4>
 800812c:	e6a2      	b.n	8007e74 <_printf_float+0x9c>
 800812e:	2301      	movs	r3, #1
 8008130:	4631      	mov	r1, r6
 8008132:	4628      	mov	r0, r5
 8008134:	9204      	str	r2, [sp, #16]
 8008136:	47b8      	blx	r7
 8008138:	3001      	adds	r0, #1
 800813a:	f43f ae9b 	beq.w	8007e74 <_printf_float+0x9c>
 800813e:	9b05      	ldr	r3, [sp, #20]
 8008140:	9a04      	ldr	r2, [sp, #16]
 8008142:	3301      	adds	r3, #1
 8008144:	9305      	str	r3, [sp, #20]
 8008146:	e7b7      	b.n	80080b8 <_printf_float+0x2e0>
 8008148:	4653      	mov	r3, sl
 800814a:	465a      	mov	r2, fp
 800814c:	4631      	mov	r1, r6
 800814e:	4628      	mov	r0, r5
 8008150:	47b8      	blx	r7
 8008152:	3001      	adds	r0, #1
 8008154:	d1be      	bne.n	80080d4 <_printf_float+0x2fc>
 8008156:	e68d      	b.n	8007e74 <_printf_float+0x9c>
 8008158:	9a04      	ldr	r2, [sp, #16]
 800815a:	464b      	mov	r3, r9
 800815c:	4442      	add	r2, r8
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	47b8      	blx	r7
 8008164:	3001      	adds	r0, #1
 8008166:	d1c1      	bne.n	80080ec <_printf_float+0x314>
 8008168:	e684      	b.n	8007e74 <_printf_float+0x9c>
 800816a:	9a08      	ldr	r2, [sp, #32]
 800816c:	2a01      	cmp	r2, #1
 800816e:	dc01      	bgt.n	8008174 <_printf_float+0x39c>
 8008170:	07db      	lsls	r3, r3, #31
 8008172:	d537      	bpl.n	80081e4 <_printf_float+0x40c>
 8008174:	2301      	movs	r3, #1
 8008176:	4642      	mov	r2, r8
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f ae78 	beq.w	8007e74 <_printf_float+0x9c>
 8008184:	4653      	mov	r3, sl
 8008186:	465a      	mov	r2, fp
 8008188:	4631      	mov	r1, r6
 800818a:	4628      	mov	r0, r5
 800818c:	47b8      	blx	r7
 800818e:	3001      	adds	r0, #1
 8008190:	f43f ae70 	beq.w	8007e74 <_printf_float+0x9c>
 8008194:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008198:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800819c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a0:	d01b      	beq.n	80081da <_printf_float+0x402>
 80081a2:	9b08      	ldr	r3, [sp, #32]
 80081a4:	f108 0201 	add.w	r2, r8, #1
 80081a8:	3b01      	subs	r3, #1
 80081aa:	4631      	mov	r1, r6
 80081ac:	4628      	mov	r0, r5
 80081ae:	47b8      	blx	r7
 80081b0:	3001      	adds	r0, #1
 80081b2:	d10e      	bne.n	80081d2 <_printf_float+0x3fa>
 80081b4:	e65e      	b.n	8007e74 <_printf_float+0x9c>
 80081b6:	2301      	movs	r3, #1
 80081b8:	464a      	mov	r2, r9
 80081ba:	4631      	mov	r1, r6
 80081bc:	4628      	mov	r0, r5
 80081be:	47b8      	blx	r7
 80081c0:	3001      	adds	r0, #1
 80081c2:	f43f ae57 	beq.w	8007e74 <_printf_float+0x9c>
 80081c6:	f108 0801 	add.w	r8, r8, #1
 80081ca:	9b08      	ldr	r3, [sp, #32]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	4543      	cmp	r3, r8
 80081d0:	dcf1      	bgt.n	80081b6 <_printf_float+0x3de>
 80081d2:	9b04      	ldr	r3, [sp, #16]
 80081d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081d8:	e6db      	b.n	8007f92 <_printf_float+0x1ba>
 80081da:	f04f 0800 	mov.w	r8, #0
 80081de:	f104 091a 	add.w	r9, r4, #26
 80081e2:	e7f2      	b.n	80081ca <_printf_float+0x3f2>
 80081e4:	2301      	movs	r3, #1
 80081e6:	4642      	mov	r2, r8
 80081e8:	e7df      	b.n	80081aa <_printf_float+0x3d2>
 80081ea:	2301      	movs	r3, #1
 80081ec:	464a      	mov	r2, r9
 80081ee:	4631      	mov	r1, r6
 80081f0:	4628      	mov	r0, r5
 80081f2:	47b8      	blx	r7
 80081f4:	3001      	adds	r0, #1
 80081f6:	f43f ae3d 	beq.w	8007e74 <_printf_float+0x9c>
 80081fa:	f108 0801 	add.w	r8, r8, #1
 80081fe:	68e3      	ldr	r3, [r4, #12]
 8008200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008202:	1a5b      	subs	r3, r3, r1
 8008204:	4543      	cmp	r3, r8
 8008206:	dcf0      	bgt.n	80081ea <_printf_float+0x412>
 8008208:	e6f7      	b.n	8007ffa <_printf_float+0x222>
 800820a:	f04f 0800 	mov.w	r8, #0
 800820e:	f104 0919 	add.w	r9, r4, #25
 8008212:	e7f4      	b.n	80081fe <_printf_float+0x426>

08008214 <_printf_common>:
 8008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	4616      	mov	r6, r2
 800821a:	4699      	mov	r9, r3
 800821c:	688a      	ldr	r2, [r1, #8]
 800821e:	690b      	ldr	r3, [r1, #16]
 8008220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008224:	4293      	cmp	r3, r2
 8008226:	bfb8      	it	lt
 8008228:	4613      	movlt	r3, r2
 800822a:	6033      	str	r3, [r6, #0]
 800822c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008230:	4607      	mov	r7, r0
 8008232:	460c      	mov	r4, r1
 8008234:	b10a      	cbz	r2, 800823a <_printf_common+0x26>
 8008236:	3301      	adds	r3, #1
 8008238:	6033      	str	r3, [r6, #0]
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	0699      	lsls	r1, r3, #26
 800823e:	bf42      	ittt	mi
 8008240:	6833      	ldrmi	r3, [r6, #0]
 8008242:	3302      	addmi	r3, #2
 8008244:	6033      	strmi	r3, [r6, #0]
 8008246:	6825      	ldr	r5, [r4, #0]
 8008248:	f015 0506 	ands.w	r5, r5, #6
 800824c:	d106      	bne.n	800825c <_printf_common+0x48>
 800824e:	f104 0a19 	add.w	sl, r4, #25
 8008252:	68e3      	ldr	r3, [r4, #12]
 8008254:	6832      	ldr	r2, [r6, #0]
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	42ab      	cmp	r3, r5
 800825a:	dc26      	bgt.n	80082aa <_printf_common+0x96>
 800825c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008260:	1e13      	subs	r3, r2, #0
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	bf18      	it	ne
 8008266:	2301      	movne	r3, #1
 8008268:	0692      	lsls	r2, r2, #26
 800826a:	d42b      	bmi.n	80082c4 <_printf_common+0xb0>
 800826c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008270:	4649      	mov	r1, r9
 8008272:	4638      	mov	r0, r7
 8008274:	47c0      	blx	r8
 8008276:	3001      	adds	r0, #1
 8008278:	d01e      	beq.n	80082b8 <_printf_common+0xa4>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	68e5      	ldr	r5, [r4, #12]
 800827e:	6832      	ldr	r2, [r6, #0]
 8008280:	f003 0306 	and.w	r3, r3, #6
 8008284:	2b04      	cmp	r3, #4
 8008286:	bf08      	it	eq
 8008288:	1aad      	subeq	r5, r5, r2
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	6922      	ldr	r2, [r4, #16]
 800828e:	bf0c      	ite	eq
 8008290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008294:	2500      	movne	r5, #0
 8008296:	4293      	cmp	r3, r2
 8008298:	bfc4      	itt	gt
 800829a:	1a9b      	subgt	r3, r3, r2
 800829c:	18ed      	addgt	r5, r5, r3
 800829e:	2600      	movs	r6, #0
 80082a0:	341a      	adds	r4, #26
 80082a2:	42b5      	cmp	r5, r6
 80082a4:	d11a      	bne.n	80082dc <_printf_common+0xc8>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e008      	b.n	80082bc <_printf_common+0xa8>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4652      	mov	r2, sl
 80082ae:	4649      	mov	r1, r9
 80082b0:	4638      	mov	r0, r7
 80082b2:	47c0      	blx	r8
 80082b4:	3001      	adds	r0, #1
 80082b6:	d103      	bne.n	80082c0 <_printf_common+0xac>
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	3501      	adds	r5, #1
 80082c2:	e7c6      	b.n	8008252 <_printf_common+0x3e>
 80082c4:	18e1      	adds	r1, r4, r3
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	2030      	movs	r0, #48	; 0x30
 80082ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082ce:	4422      	add	r2, r4
 80082d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082d8:	3302      	adds	r3, #2
 80082da:	e7c7      	b.n	800826c <_printf_common+0x58>
 80082dc:	2301      	movs	r3, #1
 80082de:	4622      	mov	r2, r4
 80082e0:	4649      	mov	r1, r9
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c0      	blx	r8
 80082e6:	3001      	adds	r0, #1
 80082e8:	d0e6      	beq.n	80082b8 <_printf_common+0xa4>
 80082ea:	3601      	adds	r6, #1
 80082ec:	e7d9      	b.n	80082a2 <_printf_common+0x8e>
	...

080082f0 <_printf_i>:
 80082f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	7e0f      	ldrb	r7, [r1, #24]
 80082f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082f8:	2f78      	cmp	r7, #120	; 0x78
 80082fa:	4691      	mov	r9, r2
 80082fc:	4680      	mov	r8, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	469a      	mov	sl, r3
 8008302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008306:	d807      	bhi.n	8008318 <_printf_i+0x28>
 8008308:	2f62      	cmp	r7, #98	; 0x62
 800830a:	d80a      	bhi.n	8008322 <_printf_i+0x32>
 800830c:	2f00      	cmp	r7, #0
 800830e:	f000 80d8 	beq.w	80084c2 <_printf_i+0x1d2>
 8008312:	2f58      	cmp	r7, #88	; 0x58
 8008314:	f000 80a3 	beq.w	800845e <_printf_i+0x16e>
 8008318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800831c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008320:	e03a      	b.n	8008398 <_printf_i+0xa8>
 8008322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008326:	2b15      	cmp	r3, #21
 8008328:	d8f6      	bhi.n	8008318 <_printf_i+0x28>
 800832a:	a101      	add	r1, pc, #4	; (adr r1, 8008330 <_printf_i+0x40>)
 800832c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008330:	08008389 	.word	0x08008389
 8008334:	0800839d 	.word	0x0800839d
 8008338:	08008319 	.word	0x08008319
 800833c:	08008319 	.word	0x08008319
 8008340:	08008319 	.word	0x08008319
 8008344:	08008319 	.word	0x08008319
 8008348:	0800839d 	.word	0x0800839d
 800834c:	08008319 	.word	0x08008319
 8008350:	08008319 	.word	0x08008319
 8008354:	08008319 	.word	0x08008319
 8008358:	08008319 	.word	0x08008319
 800835c:	080084a9 	.word	0x080084a9
 8008360:	080083cd 	.word	0x080083cd
 8008364:	0800848b 	.word	0x0800848b
 8008368:	08008319 	.word	0x08008319
 800836c:	08008319 	.word	0x08008319
 8008370:	080084cb 	.word	0x080084cb
 8008374:	08008319 	.word	0x08008319
 8008378:	080083cd 	.word	0x080083cd
 800837c:	08008319 	.word	0x08008319
 8008380:	08008319 	.word	0x08008319
 8008384:	08008493 	.word	0x08008493
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	1d1a      	adds	r2, r3, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	602a      	str	r2, [r5, #0]
 8008390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008398:	2301      	movs	r3, #1
 800839a:	e0a3      	b.n	80084e4 <_printf_i+0x1f4>
 800839c:	6820      	ldr	r0, [r4, #0]
 800839e:	6829      	ldr	r1, [r5, #0]
 80083a0:	0606      	lsls	r6, r0, #24
 80083a2:	f101 0304 	add.w	r3, r1, #4
 80083a6:	d50a      	bpl.n	80083be <_printf_i+0xce>
 80083a8:	680e      	ldr	r6, [r1, #0]
 80083aa:	602b      	str	r3, [r5, #0]
 80083ac:	2e00      	cmp	r6, #0
 80083ae:	da03      	bge.n	80083b8 <_printf_i+0xc8>
 80083b0:	232d      	movs	r3, #45	; 0x2d
 80083b2:	4276      	negs	r6, r6
 80083b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083b8:	485e      	ldr	r0, [pc, #376]	; (8008534 <_printf_i+0x244>)
 80083ba:	230a      	movs	r3, #10
 80083bc:	e019      	b.n	80083f2 <_printf_i+0x102>
 80083be:	680e      	ldr	r6, [r1, #0]
 80083c0:	602b      	str	r3, [r5, #0]
 80083c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083c6:	bf18      	it	ne
 80083c8:	b236      	sxthne	r6, r6
 80083ca:	e7ef      	b.n	80083ac <_printf_i+0xbc>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	6820      	ldr	r0, [r4, #0]
 80083d0:	1d19      	adds	r1, r3, #4
 80083d2:	6029      	str	r1, [r5, #0]
 80083d4:	0601      	lsls	r1, r0, #24
 80083d6:	d501      	bpl.n	80083dc <_printf_i+0xec>
 80083d8:	681e      	ldr	r6, [r3, #0]
 80083da:	e002      	b.n	80083e2 <_printf_i+0xf2>
 80083dc:	0646      	lsls	r6, r0, #25
 80083de:	d5fb      	bpl.n	80083d8 <_printf_i+0xe8>
 80083e0:	881e      	ldrh	r6, [r3, #0]
 80083e2:	4854      	ldr	r0, [pc, #336]	; (8008534 <_printf_i+0x244>)
 80083e4:	2f6f      	cmp	r7, #111	; 0x6f
 80083e6:	bf0c      	ite	eq
 80083e8:	2308      	moveq	r3, #8
 80083ea:	230a      	movne	r3, #10
 80083ec:	2100      	movs	r1, #0
 80083ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083f2:	6865      	ldr	r5, [r4, #4]
 80083f4:	60a5      	str	r5, [r4, #8]
 80083f6:	2d00      	cmp	r5, #0
 80083f8:	bfa2      	ittt	ge
 80083fa:	6821      	ldrge	r1, [r4, #0]
 80083fc:	f021 0104 	bicge.w	r1, r1, #4
 8008400:	6021      	strge	r1, [r4, #0]
 8008402:	b90e      	cbnz	r6, 8008408 <_printf_i+0x118>
 8008404:	2d00      	cmp	r5, #0
 8008406:	d04d      	beq.n	80084a4 <_printf_i+0x1b4>
 8008408:	4615      	mov	r5, r2
 800840a:	fbb6 f1f3 	udiv	r1, r6, r3
 800840e:	fb03 6711 	mls	r7, r3, r1, r6
 8008412:	5dc7      	ldrb	r7, [r0, r7]
 8008414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008418:	4637      	mov	r7, r6
 800841a:	42bb      	cmp	r3, r7
 800841c:	460e      	mov	r6, r1
 800841e:	d9f4      	bls.n	800840a <_printf_i+0x11a>
 8008420:	2b08      	cmp	r3, #8
 8008422:	d10b      	bne.n	800843c <_printf_i+0x14c>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	07de      	lsls	r6, r3, #31
 8008428:	d508      	bpl.n	800843c <_printf_i+0x14c>
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	6861      	ldr	r1, [r4, #4]
 800842e:	4299      	cmp	r1, r3
 8008430:	bfde      	ittt	le
 8008432:	2330      	movle	r3, #48	; 0x30
 8008434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008438:	f105 35ff 	addle.w	r5, r5, #4294967295
 800843c:	1b52      	subs	r2, r2, r5
 800843e:	6122      	str	r2, [r4, #16]
 8008440:	f8cd a000 	str.w	sl, [sp]
 8008444:	464b      	mov	r3, r9
 8008446:	aa03      	add	r2, sp, #12
 8008448:	4621      	mov	r1, r4
 800844a:	4640      	mov	r0, r8
 800844c:	f7ff fee2 	bl	8008214 <_printf_common>
 8008450:	3001      	adds	r0, #1
 8008452:	d14c      	bne.n	80084ee <_printf_i+0x1fe>
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	b004      	add	sp, #16
 800845a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800845e:	4835      	ldr	r0, [pc, #212]	; (8008534 <_printf_i+0x244>)
 8008460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008464:	6829      	ldr	r1, [r5, #0]
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f851 6b04 	ldr.w	r6, [r1], #4
 800846c:	6029      	str	r1, [r5, #0]
 800846e:	061d      	lsls	r5, r3, #24
 8008470:	d514      	bpl.n	800849c <_printf_i+0x1ac>
 8008472:	07df      	lsls	r7, r3, #31
 8008474:	bf44      	itt	mi
 8008476:	f043 0320 	orrmi.w	r3, r3, #32
 800847a:	6023      	strmi	r3, [r4, #0]
 800847c:	b91e      	cbnz	r6, 8008486 <_printf_i+0x196>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	f023 0320 	bic.w	r3, r3, #32
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	2310      	movs	r3, #16
 8008488:	e7b0      	b.n	80083ec <_printf_i+0xfc>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	f043 0320 	orr.w	r3, r3, #32
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	2378      	movs	r3, #120	; 0x78
 8008494:	4828      	ldr	r0, [pc, #160]	; (8008538 <_printf_i+0x248>)
 8008496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800849a:	e7e3      	b.n	8008464 <_printf_i+0x174>
 800849c:	0659      	lsls	r1, r3, #25
 800849e:	bf48      	it	mi
 80084a0:	b2b6      	uxthmi	r6, r6
 80084a2:	e7e6      	b.n	8008472 <_printf_i+0x182>
 80084a4:	4615      	mov	r5, r2
 80084a6:	e7bb      	b.n	8008420 <_printf_i+0x130>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	6826      	ldr	r6, [r4, #0]
 80084ac:	6961      	ldr	r1, [r4, #20]
 80084ae:	1d18      	adds	r0, r3, #4
 80084b0:	6028      	str	r0, [r5, #0]
 80084b2:	0635      	lsls	r5, r6, #24
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	d501      	bpl.n	80084bc <_printf_i+0x1cc>
 80084b8:	6019      	str	r1, [r3, #0]
 80084ba:	e002      	b.n	80084c2 <_printf_i+0x1d2>
 80084bc:	0670      	lsls	r0, r6, #25
 80084be:	d5fb      	bpl.n	80084b8 <_printf_i+0x1c8>
 80084c0:	8019      	strh	r1, [r3, #0]
 80084c2:	2300      	movs	r3, #0
 80084c4:	6123      	str	r3, [r4, #16]
 80084c6:	4615      	mov	r5, r2
 80084c8:	e7ba      	b.n	8008440 <_printf_i+0x150>
 80084ca:	682b      	ldr	r3, [r5, #0]
 80084cc:	1d1a      	adds	r2, r3, #4
 80084ce:	602a      	str	r2, [r5, #0]
 80084d0:	681d      	ldr	r5, [r3, #0]
 80084d2:	6862      	ldr	r2, [r4, #4]
 80084d4:	2100      	movs	r1, #0
 80084d6:	4628      	mov	r0, r5
 80084d8:	f7f7 feba 	bl	8000250 <memchr>
 80084dc:	b108      	cbz	r0, 80084e2 <_printf_i+0x1f2>
 80084de:	1b40      	subs	r0, r0, r5
 80084e0:	6060      	str	r0, [r4, #4]
 80084e2:	6863      	ldr	r3, [r4, #4]
 80084e4:	6123      	str	r3, [r4, #16]
 80084e6:	2300      	movs	r3, #0
 80084e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ec:	e7a8      	b.n	8008440 <_printf_i+0x150>
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	462a      	mov	r2, r5
 80084f2:	4649      	mov	r1, r9
 80084f4:	4640      	mov	r0, r8
 80084f6:	47d0      	blx	sl
 80084f8:	3001      	adds	r0, #1
 80084fa:	d0ab      	beq.n	8008454 <_printf_i+0x164>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	079b      	lsls	r3, r3, #30
 8008500:	d413      	bmi.n	800852a <_printf_i+0x23a>
 8008502:	68e0      	ldr	r0, [r4, #12]
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	4298      	cmp	r0, r3
 8008508:	bfb8      	it	lt
 800850a:	4618      	movlt	r0, r3
 800850c:	e7a4      	b.n	8008458 <_printf_i+0x168>
 800850e:	2301      	movs	r3, #1
 8008510:	4632      	mov	r2, r6
 8008512:	4649      	mov	r1, r9
 8008514:	4640      	mov	r0, r8
 8008516:	47d0      	blx	sl
 8008518:	3001      	adds	r0, #1
 800851a:	d09b      	beq.n	8008454 <_printf_i+0x164>
 800851c:	3501      	adds	r5, #1
 800851e:	68e3      	ldr	r3, [r4, #12]
 8008520:	9903      	ldr	r1, [sp, #12]
 8008522:	1a5b      	subs	r3, r3, r1
 8008524:	42ab      	cmp	r3, r5
 8008526:	dcf2      	bgt.n	800850e <_printf_i+0x21e>
 8008528:	e7eb      	b.n	8008502 <_printf_i+0x212>
 800852a:	2500      	movs	r5, #0
 800852c:	f104 0619 	add.w	r6, r4, #25
 8008530:	e7f5      	b.n	800851e <_printf_i+0x22e>
 8008532:	bf00      	nop
 8008534:	0800c6dc 	.word	0x0800c6dc
 8008538:	0800c6ed 	.word	0x0800c6ed

0800853c <modf>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	ed2d 8b02 	vpush	{d8}
 8008542:	eeb0 8b40 	vmov.f64	d8, d0
 8008546:	ee18 5a90 	vmov	r5, s17
 800854a:	4604      	mov	r4, r0
 800854c:	f3c5 500a 	ubfx	r0, r5, #20, #11
 8008550:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 8008554:	2b13      	cmp	r3, #19
 8008556:	ee10 1a10 	vmov	r1, s0
 800855a:	dc23      	bgt.n	80085a4 <modf+0x68>
 800855c:	2b00      	cmp	r3, #0
 800855e:	da09      	bge.n	8008574 <modf+0x38>
 8008560:	2200      	movs	r2, #0
 8008562:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008566:	e9c4 2300 	strd	r2, r3, [r4]
 800856a:	eeb0 0b48 	vmov.f64	d0, d8
 800856e:	ecbd 8b02 	vpop	{d8}
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	481d      	ldr	r0, [pc, #116]	; (80085ec <modf+0xb0>)
 8008576:	4118      	asrs	r0, r3
 8008578:	ea05 0300 	and.w	r3, r5, r0
 800857c:	4319      	orrs	r1, r3
 800857e:	d107      	bne.n	8008590 <modf+0x54>
 8008580:	ed84 0b00 	vstr	d0, [r4]
 8008584:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008588:	460a      	mov	r2, r1
 800858a:	ec43 2b18 	vmov	d8, r2, r3
 800858e:	e7ec      	b.n	800856a <modf+0x2e>
 8008590:	2200      	movs	r2, #0
 8008592:	ea25 0300 	bic.w	r3, r5, r0
 8008596:	ec43 2b17 	vmov	d7, r2, r3
 800859a:	e9c4 2300 	strd	r2, r3, [r4]
 800859e:	ee38 8b47 	vsub.f64	d8, d8, d7
 80085a2:	e7e2      	b.n	800856a <modf+0x2e>
 80085a4:	2b33      	cmp	r3, #51	; 0x33
 80085a6:	dd0d      	ble.n	80085c4 <modf+0x88>
 80085a8:	ed84 0b00 	vstr	d0, [r4]
 80085ac:	f001 ff16 	bl	800a3dc <__fpclassifyd>
 80085b0:	b920      	cbnz	r0, 80085bc <modf+0x80>
 80085b2:	ee38 8b08 	vadd.f64	d8, d8, d8
 80085b6:	ed84 8b00 	vstr	d8, [r4]
 80085ba:	e7d6      	b.n	800856a <modf+0x2e>
 80085bc:	2200      	movs	r2, #0
 80085be:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80085c2:	e7e2      	b.n	800858a <modf+0x4e>
 80085c4:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295
 80085cc:	40d8      	lsrs	r0, r3
 80085ce:	ea11 0600 	ands.w	r6, r1, r0
 80085d2:	d105      	bne.n	80085e0 <modf+0xa4>
 80085d4:	ed84 0b00 	vstr	d0, [r4]
 80085d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80085dc:	4632      	mov	r2, r6
 80085de:	e7d4      	b.n	800858a <modf+0x4e>
 80085e0:	ee18 3a90 	vmov	r3, s17
 80085e4:	ea21 0200 	bic.w	r2, r1, r0
 80085e8:	e7d5      	b.n	8008596 <modf+0x5a>
 80085ea:	bf00      	nop
 80085ec:	000fffff 	.word	0x000fffff

080085f0 <_sbrk_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4d06      	ldr	r5, [pc, #24]	; (800860c <_sbrk_r+0x1c>)
 80085f4:	2300      	movs	r3, #0
 80085f6:	4604      	mov	r4, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	f002 fe06 	bl	800b20c <_sbrk>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d102      	bne.n	800860a <_sbrk_r+0x1a>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	b103      	cbz	r3, 800860a <_sbrk_r+0x1a>
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	bd38      	pop	{r3, r4, r5, pc}
 800860c:	20004d88 	.word	0x20004d88

08008610 <siprintf>:
 8008610:	b40e      	push	{r1, r2, r3}
 8008612:	b500      	push	{lr}
 8008614:	b09c      	sub	sp, #112	; 0x70
 8008616:	ab1d      	add	r3, sp, #116	; 0x74
 8008618:	9002      	str	r0, [sp, #8]
 800861a:	9006      	str	r0, [sp, #24]
 800861c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008620:	4809      	ldr	r0, [pc, #36]	; (8008648 <siprintf+0x38>)
 8008622:	9107      	str	r1, [sp, #28]
 8008624:	9104      	str	r1, [sp, #16]
 8008626:	4909      	ldr	r1, [pc, #36]	; (800864c <siprintf+0x3c>)
 8008628:	f853 2b04 	ldr.w	r2, [r3], #4
 800862c:	9105      	str	r1, [sp, #20]
 800862e:	6800      	ldr	r0, [r0, #0]
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	a902      	add	r1, sp, #8
 8008634:	f001 fa9c 	bl	8009b70 <_svfiprintf_r>
 8008638:	9b02      	ldr	r3, [sp, #8]
 800863a:	2200      	movs	r2, #0
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	b01c      	add	sp, #112	; 0x70
 8008640:	f85d eb04 	ldr.w	lr, [sp], #4
 8008644:	b003      	add	sp, #12
 8008646:	4770      	bx	lr
 8008648:	20000028 	.word	0x20000028
 800864c:	ffff0208 	.word	0xffff0208

08008650 <siscanf>:
 8008650:	b40e      	push	{r1, r2, r3}
 8008652:	b510      	push	{r4, lr}
 8008654:	b09f      	sub	sp, #124	; 0x7c
 8008656:	ac21      	add	r4, sp, #132	; 0x84
 8008658:	f44f 7101 	mov.w	r1, #516	; 0x204
 800865c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008660:	9201      	str	r2, [sp, #4]
 8008662:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008666:	9004      	str	r0, [sp, #16]
 8008668:	9008      	str	r0, [sp, #32]
 800866a:	f7f7 fde9 	bl	8000240 <strlen>
 800866e:	4b0c      	ldr	r3, [pc, #48]	; (80086a0 <siscanf+0x50>)
 8008670:	9005      	str	r0, [sp, #20]
 8008672:	9009      	str	r0, [sp, #36]	; 0x24
 8008674:	930d      	str	r3, [sp, #52]	; 0x34
 8008676:	480b      	ldr	r0, [pc, #44]	; (80086a4 <siscanf+0x54>)
 8008678:	9a01      	ldr	r2, [sp, #4]
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	9403      	str	r4, [sp, #12]
 800867e:	2300      	movs	r3, #0
 8008680:	9311      	str	r3, [sp, #68]	; 0x44
 8008682:	9316      	str	r3, [sp, #88]	; 0x58
 8008684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008688:	f8ad 301e 	strh.w	r3, [sp, #30]
 800868c:	a904      	add	r1, sp, #16
 800868e:	4623      	mov	r3, r4
 8008690:	f001 fbc8 	bl	8009e24 <__ssvfiscanf_r>
 8008694:	b01f      	add	sp, #124	; 0x7c
 8008696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800869a:	b003      	add	sp, #12
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	080086cb 	.word	0x080086cb
 80086a4:	20000028 	.word	0x20000028

080086a8 <__sread>:
 80086a8:	b510      	push	{r4, lr}
 80086aa:	460c      	mov	r4, r1
 80086ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b0:	f001 fe82 	bl	800a3b8 <_read_r>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	bfab      	itete	ge
 80086b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086ba:	89a3      	ldrhlt	r3, [r4, #12]
 80086bc:	181b      	addge	r3, r3, r0
 80086be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086c2:	bfac      	ite	ge
 80086c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80086c6:	81a3      	strhlt	r3, [r4, #12]
 80086c8:	bd10      	pop	{r4, pc}

080086ca <__seofread>:
 80086ca:	2000      	movs	r0, #0
 80086cc:	4770      	bx	lr

080086ce <__swrite>:
 80086ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d2:	461f      	mov	r7, r3
 80086d4:	898b      	ldrh	r3, [r1, #12]
 80086d6:	05db      	lsls	r3, r3, #23
 80086d8:	4605      	mov	r5, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	4616      	mov	r6, r2
 80086de:	d505      	bpl.n	80086ec <__swrite+0x1e>
 80086e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e4:	2302      	movs	r3, #2
 80086e6:	2200      	movs	r2, #0
 80086e8:	f000 fe44 	bl	8009374 <_lseek_r>
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086f6:	81a3      	strh	r3, [r4, #12]
 80086f8:	4632      	mov	r2, r6
 80086fa:	463b      	mov	r3, r7
 80086fc:	4628      	mov	r0, r5
 80086fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008702:	f000 b817 	b.w	8008734 <_write_r>

08008706 <__sseek>:
 8008706:	b510      	push	{r4, lr}
 8008708:	460c      	mov	r4, r1
 800870a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870e:	f000 fe31 	bl	8009374 <_lseek_r>
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	bf15      	itete	ne
 8008718:	6560      	strne	r0, [r4, #84]	; 0x54
 800871a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800871e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008722:	81a3      	strheq	r3, [r4, #12]
 8008724:	bf18      	it	ne
 8008726:	81a3      	strhne	r3, [r4, #12]
 8008728:	bd10      	pop	{r4, pc}

0800872a <__sclose>:
 800872a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872e:	f000 b813 	b.w	8008758 <_close_r>
	...

08008734 <_write_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d07      	ldr	r5, [pc, #28]	; (8008754 <_write_r+0x20>)
 8008738:	4604      	mov	r4, r0
 800873a:	4608      	mov	r0, r1
 800873c:	4611      	mov	r1, r2
 800873e:	2200      	movs	r2, #0
 8008740:	602a      	str	r2, [r5, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	f002 fd70 	bl	800b228 <_write>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_write_r+0x1e>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_write_r+0x1e>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20004d88 	.word	0x20004d88

08008758 <_close_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d06      	ldr	r5, [pc, #24]	; (8008774 <_close_r+0x1c>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	f002 fd1a 	bl	800b19c <_close>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_close_r+0x1a>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_close_r+0x1a>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	20004d88 	.word	0x20004d88

08008778 <quorem>:
 8008778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	6903      	ldr	r3, [r0, #16]
 800877e:	690c      	ldr	r4, [r1, #16]
 8008780:	42a3      	cmp	r3, r4
 8008782:	4607      	mov	r7, r0
 8008784:	f2c0 8081 	blt.w	800888a <quorem+0x112>
 8008788:	3c01      	subs	r4, #1
 800878a:	f101 0814 	add.w	r8, r1, #20
 800878e:	f100 0514 	add.w	r5, r0, #20
 8008792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800879c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087a0:	3301      	adds	r3, #1
 80087a2:	429a      	cmp	r2, r3
 80087a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80087b0:	d331      	bcc.n	8008816 <quorem+0x9e>
 80087b2:	f04f 0e00 	mov.w	lr, #0
 80087b6:	4640      	mov	r0, r8
 80087b8:	46ac      	mov	ip, r5
 80087ba:	46f2      	mov	sl, lr
 80087bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80087c0:	b293      	uxth	r3, r2
 80087c2:	fb06 e303 	mla	r3, r6, r3, lr
 80087c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	ebaa 0303 	sub.w	r3, sl, r3
 80087d0:	f8dc a000 	ldr.w	sl, [ip]
 80087d4:	0c12      	lsrs	r2, r2, #16
 80087d6:	fa13 f38a 	uxtah	r3, r3, sl
 80087da:	fb06 e202 	mla	r2, r6, r2, lr
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	9b00      	ldr	r3, [sp, #0]
 80087e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087e6:	b292      	uxth	r2, r2
 80087e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80087ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80087f4:	4581      	cmp	r9, r0
 80087f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087fa:	f84c 3b04 	str.w	r3, [ip], #4
 80087fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008802:	d2db      	bcs.n	80087bc <quorem+0x44>
 8008804:	f855 300b 	ldr.w	r3, [r5, fp]
 8008808:	b92b      	cbnz	r3, 8008816 <quorem+0x9e>
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	3b04      	subs	r3, #4
 800880e:	429d      	cmp	r5, r3
 8008810:	461a      	mov	r2, r3
 8008812:	d32e      	bcc.n	8008872 <quorem+0xfa>
 8008814:	613c      	str	r4, [r7, #16]
 8008816:	4638      	mov	r0, r7
 8008818:	f001 f84c 	bl	80098b4 <__mcmp>
 800881c:	2800      	cmp	r0, #0
 800881e:	db24      	blt.n	800886a <quorem+0xf2>
 8008820:	3601      	adds	r6, #1
 8008822:	4628      	mov	r0, r5
 8008824:	f04f 0c00 	mov.w	ip, #0
 8008828:	f858 2b04 	ldr.w	r2, [r8], #4
 800882c:	f8d0 e000 	ldr.w	lr, [r0]
 8008830:	b293      	uxth	r3, r2
 8008832:	ebac 0303 	sub.w	r3, ip, r3
 8008836:	0c12      	lsrs	r2, r2, #16
 8008838:	fa13 f38e 	uxtah	r3, r3, lr
 800883c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008840:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008844:	b29b      	uxth	r3, r3
 8008846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800884a:	45c1      	cmp	r9, r8
 800884c:	f840 3b04 	str.w	r3, [r0], #4
 8008850:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008854:	d2e8      	bcs.n	8008828 <quorem+0xb0>
 8008856:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800885a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800885e:	b922      	cbnz	r2, 800886a <quorem+0xf2>
 8008860:	3b04      	subs	r3, #4
 8008862:	429d      	cmp	r5, r3
 8008864:	461a      	mov	r2, r3
 8008866:	d30a      	bcc.n	800887e <quorem+0x106>
 8008868:	613c      	str	r4, [r7, #16]
 800886a:	4630      	mov	r0, r6
 800886c:	b003      	add	sp, #12
 800886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008872:	6812      	ldr	r2, [r2, #0]
 8008874:	3b04      	subs	r3, #4
 8008876:	2a00      	cmp	r2, #0
 8008878:	d1cc      	bne.n	8008814 <quorem+0x9c>
 800887a:	3c01      	subs	r4, #1
 800887c:	e7c7      	b.n	800880e <quorem+0x96>
 800887e:	6812      	ldr	r2, [r2, #0]
 8008880:	3b04      	subs	r3, #4
 8008882:	2a00      	cmp	r2, #0
 8008884:	d1f0      	bne.n	8008868 <quorem+0xf0>
 8008886:	3c01      	subs	r4, #1
 8008888:	e7eb      	b.n	8008862 <quorem+0xea>
 800888a:	2000      	movs	r0, #0
 800888c:	e7ee      	b.n	800886c <quorem+0xf4>
	...

08008890 <_dtoa_r>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	ed2d 8b02 	vpush	{d8}
 8008898:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800889a:	b091      	sub	sp, #68	; 0x44
 800889c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088a0:	ec59 8b10 	vmov	r8, r9, d0
 80088a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80088a6:	9106      	str	r1, [sp, #24]
 80088a8:	4606      	mov	r6, r0
 80088aa:	9208      	str	r2, [sp, #32]
 80088ac:	930c      	str	r3, [sp, #48]	; 0x30
 80088ae:	b975      	cbnz	r5, 80088ce <_dtoa_r+0x3e>
 80088b0:	2010      	movs	r0, #16
 80088b2:	f7ff f8e5 	bl	8007a80 <malloc>
 80088b6:	4602      	mov	r2, r0
 80088b8:	6270      	str	r0, [r6, #36]	; 0x24
 80088ba:	b920      	cbnz	r0, 80088c6 <_dtoa_r+0x36>
 80088bc:	4baa      	ldr	r3, [pc, #680]	; (8008b68 <_dtoa_r+0x2d8>)
 80088be:	21ea      	movs	r1, #234	; 0xea
 80088c0:	48aa      	ldr	r0, [pc, #680]	; (8008b6c <_dtoa_r+0x2dc>)
 80088c2:	f001 ff1f 	bl	800a704 <__assert_func>
 80088c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088ca:	6005      	str	r5, [r0, #0]
 80088cc:	60c5      	str	r5, [r0, #12]
 80088ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80088d0:	6819      	ldr	r1, [r3, #0]
 80088d2:	b151      	cbz	r1, 80088ea <_dtoa_r+0x5a>
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	604a      	str	r2, [r1, #4]
 80088d8:	2301      	movs	r3, #1
 80088da:	4093      	lsls	r3, r2
 80088dc:	608b      	str	r3, [r1, #8]
 80088de:	4630      	mov	r0, r6
 80088e0:	f000 fda6 	bl	8009430 <_Bfree>
 80088e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	f1b9 0300 	subs.w	r3, r9, #0
 80088ee:	bfbb      	ittet	lt
 80088f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088f4:	9303      	strlt	r3, [sp, #12]
 80088f6:	2300      	movge	r3, #0
 80088f8:	2201      	movlt	r2, #1
 80088fa:	bfac      	ite	ge
 80088fc:	6023      	strge	r3, [r4, #0]
 80088fe:	6022      	strlt	r2, [r4, #0]
 8008900:	4b9b      	ldr	r3, [pc, #620]	; (8008b70 <_dtoa_r+0x2e0>)
 8008902:	9c03      	ldr	r4, [sp, #12]
 8008904:	43a3      	bics	r3, r4
 8008906:	d11c      	bne.n	8008942 <_dtoa_r+0xb2>
 8008908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800890a:	f242 730f 	movw	r3, #9999	; 0x270f
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008914:	ea53 0308 	orrs.w	r3, r3, r8
 8008918:	f000 84fd 	beq.w	8009316 <_dtoa_r+0xa86>
 800891c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800891e:	b963      	cbnz	r3, 800893a <_dtoa_r+0xaa>
 8008920:	4b94      	ldr	r3, [pc, #592]	; (8008b74 <_dtoa_r+0x2e4>)
 8008922:	e01f      	b.n	8008964 <_dtoa_r+0xd4>
 8008924:	4b94      	ldr	r3, [pc, #592]	; (8008b78 <_dtoa_r+0x2e8>)
 8008926:	9301      	str	r3, [sp, #4]
 8008928:	3308      	adds	r3, #8
 800892a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	9801      	ldr	r0, [sp, #4]
 8008930:	b011      	add	sp, #68	; 0x44
 8008932:	ecbd 8b02 	vpop	{d8}
 8008936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893a:	4b8e      	ldr	r3, [pc, #568]	; (8008b74 <_dtoa_r+0x2e4>)
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	3303      	adds	r3, #3
 8008940:	e7f3      	b.n	800892a <_dtoa_r+0x9a>
 8008942:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008946:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800894a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800894e:	d10b      	bne.n	8008968 <_dtoa_r+0xd8>
 8008950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008952:	2301      	movs	r3, #1
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 84d9 	beq.w	8009310 <_dtoa_r+0xa80>
 800895e:	4887      	ldr	r0, [pc, #540]	; (8008b7c <_dtoa_r+0x2ec>)
 8008960:	6018      	str	r0, [r3, #0]
 8008962:	1e43      	subs	r3, r0, #1
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	e7e2      	b.n	800892e <_dtoa_r+0x9e>
 8008968:	a90f      	add	r1, sp, #60	; 0x3c
 800896a:	aa0e      	add	r2, sp, #56	; 0x38
 800896c:	4630      	mov	r0, r6
 800896e:	eeb0 0b48 	vmov.f64	d0, d8
 8008972:	f001 f845 	bl	8009a00 <__d2b>
 8008976:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800897a:	4605      	mov	r5, r0
 800897c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800897e:	2900      	cmp	r1, #0
 8008980:	d046      	beq.n	8008a10 <_dtoa_r+0x180>
 8008982:	ee18 4a90 	vmov	r4, s17
 8008986:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800898a:	ec53 2b18 	vmov	r2, r3, d8
 800898e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008992:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008996:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800899a:	2400      	movs	r4, #0
 800899c:	ec43 2b16 	vmov	d6, r2, r3
 80089a0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80089a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008b50 <_dtoa_r+0x2c0>
 80089a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80089ac:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008b58 <_dtoa_r+0x2c8>
 80089b0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80089b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008b60 <_dtoa_r+0x2d0>
 80089b8:	ee07 1a90 	vmov	s15, r1
 80089bc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80089c0:	eeb0 7b46 	vmov.f64	d7, d6
 80089c4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80089c8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80089cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80089d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d4:	ee16 ba90 	vmov	fp, s13
 80089d8:	940a      	str	r4, [sp, #40]	; 0x28
 80089da:	d508      	bpl.n	80089ee <_dtoa_r+0x15e>
 80089dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80089e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80089e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e8:	bf18      	it	ne
 80089ea:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80089ee:	f1bb 0f16 	cmp.w	fp, #22
 80089f2:	d82f      	bhi.n	8008a54 <_dtoa_r+0x1c4>
 80089f4:	4b62      	ldr	r3, [pc, #392]	; (8008b80 <_dtoa_r+0x2f0>)
 80089f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80089fa:	ed93 7b00 	vldr	d7, [r3]
 80089fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a06:	d501      	bpl.n	8008a0c <_dtoa_r+0x17c>
 8008a08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	e022      	b.n	8008a56 <_dtoa_r+0x1c6>
 8008a10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a12:	4401      	add	r1, r0
 8008a14:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	bfc1      	itttt	gt
 8008a1c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a20:	fa04 f303 	lslgt.w	r3, r4, r3
 8008a24:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008a28:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008a2c:	bfd6      	itet	le
 8008a2e:	f1c3 0320 	rsble	r3, r3, #32
 8008a32:	ea43 0808 	orrgt.w	r8, r3, r8
 8008a36:	fa08 f803 	lslle.w	r8, r8, r3
 8008a3a:	ee07 8a90 	vmov	s15, r8
 8008a3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008a42:	3901      	subs	r1, #1
 8008a44:	ee17 4a90 	vmov	r4, s15
 8008a48:	ec53 2b17 	vmov	r2, r3, d7
 8008a4c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008a50:	2401      	movs	r4, #1
 8008a52:	e7a3      	b.n	800899c <_dtoa_r+0x10c>
 8008a54:	2301      	movs	r3, #1
 8008a56:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a58:	1a43      	subs	r3, r0, r1
 8008a5a:	1e5a      	subs	r2, r3, #1
 8008a5c:	bf45      	ittet	mi
 8008a5e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008a62:	9304      	strmi	r3, [sp, #16]
 8008a64:	2300      	movpl	r3, #0
 8008a66:	2300      	movmi	r3, #0
 8008a68:	9205      	str	r2, [sp, #20]
 8008a6a:	bf54      	ite	pl
 8008a6c:	9304      	strpl	r3, [sp, #16]
 8008a6e:	9305      	strmi	r3, [sp, #20]
 8008a70:	f1bb 0f00 	cmp.w	fp, #0
 8008a74:	db18      	blt.n	8008aa8 <_dtoa_r+0x218>
 8008a76:	9b05      	ldr	r3, [sp, #20]
 8008a78:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008a7c:	445b      	add	r3, fp
 8008a7e:	9305      	str	r3, [sp, #20]
 8008a80:	2300      	movs	r3, #0
 8008a82:	9a06      	ldr	r2, [sp, #24]
 8008a84:	2a09      	cmp	r2, #9
 8008a86:	d849      	bhi.n	8008b1c <_dtoa_r+0x28c>
 8008a88:	2a05      	cmp	r2, #5
 8008a8a:	bfc4      	itt	gt
 8008a8c:	3a04      	subgt	r2, #4
 8008a8e:	9206      	strgt	r2, [sp, #24]
 8008a90:	9a06      	ldr	r2, [sp, #24]
 8008a92:	f1a2 0202 	sub.w	r2, r2, #2
 8008a96:	bfcc      	ite	gt
 8008a98:	2400      	movgt	r4, #0
 8008a9a:	2401      	movle	r4, #1
 8008a9c:	2a03      	cmp	r2, #3
 8008a9e:	d848      	bhi.n	8008b32 <_dtoa_r+0x2a2>
 8008aa0:	e8df f002 	tbb	[pc, r2]
 8008aa4:	3a2c2e0b 	.word	0x3a2c2e0b
 8008aa8:	9b04      	ldr	r3, [sp, #16]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	eba3 030b 	sub.w	r3, r3, fp
 8008ab0:	9304      	str	r3, [sp, #16]
 8008ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ab4:	f1cb 0300 	rsb	r3, fp, #0
 8008ab8:	e7e3      	b.n	8008a82 <_dtoa_r+0x1f2>
 8008aba:	2200      	movs	r2, #0
 8008abc:	9207      	str	r2, [sp, #28]
 8008abe:	9a08      	ldr	r2, [sp, #32]
 8008ac0:	2a00      	cmp	r2, #0
 8008ac2:	dc39      	bgt.n	8008b38 <_dtoa_r+0x2a8>
 8008ac4:	f04f 0a01 	mov.w	sl, #1
 8008ac8:	46d1      	mov	r9, sl
 8008aca:	4652      	mov	r2, sl
 8008acc:	f8cd a020 	str.w	sl, [sp, #32]
 8008ad0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	6079      	str	r1, [r7, #4]
 8008ad6:	2004      	movs	r0, #4
 8008ad8:	f100 0c14 	add.w	ip, r0, #20
 8008adc:	4594      	cmp	ip, r2
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	d92f      	bls.n	8008b42 <_dtoa_r+0x2b2>
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	930d      	str	r3, [sp, #52]	; 0x34
 8008ae6:	f000 fc63 	bl	80093b0 <_Balloc>
 8008aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aec:	9001      	str	r0, [sp, #4]
 8008aee:	4602      	mov	r2, r0
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d149      	bne.n	8008b88 <_dtoa_r+0x2f8>
 8008af4:	4b23      	ldr	r3, [pc, #140]	; (8008b84 <_dtoa_r+0x2f4>)
 8008af6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008afa:	e6e1      	b.n	80088c0 <_dtoa_r+0x30>
 8008afc:	2201      	movs	r2, #1
 8008afe:	e7dd      	b.n	8008abc <_dtoa_r+0x22c>
 8008b00:	2200      	movs	r2, #0
 8008b02:	9207      	str	r2, [sp, #28]
 8008b04:	9a08      	ldr	r2, [sp, #32]
 8008b06:	eb0b 0a02 	add.w	sl, fp, r2
 8008b0a:	f10a 0901 	add.w	r9, sl, #1
 8008b0e:	464a      	mov	r2, r9
 8008b10:	2a01      	cmp	r2, #1
 8008b12:	bfb8      	it	lt
 8008b14:	2201      	movlt	r2, #1
 8008b16:	e7db      	b.n	8008ad0 <_dtoa_r+0x240>
 8008b18:	2201      	movs	r2, #1
 8008b1a:	e7f2      	b.n	8008b02 <_dtoa_r+0x272>
 8008b1c:	2401      	movs	r4, #1
 8008b1e:	2200      	movs	r2, #0
 8008b20:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008b24:	f04f 3aff 	mov.w	sl, #4294967295
 8008b28:	2100      	movs	r1, #0
 8008b2a:	46d1      	mov	r9, sl
 8008b2c:	2212      	movs	r2, #18
 8008b2e:	9108      	str	r1, [sp, #32]
 8008b30:	e7ce      	b.n	8008ad0 <_dtoa_r+0x240>
 8008b32:	2201      	movs	r2, #1
 8008b34:	9207      	str	r2, [sp, #28]
 8008b36:	e7f5      	b.n	8008b24 <_dtoa_r+0x294>
 8008b38:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008b3c:	46d1      	mov	r9, sl
 8008b3e:	4652      	mov	r2, sl
 8008b40:	e7c6      	b.n	8008ad0 <_dtoa_r+0x240>
 8008b42:	3101      	adds	r1, #1
 8008b44:	6079      	str	r1, [r7, #4]
 8008b46:	0040      	lsls	r0, r0, #1
 8008b48:	e7c6      	b.n	8008ad8 <_dtoa_r+0x248>
 8008b4a:	bf00      	nop
 8008b4c:	f3af 8000 	nop.w
 8008b50:	636f4361 	.word	0x636f4361
 8008b54:	3fd287a7 	.word	0x3fd287a7
 8008b58:	8b60c8b3 	.word	0x8b60c8b3
 8008b5c:	3fc68a28 	.word	0x3fc68a28
 8008b60:	509f79fb 	.word	0x509f79fb
 8008b64:	3fd34413 	.word	0x3fd34413
 8008b68:	0800c70b 	.word	0x0800c70b
 8008b6c:	0800c722 	.word	0x0800c722
 8008b70:	7ff00000 	.word	0x7ff00000
 8008b74:	0800c707 	.word	0x0800c707
 8008b78:	0800c6fe 	.word	0x0800c6fe
 8008b7c:	0800c902 	.word	0x0800c902
 8008b80:	0800c818 	.word	0x0800c818
 8008b84:	0800c77d 	.word	0x0800c77d
 8008b88:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008b8a:	9901      	ldr	r1, [sp, #4]
 8008b8c:	6011      	str	r1, [r2, #0]
 8008b8e:	f1b9 0f0e 	cmp.w	r9, #14
 8008b92:	d86c      	bhi.n	8008c6e <_dtoa_r+0x3de>
 8008b94:	2c00      	cmp	r4, #0
 8008b96:	d06a      	beq.n	8008c6e <_dtoa_r+0x3de>
 8008b98:	f1bb 0f00 	cmp.w	fp, #0
 8008b9c:	f340 80a0 	ble.w	8008ce0 <_dtoa_r+0x450>
 8008ba0:	49c1      	ldr	r1, [pc, #772]	; (8008ea8 <_dtoa_r+0x618>)
 8008ba2:	f00b 020f 	and.w	r2, fp, #15
 8008ba6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008baa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008bae:	ed92 7b00 	vldr	d7, [r2]
 8008bb2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008bb6:	f000 8087 	beq.w	8008cc8 <_dtoa_r+0x438>
 8008bba:	4abc      	ldr	r2, [pc, #752]	; (8008eac <_dtoa_r+0x61c>)
 8008bbc:	ed92 6b08 	vldr	d6, [r2, #32]
 8008bc0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008bc4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008bc8:	f001 010f 	and.w	r1, r1, #15
 8008bcc:	2203      	movs	r2, #3
 8008bce:	48b7      	ldr	r0, [pc, #732]	; (8008eac <_dtoa_r+0x61c>)
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	d17b      	bne.n	8008ccc <_dtoa_r+0x43c>
 8008bd4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008bd8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008bdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008be0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008be2:	2900      	cmp	r1, #0
 8008be4:	f000 80a2 	beq.w	8008d2c <_dtoa_r+0x49c>
 8008be8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008bec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bf0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf8:	f140 8098 	bpl.w	8008d2c <_dtoa_r+0x49c>
 8008bfc:	f1b9 0f00 	cmp.w	r9, #0
 8008c00:	f000 8094 	beq.w	8008d2c <_dtoa_r+0x49c>
 8008c04:	f1ba 0f00 	cmp.w	sl, #0
 8008c08:	dd2f      	ble.n	8008c6a <_dtoa_r+0x3da>
 8008c0a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008c0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c12:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c16:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008c1a:	3201      	adds	r2, #1
 8008c1c:	4650      	mov	r0, sl
 8008c1e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008c22:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008c26:	ee07 2a90 	vmov	s15, r2
 8008c2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008c2e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008c32:	ee15 4a90 	vmov	r4, s11
 8008c36:	ec52 1b15 	vmov	r1, r2, d5
 8008c3a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d177      	bne.n	8008d32 <_dtoa_r+0x4a2>
 8008c42:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008c46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008c4a:	ec42 1b17 	vmov	d7, r1, r2
 8008c4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c56:	f300 8263 	bgt.w	8009120 <_dtoa_r+0x890>
 8008c5a:	eeb1 7b47 	vneg.f64	d7, d7
 8008c5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c66:	f100 8258 	bmi.w	800911a <_dtoa_r+0x88a>
 8008c6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c70:	2a00      	cmp	r2, #0
 8008c72:	f2c0 811d 	blt.w	8008eb0 <_dtoa_r+0x620>
 8008c76:	f1bb 0f0e 	cmp.w	fp, #14
 8008c7a:	f300 8119 	bgt.w	8008eb0 <_dtoa_r+0x620>
 8008c7e:	4b8a      	ldr	r3, [pc, #552]	; (8008ea8 <_dtoa_r+0x618>)
 8008c80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c84:	ed93 6b00 	vldr	d6, [r3]
 8008c88:	9b08      	ldr	r3, [sp, #32]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f280 80b7 	bge.w	8008dfe <_dtoa_r+0x56e>
 8008c90:	f1b9 0f00 	cmp.w	r9, #0
 8008c94:	f300 80b3 	bgt.w	8008dfe <_dtoa_r+0x56e>
 8008c98:	f040 823f 	bne.w	800911a <_dtoa_r+0x88a>
 8008c9c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008ca0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ca8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb0:	464c      	mov	r4, r9
 8008cb2:	464f      	mov	r7, r9
 8008cb4:	f280 8215 	bge.w	80090e2 <_dtoa_r+0x852>
 8008cb8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008cbc:	2331      	movs	r3, #49	; 0x31
 8008cbe:	f808 3b01 	strb.w	r3, [r8], #1
 8008cc2:	f10b 0b01 	add.w	fp, fp, #1
 8008cc6:	e211      	b.n	80090ec <_dtoa_r+0x85c>
 8008cc8:	2202      	movs	r2, #2
 8008cca:	e780      	b.n	8008bce <_dtoa_r+0x33e>
 8008ccc:	07cc      	lsls	r4, r1, #31
 8008cce:	d504      	bpl.n	8008cda <_dtoa_r+0x44a>
 8008cd0:	ed90 6b00 	vldr	d6, [r0]
 8008cd4:	3201      	adds	r2, #1
 8008cd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008cda:	1049      	asrs	r1, r1, #1
 8008cdc:	3008      	adds	r0, #8
 8008cde:	e777      	b.n	8008bd0 <_dtoa_r+0x340>
 8008ce0:	d022      	beq.n	8008d28 <_dtoa_r+0x498>
 8008ce2:	f1cb 0100 	rsb	r1, fp, #0
 8008ce6:	4a70      	ldr	r2, [pc, #448]	; (8008ea8 <_dtoa_r+0x618>)
 8008ce8:	f001 000f 	and.w	r0, r1, #15
 8008cec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008cf0:	ed92 7b00 	vldr	d7, [r2]
 8008cf4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008cf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008cfc:	486b      	ldr	r0, [pc, #428]	; (8008eac <_dtoa_r+0x61c>)
 8008cfe:	1109      	asrs	r1, r1, #4
 8008d00:	2400      	movs	r4, #0
 8008d02:	2202      	movs	r2, #2
 8008d04:	b929      	cbnz	r1, 8008d12 <_dtoa_r+0x482>
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	f43f af6a 	beq.w	8008be0 <_dtoa_r+0x350>
 8008d0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d10:	e766      	b.n	8008be0 <_dtoa_r+0x350>
 8008d12:	07cf      	lsls	r7, r1, #31
 8008d14:	d505      	bpl.n	8008d22 <_dtoa_r+0x492>
 8008d16:	ed90 6b00 	vldr	d6, [r0]
 8008d1a:	3201      	adds	r2, #1
 8008d1c:	2401      	movs	r4, #1
 8008d1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008d22:	1049      	asrs	r1, r1, #1
 8008d24:	3008      	adds	r0, #8
 8008d26:	e7ed      	b.n	8008d04 <_dtoa_r+0x474>
 8008d28:	2202      	movs	r2, #2
 8008d2a:	e759      	b.n	8008be0 <_dtoa_r+0x350>
 8008d2c:	465f      	mov	r7, fp
 8008d2e:	4648      	mov	r0, r9
 8008d30:	e775      	b.n	8008c1e <_dtoa_r+0x38e>
 8008d32:	ec42 1b17 	vmov	d7, r1, r2
 8008d36:	4a5c      	ldr	r2, [pc, #368]	; (8008ea8 <_dtoa_r+0x618>)
 8008d38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008d3c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008d40:	9a01      	ldr	r2, [sp, #4]
 8008d42:	1814      	adds	r4, r2, r0
 8008d44:	9a07      	ldr	r2, [sp, #28]
 8008d46:	b352      	cbz	r2, 8008d9e <_dtoa_r+0x50e>
 8008d48:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008d4c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008d50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d54:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008d58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008d5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008d60:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008d64:	ee14 2a90 	vmov	r2, s9
 8008d68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008d6c:	3230      	adds	r2, #48	; 0x30
 8008d6e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008d72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7a:	f808 2b01 	strb.w	r2, [r8], #1
 8008d7e:	d439      	bmi.n	8008df4 <_dtoa_r+0x564>
 8008d80:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008d84:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8c:	d472      	bmi.n	8008e74 <_dtoa_r+0x5e4>
 8008d8e:	45a0      	cmp	r8, r4
 8008d90:	f43f af6b 	beq.w	8008c6a <_dtoa_r+0x3da>
 8008d94:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008d98:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008d9c:	e7e0      	b.n	8008d60 <_dtoa_r+0x4d0>
 8008d9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008da2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008da6:	4621      	mov	r1, r4
 8008da8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008dac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008db0:	ee14 2a90 	vmov	r2, s9
 8008db4:	3230      	adds	r2, #48	; 0x30
 8008db6:	f808 2b01 	strb.w	r2, [r8], #1
 8008dba:	45a0      	cmp	r8, r4
 8008dbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008dc0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008dc4:	d118      	bne.n	8008df8 <_dtoa_r+0x568>
 8008dc6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008dca:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008dce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd6:	dc4d      	bgt.n	8008e74 <_dtoa_r+0x5e4>
 8008dd8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008ddc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de4:	f57f af41 	bpl.w	8008c6a <_dtoa_r+0x3da>
 8008de8:	4688      	mov	r8, r1
 8008dea:	3901      	subs	r1, #1
 8008dec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008df0:	2b30      	cmp	r3, #48	; 0x30
 8008df2:	d0f9      	beq.n	8008de8 <_dtoa_r+0x558>
 8008df4:	46bb      	mov	fp, r7
 8008df6:	e02a      	b.n	8008e4e <_dtoa_r+0x5be>
 8008df8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008dfc:	e7d6      	b.n	8008dac <_dtoa_r+0x51c>
 8008dfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e02:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008e06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e0a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008e0e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008e12:	ee15 3a10 	vmov	r3, s10
 8008e16:	3330      	adds	r3, #48	; 0x30
 8008e18:	f808 3b01 	strb.w	r3, [r8], #1
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	eba8 0303 	sub.w	r3, r8, r3
 8008e22:	4599      	cmp	r9, r3
 8008e24:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008e28:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008e2c:	d133      	bne.n	8008e96 <_dtoa_r+0x606>
 8008e2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008e32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3a:	dc1a      	bgt.n	8008e72 <_dtoa_r+0x5e2>
 8008e3c:	eeb4 7b46 	vcmp.f64	d7, d6
 8008e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e44:	d103      	bne.n	8008e4e <_dtoa_r+0x5be>
 8008e46:	ee15 3a10 	vmov	r3, s10
 8008e4a:	07d9      	lsls	r1, r3, #31
 8008e4c:	d411      	bmi.n	8008e72 <_dtoa_r+0x5e2>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4630      	mov	r0, r6
 8008e52:	f000 faed 	bl	8009430 <_Bfree>
 8008e56:	2300      	movs	r3, #0
 8008e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e5a:	f888 3000 	strb.w	r3, [r8]
 8008e5e:	f10b 0301 	add.w	r3, fp, #1
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f43f ad61 	beq.w	800892e <_dtoa_r+0x9e>
 8008e6c:	f8c3 8000 	str.w	r8, [r3]
 8008e70:	e55d      	b.n	800892e <_dtoa_r+0x9e>
 8008e72:	465f      	mov	r7, fp
 8008e74:	4643      	mov	r3, r8
 8008e76:	4698      	mov	r8, r3
 8008e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e7c:	2a39      	cmp	r2, #57	; 0x39
 8008e7e:	d106      	bne.n	8008e8e <_dtoa_r+0x5fe>
 8008e80:	9a01      	ldr	r2, [sp, #4]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d1f7      	bne.n	8008e76 <_dtoa_r+0x5e6>
 8008e86:	9901      	ldr	r1, [sp, #4]
 8008e88:	2230      	movs	r2, #48	; 0x30
 8008e8a:	3701      	adds	r7, #1
 8008e8c:	700a      	strb	r2, [r1, #0]
 8008e8e:	781a      	ldrb	r2, [r3, #0]
 8008e90:	3201      	adds	r2, #1
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	e7ae      	b.n	8008df4 <_dtoa_r+0x564>
 8008e96:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008e9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea2:	d1b2      	bne.n	8008e0a <_dtoa_r+0x57a>
 8008ea4:	e7d3      	b.n	8008e4e <_dtoa_r+0x5be>
 8008ea6:	bf00      	nop
 8008ea8:	0800c818 	.word	0x0800c818
 8008eac:	0800c7f0 	.word	0x0800c7f0
 8008eb0:	9907      	ldr	r1, [sp, #28]
 8008eb2:	2900      	cmp	r1, #0
 8008eb4:	f000 80d0 	beq.w	8009058 <_dtoa_r+0x7c8>
 8008eb8:	9906      	ldr	r1, [sp, #24]
 8008eba:	2901      	cmp	r1, #1
 8008ebc:	f300 80b4 	bgt.w	8009028 <_dtoa_r+0x798>
 8008ec0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ec2:	2900      	cmp	r1, #0
 8008ec4:	f000 80ac 	beq.w	8009020 <_dtoa_r+0x790>
 8008ec8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ecc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008ed0:	461c      	mov	r4, r3
 8008ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	9b05      	ldr	r3, [sp, #20]
 8008edc:	2101      	movs	r1, #1
 8008ede:	4413      	add	r3, r2
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	9305      	str	r3, [sp, #20]
 8008ee4:	f000 fb5c 	bl	80095a0 <__i2b>
 8008ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eea:	4607      	mov	r7, r0
 8008eec:	f1b8 0f00 	cmp.w	r8, #0
 8008ef0:	dd0d      	ble.n	8008f0e <_dtoa_r+0x67e>
 8008ef2:	9a05      	ldr	r2, [sp, #20]
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	dd0a      	ble.n	8008f0e <_dtoa_r+0x67e>
 8008ef8:	4542      	cmp	r2, r8
 8008efa:	9904      	ldr	r1, [sp, #16]
 8008efc:	bfa8      	it	ge
 8008efe:	4642      	movge	r2, r8
 8008f00:	1a89      	subs	r1, r1, r2
 8008f02:	9104      	str	r1, [sp, #16]
 8008f04:	9905      	ldr	r1, [sp, #20]
 8008f06:	eba8 0802 	sub.w	r8, r8, r2
 8008f0a:	1a8a      	subs	r2, r1, r2
 8008f0c:	9205      	str	r2, [sp, #20]
 8008f0e:	b303      	cbz	r3, 8008f52 <_dtoa_r+0x6c2>
 8008f10:	9a07      	ldr	r2, [sp, #28]
 8008f12:	2a00      	cmp	r2, #0
 8008f14:	f000 80a5 	beq.w	8009062 <_dtoa_r+0x7d2>
 8008f18:	2c00      	cmp	r4, #0
 8008f1a:	dd13      	ble.n	8008f44 <_dtoa_r+0x6b4>
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	4622      	mov	r2, r4
 8008f20:	4630      	mov	r0, r6
 8008f22:	930d      	str	r3, [sp, #52]	; 0x34
 8008f24:	f000 fbfc 	bl	8009720 <__pow5mult>
 8008f28:	462a      	mov	r2, r5
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	4607      	mov	r7, r0
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f000 fb4c 	bl	80095cc <__multiply>
 8008f34:	4629      	mov	r1, r5
 8008f36:	900a      	str	r0, [sp, #40]	; 0x28
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f000 fa79 	bl	8009430 <_Bfree>
 8008f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f42:	4615      	mov	r5, r2
 8008f44:	1b1a      	subs	r2, r3, r4
 8008f46:	d004      	beq.n	8008f52 <_dtoa_r+0x6c2>
 8008f48:	4629      	mov	r1, r5
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f000 fbe8 	bl	8009720 <__pow5mult>
 8008f50:	4605      	mov	r5, r0
 8008f52:	2101      	movs	r1, #1
 8008f54:	4630      	mov	r0, r6
 8008f56:	f000 fb23 	bl	80095a0 <__i2b>
 8008f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	4604      	mov	r4, r0
 8008f60:	f340 8081 	ble.w	8009066 <_dtoa_r+0x7d6>
 8008f64:	461a      	mov	r2, r3
 8008f66:	4601      	mov	r1, r0
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f000 fbd9 	bl	8009720 <__pow5mult>
 8008f6e:	9b06      	ldr	r3, [sp, #24]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	4604      	mov	r4, r0
 8008f74:	dd7a      	ble.n	800906c <_dtoa_r+0x7dc>
 8008f76:	2300      	movs	r3, #0
 8008f78:	930a      	str	r3, [sp, #40]	; 0x28
 8008f7a:	6922      	ldr	r2, [r4, #16]
 8008f7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008f80:	6910      	ldr	r0, [r2, #16]
 8008f82:	f000 fabd 	bl	8009500 <__hi0bits>
 8008f86:	f1c0 0020 	rsb	r0, r0, #32
 8008f8a:	9b05      	ldr	r3, [sp, #20]
 8008f8c:	4418      	add	r0, r3
 8008f8e:	f010 001f 	ands.w	r0, r0, #31
 8008f92:	f000 808c 	beq.w	80090ae <_dtoa_r+0x81e>
 8008f96:	f1c0 0220 	rsb	r2, r0, #32
 8008f9a:	2a04      	cmp	r2, #4
 8008f9c:	f340 8085 	ble.w	80090aa <_dtoa_r+0x81a>
 8008fa0:	f1c0 001c 	rsb	r0, r0, #28
 8008fa4:	9b04      	ldr	r3, [sp, #16]
 8008fa6:	4403      	add	r3, r0
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	9b05      	ldr	r3, [sp, #20]
 8008fac:	4403      	add	r3, r0
 8008fae:	4480      	add	r8, r0
 8008fb0:	9305      	str	r3, [sp, #20]
 8008fb2:	9b04      	ldr	r3, [sp, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	dd05      	ble.n	8008fc4 <_dtoa_r+0x734>
 8008fb8:	4629      	mov	r1, r5
 8008fba:	461a      	mov	r2, r3
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f000 fc09 	bl	80097d4 <__lshift>
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	9b05      	ldr	r3, [sp, #20]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	dd05      	ble.n	8008fd6 <_dtoa_r+0x746>
 8008fca:	4621      	mov	r1, r4
 8008fcc:	461a      	mov	r2, r3
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f000 fc00 	bl	80097d4 <__lshift>
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d06a      	beq.n	80090b2 <_dtoa_r+0x822>
 8008fdc:	4621      	mov	r1, r4
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 fc68 	bl	80098b4 <__mcmp>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	da64      	bge.n	80090b2 <_dtoa_r+0x822>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4629      	mov	r1, r5
 8008fec:	220a      	movs	r2, #10
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f000 fa40 	bl	8009474 <__multadd>
 8008ff4:	9b07      	ldr	r3, [sp, #28]
 8008ff6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 8191 	beq.w	8009324 <_dtoa_r+0xa94>
 8009002:	4639      	mov	r1, r7
 8009004:	2300      	movs	r3, #0
 8009006:	220a      	movs	r2, #10
 8009008:	4630      	mov	r0, r6
 800900a:	f000 fa33 	bl	8009474 <__multadd>
 800900e:	f1ba 0f00 	cmp.w	sl, #0
 8009012:	4607      	mov	r7, r0
 8009014:	f300 808d 	bgt.w	8009132 <_dtoa_r+0x8a2>
 8009018:	9b06      	ldr	r3, [sp, #24]
 800901a:	2b02      	cmp	r3, #2
 800901c:	dc50      	bgt.n	80090c0 <_dtoa_r+0x830>
 800901e:	e088      	b.n	8009132 <_dtoa_r+0x8a2>
 8009020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009022:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009026:	e751      	b.n	8008ecc <_dtoa_r+0x63c>
 8009028:	f109 34ff 	add.w	r4, r9, #4294967295
 800902c:	42a3      	cmp	r3, r4
 800902e:	bfbf      	itttt	lt
 8009030:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009032:	1ae3      	sublt	r3, r4, r3
 8009034:	18d2      	addlt	r2, r2, r3
 8009036:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009038:	bfb6      	itet	lt
 800903a:	4623      	movlt	r3, r4
 800903c:	1b1c      	subge	r4, r3, r4
 800903e:	2400      	movlt	r4, #0
 8009040:	f1b9 0f00 	cmp.w	r9, #0
 8009044:	bfb5      	itete	lt
 8009046:	9a04      	ldrlt	r2, [sp, #16]
 8009048:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800904c:	eba2 0809 	sublt.w	r8, r2, r9
 8009050:	464a      	movge	r2, r9
 8009052:	bfb8      	it	lt
 8009054:	2200      	movlt	r2, #0
 8009056:	e73c      	b.n	8008ed2 <_dtoa_r+0x642>
 8009058:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800905c:	9f07      	ldr	r7, [sp, #28]
 800905e:	461c      	mov	r4, r3
 8009060:	e744      	b.n	8008eec <_dtoa_r+0x65c>
 8009062:	461a      	mov	r2, r3
 8009064:	e770      	b.n	8008f48 <_dtoa_r+0x6b8>
 8009066:	9b06      	ldr	r3, [sp, #24]
 8009068:	2b01      	cmp	r3, #1
 800906a:	dc18      	bgt.n	800909e <_dtoa_r+0x80e>
 800906c:	9b02      	ldr	r3, [sp, #8]
 800906e:	b9b3      	cbnz	r3, 800909e <_dtoa_r+0x80e>
 8009070:	9b03      	ldr	r3, [sp, #12]
 8009072:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009076:	b9a2      	cbnz	r2, 80090a2 <_dtoa_r+0x812>
 8009078:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800907c:	0d12      	lsrs	r2, r2, #20
 800907e:	0512      	lsls	r2, r2, #20
 8009080:	b18a      	cbz	r2, 80090a6 <_dtoa_r+0x816>
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	3301      	adds	r3, #1
 8009086:	9304      	str	r3, [sp, #16]
 8009088:	9b05      	ldr	r3, [sp, #20]
 800908a:	3301      	adds	r3, #1
 800908c:	9305      	str	r3, [sp, #20]
 800908e:	2301      	movs	r3, #1
 8009090:	930a      	str	r3, [sp, #40]	; 0x28
 8009092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	f47f af70 	bne.w	8008f7a <_dtoa_r+0x6ea>
 800909a:	2001      	movs	r0, #1
 800909c:	e775      	b.n	8008f8a <_dtoa_r+0x6fa>
 800909e:	2300      	movs	r3, #0
 80090a0:	e7f6      	b.n	8009090 <_dtoa_r+0x800>
 80090a2:	9b02      	ldr	r3, [sp, #8]
 80090a4:	e7f4      	b.n	8009090 <_dtoa_r+0x800>
 80090a6:	920a      	str	r2, [sp, #40]	; 0x28
 80090a8:	e7f3      	b.n	8009092 <_dtoa_r+0x802>
 80090aa:	d082      	beq.n	8008fb2 <_dtoa_r+0x722>
 80090ac:	4610      	mov	r0, r2
 80090ae:	301c      	adds	r0, #28
 80090b0:	e778      	b.n	8008fa4 <_dtoa_r+0x714>
 80090b2:	f1b9 0f00 	cmp.w	r9, #0
 80090b6:	dc37      	bgt.n	8009128 <_dtoa_r+0x898>
 80090b8:	9b06      	ldr	r3, [sp, #24]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	dd34      	ble.n	8009128 <_dtoa_r+0x898>
 80090be:	46ca      	mov	sl, r9
 80090c0:	f1ba 0f00 	cmp.w	sl, #0
 80090c4:	d10d      	bne.n	80090e2 <_dtoa_r+0x852>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4653      	mov	r3, sl
 80090ca:	2205      	movs	r2, #5
 80090cc:	4630      	mov	r0, r6
 80090ce:	f000 f9d1 	bl	8009474 <__multadd>
 80090d2:	4601      	mov	r1, r0
 80090d4:	4604      	mov	r4, r0
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 fbec 	bl	80098b4 <__mcmp>
 80090dc:	2800      	cmp	r0, #0
 80090de:	f73f adeb 	bgt.w	8008cb8 <_dtoa_r+0x428>
 80090e2:	9b08      	ldr	r3, [sp, #32]
 80090e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80090e8:	ea6f 0b03 	mvn.w	fp, r3
 80090ec:	f04f 0900 	mov.w	r9, #0
 80090f0:	4621      	mov	r1, r4
 80090f2:	4630      	mov	r0, r6
 80090f4:	f000 f99c 	bl	8009430 <_Bfree>
 80090f8:	2f00      	cmp	r7, #0
 80090fa:	f43f aea8 	beq.w	8008e4e <_dtoa_r+0x5be>
 80090fe:	f1b9 0f00 	cmp.w	r9, #0
 8009102:	d005      	beq.n	8009110 <_dtoa_r+0x880>
 8009104:	45b9      	cmp	r9, r7
 8009106:	d003      	beq.n	8009110 <_dtoa_r+0x880>
 8009108:	4649      	mov	r1, r9
 800910a:	4630      	mov	r0, r6
 800910c:	f000 f990 	bl	8009430 <_Bfree>
 8009110:	4639      	mov	r1, r7
 8009112:	4630      	mov	r0, r6
 8009114:	f000 f98c 	bl	8009430 <_Bfree>
 8009118:	e699      	b.n	8008e4e <_dtoa_r+0x5be>
 800911a:	2400      	movs	r4, #0
 800911c:	4627      	mov	r7, r4
 800911e:	e7e0      	b.n	80090e2 <_dtoa_r+0x852>
 8009120:	46bb      	mov	fp, r7
 8009122:	4604      	mov	r4, r0
 8009124:	4607      	mov	r7, r0
 8009126:	e5c7      	b.n	8008cb8 <_dtoa_r+0x428>
 8009128:	9b07      	ldr	r3, [sp, #28]
 800912a:	46ca      	mov	sl, r9
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 8100 	beq.w	8009332 <_dtoa_r+0xaa2>
 8009132:	f1b8 0f00 	cmp.w	r8, #0
 8009136:	dd05      	ble.n	8009144 <_dtoa_r+0x8b4>
 8009138:	4639      	mov	r1, r7
 800913a:	4642      	mov	r2, r8
 800913c:	4630      	mov	r0, r6
 800913e:	f000 fb49 	bl	80097d4 <__lshift>
 8009142:	4607      	mov	r7, r0
 8009144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009146:	2b00      	cmp	r3, #0
 8009148:	d05d      	beq.n	8009206 <_dtoa_r+0x976>
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	4630      	mov	r0, r6
 800914e:	f000 f92f 	bl	80093b0 <_Balloc>
 8009152:	4680      	mov	r8, r0
 8009154:	b928      	cbnz	r0, 8009162 <_dtoa_r+0x8d2>
 8009156:	4b82      	ldr	r3, [pc, #520]	; (8009360 <_dtoa_r+0xad0>)
 8009158:	4602      	mov	r2, r0
 800915a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800915e:	f7ff bbaf 	b.w	80088c0 <_dtoa_r+0x30>
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	3202      	adds	r2, #2
 8009166:	0092      	lsls	r2, r2, #2
 8009168:	f107 010c 	add.w	r1, r7, #12
 800916c:	300c      	adds	r0, #12
 800916e:	f7fe fc97 	bl	8007aa0 <memcpy>
 8009172:	2201      	movs	r2, #1
 8009174:	4641      	mov	r1, r8
 8009176:	4630      	mov	r0, r6
 8009178:	f000 fb2c 	bl	80097d4 <__lshift>
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	3301      	adds	r3, #1
 8009180:	9304      	str	r3, [sp, #16]
 8009182:	9b01      	ldr	r3, [sp, #4]
 8009184:	4453      	add	r3, sl
 8009186:	9308      	str	r3, [sp, #32]
 8009188:	9b02      	ldr	r3, [sp, #8]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	46b9      	mov	r9, r7
 8009190:	9307      	str	r3, [sp, #28]
 8009192:	4607      	mov	r7, r0
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	4621      	mov	r1, r4
 8009198:	3b01      	subs	r3, #1
 800919a:	4628      	mov	r0, r5
 800919c:	9302      	str	r3, [sp, #8]
 800919e:	f7ff faeb 	bl	8008778 <quorem>
 80091a2:	4603      	mov	r3, r0
 80091a4:	3330      	adds	r3, #48	; 0x30
 80091a6:	9005      	str	r0, [sp, #20]
 80091a8:	4649      	mov	r1, r9
 80091aa:	4628      	mov	r0, r5
 80091ac:	9309      	str	r3, [sp, #36]	; 0x24
 80091ae:	f000 fb81 	bl	80098b4 <__mcmp>
 80091b2:	463a      	mov	r2, r7
 80091b4:	4682      	mov	sl, r0
 80091b6:	4621      	mov	r1, r4
 80091b8:	4630      	mov	r0, r6
 80091ba:	f000 fb97 	bl	80098ec <__mdiff>
 80091be:	68c2      	ldr	r2, [r0, #12]
 80091c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c2:	4680      	mov	r8, r0
 80091c4:	bb0a      	cbnz	r2, 800920a <_dtoa_r+0x97a>
 80091c6:	4601      	mov	r1, r0
 80091c8:	4628      	mov	r0, r5
 80091ca:	f000 fb73 	bl	80098b4 <__mcmp>
 80091ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d0:	4602      	mov	r2, r0
 80091d2:	4641      	mov	r1, r8
 80091d4:	4630      	mov	r0, r6
 80091d6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80091da:	f000 f929 	bl	8009430 <_Bfree>
 80091de:	9b06      	ldr	r3, [sp, #24]
 80091e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091e2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80091e6:	ea43 0102 	orr.w	r1, r3, r2
 80091ea:	9b07      	ldr	r3, [sp, #28]
 80091ec:	430b      	orrs	r3, r1
 80091ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f0:	d10d      	bne.n	800920e <_dtoa_r+0x97e>
 80091f2:	2b39      	cmp	r3, #57	; 0x39
 80091f4:	d029      	beq.n	800924a <_dtoa_r+0x9ba>
 80091f6:	f1ba 0f00 	cmp.w	sl, #0
 80091fa:	dd01      	ble.n	8009200 <_dtoa_r+0x970>
 80091fc:	9b05      	ldr	r3, [sp, #20]
 80091fe:	3331      	adds	r3, #49	; 0x31
 8009200:	9a02      	ldr	r2, [sp, #8]
 8009202:	7013      	strb	r3, [r2, #0]
 8009204:	e774      	b.n	80090f0 <_dtoa_r+0x860>
 8009206:	4638      	mov	r0, r7
 8009208:	e7b8      	b.n	800917c <_dtoa_r+0x8ec>
 800920a:	2201      	movs	r2, #1
 800920c:	e7e1      	b.n	80091d2 <_dtoa_r+0x942>
 800920e:	f1ba 0f00 	cmp.w	sl, #0
 8009212:	db06      	blt.n	8009222 <_dtoa_r+0x992>
 8009214:	9906      	ldr	r1, [sp, #24]
 8009216:	ea41 0a0a 	orr.w	sl, r1, sl
 800921a:	9907      	ldr	r1, [sp, #28]
 800921c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009220:	d120      	bne.n	8009264 <_dtoa_r+0x9d4>
 8009222:	2a00      	cmp	r2, #0
 8009224:	ddec      	ble.n	8009200 <_dtoa_r+0x970>
 8009226:	4629      	mov	r1, r5
 8009228:	2201      	movs	r2, #1
 800922a:	4630      	mov	r0, r6
 800922c:	9304      	str	r3, [sp, #16]
 800922e:	f000 fad1 	bl	80097d4 <__lshift>
 8009232:	4621      	mov	r1, r4
 8009234:	4605      	mov	r5, r0
 8009236:	f000 fb3d 	bl	80098b4 <__mcmp>
 800923a:	2800      	cmp	r0, #0
 800923c:	9b04      	ldr	r3, [sp, #16]
 800923e:	dc02      	bgt.n	8009246 <_dtoa_r+0x9b6>
 8009240:	d1de      	bne.n	8009200 <_dtoa_r+0x970>
 8009242:	07da      	lsls	r2, r3, #31
 8009244:	d5dc      	bpl.n	8009200 <_dtoa_r+0x970>
 8009246:	2b39      	cmp	r3, #57	; 0x39
 8009248:	d1d8      	bne.n	80091fc <_dtoa_r+0x96c>
 800924a:	9a02      	ldr	r2, [sp, #8]
 800924c:	2339      	movs	r3, #57	; 0x39
 800924e:	7013      	strb	r3, [r2, #0]
 8009250:	4643      	mov	r3, r8
 8009252:	4698      	mov	r8, r3
 8009254:	3b01      	subs	r3, #1
 8009256:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800925a:	2a39      	cmp	r2, #57	; 0x39
 800925c:	d051      	beq.n	8009302 <_dtoa_r+0xa72>
 800925e:	3201      	adds	r2, #1
 8009260:	701a      	strb	r2, [r3, #0]
 8009262:	e745      	b.n	80090f0 <_dtoa_r+0x860>
 8009264:	2a00      	cmp	r2, #0
 8009266:	dd03      	ble.n	8009270 <_dtoa_r+0x9e0>
 8009268:	2b39      	cmp	r3, #57	; 0x39
 800926a:	d0ee      	beq.n	800924a <_dtoa_r+0x9ba>
 800926c:	3301      	adds	r3, #1
 800926e:	e7c7      	b.n	8009200 <_dtoa_r+0x970>
 8009270:	9a04      	ldr	r2, [sp, #16]
 8009272:	9908      	ldr	r1, [sp, #32]
 8009274:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009278:	428a      	cmp	r2, r1
 800927a:	d02b      	beq.n	80092d4 <_dtoa_r+0xa44>
 800927c:	4629      	mov	r1, r5
 800927e:	2300      	movs	r3, #0
 8009280:	220a      	movs	r2, #10
 8009282:	4630      	mov	r0, r6
 8009284:	f000 f8f6 	bl	8009474 <__multadd>
 8009288:	45b9      	cmp	r9, r7
 800928a:	4605      	mov	r5, r0
 800928c:	f04f 0300 	mov.w	r3, #0
 8009290:	f04f 020a 	mov.w	r2, #10
 8009294:	4649      	mov	r1, r9
 8009296:	4630      	mov	r0, r6
 8009298:	d107      	bne.n	80092aa <_dtoa_r+0xa1a>
 800929a:	f000 f8eb 	bl	8009474 <__multadd>
 800929e:	4681      	mov	r9, r0
 80092a0:	4607      	mov	r7, r0
 80092a2:	9b04      	ldr	r3, [sp, #16]
 80092a4:	3301      	adds	r3, #1
 80092a6:	9304      	str	r3, [sp, #16]
 80092a8:	e774      	b.n	8009194 <_dtoa_r+0x904>
 80092aa:	f000 f8e3 	bl	8009474 <__multadd>
 80092ae:	4639      	mov	r1, r7
 80092b0:	4681      	mov	r9, r0
 80092b2:	2300      	movs	r3, #0
 80092b4:	220a      	movs	r2, #10
 80092b6:	4630      	mov	r0, r6
 80092b8:	f000 f8dc 	bl	8009474 <__multadd>
 80092bc:	4607      	mov	r7, r0
 80092be:	e7f0      	b.n	80092a2 <_dtoa_r+0xa12>
 80092c0:	f1ba 0f00 	cmp.w	sl, #0
 80092c4:	9a01      	ldr	r2, [sp, #4]
 80092c6:	bfcc      	ite	gt
 80092c8:	46d0      	movgt	r8, sl
 80092ca:	f04f 0801 	movle.w	r8, #1
 80092ce:	4490      	add	r8, r2
 80092d0:	f04f 0900 	mov.w	r9, #0
 80092d4:	4629      	mov	r1, r5
 80092d6:	2201      	movs	r2, #1
 80092d8:	4630      	mov	r0, r6
 80092da:	9302      	str	r3, [sp, #8]
 80092dc:	f000 fa7a 	bl	80097d4 <__lshift>
 80092e0:	4621      	mov	r1, r4
 80092e2:	4605      	mov	r5, r0
 80092e4:	f000 fae6 	bl	80098b4 <__mcmp>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	dcb1      	bgt.n	8009250 <_dtoa_r+0x9c0>
 80092ec:	d102      	bne.n	80092f4 <_dtoa_r+0xa64>
 80092ee:	9b02      	ldr	r3, [sp, #8]
 80092f0:	07db      	lsls	r3, r3, #31
 80092f2:	d4ad      	bmi.n	8009250 <_dtoa_r+0x9c0>
 80092f4:	4643      	mov	r3, r8
 80092f6:	4698      	mov	r8, r3
 80092f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092fc:	2a30      	cmp	r2, #48	; 0x30
 80092fe:	d0fa      	beq.n	80092f6 <_dtoa_r+0xa66>
 8009300:	e6f6      	b.n	80090f0 <_dtoa_r+0x860>
 8009302:	9a01      	ldr	r2, [sp, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d1a4      	bne.n	8009252 <_dtoa_r+0x9c2>
 8009308:	f10b 0b01 	add.w	fp, fp, #1
 800930c:	2331      	movs	r3, #49	; 0x31
 800930e:	e778      	b.n	8009202 <_dtoa_r+0x972>
 8009310:	4b14      	ldr	r3, [pc, #80]	; (8009364 <_dtoa_r+0xad4>)
 8009312:	f7ff bb27 	b.w	8008964 <_dtoa_r+0xd4>
 8009316:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009318:	2b00      	cmp	r3, #0
 800931a:	f47f ab03 	bne.w	8008924 <_dtoa_r+0x94>
 800931e:	4b12      	ldr	r3, [pc, #72]	; (8009368 <_dtoa_r+0xad8>)
 8009320:	f7ff bb20 	b.w	8008964 <_dtoa_r+0xd4>
 8009324:	f1ba 0f00 	cmp.w	sl, #0
 8009328:	dc03      	bgt.n	8009332 <_dtoa_r+0xaa2>
 800932a:	9b06      	ldr	r3, [sp, #24]
 800932c:	2b02      	cmp	r3, #2
 800932e:	f73f aec7 	bgt.w	80090c0 <_dtoa_r+0x830>
 8009332:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009336:	4621      	mov	r1, r4
 8009338:	4628      	mov	r0, r5
 800933a:	f7ff fa1d 	bl	8008778 <quorem>
 800933e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009342:	f808 3b01 	strb.w	r3, [r8], #1
 8009346:	9a01      	ldr	r2, [sp, #4]
 8009348:	eba8 0202 	sub.w	r2, r8, r2
 800934c:	4592      	cmp	sl, r2
 800934e:	ddb7      	ble.n	80092c0 <_dtoa_r+0xa30>
 8009350:	4629      	mov	r1, r5
 8009352:	2300      	movs	r3, #0
 8009354:	220a      	movs	r2, #10
 8009356:	4630      	mov	r0, r6
 8009358:	f000 f88c 	bl	8009474 <__multadd>
 800935c:	4605      	mov	r5, r0
 800935e:	e7ea      	b.n	8009336 <_dtoa_r+0xaa6>
 8009360:	0800c77d 	.word	0x0800c77d
 8009364:	0800c901 	.word	0x0800c901
 8009368:	0800c6fe 	.word	0x0800c6fe

0800936c <_localeconv_r>:
 800936c:	4800      	ldr	r0, [pc, #0]	; (8009370 <_localeconv_r+0x4>)
 800936e:	4770      	bx	lr
 8009370:	2000017c 	.word	0x2000017c

08009374 <_lseek_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4d07      	ldr	r5, [pc, #28]	; (8009394 <_lseek_r+0x20>)
 8009378:	4604      	mov	r4, r0
 800937a:	4608      	mov	r0, r1
 800937c:	4611      	mov	r1, r2
 800937e:	2200      	movs	r2, #0
 8009380:	602a      	str	r2, [r5, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	f001 ff32 	bl	800b1ec <_lseek>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d102      	bne.n	8009392 <_lseek_r+0x1e>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	b103      	cbz	r3, 8009392 <_lseek_r+0x1e>
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	bd38      	pop	{r3, r4, r5, pc}
 8009394:	20004d88 	.word	0x20004d88

08009398 <__malloc_lock>:
 8009398:	4801      	ldr	r0, [pc, #4]	; (80093a0 <__malloc_lock+0x8>)
 800939a:	f001 bba1 	b.w	800aae0 <__retarget_lock_acquire_recursive>
 800939e:	bf00      	nop
 80093a0:	20004d8c 	.word	0x20004d8c

080093a4 <__malloc_unlock>:
 80093a4:	4801      	ldr	r0, [pc, #4]	; (80093ac <__malloc_unlock+0x8>)
 80093a6:	f001 bb9c 	b.w	800aae2 <__retarget_lock_release_recursive>
 80093aa:	bf00      	nop
 80093ac:	20004d8c 	.word	0x20004d8c

080093b0 <_Balloc>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093b4:	4604      	mov	r4, r0
 80093b6:	460d      	mov	r5, r1
 80093b8:	b976      	cbnz	r6, 80093d8 <_Balloc+0x28>
 80093ba:	2010      	movs	r0, #16
 80093bc:	f7fe fb60 	bl	8007a80 <malloc>
 80093c0:	4602      	mov	r2, r0
 80093c2:	6260      	str	r0, [r4, #36]	; 0x24
 80093c4:	b920      	cbnz	r0, 80093d0 <_Balloc+0x20>
 80093c6:	4b18      	ldr	r3, [pc, #96]	; (8009428 <_Balloc+0x78>)
 80093c8:	4818      	ldr	r0, [pc, #96]	; (800942c <_Balloc+0x7c>)
 80093ca:	2166      	movs	r1, #102	; 0x66
 80093cc:	f001 f99a 	bl	800a704 <__assert_func>
 80093d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093d4:	6006      	str	r6, [r0, #0]
 80093d6:	60c6      	str	r6, [r0, #12]
 80093d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093da:	68f3      	ldr	r3, [r6, #12]
 80093dc:	b183      	cbz	r3, 8009400 <_Balloc+0x50>
 80093de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093e6:	b9b8      	cbnz	r0, 8009418 <_Balloc+0x68>
 80093e8:	2101      	movs	r1, #1
 80093ea:	fa01 f605 	lsl.w	r6, r1, r5
 80093ee:	1d72      	adds	r2, r6, #5
 80093f0:	0092      	lsls	r2, r2, #2
 80093f2:	4620      	mov	r0, r4
 80093f4:	f7fe fb6a 	bl	8007acc <_calloc_r>
 80093f8:	b160      	cbz	r0, 8009414 <_Balloc+0x64>
 80093fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093fe:	e00e      	b.n	800941e <_Balloc+0x6e>
 8009400:	2221      	movs	r2, #33	; 0x21
 8009402:	2104      	movs	r1, #4
 8009404:	4620      	mov	r0, r4
 8009406:	f7fe fb61 	bl	8007acc <_calloc_r>
 800940a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800940c:	60f0      	str	r0, [r6, #12]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e4      	bne.n	80093de <_Balloc+0x2e>
 8009414:	2000      	movs	r0, #0
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	6802      	ldr	r2, [r0, #0]
 800941a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800941e:	2300      	movs	r3, #0
 8009420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009424:	e7f7      	b.n	8009416 <_Balloc+0x66>
 8009426:	bf00      	nop
 8009428:	0800c70b 	.word	0x0800c70b
 800942c:	0800c78e 	.word	0x0800c78e

08009430 <_Bfree>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009434:	4605      	mov	r5, r0
 8009436:	460c      	mov	r4, r1
 8009438:	b976      	cbnz	r6, 8009458 <_Bfree+0x28>
 800943a:	2010      	movs	r0, #16
 800943c:	f7fe fb20 	bl	8007a80 <malloc>
 8009440:	4602      	mov	r2, r0
 8009442:	6268      	str	r0, [r5, #36]	; 0x24
 8009444:	b920      	cbnz	r0, 8009450 <_Bfree+0x20>
 8009446:	4b09      	ldr	r3, [pc, #36]	; (800946c <_Bfree+0x3c>)
 8009448:	4809      	ldr	r0, [pc, #36]	; (8009470 <_Bfree+0x40>)
 800944a:	218a      	movs	r1, #138	; 0x8a
 800944c:	f001 f95a 	bl	800a704 <__assert_func>
 8009450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009454:	6006      	str	r6, [r0, #0]
 8009456:	60c6      	str	r6, [r0, #12]
 8009458:	b13c      	cbz	r4, 800946a <_Bfree+0x3a>
 800945a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800945c:	6862      	ldr	r2, [r4, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009464:	6021      	str	r1, [r4, #0]
 8009466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800946a:	bd70      	pop	{r4, r5, r6, pc}
 800946c:	0800c70b 	.word	0x0800c70b
 8009470:	0800c78e 	.word	0x0800c78e

08009474 <__multadd>:
 8009474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009478:	690d      	ldr	r5, [r1, #16]
 800947a:	4607      	mov	r7, r0
 800947c:	460c      	mov	r4, r1
 800947e:	461e      	mov	r6, r3
 8009480:	f101 0c14 	add.w	ip, r1, #20
 8009484:	2000      	movs	r0, #0
 8009486:	f8dc 3000 	ldr.w	r3, [ip]
 800948a:	b299      	uxth	r1, r3
 800948c:	fb02 6101 	mla	r1, r2, r1, r6
 8009490:	0c1e      	lsrs	r6, r3, #16
 8009492:	0c0b      	lsrs	r3, r1, #16
 8009494:	fb02 3306 	mla	r3, r2, r6, r3
 8009498:	b289      	uxth	r1, r1
 800949a:	3001      	adds	r0, #1
 800949c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094a0:	4285      	cmp	r5, r0
 80094a2:	f84c 1b04 	str.w	r1, [ip], #4
 80094a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094aa:	dcec      	bgt.n	8009486 <__multadd+0x12>
 80094ac:	b30e      	cbz	r6, 80094f2 <__multadd+0x7e>
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	42ab      	cmp	r3, r5
 80094b2:	dc19      	bgt.n	80094e8 <__multadd+0x74>
 80094b4:	6861      	ldr	r1, [r4, #4]
 80094b6:	4638      	mov	r0, r7
 80094b8:	3101      	adds	r1, #1
 80094ba:	f7ff ff79 	bl	80093b0 <_Balloc>
 80094be:	4680      	mov	r8, r0
 80094c0:	b928      	cbnz	r0, 80094ce <__multadd+0x5a>
 80094c2:	4602      	mov	r2, r0
 80094c4:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <__multadd+0x84>)
 80094c6:	480d      	ldr	r0, [pc, #52]	; (80094fc <__multadd+0x88>)
 80094c8:	21b5      	movs	r1, #181	; 0xb5
 80094ca:	f001 f91b 	bl	800a704 <__assert_func>
 80094ce:	6922      	ldr	r2, [r4, #16]
 80094d0:	3202      	adds	r2, #2
 80094d2:	f104 010c 	add.w	r1, r4, #12
 80094d6:	0092      	lsls	r2, r2, #2
 80094d8:	300c      	adds	r0, #12
 80094da:	f7fe fae1 	bl	8007aa0 <memcpy>
 80094de:	4621      	mov	r1, r4
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7ff ffa5 	bl	8009430 <_Bfree>
 80094e6:	4644      	mov	r4, r8
 80094e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094ec:	3501      	adds	r5, #1
 80094ee:	615e      	str	r6, [r3, #20]
 80094f0:	6125      	str	r5, [r4, #16]
 80094f2:	4620      	mov	r0, r4
 80094f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f8:	0800c77d 	.word	0x0800c77d
 80094fc:	0800c78e 	.word	0x0800c78e

08009500 <__hi0bits>:
 8009500:	0c03      	lsrs	r3, r0, #16
 8009502:	041b      	lsls	r3, r3, #16
 8009504:	b9d3      	cbnz	r3, 800953c <__hi0bits+0x3c>
 8009506:	0400      	lsls	r0, r0, #16
 8009508:	2310      	movs	r3, #16
 800950a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800950e:	bf04      	itt	eq
 8009510:	0200      	lsleq	r0, r0, #8
 8009512:	3308      	addeq	r3, #8
 8009514:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009518:	bf04      	itt	eq
 800951a:	0100      	lsleq	r0, r0, #4
 800951c:	3304      	addeq	r3, #4
 800951e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009522:	bf04      	itt	eq
 8009524:	0080      	lsleq	r0, r0, #2
 8009526:	3302      	addeq	r3, #2
 8009528:	2800      	cmp	r0, #0
 800952a:	db05      	blt.n	8009538 <__hi0bits+0x38>
 800952c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009530:	f103 0301 	add.w	r3, r3, #1
 8009534:	bf08      	it	eq
 8009536:	2320      	moveq	r3, #32
 8009538:	4618      	mov	r0, r3
 800953a:	4770      	bx	lr
 800953c:	2300      	movs	r3, #0
 800953e:	e7e4      	b.n	800950a <__hi0bits+0xa>

08009540 <__lo0bits>:
 8009540:	6803      	ldr	r3, [r0, #0]
 8009542:	f013 0207 	ands.w	r2, r3, #7
 8009546:	4601      	mov	r1, r0
 8009548:	d00b      	beq.n	8009562 <__lo0bits+0x22>
 800954a:	07da      	lsls	r2, r3, #31
 800954c:	d423      	bmi.n	8009596 <__lo0bits+0x56>
 800954e:	0798      	lsls	r0, r3, #30
 8009550:	bf49      	itett	mi
 8009552:	085b      	lsrmi	r3, r3, #1
 8009554:	089b      	lsrpl	r3, r3, #2
 8009556:	2001      	movmi	r0, #1
 8009558:	600b      	strmi	r3, [r1, #0]
 800955a:	bf5c      	itt	pl
 800955c:	600b      	strpl	r3, [r1, #0]
 800955e:	2002      	movpl	r0, #2
 8009560:	4770      	bx	lr
 8009562:	b298      	uxth	r0, r3
 8009564:	b9a8      	cbnz	r0, 8009592 <__lo0bits+0x52>
 8009566:	0c1b      	lsrs	r3, r3, #16
 8009568:	2010      	movs	r0, #16
 800956a:	b2da      	uxtb	r2, r3
 800956c:	b90a      	cbnz	r2, 8009572 <__lo0bits+0x32>
 800956e:	3008      	adds	r0, #8
 8009570:	0a1b      	lsrs	r3, r3, #8
 8009572:	071a      	lsls	r2, r3, #28
 8009574:	bf04      	itt	eq
 8009576:	091b      	lsreq	r3, r3, #4
 8009578:	3004      	addeq	r0, #4
 800957a:	079a      	lsls	r2, r3, #30
 800957c:	bf04      	itt	eq
 800957e:	089b      	lsreq	r3, r3, #2
 8009580:	3002      	addeq	r0, #2
 8009582:	07da      	lsls	r2, r3, #31
 8009584:	d403      	bmi.n	800958e <__lo0bits+0x4e>
 8009586:	085b      	lsrs	r3, r3, #1
 8009588:	f100 0001 	add.w	r0, r0, #1
 800958c:	d005      	beq.n	800959a <__lo0bits+0x5a>
 800958e:	600b      	str	r3, [r1, #0]
 8009590:	4770      	bx	lr
 8009592:	4610      	mov	r0, r2
 8009594:	e7e9      	b.n	800956a <__lo0bits+0x2a>
 8009596:	2000      	movs	r0, #0
 8009598:	4770      	bx	lr
 800959a:	2020      	movs	r0, #32
 800959c:	4770      	bx	lr
	...

080095a0 <__i2b>:
 80095a0:	b510      	push	{r4, lr}
 80095a2:	460c      	mov	r4, r1
 80095a4:	2101      	movs	r1, #1
 80095a6:	f7ff ff03 	bl	80093b0 <_Balloc>
 80095aa:	4602      	mov	r2, r0
 80095ac:	b928      	cbnz	r0, 80095ba <__i2b+0x1a>
 80095ae:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <__i2b+0x24>)
 80095b0:	4805      	ldr	r0, [pc, #20]	; (80095c8 <__i2b+0x28>)
 80095b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80095b6:	f001 f8a5 	bl	800a704 <__assert_func>
 80095ba:	2301      	movs	r3, #1
 80095bc:	6144      	str	r4, [r0, #20]
 80095be:	6103      	str	r3, [r0, #16]
 80095c0:	bd10      	pop	{r4, pc}
 80095c2:	bf00      	nop
 80095c4:	0800c77d 	.word	0x0800c77d
 80095c8:	0800c78e 	.word	0x0800c78e

080095cc <__multiply>:
 80095cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	4691      	mov	r9, r2
 80095d2:	690a      	ldr	r2, [r1, #16]
 80095d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095d8:	429a      	cmp	r2, r3
 80095da:	bfb8      	it	lt
 80095dc:	460b      	movlt	r3, r1
 80095de:	460c      	mov	r4, r1
 80095e0:	bfbc      	itt	lt
 80095e2:	464c      	movlt	r4, r9
 80095e4:	4699      	movlt	r9, r3
 80095e6:	6927      	ldr	r7, [r4, #16]
 80095e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095ec:	68a3      	ldr	r3, [r4, #8]
 80095ee:	6861      	ldr	r1, [r4, #4]
 80095f0:	eb07 060a 	add.w	r6, r7, sl
 80095f4:	42b3      	cmp	r3, r6
 80095f6:	b085      	sub	sp, #20
 80095f8:	bfb8      	it	lt
 80095fa:	3101      	addlt	r1, #1
 80095fc:	f7ff fed8 	bl	80093b0 <_Balloc>
 8009600:	b930      	cbnz	r0, 8009610 <__multiply+0x44>
 8009602:	4602      	mov	r2, r0
 8009604:	4b44      	ldr	r3, [pc, #272]	; (8009718 <__multiply+0x14c>)
 8009606:	4845      	ldr	r0, [pc, #276]	; (800971c <__multiply+0x150>)
 8009608:	f240 115d 	movw	r1, #349	; 0x15d
 800960c:	f001 f87a 	bl	800a704 <__assert_func>
 8009610:	f100 0514 	add.w	r5, r0, #20
 8009614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009618:	462b      	mov	r3, r5
 800961a:	2200      	movs	r2, #0
 800961c:	4543      	cmp	r3, r8
 800961e:	d321      	bcc.n	8009664 <__multiply+0x98>
 8009620:	f104 0314 	add.w	r3, r4, #20
 8009624:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009628:	f109 0314 	add.w	r3, r9, #20
 800962c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009630:	9202      	str	r2, [sp, #8]
 8009632:	1b3a      	subs	r2, r7, r4
 8009634:	3a15      	subs	r2, #21
 8009636:	f022 0203 	bic.w	r2, r2, #3
 800963a:	3204      	adds	r2, #4
 800963c:	f104 0115 	add.w	r1, r4, #21
 8009640:	428f      	cmp	r7, r1
 8009642:	bf38      	it	cc
 8009644:	2204      	movcc	r2, #4
 8009646:	9201      	str	r2, [sp, #4]
 8009648:	9a02      	ldr	r2, [sp, #8]
 800964a:	9303      	str	r3, [sp, #12]
 800964c:	429a      	cmp	r2, r3
 800964e:	d80c      	bhi.n	800966a <__multiply+0x9e>
 8009650:	2e00      	cmp	r6, #0
 8009652:	dd03      	ble.n	800965c <__multiply+0x90>
 8009654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009658:	2b00      	cmp	r3, #0
 800965a:	d05a      	beq.n	8009712 <__multiply+0x146>
 800965c:	6106      	str	r6, [r0, #16]
 800965e:	b005      	add	sp, #20
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	f843 2b04 	str.w	r2, [r3], #4
 8009668:	e7d8      	b.n	800961c <__multiply+0x50>
 800966a:	f8b3 a000 	ldrh.w	sl, [r3]
 800966e:	f1ba 0f00 	cmp.w	sl, #0
 8009672:	d024      	beq.n	80096be <__multiply+0xf2>
 8009674:	f104 0e14 	add.w	lr, r4, #20
 8009678:	46a9      	mov	r9, r5
 800967a:	f04f 0c00 	mov.w	ip, #0
 800967e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009682:	f8d9 1000 	ldr.w	r1, [r9]
 8009686:	fa1f fb82 	uxth.w	fp, r2
 800968a:	b289      	uxth	r1, r1
 800968c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009690:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009694:	f8d9 2000 	ldr.w	r2, [r9]
 8009698:	4461      	add	r1, ip
 800969a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800969e:	fb0a c20b 	mla	r2, sl, fp, ip
 80096a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096a6:	b289      	uxth	r1, r1
 80096a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096ac:	4577      	cmp	r7, lr
 80096ae:	f849 1b04 	str.w	r1, [r9], #4
 80096b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096b6:	d8e2      	bhi.n	800967e <__multiply+0xb2>
 80096b8:	9a01      	ldr	r2, [sp, #4]
 80096ba:	f845 c002 	str.w	ip, [r5, r2]
 80096be:	9a03      	ldr	r2, [sp, #12]
 80096c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096c4:	3304      	adds	r3, #4
 80096c6:	f1b9 0f00 	cmp.w	r9, #0
 80096ca:	d020      	beq.n	800970e <__multiply+0x142>
 80096cc:	6829      	ldr	r1, [r5, #0]
 80096ce:	f104 0c14 	add.w	ip, r4, #20
 80096d2:	46ae      	mov	lr, r5
 80096d4:	f04f 0a00 	mov.w	sl, #0
 80096d8:	f8bc b000 	ldrh.w	fp, [ip]
 80096dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80096e0:	fb09 220b 	mla	r2, r9, fp, r2
 80096e4:	4492      	add	sl, r2
 80096e6:	b289      	uxth	r1, r1
 80096e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80096ec:	f84e 1b04 	str.w	r1, [lr], #4
 80096f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096f4:	f8be 1000 	ldrh.w	r1, [lr]
 80096f8:	0c12      	lsrs	r2, r2, #16
 80096fa:	fb09 1102 	mla	r1, r9, r2, r1
 80096fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009702:	4567      	cmp	r7, ip
 8009704:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009708:	d8e6      	bhi.n	80096d8 <__multiply+0x10c>
 800970a:	9a01      	ldr	r2, [sp, #4]
 800970c:	50a9      	str	r1, [r5, r2]
 800970e:	3504      	adds	r5, #4
 8009710:	e79a      	b.n	8009648 <__multiply+0x7c>
 8009712:	3e01      	subs	r6, #1
 8009714:	e79c      	b.n	8009650 <__multiply+0x84>
 8009716:	bf00      	nop
 8009718:	0800c77d 	.word	0x0800c77d
 800971c:	0800c78e 	.word	0x0800c78e

08009720 <__pow5mult>:
 8009720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009724:	4615      	mov	r5, r2
 8009726:	f012 0203 	ands.w	r2, r2, #3
 800972a:	4606      	mov	r6, r0
 800972c:	460f      	mov	r7, r1
 800972e:	d007      	beq.n	8009740 <__pow5mult+0x20>
 8009730:	4c25      	ldr	r4, [pc, #148]	; (80097c8 <__pow5mult+0xa8>)
 8009732:	3a01      	subs	r2, #1
 8009734:	2300      	movs	r3, #0
 8009736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800973a:	f7ff fe9b 	bl	8009474 <__multadd>
 800973e:	4607      	mov	r7, r0
 8009740:	10ad      	asrs	r5, r5, #2
 8009742:	d03d      	beq.n	80097c0 <__pow5mult+0xa0>
 8009744:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009746:	b97c      	cbnz	r4, 8009768 <__pow5mult+0x48>
 8009748:	2010      	movs	r0, #16
 800974a:	f7fe f999 	bl	8007a80 <malloc>
 800974e:	4602      	mov	r2, r0
 8009750:	6270      	str	r0, [r6, #36]	; 0x24
 8009752:	b928      	cbnz	r0, 8009760 <__pow5mult+0x40>
 8009754:	4b1d      	ldr	r3, [pc, #116]	; (80097cc <__pow5mult+0xac>)
 8009756:	481e      	ldr	r0, [pc, #120]	; (80097d0 <__pow5mult+0xb0>)
 8009758:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800975c:	f000 ffd2 	bl	800a704 <__assert_func>
 8009760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009764:	6004      	str	r4, [r0, #0]
 8009766:	60c4      	str	r4, [r0, #12]
 8009768:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800976c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009770:	b94c      	cbnz	r4, 8009786 <__pow5mult+0x66>
 8009772:	f240 2171 	movw	r1, #625	; 0x271
 8009776:	4630      	mov	r0, r6
 8009778:	f7ff ff12 	bl	80095a0 <__i2b>
 800977c:	2300      	movs	r3, #0
 800977e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009782:	4604      	mov	r4, r0
 8009784:	6003      	str	r3, [r0, #0]
 8009786:	f04f 0900 	mov.w	r9, #0
 800978a:	07eb      	lsls	r3, r5, #31
 800978c:	d50a      	bpl.n	80097a4 <__pow5mult+0x84>
 800978e:	4639      	mov	r1, r7
 8009790:	4622      	mov	r2, r4
 8009792:	4630      	mov	r0, r6
 8009794:	f7ff ff1a 	bl	80095cc <__multiply>
 8009798:	4639      	mov	r1, r7
 800979a:	4680      	mov	r8, r0
 800979c:	4630      	mov	r0, r6
 800979e:	f7ff fe47 	bl	8009430 <_Bfree>
 80097a2:	4647      	mov	r7, r8
 80097a4:	106d      	asrs	r5, r5, #1
 80097a6:	d00b      	beq.n	80097c0 <__pow5mult+0xa0>
 80097a8:	6820      	ldr	r0, [r4, #0]
 80097aa:	b938      	cbnz	r0, 80097bc <__pow5mult+0x9c>
 80097ac:	4622      	mov	r2, r4
 80097ae:	4621      	mov	r1, r4
 80097b0:	4630      	mov	r0, r6
 80097b2:	f7ff ff0b 	bl	80095cc <__multiply>
 80097b6:	6020      	str	r0, [r4, #0]
 80097b8:	f8c0 9000 	str.w	r9, [r0]
 80097bc:	4604      	mov	r4, r0
 80097be:	e7e4      	b.n	800978a <__pow5mult+0x6a>
 80097c0:	4638      	mov	r0, r7
 80097c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c6:	bf00      	nop
 80097c8:	0800c8e0 	.word	0x0800c8e0
 80097cc:	0800c70b 	.word	0x0800c70b
 80097d0:	0800c78e 	.word	0x0800c78e

080097d4 <__lshift>:
 80097d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	460c      	mov	r4, r1
 80097da:	6849      	ldr	r1, [r1, #4]
 80097dc:	6923      	ldr	r3, [r4, #16]
 80097de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097e2:	68a3      	ldr	r3, [r4, #8]
 80097e4:	4607      	mov	r7, r0
 80097e6:	4691      	mov	r9, r2
 80097e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097ec:	f108 0601 	add.w	r6, r8, #1
 80097f0:	42b3      	cmp	r3, r6
 80097f2:	db0b      	blt.n	800980c <__lshift+0x38>
 80097f4:	4638      	mov	r0, r7
 80097f6:	f7ff fddb 	bl	80093b0 <_Balloc>
 80097fa:	4605      	mov	r5, r0
 80097fc:	b948      	cbnz	r0, 8009812 <__lshift+0x3e>
 80097fe:	4602      	mov	r2, r0
 8009800:	4b2a      	ldr	r3, [pc, #168]	; (80098ac <__lshift+0xd8>)
 8009802:	482b      	ldr	r0, [pc, #172]	; (80098b0 <__lshift+0xdc>)
 8009804:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009808:	f000 ff7c 	bl	800a704 <__assert_func>
 800980c:	3101      	adds	r1, #1
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	e7ee      	b.n	80097f0 <__lshift+0x1c>
 8009812:	2300      	movs	r3, #0
 8009814:	f100 0114 	add.w	r1, r0, #20
 8009818:	f100 0210 	add.w	r2, r0, #16
 800981c:	4618      	mov	r0, r3
 800981e:	4553      	cmp	r3, sl
 8009820:	db37      	blt.n	8009892 <__lshift+0xbe>
 8009822:	6920      	ldr	r0, [r4, #16]
 8009824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009828:	f104 0314 	add.w	r3, r4, #20
 800982c:	f019 091f 	ands.w	r9, r9, #31
 8009830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009834:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009838:	d02f      	beq.n	800989a <__lshift+0xc6>
 800983a:	f1c9 0e20 	rsb	lr, r9, #32
 800983e:	468a      	mov	sl, r1
 8009840:	f04f 0c00 	mov.w	ip, #0
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	fa02 f209 	lsl.w	r2, r2, r9
 800984a:	ea42 020c 	orr.w	r2, r2, ip
 800984e:	f84a 2b04 	str.w	r2, [sl], #4
 8009852:	f853 2b04 	ldr.w	r2, [r3], #4
 8009856:	4298      	cmp	r0, r3
 8009858:	fa22 fc0e 	lsr.w	ip, r2, lr
 800985c:	d8f2      	bhi.n	8009844 <__lshift+0x70>
 800985e:	1b03      	subs	r3, r0, r4
 8009860:	3b15      	subs	r3, #21
 8009862:	f023 0303 	bic.w	r3, r3, #3
 8009866:	3304      	adds	r3, #4
 8009868:	f104 0215 	add.w	r2, r4, #21
 800986c:	4290      	cmp	r0, r2
 800986e:	bf38      	it	cc
 8009870:	2304      	movcc	r3, #4
 8009872:	f841 c003 	str.w	ip, [r1, r3]
 8009876:	f1bc 0f00 	cmp.w	ip, #0
 800987a:	d001      	beq.n	8009880 <__lshift+0xac>
 800987c:	f108 0602 	add.w	r6, r8, #2
 8009880:	3e01      	subs	r6, #1
 8009882:	4638      	mov	r0, r7
 8009884:	612e      	str	r6, [r5, #16]
 8009886:	4621      	mov	r1, r4
 8009888:	f7ff fdd2 	bl	8009430 <_Bfree>
 800988c:	4628      	mov	r0, r5
 800988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009892:	f842 0f04 	str.w	r0, [r2, #4]!
 8009896:	3301      	adds	r3, #1
 8009898:	e7c1      	b.n	800981e <__lshift+0x4a>
 800989a:	3904      	subs	r1, #4
 800989c:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80098a4:	4298      	cmp	r0, r3
 80098a6:	d8f9      	bhi.n	800989c <__lshift+0xc8>
 80098a8:	e7ea      	b.n	8009880 <__lshift+0xac>
 80098aa:	bf00      	nop
 80098ac:	0800c77d 	.word	0x0800c77d
 80098b0:	0800c78e 	.word	0x0800c78e

080098b4 <__mcmp>:
 80098b4:	b530      	push	{r4, r5, lr}
 80098b6:	6902      	ldr	r2, [r0, #16]
 80098b8:	690c      	ldr	r4, [r1, #16]
 80098ba:	1b12      	subs	r2, r2, r4
 80098bc:	d10e      	bne.n	80098dc <__mcmp+0x28>
 80098be:	f100 0314 	add.w	r3, r0, #20
 80098c2:	3114      	adds	r1, #20
 80098c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098d4:	42a5      	cmp	r5, r4
 80098d6:	d003      	beq.n	80098e0 <__mcmp+0x2c>
 80098d8:	d305      	bcc.n	80098e6 <__mcmp+0x32>
 80098da:	2201      	movs	r2, #1
 80098dc:	4610      	mov	r0, r2
 80098de:	bd30      	pop	{r4, r5, pc}
 80098e0:	4283      	cmp	r3, r0
 80098e2:	d3f3      	bcc.n	80098cc <__mcmp+0x18>
 80098e4:	e7fa      	b.n	80098dc <__mcmp+0x28>
 80098e6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ea:	e7f7      	b.n	80098dc <__mcmp+0x28>

080098ec <__mdiff>:
 80098ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	460c      	mov	r4, r1
 80098f2:	4606      	mov	r6, r0
 80098f4:	4611      	mov	r1, r2
 80098f6:	4620      	mov	r0, r4
 80098f8:	4690      	mov	r8, r2
 80098fa:	f7ff ffdb 	bl	80098b4 <__mcmp>
 80098fe:	1e05      	subs	r5, r0, #0
 8009900:	d110      	bne.n	8009924 <__mdiff+0x38>
 8009902:	4629      	mov	r1, r5
 8009904:	4630      	mov	r0, r6
 8009906:	f7ff fd53 	bl	80093b0 <_Balloc>
 800990a:	b930      	cbnz	r0, 800991a <__mdiff+0x2e>
 800990c:	4b3a      	ldr	r3, [pc, #232]	; (80099f8 <__mdiff+0x10c>)
 800990e:	4602      	mov	r2, r0
 8009910:	f240 2132 	movw	r1, #562	; 0x232
 8009914:	4839      	ldr	r0, [pc, #228]	; (80099fc <__mdiff+0x110>)
 8009916:	f000 fef5 	bl	800a704 <__assert_func>
 800991a:	2301      	movs	r3, #1
 800991c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009924:	bfa4      	itt	ge
 8009926:	4643      	movge	r3, r8
 8009928:	46a0      	movge	r8, r4
 800992a:	4630      	mov	r0, r6
 800992c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009930:	bfa6      	itte	ge
 8009932:	461c      	movge	r4, r3
 8009934:	2500      	movge	r5, #0
 8009936:	2501      	movlt	r5, #1
 8009938:	f7ff fd3a 	bl	80093b0 <_Balloc>
 800993c:	b920      	cbnz	r0, 8009948 <__mdiff+0x5c>
 800993e:	4b2e      	ldr	r3, [pc, #184]	; (80099f8 <__mdiff+0x10c>)
 8009940:	4602      	mov	r2, r0
 8009942:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009946:	e7e5      	b.n	8009914 <__mdiff+0x28>
 8009948:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800994c:	6926      	ldr	r6, [r4, #16]
 800994e:	60c5      	str	r5, [r0, #12]
 8009950:	f104 0914 	add.w	r9, r4, #20
 8009954:	f108 0514 	add.w	r5, r8, #20
 8009958:	f100 0e14 	add.w	lr, r0, #20
 800995c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009960:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009964:	f108 0210 	add.w	r2, r8, #16
 8009968:	46f2      	mov	sl, lr
 800996a:	2100      	movs	r1, #0
 800996c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009970:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009974:	fa1f f883 	uxth.w	r8, r3
 8009978:	fa11 f18b 	uxtah	r1, r1, fp
 800997c:	0c1b      	lsrs	r3, r3, #16
 800997e:	eba1 0808 	sub.w	r8, r1, r8
 8009982:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009986:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800998a:	fa1f f888 	uxth.w	r8, r8
 800998e:	1419      	asrs	r1, r3, #16
 8009990:	454e      	cmp	r6, r9
 8009992:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009996:	f84a 3b04 	str.w	r3, [sl], #4
 800999a:	d8e7      	bhi.n	800996c <__mdiff+0x80>
 800999c:	1b33      	subs	r3, r6, r4
 800999e:	3b15      	subs	r3, #21
 80099a0:	f023 0303 	bic.w	r3, r3, #3
 80099a4:	3304      	adds	r3, #4
 80099a6:	3415      	adds	r4, #21
 80099a8:	42a6      	cmp	r6, r4
 80099aa:	bf38      	it	cc
 80099ac:	2304      	movcc	r3, #4
 80099ae:	441d      	add	r5, r3
 80099b0:	4473      	add	r3, lr
 80099b2:	469e      	mov	lr, r3
 80099b4:	462e      	mov	r6, r5
 80099b6:	4566      	cmp	r6, ip
 80099b8:	d30e      	bcc.n	80099d8 <__mdiff+0xec>
 80099ba:	f10c 0203 	add.w	r2, ip, #3
 80099be:	1b52      	subs	r2, r2, r5
 80099c0:	f022 0203 	bic.w	r2, r2, #3
 80099c4:	3d03      	subs	r5, #3
 80099c6:	45ac      	cmp	ip, r5
 80099c8:	bf38      	it	cc
 80099ca:	2200      	movcc	r2, #0
 80099cc:	441a      	add	r2, r3
 80099ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80099d2:	b17b      	cbz	r3, 80099f4 <__mdiff+0x108>
 80099d4:	6107      	str	r7, [r0, #16]
 80099d6:	e7a3      	b.n	8009920 <__mdiff+0x34>
 80099d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80099dc:	fa11 f288 	uxtah	r2, r1, r8
 80099e0:	1414      	asrs	r4, r2, #16
 80099e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80099e6:	b292      	uxth	r2, r2
 80099e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80099ec:	f84e 2b04 	str.w	r2, [lr], #4
 80099f0:	1421      	asrs	r1, r4, #16
 80099f2:	e7e0      	b.n	80099b6 <__mdiff+0xca>
 80099f4:	3f01      	subs	r7, #1
 80099f6:	e7ea      	b.n	80099ce <__mdiff+0xe2>
 80099f8:	0800c77d 	.word	0x0800c77d
 80099fc:	0800c78e 	.word	0x0800c78e

08009a00 <__d2b>:
 8009a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a04:	4689      	mov	r9, r1
 8009a06:	2101      	movs	r1, #1
 8009a08:	ec57 6b10 	vmov	r6, r7, d0
 8009a0c:	4690      	mov	r8, r2
 8009a0e:	f7ff fccf 	bl	80093b0 <_Balloc>
 8009a12:	4604      	mov	r4, r0
 8009a14:	b930      	cbnz	r0, 8009a24 <__d2b+0x24>
 8009a16:	4602      	mov	r2, r0
 8009a18:	4b25      	ldr	r3, [pc, #148]	; (8009ab0 <__d2b+0xb0>)
 8009a1a:	4826      	ldr	r0, [pc, #152]	; (8009ab4 <__d2b+0xb4>)
 8009a1c:	f240 310a 	movw	r1, #778	; 0x30a
 8009a20:	f000 fe70 	bl	800a704 <__assert_func>
 8009a24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a2c:	bb35      	cbnz	r5, 8009a7c <__d2b+0x7c>
 8009a2e:	2e00      	cmp	r6, #0
 8009a30:	9301      	str	r3, [sp, #4]
 8009a32:	d028      	beq.n	8009a86 <__d2b+0x86>
 8009a34:	4668      	mov	r0, sp
 8009a36:	9600      	str	r6, [sp, #0]
 8009a38:	f7ff fd82 	bl	8009540 <__lo0bits>
 8009a3c:	9900      	ldr	r1, [sp, #0]
 8009a3e:	b300      	cbz	r0, 8009a82 <__d2b+0x82>
 8009a40:	9a01      	ldr	r2, [sp, #4]
 8009a42:	f1c0 0320 	rsb	r3, r0, #32
 8009a46:	fa02 f303 	lsl.w	r3, r2, r3
 8009a4a:	430b      	orrs	r3, r1
 8009a4c:	40c2      	lsrs	r2, r0
 8009a4e:	6163      	str	r3, [r4, #20]
 8009a50:	9201      	str	r2, [sp, #4]
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	61a3      	str	r3, [r4, #24]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	bf14      	ite	ne
 8009a5a:	2202      	movne	r2, #2
 8009a5c:	2201      	moveq	r2, #1
 8009a5e:	6122      	str	r2, [r4, #16]
 8009a60:	b1d5      	cbz	r5, 8009a98 <__d2b+0x98>
 8009a62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a66:	4405      	add	r5, r0
 8009a68:	f8c9 5000 	str.w	r5, [r9]
 8009a6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a70:	f8c8 0000 	str.w	r0, [r8]
 8009a74:	4620      	mov	r0, r4
 8009a76:	b003      	add	sp, #12
 8009a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a80:	e7d5      	b.n	8009a2e <__d2b+0x2e>
 8009a82:	6161      	str	r1, [r4, #20]
 8009a84:	e7e5      	b.n	8009a52 <__d2b+0x52>
 8009a86:	a801      	add	r0, sp, #4
 8009a88:	f7ff fd5a 	bl	8009540 <__lo0bits>
 8009a8c:	9b01      	ldr	r3, [sp, #4]
 8009a8e:	6163      	str	r3, [r4, #20]
 8009a90:	2201      	movs	r2, #1
 8009a92:	6122      	str	r2, [r4, #16]
 8009a94:	3020      	adds	r0, #32
 8009a96:	e7e3      	b.n	8009a60 <__d2b+0x60>
 8009a98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009aa0:	f8c9 0000 	str.w	r0, [r9]
 8009aa4:	6918      	ldr	r0, [r3, #16]
 8009aa6:	f7ff fd2b 	bl	8009500 <__hi0bits>
 8009aaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009aae:	e7df      	b.n	8009a70 <__d2b+0x70>
 8009ab0:	0800c77d 	.word	0x0800c77d
 8009ab4:	0800c78e 	.word	0x0800c78e

08009ab8 <__ssputs_r>:
 8009ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009abc:	688e      	ldr	r6, [r1, #8]
 8009abe:	429e      	cmp	r6, r3
 8009ac0:	4682      	mov	sl, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	4690      	mov	r8, r2
 8009ac6:	461f      	mov	r7, r3
 8009ac8:	d838      	bhi.n	8009b3c <__ssputs_r+0x84>
 8009aca:	898a      	ldrh	r2, [r1, #12]
 8009acc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ad0:	d032      	beq.n	8009b38 <__ssputs_r+0x80>
 8009ad2:	6825      	ldr	r5, [r4, #0]
 8009ad4:	6909      	ldr	r1, [r1, #16]
 8009ad6:	eba5 0901 	sub.w	r9, r5, r1
 8009ada:	6965      	ldr	r5, [r4, #20]
 8009adc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	444b      	add	r3, r9
 8009ae8:	106d      	asrs	r5, r5, #1
 8009aea:	429d      	cmp	r5, r3
 8009aec:	bf38      	it	cc
 8009aee:	461d      	movcc	r5, r3
 8009af0:	0553      	lsls	r3, r2, #21
 8009af2:	d531      	bpl.n	8009b58 <__ssputs_r+0xa0>
 8009af4:	4629      	mov	r1, r5
 8009af6:	f7fe f86b 	bl	8007bd0 <_malloc_r>
 8009afa:	4606      	mov	r6, r0
 8009afc:	b950      	cbnz	r0, 8009b14 <__ssputs_r+0x5c>
 8009afe:	230c      	movs	r3, #12
 8009b00:	f8ca 3000 	str.w	r3, [sl]
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b14:	6921      	ldr	r1, [r4, #16]
 8009b16:	464a      	mov	r2, r9
 8009b18:	f7fd ffc2 	bl	8007aa0 <memcpy>
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b26:	81a3      	strh	r3, [r4, #12]
 8009b28:	6126      	str	r6, [r4, #16]
 8009b2a:	6165      	str	r5, [r4, #20]
 8009b2c:	444e      	add	r6, r9
 8009b2e:	eba5 0509 	sub.w	r5, r5, r9
 8009b32:	6026      	str	r6, [r4, #0]
 8009b34:	60a5      	str	r5, [r4, #8]
 8009b36:	463e      	mov	r6, r7
 8009b38:	42be      	cmp	r6, r7
 8009b3a:	d900      	bls.n	8009b3e <__ssputs_r+0x86>
 8009b3c:	463e      	mov	r6, r7
 8009b3e:	6820      	ldr	r0, [r4, #0]
 8009b40:	4632      	mov	r2, r6
 8009b42:	4641      	mov	r1, r8
 8009b44:	f000 ffe0 	bl	800ab08 <memmove>
 8009b48:	68a3      	ldr	r3, [r4, #8]
 8009b4a:	1b9b      	subs	r3, r3, r6
 8009b4c:	60a3      	str	r3, [r4, #8]
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	4433      	add	r3, r6
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	2000      	movs	r0, #0
 8009b56:	e7db      	b.n	8009b10 <__ssputs_r+0x58>
 8009b58:	462a      	mov	r2, r5
 8009b5a:	f000 ffef 	bl	800ab3c <_realloc_r>
 8009b5e:	4606      	mov	r6, r0
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d1e1      	bne.n	8009b28 <__ssputs_r+0x70>
 8009b64:	6921      	ldr	r1, [r4, #16]
 8009b66:	4650      	mov	r0, sl
 8009b68:	f7fd ffc6 	bl	8007af8 <_free_r>
 8009b6c:	e7c7      	b.n	8009afe <__ssputs_r+0x46>
	...

08009b70 <_svfiprintf_r>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	4698      	mov	r8, r3
 8009b76:	898b      	ldrh	r3, [r1, #12]
 8009b78:	061b      	lsls	r3, r3, #24
 8009b7a:	b09d      	sub	sp, #116	; 0x74
 8009b7c:	4607      	mov	r7, r0
 8009b7e:	460d      	mov	r5, r1
 8009b80:	4614      	mov	r4, r2
 8009b82:	d50e      	bpl.n	8009ba2 <_svfiprintf_r+0x32>
 8009b84:	690b      	ldr	r3, [r1, #16]
 8009b86:	b963      	cbnz	r3, 8009ba2 <_svfiprintf_r+0x32>
 8009b88:	2140      	movs	r1, #64	; 0x40
 8009b8a:	f7fe f821 	bl	8007bd0 <_malloc_r>
 8009b8e:	6028      	str	r0, [r5, #0]
 8009b90:	6128      	str	r0, [r5, #16]
 8009b92:	b920      	cbnz	r0, 8009b9e <_svfiprintf_r+0x2e>
 8009b94:	230c      	movs	r3, #12
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9c:	e0d1      	b.n	8009d42 <_svfiprintf_r+0x1d2>
 8009b9e:	2340      	movs	r3, #64	; 0x40
 8009ba0:	616b      	str	r3, [r5, #20]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba6:	2320      	movs	r3, #32
 8009ba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bac:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bb0:	2330      	movs	r3, #48	; 0x30
 8009bb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d5c <_svfiprintf_r+0x1ec>
 8009bb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bba:	f04f 0901 	mov.w	r9, #1
 8009bbe:	4623      	mov	r3, r4
 8009bc0:	469a      	mov	sl, r3
 8009bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bc6:	b10a      	cbz	r2, 8009bcc <_svfiprintf_r+0x5c>
 8009bc8:	2a25      	cmp	r2, #37	; 0x25
 8009bca:	d1f9      	bne.n	8009bc0 <_svfiprintf_r+0x50>
 8009bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8009bd0:	d00b      	beq.n	8009bea <_svfiprintf_r+0x7a>
 8009bd2:	465b      	mov	r3, fp
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f7ff ff6d 	bl	8009ab8 <__ssputs_r>
 8009bde:	3001      	adds	r0, #1
 8009be0:	f000 80aa 	beq.w	8009d38 <_svfiprintf_r+0x1c8>
 8009be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009be6:	445a      	add	r2, fp
 8009be8:	9209      	str	r2, [sp, #36]	; 0x24
 8009bea:	f89a 3000 	ldrb.w	r3, [sl]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 80a2 	beq.w	8009d38 <_svfiprintf_r+0x1c8>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bfe:	f10a 0a01 	add.w	sl, sl, #1
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	9307      	str	r3, [sp, #28]
 8009c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8009c0c:	4654      	mov	r4, sl
 8009c0e:	2205      	movs	r2, #5
 8009c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c14:	4851      	ldr	r0, [pc, #324]	; (8009d5c <_svfiprintf_r+0x1ec>)
 8009c16:	f7f6 fb1b 	bl	8000250 <memchr>
 8009c1a:	9a04      	ldr	r2, [sp, #16]
 8009c1c:	b9d8      	cbnz	r0, 8009c56 <_svfiprintf_r+0xe6>
 8009c1e:	06d0      	lsls	r0, r2, #27
 8009c20:	bf44      	itt	mi
 8009c22:	2320      	movmi	r3, #32
 8009c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c28:	0711      	lsls	r1, r2, #28
 8009c2a:	bf44      	itt	mi
 8009c2c:	232b      	movmi	r3, #43	; 0x2b
 8009c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c32:	f89a 3000 	ldrb.w	r3, [sl]
 8009c36:	2b2a      	cmp	r3, #42	; 0x2a
 8009c38:	d015      	beq.n	8009c66 <_svfiprintf_r+0xf6>
 8009c3a:	9a07      	ldr	r2, [sp, #28]
 8009c3c:	4654      	mov	r4, sl
 8009c3e:	2000      	movs	r0, #0
 8009c40:	f04f 0c0a 	mov.w	ip, #10
 8009c44:	4621      	mov	r1, r4
 8009c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c4a:	3b30      	subs	r3, #48	; 0x30
 8009c4c:	2b09      	cmp	r3, #9
 8009c4e:	d94e      	bls.n	8009cee <_svfiprintf_r+0x17e>
 8009c50:	b1b0      	cbz	r0, 8009c80 <_svfiprintf_r+0x110>
 8009c52:	9207      	str	r2, [sp, #28]
 8009c54:	e014      	b.n	8009c80 <_svfiprintf_r+0x110>
 8009c56:	eba0 0308 	sub.w	r3, r0, r8
 8009c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	46a2      	mov	sl, r4
 8009c64:	e7d2      	b.n	8009c0c <_svfiprintf_r+0x9c>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	1d19      	adds	r1, r3, #4
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	9103      	str	r1, [sp, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	bfbb      	ittet	lt
 8009c72:	425b      	neglt	r3, r3
 8009c74:	f042 0202 	orrlt.w	r2, r2, #2
 8009c78:	9307      	strge	r3, [sp, #28]
 8009c7a:	9307      	strlt	r3, [sp, #28]
 8009c7c:	bfb8      	it	lt
 8009c7e:	9204      	strlt	r2, [sp, #16]
 8009c80:	7823      	ldrb	r3, [r4, #0]
 8009c82:	2b2e      	cmp	r3, #46	; 0x2e
 8009c84:	d10c      	bne.n	8009ca0 <_svfiprintf_r+0x130>
 8009c86:	7863      	ldrb	r3, [r4, #1]
 8009c88:	2b2a      	cmp	r3, #42	; 0x2a
 8009c8a:	d135      	bne.n	8009cf8 <_svfiprintf_r+0x188>
 8009c8c:	9b03      	ldr	r3, [sp, #12]
 8009c8e:	1d1a      	adds	r2, r3, #4
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	9203      	str	r2, [sp, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bfb8      	it	lt
 8009c98:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c9c:	3402      	adds	r4, #2
 8009c9e:	9305      	str	r3, [sp, #20]
 8009ca0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d6c <_svfiprintf_r+0x1fc>
 8009ca4:	7821      	ldrb	r1, [r4, #0]
 8009ca6:	2203      	movs	r2, #3
 8009ca8:	4650      	mov	r0, sl
 8009caa:	f7f6 fad1 	bl	8000250 <memchr>
 8009cae:	b140      	cbz	r0, 8009cc2 <_svfiprintf_r+0x152>
 8009cb0:	2340      	movs	r3, #64	; 0x40
 8009cb2:	eba0 000a 	sub.w	r0, r0, sl
 8009cb6:	fa03 f000 	lsl.w	r0, r3, r0
 8009cba:	9b04      	ldr	r3, [sp, #16]
 8009cbc:	4303      	orrs	r3, r0
 8009cbe:	3401      	adds	r4, #1
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc6:	4826      	ldr	r0, [pc, #152]	; (8009d60 <_svfiprintf_r+0x1f0>)
 8009cc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ccc:	2206      	movs	r2, #6
 8009cce:	f7f6 fabf 	bl	8000250 <memchr>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d038      	beq.n	8009d48 <_svfiprintf_r+0x1d8>
 8009cd6:	4b23      	ldr	r3, [pc, #140]	; (8009d64 <_svfiprintf_r+0x1f4>)
 8009cd8:	bb1b      	cbnz	r3, 8009d22 <_svfiprintf_r+0x1b2>
 8009cda:	9b03      	ldr	r3, [sp, #12]
 8009cdc:	3307      	adds	r3, #7
 8009cde:	f023 0307 	bic.w	r3, r3, #7
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	9303      	str	r3, [sp, #12]
 8009ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce8:	4433      	add	r3, r6
 8009cea:	9309      	str	r3, [sp, #36]	; 0x24
 8009cec:	e767      	b.n	8009bbe <_svfiprintf_r+0x4e>
 8009cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	e7a5      	b.n	8009c44 <_svfiprintf_r+0xd4>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	3401      	adds	r4, #1
 8009cfc:	9305      	str	r3, [sp, #20]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	f04f 0c0a 	mov.w	ip, #10
 8009d04:	4620      	mov	r0, r4
 8009d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d0a:	3a30      	subs	r2, #48	; 0x30
 8009d0c:	2a09      	cmp	r2, #9
 8009d0e:	d903      	bls.n	8009d18 <_svfiprintf_r+0x1a8>
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0c5      	beq.n	8009ca0 <_svfiprintf_r+0x130>
 8009d14:	9105      	str	r1, [sp, #20]
 8009d16:	e7c3      	b.n	8009ca0 <_svfiprintf_r+0x130>
 8009d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e7f0      	b.n	8009d04 <_svfiprintf_r+0x194>
 8009d22:	ab03      	add	r3, sp, #12
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	462a      	mov	r2, r5
 8009d28:	4b0f      	ldr	r3, [pc, #60]	; (8009d68 <_svfiprintf_r+0x1f8>)
 8009d2a:	a904      	add	r1, sp, #16
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	f7fe f853 	bl	8007dd8 <_printf_float>
 8009d32:	1c42      	adds	r2, r0, #1
 8009d34:	4606      	mov	r6, r0
 8009d36:	d1d6      	bne.n	8009ce6 <_svfiprintf_r+0x176>
 8009d38:	89ab      	ldrh	r3, [r5, #12]
 8009d3a:	065b      	lsls	r3, r3, #25
 8009d3c:	f53f af2c 	bmi.w	8009b98 <_svfiprintf_r+0x28>
 8009d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d42:	b01d      	add	sp, #116	; 0x74
 8009d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d48:	ab03      	add	r3, sp, #12
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <_svfiprintf_r+0x1f8>)
 8009d50:	a904      	add	r1, sp, #16
 8009d52:	4638      	mov	r0, r7
 8009d54:	f7fe facc 	bl	80082f0 <_printf_i>
 8009d58:	e7eb      	b.n	8009d32 <_svfiprintf_r+0x1c2>
 8009d5a:	bf00      	nop
 8009d5c:	0800c8ec 	.word	0x0800c8ec
 8009d60:	0800c8f6 	.word	0x0800c8f6
 8009d64:	08007dd9 	.word	0x08007dd9
 8009d68:	08009ab9 	.word	0x08009ab9
 8009d6c:	0800c8f2 	.word	0x0800c8f2

08009d70 <_sungetc_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	1c4b      	adds	r3, r1, #1
 8009d74:	4614      	mov	r4, r2
 8009d76:	d103      	bne.n	8009d80 <_sungetc_r+0x10>
 8009d78:	f04f 35ff 	mov.w	r5, #4294967295
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	8993      	ldrh	r3, [r2, #12]
 8009d82:	f023 0320 	bic.w	r3, r3, #32
 8009d86:	8193      	strh	r3, [r2, #12]
 8009d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d8a:	6852      	ldr	r2, [r2, #4]
 8009d8c:	b2cd      	uxtb	r5, r1
 8009d8e:	b18b      	cbz	r3, 8009db4 <_sungetc_r+0x44>
 8009d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d92:	4293      	cmp	r3, r2
 8009d94:	dd08      	ble.n	8009da8 <_sungetc_r+0x38>
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	1e5a      	subs	r2, r3, #1
 8009d9a:	6022      	str	r2, [r4, #0]
 8009d9c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009da0:	6863      	ldr	r3, [r4, #4]
 8009da2:	3301      	adds	r3, #1
 8009da4:	6063      	str	r3, [r4, #4]
 8009da6:	e7e9      	b.n	8009d7c <_sungetc_r+0xc>
 8009da8:	4621      	mov	r1, r4
 8009daa:	f000 fc71 	bl	800a690 <__submore>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d0f1      	beq.n	8009d96 <_sungetc_r+0x26>
 8009db2:	e7e1      	b.n	8009d78 <_sungetc_r+0x8>
 8009db4:	6921      	ldr	r1, [r4, #16]
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	b151      	cbz	r1, 8009dd0 <_sungetc_r+0x60>
 8009dba:	4299      	cmp	r1, r3
 8009dbc:	d208      	bcs.n	8009dd0 <_sungetc_r+0x60>
 8009dbe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009dc2:	42a9      	cmp	r1, r5
 8009dc4:	d104      	bne.n	8009dd0 <_sungetc_r+0x60>
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	3201      	adds	r2, #1
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	6062      	str	r2, [r4, #4]
 8009dce:	e7d5      	b.n	8009d7c <_sungetc_r+0xc>
 8009dd0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8009dda:	2303      	movs	r3, #3
 8009ddc:	63a3      	str	r3, [r4, #56]	; 0x38
 8009dde:	4623      	mov	r3, r4
 8009de0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	2301      	movs	r3, #1
 8009de8:	e7dc      	b.n	8009da4 <_sungetc_r+0x34>

08009dea <__ssrefill_r>:
 8009dea:	b510      	push	{r4, lr}
 8009dec:	460c      	mov	r4, r1
 8009dee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009df0:	b169      	cbz	r1, 8009e0e <__ssrefill_r+0x24>
 8009df2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009df6:	4299      	cmp	r1, r3
 8009df8:	d001      	beq.n	8009dfe <__ssrefill_r+0x14>
 8009dfa:	f7fd fe7d 	bl	8007af8 <_free_r>
 8009dfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e00:	6063      	str	r3, [r4, #4]
 8009e02:	2000      	movs	r0, #0
 8009e04:	6360      	str	r0, [r4, #52]	; 0x34
 8009e06:	b113      	cbz	r3, 8009e0e <__ssrefill_r+0x24>
 8009e08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	bd10      	pop	{r4, pc}
 8009e0e:	6923      	ldr	r3, [r4, #16]
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	2300      	movs	r3, #0
 8009e14:	6063      	str	r3, [r4, #4]
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	f043 0320 	orr.w	r3, r3, #32
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e22:	e7f3      	b.n	8009e0c <__ssrefill_r+0x22>

08009e24 <__ssvfiscanf_r>:
 8009e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e28:	460c      	mov	r4, r1
 8009e2a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009e2e:	2100      	movs	r1, #0
 8009e30:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009e34:	49a6      	ldr	r1, [pc, #664]	; (800a0d0 <__ssvfiscanf_r+0x2ac>)
 8009e36:	91a0      	str	r1, [sp, #640]	; 0x280
 8009e38:	f10d 0804 	add.w	r8, sp, #4
 8009e3c:	49a5      	ldr	r1, [pc, #660]	; (800a0d4 <__ssvfiscanf_r+0x2b0>)
 8009e3e:	4fa6      	ldr	r7, [pc, #664]	; (800a0d8 <__ssvfiscanf_r+0x2b4>)
 8009e40:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a0dc <__ssvfiscanf_r+0x2b8>
 8009e44:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009e48:	4606      	mov	r6, r0
 8009e4a:	91a1      	str	r1, [sp, #644]	; 0x284
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	7813      	ldrb	r3, [r2, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f000 815a 	beq.w	800a10a <__ssvfiscanf_r+0x2e6>
 8009e56:	5dd9      	ldrb	r1, [r3, r7]
 8009e58:	f011 0108 	ands.w	r1, r1, #8
 8009e5c:	f102 0501 	add.w	r5, r2, #1
 8009e60:	d019      	beq.n	8009e96 <__ssvfiscanf_r+0x72>
 8009e62:	6863      	ldr	r3, [r4, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dd0f      	ble.n	8009e88 <__ssvfiscanf_r+0x64>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	781a      	ldrb	r2, [r3, #0]
 8009e6c:	5cba      	ldrb	r2, [r7, r2]
 8009e6e:	0712      	lsls	r2, r2, #28
 8009e70:	d401      	bmi.n	8009e76 <__ssvfiscanf_r+0x52>
 8009e72:	462a      	mov	r2, r5
 8009e74:	e7eb      	b.n	8009e4e <__ssvfiscanf_r+0x2a>
 8009e76:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e78:	3201      	adds	r2, #1
 8009e7a:	9245      	str	r2, [sp, #276]	; 0x114
 8009e7c:	6862      	ldr	r2, [r4, #4]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	3a01      	subs	r2, #1
 8009e82:	6062      	str	r2, [r4, #4]
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	e7ec      	b.n	8009e62 <__ssvfiscanf_r+0x3e>
 8009e88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4798      	blx	r3
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d0e9      	beq.n	8009e68 <__ssvfiscanf_r+0x44>
 8009e94:	e7ed      	b.n	8009e72 <__ssvfiscanf_r+0x4e>
 8009e96:	2b25      	cmp	r3, #37	; 0x25
 8009e98:	d012      	beq.n	8009ec0 <__ssvfiscanf_r+0x9c>
 8009e9a:	469a      	mov	sl, r3
 8009e9c:	6863      	ldr	r3, [r4, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f340 8091 	ble.w	8009fc6 <__ssvfiscanf_r+0x1a2>
 8009ea4:	6822      	ldr	r2, [r4, #0]
 8009ea6:	7813      	ldrb	r3, [r2, #0]
 8009ea8:	4553      	cmp	r3, sl
 8009eaa:	f040 812e 	bne.w	800a10a <__ssvfiscanf_r+0x2e6>
 8009eae:	6863      	ldr	r3, [r4, #4]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	6063      	str	r3, [r4, #4]
 8009eb4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009eb6:	3201      	adds	r2, #1
 8009eb8:	3301      	adds	r3, #1
 8009eba:	6022      	str	r2, [r4, #0]
 8009ebc:	9345      	str	r3, [sp, #276]	; 0x114
 8009ebe:	e7d8      	b.n	8009e72 <__ssvfiscanf_r+0x4e>
 8009ec0:	9141      	str	r1, [sp, #260]	; 0x104
 8009ec2:	9143      	str	r1, [sp, #268]	; 0x10c
 8009ec4:	7853      	ldrb	r3, [r2, #1]
 8009ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ec8:	bf02      	ittt	eq
 8009eca:	2310      	moveq	r3, #16
 8009ecc:	1c95      	addeq	r5, r2, #2
 8009ece:	9341      	streq	r3, [sp, #260]	; 0x104
 8009ed0:	220a      	movs	r2, #10
 8009ed2:	46aa      	mov	sl, r5
 8009ed4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009ed8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009edc:	2b09      	cmp	r3, #9
 8009ede:	d91d      	bls.n	8009f1c <__ssvfiscanf_r+0xf8>
 8009ee0:	487e      	ldr	r0, [pc, #504]	; (800a0dc <__ssvfiscanf_r+0x2b8>)
 8009ee2:	2203      	movs	r2, #3
 8009ee4:	f7f6 f9b4 	bl	8000250 <memchr>
 8009ee8:	b140      	cbz	r0, 8009efc <__ssvfiscanf_r+0xd8>
 8009eea:	2301      	movs	r3, #1
 8009eec:	eba0 0009 	sub.w	r0, r0, r9
 8009ef0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ef4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ef6:	4318      	orrs	r0, r3
 8009ef8:	9041      	str	r0, [sp, #260]	; 0x104
 8009efa:	4655      	mov	r5, sl
 8009efc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f00:	2b78      	cmp	r3, #120	; 0x78
 8009f02:	d806      	bhi.n	8009f12 <__ssvfiscanf_r+0xee>
 8009f04:	2b57      	cmp	r3, #87	; 0x57
 8009f06:	d810      	bhi.n	8009f2a <__ssvfiscanf_r+0x106>
 8009f08:	2b25      	cmp	r3, #37	; 0x25
 8009f0a:	d0c6      	beq.n	8009e9a <__ssvfiscanf_r+0x76>
 8009f0c:	d856      	bhi.n	8009fbc <__ssvfiscanf_r+0x198>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d064      	beq.n	8009fdc <__ssvfiscanf_r+0x1b8>
 8009f12:	2303      	movs	r3, #3
 8009f14:	9347      	str	r3, [sp, #284]	; 0x11c
 8009f16:	230a      	movs	r3, #10
 8009f18:	9342      	str	r3, [sp, #264]	; 0x108
 8009f1a:	e071      	b.n	800a000 <__ssvfiscanf_r+0x1dc>
 8009f1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009f1e:	fb02 1103 	mla	r1, r2, r3, r1
 8009f22:	3930      	subs	r1, #48	; 0x30
 8009f24:	9143      	str	r1, [sp, #268]	; 0x10c
 8009f26:	4655      	mov	r5, sl
 8009f28:	e7d3      	b.n	8009ed2 <__ssvfiscanf_r+0xae>
 8009f2a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009f2e:	2a20      	cmp	r2, #32
 8009f30:	d8ef      	bhi.n	8009f12 <__ssvfiscanf_r+0xee>
 8009f32:	a101      	add	r1, pc, #4	; (adr r1, 8009f38 <__ssvfiscanf_r+0x114>)
 8009f34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f38:	08009feb 	.word	0x08009feb
 8009f3c:	08009f13 	.word	0x08009f13
 8009f40:	08009f13 	.word	0x08009f13
 8009f44:	0800a049 	.word	0x0800a049
 8009f48:	08009f13 	.word	0x08009f13
 8009f4c:	08009f13 	.word	0x08009f13
 8009f50:	08009f13 	.word	0x08009f13
 8009f54:	08009f13 	.word	0x08009f13
 8009f58:	08009f13 	.word	0x08009f13
 8009f5c:	08009f13 	.word	0x08009f13
 8009f60:	08009f13 	.word	0x08009f13
 8009f64:	0800a05f 	.word	0x0800a05f
 8009f68:	0800a035 	.word	0x0800a035
 8009f6c:	08009fc3 	.word	0x08009fc3
 8009f70:	08009fc3 	.word	0x08009fc3
 8009f74:	08009fc3 	.word	0x08009fc3
 8009f78:	08009f13 	.word	0x08009f13
 8009f7c:	0800a039 	.word	0x0800a039
 8009f80:	08009f13 	.word	0x08009f13
 8009f84:	08009f13 	.word	0x08009f13
 8009f88:	08009f13 	.word	0x08009f13
 8009f8c:	08009f13 	.word	0x08009f13
 8009f90:	0800a06f 	.word	0x0800a06f
 8009f94:	0800a041 	.word	0x0800a041
 8009f98:	08009fe3 	.word	0x08009fe3
 8009f9c:	08009f13 	.word	0x08009f13
 8009fa0:	08009f13 	.word	0x08009f13
 8009fa4:	0800a06b 	.word	0x0800a06b
 8009fa8:	08009f13 	.word	0x08009f13
 8009fac:	0800a035 	.word	0x0800a035
 8009fb0:	08009f13 	.word	0x08009f13
 8009fb4:	08009f13 	.word	0x08009f13
 8009fb8:	08009feb 	.word	0x08009feb
 8009fbc:	3b45      	subs	r3, #69	; 0x45
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d8a7      	bhi.n	8009f12 <__ssvfiscanf_r+0xee>
 8009fc2:	2305      	movs	r3, #5
 8009fc4:	e01b      	b.n	8009ffe <__ssvfiscanf_r+0x1da>
 8009fc6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4630      	mov	r0, r6
 8009fcc:	4798      	blx	r3
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	f43f af68 	beq.w	8009ea4 <__ssvfiscanf_r+0x80>
 8009fd4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	f040 808d 	bne.w	800a0f6 <__ssvfiscanf_r+0x2d2>
 8009fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe0:	e08f      	b.n	800a102 <__ssvfiscanf_r+0x2de>
 8009fe2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009fe4:	f042 0220 	orr.w	r2, r2, #32
 8009fe8:	9241      	str	r2, [sp, #260]	; 0x104
 8009fea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ff0:	9241      	str	r2, [sp, #260]	; 0x104
 8009ff2:	2210      	movs	r2, #16
 8009ff4:	2b6f      	cmp	r3, #111	; 0x6f
 8009ff6:	9242      	str	r2, [sp, #264]	; 0x108
 8009ff8:	bf34      	ite	cc
 8009ffa:	2303      	movcc	r3, #3
 8009ffc:	2304      	movcs	r3, #4
 8009ffe:	9347      	str	r3, [sp, #284]	; 0x11c
 800a000:	6863      	ldr	r3, [r4, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	dd42      	ble.n	800a08c <__ssvfiscanf_r+0x268>
 800a006:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a008:	0659      	lsls	r1, r3, #25
 800a00a:	d404      	bmi.n	800a016 <__ssvfiscanf_r+0x1f2>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	781a      	ldrb	r2, [r3, #0]
 800a010:	5cba      	ldrb	r2, [r7, r2]
 800a012:	0712      	lsls	r2, r2, #28
 800a014:	d441      	bmi.n	800a09a <__ssvfiscanf_r+0x276>
 800a016:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a018:	2b02      	cmp	r3, #2
 800a01a:	dc50      	bgt.n	800a0be <__ssvfiscanf_r+0x29a>
 800a01c:	466b      	mov	r3, sp
 800a01e:	4622      	mov	r2, r4
 800a020:	a941      	add	r1, sp, #260	; 0x104
 800a022:	4630      	mov	r0, r6
 800a024:	f000 f876 	bl	800a114 <_scanf_chars>
 800a028:	2801      	cmp	r0, #1
 800a02a:	d06e      	beq.n	800a10a <__ssvfiscanf_r+0x2e6>
 800a02c:	2802      	cmp	r0, #2
 800a02e:	f47f af20 	bne.w	8009e72 <__ssvfiscanf_r+0x4e>
 800a032:	e7cf      	b.n	8009fd4 <__ssvfiscanf_r+0x1b0>
 800a034:	220a      	movs	r2, #10
 800a036:	e7dd      	b.n	8009ff4 <__ssvfiscanf_r+0x1d0>
 800a038:	2300      	movs	r3, #0
 800a03a:	9342      	str	r3, [sp, #264]	; 0x108
 800a03c:	2303      	movs	r3, #3
 800a03e:	e7de      	b.n	8009ffe <__ssvfiscanf_r+0x1da>
 800a040:	2308      	movs	r3, #8
 800a042:	9342      	str	r3, [sp, #264]	; 0x108
 800a044:	2304      	movs	r3, #4
 800a046:	e7da      	b.n	8009ffe <__ssvfiscanf_r+0x1da>
 800a048:	4629      	mov	r1, r5
 800a04a:	4640      	mov	r0, r8
 800a04c:	f000 f9f0 	bl	800a430 <__sccl>
 800a050:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a056:	9341      	str	r3, [sp, #260]	; 0x104
 800a058:	4605      	mov	r5, r0
 800a05a:	2301      	movs	r3, #1
 800a05c:	e7cf      	b.n	8009ffe <__ssvfiscanf_r+0x1da>
 800a05e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a064:	9341      	str	r3, [sp, #260]	; 0x104
 800a066:	2300      	movs	r3, #0
 800a068:	e7c9      	b.n	8009ffe <__ssvfiscanf_r+0x1da>
 800a06a:	2302      	movs	r3, #2
 800a06c:	e7c7      	b.n	8009ffe <__ssvfiscanf_r+0x1da>
 800a06e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a070:	06c3      	lsls	r3, r0, #27
 800a072:	f53f aefe 	bmi.w	8009e72 <__ssvfiscanf_r+0x4e>
 800a076:	9b00      	ldr	r3, [sp, #0]
 800a078:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a07a:	1d19      	adds	r1, r3, #4
 800a07c:	9100      	str	r1, [sp, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f010 0f01 	tst.w	r0, #1
 800a084:	bf14      	ite	ne
 800a086:	801a      	strhne	r2, [r3, #0]
 800a088:	601a      	streq	r2, [r3, #0]
 800a08a:	e6f2      	b.n	8009e72 <__ssvfiscanf_r+0x4e>
 800a08c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a08e:	4621      	mov	r1, r4
 800a090:	4630      	mov	r0, r6
 800a092:	4798      	blx	r3
 800a094:	2800      	cmp	r0, #0
 800a096:	d0b6      	beq.n	800a006 <__ssvfiscanf_r+0x1e2>
 800a098:	e79c      	b.n	8009fd4 <__ssvfiscanf_r+0x1b0>
 800a09a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a09c:	3201      	adds	r2, #1
 800a09e:	9245      	str	r2, [sp, #276]	; 0x114
 800a0a0:	6862      	ldr	r2, [r4, #4]
 800a0a2:	3a01      	subs	r2, #1
 800a0a4:	2a00      	cmp	r2, #0
 800a0a6:	6062      	str	r2, [r4, #4]
 800a0a8:	dd02      	ble.n	800a0b0 <__ssvfiscanf_r+0x28c>
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	e7ad      	b.n	800a00c <__ssvfiscanf_r+0x1e8>
 800a0b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	4798      	blx	r3
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d0a7      	beq.n	800a00c <__ssvfiscanf_r+0x1e8>
 800a0bc:	e78a      	b.n	8009fd4 <__ssvfiscanf_r+0x1b0>
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	dc0e      	bgt.n	800a0e0 <__ssvfiscanf_r+0x2bc>
 800a0c2:	466b      	mov	r3, sp
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	a941      	add	r1, sp, #260	; 0x104
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f000 f87d 	bl	800a1c8 <_scanf_i>
 800a0ce:	e7ab      	b.n	800a028 <__ssvfiscanf_r+0x204>
 800a0d0:	08009d71 	.word	0x08009d71
 800a0d4:	08009deb 	.word	0x08009deb
 800a0d8:	0800c955 	.word	0x0800c955
 800a0dc:	0800c8f2 	.word	0x0800c8f2
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <__ssvfiscanf_r+0x2ec>)
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f43f aec5 	beq.w	8009e72 <__ssvfiscanf_r+0x4e>
 800a0e8:	466b      	mov	r3, sp
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	a941      	add	r1, sp, #260	; 0x104
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f3af 8000 	nop.w
 800a0f4:	e798      	b.n	800a028 <__ssvfiscanf_r+0x204>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a0fc:	bf18      	it	ne
 800a0fe:	f04f 30ff 	movne.w	r0, #4294967295
 800a102:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a10c:	e7f9      	b.n	800a102 <__ssvfiscanf_r+0x2de>
 800a10e:	bf00      	nop
 800a110:	00000000 	.word	0x00000000

0800a114 <_scanf_chars>:
 800a114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a118:	4615      	mov	r5, r2
 800a11a:	688a      	ldr	r2, [r1, #8]
 800a11c:	4680      	mov	r8, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	b932      	cbnz	r2, 800a130 <_scanf_chars+0x1c>
 800a122:	698a      	ldr	r2, [r1, #24]
 800a124:	2a00      	cmp	r2, #0
 800a126:	bf0c      	ite	eq
 800a128:	2201      	moveq	r2, #1
 800a12a:	f04f 32ff 	movne.w	r2, #4294967295
 800a12e:	608a      	str	r2, [r1, #8]
 800a130:	6822      	ldr	r2, [r4, #0]
 800a132:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a1c4 <_scanf_chars+0xb0>
 800a136:	06d1      	lsls	r1, r2, #27
 800a138:	bf5f      	itttt	pl
 800a13a:	681a      	ldrpl	r2, [r3, #0]
 800a13c:	1d11      	addpl	r1, r2, #4
 800a13e:	6019      	strpl	r1, [r3, #0]
 800a140:	6816      	ldrpl	r6, [r2, #0]
 800a142:	2700      	movs	r7, #0
 800a144:	69a0      	ldr	r0, [r4, #24]
 800a146:	b188      	cbz	r0, 800a16c <_scanf_chars+0x58>
 800a148:	2801      	cmp	r0, #1
 800a14a:	d107      	bne.n	800a15c <_scanf_chars+0x48>
 800a14c:	682a      	ldr	r2, [r5, #0]
 800a14e:	7811      	ldrb	r1, [r2, #0]
 800a150:	6962      	ldr	r2, [r4, #20]
 800a152:	5c52      	ldrb	r2, [r2, r1]
 800a154:	b952      	cbnz	r2, 800a16c <_scanf_chars+0x58>
 800a156:	2f00      	cmp	r7, #0
 800a158:	d031      	beq.n	800a1be <_scanf_chars+0xaa>
 800a15a:	e022      	b.n	800a1a2 <_scanf_chars+0x8e>
 800a15c:	2802      	cmp	r0, #2
 800a15e:	d120      	bne.n	800a1a2 <_scanf_chars+0x8e>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a168:	071b      	lsls	r3, r3, #28
 800a16a:	d41a      	bmi.n	800a1a2 <_scanf_chars+0x8e>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	06da      	lsls	r2, r3, #27
 800a170:	bf5e      	ittt	pl
 800a172:	682b      	ldrpl	r3, [r5, #0]
 800a174:	781b      	ldrbpl	r3, [r3, #0]
 800a176:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a17a:	682a      	ldr	r2, [r5, #0]
 800a17c:	686b      	ldr	r3, [r5, #4]
 800a17e:	3201      	adds	r2, #1
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	68a2      	ldr	r2, [r4, #8]
 800a184:	3b01      	subs	r3, #1
 800a186:	3a01      	subs	r2, #1
 800a188:	606b      	str	r3, [r5, #4]
 800a18a:	3701      	adds	r7, #1
 800a18c:	60a2      	str	r2, [r4, #8]
 800a18e:	b142      	cbz	r2, 800a1a2 <_scanf_chars+0x8e>
 800a190:	2b00      	cmp	r3, #0
 800a192:	dcd7      	bgt.n	800a144 <_scanf_chars+0x30>
 800a194:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a198:	4629      	mov	r1, r5
 800a19a:	4640      	mov	r0, r8
 800a19c:	4798      	blx	r3
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d0d0      	beq.n	800a144 <_scanf_chars+0x30>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	f013 0310 	ands.w	r3, r3, #16
 800a1a8:	d105      	bne.n	800a1b6 <_scanf_chars+0xa2>
 800a1aa:	68e2      	ldr	r2, [r4, #12]
 800a1ac:	3201      	adds	r2, #1
 800a1ae:	60e2      	str	r2, [r4, #12]
 800a1b0:	69a2      	ldr	r2, [r4, #24]
 800a1b2:	b102      	cbz	r2, 800a1b6 <_scanf_chars+0xa2>
 800a1b4:	7033      	strb	r3, [r6, #0]
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	443b      	add	r3, r7
 800a1ba:	6123      	str	r3, [r4, #16]
 800a1bc:	2000      	movs	r0, #0
 800a1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1c2:	bf00      	nop
 800a1c4:	0800c955 	.word	0x0800c955

0800a1c8 <_scanf_i>:
 800a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1cc:	4698      	mov	r8, r3
 800a1ce:	4b76      	ldr	r3, [pc, #472]	; (800a3a8 <_scanf_i+0x1e0>)
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	4682      	mov	sl, r0
 800a1d4:	4616      	mov	r6, r2
 800a1d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	ab03      	add	r3, sp, #12
 800a1de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a1e2:	4b72      	ldr	r3, [pc, #456]	; (800a3ac <_scanf_i+0x1e4>)
 800a1e4:	69a1      	ldr	r1, [r4, #24]
 800a1e6:	4a72      	ldr	r2, [pc, #456]	; (800a3b0 <_scanf_i+0x1e8>)
 800a1e8:	2903      	cmp	r1, #3
 800a1ea:	bf18      	it	ne
 800a1ec:	461a      	movne	r2, r3
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	9201      	str	r2, [sp, #4]
 800a1f2:	1e5a      	subs	r2, r3, #1
 800a1f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a1f8:	bf88      	it	hi
 800a1fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a1fe:	4627      	mov	r7, r4
 800a200:	bf82      	ittt	hi
 800a202:	eb03 0905 	addhi.w	r9, r3, r5
 800a206:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a20a:	60a3      	strhi	r3, [r4, #8]
 800a20c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a210:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a214:	bf98      	it	ls
 800a216:	f04f 0900 	movls.w	r9, #0
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	463d      	mov	r5, r7
 800a21e:	f04f 0b00 	mov.w	fp, #0
 800a222:	6831      	ldr	r1, [r6, #0]
 800a224:	ab03      	add	r3, sp, #12
 800a226:	7809      	ldrb	r1, [r1, #0]
 800a228:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a22c:	2202      	movs	r2, #2
 800a22e:	f7f6 f80f 	bl	8000250 <memchr>
 800a232:	b328      	cbz	r0, 800a280 <_scanf_i+0xb8>
 800a234:	f1bb 0f01 	cmp.w	fp, #1
 800a238:	d159      	bne.n	800a2ee <_scanf_i+0x126>
 800a23a:	6862      	ldr	r2, [r4, #4]
 800a23c:	b92a      	cbnz	r2, 800a24a <_scanf_i+0x82>
 800a23e:	6822      	ldr	r2, [r4, #0]
 800a240:	2308      	movs	r3, #8
 800a242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a246:	6063      	str	r3, [r4, #4]
 800a248:	6022      	str	r2, [r4, #0]
 800a24a:	6822      	ldr	r2, [r4, #0]
 800a24c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a250:	6022      	str	r2, [r4, #0]
 800a252:	68a2      	ldr	r2, [r4, #8]
 800a254:	1e51      	subs	r1, r2, #1
 800a256:	60a1      	str	r1, [r4, #8]
 800a258:	b192      	cbz	r2, 800a280 <_scanf_i+0xb8>
 800a25a:	6832      	ldr	r2, [r6, #0]
 800a25c:	1c51      	adds	r1, r2, #1
 800a25e:	6031      	str	r1, [r6, #0]
 800a260:	7812      	ldrb	r2, [r2, #0]
 800a262:	f805 2b01 	strb.w	r2, [r5], #1
 800a266:	6872      	ldr	r2, [r6, #4]
 800a268:	3a01      	subs	r2, #1
 800a26a:	2a00      	cmp	r2, #0
 800a26c:	6072      	str	r2, [r6, #4]
 800a26e:	dc07      	bgt.n	800a280 <_scanf_i+0xb8>
 800a270:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a274:	4631      	mov	r1, r6
 800a276:	4650      	mov	r0, sl
 800a278:	4790      	blx	r2
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f040 8085 	bne.w	800a38a <_scanf_i+0x1c2>
 800a280:	f10b 0b01 	add.w	fp, fp, #1
 800a284:	f1bb 0f03 	cmp.w	fp, #3
 800a288:	d1cb      	bne.n	800a222 <_scanf_i+0x5a>
 800a28a:	6863      	ldr	r3, [r4, #4]
 800a28c:	b90b      	cbnz	r3, 800a292 <_scanf_i+0xca>
 800a28e:	230a      	movs	r3, #10
 800a290:	6063      	str	r3, [r4, #4]
 800a292:	6863      	ldr	r3, [r4, #4]
 800a294:	4947      	ldr	r1, [pc, #284]	; (800a3b4 <_scanf_i+0x1ec>)
 800a296:	6960      	ldr	r0, [r4, #20]
 800a298:	1ac9      	subs	r1, r1, r3
 800a29a:	f000 f8c9 	bl	800a430 <__sccl>
 800a29e:	f04f 0b00 	mov.w	fp, #0
 800a2a2:	68a3      	ldr	r3, [r4, #8]
 800a2a4:	6822      	ldr	r2, [r4, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d03d      	beq.n	800a326 <_scanf_i+0x15e>
 800a2aa:	6831      	ldr	r1, [r6, #0]
 800a2ac:	6960      	ldr	r0, [r4, #20]
 800a2ae:	f891 c000 	ldrb.w	ip, [r1]
 800a2b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d035      	beq.n	800a326 <_scanf_i+0x15e>
 800a2ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a2be:	d124      	bne.n	800a30a <_scanf_i+0x142>
 800a2c0:	0510      	lsls	r0, r2, #20
 800a2c2:	d522      	bpl.n	800a30a <_scanf_i+0x142>
 800a2c4:	f10b 0b01 	add.w	fp, fp, #1
 800a2c8:	f1b9 0f00 	cmp.w	r9, #0
 800a2cc:	d003      	beq.n	800a2d6 <_scanf_i+0x10e>
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a2d4:	60a3      	str	r3, [r4, #8]
 800a2d6:	6873      	ldr	r3, [r6, #4]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	6073      	str	r3, [r6, #4]
 800a2de:	dd1b      	ble.n	800a318 <_scanf_i+0x150>
 800a2e0:	6833      	ldr	r3, [r6, #0]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	6033      	str	r3, [r6, #0]
 800a2e6:	68a3      	ldr	r3, [r4, #8]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	60a3      	str	r3, [r4, #8]
 800a2ec:	e7d9      	b.n	800a2a2 <_scanf_i+0xda>
 800a2ee:	f1bb 0f02 	cmp.w	fp, #2
 800a2f2:	d1ae      	bne.n	800a252 <_scanf_i+0x8a>
 800a2f4:	6822      	ldr	r2, [r4, #0]
 800a2f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a2fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a2fe:	d1bf      	bne.n	800a280 <_scanf_i+0xb8>
 800a300:	2310      	movs	r3, #16
 800a302:	6063      	str	r3, [r4, #4]
 800a304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a308:	e7a2      	b.n	800a250 <_scanf_i+0x88>
 800a30a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a30e:	6022      	str	r2, [r4, #0]
 800a310:	780b      	ldrb	r3, [r1, #0]
 800a312:	f805 3b01 	strb.w	r3, [r5], #1
 800a316:	e7de      	b.n	800a2d6 <_scanf_i+0x10e>
 800a318:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a31c:	4631      	mov	r1, r6
 800a31e:	4650      	mov	r0, sl
 800a320:	4798      	blx	r3
 800a322:	2800      	cmp	r0, #0
 800a324:	d0df      	beq.n	800a2e6 <_scanf_i+0x11e>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	05db      	lsls	r3, r3, #23
 800a32a:	d50d      	bpl.n	800a348 <_scanf_i+0x180>
 800a32c:	42bd      	cmp	r5, r7
 800a32e:	d909      	bls.n	800a344 <_scanf_i+0x17c>
 800a330:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a334:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a338:	4632      	mov	r2, r6
 800a33a:	4650      	mov	r0, sl
 800a33c:	4798      	blx	r3
 800a33e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a342:	464d      	mov	r5, r9
 800a344:	42bd      	cmp	r5, r7
 800a346:	d02d      	beq.n	800a3a4 <_scanf_i+0x1dc>
 800a348:	6822      	ldr	r2, [r4, #0]
 800a34a:	f012 0210 	ands.w	r2, r2, #16
 800a34e:	d113      	bne.n	800a378 <_scanf_i+0x1b0>
 800a350:	702a      	strb	r2, [r5, #0]
 800a352:	6863      	ldr	r3, [r4, #4]
 800a354:	9e01      	ldr	r6, [sp, #4]
 800a356:	4639      	mov	r1, r7
 800a358:	4650      	mov	r0, sl
 800a35a:	47b0      	blx	r6
 800a35c:	6821      	ldr	r1, [r4, #0]
 800a35e:	f8d8 3000 	ldr.w	r3, [r8]
 800a362:	f011 0f20 	tst.w	r1, #32
 800a366:	d013      	beq.n	800a390 <_scanf_i+0x1c8>
 800a368:	1d1a      	adds	r2, r3, #4
 800a36a:	f8c8 2000 	str.w	r2, [r8]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6018      	str	r0, [r3, #0]
 800a372:	68e3      	ldr	r3, [r4, #12]
 800a374:	3301      	adds	r3, #1
 800a376:	60e3      	str	r3, [r4, #12]
 800a378:	1bed      	subs	r5, r5, r7
 800a37a:	44ab      	add	fp, r5
 800a37c:	6925      	ldr	r5, [r4, #16]
 800a37e:	445d      	add	r5, fp
 800a380:	6125      	str	r5, [r4, #16]
 800a382:	2000      	movs	r0, #0
 800a384:	b007      	add	sp, #28
 800a386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38a:	f04f 0b00 	mov.w	fp, #0
 800a38e:	e7ca      	b.n	800a326 <_scanf_i+0x15e>
 800a390:	1d1a      	adds	r2, r3, #4
 800a392:	f8c8 2000 	str.w	r2, [r8]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f011 0f01 	tst.w	r1, #1
 800a39c:	bf14      	ite	ne
 800a39e:	8018      	strhne	r0, [r3, #0]
 800a3a0:	6018      	streq	r0, [r3, #0]
 800a3a2:	e7e6      	b.n	800a372 <_scanf_i+0x1aa>
 800a3a4:	2001      	movs	r0, #1
 800a3a6:	e7ed      	b.n	800a384 <_scanf_i+0x1bc>
 800a3a8:	0800b258 	.word	0x0800b258
 800a3ac:	0800a68d 	.word	0x0800a68d
 800a3b0:	0800a5a5 	.word	0x0800a5a5
 800a3b4:	0800c916 	.word	0x0800c916

0800a3b8 <_read_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d07      	ldr	r5, [pc, #28]	; (800a3d8 <_read_r+0x20>)
 800a3bc:	4604      	mov	r4, r0
 800a3be:	4608      	mov	r0, r1
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	602a      	str	r2, [r5, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f000 ff18 	bl	800b1fc <_read>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_read_r+0x1e>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_read_r+0x1e>
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	20004d88 	.word	0x20004d88

0800a3dc <__fpclassifyd>:
 800a3dc:	ec51 0b10 	vmov	r0, r1, d0
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	d019      	beq.n	800a41e <__fpclassifyd+0x42>
 800a3ea:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800a3ee:	490e      	ldr	r1, [pc, #56]	; (800a428 <__fpclassifyd+0x4c>)
 800a3f0:	428a      	cmp	r2, r1
 800a3f2:	d90e      	bls.n	800a412 <__fpclassifyd+0x36>
 800a3f4:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800a3f8:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800a3fc:	428a      	cmp	r2, r1
 800a3fe:	d908      	bls.n	800a412 <__fpclassifyd+0x36>
 800a400:	4a0a      	ldr	r2, [pc, #40]	; (800a42c <__fpclassifyd+0x50>)
 800a402:	4213      	tst	r3, r2
 800a404:	d007      	beq.n	800a416 <__fpclassifyd+0x3a>
 800a406:	4294      	cmp	r4, r2
 800a408:	d107      	bne.n	800a41a <__fpclassifyd+0x3e>
 800a40a:	fab0 f080 	clz	r0, r0
 800a40e:	0940      	lsrs	r0, r0, #5
 800a410:	bd10      	pop	{r4, pc}
 800a412:	2004      	movs	r0, #4
 800a414:	e7fc      	b.n	800a410 <__fpclassifyd+0x34>
 800a416:	2003      	movs	r0, #3
 800a418:	e7fa      	b.n	800a410 <__fpclassifyd+0x34>
 800a41a:	2000      	movs	r0, #0
 800a41c:	e7f8      	b.n	800a410 <__fpclassifyd+0x34>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d1ee      	bne.n	800a400 <__fpclassifyd+0x24>
 800a422:	2002      	movs	r0, #2
 800a424:	e7f4      	b.n	800a410 <__fpclassifyd+0x34>
 800a426:	bf00      	nop
 800a428:	7fdfffff 	.word	0x7fdfffff
 800a42c:	7ff00000 	.word	0x7ff00000

0800a430 <__sccl>:
 800a430:	b570      	push	{r4, r5, r6, lr}
 800a432:	780b      	ldrb	r3, [r1, #0]
 800a434:	4604      	mov	r4, r0
 800a436:	2b5e      	cmp	r3, #94	; 0x5e
 800a438:	bf0b      	itete	eq
 800a43a:	784b      	ldrbeq	r3, [r1, #1]
 800a43c:	1c48      	addne	r0, r1, #1
 800a43e:	1c88      	addeq	r0, r1, #2
 800a440:	2200      	movne	r2, #0
 800a442:	bf08      	it	eq
 800a444:	2201      	moveq	r2, #1
 800a446:	1e61      	subs	r1, r4, #1
 800a448:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a44c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a450:	42a9      	cmp	r1, r5
 800a452:	d1fb      	bne.n	800a44c <__sccl+0x1c>
 800a454:	b90b      	cbnz	r3, 800a45a <__sccl+0x2a>
 800a456:	3801      	subs	r0, #1
 800a458:	bd70      	pop	{r4, r5, r6, pc}
 800a45a:	f082 0201 	eor.w	r2, r2, #1
 800a45e:	54e2      	strb	r2, [r4, r3]
 800a460:	4605      	mov	r5, r0
 800a462:	4628      	mov	r0, r5
 800a464:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a468:	292d      	cmp	r1, #45	; 0x2d
 800a46a:	d006      	beq.n	800a47a <__sccl+0x4a>
 800a46c:	295d      	cmp	r1, #93	; 0x5d
 800a46e:	d0f3      	beq.n	800a458 <__sccl+0x28>
 800a470:	b909      	cbnz	r1, 800a476 <__sccl+0x46>
 800a472:	4628      	mov	r0, r5
 800a474:	e7f0      	b.n	800a458 <__sccl+0x28>
 800a476:	460b      	mov	r3, r1
 800a478:	e7f1      	b.n	800a45e <__sccl+0x2e>
 800a47a:	786e      	ldrb	r6, [r5, #1]
 800a47c:	2e5d      	cmp	r6, #93	; 0x5d
 800a47e:	d0fa      	beq.n	800a476 <__sccl+0x46>
 800a480:	42b3      	cmp	r3, r6
 800a482:	dcf8      	bgt.n	800a476 <__sccl+0x46>
 800a484:	3502      	adds	r5, #2
 800a486:	4619      	mov	r1, r3
 800a488:	3101      	adds	r1, #1
 800a48a:	428e      	cmp	r6, r1
 800a48c:	5462      	strb	r2, [r4, r1]
 800a48e:	dcfb      	bgt.n	800a488 <__sccl+0x58>
 800a490:	1af1      	subs	r1, r6, r3
 800a492:	3901      	subs	r1, #1
 800a494:	1c58      	adds	r0, r3, #1
 800a496:	42b3      	cmp	r3, r6
 800a498:	bfa8      	it	ge
 800a49a:	2100      	movge	r1, #0
 800a49c:	1843      	adds	r3, r0, r1
 800a49e:	e7e0      	b.n	800a462 <__sccl+0x32>

0800a4a0 <_strtol_l.constprop.0>:
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a6:	d001      	beq.n	800a4ac <_strtol_l.constprop.0+0xc>
 800a4a8:	2b24      	cmp	r3, #36	; 0x24
 800a4aa:	d906      	bls.n	800a4ba <_strtol_l.constprop.0+0x1a>
 800a4ac:	f000 f948 	bl	800a740 <__errno>
 800a4b0:	2316      	movs	r3, #22
 800a4b2:	6003      	str	r3, [r0, #0]
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a5a0 <_strtol_l.constprop.0+0x100>
 800a4be:	460d      	mov	r5, r1
 800a4c0:	462e      	mov	r6, r5
 800a4c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a4ca:	f017 0708 	ands.w	r7, r7, #8
 800a4ce:	d1f7      	bne.n	800a4c0 <_strtol_l.constprop.0+0x20>
 800a4d0:	2c2d      	cmp	r4, #45	; 0x2d
 800a4d2:	d132      	bne.n	800a53a <_strtol_l.constprop.0+0x9a>
 800a4d4:	782c      	ldrb	r4, [r5, #0]
 800a4d6:	2701      	movs	r7, #1
 800a4d8:	1cb5      	adds	r5, r6, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d05b      	beq.n	800a596 <_strtol_l.constprop.0+0xf6>
 800a4de:	2b10      	cmp	r3, #16
 800a4e0:	d109      	bne.n	800a4f6 <_strtol_l.constprop.0+0x56>
 800a4e2:	2c30      	cmp	r4, #48	; 0x30
 800a4e4:	d107      	bne.n	800a4f6 <_strtol_l.constprop.0+0x56>
 800a4e6:	782c      	ldrb	r4, [r5, #0]
 800a4e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a4ec:	2c58      	cmp	r4, #88	; 0x58
 800a4ee:	d14d      	bne.n	800a58c <_strtol_l.constprop.0+0xec>
 800a4f0:	786c      	ldrb	r4, [r5, #1]
 800a4f2:	2310      	movs	r3, #16
 800a4f4:	3502      	adds	r5, #2
 800a4f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a4fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4fe:	f04f 0c00 	mov.w	ip, #0
 800a502:	fbb8 f9f3 	udiv	r9, r8, r3
 800a506:	4666      	mov	r6, ip
 800a508:	fb03 8a19 	mls	sl, r3, r9, r8
 800a50c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a510:	f1be 0f09 	cmp.w	lr, #9
 800a514:	d816      	bhi.n	800a544 <_strtol_l.constprop.0+0xa4>
 800a516:	4674      	mov	r4, lr
 800a518:	42a3      	cmp	r3, r4
 800a51a:	dd24      	ble.n	800a566 <_strtol_l.constprop.0+0xc6>
 800a51c:	f1bc 0f00 	cmp.w	ip, #0
 800a520:	db1e      	blt.n	800a560 <_strtol_l.constprop.0+0xc0>
 800a522:	45b1      	cmp	r9, r6
 800a524:	d31c      	bcc.n	800a560 <_strtol_l.constprop.0+0xc0>
 800a526:	d101      	bne.n	800a52c <_strtol_l.constprop.0+0x8c>
 800a528:	45a2      	cmp	sl, r4
 800a52a:	db19      	blt.n	800a560 <_strtol_l.constprop.0+0xc0>
 800a52c:	fb06 4603 	mla	r6, r6, r3, r4
 800a530:	f04f 0c01 	mov.w	ip, #1
 800a534:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a538:	e7e8      	b.n	800a50c <_strtol_l.constprop.0+0x6c>
 800a53a:	2c2b      	cmp	r4, #43	; 0x2b
 800a53c:	bf04      	itt	eq
 800a53e:	782c      	ldrbeq	r4, [r5, #0]
 800a540:	1cb5      	addeq	r5, r6, #2
 800a542:	e7ca      	b.n	800a4da <_strtol_l.constprop.0+0x3a>
 800a544:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a548:	f1be 0f19 	cmp.w	lr, #25
 800a54c:	d801      	bhi.n	800a552 <_strtol_l.constprop.0+0xb2>
 800a54e:	3c37      	subs	r4, #55	; 0x37
 800a550:	e7e2      	b.n	800a518 <_strtol_l.constprop.0+0x78>
 800a552:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a556:	f1be 0f19 	cmp.w	lr, #25
 800a55a:	d804      	bhi.n	800a566 <_strtol_l.constprop.0+0xc6>
 800a55c:	3c57      	subs	r4, #87	; 0x57
 800a55e:	e7db      	b.n	800a518 <_strtol_l.constprop.0+0x78>
 800a560:	f04f 3cff 	mov.w	ip, #4294967295
 800a564:	e7e6      	b.n	800a534 <_strtol_l.constprop.0+0x94>
 800a566:	f1bc 0f00 	cmp.w	ip, #0
 800a56a:	da05      	bge.n	800a578 <_strtol_l.constprop.0+0xd8>
 800a56c:	2322      	movs	r3, #34	; 0x22
 800a56e:	6003      	str	r3, [r0, #0]
 800a570:	4646      	mov	r6, r8
 800a572:	b942      	cbnz	r2, 800a586 <_strtol_l.constprop.0+0xe6>
 800a574:	4630      	mov	r0, r6
 800a576:	e79e      	b.n	800a4b6 <_strtol_l.constprop.0+0x16>
 800a578:	b107      	cbz	r7, 800a57c <_strtol_l.constprop.0+0xdc>
 800a57a:	4276      	negs	r6, r6
 800a57c:	2a00      	cmp	r2, #0
 800a57e:	d0f9      	beq.n	800a574 <_strtol_l.constprop.0+0xd4>
 800a580:	f1bc 0f00 	cmp.w	ip, #0
 800a584:	d000      	beq.n	800a588 <_strtol_l.constprop.0+0xe8>
 800a586:	1e69      	subs	r1, r5, #1
 800a588:	6011      	str	r1, [r2, #0]
 800a58a:	e7f3      	b.n	800a574 <_strtol_l.constprop.0+0xd4>
 800a58c:	2430      	movs	r4, #48	; 0x30
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1b1      	bne.n	800a4f6 <_strtol_l.constprop.0+0x56>
 800a592:	2308      	movs	r3, #8
 800a594:	e7af      	b.n	800a4f6 <_strtol_l.constprop.0+0x56>
 800a596:	2c30      	cmp	r4, #48	; 0x30
 800a598:	d0a5      	beq.n	800a4e6 <_strtol_l.constprop.0+0x46>
 800a59a:	230a      	movs	r3, #10
 800a59c:	e7ab      	b.n	800a4f6 <_strtol_l.constprop.0+0x56>
 800a59e:	bf00      	nop
 800a5a0:	0800c955 	.word	0x0800c955

0800a5a4 <_strtol_r>:
 800a5a4:	f7ff bf7c 	b.w	800a4a0 <_strtol_l.constprop.0>

0800a5a8 <_strtoul_l.constprop.0>:
 800a5a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5ac:	4f36      	ldr	r7, [pc, #216]	; (800a688 <_strtoul_l.constprop.0+0xe0>)
 800a5ae:	4686      	mov	lr, r0
 800a5b0:	460d      	mov	r5, r1
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5b8:	5de6      	ldrb	r6, [r4, r7]
 800a5ba:	f016 0608 	ands.w	r6, r6, #8
 800a5be:	d1f8      	bne.n	800a5b2 <_strtoul_l.constprop.0+0xa>
 800a5c0:	2c2d      	cmp	r4, #45	; 0x2d
 800a5c2:	d12f      	bne.n	800a624 <_strtoul_l.constprop.0+0x7c>
 800a5c4:	782c      	ldrb	r4, [r5, #0]
 800a5c6:	2601      	movs	r6, #1
 800a5c8:	1c85      	adds	r5, r0, #2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d057      	beq.n	800a67e <_strtoul_l.constprop.0+0xd6>
 800a5ce:	2b10      	cmp	r3, #16
 800a5d0:	d109      	bne.n	800a5e6 <_strtoul_l.constprop.0+0x3e>
 800a5d2:	2c30      	cmp	r4, #48	; 0x30
 800a5d4:	d107      	bne.n	800a5e6 <_strtoul_l.constprop.0+0x3e>
 800a5d6:	7828      	ldrb	r0, [r5, #0]
 800a5d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a5dc:	2858      	cmp	r0, #88	; 0x58
 800a5de:	d149      	bne.n	800a674 <_strtoul_l.constprop.0+0xcc>
 800a5e0:	786c      	ldrb	r4, [r5, #1]
 800a5e2:	2310      	movs	r3, #16
 800a5e4:	3502      	adds	r5, #2
 800a5e6:	f04f 38ff 	mov.w	r8, #4294967295
 800a5ea:	2700      	movs	r7, #0
 800a5ec:	fbb8 f8f3 	udiv	r8, r8, r3
 800a5f0:	fb03 f908 	mul.w	r9, r3, r8
 800a5f4:	ea6f 0909 	mvn.w	r9, r9
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a5fe:	f1bc 0f09 	cmp.w	ip, #9
 800a602:	d814      	bhi.n	800a62e <_strtoul_l.constprop.0+0x86>
 800a604:	4664      	mov	r4, ip
 800a606:	42a3      	cmp	r3, r4
 800a608:	dd22      	ble.n	800a650 <_strtoul_l.constprop.0+0xa8>
 800a60a:	2f00      	cmp	r7, #0
 800a60c:	db1d      	blt.n	800a64a <_strtoul_l.constprop.0+0xa2>
 800a60e:	4580      	cmp	r8, r0
 800a610:	d31b      	bcc.n	800a64a <_strtoul_l.constprop.0+0xa2>
 800a612:	d101      	bne.n	800a618 <_strtoul_l.constprop.0+0x70>
 800a614:	45a1      	cmp	r9, r4
 800a616:	db18      	blt.n	800a64a <_strtoul_l.constprop.0+0xa2>
 800a618:	fb00 4003 	mla	r0, r0, r3, r4
 800a61c:	2701      	movs	r7, #1
 800a61e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a622:	e7ea      	b.n	800a5fa <_strtoul_l.constprop.0+0x52>
 800a624:	2c2b      	cmp	r4, #43	; 0x2b
 800a626:	bf04      	itt	eq
 800a628:	782c      	ldrbeq	r4, [r5, #0]
 800a62a:	1c85      	addeq	r5, r0, #2
 800a62c:	e7cd      	b.n	800a5ca <_strtoul_l.constprop.0+0x22>
 800a62e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a632:	f1bc 0f19 	cmp.w	ip, #25
 800a636:	d801      	bhi.n	800a63c <_strtoul_l.constprop.0+0x94>
 800a638:	3c37      	subs	r4, #55	; 0x37
 800a63a:	e7e4      	b.n	800a606 <_strtoul_l.constprop.0+0x5e>
 800a63c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a640:	f1bc 0f19 	cmp.w	ip, #25
 800a644:	d804      	bhi.n	800a650 <_strtoul_l.constprop.0+0xa8>
 800a646:	3c57      	subs	r4, #87	; 0x57
 800a648:	e7dd      	b.n	800a606 <_strtoul_l.constprop.0+0x5e>
 800a64a:	f04f 37ff 	mov.w	r7, #4294967295
 800a64e:	e7e6      	b.n	800a61e <_strtoul_l.constprop.0+0x76>
 800a650:	2f00      	cmp	r7, #0
 800a652:	da07      	bge.n	800a664 <_strtoul_l.constprop.0+0xbc>
 800a654:	2322      	movs	r3, #34	; 0x22
 800a656:	f8ce 3000 	str.w	r3, [lr]
 800a65a:	f04f 30ff 	mov.w	r0, #4294967295
 800a65e:	b932      	cbnz	r2, 800a66e <_strtoul_l.constprop.0+0xc6>
 800a660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a664:	b106      	cbz	r6, 800a668 <_strtoul_l.constprop.0+0xc0>
 800a666:	4240      	negs	r0, r0
 800a668:	2a00      	cmp	r2, #0
 800a66a:	d0f9      	beq.n	800a660 <_strtoul_l.constprop.0+0xb8>
 800a66c:	b107      	cbz	r7, 800a670 <_strtoul_l.constprop.0+0xc8>
 800a66e:	1e69      	subs	r1, r5, #1
 800a670:	6011      	str	r1, [r2, #0]
 800a672:	e7f5      	b.n	800a660 <_strtoul_l.constprop.0+0xb8>
 800a674:	2430      	movs	r4, #48	; 0x30
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1b5      	bne.n	800a5e6 <_strtoul_l.constprop.0+0x3e>
 800a67a:	2308      	movs	r3, #8
 800a67c:	e7b3      	b.n	800a5e6 <_strtoul_l.constprop.0+0x3e>
 800a67e:	2c30      	cmp	r4, #48	; 0x30
 800a680:	d0a9      	beq.n	800a5d6 <_strtoul_l.constprop.0+0x2e>
 800a682:	230a      	movs	r3, #10
 800a684:	e7af      	b.n	800a5e6 <_strtoul_l.constprop.0+0x3e>
 800a686:	bf00      	nop
 800a688:	0800c955 	.word	0x0800c955

0800a68c <_strtoul_r>:
 800a68c:	f7ff bf8c 	b.w	800a5a8 <_strtoul_l.constprop.0>

0800a690 <__submore>:
 800a690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a694:	460c      	mov	r4, r1
 800a696:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a69c:	4299      	cmp	r1, r3
 800a69e:	d11d      	bne.n	800a6dc <__submore+0x4c>
 800a6a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a6a4:	f7fd fa94 	bl	8007bd0 <_malloc_r>
 800a6a8:	b918      	cbnz	r0, 800a6b2 <__submore+0x22>
 800a6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b6:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a6bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a6be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a6c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a6c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a6ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a6ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a6d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a6d6:	6020      	str	r0, [r4, #0]
 800a6d8:	2000      	movs	r0, #0
 800a6da:	e7e8      	b.n	800a6ae <__submore+0x1e>
 800a6dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a6de:	0077      	lsls	r7, r6, #1
 800a6e0:	463a      	mov	r2, r7
 800a6e2:	f000 fa2b 	bl	800ab3c <_realloc_r>
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d0de      	beq.n	800a6aa <__submore+0x1a>
 800a6ec:	eb00 0806 	add.w	r8, r0, r6
 800a6f0:	4601      	mov	r1, r0
 800a6f2:	4632      	mov	r2, r6
 800a6f4:	4640      	mov	r0, r8
 800a6f6:	f7fd f9d3 	bl	8007aa0 <memcpy>
 800a6fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a6fe:	f8c4 8000 	str.w	r8, [r4]
 800a702:	e7e9      	b.n	800a6d8 <__submore+0x48>

0800a704 <__assert_func>:
 800a704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a706:	4614      	mov	r4, r2
 800a708:	461a      	mov	r2, r3
 800a70a:	4b09      	ldr	r3, [pc, #36]	; (800a730 <__assert_func+0x2c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4605      	mov	r5, r0
 800a710:	68d8      	ldr	r0, [r3, #12]
 800a712:	b14c      	cbz	r4, 800a728 <__assert_func+0x24>
 800a714:	4b07      	ldr	r3, [pc, #28]	; (800a734 <__assert_func+0x30>)
 800a716:	9100      	str	r1, [sp, #0]
 800a718:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a71c:	4906      	ldr	r1, [pc, #24]	; (800a738 <__assert_func+0x34>)
 800a71e:	462b      	mov	r3, r5
 800a720:	f000 f9ac 	bl	800aa7c <fiprintf>
 800a724:	f000 fc60 	bl	800afe8 <abort>
 800a728:	4b04      	ldr	r3, [pc, #16]	; (800a73c <__assert_func+0x38>)
 800a72a:	461c      	mov	r4, r3
 800a72c:	e7f3      	b.n	800a716 <__assert_func+0x12>
 800a72e:	bf00      	nop
 800a730:	20000028 	.word	0x20000028
 800a734:	0800c918 	.word	0x0800c918
 800a738:	0800c925 	.word	0x0800c925
 800a73c:	0800c953 	.word	0x0800c953

0800a740 <__errno>:
 800a740:	4b01      	ldr	r3, [pc, #4]	; (800a748 <__errno+0x8>)
 800a742:	6818      	ldr	r0, [r3, #0]
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	20000028 	.word	0x20000028

0800a74c <__sflush_r>:
 800a74c:	898a      	ldrh	r2, [r1, #12]
 800a74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a752:	4605      	mov	r5, r0
 800a754:	0710      	lsls	r0, r2, #28
 800a756:	460c      	mov	r4, r1
 800a758:	d458      	bmi.n	800a80c <__sflush_r+0xc0>
 800a75a:	684b      	ldr	r3, [r1, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	dc05      	bgt.n	800a76c <__sflush_r+0x20>
 800a760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a762:	2b00      	cmp	r3, #0
 800a764:	dc02      	bgt.n	800a76c <__sflush_r+0x20>
 800a766:	2000      	movs	r0, #0
 800a768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a76e:	2e00      	cmp	r6, #0
 800a770:	d0f9      	beq.n	800a766 <__sflush_r+0x1a>
 800a772:	2300      	movs	r3, #0
 800a774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a778:	682f      	ldr	r7, [r5, #0]
 800a77a:	602b      	str	r3, [r5, #0]
 800a77c:	d032      	beq.n	800a7e4 <__sflush_r+0x98>
 800a77e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	075a      	lsls	r2, r3, #29
 800a784:	d505      	bpl.n	800a792 <__sflush_r+0x46>
 800a786:	6863      	ldr	r3, [r4, #4]
 800a788:	1ac0      	subs	r0, r0, r3
 800a78a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a78c:	b10b      	cbz	r3, 800a792 <__sflush_r+0x46>
 800a78e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a790:	1ac0      	subs	r0, r0, r3
 800a792:	2300      	movs	r3, #0
 800a794:	4602      	mov	r2, r0
 800a796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a798:	6a21      	ldr	r1, [r4, #32]
 800a79a:	4628      	mov	r0, r5
 800a79c:	47b0      	blx	r6
 800a79e:	1c43      	adds	r3, r0, #1
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	d106      	bne.n	800a7b2 <__sflush_r+0x66>
 800a7a4:	6829      	ldr	r1, [r5, #0]
 800a7a6:	291d      	cmp	r1, #29
 800a7a8:	d82c      	bhi.n	800a804 <__sflush_r+0xb8>
 800a7aa:	4a2a      	ldr	r2, [pc, #168]	; (800a854 <__sflush_r+0x108>)
 800a7ac:	40ca      	lsrs	r2, r1
 800a7ae:	07d6      	lsls	r6, r2, #31
 800a7b0:	d528      	bpl.n	800a804 <__sflush_r+0xb8>
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	6062      	str	r2, [r4, #4]
 800a7b6:	04d9      	lsls	r1, r3, #19
 800a7b8:	6922      	ldr	r2, [r4, #16]
 800a7ba:	6022      	str	r2, [r4, #0]
 800a7bc:	d504      	bpl.n	800a7c8 <__sflush_r+0x7c>
 800a7be:	1c42      	adds	r2, r0, #1
 800a7c0:	d101      	bne.n	800a7c6 <__sflush_r+0x7a>
 800a7c2:	682b      	ldr	r3, [r5, #0]
 800a7c4:	b903      	cbnz	r3, 800a7c8 <__sflush_r+0x7c>
 800a7c6:	6560      	str	r0, [r4, #84]	; 0x54
 800a7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ca:	602f      	str	r7, [r5, #0]
 800a7cc:	2900      	cmp	r1, #0
 800a7ce:	d0ca      	beq.n	800a766 <__sflush_r+0x1a>
 800a7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7d4:	4299      	cmp	r1, r3
 800a7d6:	d002      	beq.n	800a7de <__sflush_r+0x92>
 800a7d8:	4628      	mov	r0, r5
 800a7da:	f7fd f98d 	bl	8007af8 <_free_r>
 800a7de:	2000      	movs	r0, #0
 800a7e0:	6360      	str	r0, [r4, #52]	; 0x34
 800a7e2:	e7c1      	b.n	800a768 <__sflush_r+0x1c>
 800a7e4:	6a21      	ldr	r1, [r4, #32]
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	47b0      	blx	r6
 800a7ec:	1c41      	adds	r1, r0, #1
 800a7ee:	d1c7      	bne.n	800a780 <__sflush_r+0x34>
 800a7f0:	682b      	ldr	r3, [r5, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0c4      	beq.n	800a780 <__sflush_r+0x34>
 800a7f6:	2b1d      	cmp	r3, #29
 800a7f8:	d001      	beq.n	800a7fe <__sflush_r+0xb2>
 800a7fa:	2b16      	cmp	r3, #22
 800a7fc:	d101      	bne.n	800a802 <__sflush_r+0xb6>
 800a7fe:	602f      	str	r7, [r5, #0]
 800a800:	e7b1      	b.n	800a766 <__sflush_r+0x1a>
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	e7ad      	b.n	800a768 <__sflush_r+0x1c>
 800a80c:	690f      	ldr	r7, [r1, #16]
 800a80e:	2f00      	cmp	r7, #0
 800a810:	d0a9      	beq.n	800a766 <__sflush_r+0x1a>
 800a812:	0793      	lsls	r3, r2, #30
 800a814:	680e      	ldr	r6, [r1, #0]
 800a816:	bf08      	it	eq
 800a818:	694b      	ldreq	r3, [r1, #20]
 800a81a:	600f      	str	r7, [r1, #0]
 800a81c:	bf18      	it	ne
 800a81e:	2300      	movne	r3, #0
 800a820:	eba6 0807 	sub.w	r8, r6, r7
 800a824:	608b      	str	r3, [r1, #8]
 800a826:	f1b8 0f00 	cmp.w	r8, #0
 800a82a:	dd9c      	ble.n	800a766 <__sflush_r+0x1a>
 800a82c:	6a21      	ldr	r1, [r4, #32]
 800a82e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a830:	4643      	mov	r3, r8
 800a832:	463a      	mov	r2, r7
 800a834:	4628      	mov	r0, r5
 800a836:	47b0      	blx	r6
 800a838:	2800      	cmp	r0, #0
 800a83a:	dc06      	bgt.n	800a84a <__sflush_r+0xfe>
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a842:	81a3      	strh	r3, [r4, #12]
 800a844:	f04f 30ff 	mov.w	r0, #4294967295
 800a848:	e78e      	b.n	800a768 <__sflush_r+0x1c>
 800a84a:	4407      	add	r7, r0
 800a84c:	eba8 0800 	sub.w	r8, r8, r0
 800a850:	e7e9      	b.n	800a826 <__sflush_r+0xda>
 800a852:	bf00      	nop
 800a854:	20400001 	.word	0x20400001

0800a858 <_fflush_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	690b      	ldr	r3, [r1, #16]
 800a85c:	4605      	mov	r5, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	b913      	cbnz	r3, 800a868 <_fflush_r+0x10>
 800a862:	2500      	movs	r5, #0
 800a864:	4628      	mov	r0, r5
 800a866:	bd38      	pop	{r3, r4, r5, pc}
 800a868:	b118      	cbz	r0, 800a872 <_fflush_r+0x1a>
 800a86a:	6983      	ldr	r3, [r0, #24]
 800a86c:	b90b      	cbnz	r3, 800a872 <_fflush_r+0x1a>
 800a86e:	f000 f887 	bl	800a980 <__sinit>
 800a872:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <_fflush_r+0x6c>)
 800a874:	429c      	cmp	r4, r3
 800a876:	d11b      	bne.n	800a8b0 <_fflush_r+0x58>
 800a878:	686c      	ldr	r4, [r5, #4]
 800a87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0ef      	beq.n	800a862 <_fflush_r+0xa>
 800a882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a884:	07d0      	lsls	r0, r2, #31
 800a886:	d404      	bmi.n	800a892 <_fflush_r+0x3a>
 800a888:	0599      	lsls	r1, r3, #22
 800a88a:	d402      	bmi.n	800a892 <_fflush_r+0x3a>
 800a88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a88e:	f000 f927 	bl	800aae0 <__retarget_lock_acquire_recursive>
 800a892:	4628      	mov	r0, r5
 800a894:	4621      	mov	r1, r4
 800a896:	f7ff ff59 	bl	800a74c <__sflush_r>
 800a89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a89c:	07da      	lsls	r2, r3, #31
 800a89e:	4605      	mov	r5, r0
 800a8a0:	d4e0      	bmi.n	800a864 <_fflush_r+0xc>
 800a8a2:	89a3      	ldrh	r3, [r4, #12]
 800a8a4:	059b      	lsls	r3, r3, #22
 800a8a6:	d4dd      	bmi.n	800a864 <_fflush_r+0xc>
 800a8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8aa:	f000 f91a 	bl	800aae2 <__retarget_lock_release_recursive>
 800a8ae:	e7d9      	b.n	800a864 <_fflush_r+0xc>
 800a8b0:	4b05      	ldr	r3, [pc, #20]	; (800a8c8 <_fflush_r+0x70>)
 800a8b2:	429c      	cmp	r4, r3
 800a8b4:	d101      	bne.n	800a8ba <_fflush_r+0x62>
 800a8b6:	68ac      	ldr	r4, [r5, #8]
 800a8b8:	e7df      	b.n	800a87a <_fflush_r+0x22>
 800a8ba:	4b04      	ldr	r3, [pc, #16]	; (800a8cc <_fflush_r+0x74>)
 800a8bc:	429c      	cmp	r4, r3
 800a8be:	bf08      	it	eq
 800a8c0:	68ec      	ldreq	r4, [r5, #12]
 800a8c2:	e7da      	b.n	800a87a <_fflush_r+0x22>
 800a8c4:	0800ca78 	.word	0x0800ca78
 800a8c8:	0800ca98 	.word	0x0800ca98
 800a8cc:	0800ca58 	.word	0x0800ca58

0800a8d0 <std>:
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	b510      	push	{r4, lr}
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a8da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8de:	6083      	str	r3, [r0, #8]
 800a8e0:	8181      	strh	r1, [r0, #12]
 800a8e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a8e4:	81c2      	strh	r2, [r0, #14]
 800a8e6:	6183      	str	r3, [r0, #24]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	2208      	movs	r2, #8
 800a8ec:	305c      	adds	r0, #92	; 0x5c
 800a8ee:	f7fd f8e5 	bl	8007abc <memset>
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <std+0x38>)
 800a8f4:	6263      	str	r3, [r4, #36]	; 0x24
 800a8f6:	4b05      	ldr	r3, [pc, #20]	; (800a90c <std+0x3c>)
 800a8f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8fa:	4b05      	ldr	r3, [pc, #20]	; (800a910 <std+0x40>)
 800a8fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8fe:	4b05      	ldr	r3, [pc, #20]	; (800a914 <std+0x44>)
 800a900:	6224      	str	r4, [r4, #32]
 800a902:	6323      	str	r3, [r4, #48]	; 0x30
 800a904:	bd10      	pop	{r4, pc}
 800a906:	bf00      	nop
 800a908:	080086a9 	.word	0x080086a9
 800a90c:	080086cf 	.word	0x080086cf
 800a910:	08008707 	.word	0x08008707
 800a914:	0800872b 	.word	0x0800872b

0800a918 <_cleanup_r>:
 800a918:	4901      	ldr	r1, [pc, #4]	; (800a920 <_cleanup_r+0x8>)
 800a91a:	f000 b8c1 	b.w	800aaa0 <_fwalk_reent>
 800a91e:	bf00      	nop
 800a920:	0800a859 	.word	0x0800a859

0800a924 <__sfmoreglue>:
 800a924:	b570      	push	{r4, r5, r6, lr}
 800a926:	2268      	movs	r2, #104	; 0x68
 800a928:	1e4d      	subs	r5, r1, #1
 800a92a:	4355      	muls	r5, r2
 800a92c:	460e      	mov	r6, r1
 800a92e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a932:	f7fd f94d 	bl	8007bd0 <_malloc_r>
 800a936:	4604      	mov	r4, r0
 800a938:	b140      	cbz	r0, 800a94c <__sfmoreglue+0x28>
 800a93a:	2100      	movs	r1, #0
 800a93c:	e9c0 1600 	strd	r1, r6, [r0]
 800a940:	300c      	adds	r0, #12
 800a942:	60a0      	str	r0, [r4, #8]
 800a944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a948:	f7fd f8b8 	bl	8007abc <memset>
 800a94c:	4620      	mov	r0, r4
 800a94e:	bd70      	pop	{r4, r5, r6, pc}

0800a950 <__sfp_lock_acquire>:
 800a950:	4801      	ldr	r0, [pc, #4]	; (800a958 <__sfp_lock_acquire+0x8>)
 800a952:	f000 b8c5 	b.w	800aae0 <__retarget_lock_acquire_recursive>
 800a956:	bf00      	nop
 800a958:	20004d8d 	.word	0x20004d8d

0800a95c <__sfp_lock_release>:
 800a95c:	4801      	ldr	r0, [pc, #4]	; (800a964 <__sfp_lock_release+0x8>)
 800a95e:	f000 b8c0 	b.w	800aae2 <__retarget_lock_release_recursive>
 800a962:	bf00      	nop
 800a964:	20004d8d 	.word	0x20004d8d

0800a968 <__sinit_lock_acquire>:
 800a968:	4801      	ldr	r0, [pc, #4]	; (800a970 <__sinit_lock_acquire+0x8>)
 800a96a:	f000 b8b9 	b.w	800aae0 <__retarget_lock_acquire_recursive>
 800a96e:	bf00      	nop
 800a970:	20004d8e 	.word	0x20004d8e

0800a974 <__sinit_lock_release>:
 800a974:	4801      	ldr	r0, [pc, #4]	; (800a97c <__sinit_lock_release+0x8>)
 800a976:	f000 b8b4 	b.w	800aae2 <__retarget_lock_release_recursive>
 800a97a:	bf00      	nop
 800a97c:	20004d8e 	.word	0x20004d8e

0800a980 <__sinit>:
 800a980:	b510      	push	{r4, lr}
 800a982:	4604      	mov	r4, r0
 800a984:	f7ff fff0 	bl	800a968 <__sinit_lock_acquire>
 800a988:	69a3      	ldr	r3, [r4, #24]
 800a98a:	b11b      	cbz	r3, 800a994 <__sinit+0x14>
 800a98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a990:	f7ff bff0 	b.w	800a974 <__sinit_lock_release>
 800a994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a998:	6523      	str	r3, [r4, #80]	; 0x50
 800a99a:	4b13      	ldr	r3, [pc, #76]	; (800a9e8 <__sinit+0x68>)
 800a99c:	4a13      	ldr	r2, [pc, #76]	; (800a9ec <__sinit+0x6c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9a2:	42a3      	cmp	r3, r4
 800a9a4:	bf04      	itt	eq
 800a9a6:	2301      	moveq	r3, #1
 800a9a8:	61a3      	streq	r3, [r4, #24]
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 f820 	bl	800a9f0 <__sfp>
 800a9b0:	6060      	str	r0, [r4, #4]
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 f81c 	bl	800a9f0 <__sfp>
 800a9b8:	60a0      	str	r0, [r4, #8]
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 f818 	bl	800a9f0 <__sfp>
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	60e0      	str	r0, [r4, #12]
 800a9c4:	2104      	movs	r1, #4
 800a9c6:	6860      	ldr	r0, [r4, #4]
 800a9c8:	f7ff ff82 	bl	800a8d0 <std>
 800a9cc:	68a0      	ldr	r0, [r4, #8]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	2109      	movs	r1, #9
 800a9d2:	f7ff ff7d 	bl	800a8d0 <std>
 800a9d6:	68e0      	ldr	r0, [r4, #12]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	2112      	movs	r1, #18
 800a9dc:	f7ff ff78 	bl	800a8d0 <std>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	61a3      	str	r3, [r4, #24]
 800a9e4:	e7d2      	b.n	800a98c <__sinit+0xc>
 800a9e6:	bf00      	nop
 800a9e8:	0800c6c8 	.word	0x0800c6c8
 800a9ec:	0800a919 	.word	0x0800a919

0800a9f0 <__sfp>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	4607      	mov	r7, r0
 800a9f4:	f7ff ffac 	bl	800a950 <__sfp_lock_acquire>
 800a9f8:	4b1e      	ldr	r3, [pc, #120]	; (800aa74 <__sfp+0x84>)
 800a9fa:	681e      	ldr	r6, [r3, #0]
 800a9fc:	69b3      	ldr	r3, [r6, #24]
 800a9fe:	b913      	cbnz	r3, 800aa06 <__sfp+0x16>
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7ff ffbd 	bl	800a980 <__sinit>
 800aa06:	3648      	adds	r6, #72	; 0x48
 800aa08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	d503      	bpl.n	800aa18 <__sfp+0x28>
 800aa10:	6833      	ldr	r3, [r6, #0]
 800aa12:	b30b      	cbz	r3, 800aa58 <__sfp+0x68>
 800aa14:	6836      	ldr	r6, [r6, #0]
 800aa16:	e7f7      	b.n	800aa08 <__sfp+0x18>
 800aa18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa1c:	b9d5      	cbnz	r5, 800aa54 <__sfp+0x64>
 800aa1e:	4b16      	ldr	r3, [pc, #88]	; (800aa78 <__sfp+0x88>)
 800aa20:	60e3      	str	r3, [r4, #12]
 800aa22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa26:	6665      	str	r5, [r4, #100]	; 0x64
 800aa28:	f000 f859 	bl	800aade <__retarget_lock_init_recursive>
 800aa2c:	f7ff ff96 	bl	800a95c <__sfp_lock_release>
 800aa30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa38:	6025      	str	r5, [r4, #0]
 800aa3a:	61a5      	str	r5, [r4, #24]
 800aa3c:	2208      	movs	r2, #8
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa44:	f7fd f83a 	bl	8007abc <memset>
 800aa48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa50:	4620      	mov	r0, r4
 800aa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa54:	3468      	adds	r4, #104	; 0x68
 800aa56:	e7d9      	b.n	800aa0c <__sfp+0x1c>
 800aa58:	2104      	movs	r1, #4
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	f7ff ff62 	bl	800a924 <__sfmoreglue>
 800aa60:	4604      	mov	r4, r0
 800aa62:	6030      	str	r0, [r6, #0]
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d1d5      	bne.n	800aa14 <__sfp+0x24>
 800aa68:	f7ff ff78 	bl	800a95c <__sfp_lock_release>
 800aa6c:	230c      	movs	r3, #12
 800aa6e:	603b      	str	r3, [r7, #0]
 800aa70:	e7ee      	b.n	800aa50 <__sfp+0x60>
 800aa72:	bf00      	nop
 800aa74:	0800c6c8 	.word	0x0800c6c8
 800aa78:	ffff0001 	.word	0xffff0001

0800aa7c <fiprintf>:
 800aa7c:	b40e      	push	{r1, r2, r3}
 800aa7e:	b503      	push	{r0, r1, lr}
 800aa80:	4601      	mov	r1, r0
 800aa82:	ab03      	add	r3, sp, #12
 800aa84:	4805      	ldr	r0, [pc, #20]	; (800aa9c <fiprintf+0x20>)
 800aa86:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	f000 f8ad 	bl	800abec <_vfiprintf_r>
 800aa92:	b002      	add	sp, #8
 800aa94:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa98:	b003      	add	sp, #12
 800aa9a:	4770      	bx	lr
 800aa9c:	20000028 	.word	0x20000028

0800aaa0 <_fwalk_reent>:
 800aaa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	4688      	mov	r8, r1
 800aaa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aaac:	2700      	movs	r7, #0
 800aaae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aab2:	f1b9 0901 	subs.w	r9, r9, #1
 800aab6:	d505      	bpl.n	800aac4 <_fwalk_reent+0x24>
 800aab8:	6824      	ldr	r4, [r4, #0]
 800aaba:	2c00      	cmp	r4, #0
 800aabc:	d1f7      	bne.n	800aaae <_fwalk_reent+0xe>
 800aabe:	4638      	mov	r0, r7
 800aac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aac4:	89ab      	ldrh	r3, [r5, #12]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d907      	bls.n	800aada <_fwalk_reent+0x3a>
 800aaca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aace:	3301      	adds	r3, #1
 800aad0:	d003      	beq.n	800aada <_fwalk_reent+0x3a>
 800aad2:	4629      	mov	r1, r5
 800aad4:	4630      	mov	r0, r6
 800aad6:	47c0      	blx	r8
 800aad8:	4307      	orrs	r7, r0
 800aada:	3568      	adds	r5, #104	; 0x68
 800aadc:	e7e9      	b.n	800aab2 <_fwalk_reent+0x12>

0800aade <__retarget_lock_init_recursive>:
 800aade:	4770      	bx	lr

0800aae0 <__retarget_lock_acquire_recursive>:
 800aae0:	4770      	bx	lr

0800aae2 <__retarget_lock_release_recursive>:
 800aae2:	4770      	bx	lr

0800aae4 <__ascii_mbtowc>:
 800aae4:	b082      	sub	sp, #8
 800aae6:	b901      	cbnz	r1, 800aaea <__ascii_mbtowc+0x6>
 800aae8:	a901      	add	r1, sp, #4
 800aaea:	b142      	cbz	r2, 800aafe <__ascii_mbtowc+0x1a>
 800aaec:	b14b      	cbz	r3, 800ab02 <__ascii_mbtowc+0x1e>
 800aaee:	7813      	ldrb	r3, [r2, #0]
 800aaf0:	600b      	str	r3, [r1, #0]
 800aaf2:	7812      	ldrb	r2, [r2, #0]
 800aaf4:	1e10      	subs	r0, r2, #0
 800aaf6:	bf18      	it	ne
 800aaf8:	2001      	movne	r0, #1
 800aafa:	b002      	add	sp, #8
 800aafc:	4770      	bx	lr
 800aafe:	4610      	mov	r0, r2
 800ab00:	e7fb      	b.n	800aafa <__ascii_mbtowc+0x16>
 800ab02:	f06f 0001 	mvn.w	r0, #1
 800ab06:	e7f8      	b.n	800aafa <__ascii_mbtowc+0x16>

0800ab08 <memmove>:
 800ab08:	4288      	cmp	r0, r1
 800ab0a:	b510      	push	{r4, lr}
 800ab0c:	eb01 0402 	add.w	r4, r1, r2
 800ab10:	d902      	bls.n	800ab18 <memmove+0x10>
 800ab12:	4284      	cmp	r4, r0
 800ab14:	4623      	mov	r3, r4
 800ab16:	d807      	bhi.n	800ab28 <memmove+0x20>
 800ab18:	1e43      	subs	r3, r0, #1
 800ab1a:	42a1      	cmp	r1, r4
 800ab1c:	d008      	beq.n	800ab30 <memmove+0x28>
 800ab1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab26:	e7f8      	b.n	800ab1a <memmove+0x12>
 800ab28:	4402      	add	r2, r0
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	428a      	cmp	r2, r1
 800ab2e:	d100      	bne.n	800ab32 <memmove+0x2a>
 800ab30:	bd10      	pop	{r4, pc}
 800ab32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab3a:	e7f7      	b.n	800ab2c <memmove+0x24>

0800ab3c <_realloc_r>:
 800ab3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab40:	4680      	mov	r8, r0
 800ab42:	4614      	mov	r4, r2
 800ab44:	460e      	mov	r6, r1
 800ab46:	b921      	cbnz	r1, 800ab52 <_realloc_r+0x16>
 800ab48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	f7fd b83f 	b.w	8007bd0 <_malloc_r>
 800ab52:	b92a      	cbnz	r2, 800ab60 <_realloc_r+0x24>
 800ab54:	f7fc ffd0 	bl	8007af8 <_free_r>
 800ab58:	4625      	mov	r5, r4
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab60:	f000 faae 	bl	800b0c0 <_malloc_usable_size_r>
 800ab64:	4284      	cmp	r4, r0
 800ab66:	4607      	mov	r7, r0
 800ab68:	d802      	bhi.n	800ab70 <_realloc_r+0x34>
 800ab6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab6e:	d812      	bhi.n	800ab96 <_realloc_r+0x5a>
 800ab70:	4621      	mov	r1, r4
 800ab72:	4640      	mov	r0, r8
 800ab74:	f7fd f82c 	bl	8007bd0 <_malloc_r>
 800ab78:	4605      	mov	r5, r0
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d0ed      	beq.n	800ab5a <_realloc_r+0x1e>
 800ab7e:	42bc      	cmp	r4, r7
 800ab80:	4622      	mov	r2, r4
 800ab82:	4631      	mov	r1, r6
 800ab84:	bf28      	it	cs
 800ab86:	463a      	movcs	r2, r7
 800ab88:	f7fc ff8a 	bl	8007aa0 <memcpy>
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4640      	mov	r0, r8
 800ab90:	f7fc ffb2 	bl	8007af8 <_free_r>
 800ab94:	e7e1      	b.n	800ab5a <_realloc_r+0x1e>
 800ab96:	4635      	mov	r5, r6
 800ab98:	e7df      	b.n	800ab5a <_realloc_r+0x1e>

0800ab9a <__sfputc_r>:
 800ab9a:	6893      	ldr	r3, [r2, #8]
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	b410      	push	{r4}
 800aba2:	6093      	str	r3, [r2, #8]
 800aba4:	da08      	bge.n	800abb8 <__sfputc_r+0x1e>
 800aba6:	6994      	ldr	r4, [r2, #24]
 800aba8:	42a3      	cmp	r3, r4
 800abaa:	db01      	blt.n	800abb0 <__sfputc_r+0x16>
 800abac:	290a      	cmp	r1, #10
 800abae:	d103      	bne.n	800abb8 <__sfputc_r+0x1e>
 800abb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abb4:	f000 b94a 	b.w	800ae4c <__swbuf_r>
 800abb8:	6813      	ldr	r3, [r2, #0]
 800abba:	1c58      	adds	r0, r3, #1
 800abbc:	6010      	str	r0, [r2, #0]
 800abbe:	7019      	strb	r1, [r3, #0]
 800abc0:	4608      	mov	r0, r1
 800abc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <__sfputs_r>:
 800abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abca:	4606      	mov	r6, r0
 800abcc:	460f      	mov	r7, r1
 800abce:	4614      	mov	r4, r2
 800abd0:	18d5      	adds	r5, r2, r3
 800abd2:	42ac      	cmp	r4, r5
 800abd4:	d101      	bne.n	800abda <__sfputs_r+0x12>
 800abd6:	2000      	movs	r0, #0
 800abd8:	e007      	b.n	800abea <__sfputs_r+0x22>
 800abda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abde:	463a      	mov	r2, r7
 800abe0:	4630      	mov	r0, r6
 800abe2:	f7ff ffda 	bl	800ab9a <__sfputc_r>
 800abe6:	1c43      	adds	r3, r0, #1
 800abe8:	d1f3      	bne.n	800abd2 <__sfputs_r+0xa>
 800abea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abec <_vfiprintf_r>:
 800abec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	460d      	mov	r5, r1
 800abf2:	b09d      	sub	sp, #116	; 0x74
 800abf4:	4614      	mov	r4, r2
 800abf6:	4698      	mov	r8, r3
 800abf8:	4606      	mov	r6, r0
 800abfa:	b118      	cbz	r0, 800ac04 <_vfiprintf_r+0x18>
 800abfc:	6983      	ldr	r3, [r0, #24]
 800abfe:	b90b      	cbnz	r3, 800ac04 <_vfiprintf_r+0x18>
 800ac00:	f7ff febe 	bl	800a980 <__sinit>
 800ac04:	4b89      	ldr	r3, [pc, #548]	; (800ae2c <_vfiprintf_r+0x240>)
 800ac06:	429d      	cmp	r5, r3
 800ac08:	d11b      	bne.n	800ac42 <_vfiprintf_r+0x56>
 800ac0a:	6875      	ldr	r5, [r6, #4]
 800ac0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac0e:	07d9      	lsls	r1, r3, #31
 800ac10:	d405      	bmi.n	800ac1e <_vfiprintf_r+0x32>
 800ac12:	89ab      	ldrh	r3, [r5, #12]
 800ac14:	059a      	lsls	r2, r3, #22
 800ac16:	d402      	bmi.n	800ac1e <_vfiprintf_r+0x32>
 800ac18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac1a:	f7ff ff61 	bl	800aae0 <__retarget_lock_acquire_recursive>
 800ac1e:	89ab      	ldrh	r3, [r5, #12]
 800ac20:	071b      	lsls	r3, r3, #28
 800ac22:	d501      	bpl.n	800ac28 <_vfiprintf_r+0x3c>
 800ac24:	692b      	ldr	r3, [r5, #16]
 800ac26:	b9eb      	cbnz	r3, 800ac64 <_vfiprintf_r+0x78>
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f000 f96e 	bl	800af0c <__swsetup_r>
 800ac30:	b1c0      	cbz	r0, 800ac64 <_vfiprintf_r+0x78>
 800ac32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac34:	07dc      	lsls	r4, r3, #31
 800ac36:	d50e      	bpl.n	800ac56 <_vfiprintf_r+0x6a>
 800ac38:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3c:	b01d      	add	sp, #116	; 0x74
 800ac3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac42:	4b7b      	ldr	r3, [pc, #492]	; (800ae30 <_vfiprintf_r+0x244>)
 800ac44:	429d      	cmp	r5, r3
 800ac46:	d101      	bne.n	800ac4c <_vfiprintf_r+0x60>
 800ac48:	68b5      	ldr	r5, [r6, #8]
 800ac4a:	e7df      	b.n	800ac0c <_vfiprintf_r+0x20>
 800ac4c:	4b79      	ldr	r3, [pc, #484]	; (800ae34 <_vfiprintf_r+0x248>)
 800ac4e:	429d      	cmp	r5, r3
 800ac50:	bf08      	it	eq
 800ac52:	68f5      	ldreq	r5, [r6, #12]
 800ac54:	e7da      	b.n	800ac0c <_vfiprintf_r+0x20>
 800ac56:	89ab      	ldrh	r3, [r5, #12]
 800ac58:	0598      	lsls	r0, r3, #22
 800ac5a:	d4ed      	bmi.n	800ac38 <_vfiprintf_r+0x4c>
 800ac5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac5e:	f7ff ff40 	bl	800aae2 <__retarget_lock_release_recursive>
 800ac62:	e7e9      	b.n	800ac38 <_vfiprintf_r+0x4c>
 800ac64:	2300      	movs	r3, #0
 800ac66:	9309      	str	r3, [sp, #36]	; 0x24
 800ac68:	2320      	movs	r3, #32
 800ac6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac72:	2330      	movs	r3, #48	; 0x30
 800ac74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae38 <_vfiprintf_r+0x24c>
 800ac78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac7c:	f04f 0901 	mov.w	r9, #1
 800ac80:	4623      	mov	r3, r4
 800ac82:	469a      	mov	sl, r3
 800ac84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac88:	b10a      	cbz	r2, 800ac8e <_vfiprintf_r+0xa2>
 800ac8a:	2a25      	cmp	r2, #37	; 0x25
 800ac8c:	d1f9      	bne.n	800ac82 <_vfiprintf_r+0x96>
 800ac8e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac92:	d00b      	beq.n	800acac <_vfiprintf_r+0xc0>
 800ac94:	465b      	mov	r3, fp
 800ac96:	4622      	mov	r2, r4
 800ac98:	4629      	mov	r1, r5
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f7ff ff94 	bl	800abc8 <__sfputs_r>
 800aca0:	3001      	adds	r0, #1
 800aca2:	f000 80aa 	beq.w	800adfa <_vfiprintf_r+0x20e>
 800aca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aca8:	445a      	add	r2, fp
 800acaa:	9209      	str	r2, [sp, #36]	; 0x24
 800acac:	f89a 3000 	ldrb.w	r3, [sl]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 80a2 	beq.w	800adfa <_vfiprintf_r+0x20e>
 800acb6:	2300      	movs	r3, #0
 800acb8:	f04f 32ff 	mov.w	r2, #4294967295
 800acbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acc0:	f10a 0a01 	add.w	sl, sl, #1
 800acc4:	9304      	str	r3, [sp, #16]
 800acc6:	9307      	str	r3, [sp, #28]
 800acc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800accc:	931a      	str	r3, [sp, #104]	; 0x68
 800acce:	4654      	mov	r4, sl
 800acd0:	2205      	movs	r2, #5
 800acd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd6:	4858      	ldr	r0, [pc, #352]	; (800ae38 <_vfiprintf_r+0x24c>)
 800acd8:	f7f5 faba 	bl	8000250 <memchr>
 800acdc:	9a04      	ldr	r2, [sp, #16]
 800acde:	b9d8      	cbnz	r0, 800ad18 <_vfiprintf_r+0x12c>
 800ace0:	06d1      	lsls	r1, r2, #27
 800ace2:	bf44      	itt	mi
 800ace4:	2320      	movmi	r3, #32
 800ace6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acea:	0713      	lsls	r3, r2, #28
 800acec:	bf44      	itt	mi
 800acee:	232b      	movmi	r3, #43	; 0x2b
 800acf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acf4:	f89a 3000 	ldrb.w	r3, [sl]
 800acf8:	2b2a      	cmp	r3, #42	; 0x2a
 800acfa:	d015      	beq.n	800ad28 <_vfiprintf_r+0x13c>
 800acfc:	9a07      	ldr	r2, [sp, #28]
 800acfe:	4654      	mov	r4, sl
 800ad00:	2000      	movs	r0, #0
 800ad02:	f04f 0c0a 	mov.w	ip, #10
 800ad06:	4621      	mov	r1, r4
 800ad08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad0c:	3b30      	subs	r3, #48	; 0x30
 800ad0e:	2b09      	cmp	r3, #9
 800ad10:	d94e      	bls.n	800adb0 <_vfiprintf_r+0x1c4>
 800ad12:	b1b0      	cbz	r0, 800ad42 <_vfiprintf_r+0x156>
 800ad14:	9207      	str	r2, [sp, #28]
 800ad16:	e014      	b.n	800ad42 <_vfiprintf_r+0x156>
 800ad18:	eba0 0308 	sub.w	r3, r0, r8
 800ad1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ad20:	4313      	orrs	r3, r2
 800ad22:	9304      	str	r3, [sp, #16]
 800ad24:	46a2      	mov	sl, r4
 800ad26:	e7d2      	b.n	800acce <_vfiprintf_r+0xe2>
 800ad28:	9b03      	ldr	r3, [sp, #12]
 800ad2a:	1d19      	adds	r1, r3, #4
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	9103      	str	r1, [sp, #12]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	bfbb      	ittet	lt
 800ad34:	425b      	neglt	r3, r3
 800ad36:	f042 0202 	orrlt.w	r2, r2, #2
 800ad3a:	9307      	strge	r3, [sp, #28]
 800ad3c:	9307      	strlt	r3, [sp, #28]
 800ad3e:	bfb8      	it	lt
 800ad40:	9204      	strlt	r2, [sp, #16]
 800ad42:	7823      	ldrb	r3, [r4, #0]
 800ad44:	2b2e      	cmp	r3, #46	; 0x2e
 800ad46:	d10c      	bne.n	800ad62 <_vfiprintf_r+0x176>
 800ad48:	7863      	ldrb	r3, [r4, #1]
 800ad4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad4c:	d135      	bne.n	800adba <_vfiprintf_r+0x1ce>
 800ad4e:	9b03      	ldr	r3, [sp, #12]
 800ad50:	1d1a      	adds	r2, r3, #4
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	9203      	str	r2, [sp, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	bfb8      	it	lt
 800ad5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad5e:	3402      	adds	r4, #2
 800ad60:	9305      	str	r3, [sp, #20]
 800ad62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae48 <_vfiprintf_r+0x25c>
 800ad66:	7821      	ldrb	r1, [r4, #0]
 800ad68:	2203      	movs	r2, #3
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	f7f5 fa70 	bl	8000250 <memchr>
 800ad70:	b140      	cbz	r0, 800ad84 <_vfiprintf_r+0x198>
 800ad72:	2340      	movs	r3, #64	; 0x40
 800ad74:	eba0 000a 	sub.w	r0, r0, sl
 800ad78:	fa03 f000 	lsl.w	r0, r3, r0
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	4303      	orrs	r3, r0
 800ad80:	3401      	adds	r4, #1
 800ad82:	9304      	str	r3, [sp, #16]
 800ad84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad88:	482c      	ldr	r0, [pc, #176]	; (800ae3c <_vfiprintf_r+0x250>)
 800ad8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad8e:	2206      	movs	r2, #6
 800ad90:	f7f5 fa5e 	bl	8000250 <memchr>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d03f      	beq.n	800ae18 <_vfiprintf_r+0x22c>
 800ad98:	4b29      	ldr	r3, [pc, #164]	; (800ae40 <_vfiprintf_r+0x254>)
 800ad9a:	bb1b      	cbnz	r3, 800ade4 <_vfiprintf_r+0x1f8>
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	3307      	adds	r3, #7
 800ada0:	f023 0307 	bic.w	r3, r3, #7
 800ada4:	3308      	adds	r3, #8
 800ada6:	9303      	str	r3, [sp, #12]
 800ada8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adaa:	443b      	add	r3, r7
 800adac:	9309      	str	r3, [sp, #36]	; 0x24
 800adae:	e767      	b.n	800ac80 <_vfiprintf_r+0x94>
 800adb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800adb4:	460c      	mov	r4, r1
 800adb6:	2001      	movs	r0, #1
 800adb8:	e7a5      	b.n	800ad06 <_vfiprintf_r+0x11a>
 800adba:	2300      	movs	r3, #0
 800adbc:	3401      	adds	r4, #1
 800adbe:	9305      	str	r3, [sp, #20]
 800adc0:	4619      	mov	r1, r3
 800adc2:	f04f 0c0a 	mov.w	ip, #10
 800adc6:	4620      	mov	r0, r4
 800adc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adcc:	3a30      	subs	r2, #48	; 0x30
 800adce:	2a09      	cmp	r2, #9
 800add0:	d903      	bls.n	800adda <_vfiprintf_r+0x1ee>
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0c5      	beq.n	800ad62 <_vfiprintf_r+0x176>
 800add6:	9105      	str	r1, [sp, #20]
 800add8:	e7c3      	b.n	800ad62 <_vfiprintf_r+0x176>
 800adda:	fb0c 2101 	mla	r1, ip, r1, r2
 800adde:	4604      	mov	r4, r0
 800ade0:	2301      	movs	r3, #1
 800ade2:	e7f0      	b.n	800adc6 <_vfiprintf_r+0x1da>
 800ade4:	ab03      	add	r3, sp, #12
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	462a      	mov	r2, r5
 800adea:	4b16      	ldr	r3, [pc, #88]	; (800ae44 <_vfiprintf_r+0x258>)
 800adec:	a904      	add	r1, sp, #16
 800adee:	4630      	mov	r0, r6
 800adf0:	f7fc fff2 	bl	8007dd8 <_printf_float>
 800adf4:	4607      	mov	r7, r0
 800adf6:	1c78      	adds	r0, r7, #1
 800adf8:	d1d6      	bne.n	800ada8 <_vfiprintf_r+0x1bc>
 800adfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adfc:	07d9      	lsls	r1, r3, #31
 800adfe:	d405      	bmi.n	800ae0c <_vfiprintf_r+0x220>
 800ae00:	89ab      	ldrh	r3, [r5, #12]
 800ae02:	059a      	lsls	r2, r3, #22
 800ae04:	d402      	bmi.n	800ae0c <_vfiprintf_r+0x220>
 800ae06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae08:	f7ff fe6b 	bl	800aae2 <__retarget_lock_release_recursive>
 800ae0c:	89ab      	ldrh	r3, [r5, #12]
 800ae0e:	065b      	lsls	r3, r3, #25
 800ae10:	f53f af12 	bmi.w	800ac38 <_vfiprintf_r+0x4c>
 800ae14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae16:	e711      	b.n	800ac3c <_vfiprintf_r+0x50>
 800ae18:	ab03      	add	r3, sp, #12
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	462a      	mov	r2, r5
 800ae1e:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <_vfiprintf_r+0x258>)
 800ae20:	a904      	add	r1, sp, #16
 800ae22:	4630      	mov	r0, r6
 800ae24:	f7fd fa64 	bl	80082f0 <_printf_i>
 800ae28:	e7e4      	b.n	800adf4 <_vfiprintf_r+0x208>
 800ae2a:	bf00      	nop
 800ae2c:	0800ca78 	.word	0x0800ca78
 800ae30:	0800ca98 	.word	0x0800ca98
 800ae34:	0800ca58 	.word	0x0800ca58
 800ae38:	0800c8ec 	.word	0x0800c8ec
 800ae3c:	0800c8f6 	.word	0x0800c8f6
 800ae40:	08007dd9 	.word	0x08007dd9
 800ae44:	0800abc9 	.word	0x0800abc9
 800ae48:	0800c8f2 	.word	0x0800c8f2

0800ae4c <__swbuf_r>:
 800ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4e:	460e      	mov	r6, r1
 800ae50:	4614      	mov	r4, r2
 800ae52:	4605      	mov	r5, r0
 800ae54:	b118      	cbz	r0, 800ae5e <__swbuf_r+0x12>
 800ae56:	6983      	ldr	r3, [r0, #24]
 800ae58:	b90b      	cbnz	r3, 800ae5e <__swbuf_r+0x12>
 800ae5a:	f7ff fd91 	bl	800a980 <__sinit>
 800ae5e:	4b21      	ldr	r3, [pc, #132]	; (800aee4 <__swbuf_r+0x98>)
 800ae60:	429c      	cmp	r4, r3
 800ae62:	d12b      	bne.n	800aebc <__swbuf_r+0x70>
 800ae64:	686c      	ldr	r4, [r5, #4]
 800ae66:	69a3      	ldr	r3, [r4, #24]
 800ae68:	60a3      	str	r3, [r4, #8]
 800ae6a:	89a3      	ldrh	r3, [r4, #12]
 800ae6c:	071a      	lsls	r2, r3, #28
 800ae6e:	d52f      	bpl.n	800aed0 <__swbuf_r+0x84>
 800ae70:	6923      	ldr	r3, [r4, #16]
 800ae72:	b36b      	cbz	r3, 800aed0 <__swbuf_r+0x84>
 800ae74:	6923      	ldr	r3, [r4, #16]
 800ae76:	6820      	ldr	r0, [r4, #0]
 800ae78:	1ac0      	subs	r0, r0, r3
 800ae7a:	6963      	ldr	r3, [r4, #20]
 800ae7c:	b2f6      	uxtb	r6, r6
 800ae7e:	4283      	cmp	r3, r0
 800ae80:	4637      	mov	r7, r6
 800ae82:	dc04      	bgt.n	800ae8e <__swbuf_r+0x42>
 800ae84:	4621      	mov	r1, r4
 800ae86:	4628      	mov	r0, r5
 800ae88:	f7ff fce6 	bl	800a858 <_fflush_r>
 800ae8c:	bb30      	cbnz	r0, 800aedc <__swbuf_r+0x90>
 800ae8e:	68a3      	ldr	r3, [r4, #8]
 800ae90:	3b01      	subs	r3, #1
 800ae92:	60a3      	str	r3, [r4, #8]
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	1c5a      	adds	r2, r3, #1
 800ae98:	6022      	str	r2, [r4, #0]
 800ae9a:	701e      	strb	r6, [r3, #0]
 800ae9c:	6963      	ldr	r3, [r4, #20]
 800ae9e:	3001      	adds	r0, #1
 800aea0:	4283      	cmp	r3, r0
 800aea2:	d004      	beq.n	800aeae <__swbuf_r+0x62>
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	07db      	lsls	r3, r3, #31
 800aea8:	d506      	bpl.n	800aeb8 <__swbuf_r+0x6c>
 800aeaa:	2e0a      	cmp	r6, #10
 800aeac:	d104      	bne.n	800aeb8 <__swbuf_r+0x6c>
 800aeae:	4621      	mov	r1, r4
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f7ff fcd1 	bl	800a858 <_fflush_r>
 800aeb6:	b988      	cbnz	r0, 800aedc <__swbuf_r+0x90>
 800aeb8:	4638      	mov	r0, r7
 800aeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aebc:	4b0a      	ldr	r3, [pc, #40]	; (800aee8 <__swbuf_r+0x9c>)
 800aebe:	429c      	cmp	r4, r3
 800aec0:	d101      	bne.n	800aec6 <__swbuf_r+0x7a>
 800aec2:	68ac      	ldr	r4, [r5, #8]
 800aec4:	e7cf      	b.n	800ae66 <__swbuf_r+0x1a>
 800aec6:	4b09      	ldr	r3, [pc, #36]	; (800aeec <__swbuf_r+0xa0>)
 800aec8:	429c      	cmp	r4, r3
 800aeca:	bf08      	it	eq
 800aecc:	68ec      	ldreq	r4, [r5, #12]
 800aece:	e7ca      	b.n	800ae66 <__swbuf_r+0x1a>
 800aed0:	4621      	mov	r1, r4
 800aed2:	4628      	mov	r0, r5
 800aed4:	f000 f81a 	bl	800af0c <__swsetup_r>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d0cb      	beq.n	800ae74 <__swbuf_r+0x28>
 800aedc:	f04f 37ff 	mov.w	r7, #4294967295
 800aee0:	e7ea      	b.n	800aeb8 <__swbuf_r+0x6c>
 800aee2:	bf00      	nop
 800aee4:	0800ca78 	.word	0x0800ca78
 800aee8:	0800ca98 	.word	0x0800ca98
 800aeec:	0800ca58 	.word	0x0800ca58

0800aef0 <__ascii_wctomb>:
 800aef0:	b149      	cbz	r1, 800af06 <__ascii_wctomb+0x16>
 800aef2:	2aff      	cmp	r2, #255	; 0xff
 800aef4:	bf85      	ittet	hi
 800aef6:	238a      	movhi	r3, #138	; 0x8a
 800aef8:	6003      	strhi	r3, [r0, #0]
 800aefa:	700a      	strbls	r2, [r1, #0]
 800aefc:	f04f 30ff 	movhi.w	r0, #4294967295
 800af00:	bf98      	it	ls
 800af02:	2001      	movls	r0, #1
 800af04:	4770      	bx	lr
 800af06:	4608      	mov	r0, r1
 800af08:	4770      	bx	lr
	...

0800af0c <__swsetup_r>:
 800af0c:	4b32      	ldr	r3, [pc, #200]	; (800afd8 <__swsetup_r+0xcc>)
 800af0e:	b570      	push	{r4, r5, r6, lr}
 800af10:	681d      	ldr	r5, [r3, #0]
 800af12:	4606      	mov	r6, r0
 800af14:	460c      	mov	r4, r1
 800af16:	b125      	cbz	r5, 800af22 <__swsetup_r+0x16>
 800af18:	69ab      	ldr	r3, [r5, #24]
 800af1a:	b913      	cbnz	r3, 800af22 <__swsetup_r+0x16>
 800af1c:	4628      	mov	r0, r5
 800af1e:	f7ff fd2f 	bl	800a980 <__sinit>
 800af22:	4b2e      	ldr	r3, [pc, #184]	; (800afdc <__swsetup_r+0xd0>)
 800af24:	429c      	cmp	r4, r3
 800af26:	d10f      	bne.n	800af48 <__swsetup_r+0x3c>
 800af28:	686c      	ldr	r4, [r5, #4]
 800af2a:	89a3      	ldrh	r3, [r4, #12]
 800af2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af30:	0719      	lsls	r1, r3, #28
 800af32:	d42c      	bmi.n	800af8e <__swsetup_r+0x82>
 800af34:	06dd      	lsls	r5, r3, #27
 800af36:	d411      	bmi.n	800af5c <__swsetup_r+0x50>
 800af38:	2309      	movs	r3, #9
 800af3a:	6033      	str	r3, [r6, #0]
 800af3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af40:	81a3      	strh	r3, [r4, #12]
 800af42:	f04f 30ff 	mov.w	r0, #4294967295
 800af46:	e03e      	b.n	800afc6 <__swsetup_r+0xba>
 800af48:	4b25      	ldr	r3, [pc, #148]	; (800afe0 <__swsetup_r+0xd4>)
 800af4a:	429c      	cmp	r4, r3
 800af4c:	d101      	bne.n	800af52 <__swsetup_r+0x46>
 800af4e:	68ac      	ldr	r4, [r5, #8]
 800af50:	e7eb      	b.n	800af2a <__swsetup_r+0x1e>
 800af52:	4b24      	ldr	r3, [pc, #144]	; (800afe4 <__swsetup_r+0xd8>)
 800af54:	429c      	cmp	r4, r3
 800af56:	bf08      	it	eq
 800af58:	68ec      	ldreq	r4, [r5, #12]
 800af5a:	e7e6      	b.n	800af2a <__swsetup_r+0x1e>
 800af5c:	0758      	lsls	r0, r3, #29
 800af5e:	d512      	bpl.n	800af86 <__swsetup_r+0x7a>
 800af60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af62:	b141      	cbz	r1, 800af76 <__swsetup_r+0x6a>
 800af64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af68:	4299      	cmp	r1, r3
 800af6a:	d002      	beq.n	800af72 <__swsetup_r+0x66>
 800af6c:	4630      	mov	r0, r6
 800af6e:	f7fc fdc3 	bl	8007af8 <_free_r>
 800af72:	2300      	movs	r3, #0
 800af74:	6363      	str	r3, [r4, #52]	; 0x34
 800af76:	89a3      	ldrh	r3, [r4, #12]
 800af78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af7c:	81a3      	strh	r3, [r4, #12]
 800af7e:	2300      	movs	r3, #0
 800af80:	6063      	str	r3, [r4, #4]
 800af82:	6923      	ldr	r3, [r4, #16]
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	f043 0308 	orr.w	r3, r3, #8
 800af8c:	81a3      	strh	r3, [r4, #12]
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	b94b      	cbnz	r3, 800afa6 <__swsetup_r+0x9a>
 800af92:	89a3      	ldrh	r3, [r4, #12]
 800af94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af9c:	d003      	beq.n	800afa6 <__swsetup_r+0x9a>
 800af9e:	4621      	mov	r1, r4
 800afa0:	4630      	mov	r0, r6
 800afa2:	f000 f84d 	bl	800b040 <__smakebuf_r>
 800afa6:	89a0      	ldrh	r0, [r4, #12]
 800afa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afac:	f010 0301 	ands.w	r3, r0, #1
 800afb0:	d00a      	beq.n	800afc8 <__swsetup_r+0xbc>
 800afb2:	2300      	movs	r3, #0
 800afb4:	60a3      	str	r3, [r4, #8]
 800afb6:	6963      	ldr	r3, [r4, #20]
 800afb8:	425b      	negs	r3, r3
 800afba:	61a3      	str	r3, [r4, #24]
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	b943      	cbnz	r3, 800afd2 <__swsetup_r+0xc6>
 800afc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afc4:	d1ba      	bne.n	800af3c <__swsetup_r+0x30>
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	0781      	lsls	r1, r0, #30
 800afca:	bf58      	it	pl
 800afcc:	6963      	ldrpl	r3, [r4, #20]
 800afce:	60a3      	str	r3, [r4, #8]
 800afd0:	e7f4      	b.n	800afbc <__swsetup_r+0xb0>
 800afd2:	2000      	movs	r0, #0
 800afd4:	e7f7      	b.n	800afc6 <__swsetup_r+0xba>
 800afd6:	bf00      	nop
 800afd8:	20000028 	.word	0x20000028
 800afdc:	0800ca78 	.word	0x0800ca78
 800afe0:	0800ca98 	.word	0x0800ca98
 800afe4:	0800ca58 	.word	0x0800ca58

0800afe8 <abort>:
 800afe8:	b508      	push	{r3, lr}
 800afea:	2006      	movs	r0, #6
 800afec:	f000 f898 	bl	800b120 <raise>
 800aff0:	2001      	movs	r0, #1
 800aff2:	f000 f921 	bl	800b238 <_exit>

0800aff6 <__swhatbuf_r>:
 800aff6:	b570      	push	{r4, r5, r6, lr}
 800aff8:	460e      	mov	r6, r1
 800affa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800affe:	2900      	cmp	r1, #0
 800b000:	b096      	sub	sp, #88	; 0x58
 800b002:	4614      	mov	r4, r2
 800b004:	461d      	mov	r5, r3
 800b006:	da08      	bge.n	800b01a <__swhatbuf_r+0x24>
 800b008:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	602a      	str	r2, [r5, #0]
 800b010:	061a      	lsls	r2, r3, #24
 800b012:	d410      	bmi.n	800b036 <__swhatbuf_r+0x40>
 800b014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b018:	e00e      	b.n	800b038 <__swhatbuf_r+0x42>
 800b01a:	466a      	mov	r2, sp
 800b01c:	f000 f89c 	bl	800b158 <_fstat_r>
 800b020:	2800      	cmp	r0, #0
 800b022:	dbf1      	blt.n	800b008 <__swhatbuf_r+0x12>
 800b024:	9a01      	ldr	r2, [sp, #4]
 800b026:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b02a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b02e:	425a      	negs	r2, r3
 800b030:	415a      	adcs	r2, r3
 800b032:	602a      	str	r2, [r5, #0]
 800b034:	e7ee      	b.n	800b014 <__swhatbuf_r+0x1e>
 800b036:	2340      	movs	r3, #64	; 0x40
 800b038:	2000      	movs	r0, #0
 800b03a:	6023      	str	r3, [r4, #0]
 800b03c:	b016      	add	sp, #88	; 0x58
 800b03e:	bd70      	pop	{r4, r5, r6, pc}

0800b040 <__smakebuf_r>:
 800b040:	898b      	ldrh	r3, [r1, #12]
 800b042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b044:	079d      	lsls	r5, r3, #30
 800b046:	4606      	mov	r6, r0
 800b048:	460c      	mov	r4, r1
 800b04a:	d507      	bpl.n	800b05c <__smakebuf_r+0x1c>
 800b04c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	6123      	str	r3, [r4, #16]
 800b054:	2301      	movs	r3, #1
 800b056:	6163      	str	r3, [r4, #20]
 800b058:	b002      	add	sp, #8
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	ab01      	add	r3, sp, #4
 800b05e:	466a      	mov	r2, sp
 800b060:	f7ff ffc9 	bl	800aff6 <__swhatbuf_r>
 800b064:	9900      	ldr	r1, [sp, #0]
 800b066:	4605      	mov	r5, r0
 800b068:	4630      	mov	r0, r6
 800b06a:	f7fc fdb1 	bl	8007bd0 <_malloc_r>
 800b06e:	b948      	cbnz	r0, 800b084 <__smakebuf_r+0x44>
 800b070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b074:	059a      	lsls	r2, r3, #22
 800b076:	d4ef      	bmi.n	800b058 <__smakebuf_r+0x18>
 800b078:	f023 0303 	bic.w	r3, r3, #3
 800b07c:	f043 0302 	orr.w	r3, r3, #2
 800b080:	81a3      	strh	r3, [r4, #12]
 800b082:	e7e3      	b.n	800b04c <__smakebuf_r+0xc>
 800b084:	4b0d      	ldr	r3, [pc, #52]	; (800b0bc <__smakebuf_r+0x7c>)
 800b086:	62b3      	str	r3, [r6, #40]	; 0x28
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	6020      	str	r0, [r4, #0]
 800b08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	9b00      	ldr	r3, [sp, #0]
 800b094:	6163      	str	r3, [r4, #20]
 800b096:	9b01      	ldr	r3, [sp, #4]
 800b098:	6120      	str	r0, [r4, #16]
 800b09a:	b15b      	cbz	r3, 800b0b4 <__smakebuf_r+0x74>
 800b09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f000 f86b 	bl	800b17c <_isatty_r>
 800b0a6:	b128      	cbz	r0, 800b0b4 <__smakebuf_r+0x74>
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	f023 0303 	bic.w	r3, r3, #3
 800b0ae:	f043 0301 	orr.w	r3, r3, #1
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	89a0      	ldrh	r0, [r4, #12]
 800b0b6:	4305      	orrs	r5, r0
 800b0b8:	81a5      	strh	r5, [r4, #12]
 800b0ba:	e7cd      	b.n	800b058 <__smakebuf_r+0x18>
 800b0bc:	0800a919 	.word	0x0800a919

0800b0c0 <_malloc_usable_size_r>:
 800b0c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0c4:	1f18      	subs	r0, r3, #4
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	bfbc      	itt	lt
 800b0ca:	580b      	ldrlt	r3, [r1, r0]
 800b0cc:	18c0      	addlt	r0, r0, r3
 800b0ce:	4770      	bx	lr

0800b0d0 <_raise_r>:
 800b0d0:	291f      	cmp	r1, #31
 800b0d2:	b538      	push	{r3, r4, r5, lr}
 800b0d4:	4604      	mov	r4, r0
 800b0d6:	460d      	mov	r5, r1
 800b0d8:	d904      	bls.n	800b0e4 <_raise_r+0x14>
 800b0da:	2316      	movs	r3, #22
 800b0dc:	6003      	str	r3, [r0, #0]
 800b0de:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
 800b0e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0e6:	b112      	cbz	r2, 800b0ee <_raise_r+0x1e>
 800b0e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0ec:	b94b      	cbnz	r3, 800b102 <_raise_r+0x32>
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 f830 	bl	800b154 <_getpid_r>
 800b0f4:	462a      	mov	r2, r5
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0fe:	f000 b817 	b.w	800b130 <_kill_r>
 800b102:	2b01      	cmp	r3, #1
 800b104:	d00a      	beq.n	800b11c <_raise_r+0x4c>
 800b106:	1c59      	adds	r1, r3, #1
 800b108:	d103      	bne.n	800b112 <_raise_r+0x42>
 800b10a:	2316      	movs	r3, #22
 800b10c:	6003      	str	r3, [r0, #0]
 800b10e:	2001      	movs	r0, #1
 800b110:	e7e7      	b.n	800b0e2 <_raise_r+0x12>
 800b112:	2400      	movs	r4, #0
 800b114:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b118:	4628      	mov	r0, r5
 800b11a:	4798      	blx	r3
 800b11c:	2000      	movs	r0, #0
 800b11e:	e7e0      	b.n	800b0e2 <_raise_r+0x12>

0800b120 <raise>:
 800b120:	4b02      	ldr	r3, [pc, #8]	; (800b12c <raise+0xc>)
 800b122:	4601      	mov	r1, r0
 800b124:	6818      	ldr	r0, [r3, #0]
 800b126:	f7ff bfd3 	b.w	800b0d0 <_raise_r>
 800b12a:	bf00      	nop
 800b12c:	20000028 	.word	0x20000028

0800b130 <_kill_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4d07      	ldr	r5, [pc, #28]	; (800b150 <_kill_r+0x20>)
 800b134:	2300      	movs	r3, #0
 800b136:	4604      	mov	r4, r0
 800b138:	4608      	mov	r0, r1
 800b13a:	4611      	mov	r1, r2
 800b13c:	602b      	str	r3, [r5, #0]
 800b13e:	f000 f84d 	bl	800b1dc <_kill>
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	d102      	bne.n	800b14c <_kill_r+0x1c>
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	b103      	cbz	r3, 800b14c <_kill_r+0x1c>
 800b14a:	6023      	str	r3, [r4, #0]
 800b14c:	bd38      	pop	{r3, r4, r5, pc}
 800b14e:	bf00      	nop
 800b150:	20004d88 	.word	0x20004d88

0800b154 <_getpid_r>:
 800b154:	f000 b832 	b.w	800b1bc <_getpid>

0800b158 <_fstat_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4d07      	ldr	r5, [pc, #28]	; (800b178 <_fstat_r+0x20>)
 800b15c:	2300      	movs	r3, #0
 800b15e:	4604      	mov	r4, r0
 800b160:	4608      	mov	r0, r1
 800b162:	4611      	mov	r1, r2
 800b164:	602b      	str	r3, [r5, #0]
 800b166:	f000 f821 	bl	800b1ac <_fstat>
 800b16a:	1c43      	adds	r3, r0, #1
 800b16c:	d102      	bne.n	800b174 <_fstat_r+0x1c>
 800b16e:	682b      	ldr	r3, [r5, #0]
 800b170:	b103      	cbz	r3, 800b174 <_fstat_r+0x1c>
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	bd38      	pop	{r3, r4, r5, pc}
 800b176:	bf00      	nop
 800b178:	20004d88 	.word	0x20004d88

0800b17c <_isatty_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4d06      	ldr	r5, [pc, #24]	; (800b198 <_isatty_r+0x1c>)
 800b180:	2300      	movs	r3, #0
 800b182:	4604      	mov	r4, r0
 800b184:	4608      	mov	r0, r1
 800b186:	602b      	str	r3, [r5, #0]
 800b188:	f000 f820 	bl	800b1cc <_isatty>
 800b18c:	1c43      	adds	r3, r0, #1
 800b18e:	d102      	bne.n	800b196 <_isatty_r+0x1a>
 800b190:	682b      	ldr	r3, [r5, #0]
 800b192:	b103      	cbz	r3, 800b196 <_isatty_r+0x1a>
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	20004d88 	.word	0x20004d88

0800b19c <_close>:
 800b19c:	4b02      	ldr	r3, [pc, #8]	; (800b1a8 <_close+0xc>)
 800b19e:	2258      	movs	r2, #88	; 0x58
 800b1a0:	601a      	str	r2, [r3, #0]
 800b1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a6:	4770      	bx	lr
 800b1a8:	20004d88 	.word	0x20004d88

0800b1ac <_fstat>:
 800b1ac:	4b02      	ldr	r3, [pc, #8]	; (800b1b8 <_fstat+0xc>)
 800b1ae:	2258      	movs	r2, #88	; 0x58
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b6:	4770      	bx	lr
 800b1b8:	20004d88 	.word	0x20004d88

0800b1bc <_getpid>:
 800b1bc:	4b02      	ldr	r3, [pc, #8]	; (800b1c8 <_getpid+0xc>)
 800b1be:	2258      	movs	r2, #88	; 0x58
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c6:	4770      	bx	lr
 800b1c8:	20004d88 	.word	0x20004d88

0800b1cc <_isatty>:
 800b1cc:	4b02      	ldr	r3, [pc, #8]	; (800b1d8 <_isatty+0xc>)
 800b1ce:	2258      	movs	r2, #88	; 0x58
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	20004d88 	.word	0x20004d88

0800b1dc <_kill>:
 800b1dc:	4b02      	ldr	r3, [pc, #8]	; (800b1e8 <_kill+0xc>)
 800b1de:	2258      	movs	r2, #88	; 0x58
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e6:	4770      	bx	lr
 800b1e8:	20004d88 	.word	0x20004d88

0800b1ec <_lseek>:
 800b1ec:	4b02      	ldr	r3, [pc, #8]	; (800b1f8 <_lseek+0xc>)
 800b1ee:	2258      	movs	r2, #88	; 0x58
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f6:	4770      	bx	lr
 800b1f8:	20004d88 	.word	0x20004d88

0800b1fc <_read>:
 800b1fc:	4b02      	ldr	r3, [pc, #8]	; (800b208 <_read+0xc>)
 800b1fe:	2258      	movs	r2, #88	; 0x58
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	f04f 30ff 	mov.w	r0, #4294967295
 800b206:	4770      	bx	lr
 800b208:	20004d88 	.word	0x20004d88

0800b20c <_sbrk>:
 800b20c:	4a04      	ldr	r2, [pc, #16]	; (800b220 <_sbrk+0x14>)
 800b20e:	6811      	ldr	r1, [r2, #0]
 800b210:	4603      	mov	r3, r0
 800b212:	b909      	cbnz	r1, 800b218 <_sbrk+0xc>
 800b214:	4903      	ldr	r1, [pc, #12]	; (800b224 <_sbrk+0x18>)
 800b216:	6011      	str	r1, [r2, #0]
 800b218:	6810      	ldr	r0, [r2, #0]
 800b21a:	4403      	add	r3, r0
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	4770      	bx	lr
 800b220:	20004d90 	.word	0x20004d90
 800b224:	20004d94 	.word	0x20004d94

0800b228 <_write>:
 800b228:	4b02      	ldr	r3, [pc, #8]	; (800b234 <_write+0xc>)
 800b22a:	2258      	movs	r2, #88	; 0x58
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	f04f 30ff 	mov.w	r0, #4294967295
 800b232:	4770      	bx	lr
 800b234:	20004d88 	.word	0x20004d88

0800b238 <_exit>:
 800b238:	e7fe      	b.n	800b238 <_exit>
	...

0800b23c <_init>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	bf00      	nop
 800b240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b242:	bc08      	pop	{r3}
 800b244:	469e      	mov	lr, r3
 800b246:	4770      	bx	lr

0800b248 <_fini>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	bf00      	nop
 800b24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b24e:	bc08      	pop	{r3}
 800b250:	469e      	mov	lr, r3
 800b252:	4770      	bx	lr
