
09A_FrequencyMeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008534  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd8  08008738  08008738  00018738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009310  08009310  00019310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009318  08009318  00019318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800931c  0800931c  0001931c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  08009320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004874  200001e0  08009500  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20004a54  08009500  00024a54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021feb  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000415f  00000000  00000000  000421f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000138bb  00000000  00000000  00046358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001598  00000000  00000000  00059c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001520  00000000  00000000  0005b1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029cee  00000000  00000000  0005c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00020520  00000000  00000000  000863be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f8f0d  00000000  00000000  000a68de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0019f7eb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004d9c  00000000  00000000  0019f83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001a45d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001a46a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800871c 	.word	0x0800871c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800871c 	.word	0x0800871c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b510      	push	{r4, lr}
 80005f6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <HAL_InitTick+0x40>)
 80005fa:	7818      	ldrb	r0, [r3, #0]
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	fbb3 f3f0 	udiv	r3, r3, r0
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <HAL_InitTick+0x44>)
 8000606:	6810      	ldr	r0, [r2, #0]
 8000608:	fbb0 f0f3 	udiv	r0, r0, r3
 800060c:	f000 f8a0 	bl	8000750 <HAL_SYSTICK_Config>
 8000610:	b968      	cbnz	r0, 800062e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	2c0f      	cmp	r4, #15
 8000614:	d901      	bls.n	800061a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000616:	2001      	movs	r0, #1
 8000618:	e00a      	b.n	8000630 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800061a:	2200      	movs	r2, #0
 800061c:	4621      	mov	r1, r4
 800061e:	f04f 30ff 	mov.w	r0, #4294967295
 8000622:	f000 f851 	bl	80006c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_InitTick+0x48>)
 8000628:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2000      	movs	r0, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800062e:	2001      	movs	r0, #1
}
 8000630:	bd10      	pop	{r4, pc}
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000
 8000638:	2000000c 	.word	0x2000000c
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_Init>:
{
 8000640:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000642:	2003      	movs	r0, #3
 8000644:	f000 f82e 	bl	80006a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ffd3 	bl	80005f4 <HAL_InitTick>
  HAL_MspInit();
 800064e:	f004 ff4d 	bl	80054ec <HAL_MspInit>
}
 8000652:	2000      	movs	r0, #0
 8000654:	bd08      	pop	{r3, pc}
	...

08000658 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <HAL_IncTick+0x10>)
 800065a:	6811      	ldr	r1, [r2, #0]
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_IncTick+0x14>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	440b      	add	r3, r1
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	200001fc 	.word	0x200001fc
 800066c:	20000000 	.word	0x20000000

08000670 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <HAL_GetTick+0x8>)
 8000672:	6818      	ldr	r0, [r3, #0]
}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	200001fc 	.word	0x200001fc

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b538      	push	{r3, r4, r5, lr}
 800067e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000680:	f7ff fff6 	bl	8000670 <HAL_GetTick>
 8000684:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	f1b4 3fff 	cmp.w	r4, #4294967295
 800068a:	d002      	beq.n	8000692 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <HAL_Delay+0x24>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	f7ff ffed 	bl	8000670 <HAL_GetTick>
 8000696:	1b40      	subs	r0, r0, r5
 8000698:	42a0      	cmp	r0, r4
 800069a:	d3fa      	bcc.n	8000692 <HAL_Delay+0x16>
  {
  }
}
 800069c:	bd38      	pop	{r3, r4, r5, pc}
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000

080006a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	4906      	ldr	r1, [pc, #24]	; (80006c0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80006a6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006ac:	041b      	lsls	r3, r3, #16
 80006ae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b0:	0200      	lsls	r0, r0, #8
 80006b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80006b8:	4a02      	ldr	r2, [pc, #8]	; (80006c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006ba:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80006bc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	05fa0000 	.word	0x05fa0000

080006c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <HAL_NVIC_SetPriority+0x60>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d2:	f1c3 0c07 	rsb	ip, r3, #7
 80006d6:	f1bc 0f04 	cmp.w	ip, #4
 80006da:	bf28      	it	cs
 80006dc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e0:	f103 0e04 	add.w	lr, r3, #4
 80006e4:	f1be 0f06 	cmp.w	lr, #6
 80006e8:	d914      	bls.n	8000714 <HAL_NVIC_SetPriority+0x4c>
 80006ea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 3eff 	mov.w	lr, #4294967295
 80006f0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80006f4:	ea21 010c 	bic.w	r1, r1, ip
 80006f8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fa:	fa0e f303 	lsl.w	r3, lr, r3
 80006fe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000702:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000704:	2800      	cmp	r0, #0
 8000706:	db07      	blt.n	8000718 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	0109      	lsls	r1, r1, #4
 800070a:	b2c9      	uxtb	r1, r1
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <HAL_NVIC_SetPriority+0x64>)
 800070e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000710:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000714:	2300      	movs	r3, #0
 8000716:	e7e9      	b.n	80006ec <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	f000 000f 	and.w	r0, r0, #15
 800071c:	0109      	lsls	r1, r1, #4
 800071e:	b2c9      	uxtb	r1, r1
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <HAL_NVIC_SetPriority+0x68>)
 8000722:	5419      	strb	r1, [r3, r0]
 8000724:	e7f4      	b.n	8000710 <HAL_NVIC_SetPriority+0x48>
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00
 800072c:	e000e400 	.word	0xe000e400
 8000730:	e000ed14 	.word	0xe000ed14

08000734 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000734:	2800      	cmp	r0, #0
 8000736:	db07      	blt.n	8000748 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000738:	f000 021f 	and.w	r2, r0, #31
 800073c:	0940      	lsrs	r0, r0, #5
 800073e:	2301      	movs	r3, #1
 8000740:	4093      	lsls	r3, r2
 8000742:	4a02      	ldr	r2, [pc, #8]	; (800074c <HAL_NVIC_EnableIRQ+0x18>)
 8000744:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100

08000750 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	3801      	subs	r0, #1
 8000752:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000756:	d20b      	bcs.n	8000770 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000758:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800075c:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <HAL_SYSTICK_Config+0x24>)
 8000760:	21f0      	movs	r1, #240	; 0xf0
 8000762:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000766:	2000      	movs	r0, #0
 8000768:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	2207      	movs	r2, #7
 800076c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000770:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000778:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800077a:	6805      	ldr	r5, [r0, #0]
 800077c:	682c      	ldr	r4, [r5, #0]
 800077e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000782:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000784:	6804      	ldr	r4, [r0, #0]
 8000786:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000788:	6883      	ldr	r3, [r0, #8]
 800078a:	2b40      	cmp	r3, #64	; 0x40
 800078c:	d005      	beq.n	800079a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800078e:	6803      	ldr	r3, [r0, #0]
 8000790:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000792:	6803      	ldr	r3, [r0, #0]
 8000794:	60da      	str	r2, [r3, #12]
  }
}
 8000796:	bc30      	pop	{r4, r5}
 8000798:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800079a:	6803      	ldr	r3, [r0, #0]
 800079c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800079e:	6803      	ldr	r3, [r0, #0]
 80007a0:	60d9      	str	r1, [r3, #12]
 80007a2:	e7f8      	b.n	8000796 <DMA_SetConfig+0x1e>

080007a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80007a4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80007a6:	6801      	ldr	r1, [r0, #0]
 80007a8:	b2ca      	uxtb	r2, r1
 80007aa:	3a10      	subs	r2, #16
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <DMA_CalcBaseAndBitshift+0x34>)
 80007ae:	fba3 4302 	umull	r4, r3, r3, r2
 80007b2:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007b4:	4c09      	ldr	r4, [pc, #36]	; (80007dc <DMA_CalcBaseAndBitshift+0x38>)
 80007b6:	5ce3      	ldrb	r3, [r4, r3]
 80007b8:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80007ba:	2a5f      	cmp	r2, #95	; 0x5f
 80007bc:	d907      	bls.n	80007ce <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80007c0:	400b      	ands	r3, r1
 80007c2:	3304      	adds	r3, #4
 80007c4:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80007c6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80007c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007cc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80007d0:	400b      	ands	r3, r1
 80007d2:	6583      	str	r3, [r0, #88]	; 0x58
 80007d4:	e7f7      	b.n	80007c6 <DMA_CalcBaseAndBitshift+0x22>
 80007d6:	bf00      	nop
 80007d8:	aaaaaaab 	.word	0xaaaaaaab
 80007dc:	08008738 	.word	0x08008738
 80007e0:	fffffc00 	.word	0xfffffc00

080007e4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80007e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007e6:	6982      	ldr	r2, [r0, #24]
 80007e8:	b992      	cbnz	r2, 8000810 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d00a      	beq.n	8000804 <DMA_CheckFifoParam+0x20>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d002      	beq.n	80007f8 <DMA_CheckFifoParam+0x14>
 80007f2:	b10b      	cbz	r3, 80007f8 <DMA_CheckFifoParam+0x14>
 80007f4:	2000      	movs	r0, #0
 80007f6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80007fe:	d128      	bne.n	8000852 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000800:	2000      	movs	r0, #0
 8000802:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000804:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800080a:	d024      	beq.n	8000856 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800080c:	2000      	movs	r0, #0
 800080e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000810:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000814:	d009      	beq.n	800082a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000816:	2b02      	cmp	r3, #2
 8000818:	d925      	bls.n	8000866 <DMA_CheckFifoParam+0x82>
 800081a:	2b03      	cmp	r3, #3
 800081c:	d125      	bne.n	800086a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800081e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000820:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000824:	d123      	bne.n	800086e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000826:	2000      	movs	r0, #0
 8000828:	4770      	bx	lr
    switch (tmp)
 800082a:	2b03      	cmp	r3, #3
 800082c:	d803      	bhi.n	8000836 <DMA_CheckFifoParam+0x52>
 800082e:	e8df f003 	tbb	[pc, r3]
 8000832:	0414      	.short	0x0414
 8000834:	0a14      	.short	0x0a14
 8000836:	2000      	movs	r0, #0
 8000838:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800083a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800083c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000840:	d10d      	bne.n	800085e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000842:	2000      	movs	r0, #0
 8000844:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000846:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000848:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800084c:	d009      	beq.n	8000862 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800084e:	2000      	movs	r0, #0
 8000850:	4770      	bx	lr
        status = HAL_ERROR;
 8000852:	2001      	movs	r0, #1
 8000854:	4770      	bx	lr
        status = HAL_ERROR;
 8000856:	2001      	movs	r0, #1
 8000858:	4770      	bx	lr
      status = HAL_ERROR;
 800085a:	2001      	movs	r0, #1
 800085c:	4770      	bx	lr
        status = HAL_ERROR;
 800085e:	2001      	movs	r0, #1
 8000860:	4770      	bx	lr
        status = HAL_ERROR;
 8000862:	2001      	movs	r0, #1
 8000864:	4770      	bx	lr
      status = HAL_ERROR;
 8000866:	2001      	movs	r0, #1
 8000868:	4770      	bx	lr
    switch (tmp)
 800086a:	2000      	movs	r0, #0
 800086c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800086e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000870:	4770      	bx	lr
	...

08000874 <HAL_DMA_Init>:
{
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff fefa 	bl	8000670 <HAL_GetTick>
  if(hdma == NULL)
 800087c:	2c00      	cmp	r4, #0
 800087e:	d05b      	beq.n	8000938 <HAL_DMA_Init+0xc4>
 8000880:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8000882:	2300      	movs	r3, #0
 8000884:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000888:	2302      	movs	r3, #2
 800088a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800088e:	6822      	ldr	r2, [r4, #0]
 8000890:	6813      	ldr	r3, [r2, #0]
 8000892:	f023 0301 	bic.w	r3, r3, #1
 8000896:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	f012 0f01 	tst.w	r2, #1
 80008a0:	d00a      	beq.n	80008b8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008a2:	f7ff fee5 	bl	8000670 <HAL_GetTick>
 80008a6:	1b43      	subs	r3, r0, r5
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	d9f5      	bls.n	8000898 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008ac:	2320      	movs	r3, #32
 80008ae:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008b0:	2003      	movs	r0, #3
 80008b2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80008b8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008ba:	4820      	ldr	r0, [pc, #128]	; (800093c <HAL_DMA_Init+0xc8>)
 80008bc:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008be:	6861      	ldr	r1, [r4, #4]
 80008c0:	68a2      	ldr	r2, [r4, #8]
 80008c2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008c6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c8:	6921      	ldr	r1, [r4, #16]
 80008ca:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008cc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ce:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d0:	69a1      	ldr	r1, [r4, #24]
 80008d2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d8:	6a21      	ldr	r1, [r4, #32]
 80008da:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008dc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80008e0:	2904      	cmp	r1, #4
 80008e2:	d01e      	beq.n	8000922 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80008e4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80008e6:	6826      	ldr	r6, [r4, #0]
 80008e8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008ea:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80008ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008f0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d107      	bne.n	8000906 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80008f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008f8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008fc:	b11b      	cbz	r3, 8000906 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008fe:	4620      	mov	r0, r4
 8000900:	f7ff ff70 	bl	80007e4 <DMA_CheckFifoParam>
 8000904:	b990      	cbnz	r0, 800092c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000906:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000908:	4620      	mov	r0, r4
 800090a:	f7ff ff4b 	bl	80007a4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800090e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000910:	233f      	movs	r3, #63	; 0x3f
 8000912:	4093      	lsls	r3, r2
 8000914:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000916:	2000      	movs	r0, #0
 8000918:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800091a:	2301      	movs	r3, #1
 800091c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000920:	e7c9      	b.n	80008b6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000922:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000924:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000926:	4301      	orrs	r1, r0
 8000928:	430a      	orrs	r2, r1
 800092a:	e7db      	b.n	80008e4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000930:	2001      	movs	r0, #1
 8000932:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000936:	e7be      	b.n	80008b6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000938:	2001      	movs	r0, #1
 800093a:	e7bc      	b.n	80008b6 <HAL_DMA_Init+0x42>
 800093c:	e010803f 	.word	0xe010803f

08000940 <HAL_DMA_Start_IT>:
{
 8000940:	b538      	push	{r3, r4, r5, lr}
 8000942:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000944:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000946:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800094a:	2801      	cmp	r0, #1
 800094c:	d030      	beq.n	80009b0 <HAL_DMA_Start_IT+0x70>
 800094e:	2001      	movs	r0, #1
 8000950:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000954:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000958:	b2c0      	uxtb	r0, r0
 800095a:	2801      	cmp	r0, #1
 800095c:	d004      	beq.n	8000968 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800095e:	2300      	movs	r3, #0
 8000960:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8000964:	2002      	movs	r0, #2
}
 8000966:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000968:	2002      	movs	r0, #2
 800096a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800096e:	2000      	movs	r0, #0
 8000970:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000972:	4620      	mov	r0, r4
 8000974:	f7ff ff00 	bl	8000778 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000978:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800097a:	233f      	movs	r3, #63	; 0x3f
 800097c:	4093      	lsls	r3, r2
 800097e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000980:	6822      	ldr	r2, [r4, #0]
 8000982:	6813      	ldr	r3, [r2, #0]
 8000984:	f043 0316 	orr.w	r3, r3, #22
 8000988:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	6953      	ldr	r3, [r2, #20]
 800098e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000992:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000996:	b123      	cbz	r3, 80009a2 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000998:	6822      	ldr	r2, [r4, #0]
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80009a2:	6822      	ldr	r2, [r4, #0]
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009ac:	2000      	movs	r0, #0
 80009ae:	e7da      	b.n	8000966 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80009b0:	2002      	movs	r0, #2
 80009b2:	e7d8      	b.n	8000966 <HAL_DMA_Start_IT+0x26>

080009b4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009b4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d003      	beq.n	80009c6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
 80009c4:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80009c6:	2305      	movs	r3, #5
 80009c8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80009cc:	6802      	ldr	r2, [r0, #0]
 80009ce:	6813      	ldr	r3, [r2, #0]
 80009d0:	f023 0301 	bic.w	r3, r3, #1
 80009d4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80009d6:	2000      	movs	r0, #0
}
 80009d8:	4770      	bx	lr
	...

080009dc <HAL_DMA_IRQHandler>:
{
 80009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80009e6:	4b72      	ldr	r3, [pc, #456]	; (8000bb0 <HAL_DMA_IRQHandler+0x1d4>)
 80009e8:	681d      	ldr	r5, [r3, #0]
 80009ea:	4b72      	ldr	r3, [pc, #456]	; (8000bb4 <HAL_DMA_IRQHandler+0x1d8>)
 80009ec:	fba3 3505 	umull	r3, r5, r3, r5
 80009f0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009f2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80009f4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009f6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80009f8:	2308      	movs	r3, #8
 80009fa:	4093      	lsls	r3, r2
 80009fc:	4233      	tst	r3, r6
 80009fe:	d010      	beq.n	8000a22 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a00:	6803      	ldr	r3, [r0, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	f012 0f04 	tst.w	r2, #4
 8000a08:	d00b      	beq.n	8000a22 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	f022 0204 	bic.w	r2, r2, #4
 8000a10:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a12:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a14:	2308      	movs	r3, #8
 8000a16:	4093      	lsls	r3, r2
 8000a18:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a1a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a24:	2301      	movs	r3, #1
 8000a26:	4093      	lsls	r3, r2
 8000a28:	4233      	tst	r3, r6
 8000a2a:	d009      	beq.n	8000a40 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a2c:	6822      	ldr	r2, [r4, #0]
 8000a2e:	6952      	ldr	r2, [r2, #20]
 8000a30:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000a34:	d004      	beq.n	8000a40 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a36:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a42:	2304      	movs	r3, #4
 8000a44:	4093      	lsls	r3, r2
 8000a46:	4233      	tst	r3, r6
 8000a48:	d009      	beq.n	8000a5e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a4a:	6822      	ldr	r2, [r4, #0]
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	f012 0f02 	tst.w	r2, #2
 8000a52:	d004      	beq.n	8000a5e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a54:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a5e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a60:	2310      	movs	r3, #16
 8000a62:	4093      	lsls	r3, r2
 8000a64:	4233      	tst	r3, r6
 8000a66:	d024      	beq.n	8000ab2 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a68:	6822      	ldr	r2, [r4, #0]
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	f012 0f08 	tst.w	r2, #8
 8000a70:	d01f      	beq.n	8000ab2 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a72:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000a7c:	d00d      	beq.n	8000a9a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000a84:	d104      	bne.n	8000a90 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a88:	b19b      	cbz	r3, 8000ab2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	4798      	blx	r3
 8000a8e:	e010      	b.n	8000ab2 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000a90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000a92:	b173      	cbz	r3, 8000ab2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000a94:	4620      	mov	r0, r4
 8000a96:	4798      	blx	r3
 8000a98:	e00b      	b.n	8000ab2 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000aa0:	d103      	bne.n	8000aaa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	f022 0208 	bic.w	r2, r2, #8
 8000aa8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000aac:	b10b      	cbz	r3, 8000ab2 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000aae:	4620      	mov	r0, r4
 8000ab0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ab2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	4233      	tst	r3, r6
 8000aba:	d055      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000abc:	6822      	ldr	r2, [r4, #0]
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	f012 0f10 	tst.w	r2, #16
 8000ac4:	d050      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000ac6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ac8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d00e      	beq.n	8000af0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000ada:	d033      	beq.n	8000b44 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000ae2:	d12a      	bne.n	8000b3a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000ae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d03e      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000aea:	4620      	mov	r0, r4
 8000aec:	4798      	blx	r3
 8000aee:	e03b      	b.n	8000b68 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000af0:	6822      	ldr	r2, [r4, #0]
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	f023 0316 	bic.w	r3, r3, #22
 8000af8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000afa:	6822      	ldr	r2, [r4, #0]
 8000afc:	6953      	ldr	r3, [r2, #20]
 8000afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b02:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b06:	b1a3      	cbz	r3, 8000b32 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b08:	6822      	ldr	r2, [r4, #0]
 8000b0a:	6813      	ldr	r3, [r2, #0]
 8000b0c:	f023 0308 	bic.w	r3, r3, #8
 8000b10:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b12:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b14:	233f      	movs	r3, #63	; 0x3f
 8000b16:	4093      	lsls	r3, r2
 8000b18:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000b20:	2301      	movs	r3, #1
 8000b22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000b26:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d03f      	beq.n	8000bac <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	4798      	blx	r3
        return;
 8000b30:	e03c      	b.n	8000bac <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e7      	bne.n	8000b08 <HAL_DMA_IRQHandler+0x12c>
 8000b38:	e7eb      	b.n	8000b12 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000b3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b3c:	b1a3      	cbz	r3, 8000b68 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000b3e:	4620      	mov	r0, r4
 8000b40:	4798      	blx	r3
 8000b42:	e011      	b.n	8000b68 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000b4a:	d109      	bne.n	8000b60 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	f022 0210 	bic.w	r2, r2, #16
 8000b52:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8000b54:	2300      	movs	r3, #0
 8000b56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000b60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b62:	b10b      	cbz	r3, 8000b68 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000b64:	4620      	mov	r0, r4
 8000b66:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b6a:	b1fb      	cbz	r3, 8000bac <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000b6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b6e:	f013 0f01 	tst.w	r3, #1
 8000b72:	d017      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b74:	2305      	movs	r3, #5
 8000b76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	6813      	ldr	r3, [r2, #0]
 8000b7e:	f023 0301 	bic.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000b84:	9b01      	ldr	r3, [sp, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	42ab      	cmp	r3, r5
 8000b8c:	d804      	bhi.n	8000b98 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f013 0f01 	tst.w	r3, #1
 8000b96:	d1f5      	bne.n	8000b84 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000ba4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ba6:	b10b      	cbz	r3, 8000bac <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000ba8:	4620      	mov	r0, r4
 8000baa:	4798      	blx	r3
}
 8000bac:	b003      	add	sp, #12
 8000bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	1b4e81b5 	.word	0x1b4e81b5

08000bb8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	f200 80e2 	bhi.w	8000d84 <HAL_GPIO_Init+0x1cc>
{
 8000bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	e03a      	b.n	8000c3c <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bc6:	2209      	movs	r2, #9
 8000bc8:	e000      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000bca:	2200      	movs	r2, #0
 8000bcc:	40aa      	lsls	r2, r5
 8000bce:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bd0:	3402      	adds	r4, #2
 8000bd2:	4d6d      	ldr	r5, [pc, #436]	; (8000d88 <HAL_GPIO_Init+0x1d0>)
 8000bd4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd8:	4a6c      	ldr	r2, [pc, #432]	; (8000d8c <HAL_GPIO_Init+0x1d4>)
 8000bda:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bdc:	ea6f 020c 	mvn.w	r2, ip
 8000be0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be4:	684e      	ldr	r6, [r1, #4]
 8000be6:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000bea:	d001      	beq.n	8000bf0 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000bec:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8000bf0:	4c66      	ldr	r4, [pc, #408]	; (8000d8c <HAL_GPIO_Init+0x1d4>)
 8000bf2:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000bf4:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bf6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfa:	684e      	ldr	r6, [r1, #4]
 8000bfc:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000c00:	d001      	beq.n	8000c06 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8000c02:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000c06:	4c61      	ldr	r4, [pc, #388]	; (8000d8c <HAL_GPIO_Init+0x1d4>)
 8000c08:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c0a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c0c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c10:	684e      	ldr	r6, [r1, #4]
 8000c12:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000c16:	d001      	beq.n	8000c1c <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8000c18:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000c1c:	4c5b      	ldr	r4, [pc, #364]	; (8000d8c <HAL_GPIO_Init+0x1d4>)
 8000c1e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000c20:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c22:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c24:	684d      	ldr	r5, [r1, #4]
 8000c26:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8000c2a:	d001      	beq.n	8000c30 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000c2c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8000c30:	4c56      	ldr	r4, [pc, #344]	; (8000d8c <HAL_GPIO_Init+0x1d4>)
 8000c32:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c34:	3301      	adds	r3, #1
 8000c36:	2b0f      	cmp	r3, #15
 8000c38:	f200 80a2 	bhi.w	8000d80 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c40:	680c      	ldr	r4, [r1, #0]
 8000c42:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000c46:	ea32 0404 	bics.w	r4, r2, r4
 8000c4a:	d1f3      	bne.n	8000c34 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4c:	684c      	ldr	r4, [r1, #4]
 8000c4e:	2c12      	cmp	r4, #18
 8000c50:	bf18      	it	ne
 8000c52:	2c02      	cmpne	r4, #2
 8000c54:	d110      	bne.n	8000c78 <HAL_GPIO_Init+0xc0>
        temp = GPIOx->AFR[position >> 3];
 8000c56:	08dd      	lsrs	r5, r3, #3
 8000c58:	3508      	adds	r5, #8
 8000c5a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c5e:	f003 0407 	and.w	r4, r3, #7
 8000c62:	00a6      	lsls	r6, r4, #2
 8000c64:	240f      	movs	r4, #15
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	ea27 0e04 	bic.w	lr, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c6c:	690c      	ldr	r4, [r1, #16]
 8000c6e:	40b4      	lsls	r4, r6
 8000c70:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000c74:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000c78:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c7a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c7e:	2403      	movs	r4, #3
 8000c80:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c84:	43e5      	mvns	r5, r4
 8000c86:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c8a:	684c      	ldr	r4, [r1, #4]
 8000c8c:	f004 0403 	and.w	r4, r4, #3
 8000c90:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c94:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8000c96:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c98:	684c      	ldr	r4, [r1, #4]
 8000c9a:	1e66      	subs	r6, r4, #1
 8000c9c:	2c11      	cmp	r4, #17
 8000c9e:	bf18      	it	ne
 8000ca0:	2e01      	cmpne	r6, #1
 8000ca2:	d901      	bls.n	8000ca8 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca4:	2c12      	cmp	r4, #18
 8000ca6:	d10f      	bne.n	8000cc8 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000ca8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000caa:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cac:	68cc      	ldr	r4, [r1, #12]
 8000cae:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cb2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000cb4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cb6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb8:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000cbc:	684c      	ldr	r4, [r1, #4]
 8000cbe:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000cc2:	409c      	lsls	r4, r3
 8000cc4:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000cc6:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cc8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cca:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ccc:	688a      	ldr	r2, [r1, #8]
 8000cce:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cd2:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000cd4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd6:	684a      	ldr	r2, [r1, #4]
 8000cd8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000cdc:	d0aa      	beq.n	8000c34 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4a2c      	ldr	r2, [pc, #176]	; (8000d90 <HAL_GPIO_Init+0x1d8>)
 8000ce0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000ce2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000ce6:	6454      	str	r4, [r2, #68]	; 0x44
 8000ce8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cee:	9201      	str	r2, [sp, #4]
 8000cf0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000cf2:	089c      	lsrs	r4, r3, #2
 8000cf4:	1ca5      	adds	r5, r4, #2
 8000cf6:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <HAL_GPIO_Init+0x1d0>)
 8000cf8:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cfc:	f003 0203 	and.w	r2, r3, #3
 8000d00:	0095      	lsls	r5, r2, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	40aa      	lsls	r2, r5
 8000d06:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d0a:	4a22      	ldr	r2, [pc, #136]	; (8000d94 <HAL_GPIO_Init+0x1dc>)
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	f43f af5c 	beq.w	8000bca <HAL_GPIO_Init+0x12>
 8000d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d022      	beq.n	8000d60 <HAL_GPIO_Init+0x1a8>
 8000d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d020      	beq.n	8000d64 <HAL_GPIO_Init+0x1ac>
 8000d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d01e      	beq.n	8000d68 <HAL_GPIO_Init+0x1b0>
 8000d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	d01c      	beq.n	8000d6c <HAL_GPIO_Init+0x1b4>
 8000d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d01a      	beq.n	8000d70 <HAL_GPIO_Init+0x1b8>
 8000d3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	d018      	beq.n	8000d74 <HAL_GPIO_Init+0x1bc>
 8000d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d016      	beq.n	8000d78 <HAL_GPIO_Init+0x1c0>
 8000d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	d014      	beq.n	8000d7c <HAL_GPIO_Init+0x1c4>
 8000d52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d56:	4290      	cmp	r0, r2
 8000d58:	f43f af35 	beq.w	8000bc6 <HAL_GPIO_Init+0xe>
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	e735      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d60:	2201      	movs	r2, #1
 8000d62:	e733      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d64:	2202      	movs	r2, #2
 8000d66:	e731      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d68:	2203      	movs	r2, #3
 8000d6a:	e72f      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	e72d      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d70:	2205      	movs	r2, #5
 8000d72:	e72b      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d74:	2206      	movs	r2, #6
 8000d76:	e729      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d78:	2207      	movs	r2, #7
 8000d7a:	e727      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	e725      	b.n	8000bcc <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000d80:	b003      	add	sp, #12
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40013800 	.word	0x40013800
 8000d8c:	40013c00 	.word	0x40013c00
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000

08000d98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d98:	b10a      	cbz	r2, 8000d9e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d9a:	6181      	str	r1, [r0, #24]
 8000d9c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d9e:	0409      	lsls	r1, r1, #16
 8000da0:	6181      	str	r1, [r0, #24]
  }
}
 8000da2:	4770      	bx	lr

08000da4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000da4:	6943      	ldr	r3, [r0, #20]
 8000da6:	ea31 0303 	bics.w	r3, r1, r3
 8000daa:	d001      	beq.n	8000db0 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dac:	6181      	str	r1, [r0, #24]
  }
}
 8000dae:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000db0:	0409      	lsls	r1, r1, #16
 8000db2:	6181      	str	r1, [r0, #24]
 8000db4:	4770      	bx	lr

08000db6 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000db6:	4770      	bx	lr

08000db8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000db8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4203      	tst	r3, r0
 8000dc0:	d100      	bne.n	8000dc4 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8000dc2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000dc6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dc8:	f7ff fff5 	bl	8000db6 <HAL_GPIO_EXTI_Callback>
}
 8000dcc:	e7f9      	b.n	8000dc2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000dce:	bf00      	nop
 8000dd0:	40013c00 	.word	0x40013c00

08000dd4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000dd4:	6803      	ldr	r3, [r0, #0]
 8000dd6:	699a      	ldr	r2, [r3, #24]
 8000dd8:	f012 0f02 	tst.w	r2, #2
 8000ddc:	d001      	beq.n	8000de2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000dde:	2200      	movs	r2, #0
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000de2:	6803      	ldr	r3, [r0, #0]
 8000de4:	699a      	ldr	r2, [r3, #24]
 8000de6:	f012 0f01 	tst.w	r2, #1
 8000dea:	d103      	bne.n	8000df4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000dec:	699a      	ldr	r2, [r3, #24]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	619a      	str	r2, [r3, #24]
  }
}
 8000df4:	4770      	bx	lr

08000df6 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000df6:	f011 0f01 	tst.w	r1, #1
 8000dfa:	d009      	beq.n	8000e10 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000dfc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000e04:	2b28      	cmp	r3, #40	; 0x28
 8000e06:	d001      	beq.n	8000e0c <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000e08:	23f2      	movs	r3, #242	; 0xf2
 8000e0a:	e002      	b.n	8000e12 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8000e0c:	2342      	movs	r3, #66	; 0x42
 8000e0e:	e000      	b.n	8000e12 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8000e10:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000e12:	f011 0f02 	tst.w	r1, #2
 8000e16:	d009      	beq.n	8000e2c <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000e18:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000e1c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000e20:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000e24:	2a28      	cmp	r2, #40	; 0x28
 8000e26:	d016      	beq.n	8000e56 <I2C_Disable_IRQ+0x60>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000e28:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000e2c:	f011 0f04 	tst.w	r1, #4
 8000e30:	d001      	beq.n	8000e36 <I2C_Disable_IRQ+0x40>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000e32:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000e36:	f001 0211 	and.w	r2, r1, #17
 8000e3a:	2a11      	cmp	r2, #17
 8000e3c:	d00d      	beq.n	8000e5a <I2C_Disable_IRQ+0x64>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000e3e:	f001 0112 	and.w	r1, r1, #18
 8000e42:	2912      	cmp	r1, #18
 8000e44:	d00c      	beq.n	8000e60 <I2C_Disable_IRQ+0x6a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8000e46:	2912      	cmp	r1, #18
 8000e48:	d00d      	beq.n	8000e66 <I2C_Disable_IRQ+0x70>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000e4a:	6801      	ldr	r1, [r0, #0]
 8000e4c:	680a      	ldr	r2, [r1, #0]
 8000e4e:	ea22 0303 	bic.w	r3, r2, r3
 8000e52:	600b      	str	r3, [r1, #0]
}
 8000e54:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000e56:	4663      	mov	r3, ip
 8000e58:	e7e8      	b.n	8000e2c <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000e5a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000e5e:	e7ee      	b.n	8000e3e <I2C_Disable_IRQ+0x48>
    tmpisr |= I2C_IT_STOPI;
 8000e60:	f043 0320 	orr.w	r3, r3, #32
 8000e64:	e7ef      	b.n	8000e46 <I2C_Disable_IRQ+0x50>
    tmpisr |= I2C_IT_TCI;
 8000e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e6a:	e7ee      	b.n	8000e4a <I2C_Disable_IRQ+0x54>

08000e6c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d057      	beq.n	8000f20 <HAL_I2C_Init+0xb4>
{
 8000e70:	b510      	push	{r4, lr}
 8000e72:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e74:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d041      	beq.n	8000f00 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e7c:	2324      	movs	r3, #36	; 0x24
 8000e7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000e82:	6822      	ldr	r2, [r4, #0]
 8000e84:	6813      	ldr	r3, [r2, #0]
 8000e86:	f023 0301 	bic.w	r3, r3, #1
 8000e8a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e8c:	6863      	ldr	r3, [r4, #4]
 8000e8e:	6822      	ldr	r2, [r4, #0]
 8000e90:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000e94:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e96:	6822      	ldr	r2, [r4, #0]
 8000e98:	6893      	ldr	r3, [r2, #8]
 8000e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e9e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ea0:	68e3      	ldr	r3, [r4, #12]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d031      	beq.n	8000f0a <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ea6:	68a3      	ldr	r3, [r4, #8]
 8000ea8:	6822      	ldr	r2, [r4, #0]
 8000eaa:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8000eae:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000eb0:	68e3      	ldr	r3, [r4, #12]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d02f      	beq.n	8000f16 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000eb6:	6822      	ldr	r2, [r4, #0]
 8000eb8:	6851      	ldr	r1, [r2, #4]
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_I2C_Init+0xb8>)
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ec0:	6822      	ldr	r2, [r4, #0]
 8000ec2:	68d3      	ldr	r3, [r2, #12]
 8000ec4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ec8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000eca:	6923      	ldr	r3, [r4, #16]
 8000ecc:	6962      	ldr	r2, [r4, #20]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	69a1      	ldr	r1, [r4, #24]
 8000ed2:	6822      	ldr	r2, [r4, #0]
 8000ed4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000ed8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000eda:	69e3      	ldr	r3, [r4, #28]
 8000edc:	6a21      	ldr	r1, [r4, #32]
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000ee4:	6822      	ldr	r2, [r4, #0]
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eee:	2000      	movs	r0, #0
 8000ef0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ef8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000efa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8000efe:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000f00:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000f04:	f003 ff80 	bl	8004e08 <HAL_I2C_MspInit>
 8000f08:	e7b8      	b.n	8000e7c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f0a:	68a3      	ldr	r3, [r4, #8]
 8000f0c:	6822      	ldr	r2, [r4, #0]
 8000f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f12:	6093      	str	r3, [r2, #8]
 8000f14:	e7cc      	b.n	8000eb0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	e7ca      	b.n	8000eb6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8000f20:	2001      	movs	r0, #1
}
 8000f22:	4770      	bx	lr
 8000f24:	02008000 	.word	0x02008000

08000f28 <HAL_I2C_EV_IRQHandler>:
{
 8000f28:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000f2a:	6803      	ldr	r3, [r0, #0]
 8000f2c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000f2e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8000f30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f32:	b103      	cbz	r3, 8000f36 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000f34:	4798      	blx	r3
}
 8000f36:	bd08      	pop	{r3, pc}

08000f38 <HAL_I2C_SlaveTxCpltCallback>:
}
 8000f38:	4770      	bx	lr

08000f3a <HAL_I2C_SlaveRxCpltCallback>:
}
 8000f3a:	4770      	bx	lr

08000f3c <I2C_ITSlaveSeqCplt>:
{
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000f46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b29      	cmp	r3, #41	; 0x29
 8000f4e:	d005      	beq.n	8000f5c <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000f50:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b2a      	cmp	r3, #42	; 0x2a
 8000f58:	d00f      	beq.n	8000f7a <I2C_ITSlaveSeqCplt+0x3e>
}
 8000f5a:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000f5c:	2328      	movs	r3, #40	; 0x28
 8000f5e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000f62:	2321      	movs	r3, #33	; 0x21
 8000f64:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000f66:	2101      	movs	r1, #1
 8000f68:	f7ff ff45 	bl	8000df6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000f72:	4620      	mov	r0, r4
 8000f74:	f7ff ffe0 	bl	8000f38 <HAL_I2C_SlaveTxCpltCallback>
 8000f78:	e7ef      	b.n	8000f5a <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000f7a:	2328      	movs	r3, #40	; 0x28
 8000f7c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000f80:	2322      	movs	r3, #34	; 0x22
 8000f82:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000f84:	2102      	movs	r1, #2
 8000f86:	f7ff ff36 	bl	8000df6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000f90:	4620      	mov	r0, r4
 8000f92:	f7ff ffd2 	bl	8000f3a <HAL_I2C_SlaveRxCpltCallback>
}
 8000f96:	e7e0      	b.n	8000f5a <I2C_ITSlaveSeqCplt+0x1e>

08000f98 <HAL_I2C_AddrCallback>:
}
 8000f98:	4770      	bx	lr

08000f9a <I2C_ITAddrCplt>:
{
 8000f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9c:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000f9e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000fa6:	2b28      	cmp	r3, #40	; 0x28
 8000fa8:	d006      	beq.n	8000fb8 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000faa:	6803      	ldr	r3, [r0, #0]
 8000fac:	2208      	movs	r2, #8
 8000fae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8000fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8000fb8:	6803      	ldr	r3, [r0, #0]
 8000fba:	699e      	ldr	r6, [r3, #24]
 8000fbc:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000fc0:	699a      	ldr	r2, [r3, #24]
 8000fc2:	0c12      	lsrs	r2, r2, #16
 8000fc4:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000fce:	68df      	ldr	r7, [r3, #12]
 8000fd0:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fd4:	68c1      	ldr	r1, [r0, #12]
 8000fd6:	2902      	cmp	r1, #2
 8000fd8:	d121      	bne.n	800101e <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000fda:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8000fde:	f015 0f06 	tst.w	r5, #6
 8000fe2:	d110      	bne.n	8001006 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8000fe4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000fe6:	3101      	adds	r1, #1
 8000fe8:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8000fea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000fec:	2902      	cmp	r1, #2
 8000fee:	d1e2      	bne.n	8000fb6 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000ff4:	2008      	movs	r0, #8
 8000ff6:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8000ff8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	4620      	mov	r0, r4
 8001000:	f7ff ffca 	bl	8000f98 <HAL_I2C_AddrCallback>
 8001004:	e7d7      	b.n	8000fb6 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001006:	2104      	movs	r1, #4
 8001008:	f7ff fef5 	bl	8000df6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800100c:	2300      	movs	r3, #0
 800100e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001012:	463a      	mov	r2, r7
 8001014:	4631      	mov	r1, r6
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff ffbe 	bl	8000f98 <HAL_I2C_AddrCallback>
 800101c:	e7cb      	b.n	8000fb6 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800101e:	2104      	movs	r1, #4
 8001020:	f7ff fee9 	bl	8000df6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001024:	2300      	movs	r3, #0
 8001026:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800102a:	462a      	mov	r2, r5
 800102c:	4631      	mov	r1, r6
 800102e:	4620      	mov	r0, r4
 8001030:	f7ff ffb2 	bl	8000f98 <HAL_I2C_AddrCallback>
 8001034:	e7bf      	b.n	8000fb6 <I2C_ITAddrCplt+0x1c>

08001036 <HAL_I2C_ListenCpltCallback>:
}
 8001036:	4770      	bx	lr

08001038 <I2C_ITListenCplt>:
{
 8001038:	b510      	push	{r4, lr}
 800103a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <I2C_ITListenCplt+0x64>)
 800103e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001040:	2300      	movs	r3, #0
 8001042:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001044:	2220      	movs	r2, #32
 8001046:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800104a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800104e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001050:	f011 0f04 	tst.w	r1, #4
 8001054:	d013      	beq.n	800107e <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001056:	6803      	ldr	r3, [r0, #0]
 8001058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800105c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800105e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001060:	3301      	adds	r3, #1
 8001062:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001064:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001066:	b153      	cbz	r3, 800107e <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8001068:	3b01      	subs	r3, #1
 800106a:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 800106c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800106e:	b29b      	uxth	r3, r3
 8001070:	3b01      	subs	r3, #1
 8001072:	b29b      	uxth	r3, r3
 8001074:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001076:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800107e:	2107      	movs	r1, #7
 8001080:	4620      	mov	r0, r4
 8001082:	f7ff feb8 	bl	8000df6 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	2210      	movs	r2, #16
 800108a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800108c:	2300      	movs	r3, #0
 800108e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff ffcf 	bl	8001036 <HAL_I2C_ListenCpltCallback>
}
 8001098:	bd10      	pop	{r4, pc}
 800109a:	bf00      	nop
 800109c:	ffff0000 	.word	0xffff0000

080010a0 <HAL_I2C_ErrorCallback>:
}
 80010a0:	4770      	bx	lr

080010a2 <HAL_I2C_AbortCpltCallback>:
}
 80010a2:	4770      	bx	lr

080010a4 <I2C_ITError>:
{
 80010a4:	b510      	push	{r4, lr}
 80010a6:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80010a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80010ac:	2000      	movs	r0, #0
 80010ae:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80010b2:	4a36      	ldr	r2, [pc, #216]	; (800118c <I2C_ITError+0xe8>)
 80010b4:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80010b6:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80010b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80010ba:	430a      	orrs	r2, r1
 80010bc:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80010be:	3b28      	subs	r3, #40	; 0x28
 80010c0:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d824      	bhi.n	8001110 <I2C_ITError+0x6c>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80010c6:	2103      	movs	r1, #3
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff fe94 	bl	8000df6 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80010ce:	2328      	movs	r3, #40	; 0x28
 80010d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <I2C_ITError+0xec>)
 80010da:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80010e4:	d024      	beq.n	8001130 <I2C_ITError+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010ec:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80010ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d03f      	beq.n	8001174 <I2C_ITError+0xd0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80010f4:	4a27      	ldr	r2, [pc, #156]	; (8001194 <I2C_ITError+0xf0>)
 80010f6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80010f8:	2300      	movs	r3, #0
 80010fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80010fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001100:	f7ff fc58 	bl	80009b4 <HAL_DMA_Abort_IT>
 8001104:	2800      	cmp	r0, #0
 8001106:	d035      	beq.n	8001174 <I2C_ITError+0xd0>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001108:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800110a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800110c:	4798      	blx	r3
 800110e:	e031      	b.n	8001174 <I2C_ITError+0xd0>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001110:	2107      	movs	r1, #7
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff fe6f 	bl	8000df6 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001118:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b60      	cmp	r3, #96	; 0x60
 8001120:	d002      	beq.n	8001128 <I2C_ITError+0x84>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001122:	2320      	movs	r3, #32
 8001124:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001128:	2300      	movs	r3, #0
 800112a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800112c:	6363      	str	r3, [r4, #52]	; 0x34
 800112e:	e7d5      	b.n	80010dc <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001136:	d012      	beq.n	800115e <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800113e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001140:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001142:	b1bb      	cbz	r3, 8001174 <I2C_ITError+0xd0>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <I2C_ITError+0xf0>)
 8001146:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8001148:	2300      	movs	r3, #0
 800114a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800114e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001150:	f7ff fc30 	bl	80009b4 <HAL_DMA_Abort_IT>
 8001154:	b170      	cbz	r0, 8001174 <I2C_ITError+0xd0>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001156:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001158:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800115a:	4798      	blx	r3
 800115c:	e00a      	b.n	8001174 <I2C_ITError+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800115e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b60      	cmp	r3, #96	; 0x60
 8001166:	d006      	beq.n	8001176 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8001168:	2300      	movs	r3, #0
 800116a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff ff96 	bl	80010a0 <HAL_I2C_ErrorCallback>
}
 8001174:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001176:	2320      	movs	r3, #32
 8001178:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800117c:	2300      	movs	r3, #0
 800117e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001182:	4620      	mov	r0, r4
 8001184:	f7ff ff8d 	bl	80010a2 <HAL_I2C_AbortCpltCallback>
 8001188:	e7f4      	b.n	8001174 <I2C_ITError+0xd0>
 800118a:	bf00      	nop
 800118c:	ffff0000 	.word	0xffff0000
 8001190:	080012b9 	.word	0x080012b9
 8001194:	08001475 	.word	0x08001475

08001198 <I2C_ITSlaveCplt>:
{
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	4604      	mov	r4, r0
 800119c:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800119e:	6803      	ldr	r3, [r0, #0]
 80011a0:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011a2:	2220      	movs	r2, #32
 80011a4:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80011a6:	2107      	movs	r1, #7
 80011a8:	f7ff fe25 	bl	8000df6 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	6853      	ldr	r3, [r2, #4]
 80011b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011b4:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80011b6:	6822      	ldr	r2, [r4, #0]
 80011b8:	6853      	ldr	r3, [r2, #4]
 80011ba:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80011be:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80011c2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff fe01 	bl	8000dd4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80011d2:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80011d6:	d03b      	beq.n	8001250 <I2C_ITSlaveCplt+0xb8>
    if (hi2c->hdmatx != NULL)
 80011d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011da:	b11b      	cbz	r3, 80011e4 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80011e4:	f015 0f04 	tst.w	r5, #4
 80011e8:	d011      	beq.n	800120e <I2C_ITSlaveCplt+0x76>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80011ea:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80011f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f8:	3301      	adds	r3, #1
 80011fa:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80011fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011fe:	b133      	cbz	r3, 800120e <I2C_ITSlaveCplt+0x76>
      hi2c->XferSize--;
 8001200:	3b01      	subs	r3, #1
 8001202:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001204:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001206:	b29b      	uxth	r3, r3
 8001208:	3b01      	subs	r3, #1
 800120a:	b29b      	uxth	r3, r3
 800120c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800120e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001210:	b29b      	uxth	r3, r3
 8001212:	b11b      	cbz	r3, 800121c <I2C_ITSlaveCplt+0x84>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001214:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001224:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001226:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001228:	b9eb      	cbnz	r3, 8001266 <I2C_ITSlaveCplt+0xce>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800122a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800122c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001230:	d127      	bne.n	8001282 <I2C_ITSlaveCplt+0xea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001232:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b22      	cmp	r3, #34	; 0x22
 800123a:	d031      	beq.n	80012a0 <I2C_ITSlaveCplt+0x108>
    hi2c->State = HAL_I2C_STATE_READY;
 800123c:	2320      	movs	r3, #32
 800123e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001242:	2300      	movs	r3, #0
 8001244:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001248:	4620      	mov	r0, r4
 800124a:	f7ff fe75 	bl	8000f38 <HAL_I2C_SlaveTxCpltCallback>
}
 800124e:	e026      	b.n	800129e <I2C_ITSlaveCplt+0x106>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001250:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8001254:	d0c6      	beq.n	80011e4 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8001256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0c3      	beq.n	80011e4 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	b29b      	uxth	r3, r3
 8001262:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001264:	e7be      	b.n	80011e4 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001266:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff ff1b 	bl	80010a4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800126e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b28      	cmp	r3, #40	; 0x28
 8001276:	d112      	bne.n	800129e <I2C_ITSlaveCplt+0x106>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001278:	4629      	mov	r1, r5
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff fedc 	bl	8001038 <I2C_ITListenCplt>
 8001280:	e00d      	b.n	800129e <I2C_ITSlaveCplt+0x106>
    I2C_ITSlaveSeqCplt(hi2c);
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff fe5a 	bl	8000f3c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <I2C_ITSlaveCplt+0x11c>)
 800128a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800128c:	2320      	movs	r3, #32
 800128e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001292:	2300      	movs	r3, #0
 8001294:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001298:	4620      	mov	r0, r4
 800129a:	f7ff fecc 	bl	8001036 <HAL_I2C_ListenCpltCallback>
}
 800129e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80012a0:	2320      	movs	r3, #32
 80012a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012a6:	2300      	movs	r3, #0
 80012a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff fe44 	bl	8000f3a <HAL_I2C_SlaveRxCpltCallback>
 80012b2:	e7f4      	b.n	800129e <I2C_ITSlaveCplt+0x106>
 80012b4:	ffff0000 	.word	0xffff0000

080012b8 <I2C_Slave_ISR_IT>:
{
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	4616      	mov	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 80012bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80012be:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f000 809f 	beq.w	8001406 <I2C_Slave_ISR_IT+0x14e>
 80012c8:	4604      	mov	r4, r0
 80012ca:	460d      	mov	r5, r1
 80012cc:	2301      	movs	r3, #1
 80012ce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80012d2:	f011 0f10 	tst.w	r1, #16
 80012d6:	d03f      	beq.n	8001358 <I2C_Slave_ISR_IT+0xa0>
 80012d8:	f016 0f10 	tst.w	r6, #16
 80012dc:	d03c      	beq.n	8001358 <I2C_Slave_ISR_IT+0xa0>
    if (hi2c->XferCount == 0U)
 80012de:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	bb4b      	cbnz	r3, 8001338 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80012e4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b28      	cmp	r3, #40	; 0x28
 80012ec:	d011      	beq.n	8001312 <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80012ee:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b29      	cmp	r3, #41	; 0x29
 80012f6:	d012      	beq.n	800131e <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	2210      	movs	r2, #16
 80012fc:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80012fe:	f015 0f20 	tst.w	r5, #32
 8001302:	d002      	beq.n	800130a <I2C_Slave_ISR_IT+0x52>
 8001304:	f016 0f20 	tst.w	r6, #32
 8001308:	d178      	bne.n	80013fc <I2C_Slave_ISR_IT+0x144>
  __HAL_UNLOCK(hi2c);
 800130a:	2000      	movs	r0, #0
 800130c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001310:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001312:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8001316:	d1ea      	bne.n	80012ee <I2C_Slave_ISR_IT+0x36>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001318:	f7ff fe8e 	bl	8001038 <I2C_ITListenCplt>
 800131c:	e7ef      	b.n	80012fe <I2C_Slave_ISR_IT+0x46>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800131e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001322:	d0e9      	beq.n	80012f8 <I2C_Slave_ISR_IT+0x40>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	2210      	movs	r2, #16
 8001328:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff fd52 	bl	8000dd4 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8001330:	4620      	mov	r0, r4
 8001332:	f7ff fe03 	bl	8000f3c <I2C_ITSlaveSeqCplt>
 8001336:	e7e2      	b.n	80012fe <I2C_Slave_ISR_IT+0x46>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001338:	6803      	ldr	r3, [r0, #0]
 800133a:	2110      	movs	r1, #16
 800133c:	61d9      	str	r1, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800133e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001346:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800134a:	bf18      	it	ne
 800134c:	2a00      	cmpne	r2, #0
 800134e:	d1d6      	bne.n	80012fe <I2C_Slave_ISR_IT+0x46>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001350:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001352:	f7ff fea7 	bl	80010a4 <I2C_ITError>
 8001356:	e7d2      	b.n	80012fe <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001358:	f015 0f04 	tst.w	r5, #4
 800135c:	d021      	beq.n	80013a2 <I2C_Slave_ISR_IT+0xea>
 800135e:	f016 0f04 	tst.w	r6, #4
 8001362:	d01e      	beq.n	80013a2 <I2C_Slave_ISR_IT+0xea>
    if (hi2c->XferCount > 0U)
 8001364:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001366:	b29b      	uxth	r3, r3
 8001368:	b183      	cbz	r3, 800138c <I2C_Slave_ISR_IT+0xd4>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800136a:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001374:	7019      	strb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001378:	3301      	adds	r3, #1
 800137a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800137c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800137e:	3b01      	subs	r3, #1
 8001380:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001382:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001384:	b29b      	uxth	r3, r3
 8001386:	3b01      	subs	r3, #1
 8001388:	b29b      	uxth	r3, r3
 800138a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800138c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800138e:	b29b      	uxth	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1b4      	bne.n	80012fe <I2C_Slave_ISR_IT+0x46>
 8001394:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001398:	d0b1      	beq.n	80012fe <I2C_Slave_ISR_IT+0x46>
      I2C_ITSlaveSeqCplt(hi2c);
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fdce 	bl	8000f3c <I2C_ITSlaveSeqCplt>
 80013a0:	e7ad      	b.n	80012fe <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80013a2:	f015 0f08 	tst.w	r5, #8
 80013a6:	d002      	beq.n	80013ae <I2C_Slave_ISR_IT+0xf6>
 80013a8:	f016 0f08 	tst.w	r6, #8
 80013ac:	d118      	bne.n	80013e0 <I2C_Slave_ISR_IT+0x128>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80013ae:	f015 0f02 	tst.w	r5, #2
 80013b2:	d0a4      	beq.n	80012fe <I2C_Slave_ISR_IT+0x46>
 80013b4:	f016 0f02 	tst.w	r6, #2
 80013b8:	d0a1      	beq.n	80012fe <I2C_Slave_ISR_IT+0x46>
    if (hi2c->XferCount > 0U)
 80013ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b1a3      	cbz	r3, 80013ea <I2C_Slave_ISR_IT+0x132>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80013c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013ca:	3301      	adds	r3, #1
 80013cc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80013ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013da:	3b01      	subs	r3, #1
 80013dc:	8523      	strh	r3, [r4, #40]	; 0x28
 80013de:	e78e      	b.n	80012fe <I2C_Slave_ISR_IT+0x46>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80013e0:	4629      	mov	r1, r5
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff fdd9 	bl	8000f9a <I2C_ITAddrCplt>
 80013e8:	e789      	b.n	80012fe <I2C_Slave_ISR_IT+0x46>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	bf18      	it	ne
 80013ee:	f1b2 7f80 	cmpne.w	r2, #16777216	; 0x1000000
 80013f2:	d184      	bne.n	80012fe <I2C_Slave_ISR_IT+0x46>
        I2C_ITSlaveSeqCplt(hi2c);
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7ff fda1 	bl	8000f3c <I2C_ITSlaveSeqCplt>
 80013fa:	e780      	b.n	80012fe <I2C_Slave_ISR_IT+0x46>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80013fc:	4629      	mov	r1, r5
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff feca 	bl	8001198 <I2C_ITSlaveCplt>
 8001404:	e781      	b.n	800130a <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8001406:	2002      	movs	r0, #2
 8001408:	e782      	b.n	8001310 <I2C_Slave_ISR_IT+0x58>

0800140a <HAL_I2C_ER_IRQHandler>:
{
 800140a:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800140c:	6802      	ldr	r2, [r0, #0]
 800140e:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001410:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001412:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001416:	d009      	beq.n	800142c <HAL_I2C_ER_IRQHandler+0x22>
 8001418:	f011 0f80 	tst.w	r1, #128	; 0x80
 800141c:	d006      	beq.n	800142c <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800141e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001420:	f044 0401 	orr.w	r4, r4, #1
 8001424:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001426:	f44f 7480 	mov.w	r4, #256	; 0x100
 800142a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800142c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001430:	d00a      	beq.n	8001448 <HAL_I2C_ER_IRQHandler+0x3e>
 8001432:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001436:	d007      	beq.n	8001448 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800143a:	f042 0208 	orr.w	r2, r2, #8
 800143e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001440:	6802      	ldr	r2, [r0, #0]
 8001442:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001446:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001448:	f413 7f00 	tst.w	r3, #512	; 0x200
 800144c:	d00a      	beq.n	8001464 <HAL_I2C_ER_IRQHandler+0x5a>
 800144e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001452:	d007      	beq.n	8001464 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001454:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800145c:	6803      	ldr	r3, [r0, #0]
 800145e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001462:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001464:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001466:	f011 0f0b 	tst.w	r1, #11
 800146a:	d100      	bne.n	800146e <HAL_I2C_ER_IRQHandler+0x64>
}
 800146c:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800146e:	f7ff fe19 	bl	80010a4 <I2C_ITError>
}
 8001472:	e7fb      	b.n	800146c <HAL_I2C_ER_IRQHandler+0x62>

08001474 <I2C_DMAAbort>:
{
 8001474:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001476:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001478:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800147a:	2300      	movs	r3, #0
 800147c:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800147e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001480:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001482:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b60      	cmp	r3, #96	; 0x60
 800148a:	d002      	beq.n	8001492 <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 800148c:	f7ff fe08 	bl	80010a0 <HAL_I2C_ErrorCallback>
}
 8001490:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001492:	2320      	movs	r3, #32
 8001494:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001498:	f7ff fe03 	bl	80010a2 <HAL_I2C_AbortCpltCallback>
 800149c:	e7f8      	b.n	8001490 <I2C_DMAAbort+0x1c>

0800149e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800149e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b20      	cmp	r3, #32
 80014a6:	d124      	bne.n	80014f2 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d022      	beq.n	80014f6 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80014b0:	2301      	movs	r3, #1
 80014b2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014b6:	2324      	movs	r3, #36	; 0x24
 80014b8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014bc:	6802      	ldr	r2, [r0, #0]
 80014be:	6813      	ldr	r3, [r2, #0]
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014c6:	6802      	ldr	r2, [r0, #0]
 80014c8:	6813      	ldr	r3, [r2, #0]
 80014ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014ce:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014d0:	6802      	ldr	r2, [r0, #0]
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	4319      	orrs	r1, r3
 80014d6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014d8:	6802      	ldr	r2, [r0, #0]
 80014da:	6813      	ldr	r3, [r2, #0]
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e2:	2320      	movs	r3, #32
 80014e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e8:	2300      	movs	r3, #0
 80014ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80014ee:	4618      	mov	r0, r3
 80014f0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80014f2:	2002      	movs	r0, #2
 80014f4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80014f6:	2002      	movs	r0, #2
  }
}
 80014f8:	4770      	bx	lr

080014fa <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b20      	cmp	r3, #32
 8001502:	d122      	bne.n	800154a <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001504:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001508:	2b01      	cmp	r3, #1
 800150a:	d020      	beq.n	800154e <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800150c:	2301      	movs	r3, #1
 800150e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001512:	2324      	movs	r3, #36	; 0x24
 8001514:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001518:	6802      	ldr	r2, [r0, #0]
 800151a:	6813      	ldr	r3, [r2, #0]
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001522:	6802      	ldr	r2, [r0, #0]
 8001524:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001526:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800152a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800152e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	6813      	ldr	r3, [r2, #0]
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800153a:	2320      	movs	r3, #32
 800153c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001540:	2300      	movs	r3, #0
 8001542:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001546:	4618      	mov	r0, r3
 8001548:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800154a:	2002      	movs	r0, #2
 800154c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800154e:	2002      	movs	r0, #2
  }
}
 8001550:	4770      	bx	lr
	...

08001554 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001554:	b510      	push	{r4, lr}
 8001556:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_PWREx_EnableOverDrive+0x74>)
 800155a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800155c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800156c:	4a17      	ldr	r2, [pc, #92]	; (80015cc <HAL_PWREx_EnableOverDrive+0x78>)
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001576:	f7ff f87b 	bl	8000670 <HAL_GetTick>
 800157a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_PWREx_EnableOverDrive+0x78>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001584:	d108      	bne.n	8001598 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001586:	f7ff f873 	bl	8000670 <HAL_GetTick>
 800158a:	1b00      	subs	r0, r0, r4
 800158c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001590:	d9f4      	bls.n	800157c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001592:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001594:	b002      	add	sp, #8
 8001596:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <HAL_PWREx_EnableOverDrive+0x78>)
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80015a2:	f7ff f865 	bl	8000670 <HAL_GetTick>
 80015a6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_PWREx_EnableOverDrive+0x78>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015b0:	d107      	bne.n	80015c2 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b2:	f7ff f85d 	bl	8000670 <HAL_GetTick>
 80015b6:	1b00      	subs	r0, r0, r4
 80015b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80015bc:	d9f4      	bls.n	80015a8 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80015be:	2003      	movs	r0, #3
 80015c0:	e7e8      	b.n	8001594 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80015c2:	2000      	movs	r0, #0
 80015c4:	e7e6      	b.n	8001594 <HAL_PWREx_EnableOverDrive+0x40>
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d0:	2800      	cmp	r0, #0
 80015d2:	f000 81da 	beq.w	800198a <HAL_RCC_OscConfig+0x3ba>
{
 80015d6:	b570      	push	{r4, r5, r6, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015dc:	6803      	ldr	r3, [r0, #0]
 80015de:	f013 0f01 	tst.w	r3, #1
 80015e2:	d029      	beq.n	8001638 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e4:	4b95      	ldr	r3, [pc, #596]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d01a      	beq.n	8001626 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f0:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d00f      	beq.n	800161c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fc:	6863      	ldr	r3, [r4, #4]
 80015fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001602:	d040      	beq.n	8001686 <HAL_RCC_OscConfig+0xb6>
 8001604:	2b00      	cmp	r3, #0
 8001606:	d154      	bne.n	80016b2 <HAL_RCC_OscConfig+0xe2>
 8001608:	4b8c      	ldr	r3, [pc, #560]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e039      	b.n	8001690 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161c:	4b87      	ldr	r3, [pc, #540]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001624:	d0ea      	beq.n	80015fc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	4b85      	ldr	r3, [pc, #532]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800162e:	d003      	beq.n	8001638 <HAL_RCC_OscConfig+0x68>
 8001630:	6863      	ldr	r3, [r4, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 81ab 	beq.w	800198e <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	f013 0f02 	tst.w	r3, #2
 800163e:	d074      	beq.n	800172a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001640:	4b7e      	ldr	r3, [pc, #504]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f013 0f0c 	tst.w	r3, #12
 8001648:	d05e      	beq.n	8001708 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164a:	4b7c      	ldr	r3, [pc, #496]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d053      	beq.n	80016fe <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001656:	68e3      	ldr	r3, [r4, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8089 	beq.w	8001770 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165e:	4a77      	ldr	r2, [pc, #476]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f802 	bl	8000670 <HAL_GetTick>
 800166c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	4b73      	ldr	r3, [pc, #460]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f013 0f02 	tst.w	r3, #2
 8001676:	d172      	bne.n	800175e <HAL_RCC_OscConfig+0x18e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001678:	f7fe fffa 	bl	8000670 <HAL_GetTick>
 800167c:	1b40      	subs	r0, r0, r5
 800167e:	2802      	cmp	r0, #2
 8001680:	d9f5      	bls.n	800166e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001682:	2003      	movs	r0, #3
 8001684:	e188      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001686:	4a6d      	ldr	r2, [pc, #436]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001688:	6813      	ldr	r3, [r2, #0]
 800168a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	6863      	ldr	r3, [r4, #4]
 8001692:	b32b      	cbz	r3, 80016e0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001694:	f7fe ffec 	bl	8000670 <HAL_GetTick>
 8001698:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016a2:	d1c9      	bne.n	8001638 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a4:	f7fe ffe4 	bl	8000670 <HAL_GetTick>
 80016a8:	1b40      	subs	r0, r0, r5
 80016aa:	2864      	cmp	r0, #100	; 0x64
 80016ac:	d9f5      	bls.n	800169a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80016ae:	2003      	movs	r0, #3
 80016b0:	e172      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b6:	d009      	beq.n	80016cc <HAL_RCC_OscConfig+0xfc>
 80016b8:	4b60      	ldr	r3, [pc, #384]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	e7e1      	b.n	8001690 <HAL_RCC_OscConfig+0xc0>
 80016cc:	4b5b      	ldr	r3, [pc, #364]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e7d7      	b.n	8001690 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80016e0:	f7fe ffc6 	bl	8000670 <HAL_GetTick>
 80016e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	4b55      	ldr	r3, [pc, #340]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016ee:	d0a3      	beq.n	8001638 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f0:	f7fe ffbe 	bl	8000670 <HAL_GetTick>
 80016f4:	1b40      	subs	r0, r0, r5
 80016f6:	2864      	cmp	r0, #100	; 0x64
 80016f8:	d9f5      	bls.n	80016e6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80016fa:	2003      	movs	r0, #3
 80016fc:	e14c      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fe:	4b4f      	ldr	r3, [pc, #316]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001706:	d1a6      	bne.n	8001656 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001708:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f013 0f02 	tst.w	r3, #2
 8001710:	d003      	beq.n	800171a <HAL_RCC_OscConfig+0x14a>
 8001712:	68e3      	ldr	r3, [r4, #12]
 8001714:	2b01      	cmp	r3, #1
 8001716:	f040 813c 	bne.w	8001992 <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800171c:	6813      	ldr	r3, [r2, #0]
 800171e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001722:	6921      	ldr	r1, [r4, #16]
 8001724:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001728:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	f013 0f08 	tst.w	r3, #8
 8001730:	d046      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001732:	6963      	ldr	r3, [r4, #20]
 8001734:	b383      	cbz	r3, 8001798 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001736:	4a41      	ldr	r2, [pc, #260]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001738:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7fe ff96 	bl	8000670 <HAL_GetTick>
 8001744:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174a:	f013 0f02 	tst.w	r3, #2
 800174e:	d137      	bne.n	80017c0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001750:	f7fe ff8e 	bl	8000670 <HAL_GetTick>
 8001754:	1b40      	subs	r0, r0, r5
 8001756:	2802      	cmp	r0, #2
 8001758:	d9f5      	bls.n	8001746 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800175a:	2003      	movs	r0, #3
 800175c:	e11c      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4a37      	ldr	r2, [pc, #220]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001760:	6813      	ldr	r3, [r2, #0]
 8001762:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001766:	6921      	ldr	r1, [r4, #16]
 8001768:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e7dc      	b.n	800172a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8001770:	4a32      	ldr	r2, [pc, #200]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001772:	6813      	ldr	r3, [r2, #0]
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800177a:	f7fe ff79 	bl	8000670 <HAL_GetTick>
 800177e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001780:	4b2e      	ldr	r3, [pc, #184]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f013 0f02 	tst.w	r3, #2
 8001788:	d0cf      	beq.n	800172a <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178a:	f7fe ff71 	bl	8000670 <HAL_GetTick>
 800178e:	1b40      	subs	r0, r0, r5
 8001790:	2802      	cmp	r0, #2
 8001792:	d9f5      	bls.n	8001780 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 8001794:	2003      	movs	r0, #3
 8001796:	e0ff      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001798:	4a28      	ldr	r2, [pc, #160]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800179a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7fe ff65 	bl	8000670 <HAL_GetTick>
 80017a6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80017aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ac:	f013 0f02 	tst.w	r3, #2
 80017b0:	d006      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b2:	f7fe ff5d 	bl	8000670 <HAL_GetTick>
 80017b6:	1b40      	subs	r0, r0, r5
 80017b8:	2802      	cmp	r0, #2
 80017ba:	d9f5      	bls.n	80017a8 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80017bc:	2003      	movs	r0, #3
 80017be:	e0eb      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	f013 0f04 	tst.w	r3, #4
 80017c6:	d07d      	beq.n	80018c4 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c8:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80017d0:	d11e      	bne.n	8001810 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80017d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017e6:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80017f0:	d010      	beq.n	8001814 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f2:	68a3      	ldr	r3, [r4, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d025      	beq.n	8001844 <HAL_RCC_OscConfig+0x274>
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d13b      	bne.n	8001874 <HAL_RCC_OscConfig+0x2a4>
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80017fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	671a      	str	r2, [r3, #112]	; 0x70
 8001806:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001808:	f022 0204 	bic.w	r2, r2, #4
 800180c:	671a      	str	r2, [r3, #112]	; 0x70
 800180e:	e01e      	b.n	800184e <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8001810:	2500      	movs	r5, #0
 8001812:	e7e9      	b.n	80017e8 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_RCC_OscConfig+0x270>)
 8001816:	6813      	ldr	r3, [r2, #0]
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800181e:	f7fe ff27 	bl	8000670 <HAL_GetTick>
 8001822:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f413 7f80 	tst.w	r3, #256	; 0x100
 800182c:	d1e1      	bne.n	80017f2 <HAL_RCC_OscConfig+0x222>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7fe ff1f 	bl	8000670 <HAL_GetTick>
 8001832:	1b80      	subs	r0, r0, r6
 8001834:	2864      	cmp	r0, #100	; 0x64
 8001836:	d9f5      	bls.n	8001824 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8001838:	2003      	movs	r0, #3
 800183a:	e0ad      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
 800183c:	40023800 	.word	0x40023800
 8001840:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	4a56      	ldr	r2, [pc, #344]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 8001846:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800184e:	68a3      	ldr	r3, [r4, #8]
 8001850:	b333      	cbz	r3, 80018a0 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7fe ff0d 	bl	8000670 <HAL_GetTick>
 8001856:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001858:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	f013 0f02 	tst.w	r3, #2
 8001860:	d12f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001862:	f7fe ff05 	bl	8000670 <HAL_GetTick>
 8001866:	1b80      	subs	r0, r0, r6
 8001868:	f241 3388 	movw	r3, #5000	; 0x1388
 800186c:	4298      	cmp	r0, r3
 800186e:	d9f3      	bls.n	8001858 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001870:	2003      	movs	r0, #3
 8001872:	e091      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001874:	2b05      	cmp	r3, #5
 8001876:	d009      	beq.n	800188c <HAL_RCC_OscConfig+0x2bc>
 8001878:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 800187a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	671a      	str	r2, [r3, #112]	; 0x70
 8001882:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001884:	f022 0204 	bic.w	r2, r2, #4
 8001888:	671a      	str	r2, [r3, #112]	; 0x70
 800188a:	e7e0      	b.n	800184e <HAL_RCC_OscConfig+0x27e>
 800188c:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 800188e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001890:	f042 0204 	orr.w	r2, r2, #4
 8001894:	671a      	str	r2, [r3, #112]	; 0x70
 8001896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	671a      	str	r2, [r3, #112]	; 0x70
 800189e:	e7d6      	b.n	800184e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7fe fee6 	bl	8000670 <HAL_GetTick>
 80018a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a6:	4b3e      	ldr	r3, [pc, #248]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	f013 0f02 	tst.w	r3, #2
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f7fe fede 	bl	8000670 <HAL_GetTick>
 80018b4:	1b80      	subs	r0, r0, r6
 80018b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80018ba:	4298      	cmp	r0, r3
 80018bc:	d9f3      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80018be:	2003      	movs	r0, #3
 80018c0:	e06a      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018c2:	b9f5      	cbnz	r5, 8001902 <HAL_RCC_OscConfig+0x332>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c4:	69a3      	ldr	r3, [r4, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d065      	beq.n	8001996 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ca:	4a35      	ldr	r2, [pc, #212]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 80018cc:	6892      	ldr	r2, [r2, #8]
 80018ce:	f002 020c 	and.w	r2, r2, #12
 80018d2:	2a08      	cmp	r2, #8
 80018d4:	d062      	beq.n	800199c <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d019      	beq.n	800190e <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7fe fec4 	bl	8000670 <HAL_GetTick>
 80018e8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018f2:	d048      	beq.n	8001986 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7fe febc 	bl	8000670 <HAL_GetTick>
 80018f8:	1b00      	subs	r0, r0, r4
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9f5      	bls.n	80018ea <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80018fe:	2003      	movs	r0, #3
 8001900:	e04a      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001902:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 8001904:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
 800190c:	e7da      	b.n	80018c4 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800190e:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 8001910:	6813      	ldr	r3, [r2, #0]
 8001912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001916:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001918:	f7fe feaa 	bl	8000670 <HAL_GetTick>
 800191c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001926:	d006      	beq.n	8001936 <HAL_RCC_OscConfig+0x366>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001928:	f7fe fea2 	bl	8000670 <HAL_GetTick>
 800192c:	1b40      	subs	r0, r0, r5
 800192e:	2802      	cmp	r0, #2
 8001930:	d9f5      	bls.n	800191e <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8001932:	2003      	movs	r0, #3
 8001934:	e030      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001936:	69e3      	ldr	r3, [r4, #28]
 8001938:	6a22      	ldr	r2, [r4, #32]
 800193a:	4313      	orrs	r3, r2
 800193c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800193e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001942:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001944:	0852      	lsrs	r2, r2, #1
 8001946:	3a01      	subs	r2, #1
 8001948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800194c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800194e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001952:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001954:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001958:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 800195a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800195c:	6813      	ldr	r3, [r2, #0]
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001962:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001964:	f7fe fe84 	bl	8000670 <HAL_GetTick>
 8001968:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_RCC_OscConfig+0x3d0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7fe fe7c 	bl	8000670 <HAL_GetTick>
 8001978:	1b00      	subs	r0, r0, r4
 800197a:	2802      	cmp	r0, #2
 800197c:	d9f5      	bls.n	800196a <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 800197e:	2003      	movs	r0, #3
 8001980:	e00a      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001982:	2000      	movs	r0, #0
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
 8001986:	2000      	movs	r0, #0
 8001988:	e006      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 800198a:	2001      	movs	r0, #1
}
 800198c:	4770      	bx	lr
        return HAL_ERROR;
 800198e:	2001      	movs	r0, #1
 8001990:	e002      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 8001992:	2001      	movs	r0, #1
 8001994:	e000      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8001996:	2000      	movs	r0, #0
}
 8001998:	b002      	add	sp, #8
 800199a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800199c:	2001      	movs	r0, #1
 800199e:	e7fb      	b.n	8001998 <HAL_RCC_OscConfig+0x3c8>
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d03f      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x8e>
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d13f      	bne.n	8001a36 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80019c4:	d012      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019ce:	481c      	ldr	r0, [pc, #112]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019d0:	2300      	movs	r3, #0
 80019d2:	fba1 0100 	umull	r0, r1, r1, r0
 80019d6:	f7fe fc8b 	bl	80002f0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019e2:	3301      	adds	r3, #1
 80019e4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80019e6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80019ea:	e025      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80019f4:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80019f8:	ebb1 000c 	subs.w	r0, r1, ip
 80019fc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001a00:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001a04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a08:	0181      	lsls	r1, r0, #6
 8001a0a:	1a09      	subs	r1, r1, r0
 8001a0c:	eb63 030e 	sbc.w	r3, r3, lr
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a16:	00c9      	lsls	r1, r1, #3
 8001a18:	eb11 0c0c 	adds.w	ip, r1, ip
 8001a1c:	f143 0300 	adc.w	r3, r3, #0
 8001a20:	0299      	lsls	r1, r3, #10
 8001a22:	2300      	movs	r3, #0
 8001a24:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001a28:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001a2c:	f7fe fc60 	bl	80002f0 <__aeabi_uldivmod>
 8001a30:	e7d3      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001a32:	4803      	ldr	r0, [pc, #12]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a36:	4803      	ldr	r0, [pc, #12]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a38:	bd08      	pop	{r3, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	017d7840 	.word	0x017d7840
 8001a44:	00f42400 	.word	0x00f42400

08001a48 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	f000 809f 	beq.w	8001b8c <HAL_RCC_ClockConfig+0x144>
{
 8001a4e:	b570      	push	{r4, r5, r6, lr}
 8001a50:	460d      	mov	r5, r1
 8001a52:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b51      	ldr	r3, [pc, #324]	; (8001b9c <HAL_RCC_ClockConfig+0x154>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	428b      	cmp	r3, r1
 8001a5e:	d20b      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a60:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_RCC_ClockConfig+0x154>)
 8001a62:	6813      	ldr	r3, [r2, #0]
 8001a64:	f023 030f 	bic.w	r3, r3, #15
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6c:	6813      	ldr	r3, [r2, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	428b      	cmp	r3, r1
 8001a74:	f040 808c 	bne.w	8001b90 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	f013 0f02 	tst.w	r3, #2
 8001a7e:	d017      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	f013 0f04 	tst.w	r3, #4
 8001a84:	d004      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a86:	4a46      	ldr	r2, [pc, #280]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001a88:	6893      	ldr	r3, [r2, #8]
 8001a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a8e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	f013 0f08 	tst.w	r3, #8
 8001a96:	d004      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4a41      	ldr	r2, [pc, #260]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001a9a:	6893      	ldr	r3, [r2, #8]
 8001a9c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aa0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa2:	4a3f      	ldr	r2, [pc, #252]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001aa4:	6893      	ldr	r3, [r2, #8]
 8001aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aaa:	68a1      	ldr	r1, [r4, #8]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	f013 0f01 	tst.w	r3, #1
 8001ab6:	d031      	beq.n	8001b1c <HAL_RCC_ClockConfig+0xd4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab8:	6863      	ldr	r3, [r4, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d020      	beq.n	8001b00 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d025      	beq.n	8001b0e <HAL_RCC_ClockConfig+0xc6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac2:	4a37      	ldr	r2, [pc, #220]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	f012 0f02 	tst.w	r2, #2
 8001aca:	d063      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x14c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001acc:	4934      	ldr	r1, [pc, #208]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001ace:	688a      	ldr	r2, [r1, #8]
 8001ad0:	f022 0203 	bic.w	r2, r2, #3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001ad8:	f7fe fdca 	bl	8000670 <HAL_GetTick>
 8001adc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	6862      	ldr	r2, [r4, #4]
 8001ae8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001aec:	d016      	beq.n	8001b1c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aee:	f7fe fdbf 	bl	8000670 <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001af8:	4298      	cmp	r0, r3
 8001afa:	d9f0      	bls.n	8001ade <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001afc:	2003      	movs	r0, #3
 8001afe:	e044      	b.n	8001b8a <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001b08:	d1e0      	bne.n	8001acc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	e03d      	b.n	8001b8a <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4a24      	ldr	r2, [pc, #144]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001b16:	d1d9      	bne.n	8001acc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001b18:	2001      	movs	r0, #1
 8001b1a:	e036      	b.n	8001b8a <HAL_RCC_ClockConfig+0x142>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <HAL_RCC_ClockConfig+0x154>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	42ab      	cmp	r3, r5
 8001b26:	d90a      	bls.n	8001b3e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_RCC_ClockConfig+0x154>)
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	f023 030f 	bic.w	r3, r3, #15
 8001b30:	432b      	orrs	r3, r5
 8001b32:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b34:	6813      	ldr	r3, [r2, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	42ab      	cmp	r3, r5
 8001b3c:	d12c      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	f013 0f04 	tst.w	r3, #4
 8001b44:	d006      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b46:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001b48:	6893      	ldr	r3, [r2, #8]
 8001b4a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b4e:	68e1      	ldr	r1, [r4, #12]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	f013 0f08 	tst.w	r3, #8
 8001b5a:	d007      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b5c:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001b5e:	6893      	ldr	r3, [r2, #8]
 8001b60:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b64:	6921      	ldr	r1, [r4, #16]
 8001b66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b6a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b6c:	f7ff ff1a 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_ClockConfig+0x158>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <HAL_RCC_ClockConfig+0x15c>)
 8001b7a:	5cd3      	ldrb	r3, [r2, r3]
 8001b7c:	40d8      	lsrs	r0, r3
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x160>)
 8001b80:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7fe fd36 	bl	80005f4 <HAL_InitTick>
  return HAL_OK;
 8001b88:	2000      	movs	r0, #0
}
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b8c:	2001      	movs	r0, #1
}
 8001b8e:	4770      	bx	lr
      return HAL_ERROR;
 8001b90:	2001      	movs	r0, #1
 8001b92:	e7fa      	b.n	8001b8a <HAL_RCC_ClockConfig+0x142>
        return HAL_ERROR;
 8001b94:	2001      	movs	r0, #1
 8001b96:	e7f8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x142>
      return HAL_ERROR;
 8001b98:	2001      	movs	r0, #1
 8001b9a:	e7f6      	b.n	8001b8a <HAL_RCC_ClockConfig+0x142>
 8001b9c:	40023c00 	.word	0x40023c00
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	08008f18 	.word	0x08008f18
 8001ba8:	2000000c 	.word	0x2000000c

08001bac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001bac:	4b01      	ldr	r3, [pc, #4]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	2000000c 	.word	0x2000000c

08001bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bba:	f7ff fff7 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001bc6:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001bc8:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bca:	40d8      	lsrs	r0, r3
 8001bcc:	bd08      	pop	{r3, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08008f28 	.word	0x08008f28

08001bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bde:	6806      	ldr	r6, [r0, #0]
 8001be0:	f016 0601 	ands.w	r6, r6, #1
 8001be4:	d00d      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001be6:	4bb5      	ldr	r3, [pc, #724]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001bf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8155 	beq.w	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 8001c00:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c02:	6825      	ldr	r5, [r4, #0]
 8001c04:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8001c08:	d011      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c0a:	4aac      	ldr	r2, [pc, #688]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c0c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001c10:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001c14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c16:	430b      	orrs	r3, r1
 8001c18:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c22:	f000 8144 	beq.w	8001eae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8143 	beq.w	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 8001c2c:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001c34:	d00f      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c36:	4aa1      	ldr	r2, [pc, #644]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c38:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001c3c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c40:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001c42:	430b      	orrs	r3, r1
 8001c44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c4e:	f000 8132 	beq.w	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c52:	b903      	cbnz	r3, 8001c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8001c54:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001c5c:	d000      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8001c5e:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c60:	f013 0f20 	tst.w	r3, #32
 8001c64:	f040 812c 	bne.w	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	f013 0f10 	tst.w	r3, #16
 8001c6e:	d00c      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c70:	4b92      	ldr	r3, [pc, #584]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c72:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c76:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001c7e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001c84:	430a      	orrs	r2, r1
 8001c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001c90:	d008      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c92:	4a8a      	ldr	r2, [pc, #552]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c94:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c98:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c9c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001caa:	d008      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cac:	4a83      	ldr	r2, [pc, #524]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cb2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001cb6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001cc4:	d008      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cc6:	4a7d      	ldr	r2, [pc, #500]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cc8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ccc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001cd0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ce0:	4a76      	ldr	r2, [pc, #472]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ce2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ce6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001cea:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001cec:	430b      	orrs	r3, r1
 8001cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cf8:	d008      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cfa:	4a70      	ldr	r2, [pc, #448]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cfc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d00:	f023 0303 	bic.w	r3, r3, #3
 8001d04:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001d06:	430b      	orrs	r3, r1
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d12:	d008      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d14:	4a69      	ldr	r2, [pc, #420]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d1a:	f023 030c 	bic.w	r3, r3, #12
 8001d1e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001d20:	430b      	orrs	r3, r1
 8001d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d2c:	d008      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d2e:	4a63      	ldr	r2, [pc, #396]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d30:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d38:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001d46:	d008      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d48:	4a5c      	ldr	r2, [pc, #368]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d52:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001d54:	430b      	orrs	r3, r1
 8001d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001d60:	d008      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d62:	4a56      	ldr	r2, [pc, #344]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d64:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001d7a:	d008      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d7c:	4a4f      	ldr	r2, [pc, #316]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001d94:	d008      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d96:	4a49      	ldr	r2, [pc, #292]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001da0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001da2:	430b      	orrs	r3, r1
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001dae:	d008      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001db0:	4a42      	ldr	r2, [pc, #264]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001db2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001db6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dba:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dc8:	d008      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dca:	4a3c      	ldr	r2, [pc, #240]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dcc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001dd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001dd4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001de2:	d00d      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001de4:	4a35      	ldr	r2, [pc, #212]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001de6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001dea:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001dee:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001df0:	430b      	orrs	r3, r1
 8001df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001df6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dfc:	f000 80c6 	beq.w	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	f013 0f08 	tst.w	r3, #8
 8001e06:	d000      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8001e08:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e0a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001e0e:	d008      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e10:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e16:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001e1a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001e28:	d009      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e2a:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e34:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001e44:	d009      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e48:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001e50:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8001e54:	430b      	orrs	r3, r1
 8001e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001e60:	d009      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e62:	4a16      	ldr	r2, [pc, #88]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e64:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e68:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8001e70:	430b      	orrs	r3, r1
 8001e72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e7e:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e80:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e88:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e92:	2e00      	cmp	r6, #0
 8001e94:	d17c      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e9c:	d078      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001e9e:	2d01      	cmp	r5, #1
 8001ea0:	f000 8109 	beq.w	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001ea4:	2000      	movs	r0, #0
}
 8001ea6:	b003      	add	sp, #12
 8001ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1;
 8001eaa:	2601      	movs	r6, #1
 8001eac:	e6a9      	b.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8001eae:	2601      	movs	r6, #1
 8001eb0:	e6b9      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8001eb2:	2501      	movs	r5, #1
 8001eb4:	e6bb      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8001eb6:	2601      	movs	r6, #1
 8001eb8:	e6cb      	b.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	4b87      	ldr	r3, [pc, #540]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001ed4:	4a83      	ldr	r2, [pc, #524]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ede:	f7fe fbc7 	bl	8000670 <HAL_GetTick>
 8001ee2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ee4:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001eec:	d106      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eee:	f7fe fbbf 	bl	8000670 <HAL_GetTick>
 8001ef2:	1bc0      	subs	r0, r0, r7
 8001ef4:	2864      	cmp	r0, #100	; 0x64
 8001ef6:	d9f5      	bls.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8001ef8:	2003      	movs	r0, #3
 8001efa:	e7d4      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001efc:	4b78      	ldr	r3, [pc, #480]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f00:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f04:	d015      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8001f06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f08:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f10:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001f1a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001f1e:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001f22:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001f26:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001f28:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	f013 0f01 	tst.w	r3, #1
 8001f30:	d112      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f34:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001f38:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001f3c:	d01d      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001f3e:	4a68      	ldr	r2, [pc, #416]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f40:	6893      	ldr	r3, [r2, #8]
 8001f42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f46:	6093      	str	r3, [r2, #8]
 8001f48:	4965      	ldr	r1, [pc, #404]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f4a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001f4c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f4e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001f52:	4313      	orrs	r3, r2
 8001f54:	670b      	str	r3, [r1, #112]	; 0x70
 8001f56:	e687      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8001f58:	f7fe fb8a 	bl	8000670 <HAL_GetTick>
 8001f5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5e:	4b60      	ldr	r3, [pc, #384]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	f013 0f02 	tst.w	r3, #2
 8001f66:	d1e4      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f68:	f7fe fb82 	bl	8000670 <HAL_GetTick>
 8001f6c:	1bc0      	subs	r0, r0, r7
 8001f6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f72:	4298      	cmp	r0, r3
 8001f74:	d9f3      	bls.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8001f76:	2003      	movs	r0, #3
 8001f78:	e795      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7a:	4859      	ldr	r0, [pc, #356]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f7c:	6882      	ldr	r2, [r0, #8]
 8001f7e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001f82:	4959      	ldr	r1, [pc, #356]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001f84:	4019      	ands	r1, r3
 8001f86:	430a      	orrs	r2, r1
 8001f88:	6082      	str	r2, [r0, #8]
 8001f8a:	e7dd      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1;
 8001f8c:	2501      	movs	r5, #1
 8001f8e:	e737      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();
 8001f90:	4a53      	ldr	r2, [pc, #332]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f92:	6813      	ldr	r3, [r2, #0]
 8001f94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f98:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f9a:	f7fe fb69 	bl	8000670 <HAL_GetTick>
 8001f9e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fa0:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001fa8:	d006      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001faa:	f7fe fb61 	bl	8000670 <HAL_GetTick>
 8001fae:	1b80      	subs	r0, r0, r6
 8001fb0:	2864      	cmp	r0, #100	; 0x64
 8001fb2:	d9f5      	bls.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	e776      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	f013 0f01 	tst.w	r3, #1
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8001fc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fc2:	b98b      	cbnz	r3, 8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x410>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fc4:	4a46      	ldr	r2, [pc, #280]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001fc6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fca:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fce:	6860      	ldr	r0, [r4, #4]
 8001fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001fd8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	68a1      	ldr	r1, [r4, #8]
 8001fe0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001fe4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001fee:	d003      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8001ff0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ff2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001ff6:	d006      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001ff8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001ffc:	d01e      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x464>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002004:	d11a      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x464>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002006:	4a36      	ldr	r2, [pc, #216]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002008:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800200c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002010:	6860      	ldr	r0, [r4, #4]
 8002012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002016:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800201a:	68e0      	ldr	r0, [r4, #12]
 800201c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002020:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002024:	430b      	orrs	r3, r1
 8002026:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800202a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800202e:	f023 031f 	bic.w	r3, r3, #31
 8002032:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002034:	3901      	subs	r1, #1
 8002036:	430b      	orrs	r3, r1
 8002038:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002042:	d011      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x490>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002044:	4a26      	ldr	r2, [pc, #152]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002046:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800204a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800204e:	6866      	ldr	r6, [r4, #4]
 8002050:	6923      	ldr	r3, [r4, #16]
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002058:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800205c:	4303      	orrs	r3, r0
 800205e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002062:	430b      	orrs	r3, r1
 8002064:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800206e:	d00d      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002070:	6862      	ldr	r2, [r4, #4]
 8002072:	6923      	ldr	r3, [r4, #16]
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800207a:	68e2      	ldr	r2, [r4, #12]
 800207c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002080:	68a2      	ldr	r2, [r4, #8]
 8002082:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002086:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002088:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800208c:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002094:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002096:	f7fe faeb 	bl	8000670 <HAL_GetTick>
 800209a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80020a4:	f47f aefb 	bne.w	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020a8:	f7fe fae2 	bl	8000670 <HAL_GetTick>
 80020ac:	1b80      	subs	r0, r0, r6
 80020ae:	2864      	cmp	r0, #100	; 0x64
 80020b0:	d9f4      	bls.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        return HAL_TIMEOUT;
 80020b2:	2003      	movs	r0, #3
 80020b4:	e6f7      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_PLLSAI_DISABLE();
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80020b8:	6813      	ldr	r3, [r2, #0]
 80020ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020be:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80020c0:	f7fe fad6 	bl	8000670 <HAL_GetTick>
 80020c4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80020ce:	d00d      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020d0:	f7fe face 	bl	8000670 <HAL_GetTick>
 80020d4:	1b40      	subs	r0, r0, r5
 80020d6:	2864      	cmp	r0, #100	; 0x64
 80020d8:	d9f5      	bls.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
        return HAL_TIMEOUT;
 80020da:	2003      	movs	r0, #3
 80020dc:	e6e3      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000
 80020e8:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80020f2:	d001      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80020f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80020f6:	b122      	cbz	r2, 8002102 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80020f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80020fc:	d01d      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x562>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002100:	b9db      	cbnz	r3, 800213a <HAL_RCCEx_PeriphCLKConfig+0x562>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002102:	4a35      	ldr	r2, [pc, #212]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002104:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002108:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800210c:	6960      	ldr	r0, [r4, #20]
 800210e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002112:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002116:	69a0      	ldr	r0, [r4, #24]
 8002118:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800211c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002120:	430b      	orrs	r3, r1
 8002122:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002126:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800212a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800212e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002130:	3901      	subs	r1, #1
 8002132:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002136:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002140:	d003      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002142:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002148:	d031      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	f013 0f08 	tst.w	r3, #8
 8002150:	d019      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002152:	4a21      	ldr	r2, [pc, #132]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002154:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002158:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800215c:	6960      	ldr	r0, [r4, #20]
 800215e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002162:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002166:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800216a:	430b      	orrs	r3, r1
 800216c:	69e1      	ldr	r1, [r4, #28]
 800216e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002172:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002176:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800217a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800217e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002180:	430b      	orrs	r3, r1
 8002182:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002190:	f7fe fa6e 	bl	8000670 <HAL_GetTick>
 8002194:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800219e:	d119      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021a0:	f7fe fa66 	bl	8000670 <HAL_GetTick>
 80021a4:	1b00      	subs	r0, r0, r4
 80021a6:	2864      	cmp	r0, #100	; 0x64
 80021a8:	d9f5      	bls.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x5be>
        return HAL_TIMEOUT;
 80021aa:	2003      	movs	r0, #3
 80021ac:	e67b      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80021b0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021b4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80021b8:	6965      	ldr	r5, [r4, #20]
 80021ba:	6a23      	ldr	r3, [r4, #32]
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80021c2:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80021c6:	4303      	orrs	r3, r0
 80021c8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80021cc:	430b      	orrs	r3, r1
 80021ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80021d2:	e7ba      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x572>
  return HAL_OK;
 80021d4:	2000      	movs	r0, #0
 80021d6:	e666      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80021d8:	40023800 	.word	0x40023800

080021dc <HAL_RCCEx_GetPeriphCLKConfig>:
{
  uint32_t tempreg = 0;

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80021dc:	4b60      	ldr	r3, [pc, #384]	; (8002360 <HAL_RCCEx_GetPeriphCLKConfig+0x184>)
 80021de:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80021e0:	4b60      	ldr	r3, [pc, #384]	; (8002364 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80021e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80021e6:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80021ea:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021ec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80021f0:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80021f4:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80021fa:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80021fe:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002200:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002204:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8002208:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800220a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800220e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002212:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002214:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002218:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800221c:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800221e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002222:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8002226:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002228:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800222c:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8002230:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos) + 1; // *** JSB: Cube fix: + 1 ***
 8002232:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002236:	f002 021f 	and.w	r2, r2, #31
 800223a:	3201      	adds	r2, #1
 800223c:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos) + 1; // *** JSB: Cube fix: + 1 ***
 800223e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002242:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8002246:	3201      	adds	r2, #1
 8002248:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800224a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800224e:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8002252:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8002254:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002258:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800225c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800225e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002262:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002266:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800226e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8002270:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002274:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002278:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800227a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800227e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002282:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8002284:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002288:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800228c:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800228e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002292:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002296:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8002298:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800229c:	f002 0203 	and.w	r2, r2, #3
 80022a0:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80022a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022a6:	f002 020c 	and.w	r2, r2, #12
 80022aa:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80022ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022b0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80022b4:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80022b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022ba:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80022be:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80022c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022c4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80022c8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80022ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022ce:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80022d2:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80022d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022d8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80022dc:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80022de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022e2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80022e6:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80022e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022ec:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 80022f0:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80022f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022f6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80022fa:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80022fc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002300:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002304:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8002306:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800230a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800230e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 8002312:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002316:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800231a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800231e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002322:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002326:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800232a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800232e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8002332:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800233c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800233e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002342:	430a      	orrs	r2, r1
 8002344:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8002346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800234a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800234e:	d102      	bne.n	8002356 <HAL_RCCEx_GetPeriphCLKConfig+0x17a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8002350:	2300      	movs	r3, #0
 8002352:	6383      	str	r3, [r0, #56]	; 0x38
 8002354:	4770      	bx	lr
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800235a:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	1cfffff1 	.word	0x1cfffff1
 8002364:	40023800 	.word	0x40023800

08002368 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002368:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800236a:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800236e:	d004      	beq.n	800237a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
  uint32_t frequency = 0;
 8002370:	2000      	movs	r0, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8002372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002376:	d071      	beq.n	800245c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      }
    }
  }

  return frequency;
}
 8002378:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 800237a:	4a70      	ldr	r2, [pc, #448]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800237c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8002380:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8002384:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002388:	d064      	beq.n	8002454 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800238a:	d826      	bhi.n	80023da <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800238c:	b38a      	cbz	r2, 80023f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 800238e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002392:	d120      	bne.n	80023d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002394:	4a69      	ldr	r2, [pc, #420]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002396:	6852      	ldr	r2, [r2, #4]
 8002398:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800239c:	d152      	bne.n	8002444 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800239e:	4a67      	ldr	r2, [pc, #412]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80023a0:	6850      	ldr	r0, [r2, #4]
 80023a2:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 80023a6:	4866      	ldr	r0, [pc, #408]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80023a8:	fbb0 fcfc 	udiv	ip, r0, ip
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80023ac:	4a63      	ldr	r2, [pc, #396]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80023ae:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 80023b2:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80023b6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80023ba:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80023be:	fb0c f000 	mul.w	r0, ip, r0
 80023c2:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80023c6:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80023ca:	f002 021f 	and.w	r2, r2, #31
 80023ce:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 80023d0:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 80023d4:	e7cd      	b.n	8002372 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 80023d6:	2000      	movs	r0, #0
 80023d8:	e7cb      	b.n	8002372 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
 80023da:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80023de:	d106      	bne.n	80023ee <HAL_RCCEx_GetPeriphCLKFreq+0x86>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80023e0:	4a56      	ldr	r2, [pc, #344]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80023e2:	6852      	ldr	r2, [r2, #4]
 80023e4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80023e8:	d136      	bne.n	8002458 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
          frequency = HSI_VALUE;
 80023ea:	4855      	ldr	r0, [pc, #340]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80023ec:	e7c1      	b.n	8002372 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 80023ee:	2000      	movs	r0, #0
 80023f0:	e7bf      	b.n	8002372 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80023f2:	4a52      	ldr	r2, [pc, #328]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80023f4:	6852      	ldr	r2, [r2, #4]
 80023f6:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80023fa:	d11b      	bne.n	8002434 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80023fc:	4a4f      	ldr	r2, [pc, #316]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80023fe:	6850      	ldr	r0, [r2, #4]
 8002400:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 8002404:	484e      	ldr	r0, [pc, #312]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002406:	fbb0 fcfc 	udiv	ip, r0, ip
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800240a:	4a4c      	ldr	r2, [pc, #304]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800240c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8002410:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002414:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8002418:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800241c:	fb0c f000 	mul.w	r0, ip, r0
 8002420:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8002424:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8002428:	f3c2 2204 	ubfx	r2, r2, #8, #5
 800242c:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 800242e:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 8002432:	e79e      	b.n	8002372 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002434:	4a41      	ldr	r2, [pc, #260]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002436:	6850      	ldr	r0, [r2, #4]
 8002438:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 800243c:	4841      	ldr	r0, [pc, #260]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800243e:	fbb0 fcfc 	udiv	ip, r0, ip
 8002442:	e7e2      	b.n	800240a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002444:	4a3d      	ldr	r2, [pc, #244]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002446:	6850      	ldr	r0, [r2, #4]
 8002448:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 800244c:	483d      	ldr	r0, [pc, #244]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800244e:	fbb0 fcfc 	udiv	ip, r0, ip
 8002452:	e7ab      	b.n	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        frequency = EXTERNAL_CLOCK_VALUE;
 8002454:	483c      	ldr	r0, [pc, #240]	; (8002548 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8002456:	e78c      	b.n	8002372 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          frequency = HSE_VALUE;
 8002458:	483a      	ldr	r0, [pc, #232]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800245a:	e78a      	b.n	8002372 <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 800245c:	4b37      	ldr	r3, [pc, #220]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800245e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8002462:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 8002466:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800246a:	d062      	beq.n	8002532 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 800246c:	d825      	bhi.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800246e:	b37b      	cbz	r3, 80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8002470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002474:	d120      	bne.n	80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002476:	4b31      	ldr	r3, [pc, #196]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800247e:	d150      	bne.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002480:	4b2e      	ldr	r3, [pc, #184]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002488:	482d      	ldr	r0, [pc, #180]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800248a:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800248e:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002490:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002494:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002498:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800249c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80024a0:	fb01 f000 	mul.w	r0, r1, r0
 80024a4:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80024a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80024b2:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80024b6:	4770      	bx	lr
 80024b8:	4770      	bx	lr
    switch (saiclocksource)
 80024ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024be:	d106      	bne.n	80024ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80024c8:	d135      	bne.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
          frequency = HSI_VALUE;
 80024ca:	481d      	ldr	r0, [pc, #116]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80024cc:	4770      	bx	lr
 80024ce:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80024d8:	d11b      	bne.n	8002512 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80024e2:	4817      	ldr	r0, [pc, #92]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80024e4:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80024ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024ee:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80024f2:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80024f6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80024fa:	fb01 f000 	mul.w	r0, r1, r0
 80024fe:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8002502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002506:	f3c3 2304 	ubfx	r3, r3, #8, #5
 800250a:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 800250c:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002510:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800251a:	480a      	ldr	r0, [pc, #40]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800251c:	fbb0 f1f1 	udiv	r1, r0, r1
 8002520:	e7e2      	b.n	80024e8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800252a:	4806      	ldr	r0, [pc, #24]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800252c:	fbb0 f1f1 	udiv	r1, r0, r1
 8002530:	e7ad      	b.n	800248e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
        frequency = EXTERNAL_CLOCK_VALUE;
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8002534:	4770      	bx	lr
          frequency = HSE_VALUE;
 8002536:	4803      	ldr	r0, [pc, #12]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
  return frequency;
 8002538:	e71e      	b.n	8002378 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	00f42400 	.word	0x00f42400
 8002544:	017d7840 	.word	0x017d7840
 8002548:	01770000 	.word	0x01770000

0800254c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800254c:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800254e:	2400      	movs	r4, #0
 8002550:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8002552:	6384      	str	r4, [r0, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002554:	6844      	ldr	r4, [r0, #4]
 8002556:	2c02      	cmp	r4, #2
 8002558:	bf18      	it	ne
 800255a:	2c00      	cmpne	r4, #0
 800255c:	d117      	bne.n	800258e <SAI_InitI2S+0x42>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800255e:	2400      	movs	r4, #0
 8002560:	63c4      	str	r4, [r0, #60]	; 0x3c
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8002562:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8002566:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8002568:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800256c:	6604      	str	r4, [r0, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800256e:	2400      	movs	r4, #0
 8002570:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8002572:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if((nbslot & 0x1) != 0 )
 8002574:	f013 0f01 	tst.w	r3, #1
 8002578:	d14e      	bne.n	8002618 <SAI_InitI2S+0xcc>
  {
    return HAL_ERROR;
  }

  switch(protocol)
 800257a:	b159      	cbz	r1, 8002594 <SAI_InitI2S+0x48>
 800257c:	1e4c      	subs	r4, r1, #1
 800257e:	2c01      	cmp	r4, #1
 8002580:	d84d      	bhi.n	800261e <SAI_InitI2S+0xd2>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
    break;
  case SAI_I2S_MSBJUSTIFIED :
  case SAI_I2S_LSBJUSTIFIED :
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8002582:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8002586:	64c4      	str	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8002588:	2400      	movs	r4, #0
 800258a:	6504      	str	r4, [r0, #80]	; 0x50
    break;
 800258c:	e007      	b.n	800259e <SAI_InitI2S+0x52>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800258e:	2401      	movs	r4, #1
 8002590:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002592:	e7e6      	b.n	8002562 <SAI_InitI2S+0x16>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002594:	2400      	movs	r4, #0
 8002596:	64c4      	str	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8002598:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800259c:	6504      	str	r4, [r0, #80]	; 0x50
  default :
    return HAL_ERROR;
  }

  /* Frame definition */
  switch(datasize)
 800259e:	2a03      	cmp	r2, #3
 80025a0:	d83f      	bhi.n	8002622 <SAI_InitI2S+0xd6>
 80025a2:	e8df f002 	tbb	[pc, r2]
 80025a6:	0f02      	.short	0x0f02
 80025a8:	2218      	.short	0x2218
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80025aa:	2480      	movs	r4, #128	; 0x80
 80025ac:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	015c      	lsls	r4, r3, #5
 80025b2:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80025b8:	2340      	movs	r3, #64	; 0x40
 80025ba:	6583      	str	r3, [r0, #88]	; 0x58
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
    break;
  default :
    return HAL_ERROR;
  }
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 80025bc:	2902      	cmp	r1, #2
 80025be:	d01e      	beq.n	80025fe <SAI_InitI2S+0xb2>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return HAL_OK;
 80025c0:	2000      	movs	r0, #0
 80025c2:	e02a      	b.n	800261a <SAI_InitI2S+0xce>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80025c4:	2480      	movs	r4, #128	; 0x80
 80025c6:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	019d      	lsls	r5, r3, #6
 80025cc:	6405      	str	r5, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80025ce:	015b      	lsls	r3, r3, #5
 80025d0:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80025d2:	6584      	str	r4, [r0, #88]	; 0x58
    break;
 80025d4:	e7f2      	b.n	80025bc <SAI_InitI2S+0x70>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 80025d6:	24c0      	movs	r4, #192	; 0xc0
 80025d8:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	019c      	lsls	r4, r3, #6
 80025de:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80025e0:	015b      	lsls	r3, r3, #5
 80025e2:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	6583      	str	r3, [r0, #88]	; 0x58
    break;
 80025e8:	e7e8      	b.n	80025bc <SAI_InitI2S+0x70>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 80025ea:	24e0      	movs	r4, #224	; 0xe0
 80025ec:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	019c      	lsls	r4, r3, #6
 80025f2:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80025f4:	015b      	lsls	r3, r3, #5
 80025f6:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	6583      	str	r3, [r0, #88]	; 0x58
    break;
 80025fc:	e7de      	b.n	80025bc <SAI_InitI2S+0x70>
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80025fe:	2a01      	cmp	r2, #1
 8002600:	d003      	beq.n	800260a <SAI_InitI2S+0xbe>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8002602:	2a02      	cmp	r2, #2
 8002604:	d004      	beq.n	8002610 <SAI_InitI2S+0xc4>
  return HAL_OK;
 8002606:	2000      	movs	r0, #0
 8002608:	e007      	b.n	800261a <SAI_InitI2S+0xce>
      hsai->SlotInit.FirstBitOffset = 16;
 800260a:	2310      	movs	r3, #16
 800260c:	6543      	str	r3, [r0, #84]	; 0x54
 800260e:	e7f8      	b.n	8002602 <SAI_InitI2S+0xb6>
      hsai->SlotInit.FirstBitOffset = 8;
 8002610:	2308      	movs	r3, #8
 8002612:	6543      	str	r3, [r0, #84]	; 0x54
  return HAL_OK;
 8002614:	2000      	movs	r0, #0
 8002616:	e000      	b.n	800261a <SAI_InitI2S+0xce>
    return HAL_ERROR;
 8002618:	2001      	movs	r0, #1
}
 800261a:	bc30      	pop	{r4, r5}
 800261c:	4770      	bx	lr
  switch(protocol)
 800261e:	2001      	movs	r0, #1
 8002620:	e7fb      	b.n	800261a <SAI_InitI2S+0xce>
  switch(datasize)
 8002622:	2001      	movs	r0, #1
 8002624:	e7f9      	b.n	800261a <SAI_InitI2S+0xce>

08002626 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8002626:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002628:	2400      	movs	r4, #0
 800262a:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800262c:	6384      	str	r4, [r0, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800262e:	6844      	ldr	r4, [r0, #4]
 8002630:	2c02      	cmp	r4, #2
 8002632:	bf18      	it	ne
 8002634:	2c00      	cmpne	r4, #0
 8002636:	d11a      	bne.n	800266e <SAI_InitPCM+0x48>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8002638:	2401      	movs	r4, #1
 800263a:	63c4      	str	r4, [r0, #60]	; 0x3c
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800263c:	2400      	movs	r4, #0
 800263e:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8002640:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8002644:	64c5      	str	r5, [r0, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8002646:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800264a:	6505      	str	r5, [r0, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800264c:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800264e:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8002650:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002654:	6604      	str	r4, [r0, #96]	; 0x60

  switch(protocol)
 8002656:	2903      	cmp	r1, #3
 8002658:	d00c      	beq.n	8002674 <SAI_InitPCM+0x4e>
 800265a:	2904      	cmp	r1, #4
 800265c:	d12c      	bne.n	80026b8 <SAI_InitPCM+0x92>
  {
  case SAI_PCM_SHORT :
    hsai->FrameInit.ActiveFrameLength = 1;
 800265e:	2101      	movs	r1, #1
 8002660:	6441      	str	r1, [r0, #68]	; 0x44
    break;
  default :
    return HAL_ERROR;
  }

  switch(datasize)
 8002662:	2a03      	cmp	r2, #3
 8002664:	d82b      	bhi.n	80026be <SAI_InitPCM+0x98>
 8002666:	e8df f002 	tbb	[pc, r2]
 800266a:	1008      	.short	0x1008
 800266c:	1f17      	.short	0x1f17
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800266e:	2400      	movs	r4, #0
 8002670:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002672:	e7e3      	b.n	800263c <SAI_InitPCM+0x16>
    hsai->FrameInit.ActiveFrameLength = 13;
 8002674:	210d      	movs	r1, #13
 8002676:	6441      	str	r1, [r0, #68]	; 0x44
    break;
 8002678:	e7f3      	b.n	8002662 <SAI_InitPCM+0x3c>
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8002682:	2340      	movs	r3, #64	; 0x40
 8002684:	6583      	str	r3, [r0, #88]	; 0x58
    break;
  default :
    return HAL_ERROR;
  }

  return HAL_OK;
 8002686:	2000      	movs	r0, #0
    break;
 8002688:	e017      	b.n	80026ba <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800268e:	015b      	lsls	r3, r3, #5
 8002690:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002692:	6582      	str	r2, [r0, #88]	; 0x58
  return HAL_OK;
 8002694:	2000      	movs	r0, #0
    break;
 8002696:	e010      	b.n	80026ba <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002698:	22c0      	movs	r2, #192	; 0xc0
 800269a:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800269c:	015b      	lsls	r3, r3, #5
 800269e:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 80026a4:	2000      	movs	r0, #0
    break;
 80026a6:	e008      	b.n	80026ba <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 80026a8:	22e0      	movs	r2, #224	; 0xe0
 80026aa:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 80026ac:	015b      	lsls	r3, r3, #5
 80026ae:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 80026b4:	2000      	movs	r0, #0
    break;
 80026b6:	e000      	b.n	80026ba <SAI_InitPCM+0x94>
  switch(protocol)
 80026b8:	2001      	movs	r0, #1
}
 80026ba:	bc30      	pop	{r4, r5}
 80026bc:	4770      	bx	lr
  switch(datasize)
 80026be:	2001      	movs	r0, #1
 80026c0:	e7fb      	b.n	80026ba <SAI_InitPCM+0x94>
	...

080026c4 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <SAI_Disable+0x3c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <SAI_Disable+0x40>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0b1b      	lsrs	r3, r3, #12
 80026d0:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80026d2:	6801      	ldr	r1, [r0, #0]
 80026d4:	680a      	ldr	r2, [r1, #0]
 80026d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026da:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80026dc:	461a      	mov	r2, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b132      	cbz	r2, 80026f0 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80026e2:	6802      	ldr	r2, [r0, #0]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80026ea:	d1f7      	bne.n	80026dc <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80026ec:	2000      	movs	r0, #0

  return status;
}
 80026ee:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80026f0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80026f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80026fc:	2003      	movs	r0, #3
      break;
 80026fe:	4770      	bx	lr
 8002700:	2000000c 	.word	0x2000000c
 8002704:	95cbec1b 	.word	0x95cbec1b

08002708 <HAL_SAI_Init>:
  if(hsai == NULL)
 8002708:	2800      	cmp	r0, #0
 800270a:	f000 80eb 	beq.w	80028e4 <HAL_SAI_Init+0x1dc>
{
 800270e:	b538      	push	{r3, r4, r5, lr}
 8002710:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 8002712:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80b6 	beq.w	8002888 <HAL_SAI_Init+0x180>
  hsai->State = HAL_SAI_STATE_BUSY;
 800271c:	2302      	movs	r3, #2
 800271e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff ffce 	bl	80026c4 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8002728:	68e3      	ldr	r3, [r4, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	f000 80b1 	beq.w	8002892 <HAL_SAI_Init+0x18a>
 8002730:	2b02      	cmp	r3, #2
 8002732:	f040 80b0 	bne.w	8002896 <HAL_SAI_Init+0x18e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8002736:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 8002738:	68a3      	ldr	r3, [r4, #8]
 800273a:	2b02      	cmp	r3, #2
 800273c:	f000 80b5 	beq.w	80028aa <HAL_SAI_Init+0x1a2>
 8002740:	2b03      	cmp	r3, #3
 8002742:	f000 80ad 	beq.w	80028a0 <HAL_SAI_Init+0x198>
 8002746:	2b01      	cmp	r3, #1
 8002748:	f000 80a7 	beq.w	800289a <HAL_SAI_Init+0x192>
 800274c:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	4865      	ldr	r0, [pc, #404]	; (80028e8 <HAL_SAI_Init+0x1e0>)
 8002752:	4966      	ldr	r1, [pc, #408]	; (80028ec <HAL_SAI_Init+0x1e4>)
 8002754:	428b      	cmp	r3, r1
 8002756:	bf18      	it	ne
 8002758:	4283      	cmpne	r3, r0
 800275a:	f040 80a9 	bne.w	80028b0 <HAL_SAI_Init+0x1a8>
    SAI1->GCR = tmpregisterGCR;
 800275e:	4b64      	ldr	r3, [pc, #400]	; (80028f0 <HAL_SAI_Init+0x1e8>)
 8002760:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8002764:	69e3      	ldr	r3, [r4, #28]
 8002766:	b323      	cbz	r3, 80027b2 <HAL_SAI_Init+0xaa>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	495f      	ldr	r1, [pc, #380]	; (80028e8 <HAL_SAI_Init+0x1e0>)
 800276c:	4a5f      	ldr	r2, [pc, #380]	; (80028ec <HAL_SAI_Init+0x1e4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	bf18      	it	ne
 8002772:	428b      	cmpne	r3, r1
 8002774:	f000 80a0 	beq.w	80028b8 <HAL_SAI_Init+0x1b0>
    uint32_t freq = 0;
 8002778:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	495d      	ldr	r1, [pc, #372]	; (80028f4 <HAL_SAI_Init+0x1ec>)
 800277e:	4a5e      	ldr	r2, [pc, #376]	; (80028f8 <HAL_SAI_Init+0x1f0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	bf18      	it	ne
 8002784:	428b      	cmpne	r3, r1
 8002786:	f000 809c 	beq.w	80028c2 <HAL_SAI_Init+0x1ba>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800278a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800278e:	0040      	lsls	r0, r0, #1
 8002790:	69e3      	ldr	r3, [r4, #28]
 8002792:	025b      	lsls	r3, r3, #9
 8002794:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8002798:	4b58      	ldr	r3, [pc, #352]	; (80028fc <HAL_SAI_Init+0x1f4>)
 800279a:	fba3 2300 	umull	r2, r3, r3, r0
 800279e:	08db      	lsrs	r3, r3, #3
 80027a0:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 80027a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80027a6:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 80027aa:	2808      	cmp	r0, #8
 80027ac:	d901      	bls.n	80027b2 <HAL_SAI_Init+0xaa>
      hsai->Init.Mckdiv+= 1;
 80027ae:	3301      	adds	r3, #1
 80027b0:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80027b2:	6863      	ldr	r3, [r4, #4]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	bf18      	it	ne
 80027b8:	2b00      	cmpne	r3, #0
 80027ba:	f040 808a 	bne.w	80028d2 <HAL_SAI_Init+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80027be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	f000 8083 	beq.w	80028cc <HAL_SAI_Init+0x1c4>
 80027c6:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80027ca:	6821      	ldr	r1, [r4, #0]
 80027cc:	680b      	ldr	r3, [r1, #0]
 80027ce:	4a4c      	ldr	r2, [pc, #304]	; (8002900 <HAL_SAI_Init+0x1f8>)
 80027d0:	401a      	ands	r2, r3
 80027d2:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80027d4:	6822      	ldr	r2, [r4, #0]
 80027d6:	6811      	ldr	r1, [r2, #0]
 80027d8:	6863      	ldr	r3, [r4, #4]
 80027da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80027dc:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80027de:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80027e0:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80027e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027e4:	4303      	orrs	r3, r0
 80027e6:	ea43 030c 	orr.w	r3, r3, ip
                        ckstr_bits | syncen_bits |                               \
 80027ea:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80027ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80027ee:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80027f0:	6920      	ldr	r0, [r4, #16]
 80027f2:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80027f4:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80027f6:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80027f8:	6a20      	ldr	r0, [r4, #32]
 80027fa:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80027fe:	430b      	orrs	r3, r1
 8002800:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	6851      	ldr	r1, [r2, #4]
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_SAI_Init+0x1fc>)
 8002808:	400b      	ands	r3, r1
 800280a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800280c:	6821      	ldr	r1, [r4, #0]
 800280e:	684a      	ldr	r2, [r1, #4]
 8002810:	69a3      	ldr	r3, [r4, #24]
 8002812:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002814:	4303      	orrs	r3, r0
 8002816:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002818:	4303      	orrs	r3, r0
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800281e:	6822      	ldr	r2, [r4, #0]
 8002820:	6891      	ldr	r1, [r2, #8]
 8002822:	4b39      	ldr	r3, [pc, #228]	; (8002908 <HAL_SAI_Init+0x200>)
 8002824:	400b      	ands	r3, r1
 8002826:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002828:	6820      	ldr	r0, [r4, #0]
 800282a:	6882      	ldr	r2, [r0, #8]
 800282c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800282e:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8002830:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002832:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 8002834:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8002836:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8002838:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800283a:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800283c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800283e:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8002840:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002844:	4313      	orrs	r3, r2
 8002846:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	68d3      	ldr	r3, [r2, #12]
 800284c:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8002850:	f023 030f 	bic.w	r3, r3, #15
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	0c1b      	lsrs	r3, r3, #16
 8002858:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800285a:	6820      	ldr	r0, [r4, #0]
 800285c:	68c2      	ldr	r2, [r0, #12]
 800285e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002860:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002862:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002864:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002866:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800286a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800286c:	3901      	subs	r1, #1
 800286e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002872:	4313      	orrs	r3, r2
 8002874:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002876:	2000      	movs	r0, #0
 8002878:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 800287c:	2301      	movs	r3, #1
 800287e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 8002882:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8002886:	bd38      	pop	{r3, r4, r5, pc}
    hsai->Lock = HAL_UNLOCKED;
 8002888:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 800288c:	f002 fc62 	bl	8005154 <HAL_SAI_MspInit>
 8002890:	e744      	b.n	800271c <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8002892:	2210      	movs	r2, #16
 8002894:	e750      	b.n	8002738 <HAL_SAI_Init+0x30>
  switch(hsai->Init.SynchroExt)
 8002896:	2200      	movs	r2, #0
 8002898:	e74e      	b.n	8002738 <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800289a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800289e:	e756      	b.n	800274e <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80028a0:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80028a4:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 80028a8:	e751      	b.n	800274e <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80028aa:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80028ae:	e74e      	b.n	800274e <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_SAI_Init+0x1e8>)
 80028b2:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80028b6:	e755      	b.n	8002764 <HAL_SAI_Init+0x5c>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80028b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028bc:	f7ff fd54 	bl	8002368 <HAL_RCCEx_GetPeriphCLKFreq>
 80028c0:	e75b      	b.n	800277a <HAL_SAI_Init+0x72>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80028c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80028c6:	f7ff fd4f 	bl	8002368 <HAL_RCCEx_GetPeriphCLKFreq>
 80028ca:	e75e      	b.n	800278a <HAL_SAI_Init+0x82>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80028cc:	f04f 0c00 	mov.w	ip, #0
 80028d0:	e77b      	b.n	80027ca <HAL_SAI_Init+0xc2>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80028d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d002      	beq.n	80028de <HAL_SAI_Init+0x1d6>
 80028d8:	f04f 0c00 	mov.w	ip, #0
 80028dc:	e775      	b.n	80027ca <HAL_SAI_Init+0xc2>
 80028de:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80028e2:	e772      	b.n	80027ca <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
}
 80028e6:	4770      	bx	lr
 80028e8:	40015804 	.word	0x40015804
 80028ec:	40015824 	.word	0x40015824
 80028f0:	40015000 	.word	0x40015000
 80028f4:	40015c04 	.word	0x40015c04
 80028f8:	40015c24 	.word	0x40015c24
 80028fc:	cccccccd 	.word	0xcccccccd
 8002900:	ff05c010 	.word	0xff05c010
 8002904:	ffff1ff0 	.word	0xffff1ff0
 8002908:	fff88000 	.word	0xfff88000

0800290c <HAL_SAI_InitProtocol>:
{
 800290c:	b510      	push	{r4, lr}
 800290e:	4604      	mov	r4, r0
  switch(protocol)
 8002910:	2902      	cmp	r1, #2
 8002912:	d906      	bls.n	8002922 <HAL_SAI_InitProtocol+0x16>
 8002914:	1ec8      	subs	r0, r1, #3
 8002916:	2801      	cmp	r0, #1
 8002918:	d80b      	bhi.n	8002932 <HAL_SAI_InitProtocol+0x26>
    status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff fe83 	bl	8002626 <SAI_InitPCM>
    break;
 8002920:	e001      	b.n	8002926 <HAL_SAI_InitProtocol+0x1a>
    status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8002922:	f7ff fe13 	bl	800254c <SAI_InitI2S>
  if(status == HAL_OK)
 8002926:	b100      	cbz	r0, 800292a <HAL_SAI_InitProtocol+0x1e>
}
 8002928:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff feec 	bl	8002708 <HAL_SAI_Init>
 8002930:	e7fa      	b.n	8002928 <HAL_SAI_InitProtocol+0x1c>
  switch(protocol)
 8002932:	2001      	movs	r0, #1
 8002934:	e7f8      	b.n	8002928 <HAL_SAI_InitProtocol+0x1c>

08002936 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800293a:	4606      	mov	r6, r0
 800293c:	4688      	mov	r8, r1
 800293e:	4617      	mov	r7, r2
 8002940:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002942:	6834      	ldr	r4, [r6, #0]
 8002944:	68a4      	ldr	r4, [r4, #8]
 8002946:	ea38 0304 	bics.w	r3, r8, r4
 800294a:	bf0c      	ite	eq
 800294c:	f04f 0c01 	moveq.w	ip, #1
 8002950:	f04f 0c00 	movne.w	ip, #0
 8002954:	45bc      	cmp	ip, r7
 8002956:	d037      	beq.n	80029c8 <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002958:	f1b5 3fff 	cmp.w	r5, #4294967295
 800295c:	d0f1      	beq.n	8002942 <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800295e:	f7fd fe87 	bl	8000670 <HAL_GetTick>
 8002962:	9b06      	ldr	r3, [sp, #24]
 8002964:	1ac0      	subs	r0, r0, r3
 8002966:	42a8      	cmp	r0, r5
 8002968:	d201      	bcs.n	800296e <SPI_WaitFlagStateUntilTimeout+0x38>
 800296a:	2d00      	cmp	r5, #0
 800296c:	d1e9      	bne.n	8002942 <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800296e:	6832      	ldr	r2, [r6, #0]
 8002970:	6853      	ldr	r3, [r2, #4]
 8002972:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002976:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002978:	6873      	ldr	r3, [r6, #4]
 800297a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297e:	d00b      	beq.n	8002998 <SPI_WaitFlagStateUntilTimeout+0x62>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002980:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002986:	d014      	beq.n	80029b2 <SPI_WaitFlagStateUntilTimeout+0x7c>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002988:	2301      	movs	r3, #1
 800298a:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800298e:	2300      	movs	r3, #0
 8002990:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002994:	2003      	movs	r0, #3
 8002996:	e018      	b.n	80029ca <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002998:	68b3      	ldr	r3, [r6, #8]
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299e:	bf18      	it	ne
 80029a0:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 80029a4:	d1ec      	bne.n	8002980 <SPI_WaitFlagStateUntilTimeout+0x4a>
          __HAL_SPI_DISABLE(hspi);
 80029a6:	6832      	ldr	r2, [r6, #0]
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	e7e6      	b.n	8002980 <SPI_WaitFlagStateUntilTimeout+0x4a>
          SPI_RESET_CRC(hspi);
 80029b2:	6832      	ldr	r2, [r6, #0]
 80029b4:	6813      	ldr	r3, [r2, #0]
 80029b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	6832      	ldr	r2, [r6, #0]
 80029be:	6813      	ldr	r3, [r2, #0]
 80029c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e7df      	b.n	8002988 <SPI_WaitFlagStateUntilTimeout+0x52>
      }
    }
  }

  return HAL_OK;
 80029c8:	2000      	movs	r0, #0
}
 80029ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029ce <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029d2:	4681      	mov	r9, r0
 80029d4:	460f      	mov	r7, r1
 80029d6:	4616      	mov	r6, r2
 80029d8:	4698      	mov	r8, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80029da:	e002      	b.n	80029e2 <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80029dc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80029e0:	d10d      	bne.n	80029fe <SPI_WaitFifoStateUntilTimeout+0x30>
  while ((hspi->Instance->SR & Fifo) != State)
 80029e2:	f8d9 5000 	ldr.w	r5, [r9]
 80029e6:	68ac      	ldr	r4, [r5, #8]
 80029e8:	ea04 0c07 	and.w	ip, r4, r7
 80029ec:	45b4      	cmp	ip, r6
 80029ee:	d043      	beq.n	8002a78 <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029f0:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 80029f4:	bf08      	it	eq
 80029f6:	2e00      	cmpeq	r6, #0
 80029f8:	d1f0      	bne.n	80029dc <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80029fa:	7b2b      	ldrb	r3, [r5, #12]
 80029fc:	e7ee      	b.n	80029dc <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80029fe:	f7fd fe37 	bl	8000670 <HAL_GetTick>
 8002a02:	9b08      	ldr	r3, [sp, #32]
 8002a04:	1ac0      	subs	r0, r0, r3
 8002a06:	4540      	cmp	r0, r8
 8002a08:	d202      	bcs.n	8002a10 <SPI_WaitFifoStateUntilTimeout+0x42>
 8002a0a:	f1b8 0f00 	cmp.w	r8, #0
 8002a0e:	d1e8      	bne.n	80029e2 <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a10:	f8d9 2000 	ldr.w	r2, [r9]
 8002a14:	6853      	ldr	r3, [r2, #4]
 8002a16:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002a1a:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a24:	d00c      	beq.n	8002a40 <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a26:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8002a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2e:	d016      	beq.n	8002a5e <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a36:	2300      	movs	r3, #0
 8002a38:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	e01c      	b.n	8002a7a <SPI_WaitFifoStateUntilTimeout+0xac>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a40:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a48:	bf18      	it	ne
 8002a4a:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8002a4e:	d1ea      	bne.n	8002a26 <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 8002a50:	f8d9 2000 	ldr.w	r2, [r9]
 8002a54:	6813      	ldr	r3, [r2, #0]
 8002a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	e7e3      	b.n	8002a26 <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 8002a5e:	f8d9 2000 	ldr.w	r2, [r9]
 8002a62:	6813      	ldr	r3, [r2, #0]
 8002a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	f8d9 2000 	ldr.w	r2, [r9]
 8002a6e:	6813      	ldr	r3, [r2, #0]
 8002a70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e7db      	b.n	8002a30 <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 8002a78:	2000      	movs	r0, #0
}
 8002a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002a7e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7e:	b570      	push	{r4, r5, r6, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	4604      	mov	r4, r0
 8002a84:	460d      	mov	r5, r1
 8002a86:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a88:	9200      	str	r2, [sp, #0]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002a92:	f7ff ff9c 	bl	80029ce <SPI_WaitFifoStateUntilTimeout>
 8002a96:	b9b0      	cbnz	r0, 8002ac6 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a98:	9600      	str	r6, [sp, #0]
 8002a9a:	462b      	mov	r3, r5
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f7ff ff48 	bl	8002936 <SPI_WaitFlagStateUntilTimeout>
 8002aa6:	b9a8      	cbnz	r0, 8002ad4 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aa8:	9600      	str	r6, [sp, #0]
 8002aaa:	462b      	mov	r3, r5
 8002aac:	2200      	movs	r2, #0
 8002aae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7ff ff8b 	bl	80029ce <SPI_WaitFifoStateUntilTimeout>
 8002ab8:	b150      	cbz	r0, 8002ad0 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002abc:	f043 0320 	orr.w	r3, r3, #32
 8002ac0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ac2:	2003      	movs	r0, #3
 8002ac4:	e004      	b.n	8002ad0 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002ac8:	f043 0320 	orr.w	r3, r3, #32
 8002acc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ace:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ad4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002ad6:	f043 0320 	orr.w	r3, r3, #32
 8002ada:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002adc:	2003      	movs	r0, #3
 8002ade:	e7f7      	b.n	8002ad0 <SPI_EndRxTxTransaction+0x52>

08002ae0 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d058      	beq.n	8002b96 <HAL_SPI_Init+0xb6>
{
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aec:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d045      	beq.n	8002b80 <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002af4:	2302      	movs	r3, #2
 8002af6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002afa:	6822      	ldr	r2, [r4, #0]
 8002afc:	6813      	ldr	r3, [r2, #0]
 8002afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b02:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b04:	68e3      	ldr	r3, [r4, #12]
 8002b06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b0a:	d93e      	bls.n	8002b8a <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b0c:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b12:	bf18      	it	ne
 8002b14:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8002b18:	d001      	beq.n	8002b1e <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002b1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002b20:	b921      	cbnz	r1, 8002b2c <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b26:	d933      	bls.n	8002b90 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002b2c:	6863      	ldr	r3, [r4, #4]
 8002b2e:	68a1      	ldr	r1, [r4, #8]
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6921      	ldr	r1, [r4, #16]
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6961      	ldr	r1, [r4, #20]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	69a1      	ldr	r1, [r4, #24]
 8002b3c:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002b40:	430b      	orrs	r3, r1
 8002b42:	69e1      	ldr	r1, [r4, #28]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6a21      	ldr	r1, [r4, #32]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b4c:	6821      	ldr	r1, [r4, #0]
 8002b4e:	4303      	orrs	r3, r0
 8002b50:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002b52:	8b63      	ldrh	r3, [r4, #26]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	68e1      	ldr	r1, [r4, #12]
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6821      	ldr	r1, [r4, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	69d3      	ldr	r3, [r2, #28]
 8002b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b72:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b74:	2000      	movs	r0, #0
 8002b76:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002b7e:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002b80:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002b84:	f002 fc08 	bl	8005398 <HAL_SPI_MspInit>
 8002b88:	e7b4      	b.n	8002af4 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b8e:	e7be      	b.n	8002b0e <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002b90:	2301      	movs	r3, #1
 8002b92:	6323      	str	r3, [r4, #48]	; 0x30
 8002b94:	e7ca      	b.n	8002b2c <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8002b96:	2001      	movs	r0, #1
}
 8002b98:	4770      	bx	lr

08002b9a <HAL_SPI_TransmitReceive>:
{
 8002b9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b9e:	461f      	mov	r7, r3
 8002ba0:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8002ba2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	f000 8161 	beq.w	8002e6e <HAL_SPI_TransmitReceive+0x2d4>
 8002bac:	4604      	mov	r4, r0
 8002bae:	4688      	mov	r8, r1
 8002bb0:	4691      	mov	r9, r2
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002bb8:	f7fd fd5a 	bl	8000670 <HAL_GetTick>
 8002bbc:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002bbe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002bc2:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002bc4:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d00a      	beq.n	8002be0 <HAL_SPI_TransmitReceive+0x46>
 8002bca:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002bce:	f040 8137 	bne.w	8002e40 <HAL_SPI_TransmitReceive+0x2a6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bd2:	68a2      	ldr	r2, [r4, #8]
 8002bd4:	2a00      	cmp	r2, #0
 8002bd6:	f040 813c 	bne.w	8002e52 <HAL_SPI_TransmitReceive+0x2b8>
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	f040 813b 	bne.w	8002e56 <HAL_SPI_TransmitReceive+0x2bc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002be0:	f1b9 0f00 	cmp.w	r9, #0
 8002be4:	bf18      	it	ne
 8002be6:	f1b8 0f00 	cmpne.w	r8, #0
 8002bea:	f000 8136 	beq.w	8002e5a <HAL_SPI_TransmitReceive+0x2c0>
 8002bee:	2f00      	cmp	r7, #0
 8002bf0:	f000 8135 	beq.w	8002e5e <HAL_SPI_TransmitReceive+0x2c4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bf4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d002      	beq.n	8002c04 <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bfe:	2305      	movs	r3, #5
 8002c00:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c08:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c0c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c10:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c14:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c18:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c1a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8002c1c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c1e:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002c20:	68e3      	ldr	r3, [r4, #12]
 8002c22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c26:	d801      	bhi.n	8002c2c <HAL_SPI_TransmitReceive+0x92>
 8002c28:	2f01      	cmp	r7, #1
 8002c2a:	d923      	bls.n	8002c74 <HAL_SPI_TransmitReceive+0xda>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c2c:	6822      	ldr	r2, [r4, #0]
 8002c2e:	6853      	ldr	r3, [r2, #4]
 8002c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c34:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c3e:	d103      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0xae>
    __HAL_SPI_ENABLE(hspi);
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c46:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c48:	68e3      	ldr	r3, [r4, #12]
 8002c4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c4e:	d958      	bls.n	8002d02 <HAL_SPI_TransmitReceive+0x168>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c50:	6863      	ldr	r3, [r4, #4]
 8002c52:	b10b      	cbz	r3, 8002c58 <HAL_SPI_TransmitReceive+0xbe>
 8002c54:	2f01      	cmp	r7, #1
 8002c56:	d10b      	bne.n	8002c70 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	8812      	ldrh	r2, [r2, #0]
 8002c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c62:	3302      	adds	r3, #2
 8002c64:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002c66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002c70:	2701      	movs	r7, #1
 8002c72:	e031      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c74:	6822      	ldr	r2, [r4, #0]
 8002c76:	6853      	ldr	r3, [r2, #4]
 8002c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c7c:	6053      	str	r3, [r2, #4]
 8002c7e:	e7da      	b.n	8002c36 <HAL_SPI_TransmitReceive+0x9c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c82:	8812      	ldrh	r2, [r2, #0]
 8002c84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c88:	3302      	adds	r3, #2
 8002c8a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002c8c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002c96:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	f012 0f01 	tst.w	r2, #1
 8002ca0:	d011      	beq.n	8002cc6 <HAL_SPI_TransmitReceive+0x12c>
 8002ca2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002ca6:	b292      	uxth	r2, r2
 8002ca8:	b16a      	cbz	r2, 8002cc6 <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002cb6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002cc4:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cc6:	f7fd fcd3 	bl	8000670 <HAL_GetTick>
 8002cca:	1b83      	subs	r3, r0, r6
 8002ccc:	42ab      	cmp	r3, r5
 8002cce:	d303      	bcc.n	8002cd8 <HAL_SPI_TransmitReceive+0x13e>
 8002cd0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002cd4:	f040 80c5 	bne.w	8002e62 <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	b92b      	cbnz	r3, 8002cea <HAL_SPI_TransmitReceive+0x150>
 8002cde:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a1 	beq.w	8002e2c <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	f012 0f02 	tst.w	r2, #2
 8002cf2:	d0d1      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0xfe>
 8002cf4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002cf6:	b292      	uxth	r2, r2
 8002cf8:	2a00      	cmp	r2, #0
 8002cfa:	d0cd      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0xfe>
 8002cfc:	2f00      	cmp	r7, #0
 8002cfe:	d0cb      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0xfe>
 8002d00:	e7be      	b.n	8002c80 <HAL_SPI_TransmitReceive+0xe6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d02:	6863      	ldr	r3, [r4, #4]
 8002d04:	b10b      	cbz	r3, 8002d0a <HAL_SPI_TransmitReceive+0x170>
 8002d06:	2f01      	cmp	r7, #1
 8002d08:	d10f      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x190>
      if (hspi->TxXferCount > 1U)
 8002d0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d90d      	bls.n	8002d2e <HAL_SPI_TransmitReceive+0x194>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	8812      	ldrh	r2, [r2, #0]
 8002d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b02      	subs	r3, #2
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002d2a:	2701      	movs	r7, #1
 8002d2c:	e049      	b.n	8002dc2 <HAL_SPI_TransmitReceive+0x228>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002d36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d38:	3301      	adds	r3, #1
 8002d3a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002d3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002d46:	e7f0      	b.n	8002d2a <HAL_SPI_TransmitReceive+0x190>
        if (hspi->TxXferCount > 1U)
 8002d48:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002d4a:	b292      	uxth	r2, r2
 8002d4c:	2a01      	cmp	r2, #1
 8002d4e:	d90c      	bls.n	8002d6a <HAL_SPI_TransmitReceive+0x1d0>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d58:	3302      	adds	r3, #2
 8002d5a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b02      	subs	r3, #2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002d66:	2700      	movs	r7, #0
 8002d68:	e03d      	b.n	8002de6 <HAL_SPI_TransmitReceive+0x24c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d6c:	7812      	ldrb	r2, [r2, #0]
 8002d6e:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8002d70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d72:	3301      	adds	r3, #1
 8002d74:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002d76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002d80:	2700      	movs	r7, #0
 8002d82:	e030      	b.n	8002de6 <HAL_SPI_TransmitReceive+0x24c>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d84:	6822      	ldr	r2, [r4, #0]
 8002d86:	6853      	ldr	r3, [r2, #4]
 8002d88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d8c:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8002d8e:	2701      	movs	r7, #1
 8002d90:	e00d      	b.n	8002dae <HAL_SPI_TransmitReceive+0x214>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d94:	7b1b      	ldrb	r3, [r3, #12]
 8002d96:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8002d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002d9e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002dac:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dae:	f7fd fc5f 	bl	8000670 <HAL_GetTick>
 8002db2:	1b80      	subs	r0, r0, r6
 8002db4:	42a8      	cmp	r0, r5
 8002db6:	d302      	bcc.n	8002dbe <HAL_SPI_TransmitReceive+0x224>
 8002db8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002dbc:	d153      	bne.n	8002e66 <HAL_SPI_TransmitReceive+0x2cc>
 8002dbe:	2d00      	cmp	r5, #0
 8002dc0:	d053      	beq.n	8002e6a <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	b923      	cbnz	r3, 8002dd2 <HAL_SPI_TransmitReceive+0x238>
 8002dc8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d02c      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	f012 0f02 	tst.w	r2, #2
 8002dda:	d004      	beq.n	8002de6 <HAL_SPI_TransmitReceive+0x24c>
 8002ddc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002dde:	b292      	uxth	r2, r2
 8002de0:	b10a      	cbz	r2, 8002de6 <HAL_SPI_TransmitReceive+0x24c>
 8002de2:	2f00      	cmp	r7, #0
 8002de4:	d1b0      	bne.n	8002d48 <HAL_SPI_TransmitReceive+0x1ae>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	f012 0f01 	tst.w	r2, #1
 8002dee:	d0de      	beq.n	8002dae <HAL_SPI_TransmitReceive+0x214>
 8002df0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002df4:	b292      	uxth	r2, r2
 8002df6:	2a00      	cmp	r2, #0
 8002df8:	d0d9      	beq.n	8002dae <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 8002dfa:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	2a01      	cmp	r2, #1
 8002e02:	d9c6      	bls.n	8002d92 <HAL_SPI_TransmitReceive+0x1f8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e08:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002e10:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b02      	subs	r3, #2
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002e1e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d9ad      	bls.n	8002d84 <HAL_SPI_TransmitReceive+0x1ea>
        txallowed = 1U;
 8002e28:	2701      	movs	r7, #1
 8002e2a:	e7c0      	b.n	8002dae <HAL_SPI_TransmitReceive+0x214>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e2c:	4632      	mov	r2, r6
 8002e2e:	4629      	mov	r1, r5
 8002e30:	4620      	mov	r0, r4
 8002e32:	f7ff fe24 	bl	8002a7e <SPI_EndRxTxTransaction>
 8002e36:	b120      	cbz	r0, 8002e42 <HAL_SPI_TransmitReceive+0x2a8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_BUSY;
 8002e40:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8002e52:	2002      	movs	r0, #2
 8002e54:	e7f5      	b.n	8002e42 <HAL_SPI_TransmitReceive+0x2a8>
 8002e56:	2002      	movs	r0, #2
 8002e58:	e7f3      	b.n	8002e42 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	e7f1      	b.n	8002e42 <HAL_SPI_TransmitReceive+0x2a8>
 8002e5e:	2001      	movs	r0, #1
 8002e60:	e7ef      	b.n	8002e42 <HAL_SPI_TransmitReceive+0x2a8>
        errorcode = HAL_TIMEOUT;
 8002e62:	2003      	movs	r0, #3
 8002e64:	e7ed      	b.n	8002e42 <HAL_SPI_TransmitReceive+0x2a8>
        errorcode = HAL_TIMEOUT;
 8002e66:	2003      	movs	r0, #3
 8002e68:	e7eb      	b.n	8002e42 <HAL_SPI_TransmitReceive+0x2a8>
 8002e6a:	2003      	movs	r0, #3
 8002e6c:	e7e9      	b.n	8002e42 <HAL_SPI_TransmitReceive+0x2a8>
  __HAL_LOCK(hspi);
 8002e6e:	2002      	movs	r0, #2
 8002e70:	e7ed      	b.n	8002e4e <HAL_SPI_TransmitReceive+0x2b4>
	...

08002e74 <HAL_SPI_Transmit_DMA>:
{
 8002e74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8002e76:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	f000 8087 	beq.w	8002f8e <HAL_SPI_Transmit_DMA+0x11a>
 8002e80:	4604      	mov	r4, r0
 8002e82:	2301      	movs	r3, #1
 8002e84:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8002e88:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
 8002e8c:	b2ed      	uxtb	r5, r5
 8002e8e:	429d      	cmp	r5, r3
 8002e90:	d177      	bne.n	8002f82 <HAL_SPI_Transmit_DMA+0x10e>
  if ((pData == NULL) || (Size == 0U))
 8002e92:	2a00      	cmp	r2, #0
 8002e94:	bf18      	it	ne
 8002e96:	2900      	cmpne	r1, #0
 8002e98:	d074      	beq.n	8002f84 <HAL_SPI_Transmit_DMA+0x110>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ea4:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ea6:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ea8:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eaa:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002eac:	6503      	str	r3, [r0, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002eae:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8002eb0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002eb4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb8:	6883      	ldr	r3, [r0, #8]
 8002eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ebe:	d039      	beq.n	8002f34 <HAL_SPI_Transmit_DMA+0xc0>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002ec0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ec2:	4a34      	ldr	r2, [pc, #208]	; (8002f94 <HAL_SPI_Transmit_DMA+0x120>)
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002ec6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ec8:	4a33      	ldr	r2, [pc, #204]	; (8002f98 <HAL_SPI_Transmit_DMA+0x124>)
 8002eca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002ecc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ece:	4a33      	ldr	r2, [pc, #204]	; (8002f9c <HAL_SPI_Transmit_DMA+0x128>)
 8002ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8002ed2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	651a      	str	r2, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	6853      	ldr	r3, [r2, #4]
 8002edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee0:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002ee2:	68e3      	ldr	r3, [r4, #12]
 8002ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ee8:	d804      	bhi.n	8002ef4 <HAL_SPI_Transmit_DMA+0x80>
 8002eea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef2:	d025      	beq.n	8002f40 <HAL_SPI_Transmit_DMA+0xcc>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8002ef4:	6822      	ldr	r2, [r4, #0]
 8002ef6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	320c      	adds	r2, #12
 8002efc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f00:	f7fd fd1e 	bl	8000940 <HAL_DMA_Start_IT>
 8002f04:	4601      	mov	r1, r0
 8002f06:	2800      	cmp	r0, #0
 8002f08:	d133      	bne.n	8002f72 <HAL_SPI_Transmit_DMA+0xfe>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f12:	d103      	bne.n	8002f1c <HAL_SPI_Transmit_DMA+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f1a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	6853      	ldr	r3, [r2, #4]
 8002f20:	f043 0320 	orr.w	r3, r3, #32
 8002f24:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f26:	6822      	ldr	r2, [r4, #0]
 8002f28:	6853      	ldr	r3, [r2, #4]
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f30:	460d      	mov	r5, r1
 8002f32:	e027      	b.n	8002f84 <HAL_SPI_Transmit_DMA+0x110>
    SPI_1LINE_TX(hspi);
 8002f34:	6802      	ldr	r2, [r0, #0]
 8002f36:	6813      	ldr	r3, [r2, #0]
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e7bf      	b.n	8002ec0 <HAL_SPI_Transmit_DMA+0x4c>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002f40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f42:	f013 0f01 	tst.w	r3, #1
 8002f46:	d109      	bne.n	8002f5c <HAL_SPI_Transmit_DMA+0xe8>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	6853      	ldr	r3, [r2, #4]
 8002f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f50:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002f52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f54:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002f58:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002f5a:	e7cb      	b.n	8002ef4 <HAL_SPI_Transmit_DMA+0x80>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	6853      	ldr	r3, [r2, #4]
 8002f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f64:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002f66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f68:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002f70:	e7c0      	b.n	8002ef4 <HAL_SPI_Transmit_DMA+0x80>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f72:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002f74:	f043 0310 	orr.w	r3, r3, #16
 8002f78:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 8002f80:	e000      	b.n	8002f84 <HAL_SPI_Transmit_DMA+0x110>
    errorcode = HAL_BUSY;
 8002f82:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8002f84:	2300      	movs	r3, #0
 8002f86:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 8002f8e:	2502      	movs	r5, #2
 8002f90:	e7fb      	b.n	8002f8a <HAL_SPI_Transmit_DMA+0x116>
 8002f92:	bf00      	nop
 8002f94:	08002fa5 	.word	0x08002fa5
 8002f98:	08002fd3 	.word	0x08002fd3
 8002f9c:	08002fb1 	.word	0x08002fb1

08002fa0 <HAL_SPI_TxCpltCallback>:
}
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_SPI_TxHalfCpltCallback>:
}
 8002fa2:	4770      	bx	lr

08002fa4 <SPI_DMAHalfTransmitCplt>:
{
 8002fa4:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002fa6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002fa8:	f7ff fffb 	bl	8002fa2 <HAL_SPI_TxHalfCpltCallback>
}
 8002fac:	bd08      	pop	{r3, pc}

08002fae <HAL_SPI_ErrorCallback>:
}
 8002fae:	4770      	bx	lr

08002fb0 <SPI_DMAError>:
{
 8002fb0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fb2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002fb4:	6802      	ldr	r2, [r0, #0]
 8002fb6:	6853      	ldr	r3, [r2, #4]
 8002fb8:	f023 0303 	bic.w	r3, r3, #3
 8002fbc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002fbe:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002fc0:	f043 0310 	orr.w	r3, r3, #16
 8002fc4:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8002fcc:	f7ff ffef 	bl	8002fae <HAL_SPI_ErrorCallback>
}
 8002fd0:	bd08      	pop	{r3, pc}

08002fd2 <SPI_DMATransmitCplt>:
{
 8002fd2:	b530      	push	{r4, r5, lr}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fd8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002fda:	f7fd fb49 	bl	8000670 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002fde:	682b      	ldr	r3, [r5, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002fe6:	d123      	bne.n	8003030 <SPI_DMATransmitCplt+0x5e>
 8002fe8:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fea:	6821      	ldr	r1, [r4, #0]
 8002fec:	684b      	ldr	r3, [r1, #4]
 8002fee:	f023 0320 	bic.w	r3, r3, #32
 8002ff2:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ff4:	6821      	ldr	r1, [r4, #0]
 8002ff6:	684b      	ldr	r3, [r1, #4]
 8002ff8:	f023 0302 	bic.w	r3, r3, #2
 8002ffc:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ffe:	2164      	movs	r1, #100	; 0x64
 8003000:	4620      	mov	r0, r4
 8003002:	f7ff fd3c 	bl	8002a7e <SPI_EndRxTxTransaction>
 8003006:	b118      	cbz	r0, 8003010 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003008:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800300a:	f043 0320 	orr.w	r3, r3, #32
 800300e:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003010:	68a3      	ldr	r3, [r4, #8]
 8003012:	b933      	cbnz	r3, 8003022 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	9201      	str	r2, [sp, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003026:	2301      	movs	r3, #1
 8003028:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800302c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800302e:	b923      	cbnz	r3, 800303a <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8003030:	4620      	mov	r0, r4
 8003032:	f7ff ffb5 	bl	8002fa0 <HAL_SPI_TxCpltCallback>
}
 8003036:	b003      	add	sp, #12
 8003038:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800303a:	4620      	mov	r0, r4
 800303c:	f7ff ffb7 	bl	8002fae <HAL_SPI_ErrorCallback>
      return;
 8003040:	e7f9      	b.n	8003036 <SPI_DMATransmitCplt+0x64>
	...

08003044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003044:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003046:	6a03      	ldr	r3, [r0, #32]
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003050:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003052:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003054:	4c12      	ldr	r4, [pc, #72]	; (80030a0 <TIM_OC1_SetConfig+0x5c>)
 8003056:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003058:	680d      	ldr	r5, [r1, #0]
 800305a:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800305c:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003060:	688b      	ldr	r3, [r1, #8]
 8003062:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003064:	4c0f      	ldr	r4, [pc, #60]	; (80030a4 <TIM_OC1_SetConfig+0x60>)
 8003066:	4e10      	ldr	r6, [pc, #64]	; (80030a8 <TIM_OC1_SetConfig+0x64>)
 8003068:	42b0      	cmp	r0, r6
 800306a:	bf18      	it	ne
 800306c:	42a0      	cmpne	r0, r4
 800306e:	bf0c      	ite	eq
 8003070:	2401      	moveq	r4, #1
 8003072:	2400      	movne	r4, #0
 8003074:	d105      	bne.n	8003082 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003076:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800307a:	68ce      	ldr	r6, [r1, #12]
 800307c:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800307e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003082:	b12c      	cbz	r4, 8003090 <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003084:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003088:	694c      	ldr	r4, [r1, #20]
 800308a:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800308c:	698a      	ldr	r2, [r1, #24]
 800308e:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003090:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003092:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003094:	684a      	ldr	r2, [r1, #4]
 8003096:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003098:	6203      	str	r3, [r0, #32]
}
 800309a:	bc70      	pop	{r4, r5, r6}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	fffeff8c 	.word	0xfffeff8c
 80030a4:	40010000 	.word	0x40010000
 80030a8:	40010400 	.word	0x40010400

080030ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ac:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ae:	6a03      	ldr	r3, [r0, #32]
 80030b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ba:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030bc:	4c14      	ldr	r4, [pc, #80]	; (8003110 <TIM_OC3_SetConfig+0x64>)
 80030be:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c0:	680e      	ldr	r6, [r1, #0]
 80030c2:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030c8:	688c      	ldr	r4, [r1, #8]
 80030ca:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ce:	4c11      	ldr	r4, [pc, #68]	; (8003114 <TIM_OC3_SetConfig+0x68>)
 80030d0:	4d11      	ldr	r5, [pc, #68]	; (8003118 <TIM_OC3_SetConfig+0x6c>)
 80030d2:	42a8      	cmp	r0, r5
 80030d4:	bf18      	it	ne
 80030d6:	42a0      	cmpne	r0, r4
 80030d8:	bf0c      	ite	eq
 80030da:	2401      	moveq	r4, #1
 80030dc:	2400      	movne	r4, #0
 80030de:	d106      	bne.n	80030ee <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030e4:	68cd      	ldr	r5, [r1, #12]
 80030e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ee:	b13c      	cbz	r4, 8003100 <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030f0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030f4:	694c      	ldr	r4, [r1, #20]
 80030f6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030fa:	698c      	ldr	r4, [r1, #24]
 80030fc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003100:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003102:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003104:	684a      	ldr	r2, [r1, #4]
 8003106:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003108:	6203      	str	r3, [r0, #32]
}
 800310a:	bc70      	pop	{r4, r5, r6}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	fffeff8c 	.word	0xfffeff8c
 8003114:	40010000 	.word	0x40010000
 8003118:	40010400 	.word	0x40010400

0800311c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800311c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800311e:	6a03      	ldr	r3, [r0, #32]
 8003120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003124:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003126:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800312a:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <TIM_OC4_SetConfig+0x48>)
 800312e:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003130:	680d      	ldr	r5, [r1, #0]
 8003132:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800313a:	688d      	ldr	r5, [r1, #8]
 800313c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003140:	4e09      	ldr	r6, [pc, #36]	; (8003168 <TIM_OC4_SetConfig+0x4c>)
 8003142:	4d0a      	ldr	r5, [pc, #40]	; (800316c <TIM_OC4_SetConfig+0x50>)
 8003144:	42a8      	cmp	r0, r5
 8003146:	bf18      	it	ne
 8003148:	42b0      	cmpne	r0, r6
 800314a:	d104      	bne.n	8003156 <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800314c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003150:	694d      	ldr	r5, [r1, #20]
 8003152:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003156:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003158:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800315a:	684a      	ldr	r2, [r1, #4]
 800315c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315e:	6203      	str	r3, [r0, #32]
}
 8003160:	bc70      	pop	{r4, r5, r6}
 8003162:	4770      	bx	lr
 8003164:	feff8cff 	.word	0xfeff8cff
 8003168:	40010000 	.word	0x40010000
 800316c:	40010400 	.word	0x40010400

08003170 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003172:	6a03      	ldr	r3, [r0, #32]
 8003174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003178:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800317e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003180:	4d0d      	ldr	r5, [pc, #52]	; (80031b8 <TIM_OC5_SetConfig+0x48>)
 8003182:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003184:	680a      	ldr	r2, [r1, #0]
 8003186:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003188:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800318c:	688d      	ldr	r5, [r1, #8]
 800318e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003192:	4e0a      	ldr	r6, [pc, #40]	; (80031bc <TIM_OC5_SetConfig+0x4c>)
 8003194:	4d0a      	ldr	r5, [pc, #40]	; (80031c0 <TIM_OC5_SetConfig+0x50>)
 8003196:	42a8      	cmp	r0, r5
 8003198:	bf18      	it	ne
 800319a:	42b0      	cmpne	r0, r6
 800319c:	d104      	bne.n	80031a8 <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800319e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031a2:	694d      	ldr	r5, [r1, #20]
 80031a4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031aa:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031ac:	684a      	ldr	r2, [r1, #4]
 80031ae:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b0:	6203      	str	r3, [r0, #32]
}
 80031b2:	bc70      	pop	{r4, r5, r6}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	fffeff8f 	.word	0xfffeff8f
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40010400 	.word	0x40010400

080031c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80031c4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031c6:	6a03      	ldr	r3, [r0, #32]
 80031c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80031cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031d2:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <TIM_OC6_SetConfig+0x48>)
 80031d6:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d8:	680d      	ldr	r5, [r1, #0]
 80031da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031e2:	688d      	ldr	r5, [r1, #8]
 80031e4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e8:	4e09      	ldr	r6, [pc, #36]	; (8003210 <TIM_OC6_SetConfig+0x4c>)
 80031ea:	4d0a      	ldr	r5, [pc, #40]	; (8003214 <TIM_OC6_SetConfig+0x50>)
 80031ec:	42a8      	cmp	r0, r5
 80031ee:	bf18      	it	ne
 80031f0:	42b0      	cmpne	r0, r6
 80031f2:	d104      	bne.n	80031fe <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031f4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031f8:	694d      	ldr	r5, [r1, #20]
 80031fa:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003200:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003202:	684a      	ldr	r2, [r1, #4]
 8003204:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003206:	6203      	str	r3, [r0, #32]
}
 8003208:	bc70      	pop	{r4, r5, r6}
 800320a:	4770      	bx	lr
 800320c:	feff8fff 	.word	0xfeff8fff
 8003210:	40010000 	.word	0x40010000
 8003214:	40010400 	.word	0x40010400

08003218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003218:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800321a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321c:	6a04      	ldr	r4, [r0, #32]
 800321e:	f024 0401 	bic.w	r4, r4, #1
 8003222:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003224:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003226:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800322a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800322e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003232:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003234:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003236:	6203      	str	r3, [r0, #32]
}
 8003238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800323c:	4770      	bx	lr

0800323e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800323e:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003240:	6a04      	ldr	r4, [r0, #32]
 8003242:	f024 0410 	bic.w	r4, r4, #16
 8003246:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003248:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800324a:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800324c:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003250:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003254:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003258:	031b      	lsls	r3, r3, #12
 800325a:	b29b      	uxth	r3, r3
 800325c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003260:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003264:	0109      	lsls	r1, r1, #4
 8003266:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800326a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800326c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800326e:	6201      	str	r1, [r0, #32]
}
 8003270:	bc30      	pop	{r4, r5}
 8003272:	4770      	bx	lr

08003274 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003274:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003276:	6a04      	ldr	r4, [r0, #32]
 8003278:	f024 0410 	bic.w	r4, r4, #16
 800327c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003280:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003282:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003286:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800328a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800328e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003292:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003294:	6203      	str	r3, [r0, #32]
}
 8003296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800329a:	4770      	bx	lr

0800329c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800329c:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800329e:	6a04      	ldr	r4, [r0, #32]
 80032a0:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80032a4:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032a6:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80032a8:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80032aa:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80032ae:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80032b2:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80032be:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80032c2:	0209      	lsls	r1, r1, #8
 80032c4:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 80032c8:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032ca:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 80032cc:	6201      	str	r1, [r0, #32]
}
 80032ce:	bc30      	pop	{r4, r5}
 80032d0:	4770      	bx	lr

080032d2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032d2:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032d4:	6a04      	ldr	r4, [r0, #32]
 80032d6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80032da:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032dc:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80032de:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80032e0:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80032e4:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80032e8:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80032ec:	031b      	lsls	r3, r3, #12
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80032f4:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80032f8:	0309      	lsls	r1, r1, #12
 80032fa:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 80032fe:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003300:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003302:	6201      	str	r1, [r0, #32]
}
 8003304:	bc30      	pop	{r4, r5}
 8003306:	4770      	bx	lr

08003308 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003308:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800330e:	430b      	orrs	r3, r1
 8003310:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003314:	6083      	str	r3, [r0, #8]
}
 8003316:	4770      	bx	lr

08003318 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	2302      	movs	r3, #2
 800331a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331e:	6802      	ldr	r2, [r0, #0]
 8003320:	6891      	ldr	r1, [r2, #8]
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_TIM_Base_Start+0x2c>)
 8003324:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	2b06      	cmp	r3, #6
 8003328:	bf18      	it	ne
 800332a:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 800332e:	d003      	beq.n	8003338 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8003330:	6813      	ldr	r3, [r2, #0]
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003338:	2301      	movs	r3, #1
 800333a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800333e:	2000      	movs	r0, #0
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	00010007 	.word	0x00010007

08003348 <HAL_TIM_IC_MspInit>:
}
 8003348:	4770      	bx	lr

0800334a <HAL_TIM_PeriodElapsedCallback>:
}
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800334c:	4770      	bx	lr

0800334e <HAL_TIM_IC_CaptureCallback>:
}
 800334e:	4770      	bx	lr

08003350 <TIM_DMACaptureCplt>:
{
 8003350:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003352:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8003354:	2301      	movs	r3, #1
 8003356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800335a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800335c:	4283      	cmp	r3, r0
 800335e:	d00b      	beq.n	8003378 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003360:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003362:	4283      	cmp	r3, r0
 8003364:	d010      	beq.n	8003388 <TIM_DMACaptureCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003368:	4283      	cmp	r3, r0
 800336a:	d010      	beq.n	800338e <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800336c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800336e:	4283      	cmp	r3, r0
 8003370:	d104      	bne.n	800337c <TIM_DMACaptureCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003372:	2308      	movs	r3, #8
 8003374:	7723      	strb	r3, [r4, #28]
 8003376:	e001      	b.n	800337c <TIM_DMACaptureCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003378:	2301      	movs	r3, #1
 800337a:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff ffe6 	bl	800334e <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	2300      	movs	r3, #0
 8003384:	7723      	strb	r3, [r4, #28]
}
 8003386:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003388:	2302      	movs	r3, #2
 800338a:	7723      	strb	r3, [r4, #28]
 800338c:	e7f6      	b.n	800337c <TIM_DMACaptureCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800338e:	2304      	movs	r3, #4
 8003390:	7723      	strb	r3, [r4, #28]
 8003392:	e7f3      	b.n	800337c <TIM_DMACaptureCplt+0x2c>

08003394 <HAL_TIM_IC_CaptureHalfCpltCallback>:
}
 8003394:	4770      	bx	lr

08003396 <TIM_DMACaptureHalfCplt>:
{
 8003396:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003398:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800339a:	2301      	movs	r3, #1
 800339c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80033a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033a2:	4283      	cmp	r3, r0
 80033a4:	d00b      	beq.n	80033be <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80033a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033a8:	4283      	cmp	r3, r0
 80033aa:	d010      	beq.n	80033ce <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80033ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033ae:	4283      	cmp	r3, r0
 80033b0:	d010      	beq.n	80033d4 <TIM_DMACaptureHalfCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80033b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033b4:	4283      	cmp	r3, r0
 80033b6:	d104      	bne.n	80033c2 <TIM_DMACaptureHalfCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b8:	2308      	movs	r3, #8
 80033ba:	7723      	strb	r3, [r4, #28]
 80033bc:	e001      	b.n	80033c2 <TIM_DMACaptureHalfCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033be:	2301      	movs	r3, #1
 80033c0:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80033c2:	4620      	mov	r0, r4
 80033c4:	f7ff ffe6 	bl	8003394 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c8:	2300      	movs	r3, #0
 80033ca:	7723      	strb	r3, [r4, #28]
}
 80033cc:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ce:	2302      	movs	r3, #2
 80033d0:	7723      	strb	r3, [r4, #28]
 80033d2:	e7f6      	b.n	80033c2 <TIM_DMACaptureHalfCplt+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d4:	2304      	movs	r3, #4
 80033d6:	7723      	strb	r3, [r4, #28]
 80033d8:	e7f3      	b.n	80033c2 <TIM_DMACaptureHalfCplt+0x2c>

080033da <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80033da:	4770      	bx	lr

080033dc <HAL_TIM_TriggerCallback>:
}
 80033dc:	4770      	bx	lr

080033de <HAL_TIM_IRQHandler>:
{
 80033de:	b510      	push	{r4, lr}
 80033e0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033e2:	6803      	ldr	r3, [r0, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	f012 0f02 	tst.w	r2, #2
 80033ea:	d011      	beq.n	8003410 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	f012 0f02 	tst.w	r2, #2
 80033f2:	d00d      	beq.n	8003410 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033f4:	f06f 0202 	mvn.w	r2, #2
 80033f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033fe:	6803      	ldr	r3, [r0, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f013 0f03 	tst.w	r3, #3
 8003406:	d079      	beq.n	80034fc <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003408:	f7ff ffa1 	bl	800334e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340c:	2300      	movs	r3, #0
 800340e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	f012 0f04 	tst.w	r2, #4
 8003418:	d012      	beq.n	8003440 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	f012 0f04 	tst.w	r2, #4
 8003420:	d00e      	beq.n	8003440 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003422:	f06f 0204 	mvn.w	r2, #4
 8003426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003428:	2302      	movs	r3, #2
 800342a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003434:	d068      	beq.n	8003508 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003436:	4620      	mov	r0, r4
 8003438:	f7ff ff89 	bl	800334e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343c:	2300      	movs	r3, #0
 800343e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	f012 0f08 	tst.w	r2, #8
 8003448:	d012      	beq.n	8003470 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	f012 0f08 	tst.w	r2, #8
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003452:	f06f 0208 	mvn.w	r2, #8
 8003456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003458:	2304      	movs	r3, #4
 800345a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f013 0f03 	tst.w	r3, #3
 8003464:	d057      	beq.n	8003516 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	4620      	mov	r0, r4
 8003468:	f7ff ff71 	bl	800334e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346c:	2300      	movs	r3, #0
 800346e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	f012 0f10 	tst.w	r2, #16
 8003478:	d012      	beq.n	80034a0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	f012 0f10 	tst.w	r2, #16
 8003480:	d00e      	beq.n	80034a0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003482:	f06f 0210 	mvn.w	r2, #16
 8003486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003488:	2308      	movs	r3, #8
 800348a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003494:	d046      	beq.n	8003524 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	4620      	mov	r0, r4
 8003498:	f7ff ff59 	bl	800334e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349c:	2300      	movs	r3, #0
 800349e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	f012 0f01 	tst.w	r2, #1
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	f012 0f01 	tst.w	r2, #1
 80034b0:	d13f      	bne.n	8003532 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80034ba:	d003      	beq.n	80034c4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80034c2:	d13d      	bne.n	8003540 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80034d4:	d13b      	bne.n	800354e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	f012 0f40 	tst.w	r2, #64	; 0x40
 80034de:	d003      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80034e6:	d139      	bne.n	800355c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	f012 0f20 	tst.w	r2, #32
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	f012 0f20 	tst.w	r2, #32
 80034f8:	d137      	bne.n	800356a <HAL_TIM_IRQHandler+0x18c>
}
 80034fa:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fc:	f7ff ff26 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	4620      	mov	r0, r4
 8003502:	f7ff ff6a 	bl	80033da <HAL_TIM_PWM_PulseFinishedCallback>
 8003506:	e781      	b.n	800340c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003508:	4620      	mov	r0, r4
 800350a:	f7ff ff1f 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350e:	4620      	mov	r0, r4
 8003510:	f7ff ff63 	bl	80033da <HAL_TIM_PWM_PulseFinishedCallback>
 8003514:	e792      	b.n	800343c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	4620      	mov	r0, r4
 8003518:	f7ff ff18 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	4620      	mov	r0, r4
 800351e:	f7ff ff5c 	bl	80033da <HAL_TIM_PWM_PulseFinishedCallback>
 8003522:	e7a3      	b.n	800346c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003524:	4620      	mov	r0, r4
 8003526:	f7ff ff11 	bl	800334c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352a:	4620      	mov	r0, r4
 800352c:	f7ff ff55 	bl	80033da <HAL_TIM_PWM_PulseFinishedCallback>
 8003530:	e7b4      	b.n	800349c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003532:	f06f 0201 	mvn.w	r2, #1
 8003536:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003538:	4620      	mov	r0, r4
 800353a:	f7ff ff06 	bl	800334a <HAL_TIM_PeriodElapsedCallback>
 800353e:	e7b8      	b.n	80034b2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003544:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003546:	4620      	mov	r0, r4
 8003548:	f000 fc19 	bl	8003d7e <HAL_TIMEx_BreakCallback>
 800354c:	e7ba      	b.n	80034c4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800354e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003552:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003554:	4620      	mov	r0, r4
 8003556:	f000 fc13 	bl	8003d80 <HAL_TIMEx_Break2Callback>
 800355a:	e7bc      	b.n	80034d6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800355c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003560:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003562:	4620      	mov	r0, r4
 8003564:	f7ff ff3a 	bl	80033dc <HAL_TIM_TriggerCallback>
 8003568:	e7be      	b.n	80034e8 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800356a:	f06f 0220 	mvn.w	r2, #32
 800356e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003570:	4620      	mov	r0, r4
 8003572:	f000 fc03 	bl	8003d7c <HAL_TIMEx_CommutCallback>
}
 8003576:	e7c0      	b.n	80034fa <HAL_TIM_IRQHandler+0x11c>

08003578 <HAL_TIM_ErrorCallback>:
}
 8003578:	4770      	bx	lr

0800357a <TIM_DMAError>:
{
 800357a:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800357c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800357e:	2301      	movs	r3, #1
 8003580:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8003584:	f7ff fff8 	bl	8003578 <HAL_TIM_ErrorCallback>
}
 8003588:	bd08      	pop	{r3, pc}
	...

0800358c <TIM_Base_SetConfig>:
{
 800358c:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800358e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003590:	4a3b      	ldr	r2, [pc, #236]	; (8003680 <TIM_Base_SetConfig+0xf4>)
 8003592:	4290      	cmp	r0, r2
 8003594:	bf14      	ite	ne
 8003596:	f04f 0e00 	movne.w	lr, #0
 800359a:	f04f 0e01 	moveq.w	lr, #1
 800359e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80035a2:	bf14      	ite	ne
 80035a4:	4672      	movne	r2, lr
 80035a6:	f04e 0201 	orreq.w	r2, lr, #1
 80035aa:	b9aa      	cbnz	r2, 80035d8 <TIM_Base_SetConfig+0x4c>
 80035ac:	4c35      	ldr	r4, [pc, #212]	; (8003684 <TIM_Base_SetConfig+0xf8>)
 80035ae:	42a0      	cmp	r0, r4
 80035b0:	bf14      	ite	ne
 80035b2:	2400      	movne	r4, #0
 80035b4:	2401      	moveq	r4, #1
 80035b6:	4d34      	ldr	r5, [pc, #208]	; (8003688 <TIM_Base_SetConfig+0xfc>)
 80035b8:	42a8      	cmp	r0, r5
 80035ba:	d00d      	beq.n	80035d8 <TIM_Base_SetConfig+0x4c>
 80035bc:	b964      	cbnz	r4, 80035d8 <TIM_Base_SetConfig+0x4c>
 80035be:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80035c2:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 80035c6:	42a0      	cmp	r0, r4
 80035c8:	bf14      	ite	ne
 80035ca:	2400      	movne	r4, #0
 80035cc:	2401      	moveq	r4, #1
 80035ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80035d2:	42a8      	cmp	r0, r5
 80035d4:	d000      	beq.n	80035d8 <TIM_Base_SetConfig+0x4c>
 80035d6:	b11c      	cbz	r4, 80035e0 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80035dc:	684c      	ldr	r4, [r1, #4]
 80035de:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035e0:	2a00      	cmp	r2, #0
 80035e2:	d133      	bne.n	800364c <TIM_Base_SetConfig+0xc0>
 80035e4:	4a27      	ldr	r2, [pc, #156]	; (8003684 <TIM_Base_SetConfig+0xf8>)
 80035e6:	4290      	cmp	r0, r2
 80035e8:	bf14      	ite	ne
 80035ea:	2200      	movne	r2, #0
 80035ec:	2201      	moveq	r2, #1
 80035ee:	4c26      	ldr	r4, [pc, #152]	; (8003688 <TIM_Base_SetConfig+0xfc>)
 80035f0:	42a0      	cmp	r0, r4
 80035f2:	d02b      	beq.n	800364c <TIM_Base_SetConfig+0xc0>
 80035f4:	bb52      	cbnz	r2, 800364c <TIM_Base_SetConfig+0xc0>
 80035f6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80035fa:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 80035fe:	4290      	cmp	r0, r2
 8003600:	bf14      	ite	ne
 8003602:	2200      	movne	r2, #0
 8003604:	2201      	moveq	r2, #1
 8003606:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800360a:	42a0      	cmp	r0, r4
 800360c:	d01e      	beq.n	800364c <TIM_Base_SetConfig+0xc0>
 800360e:	b9ea      	cbnz	r2, 800364c <TIM_Base_SetConfig+0xc0>
 8003610:	4a1e      	ldr	r2, [pc, #120]	; (800368c <TIM_Base_SetConfig+0x100>)
 8003612:	4290      	cmp	r0, r2
 8003614:	bf14      	ite	ne
 8003616:	2200      	movne	r2, #0
 8003618:	2201      	moveq	r2, #1
 800361a:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800361e:	42a0      	cmp	r0, r4
 8003620:	d014      	beq.n	800364c <TIM_Base_SetConfig+0xc0>
 8003622:	b99a      	cbnz	r2, 800364c <TIM_Base_SetConfig+0xc0>
 8003624:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <TIM_Base_SetConfig+0x104>)
 8003626:	4290      	cmp	r0, r2
 8003628:	bf14      	ite	ne
 800362a:	2200      	movne	r2, #0
 800362c:	2201      	moveq	r2, #1
 800362e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003632:	42a0      	cmp	r0, r4
 8003634:	d00a      	beq.n	800364c <TIM_Base_SetConfig+0xc0>
 8003636:	b94a      	cbnz	r2, 800364c <TIM_Base_SetConfig+0xc0>
 8003638:	4a16      	ldr	r2, [pc, #88]	; (8003694 <TIM_Base_SetConfig+0x108>)
 800363a:	4290      	cmp	r0, r2
 800363c:	bf14      	ite	ne
 800363e:	2200      	movne	r2, #0
 8003640:	2201      	moveq	r2, #1
 8003642:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 8003646:	42a0      	cmp	r0, r4
 8003648:	d000      	beq.n	800364c <TIM_Base_SetConfig+0xc0>
 800364a:	b122      	cbz	r2, 8003656 <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 800364c:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003650:	68cb      	ldr	r3, [r1, #12]
 8003652:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365a:	694a      	ldr	r2, [r1, #20]
 800365c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800365e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003660:	688a      	ldr	r2, [r1, #8]
 8003662:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003664:	680a      	ldr	r2, [r1, #0]
 8003666:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003668:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <TIM_Base_SetConfig+0x10c>)
 800366a:	4290      	cmp	r0, r2
 800366c:	bf14      	ite	ne
 800366e:	4673      	movne	r3, lr
 8003670:	f04e 0301 	orreq.w	r3, lr, #1
 8003674:	b10b      	cbz	r3, 800367a <TIM_Base_SetConfig+0xee>
    TIMx->RCR = Structure->RepetitionCounter;
 8003676:	690b      	ldr	r3, [r1, #16]
 8003678:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800367a:	2301      	movs	r3, #1
 800367c:	6143      	str	r3, [r0, #20]
}
 800367e:	bd30      	pop	{r4, r5, pc}
 8003680:	40010000 	.word	0x40010000
 8003684:	40000800 	.word	0x40000800
 8003688:	40000400 	.word	0x40000400
 800368c:	40014400 	.word	0x40014400
 8003690:	40001800 	.word	0x40001800
 8003694:	40002000 	.word	0x40002000
 8003698:	40010400 	.word	0x40010400

0800369c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800369c:	b1b0      	cbz	r0, 80036cc <HAL_TIM_Base_Init+0x30>
{
 800369e:	b510      	push	{r4, lr}
 80036a0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036a6:	b163      	cbz	r3, 80036c2 <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	2302      	movs	r3, #2
 80036aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ae:	4621      	mov	r1, r4
 80036b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80036b4:	f7ff ff6a 	bl	800358c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80036be:	2000      	movs	r0, #0
}
 80036c0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80036c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80036c6:	f002 f84b 	bl	8005760 <HAL_TIM_Base_MspInit>
 80036ca:	e7ed      	b.n	80036a8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80036cc:	2001      	movs	r0, #1
}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80036d0:	b1b0      	cbz	r0, 8003700 <HAL_TIM_PWM_Init+0x30>
{
 80036d2:	b510      	push	{r4, lr}
 80036d4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80036d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036da:	b163      	cbz	r3, 80036f6 <HAL_TIM_PWM_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	2302      	movs	r3, #2
 80036de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e2:	4621      	mov	r1, r4
 80036e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80036e8:	f7ff ff50 	bl	800358c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80036f2:	2000      	movs	r0, #0
}
 80036f4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80036f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80036fa:	f001 ffef 	bl	80056dc <HAL_TIM_PWM_MspInit>
 80036fe:	e7ed      	b.n	80036dc <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003700:	2001      	movs	r0, #1
}
 8003702:	4770      	bx	lr

08003704 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003704:	b1b0      	cbz	r0, 8003734 <HAL_TIM_IC_Init+0x30>
{
 8003706:	b510      	push	{r4, lr}
 8003708:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800370a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800370e:	b163      	cbz	r3, 800372a <HAL_TIM_IC_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	2302      	movs	r3, #2
 8003712:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003716:	4621      	mov	r1, r4
 8003718:	f851 0b04 	ldr.w	r0, [r1], #4
 800371c:	f7ff ff36 	bl	800358c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003720:	2301      	movs	r3, #1
 8003722:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003726:	2000      	movs	r0, #0
}
 8003728:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800372a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800372e:	f7ff fe0b 	bl	8003348 <HAL_TIM_IC_MspInit>
 8003732:	e7ed      	b.n	8003710 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8003734:	2001      	movs	r0, #1
}
 8003736:	4770      	bx	lr

08003738 <TIM_OC2_SetConfig>:
{
 8003738:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373a:	6a03      	ldr	r3, [r0, #32]
 800373c:	f023 0310 	bic.w	r3, r3, #16
 8003740:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003742:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003744:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003746:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003748:	4c14      	ldr	r4, [pc, #80]	; (800379c <TIM_OC2_SetConfig+0x64>)
 800374a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800374c:	680d      	ldr	r5, [r1, #0]
 800374e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003752:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003756:	688c      	ldr	r4, [r1, #8]
 8003758:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800375c:	4c10      	ldr	r4, [pc, #64]	; (80037a0 <TIM_OC2_SetConfig+0x68>)
 800375e:	4e11      	ldr	r6, [pc, #68]	; (80037a4 <TIM_OC2_SetConfig+0x6c>)
 8003760:	42b0      	cmp	r0, r6
 8003762:	bf18      	it	ne
 8003764:	42a0      	cmpne	r0, r4
 8003766:	bf0c      	ite	eq
 8003768:	2401      	moveq	r4, #1
 800376a:	2400      	movne	r4, #0
 800376c:	d106      	bne.n	800377c <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800376e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003772:	68ce      	ldr	r6, [r1, #12]
 8003774:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377c:	b13c      	cbz	r4, 800378e <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800377e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003782:	694c      	ldr	r4, [r1, #20]
 8003784:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003788:	698c      	ldr	r4, [r1, #24]
 800378a:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800378e:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003790:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003792:	684a      	ldr	r2, [r1, #4]
 8003794:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003796:	6203      	str	r3, [r0, #32]
}
 8003798:	bc70      	pop	{r4, r5, r6}
 800379a:	4770      	bx	lr
 800379c:	feff8cff 	.word	0xfeff8cff
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40010400 	.word	0x40010400

080037a8 <HAL_TIM_PWM_ConfigChannel>:
{
 80037a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80037aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	f000 8092 	beq.w	80038d8 <HAL_TIM_PWM_ConfigChannel+0x130>
 80037b4:	4604      	mov	r4, r0
 80037b6:	460d      	mov	r5, r1
 80037b8:	2301      	movs	r3, #1
 80037ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80037be:	2302      	movs	r3, #2
 80037c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80037c4:	2a14      	cmp	r2, #20
 80037c6:	d81e      	bhi.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x5e>
 80037c8:	e8df f002 	tbb	[pc, r2]
 80037cc:	1d1d1d0b 	.word	0x1d1d1d0b
 80037d0:	1d1d1d24 	.word	0x1d1d1d24
 80037d4:	1d1d1d38 	.word	0x1d1d1d38
 80037d8:	1d1d1d4b 	.word	0x1d1d1d4b
 80037dc:	1d1d1d5f 	.word	0x1d1d1d5f
 80037e0:	72          	.byte	0x72
 80037e1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037e2:	6800      	ldr	r0, [r0, #0]
 80037e4:	f7ff fc2e 	bl	8003044 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	6993      	ldr	r3, [r2, #24]
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	6993      	ldr	r3, [r2, #24]
 80037f6:	f023 0304 	bic.w	r3, r3, #4
 80037fa:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037fc:	6822      	ldr	r2, [r4, #0]
 80037fe:	6993      	ldr	r3, [r2, #24]
 8003800:	6929      	ldr	r1, [r5, #16]
 8003802:	430b      	orrs	r3, r1
 8003804:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003806:	2301      	movs	r3, #1
 8003808:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800380c:	2000      	movs	r0, #0
 800380e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003812:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003814:	6800      	ldr	r0, [r0, #0]
 8003816:	f7ff ff8f 	bl	8003738 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	6993      	ldr	r3, [r2, #24]
 800381e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003822:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003824:	6822      	ldr	r2, [r4, #0]
 8003826:	6993      	ldr	r3, [r2, #24]
 8003828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	6993      	ldr	r3, [r2, #24]
 8003832:	6929      	ldr	r1, [r5, #16]
 8003834:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003838:	6193      	str	r3, [r2, #24]
      break;
 800383a:	e7e4      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383c:	6800      	ldr	r0, [r0, #0]
 800383e:	f7ff fc35 	bl	80030ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	69d3      	ldr	r3, [r2, #28]
 8003846:	f043 0308 	orr.w	r3, r3, #8
 800384a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	69d3      	ldr	r3, [r2, #28]
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003856:	6822      	ldr	r2, [r4, #0]
 8003858:	69d3      	ldr	r3, [r2, #28]
 800385a:	6929      	ldr	r1, [r5, #16]
 800385c:	430b      	orrs	r3, r1
 800385e:	61d3      	str	r3, [r2, #28]
      break;
 8003860:	e7d1      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003862:	6800      	ldr	r0, [r0, #0]
 8003864:	f7ff fc5a 	bl	800311c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	69d3      	ldr	r3, [r2, #28]
 800386c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003870:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003872:	6822      	ldr	r2, [r4, #0]
 8003874:	69d3      	ldr	r3, [r2, #28]
 8003876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	69d3      	ldr	r3, [r2, #28]
 8003880:	6929      	ldr	r1, [r5, #16]
 8003882:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003886:	61d3      	str	r3, [r2, #28]
      break;
 8003888:	e7bd      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800388a:	6800      	ldr	r0, [r0, #0]
 800388c:	f7ff fc70 	bl	8003170 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003894:	f043 0308 	orr.w	r3, r3, #8
 8003898:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800389a:	6822      	ldr	r2, [r4, #0]
 800389c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80038a8:	6929      	ldr	r1, [r5, #16]
 80038aa:	430b      	orrs	r3, r1
 80038ac:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80038ae:	e7aa      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038b0:	6800      	ldr	r0, [r0, #0]
 80038b2:	f7ff fc87 	bl	80031c4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80038ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038be:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038c0:	6822      	ldr	r2, [r4, #0]
 80038c2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80038c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038c8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80038ce:	6929      	ldr	r1, [r5, #16]
 80038d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80038d4:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 80038d6:	e796      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 80038d8:	2002      	movs	r0, #2
 80038da:	e79a      	b.n	8003812 <HAL_TIM_PWM_ConfigChannel+0x6a>

080038dc <TIM_TI1_SetConfig>:
{
 80038dc:	b470      	push	{r4, r5, r6}
 80038de:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038e0:	6a04      	ldr	r4, [r0, #32]
 80038e2:	f024 0401 	bic.w	r4, r4, #1
 80038e6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80038ea:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038ec:	4d1d      	ldr	r5, [pc, #116]	; (8003964 <TIM_TI1_SetConfig+0x88>)
 80038ee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038f2:	bf18      	it	ne
 80038f4:	42a8      	cmpne	r0, r5
 80038f6:	d023      	beq.n	8003940 <TIM_TI1_SetConfig+0x64>
 80038f8:	4a1b      	ldr	r2, [pc, #108]	; (8003968 <TIM_TI1_SetConfig+0x8c>)
 80038fa:	4290      	cmp	r0, r2
 80038fc:	bf14      	ite	ne
 80038fe:	2200      	movne	r2, #0
 8003900:	2201      	moveq	r2, #1
 8003902:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 8003906:	42a8      	cmp	r0, r5
 8003908:	d01a      	beq.n	8003940 <TIM_TI1_SetConfig+0x64>
 800390a:	b9ca      	cbnz	r2, 8003940 <TIM_TI1_SetConfig+0x64>
 800390c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003910:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8003914:	4290      	cmp	r0, r2
 8003916:	bf14      	ite	ne
 8003918:	2200      	movne	r2, #0
 800391a:	2201      	moveq	r2, #1
 800391c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003920:	42a8      	cmp	r0, r5
 8003922:	d00d      	beq.n	8003940 <TIM_TI1_SetConfig+0x64>
 8003924:	b962      	cbnz	r2, 8003940 <TIM_TI1_SetConfig+0x64>
 8003926:	4a11      	ldr	r2, [pc, #68]	; (800396c <TIM_TI1_SetConfig+0x90>)
 8003928:	4290      	cmp	r0, r2
 800392a:	bf14      	ite	ne
 800392c:	2200      	movne	r2, #0
 800392e:	2201      	moveq	r2, #1
 8003930:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8003934:	42a8      	cmp	r0, r5
 8003936:	d003      	beq.n	8003940 <TIM_TI1_SetConfig+0x64>
 8003938:	b912      	cbnz	r2, 8003940 <TIM_TI1_SetConfig+0x64>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800393a:	f044 0201 	orr.w	r2, r4, #1
 800393e:	e003      	b.n	8003948 <TIM_TI1_SetConfig+0x6c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003940:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003944:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003948:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	b2db      	uxtb	r3, r3
 8003950:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003952:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003956:	f001 010a 	and.w	r1, r1, #10
 800395a:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800395c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800395e:	6201      	str	r1, [r0, #32]
}
 8003960:	bc70      	pop	{r4, r5, r6}
 8003962:	4770      	bx	lr
 8003964:	40010000 	.word	0x40010000
 8003968:	40000800 	.word	0x40000800
 800396c:	40001800 	.word	0x40001800

08003970 <HAL_TIM_IC_ConfigChannel>:
{
 8003970:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003972:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003976:	2b01      	cmp	r3, #1
 8003978:	d058      	beq.n	8003a2c <HAL_TIM_IC_ConfigChannel+0xbc>
 800397a:	4604      	mov	r4, r0
 800397c:	460d      	mov	r5, r1
 800397e:	2301      	movs	r3, #1
 8003980:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	2302      	movs	r3, #2
 8003986:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800398a:	b1da      	cbz	r2, 80039c4 <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 800398c:	2a04      	cmp	r2, #4
 800398e:	d02a      	beq.n	80039e6 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 8003990:	2a08      	cmp	r2, #8
 8003992:	d03a      	beq.n	8003a0a <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance,
 8003994:	68cb      	ldr	r3, [r1, #12]
 8003996:	684a      	ldr	r2, [r1, #4]
 8003998:	6809      	ldr	r1, [r1, #0]
 800399a:	6800      	ldr	r0, [r0, #0]
 800399c:	f7ff fc99 	bl	80032d2 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039a0:	6822      	ldr	r2, [r4, #0]
 80039a2:	69d3      	ldr	r3, [r2, #28]
 80039a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039a8:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039aa:	6822      	ldr	r2, [r4, #0]
 80039ac:	69d3      	ldr	r3, [r2, #28]
 80039ae:	68a9      	ldr	r1, [r5, #8]
 80039b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80039b4:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80039bc:	2000      	movs	r0, #0
 80039be:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80039c4:	68cb      	ldr	r3, [r1, #12]
 80039c6:	684a      	ldr	r2, [r1, #4]
 80039c8:	6809      	ldr	r1, [r1, #0]
 80039ca:	6800      	ldr	r0, [r0, #0]
 80039cc:	f7ff ff86 	bl	80038dc <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039d0:	6822      	ldr	r2, [r4, #0]
 80039d2:	6993      	ldr	r3, [r2, #24]
 80039d4:	f023 030c 	bic.w	r3, r3, #12
 80039d8:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	6993      	ldr	r3, [r2, #24]
 80039de:	68a9      	ldr	r1, [r5, #8]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6193      	str	r3, [r2, #24]
 80039e4:	e7e7      	b.n	80039b6 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance,
 80039e6:	68cb      	ldr	r3, [r1, #12]
 80039e8:	684a      	ldr	r2, [r1, #4]
 80039ea:	6809      	ldr	r1, [r1, #0]
 80039ec:	6800      	ldr	r0, [r0, #0]
 80039ee:	f7ff fc26 	bl	800323e <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039f2:	6822      	ldr	r2, [r4, #0]
 80039f4:	6993      	ldr	r3, [r2, #24]
 80039f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039fa:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039fc:	6822      	ldr	r2, [r4, #0]
 80039fe:	6993      	ldr	r3, [r2, #24]
 8003a00:	68a9      	ldr	r1, [r5, #8]
 8003a02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a06:	6193      	str	r3, [r2, #24]
 8003a08:	e7d5      	b.n	80039b6 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,
 8003a0a:	68cb      	ldr	r3, [r1, #12]
 8003a0c:	684a      	ldr	r2, [r1, #4]
 8003a0e:	6809      	ldr	r1, [r1, #0]
 8003a10:	6800      	ldr	r0, [r0, #0]
 8003a12:	f7ff fc43 	bl	800329c <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a16:	6822      	ldr	r2, [r4, #0]
 8003a18:	69d3      	ldr	r3, [r2, #28]
 8003a1a:	f023 030c 	bic.w	r3, r3, #12
 8003a1e:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a20:	6822      	ldr	r2, [r4, #0]
 8003a22:	69d3      	ldr	r3, [r2, #28]
 8003a24:	68a9      	ldr	r1, [r5, #8]
 8003a26:	430b      	orrs	r3, r1
 8003a28:	61d3      	str	r3, [r2, #28]
 8003a2a:	e7c4      	b.n	80039b6 <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 8003a2c:	2002      	movs	r0, #2
 8003a2e:	e7c8      	b.n	80039c2 <HAL_TIM_IC_ConfigChannel+0x52>

08003a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a30:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a32:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a34:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a38:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a42:	6082      	str	r2, [r0, #8]
}
 8003a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003a4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d064      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0xd2>
{
 8003a54:	b510      	push	{r4, lr}
 8003a56:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003a64:	6802      	ldr	r2, [r0, #0]
 8003a66:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a68:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <HAL_TIM_ConfigClockSource+0xd8>)
 8003a6a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003a6c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003a6e:	680b      	ldr	r3, [r1, #0]
 8003a70:	2b60      	cmp	r3, #96	; 0x60
 8003a72:	d040      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0xaa>
 8003a74:	d822      	bhi.n	8003abc <HAL_TIM_ConfigClockSource+0x70>
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d047      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0xbe>
 8003a7a:	d90b      	bls.n	8003a94 <HAL_TIM_ConfigClockSource+0x48>
 8003a7c:	2b50      	cmp	r3, #80	; 0x50
 8003a7e:	d10e      	bne.n	8003a9e <HAL_TIM_ConfigClockSource+0x52>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a80:	68ca      	ldr	r2, [r1, #12]
 8003a82:	6849      	ldr	r1, [r1, #4]
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	f7ff fbc7 	bl	8003218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a8a:	2150      	movs	r1, #80	; 0x50
 8003a8c:	6820      	ldr	r0, [r4, #0]
 8003a8e:	f7ff fc3b 	bl	8003308 <TIM_ITRx_SetConfig>
      break;
 8003a92:	e004      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x52>
  switch (sClockSourceConfig->ClockSource)
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d00c      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x66>
 8003a98:	d908      	bls.n	8003aac <HAL_TIM_ConfigClockSource+0x60>
 8003a9a:	2b30      	cmp	r3, #48	; 0x30
 8003a9c:	d009      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x66>
  htim->State = HAL_TIM_STATE_READY;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003aaa:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003aac:	b10b      	cbz	r3, 8003ab2 <HAL_TIM_ConfigClockSource+0x66>
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d1f5      	bne.n	8003a9e <HAL_TIM_ConfigClockSource+0x52>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	f7ff fc27 	bl	8003308 <TIM_ITRx_SetConfig>
      break;
 8003aba:	e7f0      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x52>
  switch (sClockSourceConfig->ClockSource)
 8003abc:	2b70      	cmp	r3, #112	; 0x70
 8003abe:	d00e      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x92>
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d1eb      	bne.n	8003a9e <HAL_TIM_ConfigClockSource+0x52>
      TIM_ETR_SetConfig(htim->Instance,
 8003ac6:	68cb      	ldr	r3, [r1, #12]
 8003ac8:	684a      	ldr	r2, [r1, #4]
 8003aca:	6889      	ldr	r1, [r1, #8]
 8003acc:	6820      	ldr	r0, [r4, #0]
 8003ace:	f7ff ffaf 	bl	8003a30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ad2:	6822      	ldr	r2, [r4, #0]
 8003ad4:	6893      	ldr	r3, [r2, #8]
 8003ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ada:	6093      	str	r3, [r2, #8]
      break;
 8003adc:	e7df      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x52>
      TIM_ETR_SetConfig(htim->Instance,
 8003ade:	68cb      	ldr	r3, [r1, #12]
 8003ae0:	684a      	ldr	r2, [r1, #4]
 8003ae2:	6889      	ldr	r1, [r1, #8]
 8003ae4:	6820      	ldr	r0, [r4, #0]
 8003ae6:	f7ff ffa3 	bl	8003a30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003af2:	6093      	str	r3, [r2, #8]
      break;
 8003af4:	e7d3      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x52>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af6:	68ca      	ldr	r2, [r1, #12]
 8003af8:	6849      	ldr	r1, [r1, #4]
 8003afa:	6820      	ldr	r0, [r4, #0]
 8003afc:	f7ff fbba 	bl	8003274 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b00:	2160      	movs	r1, #96	; 0x60
 8003b02:	6820      	ldr	r0, [r4, #0]
 8003b04:	f7ff fc00 	bl	8003308 <TIM_ITRx_SetConfig>
      break;
 8003b08:	e7c9      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x52>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0a:	68ca      	ldr	r2, [r1, #12]
 8003b0c:	6849      	ldr	r1, [r1, #4]
 8003b0e:	6820      	ldr	r0, [r4, #0]
 8003b10:	f7ff fb82 	bl	8003218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b14:	2140      	movs	r1, #64	; 0x40
 8003b16:	6820      	ldr	r0, [r4, #0]
 8003b18:	f7ff fbf6 	bl	8003308 <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e7bf      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x52>
  __HAL_LOCK(htim);
 8003b1e:	2002      	movs	r0, #2
}
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	fffe0088 	.word	0xfffe0088

08003b28 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  // JSB fix. 20191115. Prevents CCxE bit getting reset momentarily, which would be a problem if any current flows into the output e.g. from a resistor.
  // Original version:
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b28:	f001 031f 	and.w	r3, r1, #31
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4099      	lsls	r1, r3
  //  TIMx->CCER &= ~tmp;
  //
  //  /* Set or reset the CCxE Bit */
  //  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
  // JSB version: !!! Not tested! !!!
  if (ChannelState)
 8003b30:	b11a      	cbz	r2, 8003b3a <TIM_CCxChannelCmd+0x12>
    TIMx->CCER |= tmp;
 8003b32:	6a03      	ldr	r3, [r0, #32]
 8003b34:	4319      	orrs	r1, r3
 8003b36:	6201      	str	r1, [r0, #32]
 8003b38:	4770      	bx	lr
  else
    TIMx->CCER &= ~tmp;
 8003b3a:	6a03      	ldr	r3, [r0, #32]
 8003b3c:	ea23 0101 	bic.w	r1, r3, r1
 8003b40:	6201      	str	r1, [r0, #32]
}
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_IC_Start_DMA>:
{
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4604      	mov	r4, r0
  if ((htim->State == HAL_TIM_STATE_BUSY))
 8003b48:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8003b4c:	b2c0      	uxtb	r0, r0
 8003b4e:	2802      	cmp	r0, #2
 8003b50:	f000 808f 	beq.w	8003c72 <HAL_TIM_IC_Start_DMA+0x12e>
 8003b54:	460d      	mov	r5, r1
  else if ((htim->State == HAL_TIM_STATE_READY))
 8003b56:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003b5a:	b2c0      	uxtb	r0, r0
 8003b5c:	2801      	cmp	r0, #1
 8003b5e:	d00a      	beq.n	8003b76 <HAL_TIM_IC_Start_DMA+0x32>
  switch (Channel)
 8003b60:	2d0c      	cmp	r5, #12
 8003b62:	d829      	bhi.n	8003bb8 <HAL_TIM_IC_Start_DMA+0x74>
 8003b64:	e8df f005 	tbb	[pc, r5]
 8003b68:	28282813 	.word	0x28282813
 8003b6c:	2828283c 	.word	0x2828283c
 8003b70:	28282852 	.word	0x28282852
 8003b74:	67          	.byte	0x67
 8003b75:	00          	.byte	0x00
    if ((pData == NULL) && (Length > 0U))
 8003b76:	fab2 f182 	clz	r1, r2
 8003b7a:	0949      	lsrs	r1, r1, #5
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf08      	it	eq
 8003b80:	2100      	moveq	r1, #0
 8003b82:	2900      	cmp	r1, #0
 8003b84:	d175      	bne.n	8003c72 <HAL_TIM_IC_Start_DMA+0x12e>
      htim->State = HAL_TIM_STATE_BUSY;
 8003b86:	2102      	movs	r1, #2
 8003b88:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 8003b8c:	e7e8      	b.n	8003b60 <HAL_TIM_IC_Start_DMA+0x1c>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003b8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b90:	4838      	ldr	r0, [pc, #224]	; (8003c74 <HAL_TIM_IC_Start_DMA+0x130>)
 8003b92:	63c8      	str	r0, [r1, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003b94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b96:	4838      	ldr	r0, [pc, #224]	; (8003c78 <HAL_TIM_IC_Start_DMA+0x134>)
 8003b98:	6408      	str	r0, [r1, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003b9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b9c:	4837      	ldr	r0, [pc, #220]	; (8003c7c <HAL_TIM_IC_Start_DMA+0x138>)
 8003b9e:	64c8      	str	r0, [r1, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8003ba0:	6821      	ldr	r1, [r4, #0]
 8003ba2:	3134      	adds	r1, #52	; 0x34
 8003ba4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003ba6:	f7fc fecb 	bl	8000940 <HAL_DMA_Start_IT>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d158      	bne.n	8003c60 <HAL_TIM_IC_Start_DMA+0x11c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003bae:	6822      	ldr	r2, [r4, #0]
 8003bb0:	68d3      	ldr	r3, [r2, #12]
 8003bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bb8:	2201      	movs	r2, #1
 8003bba:	4629      	mov	r1, r5
 8003bbc:	6820      	ldr	r0, [r4, #0]
 8003bbe:	f7ff ffb3 	bl	8003b28 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc2:	6822      	ldr	r2, [r4, #0]
 8003bc4:	6891      	ldr	r1, [r2, #8]
 8003bc6:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <HAL_TIM_IC_Start_DMA+0x13c>)
 8003bc8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bca:	2b06      	cmp	r3, #6
 8003bcc:	bf18      	it	ne
 8003bce:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8003bd2:	d04d      	beq.n	8003c70 <HAL_TIM_IC_Start_DMA+0x12c>
    __HAL_TIM_ENABLE(htim);
 8003bd4:	6813      	ldr	r3, [r2, #0]
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e048      	b.n	8003c72 <HAL_TIM_IC_Start_DMA+0x12e>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003be0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003be2:	4824      	ldr	r0, [pc, #144]	; (8003c74 <HAL_TIM_IC_Start_DMA+0x130>)
 8003be4:	63c8      	str	r0, [r1, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003be6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003be8:	4823      	ldr	r0, [pc, #140]	; (8003c78 <HAL_TIM_IC_Start_DMA+0x134>)
 8003bea:	6408      	str	r0, [r1, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003bec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003bee:	4823      	ldr	r0, [pc, #140]	; (8003c7c <HAL_TIM_IC_Start_DMA+0x138>)
 8003bf0:	64c8      	str	r0, [r1, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8003bf2:	6821      	ldr	r1, [r4, #0]
 8003bf4:	3138      	adds	r1, #56	; 0x38
 8003bf6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003bf8:	f7fc fea2 	bl	8000940 <HAL_DMA_Start_IT>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d131      	bne.n	8003c64 <HAL_TIM_IC_Start_DMA+0x120>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	68d3      	ldr	r3, [r2, #12]
 8003c04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c08:	60d3      	str	r3, [r2, #12]
      break;
 8003c0a:	e7d5      	b.n	8003bb8 <HAL_TIM_IC_Start_DMA+0x74>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003c0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c0e:	4819      	ldr	r0, [pc, #100]	; (8003c74 <HAL_TIM_IC_Start_DMA+0x130>)
 8003c10:	63c8      	str	r0, [r1, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003c12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c14:	4818      	ldr	r0, [pc, #96]	; (8003c78 <HAL_TIM_IC_Start_DMA+0x134>)
 8003c16:	6408      	str	r0, [r1, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c1a:	4818      	ldr	r0, [pc, #96]	; (8003c7c <HAL_TIM_IC_Start_DMA+0x138>)
 8003c1c:	64c8      	str	r0, [r1, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8003c1e:	6821      	ldr	r1, [r4, #0]
 8003c20:	313c      	adds	r1, #60	; 0x3c
 8003c22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003c24:	f7fc fe8c 	bl	8000940 <HAL_DMA_Start_IT>
 8003c28:	b9f0      	cbnz	r0, 8003c68 <HAL_TIM_IC_Start_DMA+0x124>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	68d3      	ldr	r3, [r2, #12]
 8003c2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c32:	60d3      	str	r3, [r2, #12]
      break;
 8003c34:	e7c0      	b.n	8003bb8 <HAL_TIM_IC_Start_DMA+0x74>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003c36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c38:	480e      	ldr	r0, [pc, #56]	; (8003c74 <HAL_TIM_IC_Start_DMA+0x130>)
 8003c3a:	63c8      	str	r0, [r1, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003c3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c3e:	480e      	ldr	r0, [pc, #56]	; (8003c78 <HAL_TIM_IC_Start_DMA+0x134>)
 8003c40:	6408      	str	r0, [r1, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003c42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c44:	480d      	ldr	r0, [pc, #52]	; (8003c7c <HAL_TIM_IC_Start_DMA+0x138>)
 8003c46:	64c8      	str	r0, [r1, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8003c48:	6821      	ldr	r1, [r4, #0]
 8003c4a:	3140      	adds	r1, #64	; 0x40
 8003c4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003c4e:	f7fc fe77 	bl	8000940 <HAL_DMA_Start_IT>
 8003c52:	b958      	cbnz	r0, 8003c6c <HAL_TIM_IC_Start_DMA+0x128>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003c54:	6822      	ldr	r2, [r4, #0]
 8003c56:	68d3      	ldr	r3, [r2, #12]
 8003c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c5c:	60d3      	str	r3, [r2, #12]
      break;
 8003c5e:	e7ab      	b.n	8003bb8 <HAL_TIM_IC_Start_DMA+0x74>
        return HAL_ERROR;
 8003c60:	2001      	movs	r0, #1
 8003c62:	e006      	b.n	8003c72 <HAL_TIM_IC_Start_DMA+0x12e>
        return HAL_ERROR;
 8003c64:	2001      	movs	r0, #1
 8003c66:	e004      	b.n	8003c72 <HAL_TIM_IC_Start_DMA+0x12e>
        return HAL_ERROR;
 8003c68:	2001      	movs	r0, #1
 8003c6a:	e002      	b.n	8003c72 <HAL_TIM_IC_Start_DMA+0x12e>
        return HAL_ERROR;
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	e000      	b.n	8003c72 <HAL_TIM_IC_Start_DMA+0x12e>
  return HAL_OK;
 8003c70:	2000      	movs	r0, #0
}
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	08003351 	.word	0x08003351
 8003c78:	08003397 	.word	0x08003397
 8003c7c:	0800357b 	.word	0x0800357b
 8003c80:	00010007 	.word	0x00010007

08003c84 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d028      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 8003c8c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	2302      	movs	r3, #2
 8003c96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c9a:	6803      	ldr	r3, [r0, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c9e:	689c      	ldr	r4, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ca0:	4e10      	ldr	r6, [pc, #64]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003ca2:	4d11      	ldr	r5, [pc, #68]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003ca4:	42ab      	cmp	r3, r5
 8003ca6:	bf18      	it	ne
 8003ca8:	42b3      	cmpne	r3, r6
 8003caa:	d103      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cb0:	684d      	ldr	r5, [r1, #4]
 8003cb2:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb8:	680d      	ldr	r5, [r1, #0]
 8003cba:	432a      	orrs	r2, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003cbc:	f024 0c80 	bic.w	ip, r4, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc0:	6889      	ldr	r1, [r1, #8]
 8003cc2:	ea41 010c 	orr.w	r1, r1, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cc8:	6803      	ldr	r3, [r0, #0]
 8003cca:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003cd8:	4618      	mov	r0, r3
}
 8003cda:	bc70      	pop	{r4, r5, r6}
 8003cdc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003cde:	2002      	movs	r0, #2
}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d03c      	beq.n	8003d6e <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 8003cf4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cfc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d02:	688a      	ldr	r2, [r1, #8]
 8003d04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d0a:	684a      	ldr	r2, [r1, #4]
 8003d0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d12:	680a      	ldr	r2, [r1, #0]
 8003d14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d1a:	690a      	ldr	r2, [r1, #16]
 8003d1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d22:	694a      	ldr	r2, [r1, #20]
 8003d24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d2a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d2e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003d32:	698a      	ldr	r2, [r1, #24]
 8003d34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003d38:	6802      	ldr	r2, [r0, #0]
 8003d3a:	4d0e      	ldr	r5, [pc, #56]	; (8003d74 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8003d3c:	4c0e      	ldr	r4, [pc, #56]	; (8003d78 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8003d3e:	42a2      	cmp	r2, r4
 8003d40:	bf18      	it	ne
 8003d42:	42aa      	cmpne	r2, r5
 8003d44:	d10c      	bne.n	8003d60 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003d46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d4a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003d4c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d54:	69cc      	ldr	r4, [r1, #28]
 8003d56:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003d58:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	6a09      	ldr	r1, [r1, #32]
 8003d5e:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d60:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d62:	2300      	movs	r3, #0
 8003d64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003d68:	4618      	mov	r0, r3
}
 8003d6a:	bc30      	pop	{r4, r5}
 8003d6c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003d6e:	2002      	movs	r0, #2
}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40010400 	.word	0x40010400

08003d7c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d7c:	4770      	bx	lr

08003d7e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d7e:	4770      	bx	lr

08003d80 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d80:	4770      	bx	lr

08003d82 <SwapBytes>:
///////////////////////////////////////////////////////////////////////////////
// Uncategorized:

uint16_t SwapBytes(uint16_t Value)
{
  return (Value >> 8) | ((Value & 0xFF) << 8);
 8003d82:	0a03      	lsrs	r3, r0, #8
 8003d84:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8003d88:	b280      	uxth	r0, r0
 8003d8a:	4770      	bx	lr

08003d8c <Clamp_uint16>:

///////////////////////////////////////////////////////////////////////////////
// Clamp:

uint16_t Clamp_uint16(uint16_t Value, uint16_t MinValue , uint16_t MaxValue)
{
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4610      	mov	r0, r2
  if (Value < MinValue)
 8003d90:	428b      	cmp	r3, r1
 8003d92:	d300      	bcc.n	8003d96 <Clamp_uint16+0xa>
 8003d94:	4619      	mov	r1, r3
    Value = MinValue;
  if (Value > MaxValue)
 8003d96:	4281      	cmp	r1, r0
 8003d98:	d800      	bhi.n	8003d9c <Clamp_uint16+0x10>
 8003d9a:	4608      	mov	r0, r1
    Value = MaxValue;
  return Value;
}
 8003d9c:	4770      	bx	lr
	...

08003da0 <ILI9341_DrawPixel_ToBackBuffer>:
    ILI9341_CSX_Low();
}

static void ILI9341_DrawPixel_ToBackBuffer(int16_t X, int16_t Y, uint16_t Color)
{
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8003da0:	fa1f fc80 	uxth.w	ip, r0
 8003da4:	0fcb      	lsrs	r3, r1, #31
 8003da6:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
 8003daa:	bf88      	it	hi
 8003dac:	f043 0301 	orrhi.w	r3, r3, #1
 8003db0:	b953      	cbnz	r3, 8003dc8 <ILI9341_DrawPixel_ToBackBuffer+0x28>
 8003db2:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 8003db6:	da07      	bge.n	8003dc8 <ILI9341_DrawPixel_ToBackBuffer+0x28>
    return;

  pBackBuffer[X + Y * ILI9341_Width] = Color;
 8003db8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8003dbc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003dc0:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <ILI9341_DrawPixel_ToBackBuffer+0x2c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000484 	.word	0x20000484

08003dd0 <IsNonPrintingChar>:
  return pFont->yAdvance;
}

static uint8_t IsNonPrintingChar(uint8_t Ch)
{
  return ((Ch < pFont->first) || (Ch > pFont->last));
 8003dd0:	4b06      	ldr	r3, [pc, #24]	; (8003dec <IsNonPrintingChar+0x1c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	7a1a      	ldrb	r2, [r3, #8]
 8003dd6:	4282      	cmp	r2, r0
 8003dd8:	d804      	bhi.n	8003de4 <IsNonPrintingChar+0x14>
 8003dda:	7a5b      	ldrb	r3, [r3, #9]
 8003ddc:	4283      	cmp	r3, r0
 8003dde:	d203      	bcs.n	8003de8 <IsNonPrintingChar+0x18>
 8003de0:	2001      	movs	r0, #1
 8003de2:	4770      	bx	lr
 8003de4:	2001      	movs	r0, #1
 8003de6:	4770      	bx	lr
 8003de8:	2000      	movs	r0, #0
}
 8003dea:	4770      	bx	lr
 8003dec:	20000488 	.word	0x20000488

08003df0 <ILI9341_Write8>:
{
 8003df0:	b500      	push	{lr}
 8003df2:	b087      	sub	sp, #28
 8003df4:	f88d 000f 	strb.w	r0, [sp, #15]
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8003df8:	2364      	movs	r3, #100	; 0x64
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f10d 0217 	add.w	r2, sp, #23
 8003e02:	f10d 010f 	add.w	r1, sp, #15
 8003e06:	4805      	ldr	r0, [pc, #20]	; (8003e1c <ILI9341_Write8+0x2c>)
 8003e08:	6800      	ldr	r0, [r0, #0]
 8003e0a:	f7fe fec6 	bl	8002b9a <HAL_SPI_TransmitReceive>
 8003e0e:	b910      	cbnz	r0, 8003e16 <ILI9341_Write8+0x26>
}
 8003e10:	b007      	add	sp, #28
 8003e12:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003e16:	f001 f881 	bl	8004f1c <Error_Handler>
}
 8003e1a:	e7f9      	b.n	8003e10 <ILI9341_Write8+0x20>
 8003e1c:	2000048c 	.word	0x2000048c

08003e20 <ILI9341_Write16>:
{
 8003e20:	b510      	push	{r4, lr}
 8003e22:	4604      	mov	r4, r0
  ILI9341_Write8(Value >> 8);
 8003e24:	0a00      	lsrs	r0, r0, #8
 8003e26:	f7ff ffe3 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(Value);
 8003e2a:	b2e0      	uxtb	r0, r4
 8003e2c:	f7ff ffe0 	bl	8003df0 <ILI9341_Write8>
}
 8003e30:	bd10      	pop	{r4, pc}

08003e32 <ILI9341_Write32>:
{
 8003e32:	b510      	push	{r4, lr}
 8003e34:	4604      	mov	r4, r0
  ILI9341_Write16(Value >> 16);
 8003e36:	0c00      	lsrs	r0, r0, #16
 8003e38:	f7ff fff2 	bl	8003e20 <ILI9341_Write16>
  ILI9341_Write16(Value);
 8003e3c:	b2a0      	uxth	r0, r4
 8003e3e:	f7ff ffef 	bl	8003e20 <ILI9341_Write16>
}
 8003e42:	bd10      	pop	{r4, pc}

08003e44 <ILI9341_WriteCommand>:
{
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4604      	mov	r4, r0
  ILI9341_DC_Low();
 8003e48:	4d07      	ldr	r5, [pc, #28]	; (8003e68 <ILI9341_WriteCommand+0x24>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2104      	movs	r1, #4
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f7fc ffa2 	bl	8000d98 <HAL_GPIO_WritePin>
  ILI9341_Write8(Value);
 8003e54:	b2e0      	uxtb	r0, r4
 8003e56:	f7ff ffcb 	bl	8003df0 <ILI9341_Write8>
  ILI9341_DC_High();
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	2104      	movs	r1, #4
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f7fc ff9a 	bl	8000d98 <HAL_GPIO_WritePin>
}
 8003e64:	bd38      	pop	{r3, r4, r5, pc}
 8003e66:	bf00      	nop
 8003e68:	40020800 	.word	0x40020800

08003e6c <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>:
{
 8003e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e70:	b083      	sub	sp, #12
 8003e72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  if ((i_Width == 0) || (i_Height == 0))
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bf18      	it	ne
 8003e7a:	2a00      	cmpne	r2, #0
 8003e7c:	d102      	bne.n	8003e84 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x18>
}
 8003e7e:	b003      	add	sp, #12
 8003e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e84:	4607      	mov	r7, r0
 8003e86:	468b      	mov	fp, r1
 8003e88:	4690      	mov	r8, r2
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003e8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4658      	mov	r0, fp
 8003e92:	f7ff ff7b 	bl	8003d8c <Clamp_uint16>
 8003e96:	4682      	mov	sl, r0
 8003e98:	e011      	b.n	8003ebe <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x52>
      pLine[X] = *pPixel++;
 8003e9a:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 8003e9e:	f834 2b02 	ldrh.w	r2, [r4], #2
 8003ea2:	f829 2003 	strh.w	r2, [r9, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003ea6:	3501      	adds	r5, #1
 8003ea8:	eb08 0007 	add.w	r0, r8, r7
 8003eac:	22f0      	movs	r2, #240	; 0xf0
 8003eae:	2100      	movs	r1, #0
 8003eb0:	b280      	uxth	r0, r0
 8003eb2:	f7ff ff6b 	bl	8003d8c <Clamp_uint16>
 8003eb6:	42a8      	cmp	r0, r5
 8003eb8:	d8ef      	bhi.n	8003e9a <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x2e>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003eba:	f10a 0a01 	add.w	sl, sl, #1
 8003ebe:	9b01      	ldr	r3, [sp, #4]
 8003ec0:	eb03 000b 	add.w	r0, r3, fp
 8003ec4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ec8:	2100      	movs	r1, #0
 8003eca:	b280      	uxth	r0, r0
 8003ecc:	f7ff ff5e 	bl	8003d8c <Clamp_uint16>
 8003ed0:	4550      	cmp	r0, sl
 8003ed2:	d9d4      	bls.n	8003e7e <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x12>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x84>)
 8003ed6:	f8d3 9000 	ldr.w	r9, [r3]
 8003eda:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8003ede:	0176      	lsls	r6, r6, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003ee0:	22f0      	movs	r2, #240	; 0xf0
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f7ff ff51 	bl	8003d8c <Clamp_uint16>
 8003eea:	4605      	mov	r5, r0
 8003eec:	e7dc      	b.n	8003ea8 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x3c>
 8003eee:	bf00      	nop
 8003ef0:	20000484 	.word	0x20000484

08003ef4 <ILI9341_DrawPixels_MSBFirst_ToDisplay>:
{
 8003ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef8:	9d06      	ldr	r5, [sp, #24]
  if ((Width == 0) || (Height == 0))
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bf18      	it	ne
 8003efe:	2a00      	cmpne	r2, #0
 8003f00:	d101      	bne.n	8003f06 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x12>
}
 8003f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f06:	4680      	mov	r8, r0
 8003f08:	460c      	mov	r4, r1
 8003f0a:	4616      	mov	r6, r2
 8003f0c:	461f      	mov	r7, r3
  ILI9341_CSX_Low();
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2102      	movs	r1, #2
 8003f12:	4829      	ldr	r0, [pc, #164]	; (8003fb8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8003f14:	f7fc ff40 	bl	8000d98 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8003f18:	202a      	movs	r0, #42	; 0x2a
 8003f1a:	f7ff ff93 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8003f1e:	4640      	mov	r0, r8
 8003f20:	f7ff ff7e 	bl	8003e20 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8003f24:	eb06 0008 	add.w	r0, r6, r8
 8003f28:	b280      	uxth	r0, r0
 8003f2a:	3801      	subs	r0, #1
 8003f2c:	b280      	uxth	r0, r0
 8003f2e:	f7ff ff77 	bl	8003e20 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8003f32:	202b      	movs	r0, #43	; 0x2b
 8003f34:	f7ff ff86 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f7ff ff71 	bl	8003e20 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8003f3e:	1938      	adds	r0, r7, r4
 8003f40:	b280      	uxth	r0, r0
 8003f42:	3801      	subs	r0, #1
 8003f44:	b280      	uxth	r0, r0
 8003f46:	f7ff ff6b 	bl	8003e20 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2C); // Memory write.
 8003f4a:	202c      	movs	r0, #44	; 0x2c
 8003f4c:	f7ff ff7a 	bl	8003e44 <ILI9341_WriteCommand>
  uint32_t NumBytes = Width * Height * sizeof(uint16_t);
 8003f50:	fb07 f306 	mul.w	r3, r7, r6
 8003f54:	005b      	lsls	r3, r3, #1
    uint32_t op_addr = (uint32_t) addr;
 8003f56:	462a      	mov	r2, r5
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f58:	f3bf 8f4f 	dsb	sy
}
 8003f5c:	e004      	b.n	8003f68 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x74>
      SCB->DCCMVAC = op_addr;
 8003f5e:	4917      	ldr	r1, [pc, #92]	; (8003fbc <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc8>)
 8003f60:	f8c1 2268 	str.w	r2, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8003f64:	3220      	adds	r2, #32
      op_size -=           linesize;
 8003f66:	3b20      	subs	r3, #32
    while (op_size > 0) {
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	dcf8      	bgt.n	8003f5e <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x6a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f70:	f3bf 8f6f 	isb	sy
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003f74:	2400      	movs	r4, #0
 8003f76:	e00b      	b.n	8003f90 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x9c>
    pPixels += Width;
 8003f78:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8003f7c:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d0f7      	beq.n	8003f7c <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x88>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003f8c:	3401      	adds	r4, #1
 8003f8e:	b224      	sxth	r4, r4
 8003f90:	42a7      	cmp	r7, r4
 8003f92:	dd0b      	ble.n	8003fac <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xb8>
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8003f94:	0072      	lsls	r2, r6, #1
 8003f96:	b292      	uxth	r2, r2
 8003f98:	4629      	mov	r1, r5
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	f7fe ff69 	bl	8002e74 <HAL_SPI_Transmit_DMA>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d0e8      	beq.n	8003f78 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
      Error_Handler();
 8003fa6:	f000 ffb9 	bl	8004f1c <Error_Handler>
 8003faa:	e7e5      	b.n	8003f78 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
  ILI9341_CSX_High();
 8003fac:	2201      	movs	r2, #1
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4801      	ldr	r0, [pc, #4]	; (8003fb8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8003fb2:	f7fc fef1 	bl	8000d98 <HAL_GPIO_WritePin>
 8003fb6:	e7a4      	b.n	8003f02 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xe>
 8003fb8:	40020800 	.word	0x40020800
 8003fbc:	e000ed00 	.word	0xe000ed00
 8003fc0:	2000048c 	.word	0x2000048c

08003fc4 <ILI9341_DrawBar_ToDisplay>:
  if ((Width == 0) || (Height == 0))
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf18      	it	ne
 8003fc8:	2a00      	cmpne	r2, #0
 8003fca:	d100      	bne.n	8003fce <ILI9341_DrawBar_ToDisplay+0xa>
 8003fcc:	4770      	bx	lr
{
 8003fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	4615      	mov	r5, r2
 8003fd6:	461e      	mov	r6, r3
  ILI9341_CSX_Low();
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2102      	movs	r1, #2
 8003fdc:	482c      	ldr	r0, [pc, #176]	; (8004090 <ILI9341_DrawBar_ToDisplay+0xcc>)
 8003fde:	f7fc fedb 	bl	8000d98 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8003fe2:	202a      	movs	r0, #42	; 0x2a
 8003fe4:	f7ff ff2e 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f7ff ff19 	bl	8003e20 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8003fee:	19e8      	adds	r0, r5, r7
 8003ff0:	b280      	uxth	r0, r0
 8003ff2:	3801      	subs	r0, #1
 8003ff4:	b280      	uxth	r0, r0
 8003ff6:	f7ff ff13 	bl	8003e20 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8003ffa:	202b      	movs	r0, #43	; 0x2b
 8003ffc:	f7ff ff22 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8004000:	4620      	mov	r0, r4
 8004002:	f7ff ff0d 	bl	8003e20 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8004006:	1930      	adds	r0, r6, r4
 8004008:	b280      	uxth	r0, r0
 800400a:	3801      	subs	r0, #1
 800400c:	b280      	uxth	r0, r0
 800400e:	f7ff ff07 	bl	8003e20 <ILI9341_Write16>
  uint16_t Color_MSBFirst = SwapBytes(Color);
 8004012:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8004016:	f7ff feb4 	bl	8003d82 <SwapBytes>
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 800401a:	2300      	movs	r3, #0
 800401c:	e004      	b.n	8004028 <ILI9341_DrawBar_ToDisplay+0x64>
    ColumnColors[ColumnIndex] = Color_MSBFirst;
 800401e:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8004020:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8004024:	3301      	adds	r3, #1
 8004026:	b21b      	sxth	r3, r3
 8004028:	42ab      	cmp	r3, r5
 800402a:	dbf8      	blt.n	800401e <ILI9341_DrawBar_ToDisplay+0x5a>
  ILI9341_WriteCommand(0x2C); // Memory write.
 800402c:	202c      	movs	r0, #44	; 0x2c
 800402e:	f7ff ff09 	bl	8003e44 <ILI9341_WriteCommand>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8004032:	2400      	movs	r4, #0
 8004034:	e01b      	b.n	800406e <ILI9341_DrawBar_ToDisplay+0xaa>
      SCB->DCCMVAC = op_addr;
 8004036:	4818      	ldr	r0, [pc, #96]	; (8004098 <ILI9341_DrawBar_ToDisplay+0xd4>)
 8004038:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800403c:	3120      	adds	r1, #32
      op_size -=           linesize;
 800403e:	3b20      	subs	r3, #32
    while (op_size > 0) {
 8004040:	2b00      	cmp	r3, #0
 8004042:	dcf8      	bgt.n	8004036 <ILI9341_DrawBar_ToDisplay+0x72>
  __ASM volatile ("dsb 0xF":::"memory");
 8004044:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004048:	f3bf 8f6f 	isb	sy
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 800404c:	b292      	uxth	r2, r2
 800404e:	4911      	ldr	r1, [pc, #68]	; (8004094 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <ILI9341_DrawBar_ToDisplay+0xd8>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	f7fe ff0e 	bl	8002e74 <HAL_SPI_Transmit_DMA>
 8004058:	b988      	cbnz	r0, 800407e <ILI9341_DrawBar_ToDisplay+0xba>
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <ILI9341_DrawBar_ToDisplay+0xd8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d0f7      	beq.n	800405a <ILI9341_DrawBar_ToDisplay+0x96>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 800406a:	3401      	adds	r4, #1
 800406c:	b224      	sxth	r4, r4
 800406e:	42b4      	cmp	r4, r6
 8004070:	da08      	bge.n	8004084 <ILI9341_DrawBar_ToDisplay+0xc0>
    uint32_t NumBytes = Width * 2;
 8004072:	006a      	lsls	r2, r5, #1
    uint32_t op_addr = (uint32_t) addr;
 8004074:	4907      	ldr	r1, [pc, #28]	; (8004094 <ILI9341_DrawBar_ToDisplay+0xd0>)
  __ASM volatile ("dsb 0xF":::"memory");
 8004076:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 800407a:	4613      	mov	r3, r2
}
 800407c:	e7e0      	b.n	8004040 <ILI9341_DrawBar_ToDisplay+0x7c>
      Error_Handler();
 800407e:	f000 ff4d 	bl	8004f1c <Error_Handler>
 8004082:	e7ea      	b.n	800405a <ILI9341_DrawBar_ToDisplay+0x96>
  ILI9341_CSX_High();
 8004084:	2201      	movs	r2, #1
 8004086:	2102      	movs	r1, #2
 8004088:	4801      	ldr	r0, [pc, #4]	; (8004090 <ILI9341_DrawBar_ToDisplay+0xcc>)
 800408a:	f7fc fe85 	bl	8000d98 <HAL_GPIO_WritePin>
}
 800408e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004090:	40020800 	.word	0x40020800
 8004094:	20000200 	.word	0x20000200
 8004098:	e000ed00 	.word	0xe000ed00
 800409c:	2000048c 	.word	0x2000048c

080040a0 <ILI9341_SetDefaultState>:
  TextColor = TextColor_Default;
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <ILI9341_SetDefaultState+0x18>)
 80040a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040a6:	801a      	strh	r2, [r3, #0]
  TextBackgroundColor = TextBackgroundColor_Default;
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <ILI9341_SetDefaultState+0x1c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	801a      	strh	r2, [r3, #0]
  TextDrawMode = TextDrawMode_Default;
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <ILI9341_SetDefaultState+0x20>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
}
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000008 	.word	0x20000008
 80040bc:	20000480 	.word	0x20000480
 80040c0:	2000000a 	.word	0x2000000a

080040c4 <ILI9341_Initialize>:
{
 80040c4:	b510      	push	{r4, lr}
  phspi = i_phspi;
 80040c6:	4ba7      	ldr	r3, [pc, #668]	; (8004364 <ILI9341_Initialize+0x2a0>)
 80040c8:	6018      	str	r0, [r3, #0]
  UseBackBuffer = i_UseBackBuffer;
 80040ca:	b2c9      	uxtb	r1, r1
 80040cc:	4ba6      	ldr	r3, [pc, #664]	; (8004368 <ILI9341_Initialize+0x2a4>)
 80040ce:	7019      	strb	r1, [r3, #0]
  if (UseBackBuffer)
 80040d0:	2900      	cmp	r1, #0
 80040d2:	f040 8139 	bne.w	8004348 <ILI9341_Initialize+0x284>
  ILI9341_SetDefaultState();
 80040d6:	f7ff ffe3 	bl	80040a0 <ILI9341_SetDefaultState>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_RESET);
 80040da:	4ca4      	ldr	r4, [pc, #656]	; (800436c <ILI9341_Initialize+0x2a8>)
 80040dc:	2200      	movs	r2, #0
 80040de:	2101      	movs	r1, #1
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7fc fe59 	bl	8000d98 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f7fc fac8 	bl	800067c <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_SET);
 80040ec:	2201      	movs	r2, #1
 80040ee:	4611      	mov	r1, r2
 80040f0:	4620      	mov	r0, r4
 80040f2:	f7fc fe51 	bl	8000d98 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80040f6:	2005      	movs	r0, #5
 80040f8:	f7fc fac0 	bl	800067c <HAL_Delay>
  ILI9341_CSX_Low();
 80040fc:	2200      	movs	r2, #0
 80040fe:	2102      	movs	r1, #2
 8004100:	4620      	mov	r0, r4
 8004102:	f7fc fe49 	bl	8000d98 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0xEF);
 8004106:	f06f 0010 	mvn.w	r0, #16
 800410a:	f7ff fe9b 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x03);
 800410e:	2003      	movs	r0, #3
 8004110:	f7ff fe6e 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x80);
 8004114:	2080      	movs	r0, #128	; 0x80
 8004116:	f7ff fe6b 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 800411a:	2002      	movs	r0, #2
 800411c:	f7ff fe68 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERB);
 8004120:	f06f 0030 	mvn.w	r0, #48	; 0x30
 8004124:	f7ff fe8e 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8004128:	2000      	movs	r0, #0
 800412a:	f7ff fe61 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0XC1);
 800412e:	20c1      	movs	r0, #193	; 0xc1
 8004130:	f7ff fe5e 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0X30);
 8004134:	2030      	movs	r0, #48	; 0x30
 8004136:	f7ff fe5b 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWER_SEQ);
 800413a:	f06f 0012 	mvn.w	r0, #18
 800413e:	f7ff fe81 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x64);
 8004142:	2064      	movs	r0, #100	; 0x64
 8004144:	f7ff fe54 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8004148:	2003      	movs	r0, #3
 800414a:	f7ff fe51 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0X12);
 800414e:	2012      	movs	r0, #18
 8004150:	f7ff fe4e 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0X81);
 8004154:	2081      	movs	r0, #129	; 0x81
 8004156:	f7ff fe4b 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCA);
 800415a:	f06f 0017 	mvn.w	r0, #23
 800415e:	f7ff fe71 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x85);
 8004162:	2085      	movs	r0, #133	; 0x85
 8004164:	f7ff fe44 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8004168:	2000      	movs	r0, #0
 800416a:	f7ff fe41 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x78);
 800416e:	2078      	movs	r0, #120	; 0x78
 8004170:	f7ff fe3e 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERA);
 8004174:	f06f 0034 	mvn.w	r0, #52	; 0x34
 8004178:	f7ff fe64 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x39);
 800417c:	2039      	movs	r0, #57	; 0x39
 800417e:	f7ff fe37 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x2C);
 8004182:	202c      	movs	r0, #44	; 0x2c
 8004184:	f7ff fe34 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8004188:	2000      	movs	r0, #0
 800418a:	f7ff fe31 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x34);
 800418e:	2034      	movs	r0, #52	; 0x34
 8004190:	f7ff fe2e 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8004194:	2002      	movs	r0, #2
 8004196:	f7ff fe2b 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_PRC);
 800419a:	f06f 0008 	mvn.w	r0, #8
 800419e:	f7ff fe51 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x20);
 80041a2:	2020      	movs	r0, #32
 80041a4:	f7ff fe24 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCB);
 80041a8:	f06f 0015 	mvn.w	r0, #21
 80041ac:	f7ff fe4a 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 80041b0:	2000      	movs	r0, #0
 80041b2:	f7ff fe1d 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7ff fe1a 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR1); // Power control
 80041bc:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 80041c0:	f7ff fe40 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x23); // VRH=[5:0]
 80041c4:	2023      	movs	r0, #35	; 0x23
 80041c6:	f7ff fe13 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR2); // Power control
 80041ca:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 80041ce:	f7ff fe39 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x10); // BT=[3:0]
 80041d2:	2010      	movs	r0, #16
 80041d4:	f7ff fe0c 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR1); // VCOM control
 80041d8:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 80041dc:	f7ff fe32 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x3e); // VMH=[6:0]
 80041e0:	203e      	movs	r0, #62	; 0x3e
 80041e2:	f7ff fe05 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x28); // VML=[6:0]
 80041e6:	2028      	movs	r0, #40	; 0x28
 80041e8:	f7ff fe02 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR2); // VCOM control 2
 80041ec:	f06f 0038 	mvn.w	r0, #56	; 0x38
 80041f0:	f7ff fe28 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x86); // VMF=[6:0]
 80041f4:	2086      	movs	r0, #134	; 0x86
 80041f6:	f7ff fdfb 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_MADCTL); // Memory Access Control
 80041fa:	2036      	movs	r0, #54	; 0x36
 80041fc:	f7ff fe22 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x48);
 8004200:	2048      	movs	r0, #72	; 0x48
 8004202:	f7ff fdf5 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VSCRSADD); // Vertical scroll
 8004206:	2037      	movs	r0, #55	; 0x37
 8004208:	f7ff fe1c 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write16(0); // Zero
 800420c:	2000      	movs	r0, #0
 800420e:	f7ff fe07 	bl	8003e20 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PIXFMT);
 8004212:	203a      	movs	r0, #58	; 0x3a
 8004214:	f7ff fe16 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x55); // DPI=[6:4] DBI=[2:0]
 8004218:	2055      	movs	r0, #85	; 0x55
 800421a:	f7ff fde9 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_FRMCTR1);
 800421e:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 8004222:	f7ff fe0f 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8004226:	2000      	movs	r0, #0
 8004228:	f7ff fde2 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x18);
 800422c:	2018      	movs	r0, #24
 800422e:	f7ff fddf 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_DFUNCTR); // Display Function Control
 8004232:	f06f 0049 	mvn.w	r0, #73	; 0x49
 8004236:	f7ff fe05 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x08);
 800423a:	2008      	movs	r0, #8
 800423c:	f7ff fdd8 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x82);
 8004240:	2082      	movs	r0, #130	; 0x82
 8004242:	f7ff fdd5 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x27);
 8004246:	2027      	movs	r0, #39	; 0x27
 8004248:	f7ff fdd2 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(0xF2); // 3Gamma
 800424c:	f06f 000d 	mvn.w	r0, #13
 8004250:	f7ff fdf8 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00); // Disable
 8004254:	2000      	movs	r0, #0
 8004256:	f7ff fdcb 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GAMMASET); // Gamma curve selected
 800425a:	2026      	movs	r0, #38	; 0x26
 800425c:	f7ff fdf2 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x01);
 8004260:	2001      	movs	r0, #1
 8004262:	f7ff fdc5 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRP1); // Set Gamma
 8004266:	f06f 001f 	mvn.w	r0, #31
 800426a:	f7ff fdeb 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x0F);
 800426e:	200f      	movs	r0, #15
 8004270:	f7ff fdbe 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8004274:	2031      	movs	r0, #49	; 0x31
 8004276:	f7ff fdbb 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x2B);
 800427a:	202b      	movs	r0, #43	; 0x2b
 800427c:	f7ff fdb8 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8004280:	200c      	movs	r0, #12
 8004282:	f7ff fdb5 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8004286:	200e      	movs	r0, #14
 8004288:	f7ff fdb2 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 800428c:	2008      	movs	r0, #8
 800428e:	f7ff fdaf 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x4E);
 8004292:	204e      	movs	r0, #78	; 0x4e
 8004294:	f7ff fdac 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0xF1);
 8004298:	20f1      	movs	r0, #241	; 0xf1
 800429a:	f7ff fda9 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x37);
 800429e:	2037      	movs	r0, #55	; 0x37
 80042a0:	f7ff fda6 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 80042a4:	2007      	movs	r0, #7
 80042a6:	f7ff fda3 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x10);
 80042aa:	2010      	movs	r0, #16
 80042ac:	f7ff fda0 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 80042b0:	2003      	movs	r0, #3
 80042b2:	f7ff fd9d 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80042b6:	200e      	movs	r0, #14
 80042b8:	f7ff fd9a 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x09);
 80042bc:	2009      	movs	r0, #9
 80042be:	f7ff fd97 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80042c2:	2000      	movs	r0, #0
 80042c4:	f7ff fd94 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRN1); // Set Gamma
 80042c8:	f06f 001e 	mvn.w	r0, #30
 80042cc:	f7ff fdba 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 80042d0:	2000      	movs	r0, #0
 80042d2:	f7ff fd8d 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80042d6:	200e      	movs	r0, #14
 80042d8:	f7ff fd8a 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x14);
 80042dc:	2014      	movs	r0, #20
 80042de:	f7ff fd87 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x03);
 80042e2:	2003      	movs	r0, #3
 80042e4:	f7ff fd84 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x11);
 80042e8:	2011      	movs	r0, #17
 80042ea:	f7ff fd81 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x07);
 80042ee:	2007      	movs	r0, #7
 80042f0:	f7ff fd7e 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 80042f4:	2031      	movs	r0, #49	; 0x31
 80042f6:	f7ff fd7b 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0xC1);
 80042fa:	20c1      	movs	r0, #193	; 0xc1
 80042fc:	f7ff fd78 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x48);
 8004300:	2048      	movs	r0, #72	; 0x48
 8004302:	f7ff fd75 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8004306:	2008      	movs	r0, #8
 8004308:	f7ff fd72 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 800430c:	200f      	movs	r0, #15
 800430e:	f7ff fd6f 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8004312:	200c      	movs	r0, #12
 8004314:	f7ff fd6c 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8004318:	2031      	movs	r0, #49	; 0x31
 800431a:	f7ff fd69 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x36);
 800431e:	2036      	movs	r0, #54	; 0x36
 8004320:	f7ff fd66 	bl	8003df0 <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8004324:	200f      	movs	r0, #15
 8004326:	f7ff fd63 	bl	8003df0 <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_SLPOUT); // Exit sleep
 800432a:	2011      	movs	r0, #17
 800432c:	f7ff fd8a 	bl	8003e44 <ILI9341_WriteCommand>
  HAL_Delay(120);
 8004330:	2078      	movs	r0, #120	; 0x78
 8004332:	f7fc f9a3 	bl	800067c <HAL_Delay>
  ILI9341_WriteCommand(ILI9341_DISPON); // Display on
 8004336:	2029      	movs	r0, #41	; 0x29
 8004338:	f7ff fd84 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_CSX_High();
 800433c:	2201      	movs	r2, #1
 800433e:	2102      	movs	r1, #2
 8004340:	4620      	mov	r0, r4
 8004342:	f7fc fd29 	bl	8000d98 <HAL_GPIO_WritePin>
}
 8004346:	bd10      	pop	{r4, pc}
    pBackBuffer = calloc(1, ILI9341_Width * ILI9341_Height * sizeof(uint16_t));
 8004348:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 800434c:	2001      	movs	r0, #1
 800434e:	f001 fb21 	bl	8005994 <calloc>
 8004352:	4b07      	ldr	r3, [pc, #28]	; (8004370 <ILI9341_Initialize+0x2ac>)
 8004354:	6018      	str	r0, [r3, #0]
    if (!pBackBuffer)
 8004356:	2800      	cmp	r0, #0
 8004358:	f47f aebd 	bne.w	80040d6 <ILI9341_Initialize+0x12>
      Error_Handler();
 800435c:	f000 fdde 	bl	8004f1c <Error_Handler>
 8004360:	e6b9      	b.n	80040d6 <ILI9341_Initialize+0x12>
 8004362:	bf00      	nop
 8004364:	2000048c 	.word	0x2000048c
 8004368:	20000482 	.word	0x20000482
 800436c:	40020800 	.word	0x40020800
 8004370:	20000484 	.word	0x20000484

08004374 <ILI9341_SetAddrWindow>:
{
 8004374:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 8004378:	4681      	mov	r9, r0
 800437a:	460f      	mov	r7, r1
 800437c:	4616      	mov	r6, r2
 800437e:	461c      	mov	r4, r3
 8004380:	f99d 8018 	ldrsb.w	r8, [sp, #24]
  if (UseCS)
 8004384:	f1b8 0f00 	cmp.w	r8, #0
 8004388:	d11b      	bne.n	80043c2 <ILI9341_SetAddrWindow+0x4e>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 800438a:	444e      	add	r6, r9
 800438c:	3e01      	subs	r6, #1
 800438e:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 8004392:	443c      	add	r4, r7
 8004394:	3c01      	subs	r4, #1
 8004396:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 800439a:	202a      	movs	r0, #42	; 0x2a
 800439c:	f7ff fd52 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write32(xa);
 80043a0:	4630      	mov	r0, r6
 80043a2:	f7ff fd46 	bl	8003e32 <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_PASET); // Row addr set
 80043a6:	202b      	movs	r0, #43	; 0x2b
 80043a8:	f7ff fd4c 	bl	8003e44 <ILI9341_WriteCommand>
  ILI9341_Write32(ya);
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7ff fd40 	bl	8003e32 <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_RAMWR); // Write to RAM
 80043b2:	202c      	movs	r0, #44	; 0x2c
 80043b4:	f7ff fd46 	bl	8003e44 <ILI9341_WriteCommand>
  if (UseCS)
 80043b8:	f1b8 0f00 	cmp.w	r8, #0
 80043bc:	d107      	bne.n	80043ce <ILI9341_SetAddrWindow+0x5a>
}
 80043be:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    ILI9341_CSX_Low();
 80043c2:	2200      	movs	r2, #0
 80043c4:	2102      	movs	r1, #2
 80043c6:	4805      	ldr	r0, [pc, #20]	; (80043dc <ILI9341_SetAddrWindow+0x68>)
 80043c8:	f7fc fce6 	bl	8000d98 <HAL_GPIO_WritePin>
 80043cc:	e7dd      	b.n	800438a <ILI9341_SetAddrWindow+0x16>
    ILI9341_CSX_High();
 80043ce:	2201      	movs	r2, #1
 80043d0:	2102      	movs	r1, #2
 80043d2:	4802      	ldr	r0, [pc, #8]	; (80043dc <ILI9341_SetAddrWindow+0x68>)
 80043d4:	f7fc fce0 	bl	8000d98 <HAL_GPIO_WritePin>
}
 80043d8:	e7f1      	b.n	80043be <ILI9341_SetAddrWindow+0x4a>
 80043da:	bf00      	nop
 80043dc:	40020800 	.word	0x40020800

080043e0 <ILI9341_DrawPixel_ToDisplay>:
{
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	b083      	sub	sp, #12
 80043e4:	4604      	mov	r4, r0
 80043e6:	460d      	mov	r5, r1
 80043e8:	4616      	mov	r6, r2
  if (UseCS)
 80043ea:	461f      	mov	r7, r3
 80043ec:	b95b      	cbnz	r3, 8004406 <ILI9341_DrawPixel_ToDisplay+0x26>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 80043ee:	b2a0      	uxth	r0, r4
 80043f0:	0feb      	lsrs	r3, r5, #31
 80043f2:	28ef      	cmp	r0, #239	; 0xef
 80043f4:	bf88      	it	hi
 80043f6:	f043 0301 	orrhi.w	r3, r3, #1
 80043fa:	b913      	cbnz	r3, 8004402 <ILI9341_DrawPixel_ToDisplay+0x22>
 80043fc:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 8004400:	db07      	blt.n	8004412 <ILI9341_DrawPixel_ToDisplay+0x32>
}
 8004402:	b003      	add	sp, #12
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ILI9341_CSX_Low();
 8004406:	2200      	movs	r2, #0
 8004408:	2102      	movs	r1, #2
 800440a:	480a      	ldr	r0, [pc, #40]	; (8004434 <ILI9341_DrawPixel_ToDisplay+0x54>)
 800440c:	f7fc fcc4 	bl	8000d98 <HAL_GPIO_WritePin>
 8004410:	e7ed      	b.n	80043ee <ILI9341_DrawPixel_ToDisplay+0xe>
  ILI9341_SetAddrWindow(X, Y, 1, 1, 0);
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	2301      	movs	r3, #1
 8004416:	461a      	mov	r2, r3
 8004418:	b2a9      	uxth	r1, r5
 800441a:	f7ff ffab 	bl	8004374 <ILI9341_SetAddrWindow>
  ILI9341_Write16(Color);
 800441e:	4630      	mov	r0, r6
 8004420:	f7ff fcfe 	bl	8003e20 <ILI9341_Write16>
  if (UseCS)
 8004424:	2f00      	cmp	r7, #0
 8004426:	d0ec      	beq.n	8004402 <ILI9341_DrawPixel_ToDisplay+0x22>
    ILI9341_CSX_Low();
 8004428:	2200      	movs	r2, #0
 800442a:	2102      	movs	r1, #2
 800442c:	4801      	ldr	r0, [pc, #4]	; (8004434 <ILI9341_DrawPixel_ToDisplay+0x54>)
 800442e:	f7fc fcb3 	bl	8000d98 <HAL_GPIO_WritePin>
 8004432:	e7e6      	b.n	8004402 <ILI9341_DrawPixel_ToDisplay+0x22>
 8004434:	40020800 	.word	0x40020800

08004438 <ILI9341_DrawPixel>:
{
 8004438:	b510      	push	{r4, lr}
  if (UseBackBuffer)
 800443a:	4c04      	ldr	r4, [pc, #16]	; (800444c <ILI9341_DrawPixel+0x14>)
 800443c:	7824      	ldrb	r4, [r4, #0]
 800443e:	b114      	cbz	r4, 8004446 <ILI9341_DrawPixel+0xe>
    ILI9341_DrawPixel_ToBackBuffer(X, Y, Color);
 8004440:	f7ff fcae 	bl	8003da0 <ILI9341_DrawPixel_ToBackBuffer>
}
 8004444:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixel_ToDisplay(X, Y, Color, UseCS);
 8004446:	f7ff ffcb 	bl	80043e0 <ILI9341_DrawPixel_ToDisplay>
}
 800444a:	e7fb      	b.n	8004444 <ILI9341_DrawPixel+0xc>
 800444c:	20000482 	.word	0x20000482

08004450 <ILI9341_DrawPixels_MSBFirst>:
{
 8004450:	b510      	push	{r4, lr}
 8004452:	b082      	sub	sp, #8
  if (UseBackBuffer)
 8004454:	4c06      	ldr	r4, [pc, #24]	; (8004470 <ILI9341_DrawPixels_MSBFirst+0x20>)
 8004456:	7824      	ldrb	r4, [r4, #0]
 8004458:	b12c      	cbz	r4, 8004466 <ILI9341_DrawPixels_MSBFirst+0x16>
    ILI9341_DrawPixels_MSBFirst_ToBackBuffer(X, Y, Width, Height, pPixels);
 800445a:	9c04      	ldr	r4, [sp, #16]
 800445c:	9400      	str	r4, [sp, #0]
 800445e:	f7ff fd05 	bl	8003e6c <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>
}
 8004462:	b002      	add	sp, #8
 8004464:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixels_MSBFirst_ToDisplay(X, Y, Width, Height, pPixels);
 8004466:	9c04      	ldr	r4, [sp, #16]
 8004468:	9400      	str	r4, [sp, #0]
 800446a:	f7ff fd43 	bl	8003ef4 <ILI9341_DrawPixels_MSBFirst_ToDisplay>
}
 800446e:	e7f8      	b.n	8004462 <ILI9341_DrawPixels_MSBFirst+0x12>
 8004470:	20000482 	.word	0x20000482

08004474 <ILI9341_DrawBar_ToBackBuffer>:
{
 8004474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004478:	b083      	sub	sp, #12
 800447a:	4606      	mov	r6, r0
 800447c:	468b      	mov	fp, r1
 800447e:	4617      	mov	r7, r2
 8004480:	9301      	str	r3, [sp, #4]
  Color_MSBFirst = SwapBytes(i_Color);
 8004482:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8004486:	f7ff fc7c 	bl	8003d82 <SwapBytes>
 800448a:	4681      	mov	r9, r0
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 800448c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004490:	2100      	movs	r1, #0
 8004492:	4658      	mov	r0, fp
 8004494:	f7ff fc7a 	bl	8003d8c <Clamp_uint16>
 8004498:	4682      	mov	sl, r0
 800449a:	e00e      	b.n	80044ba <ILI9341_DrawBar_ToBackBuffer+0x46>
      pLine[X] = Color_MSBFirst;
 800449c:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 80044a0:	f828 9003 	strh.w	r9, [r8, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80044a4:	3401      	adds	r4, #1
 80044a6:	19f0      	adds	r0, r6, r7
 80044a8:	22f0      	movs	r2, #240	; 0xf0
 80044aa:	2100      	movs	r1, #0
 80044ac:	b280      	uxth	r0, r0
 80044ae:	f7ff fc6d 	bl	8003d8c <Clamp_uint16>
 80044b2:	42a0      	cmp	r0, r4
 80044b4:	d8f2      	bhi.n	800449c <ILI9341_DrawBar_ToBackBuffer+0x28>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80044b6:	f10a 0a01 	add.w	sl, sl, #1
 80044ba:	9b01      	ldr	r3, [sp, #4]
 80044bc:	eb0b 0003 	add.w	r0, fp, r3
 80044c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80044c4:	2100      	movs	r1, #0
 80044c6:	b280      	uxth	r0, r0
 80044c8:	f7ff fc60 	bl	8003d8c <Clamp_uint16>
 80044cc:	4550      	cmp	r0, sl
 80044ce:	d90c      	bls.n	80044ea <ILI9341_DrawBar_ToBackBuffer+0x76>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <ILI9341_DrawBar_ToBackBuffer+0x7c>)
 80044d2:	f8d3 8000 	ldr.w	r8, [r3]
 80044d6:	ebca 150a 	rsb	r5, sl, sl, lsl #4
 80044da:	016d      	lsls	r5, r5, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80044dc:	22f0      	movs	r2, #240	; 0xf0
 80044de:	2100      	movs	r1, #0
 80044e0:	4630      	mov	r0, r6
 80044e2:	f7ff fc53 	bl	8003d8c <Clamp_uint16>
 80044e6:	4604      	mov	r4, r0
 80044e8:	e7dd      	b.n	80044a6 <ILI9341_DrawBar_ToBackBuffer+0x32>
}
 80044ea:	b003      	add	sp, #12
 80044ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f0:	20000484 	.word	0x20000484

080044f4 <ILI9341_DrawBar>:
{
 80044f4:	b530      	push	{r4, r5, lr}
 80044f6:	b083      	sub	sp, #12
 80044f8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  if (UseBackBuffer)
 80044fc:	4d05      	ldr	r5, [pc, #20]	; (8004514 <ILI9341_DrawBar+0x20>)
 80044fe:	782d      	ldrb	r5, [r5, #0]
 8004500:	b125      	cbz	r5, 800450c <ILI9341_DrawBar+0x18>
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 8004502:	9400      	str	r4, [sp, #0]
 8004504:	f7ff ffb6 	bl	8004474 <ILI9341_DrawBar_ToBackBuffer>
}
 8004508:	b003      	add	sp, #12
 800450a:	bd30      	pop	{r4, r5, pc}
    ILI9341_DrawBar_ToDisplay(X, Y, Width, Height, Color);
 800450c:	9400      	str	r4, [sp, #0]
 800450e:	f7ff fd59 	bl	8003fc4 <ILI9341_DrawBar_ToDisplay>
}
 8004512:	e7f9      	b.n	8004508 <ILI9341_DrawBar+0x14>
 8004514:	20000482 	.word	0x20000482

08004518 <ILI9341_Clear>:
{
 8004518:	b500      	push	{lr}
 800451a:	b083      	sub	sp, #12
  ILI9341_DrawBar(0, 0, ILI9341_Width, ILI9341_Height, Color);
 800451c:	9000      	str	r0, [sp, #0]
 800451e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004522:	22f0      	movs	r2, #240	; 0xf0
 8004524:	2100      	movs	r1, #0
 8004526:	4608      	mov	r0, r1
 8004528:	f7ff ffe4 	bl	80044f4 <ILI9341_DrawBar>
}
 800452c:	b003      	add	sp, #12
 800452e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004534 <ILI9341_SetFont>:
  Result = pFont;
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <ILI9341_SetFont+0xc>)
 8004536:	681a      	ldr	r2, [r3, #0]
  pFont = i_pFont;
 8004538:	6018      	str	r0, [r3, #0]
}
 800453a:	4610      	mov	r0, r2
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000488 	.word	0x20000488

08004544 <ILI9341_GetFontYSpacing>:
  return pFont->yAdvance;
 8004544:	4b01      	ldr	r3, [pc, #4]	; (800454c <ILI9341_GetFontYSpacing+0x8>)
 8004546:	681b      	ldr	r3, [r3, #0]
}
 8004548:	7a98      	ldrb	r0, [r3, #10]
 800454a:	4770      	bx	lr
 800454c:	20000488 	.word	0x20000488

08004550 <GetCharWidth>:

uint16_t GetCharWidth(uint8_t Ch)
{
 8004550:	b510      	push	{r4, lr}
 8004552:	4604      	mov	r4, r0
  if (IsNonPrintingChar(Ch))
 8004554:	f7ff fc3c 	bl	8003dd0 <IsNonPrintingChar>
 8004558:	b980      	cbnz	r0, 800457c <GetCharWidth+0x2c>
    return 0;

  Ch -= pFont->first;
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <GetCharWidth+0x30>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	7a18      	ldrb	r0, [r3, #8]
 8004560:	1a20      	subs	r0, r4, r0
 8004562:	b2c0      	uxtb	r0, r0
  GFXglyph *pGlyph = &pFont->pGlyph[Ch];
 8004564:	685c      	ldr	r4, [r3, #4]
 8004566:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  uint8_t w = pGlyph->width;
 800456a:	7882      	ldrb	r2, [r0, #2]
  int8_t xo = pGlyph->xOffset;
 800456c:	f990 3005 	ldrsb.w	r3, [r0, #5]

  if (w == 0)
 8004570:	b112      	cbz	r2, 8004578 <GetCharWidth+0x28>
    return pGlyph->xAdvance;

  return xo + w;
 8004572:	1898      	adds	r0, r3, r2
 8004574:	b280      	uxth	r0, r0
}
 8004576:	bd10      	pop	{r4, pc}
    return pGlyph->xAdvance;
 8004578:	7900      	ldrb	r0, [r0, #4]
 800457a:	e7fc      	b.n	8004576 <GetCharWidth+0x26>
    return 0;
 800457c:	2000      	movs	r0, #0
 800457e:	e7fa      	b.n	8004576 <GetCharWidth+0x26>
 8004580:	20000488 	.word	0x20000488

08004584 <ILI9341_GetTextWidth>:

uint16_t ILI9341_GetTextWidth(const char *Text)
{
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	4604      	mov	r4, r0
  uint16_t TotalWidth, NumChars;
  const char *pText;

  NumChars = strlen(Text);
 8004588:	f7fb fe5a 	bl	8000240 <strlen>
 800458c:	b287      	uxth	r7, r0

  pText = Text;

  TotalWidth=0;

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 800458e:	2500      	movs	r5, #0
  TotalWidth=0;
 8004590:	462e      	mov	r6, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8004592:	e007      	b.n	80045a4 <ILI9341_GetTextWidth+0x20>
    TotalWidth += GetCharWidth(*pText++);
 8004594:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004598:	f7ff ffda 	bl	8004550 <GetCharWidth>
 800459c:	4406      	add	r6, r0
 800459e:	b2b6      	uxth	r6, r6
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80045a0:	3501      	adds	r5, #1
 80045a2:	b2ad      	uxth	r5, r5
 80045a4:	42bd      	cmp	r5, r7
 80045a6:	d3f5      	bcc.n	8004594 <ILI9341_GetTextWidth+0x10>

  return TotalWidth;
}
 80045a8:	4630      	mov	r0, r6
 80045aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080045ac <ILI9341_DrawCharAtXY>:
uint8_t ILI9341_DrawCharAtXY(uint8_t Ch, uint16_t X, uint16_t Y, uint16_t Color)
// X: X position of left edge of char.
// Y: Y position of line on which the char sits. The char may go below this line (e.g. g j p q y).
// Returns required X advance.
// Based on Adafruit_GFX.cpp.
{
 80045ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b0:	b08d      	sub	sp, #52	; 0x34
 80045b2:	9105      	str	r1, [sp, #20]
 80045b4:	9208      	str	r2, [sp, #32]
 80045b6:	9306      	str	r3, [sp, #24]
  uint8_t *pBitmap;
  uint16_t Color_MSBFirst, TextBackgroundColor_MSBFirst;
  uint16_t *pMemChar, *pMemCharPixel;
  uint8_t CharWidth, CharHeight;

  if (!pFont)
 80045b8:	4b9a      	ldr	r3, [pc, #616]	; (8004824 <ILI9341_DrawCharAtXY+0x278>)
 80045ba:	681c      	ldr	r4, [r3, #0]
 80045bc:	2c00      	cmp	r4, #0
 80045be:	f000 812d 	beq.w	800481c <ILI9341_DrawCharAtXY+0x270>
 80045c2:	4605      	mov	r5, r0
    return 0;
  if (IsNonPrintingChar(Ch))
 80045c4:	f7ff fc04 	bl	8003dd0 <IsNonPrintingChar>
 80045c8:	9003      	str	r0, [sp, #12]
 80045ca:	2800      	cmp	r0, #0
 80045cc:	f040 8128 	bne.w	8004820 <ILI9341_DrawCharAtXY+0x274>
    return 0;

  Ch -= pFont->first;
 80045d0:	7a23      	ldrb	r3, [r4, #8]
 80045d2:	1aed      	subs	r5, r5, r3
 80045d4:	b2ed      	uxtb	r5, r5
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 80045d6:	4b94      	ldr	r3, [pc, #592]	; (8004828 <ILI9341_DrawCharAtXY+0x27c>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d029      	beq.n	8004632 <ILI9341_DrawCharAtXY+0x86>
    Y -= (pFont->yOffsetMin / 2);

  pGlyph = &pFont->pGlyph[Ch];
 80045de:	6863      	ldr	r3, [r4, #4]
 80045e0:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80045e4:	920a      	str	r2, [sp, #40]	; 0x28
  pBitmap = pFont->pBitmap;
 80045e6:	f8d4 9000 	ldr.w	r9, [r4]

  bo = pGlyph->bitmapOffset;
 80045ea:	f833 6035 	ldrh.w	r6, [r3, r5, lsl #3]
  w = pGlyph->width;
 80045ee:	4613      	mov	r3, r2
 80045f0:	f892 8002 	ldrb.w	r8, [r2, #2]
  h = pGlyph->height;
 80045f4:	f892 b003 	ldrb.w	fp, [r2, #3]
  xo = pGlyph->xOffset;
 80045f8:	f992 2005 	ldrsb.w	r2, [r2, #5]
 80045fc:	9204      	str	r2, [sp, #16]
  yo = pGlyph->yOffset;
 80045fe:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004602:	9307      	str	r3, [sp, #28]
  bits = 0;
  bit = 0;
  yo_min = pFont->yOffsetMin;
 8004604:	f994 a00b 	ldrsb.w	sl, [r4, #11]
  yo_max = pFont->yOffsetMax;
 8004608:	f994 500c 	ldrsb.w	r5, [r4, #12]

  switch(TextDrawMode)
 800460c:	4b87      	ldr	r3, [pc, #540]	; (800482c <ILI9341_DrawCharAtXY+0x280>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d061      	beq.n	80046d8 <ILI9341_DrawCharAtXY+0x12c>
 8004614:	2b03      	cmp	r3, #3
 8004616:	f000 80bc 	beq.w	8004792 <ILI9341_DrawCharAtXY+0x1e6>
 800461a:	2b01      	cmp	r3, #1
 800461c:	d015      	beq.n	800464a <ILI9341_DrawCharAtXY+0x9e>
      }
      ILI9341_CSX_High();
      break;
  }

  if (w == 0)
 800461e:	f1b8 0f00 	cmp.w	r8, #0
 8004622:	f000 80f8 	beq.w	8004816 <ILI9341_DrawCharAtXY+0x26a>
    return pGlyph->xAdvance;
  return xo + w;
 8004626:	9804      	ldr	r0, [sp, #16]
 8004628:	4440      	add	r0, r8
 800462a:	b2c0      	uxtb	r0, r0
}
 800462c:	b00d      	add	sp, #52	; 0x34
 800462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Y -= (pFont->yOffsetMin / 2);
 8004632:	f994 300b 	ldrsb.w	r3, [r4, #11]
 8004636:	2b00      	cmp	r3, #0
 8004638:	db05      	blt.n	8004646 <ILI9341_DrawCharAtXY+0x9a>
 800463a:	9a08      	ldr	r2, [sp, #32]
 800463c:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 8004640:	b29b      	uxth	r3, r3
 8004642:	9308      	str	r3, [sp, #32]
 8004644:	e7cb      	b.n	80045de <ILI9341_DrawCharAtXY+0x32>
 8004646:	3301      	adds	r3, #1
 8004648:	e7f7      	b.n	800463a <ILI9341_DrawCharAtXY+0x8e>
      Color_MSBFirst = SwapBytes(Color);
 800464a:	9806      	ldr	r0, [sp, #24]
 800464c:	f7ff fb99 	bl	8003d82 <SwapBytes>
 8004650:	4605      	mov	r5, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8004652:	4b77      	ldr	r3, [pc, #476]	; (8004830 <ILI9341_DrawCharAtXY+0x284>)
 8004654:	8818      	ldrh	r0, [r3, #0]
 8004656:	f7ff fb94 	bl	8003d82 <SwapBytes>
 800465a:	4604      	mov	r4, r0
      pMemChar = (uint16_t *)malloc(w * h * 2);
 800465c:	fb0b f008 	mul.w	r0, fp, r8
 8004660:	0040      	lsls	r0, r0, #1
 8004662:	f001 f9c3 	bl	80059ec <malloc>
 8004666:	4607      	mov	r7, r0
      pMemCharPixel = pMemChar;
 8004668:	4684      	mov	ip, r0
  bit = 0;
 800466a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800466e:	4670      	mov	r0, lr
  bits = 0;
 8004670:	4673      	mov	r3, lr
      for (yy = 0; yy < h; ++yy)
 8004672:	e01c      	b.n	80046ae <ILI9341_DrawCharAtXY+0x102>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 8004674:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004678:	d113      	bne.n	80046a2 <ILI9341_DrawCharAtXY+0xf6>
 800467a:	4620      	mov	r0, r4
 800467c:	f82c 0b02 	strh.w	r0, [ip], #2
          bits <<= 1;
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 8004684:	3201      	adds	r2, #1
 8004686:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 8004688:	4608      	mov	r0, r1
        for (xx = 0; xx < w; ++xx)
 800468a:	4542      	cmp	r2, r8
 800468c:	d20b      	bcs.n	80046a6 <ILI9341_DrawCharAtXY+0xfa>
          if (!(bit++ & 7))
 800468e:	1c41      	adds	r1, r0, #1
 8004690:	b2c9      	uxtb	r1, r1
 8004692:	f010 0f07 	tst.w	r0, #7
 8004696:	d1ed      	bne.n	8004674 <ILI9341_DrawCharAtXY+0xc8>
            bits = pBitmap[bo++];
 8004698:	1c70      	adds	r0, r6, #1
 800469a:	f819 3006 	ldrb.w	r3, [r9, r6]
 800469e:	b286      	uxth	r6, r0
 80046a0:	e7e8      	b.n	8004674 <ILI9341_DrawCharAtXY+0xc8>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80046a2:	4628      	mov	r0, r5
 80046a4:	e7ea      	b.n	800467c <ILI9341_DrawCharAtXY+0xd0>
      for (yy = 0; yy < h; ++yy)
 80046a6:	f10e 0e01 	add.w	lr, lr, #1
 80046aa:	fa5f fe8e 	uxtb.w	lr, lr
 80046ae:	45de      	cmp	lr, fp
 80046b0:	d201      	bcs.n	80046b6 <ILI9341_DrawCharAtXY+0x10a>
        for (xx = 0; xx < w; ++xx)
 80046b2:	9a03      	ldr	r2, [sp, #12]
 80046b4:	e7e9      	b.n	800468a <ILI9341_DrawCharAtXY+0xde>
      ILI9341_DrawPixels_MSBFirst(X + xo, Y + yo, w, h, pMemChar);
 80046b6:	9908      	ldr	r1, [sp, #32]
 80046b8:	9b07      	ldr	r3, [sp, #28]
 80046ba:	4419      	add	r1, r3
 80046bc:	9805      	ldr	r0, [sp, #20]
 80046be:	9b04      	ldr	r3, [sp, #16]
 80046c0:	4418      	add	r0, r3
 80046c2:	9700      	str	r7, [sp, #0]
 80046c4:	465b      	mov	r3, fp
 80046c6:	4642      	mov	r2, r8
 80046c8:	b289      	uxth	r1, r1
 80046ca:	b280      	uxth	r0, r0
 80046cc:	f7ff fec0 	bl	8004450 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 80046d0:	4638      	mov	r0, r7
 80046d2:	f001 f993 	bl	80059fc <free>
      break;
 80046d6:	e7a2      	b.n	800461e <ILI9341_DrawCharAtXY+0x72>
      Color_MSBFirst = SwapBytes(Color);
 80046d8:	9806      	ldr	r0, [sp, #24]
 80046da:	f7ff fb52 	bl	8003d82 <SwapBytes>
 80046de:	4604      	mov	r4, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 80046e0:	4b53      	ldr	r3, [pc, #332]	; (8004830 <ILI9341_DrawCharAtXY+0x284>)
 80046e2:	8818      	ldrh	r0, [r3, #0]
 80046e4:	f7ff fb4d 	bl	8003d82 <SwapBytes>
 80046e8:	4607      	mov	r7, r0
      CharWidth = pGlyph->xAdvance;
 80046ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046ec:	791a      	ldrb	r2, [r3, #4]
 80046ee:	9206      	str	r2, [sp, #24]
      CharHeight = yo_max - yo_min + 1;
 80046f0:	eba5 030a 	sub.w	r3, r5, sl
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	3301      	adds	r3, #1
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	930b      	str	r3, [sp, #44]	; 0x2c
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 80046fc:	fb02 f503 	mul.w	r5, r2, r3
 8004700:	0068      	lsls	r0, r5, #1
 8004702:	f001 f973 	bl	80059ec <malloc>
 8004706:	4603      	mov	r3, r0
 8004708:	9009      	str	r0, [sp, #36]	; 0x24
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800470a:	2200      	movs	r2, #0
 800470c:	e003      	b.n	8004716 <ILI9341_DrawCharAtXY+0x16a>
        *pMemCharPixel++ = TextBackgroundColor_MSBFirst;
 800470e:	f823 7b02 	strh.w	r7, [r3], #2
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8004712:	3201      	adds	r2, #1
 8004714:	b292      	uxth	r2, r2
 8004716:	4295      	cmp	r5, r2
 8004718:	dcf9      	bgt.n	800470e <ILI9341_DrawCharAtXY+0x162>
  bit = 0;
 800471a:	9f03      	ldr	r7, [sp, #12]
 800471c:	463d      	mov	r5, r7
  bits = 0;
 800471e:	463b      	mov	r3, r7
 8004720:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004724:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8004728:	e018      	b.n	800475c <ILI9341_DrawCharAtXY+0x1b0>
          if (bits & 0x80)
 800472a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800472e:	d111      	bne.n	8004754 <ILI9341_DrawCharAtXY+0x1a8>
          ++pMemCharPixel;
 8004730:	3002      	adds	r0, #2
          bits <<= 1;
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 8004736:	3201      	adds	r2, #1
 8004738:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 800473a:	460d      	mov	r5, r1
        for (xx = 0; xx < w; ++xx)
 800473c:	4542      	cmp	r2, r8
 800473e:	d20b      	bcs.n	8004758 <ILI9341_DrawCharAtXY+0x1ac>
          if (!(bit++ & 7))
 8004740:	1c69      	adds	r1, r5, #1
 8004742:	b2c9      	uxtb	r1, r1
 8004744:	f015 0f07 	tst.w	r5, #7
 8004748:	d1ef      	bne.n	800472a <ILI9341_DrawCharAtXY+0x17e>
            bits = pBitmap[bo++];
 800474a:	1c75      	adds	r5, r6, #1
 800474c:	f819 3006 	ldrb.w	r3, [r9, r6]
 8004750:	b2ae      	uxth	r6, r5
 8004752:	e7ea      	b.n	800472a <ILI9341_DrawCharAtXY+0x17e>
            *pMemCharPixel = Color_MSBFirst;
 8004754:	8004      	strh	r4, [r0, #0]
 8004756:	e7eb      	b.n	8004730 <ILI9341_DrawCharAtXY+0x184>
      for (yy = 0; yy < h; ++yy)
 8004758:	3701      	adds	r7, #1
 800475a:	b2ff      	uxtb	r7, r7
 800475c:	455f      	cmp	r7, fp
 800475e:	d20a      	bcs.n	8004776 <ILI9341_DrawCharAtXY+0x1ca>
        pMemCharPixel = &pMemChar[(- yo_min + yo + yy) * CharWidth + xo];
 8004760:	ebac 000a 	sub.w	r0, ip, sl
 8004764:	4438      	add	r0, r7
 8004766:	9a04      	ldr	r2, [sp, #16]
 8004768:	9906      	ldr	r1, [sp, #24]
 800476a:	fb00 2001 	mla	r0, r0, r1, r2
 800476e:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
        for (xx = 0; xx < w; ++xx)
 8004772:	9a03      	ldr	r2, [sp, #12]
 8004774:	e7e2      	b.n	800473c <ILI9341_DrawCharAtXY+0x190>
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
 8004776:	9908      	ldr	r1, [sp, #32]
 8004778:	4451      	add	r1, sl
 800477a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800477c:	9400      	str	r4, [sp, #0]
 800477e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004780:	9a06      	ldr	r2, [sp, #24]
 8004782:	b289      	uxth	r1, r1
 8004784:	9805      	ldr	r0, [sp, #20]
 8004786:	f7ff fe63 	bl	8004450 <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 800478a:	4620      	mov	r0, r4
 800478c:	f001 f936 	bl	80059fc <free>
      break;
 8004790:	e745      	b.n	800461e <ILI9341_DrawCharAtXY+0x72>
      ILI9341_CSX_Low();
 8004792:	2200      	movs	r2, #0
 8004794:	2102      	movs	r1, #2
 8004796:	4827      	ldr	r0, [pc, #156]	; (8004834 <ILI9341_DrawCharAtXY+0x288>)
 8004798:	f7fc fafe 	bl	8000d98 <HAL_GPIO_WritePin>
  bit = 0;
 800479c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80047a0:	4653      	mov	r3, sl
  bits = 0;
 80047a2:	4654      	mov	r4, sl
 80047a4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80047a8:	f8dd b020 	ldr.w	fp, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 80047ac:	e028      	b.n	8004800 <ILI9341_DrawCharAtXY+0x254>
          if (bits & 0x80)
 80047ae:	f014 0f80 	tst.w	r4, #128	; 0x80
 80047b2:	d110      	bne.n	80047d6 <ILI9341_DrawCharAtXY+0x22a>
          bits <<= 1;
 80047b4:	0064      	lsls	r4, r4, #1
 80047b6:	b2e4      	uxtb	r4, r4
        for (xx = 0; xx < w; ++xx)
 80047b8:	3501      	adds	r5, #1
 80047ba:	b2ed      	uxtb	r5, r5
          if (!(bit++ & 7))
 80047bc:	463b      	mov	r3, r7
        for (xx = 0; xx < w; ++xx)
 80047be:	4545      	cmp	r5, r8
 80047c0:	d21a      	bcs.n	80047f8 <ILI9341_DrawCharAtXY+0x24c>
          if (!(bit++ & 7))
 80047c2:	1c5f      	adds	r7, r3, #1
 80047c4:	b2ff      	uxtb	r7, r7
 80047c6:	f013 0f07 	tst.w	r3, #7
 80047ca:	d1f0      	bne.n	80047ae <ILI9341_DrawCharAtXY+0x202>
            bits = pBitmap[bo++];
 80047cc:	1c73      	adds	r3, r6, #1
 80047ce:	f819 4006 	ldrb.w	r4, [r9, r6]
 80047d2:	b29e      	uxth	r6, r3
 80047d4:	e7eb      	b.n	80047ae <ILI9341_DrawCharAtXY+0x202>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80047d6:	9b05      	ldr	r3, [sp, #20]
 80047d8:	9a04      	ldr	r2, [sp, #16]
 80047da:	1898      	adds	r0, r3, r2
 80047dc:	fa15 f080 	uxtah	r0, r5, r0
 80047e0:	9b07      	ldr	r3, [sp, #28]
 80047e2:	eb0b 0103 	add.w	r1, fp, r3
 80047e6:	fa1a f181 	uxtah	r1, sl, r1
 80047ea:	2300      	movs	r3, #0
 80047ec:	9a06      	ldr	r2, [sp, #24]
 80047ee:	b209      	sxth	r1, r1
 80047f0:	b200      	sxth	r0, r0
 80047f2:	f7ff fe21 	bl	8004438 <ILI9341_DrawPixel>
 80047f6:	e7dd      	b.n	80047b4 <ILI9341_DrawCharAtXY+0x208>
      for (yy = 0; yy < h; ++yy)
 80047f8:	f10a 0a01 	add.w	sl, sl, #1
 80047fc:	fa5f fa8a 	uxtb.w	sl, sl
 8004800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004802:	4592      	cmp	sl, r2
 8004804:	d201      	bcs.n	800480a <ILI9341_DrawCharAtXY+0x25e>
        for (xx = 0; xx < w; ++xx)
 8004806:	9d03      	ldr	r5, [sp, #12]
 8004808:	e7d9      	b.n	80047be <ILI9341_DrawCharAtXY+0x212>
      ILI9341_CSX_High();
 800480a:	2201      	movs	r2, #1
 800480c:	2102      	movs	r1, #2
 800480e:	4809      	ldr	r0, [pc, #36]	; (8004834 <ILI9341_DrawCharAtXY+0x288>)
 8004810:	f7fc fac2 	bl	8000d98 <HAL_GPIO_WritePin>
      break;
 8004814:	e703      	b.n	800461e <ILI9341_DrawCharAtXY+0x72>
    return pGlyph->xAdvance;
 8004816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004818:	7918      	ldrb	r0, [r3, #4]
 800481a:	e707      	b.n	800462c <ILI9341_DrawCharAtXY+0x80>
    return 0;
 800481c:	2000      	movs	r0, #0
 800481e:	e705      	b.n	800462c <ILI9341_DrawCharAtXY+0x80>
    return 0;
 8004820:	2000      	movs	r0, #0
 8004822:	e703      	b.n	800462c <ILI9341_DrawCharAtXY+0x80>
 8004824:	20000488 	.word	0x20000488
 8004828:	2000000b 	.word	0x2000000b
 800482c:	2000000a 	.word	0x2000000a
 8004830:	20000480 	.word	0x20000480
 8004834:	40020800 	.word	0x40020800

08004838 <ILI9341_SetTextColor>:

uint16_t ILI9341_SetTextColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextColor;
 8004838:	4b02      	ldr	r3, [pc, #8]	; (8004844 <ILI9341_SetTextColor+0xc>)
 800483a:	881a      	ldrh	r2, [r3, #0]
  TextColor = Value;
 800483c:	8018      	strh	r0, [r3, #0]
  return Result;
}
 800483e:	4610      	mov	r0, r2
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000008 	.word	0x20000008

08004848 <ILI9341_SetTextBackgroundColor>:

uint16_t ILI9341_SetTextBackgroundColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextBackgroundColor;
 8004848:	4b02      	ldr	r3, [pc, #8]	; (8004854 <ILI9341_SetTextBackgroundColor+0xc>)
 800484a:	881a      	ldrh	r2, [r3, #0]
  TextBackgroundColor = Value;
 800484c:	8018      	strh	r0, [r3, #0]
  return Result;
}
 800484e:	4610      	mov	r0, r2
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000480 	.word	0x20000480

08004858 <ILI9341_SetTextDrawMode>:

TextDrawMode_t ILI9341_SetTextDrawMode(TextDrawMode_t Value)
{
  TextDrawMode_t Result;

  Result = TextDrawMode;
 8004858:	4b02      	ldr	r3, [pc, #8]	; (8004864 <ILI9341_SetTextDrawMode+0xc>)
 800485a:	781a      	ldrb	r2, [r3, #0]
  TextDrawMode = Value;
 800485c:	7018      	strb	r0, [r3, #0]
  return Result;
}
 800485e:	4610      	mov	r0, r2
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	2000000a 	.word	0x2000000a

08004868 <ILI9341_DrawTextAtXY>:
  uint16_t NumChars;
  uint8_t DX;
  
  pText = (uint8_t *) Text;

  if (!pText)
 8004868:	b360      	cbz	r0, 80048c4 <ILI9341_DrawTextAtXY+0x5c>
{
 800486a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486e:	460d      	mov	r5, r1
 8004870:	4690      	mov	r8, r2
 8004872:	461c      	mov	r4, r3
 8004874:	4606      	mov	r6, r0
    return;

  NumChars = strlen(Text);
 8004876:	f7fb fce3 	bl	8000240 <strlen>
 800487a:	b287      	uxth	r7, r0

  switch (TextPosition)
 800487c:	2c02      	cmp	r4, #2
 800487e:	d003      	beq.n	8004888 <ILI9341_DrawTextAtXY+0x20>
 8004880:	2c03      	cmp	r4, #3
 8004882:	d009      	beq.n	8004898 <ILI9341_DrawTextAtXY+0x30>
{
 8004884:	2400      	movs	r4, #0
 8004886:	e019      	b.n	80048bc <ILI9341_DrawTextAtXY+0x54>
  {
    case tpCentre:
      X -= ILI9341_GetTextWidth(Text) / 2;
 8004888:	4630      	mov	r0, r6
 800488a:	f7ff fe7b 	bl	8004584 <ILI9341_GetTextWidth>
 800488e:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8004892:	1a28      	subs	r0, r5, r0
 8004894:	b285      	uxth	r5, r0
      break;
 8004896:	e7f5      	b.n	8004884 <ILI9341_DrawTextAtXY+0x1c>
    case tpRight:
      X -= ILI9341_GetTextWidth(Text);
 8004898:	4630      	mov	r0, r6
 800489a:	f7ff fe73 	bl	8004584 <ILI9341_GetTextWidth>
 800489e:	1a28      	subs	r0, r5, r0
 80048a0:	b285      	uxth	r5, r0
      break;
 80048a2:	e7ef      	b.n	8004884 <ILI9341_DrawTextAtXY+0x1c>
  }

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
  {
    Ch = *pText;
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 80048a4:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <ILI9341_DrawTextAtXY+0x60>)
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	4642      	mov	r2, r8
 80048aa:	4629      	mov	r1, r5
 80048ac:	f816 0b01 	ldrb.w	r0, [r6], #1
 80048b0:	f7ff fe7c 	bl	80045ac <ILI9341_DrawCharAtXY>
    ++pText;
    X += DX;
 80048b4:	4428      	add	r0, r5
 80048b6:	b285      	uxth	r5, r0
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80048b8:	3401      	adds	r4, #1
 80048ba:	b2a4      	uxth	r4, r4
 80048bc:	42bc      	cmp	r4, r7
 80048be:	d3f1      	bcc.n	80048a4 <ILI9341_DrawTextAtXY+0x3c>
  }
}
 80048c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000008 	.word	0x20000008

080048cc <XPT2046_Initialize>:

///////////////////////////////////////////////////////////////////////////////

void XPT2046_Initialize(SPI_HandleTypeDef *i_phspi)
{
  phspi = i_phspi;
 80048cc:	4b01      	ldr	r3, [pc, #4]	; (80048d4 <XPT2046_Initialize+0x8>)
 80048ce:	6018      	str	r0, [r3, #0]
}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000490 	.word	0x20000490

080048d8 <GetAPB1TimerClockFrequency>:

///////////////////////////////////////////////////////////////////////////////
// MCU stuff:

uint32_t GetAPB1TimerClockFrequency()
{
 80048d8:	b530      	push	{r4, r5, lr}
 80048da:	b0a5      	sub	sp, #148	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  uint32_t Result;

  Result = 2 * HAL_RCC_GetPCLK1Freq();
 80048dc:	f7fd f96c 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 80048e0:	4604      	mov	r4, r0
 80048e2:	0045      	lsls	r5, r0, #1

  HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInit);
 80048e4:	4668      	mov	r0, sp
 80048e6:	f7fd fc79 	bl	80021dc <HAL_RCCEx_GetPeriphCLKConfig>

  if (PeriphClkInit.TIMPresSelection == RCC_TIMPRES_ACTIVATED)
 80048ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048f0:	d002      	beq.n	80048f8 <GetAPB1TimerClockFrequency+0x20>
    Result *= 2;

  return Result;
}
 80048f2:	4628      	mov	r0, r5
 80048f4:	b025      	add	sp, #148	; 0x94
 80048f6:	bd30      	pop	{r4, r5, pc}
    Result *= 2;
 80048f8:	00a5      	lsls	r5, r4, #2
  return Result;
 80048fa:	e7fa      	b.n	80048f2 <GetAPB1TimerClockFrequency+0x1a>

080048fc <ToggleLED>:
      break;
  }
}

void ToggleLED(LED_t LED)
{
 80048fc:	b508      	push	{r3, lr}
  switch(LED)
 80048fe:	2802      	cmp	r0, #2
 8004900:	d00b      	beq.n	800491a <ToggleLED+0x1e>
 8004902:	2803      	cmp	r0, #3
 8004904:	d00e      	beq.n	8004924 <ToggleLED+0x28>
 8004906:	2801      	cmp	r0, #1
 8004908:	d002      	beq.n	8004910 <ToggleLED+0x14>
      break;
    case LED_Blue:
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
      break;
    default:
      Error_Handler();
 800490a:	f000 fb07 	bl	8004f1c <Error_Handler>
      break;
  }
}
 800490e:	e003      	b.n	8004918 <ToggleLED+0x1c>
      HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8004910:	2102      	movs	r1, #2
 8004912:	4807      	ldr	r0, [pc, #28]	; (8004930 <ToggleLED+0x34>)
 8004914:	f7fc fa46 	bl	8000da4 <HAL_GPIO_TogglePin>
}
 8004918:	bd08      	pop	{r3, pc}
      HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 800491a:	2104      	movs	r1, #4
 800491c:	4804      	ldr	r0, [pc, #16]	; (8004930 <ToggleLED+0x34>)
 800491e:	f7fc fa41 	bl	8000da4 <HAL_GPIO_TogglePin>
      break;
 8004922:	e7f9      	b.n	8004918 <ToggleLED+0x1c>
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8004924:	2108      	movs	r1, #8
 8004926:	4802      	ldr	r0, [pc, #8]	; (8004930 <ToggleLED+0x34>)
 8004928:	f7fc fa3c 	bl	8000da4 <HAL_GPIO_TogglePin>
      break;
 800492c:	e7f4      	b.n	8004918 <ToggleLED+0x1c>
 800492e:	bf00      	nop
 8004930:	40020000 	.word	0x40020000

08004934 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004934:	b500      	push	{lr}
 8004936:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004938:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <MX_DMA_Init+0xa0>)
 800493a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
 8004942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004944:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004948:	9200      	str	r2, [sp, #0]
 800494a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800494c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800495e:	2200      	movs	r2, #0
 8004960:	4611      	mov	r1, r2
 8004962:	200b      	movs	r0, #11
 8004964:	f7fb feb0 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004968:	200b      	movs	r0, #11
 800496a:	f7fb fee3 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800496e:	2200      	movs	r2, #0
 8004970:	4611      	mov	r1, r2
 8004972:	2010      	movs	r0, #16
 8004974:	f7fb fea8 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004978:	2010      	movs	r0, #16
 800497a:	f7fb fedb 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800497e:	2200      	movs	r2, #0
 8004980:	4611      	mov	r1, r2
 8004982:	2011      	movs	r0, #17
 8004984:	f7fb fea0 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004988:	2011      	movs	r0, #17
 800498a:	f7fb fed3 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	4611      	mov	r1, r2
 8004992:	203a      	movs	r0, #58	; 0x3a
 8004994:	f7fb fe98 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004998:	203a      	movs	r0, #58	; 0x3a
 800499a:	f7fb fecb 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800499e:	2200      	movs	r2, #0
 80049a0:	4611      	mov	r1, r2
 80049a2:	203b      	movs	r0, #59	; 0x3b
 80049a4:	f7fb fe90 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80049a8:	203b      	movs	r0, #59	; 0x3b
 80049aa:	f7fb fec3 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80049ae:	2200      	movs	r2, #0
 80049b0:	4611      	mov	r1, r2
 80049b2:	2044      	movs	r0, #68	; 0x44
 80049b4:	f7fb fe88 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80049b8:	2044      	movs	r0, #68	; 0x44
 80049ba:	f7fb febb 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80049be:	2200      	movs	r2, #0
 80049c0:	4611      	mov	r1, r2
 80049c2:	2045      	movs	r0, #69	; 0x45
 80049c4:	f7fb fe80 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80049c8:	2045      	movs	r0, #69	; 0x45
 80049ca:	f7fb feb3 	bl	8000734 <HAL_NVIC_EnableIRQ>

}
 80049ce:	b003      	add	sp, #12
 80049d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80049d4:	40023800 	.word	0x40023800

080049d8 <wrap>:

///////////////////////////////////////////////////////////////////////////////

int wrap(int Value, int Size)
{
  if (Value < 0)
 80049d8:	2800      	cmp	r0, #0
 80049da:	db03      	blt.n	80049e4 <wrap+0xc>
    Value += Size;
  else if (Value >= Size)
 80049dc:	4288      	cmp	r0, r1
 80049de:	db00      	blt.n	80049e2 <wrap+0xa>
    Value -= Size;
 80049e0:	1a40      	subs	r0, r0, r1

  return Value;
}
 80049e2:	4770      	bx	lr
    Value += Size;
 80049e4:	4408      	add	r0, r1
 80049e6:	4770      	bx	lr

080049e8 <CalculateFrequency>:
  uint32_t ReadIndex, WriteIndex;
  uint32_t AverageTimePerCycle_InCounterCycles;
  uint32_t CurrentTimerCount, CurrentSampleCount, NumCountsSinceLastSample;
  float Frequency, TimeSinceLastSample;

  *o_pFrequency = 0.0f;
 80049e8:	2300      	movs	r3, #0
 80049ea:	6003      	str	r3, [r0, #0]

  WriteIndex = CalculateFrequency_NumSamples - htim2.hdma[TIM_DMA_ID_CC1]->Instance->NDTR;
 80049ec:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <CalculateFrequency+0xc8>)
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f5c3 5280 	rsb	r2, r3, #4096	; 0x1000
  if (WriteIndex >= CalculateFrequency_NumSamples)
 80049f8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80049fc:	d256      	bcs.n	8004aac <CalculateFrequency+0xc4>
{
 80049fe:	b570      	push	{r4, r5, r6, lr}
 8004a00:	ed2d 8b02 	vpush	{d8}
 8004a04:	4605      	mov	r5, r0
    return 0;
  ReadIndex = wrap(WriteIndex - 1, CalculateFrequency_NumSamples);
 8004a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a0a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004a0e:	1ac0      	subs	r0, r0, r3
 8004a10:	f7ff ffe2 	bl	80049d8 <wrap>

  CurrentTimerCount = __HAL_TIM_GetCounter(&htim2);
 8004a14:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <CalculateFrequency+0xc8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  CurrentSampleCount = CalculateFrequency_Samples[ReadIndex];
 8004a1a:	4e26      	ldr	r6, [pc, #152]	; (8004ab4 <CalculateFrequency+0xcc>)
 8004a1c:	f856 4020 	ldr.w	r4, [r6, r0, lsl #2]

  NumCountsSinceLastSample = CurrentTimerCount - CurrentSampleCount;
 8004a20:	1b1b      	subs	r3, r3, r4
  TimeSinceLastSample = (float)NumCountsSinceLastSample / (float)CalculateFrequency_TimerCountFrequency;
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <CalculateFrequency+0xd0>)
 8004a2c:	ed93 8a00 	vldr	s16, [r3]
 8004a30:	eec7 8a88 	vdiv.f32	s17, s15, s16

  AverageTimePerCycle_InCounterCycles = (CurrentSampleCount - CalculateFrequency_Samples[wrap(ReadIndex - CalculateFrequency_NumReadSamples, CalculateFrequency_NumSamples)]) / CalculateFrequency_NumReadSamples;
 8004a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a38:	380a      	subs	r0, #10
 8004a3a:	f7ff ffcd 	bl	80049d8 <wrap>
 8004a3e:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8004a42:	1ae4      	subs	r4, r4, r3
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <CalculateFrequency+0xd4>)
 8004a46:	fba3 3404 	umull	r3, r4, r3, r4
 8004a4a:	08e4      	lsrs	r4, r4, #3
  Frequency = (float)CalculateFrequency_TimerCountFrequency / (float)AverageTimePerCycle_InCounterCycles;
 8004a4c:	ee07 4a90 	vmov	s15, r4
 8004a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a54:	ee88 7a27 	vdiv.f32	s14, s16, s15

  if (InputStopped)
 8004a58:	4b19      	ldr	r3, [pc, #100]	; (8004ac0 <CalculateFrequency+0xd8>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b153      	cbz	r3, 8004a74 <CalculateFrequency+0x8c>
  {
    if (Frequency >= CalculateFrequency_MinFrequency_StartThreshold)
 8004a5e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 8004a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	db14      	blt.n	8004a96 <CalculateFrequency+0xae>
      InputStopped = 0;
 8004a6c:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <CalculateFrequency+0xd8>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e010      	b.n	8004a96 <CalculateFrequency+0xae>
  }
  else
  {
    if ((Frequency < CalculateFrequency_MinFrequency_StopThreshold) || (TimeSinceLastSample >= 1.0f / CalculateFrequency_MinFrequency_StopThreshold))
 8004a74:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	d406      	bmi.n	8004a90 <CalculateFrequency+0xa8>
 8004a82:	eddf 7a10 	vldr	s15, [pc, #64]	; 8004ac4 <CalculateFrequency+0xdc>
 8004a86:	eef4 8ae7 	vcmpe.f32	s17, s15
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	db02      	blt.n	8004a96 <CalculateFrequency+0xae>
      InputStopped = 1;
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <CalculateFrequency+0xd8>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
  }

  if (InputStopped)
 8004a96:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <CalculateFrequency+0xd8>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	b10b      	cbz	r3, 8004aa0 <CalculateFrequency+0xb8>
    Frequency = 0.0f;
 8004a9c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004ac8 <CalculateFrequency+0xe0>

  *o_pFrequency = Frequency;
 8004aa0:	ed85 7a00 	vstr	s14, [r5]

  return 1;
 8004aa4:	2001      	movs	r0, #1
}
 8004aa6:	ecbd 8b02 	vpop	{d8}
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8004aac:	2000      	movs	r0, #0
}
 8004aae:	4770      	bx	lr
 8004ab0:	20004a00 	.word	0x20004a00
 8004ab4:	20000494 	.word	0x20000494
 8004ab8:	20004494 	.word	0x20004494
 8004abc:	cccccccd 	.word	0xcccccccd
 8004ac0:	20004498 	.word	0x20004498
 8004ac4:	3dcccccd 	.word	0x3dcccccd
 8004ac8:	00000000 	.word	0x00000000

08004acc <Go>:

///////////////////////////////////////////////////////////////////////////////

void Go()
{
 8004acc:	b500      	push	{lr}
 8004ace:	b0b5      	sub	sp, #212	; 0xd4
  float InputFrequency;
  char S[200];

  CalculateFrequency_TimerCountFrequency = (float)GetAPB1TimerClockFrequency() / ((float)htim2.Instance->PSC + 1.0f);
 8004ad0:	f7ff ff02 	bl	80048d8 <GetAPB1TimerClockFrequency>
 8004ad4:	ee07 0a10 	vmov	s14, r0
 8004ad8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004adc:	4c2f      	ldr	r4, [pc, #188]	; (8004b9c <Go+0xd0>)
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004af4:	4b2a      	ldr	r3, [pc, #168]	; (8004ba0 <Go+0xd4>)
 8004af6:	edc3 6a00 	vstr	s13, [r3]

  ILI9341_SetFont(&FreeSans9pt7b);
 8004afa:	482a      	ldr	r0, [pc, #168]	; (8004ba4 <Go+0xd8>)
 8004afc:	f7ff fd1a 	bl	8004534 <ILI9341_SetFont>
  ILI9341_SetTextColor(ILI9341_COLOR_WHITE);
 8004b00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004b04:	f7ff fe98 	bl	8004838 <ILI9341_SetTextColor>
  ILI9341_SetTextBackgroundColor(ILI9341_COLOR_BLACK);
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f7ff fe9d 	bl	8004848 <ILI9341_SetTextBackgroundColor>
  ILI9341_SetTextDrawMode(tdmAnyCharBar); // Slower but enables flicker free update.
 8004b0e:	2002      	movs	r0, #2
 8004b10:	f7ff fea2 	bl	8004858 <ILI9341_SetTextDrawMode>

  ILI9341_Clear(0x0000);
 8004b14:	2000      	movs	r0, #0
 8004b16:	f7ff fcff 	bl	8004518 <ILI9341_Clear>

  ILI9341_DrawTextAtXY("Frequency meter", 0, ILI9341_GetFontYSpacing(), tpLeft);
 8004b1a:	f7ff fd13 	bl	8004544 <ILI9341_GetFontYSpacing>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	b282      	uxth	r2, r0
 8004b22:	2100      	movs	r1, #0
 8004b24:	4820      	ldr	r0, [pc, #128]	; (8004ba8 <Go+0xdc>)
 8004b26:	f7ff fe9f 	bl	8004868 <ILI9341_DrawTextAtXY>
  ILI9341_DrawTextAtXY("Input to TIM2_CH1 (pin 77)", 0, 2 * ILI9341_GetFontYSpacing(), tpLeft);
 8004b2a:	f7ff fd0b 	bl	8004544 <ILI9341_GetFontYSpacing>
 8004b2e:	0042      	lsls	r2, r0, #1
 8004b30:	b292      	uxth	r2, r2
 8004b32:	2301      	movs	r3, #1
 8004b34:	2100      	movs	r1, #0
 8004b36:	481d      	ldr	r0, [pc, #116]	; (8004bac <Go+0xe0>)
 8004b38:	f7ff fe96 	bl	8004868 <ILI9341_DrawTextAtXY>

  if (HAL_TIM_Base_Start(&htim2))
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f7fe fbeb 	bl	8003318 <HAL_TIM_Base_Start>
 8004b42:	b950      	cbnz	r0, 8004b5a <Go+0x8e>
    Error_Handler();
  if (HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, CalculateFrequency_Samples, CalculateFrequency_NumSamples) != HAL_OK)
 8004b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b48:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <Go+0xe4>)
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4813      	ldr	r0, [pc, #76]	; (8004b9c <Go+0xd0>)
 8004b4e:	f7fe fff9 	bl	8003b44 <HAL_TIM_IC_Start_DMA>
 8004b52:	b1e0      	cbz	r0, 8004b8e <Go+0xc2>
    Error_Handler();
 8004b54:	f000 f9e2 	bl	8004f1c <Error_Handler>

  CalculateFrequency_Reset();
 8004b58:	e019      	b.n	8004b8e <Go+0xc2>
    Error_Handler();
 8004b5a:	f000 f9df 	bl	8004f1c <Error_Handler>
 8004b5e:	e7f1      	b.n	8004b44 <Go+0x78>

  while(1)
  {
    if (CalculateFrequency(&InputFrequency))
    {
      sprintf(S, "Input frequency: %0.2f             ", InputFrequency);
 8004b60:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8004b64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b68:	ec53 2b17 	vmov	r2, r3, d7
 8004b6c:	4911      	ldr	r1, [pc, #68]	; (8004bb4 <Go+0xe8>)
 8004b6e:	a801      	add	r0, sp, #4
 8004b70:	f001 fc9c 	bl	80064ac <siprintf>
      ILI9341_DrawTextAtXY(S, 0, 3 * ILI9341_GetFontYSpacing(), tpLeft);
 8004b74:	f7ff fce6 	bl	8004544 <ILI9341_GetFontYSpacing>
 8004b78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	b282      	uxth	r2, r0
 8004b80:	2100      	movs	r1, #0
 8004b82:	a801      	add	r0, sp, #4
 8004b84:	f7ff fe70 	bl	8004868 <ILI9341_DrawTextAtXY>
    }

    HAL_Delay(1); //!!! 100
 8004b88:	2001      	movs	r0, #1
 8004b8a:	f7fb fd77 	bl	800067c <HAL_Delay>
    if (CalculateFrequency(&InputFrequency))
 8004b8e:	a833      	add	r0, sp, #204	; 0xcc
 8004b90:	f7ff ff2a 	bl	80049e8 <CalculateFrequency>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d1e3      	bne.n	8004b60 <Go+0x94>
 8004b98:	e7f6      	b.n	8004b88 <Go+0xbc>
 8004b9a:	bf00      	nop
 8004b9c:	20004a00 	.word	0x20004a00
 8004ba0:	20004494 	.word	0x20004494
 8004ba4:	08008790 	.word	0x08008790
 8004ba8:	08008740 	.word	0x08008740
 8004bac:	08008750 	.word	0x08008750
 8004bb0:	20000494 	.word	0x20000494
 8004bb4:	0800876c 	.word	0x0800876c

08004bb8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 8004bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbe:	2400      	movs	r4, #0
 8004bc0:	9407      	str	r4, [sp, #28]
 8004bc2:	9408      	str	r4, [sp, #32]
 8004bc4:	9409      	str	r4, [sp, #36]	; 0x24
 8004bc6:	940a      	str	r4, [sp, #40]	; 0x28
 8004bc8:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bca:	4b72      	ldr	r3, [pc, #456]	; (8004d94 <MX_GPIO_Init+0x1dc>)
 8004bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bce:	f042 0210 	orr.w	r2, r2, #16
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8004bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd6:	f002 0210 	and.w	r2, r2, #16
 8004bda:	9201      	str	r2, [sp, #4]
 8004bdc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be0:	f042 0204 	orr.w	r2, r2, #4
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
 8004be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be8:	f002 0204 	and.w	r2, r2, #4
 8004bec:	9202      	str	r2, [sp, #8]
 8004bee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004bfe:	9203      	str	r2, [sp, #12]
 8004c00:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
 8004c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0c:	f002 0201 	and.w	r2, r2, #1
 8004c10:	9204      	str	r2, [sp, #16]
 8004c12:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c16:	f042 0202 	orr.w	r2, r2, #2
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1e:	f002 0202 	and.w	r2, r2, #2
 8004c22:	9205      	str	r2, [sp, #20]
 8004c24:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c28:	f042 0208 	orr.w	r2, r2, #8
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	9306      	str	r3, [sp, #24]
 8004c36:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 8004c38:	4f57      	ldr	r7, [pc, #348]	; (8004d98 <MX_GPIO_Init+0x1e0>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	2124      	movs	r1, #36	; 0x24
 8004c3e:	4638      	mov	r0, r7
 8004c40:	f7fc f8aa 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 8004c44:	4622      	mov	r2, r4
 8004c46:	2112      	movs	r1, #18
 8004c48:	4638      	mov	r0, r7
 8004c4a:	f7fc f8a5 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8004c4e:	4e53      	ldr	r6, [pc, #332]	; (8004d9c <MX_GPIO_Init+0x1e4>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c56:	4630      	mov	r0, r6
 8004c58:	f7fc f89e 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	210f      	movs	r1, #15
 8004c60:	4630      	mov	r0, r6
 8004c62:	f7fc f899 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8004c66:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8004da4 <MX_GPIO_Init+0x1ec>
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	210e      	movs	r1, #14
 8004c6e:	4658      	mov	r0, fp
 8004c70:	f7fc f892 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TestPoint_Pin|TS_NSS_Pin|SI_NRST_Pin, GPIO_PIN_RESET);
 8004c74:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8004da8 <MX_GPIO_Init+0x1f0>
 8004c78:	4622      	mov	r2, r4
 8004c7a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8004c7e:	4640      	mov	r0, r8
 8004c80:	f7fc f88a 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8004c84:	f8df a124 	ldr.w	sl, [pc, #292]	; 8004dac <MX_GPIO_Init+0x1f4>
 8004c88:	4622      	mov	r2, r4
 8004c8a:	217f      	movs	r1, #127	; 0x7f
 8004c8c:	4650      	mov	r0, sl
 8004c8e:	f7fc f883 	bl	8000d98 <HAL_GPIO_WritePin>
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_NSS_Pin;
 8004c92:	2324      	movs	r3, #36	; 0x24
 8004c94:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c96:	2501      	movs	r5, #1
 8004c98:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c9c:	f04f 0902 	mov.w	r9, #2
 8004ca0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ca4:	a907      	add	r1, sp, #28
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	f7fb ff86 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 8004cac:	2348      	movs	r3, #72	; 0x48
 8004cae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cb0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cb4:	a907      	add	r1, sp, #28
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f7fb ff7e 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_B_EN_Pin|ESP32_A_EN_Pin;
 8004cbc:	2312      	movs	r3, #18
 8004cbe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cc0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cc6:	a907      	add	r1, sp, #28
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7fb ff75 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
 8004cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cd2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004cd4:	4f32      	ldr	r7, [pc, #200]	; (8004da0 <MX_GPIO_Init+0x1e8>)
 8004cd6:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cd8:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 8004cda:	a907      	add	r1, sp, #28
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f7fb ff6b 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin|LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin 
 8004ce2:	f248 030f 	movw	r3, #32783	; 0x800f
 8004ce6:	9307      	str	r3, [sp, #28]
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cec:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cee:	a907      	add	r1, sp, #28
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7fb ff61 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 8004cf6:	230e      	movs	r3, #14
 8004cf8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cfa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d00:	a907      	add	r1, sp, #28
 8004d02:	4658      	mov	r0, fp
 8004d04:	f7fb ff58 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TestPoint_Pin;
 8004d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d0c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d0e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d12:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(TestPoint_GPIO_Port, &GPIO_InitStruct);
 8004d16:	a907      	add	r1, sp, #28
 8004d18:	4640      	mov	r0, r8
 8004d1a:	f7fb ff4d 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 8004d1e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8004d22:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d24:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d26:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d28:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2a:	a907      	add	r1, sp, #28
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	f7fb ff43 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d36:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d38:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d3e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d40:	2305      	movs	r3, #5
 8004d42:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d44:	a907      	add	r1, sp, #28
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7fb ff36 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8004d4c:	237f      	movs	r3, #127	; 0x7f
 8004d4e:	9307      	str	r3, [sp, #28]
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d50:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d52:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d54:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d56:	a907      	add	r1, sp, #28
 8004d58:	4650      	mov	r0, sl
 8004d5a:	f7fb ff2d 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
 8004d5e:	2320      	movs	r3, #32
 8004d60:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d62:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d64:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 8004d66:	a907      	add	r1, sp, #28
 8004d68:	4640      	mov	r0, r8
 8004d6a:	f7fb ff25 	bl	8000bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004d6e:	4622      	mov	r2, r4
 8004d70:	4621      	mov	r1, r4
 8004d72:	2017      	movs	r0, #23
 8004d74:	f7fb fca8 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d78:	2017      	movs	r0, #23
 8004d7a:	f7fb fcdb 	bl	8000734 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d7e:	4622      	mov	r2, r4
 8004d80:	4621      	mov	r1, r4
 8004d82:	2028      	movs	r0, #40	; 0x28
 8004d84:	f7fb fca0 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d88:	2028      	movs	r0, #40	; 0x28
 8004d8a:	f7fb fcd3 	bl	8000734 <HAL_NVIC_EnableIRQ>

}
 8004d8e:	b00d      	add	sp, #52	; 0x34
 8004d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40020800 	.word	0x40020800
 8004da0:	10210000 	.word	0x10210000
 8004da4:	40020000 	.word	0x40020000
 8004da8:	40020400 	.word	0x40020400
 8004dac:	40020c00 	.word	0x40020c00

08004db0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004db0:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8004db2:	4812      	ldr	r0, [pc, #72]	; (8004dfc <MX_I2C1_Init+0x4c>)
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <MX_I2C1_Init+0x50>)
 8004db6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <MX_I2C1_Init+0x54>)
 8004dba:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004dc4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004dc6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004dc8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004dca:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004dcc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004dce:	f7fc f84d 	bl	8000e6c <HAL_I2C_Init>
 8004dd2:	b950      	cbnz	r0, 8004dea <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4809      	ldr	r0, [pc, #36]	; (8004dfc <MX_I2C1_Init+0x4c>)
 8004dd8:	f7fc fb61 	bl	800149e <HAL_I2CEx_ConfigAnalogFilter>
 8004ddc:	b940      	cbnz	r0, 8004df0 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004dde:	2100      	movs	r1, #0
 8004de0:	4806      	ldr	r0, [pc, #24]	; (8004dfc <MX_I2C1_Init+0x4c>)
 8004de2:	f7fc fb8a 	bl	80014fa <HAL_I2CEx_ConfigDigitalFilter>
 8004de6:	b930      	cbnz	r0, 8004df6 <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 8004de8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004dea:	f000 f897 	bl	8004f1c <Error_Handler>
 8004dee:	e7f1      	b.n	8004dd4 <MX_I2C1_Init+0x24>
    Error_Handler();
 8004df0:	f000 f894 	bl	8004f1c <Error_Handler>
 8004df4:	e7f3      	b.n	8004dde <MX_I2C1_Init+0x2e>
    Error_Handler();
 8004df6:	f000 f891 	bl	8004f1c <Error_Handler>
}
 8004dfa:	e7f5      	b.n	8004de8 <MX_I2C1_Init+0x38>
 8004dfc:	2000455c 	.word	0x2000455c
 8004e00:	40005400 	.word	0x40005400
 8004e04:	6000030d 	.word	0x6000030d

08004e08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e08:	b530      	push	{r4, r5, lr}
 8004e0a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9303      	str	r3, [sp, #12]
 8004e10:	9304      	str	r3, [sp, #16]
 8004e12:	9305      	str	r3, [sp, #20]
 8004e14:	9306      	str	r3, [sp, #24]
 8004e16:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8004e18:	6802      	ldr	r2, [r0, #0]
 8004e1a:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <HAL_I2C_MspInit+0xf8>)
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004e20:	b009      	add	sp, #36	; 0x24
 8004e22:	bd30      	pop	{r4, r5, pc}
 8004e24:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e26:	4d37      	ldr	r5, [pc, #220]	; (8004f04 <HAL_I2C_MspInit+0xfc>)
 8004e28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004e2a:	f043 0302 	orr.w	r3, r3, #2
 8004e2e:	632b      	str	r3, [r5, #48]	; 0x30
 8004e30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e40:	2312      	movs	r3, #18
 8004e42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e44:	2301      	movs	r3, #1
 8004e46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e50:	a903      	add	r1, sp, #12
 8004e52:	482d      	ldr	r0, [pc, #180]	; (8004f08 <HAL_I2C_MspInit+0x100>)
 8004e54:	f7fb feb0 	bl	8000bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e58:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004e5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e5e:	642b      	str	r3, [r5, #64]	; 0x40
 8004e60:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e66:	9302      	str	r3, [sp, #8]
 8004e68:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004e6a:	4828      	ldr	r0, [pc, #160]	; (8004f0c <HAL_I2C_MspInit+0x104>)
 8004e6c:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <HAL_I2C_MspInit+0x108>)
 8004e6e:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004e70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e74:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e76:	2340      	movs	r3, #64	; 0x40
 8004e78:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e82:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e84:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e86:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004e88:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e8e:	6202      	str	r2, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e90:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004e92:	f7fb fcef 	bl	8000874 <HAL_DMA_Init>
 8004e96:	bb60      	cbnz	r0, 8004ef2 <HAL_I2C_MspInit+0xea>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004e98:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <HAL_I2C_MspInit+0x104>)
 8004e9a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e9c:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004e9e:	481d      	ldr	r0, [pc, #116]	; (8004f14 <HAL_I2C_MspInit+0x10c>)
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	; (8004f18 <HAL_I2C_MspInit+0x110>)
 8004ea2:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ea8:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eae:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004eb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004eb4:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004eb6:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004eb8:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004eba:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ebc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ec0:	6202      	str	r2, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ec2:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004ec4:	f7fb fcd6 	bl	8000874 <HAL_DMA_Init>
 8004ec8:	b9b0      	cbnz	r0, 8004ef8 <HAL_I2C_MspInit+0xf0>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_I2C_MspInit+0x10c>)
 8004ecc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004ece:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	201f      	movs	r0, #31
 8004ed6:	f7fb fbf7 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004eda:	201f      	movs	r0, #31
 8004edc:	f7fb fc2a 	bl	8000734 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	2020      	movs	r0, #32
 8004ee6:	f7fb fbef 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004eea:	2020      	movs	r0, #32
 8004eec:	f7fb fc22 	bl	8000734 <HAL_NVIC_EnableIRQ>
}
 8004ef0:	e796      	b.n	8004e20 <HAL_I2C_MspInit+0x18>
      Error_Handler();
 8004ef2:	f000 f813 	bl	8004f1c <Error_Handler>
 8004ef6:	e7cf      	b.n	8004e98 <HAL_I2C_MspInit+0x90>
      Error_Handler();
 8004ef8:	f000 f810 	bl	8004f1c <Error_Handler>
 8004efc:	e7e5      	b.n	8004eca <HAL_I2C_MspInit+0xc2>
 8004efe:	bf00      	nop
 8004f00:	40005400 	.word	0x40005400
 8004f04:	40023800 	.word	0x40023800
 8004f08:	40020400 	.word	0x40020400
 8004f0c:	200044fc 	.word	0x200044fc
 8004f10:	400260a0 	.word	0x400260a0
 8004f14:	2000449c 	.word	0x2000449c
 8004f18:	40026010 	.word	0x40026010

08004f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
    ToggleLED(LED_Red);
 8004f1e:	2001      	movs	r0, #1
 8004f20:	f7ff fcec 	bl	80048fc <ToggleLED>
    HAL_Delay(50);
 8004f24:	2032      	movs	r0, #50	; 0x32
 8004f26:	f7fb fba9 	bl	800067c <HAL_Delay>
    ToggleLED(LED_Red);
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	f7ff fce6 	bl	80048fc <ToggleLED>
    HAL_Delay(50);
 8004f30:	2032      	movs	r0, #50	; 0x32
 8004f32:	f7fb fba3 	bl	800067c <HAL_Delay>
  while(1) 
 8004f36:	e7f2      	b.n	8004f1e <Error_Handler+0x2>

08004f38 <SystemClock_Config>:
{
 8004f38:	b500      	push	{lr}
 8004f3a:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f3c:	2234      	movs	r2, #52	; 0x34
 8004f3e:	2100      	movs	r1, #0
 8004f40:	a82b      	add	r0, sp, #172	; 0xac
 8004f42:	f000 fd63 	bl	8005a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f46:	2100      	movs	r1, #0
 8004f48:	9126      	str	r1, [sp, #152]	; 0x98
 8004f4a:	9127      	str	r1, [sp, #156]	; 0x9c
 8004f4c:	9128      	str	r1, [sp, #160]	; 0xa0
 8004f4e:	9129      	str	r1, [sp, #164]	; 0xa4
 8004f50:	912a      	str	r1, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f52:	2290      	movs	r2, #144	; 0x90
 8004f54:	a802      	add	r0, sp, #8
 8004f56:	f000 fd59 	bl	8005a0c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <SystemClock_Config+0xd0>)
 8004f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f6e:	4b27      	ldr	r3, [pc, #156]	; (800500c <SystemClock_Config+0xd4>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f82:	2301      	movs	r3, #1
 8004f84:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004f86:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004f8a:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004f94:	9232      	str	r2, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004f96:	2219      	movs	r2, #25
 8004f98:	9233      	str	r2, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8004f9a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004f9e:	9234      	str	r2, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fa0:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004fa2:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fa4:	a82b      	add	r0, sp, #172	; 0xac
 8004fa6:	f7fc fb13 	bl	80015d0 <HAL_RCC_OscConfig>
 8004faa:	bb20      	cbnz	r0, 8004ff6 <SystemClock_Config+0xbe>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004fac:	f7fc fad2 	bl	8001554 <HAL_PWREx_EnableOverDrive>
 8004fb0:	bb18      	cbnz	r0, 8004ffa <SystemClock_Config+0xc2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fb2:	230f      	movs	r3, #15
 8004fb4:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004fbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004fc2:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fc8:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004fca:	2107      	movs	r1, #7
 8004fcc:	a826      	add	r0, sp, #152	; 0x98
 8004fce:	f7fc fd3b 	bl	8001a48 <HAL_RCC_ClockConfig>
 8004fd2:	b9a0      	cbnz	r0, 8004ffe <SystemClock_Config+0xc6>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_SAI2
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <SystemClock_Config+0xd8>)
 8004fd6:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PIN;
 8004fd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004fdc:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8004fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fe6:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004fe8:	a802      	add	r0, sp, #8
 8004fea:	f7fc fdf5 	bl	8001bd8 <HAL_RCCEx_PeriphCLKConfig>
 8004fee:	b940      	cbnz	r0, 8005002 <SystemClock_Config+0xca>
}
 8004ff0:	b039      	add	sp, #228	; 0xe4
 8004ff2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004ff6:	f7ff ff91 	bl	8004f1c <Error_Handler>
    Error_Handler();
 8004ffa:	f7ff ff8f 	bl	8004f1c <Error_Handler>
    Error_Handler();
 8004ffe:	f7ff ff8d 	bl	8004f1c <Error_Handler>
    Error_Handler();
 8005002:	f7ff ff8b 	bl	8004f1c <Error_Handler>
 8005006:	bf00      	nop
 8005008:	40023800 	.word	0x40023800
 800500c:	40007000 	.word	0x40007000
 8005010:	00104010 	.word	0x00104010

08005014 <main>:
{
 8005014:	b508      	push	{r3, lr}
  __ASM volatile ("dsb 0xF":::"memory");
 8005016:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800501a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800501e:	4b2d      	ldr	r3, [pc, #180]	; (80050d4 <main+0xc0>)
 8005020:	2100      	movs	r1, #0
 8005022:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800502a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005034:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005036:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800503a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800503e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005042:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005046:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800504a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800504e:	e000      	b.n	8005052 <main+0x3e>
    } while(sets-- != 0U);
 8005050:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005052:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005056:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800505a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800505e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8005062:	491c      	ldr	r1, [pc, #112]	; (80050d4 <main+0xc0>)
 8005064:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8005068:	4613      	mov	r3, r2
 800506a:	3a01      	subs	r2, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1f2      	bne.n	8005056 <main+0x42>
    } while(sets-- != 0U);
 8005070:	1e43      	subs	r3, r0, #1
 8005072:	2800      	cmp	r0, #0
 8005074:	d1ec      	bne.n	8005050 <main+0x3c>
 8005076:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800507a:	694b      	ldr	r3, [r1, #20]
 800507c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005080:	614b      	str	r3, [r1, #20]
 8005082:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005086:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800508a:	f7fb fad9 	bl	8000640 <HAL_Init>
  SystemClock_Config();
 800508e:	f7ff ff53 	bl	8004f38 <SystemClock_Config>
  MX_GPIO_Init();
 8005092:	f7ff fd91 	bl	8004bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005096:	f7ff fc4d 	bl	8004934 <MX_DMA_Init>
  MX_I2C1_Init();
 800509a:	f7ff fe89 	bl	8004db0 <MX_I2C1_Init>
  MX_SAI2_Init();
 800509e:	f000 f821 	bl	80050e4 <MX_SAI2_Init>
  MX_SPI1_Init();
 80050a2:	f000 f907 	bl	80052b4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80050a6:	f000 f92b 	bl	8005300 <MX_SPI2_Init>
  MX_SPI3_Init();
 80050aa:	f000 f94f 	bl	800534c <MX_SPI3_Init>
  MX_TIM1_Init();
 80050ae:	f000 fbe3 	bl	8005878 <MX_TIM1_Init>
  MX_TIM2_Init();
 80050b2:	f000 fac3 	bl	800563c <MX_TIM2_Init>
  ILI9341_Initialize(&hspi1, 0);
 80050b6:	2100      	movs	r1, #0
 80050b8:	4807      	ldr	r0, [pc, #28]	; (80050d8 <main+0xc4>)
 80050ba:	f7ff f803 	bl	80040c4 <ILI9341_Initialize>
  HAL_GPIO_WritePin(LCD_NBACKLIGHT_GPIO_Port, LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET); // Backlight on.
 80050be:	2200      	movs	r2, #0
 80050c0:	2108      	movs	r1, #8
 80050c2:	4806      	ldr	r0, [pc, #24]	; (80050dc <main+0xc8>)
 80050c4:	f7fb fe68 	bl	8000d98 <HAL_GPIO_WritePin>
  XPT2046_Initialize(&hspi2);
 80050c8:	4805      	ldr	r0, [pc, #20]	; (80050e0 <main+0xcc>)
 80050ca:	f7ff fbff 	bl	80048cc <XPT2046_Initialize>
  Go();
 80050ce:	f7ff fcfd 	bl	8004acc <Go>
  while (1)
 80050d2:	e7fe      	b.n	80050d2 <main+0xbe>
 80050d4:	e000ed00 	.word	0xe000ed00
 80050d8:	200047d4 	.word	0x200047d4
 80050dc:	40020800 	.word	0x40020800
 80050e0:	20004838 	.word	0x20004838

080050e4 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80050e4:	b508      	push	{r3, lr}

  hsai_BlockA2.Instance = SAI2_Block_A;
 80050e6:	4817      	ldr	r0, [pc, #92]	; (8005144 <MX_SAI2_Init+0x60>)
 80050e8:	4b17      	ldr	r3, [pc, #92]	; (8005148 <MX_SAI2_Init+0x64>)
 80050ea:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80050ec:	2100      	movs	r1, #0
 80050ee:	6041      	str	r1, [r0, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80050f0:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80050f2:	6101      	str	r1, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80050f4:	6141      	str	r1, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80050f6:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80050f8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80050fc:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80050fe:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8005100:	6241      	str	r1, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8005102:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005104:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8005106:	2302      	movs	r3, #2
 8005108:	2203      	movs	r2, #3
 800510a:	f7fd fbff 	bl	800290c <HAL_SAI_InitProtocol>
 800510e:	b990      	cbnz	r0, 8005136 <MX_SAI2_Init+0x52>
  {
    Error_Handler();
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8005110:	480e      	ldr	r0, [pc, #56]	; (800514c <MX_SAI2_Init+0x68>)
 8005112:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <MX_SAI2_Init+0x6c>)
 8005114:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8005116:	2203      	movs	r2, #3
 8005118:	6042      	str	r2, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800511a:	2301      	movs	r3, #1
 800511c:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800511e:	2100      	movs	r1, #0
 8005120:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8005122:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005124:	60c1      	str	r1, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8005126:	6241      	str	r1, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8005128:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800512a:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 800512c:	2302      	movs	r3, #2
 800512e:	f7fd fbed 	bl	800290c <HAL_SAI_InitProtocol>
 8005132:	b918      	cbnz	r0, 800513c <MX_SAI2_Init+0x58>
  {
    Error_Handler();
  }

}
 8005134:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005136:	f7ff fef1 	bl	8004f1c <Error_Handler>
 800513a:	e7e9      	b.n	8005110 <MX_SAI2_Init+0x2c>
    Error_Handler();
 800513c:	f7ff feee 	bl	8004f1c <Error_Handler>
}
 8005140:	e7f8      	b.n	8005134 <MX_SAI2_Init+0x50>
 8005142:	bf00      	nop
 8005144:	2000466c 	.word	0x2000466c
 8005148:	40015c04 	.word	0x40015c04
 800514c:	200046f0 	.word	0x200046f0
 8005150:	40015c24 	.word	0x40015c24

08005154 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8005154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005156:	b089      	sub	sp, #36	; 0x24
 8005158:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800515a:	6802      	ldr	r2, [r0, #0]
 800515c:	4b4a      	ldr	r3, [pc, #296]	; (8005288 <HAL_SAI_MspInit+0x134>)
 800515e:	429a      	cmp	r2, r3
 8005160:	d005      	beq.n	800516e <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
    }
    if(hsai->Instance==SAI2_Block_B)
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	4b49      	ldr	r3, [pc, #292]	; (800528c <HAL_SAI_MspInit+0x138>)
 8005166:	429a      	cmp	r2, r3
 8005168:	d04d      	beq.n	8005206 <HAL_SAI_MspInit+0xb2>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
    }
}
 800516a:	b009      	add	sp, #36	; 0x24
 800516c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI2_client == 0)
 800516e:	4b48      	ldr	r3, [pc, #288]	; (8005290 <HAL_SAI_MspInit+0x13c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b94b      	cbnz	r3, 8005188 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005174:	4a47      	ldr	r2, [pc, #284]	; (8005294 <HAL_SAI_MspInit+0x140>)
 8005176:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005178:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800517c:	6451      	str	r1, [r2, #68]	; 0x44
 800517e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005180:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005184:	9201      	str	r2, [sp, #4]
 8005186:	9a01      	ldr	r2, [sp, #4]
    SAI2_client ++;
 8005188:	3301      	adds	r3, #1
 800518a:	4a41      	ldr	r2, [pc, #260]	; (8005290 <HAL_SAI_MspInit+0x13c>)
 800518c:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
 800518e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005192:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005194:	2702      	movs	r7, #2
 8005196:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005198:	2500      	movs	r5, #0
 800519a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800519e:	260a      	movs	r6, #10
 80051a0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051a2:	a903      	add	r1, sp, #12
 80051a4:	483c      	ldr	r0, [pc, #240]	; (8005298 <HAL_SAI_MspInit+0x144>)
 80051a6:	f7fb fd07 	bl	8000bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 80051aa:	2301      	movs	r3, #1
 80051ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ae:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80051b4:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 80051b6:	a903      	add	r1, sp, #12
 80051b8:	4838      	ldr	r0, [pc, #224]	; (800529c <HAL_SAI_MspInit+0x148>)
 80051ba:	f7fb fcfd 	bl	8000bb8 <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA2_Stream2;
 80051be:	4838      	ldr	r0, [pc, #224]	; (80052a0 <HAL_SAI_MspInit+0x14c>)
 80051c0:	4b38      	ldr	r3, [pc, #224]	; (80052a4 <HAL_SAI_MspInit+0x150>)
 80051c2:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 80051c4:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 80051c8:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051ca:	2340      	movs	r3, #64	; 0x40
 80051cc:	6083      	str	r3, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80051ce:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80051d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d4:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051da:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80051dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051e0:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80051e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051e6:	61c3      	str	r3, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 80051e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051ec:	6203      	str	r3, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051ee:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80051f0:	f7fb fb40 	bl	8000874 <HAL_DMA_Init>
 80051f4:	b920      	cbnz	r0, 8005200 <HAL_SAI_MspInit+0xac>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80051f6:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <HAL_SAI_MspInit+0x14c>)
 80051f8:	6723      	str	r3, [r4, #112]	; 0x70
 80051fa:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80051fc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80051fe:	e7b0      	b.n	8005162 <HAL_SAI_MspInit+0xe>
      Error_Handler();
 8005200:	f7ff fe8c 	bl	8004f1c <Error_Handler>
 8005204:	e7f7      	b.n	80051f6 <HAL_SAI_MspInit+0xa2>
      if (SAI2_client == 0)
 8005206:	4b22      	ldr	r3, [pc, #136]	; (8005290 <HAL_SAI_MspInit+0x13c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	b94b      	cbnz	r3, 8005220 <HAL_SAI_MspInit+0xcc>
       __HAL_RCC_SAI2_CLK_ENABLE();
 800520c:	4a21      	ldr	r2, [pc, #132]	; (8005294 <HAL_SAI_MspInit+0x140>)
 800520e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005210:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005214:	6451      	str	r1, [r2, #68]	; 0x44
 8005216:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005218:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800521c:	9202      	str	r2, [sp, #8]
 800521e:	9a02      	ldr	r2, [sp, #8]
    SAI2_client ++;
 8005220:	3301      	adds	r3, #1
 8005222:	4a1b      	ldr	r2, [pc, #108]	; (8005290 <HAL_SAI_MspInit+0x13c>)
 8005224:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
 8005226:	2301      	movs	r3, #1
 8005228:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522a:	2302      	movs	r3, #2
 800522c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522e:	2500      	movs	r5, #0
 8005230:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005232:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005234:	230a      	movs	r3, #10
 8005236:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8005238:	a903      	add	r1, sp, #12
 800523a:	481b      	ldr	r0, [pc, #108]	; (80052a8 <HAL_SAI_MspInit+0x154>)
 800523c:	f7fb fcbc 	bl	8000bb8 <HAL_GPIO_Init>
    hdma_sai2_b.Instance = DMA2_Stream6;
 8005240:	481a      	ldr	r0, [pc, #104]	; (80052ac <HAL_SAI_MspInit+0x158>)
 8005242:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <HAL_SAI_MspInit+0x15c>)
 8005244:	6003      	str	r3, [r0, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 8005246:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800524a:	6043      	str	r3, [r0, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800524c:	6085      	str	r5, [r0, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800524e:	60c5      	str	r5, [r0, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8005250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005254:	6103      	str	r3, [r0, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800525a:	6143      	str	r3, [r0, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800525c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005260:	6183      	str	r3, [r0, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8005262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005266:	61c3      	str	r3, [r0, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8005268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800526c:	6203      	str	r3, [r0, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800526e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8005270:	f7fb fb00 	bl	8000874 <HAL_DMA_Init>
 8005274:	b920      	cbnz	r0, 8005280 <HAL_SAI_MspInit+0x12c>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <HAL_SAI_MspInit+0x158>)
 8005278:	6723      	str	r3, [r4, #112]	; 0x70
 800527a:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 800527c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800527e:	e774      	b.n	800516a <HAL_SAI_MspInit+0x16>
      Error_Handler();
 8005280:	f7ff fe4c 	bl	8004f1c <Error_Handler>
 8005284:	e7f7      	b.n	8005276 <HAL_SAI_MspInit+0x122>
 8005286:	bf00      	nop
 8005288:	40015c04 	.word	0x40015c04
 800528c:	40015c24 	.word	0x40015c24
 8005290:	200045a8 	.word	0x200045a8
 8005294:	40023800 	.word	0x40023800
 8005298:	40020c00 	.word	0x40020c00
 800529c:	40021000 	.word	0x40021000
 80052a0:	200045ac 	.word	0x200045ac
 80052a4:	40026440 	.word	0x40026440
 80052a8:	40020000 	.word	0x40020000
 80052ac:	2000460c 	.word	0x2000460c
 80052b0:	400264a0 	.word	0x400264a0

080052b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80052b4:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 80052b6:	4810      	ldr	r0, [pc, #64]	; (80052f8 <MX_SPI1_Init+0x44>)
 80052b8:	4b10      	ldr	r3, [pc, #64]	; (80052fc <MX_SPI1_Init+0x48>)
 80052ba:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80052bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80052c0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80052c2:	2300      	movs	r3, #0
 80052c4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80052ca:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052cc:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052ce:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d4:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052d6:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052d8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052da:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052dc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80052de:	2207      	movs	r2, #7
 80052e0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80052e2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80052e4:	2308      	movs	r3, #8
 80052e6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80052e8:	f7fd fbfa 	bl	8002ae0 <HAL_SPI_Init>
 80052ec:	b900      	cbnz	r0, 80052f0 <MX_SPI1_Init+0x3c>
  {
    Error_Handler();
  }

}
 80052ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80052f0:	f7ff fe14 	bl	8004f1c <Error_Handler>
}
 80052f4:	e7fb      	b.n	80052ee <MX_SPI1_Init+0x3a>
 80052f6:	bf00      	nop
 80052f8:	200047d4 	.word	0x200047d4
 80052fc:	40013000 	.word	0x40013000

08005300 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005300:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8005302:	4810      	ldr	r0, [pc, #64]	; (8005344 <MX_SPI2_Init+0x44>)
 8005304:	4b10      	ldr	r3, [pc, #64]	; (8005348 <MX_SPI2_Init+0x48>)
 8005306:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005308:	f44f 7382 	mov.w	r3, #260	; 0x104
 800530c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800530e:	2300      	movs	r3, #0
 8005310:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005312:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005316:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005318:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800531a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005322:	2220      	movs	r2, #32
 8005324:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005326:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005328:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800532a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800532c:	2207      	movs	r2, #7
 800532e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005330:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005332:	2308      	movs	r3, #8
 8005334:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005336:	f7fd fbd3 	bl	8002ae0 <HAL_SPI_Init>
 800533a:	b900      	cbnz	r0, 800533e <MX_SPI2_Init+0x3e>
  {
    Error_Handler();
  }

}
 800533c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800533e:	f7ff fded 	bl	8004f1c <Error_Handler>
}
 8005342:	e7fb      	b.n	800533c <MX_SPI2_Init+0x3c>
 8005344:	20004838 	.word	0x20004838
 8005348:	40003800 	.word	0x40003800

0800534c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800534c:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 800534e:	4810      	ldr	r0, [pc, #64]	; (8005390 <MX_SPI3_Init+0x44>)
 8005350:	4b10      	ldr	r3, [pc, #64]	; (8005394 <MX_SPI3_Init+0x48>)
 8005352:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005354:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005358:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800535a:	2300      	movs	r3, #0
 800535c:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800535e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005362:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005364:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005366:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800536c:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800536e:	2210      	movs	r2, #16
 8005370:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005372:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005374:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005376:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005378:	2207      	movs	r2, #7
 800537a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800537c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800537e:	2308      	movs	r3, #8
 8005380:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005382:	f7fd fbad 	bl	8002ae0 <HAL_SPI_Init>
 8005386:	b900      	cbnz	r0, 800538a <MX_SPI3_Init+0x3e>
  {
    Error_Handler();
  }

}
 8005388:	bd08      	pop	{r3, pc}
    Error_Handler();
 800538a:	f7ff fdc7 	bl	8004f1c <Error_Handler>
}
 800538e:	e7fb      	b.n	8005388 <MX_SPI3_Init+0x3c>
 8005390:	2000489c 	.word	0x2000489c
 8005394:	40003c00 	.word	0x40003c00

08005398 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005398:	b530      	push	{r4, r5, lr}
 800539a:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800539c:	2300      	movs	r3, #0
 800539e:	9307      	str	r3, [sp, #28]
 80053a0:	9308      	str	r3, [sp, #32]
 80053a2:	9309      	str	r3, [sp, #36]	; 0x24
 80053a4:	930a      	str	r3, [sp, #40]	; 0x28
 80053a6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(spiHandle->Instance==SPI1)
 80053a8:	6803      	ldr	r3, [r0, #0]
 80053aa:	4a47      	ldr	r2, [pc, #284]	; (80054c8 <HAL_SPI_MspInit+0x130>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d007      	beq.n	80053c0 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80053b0:	4a46      	ldr	r2, [pc, #280]	; (80054cc <HAL_SPI_MspInit+0x134>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d046      	beq.n	8005444 <HAL_SPI_MspInit+0xac>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 80053b6:	4a46      	ldr	r2, [pc, #280]	; (80054d0 <HAL_SPI_MspInit+0x138>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d064      	beq.n	8005486 <HAL_SPI_MspInit+0xee>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80053bc:	b00d      	add	sp, #52	; 0x34
 80053be:	bd30      	pop	{r4, r5, pc}
 80053c0:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053c2:	4b44      	ldr	r3, [pc, #272]	; (80054d4 <HAL_SPI_MspInit+0x13c>)
 80053c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053ca:	645a      	str	r2, [r3, #68]	; 0x44
 80053cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053d2:	9201      	str	r2, [sp, #4]
 80053d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	9302      	str	r3, [sp, #8]
 80053e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80053e8:	23e0      	movs	r3, #224	; 0xe0
 80053ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ec:	2302      	movs	r3, #2
 80053ee:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f0:	2503      	movs	r5, #3
 80053f2:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053f4:	2305      	movs	r3, #5
 80053f6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f8:	a907      	add	r1, sp, #28
 80053fa:	4837      	ldr	r0, [pc, #220]	; (80054d8 <HAL_SPI_MspInit+0x140>)
 80053fc:	f7fb fbdc 	bl	8000bb8 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8005400:	4836      	ldr	r0, [pc, #216]	; (80054dc <HAL_SPI_MspInit+0x144>)
 8005402:	4b37      	ldr	r3, [pc, #220]	; (80054e0 <HAL_SPI_MspInit+0x148>)
 8005404:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8005406:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800540a:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800540c:	2340      	movs	r3, #64	; 0x40
 800540e:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005410:	2300      	movs	r3, #0
 8005412:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005418:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800541a:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800541c:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800541e:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005420:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005424:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005426:	2204      	movs	r2, #4
 8005428:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800542a:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800542c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800542e:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005430:	f7fb fa20 	bl	8000874 <HAL_DMA_Init>
 8005434:	b918      	cbnz	r0, 800543e <HAL_SPI_MspInit+0xa6>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005436:	4b29      	ldr	r3, [pc, #164]	; (80054dc <HAL_SPI_MspInit+0x144>)
 8005438:	6563      	str	r3, [r4, #84]	; 0x54
 800543a:	639c      	str	r4, [r3, #56]	; 0x38
 800543c:	e7be      	b.n	80053bc <HAL_SPI_MspInit+0x24>
      Error_Handler();
 800543e:	f7ff fd6d 	bl	8004f1c <Error_Handler>
 8005442:	e7f8      	b.n	8005436 <HAL_SPI_MspInit+0x9e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005444:	4b23      	ldr	r3, [pc, #140]	; (80054d4 <HAL_SPI_MspInit+0x13c>)
 8005446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
 800544e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005450:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005454:	9203      	str	r2, [sp, #12]
 8005456:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545a:	f042 0202 	orr.w	r2, r2, #2
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	9304      	str	r3, [sp, #16]
 8005468:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 800546a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800546e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005470:	2302      	movs	r3, #2
 8005472:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005474:	2303      	movs	r3, #3
 8005476:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005478:	2305      	movs	r3, #5
 800547a:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800547c:	a907      	add	r1, sp, #28
 800547e:	4819      	ldr	r0, [pc, #100]	; (80054e4 <HAL_SPI_MspInit+0x14c>)
 8005480:	f7fb fb9a 	bl	8000bb8 <HAL_GPIO_Init>
 8005484:	e79a      	b.n	80053bc <HAL_SPI_MspInit+0x24>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005486:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <HAL_SPI_MspInit+0x13c>)
 8005488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800548a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800548e:	641a      	str	r2, [r3, #64]	; 0x40
 8005490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005492:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005496:	9205      	str	r2, [sp, #20]
 8005498:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800549a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549c:	f042 0204 	orr.w	r2, r2, #4
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	9306      	str	r3, [sp, #24]
 80054aa:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GENSPI_SCK_Pin|GENSPI_MISO_Pin|GENSPI_MOSI_Pin;
 80054ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80054b0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b2:	2302      	movs	r3, #2
 80054b4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054b6:	2303      	movs	r3, #3
 80054b8:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054ba:	2306      	movs	r3, #6
 80054bc:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054be:	a907      	add	r1, sp, #28
 80054c0:	4809      	ldr	r0, [pc, #36]	; (80054e8 <HAL_SPI_MspInit+0x150>)
 80054c2:	f7fb fb79 	bl	8000bb8 <HAL_GPIO_Init>
}
 80054c6:	e779      	b.n	80053bc <HAL_SPI_MspInit+0x24>
 80054c8:	40013000 	.word	0x40013000
 80054cc:	40003800 	.word	0x40003800
 80054d0:	40003c00 	.word	0x40003c00
 80054d4:	40023800 	.word	0x40023800
 80054d8:	40020000 	.word	0x40020000
 80054dc:	20004774 	.word	0x20004774
 80054e0:	40026488 	.word	0x40026488
 80054e4:	40020400 	.word	0x40020400
 80054e8:	40020800 	.word	0x40020800

080054ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054ec:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <HAL_MspInit+0x2c>)
 80054f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40
 80054f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054fa:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80054fe:	9200      	str	r2, [sp, #0]
 8005500:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005508:	645a      	str	r2, [r3, #68]	; 0x44
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005514:	b002      	add	sp, #8
 8005516:	4770      	bx	lr
 8005518:	40023800 	.word	0x40023800

0800551c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800551c:	4770      	bx	lr

0800551e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800551e:	e7fe      	b.n	800551e <HardFault_Handler>

08005520 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005520:	e7fe      	b.n	8005520 <MemManage_Handler>

08005522 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005522:	e7fe      	b.n	8005522 <BusFault_Handler>

08005524 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005524:	e7fe      	b.n	8005524 <UsageFault_Handler>

08005526 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005526:	4770      	bx	lr

08005528 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005528:	4770      	bx	lr

0800552a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800552a:	4770      	bx	lr

0800552c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800552c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800552e:	f7fb f893 	bl	8000658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005532:	bd08      	pop	{r3, pc}

08005534 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005534:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005536:	4802      	ldr	r0, [pc, #8]	; (8005540 <DMA1_Stream0_IRQHandler+0xc>)
 8005538:	f7fb fa50 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800553c:	bd08      	pop	{r3, pc}
 800553e:	bf00      	nop
 8005540:	2000449c 	.word	0x2000449c

08005544 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005544:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8005546:	4802      	ldr	r0, [pc, #8]	; (8005550 <DMA1_Stream5_IRQHandler+0xc>)
 8005548:	f7fb fa48 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800554c:	bd08      	pop	{r3, pc}
 800554e:	bf00      	nop
 8005550:	20004960 	.word	0x20004960

08005554 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005554:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005556:	4802      	ldr	r0, [pc, #8]	; (8005560 <DMA1_Stream6_IRQHandler+0xc>)
 8005558:	f7fb fa40 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800555c:	bd08      	pop	{r3, pc}
 800555e:	bf00      	nop
 8005560:	200044fc 	.word	0x200044fc

08005564 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005564:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005566:	2020      	movs	r0, #32
 8005568:	f7fb fc26 	bl	8000db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800556c:	bd08      	pop	{r3, pc}
	...

08005570 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005570:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005572:	4802      	ldr	r0, [pc, #8]	; (800557c <TIM2_IRQHandler+0xc>)
 8005574:	f7fd ff33 	bl	80033de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005578:	bd08      	pop	{r3, pc}
 800557a:	bf00      	nop
 800557c:	20004a00 	.word	0x20004a00

08005580 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005580:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005582:	4802      	ldr	r0, [pc, #8]	; (800558c <I2C1_EV_IRQHandler+0xc>)
 8005584:	f7fb fcd0 	bl	8000f28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005588:	bd08      	pop	{r3, pc}
 800558a:	bf00      	nop
 800558c:	2000455c 	.word	0x2000455c

08005590 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005590:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005592:	4802      	ldr	r0, [pc, #8]	; (800559c <I2C1_ER_IRQHandler+0xc>)
 8005594:	f7fb ff39 	bl	800140a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005598:	bd08      	pop	{r3, pc}
 800559a:	bf00      	nop
 800559c:	2000455c 	.word	0x2000455c

080055a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80055a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80055a6:	f7fb fc07 	bl	8000db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055aa:	bd08      	pop	{r3, pc}

080055ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80055ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80055ae:	4802      	ldr	r0, [pc, #8]	; (80055b8 <DMA2_Stream2_IRQHandler+0xc>)
 80055b0:	f7fb fa14 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80055b4:	bd08      	pop	{r3, pc}
 80055b6:	bf00      	nop
 80055b8:	200045ac 	.word	0x200045ac

080055bc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80055bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80055be:	4802      	ldr	r0, [pc, #8]	; (80055c8 <DMA2_Stream3_IRQHandler+0xc>)
 80055c0:	f7fb fa0c 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80055c4:	bd08      	pop	{r3, pc}
 80055c6:	bf00      	nop
 80055c8:	20004900 	.word	0x20004900

080055cc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80055cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80055ce:	4802      	ldr	r0, [pc, #8]	; (80055d8 <DMA2_Stream5_IRQHandler+0xc>)
 80055d0:	f7fb fa04 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80055d4:	bd08      	pop	{r3, pc}
 80055d6:	bf00      	nop
 80055d8:	20004774 	.word	0x20004774

080055dc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80055dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80055de:	4802      	ldr	r0, [pc, #8]	; (80055e8 <DMA2_Stream6_IRQHandler+0xc>)
 80055e0:	f7fb f9fc 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80055e4:	bd08      	pop	{r3, pc}
 80055e6:	bf00      	nop
 80055e8:	2000460c 	.word	0x2000460c

080055ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055ec:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055ee:	4a0f      	ldr	r2, [pc, #60]	; (800562c <SystemInit+0x40>)
 80055f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80055f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <SystemInit+0x44>)
 80055fe:	6819      	ldr	r1, [r3, #0]
 8005600:	f041 0101 	orr.w	r1, r1, #1
 8005604:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005606:	2000      	movs	r0, #0
 8005608:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800560a:	681c      	ldr	r4, [r3, #0]
 800560c:	4909      	ldr	r1, [pc, #36]	; (8005634 <SystemInit+0x48>)
 800560e:	4021      	ands	r1, r4
 8005610:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005612:	4909      	ldr	r1, [pc, #36]	; (8005638 <SystemInit+0x4c>)
 8005614:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005616:	6819      	ldr	r1, [r3, #0]
 8005618:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800561c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800561e:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005620:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005624:	6093      	str	r3, [r2, #8]
#endif
}
 8005626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	e000ed00 	.word	0xe000ed00
 8005630:	40023800 	.word	0x40023800
 8005634:	fef6ffff 	.word	0xfef6ffff
 8005638:	24003010 	.word	0x24003010

0800563c <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800563c:	b500      	push	{lr}
 800563e:	b08d      	sub	sp, #52	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005640:	2300      	movs	r3, #0
 8005642:	9308      	str	r3, [sp, #32]
 8005644:	9309      	str	r3, [sp, #36]	; 0x24
 8005646:	930a      	str	r3, [sp, #40]	; 0x28
 8005648:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800564a:	9305      	str	r3, [sp, #20]
 800564c:	9306      	str	r3, [sp, #24]
 800564e:	9307      	str	r3, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	9302      	str	r3, [sp, #8]
 8005654:	9303      	str	r3, [sp, #12]
 8005656:	9304      	str	r3, [sp, #16]

  htim2.Instance = TIM2;
 8005658:	481f      	ldr	r0, [pc, #124]	; (80056d8 <MX_TIM2_Init+0x9c>)
 800565a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800565e:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8005660:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005662:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8005664:	f04f 32ff 	mov.w	r2, #4294967295
 8005668:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800566a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800566c:	2380      	movs	r3, #128	; 0x80
 800566e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005670:	f7fe f814 	bl	800369c <HAL_TIM_Base_Init>
 8005674:	bb08      	cbnz	r0, 80056ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800567a:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800567c:	a908      	add	r1, sp, #32
 800567e:	4816      	ldr	r0, [pc, #88]	; (80056d8 <MX_TIM2_Init+0x9c>)
 8005680:	f7fe f9e4 	bl	8003a4c <HAL_TIM_ConfigClockSource>
 8005684:	b9e0      	cbnz	r0, 80056c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005686:	4814      	ldr	r0, [pc, #80]	; (80056d8 <MX_TIM2_Init+0x9c>)
 8005688:	f7fe f83c 	bl	8003704 <HAL_TIM_IC_Init>
 800568c:	b9d8      	cbnz	r0, 80056c6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800568e:	2300      	movs	r3, #0
 8005690:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005692:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005694:	a905      	add	r1, sp, #20
 8005696:	4810      	ldr	r0, [pc, #64]	; (80056d8 <MX_TIM2_Init+0x9c>)
 8005698:	f7fe faf4 	bl	8003c84 <HAL_TIMEx_MasterConfigSynchronization>
 800569c:	b9b0      	cbnz	r0, 80056cc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800569e:	2200      	movs	r2, #0
 80056a0:	9201      	str	r2, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80056a2:	2301      	movs	r3, #1
 80056a4:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80056a6:	9203      	str	r2, [sp, #12]
  sConfigIC.ICFilter = 0;
 80056a8:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80056aa:	a901      	add	r1, sp, #4
 80056ac:	480a      	ldr	r0, [pc, #40]	; (80056d8 <MX_TIM2_Init+0x9c>)
 80056ae:	f7fe f95f 	bl	8003970 <HAL_TIM_IC_ConfigChannel>
 80056b2:	b970      	cbnz	r0, 80056d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
  }

}
 80056b4:	b00d      	add	sp, #52	; 0x34
 80056b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80056ba:	f7ff fc2f 	bl	8004f1c <Error_Handler>
 80056be:	e7da      	b.n	8005676 <MX_TIM2_Init+0x3a>
    Error_Handler();
 80056c0:	f7ff fc2c 	bl	8004f1c <Error_Handler>
 80056c4:	e7df      	b.n	8005686 <MX_TIM2_Init+0x4a>
    Error_Handler();
 80056c6:	f7ff fc29 	bl	8004f1c <Error_Handler>
 80056ca:	e7e0      	b.n	800568e <MX_TIM2_Init+0x52>
    Error_Handler();
 80056cc:	f7ff fc26 	bl	8004f1c <Error_Handler>
 80056d0:	e7e5      	b.n	800569e <MX_TIM2_Init+0x62>
    Error_Handler();
 80056d2:	f7ff fc23 	bl	8004f1c <Error_Handler>
}
 80056d6:	e7ed      	b.n	80056b4 <MX_TIM2_Init+0x78>
 80056d8:	20004a00 	.word	0x20004a00

080056dc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 80056dc:	6802      	ldr	r2, [r0, #0]
 80056de:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <HAL_TIM_PWM_MspInit+0x78>)
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d000      	beq.n	80056e6 <HAL_TIM_PWM_MspInit+0xa>
 80056e4:	4770      	bx	lr
{
 80056e6:	b510      	push	{r4, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056ec:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80056f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	645a      	str	r2, [r3, #68]	; 0x44
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	9b01      	ldr	r3, [sp, #4]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 8005702:	4815      	ldr	r0, [pc, #84]	; (8005758 <HAL_TIM_PWM_MspInit+0x7c>)
 8005704:	4b15      	ldr	r3, [pc, #84]	; (800575c <HAL_TIM_PWM_MspInit+0x80>)
 8005706:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8005708:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800570c:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800570e:	2340      	movs	r3, #64	; 0x40
 8005710:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005712:	2300      	movs	r3, #0
 8005714:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800571a:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800571c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005720:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005722:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005726:	6182      	str	r2, [r0, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8005728:	61c3      	str	r3, [r0, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800572a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800572e:	6202      	str	r2, [r0, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005730:	2204      	movs	r2, #4
 8005732:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005734:	2203      	movs	r2, #3
 8005736:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8005738:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800573a:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800573c:	f7fb f89a 	bl	8000874 <HAL_DMA_Init>
 8005740:	b920      	cbnz	r0, 800574c <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8005742:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_TIM_PWM_MspInit+0x7c>)
 8005744:	6263      	str	r3, [r4, #36]	; 0x24
 8005746:	639c      	str	r4, [r3, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005748:	b002      	add	sp, #8
 800574a:	bd10      	pop	{r4, pc}
      Error_Handler();
 800574c:	f7ff fbe6 	bl	8004f1c <Error_Handler>
 8005750:	e7f7      	b.n	8005742 <HAL_TIM_PWM_MspInit+0x66>
 8005752:	bf00      	nop
 8005754:	40010000 	.word	0x40010000
 8005758:	20004900 	.word	0x20004900
 800575c:	40026458 	.word	0x40026458

08005760 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005760:	b510      	push	{r4, lr}
 8005762:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005764:	2300      	movs	r3, #0
 8005766:	9303      	str	r3, [sp, #12]
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	9305      	str	r3, [sp, #20]
 800576c:	9306      	str	r3, [sp, #24]
 800576e:	9307      	str	r3, [sp, #28]
  if(tim_baseHandle->Instance==TIM2)
 8005770:	6803      	ldr	r3, [r0, #0]
 8005772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005776:	d001      	beq.n	800577c <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005778:	b008      	add	sp, #32
 800577a:	bd10      	pop	{r4, pc}
 800577c:	4604      	mov	r4, r0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800577e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8005782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
 800578a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800578c:	f002 0201 	and.w	r2, r2, #1
 8005790:	9201      	str	r2, [sp, #4]
 8005792:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	9302      	str	r3, [sp, #8]
 80057a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80057a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ac:	2302      	movs	r3, #2
 80057ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80057b0:	2301      	movs	r3, #1
 80057b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b4:	a903      	add	r1, sp, #12
 80057b6:	4817      	ldr	r0, [pc, #92]	; (8005814 <HAL_TIM_Base_MspInit+0xb4>)
 80057b8:	f7fb f9fe 	bl	8000bb8 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80057bc:	4816      	ldr	r0, [pc, #88]	; (8005818 <HAL_TIM_Base_MspInit+0xb8>)
 80057be:	4b17      	ldr	r3, [pc, #92]	; (800581c <HAL_TIM_Base_MspInit+0xbc>)
 80057c0:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80057c2:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80057c6:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057c8:	2300      	movs	r3, #0
 80057ca:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80057cc:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80057ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057d2:	6102      	str	r2, [r0, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80057d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057d8:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80057da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80057de:	6182      	str	r2, [r0, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80057e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057e4:	61c2      	str	r2, [r0, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80057e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057ea:	6202      	str	r2, [r0, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057ec:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80057ee:	f7fb f841 	bl	8000874 <HAL_DMA_Init>
 80057f2:	b958      	cbnz	r0, 800580c <HAL_TIM_Base_MspInit+0xac>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80057f4:	4b08      	ldr	r3, [pc, #32]	; (8005818 <HAL_TIM_Base_MspInit+0xb8>)
 80057f6:	6263      	str	r3, [r4, #36]	; 0x24
 80057f8:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80057fa:	2200      	movs	r2, #0
 80057fc:	4611      	mov	r1, r2
 80057fe:	201c      	movs	r0, #28
 8005800:	f7fa ff62 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005804:	201c      	movs	r0, #28
 8005806:	f7fa ff95 	bl	8000734 <HAL_NVIC_EnableIRQ>
}
 800580a:	e7b5      	b.n	8005778 <HAL_TIM_Base_MspInit+0x18>
      Error_Handler();
 800580c:	f7ff fb86 	bl	8004f1c <Error_Handler>
 8005810:	e7f0      	b.n	80057f4 <HAL_TIM_Base_MspInit+0x94>
 8005812:	bf00      	nop
 8005814:	40020000 	.word	0x40020000
 8005818:	20004960 	.word	0x20004960
 800581c:	40026088 	.word	0x40026088

08005820 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005820:	b500      	push	{lr}
 8005822:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005824:	2300      	movs	r3, #0
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	9302      	str	r3, [sp, #8]
 800582a:	9303      	str	r3, [sp, #12]
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8005830:	6802      	ldr	r2, [r0, #0]
 8005832:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <HAL_TIM_MspPostInit+0x50>)
 8005834:	429a      	cmp	r2, r3
 8005836:	d002      	beq.n	800583e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005838:	b007      	add	sp, #28
 800583a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800583e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8005842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005844:	f042 0210 	orr.w	r2, r2, #16
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
 8005854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005858:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585a:	2302      	movs	r3, #2
 800585c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800585e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005860:	2301      	movs	r3, #1
 8005862:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 8005864:	a901      	add	r1, sp, #4
 8005866:	4803      	ldr	r0, [pc, #12]	; (8005874 <HAL_TIM_MspPostInit+0x54>)
 8005868:	f7fb f9a6 	bl	8000bb8 <HAL_GPIO_Init>
}
 800586c:	e7e4      	b.n	8005838 <HAL_TIM_MspPostInit+0x18>
 800586e:	bf00      	nop
 8005870:	40010000 	.word	0x40010000
 8005874:	40021000 	.word	0x40021000

08005878 <MX_TIM1_Init>:
{
 8005878:	b510      	push	{r4, lr}
 800587a:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800587c:	2400      	movs	r4, #0
 800587e:	9413      	str	r4, [sp, #76]	; 0x4c
 8005880:	9414      	str	r4, [sp, #80]	; 0x50
 8005882:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005884:	940c      	str	r4, [sp, #48]	; 0x30
 8005886:	940d      	str	r4, [sp, #52]	; 0x34
 8005888:	940e      	str	r4, [sp, #56]	; 0x38
 800588a:	940f      	str	r4, [sp, #60]	; 0x3c
 800588c:	9410      	str	r4, [sp, #64]	; 0x40
 800588e:	9411      	str	r4, [sp, #68]	; 0x44
 8005890:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005892:	222c      	movs	r2, #44	; 0x2c
 8005894:	4621      	mov	r1, r4
 8005896:	a801      	add	r0, sp, #4
 8005898:	f000 f8b8 	bl	8005a0c <memset>
  htim1.Instance = TIM1;
 800589c:	4826      	ldr	r0, [pc, #152]	; (8005938 <MX_TIM1_Init+0xc0>)
 800589e:	4b27      	ldr	r3, [pc, #156]	; (800593c <MX_TIM1_Init+0xc4>)
 80058a0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80058a2:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058a4:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 269;
 80058a6:	f240 130d 	movw	r3, #269	; 0x10d
 80058aa:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058ac:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80058ae:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058b0:	2380      	movs	r3, #128	; 0x80
 80058b2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80058b4:	f7fd ff0c 	bl	80036d0 <HAL_TIM_PWM_Init>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d131      	bne.n	8005920 <MX_TIM1_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058bc:	2300      	movs	r3, #0
 80058be:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80058c0:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058c2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058c4:	a913      	add	r1, sp, #76	; 0x4c
 80058c6:	481c      	ldr	r0, [pc, #112]	; (8005938 <MX_TIM1_Init+0xc0>)
 80058c8:	f7fe f9dc 	bl	8003c84 <HAL_TIMEx_MasterConfigSynchronization>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d12a      	bne.n	8005926 <MX_TIM1_Init+0xae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058d0:	2360      	movs	r3, #96	; 0x60
 80058d2:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80058d4:	2200      	movs	r2, #0
 80058d6:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058d8:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058da:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058dc:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058de:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058e0:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058e2:	a90c      	add	r1, sp, #48	; 0x30
 80058e4:	4814      	ldr	r0, [pc, #80]	; (8005938 <MX_TIM1_Init+0xc0>)
 80058e6:	f7fd ff5f 	bl	80037a8 <HAL_TIM_PWM_ConfigChannel>
 80058ea:	b9f8      	cbnz	r0, 800592c <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80058f0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80058f2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80058f4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80058f6:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80058f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058fc:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80058fe:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005900:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005902:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005906:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005908:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800590a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800590c:	a901      	add	r1, sp, #4
 800590e:	480a      	ldr	r0, [pc, #40]	; (8005938 <MX_TIM1_Init+0xc0>)
 8005910:	f7fe f9ec 	bl	8003cec <HAL_TIMEx_ConfigBreakDeadTime>
 8005914:	b968      	cbnz	r0, 8005932 <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 8005916:	4808      	ldr	r0, [pc, #32]	; (8005938 <MX_TIM1_Init+0xc0>)
 8005918:	f7ff ff82 	bl	8005820 <HAL_TIM_MspPostInit>
}
 800591c:	b016      	add	sp, #88	; 0x58
 800591e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005920:	f7ff fafc 	bl	8004f1c <Error_Handler>
 8005924:	e7ca      	b.n	80058bc <MX_TIM1_Init+0x44>
    Error_Handler();
 8005926:	f7ff faf9 	bl	8004f1c <Error_Handler>
 800592a:	e7d1      	b.n	80058d0 <MX_TIM1_Init+0x58>
    Error_Handler();
 800592c:	f7ff faf6 	bl	8004f1c <Error_Handler>
 8005930:	e7dc      	b.n	80058ec <MX_TIM1_Init+0x74>
    Error_Handler();
 8005932:	f7ff faf3 	bl	8004f1c <Error_Handler>
 8005936:	e7ee      	b.n	8005916 <MX_TIM1_Init+0x9e>
 8005938:	200049c0 	.word	0x200049c0
 800593c:	40010000 	.word	0x40010000

08005940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005978 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005944:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005946:	e003      	b.n	8005950 <LoopCopyDataInit>

08005948 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800594a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800594c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800594e:	3104      	adds	r1, #4

08005950 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005950:	480b      	ldr	r0, [pc, #44]	; (8005980 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005952:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005954:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005956:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005958:	d3f6      	bcc.n	8005948 <CopyDataInit>
  ldr  r2, =_sbss
 800595a:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800595c:	e002      	b.n	8005964 <LoopFillZerobss>

0800595e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800595e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005960:	f842 3b04 	str.w	r3, [r2], #4

08005964 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005964:	4b09      	ldr	r3, [pc, #36]	; (800598c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005966:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005968:	d3f9      	bcc.n	800595e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800596a:	f7ff fe3f 	bl	80055ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800596e:	f000 f819 	bl	80059a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005972:	f7ff fb4f 	bl	8005014 <main>
  bx  lr    
 8005976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005978:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800597c:	08009320 	.word	0x08009320
  ldr  r0, =_sdata
 8005980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005984:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8005988:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800598c:	20004a54 	.word	0x20004a54

08005990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005990:	e7fe      	b.n	8005990 <ADC_IRQHandler>
	...

08005994 <calloc>:
 8005994:	4b02      	ldr	r3, [pc, #8]	; (80059a0 <calloc+0xc>)
 8005996:	460a      	mov	r2, r1
 8005998:	4601      	mov	r1, r0
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	f000 b83e 	b.w	8005a1c <_calloc_r>
 80059a0:	20000010 	.word	0x20000010

080059a4 <__libc_init_array>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	4d0d      	ldr	r5, [pc, #52]	; (80059dc <__libc_init_array+0x38>)
 80059a8:	4c0d      	ldr	r4, [pc, #52]	; (80059e0 <__libc_init_array+0x3c>)
 80059aa:	1b64      	subs	r4, r4, r5
 80059ac:	10a4      	asrs	r4, r4, #2
 80059ae:	2600      	movs	r6, #0
 80059b0:	42a6      	cmp	r6, r4
 80059b2:	d109      	bne.n	80059c8 <__libc_init_array+0x24>
 80059b4:	4d0b      	ldr	r5, [pc, #44]	; (80059e4 <__libc_init_array+0x40>)
 80059b6:	4c0c      	ldr	r4, [pc, #48]	; (80059e8 <__libc_init_array+0x44>)
 80059b8:	f002 feb0 	bl	800871c <_init>
 80059bc:	1b64      	subs	r4, r4, r5
 80059be:	10a4      	asrs	r4, r4, #2
 80059c0:	2600      	movs	r6, #0
 80059c2:	42a6      	cmp	r6, r4
 80059c4:	d105      	bne.n	80059d2 <__libc_init_array+0x2e>
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059cc:	4798      	blx	r3
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7ee      	b.n	80059b0 <__libc_init_array+0xc>
 80059d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d6:	4798      	blx	r3
 80059d8:	3601      	adds	r6, #1
 80059da:	e7f2      	b.n	80059c2 <__libc_init_array+0x1e>
 80059dc:	08009318 	.word	0x08009318
 80059e0:	08009318 	.word	0x08009318
 80059e4:	08009318 	.word	0x08009318
 80059e8:	0800931c 	.word	0x0800931c

080059ec <malloc>:
 80059ec:	4b02      	ldr	r3, [pc, #8]	; (80059f8 <malloc+0xc>)
 80059ee:	4601      	mov	r1, r0
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	f000 b895 	b.w	8005b20 <_malloc_r>
 80059f6:	bf00      	nop
 80059f8:	20000010 	.word	0x20000010

080059fc <free>:
 80059fc:	4b02      	ldr	r3, [pc, #8]	; (8005a08 <free+0xc>)
 80059fe:	4601      	mov	r1, r0
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	f000 b821 	b.w	8005a48 <_free_r>
 8005a06:	bf00      	nop
 8005a08:	20000010 	.word	0x20000010

08005a0c <memset>:
 8005a0c:	4402      	add	r2, r0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d100      	bne.n	8005a16 <memset+0xa>
 8005a14:	4770      	bx	lr
 8005a16:	f803 1b01 	strb.w	r1, [r3], #1
 8005a1a:	e7f9      	b.n	8005a10 <memset+0x4>

08005a1c <_calloc_r>:
 8005a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a1e:	fba1 2402 	umull	r2, r4, r1, r2
 8005a22:	b94c      	cbnz	r4, 8005a38 <_calloc_r+0x1c>
 8005a24:	4611      	mov	r1, r2
 8005a26:	9201      	str	r2, [sp, #4]
 8005a28:	f000 f87a 	bl	8005b20 <_malloc_r>
 8005a2c:	9a01      	ldr	r2, [sp, #4]
 8005a2e:	4605      	mov	r5, r0
 8005a30:	b930      	cbnz	r0, 8005a40 <_calloc_r+0x24>
 8005a32:	4628      	mov	r0, r5
 8005a34:	b003      	add	sp, #12
 8005a36:	bd30      	pop	{r4, r5, pc}
 8005a38:	220c      	movs	r2, #12
 8005a3a:	6002      	str	r2, [r0, #0]
 8005a3c:	2500      	movs	r5, #0
 8005a3e:	e7f8      	b.n	8005a32 <_calloc_r+0x16>
 8005a40:	4621      	mov	r1, r4
 8005a42:	f7ff ffe3 	bl	8005a0c <memset>
 8005a46:	e7f4      	b.n	8005a32 <_calloc_r+0x16>

08005a48 <_free_r>:
 8005a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a4a:	2900      	cmp	r1, #0
 8005a4c:	d044      	beq.n	8005ad8 <_free_r+0x90>
 8005a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a52:	9001      	str	r0, [sp, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f1a1 0404 	sub.w	r4, r1, #4
 8005a5a:	bfb8      	it	lt
 8005a5c:	18e4      	addlt	r4, r4, r3
 8005a5e:	f001 fbc9 	bl	80071f4 <__malloc_lock>
 8005a62:	4a1e      	ldr	r2, [pc, #120]	; (8005adc <_free_r+0x94>)
 8005a64:	9801      	ldr	r0, [sp, #4]
 8005a66:	6813      	ldr	r3, [r2, #0]
 8005a68:	b933      	cbnz	r3, 8005a78 <_free_r+0x30>
 8005a6a:	6063      	str	r3, [r4, #4]
 8005a6c:	6014      	str	r4, [r2, #0]
 8005a6e:	b003      	add	sp, #12
 8005a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a74:	f001 bbc4 	b.w	8007200 <__malloc_unlock>
 8005a78:	42a3      	cmp	r3, r4
 8005a7a:	d908      	bls.n	8005a8e <_free_r+0x46>
 8005a7c:	6825      	ldr	r5, [r4, #0]
 8005a7e:	1961      	adds	r1, r4, r5
 8005a80:	428b      	cmp	r3, r1
 8005a82:	bf01      	itttt	eq
 8005a84:	6819      	ldreq	r1, [r3, #0]
 8005a86:	685b      	ldreq	r3, [r3, #4]
 8005a88:	1949      	addeq	r1, r1, r5
 8005a8a:	6021      	streq	r1, [r4, #0]
 8005a8c:	e7ed      	b.n	8005a6a <_free_r+0x22>
 8005a8e:	461a      	mov	r2, r3
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	b10b      	cbz	r3, 8005a98 <_free_r+0x50>
 8005a94:	42a3      	cmp	r3, r4
 8005a96:	d9fa      	bls.n	8005a8e <_free_r+0x46>
 8005a98:	6811      	ldr	r1, [r2, #0]
 8005a9a:	1855      	adds	r5, r2, r1
 8005a9c:	42a5      	cmp	r5, r4
 8005a9e:	d10b      	bne.n	8005ab8 <_free_r+0x70>
 8005aa0:	6824      	ldr	r4, [r4, #0]
 8005aa2:	4421      	add	r1, r4
 8005aa4:	1854      	adds	r4, r2, r1
 8005aa6:	42a3      	cmp	r3, r4
 8005aa8:	6011      	str	r1, [r2, #0]
 8005aaa:	d1e0      	bne.n	8005a6e <_free_r+0x26>
 8005aac:	681c      	ldr	r4, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	6053      	str	r3, [r2, #4]
 8005ab2:	4421      	add	r1, r4
 8005ab4:	6011      	str	r1, [r2, #0]
 8005ab6:	e7da      	b.n	8005a6e <_free_r+0x26>
 8005ab8:	d902      	bls.n	8005ac0 <_free_r+0x78>
 8005aba:	230c      	movs	r3, #12
 8005abc:	6003      	str	r3, [r0, #0]
 8005abe:	e7d6      	b.n	8005a6e <_free_r+0x26>
 8005ac0:	6825      	ldr	r5, [r4, #0]
 8005ac2:	1961      	adds	r1, r4, r5
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	bf04      	itt	eq
 8005ac8:	6819      	ldreq	r1, [r3, #0]
 8005aca:	685b      	ldreq	r3, [r3, #4]
 8005acc:	6063      	str	r3, [r4, #4]
 8005ace:	bf04      	itt	eq
 8005ad0:	1949      	addeq	r1, r1, r5
 8005ad2:	6021      	streq	r1, [r4, #0]
 8005ad4:	6054      	str	r4, [r2, #4]
 8005ad6:	e7ca      	b.n	8005a6e <_free_r+0x26>
 8005ad8:	b003      	add	sp, #12
 8005ada:	bd30      	pop	{r4, r5, pc}
 8005adc:	20004a40 	.word	0x20004a40

08005ae0 <sbrk_aligned>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	4e0e      	ldr	r6, [pc, #56]	; (8005b1c <sbrk_aligned+0x3c>)
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	6831      	ldr	r1, [r6, #0]
 8005ae8:	4605      	mov	r5, r0
 8005aea:	b911      	cbnz	r1, 8005af2 <sbrk_aligned+0x12>
 8005aec:	f000 fcce 	bl	800648c <_sbrk_r>
 8005af0:	6030      	str	r0, [r6, #0]
 8005af2:	4621      	mov	r1, r4
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 fcc9 	bl	800648c <_sbrk_r>
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	d00a      	beq.n	8005b14 <sbrk_aligned+0x34>
 8005afe:	1cc4      	adds	r4, r0, #3
 8005b00:	f024 0403 	bic.w	r4, r4, #3
 8005b04:	42a0      	cmp	r0, r4
 8005b06:	d007      	beq.n	8005b18 <sbrk_aligned+0x38>
 8005b08:	1a21      	subs	r1, r4, r0
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f000 fcbe 	bl	800648c <_sbrk_r>
 8005b10:	3001      	adds	r0, #1
 8005b12:	d101      	bne.n	8005b18 <sbrk_aligned+0x38>
 8005b14:	f04f 34ff 	mov.w	r4, #4294967295
 8005b18:	4620      	mov	r0, r4
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	20004a44 	.word	0x20004a44

08005b20 <_malloc_r>:
 8005b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b24:	1ccd      	adds	r5, r1, #3
 8005b26:	f025 0503 	bic.w	r5, r5, #3
 8005b2a:	3508      	adds	r5, #8
 8005b2c:	2d0c      	cmp	r5, #12
 8005b2e:	bf38      	it	cc
 8005b30:	250c      	movcc	r5, #12
 8005b32:	2d00      	cmp	r5, #0
 8005b34:	4607      	mov	r7, r0
 8005b36:	db01      	blt.n	8005b3c <_malloc_r+0x1c>
 8005b38:	42a9      	cmp	r1, r5
 8005b3a:	d905      	bls.n	8005b48 <_malloc_r+0x28>
 8005b3c:	230c      	movs	r3, #12
 8005b3e:	603b      	str	r3, [r7, #0]
 8005b40:	2600      	movs	r6, #0
 8005b42:	4630      	mov	r0, r6
 8005b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b48:	4e2e      	ldr	r6, [pc, #184]	; (8005c04 <_malloc_r+0xe4>)
 8005b4a:	f001 fb53 	bl	80071f4 <__malloc_lock>
 8005b4e:	6833      	ldr	r3, [r6, #0]
 8005b50:	461c      	mov	r4, r3
 8005b52:	bb34      	cbnz	r4, 8005ba2 <_malloc_r+0x82>
 8005b54:	4629      	mov	r1, r5
 8005b56:	4638      	mov	r0, r7
 8005b58:	f7ff ffc2 	bl	8005ae0 <sbrk_aligned>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	4604      	mov	r4, r0
 8005b60:	d14d      	bne.n	8005bfe <_malloc_r+0xde>
 8005b62:	6834      	ldr	r4, [r6, #0]
 8005b64:	4626      	mov	r6, r4
 8005b66:	2e00      	cmp	r6, #0
 8005b68:	d140      	bne.n	8005bec <_malloc_r+0xcc>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4638      	mov	r0, r7
 8005b70:	eb04 0803 	add.w	r8, r4, r3
 8005b74:	f000 fc8a 	bl	800648c <_sbrk_r>
 8005b78:	4580      	cmp	r8, r0
 8005b7a:	d13a      	bne.n	8005bf2 <_malloc_r+0xd2>
 8005b7c:	6821      	ldr	r1, [r4, #0]
 8005b7e:	3503      	adds	r5, #3
 8005b80:	1a6d      	subs	r5, r5, r1
 8005b82:	f025 0503 	bic.w	r5, r5, #3
 8005b86:	3508      	adds	r5, #8
 8005b88:	2d0c      	cmp	r5, #12
 8005b8a:	bf38      	it	cc
 8005b8c:	250c      	movcc	r5, #12
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4638      	mov	r0, r7
 8005b92:	f7ff ffa5 	bl	8005ae0 <sbrk_aligned>
 8005b96:	3001      	adds	r0, #1
 8005b98:	d02b      	beq.n	8005bf2 <_malloc_r+0xd2>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	442b      	add	r3, r5
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	e00e      	b.n	8005bc0 <_malloc_r+0xa0>
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	1b52      	subs	r2, r2, r5
 8005ba6:	d41e      	bmi.n	8005be6 <_malloc_r+0xc6>
 8005ba8:	2a0b      	cmp	r2, #11
 8005baa:	d916      	bls.n	8005bda <_malloc_r+0xba>
 8005bac:	1961      	adds	r1, r4, r5
 8005bae:	42a3      	cmp	r3, r4
 8005bb0:	6025      	str	r5, [r4, #0]
 8005bb2:	bf18      	it	ne
 8005bb4:	6059      	strne	r1, [r3, #4]
 8005bb6:	6863      	ldr	r3, [r4, #4]
 8005bb8:	bf08      	it	eq
 8005bba:	6031      	streq	r1, [r6, #0]
 8005bbc:	5162      	str	r2, [r4, r5]
 8005bbe:	604b      	str	r3, [r1, #4]
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	f104 060b 	add.w	r6, r4, #11
 8005bc6:	f001 fb1b 	bl	8007200 <__malloc_unlock>
 8005bca:	f026 0607 	bic.w	r6, r6, #7
 8005bce:	1d23      	adds	r3, r4, #4
 8005bd0:	1af2      	subs	r2, r6, r3
 8005bd2:	d0b6      	beq.n	8005b42 <_malloc_r+0x22>
 8005bd4:	1b9b      	subs	r3, r3, r6
 8005bd6:	50a3      	str	r3, [r4, r2]
 8005bd8:	e7b3      	b.n	8005b42 <_malloc_r+0x22>
 8005bda:	6862      	ldr	r2, [r4, #4]
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	bf0c      	ite	eq
 8005be0:	6032      	streq	r2, [r6, #0]
 8005be2:	605a      	strne	r2, [r3, #4]
 8005be4:	e7ec      	b.n	8005bc0 <_malloc_r+0xa0>
 8005be6:	4623      	mov	r3, r4
 8005be8:	6864      	ldr	r4, [r4, #4]
 8005bea:	e7b2      	b.n	8005b52 <_malloc_r+0x32>
 8005bec:	4634      	mov	r4, r6
 8005bee:	6876      	ldr	r6, [r6, #4]
 8005bf0:	e7b9      	b.n	8005b66 <_malloc_r+0x46>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	f001 fb02 	bl	8007200 <__malloc_unlock>
 8005bfc:	e7a1      	b.n	8005b42 <_malloc_r+0x22>
 8005bfe:	6025      	str	r5, [r4, #0]
 8005c00:	e7de      	b.n	8005bc0 <_malloc_r+0xa0>
 8005c02:	bf00      	nop
 8005c04:	20004a40 	.word	0x20004a40

08005c08 <__cvt>:
 8005c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0a:	ed2d 8b02 	vpush	{d8}
 8005c0e:	eeb0 8b40 	vmov.f64	d8, d0
 8005c12:	b085      	sub	sp, #20
 8005c14:	4617      	mov	r7, r2
 8005c16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005c18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005c1a:	ee18 2a90 	vmov	r2, s17
 8005c1e:	f025 0520 	bic.w	r5, r5, #32
 8005c22:	2a00      	cmp	r2, #0
 8005c24:	bfb6      	itet	lt
 8005c26:	222d      	movlt	r2, #45	; 0x2d
 8005c28:	2200      	movge	r2, #0
 8005c2a:	eeb1 8b40 	vneglt.f64	d8, d0
 8005c2e:	2d46      	cmp	r5, #70	; 0x46
 8005c30:	460c      	mov	r4, r1
 8005c32:	701a      	strb	r2, [r3, #0]
 8005c34:	d004      	beq.n	8005c40 <__cvt+0x38>
 8005c36:	2d45      	cmp	r5, #69	; 0x45
 8005c38:	d100      	bne.n	8005c3c <__cvt+0x34>
 8005c3a:	3401      	adds	r4, #1
 8005c3c:	2102      	movs	r1, #2
 8005c3e:	e000      	b.n	8005c42 <__cvt+0x3a>
 8005c40:	2103      	movs	r1, #3
 8005c42:	ab03      	add	r3, sp, #12
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	ab02      	add	r3, sp, #8
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	4633      	mov	r3, r6
 8005c4e:	eeb0 0b48 	vmov.f64	d0, d8
 8005c52:	f000 fd3d 	bl	80066d0 <_dtoa_r>
 8005c56:	2d47      	cmp	r5, #71	; 0x47
 8005c58:	d101      	bne.n	8005c5e <__cvt+0x56>
 8005c5a:	07fb      	lsls	r3, r7, #31
 8005c5c:	d51a      	bpl.n	8005c94 <__cvt+0x8c>
 8005c5e:	2d46      	cmp	r5, #70	; 0x46
 8005c60:	eb00 0204 	add.w	r2, r0, r4
 8005c64:	d10c      	bne.n	8005c80 <__cvt+0x78>
 8005c66:	7803      	ldrb	r3, [r0, #0]
 8005c68:	2b30      	cmp	r3, #48	; 0x30
 8005c6a:	d107      	bne.n	8005c7c <__cvt+0x74>
 8005c6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c74:	bf1c      	itt	ne
 8005c76:	f1c4 0401 	rsbne	r4, r4, #1
 8005c7a:	6034      	strne	r4, [r6, #0]
 8005c7c:	6833      	ldr	r3, [r6, #0]
 8005c7e:	441a      	add	r2, r3
 8005c80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c88:	bf08      	it	eq
 8005c8a:	9203      	streq	r2, [sp, #12]
 8005c8c:	2130      	movs	r1, #48	; 0x30
 8005c8e:	9b03      	ldr	r3, [sp, #12]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d307      	bcc.n	8005ca4 <__cvt+0x9c>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c98:	1a1b      	subs	r3, r3, r0
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	b005      	add	sp, #20
 8005c9e:	ecbd 8b02 	vpop	{d8}
 8005ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca4:	1c5c      	adds	r4, r3, #1
 8005ca6:	9403      	str	r4, [sp, #12]
 8005ca8:	7019      	strb	r1, [r3, #0]
 8005caa:	e7f0      	b.n	8005c8e <__cvt+0x86>

08005cac <__exponent>:
 8005cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2900      	cmp	r1, #0
 8005cb2:	bfb8      	it	lt
 8005cb4:	4249      	neglt	r1, r1
 8005cb6:	f803 2b02 	strb.w	r2, [r3], #2
 8005cba:	bfb4      	ite	lt
 8005cbc:	222d      	movlt	r2, #45	; 0x2d
 8005cbe:	222b      	movge	r2, #43	; 0x2b
 8005cc0:	2909      	cmp	r1, #9
 8005cc2:	7042      	strb	r2, [r0, #1]
 8005cc4:	dd2a      	ble.n	8005d1c <__exponent+0x70>
 8005cc6:	f10d 0407 	add.w	r4, sp, #7
 8005cca:	46a4      	mov	ip, r4
 8005ccc:	270a      	movs	r7, #10
 8005cce:	46a6      	mov	lr, r4
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005cd6:	fb07 1516 	mls	r5, r7, r6, r1
 8005cda:	3530      	adds	r5, #48	; 0x30
 8005cdc:	2a63      	cmp	r2, #99	; 0x63
 8005cde:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ce2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	dcf1      	bgt.n	8005cce <__exponent+0x22>
 8005cea:	3130      	adds	r1, #48	; 0x30
 8005cec:	f1ae 0502 	sub.w	r5, lr, #2
 8005cf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005cf4:	1c44      	adds	r4, r0, #1
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	4561      	cmp	r1, ip
 8005cfa:	d30a      	bcc.n	8005d12 <__exponent+0x66>
 8005cfc:	f10d 0209 	add.w	r2, sp, #9
 8005d00:	eba2 020e 	sub.w	r2, r2, lr
 8005d04:	4565      	cmp	r5, ip
 8005d06:	bf88      	it	hi
 8005d08:	2200      	movhi	r2, #0
 8005d0a:	4413      	add	r3, r2
 8005d0c:	1a18      	subs	r0, r3, r0
 8005d0e:	b003      	add	sp, #12
 8005d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d1a:	e7ed      	b.n	8005cf8 <__exponent+0x4c>
 8005d1c:	2330      	movs	r3, #48	; 0x30
 8005d1e:	3130      	adds	r1, #48	; 0x30
 8005d20:	7083      	strb	r3, [r0, #2]
 8005d22:	70c1      	strb	r1, [r0, #3]
 8005d24:	1d03      	adds	r3, r0, #4
 8005d26:	e7f1      	b.n	8005d0c <__exponent+0x60>

08005d28 <_printf_float>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	b08b      	sub	sp, #44	; 0x2c
 8005d2e:	460c      	mov	r4, r1
 8005d30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005d34:	4616      	mov	r6, r2
 8005d36:	461f      	mov	r7, r3
 8005d38:	4605      	mov	r5, r0
 8005d3a:	f001 fa37 	bl	80071ac <_localeconv_r>
 8005d3e:	f8d0 b000 	ldr.w	fp, [r0]
 8005d42:	4658      	mov	r0, fp
 8005d44:	f7fa fa7c 	bl	8000240 <strlen>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9308      	str	r3, [sp, #32]
 8005d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	3307      	adds	r3, #7
 8005d58:	f023 0307 	bic.w	r3, r3, #7
 8005d5c:	f103 0108 	add.w	r1, r3, #8
 8005d60:	f8c8 1000 	str.w	r1, [r8]
 8005d64:	4682      	mov	sl, r0
 8005d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005d6e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005fd0 <_printf_float+0x2a8>
 8005d72:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005d76:	eeb0 6bc0 	vabs.f64	d6, d0
 8005d7a:	eeb4 6b47 	vcmp.f64	d6, d7
 8005d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d82:	dd24      	ble.n	8005dce <_printf_float+0xa6>
 8005d84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8c:	d502      	bpl.n	8005d94 <_printf_float+0x6c>
 8005d8e:	232d      	movs	r3, #45	; 0x2d
 8005d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d94:	4b90      	ldr	r3, [pc, #576]	; (8005fd8 <_printf_float+0x2b0>)
 8005d96:	4891      	ldr	r0, [pc, #580]	; (8005fdc <_printf_float+0x2b4>)
 8005d98:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d9c:	bf94      	ite	ls
 8005d9e:	4698      	movls	r8, r3
 8005da0:	4680      	movhi	r8, r0
 8005da2:	2303      	movs	r3, #3
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	f022 0204 	bic.w	r2, r2, #4
 8005daa:	2300      	movs	r3, #0
 8005dac:	6022      	str	r2, [r4, #0]
 8005dae:	9304      	str	r3, [sp, #16]
 8005db0:	9700      	str	r7, [sp, #0]
 8005db2:	4633      	mov	r3, r6
 8005db4:	aa09      	add	r2, sp, #36	; 0x24
 8005db6:	4621      	mov	r1, r4
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 f9d3 	bl	8006164 <_printf_common>
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	f040 808a 	bne.w	8005ed8 <_printf_float+0x1b0>
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	b00b      	add	sp, #44	; 0x2c
 8005dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	eeb4 0b40 	vcmp.f64	d0, d0
 8005dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd6:	d709      	bvc.n	8005dec <_printf_float+0xc4>
 8005dd8:	ee10 3a90 	vmov	r3, s1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	bfbc      	itt	lt
 8005de0:	232d      	movlt	r3, #45	; 0x2d
 8005de2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005de6:	487e      	ldr	r0, [pc, #504]	; (8005fe0 <_printf_float+0x2b8>)
 8005de8:	4b7e      	ldr	r3, [pc, #504]	; (8005fe4 <_printf_float+0x2bc>)
 8005dea:	e7d5      	b.n	8005d98 <_printf_float+0x70>
 8005dec:	6863      	ldr	r3, [r4, #4]
 8005dee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005df2:	9104      	str	r1, [sp, #16]
 8005df4:	1c59      	adds	r1, r3, #1
 8005df6:	d13c      	bne.n	8005e72 <_printf_float+0x14a>
 8005df8:	2306      	movs	r3, #6
 8005dfa:	6063      	str	r3, [r4, #4]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9303      	str	r3, [sp, #12]
 8005e00:	ab08      	add	r3, sp, #32
 8005e02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005e06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e0a:	ab07      	add	r3, sp, #28
 8005e0c:	6861      	ldr	r1, [r4, #4]
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	f10d 031b 	add.w	r3, sp, #27
 8005e16:	4628      	mov	r0, r5
 8005e18:	f7ff fef6 	bl	8005c08 <__cvt>
 8005e1c:	9b04      	ldr	r3, [sp, #16]
 8005e1e:	9907      	ldr	r1, [sp, #28]
 8005e20:	2b47      	cmp	r3, #71	; 0x47
 8005e22:	4680      	mov	r8, r0
 8005e24:	d108      	bne.n	8005e38 <_printf_float+0x110>
 8005e26:	1cc8      	adds	r0, r1, #3
 8005e28:	db02      	blt.n	8005e30 <_printf_float+0x108>
 8005e2a:	6863      	ldr	r3, [r4, #4]
 8005e2c:	4299      	cmp	r1, r3
 8005e2e:	dd41      	ble.n	8005eb4 <_printf_float+0x18c>
 8005e30:	f1a9 0902 	sub.w	r9, r9, #2
 8005e34:	fa5f f989 	uxtb.w	r9, r9
 8005e38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e3c:	d820      	bhi.n	8005e80 <_printf_float+0x158>
 8005e3e:	3901      	subs	r1, #1
 8005e40:	464a      	mov	r2, r9
 8005e42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e46:	9107      	str	r1, [sp, #28]
 8005e48:	f7ff ff30 	bl	8005cac <__exponent>
 8005e4c:	9a08      	ldr	r2, [sp, #32]
 8005e4e:	9004      	str	r0, [sp, #16]
 8005e50:	1813      	adds	r3, r2, r0
 8005e52:	2a01      	cmp	r2, #1
 8005e54:	6123      	str	r3, [r4, #16]
 8005e56:	dc02      	bgt.n	8005e5e <_printf_float+0x136>
 8005e58:	6822      	ldr	r2, [r4, #0]
 8005e5a:	07d2      	lsls	r2, r2, #31
 8005e5c:	d501      	bpl.n	8005e62 <_printf_float+0x13a>
 8005e5e:	3301      	adds	r3, #1
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0a2      	beq.n	8005db0 <_printf_float+0x88>
 8005e6a:	232d      	movs	r3, #45	; 0x2d
 8005e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e70:	e79e      	b.n	8005db0 <_printf_float+0x88>
 8005e72:	9904      	ldr	r1, [sp, #16]
 8005e74:	2947      	cmp	r1, #71	; 0x47
 8005e76:	d1c1      	bne.n	8005dfc <_printf_float+0xd4>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1bf      	bne.n	8005dfc <_printf_float+0xd4>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e7bc      	b.n	8005dfa <_printf_float+0xd2>
 8005e80:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e84:	d118      	bne.n	8005eb8 <_printf_float+0x190>
 8005e86:	2900      	cmp	r1, #0
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	dd0b      	ble.n	8005ea4 <_printf_float+0x17c>
 8005e8c:	6121      	str	r1, [r4, #16]
 8005e8e:	b913      	cbnz	r3, 8005e96 <_printf_float+0x16e>
 8005e90:	6822      	ldr	r2, [r4, #0]
 8005e92:	07d0      	lsls	r0, r2, #31
 8005e94:	d502      	bpl.n	8005e9c <_printf_float+0x174>
 8005e96:	3301      	adds	r3, #1
 8005e98:	440b      	add	r3, r1
 8005e9a:	6123      	str	r3, [r4, #16]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	e7de      	b.n	8005e62 <_printf_float+0x13a>
 8005ea4:	b913      	cbnz	r3, 8005eac <_printf_float+0x184>
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	07d2      	lsls	r2, r2, #31
 8005eaa:	d501      	bpl.n	8005eb0 <_printf_float+0x188>
 8005eac:	3302      	adds	r3, #2
 8005eae:	e7f4      	b.n	8005e9a <_printf_float+0x172>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e7f2      	b.n	8005e9a <_printf_float+0x172>
 8005eb4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005eb8:	9b08      	ldr	r3, [sp, #32]
 8005eba:	4299      	cmp	r1, r3
 8005ebc:	db05      	blt.n	8005eca <_printf_float+0x1a2>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	6121      	str	r1, [r4, #16]
 8005ec2:	07d8      	lsls	r0, r3, #31
 8005ec4:	d5ea      	bpl.n	8005e9c <_printf_float+0x174>
 8005ec6:	1c4b      	adds	r3, r1, #1
 8005ec8:	e7e7      	b.n	8005e9a <_printf_float+0x172>
 8005eca:	2900      	cmp	r1, #0
 8005ecc:	bfd4      	ite	le
 8005ece:	f1c1 0202 	rsble	r2, r1, #2
 8005ed2:	2201      	movgt	r2, #1
 8005ed4:	4413      	add	r3, r2
 8005ed6:	e7e0      	b.n	8005e9a <_printf_float+0x172>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	055a      	lsls	r2, r3, #21
 8005edc:	d407      	bmi.n	8005eee <_printf_float+0x1c6>
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	4642      	mov	r2, r8
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d12a      	bne.n	8005f42 <_printf_float+0x21a>
 8005eec:	e76a      	b.n	8005dc4 <_printf_float+0x9c>
 8005eee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ef2:	f240 80e2 	bls.w	80060ba <_printf_float+0x392>
 8005ef6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005efa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f02:	d133      	bne.n	8005f6c <_printf_float+0x244>
 8005f04:	4a38      	ldr	r2, [pc, #224]	; (8005fe8 <_printf_float+0x2c0>)
 8005f06:	2301      	movs	r3, #1
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f43f af58 	beq.w	8005dc4 <_printf_float+0x9c>
 8005f14:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	db02      	blt.n	8005f22 <_printf_float+0x1fa>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	07d8      	lsls	r0, r3, #31
 8005f20:	d50f      	bpl.n	8005f42 <_printf_float+0x21a>
 8005f22:	4653      	mov	r3, sl
 8005f24:	465a      	mov	r2, fp
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f af49 	beq.w	8005dc4 <_printf_float+0x9c>
 8005f32:	f04f 0800 	mov.w	r8, #0
 8005f36:	f104 091a 	add.w	r9, r4, #26
 8005f3a:	9b08      	ldr	r3, [sp, #32]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	4543      	cmp	r3, r8
 8005f40:	dc09      	bgt.n	8005f56 <_printf_float+0x22e>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	079b      	lsls	r3, r3, #30
 8005f46:	f100 8108 	bmi.w	800615a <_printf_float+0x432>
 8005f4a:	68e0      	ldr	r0, [r4, #12]
 8005f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4e:	4298      	cmp	r0, r3
 8005f50:	bfb8      	it	lt
 8005f52:	4618      	movlt	r0, r3
 8005f54:	e738      	b.n	8005dc8 <_printf_float+0xa0>
 8005f56:	2301      	movs	r3, #1
 8005f58:	464a      	mov	r2, r9
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b8      	blx	r7
 8005f60:	3001      	adds	r0, #1
 8005f62:	f43f af2f 	beq.w	8005dc4 <_printf_float+0x9c>
 8005f66:	f108 0801 	add.w	r8, r8, #1
 8005f6a:	e7e6      	b.n	8005f3a <_printf_float+0x212>
 8005f6c:	9b07      	ldr	r3, [sp, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dc3c      	bgt.n	8005fec <_printf_float+0x2c4>
 8005f72:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <_printf_float+0x2c0>)
 8005f74:	2301      	movs	r3, #1
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f43f af21 	beq.w	8005dc4 <_printf_float+0x9c>
 8005f82:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	d102      	bne.n	8005f90 <_printf_float+0x268>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	07d9      	lsls	r1, r3, #31
 8005f8e:	d5d8      	bpl.n	8005f42 <_printf_float+0x21a>
 8005f90:	4653      	mov	r3, sl
 8005f92:	465a      	mov	r2, fp
 8005f94:	4631      	mov	r1, r6
 8005f96:	4628      	mov	r0, r5
 8005f98:	47b8      	blx	r7
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	f43f af12 	beq.w	8005dc4 <_printf_float+0x9c>
 8005fa0:	f04f 0900 	mov.w	r9, #0
 8005fa4:	f104 0a1a 	add.w	sl, r4, #26
 8005fa8:	9b07      	ldr	r3, [sp, #28]
 8005faa:	425b      	negs	r3, r3
 8005fac:	454b      	cmp	r3, r9
 8005fae:	dc01      	bgt.n	8005fb4 <_printf_float+0x28c>
 8005fb0:	9b08      	ldr	r3, [sp, #32]
 8005fb2:	e795      	b.n	8005ee0 <_printf_float+0x1b8>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4652      	mov	r2, sl
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f af00 	beq.w	8005dc4 <_printf_float+0x9c>
 8005fc4:	f109 0901 	add.w	r9, r9, #1
 8005fc8:	e7ee      	b.n	8005fa8 <_printf_float+0x280>
 8005fca:	bf00      	nop
 8005fcc:	f3af 8000 	nop.w
 8005fd0:	ffffffff 	.word	0xffffffff
 8005fd4:	7fefffff 	.word	0x7fefffff
 8005fd8:	08008f34 	.word	0x08008f34
 8005fdc:	08008f38 	.word	0x08008f38
 8005fe0:	08008f40 	.word	0x08008f40
 8005fe4:	08008f3c 	.word	0x08008f3c
 8005fe8:	08008f44 	.word	0x08008f44
 8005fec:	9a08      	ldr	r2, [sp, #32]
 8005fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	bfa8      	it	ge
 8005ff4:	461a      	movge	r2, r3
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	4691      	mov	r9, r2
 8005ffa:	dc38      	bgt.n	800606e <_printf_float+0x346>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9305      	str	r3, [sp, #20]
 8006000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006004:	f104 021a 	add.w	r2, r4, #26
 8006008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800600a:	9905      	ldr	r1, [sp, #20]
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	eba3 0309 	sub.w	r3, r3, r9
 8006012:	428b      	cmp	r3, r1
 8006014:	dc33      	bgt.n	800607e <_printf_float+0x356>
 8006016:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800601a:	429a      	cmp	r2, r3
 800601c:	db3c      	blt.n	8006098 <_printf_float+0x370>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	07da      	lsls	r2, r3, #31
 8006022:	d439      	bmi.n	8006098 <_printf_float+0x370>
 8006024:	9b08      	ldr	r3, [sp, #32]
 8006026:	9a04      	ldr	r2, [sp, #16]
 8006028:	9907      	ldr	r1, [sp, #28]
 800602a:	1a9a      	subs	r2, r3, r2
 800602c:	eba3 0901 	sub.w	r9, r3, r1
 8006030:	4591      	cmp	r9, r2
 8006032:	bfa8      	it	ge
 8006034:	4691      	movge	r9, r2
 8006036:	f1b9 0f00 	cmp.w	r9, #0
 800603a:	dc35      	bgt.n	80060a8 <_printf_float+0x380>
 800603c:	f04f 0800 	mov.w	r8, #0
 8006040:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006044:	f104 0a1a 	add.w	sl, r4, #26
 8006048:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	eba3 0309 	sub.w	r3, r3, r9
 8006052:	4543      	cmp	r3, r8
 8006054:	f77f af75 	ble.w	8005f42 <_printf_float+0x21a>
 8006058:	2301      	movs	r3, #1
 800605a:	4652      	mov	r2, sl
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	f43f aeae 	beq.w	8005dc4 <_printf_float+0x9c>
 8006068:	f108 0801 	add.w	r8, r8, #1
 800606c:	e7ec      	b.n	8006048 <_printf_float+0x320>
 800606e:	4613      	mov	r3, r2
 8006070:	4631      	mov	r1, r6
 8006072:	4642      	mov	r2, r8
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	d1bf      	bne.n	8005ffc <_printf_float+0x2d4>
 800607c:	e6a2      	b.n	8005dc4 <_printf_float+0x9c>
 800607e:	2301      	movs	r3, #1
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	9204      	str	r2, [sp, #16]
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	f43f ae9b 	beq.w	8005dc4 <_printf_float+0x9c>
 800608e:	9b05      	ldr	r3, [sp, #20]
 8006090:	9a04      	ldr	r2, [sp, #16]
 8006092:	3301      	adds	r3, #1
 8006094:	9305      	str	r3, [sp, #20]
 8006096:	e7b7      	b.n	8006008 <_printf_float+0x2e0>
 8006098:	4653      	mov	r3, sl
 800609a:	465a      	mov	r2, fp
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	d1be      	bne.n	8006024 <_printf_float+0x2fc>
 80060a6:	e68d      	b.n	8005dc4 <_printf_float+0x9c>
 80060a8:	9a04      	ldr	r2, [sp, #16]
 80060aa:	464b      	mov	r3, r9
 80060ac:	4442      	add	r2, r8
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	d1c1      	bne.n	800603c <_printf_float+0x314>
 80060b8:	e684      	b.n	8005dc4 <_printf_float+0x9c>
 80060ba:	9a08      	ldr	r2, [sp, #32]
 80060bc:	2a01      	cmp	r2, #1
 80060be:	dc01      	bgt.n	80060c4 <_printf_float+0x39c>
 80060c0:	07db      	lsls	r3, r3, #31
 80060c2:	d537      	bpl.n	8006134 <_printf_float+0x40c>
 80060c4:	2301      	movs	r3, #1
 80060c6:	4642      	mov	r2, r8
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f ae78 	beq.w	8005dc4 <_printf_float+0x9c>
 80060d4:	4653      	mov	r3, sl
 80060d6:	465a      	mov	r2, fp
 80060d8:	4631      	mov	r1, r6
 80060da:	4628      	mov	r0, r5
 80060dc:	47b8      	blx	r7
 80060de:	3001      	adds	r0, #1
 80060e0:	f43f ae70 	beq.w	8005dc4 <_printf_float+0x9c>
 80060e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80060e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80060ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f0:	d01b      	beq.n	800612a <_printf_float+0x402>
 80060f2:	9b08      	ldr	r3, [sp, #32]
 80060f4:	f108 0201 	add.w	r2, r8, #1
 80060f8:	3b01      	subs	r3, #1
 80060fa:	4631      	mov	r1, r6
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	d10e      	bne.n	8006122 <_printf_float+0x3fa>
 8006104:	e65e      	b.n	8005dc4 <_printf_float+0x9c>
 8006106:	2301      	movs	r3, #1
 8006108:	464a      	mov	r2, r9
 800610a:	4631      	mov	r1, r6
 800610c:	4628      	mov	r0, r5
 800610e:	47b8      	blx	r7
 8006110:	3001      	adds	r0, #1
 8006112:	f43f ae57 	beq.w	8005dc4 <_printf_float+0x9c>
 8006116:	f108 0801 	add.w	r8, r8, #1
 800611a:	9b08      	ldr	r3, [sp, #32]
 800611c:	3b01      	subs	r3, #1
 800611e:	4543      	cmp	r3, r8
 8006120:	dcf1      	bgt.n	8006106 <_printf_float+0x3de>
 8006122:	9b04      	ldr	r3, [sp, #16]
 8006124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006128:	e6db      	b.n	8005ee2 <_printf_float+0x1ba>
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	f104 091a 	add.w	r9, r4, #26
 8006132:	e7f2      	b.n	800611a <_printf_float+0x3f2>
 8006134:	2301      	movs	r3, #1
 8006136:	4642      	mov	r2, r8
 8006138:	e7df      	b.n	80060fa <_printf_float+0x3d2>
 800613a:	2301      	movs	r3, #1
 800613c:	464a      	mov	r2, r9
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	47b8      	blx	r7
 8006144:	3001      	adds	r0, #1
 8006146:	f43f ae3d 	beq.w	8005dc4 <_printf_float+0x9c>
 800614a:	f108 0801 	add.w	r8, r8, #1
 800614e:	68e3      	ldr	r3, [r4, #12]
 8006150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006152:	1a5b      	subs	r3, r3, r1
 8006154:	4543      	cmp	r3, r8
 8006156:	dcf0      	bgt.n	800613a <_printf_float+0x412>
 8006158:	e6f7      	b.n	8005f4a <_printf_float+0x222>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	f104 0919 	add.w	r9, r4, #25
 8006162:	e7f4      	b.n	800614e <_printf_float+0x426>

08006164 <_printf_common>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	4616      	mov	r6, r2
 800616a:	4699      	mov	r9, r3
 800616c:	688a      	ldr	r2, [r1, #8]
 800616e:	690b      	ldr	r3, [r1, #16]
 8006170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006174:	4293      	cmp	r3, r2
 8006176:	bfb8      	it	lt
 8006178:	4613      	movlt	r3, r2
 800617a:	6033      	str	r3, [r6, #0]
 800617c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006180:	4607      	mov	r7, r0
 8006182:	460c      	mov	r4, r1
 8006184:	b10a      	cbz	r2, 800618a <_printf_common+0x26>
 8006186:	3301      	adds	r3, #1
 8006188:	6033      	str	r3, [r6, #0]
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	0699      	lsls	r1, r3, #26
 800618e:	bf42      	ittt	mi
 8006190:	6833      	ldrmi	r3, [r6, #0]
 8006192:	3302      	addmi	r3, #2
 8006194:	6033      	strmi	r3, [r6, #0]
 8006196:	6825      	ldr	r5, [r4, #0]
 8006198:	f015 0506 	ands.w	r5, r5, #6
 800619c:	d106      	bne.n	80061ac <_printf_common+0x48>
 800619e:	f104 0a19 	add.w	sl, r4, #25
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	6832      	ldr	r2, [r6, #0]
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	42ab      	cmp	r3, r5
 80061aa:	dc26      	bgt.n	80061fa <_printf_common+0x96>
 80061ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061b0:	1e13      	subs	r3, r2, #0
 80061b2:	6822      	ldr	r2, [r4, #0]
 80061b4:	bf18      	it	ne
 80061b6:	2301      	movne	r3, #1
 80061b8:	0692      	lsls	r2, r2, #26
 80061ba:	d42b      	bmi.n	8006214 <_printf_common+0xb0>
 80061bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c0:	4649      	mov	r1, r9
 80061c2:	4638      	mov	r0, r7
 80061c4:	47c0      	blx	r8
 80061c6:	3001      	adds	r0, #1
 80061c8:	d01e      	beq.n	8006208 <_printf_common+0xa4>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	68e5      	ldr	r5, [r4, #12]
 80061ce:	6832      	ldr	r2, [r6, #0]
 80061d0:	f003 0306 	and.w	r3, r3, #6
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	bf08      	it	eq
 80061d8:	1aad      	subeq	r5, r5, r2
 80061da:	68a3      	ldr	r3, [r4, #8]
 80061dc:	6922      	ldr	r2, [r4, #16]
 80061de:	bf0c      	ite	eq
 80061e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e4:	2500      	movne	r5, #0
 80061e6:	4293      	cmp	r3, r2
 80061e8:	bfc4      	itt	gt
 80061ea:	1a9b      	subgt	r3, r3, r2
 80061ec:	18ed      	addgt	r5, r5, r3
 80061ee:	2600      	movs	r6, #0
 80061f0:	341a      	adds	r4, #26
 80061f2:	42b5      	cmp	r5, r6
 80061f4:	d11a      	bne.n	800622c <_printf_common+0xc8>
 80061f6:	2000      	movs	r0, #0
 80061f8:	e008      	b.n	800620c <_printf_common+0xa8>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4649      	mov	r1, r9
 8006200:	4638      	mov	r0, r7
 8006202:	47c0      	blx	r8
 8006204:	3001      	adds	r0, #1
 8006206:	d103      	bne.n	8006210 <_printf_common+0xac>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	3501      	adds	r5, #1
 8006212:	e7c6      	b.n	80061a2 <_printf_common+0x3e>
 8006214:	18e1      	adds	r1, r4, r3
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	2030      	movs	r0, #48	; 0x30
 800621a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800621e:	4422      	add	r2, r4
 8006220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006228:	3302      	adds	r3, #2
 800622a:	e7c7      	b.n	80061bc <_printf_common+0x58>
 800622c:	2301      	movs	r3, #1
 800622e:	4622      	mov	r2, r4
 8006230:	4649      	mov	r1, r9
 8006232:	4638      	mov	r0, r7
 8006234:	47c0      	blx	r8
 8006236:	3001      	adds	r0, #1
 8006238:	d0e6      	beq.n	8006208 <_printf_common+0xa4>
 800623a:	3601      	adds	r6, #1
 800623c:	e7d9      	b.n	80061f2 <_printf_common+0x8e>
	...

08006240 <_printf_i>:
 8006240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	7e0f      	ldrb	r7, [r1, #24]
 8006246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006248:	2f78      	cmp	r7, #120	; 0x78
 800624a:	4691      	mov	r9, r2
 800624c:	4680      	mov	r8, r0
 800624e:	460c      	mov	r4, r1
 8006250:	469a      	mov	sl, r3
 8006252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006256:	d807      	bhi.n	8006268 <_printf_i+0x28>
 8006258:	2f62      	cmp	r7, #98	; 0x62
 800625a:	d80a      	bhi.n	8006272 <_printf_i+0x32>
 800625c:	2f00      	cmp	r7, #0
 800625e:	f000 80d8 	beq.w	8006412 <_printf_i+0x1d2>
 8006262:	2f58      	cmp	r7, #88	; 0x58
 8006264:	f000 80a3 	beq.w	80063ae <_printf_i+0x16e>
 8006268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800626c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006270:	e03a      	b.n	80062e8 <_printf_i+0xa8>
 8006272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006276:	2b15      	cmp	r3, #21
 8006278:	d8f6      	bhi.n	8006268 <_printf_i+0x28>
 800627a:	a101      	add	r1, pc, #4	; (adr r1, 8006280 <_printf_i+0x40>)
 800627c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006280:	080062d9 	.word	0x080062d9
 8006284:	080062ed 	.word	0x080062ed
 8006288:	08006269 	.word	0x08006269
 800628c:	08006269 	.word	0x08006269
 8006290:	08006269 	.word	0x08006269
 8006294:	08006269 	.word	0x08006269
 8006298:	080062ed 	.word	0x080062ed
 800629c:	08006269 	.word	0x08006269
 80062a0:	08006269 	.word	0x08006269
 80062a4:	08006269 	.word	0x08006269
 80062a8:	08006269 	.word	0x08006269
 80062ac:	080063f9 	.word	0x080063f9
 80062b0:	0800631d 	.word	0x0800631d
 80062b4:	080063db 	.word	0x080063db
 80062b8:	08006269 	.word	0x08006269
 80062bc:	08006269 	.word	0x08006269
 80062c0:	0800641b 	.word	0x0800641b
 80062c4:	08006269 	.word	0x08006269
 80062c8:	0800631d 	.word	0x0800631d
 80062cc:	08006269 	.word	0x08006269
 80062d0:	08006269 	.word	0x08006269
 80062d4:	080063e3 	.word	0x080063e3
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	602a      	str	r2, [r5, #0]
 80062e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0a3      	b.n	8006434 <_printf_i+0x1f4>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	6829      	ldr	r1, [r5, #0]
 80062f0:	0606      	lsls	r6, r0, #24
 80062f2:	f101 0304 	add.w	r3, r1, #4
 80062f6:	d50a      	bpl.n	800630e <_printf_i+0xce>
 80062f8:	680e      	ldr	r6, [r1, #0]
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	da03      	bge.n	8006308 <_printf_i+0xc8>
 8006300:	232d      	movs	r3, #45	; 0x2d
 8006302:	4276      	negs	r6, r6
 8006304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006308:	485e      	ldr	r0, [pc, #376]	; (8006484 <_printf_i+0x244>)
 800630a:	230a      	movs	r3, #10
 800630c:	e019      	b.n	8006342 <_printf_i+0x102>
 800630e:	680e      	ldr	r6, [r1, #0]
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006316:	bf18      	it	ne
 8006318:	b236      	sxthne	r6, r6
 800631a:	e7ef      	b.n	80062fc <_printf_i+0xbc>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	6820      	ldr	r0, [r4, #0]
 8006320:	1d19      	adds	r1, r3, #4
 8006322:	6029      	str	r1, [r5, #0]
 8006324:	0601      	lsls	r1, r0, #24
 8006326:	d501      	bpl.n	800632c <_printf_i+0xec>
 8006328:	681e      	ldr	r6, [r3, #0]
 800632a:	e002      	b.n	8006332 <_printf_i+0xf2>
 800632c:	0646      	lsls	r6, r0, #25
 800632e:	d5fb      	bpl.n	8006328 <_printf_i+0xe8>
 8006330:	881e      	ldrh	r6, [r3, #0]
 8006332:	4854      	ldr	r0, [pc, #336]	; (8006484 <_printf_i+0x244>)
 8006334:	2f6f      	cmp	r7, #111	; 0x6f
 8006336:	bf0c      	ite	eq
 8006338:	2308      	moveq	r3, #8
 800633a:	230a      	movne	r3, #10
 800633c:	2100      	movs	r1, #0
 800633e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006342:	6865      	ldr	r5, [r4, #4]
 8006344:	60a5      	str	r5, [r4, #8]
 8006346:	2d00      	cmp	r5, #0
 8006348:	bfa2      	ittt	ge
 800634a:	6821      	ldrge	r1, [r4, #0]
 800634c:	f021 0104 	bicge.w	r1, r1, #4
 8006350:	6021      	strge	r1, [r4, #0]
 8006352:	b90e      	cbnz	r6, 8006358 <_printf_i+0x118>
 8006354:	2d00      	cmp	r5, #0
 8006356:	d04d      	beq.n	80063f4 <_printf_i+0x1b4>
 8006358:	4615      	mov	r5, r2
 800635a:	fbb6 f1f3 	udiv	r1, r6, r3
 800635e:	fb03 6711 	mls	r7, r3, r1, r6
 8006362:	5dc7      	ldrb	r7, [r0, r7]
 8006364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006368:	4637      	mov	r7, r6
 800636a:	42bb      	cmp	r3, r7
 800636c:	460e      	mov	r6, r1
 800636e:	d9f4      	bls.n	800635a <_printf_i+0x11a>
 8006370:	2b08      	cmp	r3, #8
 8006372:	d10b      	bne.n	800638c <_printf_i+0x14c>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	07de      	lsls	r6, r3, #31
 8006378:	d508      	bpl.n	800638c <_printf_i+0x14c>
 800637a:	6923      	ldr	r3, [r4, #16]
 800637c:	6861      	ldr	r1, [r4, #4]
 800637e:	4299      	cmp	r1, r3
 8006380:	bfde      	ittt	le
 8006382:	2330      	movle	r3, #48	; 0x30
 8006384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006388:	f105 35ff 	addle.w	r5, r5, #4294967295
 800638c:	1b52      	subs	r2, r2, r5
 800638e:	6122      	str	r2, [r4, #16]
 8006390:	f8cd a000 	str.w	sl, [sp]
 8006394:	464b      	mov	r3, r9
 8006396:	aa03      	add	r2, sp, #12
 8006398:	4621      	mov	r1, r4
 800639a:	4640      	mov	r0, r8
 800639c:	f7ff fee2 	bl	8006164 <_printf_common>
 80063a0:	3001      	adds	r0, #1
 80063a2:	d14c      	bne.n	800643e <_printf_i+0x1fe>
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	b004      	add	sp, #16
 80063aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ae:	4835      	ldr	r0, [pc, #212]	; (8006484 <_printf_i+0x244>)
 80063b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063b4:	6829      	ldr	r1, [r5, #0]
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80063bc:	6029      	str	r1, [r5, #0]
 80063be:	061d      	lsls	r5, r3, #24
 80063c0:	d514      	bpl.n	80063ec <_printf_i+0x1ac>
 80063c2:	07df      	lsls	r7, r3, #31
 80063c4:	bf44      	itt	mi
 80063c6:	f043 0320 	orrmi.w	r3, r3, #32
 80063ca:	6023      	strmi	r3, [r4, #0]
 80063cc:	b91e      	cbnz	r6, 80063d6 <_printf_i+0x196>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	f023 0320 	bic.w	r3, r3, #32
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	2310      	movs	r3, #16
 80063d8:	e7b0      	b.n	800633c <_printf_i+0xfc>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	f043 0320 	orr.w	r3, r3, #32
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	2378      	movs	r3, #120	; 0x78
 80063e4:	4828      	ldr	r0, [pc, #160]	; (8006488 <_printf_i+0x248>)
 80063e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063ea:	e7e3      	b.n	80063b4 <_printf_i+0x174>
 80063ec:	0659      	lsls	r1, r3, #25
 80063ee:	bf48      	it	mi
 80063f0:	b2b6      	uxthmi	r6, r6
 80063f2:	e7e6      	b.n	80063c2 <_printf_i+0x182>
 80063f4:	4615      	mov	r5, r2
 80063f6:	e7bb      	b.n	8006370 <_printf_i+0x130>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	6826      	ldr	r6, [r4, #0]
 80063fc:	6961      	ldr	r1, [r4, #20]
 80063fe:	1d18      	adds	r0, r3, #4
 8006400:	6028      	str	r0, [r5, #0]
 8006402:	0635      	lsls	r5, r6, #24
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	d501      	bpl.n	800640c <_printf_i+0x1cc>
 8006408:	6019      	str	r1, [r3, #0]
 800640a:	e002      	b.n	8006412 <_printf_i+0x1d2>
 800640c:	0670      	lsls	r0, r6, #25
 800640e:	d5fb      	bpl.n	8006408 <_printf_i+0x1c8>
 8006410:	8019      	strh	r1, [r3, #0]
 8006412:	2300      	movs	r3, #0
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	4615      	mov	r5, r2
 8006418:	e7ba      	b.n	8006390 <_printf_i+0x150>
 800641a:	682b      	ldr	r3, [r5, #0]
 800641c:	1d1a      	adds	r2, r3, #4
 800641e:	602a      	str	r2, [r5, #0]
 8006420:	681d      	ldr	r5, [r3, #0]
 8006422:	6862      	ldr	r2, [r4, #4]
 8006424:	2100      	movs	r1, #0
 8006426:	4628      	mov	r0, r5
 8006428:	f7f9 ff12 	bl	8000250 <memchr>
 800642c:	b108      	cbz	r0, 8006432 <_printf_i+0x1f2>
 800642e:	1b40      	subs	r0, r0, r5
 8006430:	6060      	str	r0, [r4, #4]
 8006432:	6863      	ldr	r3, [r4, #4]
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	2300      	movs	r3, #0
 8006438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643c:	e7a8      	b.n	8006390 <_printf_i+0x150>
 800643e:	6923      	ldr	r3, [r4, #16]
 8006440:	462a      	mov	r2, r5
 8006442:	4649      	mov	r1, r9
 8006444:	4640      	mov	r0, r8
 8006446:	47d0      	blx	sl
 8006448:	3001      	adds	r0, #1
 800644a:	d0ab      	beq.n	80063a4 <_printf_i+0x164>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	079b      	lsls	r3, r3, #30
 8006450:	d413      	bmi.n	800647a <_printf_i+0x23a>
 8006452:	68e0      	ldr	r0, [r4, #12]
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	4298      	cmp	r0, r3
 8006458:	bfb8      	it	lt
 800645a:	4618      	movlt	r0, r3
 800645c:	e7a4      	b.n	80063a8 <_printf_i+0x168>
 800645e:	2301      	movs	r3, #1
 8006460:	4632      	mov	r2, r6
 8006462:	4649      	mov	r1, r9
 8006464:	4640      	mov	r0, r8
 8006466:	47d0      	blx	sl
 8006468:	3001      	adds	r0, #1
 800646a:	d09b      	beq.n	80063a4 <_printf_i+0x164>
 800646c:	3501      	adds	r5, #1
 800646e:	68e3      	ldr	r3, [r4, #12]
 8006470:	9903      	ldr	r1, [sp, #12]
 8006472:	1a5b      	subs	r3, r3, r1
 8006474:	42ab      	cmp	r3, r5
 8006476:	dcf2      	bgt.n	800645e <_printf_i+0x21e>
 8006478:	e7eb      	b.n	8006452 <_printf_i+0x212>
 800647a:	2500      	movs	r5, #0
 800647c:	f104 0619 	add.w	r6, r4, #25
 8006480:	e7f5      	b.n	800646e <_printf_i+0x22e>
 8006482:	bf00      	nop
 8006484:	08008f46 	.word	0x08008f46
 8006488:	08008f57 	.word	0x08008f57

0800648c <_sbrk_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d06      	ldr	r5, [pc, #24]	; (80064a8 <_sbrk_r+0x1c>)
 8006490:	2300      	movs	r3, #0
 8006492:	4604      	mov	r4, r0
 8006494:	4608      	mov	r0, r1
 8006496:	602b      	str	r3, [r5, #0]
 8006498:	f002 f928 	bl	80086ec <_sbrk>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_sbrk_r+0x1a>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_sbrk_r+0x1a>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	20004a48 	.word	0x20004a48

080064ac <siprintf>:
 80064ac:	b40e      	push	{r1, r2, r3}
 80064ae:	b500      	push	{lr}
 80064b0:	b09c      	sub	sp, #112	; 0x70
 80064b2:	ab1d      	add	r3, sp, #116	; 0x74
 80064b4:	9002      	str	r0, [sp, #8]
 80064b6:	9006      	str	r0, [sp, #24]
 80064b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064bc:	4809      	ldr	r0, [pc, #36]	; (80064e4 <siprintf+0x38>)
 80064be:	9107      	str	r1, [sp, #28]
 80064c0:	9104      	str	r1, [sp, #16]
 80064c2:	4909      	ldr	r1, [pc, #36]	; (80064e8 <siprintf+0x3c>)
 80064c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c8:	9105      	str	r1, [sp, #20]
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	a902      	add	r1, sp, #8
 80064d0:	f001 fa7c 	bl	80079cc <_svfiprintf_r>
 80064d4:	9b02      	ldr	r3, [sp, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	b01c      	add	sp, #112	; 0x70
 80064dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e0:	b003      	add	sp, #12
 80064e2:	4770      	bx	lr
 80064e4:	20000010 	.word	0x20000010
 80064e8:	ffff0208 	.word	0xffff0208

080064ec <__sread>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	460c      	mov	r4, r1
 80064f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f4:	f001 fb6a 	bl	8007bcc <_read_r>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	bfab      	itete	ge
 80064fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006500:	181b      	addge	r3, r3, r0
 8006502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006506:	bfac      	ite	ge
 8006508:	6563      	strge	r3, [r4, #84]	; 0x54
 800650a:	81a3      	strhlt	r3, [r4, #12]
 800650c:	bd10      	pop	{r4, pc}

0800650e <__swrite>:
 800650e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006512:	461f      	mov	r7, r3
 8006514:	898b      	ldrh	r3, [r1, #12]
 8006516:	05db      	lsls	r3, r3, #23
 8006518:	4605      	mov	r5, r0
 800651a:	460c      	mov	r4, r1
 800651c:	4616      	mov	r6, r2
 800651e:	d505      	bpl.n	800652c <__swrite+0x1e>
 8006520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006524:	2302      	movs	r3, #2
 8006526:	2200      	movs	r2, #0
 8006528:	f000 fe44 	bl	80071b4 <_lseek_r>
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006536:	81a3      	strh	r3, [r4, #12]
 8006538:	4632      	mov	r2, r6
 800653a:	463b      	mov	r3, r7
 800653c:	4628      	mov	r0, r5
 800653e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006542:	f000 b817 	b.w	8006574 <_write_r>

08006546 <__sseek>:
 8006546:	b510      	push	{r4, lr}
 8006548:	460c      	mov	r4, r1
 800654a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654e:	f000 fe31 	bl	80071b4 <_lseek_r>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	bf15      	itete	ne
 8006558:	6560      	strne	r0, [r4, #84]	; 0x54
 800655a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800655e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006562:	81a3      	strheq	r3, [r4, #12]
 8006564:	bf18      	it	ne
 8006566:	81a3      	strhne	r3, [r4, #12]
 8006568:	bd10      	pop	{r4, pc}

0800656a <__sclose>:
 800656a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656e:	f000 b813 	b.w	8006598 <_close_r>
	...

08006574 <_write_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d07      	ldr	r5, [pc, #28]	; (8006594 <_write_r+0x20>)
 8006578:	4604      	mov	r4, r0
 800657a:	4608      	mov	r0, r1
 800657c:	4611      	mov	r1, r2
 800657e:	2200      	movs	r2, #0
 8006580:	602a      	str	r2, [r5, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f002 f8c0 	bl	8008708 <_write>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_write_r+0x1e>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_write_r+0x1e>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	20004a48 	.word	0x20004a48

08006598 <_close_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4d06      	ldr	r5, [pc, #24]	; (80065b4 <_close_r+0x1c>)
 800659c:	2300      	movs	r3, #0
 800659e:	4604      	mov	r4, r0
 80065a0:	4608      	mov	r0, r1
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	f002 f86a 	bl	800867c <_close>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_close_r+0x1a>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_close_r+0x1a>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	20004a48 	.word	0x20004a48

080065b8 <quorem>:
 80065b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	6903      	ldr	r3, [r0, #16]
 80065be:	690c      	ldr	r4, [r1, #16]
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	4607      	mov	r7, r0
 80065c4:	f2c0 8081 	blt.w	80066ca <quorem+0x112>
 80065c8:	3c01      	subs	r4, #1
 80065ca:	f101 0814 	add.w	r8, r1, #20
 80065ce:	f100 0514 	add.w	r5, r0, #20
 80065d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065e0:	3301      	adds	r3, #1
 80065e2:	429a      	cmp	r2, r3
 80065e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80065e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80065f0:	d331      	bcc.n	8006656 <quorem+0x9e>
 80065f2:	f04f 0e00 	mov.w	lr, #0
 80065f6:	4640      	mov	r0, r8
 80065f8:	46ac      	mov	ip, r5
 80065fa:	46f2      	mov	sl, lr
 80065fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006600:	b293      	uxth	r3, r2
 8006602:	fb06 e303 	mla	r3, r6, r3, lr
 8006606:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800660a:	b29b      	uxth	r3, r3
 800660c:	ebaa 0303 	sub.w	r3, sl, r3
 8006610:	f8dc a000 	ldr.w	sl, [ip]
 8006614:	0c12      	lsrs	r2, r2, #16
 8006616:	fa13 f38a 	uxtah	r3, r3, sl
 800661a:	fb06 e202 	mla	r2, r6, r2, lr
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	9b00      	ldr	r3, [sp, #0]
 8006622:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006626:	b292      	uxth	r2, r2
 8006628:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800662c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006630:	f8bd 3000 	ldrh.w	r3, [sp]
 8006634:	4581      	cmp	r9, r0
 8006636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800663a:	f84c 3b04 	str.w	r3, [ip], #4
 800663e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006642:	d2db      	bcs.n	80065fc <quorem+0x44>
 8006644:	f855 300b 	ldr.w	r3, [r5, fp]
 8006648:	b92b      	cbnz	r3, 8006656 <quorem+0x9e>
 800664a:	9b01      	ldr	r3, [sp, #4]
 800664c:	3b04      	subs	r3, #4
 800664e:	429d      	cmp	r5, r3
 8006650:	461a      	mov	r2, r3
 8006652:	d32e      	bcc.n	80066b2 <quorem+0xfa>
 8006654:	613c      	str	r4, [r7, #16]
 8006656:	4638      	mov	r0, r7
 8006658:	f001 f85a 	bl	8007710 <__mcmp>
 800665c:	2800      	cmp	r0, #0
 800665e:	db24      	blt.n	80066aa <quorem+0xf2>
 8006660:	3601      	adds	r6, #1
 8006662:	4628      	mov	r0, r5
 8006664:	f04f 0c00 	mov.w	ip, #0
 8006668:	f858 2b04 	ldr.w	r2, [r8], #4
 800666c:	f8d0 e000 	ldr.w	lr, [r0]
 8006670:	b293      	uxth	r3, r2
 8006672:	ebac 0303 	sub.w	r3, ip, r3
 8006676:	0c12      	lsrs	r2, r2, #16
 8006678:	fa13 f38e 	uxtah	r3, r3, lr
 800667c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006684:	b29b      	uxth	r3, r3
 8006686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800668a:	45c1      	cmp	r9, r8
 800668c:	f840 3b04 	str.w	r3, [r0], #4
 8006690:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006694:	d2e8      	bcs.n	8006668 <quorem+0xb0>
 8006696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800669a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800669e:	b922      	cbnz	r2, 80066aa <quorem+0xf2>
 80066a0:	3b04      	subs	r3, #4
 80066a2:	429d      	cmp	r5, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	d30a      	bcc.n	80066be <quorem+0x106>
 80066a8:	613c      	str	r4, [r7, #16]
 80066aa:	4630      	mov	r0, r6
 80066ac:	b003      	add	sp, #12
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	6812      	ldr	r2, [r2, #0]
 80066b4:	3b04      	subs	r3, #4
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	d1cc      	bne.n	8006654 <quorem+0x9c>
 80066ba:	3c01      	subs	r4, #1
 80066bc:	e7c7      	b.n	800664e <quorem+0x96>
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	3b04      	subs	r3, #4
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	d1f0      	bne.n	80066a8 <quorem+0xf0>
 80066c6:	3c01      	subs	r4, #1
 80066c8:	e7eb      	b.n	80066a2 <quorem+0xea>
 80066ca:	2000      	movs	r0, #0
 80066cc:	e7ee      	b.n	80066ac <quorem+0xf4>
	...

080066d0 <_dtoa_r>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	ed2d 8b02 	vpush	{d8}
 80066d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066da:	b091      	sub	sp, #68	; 0x44
 80066dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80066e0:	ec59 8b10 	vmov	r8, r9, d0
 80066e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80066e6:	9106      	str	r1, [sp, #24]
 80066e8:	4606      	mov	r6, r0
 80066ea:	9208      	str	r2, [sp, #32]
 80066ec:	930c      	str	r3, [sp, #48]	; 0x30
 80066ee:	b975      	cbnz	r5, 800670e <_dtoa_r+0x3e>
 80066f0:	2010      	movs	r0, #16
 80066f2:	f7ff f97b 	bl	80059ec <malloc>
 80066f6:	4602      	mov	r2, r0
 80066f8:	6270      	str	r0, [r6, #36]	; 0x24
 80066fa:	b920      	cbnz	r0, 8006706 <_dtoa_r+0x36>
 80066fc:	4baa      	ldr	r3, [pc, #680]	; (80069a8 <_dtoa_r+0x2d8>)
 80066fe:	21ea      	movs	r1, #234	; 0xea
 8006700:	48aa      	ldr	r0, [pc, #680]	; (80069ac <_dtoa_r+0x2dc>)
 8006702:	f001 fa75 	bl	8007bf0 <__assert_func>
 8006706:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800670a:	6005      	str	r5, [r0, #0]
 800670c:	60c5      	str	r5, [r0, #12]
 800670e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006710:	6819      	ldr	r1, [r3, #0]
 8006712:	b151      	cbz	r1, 800672a <_dtoa_r+0x5a>
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	604a      	str	r2, [r1, #4]
 8006718:	2301      	movs	r3, #1
 800671a:	4093      	lsls	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
 800671e:	4630      	mov	r0, r6
 8006720:	f000 fdb4 	bl	800728c <_Bfree>
 8006724:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f1b9 0300 	subs.w	r3, r9, #0
 800672e:	bfbb      	ittet	lt
 8006730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006734:	9303      	strlt	r3, [sp, #12]
 8006736:	2300      	movge	r3, #0
 8006738:	2201      	movlt	r2, #1
 800673a:	bfac      	ite	ge
 800673c:	6023      	strge	r3, [r4, #0]
 800673e:	6022      	strlt	r2, [r4, #0]
 8006740:	4b9b      	ldr	r3, [pc, #620]	; (80069b0 <_dtoa_r+0x2e0>)
 8006742:	9c03      	ldr	r4, [sp, #12]
 8006744:	43a3      	bics	r3, r4
 8006746:	d11c      	bne.n	8006782 <_dtoa_r+0xb2>
 8006748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800674a:	f242 730f 	movw	r3, #9999	; 0x270f
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006754:	ea53 0308 	orrs.w	r3, r3, r8
 8006758:	f000 84fd 	beq.w	8007156 <_dtoa_r+0xa86>
 800675c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800675e:	b963      	cbnz	r3, 800677a <_dtoa_r+0xaa>
 8006760:	4b94      	ldr	r3, [pc, #592]	; (80069b4 <_dtoa_r+0x2e4>)
 8006762:	e01f      	b.n	80067a4 <_dtoa_r+0xd4>
 8006764:	4b94      	ldr	r3, [pc, #592]	; (80069b8 <_dtoa_r+0x2e8>)
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	3308      	adds	r3, #8
 800676a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	9801      	ldr	r0, [sp, #4]
 8006770:	b011      	add	sp, #68	; 0x44
 8006772:	ecbd 8b02 	vpop	{d8}
 8006776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677a:	4b8e      	ldr	r3, [pc, #568]	; (80069b4 <_dtoa_r+0x2e4>)
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	3303      	adds	r3, #3
 8006780:	e7f3      	b.n	800676a <_dtoa_r+0x9a>
 8006782:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006786:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800678a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678e:	d10b      	bne.n	80067a8 <_dtoa_r+0xd8>
 8006790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006792:	2301      	movs	r3, #1
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 84d9 	beq.w	8007150 <_dtoa_r+0xa80>
 800679e:	4887      	ldr	r0, [pc, #540]	; (80069bc <_dtoa_r+0x2ec>)
 80067a0:	6018      	str	r0, [r3, #0]
 80067a2:	1e43      	subs	r3, r0, #1
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	e7e2      	b.n	800676e <_dtoa_r+0x9e>
 80067a8:	a90f      	add	r1, sp, #60	; 0x3c
 80067aa:	aa0e      	add	r2, sp, #56	; 0x38
 80067ac:	4630      	mov	r0, r6
 80067ae:	eeb0 0b48 	vmov.f64	d0, d8
 80067b2:	f001 f853 	bl	800785c <__d2b>
 80067b6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80067ba:	4605      	mov	r5, r0
 80067bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80067be:	2900      	cmp	r1, #0
 80067c0:	d046      	beq.n	8006850 <_dtoa_r+0x180>
 80067c2:	ee18 4a90 	vmov	r4, s17
 80067c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80067ca:	ec53 2b18 	vmov	r2, r3, d8
 80067ce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80067d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80067d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80067da:	2400      	movs	r4, #0
 80067dc:	ec43 2b16 	vmov	d6, r2, r3
 80067e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80067e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006990 <_dtoa_r+0x2c0>
 80067e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80067ec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006998 <_dtoa_r+0x2c8>
 80067f0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80067f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80069a0 <_dtoa_r+0x2d0>
 80067f8:	ee07 1a90 	vmov	s15, r1
 80067fc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006800:	eeb0 7b46 	vmov.f64	d7, d6
 8006804:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006808:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800680c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006814:	ee16 ba90 	vmov	fp, s13
 8006818:	940a      	str	r4, [sp, #40]	; 0x28
 800681a:	d508      	bpl.n	800682e <_dtoa_r+0x15e>
 800681c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006820:	eeb4 6b47 	vcmp.f64	d6, d7
 8006824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006828:	bf18      	it	ne
 800682a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800682e:	f1bb 0f16 	cmp.w	fp, #22
 8006832:	d82f      	bhi.n	8006894 <_dtoa_r+0x1c4>
 8006834:	4b62      	ldr	r3, [pc, #392]	; (80069c0 <_dtoa_r+0x2f0>)
 8006836:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800683a:	ed93 7b00 	vldr	d7, [r3]
 800683e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006846:	d501      	bpl.n	800684c <_dtoa_r+0x17c>
 8006848:	f10b 3bff 	add.w	fp, fp, #4294967295
 800684c:	2300      	movs	r3, #0
 800684e:	e022      	b.n	8006896 <_dtoa_r+0x1c6>
 8006850:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006852:	4401      	add	r1, r0
 8006854:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006858:	2b20      	cmp	r3, #32
 800685a:	bfc1      	itttt	gt
 800685c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006860:	fa04 f303 	lslgt.w	r3, r4, r3
 8006864:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006868:	fa28 f804 	lsrgt.w	r8, r8, r4
 800686c:	bfd6      	itet	le
 800686e:	f1c3 0320 	rsble	r3, r3, #32
 8006872:	ea43 0808 	orrgt.w	r8, r3, r8
 8006876:	fa08 f803 	lslle.w	r8, r8, r3
 800687a:	ee07 8a90 	vmov	s15, r8
 800687e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006882:	3901      	subs	r1, #1
 8006884:	ee17 4a90 	vmov	r4, s15
 8006888:	ec53 2b17 	vmov	r2, r3, d7
 800688c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006890:	2401      	movs	r4, #1
 8006892:	e7a3      	b.n	80067dc <_dtoa_r+0x10c>
 8006894:	2301      	movs	r3, #1
 8006896:	930b      	str	r3, [sp, #44]	; 0x2c
 8006898:	1a43      	subs	r3, r0, r1
 800689a:	1e5a      	subs	r2, r3, #1
 800689c:	bf45      	ittet	mi
 800689e:	f1c3 0301 	rsbmi	r3, r3, #1
 80068a2:	9304      	strmi	r3, [sp, #16]
 80068a4:	2300      	movpl	r3, #0
 80068a6:	2300      	movmi	r3, #0
 80068a8:	9205      	str	r2, [sp, #20]
 80068aa:	bf54      	ite	pl
 80068ac:	9304      	strpl	r3, [sp, #16]
 80068ae:	9305      	strmi	r3, [sp, #20]
 80068b0:	f1bb 0f00 	cmp.w	fp, #0
 80068b4:	db18      	blt.n	80068e8 <_dtoa_r+0x218>
 80068b6:	9b05      	ldr	r3, [sp, #20]
 80068b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80068bc:	445b      	add	r3, fp
 80068be:	9305      	str	r3, [sp, #20]
 80068c0:	2300      	movs	r3, #0
 80068c2:	9a06      	ldr	r2, [sp, #24]
 80068c4:	2a09      	cmp	r2, #9
 80068c6:	d849      	bhi.n	800695c <_dtoa_r+0x28c>
 80068c8:	2a05      	cmp	r2, #5
 80068ca:	bfc4      	itt	gt
 80068cc:	3a04      	subgt	r2, #4
 80068ce:	9206      	strgt	r2, [sp, #24]
 80068d0:	9a06      	ldr	r2, [sp, #24]
 80068d2:	f1a2 0202 	sub.w	r2, r2, #2
 80068d6:	bfcc      	ite	gt
 80068d8:	2400      	movgt	r4, #0
 80068da:	2401      	movle	r4, #1
 80068dc:	2a03      	cmp	r2, #3
 80068de:	d848      	bhi.n	8006972 <_dtoa_r+0x2a2>
 80068e0:	e8df f002 	tbb	[pc, r2]
 80068e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80068e8:	9b04      	ldr	r3, [sp, #16]
 80068ea:	2200      	movs	r2, #0
 80068ec:	eba3 030b 	sub.w	r3, r3, fp
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	9209      	str	r2, [sp, #36]	; 0x24
 80068f4:	f1cb 0300 	rsb	r3, fp, #0
 80068f8:	e7e3      	b.n	80068c2 <_dtoa_r+0x1f2>
 80068fa:	2200      	movs	r2, #0
 80068fc:	9207      	str	r2, [sp, #28]
 80068fe:	9a08      	ldr	r2, [sp, #32]
 8006900:	2a00      	cmp	r2, #0
 8006902:	dc39      	bgt.n	8006978 <_dtoa_r+0x2a8>
 8006904:	f04f 0a01 	mov.w	sl, #1
 8006908:	46d1      	mov	r9, sl
 800690a:	4652      	mov	r2, sl
 800690c:	f8cd a020 	str.w	sl, [sp, #32]
 8006910:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8006912:	2100      	movs	r1, #0
 8006914:	6079      	str	r1, [r7, #4]
 8006916:	2004      	movs	r0, #4
 8006918:	f100 0c14 	add.w	ip, r0, #20
 800691c:	4594      	cmp	ip, r2
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	d92f      	bls.n	8006982 <_dtoa_r+0x2b2>
 8006922:	4630      	mov	r0, r6
 8006924:	930d      	str	r3, [sp, #52]	; 0x34
 8006926:	f000 fc71 	bl	800720c <_Balloc>
 800692a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800692c:	9001      	str	r0, [sp, #4]
 800692e:	4602      	mov	r2, r0
 8006930:	2800      	cmp	r0, #0
 8006932:	d149      	bne.n	80069c8 <_dtoa_r+0x2f8>
 8006934:	4b23      	ldr	r3, [pc, #140]	; (80069c4 <_dtoa_r+0x2f4>)
 8006936:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800693a:	e6e1      	b.n	8006700 <_dtoa_r+0x30>
 800693c:	2201      	movs	r2, #1
 800693e:	e7dd      	b.n	80068fc <_dtoa_r+0x22c>
 8006940:	2200      	movs	r2, #0
 8006942:	9207      	str	r2, [sp, #28]
 8006944:	9a08      	ldr	r2, [sp, #32]
 8006946:	eb0b 0a02 	add.w	sl, fp, r2
 800694a:	f10a 0901 	add.w	r9, sl, #1
 800694e:	464a      	mov	r2, r9
 8006950:	2a01      	cmp	r2, #1
 8006952:	bfb8      	it	lt
 8006954:	2201      	movlt	r2, #1
 8006956:	e7db      	b.n	8006910 <_dtoa_r+0x240>
 8006958:	2201      	movs	r2, #1
 800695a:	e7f2      	b.n	8006942 <_dtoa_r+0x272>
 800695c:	2401      	movs	r4, #1
 800695e:	2200      	movs	r2, #0
 8006960:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006964:	f04f 3aff 	mov.w	sl, #4294967295
 8006968:	2100      	movs	r1, #0
 800696a:	46d1      	mov	r9, sl
 800696c:	2212      	movs	r2, #18
 800696e:	9108      	str	r1, [sp, #32]
 8006970:	e7ce      	b.n	8006910 <_dtoa_r+0x240>
 8006972:	2201      	movs	r2, #1
 8006974:	9207      	str	r2, [sp, #28]
 8006976:	e7f5      	b.n	8006964 <_dtoa_r+0x294>
 8006978:	f8dd a020 	ldr.w	sl, [sp, #32]
 800697c:	46d1      	mov	r9, sl
 800697e:	4652      	mov	r2, sl
 8006980:	e7c6      	b.n	8006910 <_dtoa_r+0x240>
 8006982:	3101      	adds	r1, #1
 8006984:	6079      	str	r1, [r7, #4]
 8006986:	0040      	lsls	r0, r0, #1
 8006988:	e7c6      	b.n	8006918 <_dtoa_r+0x248>
 800698a:	bf00      	nop
 800698c:	f3af 8000 	nop.w
 8006990:	636f4361 	.word	0x636f4361
 8006994:	3fd287a7 	.word	0x3fd287a7
 8006998:	8b60c8b3 	.word	0x8b60c8b3
 800699c:	3fc68a28 	.word	0x3fc68a28
 80069a0:	509f79fb 	.word	0x509f79fb
 80069a4:	3fd34413 	.word	0x3fd34413
 80069a8:	08008f75 	.word	0x08008f75
 80069ac:	08008f8c 	.word	0x08008f8c
 80069b0:	7ff00000 	.word	0x7ff00000
 80069b4:	08008f71 	.word	0x08008f71
 80069b8:	08008f68 	.word	0x08008f68
 80069bc:	08008f45 	.word	0x08008f45
 80069c0:	08009080 	.word	0x08009080
 80069c4:	08008fe7 	.word	0x08008fe7
 80069c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80069ca:	9901      	ldr	r1, [sp, #4]
 80069cc:	6011      	str	r1, [r2, #0]
 80069ce:	f1b9 0f0e 	cmp.w	r9, #14
 80069d2:	d86c      	bhi.n	8006aae <_dtoa_r+0x3de>
 80069d4:	2c00      	cmp	r4, #0
 80069d6:	d06a      	beq.n	8006aae <_dtoa_r+0x3de>
 80069d8:	f1bb 0f00 	cmp.w	fp, #0
 80069dc:	f340 80a0 	ble.w	8006b20 <_dtoa_r+0x450>
 80069e0:	49c1      	ldr	r1, [pc, #772]	; (8006ce8 <_dtoa_r+0x618>)
 80069e2:	f00b 020f 	and.w	r2, fp, #15
 80069e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80069ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80069ee:	ed92 7b00 	vldr	d7, [r2]
 80069f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80069f6:	f000 8087 	beq.w	8006b08 <_dtoa_r+0x438>
 80069fa:	4abc      	ldr	r2, [pc, #752]	; (8006cec <_dtoa_r+0x61c>)
 80069fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8006a00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006a04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006a08:	f001 010f 	and.w	r1, r1, #15
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	48b7      	ldr	r0, [pc, #732]	; (8006cec <_dtoa_r+0x61c>)
 8006a10:	2900      	cmp	r1, #0
 8006a12:	d17b      	bne.n	8006b0c <_dtoa_r+0x43c>
 8006a14:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006a18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006a1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a22:	2900      	cmp	r1, #0
 8006a24:	f000 80a2 	beq.w	8006b6c <_dtoa_r+0x49c>
 8006a28:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006a2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a38:	f140 8098 	bpl.w	8006b6c <_dtoa_r+0x49c>
 8006a3c:	f1b9 0f00 	cmp.w	r9, #0
 8006a40:	f000 8094 	beq.w	8006b6c <_dtoa_r+0x49c>
 8006a44:	f1ba 0f00 	cmp.w	sl, #0
 8006a48:	dd2f      	ble.n	8006aaa <_dtoa_r+0x3da>
 8006a4a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006a4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006a52:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a56:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006a5a:	3201      	adds	r2, #1
 8006a5c:	4650      	mov	r0, sl
 8006a5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006a62:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006a66:	ee07 2a90 	vmov	s15, r2
 8006a6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a6e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006a72:	ee15 4a90 	vmov	r4, s11
 8006a76:	ec52 1b15 	vmov	r1, r2, d5
 8006a7a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d177      	bne.n	8006b72 <_dtoa_r+0x4a2>
 8006a82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006a86:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006a8a:	ec42 1b17 	vmov	d7, r1, r2
 8006a8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a96:	f300 8263 	bgt.w	8006f60 <_dtoa_r+0x890>
 8006a9a:	eeb1 7b47 	vneg.f64	d7, d7
 8006a9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa6:	f100 8258 	bmi.w	8006f5a <_dtoa_r+0x88a>
 8006aaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ab0:	2a00      	cmp	r2, #0
 8006ab2:	f2c0 811d 	blt.w	8006cf0 <_dtoa_r+0x620>
 8006ab6:	f1bb 0f0e 	cmp.w	fp, #14
 8006aba:	f300 8119 	bgt.w	8006cf0 <_dtoa_r+0x620>
 8006abe:	4b8a      	ldr	r3, [pc, #552]	; (8006ce8 <_dtoa_r+0x618>)
 8006ac0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ac4:	ed93 6b00 	vldr	d6, [r3]
 8006ac8:	9b08      	ldr	r3, [sp, #32]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f280 80b7 	bge.w	8006c3e <_dtoa_r+0x56e>
 8006ad0:	f1b9 0f00 	cmp.w	r9, #0
 8006ad4:	f300 80b3 	bgt.w	8006c3e <_dtoa_r+0x56e>
 8006ad8:	f040 823f 	bne.w	8006f5a <_dtoa_r+0x88a>
 8006adc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006ae0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006ae4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ae8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af0:	464c      	mov	r4, r9
 8006af2:	464f      	mov	r7, r9
 8006af4:	f280 8215 	bge.w	8006f22 <_dtoa_r+0x852>
 8006af8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006afc:	2331      	movs	r3, #49	; 0x31
 8006afe:	f808 3b01 	strb.w	r3, [r8], #1
 8006b02:	f10b 0b01 	add.w	fp, fp, #1
 8006b06:	e211      	b.n	8006f2c <_dtoa_r+0x85c>
 8006b08:	2202      	movs	r2, #2
 8006b0a:	e780      	b.n	8006a0e <_dtoa_r+0x33e>
 8006b0c:	07cc      	lsls	r4, r1, #31
 8006b0e:	d504      	bpl.n	8006b1a <_dtoa_r+0x44a>
 8006b10:	ed90 6b00 	vldr	d6, [r0]
 8006b14:	3201      	adds	r2, #1
 8006b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006b1a:	1049      	asrs	r1, r1, #1
 8006b1c:	3008      	adds	r0, #8
 8006b1e:	e777      	b.n	8006a10 <_dtoa_r+0x340>
 8006b20:	d022      	beq.n	8006b68 <_dtoa_r+0x498>
 8006b22:	f1cb 0100 	rsb	r1, fp, #0
 8006b26:	4a70      	ldr	r2, [pc, #448]	; (8006ce8 <_dtoa_r+0x618>)
 8006b28:	f001 000f 	and.w	r0, r1, #15
 8006b2c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006b30:	ed92 7b00 	vldr	d7, [r2]
 8006b34:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006b38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b3c:	486b      	ldr	r0, [pc, #428]	; (8006cec <_dtoa_r+0x61c>)
 8006b3e:	1109      	asrs	r1, r1, #4
 8006b40:	2400      	movs	r4, #0
 8006b42:	2202      	movs	r2, #2
 8006b44:	b929      	cbnz	r1, 8006b52 <_dtoa_r+0x482>
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	f43f af6a 	beq.w	8006a20 <_dtoa_r+0x350>
 8006b4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b50:	e766      	b.n	8006a20 <_dtoa_r+0x350>
 8006b52:	07cf      	lsls	r7, r1, #31
 8006b54:	d505      	bpl.n	8006b62 <_dtoa_r+0x492>
 8006b56:	ed90 6b00 	vldr	d6, [r0]
 8006b5a:	3201      	adds	r2, #1
 8006b5c:	2401      	movs	r4, #1
 8006b5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006b62:	1049      	asrs	r1, r1, #1
 8006b64:	3008      	adds	r0, #8
 8006b66:	e7ed      	b.n	8006b44 <_dtoa_r+0x474>
 8006b68:	2202      	movs	r2, #2
 8006b6a:	e759      	b.n	8006a20 <_dtoa_r+0x350>
 8006b6c:	465f      	mov	r7, fp
 8006b6e:	4648      	mov	r0, r9
 8006b70:	e775      	b.n	8006a5e <_dtoa_r+0x38e>
 8006b72:	ec42 1b17 	vmov	d7, r1, r2
 8006b76:	4a5c      	ldr	r2, [pc, #368]	; (8006ce8 <_dtoa_r+0x618>)
 8006b78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006b7c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006b80:	9a01      	ldr	r2, [sp, #4]
 8006b82:	1814      	adds	r4, r2, r0
 8006b84:	9a07      	ldr	r2, [sp, #28]
 8006b86:	b352      	cbz	r2, 8006bde <_dtoa_r+0x50e>
 8006b88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006b8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006b90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006b98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006b9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006ba0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006ba4:	ee14 2a90 	vmov	r2, s9
 8006ba8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006bac:	3230      	adds	r2, #48	; 0x30
 8006bae:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006bb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bba:	f808 2b01 	strb.w	r2, [r8], #1
 8006bbe:	d439      	bmi.n	8006c34 <_dtoa_r+0x564>
 8006bc0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006bc4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bcc:	d472      	bmi.n	8006cb4 <_dtoa_r+0x5e4>
 8006bce:	45a0      	cmp	r8, r4
 8006bd0:	f43f af6b 	beq.w	8006aaa <_dtoa_r+0x3da>
 8006bd4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006bd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006bdc:	e7e0      	b.n	8006ba0 <_dtoa_r+0x4d0>
 8006bde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006be2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006be6:	4621      	mov	r1, r4
 8006be8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006bec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006bf0:	ee14 2a90 	vmov	r2, s9
 8006bf4:	3230      	adds	r2, #48	; 0x30
 8006bf6:	f808 2b01 	strb.w	r2, [r8], #1
 8006bfa:	45a0      	cmp	r8, r4
 8006bfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006c00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006c04:	d118      	bne.n	8006c38 <_dtoa_r+0x568>
 8006c06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006c0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006c0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c16:	dc4d      	bgt.n	8006cb4 <_dtoa_r+0x5e4>
 8006c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006c1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c24:	f57f af41 	bpl.w	8006aaa <_dtoa_r+0x3da>
 8006c28:	4688      	mov	r8, r1
 8006c2a:	3901      	subs	r1, #1
 8006c2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006c30:	2b30      	cmp	r3, #48	; 0x30
 8006c32:	d0f9      	beq.n	8006c28 <_dtoa_r+0x558>
 8006c34:	46bb      	mov	fp, r7
 8006c36:	e02a      	b.n	8006c8e <_dtoa_r+0x5be>
 8006c38:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006c3c:	e7d6      	b.n	8006bec <_dtoa_r+0x51c>
 8006c3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006c46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006c4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006c4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006c52:	ee15 3a10 	vmov	r3, s10
 8006c56:	3330      	adds	r3, #48	; 0x30
 8006c58:	f808 3b01 	strb.w	r3, [r8], #1
 8006c5c:	9b01      	ldr	r3, [sp, #4]
 8006c5e:	eba8 0303 	sub.w	r3, r8, r3
 8006c62:	4599      	cmp	r9, r3
 8006c64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006c68:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006c6c:	d133      	bne.n	8006cd6 <_dtoa_r+0x606>
 8006c6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006c72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7a:	dc1a      	bgt.n	8006cb2 <_dtoa_r+0x5e2>
 8006c7c:	eeb4 7b46 	vcmp.f64	d7, d6
 8006c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c84:	d103      	bne.n	8006c8e <_dtoa_r+0x5be>
 8006c86:	ee15 3a10 	vmov	r3, s10
 8006c8a:	07d9      	lsls	r1, r3, #31
 8006c8c:	d411      	bmi.n	8006cb2 <_dtoa_r+0x5e2>
 8006c8e:	4629      	mov	r1, r5
 8006c90:	4630      	mov	r0, r6
 8006c92:	f000 fafb 	bl	800728c <_Bfree>
 8006c96:	2300      	movs	r3, #0
 8006c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c9a:	f888 3000 	strb.w	r3, [r8]
 8006c9e:	f10b 0301 	add.w	r3, fp, #1
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f43f ad61 	beq.w	800676e <_dtoa_r+0x9e>
 8006cac:	f8c3 8000 	str.w	r8, [r3]
 8006cb0:	e55d      	b.n	800676e <_dtoa_r+0x9e>
 8006cb2:	465f      	mov	r7, fp
 8006cb4:	4643      	mov	r3, r8
 8006cb6:	4698      	mov	r8, r3
 8006cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cbc:	2a39      	cmp	r2, #57	; 0x39
 8006cbe:	d106      	bne.n	8006cce <_dtoa_r+0x5fe>
 8006cc0:	9a01      	ldr	r2, [sp, #4]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d1f7      	bne.n	8006cb6 <_dtoa_r+0x5e6>
 8006cc6:	9901      	ldr	r1, [sp, #4]
 8006cc8:	2230      	movs	r2, #48	; 0x30
 8006cca:	3701      	adds	r7, #1
 8006ccc:	700a      	strb	r2, [r1, #0]
 8006cce:	781a      	ldrb	r2, [r3, #0]
 8006cd0:	3201      	adds	r2, #1
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	e7ae      	b.n	8006c34 <_dtoa_r+0x564>
 8006cd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006cda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce2:	d1b2      	bne.n	8006c4a <_dtoa_r+0x57a>
 8006ce4:	e7d3      	b.n	8006c8e <_dtoa_r+0x5be>
 8006ce6:	bf00      	nop
 8006ce8:	08009080 	.word	0x08009080
 8006cec:	08009058 	.word	0x08009058
 8006cf0:	9907      	ldr	r1, [sp, #28]
 8006cf2:	2900      	cmp	r1, #0
 8006cf4:	f000 80d0 	beq.w	8006e98 <_dtoa_r+0x7c8>
 8006cf8:	9906      	ldr	r1, [sp, #24]
 8006cfa:	2901      	cmp	r1, #1
 8006cfc:	f300 80b4 	bgt.w	8006e68 <_dtoa_r+0x798>
 8006d00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d02:	2900      	cmp	r1, #0
 8006d04:	f000 80ac 	beq.w	8006e60 <_dtoa_r+0x790>
 8006d08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006d0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006d10:	461c      	mov	r4, r3
 8006d12:	930a      	str	r3, [sp, #40]	; 0x28
 8006d14:	9b04      	ldr	r3, [sp, #16]
 8006d16:	4413      	add	r3, r2
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	9b05      	ldr	r3, [sp, #20]
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	4630      	mov	r0, r6
 8006d22:	9305      	str	r3, [sp, #20]
 8006d24:	f000 fb6a 	bl	80073fc <__i2b>
 8006d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	f1b8 0f00 	cmp.w	r8, #0
 8006d30:	dd0d      	ble.n	8006d4e <_dtoa_r+0x67e>
 8006d32:	9a05      	ldr	r2, [sp, #20]
 8006d34:	2a00      	cmp	r2, #0
 8006d36:	dd0a      	ble.n	8006d4e <_dtoa_r+0x67e>
 8006d38:	4542      	cmp	r2, r8
 8006d3a:	9904      	ldr	r1, [sp, #16]
 8006d3c:	bfa8      	it	ge
 8006d3e:	4642      	movge	r2, r8
 8006d40:	1a89      	subs	r1, r1, r2
 8006d42:	9104      	str	r1, [sp, #16]
 8006d44:	9905      	ldr	r1, [sp, #20]
 8006d46:	eba8 0802 	sub.w	r8, r8, r2
 8006d4a:	1a8a      	subs	r2, r1, r2
 8006d4c:	9205      	str	r2, [sp, #20]
 8006d4e:	b303      	cbz	r3, 8006d92 <_dtoa_r+0x6c2>
 8006d50:	9a07      	ldr	r2, [sp, #28]
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	f000 80a5 	beq.w	8006ea2 <_dtoa_r+0x7d2>
 8006d58:	2c00      	cmp	r4, #0
 8006d5a:	dd13      	ble.n	8006d84 <_dtoa_r+0x6b4>
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	4622      	mov	r2, r4
 8006d60:	4630      	mov	r0, r6
 8006d62:	930d      	str	r3, [sp, #52]	; 0x34
 8006d64:	f000 fc0a 	bl	800757c <__pow5mult>
 8006d68:	462a      	mov	r2, r5
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f000 fb5a 	bl	8007428 <__multiply>
 8006d74:	4629      	mov	r1, r5
 8006d76:	900a      	str	r0, [sp, #40]	; 0x28
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f000 fa87 	bl	800728c <_Bfree>
 8006d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d82:	4615      	mov	r5, r2
 8006d84:	1b1a      	subs	r2, r3, r4
 8006d86:	d004      	beq.n	8006d92 <_dtoa_r+0x6c2>
 8006d88:	4629      	mov	r1, r5
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f000 fbf6 	bl	800757c <__pow5mult>
 8006d90:	4605      	mov	r5, r0
 8006d92:	2101      	movs	r1, #1
 8006d94:	4630      	mov	r0, r6
 8006d96:	f000 fb31 	bl	80073fc <__i2b>
 8006d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	f340 8081 	ble.w	8006ea6 <_dtoa_r+0x7d6>
 8006da4:	461a      	mov	r2, r3
 8006da6:	4601      	mov	r1, r0
 8006da8:	4630      	mov	r0, r6
 8006daa:	f000 fbe7 	bl	800757c <__pow5mult>
 8006dae:	9b06      	ldr	r3, [sp, #24]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	4604      	mov	r4, r0
 8006db4:	dd7a      	ble.n	8006eac <_dtoa_r+0x7dc>
 8006db6:	2300      	movs	r3, #0
 8006db8:	930a      	str	r3, [sp, #40]	; 0x28
 8006dba:	6922      	ldr	r2, [r4, #16]
 8006dbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006dc0:	6910      	ldr	r0, [r2, #16]
 8006dc2:	f000 facb 	bl	800735c <__hi0bits>
 8006dc6:	f1c0 0020 	rsb	r0, r0, #32
 8006dca:	9b05      	ldr	r3, [sp, #20]
 8006dcc:	4418      	add	r0, r3
 8006dce:	f010 001f 	ands.w	r0, r0, #31
 8006dd2:	f000 808c 	beq.w	8006eee <_dtoa_r+0x81e>
 8006dd6:	f1c0 0220 	rsb	r2, r0, #32
 8006dda:	2a04      	cmp	r2, #4
 8006ddc:	f340 8085 	ble.w	8006eea <_dtoa_r+0x81a>
 8006de0:	f1c0 001c 	rsb	r0, r0, #28
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	4403      	add	r3, r0
 8006de8:	9304      	str	r3, [sp, #16]
 8006dea:	9b05      	ldr	r3, [sp, #20]
 8006dec:	4403      	add	r3, r0
 8006dee:	4480      	add	r8, r0
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	9b04      	ldr	r3, [sp, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	dd05      	ble.n	8006e04 <_dtoa_r+0x734>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f000 fc17 	bl	8007630 <__lshift>
 8006e02:	4605      	mov	r5, r0
 8006e04:	9b05      	ldr	r3, [sp, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	dd05      	ble.n	8006e16 <_dtoa_r+0x746>
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f000 fc0e 	bl	8007630 <__lshift>
 8006e14:	4604      	mov	r4, r0
 8006e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d06a      	beq.n	8006ef2 <_dtoa_r+0x822>
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 fc76 	bl	8007710 <__mcmp>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	da64      	bge.n	8006ef2 <_dtoa_r+0x822>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	220a      	movs	r2, #10
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f000 fa4e 	bl	80072d0 <__multadd>
 8006e34:	9b07      	ldr	r3, [sp, #28]
 8006e36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e3a:	4605      	mov	r5, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8191 	beq.w	8007164 <_dtoa_r+0xa94>
 8006e42:	4639      	mov	r1, r7
 8006e44:	2300      	movs	r3, #0
 8006e46:	220a      	movs	r2, #10
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 fa41 	bl	80072d0 <__multadd>
 8006e4e:	f1ba 0f00 	cmp.w	sl, #0
 8006e52:	4607      	mov	r7, r0
 8006e54:	f300 808d 	bgt.w	8006f72 <_dtoa_r+0x8a2>
 8006e58:	9b06      	ldr	r3, [sp, #24]
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	dc50      	bgt.n	8006f00 <_dtoa_r+0x830>
 8006e5e:	e088      	b.n	8006f72 <_dtoa_r+0x8a2>
 8006e60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e66:	e751      	b.n	8006d0c <_dtoa_r+0x63c>
 8006e68:	f109 34ff 	add.w	r4, r9, #4294967295
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	bfbf      	itttt	lt
 8006e70:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006e72:	1ae3      	sublt	r3, r4, r3
 8006e74:	18d2      	addlt	r2, r2, r3
 8006e76:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006e78:	bfb6      	itet	lt
 8006e7a:	4623      	movlt	r3, r4
 8006e7c:	1b1c      	subge	r4, r3, r4
 8006e7e:	2400      	movlt	r4, #0
 8006e80:	f1b9 0f00 	cmp.w	r9, #0
 8006e84:	bfb5      	itete	lt
 8006e86:	9a04      	ldrlt	r2, [sp, #16]
 8006e88:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006e8c:	eba2 0809 	sublt.w	r8, r2, r9
 8006e90:	464a      	movge	r2, r9
 8006e92:	bfb8      	it	lt
 8006e94:	2200      	movlt	r2, #0
 8006e96:	e73c      	b.n	8006d12 <_dtoa_r+0x642>
 8006e98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006e9c:	9f07      	ldr	r7, [sp, #28]
 8006e9e:	461c      	mov	r4, r3
 8006ea0:	e744      	b.n	8006d2c <_dtoa_r+0x65c>
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	e770      	b.n	8006d88 <_dtoa_r+0x6b8>
 8006ea6:	9b06      	ldr	r3, [sp, #24]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	dc18      	bgt.n	8006ede <_dtoa_r+0x80e>
 8006eac:	9b02      	ldr	r3, [sp, #8]
 8006eae:	b9b3      	cbnz	r3, 8006ede <_dtoa_r+0x80e>
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006eb6:	b9a2      	cbnz	r2, 8006ee2 <_dtoa_r+0x812>
 8006eb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ebc:	0d12      	lsrs	r2, r2, #20
 8006ebe:	0512      	lsls	r2, r2, #20
 8006ec0:	b18a      	cbz	r2, 8006ee6 <_dtoa_r+0x816>
 8006ec2:	9b04      	ldr	r3, [sp, #16]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	9b05      	ldr	r3, [sp, #20]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	9305      	str	r3, [sp, #20]
 8006ece:	2301      	movs	r3, #1
 8006ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f47f af70 	bne.w	8006dba <_dtoa_r+0x6ea>
 8006eda:	2001      	movs	r0, #1
 8006edc:	e775      	b.n	8006dca <_dtoa_r+0x6fa>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e7f6      	b.n	8006ed0 <_dtoa_r+0x800>
 8006ee2:	9b02      	ldr	r3, [sp, #8]
 8006ee4:	e7f4      	b.n	8006ed0 <_dtoa_r+0x800>
 8006ee6:	920a      	str	r2, [sp, #40]	; 0x28
 8006ee8:	e7f3      	b.n	8006ed2 <_dtoa_r+0x802>
 8006eea:	d082      	beq.n	8006df2 <_dtoa_r+0x722>
 8006eec:	4610      	mov	r0, r2
 8006eee:	301c      	adds	r0, #28
 8006ef0:	e778      	b.n	8006de4 <_dtoa_r+0x714>
 8006ef2:	f1b9 0f00 	cmp.w	r9, #0
 8006ef6:	dc37      	bgt.n	8006f68 <_dtoa_r+0x898>
 8006ef8:	9b06      	ldr	r3, [sp, #24]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	dd34      	ble.n	8006f68 <_dtoa_r+0x898>
 8006efe:	46ca      	mov	sl, r9
 8006f00:	f1ba 0f00 	cmp.w	sl, #0
 8006f04:	d10d      	bne.n	8006f22 <_dtoa_r+0x852>
 8006f06:	4621      	mov	r1, r4
 8006f08:	4653      	mov	r3, sl
 8006f0a:	2205      	movs	r2, #5
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f000 f9df 	bl	80072d0 <__multadd>
 8006f12:	4601      	mov	r1, r0
 8006f14:	4604      	mov	r4, r0
 8006f16:	4628      	mov	r0, r5
 8006f18:	f000 fbfa 	bl	8007710 <__mcmp>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	f73f adeb 	bgt.w	8006af8 <_dtoa_r+0x428>
 8006f22:	9b08      	ldr	r3, [sp, #32]
 8006f24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f28:	ea6f 0b03 	mvn.w	fp, r3
 8006f2c:	f04f 0900 	mov.w	r9, #0
 8006f30:	4621      	mov	r1, r4
 8006f32:	4630      	mov	r0, r6
 8006f34:	f000 f9aa 	bl	800728c <_Bfree>
 8006f38:	2f00      	cmp	r7, #0
 8006f3a:	f43f aea8 	beq.w	8006c8e <_dtoa_r+0x5be>
 8006f3e:	f1b9 0f00 	cmp.w	r9, #0
 8006f42:	d005      	beq.n	8006f50 <_dtoa_r+0x880>
 8006f44:	45b9      	cmp	r9, r7
 8006f46:	d003      	beq.n	8006f50 <_dtoa_r+0x880>
 8006f48:	4649      	mov	r1, r9
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f000 f99e 	bl	800728c <_Bfree>
 8006f50:	4639      	mov	r1, r7
 8006f52:	4630      	mov	r0, r6
 8006f54:	f000 f99a 	bl	800728c <_Bfree>
 8006f58:	e699      	b.n	8006c8e <_dtoa_r+0x5be>
 8006f5a:	2400      	movs	r4, #0
 8006f5c:	4627      	mov	r7, r4
 8006f5e:	e7e0      	b.n	8006f22 <_dtoa_r+0x852>
 8006f60:	46bb      	mov	fp, r7
 8006f62:	4604      	mov	r4, r0
 8006f64:	4607      	mov	r7, r0
 8006f66:	e5c7      	b.n	8006af8 <_dtoa_r+0x428>
 8006f68:	9b07      	ldr	r3, [sp, #28]
 8006f6a:	46ca      	mov	sl, r9
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8100 	beq.w	8007172 <_dtoa_r+0xaa2>
 8006f72:	f1b8 0f00 	cmp.w	r8, #0
 8006f76:	dd05      	ble.n	8006f84 <_dtoa_r+0x8b4>
 8006f78:	4639      	mov	r1, r7
 8006f7a:	4642      	mov	r2, r8
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f000 fb57 	bl	8007630 <__lshift>
 8006f82:	4607      	mov	r7, r0
 8006f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d05d      	beq.n	8007046 <_dtoa_r+0x976>
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f000 f93d 	bl	800720c <_Balloc>
 8006f92:	4680      	mov	r8, r0
 8006f94:	b928      	cbnz	r0, 8006fa2 <_dtoa_r+0x8d2>
 8006f96:	4b82      	ldr	r3, [pc, #520]	; (80071a0 <_dtoa_r+0xad0>)
 8006f98:	4602      	mov	r2, r0
 8006f9a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f9e:	f7ff bbaf 	b.w	8006700 <_dtoa_r+0x30>
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	3202      	adds	r2, #2
 8006fa6:	0092      	lsls	r2, r2, #2
 8006fa8:	f107 010c 	add.w	r1, r7, #12
 8006fac:	300c      	adds	r0, #12
 8006fae:	f000 f913 	bl	80071d8 <memcpy>
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f000 fb3a 	bl	8007630 <__lshift>
 8006fbc:	9b01      	ldr	r3, [sp, #4]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	9304      	str	r3, [sp, #16]
 8006fc2:	9b01      	ldr	r3, [sp, #4]
 8006fc4:	4453      	add	r3, sl
 8006fc6:	9308      	str	r3, [sp, #32]
 8006fc8:	9b02      	ldr	r3, [sp, #8]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	46b9      	mov	r9, r7
 8006fd0:	9307      	str	r3, [sp, #28]
 8006fd2:	4607      	mov	r7, r0
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	4628      	mov	r0, r5
 8006fdc:	9302      	str	r3, [sp, #8]
 8006fde:	f7ff faeb 	bl	80065b8 <quorem>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	3330      	adds	r3, #48	; 0x30
 8006fe6:	9005      	str	r0, [sp, #20]
 8006fe8:	4649      	mov	r1, r9
 8006fea:	4628      	mov	r0, r5
 8006fec:	9309      	str	r3, [sp, #36]	; 0x24
 8006fee:	f000 fb8f 	bl	8007710 <__mcmp>
 8006ff2:	463a      	mov	r2, r7
 8006ff4:	4682      	mov	sl, r0
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f000 fba5 	bl	8007748 <__mdiff>
 8006ffe:	68c2      	ldr	r2, [r0, #12]
 8007000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007002:	4680      	mov	r8, r0
 8007004:	bb0a      	cbnz	r2, 800704a <_dtoa_r+0x97a>
 8007006:	4601      	mov	r1, r0
 8007008:	4628      	mov	r0, r5
 800700a:	f000 fb81 	bl	8007710 <__mcmp>
 800700e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007010:	4602      	mov	r2, r0
 8007012:	4641      	mov	r1, r8
 8007014:	4630      	mov	r0, r6
 8007016:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800701a:	f000 f937 	bl	800728c <_Bfree>
 800701e:	9b06      	ldr	r3, [sp, #24]
 8007020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007022:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007026:	ea43 0102 	orr.w	r1, r3, r2
 800702a:	9b07      	ldr	r3, [sp, #28]
 800702c:	430b      	orrs	r3, r1
 800702e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007030:	d10d      	bne.n	800704e <_dtoa_r+0x97e>
 8007032:	2b39      	cmp	r3, #57	; 0x39
 8007034:	d029      	beq.n	800708a <_dtoa_r+0x9ba>
 8007036:	f1ba 0f00 	cmp.w	sl, #0
 800703a:	dd01      	ble.n	8007040 <_dtoa_r+0x970>
 800703c:	9b05      	ldr	r3, [sp, #20]
 800703e:	3331      	adds	r3, #49	; 0x31
 8007040:	9a02      	ldr	r2, [sp, #8]
 8007042:	7013      	strb	r3, [r2, #0]
 8007044:	e774      	b.n	8006f30 <_dtoa_r+0x860>
 8007046:	4638      	mov	r0, r7
 8007048:	e7b8      	b.n	8006fbc <_dtoa_r+0x8ec>
 800704a:	2201      	movs	r2, #1
 800704c:	e7e1      	b.n	8007012 <_dtoa_r+0x942>
 800704e:	f1ba 0f00 	cmp.w	sl, #0
 8007052:	db06      	blt.n	8007062 <_dtoa_r+0x992>
 8007054:	9906      	ldr	r1, [sp, #24]
 8007056:	ea41 0a0a 	orr.w	sl, r1, sl
 800705a:	9907      	ldr	r1, [sp, #28]
 800705c:	ea5a 0101 	orrs.w	r1, sl, r1
 8007060:	d120      	bne.n	80070a4 <_dtoa_r+0x9d4>
 8007062:	2a00      	cmp	r2, #0
 8007064:	ddec      	ble.n	8007040 <_dtoa_r+0x970>
 8007066:	4629      	mov	r1, r5
 8007068:	2201      	movs	r2, #1
 800706a:	4630      	mov	r0, r6
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	f000 fadf 	bl	8007630 <__lshift>
 8007072:	4621      	mov	r1, r4
 8007074:	4605      	mov	r5, r0
 8007076:	f000 fb4b 	bl	8007710 <__mcmp>
 800707a:	2800      	cmp	r0, #0
 800707c:	9b04      	ldr	r3, [sp, #16]
 800707e:	dc02      	bgt.n	8007086 <_dtoa_r+0x9b6>
 8007080:	d1de      	bne.n	8007040 <_dtoa_r+0x970>
 8007082:	07da      	lsls	r2, r3, #31
 8007084:	d5dc      	bpl.n	8007040 <_dtoa_r+0x970>
 8007086:	2b39      	cmp	r3, #57	; 0x39
 8007088:	d1d8      	bne.n	800703c <_dtoa_r+0x96c>
 800708a:	9a02      	ldr	r2, [sp, #8]
 800708c:	2339      	movs	r3, #57	; 0x39
 800708e:	7013      	strb	r3, [r2, #0]
 8007090:	4643      	mov	r3, r8
 8007092:	4698      	mov	r8, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800709a:	2a39      	cmp	r2, #57	; 0x39
 800709c:	d051      	beq.n	8007142 <_dtoa_r+0xa72>
 800709e:	3201      	adds	r2, #1
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	e745      	b.n	8006f30 <_dtoa_r+0x860>
 80070a4:	2a00      	cmp	r2, #0
 80070a6:	dd03      	ble.n	80070b0 <_dtoa_r+0x9e0>
 80070a8:	2b39      	cmp	r3, #57	; 0x39
 80070aa:	d0ee      	beq.n	800708a <_dtoa_r+0x9ba>
 80070ac:	3301      	adds	r3, #1
 80070ae:	e7c7      	b.n	8007040 <_dtoa_r+0x970>
 80070b0:	9a04      	ldr	r2, [sp, #16]
 80070b2:	9908      	ldr	r1, [sp, #32]
 80070b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070b8:	428a      	cmp	r2, r1
 80070ba:	d02b      	beq.n	8007114 <_dtoa_r+0xa44>
 80070bc:	4629      	mov	r1, r5
 80070be:	2300      	movs	r3, #0
 80070c0:	220a      	movs	r2, #10
 80070c2:	4630      	mov	r0, r6
 80070c4:	f000 f904 	bl	80072d0 <__multadd>
 80070c8:	45b9      	cmp	r9, r7
 80070ca:	4605      	mov	r5, r0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	f04f 020a 	mov.w	r2, #10
 80070d4:	4649      	mov	r1, r9
 80070d6:	4630      	mov	r0, r6
 80070d8:	d107      	bne.n	80070ea <_dtoa_r+0xa1a>
 80070da:	f000 f8f9 	bl	80072d0 <__multadd>
 80070de:	4681      	mov	r9, r0
 80070e0:	4607      	mov	r7, r0
 80070e2:	9b04      	ldr	r3, [sp, #16]
 80070e4:	3301      	adds	r3, #1
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	e774      	b.n	8006fd4 <_dtoa_r+0x904>
 80070ea:	f000 f8f1 	bl	80072d0 <__multadd>
 80070ee:	4639      	mov	r1, r7
 80070f0:	4681      	mov	r9, r0
 80070f2:	2300      	movs	r3, #0
 80070f4:	220a      	movs	r2, #10
 80070f6:	4630      	mov	r0, r6
 80070f8:	f000 f8ea 	bl	80072d0 <__multadd>
 80070fc:	4607      	mov	r7, r0
 80070fe:	e7f0      	b.n	80070e2 <_dtoa_r+0xa12>
 8007100:	f1ba 0f00 	cmp.w	sl, #0
 8007104:	9a01      	ldr	r2, [sp, #4]
 8007106:	bfcc      	ite	gt
 8007108:	46d0      	movgt	r8, sl
 800710a:	f04f 0801 	movle.w	r8, #1
 800710e:	4490      	add	r8, r2
 8007110:	f04f 0900 	mov.w	r9, #0
 8007114:	4629      	mov	r1, r5
 8007116:	2201      	movs	r2, #1
 8007118:	4630      	mov	r0, r6
 800711a:	9302      	str	r3, [sp, #8]
 800711c:	f000 fa88 	bl	8007630 <__lshift>
 8007120:	4621      	mov	r1, r4
 8007122:	4605      	mov	r5, r0
 8007124:	f000 faf4 	bl	8007710 <__mcmp>
 8007128:	2800      	cmp	r0, #0
 800712a:	dcb1      	bgt.n	8007090 <_dtoa_r+0x9c0>
 800712c:	d102      	bne.n	8007134 <_dtoa_r+0xa64>
 800712e:	9b02      	ldr	r3, [sp, #8]
 8007130:	07db      	lsls	r3, r3, #31
 8007132:	d4ad      	bmi.n	8007090 <_dtoa_r+0x9c0>
 8007134:	4643      	mov	r3, r8
 8007136:	4698      	mov	r8, r3
 8007138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800713c:	2a30      	cmp	r2, #48	; 0x30
 800713e:	d0fa      	beq.n	8007136 <_dtoa_r+0xa66>
 8007140:	e6f6      	b.n	8006f30 <_dtoa_r+0x860>
 8007142:	9a01      	ldr	r2, [sp, #4]
 8007144:	429a      	cmp	r2, r3
 8007146:	d1a4      	bne.n	8007092 <_dtoa_r+0x9c2>
 8007148:	f10b 0b01 	add.w	fp, fp, #1
 800714c:	2331      	movs	r3, #49	; 0x31
 800714e:	e778      	b.n	8007042 <_dtoa_r+0x972>
 8007150:	4b14      	ldr	r3, [pc, #80]	; (80071a4 <_dtoa_r+0xad4>)
 8007152:	f7ff bb27 	b.w	80067a4 <_dtoa_r+0xd4>
 8007156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007158:	2b00      	cmp	r3, #0
 800715a:	f47f ab03 	bne.w	8006764 <_dtoa_r+0x94>
 800715e:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <_dtoa_r+0xad8>)
 8007160:	f7ff bb20 	b.w	80067a4 <_dtoa_r+0xd4>
 8007164:	f1ba 0f00 	cmp.w	sl, #0
 8007168:	dc03      	bgt.n	8007172 <_dtoa_r+0xaa2>
 800716a:	9b06      	ldr	r3, [sp, #24]
 800716c:	2b02      	cmp	r3, #2
 800716e:	f73f aec7 	bgt.w	8006f00 <_dtoa_r+0x830>
 8007172:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007176:	4621      	mov	r1, r4
 8007178:	4628      	mov	r0, r5
 800717a:	f7ff fa1d 	bl	80065b8 <quorem>
 800717e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007182:	f808 3b01 	strb.w	r3, [r8], #1
 8007186:	9a01      	ldr	r2, [sp, #4]
 8007188:	eba8 0202 	sub.w	r2, r8, r2
 800718c:	4592      	cmp	sl, r2
 800718e:	ddb7      	ble.n	8007100 <_dtoa_r+0xa30>
 8007190:	4629      	mov	r1, r5
 8007192:	2300      	movs	r3, #0
 8007194:	220a      	movs	r2, #10
 8007196:	4630      	mov	r0, r6
 8007198:	f000 f89a 	bl	80072d0 <__multadd>
 800719c:	4605      	mov	r5, r0
 800719e:	e7ea      	b.n	8007176 <_dtoa_r+0xaa6>
 80071a0:	08008fe7 	.word	0x08008fe7
 80071a4:	08008f44 	.word	0x08008f44
 80071a8:	08008f68 	.word	0x08008f68

080071ac <_localeconv_r>:
 80071ac:	4800      	ldr	r0, [pc, #0]	; (80071b0 <_localeconv_r+0x4>)
 80071ae:	4770      	bx	lr
 80071b0:	20000164 	.word	0x20000164

080071b4 <_lseek_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4d07      	ldr	r5, [pc, #28]	; (80071d4 <_lseek_r+0x20>)
 80071b8:	4604      	mov	r4, r0
 80071ba:	4608      	mov	r0, r1
 80071bc:	4611      	mov	r1, r2
 80071be:	2200      	movs	r2, #0
 80071c0:	602a      	str	r2, [r5, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f001 fa82 	bl	80086cc <_lseek>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_lseek_r+0x1e>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_lseek_r+0x1e>
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	20004a48 	.word	0x20004a48

080071d8 <memcpy>:
 80071d8:	440a      	add	r2, r1
 80071da:	4291      	cmp	r1, r2
 80071dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80071e0:	d100      	bne.n	80071e4 <memcpy+0xc>
 80071e2:	4770      	bx	lr
 80071e4:	b510      	push	{r4, lr}
 80071e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ee:	4291      	cmp	r1, r2
 80071f0:	d1f9      	bne.n	80071e6 <memcpy+0xe>
 80071f2:	bd10      	pop	{r4, pc}

080071f4 <__malloc_lock>:
 80071f4:	4801      	ldr	r0, [pc, #4]	; (80071fc <__malloc_lock+0x8>)
 80071f6:	f000 bee3 	b.w	8007fc0 <__retarget_lock_acquire_recursive>
 80071fa:	bf00      	nop
 80071fc:	20004a4c 	.word	0x20004a4c

08007200 <__malloc_unlock>:
 8007200:	4801      	ldr	r0, [pc, #4]	; (8007208 <__malloc_unlock+0x8>)
 8007202:	f000 bede 	b.w	8007fc2 <__retarget_lock_release_recursive>
 8007206:	bf00      	nop
 8007208:	20004a4c 	.word	0x20004a4c

0800720c <_Balloc>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007210:	4604      	mov	r4, r0
 8007212:	460d      	mov	r5, r1
 8007214:	b976      	cbnz	r6, 8007234 <_Balloc+0x28>
 8007216:	2010      	movs	r0, #16
 8007218:	f7fe fbe8 	bl	80059ec <malloc>
 800721c:	4602      	mov	r2, r0
 800721e:	6260      	str	r0, [r4, #36]	; 0x24
 8007220:	b920      	cbnz	r0, 800722c <_Balloc+0x20>
 8007222:	4b18      	ldr	r3, [pc, #96]	; (8007284 <_Balloc+0x78>)
 8007224:	4818      	ldr	r0, [pc, #96]	; (8007288 <_Balloc+0x7c>)
 8007226:	2166      	movs	r1, #102	; 0x66
 8007228:	f000 fce2 	bl	8007bf0 <__assert_func>
 800722c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007230:	6006      	str	r6, [r0, #0]
 8007232:	60c6      	str	r6, [r0, #12]
 8007234:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007236:	68f3      	ldr	r3, [r6, #12]
 8007238:	b183      	cbz	r3, 800725c <_Balloc+0x50>
 800723a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007242:	b9b8      	cbnz	r0, 8007274 <_Balloc+0x68>
 8007244:	2101      	movs	r1, #1
 8007246:	fa01 f605 	lsl.w	r6, r1, r5
 800724a:	1d72      	adds	r2, r6, #5
 800724c:	0092      	lsls	r2, r2, #2
 800724e:	4620      	mov	r0, r4
 8007250:	f7fe fbe4 	bl	8005a1c <_calloc_r>
 8007254:	b160      	cbz	r0, 8007270 <_Balloc+0x64>
 8007256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800725a:	e00e      	b.n	800727a <_Balloc+0x6e>
 800725c:	2221      	movs	r2, #33	; 0x21
 800725e:	2104      	movs	r1, #4
 8007260:	4620      	mov	r0, r4
 8007262:	f7fe fbdb 	bl	8005a1c <_calloc_r>
 8007266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007268:	60f0      	str	r0, [r6, #12]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e4      	bne.n	800723a <_Balloc+0x2e>
 8007270:	2000      	movs	r0, #0
 8007272:	bd70      	pop	{r4, r5, r6, pc}
 8007274:	6802      	ldr	r2, [r0, #0]
 8007276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800727a:	2300      	movs	r3, #0
 800727c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007280:	e7f7      	b.n	8007272 <_Balloc+0x66>
 8007282:	bf00      	nop
 8007284:	08008f75 	.word	0x08008f75
 8007288:	08008ff8 	.word	0x08008ff8

0800728c <_Bfree>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007290:	4605      	mov	r5, r0
 8007292:	460c      	mov	r4, r1
 8007294:	b976      	cbnz	r6, 80072b4 <_Bfree+0x28>
 8007296:	2010      	movs	r0, #16
 8007298:	f7fe fba8 	bl	80059ec <malloc>
 800729c:	4602      	mov	r2, r0
 800729e:	6268      	str	r0, [r5, #36]	; 0x24
 80072a0:	b920      	cbnz	r0, 80072ac <_Bfree+0x20>
 80072a2:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <_Bfree+0x3c>)
 80072a4:	4809      	ldr	r0, [pc, #36]	; (80072cc <_Bfree+0x40>)
 80072a6:	218a      	movs	r1, #138	; 0x8a
 80072a8:	f000 fca2 	bl	8007bf0 <__assert_func>
 80072ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072b0:	6006      	str	r6, [r0, #0]
 80072b2:	60c6      	str	r6, [r0, #12]
 80072b4:	b13c      	cbz	r4, 80072c6 <_Bfree+0x3a>
 80072b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072b8:	6862      	ldr	r2, [r4, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072c0:	6021      	str	r1, [r4, #0]
 80072c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
 80072c8:	08008f75 	.word	0x08008f75
 80072cc:	08008ff8 	.word	0x08008ff8

080072d0 <__multadd>:
 80072d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d4:	690d      	ldr	r5, [r1, #16]
 80072d6:	4607      	mov	r7, r0
 80072d8:	460c      	mov	r4, r1
 80072da:	461e      	mov	r6, r3
 80072dc:	f101 0c14 	add.w	ip, r1, #20
 80072e0:	2000      	movs	r0, #0
 80072e2:	f8dc 3000 	ldr.w	r3, [ip]
 80072e6:	b299      	uxth	r1, r3
 80072e8:	fb02 6101 	mla	r1, r2, r1, r6
 80072ec:	0c1e      	lsrs	r6, r3, #16
 80072ee:	0c0b      	lsrs	r3, r1, #16
 80072f0:	fb02 3306 	mla	r3, r2, r6, r3
 80072f4:	b289      	uxth	r1, r1
 80072f6:	3001      	adds	r0, #1
 80072f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072fc:	4285      	cmp	r5, r0
 80072fe:	f84c 1b04 	str.w	r1, [ip], #4
 8007302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007306:	dcec      	bgt.n	80072e2 <__multadd+0x12>
 8007308:	b30e      	cbz	r6, 800734e <__multadd+0x7e>
 800730a:	68a3      	ldr	r3, [r4, #8]
 800730c:	42ab      	cmp	r3, r5
 800730e:	dc19      	bgt.n	8007344 <__multadd+0x74>
 8007310:	6861      	ldr	r1, [r4, #4]
 8007312:	4638      	mov	r0, r7
 8007314:	3101      	adds	r1, #1
 8007316:	f7ff ff79 	bl	800720c <_Balloc>
 800731a:	4680      	mov	r8, r0
 800731c:	b928      	cbnz	r0, 800732a <__multadd+0x5a>
 800731e:	4602      	mov	r2, r0
 8007320:	4b0c      	ldr	r3, [pc, #48]	; (8007354 <__multadd+0x84>)
 8007322:	480d      	ldr	r0, [pc, #52]	; (8007358 <__multadd+0x88>)
 8007324:	21b5      	movs	r1, #181	; 0xb5
 8007326:	f000 fc63 	bl	8007bf0 <__assert_func>
 800732a:	6922      	ldr	r2, [r4, #16]
 800732c:	3202      	adds	r2, #2
 800732e:	f104 010c 	add.w	r1, r4, #12
 8007332:	0092      	lsls	r2, r2, #2
 8007334:	300c      	adds	r0, #12
 8007336:	f7ff ff4f 	bl	80071d8 <memcpy>
 800733a:	4621      	mov	r1, r4
 800733c:	4638      	mov	r0, r7
 800733e:	f7ff ffa5 	bl	800728c <_Bfree>
 8007342:	4644      	mov	r4, r8
 8007344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007348:	3501      	adds	r5, #1
 800734a:	615e      	str	r6, [r3, #20]
 800734c:	6125      	str	r5, [r4, #16]
 800734e:	4620      	mov	r0, r4
 8007350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007354:	08008fe7 	.word	0x08008fe7
 8007358:	08008ff8 	.word	0x08008ff8

0800735c <__hi0bits>:
 800735c:	0c03      	lsrs	r3, r0, #16
 800735e:	041b      	lsls	r3, r3, #16
 8007360:	b9d3      	cbnz	r3, 8007398 <__hi0bits+0x3c>
 8007362:	0400      	lsls	r0, r0, #16
 8007364:	2310      	movs	r3, #16
 8007366:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800736a:	bf04      	itt	eq
 800736c:	0200      	lsleq	r0, r0, #8
 800736e:	3308      	addeq	r3, #8
 8007370:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007374:	bf04      	itt	eq
 8007376:	0100      	lsleq	r0, r0, #4
 8007378:	3304      	addeq	r3, #4
 800737a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800737e:	bf04      	itt	eq
 8007380:	0080      	lsleq	r0, r0, #2
 8007382:	3302      	addeq	r3, #2
 8007384:	2800      	cmp	r0, #0
 8007386:	db05      	blt.n	8007394 <__hi0bits+0x38>
 8007388:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800738c:	f103 0301 	add.w	r3, r3, #1
 8007390:	bf08      	it	eq
 8007392:	2320      	moveq	r3, #32
 8007394:	4618      	mov	r0, r3
 8007396:	4770      	bx	lr
 8007398:	2300      	movs	r3, #0
 800739a:	e7e4      	b.n	8007366 <__hi0bits+0xa>

0800739c <__lo0bits>:
 800739c:	6803      	ldr	r3, [r0, #0]
 800739e:	f013 0207 	ands.w	r2, r3, #7
 80073a2:	4601      	mov	r1, r0
 80073a4:	d00b      	beq.n	80073be <__lo0bits+0x22>
 80073a6:	07da      	lsls	r2, r3, #31
 80073a8:	d423      	bmi.n	80073f2 <__lo0bits+0x56>
 80073aa:	0798      	lsls	r0, r3, #30
 80073ac:	bf49      	itett	mi
 80073ae:	085b      	lsrmi	r3, r3, #1
 80073b0:	089b      	lsrpl	r3, r3, #2
 80073b2:	2001      	movmi	r0, #1
 80073b4:	600b      	strmi	r3, [r1, #0]
 80073b6:	bf5c      	itt	pl
 80073b8:	600b      	strpl	r3, [r1, #0]
 80073ba:	2002      	movpl	r0, #2
 80073bc:	4770      	bx	lr
 80073be:	b298      	uxth	r0, r3
 80073c0:	b9a8      	cbnz	r0, 80073ee <__lo0bits+0x52>
 80073c2:	0c1b      	lsrs	r3, r3, #16
 80073c4:	2010      	movs	r0, #16
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	b90a      	cbnz	r2, 80073ce <__lo0bits+0x32>
 80073ca:	3008      	adds	r0, #8
 80073cc:	0a1b      	lsrs	r3, r3, #8
 80073ce:	071a      	lsls	r2, r3, #28
 80073d0:	bf04      	itt	eq
 80073d2:	091b      	lsreq	r3, r3, #4
 80073d4:	3004      	addeq	r0, #4
 80073d6:	079a      	lsls	r2, r3, #30
 80073d8:	bf04      	itt	eq
 80073da:	089b      	lsreq	r3, r3, #2
 80073dc:	3002      	addeq	r0, #2
 80073de:	07da      	lsls	r2, r3, #31
 80073e0:	d403      	bmi.n	80073ea <__lo0bits+0x4e>
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	f100 0001 	add.w	r0, r0, #1
 80073e8:	d005      	beq.n	80073f6 <__lo0bits+0x5a>
 80073ea:	600b      	str	r3, [r1, #0]
 80073ec:	4770      	bx	lr
 80073ee:	4610      	mov	r0, r2
 80073f0:	e7e9      	b.n	80073c6 <__lo0bits+0x2a>
 80073f2:	2000      	movs	r0, #0
 80073f4:	4770      	bx	lr
 80073f6:	2020      	movs	r0, #32
 80073f8:	4770      	bx	lr
	...

080073fc <__i2b>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	460c      	mov	r4, r1
 8007400:	2101      	movs	r1, #1
 8007402:	f7ff ff03 	bl	800720c <_Balloc>
 8007406:	4602      	mov	r2, r0
 8007408:	b928      	cbnz	r0, 8007416 <__i2b+0x1a>
 800740a:	4b05      	ldr	r3, [pc, #20]	; (8007420 <__i2b+0x24>)
 800740c:	4805      	ldr	r0, [pc, #20]	; (8007424 <__i2b+0x28>)
 800740e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007412:	f000 fbed 	bl	8007bf0 <__assert_func>
 8007416:	2301      	movs	r3, #1
 8007418:	6144      	str	r4, [r0, #20]
 800741a:	6103      	str	r3, [r0, #16]
 800741c:	bd10      	pop	{r4, pc}
 800741e:	bf00      	nop
 8007420:	08008fe7 	.word	0x08008fe7
 8007424:	08008ff8 	.word	0x08008ff8

08007428 <__multiply>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	4691      	mov	r9, r2
 800742e:	690a      	ldr	r2, [r1, #16]
 8007430:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007434:	429a      	cmp	r2, r3
 8007436:	bfb8      	it	lt
 8007438:	460b      	movlt	r3, r1
 800743a:	460c      	mov	r4, r1
 800743c:	bfbc      	itt	lt
 800743e:	464c      	movlt	r4, r9
 8007440:	4699      	movlt	r9, r3
 8007442:	6927      	ldr	r7, [r4, #16]
 8007444:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007448:	68a3      	ldr	r3, [r4, #8]
 800744a:	6861      	ldr	r1, [r4, #4]
 800744c:	eb07 060a 	add.w	r6, r7, sl
 8007450:	42b3      	cmp	r3, r6
 8007452:	b085      	sub	sp, #20
 8007454:	bfb8      	it	lt
 8007456:	3101      	addlt	r1, #1
 8007458:	f7ff fed8 	bl	800720c <_Balloc>
 800745c:	b930      	cbnz	r0, 800746c <__multiply+0x44>
 800745e:	4602      	mov	r2, r0
 8007460:	4b44      	ldr	r3, [pc, #272]	; (8007574 <__multiply+0x14c>)
 8007462:	4845      	ldr	r0, [pc, #276]	; (8007578 <__multiply+0x150>)
 8007464:	f240 115d 	movw	r1, #349	; 0x15d
 8007468:	f000 fbc2 	bl	8007bf0 <__assert_func>
 800746c:	f100 0514 	add.w	r5, r0, #20
 8007470:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007474:	462b      	mov	r3, r5
 8007476:	2200      	movs	r2, #0
 8007478:	4543      	cmp	r3, r8
 800747a:	d321      	bcc.n	80074c0 <__multiply+0x98>
 800747c:	f104 0314 	add.w	r3, r4, #20
 8007480:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007484:	f109 0314 	add.w	r3, r9, #20
 8007488:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800748c:	9202      	str	r2, [sp, #8]
 800748e:	1b3a      	subs	r2, r7, r4
 8007490:	3a15      	subs	r2, #21
 8007492:	f022 0203 	bic.w	r2, r2, #3
 8007496:	3204      	adds	r2, #4
 8007498:	f104 0115 	add.w	r1, r4, #21
 800749c:	428f      	cmp	r7, r1
 800749e:	bf38      	it	cc
 80074a0:	2204      	movcc	r2, #4
 80074a2:	9201      	str	r2, [sp, #4]
 80074a4:	9a02      	ldr	r2, [sp, #8]
 80074a6:	9303      	str	r3, [sp, #12]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d80c      	bhi.n	80074c6 <__multiply+0x9e>
 80074ac:	2e00      	cmp	r6, #0
 80074ae:	dd03      	ble.n	80074b8 <__multiply+0x90>
 80074b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d05a      	beq.n	800756e <__multiply+0x146>
 80074b8:	6106      	str	r6, [r0, #16]
 80074ba:	b005      	add	sp, #20
 80074bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c0:	f843 2b04 	str.w	r2, [r3], #4
 80074c4:	e7d8      	b.n	8007478 <__multiply+0x50>
 80074c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80074ca:	f1ba 0f00 	cmp.w	sl, #0
 80074ce:	d024      	beq.n	800751a <__multiply+0xf2>
 80074d0:	f104 0e14 	add.w	lr, r4, #20
 80074d4:	46a9      	mov	r9, r5
 80074d6:	f04f 0c00 	mov.w	ip, #0
 80074da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074de:	f8d9 1000 	ldr.w	r1, [r9]
 80074e2:	fa1f fb82 	uxth.w	fp, r2
 80074e6:	b289      	uxth	r1, r1
 80074e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80074ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80074f0:	f8d9 2000 	ldr.w	r2, [r9]
 80074f4:	4461      	add	r1, ip
 80074f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80074fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007502:	b289      	uxth	r1, r1
 8007504:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007508:	4577      	cmp	r7, lr
 800750a:	f849 1b04 	str.w	r1, [r9], #4
 800750e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007512:	d8e2      	bhi.n	80074da <__multiply+0xb2>
 8007514:	9a01      	ldr	r2, [sp, #4]
 8007516:	f845 c002 	str.w	ip, [r5, r2]
 800751a:	9a03      	ldr	r2, [sp, #12]
 800751c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007520:	3304      	adds	r3, #4
 8007522:	f1b9 0f00 	cmp.w	r9, #0
 8007526:	d020      	beq.n	800756a <__multiply+0x142>
 8007528:	6829      	ldr	r1, [r5, #0]
 800752a:	f104 0c14 	add.w	ip, r4, #20
 800752e:	46ae      	mov	lr, r5
 8007530:	f04f 0a00 	mov.w	sl, #0
 8007534:	f8bc b000 	ldrh.w	fp, [ip]
 8007538:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800753c:	fb09 220b 	mla	r2, r9, fp, r2
 8007540:	4492      	add	sl, r2
 8007542:	b289      	uxth	r1, r1
 8007544:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007548:	f84e 1b04 	str.w	r1, [lr], #4
 800754c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007550:	f8be 1000 	ldrh.w	r1, [lr]
 8007554:	0c12      	lsrs	r2, r2, #16
 8007556:	fb09 1102 	mla	r1, r9, r2, r1
 800755a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800755e:	4567      	cmp	r7, ip
 8007560:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007564:	d8e6      	bhi.n	8007534 <__multiply+0x10c>
 8007566:	9a01      	ldr	r2, [sp, #4]
 8007568:	50a9      	str	r1, [r5, r2]
 800756a:	3504      	adds	r5, #4
 800756c:	e79a      	b.n	80074a4 <__multiply+0x7c>
 800756e:	3e01      	subs	r6, #1
 8007570:	e79c      	b.n	80074ac <__multiply+0x84>
 8007572:	bf00      	nop
 8007574:	08008fe7 	.word	0x08008fe7
 8007578:	08008ff8 	.word	0x08008ff8

0800757c <__pow5mult>:
 800757c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007580:	4615      	mov	r5, r2
 8007582:	f012 0203 	ands.w	r2, r2, #3
 8007586:	4606      	mov	r6, r0
 8007588:	460f      	mov	r7, r1
 800758a:	d007      	beq.n	800759c <__pow5mult+0x20>
 800758c:	4c25      	ldr	r4, [pc, #148]	; (8007624 <__pow5mult+0xa8>)
 800758e:	3a01      	subs	r2, #1
 8007590:	2300      	movs	r3, #0
 8007592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007596:	f7ff fe9b 	bl	80072d0 <__multadd>
 800759a:	4607      	mov	r7, r0
 800759c:	10ad      	asrs	r5, r5, #2
 800759e:	d03d      	beq.n	800761c <__pow5mult+0xa0>
 80075a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80075a2:	b97c      	cbnz	r4, 80075c4 <__pow5mult+0x48>
 80075a4:	2010      	movs	r0, #16
 80075a6:	f7fe fa21 	bl	80059ec <malloc>
 80075aa:	4602      	mov	r2, r0
 80075ac:	6270      	str	r0, [r6, #36]	; 0x24
 80075ae:	b928      	cbnz	r0, 80075bc <__pow5mult+0x40>
 80075b0:	4b1d      	ldr	r3, [pc, #116]	; (8007628 <__pow5mult+0xac>)
 80075b2:	481e      	ldr	r0, [pc, #120]	; (800762c <__pow5mult+0xb0>)
 80075b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075b8:	f000 fb1a 	bl	8007bf0 <__assert_func>
 80075bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075c0:	6004      	str	r4, [r0, #0]
 80075c2:	60c4      	str	r4, [r0, #12]
 80075c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075cc:	b94c      	cbnz	r4, 80075e2 <__pow5mult+0x66>
 80075ce:	f240 2171 	movw	r1, #625	; 0x271
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7ff ff12 	bl	80073fc <__i2b>
 80075d8:	2300      	movs	r3, #0
 80075da:	f8c8 0008 	str.w	r0, [r8, #8]
 80075de:	4604      	mov	r4, r0
 80075e0:	6003      	str	r3, [r0, #0]
 80075e2:	f04f 0900 	mov.w	r9, #0
 80075e6:	07eb      	lsls	r3, r5, #31
 80075e8:	d50a      	bpl.n	8007600 <__pow5mult+0x84>
 80075ea:	4639      	mov	r1, r7
 80075ec:	4622      	mov	r2, r4
 80075ee:	4630      	mov	r0, r6
 80075f0:	f7ff ff1a 	bl	8007428 <__multiply>
 80075f4:	4639      	mov	r1, r7
 80075f6:	4680      	mov	r8, r0
 80075f8:	4630      	mov	r0, r6
 80075fa:	f7ff fe47 	bl	800728c <_Bfree>
 80075fe:	4647      	mov	r7, r8
 8007600:	106d      	asrs	r5, r5, #1
 8007602:	d00b      	beq.n	800761c <__pow5mult+0xa0>
 8007604:	6820      	ldr	r0, [r4, #0]
 8007606:	b938      	cbnz	r0, 8007618 <__pow5mult+0x9c>
 8007608:	4622      	mov	r2, r4
 800760a:	4621      	mov	r1, r4
 800760c:	4630      	mov	r0, r6
 800760e:	f7ff ff0b 	bl	8007428 <__multiply>
 8007612:	6020      	str	r0, [r4, #0]
 8007614:	f8c0 9000 	str.w	r9, [r0]
 8007618:	4604      	mov	r4, r0
 800761a:	e7e4      	b.n	80075e6 <__pow5mult+0x6a>
 800761c:	4638      	mov	r0, r7
 800761e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007622:	bf00      	nop
 8007624:	08009148 	.word	0x08009148
 8007628:	08008f75 	.word	0x08008f75
 800762c:	08008ff8 	.word	0x08008ff8

08007630 <__lshift>:
 8007630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007634:	460c      	mov	r4, r1
 8007636:	6849      	ldr	r1, [r1, #4]
 8007638:	6923      	ldr	r3, [r4, #16]
 800763a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	4607      	mov	r7, r0
 8007642:	4691      	mov	r9, r2
 8007644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007648:	f108 0601 	add.w	r6, r8, #1
 800764c:	42b3      	cmp	r3, r6
 800764e:	db0b      	blt.n	8007668 <__lshift+0x38>
 8007650:	4638      	mov	r0, r7
 8007652:	f7ff fddb 	bl	800720c <_Balloc>
 8007656:	4605      	mov	r5, r0
 8007658:	b948      	cbnz	r0, 800766e <__lshift+0x3e>
 800765a:	4602      	mov	r2, r0
 800765c:	4b2a      	ldr	r3, [pc, #168]	; (8007708 <__lshift+0xd8>)
 800765e:	482b      	ldr	r0, [pc, #172]	; (800770c <__lshift+0xdc>)
 8007660:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007664:	f000 fac4 	bl	8007bf0 <__assert_func>
 8007668:	3101      	adds	r1, #1
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	e7ee      	b.n	800764c <__lshift+0x1c>
 800766e:	2300      	movs	r3, #0
 8007670:	f100 0114 	add.w	r1, r0, #20
 8007674:	f100 0210 	add.w	r2, r0, #16
 8007678:	4618      	mov	r0, r3
 800767a:	4553      	cmp	r3, sl
 800767c:	db37      	blt.n	80076ee <__lshift+0xbe>
 800767e:	6920      	ldr	r0, [r4, #16]
 8007680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007684:	f104 0314 	add.w	r3, r4, #20
 8007688:	f019 091f 	ands.w	r9, r9, #31
 800768c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007690:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007694:	d02f      	beq.n	80076f6 <__lshift+0xc6>
 8007696:	f1c9 0e20 	rsb	lr, r9, #32
 800769a:	468a      	mov	sl, r1
 800769c:	f04f 0c00 	mov.w	ip, #0
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	fa02 f209 	lsl.w	r2, r2, r9
 80076a6:	ea42 020c 	orr.w	r2, r2, ip
 80076aa:	f84a 2b04 	str.w	r2, [sl], #4
 80076ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b2:	4298      	cmp	r0, r3
 80076b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80076b8:	d8f2      	bhi.n	80076a0 <__lshift+0x70>
 80076ba:	1b03      	subs	r3, r0, r4
 80076bc:	3b15      	subs	r3, #21
 80076be:	f023 0303 	bic.w	r3, r3, #3
 80076c2:	3304      	adds	r3, #4
 80076c4:	f104 0215 	add.w	r2, r4, #21
 80076c8:	4290      	cmp	r0, r2
 80076ca:	bf38      	it	cc
 80076cc:	2304      	movcc	r3, #4
 80076ce:	f841 c003 	str.w	ip, [r1, r3]
 80076d2:	f1bc 0f00 	cmp.w	ip, #0
 80076d6:	d001      	beq.n	80076dc <__lshift+0xac>
 80076d8:	f108 0602 	add.w	r6, r8, #2
 80076dc:	3e01      	subs	r6, #1
 80076de:	4638      	mov	r0, r7
 80076e0:	612e      	str	r6, [r5, #16]
 80076e2:	4621      	mov	r1, r4
 80076e4:	f7ff fdd2 	bl	800728c <_Bfree>
 80076e8:	4628      	mov	r0, r5
 80076ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80076f2:	3301      	adds	r3, #1
 80076f4:	e7c1      	b.n	800767a <__lshift+0x4a>
 80076f6:	3904      	subs	r1, #4
 80076f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007700:	4298      	cmp	r0, r3
 8007702:	d8f9      	bhi.n	80076f8 <__lshift+0xc8>
 8007704:	e7ea      	b.n	80076dc <__lshift+0xac>
 8007706:	bf00      	nop
 8007708:	08008fe7 	.word	0x08008fe7
 800770c:	08008ff8 	.word	0x08008ff8

08007710 <__mcmp>:
 8007710:	b530      	push	{r4, r5, lr}
 8007712:	6902      	ldr	r2, [r0, #16]
 8007714:	690c      	ldr	r4, [r1, #16]
 8007716:	1b12      	subs	r2, r2, r4
 8007718:	d10e      	bne.n	8007738 <__mcmp+0x28>
 800771a:	f100 0314 	add.w	r3, r0, #20
 800771e:	3114      	adds	r1, #20
 8007720:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007724:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007728:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800772c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007730:	42a5      	cmp	r5, r4
 8007732:	d003      	beq.n	800773c <__mcmp+0x2c>
 8007734:	d305      	bcc.n	8007742 <__mcmp+0x32>
 8007736:	2201      	movs	r2, #1
 8007738:	4610      	mov	r0, r2
 800773a:	bd30      	pop	{r4, r5, pc}
 800773c:	4283      	cmp	r3, r0
 800773e:	d3f3      	bcc.n	8007728 <__mcmp+0x18>
 8007740:	e7fa      	b.n	8007738 <__mcmp+0x28>
 8007742:	f04f 32ff 	mov.w	r2, #4294967295
 8007746:	e7f7      	b.n	8007738 <__mcmp+0x28>

08007748 <__mdiff>:
 8007748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	460c      	mov	r4, r1
 800774e:	4606      	mov	r6, r0
 8007750:	4611      	mov	r1, r2
 8007752:	4620      	mov	r0, r4
 8007754:	4690      	mov	r8, r2
 8007756:	f7ff ffdb 	bl	8007710 <__mcmp>
 800775a:	1e05      	subs	r5, r0, #0
 800775c:	d110      	bne.n	8007780 <__mdiff+0x38>
 800775e:	4629      	mov	r1, r5
 8007760:	4630      	mov	r0, r6
 8007762:	f7ff fd53 	bl	800720c <_Balloc>
 8007766:	b930      	cbnz	r0, 8007776 <__mdiff+0x2e>
 8007768:	4b3a      	ldr	r3, [pc, #232]	; (8007854 <__mdiff+0x10c>)
 800776a:	4602      	mov	r2, r0
 800776c:	f240 2132 	movw	r1, #562	; 0x232
 8007770:	4839      	ldr	r0, [pc, #228]	; (8007858 <__mdiff+0x110>)
 8007772:	f000 fa3d 	bl	8007bf0 <__assert_func>
 8007776:	2301      	movs	r3, #1
 8007778:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800777c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007780:	bfa4      	itt	ge
 8007782:	4643      	movge	r3, r8
 8007784:	46a0      	movge	r8, r4
 8007786:	4630      	mov	r0, r6
 8007788:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800778c:	bfa6      	itte	ge
 800778e:	461c      	movge	r4, r3
 8007790:	2500      	movge	r5, #0
 8007792:	2501      	movlt	r5, #1
 8007794:	f7ff fd3a 	bl	800720c <_Balloc>
 8007798:	b920      	cbnz	r0, 80077a4 <__mdiff+0x5c>
 800779a:	4b2e      	ldr	r3, [pc, #184]	; (8007854 <__mdiff+0x10c>)
 800779c:	4602      	mov	r2, r0
 800779e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80077a2:	e7e5      	b.n	8007770 <__mdiff+0x28>
 80077a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80077a8:	6926      	ldr	r6, [r4, #16]
 80077aa:	60c5      	str	r5, [r0, #12]
 80077ac:	f104 0914 	add.w	r9, r4, #20
 80077b0:	f108 0514 	add.w	r5, r8, #20
 80077b4:	f100 0e14 	add.w	lr, r0, #20
 80077b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80077bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077c0:	f108 0210 	add.w	r2, r8, #16
 80077c4:	46f2      	mov	sl, lr
 80077c6:	2100      	movs	r1, #0
 80077c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80077cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80077d0:	fa1f f883 	uxth.w	r8, r3
 80077d4:	fa11 f18b 	uxtah	r1, r1, fp
 80077d8:	0c1b      	lsrs	r3, r3, #16
 80077da:	eba1 0808 	sub.w	r8, r1, r8
 80077de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80077e6:	fa1f f888 	uxth.w	r8, r8
 80077ea:	1419      	asrs	r1, r3, #16
 80077ec:	454e      	cmp	r6, r9
 80077ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80077f2:	f84a 3b04 	str.w	r3, [sl], #4
 80077f6:	d8e7      	bhi.n	80077c8 <__mdiff+0x80>
 80077f8:	1b33      	subs	r3, r6, r4
 80077fa:	3b15      	subs	r3, #21
 80077fc:	f023 0303 	bic.w	r3, r3, #3
 8007800:	3304      	adds	r3, #4
 8007802:	3415      	adds	r4, #21
 8007804:	42a6      	cmp	r6, r4
 8007806:	bf38      	it	cc
 8007808:	2304      	movcc	r3, #4
 800780a:	441d      	add	r5, r3
 800780c:	4473      	add	r3, lr
 800780e:	469e      	mov	lr, r3
 8007810:	462e      	mov	r6, r5
 8007812:	4566      	cmp	r6, ip
 8007814:	d30e      	bcc.n	8007834 <__mdiff+0xec>
 8007816:	f10c 0203 	add.w	r2, ip, #3
 800781a:	1b52      	subs	r2, r2, r5
 800781c:	f022 0203 	bic.w	r2, r2, #3
 8007820:	3d03      	subs	r5, #3
 8007822:	45ac      	cmp	ip, r5
 8007824:	bf38      	it	cc
 8007826:	2200      	movcc	r2, #0
 8007828:	441a      	add	r2, r3
 800782a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800782e:	b17b      	cbz	r3, 8007850 <__mdiff+0x108>
 8007830:	6107      	str	r7, [r0, #16]
 8007832:	e7a3      	b.n	800777c <__mdiff+0x34>
 8007834:	f856 8b04 	ldr.w	r8, [r6], #4
 8007838:	fa11 f288 	uxtah	r2, r1, r8
 800783c:	1414      	asrs	r4, r2, #16
 800783e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007842:	b292      	uxth	r2, r2
 8007844:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007848:	f84e 2b04 	str.w	r2, [lr], #4
 800784c:	1421      	asrs	r1, r4, #16
 800784e:	e7e0      	b.n	8007812 <__mdiff+0xca>
 8007850:	3f01      	subs	r7, #1
 8007852:	e7ea      	b.n	800782a <__mdiff+0xe2>
 8007854:	08008fe7 	.word	0x08008fe7
 8007858:	08008ff8 	.word	0x08008ff8

0800785c <__d2b>:
 800785c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007860:	4689      	mov	r9, r1
 8007862:	2101      	movs	r1, #1
 8007864:	ec57 6b10 	vmov	r6, r7, d0
 8007868:	4690      	mov	r8, r2
 800786a:	f7ff fccf 	bl	800720c <_Balloc>
 800786e:	4604      	mov	r4, r0
 8007870:	b930      	cbnz	r0, 8007880 <__d2b+0x24>
 8007872:	4602      	mov	r2, r0
 8007874:	4b25      	ldr	r3, [pc, #148]	; (800790c <__d2b+0xb0>)
 8007876:	4826      	ldr	r0, [pc, #152]	; (8007910 <__d2b+0xb4>)
 8007878:	f240 310a 	movw	r1, #778	; 0x30a
 800787c:	f000 f9b8 	bl	8007bf0 <__assert_func>
 8007880:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007884:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007888:	bb35      	cbnz	r5, 80078d8 <__d2b+0x7c>
 800788a:	2e00      	cmp	r6, #0
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	d028      	beq.n	80078e2 <__d2b+0x86>
 8007890:	4668      	mov	r0, sp
 8007892:	9600      	str	r6, [sp, #0]
 8007894:	f7ff fd82 	bl	800739c <__lo0bits>
 8007898:	9900      	ldr	r1, [sp, #0]
 800789a:	b300      	cbz	r0, 80078de <__d2b+0x82>
 800789c:	9a01      	ldr	r2, [sp, #4]
 800789e:	f1c0 0320 	rsb	r3, r0, #32
 80078a2:	fa02 f303 	lsl.w	r3, r2, r3
 80078a6:	430b      	orrs	r3, r1
 80078a8:	40c2      	lsrs	r2, r0
 80078aa:	6163      	str	r3, [r4, #20]
 80078ac:	9201      	str	r2, [sp, #4]
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	61a3      	str	r3, [r4, #24]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	bf14      	ite	ne
 80078b6:	2202      	movne	r2, #2
 80078b8:	2201      	moveq	r2, #1
 80078ba:	6122      	str	r2, [r4, #16]
 80078bc:	b1d5      	cbz	r5, 80078f4 <__d2b+0x98>
 80078be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078c2:	4405      	add	r5, r0
 80078c4:	f8c9 5000 	str.w	r5, [r9]
 80078c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078cc:	f8c8 0000 	str.w	r0, [r8]
 80078d0:	4620      	mov	r0, r4
 80078d2:	b003      	add	sp, #12
 80078d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078dc:	e7d5      	b.n	800788a <__d2b+0x2e>
 80078de:	6161      	str	r1, [r4, #20]
 80078e0:	e7e5      	b.n	80078ae <__d2b+0x52>
 80078e2:	a801      	add	r0, sp, #4
 80078e4:	f7ff fd5a 	bl	800739c <__lo0bits>
 80078e8:	9b01      	ldr	r3, [sp, #4]
 80078ea:	6163      	str	r3, [r4, #20]
 80078ec:	2201      	movs	r2, #1
 80078ee:	6122      	str	r2, [r4, #16]
 80078f0:	3020      	adds	r0, #32
 80078f2:	e7e3      	b.n	80078bc <__d2b+0x60>
 80078f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078fc:	f8c9 0000 	str.w	r0, [r9]
 8007900:	6918      	ldr	r0, [r3, #16]
 8007902:	f7ff fd2b 	bl	800735c <__hi0bits>
 8007906:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800790a:	e7df      	b.n	80078cc <__d2b+0x70>
 800790c:	08008fe7 	.word	0x08008fe7
 8007910:	08008ff8 	.word	0x08008ff8

08007914 <__ssputs_r>:
 8007914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	688e      	ldr	r6, [r1, #8]
 800791a:	429e      	cmp	r6, r3
 800791c:	4682      	mov	sl, r0
 800791e:	460c      	mov	r4, r1
 8007920:	4690      	mov	r8, r2
 8007922:	461f      	mov	r7, r3
 8007924:	d838      	bhi.n	8007998 <__ssputs_r+0x84>
 8007926:	898a      	ldrh	r2, [r1, #12]
 8007928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800792c:	d032      	beq.n	8007994 <__ssputs_r+0x80>
 800792e:	6825      	ldr	r5, [r4, #0]
 8007930:	6909      	ldr	r1, [r1, #16]
 8007932:	eba5 0901 	sub.w	r9, r5, r1
 8007936:	6965      	ldr	r5, [r4, #20]
 8007938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800793c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007940:	3301      	adds	r3, #1
 8007942:	444b      	add	r3, r9
 8007944:	106d      	asrs	r5, r5, #1
 8007946:	429d      	cmp	r5, r3
 8007948:	bf38      	it	cc
 800794a:	461d      	movcc	r5, r3
 800794c:	0553      	lsls	r3, r2, #21
 800794e:	d531      	bpl.n	80079b4 <__ssputs_r+0xa0>
 8007950:	4629      	mov	r1, r5
 8007952:	f7fe f8e5 	bl	8005b20 <_malloc_r>
 8007956:	4606      	mov	r6, r0
 8007958:	b950      	cbnz	r0, 8007970 <__ssputs_r+0x5c>
 800795a:	230c      	movs	r3, #12
 800795c:	f8ca 3000 	str.w	r3, [sl]
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007966:	81a3      	strh	r3, [r4, #12]
 8007968:	f04f 30ff 	mov.w	r0, #4294967295
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	6921      	ldr	r1, [r4, #16]
 8007972:	464a      	mov	r2, r9
 8007974:	f7ff fc30 	bl	80071d8 <memcpy>
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800797e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	6126      	str	r6, [r4, #16]
 8007986:	6165      	str	r5, [r4, #20]
 8007988:	444e      	add	r6, r9
 800798a:	eba5 0509 	sub.w	r5, r5, r9
 800798e:	6026      	str	r6, [r4, #0]
 8007990:	60a5      	str	r5, [r4, #8]
 8007992:	463e      	mov	r6, r7
 8007994:	42be      	cmp	r6, r7
 8007996:	d900      	bls.n	800799a <__ssputs_r+0x86>
 8007998:	463e      	mov	r6, r7
 800799a:	6820      	ldr	r0, [r4, #0]
 800799c:	4632      	mov	r2, r6
 800799e:	4641      	mov	r1, r8
 80079a0:	f000 fb22 	bl	8007fe8 <memmove>
 80079a4:	68a3      	ldr	r3, [r4, #8]
 80079a6:	1b9b      	subs	r3, r3, r6
 80079a8:	60a3      	str	r3, [r4, #8]
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	4433      	add	r3, r6
 80079ae:	6023      	str	r3, [r4, #0]
 80079b0:	2000      	movs	r0, #0
 80079b2:	e7db      	b.n	800796c <__ssputs_r+0x58>
 80079b4:	462a      	mov	r2, r5
 80079b6:	f000 fb31 	bl	800801c <_realloc_r>
 80079ba:	4606      	mov	r6, r0
 80079bc:	2800      	cmp	r0, #0
 80079be:	d1e1      	bne.n	8007984 <__ssputs_r+0x70>
 80079c0:	6921      	ldr	r1, [r4, #16]
 80079c2:	4650      	mov	r0, sl
 80079c4:	f7fe f840 	bl	8005a48 <_free_r>
 80079c8:	e7c7      	b.n	800795a <__ssputs_r+0x46>
	...

080079cc <_svfiprintf_r>:
 80079cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d0:	4698      	mov	r8, r3
 80079d2:	898b      	ldrh	r3, [r1, #12]
 80079d4:	061b      	lsls	r3, r3, #24
 80079d6:	b09d      	sub	sp, #116	; 0x74
 80079d8:	4607      	mov	r7, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	4614      	mov	r4, r2
 80079de:	d50e      	bpl.n	80079fe <_svfiprintf_r+0x32>
 80079e0:	690b      	ldr	r3, [r1, #16]
 80079e2:	b963      	cbnz	r3, 80079fe <_svfiprintf_r+0x32>
 80079e4:	2140      	movs	r1, #64	; 0x40
 80079e6:	f7fe f89b 	bl	8005b20 <_malloc_r>
 80079ea:	6028      	str	r0, [r5, #0]
 80079ec:	6128      	str	r0, [r5, #16]
 80079ee:	b920      	cbnz	r0, 80079fa <_svfiprintf_r+0x2e>
 80079f0:	230c      	movs	r3, #12
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	e0d1      	b.n	8007b9e <_svfiprintf_r+0x1d2>
 80079fa:	2340      	movs	r3, #64	; 0x40
 80079fc:	616b      	str	r3, [r5, #20]
 80079fe:	2300      	movs	r3, #0
 8007a00:	9309      	str	r3, [sp, #36]	; 0x24
 8007a02:	2320      	movs	r3, #32
 8007a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a0c:	2330      	movs	r3, #48	; 0x30
 8007a0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bb8 <_svfiprintf_r+0x1ec>
 8007a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a16:	f04f 0901 	mov.w	r9, #1
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	469a      	mov	sl, r3
 8007a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a22:	b10a      	cbz	r2, 8007a28 <_svfiprintf_r+0x5c>
 8007a24:	2a25      	cmp	r2, #37	; 0x25
 8007a26:	d1f9      	bne.n	8007a1c <_svfiprintf_r+0x50>
 8007a28:	ebba 0b04 	subs.w	fp, sl, r4
 8007a2c:	d00b      	beq.n	8007a46 <_svfiprintf_r+0x7a>
 8007a2e:	465b      	mov	r3, fp
 8007a30:	4622      	mov	r2, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	4638      	mov	r0, r7
 8007a36:	f7ff ff6d 	bl	8007914 <__ssputs_r>
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f000 80aa 	beq.w	8007b94 <_svfiprintf_r+0x1c8>
 8007a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a42:	445a      	add	r2, fp
 8007a44:	9209      	str	r2, [sp, #36]	; 0x24
 8007a46:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 80a2 	beq.w	8007b94 <_svfiprintf_r+0x1c8>
 8007a50:	2300      	movs	r3, #0
 8007a52:	f04f 32ff 	mov.w	r2, #4294967295
 8007a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a5a:	f10a 0a01 	add.w	sl, sl, #1
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	9307      	str	r3, [sp, #28]
 8007a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a66:	931a      	str	r3, [sp, #104]	; 0x68
 8007a68:	4654      	mov	r4, sl
 8007a6a:	2205      	movs	r2, #5
 8007a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a70:	4851      	ldr	r0, [pc, #324]	; (8007bb8 <_svfiprintf_r+0x1ec>)
 8007a72:	f7f8 fbed 	bl	8000250 <memchr>
 8007a76:	9a04      	ldr	r2, [sp, #16]
 8007a78:	b9d8      	cbnz	r0, 8007ab2 <_svfiprintf_r+0xe6>
 8007a7a:	06d0      	lsls	r0, r2, #27
 8007a7c:	bf44      	itt	mi
 8007a7e:	2320      	movmi	r3, #32
 8007a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a84:	0711      	lsls	r1, r2, #28
 8007a86:	bf44      	itt	mi
 8007a88:	232b      	movmi	r3, #43	; 0x2b
 8007a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a92:	2b2a      	cmp	r3, #42	; 0x2a
 8007a94:	d015      	beq.n	8007ac2 <_svfiprintf_r+0xf6>
 8007a96:	9a07      	ldr	r2, [sp, #28]
 8007a98:	4654      	mov	r4, sl
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f04f 0c0a 	mov.w	ip, #10
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aa6:	3b30      	subs	r3, #48	; 0x30
 8007aa8:	2b09      	cmp	r3, #9
 8007aaa:	d94e      	bls.n	8007b4a <_svfiprintf_r+0x17e>
 8007aac:	b1b0      	cbz	r0, 8007adc <_svfiprintf_r+0x110>
 8007aae:	9207      	str	r2, [sp, #28]
 8007ab0:	e014      	b.n	8007adc <_svfiprintf_r+0x110>
 8007ab2:	eba0 0308 	sub.w	r3, r0, r8
 8007ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aba:	4313      	orrs	r3, r2
 8007abc:	9304      	str	r3, [sp, #16]
 8007abe:	46a2      	mov	sl, r4
 8007ac0:	e7d2      	b.n	8007a68 <_svfiprintf_r+0x9c>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	1d19      	adds	r1, r3, #4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	9103      	str	r1, [sp, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bfbb      	ittet	lt
 8007ace:	425b      	neglt	r3, r3
 8007ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ad4:	9307      	strge	r3, [sp, #28]
 8007ad6:	9307      	strlt	r3, [sp, #28]
 8007ad8:	bfb8      	it	lt
 8007ada:	9204      	strlt	r2, [sp, #16]
 8007adc:	7823      	ldrb	r3, [r4, #0]
 8007ade:	2b2e      	cmp	r3, #46	; 0x2e
 8007ae0:	d10c      	bne.n	8007afc <_svfiprintf_r+0x130>
 8007ae2:	7863      	ldrb	r3, [r4, #1]
 8007ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae6:	d135      	bne.n	8007b54 <_svfiprintf_r+0x188>
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	1d1a      	adds	r2, r3, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	9203      	str	r2, [sp, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bfb8      	it	lt
 8007af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007af8:	3402      	adds	r4, #2
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bc8 <_svfiprintf_r+0x1fc>
 8007b00:	7821      	ldrb	r1, [r4, #0]
 8007b02:	2203      	movs	r2, #3
 8007b04:	4650      	mov	r0, sl
 8007b06:	f7f8 fba3 	bl	8000250 <memchr>
 8007b0a:	b140      	cbz	r0, 8007b1e <_svfiprintf_r+0x152>
 8007b0c:	2340      	movs	r3, #64	; 0x40
 8007b0e:	eba0 000a 	sub.w	r0, r0, sl
 8007b12:	fa03 f000 	lsl.w	r0, r3, r0
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	4303      	orrs	r3, r0
 8007b1a:	3401      	adds	r4, #1
 8007b1c:	9304      	str	r3, [sp, #16]
 8007b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b22:	4826      	ldr	r0, [pc, #152]	; (8007bbc <_svfiprintf_r+0x1f0>)
 8007b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b28:	2206      	movs	r2, #6
 8007b2a:	f7f8 fb91 	bl	8000250 <memchr>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d038      	beq.n	8007ba4 <_svfiprintf_r+0x1d8>
 8007b32:	4b23      	ldr	r3, [pc, #140]	; (8007bc0 <_svfiprintf_r+0x1f4>)
 8007b34:	bb1b      	cbnz	r3, 8007b7e <_svfiprintf_r+0x1b2>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	3307      	adds	r3, #7
 8007b3a:	f023 0307 	bic.w	r3, r3, #7
 8007b3e:	3308      	adds	r3, #8
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b44:	4433      	add	r3, r6
 8007b46:	9309      	str	r3, [sp, #36]	; 0x24
 8007b48:	e767      	b.n	8007a1a <_svfiprintf_r+0x4e>
 8007b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b4e:	460c      	mov	r4, r1
 8007b50:	2001      	movs	r0, #1
 8007b52:	e7a5      	b.n	8007aa0 <_svfiprintf_r+0xd4>
 8007b54:	2300      	movs	r3, #0
 8007b56:	3401      	adds	r4, #1
 8007b58:	9305      	str	r3, [sp, #20]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	f04f 0c0a 	mov.w	ip, #10
 8007b60:	4620      	mov	r0, r4
 8007b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b66:	3a30      	subs	r2, #48	; 0x30
 8007b68:	2a09      	cmp	r2, #9
 8007b6a:	d903      	bls.n	8007b74 <_svfiprintf_r+0x1a8>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0c5      	beq.n	8007afc <_svfiprintf_r+0x130>
 8007b70:	9105      	str	r1, [sp, #20]
 8007b72:	e7c3      	b.n	8007afc <_svfiprintf_r+0x130>
 8007b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b78:	4604      	mov	r4, r0
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e7f0      	b.n	8007b60 <_svfiprintf_r+0x194>
 8007b7e:	ab03      	add	r3, sp, #12
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	462a      	mov	r2, r5
 8007b84:	4b0f      	ldr	r3, [pc, #60]	; (8007bc4 <_svfiprintf_r+0x1f8>)
 8007b86:	a904      	add	r1, sp, #16
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7fe f8cd 	bl	8005d28 <_printf_float>
 8007b8e:	1c42      	adds	r2, r0, #1
 8007b90:	4606      	mov	r6, r0
 8007b92:	d1d6      	bne.n	8007b42 <_svfiprintf_r+0x176>
 8007b94:	89ab      	ldrh	r3, [r5, #12]
 8007b96:	065b      	lsls	r3, r3, #25
 8007b98:	f53f af2c 	bmi.w	80079f4 <_svfiprintf_r+0x28>
 8007b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b9e:	b01d      	add	sp, #116	; 0x74
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba4:	ab03      	add	r3, sp, #12
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	462a      	mov	r2, r5
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <_svfiprintf_r+0x1f8>)
 8007bac:	a904      	add	r1, sp, #16
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f7fe fb46 	bl	8006240 <_printf_i>
 8007bb4:	e7eb      	b.n	8007b8e <_svfiprintf_r+0x1c2>
 8007bb6:	bf00      	nop
 8007bb8:	08009154 	.word	0x08009154
 8007bbc:	0800915e 	.word	0x0800915e
 8007bc0:	08005d29 	.word	0x08005d29
 8007bc4:	08007915 	.word	0x08007915
 8007bc8:	0800915a 	.word	0x0800915a

08007bcc <_read_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d07      	ldr	r5, [pc, #28]	; (8007bec <_read_r+0x20>)
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f000 fd7e 	bl	80086dc <_read>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_read_r+0x1e>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_read_r+0x1e>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	20004a48 	.word	0x20004a48

08007bf0 <__assert_func>:
 8007bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bf2:	4614      	mov	r4, r2
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <__assert_func+0x2c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	68d8      	ldr	r0, [r3, #12]
 8007bfe:	b14c      	cbz	r4, 8007c14 <__assert_func+0x24>
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <__assert_func+0x30>)
 8007c02:	9100      	str	r1, [sp, #0]
 8007c04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c08:	4906      	ldr	r1, [pc, #24]	; (8007c24 <__assert_func+0x34>)
 8007c0a:	462b      	mov	r3, r5
 8007c0c:	f000 f9a6 	bl	8007f5c <fiprintf>
 8007c10:	f000 fc5a 	bl	80084c8 <abort>
 8007c14:	4b04      	ldr	r3, [pc, #16]	; (8007c28 <__assert_func+0x38>)
 8007c16:	461c      	mov	r4, r3
 8007c18:	e7f3      	b.n	8007c02 <__assert_func+0x12>
 8007c1a:	bf00      	nop
 8007c1c:	20000010 	.word	0x20000010
 8007c20:	08009165 	.word	0x08009165
 8007c24:	08009172 	.word	0x08009172
 8007c28:	080091a0 	.word	0x080091a0

08007c2c <__sflush_r>:
 8007c2c:	898a      	ldrh	r2, [r1, #12]
 8007c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c32:	4605      	mov	r5, r0
 8007c34:	0710      	lsls	r0, r2, #28
 8007c36:	460c      	mov	r4, r1
 8007c38:	d458      	bmi.n	8007cec <__sflush_r+0xc0>
 8007c3a:	684b      	ldr	r3, [r1, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dc05      	bgt.n	8007c4c <__sflush_r+0x20>
 8007c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dc02      	bgt.n	8007c4c <__sflush_r+0x20>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	d0f9      	beq.n	8007c46 <__sflush_r+0x1a>
 8007c52:	2300      	movs	r3, #0
 8007c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c58:	682f      	ldr	r7, [r5, #0]
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	d032      	beq.n	8007cc4 <__sflush_r+0x98>
 8007c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	075a      	lsls	r2, r3, #29
 8007c64:	d505      	bpl.n	8007c72 <__sflush_r+0x46>
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	1ac0      	subs	r0, r0, r3
 8007c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c6c:	b10b      	cbz	r3, 8007c72 <__sflush_r+0x46>
 8007c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c70:	1ac0      	subs	r0, r0, r3
 8007c72:	2300      	movs	r3, #0
 8007c74:	4602      	mov	r2, r0
 8007c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c78:	6a21      	ldr	r1, [r4, #32]
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b0      	blx	r6
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	d106      	bne.n	8007c92 <__sflush_r+0x66>
 8007c84:	6829      	ldr	r1, [r5, #0]
 8007c86:	291d      	cmp	r1, #29
 8007c88:	d82c      	bhi.n	8007ce4 <__sflush_r+0xb8>
 8007c8a:	4a2a      	ldr	r2, [pc, #168]	; (8007d34 <__sflush_r+0x108>)
 8007c8c:	40ca      	lsrs	r2, r1
 8007c8e:	07d6      	lsls	r6, r2, #31
 8007c90:	d528      	bpl.n	8007ce4 <__sflush_r+0xb8>
 8007c92:	2200      	movs	r2, #0
 8007c94:	6062      	str	r2, [r4, #4]
 8007c96:	04d9      	lsls	r1, r3, #19
 8007c98:	6922      	ldr	r2, [r4, #16]
 8007c9a:	6022      	str	r2, [r4, #0]
 8007c9c:	d504      	bpl.n	8007ca8 <__sflush_r+0x7c>
 8007c9e:	1c42      	adds	r2, r0, #1
 8007ca0:	d101      	bne.n	8007ca6 <__sflush_r+0x7a>
 8007ca2:	682b      	ldr	r3, [r5, #0]
 8007ca4:	b903      	cbnz	r3, 8007ca8 <__sflush_r+0x7c>
 8007ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007caa:	602f      	str	r7, [r5, #0]
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d0ca      	beq.n	8007c46 <__sflush_r+0x1a>
 8007cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	d002      	beq.n	8007cbe <__sflush_r+0x92>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f7fd fec5 	bl	8005a48 <_free_r>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8007cc2:	e7c1      	b.n	8007c48 <__sflush_r+0x1c>
 8007cc4:	6a21      	ldr	r1, [r4, #32]
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b0      	blx	r6
 8007ccc:	1c41      	adds	r1, r0, #1
 8007cce:	d1c7      	bne.n	8007c60 <__sflush_r+0x34>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0c4      	beq.n	8007c60 <__sflush_r+0x34>
 8007cd6:	2b1d      	cmp	r3, #29
 8007cd8:	d001      	beq.n	8007cde <__sflush_r+0xb2>
 8007cda:	2b16      	cmp	r3, #22
 8007cdc:	d101      	bne.n	8007ce2 <__sflush_r+0xb6>
 8007cde:	602f      	str	r7, [r5, #0]
 8007ce0:	e7b1      	b.n	8007c46 <__sflush_r+0x1a>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	e7ad      	b.n	8007c48 <__sflush_r+0x1c>
 8007cec:	690f      	ldr	r7, [r1, #16]
 8007cee:	2f00      	cmp	r7, #0
 8007cf0:	d0a9      	beq.n	8007c46 <__sflush_r+0x1a>
 8007cf2:	0793      	lsls	r3, r2, #30
 8007cf4:	680e      	ldr	r6, [r1, #0]
 8007cf6:	bf08      	it	eq
 8007cf8:	694b      	ldreq	r3, [r1, #20]
 8007cfa:	600f      	str	r7, [r1, #0]
 8007cfc:	bf18      	it	ne
 8007cfe:	2300      	movne	r3, #0
 8007d00:	eba6 0807 	sub.w	r8, r6, r7
 8007d04:	608b      	str	r3, [r1, #8]
 8007d06:	f1b8 0f00 	cmp.w	r8, #0
 8007d0a:	dd9c      	ble.n	8007c46 <__sflush_r+0x1a>
 8007d0c:	6a21      	ldr	r1, [r4, #32]
 8007d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d10:	4643      	mov	r3, r8
 8007d12:	463a      	mov	r2, r7
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b0      	blx	r6
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	dc06      	bgt.n	8007d2a <__sflush_r+0xfe>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d22:	81a3      	strh	r3, [r4, #12]
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295
 8007d28:	e78e      	b.n	8007c48 <__sflush_r+0x1c>
 8007d2a:	4407      	add	r7, r0
 8007d2c:	eba8 0800 	sub.w	r8, r8, r0
 8007d30:	e7e9      	b.n	8007d06 <__sflush_r+0xda>
 8007d32:	bf00      	nop
 8007d34:	20400001 	.word	0x20400001

08007d38 <_fflush_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	690b      	ldr	r3, [r1, #16]
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	b913      	cbnz	r3, 8007d48 <_fflush_r+0x10>
 8007d42:	2500      	movs	r5, #0
 8007d44:	4628      	mov	r0, r5
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	b118      	cbz	r0, 8007d52 <_fflush_r+0x1a>
 8007d4a:	6983      	ldr	r3, [r0, #24]
 8007d4c:	b90b      	cbnz	r3, 8007d52 <_fflush_r+0x1a>
 8007d4e:	f000 f887 	bl	8007e60 <__sinit>
 8007d52:	4b14      	ldr	r3, [pc, #80]	; (8007da4 <_fflush_r+0x6c>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	d11b      	bne.n	8007d90 <_fflush_r+0x58>
 8007d58:	686c      	ldr	r4, [r5, #4]
 8007d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0ef      	beq.n	8007d42 <_fflush_r+0xa>
 8007d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d64:	07d0      	lsls	r0, r2, #31
 8007d66:	d404      	bmi.n	8007d72 <_fflush_r+0x3a>
 8007d68:	0599      	lsls	r1, r3, #22
 8007d6a:	d402      	bmi.n	8007d72 <_fflush_r+0x3a>
 8007d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d6e:	f000 f927 	bl	8007fc0 <__retarget_lock_acquire_recursive>
 8007d72:	4628      	mov	r0, r5
 8007d74:	4621      	mov	r1, r4
 8007d76:	f7ff ff59 	bl	8007c2c <__sflush_r>
 8007d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d7c:	07da      	lsls	r2, r3, #31
 8007d7e:	4605      	mov	r5, r0
 8007d80:	d4e0      	bmi.n	8007d44 <_fflush_r+0xc>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	059b      	lsls	r3, r3, #22
 8007d86:	d4dd      	bmi.n	8007d44 <_fflush_r+0xc>
 8007d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d8a:	f000 f91a 	bl	8007fc2 <__retarget_lock_release_recursive>
 8007d8e:	e7d9      	b.n	8007d44 <_fflush_r+0xc>
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <_fflush_r+0x70>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	d101      	bne.n	8007d9a <_fflush_r+0x62>
 8007d96:	68ac      	ldr	r4, [r5, #8]
 8007d98:	e7df      	b.n	8007d5a <_fflush_r+0x22>
 8007d9a:	4b04      	ldr	r3, [pc, #16]	; (8007dac <_fflush_r+0x74>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	bf08      	it	eq
 8007da0:	68ec      	ldreq	r4, [r5, #12]
 8007da2:	e7da      	b.n	8007d5a <_fflush_r+0x22>
 8007da4:	080092c4 	.word	0x080092c4
 8007da8:	080092e4 	.word	0x080092e4
 8007dac:	080092a4 	.word	0x080092a4

08007db0 <std>:
 8007db0:	2300      	movs	r3, #0
 8007db2:	b510      	push	{r4, lr}
 8007db4:	4604      	mov	r4, r0
 8007db6:	e9c0 3300 	strd	r3, r3, [r0]
 8007dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dbe:	6083      	str	r3, [r0, #8]
 8007dc0:	8181      	strh	r1, [r0, #12]
 8007dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8007dc4:	81c2      	strh	r2, [r0, #14]
 8007dc6:	6183      	str	r3, [r0, #24]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	2208      	movs	r2, #8
 8007dcc:	305c      	adds	r0, #92	; 0x5c
 8007dce:	f7fd fe1d 	bl	8005a0c <memset>
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <std+0x38>)
 8007dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <std+0x3c>)
 8007dd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <std+0x40>)
 8007ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dde:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <std+0x44>)
 8007de0:	6224      	str	r4, [r4, #32]
 8007de2:	6323      	str	r3, [r4, #48]	; 0x30
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	bf00      	nop
 8007de8:	080064ed 	.word	0x080064ed
 8007dec:	0800650f 	.word	0x0800650f
 8007df0:	08006547 	.word	0x08006547
 8007df4:	0800656b 	.word	0x0800656b

08007df8 <_cleanup_r>:
 8007df8:	4901      	ldr	r1, [pc, #4]	; (8007e00 <_cleanup_r+0x8>)
 8007dfa:	f000 b8c1 	b.w	8007f80 <_fwalk_reent>
 8007dfe:	bf00      	nop
 8007e00:	08007d39 	.word	0x08007d39

08007e04 <__sfmoreglue>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	2268      	movs	r2, #104	; 0x68
 8007e08:	1e4d      	subs	r5, r1, #1
 8007e0a:	4355      	muls	r5, r2
 8007e0c:	460e      	mov	r6, r1
 8007e0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e12:	f7fd fe85 	bl	8005b20 <_malloc_r>
 8007e16:	4604      	mov	r4, r0
 8007e18:	b140      	cbz	r0, 8007e2c <__sfmoreglue+0x28>
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8007e20:	300c      	adds	r0, #12
 8007e22:	60a0      	str	r0, [r4, #8]
 8007e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e28:	f7fd fdf0 	bl	8005a0c <memset>
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}

08007e30 <__sfp_lock_acquire>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__sfp_lock_acquire+0x8>)
 8007e32:	f000 b8c5 	b.w	8007fc0 <__retarget_lock_acquire_recursive>
 8007e36:	bf00      	nop
 8007e38:	20004a4d 	.word	0x20004a4d

08007e3c <__sfp_lock_release>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	; (8007e44 <__sfp_lock_release+0x8>)
 8007e3e:	f000 b8c0 	b.w	8007fc2 <__retarget_lock_release_recursive>
 8007e42:	bf00      	nop
 8007e44:	20004a4d 	.word	0x20004a4d

08007e48 <__sinit_lock_acquire>:
 8007e48:	4801      	ldr	r0, [pc, #4]	; (8007e50 <__sinit_lock_acquire+0x8>)
 8007e4a:	f000 b8b9 	b.w	8007fc0 <__retarget_lock_acquire_recursive>
 8007e4e:	bf00      	nop
 8007e50:	20004a4e 	.word	0x20004a4e

08007e54 <__sinit_lock_release>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__sinit_lock_release+0x8>)
 8007e56:	f000 b8b4 	b.w	8007fc2 <__retarget_lock_release_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	20004a4e 	.word	0x20004a4e

08007e60 <__sinit>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	4604      	mov	r4, r0
 8007e64:	f7ff fff0 	bl	8007e48 <__sinit_lock_acquire>
 8007e68:	69a3      	ldr	r3, [r4, #24]
 8007e6a:	b11b      	cbz	r3, 8007e74 <__sinit+0x14>
 8007e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e70:	f7ff bff0 	b.w	8007e54 <__sinit_lock_release>
 8007e74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e78:	6523      	str	r3, [r4, #80]	; 0x50
 8007e7a:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <__sinit+0x68>)
 8007e7c:	4a13      	ldr	r2, [pc, #76]	; (8007ecc <__sinit+0x6c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e82:	42a3      	cmp	r3, r4
 8007e84:	bf04      	itt	eq
 8007e86:	2301      	moveq	r3, #1
 8007e88:	61a3      	streq	r3, [r4, #24]
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 f820 	bl	8007ed0 <__sfp>
 8007e90:	6060      	str	r0, [r4, #4]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f81c 	bl	8007ed0 <__sfp>
 8007e98:	60a0      	str	r0, [r4, #8]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f818 	bl	8007ed0 <__sfp>
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	60e0      	str	r0, [r4, #12]
 8007ea4:	2104      	movs	r1, #4
 8007ea6:	6860      	ldr	r0, [r4, #4]
 8007ea8:	f7ff ff82 	bl	8007db0 <std>
 8007eac:	68a0      	ldr	r0, [r4, #8]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	2109      	movs	r1, #9
 8007eb2:	f7ff ff7d 	bl	8007db0 <std>
 8007eb6:	68e0      	ldr	r0, [r4, #12]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	2112      	movs	r1, #18
 8007ebc:	f7ff ff78 	bl	8007db0 <std>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	61a3      	str	r3, [r4, #24]
 8007ec4:	e7d2      	b.n	8007e6c <__sinit+0xc>
 8007ec6:	bf00      	nop
 8007ec8:	08008f30 	.word	0x08008f30
 8007ecc:	08007df9 	.word	0x08007df9

08007ed0 <__sfp>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	f7ff ffac 	bl	8007e30 <__sfp_lock_acquire>
 8007ed8:	4b1e      	ldr	r3, [pc, #120]	; (8007f54 <__sfp+0x84>)
 8007eda:	681e      	ldr	r6, [r3, #0]
 8007edc:	69b3      	ldr	r3, [r6, #24]
 8007ede:	b913      	cbnz	r3, 8007ee6 <__sfp+0x16>
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7ff ffbd 	bl	8007e60 <__sinit>
 8007ee6:	3648      	adds	r6, #72	; 0x48
 8007ee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	d503      	bpl.n	8007ef8 <__sfp+0x28>
 8007ef0:	6833      	ldr	r3, [r6, #0]
 8007ef2:	b30b      	cbz	r3, 8007f38 <__sfp+0x68>
 8007ef4:	6836      	ldr	r6, [r6, #0]
 8007ef6:	e7f7      	b.n	8007ee8 <__sfp+0x18>
 8007ef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007efc:	b9d5      	cbnz	r5, 8007f34 <__sfp+0x64>
 8007efe:	4b16      	ldr	r3, [pc, #88]	; (8007f58 <__sfp+0x88>)
 8007f00:	60e3      	str	r3, [r4, #12]
 8007f02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f06:	6665      	str	r5, [r4, #100]	; 0x64
 8007f08:	f000 f859 	bl	8007fbe <__retarget_lock_init_recursive>
 8007f0c:	f7ff ff96 	bl	8007e3c <__sfp_lock_release>
 8007f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f18:	6025      	str	r5, [r4, #0]
 8007f1a:	61a5      	str	r5, [r4, #24]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f24:	f7fd fd72 	bl	8005a0c <memset>
 8007f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f30:	4620      	mov	r0, r4
 8007f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f34:	3468      	adds	r4, #104	; 0x68
 8007f36:	e7d9      	b.n	8007eec <__sfp+0x1c>
 8007f38:	2104      	movs	r1, #4
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f7ff ff62 	bl	8007e04 <__sfmoreglue>
 8007f40:	4604      	mov	r4, r0
 8007f42:	6030      	str	r0, [r6, #0]
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1d5      	bne.n	8007ef4 <__sfp+0x24>
 8007f48:	f7ff ff78 	bl	8007e3c <__sfp_lock_release>
 8007f4c:	230c      	movs	r3, #12
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	e7ee      	b.n	8007f30 <__sfp+0x60>
 8007f52:	bf00      	nop
 8007f54:	08008f30 	.word	0x08008f30
 8007f58:	ffff0001 	.word	0xffff0001

08007f5c <fiprintf>:
 8007f5c:	b40e      	push	{r1, r2, r3}
 8007f5e:	b503      	push	{r0, r1, lr}
 8007f60:	4601      	mov	r1, r0
 8007f62:	ab03      	add	r3, sp, #12
 8007f64:	4805      	ldr	r0, [pc, #20]	; (8007f7c <fiprintf+0x20>)
 8007f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	f000 f8ad 	bl	80080cc <_vfiprintf_r>
 8007f72:	b002      	add	sp, #8
 8007f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f78:	b003      	add	sp, #12
 8007f7a:	4770      	bx	lr
 8007f7c:	20000010 	.word	0x20000010

08007f80 <_fwalk_reent>:
 8007f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f84:	4606      	mov	r6, r0
 8007f86:	4688      	mov	r8, r1
 8007f88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f8c:	2700      	movs	r7, #0
 8007f8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f92:	f1b9 0901 	subs.w	r9, r9, #1
 8007f96:	d505      	bpl.n	8007fa4 <_fwalk_reent+0x24>
 8007f98:	6824      	ldr	r4, [r4, #0]
 8007f9a:	2c00      	cmp	r4, #0
 8007f9c:	d1f7      	bne.n	8007f8e <_fwalk_reent+0xe>
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa4:	89ab      	ldrh	r3, [r5, #12]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d907      	bls.n	8007fba <_fwalk_reent+0x3a>
 8007faa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	d003      	beq.n	8007fba <_fwalk_reent+0x3a>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	47c0      	blx	r8
 8007fb8:	4307      	orrs	r7, r0
 8007fba:	3568      	adds	r5, #104	; 0x68
 8007fbc:	e7e9      	b.n	8007f92 <_fwalk_reent+0x12>

08007fbe <__retarget_lock_init_recursive>:
 8007fbe:	4770      	bx	lr

08007fc0 <__retarget_lock_acquire_recursive>:
 8007fc0:	4770      	bx	lr

08007fc2 <__retarget_lock_release_recursive>:
 8007fc2:	4770      	bx	lr

08007fc4 <__ascii_mbtowc>:
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	b901      	cbnz	r1, 8007fca <__ascii_mbtowc+0x6>
 8007fc8:	a901      	add	r1, sp, #4
 8007fca:	b142      	cbz	r2, 8007fde <__ascii_mbtowc+0x1a>
 8007fcc:	b14b      	cbz	r3, 8007fe2 <__ascii_mbtowc+0x1e>
 8007fce:	7813      	ldrb	r3, [r2, #0]
 8007fd0:	600b      	str	r3, [r1, #0]
 8007fd2:	7812      	ldrb	r2, [r2, #0]
 8007fd4:	1e10      	subs	r0, r2, #0
 8007fd6:	bf18      	it	ne
 8007fd8:	2001      	movne	r0, #1
 8007fda:	b002      	add	sp, #8
 8007fdc:	4770      	bx	lr
 8007fde:	4610      	mov	r0, r2
 8007fe0:	e7fb      	b.n	8007fda <__ascii_mbtowc+0x16>
 8007fe2:	f06f 0001 	mvn.w	r0, #1
 8007fe6:	e7f8      	b.n	8007fda <__ascii_mbtowc+0x16>

08007fe8 <memmove>:
 8007fe8:	4288      	cmp	r0, r1
 8007fea:	b510      	push	{r4, lr}
 8007fec:	eb01 0402 	add.w	r4, r1, r2
 8007ff0:	d902      	bls.n	8007ff8 <memmove+0x10>
 8007ff2:	4284      	cmp	r4, r0
 8007ff4:	4623      	mov	r3, r4
 8007ff6:	d807      	bhi.n	8008008 <memmove+0x20>
 8007ff8:	1e43      	subs	r3, r0, #1
 8007ffa:	42a1      	cmp	r1, r4
 8007ffc:	d008      	beq.n	8008010 <memmove+0x28>
 8007ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008006:	e7f8      	b.n	8007ffa <memmove+0x12>
 8008008:	4402      	add	r2, r0
 800800a:	4601      	mov	r1, r0
 800800c:	428a      	cmp	r2, r1
 800800e:	d100      	bne.n	8008012 <memmove+0x2a>
 8008010:	bd10      	pop	{r4, pc}
 8008012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800801a:	e7f7      	b.n	800800c <memmove+0x24>

0800801c <_realloc_r>:
 800801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008020:	4680      	mov	r8, r0
 8008022:	4614      	mov	r4, r2
 8008024:	460e      	mov	r6, r1
 8008026:	b921      	cbnz	r1, 8008032 <_realloc_r+0x16>
 8008028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800802c:	4611      	mov	r1, r2
 800802e:	f7fd bd77 	b.w	8005b20 <_malloc_r>
 8008032:	b92a      	cbnz	r2, 8008040 <_realloc_r+0x24>
 8008034:	f7fd fd08 	bl	8005a48 <_free_r>
 8008038:	4625      	mov	r5, r4
 800803a:	4628      	mov	r0, r5
 800803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008040:	f000 faae 	bl	80085a0 <_malloc_usable_size_r>
 8008044:	4284      	cmp	r4, r0
 8008046:	4607      	mov	r7, r0
 8008048:	d802      	bhi.n	8008050 <_realloc_r+0x34>
 800804a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800804e:	d812      	bhi.n	8008076 <_realloc_r+0x5a>
 8008050:	4621      	mov	r1, r4
 8008052:	4640      	mov	r0, r8
 8008054:	f7fd fd64 	bl	8005b20 <_malloc_r>
 8008058:	4605      	mov	r5, r0
 800805a:	2800      	cmp	r0, #0
 800805c:	d0ed      	beq.n	800803a <_realloc_r+0x1e>
 800805e:	42bc      	cmp	r4, r7
 8008060:	4622      	mov	r2, r4
 8008062:	4631      	mov	r1, r6
 8008064:	bf28      	it	cs
 8008066:	463a      	movcs	r2, r7
 8008068:	f7ff f8b6 	bl	80071d8 <memcpy>
 800806c:	4631      	mov	r1, r6
 800806e:	4640      	mov	r0, r8
 8008070:	f7fd fcea 	bl	8005a48 <_free_r>
 8008074:	e7e1      	b.n	800803a <_realloc_r+0x1e>
 8008076:	4635      	mov	r5, r6
 8008078:	e7df      	b.n	800803a <_realloc_r+0x1e>

0800807a <__sfputc_r>:
 800807a:	6893      	ldr	r3, [r2, #8]
 800807c:	3b01      	subs	r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	b410      	push	{r4}
 8008082:	6093      	str	r3, [r2, #8]
 8008084:	da08      	bge.n	8008098 <__sfputc_r+0x1e>
 8008086:	6994      	ldr	r4, [r2, #24]
 8008088:	42a3      	cmp	r3, r4
 800808a:	db01      	blt.n	8008090 <__sfputc_r+0x16>
 800808c:	290a      	cmp	r1, #10
 800808e:	d103      	bne.n	8008098 <__sfputc_r+0x1e>
 8008090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008094:	f000 b94a 	b.w	800832c <__swbuf_r>
 8008098:	6813      	ldr	r3, [r2, #0]
 800809a:	1c58      	adds	r0, r3, #1
 800809c:	6010      	str	r0, [r2, #0]
 800809e:	7019      	strb	r1, [r3, #0]
 80080a0:	4608      	mov	r0, r1
 80080a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <__sfputs_r>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	4606      	mov	r6, r0
 80080ac:	460f      	mov	r7, r1
 80080ae:	4614      	mov	r4, r2
 80080b0:	18d5      	adds	r5, r2, r3
 80080b2:	42ac      	cmp	r4, r5
 80080b4:	d101      	bne.n	80080ba <__sfputs_r+0x12>
 80080b6:	2000      	movs	r0, #0
 80080b8:	e007      	b.n	80080ca <__sfputs_r+0x22>
 80080ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080be:	463a      	mov	r2, r7
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7ff ffda 	bl	800807a <__sfputc_r>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d1f3      	bne.n	80080b2 <__sfputs_r+0xa>
 80080ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080cc <_vfiprintf_r>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	460d      	mov	r5, r1
 80080d2:	b09d      	sub	sp, #116	; 0x74
 80080d4:	4614      	mov	r4, r2
 80080d6:	4698      	mov	r8, r3
 80080d8:	4606      	mov	r6, r0
 80080da:	b118      	cbz	r0, 80080e4 <_vfiprintf_r+0x18>
 80080dc:	6983      	ldr	r3, [r0, #24]
 80080de:	b90b      	cbnz	r3, 80080e4 <_vfiprintf_r+0x18>
 80080e0:	f7ff febe 	bl	8007e60 <__sinit>
 80080e4:	4b89      	ldr	r3, [pc, #548]	; (800830c <_vfiprintf_r+0x240>)
 80080e6:	429d      	cmp	r5, r3
 80080e8:	d11b      	bne.n	8008122 <_vfiprintf_r+0x56>
 80080ea:	6875      	ldr	r5, [r6, #4]
 80080ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ee:	07d9      	lsls	r1, r3, #31
 80080f0:	d405      	bmi.n	80080fe <_vfiprintf_r+0x32>
 80080f2:	89ab      	ldrh	r3, [r5, #12]
 80080f4:	059a      	lsls	r2, r3, #22
 80080f6:	d402      	bmi.n	80080fe <_vfiprintf_r+0x32>
 80080f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080fa:	f7ff ff61 	bl	8007fc0 <__retarget_lock_acquire_recursive>
 80080fe:	89ab      	ldrh	r3, [r5, #12]
 8008100:	071b      	lsls	r3, r3, #28
 8008102:	d501      	bpl.n	8008108 <_vfiprintf_r+0x3c>
 8008104:	692b      	ldr	r3, [r5, #16]
 8008106:	b9eb      	cbnz	r3, 8008144 <_vfiprintf_r+0x78>
 8008108:	4629      	mov	r1, r5
 800810a:	4630      	mov	r0, r6
 800810c:	f000 f96e 	bl	80083ec <__swsetup_r>
 8008110:	b1c0      	cbz	r0, 8008144 <_vfiprintf_r+0x78>
 8008112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008114:	07dc      	lsls	r4, r3, #31
 8008116:	d50e      	bpl.n	8008136 <_vfiprintf_r+0x6a>
 8008118:	f04f 30ff 	mov.w	r0, #4294967295
 800811c:	b01d      	add	sp, #116	; 0x74
 800811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008122:	4b7b      	ldr	r3, [pc, #492]	; (8008310 <_vfiprintf_r+0x244>)
 8008124:	429d      	cmp	r5, r3
 8008126:	d101      	bne.n	800812c <_vfiprintf_r+0x60>
 8008128:	68b5      	ldr	r5, [r6, #8]
 800812a:	e7df      	b.n	80080ec <_vfiprintf_r+0x20>
 800812c:	4b79      	ldr	r3, [pc, #484]	; (8008314 <_vfiprintf_r+0x248>)
 800812e:	429d      	cmp	r5, r3
 8008130:	bf08      	it	eq
 8008132:	68f5      	ldreq	r5, [r6, #12]
 8008134:	e7da      	b.n	80080ec <_vfiprintf_r+0x20>
 8008136:	89ab      	ldrh	r3, [r5, #12]
 8008138:	0598      	lsls	r0, r3, #22
 800813a:	d4ed      	bmi.n	8008118 <_vfiprintf_r+0x4c>
 800813c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800813e:	f7ff ff40 	bl	8007fc2 <__retarget_lock_release_recursive>
 8008142:	e7e9      	b.n	8008118 <_vfiprintf_r+0x4c>
 8008144:	2300      	movs	r3, #0
 8008146:	9309      	str	r3, [sp, #36]	; 0x24
 8008148:	2320      	movs	r3, #32
 800814a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800814e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008152:	2330      	movs	r3, #48	; 0x30
 8008154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008318 <_vfiprintf_r+0x24c>
 8008158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800815c:	f04f 0901 	mov.w	r9, #1
 8008160:	4623      	mov	r3, r4
 8008162:	469a      	mov	sl, r3
 8008164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008168:	b10a      	cbz	r2, 800816e <_vfiprintf_r+0xa2>
 800816a:	2a25      	cmp	r2, #37	; 0x25
 800816c:	d1f9      	bne.n	8008162 <_vfiprintf_r+0x96>
 800816e:	ebba 0b04 	subs.w	fp, sl, r4
 8008172:	d00b      	beq.n	800818c <_vfiprintf_r+0xc0>
 8008174:	465b      	mov	r3, fp
 8008176:	4622      	mov	r2, r4
 8008178:	4629      	mov	r1, r5
 800817a:	4630      	mov	r0, r6
 800817c:	f7ff ff94 	bl	80080a8 <__sfputs_r>
 8008180:	3001      	adds	r0, #1
 8008182:	f000 80aa 	beq.w	80082da <_vfiprintf_r+0x20e>
 8008186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008188:	445a      	add	r2, fp
 800818a:	9209      	str	r2, [sp, #36]	; 0x24
 800818c:	f89a 3000 	ldrb.w	r3, [sl]
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 80a2 	beq.w	80082da <_vfiprintf_r+0x20e>
 8008196:	2300      	movs	r3, #0
 8008198:	f04f 32ff 	mov.w	r2, #4294967295
 800819c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a0:	f10a 0a01 	add.w	sl, sl, #1
 80081a4:	9304      	str	r3, [sp, #16]
 80081a6:	9307      	str	r3, [sp, #28]
 80081a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081ac:	931a      	str	r3, [sp, #104]	; 0x68
 80081ae:	4654      	mov	r4, sl
 80081b0:	2205      	movs	r2, #5
 80081b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b6:	4858      	ldr	r0, [pc, #352]	; (8008318 <_vfiprintf_r+0x24c>)
 80081b8:	f7f8 f84a 	bl	8000250 <memchr>
 80081bc:	9a04      	ldr	r2, [sp, #16]
 80081be:	b9d8      	cbnz	r0, 80081f8 <_vfiprintf_r+0x12c>
 80081c0:	06d1      	lsls	r1, r2, #27
 80081c2:	bf44      	itt	mi
 80081c4:	2320      	movmi	r3, #32
 80081c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ca:	0713      	lsls	r3, r2, #28
 80081cc:	bf44      	itt	mi
 80081ce:	232b      	movmi	r3, #43	; 0x2b
 80081d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d4:	f89a 3000 	ldrb.w	r3, [sl]
 80081d8:	2b2a      	cmp	r3, #42	; 0x2a
 80081da:	d015      	beq.n	8008208 <_vfiprintf_r+0x13c>
 80081dc:	9a07      	ldr	r2, [sp, #28]
 80081de:	4654      	mov	r4, sl
 80081e0:	2000      	movs	r0, #0
 80081e2:	f04f 0c0a 	mov.w	ip, #10
 80081e6:	4621      	mov	r1, r4
 80081e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ec:	3b30      	subs	r3, #48	; 0x30
 80081ee:	2b09      	cmp	r3, #9
 80081f0:	d94e      	bls.n	8008290 <_vfiprintf_r+0x1c4>
 80081f2:	b1b0      	cbz	r0, 8008222 <_vfiprintf_r+0x156>
 80081f4:	9207      	str	r2, [sp, #28]
 80081f6:	e014      	b.n	8008222 <_vfiprintf_r+0x156>
 80081f8:	eba0 0308 	sub.w	r3, r0, r8
 80081fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008200:	4313      	orrs	r3, r2
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	46a2      	mov	sl, r4
 8008206:	e7d2      	b.n	80081ae <_vfiprintf_r+0xe2>
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	1d19      	adds	r1, r3, #4
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	9103      	str	r1, [sp, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	bfbb      	ittet	lt
 8008214:	425b      	neglt	r3, r3
 8008216:	f042 0202 	orrlt.w	r2, r2, #2
 800821a:	9307      	strge	r3, [sp, #28]
 800821c:	9307      	strlt	r3, [sp, #28]
 800821e:	bfb8      	it	lt
 8008220:	9204      	strlt	r2, [sp, #16]
 8008222:	7823      	ldrb	r3, [r4, #0]
 8008224:	2b2e      	cmp	r3, #46	; 0x2e
 8008226:	d10c      	bne.n	8008242 <_vfiprintf_r+0x176>
 8008228:	7863      	ldrb	r3, [r4, #1]
 800822a:	2b2a      	cmp	r3, #42	; 0x2a
 800822c:	d135      	bne.n	800829a <_vfiprintf_r+0x1ce>
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	1d1a      	adds	r2, r3, #4
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	9203      	str	r2, [sp, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	bfb8      	it	lt
 800823a:	f04f 33ff 	movlt.w	r3, #4294967295
 800823e:	3402      	adds	r4, #2
 8008240:	9305      	str	r3, [sp, #20]
 8008242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008328 <_vfiprintf_r+0x25c>
 8008246:	7821      	ldrb	r1, [r4, #0]
 8008248:	2203      	movs	r2, #3
 800824a:	4650      	mov	r0, sl
 800824c:	f7f8 f800 	bl	8000250 <memchr>
 8008250:	b140      	cbz	r0, 8008264 <_vfiprintf_r+0x198>
 8008252:	2340      	movs	r3, #64	; 0x40
 8008254:	eba0 000a 	sub.w	r0, r0, sl
 8008258:	fa03 f000 	lsl.w	r0, r3, r0
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	4303      	orrs	r3, r0
 8008260:	3401      	adds	r4, #1
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008268:	482c      	ldr	r0, [pc, #176]	; (800831c <_vfiprintf_r+0x250>)
 800826a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800826e:	2206      	movs	r2, #6
 8008270:	f7f7 ffee 	bl	8000250 <memchr>
 8008274:	2800      	cmp	r0, #0
 8008276:	d03f      	beq.n	80082f8 <_vfiprintf_r+0x22c>
 8008278:	4b29      	ldr	r3, [pc, #164]	; (8008320 <_vfiprintf_r+0x254>)
 800827a:	bb1b      	cbnz	r3, 80082c4 <_vfiprintf_r+0x1f8>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	3307      	adds	r3, #7
 8008280:	f023 0307 	bic.w	r3, r3, #7
 8008284:	3308      	adds	r3, #8
 8008286:	9303      	str	r3, [sp, #12]
 8008288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828a:	443b      	add	r3, r7
 800828c:	9309      	str	r3, [sp, #36]	; 0x24
 800828e:	e767      	b.n	8008160 <_vfiprintf_r+0x94>
 8008290:	fb0c 3202 	mla	r2, ip, r2, r3
 8008294:	460c      	mov	r4, r1
 8008296:	2001      	movs	r0, #1
 8008298:	e7a5      	b.n	80081e6 <_vfiprintf_r+0x11a>
 800829a:	2300      	movs	r3, #0
 800829c:	3401      	adds	r4, #1
 800829e:	9305      	str	r3, [sp, #20]
 80082a0:	4619      	mov	r1, r3
 80082a2:	f04f 0c0a 	mov.w	ip, #10
 80082a6:	4620      	mov	r0, r4
 80082a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ac:	3a30      	subs	r2, #48	; 0x30
 80082ae:	2a09      	cmp	r2, #9
 80082b0:	d903      	bls.n	80082ba <_vfiprintf_r+0x1ee>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0c5      	beq.n	8008242 <_vfiprintf_r+0x176>
 80082b6:	9105      	str	r1, [sp, #20]
 80082b8:	e7c3      	b.n	8008242 <_vfiprintf_r+0x176>
 80082ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80082be:	4604      	mov	r4, r0
 80082c0:	2301      	movs	r3, #1
 80082c2:	e7f0      	b.n	80082a6 <_vfiprintf_r+0x1da>
 80082c4:	ab03      	add	r3, sp, #12
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	462a      	mov	r2, r5
 80082ca:	4b16      	ldr	r3, [pc, #88]	; (8008324 <_vfiprintf_r+0x258>)
 80082cc:	a904      	add	r1, sp, #16
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7fd fd2a 	bl	8005d28 <_printf_float>
 80082d4:	4607      	mov	r7, r0
 80082d6:	1c78      	adds	r0, r7, #1
 80082d8:	d1d6      	bne.n	8008288 <_vfiprintf_r+0x1bc>
 80082da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082dc:	07d9      	lsls	r1, r3, #31
 80082de:	d405      	bmi.n	80082ec <_vfiprintf_r+0x220>
 80082e0:	89ab      	ldrh	r3, [r5, #12]
 80082e2:	059a      	lsls	r2, r3, #22
 80082e4:	d402      	bmi.n	80082ec <_vfiprintf_r+0x220>
 80082e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082e8:	f7ff fe6b 	bl	8007fc2 <__retarget_lock_release_recursive>
 80082ec:	89ab      	ldrh	r3, [r5, #12]
 80082ee:	065b      	lsls	r3, r3, #25
 80082f0:	f53f af12 	bmi.w	8008118 <_vfiprintf_r+0x4c>
 80082f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082f6:	e711      	b.n	800811c <_vfiprintf_r+0x50>
 80082f8:	ab03      	add	r3, sp, #12
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	462a      	mov	r2, r5
 80082fe:	4b09      	ldr	r3, [pc, #36]	; (8008324 <_vfiprintf_r+0x258>)
 8008300:	a904      	add	r1, sp, #16
 8008302:	4630      	mov	r0, r6
 8008304:	f7fd ff9c 	bl	8006240 <_printf_i>
 8008308:	e7e4      	b.n	80082d4 <_vfiprintf_r+0x208>
 800830a:	bf00      	nop
 800830c:	080092c4 	.word	0x080092c4
 8008310:	080092e4 	.word	0x080092e4
 8008314:	080092a4 	.word	0x080092a4
 8008318:	08009154 	.word	0x08009154
 800831c:	0800915e 	.word	0x0800915e
 8008320:	08005d29 	.word	0x08005d29
 8008324:	080080a9 	.word	0x080080a9
 8008328:	0800915a 	.word	0x0800915a

0800832c <__swbuf_r>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	460e      	mov	r6, r1
 8008330:	4614      	mov	r4, r2
 8008332:	4605      	mov	r5, r0
 8008334:	b118      	cbz	r0, 800833e <__swbuf_r+0x12>
 8008336:	6983      	ldr	r3, [r0, #24]
 8008338:	b90b      	cbnz	r3, 800833e <__swbuf_r+0x12>
 800833a:	f7ff fd91 	bl	8007e60 <__sinit>
 800833e:	4b21      	ldr	r3, [pc, #132]	; (80083c4 <__swbuf_r+0x98>)
 8008340:	429c      	cmp	r4, r3
 8008342:	d12b      	bne.n	800839c <__swbuf_r+0x70>
 8008344:	686c      	ldr	r4, [r5, #4]
 8008346:	69a3      	ldr	r3, [r4, #24]
 8008348:	60a3      	str	r3, [r4, #8]
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	071a      	lsls	r2, r3, #28
 800834e:	d52f      	bpl.n	80083b0 <__swbuf_r+0x84>
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	b36b      	cbz	r3, 80083b0 <__swbuf_r+0x84>
 8008354:	6923      	ldr	r3, [r4, #16]
 8008356:	6820      	ldr	r0, [r4, #0]
 8008358:	1ac0      	subs	r0, r0, r3
 800835a:	6963      	ldr	r3, [r4, #20]
 800835c:	b2f6      	uxtb	r6, r6
 800835e:	4283      	cmp	r3, r0
 8008360:	4637      	mov	r7, r6
 8008362:	dc04      	bgt.n	800836e <__swbuf_r+0x42>
 8008364:	4621      	mov	r1, r4
 8008366:	4628      	mov	r0, r5
 8008368:	f7ff fce6 	bl	8007d38 <_fflush_r>
 800836c:	bb30      	cbnz	r0, 80083bc <__swbuf_r+0x90>
 800836e:	68a3      	ldr	r3, [r4, #8]
 8008370:	3b01      	subs	r3, #1
 8008372:	60a3      	str	r3, [r4, #8]
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	6022      	str	r2, [r4, #0]
 800837a:	701e      	strb	r6, [r3, #0]
 800837c:	6963      	ldr	r3, [r4, #20]
 800837e:	3001      	adds	r0, #1
 8008380:	4283      	cmp	r3, r0
 8008382:	d004      	beq.n	800838e <__swbuf_r+0x62>
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	07db      	lsls	r3, r3, #31
 8008388:	d506      	bpl.n	8008398 <__swbuf_r+0x6c>
 800838a:	2e0a      	cmp	r6, #10
 800838c:	d104      	bne.n	8008398 <__swbuf_r+0x6c>
 800838e:	4621      	mov	r1, r4
 8008390:	4628      	mov	r0, r5
 8008392:	f7ff fcd1 	bl	8007d38 <_fflush_r>
 8008396:	b988      	cbnz	r0, 80083bc <__swbuf_r+0x90>
 8008398:	4638      	mov	r0, r7
 800839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800839c:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <__swbuf_r+0x9c>)
 800839e:	429c      	cmp	r4, r3
 80083a0:	d101      	bne.n	80083a6 <__swbuf_r+0x7a>
 80083a2:	68ac      	ldr	r4, [r5, #8]
 80083a4:	e7cf      	b.n	8008346 <__swbuf_r+0x1a>
 80083a6:	4b09      	ldr	r3, [pc, #36]	; (80083cc <__swbuf_r+0xa0>)
 80083a8:	429c      	cmp	r4, r3
 80083aa:	bf08      	it	eq
 80083ac:	68ec      	ldreq	r4, [r5, #12]
 80083ae:	e7ca      	b.n	8008346 <__swbuf_r+0x1a>
 80083b0:	4621      	mov	r1, r4
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 f81a 	bl	80083ec <__swsetup_r>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d0cb      	beq.n	8008354 <__swbuf_r+0x28>
 80083bc:	f04f 37ff 	mov.w	r7, #4294967295
 80083c0:	e7ea      	b.n	8008398 <__swbuf_r+0x6c>
 80083c2:	bf00      	nop
 80083c4:	080092c4 	.word	0x080092c4
 80083c8:	080092e4 	.word	0x080092e4
 80083cc:	080092a4 	.word	0x080092a4

080083d0 <__ascii_wctomb>:
 80083d0:	b149      	cbz	r1, 80083e6 <__ascii_wctomb+0x16>
 80083d2:	2aff      	cmp	r2, #255	; 0xff
 80083d4:	bf85      	ittet	hi
 80083d6:	238a      	movhi	r3, #138	; 0x8a
 80083d8:	6003      	strhi	r3, [r0, #0]
 80083da:	700a      	strbls	r2, [r1, #0]
 80083dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80083e0:	bf98      	it	ls
 80083e2:	2001      	movls	r0, #1
 80083e4:	4770      	bx	lr
 80083e6:	4608      	mov	r0, r1
 80083e8:	4770      	bx	lr
	...

080083ec <__swsetup_r>:
 80083ec:	4b32      	ldr	r3, [pc, #200]	; (80084b8 <__swsetup_r+0xcc>)
 80083ee:	b570      	push	{r4, r5, r6, lr}
 80083f0:	681d      	ldr	r5, [r3, #0]
 80083f2:	4606      	mov	r6, r0
 80083f4:	460c      	mov	r4, r1
 80083f6:	b125      	cbz	r5, 8008402 <__swsetup_r+0x16>
 80083f8:	69ab      	ldr	r3, [r5, #24]
 80083fa:	b913      	cbnz	r3, 8008402 <__swsetup_r+0x16>
 80083fc:	4628      	mov	r0, r5
 80083fe:	f7ff fd2f 	bl	8007e60 <__sinit>
 8008402:	4b2e      	ldr	r3, [pc, #184]	; (80084bc <__swsetup_r+0xd0>)
 8008404:	429c      	cmp	r4, r3
 8008406:	d10f      	bne.n	8008428 <__swsetup_r+0x3c>
 8008408:	686c      	ldr	r4, [r5, #4]
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008410:	0719      	lsls	r1, r3, #28
 8008412:	d42c      	bmi.n	800846e <__swsetup_r+0x82>
 8008414:	06dd      	lsls	r5, r3, #27
 8008416:	d411      	bmi.n	800843c <__swsetup_r+0x50>
 8008418:	2309      	movs	r3, #9
 800841a:	6033      	str	r3, [r6, #0]
 800841c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	f04f 30ff 	mov.w	r0, #4294967295
 8008426:	e03e      	b.n	80084a6 <__swsetup_r+0xba>
 8008428:	4b25      	ldr	r3, [pc, #148]	; (80084c0 <__swsetup_r+0xd4>)
 800842a:	429c      	cmp	r4, r3
 800842c:	d101      	bne.n	8008432 <__swsetup_r+0x46>
 800842e:	68ac      	ldr	r4, [r5, #8]
 8008430:	e7eb      	b.n	800840a <__swsetup_r+0x1e>
 8008432:	4b24      	ldr	r3, [pc, #144]	; (80084c4 <__swsetup_r+0xd8>)
 8008434:	429c      	cmp	r4, r3
 8008436:	bf08      	it	eq
 8008438:	68ec      	ldreq	r4, [r5, #12]
 800843a:	e7e6      	b.n	800840a <__swsetup_r+0x1e>
 800843c:	0758      	lsls	r0, r3, #29
 800843e:	d512      	bpl.n	8008466 <__swsetup_r+0x7a>
 8008440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008442:	b141      	cbz	r1, 8008456 <__swsetup_r+0x6a>
 8008444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008448:	4299      	cmp	r1, r3
 800844a:	d002      	beq.n	8008452 <__swsetup_r+0x66>
 800844c:	4630      	mov	r0, r6
 800844e:	f7fd fafb 	bl	8005a48 <_free_r>
 8008452:	2300      	movs	r3, #0
 8008454:	6363      	str	r3, [r4, #52]	; 0x34
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800845c:	81a3      	strh	r3, [r4, #12]
 800845e:	2300      	movs	r3, #0
 8008460:	6063      	str	r3, [r4, #4]
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	f043 0308 	orr.w	r3, r3, #8
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	b94b      	cbnz	r3, 8008486 <__swsetup_r+0x9a>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800847c:	d003      	beq.n	8008486 <__swsetup_r+0x9a>
 800847e:	4621      	mov	r1, r4
 8008480:	4630      	mov	r0, r6
 8008482:	f000 f84d 	bl	8008520 <__smakebuf_r>
 8008486:	89a0      	ldrh	r0, [r4, #12]
 8008488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800848c:	f010 0301 	ands.w	r3, r0, #1
 8008490:	d00a      	beq.n	80084a8 <__swsetup_r+0xbc>
 8008492:	2300      	movs	r3, #0
 8008494:	60a3      	str	r3, [r4, #8]
 8008496:	6963      	ldr	r3, [r4, #20]
 8008498:	425b      	negs	r3, r3
 800849a:	61a3      	str	r3, [r4, #24]
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	b943      	cbnz	r3, 80084b2 <__swsetup_r+0xc6>
 80084a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084a4:	d1ba      	bne.n	800841c <__swsetup_r+0x30>
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	0781      	lsls	r1, r0, #30
 80084aa:	bf58      	it	pl
 80084ac:	6963      	ldrpl	r3, [r4, #20]
 80084ae:	60a3      	str	r3, [r4, #8]
 80084b0:	e7f4      	b.n	800849c <__swsetup_r+0xb0>
 80084b2:	2000      	movs	r0, #0
 80084b4:	e7f7      	b.n	80084a6 <__swsetup_r+0xba>
 80084b6:	bf00      	nop
 80084b8:	20000010 	.word	0x20000010
 80084bc:	080092c4 	.word	0x080092c4
 80084c0:	080092e4 	.word	0x080092e4
 80084c4:	080092a4 	.word	0x080092a4

080084c8 <abort>:
 80084c8:	b508      	push	{r3, lr}
 80084ca:	2006      	movs	r0, #6
 80084cc:	f000 f898 	bl	8008600 <raise>
 80084d0:	2001      	movs	r0, #1
 80084d2:	f000 f921 	bl	8008718 <_exit>

080084d6 <__swhatbuf_r>:
 80084d6:	b570      	push	{r4, r5, r6, lr}
 80084d8:	460e      	mov	r6, r1
 80084da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084de:	2900      	cmp	r1, #0
 80084e0:	b096      	sub	sp, #88	; 0x58
 80084e2:	4614      	mov	r4, r2
 80084e4:	461d      	mov	r5, r3
 80084e6:	da08      	bge.n	80084fa <__swhatbuf_r+0x24>
 80084e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	602a      	str	r2, [r5, #0]
 80084f0:	061a      	lsls	r2, r3, #24
 80084f2:	d410      	bmi.n	8008516 <__swhatbuf_r+0x40>
 80084f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084f8:	e00e      	b.n	8008518 <__swhatbuf_r+0x42>
 80084fa:	466a      	mov	r2, sp
 80084fc:	f000 f89c 	bl	8008638 <_fstat_r>
 8008500:	2800      	cmp	r0, #0
 8008502:	dbf1      	blt.n	80084e8 <__swhatbuf_r+0x12>
 8008504:	9a01      	ldr	r2, [sp, #4]
 8008506:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800850a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800850e:	425a      	negs	r2, r3
 8008510:	415a      	adcs	r2, r3
 8008512:	602a      	str	r2, [r5, #0]
 8008514:	e7ee      	b.n	80084f4 <__swhatbuf_r+0x1e>
 8008516:	2340      	movs	r3, #64	; 0x40
 8008518:	2000      	movs	r0, #0
 800851a:	6023      	str	r3, [r4, #0]
 800851c:	b016      	add	sp, #88	; 0x58
 800851e:	bd70      	pop	{r4, r5, r6, pc}

08008520 <__smakebuf_r>:
 8008520:	898b      	ldrh	r3, [r1, #12]
 8008522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008524:	079d      	lsls	r5, r3, #30
 8008526:	4606      	mov	r6, r0
 8008528:	460c      	mov	r4, r1
 800852a:	d507      	bpl.n	800853c <__smakebuf_r+0x1c>
 800852c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	6123      	str	r3, [r4, #16]
 8008534:	2301      	movs	r3, #1
 8008536:	6163      	str	r3, [r4, #20]
 8008538:	b002      	add	sp, #8
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	ab01      	add	r3, sp, #4
 800853e:	466a      	mov	r2, sp
 8008540:	f7ff ffc9 	bl	80084d6 <__swhatbuf_r>
 8008544:	9900      	ldr	r1, [sp, #0]
 8008546:	4605      	mov	r5, r0
 8008548:	4630      	mov	r0, r6
 800854a:	f7fd fae9 	bl	8005b20 <_malloc_r>
 800854e:	b948      	cbnz	r0, 8008564 <__smakebuf_r+0x44>
 8008550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008554:	059a      	lsls	r2, r3, #22
 8008556:	d4ef      	bmi.n	8008538 <__smakebuf_r+0x18>
 8008558:	f023 0303 	bic.w	r3, r3, #3
 800855c:	f043 0302 	orr.w	r3, r3, #2
 8008560:	81a3      	strh	r3, [r4, #12]
 8008562:	e7e3      	b.n	800852c <__smakebuf_r+0xc>
 8008564:	4b0d      	ldr	r3, [pc, #52]	; (800859c <__smakebuf_r+0x7c>)
 8008566:	62b3      	str	r3, [r6, #40]	; 0x28
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	6020      	str	r0, [r4, #0]
 800856c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008570:	81a3      	strh	r3, [r4, #12]
 8008572:	9b00      	ldr	r3, [sp, #0]
 8008574:	6163      	str	r3, [r4, #20]
 8008576:	9b01      	ldr	r3, [sp, #4]
 8008578:	6120      	str	r0, [r4, #16]
 800857a:	b15b      	cbz	r3, 8008594 <__smakebuf_r+0x74>
 800857c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008580:	4630      	mov	r0, r6
 8008582:	f000 f86b 	bl	800865c <_isatty_r>
 8008586:	b128      	cbz	r0, 8008594 <__smakebuf_r+0x74>
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	f043 0301 	orr.w	r3, r3, #1
 8008592:	81a3      	strh	r3, [r4, #12]
 8008594:	89a0      	ldrh	r0, [r4, #12]
 8008596:	4305      	orrs	r5, r0
 8008598:	81a5      	strh	r5, [r4, #12]
 800859a:	e7cd      	b.n	8008538 <__smakebuf_r+0x18>
 800859c:	08007df9 	.word	0x08007df9

080085a0 <_malloc_usable_size_r>:
 80085a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a4:	1f18      	subs	r0, r3, #4
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	bfbc      	itt	lt
 80085aa:	580b      	ldrlt	r3, [r1, r0]
 80085ac:	18c0      	addlt	r0, r0, r3
 80085ae:	4770      	bx	lr

080085b0 <_raise_r>:
 80085b0:	291f      	cmp	r1, #31
 80085b2:	b538      	push	{r3, r4, r5, lr}
 80085b4:	4604      	mov	r4, r0
 80085b6:	460d      	mov	r5, r1
 80085b8:	d904      	bls.n	80085c4 <_raise_r+0x14>
 80085ba:	2316      	movs	r3, #22
 80085bc:	6003      	str	r3, [r0, #0]
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085c6:	b112      	cbz	r2, 80085ce <_raise_r+0x1e>
 80085c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085cc:	b94b      	cbnz	r3, 80085e2 <_raise_r+0x32>
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 f830 	bl	8008634 <_getpid_r>
 80085d4:	462a      	mov	r2, r5
 80085d6:	4601      	mov	r1, r0
 80085d8:	4620      	mov	r0, r4
 80085da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085de:	f000 b817 	b.w	8008610 <_kill_r>
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d00a      	beq.n	80085fc <_raise_r+0x4c>
 80085e6:	1c59      	adds	r1, r3, #1
 80085e8:	d103      	bne.n	80085f2 <_raise_r+0x42>
 80085ea:	2316      	movs	r3, #22
 80085ec:	6003      	str	r3, [r0, #0]
 80085ee:	2001      	movs	r0, #1
 80085f0:	e7e7      	b.n	80085c2 <_raise_r+0x12>
 80085f2:	2400      	movs	r4, #0
 80085f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085f8:	4628      	mov	r0, r5
 80085fa:	4798      	blx	r3
 80085fc:	2000      	movs	r0, #0
 80085fe:	e7e0      	b.n	80085c2 <_raise_r+0x12>

08008600 <raise>:
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <raise+0xc>)
 8008602:	4601      	mov	r1, r0
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f7ff bfd3 	b.w	80085b0 <_raise_r>
 800860a:	bf00      	nop
 800860c:	20000010 	.word	0x20000010

08008610 <_kill_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4d07      	ldr	r5, [pc, #28]	; (8008630 <_kill_r+0x20>)
 8008614:	2300      	movs	r3, #0
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	602b      	str	r3, [r5, #0]
 800861e:	f000 f84d 	bl	80086bc <_kill>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	d102      	bne.n	800862c <_kill_r+0x1c>
 8008626:	682b      	ldr	r3, [r5, #0]
 8008628:	b103      	cbz	r3, 800862c <_kill_r+0x1c>
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	bd38      	pop	{r3, r4, r5, pc}
 800862e:	bf00      	nop
 8008630:	20004a48 	.word	0x20004a48

08008634 <_getpid_r>:
 8008634:	f000 b832 	b.w	800869c <_getpid>

08008638 <_fstat_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4d07      	ldr	r5, [pc, #28]	; (8008658 <_fstat_r+0x20>)
 800863c:	2300      	movs	r3, #0
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	4611      	mov	r1, r2
 8008644:	602b      	str	r3, [r5, #0]
 8008646:	f000 f821 	bl	800868c <_fstat>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	d102      	bne.n	8008654 <_fstat_r+0x1c>
 800864e:	682b      	ldr	r3, [r5, #0]
 8008650:	b103      	cbz	r3, 8008654 <_fstat_r+0x1c>
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	bd38      	pop	{r3, r4, r5, pc}
 8008656:	bf00      	nop
 8008658:	20004a48 	.word	0x20004a48

0800865c <_isatty_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4d06      	ldr	r5, [pc, #24]	; (8008678 <_isatty_r+0x1c>)
 8008660:	2300      	movs	r3, #0
 8008662:	4604      	mov	r4, r0
 8008664:	4608      	mov	r0, r1
 8008666:	602b      	str	r3, [r5, #0]
 8008668:	f000 f820 	bl	80086ac <_isatty>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	d102      	bne.n	8008676 <_isatty_r+0x1a>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	b103      	cbz	r3, 8008676 <_isatty_r+0x1a>
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	bd38      	pop	{r3, r4, r5, pc}
 8008678:	20004a48 	.word	0x20004a48

0800867c <_close>:
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <_close+0xc>)
 800867e:	2258      	movs	r2, #88	; 0x58
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	f04f 30ff 	mov.w	r0, #4294967295
 8008686:	4770      	bx	lr
 8008688:	20004a48 	.word	0x20004a48

0800868c <_fstat>:
 800868c:	4b02      	ldr	r3, [pc, #8]	; (8008698 <_fstat+0xc>)
 800868e:	2258      	movs	r2, #88	; 0x58
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	f04f 30ff 	mov.w	r0, #4294967295
 8008696:	4770      	bx	lr
 8008698:	20004a48 	.word	0x20004a48

0800869c <_getpid>:
 800869c:	4b02      	ldr	r3, [pc, #8]	; (80086a8 <_getpid+0xc>)
 800869e:	2258      	movs	r2, #88	; 0x58
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f04f 30ff 	mov.w	r0, #4294967295
 80086a6:	4770      	bx	lr
 80086a8:	20004a48 	.word	0x20004a48

080086ac <_isatty>:
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <_isatty+0xc>)
 80086ae:	2258      	movs	r2, #88	; 0x58
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	2000      	movs	r0, #0
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20004a48 	.word	0x20004a48

080086bc <_kill>:
 80086bc:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <_kill+0xc>)
 80086be:	2258      	movs	r2, #88	; 0x58
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	f04f 30ff 	mov.w	r0, #4294967295
 80086c6:	4770      	bx	lr
 80086c8:	20004a48 	.word	0x20004a48

080086cc <_lseek>:
 80086cc:	4b02      	ldr	r3, [pc, #8]	; (80086d8 <_lseek+0xc>)
 80086ce:	2258      	movs	r2, #88	; 0x58
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295
 80086d6:	4770      	bx	lr
 80086d8:	20004a48 	.word	0x20004a48

080086dc <_read>:
 80086dc:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <_read+0xc>)
 80086de:	2258      	movs	r2, #88	; 0x58
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295
 80086e6:	4770      	bx	lr
 80086e8:	20004a48 	.word	0x20004a48

080086ec <_sbrk>:
 80086ec:	4a04      	ldr	r2, [pc, #16]	; (8008700 <_sbrk+0x14>)
 80086ee:	6811      	ldr	r1, [r2, #0]
 80086f0:	4603      	mov	r3, r0
 80086f2:	b909      	cbnz	r1, 80086f8 <_sbrk+0xc>
 80086f4:	4903      	ldr	r1, [pc, #12]	; (8008704 <_sbrk+0x18>)
 80086f6:	6011      	str	r1, [r2, #0]
 80086f8:	6810      	ldr	r0, [r2, #0]
 80086fa:	4403      	add	r3, r0
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	4770      	bx	lr
 8008700:	20004a50 	.word	0x20004a50
 8008704:	20004a54 	.word	0x20004a54

08008708 <_write>:
 8008708:	4b02      	ldr	r3, [pc, #8]	; (8008714 <_write+0xc>)
 800870a:	2258      	movs	r2, #88	; 0x58
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	4770      	bx	lr
 8008714:	20004a48 	.word	0x20004a48

08008718 <_exit>:
 8008718:	e7fe      	b.n	8008718 <_exit>
	...

0800871c <_init>:
 800871c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871e:	bf00      	nop
 8008720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008722:	bc08      	pop	{r3}
 8008724:	469e      	mov	lr, r3
 8008726:	4770      	bx	lr

08008728 <_fini>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	bf00      	nop
 800872c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872e:	bc08      	pop	{r3}
 8008730:	469e      	mov	lr, r3
 8008732:	4770      	bx	lr
