
13A_InfraRedRemoteIn_PWM_In.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083f4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  080085f8  080085f8  000185f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009190  08009190  00019190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009194  08009194  00019194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  08009198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c74  200001e0  08009378  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20000e54  08009378  00020e54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024d54  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000459a  00000000  00000000  00044f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000140f2  00000000  00000000  000494fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001648  00000000  00000000  0005d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001608  00000000  00000000  0005ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a2b9  00000000  00000000  00060240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021fa7  00000000  00000000  0008a4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fa023  00000000  00000000  000ac4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001a64c3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004fa0  00000000  00000000  001a6514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001ab4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001ab580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080085dc 	.word	0x080085dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080085dc 	.word	0x080085dc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b510      	push	{r4, lr}
 80005f6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <HAL_InitTick+0x40>)
 80005fa:	7818      	ldrb	r0, [r3, #0]
 80005fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000600:	fbb3 f3f0 	udiv	r3, r3, r0
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <HAL_InitTick+0x44>)
 8000606:	6810      	ldr	r0, [r2, #0]
 8000608:	fbb0 f0f3 	udiv	r0, r0, r3
 800060c:	f000 f8a0 	bl	8000750 <HAL_SYSTICK_Config>
 8000610:	b968      	cbnz	r0, 800062e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	2c0f      	cmp	r4, #15
 8000614:	d901      	bls.n	800061a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000616:	2001      	movs	r0, #1
 8000618:	e00a      	b.n	8000630 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800061a:	2200      	movs	r2, #0
 800061c:	4621      	mov	r1, r4
 800061e:	f04f 30ff 	mov.w	r0, #4294967295
 8000622:	f000 f851 	bl	80006c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_InitTick+0x48>)
 8000628:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2000      	movs	r0, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800062e:	2001      	movs	r0, #1
}
 8000630:	bd10      	pop	{r4, pc}
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000
 8000638:	2000000c 	.word	0x2000000c
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_Init>:
{
 8000640:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000642:	2003      	movs	r0, #3
 8000644:	f000 f82e 	bl	80006a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ffd3 	bl	80005f4 <HAL_InitTick>
  HAL_MspInit();
 800064e:	f004 fe9d 	bl	800538c <HAL_MspInit>
}
 8000652:	2000      	movs	r0, #0
 8000654:	bd08      	pop	{r3, pc}
	...

08000658 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <HAL_IncTick+0x10>)
 800065a:	6811      	ldr	r1, [r2, #0]
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_IncTick+0x14>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	440b      	add	r3, r1
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	200001fc 	.word	0x200001fc
 800066c:	20000000 	.word	0x20000000

08000670 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <HAL_GetTick+0x8>)
 8000672:	6818      	ldr	r0, [r3, #0]
}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	200001fc 	.word	0x200001fc

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b538      	push	{r3, r4, r5, lr}
 800067e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000680:	f7ff fff6 	bl	8000670 <HAL_GetTick>
 8000684:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	f1b4 3fff 	cmp.w	r4, #4294967295
 800068a:	d002      	beq.n	8000692 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <HAL_Delay+0x24>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	f7ff ffed 	bl	8000670 <HAL_GetTick>
 8000696:	1b40      	subs	r0, r0, r5
 8000698:	42a0      	cmp	r0, r4
 800069a:	d3fa      	bcc.n	8000692 <HAL_Delay+0x16>
  {
  }
}
 800069c:	bd38      	pop	{r3, r4, r5, pc}
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000

080006a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	4906      	ldr	r1, [pc, #24]	; (80006c0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80006a6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006ac:	041b      	lsls	r3, r3, #16
 80006ae:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b0:	0200      	lsls	r0, r0, #8
 80006b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80006b8:	4a02      	ldr	r2, [pc, #8]	; (80006c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006ba:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80006bc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	05fa0000 	.word	0x05fa0000

080006c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <HAL_NVIC_SetPriority+0x60>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d2:	f1c3 0c07 	rsb	ip, r3, #7
 80006d6:	f1bc 0f04 	cmp.w	ip, #4
 80006da:	bf28      	it	cs
 80006dc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e0:	f103 0e04 	add.w	lr, r3, #4
 80006e4:	f1be 0f06 	cmp.w	lr, #6
 80006e8:	d914      	bls.n	8000714 <HAL_NVIC_SetPriority+0x4c>
 80006ea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 3eff 	mov.w	lr, #4294967295
 80006f0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80006f4:	ea21 010c 	bic.w	r1, r1, ip
 80006f8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fa:	fa0e f303 	lsl.w	r3, lr, r3
 80006fe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000702:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000704:	2800      	cmp	r0, #0
 8000706:	db07      	blt.n	8000718 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	0109      	lsls	r1, r1, #4
 800070a:	b2c9      	uxtb	r1, r1
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <HAL_NVIC_SetPriority+0x64>)
 800070e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000710:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000714:	2300      	movs	r3, #0
 8000716:	e7e9      	b.n	80006ec <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000718:	f000 000f 	and.w	r0, r0, #15
 800071c:	0109      	lsls	r1, r1, #4
 800071e:	b2c9      	uxtb	r1, r1
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <HAL_NVIC_SetPriority+0x68>)
 8000722:	5419      	strb	r1, [r3, r0]
 8000724:	e7f4      	b.n	8000710 <HAL_NVIC_SetPriority+0x48>
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00
 800072c:	e000e400 	.word	0xe000e400
 8000730:	e000ed14 	.word	0xe000ed14

08000734 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000734:	2800      	cmp	r0, #0
 8000736:	db07      	blt.n	8000748 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000738:	f000 021f 	and.w	r2, r0, #31
 800073c:	0940      	lsrs	r0, r0, #5
 800073e:	2301      	movs	r3, #1
 8000740:	4093      	lsls	r3, r2
 8000742:	4a02      	ldr	r2, [pc, #8]	; (800074c <HAL_NVIC_EnableIRQ+0x18>)
 8000744:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100

08000750 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	3801      	subs	r0, #1
 8000752:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000756:	d20b      	bcs.n	8000770 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000758:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800075c:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <HAL_SYSTICK_Config+0x24>)
 8000760:	21f0      	movs	r1, #240	; 0xf0
 8000762:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000766:	2000      	movs	r0, #0
 8000768:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	2207      	movs	r2, #7
 800076c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000770:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000778:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800077a:	6805      	ldr	r5, [r0, #0]
 800077c:	682c      	ldr	r4, [r5, #0]
 800077e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000782:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000784:	6804      	ldr	r4, [r0, #0]
 8000786:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000788:	6883      	ldr	r3, [r0, #8]
 800078a:	2b40      	cmp	r3, #64	; 0x40
 800078c:	d005      	beq.n	800079a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800078e:	6803      	ldr	r3, [r0, #0]
 8000790:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000792:	6803      	ldr	r3, [r0, #0]
 8000794:	60da      	str	r2, [r3, #12]
  }
}
 8000796:	bc30      	pop	{r4, r5}
 8000798:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800079a:	6803      	ldr	r3, [r0, #0]
 800079c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800079e:	6803      	ldr	r3, [r0, #0]
 80007a0:	60d9      	str	r1, [r3, #12]
 80007a2:	e7f8      	b.n	8000796 <DMA_SetConfig+0x1e>

080007a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80007a4:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80007a6:	6801      	ldr	r1, [r0, #0]
 80007a8:	b2ca      	uxtb	r2, r1
 80007aa:	3a10      	subs	r2, #16
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <DMA_CalcBaseAndBitshift+0x34>)
 80007ae:	fba3 4302 	umull	r4, r3, r3, r2
 80007b2:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007b4:	4c09      	ldr	r4, [pc, #36]	; (80007dc <DMA_CalcBaseAndBitshift+0x38>)
 80007b6:	5ce3      	ldrb	r3, [r4, r3]
 80007b8:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80007ba:	2a5f      	cmp	r2, #95	; 0x5f
 80007bc:	d907      	bls.n	80007ce <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80007c0:	400b      	ands	r3, r1
 80007c2:	3304      	adds	r3, #4
 80007c4:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80007c6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80007c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007cc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80007d0:	400b      	ands	r3, r1
 80007d2:	6583      	str	r3, [r0, #88]	; 0x58
 80007d4:	e7f7      	b.n	80007c6 <DMA_CalcBaseAndBitshift+0x22>
 80007d6:	bf00      	nop
 80007d8:	aaaaaaab 	.word	0xaaaaaaab
 80007dc:	080085f8 	.word	0x080085f8
 80007e0:	fffffc00 	.word	0xfffffc00

080007e4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80007e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007e6:	6982      	ldr	r2, [r0, #24]
 80007e8:	b992      	cbnz	r2, 8000810 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d00a      	beq.n	8000804 <DMA_CheckFifoParam+0x20>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d002      	beq.n	80007f8 <DMA_CheckFifoParam+0x14>
 80007f2:	b10b      	cbz	r3, 80007f8 <DMA_CheckFifoParam+0x14>
 80007f4:	2000      	movs	r0, #0
 80007f6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80007fe:	d128      	bne.n	8000852 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000800:	2000      	movs	r0, #0
 8000802:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000804:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800080a:	d024      	beq.n	8000856 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800080c:	2000      	movs	r0, #0
 800080e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000810:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000814:	d009      	beq.n	800082a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000816:	2b02      	cmp	r3, #2
 8000818:	d925      	bls.n	8000866 <DMA_CheckFifoParam+0x82>
 800081a:	2b03      	cmp	r3, #3
 800081c:	d125      	bne.n	800086a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800081e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000820:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000824:	d123      	bne.n	800086e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000826:	2000      	movs	r0, #0
 8000828:	4770      	bx	lr
    switch (tmp)
 800082a:	2b03      	cmp	r3, #3
 800082c:	d803      	bhi.n	8000836 <DMA_CheckFifoParam+0x52>
 800082e:	e8df f003 	tbb	[pc, r3]
 8000832:	0414      	.short	0x0414
 8000834:	0a14      	.short	0x0a14
 8000836:	2000      	movs	r0, #0
 8000838:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800083a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800083c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000840:	d10d      	bne.n	800085e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000842:	2000      	movs	r0, #0
 8000844:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000846:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000848:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800084c:	d009      	beq.n	8000862 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800084e:	2000      	movs	r0, #0
 8000850:	4770      	bx	lr
        status = HAL_ERROR;
 8000852:	2001      	movs	r0, #1
 8000854:	4770      	bx	lr
        status = HAL_ERROR;
 8000856:	2001      	movs	r0, #1
 8000858:	4770      	bx	lr
      status = HAL_ERROR;
 800085a:	2001      	movs	r0, #1
 800085c:	4770      	bx	lr
        status = HAL_ERROR;
 800085e:	2001      	movs	r0, #1
 8000860:	4770      	bx	lr
        status = HAL_ERROR;
 8000862:	2001      	movs	r0, #1
 8000864:	4770      	bx	lr
      status = HAL_ERROR;
 8000866:	2001      	movs	r0, #1
 8000868:	4770      	bx	lr
    switch (tmp)
 800086a:	2000      	movs	r0, #0
 800086c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800086e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000870:	4770      	bx	lr
	...

08000874 <HAL_DMA_Init>:
{
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff fefa 	bl	8000670 <HAL_GetTick>
  if(hdma == NULL)
 800087c:	2c00      	cmp	r4, #0
 800087e:	d05b      	beq.n	8000938 <HAL_DMA_Init+0xc4>
 8000880:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8000882:	2300      	movs	r3, #0
 8000884:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000888:	2302      	movs	r3, #2
 800088a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800088e:	6822      	ldr	r2, [r4, #0]
 8000890:	6813      	ldr	r3, [r2, #0]
 8000892:	f023 0301 	bic.w	r3, r3, #1
 8000896:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	f012 0f01 	tst.w	r2, #1
 80008a0:	d00a      	beq.n	80008b8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008a2:	f7ff fee5 	bl	8000670 <HAL_GetTick>
 80008a6:	1b43      	subs	r3, r0, r5
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	d9f5      	bls.n	8000898 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008ac:	2320      	movs	r3, #32
 80008ae:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008b0:	2003      	movs	r0, #3
 80008b2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80008b8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008ba:	4820      	ldr	r0, [pc, #128]	; (800093c <HAL_DMA_Init+0xc8>)
 80008bc:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008be:	6861      	ldr	r1, [r4, #4]
 80008c0:	68a2      	ldr	r2, [r4, #8]
 80008c2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008c6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c8:	6921      	ldr	r1, [r4, #16]
 80008ca:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008cc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ce:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d0:	69a1      	ldr	r1, [r4, #24]
 80008d2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d8:	6a21      	ldr	r1, [r4, #32]
 80008da:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008dc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80008e0:	2904      	cmp	r1, #4
 80008e2:	d01e      	beq.n	8000922 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80008e4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80008e6:	6826      	ldr	r6, [r4, #0]
 80008e8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008ea:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80008ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008f0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d107      	bne.n	8000906 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80008f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008f8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008fc:	b11b      	cbz	r3, 8000906 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008fe:	4620      	mov	r0, r4
 8000900:	f7ff ff70 	bl	80007e4 <DMA_CheckFifoParam>
 8000904:	b990      	cbnz	r0, 800092c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000906:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000908:	4620      	mov	r0, r4
 800090a:	f7ff ff4b 	bl	80007a4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800090e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000910:	233f      	movs	r3, #63	; 0x3f
 8000912:	4093      	lsls	r3, r2
 8000914:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000916:	2000      	movs	r0, #0
 8000918:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800091a:	2301      	movs	r3, #1
 800091c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000920:	e7c9      	b.n	80008b6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000922:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000924:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000926:	4301      	orrs	r1, r0
 8000928:	430a      	orrs	r2, r1
 800092a:	e7db      	b.n	80008e4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000930:	2001      	movs	r0, #1
 8000932:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000936:	e7be      	b.n	80008b6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000938:	2001      	movs	r0, #1
 800093a:	e7bc      	b.n	80008b6 <HAL_DMA_Init+0x42>
 800093c:	e010803f 	.word	0xe010803f

08000940 <HAL_DMA_Start_IT>:
{
 8000940:	b538      	push	{r3, r4, r5, lr}
 8000942:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000944:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000946:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800094a:	2801      	cmp	r0, #1
 800094c:	d030      	beq.n	80009b0 <HAL_DMA_Start_IT+0x70>
 800094e:	2001      	movs	r0, #1
 8000950:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000954:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000958:	b2c0      	uxtb	r0, r0
 800095a:	2801      	cmp	r0, #1
 800095c:	d004      	beq.n	8000968 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800095e:	2300      	movs	r3, #0
 8000960:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8000964:	2002      	movs	r0, #2
}
 8000966:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000968:	2002      	movs	r0, #2
 800096a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800096e:	2000      	movs	r0, #0
 8000970:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000972:	4620      	mov	r0, r4
 8000974:	f7ff ff00 	bl	8000778 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000978:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800097a:	233f      	movs	r3, #63	; 0x3f
 800097c:	4093      	lsls	r3, r2
 800097e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000980:	6822      	ldr	r2, [r4, #0]
 8000982:	6813      	ldr	r3, [r2, #0]
 8000984:	f043 0316 	orr.w	r3, r3, #22
 8000988:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	6953      	ldr	r3, [r2, #20]
 800098e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000992:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000996:	b123      	cbz	r3, 80009a2 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000998:	6822      	ldr	r2, [r4, #0]
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80009a2:	6822      	ldr	r2, [r4, #0]
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009ac:	2000      	movs	r0, #0
 80009ae:	e7da      	b.n	8000966 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80009b0:	2002      	movs	r0, #2
 80009b2:	e7d8      	b.n	8000966 <HAL_DMA_Start_IT+0x26>

080009b4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009b4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d003      	beq.n	80009c6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
 80009c4:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80009c6:	2305      	movs	r3, #5
 80009c8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80009cc:	6802      	ldr	r2, [r0, #0]
 80009ce:	6813      	ldr	r3, [r2, #0]
 80009d0:	f023 0301 	bic.w	r3, r3, #1
 80009d4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80009d6:	2000      	movs	r0, #0
}
 80009d8:	4770      	bx	lr
	...

080009dc <HAL_DMA_IRQHandler>:
{
 80009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 80009e6:	4b72      	ldr	r3, [pc, #456]	; (8000bb0 <HAL_DMA_IRQHandler+0x1d4>)
 80009e8:	681d      	ldr	r5, [r3, #0]
 80009ea:	4b72      	ldr	r3, [pc, #456]	; (8000bb4 <HAL_DMA_IRQHandler+0x1d8>)
 80009ec:	fba3 3505 	umull	r3, r5, r3, r5
 80009f0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009f2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80009f4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009f6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80009f8:	2308      	movs	r3, #8
 80009fa:	4093      	lsls	r3, r2
 80009fc:	4233      	tst	r3, r6
 80009fe:	d010      	beq.n	8000a22 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a00:	6803      	ldr	r3, [r0, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	f012 0f04 	tst.w	r2, #4
 8000a08:	d00b      	beq.n	8000a22 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	f022 0204 	bic.w	r2, r2, #4
 8000a10:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a12:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a14:	2308      	movs	r3, #8
 8000a16:	4093      	lsls	r3, r2
 8000a18:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a1a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a24:	2301      	movs	r3, #1
 8000a26:	4093      	lsls	r3, r2
 8000a28:	4233      	tst	r3, r6
 8000a2a:	d009      	beq.n	8000a40 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a2c:	6822      	ldr	r2, [r4, #0]
 8000a2e:	6952      	ldr	r2, [r2, #20]
 8000a30:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000a34:	d004      	beq.n	8000a40 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a36:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a42:	2304      	movs	r3, #4
 8000a44:	4093      	lsls	r3, r2
 8000a46:	4233      	tst	r3, r6
 8000a48:	d009      	beq.n	8000a5e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a4a:	6822      	ldr	r2, [r4, #0]
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	f012 0f02 	tst.w	r2, #2
 8000a52:	d004      	beq.n	8000a5e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a54:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a5e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a60:	2310      	movs	r3, #16
 8000a62:	4093      	lsls	r3, r2
 8000a64:	4233      	tst	r3, r6
 8000a66:	d024      	beq.n	8000ab2 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a68:	6822      	ldr	r2, [r4, #0]
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	f012 0f08 	tst.w	r2, #8
 8000a70:	d01f      	beq.n	8000ab2 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a72:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000a7c:	d00d      	beq.n	8000a9a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000a84:	d104      	bne.n	8000a90 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a88:	b19b      	cbz	r3, 8000ab2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	4798      	blx	r3
 8000a8e:	e010      	b.n	8000ab2 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000a90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000a92:	b173      	cbz	r3, 8000ab2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000a94:	4620      	mov	r0, r4
 8000a96:	4798      	blx	r3
 8000a98:	e00b      	b.n	8000ab2 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000aa0:	d103      	bne.n	8000aaa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	f022 0208 	bic.w	r2, r2, #8
 8000aa8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000aac:	b10b      	cbz	r3, 8000ab2 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000aae:	4620      	mov	r0, r4
 8000ab0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ab2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	4233      	tst	r3, r6
 8000aba:	d055      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000abc:	6822      	ldr	r2, [r4, #0]
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	f012 0f10 	tst.w	r2, #16
 8000ac4:	d050      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000ac6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ac8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d00e      	beq.n	8000af0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000ada:	d033      	beq.n	8000b44 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000ae2:	d12a      	bne.n	8000b3a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000ae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d03e      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000aea:	4620      	mov	r0, r4
 8000aec:	4798      	blx	r3
 8000aee:	e03b      	b.n	8000b68 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000af0:	6822      	ldr	r2, [r4, #0]
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	f023 0316 	bic.w	r3, r3, #22
 8000af8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000afa:	6822      	ldr	r2, [r4, #0]
 8000afc:	6953      	ldr	r3, [r2, #20]
 8000afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b02:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b06:	b1a3      	cbz	r3, 8000b32 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b08:	6822      	ldr	r2, [r4, #0]
 8000b0a:	6813      	ldr	r3, [r2, #0]
 8000b0c:	f023 0308 	bic.w	r3, r3, #8
 8000b10:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b12:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b14:	233f      	movs	r3, #63	; 0x3f
 8000b16:	4093      	lsls	r3, r2
 8000b18:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000b20:	2301      	movs	r3, #1
 8000b22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000b26:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d03f      	beq.n	8000bac <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	4798      	blx	r3
        return;
 8000b30:	e03c      	b.n	8000bac <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e7      	bne.n	8000b08 <HAL_DMA_IRQHandler+0x12c>
 8000b38:	e7eb      	b.n	8000b12 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000b3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b3c:	b1a3      	cbz	r3, 8000b68 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000b3e:	4620      	mov	r0, r4
 8000b40:	4798      	blx	r3
 8000b42:	e011      	b.n	8000b68 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000b4a:	d109      	bne.n	8000b60 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	f022 0210 	bic.w	r2, r2, #16
 8000b52:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8000b54:	2300      	movs	r3, #0
 8000b56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000b60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b62:	b10b      	cbz	r3, 8000b68 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000b64:	4620      	mov	r0, r4
 8000b66:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b6a:	b1fb      	cbz	r3, 8000bac <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000b6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b6e:	f013 0f01 	tst.w	r3, #1
 8000b72:	d017      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b74:	2305      	movs	r3, #5
 8000b76:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	6813      	ldr	r3, [r2, #0]
 8000b7e:	f023 0301 	bic.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000b84:	9b01      	ldr	r3, [sp, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	42ab      	cmp	r3, r5
 8000b8c:	d804      	bhi.n	8000b98 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f013 0f01 	tst.w	r3, #1
 8000b96:	d1f5      	bne.n	8000b84 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000ba4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ba6:	b10b      	cbz	r3, 8000bac <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000ba8:	4620      	mov	r0, r4
 8000baa:	4798      	blx	r3
}
 8000bac:	b003      	add	sp, #12
 8000bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	1b4e81b5 	.word	0x1b4e81b5

08000bb8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	f200 80e2 	bhi.w	8000d84 <HAL_GPIO_Init+0x1cc>
{
 8000bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	e03a      	b.n	8000c3c <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bc6:	2209      	movs	r2, #9
 8000bc8:	e000      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000bca:	2200      	movs	r2, #0
 8000bcc:	40aa      	lsls	r2, r5
 8000bce:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bd0:	3402      	adds	r4, #2
 8000bd2:	4d6d      	ldr	r5, [pc, #436]	; (8000d88 <HAL_GPIO_Init+0x1d0>)
 8000bd4:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd8:	4a6c      	ldr	r2, [pc, #432]	; (8000d8c <HAL_GPIO_Init+0x1d4>)
 8000bda:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bdc:	ea6f 020c 	mvn.w	r2, ip
 8000be0:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be4:	684e      	ldr	r6, [r1, #4]
 8000be6:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000bea:	d001      	beq.n	8000bf0 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000bec:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8000bf0:	4c66      	ldr	r4, [pc, #408]	; (8000d8c <HAL_GPIO_Init+0x1d4>)
 8000bf2:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000bf4:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bf6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfa:	684e      	ldr	r6, [r1, #4]
 8000bfc:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000c00:	d001      	beq.n	8000c06 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8000c02:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000c06:	4c61      	ldr	r4, [pc, #388]	; (8000d8c <HAL_GPIO_Init+0x1d4>)
 8000c08:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c0a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c0c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c10:	684e      	ldr	r6, [r1, #4]
 8000c12:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000c16:	d001      	beq.n	8000c1c <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8000c18:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000c1c:	4c5b      	ldr	r4, [pc, #364]	; (8000d8c <HAL_GPIO_Init+0x1d4>)
 8000c1e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000c20:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c22:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c24:	684d      	ldr	r5, [r1, #4]
 8000c26:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8000c2a:	d001      	beq.n	8000c30 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000c2c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8000c30:	4c56      	ldr	r4, [pc, #344]	; (8000d8c <HAL_GPIO_Init+0x1d4>)
 8000c32:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c34:	3301      	adds	r3, #1
 8000c36:	2b0f      	cmp	r3, #15
 8000c38:	f200 80a2 	bhi.w	8000d80 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c40:	680c      	ldr	r4, [r1, #0]
 8000c42:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000c46:	ea32 0404 	bics.w	r4, r2, r4
 8000c4a:	d1f3      	bne.n	8000c34 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c4c:	684c      	ldr	r4, [r1, #4]
 8000c4e:	2c12      	cmp	r4, #18
 8000c50:	bf18      	it	ne
 8000c52:	2c02      	cmpne	r4, #2
 8000c54:	d110      	bne.n	8000c78 <HAL_GPIO_Init+0xc0>
        temp = GPIOx->AFR[position >> 3];
 8000c56:	08dd      	lsrs	r5, r3, #3
 8000c58:	3508      	adds	r5, #8
 8000c5a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c5e:	f003 0407 	and.w	r4, r3, #7
 8000c62:	00a6      	lsls	r6, r4, #2
 8000c64:	240f      	movs	r4, #15
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	ea27 0e04 	bic.w	lr, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c6c:	690c      	ldr	r4, [r1, #16]
 8000c6e:	40b4      	lsls	r4, r6
 8000c70:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000c74:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000c78:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c7a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c7e:	2403      	movs	r4, #3
 8000c80:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c84:	43e5      	mvns	r5, r4
 8000c86:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c8a:	684c      	ldr	r4, [r1, #4]
 8000c8c:	f004 0403 	and.w	r4, r4, #3
 8000c90:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c94:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8000c96:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c98:	684c      	ldr	r4, [r1, #4]
 8000c9a:	1e66      	subs	r6, r4, #1
 8000c9c:	2c11      	cmp	r4, #17
 8000c9e:	bf18      	it	ne
 8000ca0:	2e01      	cmpne	r6, #1
 8000ca2:	d901      	bls.n	8000ca8 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca4:	2c12      	cmp	r4, #18
 8000ca6:	d10f      	bne.n	8000cc8 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000ca8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000caa:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cac:	68cc      	ldr	r4, [r1, #12]
 8000cae:	fa04 f40e 	lsl.w	r4, r4, lr
 8000cb2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000cb4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cb6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb8:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000cbc:	684c      	ldr	r4, [r1, #4]
 8000cbe:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000cc2:	409c      	lsls	r4, r3
 8000cc4:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000cc6:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cc8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cca:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ccc:	688a      	ldr	r2, [r1, #8]
 8000cce:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cd2:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000cd4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd6:	684a      	ldr	r2, [r1, #4]
 8000cd8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000cdc:	d0aa      	beq.n	8000c34 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4a2c      	ldr	r2, [pc, #176]	; (8000d90 <HAL_GPIO_Init+0x1d8>)
 8000ce0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000ce2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000ce6:	6454      	str	r4, [r2, #68]	; 0x44
 8000ce8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cee:	9201      	str	r2, [sp, #4]
 8000cf0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000cf2:	089c      	lsrs	r4, r3, #2
 8000cf4:	1ca5      	adds	r5, r4, #2
 8000cf6:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <HAL_GPIO_Init+0x1d0>)
 8000cf8:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cfc:	f003 0203 	and.w	r2, r3, #3
 8000d00:	0095      	lsls	r5, r2, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	40aa      	lsls	r2, r5
 8000d06:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d0a:	4a22      	ldr	r2, [pc, #136]	; (8000d94 <HAL_GPIO_Init+0x1dc>)
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	f43f af5c 	beq.w	8000bca <HAL_GPIO_Init+0x12>
 8000d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d022      	beq.n	8000d60 <HAL_GPIO_Init+0x1a8>
 8000d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d020      	beq.n	8000d64 <HAL_GPIO_Init+0x1ac>
 8000d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d01e      	beq.n	8000d68 <HAL_GPIO_Init+0x1b0>
 8000d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	d01c      	beq.n	8000d6c <HAL_GPIO_Init+0x1b4>
 8000d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d01a      	beq.n	8000d70 <HAL_GPIO_Init+0x1b8>
 8000d3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	d018      	beq.n	8000d74 <HAL_GPIO_Init+0x1bc>
 8000d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d016      	beq.n	8000d78 <HAL_GPIO_Init+0x1c0>
 8000d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	d014      	beq.n	8000d7c <HAL_GPIO_Init+0x1c4>
 8000d52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d56:	4290      	cmp	r0, r2
 8000d58:	f43f af35 	beq.w	8000bc6 <HAL_GPIO_Init+0xe>
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	e735      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d60:	2201      	movs	r2, #1
 8000d62:	e733      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d64:	2202      	movs	r2, #2
 8000d66:	e731      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d68:	2203      	movs	r2, #3
 8000d6a:	e72f      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	e72d      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d70:	2205      	movs	r2, #5
 8000d72:	e72b      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d74:	2206      	movs	r2, #6
 8000d76:	e729      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d78:	2207      	movs	r2, #7
 8000d7a:	e727      	b.n	8000bcc <HAL_GPIO_Init+0x14>
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	e725      	b.n	8000bcc <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000d80:	b003      	add	sp, #12
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40013800 	.word	0x40013800
 8000d8c:	40013c00 	.word	0x40013c00
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000

08000d98 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d98:	6903      	ldr	r3, [r0, #16]
 8000d9a:	4219      	tst	r1, r3
 8000d9c:	d001      	beq.n	8000da2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000da2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000da4:	4770      	bx	lr

08000da6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000da6:	b10a      	cbz	r2, 8000dac <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000da8:	6181      	str	r1, [r0, #24]
 8000daa:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000dac:	0409      	lsls	r1, r1, #16
 8000dae:	6181      	str	r1, [r0, #24]
  }
}
 8000db0:	4770      	bx	lr

08000db2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000db2:	6943      	ldr	r3, [r0, #20]
 8000db4:	ea31 0303 	bics.w	r3, r1, r3
 8000db8:	d001      	beq.n	8000dbe <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dba:	6181      	str	r1, [r0, #24]
  }
}
 8000dbc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000dbe:	0409      	lsls	r1, r1, #16
 8000dc0:	6181      	str	r1, [r0, #24]
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dc4:	4770      	bx	lr
	...

08000dc8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000dc8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4203      	tst	r3, r0
 8000dd0:	d100      	bne.n	8000dd4 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8000dd2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000dd6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dd8:	f7ff fff4 	bl	8000dc4 <HAL_GPIO_EXTI_Callback>
}
 8000ddc:	e7f9      	b.n	8000dd2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000dde:	bf00      	nop
 8000de0:	40013c00 	.word	0x40013c00

08000de4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000de4:	6803      	ldr	r3, [r0, #0]
 8000de6:	699a      	ldr	r2, [r3, #24]
 8000de8:	f012 0f02 	tst.w	r2, #2
 8000dec:	d001      	beq.n	8000df2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000df2:	6803      	ldr	r3, [r0, #0]
 8000df4:	699a      	ldr	r2, [r3, #24]
 8000df6:	f012 0f01 	tst.w	r2, #1
 8000dfa:	d103      	bne.n	8000e04 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000dfc:	699a      	ldr	r2, [r3, #24]
 8000dfe:	f042 0201 	orr.w	r2, r2, #1
 8000e02:	619a      	str	r2, [r3, #24]
  }
}
 8000e04:	4770      	bx	lr

08000e06 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000e06:	f011 0f01 	tst.w	r1, #1
 8000e0a:	d009      	beq.n	8000e20 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000e0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000e14:	2b28      	cmp	r3, #40	; 0x28
 8000e16:	d001      	beq.n	8000e1c <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000e18:	23f2      	movs	r3, #242	; 0xf2
 8000e1a:	e002      	b.n	8000e22 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8000e1c:	2342      	movs	r3, #66	; 0x42
 8000e1e:	e000      	b.n	8000e22 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8000e20:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000e22:	f011 0f02 	tst.w	r1, #2
 8000e26:	d009      	beq.n	8000e3c <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000e28:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000e2c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000e30:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000e34:	2a28      	cmp	r2, #40	; 0x28
 8000e36:	d016      	beq.n	8000e66 <I2C_Disable_IRQ+0x60>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000e38:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000e3c:	f011 0f04 	tst.w	r1, #4
 8000e40:	d001      	beq.n	8000e46 <I2C_Disable_IRQ+0x40>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000e42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000e46:	f001 0211 	and.w	r2, r1, #17
 8000e4a:	2a11      	cmp	r2, #17
 8000e4c:	d00d      	beq.n	8000e6a <I2C_Disable_IRQ+0x64>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000e4e:	f001 0112 	and.w	r1, r1, #18
 8000e52:	2912      	cmp	r1, #18
 8000e54:	d00c      	beq.n	8000e70 <I2C_Disable_IRQ+0x6a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8000e56:	2912      	cmp	r1, #18
 8000e58:	d00d      	beq.n	8000e76 <I2C_Disable_IRQ+0x70>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000e5a:	6801      	ldr	r1, [r0, #0]
 8000e5c:	680a      	ldr	r2, [r1, #0]
 8000e5e:	ea22 0303 	bic.w	r3, r2, r3
 8000e62:	600b      	str	r3, [r1, #0]
}
 8000e64:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000e66:	4663      	mov	r3, ip
 8000e68:	e7e8      	b.n	8000e3c <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000e6a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000e6e:	e7ee      	b.n	8000e4e <I2C_Disable_IRQ+0x48>
    tmpisr |= I2C_IT_STOPI;
 8000e70:	f043 0320 	orr.w	r3, r3, #32
 8000e74:	e7ef      	b.n	8000e56 <I2C_Disable_IRQ+0x50>
    tmpisr |= I2C_IT_TCI;
 8000e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7a:	e7ee      	b.n	8000e5a <I2C_Disable_IRQ+0x54>

08000e7c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	d057      	beq.n	8000f30 <HAL_I2C_Init+0xb4>
{
 8000e80:	b510      	push	{r4, lr}
 8000e82:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e84:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d041      	beq.n	8000f10 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e8c:	2324      	movs	r3, #36	; 0x24
 8000e8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000e92:	6822      	ldr	r2, [r4, #0]
 8000e94:	6813      	ldr	r3, [r2, #0]
 8000e96:	f023 0301 	bic.w	r3, r3, #1
 8000e9a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e9c:	6863      	ldr	r3, [r4, #4]
 8000e9e:	6822      	ldr	r2, [r4, #0]
 8000ea0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000ea4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ea6:	6822      	ldr	r2, [r4, #0]
 8000ea8:	6893      	ldr	r3, [r2, #8]
 8000eaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000eae:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000eb0:	68e3      	ldr	r3, [r4, #12]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d031      	beq.n	8000f1a <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eb6:	68a3      	ldr	r3, [r4, #8]
 8000eb8:	6822      	ldr	r2, [r4, #0]
 8000eba:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8000ebe:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ec0:	68e3      	ldr	r3, [r4, #12]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d02f      	beq.n	8000f26 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	6851      	ldr	r1, [r2, #4]
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_I2C_Init+0xb8>)
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ed0:	6822      	ldr	r2, [r4, #0]
 8000ed2:	68d3      	ldr	r3, [r2, #12]
 8000ed4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ed8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000eda:	6923      	ldr	r3, [r4, #16]
 8000edc:	6962      	ldr	r2, [r4, #20]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	69a1      	ldr	r1, [r4, #24]
 8000ee2:	6822      	ldr	r2, [r4, #0]
 8000ee4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000ee8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000eea:	69e3      	ldr	r3, [r4, #28]
 8000eec:	6a21      	ldr	r1, [r4, #32]
 8000eee:	6822      	ldr	r2, [r4, #0]
 8000ef0:	430b      	orrs	r3, r1
 8000ef2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000ef4:	6822      	ldr	r2, [r4, #0]
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000efe:	2000      	movs	r0, #0
 8000f00:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f02:	2320      	movs	r3, #32
 8000f04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f08:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f0a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8000f0e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000f10:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000f14:	f003 feb0 	bl	8004c78 <HAL_I2C_MspInit>
 8000f18:	e7b8      	b.n	8000e8c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f1a:	68a3      	ldr	r3, [r4, #8]
 8000f1c:	6822      	ldr	r2, [r4, #0]
 8000f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f22:	6093      	str	r3, [r2, #8]
 8000f24:	e7cc      	b.n	8000ec0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	e7ca      	b.n	8000ec6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8000f30:	2001      	movs	r0, #1
}
 8000f32:	4770      	bx	lr
 8000f34:	02008000 	.word	0x02008000

08000f38 <HAL_I2C_EV_IRQHandler>:
{
 8000f38:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000f3a:	6803      	ldr	r3, [r0, #0]
 8000f3c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000f3e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8000f40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f42:	b103      	cbz	r3, 8000f46 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000f44:	4798      	blx	r3
}
 8000f46:	bd08      	pop	{r3, pc}

08000f48 <HAL_I2C_SlaveTxCpltCallback>:
}
 8000f48:	4770      	bx	lr

08000f4a <HAL_I2C_SlaveRxCpltCallback>:
}
 8000f4a:	4770      	bx	lr

08000f4c <I2C_ITSlaveSeqCplt>:
{
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000f56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b29      	cmp	r3, #41	; 0x29
 8000f5e:	d005      	beq.n	8000f6c <I2C_ITSlaveSeqCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000f60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b2a      	cmp	r3, #42	; 0x2a
 8000f68:	d00f      	beq.n	8000f8a <I2C_ITSlaveSeqCplt+0x3e>
}
 8000f6a:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000f6c:	2328      	movs	r3, #40	; 0x28
 8000f6e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000f72:	2321      	movs	r3, #33	; 0x21
 8000f74:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000f76:	2101      	movs	r1, #1
 8000f78:	f7ff ff45 	bl	8000e06 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000f82:	4620      	mov	r0, r4
 8000f84:	f7ff ffe0 	bl	8000f48 <HAL_I2C_SlaveTxCpltCallback>
 8000f88:	e7ef      	b.n	8000f6a <I2C_ITSlaveSeqCplt+0x1e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000f8a:	2328      	movs	r3, #40	; 0x28
 8000f8c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000f90:	2322      	movs	r3, #34	; 0x22
 8000f92:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000f94:	2102      	movs	r1, #2
 8000f96:	f7ff ff36 	bl	8000e06 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f7ff ffd2 	bl	8000f4a <HAL_I2C_SlaveRxCpltCallback>
}
 8000fa6:	e7e0      	b.n	8000f6a <I2C_ITSlaveSeqCplt+0x1e>

08000fa8 <HAL_I2C_AddrCallback>:
}
 8000fa8:	4770      	bx	lr

08000faa <I2C_ITAddrCplt>:
{
 8000faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fac:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8000fae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000fb6:	2b28      	cmp	r3, #40	; 0x28
 8000fb8:	d006      	beq.n	8000fc8 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8000fba:	6803      	ldr	r3, [r0, #0]
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8000fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8000fc8:	6803      	ldr	r3, [r0, #0]
 8000fca:	699e      	ldr	r6, [r3, #24]
 8000fcc:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8000fd0:	699a      	ldr	r2, [r3, #24]
 8000fd2:	0c12      	lsrs	r2, r2, #16
 8000fd4:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8000fde:	68df      	ldr	r7, [r3, #12]
 8000fe0:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fe4:	68c1      	ldr	r1, [r0, #12]
 8000fe6:	2902      	cmp	r1, #2
 8000fe8:	d121      	bne.n	800102e <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8000fea:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8000fee:	f015 0f06 	tst.w	r5, #6
 8000ff2:	d110      	bne.n	8001016 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8000ff4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000ff6:	3101      	adds	r1, #1
 8000ff8:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8000ffa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000ffc:	2902      	cmp	r1, #2
 8000ffe:	d1e2      	bne.n	8000fc6 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8001000:	2100      	movs	r1, #0
 8001002:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001004:	2008      	movs	r0, #8
 8001006:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001008:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800100c:	4631      	mov	r1, r6
 800100e:	4620      	mov	r0, r4
 8001010:	f7ff ffca 	bl	8000fa8 <HAL_I2C_AddrCallback>
 8001014:	e7d7      	b.n	8000fc6 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001016:	2104      	movs	r1, #4
 8001018:	f7ff fef5 	bl	8000e06 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800101c:	2300      	movs	r3, #0
 800101e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001022:	463a      	mov	r2, r7
 8001024:	4631      	mov	r1, r6
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff ffbe 	bl	8000fa8 <HAL_I2C_AddrCallback>
 800102c:	e7cb      	b.n	8000fc6 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800102e:	2104      	movs	r1, #4
 8001030:	f7ff fee9 	bl	8000e06 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001034:	2300      	movs	r3, #0
 8001036:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800103a:	462a      	mov	r2, r5
 800103c:	4631      	mov	r1, r6
 800103e:	4620      	mov	r0, r4
 8001040:	f7ff ffb2 	bl	8000fa8 <HAL_I2C_AddrCallback>
 8001044:	e7bf      	b.n	8000fc6 <I2C_ITAddrCplt+0x1c>

08001046 <HAL_I2C_ListenCpltCallback>:
}
 8001046:	4770      	bx	lr

08001048 <I2C_ITListenCplt>:
{
 8001048:	b510      	push	{r4, lr}
 800104a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <I2C_ITListenCplt+0x64>)
 800104e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001050:	2300      	movs	r3, #0
 8001052:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001054:	2220      	movs	r2, #32
 8001056:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800105a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800105e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001060:	f011 0f04 	tst.w	r1, #4
 8001064:	d013      	beq.n	800108e <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001066:	6803      	ldr	r3, [r0, #0]
 8001068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800106a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800106c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800106e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001070:	3301      	adds	r3, #1
 8001072:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001074:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001076:	b153      	cbz	r3, 800108e <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8001078:	3b01      	subs	r3, #1
 800107a:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 800107c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800107e:	b29b      	uxth	r3, r3
 8001080:	3b01      	subs	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001086:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800108e:	2107      	movs	r1, #7
 8001090:	4620      	mov	r0, r4
 8001092:	f7ff feb8 	bl	8000e06 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	2210      	movs	r2, #16
 800109a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800109c:	2300      	movs	r3, #0
 800109e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80010a2:	4620      	mov	r0, r4
 80010a4:	f7ff ffcf 	bl	8001046 <HAL_I2C_ListenCpltCallback>
}
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	bf00      	nop
 80010ac:	ffff0000 	.word	0xffff0000

080010b0 <HAL_I2C_ErrorCallback>:
}
 80010b0:	4770      	bx	lr

080010b2 <HAL_I2C_AbortCpltCallback>:
}
 80010b2:	4770      	bx	lr

080010b4 <I2C_ITError>:
{
 80010b4:	b510      	push	{r4, lr}
 80010b6:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80010b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80010bc:	2000      	movs	r0, #0
 80010be:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80010c2:	4a36      	ldr	r2, [pc, #216]	; (800119c <I2C_ITError+0xe8>)
 80010c4:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80010c6:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80010c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80010ca:	430a      	orrs	r2, r1
 80010cc:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80010ce:	3b28      	subs	r3, #40	; 0x28
 80010d0:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d824      	bhi.n	8001120 <I2C_ITError+0x6c>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80010d6:	2103      	movs	r1, #3
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff fe94 	bl	8000e06 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80010de:	2328      	movs	r3, #40	; 0x28
 80010e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <I2C_ITError+0xec>)
 80010ea:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80010f4:	d024      	beq.n	8001140 <I2C_ITError+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010fc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 80010fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001100:	2b00      	cmp	r3, #0
 8001102:	d03f      	beq.n	8001184 <I2C_ITError+0xd0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001104:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <I2C_ITError+0xf0>)
 8001106:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8001108:	2300      	movs	r3, #0
 800110a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800110e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001110:	f7ff fc50 	bl	80009b4 <HAL_DMA_Abort_IT>
 8001114:	2800      	cmp	r0, #0
 8001116:	d035      	beq.n	8001184 <I2C_ITError+0xd0>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001118:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800111a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800111c:	4798      	blx	r3
 800111e:	e031      	b.n	8001184 <I2C_ITError+0xd0>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001120:	2107      	movs	r1, #7
 8001122:	4620      	mov	r0, r4
 8001124:	f7ff fe6f 	bl	8000e06 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001128:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b60      	cmp	r3, #96	; 0x60
 8001130:	d002      	beq.n	8001138 <I2C_ITError+0x84>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001132:	2320      	movs	r3, #32
 8001134:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800113c:	6363      	str	r3, [r4, #52]	; 0x34
 800113e:	e7d5      	b.n	80010ec <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001146:	d012      	beq.n	800116e <I2C_ITError+0xba>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800114e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001152:	b1bb      	cbz	r3, 8001184 <I2C_ITError+0xd0>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <I2C_ITError+0xf0>)
 8001156:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8001158:	2300      	movs	r3, #0
 800115a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800115e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001160:	f7ff fc28 	bl	80009b4 <HAL_DMA_Abort_IT>
 8001164:	b170      	cbz	r0, 8001184 <I2C_ITError+0xd0>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001166:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001168:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800116a:	4798      	blx	r3
 800116c:	e00a      	b.n	8001184 <I2C_ITError+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800116e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b60      	cmp	r3, #96	; 0x60
 8001176:	d006      	beq.n	8001186 <I2C_ITError+0xd2>
    __HAL_UNLOCK(hi2c);
 8001178:	2300      	movs	r3, #0
 800117a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff ff96 	bl	80010b0 <HAL_I2C_ErrorCallback>
}
 8001184:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001186:	2320      	movs	r3, #32
 8001188:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800118c:	2300      	movs	r3, #0
 800118e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001192:	4620      	mov	r0, r4
 8001194:	f7ff ff8d 	bl	80010b2 <HAL_I2C_AbortCpltCallback>
 8001198:	e7f4      	b.n	8001184 <I2C_ITError+0xd0>
 800119a:	bf00      	nop
 800119c:	ffff0000 	.word	0xffff0000
 80011a0:	080012c9 	.word	0x080012c9
 80011a4:	08001485 	.word	0x08001485

080011a8 <I2C_ITSlaveCplt>:
{
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	4604      	mov	r4, r0
 80011ac:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80011ae:	6803      	ldr	r3, [r0, #0]
 80011b0:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011b2:	2220      	movs	r2, #32
 80011b4:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80011b6:	2107      	movs	r1, #7
 80011b8:	f7ff fe25 	bl	8000e06 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80011bc:	6822      	ldr	r2, [r4, #0]
 80011be:	6853      	ldr	r3, [r2, #4]
 80011c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c4:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80011c6:	6822      	ldr	r2, [r4, #0]
 80011c8:	6853      	ldr	r3, [r2, #4]
 80011ca:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80011ce:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80011d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80011dc:	4620      	mov	r0, r4
 80011de:	f7ff fe01 	bl	8000de4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80011e2:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80011e6:	d03b      	beq.n	8001260 <I2C_ITSlaveCplt+0xb8>
    if (hi2c->hdmatx != NULL)
 80011e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011ea:	b11b      	cbz	r3, 80011f4 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80011f4:	f015 0f04 	tst.w	r5, #4
 80011f8:	d011      	beq.n	800121e <I2C_ITSlaveCplt+0x76>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80011fa:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001204:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001208:	3301      	adds	r3, #1
 800120a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800120c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800120e:	b133      	cbz	r3, 800121e <I2C_ITSlaveCplt+0x76>
      hi2c->XferSize--;
 8001210:	3b01      	subs	r3, #1
 8001212:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001214:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001216:	b29b      	uxth	r3, r3
 8001218:	3b01      	subs	r3, #1
 800121a:	b29b      	uxth	r3, r3
 800121c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800121e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001220:	b29b      	uxth	r3, r3
 8001222:	b11b      	cbz	r3, 800122c <I2C_ITSlaveCplt+0x84>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001224:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800122c:	2300      	movs	r3, #0
 800122e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001234:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001236:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001238:	b9eb      	cbnz	r3, 8001276 <I2C_ITSlaveCplt+0xce>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800123a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800123c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001240:	d127      	bne.n	8001292 <I2C_ITSlaveCplt+0xea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001242:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b22      	cmp	r3, #34	; 0x22
 800124a:	d031      	beq.n	80012b0 <I2C_ITSlaveCplt+0x108>
    hi2c->State = HAL_I2C_STATE_READY;
 800124c:	2320      	movs	r3, #32
 800124e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001252:	2300      	movs	r3, #0
 8001254:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001258:	4620      	mov	r0, r4
 800125a:	f7ff fe75 	bl	8000f48 <HAL_I2C_SlaveTxCpltCallback>
}
 800125e:	e026      	b.n	80012ae <I2C_ITSlaveCplt+0x106>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001260:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8001264:	d0c6      	beq.n	80011f4 <I2C_ITSlaveCplt+0x4c>
    if (hi2c->hdmarx != NULL)
 8001266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0c3      	beq.n	80011f4 <I2C_ITSlaveCplt+0x4c>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	b29b      	uxth	r3, r3
 8001272:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001274:	e7be      	b.n	80011f4 <I2C_ITSlaveCplt+0x4c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001276:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001278:	4620      	mov	r0, r4
 800127a:	f7ff ff1b 	bl	80010b4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800127e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b28      	cmp	r3, #40	; 0x28
 8001286:	d112      	bne.n	80012ae <I2C_ITSlaveCplt+0x106>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001288:	4629      	mov	r1, r5
 800128a:	4620      	mov	r0, r4
 800128c:	f7ff fedc 	bl	8001048 <I2C_ITListenCplt>
 8001290:	e00d      	b.n	80012ae <I2C_ITSlaveCplt+0x106>
    I2C_ITSlaveSeqCplt(hi2c);
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff fe5a 	bl	8000f4c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <I2C_ITSlaveCplt+0x11c>)
 800129a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800129c:	2320      	movs	r3, #32
 800129e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012a2:	2300      	movs	r3, #0
 80012a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff fecc 	bl	8001046 <HAL_I2C_ListenCpltCallback>
}
 80012ae:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80012b0:	2320      	movs	r3, #32
 80012b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012b6:	2300      	movs	r3, #0
 80012b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff fe44 	bl	8000f4a <HAL_I2C_SlaveRxCpltCallback>
 80012c2:	e7f4      	b.n	80012ae <I2C_ITSlaveCplt+0x106>
 80012c4:	ffff0000 	.word	0xffff0000

080012c8 <I2C_Slave_ISR_IT>:
{
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	4616      	mov	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 80012cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80012ce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	f000 809f 	beq.w	8001416 <I2C_Slave_ISR_IT+0x14e>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	2301      	movs	r3, #1
 80012de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80012e2:	f011 0f10 	tst.w	r1, #16
 80012e6:	d03f      	beq.n	8001368 <I2C_Slave_ISR_IT+0xa0>
 80012e8:	f016 0f10 	tst.w	r6, #16
 80012ec:	d03c      	beq.n	8001368 <I2C_Slave_ISR_IT+0xa0>
    if (hi2c->XferCount == 0U)
 80012ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	bb4b      	cbnz	r3, 8001348 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80012f4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b28      	cmp	r3, #40	; 0x28
 80012fc:	d011      	beq.n	8001322 <I2C_Slave_ISR_IT+0x5a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80012fe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b29      	cmp	r3, #41	; 0x29
 8001306:	d012      	beq.n	800132e <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	2210      	movs	r2, #16
 800130c:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800130e:	f015 0f20 	tst.w	r5, #32
 8001312:	d002      	beq.n	800131a <I2C_Slave_ISR_IT+0x52>
 8001314:	f016 0f20 	tst.w	r6, #32
 8001318:	d178      	bne.n	800140c <I2C_Slave_ISR_IT+0x144>
  __HAL_UNLOCK(hi2c);
 800131a:	2000      	movs	r0, #0
 800131c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001320:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001322:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8001326:	d1ea      	bne.n	80012fe <I2C_Slave_ISR_IT+0x36>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001328:	f7ff fe8e 	bl	8001048 <I2C_ITListenCplt>
 800132c:	e7ef      	b.n	800130e <I2C_Slave_ISR_IT+0x46>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800132e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001332:	d0e9      	beq.n	8001308 <I2C_Slave_ISR_IT+0x40>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	2210      	movs	r2, #16
 8001338:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff fd52 	bl	8000de4 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff fe03 	bl	8000f4c <I2C_ITSlaveSeqCplt>
 8001346:	e7e2      	b.n	800130e <I2C_Slave_ISR_IT+0x46>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001348:	6803      	ldr	r3, [r0, #0]
 800134a:	2110      	movs	r1, #16
 800134c:	61d9      	str	r1, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800134e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001356:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800135a:	bf18      	it	ne
 800135c:	2a00      	cmpne	r2, #0
 800135e:	d1d6      	bne.n	800130e <I2C_Slave_ISR_IT+0x46>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001360:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001362:	f7ff fea7 	bl	80010b4 <I2C_ITError>
 8001366:	e7d2      	b.n	800130e <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001368:	f015 0f04 	tst.w	r5, #4
 800136c:	d021      	beq.n	80013b2 <I2C_Slave_ISR_IT+0xea>
 800136e:	f016 0f04 	tst.w	r6, #4
 8001372:	d01e      	beq.n	80013b2 <I2C_Slave_ISR_IT+0xea>
    if (hi2c->XferCount > 0U)
 8001374:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001376:	b29b      	uxth	r3, r3
 8001378:	b183      	cbz	r3, 800139c <I2C_Slave_ISR_IT+0xd4>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800137a:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001384:	7019      	strb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001388:	3301      	adds	r3, #1
 800138a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800138c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800138e:	3b01      	subs	r3, #1
 8001390:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001392:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	b29b      	uxth	r3, r3
 800139a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800139c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800139e:	b29b      	uxth	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1b4      	bne.n	800130e <I2C_Slave_ISR_IT+0x46>
 80013a4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80013a8:	d0b1      	beq.n	800130e <I2C_Slave_ISR_IT+0x46>
      I2C_ITSlaveSeqCplt(hi2c);
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff fdce 	bl	8000f4c <I2C_ITSlaveSeqCplt>
 80013b0:	e7ad      	b.n	800130e <I2C_Slave_ISR_IT+0x46>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80013b2:	f015 0f08 	tst.w	r5, #8
 80013b6:	d002      	beq.n	80013be <I2C_Slave_ISR_IT+0xf6>
 80013b8:	f016 0f08 	tst.w	r6, #8
 80013bc:	d118      	bne.n	80013f0 <I2C_Slave_ISR_IT+0x128>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80013be:	f015 0f02 	tst.w	r5, #2
 80013c2:	d0a4      	beq.n	800130e <I2C_Slave_ISR_IT+0x46>
 80013c4:	f016 0f02 	tst.w	r6, #2
 80013c8:	d0a1      	beq.n	800130e <I2C_Slave_ISR_IT+0x46>
    if (hi2c->XferCount > 0U)
 80013ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	b1a3      	cbz	r3, 80013fa <I2C_Slave_ISR_IT+0x132>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80013d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013da:	3301      	adds	r3, #1
 80013dc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80013de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013ea:	3b01      	subs	r3, #1
 80013ec:	8523      	strh	r3, [r4, #40]	; 0x28
 80013ee:	e78e      	b.n	800130e <I2C_Slave_ISR_IT+0x46>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80013f0:	4629      	mov	r1, r5
 80013f2:	4620      	mov	r0, r4
 80013f4:	f7ff fdd9 	bl	8000faa <I2C_ITAddrCplt>
 80013f8:	e789      	b.n	800130e <I2C_Slave_ISR_IT+0x46>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80013fa:	2a00      	cmp	r2, #0
 80013fc:	bf18      	it	ne
 80013fe:	f1b2 7f80 	cmpne.w	r2, #16777216	; 0x1000000
 8001402:	d184      	bne.n	800130e <I2C_Slave_ISR_IT+0x46>
        I2C_ITSlaveSeqCplt(hi2c);
 8001404:	4620      	mov	r0, r4
 8001406:	f7ff fda1 	bl	8000f4c <I2C_ITSlaveSeqCplt>
 800140a:	e780      	b.n	800130e <I2C_Slave_ISR_IT+0x46>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800140c:	4629      	mov	r1, r5
 800140e:	4620      	mov	r0, r4
 8001410:	f7ff feca 	bl	80011a8 <I2C_ITSlaveCplt>
 8001414:	e781      	b.n	800131a <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8001416:	2002      	movs	r0, #2
 8001418:	e782      	b.n	8001320 <I2C_Slave_ISR_IT+0x58>

0800141a <HAL_I2C_ER_IRQHandler>:
{
 800141a:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800141c:	6802      	ldr	r2, [r0, #0]
 800141e:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001420:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001422:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001426:	d009      	beq.n	800143c <HAL_I2C_ER_IRQHandler+0x22>
 8001428:	f011 0f80 	tst.w	r1, #128	; 0x80
 800142c:	d006      	beq.n	800143c <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800142e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001430:	f044 0401 	orr.w	r4, r4, #1
 8001434:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001436:	f44f 7480 	mov.w	r4, #256	; 0x100
 800143a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800143c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001440:	d00a      	beq.n	8001458 <HAL_I2C_ER_IRQHandler+0x3e>
 8001442:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001446:	d007      	beq.n	8001458 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001448:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800144a:	f042 0208 	orr.w	r2, r2, #8
 800144e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001450:	6802      	ldr	r2, [r0, #0]
 8001452:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001456:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001458:	f413 7f00 	tst.w	r3, #512	; 0x200
 800145c:	d00a      	beq.n	8001474 <HAL_I2C_ER_IRQHandler+0x5a>
 800145e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001462:	d007      	beq.n	8001474 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001464:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800146c:	6803      	ldr	r3, [r0, #0]
 800146e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001472:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001474:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001476:	f011 0f0b 	tst.w	r1, #11
 800147a:	d100      	bne.n	800147e <HAL_I2C_ER_IRQHandler+0x64>
}
 800147c:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800147e:	f7ff fe19 	bl	80010b4 <I2C_ITError>
}
 8001482:	e7fb      	b.n	800147c <HAL_I2C_ER_IRQHandler+0x62>

08001484 <I2C_DMAAbort>:
{
 8001484:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001486:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001488:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800148a:	2300      	movs	r3, #0
 800148c:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800148e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001490:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001492:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b60      	cmp	r3, #96	; 0x60
 800149a:	d002      	beq.n	80014a2 <I2C_DMAAbort+0x1e>
    HAL_I2C_ErrorCallback(hi2c);
 800149c:	f7ff fe08 	bl	80010b0 <HAL_I2C_ErrorCallback>
}
 80014a0:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80014a2:	2320      	movs	r3, #32
 80014a4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80014a8:	f7ff fe03 	bl	80010b2 <HAL_I2C_AbortCpltCallback>
 80014ac:	e7f8      	b.n	80014a0 <I2C_DMAAbort+0x1c>

080014ae <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d124      	bne.n	8001502 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d022      	beq.n	8001506 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80014c0:	2301      	movs	r3, #1
 80014c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014c6:	2324      	movs	r3, #36	; 0x24
 80014c8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014cc:	6802      	ldr	r2, [r0, #0]
 80014ce:	6813      	ldr	r3, [r2, #0]
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014d6:	6802      	ldr	r2, [r0, #0]
 80014d8:	6813      	ldr	r3, [r2, #0]
 80014da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014de:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014e0:	6802      	ldr	r2, [r0, #0]
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	4319      	orrs	r1, r3
 80014e6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014e8:	6802      	ldr	r2, [r0, #0]
 80014ea:	6813      	ldr	r3, [r2, #0]
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014f2:	2320      	movs	r3, #32
 80014f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f8:	2300      	movs	r3, #0
 80014fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80014fe:	4618      	mov	r0, r3
 8001500:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001502:	2002      	movs	r0, #2
 8001504:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001506:	2002      	movs	r0, #2
  }
}
 8001508:	4770      	bx	lr

0800150a <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800150a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b20      	cmp	r3, #32
 8001512:	d122      	bne.n	800155a <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001514:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001518:	2b01      	cmp	r3, #1
 800151a:	d020      	beq.n	800155e <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800151c:	2301      	movs	r3, #1
 800151e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001522:	2324      	movs	r3, #36	; 0x24
 8001524:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001528:	6802      	ldr	r2, [r0, #0]
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001532:	6802      	ldr	r2, [r0, #0]
 8001534:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001536:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800153a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800153e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001540:	6802      	ldr	r2, [r0, #0]
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800154a:	2320      	movs	r3, #32
 800154c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001550:	2300      	movs	r3, #0
 8001552:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001556:	4618      	mov	r0, r3
 8001558:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800155a:	2002      	movs	r0, #2
 800155c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800155e:	2002      	movs	r0, #2
  }
}
 8001560:	4770      	bx	lr
	...

08001564 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001564:	b510      	push	{r4, lr}
 8001566:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x74>)
 800156a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800156c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800157c:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_PWREx_EnableOverDrive+0x78>)
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001586:	f7ff f873 	bl	8000670 <HAL_GetTick>
 800158a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_PWREx_EnableOverDrive+0x78>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001594:	d108      	bne.n	80015a8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001596:	f7ff f86b 	bl	8000670 <HAL_GetTick>
 800159a:	1b00      	subs	r0, r0, r4
 800159c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80015a0:	d9f4      	bls.n	800158c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80015a2:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80015a4:	b002      	add	sp, #8
 80015a6:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_PWREx_EnableOverDrive+0x78>)
 80015aa:	6813      	ldr	r3, [r2, #0]
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80015b2:	f7ff f85d 	bl	8000670 <HAL_GetTick>
 80015b6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_PWREx_EnableOverDrive+0x78>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015c0:	d107      	bne.n	80015d2 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015c2:	f7ff f855 	bl	8000670 <HAL_GetTick>
 80015c6:	1b00      	subs	r0, r0, r4
 80015c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80015cc:	d9f4      	bls.n	80015b8 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80015ce:	2003      	movs	r0, #3
 80015d0:	e7e8      	b.n	80015a4 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80015d2:	2000      	movs	r0, #0
 80015d4:	e7e6      	b.n	80015a4 <HAL_PWREx_EnableOverDrive+0x40>
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e0:	2800      	cmp	r0, #0
 80015e2:	f000 81da 	beq.w	800199a <HAL_RCC_OscConfig+0x3ba>
{
 80015e6:	b570      	push	{r4, r5, r6, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ec:	6803      	ldr	r3, [r0, #0]
 80015ee:	f013 0f01 	tst.w	r3, #1
 80015f2:	d029      	beq.n	8001648 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f4:	4b95      	ldr	r3, [pc, #596]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d01a      	beq.n	8001636 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001600:	4b92      	ldr	r3, [pc, #584]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d00f      	beq.n	800162c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	6863      	ldr	r3, [r4, #4]
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d040      	beq.n	8001696 <HAL_RCC_OscConfig+0xb6>
 8001614:	2b00      	cmp	r3, #0
 8001616:	d154      	bne.n	80016c2 <HAL_RCC_OscConfig+0xe2>
 8001618:	4b8c      	ldr	r3, [pc, #560]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e039      	b.n	80016a0 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162c:	4b87      	ldr	r3, [pc, #540]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001634:	d0ea      	beq.n	800160c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001636:	4b85      	ldr	r3, [pc, #532]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800163e:	d003      	beq.n	8001648 <HAL_RCC_OscConfig+0x68>
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 81ab 	beq.w	800199e <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	f013 0f02 	tst.w	r3, #2
 800164e:	d074      	beq.n	800173a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001650:	4b7e      	ldr	r3, [pc, #504]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f013 0f0c 	tst.w	r3, #12
 8001658:	d05e      	beq.n	8001718 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	4b7c      	ldr	r3, [pc, #496]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d053      	beq.n	800170e <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001666:	68e3      	ldr	r3, [r4, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8089 	beq.w	8001780 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166e:	4a77      	ldr	r2, [pc, #476]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001670:	6813      	ldr	r3, [r2, #0]
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7fe fffa 	bl	8000670 <HAL_GetTick>
 800167c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b73      	ldr	r3, [pc, #460]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f013 0f02 	tst.w	r3, #2
 8001686:	d172      	bne.n	800176e <HAL_RCC_OscConfig+0x18e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001688:	f7fe fff2 	bl	8000670 <HAL_GetTick>
 800168c:	1b40      	subs	r0, r0, r5
 800168e:	2802      	cmp	r0, #2
 8001690:	d9f5      	bls.n	800167e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001692:	2003      	movs	r0, #3
 8001694:	e188      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001696:	4a6d      	ldr	r2, [pc, #436]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001698:	6813      	ldr	r3, [r2, #0]
 800169a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a0:	6863      	ldr	r3, [r4, #4]
 80016a2:	b32b      	cbz	r3, 80016f0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80016a4:	f7fe ffe4 	bl	8000670 <HAL_GetTick>
 80016a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b68      	ldr	r3, [pc, #416]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016b2:	d1c9      	bne.n	8001648 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7fe ffdc 	bl	8000670 <HAL_GetTick>
 80016b8:	1b40      	subs	r0, r0, r5
 80016ba:	2864      	cmp	r0, #100	; 0x64
 80016bc:	d9f5      	bls.n	80016aa <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80016be:	2003      	movs	r0, #3
 80016c0:	e172      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c6:	d009      	beq.n	80016dc <HAL_RCC_OscConfig+0xfc>
 80016c8:	4b60      	ldr	r3, [pc, #384]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e7e1      	b.n	80016a0 <HAL_RCC_OscConfig+0xc0>
 80016dc:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e7d7      	b.n	80016a0 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80016f0:	f7fe ffbe 	bl	8000670 <HAL_GetTick>
 80016f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016fe:	d0a3      	beq.n	8001648 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001700:	f7fe ffb6 	bl	8000670 <HAL_GetTick>
 8001704:	1b40      	subs	r0, r0, r5
 8001706:	2864      	cmp	r0, #100	; 0x64
 8001708:	d9f5      	bls.n	80016f6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800170a:	2003      	movs	r0, #3
 800170c:	e14c      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b4f      	ldr	r3, [pc, #316]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001716:	d1a6      	bne.n	8001666 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001718:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f013 0f02 	tst.w	r3, #2
 8001720:	d003      	beq.n	800172a <HAL_RCC_OscConfig+0x14a>
 8001722:	68e3      	ldr	r3, [r4, #12]
 8001724:	2b01      	cmp	r3, #1
 8001726:	f040 813c 	bne.w	80019a2 <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4a48      	ldr	r2, [pc, #288]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001732:	6921      	ldr	r1, [r4, #16]
 8001734:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001738:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	f013 0f08 	tst.w	r3, #8
 8001740:	d046      	beq.n	80017d0 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001742:	6963      	ldr	r3, [r4, #20]
 8001744:	b383      	cbz	r3, 80017a8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001746:	4a41      	ldr	r2, [pc, #260]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001748:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7fe ff8e 	bl	8000670 <HAL_GetTick>
 8001754:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175a:	f013 0f02 	tst.w	r3, #2
 800175e:	d137      	bne.n	80017d0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001760:	f7fe ff86 	bl	8000670 <HAL_GetTick>
 8001764:	1b40      	subs	r0, r0, r5
 8001766:	2802      	cmp	r0, #2
 8001768:	d9f5      	bls.n	8001756 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800176a:	2003      	movs	r0, #3
 800176c:	e11c      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4a37      	ldr	r2, [pc, #220]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001770:	6813      	ldr	r3, [r2, #0]
 8001772:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001776:	6921      	ldr	r1, [r4, #16]
 8001778:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e7dc      	b.n	800173a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8001780:	4a32      	ldr	r2, [pc, #200]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800178a:	f7fe ff71 	bl	8000670 <HAL_GetTick>
 800178e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f013 0f02 	tst.w	r3, #2
 8001798:	d0cf      	beq.n	800173a <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179a:	f7fe ff69 	bl	8000670 <HAL_GetTick>
 800179e:	1b40      	subs	r0, r0, r5
 80017a0:	2802      	cmp	r0, #2
 80017a2:	d9f5      	bls.n	8001790 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80017a4:	2003      	movs	r0, #3
 80017a6:	e0ff      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a8:	4a28      	ldr	r2, [pc, #160]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80017aa:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b2:	f7fe ff5d 	bl	8000670 <HAL_GetTick>
 80017b6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80017ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017bc:	f013 0f02 	tst.w	r3, #2
 80017c0:	d006      	beq.n	80017d0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c2:	f7fe ff55 	bl	8000670 <HAL_GetTick>
 80017c6:	1b40      	subs	r0, r0, r5
 80017c8:	2802      	cmp	r0, #2
 80017ca:	d9f5      	bls.n	80017b8 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80017cc:	2003      	movs	r0, #3
 80017ce:	e0eb      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	f013 0f04 	tst.w	r3, #4
 80017d6:	d07d      	beq.n	80018d4 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80017e0:	d11e      	bne.n	8001820 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80017e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017f6:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001800:	d010      	beq.n	8001824 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001802:	68a3      	ldr	r3, [r4, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d025      	beq.n	8001854 <HAL_RCC_OscConfig+0x274>
 8001808:	2b00      	cmp	r3, #0
 800180a:	d13b      	bne.n	8001884 <HAL_RCC_OscConfig+0x2a4>
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800180e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	671a      	str	r2, [r3, #112]	; 0x70
 8001816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001818:	f022 0204 	bic.w	r2, r2, #4
 800181c:	671a      	str	r2, [r3, #112]	; 0x70
 800181e:	e01e      	b.n	800185e <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8001820:	2500      	movs	r5, #0
 8001822:	e7e9      	b.n	80017f8 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001826:	6813      	ldr	r3, [r2, #0]
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800182e:	f7fe ff1f 	bl	8000670 <HAL_GetTick>
 8001832:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f413 7f80 	tst.w	r3, #256	; 0x100
 800183c:	d1e1      	bne.n	8001802 <HAL_RCC_OscConfig+0x222>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7fe ff17 	bl	8000670 <HAL_GetTick>
 8001842:	1b80      	subs	r0, r0, r6
 8001844:	2864      	cmp	r0, #100	; 0x64
 8001846:	d9f5      	bls.n	8001834 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8001848:	2003      	movs	r0, #3
 800184a:	e0ad      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 8001856:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800185e:	68a3      	ldr	r3, [r4, #8]
 8001860:	b333      	cbz	r3, 80018b0 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7fe ff05 	bl	8000670 <HAL_GetTick>
 8001866:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	f013 0f02 	tst.w	r3, #2
 8001870:	d12f      	bne.n	80018d2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7fe fefd 	bl	8000670 <HAL_GetTick>
 8001876:	1b80      	subs	r0, r0, r6
 8001878:	f241 3388 	movw	r3, #5000	; 0x1388
 800187c:	4298      	cmp	r0, r3
 800187e:	d9f3      	bls.n	8001868 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001880:	2003      	movs	r0, #3
 8001882:	e091      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	2b05      	cmp	r3, #5
 8001886:	d009      	beq.n	800189c <HAL_RCC_OscConfig+0x2bc>
 8001888:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 800188a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800188c:	f022 0201 	bic.w	r2, r2, #1
 8001890:	671a      	str	r2, [r3, #112]	; 0x70
 8001892:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001894:	f022 0204 	bic.w	r2, r2, #4
 8001898:	671a      	str	r2, [r3, #112]	; 0x70
 800189a:	e7e0      	b.n	800185e <HAL_RCC_OscConfig+0x27e>
 800189c:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 800189e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018a0:	f042 0204 	orr.w	r2, r2, #4
 80018a4:	671a      	str	r2, [r3, #112]	; 0x70
 80018a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018a8:	f042 0201 	orr.w	r2, r2, #1
 80018ac:	671a      	str	r2, [r3, #112]	; 0x70
 80018ae:	e7d6      	b.n	800185e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7fe fede 	bl	8000670 <HAL_GetTick>
 80018b4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	f013 0f02 	tst.w	r3, #2
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c0:	f7fe fed6 	bl	8000670 <HAL_GetTick>
 80018c4:	1b80      	subs	r0, r0, r6
 80018c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80018ca:	4298      	cmp	r0, r3
 80018cc:	d9f3      	bls.n	80018b6 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80018ce:	2003      	movs	r0, #3
 80018d0:	e06a      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d2:	b9f5      	cbnz	r5, 8001912 <HAL_RCC_OscConfig+0x332>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d4:	69a3      	ldr	r3, [r4, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d065      	beq.n	80019a6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018da:	4a35      	ldr	r2, [pc, #212]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 80018dc:	6892      	ldr	r2, [r2, #8]
 80018de:	f002 020c 	and.w	r2, r2, #12
 80018e2:	2a08      	cmp	r2, #8
 80018e4:	d062      	beq.n	80019ac <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d019      	beq.n	800191e <HAL_RCC_OscConfig+0x33e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4a31      	ldr	r2, [pc, #196]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 80018ec:	6813      	ldr	r3, [r2, #0]
 80018ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7fe febc 	bl	8000670 <HAL_GetTick>
 80018f8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001902:	d048      	beq.n	8001996 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001904:	f7fe feb4 	bl	8000670 <HAL_GetTick>
 8001908:	1b00      	subs	r0, r0, r4
 800190a:	2802      	cmp	r0, #2
 800190c:	d9f5      	bls.n	80018fa <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 800190e:	2003      	movs	r0, #3
 8001910:	e04a      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001912:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 8001914:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191a:	6413      	str	r3, [r2, #64]	; 0x40
 800191c:	e7da      	b.n	80018d4 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 800191e:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 8001920:	6813      	ldr	r3, [r2, #0]
 8001922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001928:	f7fe fea2 	bl	8000670 <HAL_GetTick>
 800192c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001936:	d006      	beq.n	8001946 <HAL_RCC_OscConfig+0x366>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001938:	f7fe fe9a 	bl	8000670 <HAL_GetTick>
 800193c:	1b40      	subs	r0, r0, r5
 800193e:	2802      	cmp	r0, #2
 8001940:	d9f5      	bls.n	800192e <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8001942:	2003      	movs	r0, #3
 8001944:	e030      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001946:	69e3      	ldr	r3, [r4, #28]
 8001948:	6a22      	ldr	r2, [r4, #32]
 800194a:	4313      	orrs	r3, r2
 800194c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800194e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001952:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
 8001958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800195c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800195e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001962:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001964:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001968:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 800196a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001974:	f7fe fe7c 	bl	8000670 <HAL_GetTick>
 8001978:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_RCC_OscConfig+0x3d0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7fe fe74 	bl	8000670 <HAL_GetTick>
 8001988:	1b00      	subs	r0, r0, r4
 800198a:	2802      	cmp	r0, #2
 800198c:	d9f5      	bls.n	800197a <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 800198e:	2003      	movs	r0, #3
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001992:	2000      	movs	r0, #0
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
 8001996:	2000      	movs	r0, #0
 8001998:	e006      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 800199a:	2001      	movs	r0, #1
}
 800199c:	4770      	bx	lr
        return HAL_ERROR;
 800199e:	2001      	movs	r0, #1
 80019a0:	e002      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
        return HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
 80019a4:	e000      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 80019a6:	2000      	movs	r0, #0
}
 80019a8:	b002      	add	sp, #8
 80019aa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80019ac:	2001      	movs	r0, #1
 80019ae:	e7fb      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
 80019b0:	40023800 	.word	0x40023800

080019b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x98>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d03f      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x8e>
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d13f      	bne.n	8001a46 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x98>)
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80019d4:	d012      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x98>)
 80019d8:	6859      	ldr	r1, [r3, #4]
 80019da:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019de:	481c      	ldr	r0, [pc, #112]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019e0:	2300      	movs	r3, #0
 80019e2:	fba1 0100 	umull	r0, r1, r1, r0
 80019e6:	f7fe fc83 	bl	80002f0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x98>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019f2:	3301      	adds	r3, #1
 80019f4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80019f6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80019fa:	e025      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x98>)
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001a04:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001a08:	ebb1 000c 	subs.w	r0, r1, ip
 8001a0c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001a10:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001a14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a18:	0181      	lsls	r1, r0, #6
 8001a1a:	1a09      	subs	r1, r1, r0
 8001a1c:	eb63 030e 	sbc.w	r3, r3, lr
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a26:	00c9      	lsls	r1, r1, #3
 8001a28:	eb11 0c0c 	adds.w	ip, r1, ip
 8001a2c:	f143 0300 	adc.w	r3, r3, #0
 8001a30:	0299      	lsls	r1, r3, #10
 8001a32:	2300      	movs	r3, #0
 8001a34:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001a38:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001a3c:	f7fe fc58 	bl	80002f0 <__aeabi_uldivmod>
 8001a40:	e7d3      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a44:	e000      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a46:	4803      	ldr	r0, [pc, #12]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a48:	bd08      	pop	{r3, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	017d7840 	.word	0x017d7840
 8001a54:	00f42400 	.word	0x00f42400

08001a58 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	f000 809f 	beq.w	8001b9c <HAL_RCC_ClockConfig+0x144>
{
 8001a5e:	b570      	push	{r4, r5, r6, lr}
 8001a60:	460d      	mov	r5, r1
 8001a62:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b51      	ldr	r3, [pc, #324]	; (8001bac <HAL_RCC_ClockConfig+0x154>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	428b      	cmp	r3, r1
 8001a6e:	d20b      	bcs.n	8001a88 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a70:	4a4e      	ldr	r2, [pc, #312]	; (8001bac <HAL_RCC_ClockConfig+0x154>)
 8001a72:	6813      	ldr	r3, [r2, #0]
 8001a74:	f023 030f 	bic.w	r3, r3, #15
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7c:	6813      	ldr	r3, [r2, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	428b      	cmp	r3, r1
 8001a84:	f040 808c 	bne.w	8001ba0 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f013 0f02 	tst.w	r3, #2
 8001a8e:	d017      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	f013 0f04 	tst.w	r3, #4
 8001a94:	d004      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a96:	4a46      	ldr	r2, [pc, #280]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001a98:	6893      	ldr	r3, [r2, #8]
 8001a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	f013 0f08 	tst.w	r3, #8
 8001aa6:	d004      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa8:	4a41      	ldr	r2, [pc, #260]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001aaa:	6893      	ldr	r3, [r2, #8]
 8001aac:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab2:	4a3f      	ldr	r2, [pc, #252]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001ab4:	6893      	ldr	r3, [r2, #8]
 8001ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aba:	68a1      	ldr	r1, [r4, #8]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	f013 0f01 	tst.w	r3, #1
 8001ac6:	d031      	beq.n	8001b2c <HAL_RCC_ClockConfig+0xd4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d020      	beq.n	8001b10 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d025      	beq.n	8001b1e <HAL_RCC_ClockConfig+0xc6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad2:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	f012 0f02 	tst.w	r2, #2
 8001ada:	d063      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x14c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001adc:	4934      	ldr	r1, [pc, #208]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001ade:	688a      	ldr	r2, [r1, #8]
 8001ae0:	f022 0203 	bic.w	r2, r2, #3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001ae8:	f7fe fdc2 	bl	8000670 <HAL_GetTick>
 8001aec:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	6862      	ldr	r2, [r4, #4]
 8001af8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001afc:	d016      	beq.n	8001b2c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afe:	f7fe fdb7 	bl	8000670 <HAL_GetTick>
 8001b02:	1b80      	subs	r0, r0, r6
 8001b04:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b08:	4298      	cmp	r0, r3
 8001b0a:	d9f0      	bls.n	8001aee <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	e044      	b.n	8001b9a <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b10:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001b18:	d1e0      	bne.n	8001adc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	e03d      	b.n	8001b9a <HAL_RCC_ClockConfig+0x142>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001b26:	d1d9      	bne.n	8001adc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001b28:	2001      	movs	r0, #1
 8001b2a:	e036      	b.n	8001b9a <HAL_RCC_ClockConfig+0x142>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_RCC_ClockConfig+0x154>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	42ab      	cmp	r3, r5
 8001b36:	d90a      	bls.n	8001b4e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b38:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_RCC_ClockConfig+0x154>)
 8001b3a:	6813      	ldr	r3, [r2, #0]
 8001b3c:	f023 030f 	bic.w	r3, r3, #15
 8001b40:	432b      	orrs	r3, r5
 8001b42:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	42ab      	cmp	r3, r5
 8001b4c:	d12c      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	f013 0f04 	tst.w	r3, #4
 8001b54:	d006      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b56:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001b58:	6893      	ldr	r3, [r2, #8]
 8001b5a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b5e:	68e1      	ldr	r1, [r4, #12]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	f013 0f08 	tst.w	r3, #8
 8001b6a:	d007      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b6c:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001b6e:	6893      	ldr	r3, [r2, #8]
 8001b70:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b74:	6921      	ldr	r1, [r4, #16]
 8001b76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b7a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b7c:	f7ff ff1a 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_ClockConfig+0x158>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_RCC_ClockConfig+0x15c>)
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	40d8      	lsrs	r0, r3
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x160>)
 8001b90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7fe fd2e 	bl	80005f4 <HAL_InitTick>
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
}
 8001b9a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001b9c:	2001      	movs	r0, #1
}
 8001b9e:	4770      	bx	lr
      return HAL_ERROR;
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	e7fa      	b.n	8001b9a <HAL_RCC_ClockConfig+0x142>
        return HAL_ERROR;
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	e7f8      	b.n	8001b9a <HAL_RCC_ClockConfig+0x142>
      return HAL_ERROR;
 8001ba8:	2001      	movs	r0, #1
 8001baa:	e7f6      	b.n	8001b9a <HAL_RCC_ClockConfig+0x142>
 8001bac:	40023c00 	.word	0x40023c00
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	08008d9c 	.word	0x08008d9c
 8001bb8:	2000000c 	.word	0x2000000c

08001bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bc2:	6806      	ldr	r6, [r0, #0]
 8001bc4:	f016 0601 	ands.w	r6, r6, #1
 8001bc8:	d00d      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001bca:	4bb5      	ldr	r3, [pc, #724]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001bdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8155 	beq.w	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  uint32_t plli2sused = 0;
 8001be4:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001be6:	6825      	ldr	r5, [r4, #0]
 8001be8:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8001bec:	d011      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bee:	4aac      	ldr	r2, [pc, #688]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001bf0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001bf4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001bf8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c06:	f000 8144 	beq.w	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8143 	beq.w	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  uint32_t pllsaiused = 0;
 8001c10:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001c18:	d00f      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c1a:	4aa1      	ldr	r2, [pc, #644]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c1c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001c20:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c24:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001c26:	430b      	orrs	r3, r1
 8001c28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c32:	f000 8132 	beq.w	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c36:	b903      	cbnz	r3, 8001c3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8001c38:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001c40:	d000      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 8001c42:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c44:	f013 0f20 	tst.w	r3, #32
 8001c48:	f040 812c 	bne.w	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	f013 0f10 	tst.w	r3, #16
 8001c52:	d00c      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c54:	4b92      	ldr	r3, [pc, #584]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c56:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c5a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001c62:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001c74:	d008      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c76:	4a8a      	ldr	r2, [pc, #552]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c7c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c80:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001c82:	430b      	orrs	r3, r1
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c90:	4a83      	ldr	r2, [pc, #524]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001c92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c96:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001c9a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ca8:	d008      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001caa:	4a7d      	ldr	r2, [pc, #500]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cb0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001cb4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001cc4:	4a76      	ldr	r2, [pc, #472]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001cce:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cdc:	d008      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cde:	4a70      	ldr	r2, [pc, #448]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ce0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ce4:	f023 0303 	bic.w	r3, r3, #3
 8001ce8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001cea:	430b      	orrs	r3, r1
 8001cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cf8:	4a69      	ldr	r2, [pc, #420]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cfa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cfe:	f023 030c 	bic.w	r3, r3, #12
 8001d02:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001d04:	430b      	orrs	r3, r1
 8001d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d10:	d008      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d12:	4a63      	ldr	r2, [pc, #396]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d18:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d1c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d2c:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d36:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001d44:	d008      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d46:	4a56      	ldr	r2, [pc, #344]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d48:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d50:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001d52:	430b      	orrs	r3, r1
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d60:	4a4f      	ldr	r2, [pc, #316]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d66:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001d78:	d008      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d7a:	4a49      	ldr	r2, [pc, #292]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d7c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001d86:	430b      	orrs	r3, r1
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001d92:	d008      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d94:	4a42      	ldr	r2, [pc, #264]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d96:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d9e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001da0:	430b      	orrs	r3, r1
 8001da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dac:	d008      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dae:	4a3c      	ldr	r2, [pc, #240]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001db0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001db4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001db8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001dc6:	d00d      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001dc8:	4a35      	ldr	r2, [pc, #212]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001dce:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001dd2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001dda:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001de0:	f000 80c6 	beq.w	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	f013 0f08 	tst.w	r3, #8
 8001dea:	d000      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 8001dec:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001dee:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001df2:	d008      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001df4:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001df6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001dfa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001dfe:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001e00:	430b      	orrs	r3, r1
 8001e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e0e:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e10:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e18:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001e28:	d009      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001e2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001e34:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001e44:	d009      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e48:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e4c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001e50:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8001e54:	430b      	orrs	r3, r1
 8001e56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e60:	d009      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e62:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e64:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e6c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001e70:	430b      	orrs	r3, r1
 8001e72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e76:	2e00      	cmp	r6, #0
 8001e78:	d17c      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e80:	d078      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001e82:	2d01      	cmp	r5, #1
 8001e84:	f000 8109 	beq.w	800209a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001e88:	2000      	movs	r0, #0
}
 8001e8a:	b003      	add	sp, #12
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1;
 8001e8e:	2601      	movs	r6, #1
 8001e90:	e6a9      	b.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8001e92:	2601      	movs	r6, #1
 8001e94:	e6b9      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8001e96:	2501      	movs	r5, #1
 8001e98:	e6bb      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 8001e9a:	2601      	movs	r6, #1
 8001e9c:	e6cb      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea4:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001eb8:	4a83      	ldr	r2, [pc, #524]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001eba:	6813      	ldr	r3, [r2, #0]
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ec2:	f7fe fbd5 	bl	8000670 <HAL_GetTick>
 8001ec6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ec8:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ed0:	d106      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f7fe fbcd 	bl	8000670 <HAL_GetTick>
 8001ed6:	1bc0      	subs	r0, r0, r7
 8001ed8:	2864      	cmp	r0, #100	; 0x64
 8001eda:	d9f5      	bls.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8001edc:	2003      	movs	r0, #3
 8001ede:	e7d4      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ee0:	4b78      	ldr	r3, [pc, #480]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ee8:	d015      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8001eea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001eec:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ef4:	4b73      	ldr	r3, [pc, #460]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ef8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001efc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001efe:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001f02:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001f06:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001f0a:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001f0c:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	f013 0f01 	tst.w	r3, #1
 8001f14:	d112      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f18:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001f1c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001f20:	d01d      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001f22:	4a68      	ldr	r2, [pc, #416]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f24:	6893      	ldr	r3, [r2, #8]
 8001f26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f2a:	6093      	str	r3, [r2, #8]
 8001f2c:	4965      	ldr	r1, [pc, #404]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f2e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001f30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f32:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001f36:	4313      	orrs	r3, r2
 8001f38:	670b      	str	r3, [r1, #112]	; 0x70
 8001f3a:	e687      	b.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fb98 	bl	8000670 <HAL_GetTick>
 8001f40:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	4b60      	ldr	r3, [pc, #384]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	f013 0f02 	tst.w	r3, #2
 8001f4a:	d1e4      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7fe fb90 	bl	8000670 <HAL_GetTick>
 8001f50:	1bc0      	subs	r0, r0, r7
 8001f52:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f56:	4298      	cmp	r0, r3
 8001f58:	d9f3      	bls.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	e795      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f5e:	4859      	ldr	r0, [pc, #356]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f60:	6882      	ldr	r2, [r0, #8]
 8001f62:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001f66:	4959      	ldr	r1, [pc, #356]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001f68:	4019      	ands	r1, r3
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	6082      	str	r2, [r0, #8]
 8001f6e:	e7dd      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1;
 8001f70:	2501      	movs	r5, #1
 8001f72:	e737      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_PLLI2S_DISABLE();
 8001f74:	4a53      	ldr	r2, [pc, #332]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f7c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f7e:	f7fe fb77 	bl	8000670 <HAL_GetTick>
 8001f82:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f84:	4b4f      	ldr	r3, [pc, #316]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f8c:	d006      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f8e:	f7fe fb6f 	bl	8000670 <HAL_GetTick>
 8001f92:	1b80      	subs	r0, r0, r6
 8001f94:	2864      	cmp	r0, #100	; 0x64
 8001f96:	d9f5      	bls.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8001f98:	2003      	movs	r0, #3
 8001f9a:	e776      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	f013 0f01 	tst.w	r3, #1
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8001fa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fa6:	b98b      	cbnz	r3, 8001fcc <HAL_RCCEx_PeriphCLKConfig+0x410>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fa8:	4a46      	ldr	r2, [pc, #280]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001faa:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fae:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fb2:	6860      	ldr	r0, [r4, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001fbc:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	68a1      	ldr	r1, [r4, #8]
 8001fc4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001fc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001fd2:	d003      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8001fd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001fd6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001fda:	d006      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001fdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001fe0:	d01e      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x464>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe8:	d11a      	bne.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x464>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fea:	4a36      	ldr	r2, [pc, #216]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8001fec:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ff0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ff4:	6860      	ldr	r0, [r4, #4]
 8001ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001ffe:	68e0      	ldr	r0, [r4, #12]
 8002000:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002004:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002008:	430b      	orrs	r3, r1
 800200a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800200e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002012:	f023 031f 	bic.w	r3, r3, #31
 8002016:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002018:	3901      	subs	r1, #1
 800201a:	430b      	orrs	r3, r1
 800201c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002026:	d011      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x490>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002028:	4a26      	ldr	r2, [pc, #152]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800202a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800202e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002032:	6866      	ldr	r6, [r4, #4]
 8002034:	6923      	ldr	r3, [r4, #16]
 8002036:	041b      	lsls	r3, r3, #16
 8002038:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800203c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002040:	4303      	orrs	r3, r0
 8002042:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002046:	430b      	orrs	r3, r1
 8002048:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002052:	d00d      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002054:	6862      	ldr	r2, [r4, #4]
 8002056:	6923      	ldr	r3, [r4, #16]
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800205e:	68e2      	ldr	r2, [r4, #12]
 8002060:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002064:	68a2      	ldr	r2, [r4, #8]
 8002066:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800206a:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800206c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002078:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800207a:	f7fe faf9 	bl	8000670 <HAL_GetTick>
 800207e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002088:	f47f aefb 	bne.w	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800208c:	f7fe faf0 	bl	8000670 <HAL_GetTick>
 8002090:	1b80      	subs	r0, r0, r6
 8002092:	2864      	cmp	r0, #100	; 0x64
 8002094:	d9f4      	bls.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        return HAL_TIMEOUT;
 8002096:	2003      	movs	r0, #3
 8002098:	e6f7      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    __HAL_RCC_PLLSAI_DISABLE();
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80020a4:	f7fe fae4 	bl	8000670 <HAL_GetTick>
 80020a8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x508>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80020b2:	d00d      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020b4:	f7fe fadc 	bl	8000670 <HAL_GetTick>
 80020b8:	1b40      	subs	r0, r0, r5
 80020ba:	2864      	cmp	r0, #100	; 0x64
 80020bc:	d9f5      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
        return HAL_TIMEOUT;
 80020be:	2003      	movs	r0, #3
 80020c0:	e6e3      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40007000 	.word	0x40007000
 80020cc:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80020d6:	d001      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x520>
 80020d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80020da:	b122      	cbz	r2, 80020e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80020dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80020e0:	d01d      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x562>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020e4:	b9db      	cbnz	r3, 800211e <HAL_RCCEx_PeriphCLKConfig+0x562>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020e6:	4a35      	ldr	r2, [pc, #212]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80020e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020ec:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020f0:	6960      	ldr	r0, [r4, #20]
 80020f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80020fa:	69a0      	ldr	r0, [r4, #24]
 80020fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002100:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002104:	430b      	orrs	r3, r1
 8002106:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800210a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800210e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002112:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002114:	3901      	subs	r1, #1
 8002116:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800211a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002124:	d003      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002126:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800212c:	d031      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	f013 0f08 	tst.w	r3, #8
 8002134:	d019      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002136:	4a21      	ldr	r2, [pc, #132]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002138:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800213c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002140:	6960      	ldr	r0, [r4, #20]
 8002142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002146:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800214a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800214e:	430b      	orrs	r3, r1
 8002150:	69e1      	ldr	r1, [r4, #28]
 8002152:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002156:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800215a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800215e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002162:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002164:	430b      	orrs	r3, r1
 8002166:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x600>)
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002172:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002174:	f7fe fa7c 	bl	8000670 <HAL_GetTick>
 8002178:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x600>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002182:	d119      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002184:	f7fe fa74 	bl	8000670 <HAL_GetTick>
 8002188:	1b00      	subs	r0, r0, r4
 800218a:	2864      	cmp	r0, #100	; 0x64
 800218c:	d9f5      	bls.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x5be>
        return HAL_TIMEOUT;
 800218e:	2003      	movs	r0, #3
 8002190:	e67b      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8002194:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002198:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800219c:	6965      	ldr	r5, [r4, #20]
 800219e:	6a23      	ldr	r3, [r4, #32]
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80021a6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80021aa:	4303      	orrs	r3, r0
 80021ac:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80021b0:	430b      	orrs	r3, r1
 80021b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80021b6:	e7ba      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x572>
  return HAL_OK;
 80021b8:	2000      	movs	r0, #0
 80021ba:	e666      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80021bc:	40023800 	.word	0x40023800

080021c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021c0:	4603      	mov	r3, r0
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80021c2:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80021c6:	d004      	beq.n	80021d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
  uint32_t frequency = 0;
 80021c8:	2000      	movs	r0, #0
        break;
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80021ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ce:	d071      	beq.n	80022b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      }
    }
  }

  return frequency;
}
 80021d0:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;
 80021d2:	4a70      	ldr	r2, [pc, #448]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80021d4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80021d8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 80021dc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80021e0:	d064      	beq.n	80022ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80021e2:	d826      	bhi.n	8002232 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80021e4:	b38a      	cbz	r2, 800224a <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 80021e6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80021ea:	d120      	bne.n	800222e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80021ec:	4a69      	ldr	r2, [pc, #420]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80021ee:	6852      	ldr	r2, [r2, #4]
 80021f0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80021f4:	d152      	bne.n	800229c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80021f6:	4a67      	ldr	r2, [pc, #412]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80021f8:	6850      	ldr	r0, [r2, #4]
 80021fa:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 80021fe:	4866      	ldr	r0, [pc, #408]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002200:	fbb0 fcfc 	udiv	ip, r0, ip
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002204:	4a63      	ldr	r2, [pc, #396]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002206:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 800220a:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800220e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8002212:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002216:	fb0c f000 	mul.w	r0, ip, r0
 800221a:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800221e:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8002222:	f002 021f 	and.w	r2, r2, #31
 8002226:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 8002228:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 800222c:	e7cd      	b.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 800222e:	2000      	movs	r0, #0
 8002230:	e7cb      	b.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0xa>
 8002232:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002236:	d106      	bne.n	8002246 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002238:	4a56      	ldr	r2, [pc, #344]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800223a:	6852      	ldr	r2, [r2, #4]
 800223c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002240:	d136      	bne.n	80022b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
          frequency = HSI_VALUE;
 8002242:	4855      	ldr	r0, [pc, #340]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002244:	e7c1      	b.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 8002246:	2000      	movs	r0, #0
 8002248:	e7bf      	b.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0xa>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800224a:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800224c:	6852      	ldr	r2, [r2, #4]
 800224e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002252:	d11b      	bne.n	800228c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002254:	4a4f      	ldr	r2, [pc, #316]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002256:	6850      	ldr	r0, [r2, #4]
 8002258:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 800225c:	484e      	ldr	r0, [pc, #312]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800225e:	fbb0 fcfc 	udiv	ip, r0, ip
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002262:	4a4c      	ldr	r2, [pc, #304]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002264:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8002268:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800226c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8002270:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002274:	fb0c f000 	mul.w	r0, ip, r0
 8002278:	fbb0 f0f1 	udiv	r0, r0, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800227c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8002280:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8002284:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 8002286:	fbb0 f0f2 	udiv	r0, r0, r2
        break;
 800228a:	e79e      	b.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800228c:	4a41      	ldr	r2, [pc, #260]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800228e:	6850      	ldr	r0, [r2, #4]
 8002290:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 8002294:	4841      	ldr	r0, [pc, #260]	; (800239c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002296:	fbb0 fcfc 	udiv	ip, r0, ip
 800229a:	e7e2      	b.n	8002262 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800229c:	4a3d      	ldr	r2, [pc, #244]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800229e:	6850      	ldr	r0, [r2, #4]
 80022a0:	f000 0c3f 	and.w	ip, r0, #63	; 0x3f
 80022a4:	483d      	ldr	r0, [pc, #244]	; (800239c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80022a6:	fbb0 fcfc 	udiv	ip, r0, ip
 80022aa:	e7ab      	b.n	8002204 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
        frequency = EXTERNAL_CLOCK_VALUE;
 80022ac:	483c      	ldr	r0, [pc, #240]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80022ae:	e78c      	b.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          frequency = HSE_VALUE;
 80022b0:	483a      	ldr	r0, [pc, #232]	; (800239c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80022b2:	e78a      	b.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;
 80022b4:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80022b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80022ba:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
    switch (saiclocksource)
 80022be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022c2:	d062      	beq.n	800238a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80022c4:	d825      	bhi.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80022c6:	b37b      	cbz	r3, 8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80022c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022cc:	d120      	bne.n	8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80022d6:	d150      	bne.n	800237a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80022d8:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80022e0:	482d      	ldr	r0, [pc, #180]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80022e2:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80022e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80022ec:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80022f0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80022f4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80022f8:	fb01 f000 	mul.w	r0, r1, r0
 80022fc:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8002300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 800230a:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800230e:	4770      	bx	lr
 8002310:	4770      	bx	lr
    switch (saiclocksource)
 8002312:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002316:	d106      	bne.n	8002326 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002318:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002320:	d135      	bne.n	800238e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
          frequency = HSI_VALUE;
 8002322:	481d      	ldr	r0, [pc, #116]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8002324:	4770      	bx	lr
 8002326:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002330:	d11b      	bne.n	800236a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002334:	6859      	ldr	r1, [r3, #4]
 8002336:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800233a:	4817      	ldr	r0, [pc, #92]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800233c:	fbb0 f1f1 	udiv	r1, r0, r1
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8002342:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002346:	f3c2 6203 	ubfx	r2, r2, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800234a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800234e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002352:	fb01 f000 	mul.w	r0, r1, r0
 8002356:	fbb0 f0f2 	udiv	r0, r0, r2
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800235a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800235e:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8002362:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8002364:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002368:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800236c:	6859      	ldr	r1, [r3, #4]
 800236e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002372:	480a      	ldr	r0, [pc, #40]	; (800239c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002374:	fbb0 f1f1 	udiv	r1, r0, r1
 8002378:	e7e2      	b.n	8002340 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002382:	4806      	ldr	r0, [pc, #24]	; (800239c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8002384:	fbb0 f1f1 	udiv	r1, r0, r1
 8002388:	e7ad      	b.n	80022e6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
        frequency = EXTERNAL_CLOCK_VALUE;
 800238a:	4805      	ldr	r0, [pc, #20]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800238c:	4770      	bx	lr
          frequency = HSE_VALUE;
 800238e:	4803      	ldr	r0, [pc, #12]	; (800239c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
  return frequency;
 8002390:	e71e      	b.n	80021d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	00f42400 	.word	0x00f42400
 800239c:	017d7840 	.word	0x017d7840
 80023a0:	00ac4400 	.word	0x00ac4400

080023a4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80023a4:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80023a6:	2400      	movs	r4, #0
 80023a8:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80023aa:	6384      	str	r4, [r0, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80023ac:	6844      	ldr	r4, [r0, #4]
 80023ae:	2c02      	cmp	r4, #2
 80023b0:	bf18      	it	ne
 80023b2:	2c00      	cmpne	r4, #0
 80023b4:	d117      	bne.n	80023e6 <SAI_InitI2S+0x42>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80023b6:	2400      	movs	r4, #0
 80023b8:	63c4      	str	r4, [r0, #60]	; 0x3c
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80023ba:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80023be:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80023c0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80023c4:	6604      	str	r4, [r0, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80023c6:	2400      	movs	r4, #0
 80023c8:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80023ca:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if((nbslot & 0x1) != 0 )
 80023cc:	f013 0f01 	tst.w	r3, #1
 80023d0:	d14e      	bne.n	8002470 <SAI_InitI2S+0xcc>
  {
    return HAL_ERROR;
  }

  switch(protocol)
 80023d2:	b159      	cbz	r1, 80023ec <SAI_InitI2S+0x48>
 80023d4:	1e4c      	subs	r4, r1, #1
 80023d6:	2c01      	cmp	r4, #1
 80023d8:	d84d      	bhi.n	8002476 <SAI_InitI2S+0xd2>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
    break;
  case SAI_I2S_MSBJUSTIFIED :
  case SAI_I2S_LSBJUSTIFIED :
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80023da:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 80023de:	64c4      	str	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80023e0:	2400      	movs	r4, #0
 80023e2:	6504      	str	r4, [r0, #80]	; 0x50
    break;
 80023e4:	e007      	b.n	80023f6 <SAI_InitI2S+0x52>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80023e6:	2401      	movs	r4, #1
 80023e8:	63c4      	str	r4, [r0, #60]	; 0x3c
 80023ea:	e7e6      	b.n	80023ba <SAI_InitI2S+0x16>
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80023ec:	2400      	movs	r4, #0
 80023ee:	64c4      	str	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80023f0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80023f4:	6504      	str	r4, [r0, #80]	; 0x50
  default :
    return HAL_ERROR;
  }

  /* Frame definition */
  switch(datasize)
 80023f6:	2a03      	cmp	r2, #3
 80023f8:	d83f      	bhi.n	800247a <SAI_InitI2S+0xd6>
 80023fa:	e8df f002 	tbb	[pc, r2]
 80023fe:	0f02      	.short	0x0f02
 8002400:	2218      	.short	0x2218
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002402:	2480      	movs	r4, #128	; 0x80
 8002404:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	015c      	lsls	r4, r3, #5
 800240a:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	6583      	str	r3, [r0, #88]	; 0x58
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
    break;
  default :
    return HAL_ERROR;
  }
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 8002414:	2902      	cmp	r1, #2
 8002416:	d01e      	beq.n	8002456 <SAI_InitI2S+0xb2>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return HAL_OK;
 8002418:	2000      	movs	r0, #0
 800241a:	e02a      	b.n	8002472 <SAI_InitI2S+0xce>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800241c:	2480      	movs	r4, #128	; 0x80
 800241e:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	019d      	lsls	r5, r3, #6
 8002424:	6405      	str	r5, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002426:	015b      	lsls	r3, r3, #5
 8002428:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800242a:	6584      	str	r4, [r0, #88]	; 0x58
    break;
 800242c:	e7f2      	b.n	8002414 <SAI_InitI2S+0x70>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 800242e:	24c0      	movs	r4, #192	; 0xc0
 8002430:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	019c      	lsls	r4, r3, #6
 8002436:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002438:	015b      	lsls	r3, r3, #5
 800243a:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	6583      	str	r3, [r0, #88]	; 0x58
    break;
 8002440:	e7e8      	b.n	8002414 <SAI_InitI2S+0x70>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002442:	24e0      	movs	r4, #224	; 0xe0
 8002444:	6344      	str	r4, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	019c      	lsls	r4, r3, #6
 800244a:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800244c:	015b      	lsls	r3, r3, #5
 800244e:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	6583      	str	r3, [r0, #88]	; 0x58
    break;
 8002454:	e7de      	b.n	8002414 <SAI_InitI2S+0x70>
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8002456:	2a01      	cmp	r2, #1
 8002458:	d003      	beq.n	8002462 <SAI_InitI2S+0xbe>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800245a:	2a02      	cmp	r2, #2
 800245c:	d004      	beq.n	8002468 <SAI_InitI2S+0xc4>
  return HAL_OK;
 800245e:	2000      	movs	r0, #0
 8002460:	e007      	b.n	8002472 <SAI_InitI2S+0xce>
      hsai->SlotInit.FirstBitOffset = 16;
 8002462:	2310      	movs	r3, #16
 8002464:	6543      	str	r3, [r0, #84]	; 0x54
 8002466:	e7f8      	b.n	800245a <SAI_InitI2S+0xb6>
      hsai->SlotInit.FirstBitOffset = 8;
 8002468:	2308      	movs	r3, #8
 800246a:	6543      	str	r3, [r0, #84]	; 0x54
  return HAL_OK;
 800246c:	2000      	movs	r0, #0
 800246e:	e000      	b.n	8002472 <SAI_InitI2S+0xce>
    return HAL_ERROR;
 8002470:	2001      	movs	r0, #1
}
 8002472:	bc30      	pop	{r4, r5}
 8002474:	4770      	bx	lr
  switch(protocol)
 8002476:	2001      	movs	r0, #1
 8002478:	e7fb      	b.n	8002472 <SAI_InitI2S+0xce>
  switch(datasize)
 800247a:	2001      	movs	r0, #1
 800247c:	e7f9      	b.n	8002472 <SAI_InitI2S+0xce>

0800247e <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800247e:	b430      	push	{r4, r5}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002480:	2400      	movs	r4, #0
 8002482:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8002484:	6384      	str	r4, [r0, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002486:	6844      	ldr	r4, [r0, #4]
 8002488:	2c02      	cmp	r4, #2
 800248a:	bf18      	it	ne
 800248c:	2c00      	cmpne	r4, #0
 800248e:	d11a      	bne.n	80024c6 <SAI_InitPCM+0x48>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8002490:	2401      	movs	r4, #1
 8002492:	63c4      	str	r4, [r0, #60]	; 0x3c
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8002494:	2400      	movs	r4, #0
 8002496:	6484      	str	r4, [r0, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8002498:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800249c:	64c5      	str	r5, [r0, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800249e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80024a2:	6505      	str	r5, [r0, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80024a4:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80024a6:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80024a8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80024ac:	6604      	str	r4, [r0, #96]	; 0x60

  switch(protocol)
 80024ae:	2903      	cmp	r1, #3
 80024b0:	d00c      	beq.n	80024cc <SAI_InitPCM+0x4e>
 80024b2:	2904      	cmp	r1, #4
 80024b4:	d12c      	bne.n	8002510 <SAI_InitPCM+0x92>
  {
  case SAI_PCM_SHORT :
    hsai->FrameInit.ActiveFrameLength = 1;
 80024b6:	2101      	movs	r1, #1
 80024b8:	6441      	str	r1, [r0, #68]	; 0x44
    break;
  default :
    return HAL_ERROR;
  }

  switch(datasize)
 80024ba:	2a03      	cmp	r2, #3
 80024bc:	d82b      	bhi.n	8002516 <SAI_InitPCM+0x98>
 80024be:	e8df f002 	tbb	[pc, r2]
 80024c2:	1008      	.short	0x1008
 80024c4:	1f17      	.short	0x1f17
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80024c6:	2400      	movs	r4, #0
 80024c8:	63c4      	str	r4, [r0, #60]	; 0x3c
 80024ca:	e7e3      	b.n	8002494 <SAI_InitPCM+0x16>
    hsai->FrameInit.ActiveFrameLength = 13;
 80024cc:	210d      	movs	r1, #13
 80024ce:	6441      	str	r1, [r0, #68]	; 0x44
    break;
 80024d0:	e7f3      	b.n	80024ba <SAI_InitPCM+0x3c>
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80024da:	2340      	movs	r3, #64	; 0x40
 80024dc:	6583      	str	r3, [r0, #88]	; 0x58
    break;
  default :
    return HAL_ERROR;
  }

  return HAL_OK;
 80024de:	2000      	movs	r0, #0
    break;
 80024e0:	e017      	b.n	8002512 <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80024ea:	6582      	str	r2, [r0, #88]	; 0x58
  return HAL_OK;
 80024ec:	2000      	movs	r0, #0
    break;
 80024ee:	e010      	b.n	8002512 <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 80024f0:	22c0      	movs	r2, #192	; 0xc0
 80024f2:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 80024f4:	015b      	lsls	r3, r3, #5
 80024f6:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 80024fc:	2000      	movs	r0, #0
    break;
 80024fe:	e008      	b.n	8002512 <SAI_InitPCM+0x94>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002500:	22e0      	movs	r2, #224	; 0xe0
 8002502:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002504:	015b      	lsls	r3, r3, #5
 8002506:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 800250c:	2000      	movs	r0, #0
    break;
 800250e:	e000      	b.n	8002512 <SAI_InitPCM+0x94>
  switch(protocol)
 8002510:	2001      	movs	r0, #1
}
 8002512:	bc30      	pop	{r4, r5}
 8002514:	4770      	bx	lr
  switch(datasize)
 8002516:	2001      	movs	r0, #1
 8002518:	e7fb      	b.n	8002512 <SAI_InitPCM+0x94>
	...

0800251c <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <SAI_Disable+0x3c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <SAI_Disable+0x40>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	0b1b      	lsrs	r3, r3, #12
 8002528:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800252a:	6801      	ldr	r1, [r0, #0]
 800252c:	680a      	ldr	r2, [r1, #0]
 800252e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002532:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8002534:	461a      	mov	r2, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b132      	cbz	r2, 8002548 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800253a:	6802      	ldr	r2, [r0, #0]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002542:	d1f7      	bne.n	8002534 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8002544:	2000      	movs	r0, #0

  return status;
}
 8002546:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002548:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800254c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002550:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8002554:	2003      	movs	r0, #3
      break;
 8002556:	4770      	bx	lr
 8002558:	2000000c 	.word	0x2000000c
 800255c:	95cbec1b 	.word	0x95cbec1b

08002560 <HAL_SAI_Init>:
  if(hsai == NULL)
 8002560:	2800      	cmp	r0, #0
 8002562:	f000 80eb 	beq.w	800273c <HAL_SAI_Init+0x1dc>
{
 8002566:	b538      	push	{r3, r4, r5, lr}
 8002568:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 800256a:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80b6 	beq.w	80026e0 <HAL_SAI_Init+0x180>
  hsai->State = HAL_SAI_STATE_BUSY;
 8002574:	2302      	movs	r3, #2
 8002576:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 800257a:	4620      	mov	r0, r4
 800257c:	f7ff ffce 	bl	800251c <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8002580:	68e3      	ldr	r3, [r4, #12]
 8002582:	2b01      	cmp	r3, #1
 8002584:	f000 80b1 	beq.w	80026ea <HAL_SAI_Init+0x18a>
 8002588:	2b02      	cmp	r3, #2
 800258a:	f040 80b0 	bne.w	80026ee <HAL_SAI_Init+0x18e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800258e:	2220      	movs	r2, #32
  switch(hsai->Init.Synchro)
 8002590:	68a3      	ldr	r3, [r4, #8]
 8002592:	2b02      	cmp	r3, #2
 8002594:	f000 80b5 	beq.w	8002702 <HAL_SAI_Init+0x1a2>
 8002598:	2b03      	cmp	r3, #3
 800259a:	f000 80ad 	beq.w	80026f8 <HAL_SAI_Init+0x198>
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f000 80a7 	beq.w	80026f2 <HAL_SAI_Init+0x192>
 80025a4:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	4865      	ldr	r0, [pc, #404]	; (8002740 <HAL_SAI_Init+0x1e0>)
 80025aa:	4966      	ldr	r1, [pc, #408]	; (8002744 <HAL_SAI_Init+0x1e4>)
 80025ac:	428b      	cmp	r3, r1
 80025ae:	bf18      	it	ne
 80025b0:	4283      	cmpne	r3, r0
 80025b2:	f040 80a9 	bne.w	8002708 <HAL_SAI_Init+0x1a8>
    SAI1->GCR = tmpregisterGCR;
 80025b6:	4b64      	ldr	r3, [pc, #400]	; (8002748 <HAL_SAI_Init+0x1e8>)
 80025b8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80025bc:	69e3      	ldr	r3, [r4, #28]
 80025be:	b323      	cbz	r3, 800260a <HAL_SAI_Init+0xaa>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	495f      	ldr	r1, [pc, #380]	; (8002740 <HAL_SAI_Init+0x1e0>)
 80025c4:	4a5f      	ldr	r2, [pc, #380]	; (8002744 <HAL_SAI_Init+0x1e4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	bf18      	it	ne
 80025ca:	428b      	cmpne	r3, r1
 80025cc:	f000 80a0 	beq.w	8002710 <HAL_SAI_Init+0x1b0>
    uint32_t freq = 0;
 80025d0:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	495d      	ldr	r1, [pc, #372]	; (800274c <HAL_SAI_Init+0x1ec>)
 80025d6:	4a5e      	ldr	r2, [pc, #376]	; (8002750 <HAL_SAI_Init+0x1f0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	bf18      	it	ne
 80025dc:	428b      	cmpne	r3, r1
 80025de:	f000 809c 	beq.w	800271a <HAL_SAI_Init+0x1ba>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80025e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025e6:	0040      	lsls	r0, r0, #1
 80025e8:	69e3      	ldr	r3, [r4, #28]
 80025ea:	025b      	lsls	r3, r3, #9
 80025ec:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 80025f0:	4b58      	ldr	r3, [pc, #352]	; (8002754 <HAL_SAI_Init+0x1f4>)
 80025f2:	fba3 2300 	umull	r2, r3, r3, r0
 80025f6:	08db      	lsrs	r3, r3, #3
 80025f8:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 80025fa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80025fe:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8002602:	2808      	cmp	r0, #8
 8002604:	d901      	bls.n	800260a <HAL_SAI_Init+0xaa>
      hsai->Init.Mckdiv+= 1;
 8002606:	3301      	adds	r3, #1
 8002608:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800260a:	6863      	ldr	r3, [r4, #4]
 800260c:	2b02      	cmp	r3, #2
 800260e:	bf18      	it	ne
 8002610:	2b00      	cmpne	r3, #0
 8002612:	f040 808a 	bne.w	800272a <HAL_SAI_Init+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8002616:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	f000 8083 	beq.w	8002724 <HAL_SAI_Init+0x1c4>
 800261e:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002622:	6821      	ldr	r1, [r4, #0]
 8002624:	680b      	ldr	r3, [r1, #0]
 8002626:	4a4c      	ldr	r2, [pc, #304]	; (8002758 <HAL_SAI_Init+0x1f8>)
 8002628:	401a      	ands	r2, r3
 800262a:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800262c:	6822      	ldr	r2, [r4, #0]
 800262e:	6811      	ldr	r1, [r2, #0]
 8002630:	6863      	ldr	r3, [r4, #4]
 8002632:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002634:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8002636:	6b60      	ldr	r0, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002638:	4303      	orrs	r3, r0
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800263a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800263c:	4303      	orrs	r3, r0
 800263e:	ea43 030c 	orr.w	r3, r3, ip
                        ckstr_bits | syncen_bits |                               \
 8002642:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8002644:	6a60      	ldr	r0, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8002646:	4303      	orrs	r3, r0
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8002648:	6920      	ldr	r0, [r4, #16]
 800264a:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800264c:	6960      	ldr	r0, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800264e:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8002650:	6a20      	ldr	r0, [r4, #32]
 8002652:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002656:	430b      	orrs	r3, r1
 8002658:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800265a:	6822      	ldr	r2, [r4, #0]
 800265c:	6851      	ldr	r1, [r2, #4]
 800265e:	4b3f      	ldr	r3, [pc, #252]	; (800275c <HAL_SAI_Init+0x1fc>)
 8002660:	400b      	ands	r3, r1
 8002662:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002664:	6821      	ldr	r1, [r4, #0]
 8002666:	684a      	ldr	r2, [r1, #4]
 8002668:	69a3      	ldr	r3, [r4, #24]
 800266a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800266c:	4303      	orrs	r3, r0
 800266e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002670:	4303      	orrs	r3, r0
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002676:	6822      	ldr	r2, [r4, #0]
 8002678:	6891      	ldr	r1, [r2, #8]
 800267a:	4b39      	ldr	r3, [pc, #228]	; (8002760 <HAL_SAI_Init+0x200>)
 800267c:	400b      	ands	r3, r1
 800267e:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002680:	6820      	ldr	r0, [r4, #0]
 8002682:	6882      	ldr	r2, [r0, #8]
 8002684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002686:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8002688:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800268a:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 800268c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800268e:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8002690:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8002692:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8002694:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002696:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8002698:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800269c:	4313      	orrs	r3, r2
 800269e:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80026a0:	6822      	ldr	r2, [r4, #0]
 80026a2:	68d3      	ldr	r3, [r2, #12]
 80026a4:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80026a8:	f023 030f 	bic.w	r3, r3, #15
 80026ac:	041b      	lsls	r3, r3, #16
 80026ae:	0c1b      	lsrs	r3, r3, #16
 80026b0:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80026b2:	6820      	ldr	r0, [r4, #0]
 80026b4:	68c2      	ldr	r2, [r0, #12]
 80026b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026b8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80026ba:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80026bc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80026be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80026c2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80026c4:	3901      	subs	r1, #1
 80026c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80026ce:	2000      	movs	r0, #0
 80026d0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80026da:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80026de:	bd38      	pop	{r3, r4, r5, pc}
    hsai->Lock = HAL_UNLOCKED;
 80026e0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80026e4:	f002 fc62 	bl	8004fac <HAL_SAI_MspInit>
 80026e8:	e744      	b.n	8002574 <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80026ea:	2210      	movs	r2, #16
 80026ec:	e750      	b.n	8002590 <HAL_SAI_Init+0x30>
  switch(hsai->Init.SynchroExt)
 80026ee:	2200      	movs	r2, #0
 80026f0:	e74e      	b.n	8002590 <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80026f2:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80026f6:	e756      	b.n	80025a6 <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80026f8:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80026fc:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8002700:	e751      	b.n	80025a6 <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8002702:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002706:	e74e      	b.n	80025a6 <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_SAI_Init+0x1e8>)
 800270a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800270e:	e755      	b.n	80025bc <HAL_SAI_Init+0x5c>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8002710:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002714:	f7ff fd54 	bl	80021c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002718:	e75b      	b.n	80025d2 <HAL_SAI_Init+0x72>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800271a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800271e:	f7ff fd4f 	bl	80021c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002722:	e75e      	b.n	80025e2 <HAL_SAI_Init+0x82>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8002724:	f04f 0c00 	mov.w	ip, #0
 8002728:	e77b      	b.n	8002622 <HAL_SAI_Init+0xc2>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800272a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d002      	beq.n	8002736 <HAL_SAI_Init+0x1d6>
 8002730:	f04f 0c00 	mov.w	ip, #0
 8002734:	e775      	b.n	8002622 <HAL_SAI_Init+0xc2>
 8002736:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800273a:	e772      	b.n	8002622 <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 800273c:	2001      	movs	r0, #1
}
 800273e:	4770      	bx	lr
 8002740:	40015804 	.word	0x40015804
 8002744:	40015824 	.word	0x40015824
 8002748:	40015000 	.word	0x40015000
 800274c:	40015c04 	.word	0x40015c04
 8002750:	40015c24 	.word	0x40015c24
 8002754:	cccccccd 	.word	0xcccccccd
 8002758:	ff05c010 	.word	0xff05c010
 800275c:	ffff1ff0 	.word	0xffff1ff0
 8002760:	fff88000 	.word	0xfff88000

08002764 <HAL_SAI_InitProtocol>:
{
 8002764:	b510      	push	{r4, lr}
 8002766:	4604      	mov	r4, r0
  switch(protocol)
 8002768:	2902      	cmp	r1, #2
 800276a:	d906      	bls.n	800277a <HAL_SAI_InitProtocol+0x16>
 800276c:	1ec8      	subs	r0, r1, #3
 800276e:	2801      	cmp	r0, #1
 8002770:	d80b      	bhi.n	800278a <HAL_SAI_InitProtocol+0x26>
    status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8002772:	4620      	mov	r0, r4
 8002774:	f7ff fe83 	bl	800247e <SAI_InitPCM>
    break;
 8002778:	e001      	b.n	800277e <HAL_SAI_InitProtocol+0x1a>
    status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800277a:	f7ff fe13 	bl	80023a4 <SAI_InitI2S>
  if(status == HAL_OK)
 800277e:	b100      	cbz	r0, 8002782 <HAL_SAI_InitProtocol+0x1e>
}
 8002780:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 8002782:	4620      	mov	r0, r4
 8002784:	f7ff feec 	bl	8002560 <HAL_SAI_Init>
 8002788:	e7fa      	b.n	8002780 <HAL_SAI_InitProtocol+0x1c>
  switch(protocol)
 800278a:	2001      	movs	r0, #1
 800278c:	e7f8      	b.n	8002780 <HAL_SAI_InitProtocol+0x1c>

0800278e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800278e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002792:	4606      	mov	r6, r0
 8002794:	4688      	mov	r8, r1
 8002796:	4617      	mov	r7, r2
 8002798:	461d      	mov	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800279a:	6834      	ldr	r4, [r6, #0]
 800279c:	68a4      	ldr	r4, [r4, #8]
 800279e:	ea38 0304 	bics.w	r3, r8, r4
 80027a2:	bf0c      	ite	eq
 80027a4:	f04f 0c01 	moveq.w	ip, #1
 80027a8:	f04f 0c00 	movne.w	ip, #0
 80027ac:	45bc      	cmp	ip, r7
 80027ae:	d037      	beq.n	8002820 <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80027b4:	d0f1      	beq.n	800279a <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80027b6:	f7fd ff5b 	bl	8000670 <HAL_GetTick>
 80027ba:	9b06      	ldr	r3, [sp, #24]
 80027bc:	1ac0      	subs	r0, r0, r3
 80027be:	42a8      	cmp	r0, r5
 80027c0:	d201      	bcs.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0x38>
 80027c2:	2d00      	cmp	r5, #0
 80027c4:	d1e9      	bne.n	800279a <SPI_WaitFlagStateUntilTimeout+0xc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027c6:	6832      	ldr	r2, [r6, #0]
 80027c8:	6853      	ldr	r3, [r2, #4]
 80027ca:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80027ce:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d0:	6873      	ldr	r3, [r6, #4]
 80027d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027d6:	d00b      	beq.n	80027f0 <SPI_WaitFlagStateUntilTimeout+0x62>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80027da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027de:	d014      	beq.n	800280a <SPI_WaitFlagStateUntilTimeout+0x7c>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027e6:	2300      	movs	r3, #0
 80027e8:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c

        return HAL_TIMEOUT;
 80027ec:	2003      	movs	r0, #3
 80027ee:	e018      	b.n	8002822 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f0:	68b3      	ldr	r3, [r6, #8]
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	bf18      	it	ne
 80027f8:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 80027fc:	d1ec      	bne.n	80027d8 <SPI_WaitFlagStateUntilTimeout+0x4a>
          __HAL_SPI_DISABLE(hspi);
 80027fe:	6832      	ldr	r2, [r6, #0]
 8002800:	6813      	ldr	r3, [r2, #0]
 8002802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e7e6      	b.n	80027d8 <SPI_WaitFlagStateUntilTimeout+0x4a>
          SPI_RESET_CRC(hspi);
 800280a:	6832      	ldr	r2, [r6, #0]
 800280c:	6813      	ldr	r3, [r2, #0]
 800280e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	6832      	ldr	r2, [r6, #0]
 8002816:	6813      	ldr	r3, [r2, #0]
 8002818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e7df      	b.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0x52>
      }
    }
  }

  return HAL_OK;
 8002820:	2000      	movs	r0, #0
}
 8002822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002826 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002826:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800282a:	4681      	mov	r9, r0
 800282c:	460f      	mov	r7, r1
 800282e:	4616      	mov	r6, r2
 8002830:	4698      	mov	r8, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8002832:	e002      	b.n	800283a <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8002834:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002838:	d10d      	bne.n	8002856 <SPI_WaitFifoStateUntilTimeout+0x30>
  while ((hspi->Instance->SR & Fifo) != State)
 800283a:	f8d9 5000 	ldr.w	r5, [r9]
 800283e:	68ac      	ldr	r4, [r5, #8]
 8002840:	ea04 0c07 	and.w	ip, r4, r7
 8002844:	45b4      	cmp	ip, r6
 8002846:	d043      	beq.n	80028d0 <SPI_WaitFifoStateUntilTimeout+0xaa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002848:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 800284c:	bf08      	it	eq
 800284e:	2e00      	cmpeq	r6, #0
 8002850:	d1f0      	bne.n	8002834 <SPI_WaitFifoStateUntilTimeout+0xe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002852:	7b2b      	ldrb	r3, [r5, #12]
 8002854:	e7ee      	b.n	8002834 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002856:	f7fd ff0b 	bl	8000670 <HAL_GetTick>
 800285a:	9b08      	ldr	r3, [sp, #32]
 800285c:	1ac0      	subs	r0, r0, r3
 800285e:	4540      	cmp	r0, r8
 8002860:	d202      	bcs.n	8002868 <SPI_WaitFifoStateUntilTimeout+0x42>
 8002862:	f1b8 0f00 	cmp.w	r8, #0
 8002866:	d1e8      	bne.n	800283a <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002868:	f8d9 2000 	ldr.w	r2, [r9]
 800286c:	6853      	ldr	r3, [r2, #4]
 800286e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002872:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002874:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287c:	d00c      	beq.n	8002898 <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800287e:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8002882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002886:	d016      	beq.n	80028b6 <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002888:	2301      	movs	r3, #1
 800288a:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800288e:	2300      	movs	r3, #0
 8002890:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002894:	2003      	movs	r0, #3
 8002896:	e01c      	b.n	80028d2 <SPI_WaitFifoStateUntilTimeout+0xac>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002898:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800289c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a0:	bf18      	it	ne
 80028a2:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 80028a6:	d1ea      	bne.n	800287e <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 80028a8:	f8d9 2000 	ldr.w	r2, [r9]
 80028ac:	6813      	ldr	r3, [r2, #0]
 80028ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	e7e3      	b.n	800287e <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 80028b6:	f8d9 2000 	ldr.w	r2, [r9]
 80028ba:	6813      	ldr	r3, [r2, #0]
 80028bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	f8d9 2000 	ldr.w	r2, [r9]
 80028c6:	6813      	ldr	r3, [r2, #0]
 80028c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e7db      	b.n	8002888 <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 80028d0:	2000      	movs	r0, #0
}
 80028d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080028d6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028d6:	b570      	push	{r4, r5, r6, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	4604      	mov	r4, r0
 80028dc:	460d      	mov	r5, r1
 80028de:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028e0:	9200      	str	r2, [sp, #0]
 80028e2:	460b      	mov	r3, r1
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80028ea:	f7ff ff9c 	bl	8002826 <SPI_WaitFifoStateUntilTimeout>
 80028ee:	b9b0      	cbnz	r0, 800291e <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028f0:	9600      	str	r6, [sp, #0]
 80028f2:	462b      	mov	r3, r5
 80028f4:	2200      	movs	r2, #0
 80028f6:	2180      	movs	r1, #128	; 0x80
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7ff ff48 	bl	800278e <SPI_WaitFlagStateUntilTimeout>
 80028fe:	b9a8      	cbnz	r0, 800292c <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002900:	9600      	str	r6, [sp, #0]
 8002902:	462b      	mov	r3, r5
 8002904:	2200      	movs	r2, #0
 8002906:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800290a:	4620      	mov	r0, r4
 800290c:	f7ff ff8b 	bl	8002826 <SPI_WaitFifoStateUntilTimeout>
 8002910:	b150      	cbz	r0, 8002928 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002912:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002914:	f043 0320 	orr.w	r3, r3, #32
 8002918:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800291a:	2003      	movs	r0, #3
 800291c:	e004      	b.n	8002928 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800291e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002920:	f043 0320 	orr.w	r3, r3, #32
 8002924:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002926:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002928:	b002      	add	sp, #8
 800292a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800292c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800292e:	f043 0320 	orr.w	r3, r3, #32
 8002932:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002934:	2003      	movs	r0, #3
 8002936:	e7f7      	b.n	8002928 <SPI_EndRxTxTransaction+0x52>

08002938 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002938:	2800      	cmp	r0, #0
 800293a:	d058      	beq.n	80029ee <HAL_SPI_Init+0xb6>
{
 800293c:	b510      	push	{r4, lr}
 800293e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002944:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002948:	2b00      	cmp	r3, #0
 800294a:	d045      	beq.n	80029d8 <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 800294c:	2302      	movs	r3, #2
 800294e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002952:	6822      	ldr	r2, [r4, #0]
 8002954:	6813      	ldr	r3, [r2, #0]
 8002956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800295a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800295c:	68e3      	ldr	r3, [r4, #12]
 800295e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002962:	d93e      	bls.n	80029e2 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002964:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002966:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800296a:	bf18      	it	ne
 800296c:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8002970:	d001      	beq.n	8002976 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002972:	2100      	movs	r1, #0
 8002974:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002976:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002978:	b921      	cbnz	r1, 8002984 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800297a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800297e:	d933      	bls.n	80029e8 <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002980:	2302      	movs	r3, #2
 8002982:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002984:	6863      	ldr	r3, [r4, #4]
 8002986:	68a1      	ldr	r1, [r4, #8]
 8002988:	430b      	orrs	r3, r1
 800298a:	6921      	ldr	r1, [r4, #16]
 800298c:	430b      	orrs	r3, r1
 800298e:	6961      	ldr	r1, [r4, #20]
 8002990:	430b      	orrs	r3, r1
 8002992:	69a1      	ldr	r1, [r4, #24]
 8002994:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002998:	430b      	orrs	r3, r1
 800299a:	69e1      	ldr	r1, [r4, #28]
 800299c:	430b      	orrs	r3, r1
 800299e:	6a21      	ldr	r1, [r4, #32]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80029a4:	6821      	ldr	r1, [r4, #0]
 80029a6:	4303      	orrs	r3, r0
 80029a8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80029aa:	8b63      	ldrh	r3, [r4, #26]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80029b2:	430b      	orrs	r3, r1
 80029b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029b6:	430b      	orrs	r3, r1
 80029b8:	68e1      	ldr	r1, [r4, #12]
 80029ba:	430b      	orrs	r3, r1
 80029bc:	6821      	ldr	r1, [r4, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029c2:	6822      	ldr	r2, [r4, #0]
 80029c4:	69d3      	ldr	r3, [r2, #28]
 80029c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029ca:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029cc:	2000      	movs	r0, #0
 80029ce:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80029d6:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80029d8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80029dc:	f002 fc08 	bl	80051f0 <HAL_SPI_MspInit>
 80029e0:	e7b4      	b.n	800294c <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029e6:	e7be      	b.n	8002966 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80029e8:	2301      	movs	r3, #1
 80029ea:	6323      	str	r3, [r4, #48]	; 0x30
 80029ec:	e7ca      	b.n	8002984 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80029ee:	2001      	movs	r0, #1
}
 80029f0:	4770      	bx	lr

080029f2 <HAL_SPI_TransmitReceive>:
{
 80029f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029f6:	461f      	mov	r7, r3
 80029f8:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80029fa:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	f000 8161 	beq.w	8002cc6 <HAL_SPI_TransmitReceive+0x2d4>
 8002a04:	4604      	mov	r4, r0
 8002a06:	4688      	mov	r8, r1
 8002a08:	4691      	mov	r9, r2
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002a10:	f7fd fe2e 	bl	8000670 <HAL_GetTick>
 8002a14:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002a16:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002a1a:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002a1c:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d00a      	beq.n	8002a38 <HAL_SPI_TransmitReceive+0x46>
 8002a22:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002a26:	f040 8137 	bne.w	8002c98 <HAL_SPI_TransmitReceive+0x2a6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a2a:	68a2      	ldr	r2, [r4, #8]
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	f040 813c 	bne.w	8002caa <HAL_SPI_TransmitReceive+0x2b8>
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	f040 813b 	bne.w	8002cae <HAL_SPI_TransmitReceive+0x2bc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a38:	f1b9 0f00 	cmp.w	r9, #0
 8002a3c:	bf18      	it	ne
 8002a3e:	f1b8 0f00 	cmpne.w	r8, #0
 8002a42:	f000 8136 	beq.w	8002cb2 <HAL_SPI_TransmitReceive+0x2c0>
 8002a46:	2f00      	cmp	r7, #0
 8002a48:	f000 8135 	beq.w	8002cb6 <HAL_SPI_TransmitReceive+0x2c4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a4c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d002      	beq.n	8002a5c <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a56:	2305      	movs	r3, #5
 8002a58:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a60:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002a64:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002a68:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a6c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002a70:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002a72:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8002a74:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a76:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a78:	68e3      	ldr	r3, [r4, #12]
 8002a7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a7e:	d801      	bhi.n	8002a84 <HAL_SPI_TransmitReceive+0x92>
 8002a80:	2f01      	cmp	r7, #1
 8002a82:	d923      	bls.n	8002acc <HAL_SPI_TransmitReceive+0xda>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	6853      	ldr	r3, [r2, #4]
 8002a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a8c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a96:	d103      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0xae>
    __HAL_SPI_ENABLE(hspi);
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a9e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aa0:	68e3      	ldr	r3, [r4, #12]
 8002aa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aa6:	d958      	bls.n	8002b5a <HAL_SPI_TransmitReceive+0x168>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa8:	6863      	ldr	r3, [r4, #4]
 8002aaa:	b10b      	cbz	r3, 8002ab0 <HAL_SPI_TransmitReceive+0xbe>
 8002aac:	2f01      	cmp	r7, #1
 8002aae:	d10b      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	8812      	ldrh	r2, [r2, #0]
 8002ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002aba:	3302      	adds	r3, #2
 8002abc:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002abe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002ac8:	2701      	movs	r7, #1
 8002aca:	e031      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002acc:	6822      	ldr	r2, [r4, #0]
 8002ace:	6853      	ldr	r3, [r2, #4]
 8002ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad4:	6053      	str	r3, [r2, #4]
 8002ad6:	e7da      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x9c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ada:	8812      	ldrh	r2, [r2, #0]
 8002adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002ae4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002aee:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	f012 0f01 	tst.w	r2, #1
 8002af8:	d011      	beq.n	8002b1e <HAL_SPI_TransmitReceive+0x12c>
 8002afa:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002afe:	b292      	uxth	r2, r2
 8002b00:	b16a      	cbz	r2, 8002b1e <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002b0e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002b1c:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b1e:	f7fd fda7 	bl	8000670 <HAL_GetTick>
 8002b22:	1b83      	subs	r3, r0, r6
 8002b24:	42ab      	cmp	r3, r5
 8002b26:	d303      	bcc.n	8002b30 <HAL_SPI_TransmitReceive+0x13e>
 8002b28:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002b2c:	f040 80c5 	bne.w	8002cba <HAL_SPI_TransmitReceive+0x2c8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	b92b      	cbnz	r3, 8002b42 <HAL_SPI_TransmitReceive+0x150>
 8002b36:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a1 	beq.w	8002c84 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	f012 0f02 	tst.w	r2, #2
 8002b4a:	d0d1      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0xfe>
 8002b4c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002b4e:	b292      	uxth	r2, r2
 8002b50:	2a00      	cmp	r2, #0
 8002b52:	d0cd      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0xfe>
 8002b54:	2f00      	cmp	r7, #0
 8002b56:	d0cb      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0xfe>
 8002b58:	e7be      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0xe6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b5a:	6863      	ldr	r3, [r4, #4]
 8002b5c:	b10b      	cbz	r3, 8002b62 <HAL_SPI_TransmitReceive+0x170>
 8002b5e:	2f01      	cmp	r7, #1
 8002b60:	d10f      	bne.n	8002b82 <HAL_SPI_TransmitReceive+0x190>
      if (hspi->TxXferCount > 1U)
 8002b62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d90d      	bls.n	8002b86 <HAL_SPI_TransmitReceive+0x194>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	8812      	ldrh	r2, [r2, #0]
 8002b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b74:	3302      	adds	r3, #2
 8002b76:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b02      	subs	r3, #2
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002b82:	2701      	movs	r7, #1
 8002b84:	e049      	b.n	8002c1a <HAL_SPI_TransmitReceive+0x228>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	7812      	ldrb	r2, [r2, #0]
 8002b8c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002b8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b90:	3301      	adds	r3, #1
 8002b92:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002b94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002b9e:	e7f0      	b.n	8002b82 <HAL_SPI_TransmitReceive+0x190>
        if (hspi->TxXferCount > 1U)
 8002ba0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	2a01      	cmp	r2, #1
 8002ba6:	d90c      	bls.n	8002bc2 <HAL_SPI_TransmitReceive+0x1d0>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002baa:	8812      	ldrh	r2, [r2, #0]
 8002bac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002bb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b02      	subs	r3, #2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002bbe:	2700      	movs	r7, #0
 8002bc0:	e03d      	b.n	8002c3e <HAL_SPI_TransmitReceive+0x24c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8002bc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bca:	3301      	adds	r3, #1
 8002bcc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002bce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002bd8:	2700      	movs	r7, #0
 8002bda:	e030      	b.n	8002c3e <HAL_SPI_TransmitReceive+0x24c>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	6853      	ldr	r3, [r2, #4]
 8002be0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002be4:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8002be6:	2701      	movs	r7, #1
 8002be8:	e00d      	b.n	8002c06 <HAL_SPI_TransmitReceive+0x214>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bec:	7b1b      	ldrb	r3, [r3, #12]
 8002bee:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8002bf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002bf6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002c04:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c06:	f7fd fd33 	bl	8000670 <HAL_GetTick>
 8002c0a:	1b80      	subs	r0, r0, r6
 8002c0c:	42a8      	cmp	r0, r5
 8002c0e:	d302      	bcc.n	8002c16 <HAL_SPI_TransmitReceive+0x224>
 8002c10:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002c14:	d153      	bne.n	8002cbe <HAL_SPI_TransmitReceive+0x2cc>
 8002c16:	2d00      	cmp	r5, #0
 8002c18:	d053      	beq.n	8002cc2 <HAL_SPI_TransmitReceive+0x2d0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	b923      	cbnz	r3, 8002c2a <HAL_SPI_TransmitReceive+0x238>
 8002c20:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d02c      	beq.n	8002c84 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	f012 0f02 	tst.w	r2, #2
 8002c32:	d004      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x24c>
 8002c34:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002c36:	b292      	uxth	r2, r2
 8002c38:	b10a      	cbz	r2, 8002c3e <HAL_SPI_TransmitReceive+0x24c>
 8002c3a:	2f00      	cmp	r7, #0
 8002c3c:	d1b0      	bne.n	8002ba0 <HAL_SPI_TransmitReceive+0x1ae>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	f012 0f01 	tst.w	r2, #1
 8002c46:	d0de      	beq.n	8002c06 <HAL_SPI_TransmitReceive+0x214>
 8002c48:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	d0d9      	beq.n	8002c06 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 8002c52:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002c56:	b292      	uxth	r2, r2
 8002c58:	2a01      	cmp	r2, #1
 8002c5a:	d9c6      	bls.n	8002bea <HAL_SPI_TransmitReceive+0x1f8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c60:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c64:	3302      	adds	r3, #2
 8002c66:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002c68:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b02      	subs	r3, #2
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002c76:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d9ad      	bls.n	8002bdc <HAL_SPI_TransmitReceive+0x1ea>
        txallowed = 1U;
 8002c80:	2701      	movs	r7, #1
 8002c82:	e7c0      	b.n	8002c06 <HAL_SPI_TransmitReceive+0x214>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c84:	4632      	mov	r2, r6
 8002c86:	4629      	mov	r1, r5
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff fe24 	bl	80028d6 <SPI_EndRxTxTransaction>
 8002c8e:	b120      	cbz	r0, 8002c9a <HAL_SPI_TransmitReceive+0x2a8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c90:	2320      	movs	r3, #32
 8002c92:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002c94:	2001      	movs	r0, #1
 8002c96:	e000      	b.n	8002c9a <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_BUSY;
 8002c98:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8002caa:	2002      	movs	r0, #2
 8002cac:	e7f5      	b.n	8002c9a <HAL_SPI_TransmitReceive+0x2a8>
 8002cae:	2002      	movs	r0, #2
 8002cb0:	e7f3      	b.n	8002c9a <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	e7f1      	b.n	8002c9a <HAL_SPI_TransmitReceive+0x2a8>
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	e7ef      	b.n	8002c9a <HAL_SPI_TransmitReceive+0x2a8>
        errorcode = HAL_TIMEOUT;
 8002cba:	2003      	movs	r0, #3
 8002cbc:	e7ed      	b.n	8002c9a <HAL_SPI_TransmitReceive+0x2a8>
        errorcode = HAL_TIMEOUT;
 8002cbe:	2003      	movs	r0, #3
 8002cc0:	e7eb      	b.n	8002c9a <HAL_SPI_TransmitReceive+0x2a8>
 8002cc2:	2003      	movs	r0, #3
 8002cc4:	e7e9      	b.n	8002c9a <HAL_SPI_TransmitReceive+0x2a8>
  __HAL_LOCK(hspi);
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	e7ed      	b.n	8002ca6 <HAL_SPI_TransmitReceive+0x2b4>
	...

08002ccc <HAL_SPI_Transmit_DMA>:
{
 8002ccc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8002cce:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	f000 8087 	beq.w	8002de6 <HAL_SPI_Transmit_DMA+0x11a>
 8002cd8:	4604      	mov	r4, r0
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8002ce0:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
 8002ce4:	b2ed      	uxtb	r5, r5
 8002ce6:	429d      	cmp	r5, r3
 8002ce8:	d177      	bne.n	8002dda <HAL_SPI_Transmit_DMA+0x10e>
  if ((pData == NULL) || (Size == 0U))
 8002cea:	2a00      	cmp	r2, #0
 8002cec:	bf18      	it	ne
 8002cee:	2900      	cmpne	r1, #0
 8002cf0:	d074      	beq.n	8002ddc <HAL_SPI_Transmit_DMA+0x110>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cfc:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002cfe:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d00:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d02:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d04:	6503      	str	r3, [r0, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d06:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8002d08:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d0c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d10:	6883      	ldr	r3, [r0, #8]
 8002d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d16:	d039      	beq.n	8002d8c <HAL_SPI_Transmit_DMA+0xc0>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002d18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d1a:	4a34      	ldr	r2, [pc, #208]	; (8002dec <HAL_SPI_Transmit_DMA+0x120>)
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002d1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d20:	4a33      	ldr	r2, [pc, #204]	; (8002df0 <HAL_SPI_Transmit_DMA+0x124>)
 8002d22:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002d24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d26:	4a33      	ldr	r2, [pc, #204]	; (8002df4 <HAL_SPI_Transmit_DMA+0x128>)
 8002d28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8002d2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	651a      	str	r2, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	6853      	ldr	r3, [r2, #4]
 8002d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d38:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002d3a:	68e3      	ldr	r3, [r4, #12]
 8002d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d40:	d804      	bhi.n	8002d4c <HAL_SPI_Transmit_DMA+0x80>
 8002d42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4a:	d025      	beq.n	8002d98 <HAL_SPI_Transmit_DMA+0xcc>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	320c      	adds	r2, #12
 8002d54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002d56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d58:	f7fd fdf2 	bl	8000940 <HAL_DMA_Start_IT>
 8002d5c:	4601      	mov	r1, r0
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d133      	bne.n	8002dca <HAL_SPI_Transmit_DMA+0xfe>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d6a:	d103      	bne.n	8002d74 <HAL_SPI_Transmit_DMA+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d72:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002d74:	6822      	ldr	r2, [r4, #0]
 8002d76:	6853      	ldr	r3, [r2, #4]
 8002d78:	f043 0320 	orr.w	r3, r3, #32
 8002d7c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	6853      	ldr	r3, [r2, #4]
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d88:	460d      	mov	r5, r1
 8002d8a:	e027      	b.n	8002ddc <HAL_SPI_Transmit_DMA+0x110>
    SPI_1LINE_TX(hspi);
 8002d8c:	6802      	ldr	r2, [r0, #0]
 8002d8e:	6813      	ldr	r3, [r2, #0]
 8002d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e7bf      	b.n	8002d18 <HAL_SPI_Transmit_DMA+0x4c>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002d98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d9a:	f013 0f01 	tst.w	r3, #1
 8002d9e:	d109      	bne.n	8002db4 <HAL_SPI_Transmit_DMA+0xe8>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	6853      	ldr	r3, [r2, #4]
 8002da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002da8:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002daa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002dac:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002db0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002db2:	e7cb      	b.n	8002d4c <HAL_SPI_Transmit_DMA+0x80>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002db4:	6822      	ldr	r2, [r4, #0]
 8002db6:	6853      	ldr	r3, [r2, #4]
 8002db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dbc:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002dbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002dc0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002dc8:	e7c0      	b.n	8002d4c <HAL_SPI_Transmit_DMA+0x80>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002dca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002dcc:	f043 0310 	orr.w	r3, r3, #16
 8002dd0:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    goto error;
 8002dd8:	e000      	b.n	8002ddc <HAL_SPI_Transmit_DMA+0x110>
    errorcode = HAL_BUSY;
 8002dda:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002de2:	4628      	mov	r0, r5
 8002de4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 8002de6:	2502      	movs	r5, #2
 8002de8:	e7fb      	b.n	8002de2 <HAL_SPI_Transmit_DMA+0x116>
 8002dea:	bf00      	nop
 8002dec:	08002dfd 	.word	0x08002dfd
 8002df0:	08002e2b 	.word	0x08002e2b
 8002df4:	08002e09 	.word	0x08002e09

08002df8 <HAL_SPI_TxCpltCallback>:
}
 8002df8:	4770      	bx	lr

08002dfa <HAL_SPI_TxHalfCpltCallback>:
}
 8002dfa:	4770      	bx	lr

08002dfc <SPI_DMAHalfTransmitCplt>:
{
 8002dfc:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002dfe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002e00:	f7ff fffb 	bl	8002dfa <HAL_SPI_TxHalfCpltCallback>
}
 8002e04:	bd08      	pop	{r3, pc}

08002e06 <HAL_SPI_ErrorCallback>:
}
 8002e06:	4770      	bx	lr

08002e08 <SPI_DMAError>:
{
 8002e08:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e0c:	6802      	ldr	r2, [r0, #0]
 8002e0e:	6853      	ldr	r3, [r2, #4]
 8002e10:	f023 0303 	bic.w	r3, r3, #3
 8002e14:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e16:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002e18:	f043 0310 	orr.w	r3, r3, #16
 8002e1c:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8002e24:	f7ff ffef 	bl	8002e06 <HAL_SPI_ErrorCallback>
}
 8002e28:	bd08      	pop	{r3, pc}

08002e2a <SPI_DMATransmitCplt>:
{
 8002e2a:	b530      	push	{r4, r5, lr}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e30:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002e32:	f7fd fc1d 	bl	8000670 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002e36:	682b      	ldr	r3, [r5, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e3e:	d123      	bne.n	8002e88 <SPI_DMATransmitCplt+0x5e>
 8002e40:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e42:	6821      	ldr	r1, [r4, #0]
 8002e44:	684b      	ldr	r3, [r1, #4]
 8002e46:	f023 0320 	bic.w	r3, r3, #32
 8002e4a:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e4c:	6821      	ldr	r1, [r4, #0]
 8002e4e:	684b      	ldr	r3, [r1, #4]
 8002e50:	f023 0302 	bic.w	r3, r3, #2
 8002e54:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e56:	2164      	movs	r1, #100	; 0x64
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f7ff fd3c 	bl	80028d6 <SPI_EndRxTxTransaction>
 8002e5e:	b118      	cbz	r0, 8002e68 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e60:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e62:	f043 0320 	orr.w	r3, r3, #32
 8002e66:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e68:	68a3      	ldr	r3, [r4, #8]
 8002e6a:	b933      	cbnz	r3, 8002e7a <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	9201      	str	r2, [sp, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e86:	b923      	cbnz	r3, 8002e92 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7ff ffb5 	bl	8002df8 <HAL_SPI_TxCpltCallback>
}
 8002e8e:	b003      	add	sp, #12
 8002e90:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8002e92:	4620      	mov	r0, r4
 8002e94:	f7ff ffb7 	bl	8002e06 <HAL_SPI_ErrorCallback>
      return;
 8002e98:	e7f9      	b.n	8002e8e <SPI_DMATransmitCplt+0x64>

08002e9a <HAL_TIM_IC_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIM_TriggerHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_ErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002eaa:	4770      	bx	lr

08002eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eac:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eae:	6a03      	ldr	r3, [r0, #32]
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eba:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ebc:	4c12      	ldr	r4, [pc, #72]	; (8002f08 <TIM_OC1_SetConfig+0x5c>)
 8002ebe:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec0:	680d      	ldr	r5, [r1, #0]
 8002ec2:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ec4:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ec8:	688b      	ldr	r3, [r1, #8]
 8002eca:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ecc:	4c0f      	ldr	r4, [pc, #60]	; (8002f0c <TIM_OC1_SetConfig+0x60>)
 8002ece:	4e10      	ldr	r6, [pc, #64]	; (8002f10 <TIM_OC1_SetConfig+0x64>)
 8002ed0:	42b0      	cmp	r0, r6
 8002ed2:	bf18      	it	ne
 8002ed4:	42a0      	cmpne	r0, r4
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2401      	moveq	r4, #1
 8002eda:	2400      	movne	r4, #0
 8002edc:	d105      	bne.n	8002eea <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ede:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ee2:	68ce      	ldr	r6, [r1, #12]
 8002ee4:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ee6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eea:	b12c      	cbz	r4, 8002ef8 <TIM_OC1_SetConfig+0x4c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ef0:	694c      	ldr	r4, [r1, #20]
 8002ef2:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ef4:	698a      	ldr	r2, [r1, #24]
 8002ef6:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002efa:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002efc:	684a      	ldr	r2, [r1, #4]
 8002efe:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f00:	6203      	str	r3, [r0, #32]
}
 8002f02:	bc70      	pop	{r4, r5, r6}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	fffeff8c 	.word	0xfffeff8c
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	40010400 	.word	0x40010400

08002f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f14:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f16:	6a03      	ldr	r3, [r0, #32]
 8002f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f20:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f22:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f24:	4c14      	ldr	r4, [pc, #80]	; (8002f78 <TIM_OC3_SetConfig+0x64>)
 8002f26:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f28:	680e      	ldr	r6, [r1, #0]
 8002f2a:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f30:	688c      	ldr	r4, [r1, #8]
 8002f32:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f36:	4c11      	ldr	r4, [pc, #68]	; (8002f7c <TIM_OC3_SetConfig+0x68>)
 8002f38:	4d11      	ldr	r5, [pc, #68]	; (8002f80 <TIM_OC3_SetConfig+0x6c>)
 8002f3a:	42a8      	cmp	r0, r5
 8002f3c:	bf18      	it	ne
 8002f3e:	42a0      	cmpne	r0, r4
 8002f40:	bf0c      	ite	eq
 8002f42:	2401      	moveq	r4, #1
 8002f44:	2400      	movne	r4, #0
 8002f46:	d106      	bne.n	8002f56 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f4c:	68cd      	ldr	r5, [r1, #12]
 8002f4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f56:	b13c      	cbz	r4, 8002f68 <TIM_OC3_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f5c:	694c      	ldr	r4, [r1, #20]
 8002f5e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f62:	698c      	ldr	r4, [r1, #24]
 8002f64:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f68:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f6a:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f6c:	684a      	ldr	r2, [r1, #4]
 8002f6e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f70:	6203      	str	r3, [r0, #32]
}
 8002f72:	bc70      	pop	{r4, r5, r6}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	fffeff8c 	.word	0xfffeff8c
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	40010400 	.word	0x40010400

08002f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f84:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f86:	6a03      	ldr	r3, [r0, #32]
 8002f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f92:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f94:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <TIM_OC4_SetConfig+0x48>)
 8002f96:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f98:	680d      	ldr	r5, [r1, #0]
 8002f9a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fa2:	688d      	ldr	r5, [r1, #8]
 8002fa4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa8:	4e09      	ldr	r6, [pc, #36]	; (8002fd0 <TIM_OC4_SetConfig+0x4c>)
 8002faa:	4d0a      	ldr	r5, [pc, #40]	; (8002fd4 <TIM_OC4_SetConfig+0x50>)
 8002fac:	42a8      	cmp	r0, r5
 8002fae:	bf18      	it	ne
 8002fb0:	42b0      	cmpne	r0, r6
 8002fb2:	d104      	bne.n	8002fbe <TIM_OC4_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fb4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fb8:	694d      	ldr	r5, [r1, #20]
 8002fba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fc2:	684a      	ldr	r2, [r1, #4]
 8002fc4:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc6:	6203      	str	r3, [r0, #32]
}
 8002fc8:	bc70      	pop	{r4, r5, r6}
 8002fca:	4770      	bx	lr
 8002fcc:	feff8cff 	.word	0xfeff8cff
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40010400 	.word	0x40010400

08002fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002fd8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002fda:	6a03      	ldr	r3, [r0, #32]
 8002fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fe6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002fe8:	4d0d      	ldr	r5, [pc, #52]	; (8003020 <TIM_OC5_SetConfig+0x48>)
 8002fea:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fec:	680a      	ldr	r2, [r1, #0]
 8002fee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ff0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ff4:	688d      	ldr	r5, [r1, #8]
 8002ff6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffa:	4e0a      	ldr	r6, [pc, #40]	; (8003024 <TIM_OC5_SetConfig+0x4c>)
 8002ffc:	4d0a      	ldr	r5, [pc, #40]	; (8003028 <TIM_OC5_SetConfig+0x50>)
 8002ffe:	42a8      	cmp	r0, r5
 8003000:	bf18      	it	ne
 8003002:	42b0      	cmpne	r0, r6
 8003004:	d104      	bne.n	8003010 <TIM_OC5_SetConfig+0x38>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003006:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800300a:	694d      	ldr	r5, [r1, #20]
 800300c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003010:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003012:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003014:	684a      	ldr	r2, [r1, #4]
 8003016:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003018:	6203      	str	r3, [r0, #32]
}
 800301a:	bc70      	pop	{r4, r5, r6}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	fffeff8f 	.word	0xfffeff8f
 8003024:	40010000 	.word	0x40010000
 8003028:	40010400 	.word	0x40010400

0800302c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800302e:	6a03      	ldr	r3, [r0, #32]
 8003030:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003034:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003036:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800303a:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800303c:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <TIM_OC6_SetConfig+0x48>)
 800303e:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003040:	680d      	ldr	r5, [r1, #0]
 8003042:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800304a:	688d      	ldr	r5, [r1, #8]
 800304c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003050:	4e09      	ldr	r6, [pc, #36]	; (8003078 <TIM_OC6_SetConfig+0x4c>)
 8003052:	4d0a      	ldr	r5, [pc, #40]	; (800307c <TIM_OC6_SetConfig+0x50>)
 8003054:	42a8      	cmp	r0, r5
 8003056:	bf18      	it	ne
 8003058:	42b0      	cmpne	r0, r6
 800305a:	d104      	bne.n	8003066 <TIM_OC6_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800305c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003060:	694d      	ldr	r5, [r1, #20]
 8003062:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003066:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003068:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800306a:	684a      	ldr	r2, [r1, #4]
 800306c:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306e:	6203      	str	r3, [r0, #32]
}
 8003070:	bc70      	pop	{r4, r5, r6}
 8003072:	4770      	bx	lr
 8003074:	feff8fff 	.word	0xfeff8fff
 8003078:	40010000 	.word	0x40010000
 800307c:	40010400 	.word	0x40010400

08003080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003080:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003082:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003084:	6a04      	ldr	r4, [r0, #32]
 8003086:	f024 0401 	bic.w	r4, r4, #1
 800308a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800308e:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003092:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003096:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800309a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800309c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800309e:	6203      	str	r3, [r0, #32]
}
 80030a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030a6:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a8:	6a04      	ldr	r4, [r0, #32]
 80030aa:	f024 0410 	bic.w	r4, r4, #16
 80030ae:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80030b2:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030b4:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80030b8:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030bc:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80030c0:	031b      	lsls	r3, r3, #12
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030c8:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80030cc:	0109      	lsls	r1, r1, #4
 80030ce:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 80030d2:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80030d6:	6201      	str	r1, [r0, #32]
}
 80030d8:	bc30      	pop	{r4, r5}
 80030da:	4770      	bx	lr

080030dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030dc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030de:	6a04      	ldr	r4, [r0, #32]
 80030e0:	f024 0410 	bic.w	r4, r4, #16
 80030e4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80030e8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ea:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ee:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030fa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80030fc:	6203      	str	r3, [r0, #32]
}
 80030fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003102:	4770      	bx	lr

08003104 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003104:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003106:	6a04      	ldr	r4, [r0, #32]
 8003108:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800310c:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800310e:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003110:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003112:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003116:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800311a:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	b2db      	uxtb	r3, r3
 8003122:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003126:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800312a:	0209      	lsls	r1, r1, #8
 800312c:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8003130:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003132:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8003134:	6201      	str	r1, [r0, #32]
}
 8003136:	bc30      	pop	{r4, r5}
 8003138:	4770      	bx	lr

0800313a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800313a:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800313c:	6a04      	ldr	r4, [r0, #32]
 800313e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003142:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003144:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003146:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003148:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800314c:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003150:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003154:	031b      	lsls	r3, r3, #12
 8003156:	b29b      	uxth	r3, r3
 8003158:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800315c:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003160:	0309      	lsls	r1, r1, #12
 8003162:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8003166:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003168:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800316a:	6201      	str	r1, [r0, #32]
}
 800316c:	bc30      	pop	{r4, r5}
 800316e:	4770      	bx	lr

08003170 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003170:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003176:	430b      	orrs	r3, r1
 8003178:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317c:	6083      	str	r3, [r0, #8]
}
 800317e:	4770      	bx	lr

08003180 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003180:	6802      	ldr	r2, [r0, #0]
 8003182:	68d3      	ldr	r3, [r2, #12]
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800318a:	6802      	ldr	r2, [r0, #0]
 800318c:	6891      	ldr	r1, [r2, #8]
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_TIM_Base_Start_IT+0x28>)
 8003190:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	2b06      	cmp	r3, #6
 8003194:	bf18      	it	ne
 8003196:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 800319a:	d003      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6013      	str	r3, [r2, #0]
}
 80031a4:	2000      	movs	r0, #0
 80031a6:	4770      	bx	lr
 80031a8:	00010007 	.word	0x00010007

080031ac <HAL_TIM_IRQHandler>:
{
 80031ac:	b510      	push	{r4, lr}
 80031ae:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031b0:	6803      	ldr	r3, [r0, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	f012 0f02 	tst.w	r2, #2
 80031b8:	d013      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	f012 0f02 	tst.w	r2, #2
 80031c0:	d00f      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x36>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031c2:	f06f 0202 	mvn.w	r2, #2
 80031c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c8:	2301      	movs	r3, #1
 80031ca:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031cc:	6803      	ldr	r3, [r0, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f013 0f03 	tst.w	r3, #3
 80031d4:	f000 80a1 	beq.w	800331a <HAL_TIM_IRQHandler+0x16e>
          htim->IC_CaptureCallback(htim);
 80031d8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80031dc:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031de:	2300      	movs	r3, #0
 80031e0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	f012 0f04 	tst.w	r2, #4
 80031ea:	d014      	beq.n	8003216 <HAL_TIM_IRQHandler+0x6a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	f012 0f04 	tst.w	r2, #4
 80031f2:	d010      	beq.n	8003216 <HAL_TIM_IRQHandler+0x6a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f4:	f06f 0204 	mvn.w	r2, #4
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fa:	2302      	movs	r3, #2
 80031fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003206:	f000 8090 	beq.w	800332a <HAL_TIM_IRQHandler+0x17e>
        htim->IC_CaptureCallback(htim);
 800320a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800320e:	4620      	mov	r0, r4
 8003210:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	2300      	movs	r3, #0
 8003214:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	f012 0f08 	tst.w	r2, #8
 800321e:	d013      	beq.n	8003248 <HAL_TIM_IRQHandler+0x9c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	f012 0f08 	tst.w	r2, #8
 8003226:	d00f      	beq.n	8003248 <HAL_TIM_IRQHandler+0x9c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003228:	f06f 0208 	mvn.w	r2, #8
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322e:	2304      	movs	r3, #4
 8003230:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f013 0f03 	tst.w	r3, #3
 800323a:	d07f      	beq.n	800333c <HAL_TIM_IRQHandler+0x190>
        htim->IC_CaptureCallback(htim);
 800323c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003240:	4620      	mov	r0, r4
 8003242:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003244:	2300      	movs	r3, #0
 8003246:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	f012 0f10 	tst.w	r2, #16
 8003250:	d013      	beq.n	800327a <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	f012 0f10 	tst.w	r2, #16
 8003258:	d00f      	beq.n	800327a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800325a:	f06f 0210 	mvn.w	r2, #16
 800325e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003260:	2308      	movs	r3, #8
 8003262:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f413 7f40 	tst.w	r3, #768	; 0x300
 800326c:	d06f      	beq.n	800334e <HAL_TIM_IRQHandler+0x1a2>
        htim->IC_CaptureCallback(htim);
 800326e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003272:	4620      	mov	r0, r4
 8003274:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	2300      	movs	r3, #0
 8003278:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	f012 0f01 	tst.w	r2, #1
 8003282:	d009      	beq.n	8003298 <HAL_TIM_IRQHandler+0xec>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	f012 0f01 	tst.w	r2, #1
 800328a:	d005      	beq.n	8003298 <HAL_TIM_IRQHandler+0xec>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800328c:	f06f 0201 	mvn.w	r2, #1
 8003290:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 8003292:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003294:	4620      	mov	r0, r4
 8003296:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032a0:	d00a      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x10c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032a8:	d006      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x10c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032ae:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 80032b0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80032b4:	4620      	mov	r0, r4
 80032b6:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80032c0:	d00a      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x12c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032c8:	d006      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x12c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032ce:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 80032d0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80032d4:	4620      	mov	r0, r4
 80032d6:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80032e0:	d00a      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x14c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80032e8:	d006      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x14c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ee:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 80032f0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80032f4:	4620      	mov	r0, r4
 80032f6:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	f012 0f20 	tst.w	r2, #32
 8003300:	d00a      	beq.n	8003318 <HAL_TIM_IRQHandler+0x16c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	f012 0f20 	tst.w	r2, #32
 8003308:	d006      	beq.n	8003318 <HAL_TIM_IRQHandler+0x16c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800330a:	f06f 0220 	mvn.w	r2, #32
 800330e:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 8003310:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8003314:	4620      	mov	r0, r4
 8003316:	4798      	blx	r3
}
 8003318:	bd10      	pop	{r4, pc}
          htim->OC_DelayElapsedCallback(htim);
 800331a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800331e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003320:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003324:	4620      	mov	r0, r4
 8003326:	4798      	blx	r3
 8003328:	e759      	b.n	80031de <HAL_TIM_IRQHandler+0x32>
        htim->OC_DelayElapsedCallback(htim);
 800332a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800332e:	4620      	mov	r0, r4
 8003330:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003332:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003336:	4620      	mov	r0, r4
 8003338:	4798      	blx	r3
 800333a:	e76a      	b.n	8003212 <HAL_TIM_IRQHandler+0x66>
        htim->OC_DelayElapsedCallback(htim);
 800333c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003340:	4620      	mov	r0, r4
 8003342:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003344:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003348:	4620      	mov	r0, r4
 800334a:	4798      	blx	r3
 800334c:	e77a      	b.n	8003244 <HAL_TIM_IRQHandler+0x98>
        htim->OC_DelayElapsedCallback(htim);
 800334e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003352:	4620      	mov	r0, r4
 8003354:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003356:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800335a:	4620      	mov	r0, r4
 800335c:	4798      	blx	r3
 800335e:	e78a      	b.n	8003276 <HAL_TIM_IRQHandler+0xca>

08003360 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8003360:	290c      	cmp	r1, #12
 8003362:	d814      	bhi.n	800338e <HAL_TIM_ReadCapturedValue+0x2e>
 8003364:	e8df f001 	tbb	[pc, r1]
 8003368:	13131307 	.word	0x13131307
 800336c:	1313130a 	.word	0x1313130a
 8003370:	1313130d 	.word	0x1313130d
 8003374:	10          	.byte	0x10
 8003375:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8003376:	6803      	ldr	r3, [r0, #0]
 8003378:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 800337a:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800337c:	6803      	ldr	r3, [r0, #0]
 800337e:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8003380:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8003382:	6803      	ldr	r3, [r0, #0]
 8003384:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8003386:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8003388:	6803      	ldr	r3, [r0, #0]
 800338a:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 800338c:	4770      	bx	lr
  switch (Channel)
 800338e:	2000      	movs	r0, #0
}
 8003390:	4770      	bx	lr
	...

08003394 <TIM_Base_SetConfig>:
{
 8003394:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 8003396:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003398:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <TIM_Base_SetConfig+0xf4>)
 800339a:	4290      	cmp	r0, r2
 800339c:	bf14      	ite	ne
 800339e:	f04f 0e00 	movne.w	lr, #0
 80033a2:	f04f 0e01 	moveq.w	lr, #1
 80033a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033aa:	bf14      	ite	ne
 80033ac:	4672      	movne	r2, lr
 80033ae:	f04e 0201 	orreq.w	r2, lr, #1
 80033b2:	b9aa      	cbnz	r2, 80033e0 <TIM_Base_SetConfig+0x4c>
 80033b4:	4c35      	ldr	r4, [pc, #212]	; (800348c <TIM_Base_SetConfig+0xf8>)
 80033b6:	42a0      	cmp	r0, r4
 80033b8:	bf14      	ite	ne
 80033ba:	2400      	movne	r4, #0
 80033bc:	2401      	moveq	r4, #1
 80033be:	4d34      	ldr	r5, [pc, #208]	; (8003490 <TIM_Base_SetConfig+0xfc>)
 80033c0:	42a8      	cmp	r0, r5
 80033c2:	d00d      	beq.n	80033e0 <TIM_Base_SetConfig+0x4c>
 80033c4:	b964      	cbnz	r4, 80033e0 <TIM_Base_SetConfig+0x4c>
 80033c6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80033ca:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 80033ce:	42a0      	cmp	r0, r4
 80033d0:	bf14      	ite	ne
 80033d2:	2400      	movne	r4, #0
 80033d4:	2401      	moveq	r4, #1
 80033d6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80033da:	42a8      	cmp	r0, r5
 80033dc:	d000      	beq.n	80033e0 <TIM_Base_SetConfig+0x4c>
 80033de:	b11c      	cbz	r4, 80033e8 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80033e4:	684c      	ldr	r4, [r1, #4]
 80033e6:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033e8:	2a00      	cmp	r2, #0
 80033ea:	d133      	bne.n	8003454 <TIM_Base_SetConfig+0xc0>
 80033ec:	4a27      	ldr	r2, [pc, #156]	; (800348c <TIM_Base_SetConfig+0xf8>)
 80033ee:	4290      	cmp	r0, r2
 80033f0:	bf14      	ite	ne
 80033f2:	2200      	movne	r2, #0
 80033f4:	2201      	moveq	r2, #1
 80033f6:	4c26      	ldr	r4, [pc, #152]	; (8003490 <TIM_Base_SetConfig+0xfc>)
 80033f8:	42a0      	cmp	r0, r4
 80033fa:	d02b      	beq.n	8003454 <TIM_Base_SetConfig+0xc0>
 80033fc:	bb52      	cbnz	r2, 8003454 <TIM_Base_SetConfig+0xc0>
 80033fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003402:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8003406:	4290      	cmp	r0, r2
 8003408:	bf14      	ite	ne
 800340a:	2200      	movne	r2, #0
 800340c:	2201      	moveq	r2, #1
 800340e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003412:	42a0      	cmp	r0, r4
 8003414:	d01e      	beq.n	8003454 <TIM_Base_SetConfig+0xc0>
 8003416:	b9ea      	cbnz	r2, 8003454 <TIM_Base_SetConfig+0xc0>
 8003418:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <TIM_Base_SetConfig+0x100>)
 800341a:	4290      	cmp	r0, r2
 800341c:	bf14      	ite	ne
 800341e:	2200      	movne	r2, #0
 8003420:	2201      	moveq	r2, #1
 8003422:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 8003426:	42a0      	cmp	r0, r4
 8003428:	d014      	beq.n	8003454 <TIM_Base_SetConfig+0xc0>
 800342a:	b99a      	cbnz	r2, 8003454 <TIM_Base_SetConfig+0xc0>
 800342c:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <TIM_Base_SetConfig+0x104>)
 800342e:	4290      	cmp	r0, r2
 8003430:	bf14      	ite	ne
 8003432:	2200      	movne	r2, #0
 8003434:	2201      	moveq	r2, #1
 8003436:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800343a:	42a0      	cmp	r0, r4
 800343c:	d00a      	beq.n	8003454 <TIM_Base_SetConfig+0xc0>
 800343e:	b94a      	cbnz	r2, 8003454 <TIM_Base_SetConfig+0xc0>
 8003440:	4a16      	ldr	r2, [pc, #88]	; (800349c <TIM_Base_SetConfig+0x108>)
 8003442:	4290      	cmp	r0, r2
 8003444:	bf14      	ite	ne
 8003446:	2200      	movne	r2, #0
 8003448:	2201      	moveq	r2, #1
 800344a:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 800344e:	42a0      	cmp	r0, r4
 8003450:	d000      	beq.n	8003454 <TIM_Base_SetConfig+0xc0>
 8003452:	b122      	cbz	r2, 800345e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003454:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003458:	68cb      	ldr	r3, [r1, #12]
 800345a:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800345e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003462:	694a      	ldr	r2, [r1, #20]
 8003464:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003466:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003468:	688a      	ldr	r2, [r1, #8]
 800346a:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800346c:	680a      	ldr	r2, [r1, #0]
 800346e:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <TIM_Base_SetConfig+0x10c>)
 8003472:	4290      	cmp	r0, r2
 8003474:	bf14      	ite	ne
 8003476:	4673      	movne	r3, lr
 8003478:	f04e 0301 	orreq.w	r3, lr, #1
 800347c:	b10b      	cbz	r3, 8003482 <TIM_Base_SetConfig+0xee>
    TIMx->RCR = Structure->RepetitionCounter;
 800347e:	690b      	ldr	r3, [r1, #16]
 8003480:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003482:	2301      	movs	r3, #1
 8003484:	6143      	str	r3, [r0, #20]
}
 8003486:	bd30      	pop	{r4, r5, pc}
 8003488:	40010000 	.word	0x40010000
 800348c:	40000800 	.word	0x40000800
 8003490:	40000400 	.word	0x40000400
 8003494:	40014400 	.word	0x40014400
 8003498:	40001800 	.word	0x40001800
 800349c:	40002000 	.word	0x40002000
 80034a0:	40010400 	.word	0x40010400

080034a4 <TIM_OC2_SetConfig>:
{
 80034a4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a6:	6a03      	ldr	r3, [r0, #32]
 80034a8:	f023 0310 	bic.w	r3, r3, #16
 80034ac:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80034ae:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80034b0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80034b2:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034b4:	4c14      	ldr	r4, [pc, #80]	; (8003508 <TIM_OC2_SetConfig+0x64>)
 80034b6:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b8:	680d      	ldr	r5, [r1, #0]
 80034ba:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80034be:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034c2:	688c      	ldr	r4, [r1, #8]
 80034c4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034c8:	4c10      	ldr	r4, [pc, #64]	; (800350c <TIM_OC2_SetConfig+0x68>)
 80034ca:	4e11      	ldr	r6, [pc, #68]	; (8003510 <TIM_OC2_SetConfig+0x6c>)
 80034cc:	42b0      	cmp	r0, r6
 80034ce:	bf18      	it	ne
 80034d0:	42a0      	cmpne	r0, r4
 80034d2:	bf0c      	ite	eq
 80034d4:	2401      	moveq	r4, #1
 80034d6:	2400      	movne	r4, #0
 80034d8:	d106      	bne.n	80034e8 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 80034da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034de:	68ce      	ldr	r6, [r1, #12]
 80034e0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80034e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e8:	b13c      	cbz	r4, 80034fa <TIM_OC2_SetConfig+0x56>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034ee:	694c      	ldr	r4, [r1, #20]
 80034f0:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034f4:	698c      	ldr	r4, [r1, #24]
 80034f6:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80034fa:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80034fc:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80034fe:	684a      	ldr	r2, [r1, #4]
 8003500:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003502:	6203      	str	r3, [r0, #32]
}
 8003504:	bc70      	pop	{r4, r5, r6}
 8003506:	4770      	bx	lr
 8003508:	feff8cff 	.word	0xfeff8cff
 800350c:	40010000 	.word	0x40010000
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_TIM_PWM_ConfigChannel>:
{
 8003514:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003516:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	f000 8092 	beq.w	8003644 <HAL_TIM_PWM_ConfigChannel+0x130>
 8003520:	4604      	mov	r4, r0
 8003522:	460d      	mov	r5, r1
 8003524:	2301      	movs	r3, #1
 8003526:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800352a:	2302      	movs	r3, #2
 800352c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003530:	2a14      	cmp	r2, #20
 8003532:	d81e      	bhi.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x5e>
 8003534:	e8df f002 	tbb	[pc, r2]
 8003538:	1d1d1d0b 	.word	0x1d1d1d0b
 800353c:	1d1d1d24 	.word	0x1d1d1d24
 8003540:	1d1d1d38 	.word	0x1d1d1d38
 8003544:	1d1d1d4b 	.word	0x1d1d1d4b
 8003548:	1d1d1d5f 	.word	0x1d1d1d5f
 800354c:	72          	.byte	0x72
 800354d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800354e:	6800      	ldr	r0, [r0, #0]
 8003550:	f7ff fcac 	bl	8002eac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	6993      	ldr	r3, [r2, #24]
 8003558:	f043 0308 	orr.w	r3, r3, #8
 800355c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	6993      	ldr	r3, [r2, #24]
 8003562:	f023 0304 	bic.w	r3, r3, #4
 8003566:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	6993      	ldr	r3, [r2, #24]
 800356c:	6929      	ldr	r1, [r5, #16]
 800356e:	430b      	orrs	r3, r1
 8003570:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003572:	2301      	movs	r3, #1
 8003574:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003578:	2000      	movs	r0, #0
 800357a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800357e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003580:	6800      	ldr	r0, [r0, #0]
 8003582:	f7ff ff8f 	bl	80034a4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	6993      	ldr	r3, [r2, #24]
 800358a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800358e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	6993      	ldr	r3, [r2, #24]
 8003594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003598:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800359a:	6822      	ldr	r2, [r4, #0]
 800359c:	6993      	ldr	r3, [r2, #24]
 800359e:	6929      	ldr	r1, [r5, #16]
 80035a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035a4:	6193      	str	r3, [r2, #24]
      break;
 80035a6:	e7e4      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035a8:	6800      	ldr	r0, [r0, #0]
 80035aa:	f7ff fcb3 	bl	8002f14 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ae:	6822      	ldr	r2, [r4, #0]
 80035b0:	69d3      	ldr	r3, [r2, #28]
 80035b2:	f043 0308 	orr.w	r3, r3, #8
 80035b6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	69d3      	ldr	r3, [r2, #28]
 80035bc:	f023 0304 	bic.w	r3, r3, #4
 80035c0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	69d3      	ldr	r3, [r2, #28]
 80035c6:	6929      	ldr	r1, [r5, #16]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	61d3      	str	r3, [r2, #28]
      break;
 80035cc:	e7d1      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ce:	6800      	ldr	r0, [r0, #0]
 80035d0:	f7ff fcd8 	bl	8002f84 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	69d3      	ldr	r3, [r2, #28]
 80035d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035dc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035de:	6822      	ldr	r2, [r4, #0]
 80035e0:	69d3      	ldr	r3, [r2, #28]
 80035e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035e6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035e8:	6822      	ldr	r2, [r4, #0]
 80035ea:	69d3      	ldr	r3, [r2, #28]
 80035ec:	6929      	ldr	r1, [r5, #16]
 80035ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035f2:	61d3      	str	r3, [r2, #28]
      break;
 80035f4:	e7bd      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035f6:	6800      	ldr	r0, [r0, #0]
 80035f8:	f7ff fcee 	bl	8002fd8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800360a:	f023 0304 	bic.w	r3, r3, #4
 800360e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003610:	6822      	ldr	r2, [r4, #0]
 8003612:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003614:	6929      	ldr	r1, [r5, #16]
 8003616:	430b      	orrs	r3, r1
 8003618:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 800361a:	e7aa      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800361c:	6800      	ldr	r0, [r0, #0]
 800361e:	f7ff fd05 	bl	800302c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003626:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800362a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800362c:	6822      	ldr	r2, [r4, #0]
 800362e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003634:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003636:	6822      	ldr	r2, [r4, #0]
 8003638:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800363a:	6929      	ldr	r1, [r5, #16]
 800363c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003640:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8003642:	e796      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8003644:	2002      	movs	r0, #2
 8003646:	e79a      	b.n	800357e <HAL_TIM_PWM_ConfigChannel+0x6a>

08003648 <TIM_TI1_SetConfig>:
{
 8003648:	b470      	push	{r4, r5, r6}
 800364a:	4694      	mov	ip, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364c:	6a04      	ldr	r4, [r0, #32]
 800364e:	f024 0401 	bic.w	r4, r4, #1
 8003652:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003654:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003656:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003658:	4d1d      	ldr	r5, [pc, #116]	; (80036d0 <TIM_TI1_SetConfig+0x88>)
 800365a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800365e:	bf18      	it	ne
 8003660:	42a8      	cmpne	r0, r5
 8003662:	d023      	beq.n	80036ac <TIM_TI1_SetConfig+0x64>
 8003664:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <TIM_TI1_SetConfig+0x8c>)
 8003666:	4290      	cmp	r0, r2
 8003668:	bf14      	ite	ne
 800366a:	2200      	movne	r2, #0
 800366c:	2201      	moveq	r2, #1
 800366e:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 8003672:	42a8      	cmp	r0, r5
 8003674:	d01a      	beq.n	80036ac <TIM_TI1_SetConfig+0x64>
 8003676:	b9ca      	cbnz	r2, 80036ac <TIM_TI1_SetConfig+0x64>
 8003678:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800367c:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8003680:	4290      	cmp	r0, r2
 8003682:	bf14      	ite	ne
 8003684:	2200      	movne	r2, #0
 8003686:	2201      	moveq	r2, #1
 8003688:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800368c:	42a8      	cmp	r0, r5
 800368e:	d00d      	beq.n	80036ac <TIM_TI1_SetConfig+0x64>
 8003690:	b962      	cbnz	r2, 80036ac <TIM_TI1_SetConfig+0x64>
 8003692:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <TIM_TI1_SetConfig+0x90>)
 8003694:	4290      	cmp	r0, r2
 8003696:	bf14      	ite	ne
 8003698:	2200      	movne	r2, #0
 800369a:	2201      	moveq	r2, #1
 800369c:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80036a0:	42a8      	cmp	r0, r5
 80036a2:	d003      	beq.n	80036ac <TIM_TI1_SetConfig+0x64>
 80036a4:	b912      	cbnz	r2, 80036ac <TIM_TI1_SetConfig+0x64>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036a6:	f044 0201 	orr.w	r2, r4, #1
 80036aa:	e003      	b.n	80036b4 <TIM_TI1_SetConfig+0x6c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80036ac:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80036b0:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036be:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036c2:	f001 010a 	and.w	r1, r1, #10
 80036c6:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80036c8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80036ca:	6201      	str	r1, [r0, #32]
}
 80036cc:	bc70      	pop	{r4, r5, r6}
 80036ce:	4770      	bx	lr
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40001800 	.word	0x40001800

080036dc <HAL_TIM_IC_ConfigChannel>:
{
 80036dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80036de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d058      	beq.n	8003798 <HAL_TIM_IC_ConfigChannel+0xbc>
 80036e6:	4604      	mov	r4, r0
 80036e8:	460d      	mov	r5, r1
 80036ea:	2301      	movs	r3, #1
 80036ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	2302      	movs	r3, #2
 80036f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 80036f6:	b1da      	cbz	r2, 8003730 <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 80036f8:	2a04      	cmp	r2, #4
 80036fa:	d02a      	beq.n	8003752 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 80036fc:	2a08      	cmp	r2, #8
 80036fe:	d03a      	beq.n	8003776 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance,
 8003700:	68cb      	ldr	r3, [r1, #12]
 8003702:	684a      	ldr	r2, [r1, #4]
 8003704:	6809      	ldr	r1, [r1, #0]
 8003706:	6800      	ldr	r0, [r0, #0]
 8003708:	f7ff fd17 	bl	800313a <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800370c:	6822      	ldr	r2, [r4, #0]
 800370e:	69d3      	ldr	r3, [r2, #28]
 8003710:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003714:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	69d3      	ldr	r3, [r2, #28]
 800371a:	68a9      	ldr	r1, [r5, #8]
 800371c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003720:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8003722:	2301      	movs	r3, #1
 8003724:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003728:	2000      	movs	r0, #0
 800372a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800372e:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8003730:	68cb      	ldr	r3, [r1, #12]
 8003732:	684a      	ldr	r2, [r1, #4]
 8003734:	6809      	ldr	r1, [r1, #0]
 8003736:	6800      	ldr	r0, [r0, #0]
 8003738:	f7ff ff86 	bl	8003648 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800373c:	6822      	ldr	r2, [r4, #0]
 800373e:	6993      	ldr	r3, [r2, #24]
 8003740:	f023 030c 	bic.w	r3, r3, #12
 8003744:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	6993      	ldr	r3, [r2, #24]
 800374a:	68a9      	ldr	r1, [r5, #8]
 800374c:	430b      	orrs	r3, r1
 800374e:	6193      	str	r3, [r2, #24]
 8003750:	e7e7      	b.n	8003722 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance,
 8003752:	68cb      	ldr	r3, [r1, #12]
 8003754:	684a      	ldr	r2, [r1, #4]
 8003756:	6809      	ldr	r1, [r1, #0]
 8003758:	6800      	ldr	r0, [r0, #0]
 800375a:	f7ff fca4 	bl	80030a6 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	6993      	ldr	r3, [r2, #24]
 8003762:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003766:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	6993      	ldr	r3, [r2, #24]
 800376c:	68a9      	ldr	r1, [r5, #8]
 800376e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003772:	6193      	str	r3, [r2, #24]
 8003774:	e7d5      	b.n	8003722 <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,
 8003776:	68cb      	ldr	r3, [r1, #12]
 8003778:	684a      	ldr	r2, [r1, #4]
 800377a:	6809      	ldr	r1, [r1, #0]
 800377c:	6800      	ldr	r0, [r0, #0]
 800377e:	f7ff fcc1 	bl	8003104 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003782:	6822      	ldr	r2, [r4, #0]
 8003784:	69d3      	ldr	r3, [r2, #28]
 8003786:	f023 030c 	bic.w	r3, r3, #12
 800378a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800378c:	6822      	ldr	r2, [r4, #0]
 800378e:	69d3      	ldr	r3, [r2, #28]
 8003790:	68a9      	ldr	r1, [r5, #8]
 8003792:	430b      	orrs	r3, r1
 8003794:	61d3      	str	r3, [r2, #28]
 8003796:	e7c4      	b.n	8003722 <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 8003798:	2002      	movs	r0, #2
 800379a:	e7c8      	b.n	800372e <HAL_TIM_IC_ConfigChannel+0x52>

0800379c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800379c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800379e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037a4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80037a8:	430a      	orrs	r2, r1
 80037aa:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ae:	6082      	str	r2, [r0, #8]
}
 80037b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80037b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d064      	beq.n	800388a <HAL_TIM_ConfigClockSource+0xd2>
{
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80037c4:	2301      	movs	r3, #1
 80037c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80037ca:	2302      	movs	r3, #2
 80037cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	6802      	ldr	r2, [r0, #0]
 80037d2:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d4:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <HAL_TIM_ConfigClockSource+0xd8>)
 80037d6:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80037d8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80037da:	680b      	ldr	r3, [r1, #0]
 80037dc:	2b60      	cmp	r3, #96	; 0x60
 80037de:	d040      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0xaa>
 80037e0:	d822      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x70>
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d047      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0xbe>
 80037e6:	d90b      	bls.n	8003800 <HAL_TIM_ConfigClockSource+0x48>
 80037e8:	2b50      	cmp	r3, #80	; 0x50
 80037ea:	d10e      	bne.n	800380a <HAL_TIM_ConfigClockSource+0x52>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ec:	68ca      	ldr	r2, [r1, #12]
 80037ee:	6849      	ldr	r1, [r1, #4]
 80037f0:	6820      	ldr	r0, [r4, #0]
 80037f2:	f7ff fc45 	bl	8003080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f6:	2150      	movs	r1, #80	; 0x50
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	f7ff fcb9 	bl	8003170 <TIM_ITRx_SetConfig>
      break;
 80037fe:	e004      	b.n	800380a <HAL_TIM_ConfigClockSource+0x52>
  switch (sClockSourceConfig->ClockSource)
 8003800:	2b20      	cmp	r3, #32
 8003802:	d00c      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x66>
 8003804:	d908      	bls.n	8003818 <HAL_TIM_ConfigClockSource+0x60>
 8003806:	2b30      	cmp	r3, #48	; 0x30
 8003808:	d009      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x66>
  htim->State = HAL_TIM_STATE_READY;
 800380a:	2301      	movs	r3, #1
 800380c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003810:	2000      	movs	r0, #0
 8003812:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003816:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003818:	b10b      	cbz	r3, 800381e <HAL_TIM_ConfigClockSource+0x66>
 800381a:	2b10      	cmp	r3, #16
 800381c:	d1f5      	bne.n	800380a <HAL_TIM_ConfigClockSource+0x52>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381e:	4619      	mov	r1, r3
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	f7ff fca5 	bl	8003170 <TIM_ITRx_SetConfig>
      break;
 8003826:	e7f0      	b.n	800380a <HAL_TIM_ConfigClockSource+0x52>
  switch (sClockSourceConfig->ClockSource)
 8003828:	2b70      	cmp	r3, #112	; 0x70
 800382a:	d00e      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x92>
 800382c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003830:	d1eb      	bne.n	800380a <HAL_TIM_ConfigClockSource+0x52>
      TIM_ETR_SetConfig(htim->Instance,
 8003832:	68cb      	ldr	r3, [r1, #12]
 8003834:	684a      	ldr	r2, [r1, #4]
 8003836:	6889      	ldr	r1, [r1, #8]
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	f7ff ffaf 	bl	800379c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800383e:	6822      	ldr	r2, [r4, #0]
 8003840:	6893      	ldr	r3, [r2, #8]
 8003842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003846:	6093      	str	r3, [r2, #8]
      break;
 8003848:	e7df      	b.n	800380a <HAL_TIM_ConfigClockSource+0x52>
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	68cb      	ldr	r3, [r1, #12]
 800384c:	684a      	ldr	r2, [r1, #4]
 800384e:	6889      	ldr	r1, [r1, #8]
 8003850:	6820      	ldr	r0, [r4, #0]
 8003852:	f7ff ffa3 	bl	800379c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003856:	6822      	ldr	r2, [r4, #0]
 8003858:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800385a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800385e:	6093      	str	r3, [r2, #8]
      break;
 8003860:	e7d3      	b.n	800380a <HAL_TIM_ConfigClockSource+0x52>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003862:	68ca      	ldr	r2, [r1, #12]
 8003864:	6849      	ldr	r1, [r1, #4]
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	f7ff fc38 	bl	80030dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800386c:	2160      	movs	r1, #96	; 0x60
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	f7ff fc7e 	bl	8003170 <TIM_ITRx_SetConfig>
      break;
 8003874:	e7c9      	b.n	800380a <HAL_TIM_ConfigClockSource+0x52>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003876:	68ca      	ldr	r2, [r1, #12]
 8003878:	6849      	ldr	r1, [r1, #4]
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	f7ff fc00 	bl	8003080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	6820      	ldr	r0, [r4, #0]
 8003884:	f7ff fc74 	bl	8003170 <TIM_ITRx_SetConfig>
      break;
 8003888:	e7bf      	b.n	800380a <HAL_TIM_ConfigClockSource+0x52>
  __HAL_LOCK(htim);
 800388a:	2002      	movs	r0, #2
}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	fffe0088 	.word	0xfffe0088

08003894 <TIM_SlaveTimer_SetConfig>:
{
 8003894:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8003896:	6804      	ldr	r4, [r0, #0]
 8003898:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800389a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800389e:	684b      	ldr	r3, [r1, #4]
 80038a0:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80038a2:	4a20      	ldr	r2, [pc, #128]	; (8003924 <TIM_SlaveTimer_SetConfig+0x90>)
 80038a4:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80038a6:	680b      	ldr	r3, [r1, #0]
 80038a8:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80038aa:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80038ac:	684b      	ldr	r3, [r1, #4]
 80038ae:	2b60      	cmp	r3, #96	; 0x60
 80038b0:	d02c      	beq.n	800390c <TIM_SlaveTimer_SetConfig+0x78>
 80038b2:	d80c      	bhi.n	80038ce <TIM_SlaveTimer_SetConfig+0x3a>
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d014      	beq.n	80038e2 <TIM_SlaveTimer_SetConfig+0x4e>
 80038b8:	2b50      	cmp	r3, #80	; 0x50
 80038ba:	d106      	bne.n	80038ca <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038bc:	690a      	ldr	r2, [r1, #16]
 80038be:	6889      	ldr	r1, [r1, #8]
 80038c0:	6800      	ldr	r0, [r0, #0]
 80038c2:	f7ff fbdd 	bl	8003080 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 80038c6:	2000      	movs	r0, #0
      break;
 80038c8:	e028      	b.n	800391c <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 80038ca:	2000      	movs	r0, #0
 80038cc:	e026      	b.n	800391c <TIM_SlaveTimer_SetConfig+0x88>
 80038ce:	2b70      	cmp	r3, #112	; 0x70
 80038d0:	d123      	bne.n	800391a <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 80038d2:	690b      	ldr	r3, [r1, #16]
 80038d4:	688a      	ldr	r2, [r1, #8]
 80038d6:	68c9      	ldr	r1, [r1, #12]
 80038d8:	6800      	ldr	r0, [r0, #0]
 80038da:	f7ff ff5f 	bl	800379c <TIM_ETR_SetConfig>
  return HAL_OK;
 80038de:	2000      	movs	r0, #0
      break;
 80038e0:	e01c      	b.n	800391c <TIM_SlaveTimer_SetConfig+0x88>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80038e2:	680b      	ldr	r3, [r1, #0]
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d01a      	beq.n	800391e <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 80038e8:	6803      	ldr	r3, [r0, #0]
 80038ea:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038ec:	6a1a      	ldr	r2, [r3, #32]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80038f4:	6802      	ldr	r2, [r0, #0]
 80038f6:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80038fc:	6909      	ldr	r1, [r1, #16]
 80038fe:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8003902:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8003904:	6803      	ldr	r3, [r0, #0]
 8003906:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 8003908:	2000      	movs	r0, #0
      break;
 800390a:	e007      	b.n	800391c <TIM_SlaveTimer_SetConfig+0x88>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800390c:	690a      	ldr	r2, [r1, #16]
 800390e:	6889      	ldr	r1, [r1, #8]
 8003910:	6800      	ldr	r0, [r0, #0]
 8003912:	f7ff fbe3 	bl	80030dc <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8003916:	2000      	movs	r0, #0
      break;
 8003918:	e000      	b.n	800391c <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 800391a:	2000      	movs	r0, #0
}
 800391c:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 800391e:	2001      	movs	r0, #1
 8003920:	e7fc      	b.n	800391c <TIM_SlaveTimer_SetConfig+0x88>
 8003922:	bf00      	nop
 8003924:	fffefff8 	.word	0xfffefff8

08003928 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8003928:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d022      	beq.n	8003976 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8003930:	b510      	push	{r4, lr}
 8003932:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003934:	2301      	movs	r3, #1
 8003936:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800393a:	2302      	movs	r3, #2
 800393c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003940:	f7ff ffa8 	bl	8003894 <TIM_SlaveTimer_SetConfig>
 8003944:	b980      	cbnz	r0, 8003968 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003946:	6822      	ldr	r2, [r4, #0]
 8003948:	68d3      	ldr	r3, [r2, #12]
 800394a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003950:	6822      	ldr	r2, [r4, #0]
 8003952:	68d3      	ldr	r3, [r2, #12]
 8003954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003958:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 800395a:	2301      	movs	r3, #1
 800395c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003960:	2300      	movs	r3, #0
 8003962:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003966:	bd10      	pop	{r4, pc}
      htim->State = HAL_TIM_STATE_READY;
 8003968:	2001      	movs	r0, #1
 800396a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800396e:	2300      	movs	r3, #0
 8003970:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003974:	e7f7      	b.n	8003966 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8003976:	2002      	movs	r0, #2
}
 8003978:	4770      	bx	lr

0800397a <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  // JSB fix. 20191115. Prevents CCxE bit getting reset momentarily, which would be a problem if any current flows into the output e.g. from a resistor.
  // Original version:
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800397a:	f001 031f 	and.w	r3, r1, #31
 800397e:	2101      	movs	r1, #1
 8003980:	4099      	lsls	r1, r3
  //  TIMx->CCER &= ~tmp;
  //
  //  /* Set or reset the CCxE Bit */
  //  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
  // JSB version: !!! Not tested! !!!
  if (ChannelState)
 8003982:	b11a      	cbz	r2, 800398c <TIM_CCxChannelCmd+0x12>
    TIMx->CCER |= tmp;
 8003984:	6a03      	ldr	r3, [r0, #32]
 8003986:	4319      	orrs	r1, r3
 8003988:	6201      	str	r1, [r0, #32]
 800398a:	4770      	bx	lr
  else
    TIMx->CCER &= ~tmp;
 800398c:	6a03      	ldr	r3, [r0, #32]
 800398e:	ea23 0101 	bic.w	r1, r3, r1
 8003992:	6201      	str	r1, [r0, #32]
}
 8003994:	4770      	bx	lr
	...

08003998 <HAL_TIM_IC_Start_IT>:
{
 8003998:	b510      	push	{r4, lr}
 800399a:	4604      	mov	r4, r0
  switch (Channel)
 800399c:	290c      	cmp	r1, #12
 800399e:	d80d      	bhi.n	80039bc <HAL_TIM_IC_Start_IT+0x24>
 80039a0:	e8df f001 	tbb	[pc, r1]
 80039a4:	0c0c0c07 	.word	0x0c0c0c07
 80039a8:	0c0c0c1f 	.word	0x0c0c0c1f
 80039ac:	0c0c0c25 	.word	0x0c0c0c25
 80039b0:	2b          	.byte	0x2b
 80039b1:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039b2:	6802      	ldr	r2, [r0, #0]
 80039b4:	68d3      	ldr	r3, [r2, #12]
 80039b6:	f043 0302 	orr.w	r3, r3, #2
 80039ba:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039bc:	2201      	movs	r2, #1
 80039be:	6820      	ldr	r0, [r4, #0]
 80039c0:	f7ff ffdb 	bl	800397a <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	6891      	ldr	r1, [r2, #8]
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_TIM_IC_Start_IT+0x70>)
 80039ca:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039cc:	2b06      	cmp	r3, #6
 80039ce:	bf18      	it	ne
 80039d0:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IC_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 80039d6:	6813      	ldr	r3, [r2, #0]
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6013      	str	r3, [r2, #0]
}
 80039de:	2000      	movs	r0, #0
 80039e0:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039e2:	6802      	ldr	r2, [r0, #0]
 80039e4:	68d3      	ldr	r3, [r2, #12]
 80039e6:	f043 0304 	orr.w	r3, r3, #4
 80039ea:	60d3      	str	r3, [r2, #12]
      break;
 80039ec:	e7e6      	b.n	80039bc <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039ee:	6802      	ldr	r2, [r0, #0]
 80039f0:	68d3      	ldr	r3, [r2, #12]
 80039f2:	f043 0308 	orr.w	r3, r3, #8
 80039f6:	60d3      	str	r3, [r2, #12]
      break;
 80039f8:	e7e0      	b.n	80039bc <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039fa:	6802      	ldr	r2, [r0, #0]
 80039fc:	68d3      	ldr	r3, [r2, #12]
 80039fe:	f043 0310 	orr.w	r3, r3, #16
 8003a02:	60d3      	str	r3, [r2, #12]
      break;
 8003a04:	e7da      	b.n	80039bc <HAL_TIM_IC_Start_IT+0x24>
 8003a06:	bf00      	nop
 8003a08:	00010007 	.word	0x00010007

08003a0c <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <TIM_ResetCallback+0x54>)
 8003a0e:	6783      	str	r3, [r0, #120]	; 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 8003a10:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <TIM_ResetCallback+0x58>)
 8003a12:	67c3      	str	r3, [r0, #124]	; 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <TIM_ResetCallback+0x5c>)
 8003a16:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <TIM_ResetCallback+0x60>)
 8003a1c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <TIM_ResetCallback+0x64>)
 8003a22:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8003a26:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <TIM_ResetCallback+0x68>)
 8003a28:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <TIM_ResetCallback+0x6c>)
 8003a2e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <TIM_ResetCallback+0x70>)
 8003a34:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <TIM_ResetCallback+0x74>)
 8003a3a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <TIM_ResetCallback+0x78>)
 8003a40:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <TIM_ResetCallback+0x7c>)
 8003a46:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8003a4a:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <TIM_ResetCallback+0x80>)
 8003a4c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <TIM_ResetCallback+0x84>)
 8003a52:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <TIM_ResetCallback+0x88>)
 8003a58:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	08004911 	.word	0x08004911
 8003a64:	08002e9d 	.word	0x08002e9d
 8003a68:	08002ea7 	.word	0x08002ea7
 8003a6c:	08002ea9 	.word	0x08002ea9
 8003a70:	08004951 	.word	0x08004951
 8003a74:	08002ea1 	.word	0x08002ea1
 8003a78:	08002e9f 	.word	0x08002e9f
 8003a7c:	08002ea3 	.word	0x08002ea3
 8003a80:	08002ea5 	.word	0x08002ea5
 8003a84:	08002eab 	.word	0x08002eab
 8003a88:	08003c69 	.word	0x08003c69
 8003a8c:	08003c6b 	.word	0x08003c6b
 8003a90:	08003c6d 	.word	0x08003c6d
 8003a94:	08003c6f 	.word	0x08003c6f

08003a98 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003a98:	b1f0      	cbz	r0, 8003ad8 <HAL_TIM_Base_Init+0x40>
{
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003aa2:	b163      	cbz	r3, 8003abe <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aaa:	4621      	mov	r1, r4
 8003aac:	f851 0b04 	ldr.w	r0, [r1], #4
 8003ab0:	f7ff fc70 	bl	8003394 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003aba:	2000      	movs	r0, #0
}
 8003abc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003abe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 8003ac2:	f7ff ffa3 	bl	8003a0c <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 8003ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ac8:	b11b      	cbz	r3, 8003ad2 <HAL_TIM_Base_Init+0x3a>
    htim->Base_MspInitCallback(htim);
 8003aca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003acc:	4620      	mov	r0, r4
 8003ace:	4798      	blx	r3
 8003ad0:	e7e8      	b.n	8003aa4 <HAL_TIM_Base_Init+0xc>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003ad2:	4b02      	ldr	r3, [pc, #8]	; (8003adc <HAL_TIM_Base_Init+0x44>)
 8003ad4:	6423      	str	r3, [r4, #64]	; 0x40
 8003ad6:	e7f8      	b.n	8003aca <HAL_TIM_Base_Init+0x32>
    return HAL_ERROR;
 8003ad8:	2001      	movs	r0, #1
}
 8003ada:	4770      	bx	lr
 8003adc:	08005669 	.word	0x08005669

08003ae0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003ae0:	b1f0      	cbz	r0, 8003b20 <HAL_TIM_PWM_Init+0x40>
{
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ae6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003aea:	b163      	cbz	r3, 8003b06 <HAL_TIM_PWM_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	2302      	movs	r3, #2
 8003aee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af2:	4621      	mov	r1, r4
 8003af4:	f851 0b04 	ldr.w	r0, [r1], #4
 8003af8:	f7ff fc4c 	bl	8003394 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003b02:	2000      	movs	r0, #0
}
 8003b04:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 8003b0a:	f7ff ff7f 	bl	8003a0c <TIM_ResetCallback>
    if (htim->PWM_MspInitCallback == NULL)
 8003b0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b10:	b11b      	cbz	r3, 8003b1a <HAL_TIM_PWM_Init+0x3a>
    htim->PWM_MspInitCallback(htim);
 8003b12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b14:	4620      	mov	r0, r4
 8003b16:	4798      	blx	r3
 8003b18:	e7e8      	b.n	8003aec <HAL_TIM_PWM_Init+0xc>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003b1a:	4b02      	ldr	r3, [pc, #8]	; (8003b24 <HAL_TIM_PWM_Init+0x44>)
 8003b1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b1e:	e7f8      	b.n	8003b12 <HAL_TIM_PWM_Init+0x32>
    return HAL_ERROR;
 8003b20:	2001      	movs	r0, #1
}
 8003b22:	4770      	bx	lr
 8003b24:	080055d5 	.word	0x080055d5

08003b28 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003b28:	b1f0      	cbz	r0, 8003b68 <HAL_TIM_IC_Init+0x40>
{
 8003b2a:	b510      	push	{r4, lr}
 8003b2c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b32:	b163      	cbz	r3, 8003b4e <HAL_TIM_IC_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	2302      	movs	r3, #2
 8003b36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b40:	f7ff fc28 	bl	8003394 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003b4a:	2000      	movs	r0, #0
}
 8003b4c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 8003b52:	f7ff ff5b 	bl	8003a0c <TIM_ResetCallback>
    if (htim->IC_MspInitCallback == NULL)
 8003b56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003b58:	b11b      	cbz	r3, 8003b62 <HAL_TIM_IC_Init+0x3a>
    htim->IC_MspInitCallback(htim);
 8003b5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	4798      	blx	r3
 8003b60:	e7e8      	b.n	8003b34 <HAL_TIM_IC_Init+0xc>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8003b62:	4b02      	ldr	r3, [pc, #8]	; (8003b6c <HAL_TIM_IC_Init+0x44>)
 8003b64:	64a3      	str	r3, [r4, #72]	; 0x48
 8003b66:	e7f8      	b.n	8003b5a <HAL_TIM_IC_Init+0x32>
    return HAL_ERROR;
 8003b68:	2001      	movs	r0, #1
}
 8003b6a:	4770      	bx	lr
 8003b6c:	08002e9b 	.word	0x08002e9b

08003b70 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d028      	beq.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0x5a>
{
 8003b78:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	2302      	movs	r3, #2
 8003b82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b86:	6803      	ldr	r3, [r0, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b8a:	689c      	ldr	r4, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b8c:	4e10      	ldr	r6, [pc, #64]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8003b8e:	4d11      	ldr	r5, [pc, #68]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003b90:	42ab      	cmp	r3, r5
 8003b92:	bf18      	it	ne
 8003b94:	42b3      	cmpne	r3, r6
 8003b96:	d103      	bne.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b98:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b9c:	684d      	ldr	r5, [r1, #4]
 8003b9e:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba4:	680d      	ldr	r5, [r1, #0]
 8003ba6:	432a      	orrs	r2, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba8:	f024 0c80 	bic.w	ip, r4, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bac:	6889      	ldr	r1, [r1, #8]
 8003bae:	ea41 010c 	orr.w	r1, r1, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bb4:	6803      	ldr	r3, [r0, #0]
 8003bb6:	6099      	str	r1, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003bc4:	4618      	mov	r0, r3
}
 8003bc6:	bc70      	pop	{r4, r5, r6}
 8003bc8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003bca:	2002      	movs	r0, #2
}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	40010400 	.word	0x40010400

08003bd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d03c      	beq.n	8003c5a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 8003be0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003be2:	2301      	movs	r3, #1
 8003be4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003be8:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bee:	688a      	ldr	r2, [r1, #8]
 8003bf0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bf6:	684a      	ldr	r2, [r1, #4]
 8003bf8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bfe:	680a      	ldr	r2, [r1, #0]
 8003c00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c06:	690a      	ldr	r2, [r1, #16]
 8003c08:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c0e:	694a      	ldr	r2, [r1, #20]
 8003c10:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c16:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003c18:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c1a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003c1e:	698a      	ldr	r2, [r1, #24]
 8003c20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c24:	6802      	ldr	r2, [r0, #0]
 8003c26:	4d0e      	ldr	r5, [pc, #56]	; (8003c60 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8003c28:	4c0e      	ldr	r4, [pc, #56]	; (8003c64 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8003c2a:	42a2      	cmp	r2, r4
 8003c2c:	bf18      	it	ne
 8003c2e:	42aa      	cmpne	r2, r5
 8003c30:	d10c      	bne.n	8003c4c <HAL_TIMEx_ConfigBreakDeadTime+0x74>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c36:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003c38:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c40:	69cc      	ldr	r4, [r1, #28]
 8003c42:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c44:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003c48:	6a09      	ldr	r1, [r1, #32]
 8003c4a:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c4c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003c54:	4618      	mov	r0, r3
}
 8003c56:	bc30      	pop	{r4, r5}
 8003c58:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003c5a:	2002      	movs	r0, #2
}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40010400 	.word	0x40010400

08003c68 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c68:	4770      	bx	lr

08003c6a <HAL_TIMEx_CommutHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c6c:	4770      	bx	lr

08003c6e <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c6e:	4770      	bx	lr

08003c70 <SwapBytes>:
///////////////////////////////////////////////////////////////////////////////
// Uncategorized:

uint16_t SwapBytes(uint16_t Value)
{
  return (Value >> 8) | ((Value & 0xFF) << 8);
 8003c70:	0a03      	lsrs	r3, r0, #8
 8003c72:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8003c76:	b280      	uxth	r0, r0
 8003c78:	4770      	bx	lr

08003c7a <Clamp_uint16>:

///////////////////////////////////////////////////////////////////////////////
// Clamp:

uint16_t Clamp_uint16(uint16_t Value, uint16_t MinValue , uint16_t MaxValue)
{
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4610      	mov	r0, r2
  if (Value < MinValue)
 8003c7e:	428b      	cmp	r3, r1
 8003c80:	d300      	bcc.n	8003c84 <Clamp_uint16+0xa>
 8003c82:	4619      	mov	r1, r3
    Value = MinValue;
  if (Value > MaxValue)
 8003c84:	4281      	cmp	r1, r0
 8003c86:	d800      	bhi.n	8003c8a <Clamp_uint16+0x10>
 8003c88:	4608      	mov	r0, r1
    Value = MaxValue;
  return Value;
}
 8003c8a:	4770      	bx	lr

08003c8c <ILI9341_DrawPixel_ToBackBuffer>:
    ILI9341_CSX_Low();
}

static void ILI9341_DrawPixel_ToBackBuffer(int16_t X, int16_t Y, uint16_t Color)
{
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8003c8c:	fa1f fc80 	uxth.w	ip, r0
 8003c90:	0fcb      	lsrs	r3, r1, #31
 8003c92:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
 8003c96:	bf88      	it	hi
 8003c98:	f043 0301 	orrhi.w	r3, r3, #1
 8003c9c:	b953      	cbnz	r3, 8003cb4 <ILI9341_DrawPixel_ToBackBuffer+0x28>
 8003c9e:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 8003ca2:	da07      	bge.n	8003cb4 <ILI9341_DrawPixel_ToBackBuffer+0x28>
    return;

  pBackBuffer[X + Y * ILI9341_Width] = Color;
 8003ca4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8003ca8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003cac:	4b02      	ldr	r3, [pc, #8]	; (8003cb8 <ILI9341_DrawPixel_ToBackBuffer+0x2c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	20000484 	.word	0x20000484

08003cbc <IsNonPrintingChar>:
  return pFont->yAdvance;
}

static uint8_t IsNonPrintingChar(uint8_t Ch)
{
  return ((Ch < pFont->first) || (Ch > pFont->last));
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <IsNonPrintingChar+0x1c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	7a1a      	ldrb	r2, [r3, #8]
 8003cc2:	4282      	cmp	r2, r0
 8003cc4:	d804      	bhi.n	8003cd0 <IsNonPrintingChar+0x14>
 8003cc6:	7a5b      	ldrb	r3, [r3, #9]
 8003cc8:	4283      	cmp	r3, r0
 8003cca:	d203      	bcs.n	8003cd4 <IsNonPrintingChar+0x18>
 8003ccc:	2001      	movs	r0, #1
 8003cce:	4770      	bx	lr
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	4770      	bx	lr
 8003cd4:	2000      	movs	r0, #0
}
 8003cd6:	4770      	bx	lr
 8003cd8:	20000488 	.word	0x20000488

08003cdc <ILI9341_Write8>:
{
 8003cdc:	b500      	push	{lr}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	f88d 000f 	strb.w	r0, [sp, #15]
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8003ce4:	2364      	movs	r3, #100	; 0x64
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f10d 0217 	add.w	r2, sp, #23
 8003cee:	f10d 010f 	add.w	r1, sp, #15
 8003cf2:	4805      	ldr	r0, [pc, #20]	; (8003d08 <ILI9341_Write8+0x2c>)
 8003cf4:	6800      	ldr	r0, [r0, #0]
 8003cf6:	f7fe fe7c 	bl	80029f2 <HAL_SPI_TransmitReceive>
 8003cfa:	b910      	cbnz	r0, 8003d02 <ILI9341_Write8+0x26>
}
 8003cfc:	b007      	add	sp, #28
 8003cfe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003d02:	f001 f843 	bl	8004d8c <Error_Handler>
}
 8003d06:	e7f9      	b.n	8003cfc <ILI9341_Write8+0x20>
 8003d08:	2000048c 	.word	0x2000048c

08003d0c <ILI9341_Write16>:
{
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	4604      	mov	r4, r0
  ILI9341_Write8(Value >> 8);
 8003d10:	0a00      	lsrs	r0, r0, #8
 8003d12:	f7ff ffe3 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(Value);
 8003d16:	b2e0      	uxtb	r0, r4
 8003d18:	f7ff ffe0 	bl	8003cdc <ILI9341_Write8>
}
 8003d1c:	bd10      	pop	{r4, pc}

08003d1e <ILI9341_Write32>:
{
 8003d1e:	b510      	push	{r4, lr}
 8003d20:	4604      	mov	r4, r0
  ILI9341_Write16(Value >> 16);
 8003d22:	0c00      	lsrs	r0, r0, #16
 8003d24:	f7ff fff2 	bl	8003d0c <ILI9341_Write16>
  ILI9341_Write16(Value);
 8003d28:	b2a0      	uxth	r0, r4
 8003d2a:	f7ff ffef 	bl	8003d0c <ILI9341_Write16>
}
 8003d2e:	bd10      	pop	{r4, pc}

08003d30 <ILI9341_WriteCommand>:
{
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4604      	mov	r4, r0
  ILI9341_DC_Low();
 8003d34:	4d07      	ldr	r5, [pc, #28]	; (8003d54 <ILI9341_WriteCommand+0x24>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	2104      	movs	r1, #4
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f7fd f833 	bl	8000da6 <HAL_GPIO_WritePin>
  ILI9341_Write8(Value);
 8003d40:	b2e0      	uxtb	r0, r4
 8003d42:	f7ff ffcb 	bl	8003cdc <ILI9341_Write8>
  ILI9341_DC_High();
 8003d46:	2201      	movs	r2, #1
 8003d48:	2104      	movs	r1, #4
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7fd f82b 	bl	8000da6 <HAL_GPIO_WritePin>
}
 8003d50:	bd38      	pop	{r3, r4, r5, pc}
 8003d52:	bf00      	nop
 8003d54:	40020800 	.word	0x40020800

08003d58 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>:
{
 8003d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  if ((i_Width == 0) || (i_Height == 0))
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf18      	it	ne
 8003d66:	2a00      	cmpne	r2, #0
 8003d68:	d102      	bne.n	8003d70 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x18>
}
 8003d6a:	b003      	add	sp, #12
 8003d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d70:	4607      	mov	r7, r0
 8003d72:	468b      	mov	fp, r1
 8003d74:	4690      	mov	r8, r2
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003d76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4658      	mov	r0, fp
 8003d7e:	f7ff ff7c 	bl	8003c7a <Clamp_uint16>
 8003d82:	4682      	mov	sl, r0
 8003d84:	e011      	b.n	8003daa <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x52>
      pLine[X] = *pPixel++;
 8003d86:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 8003d8a:	f834 2b02 	ldrh.w	r2, [r4], #2
 8003d8e:	f829 2003 	strh.w	r2, [r9, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003d92:	3501      	adds	r5, #1
 8003d94:	eb08 0007 	add.w	r0, r8, r7
 8003d98:	22f0      	movs	r2, #240	; 0xf0
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	b280      	uxth	r0, r0
 8003d9e:	f7ff ff6c 	bl	8003c7a <Clamp_uint16>
 8003da2:	42a8      	cmp	r0, r5
 8003da4:	d8ef      	bhi.n	8003d86 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x2e>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8003da6:	f10a 0a01 	add.w	sl, sl, #1
 8003daa:	9b01      	ldr	r3, [sp, #4]
 8003dac:	eb03 000b 	add.w	r0, r3, fp
 8003db0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003db4:	2100      	movs	r1, #0
 8003db6:	b280      	uxth	r0, r0
 8003db8:	f7ff ff5f 	bl	8003c7a <Clamp_uint16>
 8003dbc:	4550      	cmp	r0, sl
 8003dbe:	d9d4      	bls.n	8003d6a <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x12>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x84>)
 8003dc2:	f8d3 9000 	ldr.w	r9, [r3]
 8003dc6:	ebca 160a 	rsb	r6, sl, sl, lsl #4
 8003dca:	0176      	lsls	r6, r6, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8003dcc:	22f0      	movs	r2, #240	; 0xf0
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	f7ff ff52 	bl	8003c7a <Clamp_uint16>
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	e7dc      	b.n	8003d94 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer+0x3c>
 8003dda:	bf00      	nop
 8003ddc:	20000484 	.word	0x20000484

08003de0 <ILI9341_DrawPixels_MSBFirst_ToDisplay>:
{
 8003de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de4:	9d06      	ldr	r5, [sp, #24]
  if ((Width == 0) || (Height == 0))
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf18      	it	ne
 8003dea:	2a00      	cmpne	r2, #0
 8003dec:	d101      	bne.n	8003df2 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x12>
}
 8003dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df2:	4680      	mov	r8, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	4616      	mov	r6, r2
 8003df8:	461f      	mov	r7, r3
  ILI9341_CSX_Low();
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	4829      	ldr	r0, [pc, #164]	; (8003ea4 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8003e00:	f7fc ffd1 	bl	8000da6 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8003e04:	202a      	movs	r0, #42	; 0x2a
 8003e06:	f7ff ff93 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	f7ff ff7e 	bl	8003d0c <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8003e10:	eb06 0008 	add.w	r0, r6, r8
 8003e14:	b280      	uxth	r0, r0
 8003e16:	3801      	subs	r0, #1
 8003e18:	b280      	uxth	r0, r0
 8003e1a:	f7ff ff77 	bl	8003d0c <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8003e1e:	202b      	movs	r0, #43	; 0x2b
 8003e20:	f7ff ff86 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8003e24:	4620      	mov	r0, r4
 8003e26:	f7ff ff71 	bl	8003d0c <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8003e2a:	1938      	adds	r0, r7, r4
 8003e2c:	b280      	uxth	r0, r0
 8003e2e:	3801      	subs	r0, #1
 8003e30:	b280      	uxth	r0, r0
 8003e32:	f7ff ff6b 	bl	8003d0c <ILI9341_Write16>
  ILI9341_WriteCommand(0x2C); // Memory write.
 8003e36:	202c      	movs	r0, #44	; 0x2c
 8003e38:	f7ff ff7a 	bl	8003d30 <ILI9341_WriteCommand>
  uint32_t NumBytes = Width * Height * sizeof(uint16_t);
 8003e3c:	fb07 f306 	mul.w	r3, r7, r6
 8003e40:	005b      	lsls	r3, r3, #1
    uint32_t op_addr = (uint32_t) addr;
 8003e42:	462a      	mov	r2, r5
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e44:	f3bf 8f4f 	dsb	sy
}
 8003e48:	e004      	b.n	8003e54 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x74>
      SCB->DCCMVAC = op_addr;
 8003e4a:	4917      	ldr	r1, [pc, #92]	; (8003ea8 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc8>)
 8003e4c:	f8c1 2268 	str.w	r2, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8003e50:	3220      	adds	r2, #32
      op_size -=           linesize;
 8003e52:	3b20      	subs	r3, #32
    while (op_size > 0) {
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	dcf8      	bgt.n	8003e4a <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x6a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e5c:	f3bf 8f6f 	isb	sy
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003e60:	2400      	movs	r4, #0
 8003e62:	e00b      	b.n	8003e7c <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x9c>
    pPixels += Width;
 8003e64:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8003e68:	4b10      	ldr	r3, [pc, #64]	; (8003eac <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d0f7      	beq.n	8003e68 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x88>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003e78:	3401      	adds	r4, #1
 8003e7a:	b224      	sxth	r4, r4
 8003e7c:	42a7      	cmp	r7, r4
 8003e7e:	dd0b      	ble.n	8003e98 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xb8>
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8003e80:	0072      	lsls	r2, r6, #1
 8003e82:	b292      	uxth	r2, r2
 8003e84:	4629      	mov	r1, r5
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xcc>)
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	f7fe ff1f 	bl	8002ccc <HAL_SPI_Transmit_DMA>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d0e8      	beq.n	8003e64 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
      Error_Handler();
 8003e92:	f000 ff7b 	bl	8004d8c <Error_Handler>
 8003e96:	e7e5      	b.n	8003e64 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0x84>
  ILI9341_CSX_High();
 8003e98:	2201      	movs	r2, #1
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4801      	ldr	r0, [pc, #4]	; (8003ea4 <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xc4>)
 8003e9e:	f7fc ff82 	bl	8000da6 <HAL_GPIO_WritePin>
 8003ea2:	e7a4      	b.n	8003dee <ILI9341_DrawPixels_MSBFirst_ToDisplay+0xe>
 8003ea4:	40020800 	.word	0x40020800
 8003ea8:	e000ed00 	.word	0xe000ed00
 8003eac:	2000048c 	.word	0x2000048c

08003eb0 <ILI9341_DrawBar_ToDisplay>:
  if ((Width == 0) || (Height == 0))
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf18      	it	ne
 8003eb4:	2a00      	cmpne	r2, #0
 8003eb6:	d100      	bne.n	8003eba <ILI9341_DrawBar_ToDisplay+0xa>
 8003eb8:	4770      	bx	lr
{
 8003eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebc:	4607      	mov	r7, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	4615      	mov	r5, r2
 8003ec2:	461e      	mov	r6, r3
  ILI9341_CSX_Low();
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	482c      	ldr	r0, [pc, #176]	; (8003f7c <ILI9341_DrawBar_ToDisplay+0xcc>)
 8003eca:	f7fc ff6c 	bl	8000da6 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 8003ece:	202a      	movs	r0, #42	; 0x2a
 8003ed0:	f7ff ff2e 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	f7ff ff19 	bl	8003d0c <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 8003eda:	19e8      	adds	r0, r5, r7
 8003edc:	b280      	uxth	r0, r0
 8003ede:	3801      	subs	r0, #1
 8003ee0:	b280      	uxth	r0, r0
 8003ee2:	f7ff ff13 	bl	8003d0c <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8003ee6:	202b      	movs	r0, #43	; 0x2b
 8003ee8:	f7ff ff22 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 8003eec:	4620      	mov	r0, r4
 8003eee:	f7ff ff0d 	bl	8003d0c <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8003ef2:	1930      	adds	r0, r6, r4
 8003ef4:	b280      	uxth	r0, r0
 8003ef6:	3801      	subs	r0, #1
 8003ef8:	b280      	uxth	r0, r0
 8003efa:	f7ff ff07 	bl	8003d0c <ILI9341_Write16>
  uint16_t Color_MSBFirst = SwapBytes(Color);
 8003efe:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8003f02:	f7ff feb5 	bl	8003c70 <SwapBytes>
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8003f06:	2300      	movs	r3, #0
 8003f08:	e004      	b.n	8003f14 <ILI9341_DrawBar_ToDisplay+0x64>
    ColumnColors[ColumnIndex] = Color_MSBFirst;
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8003f0c:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8003f10:	3301      	adds	r3, #1
 8003f12:	b21b      	sxth	r3, r3
 8003f14:	42ab      	cmp	r3, r5
 8003f16:	dbf8      	blt.n	8003f0a <ILI9341_DrawBar_ToDisplay+0x5a>
  ILI9341_WriteCommand(0x2C); // Memory write.
 8003f18:	202c      	movs	r0, #44	; 0x2c
 8003f1a:	f7ff ff09 	bl	8003d30 <ILI9341_WriteCommand>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003f1e:	2400      	movs	r4, #0
 8003f20:	e01b      	b.n	8003f5a <ILI9341_DrawBar_ToDisplay+0xaa>
      SCB->DCCMVAC = op_addr;
 8003f22:	4818      	ldr	r0, [pc, #96]	; (8003f84 <ILI9341_DrawBar_ToDisplay+0xd4>)
 8003f24:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8003f28:	3120      	adds	r1, #32
      op_size -=           linesize;
 8003f2a:	3b20      	subs	r3, #32
    while (op_size > 0) {
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	dcf8      	bgt.n	8003f22 <ILI9341_DrawBar_ToDisplay+0x72>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f34:	f3bf 8f6f 	isb	sy
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 8003f38:	b292      	uxth	r2, r2
 8003f3a:	4911      	ldr	r1, [pc, #68]	; (8003f80 <ILI9341_DrawBar_ToDisplay+0xd0>)
 8003f3c:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <ILI9341_DrawBar_ToDisplay+0xd8>)
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	f7fe fec4 	bl	8002ccc <HAL_SPI_Transmit_DMA>
 8003f44:	b988      	cbnz	r0, 8003f6a <ILI9341_DrawBar_ToDisplay+0xba>
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <ILI9341_DrawBar_ToDisplay+0xd8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d0f7      	beq.n	8003f46 <ILI9341_DrawBar_ToDisplay+0x96>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8003f56:	3401      	adds	r4, #1
 8003f58:	b224      	sxth	r4, r4
 8003f5a:	42b4      	cmp	r4, r6
 8003f5c:	da08      	bge.n	8003f70 <ILI9341_DrawBar_ToDisplay+0xc0>
    uint32_t NumBytes = Width * 2;
 8003f5e:	006a      	lsls	r2, r5, #1
    uint32_t op_addr = (uint32_t) addr;
 8003f60:	4907      	ldr	r1, [pc, #28]	; (8003f80 <ILI9341_DrawBar_ToDisplay+0xd0>)
  __ASM volatile ("dsb 0xF":::"memory");
 8003f62:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 8003f66:	4613      	mov	r3, r2
}
 8003f68:	e7e0      	b.n	8003f2c <ILI9341_DrawBar_ToDisplay+0x7c>
      Error_Handler();
 8003f6a:	f000 ff0f 	bl	8004d8c <Error_Handler>
 8003f6e:	e7ea      	b.n	8003f46 <ILI9341_DrawBar_ToDisplay+0x96>
  ILI9341_CSX_High();
 8003f70:	2201      	movs	r2, #1
 8003f72:	2102      	movs	r1, #2
 8003f74:	4801      	ldr	r0, [pc, #4]	; (8003f7c <ILI9341_DrawBar_ToDisplay+0xcc>)
 8003f76:	f7fc ff16 	bl	8000da6 <HAL_GPIO_WritePin>
}
 8003f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f7c:	40020800 	.word	0x40020800
 8003f80:	20000200 	.word	0x20000200
 8003f84:	e000ed00 	.word	0xe000ed00
 8003f88:	2000048c 	.word	0x2000048c

08003f8c <ILI9341_SetDefaultState>:
  TextColor = TextColor_Default;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <ILI9341_SetDefaultState+0x18>)
 8003f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f92:	801a      	strh	r2, [r3, #0]
  TextBackgroundColor = TextBackgroundColor_Default;
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <ILI9341_SetDefaultState+0x1c>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	801a      	strh	r2, [r3, #0]
  TextDrawMode = TextDrawMode_Default;
 8003f9a:	4b04      	ldr	r3, [pc, #16]	; (8003fac <ILI9341_SetDefaultState+0x20>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000008 	.word	0x20000008
 8003fa8:	20000480 	.word	0x20000480
 8003fac:	2000000a 	.word	0x2000000a

08003fb0 <ILI9341_Initialize>:
{
 8003fb0:	b510      	push	{r4, lr}
  phspi = i_phspi;
 8003fb2:	4ba7      	ldr	r3, [pc, #668]	; (8004250 <ILI9341_Initialize+0x2a0>)
 8003fb4:	6018      	str	r0, [r3, #0]
  UseBackBuffer = i_UseBackBuffer;
 8003fb6:	b2c9      	uxtb	r1, r1
 8003fb8:	4ba6      	ldr	r3, [pc, #664]	; (8004254 <ILI9341_Initialize+0x2a4>)
 8003fba:	7019      	strb	r1, [r3, #0]
  if (UseBackBuffer)
 8003fbc:	2900      	cmp	r1, #0
 8003fbe:	f040 8139 	bne.w	8004234 <ILI9341_Initialize+0x284>
  ILI9341_SetDefaultState();
 8003fc2:	f7ff ffe3 	bl	8003f8c <ILI9341_SetDefaultState>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_RESET);
 8003fc6:	4ca4      	ldr	r4, [pc, #656]	; (8004258 <ILI9341_Initialize+0x2a8>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7fc feea 	bl	8000da6 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f7fc fb52 	bl	800067c <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_SET);
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f7fc fee2 	bl	8000da6 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003fe2:	2005      	movs	r0, #5
 8003fe4:	f7fc fb4a 	bl	800067c <HAL_Delay>
  ILI9341_CSX_Low();
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2102      	movs	r1, #2
 8003fec:	4620      	mov	r0, r4
 8003fee:	f7fc feda 	bl	8000da6 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0xEF);
 8003ff2:	f06f 0010 	mvn.w	r0, #16
 8003ff6:	f7ff fe9b 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x03);
 8003ffa:	2003      	movs	r0, #3
 8003ffc:	f7ff fe6e 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x80);
 8004000:	2080      	movs	r0, #128	; 0x80
 8004002:	f7ff fe6b 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8004006:	2002      	movs	r0, #2
 8004008:	f7ff fe68 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERB);
 800400c:	f06f 0030 	mvn.w	r0, #48	; 0x30
 8004010:	f7ff fe8e 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8004014:	2000      	movs	r0, #0
 8004016:	f7ff fe61 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0XC1);
 800401a:	20c1      	movs	r0, #193	; 0xc1
 800401c:	f7ff fe5e 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0X30);
 8004020:	2030      	movs	r0, #48	; 0x30
 8004022:	f7ff fe5b 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWER_SEQ);
 8004026:	f06f 0012 	mvn.w	r0, #18
 800402a:	f7ff fe81 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x64);
 800402e:	2064      	movs	r0, #100	; 0x64
 8004030:	f7ff fe54 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8004034:	2003      	movs	r0, #3
 8004036:	f7ff fe51 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0X12);
 800403a:	2012      	movs	r0, #18
 800403c:	f7ff fe4e 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0X81);
 8004040:	2081      	movs	r0, #129	; 0x81
 8004042:	f7ff fe4b 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCA);
 8004046:	f06f 0017 	mvn.w	r0, #23
 800404a:	f7ff fe71 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x85);
 800404e:	2085      	movs	r0, #133	; 0x85
 8004050:	f7ff fe44 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8004054:	2000      	movs	r0, #0
 8004056:	f7ff fe41 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x78);
 800405a:	2078      	movs	r0, #120	; 0x78
 800405c:	f7ff fe3e 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERA);
 8004060:	f06f 0034 	mvn.w	r0, #52	; 0x34
 8004064:	f7ff fe64 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x39);
 8004068:	2039      	movs	r0, #57	; 0x39
 800406a:	f7ff fe37 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x2C);
 800406e:	202c      	movs	r0, #44	; 0x2c
 8004070:	f7ff fe34 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x00);
 8004074:	2000      	movs	r0, #0
 8004076:	f7ff fe31 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x34);
 800407a:	2034      	movs	r0, #52	; 0x34
 800407c:	f7ff fe2e 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x02);
 8004080:	2002      	movs	r0, #2
 8004082:	f7ff fe2b 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_PRC);
 8004086:	f06f 0008 	mvn.w	r0, #8
 800408a:	f7ff fe51 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x20);
 800408e:	2020      	movs	r0, #32
 8004090:	f7ff fe24 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCB);
 8004094:	f06f 0015 	mvn.w	r0, #21
 8004098:	f7ff fe4a 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 800409c:	2000      	movs	r0, #0
 800409e:	f7ff fe1d 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80040a2:	2000      	movs	r0, #0
 80040a4:	f7ff fe1a 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR1); // Power control
 80040a8:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 80040ac:	f7ff fe40 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x23); // VRH=[5:0]
 80040b0:	2023      	movs	r0, #35	; 0x23
 80040b2:	f7ff fe13 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR2); // Power control
 80040b6:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 80040ba:	f7ff fe39 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x10); // BT=[3:0]
 80040be:	2010      	movs	r0, #16
 80040c0:	f7ff fe0c 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR1); // VCOM control
 80040c4:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 80040c8:	f7ff fe32 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x3e); // VMH=[6:0]
 80040cc:	203e      	movs	r0, #62	; 0x3e
 80040ce:	f7ff fe05 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x28); // VML=[6:0]
 80040d2:	2028      	movs	r0, #40	; 0x28
 80040d4:	f7ff fe02 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR2); // VCOM control 2
 80040d8:	f06f 0038 	mvn.w	r0, #56	; 0x38
 80040dc:	f7ff fe28 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x86); // VMF=[6:0]
 80040e0:	2086      	movs	r0, #134	; 0x86
 80040e2:	f7ff fdfb 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_MADCTL); // Memory Access Control
 80040e6:	2036      	movs	r0, #54	; 0x36
 80040e8:	f7ff fe22 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x48);
 80040ec:	2048      	movs	r0, #72	; 0x48
 80040ee:	f7ff fdf5 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VSCRSADD); // Vertical scroll
 80040f2:	2037      	movs	r0, #55	; 0x37
 80040f4:	f7ff fe1c 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write16(0); // Zero
 80040f8:	2000      	movs	r0, #0
 80040fa:	f7ff fe07 	bl	8003d0c <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PIXFMT);
 80040fe:	203a      	movs	r0, #58	; 0x3a
 8004100:	f7ff fe16 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x55); // DPI=[6:4] DBI=[2:0]
 8004104:	2055      	movs	r0, #85	; 0x55
 8004106:	f7ff fde9 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_FRMCTR1);
 800410a:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 800410e:	f7ff fe0f 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8004112:	2000      	movs	r0, #0
 8004114:	f7ff fde2 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x18);
 8004118:	2018      	movs	r0, #24
 800411a:	f7ff fddf 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_DFUNCTR); // Display Function Control
 800411e:	f06f 0049 	mvn.w	r0, #73	; 0x49
 8004122:	f7ff fe05 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x08);
 8004126:	2008      	movs	r0, #8
 8004128:	f7ff fdd8 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x82);
 800412c:	2082      	movs	r0, #130	; 0x82
 800412e:	f7ff fdd5 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x27);
 8004132:	2027      	movs	r0, #39	; 0x27
 8004134:	f7ff fdd2 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(0xF2); // 3Gamma
 8004138:	f06f 000d 	mvn.w	r0, #13
 800413c:	f7ff fdf8 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00); // Disable
 8004140:	2000      	movs	r0, #0
 8004142:	f7ff fdcb 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GAMMASET); // Gamma curve selected
 8004146:	2026      	movs	r0, #38	; 0x26
 8004148:	f7ff fdf2 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x01);
 800414c:	2001      	movs	r0, #1
 800414e:	f7ff fdc5 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRP1); // Set Gamma
 8004152:	f06f 001f 	mvn.w	r0, #31
 8004156:	f7ff fdeb 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x0F);
 800415a:	200f      	movs	r0, #15
 800415c:	f7ff fdbe 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8004160:	2031      	movs	r0, #49	; 0x31
 8004162:	f7ff fdbb 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x2B);
 8004166:	202b      	movs	r0, #43	; 0x2b
 8004168:	f7ff fdb8 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 800416c:	200c      	movs	r0, #12
 800416e:	f7ff fdb5 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 8004172:	200e      	movs	r0, #14
 8004174:	f7ff fdb2 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8004178:	2008      	movs	r0, #8
 800417a:	f7ff fdaf 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x4E);
 800417e:	204e      	movs	r0, #78	; 0x4e
 8004180:	f7ff fdac 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0xF1);
 8004184:	20f1      	movs	r0, #241	; 0xf1
 8004186:	f7ff fda9 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x37);
 800418a:	2037      	movs	r0, #55	; 0x37
 800418c:	f7ff fda6 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8004190:	2007      	movs	r0, #7
 8004192:	f7ff fda3 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x10);
 8004196:	2010      	movs	r0, #16
 8004198:	f7ff fda0 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x03);
 800419c:	2003      	movs	r0, #3
 800419e:	f7ff fd9d 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80041a2:	200e      	movs	r0, #14
 80041a4:	f7ff fd9a 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x09);
 80041a8:	2009      	movs	r0, #9
 80041aa:	f7ff fd97 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7ff fd94 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRN1); // Set Gamma
 80041b4:	f06f 001e 	mvn.w	r0, #30
 80041b8:	f7ff fdba 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 80041bc:	2000      	movs	r0, #0
 80041be:	f7ff fd8d 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80041c2:	200e      	movs	r0, #14
 80041c4:	f7ff fd8a 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x14);
 80041c8:	2014      	movs	r0, #20
 80041ca:	f7ff fd87 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x03);
 80041ce:	2003      	movs	r0, #3
 80041d0:	f7ff fd84 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x11);
 80041d4:	2011      	movs	r0, #17
 80041d6:	f7ff fd81 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x07);
 80041da:	2007      	movs	r0, #7
 80041dc:	f7ff fd7e 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x31);
 80041e0:	2031      	movs	r0, #49	; 0x31
 80041e2:	f7ff fd7b 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0xC1);
 80041e6:	20c1      	movs	r0, #193	; 0xc1
 80041e8:	f7ff fd78 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x48);
 80041ec:	2048      	movs	r0, #72	; 0x48
 80041ee:	f7ff fd75 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x08);
 80041f2:	2008      	movs	r0, #8
 80041f4:	f7ff fd72 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 80041f8:	200f      	movs	r0, #15
 80041fa:	f7ff fd6f 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 80041fe:	200c      	movs	r0, #12
 8004200:	f7ff fd6c 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8004204:	2031      	movs	r0, #49	; 0x31
 8004206:	f7ff fd69 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x36);
 800420a:	2036      	movs	r0, #54	; 0x36
 800420c:	f7ff fd66 	bl	8003cdc <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8004210:	200f      	movs	r0, #15
 8004212:	f7ff fd63 	bl	8003cdc <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_SLPOUT); // Exit sleep
 8004216:	2011      	movs	r0, #17
 8004218:	f7ff fd8a 	bl	8003d30 <ILI9341_WriteCommand>
  HAL_Delay(120);
 800421c:	2078      	movs	r0, #120	; 0x78
 800421e:	f7fc fa2d 	bl	800067c <HAL_Delay>
  ILI9341_WriteCommand(ILI9341_DISPON); // Display on
 8004222:	2029      	movs	r0, #41	; 0x29
 8004224:	f7ff fd84 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_CSX_High();
 8004228:	2201      	movs	r2, #1
 800422a:	2102      	movs	r1, #2
 800422c:	4620      	mov	r0, r4
 800422e:	f7fc fdba 	bl	8000da6 <HAL_GPIO_WritePin>
}
 8004232:	bd10      	pop	{r4, pc}
    pBackBuffer = calloc(1, ILI9341_Width * ILI9341_Height * sizeof(uint16_t));
 8004234:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8004238:	2001      	movs	r0, #1
 800423a:	f001 fb09 	bl	8005850 <calloc>
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <ILI9341_Initialize+0x2ac>)
 8004240:	6018      	str	r0, [r3, #0]
    if (!pBackBuffer)
 8004242:	2800      	cmp	r0, #0
 8004244:	f47f aebd 	bne.w	8003fc2 <ILI9341_Initialize+0x12>
      Error_Handler();
 8004248:	f000 fda0 	bl	8004d8c <Error_Handler>
 800424c:	e6b9      	b.n	8003fc2 <ILI9341_Initialize+0x12>
 800424e:	bf00      	nop
 8004250:	2000048c 	.word	0x2000048c
 8004254:	20000482 	.word	0x20000482
 8004258:	40020800 	.word	0x40020800
 800425c:	20000484 	.word	0x20000484

08004260 <ILI9341_SetAddrWindow>:
{
 8004260:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 8004264:	4681      	mov	r9, r0
 8004266:	460f      	mov	r7, r1
 8004268:	4616      	mov	r6, r2
 800426a:	461c      	mov	r4, r3
 800426c:	f99d 8018 	ldrsb.w	r8, [sp, #24]
  if (UseCS)
 8004270:	f1b8 0f00 	cmp.w	r8, #0
 8004274:	d11b      	bne.n	80042ae <ILI9341_SetAddrWindow+0x4e>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 8004276:	444e      	add	r6, r9
 8004278:	3e01      	subs	r6, #1
 800427a:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 800427e:	443c      	add	r4, r7
 8004280:	3c01      	subs	r4, #1
 8004282:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 8004286:	202a      	movs	r0, #42	; 0x2a
 8004288:	f7ff fd52 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write32(xa);
 800428c:	4630      	mov	r0, r6
 800428e:	f7ff fd46 	bl	8003d1e <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_PASET); // Row addr set
 8004292:	202b      	movs	r0, #43	; 0x2b
 8004294:	f7ff fd4c 	bl	8003d30 <ILI9341_WriteCommand>
  ILI9341_Write32(ya);
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff fd40 	bl	8003d1e <ILI9341_Write32>
  ILI9341_WriteCommand(ILI9341_RAMWR); // Write to RAM
 800429e:	202c      	movs	r0, #44	; 0x2c
 80042a0:	f7ff fd46 	bl	8003d30 <ILI9341_WriteCommand>
  if (UseCS)
 80042a4:	f1b8 0f00 	cmp.w	r8, #0
 80042a8:	d107      	bne.n	80042ba <ILI9341_SetAddrWindow+0x5a>
}
 80042aa:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    ILI9341_CSX_Low();
 80042ae:	2200      	movs	r2, #0
 80042b0:	2102      	movs	r1, #2
 80042b2:	4805      	ldr	r0, [pc, #20]	; (80042c8 <ILI9341_SetAddrWindow+0x68>)
 80042b4:	f7fc fd77 	bl	8000da6 <HAL_GPIO_WritePin>
 80042b8:	e7dd      	b.n	8004276 <ILI9341_SetAddrWindow+0x16>
    ILI9341_CSX_High();
 80042ba:	2201      	movs	r2, #1
 80042bc:	2102      	movs	r1, #2
 80042be:	4802      	ldr	r0, [pc, #8]	; (80042c8 <ILI9341_SetAddrWindow+0x68>)
 80042c0:	f7fc fd71 	bl	8000da6 <HAL_GPIO_WritePin>
}
 80042c4:	e7f1      	b.n	80042aa <ILI9341_SetAddrWindow+0x4a>
 80042c6:	bf00      	nop
 80042c8:	40020800 	.word	0x40020800

080042cc <ILI9341_DrawPixel_ToDisplay>:
{
 80042cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ce:	b083      	sub	sp, #12
 80042d0:	4604      	mov	r4, r0
 80042d2:	460d      	mov	r5, r1
 80042d4:	4616      	mov	r6, r2
  if (UseCS)
 80042d6:	461f      	mov	r7, r3
 80042d8:	b95b      	cbnz	r3, 80042f2 <ILI9341_DrawPixel_ToDisplay+0x26>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 80042da:	b2a0      	uxth	r0, r4
 80042dc:	0feb      	lsrs	r3, r5, #31
 80042de:	28ef      	cmp	r0, #239	; 0xef
 80042e0:	bf88      	it	hi
 80042e2:	f043 0301 	orrhi.w	r3, r3, #1
 80042e6:	b913      	cbnz	r3, 80042ee <ILI9341_DrawPixel_ToDisplay+0x22>
 80042e8:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 80042ec:	db07      	blt.n	80042fe <ILI9341_DrawPixel_ToDisplay+0x32>
}
 80042ee:	b003      	add	sp, #12
 80042f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ILI9341_CSX_Low();
 80042f2:	2200      	movs	r2, #0
 80042f4:	2102      	movs	r1, #2
 80042f6:	480a      	ldr	r0, [pc, #40]	; (8004320 <ILI9341_DrawPixel_ToDisplay+0x54>)
 80042f8:	f7fc fd55 	bl	8000da6 <HAL_GPIO_WritePin>
 80042fc:	e7ed      	b.n	80042da <ILI9341_DrawPixel_ToDisplay+0xe>
  ILI9341_SetAddrWindow(X, Y, 1, 1, 0);
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2301      	movs	r3, #1
 8004302:	461a      	mov	r2, r3
 8004304:	b2a9      	uxth	r1, r5
 8004306:	f7ff ffab 	bl	8004260 <ILI9341_SetAddrWindow>
  ILI9341_Write16(Color);
 800430a:	4630      	mov	r0, r6
 800430c:	f7ff fcfe 	bl	8003d0c <ILI9341_Write16>
  if (UseCS)
 8004310:	2f00      	cmp	r7, #0
 8004312:	d0ec      	beq.n	80042ee <ILI9341_DrawPixel_ToDisplay+0x22>
    ILI9341_CSX_Low();
 8004314:	2200      	movs	r2, #0
 8004316:	2102      	movs	r1, #2
 8004318:	4801      	ldr	r0, [pc, #4]	; (8004320 <ILI9341_DrawPixel_ToDisplay+0x54>)
 800431a:	f7fc fd44 	bl	8000da6 <HAL_GPIO_WritePin>
 800431e:	e7e6      	b.n	80042ee <ILI9341_DrawPixel_ToDisplay+0x22>
 8004320:	40020800 	.word	0x40020800

08004324 <ILI9341_DrawPixel>:
{
 8004324:	b510      	push	{r4, lr}
  if (UseBackBuffer)
 8004326:	4c04      	ldr	r4, [pc, #16]	; (8004338 <ILI9341_DrawPixel+0x14>)
 8004328:	7824      	ldrb	r4, [r4, #0]
 800432a:	b114      	cbz	r4, 8004332 <ILI9341_DrawPixel+0xe>
    ILI9341_DrawPixel_ToBackBuffer(X, Y, Color);
 800432c:	f7ff fcae 	bl	8003c8c <ILI9341_DrawPixel_ToBackBuffer>
}
 8004330:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixel_ToDisplay(X, Y, Color, UseCS);
 8004332:	f7ff ffcb 	bl	80042cc <ILI9341_DrawPixel_ToDisplay>
}
 8004336:	e7fb      	b.n	8004330 <ILI9341_DrawPixel+0xc>
 8004338:	20000482 	.word	0x20000482

0800433c <ILI9341_DrawPixels_MSBFirst>:
{
 800433c:	b510      	push	{r4, lr}
 800433e:	b082      	sub	sp, #8
  if (UseBackBuffer)
 8004340:	4c06      	ldr	r4, [pc, #24]	; (800435c <ILI9341_DrawPixels_MSBFirst+0x20>)
 8004342:	7824      	ldrb	r4, [r4, #0]
 8004344:	b12c      	cbz	r4, 8004352 <ILI9341_DrawPixels_MSBFirst+0x16>
    ILI9341_DrawPixels_MSBFirst_ToBackBuffer(X, Y, Width, Height, pPixels);
 8004346:	9c04      	ldr	r4, [sp, #16]
 8004348:	9400      	str	r4, [sp, #0]
 800434a:	f7ff fd05 	bl	8003d58 <ILI9341_DrawPixels_MSBFirst_ToBackBuffer>
}
 800434e:	b002      	add	sp, #8
 8004350:	bd10      	pop	{r4, pc}
    ILI9341_DrawPixels_MSBFirst_ToDisplay(X, Y, Width, Height, pPixels);
 8004352:	9c04      	ldr	r4, [sp, #16]
 8004354:	9400      	str	r4, [sp, #0]
 8004356:	f7ff fd43 	bl	8003de0 <ILI9341_DrawPixels_MSBFirst_ToDisplay>
}
 800435a:	e7f8      	b.n	800434e <ILI9341_DrawPixels_MSBFirst+0x12>
 800435c:	20000482 	.word	0x20000482

08004360 <ILI9341_UsingBackBuffer>:
}
 8004360:	4b01      	ldr	r3, [pc, #4]	; (8004368 <ILI9341_UsingBackBuffer+0x8>)
 8004362:	7818      	ldrb	r0, [r3, #0]
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000482 	.word	0x20000482

0800436c <ILI9341_CopyBackBufferToDisplay>:
{
 800436c:	b500      	push	{lr}
 800436e:	b083      	sub	sp, #12
  ILI9341_DrawPixels_MSBFirst_ToDisplay(0, 0, ILI9341_Width, ILI9341_Height, pBackBuffer);
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <ILI9341_CopyBackBufferToDisplay+0x20>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800437a:	22f0      	movs	r2, #240	; 0xf0
 800437c:	2100      	movs	r1, #0
 800437e:	4608      	mov	r0, r1
 8004380:	f7ff fd2e 	bl	8003de0 <ILI9341_DrawPixels_MSBFirst_ToDisplay>
}
 8004384:	b003      	add	sp, #12
 8004386:	f85d fb04 	ldr.w	pc, [sp], #4
 800438a:	bf00      	nop
 800438c:	20000484 	.word	0x20000484

08004390 <ILI9341_DrawBar_ToBackBuffer>:
{
 8004390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004394:	b083      	sub	sp, #12
 8004396:	4606      	mov	r6, r0
 8004398:	468b      	mov	fp, r1
 800439a:	4617      	mov	r7, r2
 800439c:	9301      	str	r3, [sp, #4]
  Color_MSBFirst = SwapBytes(i_Color);
 800439e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 80043a2:	f7ff fc65 	bl	8003c70 <SwapBytes>
 80043a6:	4681      	mov	r9, r0
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80043a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80043ac:	2100      	movs	r1, #0
 80043ae:	4658      	mov	r0, fp
 80043b0:	f7ff fc63 	bl	8003c7a <Clamp_uint16>
 80043b4:	4682      	mov	sl, r0
 80043b6:	e00e      	b.n	80043d6 <ILI9341_DrawBar_ToBackBuffer+0x46>
      pLine[X] = Color_MSBFirst;
 80043b8:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 80043bc:	f828 9003 	strh.w	r9, [r8, r3]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80043c0:	3401      	adds	r4, #1
 80043c2:	19f0      	adds	r0, r6, r7
 80043c4:	22f0      	movs	r2, #240	; 0xf0
 80043c6:	2100      	movs	r1, #0
 80043c8:	b280      	uxth	r0, r0
 80043ca:	f7ff fc56 	bl	8003c7a <Clamp_uint16>
 80043ce:	42a0      	cmp	r0, r4
 80043d0:	d8f2      	bhi.n	80043b8 <ILI9341_DrawBar_ToBackBuffer+0x28>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80043d2:	f10a 0a01 	add.w	sl, sl, #1
 80043d6:	9b01      	ldr	r3, [sp, #4]
 80043d8:	eb0b 0003 	add.w	r0, fp, r3
 80043dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80043e0:	2100      	movs	r1, #0
 80043e2:	b280      	uxth	r0, r0
 80043e4:	f7ff fc49 	bl	8003c7a <Clamp_uint16>
 80043e8:	4550      	cmp	r0, sl
 80043ea:	d90c      	bls.n	8004406 <ILI9341_DrawBar_ToBackBuffer+0x76>
    pLine = &pBackBuffer[Y * ILI9341_Width];
 80043ec:	4b07      	ldr	r3, [pc, #28]	; (800440c <ILI9341_DrawBar_ToBackBuffer+0x7c>)
 80043ee:	f8d3 8000 	ldr.w	r8, [r3]
 80043f2:	ebca 150a 	rsb	r5, sl, sl, lsl #4
 80043f6:	016d      	lsls	r5, r5, #5
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80043f8:	22f0      	movs	r2, #240	; 0xf0
 80043fa:	2100      	movs	r1, #0
 80043fc:	4630      	mov	r0, r6
 80043fe:	f7ff fc3c 	bl	8003c7a <Clamp_uint16>
 8004402:	4604      	mov	r4, r0
 8004404:	e7dd      	b.n	80043c2 <ILI9341_DrawBar_ToBackBuffer+0x32>
}
 8004406:	b003      	add	sp, #12
 8004408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440c:	20000484 	.word	0x20000484

08004410 <ILI9341_DrawBar>:
{
 8004410:	b530      	push	{r4, r5, lr}
 8004412:	b083      	sub	sp, #12
 8004414:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  if (UseBackBuffer)
 8004418:	4d05      	ldr	r5, [pc, #20]	; (8004430 <ILI9341_DrawBar+0x20>)
 800441a:	782d      	ldrb	r5, [r5, #0]
 800441c:	b125      	cbz	r5, 8004428 <ILI9341_DrawBar+0x18>
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 800441e:	9400      	str	r4, [sp, #0]
 8004420:	f7ff ffb6 	bl	8004390 <ILI9341_DrawBar_ToBackBuffer>
}
 8004424:	b003      	add	sp, #12
 8004426:	bd30      	pop	{r4, r5, pc}
    ILI9341_DrawBar_ToDisplay(X, Y, Width, Height, Color);
 8004428:	9400      	str	r4, [sp, #0]
 800442a:	f7ff fd41 	bl	8003eb0 <ILI9341_DrawBar_ToDisplay>
}
 800442e:	e7f9      	b.n	8004424 <ILI9341_DrawBar+0x14>
 8004430:	20000482 	.word	0x20000482

08004434 <ILI9341_Clear>:
{
 8004434:	b500      	push	{lr}
 8004436:	b083      	sub	sp, #12
  ILI9341_DrawBar(0, 0, ILI9341_Width, ILI9341_Height, Color);
 8004438:	9000      	str	r0, [sp, #0]
 800443a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800443e:	22f0      	movs	r2, #240	; 0xf0
 8004440:	2100      	movs	r1, #0
 8004442:	4608      	mov	r0, r1
 8004444:	f7ff ffe4 	bl	8004410 <ILI9341_DrawBar>
}
 8004448:	b003      	add	sp, #12
 800444a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004450 <ILI9341_SetFont>:
  Result = pFont;
 8004450:	4b02      	ldr	r3, [pc, #8]	; (800445c <ILI9341_SetFont+0xc>)
 8004452:	681a      	ldr	r2, [r3, #0]
  pFont = i_pFont;
 8004454:	6018      	str	r0, [r3, #0]
}
 8004456:	4610      	mov	r0, r2
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000488 	.word	0x20000488

08004460 <ILI9341_GetFontYSpacing>:
  return pFont->yAdvance;
 8004460:	4b01      	ldr	r3, [pc, #4]	; (8004468 <ILI9341_GetFontYSpacing+0x8>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	7a98      	ldrb	r0, [r3, #10]
 8004466:	4770      	bx	lr
 8004468:	20000488 	.word	0x20000488

0800446c <GetCharWidth>:

uint16_t GetCharWidth(uint8_t Ch)
{
 800446c:	b510      	push	{r4, lr}
 800446e:	4604      	mov	r4, r0
  if (IsNonPrintingChar(Ch))
 8004470:	f7ff fc24 	bl	8003cbc <IsNonPrintingChar>
 8004474:	b980      	cbnz	r0, 8004498 <GetCharWidth+0x2c>
    return 0;

  Ch -= pFont->first;
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <GetCharWidth+0x30>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	7a18      	ldrb	r0, [r3, #8]
 800447c:	1a20      	subs	r0, r4, r0
 800447e:	b2c0      	uxtb	r0, r0
  GFXglyph *pGlyph = &pFont->pGlyph[Ch];
 8004480:	685c      	ldr	r4, [r3, #4]
 8004482:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
  uint8_t w = pGlyph->width;
 8004486:	7882      	ldrb	r2, [r0, #2]
  int8_t xo = pGlyph->xOffset;
 8004488:	f990 3005 	ldrsb.w	r3, [r0, #5]

  if (w == 0)
 800448c:	b112      	cbz	r2, 8004494 <GetCharWidth+0x28>
    return pGlyph->xAdvance;

  return xo + w;
 800448e:	1898      	adds	r0, r3, r2
 8004490:	b280      	uxth	r0, r0
}
 8004492:	bd10      	pop	{r4, pc}
    return pGlyph->xAdvance;
 8004494:	7900      	ldrb	r0, [r0, #4]
 8004496:	e7fc      	b.n	8004492 <GetCharWidth+0x26>
    return 0;
 8004498:	2000      	movs	r0, #0
 800449a:	e7fa      	b.n	8004492 <GetCharWidth+0x26>
 800449c:	20000488 	.word	0x20000488

080044a0 <ILI9341_GetTextWidth>:

uint16_t ILI9341_GetTextWidth(const char *Text)
{
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	4604      	mov	r4, r0
  uint16_t TotalWidth, NumChars;
  const char *pText;

  NumChars = strlen(Text);
 80044a4:	f7fb fecc 	bl	8000240 <strlen>
 80044a8:	b287      	uxth	r7, r0

  pText = Text;

  TotalWidth=0;

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80044aa:	2500      	movs	r5, #0
  TotalWidth=0;
 80044ac:	462e      	mov	r6, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80044ae:	e007      	b.n	80044c0 <ILI9341_GetTextWidth+0x20>
    TotalWidth += GetCharWidth(*pText++);
 80044b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80044b4:	f7ff ffda 	bl	800446c <GetCharWidth>
 80044b8:	4406      	add	r6, r0
 80044ba:	b2b6      	uxth	r6, r6
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80044bc:	3501      	adds	r5, #1
 80044be:	b2ad      	uxth	r5, r5
 80044c0:	42bd      	cmp	r5, r7
 80044c2:	d3f5      	bcc.n	80044b0 <ILI9341_GetTextWidth+0x10>

  return TotalWidth;
}
 80044c4:	4630      	mov	r0, r6
 80044c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044c8 <ILI9341_DrawCharAtXY>:
uint8_t ILI9341_DrawCharAtXY(uint8_t Ch, uint16_t X, uint16_t Y, uint16_t Color)
// X: X position of left edge of char.
// Y: Y position of line on which the char sits. The char may go below this line (e.g. g j p q y).
// Returns required X advance.
// Based on Adafruit_GFX.cpp.
{
 80044c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	b08d      	sub	sp, #52	; 0x34
 80044ce:	9105      	str	r1, [sp, #20]
 80044d0:	9208      	str	r2, [sp, #32]
 80044d2:	9306      	str	r3, [sp, #24]
  uint8_t *pBitmap;
  uint16_t Color_MSBFirst, TextBackgroundColor_MSBFirst;
  uint16_t *pMemChar, *pMemCharPixel;
  uint8_t CharWidth, CharHeight;

  if (!pFont)
 80044d4:	4b9a      	ldr	r3, [pc, #616]	; (8004740 <ILI9341_DrawCharAtXY+0x278>)
 80044d6:	681c      	ldr	r4, [r3, #0]
 80044d8:	2c00      	cmp	r4, #0
 80044da:	f000 812d 	beq.w	8004738 <ILI9341_DrawCharAtXY+0x270>
 80044de:	4605      	mov	r5, r0
    return 0;
  if (IsNonPrintingChar(Ch))
 80044e0:	f7ff fbec 	bl	8003cbc <IsNonPrintingChar>
 80044e4:	9003      	str	r0, [sp, #12]
 80044e6:	2800      	cmp	r0, #0
 80044e8:	f040 8128 	bne.w	800473c <ILI9341_DrawCharAtXY+0x274>
    return 0;

  Ch -= pFont->first;
 80044ec:	7a23      	ldrb	r3, [r4, #8]
 80044ee:	1aed      	subs	r5, r5, r3
 80044f0:	b2ed      	uxtb	r5, r5
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 80044f2:	4b94      	ldr	r3, [pc, #592]	; (8004744 <ILI9341_DrawCharAtXY+0x27c>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d029      	beq.n	800454e <ILI9341_DrawCharAtXY+0x86>
    Y -= (pFont->yOffsetMin / 2);

  pGlyph = &pFont->pGlyph[Ch];
 80044fa:	6863      	ldr	r3, [r4, #4]
 80044fc:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8004500:	920a      	str	r2, [sp, #40]	; 0x28
  pBitmap = pFont->pBitmap;
 8004502:	f8d4 9000 	ldr.w	r9, [r4]

  bo = pGlyph->bitmapOffset;
 8004506:	f833 6035 	ldrh.w	r6, [r3, r5, lsl #3]
  w = pGlyph->width;
 800450a:	4613      	mov	r3, r2
 800450c:	f892 8002 	ldrb.w	r8, [r2, #2]
  h = pGlyph->height;
 8004510:	f892 b003 	ldrb.w	fp, [r2, #3]
  xo = pGlyph->xOffset;
 8004514:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8004518:	9204      	str	r2, [sp, #16]
  yo = pGlyph->yOffset;
 800451a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800451e:	9307      	str	r3, [sp, #28]
  bits = 0;
  bit = 0;
  yo_min = pFont->yOffsetMin;
 8004520:	f994 a00b 	ldrsb.w	sl, [r4, #11]
  yo_max = pFont->yOffsetMax;
 8004524:	f994 500c 	ldrsb.w	r5, [r4, #12]

  switch(TextDrawMode)
 8004528:	4b87      	ldr	r3, [pc, #540]	; (8004748 <ILI9341_DrawCharAtXY+0x280>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d061      	beq.n	80045f4 <ILI9341_DrawCharAtXY+0x12c>
 8004530:	2b03      	cmp	r3, #3
 8004532:	f000 80bc 	beq.w	80046ae <ILI9341_DrawCharAtXY+0x1e6>
 8004536:	2b01      	cmp	r3, #1
 8004538:	d015      	beq.n	8004566 <ILI9341_DrawCharAtXY+0x9e>
      }
      ILI9341_CSX_High();
      break;
  }

  if (w == 0)
 800453a:	f1b8 0f00 	cmp.w	r8, #0
 800453e:	f000 80f8 	beq.w	8004732 <ILI9341_DrawCharAtXY+0x26a>
    return pGlyph->xAdvance;
  return xo + w;
 8004542:	9804      	ldr	r0, [sp, #16]
 8004544:	4440      	add	r0, r8
 8004546:	b2c0      	uxtb	r0, r0
}
 8004548:	b00d      	add	sp, #52	; 0x34
 800454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Y -= (pFont->yOffsetMin / 2);
 800454e:	f994 300b 	ldrsb.w	r3, [r4, #11]
 8004552:	2b00      	cmp	r3, #0
 8004554:	db05      	blt.n	8004562 <ILI9341_DrawCharAtXY+0x9a>
 8004556:	9a08      	ldr	r2, [sp, #32]
 8004558:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 800455c:	b29b      	uxth	r3, r3
 800455e:	9308      	str	r3, [sp, #32]
 8004560:	e7cb      	b.n	80044fa <ILI9341_DrawCharAtXY+0x32>
 8004562:	3301      	adds	r3, #1
 8004564:	e7f7      	b.n	8004556 <ILI9341_DrawCharAtXY+0x8e>
      Color_MSBFirst = SwapBytes(Color);
 8004566:	9806      	ldr	r0, [sp, #24]
 8004568:	f7ff fb82 	bl	8003c70 <SwapBytes>
 800456c:	4605      	mov	r5, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 800456e:	4b77      	ldr	r3, [pc, #476]	; (800474c <ILI9341_DrawCharAtXY+0x284>)
 8004570:	8818      	ldrh	r0, [r3, #0]
 8004572:	f7ff fb7d 	bl	8003c70 <SwapBytes>
 8004576:	4604      	mov	r4, r0
      pMemChar = (uint16_t *)malloc(w * h * 2);
 8004578:	fb0b f008 	mul.w	r0, fp, r8
 800457c:	0040      	lsls	r0, r0, #1
 800457e:	f001 f993 	bl	80058a8 <malloc>
 8004582:	4607      	mov	r7, r0
      pMemCharPixel = pMemChar;
 8004584:	4684      	mov	ip, r0
  bit = 0;
 8004586:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800458a:	4670      	mov	r0, lr
  bits = 0;
 800458c:	4673      	mov	r3, lr
      for (yy = 0; yy < h; ++yy)
 800458e:	e01c      	b.n	80045ca <ILI9341_DrawCharAtXY+0x102>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 8004590:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004594:	d113      	bne.n	80045be <ILI9341_DrawCharAtXY+0xf6>
 8004596:	4620      	mov	r0, r4
 8004598:	f82c 0b02 	strh.w	r0, [ip], #2
          bits <<= 1;
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 80045a0:	3201      	adds	r2, #1
 80045a2:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 80045a4:	4608      	mov	r0, r1
        for (xx = 0; xx < w; ++xx)
 80045a6:	4542      	cmp	r2, r8
 80045a8:	d20b      	bcs.n	80045c2 <ILI9341_DrawCharAtXY+0xfa>
          if (!(bit++ & 7))
 80045aa:	1c41      	adds	r1, r0, #1
 80045ac:	b2c9      	uxtb	r1, r1
 80045ae:	f010 0f07 	tst.w	r0, #7
 80045b2:	d1ed      	bne.n	8004590 <ILI9341_DrawCharAtXY+0xc8>
            bits = pBitmap[bo++];
 80045b4:	1c70      	adds	r0, r6, #1
 80045b6:	f819 3006 	ldrb.w	r3, [r9, r6]
 80045ba:	b286      	uxth	r6, r0
 80045bc:	e7e8      	b.n	8004590 <ILI9341_DrawCharAtXY+0xc8>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 80045be:	4628      	mov	r0, r5
 80045c0:	e7ea      	b.n	8004598 <ILI9341_DrawCharAtXY+0xd0>
      for (yy = 0; yy < h; ++yy)
 80045c2:	f10e 0e01 	add.w	lr, lr, #1
 80045c6:	fa5f fe8e 	uxtb.w	lr, lr
 80045ca:	45de      	cmp	lr, fp
 80045cc:	d201      	bcs.n	80045d2 <ILI9341_DrawCharAtXY+0x10a>
        for (xx = 0; xx < w; ++xx)
 80045ce:	9a03      	ldr	r2, [sp, #12]
 80045d0:	e7e9      	b.n	80045a6 <ILI9341_DrawCharAtXY+0xde>
      ILI9341_DrawPixels_MSBFirst(X + xo, Y + yo, w, h, pMemChar);
 80045d2:	9908      	ldr	r1, [sp, #32]
 80045d4:	9b07      	ldr	r3, [sp, #28]
 80045d6:	4419      	add	r1, r3
 80045d8:	9805      	ldr	r0, [sp, #20]
 80045da:	9b04      	ldr	r3, [sp, #16]
 80045dc:	4418      	add	r0, r3
 80045de:	9700      	str	r7, [sp, #0]
 80045e0:	465b      	mov	r3, fp
 80045e2:	4642      	mov	r2, r8
 80045e4:	b289      	uxth	r1, r1
 80045e6:	b280      	uxth	r0, r0
 80045e8:	f7ff fea8 	bl	800433c <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 80045ec:	4638      	mov	r0, r7
 80045ee:	f001 f963 	bl	80058b8 <free>
      break;
 80045f2:	e7a2      	b.n	800453a <ILI9341_DrawCharAtXY+0x72>
      Color_MSBFirst = SwapBytes(Color);
 80045f4:	9806      	ldr	r0, [sp, #24]
 80045f6:	f7ff fb3b 	bl	8003c70 <SwapBytes>
 80045fa:	4604      	mov	r4, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 80045fc:	4b53      	ldr	r3, [pc, #332]	; (800474c <ILI9341_DrawCharAtXY+0x284>)
 80045fe:	8818      	ldrh	r0, [r3, #0]
 8004600:	f7ff fb36 	bl	8003c70 <SwapBytes>
 8004604:	4607      	mov	r7, r0
      CharWidth = pGlyph->xAdvance;
 8004606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004608:	791a      	ldrb	r2, [r3, #4]
 800460a:	9206      	str	r2, [sp, #24]
      CharHeight = yo_max - yo_min + 1;
 800460c:	eba5 030a 	sub.w	r3, r5, sl
 8004610:	b2db      	uxtb	r3, r3
 8004612:	3301      	adds	r3, #1
 8004614:	b2db      	uxtb	r3, r3
 8004616:	930b      	str	r3, [sp, #44]	; 0x2c
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 8004618:	fb02 f503 	mul.w	r5, r2, r3
 800461c:	0068      	lsls	r0, r5, #1
 800461e:	f001 f943 	bl	80058a8 <malloc>
 8004622:	4603      	mov	r3, r0
 8004624:	9009      	str	r0, [sp, #36]	; 0x24
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 8004626:	2200      	movs	r2, #0
 8004628:	e003      	b.n	8004632 <ILI9341_DrawCharAtXY+0x16a>
        *pMemCharPixel++ = TextBackgroundColor_MSBFirst;
 800462a:	f823 7b02 	strh.w	r7, [r3], #2
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800462e:	3201      	adds	r2, #1
 8004630:	b292      	uxth	r2, r2
 8004632:	4295      	cmp	r5, r2
 8004634:	dcf9      	bgt.n	800462a <ILI9341_DrawCharAtXY+0x162>
  bit = 0;
 8004636:	9f03      	ldr	r7, [sp, #12]
 8004638:	463d      	mov	r5, r7
  bits = 0;
 800463a:	463b      	mov	r3, r7
 800463c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004640:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8004644:	e018      	b.n	8004678 <ILI9341_DrawCharAtXY+0x1b0>
          if (bits & 0x80)
 8004646:	f013 0f80 	tst.w	r3, #128	; 0x80
 800464a:	d111      	bne.n	8004670 <ILI9341_DrawCharAtXY+0x1a8>
          ++pMemCharPixel;
 800464c:	3002      	adds	r0, #2
          bits <<= 1;
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	b2db      	uxtb	r3, r3
        for (xx = 0; xx < w; ++xx)
 8004652:	3201      	adds	r2, #1
 8004654:	b2d2      	uxtb	r2, r2
          if (!(bit++ & 7))
 8004656:	460d      	mov	r5, r1
        for (xx = 0; xx < w; ++xx)
 8004658:	4542      	cmp	r2, r8
 800465a:	d20b      	bcs.n	8004674 <ILI9341_DrawCharAtXY+0x1ac>
          if (!(bit++ & 7))
 800465c:	1c69      	adds	r1, r5, #1
 800465e:	b2c9      	uxtb	r1, r1
 8004660:	f015 0f07 	tst.w	r5, #7
 8004664:	d1ef      	bne.n	8004646 <ILI9341_DrawCharAtXY+0x17e>
            bits = pBitmap[bo++];
 8004666:	1c75      	adds	r5, r6, #1
 8004668:	f819 3006 	ldrb.w	r3, [r9, r6]
 800466c:	b2ae      	uxth	r6, r5
 800466e:	e7ea      	b.n	8004646 <ILI9341_DrawCharAtXY+0x17e>
            *pMemCharPixel = Color_MSBFirst;
 8004670:	8004      	strh	r4, [r0, #0]
 8004672:	e7eb      	b.n	800464c <ILI9341_DrawCharAtXY+0x184>
      for (yy = 0; yy < h; ++yy)
 8004674:	3701      	adds	r7, #1
 8004676:	b2ff      	uxtb	r7, r7
 8004678:	455f      	cmp	r7, fp
 800467a:	d20a      	bcs.n	8004692 <ILI9341_DrawCharAtXY+0x1ca>
        pMemCharPixel = &pMemChar[(- yo_min + yo + yy) * CharWidth + xo];
 800467c:	ebac 000a 	sub.w	r0, ip, sl
 8004680:	4438      	add	r0, r7
 8004682:	9a04      	ldr	r2, [sp, #16]
 8004684:	9906      	ldr	r1, [sp, #24]
 8004686:	fb00 2001 	mla	r0, r0, r1, r2
 800468a:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
        for (xx = 0; xx < w; ++xx)
 800468e:	9a03      	ldr	r2, [sp, #12]
 8004690:	e7e2      	b.n	8004658 <ILI9341_DrawCharAtXY+0x190>
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
 8004692:	9908      	ldr	r1, [sp, #32]
 8004694:	4451      	add	r1, sl
 8004696:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004698:	9400      	str	r4, [sp, #0]
 800469a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800469c:	9a06      	ldr	r2, [sp, #24]
 800469e:	b289      	uxth	r1, r1
 80046a0:	9805      	ldr	r0, [sp, #20]
 80046a2:	f7ff fe4b 	bl	800433c <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 80046a6:	4620      	mov	r0, r4
 80046a8:	f001 f906 	bl	80058b8 <free>
      break;
 80046ac:	e745      	b.n	800453a <ILI9341_DrawCharAtXY+0x72>
      ILI9341_CSX_Low();
 80046ae:	2200      	movs	r2, #0
 80046b0:	2102      	movs	r1, #2
 80046b2:	4827      	ldr	r0, [pc, #156]	; (8004750 <ILI9341_DrawCharAtXY+0x288>)
 80046b4:	f7fc fb77 	bl	8000da6 <HAL_GPIO_WritePin>
  bit = 0;
 80046b8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80046bc:	4653      	mov	r3, sl
  bits = 0;
 80046be:	4654      	mov	r4, sl
 80046c0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80046c4:	f8dd b020 	ldr.w	fp, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 80046c8:	e028      	b.n	800471c <ILI9341_DrawCharAtXY+0x254>
          if (bits & 0x80)
 80046ca:	f014 0f80 	tst.w	r4, #128	; 0x80
 80046ce:	d110      	bne.n	80046f2 <ILI9341_DrawCharAtXY+0x22a>
          bits <<= 1;
 80046d0:	0064      	lsls	r4, r4, #1
 80046d2:	b2e4      	uxtb	r4, r4
        for (xx = 0; xx < w; ++xx)
 80046d4:	3501      	adds	r5, #1
 80046d6:	b2ed      	uxtb	r5, r5
          if (!(bit++ & 7))
 80046d8:	463b      	mov	r3, r7
        for (xx = 0; xx < w; ++xx)
 80046da:	4545      	cmp	r5, r8
 80046dc:	d21a      	bcs.n	8004714 <ILI9341_DrawCharAtXY+0x24c>
          if (!(bit++ & 7))
 80046de:	1c5f      	adds	r7, r3, #1
 80046e0:	b2ff      	uxtb	r7, r7
 80046e2:	f013 0f07 	tst.w	r3, #7
 80046e6:	d1f0      	bne.n	80046ca <ILI9341_DrawCharAtXY+0x202>
            bits = pBitmap[bo++];
 80046e8:	1c73      	adds	r3, r6, #1
 80046ea:	f819 4006 	ldrb.w	r4, [r9, r6]
 80046ee:	b29e      	uxth	r6, r3
 80046f0:	e7eb      	b.n	80046ca <ILI9341_DrawCharAtXY+0x202>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 80046f2:	9b05      	ldr	r3, [sp, #20]
 80046f4:	9a04      	ldr	r2, [sp, #16]
 80046f6:	1898      	adds	r0, r3, r2
 80046f8:	fa15 f080 	uxtah	r0, r5, r0
 80046fc:	9b07      	ldr	r3, [sp, #28]
 80046fe:	eb0b 0103 	add.w	r1, fp, r3
 8004702:	fa1a f181 	uxtah	r1, sl, r1
 8004706:	2300      	movs	r3, #0
 8004708:	9a06      	ldr	r2, [sp, #24]
 800470a:	b209      	sxth	r1, r1
 800470c:	b200      	sxth	r0, r0
 800470e:	f7ff fe09 	bl	8004324 <ILI9341_DrawPixel>
 8004712:	e7dd      	b.n	80046d0 <ILI9341_DrawCharAtXY+0x208>
      for (yy = 0; yy < h; ++yy)
 8004714:	f10a 0a01 	add.w	sl, sl, #1
 8004718:	fa5f fa8a 	uxtb.w	sl, sl
 800471c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800471e:	4592      	cmp	sl, r2
 8004720:	d201      	bcs.n	8004726 <ILI9341_DrawCharAtXY+0x25e>
        for (xx = 0; xx < w; ++xx)
 8004722:	9d03      	ldr	r5, [sp, #12]
 8004724:	e7d9      	b.n	80046da <ILI9341_DrawCharAtXY+0x212>
      ILI9341_CSX_High();
 8004726:	2201      	movs	r2, #1
 8004728:	2102      	movs	r1, #2
 800472a:	4809      	ldr	r0, [pc, #36]	; (8004750 <ILI9341_DrawCharAtXY+0x288>)
 800472c:	f7fc fb3b 	bl	8000da6 <HAL_GPIO_WritePin>
      break;
 8004730:	e703      	b.n	800453a <ILI9341_DrawCharAtXY+0x72>
    return pGlyph->xAdvance;
 8004732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004734:	7918      	ldrb	r0, [r3, #4]
 8004736:	e707      	b.n	8004548 <ILI9341_DrawCharAtXY+0x80>
    return 0;
 8004738:	2000      	movs	r0, #0
 800473a:	e705      	b.n	8004548 <ILI9341_DrawCharAtXY+0x80>
    return 0;
 800473c:	2000      	movs	r0, #0
 800473e:	e703      	b.n	8004548 <ILI9341_DrawCharAtXY+0x80>
 8004740:	20000488 	.word	0x20000488
 8004744:	2000000b 	.word	0x2000000b
 8004748:	2000000a 	.word	0x2000000a
 800474c:	20000480 	.word	0x20000480
 8004750:	40020800 	.word	0x40020800

08004754 <ILI9341_DrawTextAtXY>:
  uint16_t NumChars;
  uint8_t DX;
  
  pText = (uint8_t *) Text;

  if (!pText)
 8004754:	b360      	cbz	r0, 80047b0 <ILI9341_DrawTextAtXY+0x5c>
{
 8004756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475a:	460d      	mov	r5, r1
 800475c:	4690      	mov	r8, r2
 800475e:	461c      	mov	r4, r3
 8004760:	4606      	mov	r6, r0
    return;

  NumChars = strlen(Text);
 8004762:	f7fb fd6d 	bl	8000240 <strlen>
 8004766:	b287      	uxth	r7, r0

  switch (TextPosition)
 8004768:	2c02      	cmp	r4, #2
 800476a:	d003      	beq.n	8004774 <ILI9341_DrawTextAtXY+0x20>
 800476c:	2c03      	cmp	r4, #3
 800476e:	d009      	beq.n	8004784 <ILI9341_DrawTextAtXY+0x30>
{
 8004770:	2400      	movs	r4, #0
 8004772:	e019      	b.n	80047a8 <ILI9341_DrawTextAtXY+0x54>
  {
    case tpCentre:
      X -= ILI9341_GetTextWidth(Text) / 2;
 8004774:	4630      	mov	r0, r6
 8004776:	f7ff fe93 	bl	80044a0 <ILI9341_GetTextWidth>
 800477a:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800477e:	1a28      	subs	r0, r5, r0
 8004780:	b285      	uxth	r5, r0
      break;
 8004782:	e7f5      	b.n	8004770 <ILI9341_DrawTextAtXY+0x1c>
    case tpRight:
      X -= ILI9341_GetTextWidth(Text);
 8004784:	4630      	mov	r0, r6
 8004786:	f7ff fe8b 	bl	80044a0 <ILI9341_GetTextWidth>
 800478a:	1a28      	subs	r0, r5, r0
 800478c:	b285      	uxth	r5, r0
      break;
 800478e:	e7ef      	b.n	8004770 <ILI9341_DrawTextAtXY+0x1c>
  }

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
  {
    Ch = *pText;
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <ILI9341_DrawTextAtXY+0x60>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	4642      	mov	r2, r8
 8004796:	4629      	mov	r1, r5
 8004798:	f816 0b01 	ldrb.w	r0, [r6], #1
 800479c:	f7ff fe94 	bl	80044c8 <ILI9341_DrawCharAtXY>
    ++pText;
    X += DX;
 80047a0:	4428      	add	r0, r5
 80047a2:	b285      	uxth	r5, r0
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80047a4:	3401      	adds	r4, #1
 80047a6:	b2a4      	uxth	r4, r4
 80047a8:	42bc      	cmp	r4, r7
 80047aa:	d3f1      	bcc.n	8004790 <ILI9341_DrawTextAtXY+0x3c>
  }
}
 80047ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000008 	.word	0x20000008

080047b8 <JSB_UI_SetDefaultState>:
  pPage->Controls.pControls[pPage->Controls.NumControls] = pControl;
  pPage->Controls.NumControls += 1;
}

void JSB_UI_SetDefaultState()
{
 80047b8:	b508      	push	{r3, lr}
  ILI9341_SetDefaultState();
 80047ba:	f7ff fbe7 	bl	8003f8c <ILI9341_SetDefaultState>

  ILI9341_SetFont(&FreeSans9pt7b);
 80047be:	4802      	ldr	r0, [pc, #8]	; (80047c8 <JSB_UI_SetDefaultState+0x10>)
 80047c0:	f7ff fe46 	bl	8004450 <ILI9341_SetFont>
}
 80047c4:	bd08      	pop	{r3, pc}
 80047c6:	bf00      	nop
 80047c8:	08008600 	.word	0x08008600

080047cc <JSB_UI_InitializeDisplay>:

void JSB_UI_InitializeDisplay()
{
 80047cc:	b508      	push	{r3, lr}
  ILI9341_Initialize(&hspi1, 1);
 80047ce:	2101      	movs	r1, #1
 80047d0:	4807      	ldr	r0, [pc, #28]	; (80047f0 <JSB_UI_InitializeDisplay+0x24>)
 80047d2:	f7ff fbed 	bl	8003fb0 <ILI9341_Initialize>
  LCD_BacklightOn(1);
 80047d6:	2001      	movs	r0, #1
 80047d8:	f000 f814 	bl	8004804 <LCD_BacklightOn>
  XPT2046_Initialize(&hspi2);
 80047dc:	4805      	ldr	r0, [pc, #20]	; (80047f4 <JSB_UI_InitializeDisplay+0x28>)
 80047de:	f000 f80b 	bl	80047f8 <XPT2046_Initialize>

  JSB_UI_SetDefaultState();
 80047e2:	f7ff ffe9 	bl	80047b8 <JSB_UI_SetDefaultState>

  ILI9341_Clear(0x0000);
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7ff fe24 	bl	8004434 <ILI9341_Clear>
}
 80047ec:	bd08      	pop	{r3, pc}
 80047ee:	bf00      	nop
 80047f0:	20000b54 	.word	0x20000b54
 80047f4:	20000bb8 	.word	0x20000bb8

080047f8 <XPT2046_Initialize>:

///////////////////////////////////////////////////////////////////////////////

void XPT2046_Initialize(SPI_HandleTypeDef *i_phspi)
{
  phspi = i_phspi;
 80047f8:	4b01      	ldr	r3, [pc, #4]	; (8004800 <XPT2046_Initialize+0x8>)
 80047fa:	6018      	str	r0, [r3, #0]
}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000490 	.word	0x20000490

08004804 <LCD_BacklightOn>:

///////////////////////////////////////////////////////////////////////////////
// LCD:

void LCD_BacklightOn(uint8_t Value)
{
 8004804:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LCD_NBACKLIGHT_GPIO_Port, LCD_NBACKLIGHT_Pin, Value ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8004806:	fab0 f280 	clz	r2, r0
 800480a:	0952      	lsrs	r2, r2, #5
 800480c:	2108      	movs	r1, #8
 800480e:	4802      	ldr	r0, [pc, #8]	; (8004818 <LCD_BacklightOn+0x14>)
 8004810:	f7fc fac9 	bl	8000da6 <HAL_GPIO_WritePin>
}
 8004814:	bd08      	pop	{r3, pc}
 8004816:	bf00      	nop
 8004818:	40020800 	.word	0x40020800

0800481c <ToggleLED>:
      break;
  }
}

void ToggleLED(LED_t LED)
{
 800481c:	b508      	push	{r3, lr}
  switch(LED)
 800481e:	2802      	cmp	r0, #2
 8004820:	d00b      	beq.n	800483a <ToggleLED+0x1e>
 8004822:	2803      	cmp	r0, #3
 8004824:	d00e      	beq.n	8004844 <ToggleLED+0x28>
 8004826:	2801      	cmp	r0, #1
 8004828:	d002      	beq.n	8004830 <ToggleLED+0x14>
      break;
    case LED_Blue:
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
      break;
    default:
      Error_Handler();
 800482a:	f000 faaf 	bl	8004d8c <Error_Handler>
      break;
  }
}
 800482e:	e003      	b.n	8004838 <ToggleLED+0x1c>
      HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8004830:	2102      	movs	r1, #2
 8004832:	4807      	ldr	r0, [pc, #28]	; (8004850 <ToggleLED+0x34>)
 8004834:	f7fc fabd 	bl	8000db2 <HAL_GPIO_TogglePin>
}
 8004838:	bd08      	pop	{r3, pc}
      HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 800483a:	2104      	movs	r1, #4
 800483c:	4804      	ldr	r0, [pc, #16]	; (8004850 <ToggleLED+0x34>)
 800483e:	f7fc fab8 	bl	8000db2 <HAL_GPIO_TogglePin>
      break;
 8004842:	e7f9      	b.n	8004838 <ToggleLED+0x1c>
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8004844:	2108      	movs	r1, #8
 8004846:	4802      	ldr	r0, [pc, #8]	; (8004850 <ToggleLED+0x34>)
 8004848:	f7fc fab3 	bl	8000db2 <HAL_GPIO_TogglePin>
      break;
 800484c:	e7f4      	b.n	8004838 <ToggleLED+0x1c>
 800484e:	bf00      	nop
 8004850:	40020000 	.word	0x40020000

08004854 <IsUserButtonPressed>:

///////////////////////////////////////////////////////////////////////////////
// User button:

uint8_t IsUserButtonPressed()
{
 8004854:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(NUserButton_GPIO_Port, NUserButton_Pin);
 8004856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800485a:	4803      	ldr	r0, [pc, #12]	; (8004868 <IsUserButtonPressed+0x14>)
 800485c:	f7fc fa9c 	bl	8000d98 <HAL_GPIO_ReadPin>
}
 8004860:	fab0 f080 	clz	r0, r0
 8004864:	0940      	lsrs	r0, r0, #5
 8004866:	bd08      	pop	{r3, pc}
 8004868:	40020800 	.word	0x40020800

0800486c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800486c:	b500      	push	{lr}
 800486e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004870:	4b26      	ldr	r3, [pc, #152]	; (800490c <MX_DMA_Init+0xa0>)
 8004872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004874:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
 800487a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004880:	9200      	str	r2, [sp, #0]
 8004882:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004886:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004896:	2200      	movs	r2, #0
 8004898:	4611      	mov	r1, r2
 800489a:	200b      	movs	r0, #11
 800489c:	f7fb ff14 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80048a0:	200b      	movs	r0, #11
 80048a2:	f7fb ff47 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80048a6:	2200      	movs	r2, #0
 80048a8:	4611      	mov	r1, r2
 80048aa:	2010      	movs	r0, #16
 80048ac:	f7fb ff0c 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80048b0:	2010      	movs	r0, #16
 80048b2:	f7fb ff3f 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80048b6:	2200      	movs	r2, #0
 80048b8:	4611      	mov	r1, r2
 80048ba:	202f      	movs	r0, #47	; 0x2f
 80048bc:	f7fb ff04 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80048c0:	202f      	movs	r0, #47	; 0x2f
 80048c2:	f7fb ff37 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80048c6:	2200      	movs	r2, #0
 80048c8:	4611      	mov	r1, r2
 80048ca:	2039      	movs	r0, #57	; 0x39
 80048cc:	f7fb fefc 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80048d0:	2039      	movs	r0, #57	; 0x39
 80048d2:	f7fb ff2f 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80048d6:	2200      	movs	r2, #0
 80048d8:	4611      	mov	r1, r2
 80048da:	203a      	movs	r0, #58	; 0x3a
 80048dc:	f7fb fef4 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80048e0:	203a      	movs	r0, #58	; 0x3a
 80048e2:	f7fb ff27 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80048e6:	2200      	movs	r2, #0
 80048e8:	4611      	mov	r1, r2
 80048ea:	203b      	movs	r0, #59	; 0x3b
 80048ec:	f7fb feec 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80048f0:	203b      	movs	r0, #59	; 0x3b
 80048f2:	f7fb ff1f 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80048f6:	2200      	movs	r2, #0
 80048f8:	4611      	mov	r1, r2
 80048fa:	2045      	movs	r0, #69	; 0x45
 80048fc:	f7fb fee4 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004900:	2045      	movs	r0, #69	; 0x45
 8004902:	f7fb ff17 	bl	8000734 <HAL_NVIC_EnableIRQ>

}
 8004906:	b003      	add	sp, #12
 8004908:	f85d fb04 	ldr.w	pc, [sp], #4
 800490c:	40023800 	.word	0x40023800

08004910 <HAL_TIM_PeriodElapsedCallback>:
//////////////////////////////////////////////////////////////////////////////

static uint32_t CurrentTimerCount = 0; // !!!

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b508      	push	{r3, lr}
  if (htim == &htim3)
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004914:	4283      	cmp	r3, r0
 8004916:	d000      	beq.n	800491a <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_GPIO_WritePin(TestPoint_GPIO_Port, TestPoint_Pin, 1);
    if (IsUserButtonPressed())
      CurrentTimerCount = __HAL_TIM_GetCounter(&htim3);
    HAL_GPIO_WritePin(TestPoint_GPIO_Port, TestPoint_Pin, 0);
  }
}
 8004918:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(TestPoint_GPIO_Port, TestPoint_Pin, 1);
 800491a:	2201      	movs	r2, #1
 800491c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004920:	4809      	ldr	r0, [pc, #36]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004922:	f7fc fa40 	bl	8000da6 <HAL_GPIO_WritePin>
    if (IsUserButtonPressed())
 8004926:	f7ff ff95 	bl	8004854 <IsUserButtonPressed>
 800492a:	b120      	cbz	r0, 8004936 <HAL_TIM_PeriodElapsedCallback+0x26>
      CurrentTimerCount = __HAL_TIM_GetCounter(&htim3);
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004934:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(TestPoint_GPIO_Port, TestPoint_Pin, 0);
 8004936:	2200      	movs	r2, #0
 8004938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800493c:	4802      	ldr	r0, [pc, #8]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800493e:	f7fc fa32 	bl	8000da6 <HAL_GPIO_WritePin>
}
 8004942:	e7e9      	b.n	8004918 <HAL_TIM_PeriodElapsedCallback+0x8>
 8004944:	20000d90 	.word	0x20000d90
 8004948:	40020400 	.word	0x40020400
 800494c:	200007b4 	.word	0x200007b4

08004950 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
  if (htim == &htim3)
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <HAL_TIM_IC_CaptureCallback+0x48>)
 8004952:	4283      	cmp	r3, r0
 8004954:	d000      	beq.n	8004958 <HAL_TIM_IC_CaptureCallback+0x8>
 8004956:	4770      	bx	lr
//    ToggleLED(LED_Blue);

    if (Stop)
      return;

    if (NumCaptureInfos != MaxNumCaptureInfos)
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_TIM_IC_CaptureCallback+0x4c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b64      	cmp	r3, #100	; 0x64
 800495e:	d0fa      	beq.n	8004956 <HAL_TIM_IC_CaptureCallback+0x6>
{
 8004960:	b510      	push	{r4, lr}
 8004962:	b082      	sub	sp, #8
    {
      CaptureInfo_t CaptureInfo;

      CaptureInfo.Ch1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8004964:	4c0c      	ldr	r4, [pc, #48]	; (8004998 <HAL_TIM_IC_CaptureCallback+0x48>)
 8004966:	2100      	movs	r1, #0
 8004968:	4620      	mov	r0, r4
 800496a:	f7fe fcf9 	bl	8003360 <HAL_TIM_ReadCapturedValue>
 800496e:	9000      	str	r0, [sp, #0]
      CaptureInfo.Ch2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8004970:	2104      	movs	r1, #4
 8004972:	4620      	mov	r0, r4
 8004974:	f7fe fcf4 	bl	8003360 <HAL_TIM_ReadCapturedValue>
 8004978:	9001      	str	r0, [sp, #4]
      CaptureInfos[NumCaptureInfos] =CaptureInfo;
 800497a:	4c08      	ldr	r4, [pc, #32]	; (800499c <HAL_TIM_IC_CaptureCallback+0x4c>)
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8004980:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004984:	a902      	add	r1, sp, #8
 8004986:	e911 0003 	ldmdb	r1, {r0, r1}
 800498a:	e882 0003 	stmia.w	r2, {r0, r1}
      ++NumCaptureInfos;
 800498e:	3301      	adds	r3, #1
 8004990:	6023      	str	r3, [r4, #0]
    }
  }
}
 8004992:	b002      	add	sp, #8
 8004994:	bd10      	pop	{r4, pc}
 8004996:	bf00      	nop
 8004998:	20000d90 	.word	0x20000d90
 800499c:	200007b8 	.word	0x200007b8
 80049a0:	20000494 	.word	0x20000494

080049a4 <Go>:

///////////////////////////////////////////////////////////////////////////////

void Go()
{
 80049a4:	b500      	push	{lr}
 80049a6:	b0c1      	sub	sp, #260	; 0x104
  JSB_UI_InitializeDisplay();
 80049a8:	f7ff ff10 	bl	80047cc <JSB_UI_InitializeDisplay>

  // float TimerCountFrequency = (float)GetAPB1TimerClockFrequency() / ((float)htim3.Instance->PSC + 1.0f);

  if (HAL_TIM_Base_Start_IT(&htim3))
 80049ac:	481b      	ldr	r0, [pc, #108]	; (8004a1c <Go+0x78>)
 80049ae:	f7fe fbe7 	bl	8003180 <HAL_TIM_Base_Start_IT>
 80049b2:	b980      	cbnz	r0, 80049d6 <Go+0x32>
    Error_Handler();
  if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1))
 80049b4:	2100      	movs	r1, #0
 80049b6:	4819      	ldr	r0, [pc, #100]	; (8004a1c <Go+0x78>)
 80049b8:	f7fe ffee 	bl	8003998 <HAL_TIM_IC_Start_IT>
 80049bc:	b970      	cbnz	r0, 80049dc <Go+0x38>
    Error_Handler();
  if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2))
 80049be:	2104      	movs	r1, #4
 80049c0:	4816      	ldr	r0, [pc, #88]	; (8004a1c <Go+0x78>)
 80049c2:	f7fe ffe9 	bl	8003998 <HAL_TIM_IC_Start_IT>
 80049c6:	b960      	cbnz	r0, 80049e2 <Go+0x3e>
    Error_Handler();

  __HAL_TIM_URS_ENABLE(&htim3); // Prevent HAL_TIM_PeriodElapsedCallback() being called when counter is reset by input.
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <Go+0x78>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	f043 0304 	orr.w	r3, r3, #4
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	e00a      	b.n	80049ec <Go+0x48>
    Error_Handler();
 80049d6:	f000 f9d9 	bl	8004d8c <Error_Handler>
 80049da:	e7eb      	b.n	80049b4 <Go+0x10>
    Error_Handler();
 80049dc:	f000 f9d6 	bl	8004d8c <Error_Handler>
 80049e0:	e7ed      	b.n	80049be <Go+0x1a>
    Error_Handler();
 80049e2:	f000 f9d3 	bl	8004d8c <Error_Handler>
 80049e6:	e7ef      	b.n	80049c8 <Go+0x24>
//      NumCaptureInfos = 0;
      // Stop = 0;
//    }

    if (ILI9341_UsingBackBuffer())
      ILI9341_CopyBackBufferToDisplay();
 80049e8:	f7ff fcc0 	bl	800436c <ILI9341_CopyBackBufferToDisplay>
    ILI9341_Clear(0);
 80049ec:	2000      	movs	r0, #0
 80049ee:	f7ff fd21 	bl	8004434 <ILI9341_Clear>
    sprintf(S, "Timer count: %lu", CurrentTimerCount);
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <Go+0x7c>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	490b      	ldr	r1, [pc, #44]	; (8004a24 <Go+0x80>)
 80049f8:	4668      	mov	r0, sp
 80049fa:	f001 fcb7 	bl	800636c <siprintf>
    ILI9341_DrawTextAtXY(S, 0, 1 * (ILI9341_GetFontYSpacing() - 4), tpLeft);
 80049fe:	f7ff fd2f 	bl	8004460 <ILI9341_GetFontYSpacing>
 8004a02:	b282      	uxth	r2, r0
 8004a04:	3a04      	subs	r2, #4
 8004a06:	2301      	movs	r3, #1
 8004a08:	b292      	uxth	r2, r2
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4668      	mov	r0, sp
 8004a0e:	f7ff fea1 	bl	8004754 <ILI9341_DrawTextAtXY>
    if (ILI9341_UsingBackBuffer())
 8004a12:	f7ff fca5 	bl	8004360 <ILI9341_UsingBackBuffer>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d0e8      	beq.n	80049ec <Go+0x48>
 8004a1a:	e7e5      	b.n	80049e8 <Go+0x44>
 8004a1c:	20000d90 	.word	0x20000d90
 8004a20:	200007b4 	.word	0x200007b4
 8004a24:	08008d88 	.word	0x08008d88

08004a28 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2e:	2400      	movs	r4, #0
 8004a30:	9407      	str	r4, [sp, #28]
 8004a32:	9408      	str	r4, [sp, #32]
 8004a34:	9409      	str	r4, [sp, #36]	; 0x24
 8004a36:	940a      	str	r4, [sp, #40]	; 0x28
 8004a38:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a3a:	4b72      	ldr	r3, [pc, #456]	; (8004c04 <MX_GPIO_Init+0x1dc>)
 8004a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3e:	f042 0210 	orr.w	r2, r2, #16
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
 8004a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a46:	f002 0210 	and.w	r2, r2, #16
 8004a4a:	9201      	str	r2, [sp, #4]
 8004a4c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a50:	f042 0204 	orr.w	r2, r2, #4
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
 8004a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a58:	f002 0204 	and.w	r2, r2, #4
 8004a5c:	9202      	str	r2, [sp, #8]
 8004a5e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
 8004a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a6a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004a6e:	9203      	str	r2, [sp, #12]
 8004a70:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
 8004a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7c:	f002 0201 	and.w	r2, r2, #1
 8004a80:	9204      	str	r2, [sp, #16]
 8004a82:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a86:	f042 0202 	orr.w	r2, r2, #2
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8e:	f002 0202 	and.w	r2, r2, #2
 8004a92:	9205      	str	r2, [sp, #20]
 8004a94:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a98:	f042 0208 	orr.w	r2, r2, #8
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	9306      	str	r3, [sp, #24]
 8004aa6:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 8004aa8:	4f57      	ldr	r7, [pc, #348]	; (8004c08 <MX_GPIO_Init+0x1e0>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	2124      	movs	r1, #36	; 0x24
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f7fc f979 	bl	8000da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	2112      	movs	r1, #18
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f7fc f974 	bl	8000da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8004abe:	4e53      	ldr	r6, [pc, #332]	; (8004c0c <MX_GPIO_Init+0x1e4>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f7fc f96d 	bl	8000da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 8004acc:	4622      	mov	r2, r4
 8004ace:	210f      	movs	r1, #15
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f7fc f968 	bl	8000da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8004ad6:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8004c14 <MX_GPIO_Init+0x1ec>
 8004ada:	4622      	mov	r2, r4
 8004adc:	210e      	movs	r1, #14
 8004ade:	4658      	mov	r0, fp
 8004ae0:	f7fc f961 	bl	8000da6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin 
 8004ae4:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8004c18 <MX_GPIO_Init+0x1f0>
 8004ae8:	4622      	mov	r2, r4
 8004aea:	f641 0143 	movw	r1, #6211	; 0x1843
 8004aee:	4640      	mov	r0, r8
 8004af0:	f7fc f959 	bl	8000da6 <HAL_GPIO_WritePin>
                          |SI_NRST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8004af4:	f8df a124 	ldr.w	sl, [pc, #292]	; 8004c1c <MX_GPIO_Init+0x1f4>
 8004af8:	4622      	mov	r2, r4
 8004afa:	217f      	movs	r1, #127	; 0x7f
 8004afc:	4650      	mov	r0, sl
 8004afe:	f7fc f952 	bl	8000da6 <HAL_GPIO_WritePin>
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_NSS_Pin;
 8004b02:	2324      	movs	r3, #36	; 0x24
 8004b04:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b06:	2501      	movs	r5, #1
 8004b08:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b0c:	f04f 0902 	mov.w	r9, #2
 8004b10:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b14:	a907      	add	r1, sp, #28
 8004b16:	4638      	mov	r0, r7
 8004b18:	f7fc f84e 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 8004b1c:	2348      	movs	r3, #72	; 0x48
 8004b1e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b20:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b24:	a907      	add	r1, sp, #28
 8004b26:	4638      	mov	r0, r7
 8004b28:	f7fc f846 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_B_EN_Pin|ESP32_A_EN_Pin;
 8004b2c:	2312      	movs	r3, #18
 8004b2e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b30:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b34:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b36:	a907      	add	r1, sp, #28
 8004b38:	4638      	mov	r0, r7
 8004b3a:	f7fc f83d 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
 8004b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b42:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b44:	4f32      	ldr	r7, [pc, #200]	; (8004c10 <MX_GPIO_Init+0x1e8>)
 8004b46:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b48:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 8004b4a:	a907      	add	r1, sp, #28
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f7fc f833 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin|LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin 
 8004b52:	f248 030f 	movw	r3, #32783	; 0x800f
 8004b56:	9307      	str	r3, [sp, #28]
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b58:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b5c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b5e:	a907      	add	r1, sp, #28
 8004b60:	4630      	mov	r0, r6
 8004b62:	f7fc f829 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 8004b66:	230e      	movs	r3, #14
 8004b68:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b6a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b70:	a907      	add	r1, sp, #28
 8004b72:	4658      	mov	r0, fp
 8004b74:	f7fc f820 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin;
 8004b78:	f640 0303 	movw	r3, #2051	; 0x803
 8004b7c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b7e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b80:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b82:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b86:	a907      	add	r1, sp, #28
 8004b88:	4640      	mov	r0, r8
 8004b8a:	f7fc f815 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 8004b8e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8004b92:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b94:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b96:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b98:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b9a:	a907      	add	r1, sp, #28
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	f7fc f80b 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba8:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bac:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bae:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bb0:	2305      	movs	r3, #5
 8004bb2:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bb4:	a907      	add	r1, sp, #28
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f7fb fffe 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8004bbc:	237f      	movs	r3, #127	; 0x7f
 8004bbe:	9307      	str	r3, [sp, #28]
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bc0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bc6:	a907      	add	r1, sp, #28
 8004bc8:	4650      	mov	r0, sl
 8004bca:	f7fb fff5 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
 8004bce:	2320      	movs	r3, #32
 8004bd0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004bd2:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 8004bd6:	a907      	add	r1, sp, #28
 8004bd8:	4640      	mov	r0, r8
 8004bda:	f7fb ffed 	bl	8000bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004bde:	4622      	mov	r2, r4
 8004be0:	4621      	mov	r1, r4
 8004be2:	2017      	movs	r0, #23
 8004be4:	f7fb fd70 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004be8:	2017      	movs	r0, #23
 8004bea:	f7fb fda3 	bl	8000734 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004bee:	4622      	mov	r2, r4
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	2028      	movs	r0, #40	; 0x28
 8004bf4:	f7fb fd68 	bl	80006c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004bf8:	2028      	movs	r0, #40	; 0x28
 8004bfa:	f7fb fd9b 	bl	8000734 <HAL_NVIC_EnableIRQ>

}
 8004bfe:	b00d      	add	sp, #52	; 0x34
 8004c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40020800 	.word	0x40020800
 8004c10:	10210000 	.word	0x10210000
 8004c14:	40020000 	.word	0x40020000
 8004c18:	40020400 	.word	0x40020400
 8004c1c:	40020c00 	.word	0x40020c00

08004c20 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004c20:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8004c22:	4812      	ldr	r0, [pc, #72]	; (8004c6c <MX_I2C1_Init+0x4c>)
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <MX_I2C1_Init+0x50>)
 8004c26:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8004c28:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <MX_I2C1_Init+0x54>)
 8004c2a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c30:	2201      	movs	r2, #1
 8004c32:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c34:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004c36:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c38:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c3a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c3c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c3e:	f7fc f91d 	bl	8000e7c <HAL_I2C_Init>
 8004c42:	b950      	cbnz	r0, 8004c5a <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c44:	2100      	movs	r1, #0
 8004c46:	4809      	ldr	r0, [pc, #36]	; (8004c6c <MX_I2C1_Init+0x4c>)
 8004c48:	f7fc fc31 	bl	80014ae <HAL_I2CEx_ConfigAnalogFilter>
 8004c4c:	b940      	cbnz	r0, 8004c60 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4806      	ldr	r0, [pc, #24]	; (8004c6c <MX_I2C1_Init+0x4c>)
 8004c52:	f7fc fc5a 	bl	800150a <HAL_I2CEx_ConfigDigitalFilter>
 8004c56:	b930      	cbnz	r0, 8004c66 <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }

}
 8004c58:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c5a:	f000 f897 	bl	8004d8c <Error_Handler>
 8004c5e:	e7f1      	b.n	8004c44 <MX_I2C1_Init+0x24>
    Error_Handler();
 8004c60:	f000 f894 	bl	8004d8c <Error_Handler>
 8004c64:	e7f3      	b.n	8004c4e <MX_I2C1_Init+0x2e>
    Error_Handler();
 8004c66:	f000 f891 	bl	8004d8c <Error_Handler>
}
 8004c6a:	e7f5      	b.n	8004c58 <MX_I2C1_Init+0x38>
 8004c6c:	2000087c 	.word	0x2000087c
 8004c70:	40005400 	.word	0x40005400
 8004c74:	6000030d 	.word	0x6000030d

08004c78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004c78:	b530      	push	{r4, r5, lr}
 8004c7a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	9303      	str	r3, [sp, #12]
 8004c80:	9304      	str	r3, [sp, #16]
 8004c82:	9305      	str	r3, [sp, #20]
 8004c84:	9306      	str	r3, [sp, #24]
 8004c86:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8004c88:	6802      	ldr	r2, [r0, #0]
 8004c8a:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <HAL_I2C_MspInit+0xf8>)
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004c90:	b009      	add	sp, #36	; 0x24
 8004c92:	bd30      	pop	{r4, r5, pc}
 8004c94:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c96:	4d37      	ldr	r5, [pc, #220]	; (8004d74 <HAL_I2C_MspInit+0xfc>)
 8004c98:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004c9a:	f043 0302 	orr.w	r3, r3, #2
 8004c9e:	632b      	str	r3, [r5, #48]	; 0x30
 8004ca0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	9301      	str	r3, [sp, #4]
 8004ca8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004caa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cb0:	2312      	movs	r3, #18
 8004cb2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cc0:	a903      	add	r1, sp, #12
 8004cc2:	482d      	ldr	r0, [pc, #180]	; (8004d78 <HAL_I2C_MspInit+0x100>)
 8004cc4:	f7fb ff78 	bl	8000bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004cc8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004cca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cce:	642b      	str	r3, [r5, #64]	; 0x40
 8004cd0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd6:	9302      	str	r3, [sp, #8]
 8004cd8:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8004cda:	4828      	ldr	r0, [pc, #160]	; (8004d7c <HAL_I2C_MspInit+0x104>)
 8004cdc:	4b28      	ldr	r3, [pc, #160]	; (8004d80 <HAL_I2C_MspInit+0x108>)
 8004cde:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004ce0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ce4:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ce6:	2340      	movs	r3, #64	; 0x40
 8004ce8:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cf2:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cf4:	6143      	str	r3, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cf6:	6183      	str	r3, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004cf8:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004cfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cfe:	6202      	str	r2, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d00:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004d02:	f7fb fdb7 	bl	8000874 <HAL_DMA_Init>
 8004d06:	bb60      	cbnz	r0, 8004d62 <HAL_I2C_MspInit+0xea>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004d08:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <HAL_I2C_MspInit+0x104>)
 8004d0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d0c:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004d0e:	481d      	ldr	r0, [pc, #116]	; (8004d84 <HAL_I2C_MspInit+0x10c>)
 8004d10:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <HAL_I2C_MspInit+0x110>)
 8004d12:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d18:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d1e:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d24:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d26:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d28:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004d2a:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d30:	6202      	str	r2, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d32:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004d34:	f7fb fd9e 	bl	8000874 <HAL_DMA_Init>
 8004d38:	b9b0      	cbnz	r0, 8004d68 <HAL_I2C_MspInit+0xf0>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <HAL_I2C_MspInit+0x10c>)
 8004d3c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004d3e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004d40:	2200      	movs	r2, #0
 8004d42:	4611      	mov	r1, r2
 8004d44:	201f      	movs	r0, #31
 8004d46:	f7fb fcbf 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004d4a:	201f      	movs	r0, #31
 8004d4c:	f7fb fcf2 	bl	8000734 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004d50:	2200      	movs	r2, #0
 8004d52:	4611      	mov	r1, r2
 8004d54:	2020      	movs	r0, #32
 8004d56:	f7fb fcb7 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004d5a:	2020      	movs	r0, #32
 8004d5c:	f7fb fcea 	bl	8000734 <HAL_NVIC_EnableIRQ>
}
 8004d60:	e796      	b.n	8004c90 <HAL_I2C_MspInit+0x18>
      Error_Handler();
 8004d62:	f000 f813 	bl	8004d8c <Error_Handler>
 8004d66:	e7cf      	b.n	8004d08 <HAL_I2C_MspInit+0x90>
      Error_Handler();
 8004d68:	f000 f810 	bl	8004d8c <Error_Handler>
 8004d6c:	e7e5      	b.n	8004d3a <HAL_I2C_MspInit+0xc2>
 8004d6e:	bf00      	nop
 8004d70:	40005400 	.word	0x40005400
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40020400 	.word	0x40020400
 8004d7c:	2000081c 	.word	0x2000081c
 8004d80:	400260b8 	.word	0x400260b8
 8004d84:	200007bc 	.word	0x200007bc
 8004d88:	40026010 	.word	0x40026010

08004d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    ToggleLED(LED_Red);
 8004d8e:	2001      	movs	r0, #1
 8004d90:	f7ff fd44 	bl	800481c <ToggleLED>
    HAL_Delay(50);
 8004d94:	2032      	movs	r0, #50	; 0x32
 8004d96:	f7fb fc71 	bl	800067c <HAL_Delay>
    ToggleLED(LED_Red);
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	f7ff fd3e 	bl	800481c <ToggleLED>
    HAL_Delay(50);
 8004da0:	2032      	movs	r0, #50	; 0x32
 8004da2:	f7fb fc6b 	bl	800067c <HAL_Delay>
  while(1)
 8004da6:	e7f2      	b.n	8004d8e <Error_Handler+0x2>

08004da8 <SystemClock_Config>:
{
 8004da8:	b500      	push	{lr}
 8004daa:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dac:	2234      	movs	r2, #52	; 0x34
 8004dae:	2100      	movs	r1, #0
 8004db0:	a82b      	add	r0, sp, #172	; 0xac
 8004db2:	f000 fd89 	bl	80058c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004db6:	2100      	movs	r1, #0
 8004db8:	9126      	str	r1, [sp, #152]	; 0x98
 8004dba:	9127      	str	r1, [sp, #156]	; 0x9c
 8004dbc:	9128      	str	r1, [sp, #160]	; 0xa0
 8004dbe:	9129      	str	r1, [sp, #164]	; 0xa4
 8004dc0:	912a      	str	r1, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004dc2:	2290      	movs	r2, #144	; 0x90
 8004dc4:	a802      	add	r0, sp, #8
 8004dc6:	f000 fd7f 	bl	80058c8 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dca:	4b2f      	ldr	r3, [pc, #188]	; (8004e88 <SystemClock_Config+0xe0>)
 8004dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dde:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <SystemClock_Config+0xe4>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004df2:	2301      	movs	r3, #1
 8004df4:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004df6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004dfa:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004e04:	9232      	str	r2, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004e06:	2219      	movs	r2, #25
 8004e08:	9233      	str	r2, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8004e0a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004e0e:	9234      	str	r2, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e10:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004e12:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e14:	a82b      	add	r0, sp, #172	; 0xac
 8004e16:	f7fc fbe3 	bl	80015e0 <HAL_RCC_OscConfig>
 8004e1a:	bb60      	cbnz	r0, 8004e76 <SystemClock_Config+0xce>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004e1c:	f7fc fba2 	bl	8001564 <HAL_PWREx_EnableOverDrive>
 8004e20:	bb58      	cbnz	r0, 8004e7a <SystemClock_Config+0xd2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e22:	230f      	movs	r3, #15
 8004e24:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e26:	2302      	movs	r3, #2
 8004e28:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004e32:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e38:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004e3a:	2107      	movs	r1, #7
 8004e3c:	a826      	add	r0, sp, #152	; 0x98
 8004e3e:	f7fc fe0b 	bl	8001a58 <HAL_RCC_ClockConfig>
 8004e42:	b9e0      	cbnz	r0, 8004e7e <SystemClock_Config+0xd6>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1;
 8004e44:	f44f 1382 	mov.w	r3, #1064960	; 0x104000
 8004e48:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8004e4a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8004e4e:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8004e50:	2302      	movs	r3, #2
 8004e52:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004e54:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 14;
 8004e56:	230e      	movs	r3, #14
 8004e58:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004e5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e62:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e64:	2300      	movs	r3, #0
 8004e66:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e68:	a802      	add	r0, sp, #8
 8004e6a:	f7fc fea7 	bl	8001bbc <HAL_RCCEx_PeriphCLKConfig>
 8004e6e:	b940      	cbnz	r0, 8004e82 <SystemClock_Config+0xda>
}
 8004e70:	b039      	add	sp, #228	; 0xe4
 8004e72:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004e76:	f7ff ff89 	bl	8004d8c <Error_Handler>
    Error_Handler();
 8004e7a:	f7ff ff87 	bl	8004d8c <Error_Handler>
    Error_Handler();
 8004e7e:	f7ff ff85 	bl	8004d8c <Error_Handler>
    Error_Handler();
 8004e82:	f7ff ff83 	bl	8004d8c <Error_Handler>
 8004e86:	bf00      	nop
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	40007000 	.word	0x40007000

08004e90 <main>:
{
 8004e90:	b508      	push	{r3, lr}
  __ASM volatile ("dsb 0xF":::"memory");
 8004e92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004e96:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004e9a:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <main+0xa8>)
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004ea2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ea6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004eb0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004eb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004eb6:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004eba:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004ebe:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004ec2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004ec6:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8004eca:	e000      	b.n	8004ece <main+0x3e>
    } while(sets-- != 0U);
 8004ecc:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004ece:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004ed2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004ed6:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8004eda:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8004ede:	4916      	ldr	r1, [pc, #88]	; (8004f38 <main+0xa8>)
 8004ee0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	3a01      	subs	r2, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f2      	bne.n	8004ed2 <main+0x42>
    } while(sets-- != 0U);
 8004eec:	1e43      	subs	r3, r0, #1
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d1ec      	bne.n	8004ecc <main+0x3c>
 8004ef2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004ef6:	694b      	ldr	r3, [r1, #20]
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	614b      	str	r3, [r1, #20]
 8004efe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004f02:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8004f06:	f7fb fb9b 	bl	8000640 <HAL_Init>
  SystemClock_Config();
 8004f0a:	f7ff ff4d 	bl	8004da8 <SystemClock_Config>
  MX_GPIO_Init();
 8004f0e:	f7ff fd8b 	bl	8004a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f12:	f7ff fcab 	bl	800486c <MX_DMA_Init>
  MX_I2C1_Init();
 8004f16:	f7ff fe83 	bl	8004c20 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004f1a:	f000 f8f7 	bl	800510c <MX_SPI1_Init>
  MX_SPI2_Init();
 8004f1e:	f000 f91b 	bl	8005158 <MX_SPI2_Init>
  MX_SPI3_Init();
 8004f22:	f000 f93f 	bl	80051a4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8004f26:	f000 fc05 	bl	8005734 <MX_TIM1_Init>
  MX_SAI2_Init();
 8004f2a:	f000 f807 	bl	8004f3c <MX_SAI2_Init>
  MX_TIM3_Init();
 8004f2e:	f000 fadd 	bl	80054ec <MX_TIM3_Init>
  Go();
 8004f32:	f7ff fd37 	bl	80049a4 <Go>
  while (1)
 8004f36:	e7fe      	b.n	8004f36 <main+0xa6>
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8004f3c:	b508      	push	{r3, lr}

  hsai_BlockA2.Instance = SAI2_Block_A;
 8004f3e:	4817      	ldr	r0, [pc, #92]	; (8004f9c <MX_SAI2_Init+0x60>)
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <MX_SAI2_Init+0x64>)
 8004f42:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8004f44:	2100      	movs	r1, #0
 8004f46:	6041      	str	r1, [r0, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8004f48:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8004f4a:	6101      	str	r1, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8004f4c:	6141      	str	r1, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8004f4e:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8004f50:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f54:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8004f56:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8004f58:	6241      	str	r1, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8004f5a:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8004f5c:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8004f5e:	2302      	movs	r3, #2
 8004f60:	461a      	mov	r2, r3
 8004f62:	f7fd fbff 	bl	8002764 <HAL_SAI_InitProtocol>
 8004f66:	b998      	cbnz	r0, 8004f90 <MX_SAI2_Init+0x54>
  {
    Error_Handler();
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8004f68:	480e      	ldr	r0, [pc, #56]	; (8004fa4 <MX_SAI2_Init+0x68>)
 8004f6a:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <MX_SAI2_Init+0x6c>)
 8004f6c:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8004f72:	2301      	movs	r3, #1
 8004f74:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8004f76:	2100      	movs	r1, #0
 8004f78:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8004f7a:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8004f7c:	60c1      	str	r1, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8004f7e:	6241      	str	r1, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8004f80:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8004f82:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8004f84:	2302      	movs	r3, #2
 8004f86:	461a      	mov	r2, r3
 8004f88:	f7fd fbec 	bl	8002764 <HAL_SAI_InitProtocol>
 8004f8c:	b918      	cbnz	r0, 8004f96 <MX_SAI2_Init+0x5a>
  {
    Error_Handler();
  }

}
 8004f8e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004f90:	f7ff fefc 	bl	8004d8c <Error_Handler>
 8004f94:	e7e8      	b.n	8004f68 <MX_SAI2_Init+0x2c>
    Error_Handler();
 8004f96:	f7ff fef9 	bl	8004d8c <Error_Handler>
}
 8004f9a:	e7f8      	b.n	8004f8e <MX_SAI2_Init+0x52>
 8004f9c:	2000098c 	.word	0x2000098c
 8004fa0:	40015c04 	.word	0x40015c04
 8004fa4:	20000a10 	.word	0x20000a10
 8004fa8:	40015c24 	.word	0x40015c24

08004fac <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004fb2:	6802      	ldr	r2, [r0, #0]
 8004fb4:	4b4a      	ldr	r3, [pc, #296]	; (80050e0 <HAL_SAI_MspInit+0x134>)
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d005      	beq.n	8004fc6 <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
    }
    if(hsai->Instance==SAI2_Block_B)
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	4b49      	ldr	r3, [pc, #292]	; (80050e4 <HAL_SAI_MspInit+0x138>)
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d04d      	beq.n	800505e <HAL_SAI_MspInit+0xb2>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
    }
}
 8004fc2:	b009      	add	sp, #36	; 0x24
 8004fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI2_client == 0)
 8004fc6:	4b48      	ldr	r3, [pc, #288]	; (80050e8 <HAL_SAI_MspInit+0x13c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	b94b      	cbnz	r3, 8004fe0 <HAL_SAI_MspInit+0x34>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004fcc:	4a47      	ldr	r2, [pc, #284]	; (80050ec <HAL_SAI_MspInit+0x140>)
 8004fce:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004fd0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004fd4:	6451      	str	r1, [r2, #68]	; 0x44
 8004fd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fd8:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8004fdc:	9201      	str	r2, [sp, #4]
 8004fde:	9a01      	ldr	r2, [sp, #4]
    SAI2_client ++;
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	4a41      	ldr	r2, [pc, #260]	; (80050e8 <HAL_SAI_MspInit+0x13c>)
 8004fe4:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
 8004fe6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004fea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fec:	2702      	movs	r7, #2
 8004fee:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004ff6:	260a      	movs	r6, #10
 8004ff8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ffa:	a903      	add	r1, sp, #12
 8004ffc:	483c      	ldr	r0, [pc, #240]	; (80050f0 <HAL_SAI_MspInit+0x144>)
 8004ffe:	f7fb fddb 	bl	8000bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 8005002:	2301      	movs	r3, #1
 8005004:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005006:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005008:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800500a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800500c:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 800500e:	a903      	add	r1, sp, #12
 8005010:	4838      	ldr	r0, [pc, #224]	; (80050f4 <HAL_SAI_MspInit+0x148>)
 8005012:	f7fb fdd1 	bl	8000bb8 <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA2_Stream2;
 8005016:	4838      	ldr	r0, [pc, #224]	; (80050f8 <HAL_SAI_MspInit+0x14c>)
 8005018:	4b38      	ldr	r3, [pc, #224]	; (80050fc <HAL_SAI_MspInit+0x150>)
 800501a:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 800501c:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 8005020:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	6083      	str	r3, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8005026:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8005028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502c:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800502e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005032:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005038:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800503a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800503e:	61c3      	str	r3, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8005040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005044:	6203      	str	r3, [r0, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005046:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8005048:	f7fb fc14 	bl	8000874 <HAL_DMA_Init>
 800504c:	b920      	cbnz	r0, 8005058 <HAL_SAI_MspInit+0xac>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 800504e:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <HAL_SAI_MspInit+0x14c>)
 8005050:	6723      	str	r3, [r4, #112]	; 0x70
 8005052:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8005054:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005056:	e7b0      	b.n	8004fba <HAL_SAI_MspInit+0xe>
      Error_Handler();
 8005058:	f7ff fe98 	bl	8004d8c <Error_Handler>
 800505c:	e7f7      	b.n	800504e <HAL_SAI_MspInit+0xa2>
      if (SAI2_client == 0)
 800505e:	4b22      	ldr	r3, [pc, #136]	; (80050e8 <HAL_SAI_MspInit+0x13c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	b94b      	cbnz	r3, 8005078 <HAL_SAI_MspInit+0xcc>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005064:	4a21      	ldr	r2, [pc, #132]	; (80050ec <HAL_SAI_MspInit+0x140>)
 8005066:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005068:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800506c:	6451      	str	r1, [r2, #68]	; 0x44
 800506e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005070:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005074:	9202      	str	r2, [sp, #8]
 8005076:	9a02      	ldr	r2, [sp, #8]
    SAI2_client ++;
 8005078:	3301      	adds	r3, #1
 800507a:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <HAL_SAI_MspInit+0x13c>)
 800507c:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
 800507e:	2301      	movs	r3, #1
 8005080:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005082:	2302      	movs	r3, #2
 8005084:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005086:	2500      	movs	r5, #0
 8005088:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800508a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800508c:	230a      	movs	r3, #10
 800508e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8005090:	a903      	add	r1, sp, #12
 8005092:	481b      	ldr	r0, [pc, #108]	; (8005100 <HAL_SAI_MspInit+0x154>)
 8005094:	f7fb fd90 	bl	8000bb8 <HAL_GPIO_Init>
    hdma_sai2_b.Instance = DMA2_Stream6;
 8005098:	481a      	ldr	r0, [pc, #104]	; (8005104 <HAL_SAI_MspInit+0x158>)
 800509a:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <HAL_SAI_MspInit+0x15c>)
 800509c:	6003      	str	r3, [r0, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 800509e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80050a2:	6043      	str	r3, [r0, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050a4:	6085      	str	r5, [r0, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80050a6:	60c5      	str	r5, [r0, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80050a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ac:	6103      	str	r3, [r0, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050b2:	6143      	str	r3, [r0, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050b8:	6183      	str	r3, [r0, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80050ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050be:	61c3      	str	r3, [r0, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80050c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050c4:	6203      	str	r3, [r0, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050c6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80050c8:	f7fb fbd4 	bl	8000874 <HAL_DMA_Init>
 80050cc:	b920      	cbnz	r0, 80050d8 <HAL_SAI_MspInit+0x12c>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <HAL_SAI_MspInit+0x158>)
 80050d0:	6723      	str	r3, [r4, #112]	; 0x70
 80050d2:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80050d4:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80050d6:	e774      	b.n	8004fc2 <HAL_SAI_MspInit+0x16>
      Error_Handler();
 80050d8:	f7ff fe58 	bl	8004d8c <Error_Handler>
 80050dc:	e7f7      	b.n	80050ce <HAL_SAI_MspInit+0x122>
 80050de:	bf00      	nop
 80050e0:	40015c04 	.word	0x40015c04
 80050e4:	40015c24 	.word	0x40015c24
 80050e8:	200008c8 	.word	0x200008c8
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40020c00 	.word	0x40020c00
 80050f4:	40021000 	.word	0x40021000
 80050f8:	200008cc 	.word	0x200008cc
 80050fc:	40026440 	.word	0x40026440
 8005100:	40020000 	.word	0x40020000
 8005104:	2000092c 	.word	0x2000092c
 8005108:	400264a0 	.word	0x400264a0

0800510c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800510c:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 800510e:	4810      	ldr	r0, [pc, #64]	; (8005150 <MX_SPI1_Init+0x44>)
 8005110:	4b10      	ldr	r3, [pc, #64]	; (8005154 <MX_SPI1_Init+0x48>)
 8005112:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005114:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005118:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800511a:	2300      	movs	r3, #0
 800511c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800511e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005122:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005124:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005126:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800512e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005130:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005132:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005134:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005136:	2207      	movs	r2, #7
 8005138:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800513a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800513c:	2308      	movs	r3, #8
 800513e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005140:	f7fd fbfa 	bl	8002938 <HAL_SPI_Init>
 8005144:	b900      	cbnz	r0, 8005148 <MX_SPI1_Init+0x3c>
  {
    Error_Handler();
  }

}
 8005146:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005148:	f7ff fe20 	bl	8004d8c <Error_Handler>
}
 800514c:	e7fb      	b.n	8005146 <MX_SPI1_Init+0x3a>
 800514e:	bf00      	nop
 8005150:	20000b54 	.word	0x20000b54
 8005154:	40013000 	.word	0x40013000

08005158 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005158:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 800515a:	4810      	ldr	r0, [pc, #64]	; (800519c <MX_SPI2_Init+0x44>)
 800515c:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <MX_SPI2_Init+0x48>)
 800515e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005160:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005164:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005166:	2300      	movs	r3, #0
 8005168:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800516a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800516e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005170:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005172:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005178:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800517a:	2220      	movs	r2, #32
 800517c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800517e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005180:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005182:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005184:	2207      	movs	r2, #7
 8005186:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005188:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800518a:	2308      	movs	r3, #8
 800518c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800518e:	f7fd fbd3 	bl	8002938 <HAL_SPI_Init>
 8005192:	b900      	cbnz	r0, 8005196 <MX_SPI2_Init+0x3e>
  {
    Error_Handler();
  }

}
 8005194:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005196:	f7ff fdf9 	bl	8004d8c <Error_Handler>
}
 800519a:	e7fb      	b.n	8005194 <MX_SPI2_Init+0x3c>
 800519c:	20000bb8 	.word	0x20000bb8
 80051a0:	40003800 	.word	0x40003800

080051a4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80051a4:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 80051a6:	4810      	ldr	r0, [pc, #64]	; (80051e8 <MX_SPI3_Init+0x44>)
 80051a8:	4b10      	ldr	r3, [pc, #64]	; (80051ec <MX_SPI3_Init+0x48>)
 80051aa:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80051ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80051b0:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80051b2:	2300      	movs	r3, #0
 80051b4:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80051b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80051ba:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80051bc:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80051be:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80051c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c4:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80051c6:	2210      	movs	r2, #16
 80051c8:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80051ca:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80051cc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ce:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80051d0:	2207      	movs	r2, #7
 80051d2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80051d4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80051d6:	2308      	movs	r3, #8
 80051d8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80051da:	f7fd fbad 	bl	8002938 <HAL_SPI_Init>
 80051de:	b900      	cbnz	r0, 80051e2 <MX_SPI3_Init+0x3e>
  {
    Error_Handler();
  }

}
 80051e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80051e2:	f7ff fdd3 	bl	8004d8c <Error_Handler>
}
 80051e6:	e7fb      	b.n	80051e0 <MX_SPI3_Init+0x3c>
 80051e8:	20000c1c 	.word	0x20000c1c
 80051ec:	40003c00 	.word	0x40003c00

080051f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80051f0:	b530      	push	{r4, r5, lr}
 80051f2:	b08d      	sub	sp, #52	; 0x34
 80051f4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f6:	2300      	movs	r3, #0
 80051f8:	9307      	str	r3, [sp, #28]
 80051fa:	9308      	str	r3, [sp, #32]
 80051fc:	9309      	str	r3, [sp, #36]	; 0x24
 80051fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005200:	930b      	str	r3, [sp, #44]	; 0x2c
  if(spiHandle->Instance==SPI1)
 8005202:	6803      	ldr	r3, [r0, #0]
 8005204:	4a56      	ldr	r2, [pc, #344]	; (8005360 <HAL_SPI_MspInit+0x170>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d007      	beq.n	800521a <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 800520a:	4a56      	ldr	r2, [pc, #344]	; (8005364 <HAL_SPI_MspInit+0x174>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d045      	beq.n	800529c <HAL_SPI_MspInit+0xac>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8005210:	4a55      	ldr	r2, [pc, #340]	; (8005368 <HAL_SPI_MspInit+0x178>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d063      	beq.n	80052de <HAL_SPI_MspInit+0xee>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005216:	b00d      	add	sp, #52	; 0x34
 8005218:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800521a:	4b54      	ldr	r3, [pc, #336]	; (800536c <HAL_SPI_MspInit+0x17c>)
 800521c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800521e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005222:	645a      	str	r2, [r3, #68]	; 0x44
 8005224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005226:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800522a:	9201      	str	r2, [sp, #4]
 800522c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800522e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	631a      	str	r2, [r3, #48]	; 0x30
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	9302      	str	r3, [sp, #8]
 800523e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8005240:	23e0      	movs	r3, #224	; 0xe0
 8005242:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005244:	2302      	movs	r3, #2
 8005246:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005248:	2503      	movs	r5, #3
 800524a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800524c:	2305      	movs	r3, #5
 800524e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005250:	a907      	add	r1, sp, #28
 8005252:	4847      	ldr	r0, [pc, #284]	; (8005370 <HAL_SPI_MspInit+0x180>)
 8005254:	f7fb fcb0 	bl	8000bb8 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8005258:	4846      	ldr	r0, [pc, #280]	; (8005374 <HAL_SPI_MspInit+0x184>)
 800525a:	4b47      	ldr	r3, [pc, #284]	; (8005378 <HAL_SPI_MspInit+0x188>)
 800525c:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800525e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8005262:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005264:	2340      	movs	r3, #64	; 0x40
 8005266:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005268:	2300      	movs	r3, #0
 800526a:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800526c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005270:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005272:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005274:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005276:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005278:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800527c:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800527e:	2204      	movs	r2, #4
 8005280:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005282:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005284:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005286:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005288:	f7fb faf4 	bl	8000874 <HAL_DMA_Init>
 800528c:	b918      	cbnz	r0, 8005296 <HAL_SPI_MspInit+0xa6>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800528e:	4b39      	ldr	r3, [pc, #228]	; (8005374 <HAL_SPI_MspInit+0x184>)
 8005290:	6563      	str	r3, [r4, #84]	; 0x54
 8005292:	639c      	str	r4, [r3, #56]	; 0x38
 8005294:	e7bf      	b.n	8005216 <HAL_SPI_MspInit+0x26>
      Error_Handler();
 8005296:	f7ff fd79 	bl	8004d8c <Error_Handler>
 800529a:	e7f8      	b.n	800528e <HAL_SPI_MspInit+0x9e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800529c:	4b33      	ldr	r3, [pc, #204]	; (800536c <HAL_SPI_MspInit+0x17c>)
 800529e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
 80052a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80052ac:	9203      	str	r2, [sp, #12]
 80052ae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b2:	f042 0202 	orr.w	r2, r2, #2
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	9304      	str	r3, [sp, #16]
 80052c0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = TS_SCK_Pin|TS_MISO_Pin|TS_MOSI_Pin;
 80052c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80052c6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c8:	2302      	movs	r3, #2
 80052ca:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052cc:	2303      	movs	r3, #3
 80052ce:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052d0:	2305      	movs	r3, #5
 80052d2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d4:	a907      	add	r1, sp, #28
 80052d6:	4829      	ldr	r0, [pc, #164]	; (800537c <HAL_SPI_MspInit+0x18c>)
 80052d8:	f7fb fc6e 	bl	8000bb8 <HAL_GPIO_Init>
 80052dc:	e79b      	b.n	8005216 <HAL_SPI_MspInit+0x26>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80052de:	4b23      	ldr	r3, [pc, #140]	; (800536c <HAL_SPI_MspInit+0x17c>)
 80052e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40
 80052e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ea:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80052ee:	9205      	str	r2, [sp, #20]
 80052f0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f4:	f042 0204 	orr.w	r2, r2, #4
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	9306      	str	r3, [sp, #24]
 8005302:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GENSPI_SCK_Pin|GENSPI_MISO_Pin|GENSPI_MOSI_Pin;
 8005304:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005308:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530a:	2302      	movs	r3, #2
 800530c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800530e:	2503      	movs	r5, #3
 8005310:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005312:	2306      	movs	r3, #6
 8005314:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005316:	a907      	add	r1, sp, #28
 8005318:	4819      	ldr	r0, [pc, #100]	; (8005380 <HAL_SPI_MspInit+0x190>)
 800531a:	f7fb fc4d 	bl	8000bb8 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800531e:	4819      	ldr	r0, [pc, #100]	; (8005384 <HAL_SPI_MspInit+0x194>)
 8005320:	4b19      	ldr	r3, [pc, #100]	; (8005388 <HAL_SPI_MspInit+0x198>)
 8005322:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8005324:	2300      	movs	r3, #0
 8005326:	6043      	str	r3, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005328:	2240      	movs	r2, #64	; 0x40
 800532a:	6082      	str	r2, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800532c:	60c3      	str	r3, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800532e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005332:	6102      	str	r2, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005334:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005336:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8005338:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800533a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800533e:	6202      	str	r2, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005340:	2204      	movs	r2, #4
 8005342:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005344:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005346:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005348:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800534a:	f7fb fa93 	bl	8000874 <HAL_DMA_Init>
 800534e:	b918      	cbnz	r0, 8005358 <HAL_SPI_MspInit+0x168>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <HAL_SPI_MspInit+0x194>)
 8005352:	6563      	str	r3, [r4, #84]	; 0x54
 8005354:	639c      	str	r4, [r3, #56]	; 0x38
}
 8005356:	e75e      	b.n	8005216 <HAL_SPI_MspInit+0x26>
      Error_Handler();
 8005358:	f7ff fd18 	bl	8004d8c <Error_Handler>
 800535c:	e7f8      	b.n	8005350 <HAL_SPI_MspInit+0x160>
 800535e:	bf00      	nop
 8005360:	40013000 	.word	0x40013000
 8005364:	40003800 	.word	0x40003800
 8005368:	40003c00 	.word	0x40003c00
 800536c:	40023800 	.word	0x40023800
 8005370:	40020000 	.word	0x40020000
 8005374:	20000a94 	.word	0x20000a94
 8005378:	40026458 	.word	0x40026458
 800537c:	40020400 	.word	0x40020400
 8005380:	40020800 	.word	0x40020800
 8005384:	20000af4 	.word	0x20000af4
 8005388:	40026088 	.word	0x40026088

0800538c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800538c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800538e:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <HAL_MspInit+0x2c>)
 8005390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005392:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005396:	641a      	str	r2, [r3, #64]	; 0x40
 8005398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800539a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800539e:	9200      	str	r2, [sp, #0]
 80053a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053a8:	645a      	str	r2, [r3, #68]	; 0x44
 80053aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053b4:	b002      	add	sp, #8
 80053b6:	4770      	bx	lr
 80053b8:	40023800 	.word	0x40023800

080053bc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80053bc:	4770      	bx	lr

080053be <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053be:	e7fe      	b.n	80053be <HardFault_Handler>

080053c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053c0:	e7fe      	b.n	80053c0 <MemManage_Handler>

080053c2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053c2:	e7fe      	b.n	80053c2 <BusFault_Handler>

080053c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053c4:	e7fe      	b.n	80053c4 <UsageFault_Handler>

080053c6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053c6:	4770      	bx	lr

080053c8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053c8:	4770      	bx	lr

080053ca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053ca:	4770      	bx	lr

080053cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053ce:	f7fb f943 	bl	8000658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053d2:	bd08      	pop	{r3, pc}

080053d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80053d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80053d6:	4802      	ldr	r0, [pc, #8]	; (80053e0 <DMA1_Stream0_IRQHandler+0xc>)
 80053d8:	f7fb fb00 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80053dc:	bd08      	pop	{r3, pc}
 80053de:	bf00      	nop
 80053e0:	200007bc 	.word	0x200007bc

080053e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80053e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80053e6:	4802      	ldr	r0, [pc, #8]	; (80053f0 <DMA1_Stream5_IRQHandler+0xc>)
 80053e8:	f7fb faf8 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80053ec:	bd08      	pop	{r3, pc}
 80053ee:	bf00      	nop
 80053f0:	20000af4 	.word	0x20000af4

080053f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80053f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80053f6:	2020      	movs	r0, #32
 80053f8:	f7fb fce6 	bl	8000dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80053fc:	bd08      	pop	{r3, pc}
	...

08005400 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005400:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005402:	4802      	ldr	r0, [pc, #8]	; (800540c <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 8005404:	f7fd fed2 	bl	80031ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005408:	bd08      	pop	{r3, pc}
 800540a:	bf00      	nop
 800540c:	20000ce0 	.word	0x20000ce0

08005410 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005410:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005412:	4802      	ldr	r0, [pc, #8]	; (800541c <TIM3_IRQHandler+0xc>)
 8005414:	f7fd feca 	bl	80031ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005418:	bd08      	pop	{r3, pc}
 800541a:	bf00      	nop
 800541c:	20000d90 	.word	0x20000d90

08005420 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005422:	4802      	ldr	r0, [pc, #8]	; (800542c <I2C1_EV_IRQHandler+0xc>)
 8005424:	f7fb fd88 	bl	8000f38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005428:	bd08      	pop	{r3, pc}
 800542a:	bf00      	nop
 800542c:	2000087c 	.word	0x2000087c

08005430 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005430:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005432:	4802      	ldr	r0, [pc, #8]	; (800543c <I2C1_ER_IRQHandler+0xc>)
 8005434:	f7fb fff1 	bl	800141a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005438:	bd08      	pop	{r3, pc}
 800543a:	bf00      	nop
 800543c:	2000087c 	.word	0x2000087c

08005440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005440:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005442:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005446:	f7fb fcbf 	bl	8000dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800544a:	bd08      	pop	{r3, pc}

0800544c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800544c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800544e:	4802      	ldr	r0, [pc, #8]	; (8005458 <DMA1_Stream7_IRQHandler+0xc>)
 8005450:	f7fb fac4 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005454:	bd08      	pop	{r3, pc}
 8005456:	bf00      	nop
 8005458:	2000081c 	.word	0x2000081c

0800545c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800545c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800545e:	4802      	ldr	r0, [pc, #8]	; (8005468 <DMA2_Stream1_IRQHandler+0xc>)
 8005460:	f7fb fabc 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005464:	bd08      	pop	{r3, pc}
 8005466:	bf00      	nop
 8005468:	20000c80 	.word	0x20000c80

0800546c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800546c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800546e:	4802      	ldr	r0, [pc, #8]	; (8005478 <DMA2_Stream2_IRQHandler+0xc>)
 8005470:	f7fb fab4 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005474:	bd08      	pop	{r3, pc}
 8005476:	bf00      	nop
 8005478:	200008cc 	.word	0x200008cc

0800547c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800547c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800547e:	4802      	ldr	r0, [pc, #8]	; (8005488 <DMA2_Stream3_IRQHandler+0xc>)
 8005480:	f7fb faac 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005484:	bd08      	pop	{r3, pc}
 8005486:	bf00      	nop
 8005488:	20000a94 	.word	0x20000a94

0800548c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800548c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800548e:	4802      	ldr	r0, [pc, #8]	; (8005498 <DMA2_Stream6_IRQHandler+0xc>)
 8005490:	f7fb faa4 	bl	80009dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005494:	bd08      	pop	{r3, pc}
 8005496:	bf00      	nop
 8005498:	2000092c 	.word	0x2000092c

0800549c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800549c:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800549e:	4a0f      	ldr	r2, [pc, #60]	; (80054dc <SystemInit+0x40>)
 80054a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <SystemInit+0x44>)
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	f041 0101 	orr.w	r1, r1, #1
 80054b4:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80054b6:	2000      	movs	r0, #0
 80054b8:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80054ba:	681c      	ldr	r4, [r3, #0]
 80054bc:	4909      	ldr	r1, [pc, #36]	; (80054e4 <SystemInit+0x48>)
 80054be:	4021      	ands	r1, r4
 80054c0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80054c2:	4909      	ldr	r1, [pc, #36]	; (80054e8 <SystemInit+0x4c>)
 80054c4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80054c6:	6819      	ldr	r1, [r3, #0]
 80054c8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80054cc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80054ce:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054d4:	6093      	str	r3, [r2, #8]
#endif
}
 80054d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	e000ed00 	.word	0xe000ed00
 80054e0:	40023800 	.word	0x40023800
 80054e4:	fef6ffff 	.word	0xfef6ffff
 80054e8:	24003010 	.word	0x24003010

080054ec <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80054ec:	b500      	push	{lr}
 80054ee:	b091      	sub	sp, #68	; 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054f0:	2300      	movs	r3, #0
 80054f2:	930c      	str	r3, [sp, #48]	; 0x30
 80054f4:	930d      	str	r3, [sp, #52]	; 0x34
 80054f6:	930e      	str	r3, [sp, #56]	; 0x38
 80054f8:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80054fa:	9307      	str	r3, [sp, #28]
 80054fc:	9308      	str	r3, [sp, #32]
 80054fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005500:	930a      	str	r3, [sp, #40]	; 0x28
 8005502:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005504:	9304      	str	r3, [sp, #16]
 8005506:	9305      	str	r3, [sp, #20]
 8005508:	9306      	str	r3, [sp, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	9302      	str	r3, [sp, #8]
 8005510:	9303      	str	r3, [sp, #12]

  htim3.Instance = TIM3;
 8005512:	482e      	ldr	r0, [pc, #184]	; (80055cc <MX_TIM3_Init+0xe0>)
 8005514:	4a2e      	ldr	r2, [pc, #184]	; (80055d0 <MX_TIM3_Init+0xe4>)
 8005516:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 107;
 8005518:	226b      	movs	r2, #107	; 0x6b
 800551a:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800551c:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 3599;
 800551e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8005522:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005524:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005526:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005528:	f7fe fab6 	bl	8003a98 <HAL_TIM_Base_Init>
 800552c:	2800      	cmp	r0, #0
 800552e:	d138      	bne.n	80055a2 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005534:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005536:	a90c      	add	r1, sp, #48	; 0x30
 8005538:	4824      	ldr	r0, [pc, #144]	; (80055cc <MX_TIM3_Init+0xe0>)
 800553a:	f7fe f93d 	bl	80037b8 <HAL_TIM_ConfigClockSource>
 800553e:	2800      	cmp	r0, #0
 8005540:	d132      	bne.n	80055a8 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005542:	4822      	ldr	r0, [pc, #136]	; (80055cc <MX_TIM3_Init+0xe0>)
 8005544:	f7fe faf0 	bl	8003b28 <HAL_TIM_IC_Init>
 8005548:	2800      	cmp	r0, #0
 800554a:	d130      	bne.n	80055ae <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800554c:	2304      	movs	r3, #4
 800554e:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8005550:	2350      	movs	r3, #80	; 0x50
 8005552:	9308      	str	r3, [sp, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005554:	2300      	movs	r3, #0
 8005556:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8005558:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800555a:	a907      	add	r1, sp, #28
 800555c:	481b      	ldr	r0, [pc, #108]	; (80055cc <MX_TIM3_Init+0xe0>)
 800555e:	f7fe f9e3 	bl	8003928 <HAL_TIM_SlaveConfigSynchro>
 8005562:	bb38      	cbnz	r0, 80055b4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005564:	2300      	movs	r3, #0
 8005566:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005568:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800556a:	a904      	add	r1, sp, #16
 800556c:	4817      	ldr	r0, [pc, #92]	; (80055cc <MX_TIM3_Init+0xe0>)
 800556e:	f7fe faff 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 8005572:	bb10      	cbnz	r0, 80055ba <MX_TIM3_Init+0xce>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005574:	2200      	movs	r2, #0
 8005576:	9200      	str	r2, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005578:	2301      	movs	r3, #1
 800557a:	9301      	str	r3, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800557c:	9202      	str	r2, [sp, #8]
  sConfigIC.ICFilter = 0;
 800557e:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005580:	4669      	mov	r1, sp
 8005582:	4812      	ldr	r0, [pc, #72]	; (80055cc <MX_TIM3_Init+0xe0>)
 8005584:	f7fe f8aa 	bl	80036dc <HAL_TIM_IC_ConfigChannel>
 8005588:	b9d0      	cbnz	r0, 80055c0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800558a:	2302      	movs	r3, #2
 800558c:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800558e:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005590:	2204      	movs	r2, #4
 8005592:	4669      	mov	r1, sp
 8005594:	480d      	ldr	r0, [pc, #52]	; (80055cc <MX_TIM3_Init+0xe0>)
 8005596:	f7fe f8a1 	bl	80036dc <HAL_TIM_IC_ConfigChannel>
 800559a:	b9a0      	cbnz	r0, 80055c6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
  }

}
 800559c:	b011      	add	sp, #68	; 0x44
 800559e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80055a2:	f7ff fbf3 	bl	8004d8c <Error_Handler>
 80055a6:	e7c3      	b.n	8005530 <MX_TIM3_Init+0x44>
    Error_Handler();
 80055a8:	f7ff fbf0 	bl	8004d8c <Error_Handler>
 80055ac:	e7c9      	b.n	8005542 <MX_TIM3_Init+0x56>
    Error_Handler();
 80055ae:	f7ff fbed 	bl	8004d8c <Error_Handler>
 80055b2:	e7cb      	b.n	800554c <MX_TIM3_Init+0x60>
    Error_Handler();
 80055b4:	f7ff fbea 	bl	8004d8c <Error_Handler>
 80055b8:	e7d4      	b.n	8005564 <MX_TIM3_Init+0x78>
    Error_Handler();
 80055ba:	f7ff fbe7 	bl	8004d8c <Error_Handler>
 80055be:	e7d9      	b.n	8005574 <MX_TIM3_Init+0x88>
    Error_Handler();
 80055c0:	f7ff fbe4 	bl	8004d8c <Error_Handler>
 80055c4:	e7e1      	b.n	800558a <MX_TIM3_Init+0x9e>
    Error_Handler();
 80055c6:	f7ff fbe1 	bl	8004d8c <Error_Handler>
}
 80055ca:	e7e7      	b.n	800559c <MX_TIM3_Init+0xb0>
 80055cc:	20000d90 	.word	0x20000d90
 80055d0:	40000400 	.word	0x40000400

080055d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 80055d4:	6802      	ldr	r2, [r0, #0]
 80055d6:	4b21      	ldr	r3, [pc, #132]	; (800565c <HAL_TIM_PWM_MspInit+0x88>)
 80055d8:	429a      	cmp	r2, r3
 80055da:	d000      	beq.n	80055de <HAL_TIM_PWM_MspInit+0xa>
 80055dc:	4770      	bx	lr
{
 80055de:	b510      	push	{r4, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055e4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80055e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	9301      	str	r3, [sp, #4]
 80055f8:	9b01      	ldr	r3, [sp, #4]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80055fa:	4819      	ldr	r0, [pc, #100]	; (8005660 <HAL_TIM_PWM_MspInit+0x8c>)
 80055fc:	4b19      	ldr	r3, [pc, #100]	; (8005664 <HAL_TIM_PWM_MspInit+0x90>)
 80055fe:	6003      	str	r3, [r0, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8005600:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8005604:	6043      	str	r3, [r0, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005606:	2340      	movs	r3, #64	; 0x40
 8005608:	6083      	str	r3, [r0, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800560a:	2300      	movs	r3, #0
 800560c:	60c3      	str	r3, [r0, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800560e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005612:	6102      	str	r2, [r0, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005618:	6142      	str	r2, [r0, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800561a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800561e:	6182      	str	r2, [r0, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8005620:	61c3      	str	r3, [r0, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005626:	6202      	str	r2, [r0, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005628:	2204      	movs	r2, #4
 800562a:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800562c:	2203      	movs	r2, #3
 800562e:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8005630:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005632:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8005634:	f7fb f91e 	bl	8000874 <HAL_DMA_Init>
 8005638:	b960      	cbnz	r0, 8005654 <HAL_TIM_PWM_MspInit+0x80>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <HAL_TIM_PWM_MspInit+0x8c>)
 800563c:	6263      	str	r3, [r4, #36]	; 0x24
 800563e:	639c      	str	r4, [r3, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005640:	2200      	movs	r2, #0
 8005642:	4611      	mov	r1, r2
 8005644:	201a      	movs	r0, #26
 8005646:	f7fb f83f 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800564a:	201a      	movs	r0, #26
 800564c:	f7fb f872 	bl	8000734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005650:	b002      	add	sp, #8
 8005652:	bd10      	pop	{r4, pc}
      Error_Handler();
 8005654:	f7ff fb9a 	bl	8004d8c <Error_Handler>
 8005658:	e7ef      	b.n	800563a <HAL_TIM_PWM_MspInit+0x66>
 800565a:	bf00      	nop
 800565c:	40010000 	.word	0x40010000
 8005660:	20000c80 	.word	0x20000c80
 8005664:	40026428 	.word	0x40026428

08005668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005668:	b500      	push	{lr}
 800566a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800566c:	2300      	movs	r3, #0
 800566e:	9303      	str	r3, [sp, #12]
 8005670:	9304      	str	r3, [sp, #16]
 8005672:	9305      	str	r3, [sp, #20]
 8005674:	9306      	str	r3, [sp, #24]
 8005676:	9307      	str	r3, [sp, #28]
  if(tim_baseHandle->Instance==TIM3)
 8005678:	6802      	ldr	r2, [r0, #0]
 800567a:	4b16      	ldr	r3, [pc, #88]	; (80056d4 <HAL_TIM_Base_MspInit+0x6c>)
 800567c:	429a      	cmp	r2, r3
 800567e:	d002      	beq.n	8005686 <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005680:	b009      	add	sp, #36	; 0x24
 8005682:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005686:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 800568a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800568c:	f042 0202 	orr.w	r2, r2, #2
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
 8005692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005694:	f002 0202 	and.w	r2, r2, #2
 8005698:	9201      	str	r2, [sp, #4]
 800569a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800569c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569e:	f042 0204 	orr.w	r2, r2, #4
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	9302      	str	r3, [sp, #8]
 80056ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80056ae:	2340      	movs	r3, #64	; 0x40
 80056b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b2:	2302      	movs	r3, #2
 80056b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80056b6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056b8:	a903      	add	r1, sp, #12
 80056ba:	4807      	ldr	r0, [pc, #28]	; (80056d8 <HAL_TIM_Base_MspInit+0x70>)
 80056bc:	f7fb fa7c 	bl	8000bb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80056c0:	2200      	movs	r2, #0
 80056c2:	4611      	mov	r1, r2
 80056c4:	201d      	movs	r0, #29
 80056c6:	f7fa ffff 	bl	80006c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80056ca:	201d      	movs	r0, #29
 80056cc:	f7fb f832 	bl	8000734 <HAL_NVIC_EnableIRQ>
}
 80056d0:	e7d6      	b.n	8005680 <HAL_TIM_Base_MspInit+0x18>
 80056d2:	bf00      	nop
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40020800 	.word	0x40020800

080056dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80056dc:	b500      	push	{lr}
 80056de:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e0:	2300      	movs	r3, #0
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	9302      	str	r3, [sp, #8]
 80056e6:	9303      	str	r3, [sp, #12]
 80056e8:	9304      	str	r3, [sp, #16]
 80056ea:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 80056ec:	6802      	ldr	r2, [r0, #0]
 80056ee:	4b0f      	ldr	r3, [pc, #60]	; (800572c <HAL_TIM_MspPostInit+0x50>)
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d002      	beq.n	80056fa <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80056f4:	b007      	add	sp, #28
 80056f6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80056fa:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80056fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005700:	f042 0210 	orr.w	r2, r2, #16
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
 8005710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005714:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005716:	2302      	movs	r3, #2
 8005718:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800571a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800571c:	2301      	movs	r3, #1
 800571e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 8005720:	a901      	add	r1, sp, #4
 8005722:	4803      	ldr	r0, [pc, #12]	; (8005730 <HAL_TIM_MspPostInit+0x54>)
 8005724:	f7fb fa48 	bl	8000bb8 <HAL_GPIO_Init>
}
 8005728:	e7e4      	b.n	80056f4 <HAL_TIM_MspPostInit+0x18>
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40021000 	.word	0x40021000

08005734 <MX_TIM1_Init>:
{
 8005734:	b510      	push	{r4, lr}
 8005736:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005738:	2400      	movs	r4, #0
 800573a:	9413      	str	r4, [sp, #76]	; 0x4c
 800573c:	9414      	str	r4, [sp, #80]	; 0x50
 800573e:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005740:	940c      	str	r4, [sp, #48]	; 0x30
 8005742:	940d      	str	r4, [sp, #52]	; 0x34
 8005744:	940e      	str	r4, [sp, #56]	; 0x38
 8005746:	940f      	str	r4, [sp, #60]	; 0x3c
 8005748:	9410      	str	r4, [sp, #64]	; 0x40
 800574a:	9411      	str	r4, [sp, #68]	; 0x44
 800574c:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800574e:	222c      	movs	r2, #44	; 0x2c
 8005750:	4621      	mov	r1, r4
 8005752:	a801      	add	r0, sp, #4
 8005754:	f000 f8b8 	bl	80058c8 <memset>
  htim1.Instance = TIM1;
 8005758:	4826      	ldr	r0, [pc, #152]	; (80057f4 <MX_TIM1_Init+0xc0>)
 800575a:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <MX_TIM1_Init+0xc4>)
 800575c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800575e:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005760:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 269;
 8005762:	f240 130d 	movw	r3, #269	; 0x10d
 8005766:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005768:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800576a:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005770:	f7fe f9b6 	bl	8003ae0 <HAL_TIM_PWM_Init>
 8005774:	2800      	cmp	r0, #0
 8005776:	d131      	bne.n	80057dc <MX_TIM1_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005778:	2300      	movs	r3, #0
 800577a:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800577c:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800577e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005780:	a913      	add	r1, sp, #76	; 0x4c
 8005782:	481c      	ldr	r0, [pc, #112]	; (80057f4 <MX_TIM1_Init+0xc0>)
 8005784:	f7fe f9f4 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 8005788:	2800      	cmp	r0, #0
 800578a:	d12a      	bne.n	80057e2 <MX_TIM1_Init+0xae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800578c:	2360      	movs	r3, #96	; 0x60
 800578e:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8005790:	2200      	movs	r2, #0
 8005792:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005794:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005796:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005798:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800579a:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800579c:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800579e:	a90c      	add	r1, sp, #48	; 0x30
 80057a0:	4814      	ldr	r0, [pc, #80]	; (80057f4 <MX_TIM1_Init+0xc0>)
 80057a2:	f7fd feb7 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 80057a6:	b9f8      	cbnz	r0, 80057e8 <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80057a8:	2300      	movs	r3, #0
 80057aa:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80057ac:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80057ae:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80057b0:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80057b2:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80057b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057b8:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80057ba:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80057bc:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80057be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057c2:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80057c4:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80057c6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80057c8:	a901      	add	r1, sp, #4
 80057ca:	480a      	ldr	r0, [pc, #40]	; (80057f4 <MX_TIM1_Init+0xc0>)
 80057cc:	f7fe fa04 	bl	8003bd8 <HAL_TIMEx_ConfigBreakDeadTime>
 80057d0:	b968      	cbnz	r0, 80057ee <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 80057d2:	4808      	ldr	r0, [pc, #32]	; (80057f4 <MX_TIM1_Init+0xc0>)
 80057d4:	f7ff ff82 	bl	80056dc <HAL_TIM_MspPostInit>
}
 80057d8:	b016      	add	sp, #88	; 0x58
 80057da:	bd10      	pop	{r4, pc}
    Error_Handler();
 80057dc:	f7ff fad6 	bl	8004d8c <Error_Handler>
 80057e0:	e7ca      	b.n	8005778 <MX_TIM1_Init+0x44>
    Error_Handler();
 80057e2:	f7ff fad3 	bl	8004d8c <Error_Handler>
 80057e6:	e7d1      	b.n	800578c <MX_TIM1_Init+0x58>
    Error_Handler();
 80057e8:	f7ff fad0 	bl	8004d8c <Error_Handler>
 80057ec:	e7dc      	b.n	80057a8 <MX_TIM1_Init+0x74>
    Error_Handler();
 80057ee:	f7ff facd 	bl	8004d8c <Error_Handler>
 80057f2:	e7ee      	b.n	80057d2 <MX_TIM1_Init+0x9e>
 80057f4:	20000ce0 	.word	0x20000ce0
 80057f8:	40010000 	.word	0x40010000

080057fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80057fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005834 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005800:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005802:	e003      	b.n	800580c <LoopCopyDataInit>

08005804 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005804:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005806:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005808:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800580a:	3104      	adds	r1, #4

0800580c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800580c:	480b      	ldr	r0, [pc, #44]	; (800583c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005810:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005812:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005814:	d3f6      	bcc.n	8005804 <CopyDataInit>
  ldr  r2, =_sbss
 8005816:	4a0b      	ldr	r2, [pc, #44]	; (8005844 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005818:	e002      	b.n	8005820 <LoopFillZerobss>

0800581a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800581a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800581c:	f842 3b04 	str.w	r3, [r2], #4

08005820 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005820:	4b09      	ldr	r3, [pc, #36]	; (8005848 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005822:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005824:	d3f9      	bcc.n	800581a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005826:	f7ff fe39 	bl	800549c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800582a:	f000 f819 	bl	8005860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800582e:	f7ff fb2f 	bl	8004e90 <main>
  bx  lr    
 8005832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005834:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005838:	08009198 	.word	0x08009198
  ldr  r0, =_sdata
 800583c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005840:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8005844:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005848:	20000e54 	.word	0x20000e54

0800584c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800584c:	e7fe      	b.n	800584c <ADC_IRQHandler>
	...

08005850 <calloc>:
 8005850:	4b02      	ldr	r3, [pc, #8]	; (800585c <calloc+0xc>)
 8005852:	460a      	mov	r2, r1
 8005854:	4601      	mov	r1, r0
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	f000 b83e 	b.w	80058d8 <_calloc_r>
 800585c:	20000010 	.word	0x20000010

08005860 <__libc_init_array>:
 8005860:	b570      	push	{r4, r5, r6, lr}
 8005862:	4d0d      	ldr	r5, [pc, #52]	; (8005898 <__libc_init_array+0x38>)
 8005864:	4c0d      	ldr	r4, [pc, #52]	; (800589c <__libc_init_array+0x3c>)
 8005866:	1b64      	subs	r4, r4, r5
 8005868:	10a4      	asrs	r4, r4, #2
 800586a:	2600      	movs	r6, #0
 800586c:	42a6      	cmp	r6, r4
 800586e:	d109      	bne.n	8005884 <__libc_init_array+0x24>
 8005870:	4d0b      	ldr	r5, [pc, #44]	; (80058a0 <__libc_init_array+0x40>)
 8005872:	4c0c      	ldr	r4, [pc, #48]	; (80058a4 <__libc_init_array+0x44>)
 8005874:	f002 feb2 	bl	80085dc <_init>
 8005878:	1b64      	subs	r4, r4, r5
 800587a:	10a4      	asrs	r4, r4, #2
 800587c:	2600      	movs	r6, #0
 800587e:	42a6      	cmp	r6, r4
 8005880:	d105      	bne.n	800588e <__libc_init_array+0x2e>
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	f855 3b04 	ldr.w	r3, [r5], #4
 8005888:	4798      	blx	r3
 800588a:	3601      	adds	r6, #1
 800588c:	e7ee      	b.n	800586c <__libc_init_array+0xc>
 800588e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005892:	4798      	blx	r3
 8005894:	3601      	adds	r6, #1
 8005896:	e7f2      	b.n	800587e <__libc_init_array+0x1e>
 8005898:	08009190 	.word	0x08009190
 800589c:	08009190 	.word	0x08009190
 80058a0:	08009190 	.word	0x08009190
 80058a4:	08009194 	.word	0x08009194

080058a8 <malloc>:
 80058a8:	4b02      	ldr	r3, [pc, #8]	; (80058b4 <malloc+0xc>)
 80058aa:	4601      	mov	r1, r0
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	f000 b895 	b.w	80059dc <_malloc_r>
 80058b2:	bf00      	nop
 80058b4:	20000010 	.word	0x20000010

080058b8 <free>:
 80058b8:	4b02      	ldr	r3, [pc, #8]	; (80058c4 <free+0xc>)
 80058ba:	4601      	mov	r1, r0
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	f000 b821 	b.w	8005904 <_free_r>
 80058c2:	bf00      	nop
 80058c4:	20000010 	.word	0x20000010

080058c8 <memset>:
 80058c8:	4402      	add	r2, r0
 80058ca:	4603      	mov	r3, r0
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d100      	bne.n	80058d2 <memset+0xa>
 80058d0:	4770      	bx	lr
 80058d2:	f803 1b01 	strb.w	r1, [r3], #1
 80058d6:	e7f9      	b.n	80058cc <memset+0x4>

080058d8 <_calloc_r>:
 80058d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058da:	fba1 2402 	umull	r2, r4, r1, r2
 80058de:	b94c      	cbnz	r4, 80058f4 <_calloc_r+0x1c>
 80058e0:	4611      	mov	r1, r2
 80058e2:	9201      	str	r2, [sp, #4]
 80058e4:	f000 f87a 	bl	80059dc <_malloc_r>
 80058e8:	9a01      	ldr	r2, [sp, #4]
 80058ea:	4605      	mov	r5, r0
 80058ec:	b930      	cbnz	r0, 80058fc <_calloc_r+0x24>
 80058ee:	4628      	mov	r0, r5
 80058f0:	b003      	add	sp, #12
 80058f2:	bd30      	pop	{r4, r5, pc}
 80058f4:	220c      	movs	r2, #12
 80058f6:	6002      	str	r2, [r0, #0]
 80058f8:	2500      	movs	r5, #0
 80058fa:	e7f8      	b.n	80058ee <_calloc_r+0x16>
 80058fc:	4621      	mov	r1, r4
 80058fe:	f7ff ffe3 	bl	80058c8 <memset>
 8005902:	e7f4      	b.n	80058ee <_calloc_r+0x16>

08005904 <_free_r>:
 8005904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005906:	2900      	cmp	r1, #0
 8005908:	d044      	beq.n	8005994 <_free_r+0x90>
 800590a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800590e:	9001      	str	r0, [sp, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f1a1 0404 	sub.w	r4, r1, #4
 8005916:	bfb8      	it	lt
 8005918:	18e4      	addlt	r4, r4, r3
 800591a:	f001 fbcb 	bl	80070b4 <__malloc_lock>
 800591e:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <_free_r+0x94>)
 8005920:	9801      	ldr	r0, [sp, #4]
 8005922:	6813      	ldr	r3, [r2, #0]
 8005924:	b933      	cbnz	r3, 8005934 <_free_r+0x30>
 8005926:	6063      	str	r3, [r4, #4]
 8005928:	6014      	str	r4, [r2, #0]
 800592a:	b003      	add	sp, #12
 800592c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005930:	f001 bbc6 	b.w	80070c0 <__malloc_unlock>
 8005934:	42a3      	cmp	r3, r4
 8005936:	d908      	bls.n	800594a <_free_r+0x46>
 8005938:	6825      	ldr	r5, [r4, #0]
 800593a:	1961      	adds	r1, r4, r5
 800593c:	428b      	cmp	r3, r1
 800593e:	bf01      	itttt	eq
 8005940:	6819      	ldreq	r1, [r3, #0]
 8005942:	685b      	ldreq	r3, [r3, #4]
 8005944:	1949      	addeq	r1, r1, r5
 8005946:	6021      	streq	r1, [r4, #0]
 8005948:	e7ed      	b.n	8005926 <_free_r+0x22>
 800594a:	461a      	mov	r2, r3
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	b10b      	cbz	r3, 8005954 <_free_r+0x50>
 8005950:	42a3      	cmp	r3, r4
 8005952:	d9fa      	bls.n	800594a <_free_r+0x46>
 8005954:	6811      	ldr	r1, [r2, #0]
 8005956:	1855      	adds	r5, r2, r1
 8005958:	42a5      	cmp	r5, r4
 800595a:	d10b      	bne.n	8005974 <_free_r+0x70>
 800595c:	6824      	ldr	r4, [r4, #0]
 800595e:	4421      	add	r1, r4
 8005960:	1854      	adds	r4, r2, r1
 8005962:	42a3      	cmp	r3, r4
 8005964:	6011      	str	r1, [r2, #0]
 8005966:	d1e0      	bne.n	800592a <_free_r+0x26>
 8005968:	681c      	ldr	r4, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	6053      	str	r3, [r2, #4]
 800596e:	4421      	add	r1, r4
 8005970:	6011      	str	r1, [r2, #0]
 8005972:	e7da      	b.n	800592a <_free_r+0x26>
 8005974:	d902      	bls.n	800597c <_free_r+0x78>
 8005976:	230c      	movs	r3, #12
 8005978:	6003      	str	r3, [r0, #0]
 800597a:	e7d6      	b.n	800592a <_free_r+0x26>
 800597c:	6825      	ldr	r5, [r4, #0]
 800597e:	1961      	adds	r1, r4, r5
 8005980:	428b      	cmp	r3, r1
 8005982:	bf04      	itt	eq
 8005984:	6819      	ldreq	r1, [r3, #0]
 8005986:	685b      	ldreq	r3, [r3, #4]
 8005988:	6063      	str	r3, [r4, #4]
 800598a:	bf04      	itt	eq
 800598c:	1949      	addeq	r1, r1, r5
 800598e:	6021      	streq	r1, [r4, #0]
 8005990:	6054      	str	r4, [r2, #4]
 8005992:	e7ca      	b.n	800592a <_free_r+0x26>
 8005994:	b003      	add	sp, #12
 8005996:	bd30      	pop	{r4, r5, pc}
 8005998:	20000e40 	.word	0x20000e40

0800599c <sbrk_aligned>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	4e0e      	ldr	r6, [pc, #56]	; (80059d8 <sbrk_aligned+0x3c>)
 80059a0:	460c      	mov	r4, r1
 80059a2:	6831      	ldr	r1, [r6, #0]
 80059a4:	4605      	mov	r5, r0
 80059a6:	b911      	cbnz	r1, 80059ae <sbrk_aligned+0x12>
 80059a8:	f000 fcd0 	bl	800634c <_sbrk_r>
 80059ac:	6030      	str	r0, [r6, #0]
 80059ae:	4621      	mov	r1, r4
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 fccb 	bl	800634c <_sbrk_r>
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	d00a      	beq.n	80059d0 <sbrk_aligned+0x34>
 80059ba:	1cc4      	adds	r4, r0, #3
 80059bc:	f024 0403 	bic.w	r4, r4, #3
 80059c0:	42a0      	cmp	r0, r4
 80059c2:	d007      	beq.n	80059d4 <sbrk_aligned+0x38>
 80059c4:	1a21      	subs	r1, r4, r0
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 fcc0 	bl	800634c <_sbrk_r>
 80059cc:	3001      	adds	r0, #1
 80059ce:	d101      	bne.n	80059d4 <sbrk_aligned+0x38>
 80059d0:	f04f 34ff 	mov.w	r4, #4294967295
 80059d4:	4620      	mov	r0, r4
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	20000e44 	.word	0x20000e44

080059dc <_malloc_r>:
 80059dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e0:	1ccd      	adds	r5, r1, #3
 80059e2:	f025 0503 	bic.w	r5, r5, #3
 80059e6:	3508      	adds	r5, #8
 80059e8:	2d0c      	cmp	r5, #12
 80059ea:	bf38      	it	cc
 80059ec:	250c      	movcc	r5, #12
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	4607      	mov	r7, r0
 80059f2:	db01      	blt.n	80059f8 <_malloc_r+0x1c>
 80059f4:	42a9      	cmp	r1, r5
 80059f6:	d905      	bls.n	8005a04 <_malloc_r+0x28>
 80059f8:	230c      	movs	r3, #12
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	2600      	movs	r6, #0
 80059fe:	4630      	mov	r0, r6
 8005a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a04:	4e2e      	ldr	r6, [pc, #184]	; (8005ac0 <_malloc_r+0xe4>)
 8005a06:	f001 fb55 	bl	80070b4 <__malloc_lock>
 8005a0a:	6833      	ldr	r3, [r6, #0]
 8005a0c:	461c      	mov	r4, r3
 8005a0e:	bb34      	cbnz	r4, 8005a5e <_malloc_r+0x82>
 8005a10:	4629      	mov	r1, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	f7ff ffc2 	bl	800599c <sbrk_aligned>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	d14d      	bne.n	8005aba <_malloc_r+0xde>
 8005a1e:	6834      	ldr	r4, [r6, #0]
 8005a20:	4626      	mov	r6, r4
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	d140      	bne.n	8005aa8 <_malloc_r+0xcc>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	eb04 0803 	add.w	r8, r4, r3
 8005a30:	f000 fc8c 	bl	800634c <_sbrk_r>
 8005a34:	4580      	cmp	r8, r0
 8005a36:	d13a      	bne.n	8005aae <_malloc_r+0xd2>
 8005a38:	6821      	ldr	r1, [r4, #0]
 8005a3a:	3503      	adds	r5, #3
 8005a3c:	1a6d      	subs	r5, r5, r1
 8005a3e:	f025 0503 	bic.w	r5, r5, #3
 8005a42:	3508      	adds	r5, #8
 8005a44:	2d0c      	cmp	r5, #12
 8005a46:	bf38      	it	cc
 8005a48:	250c      	movcc	r5, #12
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7ff ffa5 	bl	800599c <sbrk_aligned>
 8005a52:	3001      	adds	r0, #1
 8005a54:	d02b      	beq.n	8005aae <_malloc_r+0xd2>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	442b      	add	r3, r5
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	e00e      	b.n	8005a7c <_malloc_r+0xa0>
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	1b52      	subs	r2, r2, r5
 8005a62:	d41e      	bmi.n	8005aa2 <_malloc_r+0xc6>
 8005a64:	2a0b      	cmp	r2, #11
 8005a66:	d916      	bls.n	8005a96 <_malloc_r+0xba>
 8005a68:	1961      	adds	r1, r4, r5
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	6025      	str	r5, [r4, #0]
 8005a6e:	bf18      	it	ne
 8005a70:	6059      	strne	r1, [r3, #4]
 8005a72:	6863      	ldr	r3, [r4, #4]
 8005a74:	bf08      	it	eq
 8005a76:	6031      	streq	r1, [r6, #0]
 8005a78:	5162      	str	r2, [r4, r5]
 8005a7a:	604b      	str	r3, [r1, #4]
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	f104 060b 	add.w	r6, r4, #11
 8005a82:	f001 fb1d 	bl	80070c0 <__malloc_unlock>
 8005a86:	f026 0607 	bic.w	r6, r6, #7
 8005a8a:	1d23      	adds	r3, r4, #4
 8005a8c:	1af2      	subs	r2, r6, r3
 8005a8e:	d0b6      	beq.n	80059fe <_malloc_r+0x22>
 8005a90:	1b9b      	subs	r3, r3, r6
 8005a92:	50a3      	str	r3, [r4, r2]
 8005a94:	e7b3      	b.n	80059fe <_malloc_r+0x22>
 8005a96:	6862      	ldr	r2, [r4, #4]
 8005a98:	42a3      	cmp	r3, r4
 8005a9a:	bf0c      	ite	eq
 8005a9c:	6032      	streq	r2, [r6, #0]
 8005a9e:	605a      	strne	r2, [r3, #4]
 8005aa0:	e7ec      	b.n	8005a7c <_malloc_r+0xa0>
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	6864      	ldr	r4, [r4, #4]
 8005aa6:	e7b2      	b.n	8005a0e <_malloc_r+0x32>
 8005aa8:	4634      	mov	r4, r6
 8005aaa:	6876      	ldr	r6, [r6, #4]
 8005aac:	e7b9      	b.n	8005a22 <_malloc_r+0x46>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	603b      	str	r3, [r7, #0]
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	f001 fb04 	bl	80070c0 <__malloc_unlock>
 8005ab8:	e7a1      	b.n	80059fe <_malloc_r+0x22>
 8005aba:	6025      	str	r5, [r4, #0]
 8005abc:	e7de      	b.n	8005a7c <_malloc_r+0xa0>
 8005abe:	bf00      	nop
 8005ac0:	20000e40 	.word	0x20000e40

08005ac4 <__cvt>:
 8005ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac6:	ed2d 8b02 	vpush	{d8}
 8005aca:	eeb0 8b40 	vmov.f64	d8, d0
 8005ace:	b085      	sub	sp, #20
 8005ad0:	4617      	mov	r7, r2
 8005ad2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005ad4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005ad6:	ee18 2a90 	vmov	r2, s17
 8005ada:	f025 0520 	bic.w	r5, r5, #32
 8005ade:	2a00      	cmp	r2, #0
 8005ae0:	bfb6      	itet	lt
 8005ae2:	222d      	movlt	r2, #45	; 0x2d
 8005ae4:	2200      	movge	r2, #0
 8005ae6:	eeb1 8b40 	vneglt.f64	d8, d0
 8005aea:	2d46      	cmp	r5, #70	; 0x46
 8005aec:	460c      	mov	r4, r1
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	d004      	beq.n	8005afc <__cvt+0x38>
 8005af2:	2d45      	cmp	r5, #69	; 0x45
 8005af4:	d100      	bne.n	8005af8 <__cvt+0x34>
 8005af6:	3401      	adds	r4, #1
 8005af8:	2102      	movs	r1, #2
 8005afa:	e000      	b.n	8005afe <__cvt+0x3a>
 8005afc:	2103      	movs	r1, #3
 8005afe:	ab03      	add	r3, sp, #12
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	ab02      	add	r3, sp, #8
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	4622      	mov	r2, r4
 8005b08:	4633      	mov	r3, r6
 8005b0a:	eeb0 0b48 	vmov.f64	d0, d8
 8005b0e:	f000 fd3f 	bl	8006590 <_dtoa_r>
 8005b12:	2d47      	cmp	r5, #71	; 0x47
 8005b14:	d101      	bne.n	8005b1a <__cvt+0x56>
 8005b16:	07fb      	lsls	r3, r7, #31
 8005b18:	d51a      	bpl.n	8005b50 <__cvt+0x8c>
 8005b1a:	2d46      	cmp	r5, #70	; 0x46
 8005b1c:	eb00 0204 	add.w	r2, r0, r4
 8005b20:	d10c      	bne.n	8005b3c <__cvt+0x78>
 8005b22:	7803      	ldrb	r3, [r0, #0]
 8005b24:	2b30      	cmp	r3, #48	; 0x30
 8005b26:	d107      	bne.n	8005b38 <__cvt+0x74>
 8005b28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b30:	bf1c      	itt	ne
 8005b32:	f1c4 0401 	rsbne	r4, r4, #1
 8005b36:	6034      	strne	r4, [r6, #0]
 8005b38:	6833      	ldr	r3, [r6, #0]
 8005b3a:	441a      	add	r2, r3
 8005b3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b44:	bf08      	it	eq
 8005b46:	9203      	streq	r2, [sp, #12]
 8005b48:	2130      	movs	r1, #48	; 0x30
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d307      	bcc.n	8005b60 <__cvt+0x9c>
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b54:	1a1b      	subs	r3, r3, r0
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	b005      	add	sp, #20
 8005b5a:	ecbd 8b02 	vpop	{d8}
 8005b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b60:	1c5c      	adds	r4, r3, #1
 8005b62:	9403      	str	r4, [sp, #12]
 8005b64:	7019      	strb	r1, [r3, #0]
 8005b66:	e7f0      	b.n	8005b4a <__cvt+0x86>

08005b68 <__exponent>:
 8005b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	bfb8      	it	lt
 8005b70:	4249      	neglt	r1, r1
 8005b72:	f803 2b02 	strb.w	r2, [r3], #2
 8005b76:	bfb4      	ite	lt
 8005b78:	222d      	movlt	r2, #45	; 0x2d
 8005b7a:	222b      	movge	r2, #43	; 0x2b
 8005b7c:	2909      	cmp	r1, #9
 8005b7e:	7042      	strb	r2, [r0, #1]
 8005b80:	dd2a      	ble.n	8005bd8 <__exponent+0x70>
 8005b82:	f10d 0407 	add.w	r4, sp, #7
 8005b86:	46a4      	mov	ip, r4
 8005b88:	270a      	movs	r7, #10
 8005b8a:	46a6      	mov	lr, r4
 8005b8c:	460a      	mov	r2, r1
 8005b8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b92:	fb07 1516 	mls	r5, r7, r6, r1
 8005b96:	3530      	adds	r5, #48	; 0x30
 8005b98:	2a63      	cmp	r2, #99	; 0x63
 8005b9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	dcf1      	bgt.n	8005b8a <__exponent+0x22>
 8005ba6:	3130      	adds	r1, #48	; 0x30
 8005ba8:	f1ae 0502 	sub.w	r5, lr, #2
 8005bac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005bb0:	1c44      	adds	r4, r0, #1
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	4561      	cmp	r1, ip
 8005bb6:	d30a      	bcc.n	8005bce <__exponent+0x66>
 8005bb8:	f10d 0209 	add.w	r2, sp, #9
 8005bbc:	eba2 020e 	sub.w	r2, r2, lr
 8005bc0:	4565      	cmp	r5, ip
 8005bc2:	bf88      	it	hi
 8005bc4:	2200      	movhi	r2, #0
 8005bc6:	4413      	add	r3, r2
 8005bc8:	1a18      	subs	r0, r3, r0
 8005bca:	b003      	add	sp, #12
 8005bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005bd6:	e7ed      	b.n	8005bb4 <__exponent+0x4c>
 8005bd8:	2330      	movs	r3, #48	; 0x30
 8005bda:	3130      	adds	r1, #48	; 0x30
 8005bdc:	7083      	strb	r3, [r0, #2]
 8005bde:	70c1      	strb	r1, [r0, #3]
 8005be0:	1d03      	adds	r3, r0, #4
 8005be2:	e7f1      	b.n	8005bc8 <__exponent+0x60>
 8005be4:	0000      	movs	r0, r0
	...

08005be8 <_printf_float>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	b08b      	sub	sp, #44	; 0x2c
 8005bee:	460c      	mov	r4, r1
 8005bf0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005bf4:	4616      	mov	r6, r2
 8005bf6:	461f      	mov	r7, r3
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	f001 fa37 	bl	800706c <_localeconv_r>
 8005bfe:	f8d0 b000 	ldr.w	fp, [r0]
 8005c02:	4658      	mov	r0, fp
 8005c04:	f7fa fb1c 	bl	8000240 <strlen>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9308      	str	r3, [sp, #32]
 8005c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	3307      	adds	r3, #7
 8005c18:	f023 0307 	bic.w	r3, r3, #7
 8005c1c:	f103 0108 	add.w	r1, r3, #8
 8005c20:	f8c8 1000 	str.w	r1, [r8]
 8005c24:	4682      	mov	sl, r0
 8005c26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c2a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005c2e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005e90 <_printf_float+0x2a8>
 8005c32:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005c36:	eeb0 6bc0 	vabs.f64	d6, d0
 8005c3a:	eeb4 6b47 	vcmp.f64	d6, d7
 8005c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c42:	dd24      	ble.n	8005c8e <_printf_float+0xa6>
 8005c44:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4c:	d502      	bpl.n	8005c54 <_printf_float+0x6c>
 8005c4e:	232d      	movs	r3, #45	; 0x2d
 8005c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c54:	4b90      	ldr	r3, [pc, #576]	; (8005e98 <_printf_float+0x2b0>)
 8005c56:	4891      	ldr	r0, [pc, #580]	; (8005e9c <_printf_float+0x2b4>)
 8005c58:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c5c:	bf94      	ite	ls
 8005c5e:	4698      	movls	r8, r3
 8005c60:	4680      	movhi	r8, r0
 8005c62:	2303      	movs	r3, #3
 8005c64:	6123      	str	r3, [r4, #16]
 8005c66:	f022 0204 	bic.w	r2, r2, #4
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6022      	str	r2, [r4, #0]
 8005c6e:	9304      	str	r3, [sp, #16]
 8005c70:	9700      	str	r7, [sp, #0]
 8005c72:	4633      	mov	r3, r6
 8005c74:	aa09      	add	r2, sp, #36	; 0x24
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f000 f9d3 	bl	8006024 <_printf_common>
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f040 808a 	bne.w	8005d98 <_printf_float+0x1b0>
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	b00b      	add	sp, #44	; 0x2c
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	eeb4 0b40 	vcmp.f64	d0, d0
 8005c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c96:	d709      	bvc.n	8005cac <_printf_float+0xc4>
 8005c98:	ee10 3a90 	vmov	r3, s1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bfbc      	itt	lt
 8005ca0:	232d      	movlt	r3, #45	; 0x2d
 8005ca2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ca6:	487e      	ldr	r0, [pc, #504]	; (8005ea0 <_printf_float+0x2b8>)
 8005ca8:	4b7e      	ldr	r3, [pc, #504]	; (8005ea4 <_printf_float+0x2bc>)
 8005caa:	e7d5      	b.n	8005c58 <_printf_float+0x70>
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005cb2:	9104      	str	r1, [sp, #16]
 8005cb4:	1c59      	adds	r1, r3, #1
 8005cb6:	d13c      	bne.n	8005d32 <_printf_float+0x14a>
 8005cb8:	2306      	movs	r3, #6
 8005cba:	6063      	str	r3, [r4, #4]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9303      	str	r3, [sp, #12]
 8005cc0:	ab08      	add	r3, sp, #32
 8005cc2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005cc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cca:	ab07      	add	r3, sp, #28
 8005ccc:	6861      	ldr	r1, [r4, #4]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	6022      	str	r2, [r4, #0]
 8005cd2:	f10d 031b 	add.w	r3, sp, #27
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f7ff fef4 	bl	8005ac4 <__cvt>
 8005cdc:	9b04      	ldr	r3, [sp, #16]
 8005cde:	9907      	ldr	r1, [sp, #28]
 8005ce0:	2b47      	cmp	r3, #71	; 0x47
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	d108      	bne.n	8005cf8 <_printf_float+0x110>
 8005ce6:	1cc8      	adds	r0, r1, #3
 8005ce8:	db02      	blt.n	8005cf0 <_printf_float+0x108>
 8005cea:	6863      	ldr	r3, [r4, #4]
 8005cec:	4299      	cmp	r1, r3
 8005cee:	dd41      	ble.n	8005d74 <_printf_float+0x18c>
 8005cf0:	f1a9 0902 	sub.w	r9, r9, #2
 8005cf4:	fa5f f989 	uxtb.w	r9, r9
 8005cf8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005cfc:	d820      	bhi.n	8005d40 <_printf_float+0x158>
 8005cfe:	3901      	subs	r1, #1
 8005d00:	464a      	mov	r2, r9
 8005d02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d06:	9107      	str	r1, [sp, #28]
 8005d08:	f7ff ff2e 	bl	8005b68 <__exponent>
 8005d0c:	9a08      	ldr	r2, [sp, #32]
 8005d0e:	9004      	str	r0, [sp, #16]
 8005d10:	1813      	adds	r3, r2, r0
 8005d12:	2a01      	cmp	r2, #1
 8005d14:	6123      	str	r3, [r4, #16]
 8005d16:	dc02      	bgt.n	8005d1e <_printf_float+0x136>
 8005d18:	6822      	ldr	r2, [r4, #0]
 8005d1a:	07d2      	lsls	r2, r2, #31
 8005d1c:	d501      	bpl.n	8005d22 <_printf_float+0x13a>
 8005d1e:	3301      	adds	r3, #1
 8005d20:	6123      	str	r3, [r4, #16]
 8005d22:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0a2      	beq.n	8005c70 <_printf_float+0x88>
 8005d2a:	232d      	movs	r3, #45	; 0x2d
 8005d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d30:	e79e      	b.n	8005c70 <_printf_float+0x88>
 8005d32:	9904      	ldr	r1, [sp, #16]
 8005d34:	2947      	cmp	r1, #71	; 0x47
 8005d36:	d1c1      	bne.n	8005cbc <_printf_float+0xd4>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1bf      	bne.n	8005cbc <_printf_float+0xd4>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e7bc      	b.n	8005cba <_printf_float+0xd2>
 8005d40:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d44:	d118      	bne.n	8005d78 <_printf_float+0x190>
 8005d46:	2900      	cmp	r1, #0
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	dd0b      	ble.n	8005d64 <_printf_float+0x17c>
 8005d4c:	6121      	str	r1, [r4, #16]
 8005d4e:	b913      	cbnz	r3, 8005d56 <_printf_float+0x16e>
 8005d50:	6822      	ldr	r2, [r4, #0]
 8005d52:	07d0      	lsls	r0, r2, #31
 8005d54:	d502      	bpl.n	8005d5c <_printf_float+0x174>
 8005d56:	3301      	adds	r3, #1
 8005d58:	440b      	add	r3, r1
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	e7de      	b.n	8005d22 <_printf_float+0x13a>
 8005d64:	b913      	cbnz	r3, 8005d6c <_printf_float+0x184>
 8005d66:	6822      	ldr	r2, [r4, #0]
 8005d68:	07d2      	lsls	r2, r2, #31
 8005d6a:	d501      	bpl.n	8005d70 <_printf_float+0x188>
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	e7f4      	b.n	8005d5a <_printf_float+0x172>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e7f2      	b.n	8005d5a <_printf_float+0x172>
 8005d74:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d78:	9b08      	ldr	r3, [sp, #32]
 8005d7a:	4299      	cmp	r1, r3
 8005d7c:	db05      	blt.n	8005d8a <_printf_float+0x1a2>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	6121      	str	r1, [r4, #16]
 8005d82:	07d8      	lsls	r0, r3, #31
 8005d84:	d5ea      	bpl.n	8005d5c <_printf_float+0x174>
 8005d86:	1c4b      	adds	r3, r1, #1
 8005d88:	e7e7      	b.n	8005d5a <_printf_float+0x172>
 8005d8a:	2900      	cmp	r1, #0
 8005d8c:	bfd4      	ite	le
 8005d8e:	f1c1 0202 	rsble	r2, r1, #2
 8005d92:	2201      	movgt	r2, #1
 8005d94:	4413      	add	r3, r2
 8005d96:	e7e0      	b.n	8005d5a <_printf_float+0x172>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	055a      	lsls	r2, r3, #21
 8005d9c:	d407      	bmi.n	8005dae <_printf_float+0x1c6>
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	4642      	mov	r2, r8
 8005da2:	4631      	mov	r1, r6
 8005da4:	4628      	mov	r0, r5
 8005da6:	47b8      	blx	r7
 8005da8:	3001      	adds	r0, #1
 8005daa:	d12a      	bne.n	8005e02 <_printf_float+0x21a>
 8005dac:	e76a      	b.n	8005c84 <_printf_float+0x9c>
 8005dae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005db2:	f240 80e2 	bls.w	8005f7a <_printf_float+0x392>
 8005db6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005dba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc2:	d133      	bne.n	8005e2c <_printf_float+0x244>
 8005dc4:	4a38      	ldr	r2, [pc, #224]	; (8005ea8 <_printf_float+0x2c0>)
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	f43f af58 	beq.w	8005c84 <_printf_float+0x9c>
 8005dd4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	db02      	blt.n	8005de2 <_printf_float+0x1fa>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	07d8      	lsls	r0, r3, #31
 8005de0:	d50f      	bpl.n	8005e02 <_printf_float+0x21a>
 8005de2:	4653      	mov	r3, sl
 8005de4:	465a      	mov	r2, fp
 8005de6:	4631      	mov	r1, r6
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b8      	blx	r7
 8005dec:	3001      	adds	r0, #1
 8005dee:	f43f af49 	beq.w	8005c84 <_printf_float+0x9c>
 8005df2:	f04f 0800 	mov.w	r8, #0
 8005df6:	f104 091a 	add.w	r9, r4, #26
 8005dfa:	9b08      	ldr	r3, [sp, #32]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	4543      	cmp	r3, r8
 8005e00:	dc09      	bgt.n	8005e16 <_printf_float+0x22e>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	079b      	lsls	r3, r3, #30
 8005e06:	f100 8108 	bmi.w	800601a <_printf_float+0x432>
 8005e0a:	68e0      	ldr	r0, [r4, #12]
 8005e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0e:	4298      	cmp	r0, r3
 8005e10:	bfb8      	it	lt
 8005e12:	4618      	movlt	r0, r3
 8005e14:	e738      	b.n	8005c88 <_printf_float+0xa0>
 8005e16:	2301      	movs	r3, #1
 8005e18:	464a      	mov	r2, r9
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b8      	blx	r7
 8005e20:	3001      	adds	r0, #1
 8005e22:	f43f af2f 	beq.w	8005c84 <_printf_float+0x9c>
 8005e26:	f108 0801 	add.w	r8, r8, #1
 8005e2a:	e7e6      	b.n	8005dfa <_printf_float+0x212>
 8005e2c:	9b07      	ldr	r3, [sp, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	dc3c      	bgt.n	8005eac <_printf_float+0x2c4>
 8005e32:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <_printf_float+0x2c0>)
 8005e34:	2301      	movs	r3, #1
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f43f af21 	beq.w	8005c84 <_printf_float+0x9c>
 8005e42:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	d102      	bne.n	8005e50 <_printf_float+0x268>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	07d9      	lsls	r1, r3, #31
 8005e4e:	d5d8      	bpl.n	8005e02 <_printf_float+0x21a>
 8005e50:	4653      	mov	r3, sl
 8005e52:	465a      	mov	r2, fp
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f af12 	beq.w	8005c84 <_printf_float+0x9c>
 8005e60:	f04f 0900 	mov.w	r9, #0
 8005e64:	f104 0a1a 	add.w	sl, r4, #26
 8005e68:	9b07      	ldr	r3, [sp, #28]
 8005e6a:	425b      	negs	r3, r3
 8005e6c:	454b      	cmp	r3, r9
 8005e6e:	dc01      	bgt.n	8005e74 <_printf_float+0x28c>
 8005e70:	9b08      	ldr	r3, [sp, #32]
 8005e72:	e795      	b.n	8005da0 <_printf_float+0x1b8>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4652      	mov	r2, sl
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	47b8      	blx	r7
 8005e7e:	3001      	adds	r0, #1
 8005e80:	f43f af00 	beq.w	8005c84 <_printf_float+0x9c>
 8005e84:	f109 0901 	add.w	r9, r9, #1
 8005e88:	e7ee      	b.n	8005e68 <_printf_float+0x280>
 8005e8a:	bf00      	nop
 8005e8c:	f3af 8000 	nop.w
 8005e90:	ffffffff 	.word	0xffffffff
 8005e94:	7fefffff 	.word	0x7fefffff
 8005e98:	08008db0 	.word	0x08008db0
 8005e9c:	08008db4 	.word	0x08008db4
 8005ea0:	08008dbc 	.word	0x08008dbc
 8005ea4:	08008db8 	.word	0x08008db8
 8005ea8:	08008dc0 	.word	0x08008dc0
 8005eac:	9a08      	ldr	r2, [sp, #32]
 8005eae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	bfa8      	it	ge
 8005eb4:	461a      	movge	r2, r3
 8005eb6:	2a00      	cmp	r2, #0
 8005eb8:	4691      	mov	r9, r2
 8005eba:	dc38      	bgt.n	8005f2e <_printf_float+0x346>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9305      	str	r3, [sp, #20]
 8005ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ec4:	f104 021a 	add.w	r2, r4, #26
 8005ec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005eca:	9905      	ldr	r1, [sp, #20]
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	eba3 0309 	sub.w	r3, r3, r9
 8005ed2:	428b      	cmp	r3, r1
 8005ed4:	dc33      	bgt.n	8005f3e <_printf_float+0x356>
 8005ed6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	db3c      	blt.n	8005f58 <_printf_float+0x370>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	07da      	lsls	r2, r3, #31
 8005ee2:	d439      	bmi.n	8005f58 <_printf_float+0x370>
 8005ee4:	9b08      	ldr	r3, [sp, #32]
 8005ee6:	9a04      	ldr	r2, [sp, #16]
 8005ee8:	9907      	ldr	r1, [sp, #28]
 8005eea:	1a9a      	subs	r2, r3, r2
 8005eec:	eba3 0901 	sub.w	r9, r3, r1
 8005ef0:	4591      	cmp	r9, r2
 8005ef2:	bfa8      	it	ge
 8005ef4:	4691      	movge	r9, r2
 8005ef6:	f1b9 0f00 	cmp.w	r9, #0
 8005efa:	dc35      	bgt.n	8005f68 <_printf_float+0x380>
 8005efc:	f04f 0800 	mov.w	r8, #0
 8005f00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f04:	f104 0a1a 	add.w	sl, r4, #26
 8005f08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	eba3 0309 	sub.w	r3, r3, r9
 8005f12:	4543      	cmp	r3, r8
 8005f14:	f77f af75 	ble.w	8005e02 <_printf_float+0x21a>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4652      	mov	r2, sl
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	f43f aeae 	beq.w	8005c84 <_printf_float+0x9c>
 8005f28:	f108 0801 	add.w	r8, r8, #1
 8005f2c:	e7ec      	b.n	8005f08 <_printf_float+0x320>
 8005f2e:	4613      	mov	r3, r2
 8005f30:	4631      	mov	r1, r6
 8005f32:	4642      	mov	r2, r8
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b8      	blx	r7
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d1bf      	bne.n	8005ebc <_printf_float+0x2d4>
 8005f3c:	e6a2      	b.n	8005c84 <_printf_float+0x9c>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4631      	mov	r1, r6
 8005f42:	4628      	mov	r0, r5
 8005f44:	9204      	str	r2, [sp, #16]
 8005f46:	47b8      	blx	r7
 8005f48:	3001      	adds	r0, #1
 8005f4a:	f43f ae9b 	beq.w	8005c84 <_printf_float+0x9c>
 8005f4e:	9b05      	ldr	r3, [sp, #20]
 8005f50:	9a04      	ldr	r2, [sp, #16]
 8005f52:	3301      	adds	r3, #1
 8005f54:	9305      	str	r3, [sp, #20]
 8005f56:	e7b7      	b.n	8005ec8 <_printf_float+0x2e0>
 8005f58:	4653      	mov	r3, sl
 8005f5a:	465a      	mov	r2, fp
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	4628      	mov	r0, r5
 8005f60:	47b8      	blx	r7
 8005f62:	3001      	adds	r0, #1
 8005f64:	d1be      	bne.n	8005ee4 <_printf_float+0x2fc>
 8005f66:	e68d      	b.n	8005c84 <_printf_float+0x9c>
 8005f68:	9a04      	ldr	r2, [sp, #16]
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	4442      	add	r2, r8
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	d1c1      	bne.n	8005efc <_printf_float+0x314>
 8005f78:	e684      	b.n	8005c84 <_printf_float+0x9c>
 8005f7a:	9a08      	ldr	r2, [sp, #32]
 8005f7c:	2a01      	cmp	r2, #1
 8005f7e:	dc01      	bgt.n	8005f84 <_printf_float+0x39c>
 8005f80:	07db      	lsls	r3, r3, #31
 8005f82:	d537      	bpl.n	8005ff4 <_printf_float+0x40c>
 8005f84:	2301      	movs	r3, #1
 8005f86:	4642      	mov	r2, r8
 8005f88:	4631      	mov	r1, r6
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	47b8      	blx	r7
 8005f8e:	3001      	adds	r0, #1
 8005f90:	f43f ae78 	beq.w	8005c84 <_printf_float+0x9c>
 8005f94:	4653      	mov	r3, sl
 8005f96:	465a      	mov	r2, fp
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f ae70 	beq.w	8005c84 <_printf_float+0x9c>
 8005fa4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005fa8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb0:	d01b      	beq.n	8005fea <_printf_float+0x402>
 8005fb2:	9b08      	ldr	r3, [sp, #32]
 8005fb4:	f108 0201 	add.w	r2, r8, #1
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b8      	blx	r7
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d10e      	bne.n	8005fe2 <_printf_float+0x3fa>
 8005fc4:	e65e      	b.n	8005c84 <_printf_float+0x9c>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	464a      	mov	r2, r9
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f ae57 	beq.w	8005c84 <_printf_float+0x9c>
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	9b08      	ldr	r3, [sp, #32]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	4543      	cmp	r3, r8
 8005fe0:	dcf1      	bgt.n	8005fc6 <_printf_float+0x3de>
 8005fe2:	9b04      	ldr	r3, [sp, #16]
 8005fe4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fe8:	e6db      	b.n	8005da2 <_printf_float+0x1ba>
 8005fea:	f04f 0800 	mov.w	r8, #0
 8005fee:	f104 091a 	add.w	r9, r4, #26
 8005ff2:	e7f2      	b.n	8005fda <_printf_float+0x3f2>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	e7df      	b.n	8005fba <_printf_float+0x3d2>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	464a      	mov	r2, r9
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	f43f ae3d 	beq.w	8005c84 <_printf_float+0x9c>
 800600a:	f108 0801 	add.w	r8, r8, #1
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006012:	1a5b      	subs	r3, r3, r1
 8006014:	4543      	cmp	r3, r8
 8006016:	dcf0      	bgt.n	8005ffa <_printf_float+0x412>
 8006018:	e6f7      	b.n	8005e0a <_printf_float+0x222>
 800601a:	f04f 0800 	mov.w	r8, #0
 800601e:	f104 0919 	add.w	r9, r4, #25
 8006022:	e7f4      	b.n	800600e <_printf_float+0x426>

08006024 <_printf_common>:
 8006024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	4616      	mov	r6, r2
 800602a:	4699      	mov	r9, r3
 800602c:	688a      	ldr	r2, [r1, #8]
 800602e:	690b      	ldr	r3, [r1, #16]
 8006030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006034:	4293      	cmp	r3, r2
 8006036:	bfb8      	it	lt
 8006038:	4613      	movlt	r3, r2
 800603a:	6033      	str	r3, [r6, #0]
 800603c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006040:	4607      	mov	r7, r0
 8006042:	460c      	mov	r4, r1
 8006044:	b10a      	cbz	r2, 800604a <_printf_common+0x26>
 8006046:	3301      	adds	r3, #1
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	0699      	lsls	r1, r3, #26
 800604e:	bf42      	ittt	mi
 8006050:	6833      	ldrmi	r3, [r6, #0]
 8006052:	3302      	addmi	r3, #2
 8006054:	6033      	strmi	r3, [r6, #0]
 8006056:	6825      	ldr	r5, [r4, #0]
 8006058:	f015 0506 	ands.w	r5, r5, #6
 800605c:	d106      	bne.n	800606c <_printf_common+0x48>
 800605e:	f104 0a19 	add.w	sl, r4, #25
 8006062:	68e3      	ldr	r3, [r4, #12]
 8006064:	6832      	ldr	r2, [r6, #0]
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	42ab      	cmp	r3, r5
 800606a:	dc26      	bgt.n	80060ba <_printf_common+0x96>
 800606c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006070:	1e13      	subs	r3, r2, #0
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	bf18      	it	ne
 8006076:	2301      	movne	r3, #1
 8006078:	0692      	lsls	r2, r2, #26
 800607a:	d42b      	bmi.n	80060d4 <_printf_common+0xb0>
 800607c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006080:	4649      	mov	r1, r9
 8006082:	4638      	mov	r0, r7
 8006084:	47c0      	blx	r8
 8006086:	3001      	adds	r0, #1
 8006088:	d01e      	beq.n	80060c8 <_printf_common+0xa4>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	68e5      	ldr	r5, [r4, #12]
 800608e:	6832      	ldr	r2, [r6, #0]
 8006090:	f003 0306 	and.w	r3, r3, #6
 8006094:	2b04      	cmp	r3, #4
 8006096:	bf08      	it	eq
 8006098:	1aad      	subeq	r5, r5, r2
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	6922      	ldr	r2, [r4, #16]
 800609e:	bf0c      	ite	eq
 80060a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a4:	2500      	movne	r5, #0
 80060a6:	4293      	cmp	r3, r2
 80060a8:	bfc4      	itt	gt
 80060aa:	1a9b      	subgt	r3, r3, r2
 80060ac:	18ed      	addgt	r5, r5, r3
 80060ae:	2600      	movs	r6, #0
 80060b0:	341a      	adds	r4, #26
 80060b2:	42b5      	cmp	r5, r6
 80060b4:	d11a      	bne.n	80060ec <_printf_common+0xc8>
 80060b6:	2000      	movs	r0, #0
 80060b8:	e008      	b.n	80060cc <_printf_common+0xa8>
 80060ba:	2301      	movs	r3, #1
 80060bc:	4652      	mov	r2, sl
 80060be:	4649      	mov	r1, r9
 80060c0:	4638      	mov	r0, r7
 80060c2:	47c0      	blx	r8
 80060c4:	3001      	adds	r0, #1
 80060c6:	d103      	bne.n	80060d0 <_printf_common+0xac>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d0:	3501      	adds	r5, #1
 80060d2:	e7c6      	b.n	8006062 <_printf_common+0x3e>
 80060d4:	18e1      	adds	r1, r4, r3
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	2030      	movs	r0, #48	; 0x30
 80060da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060de:	4422      	add	r2, r4
 80060e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060e8:	3302      	adds	r3, #2
 80060ea:	e7c7      	b.n	800607c <_printf_common+0x58>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4622      	mov	r2, r4
 80060f0:	4649      	mov	r1, r9
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d0e6      	beq.n	80060c8 <_printf_common+0xa4>
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7d9      	b.n	80060b2 <_printf_common+0x8e>
	...

08006100 <_printf_i>:
 8006100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	7e0f      	ldrb	r7, [r1, #24]
 8006106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006108:	2f78      	cmp	r7, #120	; 0x78
 800610a:	4691      	mov	r9, r2
 800610c:	4680      	mov	r8, r0
 800610e:	460c      	mov	r4, r1
 8006110:	469a      	mov	sl, r3
 8006112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006116:	d807      	bhi.n	8006128 <_printf_i+0x28>
 8006118:	2f62      	cmp	r7, #98	; 0x62
 800611a:	d80a      	bhi.n	8006132 <_printf_i+0x32>
 800611c:	2f00      	cmp	r7, #0
 800611e:	f000 80d8 	beq.w	80062d2 <_printf_i+0x1d2>
 8006122:	2f58      	cmp	r7, #88	; 0x58
 8006124:	f000 80a3 	beq.w	800626e <_printf_i+0x16e>
 8006128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800612c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006130:	e03a      	b.n	80061a8 <_printf_i+0xa8>
 8006132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006136:	2b15      	cmp	r3, #21
 8006138:	d8f6      	bhi.n	8006128 <_printf_i+0x28>
 800613a:	a101      	add	r1, pc, #4	; (adr r1, 8006140 <_printf_i+0x40>)
 800613c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006140:	08006199 	.word	0x08006199
 8006144:	080061ad 	.word	0x080061ad
 8006148:	08006129 	.word	0x08006129
 800614c:	08006129 	.word	0x08006129
 8006150:	08006129 	.word	0x08006129
 8006154:	08006129 	.word	0x08006129
 8006158:	080061ad 	.word	0x080061ad
 800615c:	08006129 	.word	0x08006129
 8006160:	08006129 	.word	0x08006129
 8006164:	08006129 	.word	0x08006129
 8006168:	08006129 	.word	0x08006129
 800616c:	080062b9 	.word	0x080062b9
 8006170:	080061dd 	.word	0x080061dd
 8006174:	0800629b 	.word	0x0800629b
 8006178:	08006129 	.word	0x08006129
 800617c:	08006129 	.word	0x08006129
 8006180:	080062db 	.word	0x080062db
 8006184:	08006129 	.word	0x08006129
 8006188:	080061dd 	.word	0x080061dd
 800618c:	08006129 	.word	0x08006129
 8006190:	08006129 	.word	0x08006129
 8006194:	080062a3 	.word	0x080062a3
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	1d1a      	adds	r2, r3, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	602a      	str	r2, [r5, #0]
 80061a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0a3      	b.n	80062f4 <_printf_i+0x1f4>
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	6829      	ldr	r1, [r5, #0]
 80061b0:	0606      	lsls	r6, r0, #24
 80061b2:	f101 0304 	add.w	r3, r1, #4
 80061b6:	d50a      	bpl.n	80061ce <_printf_i+0xce>
 80061b8:	680e      	ldr	r6, [r1, #0]
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	2e00      	cmp	r6, #0
 80061be:	da03      	bge.n	80061c8 <_printf_i+0xc8>
 80061c0:	232d      	movs	r3, #45	; 0x2d
 80061c2:	4276      	negs	r6, r6
 80061c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c8:	485e      	ldr	r0, [pc, #376]	; (8006344 <_printf_i+0x244>)
 80061ca:	230a      	movs	r3, #10
 80061cc:	e019      	b.n	8006202 <_printf_i+0x102>
 80061ce:	680e      	ldr	r6, [r1, #0]
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061d6:	bf18      	it	ne
 80061d8:	b236      	sxthne	r6, r6
 80061da:	e7ef      	b.n	80061bc <_printf_i+0xbc>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	6820      	ldr	r0, [r4, #0]
 80061e0:	1d19      	adds	r1, r3, #4
 80061e2:	6029      	str	r1, [r5, #0]
 80061e4:	0601      	lsls	r1, r0, #24
 80061e6:	d501      	bpl.n	80061ec <_printf_i+0xec>
 80061e8:	681e      	ldr	r6, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <_printf_i+0xf2>
 80061ec:	0646      	lsls	r6, r0, #25
 80061ee:	d5fb      	bpl.n	80061e8 <_printf_i+0xe8>
 80061f0:	881e      	ldrh	r6, [r3, #0]
 80061f2:	4854      	ldr	r0, [pc, #336]	; (8006344 <_printf_i+0x244>)
 80061f4:	2f6f      	cmp	r7, #111	; 0x6f
 80061f6:	bf0c      	ite	eq
 80061f8:	2308      	moveq	r3, #8
 80061fa:	230a      	movne	r3, #10
 80061fc:	2100      	movs	r1, #0
 80061fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006202:	6865      	ldr	r5, [r4, #4]
 8006204:	60a5      	str	r5, [r4, #8]
 8006206:	2d00      	cmp	r5, #0
 8006208:	bfa2      	ittt	ge
 800620a:	6821      	ldrge	r1, [r4, #0]
 800620c:	f021 0104 	bicge.w	r1, r1, #4
 8006210:	6021      	strge	r1, [r4, #0]
 8006212:	b90e      	cbnz	r6, 8006218 <_printf_i+0x118>
 8006214:	2d00      	cmp	r5, #0
 8006216:	d04d      	beq.n	80062b4 <_printf_i+0x1b4>
 8006218:	4615      	mov	r5, r2
 800621a:	fbb6 f1f3 	udiv	r1, r6, r3
 800621e:	fb03 6711 	mls	r7, r3, r1, r6
 8006222:	5dc7      	ldrb	r7, [r0, r7]
 8006224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006228:	4637      	mov	r7, r6
 800622a:	42bb      	cmp	r3, r7
 800622c:	460e      	mov	r6, r1
 800622e:	d9f4      	bls.n	800621a <_printf_i+0x11a>
 8006230:	2b08      	cmp	r3, #8
 8006232:	d10b      	bne.n	800624c <_printf_i+0x14c>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	07de      	lsls	r6, r3, #31
 8006238:	d508      	bpl.n	800624c <_printf_i+0x14c>
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	6861      	ldr	r1, [r4, #4]
 800623e:	4299      	cmp	r1, r3
 8006240:	bfde      	ittt	le
 8006242:	2330      	movle	r3, #48	; 0x30
 8006244:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800624c:	1b52      	subs	r2, r2, r5
 800624e:	6122      	str	r2, [r4, #16]
 8006250:	f8cd a000 	str.w	sl, [sp]
 8006254:	464b      	mov	r3, r9
 8006256:	aa03      	add	r2, sp, #12
 8006258:	4621      	mov	r1, r4
 800625a:	4640      	mov	r0, r8
 800625c:	f7ff fee2 	bl	8006024 <_printf_common>
 8006260:	3001      	adds	r0, #1
 8006262:	d14c      	bne.n	80062fe <_printf_i+0x1fe>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	b004      	add	sp, #16
 800626a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626e:	4835      	ldr	r0, [pc, #212]	; (8006344 <_printf_i+0x244>)
 8006270:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006274:	6829      	ldr	r1, [r5, #0]
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f851 6b04 	ldr.w	r6, [r1], #4
 800627c:	6029      	str	r1, [r5, #0]
 800627e:	061d      	lsls	r5, r3, #24
 8006280:	d514      	bpl.n	80062ac <_printf_i+0x1ac>
 8006282:	07df      	lsls	r7, r3, #31
 8006284:	bf44      	itt	mi
 8006286:	f043 0320 	orrmi.w	r3, r3, #32
 800628a:	6023      	strmi	r3, [r4, #0]
 800628c:	b91e      	cbnz	r6, 8006296 <_printf_i+0x196>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	f023 0320 	bic.w	r3, r3, #32
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	2310      	movs	r3, #16
 8006298:	e7b0      	b.n	80061fc <_printf_i+0xfc>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	f043 0320 	orr.w	r3, r3, #32
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	2378      	movs	r3, #120	; 0x78
 80062a4:	4828      	ldr	r0, [pc, #160]	; (8006348 <_printf_i+0x248>)
 80062a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062aa:	e7e3      	b.n	8006274 <_printf_i+0x174>
 80062ac:	0659      	lsls	r1, r3, #25
 80062ae:	bf48      	it	mi
 80062b0:	b2b6      	uxthmi	r6, r6
 80062b2:	e7e6      	b.n	8006282 <_printf_i+0x182>
 80062b4:	4615      	mov	r5, r2
 80062b6:	e7bb      	b.n	8006230 <_printf_i+0x130>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	6826      	ldr	r6, [r4, #0]
 80062bc:	6961      	ldr	r1, [r4, #20]
 80062be:	1d18      	adds	r0, r3, #4
 80062c0:	6028      	str	r0, [r5, #0]
 80062c2:	0635      	lsls	r5, r6, #24
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	d501      	bpl.n	80062cc <_printf_i+0x1cc>
 80062c8:	6019      	str	r1, [r3, #0]
 80062ca:	e002      	b.n	80062d2 <_printf_i+0x1d2>
 80062cc:	0670      	lsls	r0, r6, #25
 80062ce:	d5fb      	bpl.n	80062c8 <_printf_i+0x1c8>
 80062d0:	8019      	strh	r1, [r3, #0]
 80062d2:	2300      	movs	r3, #0
 80062d4:	6123      	str	r3, [r4, #16]
 80062d6:	4615      	mov	r5, r2
 80062d8:	e7ba      	b.n	8006250 <_printf_i+0x150>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	1d1a      	adds	r2, r3, #4
 80062de:	602a      	str	r2, [r5, #0]
 80062e0:	681d      	ldr	r5, [r3, #0]
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	2100      	movs	r1, #0
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7f9 ffb2 	bl	8000250 <memchr>
 80062ec:	b108      	cbz	r0, 80062f2 <_printf_i+0x1f2>
 80062ee:	1b40      	subs	r0, r0, r5
 80062f0:	6060      	str	r0, [r4, #4]
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	2300      	movs	r3, #0
 80062f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fc:	e7a8      	b.n	8006250 <_printf_i+0x150>
 80062fe:	6923      	ldr	r3, [r4, #16]
 8006300:	462a      	mov	r2, r5
 8006302:	4649      	mov	r1, r9
 8006304:	4640      	mov	r0, r8
 8006306:	47d0      	blx	sl
 8006308:	3001      	adds	r0, #1
 800630a:	d0ab      	beq.n	8006264 <_printf_i+0x164>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	079b      	lsls	r3, r3, #30
 8006310:	d413      	bmi.n	800633a <_printf_i+0x23a>
 8006312:	68e0      	ldr	r0, [r4, #12]
 8006314:	9b03      	ldr	r3, [sp, #12]
 8006316:	4298      	cmp	r0, r3
 8006318:	bfb8      	it	lt
 800631a:	4618      	movlt	r0, r3
 800631c:	e7a4      	b.n	8006268 <_printf_i+0x168>
 800631e:	2301      	movs	r3, #1
 8006320:	4632      	mov	r2, r6
 8006322:	4649      	mov	r1, r9
 8006324:	4640      	mov	r0, r8
 8006326:	47d0      	blx	sl
 8006328:	3001      	adds	r0, #1
 800632a:	d09b      	beq.n	8006264 <_printf_i+0x164>
 800632c:	3501      	adds	r5, #1
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	9903      	ldr	r1, [sp, #12]
 8006332:	1a5b      	subs	r3, r3, r1
 8006334:	42ab      	cmp	r3, r5
 8006336:	dcf2      	bgt.n	800631e <_printf_i+0x21e>
 8006338:	e7eb      	b.n	8006312 <_printf_i+0x212>
 800633a:	2500      	movs	r5, #0
 800633c:	f104 0619 	add.w	r6, r4, #25
 8006340:	e7f5      	b.n	800632e <_printf_i+0x22e>
 8006342:	bf00      	nop
 8006344:	08008dc2 	.word	0x08008dc2
 8006348:	08008dd3 	.word	0x08008dd3

0800634c <_sbrk_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d06      	ldr	r5, [pc, #24]	; (8006368 <_sbrk_r+0x1c>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f002 f928 	bl	80085ac <_sbrk>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_sbrk_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_sbrk_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	20000e48 	.word	0x20000e48

0800636c <siprintf>:
 800636c:	b40e      	push	{r1, r2, r3}
 800636e:	b500      	push	{lr}
 8006370:	b09c      	sub	sp, #112	; 0x70
 8006372:	ab1d      	add	r3, sp, #116	; 0x74
 8006374:	9002      	str	r0, [sp, #8]
 8006376:	9006      	str	r0, [sp, #24]
 8006378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800637c:	4809      	ldr	r0, [pc, #36]	; (80063a4 <siprintf+0x38>)
 800637e:	9107      	str	r1, [sp, #28]
 8006380:	9104      	str	r1, [sp, #16]
 8006382:	4909      	ldr	r1, [pc, #36]	; (80063a8 <siprintf+0x3c>)
 8006384:	f853 2b04 	ldr.w	r2, [r3], #4
 8006388:	9105      	str	r1, [sp, #20]
 800638a:	6800      	ldr	r0, [r0, #0]
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	a902      	add	r1, sp, #8
 8006390:	f001 fa7c 	bl	800788c <_svfiprintf_r>
 8006394:	9b02      	ldr	r3, [sp, #8]
 8006396:	2200      	movs	r2, #0
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	b01c      	add	sp, #112	; 0x70
 800639c:	f85d eb04 	ldr.w	lr, [sp], #4
 80063a0:	b003      	add	sp, #12
 80063a2:	4770      	bx	lr
 80063a4:	20000010 	.word	0x20000010
 80063a8:	ffff0208 	.word	0xffff0208

080063ac <__sread>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	460c      	mov	r4, r1
 80063b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b4:	f001 fb6a 	bl	8007a8c <_read_r>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	bfab      	itete	ge
 80063bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063be:	89a3      	ldrhlt	r3, [r4, #12]
 80063c0:	181b      	addge	r3, r3, r0
 80063c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063c6:	bfac      	ite	ge
 80063c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80063ca:	81a3      	strhlt	r3, [r4, #12]
 80063cc:	bd10      	pop	{r4, pc}

080063ce <__swrite>:
 80063ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d2:	461f      	mov	r7, r3
 80063d4:	898b      	ldrh	r3, [r1, #12]
 80063d6:	05db      	lsls	r3, r3, #23
 80063d8:	4605      	mov	r5, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	4616      	mov	r6, r2
 80063de:	d505      	bpl.n	80063ec <__swrite+0x1e>
 80063e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e4:	2302      	movs	r3, #2
 80063e6:	2200      	movs	r2, #0
 80063e8:	f000 fe44 	bl	8007074 <_lseek_r>
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f6:	81a3      	strh	r3, [r4, #12]
 80063f8:	4632      	mov	r2, r6
 80063fa:	463b      	mov	r3, r7
 80063fc:	4628      	mov	r0, r5
 80063fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006402:	f000 b817 	b.w	8006434 <_write_r>

08006406 <__sseek>:
 8006406:	b510      	push	{r4, lr}
 8006408:	460c      	mov	r4, r1
 800640a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640e:	f000 fe31 	bl	8007074 <_lseek_r>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	bf15      	itete	ne
 8006418:	6560      	strne	r0, [r4, #84]	; 0x54
 800641a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800641e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006422:	81a3      	strheq	r3, [r4, #12]
 8006424:	bf18      	it	ne
 8006426:	81a3      	strhne	r3, [r4, #12]
 8006428:	bd10      	pop	{r4, pc}

0800642a <__sclose>:
 800642a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800642e:	f000 b813 	b.w	8006458 <_close_r>
	...

08006434 <_write_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4d07      	ldr	r5, [pc, #28]	; (8006454 <_write_r+0x20>)
 8006438:	4604      	mov	r4, r0
 800643a:	4608      	mov	r0, r1
 800643c:	4611      	mov	r1, r2
 800643e:	2200      	movs	r2, #0
 8006440:	602a      	str	r2, [r5, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	f002 f8c0 	bl	80085c8 <_write>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_write_r+0x1e>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	b103      	cbz	r3, 8006452 <_write_r+0x1e>
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	20000e48 	.word	0x20000e48

08006458 <_close_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d06      	ldr	r5, [pc, #24]	; (8006474 <_close_r+0x1c>)
 800645c:	2300      	movs	r3, #0
 800645e:	4604      	mov	r4, r0
 8006460:	4608      	mov	r0, r1
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	f002 f86a 	bl	800853c <_close>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_close_r+0x1a>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_close_r+0x1a>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	20000e48 	.word	0x20000e48

08006478 <quorem>:
 8006478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	6903      	ldr	r3, [r0, #16]
 800647e:	690c      	ldr	r4, [r1, #16]
 8006480:	42a3      	cmp	r3, r4
 8006482:	4607      	mov	r7, r0
 8006484:	f2c0 8081 	blt.w	800658a <quorem+0x112>
 8006488:	3c01      	subs	r4, #1
 800648a:	f101 0814 	add.w	r8, r1, #20
 800648e:	f100 0514 	add.w	r5, r0, #20
 8006492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800649c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064a0:	3301      	adds	r3, #1
 80064a2:	429a      	cmp	r2, r3
 80064a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80064b0:	d331      	bcc.n	8006516 <quorem+0x9e>
 80064b2:	f04f 0e00 	mov.w	lr, #0
 80064b6:	4640      	mov	r0, r8
 80064b8:	46ac      	mov	ip, r5
 80064ba:	46f2      	mov	sl, lr
 80064bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80064c0:	b293      	uxth	r3, r2
 80064c2:	fb06 e303 	mla	r3, r6, r3, lr
 80064c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	ebaa 0303 	sub.w	r3, sl, r3
 80064d0:	f8dc a000 	ldr.w	sl, [ip]
 80064d4:	0c12      	lsrs	r2, r2, #16
 80064d6:	fa13 f38a 	uxtah	r3, r3, sl
 80064da:	fb06 e202 	mla	r2, r6, r2, lr
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	9b00      	ldr	r3, [sp, #0]
 80064e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064e6:	b292      	uxth	r2, r2
 80064e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80064f4:	4581      	cmp	r9, r0
 80064f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064fa:	f84c 3b04 	str.w	r3, [ip], #4
 80064fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006502:	d2db      	bcs.n	80064bc <quorem+0x44>
 8006504:	f855 300b 	ldr.w	r3, [r5, fp]
 8006508:	b92b      	cbnz	r3, 8006516 <quorem+0x9e>
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	3b04      	subs	r3, #4
 800650e:	429d      	cmp	r5, r3
 8006510:	461a      	mov	r2, r3
 8006512:	d32e      	bcc.n	8006572 <quorem+0xfa>
 8006514:	613c      	str	r4, [r7, #16]
 8006516:	4638      	mov	r0, r7
 8006518:	f001 f85a 	bl	80075d0 <__mcmp>
 800651c:	2800      	cmp	r0, #0
 800651e:	db24      	blt.n	800656a <quorem+0xf2>
 8006520:	3601      	adds	r6, #1
 8006522:	4628      	mov	r0, r5
 8006524:	f04f 0c00 	mov.w	ip, #0
 8006528:	f858 2b04 	ldr.w	r2, [r8], #4
 800652c:	f8d0 e000 	ldr.w	lr, [r0]
 8006530:	b293      	uxth	r3, r2
 8006532:	ebac 0303 	sub.w	r3, ip, r3
 8006536:	0c12      	lsrs	r2, r2, #16
 8006538:	fa13 f38e 	uxtah	r3, r3, lr
 800653c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006544:	b29b      	uxth	r3, r3
 8006546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654a:	45c1      	cmp	r9, r8
 800654c:	f840 3b04 	str.w	r3, [r0], #4
 8006550:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006554:	d2e8      	bcs.n	8006528 <quorem+0xb0>
 8006556:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800655a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800655e:	b922      	cbnz	r2, 800656a <quorem+0xf2>
 8006560:	3b04      	subs	r3, #4
 8006562:	429d      	cmp	r5, r3
 8006564:	461a      	mov	r2, r3
 8006566:	d30a      	bcc.n	800657e <quorem+0x106>
 8006568:	613c      	str	r4, [r7, #16]
 800656a:	4630      	mov	r0, r6
 800656c:	b003      	add	sp, #12
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	3b04      	subs	r3, #4
 8006576:	2a00      	cmp	r2, #0
 8006578:	d1cc      	bne.n	8006514 <quorem+0x9c>
 800657a:	3c01      	subs	r4, #1
 800657c:	e7c7      	b.n	800650e <quorem+0x96>
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	3b04      	subs	r3, #4
 8006582:	2a00      	cmp	r2, #0
 8006584:	d1f0      	bne.n	8006568 <quorem+0xf0>
 8006586:	3c01      	subs	r4, #1
 8006588:	e7eb      	b.n	8006562 <quorem+0xea>
 800658a:	2000      	movs	r0, #0
 800658c:	e7ee      	b.n	800656c <quorem+0xf4>
	...

08006590 <_dtoa_r>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b02 	vpush	{d8}
 8006598:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800659a:	b091      	sub	sp, #68	; 0x44
 800659c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80065a0:	ec59 8b10 	vmov	r8, r9, d0
 80065a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80065a6:	9106      	str	r1, [sp, #24]
 80065a8:	4606      	mov	r6, r0
 80065aa:	9208      	str	r2, [sp, #32]
 80065ac:	930c      	str	r3, [sp, #48]	; 0x30
 80065ae:	b975      	cbnz	r5, 80065ce <_dtoa_r+0x3e>
 80065b0:	2010      	movs	r0, #16
 80065b2:	f7ff f979 	bl	80058a8 <malloc>
 80065b6:	4602      	mov	r2, r0
 80065b8:	6270      	str	r0, [r6, #36]	; 0x24
 80065ba:	b920      	cbnz	r0, 80065c6 <_dtoa_r+0x36>
 80065bc:	4baa      	ldr	r3, [pc, #680]	; (8006868 <_dtoa_r+0x2d8>)
 80065be:	21ea      	movs	r1, #234	; 0xea
 80065c0:	48aa      	ldr	r0, [pc, #680]	; (800686c <_dtoa_r+0x2dc>)
 80065c2:	f001 fa75 	bl	8007ab0 <__assert_func>
 80065c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065ca:	6005      	str	r5, [r0, #0]
 80065cc:	60c5      	str	r5, [r0, #12]
 80065ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065d0:	6819      	ldr	r1, [r3, #0]
 80065d2:	b151      	cbz	r1, 80065ea <_dtoa_r+0x5a>
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	604a      	str	r2, [r1, #4]
 80065d8:	2301      	movs	r3, #1
 80065da:	4093      	lsls	r3, r2
 80065dc:	608b      	str	r3, [r1, #8]
 80065de:	4630      	mov	r0, r6
 80065e0:	f000 fdb4 	bl	800714c <_Bfree>
 80065e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	f1b9 0300 	subs.w	r3, r9, #0
 80065ee:	bfbb      	ittet	lt
 80065f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	9303      	strlt	r3, [sp, #12]
 80065f6:	2300      	movge	r3, #0
 80065f8:	2201      	movlt	r2, #1
 80065fa:	bfac      	ite	ge
 80065fc:	6023      	strge	r3, [r4, #0]
 80065fe:	6022      	strlt	r2, [r4, #0]
 8006600:	4b9b      	ldr	r3, [pc, #620]	; (8006870 <_dtoa_r+0x2e0>)
 8006602:	9c03      	ldr	r4, [sp, #12]
 8006604:	43a3      	bics	r3, r4
 8006606:	d11c      	bne.n	8006642 <_dtoa_r+0xb2>
 8006608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800660a:	f242 730f 	movw	r3, #9999	; 0x270f
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006614:	ea53 0308 	orrs.w	r3, r3, r8
 8006618:	f000 84fd 	beq.w	8007016 <_dtoa_r+0xa86>
 800661c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800661e:	b963      	cbnz	r3, 800663a <_dtoa_r+0xaa>
 8006620:	4b94      	ldr	r3, [pc, #592]	; (8006874 <_dtoa_r+0x2e4>)
 8006622:	e01f      	b.n	8006664 <_dtoa_r+0xd4>
 8006624:	4b94      	ldr	r3, [pc, #592]	; (8006878 <_dtoa_r+0x2e8>)
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	3308      	adds	r3, #8
 800662a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	9801      	ldr	r0, [sp, #4]
 8006630:	b011      	add	sp, #68	; 0x44
 8006632:	ecbd 8b02 	vpop	{d8}
 8006636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663a:	4b8e      	ldr	r3, [pc, #568]	; (8006874 <_dtoa_r+0x2e4>)
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	3303      	adds	r3, #3
 8006640:	e7f3      	b.n	800662a <_dtoa_r+0x9a>
 8006642:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006646:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800664a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664e:	d10b      	bne.n	8006668 <_dtoa_r+0xd8>
 8006650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006652:	2301      	movs	r3, #1
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 84d9 	beq.w	8007010 <_dtoa_r+0xa80>
 800665e:	4887      	ldr	r0, [pc, #540]	; (800687c <_dtoa_r+0x2ec>)
 8006660:	6018      	str	r0, [r3, #0]
 8006662:	1e43      	subs	r3, r0, #1
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	e7e2      	b.n	800662e <_dtoa_r+0x9e>
 8006668:	a90f      	add	r1, sp, #60	; 0x3c
 800666a:	aa0e      	add	r2, sp, #56	; 0x38
 800666c:	4630      	mov	r0, r6
 800666e:	eeb0 0b48 	vmov.f64	d0, d8
 8006672:	f001 f853 	bl	800771c <__d2b>
 8006676:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800667a:	4605      	mov	r5, r0
 800667c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800667e:	2900      	cmp	r1, #0
 8006680:	d046      	beq.n	8006710 <_dtoa_r+0x180>
 8006682:	ee18 4a90 	vmov	r4, s17
 8006686:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800668a:	ec53 2b18 	vmov	r2, r3, d8
 800668e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006692:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006696:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800669a:	2400      	movs	r4, #0
 800669c:	ec43 2b16 	vmov	d6, r2, r3
 80066a0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80066a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006850 <_dtoa_r+0x2c0>
 80066a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80066ac:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006858 <_dtoa_r+0x2c8>
 80066b0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80066b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006860 <_dtoa_r+0x2d0>
 80066b8:	ee07 1a90 	vmov	s15, r1
 80066bc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80066c0:	eeb0 7b46 	vmov.f64	d7, d6
 80066c4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80066c8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80066cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80066d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d4:	ee16 ba90 	vmov	fp, s13
 80066d8:	940a      	str	r4, [sp, #40]	; 0x28
 80066da:	d508      	bpl.n	80066ee <_dtoa_r+0x15e>
 80066dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80066e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80066e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e8:	bf18      	it	ne
 80066ea:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80066ee:	f1bb 0f16 	cmp.w	fp, #22
 80066f2:	d82f      	bhi.n	8006754 <_dtoa_r+0x1c4>
 80066f4:	4b62      	ldr	r3, [pc, #392]	; (8006880 <_dtoa_r+0x2f0>)
 80066f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066fa:	ed93 7b00 	vldr	d7, [r3]
 80066fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006706:	d501      	bpl.n	800670c <_dtoa_r+0x17c>
 8006708:	f10b 3bff 	add.w	fp, fp, #4294967295
 800670c:	2300      	movs	r3, #0
 800670e:	e022      	b.n	8006756 <_dtoa_r+0x1c6>
 8006710:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006712:	4401      	add	r1, r0
 8006714:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006718:	2b20      	cmp	r3, #32
 800671a:	bfc1      	itttt	gt
 800671c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006720:	fa04 f303 	lslgt.w	r3, r4, r3
 8006724:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006728:	fa28 f804 	lsrgt.w	r8, r8, r4
 800672c:	bfd6      	itet	le
 800672e:	f1c3 0320 	rsble	r3, r3, #32
 8006732:	ea43 0808 	orrgt.w	r8, r3, r8
 8006736:	fa08 f803 	lslle.w	r8, r8, r3
 800673a:	ee07 8a90 	vmov	s15, r8
 800673e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006742:	3901      	subs	r1, #1
 8006744:	ee17 4a90 	vmov	r4, s15
 8006748:	ec53 2b17 	vmov	r2, r3, d7
 800674c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006750:	2401      	movs	r4, #1
 8006752:	e7a3      	b.n	800669c <_dtoa_r+0x10c>
 8006754:	2301      	movs	r3, #1
 8006756:	930b      	str	r3, [sp, #44]	; 0x2c
 8006758:	1a43      	subs	r3, r0, r1
 800675a:	1e5a      	subs	r2, r3, #1
 800675c:	bf45      	ittet	mi
 800675e:	f1c3 0301 	rsbmi	r3, r3, #1
 8006762:	9304      	strmi	r3, [sp, #16]
 8006764:	2300      	movpl	r3, #0
 8006766:	2300      	movmi	r3, #0
 8006768:	9205      	str	r2, [sp, #20]
 800676a:	bf54      	ite	pl
 800676c:	9304      	strpl	r3, [sp, #16]
 800676e:	9305      	strmi	r3, [sp, #20]
 8006770:	f1bb 0f00 	cmp.w	fp, #0
 8006774:	db18      	blt.n	80067a8 <_dtoa_r+0x218>
 8006776:	9b05      	ldr	r3, [sp, #20]
 8006778:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800677c:	445b      	add	r3, fp
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	2300      	movs	r3, #0
 8006782:	9a06      	ldr	r2, [sp, #24]
 8006784:	2a09      	cmp	r2, #9
 8006786:	d849      	bhi.n	800681c <_dtoa_r+0x28c>
 8006788:	2a05      	cmp	r2, #5
 800678a:	bfc4      	itt	gt
 800678c:	3a04      	subgt	r2, #4
 800678e:	9206      	strgt	r2, [sp, #24]
 8006790:	9a06      	ldr	r2, [sp, #24]
 8006792:	f1a2 0202 	sub.w	r2, r2, #2
 8006796:	bfcc      	ite	gt
 8006798:	2400      	movgt	r4, #0
 800679a:	2401      	movle	r4, #1
 800679c:	2a03      	cmp	r2, #3
 800679e:	d848      	bhi.n	8006832 <_dtoa_r+0x2a2>
 80067a0:	e8df f002 	tbb	[pc, r2]
 80067a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80067a8:	9b04      	ldr	r3, [sp, #16]
 80067aa:	2200      	movs	r2, #0
 80067ac:	eba3 030b 	sub.w	r3, r3, fp
 80067b0:	9304      	str	r3, [sp, #16]
 80067b2:	9209      	str	r2, [sp, #36]	; 0x24
 80067b4:	f1cb 0300 	rsb	r3, fp, #0
 80067b8:	e7e3      	b.n	8006782 <_dtoa_r+0x1f2>
 80067ba:	2200      	movs	r2, #0
 80067bc:	9207      	str	r2, [sp, #28]
 80067be:	9a08      	ldr	r2, [sp, #32]
 80067c0:	2a00      	cmp	r2, #0
 80067c2:	dc39      	bgt.n	8006838 <_dtoa_r+0x2a8>
 80067c4:	f04f 0a01 	mov.w	sl, #1
 80067c8:	46d1      	mov	r9, sl
 80067ca:	4652      	mov	r2, sl
 80067cc:	f8cd a020 	str.w	sl, [sp, #32]
 80067d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80067d2:	2100      	movs	r1, #0
 80067d4:	6079      	str	r1, [r7, #4]
 80067d6:	2004      	movs	r0, #4
 80067d8:	f100 0c14 	add.w	ip, r0, #20
 80067dc:	4594      	cmp	ip, r2
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	d92f      	bls.n	8006842 <_dtoa_r+0x2b2>
 80067e2:	4630      	mov	r0, r6
 80067e4:	930d      	str	r3, [sp, #52]	; 0x34
 80067e6:	f000 fc71 	bl	80070cc <_Balloc>
 80067ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ec:	9001      	str	r0, [sp, #4]
 80067ee:	4602      	mov	r2, r0
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d149      	bne.n	8006888 <_dtoa_r+0x2f8>
 80067f4:	4b23      	ldr	r3, [pc, #140]	; (8006884 <_dtoa_r+0x2f4>)
 80067f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067fa:	e6e1      	b.n	80065c0 <_dtoa_r+0x30>
 80067fc:	2201      	movs	r2, #1
 80067fe:	e7dd      	b.n	80067bc <_dtoa_r+0x22c>
 8006800:	2200      	movs	r2, #0
 8006802:	9207      	str	r2, [sp, #28]
 8006804:	9a08      	ldr	r2, [sp, #32]
 8006806:	eb0b 0a02 	add.w	sl, fp, r2
 800680a:	f10a 0901 	add.w	r9, sl, #1
 800680e:	464a      	mov	r2, r9
 8006810:	2a01      	cmp	r2, #1
 8006812:	bfb8      	it	lt
 8006814:	2201      	movlt	r2, #1
 8006816:	e7db      	b.n	80067d0 <_dtoa_r+0x240>
 8006818:	2201      	movs	r2, #1
 800681a:	e7f2      	b.n	8006802 <_dtoa_r+0x272>
 800681c:	2401      	movs	r4, #1
 800681e:	2200      	movs	r2, #0
 8006820:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006824:	f04f 3aff 	mov.w	sl, #4294967295
 8006828:	2100      	movs	r1, #0
 800682a:	46d1      	mov	r9, sl
 800682c:	2212      	movs	r2, #18
 800682e:	9108      	str	r1, [sp, #32]
 8006830:	e7ce      	b.n	80067d0 <_dtoa_r+0x240>
 8006832:	2201      	movs	r2, #1
 8006834:	9207      	str	r2, [sp, #28]
 8006836:	e7f5      	b.n	8006824 <_dtoa_r+0x294>
 8006838:	f8dd a020 	ldr.w	sl, [sp, #32]
 800683c:	46d1      	mov	r9, sl
 800683e:	4652      	mov	r2, sl
 8006840:	e7c6      	b.n	80067d0 <_dtoa_r+0x240>
 8006842:	3101      	adds	r1, #1
 8006844:	6079      	str	r1, [r7, #4]
 8006846:	0040      	lsls	r0, r0, #1
 8006848:	e7c6      	b.n	80067d8 <_dtoa_r+0x248>
 800684a:	bf00      	nop
 800684c:	f3af 8000 	nop.w
 8006850:	636f4361 	.word	0x636f4361
 8006854:	3fd287a7 	.word	0x3fd287a7
 8006858:	8b60c8b3 	.word	0x8b60c8b3
 800685c:	3fc68a28 	.word	0x3fc68a28
 8006860:	509f79fb 	.word	0x509f79fb
 8006864:	3fd34413 	.word	0x3fd34413
 8006868:	08008df1 	.word	0x08008df1
 800686c:	08008e08 	.word	0x08008e08
 8006870:	7ff00000 	.word	0x7ff00000
 8006874:	08008ded 	.word	0x08008ded
 8006878:	08008de4 	.word	0x08008de4
 800687c:	08008dc1 	.word	0x08008dc1
 8006880:	08008ef8 	.word	0x08008ef8
 8006884:	08008e63 	.word	0x08008e63
 8006888:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800688a:	9901      	ldr	r1, [sp, #4]
 800688c:	6011      	str	r1, [r2, #0]
 800688e:	f1b9 0f0e 	cmp.w	r9, #14
 8006892:	d86c      	bhi.n	800696e <_dtoa_r+0x3de>
 8006894:	2c00      	cmp	r4, #0
 8006896:	d06a      	beq.n	800696e <_dtoa_r+0x3de>
 8006898:	f1bb 0f00 	cmp.w	fp, #0
 800689c:	f340 80a0 	ble.w	80069e0 <_dtoa_r+0x450>
 80068a0:	49c1      	ldr	r1, [pc, #772]	; (8006ba8 <_dtoa_r+0x618>)
 80068a2:	f00b 020f 	and.w	r2, fp, #15
 80068a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80068aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80068ae:	ed92 7b00 	vldr	d7, [r2]
 80068b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80068b6:	f000 8087 	beq.w	80069c8 <_dtoa_r+0x438>
 80068ba:	4abc      	ldr	r2, [pc, #752]	; (8006bac <_dtoa_r+0x61c>)
 80068bc:	ed92 6b08 	vldr	d6, [r2, #32]
 80068c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80068c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80068c8:	f001 010f 	and.w	r1, r1, #15
 80068cc:	2203      	movs	r2, #3
 80068ce:	48b7      	ldr	r0, [pc, #732]	; (8006bac <_dtoa_r+0x61c>)
 80068d0:	2900      	cmp	r1, #0
 80068d2:	d17b      	bne.n	80069cc <_dtoa_r+0x43c>
 80068d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80068d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80068dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80068e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068e2:	2900      	cmp	r1, #0
 80068e4:	f000 80a2 	beq.w	8006a2c <_dtoa_r+0x49c>
 80068e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80068f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f8:	f140 8098 	bpl.w	8006a2c <_dtoa_r+0x49c>
 80068fc:	f1b9 0f00 	cmp.w	r9, #0
 8006900:	f000 8094 	beq.w	8006a2c <_dtoa_r+0x49c>
 8006904:	f1ba 0f00 	cmp.w	sl, #0
 8006908:	dd2f      	ble.n	800696a <_dtoa_r+0x3da>
 800690a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800690e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006912:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006916:	f10b 37ff 	add.w	r7, fp, #4294967295
 800691a:	3201      	adds	r2, #1
 800691c:	4650      	mov	r0, sl
 800691e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006922:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006926:	ee07 2a90 	vmov	s15, r2
 800692a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800692e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006932:	ee15 4a90 	vmov	r4, s11
 8006936:	ec52 1b15 	vmov	r1, r2, d5
 800693a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800693e:	2800      	cmp	r0, #0
 8006940:	d177      	bne.n	8006a32 <_dtoa_r+0x4a2>
 8006942:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006946:	ee36 6b47 	vsub.f64	d6, d6, d7
 800694a:	ec42 1b17 	vmov	d7, r1, r2
 800694e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006956:	f300 8263 	bgt.w	8006e20 <_dtoa_r+0x890>
 800695a:	eeb1 7b47 	vneg.f64	d7, d7
 800695e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006966:	f100 8258 	bmi.w	8006e1a <_dtoa_r+0x88a>
 800696a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800696e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006970:	2a00      	cmp	r2, #0
 8006972:	f2c0 811d 	blt.w	8006bb0 <_dtoa_r+0x620>
 8006976:	f1bb 0f0e 	cmp.w	fp, #14
 800697a:	f300 8119 	bgt.w	8006bb0 <_dtoa_r+0x620>
 800697e:	4b8a      	ldr	r3, [pc, #552]	; (8006ba8 <_dtoa_r+0x618>)
 8006980:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006984:	ed93 6b00 	vldr	d6, [r3]
 8006988:	9b08      	ldr	r3, [sp, #32]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f280 80b7 	bge.w	8006afe <_dtoa_r+0x56e>
 8006990:	f1b9 0f00 	cmp.w	r9, #0
 8006994:	f300 80b3 	bgt.w	8006afe <_dtoa_r+0x56e>
 8006998:	f040 823f 	bne.w	8006e1a <_dtoa_r+0x88a>
 800699c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80069a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80069a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80069ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b0:	464c      	mov	r4, r9
 80069b2:	464f      	mov	r7, r9
 80069b4:	f280 8215 	bge.w	8006de2 <_dtoa_r+0x852>
 80069b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80069bc:	2331      	movs	r3, #49	; 0x31
 80069be:	f808 3b01 	strb.w	r3, [r8], #1
 80069c2:	f10b 0b01 	add.w	fp, fp, #1
 80069c6:	e211      	b.n	8006dec <_dtoa_r+0x85c>
 80069c8:	2202      	movs	r2, #2
 80069ca:	e780      	b.n	80068ce <_dtoa_r+0x33e>
 80069cc:	07cc      	lsls	r4, r1, #31
 80069ce:	d504      	bpl.n	80069da <_dtoa_r+0x44a>
 80069d0:	ed90 6b00 	vldr	d6, [r0]
 80069d4:	3201      	adds	r2, #1
 80069d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80069da:	1049      	asrs	r1, r1, #1
 80069dc:	3008      	adds	r0, #8
 80069de:	e777      	b.n	80068d0 <_dtoa_r+0x340>
 80069e0:	d022      	beq.n	8006a28 <_dtoa_r+0x498>
 80069e2:	f1cb 0100 	rsb	r1, fp, #0
 80069e6:	4a70      	ldr	r2, [pc, #448]	; (8006ba8 <_dtoa_r+0x618>)
 80069e8:	f001 000f 	and.w	r0, r1, #15
 80069ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80069f0:	ed92 7b00 	vldr	d7, [r2]
 80069f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80069f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80069fc:	486b      	ldr	r0, [pc, #428]	; (8006bac <_dtoa_r+0x61c>)
 80069fe:	1109      	asrs	r1, r1, #4
 8006a00:	2400      	movs	r4, #0
 8006a02:	2202      	movs	r2, #2
 8006a04:	b929      	cbnz	r1, 8006a12 <_dtoa_r+0x482>
 8006a06:	2c00      	cmp	r4, #0
 8006a08:	f43f af6a 	beq.w	80068e0 <_dtoa_r+0x350>
 8006a0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a10:	e766      	b.n	80068e0 <_dtoa_r+0x350>
 8006a12:	07cf      	lsls	r7, r1, #31
 8006a14:	d505      	bpl.n	8006a22 <_dtoa_r+0x492>
 8006a16:	ed90 6b00 	vldr	d6, [r0]
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	2401      	movs	r4, #1
 8006a1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006a22:	1049      	asrs	r1, r1, #1
 8006a24:	3008      	adds	r0, #8
 8006a26:	e7ed      	b.n	8006a04 <_dtoa_r+0x474>
 8006a28:	2202      	movs	r2, #2
 8006a2a:	e759      	b.n	80068e0 <_dtoa_r+0x350>
 8006a2c:	465f      	mov	r7, fp
 8006a2e:	4648      	mov	r0, r9
 8006a30:	e775      	b.n	800691e <_dtoa_r+0x38e>
 8006a32:	ec42 1b17 	vmov	d7, r1, r2
 8006a36:	4a5c      	ldr	r2, [pc, #368]	; (8006ba8 <_dtoa_r+0x618>)
 8006a38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006a3c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006a40:	9a01      	ldr	r2, [sp, #4]
 8006a42:	1814      	adds	r4, r2, r0
 8006a44:	9a07      	ldr	r2, [sp, #28]
 8006a46:	b352      	cbz	r2, 8006a9e <_dtoa_r+0x50e>
 8006a48:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006a4c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006a50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006a54:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006a58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006a5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006a60:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006a64:	ee14 2a90 	vmov	r2, s9
 8006a68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006a6c:	3230      	adds	r2, #48	; 0x30
 8006a6e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006a72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7a:	f808 2b01 	strb.w	r2, [r8], #1
 8006a7e:	d439      	bmi.n	8006af4 <_dtoa_r+0x564>
 8006a80:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006a84:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8c:	d472      	bmi.n	8006b74 <_dtoa_r+0x5e4>
 8006a8e:	45a0      	cmp	r8, r4
 8006a90:	f43f af6b 	beq.w	800696a <_dtoa_r+0x3da>
 8006a94:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006a98:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006a9c:	e7e0      	b.n	8006a60 <_dtoa_r+0x4d0>
 8006a9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006aa2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006aac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006ab0:	ee14 2a90 	vmov	r2, s9
 8006ab4:	3230      	adds	r2, #48	; 0x30
 8006ab6:	f808 2b01 	strb.w	r2, [r8], #1
 8006aba:	45a0      	cmp	r8, r4
 8006abc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006ac0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006ac4:	d118      	bne.n	8006af8 <_dtoa_r+0x568>
 8006ac6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006aca:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006ace:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad6:	dc4d      	bgt.n	8006b74 <_dtoa_r+0x5e4>
 8006ad8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006adc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae4:	f57f af41 	bpl.w	800696a <_dtoa_r+0x3da>
 8006ae8:	4688      	mov	r8, r1
 8006aea:	3901      	subs	r1, #1
 8006aec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006af0:	2b30      	cmp	r3, #48	; 0x30
 8006af2:	d0f9      	beq.n	8006ae8 <_dtoa_r+0x558>
 8006af4:	46bb      	mov	fp, r7
 8006af6:	e02a      	b.n	8006b4e <_dtoa_r+0x5be>
 8006af8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006afc:	e7d6      	b.n	8006aac <_dtoa_r+0x51c>
 8006afe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b02:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006b06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b0a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006b0e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006b12:	ee15 3a10 	vmov	r3, s10
 8006b16:	3330      	adds	r3, #48	; 0x30
 8006b18:	f808 3b01 	strb.w	r3, [r8], #1
 8006b1c:	9b01      	ldr	r3, [sp, #4]
 8006b1e:	eba8 0303 	sub.w	r3, r8, r3
 8006b22:	4599      	cmp	r9, r3
 8006b24:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006b28:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006b2c:	d133      	bne.n	8006b96 <_dtoa_r+0x606>
 8006b2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006b32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3a:	dc1a      	bgt.n	8006b72 <_dtoa_r+0x5e2>
 8006b3c:	eeb4 7b46 	vcmp.f64	d7, d6
 8006b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b44:	d103      	bne.n	8006b4e <_dtoa_r+0x5be>
 8006b46:	ee15 3a10 	vmov	r3, s10
 8006b4a:	07d9      	lsls	r1, r3, #31
 8006b4c:	d411      	bmi.n	8006b72 <_dtoa_r+0x5e2>
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4630      	mov	r0, r6
 8006b52:	f000 fafb 	bl	800714c <_Bfree>
 8006b56:	2300      	movs	r3, #0
 8006b58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b5a:	f888 3000 	strb.w	r3, [r8]
 8006b5e:	f10b 0301 	add.w	r3, fp, #1
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f43f ad61 	beq.w	800662e <_dtoa_r+0x9e>
 8006b6c:	f8c3 8000 	str.w	r8, [r3]
 8006b70:	e55d      	b.n	800662e <_dtoa_r+0x9e>
 8006b72:	465f      	mov	r7, fp
 8006b74:	4643      	mov	r3, r8
 8006b76:	4698      	mov	r8, r3
 8006b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b7c:	2a39      	cmp	r2, #57	; 0x39
 8006b7e:	d106      	bne.n	8006b8e <_dtoa_r+0x5fe>
 8006b80:	9a01      	ldr	r2, [sp, #4]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d1f7      	bne.n	8006b76 <_dtoa_r+0x5e6>
 8006b86:	9901      	ldr	r1, [sp, #4]
 8006b88:	2230      	movs	r2, #48	; 0x30
 8006b8a:	3701      	adds	r7, #1
 8006b8c:	700a      	strb	r2, [r1, #0]
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	3201      	adds	r2, #1
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	e7ae      	b.n	8006af4 <_dtoa_r+0x564>
 8006b96:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006b9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba2:	d1b2      	bne.n	8006b0a <_dtoa_r+0x57a>
 8006ba4:	e7d3      	b.n	8006b4e <_dtoa_r+0x5be>
 8006ba6:	bf00      	nop
 8006ba8:	08008ef8 	.word	0x08008ef8
 8006bac:	08008ed0 	.word	0x08008ed0
 8006bb0:	9907      	ldr	r1, [sp, #28]
 8006bb2:	2900      	cmp	r1, #0
 8006bb4:	f000 80d0 	beq.w	8006d58 <_dtoa_r+0x7c8>
 8006bb8:	9906      	ldr	r1, [sp, #24]
 8006bba:	2901      	cmp	r1, #1
 8006bbc:	f300 80b4 	bgt.w	8006d28 <_dtoa_r+0x798>
 8006bc0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	f000 80ac 	beq.w	8006d20 <_dtoa_r+0x790>
 8006bc8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006bcc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006bd0:	461c      	mov	r4, r3
 8006bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bd4:	9b04      	ldr	r3, [sp, #16]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	9b05      	ldr	r3, [sp, #20]
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4413      	add	r3, r2
 8006be0:	4630      	mov	r0, r6
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	f000 fb6a 	bl	80072bc <__i2b>
 8006be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bea:	4607      	mov	r7, r0
 8006bec:	f1b8 0f00 	cmp.w	r8, #0
 8006bf0:	dd0d      	ble.n	8006c0e <_dtoa_r+0x67e>
 8006bf2:	9a05      	ldr	r2, [sp, #20]
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	dd0a      	ble.n	8006c0e <_dtoa_r+0x67e>
 8006bf8:	4542      	cmp	r2, r8
 8006bfa:	9904      	ldr	r1, [sp, #16]
 8006bfc:	bfa8      	it	ge
 8006bfe:	4642      	movge	r2, r8
 8006c00:	1a89      	subs	r1, r1, r2
 8006c02:	9104      	str	r1, [sp, #16]
 8006c04:	9905      	ldr	r1, [sp, #20]
 8006c06:	eba8 0802 	sub.w	r8, r8, r2
 8006c0a:	1a8a      	subs	r2, r1, r2
 8006c0c:	9205      	str	r2, [sp, #20]
 8006c0e:	b303      	cbz	r3, 8006c52 <_dtoa_r+0x6c2>
 8006c10:	9a07      	ldr	r2, [sp, #28]
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	f000 80a5 	beq.w	8006d62 <_dtoa_r+0x7d2>
 8006c18:	2c00      	cmp	r4, #0
 8006c1a:	dd13      	ble.n	8006c44 <_dtoa_r+0x6b4>
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	4622      	mov	r2, r4
 8006c20:	4630      	mov	r0, r6
 8006c22:	930d      	str	r3, [sp, #52]	; 0x34
 8006c24:	f000 fc0a 	bl	800743c <__pow5mult>
 8006c28:	462a      	mov	r2, r5
 8006c2a:	4601      	mov	r1, r0
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f000 fb5a 	bl	80072e8 <__multiply>
 8006c34:	4629      	mov	r1, r5
 8006c36:	900a      	str	r0, [sp, #40]	; 0x28
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f000 fa87 	bl	800714c <_Bfree>
 8006c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c42:	4615      	mov	r5, r2
 8006c44:	1b1a      	subs	r2, r3, r4
 8006c46:	d004      	beq.n	8006c52 <_dtoa_r+0x6c2>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f000 fbf6 	bl	800743c <__pow5mult>
 8006c50:	4605      	mov	r5, r0
 8006c52:	2101      	movs	r1, #1
 8006c54:	4630      	mov	r0, r6
 8006c56:	f000 fb31 	bl	80072bc <__i2b>
 8006c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	4604      	mov	r4, r0
 8006c60:	f340 8081 	ble.w	8006d66 <_dtoa_r+0x7d6>
 8006c64:	461a      	mov	r2, r3
 8006c66:	4601      	mov	r1, r0
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 fbe7 	bl	800743c <__pow5mult>
 8006c6e:	9b06      	ldr	r3, [sp, #24]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	4604      	mov	r4, r0
 8006c74:	dd7a      	ble.n	8006d6c <_dtoa_r+0x7dc>
 8006c76:	2300      	movs	r3, #0
 8006c78:	930a      	str	r3, [sp, #40]	; 0x28
 8006c7a:	6922      	ldr	r2, [r4, #16]
 8006c7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006c80:	6910      	ldr	r0, [r2, #16]
 8006c82:	f000 facb 	bl	800721c <__hi0bits>
 8006c86:	f1c0 0020 	rsb	r0, r0, #32
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	4418      	add	r0, r3
 8006c8e:	f010 001f 	ands.w	r0, r0, #31
 8006c92:	f000 808c 	beq.w	8006dae <_dtoa_r+0x81e>
 8006c96:	f1c0 0220 	rsb	r2, r0, #32
 8006c9a:	2a04      	cmp	r2, #4
 8006c9c:	f340 8085 	ble.w	8006daa <_dtoa_r+0x81a>
 8006ca0:	f1c0 001c 	rsb	r0, r0, #28
 8006ca4:	9b04      	ldr	r3, [sp, #16]
 8006ca6:	4403      	add	r3, r0
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	9b05      	ldr	r3, [sp, #20]
 8006cac:	4403      	add	r3, r0
 8006cae:	4480      	add	r8, r0
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	9b04      	ldr	r3, [sp, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dd05      	ble.n	8006cc4 <_dtoa_r+0x734>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	f000 fc17 	bl	80074f0 <__lshift>
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	9b05      	ldr	r3, [sp, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dd05      	ble.n	8006cd6 <_dtoa_r+0x746>
 8006cca:	4621      	mov	r1, r4
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f000 fc0e 	bl	80074f0 <__lshift>
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d06a      	beq.n	8006db2 <_dtoa_r+0x822>
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f000 fc76 	bl	80075d0 <__mcmp>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	da64      	bge.n	8006db2 <_dtoa_r+0x822>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4629      	mov	r1, r5
 8006cec:	220a      	movs	r2, #10
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f000 fa4e 	bl	8007190 <__multadd>
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8191 	beq.w	8007024 <_dtoa_r+0xa94>
 8006d02:	4639      	mov	r1, r7
 8006d04:	2300      	movs	r3, #0
 8006d06:	220a      	movs	r2, #10
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f000 fa41 	bl	8007190 <__multadd>
 8006d0e:	f1ba 0f00 	cmp.w	sl, #0
 8006d12:	4607      	mov	r7, r0
 8006d14:	f300 808d 	bgt.w	8006e32 <_dtoa_r+0x8a2>
 8006d18:	9b06      	ldr	r3, [sp, #24]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	dc50      	bgt.n	8006dc0 <_dtoa_r+0x830>
 8006d1e:	e088      	b.n	8006e32 <_dtoa_r+0x8a2>
 8006d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d22:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006d26:	e751      	b.n	8006bcc <_dtoa_r+0x63c>
 8006d28:	f109 34ff 	add.w	r4, r9, #4294967295
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	bfbf      	itttt	lt
 8006d30:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006d32:	1ae3      	sublt	r3, r4, r3
 8006d34:	18d2      	addlt	r2, r2, r3
 8006d36:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006d38:	bfb6      	itet	lt
 8006d3a:	4623      	movlt	r3, r4
 8006d3c:	1b1c      	subge	r4, r3, r4
 8006d3e:	2400      	movlt	r4, #0
 8006d40:	f1b9 0f00 	cmp.w	r9, #0
 8006d44:	bfb5      	itete	lt
 8006d46:	9a04      	ldrlt	r2, [sp, #16]
 8006d48:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006d4c:	eba2 0809 	sublt.w	r8, r2, r9
 8006d50:	464a      	movge	r2, r9
 8006d52:	bfb8      	it	lt
 8006d54:	2200      	movlt	r2, #0
 8006d56:	e73c      	b.n	8006bd2 <_dtoa_r+0x642>
 8006d58:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006d5c:	9f07      	ldr	r7, [sp, #28]
 8006d5e:	461c      	mov	r4, r3
 8006d60:	e744      	b.n	8006bec <_dtoa_r+0x65c>
 8006d62:	461a      	mov	r2, r3
 8006d64:	e770      	b.n	8006c48 <_dtoa_r+0x6b8>
 8006d66:	9b06      	ldr	r3, [sp, #24]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	dc18      	bgt.n	8006d9e <_dtoa_r+0x80e>
 8006d6c:	9b02      	ldr	r3, [sp, #8]
 8006d6e:	b9b3      	cbnz	r3, 8006d9e <_dtoa_r+0x80e>
 8006d70:	9b03      	ldr	r3, [sp, #12]
 8006d72:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006d76:	b9a2      	cbnz	r2, 8006da2 <_dtoa_r+0x812>
 8006d78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d7c:	0d12      	lsrs	r2, r2, #20
 8006d7e:	0512      	lsls	r2, r2, #20
 8006d80:	b18a      	cbz	r2, 8006da6 <_dtoa_r+0x816>
 8006d82:	9b04      	ldr	r3, [sp, #16]
 8006d84:	3301      	adds	r3, #1
 8006d86:	9304      	str	r3, [sp, #16]
 8006d88:	9b05      	ldr	r3, [sp, #20]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	2301      	movs	r3, #1
 8006d90:	930a      	str	r3, [sp, #40]	; 0x28
 8006d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f47f af70 	bne.w	8006c7a <_dtoa_r+0x6ea>
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	e775      	b.n	8006c8a <_dtoa_r+0x6fa>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e7f6      	b.n	8006d90 <_dtoa_r+0x800>
 8006da2:	9b02      	ldr	r3, [sp, #8]
 8006da4:	e7f4      	b.n	8006d90 <_dtoa_r+0x800>
 8006da6:	920a      	str	r2, [sp, #40]	; 0x28
 8006da8:	e7f3      	b.n	8006d92 <_dtoa_r+0x802>
 8006daa:	d082      	beq.n	8006cb2 <_dtoa_r+0x722>
 8006dac:	4610      	mov	r0, r2
 8006dae:	301c      	adds	r0, #28
 8006db0:	e778      	b.n	8006ca4 <_dtoa_r+0x714>
 8006db2:	f1b9 0f00 	cmp.w	r9, #0
 8006db6:	dc37      	bgt.n	8006e28 <_dtoa_r+0x898>
 8006db8:	9b06      	ldr	r3, [sp, #24]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	dd34      	ble.n	8006e28 <_dtoa_r+0x898>
 8006dbe:	46ca      	mov	sl, r9
 8006dc0:	f1ba 0f00 	cmp.w	sl, #0
 8006dc4:	d10d      	bne.n	8006de2 <_dtoa_r+0x852>
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4653      	mov	r3, sl
 8006dca:	2205      	movs	r2, #5
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f000 f9df 	bl	8007190 <__multadd>
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 fbfa 	bl	80075d0 <__mcmp>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f73f adeb 	bgt.w	80069b8 <_dtoa_r+0x428>
 8006de2:	9b08      	ldr	r3, [sp, #32]
 8006de4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006de8:	ea6f 0b03 	mvn.w	fp, r3
 8006dec:	f04f 0900 	mov.w	r9, #0
 8006df0:	4621      	mov	r1, r4
 8006df2:	4630      	mov	r0, r6
 8006df4:	f000 f9aa 	bl	800714c <_Bfree>
 8006df8:	2f00      	cmp	r7, #0
 8006dfa:	f43f aea8 	beq.w	8006b4e <_dtoa_r+0x5be>
 8006dfe:	f1b9 0f00 	cmp.w	r9, #0
 8006e02:	d005      	beq.n	8006e10 <_dtoa_r+0x880>
 8006e04:	45b9      	cmp	r9, r7
 8006e06:	d003      	beq.n	8006e10 <_dtoa_r+0x880>
 8006e08:	4649      	mov	r1, r9
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f000 f99e 	bl	800714c <_Bfree>
 8006e10:	4639      	mov	r1, r7
 8006e12:	4630      	mov	r0, r6
 8006e14:	f000 f99a 	bl	800714c <_Bfree>
 8006e18:	e699      	b.n	8006b4e <_dtoa_r+0x5be>
 8006e1a:	2400      	movs	r4, #0
 8006e1c:	4627      	mov	r7, r4
 8006e1e:	e7e0      	b.n	8006de2 <_dtoa_r+0x852>
 8006e20:	46bb      	mov	fp, r7
 8006e22:	4604      	mov	r4, r0
 8006e24:	4607      	mov	r7, r0
 8006e26:	e5c7      	b.n	80069b8 <_dtoa_r+0x428>
 8006e28:	9b07      	ldr	r3, [sp, #28]
 8006e2a:	46ca      	mov	sl, r9
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8100 	beq.w	8007032 <_dtoa_r+0xaa2>
 8006e32:	f1b8 0f00 	cmp.w	r8, #0
 8006e36:	dd05      	ble.n	8006e44 <_dtoa_r+0x8b4>
 8006e38:	4639      	mov	r1, r7
 8006e3a:	4642      	mov	r2, r8
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f000 fb57 	bl	80074f0 <__lshift>
 8006e42:	4607      	mov	r7, r0
 8006e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d05d      	beq.n	8006f06 <_dtoa_r+0x976>
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f000 f93d 	bl	80070cc <_Balloc>
 8006e52:	4680      	mov	r8, r0
 8006e54:	b928      	cbnz	r0, 8006e62 <_dtoa_r+0x8d2>
 8006e56:	4b82      	ldr	r3, [pc, #520]	; (8007060 <_dtoa_r+0xad0>)
 8006e58:	4602      	mov	r2, r0
 8006e5a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e5e:	f7ff bbaf 	b.w	80065c0 <_dtoa_r+0x30>
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	3202      	adds	r2, #2
 8006e66:	0092      	lsls	r2, r2, #2
 8006e68:	f107 010c 	add.w	r1, r7, #12
 8006e6c:	300c      	adds	r0, #12
 8006e6e:	f000 f913 	bl	8007098 <memcpy>
 8006e72:	2201      	movs	r2, #1
 8006e74:	4641      	mov	r1, r8
 8006e76:	4630      	mov	r0, r6
 8006e78:	f000 fb3a 	bl	80074f0 <__lshift>
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	9b01      	ldr	r3, [sp, #4]
 8006e84:	4453      	add	r3, sl
 8006e86:	9308      	str	r3, [sp, #32]
 8006e88:	9b02      	ldr	r3, [sp, #8]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	46b9      	mov	r9, r7
 8006e90:	9307      	str	r3, [sp, #28]
 8006e92:	4607      	mov	r7, r0
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	4621      	mov	r1, r4
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	9302      	str	r3, [sp, #8]
 8006e9e:	f7ff faeb 	bl	8006478 <quorem>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	3330      	adds	r3, #48	; 0x30
 8006ea6:	9005      	str	r0, [sp, #20]
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	4628      	mov	r0, r5
 8006eac:	9309      	str	r3, [sp, #36]	; 0x24
 8006eae:	f000 fb8f 	bl	80075d0 <__mcmp>
 8006eb2:	463a      	mov	r2, r7
 8006eb4:	4682      	mov	sl, r0
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f000 fba5 	bl	8007608 <__mdiff>
 8006ebe:	68c2      	ldr	r2, [r0, #12]
 8006ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	bb0a      	cbnz	r2, 8006f0a <_dtoa_r+0x97a>
 8006ec6:	4601      	mov	r1, r0
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 fb81 	bl	80075d0 <__mcmp>
 8006ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	4641      	mov	r1, r8
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006eda:	f000 f937 	bl	800714c <_Bfree>
 8006ede:	9b06      	ldr	r3, [sp, #24]
 8006ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ee2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006ee6:	ea43 0102 	orr.w	r1, r3, r2
 8006eea:	9b07      	ldr	r3, [sp, #28]
 8006eec:	430b      	orrs	r3, r1
 8006eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef0:	d10d      	bne.n	8006f0e <_dtoa_r+0x97e>
 8006ef2:	2b39      	cmp	r3, #57	; 0x39
 8006ef4:	d029      	beq.n	8006f4a <_dtoa_r+0x9ba>
 8006ef6:	f1ba 0f00 	cmp.w	sl, #0
 8006efa:	dd01      	ble.n	8006f00 <_dtoa_r+0x970>
 8006efc:	9b05      	ldr	r3, [sp, #20]
 8006efe:	3331      	adds	r3, #49	; 0x31
 8006f00:	9a02      	ldr	r2, [sp, #8]
 8006f02:	7013      	strb	r3, [r2, #0]
 8006f04:	e774      	b.n	8006df0 <_dtoa_r+0x860>
 8006f06:	4638      	mov	r0, r7
 8006f08:	e7b8      	b.n	8006e7c <_dtoa_r+0x8ec>
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	e7e1      	b.n	8006ed2 <_dtoa_r+0x942>
 8006f0e:	f1ba 0f00 	cmp.w	sl, #0
 8006f12:	db06      	blt.n	8006f22 <_dtoa_r+0x992>
 8006f14:	9906      	ldr	r1, [sp, #24]
 8006f16:	ea41 0a0a 	orr.w	sl, r1, sl
 8006f1a:	9907      	ldr	r1, [sp, #28]
 8006f1c:	ea5a 0101 	orrs.w	r1, sl, r1
 8006f20:	d120      	bne.n	8006f64 <_dtoa_r+0x9d4>
 8006f22:	2a00      	cmp	r2, #0
 8006f24:	ddec      	ble.n	8006f00 <_dtoa_r+0x970>
 8006f26:	4629      	mov	r1, r5
 8006f28:	2201      	movs	r2, #1
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	9304      	str	r3, [sp, #16]
 8006f2e:	f000 fadf 	bl	80074f0 <__lshift>
 8006f32:	4621      	mov	r1, r4
 8006f34:	4605      	mov	r5, r0
 8006f36:	f000 fb4b 	bl	80075d0 <__mcmp>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	9b04      	ldr	r3, [sp, #16]
 8006f3e:	dc02      	bgt.n	8006f46 <_dtoa_r+0x9b6>
 8006f40:	d1de      	bne.n	8006f00 <_dtoa_r+0x970>
 8006f42:	07da      	lsls	r2, r3, #31
 8006f44:	d5dc      	bpl.n	8006f00 <_dtoa_r+0x970>
 8006f46:	2b39      	cmp	r3, #57	; 0x39
 8006f48:	d1d8      	bne.n	8006efc <_dtoa_r+0x96c>
 8006f4a:	9a02      	ldr	r2, [sp, #8]
 8006f4c:	2339      	movs	r3, #57	; 0x39
 8006f4e:	7013      	strb	r3, [r2, #0]
 8006f50:	4643      	mov	r3, r8
 8006f52:	4698      	mov	r8, r3
 8006f54:	3b01      	subs	r3, #1
 8006f56:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006f5a:	2a39      	cmp	r2, #57	; 0x39
 8006f5c:	d051      	beq.n	8007002 <_dtoa_r+0xa72>
 8006f5e:	3201      	adds	r2, #1
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	e745      	b.n	8006df0 <_dtoa_r+0x860>
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	dd03      	ble.n	8006f70 <_dtoa_r+0x9e0>
 8006f68:	2b39      	cmp	r3, #57	; 0x39
 8006f6a:	d0ee      	beq.n	8006f4a <_dtoa_r+0x9ba>
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	e7c7      	b.n	8006f00 <_dtoa_r+0x970>
 8006f70:	9a04      	ldr	r2, [sp, #16]
 8006f72:	9908      	ldr	r1, [sp, #32]
 8006f74:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f78:	428a      	cmp	r2, r1
 8006f7a:	d02b      	beq.n	8006fd4 <_dtoa_r+0xa44>
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	2300      	movs	r3, #0
 8006f80:	220a      	movs	r2, #10
 8006f82:	4630      	mov	r0, r6
 8006f84:	f000 f904 	bl	8007190 <__multadd>
 8006f88:	45b9      	cmp	r9, r7
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	f04f 020a 	mov.w	r2, #10
 8006f94:	4649      	mov	r1, r9
 8006f96:	4630      	mov	r0, r6
 8006f98:	d107      	bne.n	8006faa <_dtoa_r+0xa1a>
 8006f9a:	f000 f8f9 	bl	8007190 <__multadd>
 8006f9e:	4681      	mov	r9, r0
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	9304      	str	r3, [sp, #16]
 8006fa8:	e774      	b.n	8006e94 <_dtoa_r+0x904>
 8006faa:	f000 f8f1 	bl	8007190 <__multadd>
 8006fae:	4639      	mov	r1, r7
 8006fb0:	4681      	mov	r9, r0
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	220a      	movs	r2, #10
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f000 f8ea 	bl	8007190 <__multadd>
 8006fbc:	4607      	mov	r7, r0
 8006fbe:	e7f0      	b.n	8006fa2 <_dtoa_r+0xa12>
 8006fc0:	f1ba 0f00 	cmp.w	sl, #0
 8006fc4:	9a01      	ldr	r2, [sp, #4]
 8006fc6:	bfcc      	ite	gt
 8006fc8:	46d0      	movgt	r8, sl
 8006fca:	f04f 0801 	movle.w	r8, #1
 8006fce:	4490      	add	r8, r2
 8006fd0:	f04f 0900 	mov.w	r9, #0
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	4630      	mov	r0, r6
 8006fda:	9302      	str	r3, [sp, #8]
 8006fdc:	f000 fa88 	bl	80074f0 <__lshift>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	f000 faf4 	bl	80075d0 <__mcmp>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dcb1      	bgt.n	8006f50 <_dtoa_r+0x9c0>
 8006fec:	d102      	bne.n	8006ff4 <_dtoa_r+0xa64>
 8006fee:	9b02      	ldr	r3, [sp, #8]
 8006ff0:	07db      	lsls	r3, r3, #31
 8006ff2:	d4ad      	bmi.n	8006f50 <_dtoa_r+0x9c0>
 8006ff4:	4643      	mov	r3, r8
 8006ff6:	4698      	mov	r8, r3
 8006ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffc:	2a30      	cmp	r2, #48	; 0x30
 8006ffe:	d0fa      	beq.n	8006ff6 <_dtoa_r+0xa66>
 8007000:	e6f6      	b.n	8006df0 <_dtoa_r+0x860>
 8007002:	9a01      	ldr	r2, [sp, #4]
 8007004:	429a      	cmp	r2, r3
 8007006:	d1a4      	bne.n	8006f52 <_dtoa_r+0x9c2>
 8007008:	f10b 0b01 	add.w	fp, fp, #1
 800700c:	2331      	movs	r3, #49	; 0x31
 800700e:	e778      	b.n	8006f02 <_dtoa_r+0x972>
 8007010:	4b14      	ldr	r3, [pc, #80]	; (8007064 <_dtoa_r+0xad4>)
 8007012:	f7ff bb27 	b.w	8006664 <_dtoa_r+0xd4>
 8007016:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007018:	2b00      	cmp	r3, #0
 800701a:	f47f ab03 	bne.w	8006624 <_dtoa_r+0x94>
 800701e:	4b12      	ldr	r3, [pc, #72]	; (8007068 <_dtoa_r+0xad8>)
 8007020:	f7ff bb20 	b.w	8006664 <_dtoa_r+0xd4>
 8007024:	f1ba 0f00 	cmp.w	sl, #0
 8007028:	dc03      	bgt.n	8007032 <_dtoa_r+0xaa2>
 800702a:	9b06      	ldr	r3, [sp, #24]
 800702c:	2b02      	cmp	r3, #2
 800702e:	f73f aec7 	bgt.w	8006dc0 <_dtoa_r+0x830>
 8007032:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007036:	4621      	mov	r1, r4
 8007038:	4628      	mov	r0, r5
 800703a:	f7ff fa1d 	bl	8006478 <quorem>
 800703e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007042:	f808 3b01 	strb.w	r3, [r8], #1
 8007046:	9a01      	ldr	r2, [sp, #4]
 8007048:	eba8 0202 	sub.w	r2, r8, r2
 800704c:	4592      	cmp	sl, r2
 800704e:	ddb7      	ble.n	8006fc0 <_dtoa_r+0xa30>
 8007050:	4629      	mov	r1, r5
 8007052:	2300      	movs	r3, #0
 8007054:	220a      	movs	r2, #10
 8007056:	4630      	mov	r0, r6
 8007058:	f000 f89a 	bl	8007190 <__multadd>
 800705c:	4605      	mov	r5, r0
 800705e:	e7ea      	b.n	8007036 <_dtoa_r+0xaa6>
 8007060:	08008e63 	.word	0x08008e63
 8007064:	08008dc0 	.word	0x08008dc0
 8007068:	08008de4 	.word	0x08008de4

0800706c <_localeconv_r>:
 800706c:	4800      	ldr	r0, [pc, #0]	; (8007070 <_localeconv_r+0x4>)
 800706e:	4770      	bx	lr
 8007070:	20000164 	.word	0x20000164

08007074 <_lseek_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d07      	ldr	r5, [pc, #28]	; (8007094 <_lseek_r+0x20>)
 8007078:	4604      	mov	r4, r0
 800707a:	4608      	mov	r0, r1
 800707c:	4611      	mov	r1, r2
 800707e:	2200      	movs	r2, #0
 8007080:	602a      	str	r2, [r5, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	f001 fa82 	bl	800858c <_lseek>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_lseek_r+0x1e>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_lseek_r+0x1e>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	20000e48 	.word	0x20000e48

08007098 <memcpy>:
 8007098:	440a      	add	r2, r1
 800709a:	4291      	cmp	r1, r2
 800709c:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a0:	d100      	bne.n	80070a4 <memcpy+0xc>
 80070a2:	4770      	bx	lr
 80070a4:	b510      	push	{r4, lr}
 80070a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ae:	4291      	cmp	r1, r2
 80070b0:	d1f9      	bne.n	80070a6 <memcpy+0xe>
 80070b2:	bd10      	pop	{r4, pc}

080070b4 <__malloc_lock>:
 80070b4:	4801      	ldr	r0, [pc, #4]	; (80070bc <__malloc_lock+0x8>)
 80070b6:	f000 bee3 	b.w	8007e80 <__retarget_lock_acquire_recursive>
 80070ba:	bf00      	nop
 80070bc:	20000e4c 	.word	0x20000e4c

080070c0 <__malloc_unlock>:
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <__malloc_unlock+0x8>)
 80070c2:	f000 bede 	b.w	8007e82 <__retarget_lock_release_recursive>
 80070c6:	bf00      	nop
 80070c8:	20000e4c 	.word	0x20000e4c

080070cc <_Balloc>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	b976      	cbnz	r6, 80070f4 <_Balloc+0x28>
 80070d6:	2010      	movs	r0, #16
 80070d8:	f7fe fbe6 	bl	80058a8 <malloc>
 80070dc:	4602      	mov	r2, r0
 80070de:	6260      	str	r0, [r4, #36]	; 0x24
 80070e0:	b920      	cbnz	r0, 80070ec <_Balloc+0x20>
 80070e2:	4b18      	ldr	r3, [pc, #96]	; (8007144 <_Balloc+0x78>)
 80070e4:	4818      	ldr	r0, [pc, #96]	; (8007148 <_Balloc+0x7c>)
 80070e6:	2166      	movs	r1, #102	; 0x66
 80070e8:	f000 fce2 	bl	8007ab0 <__assert_func>
 80070ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070f0:	6006      	str	r6, [r0, #0]
 80070f2:	60c6      	str	r6, [r0, #12]
 80070f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070f6:	68f3      	ldr	r3, [r6, #12]
 80070f8:	b183      	cbz	r3, 800711c <_Balloc+0x50>
 80070fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007102:	b9b8      	cbnz	r0, 8007134 <_Balloc+0x68>
 8007104:	2101      	movs	r1, #1
 8007106:	fa01 f605 	lsl.w	r6, r1, r5
 800710a:	1d72      	adds	r2, r6, #5
 800710c:	0092      	lsls	r2, r2, #2
 800710e:	4620      	mov	r0, r4
 8007110:	f7fe fbe2 	bl	80058d8 <_calloc_r>
 8007114:	b160      	cbz	r0, 8007130 <_Balloc+0x64>
 8007116:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800711a:	e00e      	b.n	800713a <_Balloc+0x6e>
 800711c:	2221      	movs	r2, #33	; 0x21
 800711e:	2104      	movs	r1, #4
 8007120:	4620      	mov	r0, r4
 8007122:	f7fe fbd9 	bl	80058d8 <_calloc_r>
 8007126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007128:	60f0      	str	r0, [r6, #12]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e4      	bne.n	80070fa <_Balloc+0x2e>
 8007130:	2000      	movs	r0, #0
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	6802      	ldr	r2, [r0, #0]
 8007136:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800713a:	2300      	movs	r3, #0
 800713c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007140:	e7f7      	b.n	8007132 <_Balloc+0x66>
 8007142:	bf00      	nop
 8007144:	08008df1 	.word	0x08008df1
 8007148:	08008e74 	.word	0x08008e74

0800714c <_Bfree>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007150:	4605      	mov	r5, r0
 8007152:	460c      	mov	r4, r1
 8007154:	b976      	cbnz	r6, 8007174 <_Bfree+0x28>
 8007156:	2010      	movs	r0, #16
 8007158:	f7fe fba6 	bl	80058a8 <malloc>
 800715c:	4602      	mov	r2, r0
 800715e:	6268      	str	r0, [r5, #36]	; 0x24
 8007160:	b920      	cbnz	r0, 800716c <_Bfree+0x20>
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <_Bfree+0x3c>)
 8007164:	4809      	ldr	r0, [pc, #36]	; (800718c <_Bfree+0x40>)
 8007166:	218a      	movs	r1, #138	; 0x8a
 8007168:	f000 fca2 	bl	8007ab0 <__assert_func>
 800716c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007170:	6006      	str	r6, [r0, #0]
 8007172:	60c6      	str	r6, [r0, #12]
 8007174:	b13c      	cbz	r4, 8007186 <_Bfree+0x3a>
 8007176:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007178:	6862      	ldr	r2, [r4, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007180:	6021      	str	r1, [r4, #0]
 8007182:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	08008df1 	.word	0x08008df1
 800718c:	08008e74 	.word	0x08008e74

08007190 <__multadd>:
 8007190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007194:	690d      	ldr	r5, [r1, #16]
 8007196:	4607      	mov	r7, r0
 8007198:	460c      	mov	r4, r1
 800719a:	461e      	mov	r6, r3
 800719c:	f101 0c14 	add.w	ip, r1, #20
 80071a0:	2000      	movs	r0, #0
 80071a2:	f8dc 3000 	ldr.w	r3, [ip]
 80071a6:	b299      	uxth	r1, r3
 80071a8:	fb02 6101 	mla	r1, r2, r1, r6
 80071ac:	0c1e      	lsrs	r6, r3, #16
 80071ae:	0c0b      	lsrs	r3, r1, #16
 80071b0:	fb02 3306 	mla	r3, r2, r6, r3
 80071b4:	b289      	uxth	r1, r1
 80071b6:	3001      	adds	r0, #1
 80071b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071bc:	4285      	cmp	r5, r0
 80071be:	f84c 1b04 	str.w	r1, [ip], #4
 80071c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071c6:	dcec      	bgt.n	80071a2 <__multadd+0x12>
 80071c8:	b30e      	cbz	r6, 800720e <__multadd+0x7e>
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	42ab      	cmp	r3, r5
 80071ce:	dc19      	bgt.n	8007204 <__multadd+0x74>
 80071d0:	6861      	ldr	r1, [r4, #4]
 80071d2:	4638      	mov	r0, r7
 80071d4:	3101      	adds	r1, #1
 80071d6:	f7ff ff79 	bl	80070cc <_Balloc>
 80071da:	4680      	mov	r8, r0
 80071dc:	b928      	cbnz	r0, 80071ea <__multadd+0x5a>
 80071de:	4602      	mov	r2, r0
 80071e0:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <__multadd+0x84>)
 80071e2:	480d      	ldr	r0, [pc, #52]	; (8007218 <__multadd+0x88>)
 80071e4:	21b5      	movs	r1, #181	; 0xb5
 80071e6:	f000 fc63 	bl	8007ab0 <__assert_func>
 80071ea:	6922      	ldr	r2, [r4, #16]
 80071ec:	3202      	adds	r2, #2
 80071ee:	f104 010c 	add.w	r1, r4, #12
 80071f2:	0092      	lsls	r2, r2, #2
 80071f4:	300c      	adds	r0, #12
 80071f6:	f7ff ff4f 	bl	8007098 <memcpy>
 80071fa:	4621      	mov	r1, r4
 80071fc:	4638      	mov	r0, r7
 80071fe:	f7ff ffa5 	bl	800714c <_Bfree>
 8007202:	4644      	mov	r4, r8
 8007204:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007208:	3501      	adds	r5, #1
 800720a:	615e      	str	r6, [r3, #20]
 800720c:	6125      	str	r5, [r4, #16]
 800720e:	4620      	mov	r0, r4
 8007210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007214:	08008e63 	.word	0x08008e63
 8007218:	08008e74 	.word	0x08008e74

0800721c <__hi0bits>:
 800721c:	0c03      	lsrs	r3, r0, #16
 800721e:	041b      	lsls	r3, r3, #16
 8007220:	b9d3      	cbnz	r3, 8007258 <__hi0bits+0x3c>
 8007222:	0400      	lsls	r0, r0, #16
 8007224:	2310      	movs	r3, #16
 8007226:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800722a:	bf04      	itt	eq
 800722c:	0200      	lsleq	r0, r0, #8
 800722e:	3308      	addeq	r3, #8
 8007230:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007234:	bf04      	itt	eq
 8007236:	0100      	lsleq	r0, r0, #4
 8007238:	3304      	addeq	r3, #4
 800723a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800723e:	bf04      	itt	eq
 8007240:	0080      	lsleq	r0, r0, #2
 8007242:	3302      	addeq	r3, #2
 8007244:	2800      	cmp	r0, #0
 8007246:	db05      	blt.n	8007254 <__hi0bits+0x38>
 8007248:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800724c:	f103 0301 	add.w	r3, r3, #1
 8007250:	bf08      	it	eq
 8007252:	2320      	moveq	r3, #32
 8007254:	4618      	mov	r0, r3
 8007256:	4770      	bx	lr
 8007258:	2300      	movs	r3, #0
 800725a:	e7e4      	b.n	8007226 <__hi0bits+0xa>

0800725c <__lo0bits>:
 800725c:	6803      	ldr	r3, [r0, #0]
 800725e:	f013 0207 	ands.w	r2, r3, #7
 8007262:	4601      	mov	r1, r0
 8007264:	d00b      	beq.n	800727e <__lo0bits+0x22>
 8007266:	07da      	lsls	r2, r3, #31
 8007268:	d423      	bmi.n	80072b2 <__lo0bits+0x56>
 800726a:	0798      	lsls	r0, r3, #30
 800726c:	bf49      	itett	mi
 800726e:	085b      	lsrmi	r3, r3, #1
 8007270:	089b      	lsrpl	r3, r3, #2
 8007272:	2001      	movmi	r0, #1
 8007274:	600b      	strmi	r3, [r1, #0]
 8007276:	bf5c      	itt	pl
 8007278:	600b      	strpl	r3, [r1, #0]
 800727a:	2002      	movpl	r0, #2
 800727c:	4770      	bx	lr
 800727e:	b298      	uxth	r0, r3
 8007280:	b9a8      	cbnz	r0, 80072ae <__lo0bits+0x52>
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	2010      	movs	r0, #16
 8007286:	b2da      	uxtb	r2, r3
 8007288:	b90a      	cbnz	r2, 800728e <__lo0bits+0x32>
 800728a:	3008      	adds	r0, #8
 800728c:	0a1b      	lsrs	r3, r3, #8
 800728e:	071a      	lsls	r2, r3, #28
 8007290:	bf04      	itt	eq
 8007292:	091b      	lsreq	r3, r3, #4
 8007294:	3004      	addeq	r0, #4
 8007296:	079a      	lsls	r2, r3, #30
 8007298:	bf04      	itt	eq
 800729a:	089b      	lsreq	r3, r3, #2
 800729c:	3002      	addeq	r0, #2
 800729e:	07da      	lsls	r2, r3, #31
 80072a0:	d403      	bmi.n	80072aa <__lo0bits+0x4e>
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	f100 0001 	add.w	r0, r0, #1
 80072a8:	d005      	beq.n	80072b6 <__lo0bits+0x5a>
 80072aa:	600b      	str	r3, [r1, #0]
 80072ac:	4770      	bx	lr
 80072ae:	4610      	mov	r0, r2
 80072b0:	e7e9      	b.n	8007286 <__lo0bits+0x2a>
 80072b2:	2000      	movs	r0, #0
 80072b4:	4770      	bx	lr
 80072b6:	2020      	movs	r0, #32
 80072b8:	4770      	bx	lr
	...

080072bc <__i2b>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	460c      	mov	r4, r1
 80072c0:	2101      	movs	r1, #1
 80072c2:	f7ff ff03 	bl	80070cc <_Balloc>
 80072c6:	4602      	mov	r2, r0
 80072c8:	b928      	cbnz	r0, 80072d6 <__i2b+0x1a>
 80072ca:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <__i2b+0x24>)
 80072cc:	4805      	ldr	r0, [pc, #20]	; (80072e4 <__i2b+0x28>)
 80072ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072d2:	f000 fbed 	bl	8007ab0 <__assert_func>
 80072d6:	2301      	movs	r3, #1
 80072d8:	6144      	str	r4, [r0, #20]
 80072da:	6103      	str	r3, [r0, #16]
 80072dc:	bd10      	pop	{r4, pc}
 80072de:	bf00      	nop
 80072e0:	08008e63 	.word	0x08008e63
 80072e4:	08008e74 	.word	0x08008e74

080072e8 <__multiply>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	4691      	mov	r9, r2
 80072ee:	690a      	ldr	r2, [r1, #16]
 80072f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	bfb8      	it	lt
 80072f8:	460b      	movlt	r3, r1
 80072fa:	460c      	mov	r4, r1
 80072fc:	bfbc      	itt	lt
 80072fe:	464c      	movlt	r4, r9
 8007300:	4699      	movlt	r9, r3
 8007302:	6927      	ldr	r7, [r4, #16]
 8007304:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007308:	68a3      	ldr	r3, [r4, #8]
 800730a:	6861      	ldr	r1, [r4, #4]
 800730c:	eb07 060a 	add.w	r6, r7, sl
 8007310:	42b3      	cmp	r3, r6
 8007312:	b085      	sub	sp, #20
 8007314:	bfb8      	it	lt
 8007316:	3101      	addlt	r1, #1
 8007318:	f7ff fed8 	bl	80070cc <_Balloc>
 800731c:	b930      	cbnz	r0, 800732c <__multiply+0x44>
 800731e:	4602      	mov	r2, r0
 8007320:	4b44      	ldr	r3, [pc, #272]	; (8007434 <__multiply+0x14c>)
 8007322:	4845      	ldr	r0, [pc, #276]	; (8007438 <__multiply+0x150>)
 8007324:	f240 115d 	movw	r1, #349	; 0x15d
 8007328:	f000 fbc2 	bl	8007ab0 <__assert_func>
 800732c:	f100 0514 	add.w	r5, r0, #20
 8007330:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007334:	462b      	mov	r3, r5
 8007336:	2200      	movs	r2, #0
 8007338:	4543      	cmp	r3, r8
 800733a:	d321      	bcc.n	8007380 <__multiply+0x98>
 800733c:	f104 0314 	add.w	r3, r4, #20
 8007340:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007344:	f109 0314 	add.w	r3, r9, #20
 8007348:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800734c:	9202      	str	r2, [sp, #8]
 800734e:	1b3a      	subs	r2, r7, r4
 8007350:	3a15      	subs	r2, #21
 8007352:	f022 0203 	bic.w	r2, r2, #3
 8007356:	3204      	adds	r2, #4
 8007358:	f104 0115 	add.w	r1, r4, #21
 800735c:	428f      	cmp	r7, r1
 800735e:	bf38      	it	cc
 8007360:	2204      	movcc	r2, #4
 8007362:	9201      	str	r2, [sp, #4]
 8007364:	9a02      	ldr	r2, [sp, #8]
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	429a      	cmp	r2, r3
 800736a:	d80c      	bhi.n	8007386 <__multiply+0x9e>
 800736c:	2e00      	cmp	r6, #0
 800736e:	dd03      	ble.n	8007378 <__multiply+0x90>
 8007370:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007374:	2b00      	cmp	r3, #0
 8007376:	d05a      	beq.n	800742e <__multiply+0x146>
 8007378:	6106      	str	r6, [r0, #16]
 800737a:	b005      	add	sp, #20
 800737c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007380:	f843 2b04 	str.w	r2, [r3], #4
 8007384:	e7d8      	b.n	8007338 <__multiply+0x50>
 8007386:	f8b3 a000 	ldrh.w	sl, [r3]
 800738a:	f1ba 0f00 	cmp.w	sl, #0
 800738e:	d024      	beq.n	80073da <__multiply+0xf2>
 8007390:	f104 0e14 	add.w	lr, r4, #20
 8007394:	46a9      	mov	r9, r5
 8007396:	f04f 0c00 	mov.w	ip, #0
 800739a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800739e:	f8d9 1000 	ldr.w	r1, [r9]
 80073a2:	fa1f fb82 	uxth.w	fp, r2
 80073a6:	b289      	uxth	r1, r1
 80073a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80073ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073b0:	f8d9 2000 	ldr.w	r2, [r9]
 80073b4:	4461      	add	r1, ip
 80073b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80073be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073c2:	b289      	uxth	r1, r1
 80073c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073c8:	4577      	cmp	r7, lr
 80073ca:	f849 1b04 	str.w	r1, [r9], #4
 80073ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073d2:	d8e2      	bhi.n	800739a <__multiply+0xb2>
 80073d4:	9a01      	ldr	r2, [sp, #4]
 80073d6:	f845 c002 	str.w	ip, [r5, r2]
 80073da:	9a03      	ldr	r2, [sp, #12]
 80073dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073e0:	3304      	adds	r3, #4
 80073e2:	f1b9 0f00 	cmp.w	r9, #0
 80073e6:	d020      	beq.n	800742a <__multiply+0x142>
 80073e8:	6829      	ldr	r1, [r5, #0]
 80073ea:	f104 0c14 	add.w	ip, r4, #20
 80073ee:	46ae      	mov	lr, r5
 80073f0:	f04f 0a00 	mov.w	sl, #0
 80073f4:	f8bc b000 	ldrh.w	fp, [ip]
 80073f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073fc:	fb09 220b 	mla	r2, r9, fp, r2
 8007400:	4492      	add	sl, r2
 8007402:	b289      	uxth	r1, r1
 8007404:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007408:	f84e 1b04 	str.w	r1, [lr], #4
 800740c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007410:	f8be 1000 	ldrh.w	r1, [lr]
 8007414:	0c12      	lsrs	r2, r2, #16
 8007416:	fb09 1102 	mla	r1, r9, r2, r1
 800741a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800741e:	4567      	cmp	r7, ip
 8007420:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007424:	d8e6      	bhi.n	80073f4 <__multiply+0x10c>
 8007426:	9a01      	ldr	r2, [sp, #4]
 8007428:	50a9      	str	r1, [r5, r2]
 800742a:	3504      	adds	r5, #4
 800742c:	e79a      	b.n	8007364 <__multiply+0x7c>
 800742e:	3e01      	subs	r6, #1
 8007430:	e79c      	b.n	800736c <__multiply+0x84>
 8007432:	bf00      	nop
 8007434:	08008e63 	.word	0x08008e63
 8007438:	08008e74 	.word	0x08008e74

0800743c <__pow5mult>:
 800743c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007440:	4615      	mov	r5, r2
 8007442:	f012 0203 	ands.w	r2, r2, #3
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	d007      	beq.n	800745c <__pow5mult+0x20>
 800744c:	4c25      	ldr	r4, [pc, #148]	; (80074e4 <__pow5mult+0xa8>)
 800744e:	3a01      	subs	r2, #1
 8007450:	2300      	movs	r3, #0
 8007452:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007456:	f7ff fe9b 	bl	8007190 <__multadd>
 800745a:	4607      	mov	r7, r0
 800745c:	10ad      	asrs	r5, r5, #2
 800745e:	d03d      	beq.n	80074dc <__pow5mult+0xa0>
 8007460:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007462:	b97c      	cbnz	r4, 8007484 <__pow5mult+0x48>
 8007464:	2010      	movs	r0, #16
 8007466:	f7fe fa1f 	bl	80058a8 <malloc>
 800746a:	4602      	mov	r2, r0
 800746c:	6270      	str	r0, [r6, #36]	; 0x24
 800746e:	b928      	cbnz	r0, 800747c <__pow5mult+0x40>
 8007470:	4b1d      	ldr	r3, [pc, #116]	; (80074e8 <__pow5mult+0xac>)
 8007472:	481e      	ldr	r0, [pc, #120]	; (80074ec <__pow5mult+0xb0>)
 8007474:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007478:	f000 fb1a 	bl	8007ab0 <__assert_func>
 800747c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007480:	6004      	str	r4, [r0, #0]
 8007482:	60c4      	str	r4, [r0, #12]
 8007484:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007488:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800748c:	b94c      	cbnz	r4, 80074a2 <__pow5mult+0x66>
 800748e:	f240 2171 	movw	r1, #625	; 0x271
 8007492:	4630      	mov	r0, r6
 8007494:	f7ff ff12 	bl	80072bc <__i2b>
 8007498:	2300      	movs	r3, #0
 800749a:	f8c8 0008 	str.w	r0, [r8, #8]
 800749e:	4604      	mov	r4, r0
 80074a0:	6003      	str	r3, [r0, #0]
 80074a2:	f04f 0900 	mov.w	r9, #0
 80074a6:	07eb      	lsls	r3, r5, #31
 80074a8:	d50a      	bpl.n	80074c0 <__pow5mult+0x84>
 80074aa:	4639      	mov	r1, r7
 80074ac:	4622      	mov	r2, r4
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff ff1a 	bl	80072e8 <__multiply>
 80074b4:	4639      	mov	r1, r7
 80074b6:	4680      	mov	r8, r0
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff fe47 	bl	800714c <_Bfree>
 80074be:	4647      	mov	r7, r8
 80074c0:	106d      	asrs	r5, r5, #1
 80074c2:	d00b      	beq.n	80074dc <__pow5mult+0xa0>
 80074c4:	6820      	ldr	r0, [r4, #0]
 80074c6:	b938      	cbnz	r0, 80074d8 <__pow5mult+0x9c>
 80074c8:	4622      	mov	r2, r4
 80074ca:	4621      	mov	r1, r4
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7ff ff0b 	bl	80072e8 <__multiply>
 80074d2:	6020      	str	r0, [r4, #0]
 80074d4:	f8c0 9000 	str.w	r9, [r0]
 80074d8:	4604      	mov	r4, r0
 80074da:	e7e4      	b.n	80074a6 <__pow5mult+0x6a>
 80074dc:	4638      	mov	r0, r7
 80074de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074e2:	bf00      	nop
 80074e4:	08008fc0 	.word	0x08008fc0
 80074e8:	08008df1 	.word	0x08008df1
 80074ec:	08008e74 	.word	0x08008e74

080074f0 <__lshift>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	460c      	mov	r4, r1
 80074f6:	6849      	ldr	r1, [r1, #4]
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074fe:	68a3      	ldr	r3, [r4, #8]
 8007500:	4607      	mov	r7, r0
 8007502:	4691      	mov	r9, r2
 8007504:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007508:	f108 0601 	add.w	r6, r8, #1
 800750c:	42b3      	cmp	r3, r6
 800750e:	db0b      	blt.n	8007528 <__lshift+0x38>
 8007510:	4638      	mov	r0, r7
 8007512:	f7ff fddb 	bl	80070cc <_Balloc>
 8007516:	4605      	mov	r5, r0
 8007518:	b948      	cbnz	r0, 800752e <__lshift+0x3e>
 800751a:	4602      	mov	r2, r0
 800751c:	4b2a      	ldr	r3, [pc, #168]	; (80075c8 <__lshift+0xd8>)
 800751e:	482b      	ldr	r0, [pc, #172]	; (80075cc <__lshift+0xdc>)
 8007520:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007524:	f000 fac4 	bl	8007ab0 <__assert_func>
 8007528:	3101      	adds	r1, #1
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	e7ee      	b.n	800750c <__lshift+0x1c>
 800752e:	2300      	movs	r3, #0
 8007530:	f100 0114 	add.w	r1, r0, #20
 8007534:	f100 0210 	add.w	r2, r0, #16
 8007538:	4618      	mov	r0, r3
 800753a:	4553      	cmp	r3, sl
 800753c:	db37      	blt.n	80075ae <__lshift+0xbe>
 800753e:	6920      	ldr	r0, [r4, #16]
 8007540:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007544:	f104 0314 	add.w	r3, r4, #20
 8007548:	f019 091f 	ands.w	r9, r9, #31
 800754c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007550:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007554:	d02f      	beq.n	80075b6 <__lshift+0xc6>
 8007556:	f1c9 0e20 	rsb	lr, r9, #32
 800755a:	468a      	mov	sl, r1
 800755c:	f04f 0c00 	mov.w	ip, #0
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	fa02 f209 	lsl.w	r2, r2, r9
 8007566:	ea42 020c 	orr.w	r2, r2, ip
 800756a:	f84a 2b04 	str.w	r2, [sl], #4
 800756e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007572:	4298      	cmp	r0, r3
 8007574:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007578:	d8f2      	bhi.n	8007560 <__lshift+0x70>
 800757a:	1b03      	subs	r3, r0, r4
 800757c:	3b15      	subs	r3, #21
 800757e:	f023 0303 	bic.w	r3, r3, #3
 8007582:	3304      	adds	r3, #4
 8007584:	f104 0215 	add.w	r2, r4, #21
 8007588:	4290      	cmp	r0, r2
 800758a:	bf38      	it	cc
 800758c:	2304      	movcc	r3, #4
 800758e:	f841 c003 	str.w	ip, [r1, r3]
 8007592:	f1bc 0f00 	cmp.w	ip, #0
 8007596:	d001      	beq.n	800759c <__lshift+0xac>
 8007598:	f108 0602 	add.w	r6, r8, #2
 800759c:	3e01      	subs	r6, #1
 800759e:	4638      	mov	r0, r7
 80075a0:	612e      	str	r6, [r5, #16]
 80075a2:	4621      	mov	r1, r4
 80075a4:	f7ff fdd2 	bl	800714c <_Bfree>
 80075a8:	4628      	mov	r0, r5
 80075aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80075b2:	3301      	adds	r3, #1
 80075b4:	e7c1      	b.n	800753a <__lshift+0x4a>
 80075b6:	3904      	subs	r1, #4
 80075b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80075c0:	4298      	cmp	r0, r3
 80075c2:	d8f9      	bhi.n	80075b8 <__lshift+0xc8>
 80075c4:	e7ea      	b.n	800759c <__lshift+0xac>
 80075c6:	bf00      	nop
 80075c8:	08008e63 	.word	0x08008e63
 80075cc:	08008e74 	.word	0x08008e74

080075d0 <__mcmp>:
 80075d0:	b530      	push	{r4, r5, lr}
 80075d2:	6902      	ldr	r2, [r0, #16]
 80075d4:	690c      	ldr	r4, [r1, #16]
 80075d6:	1b12      	subs	r2, r2, r4
 80075d8:	d10e      	bne.n	80075f8 <__mcmp+0x28>
 80075da:	f100 0314 	add.w	r3, r0, #20
 80075de:	3114      	adds	r1, #20
 80075e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075f0:	42a5      	cmp	r5, r4
 80075f2:	d003      	beq.n	80075fc <__mcmp+0x2c>
 80075f4:	d305      	bcc.n	8007602 <__mcmp+0x32>
 80075f6:	2201      	movs	r2, #1
 80075f8:	4610      	mov	r0, r2
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	4283      	cmp	r3, r0
 80075fe:	d3f3      	bcc.n	80075e8 <__mcmp+0x18>
 8007600:	e7fa      	b.n	80075f8 <__mcmp+0x28>
 8007602:	f04f 32ff 	mov.w	r2, #4294967295
 8007606:	e7f7      	b.n	80075f8 <__mcmp+0x28>

08007608 <__mdiff>:
 8007608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	460c      	mov	r4, r1
 800760e:	4606      	mov	r6, r0
 8007610:	4611      	mov	r1, r2
 8007612:	4620      	mov	r0, r4
 8007614:	4690      	mov	r8, r2
 8007616:	f7ff ffdb 	bl	80075d0 <__mcmp>
 800761a:	1e05      	subs	r5, r0, #0
 800761c:	d110      	bne.n	8007640 <__mdiff+0x38>
 800761e:	4629      	mov	r1, r5
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff fd53 	bl	80070cc <_Balloc>
 8007626:	b930      	cbnz	r0, 8007636 <__mdiff+0x2e>
 8007628:	4b3a      	ldr	r3, [pc, #232]	; (8007714 <__mdiff+0x10c>)
 800762a:	4602      	mov	r2, r0
 800762c:	f240 2132 	movw	r1, #562	; 0x232
 8007630:	4839      	ldr	r0, [pc, #228]	; (8007718 <__mdiff+0x110>)
 8007632:	f000 fa3d 	bl	8007ab0 <__assert_func>
 8007636:	2301      	movs	r3, #1
 8007638:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800763c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007640:	bfa4      	itt	ge
 8007642:	4643      	movge	r3, r8
 8007644:	46a0      	movge	r8, r4
 8007646:	4630      	mov	r0, r6
 8007648:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800764c:	bfa6      	itte	ge
 800764e:	461c      	movge	r4, r3
 8007650:	2500      	movge	r5, #0
 8007652:	2501      	movlt	r5, #1
 8007654:	f7ff fd3a 	bl	80070cc <_Balloc>
 8007658:	b920      	cbnz	r0, 8007664 <__mdiff+0x5c>
 800765a:	4b2e      	ldr	r3, [pc, #184]	; (8007714 <__mdiff+0x10c>)
 800765c:	4602      	mov	r2, r0
 800765e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007662:	e7e5      	b.n	8007630 <__mdiff+0x28>
 8007664:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007668:	6926      	ldr	r6, [r4, #16]
 800766a:	60c5      	str	r5, [r0, #12]
 800766c:	f104 0914 	add.w	r9, r4, #20
 8007670:	f108 0514 	add.w	r5, r8, #20
 8007674:	f100 0e14 	add.w	lr, r0, #20
 8007678:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800767c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007680:	f108 0210 	add.w	r2, r8, #16
 8007684:	46f2      	mov	sl, lr
 8007686:	2100      	movs	r1, #0
 8007688:	f859 3b04 	ldr.w	r3, [r9], #4
 800768c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007690:	fa1f f883 	uxth.w	r8, r3
 8007694:	fa11 f18b 	uxtah	r1, r1, fp
 8007698:	0c1b      	lsrs	r3, r3, #16
 800769a:	eba1 0808 	sub.w	r8, r1, r8
 800769e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076a6:	fa1f f888 	uxth.w	r8, r8
 80076aa:	1419      	asrs	r1, r3, #16
 80076ac:	454e      	cmp	r6, r9
 80076ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076b2:	f84a 3b04 	str.w	r3, [sl], #4
 80076b6:	d8e7      	bhi.n	8007688 <__mdiff+0x80>
 80076b8:	1b33      	subs	r3, r6, r4
 80076ba:	3b15      	subs	r3, #21
 80076bc:	f023 0303 	bic.w	r3, r3, #3
 80076c0:	3304      	adds	r3, #4
 80076c2:	3415      	adds	r4, #21
 80076c4:	42a6      	cmp	r6, r4
 80076c6:	bf38      	it	cc
 80076c8:	2304      	movcc	r3, #4
 80076ca:	441d      	add	r5, r3
 80076cc:	4473      	add	r3, lr
 80076ce:	469e      	mov	lr, r3
 80076d0:	462e      	mov	r6, r5
 80076d2:	4566      	cmp	r6, ip
 80076d4:	d30e      	bcc.n	80076f4 <__mdiff+0xec>
 80076d6:	f10c 0203 	add.w	r2, ip, #3
 80076da:	1b52      	subs	r2, r2, r5
 80076dc:	f022 0203 	bic.w	r2, r2, #3
 80076e0:	3d03      	subs	r5, #3
 80076e2:	45ac      	cmp	ip, r5
 80076e4:	bf38      	it	cc
 80076e6:	2200      	movcc	r2, #0
 80076e8:	441a      	add	r2, r3
 80076ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076ee:	b17b      	cbz	r3, 8007710 <__mdiff+0x108>
 80076f0:	6107      	str	r7, [r0, #16]
 80076f2:	e7a3      	b.n	800763c <__mdiff+0x34>
 80076f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80076f8:	fa11 f288 	uxtah	r2, r1, r8
 80076fc:	1414      	asrs	r4, r2, #16
 80076fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007702:	b292      	uxth	r2, r2
 8007704:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007708:	f84e 2b04 	str.w	r2, [lr], #4
 800770c:	1421      	asrs	r1, r4, #16
 800770e:	e7e0      	b.n	80076d2 <__mdiff+0xca>
 8007710:	3f01      	subs	r7, #1
 8007712:	e7ea      	b.n	80076ea <__mdiff+0xe2>
 8007714:	08008e63 	.word	0x08008e63
 8007718:	08008e74 	.word	0x08008e74

0800771c <__d2b>:
 800771c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007720:	4689      	mov	r9, r1
 8007722:	2101      	movs	r1, #1
 8007724:	ec57 6b10 	vmov	r6, r7, d0
 8007728:	4690      	mov	r8, r2
 800772a:	f7ff fccf 	bl	80070cc <_Balloc>
 800772e:	4604      	mov	r4, r0
 8007730:	b930      	cbnz	r0, 8007740 <__d2b+0x24>
 8007732:	4602      	mov	r2, r0
 8007734:	4b25      	ldr	r3, [pc, #148]	; (80077cc <__d2b+0xb0>)
 8007736:	4826      	ldr	r0, [pc, #152]	; (80077d0 <__d2b+0xb4>)
 8007738:	f240 310a 	movw	r1, #778	; 0x30a
 800773c:	f000 f9b8 	bl	8007ab0 <__assert_func>
 8007740:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007744:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007748:	bb35      	cbnz	r5, 8007798 <__d2b+0x7c>
 800774a:	2e00      	cmp	r6, #0
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	d028      	beq.n	80077a2 <__d2b+0x86>
 8007750:	4668      	mov	r0, sp
 8007752:	9600      	str	r6, [sp, #0]
 8007754:	f7ff fd82 	bl	800725c <__lo0bits>
 8007758:	9900      	ldr	r1, [sp, #0]
 800775a:	b300      	cbz	r0, 800779e <__d2b+0x82>
 800775c:	9a01      	ldr	r2, [sp, #4]
 800775e:	f1c0 0320 	rsb	r3, r0, #32
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	430b      	orrs	r3, r1
 8007768:	40c2      	lsrs	r2, r0
 800776a:	6163      	str	r3, [r4, #20]
 800776c:	9201      	str	r2, [sp, #4]
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	61a3      	str	r3, [r4, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	bf14      	ite	ne
 8007776:	2202      	movne	r2, #2
 8007778:	2201      	moveq	r2, #1
 800777a:	6122      	str	r2, [r4, #16]
 800777c:	b1d5      	cbz	r5, 80077b4 <__d2b+0x98>
 800777e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007782:	4405      	add	r5, r0
 8007784:	f8c9 5000 	str.w	r5, [r9]
 8007788:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800778c:	f8c8 0000 	str.w	r0, [r8]
 8007790:	4620      	mov	r0, r4
 8007792:	b003      	add	sp, #12
 8007794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779c:	e7d5      	b.n	800774a <__d2b+0x2e>
 800779e:	6161      	str	r1, [r4, #20]
 80077a0:	e7e5      	b.n	800776e <__d2b+0x52>
 80077a2:	a801      	add	r0, sp, #4
 80077a4:	f7ff fd5a 	bl	800725c <__lo0bits>
 80077a8:	9b01      	ldr	r3, [sp, #4]
 80077aa:	6163      	str	r3, [r4, #20]
 80077ac:	2201      	movs	r2, #1
 80077ae:	6122      	str	r2, [r4, #16]
 80077b0:	3020      	adds	r0, #32
 80077b2:	e7e3      	b.n	800777c <__d2b+0x60>
 80077b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077bc:	f8c9 0000 	str.w	r0, [r9]
 80077c0:	6918      	ldr	r0, [r3, #16]
 80077c2:	f7ff fd2b 	bl	800721c <__hi0bits>
 80077c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077ca:	e7df      	b.n	800778c <__d2b+0x70>
 80077cc:	08008e63 	.word	0x08008e63
 80077d0:	08008e74 	.word	0x08008e74

080077d4 <__ssputs_r>:
 80077d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	688e      	ldr	r6, [r1, #8]
 80077da:	429e      	cmp	r6, r3
 80077dc:	4682      	mov	sl, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	4690      	mov	r8, r2
 80077e2:	461f      	mov	r7, r3
 80077e4:	d838      	bhi.n	8007858 <__ssputs_r+0x84>
 80077e6:	898a      	ldrh	r2, [r1, #12]
 80077e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077ec:	d032      	beq.n	8007854 <__ssputs_r+0x80>
 80077ee:	6825      	ldr	r5, [r4, #0]
 80077f0:	6909      	ldr	r1, [r1, #16]
 80077f2:	eba5 0901 	sub.w	r9, r5, r1
 80077f6:	6965      	ldr	r5, [r4, #20]
 80077f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007800:	3301      	adds	r3, #1
 8007802:	444b      	add	r3, r9
 8007804:	106d      	asrs	r5, r5, #1
 8007806:	429d      	cmp	r5, r3
 8007808:	bf38      	it	cc
 800780a:	461d      	movcc	r5, r3
 800780c:	0553      	lsls	r3, r2, #21
 800780e:	d531      	bpl.n	8007874 <__ssputs_r+0xa0>
 8007810:	4629      	mov	r1, r5
 8007812:	f7fe f8e3 	bl	80059dc <_malloc_r>
 8007816:	4606      	mov	r6, r0
 8007818:	b950      	cbnz	r0, 8007830 <__ssputs_r+0x5c>
 800781a:	230c      	movs	r3, #12
 800781c:	f8ca 3000 	str.w	r3, [sl]
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007826:	81a3      	strh	r3, [r4, #12]
 8007828:	f04f 30ff 	mov.w	r0, #4294967295
 800782c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007830:	6921      	ldr	r1, [r4, #16]
 8007832:	464a      	mov	r2, r9
 8007834:	f7ff fc30 	bl	8007098 <memcpy>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800783e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007842:	81a3      	strh	r3, [r4, #12]
 8007844:	6126      	str	r6, [r4, #16]
 8007846:	6165      	str	r5, [r4, #20]
 8007848:	444e      	add	r6, r9
 800784a:	eba5 0509 	sub.w	r5, r5, r9
 800784e:	6026      	str	r6, [r4, #0]
 8007850:	60a5      	str	r5, [r4, #8]
 8007852:	463e      	mov	r6, r7
 8007854:	42be      	cmp	r6, r7
 8007856:	d900      	bls.n	800785a <__ssputs_r+0x86>
 8007858:	463e      	mov	r6, r7
 800785a:	6820      	ldr	r0, [r4, #0]
 800785c:	4632      	mov	r2, r6
 800785e:	4641      	mov	r1, r8
 8007860:	f000 fb22 	bl	8007ea8 <memmove>
 8007864:	68a3      	ldr	r3, [r4, #8]
 8007866:	1b9b      	subs	r3, r3, r6
 8007868:	60a3      	str	r3, [r4, #8]
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	4433      	add	r3, r6
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	2000      	movs	r0, #0
 8007872:	e7db      	b.n	800782c <__ssputs_r+0x58>
 8007874:	462a      	mov	r2, r5
 8007876:	f000 fb31 	bl	8007edc <_realloc_r>
 800787a:	4606      	mov	r6, r0
 800787c:	2800      	cmp	r0, #0
 800787e:	d1e1      	bne.n	8007844 <__ssputs_r+0x70>
 8007880:	6921      	ldr	r1, [r4, #16]
 8007882:	4650      	mov	r0, sl
 8007884:	f7fe f83e 	bl	8005904 <_free_r>
 8007888:	e7c7      	b.n	800781a <__ssputs_r+0x46>
	...

0800788c <_svfiprintf_r>:
 800788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007890:	4698      	mov	r8, r3
 8007892:	898b      	ldrh	r3, [r1, #12]
 8007894:	061b      	lsls	r3, r3, #24
 8007896:	b09d      	sub	sp, #116	; 0x74
 8007898:	4607      	mov	r7, r0
 800789a:	460d      	mov	r5, r1
 800789c:	4614      	mov	r4, r2
 800789e:	d50e      	bpl.n	80078be <_svfiprintf_r+0x32>
 80078a0:	690b      	ldr	r3, [r1, #16]
 80078a2:	b963      	cbnz	r3, 80078be <_svfiprintf_r+0x32>
 80078a4:	2140      	movs	r1, #64	; 0x40
 80078a6:	f7fe f899 	bl	80059dc <_malloc_r>
 80078aa:	6028      	str	r0, [r5, #0]
 80078ac:	6128      	str	r0, [r5, #16]
 80078ae:	b920      	cbnz	r0, 80078ba <_svfiprintf_r+0x2e>
 80078b0:	230c      	movs	r3, #12
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	e0d1      	b.n	8007a5e <_svfiprintf_r+0x1d2>
 80078ba:	2340      	movs	r3, #64	; 0x40
 80078bc:	616b      	str	r3, [r5, #20]
 80078be:	2300      	movs	r3, #0
 80078c0:	9309      	str	r3, [sp, #36]	; 0x24
 80078c2:	2320      	movs	r3, #32
 80078c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80078cc:	2330      	movs	r3, #48	; 0x30
 80078ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a78 <_svfiprintf_r+0x1ec>
 80078d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078d6:	f04f 0901 	mov.w	r9, #1
 80078da:	4623      	mov	r3, r4
 80078dc:	469a      	mov	sl, r3
 80078de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e2:	b10a      	cbz	r2, 80078e8 <_svfiprintf_r+0x5c>
 80078e4:	2a25      	cmp	r2, #37	; 0x25
 80078e6:	d1f9      	bne.n	80078dc <_svfiprintf_r+0x50>
 80078e8:	ebba 0b04 	subs.w	fp, sl, r4
 80078ec:	d00b      	beq.n	8007906 <_svfiprintf_r+0x7a>
 80078ee:	465b      	mov	r3, fp
 80078f0:	4622      	mov	r2, r4
 80078f2:	4629      	mov	r1, r5
 80078f4:	4638      	mov	r0, r7
 80078f6:	f7ff ff6d 	bl	80077d4 <__ssputs_r>
 80078fa:	3001      	adds	r0, #1
 80078fc:	f000 80aa 	beq.w	8007a54 <_svfiprintf_r+0x1c8>
 8007900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007902:	445a      	add	r2, fp
 8007904:	9209      	str	r2, [sp, #36]	; 0x24
 8007906:	f89a 3000 	ldrb.w	r3, [sl]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80a2 	beq.w	8007a54 <_svfiprintf_r+0x1c8>
 8007910:	2300      	movs	r3, #0
 8007912:	f04f 32ff 	mov.w	r2, #4294967295
 8007916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800791a:	f10a 0a01 	add.w	sl, sl, #1
 800791e:	9304      	str	r3, [sp, #16]
 8007920:	9307      	str	r3, [sp, #28]
 8007922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007926:	931a      	str	r3, [sp, #104]	; 0x68
 8007928:	4654      	mov	r4, sl
 800792a:	2205      	movs	r2, #5
 800792c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007930:	4851      	ldr	r0, [pc, #324]	; (8007a78 <_svfiprintf_r+0x1ec>)
 8007932:	f7f8 fc8d 	bl	8000250 <memchr>
 8007936:	9a04      	ldr	r2, [sp, #16]
 8007938:	b9d8      	cbnz	r0, 8007972 <_svfiprintf_r+0xe6>
 800793a:	06d0      	lsls	r0, r2, #27
 800793c:	bf44      	itt	mi
 800793e:	2320      	movmi	r3, #32
 8007940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007944:	0711      	lsls	r1, r2, #28
 8007946:	bf44      	itt	mi
 8007948:	232b      	movmi	r3, #43	; 0x2b
 800794a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800794e:	f89a 3000 	ldrb.w	r3, [sl]
 8007952:	2b2a      	cmp	r3, #42	; 0x2a
 8007954:	d015      	beq.n	8007982 <_svfiprintf_r+0xf6>
 8007956:	9a07      	ldr	r2, [sp, #28]
 8007958:	4654      	mov	r4, sl
 800795a:	2000      	movs	r0, #0
 800795c:	f04f 0c0a 	mov.w	ip, #10
 8007960:	4621      	mov	r1, r4
 8007962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007966:	3b30      	subs	r3, #48	; 0x30
 8007968:	2b09      	cmp	r3, #9
 800796a:	d94e      	bls.n	8007a0a <_svfiprintf_r+0x17e>
 800796c:	b1b0      	cbz	r0, 800799c <_svfiprintf_r+0x110>
 800796e:	9207      	str	r2, [sp, #28]
 8007970:	e014      	b.n	800799c <_svfiprintf_r+0x110>
 8007972:	eba0 0308 	sub.w	r3, r0, r8
 8007976:	fa09 f303 	lsl.w	r3, r9, r3
 800797a:	4313      	orrs	r3, r2
 800797c:	9304      	str	r3, [sp, #16]
 800797e:	46a2      	mov	sl, r4
 8007980:	e7d2      	b.n	8007928 <_svfiprintf_r+0x9c>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	1d19      	adds	r1, r3, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	9103      	str	r1, [sp, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	bfbb      	ittet	lt
 800798e:	425b      	neglt	r3, r3
 8007990:	f042 0202 	orrlt.w	r2, r2, #2
 8007994:	9307      	strge	r3, [sp, #28]
 8007996:	9307      	strlt	r3, [sp, #28]
 8007998:	bfb8      	it	lt
 800799a:	9204      	strlt	r2, [sp, #16]
 800799c:	7823      	ldrb	r3, [r4, #0]
 800799e:	2b2e      	cmp	r3, #46	; 0x2e
 80079a0:	d10c      	bne.n	80079bc <_svfiprintf_r+0x130>
 80079a2:	7863      	ldrb	r3, [r4, #1]
 80079a4:	2b2a      	cmp	r3, #42	; 0x2a
 80079a6:	d135      	bne.n	8007a14 <_svfiprintf_r+0x188>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d1a      	adds	r2, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9203      	str	r2, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfb8      	it	lt
 80079b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079b8:	3402      	adds	r4, #2
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a88 <_svfiprintf_r+0x1fc>
 80079c0:	7821      	ldrb	r1, [r4, #0]
 80079c2:	2203      	movs	r2, #3
 80079c4:	4650      	mov	r0, sl
 80079c6:	f7f8 fc43 	bl	8000250 <memchr>
 80079ca:	b140      	cbz	r0, 80079de <_svfiprintf_r+0x152>
 80079cc:	2340      	movs	r3, #64	; 0x40
 80079ce:	eba0 000a 	sub.w	r0, r0, sl
 80079d2:	fa03 f000 	lsl.w	r0, r3, r0
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	4303      	orrs	r3, r0
 80079da:	3401      	adds	r4, #1
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e2:	4826      	ldr	r0, [pc, #152]	; (8007a7c <_svfiprintf_r+0x1f0>)
 80079e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079e8:	2206      	movs	r2, #6
 80079ea:	f7f8 fc31 	bl	8000250 <memchr>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d038      	beq.n	8007a64 <_svfiprintf_r+0x1d8>
 80079f2:	4b23      	ldr	r3, [pc, #140]	; (8007a80 <_svfiprintf_r+0x1f4>)
 80079f4:	bb1b      	cbnz	r3, 8007a3e <_svfiprintf_r+0x1b2>
 80079f6:	9b03      	ldr	r3, [sp, #12]
 80079f8:	3307      	adds	r3, #7
 80079fa:	f023 0307 	bic.w	r3, r3, #7
 80079fe:	3308      	adds	r3, #8
 8007a00:	9303      	str	r3, [sp, #12]
 8007a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a04:	4433      	add	r3, r6
 8007a06:	9309      	str	r3, [sp, #36]	; 0x24
 8007a08:	e767      	b.n	80078da <_svfiprintf_r+0x4e>
 8007a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a0e:	460c      	mov	r4, r1
 8007a10:	2001      	movs	r0, #1
 8007a12:	e7a5      	b.n	8007960 <_svfiprintf_r+0xd4>
 8007a14:	2300      	movs	r3, #0
 8007a16:	3401      	adds	r4, #1
 8007a18:	9305      	str	r3, [sp, #20]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	f04f 0c0a 	mov.w	ip, #10
 8007a20:	4620      	mov	r0, r4
 8007a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a26:	3a30      	subs	r2, #48	; 0x30
 8007a28:	2a09      	cmp	r2, #9
 8007a2a:	d903      	bls.n	8007a34 <_svfiprintf_r+0x1a8>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0c5      	beq.n	80079bc <_svfiprintf_r+0x130>
 8007a30:	9105      	str	r1, [sp, #20]
 8007a32:	e7c3      	b.n	80079bc <_svfiprintf_r+0x130>
 8007a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a38:	4604      	mov	r4, r0
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e7f0      	b.n	8007a20 <_svfiprintf_r+0x194>
 8007a3e:	ab03      	add	r3, sp, #12
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	462a      	mov	r2, r5
 8007a44:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <_svfiprintf_r+0x1f8>)
 8007a46:	a904      	add	r1, sp, #16
 8007a48:	4638      	mov	r0, r7
 8007a4a:	f7fe f8cd 	bl	8005be8 <_printf_float>
 8007a4e:	1c42      	adds	r2, r0, #1
 8007a50:	4606      	mov	r6, r0
 8007a52:	d1d6      	bne.n	8007a02 <_svfiprintf_r+0x176>
 8007a54:	89ab      	ldrh	r3, [r5, #12]
 8007a56:	065b      	lsls	r3, r3, #25
 8007a58:	f53f af2c 	bmi.w	80078b4 <_svfiprintf_r+0x28>
 8007a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a5e:	b01d      	add	sp, #116	; 0x74
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a64:	ab03      	add	r3, sp, #12
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	462a      	mov	r2, r5
 8007a6a:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <_svfiprintf_r+0x1f8>)
 8007a6c:	a904      	add	r1, sp, #16
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f7fe fb46 	bl	8006100 <_printf_i>
 8007a74:	e7eb      	b.n	8007a4e <_svfiprintf_r+0x1c2>
 8007a76:	bf00      	nop
 8007a78:	08008fcc 	.word	0x08008fcc
 8007a7c:	08008fd6 	.word	0x08008fd6
 8007a80:	08005be9 	.word	0x08005be9
 8007a84:	080077d5 	.word	0x080077d5
 8007a88:	08008fd2 	.word	0x08008fd2

08007a8c <_read_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4d07      	ldr	r5, [pc, #28]	; (8007aac <_read_r+0x20>)
 8007a90:	4604      	mov	r4, r0
 8007a92:	4608      	mov	r0, r1
 8007a94:	4611      	mov	r1, r2
 8007a96:	2200      	movs	r2, #0
 8007a98:	602a      	str	r2, [r5, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f000 fd7e 	bl	800859c <_read>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_read_r+0x1e>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_read_r+0x1e>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	20000e48 	.word	0x20000e48

08007ab0 <__assert_func>:
 8007ab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ab2:	4614      	mov	r4, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4b09      	ldr	r3, [pc, #36]	; (8007adc <__assert_func+0x2c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4605      	mov	r5, r0
 8007abc:	68d8      	ldr	r0, [r3, #12]
 8007abe:	b14c      	cbz	r4, 8007ad4 <__assert_func+0x24>
 8007ac0:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <__assert_func+0x30>)
 8007ac2:	9100      	str	r1, [sp, #0]
 8007ac4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ac8:	4906      	ldr	r1, [pc, #24]	; (8007ae4 <__assert_func+0x34>)
 8007aca:	462b      	mov	r3, r5
 8007acc:	f000 f9a6 	bl	8007e1c <fiprintf>
 8007ad0:	f000 fc5a 	bl	8008388 <abort>
 8007ad4:	4b04      	ldr	r3, [pc, #16]	; (8007ae8 <__assert_func+0x38>)
 8007ad6:	461c      	mov	r4, r3
 8007ad8:	e7f3      	b.n	8007ac2 <__assert_func+0x12>
 8007ada:	bf00      	nop
 8007adc:	20000010 	.word	0x20000010
 8007ae0:	08008fdd 	.word	0x08008fdd
 8007ae4:	08008fea 	.word	0x08008fea
 8007ae8:	08009018 	.word	0x08009018

08007aec <__sflush_r>:
 8007aec:	898a      	ldrh	r2, [r1, #12]
 8007aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af2:	4605      	mov	r5, r0
 8007af4:	0710      	lsls	r0, r2, #28
 8007af6:	460c      	mov	r4, r1
 8007af8:	d458      	bmi.n	8007bac <__sflush_r+0xc0>
 8007afa:	684b      	ldr	r3, [r1, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dc05      	bgt.n	8007b0c <__sflush_r+0x20>
 8007b00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dc02      	bgt.n	8007b0c <__sflush_r+0x20>
 8007b06:	2000      	movs	r0, #0
 8007b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b0e:	2e00      	cmp	r6, #0
 8007b10:	d0f9      	beq.n	8007b06 <__sflush_r+0x1a>
 8007b12:	2300      	movs	r3, #0
 8007b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b18:	682f      	ldr	r7, [r5, #0]
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	d032      	beq.n	8007b84 <__sflush_r+0x98>
 8007b1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	075a      	lsls	r2, r3, #29
 8007b24:	d505      	bpl.n	8007b32 <__sflush_r+0x46>
 8007b26:	6863      	ldr	r3, [r4, #4]
 8007b28:	1ac0      	subs	r0, r0, r3
 8007b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b2c:	b10b      	cbz	r3, 8007b32 <__sflush_r+0x46>
 8007b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b30:	1ac0      	subs	r0, r0, r3
 8007b32:	2300      	movs	r3, #0
 8007b34:	4602      	mov	r2, r0
 8007b36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b38:	6a21      	ldr	r1, [r4, #32]
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b0      	blx	r6
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	d106      	bne.n	8007b52 <__sflush_r+0x66>
 8007b44:	6829      	ldr	r1, [r5, #0]
 8007b46:	291d      	cmp	r1, #29
 8007b48:	d82c      	bhi.n	8007ba4 <__sflush_r+0xb8>
 8007b4a:	4a2a      	ldr	r2, [pc, #168]	; (8007bf4 <__sflush_r+0x108>)
 8007b4c:	40ca      	lsrs	r2, r1
 8007b4e:	07d6      	lsls	r6, r2, #31
 8007b50:	d528      	bpl.n	8007ba4 <__sflush_r+0xb8>
 8007b52:	2200      	movs	r2, #0
 8007b54:	6062      	str	r2, [r4, #4]
 8007b56:	04d9      	lsls	r1, r3, #19
 8007b58:	6922      	ldr	r2, [r4, #16]
 8007b5a:	6022      	str	r2, [r4, #0]
 8007b5c:	d504      	bpl.n	8007b68 <__sflush_r+0x7c>
 8007b5e:	1c42      	adds	r2, r0, #1
 8007b60:	d101      	bne.n	8007b66 <__sflush_r+0x7a>
 8007b62:	682b      	ldr	r3, [r5, #0]
 8007b64:	b903      	cbnz	r3, 8007b68 <__sflush_r+0x7c>
 8007b66:	6560      	str	r0, [r4, #84]	; 0x54
 8007b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b6a:	602f      	str	r7, [r5, #0]
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d0ca      	beq.n	8007b06 <__sflush_r+0x1a>
 8007b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b74:	4299      	cmp	r1, r3
 8007b76:	d002      	beq.n	8007b7e <__sflush_r+0x92>
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f7fd fec3 	bl	8005904 <_free_r>
 8007b7e:	2000      	movs	r0, #0
 8007b80:	6360      	str	r0, [r4, #52]	; 0x34
 8007b82:	e7c1      	b.n	8007b08 <__sflush_r+0x1c>
 8007b84:	6a21      	ldr	r1, [r4, #32]
 8007b86:	2301      	movs	r3, #1
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b0      	blx	r6
 8007b8c:	1c41      	adds	r1, r0, #1
 8007b8e:	d1c7      	bne.n	8007b20 <__sflush_r+0x34>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0c4      	beq.n	8007b20 <__sflush_r+0x34>
 8007b96:	2b1d      	cmp	r3, #29
 8007b98:	d001      	beq.n	8007b9e <__sflush_r+0xb2>
 8007b9a:	2b16      	cmp	r3, #22
 8007b9c:	d101      	bne.n	8007ba2 <__sflush_r+0xb6>
 8007b9e:	602f      	str	r7, [r5, #0]
 8007ba0:	e7b1      	b.n	8007b06 <__sflush_r+0x1a>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	e7ad      	b.n	8007b08 <__sflush_r+0x1c>
 8007bac:	690f      	ldr	r7, [r1, #16]
 8007bae:	2f00      	cmp	r7, #0
 8007bb0:	d0a9      	beq.n	8007b06 <__sflush_r+0x1a>
 8007bb2:	0793      	lsls	r3, r2, #30
 8007bb4:	680e      	ldr	r6, [r1, #0]
 8007bb6:	bf08      	it	eq
 8007bb8:	694b      	ldreq	r3, [r1, #20]
 8007bba:	600f      	str	r7, [r1, #0]
 8007bbc:	bf18      	it	ne
 8007bbe:	2300      	movne	r3, #0
 8007bc0:	eba6 0807 	sub.w	r8, r6, r7
 8007bc4:	608b      	str	r3, [r1, #8]
 8007bc6:	f1b8 0f00 	cmp.w	r8, #0
 8007bca:	dd9c      	ble.n	8007b06 <__sflush_r+0x1a>
 8007bcc:	6a21      	ldr	r1, [r4, #32]
 8007bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bd0:	4643      	mov	r3, r8
 8007bd2:	463a      	mov	r2, r7
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	47b0      	blx	r6
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	dc06      	bgt.n	8007bea <__sflush_r+0xfe>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295
 8007be8:	e78e      	b.n	8007b08 <__sflush_r+0x1c>
 8007bea:	4407      	add	r7, r0
 8007bec:	eba8 0800 	sub.w	r8, r8, r0
 8007bf0:	e7e9      	b.n	8007bc6 <__sflush_r+0xda>
 8007bf2:	bf00      	nop
 8007bf4:	20400001 	.word	0x20400001

08007bf8 <_fflush_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	690b      	ldr	r3, [r1, #16]
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	b913      	cbnz	r3, 8007c08 <_fflush_r+0x10>
 8007c02:	2500      	movs	r5, #0
 8007c04:	4628      	mov	r0, r5
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	b118      	cbz	r0, 8007c12 <_fflush_r+0x1a>
 8007c0a:	6983      	ldr	r3, [r0, #24]
 8007c0c:	b90b      	cbnz	r3, 8007c12 <_fflush_r+0x1a>
 8007c0e:	f000 f887 	bl	8007d20 <__sinit>
 8007c12:	4b14      	ldr	r3, [pc, #80]	; (8007c64 <_fflush_r+0x6c>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	d11b      	bne.n	8007c50 <_fflush_r+0x58>
 8007c18:	686c      	ldr	r4, [r5, #4]
 8007c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0ef      	beq.n	8007c02 <_fflush_r+0xa>
 8007c22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c24:	07d0      	lsls	r0, r2, #31
 8007c26:	d404      	bmi.n	8007c32 <_fflush_r+0x3a>
 8007c28:	0599      	lsls	r1, r3, #22
 8007c2a:	d402      	bmi.n	8007c32 <_fflush_r+0x3a>
 8007c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c2e:	f000 f927 	bl	8007e80 <__retarget_lock_acquire_recursive>
 8007c32:	4628      	mov	r0, r5
 8007c34:	4621      	mov	r1, r4
 8007c36:	f7ff ff59 	bl	8007aec <__sflush_r>
 8007c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c3c:	07da      	lsls	r2, r3, #31
 8007c3e:	4605      	mov	r5, r0
 8007c40:	d4e0      	bmi.n	8007c04 <_fflush_r+0xc>
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	059b      	lsls	r3, r3, #22
 8007c46:	d4dd      	bmi.n	8007c04 <_fflush_r+0xc>
 8007c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c4a:	f000 f91a 	bl	8007e82 <__retarget_lock_release_recursive>
 8007c4e:	e7d9      	b.n	8007c04 <_fflush_r+0xc>
 8007c50:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <_fflush_r+0x70>)
 8007c52:	429c      	cmp	r4, r3
 8007c54:	d101      	bne.n	8007c5a <_fflush_r+0x62>
 8007c56:	68ac      	ldr	r4, [r5, #8]
 8007c58:	e7df      	b.n	8007c1a <_fflush_r+0x22>
 8007c5a:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <_fflush_r+0x74>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	bf08      	it	eq
 8007c60:	68ec      	ldreq	r4, [r5, #12]
 8007c62:	e7da      	b.n	8007c1a <_fflush_r+0x22>
 8007c64:	0800913c 	.word	0x0800913c
 8007c68:	0800915c 	.word	0x0800915c
 8007c6c:	0800911c 	.word	0x0800911c

08007c70 <std>:
 8007c70:	2300      	movs	r3, #0
 8007c72:	b510      	push	{r4, lr}
 8007c74:	4604      	mov	r4, r0
 8007c76:	e9c0 3300 	strd	r3, r3, [r0]
 8007c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c7e:	6083      	str	r3, [r0, #8]
 8007c80:	8181      	strh	r1, [r0, #12]
 8007c82:	6643      	str	r3, [r0, #100]	; 0x64
 8007c84:	81c2      	strh	r2, [r0, #14]
 8007c86:	6183      	str	r3, [r0, #24]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	2208      	movs	r2, #8
 8007c8c:	305c      	adds	r0, #92	; 0x5c
 8007c8e:	f7fd fe1b 	bl	80058c8 <memset>
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <std+0x38>)
 8007c94:	6263      	str	r3, [r4, #36]	; 0x24
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <std+0x3c>)
 8007c98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <std+0x40>)
 8007c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <std+0x44>)
 8007ca0:	6224      	str	r4, [r4, #32]
 8007ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	bf00      	nop
 8007ca8:	080063ad 	.word	0x080063ad
 8007cac:	080063cf 	.word	0x080063cf
 8007cb0:	08006407 	.word	0x08006407
 8007cb4:	0800642b 	.word	0x0800642b

08007cb8 <_cleanup_r>:
 8007cb8:	4901      	ldr	r1, [pc, #4]	; (8007cc0 <_cleanup_r+0x8>)
 8007cba:	f000 b8c1 	b.w	8007e40 <_fwalk_reent>
 8007cbe:	bf00      	nop
 8007cc0:	08007bf9 	.word	0x08007bf9

08007cc4 <__sfmoreglue>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	2268      	movs	r2, #104	; 0x68
 8007cc8:	1e4d      	subs	r5, r1, #1
 8007cca:	4355      	muls	r5, r2
 8007ccc:	460e      	mov	r6, r1
 8007cce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cd2:	f7fd fe83 	bl	80059dc <_malloc_r>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	b140      	cbz	r0, 8007cec <__sfmoreglue+0x28>
 8007cda:	2100      	movs	r1, #0
 8007cdc:	e9c0 1600 	strd	r1, r6, [r0]
 8007ce0:	300c      	adds	r0, #12
 8007ce2:	60a0      	str	r0, [r4, #8]
 8007ce4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ce8:	f7fd fdee 	bl	80058c8 <memset>
 8007cec:	4620      	mov	r0, r4
 8007cee:	bd70      	pop	{r4, r5, r6, pc}

08007cf0 <__sfp_lock_acquire>:
 8007cf0:	4801      	ldr	r0, [pc, #4]	; (8007cf8 <__sfp_lock_acquire+0x8>)
 8007cf2:	f000 b8c5 	b.w	8007e80 <__retarget_lock_acquire_recursive>
 8007cf6:	bf00      	nop
 8007cf8:	20000e4d 	.word	0x20000e4d

08007cfc <__sfp_lock_release>:
 8007cfc:	4801      	ldr	r0, [pc, #4]	; (8007d04 <__sfp_lock_release+0x8>)
 8007cfe:	f000 b8c0 	b.w	8007e82 <__retarget_lock_release_recursive>
 8007d02:	bf00      	nop
 8007d04:	20000e4d 	.word	0x20000e4d

08007d08 <__sinit_lock_acquire>:
 8007d08:	4801      	ldr	r0, [pc, #4]	; (8007d10 <__sinit_lock_acquire+0x8>)
 8007d0a:	f000 b8b9 	b.w	8007e80 <__retarget_lock_acquire_recursive>
 8007d0e:	bf00      	nop
 8007d10:	20000e4e 	.word	0x20000e4e

08007d14 <__sinit_lock_release>:
 8007d14:	4801      	ldr	r0, [pc, #4]	; (8007d1c <__sinit_lock_release+0x8>)
 8007d16:	f000 b8b4 	b.w	8007e82 <__retarget_lock_release_recursive>
 8007d1a:	bf00      	nop
 8007d1c:	20000e4e 	.word	0x20000e4e

08007d20 <__sinit>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	4604      	mov	r4, r0
 8007d24:	f7ff fff0 	bl	8007d08 <__sinit_lock_acquire>
 8007d28:	69a3      	ldr	r3, [r4, #24]
 8007d2a:	b11b      	cbz	r3, 8007d34 <__sinit+0x14>
 8007d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d30:	f7ff bff0 	b.w	8007d14 <__sinit_lock_release>
 8007d34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d38:	6523      	str	r3, [r4, #80]	; 0x50
 8007d3a:	4b13      	ldr	r3, [pc, #76]	; (8007d88 <__sinit+0x68>)
 8007d3c:	4a13      	ldr	r2, [pc, #76]	; (8007d8c <__sinit+0x6c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	bf04      	itt	eq
 8007d46:	2301      	moveq	r3, #1
 8007d48:	61a3      	streq	r3, [r4, #24]
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 f820 	bl	8007d90 <__sfp>
 8007d50:	6060      	str	r0, [r4, #4]
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 f81c 	bl	8007d90 <__sfp>
 8007d58:	60a0      	str	r0, [r4, #8]
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 f818 	bl	8007d90 <__sfp>
 8007d60:	2200      	movs	r2, #0
 8007d62:	60e0      	str	r0, [r4, #12]
 8007d64:	2104      	movs	r1, #4
 8007d66:	6860      	ldr	r0, [r4, #4]
 8007d68:	f7ff ff82 	bl	8007c70 <std>
 8007d6c:	68a0      	ldr	r0, [r4, #8]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	2109      	movs	r1, #9
 8007d72:	f7ff ff7d 	bl	8007c70 <std>
 8007d76:	68e0      	ldr	r0, [r4, #12]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	2112      	movs	r1, #18
 8007d7c:	f7ff ff78 	bl	8007c70 <std>
 8007d80:	2301      	movs	r3, #1
 8007d82:	61a3      	str	r3, [r4, #24]
 8007d84:	e7d2      	b.n	8007d2c <__sinit+0xc>
 8007d86:	bf00      	nop
 8007d88:	08008dac 	.word	0x08008dac
 8007d8c:	08007cb9 	.word	0x08007cb9

08007d90 <__sfp>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	4607      	mov	r7, r0
 8007d94:	f7ff ffac 	bl	8007cf0 <__sfp_lock_acquire>
 8007d98:	4b1e      	ldr	r3, [pc, #120]	; (8007e14 <__sfp+0x84>)
 8007d9a:	681e      	ldr	r6, [r3, #0]
 8007d9c:	69b3      	ldr	r3, [r6, #24]
 8007d9e:	b913      	cbnz	r3, 8007da6 <__sfp+0x16>
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff ffbd 	bl	8007d20 <__sinit>
 8007da6:	3648      	adds	r6, #72	; 0x48
 8007da8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	d503      	bpl.n	8007db8 <__sfp+0x28>
 8007db0:	6833      	ldr	r3, [r6, #0]
 8007db2:	b30b      	cbz	r3, 8007df8 <__sfp+0x68>
 8007db4:	6836      	ldr	r6, [r6, #0]
 8007db6:	e7f7      	b.n	8007da8 <__sfp+0x18>
 8007db8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dbc:	b9d5      	cbnz	r5, 8007df4 <__sfp+0x64>
 8007dbe:	4b16      	ldr	r3, [pc, #88]	; (8007e18 <__sfp+0x88>)
 8007dc0:	60e3      	str	r3, [r4, #12]
 8007dc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dc6:	6665      	str	r5, [r4, #100]	; 0x64
 8007dc8:	f000 f859 	bl	8007e7e <__retarget_lock_init_recursive>
 8007dcc:	f7ff ff96 	bl	8007cfc <__sfp_lock_release>
 8007dd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dd8:	6025      	str	r5, [r4, #0]
 8007dda:	61a5      	str	r5, [r4, #24]
 8007ddc:	2208      	movs	r2, #8
 8007dde:	4629      	mov	r1, r5
 8007de0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007de4:	f7fd fd70 	bl	80058c8 <memset>
 8007de8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007df0:	4620      	mov	r0, r4
 8007df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df4:	3468      	adds	r4, #104	; 0x68
 8007df6:	e7d9      	b.n	8007dac <__sfp+0x1c>
 8007df8:	2104      	movs	r1, #4
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f7ff ff62 	bl	8007cc4 <__sfmoreglue>
 8007e00:	4604      	mov	r4, r0
 8007e02:	6030      	str	r0, [r6, #0]
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d1d5      	bne.n	8007db4 <__sfp+0x24>
 8007e08:	f7ff ff78 	bl	8007cfc <__sfp_lock_release>
 8007e0c:	230c      	movs	r3, #12
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	e7ee      	b.n	8007df0 <__sfp+0x60>
 8007e12:	bf00      	nop
 8007e14:	08008dac 	.word	0x08008dac
 8007e18:	ffff0001 	.word	0xffff0001

08007e1c <fiprintf>:
 8007e1c:	b40e      	push	{r1, r2, r3}
 8007e1e:	b503      	push	{r0, r1, lr}
 8007e20:	4601      	mov	r1, r0
 8007e22:	ab03      	add	r3, sp, #12
 8007e24:	4805      	ldr	r0, [pc, #20]	; (8007e3c <fiprintf+0x20>)
 8007e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2a:	6800      	ldr	r0, [r0, #0]
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	f000 f8ad 	bl	8007f8c <_vfiprintf_r>
 8007e32:	b002      	add	sp, #8
 8007e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e38:	b003      	add	sp, #12
 8007e3a:	4770      	bx	lr
 8007e3c:	20000010 	.word	0x20000010

08007e40 <_fwalk_reent>:
 8007e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e44:	4606      	mov	r6, r0
 8007e46:	4688      	mov	r8, r1
 8007e48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e4c:	2700      	movs	r7, #0
 8007e4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e52:	f1b9 0901 	subs.w	r9, r9, #1
 8007e56:	d505      	bpl.n	8007e64 <_fwalk_reent+0x24>
 8007e58:	6824      	ldr	r4, [r4, #0]
 8007e5a:	2c00      	cmp	r4, #0
 8007e5c:	d1f7      	bne.n	8007e4e <_fwalk_reent+0xe>
 8007e5e:	4638      	mov	r0, r7
 8007e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e64:	89ab      	ldrh	r3, [r5, #12]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d907      	bls.n	8007e7a <_fwalk_reent+0x3a>
 8007e6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	d003      	beq.n	8007e7a <_fwalk_reent+0x3a>
 8007e72:	4629      	mov	r1, r5
 8007e74:	4630      	mov	r0, r6
 8007e76:	47c0      	blx	r8
 8007e78:	4307      	orrs	r7, r0
 8007e7a:	3568      	adds	r5, #104	; 0x68
 8007e7c:	e7e9      	b.n	8007e52 <_fwalk_reent+0x12>

08007e7e <__retarget_lock_init_recursive>:
 8007e7e:	4770      	bx	lr

08007e80 <__retarget_lock_acquire_recursive>:
 8007e80:	4770      	bx	lr

08007e82 <__retarget_lock_release_recursive>:
 8007e82:	4770      	bx	lr

08007e84 <__ascii_mbtowc>:
 8007e84:	b082      	sub	sp, #8
 8007e86:	b901      	cbnz	r1, 8007e8a <__ascii_mbtowc+0x6>
 8007e88:	a901      	add	r1, sp, #4
 8007e8a:	b142      	cbz	r2, 8007e9e <__ascii_mbtowc+0x1a>
 8007e8c:	b14b      	cbz	r3, 8007ea2 <__ascii_mbtowc+0x1e>
 8007e8e:	7813      	ldrb	r3, [r2, #0]
 8007e90:	600b      	str	r3, [r1, #0]
 8007e92:	7812      	ldrb	r2, [r2, #0]
 8007e94:	1e10      	subs	r0, r2, #0
 8007e96:	bf18      	it	ne
 8007e98:	2001      	movne	r0, #1
 8007e9a:	b002      	add	sp, #8
 8007e9c:	4770      	bx	lr
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	e7fb      	b.n	8007e9a <__ascii_mbtowc+0x16>
 8007ea2:	f06f 0001 	mvn.w	r0, #1
 8007ea6:	e7f8      	b.n	8007e9a <__ascii_mbtowc+0x16>

08007ea8 <memmove>:
 8007ea8:	4288      	cmp	r0, r1
 8007eaa:	b510      	push	{r4, lr}
 8007eac:	eb01 0402 	add.w	r4, r1, r2
 8007eb0:	d902      	bls.n	8007eb8 <memmove+0x10>
 8007eb2:	4284      	cmp	r4, r0
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	d807      	bhi.n	8007ec8 <memmove+0x20>
 8007eb8:	1e43      	subs	r3, r0, #1
 8007eba:	42a1      	cmp	r1, r4
 8007ebc:	d008      	beq.n	8007ed0 <memmove+0x28>
 8007ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ec6:	e7f8      	b.n	8007eba <memmove+0x12>
 8007ec8:	4402      	add	r2, r0
 8007eca:	4601      	mov	r1, r0
 8007ecc:	428a      	cmp	r2, r1
 8007ece:	d100      	bne.n	8007ed2 <memmove+0x2a>
 8007ed0:	bd10      	pop	{r4, pc}
 8007ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eda:	e7f7      	b.n	8007ecc <memmove+0x24>

08007edc <_realloc_r>:
 8007edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	4614      	mov	r4, r2
 8007ee4:	460e      	mov	r6, r1
 8007ee6:	b921      	cbnz	r1, 8007ef2 <_realloc_r+0x16>
 8007ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eec:	4611      	mov	r1, r2
 8007eee:	f7fd bd75 	b.w	80059dc <_malloc_r>
 8007ef2:	b92a      	cbnz	r2, 8007f00 <_realloc_r+0x24>
 8007ef4:	f7fd fd06 	bl	8005904 <_free_r>
 8007ef8:	4625      	mov	r5, r4
 8007efa:	4628      	mov	r0, r5
 8007efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f00:	f000 faae 	bl	8008460 <_malloc_usable_size_r>
 8007f04:	4284      	cmp	r4, r0
 8007f06:	4607      	mov	r7, r0
 8007f08:	d802      	bhi.n	8007f10 <_realloc_r+0x34>
 8007f0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f0e:	d812      	bhi.n	8007f36 <_realloc_r+0x5a>
 8007f10:	4621      	mov	r1, r4
 8007f12:	4640      	mov	r0, r8
 8007f14:	f7fd fd62 	bl	80059dc <_malloc_r>
 8007f18:	4605      	mov	r5, r0
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d0ed      	beq.n	8007efa <_realloc_r+0x1e>
 8007f1e:	42bc      	cmp	r4, r7
 8007f20:	4622      	mov	r2, r4
 8007f22:	4631      	mov	r1, r6
 8007f24:	bf28      	it	cs
 8007f26:	463a      	movcs	r2, r7
 8007f28:	f7ff f8b6 	bl	8007098 <memcpy>
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f7fd fce8 	bl	8005904 <_free_r>
 8007f34:	e7e1      	b.n	8007efa <_realloc_r+0x1e>
 8007f36:	4635      	mov	r5, r6
 8007f38:	e7df      	b.n	8007efa <_realloc_r+0x1e>

08007f3a <__sfputc_r>:
 8007f3a:	6893      	ldr	r3, [r2, #8]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	b410      	push	{r4}
 8007f42:	6093      	str	r3, [r2, #8]
 8007f44:	da08      	bge.n	8007f58 <__sfputc_r+0x1e>
 8007f46:	6994      	ldr	r4, [r2, #24]
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	db01      	blt.n	8007f50 <__sfputc_r+0x16>
 8007f4c:	290a      	cmp	r1, #10
 8007f4e:	d103      	bne.n	8007f58 <__sfputc_r+0x1e>
 8007f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f54:	f000 b94a 	b.w	80081ec <__swbuf_r>
 8007f58:	6813      	ldr	r3, [r2, #0]
 8007f5a:	1c58      	adds	r0, r3, #1
 8007f5c:	6010      	str	r0, [r2, #0]
 8007f5e:	7019      	strb	r1, [r3, #0]
 8007f60:	4608      	mov	r0, r1
 8007f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <__sfputs_r>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	460f      	mov	r7, r1
 8007f6e:	4614      	mov	r4, r2
 8007f70:	18d5      	adds	r5, r2, r3
 8007f72:	42ac      	cmp	r4, r5
 8007f74:	d101      	bne.n	8007f7a <__sfputs_r+0x12>
 8007f76:	2000      	movs	r0, #0
 8007f78:	e007      	b.n	8007f8a <__sfputs_r+0x22>
 8007f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7e:	463a      	mov	r2, r7
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ffda 	bl	8007f3a <__sfputc_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	d1f3      	bne.n	8007f72 <__sfputs_r+0xa>
 8007f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f8c <_vfiprintf_r>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	460d      	mov	r5, r1
 8007f92:	b09d      	sub	sp, #116	; 0x74
 8007f94:	4614      	mov	r4, r2
 8007f96:	4698      	mov	r8, r3
 8007f98:	4606      	mov	r6, r0
 8007f9a:	b118      	cbz	r0, 8007fa4 <_vfiprintf_r+0x18>
 8007f9c:	6983      	ldr	r3, [r0, #24]
 8007f9e:	b90b      	cbnz	r3, 8007fa4 <_vfiprintf_r+0x18>
 8007fa0:	f7ff febe 	bl	8007d20 <__sinit>
 8007fa4:	4b89      	ldr	r3, [pc, #548]	; (80081cc <_vfiprintf_r+0x240>)
 8007fa6:	429d      	cmp	r5, r3
 8007fa8:	d11b      	bne.n	8007fe2 <_vfiprintf_r+0x56>
 8007faa:	6875      	ldr	r5, [r6, #4]
 8007fac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fae:	07d9      	lsls	r1, r3, #31
 8007fb0:	d405      	bmi.n	8007fbe <_vfiprintf_r+0x32>
 8007fb2:	89ab      	ldrh	r3, [r5, #12]
 8007fb4:	059a      	lsls	r2, r3, #22
 8007fb6:	d402      	bmi.n	8007fbe <_vfiprintf_r+0x32>
 8007fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fba:	f7ff ff61 	bl	8007e80 <__retarget_lock_acquire_recursive>
 8007fbe:	89ab      	ldrh	r3, [r5, #12]
 8007fc0:	071b      	lsls	r3, r3, #28
 8007fc2:	d501      	bpl.n	8007fc8 <_vfiprintf_r+0x3c>
 8007fc4:	692b      	ldr	r3, [r5, #16]
 8007fc6:	b9eb      	cbnz	r3, 8008004 <_vfiprintf_r+0x78>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f96e 	bl	80082ac <__swsetup_r>
 8007fd0:	b1c0      	cbz	r0, 8008004 <_vfiprintf_r+0x78>
 8007fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fd4:	07dc      	lsls	r4, r3, #31
 8007fd6:	d50e      	bpl.n	8007ff6 <_vfiprintf_r+0x6a>
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fdc:	b01d      	add	sp, #116	; 0x74
 8007fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe2:	4b7b      	ldr	r3, [pc, #492]	; (80081d0 <_vfiprintf_r+0x244>)
 8007fe4:	429d      	cmp	r5, r3
 8007fe6:	d101      	bne.n	8007fec <_vfiprintf_r+0x60>
 8007fe8:	68b5      	ldr	r5, [r6, #8]
 8007fea:	e7df      	b.n	8007fac <_vfiprintf_r+0x20>
 8007fec:	4b79      	ldr	r3, [pc, #484]	; (80081d4 <_vfiprintf_r+0x248>)
 8007fee:	429d      	cmp	r5, r3
 8007ff0:	bf08      	it	eq
 8007ff2:	68f5      	ldreq	r5, [r6, #12]
 8007ff4:	e7da      	b.n	8007fac <_vfiprintf_r+0x20>
 8007ff6:	89ab      	ldrh	r3, [r5, #12]
 8007ff8:	0598      	lsls	r0, r3, #22
 8007ffa:	d4ed      	bmi.n	8007fd8 <_vfiprintf_r+0x4c>
 8007ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ffe:	f7ff ff40 	bl	8007e82 <__retarget_lock_release_recursive>
 8008002:	e7e9      	b.n	8007fd8 <_vfiprintf_r+0x4c>
 8008004:	2300      	movs	r3, #0
 8008006:	9309      	str	r3, [sp, #36]	; 0x24
 8008008:	2320      	movs	r3, #32
 800800a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800800e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008012:	2330      	movs	r3, #48	; 0x30
 8008014:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081d8 <_vfiprintf_r+0x24c>
 8008018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800801c:	f04f 0901 	mov.w	r9, #1
 8008020:	4623      	mov	r3, r4
 8008022:	469a      	mov	sl, r3
 8008024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008028:	b10a      	cbz	r2, 800802e <_vfiprintf_r+0xa2>
 800802a:	2a25      	cmp	r2, #37	; 0x25
 800802c:	d1f9      	bne.n	8008022 <_vfiprintf_r+0x96>
 800802e:	ebba 0b04 	subs.w	fp, sl, r4
 8008032:	d00b      	beq.n	800804c <_vfiprintf_r+0xc0>
 8008034:	465b      	mov	r3, fp
 8008036:	4622      	mov	r2, r4
 8008038:	4629      	mov	r1, r5
 800803a:	4630      	mov	r0, r6
 800803c:	f7ff ff94 	bl	8007f68 <__sfputs_r>
 8008040:	3001      	adds	r0, #1
 8008042:	f000 80aa 	beq.w	800819a <_vfiprintf_r+0x20e>
 8008046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008048:	445a      	add	r2, fp
 800804a:	9209      	str	r2, [sp, #36]	; 0x24
 800804c:	f89a 3000 	ldrb.w	r3, [sl]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 80a2 	beq.w	800819a <_vfiprintf_r+0x20e>
 8008056:	2300      	movs	r3, #0
 8008058:	f04f 32ff 	mov.w	r2, #4294967295
 800805c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008060:	f10a 0a01 	add.w	sl, sl, #1
 8008064:	9304      	str	r3, [sp, #16]
 8008066:	9307      	str	r3, [sp, #28]
 8008068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800806c:	931a      	str	r3, [sp, #104]	; 0x68
 800806e:	4654      	mov	r4, sl
 8008070:	2205      	movs	r2, #5
 8008072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008076:	4858      	ldr	r0, [pc, #352]	; (80081d8 <_vfiprintf_r+0x24c>)
 8008078:	f7f8 f8ea 	bl	8000250 <memchr>
 800807c:	9a04      	ldr	r2, [sp, #16]
 800807e:	b9d8      	cbnz	r0, 80080b8 <_vfiprintf_r+0x12c>
 8008080:	06d1      	lsls	r1, r2, #27
 8008082:	bf44      	itt	mi
 8008084:	2320      	movmi	r3, #32
 8008086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800808a:	0713      	lsls	r3, r2, #28
 800808c:	bf44      	itt	mi
 800808e:	232b      	movmi	r3, #43	; 0x2b
 8008090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008094:	f89a 3000 	ldrb.w	r3, [sl]
 8008098:	2b2a      	cmp	r3, #42	; 0x2a
 800809a:	d015      	beq.n	80080c8 <_vfiprintf_r+0x13c>
 800809c:	9a07      	ldr	r2, [sp, #28]
 800809e:	4654      	mov	r4, sl
 80080a0:	2000      	movs	r0, #0
 80080a2:	f04f 0c0a 	mov.w	ip, #10
 80080a6:	4621      	mov	r1, r4
 80080a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ac:	3b30      	subs	r3, #48	; 0x30
 80080ae:	2b09      	cmp	r3, #9
 80080b0:	d94e      	bls.n	8008150 <_vfiprintf_r+0x1c4>
 80080b2:	b1b0      	cbz	r0, 80080e2 <_vfiprintf_r+0x156>
 80080b4:	9207      	str	r2, [sp, #28]
 80080b6:	e014      	b.n	80080e2 <_vfiprintf_r+0x156>
 80080b8:	eba0 0308 	sub.w	r3, r0, r8
 80080bc:	fa09 f303 	lsl.w	r3, r9, r3
 80080c0:	4313      	orrs	r3, r2
 80080c2:	9304      	str	r3, [sp, #16]
 80080c4:	46a2      	mov	sl, r4
 80080c6:	e7d2      	b.n	800806e <_vfiprintf_r+0xe2>
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	1d19      	adds	r1, r3, #4
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	9103      	str	r1, [sp, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	bfbb      	ittet	lt
 80080d4:	425b      	neglt	r3, r3
 80080d6:	f042 0202 	orrlt.w	r2, r2, #2
 80080da:	9307      	strge	r3, [sp, #28]
 80080dc:	9307      	strlt	r3, [sp, #28]
 80080de:	bfb8      	it	lt
 80080e0:	9204      	strlt	r2, [sp, #16]
 80080e2:	7823      	ldrb	r3, [r4, #0]
 80080e4:	2b2e      	cmp	r3, #46	; 0x2e
 80080e6:	d10c      	bne.n	8008102 <_vfiprintf_r+0x176>
 80080e8:	7863      	ldrb	r3, [r4, #1]
 80080ea:	2b2a      	cmp	r3, #42	; 0x2a
 80080ec:	d135      	bne.n	800815a <_vfiprintf_r+0x1ce>
 80080ee:	9b03      	ldr	r3, [sp, #12]
 80080f0:	1d1a      	adds	r2, r3, #4
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	9203      	str	r2, [sp, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	bfb8      	it	lt
 80080fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80080fe:	3402      	adds	r4, #2
 8008100:	9305      	str	r3, [sp, #20]
 8008102:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081e8 <_vfiprintf_r+0x25c>
 8008106:	7821      	ldrb	r1, [r4, #0]
 8008108:	2203      	movs	r2, #3
 800810a:	4650      	mov	r0, sl
 800810c:	f7f8 f8a0 	bl	8000250 <memchr>
 8008110:	b140      	cbz	r0, 8008124 <_vfiprintf_r+0x198>
 8008112:	2340      	movs	r3, #64	; 0x40
 8008114:	eba0 000a 	sub.w	r0, r0, sl
 8008118:	fa03 f000 	lsl.w	r0, r3, r0
 800811c:	9b04      	ldr	r3, [sp, #16]
 800811e:	4303      	orrs	r3, r0
 8008120:	3401      	adds	r4, #1
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008128:	482c      	ldr	r0, [pc, #176]	; (80081dc <_vfiprintf_r+0x250>)
 800812a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800812e:	2206      	movs	r2, #6
 8008130:	f7f8 f88e 	bl	8000250 <memchr>
 8008134:	2800      	cmp	r0, #0
 8008136:	d03f      	beq.n	80081b8 <_vfiprintf_r+0x22c>
 8008138:	4b29      	ldr	r3, [pc, #164]	; (80081e0 <_vfiprintf_r+0x254>)
 800813a:	bb1b      	cbnz	r3, 8008184 <_vfiprintf_r+0x1f8>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	3307      	adds	r3, #7
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	3308      	adds	r3, #8
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814a:	443b      	add	r3, r7
 800814c:	9309      	str	r3, [sp, #36]	; 0x24
 800814e:	e767      	b.n	8008020 <_vfiprintf_r+0x94>
 8008150:	fb0c 3202 	mla	r2, ip, r2, r3
 8008154:	460c      	mov	r4, r1
 8008156:	2001      	movs	r0, #1
 8008158:	e7a5      	b.n	80080a6 <_vfiprintf_r+0x11a>
 800815a:	2300      	movs	r3, #0
 800815c:	3401      	adds	r4, #1
 800815e:	9305      	str	r3, [sp, #20]
 8008160:	4619      	mov	r1, r3
 8008162:	f04f 0c0a 	mov.w	ip, #10
 8008166:	4620      	mov	r0, r4
 8008168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816c:	3a30      	subs	r2, #48	; 0x30
 800816e:	2a09      	cmp	r2, #9
 8008170:	d903      	bls.n	800817a <_vfiprintf_r+0x1ee>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0c5      	beq.n	8008102 <_vfiprintf_r+0x176>
 8008176:	9105      	str	r1, [sp, #20]
 8008178:	e7c3      	b.n	8008102 <_vfiprintf_r+0x176>
 800817a:	fb0c 2101 	mla	r1, ip, r1, r2
 800817e:	4604      	mov	r4, r0
 8008180:	2301      	movs	r3, #1
 8008182:	e7f0      	b.n	8008166 <_vfiprintf_r+0x1da>
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	462a      	mov	r2, r5
 800818a:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <_vfiprintf_r+0x258>)
 800818c:	a904      	add	r1, sp, #16
 800818e:	4630      	mov	r0, r6
 8008190:	f7fd fd2a 	bl	8005be8 <_printf_float>
 8008194:	4607      	mov	r7, r0
 8008196:	1c78      	adds	r0, r7, #1
 8008198:	d1d6      	bne.n	8008148 <_vfiprintf_r+0x1bc>
 800819a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800819c:	07d9      	lsls	r1, r3, #31
 800819e:	d405      	bmi.n	80081ac <_vfiprintf_r+0x220>
 80081a0:	89ab      	ldrh	r3, [r5, #12]
 80081a2:	059a      	lsls	r2, r3, #22
 80081a4:	d402      	bmi.n	80081ac <_vfiprintf_r+0x220>
 80081a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081a8:	f7ff fe6b 	bl	8007e82 <__retarget_lock_release_recursive>
 80081ac:	89ab      	ldrh	r3, [r5, #12]
 80081ae:	065b      	lsls	r3, r3, #25
 80081b0:	f53f af12 	bmi.w	8007fd8 <_vfiprintf_r+0x4c>
 80081b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081b6:	e711      	b.n	8007fdc <_vfiprintf_r+0x50>
 80081b8:	ab03      	add	r3, sp, #12
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	462a      	mov	r2, r5
 80081be:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <_vfiprintf_r+0x258>)
 80081c0:	a904      	add	r1, sp, #16
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7fd ff9c 	bl	8006100 <_printf_i>
 80081c8:	e7e4      	b.n	8008194 <_vfiprintf_r+0x208>
 80081ca:	bf00      	nop
 80081cc:	0800913c 	.word	0x0800913c
 80081d0:	0800915c 	.word	0x0800915c
 80081d4:	0800911c 	.word	0x0800911c
 80081d8:	08008fcc 	.word	0x08008fcc
 80081dc:	08008fd6 	.word	0x08008fd6
 80081e0:	08005be9 	.word	0x08005be9
 80081e4:	08007f69 	.word	0x08007f69
 80081e8:	08008fd2 	.word	0x08008fd2

080081ec <__swbuf_r>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	460e      	mov	r6, r1
 80081f0:	4614      	mov	r4, r2
 80081f2:	4605      	mov	r5, r0
 80081f4:	b118      	cbz	r0, 80081fe <__swbuf_r+0x12>
 80081f6:	6983      	ldr	r3, [r0, #24]
 80081f8:	b90b      	cbnz	r3, 80081fe <__swbuf_r+0x12>
 80081fa:	f7ff fd91 	bl	8007d20 <__sinit>
 80081fe:	4b21      	ldr	r3, [pc, #132]	; (8008284 <__swbuf_r+0x98>)
 8008200:	429c      	cmp	r4, r3
 8008202:	d12b      	bne.n	800825c <__swbuf_r+0x70>
 8008204:	686c      	ldr	r4, [r5, #4]
 8008206:	69a3      	ldr	r3, [r4, #24]
 8008208:	60a3      	str	r3, [r4, #8]
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	071a      	lsls	r2, r3, #28
 800820e:	d52f      	bpl.n	8008270 <__swbuf_r+0x84>
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	b36b      	cbz	r3, 8008270 <__swbuf_r+0x84>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	6820      	ldr	r0, [r4, #0]
 8008218:	1ac0      	subs	r0, r0, r3
 800821a:	6963      	ldr	r3, [r4, #20]
 800821c:	b2f6      	uxtb	r6, r6
 800821e:	4283      	cmp	r3, r0
 8008220:	4637      	mov	r7, r6
 8008222:	dc04      	bgt.n	800822e <__swbuf_r+0x42>
 8008224:	4621      	mov	r1, r4
 8008226:	4628      	mov	r0, r5
 8008228:	f7ff fce6 	bl	8007bf8 <_fflush_r>
 800822c:	bb30      	cbnz	r0, 800827c <__swbuf_r+0x90>
 800822e:	68a3      	ldr	r3, [r4, #8]
 8008230:	3b01      	subs	r3, #1
 8008232:	60a3      	str	r3, [r4, #8]
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	6022      	str	r2, [r4, #0]
 800823a:	701e      	strb	r6, [r3, #0]
 800823c:	6963      	ldr	r3, [r4, #20]
 800823e:	3001      	adds	r0, #1
 8008240:	4283      	cmp	r3, r0
 8008242:	d004      	beq.n	800824e <__swbuf_r+0x62>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	07db      	lsls	r3, r3, #31
 8008248:	d506      	bpl.n	8008258 <__swbuf_r+0x6c>
 800824a:	2e0a      	cmp	r6, #10
 800824c:	d104      	bne.n	8008258 <__swbuf_r+0x6c>
 800824e:	4621      	mov	r1, r4
 8008250:	4628      	mov	r0, r5
 8008252:	f7ff fcd1 	bl	8007bf8 <_fflush_r>
 8008256:	b988      	cbnz	r0, 800827c <__swbuf_r+0x90>
 8008258:	4638      	mov	r0, r7
 800825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800825c:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <__swbuf_r+0x9c>)
 800825e:	429c      	cmp	r4, r3
 8008260:	d101      	bne.n	8008266 <__swbuf_r+0x7a>
 8008262:	68ac      	ldr	r4, [r5, #8]
 8008264:	e7cf      	b.n	8008206 <__swbuf_r+0x1a>
 8008266:	4b09      	ldr	r3, [pc, #36]	; (800828c <__swbuf_r+0xa0>)
 8008268:	429c      	cmp	r4, r3
 800826a:	bf08      	it	eq
 800826c:	68ec      	ldreq	r4, [r5, #12]
 800826e:	e7ca      	b.n	8008206 <__swbuf_r+0x1a>
 8008270:	4621      	mov	r1, r4
 8008272:	4628      	mov	r0, r5
 8008274:	f000 f81a 	bl	80082ac <__swsetup_r>
 8008278:	2800      	cmp	r0, #0
 800827a:	d0cb      	beq.n	8008214 <__swbuf_r+0x28>
 800827c:	f04f 37ff 	mov.w	r7, #4294967295
 8008280:	e7ea      	b.n	8008258 <__swbuf_r+0x6c>
 8008282:	bf00      	nop
 8008284:	0800913c 	.word	0x0800913c
 8008288:	0800915c 	.word	0x0800915c
 800828c:	0800911c 	.word	0x0800911c

08008290 <__ascii_wctomb>:
 8008290:	b149      	cbz	r1, 80082a6 <__ascii_wctomb+0x16>
 8008292:	2aff      	cmp	r2, #255	; 0xff
 8008294:	bf85      	ittet	hi
 8008296:	238a      	movhi	r3, #138	; 0x8a
 8008298:	6003      	strhi	r3, [r0, #0]
 800829a:	700a      	strbls	r2, [r1, #0]
 800829c:	f04f 30ff 	movhi.w	r0, #4294967295
 80082a0:	bf98      	it	ls
 80082a2:	2001      	movls	r0, #1
 80082a4:	4770      	bx	lr
 80082a6:	4608      	mov	r0, r1
 80082a8:	4770      	bx	lr
	...

080082ac <__swsetup_r>:
 80082ac:	4b32      	ldr	r3, [pc, #200]	; (8008378 <__swsetup_r+0xcc>)
 80082ae:	b570      	push	{r4, r5, r6, lr}
 80082b0:	681d      	ldr	r5, [r3, #0]
 80082b2:	4606      	mov	r6, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	b125      	cbz	r5, 80082c2 <__swsetup_r+0x16>
 80082b8:	69ab      	ldr	r3, [r5, #24]
 80082ba:	b913      	cbnz	r3, 80082c2 <__swsetup_r+0x16>
 80082bc:	4628      	mov	r0, r5
 80082be:	f7ff fd2f 	bl	8007d20 <__sinit>
 80082c2:	4b2e      	ldr	r3, [pc, #184]	; (800837c <__swsetup_r+0xd0>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d10f      	bne.n	80082e8 <__swsetup_r+0x3c>
 80082c8:	686c      	ldr	r4, [r5, #4]
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082d0:	0719      	lsls	r1, r3, #28
 80082d2:	d42c      	bmi.n	800832e <__swsetup_r+0x82>
 80082d4:	06dd      	lsls	r5, r3, #27
 80082d6:	d411      	bmi.n	80082fc <__swsetup_r+0x50>
 80082d8:	2309      	movs	r3, #9
 80082da:	6033      	str	r3, [r6, #0]
 80082dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	f04f 30ff 	mov.w	r0, #4294967295
 80082e6:	e03e      	b.n	8008366 <__swsetup_r+0xba>
 80082e8:	4b25      	ldr	r3, [pc, #148]	; (8008380 <__swsetup_r+0xd4>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d101      	bne.n	80082f2 <__swsetup_r+0x46>
 80082ee:	68ac      	ldr	r4, [r5, #8]
 80082f0:	e7eb      	b.n	80082ca <__swsetup_r+0x1e>
 80082f2:	4b24      	ldr	r3, [pc, #144]	; (8008384 <__swsetup_r+0xd8>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	bf08      	it	eq
 80082f8:	68ec      	ldreq	r4, [r5, #12]
 80082fa:	e7e6      	b.n	80082ca <__swsetup_r+0x1e>
 80082fc:	0758      	lsls	r0, r3, #29
 80082fe:	d512      	bpl.n	8008326 <__swsetup_r+0x7a>
 8008300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008302:	b141      	cbz	r1, 8008316 <__swsetup_r+0x6a>
 8008304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008308:	4299      	cmp	r1, r3
 800830a:	d002      	beq.n	8008312 <__swsetup_r+0x66>
 800830c:	4630      	mov	r0, r6
 800830e:	f7fd faf9 	bl	8005904 <_free_r>
 8008312:	2300      	movs	r3, #0
 8008314:	6363      	str	r3, [r4, #52]	; 0x34
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	2300      	movs	r3, #0
 8008320:	6063      	str	r3, [r4, #4]
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f043 0308 	orr.w	r3, r3, #8
 800832c:	81a3      	strh	r3, [r4, #12]
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	b94b      	cbnz	r3, 8008346 <__swsetup_r+0x9a>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800833c:	d003      	beq.n	8008346 <__swsetup_r+0x9a>
 800833e:	4621      	mov	r1, r4
 8008340:	4630      	mov	r0, r6
 8008342:	f000 f84d 	bl	80083e0 <__smakebuf_r>
 8008346:	89a0      	ldrh	r0, [r4, #12]
 8008348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800834c:	f010 0301 	ands.w	r3, r0, #1
 8008350:	d00a      	beq.n	8008368 <__swsetup_r+0xbc>
 8008352:	2300      	movs	r3, #0
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	6963      	ldr	r3, [r4, #20]
 8008358:	425b      	negs	r3, r3
 800835a:	61a3      	str	r3, [r4, #24]
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	b943      	cbnz	r3, 8008372 <__swsetup_r+0xc6>
 8008360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008364:	d1ba      	bne.n	80082dc <__swsetup_r+0x30>
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	0781      	lsls	r1, r0, #30
 800836a:	bf58      	it	pl
 800836c:	6963      	ldrpl	r3, [r4, #20]
 800836e:	60a3      	str	r3, [r4, #8]
 8008370:	e7f4      	b.n	800835c <__swsetup_r+0xb0>
 8008372:	2000      	movs	r0, #0
 8008374:	e7f7      	b.n	8008366 <__swsetup_r+0xba>
 8008376:	bf00      	nop
 8008378:	20000010 	.word	0x20000010
 800837c:	0800913c 	.word	0x0800913c
 8008380:	0800915c 	.word	0x0800915c
 8008384:	0800911c 	.word	0x0800911c

08008388 <abort>:
 8008388:	b508      	push	{r3, lr}
 800838a:	2006      	movs	r0, #6
 800838c:	f000 f898 	bl	80084c0 <raise>
 8008390:	2001      	movs	r0, #1
 8008392:	f000 f921 	bl	80085d8 <_exit>

08008396 <__swhatbuf_r>:
 8008396:	b570      	push	{r4, r5, r6, lr}
 8008398:	460e      	mov	r6, r1
 800839a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800839e:	2900      	cmp	r1, #0
 80083a0:	b096      	sub	sp, #88	; 0x58
 80083a2:	4614      	mov	r4, r2
 80083a4:	461d      	mov	r5, r3
 80083a6:	da08      	bge.n	80083ba <__swhatbuf_r+0x24>
 80083a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	602a      	str	r2, [r5, #0]
 80083b0:	061a      	lsls	r2, r3, #24
 80083b2:	d410      	bmi.n	80083d6 <__swhatbuf_r+0x40>
 80083b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b8:	e00e      	b.n	80083d8 <__swhatbuf_r+0x42>
 80083ba:	466a      	mov	r2, sp
 80083bc:	f000 f89c 	bl	80084f8 <_fstat_r>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	dbf1      	blt.n	80083a8 <__swhatbuf_r+0x12>
 80083c4:	9a01      	ldr	r2, [sp, #4]
 80083c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083ce:	425a      	negs	r2, r3
 80083d0:	415a      	adcs	r2, r3
 80083d2:	602a      	str	r2, [r5, #0]
 80083d4:	e7ee      	b.n	80083b4 <__swhatbuf_r+0x1e>
 80083d6:	2340      	movs	r3, #64	; 0x40
 80083d8:	2000      	movs	r0, #0
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	b016      	add	sp, #88	; 0x58
 80083de:	bd70      	pop	{r4, r5, r6, pc}

080083e0 <__smakebuf_r>:
 80083e0:	898b      	ldrh	r3, [r1, #12]
 80083e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083e4:	079d      	lsls	r5, r3, #30
 80083e6:	4606      	mov	r6, r0
 80083e8:	460c      	mov	r4, r1
 80083ea:	d507      	bpl.n	80083fc <__smakebuf_r+0x1c>
 80083ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	6123      	str	r3, [r4, #16]
 80083f4:	2301      	movs	r3, #1
 80083f6:	6163      	str	r3, [r4, #20]
 80083f8:	b002      	add	sp, #8
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
 80083fc:	ab01      	add	r3, sp, #4
 80083fe:	466a      	mov	r2, sp
 8008400:	f7ff ffc9 	bl	8008396 <__swhatbuf_r>
 8008404:	9900      	ldr	r1, [sp, #0]
 8008406:	4605      	mov	r5, r0
 8008408:	4630      	mov	r0, r6
 800840a:	f7fd fae7 	bl	80059dc <_malloc_r>
 800840e:	b948      	cbnz	r0, 8008424 <__smakebuf_r+0x44>
 8008410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008414:	059a      	lsls	r2, r3, #22
 8008416:	d4ef      	bmi.n	80083f8 <__smakebuf_r+0x18>
 8008418:	f023 0303 	bic.w	r3, r3, #3
 800841c:	f043 0302 	orr.w	r3, r3, #2
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	e7e3      	b.n	80083ec <__smakebuf_r+0xc>
 8008424:	4b0d      	ldr	r3, [pc, #52]	; (800845c <__smakebuf_r+0x7c>)
 8008426:	62b3      	str	r3, [r6, #40]	; 0x28
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	6020      	str	r0, [r4, #0]
 800842c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008430:	81a3      	strh	r3, [r4, #12]
 8008432:	9b00      	ldr	r3, [sp, #0]
 8008434:	6163      	str	r3, [r4, #20]
 8008436:	9b01      	ldr	r3, [sp, #4]
 8008438:	6120      	str	r0, [r4, #16]
 800843a:	b15b      	cbz	r3, 8008454 <__smakebuf_r+0x74>
 800843c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008440:	4630      	mov	r0, r6
 8008442:	f000 f86b 	bl	800851c <_isatty_r>
 8008446:	b128      	cbz	r0, 8008454 <__smakebuf_r+0x74>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f023 0303 	bic.w	r3, r3, #3
 800844e:	f043 0301 	orr.w	r3, r3, #1
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	89a0      	ldrh	r0, [r4, #12]
 8008456:	4305      	orrs	r5, r0
 8008458:	81a5      	strh	r5, [r4, #12]
 800845a:	e7cd      	b.n	80083f8 <__smakebuf_r+0x18>
 800845c:	08007cb9 	.word	0x08007cb9

08008460 <_malloc_usable_size_r>:
 8008460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008464:	1f18      	subs	r0, r3, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	bfbc      	itt	lt
 800846a:	580b      	ldrlt	r3, [r1, r0]
 800846c:	18c0      	addlt	r0, r0, r3
 800846e:	4770      	bx	lr

08008470 <_raise_r>:
 8008470:	291f      	cmp	r1, #31
 8008472:	b538      	push	{r3, r4, r5, lr}
 8008474:	4604      	mov	r4, r0
 8008476:	460d      	mov	r5, r1
 8008478:	d904      	bls.n	8008484 <_raise_r+0x14>
 800847a:	2316      	movs	r3, #22
 800847c:	6003      	str	r3, [r0, #0]
 800847e:	f04f 30ff 	mov.w	r0, #4294967295
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008486:	b112      	cbz	r2, 800848e <_raise_r+0x1e>
 8008488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800848c:	b94b      	cbnz	r3, 80084a2 <_raise_r+0x32>
 800848e:	4620      	mov	r0, r4
 8008490:	f000 f830 	bl	80084f4 <_getpid_r>
 8008494:	462a      	mov	r2, r5
 8008496:	4601      	mov	r1, r0
 8008498:	4620      	mov	r0, r4
 800849a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800849e:	f000 b817 	b.w	80084d0 <_kill_r>
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d00a      	beq.n	80084bc <_raise_r+0x4c>
 80084a6:	1c59      	adds	r1, r3, #1
 80084a8:	d103      	bne.n	80084b2 <_raise_r+0x42>
 80084aa:	2316      	movs	r3, #22
 80084ac:	6003      	str	r3, [r0, #0]
 80084ae:	2001      	movs	r0, #1
 80084b0:	e7e7      	b.n	8008482 <_raise_r+0x12>
 80084b2:	2400      	movs	r4, #0
 80084b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084b8:	4628      	mov	r0, r5
 80084ba:	4798      	blx	r3
 80084bc:	2000      	movs	r0, #0
 80084be:	e7e0      	b.n	8008482 <_raise_r+0x12>

080084c0 <raise>:
 80084c0:	4b02      	ldr	r3, [pc, #8]	; (80084cc <raise+0xc>)
 80084c2:	4601      	mov	r1, r0
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	f7ff bfd3 	b.w	8008470 <_raise_r>
 80084ca:	bf00      	nop
 80084cc:	20000010 	.word	0x20000010

080084d0 <_kill_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4d07      	ldr	r5, [pc, #28]	; (80084f0 <_kill_r+0x20>)
 80084d4:	2300      	movs	r3, #0
 80084d6:	4604      	mov	r4, r0
 80084d8:	4608      	mov	r0, r1
 80084da:	4611      	mov	r1, r2
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	f000 f84d 	bl	800857c <_kill>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	d102      	bne.n	80084ec <_kill_r+0x1c>
 80084e6:	682b      	ldr	r3, [r5, #0]
 80084e8:	b103      	cbz	r3, 80084ec <_kill_r+0x1c>
 80084ea:	6023      	str	r3, [r4, #0]
 80084ec:	bd38      	pop	{r3, r4, r5, pc}
 80084ee:	bf00      	nop
 80084f0:	20000e48 	.word	0x20000e48

080084f4 <_getpid_r>:
 80084f4:	f000 b832 	b.w	800855c <_getpid>

080084f8 <_fstat_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	4d07      	ldr	r5, [pc, #28]	; (8008518 <_fstat_r+0x20>)
 80084fc:	2300      	movs	r3, #0
 80084fe:	4604      	mov	r4, r0
 8008500:	4608      	mov	r0, r1
 8008502:	4611      	mov	r1, r2
 8008504:	602b      	str	r3, [r5, #0]
 8008506:	f000 f821 	bl	800854c <_fstat>
 800850a:	1c43      	adds	r3, r0, #1
 800850c:	d102      	bne.n	8008514 <_fstat_r+0x1c>
 800850e:	682b      	ldr	r3, [r5, #0]
 8008510:	b103      	cbz	r3, 8008514 <_fstat_r+0x1c>
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	bd38      	pop	{r3, r4, r5, pc}
 8008516:	bf00      	nop
 8008518:	20000e48 	.word	0x20000e48

0800851c <_isatty_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	4d06      	ldr	r5, [pc, #24]	; (8008538 <_isatty_r+0x1c>)
 8008520:	2300      	movs	r3, #0
 8008522:	4604      	mov	r4, r0
 8008524:	4608      	mov	r0, r1
 8008526:	602b      	str	r3, [r5, #0]
 8008528:	f000 f820 	bl	800856c <_isatty>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_isatty_r+0x1a>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	b103      	cbz	r3, 8008536 <_isatty_r+0x1a>
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	20000e48 	.word	0x20000e48

0800853c <_close>:
 800853c:	4b02      	ldr	r3, [pc, #8]	; (8008548 <_close+0xc>)
 800853e:	2258      	movs	r2, #88	; 0x58
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	f04f 30ff 	mov.w	r0, #4294967295
 8008546:	4770      	bx	lr
 8008548:	20000e48 	.word	0x20000e48

0800854c <_fstat>:
 800854c:	4b02      	ldr	r3, [pc, #8]	; (8008558 <_fstat+0xc>)
 800854e:	2258      	movs	r2, #88	; 0x58
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	f04f 30ff 	mov.w	r0, #4294967295
 8008556:	4770      	bx	lr
 8008558:	20000e48 	.word	0x20000e48

0800855c <_getpid>:
 800855c:	4b02      	ldr	r3, [pc, #8]	; (8008568 <_getpid+0xc>)
 800855e:	2258      	movs	r2, #88	; 0x58
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	f04f 30ff 	mov.w	r0, #4294967295
 8008566:	4770      	bx	lr
 8008568:	20000e48 	.word	0x20000e48

0800856c <_isatty>:
 800856c:	4b02      	ldr	r3, [pc, #8]	; (8008578 <_isatty+0xc>)
 800856e:	2258      	movs	r2, #88	; 0x58
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	2000      	movs	r0, #0
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	20000e48 	.word	0x20000e48

0800857c <_kill>:
 800857c:	4b02      	ldr	r3, [pc, #8]	; (8008588 <_kill+0xc>)
 800857e:	2258      	movs	r2, #88	; 0x58
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	f04f 30ff 	mov.w	r0, #4294967295
 8008586:	4770      	bx	lr
 8008588:	20000e48 	.word	0x20000e48

0800858c <_lseek>:
 800858c:	4b02      	ldr	r3, [pc, #8]	; (8008598 <_lseek+0xc>)
 800858e:	2258      	movs	r2, #88	; 0x58
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	f04f 30ff 	mov.w	r0, #4294967295
 8008596:	4770      	bx	lr
 8008598:	20000e48 	.word	0x20000e48

0800859c <_read>:
 800859c:	4b02      	ldr	r3, [pc, #8]	; (80085a8 <_read+0xc>)
 800859e:	2258      	movs	r2, #88	; 0x58
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f04f 30ff 	mov.w	r0, #4294967295
 80085a6:	4770      	bx	lr
 80085a8:	20000e48 	.word	0x20000e48

080085ac <_sbrk>:
 80085ac:	4a04      	ldr	r2, [pc, #16]	; (80085c0 <_sbrk+0x14>)
 80085ae:	6811      	ldr	r1, [r2, #0]
 80085b0:	4603      	mov	r3, r0
 80085b2:	b909      	cbnz	r1, 80085b8 <_sbrk+0xc>
 80085b4:	4903      	ldr	r1, [pc, #12]	; (80085c4 <_sbrk+0x18>)
 80085b6:	6011      	str	r1, [r2, #0]
 80085b8:	6810      	ldr	r0, [r2, #0]
 80085ba:	4403      	add	r3, r0
 80085bc:	6013      	str	r3, [r2, #0]
 80085be:	4770      	bx	lr
 80085c0:	20000e50 	.word	0x20000e50
 80085c4:	20000e54 	.word	0x20000e54

080085c8 <_write>:
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <_write+0xc>)
 80085ca:	2258      	movs	r2, #88	; 0x58
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	4770      	bx	lr
 80085d4:	20000e48 	.word	0x20000e48

080085d8 <_exit>:
 80085d8:	e7fe      	b.n	80085d8 <_exit>
	...

080085dc <_init>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr

080085e8 <_fini>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr
