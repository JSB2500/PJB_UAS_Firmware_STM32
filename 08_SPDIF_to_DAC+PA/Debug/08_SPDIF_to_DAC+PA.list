
08_SPDIF_to_DAC+PA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009484  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001780  08009688  08009688  00019688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae08  0800ae08  0001ae08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae10  0800ae10  0001ae10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ae14  0800ae14  0001ae14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  20000000  0800ae18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004634  200001f8  0800b010  000201f8  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  2000482c  0800b010  0002482c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026dc4  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055a6  00000000  00000000  00046fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00013a31  00000000  00000000  0004c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000014e8  00000000  00000000  0005ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001e10  00000000  00000000  000614b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a7f4  00000000  00000000  000632c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023514  00000000  00000000  0008dab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fb5f7  00000000  00000000  000b0fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001ac5bf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000506c  00000000  00000000  001ac610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  001b167c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  001b1748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800966c 	.word	0x0800966c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800966c 	.word	0x0800966c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_InitTick+0x3c>)
{
 80005f8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_InitTick+0x40>)
 80005fc:	7818      	ldrb	r0, [r3, #0]
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f0 	udiv	r3, r3, r0
 8000606:	6810      	ldr	r0, [r2, #0]
 8000608:	fbb0 f0f3 	udiv	r0, r0, r3
 800060c:	f000 f898 	bl	8000740 <HAL_SYSTICK_Config>
 8000610:	4604      	mov	r4, r0
 8000612:	b958      	cbnz	r0, 800062c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000614:	2d0f      	cmp	r5, #15
 8000616:	d809      	bhi.n	800062c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	4602      	mov	r2, r0
 800061a:	4629      	mov	r1, r5
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f84e 	bl	80006c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HAL_InitTick+0x44>)
 8000626:	4620      	mov	r0, r4
 8000628:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800062c:	2001      	movs	r0, #1
 800062e:	e7fc      	b.n	800062a <HAL_InitTick+0x36>
 8000630:	20000000 	.word	0x20000000
 8000634:	20000024 	.word	0x20000024
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_Init>:
{
 800063c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f82c 	bl	800069c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff ffd5 	bl	80005f4 <HAL_InitTick>
  HAL_MspInit();
 800064a:	f005 fed1 	bl	80063f0 <HAL_MspInit>
}
 800064e:	2000      	movs	r0, #0
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x10>)
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_IncTick+0x14>)
 8000658:	6811      	ldr	r1, [r2, #0]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	440b      	add	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000214 	.word	0x20000214
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <HAL_GetTick+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000214 	.word	0x20000214

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff6 	bl	800066c <HAL_GetTick>
 8000680:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000684:	bf1e      	ittt	ne
 8000686:	4b04      	ldrne	r3, [pc, #16]	; (8000698 <HAL_Delay+0x20>)
 8000688:	781b      	ldrbne	r3, [r3, #0]
 800068a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	1b43      	subs	r3, r0, r5
 8000692:	42a3      	cmp	r3, r4
 8000694:	d3fa      	bcc.n	800068c <HAL_Delay+0x14>
  {
  }
}
 8000696:	bd38      	pop	{r3, r4, r5, pc}
 8000698:	20000000 	.word	0x20000000

0800069c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006aa:	0412      	lsls	r2, r2, #16
 80006ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	68dc      	ldr	r4, [r3, #12]
 80006c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ca:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	2d04      	cmp	r5, #4
 80006d2:	bf28      	it	cs
 80006d4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006dc:	bf8c      	ite	hi
 80006de:	3c03      	subhi	r4, #3
 80006e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80006e6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	fa01 f104 	lsl.w	r1, r1, r4
 80006f8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000700:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000702:	db06      	blt.n	8000712 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000708:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800070c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000710:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	f000 000f 	and.w	r0, r0, #15
 8000716:	4a02      	ldr	r2, [pc, #8]	; (8000720 <HAL_NVIC_SetPriority+0x60>)
 8000718:	5413      	strb	r3, [r2, r0]
 800071a:	e7f9      	b.n	8000710 <HAL_NVIC_SetPriority+0x50>
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	e000ed14 	.word	0xe000ed14

08000724 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000724:	2800      	cmp	r0, #0
 8000726:	db08      	blt.n	800073a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000728:	0942      	lsrs	r2, r0, #5
 800072a:	2301      	movs	r3, #1
 800072c:	f000 001f 	and.w	r0, r0, #31
 8000730:	fa03 f000 	lsl.w	r0, r3, r0
 8000734:	4b01      	ldr	r3, [pc, #4]	; (800073c <HAL_NVIC_EnableIRQ+0x18>)
 8000736:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	3801      	subs	r0, #1
 8000742:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000746:	d20b      	bcs.n	8000760 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <HAL_SYSTICK_Config+0x24>)
 800074e:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000752:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000758:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000760:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000768:	6803      	ldr	r3, [r0, #0]
{
 800076a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800076c:	2018      	movs	r0, #24
 800076e:	b2d9      	uxtb	r1, r3
 8000770:	3910      	subs	r1, #16
 8000772:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8000776:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000778:	4c05      	ldr	r4, [pc, #20]	; (8000790 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800077a:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800077c:	5c20      	ldrb	r0, [r4, r0]
 800077e:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000780:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8000784:	f020 0003 	bic.w	r0, r0, #3
 8000788:	bf88      	it	hi
 800078a:	3004      	addhi	r0, #4
 800078c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	08009688 	.word	0x08009688

08000794 <HAL_DMA_Init>:
{
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000798:	f7ff ff68 	bl	800066c <HAL_GetTick>
 800079c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800079e:	2c00      	cmp	r4, #0
 80007a0:	d073      	beq.n	800088a <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 80007a2:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80007a4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80007a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80007b0:	6813      	ldr	r3, [r2, #0]
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007b8:	6821      	ldr	r1, [r4, #0]
 80007ba:	680b      	ldr	r3, [r1, #0]
 80007bc:	07d8      	lsls	r0, r3, #31
 80007be:	d42f      	bmi.n	8000820 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80007c0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c2:	4d33      	ldr	r5, [pc, #204]	; (8000890 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007c4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007c6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	68e2      	ldr	r2, [r4, #12]
 80007d0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007d2:	6922      	ldr	r2, [r4, #16]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	6962      	ldr	r2, [r4, #20]
 80007d8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007da:	69e2      	ldr	r2, [r4, #28]
 80007dc:	4303      	orrs	r3, r0
 80007de:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007e0:	6a22      	ldr	r2, [r4, #32]
 80007e2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007e8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007ec:	bf02      	ittt	eq
 80007ee:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80007f2:	4335      	orreq	r5, r6
 80007f4:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007f6:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80007f8:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007fa:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007fc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000800:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000804:	d133      	bne.n	800086e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8000806:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000808:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800080a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800080c:	b37d      	cbz	r5, 800086e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800080e:	b990      	cbnz	r0, 8000836 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8000810:	2a01      	cmp	r2, #1
 8000812:	d021      	beq.n	8000858 <HAL_DMA_Init+0xc4>
 8000814:	f032 0202 	bics.w	r2, r2, #2
 8000818:	d129      	bne.n	800086e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800081a:	01ea      	lsls	r2, r5, #7
 800081c:	d527      	bpl.n	800086e <HAL_DMA_Init+0xda>
 800081e:	e01e      	b.n	800085e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000820:	f7ff ff24 	bl	800066c <HAL_GetTick>
 8000824:	1b40      	subs	r0, r0, r5
 8000826:	2805      	cmp	r0, #5
 8000828:	d9c6      	bls.n	80007b8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082a:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800082c:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800082e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000830:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000834:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000836:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800083a:	d114      	bne.n	8000866 <HAL_DMA_Init+0xd2>
    switch (tmp)
 800083c:	2a03      	cmp	r2, #3
 800083e:	d816      	bhi.n	800086e <HAL_DMA_Init+0xda>
 8000840:	a001      	add	r0, pc, #4	; (adr r0, 8000848 <HAL_DMA_Init+0xb4>)
 8000842:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000846:	bf00      	nop
 8000848:	0800085f 	.word	0x0800085f
 800084c:	0800081b 	.word	0x0800081b
 8000850:	0800085f 	.word	0x0800085f
 8000854:	08000859 	.word	0x08000859
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000858:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800085c:	d107      	bne.n	800086e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800085e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000860:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000862:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000864:	e7e4      	b.n	8000830 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8000866:	2a02      	cmp	r2, #2
 8000868:	d9f9      	bls.n	800085e <HAL_DMA_Init+0xca>
 800086a:	2a03      	cmp	r2, #3
 800086c:	d0d5      	beq.n	800081a <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800086e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000870:	4620      	mov	r0, r4
 8000872:	f7ff ff79 	bl	8000768 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000876:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000878:	233f      	movs	r3, #63	; 0x3f
 800087a:	4093      	lsls	r3, r2
 800087c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800087e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000880:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000882:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000884:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000888:	e7d4      	b.n	8000834 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800088a:	2001      	movs	r0, #1
 800088c:	e7d2      	b.n	8000834 <HAL_DMA_Init+0xa0>
 800088e:	bf00      	nop
 8000890:	e010803f 	.word	0xe010803f

08000894 <HAL_DMA_Start_IT>:
{
 8000894:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000896:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800089a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800089c:	2c01      	cmp	r4, #1
 800089e:	d034      	beq.n	800090a <HAL_DMA_Start_IT+0x76>
 80008a0:	2401      	movs	r4, #1
 80008a2:	2500      	movs	r5, #0
 80008a4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80008a8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80008ac:	2c01      	cmp	r4, #1
 80008ae:	f04f 0402 	mov.w	r4, #2
 80008b2:	d128      	bne.n	8000906 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80008b4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008b8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008ba:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008bc:	6825      	ldr	r5, [r4, #0]
 80008be:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80008c2:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80008c4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008c6:	6883      	ldr	r3, [r0, #8]
 80008c8:	2b40      	cmp	r3, #64	; 0x40
 80008ca:	d119      	bne.n	8000900 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 80008cc:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80008ce:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008d0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	4093      	lsls	r3, r2
 80008d6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	f043 0316 	orr.w	r3, r3, #22
 80008de:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80008e0:	6963      	ldr	r3, [r4, #20]
 80008e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e6:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80008e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008ea:	b11b      	cbz	r3, 80008f4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008f4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008f6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6023      	str	r3, [r4, #0]
}
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000900:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000902:	60e2      	str	r2, [r4, #12]
 8000904:	e7e4      	b.n	80008d0 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000906:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800090a:	2002      	movs	r0, #2
 800090c:	e7f7      	b.n	80008fe <HAL_DMA_Start_IT+0x6a>

0800090e <HAL_DMA_Abort>:
{
 800090e:	b570      	push	{r4, r5, r6, lr}
 8000910:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000912:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8000914:	f7ff feaa 	bl	800066c <HAL_GetTick>
 8000918:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800091a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800091e:	2b02      	cmp	r3, #2
 8000920:	d006      	beq.n	8000930 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000922:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 8000924:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000926:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8000928:	2300      	movs	r3, #0
 800092a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800092e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	f022 0216 	bic.w	r2, r2, #22
 8000938:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800093a:	695a      	ldr	r2, [r3, #20]
 800093c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000940:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000942:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000944:	b90a      	cbnz	r2, 800094a <HAL_DMA_Abort+0x3c>
 8000946:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000948:	b11a      	cbz	r2, 8000952 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	f022 0208 	bic.w	r2, r2, #8
 8000950:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	f022 0201 	bic.w	r2, r2, #1
 8000958:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f013 0301 	ands.w	r3, r3, #1
 8000962:	d10a      	bne.n	800097a <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000964:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000966:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8000968:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800096a:	408a      	lsls	r2, r1
 800096c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800096e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8000970:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8000974:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8000978:	e7d9      	b.n	800092e <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800097a:	f7ff fe77 	bl	800066c <HAL_GetTick>
 800097e:	1b40      	subs	r0, r0, r5
 8000980:	2805      	cmp	r0, #5
 8000982:	d9ea      	bls.n	800095a <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000984:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000986:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000988:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800098a:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800098c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8000990:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8000994:	e7cb      	b.n	800092e <HAL_DMA_Abort+0x20>

08000996 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000996:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800099a:	2b02      	cmp	r3, #2
 800099c:	d003      	beq.n	80009a6 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80009a2:	2001      	movs	r0, #1
 80009a4:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80009a6:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80009a8:	2305      	movs	r3, #5
 80009aa:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80009ae:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80009b0:	6813      	ldr	r3, [r2, #0]
 80009b2:	f023 0301 	bic.w	r3, r3, #1
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	4770      	bx	lr
	...

080009bc <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80009bc:	2300      	movs	r3, #0
{
 80009be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80009c0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009c2:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80009c4:	4b5b      	ldr	r3, [pc, #364]	; (8000b34 <HAL_DMA_IRQHandler+0x178>)
{
 80009c6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009c8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80009ca:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009cc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80009ce:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009d0:	409a      	lsls	r2, r3
 80009d2:	4232      	tst	r2, r6
 80009d4:	d00c      	beq.n	80009f0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80009d6:	6801      	ldr	r1, [r0, #0]
 80009d8:	6808      	ldr	r0, [r1, #0]
 80009da:	0740      	lsls	r0, r0, #29
 80009dc:	d508      	bpl.n	80009f0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80009de:	6808      	ldr	r0, [r1, #0]
 80009e0:	f020 0004 	bic.w	r0, r0, #4
 80009e4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80009e6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80009e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80009ea:	f042 0201 	orr.w	r2, r2, #1
 80009ee:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80009f0:	2201      	movs	r2, #1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4232      	tst	r2, r6
 80009f6:	d008      	beq.n	8000a0a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80009f8:	6821      	ldr	r1, [r4, #0]
 80009fa:	6949      	ldr	r1, [r1, #20]
 80009fc:	0609      	lsls	r1, r1, #24
 80009fe:	d504      	bpl.n	8000a0a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a00:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a02:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a04:	f042 0202 	orr.w	r2, r2, #2
 8000a08:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	4232      	tst	r2, r6
 8000a10:	d008      	beq.n	8000a24 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a12:	6821      	ldr	r1, [r4, #0]
 8000a14:	6809      	ldr	r1, [r1, #0]
 8000a16:	0788      	lsls	r0, r1, #30
 8000a18:	d504      	bpl.n	8000a24 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a1a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a1c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a1e:	f042 0204 	orr.w	r2, r2, #4
 8000a22:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a24:	2210      	movs	r2, #16
 8000a26:	409a      	lsls	r2, r3
 8000a28:	4232      	tst	r2, r6
 8000a2a:	d010      	beq.n	8000a4e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	6819      	ldr	r1, [r3, #0]
 8000a30:	0709      	lsls	r1, r1, #28
 8000a32:	d50c      	bpl.n	8000a4e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a34:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	0350      	lsls	r0, r2, #13
 8000a3a:	d537      	bpl.n	8000aac <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	0319      	lsls	r1, r3, #12
 8000a40:	d401      	bmi.n	8000a46 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a44:	e000      	b.n	8000a48 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000a46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000a48:	b10b      	cbz	r3, 8000a4e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000a4e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000a50:	2220      	movs	r2, #32
 8000a52:	408a      	lsls	r2, r1
 8000a54:	4232      	tst	r2, r6
 8000a56:	d03a      	beq.n	8000ace <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	06c6      	lsls	r6, r0, #27
 8000a5e:	d536      	bpl.n	8000ace <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000a60:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000a62:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000a66:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a68:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000a6a:	d127      	bne.n	8000abc <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a6c:	f022 0216 	bic.w	r2, r2, #22
 8000a70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000a72:	695a      	ldr	r2, [r3, #20]
 8000a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a78:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000a7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a7c:	b90a      	cbnz	r2, 8000a82 <HAL_DMA_IRQHandler+0xc6>
 8000a7e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000a80:	b11a      	cbz	r2, 8000a8a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	f022 0208 	bic.w	r2, r2, #8
 8000a88:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a8a:	233f      	movs	r3, #63	; 0x3f
 8000a8c:	408b      	lsls	r3, r1
 8000a8e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000a90:	2300      	movs	r3, #0
 8000a92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000a96:	2301      	movs	r3, #1
 8000a98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000a9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d045      	beq.n	8000b2e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8000aa2:	4620      	mov	r0, r4
}
 8000aa4:	b003      	add	sp, #12
 8000aa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000aaa:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	05d2      	lsls	r2, r2, #23
 8000ab0:	d4c7      	bmi.n	8000a42 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	f022 0208 	bic.w	r2, r2, #8
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	e7c2      	b.n	8000a42 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000abc:	0350      	lsls	r0, r2, #13
 8000abe:	d527      	bpl.n	8000b10 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	0319      	lsls	r1, r3, #12
 8000ac4:	d431      	bmi.n	8000b2a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8000ac6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000ac8:	b10b      	cbz	r3, 8000ace <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8000aca:	4620      	mov	r0, r4
 8000acc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000ace:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ad0:	b36b      	cbz	r3, 8000b2e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ad2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ad4:	07da      	lsls	r2, r3, #31
 8000ad6:	d519      	bpl.n	8000b0c <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8000ad8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8000adc:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000ade:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000ae8:	6813      	ldr	r3, [r2, #0]
 8000aea:	f023 0301 	bic.w	r3, r3, #1
 8000aee:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000af0:	9b01      	ldr	r3, [sp, #4]
 8000af2:	3301      	adds	r3, #1
 8000af4:	42bb      	cmp	r3, r7
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	d802      	bhi.n	8000b00 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	07db      	lsls	r3, r3, #31
 8000afe:	d4f7      	bmi.n	8000af0 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8000b00:	2300      	movs	r3, #0
 8000b02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000b06:	2301      	movs	r3, #1
 8000b08:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000b0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b0e:	e7c6      	b.n	8000a9e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000b16:	d108      	bne.n	8000b2a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b18:	6819      	ldr	r1, [r3, #0]
 8000b1a:	f021 0110 	bic.w	r1, r1, #16
 8000b1e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000b20:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000b22:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000b26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000b2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b2c:	e7cc      	b.n	8000ac8 <HAL_DMA_IRQHandler+0x10c>
}
 8000b2e:	b003      	add	sp, #12
 8000b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000024 	.word	0x20000024

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b3c:	2300      	movs	r3, #0
{
 8000b3e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b40:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000d14 <HAL_GPIO_Init+0x1dc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b44:	4a71      	ldr	r2, [pc, #452]	; (8000d0c <HAL_GPIO_Init+0x1d4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b46:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000d18 <HAL_GPIO_Init+0x1e0>
    ioposition = ((uint32_t)0x01) << position;
 8000b4a:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4c:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000b4e:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b50:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000b54:	ea37 0404 	bics.w	r4, r7, r4
 8000b58:	f040 80be 	bne.w	8000cd8 <HAL_GPIO_Init+0x1a0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b5c:	684c      	ldr	r4, [r1, #4]
 8000b5e:	f024 0a10 	bic.w	sl, r4, #16
 8000b62:	f1ba 0f02 	cmp.w	sl, #2
 8000b66:	d116      	bne.n	8000b96 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 8000b68:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b6c:	f003 0b07 	and.w	fp, r3, #7
 8000b70:	f04f 0c0f 	mov.w	ip, #15
 8000b74:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8000b78:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000b7c:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b80:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b84:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b88:	690e      	ldr	r6, [r1, #16]
 8000b8a:	fa06 f60b 	lsl.w	r6, r6, fp
 8000b8e:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000b92:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8000b96:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b9a:	f04f 0c03 	mov.w	ip, #3
      temp = GPIOx->MODER;
 8000b9e:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba2:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ba6:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000baa:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bae:	ea6f 060c 	mvn.w	r6, ip
 8000bb2:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bb6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bba:	9601      	str	r6, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bbc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000bc0:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000bc4:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc8:	d815      	bhi.n	8000bf6 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 8000bca:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bce:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bd2:	68ce      	ldr	r6, [r1, #12]
 8000bd4:	fa06 fa0e 	lsl.w	sl, r6, lr
 8000bd8:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8000bdc:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000be0:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be4:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000be8:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000bec:	fa0c fc03 	lsl.w	ip, ip, r3
 8000bf0:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8000bf4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bf6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bf8:	9e01      	ldr	r6, [sp, #4]
 8000bfa:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bfc:	688e      	ldr	r6, [r1, #8]
 8000bfe:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c02:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000c04:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c06:	00e6      	lsls	r6, r4, #3
 8000c08:	d566      	bpl.n	8000cd8 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000c0e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c12:	f003 0c03 	and.w	ip, r3, #3
 8000c16:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000c1e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c22:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000c2a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000c2e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000c32:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000c36:	9603      	str	r6, [sp, #12]
 8000c38:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c3a:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8000c3e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c42:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c46:	4e32      	ldr	r6, [pc, #200]	; (8000d10 <HAL_GPIO_Init+0x1d8>)
 8000c48:	42b0      	cmp	r0, r6
 8000c4a:	d04c      	beq.n	8000ce6 <HAL_GPIO_Init+0x1ae>
 8000c4c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c50:	42b0      	cmp	r0, r6
 8000c52:	d04a      	beq.n	8000cea <HAL_GPIO_Init+0x1b2>
 8000c54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c58:	42b0      	cmp	r0, r6
 8000c5a:	d048      	beq.n	8000cee <HAL_GPIO_Init+0x1b6>
 8000c5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c60:	42b0      	cmp	r0, r6
 8000c62:	d046      	beq.n	8000cf2 <HAL_GPIO_Init+0x1ba>
 8000c64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c68:	42b0      	cmp	r0, r6
 8000c6a:	d044      	beq.n	8000cf6 <HAL_GPIO_Init+0x1be>
 8000c6c:	4548      	cmp	r0, r9
 8000c6e:	d044      	beq.n	8000cfa <HAL_GPIO_Init+0x1c2>
 8000c70:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000c74:	42b0      	cmp	r0, r6
 8000c76:	d042      	beq.n	8000cfe <HAL_GPIO_Init+0x1c6>
 8000c78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c7c:	42b0      	cmp	r0, r6
 8000c7e:	d040      	beq.n	8000d02 <HAL_GPIO_Init+0x1ca>
 8000c80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c84:	42b0      	cmp	r0, r6
 8000c86:	d03e      	beq.n	8000d06 <HAL_GPIO_Init+0x1ce>
 8000c88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c8c:	42b0      	cmp	r0, r6
 8000c8e:	bf0c      	ite	eq
 8000c90:	2609      	moveq	r6, #9
 8000c92:	260a      	movne	r6, #10
 8000c94:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c98:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c9c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ca0:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ca2:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000ca6:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ca8:	bf0c      	ite	eq
 8000caa:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000cac:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cae:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000cb2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000cb4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cb6:	bf0c      	ite	eq
 8000cb8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000cba:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cbc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000cc0:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000cc2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cc4:	bf0c      	ite	eq
 8000cc6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000cc8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cca:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000ccc:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000cce:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cd0:	bf54      	ite	pl
 8000cd2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000cd4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000cd6:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cd8:	3301      	adds	r3, #1
 8000cda:	2b10      	cmp	r3, #16
 8000cdc:	f47f af35 	bne.w	8000b4a <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 8000ce0:	b005      	add	sp, #20
 8000ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	e7d4      	b.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000cea:	2601      	movs	r6, #1
 8000cec:	e7d2      	b.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000cee:	2602      	movs	r6, #2
 8000cf0:	e7d0      	b.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000cf2:	2603      	movs	r6, #3
 8000cf4:	e7ce      	b.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000cf6:	2604      	movs	r6, #4
 8000cf8:	e7cc      	b.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000cfa:	2605      	movs	r6, #5
 8000cfc:	e7ca      	b.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000cfe:	2606      	movs	r6, #6
 8000d00:	e7c8      	b.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000d02:	2607      	movs	r6, #7
 8000d04:	e7c6      	b.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000d06:	2608      	movs	r6, #8
 8000d08:	e7c4      	b.n	8000c94 <HAL_GPIO_Init+0x15c>
 8000d0a:	bf00      	nop
 8000d0c:	40013c00 	.word	0x40013c00
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40021400 	.word	0x40021400

08000d1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d1c:	6903      	ldr	r3, [r0, #16]
 8000d1e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d20:	bf14      	ite	ne
 8000d22:	2001      	movne	r0, #1
 8000d24:	2000      	moveq	r0, #0
 8000d26:	4770      	bx	lr

08000d28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d28:	b10a      	cbz	r2, 8000d2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d2a:	6181      	str	r1, [r0, #24]
  }
}
 8000d2c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d2e:	0409      	lsls	r1, r1, #16
 8000d30:	e7fb      	b.n	8000d2a <HAL_GPIO_WritePin+0x2>

08000d32 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000d32:	6943      	ldr	r3, [r0, #20]
 8000d34:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d38:	bf08      	it	eq
 8000d3a:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d3c:	6181      	str	r1, [r0, #24]
  }
}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d40:	4770      	bx	lr
	...

08000d44 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000d46:	6951      	ldr	r1, [r2, #20]
 8000d48:	4201      	tst	r1, r0
{
 8000d4a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d4c:	d002      	beq.n	8000d54 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d4e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d50:	f7ff fff6 	bl	8000d40 <HAL_GPIO_EXTI_Callback>
}
 8000d54:	bd08      	pop	{r3, pc}
 8000d56:	bf00      	nop
 8000d58:	40013c00 	.word	0x40013c00

08000d5c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000d5c:	6803      	ldr	r3, [r0, #0]
 8000d5e:	699a      	ldr	r2, [r3, #24]
 8000d60:	0791      	lsls	r1, r2, #30
 8000d62:	d501      	bpl.n	8000d68 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d68:	699a      	ldr	r2, [r3, #24]
 8000d6a:	07d2      	lsls	r2, r2, #31
 8000d6c:	d403      	bmi.n	8000d76 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000d6e:	699a      	ldr	r2, [r3, #24]
 8000d70:	f042 0201 	orr.w	r2, r2, #1
 8000d74:	619a      	str	r2, [r3, #24]
  }
}
 8000d76:	4770      	bx	lr

08000d78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000d78:	b530      	push	{r4, r5, lr}
 8000d7a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000d7c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000d80:	6804      	ldr	r4, [r0, #0]
 8000d82:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8000d86:	6860      	ldr	r0, [r4, #4]
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <I2C_TransferConfig+0x24>)
 8000d8c:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8000d90:	430a      	orrs	r2, r1
 8000d92:	ea20 0003 	bic.w	r0, r0, r3
 8000d96:	4302      	orrs	r2, r0
 8000d98:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000d9a:	bd30      	pop	{r4, r5, pc}
 8000d9c:	03ff63ff 	.word	0x03ff63ff

08000da0 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000da0:	f011 0301 	ands.w	r3, r1, #1
 8000da4:	d007      	beq.n	8000db6 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000da6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000daa:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000dae:	2b28      	cmp	r3, #40	; 0x28
 8000db0:	bf0c      	ite	eq
 8000db2:	2342      	moveq	r3, #66	; 0x42
 8000db4:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000db6:	078a      	lsls	r2, r1, #30
 8000db8:	d509      	bpl.n	8000dce <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8000dba:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000dbe:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000dc2:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000dc4:	bf0c      	ite	eq
 8000dc6:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000dca:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000dce:	074a      	lsls	r2, r1, #29
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000dd0:	6801      	ldr	r1, [r0, #0]
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000dd2:	bf48      	it	mi
 8000dd4:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000dd8:	680a      	ldr	r2, [r1, #0]
 8000dda:	ea22 0303 	bic.w	r3, r2, r3
 8000dde:	600b      	str	r3, [r1, #0]
}
 8000de0:	4770      	bx	lr

08000de2 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000de2:	6803      	ldr	r3, [r0, #0]
{
 8000de4:	b570      	push	{r4, r5, r6, lr}
 8000de6:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000de8:	6998      	ldr	r0, [r3, #24]
{
 8000dea:	460d      	mov	r5, r1
 8000dec:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000dee:	f010 0010 	ands.w	r0, r0, #16
 8000df2:	d116      	bne.n	8000e22 <I2C_IsAcknowledgeFailed+0x40>
}
 8000df4:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000df6:	1c69      	adds	r1, r5, #1
 8000df8:	d014      	beq.n	8000e24 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dfa:	f7ff fc37 	bl	800066c <HAL_GetTick>
 8000dfe:	1b80      	subs	r0, r0, r6
 8000e00:	4285      	cmp	r5, r0
 8000e02:	d300      	bcc.n	8000e06 <I2C_IsAcknowledgeFailed+0x24>
 8000e04:	b96d      	cbnz	r5, 8000e22 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e08:	f043 0320 	orr.w	r3, r3, #32
 8000e0c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000e0e:	2320      	movs	r3, #32
 8000e10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000e1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000e1e:	2001      	movs	r0, #1
 8000e20:	e7e8      	b.n	8000df4 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	699a      	ldr	r2, [r3, #24]
 8000e26:	0692      	lsls	r2, r2, #26
 8000e28:	d5e5      	bpl.n	8000df6 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e2a:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e2c:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8000e2e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e30:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e32:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000e34:	f7ff ff92 	bl	8000d5c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000e38:	6822      	ldr	r2, [r4, #0]
 8000e3a:	6853      	ldr	r3, [r2, #4]
 8000e3c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000e40:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000e44:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000e4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e56:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e58:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000e64:	e7db      	b.n	8000e1e <I2C_IsAcknowledgeFailed+0x3c>

08000e66 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000e66:	b570      	push	{r4, r5, r6, lr}
 8000e68:	4604      	mov	r4, r0
 8000e6a:	460d      	mov	r5, r1
 8000e6c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	079b      	lsls	r3, r3, #30
 8000e74:	d501      	bpl.n	8000e7a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000e76:	2000      	movs	r0, #0
}
 8000e78:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e7a:	4632      	mov	r2, r6
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f7ff ffaf 	bl	8000de2 <I2C_IsAcknowledgeFailed>
 8000e84:	b9a0      	cbnz	r0, 8000eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000e86:	1c6a      	adds	r2, r5, #1
 8000e88:	d0f1      	beq.n	8000e6e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e8a:	f7ff fbef 	bl	800066c <HAL_GetTick>
 8000e8e:	1b80      	subs	r0, r0, r6
 8000e90:	42a8      	cmp	r0, r5
 8000e92:	d801      	bhi.n	8000e98 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d1ea      	bne.n	8000e6e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000eac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	e7e1      	b.n	8000e78 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08000eb4 <I2C_WaitOnFlagUntilTimeout>:
{
 8000eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb8:	9f06      	ldr	r7, [sp, #24]
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4688      	mov	r8, r1
 8000ebe:	4616      	mov	r6, r2
 8000ec0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ec2:	6822      	ldr	r2, [r4, #0]
 8000ec4:	6993      	ldr	r3, [r2, #24]
 8000ec6:	ea38 0303 	bics.w	r3, r8, r3
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	42b3      	cmp	r3, r6
 8000ed2:	d001      	beq.n	8000ed8 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	e015      	b.n	8000f04 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000ed8:	1c6b      	adds	r3, r5, #1
 8000eda:	d0f3      	beq.n	8000ec4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000edc:	f7ff fbc6 	bl	800066c <HAL_GetTick>
 8000ee0:	1bc0      	subs	r0, r0, r7
 8000ee2:	42a8      	cmp	r0, r5
 8000ee4:	d801      	bhi.n	8000eea <I2C_WaitOnFlagUntilTimeout+0x36>
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d1eb      	bne.n	8000ec2 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000eea:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000eec:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000eee:	f043 0320 	orr.w	r3, r3, #32
 8000ef2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000f00:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8000f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f08 <I2C_RequestMemoryWrite>:
{
 8000f08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000f0c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <I2C_RequestMemoryWrite+0x68>)
{
 8000f10:	4605      	mov	r5, r0
 8000f12:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	b2f2      	uxtb	r2, r6
 8000f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8000f1c:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000f20:	f7ff ff2a 	bl	8000d78 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f24:	4628      	mov	r0, r5
 8000f26:	4642      	mov	r2, r8
 8000f28:	4639      	mov	r1, r7
 8000f2a:	f7ff ff9c 	bl	8000e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f2e:	b118      	cbz	r0, 8000f38 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8000f30:	2001      	movs	r0, #1
}
 8000f32:	b002      	add	sp, #8
 8000f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f38:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f3a:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000f3c:	d10d      	bne.n	8000f5a <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f3e:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000f40:	2200      	movs	r2, #0
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f46:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	f8cd 8000 	str.w	r8, [sp]
 8000f4e:	f7ff ffb1 	bl	8000eb4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000f52:	3800      	subs	r0, #0
 8000f54:	bf18      	it	ne
 8000f56:	2001      	movne	r0, #1
 8000f58:	e7eb      	b.n	8000f32 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000f5a:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f62:	4642      	mov	r2, r8
 8000f64:	f7ff ff7f 	bl	8000e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d1e1      	bne.n	8000f30 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	e7e6      	b.n	8000f3e <I2C_RequestMemoryWrite+0x36>
 8000f70:	80002000 	.word	0x80002000

08000f74 <I2C_RequestMemoryRead>:
{
 8000f74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000f78:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <I2C_RequestMemoryRead+0x68>)
{
 8000f7c:	4605      	mov	r5, r0
 8000f7e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	b2f2      	uxtb	r2, r6
 8000f84:	2300      	movs	r3, #0
{
 8000f86:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f8a:	f7ff fef5 	bl	8000d78 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f8e:	4628      	mov	r0, r5
 8000f90:	4642      	mov	r2, r8
 8000f92:	4639      	mov	r1, r7
 8000f94:	f7ff ff67 	bl	8000e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f98:	b118      	cbz	r0, 8000fa2 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8000f9a:	2001      	movs	r0, #1
}
 8000f9c:	b002      	add	sp, #8
 8000f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000fa2:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fa4:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000fa6:	d10d      	bne.n	8000fc4 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fa8:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000faa:	2200      	movs	r2, #0
 8000fac:	2140      	movs	r1, #64	; 0x40
 8000fae:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fb0:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	f8cd 8000 	str.w	r8, [sp]
 8000fb8:	f7ff ff7c 	bl	8000eb4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8000fbc:	3800      	subs	r0, #0
 8000fbe:	bf18      	it	ne
 8000fc0:	2001      	movne	r0, #1
 8000fc2:	e7eb      	b.n	8000f9c <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000fc4:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fc6:	4639      	mov	r1, r7
 8000fc8:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fcc:	4642      	mov	r2, r8
 8000fce:	f7ff ff4a 	bl	8000e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d1e1      	bne.n	8000f9a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	e7e6      	b.n	8000fa8 <I2C_RequestMemoryRead+0x34>
 8000fda:	bf00      	nop
 8000fdc:	80002000 	.word	0x80002000

08000fe0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	460d      	mov	r5, r1
 8000fe6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	069b      	lsls	r3, r3, #26
 8000fee:	d501      	bpl.n	8000ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000ff0:	2000      	movs	r0, #0
}
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ff4:	4632      	mov	r2, r6
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff fef2 	bl	8000de2 <I2C_IsAcknowledgeFailed>
 8000ffe:	b990      	cbnz	r0, 8001026 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001000:	f7ff fb34 	bl	800066c <HAL_GetTick>
 8001004:	1b80      	subs	r0, r0, r6
 8001006:	42a8      	cmp	r0, r5
 8001008:	d801      	bhi.n	800100e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800100a:	2d00      	cmp	r5, #0
 800100c:	d1ec      	bne.n	8000fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800100e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001016:	2320      	movs	r3, #32
 8001018:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800101c:	2300      	movs	r3, #0
 800101e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001022:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001026:	2001      	movs	r0, #1
 8001028:	e7e3      	b.n	8000ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800102a <HAL_I2C_Init>:
{
 800102a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800102c:	4604      	mov	r4, r0
 800102e:	2800      	cmp	r0, #0
 8001030:	d04a      	beq.n	80010c8 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001032:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001036:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800103a:	b91b      	cbnz	r3, 8001044 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800103c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001040:	f004 fdb6 	bl	8005bb0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001044:	2324      	movs	r3, #36	; 0x24
 8001046:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	f022 0201 	bic.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001054:	6862      	ldr	r2, [r4, #4]
 8001056:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800105a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001062:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001064:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001068:	2901      	cmp	r1, #1
 800106a:	d124      	bne.n	80010b6 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800106c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001070:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001072:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001074:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001076:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800107a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800107e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001086:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001088:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800108c:	430a      	orrs	r2, r1
 800108e:	69a1      	ldr	r1, [r4, #24]
 8001090:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001094:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001096:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	f042 0201 	orr.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80010a6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ae:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80010b4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010ba:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010bc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010be:	d1d8      	bne.n	8001072 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	e7d4      	b.n	8001072 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80010c8:	2001      	movs	r0, #1
 80010ca:	e7f3      	b.n	80010b4 <HAL_I2C_Init+0x8a>

080010cc <HAL_I2C_Mem_Write>:
{
 80010cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d0:	b085      	sub	sp, #20
 80010d2:	469b      	mov	fp, r3
 80010d4:	4604      	mov	r4, r0
 80010d6:	460f      	mov	r7, r1
 80010d8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80010dc:	4692      	mov	sl, r2
 80010de:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80010e2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010e4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010e8:	2b20      	cmp	r3, #32
 80010ea:	f040 80a3 	bne.w	8001234 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 80010ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80010f0:	b10b      	cbz	r3, 80010f6 <HAL_I2C_Mem_Write+0x2a>
 80010f2:	9b03      	ldr	r3, [sp, #12]
 80010f4:	b933      	cbnz	r3, 8001104 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80010f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010fa:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80010fc:	2001      	movs	r0, #1
}
 80010fe:	b005      	add	sp, #20
 8001100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001104:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001108:	2b01      	cmp	r3, #1
 800110a:	f000 8093 	beq.w	8001234 <HAL_I2C_Mem_Write+0x168>
 800110e:	2501      	movs	r5, #1
 8001110:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001114:	f7ff faaa 	bl	800066c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001118:	2319      	movs	r3, #25
 800111a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800111c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800111e:	462a      	mov	r2, r5
 8001120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff fec5 	bl	8000eb4 <I2C_WaitOnFlagUntilTimeout>
 800112a:	4680      	mov	r8, r0
 800112c:	2800      	cmp	r0, #0
 800112e:	d1e5      	bne.n	80010fc <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001130:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8001132:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001134:	4652      	mov	r2, sl
 8001136:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001138:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001144:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001146:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8001148:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800114a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800114c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8001150:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001152:	465b      	mov	r3, fp
 8001154:	f7ff fed8 	bl	8000f08 <I2C_RequestMemoryWrite>
 8001158:	b110      	cbz	r0, 8001160 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 800115a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800115e:	e7cd      	b.n	80010fc <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001160:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001162:	b29b      	uxth	r3, r3
 8001164:	2bff      	cmp	r3, #255	; 0xff
 8001166:	d955      	bls.n	8001214 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001168:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800116a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800116e:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001170:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001172:	4639      	mov	r1, r7
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff fdff 	bl	8000d78 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800117a:	4632      	mov	r2, r6
 800117c:	4649      	mov	r1, r9
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff fe71 	bl	8000e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8001184:	2800      	cmp	r0, #0
 8001186:	d1b9      	bne.n	80010fc <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800118a:	6822      	ldr	r2, [r4, #0]
 800118c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001190:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001192:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001194:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001196:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001198:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800119a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800119c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800119e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80011a0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80011a4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b1ab      	cbz	r3, 80011d6 <HAL_I2C_Mem_Write+0x10a>
 80011aa:	b9a2      	cbnz	r2, 80011d6 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011ac:	464b      	mov	r3, r9
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	4620      	mov	r0, r4
 80011b2:	9600      	str	r6, [sp, #0]
 80011b4:	f7ff fe7e 	bl	8000eb4 <I2C_WaitOnFlagUntilTimeout>
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d19f      	bne.n	80010fc <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011be:	b29b      	uxth	r3, r3
 80011c0:	2bff      	cmp	r3, #255	; 0xff
 80011c2:	d92f      	bls.n	8001224 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011c4:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ca:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011ce:	4639      	mov	r1, r7
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff fdd1 	bl	8000d78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80011d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1cd      	bne.n	800117a <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011de:	4632      	mov	r2, r6
 80011e0:	4649      	mov	r1, r9
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff fefc 	bl	8000fe0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d187      	bne.n	80010fc <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	2120      	movs	r1, #32
 80011f0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80011f8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80011fc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001206:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800120a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800120e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001212:	e774      	b.n	80010fe <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001214:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800121a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800121c:	b292      	uxth	r2, r2
 800121e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	e7a6      	b.n	8001172 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8001224:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800122a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800122c:	b292      	uxth	r2, r2
 800122e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	e7cc      	b.n	80011ce <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8001234:	2002      	movs	r0, #2
 8001236:	e762      	b.n	80010fe <HAL_I2C_Mem_Write+0x32>

08001238 <HAL_I2C_Mem_Read>:
{
 8001238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800123c:	b085      	sub	sp, #20
 800123e:	469b      	mov	fp, r3
 8001240:	4604      	mov	r4, r0
 8001242:	460f      	mov	r7, r1
 8001244:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8001248:	4692      	mov	sl, r2
 800124a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800124e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001250:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001254:	2b20      	cmp	r3, #32
 8001256:	f040 80a7 	bne.w	80013a8 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800125a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800125c:	b10b      	cbz	r3, 8001262 <HAL_I2C_Mem_Read+0x2a>
 800125e:	9b03      	ldr	r3, [sp, #12]
 8001260:	b933      	cbnz	r3, 8001270 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001266:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001268:	2001      	movs	r0, #1
}
 800126a:	b005      	add	sp, #20
 800126c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001270:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001274:	2b01      	cmp	r3, #1
 8001276:	f000 8097 	beq.w	80013a8 <HAL_I2C_Mem_Read+0x170>
 800127a:	2501      	movs	r5, #1
 800127c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001280:	f7ff f9f4 	bl	800066c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001284:	2319      	movs	r3, #25
 8001286:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001288:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800128a:	462a      	mov	r2, r5
 800128c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff fe0f 	bl	8000eb4 <I2C_WaitOnFlagUntilTimeout>
 8001296:	4680      	mov	r8, r0
 8001298:	2800      	cmp	r0, #0
 800129a:	d1e5      	bne.n	8001268 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800129c:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 800129e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012a0:	4652      	mov	r2, sl
 80012a2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012a8:	2340      	movs	r3, #64	; 0x40
 80012aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80012ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012b0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012b2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80012b4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80012b6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012b8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80012bc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012be:	465b      	mov	r3, fp
 80012c0:	f7ff fe58 	bl	8000f74 <I2C_RequestMemoryRead>
 80012c4:	b110      	cbz	r0, 80012cc <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 80012c6:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80012ca:	e7cd      	b.n	8001268 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	2bff      	cmp	r3, #255	; 0xff
 80012d2:	4b36      	ldr	r3, [pc, #216]	; (80013ac <HAL_I2C_Mem_Read+0x174>)
 80012d4:	d958      	bls.n	8001388 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012d6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012e0:	4639      	mov	r1, r7
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff fd48 	bl	8000d78 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80012e8:	464b      	mov	r3, r9
 80012ea:	2200      	movs	r2, #0
 80012ec:	2104      	movs	r1, #4
 80012ee:	4620      	mov	r0, r4
 80012f0:	9600      	str	r6, [sp, #0]
 80012f2:	f7ff fddf 	bl	8000eb4 <I2C_WaitOnFlagUntilTimeout>
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d1b6      	bne.n	8001268 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001300:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001302:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001304:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001306:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8001308:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800130a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800130c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800130e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001310:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001312:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001314:	b29b      	uxth	r3, r3
 8001316:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001318:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800131a:	b29b      	uxth	r3, r3
 800131c:	b1ab      	cbz	r3, 800134a <HAL_I2C_Mem_Read+0x112>
 800131e:	b9a2      	cbnz	r2, 800134a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001320:	464b      	mov	r3, r9
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	4620      	mov	r0, r4
 8001326:	9600      	str	r6, [sp, #0]
 8001328:	f7ff fdc4 	bl	8000eb4 <I2C_WaitOnFlagUntilTimeout>
 800132c:	2800      	cmp	r0, #0
 800132e:	d19b      	bne.n	8001268 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001330:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001332:	b29b      	uxth	r3, r3
 8001334:	2bff      	cmp	r3, #255	; 0xff
 8001336:	d92f      	bls.n	8001398 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001338:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800133a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800133e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001340:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001342:	4639      	mov	r1, r7
 8001344:	4620      	mov	r0, r4
 8001346:	f7ff fd17 	bl	8000d78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800134a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800134c:	b29b      	uxth	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ca      	bne.n	80012e8 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001352:	4632      	mov	r2, r6
 8001354:	4649      	mov	r1, r9
 8001356:	4620      	mov	r0, r4
 8001358:	f7ff fe42 	bl	8000fe0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800135c:	2800      	cmp	r0, #0
 800135e:	d183      	bne.n	8001268 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	2120      	movs	r1, #32
 8001364:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800136c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001370:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800137a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800137e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001382:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001386:	e770      	b.n	800126a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8001388:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8001390:	b292      	uxth	r2, r2
 8001392:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	e7a3      	b.n	80012e0 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8001398:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800139a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800139e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80013a0:	b292      	uxth	r2, r2
 80013a2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	e7cc      	b.n	8001342 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80013a8:	2002      	movs	r0, #2
 80013aa:	e75e      	b.n	800126a <HAL_I2C_Mem_Read+0x32>
 80013ac:	80002400 	.word	0x80002400

080013b0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80013b0:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80013b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80013b4:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80013b6:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80013b8:	b103      	cbz	r3, 80013bc <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80013ba:	4718      	bx	r3
}
 80013bc:	4770      	bx	lr

080013be <HAL_I2C_SlaveTxCpltCallback>:
 80013be:	4770      	bx	lr

080013c0 <HAL_I2C_SlaveRxCpltCallback>:
 80013c0:	4770      	bx	lr

080013c2 <I2C_ITSlaveSeqCplt>:
{
 80013c2:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c4:	2500      	movs	r5, #0
 80013c6:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80013ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80013ce:	2b29      	cmp	r3, #41	; 0x29
 80013d0:	d10c      	bne.n	80013ec <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80013d2:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80013d4:	2101      	movs	r1, #1
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80013d6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80013da:	2321      	movs	r3, #33	; 0x21
 80013dc:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80013de:	f7ff fcdf 	bl	8000da0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80013e2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80013e6:	f7ff ffea 	bl	80013be <HAL_I2C_SlaveTxCpltCallback>
}
 80013ea:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80013ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80013f0:	2b2a      	cmp	r3, #42	; 0x2a
 80013f2:	d1fa      	bne.n	80013ea <I2C_ITSlaveSeqCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80013f4:	2328      	movs	r3, #40	; 0x28
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80013f6:	2102      	movs	r1, #2
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80013f8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80013fc:	2322      	movs	r3, #34	; 0x22
 80013fe:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001400:	f7ff fcce 	bl	8000da0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001404:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001408:	f7ff ffda 	bl	80013c0 <HAL_I2C_SlaveRxCpltCallback>
}
 800140c:	e7ed      	b.n	80013ea <I2C_ITSlaveSeqCplt+0x28>

0800140e <HAL_I2C_AddrCallback>:
}
 800140e:	4770      	bx	lr

08001410 <I2C_ITAddrCplt.constprop.0>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001410:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001414:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001418:	2a28      	cmp	r2, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800141a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800141c:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800141e:	d133      	bne.n	8001488 <I2C_ITAddrCplt.constprop.0+0x78>
    transferdirection = I2C_GET_DIR(hi2c);
 8001420:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001422:	68c2      	ldr	r2, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001424:	699d      	ldr	r5, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 8001426:	f3c6 4600 	ubfx	r6, r6, #16, #1
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800142a:	2a02      	cmp	r2, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800142c:	6899      	ldr	r1, [r3, #8]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800142e:	ea4f 4515 	mov.w	r5, r5, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001432:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001434:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001438:	d11e      	bne.n	8001478 <I2C_ITAddrCplt.constprop.0+0x68>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800143a:	ea85 15d1 	eor.w	r5, r5, r1, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800143e:	f3c1 0209 	ubfx	r2, r1, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001442:	f015 0506 	ands.w	r5, r5, #6
 8001446:	d10e      	bne.n	8001466 <I2C_ITAddrCplt.constprop.0+0x56>
        hi2c->AddrEventCount++;
 8001448:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800144a:	3101      	adds	r1, #1
 800144c:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800144e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001450:	2902      	cmp	r1, #2
 8001452:	d107      	bne.n	8001464 <I2C_ITAddrCplt.constprop.0+0x54>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001454:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8001456:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001458:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800145a:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800145e:	4631      	mov	r1, r6
 8001460:	f7ff ffd5 	bl	800140e <HAL_I2C_AddrCallback>
}
 8001464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001466:	2104      	movs	r1, #4
 8001468:	f7ff fc9a 	bl	8000da0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800146c:	2300      	movs	r3, #0
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800146e:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
        __HAL_UNLOCK(hi2c);
 8001472:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001476:	e7f2      	b.n	800145e <I2C_ITAddrCplt.constprop.0+0x4e>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001478:	2104      	movs	r1, #4
 800147a:	f7ff fc91 	bl	8000da0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800147e:	2300      	movs	r3, #0
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001480:	462a      	mov	r2, r5
      __HAL_UNLOCK(hi2c);
 8001482:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001486:	e7ea      	b.n	800145e <I2C_ITAddrCplt.constprop.0+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001488:	2208      	movs	r2, #8
 800148a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800148c:	2300      	movs	r3, #0
 800148e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8001492:	e7e7      	b.n	8001464 <I2C_ITAddrCplt.constprop.0+0x54>

08001494 <HAL_I2C_ListenCpltCallback>:
 8001494:	4770      	bx	lr
	...

08001498 <I2C_ITListenCplt>:
{
 8001498:	b508      	push	{r3, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <I2C_ITListenCplt+0x58>)
  hi2c->State = HAL_I2C_STATE_READY;
 800149c:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800149e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 80014a4:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 80014a6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014aa:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80014ae:	074b      	lsls	r3, r1, #29
 80014b0:	d512      	bpl.n	80014d8 <I2C_ITListenCplt+0x40>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014b2:	6803      	ldr	r3, [r0, #0]
 80014b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80014ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80014c0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80014c2:	b14b      	cbz	r3, 80014d8 <I2C_ITListenCplt+0x40>
      hi2c->XferSize--;
 80014c4:	3b01      	subs	r3, #1
 80014c6:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80014c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80014d8:	2107      	movs	r1, #7
 80014da:	f7ff fc61 	bl	8000da0 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014de:	6803      	ldr	r3, [r0, #0]
 80014e0:	2210      	movs	r2, #16
 80014e2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80014e4:	2300      	movs	r3, #0
 80014e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80014ea:	f7ff ffd3 	bl	8001494 <HAL_I2C_ListenCpltCallback>
}
 80014ee:	bd08      	pop	{r3, pc}
 80014f0:	ffff0000 	.word	0xffff0000

080014f4 <HAL_I2C_ErrorCallback>:
 80014f4:	4770      	bx	lr

080014f6 <HAL_I2C_AbortCpltCallback>:
 80014f6:	4770      	bx	lr

080014f8 <I2C_ITError>:
{
 80014f8:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <I2C_ITError+0xcc>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80014fc:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80014fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001502:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001504:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001508:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800150a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800150c:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800150e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001510:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8001512:	ea41 0102 	orr.w	r1, r1, r2
 8001516:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001518:	d821      	bhi.n	800155e <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800151a:	2103      	movs	r1, #3
 800151c:	f7ff fc40 	bl	8000da0 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001520:	2328      	movs	r3, #40	; 0x28
 8001522:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8001528:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800152a:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001530:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001532:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8001536:	d01f      	beq.n	8001578 <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001538:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    if (hi2c->hdmatx != NULL)
 800153c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800153e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8001540:	2800      	cmp	r0, #0
 8001542:	d037      	beq.n	80015b4 <I2C_ITError+0xbc>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <I2C_ITError+0xd4>)
 8001546:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8001548:	2300      	movs	r3, #0
 800154a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800154e:	f7ff fa22 	bl	8000996 <HAL_DMA_Abort_IT>
 8001552:	b378      	cbz	r0, 80015b4 <I2C_ITError+0xbc>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001554:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001556:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8001558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800155c:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800155e:	2107      	movs	r1, #7
 8001560:	f7ff fc1e 	bl	8000da0 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001564:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001568:	2b60      	cmp	r3, #96	; 0x60
 800156a:	d002      	beq.n	8001572 <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 800156c:	2320      	movs	r3, #32
 800156e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001572:	2300      	movs	r3, #0
 8001574:	6323      	str	r3, [r4, #48]	; 0x30
 8001576:	e7d8      	b.n	800152a <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001578:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 800157c:	d00e      	beq.n	800159c <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800157e:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001580:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001586:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001588:	b1a0      	cbz	r0, 80015b4 <I2C_ITError+0xbc>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <I2C_ITError+0xd4>)
 800158c:	6503      	str	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800158e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001592:	f7ff fa00 	bl	8000996 <HAL_DMA_Abort_IT>
 8001596:	b168      	cbz	r0, 80015b4 <I2C_ITError+0xbc>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001598:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800159a:	e7dc      	b.n	8001556 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800159c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80015a0:	2b60      	cmp	r3, #96	; 0x60
 80015a2:	d108      	bne.n	80015b6 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 80015a4:	2320      	movs	r3, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 80015a6:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80015a8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80015ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80015b0:	f7ff ffa1 	bl	80014f6 <HAL_I2C_AbortCpltCallback>
}
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_ErrorCallback(hi2c);
 80015b6:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80015b8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80015bc:	f7ff ff9a 	bl	80014f4 <HAL_I2C_ErrorCallback>
}
 80015c0:	e7f8      	b.n	80015b4 <I2C_ITError+0xbc>
 80015c2:	bf00      	nop
 80015c4:	ffff0000 	.word	0xffff0000
 80015c8:	080016c9 	.word	0x080016c9
 80015cc:	0800183d 	.word	0x0800183d

080015d0 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80015d0:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015d2:	2220      	movs	r2, #32
{
 80015d4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80015d6:	681e      	ldr	r6, [r3, #0]
{
 80015d8:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015da:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80015dc:	2107      	movs	r1, #7
 80015de:	f7ff fbdf 	bl	8000da0 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015e2:	6803      	ldr	r3, [r0, #0]
{
 80015e4:	4604      	mov	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ec:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80015f4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80015f8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80015fc:	f022 0201 	bic.w	r2, r2, #1
 8001600:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8001602:	f7ff fbab 	bl	8000d5c <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001606:	0471      	lsls	r1, r6, #17
 8001608:	d534      	bpl.n	8001674 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 800160a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 800160c:	b11b      	cbz	r3, 8001616 <I2C_ITSlaveCplt+0x46>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	b29b      	uxth	r3, r3
 8001614:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001616:	076b      	lsls	r3, r5, #29
 8001618:	d510      	bpl.n	800163c <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800161a:	6823      	ldr	r3, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800161c:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001624:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001628:	3301      	adds	r3, #1
 800162a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800162c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800162e:	b12b      	cbz	r3, 800163c <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8001630:	3b01      	subs	r3, #1
 8001632:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001634:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001636:	3b01      	subs	r3, #1
 8001638:	b29b      	uxth	r3, r3
 800163a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800163c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800163e:	b29b      	uxth	r3, r3
 8001640:	b11b      	cbz	r3, 800164a <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001642:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800164e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001652:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8001654:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001656:	b18e      	cbz	r6, 800167c <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001658:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff ff4c 	bl	80014f8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001660:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001664:	2b28      	cmp	r3, #40	; 0x28
 8001666:	d11a      	bne.n	800169e <I2C_ITSlaveCplt+0xce>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001668:	4629      	mov	r1, r5
 800166a:	4620      	mov	r0, r4
}
 800166c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001670:	f7ff bf12 	b.w	8001498 <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001674:	0432      	lsls	r2, r6, #16
 8001676:	d5ce      	bpl.n	8001616 <I2C_ITSlaveCplt+0x46>
    if (hi2c->hdmarx != NULL)
 8001678:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800167a:	e7c7      	b.n	800160c <I2C_ITSlaveCplt+0x3c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800167c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800167e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001682:	d00d      	beq.n	80016a0 <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fe9c 	bl	80013c2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <I2C_ITSlaveCplt+0xf4>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800168c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800168e:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001692:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001694:	2320      	movs	r3, #32
 8001696:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 800169a:	f7ff fefb 	bl	8001494 <HAL_I2C_ListenCpltCallback>
}
 800169e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80016a0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80016a4:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80016a6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80016aa:	2b22      	cmp	r3, #34	; 0x22
 80016ac:	f04f 0320 	mov.w	r3, #32
    hi2c->State = HAL_I2C_STATE_READY;
 80016b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80016b4:	d102      	bne.n	80016bc <I2C_ITSlaveCplt+0xec>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80016b6:	f7ff fe83 	bl	80013c0 <HAL_I2C_SlaveRxCpltCallback>
 80016ba:	e7f0      	b.n	800169e <I2C_ITSlaveCplt+0xce>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80016bc:	f7ff fe7f 	bl	80013be <HAL_I2C_SlaveTxCpltCallback>
}
 80016c0:	e7ed      	b.n	800169e <I2C_ITSlaveCplt+0xce>
 80016c2:	bf00      	nop
 80016c4:	ffff0000 	.word	0xffff0000

080016c8 <I2C_Slave_ISR_IT>:
{
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 80016cc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
{
 80016d0:	4604      	mov	r4, r0
 80016d2:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 80016d4:	2a01      	cmp	r2, #1
  uint32_t tmpoptions = hi2c->XferOptions;
 80016d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80016d8:	d07e      	beq.n	80017d8 <I2C_Slave_ISR_IT+0x110>
 80016da:	2201      	movs	r2, #1
 80016dc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016e0:	06ca      	lsls	r2, r1, #27
 80016e2:	d538      	bpl.n	8001756 <I2C_Slave_ISR_IT+0x8e>
 80016e4:	06f2      	lsls	r2, r6, #27
 80016e6:	d536      	bpl.n	8001756 <I2C_Slave_ISR_IT+0x8e>
    if (hi2c->XferCount == 0U)
 80016e8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80016ea:	b292      	uxth	r2, r2
 80016ec:	bb2a      	cbnz	r2, 800173a <I2C_Slave_ISR_IT+0x72>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80016ee:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80016f2:	2a28      	cmp	r2, #40	; 0x28
 80016f4:	d110      	bne.n	8001718 <I2C_Slave_ISR_IT+0x50>
 80016f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016fa:	d10d      	bne.n	8001718 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80016fc:	f7ff fecc 	bl	8001498 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001700:	06aa      	lsls	r2, r5, #26
 8001702:	d505      	bpl.n	8001710 <I2C_Slave_ISR_IT+0x48>
 8001704:	06b3      	lsls	r3, r6, #26
 8001706:	d503      	bpl.n	8001710 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001708:	4629      	mov	r1, r5
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ff60 	bl	80015d0 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8001710:	2000      	movs	r0, #0
 8001712:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8001716:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001718:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800171c:	6822      	ldr	r2, [r4, #0]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800171e:	2929      	cmp	r1, #41	; 0x29
 8001720:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001724:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001726:	d1eb      	bne.n	8001700 <I2C_Slave_ISR_IT+0x38>
 8001728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800172c:	d0e8      	beq.n	8001700 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff fb14 	bl	8000d5c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8001734:	f7ff fe45 	bl	80013c2 <I2C_ITSlaveSeqCplt>
 8001738:	e7e2      	b.n	8001700 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800173a:	6802      	ldr	r2, [r0, #0]
 800173c:	2110      	movs	r1, #16
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800173e:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001742:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001744:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001746:	f042 0204 	orr.w	r2, r2, #4
 800174a:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800174c:	d1d8      	bne.n	8001700 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800174e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001750:	f7ff fed2 	bl	80014f8 <I2C_ITError>
 8001754:	e7d4      	b.n	8001700 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001756:	076a      	lsls	r2, r5, #29
 8001758:	d51d      	bpl.n	8001796 <I2C_Slave_ISR_IT+0xce>
 800175a:	0770      	lsls	r0, r6, #29
 800175c:	d51b      	bpl.n	8001796 <I2C_Slave_ISR_IT+0xce>
    if (hi2c->XferCount > 0U)
 800175e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001760:	b292      	uxth	r2, r2
 8001762:	b17a      	cbz	r2, 8001784 <I2C_Slave_ISR_IT+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001764:	6822      	ldr	r2, [r4, #0]
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8001766:	f025 0504 	bic.w	r5, r5, #4
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800176a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800176c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800176e:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8001770:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001772:	3201      	adds	r2, #1
 8001774:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001776:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001778:	3a01      	subs	r2, #1
 800177a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800177c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800177e:	3a01      	subs	r2, #1
 8001780:	b292      	uxth	r2, r2
 8001782:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001784:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001786:	b292      	uxth	r2, r2
 8001788:	2a00      	cmp	r2, #0
 800178a:	d1b9      	bne.n	8001700 <I2C_Slave_ISR_IT+0x38>
 800178c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001790:	d0b6      	beq.n	8001700 <I2C_Slave_ISR_IT+0x38>
        I2C_ITSlaveSeqCplt(hi2c);
 8001792:	4620      	mov	r0, r4
 8001794:	e7ce      	b.n	8001734 <I2C_Slave_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001796:	0729      	lsls	r1, r5, #28
 8001798:	d505      	bpl.n	80017a6 <I2C_Slave_ISR_IT+0xde>
 800179a:	0732      	lsls	r2, r6, #28
 800179c:	d503      	bpl.n	80017a6 <I2C_Slave_ISR_IT+0xde>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff fe36 	bl	8001410 <I2C_ITAddrCplt.constprop.0>
 80017a4:	e7ac      	b.n	8001700 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80017a6:	07a8      	lsls	r0, r5, #30
 80017a8:	d5aa      	bpl.n	8001700 <I2C_Slave_ISR_IT+0x38>
 80017aa:	07b1      	lsls	r1, r6, #30
 80017ac:	d5a8      	bpl.n	8001700 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 80017ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80017b0:	b292      	uxth	r2, r2
 80017b2:	b16a      	cbz	r2, 80017d0 <I2C_Slave_ISR_IT+0x108>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017b6:	6822      	ldr	r2, [r4, #0]
 80017b8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80017bc:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80017be:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80017c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80017c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017ca:	3b01      	subs	r3, #1
 80017cc:	8523      	strh	r3, [r4, #40]	; 0x28
 80017ce:	e797      	b.n	8001700 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80017d0:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 80017d4:	d194      	bne.n	8001700 <I2C_Slave_ISR_IT+0x38>
 80017d6:	e7dc      	b.n	8001792 <I2C_Slave_ISR_IT+0xca>
  __HAL_LOCK(hi2c);
 80017d8:	2002      	movs	r0, #2
 80017da:	e79c      	b.n	8001716 <I2C_Slave_ISR_IT+0x4e>

080017dc <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80017dc:	6803      	ldr	r3, [r0, #0]
 80017de:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80017e0:	681a      	ldr	r2, [r3, #0]
{
 80017e2:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017e4:	05cc      	lsls	r4, r1, #23
 80017e6:	d508      	bpl.n	80017fa <HAL_I2C_ER_IRQHandler+0x1e>
 80017e8:	0614      	lsls	r4, r2, #24
 80017ea:	d506      	bpl.n	80017fa <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80017ec:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80017ee:	f044 0401 	orr.w	r4, r4, #1
 80017f2:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017f4:	f44f 7480 	mov.w	r4, #256	; 0x100
 80017f8:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017fa:	054c      	lsls	r4, r1, #21
 80017fc:	d508      	bpl.n	8001810 <HAL_I2C_ER_IRQHandler+0x34>
 80017fe:	0614      	lsls	r4, r2, #24
 8001800:	d506      	bpl.n	8001810 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001802:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001804:	f044 0408 	orr.w	r4, r4, #8
 8001808:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800180a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800180e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001810:	0589      	lsls	r1, r1, #22
 8001812:	d508      	bpl.n	8001826 <HAL_I2C_ER_IRQHandler+0x4a>
 8001814:	0612      	lsls	r2, r2, #24
 8001816:	d506      	bpl.n	8001826 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001818:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800181a:	f042 0202 	orr.w	r2, r2, #2
 800181e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001824:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8001826:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001828:	f011 0f0b 	tst.w	r1, #11
 800182c:	d003      	beq.n	8001836 <HAL_I2C_ER_IRQHandler+0x5a>
}
 800182e:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8001832:	f7ff be61 	b.w	80014f8 <I2C_ITError>
}
 8001836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800183a:	4770      	bx	lr

0800183c <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800183c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800183e:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001840:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001842:	2300      	movs	r3, #0
 8001844:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001846:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001848:	6513      	str	r3, [r2, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800184a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800184e:	2b60      	cmp	r3, #96	; 0x60
 8001850:	d105      	bne.n	800185e <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8001852:	2320      	movs	r3, #32
 8001854:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001858:	f7ff fe4d 	bl	80014f6 <HAL_I2C_AbortCpltCallback>
}
 800185c:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 800185e:	f7ff fe49 	bl	80014f4 <HAL_I2C_ErrorCallback>
}
 8001862:	e7fb      	b.n	800185c <I2C_DMAAbort+0x20>

08001864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001864:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001866:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800186a:	2b20      	cmp	r3, #32
 800186c:	b2dc      	uxtb	r4, r3
 800186e:	d11d      	bne.n	80018ac <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001870:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001874:	2b01      	cmp	r3, #1
 8001876:	d019      	beq.n	80018ac <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001878:	2324      	movs	r3, #36	; 0x24
 800187a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800187e:	6803      	ldr	r3, [r0, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800188e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4311      	orrs	r1, r2
 8001894:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80018a0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80018a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80018a8:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80018aa:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80018ac:	2002      	movs	r0, #2
 80018ae:	e7fc      	b.n	80018aa <HAL_I2CEx_ConfigAnalogFilter+0x46>

080018b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018b0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	b2dc      	uxtb	r4, r3
 80018ba:	d11c      	bne.n	80018f6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d018      	beq.n	80018f6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	2324      	movs	r3, #36	; 0x24
 80018c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018ca:	6803      	ldr	r3, [r0, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018d4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018da:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018de:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80018ea:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80018ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80018f2:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80018f4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80018f6:	2002      	movs	r0, #2
 80018f8:	e7fc      	b.n	80018f4 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

080018fc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80018fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001902:	4c19      	ldr	r4, [pc, #100]	; (8001968 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800191c:	f7fe fea6 	bl	800066c <HAL_GetTick>
 8001920:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	03da      	lsls	r2, r3, #15
 8001926:	d50c      	bpl.n	8001942 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001928:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800192a:	4d0f      	ldr	r5, [pc, #60]	; (8001968 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800192c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001930:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001932:	f7fe fe9b 	bl	800066c <HAL_GetTick>
 8001936:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001938:	686b      	ldr	r3, [r5, #4]
 800193a:	039b      	lsls	r3, r3, #14
 800193c:	d50a      	bpl.n	8001954 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800193e:	2000      	movs	r0, #0
 8001940:	e006      	b.n	8001950 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001942:	f7fe fe93 	bl	800066c <HAL_GetTick>
 8001946:	1b40      	subs	r0, r0, r5
 8001948:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800194c:	d9e9      	bls.n	8001922 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800194e:	2003      	movs	r0, #3
}
 8001950:	b003      	add	sp, #12
 8001952:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001954:	f7fe fe8a 	bl	800066c <HAL_GetTick>
 8001958:	1b00      	subs	r0, r0, r4
 800195a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800195e:	d9eb      	bls.n	8001938 <HAL_PWREx_EnableOverDrive+0x3c>
 8001960:	e7f5      	b.n	800194e <HAL_PWREx_EnableOverDrive+0x52>
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40007000 	.word	0x40007000

0800196c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	4604      	mov	r4, r0
 8001972:	b918      	cbnz	r0, 800197c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001974:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001976:	b002      	add	sp, #8
 8001978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197c:	6803      	ldr	r3, [r0, #0]
 800197e:	07db      	lsls	r3, r3, #31
 8001980:	d410      	bmi.n	80019a4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	079f      	lsls	r7, r3, #30
 8001986:	d461      	bmi.n	8001a4c <HAL_RCC_OscConfig+0xe0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	0719      	lsls	r1, r3, #28
 800198c:	f100 80a8 	bmi.w	8001ae0 <HAL_RCC_OscConfig+0x174>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	075a      	lsls	r2, r3, #29
 8001994:	f100 80c9 	bmi.w	8001b2a <HAL_RCC_OscConfig+0x1be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001998:	69a2      	ldr	r2, [r4, #24]
 800199a:	2a00      	cmp	r2, #0
 800199c:	f040 8132 	bne.w	8001c04 <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 80019a0:	2000      	movs	r0, #0
 80019a2:	e7e8      	b.n	8001976 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a4:	4b95      	ldr	r3, [pc, #596]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	f002 020c 	and.w	r2, r2, #12
 80019ac:	2a04      	cmp	r2, #4
 80019ae:	d007      	beq.n	80019c0 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	f002 020c 	and.w	r2, r2, #12
 80019b6:	2a08      	cmp	r2, #8
 80019b8:	d10a      	bne.n	80019d0 <HAL_RCC_OscConfig+0x64>
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	0256      	lsls	r6, r2, #9
 80019be:	d507      	bpl.n	80019d0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	4b8e      	ldr	r3, [pc, #568]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	039d      	lsls	r5, r3, #14
 80019c6:	d5dc      	bpl.n	8001982 <HAL_RCC_OscConfig+0x16>
 80019c8:	6863      	ldr	r3, [r4, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1d9      	bne.n	8001982 <HAL_RCC_OscConfig+0x16>
 80019ce:	e7d1      	b.n	8001974 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	6862      	ldr	r2, [r4, #4]
 80019d2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_OscConfig+0x90>
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019e0:	f7fe fe44 	bl	800066c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e4:	4e85      	ldr	r6, [pc, #532]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80019e6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e8:	6833      	ldr	r3, [r6, #0]
 80019ea:	0398      	lsls	r0, r3, #14
 80019ec:	d4c9      	bmi.n	8001982 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ee:	f7fe fe3d 	bl	800066c <HAL_GetTick>
 80019f2:	1b40      	subs	r0, r0, r5
 80019f4:	2864      	cmp	r0, #100	; 0x64
 80019f6:	d9f7      	bls.n	80019e8 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 80019f8:	2003      	movs	r0, #3
 80019fa:	e7bc      	b.n	8001976 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fc:	4d7f      	ldr	r5, [pc, #508]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
 80019fe:	682b      	ldr	r3, [r5, #0]
 8001a00:	b992      	cbnz	r2, 8001a28 <HAL_RCC_OscConfig+0xbc>
 8001a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a06:	602b      	str	r3, [r5, #0]
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a10:	f7fe fe2c 	bl	800066c <HAL_GetTick>
 8001a14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	682b      	ldr	r3, [r5, #0]
 8001a18:	0399      	lsls	r1, r3, #14
 8001a1a:	d5b2      	bpl.n	8001982 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7fe fe26 	bl	800066c <HAL_GetTick>
 8001a20:	1b80      	subs	r0, r0, r6
 8001a22:	2864      	cmp	r0, #100	; 0x64
 8001a24:	d9f7      	bls.n	8001a16 <HAL_RCC_OscConfig+0xaa>
 8001a26:	e7e7      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a28:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_OscConfig+0xd2>
 8001a2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a32:	602b      	str	r3, [r5, #0]
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3a:	602b      	str	r3, [r5, #0]
 8001a3c:	e7d0      	b.n	80019e0 <HAL_RCC_OscConfig+0x74>
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a42:	602b      	str	r3, [r5, #0]
 8001a44:	682b      	ldr	r3, [r5, #0]
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4a:	e7f6      	b.n	8001a3a <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4c:	4b6b      	ldr	r3, [pc, #428]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	f012 0f0c 	tst.w	r2, #12
 8001a54:	d007      	beq.n	8001a66 <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	f002 020c 	and.w	r2, r2, #12
 8001a5c:	2a08      	cmp	r2, #8
 8001a5e:	d112      	bne.n	8001a86 <HAL_RCC_OscConfig+0x11a>
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	0252      	lsls	r2, r2, #9
 8001a64:	d40f      	bmi.n	8001a86 <HAL_RCC_OscConfig+0x11a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	079b      	lsls	r3, r3, #30
 8001a6c:	d503      	bpl.n	8001a76 <HAL_RCC_OscConfig+0x10a>
 8001a6e:	68e3      	ldr	r3, [r4, #12]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	f47f af7f 	bne.w	8001974 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a76:	6813      	ldr	r3, [r2, #0]
 8001a78:	6921      	ldr	r1, [r4, #16]
 8001a7a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a82:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a84:	e780      	b.n	8001988 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a86:	68e2      	ldr	r2, [r4, #12]
 8001a88:	b1c2      	cbz	r2, 8001abc <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_HSI_ENABLE();
 8001a8a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	4d5b      	ldr	r5, [pc, #364]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a94:	f7fe fdea 	bl	800066c <HAL_GetTick>
 8001a98:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	682b      	ldr	r3, [r5, #0]
 8001a9c:	079f      	lsls	r7, r3, #30
 8001a9e:	d507      	bpl.n	8001ab0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	682b      	ldr	r3, [r5, #0]
 8001aa2:	6922      	ldr	r2, [r4, #16]
 8001aa4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001aa8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001aac:	602b      	str	r3, [r5, #0]
 8001aae:	e76b      	b.n	8001988 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7fe fddc 	bl	800066c <HAL_GetTick>
 8001ab4:	1b80      	subs	r0, r0, r6
 8001ab6:	2802      	cmp	r0, #2
 8001ab8:	d9ef      	bls.n	8001a9a <HAL_RCC_OscConfig+0x12e>
 8001aba:	e79d      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8001abc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	4e4f      	ldr	r6, [pc, #316]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_DISABLE();
 8001ac0:	f022 0201 	bic.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac6:	f7fe fdd1 	bl	800066c <HAL_GetTick>
 8001aca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001acc:	6833      	ldr	r3, [r6, #0]
 8001ace:	0798      	lsls	r0, r3, #30
 8001ad0:	f57f af5a 	bpl.w	8001988 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad4:	f7fe fdca 	bl	800066c <HAL_GetTick>
 8001ad8:	1b40      	subs	r0, r0, r5
 8001ada:	2802      	cmp	r0, #2
 8001adc:	d9f6      	bls.n	8001acc <HAL_RCC_OscConfig+0x160>
 8001ade:	e78b      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ae0:	6963      	ldr	r3, [r4, #20]
 8001ae2:	4d46      	ldr	r5, [pc, #280]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
 8001ae4:	b183      	cbz	r3, 8001b08 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_LSI_ENABLE();
 8001ae6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001aee:	f7fe fdbd 	bl	800066c <HAL_GetTick>
 8001af2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001af6:	079b      	lsls	r3, r3, #30
 8001af8:	f53f af4a 	bmi.w	8001990 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afc:	f7fe fdb6 	bl	800066c <HAL_GetTick>
 8001b00:	1b80      	subs	r0, r0, r6
 8001b02:	2802      	cmp	r0, #2
 8001b04:	d9f6      	bls.n	8001af4 <HAL_RCC_OscConfig+0x188>
 8001b06:	e777      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8001b08:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001b10:	f7fe fdac 	bl	800066c <HAL_GetTick>
 8001b14:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b16:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b18:	079f      	lsls	r7, r3, #30
 8001b1a:	f57f af39 	bpl.w	8001990 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1e:	f7fe fda5 	bl	800066c <HAL_GetTick>
 8001b22:	1b80      	subs	r0, r0, r6
 8001b24:	2802      	cmp	r0, #2
 8001b26:	d9f6      	bls.n	8001b16 <HAL_RCC_OscConfig+0x1aa>
 8001b28:	e766      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
 8001b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2e:	00d0      	lsls	r0, r2, #3
 8001b30:	d427      	bmi.n	8001b82 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001b34:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b46:	4d2e      	ldr	r5, [pc, #184]	; (8001c00 <HAL_RCC_OscConfig+0x294>)
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	05d9      	lsls	r1, r3, #23
 8001b4c:	d51b      	bpl.n	8001b86 <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4e:	68a3      	ldr	r3, [r4, #8]
 8001b50:	4d2a      	ldr	r5, [pc, #168]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d127      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x23a>
 8001b56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b5e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b62:	f7fe fd83 	bl	800066c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	4e25      	ldr	r6, [pc, #148]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001b68:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001b6c:	079b      	lsls	r3, r3, #30
 8001b6e:	d53f      	bpl.n	8001bf0 <HAL_RCC_OscConfig+0x284>
    if(pwrclkchanged == SET)
 8001b70:	2f00      	cmp	r7, #0
 8001b72:	f43f af11 	beq.w	8001998 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b76:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <HAL_RCC_OscConfig+0x290>)
 8001b78:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b80:	e70a      	b.n	8001998 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001b82:	2700      	movs	r7, #0
 8001b84:	e7df      	b.n	8001b46 <HAL_RCC_OscConfig+0x1da>
      PWR->CR1 |= PWR_CR1_DBP;
 8001b86:	682b      	ldr	r3, [r5, #0]
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b8e:	f7fe fd6d 	bl	800066c <HAL_GetTick>
 8001b92:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	05da      	lsls	r2, r3, #23
 8001b98:	d4d9      	bmi.n	8001b4e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7fe fd67 	bl	800066c <HAL_GetTick>
 8001b9e:	1b80      	subs	r0, r0, r6
 8001ba0:	2864      	cmp	r0, #100	; 0x64
 8001ba2:	d9f7      	bls.n	8001b94 <HAL_RCC_OscConfig+0x228>
 8001ba4:	e728      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba6:	b9ab      	cbnz	r3, 8001bd4 <HAL_RCC_OscConfig+0x268>
 8001ba8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	672b      	str	r3, [r5, #112]	; 0x70
 8001bb4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bb6:	f023 0304 	bic.w	r3, r3, #4
 8001bba:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001bbc:	f7fe fd56 	bl	800066c <HAL_GetTick>
 8001bc0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bc4:	0798      	lsls	r0, r3, #30
 8001bc6:	d5d3      	bpl.n	8001b70 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7fe fd50 	bl	800066c <HAL_GetTick>
 8001bcc:	1b80      	subs	r0, r0, r6
 8001bce:	4540      	cmp	r0, r8
 8001bd0:	d9f7      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x256>
 8001bd2:	e711      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bd8:	d103      	bne.n	8001be2 <HAL_RCC_OscConfig+0x276>
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	672b      	str	r3, [r5, #112]	; 0x70
 8001be0:	e7b9      	b.n	8001b56 <HAL_RCC_OscConfig+0x1ea>
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	672b      	str	r3, [r5, #112]	; 0x70
 8001be8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bea:	f023 0304 	bic.w	r3, r3, #4
 8001bee:	e7b5      	b.n	8001b5c <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7fe fd3c 	bl	800066c <HAL_GetTick>
 8001bf4:	1b40      	subs	r0, r0, r5
 8001bf6:	4540      	cmp	r0, r8
 8001bf8:	d9b7      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1fe>
 8001bfa:	e6fd      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c04:	4d24      	ldr	r5, [pc, #144]	; (8001c98 <HAL_RCC_OscConfig+0x32c>)
 8001c06:	68ab      	ldr	r3, [r5, #8]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	f43f aeb1 	beq.w	8001974 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001c12:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c14:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1c:	d12f      	bne.n	8001c7e <HAL_RCC_OscConfig+0x312>
        tickstart = HAL_GetTick();
 8001c1e:	f7fe fd25 	bl	800066c <HAL_GetTick>
 8001c22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	0199      	lsls	r1, r3, #6
 8001c28:	d423      	bmi.n	8001c72 <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c32:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c3e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001c42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c44:	0852      	lsrs	r2, r2, #1
 8001c46:	3a01      	subs	r2, #1
 8001c48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c4c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c56:	f7fe fd09 	bl	800066c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5a:	4d0f      	ldr	r5, [pc, #60]	; (8001c98 <HAL_RCC_OscConfig+0x32c>)
        tickstart = HAL_GetTick();
 8001c5c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	682b      	ldr	r3, [r5, #0]
 8001c60:	019a      	lsls	r2, r3, #6
 8001c62:	f53f ae9d 	bmi.w	80019a0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c66:	f7fe fd01 	bl	800066c <HAL_GetTick>
 8001c6a:	1b00      	subs	r0, r0, r4
 8001c6c:	2802      	cmp	r0, #2
 8001c6e:	d9f6      	bls.n	8001c5e <HAL_RCC_OscConfig+0x2f2>
 8001c70:	e6c2      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c72:	f7fe fcfb 	bl	800066c <HAL_GetTick>
 8001c76:	1b80      	subs	r0, r0, r6
 8001c78:	2802      	cmp	r0, #2
 8001c7a:	d9d3      	bls.n	8001c24 <HAL_RCC_OscConfig+0x2b8>
 8001c7c:	e6bc      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001c7e:	f7fe fcf5 	bl	800066c <HAL_GetTick>
 8001c82:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c84:	682b      	ldr	r3, [r5, #0]
 8001c86:	019b      	lsls	r3, r3, #6
 8001c88:	f57f ae8a 	bpl.w	80019a0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe fcee 	bl	800066c <HAL_GetTick>
 8001c90:	1b00      	subs	r0, r0, r4
 8001c92:	2802      	cmp	r0, #2
 8001c94:	d9f6      	bls.n	8001c84 <HAL_RCC_OscConfig+0x318>
 8001c96:	e6af      	b.n	80019f8 <HAL_RCC_OscConfig+0x8c>
 8001c98:	40023800 	.word	0x40023800

08001c9c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9c:	4913      	ldr	r1, [pc, #76]	; (8001cec <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c9e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca0:	688b      	ldr	r3, [r1, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d01b      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x46>
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d11b      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cae:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cb0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cb8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cbc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001cc0:	bf1a      	itte	ne
 8001cc2:	480b      	ldrne	r0, [pc, #44]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x54>)
 8001cc4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	480b      	ldreq	r0, [pc, #44]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001cc8:	fba1 0100 	umull	r0, r1, r1, r0
 8001ccc:	f7fe fb10 	bl	80002f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_RCC_GetSysClockFreq+0x50>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001cd8:	3301      	adds	r3, #1
 8001cda:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001cdc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ce0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce2:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x54>)
 8001ce4:	e7fc      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001ce6:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001ce8:	e7fa      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x44>
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	017d7840 	.word	0x017d7840
 8001cf4:	00f42400 	.word	0x00f42400

08001cf8 <HAL_RCC_ClockConfig>:
{
 8001cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001cfe:	4604      	mov	r4, r0
 8001d00:	b910      	cbnz	r0, 8001d08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d02:	2001      	movs	r0, #1
}
 8001d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4a45      	ldr	r2, [pc, #276]	; (8001e20 <HAL_RCC_ClockConfig+0x128>)
 8001d0a:	6813      	ldr	r3, [r2, #0]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	428b      	cmp	r3, r1
 8001d12:	d327      	bcc.n	8001d64 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	0797      	lsls	r7, r2, #30
 8001d18:	d42f      	bmi.n	8001d7a <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	07d0      	lsls	r0, r2, #31
 8001d1c:	d443      	bmi.n	8001da6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1e:	4a40      	ldr	r2, [pc, #256]	; (8001e20 <HAL_RCC_ClockConfig+0x128>)
 8001d20:	6813      	ldr	r3, [r2, #0]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	42ab      	cmp	r3, r5
 8001d28:	d866      	bhi.n	8001df8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2a:	6822      	ldr	r2, [r4, #0]
 8001d2c:	0751      	lsls	r1, r2, #29
 8001d2e:	d46f      	bmi.n	8001e10 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	0713      	lsls	r3, r2, #28
 8001d32:	d507      	bpl.n	8001d44 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d34:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <HAL_RCC_ClockConfig+0x12c>)
 8001d36:	6921      	ldr	r1, [r4, #16]
 8001d38:	6893      	ldr	r3, [r2, #8]
 8001d3a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d44:	f7ff ffaa 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001d48:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCC_ClockConfig+0x12c>)
 8001d4a:	4a37      	ldr	r2, [pc, #220]	; (8001e28 <HAL_RCC_ClockConfig+0x130>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	40d8      	lsrs	r0, r3
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_RCC_ClockConfig+0x134>)
 8001d58:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7fe fc4a 	bl	80005f4 <HAL_InitTick>
  return HAL_OK;
 8001d60:	2000      	movs	r0, #0
 8001d62:	e7cf      	b.n	8001d04 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d64:	6813      	ldr	r3, [r2, #0]
 8001d66:	f023 030f 	bic.w	r3, r3, #15
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	6813      	ldr	r3, [r2, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	428b      	cmp	r3, r1
 8001d76:	d1c4      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xa>
 8001d78:	e7cc      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7a:	f012 0f04 	tst.w	r2, #4
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_RCC_ClockConfig+0x12c>)
 8001d80:	d003      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d82:	6899      	ldr	r1, [r3, #8]
 8001d84:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8001d88:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8a:	0716      	lsls	r6, r2, #28
 8001d8c:	d503      	bpl.n	8001d96 <HAL_RCC_ClockConfig+0x9e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d8e:	6899      	ldr	r1, [r3, #8]
 8001d90:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8001d94:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d96:	4923      	ldr	r1, [pc, #140]	; (8001e24 <HAL_RCC_ClockConfig+0x12c>)
 8001d98:	68a0      	ldr	r0, [r4, #8]
 8001d9a:	688b      	ldr	r3, [r1, #8]
 8001d9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001da0:	4303      	orrs	r3, r0
 8001da2:	608b      	str	r3, [r1, #8]
 8001da4:	e7b9      	b.n	8001d1a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	6861      	ldr	r1, [r4, #4]
 8001da8:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_RCC_ClockConfig+0x12c>)
 8001daa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dac:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	d11b      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xf0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db4:	d0a5      	beq.n	8001d02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbc:	4f19      	ldr	r7, [pc, #100]	; (8001e24 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	f022 0203 	bic.w	r2, r2, #3
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001dc6:	f7fe fc51 	bl	800066c <HAL_GetTick>
 8001dca:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6862      	ldr	r2, [r4, #4]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dd8:	d0a1      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dda:	f7fe fc47 	bl	800066c <HAL_GetTick>
 8001dde:	1b80      	subs	r0, r0, r6
 8001de0:	4540      	cmp	r0, r8
 8001de2:	d9f3      	bls.n	8001dcc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001de4:	2003      	movs	r0, #3
 8001de6:	e78d      	b.n	8001d04 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de8:	2902      	cmp	r1, #2
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dec:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001df0:	e7e0      	b.n	8001db4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	f012 0f02 	tst.w	r2, #2
 8001df6:	e7dd      	b.n	8001db4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df8:	6813      	ldr	r3, [r2, #0]
 8001dfa:	f023 030f 	bic.w	r3, r3, #15
 8001dfe:	432b      	orrs	r3, r5
 8001e00:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	6813      	ldr	r3, [r2, #0]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	42ab      	cmp	r3, r5
 8001e0a:	f47f af7a 	bne.w	8001d02 <HAL_RCC_ClockConfig+0xa>
 8001e0e:	e78c      	b.n	8001d2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e10:	4904      	ldr	r1, [pc, #16]	; (8001e24 <HAL_RCC_ClockConfig+0x12c>)
 8001e12:	68e0      	ldr	r0, [r4, #12]
 8001e14:	688b      	ldr	r3, [r1, #8]
 8001e16:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	608b      	str	r3, [r1, #8]
 8001e1e:	e787      	b.n	8001d30 <HAL_RCC_ClockConfig+0x38>
 8001e20:	40023c00 	.word	0x40023c00
 8001e24:	40023800 	.word	0x40023800
 8001e28:	0800aa16 	.word	0x0800aa16
 8001e2c:	20000024 	.word	0x20000024

08001e30 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e30:	6803      	ldr	r3, [r0, #0]
{
 8001e32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e36:	f013 0601 	ands.w	r6, r3, #1
{
 8001e3a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e3c:	d00b      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e3e:	4ab3      	ldr	r2, [pc, #716]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001e40:	6891      	ldr	r1, [r2, #8]
 8001e42:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001e46:	6091      	str	r1, [r2, #8]
 8001e48:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001e4a:	6891      	ldr	r1, [r2, #8]
 8001e4c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e4e:	fab6 f686 	clz	r6, r6
 8001e52:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e54:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e56:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001e5a:	d012      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e5c:	49ab      	ldr	r1, [pc, #684]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001e5e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001e60:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e64:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e68:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001e6c:	bf08      	it	eq
 8001e6e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e70:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e74:	bf16      	itet	ne
 8001e76:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001e7a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e7c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e7e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e82:	02df      	lsls	r7, r3, #11
 8001e84:	d510      	bpl.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e86:	48a1      	ldr	r0, [pc, #644]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001e88:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001e8a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e8e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e92:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001e96:	ea42 0201 	orr.w	r2, r2, r1
 8001e9a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e9e:	f000 81a7 	beq.w	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001ea2:	2900      	cmp	r1, #0
 8001ea4:	bf08      	it	eq
 8001ea6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001ea8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001eac:	bf18      	it	ne
 8001eae:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eb0:	0698      	lsls	r0, r3, #26
 8001eb2:	d531      	bpl.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb4:	4b95      	ldr	r3, [pc, #596]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001eb6:	4f96      	ldr	r7, [pc, #600]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed2:	f7fe fbcb 	bl	800066c <HAL_GetTick>
 8001ed6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	05d9      	lsls	r1, r3, #23
 8001edc:	f140 818a 	bpl.w	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ee0:	4f8a      	ldr	r7, [pc, #552]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ee8:	f040 818f 	bne.w	800220a <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001eee:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001ef2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001ef6:	4a85      	ldr	r2, [pc, #532]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001ef8:	f040 81ad 	bne.w	8002256 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8001efc:	6891      	ldr	r1, [r2, #8]
 8001efe:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001f02:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001f06:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001f0a:	4301      	orrs	r1, r0
 8001f0c:	6091      	str	r1, [r2, #8]
 8001f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f12:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f14:	430b      	orrs	r3, r1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	06df      	lsls	r7, r3, #27
 8001f1c:	d50c      	bpl.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f1e:	4a7b      	ldr	r2, [pc, #492]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001f20:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001f24:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001f28:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001f2c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001f30:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001f32:	4301      	orrs	r1, r0
 8001f34:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f38:	0458      	lsls	r0, r3, #17
 8001f3a:	d508      	bpl.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f3c:	4973      	ldr	r1, [pc, #460]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001f3e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001f40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f44:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001f48:	4302      	orrs	r2, r0
 8001f4a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f4e:	0419      	lsls	r1, r3, #16
 8001f50:	d508      	bpl.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f52:	496e      	ldr	r1, [pc, #440]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001f54:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001f56:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f5a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001f5e:	4302      	orrs	r2, r0
 8001f60:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f64:	03da      	lsls	r2, r3, #15
 8001f66:	d508      	bpl.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f68:	4968      	ldr	r1, [pc, #416]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001f6a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001f6c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f70:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001f74:	4302      	orrs	r2, r0
 8001f76:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f7a:	039f      	lsls	r7, r3, #14
 8001f7c:	d508      	bpl.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f7e:	4963      	ldr	r1, [pc, #396]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001f80:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001f82:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f86:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001f8a:	4302      	orrs	r2, r0
 8001f8c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f90:	0658      	lsls	r0, r3, #25
 8001f92:	d508      	bpl.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f94:	495d      	ldr	r1, [pc, #372]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001f96:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001f98:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f9c:	f022 0203 	bic.w	r2, r2, #3
 8001fa0:	4302      	orrs	r2, r0
 8001fa2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fa6:	0619      	lsls	r1, r3, #24
 8001fa8:	d508      	bpl.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001faa:	4958      	ldr	r1, [pc, #352]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001fac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001fae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fb2:	f022 020c 	bic.w	r2, r2, #12
 8001fb6:	4302      	orrs	r2, r0
 8001fb8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fbc:	05da      	lsls	r2, r3, #23
 8001fbe:	d508      	bpl.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fc0:	4952      	ldr	r1, [pc, #328]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001fc2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001fc4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fc8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001fcc:	4302      	orrs	r2, r0
 8001fce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fd2:	059f      	lsls	r7, r3, #22
 8001fd4:	d508      	bpl.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fd6:	494d      	ldr	r1, [pc, #308]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001fd8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001fda:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fde:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001fe2:	4302      	orrs	r2, r0
 8001fe4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fe8:	0558      	lsls	r0, r3, #21
 8001fea:	d508      	bpl.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fec:	4947      	ldr	r1, [pc, #284]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001fee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ff0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ff4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ff8:	4302      	orrs	r2, r0
 8001ffa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001ffe:	0519      	lsls	r1, r3, #20
 8002000:	d508      	bpl.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002002:	4942      	ldr	r1, [pc, #264]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002006:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800200a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800200e:	4302      	orrs	r2, r0
 8002010:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002014:	04da      	lsls	r2, r3, #19
 8002016:	d508      	bpl.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002018:	493c      	ldr	r1, [pc, #240]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800201a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800201c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002020:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002024:	4302      	orrs	r2, r0
 8002026:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800202a:	049f      	lsls	r7, r3, #18
 800202c:	d508      	bpl.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800202e:	4937      	ldr	r1, [pc, #220]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002030:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002032:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002036:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800203a:	4302      	orrs	r2, r0
 800203c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002040:	0258      	lsls	r0, r3, #9
 8002042:	d508      	bpl.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002044:	4931      	ldr	r1, [pc, #196]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002046:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002048:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800204c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002050:	4302      	orrs	r2, r0
 8002052:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002056:	0299      	lsls	r1, r3, #10
 8002058:	d50c      	bpl.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800205a:	482c      	ldr	r0, [pc, #176]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800205c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800205e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002062:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002066:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800206a:	bf08      	it	eq
 800206c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800206e:	430a      	orrs	r2, r1
 8002070:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002074:	f013 0f08 	tst.w	r3, #8
 8002078:	bf18      	it	ne
 800207a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800207c:	035a      	lsls	r2, r3, #13
 800207e:	d508      	bpl.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002080:	4922      	ldr	r1, [pc, #136]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002082:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002084:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002088:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800208c:	4302      	orrs	r2, r0
 800208e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002092:	021f      	lsls	r7, r3, #8
 8002094:	d509      	bpl.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002096:	491d      	ldr	r1, [pc, #116]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002098:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800209c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80020a0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80020a4:	4302      	orrs	r2, r0
 80020a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80020aa:	0158      	lsls	r0, r3, #5
 80020ac:	d509      	bpl.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80020ae:	4917      	ldr	r1, [pc, #92]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80020b0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80020b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80020b8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80020bc:	4302      	orrs	r2, r0
 80020be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020c2:	0119      	lsls	r1, r3, #4
 80020c4:	d509      	bpl.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020c6:	4911      	ldr	r1, [pc, #68]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80020c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80020cc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80020d0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80020d4:	4302      	orrs	r2, r0
 80020d6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80020da:	00da      	lsls	r2, r3, #3
 80020dc:	f140 813d 	bpl.w	800235a <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80020e0:	4a0a      	ldr	r2, [pc, #40]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80020e2:	2e01      	cmp	r6, #1
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80020e4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80020e8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80020ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020f0:	ea43 0301 	orr.w	r3, r3, r1
 80020f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80020f8:	f000 80b1 	beq.w	800225e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80020fc:	2d01      	cmp	r5, #1
 80020fe:	d175      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002100:	4d02      	ldr	r5, [pc, #8]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002102:	682b      	ldr	r3, [r5, #0]
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002108:	e004      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000
 8002114:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002116:	f7fe faa9 	bl	800066c <HAL_GetTick>
 800211a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800211c:	682b      	ldr	r3, [r5, #0]
 800211e:	009f      	lsls	r7, r3, #2
 8002120:	f100 8128 	bmi.w	8002374 <HAL_RCCEx_PeriphCLKConfig+0x544>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002124:	6822      	ldr	r2, [r4, #0]
 8002126:	0316      	lsls	r6, r2, #12
 8002128:	d501      	bpl.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800212a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800212c:	b11b      	cbz	r3, 8002136 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800212e:	02d0      	lsls	r0, r2, #11
 8002130:	d51c      	bpl.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002134:	b9d3      	cbnz	r3, 800216c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002136:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800213a:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800213e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002142:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002146:	430b      	orrs	r3, r1
 8002148:	6961      	ldr	r1, [r4, #20]
 800214a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800214e:	69a1      	ldr	r1, [r4, #24]
 8002150:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002154:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002158:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800215c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800215e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002162:	3901      	subs	r1, #1
 8002164:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002168:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800216c:	0291      	lsls	r1, r2, #10
 800216e:	d515      	bpl.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8002170:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002176:	d111      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002178:	4985      	ldr	r1, [pc, #532]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800217a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800217e:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002182:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002186:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800218a:	4303      	orrs	r3, r0
 800218c:	6960      	ldr	r0, [r4, #20]
 800218e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002192:	6a20      	ldr	r0, [r4, #32]
 8002194:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800219c:	0712      	lsls	r2, r2, #28
 800219e:	d519      	bpl.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021a0:	4a7b      	ldr	r2, [pc, #492]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80021a2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021aa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80021ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b2:	430b      	orrs	r3, r1
 80021b4:	6961      	ldr	r1, [r4, #20]
 80021b6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80021ba:	69e1      	ldr	r1, [r4, #28]
 80021bc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021c4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80021c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80021ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021ce:	430b      	orrs	r3, r1
 80021d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80021d4:	4c6e      	ldr	r4, [pc, #440]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021de:	f7fe fa45 	bl	800066c <HAL_GetTick>
 80021e2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	f140 80cb 	bpl.w	8002382 <HAL_RCCEx_PeriphCLKConfig+0x552>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80021ec:	2000      	movs	r0, #0
 80021ee:	e009      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 80021f0:	2601      	movs	r6, #1
 80021f2:	e659      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f4:	f7fe fa3a 	bl	800066c <HAL_GetTick>
 80021f8:	eba0 0008 	sub.w	r0, r0, r8
 80021fc:	2864      	cmp	r0, #100	; 0x64
 80021fe:	f67f ae6b 	bls.w	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002202:	2003      	movs	r0, #3
}
 8002204:	b003      	add	sp, #12
 8002206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800220a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800220c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002210:	429a      	cmp	r2, r3
 8002212:	f43f ae6b 	beq.w	8001eec <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002218:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800221a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800221e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002222:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002224:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002226:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800222a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800222c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800222e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002230:	07da      	lsls	r2, r3, #31
 8002232:	f57f ae5b 	bpl.w	8001eec <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002236:	f7fe fa19 	bl	800066c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800223e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002242:	079b      	lsls	r3, r3, #30
 8002244:	f53f ae52 	bmi.w	8001eec <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002248:	f7fe fa10 	bl	800066c <HAL_GetTick>
 800224c:	eba0 0008 	sub.w	r0, r0, r8
 8002250:	4548      	cmp	r0, r9
 8002252:	d9f5      	bls.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002254:	e7d5      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002256:	6891      	ldr	r1, [r2, #8]
 8002258:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800225c:	e656      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800225e:	4e4c      	ldr	r6, [pc, #304]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002260:	6833      	ldr	r3, [r6, #0]
 8002262:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002266:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002268:	f7fe fa00 	bl	800066c <HAL_GetTick>
 800226c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800226e:	6833      	ldr	r3, [r6, #0]
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	d478      	bmi.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002274:	6822      	ldr	r2, [r4, #0]
 8002276:	07d7      	lsls	r7, r2, #31
 8002278:	d512      	bpl.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x470>
 800227a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800227c:	b983      	cbnz	r3, 80022a0 <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800227e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002282:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002286:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800228a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800228e:	430b      	orrs	r3, r1
 8002290:	6861      	ldr	r1, [r4, #4]
 8002292:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002296:	68a1      	ldr	r1, [r4, #8]
 8002298:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800229c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022a0:	0316      	lsls	r6, r2, #12
 80022a2:	d503      	bpl.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80022a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022aa:	d005      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80022ac:	02d0      	lsls	r0, r2, #11
 80022ae:	d51e      	bpl.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b6:	d11a      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022b8:	4935      	ldr	r1, [pc, #212]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80022ba:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022be:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80022ca:	4303      	orrs	r3, r0
 80022cc:	6860      	ldr	r0, [r4, #4]
 80022ce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80022d2:	68e0      	ldr	r0, [r4, #12]
 80022d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80022d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022dc:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80022e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022e2:	f020 001f 	bic.w	r0, r0, #31
 80022e6:	3b01      	subs	r3, #1
 80022e8:	4303      	orrs	r3, r0
 80022ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022ee:	01d1      	lsls	r1, r2, #7
 80022f0:	d511      	bpl.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022f2:	4927      	ldr	r1, [pc, #156]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80022f4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022f8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022fc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002300:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002304:	4303      	orrs	r3, r0
 8002306:	6860      	ldr	r0, [r4, #4]
 8002308:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800230c:	6920      	ldr	r0, [r4, #16]
 800230e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002312:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002316:	0192      	lsls	r2, r2, #6
 8002318:	d50d      	bpl.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800231a:	6923      	ldr	r3, [r4, #16]
 800231c:	6862      	ldr	r2, [r4, #4]
 800231e:	041b      	lsls	r3, r3, #16
 8002320:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002324:	68e2      	ldr	r2, [r4, #12]
 8002326:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800232a:	68a2      	ldr	r2, [r4, #8]
 800232c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002330:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002332:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002336:	4e16      	ldr	r6, [pc, #88]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002338:	6833      	ldr	r3, [r6, #0]
 800233a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800233e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002340:	f7fe f994 	bl	800066c <HAL_GetTick>
 8002344:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002346:	6833      	ldr	r3, [r6, #0]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	f53f aed7 	bmi.w	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800234e:	f7fe f98d 	bl	800066c <HAL_GetTick>
 8002352:	1bc0      	subs	r0, r0, r7
 8002354:	2864      	cmp	r0, #100	; 0x64
 8002356:	d9f6      	bls.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002358:	e753      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800235a:	2e01      	cmp	r6, #1
 800235c:	f43f af7f 	beq.w	800225e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002364:	e6c8      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002366:	f7fe f981 	bl	800066c <HAL_GetTick>
 800236a:	1bc0      	subs	r0, r0, r7
 800236c:	2864      	cmp	r0, #100	; 0x64
 800236e:	f67f af7e 	bls.w	800226e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002372:	e746      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002374:	f7fe f97a 	bl	800066c <HAL_GetTick>
 8002378:	1b80      	subs	r0, r0, r6
 800237a:	2864      	cmp	r0, #100	; 0x64
 800237c:	f67f aece 	bls.w	800211c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8002380:	e73f      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002382:	f7fe f973 	bl	800066c <HAL_GetTick>
 8002386:	1b40      	subs	r0, r0, r5
 8002388:	2864      	cmp	r0, #100	; 0x64
 800238a:	f67f af2b 	bls.w	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800238e:	e738      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002390:	40023800 	.word	0x40023800

08002394 <HAL_RCCEx_GetPeriphCLKConfig>:
{
  uint32_t tempreg = 0;

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8002394:	4b5d      	ldr	r3, [pc, #372]	; (800250c <HAL_RCCEx_GetPeriphCLKConfig+0x178>)
 8002396:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8002398:	4b5d      	ldr	r3, [pc, #372]	; (8002510 <HAL_RCCEx_GetPeriphCLKConfig+0x17c>)
 800239a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800239e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80023a2:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023a4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80023a8:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80023ac:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80023b2:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80023b6:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023b8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80023bc:	f3c2 7202 	ubfx	r2, r2, #28, #3
 80023c0:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80023c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023c6:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80023ca:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023d0:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80023d4:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023da:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80023de:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023e4:	f3c2 7202 	ubfx	r2, r2, #28, #3
 80023e8:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos) + 1; // *** JSB: Cube fix: + 1 ***
 80023ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023ee:	f002 021f 	and.w	r2, r2, #31
 80023f2:	3201      	adds	r2, #1
 80023f4:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos) + 1; // *** JSB: Cube fix: + 1 ***
 80023f6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023fa:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80023fe:	3201      	adds	r2, #1
 8002400:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8002402:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002406:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800240a:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800240c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002410:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002414:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8002416:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800241a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800241e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002426:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8002428:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800242c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002430:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8002432:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002436:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800243a:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800243c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002440:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002444:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8002446:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800244a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800244e:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8002450:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002454:	f002 0203 	and.w	r2, r2, #3
 8002458:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800245a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800245e:	f002 020c 	and.w	r2, r2, #12
 8002462:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8002464:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002468:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800246c:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800246e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002472:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002476:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8002478:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800247c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002480:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8002482:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002486:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800248a:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800248c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002490:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002494:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8002496:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800249a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800249e:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80024a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80024a4:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 80024a8:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80024aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80024ae:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80024b2:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80024b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80024b8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80024bc:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80024be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80024c2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80024c6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 80024ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80024ce:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80024d2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 80024d6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024da:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80024de:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80024e2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024e6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80024ea:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80024ee:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80024f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80024f2:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80024f6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80024fa:	430a      	orrs	r2, r1
 80024fc:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80024fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002506:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	1cfffff1 	.word	0x1cfffff1
 8002510:	40023800 	.word	0x40023800

08002514 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002514:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8002518:	d131      	bne.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800251a:	4b35      	ldr	r3, [pc, #212]	; (80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800251c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8002520:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8002524:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002528:	d05f      	beq.n	80025ea <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800252a:	d806      	bhi.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800252c:	2a00      	cmp	r2, #0
 800252e:	d039      	beq.n	80025a4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8002530:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8002534:	d051      	beq.n	80025da <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    default :
      {
        break;
      }
    }
  }
 8002536:	2000      	movs	r0, #0
 8002538:	4770      	bx	lr
    switch (saiclocksource)
 800253a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
    switch (saiclocksource)
 800253e:	d1fa      	bne.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002540:	685b      	ldr	r3, [r3, #4]
          frequency = HSI_VALUE;
 8002542:	482c      	ldr	r0, [pc, #176]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002544:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 800254a:	bf08      	it	eq
 800254c:	4618      	moveq	r0, r3
 800254e:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002550:	4828      	ldr	r0, [pc, #160]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002552:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002554:	fbb0 f3f3 	udiv	r3, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002558:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800255c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8002560:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002564:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002566:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800256a:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800256e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8002578:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800257c:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800257e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8002582:	d1d8      	bne.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    saiclocksource = RCC->DCKCFGR1;
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8002586:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800258a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 800258e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002592:	d02a      	beq.n	80025ea <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002594:	d803      	bhi.n	800259e <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 8002596:	b12a      	cbz	r2, 80025a4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8002598:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800259c:	e7ca      	b.n	8002534 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 800259e:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80025a2:	e7cc      	b.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80025a4:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80025a6:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80025a8:	0251      	lsls	r1, r2, #9
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80025aa:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80025ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b0:	bf54      	ite	pl
 80025b2:	4811      	ldrpl	r0, [pc, #68]	; (80025f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80025b4:	480f      	ldrmi	r0, [pc, #60]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80025b6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80025ba:	fbb0 f3f3 	udiv	r3, r0, r3
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80025be:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80025c2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80025c6:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80025c8:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80025cc:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80025d0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80025d4:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80025d8:	e7cd      	b.n	8002576 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80025da:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80025dc:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80025de:	0252      	lsls	r2, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80025e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80025e4:	d4b4      	bmi.n	8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80025e6:	4804      	ldr	r0, [pc, #16]	; (80025f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80025e8:	e7b3      	b.n	8002552 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        frequency = EXTERNAL_CLOCK_VALUE;
 80025ea:	4804      	ldr	r0, [pc, #16]	; (80025fc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)

  return frequency;
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	017d7840 	.word	0x017d7840
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	00ac4400 	.word	0x00ac4400

08002600 <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
 8002600:	2901      	cmp	r1, #1
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8002602:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8002604:	6842      	ldr	r2, [r0, #4]
    tmpIT|= SAI_IT_FREQ;
 8002606:	bf14      	ite	ne
 8002608:	2301      	movne	r3, #1
 800260a:	2309      	moveq	r3, #9
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800260c:	2908      	cmp	r1, #8
 800260e:	d105      	bne.n	800261c <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8002610:	f022 0102 	bic.w	r1, r2, #2
 8002614:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 8002616:	bf08      	it	eq
 8002618:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800261c:	3a02      	subs	r2, #2
 800261e:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8002620:	bf94      	ite	ls
 8002622:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8002626:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 800262a:	4770      	bx	lr

0800262c <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <SAI_Disable.isra.0+0x34>)
 800262e:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8002638:	6802      	ldr	r2, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800263a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800263c:	6811      	ldr	r1, [r2, #0]
 800263e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002642:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8002644:	3b01      	subs	r3, #1
 8002646:	d206      	bcs.n	8002656 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002648:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800264c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002650:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
 8002654:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8002656:	6811      	ldr	r1, [r2, #0]
 8002658:	03c9      	lsls	r1, r1, #15
 800265a:	d4f3      	bmi.n	8002644 <SAI_Disable.isra.0+0x18>

  return status;
}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000024 	.word	0x20000024

08002664 <HAL_SAI_Init>:
{
 8002664:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 8002666:	4604      	mov	r4, r0
 8002668:	2800      	cmp	r0, #0
 800266a:	f000 80c6 	beq.w	80027fa <HAL_SAI_Init+0x196>
  if(hsai->State == HAL_SAI_STATE_RESET)
 800266e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8002672:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002676:	b91b      	cbnz	r3, 8002680 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8002678:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 800267c:	f003 fc38 	bl	8005ef0 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8002680:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8002682:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8002684:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8002688:	f7ff ffd0 	bl	800262c <SAI_Disable.isra.0>
  switch(hsai->Init.SynchroExt)
 800268c:	68e3      	ldr	r3, [r4, #12]
 800268e:	2b01      	cmp	r3, #1
 8002690:	f000 80a1 	beq.w	80027d6 <HAL_SAI_Init+0x172>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8002694:	2b02      	cmp	r3, #2
 8002696:	bf14      	ite	ne
 8002698:	2300      	movne	r3, #0
 800269a:	2320      	moveq	r3, #32
  switch(hsai->Init.Synchro)
 800269c:	68a2      	ldr	r2, [r4, #8]
 800269e:	2a02      	cmp	r2, #2
 80026a0:	f000 809d 	beq.w	80027de <HAL_SAI_Init+0x17a>
 80026a4:	2a03      	cmp	r2, #3
 80026a6:	f000 8098 	beq.w	80027da <HAL_SAI_Init+0x176>
 80026aa:	2a01      	cmp	r2, #1
 80026ac:	bf14      	ite	ne
 80026ae:	2500      	movne	r5, #0
 80026b0:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80026b4:	6822      	ldr	r2, [r4, #0]
 80026b6:	4952      	ldr	r1, [pc, #328]	; (8002800 <HAL_SAI_Init+0x19c>)
 80026b8:	4852      	ldr	r0, [pc, #328]	; (8002804 <HAL_SAI_Init+0x1a0>)
 80026ba:	428a      	cmp	r2, r1
 80026bc:	d003      	beq.n	80026c6 <HAL_SAI_Init+0x62>
 80026be:	4e52      	ldr	r6, [pc, #328]	; (8002808 <HAL_SAI_Init+0x1a4>)
 80026c0:	42b2      	cmp	r2, r6
 80026c2:	f040 808f 	bne.w	80027e4 <HAL_SAI_Init+0x180>
    SAI1->GCR = tmpregisterGCR;
 80026c6:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80026ca:	69e3      	ldr	r3, [r4, #28]
 80026cc:	b313      	cbz	r3, 8002714 <HAL_SAI_Init+0xb0>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80026ce:	428a      	cmp	r2, r1
 80026d0:	d003      	beq.n	80026da <HAL_SAI_Init+0x76>
 80026d2:	4b4d      	ldr	r3, [pc, #308]	; (8002808 <HAL_SAI_Init+0x1a4>)
 80026d4:	429a      	cmp	r2, r3
 80026d6:	f040 8088 	bne.w	80027ea <HAL_SAI_Init+0x186>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80026da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026de:	f7ff ff19 	bl	8002514 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	4a49      	ldr	r2, [pc, #292]	; (800280c <HAL_SAI_Init+0x1a8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d002      	beq.n	80026f0 <HAL_SAI_Init+0x8c>
 80026ea:	3220      	adds	r2, #32
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d103      	bne.n	80026f8 <HAL_SAI_Init+0x94>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80026f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80026f4:	f7ff ff0e 	bl	8002514 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80026f8:	220a      	movs	r2, #10
 80026fa:	69e3      	ldr	r3, [r4, #28]
 80026fc:	4350      	muls	r0, r2
 80026fe:	025b      	lsls	r3, r3, #9
 8002700:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8002704:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8002708:	fb02 0013 	mls	r0, r2, r3, r0
 800270c:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 800270e:	bf08      	it	eq
 8002710:	3301      	addeq	r3, #1
 8002712:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002714:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8002716:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002718:	f033 0102 	bics.w	r1, r3, #2
 800271c:	d167      	bne.n	80027ee <HAL_SAI_Init+0x18a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800271e:	2a01      	cmp	r2, #1
 8002720:	bf18      	it	ne
 8002722:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002726:	6822      	ldr	r2, [r4, #0]
 8002728:	4839      	ldr	r0, [pc, #228]	; (8002810 <HAL_SAI_Init+0x1ac>)
 800272a:	6816      	ldr	r6, [r2, #0]
 800272c:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800272e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002730:	4333      	orrs	r3, r6
 8002732:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002734:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002736:	4333      	orrs	r3, r6
 8002738:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800273a:	6810      	ldr	r0, [r2, #0]
 800273c:	4333      	orrs	r3, r6
 800273e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002740:	4333      	orrs	r3, r6
 8002742:	6926      	ldr	r6, [r4, #16]
 8002744:	4333      	orrs	r3, r6
 8002746:	6966      	ldr	r6, [r4, #20]
 8002748:	4333      	orrs	r3, r6
 800274a:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800274c:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800274e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002752:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002754:	432b      	orrs	r3, r5
 8002756:	430b      	orrs	r3, r1
 8002758:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800275a:	6853      	ldr	r3, [r2, #4]
 800275c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002760:	f023 030f 	bic.w	r3, r3, #15
 8002764:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002766:	69a3      	ldr	r3, [r4, #24]
 8002768:	6851      	ldr	r1, [r2, #4]
 800276a:	4303      	orrs	r3, r0
 800276c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800276e:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002770:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002772:	430b      	orrs	r3, r1
 8002774:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_SAI_Init+0x1b0>)
 8002778:	6891      	ldr	r1, [r2, #8]
 800277a:	400b      	ands	r3, r1
 800277c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800277e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002780:	6891      	ldr	r1, [r2, #8]
 8002782:	4303      	orrs	r3, r0
 8002784:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002786:	4303      	orrs	r3, r0
 8002788:	430b      	orrs	r3, r1
 800278a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800278c:	3901      	subs	r1, #1
 800278e:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8002790:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002792:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002794:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002798:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800279a:	68d3      	ldr	r3, [r2, #12]
 800279c:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80027a0:	f023 030f 	bic.w	r3, r3, #15
 80027a4:	041b      	lsls	r3, r3, #16
 80027a6:	0c1b      	lsrs	r3, r3, #16
 80027a8:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80027aa:	68d1      	ldr	r1, [r2, #12]
 80027ac:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 80027b0:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80027b2:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80027b4:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80027b6:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80027b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80027bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80027be:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80027c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027c4:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 80027c6:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80027c8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 80027cc:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 80027d0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 80027d4:	bd70      	pop	{r4, r5, r6, pc}
  switch(hsai->Init.SynchroExt)
 80027d6:	2310      	movs	r3, #16
 80027d8:	e760      	b.n	800269c <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80027da:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80027de:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80027e2:	e767      	b.n	80026b4 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 80027e4:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
 80027e8:	e76f      	b.n	80026ca <HAL_SAI_Init+0x66>
    uint32_t freq = 0;
 80027ea:	2000      	movs	r0, #0
 80027ec:	e779      	b.n	80026e2 <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80027ee:	2a01      	cmp	r2, #1
 80027f0:	bf14      	ite	ne
 80027f2:	2100      	movne	r1, #0
 80027f4:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80027f8:	e795      	b.n	8002726 <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
 80027fc:	e7ea      	b.n	80027d4 <HAL_SAI_Init+0x170>
 80027fe:	bf00      	nop
 8002800:	40015804 	.word	0x40015804
 8002804:	40015000 	.word	0x40015000
 8002808:	40015824 	.word	0x40015824
 800280c:	40015c04 	.word	0x40015c04
 8002810:	ff05c010 	.word	0xff05c010
 8002814:	fff88000 	.word	0xfff88000

08002818 <HAL_SAI_InitProtocol>:
  switch(protocol)
 8002818:	2902      	cmp	r1, #2
{
 800281a:	b430      	push	{r4, r5}
  switch(protocol)
 800281c:	d905      	bls.n	800282a <HAL_SAI_InitProtocol+0x12>
 800281e:	1ecc      	subs	r4, r1, #3
 8002820:	2c01      	cmp	r4, #1
 8002822:	d95b      	bls.n	80028dc <HAL_SAI_InitProtocol+0xc4>
}
 8002824:	2001      	movs	r0, #1
 8002826:	bc30      	pop	{r4, r5}
 8002828:	4770      	bx	lr
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800282a:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800282c:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800282e:	65c3      	str	r3, [r0, #92]	; 0x5c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002830:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8002834:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8002836:	6384      	str	r4, [r0, #56]	; 0x38
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002838:	bf14      	ite	ne
 800283a:	2501      	movne	r5, #1
 800283c:	4625      	moveq	r5, r4
  hsai->SlotInit.FirstBitOffset  = 0;
 800283e:	6544      	str	r4, [r0, #84]	; 0x54
  if((nbslot & 0x1) != 0 )
 8002840:	f013 0401 	ands.w	r4, r3, #1
 8002844:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8002846:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800284a:	6485      	str	r5, [r0, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800284c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002850:	6605      	str	r5, [r0, #96]	; 0x60
  if((nbslot & 0x1) != 0 )
 8002852:	d1e7      	bne.n	8002824 <HAL_SAI_InitProtocol+0xc>
  switch(protocol)
 8002854:	1e4d      	subs	r5, r1, #1
 8002856:	2d01      	cmp	r5, #1
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8002858:	bf93      	iteet	ls
 800285a:	f44f 3500 	movls.w	r5, #131072	; 0x20000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800285e:	64c4      	strhi	r4, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8002860:	f44f 2480 	movhi.w	r4, #262144	; 0x40000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8002864:	64c5      	strls	r5, [r0, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8002866:	6504      	str	r4, [r0, #80]	; 0x50
  switch(datasize)
 8002868:	2a03      	cmp	r2, #3
 800286a:	d8db      	bhi.n	8002824 <HAL_SAI_InitProtocol+0xc>
 800286c:	e8df f002 	tbb	[pc, r2]
 8002870:	2d1d0c02 	.word	0x2d1d0c02
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002874:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 8002876:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002878:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 800287a:	015a      	lsls	r2, r3, #5
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 800287c:	011b      	lsls	r3, r3, #4
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 800287e:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 8002880:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8002882:	2340      	movs	r3, #64	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002884:	6583      	str	r3, [r0, #88]	; 0x58
  if(status == HAL_OK)
 8002886:	e00d      	b.n	80028a4 <HAL_SAI_InitProtocol+0x8c>
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 8002888:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800288a:	2280      	movs	r2, #128	; 0x80
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 800288c:	2902      	cmp	r1, #2
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800288e:	ea4f 1483 	mov.w	r4, r3, lsl #6
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002892:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 8002894:	ea4f 1343 	mov.w	r3, r3, lsl #5
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002898:	6582      	str	r2, [r0, #88]	; 0x58
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800289a:	6404      	str	r4, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800289c:	6443      	str	r3, [r0, #68]	; 0x44
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 800289e:	d101      	bne.n	80028a4 <HAL_SAI_InitProtocol+0x8c>
      hsai->SlotInit.FirstBitOffset = 16;
 80028a0:	2310      	movs	r3, #16
      hsai->SlotInit.FirstBitOffset = 8;
 80028a2:	6543      	str	r3, [r0, #84]	; 0x54
}
 80028a4:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 80028a6:	f7ff bedd 	b.w	8002664 <HAL_SAI_Init>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 80028aa:	22c0      	movs	r2, #192	; 0xc0
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80028ac:	085b      	lsrs	r3, r3, #1
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 80028ae:	2902      	cmp	r1, #2
    hsai->Init.DataSize = SAI_DATASIZE_24;
 80028b0:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80028b2:	ea4f 1283 	mov.w	r2, r3, lsl #6
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80028b6:	ea4f 1343 	mov.w	r3, r3, lsl #5
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80028ba:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80028bc:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80028be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80028c2:	6583      	str	r3, [r0, #88]	; 0x58
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 80028c4:	d1ee      	bne.n	80028a4 <HAL_SAI_InitProtocol+0x8c>
      hsai->SlotInit.FirstBitOffset = 8;
 80028c6:	2308      	movs	r3, #8
 80028c8:	e7eb      	b.n	80028a2 <HAL_SAI_InitProtocol+0x8a>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 80028ca:	22e0      	movs	r2, #224	; 0xe0
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80028cc:	085b      	lsrs	r3, r3, #1
    hsai->Init.DataSize = SAI_DATASIZE_32;
 80028ce:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80028d0:	019a      	lsls	r2, r3, #6
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80028d2:	015b      	lsls	r3, r3, #5
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 80028d4:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 80028d6:	6443      	str	r3, [r0, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	e7d3      	b.n	8002884 <HAL_SAI_InitProtocol+0x6c>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80028dc:	6845      	ldr	r5, [r0, #4]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80028de:	2400      	movs	r4, #0
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80028e0:	f44f 3c00 	mov.w	ip, #131072	; 0x20000
  hsai->SlotInit.SlotNumber      = nbslot;
 80028e4:	65c3      	str	r3, [r0, #92]	; 0x5c
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80028e6:	f035 0502 	bics.w	r5, r5, #2
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80028ea:	6304      	str	r4, [r0, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80028ec:	6384      	str	r4, [r0, #56]	; 0x38
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80028ee:	bf14      	ite	ne
 80028f0:	4625      	movne	r5, r4
 80028f2:	2501      	moveq	r5, #1
    hsai->FrameInit.ActiveFrameLength = 13;
 80028f4:	2904      	cmp	r1, #4
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80028f6:	6484      	str	r4, [r0, #72]	; 0x48
 80028f8:	63c5      	str	r5, [r0, #60]	; 0x3c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80028fa:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    hsai->FrameInit.ActiveFrameLength = 13;
 80028fe:	bf0c      	ite	eq
 8002900:	2101      	moveq	r1, #1
 8002902:	210d      	movne	r1, #13
  hsai->SlotInit.FirstBitOffset  = 0;
 8002904:	6544      	str	r4, [r0, #84]	; 0x54
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8002906:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800290a:	6441      	str	r1, [r0, #68]	; 0x44
 800290c:	6604      	str	r4, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800290e:	e9c0 c513 	strd	ip, r5, [r0, #76]	; 0x4c
  switch(datasize)
 8002912:	2a03      	cmp	r2, #3
 8002914:	d886      	bhi.n	8002824 <HAL_SAI_InitProtocol+0xc>
 8002916:	e8df f002 	tbb	[pc, r2]
 800291a:	0702      	.short	0x0702
 800291c:	120d      	.short	0x120d
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800291e:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 16 * nbslot;
 8002920:	011b      	lsls	r3, r3, #4
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002922:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 8002924:	6403      	str	r3, [r0, #64]	; 0x40
 8002926:	e7ac      	b.n	8002882 <HAL_SAI_InitProtocol+0x6a>
    hsai->Init.DataSize = SAI_DATASIZE_16;
 8002928:	2280      	movs	r2, #128	; 0x80
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800292a:	015b      	lsls	r3, r3, #5
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800292c:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800292e:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8002930:	6582      	str	r2, [r0, #88]	; 0x58
  if(status == HAL_OK)
 8002932:	e7b7      	b.n	80028a4 <HAL_SAI_InitProtocol+0x8c>
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8002934:	22c0      	movs	r2, #192	; 0xc0
    hsai->FrameInit.FrameLength = 32 * nbslot;
 8002936:	015b      	lsls	r3, r3, #5
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8002938:	6342      	str	r2, [r0, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800293a:	6403      	str	r3, [r0, #64]	; 0x40
 800293c:	e7cc      	b.n	80028d8 <HAL_SAI_InitProtocol+0xc0>
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800293e:	22e0      	movs	r2, #224	; 0xe0
 8002940:	e7f9      	b.n	8002936 <HAL_SAI_InitProtocol+0x11e>

08002942 <HAL_SAI_DMAStop>:
{
 8002942:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8002944:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 8002948:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 800294a:	2b01      	cmp	r3, #1
 800294c:	d041      	beq.n	80029d2 <HAL_SAI_DMAStop+0x90>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800294e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 8002950:	2501      	movs	r5, #1
 8002952:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8002956:	6813      	ldr	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8002958:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800295a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800295e:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8002960:	bb20      	cbnz	r0, 80029ac <HAL_SAI_DMAStop+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8002964:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002966:	b188      	cbz	r0, 800298c <HAL_SAI_DMAStop+0x4a>
 8002968:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800296c:	2b22      	cmp	r3, #34	; 0x22
 800296e:	d10d      	bne.n	800298c <HAL_SAI_DMAStop+0x4a>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8002970:	f7fd ffcd 	bl	800090e <HAL_DMA_Abort>
 8002974:	b150      	cbz	r0, 800298c <HAL_SAI_DMAStop+0x4a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8002976:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	d006      	beq.n	800298c <HAL_SAI_DMAStop+0x4a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800297e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 8002982:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8002984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002988:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SAI_Disable(hsai);
 800298c:	4620      	mov	r0, r4
 800298e:	f7ff fe4d 	bl	800262c <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	6853      	ldr	r3, [r2, #4]
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 800299c:	2301      	movs	r3, #1
 800299e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80029a2:	2300      	movs	r3, #0
 80029a4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80029a8:	4628      	mov	r0, r5
 80029aa:	bd38      	pop	{r3, r4, r5, pc}
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80029ac:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80029b0:	2b12      	cmp	r3, #18
 80029b2:	d1d6      	bne.n	8002962 <HAL_SAI_DMAStop+0x20>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80029b4:	f7fd ffab 	bl	800090e <HAL_DMA_Abort>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d0d2      	beq.n	8002962 <HAL_SAI_DMAStop+0x20>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80029bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d0ce      	beq.n	8002962 <HAL_SAI_DMAStop+0x20>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80029c4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80029c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029cc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80029d0:	e7c8      	b.n	8002964 <HAL_SAI_DMAStop+0x22>
  __HAL_LOCK(hsai);
 80029d2:	2502      	movs	r5, #2
 80029d4:	e7e8      	b.n	80029a8 <HAL_SAI_DMAStop+0x66>
	...

080029d8 <HAL_SAI_Transmit_DMA>:
{
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	4613      	mov	r3, r2
 80029dc:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
 80029de:	2900      	cmp	r1, #0
 80029e0:	d03f      	beq.n	8002a62 <HAL_SAI_Transmit_DMA+0x8a>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d03d      	beq.n	8002a62 <HAL_SAI_Transmit_DMA+0x8a>
  if(hsai->State == HAL_SAI_STATE_READY)
 80029e6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
 80029ea:	2801      	cmp	r0, #1
 80029ec:	b2c5      	uxtb	r5, r0
 80029ee:	d13a      	bne.n	8002a66 <HAL_SAI_Transmit_DMA+0x8e>
    __HAL_LOCK(hsai);
 80029f0:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
 80029f4:	2801      	cmp	r0, #1
 80029f6:	d036      	beq.n	8002a66 <HAL_SAI_Transmit_DMA+0x8e>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80029f8:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80029fa:	2212      	movs	r2, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80029fc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80029fe:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8002a02:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002a06:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <HAL_SAI_Transmit_DMA+0x94>)
    __HAL_LOCK(hsai);
 8002a08:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8002a0c:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 8002a0e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8002a12:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002a16:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <HAL_SAI_Transmit_DMA+0x98>)
 8002a1a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_SAI_Transmit_DMA+0x9c>)
    hsai->hdmatx->XferAbortCallback = NULL;
 8002a1e:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	321c      	adds	r2, #28
 8002a26:	f7fd ff35 	bl	8000894 <HAL_DMA_Start_IT>
 8002a2a:	b118      	cbz	r0, 8002a34 <HAL_SAI_Transmit_DMA+0x5c>
      __HAL_UNLOCK(hsai);
 8002a2c:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 8002a30:	4628      	mov	r0, r5
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8002a34:	6825      	ldr	r5, [r4, #0]
 8002a36:	682b      	ldr	r3, [r5, #0]
 8002a38:	03db      	lsls	r3, r3, #15
 8002a3a:	d403      	bmi.n	8002a44 <HAL_SAI_Transmit_DMA+0x6c>
      __HAL_SAI_ENABLE(hsai);
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a42:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002a44:	2100      	movs	r1, #0
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7ff fdda 	bl	8002600 <SAI_InterruptFlag>
 8002a4c:	692b      	ldr	r3, [r5, #16]
 8002a4e:	4318      	orrs	r0, r3
 8002a50:	6128      	str	r0, [r5, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8002a52:	682b      	ldr	r3, [r5, #0]
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a58:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
 8002a5a:	2500      	movs	r5, #0
 8002a5c:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
 8002a60:	e7e6      	b.n	8002a30 <HAL_SAI_Transmit_DMA+0x58>
    return  HAL_ERROR;
 8002a62:	2501      	movs	r5, #1
 8002a64:	e7e4      	b.n	8002a30 <HAL_SAI_Transmit_DMA+0x58>
    return HAL_BUSY;
 8002a66:	2502      	movs	r5, #2
 8002a68:	e7e2      	b.n	8002a30 <HAL_SAI_Transmit_DMA+0x58>
 8002a6a:	bf00      	nop
 8002a6c:	08002ab1 	.word	0x08002ab1
 8002a70:	08002a79 	.word	0x08002a79
 8002a74:	08002abd 	.word	0x08002abd

08002a78 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002a78:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002a7a:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8002a7c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 8002a84:	d110      	bne.n	8002aa8 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002a86:	6825      	ldr	r5, [r4, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002a88:	4620      	mov	r0, r4
    hsai->XferCount = 0;
 8002a8a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002a8e:	682b      	ldr	r3, [r5, #0]
 8002a90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a94:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002a96:	f7ff fdb3 	bl	8002600 <SAI_InterruptFlag>
 8002a9a:	692b      	ldr	r3, [r5, #16]
 8002a9c:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State= HAL_SAI_STATE_READY;
 8002aa0:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002aa2:	6128      	str	r0, [r5, #16]
    hsai->State= HAL_SAI_STATE_READY;
 8002aa4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f002 fd41 	bl	8005530 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002aae:	bd38      	pop	{r3, r4, r5, pc}

08002ab0 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8002ab0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002ab2:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8002ab4:	f002 fd36 	bl	8005524 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002ab8:	bd08      	pop	{r3, pc}

08002aba <HAL_SAI_ErrorCallback>:
 8002aba:	4770      	bx	lr

08002abc <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002abc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002abe:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8002ac0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8002acc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d003      	beq.n	8002adc <SAI_DMAError+0x20>
 8002ad4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d10c      	bne.n	8002af6 <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8002adc:	6802      	ldr	r2, [r0, #0]
 8002ade:	6813      	ldr	r3, [r2, #0]
 8002ae0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ae4:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8002ae6:	f7ff fda1 	bl	800262c <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8002af6:	f7ff ffe0 	bl	8002aba <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8002afa:	bd08      	pop	{r3, pc}

08002afc <EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE>:
#ifdef HAL_SPDIFRX_MODULE_ENABLED
#if defined (SPDIFRX)

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
void EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE() {} // JSB
 8002afc:	4770      	bx	lr

08002afe <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8002afe:	b510      	push	{r4, lr}
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8002b00:	4604      	mov	r4, r0
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d030      	beq.n	8002b68 <HAL_SPDIFRX_Init+0x6a>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8002b06:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002b0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b0e:	b91b      	cbnz	r3, 8002b18 <HAL_SPDIFRX_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8002b10:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8002b14:	f003 fabe 	bl	8006094 <HAL_SPDIFRX_MspInit>

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8002b18:	6821      	ldr	r1, [r4, #0]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8002b1a:	2302      	movs	r3, #2
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8002b1c:	6860      	ldr	r0, [r4, #4]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8002b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_SPDIFRX_IDLE(hspdif);
 8002b22:	680b      	ldr	r3, [r1, #0]
 8002b24:	f023 0303 	bic.w	r3, r3, #3
 8002b28:	600b      	str	r3, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8002b2a:	69a3      	ldr	r3, [r4, #24]
  tmpreg = hspdif->Instance->CR;
 8002b2c:	680a      	ldr	r2, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8002b2e:	4303      	orrs	r3, r0
             hspdif->Init.InputSelection |
 8002b30:	68a0      	ldr	r0, [r4, #8]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8002b32:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
             hspdif->Init.InputSelection |
 8002b36:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8002b38:	68e0      	ldr	r0, [r4, #12]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8002b3a:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
             hspdif->Init.Retries |
 8002b3e:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 8002b40:	6920      	ldr	r0, [r4, #16]
 8002b42:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 8002b44:	6960      	ldr	r0, [r4, #20]
 8002b46:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 8002b48:	69e0      	ldr	r0, [r4, #28]
 8002b4a:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 8002b4c:	6a20      	ldr	r0, [r4, #32]
 8002b4e:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 8002b50:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002b52:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 8002b54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b56:	4303      	orrs	r3, r0
             );


  hspdif->Instance->CR = tmpreg;

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8002b58:	2000      	movs	r0, #0
  tmpreg |= (hspdif->Init.StereoMode |
 8002b5a:	4313      	orrs	r3, r2
  hspdif->Instance->CR = tmpreg;
 8002b5c:	600b      	str	r3, [r1, #0]

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8002b5e:	2301      	movs	r3, #1
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8002b60:	64a0      	str	r0, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8002b62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
}
 8002b66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b68:	2001      	movs	r0, #1
 8002b6a:	e7fc      	b.n	8002b66 <HAL_SPDIFRX_Init+0x68>

08002b6c <HAL_SPDIFRX_ReceiveDataFlow_DMA>:
  * @param pData a 32-bit pointer to the Receive data buffer.
  * @param Size number of data sample to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_ReceiveDataFlow_DMA(SPDIFRX_HandleTypeDef *hspdif, uint32_t *pData, uint16_t Size)
{
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	4604      	mov	r4, r0
  register uint32_t count = SPDIFRX_TIMEOUT_VALUE * (SystemCoreClock / 24U / 1000U);

  const HAL_SPDIFRX_StateTypeDef tempState = hspdif->State;
 8002b70:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
{
 8002b74:	4613      	mov	r3, r2

  if((pData == NULL) || (Size == 0U))
 8002b76:	460a      	mov	r2, r1
  const HAL_SPDIFRX_StateTypeDef tempState = hspdif->State;
 8002b78:	b2c0      	uxtb	r0, r0
  if((pData == NULL) || (Size == 0U))
 8002b7a:	b341      	cbz	r1, 8002bce <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x62>
 8002b7c:	b33b      	cbz	r3, 8002bce <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x62>
  {
    return  HAL_ERROR;
  }

  if((tempState == HAL_SPDIFRX_STATE_READY) || (tempState == HAL_SPDIFRX_STATE_BUSY_CX))
 8002b7e:	2801      	cmp	r0, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x1a>
 8002b82:	2804      	cmp	r0, #4
 8002b84:	d17a      	bne.n	8002c7c <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hspdif);
 8002b86:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8002b8a:	2901      	cmp	r1, #1
 8002b8c:	d076      	beq.n	8002c7c <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x110>
  register uint32_t count = SPDIFRX_TIMEOUT_VALUE * (SystemCoreClock / 24U / 1000U);
 8002b8e:	493c      	ldr	r1, [pc, #240]	; (8002c80 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x114>)
    __HAL_LOCK(hspdif);
 8002b90:	2601      	movs	r6, #1

    hspdif->pRxBuffPtr = pData;
    hspdif->RxXferSize = Size;
    hspdif->RxXferCount = Size;

    hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8002b92:	2700      	movs	r7, #0
    hspdif->State = HAL_SPDIFRX_STATE_BUSY_RX;

    /* Set the SPDIFRX Rx DMA Half transfer complete callback */
    hspdif->hdmaDrRx->XferHalfCpltCallback = SPDIFRX_DMARxHalfCplt;
 8002b94:	6c20      	ldr	r0, [r4, #64]	; 0x40
  register uint32_t count = SPDIFRX_TIMEOUT_VALUE * (SystemCoreClock / 24U / 1000U);
 8002b96:	680d      	ldr	r5, [r1, #0]
    hspdif->State = HAL_SPDIFRX_STATE_BUSY_RX;
 8002b98:	2103      	movs	r1, #3
    __HAL_LOCK(hspdif);
 8002b9a:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    hspdif->RxXferSize = Size;
 8002b9e:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspdif->RxXferCount = Size;
 8002ba0:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8002ba2:	64a7      	str	r7, [r4, #72]	; 0x48
    hspdif->State = HAL_SPDIFRX_STATE_BUSY_RX;
 8002ba4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    hspdif->hdmaDrRx->XferHalfCpltCallback = SPDIFRX_DMARxHalfCplt;
 8002ba8:	4936      	ldr	r1, [pc, #216]	; (8002c84 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x118>)
    hspdif->pRxBuffPtr = pData;
 8002baa:	62e2      	str	r2, [r4, #44]	; 0x2c
    hspdif->hdmaDrRx->XferHalfCpltCallback = SPDIFRX_DMARxHalfCplt;
 8002bac:	6401      	str	r1, [r0, #64]	; 0x40

    /* Set the SPDIFRX Rx DMA transfer complete callback */
    hspdif->hdmaDrRx->XferCpltCallback = SPDIFRX_DMARxCplt;
 8002bae:	4936      	ldr	r1, [pc, #216]	; (8002c88 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x11c>)
 8002bb0:	63c1      	str	r1, [r0, #60]	; 0x3c

    /* Set the DMA error callback */
    hspdif->hdmaDrRx->XferErrorCallback = SPDIFRX_DMAError;
 8002bb2:	4936      	ldr	r1, [pc, #216]	; (8002c8c <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x120>)
 8002bb4:	64c1      	str	r1, [r0, #76]	; 0x4c

    /* Enable the DMA request */
    if(HAL_DMA_Start_IT(hspdif->hdmaDrRx, (uint32_t)&hspdif->Instance->DR, (uint32_t)hspdif->pRxBuffPtr, Size) != HAL_OK)
 8002bb6:	6821      	ldr	r1, [r4, #0]
 8002bb8:	3110      	adds	r1, #16
 8002bba:	f7fd fe6b 	bl	8000894 <HAL_DMA_Start_IT>
 8002bbe:	b140      	cbz	r0, 8002bd2 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x66>
    {
      /* Set SPDIFRX error */
      hspdif->ErrorCode = HAL_SPDIFRX_ERROR_DMA;
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	64a3      	str	r3, [r4, #72]	; 0x48

      /* Set SPDIFRX state */
      hspdif->State = HAL_SPDIFRX_STATE_ERROR;
 8002bc4:	2307      	movs	r3, #7
 8002bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

      /* Process Unlocked */
      __HAL_UNLOCK(hspdif);
 8002bca:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8002bce:	2001      	movs	r0, #1
 8002bd0:	e047      	b.n	8002c62 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xf6>

      return HAL_ERROR;
    }

    /* Enable RXDMAEN bit in SPDIFRX CR register for data flow reception*/
    hspdif->Instance->CR |= SPDIFRX_CR_RXDMAEN;
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	f042 0204 	orr.w	r2, r2, #4
 8002bda:	601a      	str	r2, [r3, #0]

    if((SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != SPDIFRX_STATE_RCV)
 8002bdc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	f002 0203 	and.w	r2, r2, #3
 8002be6:	2a03      	cmp	r2, #3
 8002be8:	d044      	beq.n	8002c74 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x108>
  register uint32_t count = SPDIFRX_TIMEOUT_VALUE * (SystemCoreClock / 24U / 1000U);
 8002bea:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8002bee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bf2:	fbb5 f2f2 	udiv	r2, r5, r2
 8002bf6:	434a      	muls	r2, r1
    {
      /* Start synchronization */
      __HAL_SPDIFRX_SYNC(hspdif);
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	f041 0101 	orr.w	r1, r1, #1
 8002bfe:	6019      	str	r1, [r3, #0]

      /* Wait until SYNCD flag is set */
      do
      {
        if (count == 0U)
 8002c00:	bb82      	cbnz	r2, 8002c64 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xf8>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_RXNE);
 8002c02:	6859      	ldr	r1, [r3, #4]
          hspdif->State= HAL_SPDIFRX_STATE_READY;

          /* Process Unlocked */
          __HAL_UNLOCK(hspdif);

          return HAL_TIMEOUT;
 8002c04:	2003      	movs	r0, #3
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_RXNE);
 8002c06:	f021 0101 	bic.w	r1, r1, #1
 8002c0a:	0409      	lsls	r1, r1, #16
 8002c0c:	0c09      	lsrs	r1, r1, #16
 8002c0e:	6059      	str	r1, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	f021 0102 	bic.w	r1, r1, #2
 8002c16:	0409      	lsls	r1, r1, #16
 8002c18:	0c09      	lsrs	r1, r1, #16
 8002c1a:	6059      	str	r1, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_PERRIE);
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	f021 0104 	bic.w	r1, r1, #4
 8002c22:	0409      	lsls	r1, r1, #16
 8002c24:	0c09      	lsrs	r1, r1, #16
 8002c26:	6059      	str	r1, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE);
 8002c28:	6859      	ldr	r1, [r3, #4]
 8002c2a:	f021 0108 	bic.w	r1, r1, #8
 8002c2e:	0409      	lsls	r1, r1, #16
 8002c30:	0c09      	lsrs	r1, r1, #16
 8002c32:	6059      	str	r1, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SBLKIE);
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	f021 0110 	bic.w	r1, r1, #16
 8002c3a:	0409      	lsls	r1, r1, #16
 8002c3c:	0c09      	lsrs	r1, r1, #16
 8002c3e:	6059      	str	r1, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_SYNCDIE);
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	f021 0120 	bic.w	r1, r1, #32
 8002c46:	0409      	lsls	r1, r1, #16
 8002c48:	0c09      	lsrs	r1, r1, #16
 8002c4a:	6059      	str	r1, [r3, #4]
          __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_IFEIE);
 8002c4c:	6859      	ldr	r1, [r3, #4]
 8002c4e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002c52:	0409      	lsls	r1, r1, #16
 8002c54:	0c09      	lsrs	r1, r1, #16
 8002c56:	6059      	str	r1, [r3, #4]
          hspdif->State= HAL_SPDIFRX_STATE_READY;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
          __HAL_UNLOCK(hspdif);
 8002c5e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } while (__HAL_SPDIFRX_GET_FLAG(hspdif, SPDIFRX_FLAG_SYNCD) == RESET);
 8002c64:	6899      	ldr	r1, [r3, #8]
        count--;
 8002c66:	3a01      	subs	r2, #1
      } while (__HAL_SPDIFRX_GET_FLAG(hspdif, SPDIFRX_FLAG_SYNCD) == RESET);
 8002c68:	0689      	lsls	r1, r1, #26
 8002c6a:	d5c9      	bpl.n	8002c00 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0x94>
      __HAL_SPDIFRX_RCV(hspdif);
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f042 0203 	orr.w	r2, r2, #3
 8002c72:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hspdif);
 8002c74:	2300      	movs	r3, #0
 8002c76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    return HAL_OK;
 8002c7a:	e7f2      	b.n	8002c62 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xf6>
    return HAL_BUSY;
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	e7f0      	b.n	8002c62 <HAL_SPDIFRX_ReceiveDataFlow_DMA+0xf6>
 8002c80:	20000024 	.word	0x20000024
 8002c84:	08002cf7 	.word	0x08002cf7
 8002c88:	08002d03 	.word	0x08002d03
 8002c8c:	08002d31 	.word	0x08002d31

08002c90 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort>:
 8002c90:	4770      	bx	lr

08002c92 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR>:
 8002c92:	4770      	bx	lr

08002c94 <HAL_SPDIFRX_DMAStop>:
  * @brief stop the audio stream receive from the Media.
  * @param hspdif SPDIFRX handle
  * @retval None
  */
HAL_StatusTypeDef HAL_SPDIFRX_DMAStop(SPDIFRX_HandleTypeDef *hspdif)
{
 8002c94:	b538      	push	{r3, r4, r5, lr}
  /* Process Locked */
  __HAL_LOCK(hspdif);
 8002c96:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8002c9a:	4604      	mov	r4, r0
  __HAL_LOCK(hspdif);
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d027      	beq.n	8002cf0 <HAL_SPDIFRX_DMAStop+0x5c>
 8002ca0:	2501      	movs	r5, #1
 8002ca2:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44

  // JSB fix. 20191115. Otherwise the L&R channels can become reversed if the signal is interrupted.
  HAL_DMA_Abort(hspdif->hdmaDrRx); // JSB added!!!
 8002ca6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002ca8:	f7fd fe31 	bl	800090e <HAL_DMA_Abort>
  HAL_DMA_Abort(hspdif->hdmaCsRx); // JSB added!!!
 8002cac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002cae:	f7fd fe2e 	bl	800090e <HAL_DMA_Abort>

  /* Disable the SPDIFRX DMA requests */
  // hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN); // *** JSB: Cube bug!!! This unintentionally clears bits 4+ of CR. ***
  hspdif->Instance->CR &= (uint32_t)(~SPDIFRX_CR_RXDMAEN); // *** JSB: Cube bug fix!!! ***
 8002cb2:	6823      	ldr	r3, [r4, #0]
  __HAL_SPDIFRX_IDLE(hspdif);

  hspdif->State = HAL_SPDIFRX_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hspdif);
 8002cb4:	2000      	movs	r0, #0
  hspdif->Instance->CR &= (uint32_t)(~SPDIFRX_CR_RXDMAEN); // *** JSB: Cube bug fix!!! ***
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	f022 0204 	bic.w	r2, r2, #4
 8002cbc:	601a      	str	r2, [r3, #0]
  hspdif->Instance->CR &= (uint32_t)(~SPDIFRX_CR_CBDMAEN); // *** JSB: Cube bug fix!!! ***
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc4:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE(hspdif->hdmaDrRx);
 8002cc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cc8:	6811      	ldr	r1, [r2, #0]
 8002cca:	680a      	ldr	r2, [r1, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	600a      	str	r2, [r1, #0]
  __HAL_DMA_DISABLE(hspdif->hdmaCsRx);
 8002cd2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002cd4:	6811      	ldr	r1, [r2, #0]
 8002cd6:	680a      	ldr	r2, [r1, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	600a      	str	r2, [r1, #0]
  __HAL_SPDIFRX_IDLE(hspdif);
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	f022 0203 	bic.w	r2, r2, #3
 8002ce4:	601a      	str	r2, [r3, #0]
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8002ce6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  __HAL_UNLOCK(hspdif);
 8002cea:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44

  return HAL_OK;
}
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspdif);
 8002cf0:	2002      	movs	r0, #2
 8002cf2:	e7fc      	b.n	8002cee <HAL_SPDIFRX_DMAStop+0x5a>

08002cf4 <HAL_SPDIFRX_RxHalfCpltCallback>:
 8002cf4:	4770      	bx	lr

08002cf6 <SPDIFRX_DMARxHalfCplt>:
  SPDIFRX_HandleTypeDef* hspdif = (SPDIFRX_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
  hspdif->RxHalfCpltCallback(hspdif);
#else
  HAL_SPDIFRX_RxHalfCpltCallback(hspdif);
 8002cf6:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002cf8:	b508      	push	{r3, lr}
  HAL_SPDIFRX_RxHalfCpltCallback(hspdif);
 8002cfa:	f7ff fffb 	bl	8002cf4 <HAL_SPDIFRX_RxHalfCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
}
 8002cfe:	bd08      	pop	{r3, pc}

08002d00 <HAL_SPDIFRX_RxCpltCallback>:
 8002d00:	4770      	bx	lr

08002d02 <SPDIFRX_DMARxCplt>:
{
 8002d02:	b508      	push	{r3, lr}
 8002d04:	4603      	mov	r3, r0
  SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d06:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if(hdma->Init.Mode != DMA_CIRCULAR)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0e:	d00b      	beq.n	8002d28 <SPDIFRX_DMARxCplt+0x26>
    hspdif->Instance->CR &= (uint16_t)(~SPDIFRX_CR_RXDMAEN);
 8002d10:	6802      	ldr	r2, [r0, #0]
 8002d12:	6813      	ldr	r3, [r2, #0]
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	6013      	str	r3, [r2, #0]
    hspdif->RxXferCount = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	86c3      	strh	r3, [r0, #54]	; 0x36
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  HAL_SPDIFRX_RxCpltCallback(hspdif);
 8002d28:	f7ff ffea 	bl	8002d00 <HAL_SPDIFRX_RxCpltCallback>
}
 8002d2c:	bd08      	pop	{r3, pc}

08002d2e <HAL_SPDIFRX_CxCpltCallback>:
 8002d2e:	4770      	bx	lr

08002d30 <SPDIFRX_DMAError>:
  * @param hdma DMA handle
  * @retval None
  */
static void SPDIFRX_DMAError(DMA_HandleTypeDef *hdma)
{
  SPDIFRX_HandleTypeDef* hspdif = ( SPDIFRX_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d30:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Rx and Cb DMA Request */
  hspdif->Instance->CR &= (uint16_t)(~(SPDIFRX_CR_RXDMAEN | SPDIFRX_CR_CBDMAEN));
 8002d32:	6802      	ldr	r2, [r0, #0]
{
 8002d34:	b508      	push	{r3, lr}
  hspdif->Instance->CR &= (uint16_t)(~(SPDIFRX_CR_RXDMAEN | SPDIFRX_CR_CBDMAEN));
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	0c1b      	lsrs	r3, r3, #16
 8002d44:	6013      	str	r3, [r2, #0]
  hspdif->RxXferCount = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	86c3      	strh	r3, [r0, #54]	; 0x36

  hspdif->State= HAL_SPDIFRX_STATE_READY;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45

  /* Set the error code and execute error callback*/
  hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_DMA;
 8002d50:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002d52:	f043 0308 	orr.w	r3, r3, #8
 8002d56:	6483      	str	r3, [r0, #72]	; 0x48
#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
  /* The transfer is not stopped */
  hspdif->ErrorCallback(hspdif);
#else
  /* The transfer is not stopped */
  HAL_SPDIFRX_ErrorCallback(hspdif);
 8002d58:	f001 fe76 	bl	8004a48 <HAL_SPDIFRX_ErrorCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
}
 8002d5c:	bd08      	pop	{r3, pc}

08002d5e <HAL_SPDIFRX_IRQHandler>:
{
 8002d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itFlag   = hspdif->Instance->SR;
 8002d60:	6803      	ldr	r3, [r0, #0]
{
 8002d62:	4604      	mov	r4, r0
  uint32_t itFlag   = hspdif->Instance->SR;
 8002d64:	689e      	ldr	r6, [r3, #8]
  uint32_t itSource = hspdif->Instance->IMR;
 8002d66:	685d      	ldr	r5, [r3, #4]
  if(((itFlag & SPDIFRX_FLAG_RXNE) == SPDIFRX_FLAG_RXNE) && ((itSource &  SPDIFRX_IT_RXNE) == SPDIFRX_IT_RXNE))
 8002d68:	07f1      	lsls	r1, r6, #31
 8002d6a:	d51b      	bpl.n	8002da4 <HAL_SPDIFRX_IRQHandler+0x46>
 8002d6c:	07ea      	lsls	r2, r5, #31
 8002d6e:	d519      	bpl.n	8002da4 <HAL_SPDIFRX_IRQHandler+0x46>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 8002d70:	2701      	movs	r7, #1
  * @retval None
  */
static void SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
  /* Receive data */
  (*hspdif->pRxBuffPtr) = hspdif->Instance->DR;
 8002d72:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 8002d74:	60df      	str	r7, [r3, #12]
  (*hspdif->pRxBuffPtr) = hspdif->Instance->DR;
 8002d76:	6919      	ldr	r1, [r3, #16]
 8002d78:	f842 1b04 	str.w	r1, [r2], #4
  hspdif->pRxBuffPtr++;
 8002d7c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspdif->RxXferCount--;
 8002d7e:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8002d80:	3a01      	subs	r2, #1
 8002d82:	b292      	uxth	r2, r2
 8002d84:	86c2      	strh	r2, [r0, #54]	; 0x36

  if(hspdif->RxXferCount == 0U)
 8002d86:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	b95a      	cbnz	r2, 8002da4 <HAL_SPDIFRX_IRQHandler+0x46>
  {
    /* Disable RXNE/PE and OVR interrupts */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE | SPDIFRX_IT_PERRIE | SPDIFRX_IT_RXNE);
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	f021 010d 	bic.w	r1, r1, #13
 8002d92:	0409      	lsls	r1, r1, #16
 8002d94:	0c09      	lsrs	r1, r1, #16
 8002d96:	6059      	str	r1, [r3, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8002d98:	f880 7045 	strb.w	r7, [r0, #69]	; 0x45

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 8002d9c:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
  hspdif->RxCpltCallback(hspdif);
#else
  HAL_SPDIFRX_RxCpltCallback(hspdif);
 8002da0:	f7ff ffae 	bl	8002d00 <HAL_SPDIFRX_RxCpltCallback>
  if(((itFlag & SPDIFRX_FLAG_CSRNE) == SPDIFRX_FLAG_CSRNE) && ((itSource &  SPDIFRX_IT_CSRNE) == SPDIFRX_IT_CSRNE))
 8002da4:	07b3      	lsls	r3, r6, #30
 8002da6:	d51e      	bpl.n	8002de6 <HAL_SPDIFRX_IRQHandler+0x88>
 8002da8:	07af      	lsls	r7, r5, #30
 8002daa:	d51c      	bpl.n	8002de6 <HAL_SPDIFRX_IRQHandler+0x88>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_CSRNE);
 8002dac:	6822      	ldr	r2, [r4, #0]
 8002dae:	2302      	movs	r3, #2
 8002db0:	60d3      	str	r3, [r2, #12]
  * @retval None
  */
static void SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
  /* Receive data */
  (*hspdif->pCsBuffPtr) = hspdif->Instance->CSR;
 8002db2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002db4:	6951      	ldr	r1, [r2, #20]
 8002db6:	f843 1b04 	str.w	r1, [r3], #4
  hspdif->pCsBuffPtr++;
 8002dba:	6323      	str	r3, [r4, #48]	; 0x30
  hspdif->CsXferCount--;
 8002dbc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	8763      	strh	r3, [r4, #58]	; 0x3a

  if(hspdif->CsXferCount == 0U)
 8002dc4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	b96b      	cbnz	r3, 8002de6 <HAL_SPDIFRX_IRQHandler+0x88>
  {
    /* Disable CSRNE interrupt */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 8002dca:	6851      	ldr	r1, [r2, #4]
    __HAL_UNLOCK(hspdif);

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
  hspdif->CxCpltCallback(hspdif);
#else
  HAL_SPDIFRX_CxCpltCallback(hspdif);
 8002dcc:	4620      	mov	r0, r4
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 8002dce:	f021 0102 	bic.w	r1, r1, #2
 8002dd2:	0409      	lsls	r1, r1, #16
 8002dd4:	0c09      	lsrs	r1, r1, #16
 8002dd6:	6051      	str	r1, [r2, #4]
    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    __HAL_UNLOCK(hspdif);
 8002dde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  HAL_SPDIFRX_CxCpltCallback(hspdif);
 8002de2:	f7ff ffa4 	bl	8002d2e <HAL_SPDIFRX_CxCpltCallback>
  if(((itFlag & SPDIFRX_FLAG_OVR) == SPDIFRX_FLAG_OVR) && ((itSource &  SPDIFRX_IT_OVRIE) == SPDIFRX_IT_OVRIE))
 8002de6:	0730      	lsls	r0, r6, #28
 8002de8:	d50b      	bpl.n	8002e02 <HAL_SPDIFRX_IRQHandler+0xa4>
 8002dea:	0729      	lsls	r1, r5, #28
 8002dec:	d509      	bpl.n	8002e02 <HAL_SPDIFRX_IRQHandler+0xa4>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_OVRIE);
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	2208      	movs	r2, #8
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8002df2:	4620      	mov	r0, r4
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_OVRIE);
 8002df4:	60da      	str	r2, [r3, #12]
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
 8002df6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8002dfe:	f001 fe23 	bl	8004a48 <HAL_SPDIFRX_ErrorCallback>
  if(((itFlag & SPDIFRX_FLAG_PERR) == SPDIFRX_FLAG_PERR) && ((itSource &  SPDIFRX_IT_PERRIE) == SPDIFRX_IT_PERRIE))
 8002e02:	0772      	lsls	r2, r6, #29
 8002e04:	d50a      	bpl.n	8002e1c <HAL_SPDIFRX_IRQHandler+0xbe>
 8002e06:	076b      	lsls	r3, r5, #29
 8002e08:	d508      	bpl.n	8002e1c <HAL_SPDIFRX_IRQHandler+0xbe>
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_PERRIE);
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	2204      	movs	r2, #4
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8002e0e:	4620      	mov	r0, r4
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_PERRIE);
 8002e10:	60da      	str	r2, [r3, #12]
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
 8002e12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e14:	4313      	orrs	r3, r2
 8002e16:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8002e18:	f001 fe16 	bl	8004a48 <HAL_SPDIFRX_ErrorCallback>
}
 8002e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e1e <SPI_WaitFifoStateUntilTimeout.part.0>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e1e:	6803      	ldr	r3, [r0, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e28:	6842      	ldr	r2, [r0, #4]
 8002e2a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002e2e:	d10a      	bne.n	8002e46 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
 8002e30:	6882      	ldr	r2, [r0, #8]
 8002e32:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002e36:	d002      	beq.n	8002e3e <SPI_WaitFifoStateUntilTimeout.part.0+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e38:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002e3c:	d103      	bne.n	8002e46 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e46:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e48:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002e4c:	d107      	bne.n	8002e5e <SPI_WaitFifoStateUntilTimeout.part.0+0x40>
        {
          SPI_RESET_CRC(hspi);
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e64:	2300      	movs	r3, #0
 8002e66:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8002e6a:	2003      	movs	r0, #3
 8002e6c:	4770      	bx	lr

08002e6e <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e70:	4605      	mov	r5, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	4616      	mov	r6, r2
 8002e76:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	6898      	ldr	r0, [r3, #8]
 8002e7c:	4020      	ands	r0, r4
 8002e7e:	d100      	bne.n	8002e82 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x14>
      }
    }
  }

  return HAL_OK;
}
 8002e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e82:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002e86:	d100      	bne.n	8002e8a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002e88:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8002e8a:	1c72      	adds	r2, r6, #1
 8002e8c:	d0f5      	beq.n	8002e7a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e8e:	f7fd fbed 	bl	800066c <HAL_GetTick>
 8002e92:	1bc0      	subs	r0, r0, r7
 8002e94:	4286      	cmp	r6, r0
 8002e96:	d8ef      	bhi.n	8002e78 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa>
 8002e98:	4628      	mov	r0, r5
}
 8002e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e9e:	f7ff bfbe 	b.w	8002e1e <SPI_WaitFifoStateUntilTimeout.part.0>

08002ea2 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002ea2:	b570      	push	{r4, r5, r6, lr}
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	460d      	mov	r5, r1
 8002ea8:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	6890      	ldr	r0, [r2, #8]
 8002eae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002eb2:	d100      	bne.n	8002eb6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x14>
}
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	1c6b      	adds	r3, r5, #1
 8002eb8:	d0f8      	beq.n	8002eac <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002eba:	f7fd fbd7 	bl	800066c <HAL_GetTick>
 8002ebe:	1b80      	subs	r0, r0, r6
 8002ec0:	4285      	cmp	r5, r0
 8002ec2:	d8f2      	bhi.n	8002eaa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8>
 8002ec4:	4620      	mov	r0, r4
}
 8002ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002eca:	f7ff bfa8 	b.w	8002e1e <SPI_WaitFifoStateUntilTimeout.part.0>

08002ece <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ece:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ed0:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ed2:	9201      	str	r2, [sp, #4]
{
 8002ed4:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ed6:	460a      	mov	r2, r1
 8002ed8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8002edc:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ede:	f7ff ffc6 	bl	8002e6e <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002ee2:	9b01      	ldr	r3, [sp, #4]
 8002ee4:	b128      	cbz	r0, 8002ef2 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ee8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eea:	f043 0320 	orr.w	r3, r3, #32
 8002eee:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ef0:	e010      	b.n	8002f14 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	f7ff ffd2 	bl	8002ea2 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002efe:	9b01      	ldr	r3, [sp, #4]
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d1f0      	bne.n	8002ee6 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f04:	462a      	mov	r2, r5
 8002f06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7ff ffaf 	bl	8002e6e <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d1e8      	bne.n	8002ee6 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8002f14:	b003      	add	sp, #12
 8002f16:	bd30      	pop	{r4, r5, pc}

08002f18 <HAL_SPI_Init>:
{
 8002f18:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d04a      	beq.n	8002fb6 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f24:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002f28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f2c:	b91b      	cbnz	r3, 8002f36 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002f2e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002f32:	f003 f9b5 	bl	80062a0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f36:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002f38:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f3a:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002f40:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f42:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f4a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	d833      	bhi.n	8002fba <HAL_SPI_Init+0xa2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f56:	d000      	beq.n	8002f5a <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f58:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002f5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f5c:	b92b      	cbnz	r3, 8002f6a <HAL_SPI_Init+0x52>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f5e:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002f62:	bf8c      	ite	hi
 8002f64:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002f66:	2301      	movls	r3, #1
 8002f68:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002f6a:	69a0      	ldr	r0, [r4, #24]
 8002f6c:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8002f70:	4333      	orrs	r3, r6
 8002f72:	6926      	ldr	r6, [r4, #16]
 8002f74:	4333      	orrs	r3, r6
 8002f76:	6966      	ldr	r6, [r4, #20]
 8002f78:	4333      	orrs	r3, r6
 8002f7a:	69e6      	ldr	r6, [r4, #28]
 8002f7c:	4333      	orrs	r3, r6
 8002f7e:	6a26      	ldr	r6, [r4, #32]
 8002f80:	4333      	orrs	r3, r6
 8002f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f84:	4333      	orrs	r3, r6
 8002f86:	f400 7600 	and.w	r6, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f8a:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002f8c:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f8e:	f000 0004 	and.w	r0, r0, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002f92:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f96:	432b      	orrs	r3, r5
 8002f98:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002f9a:	432b      	orrs	r3, r5
 8002f9c:	4303      	orrs	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f9e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fa4:	69d3      	ldr	r3, [r2, #28]
 8002fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002faa:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002fac:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fae:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fb0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	e7fc      	b.n	8002fb4 <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fba:	4619      	mov	r1, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fbc:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 8002fc0:	e7c9      	b.n	8002f56 <HAL_SPI_Init+0x3e>

08002fc2 <HAL_SPI_TransmitReceive>:
{
 8002fc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc6:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002fc8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002fcc:	4604      	mov	r4, r0
 8002fce:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8002fd0:	2b01      	cmp	r3, #1
{
 8002fd2:	4616      	mov	r6, r2
 8002fd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002fd8:	f000 811d 	beq.w	8003216 <HAL_SPI_TransmitReceive+0x254>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002fe2:	f7fd fb43 	bl	800066c <HAL_GetTick>
  tmp_state           = hspi->State;
 8002fe6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 8002fea:	4681      	mov	r9, r0
  tmp_mode            = hspi->Init.Mode;
 8002fec:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fee:	2a01      	cmp	r2, #1
  tmp_state           = hspi->State;
 8002ff0:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ff2:	d00a      	beq.n	800300a <HAL_SPI_TransmitReceive+0x48>
 8002ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff8:	f040 810b 	bne.w	8003212 <HAL_SPI_TransmitReceive+0x250>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ffc:	68a2      	ldr	r2, [r4, #8]
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	f040 8107 	bne.w	8003212 <HAL_SPI_TransmitReceive+0x250>
 8003004:	2904      	cmp	r1, #4
 8003006:	f040 8104 	bne.w	8003212 <HAL_SPI_TransmitReceive+0x250>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800300a:	2d00      	cmp	r5, #0
 800300c:	d047      	beq.n	800309e <HAL_SPI_TransmitReceive+0xdc>
 800300e:	2e00      	cmp	r6, #0
 8003010:	d045      	beq.n	800309e <HAL_SPI_TransmitReceive+0xdc>
 8003012:	2f00      	cmp	r7, #0
 8003014:	d043      	beq.n	800309e <HAL_SPI_TransmitReceive+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003016:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800301a:	2a04      	cmp	r2, #4
 800301c:	d002      	beq.n	8003024 <HAL_SPI_TransmitReceive+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800301e:	2205      	movs	r2, #5
 8003020:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003024:	68e1      	ldr	r1, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003026:	2200      	movs	r2, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003028:	6426      	str	r6, [r4, #64]	; 0x40
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800302a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800302e:	6826      	ldr	r6, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003030:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->RxXferSize  = Size;
 8003032:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003036:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800303a:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800303c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800303e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8003040:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003044:	6872      	ldr	r2, [r6, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003046:	d801      	bhi.n	800304c <HAL_SPI_TransmitReceive+0x8a>
 8003048:	2f01      	cmp	r7, #1
 800304a:	d02a      	beq.n	80030a2 <HAL_SPI_TransmitReceive+0xe0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800304c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003050:	6072      	str	r2, [r6, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003052:	6832      	ldr	r2, [r6, #0]
 8003054:	0650      	lsls	r0, r2, #25
 8003056:	d403      	bmi.n	8003060 <HAL_SPI_TransmitReceive+0x9e>
    __HAL_SPI_ENABLE(hspi);
 8003058:	6832      	ldr	r2, [r6, #0]
 800305a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305e:	6032      	str	r2, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003060:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003064:	d958      	bls.n	8003118 <HAL_SPI_TransmitReceive+0x156>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003066:	b10b      	cbz	r3, 800306c <HAL_SPI_TransmitReceive+0xaa>
 8003068:	2f01      	cmp	r7, #1
 800306a:	d107      	bne.n	800307c <HAL_SPI_TransmitReceive+0xba>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800306c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003070:	60f3      	str	r3, [r6, #12]
      hspi->TxXferCount--;
 8003072:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003074:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003076:	3b01      	subs	r3, #1
 8003078:	b29b      	uxth	r3, r3
 800307a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800307c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800307e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003080:	b29b      	uxth	r3, r3
 8003082:	b98b      	cbnz	r3, 80030a8 <HAL_SPI_TransmitReceive+0xe6>
 8003084:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003088:	b29b      	uxth	r3, r3
 800308a:	b96b      	cbnz	r3, 80030a8 <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800308c:	464a      	mov	r2, r9
 800308e:	4641      	mov	r1, r8
 8003090:	4620      	mov	r0, r4
 8003092:	f7ff ff1c 	bl	8002ece <SPI_EndRxTxTransaction>
 8003096:	2800      	cmp	r0, #0
 8003098:	d036      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x146>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800309a:	2320      	movs	r3, #32
 800309c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800309e:	2001      	movs	r0, #1
 80030a0:	e032      	b.n	8003108 <HAL_SPI_TransmitReceive+0x146>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030a6:	e7d3      	b.n	8003050 <HAL_SPI_TransmitReceive+0x8e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030a8:	6821      	ldr	r1, [r4, #0]
 80030aa:	688b      	ldr	r3, [r1, #8]
 80030ac:	079a      	lsls	r2, r3, #30
 80030ae:	d50d      	bpl.n	80030cc <HAL_SPI_TransmitReceive+0x10a>
 80030b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	b153      	cbz	r3, 80030cc <HAL_SPI_TransmitReceive+0x10a>
 80030b6:	b14d      	cbz	r5, 80030cc <HAL_SPI_TransmitReceive+0x10a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        txallowed = 0U;
 80030ba:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030bc:	f833 2b02 	ldrh.w	r2, [r3], #2
 80030c0:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80030c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030cc:	688a      	ldr	r2, [r1, #8]
 80030ce:	f012 0201 	ands.w	r2, r2, #1
 80030d2:	d00f      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x132>
 80030d4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80030d8:	b29b      	uxth	r3, r3
 80030da:	b15b      	cbz	r3, 80030f4 <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030dc:	68c9      	ldr	r1, [r1, #12]
        txallowed = 1U;
 80030de:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030e2:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80030e8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030f4:	f7fd faba 	bl	800066c <HAL_GetTick>
 80030f8:	eba0 0009 	sub.w	r0, r0, r9
 80030fc:	4540      	cmp	r0, r8
 80030fe:	d3be      	bcc.n	800307e <HAL_SPI_TransmitReceive+0xbc>
 8003100:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003104:	d0bb      	beq.n	800307e <HAL_SPI_TransmitReceive+0xbc>
        errorcode = HAL_TIMEOUT;
 8003106:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003108:	2301      	movs	r3, #1
 800310a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800310e:	2300      	movs	r3, #0
 8003110:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003118:	b10b      	cbz	r3, 800311e <HAL_SPI_TransmitReceive+0x15c>
 800311a:	2f01      	cmp	r7, #1
 800311c:	d10b      	bne.n	8003136 <HAL_SPI_TransmitReceive+0x174>
      if (hspi->TxXferCount > 1U)
 800311e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d909      	bls.n	800313a <HAL_SPI_TransmitReceive+0x178>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003126:	f835 3b02 	ldrh.w	r3, [r5], #2
 800312a:	60f3      	str	r3, [r6, #12]
        hspi->TxXferCount -= 2U;
 800312c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800312e:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003130:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8003132:	b29b      	uxth	r3, r3
 8003134:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003136:	2501      	movs	r5, #1
 8003138:	e049      	b.n	80031ce <HAL_SPI_TransmitReceive+0x20c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800313a:	782b      	ldrb	r3, [r5, #0]
 800313c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr++;
 800313e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003140:	3301      	adds	r3, #1
 8003142:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003144:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003146:	3b01      	subs	r3, #1
 8003148:	e7f3      	b.n	8003132 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800314a:	6822      	ldr	r2, [r4, #0]
 800314c:	6893      	ldr	r3, [r2, #8]
 800314e:	079b      	lsls	r3, r3, #30
 8003150:	d511      	bpl.n	8003176 <HAL_SPI_TransmitReceive+0x1b4>
 8003152:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003154:	b29b      	uxth	r3, r3
 8003156:	b173      	cbz	r3, 8003176 <HAL_SPI_TransmitReceive+0x1b4>
 8003158:	b16d      	cbz	r5, 8003176 <HAL_SPI_TransmitReceive+0x1b4>
        if (hspi->TxXferCount > 1U)
 800315a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800315c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 800315e:	b289      	uxth	r1, r1
 8003160:	2901      	cmp	r1, #1
 8003162:	d93e      	bls.n	80031e2 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003164:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003168:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800316a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800316c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800316e:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8003170:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8003172:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8003174:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003176:	6822      	ldr	r2, [r4, #0]
 8003178:	6893      	ldr	r3, [r2, #8]
 800317a:	f013 0301 	ands.w	r3, r3, #1
 800317e:	d01d      	beq.n	80031bc <HAL_SPI_TransmitReceive+0x1fa>
 8003180:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003184:	b289      	uxth	r1, r1
 8003186:	b1c9      	cbz	r1, 80031bc <HAL_SPI_TransmitReceive+0x1fa>
        if (hspi->RxXferCount > 1U)
 8003188:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800318c:	6c21      	ldr	r1, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 800318e:	b280      	uxth	r0, r0
 8003190:	2801      	cmp	r0, #1
 8003192:	d92e      	bls.n	80031f2 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003194:	68d0      	ldr	r0, [r2, #12]
 8003196:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800319a:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800319c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80031a0:	3902      	subs	r1, #2
 80031a2:	b289      	uxth	r1, r1
 80031a4:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80031a8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80031ac:	b289      	uxth	r1, r1
 80031ae:	2901      	cmp	r1, #1
 80031b0:	d803      	bhi.n	80031ba <HAL_SPI_TransmitReceive+0x1f8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031b2:	6851      	ldr	r1, [r2, #4]
 80031b4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80031b8:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 80031ba:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031bc:	f7fd fa56 	bl	800066c <HAL_GetTick>
 80031c0:	eba0 0009 	sub.w	r0, r0, r9
 80031c4:	4540      	cmp	r0, r8
 80031c6:	d320      	bcc.n	800320a <HAL_SPI_TransmitReceive+0x248>
 80031c8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80031cc:	d19b      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x144>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1b9      	bne.n	800314a <HAL_SPI_TransmitReceive+0x188>
 80031d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1b4      	bne.n	800314a <HAL_SPI_TransmitReceive+0x188>
 80031e0:	e754      	b.n	800308c <HAL_SPI_TransmitReceive+0xca>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80031e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031e8:	3301      	adds	r3, #1
 80031ea:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80031ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031ee:	3b01      	subs	r3, #1
 80031f0:	e7be      	b.n	8003170 <HAL_SPI_TransmitReceive+0x1ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031f2:	7b12      	ldrb	r2, [r2, #12]
 80031f4:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 80031f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80031f8:	3201      	adds	r2, #1
 80031fa:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80031fc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003200:	3a01      	subs	r2, #1
 8003202:	b292      	uxth	r2, r2
 8003204:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8003208:	e7d7      	b.n	80031ba <HAL_SPI_TransmitReceive+0x1f8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800320a:	f1b8 0f00 	cmp.w	r8, #0
 800320e:	d1de      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x20c>
 8003210:	e779      	b.n	8003106 <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_BUSY;
 8003212:	2002      	movs	r0, #2
 8003214:	e778      	b.n	8003108 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8003216:	2002      	movs	r0, #2
 8003218:	e77c      	b.n	8003114 <HAL_SPI_TransmitReceive+0x152>
	...

0800321c <HAL_SPI_Transmit_DMA>:
{
 800321c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800321e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8003222:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003224:	2b01      	cmp	r3, #1
 8003226:	d072      	beq.n	800330e <HAL_SPI_Transmit_DMA+0xf2>
 8003228:	2301      	movs	r3, #1
 800322a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800322e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003232:	2b01      	cmp	r3, #1
 8003234:	b2dd      	uxtb	r5, r3
 8003236:	d168      	bne.n	800330a <HAL_SPI_Transmit_DMA+0xee>
  if ((pData == NULL) || (Size == 0U))
 8003238:	2900      	cmp	r1, #0
 800323a:	d047      	beq.n	80032cc <HAL_SPI_Transmit_DMA+0xb0>
 800323c:	2a00      	cmp	r2, #0
 800323e:	d045      	beq.n	80032cc <HAL_SPI_Transmit_DMA+0xb0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003240:	2303      	movs	r3, #3
  hspi->TxXferSize  = Size;
 8003242:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003244:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003246:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800324a:	2300      	movs	r3, #0
 800324c:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800324e:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->TxXferCount = Size;
 8003250:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8003252:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003256:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    SPI_1LINE_TX(hspi);
 800325a:	6802      	ldr	r2, [r0, #0]
  hspi->RxISR       = NULL;
 800325c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003260:	6883      	ldr	r3, [r0, #8]
 8003262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003266:	d103      	bne.n	8003270 <HAL_SPI_Transmit_DMA+0x54>
    SPI_1LINE_TX(hspi);
 8003268:	6813      	ldr	r3, [r2, #0]
 800326a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326e:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003270:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003272:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_SPI_Transmit_DMA+0xf8>)
 8003274:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003276:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_SPI_Transmit_DMA+0xfc>)
 8003278:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800327a:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_SPI_Transmit_DMA+0x100>)
 800327c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	6503      	str	r3, [r0, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003282:	6853      	ldr	r3, [r2, #4]
 8003284:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003288:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800328a:	68e3      	ldr	r3, [r4, #12]
 800328c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003290:	d80f      	bhi.n	80032b2 <HAL_SPI_Transmit_DMA+0x96>
 8003292:	6983      	ldr	r3, [r0, #24]
 8003294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003298:	d10b      	bne.n	80032b2 <HAL_SPI_Transmit_DMA+0x96>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800329a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800329c:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032a0:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80032a2:	d118      	bne.n	80032d6 <HAL_SPI_Transmit_DMA+0xba>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a8:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80032aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032ac:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80032b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80032b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032b4:	320c      	adds	r2, #12
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f7fd faec 	bl	8000894 <HAL_DMA_Start_IT>
 80032bc:	b198      	cbz	r0, 80032e6 <HAL_SPI_Transmit_DMA+0xca>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80032c0:	f043 0310 	orr.w	r3, r3, #16
 80032c4:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80032cc:	2300      	movs	r3, #0
 80032ce:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80032d2:	4628      	mov	r0, r5
 80032d4:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032da:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80032dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032de:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80032e2:	3301      	adds	r3, #1
 80032e4:	e7e4      	b.n	80032b0 <HAL_SPI_Transmit_DMA+0x94>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	0652      	lsls	r2, r2, #25
 80032ec:	d403      	bmi.n	80032f6 <HAL_SPI_Transmit_DMA+0xda>
    __HAL_SPI_ENABLE(hspi);
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f4:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80032f6:	685a      	ldr	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032f8:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	f042 0202 	orr.w	r2, r2, #2
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	e7e0      	b.n	80032cc <HAL_SPI_Transmit_DMA+0xb0>
    errorcode = HAL_BUSY;
 800330a:	2502      	movs	r5, #2
 800330c:	e7de      	b.n	80032cc <HAL_SPI_Transmit_DMA+0xb0>
  __HAL_LOCK(hspi);
 800330e:	2502      	movs	r5, #2
 8003310:	e7df      	b.n	80032d2 <HAL_SPI_Transmit_DMA+0xb6>
 8003312:	bf00      	nop
 8003314:	08003325 	.word	0x08003325
 8003318:	08003353 	.word	0x08003353
 800331c:	08003331 	.word	0x08003331

08003320 <HAL_SPI_TxCpltCallback>:
 8003320:	4770      	bx	lr

08003322 <HAL_SPI_TxHalfCpltCallback>:
 8003322:	4770      	bx	lr

08003324 <SPI_DMAHalfTransmitCplt>:
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003324:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003326:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003328:	f7ff fffb 	bl	8003322 <HAL_SPI_TxHalfCpltCallback>
}
 800332c:	bd08      	pop	{r3, pc}

0800332e <HAL_SPI_ErrorCallback>:
 800332e:	4770      	bx	lr

08003330 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003330:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003332:	6802      	ldr	r2, [r0, #0]
{
 8003334:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003336:	6853      	ldr	r3, [r2, #4]
 8003338:	f023 0303 	bic.w	r3, r3, #3
 800333c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800333e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003340:	f043 0310 	orr.w	r3, r3, #16
 8003344:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003346:	2301      	movs	r3, #1
 8003348:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 800334c:	f7ff ffef 	bl	800332e <HAL_SPI_ErrorCallback>
}
 8003350:	bd08      	pop	{r3, pc}

08003352 <SPI_DMATransmitCplt>:
{
 8003352:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003354:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003356:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8003358:	f7fd f988 	bl	800066c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800335e:	682b      	ldr	r3, [r5, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	05db      	lsls	r3, r3, #23
 8003364:	d426      	bmi.n	80033b4 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003366:	6823      	ldr	r3, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003368:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	f021 0120 	bic.w	r1, r1, #32
 8003370:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	f021 0102 	bic.w	r1, r1, #2
 8003378:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800337a:	2164      	movs	r1, #100	; 0x64
 800337c:	f7ff fda7 	bl	8002ece <SPI_EndRxTxTransaction>
 8003380:	b118      	cbz	r0, 800338a <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003382:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003384:	f043 0320 	orr.w	r3, r3, #32
 8003388:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800338a:	68a3      	ldr	r3, [r4, #8]
 800338c:	b933      	cbnz	r3, 800339c <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	9201      	str	r2, [sp, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033a8:	b123      	cbz	r3, 80033b4 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 80033aa:	4620      	mov	r0, r4
 80033ac:	f7ff ffbf 	bl	800332e <HAL_SPI_ErrorCallback>
}
 80033b0:	b003      	add	sp, #12
 80033b2:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 80033b4:	4620      	mov	r0, r4
 80033b6:	f7ff ffb3 	bl	8003320 <HAL_SPI_TxCpltCallback>
 80033ba:	e7f9      	b.n	80033b0 <SPI_DMATransmitCplt+0x5e>

080033bc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033bc:	6a03      	ldr	r3, [r0, #32]
 80033be:	f023 0301 	bic.w	r3, r3, #1
{
 80033c2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ca:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033cc:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80033d6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80033da:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033dc:	688d      	ldr	r5, [r1, #8]
 80033de:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033e0:	4d0e      	ldr	r5, [pc, #56]	; (800341c <TIM_OC1_SetConfig+0x60>)
 80033e2:	42a8      	cmp	r0, r5
 80033e4:	d002      	beq.n	80033ec <TIM_OC1_SetConfig+0x30>
 80033e6:	4e0e      	ldr	r6, [pc, #56]	; (8003420 <TIM_OC1_SetConfig+0x64>)
 80033e8:	42b0      	cmp	r0, r6
 80033ea:	d111      	bne.n	8003410 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033ec:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f0:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 80033f4:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80033f8:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fc:	d002      	beq.n	8003404 <TIM_OC1_SetConfig+0x48>
 80033fe:	4d08      	ldr	r5, [pc, #32]	; (8003420 <TIM_OC1_SetConfig+0x64>)
 8003400:	42a8      	cmp	r0, r5
 8003402:	d105      	bne.n	8003410 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003404:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003408:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800340c:	4335      	orrs	r5, r6
 800340e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003410:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003412:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003414:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003416:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003418:	6203      	str	r3, [r0, #32]
}
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	40010000 	.word	0x40010000
 8003420:	40010400 	.word	0x40010400

08003424 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003424:	6a03      	ldr	r3, [r0, #32]
 8003426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800342a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800342c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003432:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8003438:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800343a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800343e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003442:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003444:	688d      	ldr	r5, [r1, #8]
 8003446:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800344a:	4d11      	ldr	r5, [pc, #68]	; (8003490 <TIM_OC3_SetConfig+0x6c>)
 800344c:	42a8      	cmp	r0, r5
 800344e:	d003      	beq.n	8003458 <TIM_OC3_SetConfig+0x34>
 8003450:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003454:	42a8      	cmp	r0, r5
 8003456:	d114      	bne.n	8003482 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003458:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800345a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800345e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003462:	4d0b      	ldr	r5, [pc, #44]	; (8003490 <TIM_OC3_SetConfig+0x6c>)
 8003464:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8003466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346a:	d003      	beq.n	8003474 <TIM_OC3_SetConfig+0x50>
 800346c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003470:	42a8      	cmp	r0, r5
 8003472:	d106      	bne.n	8003482 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003474:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003478:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800347c:	4335      	orrs	r5, r6
 800347e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003482:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003484:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003486:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003488:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348a:	6203      	str	r3, [r0, #32]
}
 800348c:	bd70      	pop	{r4, r5, r6, pc}
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000

08003494 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003494:	6a03      	ldr	r3, [r0, #32]
 8003496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800349a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800349c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a2:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ae:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b6:	688d      	ldr	r5, [r1, #8]
 80034b8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034bc:	4d08      	ldr	r5, [pc, #32]	; (80034e0 <TIM_OC4_SetConfig+0x4c>)
 80034be:	42a8      	cmp	r0, r5
 80034c0:	d003      	beq.n	80034ca <TIM_OC4_SetConfig+0x36>
 80034c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034c6:	42a8      	cmp	r0, r5
 80034c8:	d104      	bne.n	80034d4 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034ca:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034ce:	694d      	ldr	r5, [r1, #20]
 80034d0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034d6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034d8:	684b      	ldr	r3, [r1, #4]
 80034da:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034dc:	6202      	str	r2, [r0, #32]
}
 80034de:	bd30      	pop	{r4, r5, pc}
 80034e0:	40010000 	.word	0x40010000

080034e4 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034e4:	6a03      	ldr	r3, [r0, #32]
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80034ea:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034f4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80034f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8003502:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003504:	688d      	ldr	r5, [r1, #8]
 8003506:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350a:	4d09      	ldr	r5, [pc, #36]	; (8003530 <TIM_OC5_SetConfig+0x4c>)
 800350c:	42a8      	cmp	r0, r5
 800350e:	d003      	beq.n	8003518 <TIM_OC5_SetConfig+0x34>
 8003510:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003514:	42a8      	cmp	r0, r5
 8003516:	d104      	bne.n	8003522 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003518:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800351c:	694d      	ldr	r5, [r1, #20]
 800351e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003522:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003524:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003526:	684b      	ldr	r3, [r1, #4]
 8003528:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	6202      	str	r2, [r0, #32]
}
 800352c:	bd30      	pop	{r4, r5, pc}
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000

08003534 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003534:	6a03      	ldr	r3, [r0, #32]
 8003536:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800353a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800353c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003542:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003544:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003548:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800354a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003552:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003556:	688d      	ldr	r5, [r1, #8]
 8003558:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355c:	4d08      	ldr	r5, [pc, #32]	; (8003580 <TIM_OC6_SetConfig+0x4c>)
 800355e:	42a8      	cmp	r0, r5
 8003560:	d003      	beq.n	800356a <TIM_OC6_SetConfig+0x36>
 8003562:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003566:	42a8      	cmp	r0, r5
 8003568:	d104      	bne.n	8003574 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800356a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800356e:	694d      	ldr	r5, [r1, #20]
 8003570:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003574:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003576:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003578:	684b      	ldr	r3, [r1, #4]
 800357a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357c:	6202      	str	r2, [r0, #32]
}
 800357e:	bd30      	pop	{r4, r5, pc}
 8003580:	40010000 	.word	0x40010000

08003584 <HAL_TIM_IC_MspInit>:
 8003584:	4770      	bx	lr

08003586 <HAL_TIM_PeriodElapsedCallback>:
 8003586:	4770      	bx	lr

08003588 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
 8003588:	4770      	bx	lr

0800358a <HAL_TIM_OC_DelayElapsedCallback>:
 800358a:	4770      	bx	lr

0800358c <HAL_TIM_IC_CaptureCallback>:
 800358c:	4770      	bx	lr

0800358e <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800358e:	4770      	bx	lr

08003590 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003590:	4770      	bx	lr

08003592 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_TriggerCallback>:
 8003594:	4770      	bx	lr

08003596 <HAL_TIM_TriggerHalfCpltCallback>:
 8003596:	4770      	bx	lr

08003598 <HAL_TIM_ErrorCallback>:
 8003598:	4770      	bx	lr
	...

0800359c <HAL_TIM_IC_Start_IT>:
  switch (Channel)
 800359c:	2908      	cmp	r1, #8
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800359e:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 80035a0:	d028      	beq.n	80035f4 <HAL_TIM_IC_Start_IT+0x58>
 80035a2:	d818      	bhi.n	80035d6 <HAL_TIM_IC_Start_IT+0x3a>
 80035a4:	b1e9      	cbz	r1, 80035e2 <HAL_TIM_IC_Start_IT+0x46>
 80035a6:	2904      	cmp	r1, #4
 80035a8:	d020      	beq.n	80035ec <HAL_TIM_IC_Start_IT+0x50>
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  // JSB fix. 20191115. Prevents CCxE bit getting reset momentarily, which would be a problem if any current flows into the output e.g. from a resistor.
  // Original version:
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035aa:	2201      	movs	r2, #1
 80035ac:	f001 011f 	and.w	r1, r1, #31
  //
  //  /* Set or reset the CCxE Bit */
  //  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
  // JSB version: !!! Not tested! !!!
  if (ChannelState)
    TIMx->CCER |= tmp;
 80035b0:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035b2:	fa02 f101 	lsl.w	r1, r2, r1
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b6:	4a11      	ldr	r2, [pc, #68]	; (80035fc <HAL_TIM_IC_Start_IT+0x60>)
    TIMx->CCER |= tmp;
 80035b8:	4301      	orrs	r1, r0
 80035ba:	6219      	str	r1, [r3, #32]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035bc:	6899      	ldr	r1, [r3, #8]
 80035be:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c0:	2a06      	cmp	r2, #6
 80035c2:	d006      	beq.n	80035d2 <HAL_TIM_IC_Start_IT+0x36>
 80035c4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IC_Start_IT+0x36>
    __HAL_TIM_ENABLE(htim);
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
}
 80035d2:	2000      	movs	r0, #0
 80035d4:	4770      	bx	lr
  switch (Channel)
 80035d6:	290c      	cmp	r1, #12
 80035d8:	d1e7      	bne.n	80035aa <HAL_TIM_IC_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	f042 0210 	orr.w	r2, r2, #16
 80035e0:	e002      	b.n	80035e8 <HAL_TIM_IC_Start_IT+0x4c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	f042 0202 	orr.w	r2, r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035e8:	60da      	str	r2, [r3, #12]
      break;
 80035ea:	e7de      	b.n	80035aa <HAL_TIM_IC_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	f042 0204 	orr.w	r2, r2, #4
 80035f2:	e7f9      	b.n	80035e8 <HAL_TIM_IC_Start_IT+0x4c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	f042 0208 	orr.w	r2, r2, #8
 80035fa:	e7f5      	b.n	80035e8 <HAL_TIM_IC_Start_IT+0x4c>
 80035fc:	00010007 	.word	0x00010007

08003600 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003600:	6803      	ldr	r3, [r0, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	0791      	lsls	r1, r2, #30
{
 8003606:	b510      	push	{r4, lr}
 8003608:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800360a:	d510      	bpl.n	800362e <HAL_TIM_IRQHandler+0x2e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	0792      	lsls	r2, r2, #30
 8003610:	d50d      	bpl.n	800362e <HAL_TIM_IRQHandler+0x2e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003612:	f06f 0202 	mvn.w	r2, #2
 8003616:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003618:	2201      	movs	r2, #1
 800361a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	0799      	lsls	r1, r3, #30
 8003620:	f000 808d 	beq.w	800373e <HAL_TIM_IRQHandler+0x13e>
          htim->IC_CaptureCallback(htim);
 8003624:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
          htim->PWM_PulseFinishedCallback(htim);
 8003628:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	2300      	movs	r3, #0
 800362c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	0752      	lsls	r2, r2, #29
 8003634:	d511      	bpl.n	800365a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	0750      	lsls	r0, r2, #29
 800363a:	d50e      	bpl.n	800365a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800363c:	f06f 0204 	mvn.w	r2, #4
 8003640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003642:	2202      	movs	r2, #2
 8003644:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f413 7f40 	tst.w	r3, #768	; 0x300
 800364c:	d07e      	beq.n	800374c <HAL_TIM_IRQHandler+0x14c>
        htim->IC_CaptureCallback(htim);
 800364e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        htim->PWM_PulseFinishedCallback(htim);
 8003652:	4620      	mov	r0, r4
 8003654:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	2300      	movs	r3, #0
 8003658:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	0711      	lsls	r1, r2, #28
 8003660:	d510      	bpl.n	8003684 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	0712      	lsls	r2, r2, #28
 8003666:	d50d      	bpl.n	8003684 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003668:	f06f 0208 	mvn.w	r2, #8
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366e:	2204      	movs	r2, #4
 8003670:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	079b      	lsls	r3, r3, #30
 8003676:	d070      	beq.n	800375a <HAL_TIM_IRQHandler+0x15a>
        htim->IC_CaptureCallback(htim);
 8003678:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        htim->PWM_PulseFinishedCallback(htim);
 800367c:	4620      	mov	r0, r4
 800367e:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003680:	2300      	movs	r3, #0
 8003682:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	06d0      	lsls	r0, r2, #27
 800368a:	d511      	bpl.n	80036b0 <HAL_TIM_IRQHandler+0xb0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	06d1      	lsls	r1, r2, #27
 8003690:	d50e      	bpl.n	80036b0 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003692:	f06f 0210 	mvn.w	r2, #16
 8003696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003698:	2208      	movs	r2, #8
 800369a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f413 7f40 	tst.w	r3, #768	; 0x300
 80036a2:	d061      	beq.n	8003768 <HAL_TIM_IRQHandler+0x168>
        htim->IC_CaptureCallback(htim);
 80036a4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        htim->PWM_PulseFinishedCallback(htim);
 80036a8:	4620      	mov	r0, r4
 80036aa:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ac:	2300      	movs	r3, #0
 80036ae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	07d2      	lsls	r2, r2, #31
 80036b6:	d508      	bpl.n	80036ca <HAL_TIM_IRQHandler+0xca>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	07d0      	lsls	r0, r2, #31
 80036bc:	d505      	bpl.n	80036ca <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036be:	f06f 0201 	mvn.w	r2, #1
      htim->PeriodElapsedCallback(htim);
 80036c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036c4:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 80036c6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80036c8:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	0611      	lsls	r1, r2, #24
 80036d0:	d509      	bpl.n	80036e6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	0612      	lsls	r2, r2, #24
 80036d6:	d506      	bpl.n	80036e6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
      htim->BreakCallback(htim);
 80036dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036de:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 80036e0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80036e4:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	05d0      	lsls	r0, r2, #23
 80036ec:	d509      	bpl.n	8003702 <HAL_TIM_IRQHandler+0x102>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	0611      	lsls	r1, r2, #24
 80036f2:	d506      	bpl.n	8003702 <HAL_TIM_IRQHandler+0x102>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
      htim->Break2Callback(htim);
 80036f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036fa:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 80036fc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003700:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	0652      	lsls	r2, r2, #25
 8003708:	d509      	bpl.n	800371e <HAL_TIM_IRQHandler+0x11e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	0650      	lsls	r0, r2, #25
 800370e:	d506      	bpl.n	800371e <HAL_TIM_IRQHandler+0x11e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003710:	f06f 0240 	mvn.w	r2, #64	; 0x40
      htim->TriggerCallback(htim);
 8003714:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003716:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8003718:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800371c:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	0691      	lsls	r1, r2, #26
 8003724:	d527      	bpl.n	8003776 <HAL_TIM_IRQHandler+0x176>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	0692      	lsls	r2, r2, #26
 800372a:	d524      	bpl.n	8003776 <HAL_TIM_IRQHandler+0x176>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800372c:	f06f 0220 	mvn.w	r2, #32
      htim->CommutationCallback(htim);
 8003730:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003732:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 8003734:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
}
 8003738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      htim->CommutationCallback(htim);
 800373c:	4718      	bx	r3
          htim->OC_DelayElapsedCallback(htim);
 800373e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8003742:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003744:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003748:	4620      	mov	r0, r4
 800374a:	e76d      	b.n	8003628 <HAL_TIM_IRQHandler+0x28>
        htim->OC_DelayElapsedCallback(htim);
 800374c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003750:	4620      	mov	r0, r4
 8003752:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003754:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003758:	e77b      	b.n	8003652 <HAL_TIM_IRQHandler+0x52>
        htim->OC_DelayElapsedCallback(htim);
 800375a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800375e:	4620      	mov	r0, r4
 8003760:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003762:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003766:	e789      	b.n	800367c <HAL_TIM_IRQHandler+0x7c>
        htim->OC_DelayElapsedCallback(htim);
 8003768:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800376c:	4620      	mov	r0, r4
 800376e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003770:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003774:	e798      	b.n	80036a8 <HAL_TIM_IRQHandler+0xa8>
}
 8003776:	bd10      	pop	{r4, pc}

08003778 <HAL_TIM_RegisterCallback>:
{
 8003778:	b510      	push	{r4, lr}
  if (pCallback == NULL)
 800377a:	2a00      	cmp	r2, #0
 800377c:	f000 8092 	beq.w	80038a4 <HAL_TIM_RegisterCallback+0x12c>
  __HAL_LOCK(htim);
 8003780:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	f000 808f 	beq.w	80038a8 <HAL_TIM_RegisterCallback+0x130>
  if (htim->State == HAL_TIM_STATE_READY)
 800378a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800378e:	2c01      	cmp	r4, #1
 8003790:	b2e3      	uxtb	r3, r4
 8003792:	d158      	bne.n	8003846 <HAL_TIM_RegisterCallback+0xce>
    switch (CallbackID)
 8003794:	291b      	cmp	r1, #27
 8003796:	d811      	bhi.n	80037bc <HAL_TIM_RegisterCallback+0x44>
 8003798:	e8df f001 	tbb	[pc, r1]
 800379c:	17150e65 	.word	0x17150e65
 80037a0:	1f1d1b19 	.word	0x1f1d1b19
 80037a4:	27252321 	.word	0x27252321
 80037a8:	2f2d2b29 	.word	0x2f2d2b29
 80037ac:	3a373431 	.word	0x3a373431
 80037b0:	4643403d 	.word	0x4643403d
 80037b4:	524f4c49 	.word	0x524f4c49
        htim->Base_MspDeInitCallback               = pCallback;
 80037b8:	6442      	str	r2, [r0, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80037bc:	2200      	movs	r2, #0
 80037be:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	bd10      	pop	{r4, pc}
        htim->IC_MspInitCallback                   = pCallback;
 80037c6:	6482      	str	r2, [r0, #72]	; 0x48
        break;
 80037c8:	e7f7      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->IC_MspDeInitCallback                 = pCallback;
 80037ca:	64c2      	str	r2, [r0, #76]	; 0x4c
        break;
 80037cc:	e7f5      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->OC_MspInitCallback                   = pCallback;
 80037ce:	6502      	str	r2, [r0, #80]	; 0x50
        break;
 80037d0:	e7f3      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->OC_MspDeInitCallback                 = pCallback;
 80037d2:	6542      	str	r2, [r0, #84]	; 0x54
        break;
 80037d4:	e7f1      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->PWM_MspInitCallback                  = pCallback;
 80037d6:	6582      	str	r2, [r0, #88]	; 0x58
        break;
 80037d8:	e7ef      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->PWM_MspDeInitCallback                = pCallback;
 80037da:	65c2      	str	r2, [r0, #92]	; 0x5c
        break;
 80037dc:	e7ed      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->OnePulse_MspInitCallback             = pCallback;
 80037de:	6602      	str	r2, [r0, #96]	; 0x60
        break;
 80037e0:	e7eb      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80037e2:	6642      	str	r2, [r0, #100]	; 0x64
        break;
 80037e4:	e7e9      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->Encoder_MspInitCallback              = pCallback;
 80037e6:	6682      	str	r2, [r0, #104]	; 0x68
        break;
 80037e8:	e7e7      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->Encoder_MspDeInitCallback            = pCallback;
 80037ea:	66c2      	str	r2, [r0, #108]	; 0x6c
        break;
 80037ec:	e7e5      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->HallSensor_MspInitCallback           = pCallback;
 80037ee:	6702      	str	r2, [r0, #112]	; 0x70
        break;
 80037f0:	e7e3      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80037f2:	6742      	str	r2, [r0, #116]	; 0x74
        break;
 80037f4:	e7e1      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->PeriodElapsedCallback                = pCallback;
 80037f6:	6782      	str	r2, [r0, #120]	; 0x78
        break;
 80037f8:	e7df      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80037fa:	67c2      	str	r2, [r0, #124]	; 0x7c
        break;
 80037fc:	e7dd      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->TriggerCallback                      = pCallback;
 80037fe:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
        break;
 8003802:	e7da      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->TriggerHalfCpltCallback              = pCallback;
 8003804:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
        break;
 8003808:	e7d7      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->IC_CaptureCallback                   = pCallback;
 800380a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
        break;
 800380e:	e7d4      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003810:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
        break;
 8003814:	e7d1      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->OC_DelayElapsedCallback              = pCallback;
 8003816:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        break;
 800381a:	e7ce      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->PWM_PulseFinishedCallback            = pCallback;
 800381c:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
        break;
 8003820:	e7cb      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003822:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
        break;
 8003826:	e7c8      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->ErrorCallback                        = pCallback;
 8003828:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
        break;
 800382c:	e7c5      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->CommutationCallback                  = pCallback;
 800382e:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
        break;
 8003832:	e7c2      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->CommutationHalfCpltCallback          = pCallback;
 8003834:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
        break;
 8003838:	e7bf      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->BreakCallback                        = pCallback;
 800383a:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
        break;
 800383e:	e7bc      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
        htim->Break2Callback                       = pCallback;
 8003840:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
 8003844:	e7b9      	b.n	80037ba <HAL_TIM_RegisterCallback+0x42>
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003846:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800384a:	f004 03ff 	and.w	r3, r4, #255	; 0xff
 800384e:	bb3c      	cbnz	r4, 80038a0 <HAL_TIM_RegisterCallback+0x128>
    switch (CallbackID)
 8003850:	290d      	cmp	r1, #13
 8003852:	d825      	bhi.n	80038a0 <HAL_TIM_RegisterCallback+0x128>
 8003854:	e8df f001 	tbb	[pc, r1]
 8003858:	0e0c0a07 	.word	0x0e0c0a07
 800385c:	16141210 	.word	0x16141210
 8003860:	1e1c1a18 	.word	0x1e1c1a18
 8003864:	2220      	.short	0x2220
  HAL_StatusTypeDef status = HAL_OK;
 8003866:	460b      	mov	r3, r1
        htim->Base_MspInitCallback         = pCallback;
 8003868:	6402      	str	r2, [r0, #64]	; 0x40
        break;
 800386a:	e7a7      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->Base_MspDeInitCallback       = pCallback;
 800386c:	6442      	str	r2, [r0, #68]	; 0x44
        break;
 800386e:	e7a5      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->IC_MspInitCallback           = pCallback;
 8003870:	6482      	str	r2, [r0, #72]	; 0x48
        break;
 8003872:	e7a3      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->IC_MspDeInitCallback         = pCallback;
 8003874:	64c2      	str	r2, [r0, #76]	; 0x4c
        break;
 8003876:	e7a1      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->OC_MspInitCallback           = pCallback;
 8003878:	6502      	str	r2, [r0, #80]	; 0x50
        break;
 800387a:	e79f      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->OC_MspDeInitCallback         = pCallback;
 800387c:	6542      	str	r2, [r0, #84]	; 0x54
        break;
 800387e:	e79d      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->PWM_MspInitCallback          = pCallback;
 8003880:	6582      	str	r2, [r0, #88]	; 0x58
        break;
 8003882:	e79b      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->PWM_MspDeInitCallback        = pCallback;
 8003884:	65c2      	str	r2, [r0, #92]	; 0x5c
        break;
 8003886:	e799      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->OnePulse_MspInitCallback     = pCallback;
 8003888:	6602      	str	r2, [r0, #96]	; 0x60
        break;
 800388a:	e797      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800388c:	6642      	str	r2, [r0, #100]	; 0x64
        break;
 800388e:	e795      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->Encoder_MspInitCallback      = pCallback;
 8003890:	6682      	str	r2, [r0, #104]	; 0x68
        break;
 8003892:	e793      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003894:	66c2      	str	r2, [r0, #108]	; 0x6c
        break;
 8003896:	e791      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->HallSensor_MspInitCallback   = pCallback;
 8003898:	6702      	str	r2, [r0, #112]	; 0x70
        break;
 800389a:	e78f      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
        htim->HallSensor_MspDeInitCallback = pCallback;
 800389c:	6742      	str	r2, [r0, #116]	; 0x74
        break;
 800389e:	e78d      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
    switch (CallbackID)
 80038a0:	2301      	movs	r3, #1
 80038a2:	e78b      	b.n	80037bc <HAL_TIM_RegisterCallback+0x44>
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e78c      	b.n	80037c2 <HAL_TIM_RegisterCallback+0x4a>
  __HAL_LOCK(htim);
 80038a8:	2302      	movs	r3, #2
 80038aa:	e78a      	b.n	80037c2 <HAL_TIM_RegisterCallback+0x4a>

080038ac <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ac:	4a30      	ldr	r2, [pc, #192]	; (8003970 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80038ae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b0:	4290      	cmp	r0, r2
 80038b2:	d012      	beq.n	80038da <TIM_Base_SetConfig+0x2e>
 80038b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038b8:	d00f      	beq.n	80038da <TIM_Base_SetConfig+0x2e>
 80038ba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80038be:	4290      	cmp	r0, r2
 80038c0:	d00b      	beq.n	80038da <TIM_Base_SetConfig+0x2e>
 80038c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038c6:	4290      	cmp	r0, r2
 80038c8:	d007      	beq.n	80038da <TIM_Base_SetConfig+0x2e>
 80038ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038ce:	4290      	cmp	r0, r2
 80038d0:	d003      	beq.n	80038da <TIM_Base_SetConfig+0x2e>
 80038d2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80038d6:	4290      	cmp	r0, r2
 80038d8:	d119      	bne.n	800390e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80038da:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038e0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e2:	4a23      	ldr	r2, [pc, #140]	; (8003970 <TIM_Base_SetConfig+0xc4>)
 80038e4:	4290      	cmp	r0, r2
 80038e6:	d029      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 80038e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038ec:	d026      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 80038ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80038f2:	4290      	cmp	r0, r2
 80038f4:	d022      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 80038f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038fa:	4290      	cmp	r0, r2
 80038fc:	d01e      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 80038fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003902:	4290      	cmp	r0, r2
 8003904:	d01a      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 8003906:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800390a:	4290      	cmp	r0, r2
 800390c:	d016      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 800390e:	4a19      	ldr	r2, [pc, #100]	; (8003974 <TIM_Base_SetConfig+0xc8>)
 8003910:	4290      	cmp	r0, r2
 8003912:	d013      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 8003914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003918:	4290      	cmp	r0, r2
 800391a:	d00f      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 800391c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003920:	4290      	cmp	r0, r2
 8003922:	d00b      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 8003924:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003928:	4290      	cmp	r0, r2
 800392a:	d007      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 800392c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003930:	4290      	cmp	r0, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0x90>
 8003934:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003938:	4290      	cmp	r0, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800393c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003940:	68ca      	ldr	r2, [r1, #12]
 8003942:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003944:	694a      	ldr	r2, [r1, #20]
 8003946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800394a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800394c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800394e:	688b      	ldr	r3, [r1, #8]
 8003950:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003952:	680b      	ldr	r3, [r1, #0]
 8003954:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <TIM_Base_SetConfig+0xc4>)
 8003958:	4298      	cmp	r0, r3
 800395a:	d003      	beq.n	8003964 <TIM_Base_SetConfig+0xb8>
 800395c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003960:	4298      	cmp	r0, r3
 8003962:	d101      	bne.n	8003968 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003964:	690b      	ldr	r3, [r1, #16]
 8003966:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003968:	2301      	movs	r3, #1
 800396a:	6143      	str	r3, [r0, #20]
}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40010000 	.word	0x40010000
 8003974:	40014000 	.word	0x40014000

08003978 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003978:	6a03      	ldr	r3, [r0, #32]
 800397a:	f023 0310 	bic.w	r3, r3, #16
{
 800397e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003980:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003982:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003984:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003986:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003988:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800398e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003992:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003996:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800399a:	688d      	ldr	r5, [r1, #8]
 800399c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a0:	4d10      	ldr	r5, [pc, #64]	; (80039e4 <TIM_OC2_SetConfig+0x6c>)
 80039a2:	42a8      	cmp	r0, r5
 80039a4:	d003      	beq.n	80039ae <TIM_OC2_SetConfig+0x36>
 80039a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80039aa:	42a8      	cmp	r0, r5
 80039ac:	d114      	bne.n	80039d8 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039ae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b8:	4d0a      	ldr	r5, [pc, #40]	; (80039e4 <TIM_OC2_SetConfig+0x6c>)
 80039ba:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80039bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c0:	d003      	beq.n	80039ca <TIM_OC2_SetConfig+0x52>
 80039c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80039c6:	42a8      	cmp	r0, r5
 80039c8:	d106      	bne.n	80039d8 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039ce:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80039d2:	4335      	orrs	r5, r6
 80039d4:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80039d8:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80039da:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80039dc:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80039de:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80039e0:	6203      	str	r3, [r0, #32]
}
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	40010000 	.word	0x40010000

080039e8 <HAL_TIM_PWM_ConfigChannel>:
{
 80039e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80039ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80039ee:	4604      	mov	r4, r0
 80039f0:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d012      	beq.n	8003a1c <HAL_TIM_PWM_ConfigChannel+0x34>
 80039f6:	2301      	movs	r3, #1
  switch (Channel)
 80039f8:	2a0c      	cmp	r2, #12
  htim->State = HAL_TIM_STATE_BUSY;
 80039fa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80039fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003a02:	d054      	beq.n	8003aae <HAL_TIM_PWM_ConfigChannel+0xc6>
 8003a04:	d80b      	bhi.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x36>
 8003a06:	2a04      	cmp	r2, #4
 8003a08:	d02f      	beq.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x82>
 8003a0a:	2a08      	cmp	r2, #8
 8003a0c:	d03e      	beq.n	8003a8c <HAL_TIM_PWM_ConfigChannel+0xa4>
 8003a0e:	b1da      	cbz	r2, 8003a48 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003a12:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a18:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003a1c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003a1e:	2a10      	cmp	r2, #16
 8003a20:	d056      	beq.n	8003ad0 <HAL_TIM_PWM_ConfigChannel+0xe8>
 8003a22:	2a14      	cmp	r2, #20
 8003a24:	d1f4      	bne.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	f7ff fd84 	bl	8003534 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a2c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a2e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a46:	e052      	b.n	8003aee <HAL_TIM_PWM_ConfigChannel+0x106>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a48:	6820      	ldr	r0, [r4, #0]
 8003a4a:	f7ff fcb7 	bl	80033bc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a4e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a50:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a52:	699a      	ldr	r2, [r3, #24]
 8003a54:	f042 0208 	orr.w	r2, r2, #8
 8003a58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	f022 0204 	bic.w	r2, r2, #4
 8003a60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a66:	619a      	str	r2, [r3, #24]
      break;
 8003a68:	e7d2      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a6a:	6820      	ldr	r0, [r4, #0]
 8003a6c:	f7ff ff84 	bl	8003978 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a70:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a72:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a8a:	e7ec      	b.n	8003a66 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a8c:	6820      	ldr	r0, [r4, #0]
 8003a8e:	f7ff fcc9 	bl	8003424 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a92:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a94:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	f042 0208 	orr.w	r2, r2, #8
 8003a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	f022 0204 	bic.w	r2, r2, #4
 8003aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aaa:	61da      	str	r2, [r3, #28]
      break;
 8003aac:	e7b0      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aae:	6820      	ldr	r0, [r4, #0]
 8003ab0:	f7ff fcf0 	bl	8003494 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ab4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ab6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003abe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ace:	e7ec      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	f7ff fd07 	bl	80034e4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ad6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ad8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ada:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003adc:	f042 0208 	orr.w	r2, r2, #8
 8003ae0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ae2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ae4:	f022 0204 	bic.w	r2, r2, #4
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003aea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aec:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003af0:	e78e      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x28>
	...

08003af4 <TIM_TI1_SetConfig>:
{
 8003af4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af6:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003af8:	4e1a      	ldr	r6, [pc, #104]	; (8003b64 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afa:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003afe:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b00:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b02:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003b04:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b06:	d029      	beq.n	8003b5c <TIM_TI1_SetConfig+0x68>
 8003b08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b0c:	d026      	beq.n	8003b5c <TIM_TI1_SetConfig+0x68>
 8003b0e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8003b12:	42b0      	cmp	r0, r6
 8003b14:	d022      	beq.n	8003b5c <TIM_TI1_SetConfig+0x68>
 8003b16:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003b1a:	42b0      	cmp	r0, r6
 8003b1c:	d01e      	beq.n	8003b5c <TIM_TI1_SetConfig+0x68>
 8003b1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003b22:	42b0      	cmp	r0, r6
 8003b24:	d01a      	beq.n	8003b5c <TIM_TI1_SetConfig+0x68>
 8003b26:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8003b2a:	42b0      	cmp	r0, r6
 8003b2c:	d016      	beq.n	8003b5c <TIM_TI1_SetConfig+0x68>
 8003b2e:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8003b32:	42b0      	cmp	r0, r6
 8003b34:	d012      	beq.n	8003b5c <TIM_TI1_SetConfig+0x68>
 8003b36:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8003b3a:	42b0      	cmp	r0, r6
 8003b3c:	d00e      	beq.n	8003b5c <TIM_TI1_SetConfig+0x68>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b3e:	f044 0201 	orr.w	r2, r4, #1
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b42:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b48:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	431a      	orrs	r2, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b50:	f025 030a 	bic.w	r3, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b54:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 8003b56:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b58:	6201      	str	r1, [r0, #32]
}
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b5c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8003b60:	4322      	orrs	r2, r4
 8003b62:	e7ee      	b.n	8003b42 <TIM_TI1_SetConfig+0x4e>
 8003b64:	40010000 	.word	0x40010000

08003b68 <HAL_TIM_IC_ConfigChannel>:
{
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003b6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003b6e:	4604      	mov	r4, r0
 8003b70:	460e      	mov	r6, r1
 8003b72:	4615      	mov	r5, r2
  __HAL_LOCK(htim);
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	f04f 0002 	mov.w	r0, #2
 8003b7a:	d01a      	beq.n	8003bb2 <HAL_TIM_IC_ConfigChannel+0x4a>
 8003b7c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    TIM_TI1_SetConfig(htim->Instance,
 8003b82:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003b84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    TIM_TI1_SetConfig(htim->Instance,
 8003b88:	68f3      	ldr	r3, [r6, #12]
 8003b8a:	e9d1 1200 	ldrd	r1, r2, [r1]
  if (Channel == TIM_CHANNEL_1)
 8003b8e:	b98d      	cbnz	r5, 8003bb4 <HAL_TIM_IC_ConfigChannel+0x4c>
    TIM_TI1_SetConfig(htim->Instance,
 8003b90:	f7ff ffb0 	bl	8003af4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b94:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b96:	68b1      	ldr	r1, [r6, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	f022 020c 	bic.w	r2, r2, #12
 8003b9e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003ba6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003ba8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003baa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003bae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8003bb4:	2d04      	cmp	r5, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bb6:	68b6      	ldr	r6, [r6, #8]
  else if (Channel == TIM_CHANNEL_2)
 8003bb8:	d122      	bne.n	8003c00 <HAL_TIM_IC_ConfigChannel+0x98>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bba:	6a05      	ldr	r5, [r0, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bbc:	0109      	lsls	r1, r1, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bbe:	f025 0510 	bic.w	r5, r5, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bc2:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc6:	6205      	str	r5, [r0, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bc8:	031d      	lsls	r5, r3, #12
  tmpccmr1 = TIMx->CCMR1;
 8003bca:	6987      	ldr	r7, [r0, #24]
  tmpccer = TIMx->CCER;
 8003bcc:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bd0:	b2ad      	uxth	r5, r5
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003bd2:	f427 7c40 	bic.w	ip, r7, #768	; 0x300
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bd6:	f02e 0ea0 	bic.w	lr, lr, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003bda:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bde:	ea41 010e 	orr.w	r1, r1, lr
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003be2:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003be6:	ea45 050c 	orr.w	r5, r5, ip
  TIMx->CCMR1 = tmpccmr1 ;
 8003bea:	6185      	str	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8003bec:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003bee:	6983      	ldr	r3, [r0, #24]
 8003bf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003bf4:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bf6:	6983      	ldr	r3, [r0, #24]
 8003bf8:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 8003bfc:	6186      	str	r6, [r0, #24]
 8003bfe:	e7d2      	b.n	8003ba6 <HAL_TIM_IC_ConfigChannel+0x3e>
  else if (Channel == TIM_CHANNEL_3)
 8003c00:	2d08      	cmp	r5, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c02:	6a05      	ldr	r5, [r0, #32]
  else if (Channel == TIM_CHANNEL_3)
 8003c04:	d11c      	bne.n	8003c40 <HAL_TIM_IC_ConfigChannel+0xd8>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c06:	f425 7580 	bic.w	r5, r5, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c0a:	011b      	lsls	r3, r3, #4
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c0c:	0209      	lsls	r1, r1, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c0e:	6205      	str	r5, [r0, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c10:	b2db      	uxtb	r3, r3
  tmpccmr2 = TIMx->CCMR2;
 8003c12:	69c7      	ldr	r7, [r0, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c14:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer = TIMx->CCER;
 8003c18:	6a05      	ldr	r5, [r0, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c1a:	f027 0703 	bic.w	r7, r7, #3
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c1e:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 8003c22:	4317      	orrs	r7, r2
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c24:	4329      	orrs	r1, r5
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c26:	f027 07f0 	bic.w	r7, r7, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c2a:	431f      	orrs	r7, r3
  TIMx->CCMR2 = tmpccmr2;
 8003c2c:	61c7      	str	r7, [r0, #28]
  TIMx->CCER = tmpccer;
 8003c2e:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c30:	69c3      	ldr	r3, [r0, #28]
 8003c32:	f023 030c 	bic.w	r3, r3, #12
 8003c36:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c38:	69c3      	ldr	r3, [r0, #28]
 8003c3a:	431e      	orrs	r6, r3
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c3c:	61c6      	str	r6, [r0, #28]
 8003c3e:	e7b2      	b.n	8003ba6 <HAL_TIM_IC_ConfigChannel+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c40:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c44:	031b      	lsls	r3, r3, #12
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c46:	0309      	lsls	r1, r1, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c48:	6205      	str	r5, [r0, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c4a:	b29b      	uxth	r3, r3
  tmpccmr2 = TIMx->CCMR2;
 8003c4c:	69c5      	ldr	r5, [r0, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c4e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer = TIMx->CCER;
 8003c52:	6a07      	ldr	r7, [r0, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c54:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c58:	f427 4720 	bic.w	r7, r7, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c5c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c60:	4339      	orrs	r1, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c62:	f425 4570 	bic.w	r5, r5, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c66:	432b      	orrs	r3, r5
  TIMx->CCMR2 = tmpccmr2;
 8003c68:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003c6a:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c6c:	69c3      	ldr	r3, [r0, #28]
 8003c6e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c72:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c74:	69c3      	ldr	r3, [r0, #28]
 8003c76:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 8003c7a:	e7df      	b.n	8003c3c <HAL_TIM_IC_ConfigChannel+0xd4>

08003c7c <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <TIM_ResetCallback+0x54>)
 8003c7e:	6783      	str	r3, [r0, #120]	; 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 8003c80:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <TIM_ResetCallback+0x58>)
 8003c82:	67c3      	str	r3, [r0, #124]	; 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 8003c84:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <TIM_ResetCallback+0x5c>)
 8003c86:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <TIM_ResetCallback+0x60>)
 8003c8c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 8003c90:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <TIM_ResetCallback+0x64>)
 8003c92:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <TIM_ResetCallback+0x68>)
 8003c98:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 8003c9c:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <TIM_ResetCallback+0x6c>)
 8003c9e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <TIM_ResetCallback+0x70>)
 8003ca4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <TIM_ResetCallback+0x74>)
 8003caa:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <TIM_ResetCallback+0x78>)
 8003cb0:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 8003cb4:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <TIM_ResetCallback+0x7c>)
 8003cb6:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <TIM_ResetCallback+0x80>)
 8003cbc:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <TIM_ResetCallback+0x84>)
 8003cc2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <TIM_ResetCallback+0x88>)
 8003cc8:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	08003587 	.word	0x08003587
 8003cd4:	08003589 	.word	0x08003589
 8003cd8:	08003595 	.word	0x08003595
 8003cdc:	08003597 	.word	0x08003597
 8003ce0:	0800358d 	.word	0x0800358d
 8003ce4:	0800358f 	.word	0x0800358f
 8003ce8:	0800358b 	.word	0x0800358b
 8003cec:	08003591 	.word	0x08003591
 8003cf0:	08003593 	.word	0x08003593
 8003cf4:	08003599 	.word	0x08003599
 8003cf8:	08003edd 	.word	0x08003edd
 8003cfc:	08003edf 	.word	0x08003edf
 8003d00:	08003ee1 	.word	0x08003ee1
 8003d04:	08003ee3 	.word	0x08003ee3

08003d08 <HAL_TIM_Base_Init>:
{
 8003d08:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	b1d8      	cbz	r0, 8003d46 <HAL_TIM_Base_Init+0x3e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d16:	b953      	cbnz	r3, 8003d2e <HAL_TIM_Base_Init+0x26>
    htim->Lock = HAL_UNLOCKED;
 8003d18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 8003d1c:	f7ff ffae 	bl	8003c7c <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 8003d20:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003d22:	b90b      	cbnz	r3, 8003d28 <HAL_TIM_Base_Init+0x20>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_TIM_Base_Init+0x44>)
 8003d26:	6403      	str	r3, [r0, #64]	; 0x40
    htim->Base_MspInitCallback(htim);
 8003d28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d30:	6820      	ldr	r0, [r4, #0]
 8003d32:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d38:	f7ff fdb8 	bl	80038ac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	2301      	movs	r3, #1
  return HAL_OK;
 8003d3e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003d44:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d46:	2001      	movs	r0, #1
 8003d48:	e7fc      	b.n	8003d44 <HAL_TIM_Base_Init+0x3c>
 8003d4a:	bf00      	nop
 8003d4c:	08006635 	.word	0x08006635

08003d50 <HAL_TIM_PWM_Init>:
{
 8003d50:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003d52:	4604      	mov	r4, r0
 8003d54:	b1d8      	cbz	r0, 8003d8e <HAL_TIM_PWM_Init+0x3e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d5e:	b953      	cbnz	r3, 8003d76 <HAL_TIM_PWM_Init+0x26>
    htim->Lock = HAL_UNLOCKED;
 8003d60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 8003d64:	f7ff ff8a 	bl	8003c7c <TIM_ResetCallback>
    if (htim->PWM_MspInitCallback == NULL)
 8003d68:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003d6a:	b90b      	cbnz	r3, 8003d70 <HAL_TIM_PWM_Init+0x20>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_TIM_PWM_Init+0x44>)
 8003d6e:	6583      	str	r3, [r0, #88]	; 0x58
    htim->PWM_MspInitCallback(htim);
 8003d70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d72:	4620      	mov	r0, r4
 8003d74:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8003d76:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d80:	f7ff fd94 	bl	80038ac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	2301      	movs	r3, #1
  return HAL_OK;
 8003d86:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003d8c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d8e:	2001      	movs	r0, #1
 8003d90:	e7fc      	b.n	8003d8c <HAL_TIM_PWM_Init+0x3c>
 8003d92:	bf00      	nop
 8003d94:	080065a1 	.word	0x080065a1

08003d98 <HAL_TIM_IC_Init>:
{
 8003d98:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	b1d8      	cbz	r0, 8003dd6 <HAL_TIM_IC_Init+0x3e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003da2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003da6:	b953      	cbnz	r3, 8003dbe <HAL_TIM_IC_Init+0x26>
    htim->Lock = HAL_UNLOCKED;
 8003da8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 8003dac:	f7ff ff66 	bl	8003c7c <TIM_ResetCallback>
    if (htim->IC_MspInitCallback == NULL)
 8003db0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003db2:	b90b      	cbnz	r3, 8003db8 <HAL_TIM_IC_Init+0x20>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_TIM_IC_Init+0x44>)
 8003db6:	6483      	str	r3, [r0, #72]	; 0x48
    htim->IC_MspInitCallback(htim);
 8003db8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbe:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc8:	f7ff fd70 	bl	80038ac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	2301      	movs	r3, #1
  return HAL_OK;
 8003dce:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003dd4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	e7fc      	b.n	8003dd4 <HAL_TIM_IC_Init+0x3c>
 8003dda:	bf00      	nop
 8003ddc:	08003585 	.word	0x08003585

08003de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	f04f 0302 	mov.w	r3, #2
 8003dec:	d01f      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dee:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003df0:	4d10      	ldr	r5, [pc, #64]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003df2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003df6:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8003df8:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003dfa:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8003dfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e02:	42aa      	cmp	r2, r5
 8003e04:	d103      	bne.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e0a:	684d      	ldr	r5, [r1, #4]
 8003e0c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e0e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e14:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003e16:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e1a:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e1c:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e1e:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8003e22:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003e2e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003e30:	bd30      	pop	{r4, r5, pc}
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000

08003e38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e38:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d038      	beq.n	8003eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e42:	68cb      	ldr	r3, [r1, #12]
 8003e44:	688a      	ldr	r2, [r1, #8]
 8003e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e4a:	4c1b      	ldr	r4, [pc, #108]	; (8003eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e4e:	684a      	ldr	r2, [r1, #4]
 8003e50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e56:	680a      	ldr	r2, [r1, #0]
 8003e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e5c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e5e:	690a      	ldr	r2, [r1, #16]
 8003e60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e64:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e66:	694a      	ldr	r2, [r1, #20]
 8003e68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e6c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e6e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e76:	698a      	ldr	r2, [r1, #24]
 8003e78:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003e7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e80:	6802      	ldr	r2, [r0, #0]
 8003e82:	42a2      	cmp	r2, r4
 8003e84:	d003      	beq.n	8003e8e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 8003e86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003e8a:	42a2      	cmp	r2, r4
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e8e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003e90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e94:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e98:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e9a:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003ea2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ea8:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003eb0:	4618      	mov	r0, r3
}
 8003eb2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003eb4:	2002      	movs	r0, #2
 8003eb6:	e7fc      	b.n	8003eb2 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 8003eb8:	40010000 	.word	0x40010000

08003ebc <HAL_TIMEx_RemapConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
  __HAL_LOCK(htim);
 8003ebc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d009      	beq.n	8003ed8 <HAL_TIMEx_RemapConfig+0x1c>
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
 8003ec4:	6803      	ldr	r3, [r0, #0]
 8003ec6:	6519      	str	r1, [r3, #80]	; 0x50

  htim->State = HAL_TIM_STATE_READY;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ed8:	2002      	movs	r0, #2
}
 8003eda:	4770      	bx	lr

08003edc <HAL_TIMEx_CommutCallback>:
 8003edc:	4770      	bx	lr

08003ede <HAL_TIMEx_CommutHalfCpltCallback>:
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIMEx_BreakCallback>:
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_TIMEx_Break2Callback>:
 8003ee2:	4770      	bx	lr

08003ee4 <SwapBytes>:
///////////////////////////////////////////////////////////////////////////////
// Uncategorized:

uint16_t SwapBytes(uint16_t Value)
{
  return (Value >> 8) | ((Value & 0xFF) << 8);
 8003ee4:	ba40      	rev16	r0, r0
}
 8003ee6:	b280      	uxth	r0, r0
 8003ee8:	4770      	bx	lr

08003eea <Min_int32>:
}

int32_t Min_int32(int32_t A, int32_t B)
{
    return A < B ? A : B;
}
 8003eea:	4288      	cmp	r0, r1
 8003eec:	bfa8      	it	ge
 8003eee:	4608      	movge	r0, r1
 8003ef0:	4770      	bx	lr

08003ef2 <Clamp_uint16>:
///////////////////////////////////////////////////////////////////////////////
// Clamp:

uint16_t Clamp_uint16(uint16_t Value, uint16_t MinValue , uint16_t MaxValue)
{
  if (Value < MinValue)
 8003ef2:	4288      	cmp	r0, r1
 8003ef4:	bf38      	it	cc
 8003ef6:	4608      	movcc	r0, r1
    Value = MinValue;
  if (Value > MaxValue)
    Value = MaxValue;
  return Value;
}
 8003ef8:	4290      	cmp	r0, r2
 8003efa:	bf28      	it	cs
 8003efc:	4610      	movcs	r0, r2
 8003efe:	4770      	bx	lr

08003f00 <Clamp_float>:
  return Value;
}

float Clamp_float(float Value, float MinValue, float MaxValue)
{
  if (Value < MinValue)
 8003f00:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8003f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f08:	d405      	bmi.n	8003f16 <Clamp_float+0x16>
    Value = MinValue;
  else if (Value > MaxValue)
 8003f0a:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8003f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f12:	fe71 0a00 	vselgt.f32	s1, s2, s0
    Value = MaxValue;

  return Value;
}
 8003f16:	eeb0 0a60 	vmov.f32	s0, s1
 8003f1a:	4770      	bx	lr

08003f1c <Wrap_int>:
///////////////////////////////////////////////////////////////////////////////
// Wrap:

int Wrap_int(int Value, int Size)
{
  if (Value < 0)
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	da01      	bge.n	8003f24 <Wrap_int+0x8>
    Value += Size;
 8003f20:	4408      	add	r0, r1
 8003f22:	4770      	bx	lr
  else if (Value >= Size)
 8003f24:	4288      	cmp	r0, r1
    Value -= Size;
 8003f26:	bfa8      	it	ge
 8003f28:	1a40      	subge	r0, r0, r1

  return Value;
}
 8003f2a:	4770      	bx	lr

08003f2c <CubicInterpolate>:
double CubicInterpolate(double Value0, double Value1, double Value2, double Value3, double InterpolationParameter)
{
  double C0, C1, C2, C3;
  double InterpolationCoefficient;

  C3 = (((Value3 - Value0) - 3.0 * (Value1 - Value0)) - 3.0 * ((Value2 - Value0) - 2.0 * (Value1-Value0))) / 6.0;
 8003f2c:	ee31 1b40 	vsub.f64	d1, d1, d0
 8003f30:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003f34:	ee32 7b40 	vsub.f64	d7, d2, d0
 8003f38:	ee33 3b40 	vsub.f64	d3, d3, d0
 8003f3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003f40:	eea1 3b46 	vfms.f64	d3, d1, d6
 8003f44:	eea1 7b45 	vfms.f64	d7, d1, d5
 8003f48:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8003f4c:	eea7 3b46 	vfms.f64	d3, d7, d6
 8003f50:	ee83 6b05 	vdiv.f64	d6, d3, d5
  C2 = ((Value2 - Value0) - 2.0 * (Value1 - Value0) - 6.0 * C3) / 2.0;
 8003f54:	eea6 7b45 	vfms.f64	d7, d6, d5
 8003f58:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
  C1 = Value1 - Value0 - C3 - C2;
 8003f5c:	ee31 1b46 	vsub.f64	d1, d1, d6
  C2 = ((Value2 - Value0) - 2.0 * (Value1 - Value0) - 6.0 * C3) / 2.0;
 8003f60:	ee27 7b05 	vmul.f64	d7, d7, d5
  C0 = Value0;

  InterpolationCoefficient = 1 + InterpolationParameter; // Interpolate the second of the three segments.
 8003f64:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003f68:	ee34 4b05 	vadd.f64	d4, d4, d5
  C1 = Value1 - Value0 - C3 - C2;
 8003f6c:	ee31 1b47 	vsub.f64	d1, d1, d7
  return Value * Value * Value;
 8003f70:	ee24 5b04 	vmul.f64	d5, d4, d4
 8003f74:	ee24 3b05 	vmul.f64	d3, d4, d5

  return C3 * Cube(InterpolationCoefficient) + C2 * Sqr(InterpolationCoefficient) + C1 * InterpolationCoefficient + C0;
 8003f78:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003f7c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8003f80:	eea1 7b04 	vfma.f64	d7, d1, d4
}
 8003f84:	ee37 0b00 	vadd.f64	d0, d7, d0
 8003f88:	4770      	bx	lr
	...

08003f8c <ILI9341_Write8>:
//
//  return readvalue;
//}

static void ILI9341_Write8(uint8_t Value)
{
 8003f8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t ReadData;

  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8003f8e:	2364      	movs	r3, #100	; 0x64
{
 8003f90:	f88d 000f 	strb.w	r0, [sp, #15]
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &Value, &ReadData, 1, 100) != HAL_OK)
 8003f94:	4807      	ldr	r0, [pc, #28]	; (8003fb4 <ILI9341_Write8+0x28>)
 8003f96:	f10d 0217 	add.w	r2, sp, #23
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	f10d 010f 	add.w	r1, sp, #15
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	6800      	ldr	r0, [r0, #0]
 8003fa4:	f7ff f80d 	bl	8002fc2 <HAL_SPI_TransmitReceive>
 8003fa8:	b108      	cbz	r0, 8003fae <ILI9341_Write8+0x22>
    Error_Handler();
 8003faa:	f001 fe89 	bl	8005cc0 <Error_Handler>
}
 8003fae:	b007      	add	sp, #28
 8003fb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fb4:	200004a4 	.word	0x200004a4

08003fb8 <ILI9341_Write16>:
//  phspi->Init.DataSize = SPI_DATASIZE_8BIT;
//}

static void ILI9341_Write16(uint16_t Value)
// MSB first.
{
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	4604      	mov	r4, r0
  ILI9341_Write8(Value >> 8);
 8003fbc:	0a00      	lsrs	r0, r0, #8
 8003fbe:	f7ff ffe5 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(Value);
 8003fc2:	b2e0      	uxtb	r0, r4
}
 8003fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ILI9341_Write8(Value);
 8003fc8:	f7ff bfe0 	b.w	8003f8c <ILI9341_Write8>

08003fcc <ILI9341_WriteCommand>:
  ILI9341_Write16(Value >> 16);
  ILI9341_Write16(Value);
}

static void ILI9341_WriteCommand(int8_t Value)
{
 8003fcc:	b538      	push	{r3, r4, r5, lr}
  ILI9341_DC_Low();
 8003fce:	4d08      	ldr	r5, [pc, #32]	; (8003ff0 <ILI9341_WriteCommand+0x24>)
{
 8003fd0:	4604      	mov	r4, r0
  ILI9341_DC_Low();
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2104      	movs	r1, #4
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f7fc fea6 	bl	8000d28 <HAL_GPIO_WritePin>
  ILI9341_Write8(Value);
 8003fdc:	b2e0      	uxtb	r0, r4
 8003fde:	f7ff ffd5 	bl	8003f8c <ILI9341_Write8>
  ILI9341_DC_High();
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	2104      	movs	r1, #4
}
 8003fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ILI9341_DC_High();
 8003fec:	f7fc be9c 	b.w	8000d28 <HAL_GPIO_WritePin>
 8003ff0:	40020800 	.word	0x40020800

08003ff4 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0>:
    ILI9341_DrawPixel_ToBackBuffer(X, Y, Color);
  else
    ILI9341_DrawPixel_ToDisplay(X, Y, Color, UseCS);
}

static void ILI9341_DrawPixels_MSBFirst_ToDisplay(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
 8003ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	4614      	mov	r4, r2
// Supplied pixel data must be byte swapped i.e. MSB first.
{
  if ((Width == 0) || (Height == 0))
    return;

  ILI9341_CSX_Low();
 8003ffe:	2102      	movs	r1, #2
 8004000:	2200      	movs	r2, #0
 8004002:	4829      	ldr	r0, [pc, #164]	; (80040a8 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb4>)
static void ILI9341_DrawPixels_MSBFirst_ToDisplay(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
 8004004:	461f      	mov	r7, r3
 8004006:	f8dd 8020 	ldr.w	r8, [sp, #32]
  ILI9341_CSX_Low();
 800400a:	f7fc fe8d 	bl	8000d28 <HAL_GPIO_WritePin>

  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 800400e:	202a      	movs	r0, #42	; 0x2a
 8004010:	f7ff ffdc 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 8004014:	4630      	mov	r0, r6
 8004016:	f7ff ffcf 	bl	8003fb8 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 800401a:	1e60      	subs	r0, r4, #1
 800401c:	4430      	add	r0, r6
 800401e:	b280      	uxth	r0, r0
 8004020:	f7ff ffca 	bl	8003fb8 <ILI9341_Write16>

  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 8004024:	202b      	movs	r0, #43	; 0x2b
 8004026:	f7ff ffd1 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 800402a:	4628      	mov	r0, r5
 800402c:	f7ff ffc4 	bl	8003fb8 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 8004030:	1e78      	subs	r0, r7, #1
 8004032:	4428      	add	r0, r5
 8004034:	b280      	uxth	r0, r0
 8004036:	f7ff ffbf 	bl	8003fb8 <ILI9341_Write16>

  ILI9341_WriteCommand(0x2C); // Memory write.
 800403a:	202c      	movs	r0, #44	; 0x2c
 800403c:	f7ff ffc6 	bl	8003fcc <ILI9341_WriteCommand>
  uint32_t NumBytes = Width * Height * sizeof(uint16_t);
 8004040:	fb07 f204 	mul.w	r2, r7, r4
 8004044:	0052      	lsls	r2, r2, #1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004046:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 800404a:	4818      	ldr	r0, [pc, #96]	; (80040ac <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb8>)
 800404c:	eb08 0102 	add.w	r1, r8, r2
    while (op_size > 0) {
 8004050:	2a00      	cmp	r2, #0
 8004052:	eba1 0302 	sub.w	r3, r1, r2
 8004056:	dc22      	bgt.n	800409e <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xaa>
 8004058:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800405c:	f3bf 8f6f 	isb	sy
#if __CORTEX_M >= 7
    SCB_CleanDCache_by_Addr((uint32_t *)pPixels, NumBytes);
#endif
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
  {
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8004060:	0064      	lsls	r4, r4, #1
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8004062:	2500      	movs	r5, #0
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*)pPixels, Width * sizeof(uint16_t)) != HAL_OK)
 8004064:	4e12      	ldr	r6, [pc, #72]	; (80040b0 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xbc>)
 8004066:	fa1f f984 	uxth.w	r9, r4
 800406a:	464a      	mov	r2, r9
 800406c:	4641      	mov	r1, r8
 800406e:	6830      	ldr	r0, [r6, #0]
 8004070:	f7ff f8d4 	bl	800321c <HAL_SPI_Transmit_DMA>
 8004074:	b108      	cbz	r0, 800407a <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x86>
      Error_Handler();
 8004076:	f001 fe23 	bl	8005cc0 <Error_Handler>
    // Alternative:   if (HAL_SPI_Transmit(phspi, (uint8_t*) pPixels, Width * sizeof(uint16_t)), 1000) != HAL_OK)
    pPixels += Width;
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 800407a:	6833      	ldr	r3, [r6, #0]
    pPixels += Width;
 800407c:	44a0      	add	r8, r4
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 800407e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004080:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8004084:	2b02      	cmp	r3, #2
 8004086:	d0fb      	beq.n	8004080 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x8c>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8004088:	3501      	adds	r5, #1
 800408a:	b22d      	sxth	r5, r5
 800408c:	42af      	cmp	r7, r5
 800408e:	dcec      	bgt.n	800406a <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x76>
  }

  ILI9341_CSX_High();
 8004090:	2201      	movs	r2, #1
 8004092:	2102      	movs	r1, #2
 8004094:	4804      	ldr	r0, [pc, #16]	; (80040a8 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0xb4>)
}
 8004096:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ILI9341_CSX_High();
 800409a:	f7fc be45 	b.w	8000d28 <HAL_GPIO_WritePin>
      op_size -=           linesize;
 800409e:	3a20      	subs	r2, #32
      SCB->DCCMVAC = op_addr;
 80040a0:	f8c0 3268 	str.w	r3, [r0, #616]	; 0x268
      op_size -=           linesize;
 80040a4:	e7d4      	b.n	8004050 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0+0x5c>
 80040a6:	bf00      	nop
 80040a8:	40020800 	.word	0x40020800
 80040ac:	e000ed00 	.word	0xe000ed00
 80040b0:	200004a4 	.word	0x200004a4

080040b4 <ILI9341_SetDefaultState>:
  TextColor = TextColor_Default;
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <ILI9341_SetDefaultState+0x18>)
 80040b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040ba:	801a      	strh	r2, [r3, #0]
  TextBackgroundColor = TextBackgroundColor_Default;
 80040bc:	2200      	movs	r2, #0
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <ILI9341_SetDefaultState+0x1c>)
 80040c0:	801a      	strh	r2, [r3, #0]
  TextDrawMode = TextDrawMode_Default;
 80040c2:	2201      	movs	r2, #1
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <ILI9341_SetDefaultState+0x20>)
 80040c6:	701a      	strb	r2, [r3, #0]
}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000008 	.word	0x20000008
 80040d0:	20000498 	.word	0x20000498
 80040d4:	2000000a 	.word	0x2000000a

080040d8 <ILI9341_Initialize>:
{
 80040d8:	b508      	push	{r3, lr}
  phspi = i_phspi;
 80040da:	4ba4      	ldr	r3, [pc, #656]	; (800436c <ILI9341_Initialize+0x294>)
  UseBackBuffer = i_UseBackBuffer;
 80040dc:	b2c9      	uxtb	r1, r1
  phspi = i_phspi;
 80040de:	6018      	str	r0, [r3, #0]
  UseBackBuffer = i_UseBackBuffer;
 80040e0:	4ba3      	ldr	r3, [pc, #652]	; (8004370 <ILI9341_Initialize+0x298>)
 80040e2:	7019      	strb	r1, [r3, #0]
  if (UseBackBuffer)
 80040e4:	b149      	cbz	r1, 80040fa <ILI9341_Initialize+0x22>
    pBackBuffer = calloc(1, ILI9341_Width * ILI9341_Height * sizeof(uint16_t));
 80040e6:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 80040ea:	2001      	movs	r0, #1
 80040ec:	f002 fb72 	bl	80067d4 <calloc>
 80040f0:	4ba0      	ldr	r3, [pc, #640]	; (8004374 <ILI9341_Initialize+0x29c>)
 80040f2:	6018      	str	r0, [r3, #0]
    if (!pBackBuffer)
 80040f4:	b908      	cbnz	r0, 80040fa <ILI9341_Initialize+0x22>
      Error_Handler();
 80040f6:	f001 fde3 	bl	8005cc0 <Error_Handler>
  ILI9341_SetDefaultState();
 80040fa:	f7ff ffdb 	bl	80040b4 <ILI9341_SetDefaultState>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_RESET);
 80040fe:	2101      	movs	r1, #1
 8004100:	2200      	movs	r2, #0
 8004102:	489d      	ldr	r0, [pc, #628]	; (8004378 <ILI9341_Initialize+0x2a0>)
 8004104:	f7fc fe10 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004108:	2001      	movs	r0, #1
 800410a:	f7fc fab5 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RESX_GPIO_Port, ILI9341_RESX_Pin, GPIO_PIN_SET);
 800410e:	2201      	movs	r2, #1
 8004110:	4899      	ldr	r0, [pc, #612]	; (8004378 <ILI9341_Initialize+0x2a0>)
 8004112:	4611      	mov	r1, r2
 8004114:	f7fc fe08 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8004118:	2005      	movs	r0, #5
 800411a:	f7fc faad 	bl	8000678 <HAL_Delay>
  ILI9341_CSX_Low();
 800411e:	2200      	movs	r2, #0
 8004120:	2102      	movs	r1, #2
 8004122:	4895      	ldr	r0, [pc, #596]	; (8004378 <ILI9341_Initialize+0x2a0>)
 8004124:	f7fc fe00 	bl	8000d28 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0xEF);
 8004128:	f06f 0010 	mvn.w	r0, #16
 800412c:	f7ff ff4e 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x03);
 8004130:	2003      	movs	r0, #3
 8004132:	f7ff ff2b 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x80);
 8004136:	2080      	movs	r0, #128	; 0x80
 8004138:	f7ff ff28 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x02);
 800413c:	2002      	movs	r0, #2
 800413e:	f7ff ff25 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERB);
 8004142:	f06f 0030 	mvn.w	r0, #48	; 0x30
 8004146:	f7ff ff41 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 800414a:	2000      	movs	r0, #0
 800414c:	f7ff ff1e 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0XC1);
 8004150:	20c1      	movs	r0, #193	; 0xc1
 8004152:	f7ff ff1b 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0X30);
 8004156:	2030      	movs	r0, #48	; 0x30
 8004158:	f7ff ff18 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWER_SEQ);
 800415c:	f06f 0012 	mvn.w	r0, #18
 8004160:	f7ff ff34 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x64);
 8004164:	2064      	movs	r0, #100	; 0x64
 8004166:	f7ff ff11 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x03);
 800416a:	2003      	movs	r0, #3
 800416c:	f7ff ff0e 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0X12);
 8004170:	2012      	movs	r0, #18
 8004172:	f7ff ff0b 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0X81);
 8004176:	2081      	movs	r0, #129	; 0x81
 8004178:	f7ff ff08 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCA);
 800417c:	f06f 0017 	mvn.w	r0, #23
 8004180:	f7ff ff24 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x85);
 8004184:	2085      	movs	r0, #133	; 0x85
 8004186:	f7ff ff01 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 800418a:	2000      	movs	r0, #0
 800418c:	f7ff fefe 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x78);
 8004190:	2078      	movs	r0, #120	; 0x78
 8004192:	f7ff fefb 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_POWERA);
 8004196:	f06f 0034 	mvn.w	r0, #52	; 0x34
 800419a:	f7ff ff17 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x39);
 800419e:	2039      	movs	r0, #57	; 0x39
 80041a0:	f7ff fef4 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x2C);
 80041a4:	202c      	movs	r0, #44	; 0x2c
 80041a6:	f7ff fef1 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80041aa:	2000      	movs	r0, #0
 80041ac:	f7ff feee 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x34);
 80041b0:	2034      	movs	r0, #52	; 0x34
 80041b2:	f7ff feeb 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x02);
 80041b6:	2002      	movs	r0, #2
 80041b8:	f7ff fee8 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_PRC);
 80041bc:	f06f 0008 	mvn.w	r0, #8
 80041c0:	f7ff ff04 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x20);
 80041c4:	2020      	movs	r0, #32
 80041c6:	f7ff fee1 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(LCD_DTCB);
 80041ca:	f06f 0015 	mvn.w	r0, #21
 80041ce:	f7ff fefd 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7ff feda 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80041d8:	2000      	movs	r0, #0
 80041da:	f7ff fed7 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR1); // Power control
 80041de:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 80041e2:	f7ff fef3 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x23); // VRH=[5:0]
 80041e6:	2023      	movs	r0, #35	; 0x23
 80041e8:	f7ff fed0 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_PWCTR2); // Power control
 80041ec:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 80041f0:	f7ff feec 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x10); // BT=[3:0]
 80041f4:	2010      	movs	r0, #16
 80041f6:	f7ff fec9 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR1); // VCOM control
 80041fa:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 80041fe:	f7ff fee5 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x3e); // VMH=[6:0]
 8004202:	203e      	movs	r0, #62	; 0x3e
 8004204:	f7ff fec2 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x28); // VML=[6:0]
 8004208:	2028      	movs	r0, #40	; 0x28
 800420a:	f7ff febf 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VMCTR2); // VCOM control 2
 800420e:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8004212:	f7ff fedb 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x86); // VMF=[6:0]
 8004216:	2086      	movs	r0, #134	; 0x86
 8004218:	f7ff feb8 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_MADCTL); // Memory Access Control
 800421c:	2036      	movs	r0, #54	; 0x36
 800421e:	f7ff fed5 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x48);
 8004222:	2048      	movs	r0, #72	; 0x48
 8004224:	f7ff feb2 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_VSCRSADD); // Vertical scroll
 8004228:	2037      	movs	r0, #55	; 0x37
 800422a:	f7ff fecf 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write16(0); // Zero
 800422e:	2000      	movs	r0, #0
 8004230:	f7ff fec2 	bl	8003fb8 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PIXFMT);
 8004234:	203a      	movs	r0, #58	; 0x3a
 8004236:	f7ff fec9 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x55); // DPI=[6:4] DBI=[2:0]
 800423a:	2055      	movs	r0, #85	; 0x55
 800423c:	f7ff fea6 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_FRMCTR1);
 8004240:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 8004244:	f7ff fec2 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 8004248:	2000      	movs	r0, #0
 800424a:	f7ff fe9f 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x18);
 800424e:	2018      	movs	r0, #24
 8004250:	f7ff fe9c 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_DFUNCTR); // Display Function Control
 8004254:	f06f 0049 	mvn.w	r0, #73	; 0x49
 8004258:	f7ff feb8 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x08);
 800425c:	2008      	movs	r0, #8
 800425e:	f7ff fe95 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x82);
 8004262:	2082      	movs	r0, #130	; 0x82
 8004264:	f7ff fe92 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x27);
 8004268:	2027      	movs	r0, #39	; 0x27
 800426a:	f7ff fe8f 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(0xF2); // 3Gamma
 800426e:	f06f 000d 	mvn.w	r0, #13
 8004272:	f7ff feab 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x00); // Disable
 8004276:	2000      	movs	r0, #0
 8004278:	f7ff fe88 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GAMMASET); // Gamma curve selected
 800427c:	2026      	movs	r0, #38	; 0x26
 800427e:	f7ff fea5 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x01);
 8004282:	2001      	movs	r0, #1
 8004284:	f7ff fe82 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRP1); // Set Gamma
 8004288:	f06f 001f 	mvn.w	r0, #31
 800428c:	f7ff fe9e 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x0F);
 8004290:	200f      	movs	r0, #15
 8004292:	f7ff fe7b 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8004296:	2031      	movs	r0, #49	; 0x31
 8004298:	f7ff fe78 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x2B);
 800429c:	202b      	movs	r0, #43	; 0x2b
 800429e:	f7ff fe75 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 80042a2:	200c      	movs	r0, #12
 80042a4:	f7ff fe72 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80042a8:	200e      	movs	r0, #14
 80042aa:	f7ff fe6f 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x08);
 80042ae:	2008      	movs	r0, #8
 80042b0:	f7ff fe6c 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x4E);
 80042b4:	204e      	movs	r0, #78	; 0x4e
 80042b6:	f7ff fe69 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0xF1);
 80042ba:	20f1      	movs	r0, #241	; 0xf1
 80042bc:	f7ff fe66 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x37);
 80042c0:	2037      	movs	r0, #55	; 0x37
 80042c2:	f7ff fe63 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x07);
 80042c6:	2007      	movs	r0, #7
 80042c8:	f7ff fe60 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x10);
 80042cc:	2010      	movs	r0, #16
 80042ce:	f7ff fe5d 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x03);
 80042d2:	2003      	movs	r0, #3
 80042d4:	f7ff fe5a 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80042d8:	200e      	movs	r0, #14
 80042da:	f7ff fe57 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x09);
 80042de:	2009      	movs	r0, #9
 80042e0:	f7ff fe54 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x00);
 80042e4:	2000      	movs	r0, #0
 80042e6:	f7ff fe51 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_GMCTRN1); // Set Gamma
 80042ea:	f06f 001e 	mvn.w	r0, #30
 80042ee:	f7ff fe6d 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write8(0x00);
 80042f2:	2000      	movs	r0, #0
 80042f4:	f7ff fe4a 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x0E);
 80042f8:	200e      	movs	r0, #14
 80042fa:	f7ff fe47 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x14);
 80042fe:	2014      	movs	r0, #20
 8004300:	f7ff fe44 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x03);
 8004304:	2003      	movs	r0, #3
 8004306:	f7ff fe41 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x11);
 800430a:	2011      	movs	r0, #17
 800430c:	f7ff fe3e 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x07);
 8004310:	2007      	movs	r0, #7
 8004312:	f7ff fe3b 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x31);
 8004316:	2031      	movs	r0, #49	; 0x31
 8004318:	f7ff fe38 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0xC1);
 800431c:	20c1      	movs	r0, #193	; 0xc1
 800431e:	f7ff fe35 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x48);
 8004322:	2048      	movs	r0, #72	; 0x48
 8004324:	f7ff fe32 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x08);
 8004328:	2008      	movs	r0, #8
 800432a:	f7ff fe2f 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 800432e:	200f      	movs	r0, #15
 8004330:	f7ff fe2c 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x0C);
 8004334:	200c      	movs	r0, #12
 8004336:	f7ff fe29 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x31);
 800433a:	2031      	movs	r0, #49	; 0x31
 800433c:	f7ff fe26 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x36);
 8004340:	2036      	movs	r0, #54	; 0x36
 8004342:	f7ff fe23 	bl	8003f8c <ILI9341_Write8>
  ILI9341_Write8(0x0F);
 8004346:	200f      	movs	r0, #15
 8004348:	f7ff fe20 	bl	8003f8c <ILI9341_Write8>
  ILI9341_WriteCommand(ILI9341_SLPOUT); // Exit sleep
 800434c:	2011      	movs	r0, #17
 800434e:	f7ff fe3d 	bl	8003fcc <ILI9341_WriteCommand>
  HAL_Delay(120);
 8004352:	2078      	movs	r0, #120	; 0x78
 8004354:	f7fc f990 	bl	8000678 <HAL_Delay>
  ILI9341_WriteCommand(ILI9341_DISPON); // Display on
 8004358:	2029      	movs	r0, #41	; 0x29
 800435a:	f7ff fe37 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_CSX_High();
 800435e:	2201      	movs	r2, #1
 8004360:	2102      	movs	r1, #2
 8004362:	4805      	ldr	r0, [pc, #20]	; (8004378 <ILI9341_Initialize+0x2a0>)
}
 8004364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ILI9341_CSX_High();
 8004368:	f7fc bcde 	b.w	8000d28 <HAL_GPIO_WritePin>
 800436c:	200004a4 	.word	0x200004a4
 8004370:	2000049a 	.word	0x2000049a
 8004374:	2000049c 	.word	0x2000049c
 8004378:	40020800 	.word	0x40020800

0800437c <ILI9341_SetAddrWindow>:
{
 800437c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004380:	f99d 8018 	ldrsb.w	r8, [sp, #24]
 8004384:	4606      	mov	r6, r0
 8004386:	460c      	mov	r4, r1
 8004388:	4617      	mov	r7, r2
 800438a:	461d      	mov	r5, r3
  if (UseCS)
 800438c:	f1b8 0f00 	cmp.w	r8, #0
 8004390:	d004      	beq.n	800439c <ILI9341_SetAddrWindow+0x20>
    ILI9341_CSX_Low();
 8004392:	2200      	movs	r2, #0
 8004394:	2102      	movs	r1, #2
 8004396:	4816      	ldr	r0, [pc, #88]	; (80043f0 <ILI9341_SetAddrWindow+0x74>)
 8004398:	f7fc fcc6 	bl	8000d28 <HAL_GPIO_WritePin>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 800439c:	4437      	add	r7, r6
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 800439e:	4425      	add	r5, r4
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 80043a0:	202a      	movs	r0, #42	; 0x2a
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 80043a2:	3f01      	subs	r7, #1
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 80043a4:	3d01      	subs	r5, #1
  ILI9341_WriteCommand(ILI9341_CASET); // Column addr set
 80043a6:	f7ff fe11 	bl	8003fcc <ILI9341_WriteCommand>
  uint32_t xa = ((uint32_t) X << 16) | (X + Width - 1);
 80043aa:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  uint32_t ya = ((uint32_t) Y << 16) | (Y + Height - 1);
 80043ae:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
  ILI9341_Write16(Value >> 16);
 80043b2:	0c30      	lsrs	r0, r6, #16
 80043b4:	f7ff fe00 	bl	8003fb8 <ILI9341_Write16>
  ILI9341_Write16(Value);
 80043b8:	b2b0      	uxth	r0, r6
 80043ba:	f7ff fdfd 	bl	8003fb8 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_PASET); // Row addr set
 80043be:	202b      	movs	r0, #43	; 0x2b
 80043c0:	f7ff fe04 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write16(Value >> 16);
 80043c4:	0c20      	lsrs	r0, r4, #16
 80043c6:	f7ff fdf7 	bl	8003fb8 <ILI9341_Write16>
  ILI9341_Write16(Value);
 80043ca:	b2a0      	uxth	r0, r4
 80043cc:	f7ff fdf4 	bl	8003fb8 <ILI9341_Write16>
  ILI9341_WriteCommand(ILI9341_RAMWR); // Write to RAM
 80043d0:	202c      	movs	r0, #44	; 0x2c
 80043d2:	f7ff fdfb 	bl	8003fcc <ILI9341_WriteCommand>
  if (UseCS)
 80043d6:	f1b8 0f00 	cmp.w	r8, #0
 80043da:	d006      	beq.n	80043ea <ILI9341_SetAddrWindow+0x6e>
    ILI9341_CSX_High();
 80043dc:	2201      	movs	r2, #1
 80043de:	2102      	movs	r1, #2
 80043e0:	4803      	ldr	r0, [pc, #12]	; (80043f0 <ILI9341_SetAddrWindow+0x74>)
}
 80043e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ILI9341_CSX_High();
 80043e6:	f7fc bc9f 	b.w	8000d28 <HAL_GPIO_WritePin>
}
 80043ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ee:	bf00      	nop
 80043f0:	40020800 	.word	0x40020800

080043f4 <ILI9341_DrawPixel>:
{
 80043f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043f6:	461d      	mov	r5, r3
  if (UseBackBuffer)
 80043f8:	4b19      	ldr	r3, [pc, #100]	; (8004460 <ILI9341_DrawPixel+0x6c>)
{
 80043fa:	4616      	mov	r6, r2
 80043fc:	460c      	mov	r4, r1
  if (UseBackBuffer)
 80043fe:	781a      	ldrb	r2, [r3, #0]
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8004400:	b287      	uxth	r7, r0
  if (UseBackBuffer)
 8004402:	b172      	cbz	r2, 8004422 <ILI9341_DrawPixel+0x2e>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 8004404:	2fef      	cmp	r7, #239	; 0xef
 8004406:	d80a      	bhi.n	800441e <ILI9341_DrawPixel+0x2a>
 8004408:	b28b      	uxth	r3, r1
 800440a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800440e:	d206      	bcs.n	800441e <ILI9341_DrawPixel+0x2a>
  pBackBuffer[X + Y * ILI9341_Width] = Color;
 8004410:	21f0      	movs	r1, #240	; 0xf0
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <ILI9341_DrawPixel+0x70>)
 8004414:	fb14 0001 	smlabb	r0, r4, r1, r0
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
}
 800441e:	b003      	add	sp, #12
 8004420:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (UseCS)
 8004422:	b11d      	cbz	r5, 800442c <ILI9341_DrawPixel+0x38>
    ILI9341_CSX_Low();
 8004424:	2102      	movs	r1, #2
 8004426:	4810      	ldr	r0, [pc, #64]	; (8004468 <ILI9341_DrawPixel+0x74>)
 8004428:	f7fc fc7e 	bl	8000d28 <HAL_GPIO_WritePin>
  if ((X < 0) || (X >= ILI9341_Width) || (Y < 0) || (Y >= ILI9341_Height))
 800442c:	2fef      	cmp	r7, #239	; 0xef
 800442e:	d8f6      	bhi.n	800441e <ILI9341_DrawPixel+0x2a>
 8004430:	b2a1      	uxth	r1, r4
 8004432:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
 8004436:	d2f2      	bcs.n	800441e <ILI9341_DrawPixel+0x2a>
  ILI9341_SetAddrWindow(X, Y, 1, 1, 0);
 8004438:	2301      	movs	r3, #1
 800443a:	2400      	movs	r4, #0
 800443c:	4638      	mov	r0, r7
 800443e:	461a      	mov	r2, r3
 8004440:	9400      	str	r4, [sp, #0]
 8004442:	f7ff ff9b 	bl	800437c <ILI9341_SetAddrWindow>
  ILI9341_Write16(Color);
 8004446:	4630      	mov	r0, r6
 8004448:	f7ff fdb6 	bl	8003fb8 <ILI9341_Write16>
  if (UseCS)
 800444c:	2d00      	cmp	r5, #0
 800444e:	d0e6      	beq.n	800441e <ILI9341_DrawPixel+0x2a>
    ILI9341_CSX_Low();
 8004450:	4622      	mov	r2, r4
 8004452:	2102      	movs	r1, #2
 8004454:	4804      	ldr	r0, [pc, #16]	; (8004468 <ILI9341_DrawPixel+0x74>)
}
 8004456:	b003      	add	sp, #12
 8004458:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ILI9341_CSX_Low();
 800445c:	f7fc bc64 	b.w	8000d28 <HAL_GPIO_WritePin>
 8004460:	2000049a 	.word	0x2000049a
 8004464:	2000049c 	.word	0x2000049c
 8004468:	40020800 	.word	0x40020800

0800446c <ILI9341_DrawPixels_MSBFirst>:
  }
}

void ILI9341_DrawPixels_MSBFirst(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t *pPixels)
// Supplied pixel data must be byte swapped i.e. MSB first.
{
 800446c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (UseBackBuffer)
 8004470:	4d26      	ldr	r5, [pc, #152]	; (800450c <ILI9341_DrawPixels_MSBFirst+0xa0>)
{
 8004472:	4680      	mov	r8, r0
 8004474:	460e      	mov	r6, r1
 8004476:	4617      	mov	r7, r2
  if (UseBackBuffer)
 8004478:	782d      	ldrb	r5, [r5, #0]
{
 800447a:	461c      	mov	r4, r3
 800447c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (UseBackBuffer)
 8004480:	b3c5      	cbz	r5, 80044f4 <ILI9341_DrawPixels_MSBFirst+0x88>
  if ((i_Width == 0) || (i_Height == 0))
 8004482:	b18a      	cbz	r2, 80044a8 <ILI9341_DrawPixels_MSBFirst+0x3c>
 8004484:	b183      	cbz	r3, 80044a8 <ILI9341_DrawPixels_MSBFirst+0x3c>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8004486:	4434      	add	r4, r6
 8004488:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800448c:	2100      	movs	r1, #0
 800448e:	4630      	mov	r0, r6
 8004490:	f7ff fd2f 	bl	8003ef2 <Clamp_uint16>
 8004494:	4605      	mov	r5, r0
 8004496:	b2a4      	uxth	r4, r4
 8004498:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800449c:	2100      	movs	r1, #0
 800449e:	4620      	mov	r0, r4
 80044a0:	f7ff fd27 	bl	8003ef2 <Clamp_uint16>
 80044a4:	4285      	cmp	r5, r0
 80044a6:	d302      	bcc.n	80044ae <ILI9341_DrawPixels_MSBFirst+0x42>
    ILI9341_DrawPixels_MSBFirst_ToBackBuffer(X, Y, Width, Height, pPixels);
  else
    ILI9341_DrawPixels_MSBFirst_ToDisplay(X, Y, Width, Height, pPixels);
}
 80044a8:	b003      	add	sp, #12
 80044aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pLine = &pBackBuffer[Y * ILI9341_Width];
 80044ae:	4b18      	ldr	r3, [pc, #96]	; (8004510 <ILI9341_DrawPixels_MSBFirst+0xa4>)
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80044b0:	22f0      	movs	r2, #240	; 0xf0
 80044b2:	2100      	movs	r1, #0
 80044b4:	4640      	mov	r0, r8
    pLine = &pBackBuffer[Y * ILI9341_Width];
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f44f 7af0 	mov.w	sl, #480	; 0x1e0
 80044bc:	9301      	str	r3, [sp, #4]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80044be:	f7ff fd18 	bl	8003ef2 <Clamp_uint16>
 80044c2:	eb08 0307 	add.w	r3, r8, r7
 80044c6:	fb0a fa05 	mul.w	sl, sl, r5
 80044ca:	4606      	mov	r6, r0
 80044cc:	fa1f fb83 	uxth.w	fp, r3
 80044d0:	22f0      	movs	r2, #240	; 0xf0
 80044d2:	2100      	movs	r1, #0
 80044d4:	4658      	mov	r0, fp
 80044d6:	f7ff fd0c 	bl	8003ef2 <Clamp_uint16>
 80044da:	4286      	cmp	r6, r0
 80044dc:	d301      	bcc.n	80044e2 <ILI9341_DrawPixels_MSBFirst+0x76>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 80044de:	3501      	adds	r5, #1
 80044e0:	e7da      	b.n	8004498 <ILI9341_DrawPixels_MSBFirst+0x2c>
      pLine[X] = *pPixel++;
 80044e2:	9b01      	ldr	r3, [sp, #4]
 80044e4:	f839 1b02 	ldrh.w	r1, [r9], #2
 80044e8:	eb03 020a 	add.w	r2, r3, sl
 80044ec:	f822 1016 	strh.w	r1, [r2, r6, lsl #1]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 80044f0:	3601      	adds	r6, #1
 80044f2:	e7ed      	b.n	80044d0 <ILI9341_DrawPixels_MSBFirst+0x64>
  if ((Width == 0) || (Height == 0))
 80044f4:	2a00      	cmp	r2, #0
 80044f6:	d0d7      	beq.n	80044a8 <ILI9341_DrawPixels_MSBFirst+0x3c>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0d5      	beq.n	80044a8 <ILI9341_DrawPixels_MSBFirst+0x3c>
 80044fc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
}
 8004500:	b003      	add	sp, #12
 8004502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004506:	f7ff bd75 	b.w	8003ff4 <ILI9341_DrawPixels_MSBFirst_ToDisplay.part.0>
 800450a:	bf00      	nop
 800450c:	2000049a 	.word	0x2000049a
 8004510:	2000049c 	.word	0x2000049c

08004514 <ILI9341_DrawBar_ToBackBuffer>:

  ILI9341_CSX_High();
}

void ILI9341_DrawBar_ToBackBuffer(uint16_t i_X, uint16_t i_Y, uint16_t i_Width, uint16_t i_Height, uint16_t i_Color)
{
 8004514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004518:	460e      	mov	r6, r1
 800451a:	461c      	mov	r4, r3
 800451c:	4607      	mov	r7, r0
  uint16_t *pLine;
  uint16_t Color_MSBFirst;

  Color_MSBFirst = SwapBytes(i_Color);
 800451e:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30

  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8004522:	4434      	add	r4, r6
{
 8004524:	4690      	mov	r8, r2
  Color_MSBFirst = SwapBytes(i_Color);
 8004526:	f7ff fcdd 	bl	8003ee4 <SwapBytes>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 800452a:	f44f 72a0 	mov.w	r2, #320	; 0x140
  Color_MSBFirst = SwapBytes(i_Color);
 800452e:	4682      	mov	sl, r0
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8004530:	2100      	movs	r1, #0
 8004532:	4630      	mov	r0, r6
 8004534:	b2a4      	uxth	r4, r4
 8004536:	f7ff fcdc 	bl	8003ef2 <Clamp_uint16>
 800453a:	4605      	mov	r5, r0
 800453c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004540:	2100      	movs	r1, #0
 8004542:	4620      	mov	r0, r4
 8004544:	f7ff fcd5 	bl	8003ef2 <Clamp_uint16>
 8004548:	42a8      	cmp	r0, r5
 800454a:	d802      	bhi.n	8004552 <ILI9341_DrawBar_ToBackBuffer+0x3e>
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
    {
      pLine[X] = Color_MSBFirst;
    }
  }
}
 800454c:	b003      	add	sp, #12
 800454e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pLine = &pBackBuffer[Y * ILI9341_Width];
 8004552:	4b10      	ldr	r3, [pc, #64]	; (8004594 <ILI9341_DrawBar_ToBackBuffer+0x80>)
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8004554:	22f0      	movs	r2, #240	; 0xf0
 8004556:	2100      	movs	r1, #0
 8004558:	4638      	mov	r0, r7
    pLine = &pBackBuffer[Y * ILI9341_Width];
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
 8004560:	9301      	str	r3, [sp, #4]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8004562:	f7ff fcc6 	bl	8003ef2 <Clamp_uint16>
 8004566:	eb07 0308 	add.w	r3, r7, r8
 800456a:	fb09 f905 	mul.w	r9, r9, r5
 800456e:	4606      	mov	r6, r0
 8004570:	fa1f fb83 	uxth.w	fp, r3
 8004574:	22f0      	movs	r2, #240	; 0xf0
 8004576:	2100      	movs	r1, #0
 8004578:	4658      	mov	r0, fp
 800457a:	f7ff fcba 	bl	8003ef2 <Clamp_uint16>
 800457e:	42b0      	cmp	r0, r6
 8004580:	d801      	bhi.n	8004586 <ILI9341_DrawBar_ToBackBuffer+0x72>
  for (uint32_t Y = Clamp_uint16(i_Y, 0 , ILI9341_Height); Y < Clamp_uint16(i_Y + i_Height, 0 , ILI9341_Height); ++Y)
 8004582:	3501      	adds	r5, #1
 8004584:	e7da      	b.n	800453c <ILI9341_DrawBar_ToBackBuffer+0x28>
      pLine[X] = Color_MSBFirst;
 8004586:	9b01      	ldr	r3, [sp, #4]
 8004588:	eb03 0209 	add.w	r2, r3, r9
 800458c:	f822 a016 	strh.w	sl, [r2, r6, lsl #1]
    for (uint32_t X = Clamp_uint16(i_X, 0, ILI9341_Width); X < Clamp_uint16(i_X + i_Width, 0, ILI9341_Width); ++X)
 8004590:	3601      	adds	r6, #1
 8004592:	e7ef      	b.n	8004574 <ILI9341_DrawBar_ToBackBuffer+0x60>
 8004594:	2000049c 	.word	0x2000049c

08004598 <ILI9341_DrawBar>:

void ILI9341_DrawBar(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Color)
{
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (UseBackBuffer)
 800459c:	4d35      	ldr	r5, [pc, #212]	; (8004674 <ILI9341_DrawBar+0xdc>)
{
 800459e:	4607      	mov	r7, r0
 80045a0:	460e      	mov	r6, r1
 80045a2:	4614      	mov	r4, r2
  if (UseBackBuffer)
 80045a4:	782d      	ldrb	r5, [r5, #0]
{
 80045a6:	4698      	mov	r8, r3
 80045a8:	f8bd 9020 	ldrh.w	r9, [sp, #32]
  if (UseBackBuffer)
 80045ac:	b12d      	cbz	r5, 80045ba <ILI9341_DrawBar+0x22>
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 80045ae:	f8cd 9020 	str.w	r9, [sp, #32]
  else
    ILI9341_DrawBar_ToDisplay(X, Y, Width, Height, Color);
}
 80045b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ILI9341_DrawBar_ToBackBuffer(X, Y, Width, Height, Color);
 80045b6:	f7ff bfad 	b.w	8004514 <ILI9341_DrawBar_ToBackBuffer>
  if ((Width == 0) || (Height == 0))
 80045ba:	2a00      	cmp	r2, #0
 80045bc:	d058      	beq.n	8004670 <ILI9341_DrawBar+0xd8>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d056      	beq.n	8004670 <ILI9341_DrawBar+0xd8>
  ILI9341_CSX_Low();
 80045c2:	462a      	mov	r2, r5
 80045c4:	2102      	movs	r1, #2
 80045c6:	482c      	ldr	r0, [pc, #176]	; (8004678 <ILI9341_DrawBar+0xe0>)
 80045c8:	f7fc fbae 	bl	8000d28 <HAL_GPIO_WritePin>
  ILI9341_WriteCommand(0x2A); // Set start and end columns.
 80045cc:	202a      	movs	r0, #42	; 0x2a
 80045ce:	f7ff fcfd 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write16(X);
 80045d2:	4638      	mov	r0, r7
 80045d4:	f7ff fcf0 	bl	8003fb8 <ILI9341_Write16>
  ILI9341_Write16(X + Width - 1);
 80045d8:	1e60      	subs	r0, r4, #1
 80045da:	4438      	add	r0, r7
 80045dc:	b280      	uxth	r0, r0
 80045de:	f7ff fceb 	bl	8003fb8 <ILI9341_Write16>
  ILI9341_WriteCommand(0x2B); // Set start and end pages.
 80045e2:	202b      	movs	r0, #43	; 0x2b
 80045e4:	f7ff fcf2 	bl	8003fcc <ILI9341_WriteCommand>
  ILI9341_Write16(Y);
 80045e8:	4630      	mov	r0, r6
 80045ea:	f7ff fce5 	bl	8003fb8 <ILI9341_Write16>
  ILI9341_Write16(Y + Height - 1);
 80045ee:	f108 30ff 	add.w	r0, r8, #4294967295
 80045f2:	4430      	add	r0, r6
 80045f4:	b280      	uxth	r0, r0
 80045f6:	f7ff fcdf 	bl	8003fb8 <ILI9341_Write16>
  uint16_t Color_MSBFirst = SwapBytes(Color);
 80045fa:	4648      	mov	r0, r9
 80045fc:	f7ff fc72 	bl	8003ee4 <SwapBytes>
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 8004600:	4a1e      	ldr	r2, [pc, #120]	; (800467c <ILI9341_DrawBar+0xe4>)
 8004602:	b22b      	sxth	r3, r5
 8004604:	3501      	adds	r5, #1
 8004606:	42a3      	cmp	r3, r4
 8004608:	db2f      	blt.n	800466a <ILI9341_DrawBar+0xd2>
    uint32_t NumBytes = Width * 2;
 800460a:	0064      	lsls	r4, r4, #1
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 800460c:	2500      	movs	r5, #0
      SCB->DCCMVAC = op_addr;
 800460e:	4f1c      	ldr	r7, [pc, #112]	; (8004680 <ILI9341_DrawBar+0xe8>)
  ILI9341_WriteCommand(0x2C); // Memory write.
 8004610:	202c      	movs	r0, #44	; 0x2c
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 8004612:	fa1f f984 	uxth.w	r9, r4
 8004616:	4e1b      	ldr	r6, [pc, #108]	; (8004684 <ILI9341_DrawBar+0xec>)
  ILI9341_WriteCommand(0x2C); // Memory write.
 8004618:	f7ff fcd8 	bl	8003fcc <ILI9341_WriteCommand>
    uint32_t op_addr = (uint32_t) addr;
 800461c:	4917      	ldr	r1, [pc, #92]	; (800467c <ILI9341_DrawBar+0xe4>)
  __ASM volatile ("dsb 0xF":::"memory");
 800461e:	f3bf 8f4f 	dsb	sy
     int32_t op_size = dsize;
 8004622:	4623      	mov	r3, r4
      op_size -=           linesize;
 8004624:	3b20      	subs	r3, #32
      SCB->DCCMVAC = op_addr;
 8004626:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800462a:	3120      	adds	r1, #32
    while (op_size > 0) {
 800462c:	2b00      	cmp	r3, #0
 800462e:	dcf9      	bgt.n	8004624 <ILI9341_DrawBar+0x8c>
 8004630:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004634:	f3bf 8f6f 	isb	sy
    if (HAL_SPI_Transmit_DMA(phspi, (uint8_t*) ColumnColors, NumBytes) != HAL_OK)
 8004638:	4910      	ldr	r1, [pc, #64]	; (800467c <ILI9341_DrawBar+0xe4>)
 800463a:	464a      	mov	r2, r9
 800463c:	6830      	ldr	r0, [r6, #0]
 800463e:	f7fe fded 	bl	800321c <HAL_SPI_Transmit_DMA>
 8004642:	b108      	cbz	r0, 8004648 <ILI9341_DrawBar+0xb0>
      Error_Handler();
 8004644:	f001 fb3c 	bl	8005cc0 <Error_Handler>
    do {} while (phspi->hdmatx->State == HAL_DMA_STATE_BUSY);
 8004648:	6833      	ldr	r3, [r6, #0]
 800464a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800464c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8004650:	2b02      	cmp	r3, #2
 8004652:	d0fb      	beq.n	800464c <ILI9341_DrawBar+0xb4>
  for (int16_t RowIndex = 0; RowIndex < Height; ++RowIndex)
 8004654:	3501      	adds	r5, #1
 8004656:	b22d      	sxth	r5, r5
 8004658:	4545      	cmp	r5, r8
 800465a:	dbdf      	blt.n	800461c <ILI9341_DrawBar+0x84>
  ILI9341_CSX_High();
 800465c:	2201      	movs	r2, #1
 800465e:	2102      	movs	r1, #2
 8004660:	4805      	ldr	r0, [pc, #20]	; (8004678 <ILI9341_DrawBar+0xe0>)
}
 8004662:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ILI9341_CSX_High();
 8004666:	f7fc bb5f 	b.w	8000d28 <HAL_GPIO_WritePin>
    ColumnColors[ColumnIndex] = Color_MSBFirst;
 800466a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
  for (int16_t ColumnIndex = 0; ColumnIndex < Width; ++ColumnIndex)
 800466e:	e7c8      	b.n	8004602 <ILI9341_DrawBar+0x6a>
}
 8004670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004674:	2000049a 	.word	0x2000049a
 8004678:	40020800 	.word	0x40020800
 800467c:	20000218 	.word	0x20000218
 8004680:	e000ed00 	.word	0xe000ed00
 8004684:	200004a4 	.word	0x200004a4

08004688 <ILI9341_Clear>:

void ILI9341_Clear(uint16_t Color)
{
 8004688:	b507      	push	{r0, r1, r2, lr}
  ILI9341_DrawBar(0, 0, ILI9341_Width, ILI9341_Height, Color);
 800468a:	2100      	movs	r1, #0
 800468c:	9000      	str	r0, [sp, #0]
 800468e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004692:	22f0      	movs	r2, #240	; 0xf0
 8004694:	4608      	mov	r0, r1
 8004696:	f7ff ff7f 	bl	8004598 <ILI9341_DrawBar>
}
 800469a:	b003      	add	sp, #12
 800469c:	f85d fb04 	ldr.w	pc, [sp], #4

080046a0 <ILI9341_SetFont>:

const GFXfont *ILI9341_SetFont(const GFXfont *i_pFont)
{
  const GFXfont *Result;

  Result = pFont;
 80046a0:	4b02      	ldr	r3, [pc, #8]	; (80046ac <ILI9341_SetFont+0xc>)
 80046a2:	681a      	ldr	r2, [r3, #0]
  pFont = i_pFont;
 80046a4:	6018      	str	r0, [r3, #0]
  return Result;
}
 80046a6:	4610      	mov	r0, r2
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	200004a0 	.word	0x200004a0

080046b0 <ILI9341_GetFontYSpacing>:

uint8_t ILI9341_GetFontYSpacing()
{
  return pFont->yAdvance;
 80046b0:	4b01      	ldr	r3, [pc, #4]	; (80046b8 <ILI9341_GetFontYSpacing+0x8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	7a98      	ldrb	r0, [r3, #10]
 80046b6:	4770      	bx	lr
 80046b8:	200004a0 	.word	0x200004a0

080046bc <GetCharWidth>:

static uint8_t IsNonPrintingChar(uint8_t Ch)
{
  return ((Ch < pFont->first) || (Ch > pFont->last));
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <GetCharWidth+0x30>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	7a1a      	ldrb	r2, [r3, #8]
 80046c2:	4290      	cmp	r0, r2
 80046c4:	d310      	bcc.n	80046e8 <GetCharWidth+0x2c>
}

uint16_t GetCharWidth(uint8_t Ch)
{
  if (IsNonPrintingChar(Ch))
 80046c6:	7a59      	ldrb	r1, [r3, #9]
 80046c8:	4281      	cmp	r1, r0
 80046ca:	d30d      	bcc.n	80046e8 <GetCharWidth+0x2c>
    return 0;

  Ch -= pFont->first;
 80046cc:	1a80      	subs	r0, r0, r2
  GFXglyph *pGlyph = &pFont->pGlyph[Ch];
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	b2c0      	uxtb	r0, r0
 80046d2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  uint8_t w = pGlyph->width;
 80046d6:	789a      	ldrb	r2, [r3, #2]
  int8_t xo = pGlyph->xOffset;
 80046d8:	f993 0005 	ldrsb.w	r0, [r3, #5]

  if (w == 0)
 80046dc:	b90a      	cbnz	r2, 80046e2 <GetCharWidth+0x26>
    return pGlyph->xAdvance;
 80046de:	7918      	ldrb	r0, [r3, #4]
 80046e0:	4770      	bx	lr

  return xo + w;
 80046e2:	4410      	add	r0, r2
 80046e4:	b280      	uxth	r0, r0
 80046e6:	4770      	bx	lr
    return 0;
 80046e8:	2000      	movs	r0, #0
}
 80046ea:	4770      	bx	lr
 80046ec:	200004a0 	.word	0x200004a0

080046f0 <ILI9341_GetTextWidth>:

uint16_t ILI9341_GetTextWidth(const char *Text)
{
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4604      	mov	r4, r0

  NumChars = strlen(Text);

  pText = Text;

  TotalWidth=0;
 80046f4:	2500      	movs	r5, #0
  NumChars = strlen(Text);
 80046f6:	f7fb fda3 	bl	8000240 <strlen>

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80046fa:	fa14 f680 	uxtah	r6, r4, r0
 80046fe:	42b4      	cmp	r4, r6
 8004700:	d101      	bne.n	8004706 <ILI9341_GetTextWidth+0x16>
    TotalWidth += GetCharWidth(*pText++);

  return TotalWidth;
}
 8004702:	4628      	mov	r0, r5
 8004704:	bd70      	pop	{r4, r5, r6, pc}
    TotalWidth += GetCharWidth(*pText++);
 8004706:	f814 0b01 	ldrb.w	r0, [r4], #1
 800470a:	f7ff ffd7 	bl	80046bc <GetCharWidth>
 800470e:	4405      	add	r5, r0
 8004710:	b2ad      	uxth	r5, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8004712:	e7f4      	b.n	80046fe <ILI9341_GetTextWidth+0xe>

08004714 <ILI9341_DrawCharAtXY>:
uint8_t ILI9341_DrawCharAtXY(uint8_t Ch, uint16_t X, uint16_t Y, uint16_t Color)
// X: X position of left edge of char.
// Y: Y position of line on which the char sits. The char may go below this line (e.g. g j p q y).
// Returns required X advance.
// Based on Adafruit_GFX.cpp.
{
 8004714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004718:	4699      	mov	r9, r3
  uint8_t *pBitmap;
  uint16_t Color_MSBFirst, TextBackgroundColor_MSBFirst;
  uint16_t *pMemChar, *pMemCharPixel;
  uint8_t CharWidth, CharHeight;

  if (!pFont)
 800471a:	4b9f      	ldr	r3, [pc, #636]	; (8004998 <ILI9341_DrawCharAtXY+0x284>)
{
 800471c:	b08d      	sub	sp, #52	; 0x34
 800471e:	4693      	mov	fp, r2
  if (!pFont)
 8004720:	681b      	ldr	r3, [r3, #0]
{
 8004722:	9107      	str	r1, [sp, #28]
  if (!pFont)
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8134 	beq.w	8004992 <ILI9341_DrawCharAtXY+0x27e>
  return ((Ch < pFont->first) || (Ch > pFont->last));
 800472a:	7a1a      	ldrb	r2, [r3, #8]
 800472c:	4290      	cmp	r0, r2
 800472e:	f0c0 8130 	bcc.w	8004992 <ILI9341_DrawCharAtXY+0x27e>
    return 0;
  if (IsNonPrintingChar(Ch))
 8004732:	7a59      	ldrb	r1, [r3, #9]
 8004734:	4281      	cmp	r1, r0
 8004736:	f0c0 812c 	bcc.w	8004992 <ILI9341_DrawCharAtXY+0x27e>
    return 0;

  Ch -= pFont->first;
 800473a:	1a80      	subs	r0, r0, r2
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 800473c:	4a97      	ldr	r2, [pc, #604]	; (800499c <ILI9341_DrawCharAtXY+0x288>)
    Y -= (pFont->yOffsetMin / 2);
 800473e:	f993 700b 	ldrsb.w	r7, [r3, #11]
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 8004742:	7812      	ldrb	r2, [r2, #0]
  Ch -= pFont->first;
 8004744:	b2c0      	uxtb	r0, r0
  if (TextVerticalOrigin == tvoCentreBetweenBaseAndTop)
 8004746:	2a02      	cmp	r2, #2

  pGlyph = &pFont->pGlyph[Ch];
 8004748:	685a      	ldr	r2, [r3, #4]
    Y -= (pFont->yOffsetMin / 2);
 800474a:	bf08      	it	eq
 800474c:	eb07 71d7 	addeq.w	r1, r7, r7, lsr #31
  pBitmap = pFont->pBitmap;

  bo = pGlyph->bitmapOffset;
 8004750:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
    Y -= (pFont->yOffsetMin / 2);
 8004754:	bf08      	it	eq
 8004756:	ebab 0b61 	subeq.w	fp, fp, r1, asr #1
  pGlyph = &pFont->pGlyph[Ch];
 800475a:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
    Y -= (pFont->yOffsetMin / 2);
 800475e:	bf08      	it	eq
 8004760:	fa1f fb8b 	uxtheq.w	fp, fp
  pGlyph = &pFont->pGlyph[Ch];
 8004764:	9103      	str	r1, [sp, #12]
  w = pGlyph->width;
 8004766:	9a03      	ldr	r2, [sp, #12]
  pBitmap = pFont->pBitmap;
 8004768:	6819      	ldr	r1, [r3, #0]
  w = pGlyph->width;
 800476a:	7894      	ldrb	r4, [r2, #2]
  h = pGlyph->height;
 800476c:	78d2      	ldrb	r2, [r2, #3]
  pBitmap = pFont->pBitmap;
 800476e:	9106      	str	r1, [sp, #24]
  h = pGlyph->height;
 8004770:	9204      	str	r2, [sp, #16]
  xo = pGlyph->xOffset;
 8004772:	9a03      	ldr	r2, [sp, #12]
 8004774:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8004778:	9205      	str	r2, [sp, #20]
  yo = pGlyph->yOffset;
 800477a:	9a03      	ldr	r2, [sp, #12]
 800477c:	f992 8006 	ldrsb.w	r8, [r2, #6]
  bits = 0;
  bit = 0;
  yo_min = pFont->yOffsetMin;
  yo_max = pFont->yOffsetMax;

  switch(TextDrawMode)
 8004780:	4a87      	ldr	r2, [pc, #540]	; (80049a0 <ILI9341_DrawCharAtXY+0x28c>)
 8004782:	7812      	ldrb	r2, [r2, #0]
 8004784:	2a02      	cmp	r2, #2
 8004786:	d058      	beq.n	800483a <ILI9341_DrawCharAtXY+0x126>
 8004788:	2a03      	cmp	r2, #3
 800478a:	f000 80b9 	beq.w	8004900 <ILI9341_DrawCharAtXY+0x1ec>
 800478e:	2a01      	cmp	r2, #1
 8004790:	d128      	bne.n	80047e4 <ILI9341_DrawCharAtXY+0xd0>
  {
    case tdmNone:
      break;

    case tdmThisCharBar:
      Color_MSBFirst = SwapBytes(Color);
 8004792:	4648      	mov	r0, r9
 8004794:	f7ff fba6 	bl	8003ee4 <SwapBytes>
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8004798:	4b82      	ldr	r3, [pc, #520]	; (80049a4 <ILI9341_DrawCharAtXY+0x290>)
      Color_MSBFirst = SwapBytes(Color);
 800479a:	4682      	mov	sl, r0
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 800479c:	8818      	ldrh	r0, [r3, #0]
 800479e:	f7ff fba1 	bl	8003ee4 <SwapBytes>
      pMemChar = (uint16_t *)malloc(w * h * 2);
 80047a2:	9b04      	ldr	r3, [sp, #16]
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 80047a4:	4681      	mov	r9, r0
      pMemChar = (uint16_t *)malloc(w * h * 2);
 80047a6:	fb14 f003 	smulbb	r0, r4, r3
 80047aa:	0040      	lsls	r0, r0, #1
 80047ac:	f002 f83e 	bl	800682c <malloc>
      pMemCharPixel = pMemChar;

      for (yy = 0; yy < h; ++yy)
 80047b0:	2100      	movs	r1, #0
 80047b2:	0063      	lsls	r3, r4, #1
      pMemChar = (uint16_t *)malloc(w * h * 2);
 80047b4:	4606      	mov	r6, r0
      pMemCharPixel = pMemChar;
 80047b6:	4607      	mov	r7, r0
  bit = 0;
 80047b8:	468c      	mov	ip, r1
  bits = 0;
 80047ba:	460a      	mov	r2, r1
 80047bc:	9308      	str	r3, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 80047be:	b2c8      	uxtb	r0, r1
 80047c0:	9b04      	ldr	r3, [sp, #16]
 80047c2:	4283      	cmp	r3, r0
 80047c4:	d834      	bhi.n	8004830 <ILI9341_DrawCharAtXY+0x11c>
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
          ++pMemCharPixel;
          bits <<= 1;
        }
      }
      ILI9341_DrawPixels_MSBFirst(X + xo, Y + yo, w, h, pMemChar);
 80047c6:	9b05      	ldr	r3, [sp, #20]
 80047c8:	eb0b 0108 	add.w	r1, fp, r8
 80047cc:	9807      	ldr	r0, [sp, #28]
 80047ce:	4622      	mov	r2, r4
 80047d0:	b289      	uxth	r1, r1
 80047d2:	9600      	str	r6, [sp, #0]
 80047d4:	4418      	add	r0, r3
 80047d6:	9b04      	ldr	r3, [sp, #16]
 80047d8:	b280      	uxth	r0, r0
 80047da:	f7ff fe47 	bl	800446c <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 80047de:	4630      	mov	r0, r6
          ++pMemCharPixel;
          bits <<= 1;
        }
      }
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
      free(pMemChar);
 80047e0:	f002 f82c 	bl	800683c <free>
      }
      ILI9341_CSX_High();
      break;
  }

  if (w == 0)
 80047e4:	2c00      	cmp	r4, #0
 80047e6:	f040 80d0 	bne.w	800498a <ILI9341_DrawCharAtXY+0x276>
    return pGlyph->xAdvance;
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	7918      	ldrb	r0, [r3, #4]
  return xo + w;
}
 80047ee:	b00d      	add	sp, #52	; 0x34
 80047f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (!(bit++ & 7))
 80047f4:	f013 0f07 	tst.w	r3, #7
 80047f8:	f103 0c01 	add.w	ip, r3, #1
            bits = pBitmap[bo++];
 80047fc:	bf04      	itt	eq
 80047fe:	9a06      	ldreq	r2, [sp, #24]
 8004800:	1c6b      	addeq	r3, r5, #1
          if (!(bit++ & 7))
 8004802:	fa5f fc8c 	uxtb.w	ip, ip
            bits = pBitmap[bo++];
 8004806:	bf04      	itt	eq
 8004808:	5d52      	ldrbeq	r2, [r2, r5]
 800480a:	b29d      	uxtheq	r5, r3
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 800480c:	f012 0f80 	tst.w	r2, #128	; 0x80
          bits <<= 1;
 8004810:	ea4f 0242 	mov.w	r2, r2, lsl #1
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 8004814:	bf14      	ite	ne
 8004816:	4653      	movne	r3, sl
 8004818:	464b      	moveq	r3, r9
          bits <<= 1;
 800481a:	b2d2      	uxtb	r2, r2
          *pMemCharPixel = bits & 0x80 ? Color_MSBFirst : TextBackgroundColor_MSBFirst;
 800481c:	f82e 3b02 	strh.w	r3, [lr], #2
          if (!(bit++ & 7))
 8004820:	4663      	mov	r3, ip
        for (xx = 0; xx < w; ++xx)
 8004822:	4298      	cmp	r0, r3
 8004824:	d1e6      	bne.n	80047f4 <ILI9341_DrawCharAtXY+0xe0>
 8004826:	9b08      	ldr	r3, [sp, #32]
 8004828:	3101      	adds	r1, #1
 800482a:	4684      	mov	ip, r0
 800482c:	441f      	add	r7, r3
      for (yy = 0; yy < h; ++yy)
 800482e:	e7c6      	b.n	80047be <ILI9341_DrawCharAtXY+0xaa>
 8004830:	4663      	mov	r3, ip
 8004832:	46be      	mov	lr, r7
        for (xx = 0; xx < w; ++xx)
 8004834:	1918      	adds	r0, r3, r4
 8004836:	b2c0      	uxtb	r0, r0
 8004838:	e7f3      	b.n	8004822 <ILI9341_DrawCharAtXY+0x10e>
  yo_max = pFont->yOffsetMax;
 800483a:	f993 600c 	ldrsb.w	r6, [r3, #12]
      Color_MSBFirst = SwapBytes(Color);
 800483e:	4648      	mov	r0, r9
 8004840:	f7ff fb50 	bl	8003ee4 <SwapBytes>
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8004844:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <ILI9341_DrawCharAtXY+0x290>)
      CharHeight = yo_max - yo_min + 1;
 8004846:	3601      	adds	r6, #1
      Color_MSBFirst = SwapBytes(Color);
 8004848:	9009      	str	r0, [sp, #36]	; 0x24
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 800484a:	8818      	ldrh	r0, [r3, #0]
 800484c:	f7ff fb4a 	bl	8003ee4 <SwapBytes>
      CharHeight = yo_max - yo_min + 1;
 8004850:	1bf6      	subs	r6, r6, r7
      CharWidth = pGlyph->xAdvance;
 8004852:	9b03      	ldr	r3, [sp, #12]
      TextBackgroundColor_MSBFirst = SwapBytes(TextBackgroundColor);
 8004854:	900b      	str	r0, [sp, #44]	; 0x2c
      CharWidth = pGlyph->xAdvance;
 8004856:	f893 a004 	ldrb.w	sl, [r3, #4]
      CharHeight = yo_max - yo_min + 1;
 800485a:	b2f3      	uxtb	r3, r6
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 800485c:	fb1a f203 	smulbb	r2, sl, r3
      CharHeight = yo_max - yo_min + 1;
 8004860:	9308      	str	r3, [sp, #32]
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 8004862:	0050      	lsls	r0, r2, #1
 8004864:	920a      	str	r2, [sp, #40]	; 0x28
 8004866:	f001 ffe1 	bl	800682c <malloc>
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800486a:	2100      	movs	r1, #0
      pMemChar = (uint16_t *)malloc(CharWidth * CharHeight * sizeof(uint16_t));
 800486c:	4681      	mov	r9, r0
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 800486e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004872:	b288      	uxth	r0, r1
 8004874:	4282      	cmp	r2, r0
 8004876:	dc1c      	bgt.n	80048b2 <ILI9341_DrawCharAtXY+0x19e>
 8004878:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800487c:	eba8 0807 	sub.w	r8, r8, r7
 8004880:	2200      	movs	r2, #0
 8004882:	930a      	str	r3, [sp, #40]	; 0x28
 8004884:	9b05      	ldr	r3, [sp, #20]
  bit = 0;
 8004886:	4611      	mov	r1, r2
 8004888:	fb0a 3808 	mla	r8, sl, r8, r3
  bits = 0;
 800488c:	4613      	mov	r3, r2
 800488e:	eb09 0848 	add.w	r8, r9, r8, lsl #1
      for (yy = 0; yy < h; ++yy)
 8004892:	b2d0      	uxtb	r0, r2
 8004894:	9e04      	ldr	r6, [sp, #16]
 8004896:	4286      	cmp	r6, r0
 8004898:	d80f      	bhi.n	80048ba <ILI9341_DrawCharAtXY+0x1a6>
      ILI9341_DrawPixels_MSBFirst(X, Y + yo_min, CharWidth, CharHeight, pMemChar);
 800489a:	eb0b 0107 	add.w	r1, fp, r7
 800489e:	9807      	ldr	r0, [sp, #28]
 80048a0:	9b08      	ldr	r3, [sp, #32]
 80048a2:	4652      	mov	r2, sl
 80048a4:	b289      	uxth	r1, r1
 80048a6:	f8cd 9000 	str.w	r9, [sp]
 80048aa:	f7ff fddf 	bl	800446c <ILI9341_DrawPixels_MSBFirst>
      free(pMemChar);
 80048ae:	4648      	mov	r0, r9
 80048b0:	e796      	b.n	80047e0 <ILI9341_DrawCharAtXY+0xcc>
        *pMemCharPixel++ = TextBackgroundColor_MSBFirst;
 80048b2:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
      for (uint16_t PixelIndex = 0; PixelIndex < CharWidth * CharHeight; ++PixelIndex)
 80048b6:	3101      	adds	r1, #1
 80048b8:	e7db      	b.n	8004872 <ILI9341_DrawCharAtXY+0x15e>
        for (xx = 0; xx < w; ++xx)
 80048ba:	2000      	movs	r0, #0
 80048bc:	fa5f fc80 	uxtb.w	ip, r0
 80048c0:	fa51 fe80 	uxtab	lr, r1, r0
 80048c4:	4564      	cmp	r4, ip
 80048c6:	fa5f fe8e 	uxtb.w	lr, lr
 80048ca:	d805      	bhi.n	80048d8 <ILI9341_DrawCharAtXY+0x1c4>
 80048cc:	4421      	add	r1, r4
 80048ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80048d0:	3201      	adds	r2, #1
 80048d2:	b2c9      	uxtb	r1, r1
      for (yy = 0; yy < h; ++yy)
 80048d4:	4480      	add	r8, r0
 80048d6:	e7dc      	b.n	8004892 <ILI9341_DrawCharAtXY+0x17e>
          if (!(bit++ & 7))
 80048d8:	f01e 0f07 	tst.w	lr, #7
            bits = pBitmap[bo++];
 80048dc:	bf01      	itttt	eq
 80048de:	9b06      	ldreq	r3, [sp, #24]
 80048e0:	f105 0c01 	addeq.w	ip, r5, #1
 80048e4:	5d5b      	ldrbeq	r3, [r3, r5]
 80048e6:	fa1f f58c 	uxtheq.w	r5, ip
          if (bits & 0x80)
 80048ea:	061e      	lsls	r6, r3, #24
          bits <<= 1;
 80048ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
            *pMemCharPixel = Color_MSBFirst;
 80048f0:	bf48      	it	mi
 80048f2:	9e09      	ldrmi	r6, [sp, #36]	; 0x24
          bits <<= 1;
 80048f4:	b2db      	uxtb	r3, r3
            *pMemCharPixel = Color_MSBFirst;
 80048f6:	bf48      	it	mi
 80048f8:	f828 6010 	strhmi.w	r6, [r8, r0, lsl #1]
        for (xx = 0; xx < w; ++xx)
 80048fc:	3001      	adds	r0, #1
 80048fe:	e7dd      	b.n	80048bc <ILI9341_DrawCharAtXY+0x1a8>
      ILI9341_CSX_Low();
 8004900:	2102      	movs	r1, #2
 8004902:	2200      	movs	r2, #0
 8004904:	4828      	ldr	r0, [pc, #160]	; (80049a8 <ILI9341_DrawCharAtXY+0x294>)
      for (yy = 0; yy < h; ++yy)
 8004906:	2600      	movs	r6, #0
      ILI9341_CSX_Low();
 8004908:	f7fc fa0e 	bl	8000d28 <HAL_GPIO_WritePin>
      for (yy = 0; yy < h; ++yy)
 800490c:	9907      	ldr	r1, [sp, #28]
 800490e:	9b05      	ldr	r3, [sp, #20]
  bit = 0;
 8004910:	46b2      	mov	sl, r6
  bits = 0;
 8004912:	4637      	mov	r7, r6
 8004914:	4419      	add	r1, r3
 8004916:	b28b      	uxth	r3, r1
 8004918:	9307      	str	r3, [sp, #28]
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 800491a:	eb0b 0308 	add.w	r3, fp, r8
 800491e:	9308      	str	r3, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 8004920:	b2f3      	uxtb	r3, r6
 8004922:	9a04      	ldr	r2, [sp, #16]
 8004924:	429a      	cmp	r2, r3
 8004926:	d92a      	bls.n	800497e <ILI9341_DrawCharAtXY+0x26a>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 8004928:	9a08      	ldr	r2, [sp, #32]
      for (yy = 0; yy < h; ++yy)
 800492a:	4653      	mov	r3, sl
 800492c:	f8dd 801c 	ldr.w	r8, [sp, #28]
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 8004930:	1991      	adds	r1, r2, r6
 8004932:	b209      	sxth	r1, r1
 8004934:	e01b      	b.n	800496e <ILI9341_DrawCharAtXY+0x25a>
          if (!(bit++ & 7))
 8004936:	075a      	lsls	r2, r3, #29
 8004938:	f103 0b01 	add.w	fp, r3, #1
            bits = pBitmap[bo++];
 800493c:	bf04      	itt	eq
 800493e:	9a06      	ldreq	r2, [sp, #24]
 8004940:	1c6b      	addeq	r3, r5, #1
          if (!(bit++ & 7))
 8004942:	fa5f fb8b 	uxtb.w	fp, fp
            bits = pBitmap[bo++];
 8004946:	bf04      	itt	eq
 8004948:	5d57      	ldrbeq	r7, [r2, r5]
 800494a:	b29d      	uxtheq	r5, r3
          if (bits & 0x80)
 800494c:	063b      	lsls	r3, r7, #24
 800494e:	d507      	bpl.n	8004960 <ILI9341_DrawCharAtXY+0x24c>
            ILI9341_DrawPixel(X + xo + xx, Y + yo + yy, Color, 0);
 8004950:	2300      	movs	r3, #0
 8004952:	464a      	mov	r2, r9
 8004954:	fa0f f088 	sxth.w	r0, r8
 8004958:	9109      	str	r1, [sp, #36]	; 0x24
 800495a:	f7ff fd4b 	bl	80043f4 <ILI9341_DrawPixel>
 800495e:	9909      	ldr	r1, [sp, #36]	; 0x24
          bits <<= 1;
 8004960:	007f      	lsls	r7, r7, #1
 8004962:	f108 0801 	add.w	r8, r8, #1
          if (!(bit++ & 7))
 8004966:	465b      	mov	r3, fp
          bits <<= 1;
 8004968:	b2ff      	uxtb	r7, r7
        for (xx = 0; xx < w; ++xx)
 800496a:	fa1f f888 	uxth.w	r8, r8
 800496e:	eb0a 0204 	add.w	r2, sl, r4
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	4293      	cmp	r3, r2
 8004976:	d1de      	bne.n	8004936 <ILI9341_DrawCharAtXY+0x222>
      for (yy = 0; yy < h; ++yy)
 8004978:	3601      	adds	r6, #1
        for (xx = 0; xx < w; ++xx)
 800497a:	469a      	mov	sl, r3
 800497c:	e7d0      	b.n	8004920 <ILI9341_DrawCharAtXY+0x20c>
      ILI9341_CSX_High();
 800497e:	2201      	movs	r2, #1
 8004980:	2102      	movs	r1, #2
 8004982:	4809      	ldr	r0, [pc, #36]	; (80049a8 <ILI9341_DrawCharAtXY+0x294>)
 8004984:	f7fc f9d0 	bl	8000d28 <HAL_GPIO_WritePin>
      break;
 8004988:	e72c      	b.n	80047e4 <ILI9341_DrawCharAtXY+0xd0>
  return xo + w;
 800498a:	9805      	ldr	r0, [sp, #20]
 800498c:	4420      	add	r0, r4
 800498e:	b2c0      	uxtb	r0, r0
 8004990:	e72d      	b.n	80047ee <ILI9341_DrawCharAtXY+0xda>
    return 0;
 8004992:	2000      	movs	r0, #0
 8004994:	e72b      	b.n	80047ee <ILI9341_DrawCharAtXY+0xda>
 8004996:	bf00      	nop
 8004998:	200004a0 	.word	0x200004a0
 800499c:	2000000b 	.word	0x2000000b
 80049a0:	2000000a 	.word	0x2000000a
 80049a4:	20000498 	.word	0x20000498
 80049a8:	40020800 	.word	0x40020800

080049ac <ILI9341_SetTextColor>:

uint16_t ILI9341_SetTextColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextColor;
 80049ac:	4b02      	ldr	r3, [pc, #8]	; (80049b8 <ILI9341_SetTextColor+0xc>)
 80049ae:	881a      	ldrh	r2, [r3, #0]
  TextColor = Value;
 80049b0:	8018      	strh	r0, [r3, #0]
  return Result;
}
 80049b2:	4610      	mov	r0, r2
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000008 	.word	0x20000008

080049bc <ILI9341_SetTextBackgroundColor>:

uint16_t ILI9341_SetTextBackgroundColor(uint16_t Value)
{
  uint16_t Result;

  Result = TextBackgroundColor;
 80049bc:	4b02      	ldr	r3, [pc, #8]	; (80049c8 <ILI9341_SetTextBackgroundColor+0xc>)
 80049be:	881a      	ldrh	r2, [r3, #0]
  TextBackgroundColor = Value;
 80049c0:	8018      	strh	r0, [r3, #0]
  return Result;
}
 80049c2:	4610      	mov	r0, r2
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000498 	.word	0x20000498

080049cc <ILI9341_SetTextDrawMode>:

TextDrawMode_t ILI9341_SetTextDrawMode(TextDrawMode_t Value)
{
 80049cc:	4602      	mov	r2, r0
  TextDrawMode_t Result;

  Result = TextDrawMode;
 80049ce:	4b02      	ldr	r3, [pc, #8]	; (80049d8 <ILI9341_SetTextDrawMode+0xc>)
 80049d0:	7818      	ldrb	r0, [r3, #0]
  TextDrawMode = Value;
 80049d2:	701a      	strb	r2, [r3, #0]
  return Result;
}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	2000000a 	.word	0x2000000a

080049dc <ILI9341_DrawTextAtXY>:
  TextVerticalOrigin = Value;
  return Result;
}

void ILI9341_DrawTextAtXY(const char *Text, uint16_t X, uint16_t Y, TextPosition_t TextPosition)
{
 80049dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e0:	460d      	mov	r5, r1
 80049e2:	4690      	mov	r8, r2
 80049e4:	461f      	mov	r7, r3
  uint16_t NumChars;
  uint8_t DX;
  
  pText = (uint8_t *) Text;

  if (!pText)
 80049e6:	4604      	mov	r4, r0
 80049e8:	b158      	cbz	r0, 8004a02 <ILI9341_DrawTextAtXY+0x26>
    return;

  NumChars = strlen(Text);
 80049ea:	f7fb fc29 	bl	8000240 <strlen>

  switch (TextPosition)
 80049ee:	2f02      	cmp	r7, #2
  NumChars = strlen(Text);
 80049f0:	4606      	mov	r6, r0
  switch (TextPosition)
 80049f2:	d008      	beq.n	8004a06 <ILI9341_DrawTextAtXY+0x2a>
 80049f4:	2f03      	cmp	r7, #3
 80049f6:	d00d      	beq.n	8004a14 <ILI9341_DrawTextAtXY+0x38>
 80049f8:	fa14 f686 	uxtah	r6, r4, r6
  }

  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
  {
    Ch = *pText;
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 80049fc:	4f0d      	ldr	r7, [pc, #52]	; (8004a34 <ILI9341_DrawTextAtXY+0x58>)
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 80049fe:	42b4      	cmp	r4, r6
 8004a00:	d10d      	bne.n	8004a1e <ILI9341_DrawTextAtXY+0x42>
    ++pText;
    X += DX;
  }
}
 8004a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      X -= ILI9341_GetTextWidth(Text) / 2;
 8004a06:	4620      	mov	r0, r4
 8004a08:	f7ff fe72 	bl	80046f0 <ILI9341_GetTextWidth>
 8004a0c:	eba5 0550 	sub.w	r5, r5, r0, lsr #1
      X -= ILI9341_GetTextWidth(Text);
 8004a10:	b2ad      	uxth	r5, r5
      break;
 8004a12:	e7f1      	b.n	80049f8 <ILI9341_DrawTextAtXY+0x1c>
      X -= ILI9341_GetTextWidth(Text);
 8004a14:	4620      	mov	r0, r4
 8004a16:	f7ff fe6b 	bl	80046f0 <ILI9341_GetTextWidth>
 8004a1a:	1a2d      	subs	r5, r5, r0
 8004a1c:	e7f8      	b.n	8004a10 <ILI9341_DrawTextAtXY+0x34>
    DX = ILI9341_DrawCharAtXY(Ch, X, Y, TextColor);
 8004a1e:	4629      	mov	r1, r5
 8004a20:	883b      	ldrh	r3, [r7, #0]
 8004a22:	4642      	mov	r2, r8
 8004a24:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004a28:	f7ff fe74 	bl	8004714 <ILI9341_DrawCharAtXY>
    X += DX;
 8004a2c:	4405      	add	r5, r0
 8004a2e:	b2ad      	uxth	r5, r5
  for (uint16_t CharIndex = 0; CharIndex < NumChars; ++CharIndex)
 8004a30:	e7e5      	b.n	80049fe <ILI9341_DrawTextAtXY+0x22>
 8004a32:	bf00      	nop
 8004a34:	20000008 	.word	0x20000008

08004a38 <CaptureCallback>:
// static uint16_t AudioInput_MeasuredSampleRate_DeltaCount = 0;
static uint32_t AudioInput_MeasuredSampleRate_FrameCounter = 0;

static void CaptureCallback(TIM_HandleTypeDef *htim)
{
  ++AudioInput_MeasuredSampleRate_FrameCounter;
 8004a38:	4a02      	ldr	r2, [pc, #8]	; (8004a44 <CaptureCallback+0xc>)
 8004a3a:	6813      	ldr	r3, [r2, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	6013      	str	r3, [r2, #0]

//  uint16_t AudioInput_MeasuredSampleRate_Count;
//  AudioInput_MeasuredSampleRate_Count = __HAL_TIM_GetCounter(htim);
//  AudioInput_MeasuredSampleRate_DeltaCount = AudioInput_MeasuredSampleRate_Count - AudioInput_MeasuredSampleRate_PreviousCount;
//  AudioInput_MeasuredSampleRate_PreviousCount = AudioInput_MeasuredSampleRate_Count;
}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	200004a8 	.word	0x200004a8

08004a48 <HAL_SPDIFRX_ErrorCallback>:
}
 8004a48:	4770      	bx	lr
	...

08004a4c <SPDIFRX_GetNumErrors>:
static uint8_t SPDIFRX_NumSyncErrors = 0;
static uint8_t SPDIFRX_NumFrameErrors = 0;

void SPDIFRX_GetNumErrors(uint8_t *pNumTransitionErrors, uint8_t *pNumSyncErrors, uint8_t *pNumFrameErrors)
{
  *pNumTransitionErrors = SPDIFRX_NumTransitionErrors;
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <SPDIFRX_GetNumErrors+0x14>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	7003      	strb	r3, [r0, #0]
  *pNumSyncErrors = SPDIFRX_NumSyncErrors;
 8004a52:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <SPDIFRX_GetNumErrors+0x18>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	700b      	strb	r3, [r1, #0]
  *pNumFrameErrors = SPDIFRX_NumFrameErrors;
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <SPDIFRX_GetNumErrors+0x1c>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	7013      	strb	r3, [r2, #0]
}
 8004a5e:	4770      	bx	lr
 8004a60:	200018d6 	.word	0x200018d6
 8004a64:	200018d5 	.word	0x200018d5
 8004a68:	200018d4 	.word	0x200018d4
 8004a6c:	00000000 	.word	0x00000000

08004a70 <SPDIFRX_CopySamplesToGivenBuffer>:
//       =>  ~33 MBytes/sec
//    => Time to calculate sample index step size for SPDIF samples: 1.9 us
//    => Time to calculate and use 320 x 2 cubics: 1.255 ms
// => Proportion of available time spent processing samples: 20%
// ============================================================================
{
 8004a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a74:	460f      	mov	r7, r1
  uint32_t SampleOffsetIndex, LocalSampleIndex, GlobalSampleIndex;
  int32_t SourceSampleIndex0, SourceSampleIndex1, SourceSampleIndex2, SourceSampleIndex3;
  AudioSample24_t SourceSample0, SourceSample1, SourceSample2, SourceSample3;
  AudioSample24_t TargetSample;

  if (DisableInterruptHandler)
 8004a76:	49ce      	ldr	r1, [pc, #824]	; (8004db0 <SPDIFRX_CopySamplesToGivenBuffer+0x340>)
{
 8004a78:	4605      	mov	r5, r0
 8004a7a:	ed2d 8b0a 	vpush	{d8-d12}
  if (DisableInterruptHandler)
 8004a7e:	780b      	ldrb	r3, [r1, #0]
{
 8004a80:	b083      	sub	sp, #12
  if (DisableInterruptHandler)
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d137      	bne.n	8004af6 <SPDIFRX_CopySamplesToGivenBuffer+0x86>
    return;

  uint8_t SPDIFRX_State = hspdif.Instance->CR & 0x03;
 8004a86:	4ecb      	ldr	r6, [pc, #812]	; (8004db4 <SPDIFRX_CopySamplesToGivenBuffer+0x344>)
 8004a88:	f8df 8374 	ldr.w	r8, [pc, #884]	; 8004e00 <SPDIFRX_CopySamplesToGivenBuffer+0x390>
 8004a8c:	6833      	ldr	r3, [r6, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]

  if ((SPDIFRX_State != 0x03) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_TERR) != RESET) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_SERR) != RESET) || (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_FERR) != RESET))
 8004a90:	f002 0203 	and.w	r2, r2, #3
 8004a94:	2a03      	cmp	r2, #3
 8004a96:	d109      	bne.n	8004aac <SPDIFRX_CopySamplesToGivenBuffer+0x3c>
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	05d0      	lsls	r0, r2, #23
 8004a9c:	d406      	bmi.n	8004aac <SPDIFRX_CopySamplesToGivenBuffer+0x3c>
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	0612      	lsls	r2, r2, #24
 8004aa2:	d403      	bmi.n	8004aac <SPDIFRX_CopySamplesToGivenBuffer+0x3c>
 8004aa4:	689c      	ldr	r4, [r3, #8]
 8004aa6:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8004aaa:	d029      	beq.n	8004b00 <SPDIFRX_CopySamplesToGivenBuffer+0x90>
  {
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_TERR))
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	05d4      	lsls	r4, r2, #23
      ++SPDIFRX_NumTransitionErrors;
 8004ab0:	bf41      	itttt	mi
 8004ab2:	48c1      	ldrmi	r0, [pc, #772]	; (8004db8 <SPDIFRX_CopySamplesToGivenBuffer+0x348>)
 8004ab4:	7802      	ldrbmi	r2, [r0, #0]
 8004ab6:	3201      	addmi	r2, #1
 8004ab8:	7002      	strbmi	r2, [r0, #0]
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_SERR))
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	0610      	lsls	r0, r2, #24
      ++SPDIFRX_NumSyncErrors;
 8004abe:	bf41      	itttt	mi
 8004ac0:	48be      	ldrmi	r0, [pc, #760]	; (8004dbc <SPDIFRX_CopySamplesToGivenBuffer+0x34c>)
 8004ac2:	7802      	ldrbmi	r2, [r0, #0]
 8004ac4:	3201      	addmi	r2, #1
 8004ac6:	7002      	strbmi	r2, [r0, #0]
    if (__HAL_SPDIFRX_GET_FLAG(&hspdif, SPDIFRX_FLAG_FERR))
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	0652      	lsls	r2, r2, #25
      ++SPDIFRX_NumFrameErrors;
 8004acc:	bf41      	itttt	mi
 8004ace:	48bc      	ldrmi	r0, [pc, #752]	; (8004dc0 <SPDIFRX_CopySamplesToGivenBuffer+0x350>)
 8004ad0:	7802      	ldrbmi	r2, [r0, #0]
 8004ad2:	3201      	addmi	r2, #1
 8004ad4:	7002      	strbmi	r2, [r0, #0]

    ReceiveErrorOccurred = 1;
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	4aba      	ldr	r2, [pc, #744]	; (8004dc4 <SPDIFRX_CopySamplesToGivenBuffer+0x354>)
    DisableInterruptHandler = 1;
 8004ada:	7008      	strb	r0, [r1, #0]
    ReceiveErrorOccurred = 1;
 8004adc:	7010      	strb	r0, [r2, #0]
    __HAL_SPDIFRX_IDLE(&hspdif);
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	f022 0203 	bic.w	r2, r2, #3
 8004ae4:	601a      	str	r2, [r3, #0]
    SPDIFRX_MuteOutput_Callback(1); //!!! May need to sort out Tick priorities and being called on main thread and in interrupt etc.
 8004ae6:	f000 fd4b 	bl	8005580 <SPDIFRX_MuteOutput_Callback>
    SPDIFRX_Locked_Callback(0);
 8004aea:	2000      	movs	r0, #0
 8004aec:	f000 fd12 	bl	8005514 <SPDIFRX_Locked_Callback>
    WasLocked = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f888 3000 	strb.w	r3, [r8]

    BufferReadPosition += SPDIFRX_BufferSampleStepSize;
    while (BufferReadPosition >= SPDIFRX_Buffer_NumSamples)
      BufferReadPosition -= SPDIFRX_Buffer_NumSamples;
  }
}
 8004af6:	b003      	add	sp, #12
 8004af8:	ecbd 8b0a 	vpop	{d8-d12}
 8004afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memcpy(SPDIFRX_SamplesSnapShot, SPDIFRX_IncomingSamples, sizeof(SPDIFRX_SamplesSnapShot));
 8004b00:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8004b04:	49b0      	ldr	r1, [pc, #704]	; (8004dc8 <SPDIFRX_CopySamplesToGivenBuffer+0x358>)
 8004b06:	48b1      	ldr	r0, [pc, #708]	; (8004dcc <SPDIFRX_CopySamplesToGivenBuffer+0x35c>)
 8004b08:	f001 fea0 	bl	800684c <memcpy>
  SPDIFRX_BufferWriteIndex = SPDIFRX_Buffer_NumSamples - 0.5f * hspdif.hdmaDrRx->Instance->NDTR; // NB: DMA counts in channel samples not LR samples. It also counts backward. It also starts at the maximum value, not one less. However, it is zero before it becomes active [PJB].
 8004b0c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004b0e:	ed9f 9ab0 	vldr	s18, [pc, #704]	; 8004dd0 <SPDIFRX_CopySamplesToGivenBuffer+0x360>
 8004b12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b16:	681b      	ldr	r3, [r3, #0]
  if (!BufferReadPositionInitialized)
 8004b18:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 8004e04 <SPDIFRX_CopySamplesToGivenBuffer+0x394>
  SPDIFRX_BufferWriteIndex = SPDIFRX_Buffer_NumSamples - 0.5f * hspdif.hdmaDrRx->Instance->NDTR; // NB: DMA counts in channel samples not LR samples. It also counts backward. It also starts at the maximum value, not one less. However, it is zero before it becomes active [PJB].
 8004b1c:	eeb0 8a49 	vmov.f32	s16, s18
 8004b20:	edd3 7a01 	vldr	s15, [r3, #4]
  if (!BufferReadPositionInitialized)
 8004b24:	f899 3000 	ldrb.w	r3, [r9]
  SPDIFRX_BufferWriteIndex = SPDIFRX_Buffer_NumSamples - 0.5f * hspdif.hdmaDrRx->Instance->NDTR; // NB: DMA counts in channel samples not LR samples. It also counts backward. It also starts at the maximum value, not one less. However, it is zero before it becomes active [PJB].
 8004b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2c:	4ea9      	ldr	r6, [pc, #676]	; (8004dd4 <SPDIFRX_CopySamplesToGivenBuffer+0x364>)
 8004b2e:	eea7 8ac7 	vfms.f32	s16, s15, s14
  if (!BufferReadPositionInitialized)
 8004b32:	b9a3      	cbnz	r3, 8004b5e <SPDIFRX_CopySamplesToGivenBuffer+0xee>
    BufferReadPosition = Wrap_int(SPDIFRX_BufferWriteIndex - TargetReadLagProportion * SPDIFRX_Buffer_NumSamples, SPDIFRX_Buffer_NumSamples);
 8004b34:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004dd8 <SPDIFRX_CopySamplesToGivenBuffer+0x368>
 8004b38:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004b3c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b44:	ee17 0a90 	vmov	r0, s15
 8004b48:	f7ff f9e8 	bl	8003f1c <Wrap_int>
 8004b4c:	ee07 0a90 	vmov	s15, r0
    BufferReadPositionInitialized = 1;
 8004b50:	2301      	movs	r3, #1
    BufferReadPosition = Wrap_int(SPDIFRX_BufferWriteIndex - TargetReadLagProportion * SPDIFRX_Buffer_NumSamples, SPDIFRX_Buffer_NumSamples);
 8004b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    BufferReadPositionInitialized = 1;
 8004b56:	f889 3000 	strb.w	r3, [r9]
    BufferReadPosition = Wrap_int(SPDIFRX_BufferWriteIndex - TargetReadLagProportion * SPDIFRX_Buffer_NumSamples, SPDIFRX_Buffer_NumSamples);
 8004b5a:	edc6 7a00 	vstr	s15, [r6]
  NumSamplesReadIsBehindWrite = SPDIFRX_BufferWriteIndex - BufferReadPosition;
 8004b5e:	edd6 7a00 	vldr	s15, [r6]
  float ClampedNormalizedError = Clamp_float(UnclampedNormalizedError, -1.0f, 1.0f);
 8004b62:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004b66:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
  NumSamplesReadIsBehindWrite = SPDIFRX_BufferWriteIndex - BufferReadPosition;
 8004b6a:	ee78 7a67 	vsub.f32	s15, s16, s15
  if (NumSamplesReadIsBehindWrite < 0) NumSamplesReadIsBehindWrite += SPDIFRX_Buffer_NumSamples;
 8004b6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b76:	bf48      	it	mi
 8004b78:	ee77 7a89 	vaddmi.f32	s15, s15, s18
  ActualReadLagProportion = (float)NumSamplesReadIsBehindWrite / (float)SPDIFRX_Buffer_NumSamples;
 8004b7c:	ee87 8a89 	vdiv.f32	s16, s15, s18
  float UnclampedNormalizedError = (1.0f / (1.0f - TargetReadLagProportion)) * (ActualReadLagProportion - TargetReadLagProportion);
 8004b80:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
 8004b84:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004b88:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8004b8c:	ee28 8a27 	vmul.f32	s16, s16, s15
  float ClampedNormalizedError = Clamp_float(UnclampedNormalizedError, -1.0f, 1.0f);
 8004b90:	eeb0 0a48 	vmov.f32	s0, s16
 8004b94:	f7ff f9b4 	bl	8003f00 <Clamp_float>
  *o_InputBufferReadPointerInRange = ((UnclampedNormalizedError >= -1.0f) || (UnclampedNormalizedError <= 1.0f));
 8004b98:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8004b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ba0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba8:	f280 80f9 	bge.w	8004d9e <SPDIFRX_CopySamplesToGivenBuffer+0x32e>
 8004bac:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8004bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb4:	bf94      	ite	ls
 8004bb6:	2301      	movls	r3, #1
 8004bb8:	2300      	movhi	r3, #0
  IntegralOfNormalizedError = 0.95f * IntegralOfNormalizedError + ClampedNormalizedError;
 8004bba:	4a88      	ldr	r2, [pc, #544]	; (8004ddc <SPDIFRX_CopySamplesToGivenBuffer+0x36c>)
 8004bbc:	eeb0 6a40 	vmov.f32	s12, s0
 8004bc0:	eddf 7a87 	vldr	s15, [pc, #540]	; 8004de0 <SPDIFRX_CopySamplesToGivenBuffer+0x370>
 8004bc4:	edd2 6a00 	vldr	s13, [r2]
 8004bc8:	4e86      	ldr	r6, [pc, #536]	; (8004de4 <SPDIFRX_CopySamplesToGivenBuffer+0x374>)
 8004bca:	eea6 6aa7 	vfma.f32	s12, s13, s15
  SPDIFRX_BufferSampleStepSize = ((float)InputSampleRate / (float)OutputSampleRate) * (1.0f + Kp * ClampedNormalizedError + 2E-4 * IntegralOfNormalizedError);
 8004bce:	eddf 7a86 	vldr	s15, [pc, #536]	; 8004de8 <SPDIFRX_CopySamplesToGivenBuffer+0x378>
 8004bd2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004bd6:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8004da8 <SPDIFRX_CopySamplesToGivenBuffer+0x338>
  IntegralOfNormalizedError = 0.95f * IntegralOfNormalizedError + ClampedNormalizedError;
 8004bda:	ed82 6a00 	vstr	s12, [r2]
  SPDIFRX_BufferSampleStepSize = ((float)InputSampleRate / (float)OutputSampleRate) * (1.0f + Kp * ClampedNormalizedError + 2E-4 * IntegralOfNormalizedError);
 8004bde:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8004be2:	4a82      	ldr	r2, [pc, #520]	; (8004dec <SPDIFRX_CopySamplesToGivenBuffer+0x37c>)
 8004be4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004be8:	eea6 7b05 	vfma.f64	d7, d6, d5
 8004bec:	edd2 5a00 	vldr	s11, [r2]
 8004bf0:	4a7f      	ldr	r2, [pc, #508]	; (8004df0 <SPDIFRX_CopySamplesToGivenBuffer+0x380>)
 8004bf2:	edd2 6a00 	vldr	s13, [r2]
 8004bf6:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8004bfa:	4a7e      	ldr	r2, [pc, #504]	; (8004df4 <SPDIFRX_CopySamplesToGivenBuffer+0x384>)
 8004bfc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004c00:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8004c04:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8004c08:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c0c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8004c10:	ed82 7a00 	vstr	s14, [r2]
  if (InputBufferReadPointerInRange)
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80f7 	beq.w	8004e08 <SPDIFRX_CopySamplesToGivenBuffer+0x398>
    NumConsecutiveInputBufferReadPointerInRange = Min_int32(NumConsecutiveInputBufferReadPointerInRange + 1, 1000000);
 8004c1a:	6830      	ldr	r0, [r6, #0]
 8004c1c:	4976      	ldr	r1, [pc, #472]	; (8004df8 <SPDIFRX_CopySamplesToGivenBuffer+0x388>)
 8004c1e:	3001      	adds	r0, #1
 8004c20:	f7ff f963 	bl	8003eea <Min_int32>
 8004c24:	6030      	str	r0, [r6, #0]
  IsLocked = NumConsecutiveInputBufferReadPointerInRange >= 20; //!!! Hardwired.
 8004c26:	f8d6 9000 	ldr.w	r9, [r6]
 8004c2a:	f1b9 0f13 	cmp.w	r9, #19
 8004c2e:	bf94      	ite	ls
 8004c30:	2600      	movls	r6, #0
 8004c32:	2601      	movhi	r6, #1
  SPDIFRX_Locked_Callback(IsLocked);
 8004c34:	4630      	mov	r0, r6
 8004c36:	f000 fc6d 	bl	8005514 <SPDIFRX_Locked_Callback>
  if (IsLocked != WasLocked)
 8004c3a:	f898 3000 	ldrb.w	r3, [r8]
 8004c3e:	42b3      	cmp	r3, r6
 8004c40:	d008      	beq.n	8004c54 <SPDIFRX_CopySamplesToGivenBuffer+0x1e4>
    SPDIFRX_MuteOutput_Callback(!IsLocked);
 8004c42:	f1b9 0f13 	cmp.w	r9, #19
 8004c46:	bf8c      	ite	hi
 8004c48:	2000      	movhi	r0, #0
 8004c4a:	2001      	movls	r0, #1
 8004c4c:	f000 fc98 	bl	8005580 <SPDIFRX_MuteOutput_Callback>
    WasLocked = IsLocked;
 8004c50:	f888 6000 	strb.w	r6, [r8]
    SampleOffsetIndex = SPDIFRX_Buffer_NumSamples / 2;
 8004c54:	2f02      	cmp	r7, #2
    BufferReadPosition_Fractional = modf(BufferReadPosition, &BufferReadPosition_Integral);
 8004c56:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8004dd4 <SPDIFRX_CopySamplesToGivenBuffer+0x364>
    SampleOffsetIndex = SPDIFRX_Buffer_NumSamples / 2;
 8004c5a:	bf08      	it	eq
 8004c5c:	f44f 74a0 	moveq.w	r4, #320	; 0x140
  for(LocalSampleIndex = 0; LocalSampleIndex < SPDIFRX_Buffer_NumSamples / 2; ++LocalSampleIndex)
 8004c60:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
 8004c64:	f505 6520 	add.w	r5, r5, #2560	; 0xa00
 8004c68:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    BufferReadPosition_Fractional = modf(BufferReadPosition, &BufferReadPosition_Integral);
 8004c6c:	ed98 0a00 	vldr	s0, [r8]
 8004c70:	4668      	mov	r0, sp
 8004c72:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004c76:	f002 fb39 	bl	80072ec <modf>
    SourceSampleIndex0 = Wrap_int((int)(BufferReadPosition_Integral) - 1, SPDIFRX_Buffer_NumSamples);
 8004c7a:	f44f 7120 	mov.w	r1, #640	; 0x280
    BufferReadPosition_Fractional = modf(BufferReadPosition, &BufferReadPosition_Integral);
 8004c7e:	eeb0 ab40 	vmov.f64	d10, d0
    SourceSampleIndex0 = Wrap_int((int)(BufferReadPosition_Integral) - 1, SPDIFRX_Buffer_NumSamples);
 8004c82:	ed9d 7b00 	vldr	d7, [sp]
 8004c86:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004c8a:	ee17 0a90 	vmov	r0, s15
 8004c8e:	3801      	subs	r0, #1
 8004c90:	f7ff f944 	bl	8003f1c <Wrap_int>
    SourceSampleIndex1 = Wrap_int(SourceSampleIndex0 + 1, SPDIFRX_Buffer_NumSamples);
 8004c94:	f44f 7120 	mov.w	r1, #640	; 0x280
    SourceSampleIndex0 = Wrap_int((int)(BufferReadPosition_Integral) - 1, SPDIFRX_Buffer_NumSamples);
 8004c98:	4605      	mov	r5, r0
    SourceSampleIndex1 = Wrap_int(SourceSampleIndex0 + 1, SPDIFRX_Buffer_NumSamples);
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	f7ff f93e 	bl	8003f1c <Wrap_int>
    SourceSampleIndex2 = Wrap_int(SourceSampleIndex1 + 1, SPDIFRX_Buffer_NumSamples);
 8004ca0:	f44f 7120 	mov.w	r1, #640	; 0x280
    SourceSampleIndex1 = Wrap_int(SourceSampleIndex0 + 1, SPDIFRX_Buffer_NumSamples);
 8004ca4:	4607      	mov	r7, r0
    SourceSampleIndex2 = Wrap_int(SourceSampleIndex1 + 1, SPDIFRX_Buffer_NumSamples);
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f7ff f938 	bl	8003f1c <Wrap_int>
    SourceSampleIndex3 = Wrap_int(SourceSampleIndex2 + 1, SPDIFRX_Buffer_NumSamples);
 8004cac:	f44f 7120 	mov.w	r1, #640	; 0x280
    SourceSampleIndex2 = Wrap_int(SourceSampleIndex1 + 1, SPDIFRX_Buffer_NumSamples);
 8004cb0:	4681      	mov	r9, r0
    SourceSampleIndex3 = Wrap_int(SourceSampleIndex2 + 1, SPDIFRX_Buffer_NumSamples);
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f7ff f932 	bl	8003f1c <Wrap_int>
    SourceSample0 = SPDIFRX_SamplesSnapShot[SourceSampleIndex0];
 8004cb8:	4b44      	ldr	r3, [pc, #272]	; (8004dcc <SPDIFRX_CopySamplesToGivenBuffer+0x35c>)
    TargetSample.Left = CubicInterpolate(SourceSample0.Left, SourceSample1.Left, SourceSample2.Left, SourceSample3.Left, BufferReadPosition_Fractional);
 8004cba:	eeb0 4b4a 	vmov.f64	d4, d10
    SourceSample0 = SPDIFRX_SamplesSnapShot[SourceSampleIndex0];
 8004cbe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8004cc2:	edd2 9a01 	vldr	s19, [r2, #4]
    SourceSample1 = SPDIFRX_SamplesSnapShot[SourceSampleIndex1];
 8004cc6:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8004cca:	ed92 ba01 	vldr	s22, [r2, #4]
    SourceSample2 = SPDIFRX_SamplesSnapShot[SourceSampleIndex2];
 8004cce:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
 8004cd2:	edd2 ba01 	vldr	s23, [r2, #4]
    SourceSample3 = SPDIFRX_SamplesSnapShot[SourceSampleIndex3];
 8004cd6:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8004cda:	ed92 ca01 	vldr	s24, [r2, #4]
    TargetSample.Left = CubicInterpolate(SourceSample0.Left, SourceSample1.Left, SourceSample2.Left, SourceSample3.Left, BufferReadPosition_Fractional);
 8004cde:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8004ce2:	ed92 3a00 	vldr	s6, [r2]
 8004ce6:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
 8004cea:	ed92 2a00 	vldr	s4, [r2]
 8004cee:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8004cf2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004cf6:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8004cfa:	ed92 1a00 	vldr	s2, [r2]
 8004cfe:	eeb8 2bc2 	vcvt.f64.s32	d2, s4
 8004d02:	ed93 0a00 	vldr	s0, [r3]
 8004d06:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
 8004d0a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8004d0e:	f7ff f90d 	bl	8003f2c <CubicInterpolate>
 8004d12:	eeb0 8b40 	vmov.f64	d8, d0
    TargetSample.Right = CubicInterpolate(SourceSample0.Right, SourceSample1.Right, SourceSample2.Right, SourceSample3.Right, BufferReadPosition_Fractional);
 8004d16:	eeb0 4b4a 	vmov.f64	d4, d10
 8004d1a:	eeb8 3bcc 	vcvt.f64.s32	d3, s24
 8004d1e:	eeb8 2beb 	vcvt.f64.s32	d2, s23
 8004d22:	eeb8 1bcb 	vcvt.f64.s32	d1, s22
 8004d26:	eeb8 0be9 	vcvt.f64.s32	d0, s19
 8004d2a:	f7ff f8ff 	bl	8003f2c <CubicInterpolate>
    TargetSample.Left = CubicInterpolate(SourceSample0.Left, SourceSample1.Left, SourceSample2.Left, SourceSample3.Left, BufferReadPosition_Fractional);
 8004d2e:	eebd 8bc8 	vcvt.s32.f64	s16, d8
    TargetSample.Left *= SPDIFRX_TransferGain;
 8004d32:	4b32      	ldr	r3, [pc, #200]	; (8004dfc <SPDIFRX_CopySamplesToGivenBuffer+0x38c>)
    TargetSample.Right = CubicInterpolate(SourceSample0.Right, SourceSample1.Right, SourceSample2.Right, SourceSample3.Right, BufferReadPosition_Fractional);
 8004d34:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    TargetSample.Left *= SPDIFRX_TransferGain;
 8004d38:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8004d3c:	edd3 7a00 	vldr	s15, [r3]
    TargetSample.Right *= SPDIFRX_TransferGain;
 8004d40:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    TargetSample.Left *= SPDIFRX_TransferGain;
 8004d44:	ee28 8a27 	vmul.f32	s16, s16, s15
    TargetSample.Right *= SPDIFRX_TransferGain;
 8004d48:	ee20 0a27 	vmul.f32	s0, s0, s15
    TargetSample.Left *= SPDIFRX_TransferGain;
 8004d4c:	eebd 7ac8 	vcvt.s32.f32	s14, s16
    TargetSample.Right *= SPDIFRX_TransferGain;
 8004d50:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    TargetSample.Left *= SPDIFRX_TransferGain;
 8004d54:	ee17 3a10 	vmov	r3, s14
    TargetSample.Left = TargetSample.Left / 256;
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bfb8      	it	lt
 8004d5c:	33ff      	addlt	r3, #255	; 0xff
 8004d5e:	121b      	asrs	r3, r3, #8
    pOutputBuffer[GlobalSampleIndex] = TargetSample;
 8004d60:	6033      	str	r3, [r6, #0]
    TargetSample.Right *= SPDIFRX_TransferGain;
 8004d62:	ee17 3a90 	vmov	r3, s15
    BufferReadPosition += SPDIFRX_BufferSampleStepSize;
 8004d66:	edd8 7a00 	vldr	s15, [r8]
    TargetSample.Right = TargetSample.Right / 256;
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bfb8      	it	lt
 8004d6e:	33ff      	addlt	r3, #255	; 0xff
 8004d70:	121b      	asrs	r3, r3, #8
    pOutputBuffer[GlobalSampleIndex] = TargetSample;
 8004d72:	6073      	str	r3, [r6, #4]
    BufferReadPosition += SPDIFRX_BufferSampleStepSize;
 8004d74:	4b1f      	ldr	r3, [pc, #124]	; (8004df4 <SPDIFRX_CopySamplesToGivenBuffer+0x384>)
 8004d76:	ed93 7a00 	vldr	s14, [r3]
    while (BufferReadPosition >= SPDIFRX_Buffer_NumSamples)
 8004d7a:	2300      	movs	r3, #0
    BufferReadPosition += SPDIFRX_BufferSampleStepSize;
 8004d7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d80:	edc8 7a00 	vstr	s15, [r8]
    while (BufferReadPosition >= SPDIFRX_Buffer_NumSamples)
 8004d84:	eef4 7ac9 	vcmpe.f32	s15, s18
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	da3e      	bge.n	8004e0c <SPDIFRX_CopySamplesToGivenBuffer+0x39c>
 8004d8e:	b10b      	cbz	r3, 8004d94 <SPDIFRX_CopySamplesToGivenBuffer+0x324>
 8004d90:	edc8 7a00 	vstr	s15, [r8]
  for(LocalSampleIndex = 0; LocalSampleIndex < SPDIFRX_Buffer_NumSamples / 2; ++LocalSampleIndex)
 8004d94:	3608      	adds	r6, #8
 8004d96:	42b4      	cmp	r4, r6
 8004d98:	f47f af68 	bne.w	8004c6c <SPDIFRX_CopySamplesToGivenBuffer+0x1fc>
 8004d9c:	e6ab      	b.n	8004af6 <SPDIFRX_CopySamplesToGivenBuffer+0x86>
  *o_InputBufferReadPointerInRange = ((UnclampedNormalizedError >= -1.0f) || (UnclampedNormalizedError <= 1.0f));
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e70b      	b.n	8004bba <SPDIFRX_CopySamplesToGivenBuffer+0x14a>
 8004da2:	bf00      	nop
 8004da4:	f3af 8000 	nop.w
 8004da8:	eb1c432d 	.word	0xeb1c432d
 8004dac:	3f2a36e2 	.word	0x3f2a36e2
 8004db0:	200004b1 	.word	0x200004b1
 8004db4:	20004480 	.word	0x20004480
 8004db8:	200018d6 	.word	0x200018d6
 8004dbc:	200018d5 	.word	0x200018d5
 8004dc0:	200018d4 	.word	0x200018d4
 8004dc4:	200004cc 	.word	0x200004cc
 8004dc8:	200004d4 	.word	0x200004d4
 8004dcc:	200018d8 	.word	0x200018d8
 8004dd0:	44200000 	.word	0x44200000
 8004dd4:	200004ac 	.word	0x200004ac
 8004dd8:	43f00000 	.word	0x43f00000
 8004ddc:	200004bc 	.word	0x200004bc
 8004de0:	3f733333 	.word	0x3f733333
 8004de4:	200004c0 	.word	0x200004c0
 8004de8:	3a83126f 	.word	0x3a83126f
 8004dec:	200004b4 	.word	0x200004b4
 8004df0:	200004c4 	.word	0x200004c4
 8004df4:	200004d0 	.word	0x200004d0
 8004df8:	000f4240 	.word	0x000f4240
 8004dfc:	2000000c 	.word	0x2000000c
 8004e00:	20002cd9 	.word	0x20002cd9
 8004e04:	200004b0 	.word	0x200004b0
    NumConsecutiveInputBufferReadPointerInRange = 0;
 8004e08:	6033      	str	r3, [r6, #0]
 8004e0a:	e70c      	b.n	8004c26 <SPDIFRX_CopySamplesToGivenBuffer+0x1b6>
      BufferReadPosition -= SPDIFRX_Buffer_NumSamples;
 8004e0c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8004e10:	2301      	movs	r3, #1
 8004e12:	e7b7      	b.n	8004d84 <SPDIFRX_CopySamplesToGivenBuffer+0x314>

08004e14 <MeasureInputSampleRate>:

float MeasureInputSampleRate()
{
 8004e14:	b538      	push	{r3, r4, r5, lr}
  AudioInput_MeasuredSampleRate_FrameCounter = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	4d0c      	ldr	r5, [pc, #48]	; (8004e4c <MeasureInputSampleRate+0x38>)
 8004e1a:	602b      	str	r3, [r5, #0]
  uint32_t StartTick = HAL_GetTick();
 8004e1c:	f7fb fc26 	bl	800066c <HAL_GetTick>
 8004e20:	4604      	mov	r4, r0
  HAL_Delay(50);
 8004e22:	2032      	movs	r0, #50	; 0x32
 8004e24:	f7fb fc28 	bl	8000678 <HAL_Delay>
  uint32_t EndTick = HAL_GetTick();
 8004e28:	f7fb fc20 	bl	800066c <HAL_GetTick>
  return 1000.0f * AudioInput_MeasuredSampleRate_FrameCounter / (EndTick - StartTick);
 8004e2c:	edd5 7a00 	vldr	s15, [r5]
 8004e30:	1b00      	subs	r0, r0, r4
 8004e32:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004e50 <MeasureInputSampleRate+0x3c>
 8004e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3a:	ee07 0a10 	vmov	s14, r0
 8004e3e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004e42:	eeb8 0a47 	vcvt.f32.u32	s0, s14

// This approach works fine with the RCA signal from my i7 PC but gives much too much jitter when using optical input from GCA or CD player:
//  uint32_t APB2TimerClockFrequency =  2 * HAL_RCC_GetPCLK2Freq();
//  float AudioInput_MeasuredSampleRate = (double)APB2TimerClockFrequency / (double)AudioInput_MeasuredSampleRate_DeltaCount;
}
 8004e46:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	200004a8 	.word	0x200004a8
 8004e50:	447a0000 	.word	0x447a0000

08004e54 <ClearBuffer>:
}

void ClearBuffer()
{
  AudioSample24_t ZeroSample={0,0};
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 8004e54:	2300      	movs	r3, #0
 8004e56:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <ClearBuffer+0x18>)
    SPDIFRX_IncomingSamples[SampleIndex] = ZeroSample;
 8004e58:	4619      	mov	r1, r3
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
    SPDIFRX_IncomingSamples[SampleIndex] = ZeroSample;
 8004e60:	e9c2 1100 	strd	r1, r1, [r2]
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 8004e64:	f102 0208 	add.w	r2, r2, #8
 8004e68:	d1f7      	bne.n	8004e5a <ClearBuffer+0x6>
}
 8004e6a:	4770      	bx	lr
 8004e6c:	200004d4 	.word	0x200004d4

08004e70 <SPDIFRX_SelectInput>:

void SPDIFRX_SelectInput(uint32_t Value)
{
  uint32_t InputSelection = 0;

  switch(Value)
 8004e70:	2803      	cmp	r0, #3
{
 8004e72:	b508      	push	{r3, lr}
 8004e74:	d808      	bhi.n	8004e88 <SPDIFRX_SelectInput+0x18>
 8004e76:	0400      	lsls	r0, r0, #16
    case 3: InputSelection = SPDIFRX_INPUT_IN3; break;

    default: Error_Handler();
  }

  hspdif.Instance->CR = (hspdif.Instance->CR & ~SPDIFRX_INPUT_IN3) | InputSelection;
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <SPDIFRX_SelectInput+0x20>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	6813      	ldr	r3, [r2, #0]
 8004e7e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e82:	4318      	orrs	r0, r3
 8004e84:	6010      	str	r0, [r2, #0]
}
 8004e86:	bd08      	pop	{r3, pc}
    default: Error_Handler();
 8004e88:	f000 ff1a 	bl	8005cc0 <Error_Handler>
  uint32_t InputSelection = 0;
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	e7f3      	b.n	8004e78 <SPDIFRX_SelectInput+0x8>
 8004e90:	20004480 	.word	0x20004480

08004e94 <SPDIFRX_Stop>:
  return 1;
}

void SPDIFRX_Stop()
{
  Started = 0;
 8004e94:	2000      	movs	r0, #0
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <SPDIFRX_Stop+0x38>)

  DisableInterruptHandler = 1;
 8004e98:	2201      	movs	r2, #1
{
 8004e9a:	b510      	push	{r4, lr}
  Started = 0;
 8004e9c:	7018      	strb	r0, [r3, #0]
  SPDIFRX_Locked_Callback(0);
  SPDIFRX_ClearOutputBuffer();
  __HAL_SPDIFRX_IDLE(&hspdif);
 8004e9e:	4c0c      	ldr	r4, [pc, #48]	; (8004ed0 <SPDIFRX_Stop+0x3c>)
  DisableInterruptHandler = 1;
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <SPDIFRX_Stop+0x40>)
 8004ea2:	701a      	strb	r2, [r3, #0]
  SPDIFRX_Locked_Callback(0);
 8004ea4:	f000 fb36 	bl	8005514 <SPDIFRX_Locked_Callback>
  SPDIFRX_ClearOutputBuffer();
 8004ea8:	f000 fb56 	bl	8005558 <SPDIFRX_ClearOutputBuffer>
  __HAL_SPDIFRX_IDLE(&hspdif);
 8004eac:	6822      	ldr	r2, [r4, #0]
 8004eae:	6813      	ldr	r3, [r2, #0]
 8004eb0:	f023 0303 	bic.w	r3, r3, #3
 8004eb4:	6013      	str	r3, [r2, #0]
  ClearBuffer();
 8004eb6:	f7ff ffcd 	bl	8004e54 <ClearBuffer>

  // SPDIFRX_MuteOutput_Callback(1); !!!Clashes with call from interrupt handler:

  // Reset SPDIFRX.
  EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort();
 8004eba:	f7fd fee9 	bl	8002c90 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__DMA_Abort>
  EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR();
 8004ebe:	f7fd fee8 	bl	8002c92 <EnsureFixPresent_Fix_JSB_20191115_HAL_SPDIFRX_DMAStop__CR>
  HAL_SPDIFRX_DMAStop(&hspdif);
 8004ec2:	4620      	mov	r0, r4
}
 8004ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SPDIFRX_DMAStop(&hspdif);
 8004ec8:	f7fd bee4 	b.w	8002c94 <HAL_SPDIFRX_DMAStop>
 8004ecc:	20002cd8 	.word	0x20002cd8
 8004ed0:	20004480 	.word	0x20004480
 8004ed4:	200004b1 	.word	0x200004b1

08004ed8 <SPDIFRX_Start>:
{
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	460e      	mov	r6, r1
 8004edc:	4614      	mov	r4, r2
 8004ede:	4607      	mov	r7, r0
  EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE();
 8004ee0:	f7fd fe0c 	bl	8002afc <EnsureFixPresent_Fix_JSB_20191115_SPDIFRX_TIMEOUT_VALUE>
  SPDIFRX_Stop(); // Get the receiver into a known state e.g. after a failed (timed out) start because there was no input.
 8004ee4:	f7ff ffd6 	bl	8004e94 <SPDIFRX_Stop>
  BufferReadPositionInitialized = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4a43      	ldr	r2, [pc, #268]	; (8004ff8 <SPDIFRX_Start+0x120>)
  BufferReadPosition = 0.0f;
 8004eec:	4943      	ldr	r1, [pc, #268]	; (8004ffc <SPDIFRX_Start+0x124>)
  BufferReadPositionInitialized = 0;
 8004eee:	7013      	strb	r3, [r2, #0]
  BufferReadPosition = 0.0f;
 8004ef0:	2200      	movs	r2, #0
  if (hspdif.State != HAL_SPDIFRX_STATE_READY)
 8004ef2:	4d43      	ldr	r5, [pc, #268]	; (8005000 <SPDIFRX_Start+0x128>)
  BufferReadPosition = 0.0f;
 8004ef4:	600a      	str	r2, [r1, #0]
  IntegralOfNormalizedError = 0.0f;
 8004ef6:	4943      	ldr	r1, [pc, #268]	; (8005004 <SPDIFRX_Start+0x12c>)
 8004ef8:	600a      	str	r2, [r1, #0]
  PreviousNormalizedError = 0.0f;
 8004efa:	4943      	ldr	r1, [pc, #268]	; (8005008 <SPDIFRX_Start+0x130>)
 8004efc:	600a      	str	r2, [r1, #0]
  InputSampleRateHistory_NumValues = 0;
 8004efe:	4a43      	ldr	r2, [pc, #268]	; (800500c <SPDIFRX_Start+0x134>)
 8004f00:	6013      	str	r3, [r2, #0]
  NumConsecutiveInputBufferReadPointerInRange = 0;
 8004f02:	4a43      	ldr	r2, [pc, #268]	; (8005010 <SPDIFRX_Start+0x138>)
 8004f04:	6013      	str	r3, [r2, #0]
  WasLocked = 0;
 8004f06:	4a43      	ldr	r2, [pc, #268]	; (8005014 <SPDIFRX_Start+0x13c>)
 8004f08:	7013      	strb	r3, [r2, #0]
  if (hspdif.State != HAL_SPDIFRX_STATE_READY)
 8004f0a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d008      	beq.n	8004f24 <SPDIFRX_Start+0x4c>
    HAL_DMA_Abort(hspdif.hdmaDrRx); // *** JSB Cube bug fix!!! ***
 8004f12:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8004f14:	f7fb fcfb 	bl	800090e <HAL_DMA_Abort>
    HAL_DMA_Abort(hspdif.hdmaCsRx); // *** JSB Cube bug fix!!! ***
 8004f18:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8004f1a:	f7fb fcf8 	bl	800090e <HAL_DMA_Abort>
    HAL_SPDIFRX_DMAStop(&hspdif);
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f7fd feb8 	bl	8002c94 <HAL_SPDIFRX_DMAStop>
  HAL_TIM_RegisterCallback(&htim11, HAL_TIM_IC_CAPTURE_CB_ID, &CaptureCallback);
 8004f24:	2112      	movs	r1, #18
 8004f26:	4a3c      	ldr	r2, [pc, #240]	; (8005018 <SPDIFRX_Start+0x140>)
 8004f28:	483c      	ldr	r0, [pc, #240]	; (800501c <SPDIFRX_Start+0x144>)
 8004f2a:	f7fe fc25 	bl	8003778 <HAL_TIM_RegisterCallback>
  if (HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1))
 8004f2e:	2100      	movs	r1, #0
 8004f30:	483a      	ldr	r0, [pc, #232]	; (800501c <SPDIFRX_Start+0x144>)
 8004f32:	f7fe fb33 	bl	800359c <HAL_TIM_IC_Start_IT>
 8004f36:	b108      	cbz	r0, 8004f3c <SPDIFRX_Start+0x64>
    Error_Handler();
 8004f38:	f000 fec2 	bl	8005cc0 <Error_Handler>
  SPDIFRX_SelectInput(InputChannel);
 8004f3c:	4638      	mov	r0, r7
  DisableInterruptHandler = 1;
 8004f3e:	4d38      	ldr	r5, [pc, #224]	; (8005020 <SPDIFRX_Start+0x148>)
  SPDIFRX_SelectInput(InputChannel);
 8004f40:	f7ff ff96 	bl	8004e70 <SPDIFRX_SelectInput>
  DisableInterruptHandler = 1;
 8004f44:	2301      	movs	r3, #1
  ReceiveErrorOccurred = 0;
 8004f46:	2200      	movs	r2, #0
  HALResult = HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, (uint32_t *)SPDIFRX_IncomingSamples, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples);
 8004f48:	4936      	ldr	r1, [pc, #216]	; (8005024 <SPDIFRX_Start+0x14c>)
  DisableInterruptHandler = 1;
 8004f4a:	702b      	strb	r3, [r5, #0]
  ReceiveErrorOccurred = 0;
 8004f4c:	4b36      	ldr	r3, [pc, #216]	; (8005028 <SPDIFRX_Start+0x150>)
  HALResult = HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, (uint32_t *)SPDIFRX_IncomingSamples, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples);
 8004f4e:	482c      	ldr	r0, [pc, #176]	; (8005000 <SPDIFRX_Start+0x128>)
  ReceiveErrorOccurred = 0;
 8004f50:	701a      	strb	r2, [r3, #0]
  HALResult = HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, (uint32_t *)SPDIFRX_IncomingSamples, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples);
 8004f52:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004f56:	f7fd fe09 	bl	8002b6c <HAL_SPDIFRX_ReceiveDataFlow_DMA>
  if (HALResult == HAL_TIMEOUT)
 8004f5a:	2803      	cmp	r0, #3
 8004f5c:	d101      	bne.n	8004f62 <SPDIFRX_Start+0x8a>
    return 0;
 8004f5e:	2000      	movs	r0, #0
}
 8004f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_Delay(50); // Wait for receiver to settle.
 8004f62:	2032      	movs	r0, #50	; 0x32
 8004f64:	f7fb fb88 	bl	8000678 <HAL_Delay>
  AudioInput_MeasuredSampleRate =  MeasureInputSampleRate();
 8004f68:	f7ff ff54 	bl	8004e14 <MeasureInputSampleRate>
  return fabs((SampleRateInQuestion / ReferenceSampleRate) - 1.0f) <= (InputSampleFrequencyCaptureHalfRangePPM / 1E6);
 8004f6c:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800502c <SPDIFRX_Start+0x154>
 8004f70:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8004f74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  if (IsSampleRateInRange(AudioInput_MeasuredSampleRate, SAI_AUDIO_FREQUENCY_44K))
 8004f78:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8004ff0 <SPDIFRX_Start+0x118>
  return fabs((SampleRateInQuestion / ReferenceSampleRate) - 1.0f) <= (InputSampleFrequencyCaptureHalfRangePPM / 1E6);
 8004f7c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004f80:	eeb0 6ac6 	vabs.f32	s12, s12
 8004f84:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
  if (IsSampleRateInRange(AudioInput_MeasuredSampleRate, SAI_AUDIO_FREQUENCY_44K))
 8004f88:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8004f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f90:	d81b      	bhi.n	8004fca <SPDIFRX_Start+0xf2>
    InputSampleRate = SAI_AUDIO_FREQUENCY_44K;
 8004f92:	4b27      	ldr	r3, [pc, #156]	; (8005030 <SPDIFRX_Start+0x158>)
 8004f94:	f64a 4244 	movw	r2, #44100	; 0xac44
    InputSampleRate = SAI_AUDIO_FREQUENCY_48K;
 8004f98:	601a      	str	r2, [r3, #0]
  if (ForceOutputSampleRate)
 8004f9a:	b90e      	cbnz	r6, 8004fa0 <SPDIFRX_Start+0xc8>
    OutputSampleRate = InputSampleRate;
 8004f9c:	4b24      	ldr	r3, [pc, #144]	; (8005030 <SPDIFRX_Start+0x158>)
 8004f9e:	681c      	ldr	r4, [r3, #0]
 8004fa0:	4b24      	ldr	r3, [pc, #144]	; (8005034 <SPDIFRX_Start+0x15c>)
  SPDIFRX_SetOutputSampleRate_Callback(OutputSampleRate);
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	601c      	str	r4, [r3, #0]
 8004fa6:	f000 fb77 	bl	8005698 <SPDIFRX_SetOutputSampleRate_Callback>
  SPDIFRX_Stop(); // Get the receiver into a known state e.g. after a failed (timed out) start because there was no input.
 8004faa:	f7ff ff73 	bl	8004e94 <SPDIFRX_Stop>
  HALResult = HAL_SPDIFRX_ReceiveDataFlow_DMA(&hspdif, (uint32_t *)SPDIFRX_IncomingSamples, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples);
 8004fae:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004fb2:	491c      	ldr	r1, [pc, #112]	; (8005024 <SPDIFRX_Start+0x14c>)
 8004fb4:	4812      	ldr	r0, [pc, #72]	; (8005000 <SPDIFRX_Start+0x128>)
 8004fb6:	f7fd fdd9 	bl	8002b6c <HAL_SPDIFRX_ReceiveDataFlow_DMA>
  if (HALResult == HAL_TIMEOUT)
 8004fba:	2803      	cmp	r0, #3
 8004fbc:	d0cf      	beq.n	8004f5e <SPDIFRX_Start+0x86>
  DisableInterruptHandler = 0;
 8004fbe:	2300      	movs	r3, #0
  Started = 1;
 8004fc0:	2001      	movs	r0, #1
  DisableInterruptHandler = 0;
 8004fc2:	702b      	strb	r3, [r5, #0]
  Started = 1;
 8004fc4:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <SPDIFRX_Start+0x160>)
 8004fc6:	7018      	strb	r0, [r3, #0]
  return 1;
 8004fc8:	e7ca      	b.n	8004f60 <SPDIFRX_Start+0x88>
  return fabs((SampleRateInQuestion / ReferenceSampleRate) - 1.0f) <= (InputSampleFrequencyCaptureHalfRangePPM / 1E6);
 8004fca:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800503c <SPDIFRX_Start+0x164>
 8004fce:	ee80 7a26 	vdiv.f32	s14, s0, s13
 8004fd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fd6:	eeb0 7ac7 	vabs.f32	s14, s14
 8004fda:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  else if (IsSampleRateInRange(AudioInput_MeasuredSampleRate, SAI_AUDIO_FREQUENCY_48K))
 8004fde:	eeb4 7bc5 	vcmpe.f64	d7, d5
 8004fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe6:	d8ba      	bhi.n	8004f5e <SPDIFRX_Start+0x86>
    InputSampleRate = SAI_AUDIO_FREQUENCY_48K;
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <SPDIFRX_Start+0x158>)
 8004fea:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004fee:	e7d3      	b.n	8004f98 <SPDIFRX_Start+0xc0>
 8004ff0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ff4:	3f50624d 	.word	0x3f50624d
 8004ff8:	200004b0 	.word	0x200004b0
 8004ffc:	200004ac 	.word	0x200004ac
 8005000:	20004480 	.word	0x20004480
 8005004:	200004bc 	.word	0x200004bc
 8005008:	200004c8 	.word	0x200004c8
 800500c:	200004b8 	.word	0x200004b8
 8005010:	200004c0 	.word	0x200004c0
 8005014:	20002cd9 	.word	0x20002cd9
 8005018:	08004a39 	.word	0x08004a39
 800501c:	20004768 	.word	0x20004768
 8005020:	200004b1 	.word	0x200004b1
 8005024:	200004d4 	.word	0x200004d4
 8005028:	200004cc 	.word	0x200004cc
 800502c:	472c4400 	.word	0x472c4400
 8005030:	200004b4 	.word	0x200004b4
 8005034:	200004c4 	.word	0x200004c4
 8005038:	20002cd8 	.word	0x20002cd8
 800503c:	473b8000 	.word	0x473b8000

08005040 <SPDIFRX_HasReceiveErrorOccurred>:

uint8_t SPDIFRX_HasReceiveErrorOccurred()
{
  return ReceiveErrorOccurred;
}
 8005040:	4b01      	ldr	r3, [pc, #4]	; (8005048 <SPDIFRX_HasReceiveErrorOccurred+0x8>)
 8005042:	7818      	ldrb	r0, [r3, #0]
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	200004cc 	.word	0x200004cc

0800504c <GetBest>:
{
  int16_t DeltaAB, DeltaCA, DeltaBC;
  int16_t Result = 0;

  if (A > B)
    DeltaAB = A - B;
 800504c:	b283      	uxth	r3, r0
  if (A > B)
 800504e:	4288      	cmp	r0, r1
{
 8005050:	b570      	push	{r4, r5, r6, lr}
    DeltaAB = A - B;
 8005052:	b28c      	uxth	r4, r1
  else
    DeltaAB = B - A;

  if (A > C)
    DeltaCA = A - C;
 8005054:	b296      	uxth	r6, r2
    DeltaAB = A - B;
 8005056:	bfcc      	ite	gt
 8005058:	1b1d      	subgt	r5, r3, r4
    DeltaAB = B - A;
 800505a:	1ae5      	suble	r5, r4, r3
  if (A > C)
 800505c:	4290      	cmp	r0, r2
    DeltaAB = B - A;
 800505e:	b22d      	sxth	r5, r5
    DeltaCA = A - C;
 8005060:	bfcc      	ite	gt
 8005062:	1b9b      	subgt	r3, r3, r6
  else
    DeltaCA = C - A;
 8005064:	1af3      	suble	r3, r6, r3

  if (C > B)
 8005066:	4291      	cmp	r1, r2
    DeltaCA = C - A;
 8005068:	b21b      	sxth	r3, r3
    DeltaBC = C - B;
 800506a:	bfb4      	ite	lt
 800506c:	1b34      	sublt	r4, r6, r4
  else
    DeltaBC = B - C;
 800506e:	1ba4      	subge	r4, r4, r6

  if ((DeltaAB <= DeltaCA) && (DeltaAB <= DeltaBC))
 8005070:	429d      	cmp	r5, r3
    DeltaBC = B - C;
 8005072:	b224      	sxth	r4, r4
  if ((DeltaAB <= DeltaCA) && (DeltaAB <= DeltaBC))
 8005074:	dc04      	bgt.n	8005080 <GetBest+0x34>
 8005076:	42a5      	cmp	r5, r4
 8005078:	dc07      	bgt.n	800508a <GetBest+0x3e>
    Result = (A + B) >> 1;
 800507a:	4401      	add	r1, r0
  else if ((DeltaCA <= DeltaAB) && (DeltaCA <= DeltaBC))
    Result = (A + C) >> 1;
  else
    Result = (B + C) >> 1;
 800507c:	1048      	asrs	r0, r1, #1
 800507e:	e003      	b.n	8005088 <GetBest+0x3c>
  else if ((DeltaCA <= DeltaAB) && (DeltaCA <= DeltaBC))
 8005080:	42a3      	cmp	r3, r4
 8005082:	dc02      	bgt.n	800508a <GetBest+0x3e>
    Result = (A + C) >> 1;
 8005084:	4410      	add	r0, r2
 8005086:	1040      	asrs	r0, r0, #1

  return Result;
}
 8005088:	bd70      	pop	{r4, r5, r6, pc}
    Result = (B + C) >> 1;
 800508a:	4411      	add	r1, r2
 800508c:	e7f6      	b.n	800507c <GetBest+0x30>

0800508e <GetUnsigned12bitValue>:
  0xB1, 0x00, 0xC1, 0x00, 0xD1, 0x00, 0xD1, 0x00, 0x91, 0x00, 0xD1, 0x00, 0x91, 0x00, 0xD1, 0x00, 0x90, 0x00, 0x00
};

inline static uint16_t GetUnsigned12bitValue(uint8_t *pData)
{
  return ((pData[0] << 5) | (pData[1] >> 3)) & 0x0FFF;
 800508e:	7803      	ldrb	r3, [r0, #0]
 8005090:	7840      	ldrb	r0, [r0, #1]
 8005092:	08c0      	lsrs	r0, r0, #3
 8005094:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
}
 8005098:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800509c:	4770      	bx	lr
	...

080050a0 <XPT2046_Initialize>:
  phspi = i_phspi;
 80050a0:	4b01      	ldr	r3, [pc, #4]	; (80050a8 <XPT2046_Initialize+0x8>)
 80050a2:	6018      	str	r0, [r3, #0]
}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20002cdc 	.word	0x20002cdc

080050ac <XPT2046_Sample>:

uint8_t XPT2046_Sample(int16_t *pRawX, int16_t *pRawY, int16_t *pRawZ)
// Returns 1 if touched.
// The origin is bottom left (XL, YD). This is the natural origin of the XPT2046.
// None of the touch screens I've encountered so far are correctly wired. Use compiler defines to reverse the coordinates as required.
{
 80050ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b0:	4617      	mov	r7, r2
  int16_t x, y, z;

  *pRawX = 0;
 80050b2:	2200      	movs	r2, #0
{
 80050b4:	b089      	sub	sp, #36	; 0x24
 80050b6:	4606      	mov	r6, r0
  *pRawX = 0;
 80050b8:	8002      	strh	r2, [r0, #0]
{
 80050ba:	460d      	mov	r5, r1
  *pRawY = 0;
 80050bc:	800a      	strh	r2, [r1, #0]

  uint8_t RxData[19];
  int16_t X_Positions[3];
  int16_t Y_Positions[3];

  XPT2046_CSX_Low();
 80050be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050c2:	4831      	ldr	r0, [pc, #196]	; (8005188 <XPT2046_Sample+0xdc>)
  *pRawZ = 0;
 80050c4:	803a      	strh	r2, [r7, #0]
  XPT2046_CSX_Low();
 80050c6:	f7fb fe2f 	bl	8000d28 <HAL_GPIO_WritePin>
  if (HAL_SPI_TransmitReceive(phspi, (uint8_t*) &SampleCommand, (uint8_t*) &RxData, 19, 100) != HAL_OK)
 80050ca:	2364      	movs	r3, #100	; 0x64
 80050cc:	482f      	ldr	r0, [pc, #188]	; (800518c <XPT2046_Sample+0xe0>)
 80050ce:	aa03      	add	r2, sp, #12
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	2313      	movs	r3, #19
 80050d4:	492e      	ldr	r1, [pc, #184]	; (8005190 <XPT2046_Sample+0xe4>)
 80050d6:	6800      	ldr	r0, [r0, #0]
 80050d8:	f7fd ff73 	bl	8002fc2 <HAL_SPI_TransmitReceive>
 80050dc:	b108      	cbz	r0, 80050e2 <XPT2046_Sample+0x36>
    Error_Handler();
 80050de:	f000 fdef 	bl	8005cc0 <Error_Handler>
  XPT2046_CSX_High();
 80050e2:	4829      	ldr	r0, [pc, #164]	; (8005188 <XPT2046_Sample+0xdc>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050ea:	f7fb fe1d 	bl	8000d28 <HAL_GPIO_WritePin>

  int16_t z1 = GetUnsigned12bitValue(&RxData[1]);
 80050ee:	f10d 000d 	add.w	r0, sp, #13
 80050f2:	f7ff ffcc 	bl	800508e <GetUnsigned12bitValue>
 80050f6:	b204      	sxth	r4, r0
  int16_t z2 = GetUnsigned12bitValue(&RxData[3]);
 80050f8:	f10d 000f 	add.w	r0, sp, #15
 80050fc:	f7ff ffc7 	bl	800508e <GetUnsigned12bitValue>

  // Neutralize occasional z1 = 4095 values (which are possibly due to comms errors, as x and y values of 4095 often appear with the z value of 4095).
  if (z1 >= 2048)
    z1 = 0;

  z = 4095 + z1 - z2;
 8005100:	f5c0 637f 	rsb	r3, r0, #4080	; 0xff0
    z1 = 0;
 8005104:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
  z = 4095 + z1 - z2;
 8005108:	f103 030f 	add.w	r3, r3, #15
    z1 = 0;
 800510c:	bfa8      	it	ge
 800510e:	2400      	movge	r4, #0
  z = 4095 + z1 - z2;
 8005110:	4423      	add	r3, r4
 8005112:	b21c      	sxth	r4, r3

  if (z < ZThreshold)
 8005114:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 8005118:	db33      	blt.n	8005182 <XPT2046_Sample+0xd6>
  X_Positions[0] = GetUnsigned12bitValue(&RxData[7]);
 800511a:	f10d 0013 	add.w	r0, sp, #19
 800511e:	f7ff ffb6 	bl	800508e <GetUnsigned12bitValue>
 8005122:	4683      	mov	fp, r0
  X_Positions[1] = GetUnsigned12bitValue(&RxData[11]);
 8005124:	f10d 0017 	add.w	r0, sp, #23
 8005128:	f7ff ffb1 	bl	800508e <GetUnsigned12bitValue>
 800512c:	4601      	mov	r1, r0
  X_Positions[2] = GetUnsigned12bitValue(&RxData[15]);
 800512e:	f10d 001b 	add.w	r0, sp, #27
 8005132:	f7ff ffac 	bl	800508e <GetUnsigned12bitValue>
 8005136:	4602      	mov	r2, r0
  Y_Positions[0] = GetUnsigned12bitValue(&RxData[10]);
 8005138:	f10d 0016 	add.w	r0, sp, #22
    return 0;

  *pRawZ = z;

  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 800513c:	b209      	sxth	r1, r1
  Y_Positions[0] = GetUnsigned12bitValue(&RxData[10]);
 800513e:	f7ff ffa6 	bl	800508e <GetUnsigned12bitValue>
 8005142:	4680      	mov	r8, r0
  Y_Positions[1] = GetUnsigned12bitValue(&RxData[13]);
 8005144:	f10d 0019 	add.w	r0, sp, #25
  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 8005148:	b212      	sxth	r2, r2
  Y_Positions[1] = GetUnsigned12bitValue(&RxData[13]);
 800514a:	f7ff ffa0 	bl	800508e <GetUnsigned12bitValue>
 800514e:	4681      	mov	r9, r0
  Y_Positions[2] = GetUnsigned12bitValue(&RxData[17]);
 8005150:	f10d 001d 	add.w	r0, sp, #29
 8005154:	f7ff ff9b 	bl	800508e <GetUnsigned12bitValue>
  *pRawZ = z;
 8005158:	803c      	strh	r4, [r7, #0]
  Y_Positions[2] = GetUnsigned12bitValue(&RxData[17]);
 800515a:	4682      	mov	sl, r0
  x = GetBest(X_Positions[0], X_Positions[1], X_Positions[2]);
 800515c:	fa0f f08b 	sxth.w	r0, fp
 8005160:	f7ff ff74 	bl	800504c <GetBest>
 8005164:	4604      	mov	r4, r0
  y = GetBest(Y_Positions[0], Y_Positions[1], Y_Positions[2]);
 8005166:	fa0f f28a 	sxth.w	r2, sl
 800516a:	fa0f f189 	sxth.w	r1, r9
 800516e:	fa0f f088 	sxth.w	r0, r8
 8005172:	f7ff ff6b 	bl	800504c <GetBest>

#if XPT2046_Swap_YD_and_YU
  y = 4095 - y;
#endif

  *pRawX = x;
 8005176:	8034      	strh	r4, [r6, #0]
  *pRawY = y;
 8005178:	8028      	strh	r0, [r5, #0]

  return 1;
 800517a:	2001      	movs	r0, #1
}
 800517c:	b009      	add	sp, #36	; 0x24
 800517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
 8005182:	2000      	movs	r0, #0
 8005184:	e7fa      	b.n	800517c <XPT2046_Sample+0xd0>
 8005186:	bf00      	nop
 8005188:	40020400 	.word	0x40020400
 800518c:	20002cdc 	.word	0x20002cdc
 8005190:	08009690 	.word	0x08009690

08005194 <XPT2046_ConvertRawToScreen>:

void XPT2046_ConvertRawToScreen(int16_t RawX, int16_t RawY, int16_t *pX, int16_t *pY)
// Assumes portrait mode.
// The origin of the result is top-left.
{
 8005194:	b510      	push	{r4, lr}
  float K;

  K = ((float)(RawX - XPT2046_RawX_Min) / (float)(XPT2046_RawX_Max - XPT2046_RawX_Min));
 8005196:	4c19      	ldr	r4, [pc, #100]	; (80051fc <XPT2046_ConvertRawToScreen+0x68>)
 8005198:	6824      	ldr	r4, [r4, #0]
 800519a:	1b00      	subs	r0, r0, r4
 800519c:	ee07 0a90 	vmov	s15, r0
 80051a0:	4817      	ldr	r0, [pc, #92]	; (8005200 <XPT2046_ConvertRawToScreen+0x6c>)
 80051a2:	6800      	ldr	r0, [r0, #0]
 80051a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80051a8:	1b00      	subs	r0, r0, r4
 80051aa:	ee07 0a90 	vmov	s15, r0
 80051ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pX = K * XPT2046_Width;
 80051b6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8005204 <XPT2046_ConvertRawToScreen+0x70>
 80051ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051c2:	ee17 0a90 	vmov	r0, s15
 80051c6:	8010      	strh	r0, [r2, #0]

  K = ((float)(RawY - XPT2046_RawY_Min) / (float)(XPT2046_RawY_Max - XPT2046_RawY_Min));
 80051c8:	4a0f      	ldr	r2, [pc, #60]	; (8005208 <XPT2046_ConvertRawToScreen+0x74>)
 80051ca:	6810      	ldr	r0, [r2, #0]
 80051cc:	4a0f      	ldr	r2, [pc, #60]	; (800520c <XPT2046_ConvertRawToScreen+0x78>)
 80051ce:	1a09      	subs	r1, r1, r0
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	ee07 1a90 	vmov	s15, r1
 80051d6:	1a12      	subs	r2, r2, r0
 80051d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80051dc:	ee07 2a90 	vmov	s15, r2
 80051e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
  *pY = K * XPT2046_Height;
 80051e8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005210 <XPT2046_ConvertRawToScreen+0x7c>
 80051ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051f4:	ee17 2a90 	vmov	r2, s15
 80051f8:	801a      	strh	r2, [r3, #0]
}
 80051fa:	bd10      	pop	{r4, pc}
 80051fc:	20000014 	.word	0x20000014
 8005200:	20000010 	.word	0x20000010
 8005204:	43700000 	.word	0x43700000
 8005208:	2000001c 	.word	0x2000001c
 800520c:	20000018 	.word	0x20000018
 8005210:	43a00000 	.word	0x43a00000

08005214 <HandleHALResult.part.0>:
{
  if (Value != HAL_OK)
  {
//    LCD_UsrLog("HAL error: %s\n", pText);
//    Error_Handler();
    HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); // !!!
 8005214:	2102      	movs	r1, #2
 8005216:	4801      	ldr	r0, [pc, #4]	; (800521c <HandleHALResult.part.0+0x8>)
 8005218:	f7fb bd8b 	b.w	8000d32 <HAL_GPIO_TogglePin>
 800521c:	40020000 	.word	0x40020000

08005220 <ToggleLED.part.0>:
void ToggleLED(LED_t LED)
{
  switch(LED)
  {
    case LED_Red:
      HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8005220:	2102      	movs	r1, #2
 8005222:	4801      	ldr	r0, [pc, #4]	; (8005228 <ToggleLED.part.0+0x8>)
 8005224:	f7fb bd85 	b.w	8000d32 <HAL_GPIO_TogglePin>
 8005228:	40020000 	.word	0x40020000

0800522c <HandleHALResult>:
  if (Value != HAL_OK)
 800522c:	b108      	cbz	r0, 8005232 <HandleHALResult+0x6>
 800522e:	f7ff bff1 	b.w	8005214 <HandleHALResult.part.0>
}
 8005232:	4770      	bx	lr

08005234 <ToggleLED>:
  switch(LED)
 8005234:	2802      	cmp	r0, #2
 8005236:	d005      	beq.n	8005244 <ToggleLED+0x10>
 8005238:	2803      	cmp	r0, #3
 800523a:	d007      	beq.n	800524c <ToggleLED+0x18>
 800523c:	2801      	cmp	r0, #1
 800523e:	d107      	bne.n	8005250 <ToggleLED+0x1c>
 8005240:	f7ff bfee 	b.w	8005220 <ToggleLED.part.0>
      break;
    case LED_Green:
      HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8005244:	2104      	movs	r1, #4
      break;
    case LED_Blue:
      HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8005246:	4803      	ldr	r0, [pc, #12]	; (8005254 <ToggleLED+0x20>)
 8005248:	f7fb bd73 	b.w	8000d32 <HAL_GPIO_TogglePin>
 800524c:	2108      	movs	r1, #8
 800524e:	e7fa      	b.n	8005246 <ToggleLED+0x12>
      break;
    default:
      Error_Handler();
 8005250:	f000 bd36 	b.w	8005cc0 <Error_Handler>
 8005254:	40020000 	.word	0x40020000

08005258 <IsUserButtonPressed>:
///////////////////////////////////////////////////////////////////////////////
// User button:

uint8_t IsUserButtonPressed()
{
  return !HAL_GPIO_ReadPin(NUserButton_GPIO_Port, NUserButton_Pin);
 8005258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800525c:	4803      	ldr	r0, [pc, #12]	; (800526c <IsUserButtonPressed+0x14>)
{
 800525e:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(NUserButton_GPIO_Port, NUserButton_Pin);
 8005260:	f7fb fd5c 	bl	8000d1c <HAL_GPIO_ReadPin>
}
 8005264:	fab0 f080 	clz	r0, r0
 8005268:	0940      	lsrs	r0, r0, #5
 800526a:	bd08      	pop	{r3, pc}
 800526c:	40020800 	.word	0x40020800

08005270 <DAC_Mute>:
  DAC_Mute(1);
}

void DAC_Mute(uint8_t Value)
{
  HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, Value ? 0 : 1);
 8005270:	fab0 f280 	clz	r2, r0
 8005274:	2140      	movs	r1, #64	; 0x40
 8005276:	4802      	ldr	r0, [pc, #8]	; (8005280 <DAC_Mute+0x10>)
 8005278:	0952      	lsrs	r2, r2, #5
 800527a:	f7fb bd55 	b.w	8000d28 <HAL_GPIO_WritePin>
 800527e:	bf00      	nop
 8005280:	40020c00 	.word	0x40020c00

08005284 <DAC_Initialize>:
{
 8005284:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, 0); // Latency.
 8005286:	4807      	ldr	r0, [pc, #28]	; (80052a4 <DAC_Initialize+0x20>)
 8005288:	2200      	movs	r2, #0
 800528a:	2110      	movs	r1, #16
 800528c:	f7fb fd4c 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, 0); // De-emphasis for 44.1kHz.
 8005290:	4804      	ldr	r0, [pc, #16]	; (80052a4 <DAC_Initialize+0x20>)
 8005292:	2200      	movs	r2, #0
 8005294:	2120      	movs	r1, #32
 8005296:	f7fb fd47 	bl	8000d28 <HAL_GPIO_WritePin>
  DAC_Mute(1);
 800529a:	2001      	movs	r0, #1
}
 800529c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DAC_Mute(1);
 80052a0:	f7ff bfe6 	b.w	8005270 <DAC_Mute>
 80052a4:	40020c00 	.word	0x40020c00

080052a8 <PA_RegisterWrite8>:
// PA (TAS5719):

#define PA_I2C_Address 0x2A

void PA_RegisterWrite8(uint8_t Index, uint8_t Value)
{
 80052a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 80052aa:	2301      	movs	r3, #1
{
 80052ac:	f88d 1017 	strb.w	r1, [sp, #23]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 80052b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 80052b4:	4602      	mov	r2, r0
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, &Value, 1, 1000), "HAL_I2C_Mem_Write");
 80052b6:	4807      	ldr	r0, [pc, #28]	; (80052d4 <PA_RegisterWrite8+0x2c>)
 80052b8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80052bc:	f10d 0117 	add.w	r1, sp, #23
 80052c0:	9100      	str	r1, [sp, #0]
 80052c2:	2154      	movs	r1, #84	; 0x54
 80052c4:	f7fb ff02 	bl	80010cc <HAL_I2C_Mem_Write>
  if (Value != HAL_OK)
 80052c8:	b108      	cbz	r0, 80052ce <PA_RegisterWrite8+0x26>
 80052ca:	f7ff ffa3 	bl	8005214 <HandleHALResult.part.0>
}
 80052ce:	b007      	add	sp, #28
 80052d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80052d4:	200041a8 	.word	0x200041a8

080052d8 <PA_RegisterRead8>:

uint8_t PA_RegisterRead8(uint8_t Index)
{
 80052d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Result;

  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, Index, 1, &Result, 1, 1000), "HAL_I2C_Mem_Read");
 80052da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80052de:	2301      	movs	r3, #1
{
 80052e0:	4602      	mov	r2, r0
  HandleHALResult(HAL_I2C_Mem_Read(&hi2c1, PA_I2C_Address << 1, Index, 1, &Result, 1, 1000), "HAL_I2C_Mem_Read");
 80052e2:	4808      	ldr	r0, [pc, #32]	; (8005304 <PA_RegisterRead8+0x2c>)
 80052e4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80052e8:	f10d 0117 	add.w	r1, sp, #23
 80052ec:	9100      	str	r1, [sp, #0]
 80052ee:	2154      	movs	r1, #84	; 0x54
 80052f0:	f7fb ffa2 	bl	8001238 <HAL_I2C_Mem_Read>
  if (Value != HAL_OK)
 80052f4:	b108      	cbz	r0, 80052fa <PA_RegisterRead8+0x22>
 80052f6:	f7ff ff8d 	bl	8005214 <HandleHALResult.part.0>

  return Result;
}
 80052fa:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80052fe:	b007      	add	sp, #28
 8005300:	f85d fb04 	ldr.w	pc, [sp], #4
 8005304:	200041a8 	.word	0x200041a8

08005308 <PA_RegisterWrite16>:

void PA_RegisterWrite16(uint8_t Index, uint16_t Value)
{
 8005308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Data[2];

  Data[0] = (uint8_t)(Value >> 8);
 800530a:	0a0b      	lsrs	r3, r1, #8
  Data[1] = (uint8_t)(Value);
 800530c:	f88d 1015 	strb.w	r1, [sp, #21]

  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 2, 1000), "HAL_I2C_Mem_Write");
 8005310:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 8005314:	4602      	mov	r2, r0
  Data[0] = (uint8_t)(Value >> 8);
 8005316:	f88d 3014 	strb.w	r3, [sp, #20]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 2, 1000), "HAL_I2C_Mem_Write");
 800531a:	2302      	movs	r3, #2
 800531c:	4807      	ldr	r0, [pc, #28]	; (800533c <PA_RegisterWrite16+0x34>)
 800531e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005322:	ab05      	add	r3, sp, #20
 8005324:	2154      	movs	r1, #84	; 0x54
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	2301      	movs	r3, #1
 800532a:	f7fb fecf 	bl	80010cc <HAL_I2C_Mem_Write>
  if (Value != HAL_OK)
 800532e:	b108      	cbz	r0, 8005334 <PA_RegisterWrite16+0x2c>
 8005330:	f7ff ff70 	bl	8005214 <HandleHALResult.part.0>
}
 8005334:	b007      	add	sp, #28
 8005336:	f85d fb04 	ldr.w	pc, [sp], #4
 800533a:	bf00      	nop
 800533c:	200041a8 	.word	0x200041a8

08005340 <PA_RegisterWrite32>:

void PA_RegisterWrite32(uint8_t Index, uint32_t Value)
{
 8005340:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Data[4];

  Data[0] = (uint8_t)(Value >> 24);
 8005342:	0e0b      	lsrs	r3, r1, #24
  Data[1] = (uint8_t)(Value >> 16);
  Data[2] = (uint8_t)(Value >> 8);
  Data[3] = (uint8_t)(Value);
 8005344:	f88d 1017 	strb.w	r1, [sp, #23]
{
 8005348:	4602      	mov	r2, r0

  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 800534a:	480d      	ldr	r0, [pc, #52]	; (8005380 <PA_RegisterWrite32+0x40>)
  Data[0] = (uint8_t)(Value >> 24);
 800534c:	f88d 3014 	strb.w	r3, [sp, #20]
  Data[1] = (uint8_t)(Value >> 16);
 8005350:	0c0b      	lsrs	r3, r1, #16
 8005352:	f88d 3015 	strb.w	r3, [sp, #21]
  Data[2] = (uint8_t)(Value >> 8);
 8005356:	0a0b      	lsrs	r3, r1, #8
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 8005358:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  Data[2] = (uint8_t)(Value >> 8);
 800535c:	f88d 3016 	strb.w	r3, [sp, #22]
  HandleHALResult(HAL_I2C_Mem_Write(&hi2c1, PA_I2C_Address << 1, Index, 1, Data, 4, 1000), "HAL_I2C_Mem_Write");
 8005360:	2304      	movs	r3, #4
 8005362:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005366:	ab05      	add	r3, sp, #20
 8005368:	2154      	movs	r1, #84	; 0x54
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	2301      	movs	r3, #1
 800536e:	f7fb fead 	bl	80010cc <HAL_I2C_Mem_Write>
  if (Value != HAL_OK)
 8005372:	b108      	cbz	r0, 8005378 <PA_RegisterWrite32+0x38>
 8005374:	f7ff ff4e 	bl	8005214 <HandleHALResult.part.0>
}
 8005378:	b007      	add	sp, #28
 800537a:	f85d fb04 	ldr.w	pc, [sp], #4
 800537e:	bf00      	nop
 8005380:	200041a8 	.word	0x200041a8

08005384 <PA_GetErrorStatus>:
  PA_Mute();
}

uint8_t PA_GetErrorStatus()
{
  return PA_RegisterRead8(0x02);
 8005384:	2002      	movs	r0, #2
 8005386:	f7ff bfa7 	b.w	80052d8 <PA_RegisterRead8>

0800538a <PA_ClearErrorStatus>:
}

void PA_ClearErrorStatus()
{
  PA_RegisterWrite8(0x02, 0x00);
 800538a:	2100      	movs	r1, #0
 800538c:	2002      	movs	r0, #2
 800538e:	f7ff bf8b 	b.w	80052a8 <PA_RegisterWrite8>
	...

08005394 <PA_SetMasterVolume>:

void PA_SetMasterVolume(float Volume_dB)
{
  uint16_t RegisterValue;

  if (Volume_dB > 24)
 8005394:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8005398:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a0:	dc16      	bgt.n	80053d0 <PA_SetMasterVolume+0x3c>
    Volume_dB = 24;
  if (Volume_dB < -103.75)
 80053a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80053d8 <PA_SetMasterVolume+0x44>
    Volume_dB = -103.75;
 80053a6:	eeb4 0a47 	vcmp.f32	s0, s14
 80053aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ae:	bf48      	it	mi
 80053b0:	eeb0 0a47 	vmovmi.f32	s0, s14

  RegisterValue = 8 * (24 - Volume_dB);
 80053b4:	ee77 7ac0 	vsub.f32	s15, s15, s0

  PA_RegisterWrite16(0x07, RegisterValue);
 80053b8:	2007      	movs	r0, #7
  RegisterValue = 8 * (24 - Volume_dB);
 80053ba:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80053be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  PA_RegisterWrite16(0x07, RegisterValue);
 80053c6:	ee17 3a90 	vmov	r3, s15
 80053ca:	b299      	uxth	r1, r3
 80053cc:	f7ff bf9c 	b.w	8005308 <PA_RegisterWrite16>
    Volume_dB = 24;
 80053d0:	eeb0 0a67 	vmov.f32	s0, s15
 80053d4:	e7ee      	b.n	80053b4 <PA_SetMasterVolume+0x20>
 80053d6:	bf00      	nop
 80053d8:	c2cf8000 	.word	0xc2cf8000

080053dc <PA_Mute>:
}

void PA_Mute()
{
  PA_RegisterWrite16(0x07, 0x03FF);
 80053dc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80053e0:	2007      	movs	r0, #7
 80053e2:	f7ff bf91 	b.w	8005308 <PA_RegisterWrite16>
	...

080053e8 <PA_Initialize>:
{
 80053e8:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 0);
 80053ea:	2200      	movs	r2, #0
{
 80053ec:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 0);
 80053ee:	2101      	movs	r1, #1
 80053f0:	481a      	ldr	r0, [pc, #104]	; (800545c <PA_Initialize+0x74>)
 80053f2:	f7fb fc99 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 0);
 80053f6:	2200      	movs	r2, #0
 80053f8:	2102      	movs	r1, #2
 80053fa:	4818      	ldr	r0, [pc, #96]	; (800545c <PA_Initialize+0x74>)
 80053fc:	f7fb fc94 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005400:	2001      	movs	r0, #1
 8005402:	f7fb f939 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(TAS_PDN_GPIO_Port, TAS_PDN_Pin, 1);
 8005406:	2201      	movs	r2, #1
 8005408:	4814      	ldr	r0, [pc, #80]	; (800545c <PA_Initialize+0x74>)
 800540a:	4611      	mov	r1, r2
 800540c:	f7fb fc8c 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005410:	2001      	movs	r0, #1
 8005412:	f7fb f931 	bl	8000678 <HAL_Delay>
  HAL_GPIO_WritePin(TAS_NRST_GPIO_Port, TAS_NRST_Pin, 1);
 8005416:	2201      	movs	r2, #1
 8005418:	2102      	movs	r1, #2
 800541a:	4810      	ldr	r0, [pc, #64]	; (800545c <PA_Initialize+0x74>)
 800541c:	f7fb fc84 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_Delay(10); // ???
 8005420:	200a      	movs	r0, #10
 8005422:	f7fb f929 	bl	8000678 <HAL_Delay>
  PA_RegisterWrite32(0x4F, 0x00000007);
 8005426:	2107      	movs	r1, #7
 8005428:	204f      	movs	r0, #79	; 0x4f
 800542a:	f7ff ff89 	bl	8005340 <PA_RegisterWrite32>
  PA_RegisterWrite8(0x1B, 0x00);
 800542e:	2100      	movs	r1, #0
 8005430:	201b      	movs	r0, #27
 8005432:	f7ff ff39 	bl	80052a8 <PA_RegisterWrite8>
  PA_RegisterWrite8(0x00, 0x6C);
 8005436:	216c      	movs	r1, #108	; 0x6c
 8005438:	2000      	movs	r0, #0
 800543a:	f7ff ff35 	bl	80052a8 <PA_RegisterWrite8>
  if (HeadphoneMode)
 800543e:	b15c      	cbz	r4, 8005458 <PA_Initialize+0x70>
    PA_RegisterWrite8(0x05, 0x01); // !!! Is this necessary?
 8005440:	2101      	movs	r1, #1
 8005442:	2005      	movs	r0, #5
 8005444:	f7ff ff30 	bl	80052a8 <PA_RegisterWrite8>
    PA_RegisterWrite8(0x05, 0x13); // 0x13 or 0x1B. But 0x1B gives background noise and distortion.
 8005448:	2113      	movs	r1, #19
    PA_RegisterWrite8(0x05, 0x00);
 800544a:	2005      	movs	r0, #5
 800544c:	f7ff ff2c 	bl	80052a8 <PA_RegisterWrite8>
}
 8005450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PA_Mute();
 8005454:	f7ff bfc2 	b.w	80053dc <PA_Mute>
    PA_RegisterWrite8(0x05, 0x00);
 8005458:	4621      	mov	r1, r4
 800545a:	e7f6      	b.n	800544a <PA_Initialize+0x62>
 800545c:	40020c00 	.word	0x40020c00

08005460 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005460:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <MX_DMA_Init+0xb0>)
{
 8005462:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005466:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005468:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
 800546e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005470:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005474:	9200      	str	r2, [sp, #0]
 8005476:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800547a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800547e:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005480:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005484:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800548e:	f7fb f917 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005492:	200b      	movs	r0, #11
 8005494:	f7fb f946 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8005498:	2200      	movs	r2, #0
 800549a:	200c      	movs	r0, #12
 800549c:	4611      	mov	r1, r2
 800549e:	f7fb f90f 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80054a2:	200c      	movs	r0, #12
 80054a4:	f7fb f93e 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80054a8:	2200      	movs	r2, #0
 80054aa:	2011      	movs	r0, #17
 80054ac:	4611      	mov	r1, r2
 80054ae:	f7fb f907 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80054b2:	2011      	movs	r0, #17
 80054b4:	f7fb f936 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80054b8:	2200      	movs	r2, #0
 80054ba:	202f      	movs	r0, #47	; 0x2f
 80054bc:	4611      	mov	r1, r2
 80054be:	f7fb f8ff 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80054c2:	202f      	movs	r0, #47	; 0x2f
 80054c4:	f7fb f92e 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80054c8:	2200      	movs	r2, #0
 80054ca:	2039      	movs	r0, #57	; 0x39
 80054cc:	4611      	mov	r1, r2
 80054ce:	f7fb f8f7 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80054d2:	2039      	movs	r0, #57	; 0x39
 80054d4:	f7fb f926 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80054d8:	2200      	movs	r2, #0
 80054da:	203a      	movs	r0, #58	; 0x3a
 80054dc:	4611      	mov	r1, r2
 80054de:	f7fb f8ef 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80054e2:	203a      	movs	r0, #58	; 0x3a
 80054e4:	f7fb f91e 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80054e8:	2200      	movs	r2, #0
 80054ea:	203b      	movs	r0, #59	; 0x3b
 80054ec:	4611      	mov	r1, r2
 80054ee:	f7fb f8e7 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80054f2:	203b      	movs	r0, #59	; 0x3b
 80054f4:	f7fb f916 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80054f8:	2200      	movs	r2, #0
 80054fa:	2045      	movs	r0, #69	; 0x45
 80054fc:	4611      	mov	r1, r2
 80054fe:	f7fb f8df 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005502:	2045      	movs	r0, #69	; 0x45

}
 8005504:	b003      	add	sp, #12
 8005506:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800550a:	f7fb b90b 	b.w	8000724 <HAL_NVIC_EnableIRQ>
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800

08005514 <SPDIFRX_Locked_Callback>:

///////////////////////////////////////////////////////////////////////////////
// Overrides:

void SPDIFRX_Locked_Callback(uint8_t Value)
{
 8005514:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, Value);
 8005516:	2104      	movs	r1, #4
 8005518:	4801      	ldr	r0, [pc, #4]	; (8005520 <SPDIFRX_Locked_Callback+0xc>)
 800551a:	f7fb bc05 	b.w	8000d28 <HAL_GPIO_WritePin>
 800551e:	bf00      	nop
 8005520:	40020000 	.word	0x40020000

08005524 <HAL_SAI_TxHalfCpltCallback>:

///////////////////////////////////////////////////////////////////////////////

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
  SPDIFRX_CopySamplesToGivenBuffer(AudioOutputBuffer, 0);
 8005524:	2100      	movs	r1, #0
 8005526:	4801      	ldr	r0, [pc, #4]	; (800552c <HAL_SAI_TxHalfCpltCallback+0x8>)
 8005528:	f7ff baa2 	b.w	8004a70 <SPDIFRX_CopySamplesToGivenBuffer>
 800552c:	20002ce0 	.word	0x20002ce0

08005530 <HAL_SAI_TxCpltCallback>:
}

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
  SPDIFRX_CopySamplesToGivenBuffer(AudioOutputBuffer, 1);
 8005530:	2101      	movs	r1, #1
 8005532:	4801      	ldr	r0, [pc, #4]	; (8005538 <HAL_SAI_TxCpltCallback+0x8>)
 8005534:	f7ff ba9c 	b.w	8004a70 <SPDIFRX_CopySamplesToGivenBuffer>
 8005538:	20002ce0 	.word	0x20002ce0

0800553c <ClearOutputBuffer>:
///////////////////////////////////////////////////////////////////////////////

void ClearOutputBuffer()
{
  AudioSample24_t ZeroSample={0,0};
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 800553c:	2300      	movs	r3, #0
 800553e:	4a05      	ldr	r2, [pc, #20]	; (8005554 <ClearOutputBuffer+0x18>)
    AudioOutputBuffer[SampleIndex] = ZeroSample;
 8005540:	4619      	mov	r1, r3
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 8005542:	3301      	adds	r3, #1
 8005544:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
    AudioOutputBuffer[SampleIndex] = ZeroSample;
 8005548:	e9c2 1100 	strd	r1, r1, [r2]
  for(uint32_t SampleIndex = 0; SampleIndex < SPDIFRX_Buffer_NumSamples; ++SampleIndex)
 800554c:	f102 0208 	add.w	r2, r2, #8
 8005550:	d1f7      	bne.n	8005542 <ClearOutputBuffer+0x6>
}
 8005552:	4770      	bx	lr
 8005554:	20002ce0 	.word	0x20002ce0

08005558 <SPDIFRX_ClearOutputBuffer>:
  ClearOutputBuffer();
 8005558:	f7ff bff0 	b.w	800553c <ClearOutputBuffer>

0800555c <Mute>:

void Mute(uint8_t Value)
{
 800555c:	b510      	push	{r4, lr}
 800555e:	4604      	mov	r4, r0
  DAC_Mute(Value);
 8005560:	f7ff fe86 	bl	8005270 <DAC_Mute>

  if (Value)
 8005564:	b11c      	cbz	r4, 800556e <Mute+0x12>
    PA_Mute();
  else
    PA_SetMasterVolume(PA_MasterVolume_dB);
}
 8005566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PA_Mute();
 800556a:	f7ff bf37 	b.w	80053dc <PA_Mute>
    PA_SetMasterVolume(PA_MasterVolume_dB);
 800556e:	4b03      	ldr	r3, [pc, #12]	; (800557c <Mute+0x20>)
}
 8005570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PA_SetMasterVolume(PA_MasterVolume_dB);
 8005574:	ed93 0a00 	vldr	s0, [r3]
 8005578:	f7ff bf0c 	b.w	8005394 <PA_SetMasterVolume>
 800557c:	200040e4 	.word	0x200040e4

08005580 <SPDIFRX_MuteOutput_Callback>:
  Mute(Value);
 8005580:	f7ff bfec 	b.w	800555c <Mute>

08005584 <SetDACSampleRate_44100>:

void SetDACSampleRate_44100()
{
 8005584:	b530      	push	{r4, r5, lr}
  if (DACSampleRate == SAI_AUDIO_FREQUENCY_44K)
 8005586:	4d1c      	ldr	r5, [pc, #112]	; (80055f8 <SetDACSampleRate_44100+0x74>)
 8005588:	f64a 4344 	movw	r3, #44100	; 0xac44
{
 800558c:	b0a5      	sub	sp, #148	; 0x94
  if (DACSampleRate == SAI_AUDIO_FREQUENCY_44K)
 800558e:	682a      	ldr	r2, [r5, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d02e      	beq.n	80055f2 <SetDACSampleRate_44100+0x6e>
    return;

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInitStruct);
 8005594:	4668      	mov	r0, sp
 8005596:	f7fc fefd 	bl	8002394 <HAL_RCCEx_GetPeriphCLKConfig>

  PeriphClkInitStruct.PLLI2S.PLLI2SN = 429;
 800559a:	f240 13ad 	movw	r3, #429	; 0x1ad
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV4;
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800559e:	2101      	movs	r1, #1
  PeriphClkInitStruct.PLLI2SDivQ = 19;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055a0:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 429;
 80055a2:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80055a4:	2302      	movs	r3, #2
 80055a6:	e9cd 3103 	strd	r3, r1, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 19;
 80055aa:	2313      	movs	r3, #19
 80055ac:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055ae:	f7fc fc3f 	bl	8001e30 <HAL_RCCEx_PeriphCLKConfig>
 80055b2:	b108      	cbz	r0, 80055b8 <SetDACSampleRate_44100+0x34>
    Error_Handler();
 80055b4:	f000 fb84 	bl	8005cc0 <Error_Handler>

  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 80055b8:	4c10      	ldr	r4, [pc, #64]	; (80055fc <SetDACSampleRate_44100+0x78>)
 80055ba:	f64a 4344 	movw	r3, #44100	; 0xac44
  DACSampleRate = 44100;

  HandleHALResult(HAL_SAI_DMAStop(&hsai_BlockA2), "HAL_SAI_DMAStop");
 80055be:	4620      	mov	r0, r4
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 80055c0:	61e3      	str	r3, [r4, #28]
  DACSampleRate = 44100;
 80055c2:	602b      	str	r3, [r5, #0]
  HandleHALResult(HAL_SAI_DMAStop(&hsai_BlockA2), "HAL_SAI_DMAStop");
 80055c4:	f7fd f9bd 	bl	8002942 <HAL_SAI_DMAStop>
 80055c8:	490d      	ldr	r1, [pc, #52]	; (8005600 <SetDACSampleRate_44100+0x7c>)
 80055ca:	f7ff fe2f 	bl	800522c <HandleHALResult>
  HandleHALResult(HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2), "HAL_SAI_InitProtocol");
 80055ce:	2302      	movs	r3, #2
 80055d0:	2100      	movs	r1, #0
 80055d2:	4620      	mov	r0, r4
 80055d4:	461a      	mov	r2, r3
 80055d6:	f7fd f91f 	bl	8002818 <HAL_SAI_InitProtocol>
 80055da:	490a      	ldr	r1, [pc, #40]	; (8005604 <SetDACSampleRate_44100+0x80>)
 80055dc:	f7ff fe26 	bl	800522c <HandleHALResult>
  HandleHALResult(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)AudioOutputBuffer, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples), "HAL_SAI_Transmit_DMA");
 80055e0:	4909      	ldr	r1, [pc, #36]	; (8005608 <SetDACSampleRate_44100+0x84>)
 80055e2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80055e6:	4620      	mov	r0, r4
 80055e8:	f7fd f9f6 	bl	80029d8 <HAL_SAI_Transmit_DMA>
 80055ec:	4907      	ldr	r1, [pc, #28]	; (800560c <SetDACSampleRate_44100+0x88>)
 80055ee:	f7ff fe1d 	bl	800522c <HandleHALResult>
}
 80055f2:	b025      	add	sp, #148	; 0x94
 80055f4:	bd30      	pop	{r4, r5, pc}
 80055f6:	bf00      	nop
 80055f8:	200040e0 	.word	0x200040e0
 80055fc:	200042b8 	.word	0x200042b8
 8005600:	080096a3 	.word	0x080096a3
 8005604:	080096b3 	.word	0x080096b3
 8005608:	20002ce0 	.word	0x20002ce0
 800560c:	080096c8 	.word	0x080096c8

08005610 <SetDACSampleRate_48000>:

void SetDACSampleRate_48000()
{
 8005610:	b530      	push	{r4, r5, lr}
  if (DACSampleRate == SAI_AUDIO_FREQUENCY_48K)
 8005612:	4d1b      	ldr	r5, [pc, #108]	; (8005680 <SetDACSampleRate_48000+0x70>)
 8005614:	f64b 3380 	movw	r3, #48000	; 0xbb80
{
 8005618:	b0a5      	sub	sp, #148	; 0x94
  if (DACSampleRate == SAI_AUDIO_FREQUENCY_48K)
 800561a:	682a      	ldr	r2, [r5, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d02d      	beq.n	800567c <SetDACSampleRate_48000+0x6c>
    return;

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  HAL_RCCEx_GetPeriphCLKConfig(&PeriphClkInitStruct);
 8005620:	4668      	mov	r0, sp
 8005622:	f7fc feb7 	bl	8002394 <HAL_RCCEx_GetPeriphCLKConfig>

  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8005626:	f44f 73ac 	mov.w	r3, #344	; 0x158
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV4;
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 14;
 800562a:	220e      	movs	r2, #14
  PeriphClkInitStruct.PLLI2SDivQ = 1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800562c:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 800562e:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 14;
 8005630:	2301      	movs	r3, #1
 8005632:	e9cd 2303 	strd	r2, r3, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8005636:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005638:	f7fc fbfa 	bl	8001e30 <HAL_RCCEx_PeriphCLKConfig>
 800563c:	b108      	cbz	r0, 8005642 <SetDACSampleRate_48000+0x32>
    Error_Handler();
 800563e:	f000 fb3f 	bl	8005cc0 <Error_Handler>

  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8005642:	4c10      	ldr	r4, [pc, #64]	; (8005684 <SetDACSampleRate_48000+0x74>)
 8005644:	f64b 3380 	movw	r3, #48000	; 0xbb80
  DACSampleRate = SAI_AUDIO_FREQUENCY_48K;

  HandleHALResult(HAL_SAI_DMAStop(&hsai_BlockA2), "HAL_SAI_DMAStop");
 8005648:	4620      	mov	r0, r4
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800564a:	61e3      	str	r3, [r4, #28]
  DACSampleRate = SAI_AUDIO_FREQUENCY_48K;
 800564c:	602b      	str	r3, [r5, #0]
  HandleHALResult(HAL_SAI_DMAStop(&hsai_BlockA2), "HAL_SAI_DMAStop");
 800564e:	f7fd f978 	bl	8002942 <HAL_SAI_DMAStop>
 8005652:	490d      	ldr	r1, [pc, #52]	; (8005688 <SetDACSampleRate_48000+0x78>)
 8005654:	f7ff fdea 	bl	800522c <HandleHALResult>
  HandleHALResult(HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2), "HAL_SAI_InitProtocol");
 8005658:	2302      	movs	r3, #2
 800565a:	2100      	movs	r1, #0
 800565c:	4620      	mov	r0, r4
 800565e:	461a      	mov	r2, r3
 8005660:	f7fd f8da 	bl	8002818 <HAL_SAI_InitProtocol>
 8005664:	4909      	ldr	r1, [pc, #36]	; (800568c <SetDACSampleRate_48000+0x7c>)
 8005666:	f7ff fde1 	bl	800522c <HandleHALResult>
  HandleHALResult(HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)AudioOutputBuffer, (sizeof(AudioSample24_t) / sizeof(int32_t)) * SPDIFRX_Buffer_NumSamples), "HAL_SAI_Transmit_DMA");
 800566a:	4909      	ldr	r1, [pc, #36]	; (8005690 <SetDACSampleRate_48000+0x80>)
 800566c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8005670:	4620      	mov	r0, r4
 8005672:	f7fd f9b1 	bl	80029d8 <HAL_SAI_Transmit_DMA>
 8005676:	4907      	ldr	r1, [pc, #28]	; (8005694 <SetDACSampleRate_48000+0x84>)
 8005678:	f7ff fdd8 	bl	800522c <HandleHALResult>
}
 800567c:	b025      	add	sp, #148	; 0x94
 800567e:	bd30      	pop	{r4, r5, pc}
 8005680:	200040e0 	.word	0x200040e0
 8005684:	200042b8 	.word	0x200042b8
 8005688:	080096a3 	.word	0x080096a3
 800568c:	080096b3 	.word	0x080096b3
 8005690:	20002ce0 	.word	0x20002ce0
 8005694:	080096c8 	.word	0x080096c8

08005698 <SPDIFRX_SetOutputSampleRate_Callback>:
  if (Value == 44100)
 8005698:	f64a 4344 	movw	r3, #44100	; 0xac44
 800569c:	4298      	cmp	r0, r3
 800569e:	d101      	bne.n	80056a4 <SPDIFRX_SetOutputSampleRate_Callback+0xc>
    SetDACSampleRate_44100();
 80056a0:	f7ff bf70 	b.w	8005584 <SetDACSampleRate_44100>
  else if (Value == 48000)
 80056a4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80056a8:	4298      	cmp	r0, r3
 80056aa:	d101      	bne.n	80056b0 <SPDIFRX_SetOutputSampleRate_Callback+0x18>
    SetDACSampleRate_48000();
 80056ac:	f7ff bfb0 	b.w	8005610 <SetDACSampleRate_48000>
    DACSampleRate = 0;
 80056b0:	4b01      	ldr	r3, [pc, #4]	; (80056b8 <SPDIFRX_SetOutputSampleRate_Callback+0x20>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
}
 80056b6:	4770      	bx	lr
 80056b8:	200040e0 	.word	0x200040e0

080056bc <Go>:

void Go()
{
 80056bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t UserButtonPressedAlreadyPressed = 0;
  uint8_t RestartRequired = 0;
  uint8_t NumTransitionErrors, NumSyncErrors, NumFrameErrors;
  char S[128];
  
  ILI9341_SetFont(&FreeSans12pt7b);
 80056c0:	4894      	ldr	r0, [pc, #592]	; (8005914 <Go+0x258>)
{
 80056c2:	b0a5      	sub	sp, #148	; 0x94
  ILI9341_SetFont(&FreeSans12pt7b);
 80056c4:	f7fe ffec 	bl	80046a0 <ILI9341_SetFont>
  ILI9341_SetTextColor(ILI9341_COLOR_WHITE);
 80056c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80056cc:	f7ff f96e 	bl	80049ac <ILI9341_SetTextColor>
  ILI9341_SetTextBackgroundColor(ILI9341_COLOR_BLACK);
 80056d0:	2000      	movs	r0, #0
 80056d2:	f7ff f973 	bl	80049bc <ILI9341_SetTextBackgroundColor>
  ILI9341_SetTextDrawMode(tdmAnyCharBar); // Slower but enables flicker free update.
 80056d6:	2002      	movs	r0, #2
 80056d8:	f7ff f978 	bl	80049cc <ILI9341_SetTextDrawMode>
  ILI9341_SetFont(&FreeSans9pt7b);
 80056dc:	488e      	ldr	r0, [pc, #568]	; (8005918 <Go+0x25c>)
 80056de:	f7fe ffdf 	bl	80046a0 <ILI9341_SetFont>
  uint8_t RestartRequired = 0;
 80056e2:	2400      	movs	r4, #0

  ILI9341_Clear(0x0000);
 80056e4:	2000      	movs	r0, #0
  uint8_t SPDIF_InputChannel = 2;
 80056e6:	2702      	movs	r7, #2
  ILI9341_Clear(0x0000);
 80056e8:	f7fe ffce 	bl	8004688 <ILI9341_Clear>
  uint8_t UserButtonPressedAlreadyPressed = 0;
 80056ec:	46a1      	mov	r9, r4

  DAC_Initialize();
 80056ee:	f7ff fdc9 	bl	8005284 <DAC_Initialize>
  //
  PA_Initialize(0);
 80056f2:	2000      	movs	r0, #0
 80056f4:	f7ff fe78 	bl	80053e8 <PA_Initialize>
  uint8_t SPDIFRX_Started = 0;
 80056f8:	4625      	mov	r5, r4
  //PA_Initialize(1); // Headphones.

  Y += ILI9341_GetFontYSpacing();
 80056fa:	f7fe ffd9 	bl	80046b0 <ILI9341_GetFontYSpacing>
  ILI9341_DrawTextAtXY("S/P-DIF=>DAC+PA", 0, Y, tpLeft);
 80056fe:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8005954 <Go+0x298>
 8005702:	b282      	uxth	r2, r0
 8005704:	2301      	movs	r3, #1
 8005706:	2100      	movs	r1, #0
 8005708:	4884      	ldr	r0, [pc, #528]	; (800591c <Go+0x260>)
    else
      UserButtonPressedAlreadyPressed = 0;

    if (!SPDIFRX_Started)
    {
      SPDIFRX_Started = SPDIFRX_Start(hsai_BlockA2.Init.AudioFrequency, SPDIF_InputChannel, 0, 0);
 800570a:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8005958 <Go+0x29c>
  ILI9341_DrawTextAtXY("S/P-DIF=>DAC+PA", 0, Y, tpLeft);
 800570e:	f7ff f965 	bl	80049dc <ILI9341_DrawTextAtXY>
  Mute(0);
 8005712:	2000      	movs	r0, #0
 8005714:	f7ff ff22 	bl	800555c <Mute>
    if (IsUserButtonPressed())
 8005718:	f7ff fd9e 	bl	8005258 <IsUserButtonPressed>
 800571c:	4606      	mov	r6, r0
 800571e:	b140      	cbz	r0, 8005732 <Go+0x76>
      if (!UserButtonPressedAlreadyPressed)
 8005720:	f1b9 0f00 	cmp.w	r9, #0
 8005724:	f040 80f4 	bne.w	8005910 <Go+0x254>
        SPDIF_InputChannel = SPDIF_InputChannel == 2 ? 3 : 2;
 8005728:	f1c7 0705 	rsb	r7, r7, #5
        RestartRequired = 1;
 800572c:	2401      	movs	r4, #1
        SPDIF_InputChannel = SPDIF_InputChannel == 2 ? 3 : 2;
 800572e:	b2ff      	uxtb	r7, r7
        UserButtonPressedAlreadyPressed = 1;
 8005730:	4626      	mov	r6, r4
    if (!SPDIFRX_Started)
 8005732:	b965      	cbnz	r5, 800574e <Go+0x92>
      SPDIFRX_Started = SPDIFRX_Start(hsai_BlockA2.Init.AudioFrequency, SPDIF_InputChannel, 0, 0);
 8005734:	eddb 7a07 	vldr	s15, [fp, #28]
 8005738:	462a      	mov	r2, r5
 800573a:	4629      	mov	r1, r5
 800573c:	4638      	mov	r0, r7
 800573e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8005742:	f7ff fbc9 	bl	8004ed8 <SPDIFRX_Start>
 8005746:	4605      	mov	r5, r0
      PA_ClearErrorStatus();
 8005748:	f7ff fe1f 	bl	800538a <PA_ClearErrorStatus>
    }

    if (SPDIFRX_Started)
 800574c:	b165      	cbz	r5, 8005768 <Go+0xac>
    {
      if (SPDIFRX_HasReceiveErrorOccurred() || RestartRequired)
 800574e:	f7ff fc77 	bl	8005040 <SPDIFRX_HasReceiveErrorOccurred>
 8005752:	4320      	orrs	r0, r4
 8005754:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8005758:	d006      	beq.n	8005768 <Go+0xac>
      {
        RestartRequired = 0;
        SPDIFRX_Stop();
 800575a:	f7ff fb9b 	bl	8004e94 <SPDIFRX_Stop>
        DACSampleRate = 0;
 800575e:	2300      	movs	r3, #0
        RestartRequired = 0;
 8005760:	461c      	mov	r4, r3
        SPDIFRX_Started = 0;
 8005762:	461d      	mov	r5, r3
        DACSampleRate = 0;
 8005764:	f8c8 3000 	str.w	r3, [r8]
      }
    }

    if (XPT2046_Sample(&Touch_RawX, &Touch_RawY, &Touch_RawZ))
 8005768:	f10d 020a 	add.w	r2, sp, #10
 800576c:	a902      	add	r1, sp, #8
 800576e:	f10d 0006 	add.w	r0, sp, #6
 8005772:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 800595c <Go+0x2a0>
 8005776:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8005960 <Go+0x2a4>
 800577a:	f7ff fc97 	bl	80050ac <XPT2046_Sample>
 800577e:	b3b0      	cbz	r0, 80057ee <Go+0x132>
    {
      XPT2046_ConvertRawToScreen(Touch_RawX, Touch_RawY, &Touch_ScreenX, &Touch_ScreenY);
 8005780:	f10d 030e 	add.w	r3, sp, #14
 8005784:	aa03      	add	r2, sp, #12
 8005786:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800578a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 800578e:	f7ff fd01 	bl	8005194 <XPT2046_ConvertRawToScreen>
      AudioTransferGain = Clamp_float((float)Touch_ScreenY / 320.0f, 0.0f, 1.0f);
 8005792:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8005796:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8005920 <Go+0x264>
 800579a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eddf 0a60 	vldr	s1, [pc, #384]	; 8005924 <Go+0x268>
 80057a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057aa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80057ae:	f7fe fba7 	bl	8003f00 <Clamp_float>
      SPDIFRX_TransferGain = AudioTransferGain;
 80057b2:	4b5d      	ldr	r3, [pc, #372]	; (8005928 <Go+0x26c>)

      PA_MasterVolume_dB = 20.0f - 80.0f * (1.0f - ((float)Touch_ScreenX / 240.0f));
 80057b4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800592c <Go+0x270>
      SPDIFRX_TransferGain = AudioTransferGain;
 80057b8:	ed83 0a00 	vstr	s0, [r3]
      PA_MasterVolume_dB = 20.0f - 80.0f * (1.0f - ((float)Touch_ScreenX / 240.0f));
 80057bc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      AudioTransferGain = Clamp_float((float)Touch_ScreenY / 320.0f, 0.0f, 1.0f);
 80057c0:	ed8a 0a00 	vstr	s0, [sl]
      PA_MasterVolume_dB = 20.0f - 80.0f * (1.0f - ((float)Touch_ScreenX / 240.0f));
 80057c4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80057c8:	ee07 3a10 	vmov	s14, r3
 80057cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80057d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057d4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005930 <Go+0x274>
 80057d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80057dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057e0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80057e4:	ed89 0a00 	vstr	s0, [r9]
      if (SPDIFRX_Started) // Don't override mute. Would be better if PA had a mute function that is independent of the set volume.
 80057e8:	b10d      	cbz	r5, 80057ee <Go+0x132>
        PA_SetMasterVolume(PA_MasterVolume_dB);
 80057ea:	f7ff fdd3 	bl	8005394 <PA_SetMasterVolume>
    }

    int LineIndex = 3;

    sprintf(S, "SPDIF input channel: %d     ", SPDIF_InputChannel);
 80057ee:	463a      	mov	r2, r7
 80057f0:	4950      	ldr	r1, [pc, #320]	; (8005934 <Go+0x278>)
 80057f2:	a804      	add	r0, sp, #16
 80057f4:	f001 fde4 	bl	80073c0 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 80057f8:	f7fe ff5a 	bl	80046b0 <ILI9341_GetFontYSpacing>
 80057fc:	2301      	movs	r3, #1
 80057fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005802:	2100      	movs	r1, #0
 8005804:	b282      	uxth	r2, r0
 8005806:	a804      	add	r0, sp, #16
 8005808:	f7ff f8e8 	bl	80049dc <ILI9341_DrawTextAtXY>

    sprintf(S, "Transfer gain: %0.2f     ", AudioTransferGain);
 800580c:	edda 7a00 	vldr	s15, [sl]
 8005810:	4949      	ldr	r1, [pc, #292]	; (8005938 <Go+0x27c>)
 8005812:	a804      	add	r0, sp, #16
 8005814:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005818:	ec53 2b17 	vmov	r2, r3, d7
 800581c:	f001 fdd0 	bl	80073c0 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 8005820:	f7fe ff46 	bl	80046b0 <ILI9341_GetFontYSpacing>
 8005824:	2301      	movs	r3, #1
 8005826:	0080      	lsls	r0, r0, #2
 8005828:	2100      	movs	r1, #0
 800582a:	b282      	uxth	r2, r0
 800582c:	a804      	add	r0, sp, #16
 800582e:	f7ff f8d5 	bl	80049dc <ILI9341_DrawTextAtXY>

    sprintf(S, "PA master vol: %0.1f     ", PA_MasterVolume_dB);
 8005832:	edd9 7a00 	vldr	s15, [r9]
 8005836:	4941      	ldr	r1, [pc, #260]	; (800593c <Go+0x280>)
 8005838:	a804      	add	r0, sp, #16
 800583a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
  {
 800583e:	46b1      	mov	r9, r6
    sprintf(S, "PA master vol: %0.1f     ", PA_MasterVolume_dB);
 8005840:	ec53 2b17 	vmov	r2, r3, d7
 8005844:	f001 fdbc 	bl	80073c0 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 8005848:	f7fe ff32 	bl	80046b0 <ILI9341_GetFontYSpacing>
 800584c:	2301      	movs	r3, #1
 800584e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005852:	2100      	movs	r1, #0
 8005854:	b282      	uxth	r2, r0
 8005856:	a804      	add	r0, sp, #16
 8005858:	f7ff f8c0 	bl	80049dc <ILI9341_DrawTextAtXY>

    PA_ErrorStatus = PA_GetErrorStatus();
 800585c:	f7ff fd92 	bl	8005384 <PA_GetErrorStatus>
    sprintf(S, "PA error status: %2X", PA_ErrorStatus);
 8005860:	4937      	ldr	r1, [pc, #220]	; (8005940 <Go+0x284>)
    PA_ErrorStatus = PA_GetErrorStatus();
 8005862:	4602      	mov	r2, r0
    sprintf(S, "PA error status: %2X", PA_ErrorStatus);
 8005864:	a804      	add	r0, sp, #16
 8005866:	f001 fdab 	bl	80073c0 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800586a:	f7fe ff21 	bl	80046b0 <ILI9341_GetFontYSpacing>
 800586e:	2301      	movs	r3, #1
 8005870:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005874:	2100      	movs	r1, #0
 8005876:	0042      	lsls	r2, r0, #1
 8005878:	a804      	add	r0, sp, #16
 800587a:	b292      	uxth	r2, r2
 800587c:	f7ff f8ae 	bl	80049dc <ILI9341_DrawTextAtXY>

    sprintf(S, "DAC sample rate: %lu          ", DACSampleRate);
 8005880:	f8d8 2000 	ldr.w	r2, [r8]
 8005884:	492f      	ldr	r1, [pc, #188]	; (8005944 <Go+0x288>)
 8005886:	a804      	add	r0, sp, #16
 8005888:	f001 fd9a 	bl	80073c0 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 800588c:	f7fe ff10 	bl	80046b0 <ILI9341_GetFontYSpacing>
 8005890:	2301      	movs	r3, #1
 8005892:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005896:	2100      	movs	r1, #0
 8005898:	b282      	uxth	r2, r0
 800589a:	a804      	add	r0, sp, #16
 800589c:	f7ff f89e 	bl	80049dc <ILI9341_DrawTextAtXY>

    SPDIFRX_GetNumErrors(&NumTransitionErrors, &NumSyncErrors, &NumFrameErrors);
 80058a0:	f10d 0205 	add.w	r2, sp, #5
 80058a4:	a901      	add	r1, sp, #4
 80058a6:	f10d 0003 	add.w	r0, sp, #3
 80058aa:	f7ff f8cf 	bl	8004a4c <SPDIFRX_GetNumErrors>

    sprintf(S, "Num transition errors: %d          ", NumTransitionErrors);
 80058ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80058b2:	4925      	ldr	r1, [pc, #148]	; (8005948 <Go+0x28c>)
 80058b4:	a804      	add	r0, sp, #16
 80058b6:	f001 fd83 	bl	80073c0 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 80058ba:	f7fe fef9 	bl	80046b0 <ILI9341_GetFontYSpacing>
 80058be:	2301      	movs	r3, #1
 80058c0:	00c0      	lsls	r0, r0, #3
 80058c2:	2100      	movs	r1, #0
 80058c4:	b282      	uxth	r2, r0
 80058c6:	a804      	add	r0, sp, #16
 80058c8:	f7ff f888 	bl	80049dc <ILI9341_DrawTextAtXY>

    sprintf(S, "Num sync errors: %d          ", NumSyncErrors);
 80058cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80058d0:	491e      	ldr	r1, [pc, #120]	; (800594c <Go+0x290>)
 80058d2:	a804      	add	r0, sp, #16
 80058d4:	f001 fd74 	bl	80073c0 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 80058d8:	f7fe feea 	bl	80046b0 <ILI9341_GetFontYSpacing>
 80058dc:	2301      	movs	r3, #1
 80058de:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80058e2:	2100      	movs	r1, #0
 80058e4:	b282      	uxth	r2, r0
 80058e6:	a804      	add	r0, sp, #16
 80058e8:	f7ff f878 	bl	80049dc <ILI9341_DrawTextAtXY>

    sprintf(S, "Num frame errors: %d          ", NumFrameErrors);
 80058ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80058f0:	4917      	ldr	r1, [pc, #92]	; (8005950 <Go+0x294>)
 80058f2:	a804      	add	r0, sp, #16
 80058f4:	f001 fd64 	bl	80073c0 <siprintf>
    ILI9341_DrawTextAtXY(S, 0, LineIndex++ * ILI9341_GetFontYSpacing(), tpLeft);
 80058f8:	f7fe feda 	bl	80046b0 <ILI9341_GetFontYSpacing>
 80058fc:	2301      	movs	r3, #1
 80058fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005902:	2100      	movs	r1, #0
 8005904:	0042      	lsls	r2, r0, #1
 8005906:	a804      	add	r0, sp, #16
 8005908:	b292      	uxth	r2, r2
 800590a:	f7ff f867 	bl	80049dc <ILI9341_DrawTextAtXY>
  {
 800590e:	e703      	b.n	8005718 <Go+0x5c>
 8005910:	464e      	mov	r6, r9
 8005912:	e70e      	b.n	8005732 <Go+0x76>
 8005914:	080097d4 	.word	0x080097d4
 8005918:	0800a290 	.word	0x0800a290
 800591c:	080096dd 	.word	0x080096dd
 8005920:	43a00000 	.word	0x43a00000
 8005924:	00000000 	.word	0x00000000
 8005928:	2000000c 	.word	0x2000000c
 800592c:	43700000 	.word	0x43700000
 8005930:	42a00000 	.word	0x42a00000
 8005934:	080096ed 	.word	0x080096ed
 8005938:	0800970a 	.word	0x0800970a
 800593c:	08009724 	.word	0x08009724
 8005940:	0800973e 	.word	0x0800973e
 8005944:	08009753 	.word	0x08009753
 8005948:	08009772 	.word	0x08009772
 800594c:	08009796 	.word	0x08009796
 8005950:	080097b4 	.word	0x080097b4
 8005954:	200040e0 	.word	0x200040e0
 8005958:	200042b8 	.word	0x200042b8
 800595c:	20000020 	.word	0x20000020
 8005960:	200040e4 	.word	0x200040e4

08005964 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> I2S_CKIN
*/
void MX_GPIO_Init(void)
{
 8005964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005968:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800596a:	2214      	movs	r2, #20
 800596c:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 800596e:	4f73      	ldr	r7, [pc, #460]	; (8005b3c <MX_GPIO_Init+0x1d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005970:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8005972:	4e73      	ldr	r6, [pc, #460]	; (8005b40 <MX_GPIO_Init+0x1dc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005974:	f000 ff78 	bl	8006868 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005978:	4b72      	ldr	r3, [pc, #456]	; (8005b44 <MX_GPIO_Init+0x1e0>)
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 800597a:	4638      	mov	r0, r7
 800597c:	2124      	movs	r1, #36	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800597e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_NSS_Pin|ESP32_B_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005980:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8005982:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8005b4c <MX_GPIO_Init+0x1e8>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005986:	2501      	movs	r5, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005988:	f042 0210 	orr.w	r2, r2, #16
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin 
 800598c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b50 <MX_GPIO_Init+0x1ec>
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8005990:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8005b54 <MX_GPIO_Init+0x1f0>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005994:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
 800599a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599c:	f002 0210 	and.w	r2, r2, #16
 80059a0:	9201      	str	r2, [sp, #4]
 80059a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80059a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a6:	f042 0204 	orr.w	r2, r2, #4
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
 80059ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ae:	f002 0204 	and.w	r2, r2, #4
 80059b2:	9202      	str	r2, [sp, #8]
 80059b4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80059b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
 80059be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80059c4:	9203      	str	r2, [sp, #12]
 80059c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
 80059d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d2:	f002 0201 	and.w	r2, r2, #1
 80059d6:	9204      	str	r2, [sp, #16]
 80059d8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059dc:	f042 0202 	orr.w	r2, r2, #2
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
 80059e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e4:	f002 0202 	and.w	r2, r2, #2
 80059e8:	9205      	str	r2, [sp, #20]
 80059ea:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ee:	f042 0208 	orr.w	r2, r2, #8
 80059f2:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 80059f4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	9306      	str	r3, [sp, #24]
 80059fe:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, ESP32_A_NSS_Pin|ESP32_B_NSS_Pin, GPIO_PIN_SET);
 8005a00:	f7fb f992 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, ESP32_B_EN_Pin|ESP32_A_EN_Pin, GPIO_PIN_RESET);
 8005a04:	4638      	mov	r0, r7
 8005a06:	2200      	movs	r2, #0
 8005a08:	2112      	movs	r1, #18
 8005a0a:	f7fb f98d 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_NSS_GPIO_Port, FLASH_NSS_Pin, GPIO_PIN_SET);
 8005a0e:	4630      	mov	r0, r6
 8005a10:	2201      	movs	r2, #1
 8005a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a16:	f7fb f987 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin|LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET);
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	210f      	movs	r1, #15
 8005a20:	f7fb f982 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8005a24:	4658      	mov	r0, fp
 8005a26:	2200      	movs	r2, #0
 8005a28:	210e      	movs	r1, #14
 8005a2a:	f7fb f97d 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin|TS_NSS_Pin 
 8005a2e:	4640      	mov	r0, r8
 8005a30:	2200      	movs	r2, #0
 8005a32:	f641 0143 	movw	r1, #6211	; 0x1843
 8005a36:	f7fb f977 	bl	8000d28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4650      	mov	r0, sl
 8005a3e:	217f      	movs	r1, #127	; 0x7f
 8005a40:	f7fb f972 	bl	8000d28 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a44:	2324      	movs	r3, #36	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a46:	a907      	add	r1, sp, #28
 8005a48:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a4a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a4e:	e9cd 4909 	strd	r4, r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a52:	f7fb f871 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_A_HSK_Pin|ESP32_B_HSK_Pin;
 8005a56:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a58:	a907      	add	r1, sp, #28
 8005a5a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a5e:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a62:	f7fb f869 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ESP32_B_EN_Pin|ESP32_A_EN_Pin;
 8005a66:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a68:	a907      	add	r1, sp, #28
 8005a6a:	4638      	mov	r0, r7

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUserButton_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a6c:	4f36      	ldr	r7, [pc, #216]	; (8005b48 <MX_GPIO_Init+0x1e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a6e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a72:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a76:	f7fb f85f 	bl	8000b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 8005a7e:	a907      	add	r1, sp, #28
 8005a80:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a82:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a84:	e9cd 3707 	strd	r3, r7, [sp, #28]
  HAL_GPIO_Init(NUserButton_GPIO_Port, &GPIO_InitStruct);
 8005a88:	f7fb f856 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = FLASH_NSS_Pin|LCD_NRST_Pin|LCD_NSS_Pin|LCD_NC_D_Pin 
 8005a8c:	f248 030f 	movw	r3, #32783	; 0x800f
                          |LCD_NBACKLIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a90:	a907      	add	r1, sp, #28
 8005a92:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a94:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a98:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a9c:	f7fb f84c 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 8005aa0:	230e      	movs	r3, #14
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aa2:	a907      	add	r1, sp, #28
 8005aa4:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005aa6:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aaa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aae:	f7fb f843 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SAI_RxDMA_Pin|SAI_TxDMA_Pin|TestPoint_Pin;
 8005ab2:	f640 0303 	movw	r3, #2051	; 0x803
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ab6:	a907      	add	r1, sp, #28
 8005ab8:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005aba:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005abe:	e9cd 4909 	strd	r4, r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ac2:	f7fb f839 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TS_NSS_Pin|SI_NRST_Pin;
 8005ac6:	f44f 5382 	mov.w	r3, #4160	; 0x1040
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aca:	a907      	add	r1, sp, #28
 8005acc:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ace:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad6:	f7fb f82f 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005ada:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ade:	a907      	add	r1, sp, #28
 8005ae0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae2:	e9cd 3907 	strd	r3, r9, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005ae6:	2305      	movs	r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005aec:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aee:	f7fb f823 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = TAS_PDN_Pin|TAS_NRST_Pin|MUX_S0_Pin|MUX_S1_Pin 
 8005af2:	237f      	movs	r3, #127	; 0x7f
                          |DAC_FLT_Pin|DAC_DEMP_Pin|DAC_XSMT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005af4:	a907      	add	r1, sp, #28
 8005af6:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005af8:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005afc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b00:	f7fb f81a 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SI_INT_Pin;
 8005b04:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 8005b06:	a907      	add	r1, sp, #28
 8005b08:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005b0c:	e9cd 3707 	strd	r3, r7, [sp, #28]
  HAL_GPIO_Init(SI_INT_GPIO_Port, &GPIO_InitStruct);
 8005b10:	f7fb f812 	bl	8000b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005b14:	4622      	mov	r2, r4
 8005b16:	4621      	mov	r1, r4
 8005b18:	2017      	movs	r0, #23
 8005b1a:	f7fa fdd1 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005b1e:	2017      	movs	r0, #23
 8005b20:	f7fa fe00 	bl	8000724 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005b24:	4622      	mov	r2, r4
 8005b26:	4621      	mov	r1, r4
 8005b28:	2028      	movs	r0, #40	; 0x28
 8005b2a:	f7fa fdc9 	bl	80006c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005b2e:	2028      	movs	r0, #40	; 0x28
 8005b30:	f7fa fdf8 	bl	8000724 <HAL_NVIC_EnableIRQ>

}
 8005b34:	b00d      	add	sp, #52	; 0x34
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	40020800 	.word	0x40020800
 8005b44:	40023800 	.word	0x40023800
 8005b48:	10210000 	.word	0x10210000
 8005b4c:	40020000 	.word	0x40020000
 8005b50:	40020400 	.word	0x40020400
 8005b54:	40020c00 	.word	0x40020c00

08005b58 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005b58:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8005b5a:	4812      	ldr	r0, [pc, #72]	; (8005ba4 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x6000030D;
 8005b5c:	4a12      	ldr	r2, [pc, #72]	; (8005ba8 <MX_I2C1_Init+0x50>)
 8005b5e:	4b13      	ldr	r3, [pc, #76]	; (8005bac <MX_I2C1_Init+0x54>)
 8005b60:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b64:	2300      	movs	r3, #0
 8005b66:	2201      	movs	r2, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8005b68:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b6c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b70:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b74:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b76:	f7fb fa58 	bl	800102a <HAL_I2C_Init>
 8005b7a:	b108      	cbz	r0, 8005b80 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8005b7c:	f000 f8a0 	bl	8005cc0 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005b80:	2100      	movs	r1, #0
 8005b82:	4808      	ldr	r0, [pc, #32]	; (8005ba4 <MX_I2C1_Init+0x4c>)
 8005b84:	f7fb fe6e 	bl	8001864 <HAL_I2CEx_ConfigAnalogFilter>
 8005b88:	b108      	cbz	r0, 8005b8e <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8005b8a:	f000 f899 	bl	8005cc0 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4804      	ldr	r0, [pc, #16]	; (8005ba4 <MX_I2C1_Init+0x4c>)
 8005b92:	f7fb fe8d 	bl	80018b0 <HAL_I2CEx_ConfigDigitalFilter>
 8005b96:	b118      	cbz	r0, 8005ba0 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8005b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005b9c:	f000 b890 	b.w	8005cc0 <Error_Handler>
}
 8005ba0:	bd08      	pop	{r3, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200041a8 	.word	0x200041a8
 8005ba8:	40005400 	.word	0x40005400
 8005bac:	6000030d 	.word	0x6000030d

08005bb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005bb0:	b530      	push	{r4, r5, lr}
 8005bb2:	b089      	sub	sp, #36	; 0x24
 8005bb4:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bb6:	2214      	movs	r2, #20
 8005bb8:	2100      	movs	r1, #0
 8005bba:	a803      	add	r0, sp, #12
 8005bbc:	f000 fe54 	bl	8006868 <memset>
  if(i2cHandle->Instance==I2C1)
 8005bc0:	682a      	ldr	r2, [r5, #0]
 8005bc2:	4b38      	ldr	r3, [pc, #224]	; (8005ca4 <HAL_I2C_MspInit+0xf4>)
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d16a      	bne.n	8005c9e <HAL_I2C_MspInit+0xee>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bc8:	4c37      	ldr	r4, [pc, #220]	; (8005ca8 <HAL_I2C_MspInit+0xf8>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bca:	f44f 7140 	mov.w	r1, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bce:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005bd2:	f043 0302 	orr.w	r3, r3, #2
 8005bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8005bd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005be2:	2312      	movs	r3, #18
 8005be4:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be8:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bea:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bec:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005bf0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf2:	482e      	ldr	r0, [pc, #184]	; (8005cac <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005bf4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf6:	f7fa ff9f 	bl	8000b38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8005c00:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8005cbc <HAL_I2C_MspInit+0x10c>
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c04:	f04f 0e40 	mov.w	lr, #64	; 0x40
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c0c:	6423      	str	r3, [r4, #64]	; 0x40
 8005c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8005c10:	4c27      	ldr	r4, [pc, #156]	; (8005cb0 <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005c16:	4620      	mov	r0, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c18:	9302      	str	r3, [sp, #8]
 8005c1a:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8005c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c20:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c24:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c26:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c2e:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005c32:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c36:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005c3a:	f7fa fdab 	bl	8000794 <HAL_DMA_Init>
 8005c3e:	b108      	cbz	r0, 8005c44 <HAL_I2C_MspInit+0x94>
    {
      Error_Handler();
 8005c40:	f000 f83e 	bl	8005cc0 <Error_Handler>

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005c44:	4a1b      	ldr	r2, [pc, #108]	; (8005cb4 <HAL_I2C_MspInit+0x104>)
 8005c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005c4a:	63ac      	str	r4, [r5, #56]	; 0x38
 8005c4c:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005c4e:	4c1a      	ldr	r4, [pc, #104]	; (8005cb8 <HAL_I2C_MspInit+0x108>)
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005c50:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c54:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005c5a:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c5c:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c64:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005c68:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c6c:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005c70:	f7fa fd90 	bl	8000794 <HAL_DMA_Init>
 8005c74:	b108      	cbz	r0, 8005c7a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8005c76:	f000 f823 	bl	8005cc0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005c7e:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005c80:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005c82:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005c84:	f7fa fd1c 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005c88:	201f      	movs	r0, #31
 8005c8a:	f7fa fd4b 	bl	8000724 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2020      	movs	r0, #32
 8005c92:	4611      	mov	r1, r2
 8005c94:	f7fa fd14 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005c98:	2020      	movs	r0, #32
 8005c9a:	f7fa fd43 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005c9e:	b009      	add	sp, #36	; 0x24
 8005ca0:	bd30      	pop	{r4, r5, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40005400 	.word	0x40005400
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40020400 	.word	0x40020400
 8005cb0:	20004148 	.word	0x20004148
 8005cb4:	40026010 	.word	0x40026010
 8005cb8:	200040e8 	.word	0x200040e8
 8005cbc:	400260b8 	.word	0x400260b8

08005cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    ToggleLED(LED_Red);
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	f7ff fab6 	bl	8005234 <ToggleLED>
    HAL_Delay(50);
 8005cc8:	2032      	movs	r0, #50	; 0x32
 8005cca:	f7fa fcd5 	bl	8000678 <HAL_Delay>
    ToggleLED(LED_Red);
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f7ff fab0 	bl	8005234 <ToggleLED>
    HAL_Delay(50);
 8005cd4:	2032      	movs	r0, #50	; 0x32
 8005cd6:	f7fa fccf 	bl	8000678 <HAL_Delay>
  while(1)
 8005cda:	e7f2      	b.n	8005cc2 <Error_Handler+0x2>

08005cdc <SystemClock_Config>:
{
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ce0:	222c      	movs	r2, #44	; 0x2c
 8005ce2:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005ce4:	2601      	movs	r6, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ce6:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ce8:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cea:	f000 fdbd 	bl	8006868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cee:	2214      	movs	r2, #20
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	a802      	add	r0, sp, #8
 8005cf4:	f000 fdb8 	bl	8006868 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005cf8:	2290      	movs	r2, #144	; 0x90
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	a814      	add	r0, sp, #80	; 0x50
 8005cfe:	f000 fdb3 	bl	8006868 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d02:	4b28      	ldr	r3, [pc, #160]	; (8005da4 <SystemClock_Config+0xc8>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8005d04:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d06:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d1c:	4b22      	ldr	r3, [pc, #136]	; (8005da8 <SystemClock_Config+0xcc>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005d30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005d34:	e9cd 6307 	strd	r6, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8005d38:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8005d3c:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d40:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d42:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005d46:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d4a:	f7fb fe0f 	bl	800196c <HAL_RCC_OscConfig>
 8005d4e:	b108      	cbz	r0, 8005d54 <SystemClock_Config+0x78>
    Error_Handler();
 8005d50:	f7ff ffb6 	bl	8005cc0 <Error_Handler>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005d54:	f7fb fdd2 	bl	80018fc <HAL_PWREx_EnableOverDrive>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d1f9      	bne.n	8005d50 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d5c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d5e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d62:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005d64:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d66:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d6e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005d72:	2107      	movs	r1, #7
 8005d74:	f7fb ffc0 	bl	8001cf8 <HAL_RCC_ClockConfig>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d1e9      	bne.n	8005d50 <SystemClock_Config+0x74>
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8005d7c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8005d80:	4a0a      	ldr	r2, [pc, #40]	; (8005dac <SystemClock_Config+0xd0>)
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005d82:	902d      	str	r0, [sp, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d84:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8005d86:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8005d88:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8005d8a:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8005d8c:	9524      	str	r5, [sp, #144]	; 0x90
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8005d8e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 14;
 8005d92:	230e      	movs	r3, #14
 8005d94:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d96:	f7fc f84b 	bl	8001e30 <HAL_RCCEx_PeriphCLKConfig>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d1d8      	bne.n	8005d50 <SystemClock_Config+0x74>
}
 8005d9e:	b038      	add	sp, #224	; 0xe0
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
 8005da2:	bf00      	nop
 8005da4:	40023800 	.word	0x40023800
 8005da8:	40007000 	.word	0x40007000
 8005dac:	01104000 	.word	0x01104000

08005db0 <main>:
{
 8005db0:	b508      	push	{r3, lr}
  __ASM volatile ("dsb 0xF":::"memory");
 8005db2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005db6:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005dba:	4a2d      	ldr	r2, [pc, #180]	; (8005e70 <main+0xc0>)
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005dc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005dc6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005dca:	6953      	ldr	r3, [r2, #20]
 8005dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dd0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005dd6:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005dda:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005dde:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005de2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005de6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005dea:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005dee:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8005df2:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005df4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005df8:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005dfa:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8005dfe:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005e00:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8005e04:	d2f9      	bcs.n	8005dfa <main+0x4a>
    } while(sets-- != 0U);
 8005e06:	3b20      	subs	r3, #32
 8005e08:	f113 0f20 	cmn.w	r3, #32
 8005e0c:	d1f2      	bne.n	8005df4 <main+0x44>
 8005e0e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005e12:	6953      	ldr	r3, [r2, #20]
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e18:	6153      	str	r3, [r2, #20]
 8005e1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005e1e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8005e22:	f7fa fc0b 	bl	800063c <HAL_Init>
  SystemClock_Config();
 8005e26:	f7ff ff59 	bl	8005cdc <SystemClock_Config>
  MX_GPIO_Init();
 8005e2a:	f7ff fd9b 	bl	8005964 <MX_GPIO_Init>
  MX_DMA_Init();
 8005e2e:	f7ff fb17 	bl	8005460 <MX_DMA_Init>
  MX_I2C1_Init();
 8005e32:	f7ff fe91 	bl	8005b58 <MX_I2C1_Init>
  MX_SPI1_Init();
 8005e36:	f000 f9bd 	bl	80061b4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005e3a:	f000 f9e1 	bl	8006200 <MX_SPI2_Init>
  MX_SPI3_Init();
 8005e3e:	f000 fa07 	bl	8006250 <MX_SPI3_Init>
  MX_TIM1_Init();
 8005e42:	f000 fc41 	bl	80066c8 <MX_TIM1_Init>
  MX_SAI2_Init();
 8005e46:	f000 f81b 	bl	8005e80 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8005e4a:	f000 f8fb 	bl	8006044 <MX_SPDIFRX_Init>
  MX_TIM11_Init();
 8005e4e:	f000 fb6f 	bl	8006530 <MX_TIM11_Init>
  ILI9341_Initialize(&hspi1, 0);
 8005e52:	2100      	movs	r1, #0
 8005e54:	4807      	ldr	r0, [pc, #28]	; (8005e74 <main+0xc4>)
 8005e56:	f7fe f93f 	bl	80040d8 <ILI9341_Initialize>
  HAL_GPIO_WritePin(LCD_NBACKLIGHT_GPIO_Port, LCD_NBACKLIGHT_Pin, GPIO_PIN_RESET); // Backlight on.
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2108      	movs	r1, #8
 8005e5e:	4806      	ldr	r0, [pc, #24]	; (8005e78 <main+0xc8>)
 8005e60:	f7fa ff62 	bl	8000d28 <HAL_GPIO_WritePin>
  XPT2046_Initialize(&hspi2);
 8005e64:	4805      	ldr	r0, [pc, #20]	; (8005e7c <main+0xcc>)
 8005e66:	f7ff f91b 	bl	80050a0 <XPT2046_Initialize>
  Go();
 8005e6a:	f7ff fc27 	bl	80056bc <Go>
  while (1)
 8005e6e:	e7fe      	b.n	8005e6e <main+0xbe>
 8005e70:	e000ed00 	.word	0xe000ed00
 8005e74:	2000452c 	.word	0x2000452c
 8005e78:	40020800 	.word	0x40020800
 8005e7c:	20004590 	.word	0x20004590

08005e80 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8005e80:	b508      	push	{r3, lr}

  hsai_BlockA2.Instance = SAI2_Block_A;
 8005e82:	4817      	ldr	r0, [pc, #92]	; (8005ee0 <MX_SAI2_Init+0x60>)
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8005e84:	2100      	movs	r1, #0
 8005e86:	4b17      	ldr	r3, [pc, #92]	; (8005ee4 <MX_SAI2_Init+0x64>)
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8005e88:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8005e8a:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005e8c:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005e8e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8005e90:	e9c0 3100 	strd	r3, r1, [r0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8005e94:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e98:	61c3      	str	r3, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	461a      	mov	r2, r3
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8005e9e:	e9c0 1104 	strd	r1, r1, [r0, #16]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8005ea2:	e9c0 1109 	strd	r1, r1, [r0, #36]	; 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005ea6:	f7fc fcb7 	bl	8002818 <HAL_SAI_InitProtocol>
 8005eaa:	b108      	cbz	r0, 8005eb0 <MX_SAI2_Init+0x30>
  {
    Error_Handler();
 8005eac:	f7ff ff08 	bl	8005cc0 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8005eb0:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <MX_SAI2_Init+0x68>)
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	4a0d      	ldr	r2, [pc, #52]	; (8005eec <MX_SAI2_Init+0x6c>)
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8005eb6:	2100      	movs	r1, #0
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8005eb8:	e9c0 2300 	strd	r2, r3, [r0]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8005ebc:	2301      	movs	r3, #1
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8005ebe:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8005ec0:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8005ec2:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005ec4:	2302      	movs	r3, #2
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005ec6:	60c1      	str	r1, [r0, #12]
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005ec8:	461a      	mov	r2, r3
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005eca:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8005ecc:	e9c0 1109 	strd	r1, r1, [r0, #36]	; 0x24
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005ed0:	f7fc fca2 	bl	8002818 <HAL_SAI_InitProtocol>
 8005ed4:	b118      	cbz	r0, 8005ede <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
  }

}
 8005ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005eda:	f7ff bef1 	b.w	8005cc0 <Error_Handler>
}
 8005ede:	bd08      	pop	{r3, pc}
 8005ee0:	200042b8 	.word	0x200042b8
 8005ee4:	40015c04 	.word	0x40015c04
 8005ee8:	2000433c 	.word	0x2000433c
 8005eec:	40015c24 	.word	0x40015c24

08005ef0 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8005ef0:	6802      	ldr	r2, [r0, #0]
 8005ef2:	4b49      	ldr	r3, [pc, #292]	; (8006018 <HAL_SAI_MspInit+0x128>)
 8005ef4:	429a      	cmp	r2, r3
{
 8005ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ef8:	4605      	mov	r5, r0
 8005efa:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI2_Block_A)
 8005efc:	d149      	bne.n	8005f92 <HAL_SAI_MspInit+0xa2>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8005efe:	4847      	ldr	r0, [pc, #284]	; (800601c <HAL_SAI_MspInit+0x12c>)
 8005f00:	6803      	ldr	r3, [r0, #0]
 8005f02:	b94b      	cbnz	r3, 8005f18 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005f04:	4a46      	ldr	r2, [pc, #280]	; (8006020 <HAL_SAI_MspInit+0x130>)
 8005f06:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005f08:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005f0c:	6451      	str	r1, [r2, #68]	; 0x44
 8005f0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005f10:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005f14:	9201      	str	r2, [sp, #4]
 8005f16:	9a01      	ldr	r2, [sp, #4]
    }
    SAI2_client ++;
 8005f18:	3301      	adds	r3, #1
    PD13     ------> SAI2_SCK_A
    PE0     ------> SAI2_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI_A_DATAFROMSTM_Pin|SAI_A_FS_Pin|SAI_A_BCK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f1a:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005f1c:	240a      	movs	r4, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f1e:	2702      	movs	r7, #2
    SAI2_client ++;
 8005f20:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f22:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f26:	a903      	add	r1, sp, #12
 8005f28:	483e      	ldr	r0, [pc, #248]	; (8006024 <HAL_SAI_MspInit+0x134>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005f2a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f30:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f34:	f7fa fe00 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI_A_MCLK_Pin;
 8005f38:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 8005f3a:	483b      	ldr	r0, [pc, #236]	; (8006028 <HAL_SAI_MspInit+0x138>)
 8005f3c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005f3e:	9407      	str	r4, [sp, #28]

    /* Peripheral DMA init*/
    
    hdma_sai2_a.Instance = DMA2_Stream2;
 8005f40:	4c3a      	ldr	r4, [pc, #232]	; (800602c <HAL_SAI_MspInit+0x13c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f42:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f46:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(SAI_A_MCLK_GPIO_Port, &GPIO_InitStruct);
 8005f4a:	f7fa fdf5 	bl	8000b38 <HAL_GPIO_Init>
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 8005f4e:	f04f 53a0 	mov.w	r3, #335544320	; 0x14000000
 8005f52:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8006040 <HAL_SAI_MspInit+0x150>
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005f56:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8005f5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8005f5e:	4620      	mov	r0, r4
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_10;
 8005f60:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f64:	2340      	movs	r3, #64	; 0x40
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f66:	e9c4 3602 	strd	r3, r6, [r4, #8]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f6e:	e9c4 e304 	strd	lr, r3, [r4, #16]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8005f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f76:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8005f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f7e:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8005f82:	f7fa fc07 	bl	8000794 <HAL_DMA_Init>
 8005f86:	b108      	cbz	r0, 8005f8c <HAL_SAI_MspInit+0x9c>
    {
      Error_Handler();
 8005f88:	f7ff fe9a 	bl	8005cc0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8005f8c:	672c      	str	r4, [r5, #112]	; 0x70
 8005f8e:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8005f90:	66ec      	str	r4, [r5, #108]	; 0x6c
    }
    if(hsai->Instance==SAI2_Block_B)
 8005f92:	682a      	ldr	r2, [r5, #0]
 8005f94:	4b26      	ldr	r3, [pc, #152]	; (8006030 <HAL_SAI_MspInit+0x140>)
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d13c      	bne.n	8006014 <HAL_SAI_MspInit+0x124>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8005f9a:	4820      	ldr	r0, [pc, #128]	; (800601c <HAL_SAI_MspInit+0x12c>)
 8005f9c:	6803      	ldr	r3, [r0, #0]
 8005f9e:	b94b      	cbnz	r3, 8005fb4 <HAL_SAI_MspInit+0xc4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005fa0:	4a1f      	ldr	r2, [pc, #124]	; (8006020 <HAL_SAI_MspInit+0x130>)
 8005fa2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005fa4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005fa8:	6451      	str	r1, [r2, #68]	; 0x44
 8005faa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005fac:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005fb0:	9202      	str	r2, [sp, #8]
 8005fb2:	9a02      	ldr	r2, [sp, #8]
      }
    SAI2_client ++;
 8005fb4:	3301      	adds	r3, #1
    
    /**SAI2_B_Block_B GPIO Configuration    
    PA0/WKUP     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI_B_DATATOSTM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb6:	2201      	movs	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb8:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8005fba:	a903      	add	r1, sp, #12
    SAI2_client ++;
 8005fbc:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fbe:	2302      	movs	r3, #2
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8005fc0:	481c      	ldr	r0, [pc, #112]	; (8006034 <HAL_SAI_MspInit+0x144>)
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8005fc2:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    hdma_sai2_b.Instance = DMA2_Stream6;
 8005fc6:	4c1c      	ldr	r4, [pc, #112]	; (8006038 <HAL_SAI_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005fcc:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fce:	e9cd 6605 	strd	r6, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005fd2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI_B_DATATOSTM_GPIO_Port, &GPIO_InitStruct);
 8005fd4:	f7fa fdb0 	bl	8000b38 <HAL_GPIO_Init>
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 8005fd8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8005fdc:	4917      	ldr	r1, [pc, #92]	; (800603c <HAL_SAI_MspInit+0x14c>)
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005fde:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 8005fe2:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fea:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8005fee:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8005ff2:	4620      	mov	r0, r4
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8005ff4:	e9c4 7306 	strd	r7, r3, [r4, #24]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8005ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ffc:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006000:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8006004:	f7fa fbc6 	bl	8000794 <HAL_DMA_Init>
 8006008:	b108      	cbz	r0, 800600e <HAL_SAI_MspInit+0x11e>
    {
      Error_Handler();
 800600a:	f7ff fe59 	bl	8005cc0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 800600e:	672c      	str	r4, [r5, #112]	; 0x70
 8006010:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8006012:	66ec      	str	r4, [r5, #108]	; 0x6c
    }
}
 8006014:	b009      	add	sp, #36	; 0x24
 8006016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006018:	40015c04 	.word	0x40015c04
 800601c:	200041f4 	.word	0x200041f4
 8006020:	40023800 	.word	0x40023800
 8006024:	40020c00 	.word	0x40020c00
 8006028:	40021000 	.word	0x40021000
 800602c:	200041f8 	.word	0x200041f8
 8006030:	40015c24 	.word	0x40015c24
 8006034:	40020000 	.word	0x40020000
 8006038:	20004258 	.word	0x20004258
 800603c:	400264a0 	.word	0x400264a0
 8006040:	40026440 	.word	0x40026440

08006044 <MX_SPDIFRX_Init>:
DMA_HandleTypeDef hdma_spdif_rx_dt;
DMA_HandleTypeDef hdma_spdif_rx_cs;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8006044:	b508      	push	{r3, lr}

  hspdif.Instance = SPDIFRX;
 8006046:	4812      	ldr	r0, [pc, #72]	; (8006090 <MX_SPDIFRX_Init+0x4c>)
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8006048:	2300      	movs	r3, #0
 800604a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_15;
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_ON;
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_MSB;
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_ENABLE;
 800604e:	f04f 0c10 	mov.w	ip, #16
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8006052:	6103      	str	r3, [r0, #16]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_ON;
 8006054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_ON;
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_ON;
 8006058:	f44f 7e00 	mov.w	lr, #512	; 0x200
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800605c:	e9c0 2300 	strd	r2, r3, [r0]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_ENABLE;
 8006060:	2308      	movs	r3, #8
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_ON;
 8006062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_ENABLE;
 8006066:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_ON;
 800606a:	f44f 7380 	mov.w	r3, #256	; 0x100
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_ON;
 800606e:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_ON;
 8006072:	e9c0 e307 	strd	lr, r3, [r0, #28]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_ON;
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_ON;
 8006076:	2280      	movs	r2, #128	; 0x80
 8006078:	2340      	movs	r3, #64	; 0x40
 800607a:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800607e:	f7fc fd3e 	bl	8002afe <HAL_SPDIFRX_Init>
 8006082:	b118      	cbz	r0, 800608c <MX_SPDIFRX_Init+0x48>
  {
    Error_Handler();
  }

}
 8006084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006088:	f7ff be1a 	b.w	8005cc0 <Error_Handler>
}
 800608c:	bd08      	pop	{r3, pc}
 800608e:	bf00      	nop
 8006090:	20004480 	.word	0x20004480

08006094 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800609a:	2214      	movs	r2, #20
 800609c:	2100      	movs	r1, #0
 800609e:	a803      	add	r0, sp, #12
 80060a0:	f000 fbe2 	bl	8006868 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80060aa:	d175      	bne.n	8006198 <HAL_SPDIFRX_MspInit+0x104>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80060ac:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
    PC5     ------> SPDIFRX_IN3
    PD8     ------> SPDIFRX_IN1
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80060b2:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060b4:	a903      	add	r1, sp, #12
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80060b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060b8:	4838      	ldr	r0, [pc, #224]	; (800619c <HAL_SPDIFRX_MspInit+0x108>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80060ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80060be:	641a      	str	r2, [r3, #64]	; 0x40
 80060c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80060c6:	9200      	str	r2, [sp, #0]
 80060c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060cc:	f042 0204 	orr.w	r2, r2, #4
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
 80060d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d4:	f002 0204 	and.w	r2, r2, #4
 80060d8:	9201      	str	r2, [sp, #4]
 80060da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060de:	f042 0208 	orr.w	r2, r2, #8
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80060e6:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	9302      	str	r3, [sp, #8]
 80060ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f0:	2330      	movs	r3, #48	; 0x30
 80060f2:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060f6:	f7fa fd1f 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80060fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060fe:	4828      	ldr	r0, [pc, #160]	; (80061a0 <HAL_SPDIFRX_MspInit+0x10c>)
 8006100:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8006102:	9407      	str	r4, [sp, #28]

    /* SPDIFRX DMA Init */
    /* SPDIF_RX_DT Init */
    hdma_spdif_rx_dt.Instance = DMA1_Stream1;
 8006104:	4c27      	ldr	r4, [pc, #156]	; (80061a4 <HAL_SPDIFRX_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006106:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800610a:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800610c:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006110:	f7fa fd12 	bl	8000b38 <HAL_GPIO_Init>
    hdma_spdif_rx_dt.Instance = DMA1_Stream1;
 8006114:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <HAL_SPDIFRX_MspInit+0x114>)
    hdma_spdif_rx_dt.Init.Channel = DMA_CHANNEL_0;
    hdma_spdif_rx_dt.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spdif_rx_dt.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spdif_rx_dt.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spdif_rx_dt.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006116:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_spdif_rx_dt.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_spdif_rx_dt.Init.Mode = DMA_CIRCULAR;
 800611a:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
    hdma_spdif_rx_dt.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_spdif_rx_dt.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spdif_rx_dt) != HAL_OK)
 800611e:	4620      	mov	r0, r4
    hdma_spdif_rx_dt.Init.Channel = DMA_CHANNEL_0;
 8006120:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_spdif_rx_dt.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006128:	e9c4 c304 	strd	ip, r3, [r4, #16]
    hdma_spdif_rx_dt.Init.Mode = DMA_CIRCULAR;
 800612c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006130:	e9c4 e306 	strd	lr, r3, [r4, #24]
    hdma_spdif_rx_dt.Init.Priority = DMA_PRIORITY_HIGH;
 8006134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_spdif_rx_dt.Init.PeriphInc = DMA_PINC_DISABLE;
 8006138:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spdif_rx_dt.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800613c:	e9c4 3608 	strd	r3, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_spdif_rx_dt) != HAL_OK)
 8006140:	f7fa fb28 	bl	8000794 <HAL_DMA_Init>
 8006144:	b108      	cbz	r0, 800614a <HAL_SPDIFRX_MspInit+0xb6>
    {
      Error_Handler();
 8006146:	f7ff fdbb 	bl	8005cc0 <Error_Handler>

    __HAL_LINKDMA(spdifrxHandle,hdmaDrRx,hdma_spdif_rx_dt);

    /* SPDIF_RX_CS Init */
    hdma_spdif_rx_cs.Instance = DMA1_Stream6;
    hdma_spdif_rx_cs.Init.Channel = DMA_CHANNEL_0;
 800614a:	2300      	movs	r3, #0
 800614c:	4a17      	ldr	r2, [pc, #92]	; (80061ac <HAL_SPDIFRX_MspInit+0x118>)
    __HAL_LINKDMA(spdifrxHandle,hdmaDrRx,hdma_spdif_rx_dt);
 800614e:	642c      	str	r4, [r5, #64]	; 0x40
    hdma_spdif_rx_cs.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spdif_rx_cs.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spdif_rx_cs.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spdif_rx_cs.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006150:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_LINKDMA(spdifrxHandle,hdmaDrRx,hdma_spdif_rx_dt);
 8006154:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_spdif_rx_cs.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_spdif_rx_cs.Init.Mode = DMA_CIRCULAR;
 8006156:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_spdif_rx_cs.Instance = DMA1_Stream6;
 800615a:	4c15      	ldr	r4, [pc, #84]	; (80061b0 <HAL_SPDIFRX_MspInit+0x11c>)
    hdma_spdif_rx_cs.Init.Channel = DMA_CHANNEL_0;
 800615c:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spdif_rx_cs.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006164:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_spdif_rx_cs.Init.Mode = DMA_CIRCULAR;
 8006168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800616c:	e9c4 0206 	strd	r0, r2, [r4, #24]
    hdma_spdif_rx_cs.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spdif_rx_cs.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spdif_rx_cs) != HAL_OK)
 8006170:	4620      	mov	r0, r4
    hdma_spdif_rx_cs.Init.PeriphInc = DMA_PINC_DISABLE;
 8006172:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spdif_rx_cs.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006176:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spdif_rx_cs) != HAL_OK)
 800617a:	f7fa fb0b 	bl	8000794 <HAL_DMA_Init>
 800617e:	b108      	cbz	r0, 8006184 <HAL_SPDIFRX_MspInit+0xf0>
    {
      Error_Handler();
 8006180:	f7ff fd9e 	bl	8005cc0 <Error_Handler>
    }

    __HAL_LINKDMA(spdifrxHandle,hdmaCsRx,hdma_spdif_rx_cs);

    /* SPDIFRX interrupt Init */
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 0, 0);
 8006184:	2200      	movs	r2, #0
 8006186:	2061      	movs	r0, #97	; 0x61
    __HAL_LINKDMA(spdifrxHandle,hdmaCsRx,hdma_spdif_rx_cs);
 8006188:	63ec      	str	r4, [r5, #60]	; 0x3c
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 0, 0);
 800618a:	4611      	mov	r1, r2
    __HAL_LINKDMA(spdifrxHandle,hdmaCsRx,hdma_spdif_rx_cs);
 800618c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 0, 0);
 800618e:	f7fa fa97 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
 8006192:	2061      	movs	r0, #97	; 0x61
 8006194:	f7fa fac6 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8006198:	b008      	add	sp, #32
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	40020800 	.word	0x40020800
 80061a0:	40020c00 	.word	0x40020c00
 80061a4:	20004420 	.word	0x20004420
 80061a8:	40026028 	.word	0x40026028
 80061ac:	400260a0 	.word	0x400260a0
 80061b0:	200043c0 	.word	0x200043c0

080061b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80061b4:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 80061b6:	4810      	ldr	r0, [pc, #64]	; (80061f8 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061b8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80061bc:	4a0f      	ldr	r2, [pc, #60]	; (80061fc <MX_SPI1_Init+0x48>)
 80061be:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061c2:	2300      	movs	r3, #0
 80061c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80061c8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80061cc:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061d0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061d2:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80061d6:	2207      	movs	r2, #7
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80061dc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80061e0:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80061e4:	2308      	movs	r3, #8
 80061e6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80061e8:	f7fc fe96 	bl	8002f18 <HAL_SPI_Init>
 80061ec:	b118      	cbz	r0, 80061f6 <MX_SPI1_Init+0x42>
  {
    Error_Handler();
  }

}
 80061ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80061f2:	f7ff bd65 	b.w	8005cc0 <Error_Handler>
}
 80061f6:	bd08      	pop	{r3, pc}
 80061f8:	2000452c 	.word	0x2000452c
 80061fc:	40013000 	.word	0x40013000

08006200 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006200:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8006202:	4811      	ldr	r0, [pc, #68]	; (8006248 <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006204:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006208:	4a10      	ldr	r2, [pc, #64]	; (800624c <MX_SPI2_Init+0x4c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800620a:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800620e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006212:	2300      	movs	r3, #0
 8006214:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006218:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800621c:	2220      	movs	r2, #32
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800621e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006220:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8006224:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006226:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800622a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800622e:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006232:	2308      	movs	r3, #8
 8006234:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006236:	f7fc fe6f 	bl	8002f18 <HAL_SPI_Init>
 800623a:	b118      	cbz	r0, 8006244 <MX_SPI2_Init+0x44>
  {
    Error_Handler();
  }

}
 800623c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006240:	f7ff bd3e 	b.w	8005cc0 <Error_Handler>
}
 8006244:	bd08      	pop	{r3, pc}
 8006246:	bf00      	nop
 8006248:	20004590 	.word	0x20004590
 800624c:	40003800 	.word	0x40003800

08006250 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006250:	b508      	push	{r3, lr}

  hspi3.Instance = SPI3;
 8006252:	4811      	ldr	r0, [pc, #68]	; (8006298 <MX_SPI3_Init+0x48>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006254:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006258:	4a10      	ldr	r2, [pc, #64]	; (800629c <MX_SPI3_Init+0x4c>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800625a:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800625e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006262:	2300      	movs	r3, #0
 8006264:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006268:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800626c:	2210      	movs	r2, #16
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800626e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006270:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 8006274:	2207      	movs	r2, #7
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006276:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800627a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800627e:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006282:	2308      	movs	r3, #8
 8006284:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006286:	f7fc fe47 	bl	8002f18 <HAL_SPI_Init>
 800628a:	b118      	cbz	r0, 8006294 <MX_SPI3_Init+0x44>
  {
    Error_Handler();
  }

}
 800628c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006290:	f7ff bd16 	b.w	8005cc0 <Error_Handler>
}
 8006294:	bd08      	pop	{r3, pc}
 8006296:	bf00      	nop
 8006298:	200045f4 	.word	0x200045f4
 800629c:	40003c00 	.word	0x40003c00

080062a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	b08c      	sub	sp, #48	; 0x30
 80062a4:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a6:	2214      	movs	r2, #20
 80062a8:	2100      	movs	r1, #0
 80062aa:	a807      	add	r0, sp, #28
 80062ac:	f000 fadc 	bl	8006868 <memset>
  if(spiHandle->Instance==SPI1)
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	4a46      	ldr	r2, [pc, #280]	; (80063cc <HAL_SPI_MspInit+0x12c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d142      	bne.n	800633e <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80062b8:	4b45      	ldr	r3, [pc, #276]	; (80063d0 <HAL_SPI_MspInit+0x130>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ba:	26e0      	movs	r6, #224	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062bc:	a907      	add	r1, sp, #28
 80062be:	4845      	ldr	r0, [pc, #276]	; (80063d4 <HAL_SPI_MspInit+0x134>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80062c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80062c2:	4c45      	ldr	r4, [pc, #276]	; (80063d8 <HAL_SPI_MspInit+0x138>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80062c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062c8:	645a      	str	r2, [r3, #68]	; 0x44
 80062ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80062d0:	9201      	str	r2, [sp, #4]
 80062d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
 80062dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	9302      	str	r3, [sp, #8]
 80062e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e6:	2302      	movs	r3, #2
 80062e8:	e9cd 6307 	strd	r6, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80062ec:	2305      	movs	r3, #5
 80062ee:	2603      	movs	r6, #3
 80062f0:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062f4:	f7fa fc20 	bl	8000b38 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80062f8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80062fc:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 80063ec <HAL_SPI_MspInit+0x14c>
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006300:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006304:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006308:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800630c:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800630e:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006312:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006314:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006318:	2204      	movs	r2, #4
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800631a:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800631c:	e9c4 e302 	strd	lr, r3, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006320:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006324:	e9c4 1208 	strd	r1, r2, [r4, #32]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006328:	e9c4 630a 	strd	r6, r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800632c:	f7fa fa32 	bl	8000794 <HAL_DMA_Init>
 8006330:	b108      	cbz	r0, 8006336 <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 8006332:	f7ff fcc5 	bl	8005cc0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8006336:	656c      	str	r4, [r5, #84]	; 0x54
 8006338:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800633a:	b00c      	add	sp, #48	; 0x30
 800633c:	bd70      	pop	{r4, r5, r6, pc}
  else if(spiHandle->Instance==SPI2)
 800633e:	4a27      	ldr	r2, [pc, #156]	; (80063dc <HAL_SPI_MspInit+0x13c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d120      	bne.n	8006386 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006344:	4b22      	ldr	r3, [pc, #136]	; (80063d0 <HAL_SPI_MspInit+0x130>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006346:	f44f 4060 	mov.w	r0, #57344	; 0xe000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800634a:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800634c:	a907      	add	r1, sp, #28
    __HAL_RCC_SPI2_CLK_ENABLE();
 800634e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006350:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
 8006356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006358:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800635c:	9203      	str	r2, [sp, #12]
 800635e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006362:	f042 0202 	orr.w	r2, r2, #2
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	9304      	str	r3, [sp, #16]
 8006370:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006372:	2302      	movs	r3, #2
 8006374:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006378:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800637a:	4819      	ldr	r0, [pc, #100]	; (80063e0 <HAL_SPI_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800637c:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006380:	f7fa fbda 	bl	8000b38 <HAL_GPIO_Init>
}
 8006384:	e7d9      	b.n	800633a <HAL_SPI_MspInit+0x9a>
  else if(spiHandle->Instance==SPI3)
 8006386:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <HAL_SPI_MspInit+0x144>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d1d6      	bne.n	800633a <HAL_SPI_MspInit+0x9a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800638c:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <HAL_SPI_MspInit+0x130>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800638e:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006390:	4815      	ldr	r0, [pc, #84]	; (80063e8 <HAL_SPI_MspInit+0x148>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006394:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
 800639a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800639c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80063a0:	9205      	str	r2, [sp, #20]
 80063a2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a6:	f042 0204 	orr.w	r2, r2, #4
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ac:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	9306      	str	r3, [sp, #24]
 80063b8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ba:	2302      	movs	r3, #2
 80063bc:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80063c0:	2306      	movs	r3, #6
 80063c2:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063c6:	a907      	add	r1, sp, #28
 80063c8:	e7da      	b.n	8006380 <HAL_SPI_MspInit+0xe0>
 80063ca:	bf00      	nop
 80063cc:	40013000 	.word	0x40013000
 80063d0:	40023800 	.word	0x40023800
 80063d4:	40020000 	.word	0x40020000
 80063d8:	200044cc 	.word	0x200044cc
 80063dc:	40003800 	.word	0x40003800
 80063e0:	40020400 	.word	0x40020400
 80063e4:	40003c00 	.word	0x40003c00
 80063e8:	40020800 	.word	0x40020800
 80063ec:	40026458 	.word	0x40026458

080063f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <HAL_MspInit+0x2c>)
{
 80063f2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80063f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40
 80063fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063fe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006402:	9200      	str	r2, [sp, #0]
 8006404:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006408:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800640c:	645a      	str	r2, [r3, #68]	; 0x44
 800640e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006418:	b002      	add	sp, #8
 800641a:	4770      	bx	lr
 800641c:	40023800 	.word	0x40023800

08006420 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006420:	4770      	bx	lr

08006422 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006422:	e7fe      	b.n	8006422 <HardFault_Handler>

08006424 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006424:	e7fe      	b.n	8006424 <MemManage_Handler>

08006426 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006426:	e7fe      	b.n	8006426 <BusFault_Handler>

08006428 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006428:	e7fe      	b.n	8006428 <UsageFault_Handler>

0800642a <SVC_Handler>:
 800642a:	4770      	bx	lr

0800642c <DebugMon_Handler>:
 800642c:	4770      	bx	lr

0800642e <PendSV_Handler>:
 800642e:	4770      	bx	lr

08006430 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006430:	f7fa b910 	b.w	8000654 <HAL_IncTick>

08006434 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006434:	4801      	ldr	r0, [pc, #4]	; (800643c <DMA1_Stream0_IRQHandler+0x8>)
 8006436:	f7fa bac1 	b.w	80009bc <HAL_DMA_IRQHandler>
 800643a:	bf00      	nop
 800643c:	200040e8 	.word	0x200040e8

08006440 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spdif_rx_dt);
 8006440:	4801      	ldr	r0, [pc, #4]	; (8006448 <DMA1_Stream1_IRQHandler+0x8>)
 8006442:	f7fa babb 	b.w	80009bc <HAL_DMA_IRQHandler>
 8006446:	bf00      	nop
 8006448:	20004420 	.word	0x20004420

0800644c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spdif_rx_cs);
 800644c:	4801      	ldr	r0, [pc, #4]	; (8006454 <DMA1_Stream6_IRQHandler+0x8>)
 800644e:	f7fa bab5 	b.w	80009bc <HAL_DMA_IRQHandler>
 8006452:	bf00      	nop
 8006454:	200043c0 	.word	0x200043c0

08006458 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006458:	2020      	movs	r0, #32
 800645a:	f7fa bc73 	b.w	8000d44 <HAL_GPIO_EXTI_IRQHandler>
	...

08006460 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006460:	4804      	ldr	r0, [pc, #16]	; (8006474 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
{
 8006462:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&htim1);
 8006464:	f7fd f8cc 	bl	8003600 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8006468:	4803      	ldr	r0, [pc, #12]	; (8006478 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800646a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim11);
 800646e:	f7fd b8c7 	b.w	8003600 <HAL_TIM_IRQHandler>
 8006472:	bf00      	nop
 8006474:	200046b8 	.word	0x200046b8
 8006478:	20004768 	.word	0x20004768

0800647c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800647c:	4801      	ldr	r0, [pc, #4]	; (8006484 <I2C1_EV_IRQHandler+0x8>)
 800647e:	f7fa bf97 	b.w	80013b0 <HAL_I2C_EV_IRQHandler>
 8006482:	bf00      	nop
 8006484:	200041a8 	.word	0x200041a8

08006488 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006488:	4801      	ldr	r0, [pc, #4]	; (8006490 <I2C1_ER_IRQHandler+0x8>)
 800648a:	f7fb b9a7 	b.w	80017dc <HAL_I2C_ER_IRQHandler>
 800648e:	bf00      	nop
 8006490:	200041a8 	.word	0x200041a8

08006494 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006494:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006498:	f7fa bc54 	b.w	8000d44 <HAL_GPIO_EXTI_IRQHandler>

0800649c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800649c:	4801      	ldr	r0, [pc, #4]	; (80064a4 <DMA1_Stream7_IRQHandler+0x8>)
 800649e:	f7fa ba8d 	b.w	80009bc <HAL_DMA_IRQHandler>
 80064a2:	bf00      	nop
 80064a4:	20004148 	.word	0x20004148

080064a8 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80064a8:	4801      	ldr	r0, [pc, #4]	; (80064b0 <DMA2_Stream1_IRQHandler+0x8>)
 80064aa:	f7fa ba87 	b.w	80009bc <HAL_DMA_IRQHandler>
 80064ae:	bf00      	nop
 80064b0:	20004658 	.word	0x20004658

080064b4 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80064b4:	4801      	ldr	r0, [pc, #4]	; (80064bc <DMA2_Stream2_IRQHandler+0x8>)
 80064b6:	f7fa ba81 	b.w	80009bc <HAL_DMA_IRQHandler>
 80064ba:	bf00      	nop
 80064bc:	200041f8 	.word	0x200041f8

080064c0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80064c0:	4801      	ldr	r0, [pc, #4]	; (80064c8 <DMA2_Stream3_IRQHandler+0x8>)
 80064c2:	f7fa ba7b 	b.w	80009bc <HAL_DMA_IRQHandler>
 80064c6:	bf00      	nop
 80064c8:	200044cc 	.word	0x200044cc

080064cc <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80064cc:	4801      	ldr	r0, [pc, #4]	; (80064d4 <DMA2_Stream6_IRQHandler+0x8>)
 80064ce:	f7fa ba75 	b.w	80009bc <HAL_DMA_IRQHandler>
 80064d2:	bf00      	nop
 80064d4:	20004258 	.word	0x20004258

080064d8 <SPDIF_RX_IRQHandler>:
void SPDIF_RX_IRQHandler(void)
{
  /* USER CODE BEGIN SPDIF_RX_IRQn 0 */

  /* USER CODE END SPDIF_RX_IRQn 0 */
  HAL_SPDIFRX_IRQHandler(&hspdif);
 80064d8:	4801      	ldr	r0, [pc, #4]	; (80064e0 <SPDIF_RX_IRQHandler+0x8>)
 80064da:	f7fc bc40 	b.w	8002d5e <HAL_SPDIFRX_IRQHandler>
 80064de:	bf00      	nop
 80064e0:	20004480 	.word	0x20004480

080064e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064e4:	490f      	ldr	r1, [pc, #60]	; (8006524 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80064e6:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80064ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80064f4:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <SystemInit+0x44>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	f042 0201 	orr.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80064fe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006506:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800650a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800650c:	4a07      	ldr	r2, [pc, #28]	; (800652c <SystemInit+0x48>)
 800650e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006516:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006518:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800651a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800651e:	608b      	str	r3, [r1, #8]
#endif
}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	e000ed00 	.word	0xe000ed00
 8006528:	40023800 	.word	0x40023800
 800652c:	24003010 	.word	0x24003010

08006530 <MX_TIM11_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006532:	2210      	movs	r2, #16
 8006534:	2100      	movs	r1, #0
 8006536:	4668      	mov	r0, sp
 8006538:	f000 f996 	bl	8006868 <memset>

  htim11.Instance = TIM11;
 800653c:	4816      	ldr	r0, [pc, #88]	; (8006598 <MX_TIM11_Init+0x68>)
  htim11.Init.Prescaler = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	4a16      	ldr	r2, [pc, #88]	; (800659c <MX_TIM11_Init+0x6c>)
 8006542:	e9c0 2300 	strd	r2, r3, [r0]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 0xFFFF;
 8006546:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800654a:	6083      	str	r3, [r0, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800654c:	6183      	str	r3, [r0, #24]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800654e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006552:	f7fd fbd9 	bl	8003d08 <HAL_TIM_Base_Init>
 8006556:	b108      	cbz	r0, 800655c <MX_TIM11_Init+0x2c>
  {
    Error_Handler();
 8006558:	f7ff fbb2 	bl	8005cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 800655c:	480e      	ldr	r0, [pc, #56]	; (8006598 <MX_TIM11_Init+0x68>)
 800655e:	f7fd fc1b 	bl	8003d98 <HAL_TIM_IC_Init>
 8006562:	b108      	cbz	r0, 8006568 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8006564:	f7ff fbac 	bl	8005cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006568:	2200      	movs	r2, #0
 800656a:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800656c:	4669      	mov	r1, sp
 800656e:	480a      	ldr	r0, [pc, #40]	; (8006598 <MX_TIM11_Init+0x68>)
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006570:	e9cd 2300 	strd	r2, r3, [sp]
  sConfigIC.ICFilter = 0;
 8006574:	e9cd 2202 	strd	r2, r2, [sp, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8006578:	f7fd faf6 	bl	8003b68 <HAL_TIM_IC_ConfigChannel>
 800657c:	b108      	cbz	r0, 8006582 <MX_TIM11_Init+0x52>
  {
    Error_Handler();
 800657e:	f7ff fb9f 	bl	8005cc0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim11, TIM_TIM11_SPDIFRX) != HAL_OK)
 8006582:	2101      	movs	r1, #1
 8006584:	4804      	ldr	r0, [pc, #16]	; (8006598 <MX_TIM11_Init+0x68>)
 8006586:	f7fd fc99 	bl	8003ebc <HAL_TIMEx_RemapConfig>
 800658a:	b108      	cbz	r0, 8006590 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 800658c:	f7ff fb98 	bl	8005cc0 <Error_Handler>
  }

}
 8006590:	b005      	add	sp, #20
 8006592:	f85d fb04 	ldr.w	pc, [sp], #4
 8006596:	bf00      	nop
 8006598:	20004768 	.word	0x20004768
 800659c:	40014800 	.word	0x40014800

080065a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80065a0:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(tim_pwmHandle->Instance==TIM1)
 80065a2:	4b21      	ldr	r3, [pc, #132]	; (8006628 <HAL_TIM_PWM_MspInit+0x88>)
{
 80065a4:	4605      	mov	r5, r0
  if(tim_pwmHandle->Instance==TIM1)
 80065a6:	6802      	ldr	r2, [r0, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d13a      	bne.n	8006622 <HAL_TIM_PWM_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80065ac:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80065b0:	4c1e      	ldr	r4, [pc, #120]	; (800662c <HAL_TIM_PWM_MspInit+0x8c>)
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80065b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80065b6:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    __HAL_RCC_TIM1_CLK_ENABLE();
 80065ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80065bc:	2140      	movs	r1, #64	; 0x40
    __HAL_RCC_TIM1_CLK_ENABLE();
 80065be:	f042 0201 	orr.w	r2, r2, #1
 80065c2:	645a      	str	r2, [r3, #68]	; 0x44
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80065c6:	4a1a      	ldr	r2, [pc, #104]	; (8006630 <HAL_TIM_PWM_MspInit+0x90>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	9b01      	ldr	r3, [sp, #4]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80065d0:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80065d4:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80065d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80065dc:	2300      	movs	r3, #0
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80065de:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80065e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80065e6:	4620      	mov	r0, r4
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80065e8:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80065ea:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80065ee:	2204      	movs	r2, #4
 80065f0:	e9c4 c208 	strd	ip, r2, [r4, #32]
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80065f4:	2203      	movs	r2, #3
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80065f6:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80065fa:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80065fe:	f7fa f8c9 	bl	8000794 <HAL_DMA_Init>
 8006602:	b108      	cbz	r0, 8006608 <HAL_TIM_PWM_MspInit+0x68>
    {
      Error_Handler();
 8006604:	f7ff fb5c 	bl	8005cc0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006608:	2200      	movs	r2, #0
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800660a:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800660c:	201a      	movs	r0, #26
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800660e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006610:	4611      	mov	r1, r2
 8006612:	f7fa f855 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006616:	201a      	movs	r0, #26
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006618:	b003      	add	sp, #12
 800661a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800661e:	f7fa b881 	b.w	8000724 <HAL_NVIC_EnableIRQ>
}
 8006622:	b003      	add	sp, #12
 8006624:	bd30      	pop	{r4, r5, pc}
 8006626:	bf00      	nop
 8006628:	40010000 	.word	0x40010000
 800662c:	20004658 	.word	0x20004658
 8006630:	40026428 	.word	0x40026428

08006634 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM11)
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <HAL_TIM_Base_MspInit+0x3c>)
{
 8006636:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM11)
 8006638:	6802      	ldr	r2, [r0, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d115      	bne.n	800666a <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800663e:	f503 4370 	add.w	r3, r3, #61440	; 0xf000

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006642:	201a      	movs	r0, #26
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006646:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800664a:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800664c:	2200      	movs	r2, #0
    __HAL_RCC_TIM11_CLK_ENABLE();
 800664e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006650:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800665a:	f7fa f831 	bl	80006c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800665e:	201a      	movs	r0, #26
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8006660:	b003      	add	sp, #12
 8006662:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006666:	f7fa b85d 	b.w	8000724 <HAL_NVIC_EnableIRQ>
}
 800666a:	b003      	add	sp, #12
 800666c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006670:	40014800 	.word	0x40014800

08006674 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006674:	b510      	push	{r4, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800667a:	2214      	movs	r2, #20
 800667c:	2100      	movs	r1, #0
 800667e:	a801      	add	r0, sp, #4
 8006680:	f000 f8f2 	bl	8006868 <memset>
  if(timHandle->Instance==TIM1)
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <HAL_TIM_MspPostInit+0x4c>)
 8006688:	429a      	cmp	r2, r3
 800668a:	d116      	bne.n	80066ba <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800668c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
    GPIO_InitStruct.Pin = LEDCHAIN_DATA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 8006690:	a901      	add	r1, sp, #4
 8006692:	480c      	ldr	r0, [pc, #48]	; (80066c4 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006696:	f042 0210 	orr.w	r2, r2, #16
 800669a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800669c:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80066a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066aa:	2302      	movs	r3, #2
 80066ac:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80066b2:	2301      	movs	r3, #1
 80066b4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LEDCHAIN_DATA_GPIO_Port, &GPIO_InitStruct);
 80066b6:	f7fa fa3f 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80066ba:	b006      	add	sp, #24
 80066bc:	bd10      	pop	{r4, pc}
 80066be:	bf00      	nop
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40021000 	.word	0x40021000

080066c8 <MX_TIM1_Init>:
{
 80066c8:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066ca:	2400      	movs	r4, #0
{
 80066cc:	b096      	sub	sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066ce:	221c      	movs	r2, #28
 80066d0:	4621      	mov	r1, r4
 80066d2:	a804      	add	r0, sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066d4:	9403      	str	r4, [sp, #12]
 80066d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066da:	f000 f8c5 	bl	8006868 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80066de:	222c      	movs	r2, #44	; 0x2c
 80066e0:	4621      	mov	r1, r4
 80066e2:	eb0d 0002 	add.w	r0, sp, r2
 80066e6:	f000 f8bf 	bl	8006868 <memset>
  htim1.Instance = TIM1;
 80066ea:	4823      	ldr	r0, [pc, #140]	; (8006778 <MX_TIM1_Init+0xb0>)
 80066ec:	4b23      	ldr	r3, [pc, #140]	; (800677c <MX_TIM1_Init+0xb4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ee:	6084      	str	r4, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 80066f0:	6144      	str	r4, [r0, #20]
  htim1.Init.Prescaler = 0;
 80066f2:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.Period = 269;
 80066f6:	f240 130d 	movw	r3, #269	; 0x10d
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066fa:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066fe:	2380      	movs	r3, #128	; 0x80
 8006700:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006702:	f7fd fb25 	bl	8003d50 <HAL_TIM_PWM_Init>
 8006706:	b108      	cbz	r0, 800670c <MX_TIM1_Init+0x44>
    Error_Handler();
 8006708:	f7ff fada 	bl	8005cc0 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800670c:	a901      	add	r1, sp, #4
 800670e:	481a      	ldr	r0, [pc, #104]	; (8006778 <MX_TIM1_Init+0xb0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006710:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006712:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006716:	f7fd fb63 	bl	8003de0 <HAL_TIMEx_MasterConfigSynchronization>
 800671a:	b108      	cbz	r0, 8006720 <MX_TIM1_Init+0x58>
    Error_Handler();
 800671c:	f7ff fad0 	bl	8005cc0 <Error_Handler>
  sConfigOC.Pulse = 0;
 8006720:	2400      	movs	r4, #0
 8006722:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006724:	a904      	add	r1, sp, #16
 8006726:	4814      	ldr	r0, [pc, #80]	; (8006778 <MX_TIM1_Init+0xb0>)
 8006728:	4622      	mov	r2, r4
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800672a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 800672c:	e9cd 3404 	strd	r3, r4, [sp, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006730:	e9cd 4406 	strd	r4, r4, [sp, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006734:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006738:	f7fd f956 	bl	80039e8 <HAL_TIM_PWM_ConfigChannel>
 800673c:	b108      	cbz	r0, 8006742 <MX_TIM1_Init+0x7a>
    Error_Handler();
 800673e:	f7ff fabf 	bl	8005cc0 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006746:	a90b      	add	r1, sp, #44	; 0x2c
 8006748:	480b      	ldr	r0, [pc, #44]	; (8006778 <MX_TIM1_Init+0xb0>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800674a:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800674c:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800674e:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006750:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006758:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 800675c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006760:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006764:	f7fd fb68 	bl	8003e38 <HAL_TIMEx_ConfigBreakDeadTime>
 8006768:	b108      	cbz	r0, 800676e <MX_TIM1_Init+0xa6>
    Error_Handler();
 800676a:	f7ff faa9 	bl	8005cc0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800676e:	4802      	ldr	r0, [pc, #8]	; (8006778 <MX_TIM1_Init+0xb0>)
 8006770:	f7ff ff80 	bl	8006674 <HAL_TIM_MspPostInit>
}
 8006774:	b016      	add	sp, #88	; 0x58
 8006776:	bd10      	pop	{r4, pc}
 8006778:	200046b8 	.word	0x200046b8
 800677c:	40010000 	.word	0x40010000

08006780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80067b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006784:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006786:	e003      	b.n	8006790 <LoopCopyDataInit>

08006788 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800678a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800678c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800678e:	3104      	adds	r1, #4

08006790 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006790:	480b      	ldr	r0, [pc, #44]	; (80067c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006794:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006796:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006798:	d3f6      	bcc.n	8006788 <CopyDataInit>
  ldr  r2, =_sbss
 800679a:	4a0b      	ldr	r2, [pc, #44]	; (80067c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800679c:	e002      	b.n	80067a4 <LoopFillZerobss>

0800679e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800679e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80067a0:	f842 3b04 	str.w	r3, [r2], #4

080067a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80067a4:	4b09      	ldr	r3, [pc, #36]	; (80067cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80067a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80067a8:	d3f9      	bcc.n	800679e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80067aa:	f7ff fe9b 	bl	80064e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80067ae:	f000 f819 	bl	80067e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80067b2:	f7ff fafd 	bl	8005db0 <main>
  bx  lr    
 80067b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80067b8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80067bc:	0800ae18 	.word	0x0800ae18
  ldr  r0, =_sdata
 80067c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80067c4:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 80067c8:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 80067cc:	2000482c 	.word	0x2000482c

080067d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80067d0:	e7fe      	b.n	80067d0 <ADC_IRQHandler>
	...

080067d4 <calloc>:
 80067d4:	4b02      	ldr	r3, [pc, #8]	; (80067e0 <calloc+0xc>)
 80067d6:	460a      	mov	r2, r1
 80067d8:	4601      	mov	r1, r0
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	f000 b84c 	b.w	8006878 <_calloc_r>
 80067e0:	20000028 	.word	0x20000028

080067e4 <__libc_init_array>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4d0d      	ldr	r5, [pc, #52]	; (800681c <__libc_init_array+0x38>)
 80067e8:	4c0d      	ldr	r4, [pc, #52]	; (8006820 <__libc_init_array+0x3c>)
 80067ea:	1b64      	subs	r4, r4, r5
 80067ec:	10a4      	asrs	r4, r4, #2
 80067ee:	2600      	movs	r6, #0
 80067f0:	42a6      	cmp	r6, r4
 80067f2:	d109      	bne.n	8006808 <__libc_init_array+0x24>
 80067f4:	4d0b      	ldr	r5, [pc, #44]	; (8006824 <__libc_init_array+0x40>)
 80067f6:	4c0c      	ldr	r4, [pc, #48]	; (8006828 <__libc_init_array+0x44>)
 80067f8:	f002 ff38 	bl	800966c <_init>
 80067fc:	1b64      	subs	r4, r4, r5
 80067fe:	10a4      	asrs	r4, r4, #2
 8006800:	2600      	movs	r6, #0
 8006802:	42a6      	cmp	r6, r4
 8006804:	d105      	bne.n	8006812 <__libc_init_array+0x2e>
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	f855 3b04 	ldr.w	r3, [r5], #4
 800680c:	4798      	blx	r3
 800680e:	3601      	adds	r6, #1
 8006810:	e7ee      	b.n	80067f0 <__libc_init_array+0xc>
 8006812:	f855 3b04 	ldr.w	r3, [r5], #4
 8006816:	4798      	blx	r3
 8006818:	3601      	adds	r6, #1
 800681a:	e7f2      	b.n	8006802 <__libc_init_array+0x1e>
 800681c:	0800ae10 	.word	0x0800ae10
 8006820:	0800ae10 	.word	0x0800ae10
 8006824:	0800ae10 	.word	0x0800ae10
 8006828:	0800ae14 	.word	0x0800ae14

0800682c <malloc>:
 800682c:	4b02      	ldr	r3, [pc, #8]	; (8006838 <malloc+0xc>)
 800682e:	4601      	mov	r1, r0
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	f000 b8a3 	b.w	800697c <_malloc_r>
 8006836:	bf00      	nop
 8006838:	20000028 	.word	0x20000028

0800683c <free>:
 800683c:	4b02      	ldr	r3, [pc, #8]	; (8006848 <free+0xc>)
 800683e:	4601      	mov	r1, r0
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	f000 b82f 	b.w	80068a4 <_free_r>
 8006846:	bf00      	nop
 8006848:	20000028 	.word	0x20000028

0800684c <memcpy>:
 800684c:	440a      	add	r2, r1
 800684e:	4291      	cmp	r1, r2
 8006850:	f100 33ff 	add.w	r3, r0, #4294967295
 8006854:	d100      	bne.n	8006858 <memcpy+0xc>
 8006856:	4770      	bx	lr
 8006858:	b510      	push	{r4, lr}
 800685a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800685e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006862:	4291      	cmp	r1, r2
 8006864:	d1f9      	bne.n	800685a <memcpy+0xe>
 8006866:	bd10      	pop	{r4, pc}

08006868 <memset>:
 8006868:	4402      	add	r2, r0
 800686a:	4603      	mov	r3, r0
 800686c:	4293      	cmp	r3, r2
 800686e:	d100      	bne.n	8006872 <memset+0xa>
 8006870:	4770      	bx	lr
 8006872:	f803 1b01 	strb.w	r1, [r3], #1
 8006876:	e7f9      	b.n	800686c <memset+0x4>

08006878 <_calloc_r>:
 8006878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800687a:	fba1 2402 	umull	r2, r4, r1, r2
 800687e:	b94c      	cbnz	r4, 8006894 <_calloc_r+0x1c>
 8006880:	4611      	mov	r1, r2
 8006882:	9201      	str	r2, [sp, #4]
 8006884:	f000 f87a 	bl	800697c <_malloc_r>
 8006888:	9a01      	ldr	r2, [sp, #4]
 800688a:	4605      	mov	r5, r0
 800688c:	b930      	cbnz	r0, 800689c <_calloc_r+0x24>
 800688e:	4628      	mov	r0, r5
 8006890:	b003      	add	sp, #12
 8006892:	bd30      	pop	{r4, r5, pc}
 8006894:	220c      	movs	r2, #12
 8006896:	6002      	str	r2, [r0, #0]
 8006898:	2500      	movs	r5, #0
 800689a:	e7f8      	b.n	800688e <_calloc_r+0x16>
 800689c:	4621      	mov	r1, r4
 800689e:	f7ff ffe3 	bl	8006868 <memset>
 80068a2:	e7f4      	b.n	800688e <_calloc_r+0x16>

080068a4 <_free_r>:
 80068a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068a6:	2900      	cmp	r1, #0
 80068a8:	d044      	beq.n	8006934 <_free_r+0x90>
 80068aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ae:	9001      	str	r0, [sp, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f1a1 0404 	sub.w	r4, r1, #4
 80068b6:	bfb8      	it	lt
 80068b8:	18e4      	addlt	r4, r4, r3
 80068ba:	f001 fc19 	bl	80080f0 <__malloc_lock>
 80068be:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <_free_r+0x94>)
 80068c0:	9801      	ldr	r0, [sp, #4]
 80068c2:	6813      	ldr	r3, [r2, #0]
 80068c4:	b933      	cbnz	r3, 80068d4 <_free_r+0x30>
 80068c6:	6063      	str	r3, [r4, #4]
 80068c8:	6014      	str	r4, [r2, #0]
 80068ca:	b003      	add	sp, #12
 80068cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068d0:	f001 bc14 	b.w	80080fc <__malloc_unlock>
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d908      	bls.n	80068ea <_free_r+0x46>
 80068d8:	6825      	ldr	r5, [r4, #0]
 80068da:	1961      	adds	r1, r4, r5
 80068dc:	428b      	cmp	r3, r1
 80068de:	bf01      	itttt	eq
 80068e0:	6819      	ldreq	r1, [r3, #0]
 80068e2:	685b      	ldreq	r3, [r3, #4]
 80068e4:	1949      	addeq	r1, r1, r5
 80068e6:	6021      	streq	r1, [r4, #0]
 80068e8:	e7ed      	b.n	80068c6 <_free_r+0x22>
 80068ea:	461a      	mov	r2, r3
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	b10b      	cbz	r3, 80068f4 <_free_r+0x50>
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	d9fa      	bls.n	80068ea <_free_r+0x46>
 80068f4:	6811      	ldr	r1, [r2, #0]
 80068f6:	1855      	adds	r5, r2, r1
 80068f8:	42a5      	cmp	r5, r4
 80068fa:	d10b      	bne.n	8006914 <_free_r+0x70>
 80068fc:	6824      	ldr	r4, [r4, #0]
 80068fe:	4421      	add	r1, r4
 8006900:	1854      	adds	r4, r2, r1
 8006902:	42a3      	cmp	r3, r4
 8006904:	6011      	str	r1, [r2, #0]
 8006906:	d1e0      	bne.n	80068ca <_free_r+0x26>
 8006908:	681c      	ldr	r4, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	6053      	str	r3, [r2, #4]
 800690e:	4421      	add	r1, r4
 8006910:	6011      	str	r1, [r2, #0]
 8006912:	e7da      	b.n	80068ca <_free_r+0x26>
 8006914:	d902      	bls.n	800691c <_free_r+0x78>
 8006916:	230c      	movs	r3, #12
 8006918:	6003      	str	r3, [r0, #0]
 800691a:	e7d6      	b.n	80068ca <_free_r+0x26>
 800691c:	6825      	ldr	r5, [r4, #0]
 800691e:	1961      	adds	r1, r4, r5
 8006920:	428b      	cmp	r3, r1
 8006922:	bf04      	itt	eq
 8006924:	6819      	ldreq	r1, [r3, #0]
 8006926:	685b      	ldreq	r3, [r3, #4]
 8006928:	6063      	str	r3, [r4, #4]
 800692a:	bf04      	itt	eq
 800692c:	1949      	addeq	r1, r1, r5
 800692e:	6021      	streq	r1, [r4, #0]
 8006930:	6054      	str	r4, [r2, #4]
 8006932:	e7ca      	b.n	80068ca <_free_r+0x26>
 8006934:	b003      	add	sp, #12
 8006936:	bd30      	pop	{r4, r5, pc}
 8006938:	20004818 	.word	0x20004818

0800693c <sbrk_aligned>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4e0e      	ldr	r6, [pc, #56]	; (8006978 <sbrk_aligned+0x3c>)
 8006940:	460c      	mov	r4, r1
 8006942:	6831      	ldr	r1, [r6, #0]
 8006944:	4605      	mov	r5, r0
 8006946:	b911      	cbnz	r1, 800694e <sbrk_aligned+0x12>
 8006948:	f000 fd2a 	bl	80073a0 <_sbrk_r>
 800694c:	6030      	str	r0, [r6, #0]
 800694e:	4621      	mov	r1, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f000 fd25 	bl	80073a0 <_sbrk_r>
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	d00a      	beq.n	8006970 <sbrk_aligned+0x34>
 800695a:	1cc4      	adds	r4, r0, #3
 800695c:	f024 0403 	bic.w	r4, r4, #3
 8006960:	42a0      	cmp	r0, r4
 8006962:	d007      	beq.n	8006974 <sbrk_aligned+0x38>
 8006964:	1a21      	subs	r1, r4, r0
 8006966:	4628      	mov	r0, r5
 8006968:	f000 fd1a 	bl	80073a0 <_sbrk_r>
 800696c:	3001      	adds	r0, #1
 800696e:	d101      	bne.n	8006974 <sbrk_aligned+0x38>
 8006970:	f04f 34ff 	mov.w	r4, #4294967295
 8006974:	4620      	mov	r0, r4
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	2000481c 	.word	0x2000481c

0800697c <_malloc_r>:
 800697c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006980:	1ccd      	adds	r5, r1, #3
 8006982:	f025 0503 	bic.w	r5, r5, #3
 8006986:	3508      	adds	r5, #8
 8006988:	2d0c      	cmp	r5, #12
 800698a:	bf38      	it	cc
 800698c:	250c      	movcc	r5, #12
 800698e:	2d00      	cmp	r5, #0
 8006990:	4607      	mov	r7, r0
 8006992:	db01      	blt.n	8006998 <_malloc_r+0x1c>
 8006994:	42a9      	cmp	r1, r5
 8006996:	d905      	bls.n	80069a4 <_malloc_r+0x28>
 8006998:	230c      	movs	r3, #12
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	2600      	movs	r6, #0
 800699e:	4630      	mov	r0, r6
 80069a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a4:	4e2e      	ldr	r6, [pc, #184]	; (8006a60 <_malloc_r+0xe4>)
 80069a6:	f001 fba3 	bl	80080f0 <__malloc_lock>
 80069aa:	6833      	ldr	r3, [r6, #0]
 80069ac:	461c      	mov	r4, r3
 80069ae:	bb34      	cbnz	r4, 80069fe <_malloc_r+0x82>
 80069b0:	4629      	mov	r1, r5
 80069b2:	4638      	mov	r0, r7
 80069b4:	f7ff ffc2 	bl	800693c <sbrk_aligned>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	4604      	mov	r4, r0
 80069bc:	d14d      	bne.n	8006a5a <_malloc_r+0xde>
 80069be:	6834      	ldr	r4, [r6, #0]
 80069c0:	4626      	mov	r6, r4
 80069c2:	2e00      	cmp	r6, #0
 80069c4:	d140      	bne.n	8006a48 <_malloc_r+0xcc>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	4631      	mov	r1, r6
 80069ca:	4638      	mov	r0, r7
 80069cc:	eb04 0803 	add.w	r8, r4, r3
 80069d0:	f000 fce6 	bl	80073a0 <_sbrk_r>
 80069d4:	4580      	cmp	r8, r0
 80069d6:	d13a      	bne.n	8006a4e <_malloc_r+0xd2>
 80069d8:	6821      	ldr	r1, [r4, #0]
 80069da:	3503      	adds	r5, #3
 80069dc:	1a6d      	subs	r5, r5, r1
 80069de:	f025 0503 	bic.w	r5, r5, #3
 80069e2:	3508      	adds	r5, #8
 80069e4:	2d0c      	cmp	r5, #12
 80069e6:	bf38      	it	cc
 80069e8:	250c      	movcc	r5, #12
 80069ea:	4629      	mov	r1, r5
 80069ec:	4638      	mov	r0, r7
 80069ee:	f7ff ffa5 	bl	800693c <sbrk_aligned>
 80069f2:	3001      	adds	r0, #1
 80069f4:	d02b      	beq.n	8006a4e <_malloc_r+0xd2>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	442b      	add	r3, r5
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	e00e      	b.n	8006a1c <_malloc_r+0xa0>
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	1b52      	subs	r2, r2, r5
 8006a02:	d41e      	bmi.n	8006a42 <_malloc_r+0xc6>
 8006a04:	2a0b      	cmp	r2, #11
 8006a06:	d916      	bls.n	8006a36 <_malloc_r+0xba>
 8006a08:	1961      	adds	r1, r4, r5
 8006a0a:	42a3      	cmp	r3, r4
 8006a0c:	6025      	str	r5, [r4, #0]
 8006a0e:	bf18      	it	ne
 8006a10:	6059      	strne	r1, [r3, #4]
 8006a12:	6863      	ldr	r3, [r4, #4]
 8006a14:	bf08      	it	eq
 8006a16:	6031      	streq	r1, [r6, #0]
 8006a18:	5162      	str	r2, [r4, r5]
 8006a1a:	604b      	str	r3, [r1, #4]
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f104 060b 	add.w	r6, r4, #11
 8006a22:	f001 fb6b 	bl	80080fc <__malloc_unlock>
 8006a26:	f026 0607 	bic.w	r6, r6, #7
 8006a2a:	1d23      	adds	r3, r4, #4
 8006a2c:	1af2      	subs	r2, r6, r3
 8006a2e:	d0b6      	beq.n	800699e <_malloc_r+0x22>
 8006a30:	1b9b      	subs	r3, r3, r6
 8006a32:	50a3      	str	r3, [r4, r2]
 8006a34:	e7b3      	b.n	800699e <_malloc_r+0x22>
 8006a36:	6862      	ldr	r2, [r4, #4]
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	bf0c      	ite	eq
 8006a3c:	6032      	streq	r2, [r6, #0]
 8006a3e:	605a      	strne	r2, [r3, #4]
 8006a40:	e7ec      	b.n	8006a1c <_malloc_r+0xa0>
 8006a42:	4623      	mov	r3, r4
 8006a44:	6864      	ldr	r4, [r4, #4]
 8006a46:	e7b2      	b.n	80069ae <_malloc_r+0x32>
 8006a48:	4634      	mov	r4, r6
 8006a4a:	6876      	ldr	r6, [r6, #4]
 8006a4c:	e7b9      	b.n	80069c2 <_malloc_r+0x46>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	4638      	mov	r0, r7
 8006a54:	f001 fb52 	bl	80080fc <__malloc_unlock>
 8006a58:	e7a1      	b.n	800699e <_malloc_r+0x22>
 8006a5a:	6025      	str	r5, [r4, #0]
 8006a5c:	e7de      	b.n	8006a1c <_malloc_r+0xa0>
 8006a5e:	bf00      	nop
 8006a60:	20004818 	.word	0x20004818

08006a64 <__cvt>:
 8006a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a66:	ed2d 8b02 	vpush	{d8}
 8006a6a:	eeb0 8b40 	vmov.f64	d8, d0
 8006a6e:	b085      	sub	sp, #20
 8006a70:	4617      	mov	r7, r2
 8006a72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006a74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006a76:	ee18 2a90 	vmov	r2, s17
 8006a7a:	f025 0520 	bic.w	r5, r5, #32
 8006a7e:	2a00      	cmp	r2, #0
 8006a80:	bfb6      	itet	lt
 8006a82:	222d      	movlt	r2, #45	; 0x2d
 8006a84:	2200      	movge	r2, #0
 8006a86:	eeb1 8b40 	vneglt.f64	d8, d0
 8006a8a:	2d46      	cmp	r5, #70	; 0x46
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	d004      	beq.n	8006a9c <__cvt+0x38>
 8006a92:	2d45      	cmp	r5, #69	; 0x45
 8006a94:	d100      	bne.n	8006a98 <__cvt+0x34>
 8006a96:	3401      	adds	r4, #1
 8006a98:	2102      	movs	r1, #2
 8006a9a:	e000      	b.n	8006a9e <__cvt+0x3a>
 8006a9c:	2103      	movs	r1, #3
 8006a9e:	ab03      	add	r3, sp, #12
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	ab02      	add	r3, sp, #8
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	4633      	mov	r3, r6
 8006aaa:	eeb0 0b48 	vmov.f64	d0, d8
 8006aae:	f000 fd9b 	bl	80075e8 <_dtoa_r>
 8006ab2:	2d47      	cmp	r5, #71	; 0x47
 8006ab4:	d101      	bne.n	8006aba <__cvt+0x56>
 8006ab6:	07fb      	lsls	r3, r7, #31
 8006ab8:	d51a      	bpl.n	8006af0 <__cvt+0x8c>
 8006aba:	2d46      	cmp	r5, #70	; 0x46
 8006abc:	eb00 0204 	add.w	r2, r0, r4
 8006ac0:	d10c      	bne.n	8006adc <__cvt+0x78>
 8006ac2:	7803      	ldrb	r3, [r0, #0]
 8006ac4:	2b30      	cmp	r3, #48	; 0x30
 8006ac6:	d107      	bne.n	8006ad8 <__cvt+0x74>
 8006ac8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad0:	bf1c      	itt	ne
 8006ad2:	f1c4 0401 	rsbne	r4, r4, #1
 8006ad6:	6034      	strne	r4, [r6, #0]
 8006ad8:	6833      	ldr	r3, [r6, #0]
 8006ada:	441a      	add	r2, r3
 8006adc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae4:	bf08      	it	eq
 8006ae6:	9203      	streq	r2, [sp, #12]
 8006ae8:	2130      	movs	r1, #48	; 0x30
 8006aea:	9b03      	ldr	r3, [sp, #12]
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d307      	bcc.n	8006b00 <__cvt+0x9c>
 8006af0:	9b03      	ldr	r3, [sp, #12]
 8006af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006af4:	1a1b      	subs	r3, r3, r0
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	b005      	add	sp, #20
 8006afa:	ecbd 8b02 	vpop	{d8}
 8006afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b00:	1c5c      	adds	r4, r3, #1
 8006b02:	9403      	str	r4, [sp, #12]
 8006b04:	7019      	strb	r1, [r3, #0]
 8006b06:	e7f0      	b.n	8006aea <__cvt+0x86>

08006b08 <__exponent>:
 8006b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	bfb8      	it	lt
 8006b10:	4249      	neglt	r1, r1
 8006b12:	f803 2b02 	strb.w	r2, [r3], #2
 8006b16:	bfb4      	ite	lt
 8006b18:	222d      	movlt	r2, #45	; 0x2d
 8006b1a:	222b      	movge	r2, #43	; 0x2b
 8006b1c:	2909      	cmp	r1, #9
 8006b1e:	7042      	strb	r2, [r0, #1]
 8006b20:	dd2a      	ble.n	8006b78 <__exponent+0x70>
 8006b22:	f10d 0407 	add.w	r4, sp, #7
 8006b26:	46a4      	mov	ip, r4
 8006b28:	270a      	movs	r7, #10
 8006b2a:	46a6      	mov	lr, r4
 8006b2c:	460a      	mov	r2, r1
 8006b2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b32:	fb07 1516 	mls	r5, r7, r6, r1
 8006b36:	3530      	adds	r5, #48	; 0x30
 8006b38:	2a63      	cmp	r2, #99	; 0x63
 8006b3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b42:	4631      	mov	r1, r6
 8006b44:	dcf1      	bgt.n	8006b2a <__exponent+0x22>
 8006b46:	3130      	adds	r1, #48	; 0x30
 8006b48:	f1ae 0502 	sub.w	r5, lr, #2
 8006b4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b50:	1c44      	adds	r4, r0, #1
 8006b52:	4629      	mov	r1, r5
 8006b54:	4561      	cmp	r1, ip
 8006b56:	d30a      	bcc.n	8006b6e <__exponent+0x66>
 8006b58:	f10d 0209 	add.w	r2, sp, #9
 8006b5c:	eba2 020e 	sub.w	r2, r2, lr
 8006b60:	4565      	cmp	r5, ip
 8006b62:	bf88      	it	hi
 8006b64:	2200      	movhi	r2, #0
 8006b66:	4413      	add	r3, r2
 8006b68:	1a18      	subs	r0, r3, r0
 8006b6a:	b003      	add	sp, #12
 8006b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b76:	e7ed      	b.n	8006b54 <__exponent+0x4c>
 8006b78:	2330      	movs	r3, #48	; 0x30
 8006b7a:	3130      	adds	r1, #48	; 0x30
 8006b7c:	7083      	strb	r3, [r0, #2]
 8006b7e:	70c1      	strb	r1, [r0, #3]
 8006b80:	1d03      	adds	r3, r0, #4
 8006b82:	e7f1      	b.n	8006b68 <__exponent+0x60>
 8006b84:	0000      	movs	r0, r0
	...

08006b88 <_printf_float>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	b08b      	sub	sp, #44	; 0x2c
 8006b8e:	460c      	mov	r4, r1
 8006b90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006b94:	4616      	mov	r6, r2
 8006b96:	461f      	mov	r7, r3
 8006b98:	4605      	mov	r5, r0
 8006b9a:	f001 fa93 	bl	80080c4 <_localeconv_r>
 8006b9e:	f8d0 b000 	ldr.w	fp, [r0]
 8006ba2:	4658      	mov	r0, fp
 8006ba4:	f7f9 fb4c 	bl	8000240 <strlen>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	9308      	str	r3, [sp, #32]
 8006bac:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006bb4:	6822      	ldr	r2, [r4, #0]
 8006bb6:	3307      	adds	r3, #7
 8006bb8:	f023 0307 	bic.w	r3, r3, #7
 8006bbc:	f103 0108 	add.w	r1, r3, #8
 8006bc0:	f8c8 1000 	str.w	r1, [r8]
 8006bc4:	4682      	mov	sl, r0
 8006bc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006bce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006e30 <_printf_float+0x2a8>
 8006bd2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006bd6:	eeb0 6bc0 	vabs.f64	d6, d0
 8006bda:	eeb4 6b47 	vcmp.f64	d6, d7
 8006bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be2:	dd24      	ble.n	8006c2e <_printf_float+0xa6>
 8006be4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bec:	d502      	bpl.n	8006bf4 <_printf_float+0x6c>
 8006bee:	232d      	movs	r3, #45	; 0x2d
 8006bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf4:	4b90      	ldr	r3, [pc, #576]	; (8006e38 <_printf_float+0x2b0>)
 8006bf6:	4891      	ldr	r0, [pc, #580]	; (8006e3c <_printf_float+0x2b4>)
 8006bf8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006bfc:	bf94      	ite	ls
 8006bfe:	4698      	movls	r8, r3
 8006c00:	4680      	movhi	r8, r0
 8006c02:	2303      	movs	r3, #3
 8006c04:	6123      	str	r3, [r4, #16]
 8006c06:	f022 0204 	bic.w	r2, r2, #4
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	6022      	str	r2, [r4, #0]
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	9700      	str	r7, [sp, #0]
 8006c12:	4633      	mov	r3, r6
 8006c14:	aa09      	add	r2, sp, #36	; 0x24
 8006c16:	4621      	mov	r1, r4
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f000 f9d3 	bl	8006fc4 <_printf_common>
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f040 808a 	bne.w	8006d38 <_printf_float+0x1b0>
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	b00b      	add	sp, #44	; 0x2c
 8006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c36:	d709      	bvc.n	8006c4c <_printf_float+0xc4>
 8006c38:	ee10 3a90 	vmov	r3, s1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	bfbc      	itt	lt
 8006c40:	232d      	movlt	r3, #45	; 0x2d
 8006c42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c46:	487e      	ldr	r0, [pc, #504]	; (8006e40 <_printf_float+0x2b8>)
 8006c48:	4b7e      	ldr	r3, [pc, #504]	; (8006e44 <_printf_float+0x2bc>)
 8006c4a:	e7d5      	b.n	8006bf8 <_printf_float+0x70>
 8006c4c:	6863      	ldr	r3, [r4, #4]
 8006c4e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c52:	9104      	str	r1, [sp, #16]
 8006c54:	1c59      	adds	r1, r3, #1
 8006c56:	d13c      	bne.n	8006cd2 <_printf_float+0x14a>
 8006c58:	2306      	movs	r3, #6
 8006c5a:	6063      	str	r3, [r4, #4]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9303      	str	r3, [sp, #12]
 8006c60:	ab08      	add	r3, sp, #32
 8006c62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006c66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c6a:	ab07      	add	r3, sp, #28
 8006c6c:	6861      	ldr	r1, [r4, #4]
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	6022      	str	r2, [r4, #0]
 8006c72:	f10d 031b 	add.w	r3, sp, #27
 8006c76:	4628      	mov	r0, r5
 8006c78:	f7ff fef4 	bl	8006a64 <__cvt>
 8006c7c:	9b04      	ldr	r3, [sp, #16]
 8006c7e:	9907      	ldr	r1, [sp, #28]
 8006c80:	2b47      	cmp	r3, #71	; 0x47
 8006c82:	4680      	mov	r8, r0
 8006c84:	d108      	bne.n	8006c98 <_printf_float+0x110>
 8006c86:	1cc8      	adds	r0, r1, #3
 8006c88:	db02      	blt.n	8006c90 <_printf_float+0x108>
 8006c8a:	6863      	ldr	r3, [r4, #4]
 8006c8c:	4299      	cmp	r1, r3
 8006c8e:	dd41      	ble.n	8006d14 <_printf_float+0x18c>
 8006c90:	f1a9 0902 	sub.w	r9, r9, #2
 8006c94:	fa5f f989 	uxtb.w	r9, r9
 8006c98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c9c:	d820      	bhi.n	8006ce0 <_printf_float+0x158>
 8006c9e:	3901      	subs	r1, #1
 8006ca0:	464a      	mov	r2, r9
 8006ca2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ca6:	9107      	str	r1, [sp, #28]
 8006ca8:	f7ff ff2e 	bl	8006b08 <__exponent>
 8006cac:	9a08      	ldr	r2, [sp, #32]
 8006cae:	9004      	str	r0, [sp, #16]
 8006cb0:	1813      	adds	r3, r2, r0
 8006cb2:	2a01      	cmp	r2, #1
 8006cb4:	6123      	str	r3, [r4, #16]
 8006cb6:	dc02      	bgt.n	8006cbe <_printf_float+0x136>
 8006cb8:	6822      	ldr	r2, [r4, #0]
 8006cba:	07d2      	lsls	r2, r2, #31
 8006cbc:	d501      	bpl.n	8006cc2 <_printf_float+0x13a>
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	6123      	str	r3, [r4, #16]
 8006cc2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0a2      	beq.n	8006c10 <_printf_float+0x88>
 8006cca:	232d      	movs	r3, #45	; 0x2d
 8006ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cd0:	e79e      	b.n	8006c10 <_printf_float+0x88>
 8006cd2:	9904      	ldr	r1, [sp, #16]
 8006cd4:	2947      	cmp	r1, #71	; 0x47
 8006cd6:	d1c1      	bne.n	8006c5c <_printf_float+0xd4>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1bf      	bne.n	8006c5c <_printf_float+0xd4>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e7bc      	b.n	8006c5a <_printf_float+0xd2>
 8006ce0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006ce4:	d118      	bne.n	8006d18 <_printf_float+0x190>
 8006ce6:	2900      	cmp	r1, #0
 8006ce8:	6863      	ldr	r3, [r4, #4]
 8006cea:	dd0b      	ble.n	8006d04 <_printf_float+0x17c>
 8006cec:	6121      	str	r1, [r4, #16]
 8006cee:	b913      	cbnz	r3, 8006cf6 <_printf_float+0x16e>
 8006cf0:	6822      	ldr	r2, [r4, #0]
 8006cf2:	07d0      	lsls	r0, r2, #31
 8006cf4:	d502      	bpl.n	8006cfc <_printf_float+0x174>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	440b      	add	r3, r1
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	e7de      	b.n	8006cc2 <_printf_float+0x13a>
 8006d04:	b913      	cbnz	r3, 8006d0c <_printf_float+0x184>
 8006d06:	6822      	ldr	r2, [r4, #0]
 8006d08:	07d2      	lsls	r2, r2, #31
 8006d0a:	d501      	bpl.n	8006d10 <_printf_float+0x188>
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	e7f4      	b.n	8006cfa <_printf_float+0x172>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e7f2      	b.n	8006cfa <_printf_float+0x172>
 8006d14:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d18:	9b08      	ldr	r3, [sp, #32]
 8006d1a:	4299      	cmp	r1, r3
 8006d1c:	db05      	blt.n	8006d2a <_printf_float+0x1a2>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	6121      	str	r1, [r4, #16]
 8006d22:	07d8      	lsls	r0, r3, #31
 8006d24:	d5ea      	bpl.n	8006cfc <_printf_float+0x174>
 8006d26:	1c4b      	adds	r3, r1, #1
 8006d28:	e7e7      	b.n	8006cfa <_printf_float+0x172>
 8006d2a:	2900      	cmp	r1, #0
 8006d2c:	bfd4      	ite	le
 8006d2e:	f1c1 0202 	rsble	r2, r1, #2
 8006d32:	2201      	movgt	r2, #1
 8006d34:	4413      	add	r3, r2
 8006d36:	e7e0      	b.n	8006cfa <_printf_float+0x172>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	055a      	lsls	r2, r3, #21
 8006d3c:	d407      	bmi.n	8006d4e <_printf_float+0x1c6>
 8006d3e:	6923      	ldr	r3, [r4, #16]
 8006d40:	4642      	mov	r2, r8
 8006d42:	4631      	mov	r1, r6
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b8      	blx	r7
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d12a      	bne.n	8006da2 <_printf_float+0x21a>
 8006d4c:	e76a      	b.n	8006c24 <_printf_float+0x9c>
 8006d4e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d52:	f240 80e2 	bls.w	8006f1a <_printf_float+0x392>
 8006d56:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006d5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d62:	d133      	bne.n	8006dcc <_printf_float+0x244>
 8006d64:	4a38      	ldr	r2, [pc, #224]	; (8006e48 <_printf_float+0x2c0>)
 8006d66:	2301      	movs	r3, #1
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f af58 	beq.w	8006c24 <_printf_float+0x9c>
 8006d74:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	db02      	blt.n	8006d82 <_printf_float+0x1fa>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	07d8      	lsls	r0, r3, #31
 8006d80:	d50f      	bpl.n	8006da2 <_printf_float+0x21a>
 8006d82:	4653      	mov	r3, sl
 8006d84:	465a      	mov	r2, fp
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f43f af49 	beq.w	8006c24 <_printf_float+0x9c>
 8006d92:	f04f 0800 	mov.w	r8, #0
 8006d96:	f104 091a 	add.w	r9, r4, #26
 8006d9a:	9b08      	ldr	r3, [sp, #32]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	4543      	cmp	r3, r8
 8006da0:	dc09      	bgt.n	8006db6 <_printf_float+0x22e>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	079b      	lsls	r3, r3, #30
 8006da6:	f100 8108 	bmi.w	8006fba <_printf_float+0x432>
 8006daa:	68e0      	ldr	r0, [r4, #12]
 8006dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dae:	4298      	cmp	r0, r3
 8006db0:	bfb8      	it	lt
 8006db2:	4618      	movlt	r0, r3
 8006db4:	e738      	b.n	8006c28 <_printf_float+0xa0>
 8006db6:	2301      	movs	r3, #1
 8006db8:	464a      	mov	r2, r9
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f43f af2f 	beq.w	8006c24 <_printf_float+0x9c>
 8006dc6:	f108 0801 	add.w	r8, r8, #1
 8006dca:	e7e6      	b.n	8006d9a <_printf_float+0x212>
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dc3c      	bgt.n	8006e4c <_printf_float+0x2c4>
 8006dd2:	4a1d      	ldr	r2, [pc, #116]	; (8006e48 <_printf_float+0x2c0>)
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	4628      	mov	r0, r5
 8006dda:	47b8      	blx	r7
 8006ddc:	3001      	adds	r0, #1
 8006dde:	f43f af21 	beq.w	8006c24 <_printf_float+0x9c>
 8006de2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	d102      	bne.n	8006df0 <_printf_float+0x268>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	07d9      	lsls	r1, r3, #31
 8006dee:	d5d8      	bpl.n	8006da2 <_printf_float+0x21a>
 8006df0:	4653      	mov	r3, sl
 8006df2:	465a      	mov	r2, fp
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f af12 	beq.w	8006c24 <_printf_float+0x9c>
 8006e00:	f04f 0900 	mov.w	r9, #0
 8006e04:	f104 0a1a 	add.w	sl, r4, #26
 8006e08:	9b07      	ldr	r3, [sp, #28]
 8006e0a:	425b      	negs	r3, r3
 8006e0c:	454b      	cmp	r3, r9
 8006e0e:	dc01      	bgt.n	8006e14 <_printf_float+0x28c>
 8006e10:	9b08      	ldr	r3, [sp, #32]
 8006e12:	e795      	b.n	8006d40 <_printf_float+0x1b8>
 8006e14:	2301      	movs	r3, #1
 8006e16:	4652      	mov	r2, sl
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af00 	beq.w	8006c24 <_printf_float+0x9c>
 8006e24:	f109 0901 	add.w	r9, r9, #1
 8006e28:	e7ee      	b.n	8006e08 <_printf_float+0x280>
 8006e2a:	bf00      	nop
 8006e2c:	f3af 8000 	nop.w
 8006e30:	ffffffff 	.word	0xffffffff
 8006e34:	7fefffff 	.word	0x7fefffff
 8006e38:	0800aa2c 	.word	0x0800aa2c
 8006e3c:	0800aa30 	.word	0x0800aa30
 8006e40:	0800aa38 	.word	0x0800aa38
 8006e44:	0800aa34 	.word	0x0800aa34
 8006e48:	0800aa3c 	.word	0x0800aa3c
 8006e4c:	9a08      	ldr	r2, [sp, #32]
 8006e4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e50:	429a      	cmp	r2, r3
 8006e52:	bfa8      	it	ge
 8006e54:	461a      	movge	r2, r3
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	4691      	mov	r9, r2
 8006e5a:	dc38      	bgt.n	8006ece <_printf_float+0x346>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	9305      	str	r3, [sp, #20]
 8006e60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e64:	f104 021a 	add.w	r2, r4, #26
 8006e68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e6a:	9905      	ldr	r1, [sp, #20]
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	eba3 0309 	sub.w	r3, r3, r9
 8006e72:	428b      	cmp	r3, r1
 8006e74:	dc33      	bgt.n	8006ede <_printf_float+0x356>
 8006e76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	db3c      	blt.n	8006ef8 <_printf_float+0x370>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	07da      	lsls	r2, r3, #31
 8006e82:	d439      	bmi.n	8006ef8 <_printf_float+0x370>
 8006e84:	9b08      	ldr	r3, [sp, #32]
 8006e86:	9a04      	ldr	r2, [sp, #16]
 8006e88:	9907      	ldr	r1, [sp, #28]
 8006e8a:	1a9a      	subs	r2, r3, r2
 8006e8c:	eba3 0901 	sub.w	r9, r3, r1
 8006e90:	4591      	cmp	r9, r2
 8006e92:	bfa8      	it	ge
 8006e94:	4691      	movge	r9, r2
 8006e96:	f1b9 0f00 	cmp.w	r9, #0
 8006e9a:	dc35      	bgt.n	8006f08 <_printf_float+0x380>
 8006e9c:	f04f 0800 	mov.w	r8, #0
 8006ea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ea4:	f104 0a1a 	add.w	sl, r4, #26
 8006ea8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006eac:	1a9b      	subs	r3, r3, r2
 8006eae:	eba3 0309 	sub.w	r3, r3, r9
 8006eb2:	4543      	cmp	r3, r8
 8006eb4:	f77f af75 	ble.w	8006da2 <_printf_float+0x21a>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	4652      	mov	r2, sl
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f aeae 	beq.w	8006c24 <_printf_float+0x9c>
 8006ec8:	f108 0801 	add.w	r8, r8, #1
 8006ecc:	e7ec      	b.n	8006ea8 <_printf_float+0x320>
 8006ece:	4613      	mov	r3, r2
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	47b8      	blx	r7
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d1bf      	bne.n	8006e5c <_printf_float+0x2d4>
 8006edc:	e6a2      	b.n	8006c24 <_printf_float+0x9c>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	9204      	str	r2, [sp, #16]
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f43f ae9b 	beq.w	8006c24 <_printf_float+0x9c>
 8006eee:	9b05      	ldr	r3, [sp, #20]
 8006ef0:	9a04      	ldr	r2, [sp, #16]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	9305      	str	r3, [sp, #20]
 8006ef6:	e7b7      	b.n	8006e68 <_printf_float+0x2e0>
 8006ef8:	4653      	mov	r3, sl
 8006efa:	465a      	mov	r2, fp
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	d1be      	bne.n	8006e84 <_printf_float+0x2fc>
 8006f06:	e68d      	b.n	8006c24 <_printf_float+0x9c>
 8006f08:	9a04      	ldr	r2, [sp, #16]
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	4442      	add	r2, r8
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	d1c1      	bne.n	8006e9c <_printf_float+0x314>
 8006f18:	e684      	b.n	8006c24 <_printf_float+0x9c>
 8006f1a:	9a08      	ldr	r2, [sp, #32]
 8006f1c:	2a01      	cmp	r2, #1
 8006f1e:	dc01      	bgt.n	8006f24 <_printf_float+0x39c>
 8006f20:	07db      	lsls	r3, r3, #31
 8006f22:	d537      	bpl.n	8006f94 <_printf_float+0x40c>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4642      	mov	r2, r8
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f ae78 	beq.w	8006c24 <_printf_float+0x9c>
 8006f34:	4653      	mov	r3, sl
 8006f36:	465a      	mov	r2, fp
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	47b8      	blx	r7
 8006f3e:	3001      	adds	r0, #1
 8006f40:	f43f ae70 	beq.w	8006c24 <_printf_float+0x9c>
 8006f44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006f48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f50:	d01b      	beq.n	8006f8a <_printf_float+0x402>
 8006f52:	9b08      	ldr	r3, [sp, #32]
 8006f54:	f108 0201 	add.w	r2, r8, #1
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	d10e      	bne.n	8006f82 <_printf_float+0x3fa>
 8006f64:	e65e      	b.n	8006c24 <_printf_float+0x9c>
 8006f66:	2301      	movs	r3, #1
 8006f68:	464a      	mov	r2, r9
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	f43f ae57 	beq.w	8006c24 <_printf_float+0x9c>
 8006f76:	f108 0801 	add.w	r8, r8, #1
 8006f7a:	9b08      	ldr	r3, [sp, #32]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	4543      	cmp	r3, r8
 8006f80:	dcf1      	bgt.n	8006f66 <_printf_float+0x3de>
 8006f82:	9b04      	ldr	r3, [sp, #16]
 8006f84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f88:	e6db      	b.n	8006d42 <_printf_float+0x1ba>
 8006f8a:	f04f 0800 	mov.w	r8, #0
 8006f8e:	f104 091a 	add.w	r9, r4, #26
 8006f92:	e7f2      	b.n	8006f7a <_printf_float+0x3f2>
 8006f94:	2301      	movs	r3, #1
 8006f96:	4642      	mov	r2, r8
 8006f98:	e7df      	b.n	8006f5a <_printf_float+0x3d2>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	464a      	mov	r2, r9
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	f43f ae3d 	beq.w	8006c24 <_printf_float+0x9c>
 8006faa:	f108 0801 	add.w	r8, r8, #1
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fb2:	1a5b      	subs	r3, r3, r1
 8006fb4:	4543      	cmp	r3, r8
 8006fb6:	dcf0      	bgt.n	8006f9a <_printf_float+0x412>
 8006fb8:	e6f7      	b.n	8006daa <_printf_float+0x222>
 8006fba:	f04f 0800 	mov.w	r8, #0
 8006fbe:	f104 0919 	add.w	r9, r4, #25
 8006fc2:	e7f4      	b.n	8006fae <_printf_float+0x426>

08006fc4 <_printf_common>:
 8006fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc8:	4616      	mov	r6, r2
 8006fca:	4699      	mov	r9, r3
 8006fcc:	688a      	ldr	r2, [r1, #8]
 8006fce:	690b      	ldr	r3, [r1, #16]
 8006fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	bfb8      	it	lt
 8006fd8:	4613      	movlt	r3, r2
 8006fda:	6033      	str	r3, [r6, #0]
 8006fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	b10a      	cbz	r2, 8006fea <_printf_common+0x26>
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	6033      	str	r3, [r6, #0]
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	0699      	lsls	r1, r3, #26
 8006fee:	bf42      	ittt	mi
 8006ff0:	6833      	ldrmi	r3, [r6, #0]
 8006ff2:	3302      	addmi	r3, #2
 8006ff4:	6033      	strmi	r3, [r6, #0]
 8006ff6:	6825      	ldr	r5, [r4, #0]
 8006ff8:	f015 0506 	ands.w	r5, r5, #6
 8006ffc:	d106      	bne.n	800700c <_printf_common+0x48>
 8006ffe:	f104 0a19 	add.w	sl, r4, #25
 8007002:	68e3      	ldr	r3, [r4, #12]
 8007004:	6832      	ldr	r2, [r6, #0]
 8007006:	1a9b      	subs	r3, r3, r2
 8007008:	42ab      	cmp	r3, r5
 800700a:	dc26      	bgt.n	800705a <_printf_common+0x96>
 800700c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007010:	1e13      	subs	r3, r2, #0
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	bf18      	it	ne
 8007016:	2301      	movne	r3, #1
 8007018:	0692      	lsls	r2, r2, #26
 800701a:	d42b      	bmi.n	8007074 <_printf_common+0xb0>
 800701c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007020:	4649      	mov	r1, r9
 8007022:	4638      	mov	r0, r7
 8007024:	47c0      	blx	r8
 8007026:	3001      	adds	r0, #1
 8007028:	d01e      	beq.n	8007068 <_printf_common+0xa4>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	68e5      	ldr	r5, [r4, #12]
 800702e:	6832      	ldr	r2, [r6, #0]
 8007030:	f003 0306 	and.w	r3, r3, #6
 8007034:	2b04      	cmp	r3, #4
 8007036:	bf08      	it	eq
 8007038:	1aad      	subeq	r5, r5, r2
 800703a:	68a3      	ldr	r3, [r4, #8]
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	bf0c      	ite	eq
 8007040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007044:	2500      	movne	r5, #0
 8007046:	4293      	cmp	r3, r2
 8007048:	bfc4      	itt	gt
 800704a:	1a9b      	subgt	r3, r3, r2
 800704c:	18ed      	addgt	r5, r5, r3
 800704e:	2600      	movs	r6, #0
 8007050:	341a      	adds	r4, #26
 8007052:	42b5      	cmp	r5, r6
 8007054:	d11a      	bne.n	800708c <_printf_common+0xc8>
 8007056:	2000      	movs	r0, #0
 8007058:	e008      	b.n	800706c <_printf_common+0xa8>
 800705a:	2301      	movs	r3, #1
 800705c:	4652      	mov	r2, sl
 800705e:	4649      	mov	r1, r9
 8007060:	4638      	mov	r0, r7
 8007062:	47c0      	blx	r8
 8007064:	3001      	adds	r0, #1
 8007066:	d103      	bne.n	8007070 <_printf_common+0xac>
 8007068:	f04f 30ff 	mov.w	r0, #4294967295
 800706c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007070:	3501      	adds	r5, #1
 8007072:	e7c6      	b.n	8007002 <_printf_common+0x3e>
 8007074:	18e1      	adds	r1, r4, r3
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	2030      	movs	r0, #48	; 0x30
 800707a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800707e:	4422      	add	r2, r4
 8007080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007088:	3302      	adds	r3, #2
 800708a:	e7c7      	b.n	800701c <_printf_common+0x58>
 800708c:	2301      	movs	r3, #1
 800708e:	4622      	mov	r2, r4
 8007090:	4649      	mov	r1, r9
 8007092:	4638      	mov	r0, r7
 8007094:	47c0      	blx	r8
 8007096:	3001      	adds	r0, #1
 8007098:	d0e6      	beq.n	8007068 <_printf_common+0xa4>
 800709a:	3601      	adds	r6, #1
 800709c:	e7d9      	b.n	8007052 <_printf_common+0x8e>
	...

080070a0 <_printf_i>:
 80070a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070a4:	7e0f      	ldrb	r7, [r1, #24]
 80070a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070a8:	2f78      	cmp	r7, #120	; 0x78
 80070aa:	4691      	mov	r9, r2
 80070ac:	4680      	mov	r8, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	469a      	mov	sl, r3
 80070b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070b6:	d807      	bhi.n	80070c8 <_printf_i+0x28>
 80070b8:	2f62      	cmp	r7, #98	; 0x62
 80070ba:	d80a      	bhi.n	80070d2 <_printf_i+0x32>
 80070bc:	2f00      	cmp	r7, #0
 80070be:	f000 80d8 	beq.w	8007272 <_printf_i+0x1d2>
 80070c2:	2f58      	cmp	r7, #88	; 0x58
 80070c4:	f000 80a3 	beq.w	800720e <_printf_i+0x16e>
 80070c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070d0:	e03a      	b.n	8007148 <_printf_i+0xa8>
 80070d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070d6:	2b15      	cmp	r3, #21
 80070d8:	d8f6      	bhi.n	80070c8 <_printf_i+0x28>
 80070da:	a101      	add	r1, pc, #4	; (adr r1, 80070e0 <_printf_i+0x40>)
 80070dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070e0:	08007139 	.word	0x08007139
 80070e4:	0800714d 	.word	0x0800714d
 80070e8:	080070c9 	.word	0x080070c9
 80070ec:	080070c9 	.word	0x080070c9
 80070f0:	080070c9 	.word	0x080070c9
 80070f4:	080070c9 	.word	0x080070c9
 80070f8:	0800714d 	.word	0x0800714d
 80070fc:	080070c9 	.word	0x080070c9
 8007100:	080070c9 	.word	0x080070c9
 8007104:	080070c9 	.word	0x080070c9
 8007108:	080070c9 	.word	0x080070c9
 800710c:	08007259 	.word	0x08007259
 8007110:	0800717d 	.word	0x0800717d
 8007114:	0800723b 	.word	0x0800723b
 8007118:	080070c9 	.word	0x080070c9
 800711c:	080070c9 	.word	0x080070c9
 8007120:	0800727b 	.word	0x0800727b
 8007124:	080070c9 	.word	0x080070c9
 8007128:	0800717d 	.word	0x0800717d
 800712c:	080070c9 	.word	0x080070c9
 8007130:	080070c9 	.word	0x080070c9
 8007134:	08007243 	.word	0x08007243
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	1d1a      	adds	r2, r3, #4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	602a      	str	r2, [r5, #0]
 8007140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007148:	2301      	movs	r3, #1
 800714a:	e0a3      	b.n	8007294 <_printf_i+0x1f4>
 800714c:	6820      	ldr	r0, [r4, #0]
 800714e:	6829      	ldr	r1, [r5, #0]
 8007150:	0606      	lsls	r6, r0, #24
 8007152:	f101 0304 	add.w	r3, r1, #4
 8007156:	d50a      	bpl.n	800716e <_printf_i+0xce>
 8007158:	680e      	ldr	r6, [r1, #0]
 800715a:	602b      	str	r3, [r5, #0]
 800715c:	2e00      	cmp	r6, #0
 800715e:	da03      	bge.n	8007168 <_printf_i+0xc8>
 8007160:	232d      	movs	r3, #45	; 0x2d
 8007162:	4276      	negs	r6, r6
 8007164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007168:	485e      	ldr	r0, [pc, #376]	; (80072e4 <_printf_i+0x244>)
 800716a:	230a      	movs	r3, #10
 800716c:	e019      	b.n	80071a2 <_printf_i+0x102>
 800716e:	680e      	ldr	r6, [r1, #0]
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007176:	bf18      	it	ne
 8007178:	b236      	sxthne	r6, r6
 800717a:	e7ef      	b.n	800715c <_printf_i+0xbc>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	6820      	ldr	r0, [r4, #0]
 8007180:	1d19      	adds	r1, r3, #4
 8007182:	6029      	str	r1, [r5, #0]
 8007184:	0601      	lsls	r1, r0, #24
 8007186:	d501      	bpl.n	800718c <_printf_i+0xec>
 8007188:	681e      	ldr	r6, [r3, #0]
 800718a:	e002      	b.n	8007192 <_printf_i+0xf2>
 800718c:	0646      	lsls	r6, r0, #25
 800718e:	d5fb      	bpl.n	8007188 <_printf_i+0xe8>
 8007190:	881e      	ldrh	r6, [r3, #0]
 8007192:	4854      	ldr	r0, [pc, #336]	; (80072e4 <_printf_i+0x244>)
 8007194:	2f6f      	cmp	r7, #111	; 0x6f
 8007196:	bf0c      	ite	eq
 8007198:	2308      	moveq	r3, #8
 800719a:	230a      	movne	r3, #10
 800719c:	2100      	movs	r1, #0
 800719e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071a2:	6865      	ldr	r5, [r4, #4]
 80071a4:	60a5      	str	r5, [r4, #8]
 80071a6:	2d00      	cmp	r5, #0
 80071a8:	bfa2      	ittt	ge
 80071aa:	6821      	ldrge	r1, [r4, #0]
 80071ac:	f021 0104 	bicge.w	r1, r1, #4
 80071b0:	6021      	strge	r1, [r4, #0]
 80071b2:	b90e      	cbnz	r6, 80071b8 <_printf_i+0x118>
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	d04d      	beq.n	8007254 <_printf_i+0x1b4>
 80071b8:	4615      	mov	r5, r2
 80071ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80071be:	fb03 6711 	mls	r7, r3, r1, r6
 80071c2:	5dc7      	ldrb	r7, [r0, r7]
 80071c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071c8:	4637      	mov	r7, r6
 80071ca:	42bb      	cmp	r3, r7
 80071cc:	460e      	mov	r6, r1
 80071ce:	d9f4      	bls.n	80071ba <_printf_i+0x11a>
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d10b      	bne.n	80071ec <_printf_i+0x14c>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	07de      	lsls	r6, r3, #31
 80071d8:	d508      	bpl.n	80071ec <_printf_i+0x14c>
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	6861      	ldr	r1, [r4, #4]
 80071de:	4299      	cmp	r1, r3
 80071e0:	bfde      	ittt	le
 80071e2:	2330      	movle	r3, #48	; 0x30
 80071e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071ec:	1b52      	subs	r2, r2, r5
 80071ee:	6122      	str	r2, [r4, #16]
 80071f0:	f8cd a000 	str.w	sl, [sp]
 80071f4:	464b      	mov	r3, r9
 80071f6:	aa03      	add	r2, sp, #12
 80071f8:	4621      	mov	r1, r4
 80071fa:	4640      	mov	r0, r8
 80071fc:	f7ff fee2 	bl	8006fc4 <_printf_common>
 8007200:	3001      	adds	r0, #1
 8007202:	d14c      	bne.n	800729e <_printf_i+0x1fe>
 8007204:	f04f 30ff 	mov.w	r0, #4294967295
 8007208:	b004      	add	sp, #16
 800720a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720e:	4835      	ldr	r0, [pc, #212]	; (80072e4 <_printf_i+0x244>)
 8007210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007214:	6829      	ldr	r1, [r5, #0]
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	f851 6b04 	ldr.w	r6, [r1], #4
 800721c:	6029      	str	r1, [r5, #0]
 800721e:	061d      	lsls	r5, r3, #24
 8007220:	d514      	bpl.n	800724c <_printf_i+0x1ac>
 8007222:	07df      	lsls	r7, r3, #31
 8007224:	bf44      	itt	mi
 8007226:	f043 0320 	orrmi.w	r3, r3, #32
 800722a:	6023      	strmi	r3, [r4, #0]
 800722c:	b91e      	cbnz	r6, 8007236 <_printf_i+0x196>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	f023 0320 	bic.w	r3, r3, #32
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	2310      	movs	r3, #16
 8007238:	e7b0      	b.n	800719c <_printf_i+0xfc>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	f043 0320 	orr.w	r3, r3, #32
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	2378      	movs	r3, #120	; 0x78
 8007244:	4828      	ldr	r0, [pc, #160]	; (80072e8 <_printf_i+0x248>)
 8007246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800724a:	e7e3      	b.n	8007214 <_printf_i+0x174>
 800724c:	0659      	lsls	r1, r3, #25
 800724e:	bf48      	it	mi
 8007250:	b2b6      	uxthmi	r6, r6
 8007252:	e7e6      	b.n	8007222 <_printf_i+0x182>
 8007254:	4615      	mov	r5, r2
 8007256:	e7bb      	b.n	80071d0 <_printf_i+0x130>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	6826      	ldr	r6, [r4, #0]
 800725c:	6961      	ldr	r1, [r4, #20]
 800725e:	1d18      	adds	r0, r3, #4
 8007260:	6028      	str	r0, [r5, #0]
 8007262:	0635      	lsls	r5, r6, #24
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	d501      	bpl.n	800726c <_printf_i+0x1cc>
 8007268:	6019      	str	r1, [r3, #0]
 800726a:	e002      	b.n	8007272 <_printf_i+0x1d2>
 800726c:	0670      	lsls	r0, r6, #25
 800726e:	d5fb      	bpl.n	8007268 <_printf_i+0x1c8>
 8007270:	8019      	strh	r1, [r3, #0]
 8007272:	2300      	movs	r3, #0
 8007274:	6123      	str	r3, [r4, #16]
 8007276:	4615      	mov	r5, r2
 8007278:	e7ba      	b.n	80071f0 <_printf_i+0x150>
 800727a:	682b      	ldr	r3, [r5, #0]
 800727c:	1d1a      	adds	r2, r3, #4
 800727e:	602a      	str	r2, [r5, #0]
 8007280:	681d      	ldr	r5, [r3, #0]
 8007282:	6862      	ldr	r2, [r4, #4]
 8007284:	2100      	movs	r1, #0
 8007286:	4628      	mov	r0, r5
 8007288:	f7f8 ffe2 	bl	8000250 <memchr>
 800728c:	b108      	cbz	r0, 8007292 <_printf_i+0x1f2>
 800728e:	1b40      	subs	r0, r0, r5
 8007290:	6060      	str	r0, [r4, #4]
 8007292:	6863      	ldr	r3, [r4, #4]
 8007294:	6123      	str	r3, [r4, #16]
 8007296:	2300      	movs	r3, #0
 8007298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800729c:	e7a8      	b.n	80071f0 <_printf_i+0x150>
 800729e:	6923      	ldr	r3, [r4, #16]
 80072a0:	462a      	mov	r2, r5
 80072a2:	4649      	mov	r1, r9
 80072a4:	4640      	mov	r0, r8
 80072a6:	47d0      	blx	sl
 80072a8:	3001      	adds	r0, #1
 80072aa:	d0ab      	beq.n	8007204 <_printf_i+0x164>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	079b      	lsls	r3, r3, #30
 80072b0:	d413      	bmi.n	80072da <_printf_i+0x23a>
 80072b2:	68e0      	ldr	r0, [r4, #12]
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	4298      	cmp	r0, r3
 80072b8:	bfb8      	it	lt
 80072ba:	4618      	movlt	r0, r3
 80072bc:	e7a4      	b.n	8007208 <_printf_i+0x168>
 80072be:	2301      	movs	r3, #1
 80072c0:	4632      	mov	r2, r6
 80072c2:	4649      	mov	r1, r9
 80072c4:	4640      	mov	r0, r8
 80072c6:	47d0      	blx	sl
 80072c8:	3001      	adds	r0, #1
 80072ca:	d09b      	beq.n	8007204 <_printf_i+0x164>
 80072cc:	3501      	adds	r5, #1
 80072ce:	68e3      	ldr	r3, [r4, #12]
 80072d0:	9903      	ldr	r1, [sp, #12]
 80072d2:	1a5b      	subs	r3, r3, r1
 80072d4:	42ab      	cmp	r3, r5
 80072d6:	dcf2      	bgt.n	80072be <_printf_i+0x21e>
 80072d8:	e7eb      	b.n	80072b2 <_printf_i+0x212>
 80072da:	2500      	movs	r5, #0
 80072dc:	f104 0619 	add.w	r6, r4, #25
 80072e0:	e7f5      	b.n	80072ce <_printf_i+0x22e>
 80072e2:	bf00      	nop
 80072e4:	0800aa3e 	.word	0x0800aa3e
 80072e8:	0800aa4f 	.word	0x0800aa4f

080072ec <modf>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	ed2d 8b02 	vpush	{d8}
 80072f2:	eeb0 8b40 	vmov.f64	d8, d0
 80072f6:	ee18 5a90 	vmov	r5, s17
 80072fa:	4604      	mov	r4, r0
 80072fc:	f3c5 500a 	ubfx	r0, r5, #20, #11
 8007300:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 8007304:	2b13      	cmp	r3, #19
 8007306:	ee10 1a10 	vmov	r1, s0
 800730a:	dc23      	bgt.n	8007354 <modf+0x68>
 800730c:	2b00      	cmp	r3, #0
 800730e:	da09      	bge.n	8007324 <modf+0x38>
 8007310:	2200      	movs	r2, #0
 8007312:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007316:	e9c4 2300 	strd	r2, r3, [r4]
 800731a:	eeb0 0b48 	vmov.f64	d0, d8
 800731e:	ecbd 8b02 	vpop	{d8}
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	481d      	ldr	r0, [pc, #116]	; (800739c <modf+0xb0>)
 8007326:	4118      	asrs	r0, r3
 8007328:	ea05 0300 	and.w	r3, r5, r0
 800732c:	4319      	orrs	r1, r3
 800732e:	d107      	bne.n	8007340 <modf+0x54>
 8007330:	ed84 0b00 	vstr	d0, [r4]
 8007334:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007338:	460a      	mov	r2, r1
 800733a:	ec43 2b18 	vmov	d8, r2, r3
 800733e:	e7ec      	b.n	800731a <modf+0x2e>
 8007340:	2200      	movs	r2, #0
 8007342:	ea25 0300 	bic.w	r3, r5, r0
 8007346:	ec43 2b17 	vmov	d7, r2, r3
 800734a:	e9c4 2300 	strd	r2, r3, [r4]
 800734e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007352:	e7e2      	b.n	800731a <modf+0x2e>
 8007354:	2b33      	cmp	r3, #51	; 0x33
 8007356:	dd0d      	ble.n	8007374 <modf+0x88>
 8007358:	ed84 0b00 	vstr	d0, [r4]
 800735c:	f001 fbc6 	bl	8008aec <__fpclassifyd>
 8007360:	b920      	cbnz	r0, 800736c <modf+0x80>
 8007362:	ee38 8b08 	vadd.f64	d8, d8, d8
 8007366:	ed84 8b00 	vstr	d8, [r4]
 800736a:	e7d6      	b.n	800731a <modf+0x2e>
 800736c:	2200      	movs	r2, #0
 800736e:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007372:	e7e2      	b.n	800733a <modf+0x4e>
 8007374:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 8007378:	f04f 30ff 	mov.w	r0, #4294967295
 800737c:	40d8      	lsrs	r0, r3
 800737e:	ea11 0600 	ands.w	r6, r1, r0
 8007382:	d105      	bne.n	8007390 <modf+0xa4>
 8007384:	ed84 0b00 	vstr	d0, [r4]
 8007388:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800738c:	4632      	mov	r2, r6
 800738e:	e7d4      	b.n	800733a <modf+0x4e>
 8007390:	ee18 3a90 	vmov	r3, s17
 8007394:	ea21 0200 	bic.w	r2, r1, r0
 8007398:	e7d5      	b.n	8007346 <modf+0x5a>
 800739a:	bf00      	nop
 800739c:	000fffff 	.word	0x000fffff

080073a0 <_sbrk_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d06      	ldr	r5, [pc, #24]	; (80073bc <_sbrk_r+0x1c>)
 80073a4:	2300      	movs	r3, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	f002 f946 	bl	800963c <_sbrk>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_sbrk_r+0x1a>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_sbrk_r+0x1a>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20004820 	.word	0x20004820

080073c0 <siprintf>:
 80073c0:	b40e      	push	{r1, r2, r3}
 80073c2:	b500      	push	{lr}
 80073c4:	b09c      	sub	sp, #112	; 0x70
 80073c6:	ab1d      	add	r3, sp, #116	; 0x74
 80073c8:	9002      	str	r0, [sp, #8]
 80073ca:	9006      	str	r0, [sp, #24]
 80073cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073d0:	4809      	ldr	r0, [pc, #36]	; (80073f8 <siprintf+0x38>)
 80073d2:	9107      	str	r1, [sp, #28]
 80073d4:	9104      	str	r1, [sp, #16]
 80073d6:	4909      	ldr	r1, [pc, #36]	; (80073fc <siprintf+0x3c>)
 80073d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073dc:	9105      	str	r1, [sp, #20]
 80073de:	6800      	ldr	r0, [r0, #0]
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	a902      	add	r1, sp, #8
 80073e4:	f001 fa70 	bl	80088c8 <_svfiprintf_r>
 80073e8:	9b02      	ldr	r3, [sp, #8]
 80073ea:	2200      	movs	r2, #0
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	b01c      	add	sp, #112	; 0x70
 80073f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073f4:	b003      	add	sp, #12
 80073f6:	4770      	bx	lr
 80073f8:	20000028 	.word	0x20000028
 80073fc:	ffff0208 	.word	0xffff0208

08007400 <__sread>:
 8007400:	b510      	push	{r4, lr}
 8007402:	460c      	mov	r4, r1
 8007404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007408:	f001 fb5e 	bl	8008ac8 <_read_r>
 800740c:	2800      	cmp	r0, #0
 800740e:	bfab      	itete	ge
 8007410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007412:	89a3      	ldrhlt	r3, [r4, #12]
 8007414:	181b      	addge	r3, r3, r0
 8007416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800741a:	bfac      	ite	ge
 800741c:	6563      	strge	r3, [r4, #84]	; 0x54
 800741e:	81a3      	strhlt	r3, [r4, #12]
 8007420:	bd10      	pop	{r4, pc}

08007422 <__swrite>:
 8007422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007426:	461f      	mov	r7, r3
 8007428:	898b      	ldrh	r3, [r1, #12]
 800742a:	05db      	lsls	r3, r3, #23
 800742c:	4605      	mov	r5, r0
 800742e:	460c      	mov	r4, r1
 8007430:	4616      	mov	r6, r2
 8007432:	d505      	bpl.n	8007440 <__swrite+0x1e>
 8007434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007438:	2302      	movs	r3, #2
 800743a:	2200      	movs	r2, #0
 800743c:	f000 fe46 	bl	80080cc <_lseek_r>
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	4632      	mov	r2, r6
 800744e:	463b      	mov	r3, r7
 8007450:	4628      	mov	r0, r5
 8007452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007456:	f000 b817 	b.w	8007488 <_write_r>

0800745a <__sseek>:
 800745a:	b510      	push	{r4, lr}
 800745c:	460c      	mov	r4, r1
 800745e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007462:	f000 fe33 	bl	80080cc <_lseek_r>
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	bf15      	itete	ne
 800746c:	6560      	strne	r0, [r4, #84]	; 0x54
 800746e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007476:	81a3      	strheq	r3, [r4, #12]
 8007478:	bf18      	it	ne
 800747a:	81a3      	strhne	r3, [r4, #12]
 800747c:	bd10      	pop	{r4, pc}

0800747e <__sclose>:
 800747e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007482:	f000 b813 	b.w	80074ac <_close_r>
	...

08007488 <_write_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4d07      	ldr	r5, [pc, #28]	; (80074a8 <_write_r+0x20>)
 800748c:	4604      	mov	r4, r0
 800748e:	4608      	mov	r0, r1
 8007490:	4611      	mov	r1, r2
 8007492:	2200      	movs	r2, #0
 8007494:	602a      	str	r2, [r5, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	f002 f8de 	bl	8009658 <_write>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_write_r+0x1e>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_write_r+0x1e>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	20004820 	.word	0x20004820

080074ac <_close_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4d06      	ldr	r5, [pc, #24]	; (80074c8 <_close_r+0x1c>)
 80074b0:	2300      	movs	r3, #0
 80074b2:	4604      	mov	r4, r0
 80074b4:	4608      	mov	r0, r1
 80074b6:	602b      	str	r3, [r5, #0]
 80074b8:	f002 f888 	bl	80095cc <_close>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d102      	bne.n	80074c6 <_close_r+0x1a>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	b103      	cbz	r3, 80074c6 <_close_r+0x1a>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	20004820 	.word	0x20004820

080074cc <quorem>:
 80074cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d0:	6903      	ldr	r3, [r0, #16]
 80074d2:	690c      	ldr	r4, [r1, #16]
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	4607      	mov	r7, r0
 80074d8:	f2c0 8081 	blt.w	80075de <quorem+0x112>
 80074dc:	3c01      	subs	r4, #1
 80074de:	f101 0814 	add.w	r8, r1, #20
 80074e2:	f100 0514 	add.w	r5, r0, #20
 80074e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074f4:	3301      	adds	r3, #1
 80074f6:	429a      	cmp	r2, r3
 80074f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007500:	fbb2 f6f3 	udiv	r6, r2, r3
 8007504:	d331      	bcc.n	800756a <quorem+0x9e>
 8007506:	f04f 0e00 	mov.w	lr, #0
 800750a:	4640      	mov	r0, r8
 800750c:	46ac      	mov	ip, r5
 800750e:	46f2      	mov	sl, lr
 8007510:	f850 2b04 	ldr.w	r2, [r0], #4
 8007514:	b293      	uxth	r3, r2
 8007516:	fb06 e303 	mla	r3, r6, r3, lr
 800751a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800751e:	b29b      	uxth	r3, r3
 8007520:	ebaa 0303 	sub.w	r3, sl, r3
 8007524:	f8dc a000 	ldr.w	sl, [ip]
 8007528:	0c12      	lsrs	r2, r2, #16
 800752a:	fa13 f38a 	uxtah	r3, r3, sl
 800752e:	fb06 e202 	mla	r2, r6, r2, lr
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	9b00      	ldr	r3, [sp, #0]
 8007536:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800753a:	b292      	uxth	r2, r2
 800753c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007544:	f8bd 3000 	ldrh.w	r3, [sp]
 8007548:	4581      	cmp	r9, r0
 800754a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800754e:	f84c 3b04 	str.w	r3, [ip], #4
 8007552:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007556:	d2db      	bcs.n	8007510 <quorem+0x44>
 8007558:	f855 300b 	ldr.w	r3, [r5, fp]
 800755c:	b92b      	cbnz	r3, 800756a <quorem+0x9e>
 800755e:	9b01      	ldr	r3, [sp, #4]
 8007560:	3b04      	subs	r3, #4
 8007562:	429d      	cmp	r5, r3
 8007564:	461a      	mov	r2, r3
 8007566:	d32e      	bcc.n	80075c6 <quorem+0xfa>
 8007568:	613c      	str	r4, [r7, #16]
 800756a:	4638      	mov	r0, r7
 800756c:	f001 f84e 	bl	800860c <__mcmp>
 8007570:	2800      	cmp	r0, #0
 8007572:	db24      	blt.n	80075be <quorem+0xf2>
 8007574:	3601      	adds	r6, #1
 8007576:	4628      	mov	r0, r5
 8007578:	f04f 0c00 	mov.w	ip, #0
 800757c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007580:	f8d0 e000 	ldr.w	lr, [r0]
 8007584:	b293      	uxth	r3, r2
 8007586:	ebac 0303 	sub.w	r3, ip, r3
 800758a:	0c12      	lsrs	r2, r2, #16
 800758c:	fa13 f38e 	uxtah	r3, r3, lr
 8007590:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007594:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007598:	b29b      	uxth	r3, r3
 800759a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800759e:	45c1      	cmp	r9, r8
 80075a0:	f840 3b04 	str.w	r3, [r0], #4
 80075a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075a8:	d2e8      	bcs.n	800757c <quorem+0xb0>
 80075aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075b2:	b922      	cbnz	r2, 80075be <quorem+0xf2>
 80075b4:	3b04      	subs	r3, #4
 80075b6:	429d      	cmp	r5, r3
 80075b8:	461a      	mov	r2, r3
 80075ba:	d30a      	bcc.n	80075d2 <quorem+0x106>
 80075bc:	613c      	str	r4, [r7, #16]
 80075be:	4630      	mov	r0, r6
 80075c0:	b003      	add	sp, #12
 80075c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c6:	6812      	ldr	r2, [r2, #0]
 80075c8:	3b04      	subs	r3, #4
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	d1cc      	bne.n	8007568 <quorem+0x9c>
 80075ce:	3c01      	subs	r4, #1
 80075d0:	e7c7      	b.n	8007562 <quorem+0x96>
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	3b04      	subs	r3, #4
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	d1f0      	bne.n	80075bc <quorem+0xf0>
 80075da:	3c01      	subs	r4, #1
 80075dc:	e7eb      	b.n	80075b6 <quorem+0xea>
 80075de:	2000      	movs	r0, #0
 80075e0:	e7ee      	b.n	80075c0 <quorem+0xf4>
 80075e2:	0000      	movs	r0, r0
 80075e4:	0000      	movs	r0, r0
	...

080075e8 <_dtoa_r>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	ed2d 8b02 	vpush	{d8}
 80075f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075f2:	b091      	sub	sp, #68	; 0x44
 80075f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80075f8:	ec59 8b10 	vmov	r8, r9, d0
 80075fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80075fe:	9106      	str	r1, [sp, #24]
 8007600:	4606      	mov	r6, r0
 8007602:	9208      	str	r2, [sp, #32]
 8007604:	930c      	str	r3, [sp, #48]	; 0x30
 8007606:	b975      	cbnz	r5, 8007626 <_dtoa_r+0x3e>
 8007608:	2010      	movs	r0, #16
 800760a:	f7ff f90f 	bl	800682c <malloc>
 800760e:	4602      	mov	r2, r0
 8007610:	6270      	str	r0, [r6, #36]	; 0x24
 8007612:	b920      	cbnz	r0, 800761e <_dtoa_r+0x36>
 8007614:	4baa      	ldr	r3, [pc, #680]	; (80078c0 <_dtoa_r+0x2d8>)
 8007616:	21ea      	movs	r1, #234	; 0xea
 8007618:	48aa      	ldr	r0, [pc, #680]	; (80078c4 <_dtoa_r+0x2dc>)
 800761a:	f001 fa91 	bl	8008b40 <__assert_func>
 800761e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007622:	6005      	str	r5, [r0, #0]
 8007624:	60c5      	str	r5, [r0, #12]
 8007626:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007628:	6819      	ldr	r1, [r3, #0]
 800762a:	b151      	cbz	r1, 8007642 <_dtoa_r+0x5a>
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	604a      	str	r2, [r1, #4]
 8007630:	2301      	movs	r3, #1
 8007632:	4093      	lsls	r3, r2
 8007634:	608b      	str	r3, [r1, #8]
 8007636:	4630      	mov	r0, r6
 8007638:	f000 fda6 	bl	8008188 <_Bfree>
 800763c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	f1b9 0300 	subs.w	r3, r9, #0
 8007646:	bfbb      	ittet	lt
 8007648:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800764c:	9303      	strlt	r3, [sp, #12]
 800764e:	2300      	movge	r3, #0
 8007650:	2201      	movlt	r2, #1
 8007652:	bfac      	ite	ge
 8007654:	6023      	strge	r3, [r4, #0]
 8007656:	6022      	strlt	r2, [r4, #0]
 8007658:	4b9b      	ldr	r3, [pc, #620]	; (80078c8 <_dtoa_r+0x2e0>)
 800765a:	9c03      	ldr	r4, [sp, #12]
 800765c:	43a3      	bics	r3, r4
 800765e:	d11c      	bne.n	800769a <_dtoa_r+0xb2>
 8007660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007662:	f242 730f 	movw	r3, #9999	; 0x270f
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800766c:	ea53 0308 	orrs.w	r3, r3, r8
 8007670:	f000 84fd 	beq.w	800806e <_dtoa_r+0xa86>
 8007674:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007676:	b963      	cbnz	r3, 8007692 <_dtoa_r+0xaa>
 8007678:	4b94      	ldr	r3, [pc, #592]	; (80078cc <_dtoa_r+0x2e4>)
 800767a:	e01f      	b.n	80076bc <_dtoa_r+0xd4>
 800767c:	4b94      	ldr	r3, [pc, #592]	; (80078d0 <_dtoa_r+0x2e8>)
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	3308      	adds	r3, #8
 8007682:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	9801      	ldr	r0, [sp, #4]
 8007688:	b011      	add	sp, #68	; 0x44
 800768a:	ecbd 8b02 	vpop	{d8}
 800768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007692:	4b8e      	ldr	r3, [pc, #568]	; (80078cc <_dtoa_r+0x2e4>)
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	3303      	adds	r3, #3
 8007698:	e7f3      	b.n	8007682 <_dtoa_r+0x9a>
 800769a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800769e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80076a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a6:	d10b      	bne.n	80076c0 <_dtoa_r+0xd8>
 80076a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076aa:	2301      	movs	r3, #1
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 84d9 	beq.w	8008068 <_dtoa_r+0xa80>
 80076b6:	4887      	ldr	r0, [pc, #540]	; (80078d4 <_dtoa_r+0x2ec>)
 80076b8:	6018      	str	r0, [r3, #0]
 80076ba:	1e43      	subs	r3, r0, #1
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	e7e2      	b.n	8007686 <_dtoa_r+0x9e>
 80076c0:	a90f      	add	r1, sp, #60	; 0x3c
 80076c2:	aa0e      	add	r2, sp, #56	; 0x38
 80076c4:	4630      	mov	r0, r6
 80076c6:	eeb0 0b48 	vmov.f64	d0, d8
 80076ca:	f001 f845 	bl	8008758 <__d2b>
 80076ce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80076d2:	4605      	mov	r5, r0
 80076d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80076d6:	2900      	cmp	r1, #0
 80076d8:	d046      	beq.n	8007768 <_dtoa_r+0x180>
 80076da:	ee18 4a90 	vmov	r4, s17
 80076de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80076e2:	ec53 2b18 	vmov	r2, r3, d8
 80076e6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80076ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80076ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80076f2:	2400      	movs	r4, #0
 80076f4:	ec43 2b16 	vmov	d6, r2, r3
 80076f8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80076fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80078a8 <_dtoa_r+0x2c0>
 8007700:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007704:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80078b0 <_dtoa_r+0x2c8>
 8007708:	eea7 6b05 	vfma.f64	d6, d7, d5
 800770c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80078b8 <_dtoa_r+0x2d0>
 8007710:	ee07 1a90 	vmov	s15, r1
 8007714:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007718:	eeb0 7b46 	vmov.f64	d7, d6
 800771c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007720:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007724:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772c:	ee16 ba90 	vmov	fp, s13
 8007730:	940a      	str	r4, [sp, #40]	; 0x28
 8007732:	d508      	bpl.n	8007746 <_dtoa_r+0x15e>
 8007734:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007738:	eeb4 6b47 	vcmp.f64	d6, d7
 800773c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007740:	bf18      	it	ne
 8007742:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007746:	f1bb 0f16 	cmp.w	fp, #22
 800774a:	d82f      	bhi.n	80077ac <_dtoa_r+0x1c4>
 800774c:	4b62      	ldr	r3, [pc, #392]	; (80078d8 <_dtoa_r+0x2f0>)
 800774e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007752:	ed93 7b00 	vldr	d7, [r3]
 8007756:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800775a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775e:	d501      	bpl.n	8007764 <_dtoa_r+0x17c>
 8007760:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007764:	2300      	movs	r3, #0
 8007766:	e022      	b.n	80077ae <_dtoa_r+0x1c6>
 8007768:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800776a:	4401      	add	r1, r0
 800776c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007770:	2b20      	cmp	r3, #32
 8007772:	bfc1      	itttt	gt
 8007774:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007778:	fa04 f303 	lslgt.w	r3, r4, r3
 800777c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007780:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007784:	bfd6      	itet	le
 8007786:	f1c3 0320 	rsble	r3, r3, #32
 800778a:	ea43 0808 	orrgt.w	r8, r3, r8
 800778e:	fa08 f803 	lslle.w	r8, r8, r3
 8007792:	ee07 8a90 	vmov	s15, r8
 8007796:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800779a:	3901      	subs	r1, #1
 800779c:	ee17 4a90 	vmov	r4, s15
 80077a0:	ec53 2b17 	vmov	r2, r3, d7
 80077a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80077a8:	2401      	movs	r4, #1
 80077aa:	e7a3      	b.n	80076f4 <_dtoa_r+0x10c>
 80077ac:	2301      	movs	r3, #1
 80077ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80077b0:	1a43      	subs	r3, r0, r1
 80077b2:	1e5a      	subs	r2, r3, #1
 80077b4:	bf45      	ittet	mi
 80077b6:	f1c3 0301 	rsbmi	r3, r3, #1
 80077ba:	9304      	strmi	r3, [sp, #16]
 80077bc:	2300      	movpl	r3, #0
 80077be:	2300      	movmi	r3, #0
 80077c0:	9205      	str	r2, [sp, #20]
 80077c2:	bf54      	ite	pl
 80077c4:	9304      	strpl	r3, [sp, #16]
 80077c6:	9305      	strmi	r3, [sp, #20]
 80077c8:	f1bb 0f00 	cmp.w	fp, #0
 80077cc:	db18      	blt.n	8007800 <_dtoa_r+0x218>
 80077ce:	9b05      	ldr	r3, [sp, #20]
 80077d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80077d4:	445b      	add	r3, fp
 80077d6:	9305      	str	r3, [sp, #20]
 80077d8:	2300      	movs	r3, #0
 80077da:	9a06      	ldr	r2, [sp, #24]
 80077dc:	2a09      	cmp	r2, #9
 80077de:	d849      	bhi.n	8007874 <_dtoa_r+0x28c>
 80077e0:	2a05      	cmp	r2, #5
 80077e2:	bfc4      	itt	gt
 80077e4:	3a04      	subgt	r2, #4
 80077e6:	9206      	strgt	r2, [sp, #24]
 80077e8:	9a06      	ldr	r2, [sp, #24]
 80077ea:	f1a2 0202 	sub.w	r2, r2, #2
 80077ee:	bfcc      	ite	gt
 80077f0:	2400      	movgt	r4, #0
 80077f2:	2401      	movle	r4, #1
 80077f4:	2a03      	cmp	r2, #3
 80077f6:	d848      	bhi.n	800788a <_dtoa_r+0x2a2>
 80077f8:	e8df f002 	tbb	[pc, r2]
 80077fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	2200      	movs	r2, #0
 8007804:	eba3 030b 	sub.w	r3, r3, fp
 8007808:	9304      	str	r3, [sp, #16]
 800780a:	9209      	str	r2, [sp, #36]	; 0x24
 800780c:	f1cb 0300 	rsb	r3, fp, #0
 8007810:	e7e3      	b.n	80077da <_dtoa_r+0x1f2>
 8007812:	2200      	movs	r2, #0
 8007814:	9207      	str	r2, [sp, #28]
 8007816:	9a08      	ldr	r2, [sp, #32]
 8007818:	2a00      	cmp	r2, #0
 800781a:	dc39      	bgt.n	8007890 <_dtoa_r+0x2a8>
 800781c:	f04f 0a01 	mov.w	sl, #1
 8007820:	46d1      	mov	r9, sl
 8007822:	4652      	mov	r2, sl
 8007824:	f8cd a020 	str.w	sl, [sp, #32]
 8007828:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800782a:	2100      	movs	r1, #0
 800782c:	6079      	str	r1, [r7, #4]
 800782e:	2004      	movs	r0, #4
 8007830:	f100 0c14 	add.w	ip, r0, #20
 8007834:	4594      	cmp	ip, r2
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	d92f      	bls.n	800789a <_dtoa_r+0x2b2>
 800783a:	4630      	mov	r0, r6
 800783c:	930d      	str	r3, [sp, #52]	; 0x34
 800783e:	f000 fc63 	bl	8008108 <_Balloc>
 8007842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007844:	9001      	str	r0, [sp, #4]
 8007846:	4602      	mov	r2, r0
 8007848:	2800      	cmp	r0, #0
 800784a:	d149      	bne.n	80078e0 <_dtoa_r+0x2f8>
 800784c:	4b23      	ldr	r3, [pc, #140]	; (80078dc <_dtoa_r+0x2f4>)
 800784e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007852:	e6e1      	b.n	8007618 <_dtoa_r+0x30>
 8007854:	2201      	movs	r2, #1
 8007856:	e7dd      	b.n	8007814 <_dtoa_r+0x22c>
 8007858:	2200      	movs	r2, #0
 800785a:	9207      	str	r2, [sp, #28]
 800785c:	9a08      	ldr	r2, [sp, #32]
 800785e:	eb0b 0a02 	add.w	sl, fp, r2
 8007862:	f10a 0901 	add.w	r9, sl, #1
 8007866:	464a      	mov	r2, r9
 8007868:	2a01      	cmp	r2, #1
 800786a:	bfb8      	it	lt
 800786c:	2201      	movlt	r2, #1
 800786e:	e7db      	b.n	8007828 <_dtoa_r+0x240>
 8007870:	2201      	movs	r2, #1
 8007872:	e7f2      	b.n	800785a <_dtoa_r+0x272>
 8007874:	2401      	movs	r4, #1
 8007876:	2200      	movs	r2, #0
 8007878:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800787c:	f04f 3aff 	mov.w	sl, #4294967295
 8007880:	2100      	movs	r1, #0
 8007882:	46d1      	mov	r9, sl
 8007884:	2212      	movs	r2, #18
 8007886:	9108      	str	r1, [sp, #32]
 8007888:	e7ce      	b.n	8007828 <_dtoa_r+0x240>
 800788a:	2201      	movs	r2, #1
 800788c:	9207      	str	r2, [sp, #28]
 800788e:	e7f5      	b.n	800787c <_dtoa_r+0x294>
 8007890:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007894:	46d1      	mov	r9, sl
 8007896:	4652      	mov	r2, sl
 8007898:	e7c6      	b.n	8007828 <_dtoa_r+0x240>
 800789a:	3101      	adds	r1, #1
 800789c:	6079      	str	r1, [r7, #4]
 800789e:	0040      	lsls	r0, r0, #1
 80078a0:	e7c6      	b.n	8007830 <_dtoa_r+0x248>
 80078a2:	bf00      	nop
 80078a4:	f3af 8000 	nop.w
 80078a8:	636f4361 	.word	0x636f4361
 80078ac:	3fd287a7 	.word	0x3fd287a7
 80078b0:	8b60c8b3 	.word	0x8b60c8b3
 80078b4:	3fc68a28 	.word	0x3fc68a28
 80078b8:	509f79fb 	.word	0x509f79fb
 80078bc:	3fd34413 	.word	0x3fd34413
 80078c0:	0800aa6d 	.word	0x0800aa6d
 80078c4:	0800aa84 	.word	0x0800aa84
 80078c8:	7ff00000 	.word	0x7ff00000
 80078cc:	0800aa69 	.word	0x0800aa69
 80078d0:	0800aa60 	.word	0x0800aa60
 80078d4:	0800aa3d 	.word	0x0800aa3d
 80078d8:	0800ab78 	.word	0x0800ab78
 80078dc:	0800aadf 	.word	0x0800aadf
 80078e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80078e2:	9901      	ldr	r1, [sp, #4]
 80078e4:	6011      	str	r1, [r2, #0]
 80078e6:	f1b9 0f0e 	cmp.w	r9, #14
 80078ea:	d86c      	bhi.n	80079c6 <_dtoa_r+0x3de>
 80078ec:	2c00      	cmp	r4, #0
 80078ee:	d06a      	beq.n	80079c6 <_dtoa_r+0x3de>
 80078f0:	f1bb 0f00 	cmp.w	fp, #0
 80078f4:	f340 80a0 	ble.w	8007a38 <_dtoa_r+0x450>
 80078f8:	49c1      	ldr	r1, [pc, #772]	; (8007c00 <_dtoa_r+0x618>)
 80078fa:	f00b 020f 	and.w	r2, fp, #15
 80078fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007902:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007906:	ed92 7b00 	vldr	d7, [r2]
 800790a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800790e:	f000 8087 	beq.w	8007a20 <_dtoa_r+0x438>
 8007912:	4abc      	ldr	r2, [pc, #752]	; (8007c04 <_dtoa_r+0x61c>)
 8007914:	ed92 6b08 	vldr	d6, [r2, #32]
 8007918:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800791c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007920:	f001 010f 	and.w	r1, r1, #15
 8007924:	2203      	movs	r2, #3
 8007926:	48b7      	ldr	r0, [pc, #732]	; (8007c04 <_dtoa_r+0x61c>)
 8007928:	2900      	cmp	r1, #0
 800792a:	d17b      	bne.n	8007a24 <_dtoa_r+0x43c>
 800792c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007930:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007934:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007938:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800793a:	2900      	cmp	r1, #0
 800793c:	f000 80a2 	beq.w	8007a84 <_dtoa_r+0x49c>
 8007940:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007944:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800794c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007950:	f140 8098 	bpl.w	8007a84 <_dtoa_r+0x49c>
 8007954:	f1b9 0f00 	cmp.w	r9, #0
 8007958:	f000 8094 	beq.w	8007a84 <_dtoa_r+0x49c>
 800795c:	f1ba 0f00 	cmp.w	sl, #0
 8007960:	dd2f      	ble.n	80079c2 <_dtoa_r+0x3da>
 8007962:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007966:	ee27 7b06 	vmul.f64	d7, d7, d6
 800796a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800796e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007972:	3201      	adds	r2, #1
 8007974:	4650      	mov	r0, sl
 8007976:	ed9d 6b02 	vldr	d6, [sp, #8]
 800797a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800797e:	ee07 2a90 	vmov	s15, r2
 8007982:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007986:	eea7 5b06 	vfma.f64	d5, d7, d6
 800798a:	ee15 4a90 	vmov	r4, s11
 800798e:	ec52 1b15 	vmov	r1, r2, d5
 8007992:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007996:	2800      	cmp	r0, #0
 8007998:	d177      	bne.n	8007a8a <_dtoa_r+0x4a2>
 800799a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800799e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80079a2:	ec42 1b17 	vmov	d7, r1, r2
 80079a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ae:	f300 8263 	bgt.w	8007e78 <_dtoa_r+0x890>
 80079b2:	eeb1 7b47 	vneg.f64	d7, d7
 80079b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079be:	f100 8258 	bmi.w	8007e72 <_dtoa_r+0x88a>
 80079c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80079c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	f2c0 811d 	blt.w	8007c08 <_dtoa_r+0x620>
 80079ce:	f1bb 0f0e 	cmp.w	fp, #14
 80079d2:	f300 8119 	bgt.w	8007c08 <_dtoa_r+0x620>
 80079d6:	4b8a      	ldr	r3, [pc, #552]	; (8007c00 <_dtoa_r+0x618>)
 80079d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079dc:	ed93 6b00 	vldr	d6, [r3]
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f280 80b7 	bge.w	8007b56 <_dtoa_r+0x56e>
 80079e8:	f1b9 0f00 	cmp.w	r9, #0
 80079ec:	f300 80b3 	bgt.w	8007b56 <_dtoa_r+0x56e>
 80079f0:	f040 823f 	bne.w	8007e72 <_dtoa_r+0x88a>
 80079f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80079f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80079fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a08:	464c      	mov	r4, r9
 8007a0a:	464f      	mov	r7, r9
 8007a0c:	f280 8215 	bge.w	8007e3a <_dtoa_r+0x852>
 8007a10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a14:	2331      	movs	r3, #49	; 0x31
 8007a16:	f808 3b01 	strb.w	r3, [r8], #1
 8007a1a:	f10b 0b01 	add.w	fp, fp, #1
 8007a1e:	e211      	b.n	8007e44 <_dtoa_r+0x85c>
 8007a20:	2202      	movs	r2, #2
 8007a22:	e780      	b.n	8007926 <_dtoa_r+0x33e>
 8007a24:	07cc      	lsls	r4, r1, #31
 8007a26:	d504      	bpl.n	8007a32 <_dtoa_r+0x44a>
 8007a28:	ed90 6b00 	vldr	d6, [r0]
 8007a2c:	3201      	adds	r2, #1
 8007a2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a32:	1049      	asrs	r1, r1, #1
 8007a34:	3008      	adds	r0, #8
 8007a36:	e777      	b.n	8007928 <_dtoa_r+0x340>
 8007a38:	d022      	beq.n	8007a80 <_dtoa_r+0x498>
 8007a3a:	f1cb 0100 	rsb	r1, fp, #0
 8007a3e:	4a70      	ldr	r2, [pc, #448]	; (8007c00 <_dtoa_r+0x618>)
 8007a40:	f001 000f 	and.w	r0, r1, #15
 8007a44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007a48:	ed92 7b00 	vldr	d7, [r2]
 8007a4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007a50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a54:	486b      	ldr	r0, [pc, #428]	; (8007c04 <_dtoa_r+0x61c>)
 8007a56:	1109      	asrs	r1, r1, #4
 8007a58:	2400      	movs	r4, #0
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	b929      	cbnz	r1, 8007a6a <_dtoa_r+0x482>
 8007a5e:	2c00      	cmp	r4, #0
 8007a60:	f43f af6a 	beq.w	8007938 <_dtoa_r+0x350>
 8007a64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a68:	e766      	b.n	8007938 <_dtoa_r+0x350>
 8007a6a:	07cf      	lsls	r7, r1, #31
 8007a6c:	d505      	bpl.n	8007a7a <_dtoa_r+0x492>
 8007a6e:	ed90 6b00 	vldr	d6, [r0]
 8007a72:	3201      	adds	r2, #1
 8007a74:	2401      	movs	r4, #1
 8007a76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a7a:	1049      	asrs	r1, r1, #1
 8007a7c:	3008      	adds	r0, #8
 8007a7e:	e7ed      	b.n	8007a5c <_dtoa_r+0x474>
 8007a80:	2202      	movs	r2, #2
 8007a82:	e759      	b.n	8007938 <_dtoa_r+0x350>
 8007a84:	465f      	mov	r7, fp
 8007a86:	4648      	mov	r0, r9
 8007a88:	e775      	b.n	8007976 <_dtoa_r+0x38e>
 8007a8a:	ec42 1b17 	vmov	d7, r1, r2
 8007a8e:	4a5c      	ldr	r2, [pc, #368]	; (8007c00 <_dtoa_r+0x618>)
 8007a90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007a94:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007a98:	9a01      	ldr	r2, [sp, #4]
 8007a9a:	1814      	adds	r4, r2, r0
 8007a9c:	9a07      	ldr	r2, [sp, #28]
 8007a9e:	b352      	cbz	r2, 8007af6 <_dtoa_r+0x50e>
 8007aa0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007aa4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007aa8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007aac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007ab0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007ab4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007ab8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007abc:	ee14 2a90 	vmov	r2, s9
 8007ac0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007ac4:	3230      	adds	r2, #48	; 0x30
 8007ac6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007aca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad2:	f808 2b01 	strb.w	r2, [r8], #1
 8007ad6:	d439      	bmi.n	8007b4c <_dtoa_r+0x564>
 8007ad8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007adc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae4:	d472      	bmi.n	8007bcc <_dtoa_r+0x5e4>
 8007ae6:	45a0      	cmp	r8, r4
 8007ae8:	f43f af6b 	beq.w	80079c2 <_dtoa_r+0x3da>
 8007aec:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007af0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007af4:	e7e0      	b.n	8007ab8 <_dtoa_r+0x4d0>
 8007af6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007afa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007afe:	4621      	mov	r1, r4
 8007b00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007b04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007b08:	ee14 2a90 	vmov	r2, s9
 8007b0c:	3230      	adds	r2, #48	; 0x30
 8007b0e:	f808 2b01 	strb.w	r2, [r8], #1
 8007b12:	45a0      	cmp	r8, r4
 8007b14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007b18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007b1c:	d118      	bne.n	8007b50 <_dtoa_r+0x568>
 8007b1e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007b22:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007b26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2e:	dc4d      	bgt.n	8007bcc <_dtoa_r+0x5e4>
 8007b30:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007b34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3c:	f57f af41 	bpl.w	80079c2 <_dtoa_r+0x3da>
 8007b40:	4688      	mov	r8, r1
 8007b42:	3901      	subs	r1, #1
 8007b44:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007b48:	2b30      	cmp	r3, #48	; 0x30
 8007b4a:	d0f9      	beq.n	8007b40 <_dtoa_r+0x558>
 8007b4c:	46bb      	mov	fp, r7
 8007b4e:	e02a      	b.n	8007ba6 <_dtoa_r+0x5be>
 8007b50:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007b54:	e7d6      	b.n	8007b04 <_dtoa_r+0x51c>
 8007b56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b5a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007b5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b62:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007b66:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007b6a:	ee15 3a10 	vmov	r3, s10
 8007b6e:	3330      	adds	r3, #48	; 0x30
 8007b70:	f808 3b01 	strb.w	r3, [r8], #1
 8007b74:	9b01      	ldr	r3, [sp, #4]
 8007b76:	eba8 0303 	sub.w	r3, r8, r3
 8007b7a:	4599      	cmp	r9, r3
 8007b7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007b80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007b84:	d133      	bne.n	8007bee <_dtoa_r+0x606>
 8007b86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007b8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b92:	dc1a      	bgt.n	8007bca <_dtoa_r+0x5e2>
 8007b94:	eeb4 7b46 	vcmp.f64	d7, d6
 8007b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9c:	d103      	bne.n	8007ba6 <_dtoa_r+0x5be>
 8007b9e:	ee15 3a10 	vmov	r3, s10
 8007ba2:	07d9      	lsls	r1, r3, #31
 8007ba4:	d411      	bmi.n	8007bca <_dtoa_r+0x5e2>
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f000 faed 	bl	8008188 <_Bfree>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bb2:	f888 3000 	strb.w	r3, [r8]
 8007bb6:	f10b 0301 	add.w	r3, fp, #1
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f43f ad61 	beq.w	8007686 <_dtoa_r+0x9e>
 8007bc4:	f8c3 8000 	str.w	r8, [r3]
 8007bc8:	e55d      	b.n	8007686 <_dtoa_r+0x9e>
 8007bca:	465f      	mov	r7, fp
 8007bcc:	4643      	mov	r3, r8
 8007bce:	4698      	mov	r8, r3
 8007bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bd4:	2a39      	cmp	r2, #57	; 0x39
 8007bd6:	d106      	bne.n	8007be6 <_dtoa_r+0x5fe>
 8007bd8:	9a01      	ldr	r2, [sp, #4]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d1f7      	bne.n	8007bce <_dtoa_r+0x5e6>
 8007bde:	9901      	ldr	r1, [sp, #4]
 8007be0:	2230      	movs	r2, #48	; 0x30
 8007be2:	3701      	adds	r7, #1
 8007be4:	700a      	strb	r2, [r1, #0]
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	3201      	adds	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	e7ae      	b.n	8007b4c <_dtoa_r+0x564>
 8007bee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007bf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfa:	d1b2      	bne.n	8007b62 <_dtoa_r+0x57a>
 8007bfc:	e7d3      	b.n	8007ba6 <_dtoa_r+0x5be>
 8007bfe:	bf00      	nop
 8007c00:	0800ab78 	.word	0x0800ab78
 8007c04:	0800ab50 	.word	0x0800ab50
 8007c08:	9907      	ldr	r1, [sp, #28]
 8007c0a:	2900      	cmp	r1, #0
 8007c0c:	f000 80d0 	beq.w	8007db0 <_dtoa_r+0x7c8>
 8007c10:	9906      	ldr	r1, [sp, #24]
 8007c12:	2901      	cmp	r1, #1
 8007c14:	f300 80b4 	bgt.w	8007d80 <_dtoa_r+0x798>
 8007c18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c1a:	2900      	cmp	r1, #0
 8007c1c:	f000 80ac 	beq.w	8007d78 <_dtoa_r+0x790>
 8007c20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007c28:	461c      	mov	r4, r3
 8007c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c2c:	9b04      	ldr	r3, [sp, #16]
 8007c2e:	4413      	add	r3, r2
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	9b05      	ldr	r3, [sp, #20]
 8007c34:	2101      	movs	r1, #1
 8007c36:	4413      	add	r3, r2
 8007c38:	4630      	mov	r0, r6
 8007c3a:	9305      	str	r3, [sp, #20]
 8007c3c:	f000 fb5c 	bl	80082f8 <__i2b>
 8007c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c42:	4607      	mov	r7, r0
 8007c44:	f1b8 0f00 	cmp.w	r8, #0
 8007c48:	dd0d      	ble.n	8007c66 <_dtoa_r+0x67e>
 8007c4a:	9a05      	ldr	r2, [sp, #20]
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	dd0a      	ble.n	8007c66 <_dtoa_r+0x67e>
 8007c50:	4542      	cmp	r2, r8
 8007c52:	9904      	ldr	r1, [sp, #16]
 8007c54:	bfa8      	it	ge
 8007c56:	4642      	movge	r2, r8
 8007c58:	1a89      	subs	r1, r1, r2
 8007c5a:	9104      	str	r1, [sp, #16]
 8007c5c:	9905      	ldr	r1, [sp, #20]
 8007c5e:	eba8 0802 	sub.w	r8, r8, r2
 8007c62:	1a8a      	subs	r2, r1, r2
 8007c64:	9205      	str	r2, [sp, #20]
 8007c66:	b303      	cbz	r3, 8007caa <_dtoa_r+0x6c2>
 8007c68:	9a07      	ldr	r2, [sp, #28]
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	f000 80a5 	beq.w	8007dba <_dtoa_r+0x7d2>
 8007c70:	2c00      	cmp	r4, #0
 8007c72:	dd13      	ble.n	8007c9c <_dtoa_r+0x6b4>
 8007c74:	4639      	mov	r1, r7
 8007c76:	4622      	mov	r2, r4
 8007c78:	4630      	mov	r0, r6
 8007c7a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c7c:	f000 fbfc 	bl	8008478 <__pow5mult>
 8007c80:	462a      	mov	r2, r5
 8007c82:	4601      	mov	r1, r0
 8007c84:	4607      	mov	r7, r0
 8007c86:	4630      	mov	r0, r6
 8007c88:	f000 fb4c 	bl	8008324 <__multiply>
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	900a      	str	r0, [sp, #40]	; 0x28
 8007c90:	4630      	mov	r0, r6
 8007c92:	f000 fa79 	bl	8008188 <_Bfree>
 8007c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c9a:	4615      	mov	r5, r2
 8007c9c:	1b1a      	subs	r2, r3, r4
 8007c9e:	d004      	beq.n	8007caa <_dtoa_r+0x6c2>
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f000 fbe8 	bl	8008478 <__pow5mult>
 8007ca8:	4605      	mov	r5, r0
 8007caa:	2101      	movs	r1, #1
 8007cac:	4630      	mov	r0, r6
 8007cae:	f000 fb23 	bl	80082f8 <__i2b>
 8007cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	f340 8081 	ble.w	8007dbe <_dtoa_r+0x7d6>
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4601      	mov	r1, r0
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f000 fbd9 	bl	8008478 <__pow5mult>
 8007cc6:	9b06      	ldr	r3, [sp, #24]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	4604      	mov	r4, r0
 8007ccc:	dd7a      	ble.n	8007dc4 <_dtoa_r+0x7dc>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd2:	6922      	ldr	r2, [r4, #16]
 8007cd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007cd8:	6910      	ldr	r0, [r2, #16]
 8007cda:	f000 fabd 	bl	8008258 <__hi0bits>
 8007cde:	f1c0 0020 	rsb	r0, r0, #32
 8007ce2:	9b05      	ldr	r3, [sp, #20]
 8007ce4:	4418      	add	r0, r3
 8007ce6:	f010 001f 	ands.w	r0, r0, #31
 8007cea:	f000 808c 	beq.w	8007e06 <_dtoa_r+0x81e>
 8007cee:	f1c0 0220 	rsb	r2, r0, #32
 8007cf2:	2a04      	cmp	r2, #4
 8007cf4:	f340 8085 	ble.w	8007e02 <_dtoa_r+0x81a>
 8007cf8:	f1c0 001c 	rsb	r0, r0, #28
 8007cfc:	9b04      	ldr	r3, [sp, #16]
 8007cfe:	4403      	add	r3, r0
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	9b05      	ldr	r3, [sp, #20]
 8007d04:	4403      	add	r3, r0
 8007d06:	4480      	add	r8, r0
 8007d08:	9305      	str	r3, [sp, #20]
 8007d0a:	9b04      	ldr	r3, [sp, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dd05      	ble.n	8007d1c <_dtoa_r+0x734>
 8007d10:	4629      	mov	r1, r5
 8007d12:	461a      	mov	r2, r3
 8007d14:	4630      	mov	r0, r6
 8007d16:	f000 fc09 	bl	800852c <__lshift>
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	9b05      	ldr	r3, [sp, #20]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	dd05      	ble.n	8007d2e <_dtoa_r+0x746>
 8007d22:	4621      	mov	r1, r4
 8007d24:	461a      	mov	r2, r3
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 fc00 	bl	800852c <__lshift>
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d06a      	beq.n	8007e0a <_dtoa_r+0x822>
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 fc68 	bl	800860c <__mcmp>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	da64      	bge.n	8007e0a <_dtoa_r+0x822>
 8007d40:	2300      	movs	r3, #0
 8007d42:	4629      	mov	r1, r5
 8007d44:	220a      	movs	r2, #10
 8007d46:	4630      	mov	r0, r6
 8007d48:	f000 fa40 	bl	80081cc <__multadd>
 8007d4c:	9b07      	ldr	r3, [sp, #28]
 8007d4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d52:	4605      	mov	r5, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 8191 	beq.w	800807c <_dtoa_r+0xa94>
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	220a      	movs	r2, #10
 8007d60:	4630      	mov	r0, r6
 8007d62:	f000 fa33 	bl	80081cc <__multadd>
 8007d66:	f1ba 0f00 	cmp.w	sl, #0
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	f300 808d 	bgt.w	8007e8a <_dtoa_r+0x8a2>
 8007d70:	9b06      	ldr	r3, [sp, #24]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	dc50      	bgt.n	8007e18 <_dtoa_r+0x830>
 8007d76:	e088      	b.n	8007e8a <_dtoa_r+0x8a2>
 8007d78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d7e:	e751      	b.n	8007c24 <_dtoa_r+0x63c>
 8007d80:	f109 34ff 	add.w	r4, r9, #4294967295
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	bfbf      	itttt	lt
 8007d88:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8007d8a:	1ae3      	sublt	r3, r4, r3
 8007d8c:	18d2      	addlt	r2, r2, r3
 8007d8e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8007d90:	bfb6      	itet	lt
 8007d92:	4623      	movlt	r3, r4
 8007d94:	1b1c      	subge	r4, r3, r4
 8007d96:	2400      	movlt	r4, #0
 8007d98:	f1b9 0f00 	cmp.w	r9, #0
 8007d9c:	bfb5      	itete	lt
 8007d9e:	9a04      	ldrlt	r2, [sp, #16]
 8007da0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007da4:	eba2 0809 	sublt.w	r8, r2, r9
 8007da8:	464a      	movge	r2, r9
 8007daa:	bfb8      	it	lt
 8007dac:	2200      	movlt	r2, #0
 8007dae:	e73c      	b.n	8007c2a <_dtoa_r+0x642>
 8007db0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007db4:	9f07      	ldr	r7, [sp, #28]
 8007db6:	461c      	mov	r4, r3
 8007db8:	e744      	b.n	8007c44 <_dtoa_r+0x65c>
 8007dba:	461a      	mov	r2, r3
 8007dbc:	e770      	b.n	8007ca0 <_dtoa_r+0x6b8>
 8007dbe:	9b06      	ldr	r3, [sp, #24]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	dc18      	bgt.n	8007df6 <_dtoa_r+0x80e>
 8007dc4:	9b02      	ldr	r3, [sp, #8]
 8007dc6:	b9b3      	cbnz	r3, 8007df6 <_dtoa_r+0x80e>
 8007dc8:	9b03      	ldr	r3, [sp, #12]
 8007dca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007dce:	b9a2      	cbnz	r2, 8007dfa <_dtoa_r+0x812>
 8007dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007dd4:	0d12      	lsrs	r2, r2, #20
 8007dd6:	0512      	lsls	r2, r2, #20
 8007dd8:	b18a      	cbz	r2, 8007dfe <_dtoa_r+0x816>
 8007dda:	9b04      	ldr	r3, [sp, #16]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	9b05      	ldr	r3, [sp, #20]
 8007de2:	3301      	adds	r3, #1
 8007de4:	9305      	str	r3, [sp, #20]
 8007de6:	2301      	movs	r3, #1
 8007de8:	930a      	str	r3, [sp, #40]	; 0x28
 8007dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f47f af70 	bne.w	8007cd2 <_dtoa_r+0x6ea>
 8007df2:	2001      	movs	r0, #1
 8007df4:	e775      	b.n	8007ce2 <_dtoa_r+0x6fa>
 8007df6:	2300      	movs	r3, #0
 8007df8:	e7f6      	b.n	8007de8 <_dtoa_r+0x800>
 8007dfa:	9b02      	ldr	r3, [sp, #8]
 8007dfc:	e7f4      	b.n	8007de8 <_dtoa_r+0x800>
 8007dfe:	920a      	str	r2, [sp, #40]	; 0x28
 8007e00:	e7f3      	b.n	8007dea <_dtoa_r+0x802>
 8007e02:	d082      	beq.n	8007d0a <_dtoa_r+0x722>
 8007e04:	4610      	mov	r0, r2
 8007e06:	301c      	adds	r0, #28
 8007e08:	e778      	b.n	8007cfc <_dtoa_r+0x714>
 8007e0a:	f1b9 0f00 	cmp.w	r9, #0
 8007e0e:	dc37      	bgt.n	8007e80 <_dtoa_r+0x898>
 8007e10:	9b06      	ldr	r3, [sp, #24]
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	dd34      	ble.n	8007e80 <_dtoa_r+0x898>
 8007e16:	46ca      	mov	sl, r9
 8007e18:	f1ba 0f00 	cmp.w	sl, #0
 8007e1c:	d10d      	bne.n	8007e3a <_dtoa_r+0x852>
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4653      	mov	r3, sl
 8007e22:	2205      	movs	r2, #5
 8007e24:	4630      	mov	r0, r6
 8007e26:	f000 f9d1 	bl	80081cc <__multadd>
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 fbec 	bl	800860c <__mcmp>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	f73f adeb 	bgt.w	8007a10 <_dtoa_r+0x428>
 8007e3a:	9b08      	ldr	r3, [sp, #32]
 8007e3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e40:	ea6f 0b03 	mvn.w	fp, r3
 8007e44:	f04f 0900 	mov.w	r9, #0
 8007e48:	4621      	mov	r1, r4
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f000 f99c 	bl	8008188 <_Bfree>
 8007e50:	2f00      	cmp	r7, #0
 8007e52:	f43f aea8 	beq.w	8007ba6 <_dtoa_r+0x5be>
 8007e56:	f1b9 0f00 	cmp.w	r9, #0
 8007e5a:	d005      	beq.n	8007e68 <_dtoa_r+0x880>
 8007e5c:	45b9      	cmp	r9, r7
 8007e5e:	d003      	beq.n	8007e68 <_dtoa_r+0x880>
 8007e60:	4649      	mov	r1, r9
 8007e62:	4630      	mov	r0, r6
 8007e64:	f000 f990 	bl	8008188 <_Bfree>
 8007e68:	4639      	mov	r1, r7
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f000 f98c 	bl	8008188 <_Bfree>
 8007e70:	e699      	b.n	8007ba6 <_dtoa_r+0x5be>
 8007e72:	2400      	movs	r4, #0
 8007e74:	4627      	mov	r7, r4
 8007e76:	e7e0      	b.n	8007e3a <_dtoa_r+0x852>
 8007e78:	46bb      	mov	fp, r7
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	e5c7      	b.n	8007a10 <_dtoa_r+0x428>
 8007e80:	9b07      	ldr	r3, [sp, #28]
 8007e82:	46ca      	mov	sl, r9
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8100 	beq.w	800808a <_dtoa_r+0xaa2>
 8007e8a:	f1b8 0f00 	cmp.w	r8, #0
 8007e8e:	dd05      	ble.n	8007e9c <_dtoa_r+0x8b4>
 8007e90:	4639      	mov	r1, r7
 8007e92:	4642      	mov	r2, r8
 8007e94:	4630      	mov	r0, r6
 8007e96:	f000 fb49 	bl	800852c <__lshift>
 8007e9a:	4607      	mov	r7, r0
 8007e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d05d      	beq.n	8007f5e <_dtoa_r+0x976>
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f000 f92f 	bl	8008108 <_Balloc>
 8007eaa:	4680      	mov	r8, r0
 8007eac:	b928      	cbnz	r0, 8007eba <_dtoa_r+0x8d2>
 8007eae:	4b82      	ldr	r3, [pc, #520]	; (80080b8 <_dtoa_r+0xad0>)
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007eb6:	f7ff bbaf 	b.w	8007618 <_dtoa_r+0x30>
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	3202      	adds	r2, #2
 8007ebe:	0092      	lsls	r2, r2, #2
 8007ec0:	f107 010c 	add.w	r1, r7, #12
 8007ec4:	300c      	adds	r0, #12
 8007ec6:	f7fe fcc1 	bl	800684c <memcpy>
 8007eca:	2201      	movs	r2, #1
 8007ecc:	4641      	mov	r1, r8
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f000 fb2c 	bl	800852c <__lshift>
 8007ed4:	9b01      	ldr	r3, [sp, #4]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	9304      	str	r3, [sp, #16]
 8007eda:	9b01      	ldr	r3, [sp, #4]
 8007edc:	4453      	add	r3, sl
 8007ede:	9308      	str	r3, [sp, #32]
 8007ee0:	9b02      	ldr	r3, [sp, #8]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	46b9      	mov	r9, r7
 8007ee8:	9307      	str	r3, [sp, #28]
 8007eea:	4607      	mov	r7, r0
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	4621      	mov	r1, r4
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	9302      	str	r3, [sp, #8]
 8007ef6:	f7ff fae9 	bl	80074cc <quorem>
 8007efa:	4603      	mov	r3, r0
 8007efc:	3330      	adds	r3, #48	; 0x30
 8007efe:	9005      	str	r0, [sp, #20]
 8007f00:	4649      	mov	r1, r9
 8007f02:	4628      	mov	r0, r5
 8007f04:	9309      	str	r3, [sp, #36]	; 0x24
 8007f06:	f000 fb81 	bl	800860c <__mcmp>
 8007f0a:	463a      	mov	r2, r7
 8007f0c:	4682      	mov	sl, r0
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4630      	mov	r0, r6
 8007f12:	f000 fb97 	bl	8008644 <__mdiff>
 8007f16:	68c2      	ldr	r2, [r0, #12]
 8007f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	bb0a      	cbnz	r2, 8007f62 <_dtoa_r+0x97a>
 8007f1e:	4601      	mov	r1, r0
 8007f20:	4628      	mov	r0, r5
 8007f22:	f000 fb73 	bl	800860c <__mcmp>
 8007f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f28:	4602      	mov	r2, r0
 8007f2a:	4641      	mov	r1, r8
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007f32:	f000 f929 	bl	8008188 <_Bfree>
 8007f36:	9b06      	ldr	r3, [sp, #24]
 8007f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f3a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007f3e:	ea43 0102 	orr.w	r1, r3, r2
 8007f42:	9b07      	ldr	r3, [sp, #28]
 8007f44:	430b      	orrs	r3, r1
 8007f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f48:	d10d      	bne.n	8007f66 <_dtoa_r+0x97e>
 8007f4a:	2b39      	cmp	r3, #57	; 0x39
 8007f4c:	d029      	beq.n	8007fa2 <_dtoa_r+0x9ba>
 8007f4e:	f1ba 0f00 	cmp.w	sl, #0
 8007f52:	dd01      	ble.n	8007f58 <_dtoa_r+0x970>
 8007f54:	9b05      	ldr	r3, [sp, #20]
 8007f56:	3331      	adds	r3, #49	; 0x31
 8007f58:	9a02      	ldr	r2, [sp, #8]
 8007f5a:	7013      	strb	r3, [r2, #0]
 8007f5c:	e774      	b.n	8007e48 <_dtoa_r+0x860>
 8007f5e:	4638      	mov	r0, r7
 8007f60:	e7b8      	b.n	8007ed4 <_dtoa_r+0x8ec>
 8007f62:	2201      	movs	r2, #1
 8007f64:	e7e1      	b.n	8007f2a <_dtoa_r+0x942>
 8007f66:	f1ba 0f00 	cmp.w	sl, #0
 8007f6a:	db06      	blt.n	8007f7a <_dtoa_r+0x992>
 8007f6c:	9906      	ldr	r1, [sp, #24]
 8007f6e:	ea41 0a0a 	orr.w	sl, r1, sl
 8007f72:	9907      	ldr	r1, [sp, #28]
 8007f74:	ea5a 0101 	orrs.w	r1, sl, r1
 8007f78:	d120      	bne.n	8007fbc <_dtoa_r+0x9d4>
 8007f7a:	2a00      	cmp	r2, #0
 8007f7c:	ddec      	ble.n	8007f58 <_dtoa_r+0x970>
 8007f7e:	4629      	mov	r1, r5
 8007f80:	2201      	movs	r2, #1
 8007f82:	4630      	mov	r0, r6
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	f000 fad1 	bl	800852c <__lshift>
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	f000 fb3d 	bl	800860c <__mcmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	9b04      	ldr	r3, [sp, #16]
 8007f96:	dc02      	bgt.n	8007f9e <_dtoa_r+0x9b6>
 8007f98:	d1de      	bne.n	8007f58 <_dtoa_r+0x970>
 8007f9a:	07da      	lsls	r2, r3, #31
 8007f9c:	d5dc      	bpl.n	8007f58 <_dtoa_r+0x970>
 8007f9e:	2b39      	cmp	r3, #57	; 0x39
 8007fa0:	d1d8      	bne.n	8007f54 <_dtoa_r+0x96c>
 8007fa2:	9a02      	ldr	r2, [sp, #8]
 8007fa4:	2339      	movs	r3, #57	; 0x39
 8007fa6:	7013      	strb	r3, [r2, #0]
 8007fa8:	4643      	mov	r3, r8
 8007faa:	4698      	mov	r8, r3
 8007fac:	3b01      	subs	r3, #1
 8007fae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007fb2:	2a39      	cmp	r2, #57	; 0x39
 8007fb4:	d051      	beq.n	800805a <_dtoa_r+0xa72>
 8007fb6:	3201      	adds	r2, #1
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	e745      	b.n	8007e48 <_dtoa_r+0x860>
 8007fbc:	2a00      	cmp	r2, #0
 8007fbe:	dd03      	ble.n	8007fc8 <_dtoa_r+0x9e0>
 8007fc0:	2b39      	cmp	r3, #57	; 0x39
 8007fc2:	d0ee      	beq.n	8007fa2 <_dtoa_r+0x9ba>
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	e7c7      	b.n	8007f58 <_dtoa_r+0x970>
 8007fc8:	9a04      	ldr	r2, [sp, #16]
 8007fca:	9908      	ldr	r1, [sp, #32]
 8007fcc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007fd0:	428a      	cmp	r2, r1
 8007fd2:	d02b      	beq.n	800802c <_dtoa_r+0xa44>
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	220a      	movs	r2, #10
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f000 f8f6 	bl	80081cc <__multadd>
 8007fe0:	45b9      	cmp	r9, r7
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	f04f 020a 	mov.w	r2, #10
 8007fec:	4649      	mov	r1, r9
 8007fee:	4630      	mov	r0, r6
 8007ff0:	d107      	bne.n	8008002 <_dtoa_r+0xa1a>
 8007ff2:	f000 f8eb 	bl	80081cc <__multadd>
 8007ff6:	4681      	mov	r9, r0
 8007ff8:	4607      	mov	r7, r0
 8007ffa:	9b04      	ldr	r3, [sp, #16]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	9304      	str	r3, [sp, #16]
 8008000:	e774      	b.n	8007eec <_dtoa_r+0x904>
 8008002:	f000 f8e3 	bl	80081cc <__multadd>
 8008006:	4639      	mov	r1, r7
 8008008:	4681      	mov	r9, r0
 800800a:	2300      	movs	r3, #0
 800800c:	220a      	movs	r2, #10
 800800e:	4630      	mov	r0, r6
 8008010:	f000 f8dc 	bl	80081cc <__multadd>
 8008014:	4607      	mov	r7, r0
 8008016:	e7f0      	b.n	8007ffa <_dtoa_r+0xa12>
 8008018:	f1ba 0f00 	cmp.w	sl, #0
 800801c:	9a01      	ldr	r2, [sp, #4]
 800801e:	bfcc      	ite	gt
 8008020:	46d0      	movgt	r8, sl
 8008022:	f04f 0801 	movle.w	r8, #1
 8008026:	4490      	add	r8, r2
 8008028:	f04f 0900 	mov.w	r9, #0
 800802c:	4629      	mov	r1, r5
 800802e:	2201      	movs	r2, #1
 8008030:	4630      	mov	r0, r6
 8008032:	9302      	str	r3, [sp, #8]
 8008034:	f000 fa7a 	bl	800852c <__lshift>
 8008038:	4621      	mov	r1, r4
 800803a:	4605      	mov	r5, r0
 800803c:	f000 fae6 	bl	800860c <__mcmp>
 8008040:	2800      	cmp	r0, #0
 8008042:	dcb1      	bgt.n	8007fa8 <_dtoa_r+0x9c0>
 8008044:	d102      	bne.n	800804c <_dtoa_r+0xa64>
 8008046:	9b02      	ldr	r3, [sp, #8]
 8008048:	07db      	lsls	r3, r3, #31
 800804a:	d4ad      	bmi.n	8007fa8 <_dtoa_r+0x9c0>
 800804c:	4643      	mov	r3, r8
 800804e:	4698      	mov	r8, r3
 8008050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008054:	2a30      	cmp	r2, #48	; 0x30
 8008056:	d0fa      	beq.n	800804e <_dtoa_r+0xa66>
 8008058:	e6f6      	b.n	8007e48 <_dtoa_r+0x860>
 800805a:	9a01      	ldr	r2, [sp, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d1a4      	bne.n	8007faa <_dtoa_r+0x9c2>
 8008060:	f10b 0b01 	add.w	fp, fp, #1
 8008064:	2331      	movs	r3, #49	; 0x31
 8008066:	e778      	b.n	8007f5a <_dtoa_r+0x972>
 8008068:	4b14      	ldr	r3, [pc, #80]	; (80080bc <_dtoa_r+0xad4>)
 800806a:	f7ff bb27 	b.w	80076bc <_dtoa_r+0xd4>
 800806e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008070:	2b00      	cmp	r3, #0
 8008072:	f47f ab03 	bne.w	800767c <_dtoa_r+0x94>
 8008076:	4b12      	ldr	r3, [pc, #72]	; (80080c0 <_dtoa_r+0xad8>)
 8008078:	f7ff bb20 	b.w	80076bc <_dtoa_r+0xd4>
 800807c:	f1ba 0f00 	cmp.w	sl, #0
 8008080:	dc03      	bgt.n	800808a <_dtoa_r+0xaa2>
 8008082:	9b06      	ldr	r3, [sp, #24]
 8008084:	2b02      	cmp	r3, #2
 8008086:	f73f aec7 	bgt.w	8007e18 <_dtoa_r+0x830>
 800808a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800808e:	4621      	mov	r1, r4
 8008090:	4628      	mov	r0, r5
 8008092:	f7ff fa1b 	bl	80074cc <quorem>
 8008096:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800809a:	f808 3b01 	strb.w	r3, [r8], #1
 800809e:	9a01      	ldr	r2, [sp, #4]
 80080a0:	eba8 0202 	sub.w	r2, r8, r2
 80080a4:	4592      	cmp	sl, r2
 80080a6:	ddb7      	ble.n	8008018 <_dtoa_r+0xa30>
 80080a8:	4629      	mov	r1, r5
 80080aa:	2300      	movs	r3, #0
 80080ac:	220a      	movs	r2, #10
 80080ae:	4630      	mov	r0, r6
 80080b0:	f000 f88c 	bl	80081cc <__multadd>
 80080b4:	4605      	mov	r5, r0
 80080b6:	e7ea      	b.n	800808e <_dtoa_r+0xaa6>
 80080b8:	0800aadf 	.word	0x0800aadf
 80080bc:	0800aa3c 	.word	0x0800aa3c
 80080c0:	0800aa60 	.word	0x0800aa60

080080c4 <_localeconv_r>:
 80080c4:	4800      	ldr	r0, [pc, #0]	; (80080c8 <_localeconv_r+0x4>)
 80080c6:	4770      	bx	lr
 80080c8:	2000017c 	.word	0x2000017c

080080cc <_lseek_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d07      	ldr	r5, [pc, #28]	; (80080ec <_lseek_r+0x20>)
 80080d0:	4604      	mov	r4, r0
 80080d2:	4608      	mov	r0, r1
 80080d4:	4611      	mov	r1, r2
 80080d6:	2200      	movs	r2, #0
 80080d8:	602a      	str	r2, [r5, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	f001 fa9e 	bl	800961c <_lseek>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_lseek_r+0x1e>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_lseek_r+0x1e>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	20004820 	.word	0x20004820

080080f0 <__malloc_lock>:
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <__malloc_lock+0x8>)
 80080f2:	f000 bf0d 	b.w	8008f10 <__retarget_lock_acquire_recursive>
 80080f6:	bf00      	nop
 80080f8:	20004824 	.word	0x20004824

080080fc <__malloc_unlock>:
 80080fc:	4801      	ldr	r0, [pc, #4]	; (8008104 <__malloc_unlock+0x8>)
 80080fe:	f000 bf08 	b.w	8008f12 <__retarget_lock_release_recursive>
 8008102:	bf00      	nop
 8008104:	20004824 	.word	0x20004824

08008108 <_Balloc>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800810c:	4604      	mov	r4, r0
 800810e:	460d      	mov	r5, r1
 8008110:	b976      	cbnz	r6, 8008130 <_Balloc+0x28>
 8008112:	2010      	movs	r0, #16
 8008114:	f7fe fb8a 	bl	800682c <malloc>
 8008118:	4602      	mov	r2, r0
 800811a:	6260      	str	r0, [r4, #36]	; 0x24
 800811c:	b920      	cbnz	r0, 8008128 <_Balloc+0x20>
 800811e:	4b18      	ldr	r3, [pc, #96]	; (8008180 <_Balloc+0x78>)
 8008120:	4818      	ldr	r0, [pc, #96]	; (8008184 <_Balloc+0x7c>)
 8008122:	2166      	movs	r1, #102	; 0x66
 8008124:	f000 fd0c 	bl	8008b40 <__assert_func>
 8008128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800812c:	6006      	str	r6, [r0, #0]
 800812e:	60c6      	str	r6, [r0, #12]
 8008130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008132:	68f3      	ldr	r3, [r6, #12]
 8008134:	b183      	cbz	r3, 8008158 <_Balloc+0x50>
 8008136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800813e:	b9b8      	cbnz	r0, 8008170 <_Balloc+0x68>
 8008140:	2101      	movs	r1, #1
 8008142:	fa01 f605 	lsl.w	r6, r1, r5
 8008146:	1d72      	adds	r2, r6, #5
 8008148:	0092      	lsls	r2, r2, #2
 800814a:	4620      	mov	r0, r4
 800814c:	f7fe fb94 	bl	8006878 <_calloc_r>
 8008150:	b160      	cbz	r0, 800816c <_Balloc+0x64>
 8008152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008156:	e00e      	b.n	8008176 <_Balloc+0x6e>
 8008158:	2221      	movs	r2, #33	; 0x21
 800815a:	2104      	movs	r1, #4
 800815c:	4620      	mov	r0, r4
 800815e:	f7fe fb8b 	bl	8006878 <_calloc_r>
 8008162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008164:	60f0      	str	r0, [r6, #12]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e4      	bne.n	8008136 <_Balloc+0x2e>
 800816c:	2000      	movs	r0, #0
 800816e:	bd70      	pop	{r4, r5, r6, pc}
 8008170:	6802      	ldr	r2, [r0, #0]
 8008172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008176:	2300      	movs	r3, #0
 8008178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800817c:	e7f7      	b.n	800816e <_Balloc+0x66>
 800817e:	bf00      	nop
 8008180:	0800aa6d 	.word	0x0800aa6d
 8008184:	0800aaf0 	.word	0x0800aaf0

08008188 <_Bfree>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800818c:	4605      	mov	r5, r0
 800818e:	460c      	mov	r4, r1
 8008190:	b976      	cbnz	r6, 80081b0 <_Bfree+0x28>
 8008192:	2010      	movs	r0, #16
 8008194:	f7fe fb4a 	bl	800682c <malloc>
 8008198:	4602      	mov	r2, r0
 800819a:	6268      	str	r0, [r5, #36]	; 0x24
 800819c:	b920      	cbnz	r0, 80081a8 <_Bfree+0x20>
 800819e:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <_Bfree+0x3c>)
 80081a0:	4809      	ldr	r0, [pc, #36]	; (80081c8 <_Bfree+0x40>)
 80081a2:	218a      	movs	r1, #138	; 0x8a
 80081a4:	f000 fccc 	bl	8008b40 <__assert_func>
 80081a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081ac:	6006      	str	r6, [r0, #0]
 80081ae:	60c6      	str	r6, [r0, #12]
 80081b0:	b13c      	cbz	r4, 80081c2 <_Bfree+0x3a>
 80081b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081b4:	6862      	ldr	r2, [r4, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081bc:	6021      	str	r1, [r4, #0]
 80081be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	0800aa6d 	.word	0x0800aa6d
 80081c8:	0800aaf0 	.word	0x0800aaf0

080081cc <__multadd>:
 80081cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d0:	690d      	ldr	r5, [r1, #16]
 80081d2:	4607      	mov	r7, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	461e      	mov	r6, r3
 80081d8:	f101 0c14 	add.w	ip, r1, #20
 80081dc:	2000      	movs	r0, #0
 80081de:	f8dc 3000 	ldr.w	r3, [ip]
 80081e2:	b299      	uxth	r1, r3
 80081e4:	fb02 6101 	mla	r1, r2, r1, r6
 80081e8:	0c1e      	lsrs	r6, r3, #16
 80081ea:	0c0b      	lsrs	r3, r1, #16
 80081ec:	fb02 3306 	mla	r3, r2, r6, r3
 80081f0:	b289      	uxth	r1, r1
 80081f2:	3001      	adds	r0, #1
 80081f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081f8:	4285      	cmp	r5, r0
 80081fa:	f84c 1b04 	str.w	r1, [ip], #4
 80081fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008202:	dcec      	bgt.n	80081de <__multadd+0x12>
 8008204:	b30e      	cbz	r6, 800824a <__multadd+0x7e>
 8008206:	68a3      	ldr	r3, [r4, #8]
 8008208:	42ab      	cmp	r3, r5
 800820a:	dc19      	bgt.n	8008240 <__multadd+0x74>
 800820c:	6861      	ldr	r1, [r4, #4]
 800820e:	4638      	mov	r0, r7
 8008210:	3101      	adds	r1, #1
 8008212:	f7ff ff79 	bl	8008108 <_Balloc>
 8008216:	4680      	mov	r8, r0
 8008218:	b928      	cbnz	r0, 8008226 <__multadd+0x5a>
 800821a:	4602      	mov	r2, r0
 800821c:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <__multadd+0x84>)
 800821e:	480d      	ldr	r0, [pc, #52]	; (8008254 <__multadd+0x88>)
 8008220:	21b5      	movs	r1, #181	; 0xb5
 8008222:	f000 fc8d 	bl	8008b40 <__assert_func>
 8008226:	6922      	ldr	r2, [r4, #16]
 8008228:	3202      	adds	r2, #2
 800822a:	f104 010c 	add.w	r1, r4, #12
 800822e:	0092      	lsls	r2, r2, #2
 8008230:	300c      	adds	r0, #12
 8008232:	f7fe fb0b 	bl	800684c <memcpy>
 8008236:	4621      	mov	r1, r4
 8008238:	4638      	mov	r0, r7
 800823a:	f7ff ffa5 	bl	8008188 <_Bfree>
 800823e:	4644      	mov	r4, r8
 8008240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008244:	3501      	adds	r5, #1
 8008246:	615e      	str	r6, [r3, #20]
 8008248:	6125      	str	r5, [r4, #16]
 800824a:	4620      	mov	r0, r4
 800824c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008250:	0800aadf 	.word	0x0800aadf
 8008254:	0800aaf0 	.word	0x0800aaf0

08008258 <__hi0bits>:
 8008258:	0c03      	lsrs	r3, r0, #16
 800825a:	041b      	lsls	r3, r3, #16
 800825c:	b9d3      	cbnz	r3, 8008294 <__hi0bits+0x3c>
 800825e:	0400      	lsls	r0, r0, #16
 8008260:	2310      	movs	r3, #16
 8008262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008266:	bf04      	itt	eq
 8008268:	0200      	lsleq	r0, r0, #8
 800826a:	3308      	addeq	r3, #8
 800826c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008270:	bf04      	itt	eq
 8008272:	0100      	lsleq	r0, r0, #4
 8008274:	3304      	addeq	r3, #4
 8008276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800827a:	bf04      	itt	eq
 800827c:	0080      	lsleq	r0, r0, #2
 800827e:	3302      	addeq	r3, #2
 8008280:	2800      	cmp	r0, #0
 8008282:	db05      	blt.n	8008290 <__hi0bits+0x38>
 8008284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008288:	f103 0301 	add.w	r3, r3, #1
 800828c:	bf08      	it	eq
 800828e:	2320      	moveq	r3, #32
 8008290:	4618      	mov	r0, r3
 8008292:	4770      	bx	lr
 8008294:	2300      	movs	r3, #0
 8008296:	e7e4      	b.n	8008262 <__hi0bits+0xa>

08008298 <__lo0bits>:
 8008298:	6803      	ldr	r3, [r0, #0]
 800829a:	f013 0207 	ands.w	r2, r3, #7
 800829e:	4601      	mov	r1, r0
 80082a0:	d00b      	beq.n	80082ba <__lo0bits+0x22>
 80082a2:	07da      	lsls	r2, r3, #31
 80082a4:	d423      	bmi.n	80082ee <__lo0bits+0x56>
 80082a6:	0798      	lsls	r0, r3, #30
 80082a8:	bf49      	itett	mi
 80082aa:	085b      	lsrmi	r3, r3, #1
 80082ac:	089b      	lsrpl	r3, r3, #2
 80082ae:	2001      	movmi	r0, #1
 80082b0:	600b      	strmi	r3, [r1, #0]
 80082b2:	bf5c      	itt	pl
 80082b4:	600b      	strpl	r3, [r1, #0]
 80082b6:	2002      	movpl	r0, #2
 80082b8:	4770      	bx	lr
 80082ba:	b298      	uxth	r0, r3
 80082bc:	b9a8      	cbnz	r0, 80082ea <__lo0bits+0x52>
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	2010      	movs	r0, #16
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	b90a      	cbnz	r2, 80082ca <__lo0bits+0x32>
 80082c6:	3008      	adds	r0, #8
 80082c8:	0a1b      	lsrs	r3, r3, #8
 80082ca:	071a      	lsls	r2, r3, #28
 80082cc:	bf04      	itt	eq
 80082ce:	091b      	lsreq	r3, r3, #4
 80082d0:	3004      	addeq	r0, #4
 80082d2:	079a      	lsls	r2, r3, #30
 80082d4:	bf04      	itt	eq
 80082d6:	089b      	lsreq	r3, r3, #2
 80082d8:	3002      	addeq	r0, #2
 80082da:	07da      	lsls	r2, r3, #31
 80082dc:	d403      	bmi.n	80082e6 <__lo0bits+0x4e>
 80082de:	085b      	lsrs	r3, r3, #1
 80082e0:	f100 0001 	add.w	r0, r0, #1
 80082e4:	d005      	beq.n	80082f2 <__lo0bits+0x5a>
 80082e6:	600b      	str	r3, [r1, #0]
 80082e8:	4770      	bx	lr
 80082ea:	4610      	mov	r0, r2
 80082ec:	e7e9      	b.n	80082c2 <__lo0bits+0x2a>
 80082ee:	2000      	movs	r0, #0
 80082f0:	4770      	bx	lr
 80082f2:	2020      	movs	r0, #32
 80082f4:	4770      	bx	lr
	...

080082f8 <__i2b>:
 80082f8:	b510      	push	{r4, lr}
 80082fa:	460c      	mov	r4, r1
 80082fc:	2101      	movs	r1, #1
 80082fe:	f7ff ff03 	bl	8008108 <_Balloc>
 8008302:	4602      	mov	r2, r0
 8008304:	b928      	cbnz	r0, 8008312 <__i2b+0x1a>
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <__i2b+0x24>)
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <__i2b+0x28>)
 800830a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800830e:	f000 fc17 	bl	8008b40 <__assert_func>
 8008312:	2301      	movs	r3, #1
 8008314:	6144      	str	r4, [r0, #20]
 8008316:	6103      	str	r3, [r0, #16]
 8008318:	bd10      	pop	{r4, pc}
 800831a:	bf00      	nop
 800831c:	0800aadf 	.word	0x0800aadf
 8008320:	0800aaf0 	.word	0x0800aaf0

08008324 <__multiply>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	4691      	mov	r9, r2
 800832a:	690a      	ldr	r2, [r1, #16]
 800832c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008330:	429a      	cmp	r2, r3
 8008332:	bfb8      	it	lt
 8008334:	460b      	movlt	r3, r1
 8008336:	460c      	mov	r4, r1
 8008338:	bfbc      	itt	lt
 800833a:	464c      	movlt	r4, r9
 800833c:	4699      	movlt	r9, r3
 800833e:	6927      	ldr	r7, [r4, #16]
 8008340:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008344:	68a3      	ldr	r3, [r4, #8]
 8008346:	6861      	ldr	r1, [r4, #4]
 8008348:	eb07 060a 	add.w	r6, r7, sl
 800834c:	42b3      	cmp	r3, r6
 800834e:	b085      	sub	sp, #20
 8008350:	bfb8      	it	lt
 8008352:	3101      	addlt	r1, #1
 8008354:	f7ff fed8 	bl	8008108 <_Balloc>
 8008358:	b930      	cbnz	r0, 8008368 <__multiply+0x44>
 800835a:	4602      	mov	r2, r0
 800835c:	4b44      	ldr	r3, [pc, #272]	; (8008470 <__multiply+0x14c>)
 800835e:	4845      	ldr	r0, [pc, #276]	; (8008474 <__multiply+0x150>)
 8008360:	f240 115d 	movw	r1, #349	; 0x15d
 8008364:	f000 fbec 	bl	8008b40 <__assert_func>
 8008368:	f100 0514 	add.w	r5, r0, #20
 800836c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008370:	462b      	mov	r3, r5
 8008372:	2200      	movs	r2, #0
 8008374:	4543      	cmp	r3, r8
 8008376:	d321      	bcc.n	80083bc <__multiply+0x98>
 8008378:	f104 0314 	add.w	r3, r4, #20
 800837c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008380:	f109 0314 	add.w	r3, r9, #20
 8008384:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008388:	9202      	str	r2, [sp, #8]
 800838a:	1b3a      	subs	r2, r7, r4
 800838c:	3a15      	subs	r2, #21
 800838e:	f022 0203 	bic.w	r2, r2, #3
 8008392:	3204      	adds	r2, #4
 8008394:	f104 0115 	add.w	r1, r4, #21
 8008398:	428f      	cmp	r7, r1
 800839a:	bf38      	it	cc
 800839c:	2204      	movcc	r2, #4
 800839e:	9201      	str	r2, [sp, #4]
 80083a0:	9a02      	ldr	r2, [sp, #8]
 80083a2:	9303      	str	r3, [sp, #12]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d80c      	bhi.n	80083c2 <__multiply+0x9e>
 80083a8:	2e00      	cmp	r6, #0
 80083aa:	dd03      	ble.n	80083b4 <__multiply+0x90>
 80083ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d05a      	beq.n	800846a <__multiply+0x146>
 80083b4:	6106      	str	r6, [r0, #16]
 80083b6:	b005      	add	sp, #20
 80083b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083bc:	f843 2b04 	str.w	r2, [r3], #4
 80083c0:	e7d8      	b.n	8008374 <__multiply+0x50>
 80083c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80083c6:	f1ba 0f00 	cmp.w	sl, #0
 80083ca:	d024      	beq.n	8008416 <__multiply+0xf2>
 80083cc:	f104 0e14 	add.w	lr, r4, #20
 80083d0:	46a9      	mov	r9, r5
 80083d2:	f04f 0c00 	mov.w	ip, #0
 80083d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083da:	f8d9 1000 	ldr.w	r1, [r9]
 80083de:	fa1f fb82 	uxth.w	fp, r2
 80083e2:	b289      	uxth	r1, r1
 80083e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80083e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80083ec:	f8d9 2000 	ldr.w	r2, [r9]
 80083f0:	4461      	add	r1, ip
 80083f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80083fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083fe:	b289      	uxth	r1, r1
 8008400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008404:	4577      	cmp	r7, lr
 8008406:	f849 1b04 	str.w	r1, [r9], #4
 800840a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800840e:	d8e2      	bhi.n	80083d6 <__multiply+0xb2>
 8008410:	9a01      	ldr	r2, [sp, #4]
 8008412:	f845 c002 	str.w	ip, [r5, r2]
 8008416:	9a03      	ldr	r2, [sp, #12]
 8008418:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800841c:	3304      	adds	r3, #4
 800841e:	f1b9 0f00 	cmp.w	r9, #0
 8008422:	d020      	beq.n	8008466 <__multiply+0x142>
 8008424:	6829      	ldr	r1, [r5, #0]
 8008426:	f104 0c14 	add.w	ip, r4, #20
 800842a:	46ae      	mov	lr, r5
 800842c:	f04f 0a00 	mov.w	sl, #0
 8008430:	f8bc b000 	ldrh.w	fp, [ip]
 8008434:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008438:	fb09 220b 	mla	r2, r9, fp, r2
 800843c:	4492      	add	sl, r2
 800843e:	b289      	uxth	r1, r1
 8008440:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008444:	f84e 1b04 	str.w	r1, [lr], #4
 8008448:	f85c 2b04 	ldr.w	r2, [ip], #4
 800844c:	f8be 1000 	ldrh.w	r1, [lr]
 8008450:	0c12      	lsrs	r2, r2, #16
 8008452:	fb09 1102 	mla	r1, r9, r2, r1
 8008456:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800845a:	4567      	cmp	r7, ip
 800845c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008460:	d8e6      	bhi.n	8008430 <__multiply+0x10c>
 8008462:	9a01      	ldr	r2, [sp, #4]
 8008464:	50a9      	str	r1, [r5, r2]
 8008466:	3504      	adds	r5, #4
 8008468:	e79a      	b.n	80083a0 <__multiply+0x7c>
 800846a:	3e01      	subs	r6, #1
 800846c:	e79c      	b.n	80083a8 <__multiply+0x84>
 800846e:	bf00      	nop
 8008470:	0800aadf 	.word	0x0800aadf
 8008474:	0800aaf0 	.word	0x0800aaf0

08008478 <__pow5mult>:
 8008478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800847c:	4615      	mov	r5, r2
 800847e:	f012 0203 	ands.w	r2, r2, #3
 8008482:	4606      	mov	r6, r0
 8008484:	460f      	mov	r7, r1
 8008486:	d007      	beq.n	8008498 <__pow5mult+0x20>
 8008488:	4c25      	ldr	r4, [pc, #148]	; (8008520 <__pow5mult+0xa8>)
 800848a:	3a01      	subs	r2, #1
 800848c:	2300      	movs	r3, #0
 800848e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008492:	f7ff fe9b 	bl	80081cc <__multadd>
 8008496:	4607      	mov	r7, r0
 8008498:	10ad      	asrs	r5, r5, #2
 800849a:	d03d      	beq.n	8008518 <__pow5mult+0xa0>
 800849c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800849e:	b97c      	cbnz	r4, 80084c0 <__pow5mult+0x48>
 80084a0:	2010      	movs	r0, #16
 80084a2:	f7fe f9c3 	bl	800682c <malloc>
 80084a6:	4602      	mov	r2, r0
 80084a8:	6270      	str	r0, [r6, #36]	; 0x24
 80084aa:	b928      	cbnz	r0, 80084b8 <__pow5mult+0x40>
 80084ac:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <__pow5mult+0xac>)
 80084ae:	481e      	ldr	r0, [pc, #120]	; (8008528 <__pow5mult+0xb0>)
 80084b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084b4:	f000 fb44 	bl	8008b40 <__assert_func>
 80084b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084bc:	6004      	str	r4, [r0, #0]
 80084be:	60c4      	str	r4, [r0, #12]
 80084c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084c8:	b94c      	cbnz	r4, 80084de <__pow5mult+0x66>
 80084ca:	f240 2171 	movw	r1, #625	; 0x271
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7ff ff12 	bl	80082f8 <__i2b>
 80084d4:	2300      	movs	r3, #0
 80084d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084da:	4604      	mov	r4, r0
 80084dc:	6003      	str	r3, [r0, #0]
 80084de:	f04f 0900 	mov.w	r9, #0
 80084e2:	07eb      	lsls	r3, r5, #31
 80084e4:	d50a      	bpl.n	80084fc <__pow5mult+0x84>
 80084e6:	4639      	mov	r1, r7
 80084e8:	4622      	mov	r2, r4
 80084ea:	4630      	mov	r0, r6
 80084ec:	f7ff ff1a 	bl	8008324 <__multiply>
 80084f0:	4639      	mov	r1, r7
 80084f2:	4680      	mov	r8, r0
 80084f4:	4630      	mov	r0, r6
 80084f6:	f7ff fe47 	bl	8008188 <_Bfree>
 80084fa:	4647      	mov	r7, r8
 80084fc:	106d      	asrs	r5, r5, #1
 80084fe:	d00b      	beq.n	8008518 <__pow5mult+0xa0>
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	b938      	cbnz	r0, 8008514 <__pow5mult+0x9c>
 8008504:	4622      	mov	r2, r4
 8008506:	4621      	mov	r1, r4
 8008508:	4630      	mov	r0, r6
 800850a:	f7ff ff0b 	bl	8008324 <__multiply>
 800850e:	6020      	str	r0, [r4, #0]
 8008510:	f8c0 9000 	str.w	r9, [r0]
 8008514:	4604      	mov	r4, r0
 8008516:	e7e4      	b.n	80084e2 <__pow5mult+0x6a>
 8008518:	4638      	mov	r0, r7
 800851a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800851e:	bf00      	nop
 8008520:	0800ac40 	.word	0x0800ac40
 8008524:	0800aa6d 	.word	0x0800aa6d
 8008528:	0800aaf0 	.word	0x0800aaf0

0800852c <__lshift>:
 800852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	460c      	mov	r4, r1
 8008532:	6849      	ldr	r1, [r1, #4]
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800853a:	68a3      	ldr	r3, [r4, #8]
 800853c:	4607      	mov	r7, r0
 800853e:	4691      	mov	r9, r2
 8008540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008544:	f108 0601 	add.w	r6, r8, #1
 8008548:	42b3      	cmp	r3, r6
 800854a:	db0b      	blt.n	8008564 <__lshift+0x38>
 800854c:	4638      	mov	r0, r7
 800854e:	f7ff fddb 	bl	8008108 <_Balloc>
 8008552:	4605      	mov	r5, r0
 8008554:	b948      	cbnz	r0, 800856a <__lshift+0x3e>
 8008556:	4602      	mov	r2, r0
 8008558:	4b2a      	ldr	r3, [pc, #168]	; (8008604 <__lshift+0xd8>)
 800855a:	482b      	ldr	r0, [pc, #172]	; (8008608 <__lshift+0xdc>)
 800855c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008560:	f000 faee 	bl	8008b40 <__assert_func>
 8008564:	3101      	adds	r1, #1
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	e7ee      	b.n	8008548 <__lshift+0x1c>
 800856a:	2300      	movs	r3, #0
 800856c:	f100 0114 	add.w	r1, r0, #20
 8008570:	f100 0210 	add.w	r2, r0, #16
 8008574:	4618      	mov	r0, r3
 8008576:	4553      	cmp	r3, sl
 8008578:	db37      	blt.n	80085ea <__lshift+0xbe>
 800857a:	6920      	ldr	r0, [r4, #16]
 800857c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008580:	f104 0314 	add.w	r3, r4, #20
 8008584:	f019 091f 	ands.w	r9, r9, #31
 8008588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800858c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008590:	d02f      	beq.n	80085f2 <__lshift+0xc6>
 8008592:	f1c9 0e20 	rsb	lr, r9, #32
 8008596:	468a      	mov	sl, r1
 8008598:	f04f 0c00 	mov.w	ip, #0
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	fa02 f209 	lsl.w	r2, r2, r9
 80085a2:	ea42 020c 	orr.w	r2, r2, ip
 80085a6:	f84a 2b04 	str.w	r2, [sl], #4
 80085aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ae:	4298      	cmp	r0, r3
 80085b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085b4:	d8f2      	bhi.n	800859c <__lshift+0x70>
 80085b6:	1b03      	subs	r3, r0, r4
 80085b8:	3b15      	subs	r3, #21
 80085ba:	f023 0303 	bic.w	r3, r3, #3
 80085be:	3304      	adds	r3, #4
 80085c0:	f104 0215 	add.w	r2, r4, #21
 80085c4:	4290      	cmp	r0, r2
 80085c6:	bf38      	it	cc
 80085c8:	2304      	movcc	r3, #4
 80085ca:	f841 c003 	str.w	ip, [r1, r3]
 80085ce:	f1bc 0f00 	cmp.w	ip, #0
 80085d2:	d001      	beq.n	80085d8 <__lshift+0xac>
 80085d4:	f108 0602 	add.w	r6, r8, #2
 80085d8:	3e01      	subs	r6, #1
 80085da:	4638      	mov	r0, r7
 80085dc:	612e      	str	r6, [r5, #16]
 80085de:	4621      	mov	r1, r4
 80085e0:	f7ff fdd2 	bl	8008188 <_Bfree>
 80085e4:	4628      	mov	r0, r5
 80085e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80085ee:	3301      	adds	r3, #1
 80085f0:	e7c1      	b.n	8008576 <__lshift+0x4a>
 80085f2:	3904      	subs	r1, #4
 80085f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80085fc:	4298      	cmp	r0, r3
 80085fe:	d8f9      	bhi.n	80085f4 <__lshift+0xc8>
 8008600:	e7ea      	b.n	80085d8 <__lshift+0xac>
 8008602:	bf00      	nop
 8008604:	0800aadf 	.word	0x0800aadf
 8008608:	0800aaf0 	.word	0x0800aaf0

0800860c <__mcmp>:
 800860c:	b530      	push	{r4, r5, lr}
 800860e:	6902      	ldr	r2, [r0, #16]
 8008610:	690c      	ldr	r4, [r1, #16]
 8008612:	1b12      	subs	r2, r2, r4
 8008614:	d10e      	bne.n	8008634 <__mcmp+0x28>
 8008616:	f100 0314 	add.w	r3, r0, #20
 800861a:	3114      	adds	r1, #20
 800861c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800862c:	42a5      	cmp	r5, r4
 800862e:	d003      	beq.n	8008638 <__mcmp+0x2c>
 8008630:	d305      	bcc.n	800863e <__mcmp+0x32>
 8008632:	2201      	movs	r2, #1
 8008634:	4610      	mov	r0, r2
 8008636:	bd30      	pop	{r4, r5, pc}
 8008638:	4283      	cmp	r3, r0
 800863a:	d3f3      	bcc.n	8008624 <__mcmp+0x18>
 800863c:	e7fa      	b.n	8008634 <__mcmp+0x28>
 800863e:	f04f 32ff 	mov.w	r2, #4294967295
 8008642:	e7f7      	b.n	8008634 <__mcmp+0x28>

08008644 <__mdiff>:
 8008644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008648:	460c      	mov	r4, r1
 800864a:	4606      	mov	r6, r0
 800864c:	4611      	mov	r1, r2
 800864e:	4620      	mov	r0, r4
 8008650:	4690      	mov	r8, r2
 8008652:	f7ff ffdb 	bl	800860c <__mcmp>
 8008656:	1e05      	subs	r5, r0, #0
 8008658:	d110      	bne.n	800867c <__mdiff+0x38>
 800865a:	4629      	mov	r1, r5
 800865c:	4630      	mov	r0, r6
 800865e:	f7ff fd53 	bl	8008108 <_Balloc>
 8008662:	b930      	cbnz	r0, 8008672 <__mdiff+0x2e>
 8008664:	4b3a      	ldr	r3, [pc, #232]	; (8008750 <__mdiff+0x10c>)
 8008666:	4602      	mov	r2, r0
 8008668:	f240 2132 	movw	r1, #562	; 0x232
 800866c:	4839      	ldr	r0, [pc, #228]	; (8008754 <__mdiff+0x110>)
 800866e:	f000 fa67 	bl	8008b40 <__assert_func>
 8008672:	2301      	movs	r3, #1
 8008674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867c:	bfa4      	itt	ge
 800867e:	4643      	movge	r3, r8
 8008680:	46a0      	movge	r8, r4
 8008682:	4630      	mov	r0, r6
 8008684:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008688:	bfa6      	itte	ge
 800868a:	461c      	movge	r4, r3
 800868c:	2500      	movge	r5, #0
 800868e:	2501      	movlt	r5, #1
 8008690:	f7ff fd3a 	bl	8008108 <_Balloc>
 8008694:	b920      	cbnz	r0, 80086a0 <__mdiff+0x5c>
 8008696:	4b2e      	ldr	r3, [pc, #184]	; (8008750 <__mdiff+0x10c>)
 8008698:	4602      	mov	r2, r0
 800869a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800869e:	e7e5      	b.n	800866c <__mdiff+0x28>
 80086a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086a4:	6926      	ldr	r6, [r4, #16]
 80086a6:	60c5      	str	r5, [r0, #12]
 80086a8:	f104 0914 	add.w	r9, r4, #20
 80086ac:	f108 0514 	add.w	r5, r8, #20
 80086b0:	f100 0e14 	add.w	lr, r0, #20
 80086b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086bc:	f108 0210 	add.w	r2, r8, #16
 80086c0:	46f2      	mov	sl, lr
 80086c2:	2100      	movs	r1, #0
 80086c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80086c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086cc:	fa1f f883 	uxth.w	r8, r3
 80086d0:	fa11 f18b 	uxtah	r1, r1, fp
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	eba1 0808 	sub.w	r8, r1, r8
 80086da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086e2:	fa1f f888 	uxth.w	r8, r8
 80086e6:	1419      	asrs	r1, r3, #16
 80086e8:	454e      	cmp	r6, r9
 80086ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086ee:	f84a 3b04 	str.w	r3, [sl], #4
 80086f2:	d8e7      	bhi.n	80086c4 <__mdiff+0x80>
 80086f4:	1b33      	subs	r3, r6, r4
 80086f6:	3b15      	subs	r3, #21
 80086f8:	f023 0303 	bic.w	r3, r3, #3
 80086fc:	3304      	adds	r3, #4
 80086fe:	3415      	adds	r4, #21
 8008700:	42a6      	cmp	r6, r4
 8008702:	bf38      	it	cc
 8008704:	2304      	movcc	r3, #4
 8008706:	441d      	add	r5, r3
 8008708:	4473      	add	r3, lr
 800870a:	469e      	mov	lr, r3
 800870c:	462e      	mov	r6, r5
 800870e:	4566      	cmp	r6, ip
 8008710:	d30e      	bcc.n	8008730 <__mdiff+0xec>
 8008712:	f10c 0203 	add.w	r2, ip, #3
 8008716:	1b52      	subs	r2, r2, r5
 8008718:	f022 0203 	bic.w	r2, r2, #3
 800871c:	3d03      	subs	r5, #3
 800871e:	45ac      	cmp	ip, r5
 8008720:	bf38      	it	cc
 8008722:	2200      	movcc	r2, #0
 8008724:	441a      	add	r2, r3
 8008726:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800872a:	b17b      	cbz	r3, 800874c <__mdiff+0x108>
 800872c:	6107      	str	r7, [r0, #16]
 800872e:	e7a3      	b.n	8008678 <__mdiff+0x34>
 8008730:	f856 8b04 	ldr.w	r8, [r6], #4
 8008734:	fa11 f288 	uxtah	r2, r1, r8
 8008738:	1414      	asrs	r4, r2, #16
 800873a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800873e:	b292      	uxth	r2, r2
 8008740:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008744:	f84e 2b04 	str.w	r2, [lr], #4
 8008748:	1421      	asrs	r1, r4, #16
 800874a:	e7e0      	b.n	800870e <__mdiff+0xca>
 800874c:	3f01      	subs	r7, #1
 800874e:	e7ea      	b.n	8008726 <__mdiff+0xe2>
 8008750:	0800aadf 	.word	0x0800aadf
 8008754:	0800aaf0 	.word	0x0800aaf0

08008758 <__d2b>:
 8008758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800875c:	4689      	mov	r9, r1
 800875e:	2101      	movs	r1, #1
 8008760:	ec57 6b10 	vmov	r6, r7, d0
 8008764:	4690      	mov	r8, r2
 8008766:	f7ff fccf 	bl	8008108 <_Balloc>
 800876a:	4604      	mov	r4, r0
 800876c:	b930      	cbnz	r0, 800877c <__d2b+0x24>
 800876e:	4602      	mov	r2, r0
 8008770:	4b25      	ldr	r3, [pc, #148]	; (8008808 <__d2b+0xb0>)
 8008772:	4826      	ldr	r0, [pc, #152]	; (800880c <__d2b+0xb4>)
 8008774:	f240 310a 	movw	r1, #778	; 0x30a
 8008778:	f000 f9e2 	bl	8008b40 <__assert_func>
 800877c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008780:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008784:	bb35      	cbnz	r5, 80087d4 <__d2b+0x7c>
 8008786:	2e00      	cmp	r6, #0
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	d028      	beq.n	80087de <__d2b+0x86>
 800878c:	4668      	mov	r0, sp
 800878e:	9600      	str	r6, [sp, #0]
 8008790:	f7ff fd82 	bl	8008298 <__lo0bits>
 8008794:	9900      	ldr	r1, [sp, #0]
 8008796:	b300      	cbz	r0, 80087da <__d2b+0x82>
 8008798:	9a01      	ldr	r2, [sp, #4]
 800879a:	f1c0 0320 	rsb	r3, r0, #32
 800879e:	fa02 f303 	lsl.w	r3, r2, r3
 80087a2:	430b      	orrs	r3, r1
 80087a4:	40c2      	lsrs	r2, r0
 80087a6:	6163      	str	r3, [r4, #20]
 80087a8:	9201      	str	r2, [sp, #4]
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	61a3      	str	r3, [r4, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	bf14      	ite	ne
 80087b2:	2202      	movne	r2, #2
 80087b4:	2201      	moveq	r2, #1
 80087b6:	6122      	str	r2, [r4, #16]
 80087b8:	b1d5      	cbz	r5, 80087f0 <__d2b+0x98>
 80087ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087be:	4405      	add	r5, r0
 80087c0:	f8c9 5000 	str.w	r5, [r9]
 80087c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087c8:	f8c8 0000 	str.w	r0, [r8]
 80087cc:	4620      	mov	r0, r4
 80087ce:	b003      	add	sp, #12
 80087d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087d8:	e7d5      	b.n	8008786 <__d2b+0x2e>
 80087da:	6161      	str	r1, [r4, #20]
 80087dc:	e7e5      	b.n	80087aa <__d2b+0x52>
 80087de:	a801      	add	r0, sp, #4
 80087e0:	f7ff fd5a 	bl	8008298 <__lo0bits>
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	6163      	str	r3, [r4, #20]
 80087e8:	2201      	movs	r2, #1
 80087ea:	6122      	str	r2, [r4, #16]
 80087ec:	3020      	adds	r0, #32
 80087ee:	e7e3      	b.n	80087b8 <__d2b+0x60>
 80087f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087f8:	f8c9 0000 	str.w	r0, [r9]
 80087fc:	6918      	ldr	r0, [r3, #16]
 80087fe:	f7ff fd2b 	bl	8008258 <__hi0bits>
 8008802:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008806:	e7df      	b.n	80087c8 <__d2b+0x70>
 8008808:	0800aadf 	.word	0x0800aadf
 800880c:	0800aaf0 	.word	0x0800aaf0

08008810 <__ssputs_r>:
 8008810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008814:	688e      	ldr	r6, [r1, #8]
 8008816:	429e      	cmp	r6, r3
 8008818:	4682      	mov	sl, r0
 800881a:	460c      	mov	r4, r1
 800881c:	4690      	mov	r8, r2
 800881e:	461f      	mov	r7, r3
 8008820:	d838      	bhi.n	8008894 <__ssputs_r+0x84>
 8008822:	898a      	ldrh	r2, [r1, #12]
 8008824:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008828:	d032      	beq.n	8008890 <__ssputs_r+0x80>
 800882a:	6825      	ldr	r5, [r4, #0]
 800882c:	6909      	ldr	r1, [r1, #16]
 800882e:	eba5 0901 	sub.w	r9, r5, r1
 8008832:	6965      	ldr	r5, [r4, #20]
 8008834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800883c:	3301      	adds	r3, #1
 800883e:	444b      	add	r3, r9
 8008840:	106d      	asrs	r5, r5, #1
 8008842:	429d      	cmp	r5, r3
 8008844:	bf38      	it	cc
 8008846:	461d      	movcc	r5, r3
 8008848:	0553      	lsls	r3, r2, #21
 800884a:	d531      	bpl.n	80088b0 <__ssputs_r+0xa0>
 800884c:	4629      	mov	r1, r5
 800884e:	f7fe f895 	bl	800697c <_malloc_r>
 8008852:	4606      	mov	r6, r0
 8008854:	b950      	cbnz	r0, 800886c <__ssputs_r+0x5c>
 8008856:	230c      	movs	r3, #12
 8008858:	f8ca 3000 	str.w	r3, [sl]
 800885c:	89a3      	ldrh	r3, [r4, #12]
 800885e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008862:	81a3      	strh	r3, [r4, #12]
 8008864:	f04f 30ff 	mov.w	r0, #4294967295
 8008868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886c:	6921      	ldr	r1, [r4, #16]
 800886e:	464a      	mov	r2, r9
 8008870:	f7fd ffec 	bl	800684c <memcpy>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800887a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	6126      	str	r6, [r4, #16]
 8008882:	6165      	str	r5, [r4, #20]
 8008884:	444e      	add	r6, r9
 8008886:	eba5 0509 	sub.w	r5, r5, r9
 800888a:	6026      	str	r6, [r4, #0]
 800888c:	60a5      	str	r5, [r4, #8]
 800888e:	463e      	mov	r6, r7
 8008890:	42be      	cmp	r6, r7
 8008892:	d900      	bls.n	8008896 <__ssputs_r+0x86>
 8008894:	463e      	mov	r6, r7
 8008896:	6820      	ldr	r0, [r4, #0]
 8008898:	4632      	mov	r2, r6
 800889a:	4641      	mov	r1, r8
 800889c:	f000 fb4c 	bl	8008f38 <memmove>
 80088a0:	68a3      	ldr	r3, [r4, #8]
 80088a2:	1b9b      	subs	r3, r3, r6
 80088a4:	60a3      	str	r3, [r4, #8]
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	4433      	add	r3, r6
 80088aa:	6023      	str	r3, [r4, #0]
 80088ac:	2000      	movs	r0, #0
 80088ae:	e7db      	b.n	8008868 <__ssputs_r+0x58>
 80088b0:	462a      	mov	r2, r5
 80088b2:	f000 fb5b 	bl	8008f6c <_realloc_r>
 80088b6:	4606      	mov	r6, r0
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d1e1      	bne.n	8008880 <__ssputs_r+0x70>
 80088bc:	6921      	ldr	r1, [r4, #16]
 80088be:	4650      	mov	r0, sl
 80088c0:	f7fd fff0 	bl	80068a4 <_free_r>
 80088c4:	e7c7      	b.n	8008856 <__ssputs_r+0x46>
	...

080088c8 <_svfiprintf_r>:
 80088c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088cc:	4698      	mov	r8, r3
 80088ce:	898b      	ldrh	r3, [r1, #12]
 80088d0:	061b      	lsls	r3, r3, #24
 80088d2:	b09d      	sub	sp, #116	; 0x74
 80088d4:	4607      	mov	r7, r0
 80088d6:	460d      	mov	r5, r1
 80088d8:	4614      	mov	r4, r2
 80088da:	d50e      	bpl.n	80088fa <_svfiprintf_r+0x32>
 80088dc:	690b      	ldr	r3, [r1, #16]
 80088de:	b963      	cbnz	r3, 80088fa <_svfiprintf_r+0x32>
 80088e0:	2140      	movs	r1, #64	; 0x40
 80088e2:	f7fe f84b 	bl	800697c <_malloc_r>
 80088e6:	6028      	str	r0, [r5, #0]
 80088e8:	6128      	str	r0, [r5, #16]
 80088ea:	b920      	cbnz	r0, 80088f6 <_svfiprintf_r+0x2e>
 80088ec:	230c      	movs	r3, #12
 80088ee:	603b      	str	r3, [r7, #0]
 80088f0:	f04f 30ff 	mov.w	r0, #4294967295
 80088f4:	e0d1      	b.n	8008a9a <_svfiprintf_r+0x1d2>
 80088f6:	2340      	movs	r3, #64	; 0x40
 80088f8:	616b      	str	r3, [r5, #20]
 80088fa:	2300      	movs	r3, #0
 80088fc:	9309      	str	r3, [sp, #36]	; 0x24
 80088fe:	2320      	movs	r3, #32
 8008900:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008904:	f8cd 800c 	str.w	r8, [sp, #12]
 8008908:	2330      	movs	r3, #48	; 0x30
 800890a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ab4 <_svfiprintf_r+0x1ec>
 800890e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008912:	f04f 0901 	mov.w	r9, #1
 8008916:	4623      	mov	r3, r4
 8008918:	469a      	mov	sl, r3
 800891a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800891e:	b10a      	cbz	r2, 8008924 <_svfiprintf_r+0x5c>
 8008920:	2a25      	cmp	r2, #37	; 0x25
 8008922:	d1f9      	bne.n	8008918 <_svfiprintf_r+0x50>
 8008924:	ebba 0b04 	subs.w	fp, sl, r4
 8008928:	d00b      	beq.n	8008942 <_svfiprintf_r+0x7a>
 800892a:	465b      	mov	r3, fp
 800892c:	4622      	mov	r2, r4
 800892e:	4629      	mov	r1, r5
 8008930:	4638      	mov	r0, r7
 8008932:	f7ff ff6d 	bl	8008810 <__ssputs_r>
 8008936:	3001      	adds	r0, #1
 8008938:	f000 80aa 	beq.w	8008a90 <_svfiprintf_r+0x1c8>
 800893c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800893e:	445a      	add	r2, fp
 8008940:	9209      	str	r2, [sp, #36]	; 0x24
 8008942:	f89a 3000 	ldrb.w	r3, [sl]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 80a2 	beq.w	8008a90 <_svfiprintf_r+0x1c8>
 800894c:	2300      	movs	r3, #0
 800894e:	f04f 32ff 	mov.w	r2, #4294967295
 8008952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008956:	f10a 0a01 	add.w	sl, sl, #1
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	9307      	str	r3, [sp, #28]
 800895e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008962:	931a      	str	r3, [sp, #104]	; 0x68
 8008964:	4654      	mov	r4, sl
 8008966:	2205      	movs	r2, #5
 8008968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896c:	4851      	ldr	r0, [pc, #324]	; (8008ab4 <_svfiprintf_r+0x1ec>)
 800896e:	f7f7 fc6f 	bl	8000250 <memchr>
 8008972:	9a04      	ldr	r2, [sp, #16]
 8008974:	b9d8      	cbnz	r0, 80089ae <_svfiprintf_r+0xe6>
 8008976:	06d0      	lsls	r0, r2, #27
 8008978:	bf44      	itt	mi
 800897a:	2320      	movmi	r3, #32
 800897c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008980:	0711      	lsls	r1, r2, #28
 8008982:	bf44      	itt	mi
 8008984:	232b      	movmi	r3, #43	; 0x2b
 8008986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800898a:	f89a 3000 	ldrb.w	r3, [sl]
 800898e:	2b2a      	cmp	r3, #42	; 0x2a
 8008990:	d015      	beq.n	80089be <_svfiprintf_r+0xf6>
 8008992:	9a07      	ldr	r2, [sp, #28]
 8008994:	4654      	mov	r4, sl
 8008996:	2000      	movs	r0, #0
 8008998:	f04f 0c0a 	mov.w	ip, #10
 800899c:	4621      	mov	r1, r4
 800899e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089a2:	3b30      	subs	r3, #48	; 0x30
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	d94e      	bls.n	8008a46 <_svfiprintf_r+0x17e>
 80089a8:	b1b0      	cbz	r0, 80089d8 <_svfiprintf_r+0x110>
 80089aa:	9207      	str	r2, [sp, #28]
 80089ac:	e014      	b.n	80089d8 <_svfiprintf_r+0x110>
 80089ae:	eba0 0308 	sub.w	r3, r0, r8
 80089b2:	fa09 f303 	lsl.w	r3, r9, r3
 80089b6:	4313      	orrs	r3, r2
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	46a2      	mov	sl, r4
 80089bc:	e7d2      	b.n	8008964 <_svfiprintf_r+0x9c>
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	1d19      	adds	r1, r3, #4
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	9103      	str	r1, [sp, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bfbb      	ittet	lt
 80089ca:	425b      	neglt	r3, r3
 80089cc:	f042 0202 	orrlt.w	r2, r2, #2
 80089d0:	9307      	strge	r3, [sp, #28]
 80089d2:	9307      	strlt	r3, [sp, #28]
 80089d4:	bfb8      	it	lt
 80089d6:	9204      	strlt	r2, [sp, #16]
 80089d8:	7823      	ldrb	r3, [r4, #0]
 80089da:	2b2e      	cmp	r3, #46	; 0x2e
 80089dc:	d10c      	bne.n	80089f8 <_svfiprintf_r+0x130>
 80089de:	7863      	ldrb	r3, [r4, #1]
 80089e0:	2b2a      	cmp	r3, #42	; 0x2a
 80089e2:	d135      	bne.n	8008a50 <_svfiprintf_r+0x188>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	1d1a      	adds	r2, r3, #4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	9203      	str	r2, [sp, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bfb8      	it	lt
 80089f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80089f4:	3402      	adds	r4, #2
 80089f6:	9305      	str	r3, [sp, #20]
 80089f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ac4 <_svfiprintf_r+0x1fc>
 80089fc:	7821      	ldrb	r1, [r4, #0]
 80089fe:	2203      	movs	r2, #3
 8008a00:	4650      	mov	r0, sl
 8008a02:	f7f7 fc25 	bl	8000250 <memchr>
 8008a06:	b140      	cbz	r0, 8008a1a <_svfiprintf_r+0x152>
 8008a08:	2340      	movs	r3, #64	; 0x40
 8008a0a:	eba0 000a 	sub.w	r0, r0, sl
 8008a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a12:	9b04      	ldr	r3, [sp, #16]
 8008a14:	4303      	orrs	r3, r0
 8008a16:	3401      	adds	r4, #1
 8008a18:	9304      	str	r3, [sp, #16]
 8008a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1e:	4826      	ldr	r0, [pc, #152]	; (8008ab8 <_svfiprintf_r+0x1f0>)
 8008a20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a24:	2206      	movs	r2, #6
 8008a26:	f7f7 fc13 	bl	8000250 <memchr>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d038      	beq.n	8008aa0 <_svfiprintf_r+0x1d8>
 8008a2e:	4b23      	ldr	r3, [pc, #140]	; (8008abc <_svfiprintf_r+0x1f4>)
 8008a30:	bb1b      	cbnz	r3, 8008a7a <_svfiprintf_r+0x1b2>
 8008a32:	9b03      	ldr	r3, [sp, #12]
 8008a34:	3307      	adds	r3, #7
 8008a36:	f023 0307 	bic.w	r3, r3, #7
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	9303      	str	r3, [sp, #12]
 8008a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a40:	4433      	add	r3, r6
 8008a42:	9309      	str	r3, [sp, #36]	; 0x24
 8008a44:	e767      	b.n	8008916 <_svfiprintf_r+0x4e>
 8008a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	2001      	movs	r0, #1
 8008a4e:	e7a5      	b.n	800899c <_svfiprintf_r+0xd4>
 8008a50:	2300      	movs	r3, #0
 8008a52:	3401      	adds	r4, #1
 8008a54:	9305      	str	r3, [sp, #20]
 8008a56:	4619      	mov	r1, r3
 8008a58:	f04f 0c0a 	mov.w	ip, #10
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a62:	3a30      	subs	r2, #48	; 0x30
 8008a64:	2a09      	cmp	r2, #9
 8008a66:	d903      	bls.n	8008a70 <_svfiprintf_r+0x1a8>
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0c5      	beq.n	80089f8 <_svfiprintf_r+0x130>
 8008a6c:	9105      	str	r1, [sp, #20]
 8008a6e:	e7c3      	b.n	80089f8 <_svfiprintf_r+0x130>
 8008a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a74:	4604      	mov	r4, r0
 8008a76:	2301      	movs	r3, #1
 8008a78:	e7f0      	b.n	8008a5c <_svfiprintf_r+0x194>
 8008a7a:	ab03      	add	r3, sp, #12
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	462a      	mov	r2, r5
 8008a80:	4b0f      	ldr	r3, [pc, #60]	; (8008ac0 <_svfiprintf_r+0x1f8>)
 8008a82:	a904      	add	r1, sp, #16
 8008a84:	4638      	mov	r0, r7
 8008a86:	f7fe f87f 	bl	8006b88 <_printf_float>
 8008a8a:	1c42      	adds	r2, r0, #1
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	d1d6      	bne.n	8008a3e <_svfiprintf_r+0x176>
 8008a90:	89ab      	ldrh	r3, [r5, #12]
 8008a92:	065b      	lsls	r3, r3, #25
 8008a94:	f53f af2c 	bmi.w	80088f0 <_svfiprintf_r+0x28>
 8008a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a9a:	b01d      	add	sp, #116	; 0x74
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa0:	ab03      	add	r3, sp, #12
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <_svfiprintf_r+0x1f8>)
 8008aa8:	a904      	add	r1, sp, #16
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f7fe faf8 	bl	80070a0 <_printf_i>
 8008ab0:	e7eb      	b.n	8008a8a <_svfiprintf_r+0x1c2>
 8008ab2:	bf00      	nop
 8008ab4:	0800ac4c 	.word	0x0800ac4c
 8008ab8:	0800ac56 	.word	0x0800ac56
 8008abc:	08006b89 	.word	0x08006b89
 8008ac0:	08008811 	.word	0x08008811
 8008ac4:	0800ac52 	.word	0x0800ac52

08008ac8 <_read_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4d07      	ldr	r5, [pc, #28]	; (8008ae8 <_read_r+0x20>)
 8008acc:	4604      	mov	r4, r0
 8008ace:	4608      	mov	r0, r1
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	602a      	str	r2, [r5, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f000 fda8 	bl	800962c <_read>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	d102      	bne.n	8008ae6 <_read_r+0x1e>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	b103      	cbz	r3, 8008ae6 <_read_r+0x1e>
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	20004820 	.word	0x20004820

08008aec <__fpclassifyd>:
 8008aec:	ec51 0b10 	vmov	r0, r1, d0
 8008af0:	b510      	push	{r4, lr}
 8008af2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8008af6:	460b      	mov	r3, r1
 8008af8:	d019      	beq.n	8008b2e <__fpclassifyd+0x42>
 8008afa:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8008afe:	490e      	ldr	r1, [pc, #56]	; (8008b38 <__fpclassifyd+0x4c>)
 8008b00:	428a      	cmp	r2, r1
 8008b02:	d90e      	bls.n	8008b22 <__fpclassifyd+0x36>
 8008b04:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8008b08:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8008b0c:	428a      	cmp	r2, r1
 8008b0e:	d908      	bls.n	8008b22 <__fpclassifyd+0x36>
 8008b10:	4a0a      	ldr	r2, [pc, #40]	; (8008b3c <__fpclassifyd+0x50>)
 8008b12:	4213      	tst	r3, r2
 8008b14:	d007      	beq.n	8008b26 <__fpclassifyd+0x3a>
 8008b16:	4294      	cmp	r4, r2
 8008b18:	d107      	bne.n	8008b2a <__fpclassifyd+0x3e>
 8008b1a:	fab0 f080 	clz	r0, r0
 8008b1e:	0940      	lsrs	r0, r0, #5
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	2004      	movs	r0, #4
 8008b24:	e7fc      	b.n	8008b20 <__fpclassifyd+0x34>
 8008b26:	2003      	movs	r0, #3
 8008b28:	e7fa      	b.n	8008b20 <__fpclassifyd+0x34>
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	e7f8      	b.n	8008b20 <__fpclassifyd+0x34>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d1ee      	bne.n	8008b10 <__fpclassifyd+0x24>
 8008b32:	2002      	movs	r0, #2
 8008b34:	e7f4      	b.n	8008b20 <__fpclassifyd+0x34>
 8008b36:	bf00      	nop
 8008b38:	7fdfffff 	.word	0x7fdfffff
 8008b3c:	7ff00000 	.word	0x7ff00000

08008b40 <__assert_func>:
 8008b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b42:	4614      	mov	r4, r2
 8008b44:	461a      	mov	r2, r3
 8008b46:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <__assert_func+0x2c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	68d8      	ldr	r0, [r3, #12]
 8008b4e:	b14c      	cbz	r4, 8008b64 <__assert_func+0x24>
 8008b50:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <__assert_func+0x30>)
 8008b52:	9100      	str	r1, [sp, #0]
 8008b54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b58:	4906      	ldr	r1, [pc, #24]	; (8008b74 <__assert_func+0x34>)
 8008b5a:	462b      	mov	r3, r5
 8008b5c:	f000 f9a6 	bl	8008eac <fiprintf>
 8008b60:	f000 fc5a 	bl	8009418 <abort>
 8008b64:	4b04      	ldr	r3, [pc, #16]	; (8008b78 <__assert_func+0x38>)
 8008b66:	461c      	mov	r4, r3
 8008b68:	e7f3      	b.n	8008b52 <__assert_func+0x12>
 8008b6a:	bf00      	nop
 8008b6c:	20000028 	.word	0x20000028
 8008b70:	0800ac5d 	.word	0x0800ac5d
 8008b74:	0800ac6a 	.word	0x0800ac6a
 8008b78:	0800ac98 	.word	0x0800ac98

08008b7c <__sflush_r>:
 8008b7c:	898a      	ldrh	r2, [r1, #12]
 8008b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b82:	4605      	mov	r5, r0
 8008b84:	0710      	lsls	r0, r2, #28
 8008b86:	460c      	mov	r4, r1
 8008b88:	d458      	bmi.n	8008c3c <__sflush_r+0xc0>
 8008b8a:	684b      	ldr	r3, [r1, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dc05      	bgt.n	8008b9c <__sflush_r+0x20>
 8008b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	dc02      	bgt.n	8008b9c <__sflush_r+0x20>
 8008b96:	2000      	movs	r0, #0
 8008b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	d0f9      	beq.n	8008b96 <__sflush_r+0x1a>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ba8:	682f      	ldr	r7, [r5, #0]
 8008baa:	602b      	str	r3, [r5, #0]
 8008bac:	d032      	beq.n	8008c14 <__sflush_r+0x98>
 8008bae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	075a      	lsls	r2, r3, #29
 8008bb4:	d505      	bpl.n	8008bc2 <__sflush_r+0x46>
 8008bb6:	6863      	ldr	r3, [r4, #4]
 8008bb8:	1ac0      	subs	r0, r0, r3
 8008bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bbc:	b10b      	cbz	r3, 8008bc2 <__sflush_r+0x46>
 8008bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bc0:	1ac0      	subs	r0, r0, r3
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bc8:	6a21      	ldr	r1, [r4, #32]
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b0      	blx	r6
 8008bce:	1c43      	adds	r3, r0, #1
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	d106      	bne.n	8008be2 <__sflush_r+0x66>
 8008bd4:	6829      	ldr	r1, [r5, #0]
 8008bd6:	291d      	cmp	r1, #29
 8008bd8:	d82c      	bhi.n	8008c34 <__sflush_r+0xb8>
 8008bda:	4a2a      	ldr	r2, [pc, #168]	; (8008c84 <__sflush_r+0x108>)
 8008bdc:	40ca      	lsrs	r2, r1
 8008bde:	07d6      	lsls	r6, r2, #31
 8008be0:	d528      	bpl.n	8008c34 <__sflush_r+0xb8>
 8008be2:	2200      	movs	r2, #0
 8008be4:	6062      	str	r2, [r4, #4]
 8008be6:	04d9      	lsls	r1, r3, #19
 8008be8:	6922      	ldr	r2, [r4, #16]
 8008bea:	6022      	str	r2, [r4, #0]
 8008bec:	d504      	bpl.n	8008bf8 <__sflush_r+0x7c>
 8008bee:	1c42      	adds	r2, r0, #1
 8008bf0:	d101      	bne.n	8008bf6 <__sflush_r+0x7a>
 8008bf2:	682b      	ldr	r3, [r5, #0]
 8008bf4:	b903      	cbnz	r3, 8008bf8 <__sflush_r+0x7c>
 8008bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8008bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bfa:	602f      	str	r7, [r5, #0]
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d0ca      	beq.n	8008b96 <__sflush_r+0x1a>
 8008c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c04:	4299      	cmp	r1, r3
 8008c06:	d002      	beq.n	8008c0e <__sflush_r+0x92>
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f7fd fe4b 	bl	80068a4 <_free_r>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	6360      	str	r0, [r4, #52]	; 0x34
 8008c12:	e7c1      	b.n	8008b98 <__sflush_r+0x1c>
 8008c14:	6a21      	ldr	r1, [r4, #32]
 8008c16:	2301      	movs	r3, #1
 8008c18:	4628      	mov	r0, r5
 8008c1a:	47b0      	blx	r6
 8008c1c:	1c41      	adds	r1, r0, #1
 8008c1e:	d1c7      	bne.n	8008bb0 <__sflush_r+0x34>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0c4      	beq.n	8008bb0 <__sflush_r+0x34>
 8008c26:	2b1d      	cmp	r3, #29
 8008c28:	d001      	beq.n	8008c2e <__sflush_r+0xb2>
 8008c2a:	2b16      	cmp	r3, #22
 8008c2c:	d101      	bne.n	8008c32 <__sflush_r+0xb6>
 8008c2e:	602f      	str	r7, [r5, #0]
 8008c30:	e7b1      	b.n	8008b96 <__sflush_r+0x1a>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	e7ad      	b.n	8008b98 <__sflush_r+0x1c>
 8008c3c:	690f      	ldr	r7, [r1, #16]
 8008c3e:	2f00      	cmp	r7, #0
 8008c40:	d0a9      	beq.n	8008b96 <__sflush_r+0x1a>
 8008c42:	0793      	lsls	r3, r2, #30
 8008c44:	680e      	ldr	r6, [r1, #0]
 8008c46:	bf08      	it	eq
 8008c48:	694b      	ldreq	r3, [r1, #20]
 8008c4a:	600f      	str	r7, [r1, #0]
 8008c4c:	bf18      	it	ne
 8008c4e:	2300      	movne	r3, #0
 8008c50:	eba6 0807 	sub.w	r8, r6, r7
 8008c54:	608b      	str	r3, [r1, #8]
 8008c56:	f1b8 0f00 	cmp.w	r8, #0
 8008c5a:	dd9c      	ble.n	8008b96 <__sflush_r+0x1a>
 8008c5c:	6a21      	ldr	r1, [r4, #32]
 8008c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c60:	4643      	mov	r3, r8
 8008c62:	463a      	mov	r2, r7
 8008c64:	4628      	mov	r0, r5
 8008c66:	47b0      	blx	r6
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	dc06      	bgt.n	8008c7a <__sflush_r+0xfe>
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295
 8008c78:	e78e      	b.n	8008b98 <__sflush_r+0x1c>
 8008c7a:	4407      	add	r7, r0
 8008c7c:	eba8 0800 	sub.w	r8, r8, r0
 8008c80:	e7e9      	b.n	8008c56 <__sflush_r+0xda>
 8008c82:	bf00      	nop
 8008c84:	20400001 	.word	0x20400001

08008c88 <_fflush_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	690b      	ldr	r3, [r1, #16]
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	b913      	cbnz	r3, 8008c98 <_fflush_r+0x10>
 8008c92:	2500      	movs	r5, #0
 8008c94:	4628      	mov	r0, r5
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	b118      	cbz	r0, 8008ca2 <_fflush_r+0x1a>
 8008c9a:	6983      	ldr	r3, [r0, #24]
 8008c9c:	b90b      	cbnz	r3, 8008ca2 <_fflush_r+0x1a>
 8008c9e:	f000 f887 	bl	8008db0 <__sinit>
 8008ca2:	4b14      	ldr	r3, [pc, #80]	; (8008cf4 <_fflush_r+0x6c>)
 8008ca4:	429c      	cmp	r4, r3
 8008ca6:	d11b      	bne.n	8008ce0 <_fflush_r+0x58>
 8008ca8:	686c      	ldr	r4, [r5, #4]
 8008caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0ef      	beq.n	8008c92 <_fflush_r+0xa>
 8008cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cb4:	07d0      	lsls	r0, r2, #31
 8008cb6:	d404      	bmi.n	8008cc2 <_fflush_r+0x3a>
 8008cb8:	0599      	lsls	r1, r3, #22
 8008cba:	d402      	bmi.n	8008cc2 <_fflush_r+0x3a>
 8008cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cbe:	f000 f927 	bl	8008f10 <__retarget_lock_acquire_recursive>
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	f7ff ff59 	bl	8008b7c <__sflush_r>
 8008cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ccc:	07da      	lsls	r2, r3, #31
 8008cce:	4605      	mov	r5, r0
 8008cd0:	d4e0      	bmi.n	8008c94 <_fflush_r+0xc>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	059b      	lsls	r3, r3, #22
 8008cd6:	d4dd      	bmi.n	8008c94 <_fflush_r+0xc>
 8008cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cda:	f000 f91a 	bl	8008f12 <__retarget_lock_release_recursive>
 8008cde:	e7d9      	b.n	8008c94 <_fflush_r+0xc>
 8008ce0:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <_fflush_r+0x70>)
 8008ce2:	429c      	cmp	r4, r3
 8008ce4:	d101      	bne.n	8008cea <_fflush_r+0x62>
 8008ce6:	68ac      	ldr	r4, [r5, #8]
 8008ce8:	e7df      	b.n	8008caa <_fflush_r+0x22>
 8008cea:	4b04      	ldr	r3, [pc, #16]	; (8008cfc <_fflush_r+0x74>)
 8008cec:	429c      	cmp	r4, r3
 8008cee:	bf08      	it	eq
 8008cf0:	68ec      	ldreq	r4, [r5, #12]
 8008cf2:	e7da      	b.n	8008caa <_fflush_r+0x22>
 8008cf4:	0800adbc 	.word	0x0800adbc
 8008cf8:	0800addc 	.word	0x0800addc
 8008cfc:	0800ad9c 	.word	0x0800ad9c

08008d00 <std>:
 8008d00:	2300      	movs	r3, #0
 8008d02:	b510      	push	{r4, lr}
 8008d04:	4604      	mov	r4, r0
 8008d06:	e9c0 3300 	strd	r3, r3, [r0]
 8008d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d0e:	6083      	str	r3, [r0, #8]
 8008d10:	8181      	strh	r1, [r0, #12]
 8008d12:	6643      	str	r3, [r0, #100]	; 0x64
 8008d14:	81c2      	strh	r2, [r0, #14]
 8008d16:	6183      	str	r3, [r0, #24]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	2208      	movs	r2, #8
 8008d1c:	305c      	adds	r0, #92	; 0x5c
 8008d1e:	f7fd fda3 	bl	8006868 <memset>
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <std+0x38>)
 8008d24:	6263      	str	r3, [r4, #36]	; 0x24
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <std+0x3c>)
 8008d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <std+0x40>)
 8008d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d2e:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <std+0x44>)
 8008d30:	6224      	str	r4, [r4, #32]
 8008d32:	6323      	str	r3, [r4, #48]	; 0x30
 8008d34:	bd10      	pop	{r4, pc}
 8008d36:	bf00      	nop
 8008d38:	08007401 	.word	0x08007401
 8008d3c:	08007423 	.word	0x08007423
 8008d40:	0800745b 	.word	0x0800745b
 8008d44:	0800747f 	.word	0x0800747f

08008d48 <_cleanup_r>:
 8008d48:	4901      	ldr	r1, [pc, #4]	; (8008d50 <_cleanup_r+0x8>)
 8008d4a:	f000 b8c1 	b.w	8008ed0 <_fwalk_reent>
 8008d4e:	bf00      	nop
 8008d50:	08008c89 	.word	0x08008c89

08008d54 <__sfmoreglue>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	2268      	movs	r2, #104	; 0x68
 8008d58:	1e4d      	subs	r5, r1, #1
 8008d5a:	4355      	muls	r5, r2
 8008d5c:	460e      	mov	r6, r1
 8008d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d62:	f7fd fe0b 	bl	800697c <_malloc_r>
 8008d66:	4604      	mov	r4, r0
 8008d68:	b140      	cbz	r0, 8008d7c <__sfmoreglue+0x28>
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8008d70:	300c      	adds	r0, #12
 8008d72:	60a0      	str	r0, [r4, #8]
 8008d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d78:	f7fd fd76 	bl	8006868 <memset>
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}

08008d80 <__sfp_lock_acquire>:
 8008d80:	4801      	ldr	r0, [pc, #4]	; (8008d88 <__sfp_lock_acquire+0x8>)
 8008d82:	f000 b8c5 	b.w	8008f10 <__retarget_lock_acquire_recursive>
 8008d86:	bf00      	nop
 8008d88:	20004825 	.word	0x20004825

08008d8c <__sfp_lock_release>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	; (8008d94 <__sfp_lock_release+0x8>)
 8008d8e:	f000 b8c0 	b.w	8008f12 <__retarget_lock_release_recursive>
 8008d92:	bf00      	nop
 8008d94:	20004825 	.word	0x20004825

08008d98 <__sinit_lock_acquire>:
 8008d98:	4801      	ldr	r0, [pc, #4]	; (8008da0 <__sinit_lock_acquire+0x8>)
 8008d9a:	f000 b8b9 	b.w	8008f10 <__retarget_lock_acquire_recursive>
 8008d9e:	bf00      	nop
 8008da0:	20004826 	.word	0x20004826

08008da4 <__sinit_lock_release>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__sinit_lock_release+0x8>)
 8008da6:	f000 b8b4 	b.w	8008f12 <__retarget_lock_release_recursive>
 8008daa:	bf00      	nop
 8008dac:	20004826 	.word	0x20004826

08008db0 <__sinit>:
 8008db0:	b510      	push	{r4, lr}
 8008db2:	4604      	mov	r4, r0
 8008db4:	f7ff fff0 	bl	8008d98 <__sinit_lock_acquire>
 8008db8:	69a3      	ldr	r3, [r4, #24]
 8008dba:	b11b      	cbz	r3, 8008dc4 <__sinit+0x14>
 8008dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc0:	f7ff bff0 	b.w	8008da4 <__sinit_lock_release>
 8008dc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dc8:	6523      	str	r3, [r4, #80]	; 0x50
 8008dca:	4b13      	ldr	r3, [pc, #76]	; (8008e18 <__sinit+0x68>)
 8008dcc:	4a13      	ldr	r2, [pc, #76]	; (8008e1c <__sinit+0x6c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dd2:	42a3      	cmp	r3, r4
 8008dd4:	bf04      	itt	eq
 8008dd6:	2301      	moveq	r3, #1
 8008dd8:	61a3      	streq	r3, [r4, #24]
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f000 f820 	bl	8008e20 <__sfp>
 8008de0:	6060      	str	r0, [r4, #4]
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f81c 	bl	8008e20 <__sfp>
 8008de8:	60a0      	str	r0, [r4, #8]
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 f818 	bl	8008e20 <__sfp>
 8008df0:	2200      	movs	r2, #0
 8008df2:	60e0      	str	r0, [r4, #12]
 8008df4:	2104      	movs	r1, #4
 8008df6:	6860      	ldr	r0, [r4, #4]
 8008df8:	f7ff ff82 	bl	8008d00 <std>
 8008dfc:	68a0      	ldr	r0, [r4, #8]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	2109      	movs	r1, #9
 8008e02:	f7ff ff7d 	bl	8008d00 <std>
 8008e06:	68e0      	ldr	r0, [r4, #12]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	2112      	movs	r1, #18
 8008e0c:	f7ff ff78 	bl	8008d00 <std>
 8008e10:	2301      	movs	r3, #1
 8008e12:	61a3      	str	r3, [r4, #24]
 8008e14:	e7d2      	b.n	8008dbc <__sinit+0xc>
 8008e16:	bf00      	nop
 8008e18:	0800aa28 	.word	0x0800aa28
 8008e1c:	08008d49 	.word	0x08008d49

08008e20 <__sfp>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	4607      	mov	r7, r0
 8008e24:	f7ff ffac 	bl	8008d80 <__sfp_lock_acquire>
 8008e28:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <__sfp+0x84>)
 8008e2a:	681e      	ldr	r6, [r3, #0]
 8008e2c:	69b3      	ldr	r3, [r6, #24]
 8008e2e:	b913      	cbnz	r3, 8008e36 <__sfp+0x16>
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7ff ffbd 	bl	8008db0 <__sinit>
 8008e36:	3648      	adds	r6, #72	; 0x48
 8008e38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	d503      	bpl.n	8008e48 <__sfp+0x28>
 8008e40:	6833      	ldr	r3, [r6, #0]
 8008e42:	b30b      	cbz	r3, 8008e88 <__sfp+0x68>
 8008e44:	6836      	ldr	r6, [r6, #0]
 8008e46:	e7f7      	b.n	8008e38 <__sfp+0x18>
 8008e48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e4c:	b9d5      	cbnz	r5, 8008e84 <__sfp+0x64>
 8008e4e:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <__sfp+0x88>)
 8008e50:	60e3      	str	r3, [r4, #12]
 8008e52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e56:	6665      	str	r5, [r4, #100]	; 0x64
 8008e58:	f000 f859 	bl	8008f0e <__retarget_lock_init_recursive>
 8008e5c:	f7ff ff96 	bl	8008d8c <__sfp_lock_release>
 8008e60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e68:	6025      	str	r5, [r4, #0]
 8008e6a:	61a5      	str	r5, [r4, #24]
 8008e6c:	2208      	movs	r2, #8
 8008e6e:	4629      	mov	r1, r5
 8008e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e74:	f7fd fcf8 	bl	8006868 <memset>
 8008e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e80:	4620      	mov	r0, r4
 8008e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e84:	3468      	adds	r4, #104	; 0x68
 8008e86:	e7d9      	b.n	8008e3c <__sfp+0x1c>
 8008e88:	2104      	movs	r1, #4
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	f7ff ff62 	bl	8008d54 <__sfmoreglue>
 8008e90:	4604      	mov	r4, r0
 8008e92:	6030      	str	r0, [r6, #0]
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d1d5      	bne.n	8008e44 <__sfp+0x24>
 8008e98:	f7ff ff78 	bl	8008d8c <__sfp_lock_release>
 8008e9c:	230c      	movs	r3, #12
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	e7ee      	b.n	8008e80 <__sfp+0x60>
 8008ea2:	bf00      	nop
 8008ea4:	0800aa28 	.word	0x0800aa28
 8008ea8:	ffff0001 	.word	0xffff0001

08008eac <fiprintf>:
 8008eac:	b40e      	push	{r1, r2, r3}
 8008eae:	b503      	push	{r0, r1, lr}
 8008eb0:	4601      	mov	r1, r0
 8008eb2:	ab03      	add	r3, sp, #12
 8008eb4:	4805      	ldr	r0, [pc, #20]	; (8008ecc <fiprintf+0x20>)
 8008eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eba:	6800      	ldr	r0, [r0, #0]
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	f000 f8ad 	bl	800901c <_vfiprintf_r>
 8008ec2:	b002      	add	sp, #8
 8008ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec8:	b003      	add	sp, #12
 8008eca:	4770      	bx	lr
 8008ecc:	20000028 	.word	0x20000028

08008ed0 <_fwalk_reent>:
 8008ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	4688      	mov	r8, r1
 8008ed8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008edc:	2700      	movs	r7, #0
 8008ede:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ee2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ee6:	d505      	bpl.n	8008ef4 <_fwalk_reent+0x24>
 8008ee8:	6824      	ldr	r4, [r4, #0]
 8008eea:	2c00      	cmp	r4, #0
 8008eec:	d1f7      	bne.n	8008ede <_fwalk_reent+0xe>
 8008eee:	4638      	mov	r0, r7
 8008ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef4:	89ab      	ldrh	r3, [r5, #12]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d907      	bls.n	8008f0a <_fwalk_reent+0x3a>
 8008efa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008efe:	3301      	adds	r3, #1
 8008f00:	d003      	beq.n	8008f0a <_fwalk_reent+0x3a>
 8008f02:	4629      	mov	r1, r5
 8008f04:	4630      	mov	r0, r6
 8008f06:	47c0      	blx	r8
 8008f08:	4307      	orrs	r7, r0
 8008f0a:	3568      	adds	r5, #104	; 0x68
 8008f0c:	e7e9      	b.n	8008ee2 <_fwalk_reent+0x12>

08008f0e <__retarget_lock_init_recursive>:
 8008f0e:	4770      	bx	lr

08008f10 <__retarget_lock_acquire_recursive>:
 8008f10:	4770      	bx	lr

08008f12 <__retarget_lock_release_recursive>:
 8008f12:	4770      	bx	lr

08008f14 <__ascii_mbtowc>:
 8008f14:	b082      	sub	sp, #8
 8008f16:	b901      	cbnz	r1, 8008f1a <__ascii_mbtowc+0x6>
 8008f18:	a901      	add	r1, sp, #4
 8008f1a:	b142      	cbz	r2, 8008f2e <__ascii_mbtowc+0x1a>
 8008f1c:	b14b      	cbz	r3, 8008f32 <__ascii_mbtowc+0x1e>
 8008f1e:	7813      	ldrb	r3, [r2, #0]
 8008f20:	600b      	str	r3, [r1, #0]
 8008f22:	7812      	ldrb	r2, [r2, #0]
 8008f24:	1e10      	subs	r0, r2, #0
 8008f26:	bf18      	it	ne
 8008f28:	2001      	movne	r0, #1
 8008f2a:	b002      	add	sp, #8
 8008f2c:	4770      	bx	lr
 8008f2e:	4610      	mov	r0, r2
 8008f30:	e7fb      	b.n	8008f2a <__ascii_mbtowc+0x16>
 8008f32:	f06f 0001 	mvn.w	r0, #1
 8008f36:	e7f8      	b.n	8008f2a <__ascii_mbtowc+0x16>

08008f38 <memmove>:
 8008f38:	4288      	cmp	r0, r1
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	eb01 0402 	add.w	r4, r1, r2
 8008f40:	d902      	bls.n	8008f48 <memmove+0x10>
 8008f42:	4284      	cmp	r4, r0
 8008f44:	4623      	mov	r3, r4
 8008f46:	d807      	bhi.n	8008f58 <memmove+0x20>
 8008f48:	1e43      	subs	r3, r0, #1
 8008f4a:	42a1      	cmp	r1, r4
 8008f4c:	d008      	beq.n	8008f60 <memmove+0x28>
 8008f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f56:	e7f8      	b.n	8008f4a <memmove+0x12>
 8008f58:	4402      	add	r2, r0
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	428a      	cmp	r2, r1
 8008f5e:	d100      	bne.n	8008f62 <memmove+0x2a>
 8008f60:	bd10      	pop	{r4, pc}
 8008f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f6a:	e7f7      	b.n	8008f5c <memmove+0x24>

08008f6c <_realloc_r>:
 8008f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f70:	4680      	mov	r8, r0
 8008f72:	4614      	mov	r4, r2
 8008f74:	460e      	mov	r6, r1
 8008f76:	b921      	cbnz	r1, 8008f82 <_realloc_r+0x16>
 8008f78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	f7fd bcfd 	b.w	800697c <_malloc_r>
 8008f82:	b92a      	cbnz	r2, 8008f90 <_realloc_r+0x24>
 8008f84:	f7fd fc8e 	bl	80068a4 <_free_r>
 8008f88:	4625      	mov	r5, r4
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f90:	f000 faae 	bl	80094f0 <_malloc_usable_size_r>
 8008f94:	4284      	cmp	r4, r0
 8008f96:	4607      	mov	r7, r0
 8008f98:	d802      	bhi.n	8008fa0 <_realloc_r+0x34>
 8008f9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f9e:	d812      	bhi.n	8008fc6 <_realloc_r+0x5a>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	f7fd fcea 	bl	800697c <_malloc_r>
 8008fa8:	4605      	mov	r5, r0
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d0ed      	beq.n	8008f8a <_realloc_r+0x1e>
 8008fae:	42bc      	cmp	r4, r7
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	bf28      	it	cs
 8008fb6:	463a      	movcs	r2, r7
 8008fb8:	f7fd fc48 	bl	800684c <memcpy>
 8008fbc:	4631      	mov	r1, r6
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	f7fd fc70 	bl	80068a4 <_free_r>
 8008fc4:	e7e1      	b.n	8008f8a <_realloc_r+0x1e>
 8008fc6:	4635      	mov	r5, r6
 8008fc8:	e7df      	b.n	8008f8a <_realloc_r+0x1e>

08008fca <__sfputc_r>:
 8008fca:	6893      	ldr	r3, [r2, #8]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	b410      	push	{r4}
 8008fd2:	6093      	str	r3, [r2, #8]
 8008fd4:	da08      	bge.n	8008fe8 <__sfputc_r+0x1e>
 8008fd6:	6994      	ldr	r4, [r2, #24]
 8008fd8:	42a3      	cmp	r3, r4
 8008fda:	db01      	blt.n	8008fe0 <__sfputc_r+0x16>
 8008fdc:	290a      	cmp	r1, #10
 8008fde:	d103      	bne.n	8008fe8 <__sfputc_r+0x1e>
 8008fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fe4:	f000 b94a 	b.w	800927c <__swbuf_r>
 8008fe8:	6813      	ldr	r3, [r2, #0]
 8008fea:	1c58      	adds	r0, r3, #1
 8008fec:	6010      	str	r0, [r2, #0]
 8008fee:	7019      	strb	r1, [r3, #0]
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <__sfputs_r>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460f      	mov	r7, r1
 8008ffe:	4614      	mov	r4, r2
 8009000:	18d5      	adds	r5, r2, r3
 8009002:	42ac      	cmp	r4, r5
 8009004:	d101      	bne.n	800900a <__sfputs_r+0x12>
 8009006:	2000      	movs	r0, #0
 8009008:	e007      	b.n	800901a <__sfputs_r+0x22>
 800900a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800900e:	463a      	mov	r2, r7
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff ffda 	bl	8008fca <__sfputc_r>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d1f3      	bne.n	8009002 <__sfputs_r+0xa>
 800901a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800901c <_vfiprintf_r>:
 800901c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009020:	460d      	mov	r5, r1
 8009022:	b09d      	sub	sp, #116	; 0x74
 8009024:	4614      	mov	r4, r2
 8009026:	4698      	mov	r8, r3
 8009028:	4606      	mov	r6, r0
 800902a:	b118      	cbz	r0, 8009034 <_vfiprintf_r+0x18>
 800902c:	6983      	ldr	r3, [r0, #24]
 800902e:	b90b      	cbnz	r3, 8009034 <_vfiprintf_r+0x18>
 8009030:	f7ff febe 	bl	8008db0 <__sinit>
 8009034:	4b89      	ldr	r3, [pc, #548]	; (800925c <_vfiprintf_r+0x240>)
 8009036:	429d      	cmp	r5, r3
 8009038:	d11b      	bne.n	8009072 <_vfiprintf_r+0x56>
 800903a:	6875      	ldr	r5, [r6, #4]
 800903c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800903e:	07d9      	lsls	r1, r3, #31
 8009040:	d405      	bmi.n	800904e <_vfiprintf_r+0x32>
 8009042:	89ab      	ldrh	r3, [r5, #12]
 8009044:	059a      	lsls	r2, r3, #22
 8009046:	d402      	bmi.n	800904e <_vfiprintf_r+0x32>
 8009048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800904a:	f7ff ff61 	bl	8008f10 <__retarget_lock_acquire_recursive>
 800904e:	89ab      	ldrh	r3, [r5, #12]
 8009050:	071b      	lsls	r3, r3, #28
 8009052:	d501      	bpl.n	8009058 <_vfiprintf_r+0x3c>
 8009054:	692b      	ldr	r3, [r5, #16]
 8009056:	b9eb      	cbnz	r3, 8009094 <_vfiprintf_r+0x78>
 8009058:	4629      	mov	r1, r5
 800905a:	4630      	mov	r0, r6
 800905c:	f000 f96e 	bl	800933c <__swsetup_r>
 8009060:	b1c0      	cbz	r0, 8009094 <_vfiprintf_r+0x78>
 8009062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009064:	07dc      	lsls	r4, r3, #31
 8009066:	d50e      	bpl.n	8009086 <_vfiprintf_r+0x6a>
 8009068:	f04f 30ff 	mov.w	r0, #4294967295
 800906c:	b01d      	add	sp, #116	; 0x74
 800906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009072:	4b7b      	ldr	r3, [pc, #492]	; (8009260 <_vfiprintf_r+0x244>)
 8009074:	429d      	cmp	r5, r3
 8009076:	d101      	bne.n	800907c <_vfiprintf_r+0x60>
 8009078:	68b5      	ldr	r5, [r6, #8]
 800907a:	e7df      	b.n	800903c <_vfiprintf_r+0x20>
 800907c:	4b79      	ldr	r3, [pc, #484]	; (8009264 <_vfiprintf_r+0x248>)
 800907e:	429d      	cmp	r5, r3
 8009080:	bf08      	it	eq
 8009082:	68f5      	ldreq	r5, [r6, #12]
 8009084:	e7da      	b.n	800903c <_vfiprintf_r+0x20>
 8009086:	89ab      	ldrh	r3, [r5, #12]
 8009088:	0598      	lsls	r0, r3, #22
 800908a:	d4ed      	bmi.n	8009068 <_vfiprintf_r+0x4c>
 800908c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800908e:	f7ff ff40 	bl	8008f12 <__retarget_lock_release_recursive>
 8009092:	e7e9      	b.n	8009068 <_vfiprintf_r+0x4c>
 8009094:	2300      	movs	r3, #0
 8009096:	9309      	str	r3, [sp, #36]	; 0x24
 8009098:	2320      	movs	r3, #32
 800909a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800909e:	f8cd 800c 	str.w	r8, [sp, #12]
 80090a2:	2330      	movs	r3, #48	; 0x30
 80090a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009268 <_vfiprintf_r+0x24c>
 80090a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090ac:	f04f 0901 	mov.w	r9, #1
 80090b0:	4623      	mov	r3, r4
 80090b2:	469a      	mov	sl, r3
 80090b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090b8:	b10a      	cbz	r2, 80090be <_vfiprintf_r+0xa2>
 80090ba:	2a25      	cmp	r2, #37	; 0x25
 80090bc:	d1f9      	bne.n	80090b2 <_vfiprintf_r+0x96>
 80090be:	ebba 0b04 	subs.w	fp, sl, r4
 80090c2:	d00b      	beq.n	80090dc <_vfiprintf_r+0xc0>
 80090c4:	465b      	mov	r3, fp
 80090c6:	4622      	mov	r2, r4
 80090c8:	4629      	mov	r1, r5
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7ff ff94 	bl	8008ff8 <__sfputs_r>
 80090d0:	3001      	adds	r0, #1
 80090d2:	f000 80aa 	beq.w	800922a <_vfiprintf_r+0x20e>
 80090d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090d8:	445a      	add	r2, fp
 80090da:	9209      	str	r2, [sp, #36]	; 0x24
 80090dc:	f89a 3000 	ldrb.w	r3, [sl]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 80a2 	beq.w	800922a <_vfiprintf_r+0x20e>
 80090e6:	2300      	movs	r3, #0
 80090e8:	f04f 32ff 	mov.w	r2, #4294967295
 80090ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f0:	f10a 0a01 	add.w	sl, sl, #1
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	9307      	str	r3, [sp, #28]
 80090f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090fc:	931a      	str	r3, [sp, #104]	; 0x68
 80090fe:	4654      	mov	r4, sl
 8009100:	2205      	movs	r2, #5
 8009102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009106:	4858      	ldr	r0, [pc, #352]	; (8009268 <_vfiprintf_r+0x24c>)
 8009108:	f7f7 f8a2 	bl	8000250 <memchr>
 800910c:	9a04      	ldr	r2, [sp, #16]
 800910e:	b9d8      	cbnz	r0, 8009148 <_vfiprintf_r+0x12c>
 8009110:	06d1      	lsls	r1, r2, #27
 8009112:	bf44      	itt	mi
 8009114:	2320      	movmi	r3, #32
 8009116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800911a:	0713      	lsls	r3, r2, #28
 800911c:	bf44      	itt	mi
 800911e:	232b      	movmi	r3, #43	; 0x2b
 8009120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009124:	f89a 3000 	ldrb.w	r3, [sl]
 8009128:	2b2a      	cmp	r3, #42	; 0x2a
 800912a:	d015      	beq.n	8009158 <_vfiprintf_r+0x13c>
 800912c:	9a07      	ldr	r2, [sp, #28]
 800912e:	4654      	mov	r4, sl
 8009130:	2000      	movs	r0, #0
 8009132:	f04f 0c0a 	mov.w	ip, #10
 8009136:	4621      	mov	r1, r4
 8009138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800913c:	3b30      	subs	r3, #48	; 0x30
 800913e:	2b09      	cmp	r3, #9
 8009140:	d94e      	bls.n	80091e0 <_vfiprintf_r+0x1c4>
 8009142:	b1b0      	cbz	r0, 8009172 <_vfiprintf_r+0x156>
 8009144:	9207      	str	r2, [sp, #28]
 8009146:	e014      	b.n	8009172 <_vfiprintf_r+0x156>
 8009148:	eba0 0308 	sub.w	r3, r0, r8
 800914c:	fa09 f303 	lsl.w	r3, r9, r3
 8009150:	4313      	orrs	r3, r2
 8009152:	9304      	str	r3, [sp, #16]
 8009154:	46a2      	mov	sl, r4
 8009156:	e7d2      	b.n	80090fe <_vfiprintf_r+0xe2>
 8009158:	9b03      	ldr	r3, [sp, #12]
 800915a:	1d19      	adds	r1, r3, #4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	9103      	str	r1, [sp, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfbb      	ittet	lt
 8009164:	425b      	neglt	r3, r3
 8009166:	f042 0202 	orrlt.w	r2, r2, #2
 800916a:	9307      	strge	r3, [sp, #28]
 800916c:	9307      	strlt	r3, [sp, #28]
 800916e:	bfb8      	it	lt
 8009170:	9204      	strlt	r2, [sp, #16]
 8009172:	7823      	ldrb	r3, [r4, #0]
 8009174:	2b2e      	cmp	r3, #46	; 0x2e
 8009176:	d10c      	bne.n	8009192 <_vfiprintf_r+0x176>
 8009178:	7863      	ldrb	r3, [r4, #1]
 800917a:	2b2a      	cmp	r3, #42	; 0x2a
 800917c:	d135      	bne.n	80091ea <_vfiprintf_r+0x1ce>
 800917e:	9b03      	ldr	r3, [sp, #12]
 8009180:	1d1a      	adds	r2, r3, #4
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	9203      	str	r2, [sp, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	bfb8      	it	lt
 800918a:	f04f 33ff 	movlt.w	r3, #4294967295
 800918e:	3402      	adds	r4, #2
 8009190:	9305      	str	r3, [sp, #20]
 8009192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009278 <_vfiprintf_r+0x25c>
 8009196:	7821      	ldrb	r1, [r4, #0]
 8009198:	2203      	movs	r2, #3
 800919a:	4650      	mov	r0, sl
 800919c:	f7f7 f858 	bl	8000250 <memchr>
 80091a0:	b140      	cbz	r0, 80091b4 <_vfiprintf_r+0x198>
 80091a2:	2340      	movs	r3, #64	; 0x40
 80091a4:	eba0 000a 	sub.w	r0, r0, sl
 80091a8:	fa03 f000 	lsl.w	r0, r3, r0
 80091ac:	9b04      	ldr	r3, [sp, #16]
 80091ae:	4303      	orrs	r3, r0
 80091b0:	3401      	adds	r4, #1
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091b8:	482c      	ldr	r0, [pc, #176]	; (800926c <_vfiprintf_r+0x250>)
 80091ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091be:	2206      	movs	r2, #6
 80091c0:	f7f7 f846 	bl	8000250 <memchr>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d03f      	beq.n	8009248 <_vfiprintf_r+0x22c>
 80091c8:	4b29      	ldr	r3, [pc, #164]	; (8009270 <_vfiprintf_r+0x254>)
 80091ca:	bb1b      	cbnz	r3, 8009214 <_vfiprintf_r+0x1f8>
 80091cc:	9b03      	ldr	r3, [sp, #12]
 80091ce:	3307      	adds	r3, #7
 80091d0:	f023 0307 	bic.w	r3, r3, #7
 80091d4:	3308      	adds	r3, #8
 80091d6:	9303      	str	r3, [sp, #12]
 80091d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091da:	443b      	add	r3, r7
 80091dc:	9309      	str	r3, [sp, #36]	; 0x24
 80091de:	e767      	b.n	80090b0 <_vfiprintf_r+0x94>
 80091e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091e4:	460c      	mov	r4, r1
 80091e6:	2001      	movs	r0, #1
 80091e8:	e7a5      	b.n	8009136 <_vfiprintf_r+0x11a>
 80091ea:	2300      	movs	r3, #0
 80091ec:	3401      	adds	r4, #1
 80091ee:	9305      	str	r3, [sp, #20]
 80091f0:	4619      	mov	r1, r3
 80091f2:	f04f 0c0a 	mov.w	ip, #10
 80091f6:	4620      	mov	r0, r4
 80091f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091fc:	3a30      	subs	r2, #48	; 0x30
 80091fe:	2a09      	cmp	r2, #9
 8009200:	d903      	bls.n	800920a <_vfiprintf_r+0x1ee>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0c5      	beq.n	8009192 <_vfiprintf_r+0x176>
 8009206:	9105      	str	r1, [sp, #20]
 8009208:	e7c3      	b.n	8009192 <_vfiprintf_r+0x176>
 800920a:	fb0c 2101 	mla	r1, ip, r1, r2
 800920e:	4604      	mov	r4, r0
 8009210:	2301      	movs	r3, #1
 8009212:	e7f0      	b.n	80091f6 <_vfiprintf_r+0x1da>
 8009214:	ab03      	add	r3, sp, #12
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	462a      	mov	r2, r5
 800921a:	4b16      	ldr	r3, [pc, #88]	; (8009274 <_vfiprintf_r+0x258>)
 800921c:	a904      	add	r1, sp, #16
 800921e:	4630      	mov	r0, r6
 8009220:	f7fd fcb2 	bl	8006b88 <_printf_float>
 8009224:	4607      	mov	r7, r0
 8009226:	1c78      	adds	r0, r7, #1
 8009228:	d1d6      	bne.n	80091d8 <_vfiprintf_r+0x1bc>
 800922a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800922c:	07d9      	lsls	r1, r3, #31
 800922e:	d405      	bmi.n	800923c <_vfiprintf_r+0x220>
 8009230:	89ab      	ldrh	r3, [r5, #12]
 8009232:	059a      	lsls	r2, r3, #22
 8009234:	d402      	bmi.n	800923c <_vfiprintf_r+0x220>
 8009236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009238:	f7ff fe6b 	bl	8008f12 <__retarget_lock_release_recursive>
 800923c:	89ab      	ldrh	r3, [r5, #12]
 800923e:	065b      	lsls	r3, r3, #25
 8009240:	f53f af12 	bmi.w	8009068 <_vfiprintf_r+0x4c>
 8009244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009246:	e711      	b.n	800906c <_vfiprintf_r+0x50>
 8009248:	ab03      	add	r3, sp, #12
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	462a      	mov	r2, r5
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <_vfiprintf_r+0x258>)
 8009250:	a904      	add	r1, sp, #16
 8009252:	4630      	mov	r0, r6
 8009254:	f7fd ff24 	bl	80070a0 <_printf_i>
 8009258:	e7e4      	b.n	8009224 <_vfiprintf_r+0x208>
 800925a:	bf00      	nop
 800925c:	0800adbc 	.word	0x0800adbc
 8009260:	0800addc 	.word	0x0800addc
 8009264:	0800ad9c 	.word	0x0800ad9c
 8009268:	0800ac4c 	.word	0x0800ac4c
 800926c:	0800ac56 	.word	0x0800ac56
 8009270:	08006b89 	.word	0x08006b89
 8009274:	08008ff9 	.word	0x08008ff9
 8009278:	0800ac52 	.word	0x0800ac52

0800927c <__swbuf_r>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	460e      	mov	r6, r1
 8009280:	4614      	mov	r4, r2
 8009282:	4605      	mov	r5, r0
 8009284:	b118      	cbz	r0, 800928e <__swbuf_r+0x12>
 8009286:	6983      	ldr	r3, [r0, #24]
 8009288:	b90b      	cbnz	r3, 800928e <__swbuf_r+0x12>
 800928a:	f7ff fd91 	bl	8008db0 <__sinit>
 800928e:	4b21      	ldr	r3, [pc, #132]	; (8009314 <__swbuf_r+0x98>)
 8009290:	429c      	cmp	r4, r3
 8009292:	d12b      	bne.n	80092ec <__swbuf_r+0x70>
 8009294:	686c      	ldr	r4, [r5, #4]
 8009296:	69a3      	ldr	r3, [r4, #24]
 8009298:	60a3      	str	r3, [r4, #8]
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	071a      	lsls	r2, r3, #28
 800929e:	d52f      	bpl.n	8009300 <__swbuf_r+0x84>
 80092a0:	6923      	ldr	r3, [r4, #16]
 80092a2:	b36b      	cbz	r3, 8009300 <__swbuf_r+0x84>
 80092a4:	6923      	ldr	r3, [r4, #16]
 80092a6:	6820      	ldr	r0, [r4, #0]
 80092a8:	1ac0      	subs	r0, r0, r3
 80092aa:	6963      	ldr	r3, [r4, #20]
 80092ac:	b2f6      	uxtb	r6, r6
 80092ae:	4283      	cmp	r3, r0
 80092b0:	4637      	mov	r7, r6
 80092b2:	dc04      	bgt.n	80092be <__swbuf_r+0x42>
 80092b4:	4621      	mov	r1, r4
 80092b6:	4628      	mov	r0, r5
 80092b8:	f7ff fce6 	bl	8008c88 <_fflush_r>
 80092bc:	bb30      	cbnz	r0, 800930c <__swbuf_r+0x90>
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	3b01      	subs	r3, #1
 80092c2:	60a3      	str	r3, [r4, #8]
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	6022      	str	r2, [r4, #0]
 80092ca:	701e      	strb	r6, [r3, #0]
 80092cc:	6963      	ldr	r3, [r4, #20]
 80092ce:	3001      	adds	r0, #1
 80092d0:	4283      	cmp	r3, r0
 80092d2:	d004      	beq.n	80092de <__swbuf_r+0x62>
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	07db      	lsls	r3, r3, #31
 80092d8:	d506      	bpl.n	80092e8 <__swbuf_r+0x6c>
 80092da:	2e0a      	cmp	r6, #10
 80092dc:	d104      	bne.n	80092e8 <__swbuf_r+0x6c>
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f7ff fcd1 	bl	8008c88 <_fflush_r>
 80092e6:	b988      	cbnz	r0, 800930c <__swbuf_r+0x90>
 80092e8:	4638      	mov	r0, r7
 80092ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ec:	4b0a      	ldr	r3, [pc, #40]	; (8009318 <__swbuf_r+0x9c>)
 80092ee:	429c      	cmp	r4, r3
 80092f0:	d101      	bne.n	80092f6 <__swbuf_r+0x7a>
 80092f2:	68ac      	ldr	r4, [r5, #8]
 80092f4:	e7cf      	b.n	8009296 <__swbuf_r+0x1a>
 80092f6:	4b09      	ldr	r3, [pc, #36]	; (800931c <__swbuf_r+0xa0>)
 80092f8:	429c      	cmp	r4, r3
 80092fa:	bf08      	it	eq
 80092fc:	68ec      	ldreq	r4, [r5, #12]
 80092fe:	e7ca      	b.n	8009296 <__swbuf_r+0x1a>
 8009300:	4621      	mov	r1, r4
 8009302:	4628      	mov	r0, r5
 8009304:	f000 f81a 	bl	800933c <__swsetup_r>
 8009308:	2800      	cmp	r0, #0
 800930a:	d0cb      	beq.n	80092a4 <__swbuf_r+0x28>
 800930c:	f04f 37ff 	mov.w	r7, #4294967295
 8009310:	e7ea      	b.n	80092e8 <__swbuf_r+0x6c>
 8009312:	bf00      	nop
 8009314:	0800adbc 	.word	0x0800adbc
 8009318:	0800addc 	.word	0x0800addc
 800931c:	0800ad9c 	.word	0x0800ad9c

08009320 <__ascii_wctomb>:
 8009320:	b149      	cbz	r1, 8009336 <__ascii_wctomb+0x16>
 8009322:	2aff      	cmp	r2, #255	; 0xff
 8009324:	bf85      	ittet	hi
 8009326:	238a      	movhi	r3, #138	; 0x8a
 8009328:	6003      	strhi	r3, [r0, #0]
 800932a:	700a      	strbls	r2, [r1, #0]
 800932c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009330:	bf98      	it	ls
 8009332:	2001      	movls	r0, #1
 8009334:	4770      	bx	lr
 8009336:	4608      	mov	r0, r1
 8009338:	4770      	bx	lr
	...

0800933c <__swsetup_r>:
 800933c:	4b32      	ldr	r3, [pc, #200]	; (8009408 <__swsetup_r+0xcc>)
 800933e:	b570      	push	{r4, r5, r6, lr}
 8009340:	681d      	ldr	r5, [r3, #0]
 8009342:	4606      	mov	r6, r0
 8009344:	460c      	mov	r4, r1
 8009346:	b125      	cbz	r5, 8009352 <__swsetup_r+0x16>
 8009348:	69ab      	ldr	r3, [r5, #24]
 800934a:	b913      	cbnz	r3, 8009352 <__swsetup_r+0x16>
 800934c:	4628      	mov	r0, r5
 800934e:	f7ff fd2f 	bl	8008db0 <__sinit>
 8009352:	4b2e      	ldr	r3, [pc, #184]	; (800940c <__swsetup_r+0xd0>)
 8009354:	429c      	cmp	r4, r3
 8009356:	d10f      	bne.n	8009378 <__swsetup_r+0x3c>
 8009358:	686c      	ldr	r4, [r5, #4]
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009360:	0719      	lsls	r1, r3, #28
 8009362:	d42c      	bmi.n	80093be <__swsetup_r+0x82>
 8009364:	06dd      	lsls	r5, r3, #27
 8009366:	d411      	bmi.n	800938c <__swsetup_r+0x50>
 8009368:	2309      	movs	r3, #9
 800936a:	6033      	str	r3, [r6, #0]
 800936c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009370:	81a3      	strh	r3, [r4, #12]
 8009372:	f04f 30ff 	mov.w	r0, #4294967295
 8009376:	e03e      	b.n	80093f6 <__swsetup_r+0xba>
 8009378:	4b25      	ldr	r3, [pc, #148]	; (8009410 <__swsetup_r+0xd4>)
 800937a:	429c      	cmp	r4, r3
 800937c:	d101      	bne.n	8009382 <__swsetup_r+0x46>
 800937e:	68ac      	ldr	r4, [r5, #8]
 8009380:	e7eb      	b.n	800935a <__swsetup_r+0x1e>
 8009382:	4b24      	ldr	r3, [pc, #144]	; (8009414 <__swsetup_r+0xd8>)
 8009384:	429c      	cmp	r4, r3
 8009386:	bf08      	it	eq
 8009388:	68ec      	ldreq	r4, [r5, #12]
 800938a:	e7e6      	b.n	800935a <__swsetup_r+0x1e>
 800938c:	0758      	lsls	r0, r3, #29
 800938e:	d512      	bpl.n	80093b6 <__swsetup_r+0x7a>
 8009390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009392:	b141      	cbz	r1, 80093a6 <__swsetup_r+0x6a>
 8009394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009398:	4299      	cmp	r1, r3
 800939a:	d002      	beq.n	80093a2 <__swsetup_r+0x66>
 800939c:	4630      	mov	r0, r6
 800939e:	f7fd fa81 	bl	80068a4 <_free_r>
 80093a2:	2300      	movs	r3, #0
 80093a4:	6363      	str	r3, [r4, #52]	; 0x34
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	2300      	movs	r3, #0
 80093b0:	6063      	str	r3, [r4, #4]
 80093b2:	6923      	ldr	r3, [r4, #16]
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	f043 0308 	orr.w	r3, r3, #8
 80093bc:	81a3      	strh	r3, [r4, #12]
 80093be:	6923      	ldr	r3, [r4, #16]
 80093c0:	b94b      	cbnz	r3, 80093d6 <__swsetup_r+0x9a>
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093cc:	d003      	beq.n	80093d6 <__swsetup_r+0x9a>
 80093ce:	4621      	mov	r1, r4
 80093d0:	4630      	mov	r0, r6
 80093d2:	f000 f84d 	bl	8009470 <__smakebuf_r>
 80093d6:	89a0      	ldrh	r0, [r4, #12]
 80093d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093dc:	f010 0301 	ands.w	r3, r0, #1
 80093e0:	d00a      	beq.n	80093f8 <__swsetup_r+0xbc>
 80093e2:	2300      	movs	r3, #0
 80093e4:	60a3      	str	r3, [r4, #8]
 80093e6:	6963      	ldr	r3, [r4, #20]
 80093e8:	425b      	negs	r3, r3
 80093ea:	61a3      	str	r3, [r4, #24]
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	b943      	cbnz	r3, 8009402 <__swsetup_r+0xc6>
 80093f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093f4:	d1ba      	bne.n	800936c <__swsetup_r+0x30>
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	0781      	lsls	r1, r0, #30
 80093fa:	bf58      	it	pl
 80093fc:	6963      	ldrpl	r3, [r4, #20]
 80093fe:	60a3      	str	r3, [r4, #8]
 8009400:	e7f4      	b.n	80093ec <__swsetup_r+0xb0>
 8009402:	2000      	movs	r0, #0
 8009404:	e7f7      	b.n	80093f6 <__swsetup_r+0xba>
 8009406:	bf00      	nop
 8009408:	20000028 	.word	0x20000028
 800940c:	0800adbc 	.word	0x0800adbc
 8009410:	0800addc 	.word	0x0800addc
 8009414:	0800ad9c 	.word	0x0800ad9c

08009418 <abort>:
 8009418:	b508      	push	{r3, lr}
 800941a:	2006      	movs	r0, #6
 800941c:	f000 f898 	bl	8009550 <raise>
 8009420:	2001      	movs	r0, #1
 8009422:	f000 f921 	bl	8009668 <_exit>

08009426 <__swhatbuf_r>:
 8009426:	b570      	push	{r4, r5, r6, lr}
 8009428:	460e      	mov	r6, r1
 800942a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942e:	2900      	cmp	r1, #0
 8009430:	b096      	sub	sp, #88	; 0x58
 8009432:	4614      	mov	r4, r2
 8009434:	461d      	mov	r5, r3
 8009436:	da08      	bge.n	800944a <__swhatbuf_r+0x24>
 8009438:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	602a      	str	r2, [r5, #0]
 8009440:	061a      	lsls	r2, r3, #24
 8009442:	d410      	bmi.n	8009466 <__swhatbuf_r+0x40>
 8009444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009448:	e00e      	b.n	8009468 <__swhatbuf_r+0x42>
 800944a:	466a      	mov	r2, sp
 800944c:	f000 f89c 	bl	8009588 <_fstat_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	dbf1      	blt.n	8009438 <__swhatbuf_r+0x12>
 8009454:	9a01      	ldr	r2, [sp, #4]
 8009456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800945a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800945e:	425a      	negs	r2, r3
 8009460:	415a      	adcs	r2, r3
 8009462:	602a      	str	r2, [r5, #0]
 8009464:	e7ee      	b.n	8009444 <__swhatbuf_r+0x1e>
 8009466:	2340      	movs	r3, #64	; 0x40
 8009468:	2000      	movs	r0, #0
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	b016      	add	sp, #88	; 0x58
 800946e:	bd70      	pop	{r4, r5, r6, pc}

08009470 <__smakebuf_r>:
 8009470:	898b      	ldrh	r3, [r1, #12]
 8009472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009474:	079d      	lsls	r5, r3, #30
 8009476:	4606      	mov	r6, r0
 8009478:	460c      	mov	r4, r1
 800947a:	d507      	bpl.n	800948c <__smakebuf_r+0x1c>
 800947c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	6123      	str	r3, [r4, #16]
 8009484:	2301      	movs	r3, #1
 8009486:	6163      	str	r3, [r4, #20]
 8009488:	b002      	add	sp, #8
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	ab01      	add	r3, sp, #4
 800948e:	466a      	mov	r2, sp
 8009490:	f7ff ffc9 	bl	8009426 <__swhatbuf_r>
 8009494:	9900      	ldr	r1, [sp, #0]
 8009496:	4605      	mov	r5, r0
 8009498:	4630      	mov	r0, r6
 800949a:	f7fd fa6f 	bl	800697c <_malloc_r>
 800949e:	b948      	cbnz	r0, 80094b4 <__smakebuf_r+0x44>
 80094a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a4:	059a      	lsls	r2, r3, #22
 80094a6:	d4ef      	bmi.n	8009488 <__smakebuf_r+0x18>
 80094a8:	f023 0303 	bic.w	r3, r3, #3
 80094ac:	f043 0302 	orr.w	r3, r3, #2
 80094b0:	81a3      	strh	r3, [r4, #12]
 80094b2:	e7e3      	b.n	800947c <__smakebuf_r+0xc>
 80094b4:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <__smakebuf_r+0x7c>)
 80094b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	6020      	str	r0, [r4, #0]
 80094bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c0:	81a3      	strh	r3, [r4, #12]
 80094c2:	9b00      	ldr	r3, [sp, #0]
 80094c4:	6163      	str	r3, [r4, #20]
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	6120      	str	r0, [r4, #16]
 80094ca:	b15b      	cbz	r3, 80094e4 <__smakebuf_r+0x74>
 80094cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d0:	4630      	mov	r0, r6
 80094d2:	f000 f86b 	bl	80095ac <_isatty_r>
 80094d6:	b128      	cbz	r0, 80094e4 <__smakebuf_r+0x74>
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	f023 0303 	bic.w	r3, r3, #3
 80094de:	f043 0301 	orr.w	r3, r3, #1
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	89a0      	ldrh	r0, [r4, #12]
 80094e6:	4305      	orrs	r5, r0
 80094e8:	81a5      	strh	r5, [r4, #12]
 80094ea:	e7cd      	b.n	8009488 <__smakebuf_r+0x18>
 80094ec:	08008d49 	.word	0x08008d49

080094f0 <_malloc_usable_size_r>:
 80094f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f4:	1f18      	subs	r0, r3, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bfbc      	itt	lt
 80094fa:	580b      	ldrlt	r3, [r1, r0]
 80094fc:	18c0      	addlt	r0, r0, r3
 80094fe:	4770      	bx	lr

08009500 <_raise_r>:
 8009500:	291f      	cmp	r1, #31
 8009502:	b538      	push	{r3, r4, r5, lr}
 8009504:	4604      	mov	r4, r0
 8009506:	460d      	mov	r5, r1
 8009508:	d904      	bls.n	8009514 <_raise_r+0x14>
 800950a:	2316      	movs	r3, #22
 800950c:	6003      	str	r3, [r0, #0]
 800950e:	f04f 30ff 	mov.w	r0, #4294967295
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009516:	b112      	cbz	r2, 800951e <_raise_r+0x1e>
 8009518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800951c:	b94b      	cbnz	r3, 8009532 <_raise_r+0x32>
 800951e:	4620      	mov	r0, r4
 8009520:	f000 f830 	bl	8009584 <_getpid_r>
 8009524:	462a      	mov	r2, r5
 8009526:	4601      	mov	r1, r0
 8009528:	4620      	mov	r0, r4
 800952a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800952e:	f000 b817 	b.w	8009560 <_kill_r>
 8009532:	2b01      	cmp	r3, #1
 8009534:	d00a      	beq.n	800954c <_raise_r+0x4c>
 8009536:	1c59      	adds	r1, r3, #1
 8009538:	d103      	bne.n	8009542 <_raise_r+0x42>
 800953a:	2316      	movs	r3, #22
 800953c:	6003      	str	r3, [r0, #0]
 800953e:	2001      	movs	r0, #1
 8009540:	e7e7      	b.n	8009512 <_raise_r+0x12>
 8009542:	2400      	movs	r4, #0
 8009544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009548:	4628      	mov	r0, r5
 800954a:	4798      	blx	r3
 800954c:	2000      	movs	r0, #0
 800954e:	e7e0      	b.n	8009512 <_raise_r+0x12>

08009550 <raise>:
 8009550:	4b02      	ldr	r3, [pc, #8]	; (800955c <raise+0xc>)
 8009552:	4601      	mov	r1, r0
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	f7ff bfd3 	b.w	8009500 <_raise_r>
 800955a:	bf00      	nop
 800955c:	20000028 	.word	0x20000028

08009560 <_kill_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	4d07      	ldr	r5, [pc, #28]	; (8009580 <_kill_r+0x20>)
 8009564:	2300      	movs	r3, #0
 8009566:	4604      	mov	r4, r0
 8009568:	4608      	mov	r0, r1
 800956a:	4611      	mov	r1, r2
 800956c:	602b      	str	r3, [r5, #0]
 800956e:	f000 f84d 	bl	800960c <_kill>
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	d102      	bne.n	800957c <_kill_r+0x1c>
 8009576:	682b      	ldr	r3, [r5, #0]
 8009578:	b103      	cbz	r3, 800957c <_kill_r+0x1c>
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	bd38      	pop	{r3, r4, r5, pc}
 800957e:	bf00      	nop
 8009580:	20004820 	.word	0x20004820

08009584 <_getpid_r>:
 8009584:	f000 b832 	b.w	80095ec <_getpid>

08009588 <_fstat_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	; (80095a8 <_fstat_r+0x20>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	4611      	mov	r1, r2
 8009594:	602b      	str	r3, [r5, #0]
 8009596:	f000 f821 	bl	80095dc <_fstat>
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d102      	bne.n	80095a4 <_fstat_r+0x1c>
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	b103      	cbz	r3, 80095a4 <_fstat_r+0x1c>
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	bf00      	nop
 80095a8:	20004820 	.word	0x20004820

080095ac <_isatty_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d06      	ldr	r5, [pc, #24]	; (80095c8 <_isatty_r+0x1c>)
 80095b0:	2300      	movs	r3, #0
 80095b2:	4604      	mov	r4, r0
 80095b4:	4608      	mov	r0, r1
 80095b6:	602b      	str	r3, [r5, #0]
 80095b8:	f000 f820 	bl	80095fc <_isatty>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	d102      	bne.n	80095c6 <_isatty_r+0x1a>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	b103      	cbz	r3, 80095c6 <_isatty_r+0x1a>
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	bd38      	pop	{r3, r4, r5, pc}
 80095c8:	20004820 	.word	0x20004820

080095cc <_close>:
 80095cc:	4b02      	ldr	r3, [pc, #8]	; (80095d8 <_close+0xc>)
 80095ce:	2258      	movs	r2, #88	; 0x58
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	f04f 30ff 	mov.w	r0, #4294967295
 80095d6:	4770      	bx	lr
 80095d8:	20004820 	.word	0x20004820

080095dc <_fstat>:
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <_fstat+0xc>)
 80095de:	2258      	movs	r2, #88	; 0x58
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	f04f 30ff 	mov.w	r0, #4294967295
 80095e6:	4770      	bx	lr
 80095e8:	20004820 	.word	0x20004820

080095ec <_getpid>:
 80095ec:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <_getpid+0xc>)
 80095ee:	2258      	movs	r2, #88	; 0x58
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	f04f 30ff 	mov.w	r0, #4294967295
 80095f6:	4770      	bx	lr
 80095f8:	20004820 	.word	0x20004820

080095fc <_isatty>:
 80095fc:	4b02      	ldr	r3, [pc, #8]	; (8009608 <_isatty+0xc>)
 80095fe:	2258      	movs	r2, #88	; 0x58
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	2000      	movs	r0, #0
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	20004820 	.word	0x20004820

0800960c <_kill>:
 800960c:	4b02      	ldr	r3, [pc, #8]	; (8009618 <_kill+0xc>)
 800960e:	2258      	movs	r2, #88	; 0x58
 8009610:	601a      	str	r2, [r3, #0]
 8009612:	f04f 30ff 	mov.w	r0, #4294967295
 8009616:	4770      	bx	lr
 8009618:	20004820 	.word	0x20004820

0800961c <_lseek>:
 800961c:	4b02      	ldr	r3, [pc, #8]	; (8009628 <_lseek+0xc>)
 800961e:	2258      	movs	r2, #88	; 0x58
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	f04f 30ff 	mov.w	r0, #4294967295
 8009626:	4770      	bx	lr
 8009628:	20004820 	.word	0x20004820

0800962c <_read>:
 800962c:	4b02      	ldr	r3, [pc, #8]	; (8009638 <_read+0xc>)
 800962e:	2258      	movs	r2, #88	; 0x58
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	f04f 30ff 	mov.w	r0, #4294967295
 8009636:	4770      	bx	lr
 8009638:	20004820 	.word	0x20004820

0800963c <_sbrk>:
 800963c:	4a04      	ldr	r2, [pc, #16]	; (8009650 <_sbrk+0x14>)
 800963e:	6811      	ldr	r1, [r2, #0]
 8009640:	4603      	mov	r3, r0
 8009642:	b909      	cbnz	r1, 8009648 <_sbrk+0xc>
 8009644:	4903      	ldr	r1, [pc, #12]	; (8009654 <_sbrk+0x18>)
 8009646:	6011      	str	r1, [r2, #0]
 8009648:	6810      	ldr	r0, [r2, #0]
 800964a:	4403      	add	r3, r0
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	4770      	bx	lr
 8009650:	20004828 	.word	0x20004828
 8009654:	2000482c 	.word	0x2000482c

08009658 <_write>:
 8009658:	4b02      	ldr	r3, [pc, #8]	; (8009664 <_write+0xc>)
 800965a:	2258      	movs	r2, #88	; 0x58
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	f04f 30ff 	mov.w	r0, #4294967295
 8009662:	4770      	bx	lr
 8009664:	20004820 	.word	0x20004820

08009668 <_exit>:
 8009668:	e7fe      	b.n	8009668 <_exit>
	...

0800966c <_init>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	bf00      	nop
 8009670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009672:	bc08      	pop	{r3}
 8009674:	469e      	mov	lr, r3
 8009676:	4770      	bx	lr

08009678 <_fini>:
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967a:	bf00      	nop
 800967c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967e:	bc08      	pop	{r3}
 8009680:	469e      	mov	lr, r3
 8009682:	4770      	bx	lr
